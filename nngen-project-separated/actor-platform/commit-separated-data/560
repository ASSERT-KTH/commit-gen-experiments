BLEU SCORE: 0.4317280873295659

TEST MSG: fix ( server : push ) : clean up apple push logic
GENERATED MSG: refactor ( server : push ) : make apple push accessible via extension

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushConfig . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushConfig . scala < nl > new file mode 100644 < nl > index 0000000 . . a74384d < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushConfig . scala < nl > @ @ - 0 , 0 + 1 , 29 @ @ < nl > + package im . actor . server . sequence < nl > + < nl > + import com . typesafe . config . Config < nl > + < nl > + import scala . collection . JavaConversions . _ < nl > + import scala . util . Try < nl > + < nl > + final case class ApplePushConfig ( certs : List [ ApnsCert ] ) < nl > + < nl > + object ApplePushConfig { < nl > + def load ( config : Config ) : ApplePushConfig = < nl > + ApplePushConfig ( < nl > + certs = config . getConfigList ( " certs " ) . toList map ApnsCert . fromConfig < nl > + ) < nl > + } < nl > + < nl > + final case class ApnsCert ( key : Int , path : String , password : String , isSandbox : Boolean , isVoip : Boolean ) < nl > + < nl > + object ApnsCert { < nl > + def fromConfig ( config : Config ) : ApnsCert = { < nl > + ApnsCert ( < nl > + config . getInt ( " key " ) , < nl > + config . getString ( " path " ) , < nl > + config . getString ( " password " ) , < nl > + Try ( config . getBoolean ( " voip " ) ) . getOrElse ( false ) , < nl > + Try ( config . getBoolean ( " sandbox " ) ) . getOrElse ( false ) < nl > + ) < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala < nl > index eafd892 . . 239d65d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala < nl > @ @ - 7 , 44 + 7 , 17 @ @ import akka . actor . { ActorSystem , ExtendedActorSystem , Extension , ExtensionId , Ex < nl > import akka . event . Logging < nl > import com . relayrides . pushy . apns . ApnsClient < nl > import com . relayrides . pushy . apns . util . SimpleApnsPushNotification < nl > - import com . typesafe . config . Config < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . model . push . ApplePushCredentials < nl > import im . actor . server . persist . push . ApplePushCredentialsRepo < nl > import im . actor . util . log . AnyRefLogSource < nl > < nl > - import scala . collection . JavaConversions . _ < nl > import scala . collection . concurrent . TrieMap < nl > import scala . concurrent . Future < nl > import scala . concurrent . blocking < nl > import scala . concurrent . duration . _ < nl > import scala . util . Try < nl > < nl > - final case class ApplePushClientConfig ( certs : List [ ApnsCert ] ) < nl > - < nl > - object ApplePushClientConfig { < nl > - def load ( config : Config ) : ApplePushClientConfig = { < nl > - ApplePushClientConfig ( < nl > - certs = config . getConfigList ( " certs " ) . toList map ApnsCert . fromConfig < nl > - ) < nl > - < nl > - } < nl > - } < nl > - < nl > - final case class ApnsCert ( key : Int , path : String , password : String , isSandbox : Boolean , isVoip : Boolean ) < nl > - < nl > - object ApnsCert { < nl > - def fromConfig ( config : Config ) : ApnsCert = { < nl > - ApnsCert ( < nl > - config . getInt ( " key " ) , < nl > - config . getString ( " path " ) , < nl > - config . getString ( " password " ) , < nl > - Try ( config . getBoolean ( " voip " ) ) . getOrElse ( false ) , < nl > - Try ( config . getBoolean ( " sandbox " ) ) . getOrElse ( false ) < nl > - ) < nl > - } < nl > - } < nl > - < nl > object ApplePushExtension extends ExtensionId [ ApplePushExtension ] with ExtensionIdProvider { < nl > override def createExtension ( system : ExtendedActorSystem ) : ApplePushExtension = new ApplePushExtension ( system ) < nl > < nl > @ @ - 61 , 7 + 34 , 7 @ @ final class ApplePushExtension ( system : ActorSystem ) extends Extension with AnyRe < nl > < nl > private lazy val db = DbExtension ( system ) . db < nl > < nl > - private val config = ApplePushClientConfig . load ( < nl > + private val config = ApplePushConfig . load ( < nl > Try ( system . settings . config . getConfig ( " services . apple . push " ) ) < nl > . getOrElse ( system . settings . config . getConfig ( " push . apple " ) ) < nl > ) < nl > @ @ - 75 , 12 + 48 , 10 @ @ final class ApplePushExtension ( system : ActorSystem ) extends Extension with AnyRe < nl > < nl > def voipClientFuture ( key : Int ) : Option [ Future [ Client ] ] = voipClients . get ( key ) < nl > < nl > - def findCreds ( authId : Long ) : Future [ Option [ ApplePushCredentials ] ] = db . run ( ApplePushCredentialsRepo . find ( authId ) ) < nl > - < nl > - def fetchCreds ( authIds : Set [ Long ] ) : Future [ Seq [ ApplePushCredentials ] ] = db . run ( ApplePushCredentialsRepo . find ( authIds ) ) < nl > - < nl > def fetchVoipCreds ( authIds : Set [ Long ] ) : Future [ Seq [ ApplePushCredentials ] ] = fetchCreds ( authIds ) map ( _ filter ( _ . isVoip ) ) < nl > < nl > + private def fetchCreds ( authIds : Set [ Long ] ) : Future [ Seq [ ApplePushCredentials ] ] = db . run ( ApplePushCredentialsRepo . find ( authIds ) ) < nl > + < nl > private def createClient ( cert : ApnsCert ) : ( Int , Future [ Client ] ) = { < nl > val host = cert . isSandbox match { < nl > case false ⇒ ApnsClient . PRODUCTION _ APNS _ HOST < nl > @ @ - 91 , 7 + 62 , 7 @ @ final class ApplePushExtension ( system : ActorSystem ) extends Extension with AnyRe < nl > blocking { < nl > val client = new ApnsClient [ SimpleApnsPushNotification ] ( new File ( cert . path ) , cert . password ) < nl > client . connect ( host ) . get ( 20 , TimeUnit . SECONDS ) < nl > - log . debug ( " Established client connection with push key : { } " , cert . key ) < nl > + log . debug ( " Established client connection for cert : { } , is voip : { } " , cert . key , cert . isVoip ) < nl > client < nl > } < nl > } < nl > @ @ - 115 , 7 + 86 , 7 @ @ final class ApplePushExtension ( system : ActorSystem ) extends Extension with AnyRe < nl > / / recreate and try to connect client , if client connection failed < nl > / / during previous creation < nl > private def recreateClient ( cert : ApnsCert ) : Unit = { < nl > - log . debug ( " Retry to create client for cert : { } " , cert . key ) < nl > + log . debug ( " Retry to create client for cert : { } , is voip " , cert . key , cert . isVoip ) < nl > val targetMap = if ( cert . isVoip ) voipClients else clients < nl > targetMap - = cert . key < nl > targetMap + = createClient ( cert ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / PushFutureListener . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / PushFutureListener . scala < nl > index 89e16c1 . . 0acefc6 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / PushFutureListener . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / PushFutureListener . scala < nl > @ @ - 6 , 10 + 6 , 10 @ @ import com . relayrides . pushy . apns . PushNotificationResponse < nl > import com . relayrides . pushy . apns . util . SimpleApnsPushNotification < nl > import im . actor . server . model . push . ApplePushCredentials < nl > import im . actor . util . log . AnyRefLogSource < nl > - import io . netty . util . concurrent . { Future , GenericFutureListener } < nl > + import io . netty . util . concurrent . { Future , GenericFutureListener } < nl > import scodec . bits . BitVector < nl > < nl > - import scala . util . { Failure , Success , Try } < nl > + import scala . util . { Failure , Success , Try } < nl > < nl > final class PushFutureListener ( userId : Int , creds : ApplePushCredentials ) ( implicit system : ActorSystem ) < nl > extends GenericFutureListener [ Future [ PushNotificationResponse [ SimpleApnsPushNotification ] ] ] with AnyRefLogSource { < nl > @ @ - 22 , 14 + 22 , 20 @ @ final class PushFutureListener ( userId : Int , creds : ApplePushCredentials ) ( implici < nl > def operationComplete ( future : Future [ PushNotificationResponse [ SimpleApnsPushNotification ] ] ) : Unit = { < nl > Try ( future . get ( ) ) match { < nl > case Success ( response ) ⇒ < nl > - log . debug ( " APNS send complete , user : { } , token : { } , apnsKey : { } , isVoip : { } " , < nl > - userId , tokenString , creds . apnsKey , creds . isVoip ) < nl > + log . debug ( < nl > + " APNS send complete , user : { } , token : { } , apnsKey : { } , isVoip : { } " , < nl > + userId , tokenString , creds . apnsKey , creds . isVoip < nl > + ) < nl > if ( response . isAccepted ) { < nl > - log . debug ( " Successfully delivered APNS notification to user : { } , token : { } , apnsKey : { } , isVoip : { } " , < nl > - userId , tokenString , creds . apnsKey , creds . isVoip ) < nl > + log . debug ( < nl > + " Successfully delivered APNS notification to user : { } , token : { } , apnsKey : { } , isVoip : { } " , < nl > + userId , tokenString , creds . apnsKey , creds . isVoip < nl > + ) < nl > } else { < nl > - log . warning ( s " APNS rejected notification for user : { } , token : { } , apnsKey : { } , isVoip : { } , with reason : $ { response . getRejectionReason } " , < nl > - userId , tokenString , creds . apnsKey , creds . isVoip ) < nl > + log . warning ( < nl > + s " APNS rejected notification for user : { } , token : { } , apnsKey : { } , isVoip : { } , with reason : $ { response . getRejectionReason } " , < nl > + userId , tokenString , creds . apnsKey , creds . isVoip < nl > + ) < nl > Option ( response . getTokenInvalidationTimestamp ) foreach { ts ⇒ < nl > log . warning ( " APNS token : { } for user : { } invalidated at { } . Deleting token now " , tokenString , userId , ts ) < nl > seqUpdExt . deleteApplePushCredentials ( tokenBytes ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala < nl > index 1d1154f . . 9fb3daf 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala < nl > @ @ - 212 , 20 + 212 , 18 @ @ final class SeqUpdatesExtension ( _ system : ActorSystem ) extends Extension { < nl > deliveryId = deliveryId < nl > ) < nl > < nl > - def registerGooglePushCredentials ( creds : GooglePushCredentialsModel ) = registerPushCredentials ( creds ) < nl > + def registerGooglePushCredentials ( creds : GooglePushCredentialsModel ) = < nl > + registerPushCredentials ( creds . authId , RegisterPushCredentials ( ) . withGoogle ( creds ) ) < nl > < nl > - def registerApplePushCredentials ( creds : ApplePushCredentialsModel ) = registerPushCredentials ( creds ) < nl > + def registerApplePushCredentials ( creds : ApplePushCredentialsModel ) = < nl > + registerPushCredentials ( creds . authId , RegisterPushCredentials ( ) . withApple ( creds ) ) < nl > < nl > - def registerActorPushCredentials ( creds : ActorPushCredentialsModel ) = registerPushCredentials ( creds ) < nl > + def registerActorPushCredentials ( creds : ActorPushCredentialsModel ) = < nl > + registerPushCredentials ( creds . authId , RegisterPushCredentials ( ) . withActor ( creds ) ) < nl > < nl > / / TODO : real future < nl > - def registerPushCredentials ( creds : PushCredentials ) = < nl > - withAuthSession ( creds . authId ) { session ⇒ < nl > - val register = creds match { < nl > - case c : GooglePushCredentialsModel ⇒ RegisterPushCredentials ( ) . withGoogle ( c ) < nl > - case c : ApplePushCredentialsModel ⇒ RegisterPushCredentials ( ) . withApple ( c ) < nl > - case c : ActorPushCredentialsModel ⇒ RegisterPushCredentials ( ) . withActor ( c ) < nl > - } < nl > + private def registerPushCredentials ( authId : Long , register : RegisterPushCredentials ) = < nl > + withAuthSession ( authId ) { session ⇒ < nl > region . ref ! Envelope ( session . userId ) . withRegisterPushCredentials ( register ) < nl > Future . successful ( ( ) ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala < nl > index 8526f19 . . 067e6a6 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala < nl > @ @ - 110 , 13 + 110 , 11 @ @ private [ sequence ] final class VendorPush ( userId : Int ) extends Actor with ActorLo < nl > private val settingsControl = context . actorOf ( SettingsControl . props ( userId ) , " settings " ) < nl > private val googlePushProvider = new GooglePushProvider ( userId , context . system ) < nl > private val applePushProvider = new ApplePushProvider ( userId ) ( context . system ) < nl > + private val actorPushProvider = ActorPush ( context . system ) < nl > < nl > private var mapping : Map [ PushCredentials , PushCredentialsInfo ] = Map . empty < nl > private var notificationSettings = AllNotificationSettings ( ) < nl > < nl > - private def remove ( creds : PushCredentials ) : Unit = < nl > - mapping - = creds < nl > - < nl > init ( ) < nl > < nl > def receive = initializing < nl > @ @ - 163 , 7 + 161 , 7 @ @ private [ sequence ] final class VendorPush ( userId : Int ) extends Actor with ActorLo < nl > appleCreds ← ApplePushCredentialsRepo . findByUser ( userId ) < nl > actorCreds ← ActorPushCredentialsRepo . findByUser ( userId ) < nl > google ← DBIO . sequence ( googleCreds map withInfo ) map ( _ . flatten ) < nl > - apple ← DBIO . sequence ( appleCreds map withInfo ) map ( _ . flatten ) < nl > + apple ← DBIO . sequence ( appleCreds . filterNot ( _ . isVoip ) map withInfo ) map ( _ . flatten ) < nl > actor ← DBIO . sequence ( actorCreds map withInfo ) map ( _ . flatten ) < nl > } yield Initialized ( apple + + google + + actor ) ) pipeTo self < nl > } < nl > @ @ - 255 , 7 + 253 , 7 @ @ private [ sequence ] final class VendorPush ( userId : Int ) extends Actor with ActorLo < nl > case c : ApplePushCredentials ⇒ < nl > applePushProvider . deliverInvisible ( seq , c ) < nl > case c : ActorPushCredentials ⇒ < nl > - ActorPush ( context . system ) . deliver ( seq = seq , c ) < nl > + actorPushProvider . deliver ( seq , c ) < nl > } < nl > } < nl > < nl > @ @ - 291 , 28 + 289 , 23 @ @ private [ sequence ] final class VendorPush ( userId : Int ) extends Actor with ActorLo < nl > isVibrationEnabled = isVibrationEnabled < nl > ) < nl > case c : ActorPushCredentials ⇒ < nl > - ActorPush ( context . system ) . deliver ( seq = seq , c ) < nl > + actorPushProvider . deliver ( seq , c ) < nl > } < nl > } < nl > < nl > - private def register ( creds : PushCredentials ) : Unit = { < nl > - db . run ( for { < nl > - _ ← creds match { < nl > - case c : GooglePushCredentials ⇒ GooglePushCredentialsRepo . createOrUpdate ( c ) < nl > - case c : ApplePushCredentials ⇒ ApplePushCredentialsRepo . createOrUpdate ( c ) < nl > - case c : ActorPushCredentials ⇒ ActorPushCredentialsRepo . createOrUpdate ( c ) < nl > - } < nl > - appIdCredsOpt ← withInfo ( creds ) < nl > - } yield { < nl > - appIdCredsOpt . getOrElse ( throw new RuntimeException ( s " Cannot find appId for $ creds " ) ) < nl > - } ) pipeTo self < nl > - } < nl > + private def register ( creds : PushCredentials ) : Unit = < nl > + db . run { < nl > + withInfo ( creds ) map ( _ . getOrElse ( throw new RuntimeException ( s " Cannot find appId for $ creds " ) ) ) < nl > + } pipeTo self < nl > < nl > private def withInfo ( c : PushCredentials ) : DBIO [ Option [ ( PushCredentials , PushCredentialsInfo ) ] ] = < nl > for { < nl > authSessionOpt ← AuthSessionRepo . findByAuthId ( c . authId ) < nl > } yield authSessionOpt map ( s ⇒ c → PushCredentialsInfo ( s . appId , s . id ) ) < nl > < nl > + private def remove ( creds : PushCredentials ) : Unit = < nl > + mapping - = creds < nl > + < nl > private def unregister ( authId : Long ) : Unit = < nl > mapping . keys filter ( _ . authId = = authId ) foreach unregister < nl > < nl > diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20160409233247 _ _ ChangeApplePushCredentialsPrimaryKey . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20160409233247 _ _ ChangeApplePushCredentialsPrimaryKey . sql < nl > new file mode 100644 < nl > index 0000000 . . ac4fc08 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20160409233247 _ _ ChangeApplePushCredentialsPrimaryKey . sql < nl > @ @ - 0 , 0 + 1 , 2 @ @ < nl > + alter table apple _ push _ credentials drop constraint apple _ push _ credentials _ pkey ; < nl > + alter table apple _ push _ credentials add primary key ( auth _ id , is _ voip ) ; < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala < nl > index 6eab3b6 . . 38859ce 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala < nl > @ @ - 15 , 7 + 15 , 7 @ @ final class ApplePushCredentialsTable ( tag : Tag ) extends Table [ ApplePushCredentia < nl > < nl > def token = column [ ByteString ] ( " token " ) < nl > < nl > - def isVoip = column [ Boolean ] ( " is _ voip " ) < nl > + def isVoip = column [ Boolean ] ( " is _ voip " , O . PrimaryKey ) < nl > < nl > def * = ( authId , apnsKey , token , isVoip ) < > ( ( ApplePushCredentials . apply _ ) . tupled , ApplePushCredentials . unapply ) < nl > } < nl > @ @ - 29 , 19 + 29 , 12 @ @ object ApplePushCredentialsRepo { < nl > def byToken ( token : Array [ Byte ] ) : Query [ ApplePushCredentialsTable , ApplePushCredentials , Seq ] = < nl > byToken ( ByteString . copyFrom ( token ) ) < nl > < nl > - def createOrUpdate ( authId : Long , apnsKey : Int , token : ByteString ) ( implicit ec : ExecutionContext ) = { < nl > - for { < nl > - _ ← creds . filterNot ( _ . authId = = = authId ) . filter ( c ⇒ c . apnsKey = = = apnsKey & & c . token = = = token ) . delete < nl > - r ← creds . insertOrUpdate ( ApplePushCredentials ( authId , apnsKey , token ) ) < nl > - } yield r < nl > - } < nl > - < nl > def createOrUpdate ( c : ApplePushCredentials ) = < nl > creds . insertOrUpdate ( c ) < nl > < nl > - def byAuthId ( authId : Rep [ Long ] ) = creds . filter ( _ . authId = = = authId ) < nl > + private def byAuthId ( authId : Rep [ Long ] ) = creds . filter ( _ . authId = = = authId ) < nl > < nl > - val byAuthIdC = Compiled ( byAuthId _ ) < nl > + private val byAuthIdC = Compiled ( byAuthId _ ) < nl > < nl > def find ( authId : Long ) = < nl > byAuthIdC ( authId ) . result . headOption
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala < nl > new file mode 100644 < nl > index 0000000 . . ca5eb10 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala < nl > @ @ - 0 , 0 + 1 , 133 @ @ < nl > + package im . actor . server . sequence < nl > + < nl > + import java . util < nl > + < nl > + import akka . actor . { ActorSystem , ExtendedActorSystem , Extension , ExtensionId , ExtensionIdProvider } < nl > + import akka . event . Logging < nl > + import com . relayrides . pushy . apns . _ < nl > + import com . relayrides . pushy . apns . util . { SSLContextUtil , SimpleApnsPushNotification } < nl > + import com . typesafe . config . Config < nl > + import im . actor . server . db . ActorPostgresDriver . api . _ < nl > + import im . actor . server . db . DbExtension < nl > + < nl > + import scala . collection . JavaConversions . _ < nl > + import scala . concurrent . ExecutionContext < nl > + import scala . concurrent . duration . _ < nl > + import scala . util . Try < nl > + < nl > + case class ApplePushManagerConfig ( certs : List [ ApnsCert ] ) < nl > + < nl > + object ApplePushManagerConfig { < nl > + def load ( config : Config ) : ApplePushManagerConfig = { < nl > + ApplePushManagerConfig ( < nl > + certs = config . getConfigList ( " certs " ) . toList map ApnsCert . fromConfig < nl > + ) < nl > + < nl > + } < nl > + } < nl > + < nl > + case class ApnsCert ( key : Int , path : String , password : String , isSandbox : Boolean , isVoip : Boolean ) < nl > + < nl > + object ApnsCert { < nl > + def fromConfig ( config : Config ) : ApnsCert = { < nl > + ApnsCert ( < nl > + config . getInt ( " key " ) , < nl > + config . getString ( " path " ) , < nl > + config . getString ( " password " ) , < nl > + Try ( config . getBoolean ( " voip " ) ) . getOrElse ( false ) , < nl > + Try ( config . getBoolean ( " sandbox " ) ) . getOrElse ( false ) < nl > + ) < nl > + } < nl > + } < nl > + < nl > + object ApplePushExtension extends ExtensionId [ ApplePushExtension ] with ExtensionIdProvider { < nl > + override def createExtension ( system : ExtendedActorSystem ) : ApplePushExtension = new ApplePushExtension ( system ) < nl > + < nl > + override def lookup ( ) : ExtensionId [ _ < : Extension ] = ApplePushExtension < nl > + } < nl > + < nl > + final class ApplePushExtension ( system : ActorSystem ) extends Extension { < nl > + import system . dispatcher < nl > + < nl > + private val config = ApplePushManagerConfig . load ( < nl > + Try ( system . settings . config . getConfig ( " services . apple . push " ) ) < nl > + . getOrElse ( system . settings . config . getConfig ( " push . apple " ) ) < nl > + ) < nl > + < nl > + private val ( managers , voipManagers ) : ( Map [ Int , PushManager [ SimpleApnsPushNotification ] ] , Map [ Int , PushManager [ SimpleApnsPushNotification ] ] ) = { < nl > + val ( certs , voipCerts ) = config . certs . partition ( ! _ . isVoip ) < nl > + < nl > + ( ( certs map createManager ) . toMap , ( voipCerts map createManager ) . toMap ) < nl > + } < nl > + < nl > + def getInstance ( key : Int ) : Option [ PushManager [ SimpleApnsPushNotification ] ] = managers . get ( key ) < nl > + < nl > + def getVoipInstance ( key : Int ) : Option [ PushManager [ SimpleApnsPushNotification ] ] = voipManagers . get ( key ) < nl > + < nl > + private def createManager ( cert : ApnsCert ) = { < nl > + val env = cert . isSandbox match { < nl > + case false ⇒ ApnsEnvironment . getProductionEnvironment < nl > + case true ⇒ ApnsEnvironment . getSandboxEnvironment < nl > + } < nl > + < nl > + cert . isSandbox match { < nl > + case false ⇒ ApnsEnvironment . getProductionEnvironment < nl > + case true ⇒ ApnsEnvironment . getSandboxEnvironment < nl > + } < nl > + < nl > + val mgr = new PushManager [ SimpleApnsPushNotification ] ( < nl > + env , < nl > + SSLContextUtil . createDefaultSSLContext ( cert . path , cert . password ) , < nl > + null , < nl > + null , < nl > + null , < nl > + new PushManagerConfiguration ( ) , < nl > + s " ActorPushManager - $ { cert . key } " < nl > + ) < nl > + < nl > + mgr . registerRejectedNotificationListener ( new LoggingRejectedNotificationListener ( system ) ) < nl > + < nl > + mgr . registerExpiredTokenListener ( new CleanExpiredTokenListener ( system ) ) < nl > + < nl > + mgr . start ( ) < nl > + < nl > + system . scheduler . schedule ( 10 . seconds , 1 . hour ) { < nl > + mgr . requestExpiredTokens ( ) < nl > + } < nl > + < nl > + ( cert . key , mgr ) < nl > + } < nl > + } < nl > + < nl > + private class LoggingRejectedNotificationListener ( _ system : ActorSystem ) extends RejectedNotificationListener [ SimpleApnsPushNotification ] { < nl > + private implicit val system : ActorSystem = _ system < nl > + private implicit val ec : ExecutionContext = _ system . dispatcher < nl > + private lazy val seqUpdExt = SeqUpdatesExtension ( system ) < nl > + private val log = Logging ( system , getClass ) < nl > + < nl > + override def handleRejectedNotification ( pushManager : PushManager [ _ < : SimpleApnsPushNotification ] , notification : SimpleApnsPushNotification , rejectionReason : RejectedNotificationReason ) : Unit = { < nl > + log . warning ( " APNS rejected notification with reason : { } " , rejectionReason ) < nl > + < nl > + if ( rejectionReason . getErrorCode = = RejectedNotificationReason . INVALID _ TOKEN . getErrorCode ) { < nl > + log . warning ( " Deleting token " ) < nl > + log . error ( " Implement push token deletion " ) < nl > + seqUpdExt . deleteApplePushCredentials ( notification . getToken ) < nl > + } < nl > + } < nl > + } < nl > + < nl > + private class CleanExpiredTokenListener ( _ system : ActorSystem ) extends ExpiredTokenListener [ SimpleApnsPushNotification ] { < nl > + private implicit val system : ActorSystem = _ system < nl > + private val log = Logging ( system , getClass ) < nl > + implicit val db : Database = DbExtension ( system ) . db < nl > + < nl > + override def handleExpiredTokens ( < nl > + pushManager : PushManager [ _ < : SimpleApnsPushNotification ] , < nl > + expiredTokens : util . Collection [ ExpiredToken ] < nl > + ) : Unit = { < nl > + expiredTokens foreach { t ⇒ < nl > + log . warning ( " APNS reported expired token " ) < nl > + / / UserExtension ( system ) . logoutByAppleToken ( t . getToken ) < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushManager . scala < nl > deleted file mode 100644 < nl > index 423e15b . . 0000000 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushManager . scala < nl > + + + / dev / null < nl > @ @ - 1 , 122 + 0 , 0 @ @ < nl > - package im . actor . server . sequence < nl > - < nl > - import java . util < nl > - < nl > - import akka . actor . ActorSystem < nl > - import akka . event . Logging < nl > - import com . relayrides . pushy . apns . _ < nl > - import com . relayrides . pushy . apns . util . { SSLContextUtil , SimpleApnsPushNotification } < nl > - import com . typesafe . config . Config < nl > - import im . actor . server . db . ActorPostgresDriver . api . _ < nl > - import im . actor . server . db . DbExtension < nl > - < nl > - import scala . collection . JavaConversions . _ < nl > - import scala . concurrent . ExecutionContext < nl > - import scala . concurrent . duration . _ < nl > - import scala . util . Try < nl > - < nl > - case class ApplePushManagerConfig ( certs : List [ ApnsCert ] ) < nl > - < nl > - object ApplePushManagerConfig { < nl > - def load ( config : Config ) : ApplePushManagerConfig = { < nl > - ApplePushManagerConfig ( < nl > - certs = config . getConfigList ( " certs " ) . toList map ApnsCert . fromConfig < nl > - ) < nl > - < nl > - } < nl > - } < nl > - < nl > - case class ApnsCert ( key : Int , path : String , password : String , isSandbox : Boolean , isVoip : Boolean ) < nl > - < nl > - object ApnsCert { < nl > - def fromConfig ( config : Config ) : ApnsCert = { < nl > - ApnsCert ( < nl > - config . getInt ( " key " ) , < nl > - config . getString ( " path " ) , < nl > - config . getString ( " password " ) , < nl > - Try ( config . getBoolean ( " voip " ) ) . getOrElse ( false ) , < nl > - Try ( config . getBoolean ( " sandbox " ) ) . getOrElse ( false ) < nl > - ) < nl > - } < nl > - } < nl > - < nl > - final class ApplePushManager ( config : ApplePushManagerConfig , system : ActorSystem ) { < nl > - import system . dispatcher < nl > - < nl > - private val ( managers , voipManagers ) : ( Map [ Int , PushManager [ SimpleApnsPushNotification ] ] , Map [ Int , PushManager [ SimpleApnsPushNotification ] ] ) = { < nl > - val ( certs , voipCerts ) = config . certs . partition ( ! _ . isVoip ) < nl > - < nl > - ( ( certs map createManager ) . toMap , ( voipCerts map createManager ) . toMap ) < nl > - } < nl > - < nl > - def getInstance ( key : Int ) : Option [ PushManager [ SimpleApnsPushNotification ] ] = managers . get ( key ) < nl > - < nl > - def getVoipInstance ( key : Int ) : Option [ PushManager [ SimpleApnsPushNotification ] ] = voipManagers . get ( key ) < nl > - < nl > - private def createManager ( cert : ApnsCert ) = { < nl > - val env = cert . isSandbox match { < nl > - case false ⇒ ApnsEnvironment . getProductionEnvironment < nl > - case true ⇒ ApnsEnvironment . getSandboxEnvironment < nl > - } < nl > - < nl > - cert . isSandbox match { < nl > - case false ⇒ ApnsEnvironment . getProductionEnvironment < nl > - case true ⇒ ApnsEnvironment . getSandboxEnvironment < nl > - } < nl > - < nl > - val mgr = new PushManager [ SimpleApnsPushNotification ] ( < nl > - env , < nl > - SSLContextUtil . createDefaultSSLContext ( cert . path , cert . password ) , < nl > - null , < nl > - null , < nl > - null , < nl > - new PushManagerConfiguration ( ) , < nl > - s " ActorPushManager - $ { cert . key } " < nl > - ) < nl > - < nl > - mgr . registerRejectedNotificationListener ( new LoggingRejectedNotificationListener ( system ) ) < nl > - < nl > - mgr . registerExpiredTokenListener ( new CleanExpiredTokenListener ( system ) ) < nl > - < nl > - mgr . start ( ) < nl > - < nl > - system . scheduler . schedule ( 10 . seconds , 1 . hour ) { < nl > - mgr . requestExpiredTokens ( ) < nl > - } < nl > - < nl > - ( cert . key , mgr ) < nl > - } < nl > - } < nl > - < nl > - private class LoggingRejectedNotificationListener ( _ system : ActorSystem ) extends RejectedNotificationListener [ SimpleApnsPushNotification ] { < nl > - private implicit val system : ActorSystem = _ system < nl > - private implicit val ec : ExecutionContext = _ system . dispatcher < nl > - private lazy val seqUpdExt = SeqUpdatesExtension ( system ) < nl > - private val log = Logging ( system , getClass ) < nl > - < nl > - override def handleRejectedNotification ( pushManager : PushManager [ _ < : SimpleApnsPushNotification ] , notification : SimpleApnsPushNotification , rejectionReason : RejectedNotificationReason ) : Unit = { < nl > - log . warning ( " APNS rejected notification with reason : { } " , rejectionReason ) < nl > - < nl > - if ( rejectionReason . getErrorCode = = RejectedNotificationReason . INVALID _ TOKEN . getErrorCode ) { < nl > - log . warning ( " Deleting token " ) < nl > - log . error ( " Implement push token deletion " ) < nl > - seqUpdExt . deleteApplePushCredentials ( notification . getToken ) < nl > - } < nl > - } < nl > - } < nl > - < nl > - private class CleanExpiredTokenListener ( _ system : ActorSystem ) extends ExpiredTokenListener [ SimpleApnsPushNotification ] { < nl > - private implicit val system : ActorSystem = _ system < nl > - private val log = Logging ( system , getClass ) < nl > - implicit val db : Database = DbExtension ( system ) . db < nl > - < nl > - override def handleExpiredTokens ( < nl > - pushManager : PushManager [ _ < : SimpleApnsPushNotification ] , < nl > - expiredTokens : util . Collection [ ExpiredToken ] < nl > - ) : Unit = { < nl > - expiredTokens foreach { t ⇒ < nl > - log . warning ( " APNS reported expired token " ) < nl > - / / UserExtension ( system ) . logoutByAppleToken ( t . getToken ) < nl > - } < nl > - } < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala < nl > index f71b70b . . f2654bd 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala < nl > @ @ - 8 , 7 + 8 , 7 @ @ import im . actor . server . db . DbExtension < nl > import im . actor . server . model . push . ApplePushCredentials < nl > import im . actor . server . persist . HistoryMessageRepo < nl > < nl > - private [ sequence ] final class ApplePushProvider ( userId : Int , applePushManager : ApplePushManager , system : ActorSystem ) extends PushProvider { < nl > + private [ sequence ] final class ApplePushProvider ( userId : Int , applePushManager : ApplePushExtension , system : ActorSystem ) extends PushProvider { < nl > import system . dispatcher < nl > < nl > private val log = Logging ( system , getClass ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala < nl > index 91c6787 . . 92a4f92 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala < nl > @ @ - 25 , 8 + 25 , 7 @ @ import scala . util . Try < nl > < nl > final class SeqUpdatesExtension ( < nl > _ system : ActorSystem , < nl > - gpm : GooglePushManager , < nl > - apm : ApplePushManager < nl > + gpm : GooglePushManager < nl > ) extends Extension { < nl > < nl > import UserSequenceCommands . _ < nl > @ @ - 35 , 6 + 34 , 7 @ @ final class SeqUpdatesExtension ( < nl > private val log = Logging ( _ system , getClass ) < nl > private implicit val OperationTimeout = Timeout ( 20 . seconds ) < nl > private implicit val system : ActorSystem = _ system < nl > + private lazy val apm = ApplePushExtension ( system ) < nl > < nl > log . debug ( " Getting DbExtension " ) < nl > private implicit lazy val db = DbExtension ( system ) . db < nl > @ @ - 274 , 20 + 274 , 15 @ @ object SeqUpdatesExtension extends ExtensionId [ SeqUpdatesExtension ] with Extensi < nl > < nl > try { < nl > log . debug ( " Initiating SeqUpdatesExtension " ) < nl > - val applePushConfig = ApplePushManagerConfig . load ( < nl > - Try ( system . settings . config . getConfig ( " services . apple . push " ) ) < nl > - . getOrElse ( system . settings . config . getConfig ( " push . apple " ) ) < nl > - ) < nl > - log . debug ( " Apple Push Config : { } " , applePushConfig ) < nl > + < nl > val googlePushConfig = GooglePushManagerConfig . load ( system . settings . config . getConfig ( " services . google . push " ) ) . get < nl > log . debug ( " Google Push Config : { } " , googlePushConfig ) < nl > < nl > val gpm = new GooglePushManager ( googlePushConfig ) < nl > - val apm = new ApplePushManager ( applePushConfig , system ) < nl > < nl > log . debug ( " Starting up " ) < nl > < nl > - new SeqUpdatesExtension ( system , gpm , apm ) < nl > + new SeqUpdatesExtension ( system , gpm ) < nl > } catch { < nl > case e : Throwable ⇒ < nl > log . error ( e , " Failed to start up SeqUpdatesExtension " ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesManagerRegion . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesManagerRegion . scala < nl > index 13ba687 . . 786b762 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesManagerRegion . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesManagerRegion . scala < nl > @ @ - 45 , 7 + 45 , 7 @ @ object SeqUpdatesManagerRegion { < nl > implicit < nl > system : ActorSystem , < nl > googlePushManager : GooglePushManager , < nl > - applePushManager : ApplePushManager < nl > + applePushManager : ApplePushExtension < nl > ) : SeqUpdatesManagerRegion = < nl > start ( UserSequence . props ( googlePushManager , applePushManager ) ) < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UserSequence . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UserSequence . scala < nl > index 99307c3 . . c1fb7f9 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UserSequence . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UserSequence . scala < nl > @ @ - 21 , 7 + 21 , 7 @ @ object UserSequence { < nl > < nl > private [ sequence ] def props ( < nl > googlePushManager : GooglePushManager , < nl > - applePushManager : ApplePushManager < nl > + applePushManager : ApplePushExtension < nl > ) = < nl > Props ( new UserSequence ( googlePushManager , applePushManager ) ) < nl > } < nl > @ @ - 42 , 7 + 42 , 7 @ @ private trait SeqControl { < nl > < nl > private [ sequence ] final class UserSequence ( < nl > googlePushManager : GooglePushManager , < nl > - applePushManager : ApplePushManager < nl > + applePushManager : ApplePushExtension < nl > ) extends Actor with ActorLogging with Stash with SeqControl { < nl > < nl > import UserSequence . _ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala < nl > index b5430c3 . . 5e33981 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala < nl > @ @ - 59 , 7 + 59 , 7 @ @ private [ sequence ] object VendorPush { < nl > < nl > private final case class Initialized ( creds : Seq [ ( PushCredentials , PushCredentialsInfo ) ] ) < nl > < nl > - def props ( userId : Int , googlePushManager : GooglePushManager , applePushManager : ApplePushManager ) = < nl > + def props ( userId : Int , googlePushManager : GooglePushManager , applePushManager : ApplePushExtension ) = < nl > Props ( new VendorPush ( userId , googlePushManager , applePushManager ) ) < nl > } < nl > < nl > @ @ - 125 , 7 + 125 , 7 @ @ private final class SettingsControl ( userId : Int ) extends Actor with ActorLogging < nl > private [ sequence ] final class VendorPush ( < nl > userId : Int , < nl > googlePushManager : GooglePushManager , < nl > - applePushManager : ApplePushManager < nl > + applePushManager : ApplePushExtension < nl > ) extends Actor with ActorLogging with Stash { < nl > < nl > import VendorPush . _

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushConfig . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushConfig . scala 
 new file mode 100644 
 index 0000000 . . a74384d 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushConfig . scala 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + package im . actor . server . sequence 
 + 
 + import com . typesafe . config . Config 
 + 
 + import scala . collection . JavaConversions . _ 
 + import scala . util . Try 
 + 
 + final case class ApplePushConfig ( certs : List [ ApnsCert ] ) 
 + 
 + object ApplePushConfig { 
 + def load ( config : Config ) : ApplePushConfig = 
 + ApplePushConfig ( 
 + certs = config . getConfigList ( " certs " ) . toList map ApnsCert . fromConfig 
 + ) 
 + } 
 + 
 + final case class ApnsCert ( key : Int , path : String , password : String , isSandbox : Boolean , isVoip : Boolean ) 
 + 
 + object ApnsCert { 
 + def fromConfig ( config : Config ) : ApnsCert = { 
 + ApnsCert ( 
 + config . getInt ( " key " ) , 
 + config . getString ( " path " ) , 
 + config . getString ( " password " ) , 
 + Try ( config . getBoolean ( " voip " ) ) . getOrElse ( false ) , 
 + Try ( config . getBoolean ( " sandbox " ) ) . getOrElse ( false ) 
 + ) 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala 
 index eafd892 . . 239d65d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala 
 @ @ - 7 , 44 + 7 , 17 @ @ import akka . actor . { ActorSystem , ExtendedActorSystem , Extension , ExtensionId , Ex 
 import akka . event . Logging 
 import com . relayrides . pushy . apns . ApnsClient 
 import com . relayrides . pushy . apns . util . SimpleApnsPushNotification 
 - import com . typesafe . config . Config 
 import im . actor . server . db . DbExtension 
 import im . actor . server . model . push . ApplePushCredentials 
 import im . actor . server . persist . push . ApplePushCredentialsRepo 
 import im . actor . util . log . AnyRefLogSource 
 
 - import scala . collection . JavaConversions . _ 
 import scala . collection . concurrent . TrieMap 
 import scala . concurrent . Future 
 import scala . concurrent . blocking 
 import scala . concurrent . duration . _ 
 import scala . util . Try 
 
 - final case class ApplePushClientConfig ( certs : List [ ApnsCert ] ) 
 - 
 - object ApplePushClientConfig { 
 - def load ( config : Config ) : ApplePushClientConfig = { 
 - ApplePushClientConfig ( 
 - certs = config . getConfigList ( " certs " ) . toList map ApnsCert . fromConfig 
 - ) 
 - 
 - } 
 - } 
 - 
 - final case class ApnsCert ( key : Int , path : String , password : String , isSandbox : Boolean , isVoip : Boolean ) 
 - 
 - object ApnsCert { 
 - def fromConfig ( config : Config ) : ApnsCert = { 
 - ApnsCert ( 
 - config . getInt ( " key " ) , 
 - config . getString ( " path " ) , 
 - config . getString ( " password " ) , 
 - Try ( config . getBoolean ( " voip " ) ) . getOrElse ( false ) , 
 - Try ( config . getBoolean ( " sandbox " ) ) . getOrElse ( false ) 
 - ) 
 - } 
 - } 
 - 
 object ApplePushExtension extends ExtensionId [ ApplePushExtension ] with ExtensionIdProvider { 
 override def createExtension ( system : ExtendedActorSystem ) : ApplePushExtension = new ApplePushExtension ( system ) 
 
 @ @ - 61 , 7 + 34 , 7 @ @ final class ApplePushExtension ( system : ActorSystem ) extends Extension with AnyRe 
 
 private lazy val db = DbExtension ( system ) . db 
 
 - private val config = ApplePushClientConfig . load ( 
 + private val config = ApplePushConfig . load ( 
 Try ( system . settings . config . getConfig ( " services . apple . push " ) ) 
 . getOrElse ( system . settings . config . getConfig ( " push . apple " ) ) 
 ) 
 @ @ - 75 , 12 + 48 , 10 @ @ final class ApplePushExtension ( system : ActorSystem ) extends Extension with AnyRe 
 
 def voipClientFuture ( key : Int ) : Option [ Future [ Client ] ] = voipClients . get ( key ) 
 
 - def findCreds ( authId : Long ) : Future [ Option [ ApplePushCredentials ] ] = db . run ( ApplePushCredentialsRepo . find ( authId ) ) 
 - 
 - def fetchCreds ( authIds : Set [ Long ] ) : Future [ Seq [ ApplePushCredentials ] ] = db . run ( ApplePushCredentialsRepo . find ( authIds ) ) 
 - 
 def fetchVoipCreds ( authIds : Set [ Long ] ) : Future [ Seq [ ApplePushCredentials ] ] = fetchCreds ( authIds ) map ( _ filter ( _ . isVoip ) ) 
 
 + private def fetchCreds ( authIds : Set [ Long ] ) : Future [ Seq [ ApplePushCredentials ] ] = db . run ( ApplePushCredentialsRepo . find ( authIds ) ) 
 + 
 private def createClient ( cert : ApnsCert ) : ( Int , Future [ Client ] ) = { 
 val host = cert . isSandbox match { 
 case false ⇒ ApnsClient . PRODUCTION _ APNS _ HOST 
 @ @ - 91 , 7 + 62 , 7 @ @ final class ApplePushExtension ( system : ActorSystem ) extends Extension with AnyRe 
 blocking { 
 val client = new ApnsClient [ SimpleApnsPushNotification ] ( new File ( cert . path ) , cert . password ) 
 client . connect ( host ) . get ( 20 , TimeUnit . SECONDS ) 
 - log . debug ( " Established client connection with push key : { } " , cert . key ) 
 + log . debug ( " Established client connection for cert : { } , is voip : { } " , cert . key , cert . isVoip ) 
 client 
 } 
 } 
 @ @ - 115 , 7 + 86 , 7 @ @ final class ApplePushExtension ( system : ActorSystem ) extends Extension with AnyRe 
 / / recreate and try to connect client , if client connection failed 
 / / during previous creation 
 private def recreateClient ( cert : ApnsCert ) : Unit = { 
 - log . debug ( " Retry to create client for cert : { } " , cert . key ) 
 + log . debug ( " Retry to create client for cert : { } , is voip " , cert . key , cert . isVoip ) 
 val targetMap = if ( cert . isVoip ) voipClients else clients 
 targetMap - = cert . key 
 targetMap + = createClient ( cert ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / PushFutureListener . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / PushFutureListener . scala 
 index 89e16c1 . . 0acefc6 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / PushFutureListener . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / PushFutureListener . scala 
 @ @ - 6 , 10 + 6 , 10 @ @ import com . relayrides . pushy . apns . PushNotificationResponse 
 import com . relayrides . pushy . apns . util . SimpleApnsPushNotification 
 import im . actor . server . model . push . ApplePushCredentials 
 import im . actor . util . log . AnyRefLogSource 
 - import io . netty . util . concurrent . { Future , GenericFutureListener } 
 + import io . netty . util . concurrent . { Future , GenericFutureListener } 
 import scodec . bits . BitVector 
 
 - import scala . util . { Failure , Success , Try } 
 + import scala . util . { Failure , Success , Try } 
 
 final class PushFutureListener ( userId : Int , creds : ApplePushCredentials ) ( implicit system : ActorSystem ) 
 extends GenericFutureListener [ Future [ PushNotificationResponse [ SimpleApnsPushNotification ] ] ] with AnyRefLogSource { 
 @ @ - 22 , 14 + 22 , 20 @ @ final class PushFutureListener ( userId : Int , creds : ApplePushCredentials ) ( implici 
 def operationComplete ( future : Future [ PushNotificationResponse [ SimpleApnsPushNotification ] ] ) : Unit = { 
 Try ( future . get ( ) ) match { 
 case Success ( response ) ⇒ 
 - log . debug ( " APNS send complete , user : { } , token : { } , apnsKey : { } , isVoip : { } " , 
 - userId , tokenString , creds . apnsKey , creds . isVoip ) 
 + log . debug ( 
 + " APNS send complete , user : { } , token : { } , apnsKey : { } , isVoip : { } " , 
 + userId , tokenString , creds . apnsKey , creds . isVoip 
 + ) 
 if ( response . isAccepted ) { 
 - log . debug ( " Successfully delivered APNS notification to user : { } , token : { } , apnsKey : { } , isVoip : { } " , 
 - userId , tokenString , creds . apnsKey , creds . isVoip ) 
 + log . debug ( 
 + " Successfully delivered APNS notification to user : { } , token : { } , apnsKey : { } , isVoip : { } " , 
 + userId , tokenString , creds . apnsKey , creds . isVoip 
 + ) 
 } else { 
 - log . warning ( s " APNS rejected notification for user : { } , token : { } , apnsKey : { } , isVoip : { } , with reason : $ { response . getRejectionReason } " , 
 - userId , tokenString , creds . apnsKey , creds . isVoip ) 
 + log . warning ( 
 + s " APNS rejected notification for user : { } , token : { } , apnsKey : { } , isVoip : { } , with reason : $ { response . getRejectionReason } " , 
 + userId , tokenString , creds . apnsKey , creds . isVoip 
 + ) 
 Option ( response . getTokenInvalidationTimestamp ) foreach { ts ⇒ 
 log . warning ( " APNS token : { } for user : { } invalidated at { } . Deleting token now " , tokenString , userId , ts ) 
 seqUpdExt . deleteApplePushCredentials ( tokenBytes ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala 
 index 1d1154f . . 9fb3daf 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala 
 @ @ - 212 , 20 + 212 , 18 @ @ final class SeqUpdatesExtension ( _ system : ActorSystem ) extends Extension { 
 deliveryId = deliveryId 
 ) 
 
 - def registerGooglePushCredentials ( creds : GooglePushCredentialsModel ) = registerPushCredentials ( creds ) 
 + def registerGooglePushCredentials ( creds : GooglePushCredentialsModel ) = 
 + registerPushCredentials ( creds . authId , RegisterPushCredentials ( ) . withGoogle ( creds ) ) 
 
 - def registerApplePushCredentials ( creds : ApplePushCredentialsModel ) = registerPushCredentials ( creds ) 
 + def registerApplePushCredentials ( creds : ApplePushCredentialsModel ) = 
 + registerPushCredentials ( creds . authId , RegisterPushCredentials ( ) . withApple ( creds ) ) 
 
 - def registerActorPushCredentials ( creds : ActorPushCredentialsModel ) = registerPushCredentials ( creds ) 
 + def registerActorPushCredentials ( creds : ActorPushCredentialsModel ) = 
 + registerPushCredentials ( creds . authId , RegisterPushCredentials ( ) . withActor ( creds ) ) 
 
 / / TODO : real future 
 - def registerPushCredentials ( creds : PushCredentials ) = 
 - withAuthSession ( creds . authId ) { session ⇒ 
 - val register = creds match { 
 - case c : GooglePushCredentialsModel ⇒ RegisterPushCredentials ( ) . withGoogle ( c ) 
 - case c : ApplePushCredentialsModel ⇒ RegisterPushCredentials ( ) . withApple ( c ) 
 - case c : ActorPushCredentialsModel ⇒ RegisterPushCredentials ( ) . withActor ( c ) 
 - } 
 + private def registerPushCredentials ( authId : Long , register : RegisterPushCredentials ) = 
 + withAuthSession ( authId ) { session ⇒ 
 region . ref ! Envelope ( session . userId ) . withRegisterPushCredentials ( register ) 
 Future . successful ( ( ) ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala 
 index 8526f19 . . 067e6a6 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala 
 @ @ - 110 , 13 + 110 , 11 @ @ private [ sequence ] final class VendorPush ( userId : Int ) extends Actor with ActorLo 
 private val settingsControl = context . actorOf ( SettingsControl . props ( userId ) , " settings " ) 
 private val googlePushProvider = new GooglePushProvider ( userId , context . system ) 
 private val applePushProvider = new ApplePushProvider ( userId ) ( context . system ) 
 + private val actorPushProvider = ActorPush ( context . system ) 
 
 private var mapping : Map [ PushCredentials , PushCredentialsInfo ] = Map . empty 
 private var notificationSettings = AllNotificationSettings ( ) 
 
 - private def remove ( creds : PushCredentials ) : Unit = 
 - mapping - = creds 
 - 
 init ( ) 
 
 def receive = initializing 
 @ @ - 163 , 7 + 161 , 7 @ @ private [ sequence ] final class VendorPush ( userId : Int ) extends Actor with ActorLo 
 appleCreds ← ApplePushCredentialsRepo . findByUser ( userId ) 
 actorCreds ← ActorPushCredentialsRepo . findByUser ( userId ) 
 google ← DBIO . sequence ( googleCreds map withInfo ) map ( _ . flatten ) 
 - apple ← DBIO . sequence ( appleCreds map withInfo ) map ( _ . flatten ) 
 + apple ← DBIO . sequence ( appleCreds . filterNot ( _ . isVoip ) map withInfo ) map ( _ . flatten ) 
 actor ← DBIO . sequence ( actorCreds map withInfo ) map ( _ . flatten ) 
 } yield Initialized ( apple + + google + + actor ) ) pipeTo self 
 } 
 @ @ - 255 , 7 + 253 , 7 @ @ private [ sequence ] final class VendorPush ( userId : Int ) extends Actor with ActorLo 
 case c : ApplePushCredentials ⇒ 
 applePushProvider . deliverInvisible ( seq , c ) 
 case c : ActorPushCredentials ⇒ 
 - ActorPush ( context . system ) . deliver ( seq = seq , c ) 
 + actorPushProvider . deliver ( seq , c ) 
 } 
 } 
 
 @ @ - 291 , 28 + 289 , 23 @ @ private [ sequence ] final class VendorPush ( userId : Int ) extends Actor with ActorLo 
 isVibrationEnabled = isVibrationEnabled 
 ) 
 case c : ActorPushCredentials ⇒ 
 - ActorPush ( context . system ) . deliver ( seq = seq , c ) 
 + actorPushProvider . deliver ( seq , c ) 
 } 
 } 
 
 - private def register ( creds : PushCredentials ) : Unit = { 
 - db . run ( for { 
 - _ ← creds match { 
 - case c : GooglePushCredentials ⇒ GooglePushCredentialsRepo . createOrUpdate ( c ) 
 - case c : ApplePushCredentials ⇒ ApplePushCredentialsRepo . createOrUpdate ( c ) 
 - case c : ActorPushCredentials ⇒ ActorPushCredentialsRepo . createOrUpdate ( c ) 
 - } 
 - appIdCredsOpt ← withInfo ( creds ) 
 - } yield { 
 - appIdCredsOpt . getOrElse ( throw new RuntimeException ( s " Cannot find appId for $ creds " ) ) 
 - } ) pipeTo self 
 - } 
 + private def register ( creds : PushCredentials ) : Unit = 
 + db . run { 
 + withInfo ( creds ) map ( _ . getOrElse ( throw new RuntimeException ( s " Cannot find appId for $ creds " ) ) ) 
 + } pipeTo self 
 
 private def withInfo ( c : PushCredentials ) : DBIO [ Option [ ( PushCredentials , PushCredentialsInfo ) ] ] = 
 for { 
 authSessionOpt ← AuthSessionRepo . findByAuthId ( c . authId ) 
 } yield authSessionOpt map ( s ⇒ c → PushCredentialsInfo ( s . appId , s . id ) ) 
 
 + private def remove ( creds : PushCredentials ) : Unit = 
 + mapping - = creds 
 + 
 private def unregister ( authId : Long ) : Unit = 
 mapping . keys filter ( _ . authId = = authId ) foreach unregister 
 
 diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20160409233247 _ _ ChangeApplePushCredentialsPrimaryKey . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20160409233247 _ _ ChangeApplePushCredentialsPrimaryKey . sql 
 new file mode 100644 
 index 0000000 . . ac4fc08 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20160409233247 _ _ ChangeApplePushCredentialsPrimaryKey . sql 
 @ @ - 0 , 0 + 1 , 2 @ @ 
 + alter table apple _ push _ credentials drop constraint apple _ push _ credentials _ pkey ; 
 + alter table apple _ push _ credentials add primary key ( auth _ id , is _ voip ) ; 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala 
 index 6eab3b6 . . 38859ce 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala 
 @ @ - 15 , 7 + 15 , 7 @ @ final class ApplePushCredentialsTable ( tag : Tag ) extends Table [ ApplePushCredentia 
 
 def token = column [ ByteString ] ( " token " ) 
 
 - def isVoip = column [ Boolean ] ( " is _ voip " ) 
 + def isVoip = column [ Boolean ] ( " is _ voip " , O . PrimaryKey ) 
 
 def * = ( authId , apnsKey , token , isVoip ) < > ( ( ApplePushCredentials . apply _ ) . tupled , ApplePushCredentials . unapply ) 
 } 
 @ @ - 29 , 19 + 29 , 12 @ @ object ApplePushCredentialsRepo { 
 def byToken ( token : Array [ Byte ] ) : Query [ ApplePushCredentialsTable , ApplePushCredentials , Seq ] = 
 byToken ( ByteString . copyFrom ( token ) ) 
 
 - def createOrUpdate ( authId : Long , apnsKey : Int , token : ByteString ) ( implicit ec : ExecutionContext ) = { 
 - for { 
 - _ ← creds . filterNot ( _ . authId = = = authId ) . filter ( c ⇒ c . apnsKey = = = apnsKey & & c . token = = = token ) . delete 
 - r ← creds . insertOrUpdate ( ApplePushCredentials ( authId , apnsKey , token ) ) 
 - } yield r 
 - } 
 - 
 def createOrUpdate ( c : ApplePushCredentials ) = 
 creds . insertOrUpdate ( c ) 
 
 - def byAuthId ( authId : Rep [ Long ] ) = creds . filter ( _ . authId = = = authId ) 
 + private def byAuthId ( authId : Rep [ Long ] ) = creds . filter ( _ . authId = = = authId ) 
 
 - val byAuthIdC = Compiled ( byAuthId _ ) 
 + private val byAuthIdC = Compiled ( byAuthId _ ) 
 
 def find ( authId : Long ) = 
 byAuthIdC ( authId ) . result . headOption

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala 
 new file mode 100644 
 index 0000000 . . ca5eb10 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala 
 @ @ - 0 , 0 + 1 , 133 @ @ 
 + package im . actor . server . sequence 
 + 
 + import java . util 
 + 
 + import akka . actor . { ActorSystem , ExtendedActorSystem , Extension , ExtensionId , ExtensionIdProvider } 
 + import akka . event . Logging 
 + import com . relayrides . pushy . apns . _ 
 + import com . relayrides . pushy . apns . util . { SSLContextUtil , SimpleApnsPushNotification } 
 + import com . typesafe . config . Config 
 + import im . actor . server . db . ActorPostgresDriver . api . _ 
 + import im . actor . server . db . DbExtension 
 + 
 + import scala . collection . JavaConversions . _ 
 + import scala . concurrent . ExecutionContext 
 + import scala . concurrent . duration . _ 
 + import scala . util . Try 
 + 
 + case class ApplePushManagerConfig ( certs : List [ ApnsCert ] ) 
 + 
 + object ApplePushManagerConfig { 
 + def load ( config : Config ) : ApplePushManagerConfig = { 
 + ApplePushManagerConfig ( 
 + certs = config . getConfigList ( " certs " ) . toList map ApnsCert . fromConfig 
 + ) 
 + 
 + } 
 + } 
 + 
 + case class ApnsCert ( key : Int , path : String , password : String , isSandbox : Boolean , isVoip : Boolean ) 
 + 
 + object ApnsCert { 
 + def fromConfig ( config : Config ) : ApnsCert = { 
 + ApnsCert ( 
 + config . getInt ( " key " ) , 
 + config . getString ( " path " ) , 
 + config . getString ( " password " ) , 
 + Try ( config . getBoolean ( " voip " ) ) . getOrElse ( false ) , 
 + Try ( config . getBoolean ( " sandbox " ) ) . getOrElse ( false ) 
 + ) 
 + } 
 + } 
 + 
 + object ApplePushExtension extends ExtensionId [ ApplePushExtension ] with ExtensionIdProvider { 
 + override def createExtension ( system : ExtendedActorSystem ) : ApplePushExtension = new ApplePushExtension ( system ) 
 + 
 + override def lookup ( ) : ExtensionId [ _ < : Extension ] = ApplePushExtension 
 + } 
 + 
 + final class ApplePushExtension ( system : ActorSystem ) extends Extension { 
 + import system . dispatcher 
 + 
 + private val config = ApplePushManagerConfig . load ( 
 + Try ( system . settings . config . getConfig ( " services . apple . push " ) ) 
 + . getOrElse ( system . settings . config . getConfig ( " push . apple " ) ) 
 + ) 
 + 
 + private val ( managers , voipManagers ) : ( Map [ Int , PushManager [ SimpleApnsPushNotification ] ] , Map [ Int , PushManager [ SimpleApnsPushNotification ] ] ) = { 
 + val ( certs , voipCerts ) = config . certs . partition ( ! _ . isVoip ) 
 + 
 + ( ( certs map createManager ) . toMap , ( voipCerts map createManager ) . toMap ) 
 + } 
 + 
 + def getInstance ( key : Int ) : Option [ PushManager [ SimpleApnsPushNotification ] ] = managers . get ( key ) 
 + 
 + def getVoipInstance ( key : Int ) : Option [ PushManager [ SimpleApnsPushNotification ] ] = voipManagers . get ( key ) 
 + 
 + private def createManager ( cert : ApnsCert ) = { 
 + val env = cert . isSandbox match { 
 + case false ⇒ ApnsEnvironment . getProductionEnvironment 
 + case true ⇒ ApnsEnvironment . getSandboxEnvironment 
 + } 
 + 
 + cert . isSandbox match { 
 + case false ⇒ ApnsEnvironment . getProductionEnvironment 
 + case true ⇒ ApnsEnvironment . getSandboxEnvironment 
 + } 
 + 
 + val mgr = new PushManager [ SimpleApnsPushNotification ] ( 
 + env , 
 + SSLContextUtil . createDefaultSSLContext ( cert . path , cert . password ) , 
 + null , 
 + null , 
 + null , 
 + new PushManagerConfiguration ( ) , 
 + s " ActorPushManager - $ { cert . key } " 
 + ) 
 + 
 + mgr . registerRejectedNotificationListener ( new LoggingRejectedNotificationListener ( system ) ) 
 + 
 + mgr . registerExpiredTokenListener ( new CleanExpiredTokenListener ( system ) ) 
 + 
 + mgr . start ( ) 
 + 
 + system . scheduler . schedule ( 10 . seconds , 1 . hour ) { 
 + mgr . requestExpiredTokens ( ) 
 + } 
 + 
 + ( cert . key , mgr ) 
 + } 
 + } 
 + 
 + private class LoggingRejectedNotificationListener ( _ system : ActorSystem ) extends RejectedNotificationListener [ SimpleApnsPushNotification ] { 
 + private implicit val system : ActorSystem = _ system 
 + private implicit val ec : ExecutionContext = _ system . dispatcher 
 + private lazy val seqUpdExt = SeqUpdatesExtension ( system ) 
 + private val log = Logging ( system , getClass ) 
 + 
 + override def handleRejectedNotification ( pushManager : PushManager [ _ < : SimpleApnsPushNotification ] , notification : SimpleApnsPushNotification , rejectionReason : RejectedNotificationReason ) : Unit = { 
 + log . warning ( " APNS rejected notification with reason : { } " , rejectionReason ) 
 + 
 + if ( rejectionReason . getErrorCode = = RejectedNotificationReason . INVALID _ TOKEN . getErrorCode ) { 
 + log . warning ( " Deleting token " ) 
 + log . error ( " Implement push token deletion " ) 
 + seqUpdExt . deleteApplePushCredentials ( notification . getToken ) 
 + } 
 + } 
 + } 
 + 
 + private class CleanExpiredTokenListener ( _ system : ActorSystem ) extends ExpiredTokenListener [ SimpleApnsPushNotification ] { 
 + private implicit val system : ActorSystem = _ system 
 + private val log = Logging ( system , getClass ) 
 + implicit val db : Database = DbExtension ( system ) . db 
 + 
 + override def handleExpiredTokens ( 
 + pushManager : PushManager [ _ < : SimpleApnsPushNotification ] , 
 + expiredTokens : util . Collection [ ExpiredToken ] 
 + ) : Unit = { 
 + expiredTokens foreach { t ⇒ 
 + log . warning ( " APNS reported expired token " ) 
 + / / UserExtension ( system ) . logoutByAppleToken ( t . getToken ) 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushManager . scala 
 deleted file mode 100644 
 index 423e15b . . 0000000 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushManager . scala 
 + + + / dev / null 
 @ @ - 1 , 122 + 0 , 0 @ @ 
 - package im . actor . server . sequence 
 - 
 - import java . util 
 - 
 - import akka . actor . ActorSystem 
 - import akka . event . Logging 
 - import com . relayrides . pushy . apns . _ 
 - import com . relayrides . pushy . apns . util . { SSLContextUtil , SimpleApnsPushNotification } 
 - import com . typesafe . config . Config 
 - import im . actor . server . db . ActorPostgresDriver . api . _ 
 - import im . actor . server . db . DbExtension 
 - 
 - import scala . collection . JavaConversions . _ 
 - import scala . concurrent . ExecutionContext 
 - import scala . concurrent . duration . _ 
 - import scala . util . Try 
 - 
 - case class ApplePushManagerConfig ( certs : List [ ApnsCert ] ) 
 - 
 - object ApplePushManagerConfig { 
 - def load ( config : Config ) : ApplePushManagerConfig = { 
 - ApplePushManagerConfig ( 
 - certs = config . getConfigList ( " certs " ) . toList map ApnsCert . fromConfig 
 - ) 
 - 
 - } 
 - } 
 - 
 - case class ApnsCert ( key : Int , path : String , password : String , isSandbox : Boolean , isVoip : Boolean ) 
 - 
 - object ApnsCert { 
 - def fromConfig ( config : Config ) : ApnsCert = { 
 - ApnsCert ( 
 - config . getInt ( " key " ) , 
 - config . getString ( " path " ) , 
 - config . getString ( " password " ) , 
 - Try ( config . getBoolean ( " voip " ) ) . getOrElse ( false ) , 
 - Try ( config . getBoolean ( " sandbox " ) ) . getOrElse ( false ) 
 - ) 
 - } 
 - } 
 - 
 - final class ApplePushManager ( config : ApplePushManagerConfig , system : ActorSystem ) { 
 - import system . dispatcher 
 - 
 - private val ( managers , voipManagers ) : ( Map [ Int , PushManager [ SimpleApnsPushNotification ] ] , Map [ Int , PushManager [ SimpleApnsPushNotification ] ] ) = { 
 - val ( certs , voipCerts ) = config . certs . partition ( ! _ . isVoip ) 
 - 
 - ( ( certs map createManager ) . toMap , ( voipCerts map createManager ) . toMap ) 
 - } 
 - 
 - def getInstance ( key : Int ) : Option [ PushManager [ SimpleApnsPushNotification ] ] = managers . get ( key ) 
 - 
 - def getVoipInstance ( key : Int ) : Option [ PushManager [ SimpleApnsPushNotification ] ] = voipManagers . get ( key ) 
 - 
 - private def createManager ( cert : ApnsCert ) = { 
 - val env = cert . isSandbox match { 
 - case false ⇒ ApnsEnvironment . getProductionEnvironment 
 - case true ⇒ ApnsEnvironment . getSandboxEnvironment 
 - } 
 - 
 - cert . isSandbox match { 
 - case false ⇒ ApnsEnvironment . getProductionEnvironment 
 - case true ⇒ ApnsEnvironment . getSandboxEnvironment 
 - } 
 - 
 - val mgr = new PushManager [ SimpleApnsPushNotification ] ( 
 - env , 
 - SSLContextUtil . createDefaultSSLContext ( cert . path , cert . password ) , 
 - null , 
 - null , 
 - null , 
 - new PushManagerConfiguration ( ) , 
 - s " ActorPushManager - $ { cert . key } " 
 - ) 
 - 
 - mgr . registerRejectedNotificationListener ( new LoggingRejectedNotificationListener ( system ) ) 
 - 
 - mgr . registerExpiredTokenListener ( new CleanExpiredTokenListener ( system ) ) 
 - 
 - mgr . start ( ) 
 - 
 - system . scheduler . schedule ( 10 . seconds , 1 . hour ) { 
 - mgr . requestExpiredTokens ( ) 
 - } 
 - 
 - ( cert . key , mgr ) 
 - } 
 - } 
 - 
 - private class LoggingRejectedNotificationListener ( _ system : ActorSystem ) extends RejectedNotificationListener [ SimpleApnsPushNotification ] { 
 - private implicit val system : ActorSystem = _ system 
 - private implicit val ec : ExecutionContext = _ system . dispatcher 
 - private lazy val seqUpdExt = SeqUpdatesExtension ( system ) 
 - private val log = Logging ( system , getClass ) 
 - 
 - override def handleRejectedNotification ( pushManager : PushManager [ _ < : SimpleApnsPushNotification ] , notification : SimpleApnsPushNotification , rejectionReason : RejectedNotificationReason ) : Unit = { 
 - log . warning ( " APNS rejected notification with reason : { } " , rejectionReason ) 
 - 
 - if ( rejectionReason . getErrorCode = = RejectedNotificationReason . INVALID _ TOKEN . getErrorCode ) { 
 - log . warning ( " Deleting token " ) 
 - log . error ( " Implement push token deletion " ) 
 - seqUpdExt . deleteApplePushCredentials ( notification . getToken ) 
 - } 
 - } 
 - } 
 - 
 - private class CleanExpiredTokenListener ( _ system : ActorSystem ) extends ExpiredTokenListener [ SimpleApnsPushNotification ] { 
 - private implicit val system : ActorSystem = _ system 
 - private val log = Logging ( system , getClass ) 
 - implicit val db : Database = DbExtension ( system ) . db 
 - 
 - override def handleExpiredTokens ( 
 - pushManager : PushManager [ _ < : SimpleApnsPushNotification ] , 
 - expiredTokens : util . Collection [ ExpiredToken ] 
 - ) : Unit = { 
 - expiredTokens foreach { t ⇒ 
 - log . warning ( " APNS reported expired token " ) 
 - / / UserExtension ( system ) . logoutByAppleToken ( t . getToken ) 
 - } 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala 
 index f71b70b . . f2654bd 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala 
 @ @ - 8 , 7 + 8 , 7 @ @ import im . actor . server . db . DbExtension 
 import im . actor . server . model . push . ApplePushCredentials 
 import im . actor . server . persist . HistoryMessageRepo 
 
 - private [ sequence ] final class ApplePushProvider ( userId : Int , applePushManager : ApplePushManager , system : ActorSystem ) extends PushProvider { 
 + private [ sequence ] final class ApplePushProvider ( userId : Int , applePushManager : ApplePushExtension , system : ActorSystem ) extends PushProvider { 
 import system . dispatcher 
 
 private val log = Logging ( system , getClass ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala 
 index 91c6787 . . 92a4f92 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala 
 @ @ - 25 , 8 + 25 , 7 @ @ import scala . util . Try 
 
 final class SeqUpdatesExtension ( 
 _ system : ActorSystem , 
 - gpm : GooglePushManager , 
 - apm : ApplePushManager 
 + gpm : GooglePushManager 
 ) extends Extension { 
 
 import UserSequenceCommands . _ 
 @ @ - 35 , 6 + 34 , 7 @ @ final class SeqUpdatesExtension ( 
 private val log = Logging ( _ system , getClass ) 
 private implicit val OperationTimeout = Timeout ( 20 . seconds ) 
 private implicit val system : ActorSystem = _ system 
 + private lazy val apm = ApplePushExtension ( system ) 
 
 log . debug ( " Getting DbExtension " ) 
 private implicit lazy val db = DbExtension ( system ) . db 
 @ @ - 274 , 20 + 274 , 15 @ @ object SeqUpdatesExtension extends ExtensionId [ SeqUpdatesExtension ] with Extensi 
 
 try { 
 log . debug ( " Initiating SeqUpdatesExtension " ) 
 - val applePushConfig = ApplePushManagerConfig . load ( 
 - Try ( system . settings . config . getConfig ( " services . apple . push " ) ) 
 - . getOrElse ( system . settings . config . getConfig ( " push . apple " ) ) 
 - ) 
 - log . debug ( " Apple Push Config : { } " , applePushConfig ) 
 + 
 val googlePushConfig = GooglePushManagerConfig . load ( system . settings . config . getConfig ( " services . google . push " ) ) . get 
 log . debug ( " Google Push Config : { } " , googlePushConfig ) 
 
 val gpm = new GooglePushManager ( googlePushConfig ) 
 - val apm = new ApplePushManager ( applePushConfig , system ) 
 
 log . debug ( " Starting up " ) 
 
 - new SeqUpdatesExtension ( system , gpm , apm ) 
 + new SeqUpdatesExtension ( system , gpm ) 
 } catch { 
 case e : Throwable ⇒ 
 log . error ( e , " Failed to start up SeqUpdatesExtension " ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesManagerRegion . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesManagerRegion . scala 
 index 13ba687 . . 786b762 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesManagerRegion . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesManagerRegion . scala 
 @ @ - 45 , 7 + 45 , 7 @ @ object SeqUpdatesManagerRegion { 
 implicit 
 system : ActorSystem , 
 googlePushManager : GooglePushManager , 
 - applePushManager : ApplePushManager 
 + applePushManager : ApplePushExtension 
 ) : SeqUpdatesManagerRegion = 
 start ( UserSequence . props ( googlePushManager , applePushManager ) ) 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UserSequence . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UserSequence . scala 
 index 99307c3 . . c1fb7f9 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UserSequence . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UserSequence . scala 
 @ @ - 21 , 7 + 21 , 7 @ @ object UserSequence { 
 
 private [ sequence ] def props ( 
 googlePushManager : GooglePushManager , 
 - applePushManager : ApplePushManager 
 + applePushManager : ApplePushExtension 
 ) = 
 Props ( new UserSequence ( googlePushManager , applePushManager ) ) 
 } 
 @ @ - 42 , 7 + 42 , 7 @ @ private trait SeqControl { 
 
 private [ sequence ] final class UserSequence ( 
 googlePushManager : GooglePushManager , 
 - applePushManager : ApplePushManager 
 + applePushManager : ApplePushExtension 
 ) extends Actor with ActorLogging with Stash with SeqControl { 
 
 import UserSequence . _ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala 
 index b5430c3 . . 5e33981 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala 
 @ @ - 59 , 7 + 59 , 7 @ @ private [ sequence ] object VendorPush { 
 
 private final case class Initialized ( creds : Seq [ ( PushCredentials , PushCredentialsInfo ) ] ) 
 
 - def props ( userId : Int , googlePushManager : GooglePushManager , applePushManager : ApplePushManager ) = 
 + def props ( userId : Int , googlePushManager : GooglePushManager , applePushManager : ApplePushExtension ) = 
 Props ( new VendorPush ( userId , googlePushManager , applePushManager ) ) 
 } 
 
 @ @ - 125 , 7 + 125 , 7 @ @ private final class SettingsControl ( userId : Int ) extends Actor with ActorLogging 
 private [ sequence ] final class VendorPush ( 
 userId : Int , 
 googlePushManager : GooglePushManager , 
 - applePushManager : ApplePushManager 
 + applePushManager : ApplePushExtension 
 ) extends Actor with ActorLogging with Stash { 
 
 import VendorPush . _
