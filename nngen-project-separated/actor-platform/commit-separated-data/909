BLEU SCORE: 0.11447078430334955

TEST MSG: fix ( server : eventbus ) : respond with RpcError if event bus is not found
GENERATED MSG: feat ( server : features ) : FeaturesServiceImpl

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > index 54f57eb . . 8350828 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > @ @ - 13 , 6 + 13 , 12 @ @ import scala . collection . mutable < nl > import scala . concurrent . duration . _ < nl > import scala . util . Random < nl > < nl > + abstract class EventBusError ( message : String ) extends RuntimeException ( message ) < nl > + < nl > + object EventBusErrors { < nl > + case object EventBusNotFound extends EventBusError ( " EventBus not found " ) < nl > + } < nl > + < nl > private [ eventbus ] trait EventBusMessage < nl > private [ eventbus ] final case class EventBusEnvelope ( id : String , message : EventBusMessage ) < nl > < nl > @ @ - 116 , 6 + 122 , 9 @ @ final class EventBusMediator extends Actor with ActorLogging { < nl > timeoutOpt foreach ( consumers . keepAlive ( clientAuthId , _ ) ) < nl > sender ( ) ! CreateAck ( deviceId ) < nl > context become created < nl > + case _ ⇒ < nl > + sender ( ) ! Status . Failure ( EventBusErrors . EventBusNotFound ) < nl > + context stop self < nl > } < nl > < nl > def created : Receive = { < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala < nl > index a9ac436 . . 097bc04 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala < nl > @ @ - 6 , 10 + 6 , 14 @ @ import im . actor . api . rpc . ClientData < nl > import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . eventbus . { ApiEventBusDestination , ResponseCreateNewEventBus , ResponseJoinEventBus , EventbusService } < nl > import im . actor . api . rpc . misc . ResponseVoid < nl > - import im . actor . server . eventbus . EventBusExtension < nl > + import im . actor . server . eventbus . { EventBusErrors , EventBusExtension } < nl > < nl > import scala . concurrent . { ExecutionContext , Future } < nl > < nl > + object EventBusRpcErrors { < nl > + val EventBusNotFound = Error ( RpcError ( 404 , " NOT _ FOUND " , " EventBus not found . " , canTryAgain = false , data = None ) ) < nl > + } < nl > + < nl > final class EventbusServiceImpl ( system : ActorSystem ) extends EventbusService { < nl > override implicit protected val ec : ExecutionContext = system . dispatcher < nl > private val ext = EventBusExtension ( system ) < nl > @ @ - 28 , 6 + 32 , 8 @ @ final class EventbusServiceImpl ( system : ActorSystem ) extends EventbusService { < nl > override def jhandleDisposeEventBus ( id : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = < nl > authorized ( clientData ) { client ⇒ < nl > for ( _ ← ext . dispose ( client . userId , id ) ) yield Ok ( ResponseVoid ) < nl > + } recover { < nl > + case EventBusErrors . EventBusNotFound ⇒ EventBusRpcErrors . EventBusNotFound < nl > } < nl > < nl > override def jhandlePostToEventBus ( < nl > @ @ - 40 , 6 + 46 , 8 @ @ final class EventbusServiceImpl ( system : ActorSystem ) extends EventbusService { < nl > for { < nl > _ ← ext . post ( client . userId , client . authId , id , destinations , message ) < nl > } yield Ok ( ResponseVoid ) < nl > + } recover { < nl > + case EventBusErrors . EventBusNotFound ⇒ EventBusRpcErrors . EventBusNotFound < nl > } < nl > < nl > override def jhandleKeepAliveEventBus ( < nl > @ @ - 50 , 6 + 58 , 8 @ @ final class EventbusServiceImpl ( system : ActorSystem ) extends EventbusService { < nl > authorized ( clientData ) { client ⇒ < nl > ext . keepAlive ( client . authId , id , timeout ) < nl > FastFuture . successful ( Ok ( ResponseVoid ) ) < nl > + } recover { < nl > + case EventBusErrors . EventBusNotFound ⇒ EventBusRpcErrors . EventBusNotFound < nl > } < nl > < nl > override def jhandleJoinEventBus ( < nl > @ @ - 61 , 5 + 71 , 7 @ @ final class EventbusServiceImpl ( system : ActorSystem ) extends EventbusService { < nl > for { < nl > deviceId ← ext . join ( client . userId , client . authId , id , timeout ) < nl > } yield Ok ( ResponseJoinEventBus ( deviceId ) ) < nl > + } recover { < nl > + case EventBusErrors . EventBusNotFound ⇒ EventBusRpcErrors . EventBusNotFound < nl > } < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - models / src / main / protobuf / model . proto b / actor - server / actor - models / src / main / protobuf / model . proto < nl > index da3eceb . . fd543eb 100644 < nl > - - - a / actor - server / actor - models / src / main / protobuf / model . proto < nl > + + + b / actor - server / actor - models / src / main / protobuf / model . proto < nl > @ @ - 75 , 4 + 75 , 10 @ @ message UserPassword { < nl > message MasterKey { < nl > int64 auth _ id = 1 ; < nl > bytes body = 2 ; < nl > + } < nl > + < nl > + message DeviceFeature { < nl > + int64 auth _ id = 1 ; < nl > + string name = 2 ; < nl > + bytes args = 3 ; < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / DeviceFeatureRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / DeviceFeatureRepo . scala < nl > new file mode 100644 < nl > index 0000000 . . 7b66795 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / DeviceFeatureRepo . scala < nl > @ @ - 0 , 0 + 1 , 38 @ @ < nl > + package im . actor . server . persist < nl > + < nl > + import com . google . protobuf . ByteString < nl > + import im . actor . server . db . ActorPostgresDriver . api . _ < nl > + import im . actor . server . model . DeviceFeature < nl > + < nl > + final class DeviceFeatureTable ( tag : Tag ) extends Table [ DeviceFeature ] ( tag , " device _ features " ) { < nl > + def authId = column [ Long ] ( " auth _ id " , O . PrimaryKey ) < nl > + < nl > + def name = column [ String ] ( " name " , O . PrimaryKey ) < nl > + < nl > + def args = column [ ByteString ] ( " args " ) < nl > + < nl > + def * = ( authId , name , args ) < > ( ( DeviceFeature . apply _ ) . tupled , DeviceFeature . unapply ) < nl > + } < nl > + < nl > + object DeviceFeatureRepo { < nl > + val deviceFeatures = TableQuery [ DeviceFeatureTable ] < nl > + < nl > + def byPK ( authId : Rep [ Long ] , name : Rep [ String ] ) = deviceFeatures filter ( df ⇒ df . authId = = = authId & & df . name = = = name ) < nl > + < nl > + val byPKC = Compiled ( byPK _ ) < nl > + val existsC = Compiled { ( authId : Rep [ Long ] , name : Rep [ String ] ) ⇒ < nl > + byPK ( authId , name ) . exists < nl > + } < nl > + < nl > + def enable ( feature : DeviceFeature ) = < nl > + deviceFeatures . insertOrUpdate ( feature ) < nl > + < nl > + def disable ( authId : Long , name : String ) = < nl > + byPKC ( ( authId , name ) ) . delete < nl > + < nl > + def find ( authId : Long , name : String ) = < nl > + byPKC ( ( authId , name ) ) . result . headOption < nl > + < nl > + def exists ( authId : Long , name : String ) = < nl > + existsC ( ( authId , name ) ) . result < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala < nl > index e69de29 . . ac06e74 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala < nl > @ @ - 0 , 0 + 1 , 59 @ @ < nl > + package im . actor . server . api . rpc . service . features < nl > + < nl > + import akka . actor . _ < nl > + import com . google . protobuf . ByteString < nl > + import im . actor . api . rpc . _ < nl > + import im . actor . api . rpc . features . FeaturesService < nl > + import im . actor . api . rpc . misc . { ResponseBool , ResponseVoid } < nl > + import im . actor . api . rpc . peers . ApiUserOutPeer < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . model . DeviceFeature < nl > + import im . actor . server . persist . DeviceFeatureRepo < nl > + < nl > + import scala . concurrent . { ExecutionContext , Future } < nl > + < nl > + final class FeaturesServiceImpl ( implicit system : ActorSystem ) extends FeaturesService { < nl > + override implicit protected val ec : ExecutionContext = system . dispatcher < nl > + < nl > + private val db = DbExtension ( system ) . db < nl > + < nl > + override def jhandleEnableFeature ( < nl > + featureName : String , < nl > + args : Option [ Array [ Byte ] ] , < nl > + clientData : ClientData < nl > + ) : Future [ HandlerResult [ ResponseVoid ] ] = < nl > + authorized ( clientData ) { client ⇒ < nl > + for { < nl > + _ ← db . run ( < nl > + DeviceFeatureRepo . enable ( < nl > + DeviceFeature ( < nl > + client . authId , < nl > + featureName , < nl > + args . map ( ByteString . copyFrom ) . getOrElse ( ByteString . EMPTY ) < nl > + ) < nl > + ) < nl > + ) < nl > + } yield Ok ( ResponseVoid ) < nl > + } < nl > + < nl > + override def jhandleCheckFeatureEnabled ( < nl > + userOutPeer : ApiUserOutPeer , < nl > + featureName : String , < nl > + clientData : ClientData < nl > + ) : Future [ HandlerResult [ ResponseBool ] ] = < nl > + authorized ( clientData ) { client ⇒ < nl > + for { < nl > + exists ← db . run ( DeviceFeatureRepo . exists ( client . authId , featureName ) ) < nl > + } yield Ok ( ResponseBool ( exists ) ) < nl > + } < nl > + < nl > + override def jhandleDisableFeature ( < nl > + featureName : String , < nl > + clientData : ClientData < nl > + ) : Future [ HandlerResult [ ResponseVoid ] ] = < nl > + authorized ( clientData ) { client ⇒ < nl > + for { < nl > + _ ← db . run ( DeviceFeatureRepo . disable ( client . authId , featureName ) ) < nl > + } yield Ok ( ResponseVoid ) < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 32fa728 . . c138818 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . server . api . rpc . service . auth . AuthServiceImpl < nl > import im . actor . server . api . rpc . service . configs . ConfigsServiceImpl < nl > import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl < nl > import im . actor . server . api . rpc . service . device . DeviceServiceImpl < nl > + import im . actor . server . api . rpc . service . features . FeaturesServiceImpl < nl > import im . actor . server . api . rpc . service . files . FilesServiceImpl < nl > import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } < nl > import im . actor . server . api . rpc . service . messaging . { MessagingServiceImpl , ReverseHooksListener } < nl > @ @ - 227 , 6 + 228 , 9 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > system . log . debug ( " Starting StickersServiceImpl " ) < nl > val stickerService = new StickersServiceImpl < nl > < nl > + system . log . debug ( " Starting FeaturesServiceImpl " ) < nl > + val featuresService = new FeaturesServiceImpl < nl > + < nl > val services = Seq ( < nl > authService , < nl > contactsService , < nl > @ @ - 243 , 7 + 247 , 8 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > integrationsService , < nl > webactionsService , < nl > deviceService , < nl > - stickerService < nl > + stickerService , < nl > + featuresService < nl > ) < nl > < nl > system . log . warning ( " Starting ActorBot " )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 index 54f57eb . . 8350828 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 @ @ - 13 , 6 + 13 , 12 @ @ import scala . collection . mutable 
 import scala . concurrent . duration . _ 
 import scala . util . Random 
 
 + abstract class EventBusError ( message : String ) extends RuntimeException ( message ) 
 + 
 + object EventBusErrors { 
 + case object EventBusNotFound extends EventBusError ( " EventBus not found " ) 
 + } 
 + 
 private [ eventbus ] trait EventBusMessage 
 private [ eventbus ] final case class EventBusEnvelope ( id : String , message : EventBusMessage ) 
 
 @ @ - 116 , 6 + 122 , 9 @ @ final class EventBusMediator extends Actor with ActorLogging { 
 timeoutOpt foreach ( consumers . keepAlive ( clientAuthId , _ ) ) 
 sender ( ) ! CreateAck ( deviceId ) 
 context become created 
 + case _ ⇒ 
 + sender ( ) ! Status . Failure ( EventBusErrors . EventBusNotFound ) 
 + context stop self 
 } 
 
 def created : Receive = { 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala 
 index a9ac436 . . 097bc04 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / eventbus / EventBusServiceImpl . scala 
 @ @ - 6 , 10 + 6 , 14 @ @ import im . actor . api . rpc . ClientData 
 import im . actor . api . rpc . _ 
 import im . actor . api . rpc . eventbus . { ApiEventBusDestination , ResponseCreateNewEventBus , ResponseJoinEventBus , EventbusService } 
 import im . actor . api . rpc . misc . ResponseVoid 
 - import im . actor . server . eventbus . EventBusExtension 
 + import im . actor . server . eventbus . { EventBusErrors , EventBusExtension } 
 
 import scala . concurrent . { ExecutionContext , Future } 
 
 + object EventBusRpcErrors { 
 + val EventBusNotFound = Error ( RpcError ( 404 , " NOT _ FOUND " , " EventBus not found . " , canTryAgain = false , data = None ) ) 
 + } 
 + 
 final class EventbusServiceImpl ( system : ActorSystem ) extends EventbusService { 
 override implicit protected val ec : ExecutionContext = system . dispatcher 
 private val ext = EventBusExtension ( system ) 
 @ @ - 28 , 6 + 32 , 8 @ @ final class EventbusServiceImpl ( system : ActorSystem ) extends EventbusService { 
 override def jhandleDisposeEventBus ( id : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = 
 authorized ( clientData ) { client ⇒ 
 for ( _ ← ext . dispose ( client . userId , id ) ) yield Ok ( ResponseVoid ) 
 + } recover { 
 + case EventBusErrors . EventBusNotFound ⇒ EventBusRpcErrors . EventBusNotFound 
 } 
 
 override def jhandlePostToEventBus ( 
 @ @ - 40 , 6 + 46 , 8 @ @ final class EventbusServiceImpl ( system : ActorSystem ) extends EventbusService { 
 for { 
 _ ← ext . post ( client . userId , client . authId , id , destinations , message ) 
 } yield Ok ( ResponseVoid ) 
 + } recover { 
 + case EventBusErrors . EventBusNotFound ⇒ EventBusRpcErrors . EventBusNotFound 
 } 
 
 override def jhandleKeepAliveEventBus ( 
 @ @ - 50 , 6 + 58 , 8 @ @ final class EventbusServiceImpl ( system : ActorSystem ) extends EventbusService { 
 authorized ( clientData ) { client ⇒ 
 ext . keepAlive ( client . authId , id , timeout ) 
 FastFuture . successful ( Ok ( ResponseVoid ) ) 
 + } recover { 
 + case EventBusErrors . EventBusNotFound ⇒ EventBusRpcErrors . EventBusNotFound 
 } 
 
 override def jhandleJoinEventBus ( 
 @ @ - 61 , 5 + 71 , 7 @ @ final class EventbusServiceImpl ( system : ActorSystem ) extends EventbusService { 
 for { 
 deviceId ← ext . join ( client . userId , client . authId , id , timeout ) 
 } yield Ok ( ResponseJoinEventBus ( deviceId ) ) 
 + } recover { 
 + case EventBusErrors . EventBusNotFound ⇒ EventBusRpcErrors . EventBusNotFound 
 } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - models / src / main / protobuf / model . proto b / actor - server / actor - models / src / main / protobuf / model . proto 
 index da3eceb . . fd543eb 100644 
 - - - a / actor - server / actor - models / src / main / protobuf / model . proto 
 + + + b / actor - server / actor - models / src / main / protobuf / model . proto 
 @ @ - 75 , 4 + 75 , 10 @ @ message UserPassword { 
 message MasterKey { 
 int64 auth _ id = 1 ; 
 bytes body = 2 ; 
 + } 
 + 
 + message DeviceFeature { 
 + int64 auth _ id = 1 ; 
 + string name = 2 ; 
 + bytes args = 3 ; 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / DeviceFeatureRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / DeviceFeatureRepo . scala 
 new file mode 100644 
 index 0000000 . . 7b66795 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / DeviceFeatureRepo . scala 
 @ @ - 0 , 0 + 1 , 38 @ @ 
 + package im . actor . server . persist 
 + 
 + import com . google . protobuf . ByteString 
 + import im . actor . server . db . ActorPostgresDriver . api . _ 
 + import im . actor . server . model . DeviceFeature 
 + 
 + final class DeviceFeatureTable ( tag : Tag ) extends Table [ DeviceFeature ] ( tag , " device _ features " ) { 
 + def authId = column [ Long ] ( " auth _ id " , O . PrimaryKey ) 
 + 
 + def name = column [ String ] ( " name " , O . PrimaryKey ) 
 + 
 + def args = column [ ByteString ] ( " args " ) 
 + 
 + def * = ( authId , name , args ) < > ( ( DeviceFeature . apply _ ) . tupled , DeviceFeature . unapply ) 
 + } 
 + 
 + object DeviceFeatureRepo { 
 + val deviceFeatures = TableQuery [ DeviceFeatureTable ] 
 + 
 + def byPK ( authId : Rep [ Long ] , name : Rep [ String ] ) = deviceFeatures filter ( df ⇒ df . authId = = = authId & & df . name = = = name ) 
 + 
 + val byPKC = Compiled ( byPK _ ) 
 + val existsC = Compiled { ( authId : Rep [ Long ] , name : Rep [ String ] ) ⇒ 
 + byPK ( authId , name ) . exists 
 + } 
 + 
 + def enable ( feature : DeviceFeature ) = 
 + deviceFeatures . insertOrUpdate ( feature ) 
 + 
 + def disable ( authId : Long , name : String ) = 
 + byPKC ( ( authId , name ) ) . delete 
 + 
 + def find ( authId : Long , name : String ) = 
 + byPKC ( ( authId , name ) ) . result . headOption 
 + 
 + def exists ( authId : Long , name : String ) = 
 + existsC ( ( authId , name ) ) . result 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala 
 index e69de29 . . ac06e74 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala 
 @ @ - 0 , 0 + 1 , 59 @ @ 
 + package im . actor . server . api . rpc . service . features 
 + 
 + import akka . actor . _ 
 + import com . google . protobuf . ByteString 
 + import im . actor . api . rpc . _ 
 + import im . actor . api . rpc . features . FeaturesService 
 + import im . actor . api . rpc . misc . { ResponseBool , ResponseVoid } 
 + import im . actor . api . rpc . peers . ApiUserOutPeer 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . model . DeviceFeature 
 + import im . actor . server . persist . DeviceFeatureRepo 
 + 
 + import scala . concurrent . { ExecutionContext , Future } 
 + 
 + final class FeaturesServiceImpl ( implicit system : ActorSystem ) extends FeaturesService { 
 + override implicit protected val ec : ExecutionContext = system . dispatcher 
 + 
 + private val db = DbExtension ( system ) . db 
 + 
 + override def jhandleEnableFeature ( 
 + featureName : String , 
 + args : Option [ Array [ Byte ] ] , 
 + clientData : ClientData 
 + ) : Future [ HandlerResult [ ResponseVoid ] ] = 
 + authorized ( clientData ) { client ⇒ 
 + for { 
 + _ ← db . run ( 
 + DeviceFeatureRepo . enable ( 
 + DeviceFeature ( 
 + client . authId , 
 + featureName , 
 + args . map ( ByteString . copyFrom ) . getOrElse ( ByteString . EMPTY ) 
 + ) 
 + ) 
 + ) 
 + } yield Ok ( ResponseVoid ) 
 + } 
 + 
 + override def jhandleCheckFeatureEnabled ( 
 + userOutPeer : ApiUserOutPeer , 
 + featureName : String , 
 + clientData : ClientData 
 + ) : Future [ HandlerResult [ ResponseBool ] ] = 
 + authorized ( clientData ) { client ⇒ 
 + for { 
 + exists ← db . run ( DeviceFeatureRepo . exists ( client . authId , featureName ) ) 
 + } yield Ok ( ResponseBool ( exists ) ) 
 + } 
 + 
 + override def jhandleDisableFeature ( 
 + featureName : String , 
 + clientData : ClientData 
 + ) : Future [ HandlerResult [ ResponseVoid ] ] = 
 + authorized ( clientData ) { client ⇒ 
 + for { 
 + _ ← db . run ( DeviceFeatureRepo . disable ( client . authId , featureName ) ) 
 + } yield Ok ( ResponseVoid ) 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 32fa728 . . c138818 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . server . api . rpc . service . auth . AuthServiceImpl 
 import im . actor . server . api . rpc . service . configs . ConfigsServiceImpl 
 import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl 
 import im . actor . server . api . rpc . service . device . DeviceServiceImpl 
 + import im . actor . server . api . rpc . service . features . FeaturesServiceImpl 
 import im . actor . server . api . rpc . service . files . FilesServiceImpl 
 import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } 
 import im . actor . server . api . rpc . service . messaging . { MessagingServiceImpl , ReverseHooksListener } 
 @ @ - 227 , 6 + 228 , 9 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 system . log . debug ( " Starting StickersServiceImpl " ) 
 val stickerService = new StickersServiceImpl 
 
 + system . log . debug ( " Starting FeaturesServiceImpl " ) 
 + val featuresService = new FeaturesServiceImpl 
 + 
 val services = Seq ( 
 authService , 
 contactsService , 
 @ @ - 243 , 7 + 247 , 8 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 integrationsService , 
 webactionsService , 
 deviceService , 
 - stickerService 
 + stickerService , 
 + featuresService 
 ) 
 
 system . log . warning ( " Starting ActorBot " )
