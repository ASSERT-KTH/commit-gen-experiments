BLEU SCORE: 0.5331675363405771

TEST MSG: fix ( server : webrtc ) : push notification about call started
GENERATED MSG: fix ( server : webrtc ) : send voip push only once

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index dc7f134 . . d9d42a6 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . server . webrtc < nl > import akka . actor . _ < nl > import akka . http . scaladsl . util . FastFuture < nl > import akka . pattern . pipe < nl > - import com . relayrides . pushy . apns . util . { ApnsPayloadBuilder , SimpleApnsPushNotification , TokenUtil } < nl > + import com . relayrides . pushy . apns . util . ApnsPayloadBuilder < nl > import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . messaging . { ApiServiceExPhoneCall , ApiServiceExPhoneMissed , ApiServiceMessage } < nl > import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > @ @ - 19 , 7 + 19 , 6 @ @ import im . actor . server . user . UserExtension < nl > import im . actor . server . values . ValuesExtension < nl > import im . actor . types . _ < nl > < nl > - import scala . collection . concurrent . TrieMap < nl > import scala . concurrent . Future < nl > import scala . concurrent . duration . _ < nl > import scala . concurrent . forkjoin . ThreadLocalRandom < nl > @ @ - 502 , 72 + 501 , 60 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with < nl > } < nl > < nl > private def scheduleIncomingCallUpdates ( callees : Seq [ UserId ] ) : Future [ Unit ] = { < nl > - for { < nl > + val pushCredsFu = for { < nl > authIdsMap ← userExt . getAuthIdsMap ( callees . toSet ) < nl > - membersMap = authIdsMap flatMap { < nl > - case ( userId , authIds ) ⇒ getMember ( userId ) map ( _ → authIds ) < nl > + acredsMap ← FutureExt . ftraverse ( authIdsMap . toSeq ) { < nl > + case ( userId , authIds ) ⇒ < nl > + apnsExt . fetchVoipCreds ( authIds . toSet ) map ( userId → _ ) < nl > } < nl > - acredsMap ← FutureExt . ftraverse ( membersMap . toSeq ) { < nl > - case ( member , authIds ) ⇒ < nl > - apnsExt . fetchVoipCreds ( authIds . toSet ) map ( member → _ ) < nl > + gcredsMap ← FutureExt . ftraverse ( authIdsMap . toSeq ) { < nl > + case ( userId , authIds ) ⇒ < nl > + gcmExt . fetchCreds ( authIds . toSet ) map ( userId → _ ) < nl > } < nl > - gcredsMap ← FutureExt . ftraverse ( membersMap . toSeq ) { < nl > - case ( member , authIds ) ⇒ < nl > - gcmExt . fetchCreds ( authIds . toSet ) map ( member → _ ) < nl > + actorCredsMap ← FutureExt . ftraverse ( authIdsMap . toSeq ) { < nl > + case ( userId , authIds ) ⇒ < nl > + actorPush . fetchCreds ( userId ) map ( userId → _ ) < nl > } < nl > - ourCredsMap ← FutureExt . ftraverse ( membersMap . toSeq ) { < nl > - case ( member , authIds ) ⇒ < nl > - actorPush . fetchCreds ( member . userId ) map ( member → _ ) < nl > - } < nl > - } yield { < nl > - for { < nl > - ( member , credsList ) ← acredsMap < nl > - creds ← credsList < nl > - credsId = extractCredsId ( creds ) < nl > - clientFu ← apnsExt . voipClient ( credsId ) < nl > - } yield { < nl > - val payload = < nl > - ( new ApnsPayloadBuilder ) < nl > + } yield ( acredsMap , gcredsMap , actorCredsMap ) < nl > + < nl > + pushCredsFu map { < nl > + case ( appleCreds , googleCreds , actorCreds ) ⇒ < nl > + for { < nl > + ( userId , credsList ) ← appleCreds < nl > + creds ← credsList < nl > + credsId = extractCredsId ( creds ) < nl > + clientFu ← apnsExt . voipClient ( credsId ) < nl > + payload = ( new ApnsPayloadBuilder ) < nl > . addCustomProperty ( " callId " , id ) < nl > - . addCustomProperty ( " attemptIndex " , member . callAttempts ) < nl > + . addCustomProperty ( " attemptIndex " , 1 ) < nl > . buildWithDefaultMaximumLength ( ) < nl > - < nl > - clientFu foreach { implicit client ⇒ < nl > - sendNotification ( payload , creds , member . userId ) < nl > - } < nl > - } < nl > - < nl > - for { < nl > - ( member , creds ) ← gcredsMap < nl > - cred ← creds < nl > - } yield { < nl > - val message = new GooglePushMessage ( < nl > - cred . regId , < nl > - None , < nl > - Some ( Map ( " callId " → id . toString , " attemptIndex " → member . callAttempts . toString ) ) , < nl > - time _ to _ live = Some ( 0 ) < nl > - ) < nl > - gcmExt . send ( cred . projectId , message ) < nl > - } < nl > - < nl > - for { < nl > - ( member , creds ) ← ourCredsMap < nl > - cred ← creds < nl > - } yield { < nl > - actorPush . deliver ( ActorPushMessage ( < nl > - " callId " → id . toString , < nl > - " attemptIndex " → member . callAttempts . toString < nl > - ) , cred ) < nl > - } < nl > - < nl > - scheduledUpds = < nl > - callees . map { userId ⇒ < nl > - ( < nl > - userId , < nl > - system . scheduler . schedule ( 0 . seconds , 5 . seconds , self , SendIncomingCall ( userId ) ) < nl > + _ = clientFu foreach { implicit c ⇒ sendNotification ( payload , creds , userId ) } < nl > + } yield ( ) < nl > + < nl > + for { < nl > + ( member , creds ) ← googleCreds < nl > + cred ← creds < nl > + message = new GooglePushMessage ( < nl > + cred . regId , < nl > + None , < nl > + Some ( Map ( " callId " → id . toString , " attemptIndex " → " 1 " ) ) , < nl > + time _ to _ live = Some ( 0 ) < nl > ) < nl > - } < nl > - . toMap < nl > + _ = gcmExt . send ( cred . projectId , message ) < nl > + } yield ( ) < nl > + < nl > + for { < nl > + ( member , creds ) ← actorCreds < nl > + cred ← creds < nl > + _ = actorPush . deliver ( ActorPushMessage ( < nl > + " callId " → id . toString , < nl > + " attemptIndex " → " 1 " < nl > + ) , cred ) < nl > + } yield ( ) < nl > + < nl > + scheduledUpds = ( callees map { userId ⇒ < nl > + userId → system . scheduler . schedule ( 0 . seconds , 5 . seconds , self , SendIncomingCall ( userId ) ) < nl > + } ) . toMap < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index 66edf9c . . 0c2df69 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 360 , 31 + 360 , 28 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging { < nl > < nl > private def scheduleIncomingCallUpdates ( callees : Seq [ UserId ] ) : Future [ Unit ] = { < nl > for { < nl > - authIdsMap ← userExt . getAuthIdsMap ( callees . toSet ) < nl > - credsMap ← FutureExt . ftraverse ( authIdsMap . toSeq ) { < nl > - case ( userId , authIds ) ⇒ < nl > - apnsExt . findVoipCreds ( authIds . toSet ) map ( userId → _ ) < nl > - } < nl > + authIds ← userExt . getAuthIds ( callees . toSet ) < nl > + credss ← apnsExt . findVoipCreds ( authIds . toSet ) < nl > } yield { < nl > + credss foreach { creds ⇒ < nl > + val payload = ( new ApnsPayloadBuilder ) . addCustomProperty ( " callId " , id ) . buildWithDefaultMaximumLength ( ) < nl > + < nl > + val instanceCreds = apnsExt . getVoipInstance ( creds . apnsKey ) map ( _ → creds ) < nl > + for ( ( instance , cred ) ← instanceCreds ) { < nl > + val notif = new SimpleApnsPushNotification ( cred . token . toByteArray , payload ) < nl > + instance . getQueue . add ( notif ) < nl > + } < nl > + } < nl > + < nl > scheduledUpds = < nl > - credsMap < nl > - . map { < nl > - case ( userId , creds ) ⇒ < nl > - ( < nl > - userId , < nl > - context . system . scheduler . schedule ( 0 . seconds , 5 . seconds ) { < nl > - weakUpdExt . broadcastUserWeakUpdate ( userId , UpdateIncomingCall ( id ) , reduceKey = Some ( s " call _ $ id " ) ) < nl > - < nl > - val payload = ( new ApnsPayloadBuilder ) . addCustomProperty ( " callId " , id ) . buildWithDefaultMaximumLength ( ) < nl > - < nl > - val instanceCreds = creds flatMap ( c ⇒ apnsExt . getVoipInstance ( c . apnsKey ) map ( _ → c ) ) < nl > - for ( ( instance , cred ) ← instanceCreds ) { < nl > - val notif = new SimpleApnsPushNotification ( cred . token . toByteArray , payload ) < nl > - instance . getQueue . add ( notif ) < nl > - } < nl > - } < nl > - ) < nl > - } < nl > + callees . map { userId ⇒ < nl > + ( < nl > + userId , < nl > + context . system . scheduler . schedule ( 0 . seconds , 5 . seconds ) { < nl > + weakUpdExt . broadcastUserWeakUpdate ( userId , UpdateIncomingCall ( id ) , reduceKey = Some ( s " call _ $ id " ) ) < nl > + } < nl > + ) < nl > + } < nl > . toMap < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index dc7f134 . . d9d42a6 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . server . webrtc 
 import akka . actor . _ 
 import akka . http . scaladsl . util . FastFuture 
 import akka . pattern . pipe 
 - import com . relayrides . pushy . apns . util . { ApnsPayloadBuilder , SimpleApnsPushNotification , TokenUtil } 
 + import com . relayrides . pushy . apns . util . ApnsPayloadBuilder 
 import im . actor . api . rpc . _ 
 import im . actor . api . rpc . messaging . { ApiServiceExPhoneCall , ApiServiceExPhoneMissed , ApiServiceMessage } 
 import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 @ @ - 19 , 7 + 19 , 6 @ @ import im . actor . server . user . UserExtension 
 import im . actor . server . values . ValuesExtension 
 import im . actor . types . _ 
 
 - import scala . collection . concurrent . TrieMap 
 import scala . concurrent . Future 
 import scala . concurrent . duration . _ 
 import scala . concurrent . forkjoin . ThreadLocalRandom 
 @ @ - 502 , 72 + 501 , 60 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with 
 } 
 
 private def scheduleIncomingCallUpdates ( callees : Seq [ UserId ] ) : Future [ Unit ] = { 
 - for { 
 + val pushCredsFu = for { 
 authIdsMap ← userExt . getAuthIdsMap ( callees . toSet ) 
 - membersMap = authIdsMap flatMap { 
 - case ( userId , authIds ) ⇒ getMember ( userId ) map ( _ → authIds ) 
 + acredsMap ← FutureExt . ftraverse ( authIdsMap . toSeq ) { 
 + case ( userId , authIds ) ⇒ 
 + apnsExt . fetchVoipCreds ( authIds . toSet ) map ( userId → _ ) 
 } 
 - acredsMap ← FutureExt . ftraverse ( membersMap . toSeq ) { 
 - case ( member , authIds ) ⇒ 
 - apnsExt . fetchVoipCreds ( authIds . toSet ) map ( member → _ ) 
 + gcredsMap ← FutureExt . ftraverse ( authIdsMap . toSeq ) { 
 + case ( userId , authIds ) ⇒ 
 + gcmExt . fetchCreds ( authIds . toSet ) map ( userId → _ ) 
 } 
 - gcredsMap ← FutureExt . ftraverse ( membersMap . toSeq ) { 
 - case ( member , authIds ) ⇒ 
 - gcmExt . fetchCreds ( authIds . toSet ) map ( member → _ ) 
 + actorCredsMap ← FutureExt . ftraverse ( authIdsMap . toSeq ) { 
 + case ( userId , authIds ) ⇒ 
 + actorPush . fetchCreds ( userId ) map ( userId → _ ) 
 } 
 - ourCredsMap ← FutureExt . ftraverse ( membersMap . toSeq ) { 
 - case ( member , authIds ) ⇒ 
 - actorPush . fetchCreds ( member . userId ) map ( member → _ ) 
 - } 
 - } yield { 
 - for { 
 - ( member , credsList ) ← acredsMap 
 - creds ← credsList 
 - credsId = extractCredsId ( creds ) 
 - clientFu ← apnsExt . voipClient ( credsId ) 
 - } yield { 
 - val payload = 
 - ( new ApnsPayloadBuilder ) 
 + } yield ( acredsMap , gcredsMap , actorCredsMap ) 
 + 
 + pushCredsFu map { 
 + case ( appleCreds , googleCreds , actorCreds ) ⇒ 
 + for { 
 + ( userId , credsList ) ← appleCreds 
 + creds ← credsList 
 + credsId = extractCredsId ( creds ) 
 + clientFu ← apnsExt . voipClient ( credsId ) 
 + payload = ( new ApnsPayloadBuilder ) 
 . addCustomProperty ( " callId " , id ) 
 - . addCustomProperty ( " attemptIndex " , member . callAttempts ) 
 + . addCustomProperty ( " attemptIndex " , 1 ) 
 . buildWithDefaultMaximumLength ( ) 
 - 
 - clientFu foreach { implicit client ⇒ 
 - sendNotification ( payload , creds , member . userId ) 
 - } 
 - } 
 - 
 - for { 
 - ( member , creds ) ← gcredsMap 
 - cred ← creds 
 - } yield { 
 - val message = new GooglePushMessage ( 
 - cred . regId , 
 - None , 
 - Some ( Map ( " callId " → id . toString , " attemptIndex " → member . callAttempts . toString ) ) , 
 - time _ to _ live = Some ( 0 ) 
 - ) 
 - gcmExt . send ( cred . projectId , message ) 
 - } 
 - 
 - for { 
 - ( member , creds ) ← ourCredsMap 
 - cred ← creds 
 - } yield { 
 - actorPush . deliver ( ActorPushMessage ( 
 - " callId " → id . toString , 
 - " attemptIndex " → member . callAttempts . toString 
 - ) , cred ) 
 - } 
 - 
 - scheduledUpds = 
 - callees . map { userId ⇒ 
 - ( 
 - userId , 
 - system . scheduler . schedule ( 0 . seconds , 5 . seconds , self , SendIncomingCall ( userId ) ) 
 + _ = clientFu foreach { implicit c ⇒ sendNotification ( payload , creds , userId ) } 
 + } yield ( ) 
 + 
 + for { 
 + ( member , creds ) ← googleCreds 
 + cred ← creds 
 + message = new GooglePushMessage ( 
 + cred . regId , 
 + None , 
 + Some ( Map ( " callId " → id . toString , " attemptIndex " → " 1 " ) ) , 
 + time _ to _ live = Some ( 0 ) 
 ) 
 - } 
 - . toMap 
 + _ = gcmExt . send ( cred . projectId , message ) 
 + } yield ( ) 
 + 
 + for { 
 + ( member , creds ) ← actorCreds 
 + cred ← creds 
 + _ = actorPush . deliver ( ActorPushMessage ( 
 + " callId " → id . toString , 
 + " attemptIndex " → " 1 " 
 + ) , cred ) 
 + } yield ( ) 
 + 
 + scheduledUpds = ( callees map { userId ⇒ 
 + userId → system . scheduler . schedule ( 0 . seconds , 5 . seconds , self , SendIncomingCall ( userId ) ) 
 + } ) . toMap 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index 66edf9c . . 0c2df69 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 360 , 31 + 360 , 28 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging { 
 
 private def scheduleIncomingCallUpdates ( callees : Seq [ UserId ] ) : Future [ Unit ] = { 
 for { 
 - authIdsMap ← userExt . getAuthIdsMap ( callees . toSet ) 
 - credsMap ← FutureExt . ftraverse ( authIdsMap . toSeq ) { 
 - case ( userId , authIds ) ⇒ 
 - apnsExt . findVoipCreds ( authIds . toSet ) map ( userId → _ ) 
 - } 
 + authIds ← userExt . getAuthIds ( callees . toSet ) 
 + credss ← apnsExt . findVoipCreds ( authIds . toSet ) 
 } yield { 
 + credss foreach { creds ⇒ 
 + val payload = ( new ApnsPayloadBuilder ) . addCustomProperty ( " callId " , id ) . buildWithDefaultMaximumLength ( ) 
 + 
 + val instanceCreds = apnsExt . getVoipInstance ( creds . apnsKey ) map ( _ → creds ) 
 + for ( ( instance , cred ) ← instanceCreds ) { 
 + val notif = new SimpleApnsPushNotification ( cred . token . toByteArray , payload ) 
 + instance . getQueue . add ( notif ) 
 + } 
 + } 
 + 
 scheduledUpds = 
 - credsMap 
 - . map { 
 - case ( userId , creds ) ⇒ 
 - ( 
 - userId , 
 - context . system . scheduler . schedule ( 0 . seconds , 5 . seconds ) { 
 - weakUpdExt . broadcastUserWeakUpdate ( userId , UpdateIncomingCall ( id ) , reduceKey = Some ( s " call _ $ id " ) ) 
 - 
 - val payload = ( new ApnsPayloadBuilder ) . addCustomProperty ( " callId " , id ) . buildWithDefaultMaximumLength ( ) 
 - 
 - val instanceCreds = creds flatMap ( c ⇒ apnsExt . getVoipInstance ( c . apnsKey ) map ( _ → c ) ) 
 - for ( ( instance , cred ) ← instanceCreds ) { 
 - val notif = new SimpleApnsPushNotification ( cred . token . toByteArray , payload ) 
 - instance . getQueue . add ( notif ) 
 - } 
 - } 
 - ) 
 - } 
 + callees . map { userId ⇒ 
 + ( 
 + userId , 
 + context . system . scheduler . schedule ( 0 . seconds , 5 . seconds ) { 
 + weakUpdExt . broadcastUserWeakUpdate ( userId , UpdateIncomingCall ( id ) , reduceKey = Some ( s " call _ $ id " ) ) 
 + } 
 + ) 
 + } 
 . toMap 
 } 
 }
