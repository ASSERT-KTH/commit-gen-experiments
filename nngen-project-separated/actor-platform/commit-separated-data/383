BLEU SCORE: 0.2626909894424158

TEST MSG: fix ( server ) : change remote _ addr TypeMapper
GENERATED MSG: feat ( server ) : add InetAddress type mapper

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > index ccf4771 . . 96ef2ea 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > @ @ - 42 , 16 + 42 , 16 @ @ private [ api ] trait MessageMapper { < nl > ByteString . copyFrom ( message . toByteArray ) < nl > } < nl > < nl > - private def applyInetAddress ( remoteAddr : String ) : InetAddress = { < nl > - if ( remoteAddr ! = null ) { < nl > - InetAddress . getByName ( remoteAddr ) < nl > + private def applyInetAddress ( bytes : ByteString ) : InetAddress = { < nl > + if ( bytes . size ( ) > 0 ) { < nl > + InetAddress . getByAddress ( bytes . toByteArray ) < nl > } else { < nl > null < nl > } < nl > } < nl > < nl > - private def unapplyInetAddress ( address : InetAddress ) : String = { < nl > - address . getHostName < nl > + private def unapplyInetAddress ( remoteAddr : InetAddress ) : ByteString = { < nl > + ByteString . copyFrom ( remoteAddr . getAddress ( ) ) < nl > } < nl > < nl > private def applyUser ( bytes : ByteString ) : ApiUser = { < nl > @ @ - 183 , 7 + 183 , 7 @ @ private [ api ] trait MessageMapper { < nl > < nl > implicit val instantMapper : TypeMapper [ Long , Instant ] = TypeMapper ( applyInstant ) ( unapplyInstant ) < nl > < nl > - implicit val inetAddressMapper : TypeMapper [ String , InetAddress ] = TypeMapper ( applyInetAddress ) ( unapplyInetAddress ) < nl > + implicit val inetAddressMapper : TypeMapper [ ByteString , InetAddress ] = TypeMapper ( applyInetAddress ) ( unapplyInetAddress ) < nl > < nl > implicit val instantOptMapper : TypeMapper [ Int64Value , Instant ] = TypeMapper ( applyInstantOpt ) ( unapplyInstantOpt ) < nl > < nl > diff - - git a / actor - server / actor - session - messages / src / main / protobuf / session . proto b / actor - server / actor - session - messages / src / main / protobuf / session . proto < nl > index 94fc427 . . 6ecb44d 100644 < nl > - - - a / actor - server / actor - session - messages / src / main / protobuf / session . proto < nl > + + + b / actor - server / actor - session - messages / src / main / protobuf / session . proto < nl > @ @ - 30 , 7 + 30 , 7 @ @ message SessionEnvelope { < nl > message HandleMessageBox { < nl > option ( scalapb . message ) . extends = " im . actor . server . session . SessionMessage " ; < nl > required bytes message _ box _ bytes = 1 ; < nl > - optional string remote _ addr = 2 [ ( scalapb . field ) . type = " java . net . InetAddress " ] ; < nl > + optional bytes remote _ addr = 2 [ ( scalapb . field ) . type = " java . net . InetAddress " ] ; < nl > } < nl > < nl > message AuthorizeUser {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > index 9f6c2a7 . . ccf4771 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . server . api < nl > < nl > + import java . net . InetAddress < nl > import java . time . Instant < nl > < nl > import akka . actor . { ActorRef , ActorSystem , ExtendedActorSystem } < nl > @ @ - 41 , 6 + 42 , 18 @ @ private [ api ] trait MessageMapper { < nl > ByteString . copyFrom ( message . toByteArray ) < nl > } < nl > < nl > + private def applyInetAddress ( remoteAddr : String ) : InetAddress = { < nl > + if ( remoteAddr ! = null ) { < nl > + InetAddress . getByName ( remoteAddr ) < nl > + } else { < nl > + null < nl > + } < nl > + } < nl > + < nl > + private def unapplyInetAddress ( address : InetAddress ) : String = { < nl > + address . getHostName < nl > + } < nl > + < nl > private def applyUser ( bytes : ByteString ) : ApiUser = { < nl > if ( bytes . size ( ) > 0 ) { < nl > val res = ApiUser . parseFrom ( CodedInputStream . newInstance ( bytes . toByteArray ) ) < nl > @ @ - 170 , 6 + 183 , 8 @ @ private [ api ] trait MessageMapper { < nl > < nl > implicit val instantMapper : TypeMapper [ Long , Instant ] = TypeMapper ( applyInstant ) ( unapplyInstant ) < nl > < nl > + implicit val inetAddressMapper : TypeMapper [ String , InetAddress ] = TypeMapper ( applyInetAddress ) ( unapplyInetAddress ) < nl > + < nl > implicit val instantOptMapper : TypeMapper [ Int64Value , Instant ] = TypeMapper ( applyInstantOpt ) ( unapplyInstantOpt ) < nl > < nl > implicit val avatarMapper : TypeMapper [ ByteString , ApiAvatar ] = TypeMapper ( applyAvatar ) ( unapplyAvatar )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala 
 index ccf4771 . . 96ef2ea 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala 
 @ @ - 42 , 16 + 42 , 16 @ @ private [ api ] trait MessageMapper { 
 ByteString . copyFrom ( message . toByteArray ) 
 } 
 
 - private def applyInetAddress ( remoteAddr : String ) : InetAddress = { 
 - if ( remoteAddr ! = null ) { 
 - InetAddress . getByName ( remoteAddr ) 
 + private def applyInetAddress ( bytes : ByteString ) : InetAddress = { 
 + if ( bytes . size ( ) > 0 ) { 
 + InetAddress . getByAddress ( bytes . toByteArray ) 
 } else { 
 null 
 } 
 } 
 
 - private def unapplyInetAddress ( address : InetAddress ) : String = { 
 - address . getHostName 
 + private def unapplyInetAddress ( remoteAddr : InetAddress ) : ByteString = { 
 + ByteString . copyFrom ( remoteAddr . getAddress ( ) ) 
 } 
 
 private def applyUser ( bytes : ByteString ) : ApiUser = { 
 @ @ - 183 , 7 + 183 , 7 @ @ private [ api ] trait MessageMapper { 
 
 implicit val instantMapper : TypeMapper [ Long , Instant ] = TypeMapper ( applyInstant ) ( unapplyInstant ) 
 
 - implicit val inetAddressMapper : TypeMapper [ String , InetAddress ] = TypeMapper ( applyInetAddress ) ( unapplyInetAddress ) 
 + implicit val inetAddressMapper : TypeMapper [ ByteString , InetAddress ] = TypeMapper ( applyInetAddress ) ( unapplyInetAddress ) 
 
 implicit val instantOptMapper : TypeMapper [ Int64Value , Instant ] = TypeMapper ( applyInstantOpt ) ( unapplyInstantOpt ) 
 
 diff - - git a / actor - server / actor - session - messages / src / main / protobuf / session . proto b / actor - server / actor - session - messages / src / main / protobuf / session . proto 
 index 94fc427 . . 6ecb44d 100644 
 - - - a / actor - server / actor - session - messages / src / main / protobuf / session . proto 
 + + + b / actor - server / actor - session - messages / src / main / protobuf / session . proto 
 @ @ - 30 , 7 + 30 , 7 @ @ message SessionEnvelope { 
 message HandleMessageBox { 
 option ( scalapb . message ) . extends = " im . actor . server . session . SessionMessage " ; 
 required bytes message _ box _ bytes = 1 ; 
 - optional string remote _ addr = 2 [ ( scalapb . field ) . type = " java . net . InetAddress " ] ; 
 + optional bytes remote _ addr = 2 [ ( scalapb . field ) . type = " java . net . InetAddress " ] ; 
 } 
 
 message AuthorizeUser {

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala 
 index 9f6c2a7 . . ccf4771 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . server . api 
 
 + import java . net . InetAddress 
 import java . time . Instant 
 
 import akka . actor . { ActorRef , ActorSystem , ExtendedActorSystem } 
 @ @ - 41 , 6 + 42 , 18 @ @ private [ api ] trait MessageMapper { 
 ByteString . copyFrom ( message . toByteArray ) 
 } 
 
 + private def applyInetAddress ( remoteAddr : String ) : InetAddress = { 
 + if ( remoteAddr ! = null ) { 
 + InetAddress . getByName ( remoteAddr ) 
 + } else { 
 + null 
 + } 
 + } 
 + 
 + private def unapplyInetAddress ( address : InetAddress ) : String = { 
 + address . getHostName 
 + } 
 + 
 private def applyUser ( bytes : ByteString ) : ApiUser = { 
 if ( bytes . size ( ) > 0 ) { 
 val res = ApiUser . parseFrom ( CodedInputStream . newInstance ( bytes . toByteArray ) ) 
 @ @ - 170 , 6 + 183 , 8 @ @ private [ api ] trait MessageMapper { 
 
 implicit val instantMapper : TypeMapper [ Long , Instant ] = TypeMapper ( applyInstant ) ( unapplyInstant ) 
 
 + implicit val inetAddressMapper : TypeMapper [ String , InetAddress ] = TypeMapper ( applyInetAddress ) ( unapplyInetAddress ) 
 + 
 implicit val instantOptMapper : TypeMapper [ Int64Value , Instant ] = TypeMapper ( applyInstantOpt ) ( unapplyInstantOpt ) 
 
 implicit val avatarMapper : TypeMapper [ ByteString , ApiAvatar ] = TypeMapper ( applyAvatar ) ( unapplyAvatar )
