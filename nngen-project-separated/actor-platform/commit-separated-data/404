BLEU SCORE: 0.06917184228205475

TEST MSG: perf ( server : messaging ) : get group memberIds only for non - public groups
GENERATED MSG: fix ( server ) : persist api entichment

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala < nl > index 9d96c99 . . e3dfb93 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala < nl > @ @ - 55 , 21 + 55 , 18 @ @ object HistoryUtils { < nl > _ ← HistoryMessageRepo . create ( messages ) < nl > } yield ( ) < nl > } else if ( toPeer . typ = = PeerType . Group ) { < nl > - val groupInfo = for { < nl > - isShared ← GroupExtension ( system ) . isHistoryShared ( toPeer . id ) < nl > - ( memberIds , _ , _ ) ← GroupExtension ( system ) . getMemberIds ( toPeer . id ) < nl > - } yield ( isShared , memberIds ) < nl > - < nl > for { < nl > - ( isHistoryShared , groupUserIds ) ← DBIO . from ( groupInfo ) < nl > + isHistoryShared ← DBIO . from ( GroupExtension ( system ) . isHistoryShared ( toPeer . id ) ) < nl > _ ← if ( isHistoryShared ) { < nl > val historyMessage = HistoryMessage ( SharedUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) < nl > HistoryMessageRepo . create ( historyMessage ) map ( _ ⇒ ( ) ) < nl > } else { < nl > - val historyMessages = groupUserIds . map { groupUserId ⇒ < nl > - HistoryMessage ( groupUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) < nl > + DBIO . from ( GroupExtension ( system ) . getMemberIds ( toPeer . id ) ) map ( _ . _ 1 ) flatMap { groupUserIds = > < nl > + val historyMessages = groupUserIds . map { groupUserId ⇒ < nl > + HistoryMessage ( groupUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) < nl > + } < nl > + HistoryMessageRepo . create ( historyMessages ) map ( _ ⇒ ( ) ) < nl > } < nl > - HistoryMessageRepo . create ( historyMessages ) map ( _ ⇒ ( ) ) < nl > } < nl > } yield ( ) < nl > } else {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala < nl > index d3a6b75 . . cdd223e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala < nl > @ @ - 15 , 7 + 15 , 7 @ @ object HistoryUtils { < nl > import GroupUtils . _ < nl > < nl > / / User for writing history in public groups < nl > - private val sharedUserId = 0 < nl > + val SharedUserId = 0 < nl > < nl > private [ dialog ] def writeHistoryMessage ( < nl > fromPeer : Peer , < nl > @ @ - 60 , 7 + 60 , 7 @ @ object HistoryUtils { < nl > DBIO . from ( GroupExtension ( system ) . isHistoryShared ( toPeer . id ) ) flatMap { isHistoryShared ⇒ < nl > withGroupUserIds ( toPeer . id ) { groupUserIds ⇒ < nl > if ( isHistoryShared ) { < nl > - val historyMessage = HistoryMessage ( sharedUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) < nl > + val historyMessage = HistoryMessage ( SharedUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) < nl > < nl > for { < nl > _ ← persist . DialogRepo . updateLastMessageDates ( groupUserIds . toSet , toPeer , date ) < nl > @ @ - 144 , 7 + 144 , 7 @ @ object HistoryUtils { < nl > implicit val groupViewRegion = GroupExtension ( system ) . viewRegion < nl > DBIO . from ( GroupExtension ( system ) . isHistoryShared ( peer . id ) ) flatMap { isHistoryShared ⇒ < nl > if ( isHistoryShared ) { < nl > - DBIO . successful ( sharedUserId ) < nl > + DBIO . successful ( SharedUserId ) < nl > } else { < nl > DBIO . successful ( clientUserId ) < nl > } < nl > @ @ - 153 , 7 + 153 , 7 @ @ object HistoryUtils { < nl > } ) flatMap f < nl > } < nl > < nl > - def isSharedUser ( userId : Int ) : Boolean = userId = = sharedUserId < nl > + def isSharedUser ( userId : Int ) : Boolean = userId = = SharedUserId < nl > < nl > private def requirePrivatePeer ( peer : Peer ) = { < nl > if ( peer . typ ! = PeerType . Private ) < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > index 362368d . . 4edef6b 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > @ @ - 84 , 6 + 84 , 15 @ @ object HistoryMessageRepo { < nl > query . take ( limit ) . result < nl > } < nl > < nl > + def findBySender ( senderUserId : Int , peer : Peer , randomId : Long ) : FixedSqlStreamingAction [ Seq [ HistoryMessage ] , HistoryMessage , Read ] = < nl > + notDeletedMessages . filter ( m ⇒ m . senderUserId = = = senderUserId & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id & & m . randomId = = = randomId ) . result < nl > + < nl > + def findUserIds ( peer : Peer , randomIds : Set [ Long ] ) : DBIO [ Seq [ Int ] ] = < nl > + notDeletedMessages < nl > + . filter ( m ⇒ m . peerType = = = peer . typ . value & & m . peerId = = = peer . id & & ( m . randomId inSet randomIds ) ) < nl > + . map ( _ . userId ) < nl > + . result < nl > + < nl > def findNewest ( userId : Int , peer : Peer ) : SqlAction [ Option [ HistoryMessage ] , NoStream , Read ] = < nl > notDeletedMessages < nl > . filter ( m ⇒ m . userId = = = userId & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala 
 index 9d96c99 . . e3dfb93 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala 
 @ @ - 55 , 21 + 55 , 18 @ @ object HistoryUtils { 
 _ ← HistoryMessageRepo . create ( messages ) 
 } yield ( ) 
 } else if ( toPeer . typ = = PeerType . Group ) { 
 - val groupInfo = for { 
 - isShared ← GroupExtension ( system ) . isHistoryShared ( toPeer . id ) 
 - ( memberIds , _ , _ ) ← GroupExtension ( system ) . getMemberIds ( toPeer . id ) 
 - } yield ( isShared , memberIds ) 
 - 
 for { 
 - ( isHistoryShared , groupUserIds ) ← DBIO . from ( groupInfo ) 
 + isHistoryShared ← DBIO . from ( GroupExtension ( system ) . isHistoryShared ( toPeer . id ) ) 
 _ ← if ( isHistoryShared ) { 
 val historyMessage = HistoryMessage ( SharedUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) 
 HistoryMessageRepo . create ( historyMessage ) map ( _ ⇒ ( ) ) 
 } else { 
 - val historyMessages = groupUserIds . map { groupUserId ⇒ 
 - HistoryMessage ( groupUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) 
 + DBIO . from ( GroupExtension ( system ) . getMemberIds ( toPeer . id ) ) map ( _ . _ 1 ) flatMap { groupUserIds = > 
 + val historyMessages = groupUserIds . map { groupUserId ⇒ 
 + HistoryMessage ( groupUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) 
 + } 
 + HistoryMessageRepo . create ( historyMessages ) map ( _ ⇒ ( ) ) 
 } 
 - HistoryMessageRepo . create ( historyMessages ) map ( _ ⇒ ( ) ) 
 } 
 } yield ( ) 
 } else {

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala 
 index d3a6b75 . . cdd223e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / HistoryUtils . scala 
 @ @ - 15 , 7 + 15 , 7 @ @ object HistoryUtils { 
 import GroupUtils . _ 
 
 / / User for writing history in public groups 
 - private val sharedUserId = 0 
 + val SharedUserId = 0 
 
 private [ dialog ] def writeHistoryMessage ( 
 fromPeer : Peer , 
 @ @ - 60 , 7 + 60 , 7 @ @ object HistoryUtils { 
 DBIO . from ( GroupExtension ( system ) . isHistoryShared ( toPeer . id ) ) flatMap { isHistoryShared ⇒ 
 withGroupUserIds ( toPeer . id ) { groupUserIds ⇒ 
 if ( isHistoryShared ) { 
 - val historyMessage = HistoryMessage ( sharedUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) 
 + val historyMessage = HistoryMessage ( SharedUserId , toPeer , date , fromPeer . id , randomId , messageContentHeader , messageContentData , None ) 
 
 for { 
 _ ← persist . DialogRepo . updateLastMessageDates ( groupUserIds . toSet , toPeer , date ) 
 @ @ - 144 , 7 + 144 , 7 @ @ object HistoryUtils { 
 implicit val groupViewRegion = GroupExtension ( system ) . viewRegion 
 DBIO . from ( GroupExtension ( system ) . isHistoryShared ( peer . id ) ) flatMap { isHistoryShared ⇒ 
 if ( isHistoryShared ) { 
 - DBIO . successful ( sharedUserId ) 
 + DBIO . successful ( SharedUserId ) 
 } else { 
 DBIO . successful ( clientUserId ) 
 } 
 @ @ - 153 , 7 + 153 , 7 @ @ object HistoryUtils { 
 } ) flatMap f 
 } 
 
 - def isSharedUser ( userId : Int ) : Boolean = userId = = sharedUserId 
 + def isSharedUser ( userId : Int ) : Boolean = userId = = SharedUserId 
 
 private def requirePrivatePeer ( peer : Peer ) = { 
 if ( peer . typ ! = PeerType . Private ) 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 index 362368d . . 4edef6b 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 @ @ - 84 , 6 + 84 , 15 @ @ object HistoryMessageRepo { 
 query . take ( limit ) . result 
 } 
 
 + def findBySender ( senderUserId : Int , peer : Peer , randomId : Long ) : FixedSqlStreamingAction [ Seq [ HistoryMessage ] , HistoryMessage , Read ] = 
 + notDeletedMessages . filter ( m ⇒ m . senderUserId = = = senderUserId & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id & & m . randomId = = = randomId ) . result 
 + 
 + def findUserIds ( peer : Peer , randomIds : Set [ Long ] ) : DBIO [ Seq [ Int ] ] = 
 + notDeletedMessages 
 + . filter ( m ⇒ m . peerType = = = peer . typ . value & & m . peerId = = = peer . id & & ( m . randomId inSet randomIds ) ) 
 + . map ( _ . userId ) 
 + . result 
 + 
 def findNewest ( userId : Int , peer : Peer ) : SqlAction [ Option [ HistoryMessage ] , NoStream , Read ] = 
 notDeletedMessages 
 . filter ( m ⇒ m . userId = = = userId & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id )
