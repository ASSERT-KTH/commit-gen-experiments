BLEU SCORE: 0.020244462660665517

TEST MSG: Merge branch ' master ' of https : / / github . com / actorapp / actor - platform
GENERATED MSG: feat ( core + android ) : custom Json message with content description

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidNotifications . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidNotifications . java < nl > index 5aecfd0 . . 1b1badf 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidNotifications . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidNotifications . java < nl > @ @ - 163 , 7 + 163 , 7 @ @ public class AndroidNotifications implements NotificationProvider { < nl > < nl > String sender = getNotificationSender ( topNotification ) ; < nl > builder . setContentTitle ( sender ) ; < nl > - builder . setContentText ( messagesCount + " messages " ) ; < nl > + builder . setContentText ( messagesCount + context . getString ( R . string . notifications _ single _ conversation _ а fter _ messages _ count ) ) ; < nl > visiblePeer = topNotification . getPeer ( ) ; < nl > < nl > < nl > @ @ - 176 , 7 + 176 , 7 @ @ public class AndroidNotifications implements NotificationProvider { < nl > inboxStyle . addLine ( messenger . getFormatter ( ) . formatNotificationText ( n ) ) ; < nl > } < nl > } < nl > - inboxStyle . setSummaryText ( messagesCount + " messages " ) ; < nl > + inboxStyle . setSummaryText ( messagesCount + context . getString ( R . string . notifications _ single _ conversation _ а fter _ messages _ count ) ) ; < nl > Avatar avatar = null ; < nl > int id = 0 ; < nl > String avatarTitle = " " ; < nl > @ @ - 226 , 7 + 226 , 7 @ @ public class AndroidNotifications implements NotificationProvider { < nl > } else { < nl > / / Multiple conversations notification < nl > builder . setContentTitle ( ActorSDK . sharedActor ( ) . getAppName ( ) ) ; < nl > - builder . setContentText ( messagesCount + " messages in " + conversationsCount + " chats " ) ; < nl > + builder . setContentText ( messagesCount + context . getString ( R . string . notification _ multiple _ canversations _ after _ msg _ count ) + conversationsCount + context . getString ( R . string . notifications _ multiple _ canversations _ after _ coversations _ count ) ) ; < nl > visiblePeer = null ; < nl > < nl > intent = new Intent ( context , ActorMainActivity . class ) ; < nl > @ @ - 239 , 7 + 239 , 7 @ @ public class AndroidNotifications implements NotificationProvider { < nl > for ( Notification n : topNotifications ) { < nl > inboxStyle . addLine ( getNotificationTextFull ( n , messenger ) ) ; < nl > } < nl > - inboxStyle . setSummaryText ( messagesCount + " messages in " + conversationsCount + " chats " ) ; < nl > + inboxStyle . setSummaryText ( messagesCount + context . getString ( R . string . notification _ multiple _ canversations _ after _ msg _ count ) + conversationsCount + context . getString ( R . string . notifications _ multiple _ canversations _ after _ coversations _ count ) ) ; < nl > < nl > result = builder < nl > . setStyle ( inboxStyle ) < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / ui _ text . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / ui _ text . xml < nl > index 3e02c2b . . 5461c8d 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / ui _ text . xml < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / ui _ text . xml < nl > @ @ - 489 , 4 + 489 , 7 @ @ < nl > < string name = " messages _ action _ delete " > Delete < / string > < nl > < string name = " messages _ action _ copy " > Copy < / string > < nl > < string name = " messages _ action _ like " > Like < / string > < nl > + < string name = " notification _ multiple _ canversations _ after _ msg _ count " > " messages in " < / string > < nl > + < string name = " notifications _ multiple _ canversations _ after _ coversations _ count " > " chats " < / string > < nl > + < string name = " notifications _ single _ conversation _ а fter _ messages _ count " > " messages " < / string > < nl > < / resources > < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java < nl > index 502b573 . . 2845526 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java < nl > @ @ - 14 , 6 + 14 , 8 @ @ import im . actor . core . entity . content . DocumentContent ; < nl > import im . actor . core . entity . content . JsonContent ; < nl > import im . actor . core . entity . content . LocationContent ; < nl > import im . actor . core . entity . content . PhotoContent ; < nl > + import im . actor . core . entity . content . ServiceCallEnded ; < nl > + import im . actor . core . entity . content . ServiceCallMissed ; < nl > import im . actor . core . entity . content . ServiceContent ; < nl > import im . actor . core . entity . content . ServiceGroupAvatarChanged ; < nl > import im . actor . core . entity . content . ServiceGroupCreated ; < nl > @ @ - 59 , 6 + 61 , 10 @ @ public class ContentDescription extends BserObject { < nl > return new ContentDescription ( ContentType . STICKER ) ; < nl > } else if ( msg instanceof ServiceUserRegistered ) { < nl > return new ContentDescription ( ContentType . SERVICE _ REGISTERED ) ; < nl > + } else if ( msg instanceof ServiceCallEnded ) { < nl > + return new ContentDescription ( ContentType . SERVICE _ CALL _ ENDED ) ; < nl > + } else if ( msg instanceof ServiceCallMissed ) { < nl > + return new ContentDescription ( ContentType . SERVICE _ CALL _ MISSED ) ; < nl > } else if ( msg instanceof JsonContent ) { < nl > return new ContentDescription ( ContentType . CUSTOM _ JSON _ MESSAGE , ( ( JsonContent ) msg ) . getContentDescription ( ) ) ; < nl > } else if ( msg instanceof ServiceGroupAvatarChanged ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java < nl > index 18af328 . . 29da0aa 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java < nl > @ @ - 24 , 6 + 24 , 8 @ @ public enum ContentType { < nl > SERVICE _ AVATAR ( 13 ) , < nl > SERVICE _ AVATAR _ REMOVED ( 14 ) , < nl > CUSTOM _ JSON _ MESSAGE ( 21 ) , < nl > + SERVICE _ CALL _ ENDED ( 22 ) , < nl > + SERVICE _ CALL _ MISSED ( 23 ) , < nl > UNKNOWN _ CONTENT ( 15 ) ; < nl > < nl > int value ; < nl > @ @ - 79 , 6 + 81 , 10 @ @ public enum ContentType { < nl > return STICKER ; < nl > case 21 : < nl > return CUSTOM _ JSON _ MESSAGE ; < nl > + case 22 : < nl > + return SERVICE _ CALL _ ENDED ; < nl > + case 23 : < nl > + return SERVICE _ CALL _ MISSED ; < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > index 404c2a3 . . 09d28e6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > @ @ - 19 , 6 + 19 , 8 @ @ import im . actor . core . api . ApiServiceExChangedAvatar ; < nl > import im . actor . core . api . ApiServiceExChangedTitle ; < nl > import im . actor . core . api . ApiServiceExContactRegistered ; < nl > import im . actor . core . api . ApiServiceExGroupCreated ; < nl > + import im . actor . core . api . ApiServiceExPhoneCall ; < nl > + import im . actor . core . api . ApiServiceExPhoneMissed ; < nl > import im . actor . core . api . ApiServiceExUserInvited ; < nl > import im . actor . core . api . ApiServiceExUserJoined ; < nl > import im . actor . core . api . ApiServiceExUserKicked ; < nl > @ @ - 148 , 6 + 150 , 10 @ @ public abstract class AbsContent { < nl > return new ServiceGroupUserLeave ( remoteContainer ) ; < nl > } else if ( ext instanceof ApiServiceExUserJoined ) { < nl > return new ServiceGroupUserJoined ( remoteContainer ) ; < nl > + } else if ( ext instanceof ApiServiceExPhoneCall ) { < nl > + return new ServiceCallEnded ( remoteContainer ) ; < nl > + } else if ( ext instanceof ApiServiceExPhoneMissed ) { < nl > + return new ServiceCallMissed ( remoteContainer ) ; < nl > } else { < nl > return new ServiceContent ( remoteContainer ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ServiceCallEnded . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ServiceCallEnded . java < nl > new file mode 100644 < nl > index 0000000 . . 8fc1cb4 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ServiceCallEnded . java < nl > @ @ - 0 , 0 + 1 , 17 @ @ < nl > + / * < nl > + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + * / < nl > + < nl > + package im . actor . core . entity . content ; < nl > + < nl > + import im . actor . core . api . ApiServiceExGroupCreated ; < nl > + import im . actor . core . api . ApiServiceMessage ; < nl > + import im . actor . core . entity . content . internal . ContentRemoteContainer ; < nl > + < nl > + public class ServiceCallEnded extends ServiceContent { < nl > + < nl > + < nl > + public ServiceCallEnded ( ContentRemoteContainer contentContainer ) { < nl > + super ( contentContainer ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ServiceCallMissed . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ServiceCallMissed . java < nl > new file mode 100644 < nl > index 0000000 . . 22e8e09 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ServiceCallMissed . java < nl > @ @ - 0 , 0 + 1 , 15 @ @ < nl > + / * < nl > + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + * / < nl > + < nl > + package im . actor . core . entity . content ; < nl > + < nl > + import im . actor . core . entity . content . internal . ContentRemoteContainer ; < nl > + < nl > + public class ServiceCallMissed extends ServiceContent { < nl > + < nl > + < nl > + public ServiceCallMissed ( ContentRemoteContainer contentContainer ) { < nl > + super ( contentContainer ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > index b89e903 . . 9ffb946 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > @ @ - 18 , 6 + 18 , 8 @ @ import im . actor . core . entity . Notification ; < nl > import im . actor . core . entity . PeerType ; < nl > import im . actor . core . entity . Sex ; < nl > import im . actor . core . entity . User ; < nl > + import im . actor . core . entity . content . ServiceCallEnded ; < nl > + import im . actor . core . entity . content . ServiceCallMissed ; < nl > import im . actor . core . entity . content . ServiceContent ; < nl > import im . actor . core . entity . content . ServiceGroupAvatarChanged ; < nl > import im . actor . core . entity . content . ServiceGroupCreated ; < nl > @ @ - 387 , 6 + 389 , 10 @ @ public class I18nEngine { < nl > return getTemplateNamed ( senderId , " ServiceGroupTitle " ) ; < nl > case SERVICE _ JOINED : < nl > return getTemplateNamed ( senderId , " ServiceGroupJoined " ) ; < nl > + case SERVICE _ CALL _ ENDED : < nl > + return locale . get ( " ServiceCallEnded " ) ; < nl > + case SERVICE _ CALL _ MISSED : < nl > + return locale . get ( " ServiceCallMissed " ) ; < nl > case NONE : < nl > return " " ; < nl > default : < nl > @ @ - 443 , 6 + 449 , 10 @ @ public class I18nEngine { < nl > } < nl > } else if ( content instanceof ServiceGroupUserJoined ) { < nl > return getTemplateNamed ( senderId , " ServiceGroupJoined " ) ; < nl > + } else if ( content instanceof ServiceCallEnded ) { < nl > + return locale . get ( " ServiceCallEnded " ) ; < nl > + } else if ( content instanceof ServiceCallMissed ) { < nl > + return locale . get ( " ServiceCallMissed " ) ; < nl > } < nl > < nl > return content . getCompatText ( ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText . properties b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText . properties < nl > index f51241f . . 737dd51 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText . properties < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText . properties < nl > @ @ - 52 , 6 + 52 , 8 @ @ ServiceGroupTitle = { name } changed the group name < nl > ServiceGroupTitleFull = { name } changed the group name to " { title } " < nl > ServiceGroupAvatarChanged = { name } changed the group photo < nl > ServiceGroupAvatarRemoved = { name } removed the group photo < nl > + ServiceCallEnded = Call ended < nl > + ServiceCallMissed = Missed call < nl > < nl > ErrorInternal = Internal server error . Please , try again later . < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ar . properties b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ar . properties < nl > index 7622432 . . 724b658 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ar . properties < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ar . properties < nl > @ @ - 52 , 6 + 52 , 8 @ @ ServiceGroupTitle = { name } غ ي ر ا س م ا ل م ج م و ع ة ا ل ى < nl > ServiceGroupTitleFull = { name } غ ي ر ا ل ا س م ا ل ى " { title } " < nl > ServiceGroupAvatarChanged = { name } غ ي ر ص و ر ة ا ل م ج م و ع ة < nl > ServiceGroupAvatarRemoved = { name } ح ذ ف ص و ر ة ا ل م ج م و ع ة < nl > + ServiceCallEnded = Call ended < nl > + ServiceCallMissed = Missed call < nl > < nl > ErrorInternal = Internal server error . Please , try again later . < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Es . properties b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Es . properties < nl > index bcabd46 . . 77e21c0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Es . properties < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Es . properties < nl > @ @ - 52 , 6 + 52 , 8 @ @ ServiceGroupTitle = a modificado el nombre del grupo < nl > ServiceGroupTitleFull = cambio el nombre del grupo a " { title } " < nl > ServiceGroupAvatarChanged = modificada la foto de grupo < nl > ServiceGroupAvatarRemoved = eliminada la foto de grupo < nl > + ServiceCallEnded = Llamada finalizada < nl > + ServiceCallMissed = Llamada perdida < nl > < nl > ErrorInternal = Error Interno del Servidor . Por favor , int é ntelo de nuevo m á s tarde . < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Pt . properties b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Pt . properties < nl > index 9abb92a . . 0e8e5b9 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Pt . properties < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Pt . properties < nl > @ @ - 52 , 6 + 52 , 8 @ @ ServiceGroupTitle = { name } alterou o nome do grupo < nl > ServiceGroupTitleFull = { name } alterou o nome do grupo para " { title } " < nl > ServiceGroupAvatarChanged = { name } alterou a foto do grupo < nl > ServiceGroupAvatarRemoved = { name } removeu a foto do grupo < nl > + ServiceCallEnded = Call ended < nl > + ServiceCallMissed = Missed call < nl > < nl > ErrorInternal = Internal server error . Please , try again later . < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ru . properties b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ru . properties < nl > index 1db6bf5 . . 9f5228c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ru . properties < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ru . properties < nl > @ @ - 114 , 6 + 114 , 9 @ @ ServiceGroupAvatarRemovedYou = { name } у д а л и л и ф о т о г р у п п ы < nl > ServiceGroupAvatarRemovedMale = { name } у д а л и л ф о т о г р у п п ы < nl > ServiceGroupAvatarRemovedFemale = { name } у д а л и л а ф о т о г р у п п ы < nl > < nl > + ServiceCallEnded = В ы з о в з а в е р ш е н < nl > + ServiceCallMissed = П р о п у щ е н в ы з о в < nl > + < nl > ErrorInternal = Internal server error . Please , try again later . < nl > < nl > ErrorEmptyPhone = Please , enter your phone number < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Zn . properties b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Zn . properties < nl > index 0ae774d . . a7de8ec 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Zn . properties < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Zn . properties < nl > @ @ - 52 , 6 + 52 , 8 @ @ ServiceGroupTitle = { name } 修 改 了 群 名 称 < nl > ServiceGroupTitleFull = { name } 修 改 为 名 称 为 ： " { title } " < nl > ServiceGroupAvatarChanged = { name } 修 改 了 群 头 像 < nl > ServiceGroupAvatarRemoved = { name } 删 除 了 群 头 像 < nl > + ServiceCallEnded = Call ended < nl > + ServiceCallMissed = Missed call < nl > < nl > ErrorInternal = Internal server error . Please , try again later . < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > index 6742c3c . . ed68723 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > @ @ - 43 , 6 + 43 , 8 @ @ object UserErrors { < nl > < nl > case object InvalidNickname extends UserError ( " Invalid nickname " ) < nl > < nl > + case object InvalidName extends UserError ( " Invalid name " ) < nl > + < nl > final case class InvalidTimeZone ( tz : String ) extends UserError ( s " Invalid time zone : $ tz " ) < nl > < nl > final case class InvalidLocale ( locale : String ) extends UserError ( s " Invalid locale : $ locale " ) < nl > @ @ - 136 , 16 + 138 , 23 @ @ private [ user ] trait UserCommandHandlers { < nl > db . run ( p . UserRepo . setCountryCode ( userId , countryCode ) map ( _ ⇒ ChangeCountryCodeAck ( ) ) ) < nl > } < nl > < nl > - protected def changeName ( user : User , name : String ) : Unit = < nl > - persistReply ( TSEvent ( now ( ) , UserEvents . NameChanged ( name ) ) , user ) { _ ⇒ < nl > - val update = UpdateUserNameChanged ( userId , name ) < nl > - for { < nl > - relatedUserIds ← getRelations ( userId ) < nl > - _ ← seqUpdatesExt . broadcastSingleUpdate ( relatedUserIds , update ) < nl > - seqstate ← seqUpdatesExt . deliverSingleUpdate ( user . id , update ) < nl > - _ ← db . run ( UserRepo . setName ( userId , name ) ) < nl > - } yield seqstate < nl > + protected def changeName ( user : User , name : String ) : Unit = { < nl > + val replyTo = sender ( ) < nl > + < nl > + if ( StringUtils . validName ( name ) . fold ( l ⇒ false , r ⇒ true ) ) { < nl > + persistReply ( TSEvent ( now ( ) , UserEvents . NameChanged ( name ) ) , user ) { _ ⇒ < nl > + val update = UpdateUserNameChanged ( userId , name ) < nl > + for { < nl > + relatedUserIds ← getRelations ( userId ) < nl > + _ ← seqUpdatesExt . broadcastSingleUpdate ( relatedUserIds , update ) < nl > + seqstate ← seqUpdatesExt . deliverSingleUpdate ( user . id , update ) < nl > + _ ← db . run ( UserRepo . setName ( userId , name ) ) < nl > + } yield seqstate < nl > + } < nl > + } else { < nl > + replyTo ! Status . Failure ( UserErrors . InvalidName ) < nl > } < nl > + } < nl > < nl > protected def delete ( user : User ) : Unit = < nl > persistStashingReply ( TSEvent ( now ( ) , UserEvents . Deleted ( ) ) , user ) { _ ⇒ < nl > @ @ - 198 , 8 + 207 , 9 @ @ private [ user ] trait UserCommandHandlers { < nl > ( seqstate , _ ) ← seqUpdatesExt . broadcastOwnSingleUpdate ( userId , relatedUserIds , update ) < nl > } yield seqstate < nl > } < nl > - } else < nl > + } else { < nl > replyTo ! Status . Failure ( UserErrors . InvalidNickname ) < nl > + } < nl > } else { < nl > replyTo ! Status . Failure ( UserErrors . NicknameTaken ) < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > index 4373f5f . . 2098ee6 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > @ @ - 276 , 12 + 276 , 12 @ @ trait AuthHelpers extends Helpers { < nl > } yield \ / - ( user ) < nl > } < nl > < nl > - protected def newUser ( ) : Result [ User ] = { < nl > + protected def newUser ( name : String ) : Result [ User ] = { < nl > val rng = ThreadLocalRandom . current ( ) < nl > val user = model . User ( < nl > id = nextIntId ( rng ) , < nl > accessSalt = ACLUtils . nextAccessSalt ( rng ) , < nl > - name = " " , < nl > + name = name , < nl > countryCode = " " , < nl > sex = model . NoSex , < nl > state = model . UserState . Registered , < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > index 9f8cdcc . . 7abbba4 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > @ @ - 267 , 7 + 267 , 7 @ @ final class AuthServiceImpl ( val activationContext : CodeActivation ) ( < nl > DeviceInfo ( timeZone . getOrElse ( " " ) , preferredLanguages ) . toByteArray , < nl > isChecked = false / / we don ' t need to check password if user signs up < nl > ) < nl > - user ← newUser ( ) < nl > + user ← newUser ( normUsername ) < nl > _ ← handleUserCreate ( user , transaction , clientData ) < nl > userStruct ← authorizeT ( user . id , " " , transaction , clientData ) < nl > } yield ResponseAuth ( userStruct , ApiConfig ( maxGroupSize ) ) < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala < nl > index 4e2de7f . . f37ff88 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala < nl > @ @ - 23 , 27 + 23 , 25 @ @ import scala . concurrent . { ExecutionContext , Future } < nl > object ProfileErrors { < nl > val NicknameInvalid = RpcError ( 400 , " NICKNAME _ INVALID " , < nl > " Invalid nickname . Valid nickname should contain from 5 to 32 characters , and may consist of latin characters , numbers and underscores " , false , None ) < nl > + val NameInvalid = RpcError ( 400 , " NAME _ INVALID " , " Invalid name . Valid name should not be empty or contain bad symbols " , false , None ) < nl > val NicknameBusy = RpcError ( 400 , " NICKNAME _ BUSY " , " This nickname already belongs some other user , we are sorry ! " , false , None ) < nl > val AboutTooLong = RpcError ( 400 , " ABOUT _ TOO _ LONG " , < nl > " About is too long . It should be no longer then 255 characters " , false , None ) < nl > } < nl > < nl > - final class ProfileServiceImpl ( ) ( < nl > - implicit < nl > - actorSystem : ActorSystem < nl > - ) extends ProfileService { < nl > + final class ProfileServiceImpl ( ) ( implicit system : ActorSystem ) extends ProfileService { < nl > < nl > import FileHelpers . _ < nl > import ImageUtils . _ < nl > < nl > - override implicit val ec : ExecutionContext = actorSystem . dispatcher < nl > + override implicit val ec : ExecutionContext = system . dispatcher < nl > < nl > private implicit val timeout = Timeout ( 5 . seconds ) < nl > / / TODO : configurable < nl > - private val db : Database = DbExtension ( actorSystem ) . db < nl > - private val userExt = UserExtension ( actorSystem ) < nl > - private implicit val socialRegion : SocialManagerRegion = SocialExtension ( actorSystem ) . region < nl > - private implicit val fsAdapter : FileStorageAdapter = FileStorageExtension ( actorSystem ) . fsAdapter < nl > + private val db : Database = DbExtension ( system ) . db < nl > + private val userExt = UserExtension ( system ) < nl > + private implicit val socialRegion : SocialManagerRegion = SocialExtension ( system ) . region < nl > + private implicit val fsAdapter : FileStorageAdapter = FileStorageExtension ( system ) . fsAdapter < nl > < nl > override def jhandleEditAvatar ( fileLocation : ApiFileLocation , clientData : ClientData ) : Future [ HandlerResult [ ResponseEditAvatar ] ] = { < nl > / / TODO : flatten < nl > @ @ - 80 , 14 + 78 , 14 @ @ final class ProfileServiceImpl ( ) ( < nl > db . run ( toDBIOAction ( authorizedAction ) ) < nl > } < nl > < nl > - override def jhandleEditName ( name : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { < nl > - val authorizedAction = requireAuth ( clientData ) map { implicit client ⇒ < nl > - DBIO . from ( userExt . changeName ( client . userId , name ) map { < nl > - case SeqState ( seq , state ) ⇒ Ok ( ResponseSeq ( seq , state . toByteArray ) ) < nl > - } ) < nl > + override def jhandleEditName ( name : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = < nl > + authorized ( clientData ) { implicit client ⇒ < nl > + for { < nl > + SeqState ( seq , state ) ← userExt . changeName ( client . userId , name ) < nl > + } yield Ok ( ResponseSeq ( seq , state . toByteArray ) ) < nl > + } recover { < nl > + case UserErrors . InvalidName ⇒ Error ( ProfileErrors . NameInvalid ) < nl > } < nl > - db . run ( toDBIOAction ( authorizedAction ) ) < nl > - } < nl > < nl > def jhandleEditNickName ( nickname : Option [ String ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { < nl > authorized ( clientData ) { implicit client ⇒ < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > index 79e6807 . . d745804 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > @ @ - 39 , 6 + 39 , 8 @ @ final class ProfileServiceSpec < nl > it should " respond with error on invalid locale " in profile . invalidPreferredLanguages < nl > it should " respond with error on same preferred languages " in profile . samePreferredLanguages < nl > < nl > + " Edit name " should " not allow to use empty name " in profile . editNameEmpty < nl > + < nl > implicit lazy val service = new ProfileServiceImpl < nl > implicit lazy val filesService = new FilesServiceImpl < nl > < nl > @ @ - 299 , 5 + 301 , 19 @ @ final class ProfileServiceSpec < nl > } < nl > } < nl > } < nl > + < nl > + def editNameEmpty ( ) = { < nl > + val ( user , authId , authSid , _ ) = createUser ( ) < nl > + val sessionId = createSessionId ( ) < nl > + < nl > + val clientData1 = ClientData ( authId , sessionId , Some ( AuthData ( user . id , authSid ) ) ) < nl > + < nl > + whenReady ( service . jhandleEditName ( " " , clientData ) ) { resp ⇒ < nl > + inside ( resp ) { < nl > + case Error ( e ) ⇒ e shouldEqual ProfileErrors . NameInvalid < nl > + } < nl > + } < nl > + < nl > + } < nl > } < nl > } < nl > diff - - git a / actor - server / notes / 1 . 0 . 111 . markdown b / actor - server / notes / 1 . 0 . 111 . markdown < nl > new file mode 100644 < nl > index 0000000 . . 8b4c158 < nl > - - - / dev / null < nl > + + + b / actor - server / notes / 1 . 0 . 111 . markdown < nl > @ @ - 0 , 0 + 1 @ @ < nl > + * Don ' t allow users to change name to empty < nl > diff - - git a / actor - server / version . sbt b / actor - server / version . sbt < nl > index f32c4a9 . . 256b1e7 100644 < nl > - - - a / actor - server / version . sbt < nl > + + + b / actor - server / version . sbt < nl > @ @ - 1 + 1 @ @ < nl > - version in ThisBuild : = " 1 . 0 . 111 - SNAPSHOT " < nl > \ No newline at end of file < nl > + version in ThisBuild : = " 1 . 0 . 112 - SNAPSHOT " < nl > \ No newline at end of file < nl > diff - - git a / docs / s2s / api / entity - user . md b / docs / s2s / api / entity - user . md < nl > new file mode 100644 < nl > index 0000000 . . 00a9cc8 < nl > - - - / dev / null < nl > + + + b / docs / s2s / api / entity - user . md < nl > @ @ - 0 , 0 + 1 , 47 @ @ < nl > + # User Entity < nl > + < nl > + How Users are presented in API . Users are secured with Access Hashes . < nl > + < nl > + # # Definition < nl > + < nl > + | field | type | description | < nl > + | - - - - - - - | - - - - - - | - - - - - - - - - - - - - | < nl > + | * uid | int | User ' s ID | < nl > + | * accessHash | string | Access Hash of a user | < nl > + | * kind | string | Kind of a user : bot , human , service , etc . . . | < nl > + | * name | string | Name of the user | < nl > + | * avatar | Avatar | Avatar of the user | < nl > + | * contacts | Contact [ ] | Contact information of the user | < nl > + | username | string | Username of the user | < nl > + | about | string | About text | < nl > + | sex | Sex | Sex of the user | < nl > + | timeZone | string | Timezone of the user | < nl > + | preferredLangiages | string [ ] | Preferred languages | < nl > + < nl > + # # Example < nl > + ` ` ` json < nl > + { < nl > + " uid " : 1122334455 , < nl > + " accessHash " : " 11223344556677889900 " , < nl > + " isBot " : false , < nl > + " name " : " Steve " , < nl > + " avatar " : null , < nl > + " username " : " steve " , < nl > + " about " : " Founder of Actor " , < nl > + " contacts " : [ ] , < nl > + " sex " : null , < nl > + " timeZone " : " UTC + 0 " , < nl > + " preferredLanguages " : [ " en " , " us " , " zh " , " ar " ] < nl > + } < nl > + ` ` ` < nl > + < nl > + # # Contact Object < nl > + ` ` ` json < nl > + { < nl > + " contactType " : " phone | email | web | social " , < nl > + " typeSpec " : " mobile / standalone / home . . . " , < nl > + " value " : " 75551112233 " , < nl > + " title " : " My phone number " , < nl > + " subtitle " : " Call me only on mondays " < nl > + } < nl > + ` ` ` < nl > diff - - git a / docs / s2s / api / security . md b / docs / s2s / api / security . md < nl > new file mode 100644 < nl > index 0000000 . . f519c65 < nl > - - - / dev / null < nl > + + + b / docs / s2s / api / security . md < nl > @ @ - 0 , 0 + 1 , 15 @ @ < nl > + # Security in s2s protocol < nl > + < nl > + Keeping everything secure is very important for any modern federated messaging . This page describes security part of server - server . < nl > + < nl > + # Access Hashes < nl > + < nl > + Managing what other side can access is very hard . You need to keep permissions table , always keep it at sync . Telegram ' s team ended up with a simple solution : access hashes . < nl > + < nl > + Access Hashes is server - side generated HMAC for each secured object for each peer . For interacting with secured object , peer need to get Access Hash first , for example , via update or as response from search method . < nl > + < nl > + Peers are responsible to keep Access hash values forewer and use them as key to interact with objects . For example , sending a message also requires approriate access hash . < nl > + < nl > + Access Hashes are not secret and they are valid only for one peer and invalid for other , so there are no sence in stealing them . < nl > + < nl > + In s2s protocol access hashes are represented by strings . < nl > diff - - git a / docs / s2s / basic - principles . md b / docs / s2s / basic - principles . md < nl > index 1c7506a . . 14ecad1 100644 < nl > - - - a / docs / s2s / basic - principles . md < nl > + + + b / docs / s2s / basic - principles . md < nl > @ @ - 6 , 7 + 6 , 7 @ @ Currently s2s ptorofol is based on HTTP / 1 . 1 . In future releases underlying trans < nl > < nl > We found that our ideas are often the same as project [ matrix . org ] ( http : / / matrix . org / docs / spec / r0 . 0 . 1 / server _ server . html ) have . We believe that we can work together and enrich their ' s network with Actor . Draft version of our federation API is * * NOT * * compatable with matrix , but release one we expect to be one . < nl > < nl > - Protocol is JSON - based , but can be easily transformed to any form of key - value format , for example , protobuf . < nl > + Protocol is Protobuf - based , but can be easily transformed to any form of key - value format , for example , protobuf . < nl > < nl > # # Basic requirements
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > index 56b5963 . . afc1652 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > @ @ - 1 , 30 + 1 , 38 @ @ < nl > package im . actor ; < nl > < nl > import android . graphics . Color ; < nl > + import android . os . Bundle ; < nl > + import android . support . annotation . Nullable ; < nl > import android . view . LayoutInflater ; < nl > import android . view . View ; < nl > import android . view . ViewGroup ; < nl > import android . widget . CheckBox ; < nl > < nl > - import im . actor . core . api . ApiMessage ; < nl > - import im . actor . core . api . ApiTextMessage ; < nl > + import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . entity . content . ContentConverter ; < nl > - import im . actor . core . entity . content . TextContent ; < nl > + import im . actor . core . entity . content . JsonContent ; < nl > import im . actor . core . entity . content . internal . AbsContentContainer ; < nl > import im . actor . core . entity . content . internal . ContentRemoteContainer ; < nl > + import im . actor . runtime . json . JSONException ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . ActorSDKApplication ; < nl > import im . actor . sdk . ActorStyle ; < nl > import im . actor . sdk . BaseActorSDKDelegate ; < nl > + import im . actor . sdk . controllers . conversation . messages . BaseCustomHolder ; < nl > import im . actor . sdk . controllers . conversation . messages . MessageHolder ; < nl > import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessagesFragment ; < nl > import im . actor . sdk . controllers . fragment . settings . ActorSettingsCategory ; < nl > import im . actor . sdk . controllers . fragment . settings . ActorSettingsField ; < nl > + import im . actor . sdk . controllers . fragment . settings . BaseActorChatActivity ; < nl > import im . actor . sdk . controllers . fragment . settings . BaseActorSettingsActivity ; < nl > import im . actor . sdk . controllers . fragment . settings . BaseActorSettingsFragment ; < nl > + import im . actor . sdk . intents . ActorIntent ; < nl > import im . actor . sdk . intents . ActorIntentFragmentActivity ; < nl > < nl > + import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > + < nl > public class Application extends ActorSDKApplication { < nl > < nl > @ Override < nl > @ @ - 41 , 40 + 49 , 104 @ @ public class Application extends ActorSDKApplication { < nl > AbsContent . registerConverter ( new ContentConverter ( ) { < nl > @ Override < nl > public AbsContent convert ( AbsContentContainer container ) { < nl > - if ( container instanceof ContentRemoteContainer ) { < nl > - ApiMessage msg = ( ( ContentRemoteContainer ) container ) . getMessage ( ) ; < nl > - if ( msg instanceof ApiTextMessage ) { < nl > - return new TextContent ( ( ContentRemoteContainer ) container ) ; < nl > - } < nl > - } < nl > - return null ; < nl > + return JsonContent . convert ( container , Custom . class ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public Class destinationType ( ) { < nl > + return Custom . class ; < nl > + } < nl > + } ) ; < nl > + AbsContent . registerConverter ( new ContentConverter ( ) { < nl > + @ Override < nl > + public AbsContent convert ( AbsContentContainer container ) { < nl > + return JsonContent . convert ( container , CustomTwo . class ) ; < nl > } < nl > < nl > @ Override < nl > public Class destinationType ( ) { < nl > - return TextExContent . class ; < nl > + return CustomTwo . class ; < nl > } < nl > } ) ; < nl > } < nl > < nl > - public class TextExContent extends TextContent { < nl > + public static class Custom extends JsonContent { < nl > < nl > - public TextExContent ( ContentRemoteContainer remoteContainer ) { < nl > - super ( remoteContainer ) ; < nl > + public String getText ( ) { < nl > + return getSimpleStringData ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public String getDataType ( ) { < nl > + return " customJson " ; < nl > + } < nl > + < nl > + @ Override < nl > + public String getContentDescriptionEn ( ) { < nl > + return " custom json msg " ; < nl > + } < nl > + < nl > + @ Override < nl > + public String getContentDescriptionRu ( ) { < nl > + return " б л а б л а б л а " ; < nl > } < nl > } < nl > < nl > + public static class CustomTwo extends JsonContent { < nl > + < nl > + public String getText ( ) { < nl > + return getSimpleStringData ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public String getDataType ( ) { < nl > + return " customTwoJson " ; < nl > + } < nl > + < nl > + @ Override < nl > + public String getContentDescriptionEn ( ) { < nl > + return " custom json msg " ; < nl > + } < nl > + < nl > + @ Override < nl > + public String getContentDescriptionRu ( ) { < nl > + return " б л а б л а б л а " ; < nl > + } < nl > + } < nl > + < nl > + < nl > + < nl > private class ActorSDKDelegate extends BaseActorSDKDelegate { < nl > < nl > @ Override < nl > - public MessageHolder getCustomMessageViewHolder ( Class < AbsContent > content , MessagesAdapter messagesAdapter , ViewGroup viewGroup ) { < nl > - if ( content . isAssignableFrom ( TextExContent . class ) ) { < nl > - return new TextExHolder ( messagesAdapter , LayoutInflater < nl > - . from ( viewGroup . getContext ( ) ) < nl > - . inflate ( R . layout . adapter _ dialog _ text , viewGroup , false ) ) ; < nl > + public ActorIntent getChatIntent ( ) { < nl > + return new BaseActorChatActivity ( ) { < nl > + @ Override < nl > + public MessagesFragment getChatFragment ( Peer peer ) { < nl > + return new MessagesFragment ( peer ) { < nl > + @ Override < nl > + public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { < nl > + / / messenger ( ) . sendCustomJsonMessage ( getPeer ( ) , JsonContent . create ( Custom . class , System . currentTimeMillis ( ) + " One " ) ) ; < nl > + / / messenger ( ) . sendCustomJsonMessage ( getPeer ( ) , JsonContent . create ( CustomTwo . class , System . currentTimeMillis ( ) + " Two " ) ) ; < nl > + / / messenger ( ) . sendCustomJsonMessage ( getPeer ( ) , JsonContent . create ( CustomTwo . class , System . currentTimeMillis ( ) + " Two " ) ) ; < nl > + return super . onCreateView ( inflater , container , savedInstanceState ) ; < nl > + } < nl > + } ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > + @ Override < nl > + public BaseCustomHolder getCustomMessageViewHolder ( Class < AbsContent > content , MessagesAdapter messagesAdapter , ViewGroup viewGroup ) { < nl > + if ( content . equals ( Custom . class ) ) { < nl > + return new CustomHolder ( messagesAdapter , viewGroup , R . layout . custom _ holder , false ) ; < nl > + } else if ( content . equals ( CustomTwo . class ) ) { < nl > + return new CustomTwoHolder ( messagesAdapter , viewGroup , R . layout . custom _ holder , false ) ; < nl > + < nl > } else { < nl > return null ; < nl > } < nl > + < nl > } < nl > < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / CustomHolder . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / CustomHolder . java < nl > new file mode 100644 < nl > index 0000000 . . 617f3ce < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / CustomHolder . java < nl > @ @ - 0 , 0 + 1 , 41 @ @ < nl > + package im . actor ; < nl > + < nl > + import android . graphics . Color ; < nl > + import android . text . Spannable ; < nl > + import android . text . method . LinkMovementMethod ; < nl > + import android . view . MotionEvent ; < nl > + import android . view . View ; < nl > + import android . view . ViewGroup ; < nl > + import android . widget . FrameLayout ; < nl > + import android . widget . TextView ; < nl > + < nl > + import java . util . Random ; < nl > + < nl > + import im . actor . core . entity . Message ; < nl > + import im . actor . sdk . ActorSDK ; < nl > + import im . actor . sdk . R ; < nl > + import im . actor . sdk . controllers . conversation . messages . BaseCustomHolder ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessageHolder ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; < nl > + import im . actor . sdk . controllers . conversation . messages . PreprocessedData ; < nl > + import im . actor . sdk . controllers . conversation . messages . PreprocessedTextData ; < nl > + import im . actor . sdk . util . Fonts ; < nl > + import im . actor . sdk . view . TintImageView ; < nl > + < nl > + import static im . actor . sdk . util . ActorSDKMessenger . myUid ; < nl > + < nl > + public class CustomHolder extends BaseCustomHolder { < nl > + < nl > + TextView text ; < nl > + < nl > + public CustomHolder ( MessagesAdapter adapter , ViewGroup viewGroup , int id , boolean isFullSize ) { < nl > + super ( adapter , viewGroup , id , isFullSize ) ; < nl > + text = ( TextView ) itemView . findViewById ( R . id . tv _ text ) ; < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + protected void bindData ( Message message , boolean isUpdated , PreprocessedData preprocessedData ) { < nl > + text . setText ( ( ( Application . Custom ) message . getContent ( ) ) . getText ( ) ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / CustomTwoHolder . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / CustomTwoHolder . java < nl > new file mode 100644 < nl > index 0000000 . . 1905fdc < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / CustomTwoHolder . java < nl > @ @ - 0 , 0 + 1 , 28 @ @ < nl > + package im . actor ; < nl > + < nl > + import android . graphics . Color ; < nl > + import android . view . ViewGroup ; < nl > + import android . widget . TextView ; < nl > + < nl > + import im . actor . core . entity . Message ; < nl > + import im . actor . sdk . R ; < nl > + import im . actor . sdk . controllers . conversation . messages . BaseCustomHolder ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; < nl > + import im . actor . sdk . controllers . conversation . messages . PreprocessedData ; < nl > + < nl > + public class CustomTwoHolder extends BaseCustomHolder { < nl > + < nl > + TextView text ; < nl > + < nl > + public CustomTwoHolder ( MessagesAdapter adapter , ViewGroup viewGroup , int id , boolean isFullSize ) { < nl > + super ( adapter , viewGroup , id , isFullSize ) ; < nl > + text = ( TextView ) itemView . findViewById ( R . id . tv _ text ) ; < nl > + text . setTextColor ( Color . RED ) ; < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + protected void bindData ( Message message , boolean isUpdated , PreprocessedData preprocessedData ) { < nl > + text . setText ( ( ( Application . CustomTwo ) message . getContent ( ) ) . getText ( ) ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TextExHolder . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TextExHolder . java < nl > deleted file mode 100644 < nl > index ab2ccf6 . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TextExHolder . java < nl > + + + / dev / null < nl > @ @ - 1 , 151 + 0 , 0 @ @ < nl > - package im . actor ; < nl > - < nl > - import android . graphics . Color ; < nl > - import android . text . Spannable ; < nl > - import android . text . method . LinkMovementMethod ; < nl > - import android . view . MotionEvent ; < nl > - import android . view . View ; < nl > - import android . view . ViewGroup ; < nl > - import android . widget . FrameLayout ; < nl > - import android . widget . TextView ; < nl > - < nl > - import java . util . Random ; < nl > - < nl > - import im . actor . core . entity . Message ; < nl > - import im . actor . sdk . ActorSDK ; < nl > - import im . actor . sdk . R ; < nl > - import im . actor . sdk . controllers . conversation . messages . MessageHolder ; < nl > - import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; < nl > - import im . actor . sdk . controllers . conversation . messages . PreprocessedData ; < nl > - import im . actor . sdk . controllers . conversation . messages . PreprocessedTextData ; < nl > - import im . actor . sdk . util . Fonts ; < nl > - import im . actor . sdk . view . TintImageView ; < nl > - < nl > - import static im . actor . sdk . util . ActorSDKMessenger . myUid ; < nl > - < nl > - public class TextExHolder extends MessageHolder { < nl > - < nl > - protected ViewGroup mainContainer ; < nl > - protected FrameLayout messageBubble ; < nl > - protected TextView text ; < nl > - protected TextView time ; < nl > - protected TintImageView status ; < nl > - < nl > - private int waitColor ; < nl > - private int sentColor ; < nl > - private int deliveredColor ; < nl > - private int readColor ; < nl > - private int errorColor ; < nl > - < nl > - public TextExHolder ( MessagesAdapter fragment , final View itemView ) { < nl > - super ( fragment , itemView , false ) ; < nl > - < nl > - mainContainer = ( ViewGroup ) itemView . findViewById ( R . id . mainContainer ) ; < nl > - messageBubble = ( FrameLayout ) itemView . findViewById ( R . id . fl _ bubble ) ; < nl > - text = ( TextView ) itemView . findViewById ( R . id . tv _ text ) ; < nl > - text . setTextColor ( ActorSDK . sharedActor ( ) . style . getConvTextColor ( ) ) ; < nl > - text . setTypeface ( Fonts . regular ( ) ) ; < nl > - < nl > - time = ( TextView ) itemView . findViewById ( R . id . tv _ time ) ; < nl > - ActorSDK . sharedActor ( ) . style . getConvTimeColor ( ) ; < nl > - time . setTypeface ( Fonts . regular ( ) ) ; < nl > - time . setTextColor ( ActorSDK . sharedActor ( ) . style . getConvTimeColor ( ) ) ; < nl > - status = ( TintImageView ) itemView . findViewById ( R . id . stateIcon ) ; < nl > - < nl > - waitColor = ActorSDK . sharedActor ( ) . style . getConvStatePendingColor ( ) ; < nl > - sentColor = ActorSDK . sharedActor ( ) . style . getConvStateSentColor ( ) ; < nl > - deliveredColor = ActorSDK . sharedActor ( ) . style . getConvStateDeliveredColor ( ) ; < nl > - readColor = ActorSDK . sharedActor ( ) . style . getConvStateReadColor ( ) ; < nl > - errorColor = ActorSDK . sharedActor ( ) . style . getConvStateErrorColor ( ) ; < nl > - < nl > - onConfigureViewHolder ( ) ; < nl > - } < nl > - < nl > - @ Override < nl > - protected void bindData ( final Message message , boolean isUpdated , PreprocessedData preprocessedData ) { < nl > - Random rnd = new Random ( ) ; < nl > - int color = Color . argb ( 255 , rnd . nextInt ( 256 ) , rnd . nextInt ( 256 ) , rnd . nextInt ( 256 ) ) ; < nl > - text . setBackgroundColor ( color ) ; < nl > - PreprocessedTextData textData = ( PreprocessedTextData ) preprocessedData ; < nl > - Spannable reactions = preprocessedData . getReactionsSpannable ( ) ; < nl > - CharSequence text ; < nl > - if ( textData . getSpannableString ( ) ! = null ) { < nl > - text = textData . getSpannableString ( ) ; < nl > - } else { < nl > - text = textData . getText ( ) ; < nl > - } < nl > - bindRawText ( text , reactions , message , false ) ; < nl > - } < nl > - < nl > - public void bindRawText ( CharSequence rawText , Spannable reactions , Message message , boolean isItalic ) { < nl > - if ( message . getSenderId ( ) = = myUid ( ) ) { < nl > - messageBubble . setBackgroundResource ( R . drawable . bubble _ text _ out ) ; < nl > - } else { < nl > - messageBubble . setBackgroundResource ( R . drawable . bubble _ text _ in ) ; < nl > - } < nl > - < nl > - if ( isItalic ) { < nl > - text . setTypeface ( Fonts . italic ( ) ) ; < nl > - } else { < nl > - text . setTypeface ( Fonts . regular ( ) ) ; < nl > - } < nl > - < nl > - text . setText ( rawText ) ; < nl > - < nl > - / / Fixing url long tap < nl > - text . setMovementMethod ( new CustomLinkMovementMethod ( ) ) ; < nl > - < nl > - / / Fixing span offsets < nl > - / / if ( rawText instanceof Spannable ) { < nl > - / / Spannable s = ( Spannable ) rawText ; < nl > - / / QuoteSpan [ ] qSpans = s . getSpans ( 0 , s . length ( ) , QuoteSpan . class ) ; < nl > - / / text . setMinimumWidth ( 0 ) ; < nl > - / / if ( qSpans . length > 0 ) { < nl > - / / text . measure ( 0 , 0 ) ; < nl > - / / text . setMinimumWidth ( text . getMeasuredWidth ( ) + qSpans [ 0 ] . getLeadingMargin ( true ) ) ; < nl > - / / } < nl > - / / } < nl > - < nl > - if ( message . getSenderId ( ) = = myUid ( ) ) { < nl > - status . setVisibility ( View . VISIBLE ) ; < nl > - < nl > - switch ( message . getMessageState ( ) ) { < nl > - case SENT : < nl > - status . setResource ( R . drawable . msg _ check _ 1 ) ; < nl > - status . setTint ( sentColor ) ; < nl > - break ; < nl > - case RECEIVED : < nl > - status . setResource ( R . drawable . msg _ check _ 2 ) ; < nl > - status . setTint ( deliveredColor ) ; < nl > - break ; < nl > - case READ : < nl > - status . setResource ( R . drawable . msg _ check _ 2 ) ; < nl > - status . setTint ( readColor ) ; < nl > - break ; < nl > - default : < nl > - case PENDING : < nl > - status . setResource ( R . drawable . msg _ clock ) ; < nl > - status . setTint ( waitColor ) ; < nl > - break ; < nl > - case ERROR : < nl > - status . setResource ( R . drawable . msg _ error ) ; < nl > - status . setTint ( errorColor ) ; < nl > - break ; < nl > - } < nl > - } else { < nl > - status . setVisibility ( View . GONE ) ; < nl > - } < nl > - < nl > - setTimeAndReactions ( time ) ; < nl > - } < nl > - < nl > - class CustomLinkMovementMethod extends LinkMovementMethod { < nl > - < nl > - @ Override < nl > - public boolean onTouchEvent ( TextView textView , Spannable spannable , MotionEvent event ) { < nl > - super . onTouchEvent ( textView , spannable , event ) ; < nl > - mainContainer . onTouchEvent ( event ) ; < nl > - return true ; < nl > - } < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / res / layout / custom _ holder . xml b / actor - sdk / sdk - core - android / android - app / src / main / res / layout / custom _ holder . xml < nl > new file mode 100644 < nl > index 0000000 . . 228fe5e < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / res / layout / custom _ holder . xml < nl > @ @ - 0 , 0 + 1 , 30 @ @ < nl > + < ? xml version = " 1 . 0 " encoding = " utf - 8 " ? > < ! - - < nl > + ~ Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + - - > < nl > + < nl > + < im . actor . sdk . controllers . conversation . view . BubbleContainer xmlns : android = " http : / / schemas . android . com / apk / res / android " < nl > + android : id = " @ + id / mainContainer " < nl > + android : layout _ width = " match _ parent " < nl > + android : layout _ height = " wrap _ content " < nl > + android : clickable = " true " > < nl > + < nl > + < FrameLayout < nl > + android : id = " @ + id / bubbleContainer " < nl > + android : layout _ width = " wrap _ content " < nl > + android : layout _ height = " wrap _ content " < nl > + android : padding = " 20dp " < nl > + android : duplicateParentState = " true " > < nl > + < nl > + < TextView < nl > + android : id = " @ + id / tv _ text " < nl > + android : padding = " 50dp " < nl > + android : textSize = " 20sp " < nl > + android : background = " @ color / primary _ text " < nl > + android : layout _ width = " match _ parent " < nl > + android : layout _ height = " match _ parent " / > < nl > + < nl > + < nl > + < / FrameLayout > < nl > + < nl > + < nl > + < / im . actor . sdk . controllers . conversation . view . BubbleContainer > < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / BaseCustomHolder . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / BaseCustomHolder . java < nl > new file mode 100644 < nl > index 0000000 . . 7fc4173 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / BaseCustomHolder . java < nl > @ @ - 0 , 0 + 1 , 19 @ @ < nl > + package im . actor . sdk . controllers . conversation . messages ; < nl > + < nl > + import android . view . LayoutInflater ; < nl > + import android . view . ViewGroup ; < nl > + < nl > + < nl > + / * * < nl > + * Created by root on 12 / 29 / 15 . < nl > + * / < nl > + public abstract class BaseCustomHolder extends MessageHolder { < nl > + public BaseCustomHolder ( MessagesAdapter adapter , ViewGroup viewGroup , int resourceId , boolean isFullSize ) { < nl > + super ( adapter , LayoutInflater < nl > + . from ( viewGroup . getContext ( ) ) < nl > + . inflate ( resourceId , viewGroup , false ) , isFullSize ) ; < nl > + < nl > + < nl > + } < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java < nl > index 930afd5 . . 53ec48b 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java < nl > @ @ - 85 , 7 + 85 , 7 @ @ public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { < nl > AbsContent content = getItem ( position ) . getContent ( ) ; < nl > for ( int i = 0 ; i < AbsContent . getConverters ( ) . length ; i + + ) { < nl > ContentConverter converter = AbsContent . getConverters ( ) [ i ] ; < nl > - if ( content . getClass ( ) . isAssignableFrom ( converter . destinationType ( ) ) ) { < nl > + if ( content . getClass ( ) . equals ( converter . destinationType ( ) ) ) { < nl > return 8 + i ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 830d0b5 . . 6d2b2aa 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 13 , 12 + 13 , 8 @ @ import java . util . ArrayList ; < nl > import java . util . HashSet ; < nl > import java . util . List ; < nl > < nl > - import im . actor . core . api . ApiSearchContentType ; < nl > - import im . actor . core . api . ApiSearchPieceText ; < nl > import im . actor . core . api . ApiSex ; < nl > import im . actor . core . api . ApiAuthSession ; < nl > - import im . actor . core . api . ApiStickerCollection ; < nl > - import im . actor . core . api . rpc . ResponseLoadOwnStickers ; < nl > import im . actor . core . entity . FileReference ; < nl > import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . MentionFilterResult ; < nl > @ @ - 31 , 8 + 27 , 8 @ @ import im . actor . core . entity . Sex ; < nl > import im . actor . core . entity . User ; < nl > import im . actor . core . entity . WebActionDescriptor ; < nl > import im . actor . core . entity . content . FastThumb ; < nl > + import im . actor . core . entity . content . JsonContent ; < nl > import im . actor . core . entity . content . internal . Sticker ; < nl > - import im . actor . core . entity . content . internal . StickersPack ; < nl > import im . actor . core . i18n . I18nEngine ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . Modules ; < nl > @ @ - 45 , 8 + 41 , 6 @ @ import im . actor . core . modules . events . PeerInfoClosed ; < nl > import im . actor . core . modules . events . PeerInfoOpened ; < nl > import im . actor . core . modules . events . UserVisible ; < nl > import im . actor . core . network . NetworkState ; < nl > - import im . actor . core . network . parser . Request ; < nl > - import im . actor . core . network . parser . Response ; < nl > import im . actor . core . util . ActorTrace ; < nl > import im . actor . core . util . Timing ; < nl > import im . actor . core . viewmodel . AppStateVM ; < nl > @ @ - 64 , 7 + 58 , 6 @ @ import im . actor . core . viewmodel . UploadFileVM ; < nl > import im . actor . core . viewmodel . UploadFileVMCallback ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > import im . actor . runtime . actors . ActorSystem ; < nl > - import im . actor . runtime . json . JSONObject ; < nl > import im . actor . runtime . mvvm . MVVMCollection ; < nl > import im . actor . runtime . mvvm . ValueModel ; < nl > import im . actor . runtime . storage . PreferencesStorage ; < nl > @ @ - 703 , 8 + 696 , 8 @ @ public class Messenger { < nl > * @ param json json content < nl > * / < nl > @ ObjectiveCName ( " sendJsonWithPeer : withJson : " ) < nl > - public void sendJson ( @ NotNull Peer peer , @ NotNull JSONObject json ) { < nl > - modules . getMessagesModule ( ) . sendJson ( peer , json ) ; < nl > + public void sendCustomJsonMessage ( @ NotNull Peer peer , @ NotNull JsonContent content ) { < nl > + modules . getMessagesModule ( ) . sendJson ( peer , content ) ; < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java < nl > index d6fe4f5 . . 502b573 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java < nl > @ @ - 11 , 6 + 11 , 7 @ @ import java . io . IOException ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . entity . content . ContactContent ; < nl > import im . actor . core . entity . content . DocumentContent ; < nl > + import im . actor . core . entity . content . JsonContent ; < nl > import im . actor . core . entity . content . LocationContent ; < nl > import im . actor . core . entity . content . PhotoContent ; < nl > import im . actor . core . entity . content . ServiceContent ; < nl > @ @ - 58 , 6 + 59 , 8 @ @ public class ContentDescription extends BserObject { < nl > return new ContentDescription ( ContentType . STICKER ) ; < nl > } else if ( msg instanceof ServiceUserRegistered ) { < nl > return new ContentDescription ( ContentType . SERVICE _ REGISTERED ) ; < nl > + } else if ( msg instanceof JsonContent ) { < nl > + return new ContentDescription ( ContentType . CUSTOM _ JSON _ MESSAGE , ( ( JsonContent ) msg ) . getContentDescription ( ) ) ; < nl > } else if ( msg instanceof ServiceGroupAvatarChanged ) { < nl > if ( ( ( ServiceGroupAvatarChanged ) msg ) . getNewAvatar ( ) = = null ) { < nl > return new ContentDescription ( ContentType . SERVICE _ AVATAR _ REMOVED ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java < nl > index 21f7b95 . . 18af328 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java < nl > @ @ - 23 , 6 + 23 , 7 @ @ public enum ContentType { < nl > SERVICE _ TITLE ( 12 ) , < nl > SERVICE _ AVATAR ( 13 ) , < nl > SERVICE _ AVATAR _ REMOVED ( 14 ) , < nl > + CUSTOM _ JSON _ MESSAGE ( 21 ) , < nl > UNKNOWN _ CONTENT ( 15 ) ; < nl > < nl > int value ; < nl > @ @ - 76 , 6 + 77 , 8 @ @ public enum ContentType { < nl > return LOCATION ; < nl > case 20 : < nl > return STICKER ; < nl > + case 21 : < nl > + return CUSTOM _ JSON _ MESSAGE ; < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > index 861c52a . . 404c2a3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > @ @ - 177 , 6 + 177 , 10 @ @ public abstract class AbsContent { < nl > < nl > private AbsContentContainer contentContainer ; < nl > < nl > + public AbsContent ( ) { < nl > + super ( ) ; < nl > + } < nl > + < nl > public AbsContent ( ContentRemoteContainer contentContainer ) { < nl > this . contentContainer = contentContainer ; < nl > } < nl > @ @ - 189 , 6 + 193 , 10 @ @ public abstract class AbsContent { < nl > return contentContainer ; < nl > } < nl > < nl > + protected void setContentContainer ( AbsContentContainer contentContainer ) { < nl > + this . contentContainer = contentContainer ; < nl > + } < nl > + < nl > public void onIncoming ( Peer peer , ModuleContext context ) { < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / JsonContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / JsonContent . java < nl > index 6219244 . . 2d4ad45 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / JsonContent . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / JsonContent . java < nl > @ @ - 1 , 33 + 1 , 55 @ @ < nl > package im . actor . core . entity . content ; < nl > < nl > import org . jetbrains . annotations . NotNull ; < nl > - import org . jetbrains . annotations . Nullable ; < nl > + < nl > + import java . util . Locale ; < nl > < nl > import im . actor . core . api . ApiJsonMessage ; < nl > + import im . actor . core . api . ApiMessage ; < nl > + import im . actor . core . entity . content . internal . AbsContentContainer ; < nl > import im . actor . core . entity . content . internal . ContentRemoteContainer ; < nl > import im . actor . runtime . json . JSONException ; < nl > import im . actor . runtime . json . JSONObject ; < nl > < nl > - public class JsonContent extends AbsContent { < nl > + public abstract class JsonContent extends AbsContent { < nl > < nl > private JSONObject jsonObject ; < nl > private String rawJson ; < nl > < nl > - @ NotNull < nl > - public static JsonContent create ( @ NotNull JSONObject json ) { < nl > + public JsonContent ( ) { < nl > + super ( ) ; < nl > + } < nl > + < nl > < nl > + public static < T extends JsonContent > T create ( Class < T > c , String simpleStringData ) { < nl > + JSONObject jsondata = new JSONObject ( ) ; < nl > try { < nl > - return new JsonContent ( new ContentRemoteContainer ( new ApiJsonMessage ( json . toString ( ) ) ) ) ; < nl > + jsondata . put ( " data " , simpleStringData ) ; < nl > } catch ( JSONException e ) { < nl > - throw new RuntimeException ( e ) ; < nl > + e . printStackTrace ( ) ; < nl > } < nl > + return create ( c , jsondata ) ; < nl > } < nl > < nl > < nl > - public JsonContent ( ContentRemoteContainer contentContainer ) throws JSONException { < nl > - super ( contentContainer ) ; < nl > - rawJson = ( ( ApiJsonMessage ) contentContainer . getMessage ( ) ) . getRawJson ( ) ; < nl > - jsonObject = new JSONObject ( rawJson ) ; < nl > + public static < T extends JsonContent > T create ( Class < T > c , JSONObject data ) { < nl > + try { < nl > + T t = c . newInstance ( ) ; < nl > + JSONObject json = new JSONObject ( ) ; < nl > + json . put ( " dataType " , t . getDataType ( ) ) ; < nl > + json . put ( " data " , data ) ; < nl > + ContentRemoteContainer container = new ContentRemoteContainer ( new ApiJsonMessage ( json . toString ( ) ) ) ; < nl > + t . setJsonObject ( json ) ; < nl > + t . setRawJson ( json . toString ( ) ) ; < nl > + t . setContentContainer ( container ) ; < nl > + return t ; < nl > + } catch ( InstantiationException e ) { < nl > + throw new RuntimeException ( e ) ; < nl > + } catch ( IllegalAccessException e ) { < nl > + throw new RuntimeException ( e ) ; < nl > + } catch ( JSONException e ) { < nl > + throw new RuntimeException ( e ) ; < nl > + } < nl > } < nl > < nl > < nl > @ @ - 38 , 4 + 60 , 96 @ @ public class JsonContent extends AbsContent { < nl > public JSONObject getJson ( ) { < nl > return jsonObject ; < nl > } < nl > + < nl > + public abstract String getDataType ( ) ; < nl > + < nl > + public abstract String getContentDescriptionEn ( ) ; < nl > + < nl > + public abstract String getContentDescriptionRu ( ) ; < nl > + < nl > + public abstract String getContentDescriptionPtPT ( ) ; < nl > + < nl > + public abstract String getContentDescriptionPtBR ( ) ; < nl > + < nl > + public abstract String getContentDescriptionAr ( ) ; < nl > + < nl > + public abstract String getContentDescriptionCn ( ) ; < nl > + < nl > + public abstract String getContentDescriptionEs ( ) ; < nl > + < nl > + public final String getContentDescription ( ) { < nl > + Locale locale = Locale . getDefault ( ) ; < nl > + if ( locale . getLanguage ( ) . equals ( " ru " ) ) { < nl > + return fallback ( getContentDescriptionRu ( ) ) ; < nl > + } else if ( locale . equals ( new Locale ( " pt " , " PT " ) ) ) { < nl > + return fallback ( getContentDescriptionPtPT ( ) ) ; < nl > + } else if ( locale . equals ( new Locale ( " pt " , " BR " ) ) ) { < nl > + return fallback ( getContentDescriptionPtBR ( ) ) ; < nl > + } else if ( locale . getLanguage ( ) . equals ( " ar " ) ) { < nl > + return fallback ( getContentDescriptionAr ( ) ) ; < nl > + } else if ( locale . getLanguage ( ) . equals ( " cn " ) ) { < nl > + return fallback ( getContentDescriptionCn ( ) ) ; < nl > + } else if ( locale . getLanguage ( ) . equals ( " es " ) ) { < nl > + return fallback ( getContentDescriptionEs ( ) ) ; < nl > + } else { < nl > + return fallback ( getContentDescriptionEn ( ) ) ; < nl > + } < nl > + < nl > + < nl > + } < nl > + < nl > + private String fallback ( String s ) { < nl > + if ( s ! = null & & ! s . isEmpty ( ) ) { < nl > + return s ; < nl > + } else { < nl > + if ( getContentDescriptionEn ( ) ! = null & & ! getContentDescriptionEn ( ) . isEmpty ( ) ) { < nl > + return getContentDescriptionEn ( ) ; < nl > + < nl > + } else { < nl > + return " " ; < nl > + } < nl > + } < nl > + } < nl > + < nl > + public static < T extends JsonContent > AbsContent convert ( AbsContentContainer container , Class < T > classToConvert ) { < nl > + if ( container instanceof ContentRemoteContainer ) { < nl > + try { < nl > + T type = classToConvert . newInstance ( ) ; < nl > + < nl > + ApiMessage msg = ( ( ContentRemoteContainer ) container ) . getMessage ( ) ; < nl > + if ( msg instanceof ApiJsonMessage ) { < nl > + try { < nl > + JSONObject object = new JSONObject ( ( ( ApiJsonMessage ) msg ) . getRawJson ( ) ) ; < nl > + if ( object . get ( " dataType " ) . equals ( type . getDataType ( ) ) ) { < nl > + return type . create ( classToConvert , object . getJSONObject ( " data " ) ) ; < nl > + } < nl > + } catch ( JSONException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + } catch ( InstantiationException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } catch ( IllegalAccessException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + return null ; < nl > + } < nl > + < nl > + protected void setJsonObject ( JSONObject jsonObject ) { < nl > + this . jsonObject = jsonObject ; < nl > + } < nl > + < nl > + protected void setRawJson ( String rawJson ) { < nl > + this . rawJson = rawJson ; < nl > + } < nl > + < nl > + public String getSimpleStringData ( ) { < nl > + try { < nl > + return getJson ( ) . getJSONObject ( " data " ) . getString ( " data " ) ; < nl > + } catch ( JSONException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + return " " ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > index 594bb74 . . 19cccb4 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > @ @ - 353 , 6 + 353 , 8 @ @ public class I18nEngine { < nl > return locale . get ( " Location " ) ; < nl > case STICKER : < nl > return locale . get ( " Sticker " ) ; < nl > + case CUSTOM _ JSON _ MESSAGE : < nl > + return text ; < nl > case SERVICE : < nl > return text ; / / Should be service message < nl > case SERVICE _ REGISTERED : < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index bb37463 . . 82c6861 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 37 , 6 + 37 , 7 @ @ import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > import im . actor . core . entity . User ; < nl > import im . actor . core . entity . content . FastThumb ; < nl > + import im . actor . core . entity . content . JsonContent ; < nl > import im . actor . core . entity . content . internal . Sticker ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > @ @ - 69 , 9 + 70 , 7 @ @ import im . actor . runtime . actors . tools . BounceFilterActor ; < nl > import im . actor . runtime . eventbus . BusSubscriber ; < nl > import im . actor . runtime . eventbus . Event ; < nl > import im . actor . runtime . files . FileSystemReference ; < nl > - import im . actor . runtime . json . JSONObject ; < nl > import im . actor . runtime . mvvm . MVVMCollection ; < nl > - import im . actor . runtime . storage . KeyValueEngine ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > import im . actor . runtime . storage . SyncKeyValue ; < nl > < nl > @ @ - 340 , 8 + 339 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } < nl > < nl > public void sendJson ( @ NotNull Peer peer , < nl > - @ NotNull JSONObject jsonObject ) { < nl > - sendMessageActor . send ( new SenderActor . SendJson ( peer , jsonObject ) ) ; < nl > + @ NotNull JsonContent content ) { < nl > + sendMessageActor . send ( new SenderActor . SendJson ( peer , content ) ) ; < nl > } < nl > < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > index 17f15ca . . 628fb7e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > @ @ - 60 , 7 + 60 , 6 @ @ import im . actor . core . modules . utils . RandomUtils ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > import im . actor . runtime . Storage ; < nl > - import im . actor . runtime . json . JSONObject ; < nl > < nl > public class SenderActor extends ModuleActor { < nl > < nl > @ @ - 172 , 13 + 171 , 11 @ @ public class SenderActor extends ModuleActor { < nl > performSendContent ( peer , rid , content ) ; < nl > } < nl > < nl > - public void doSendJson ( Peer peer , JSONObject jsonObject ) { < nl > + public void doSendJson ( Peer peer , JsonContent content ) { < nl > long rid = RandomUtils . nextRid ( ) ; < nl > long date = createPendingDate ( ) ; < nl > long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; < nl > < nl > - JsonContent content = JsonContent . create ( jsonObject ) ; < nl > - < nl > Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content , new ArrayList < Reaction > ( ) ) ; < nl > context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( message ) ; < nl > < nl > @ @ - 886 , 16 + 883 , 16 @ @ public class SenderActor extends ModuleActor { < nl > < nl > public static class SendJson { < nl > private Peer peer ; < nl > - private JSONObject json ; < nl > + private JsonContent json ; < nl > < nl > - public SendJson ( Peer peer , JSONObject json ) { < nl > + public SendJson ( Peer peer , JsonContent json ) { < nl > this . json = json ; < nl > this . peer = peer ; < nl > < nl > } < nl > < nl > < nl > - public JSONObject getJson ( ) { < nl > + public JsonContent getJson ( ) { < nl > return json ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidNotifications . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidNotifications . java 
 index 5aecfd0 . . 1b1badf 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidNotifications . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidNotifications . java 
 @ @ - 163 , 7 + 163 , 7 @ @ public class AndroidNotifications implements NotificationProvider { 
 
 String sender = getNotificationSender ( topNotification ) ; 
 builder . setContentTitle ( sender ) ; 
 - builder . setContentText ( messagesCount + " messages " ) ; 
 + builder . setContentText ( messagesCount + context . getString ( R . string . notifications _ single _ conversation _ а fter _ messages _ count ) ) ; 
 visiblePeer = topNotification . getPeer ( ) ; 
 
 
 @ @ - 176 , 7 + 176 , 7 @ @ public class AndroidNotifications implements NotificationProvider { 
 inboxStyle . addLine ( messenger . getFormatter ( ) . formatNotificationText ( n ) ) ; 
 } 
 } 
 - inboxStyle . setSummaryText ( messagesCount + " messages " ) ; 
 + inboxStyle . setSummaryText ( messagesCount + context . getString ( R . string . notifications _ single _ conversation _ а fter _ messages _ count ) ) ; 
 Avatar avatar = null ; 
 int id = 0 ; 
 String avatarTitle = " " ; 
 @ @ - 226 , 7 + 226 , 7 @ @ public class AndroidNotifications implements NotificationProvider { 
 } else { 
 / / Multiple conversations notification 
 builder . setContentTitle ( ActorSDK . sharedActor ( ) . getAppName ( ) ) ; 
 - builder . setContentText ( messagesCount + " messages in " + conversationsCount + " chats " ) ; 
 + builder . setContentText ( messagesCount + context . getString ( R . string . notification _ multiple _ canversations _ after _ msg _ count ) + conversationsCount + context . getString ( R . string . notifications _ multiple _ canversations _ after _ coversations _ count ) ) ; 
 visiblePeer = null ; 
 
 intent = new Intent ( context , ActorMainActivity . class ) ; 
 @ @ - 239 , 7 + 239 , 7 @ @ public class AndroidNotifications implements NotificationProvider { 
 for ( Notification n : topNotifications ) { 
 inboxStyle . addLine ( getNotificationTextFull ( n , messenger ) ) ; 
 } 
 - inboxStyle . setSummaryText ( messagesCount + " messages in " + conversationsCount + " chats " ) ; 
 + inboxStyle . setSummaryText ( messagesCount + context . getString ( R . string . notification _ multiple _ canversations _ after _ msg _ count ) + conversationsCount + context . getString ( R . string . notifications _ multiple _ canversations _ after _ coversations _ count ) ) ; 
 
 result = builder 
 . setStyle ( inboxStyle ) 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / ui _ text . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / ui _ text . xml 
 index 3e02c2b . . 5461c8d 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / ui _ text . xml 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / ui _ text . xml 
 @ @ - 489 , 4 + 489 , 7 @ @ 
 < string name = " messages _ action _ delete " > Delete < / string > 
 < string name = " messages _ action _ copy " > Copy < / string > 
 < string name = " messages _ action _ like " > Like < / string > 
 + < string name = " notification _ multiple _ canversations _ after _ msg _ count " > " messages in " < / string > 
 + < string name = " notifications _ multiple _ canversations _ after _ coversations _ count " > " chats " < / string > 
 + < string name = " notifications _ single _ conversation _ а fter _ messages _ count " > " messages " < / string > 
 < / resources > 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java 
 index 502b573 . . 2845526 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java 
 @ @ - 14 , 6 + 14 , 8 @ @ import im . actor . core . entity . content . DocumentContent ; 
 import im . actor . core . entity . content . JsonContent ; 
 import im . actor . core . entity . content . LocationContent ; 
 import im . actor . core . entity . content . PhotoContent ; 
 + import im . actor . core . entity . content . ServiceCallEnded ; 
 + import im . actor . core . entity . content . ServiceCallMissed ; 
 import im . actor . core . entity . content . ServiceContent ; 
 import im . actor . core . entity . content . ServiceGroupAvatarChanged ; 
 import im . actor . core . entity . content . ServiceGroupCreated ; 
 @ @ - 59 , 6 + 61 , 10 @ @ public class ContentDescription extends BserObject { 
 return new ContentDescription ( ContentType . STICKER ) ; 
 } else if ( msg instanceof ServiceUserRegistered ) { 
 return new ContentDescription ( ContentType . SERVICE _ REGISTERED ) ; 
 + } else if ( msg instanceof ServiceCallEnded ) { 
 + return new ContentDescription ( ContentType . SERVICE _ CALL _ ENDED ) ; 
 + } else if ( msg instanceof ServiceCallMissed ) { 
 + return new ContentDescription ( ContentType . SERVICE _ CALL _ MISSED ) ; 
 } else if ( msg instanceof JsonContent ) { 
 return new ContentDescription ( ContentType . CUSTOM _ JSON _ MESSAGE , ( ( JsonContent ) msg ) . getContentDescription ( ) ) ; 
 } else if ( msg instanceof ServiceGroupAvatarChanged ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java 
 index 18af328 . . 29da0aa 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java 
 @ @ - 24 , 6 + 24 , 8 @ @ public enum ContentType { 
 SERVICE _ AVATAR ( 13 ) , 
 SERVICE _ AVATAR _ REMOVED ( 14 ) , 
 CUSTOM _ JSON _ MESSAGE ( 21 ) , 
 + SERVICE _ CALL _ ENDED ( 22 ) , 
 + SERVICE _ CALL _ MISSED ( 23 ) , 
 UNKNOWN _ CONTENT ( 15 ) ; 
 
 int value ; 
 @ @ - 79 , 6 + 81 , 10 @ @ public enum ContentType { 
 return STICKER ; 
 case 21 : 
 return CUSTOM _ JSON _ MESSAGE ; 
 + case 22 : 
 + return SERVICE _ CALL _ ENDED ; 
 + case 23 : 
 + return SERVICE _ CALL _ MISSED ; 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 index 404c2a3 . . 09d28e6 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 @ @ - 19 , 6 + 19 , 8 @ @ import im . actor . core . api . ApiServiceExChangedAvatar ; 
 import im . actor . core . api . ApiServiceExChangedTitle ; 
 import im . actor . core . api . ApiServiceExContactRegistered ; 
 import im . actor . core . api . ApiServiceExGroupCreated ; 
 + import im . actor . core . api . ApiServiceExPhoneCall ; 
 + import im . actor . core . api . ApiServiceExPhoneMissed ; 
 import im . actor . core . api . ApiServiceExUserInvited ; 
 import im . actor . core . api . ApiServiceExUserJoined ; 
 import im . actor . core . api . ApiServiceExUserKicked ; 
 @ @ - 148 , 6 + 150 , 10 @ @ public abstract class AbsContent { 
 return new ServiceGroupUserLeave ( remoteContainer ) ; 
 } else if ( ext instanceof ApiServiceExUserJoined ) { 
 return new ServiceGroupUserJoined ( remoteContainer ) ; 
 + } else if ( ext instanceof ApiServiceExPhoneCall ) { 
 + return new ServiceCallEnded ( remoteContainer ) ; 
 + } else if ( ext instanceof ApiServiceExPhoneMissed ) { 
 + return new ServiceCallMissed ( remoteContainer ) ; 
 } else { 
 return new ServiceContent ( remoteContainer ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ServiceCallEnded . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ServiceCallEnded . java 
 new file mode 100644 
 index 0000000 . . 8fc1cb4 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ServiceCallEnded . java 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + / * 
 + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + * / 
 + 
 + package im . actor . core . entity . content ; 
 + 
 + import im . actor . core . api . ApiServiceExGroupCreated ; 
 + import im . actor . core . api . ApiServiceMessage ; 
 + import im . actor . core . entity . content . internal . ContentRemoteContainer ; 
 + 
 + public class ServiceCallEnded extends ServiceContent { 
 + 
 + 
 + public ServiceCallEnded ( ContentRemoteContainer contentContainer ) { 
 + super ( contentContainer ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ServiceCallMissed . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ServiceCallMissed . java 
 new file mode 100644 
 index 0000000 . . 22e8e09 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ServiceCallMissed . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + / * 
 + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + * / 
 + 
 + package im . actor . core . entity . content ; 
 + 
 + import im . actor . core . entity . content . internal . ContentRemoteContainer ; 
 + 
 + public class ServiceCallMissed extends ServiceContent { 
 + 
 + 
 + public ServiceCallMissed ( ContentRemoteContainer contentContainer ) { 
 + super ( contentContainer ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 index b89e903 . . 9ffb946 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 @ @ - 18 , 6 + 18 , 8 @ @ import im . actor . core . entity . Notification ; 
 import im . actor . core . entity . PeerType ; 
 import im . actor . core . entity . Sex ; 
 import im . actor . core . entity . User ; 
 + import im . actor . core . entity . content . ServiceCallEnded ; 
 + import im . actor . core . entity . content . ServiceCallMissed ; 
 import im . actor . core . entity . content . ServiceContent ; 
 import im . actor . core . entity . content . ServiceGroupAvatarChanged ; 
 import im . actor . core . entity . content . ServiceGroupCreated ; 
 @ @ - 387 , 6 + 389 , 10 @ @ public class I18nEngine { 
 return getTemplateNamed ( senderId , " ServiceGroupTitle " ) ; 
 case SERVICE _ JOINED : 
 return getTemplateNamed ( senderId , " ServiceGroupJoined " ) ; 
 + case SERVICE _ CALL _ ENDED : 
 + return locale . get ( " ServiceCallEnded " ) ; 
 + case SERVICE _ CALL _ MISSED : 
 + return locale . get ( " ServiceCallMissed " ) ; 
 case NONE : 
 return " " ; 
 default : 
 @ @ - 443 , 6 + 449 , 10 @ @ public class I18nEngine { 
 } 
 } else if ( content instanceof ServiceGroupUserJoined ) { 
 return getTemplateNamed ( senderId , " ServiceGroupJoined " ) ; 
 + } else if ( content instanceof ServiceCallEnded ) { 
 + return locale . get ( " ServiceCallEnded " ) ; 
 + } else if ( content instanceof ServiceCallMissed ) { 
 + return locale . get ( " ServiceCallMissed " ) ; 
 } 
 
 return content . getCompatText ( ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText . properties b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText . properties 
 index f51241f . . 737dd51 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText . properties 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText . properties 
 @ @ - 52 , 6 + 52 , 8 @ @ ServiceGroupTitle = { name } changed the group name 
 ServiceGroupTitleFull = { name } changed the group name to " { title } " 
 ServiceGroupAvatarChanged = { name } changed the group photo 
 ServiceGroupAvatarRemoved = { name } removed the group photo 
 + ServiceCallEnded = Call ended 
 + ServiceCallMissed = Missed call 
 
 ErrorInternal = Internal server error . Please , try again later . 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ar . properties b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ar . properties 
 index 7622432 . . 724b658 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ar . properties 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ar . properties 
 @ @ - 52 , 6 + 52 , 8 @ @ ServiceGroupTitle = { name } غ ي ر ا س م ا ل م ج م و ع ة ا ل ى 
 ServiceGroupTitleFull = { name } غ ي ر ا ل ا س م ا ل ى " { title } " 
 ServiceGroupAvatarChanged = { name } غ ي ر ص و ر ة ا ل م ج م و ع ة 
 ServiceGroupAvatarRemoved = { name } ح ذ ف ص و ر ة ا ل م ج م و ع ة 
 + ServiceCallEnded = Call ended 
 + ServiceCallMissed = Missed call 
 
 ErrorInternal = Internal server error . Please , try again later . 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Es . properties b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Es . properties 
 index bcabd46 . . 77e21c0 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Es . properties 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Es . properties 
 @ @ - 52 , 6 + 52 , 8 @ @ ServiceGroupTitle = a modificado el nombre del grupo 
 ServiceGroupTitleFull = cambio el nombre del grupo a " { title } " 
 ServiceGroupAvatarChanged = modificada la foto de grupo 
 ServiceGroupAvatarRemoved = eliminada la foto de grupo 
 + ServiceCallEnded = Llamada finalizada 
 + ServiceCallMissed = Llamada perdida 
 
 ErrorInternal = Error Interno del Servidor . Por favor , int é ntelo de nuevo m á s tarde . 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Pt . properties b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Pt . properties 
 index 9abb92a . . 0e8e5b9 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Pt . properties 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Pt . properties 
 @ @ - 52 , 6 + 52 , 8 @ @ ServiceGroupTitle = { name } alterou o nome do grupo 
 ServiceGroupTitleFull = { name } alterou o nome do grupo para " { title } " 
 ServiceGroupAvatarChanged = { name } alterou a foto do grupo 
 ServiceGroupAvatarRemoved = { name } removeu a foto do grupo 
 + ServiceCallEnded = Call ended 
 + ServiceCallMissed = Missed call 
 
 ErrorInternal = Internal server error . Please , try again later . 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ru . properties b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ru . properties 
 index 1db6bf5 . . 9f5228c 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ru . properties 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Ru . properties 
 @ @ - 114 , 6 + 114 , 9 @ @ ServiceGroupAvatarRemovedYou = { name } у д а л и л и ф о т о г р у п п ы 
 ServiceGroupAvatarRemovedMale = { name } у д а л и л ф о т о г р у п п ы 
 ServiceGroupAvatarRemovedFemale = { name } у д а л и л а ф о т о г р у п п ы 
 
 + ServiceCallEnded = В ы з о в з а в е р ш е н 
 + ServiceCallMissed = П р о п у щ е н в ы з о в 
 + 
 ErrorInternal = Internal server error . Please , try again later . 
 
 ErrorEmptyPhone = Please , enter your phone number 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Zn . properties b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Zn . properties 
 index 0ae774d . . a7de8ec 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Zn . properties 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / resources / AppText _ Zn . properties 
 @ @ - 52 , 6 + 52 , 8 @ @ ServiceGroupTitle = { name } 修 改 了 群 名 称 
 ServiceGroupTitleFull = { name } 修 改 为 名 称 为 ： " { title } " 
 ServiceGroupAvatarChanged = { name } 修 改 了 群 头 像 
 ServiceGroupAvatarRemoved = { name } 删 除 了 群 头 像 
 + ServiceCallEnded = Call ended 
 + ServiceCallMissed = Missed call 
 
 ErrorInternal = Internal server error . Please , try again later . 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 index 6742c3c . . ed68723 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 @ @ - 43 , 6 + 43 , 8 @ @ object UserErrors { 
 
 case object InvalidNickname extends UserError ( " Invalid nickname " ) 
 
 + case object InvalidName extends UserError ( " Invalid name " ) 
 + 
 final case class InvalidTimeZone ( tz : String ) extends UserError ( s " Invalid time zone : $ tz " ) 
 
 final case class InvalidLocale ( locale : String ) extends UserError ( s " Invalid locale : $ locale " ) 
 @ @ - 136 , 16 + 138 , 23 @ @ private [ user ] trait UserCommandHandlers { 
 db . run ( p . UserRepo . setCountryCode ( userId , countryCode ) map ( _ ⇒ ChangeCountryCodeAck ( ) ) ) 
 } 
 
 - protected def changeName ( user : User , name : String ) : Unit = 
 - persistReply ( TSEvent ( now ( ) , UserEvents . NameChanged ( name ) ) , user ) { _ ⇒ 
 - val update = UpdateUserNameChanged ( userId , name ) 
 - for { 
 - relatedUserIds ← getRelations ( userId ) 
 - _ ← seqUpdatesExt . broadcastSingleUpdate ( relatedUserIds , update ) 
 - seqstate ← seqUpdatesExt . deliverSingleUpdate ( user . id , update ) 
 - _ ← db . run ( UserRepo . setName ( userId , name ) ) 
 - } yield seqstate 
 + protected def changeName ( user : User , name : String ) : Unit = { 
 + val replyTo = sender ( ) 
 + 
 + if ( StringUtils . validName ( name ) . fold ( l ⇒ false , r ⇒ true ) ) { 
 + persistReply ( TSEvent ( now ( ) , UserEvents . NameChanged ( name ) ) , user ) { _ ⇒ 
 + val update = UpdateUserNameChanged ( userId , name ) 
 + for { 
 + relatedUserIds ← getRelations ( userId ) 
 + _ ← seqUpdatesExt . broadcastSingleUpdate ( relatedUserIds , update ) 
 + seqstate ← seqUpdatesExt . deliverSingleUpdate ( user . id , update ) 
 + _ ← db . run ( UserRepo . setName ( userId , name ) ) 
 + } yield seqstate 
 + } 
 + } else { 
 + replyTo ! Status . Failure ( UserErrors . InvalidName ) 
 } 
 + } 
 
 protected def delete ( user : User ) : Unit = 
 persistStashingReply ( TSEvent ( now ( ) , UserEvents . Deleted ( ) ) , user ) { _ ⇒ 
 @ @ - 198 , 8 + 207 , 9 @ @ private [ user ] trait UserCommandHandlers { 
 ( seqstate , _ ) ← seqUpdatesExt . broadcastOwnSingleUpdate ( userId , relatedUserIds , update ) 
 } yield seqstate 
 } 
 - } else 
 + } else { 
 replyTo ! Status . Failure ( UserErrors . InvalidNickname ) 
 + } 
 } else { 
 replyTo ! Status . Failure ( UserErrors . NicknameTaken ) 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 index 4373f5f . . 2098ee6 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 @ @ - 276 , 12 + 276 , 12 @ @ trait AuthHelpers extends Helpers { 
 } yield \ / - ( user ) 
 } 
 
 - protected def newUser ( ) : Result [ User ] = { 
 + protected def newUser ( name : String ) : Result [ User ] = { 
 val rng = ThreadLocalRandom . current ( ) 
 val user = model . User ( 
 id = nextIntId ( rng ) , 
 accessSalt = ACLUtils . nextAccessSalt ( rng ) , 
 - name = " " , 
 + name = name , 
 countryCode = " " , 
 sex = model . NoSex , 
 state = model . UserState . Registered , 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 index 9f8cdcc . . 7abbba4 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 @ @ - 267 , 7 + 267 , 7 @ @ final class AuthServiceImpl ( val activationContext : CodeActivation ) ( 
 DeviceInfo ( timeZone . getOrElse ( " " ) , preferredLanguages ) . toByteArray , 
 isChecked = false / / we don ' t need to check password if user signs up 
 ) 
 - user ← newUser ( ) 
 + user ← newUser ( normUsername ) 
 _ ← handleUserCreate ( user , transaction , clientData ) 
 userStruct ← authorizeT ( user . id , " " , transaction , clientData ) 
 } yield ResponseAuth ( userStruct , ApiConfig ( maxGroupSize ) ) 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala 
 index 4e2de7f . . f37ff88 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala 
 @ @ - 23 , 27 + 23 , 25 @ @ import scala . concurrent . { ExecutionContext , Future } 
 object ProfileErrors { 
 val NicknameInvalid = RpcError ( 400 , " NICKNAME _ INVALID " , 
 " Invalid nickname . Valid nickname should contain from 5 to 32 characters , and may consist of latin characters , numbers and underscores " , false , None ) 
 + val NameInvalid = RpcError ( 400 , " NAME _ INVALID " , " Invalid name . Valid name should not be empty or contain bad symbols " , false , None ) 
 val NicknameBusy = RpcError ( 400 , " NICKNAME _ BUSY " , " This nickname already belongs some other user , we are sorry ! " , false , None ) 
 val AboutTooLong = RpcError ( 400 , " ABOUT _ TOO _ LONG " , 
 " About is too long . It should be no longer then 255 characters " , false , None ) 
 } 
 
 - final class ProfileServiceImpl ( ) ( 
 - implicit 
 - actorSystem : ActorSystem 
 - ) extends ProfileService { 
 + final class ProfileServiceImpl ( ) ( implicit system : ActorSystem ) extends ProfileService { 
 
 import FileHelpers . _ 
 import ImageUtils . _ 
 
 - override implicit val ec : ExecutionContext = actorSystem . dispatcher 
 + override implicit val ec : ExecutionContext = system . dispatcher 
 
 private implicit val timeout = Timeout ( 5 . seconds ) 
 / / TODO : configurable 
 - private val db : Database = DbExtension ( actorSystem ) . db 
 - private val userExt = UserExtension ( actorSystem ) 
 - private implicit val socialRegion : SocialManagerRegion = SocialExtension ( actorSystem ) . region 
 - private implicit val fsAdapter : FileStorageAdapter = FileStorageExtension ( actorSystem ) . fsAdapter 
 + private val db : Database = DbExtension ( system ) . db 
 + private val userExt = UserExtension ( system ) 
 + private implicit val socialRegion : SocialManagerRegion = SocialExtension ( system ) . region 
 + private implicit val fsAdapter : FileStorageAdapter = FileStorageExtension ( system ) . fsAdapter 
 
 override def jhandleEditAvatar ( fileLocation : ApiFileLocation , clientData : ClientData ) : Future [ HandlerResult [ ResponseEditAvatar ] ] = { 
 / / TODO : flatten 
 @ @ - 80 , 14 + 78 , 14 @ @ final class ProfileServiceImpl ( ) ( 
 db . run ( toDBIOAction ( authorizedAction ) ) 
 } 
 
 - override def jhandleEditName ( name : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { 
 - val authorizedAction = requireAuth ( clientData ) map { implicit client ⇒ 
 - DBIO . from ( userExt . changeName ( client . userId , name ) map { 
 - case SeqState ( seq , state ) ⇒ Ok ( ResponseSeq ( seq , state . toByteArray ) ) 
 - } ) 
 + override def jhandleEditName ( name : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = 
 + authorized ( clientData ) { implicit client ⇒ 
 + for { 
 + SeqState ( seq , state ) ← userExt . changeName ( client . userId , name ) 
 + } yield Ok ( ResponseSeq ( seq , state . toByteArray ) ) 
 + } recover { 
 + case UserErrors . InvalidName ⇒ Error ( ProfileErrors . NameInvalid ) 
 } 
 - db . run ( toDBIOAction ( authorizedAction ) ) 
 - } 
 
 def jhandleEditNickName ( nickname : Option [ String ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { 
 authorized ( clientData ) { implicit client ⇒ 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 index 79e6807 . . d745804 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 @ @ - 39 , 6 + 39 , 8 @ @ final class ProfileServiceSpec 
 it should " respond with error on invalid locale " in profile . invalidPreferredLanguages 
 it should " respond with error on same preferred languages " in profile . samePreferredLanguages 
 
 + " Edit name " should " not allow to use empty name " in profile . editNameEmpty 
 + 
 implicit lazy val service = new ProfileServiceImpl 
 implicit lazy val filesService = new FilesServiceImpl 
 
 @ @ - 299 , 5 + 301 , 19 @ @ final class ProfileServiceSpec 
 } 
 } 
 } 
 + 
 + def editNameEmpty ( ) = { 
 + val ( user , authId , authSid , _ ) = createUser ( ) 
 + val sessionId = createSessionId ( ) 
 + 
 + val clientData1 = ClientData ( authId , sessionId , Some ( AuthData ( user . id , authSid ) ) ) 
 + 
 + whenReady ( service . jhandleEditName ( " " , clientData ) ) { resp ⇒ 
 + inside ( resp ) { 
 + case Error ( e ) ⇒ e shouldEqual ProfileErrors . NameInvalid 
 + } 
 + } 
 + 
 + } 
 } 
 } 
 diff - - git a / actor - server / notes / 1 . 0 . 111 . markdown b / actor - server / notes / 1 . 0 . 111 . markdown 
 new file mode 100644 
 index 0000000 . . 8b4c158 
 - - - / dev / null 
 + + + b / actor - server / notes / 1 . 0 . 111 . markdown 
 @ @ - 0 , 0 + 1 @ @ 
 + * Don ' t allow users to change name to empty 
 diff - - git a / actor - server / version . sbt b / actor - server / version . sbt 
 index f32c4a9 . . 256b1e7 100644 
 - - - a / actor - server / version . sbt 
 + + + b / actor - server / version . sbt 
 @ @ - 1 + 1 @ @ 
 - version in ThisBuild : = " 1 . 0 . 111 - SNAPSHOT " 
 \ No newline at end of file 
 + version in ThisBuild : = " 1 . 0 . 112 - SNAPSHOT " 
 \ No newline at end of file 
 diff - - git a / docs / s2s / api / entity - user . md b / docs / s2s / api / entity - user . md 
 new file mode 100644 
 index 0000000 . . 00a9cc8 
 - - - / dev / null 
 + + + b / docs / s2s / api / entity - user . md 
 @ @ - 0 , 0 + 1 , 47 @ @ 
 + # User Entity 
 + 
 + How Users are presented in API . Users are secured with Access Hashes . 
 + 
 + # # Definition 
 + 
 + | field | type | description | 
 + | - - - - - - - | - - - - - - | - - - - - - - - - - - - - | 
 + | * uid | int | User ' s ID | 
 + | * accessHash | string | Access Hash of a user | 
 + | * kind | string | Kind of a user : bot , human , service , etc . . . | 
 + | * name | string | Name of the user | 
 + | * avatar | Avatar | Avatar of the user | 
 + | * contacts | Contact [ ] | Contact information of the user | 
 + | username | string | Username of the user | 
 + | about | string | About text | 
 + | sex | Sex | Sex of the user | 
 + | timeZone | string | Timezone of the user | 
 + | preferredLangiages | string [ ] | Preferred languages | 
 + 
 + # # Example 
 + ` ` ` json 
 + { 
 + " uid " : 1122334455 , 
 + " accessHash " : " 11223344556677889900 " , 
 + " isBot " : false , 
 + " name " : " Steve " , 
 + " avatar " : null , 
 + " username " : " steve " , 
 + " about " : " Founder of Actor " , 
 + " contacts " : [ ] , 
 + " sex " : null , 
 + " timeZone " : " UTC + 0 " , 
 + " preferredLanguages " : [ " en " , " us " , " zh " , " ar " ] 
 + } 
 + ` ` ` 
 + 
 + # # Contact Object 
 + ` ` ` json 
 + { 
 + " contactType " : " phone | email | web | social " , 
 + " typeSpec " : " mobile / standalone / home . . . " , 
 + " value " : " 75551112233 " , 
 + " title " : " My phone number " , 
 + " subtitle " : " Call me only on mondays " 
 + } 
 + ` ` ` 
 diff - - git a / docs / s2s / api / security . md b / docs / s2s / api / security . md 
 new file mode 100644 
 index 0000000 . . f519c65 
 - - - / dev / null 
 + + + b / docs / s2s / api / security . md 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + # Security in s2s protocol 
 + 
 + Keeping everything secure is very important for any modern federated messaging . This page describes security part of server - server . 
 + 
 + # Access Hashes 
 + 
 + Managing what other side can access is very hard . You need to keep permissions table , always keep it at sync . Telegram ' s team ended up with a simple solution : access hashes . 
 + 
 + Access Hashes is server - side generated HMAC for each secured object for each peer . For interacting with secured object , peer need to get Access Hash first , for example , via update or as response from search method . 
 + 
 + Peers are responsible to keep Access hash values forewer and use them as key to interact with objects . For example , sending a message also requires approriate access hash . 
 + 
 + Access Hashes are not secret and they are valid only for one peer and invalid for other , so there are no sence in stealing them . 
 + 
 + In s2s protocol access hashes are represented by strings . 
 diff - - git a / docs / s2s / basic - principles . md b / docs / s2s / basic - principles . md 
 index 1c7506a . . 14ecad1 100644 
 - - - a / docs / s2s / basic - principles . md 
 + + + b / docs / s2s / basic - principles . md 
 @ @ - 6 , 7 + 6 , 7 @ @ Currently s2s ptorofol is based on HTTP / 1 . 1 . In future releases underlying trans 
 
 We found that our ideas are often the same as project [ matrix . org ] ( http : / / matrix . org / docs / spec / r0 . 0 . 1 / server _ server . html ) have . We believe that we can work together and enrich their ' s network with Actor . Draft version of our federation API is * * NOT * * compatable with matrix , but release one we expect to be one . 
 
 - Protocol is JSON - based , but can be easily transformed to any form of key - value format , for example , protobuf . 
 + Protocol is Protobuf - based , but can be easily transformed to any form of key - value format , for example , protobuf . 
 
 # # Basic requirements

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 index 56b5963 . . afc1652 100644 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 @ @ - 1 , 30 + 1 , 38 @ @ 
 package im . actor ; 
 
 import android . graphics . Color ; 
 + import android . os . Bundle ; 
 + import android . support . annotation . Nullable ; 
 import android . view . LayoutInflater ; 
 import android . view . View ; 
 import android . view . ViewGroup ; 
 import android . widget . CheckBox ; 
 
 - import im . actor . core . api . ApiMessage ; 
 - import im . actor . core . api . ApiTextMessage ; 
 + import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . entity . content . ContentConverter ; 
 - import im . actor . core . entity . content . TextContent ; 
 + import im . actor . core . entity . content . JsonContent ; 
 import im . actor . core . entity . content . internal . AbsContentContainer ; 
 import im . actor . core . entity . content . internal . ContentRemoteContainer ; 
 + import im . actor . runtime . json . JSONException ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . ActorSDKApplication ; 
 import im . actor . sdk . ActorStyle ; 
 import im . actor . sdk . BaseActorSDKDelegate ; 
 + import im . actor . sdk . controllers . conversation . messages . BaseCustomHolder ; 
 import im . actor . sdk . controllers . conversation . messages . MessageHolder ; 
 import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; 
 + import im . actor . sdk . controllers . conversation . messages . MessagesFragment ; 
 import im . actor . sdk . controllers . fragment . settings . ActorSettingsCategory ; 
 import im . actor . sdk . controllers . fragment . settings . ActorSettingsField ; 
 + import im . actor . sdk . controllers . fragment . settings . BaseActorChatActivity ; 
 import im . actor . sdk . controllers . fragment . settings . BaseActorSettingsActivity ; 
 import im . actor . sdk . controllers . fragment . settings . BaseActorSettingsFragment ; 
 + import im . actor . sdk . intents . ActorIntent ; 
 import im . actor . sdk . intents . ActorIntentFragmentActivity ; 
 
 + import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 + 
 public class Application extends ActorSDKApplication { 
 
 @ Override 
 @ @ - 41 , 40 + 49 , 104 @ @ public class Application extends ActorSDKApplication { 
 AbsContent . registerConverter ( new ContentConverter ( ) { 
 @ Override 
 public AbsContent convert ( AbsContentContainer container ) { 
 - if ( container instanceof ContentRemoteContainer ) { 
 - ApiMessage msg = ( ( ContentRemoteContainer ) container ) . getMessage ( ) ; 
 - if ( msg instanceof ApiTextMessage ) { 
 - return new TextContent ( ( ContentRemoteContainer ) container ) ; 
 - } 
 - } 
 - return null ; 
 + return JsonContent . convert ( container , Custom . class ) ; 
 + } 
 + 
 + @ Override 
 + public Class destinationType ( ) { 
 + return Custom . class ; 
 + } 
 + } ) ; 
 + AbsContent . registerConverter ( new ContentConverter ( ) { 
 + @ Override 
 + public AbsContent convert ( AbsContentContainer container ) { 
 + return JsonContent . convert ( container , CustomTwo . class ) ; 
 } 
 
 @ Override 
 public Class destinationType ( ) { 
 - return TextExContent . class ; 
 + return CustomTwo . class ; 
 } 
 } ) ; 
 } 
 
 - public class TextExContent extends TextContent { 
 + public static class Custom extends JsonContent { 
 
 - public TextExContent ( ContentRemoteContainer remoteContainer ) { 
 - super ( remoteContainer ) ; 
 + public String getText ( ) { 
 + return getSimpleStringData ( ) ; 
 + } 
 + 
 + @ Override 
 + public String getDataType ( ) { 
 + return " customJson " ; 
 + } 
 + 
 + @ Override 
 + public String getContentDescriptionEn ( ) { 
 + return " custom json msg " ; 
 + } 
 + 
 + @ Override 
 + public String getContentDescriptionRu ( ) { 
 + return " б л а б л а б л а " ; 
 } 
 } 
 
 + public static class CustomTwo extends JsonContent { 
 + 
 + public String getText ( ) { 
 + return getSimpleStringData ( ) ; 
 + } 
 + 
 + @ Override 
 + public String getDataType ( ) { 
 + return " customTwoJson " ; 
 + } 
 + 
 + @ Override 
 + public String getContentDescriptionEn ( ) { 
 + return " custom json msg " ; 
 + } 
 + 
 + @ Override 
 + public String getContentDescriptionRu ( ) { 
 + return " б л а б л а б л а " ; 
 + } 
 + } 
 + 
 + 
 + 
 private class ActorSDKDelegate extends BaseActorSDKDelegate { 
 
 @ Override 
 - public MessageHolder getCustomMessageViewHolder ( Class < AbsContent > content , MessagesAdapter messagesAdapter , ViewGroup viewGroup ) { 
 - if ( content . isAssignableFrom ( TextExContent . class ) ) { 
 - return new TextExHolder ( messagesAdapter , LayoutInflater 
 - . from ( viewGroup . getContext ( ) ) 
 - . inflate ( R . layout . adapter _ dialog _ text , viewGroup , false ) ) ; 
 + public ActorIntent getChatIntent ( ) { 
 + return new BaseActorChatActivity ( ) { 
 + @ Override 
 + public MessagesFragment getChatFragment ( Peer peer ) { 
 + return new MessagesFragment ( peer ) { 
 + @ Override 
 + public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { 
 + / / messenger ( ) . sendCustomJsonMessage ( getPeer ( ) , JsonContent . create ( Custom . class , System . currentTimeMillis ( ) + " One " ) ) ; 
 + / / messenger ( ) . sendCustomJsonMessage ( getPeer ( ) , JsonContent . create ( CustomTwo . class , System . currentTimeMillis ( ) + " Two " ) ) ; 
 + / / messenger ( ) . sendCustomJsonMessage ( getPeer ( ) , JsonContent . create ( CustomTwo . class , System . currentTimeMillis ( ) + " Two " ) ) ; 
 + return super . onCreateView ( inflater , container , savedInstanceState ) ; 
 + } 
 + } ; 
 + } 
 + } ; 
 + } 
 + 
 + @ Override 
 + public BaseCustomHolder getCustomMessageViewHolder ( Class < AbsContent > content , MessagesAdapter messagesAdapter , ViewGroup viewGroup ) { 
 + if ( content . equals ( Custom . class ) ) { 
 + return new CustomHolder ( messagesAdapter , viewGroup , R . layout . custom _ holder , false ) ; 
 + } else if ( content . equals ( CustomTwo . class ) ) { 
 + return new CustomTwoHolder ( messagesAdapter , viewGroup , R . layout . custom _ holder , false ) ; 
 + 
 } else { 
 return null ; 
 } 
 + 
 } 
 
 @ Override 
 diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / CustomHolder . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / CustomHolder . java 
 new file mode 100644 
 index 0000000 . . 617f3ce 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / CustomHolder . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package im . actor ; 
 + 
 + import android . graphics . Color ; 
 + import android . text . Spannable ; 
 + import android . text . method . LinkMovementMethod ; 
 + import android . view . MotionEvent ; 
 + import android . view . View ; 
 + import android . view . ViewGroup ; 
 + import android . widget . FrameLayout ; 
 + import android . widget . TextView ; 
 + 
 + import java . util . Random ; 
 + 
 + import im . actor . core . entity . Message ; 
 + import im . actor . sdk . ActorSDK ; 
 + import im . actor . sdk . R ; 
 + import im . actor . sdk . controllers . conversation . messages . BaseCustomHolder ; 
 + import im . actor . sdk . controllers . conversation . messages . MessageHolder ; 
 + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; 
 + import im . actor . sdk . controllers . conversation . messages . PreprocessedData ; 
 + import im . actor . sdk . controllers . conversation . messages . PreprocessedTextData ; 
 + import im . actor . sdk . util . Fonts ; 
 + import im . actor . sdk . view . TintImageView ; 
 + 
 + import static im . actor . sdk . util . ActorSDKMessenger . myUid ; 
 + 
 + public class CustomHolder extends BaseCustomHolder { 
 + 
 + TextView text ; 
 + 
 + public CustomHolder ( MessagesAdapter adapter , ViewGroup viewGroup , int id , boolean isFullSize ) { 
 + super ( adapter , viewGroup , id , isFullSize ) ; 
 + text = ( TextView ) itemView . findViewById ( R . id . tv _ text ) ; 
 + 
 + } 
 + 
 + @ Override 
 + protected void bindData ( Message message , boolean isUpdated , PreprocessedData preprocessedData ) { 
 + text . setText ( ( ( Application . Custom ) message . getContent ( ) ) . getText ( ) ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / CustomTwoHolder . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / CustomTwoHolder . java 
 new file mode 100644 
 index 0000000 . . 1905fdc 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / CustomTwoHolder . java 
 @ @ - 0 , 0 + 1 , 28 @ @ 
 + package im . actor ; 
 + 
 + import android . graphics . Color ; 
 + import android . view . ViewGroup ; 
 + import android . widget . TextView ; 
 + 
 + import im . actor . core . entity . Message ; 
 + import im . actor . sdk . R ; 
 + import im . actor . sdk . controllers . conversation . messages . BaseCustomHolder ; 
 + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; 
 + import im . actor . sdk . controllers . conversation . messages . PreprocessedData ; 
 + 
 + public class CustomTwoHolder extends BaseCustomHolder { 
 + 
 + TextView text ; 
 + 
 + public CustomTwoHolder ( MessagesAdapter adapter , ViewGroup viewGroup , int id , boolean isFullSize ) { 
 + super ( adapter , viewGroup , id , isFullSize ) ; 
 + text = ( TextView ) itemView . findViewById ( R . id . tv _ text ) ; 
 + text . setTextColor ( Color . RED ) ; 
 + 
 + } 
 + 
 + @ Override 
 + protected void bindData ( Message message , boolean isUpdated , PreprocessedData preprocessedData ) { 
 + text . setText ( ( ( Application . CustomTwo ) message . getContent ( ) ) . getText ( ) ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TextExHolder . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TextExHolder . java 
 deleted file mode 100644 
 index ab2ccf6 . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TextExHolder . java 
 + + + / dev / null 
 @ @ - 1 , 151 + 0 , 0 @ @ 
 - package im . actor ; 
 - 
 - import android . graphics . Color ; 
 - import android . text . Spannable ; 
 - import android . text . method . LinkMovementMethod ; 
 - import android . view . MotionEvent ; 
 - import android . view . View ; 
 - import android . view . ViewGroup ; 
 - import android . widget . FrameLayout ; 
 - import android . widget . TextView ; 
 - 
 - import java . util . Random ; 
 - 
 - import im . actor . core . entity . Message ; 
 - import im . actor . sdk . ActorSDK ; 
 - import im . actor . sdk . R ; 
 - import im . actor . sdk . controllers . conversation . messages . MessageHolder ; 
 - import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; 
 - import im . actor . sdk . controllers . conversation . messages . PreprocessedData ; 
 - import im . actor . sdk . controllers . conversation . messages . PreprocessedTextData ; 
 - import im . actor . sdk . util . Fonts ; 
 - import im . actor . sdk . view . TintImageView ; 
 - 
 - import static im . actor . sdk . util . ActorSDKMessenger . myUid ; 
 - 
 - public class TextExHolder extends MessageHolder { 
 - 
 - protected ViewGroup mainContainer ; 
 - protected FrameLayout messageBubble ; 
 - protected TextView text ; 
 - protected TextView time ; 
 - protected TintImageView status ; 
 - 
 - private int waitColor ; 
 - private int sentColor ; 
 - private int deliveredColor ; 
 - private int readColor ; 
 - private int errorColor ; 
 - 
 - public TextExHolder ( MessagesAdapter fragment , final View itemView ) { 
 - super ( fragment , itemView , false ) ; 
 - 
 - mainContainer = ( ViewGroup ) itemView . findViewById ( R . id . mainContainer ) ; 
 - messageBubble = ( FrameLayout ) itemView . findViewById ( R . id . fl _ bubble ) ; 
 - text = ( TextView ) itemView . findViewById ( R . id . tv _ text ) ; 
 - text . setTextColor ( ActorSDK . sharedActor ( ) . style . getConvTextColor ( ) ) ; 
 - text . setTypeface ( Fonts . regular ( ) ) ; 
 - 
 - time = ( TextView ) itemView . findViewById ( R . id . tv _ time ) ; 
 - ActorSDK . sharedActor ( ) . style . getConvTimeColor ( ) ; 
 - time . setTypeface ( Fonts . regular ( ) ) ; 
 - time . setTextColor ( ActorSDK . sharedActor ( ) . style . getConvTimeColor ( ) ) ; 
 - status = ( TintImageView ) itemView . findViewById ( R . id . stateIcon ) ; 
 - 
 - waitColor = ActorSDK . sharedActor ( ) . style . getConvStatePendingColor ( ) ; 
 - sentColor = ActorSDK . sharedActor ( ) . style . getConvStateSentColor ( ) ; 
 - deliveredColor = ActorSDK . sharedActor ( ) . style . getConvStateDeliveredColor ( ) ; 
 - readColor = ActorSDK . sharedActor ( ) . style . getConvStateReadColor ( ) ; 
 - errorColor = ActorSDK . sharedActor ( ) . style . getConvStateErrorColor ( ) ; 
 - 
 - onConfigureViewHolder ( ) ; 
 - } 
 - 
 - @ Override 
 - protected void bindData ( final Message message , boolean isUpdated , PreprocessedData preprocessedData ) { 
 - Random rnd = new Random ( ) ; 
 - int color = Color . argb ( 255 , rnd . nextInt ( 256 ) , rnd . nextInt ( 256 ) , rnd . nextInt ( 256 ) ) ; 
 - text . setBackgroundColor ( color ) ; 
 - PreprocessedTextData textData = ( PreprocessedTextData ) preprocessedData ; 
 - Spannable reactions = preprocessedData . getReactionsSpannable ( ) ; 
 - CharSequence text ; 
 - if ( textData . getSpannableString ( ) ! = null ) { 
 - text = textData . getSpannableString ( ) ; 
 - } else { 
 - text = textData . getText ( ) ; 
 - } 
 - bindRawText ( text , reactions , message , false ) ; 
 - } 
 - 
 - public void bindRawText ( CharSequence rawText , Spannable reactions , Message message , boolean isItalic ) { 
 - if ( message . getSenderId ( ) = = myUid ( ) ) { 
 - messageBubble . setBackgroundResource ( R . drawable . bubble _ text _ out ) ; 
 - } else { 
 - messageBubble . setBackgroundResource ( R . drawable . bubble _ text _ in ) ; 
 - } 
 - 
 - if ( isItalic ) { 
 - text . setTypeface ( Fonts . italic ( ) ) ; 
 - } else { 
 - text . setTypeface ( Fonts . regular ( ) ) ; 
 - } 
 - 
 - text . setText ( rawText ) ; 
 - 
 - / / Fixing url long tap 
 - text . setMovementMethod ( new CustomLinkMovementMethod ( ) ) ; 
 - 
 - / / Fixing span offsets 
 - / / if ( rawText instanceof Spannable ) { 
 - / / Spannable s = ( Spannable ) rawText ; 
 - / / QuoteSpan [ ] qSpans = s . getSpans ( 0 , s . length ( ) , QuoteSpan . class ) ; 
 - / / text . setMinimumWidth ( 0 ) ; 
 - / / if ( qSpans . length > 0 ) { 
 - / / text . measure ( 0 , 0 ) ; 
 - / / text . setMinimumWidth ( text . getMeasuredWidth ( ) + qSpans [ 0 ] . getLeadingMargin ( true ) ) ; 
 - / / } 
 - / / } 
 - 
 - if ( message . getSenderId ( ) = = myUid ( ) ) { 
 - status . setVisibility ( View . VISIBLE ) ; 
 - 
 - switch ( message . getMessageState ( ) ) { 
 - case SENT : 
 - status . setResource ( R . drawable . msg _ check _ 1 ) ; 
 - status . setTint ( sentColor ) ; 
 - break ; 
 - case RECEIVED : 
 - status . setResource ( R . drawable . msg _ check _ 2 ) ; 
 - status . setTint ( deliveredColor ) ; 
 - break ; 
 - case READ : 
 - status . setResource ( R . drawable . msg _ check _ 2 ) ; 
 - status . setTint ( readColor ) ; 
 - break ; 
 - default : 
 - case PENDING : 
 - status . setResource ( R . drawable . msg _ clock ) ; 
 - status . setTint ( waitColor ) ; 
 - break ; 
 - case ERROR : 
 - status . setResource ( R . drawable . msg _ error ) ; 
 - status . setTint ( errorColor ) ; 
 - break ; 
 - } 
 - } else { 
 - status . setVisibility ( View . GONE ) ; 
 - } 
 - 
 - setTimeAndReactions ( time ) ; 
 - } 
 - 
 - class CustomLinkMovementMethod extends LinkMovementMethod { 
 - 
 - @ Override 
 - public boolean onTouchEvent ( TextView textView , Spannable spannable , MotionEvent event ) { 
 - super . onTouchEvent ( textView , spannable , event ) ; 
 - mainContainer . onTouchEvent ( event ) ; 
 - return true ; 
 - } 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / res / layout / custom _ holder . xml b / actor - sdk / sdk - core - android / android - app / src / main / res / layout / custom _ holder . xml 
 new file mode 100644 
 index 0000000 . . 228fe5e 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / res / layout / custom _ holder . xml 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " utf - 8 " ? > < ! - - 
 + ~ Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + - - > 
 + 
 + < im . actor . sdk . controllers . conversation . view . BubbleContainer xmlns : android = " http : / / schemas . android . com / apk / res / android " 
 + android : id = " @ + id / mainContainer " 
 + android : layout _ width = " match _ parent " 
 + android : layout _ height = " wrap _ content " 
 + android : clickable = " true " > 
 + 
 + < FrameLayout 
 + android : id = " @ + id / bubbleContainer " 
 + android : layout _ width = " wrap _ content " 
 + android : layout _ height = " wrap _ content " 
 + android : padding = " 20dp " 
 + android : duplicateParentState = " true " > 
 + 
 + < TextView 
 + android : id = " @ + id / tv _ text " 
 + android : padding = " 50dp " 
 + android : textSize = " 20sp " 
 + android : background = " @ color / primary _ text " 
 + android : layout _ width = " match _ parent " 
 + android : layout _ height = " match _ parent " / > 
 + 
 + 
 + < / FrameLayout > 
 + 
 + 
 + < / im . actor . sdk . controllers . conversation . view . BubbleContainer > 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / BaseCustomHolder . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / BaseCustomHolder . java 
 new file mode 100644 
 index 0000000 . . 7fc4173 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / BaseCustomHolder . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package im . actor . sdk . controllers . conversation . messages ; 
 + 
 + import android . view . LayoutInflater ; 
 + import android . view . ViewGroup ; 
 + 
 + 
 + / * * 
 + * Created by root on 12 / 29 / 15 . 
 + * / 
 + public abstract class BaseCustomHolder extends MessageHolder { 
 + public BaseCustomHolder ( MessagesAdapter adapter , ViewGroup viewGroup , int resourceId , boolean isFullSize ) { 
 + super ( adapter , LayoutInflater 
 + . from ( viewGroup . getContext ( ) ) 
 + . inflate ( resourceId , viewGroup , false ) , isFullSize ) ; 
 + 
 + 
 + } 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java 
 index 930afd5 . . 53ec48b 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java 
 @ @ - 85 , 7 + 85 , 7 @ @ public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { 
 AbsContent content = getItem ( position ) . getContent ( ) ; 
 for ( int i = 0 ; i < AbsContent . getConverters ( ) . length ; i + + ) { 
 ContentConverter converter = AbsContent . getConverters ( ) [ i ] ; 
 - if ( content . getClass ( ) . isAssignableFrom ( converter . destinationType ( ) ) ) { 
 + if ( content . getClass ( ) . equals ( converter . destinationType ( ) ) ) { 
 return 8 + i ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 830d0b5 . . 6d2b2aa 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 13 , 12 + 13 , 8 @ @ import java . util . ArrayList ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 
 - import im . actor . core . api . ApiSearchContentType ; 
 - import im . actor . core . api . ApiSearchPieceText ; 
 import im . actor . core . api . ApiSex ; 
 import im . actor . core . api . ApiAuthSession ; 
 - import im . actor . core . api . ApiStickerCollection ; 
 - import im . actor . core . api . rpc . ResponseLoadOwnStickers ; 
 import im . actor . core . entity . FileReference ; 
 import im . actor . core . entity . Group ; 
 import im . actor . core . entity . MentionFilterResult ; 
 @ @ - 31 , 8 + 27 , 8 @ @ import im . actor . core . entity . Sex ; 
 import im . actor . core . entity . User ; 
 import im . actor . core . entity . WebActionDescriptor ; 
 import im . actor . core . entity . content . FastThumb ; 
 + import im . actor . core . entity . content . JsonContent ; 
 import im . actor . core . entity . content . internal . Sticker ; 
 - import im . actor . core . entity . content . internal . StickersPack ; 
 import im . actor . core . i18n . I18nEngine ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . Modules ; 
 @ @ - 45 , 8 + 41 , 6 @ @ import im . actor . core . modules . events . PeerInfoClosed ; 
 import im . actor . core . modules . events . PeerInfoOpened ; 
 import im . actor . core . modules . events . UserVisible ; 
 import im . actor . core . network . NetworkState ; 
 - import im . actor . core . network . parser . Request ; 
 - import im . actor . core . network . parser . Response ; 
 import im . actor . core . util . ActorTrace ; 
 import im . actor . core . util . Timing ; 
 import im . actor . core . viewmodel . AppStateVM ; 
 @ @ - 64 , 7 + 58 , 6 @ @ import im . actor . core . viewmodel . UploadFileVM ; 
 import im . actor . core . viewmodel . UploadFileVMCallback ; 
 import im . actor . core . viewmodel . UserVM ; 
 import im . actor . runtime . actors . ActorSystem ; 
 - import im . actor . runtime . json . JSONObject ; 
 import im . actor . runtime . mvvm . MVVMCollection ; 
 import im . actor . runtime . mvvm . ValueModel ; 
 import im . actor . runtime . storage . PreferencesStorage ; 
 @ @ - 703 , 8 + 696 , 8 @ @ public class Messenger { 
 * @ param json json content 
 * / 
 @ ObjectiveCName ( " sendJsonWithPeer : withJson : " ) 
 - public void sendJson ( @ NotNull Peer peer , @ NotNull JSONObject json ) { 
 - modules . getMessagesModule ( ) . sendJson ( peer , json ) ; 
 + public void sendCustomJsonMessage ( @ NotNull Peer peer , @ NotNull JsonContent content ) { 
 + modules . getMessagesModule ( ) . sendJson ( peer , content ) ; 
 } 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java 
 index d6fe4f5 . . 502b573 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentDescription . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import java . io . IOException ; 
 import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . entity . content . ContactContent ; 
 import im . actor . core . entity . content . DocumentContent ; 
 + import im . actor . core . entity . content . JsonContent ; 
 import im . actor . core . entity . content . LocationContent ; 
 import im . actor . core . entity . content . PhotoContent ; 
 import im . actor . core . entity . content . ServiceContent ; 
 @ @ - 58 , 6 + 59 , 8 @ @ public class ContentDescription extends BserObject { 
 return new ContentDescription ( ContentType . STICKER ) ; 
 } else if ( msg instanceof ServiceUserRegistered ) { 
 return new ContentDescription ( ContentType . SERVICE _ REGISTERED ) ; 
 + } else if ( msg instanceof JsonContent ) { 
 + return new ContentDescription ( ContentType . CUSTOM _ JSON _ MESSAGE , ( ( JsonContent ) msg ) . getContentDescription ( ) ) ; 
 } else if ( msg instanceof ServiceGroupAvatarChanged ) { 
 if ( ( ( ServiceGroupAvatarChanged ) msg ) . getNewAvatar ( ) = = null ) { 
 return new ContentDescription ( ContentType . SERVICE _ AVATAR _ REMOVED ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java 
 index 21f7b95 . . 18af328 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / ContentType . java 
 @ @ - 23 , 6 + 23 , 7 @ @ public enum ContentType { 
 SERVICE _ TITLE ( 12 ) , 
 SERVICE _ AVATAR ( 13 ) , 
 SERVICE _ AVATAR _ REMOVED ( 14 ) , 
 + CUSTOM _ JSON _ MESSAGE ( 21 ) , 
 UNKNOWN _ CONTENT ( 15 ) ; 
 
 int value ; 
 @ @ - 76 , 6 + 77 , 8 @ @ public enum ContentType { 
 return LOCATION ; 
 case 20 : 
 return STICKER ; 
 + case 21 : 
 + return CUSTOM _ JSON _ MESSAGE ; 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 index 861c52a . . 404c2a3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 @ @ - 177 , 6 + 177 , 10 @ @ public abstract class AbsContent { 
 
 private AbsContentContainer contentContainer ; 
 
 + public AbsContent ( ) { 
 + super ( ) ; 
 + } 
 + 
 public AbsContent ( ContentRemoteContainer contentContainer ) { 
 this . contentContainer = contentContainer ; 
 } 
 @ @ - 189 , 6 + 193 , 10 @ @ public abstract class AbsContent { 
 return contentContainer ; 
 } 
 
 + protected void setContentContainer ( AbsContentContainer contentContainer ) { 
 + this . contentContainer = contentContainer ; 
 + } 
 + 
 public void onIncoming ( Peer peer , ModuleContext context ) { 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / JsonContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / JsonContent . java 
 index 6219244 . . 2d4ad45 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / JsonContent . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / JsonContent . java 
 @ @ - 1 , 33 + 1 , 55 @ @ 
 package im . actor . core . entity . content ; 
 
 import org . jetbrains . annotations . NotNull ; 
 - import org . jetbrains . annotations . Nullable ; 
 + 
 + import java . util . Locale ; 
 
 import im . actor . core . api . ApiJsonMessage ; 
 + import im . actor . core . api . ApiMessage ; 
 + import im . actor . core . entity . content . internal . AbsContentContainer ; 
 import im . actor . core . entity . content . internal . ContentRemoteContainer ; 
 import im . actor . runtime . json . JSONException ; 
 import im . actor . runtime . json . JSONObject ; 
 
 - public class JsonContent extends AbsContent { 
 + public abstract class JsonContent extends AbsContent { 
 
 private JSONObject jsonObject ; 
 private String rawJson ; 
 
 - @ NotNull 
 - public static JsonContent create ( @ NotNull JSONObject json ) { 
 + public JsonContent ( ) { 
 + super ( ) ; 
 + } 
 + 
 
 + public static < T extends JsonContent > T create ( Class < T > c , String simpleStringData ) { 
 + JSONObject jsondata = new JSONObject ( ) ; 
 try { 
 - return new JsonContent ( new ContentRemoteContainer ( new ApiJsonMessage ( json . toString ( ) ) ) ) ; 
 + jsondata . put ( " data " , simpleStringData ) ; 
 } catch ( JSONException e ) { 
 - throw new RuntimeException ( e ) ; 
 + e . printStackTrace ( ) ; 
 } 
 + return create ( c , jsondata ) ; 
 } 
 
 
 - public JsonContent ( ContentRemoteContainer contentContainer ) throws JSONException { 
 - super ( contentContainer ) ; 
 - rawJson = ( ( ApiJsonMessage ) contentContainer . getMessage ( ) ) . getRawJson ( ) ; 
 - jsonObject = new JSONObject ( rawJson ) ; 
 + public static < T extends JsonContent > T create ( Class < T > c , JSONObject data ) { 
 + try { 
 + T t = c . newInstance ( ) ; 
 + JSONObject json = new JSONObject ( ) ; 
 + json . put ( " dataType " , t . getDataType ( ) ) ; 
 + json . put ( " data " , data ) ; 
 + ContentRemoteContainer container = new ContentRemoteContainer ( new ApiJsonMessage ( json . toString ( ) ) ) ; 
 + t . setJsonObject ( json ) ; 
 + t . setRawJson ( json . toString ( ) ) ; 
 + t . setContentContainer ( container ) ; 
 + return t ; 
 + } catch ( InstantiationException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } catch ( IllegalAccessException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } catch ( JSONException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 
 
 @ @ - 38 , 4 + 60 , 96 @ @ public class JsonContent extends AbsContent { 
 public JSONObject getJson ( ) { 
 return jsonObject ; 
 } 
 + 
 + public abstract String getDataType ( ) ; 
 + 
 + public abstract String getContentDescriptionEn ( ) ; 
 + 
 + public abstract String getContentDescriptionRu ( ) ; 
 + 
 + public abstract String getContentDescriptionPtPT ( ) ; 
 + 
 + public abstract String getContentDescriptionPtBR ( ) ; 
 + 
 + public abstract String getContentDescriptionAr ( ) ; 
 + 
 + public abstract String getContentDescriptionCn ( ) ; 
 + 
 + public abstract String getContentDescriptionEs ( ) ; 
 + 
 + public final String getContentDescription ( ) { 
 + Locale locale = Locale . getDefault ( ) ; 
 + if ( locale . getLanguage ( ) . equals ( " ru " ) ) { 
 + return fallback ( getContentDescriptionRu ( ) ) ; 
 + } else if ( locale . equals ( new Locale ( " pt " , " PT " ) ) ) { 
 + return fallback ( getContentDescriptionPtPT ( ) ) ; 
 + } else if ( locale . equals ( new Locale ( " pt " , " BR " ) ) ) { 
 + return fallback ( getContentDescriptionPtBR ( ) ) ; 
 + } else if ( locale . getLanguage ( ) . equals ( " ar " ) ) { 
 + return fallback ( getContentDescriptionAr ( ) ) ; 
 + } else if ( locale . getLanguage ( ) . equals ( " cn " ) ) { 
 + return fallback ( getContentDescriptionCn ( ) ) ; 
 + } else if ( locale . getLanguage ( ) . equals ( " es " ) ) { 
 + return fallback ( getContentDescriptionEs ( ) ) ; 
 + } else { 
 + return fallback ( getContentDescriptionEn ( ) ) ; 
 + } 
 + 
 + 
 + } 
 + 
 + private String fallback ( String s ) { 
 + if ( s ! = null & & ! s . isEmpty ( ) ) { 
 + return s ; 
 + } else { 
 + if ( getContentDescriptionEn ( ) ! = null & & ! getContentDescriptionEn ( ) . isEmpty ( ) ) { 
 + return getContentDescriptionEn ( ) ; 
 + 
 + } else { 
 + return " " ; 
 + } 
 + } 
 + } 
 + 
 + public static < T extends JsonContent > AbsContent convert ( AbsContentContainer container , Class < T > classToConvert ) { 
 + if ( container instanceof ContentRemoteContainer ) { 
 + try { 
 + T type = classToConvert . newInstance ( ) ; 
 + 
 + ApiMessage msg = ( ( ContentRemoteContainer ) container ) . getMessage ( ) ; 
 + if ( msg instanceof ApiJsonMessage ) { 
 + try { 
 + JSONObject object = new JSONObject ( ( ( ApiJsonMessage ) msg ) . getRawJson ( ) ) ; 
 + if ( object . get ( " dataType " ) . equals ( type . getDataType ( ) ) ) { 
 + return type . create ( classToConvert , object . getJSONObject ( " data " ) ) ; 
 + } 
 + } catch ( JSONException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + } catch ( InstantiationException e ) { 
 + e . printStackTrace ( ) ; 
 + } catch ( IllegalAccessException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + return null ; 
 + } 
 + 
 + protected void setJsonObject ( JSONObject jsonObject ) { 
 + this . jsonObject = jsonObject ; 
 + } 
 + 
 + protected void setRawJson ( String rawJson ) { 
 + this . rawJson = rawJson ; 
 + } 
 + 
 + public String getSimpleStringData ( ) { 
 + try { 
 + return getJson ( ) . getJSONObject ( " data " ) . getString ( " data " ) ; 
 + } catch ( JSONException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + return " " ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 index 594bb74 . . 19cccb4 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 @ @ - 353 , 6 + 353 , 8 @ @ public class I18nEngine { 
 return locale . get ( " Location " ) ; 
 case STICKER : 
 return locale . get ( " Sticker " ) ; 
 + case CUSTOM _ JSON _ MESSAGE : 
 + return text ; 
 case SERVICE : 
 return text ; / / Should be service message 
 case SERVICE _ REGISTERED : 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index bb37463 . . 82c6861 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 import im . actor . core . entity . User ; 
 import im . actor . core . entity . content . FastThumb ; 
 + import im . actor . core . entity . content . JsonContent ; 
 import im . actor . core . entity . content . internal . Sticker ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 @ @ - 69 , 9 + 70 , 7 @ @ import im . actor . runtime . actors . tools . BounceFilterActor ; 
 import im . actor . runtime . eventbus . BusSubscriber ; 
 import im . actor . runtime . eventbus . Event ; 
 import im . actor . runtime . files . FileSystemReference ; 
 - import im . actor . runtime . json . JSONObject ; 
 import im . actor . runtime . mvvm . MVVMCollection ; 
 - import im . actor . runtime . storage . KeyValueEngine ; 
 import im . actor . runtime . storage . ListEngine ; 
 import im . actor . runtime . storage . SyncKeyValue ; 
 
 @ @ - 340 , 8 + 339 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } 
 
 public void sendJson ( @ NotNull Peer peer , 
 - @ NotNull JSONObject jsonObject ) { 
 - sendMessageActor . send ( new SenderActor . SendJson ( peer , jsonObject ) ) ; 
 + @ NotNull JsonContent content ) { 
 + sendMessageActor . send ( new SenderActor . SendJson ( peer , content ) ) ; 
 } 
 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 index 17f15ca . . 628fb7e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 @ @ - 60 , 7 + 60 , 6 @ @ import im . actor . core . modules . utils . RandomUtils ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 import im . actor . runtime . Storage ; 
 - import im . actor . runtime . json . JSONObject ; 
 
 public class SenderActor extends ModuleActor { 
 
 @ @ - 172 , 13 + 171 , 11 @ @ public class SenderActor extends ModuleActor { 
 performSendContent ( peer , rid , content ) ; 
 } 
 
 - public void doSendJson ( Peer peer , JSONObject jsonObject ) { 
 + public void doSendJson ( Peer peer , JsonContent content ) { 
 long rid = RandomUtils . nextRid ( ) ; 
 long date = createPendingDate ( ) ; 
 long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; 
 
 - JsonContent content = JsonContent . create ( jsonObject ) ; 
 - 
 Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content , new ArrayList < Reaction > ( ) ) ; 
 context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( message ) ; 
 
 @ @ - 886 , 16 + 883 , 16 @ @ public class SenderActor extends ModuleActor { 
 
 public static class SendJson { 
 private Peer peer ; 
 - private JSONObject json ; 
 + private JsonContent json ; 
 
 - public SendJson ( Peer peer , JSONObject json ) { 
 + public SendJson ( Peer peer , JsonContent json ) { 
 this . json = json ; 
 this . peer = peer ; 
 
 } 
 
 
 - public JSONObject getJson ( ) { 
 + public JsonContent getJson ( ) { 
 return json ; 
 }
