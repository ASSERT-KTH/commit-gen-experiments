BLEU SCORE: 0.10552670315936319

TEST MSG: feat ( core + js ) : archive chat
GENERATED MSG: wip ( sdk ) : Loading grouped dialogs

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 90c9a0d . . 1aeca3b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 483 , 20 + 483 , 20 @ @ public class JsFacade implements Exportable { < nl > } ) ; < nl > } < nl > < nl > - public JsPromise hideChat ( final JsPeer peer ) { < nl > + public JsPromise archiveChat ( final JsPeer peer ) { < nl > return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > @ Override < nl > public void execute ( ) { < nl > - messenger . hideChat ( peer . convert ( ) ) . start ( new CommandCallback < Boolean > ( ) { < nl > + messenger . archiveChat ( peer . convert ( ) ) . start ( new CommandCallback < Boolean > ( ) { < nl > @ Override < nl > public void onResult ( Boolean res ) { < nl > - Log . d ( TAG , " hideChat : result " ) ; < nl > + Log . d ( TAG , " archiveChat : result " ) ; < nl > resolve ( ) ; < nl > } < nl > < nl > @ Override < nl > public void onError ( Exception e ) { < nl > - Log . d ( TAG , " hideChat : error " ) ; < nl > + Log . d ( TAG , " archiveChat : error " ) ; < nl > reject ( e . getMessage ( ) ) ; < nl > } < nl > } ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 7677751 . . b776221 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 31 , 7 + 31 , 6 @ @ import im . actor . core . entity . WebActionDescriptor ; < nl > import im . actor . core . entity . content . FastThumb ; < nl > import im . actor . core . entity . content . JsonContent ; < nl > import im . actor . core . entity . content . internal . Sticker ; < nl > - import im . actor . core . entity . signals . AbsSignal ; < nl > import im . actor . core . i18n . I18nEngine ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . Modules ; < nl > @ @ - 43 , 8 + 42 , 6 @ @ import im . actor . core . events . PeerChatOpened ; < nl > import im . actor . core . events . PeerInfoClosed ; < nl > import im . actor . core . events . PeerInfoOpened ; < nl > import im . actor . core . events . UserVisible ; < nl > - import im . actor . core . modules . calls . CallManagerActor ; < nl > - import im . actor . core . modules . calls . CallsModule ; < nl > import im . actor . core . network . NetworkState ; < nl > import im . actor . core . util . ActorTrace ; < nl > import im . actor . core . util . Timing ; < nl > @ @ - 831 , 14 + 828 , 14 @ @ public class Messenger { < nl > } < nl > < nl > / * * < nl > - * Hide chat < nl > + * Archive chat < nl > * < nl > * @ param peer destination peer < nl > * @ return Command for execution < nl > * / < nl > - @ ObjectiveCName ( " hideChatCommandWithPeer : " ) < nl > - public Command < Boolean > hideChat ( Peer peer ) { < nl > - return modules . getMessagesModule ( ) . hideChat ( peer ) ; < nl > + @ ObjectiveCName ( " archiveChatCommandWithPeer : " ) < nl > + public Command < Boolean > archiveChat ( Peer peer ) { < nl > + return modules . getMessagesModule ( ) . archiveChat ( peer ) ; < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index ac09986 . . 7c6ab7d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 15 , 6 + 15 , 7 @ @ import im . actor . core . api . ApiOutPeer ; < nl > import im . actor . core . api . ApiPeer ; < nl > import im . actor . core . api . ApiPeerType ; < nl > import im . actor . core . api . base . SeqUpdate ; < nl > + import im . actor . core . api . rpc . RequestArchiveChat ; < nl > import im . actor . core . api . rpc . RequestClearChat ; < nl > import im . actor . core . api . rpc . RequestDeleteChat ; < nl > import im . actor . core . api . rpc . RequestFavouriteDialog ; < nl > @ @ - 25 , 6 + 26 , 7 @ @ import im . actor . core . api . rpc . RequestUnfavouriteDialog ; < nl > import im . actor . core . api . rpc . ResponseDialogsOrder ; < nl > import im . actor . core . api . rpc . ResponseReactionsResponse ; < nl > import im . actor . core . api . rpc . ResponseSeq ; < nl > + import im . actor . core . api . updates . UpdateChatArchive ; < nl > import im . actor . core . api . updates . UpdateChatClear ; < nl > import im . actor . core . api . updates . UpdateChatDelete ; < nl > import im . actor . core . api . updates . UpdateChatGroupsChanged ; < nl > @ @ - 837 , 11 + 839 , 12 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } ; < nl > } < nl > < nl > - public Command < Boolean > hideChat ( final Peer peer ) { < nl > + < nl > + public Command < Boolean > archiveChat ( final Peer peer ) { < nl > return new Command < Boolean > ( ) { < nl > @ Override < nl > public void start ( final CommandCallback < Boolean > callback ) { < nl > - ApiOutPeer outPeer ; < nl > + final ApiOutPeer outPeer ; < nl > if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > if ( user = = null ) { < nl > @ @ - 877 , 12 + 880 , 9 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } ) ; < nl > return ; < nl > } < nl > - request ( new RequestHideDialog ( outPeer ) , new RpcCallback < ResponseDialogsOrder > ( ) { < nl > + request ( new RequestArchiveChat ( outPeer ) , new RpcCallback < ResponseSeq > ( ) { < nl > @ Override < nl > - public void onResult ( ResponseDialogsOrder response ) { < nl > - updates ( ) . onSeqUpdateReceived ( response . getSeq ( ) , < nl > - response . getState ( ) , < nl > - new UpdateChatGroupsChanged ( response . getGroups ( ) ) ) ; < nl > + public void onResult ( ResponseSeq response ) { < nl > < nl > updates ( ) . executeAfter ( response . getSeq ( ) , < nl > new Runnable ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > index 915310e . . 5420cae 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > @ @ - 6 , 6 + 6 , 7 @ @ import java . util . List ; < nl > < nl > import im . actor . core . api . ApiDialogGroup ; < nl > import im . actor . core . api . ApiDialogShort ; < nl > + import im . actor . core . api . ApiPeer ; < nl > import im . actor . core . api . rpc . RequestLoadGroupedDialogs ; < nl > import im . actor . core . api . rpc . ResponseLoadGroupedDialogs ; < nl > import im . actor . core . entity . Avatar ; < nl > @ @ - 98 , 6 + 99 , 12 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > applyGroups ( groupedItems ) ; < nl > } < nl > < nl > + < nl > + private void onChatArchived ( ApiPeer peer ) { < nl > + < nl > + } < nl > + < nl > + < nl > / / Tools < nl > < nl > private void notifyVM ( Peer peer ) { < nl > @ @ - 189 , 6 + 196 , 8 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > } else if ( message instanceof GroupedDialogsChanged ) { < nl > GroupedDialogsChanged g = ( GroupedDialogsChanged ) message ; < nl > onGroupedChanged ( g . getItems ( ) ) ; < nl > + } else if ( message instanceof ChatArchived ) { < nl > + onChatArchived ( ( ( ChatArchived ) message ) . getPeer ( ) ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > @ @ - 238 , 4 + 247 , 15 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > return counter ; < nl > } < nl > } < nl > + < nl > + public static class ChatArchived { < nl > + ApiPeer peer ; < nl > + public ChatArchived ( ApiPeer peer ) { < nl > + this . peer = peer ; < nl > + } < nl > + < nl > + public ApiPeer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > index ddf6205 . . 5cb77f7 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > @ @ - 370 , 8 + 370 , 9 @ @ public class MessagesProcessor extends AbsModule { < nl > context ( ) . getAppStateModule ( ) . onCountersChanged ( counters ) ; < nl > } < nl > < nl > - public void onChatArchived ( Peer peer ) { < nl > - < nl > + public void onChatArchived ( ApiPeer peer ) { < nl > + context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) < nl > + . send ( new GroupedDialogsActor . ChatArchived ( peer ) ) ; < nl > } < nl > < nl > public void onChatRestored ( Peer peer ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > index e967de6 . . 1f75989 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > @ @ - 12 , 6 + 12 , 7 @ @ import im . actor . core . api . ApiGroup ; < nl > import im . actor . core . api . ApiPeerType ; < nl > import im . actor . core . api . ApiUser ; < nl > import im . actor . core . api . rpc . ResponseLoadDialogs ; < nl > + import im . actor . core . api . updates . UpdateChatArchive ; < nl > import im . actor . core . api . updates . UpdateChatClear ; < nl > import im . actor . core . api . updates . UpdateChatDelete ; < nl > import im . actor . core . api . updates . UpdateChatGroupsChanged ; < nl > @ @ - 337 , 6 + 338 , 8 @ @ public class UpdateProcessor extends AbsModule { < nl > messagesProcessor . onCountersChanged ( ( ( UpdateCountersChanged ) update ) . getCounters ( ) ) ; < nl > } else if ( update instanceof UpdateChatGroupsChanged ) { < nl > messagesProcessor . onChatGroupsChanged ( ( ( UpdateChatGroupsChanged ) update ) . getDialogs ( ) ) ; < nl > + } else if ( update instanceof UpdateChatArchive ) { < nl > + messagesProcessor . onChatArchived ( ( ( UpdateChatArchive ) update ) . getPeer ( ) ) ; < nl > } else if ( update instanceof UpdateReactionsUpdate ) { < nl > messagesProcessor . onReactionsChanged ( ( ( UpdateReactionsUpdate ) update ) . getPeer ( ) , < nl > ( ( UpdateReactionsUpdate ) update ) . getRid ( ) , ( ( UpdateReactionsUpdate ) update ) . getReactions ( ) ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java < nl > index b86f140 . . 8ce7757 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . core . api . base . SeqUpdate ; < nl > import im . actor . core . modules . events . NewSessionCreated ; < nl > import im . actor . core . modules . updates . SequenceActor ; < nl > import im . actor . core . modules . updates . internal . ExecuteAfter ; < nl > + import im . actor . core . modules . updates . internal . RelatedResponse ; < nl > import im . actor . core . network . parser . Update ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > @ @ - 67 , 6 + 68 , 19 @ @ public class Updates extends AbsModule implements BusSubscriber { < nl > updateActor . send ( new ExecuteAfter ( seq , runnable ) ) ; < nl > } < nl > < nl > + public void executeRelatedResponse ( List < ApiUser > users , List < ApiGroup > groups , Runnable runnable ) { < nl > + updateActor . send ( new RelatedResponse ( users , groups , runnable ) ) ; < nl > + } < nl > + < nl > + public void executeRelatedResponse ( List < ApiUser > users , List < ApiGroup > groups , final ActorRef ref , final Runnable runnable ) { < nl > + updateActor . send ( new RelatedResponse ( users , groups , new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + ref . send ( runnable ) ; < nl > + } < nl > + } ) ) ; < nl > + } < nl > + < nl > public void resetModule ( ) { < nl > / / TODO : Implement < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > index b6d002a . . 638a2bb 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > @ @ - 2 , 7 + 2 , 11 @ @ package im . actor . core . modules . internal . messages ; < nl > < nl > import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > + import java . util . List ; < nl > < nl > + import im . actor . core . api . ApiDialogGroup ; < nl > + import im . actor . core . api . rpc . RequestLoadGroupedDialogs ; < nl > + import im . actor . core . api . rpc . ResponseLoadGroupedDialogs ; < nl > import im . actor . core . entity . Avatar ; < nl > import im . actor . core . entity . DialogSpec ; < nl > import im . actor . core . entity . Group ; < nl > @ @ - 12 , 6 + 16 , 8 @ @ import im . actor . core . entity . User ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . internal . messages . entity . GroupedStorage ; < nl > import im . actor . core . modules . utils . ModuleActor ; < nl > + import im . actor . core . network . RpcCallback ; < nl > + import im . actor . core . network . RpcException ; < nl > import im . actor . core . viewmodel . DialogGroup ; < nl > import im . actor . core . viewmodel . DialogSmall ; < nl > import im . actor . core . viewmodel . DialogSpecVM ; < nl > @ @ - 21 , 7 + 27 , 9 @ @ import im . actor . runtime . mvvm . MVVMCollection ; < nl > public class GroupedDialogsActor extends ModuleActor { < nl > < nl > private static final String PREFERENCE _ GROUPED = " dialogs . grouped " ; < nl > + private static final String PREFERENCE _ GROUPED _ LOADED = " dialogs . grouped . loaded " ; < nl > < nl > + private boolean isLoaded = false ; < nl > private GroupedStorage storage ; < nl > private MVVMCollection < DialogSpec , DialogSpecVM > specs ; < nl > < nl > @ @ - 44 , 6 + 52 , 30 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > } < nl > } < nl > notifyVM ( ) ; < nl > + < nl > + isLoaded = preferences ( ) . getBool ( PREFERENCE _ GROUPED _ LOADED , false ) ; < nl > + < nl > + if ( ! isLoaded ) { < nl > + request ( new RequestLoadGroupedDialogs ( ) , new RpcCallback < ResponseLoadGroupedDialogs > ( ) { < nl > + @ Override < nl > + public void onResult ( final ResponseLoadGroupedDialogs response ) { < nl > + updates ( ) . executeRelatedResponse ( response . getUsers ( ) , response . getGroups ( ) , < nl > + self ( ) , < nl > + new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + List < ApiDialogGroup > dialogGroups = response . getDialogs ( ) ; < nl > + storage . getGroupPeers ( ) . clear ( ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( RpcException e ) { < nl > + / / Ignore < nl > + } < nl > + } ) ; < nl > + } < nl > } < nl > < nl > private void onNewMessage ( Peer peer , long sortDate , int counter ) { < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > index 6c8f986 . . df0f9a1 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > @ @ - 55 , 6 + 55 , 7 @ @ import im . actor . core . modules . updates . internal . GroupCreated ; < nl > import im . actor . core . modules . updates . internal . InternalUpdate ; < nl > import im . actor . core . modules . updates . internal . LoggedIn ; < nl > import im . actor . core . modules . updates . internal . MessagesHistoryLoaded ; < nl > + import im . actor . core . modules . updates . internal . RelatedResponse ; < nl > import im . actor . core . modules . updates . internal . UsersFounded ; < nl > import im . actor . core . network . parser . Update ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > @ @ - 132 , 6 + 133 , 10 @ @ public class UpdateProcessor extends AbsModule { < nl > created . getCallback ( ) . onResult ( created . getGroup ( ) . getId ( ) ) ; < nl > } < nl > } ) ; < nl > + } else if ( update instanceof RelatedResponse ) { < nl > + RelatedResponse relatedResponse = ( RelatedResponse ) update ; < nl > + applyRelated ( relatedResponse . getRelatedUsers ( ) , relatedResponse . getRelatedGroups ( ) , false ) ; < nl > + relatedResponse . getAfterApply ( ) . run ( ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / internal / RelatedResponse . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / internal / RelatedResponse . java < nl > new file mode 100644 < nl > index 0000000 . . a4280f9 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / internal / RelatedResponse . java < nl > @ @ - 0 , 0 + 1 , 32 @ @ < nl > + package im . actor . core . modules . updates . internal ; < nl > + < nl > + import java . util . ArrayList ; < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . api . ApiGroup ; < nl > + import im . actor . core . api . ApiUser ; < nl > + < nl > + public class RelatedResponse extends InternalUpdate { < nl > + < nl > + private List < ApiUser > relatedUsers ; < nl > + private List < ApiGroup > relatedGroups ; < nl > + private Runnable afterApply ; < nl > + < nl > + public RelatedResponse ( List < ApiUser > relatedUsers , List < ApiGroup > relatedGroups , Runnable afterApply ) { < nl > + this . relatedUsers = relatedUsers ; < nl > + this . relatedGroups = relatedGroups ; < nl > + this . afterApply = afterApply ; < nl > + } < nl > + < nl > + public List < ApiUser > getRelatedUsers ( ) { < nl > + return relatedUsers ; < nl > + } < nl > + < nl > + public List < ApiGroup > getRelatedGroups ( ) { < nl > + return relatedGroups ; < nl > + } < nl > + < nl > + public Runnable getAfterApply ( ) { < nl > + return afterApply ; < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 90c9a0d . . 1aeca3b 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 483 , 20 + 483 , 20 @ @ public class JsFacade implements Exportable { 
 } ) ; 
 } 
 
 - public JsPromise hideChat ( final JsPeer peer ) { 
 + public JsPromise archiveChat ( final JsPeer peer ) { 
 return JsPromise . create ( new JsPromiseExecutor ( ) { 
 @ Override 
 public void execute ( ) { 
 - messenger . hideChat ( peer . convert ( ) ) . start ( new CommandCallback < Boolean > ( ) { 
 + messenger . archiveChat ( peer . convert ( ) ) . start ( new CommandCallback < Boolean > ( ) { 
 @ Override 
 public void onResult ( Boolean res ) { 
 - Log . d ( TAG , " hideChat : result " ) ; 
 + Log . d ( TAG , " archiveChat : result " ) ; 
 resolve ( ) ; 
 } 
 
 @ Override 
 public void onError ( Exception e ) { 
 - Log . d ( TAG , " hideChat : error " ) ; 
 + Log . d ( TAG , " archiveChat : error " ) ; 
 reject ( e . getMessage ( ) ) ; 
 } 
 } ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 7677751 . . b776221 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 31 , 7 + 31 , 6 @ @ import im . actor . core . entity . WebActionDescriptor ; 
 import im . actor . core . entity . content . FastThumb ; 
 import im . actor . core . entity . content . JsonContent ; 
 import im . actor . core . entity . content . internal . Sticker ; 
 - import im . actor . core . entity . signals . AbsSignal ; 
 import im . actor . core . i18n . I18nEngine ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . Modules ; 
 @ @ - 43 , 8 + 42 , 6 @ @ import im . actor . core . events . PeerChatOpened ; 
 import im . actor . core . events . PeerInfoClosed ; 
 import im . actor . core . events . PeerInfoOpened ; 
 import im . actor . core . events . UserVisible ; 
 - import im . actor . core . modules . calls . CallManagerActor ; 
 - import im . actor . core . modules . calls . CallsModule ; 
 import im . actor . core . network . NetworkState ; 
 import im . actor . core . util . ActorTrace ; 
 import im . actor . core . util . Timing ; 
 @ @ - 831 , 14 + 828 , 14 @ @ public class Messenger { 
 } 
 
 / * * 
 - * Hide chat 
 + * Archive chat 
 * 
 * @ param peer destination peer 
 * @ return Command for execution 
 * / 
 - @ ObjectiveCName ( " hideChatCommandWithPeer : " ) 
 - public Command < Boolean > hideChat ( Peer peer ) { 
 - return modules . getMessagesModule ( ) . hideChat ( peer ) ; 
 + @ ObjectiveCName ( " archiveChatCommandWithPeer : " ) 
 + public Command < Boolean > archiveChat ( Peer peer ) { 
 + return modules . getMessagesModule ( ) . archiveChat ( peer ) ; 
 } 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index ac09986 . . 7c6ab7d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 15 , 6 + 15 , 7 @ @ import im . actor . core . api . ApiOutPeer ; 
 import im . actor . core . api . ApiPeer ; 
 import im . actor . core . api . ApiPeerType ; 
 import im . actor . core . api . base . SeqUpdate ; 
 + import im . actor . core . api . rpc . RequestArchiveChat ; 
 import im . actor . core . api . rpc . RequestClearChat ; 
 import im . actor . core . api . rpc . RequestDeleteChat ; 
 import im . actor . core . api . rpc . RequestFavouriteDialog ; 
 @ @ - 25 , 6 + 26 , 7 @ @ import im . actor . core . api . rpc . RequestUnfavouriteDialog ; 
 import im . actor . core . api . rpc . ResponseDialogsOrder ; 
 import im . actor . core . api . rpc . ResponseReactionsResponse ; 
 import im . actor . core . api . rpc . ResponseSeq ; 
 + import im . actor . core . api . updates . UpdateChatArchive ; 
 import im . actor . core . api . updates . UpdateChatClear ; 
 import im . actor . core . api . updates . UpdateChatDelete ; 
 import im . actor . core . api . updates . UpdateChatGroupsChanged ; 
 @ @ - 837 , 11 + 839 , 12 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } ; 
 } 
 
 - public Command < Boolean > hideChat ( final Peer peer ) { 
 + 
 + public Command < Boolean > archiveChat ( final Peer peer ) { 
 return new Command < Boolean > ( ) { 
 @ Override 
 public void start ( final CommandCallback < Boolean > callback ) { 
 - ApiOutPeer outPeer ; 
 + final ApiOutPeer outPeer ; 
 if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; 
 if ( user = = null ) { 
 @ @ - 877 , 12 + 880 , 9 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } ) ; 
 return ; 
 } 
 - request ( new RequestHideDialog ( outPeer ) , new RpcCallback < ResponseDialogsOrder > ( ) { 
 + request ( new RequestArchiveChat ( outPeer ) , new RpcCallback < ResponseSeq > ( ) { 
 @ Override 
 - public void onResult ( ResponseDialogsOrder response ) { 
 - updates ( ) . onSeqUpdateReceived ( response . getSeq ( ) , 
 - response . getState ( ) , 
 - new UpdateChatGroupsChanged ( response . getGroups ( ) ) ) ; 
 + public void onResult ( ResponseSeq response ) { 
 
 updates ( ) . executeAfter ( response . getSeq ( ) , 
 new Runnable ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 index 915310e . . 5420cae 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 @ @ - 6 , 6 + 6 , 7 @ @ import java . util . List ; 
 
 import im . actor . core . api . ApiDialogGroup ; 
 import im . actor . core . api . ApiDialogShort ; 
 + import im . actor . core . api . ApiPeer ; 
 import im . actor . core . api . rpc . RequestLoadGroupedDialogs ; 
 import im . actor . core . api . rpc . ResponseLoadGroupedDialogs ; 
 import im . actor . core . entity . Avatar ; 
 @ @ - 98 , 6 + 99 , 12 @ @ public class GroupedDialogsActor extends ModuleActor { 
 applyGroups ( groupedItems ) ; 
 } 
 
 + 
 + private void onChatArchived ( ApiPeer peer ) { 
 + 
 + } 
 + 
 + 
 / / Tools 
 
 private void notifyVM ( Peer peer ) { 
 @ @ - 189 , 6 + 196 , 8 @ @ public class GroupedDialogsActor extends ModuleActor { 
 } else if ( message instanceof GroupedDialogsChanged ) { 
 GroupedDialogsChanged g = ( GroupedDialogsChanged ) message ; 
 onGroupedChanged ( g . getItems ( ) ) ; 
 + } else if ( message instanceof ChatArchived ) { 
 + onChatArchived ( ( ( ChatArchived ) message ) . getPeer ( ) ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 @ @ - 238 , 4 + 247 , 15 @ @ public class GroupedDialogsActor extends ModuleActor { 
 return counter ; 
 } 
 } 
 + 
 + public static class ChatArchived { 
 + ApiPeer peer ; 
 + public ChatArchived ( ApiPeer peer ) { 
 + this . peer = peer ; 
 + } 
 + 
 + public ApiPeer getPeer ( ) { 
 + return peer ; 
 + } 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 index ddf6205 . . 5cb77f7 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 @ @ - 370 , 8 + 370 , 9 @ @ public class MessagesProcessor extends AbsModule { 
 context ( ) . getAppStateModule ( ) . onCountersChanged ( counters ) ; 
 } 
 
 - public void onChatArchived ( Peer peer ) { 
 - 
 + public void onChatArchived ( ApiPeer peer ) { 
 + context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) 
 + . send ( new GroupedDialogsActor . ChatArchived ( peer ) ) ; 
 } 
 
 public void onChatRestored ( Peer peer ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 index e967de6 . . 1f75989 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 @ @ - 12 , 6 + 12 , 7 @ @ import im . actor . core . api . ApiGroup ; 
 import im . actor . core . api . ApiPeerType ; 
 import im . actor . core . api . ApiUser ; 
 import im . actor . core . api . rpc . ResponseLoadDialogs ; 
 + import im . actor . core . api . updates . UpdateChatArchive ; 
 import im . actor . core . api . updates . UpdateChatClear ; 
 import im . actor . core . api . updates . UpdateChatDelete ; 
 import im . actor . core . api . updates . UpdateChatGroupsChanged ; 
 @ @ - 337 , 6 + 338 , 8 @ @ public class UpdateProcessor extends AbsModule { 
 messagesProcessor . onCountersChanged ( ( ( UpdateCountersChanged ) update ) . getCounters ( ) ) ; 
 } else if ( update instanceof UpdateChatGroupsChanged ) { 
 messagesProcessor . onChatGroupsChanged ( ( ( UpdateChatGroupsChanged ) update ) . getDialogs ( ) ) ; 
 + } else if ( update instanceof UpdateChatArchive ) { 
 + messagesProcessor . onChatArchived ( ( ( UpdateChatArchive ) update ) . getPeer ( ) ) ; 
 } else if ( update instanceof UpdateReactionsUpdate ) { 
 messagesProcessor . onReactionsChanged ( ( ( UpdateReactionsUpdate ) update ) . getPeer ( ) , 
 ( ( UpdateReactionsUpdate ) update ) . getRid ( ) , ( ( UpdateReactionsUpdate ) update ) . getReactions ( ) ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java 
 index b86f140 . . 8ce7757 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Updates . java 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . core . api . base . SeqUpdate ; 
 import im . actor . core . modules . events . NewSessionCreated ; 
 import im . actor . core . modules . updates . SequenceActor ; 
 import im . actor . core . modules . updates . internal . ExecuteAfter ; 
 + import im . actor . core . modules . updates . internal . RelatedResponse ; 
 import im . actor . core . network . parser . Update ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 @ @ - 67 , 6 + 68 , 19 @ @ public class Updates extends AbsModule implements BusSubscriber { 
 updateActor . send ( new ExecuteAfter ( seq , runnable ) ) ; 
 } 
 
 + public void executeRelatedResponse ( List < ApiUser > users , List < ApiGroup > groups , Runnable runnable ) { 
 + updateActor . send ( new RelatedResponse ( users , groups , runnable ) ) ; 
 + } 
 + 
 + public void executeRelatedResponse ( List < ApiUser > users , List < ApiGroup > groups , final ActorRef ref , final Runnable runnable ) { 
 + updateActor . send ( new RelatedResponse ( users , groups , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + ref . send ( runnable ) ; 
 + } 
 + } ) ) ; 
 + } 
 + 
 public void resetModule ( ) { 
 / / TODO : Implement 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 index b6d002a . . 638a2bb 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 @ @ - 2 , 7 + 2 , 11 @ @ package im . actor . core . modules . internal . messages ; 
 
 import java . io . IOException ; 
 import java . util . ArrayList ; 
 + import java . util . List ; 
 
 + import im . actor . core . api . ApiDialogGroup ; 
 + import im . actor . core . api . rpc . RequestLoadGroupedDialogs ; 
 + import im . actor . core . api . rpc . ResponseLoadGroupedDialogs ; 
 import im . actor . core . entity . Avatar ; 
 import im . actor . core . entity . DialogSpec ; 
 import im . actor . core . entity . Group ; 
 @ @ - 12 , 6 + 16 , 8 @ @ import im . actor . core . entity . User ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . internal . messages . entity . GroupedStorage ; 
 import im . actor . core . modules . utils . ModuleActor ; 
 + import im . actor . core . network . RpcCallback ; 
 + import im . actor . core . network . RpcException ; 
 import im . actor . core . viewmodel . DialogGroup ; 
 import im . actor . core . viewmodel . DialogSmall ; 
 import im . actor . core . viewmodel . DialogSpecVM ; 
 @ @ - 21 , 7 + 27 , 9 @ @ import im . actor . runtime . mvvm . MVVMCollection ; 
 public class GroupedDialogsActor extends ModuleActor { 
 
 private static final String PREFERENCE _ GROUPED = " dialogs . grouped " ; 
 + private static final String PREFERENCE _ GROUPED _ LOADED = " dialogs . grouped . loaded " ; 
 
 + private boolean isLoaded = false ; 
 private GroupedStorage storage ; 
 private MVVMCollection < DialogSpec , DialogSpecVM > specs ; 
 
 @ @ - 44 , 6 + 52 , 30 @ @ public class GroupedDialogsActor extends ModuleActor { 
 } 
 } 
 notifyVM ( ) ; 
 + 
 + isLoaded = preferences ( ) . getBool ( PREFERENCE _ GROUPED _ LOADED , false ) ; 
 + 
 + if ( ! isLoaded ) { 
 + request ( new RequestLoadGroupedDialogs ( ) , new RpcCallback < ResponseLoadGroupedDialogs > ( ) { 
 + @ Override 
 + public void onResult ( final ResponseLoadGroupedDialogs response ) { 
 + updates ( ) . executeRelatedResponse ( response . getUsers ( ) , response . getGroups ( ) , 
 + self ( ) , 
 + new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + List < ApiDialogGroup > dialogGroups = response . getDialogs ( ) ; 
 + storage . getGroupPeers ( ) . clear ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( RpcException e ) { 
 + / / Ignore 
 + } 
 + } ) ; 
 + } 
 } 
 
 private void onNewMessage ( Peer peer , long sortDate , int counter ) { 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 index 6c8f986 . . df0f9a1 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 @ @ - 55 , 6 + 55 , 7 @ @ import im . actor . core . modules . updates . internal . GroupCreated ; 
 import im . actor . core . modules . updates . internal . InternalUpdate ; 
 import im . actor . core . modules . updates . internal . LoggedIn ; 
 import im . actor . core . modules . updates . internal . MessagesHistoryLoaded ; 
 + import im . actor . core . modules . updates . internal . RelatedResponse ; 
 import im . actor . core . modules . updates . internal . UsersFounded ; 
 import im . actor . core . network . parser . Update ; 
 import im . actor . core . viewmodel . UserVM ; 
 @ @ - 132 , 6 + 133 , 10 @ @ public class UpdateProcessor extends AbsModule { 
 created . getCallback ( ) . onResult ( created . getGroup ( ) . getId ( ) ) ; 
 } 
 } ) ; 
 + } else if ( update instanceof RelatedResponse ) { 
 + RelatedResponse relatedResponse = ( RelatedResponse ) update ; 
 + applyRelated ( relatedResponse . getRelatedUsers ( ) , relatedResponse . getRelatedGroups ( ) , false ) ; 
 + relatedResponse . getAfterApply ( ) . run ( ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / internal / RelatedResponse . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / internal / RelatedResponse . java 
 new file mode 100644 
 index 0000000 . . a4280f9 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / internal / RelatedResponse . java 
 @ @ - 0 , 0 + 1 , 32 @ @ 
 + package im . actor . core . modules . updates . internal ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import im . actor . core . api . ApiGroup ; 
 + import im . actor . core . api . ApiUser ; 
 + 
 + public class RelatedResponse extends InternalUpdate { 
 + 
 + private List < ApiUser > relatedUsers ; 
 + private List < ApiGroup > relatedGroups ; 
 + private Runnable afterApply ; 
 + 
 + public RelatedResponse ( List < ApiUser > relatedUsers , List < ApiGroup > relatedGroups , Runnable afterApply ) { 
 + this . relatedUsers = relatedUsers ; 
 + this . relatedGroups = relatedGroups ; 
 + this . afterApply = afterApply ; 
 + } 
 + 
 + public List < ApiUser > getRelatedUsers ( ) { 
 + return relatedUsers ; 
 + } 
 + 
 + public List < ApiGroup > getRelatedGroups ( ) { 
 + return relatedGroups ; 
 + } 
 + 
 + public Runnable getAfterApply ( ) { 
 + return afterApply ; 
 + } 
 + }
