BLEU SCORE: 0.3281829856080946

TEST MSG: fix ( IOS ) : add unblock button
GENERATED MSG: fix ( IOS ) : fix promise handling while block / unblock

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > index 810b88f . . cdd7481 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > @ @ - 151 , 6 + 151 , 8 @ @ < nl > < nl > " ProfileBlockContact " = " Block Contact " ; < nl > < nl > + " ProfileUnblockContact " = " Unblock Contact " ; < nl > + < nl > " ProfileRename " = " Rename Contact " ; < nl > < nl > " ProfileRenameMessage " = " You can rename contacts to organize your contact list . Changes will only be visible to you . " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > index 5fb0dfb . . 4a34243 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > @ @ - 241 , 19 + 241 , 26 @ @ class AAUserViewController : AAContentTableController { < nl > } < nl > < nl > / / Block Contact < nl > + < nl > section { ( s ) - > ( ) in < nl > < nl > / / Block Contact < nl > self . isContactRow = s . common { ( r ) - > ( ) in < nl > r . bindAction = { ( r ) - > ( ) in < nl > - if self . user . isContactModel ( ) . get ( ) . booleanValue ( ) { < nl > + if self . user . isBlockedModel ( ) . get ( ) . booleanValue ( ) { < nl > r . content = AALocalized ( " ProfileBlockContact " ) < nl > - r . style = . Action < nl > + } else { < nl > + r . content = AALocalized ( " ProfileUnblockContact " ) < nl > } < nl > + r . style = . Action < nl > } < nl > r . selectAction = { ( ) - > Bool in < nl > + if self . user . isBlockedModel ( ) . get ( ) . booleanValue ( ) { < nl > self . executePromise ( Actor . blockUser ( jint ( self . uid ) ) ) < nl > - < nl > + } else { < nl > + self . executePromise ( Actor . unblockUser ( jint ( self . uid ) ) ) < nl > + } < nl > + r . reload ( ) < nl > return true < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / xcshareddata / xcschemes / ActorApp . xcscheme b / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / xcshareddata / xcschemes / ActorApp . xcscheme < nl > index b950b30 . . 253f3eb 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / xcshareddata / xcschemes / ActorApp . xcscheme < nl > + + + b / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / xcshareddata / xcschemes / ActorApp . xcscheme < nl > @ @ - 69 , 6 + 69 , 11 @ @ < nl > < / EnvironmentVariable > < nl > < / EnvironmentVariables > < nl > < AdditionalOptions > < nl > + < AdditionalOption < nl > + key = " NSZombieEnabled " < nl > + value = " YES " < nl > + isEnabled = " YES " > < nl > + < / AdditionalOption > < nl > < / AdditionalOptions > < nl > < / LaunchAction > < nl > < ProfileAction < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Executions . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Executions . swift < nl > index fd9ca30 . . eceedc8 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Executions . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Executions . swift 	 < nl > @ @ - 35 , 15 + 35 , 25 @ @ public class AAMenuBuilder { < nl > public class AAExecutions { < nl > < nl > public class func execute ( promise : ARPromise ) { < nl > - < nl > + executePromise ( promise ) < nl > } < nl > < nl > public class func execute ( command : ACCommand ) { < nl > execute ( command , successBlock : nil , failureBlock : nil ) < nl > } < nl > < nl > + public class func executePromise ( promice : ARPromise ) { < nl > + promice . startUserAction ( ) < nl > + } < nl > + < nl > + public class func executePromise ( promice : ARPromise , successBlock : ( ( val : Any ? ) - > Void ) ? , failureBlock : ( ( val : Any ? ) - > Void ) ? ) { < nl > + promice . startUserAction ( ) < nl > + promice . then { result in < nl > + successBlock ! ( val : result ) < nl > + } < nl > + } < nl > + < nl > public class func execute ( command : ACCommand , type : AAExecutionType = . Normal , ignore : [ String ] = [ ] , successBlock : ( ( val : Any ? ) - > Void ) ? , failureBlock : ( ( val : Any ? ) - > Void ) ? ) { < nl > - < nl > var hud : MBProgressHUD ? < nl > if type ! = . Hidden { < nl > hud = showProgress ( ) < nl > @ @ - 171 , 6 + 181 , 10 @ @ public extension UIViewController { < nl > AAExecutions . execute ( promise ) < nl > } < nl > < nl > + public func executePromise ( promise : ARPromise , successBlock : ( ( val : Any ? ) - > Void ) ? , failureBlock : ( ( val : Any ? ) - > Void ) ? ) { < nl > + AAExecutions . executePromise ( promise , successBlock : successBlock , failureBlock : failureBlock ) < nl > + } < nl > + < nl > public func execute ( command : ACCommand , successBlock : ( ( val : Any ? ) - > Void ) ? , failureBlock : ( ( val : Any ? ) - > Void ) ? ) { < nl > AAExecutions . execute ( command , successBlock : successBlock , failureBlock : failureBlock ) < nl > } < nl > @ @ - 188 , 7 + 202 , 6 @ @ public extension UIViewController { < nl > public func executeSafeOnlySuccess ( command : ACCommand , successBlock : ( ( val : Any ? ) - > Void ) ? ) { < nl > AAExecutions . execute ( command , type : . Safe , ignore : [ ] , successBlock : successBlock , failureBlock : nil ) < nl > } < nl > - < nl > < nl > public func executeHidden ( command : ACCommand , successBlock : ( ( val : Any ? ) - > Void ) ? = nil ) { < nl > AAExecutions . execute ( command , type : . Hidden , successBlock : successBlock , failureBlock : nil ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > index 4a34243 . . 8243674 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift < nl > @ @ - 200 , 7 + 200 , 6 @ @ class AAUserViewController : AAContentTableController { < nl > } < nl > < nl > if ! self . isBot { < nl > - < nl > / / Edit contact : Renaming < nl > s . action ( " ProfileRename " ) { ( r ) - > ( ) in < nl > r . selectAction = { ( ) - > Bool in < nl > @ @ - 215 , 7 + 214 , 6 @ @ class AAUserViewController : AAContentTableController { < nl > if d . length = = 0 { < nl > return < nl > } < nl > - < nl > c . executeSafeOnlySuccess ( Actor . editNameCommandWithUid ( jint ( self . uid ) , withName : d ) ! , successBlock : { ( val ) - > Void in < nl > c . dismiss ( ) < nl > } ) < nl > @ @ - 235 , 34 + 233 , 37 @ @ class AAUserViewController : AAContentTableController { < nl > return true < nl > } < nl > } < nl > - < nl > } < nl > - < nl > } < nl > < nl > / / Block Contact < nl > - < nl > - section { ( s ) - > ( ) in < nl > - < nl > - / / Block Contact < nl > - self . isContactRow = s . common { ( r ) - > ( ) in < nl > - r . bindAction = { ( r ) - > ( ) in < nl > - if self . user . isBlockedModel ( ) . get ( ) . booleanValue ( ) { < nl > - r . content = AALocalized ( " ProfileBlockContact " ) < nl > - } else { < nl > - r . content = AALocalized ( " ProfileUnblockContact " ) < nl > + if ! self . isBot { < nl > + section { ( s ) - > ( ) in < nl > + s . common { ( r ) - > ( ) in < nl > + r . bindAction = { ( r ) - > ( ) in < nl > + if ! self . user . isBlockedModel ( ) . get ( ) . booleanValue ( ) { < nl > + r . content = AALocalized ( " ProfileBlockContact " ) < nl > + } else { < nl > + r . content = AALocalized ( " ProfileUnblockContact " ) < nl > + } < nl > + r . style = . Action < nl > } < nl > - r . style = . Action < nl > - } < nl > - r . selectAction = { ( ) - > Bool in < nl > - if self . user . isBlockedModel ( ) . get ( ) . booleanValue ( ) { < nl > - self . executePromise ( Actor . blockUser ( jint ( self . uid ) ) ) < nl > - } else { < nl > - self . executePromise ( Actor . unblockUser ( jint ( self . uid ) ) ) < nl > + < nl > + r . selectAction = { ( ) - > Bool in < nl > + if ! self . user . isBlockedModel ( ) . get ( ) . booleanValue ( ) { < nl > + self . executePromise ( Actor . blockUser ( jint ( self . uid ) ) , successBlock : { success in < nl > + r . reload ( ) < nl > + } , failureBlock : nil ) < nl > + } else { < nl > + self . executePromise ( Actor . unblockUser ( jint ( self . uid ) ) , successBlock : { success in < nl > + r . reload ( ) < nl > + } , failureBlock : nil ) < nl > + } < nl > + r . reload ( ) < nl > + return true < nl > } < nl > - r . reload ( ) < nl > - return true < nl > } < nl > + < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Promises . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Promises . swift < nl > index bb19391 . . 9539f94 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Promises . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Promises . swift < nl > @ @ - 57 , 10 + 57 , 12 @ @ class PromiseConsumer < T > : NSObject , ARConsumer { < nl > init ( closure : ( T ! ) - > ( ) ) { < nl > self . closure = closure < nl > } < nl > - < nl > - < nl > + < nl > func applyWithId ( t : AnyObject ! ) { < nl > - closure ( t as ! T ) < nl > + let nilResponce = " ok " < nl > + if ( t = = nil ) { < nl > + closure ( nilResponce as ! T ) < nl > + } < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 index 810b88f . . cdd7481 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 @ @ - 151 , 6 + 151 , 8 @ @ 
 
 " ProfileBlockContact " = " Block Contact " ; 
 
 + " ProfileUnblockContact " = " Unblock Contact " ; 
 + 
 " ProfileRename " = " Rename Contact " ; 
 
 " ProfileRenameMessage " = " You can rename contacts to organize your contact list . Changes will only be visible to you . " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 index 5fb0dfb . . 4a34243 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 @ @ - 241 , 19 + 241 , 26 @ @ class AAUserViewController : AAContentTableController { 
 } 
 
 / / Block Contact 
 + 
 section { ( s ) - > ( ) in 
 
 / / Block Contact 
 self . isContactRow = s . common { ( r ) - > ( ) in 
 r . bindAction = { ( r ) - > ( ) in 
 - if self . user . isContactModel ( ) . get ( ) . booleanValue ( ) { 
 + if self . user . isBlockedModel ( ) . get ( ) . booleanValue ( ) { 
 r . content = AALocalized ( " ProfileBlockContact " ) 
 - r . style = . Action 
 + } else { 
 + r . content = AALocalized ( " ProfileUnblockContact " ) 
 } 
 + r . style = . Action 
 } 
 r . selectAction = { ( ) - > Bool in 
 + if self . user . isBlockedModel ( ) . get ( ) . booleanValue ( ) { 
 self . executePromise ( Actor . blockUser ( jint ( self . uid ) ) ) 
 - 
 + } else { 
 + self . executePromise ( Actor . unblockUser ( jint ( self . uid ) ) ) 
 + } 
 + r . reload ( ) 
 return true 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / xcshareddata / xcschemes / ActorApp . xcscheme b / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / xcshareddata / xcschemes / ActorApp . xcscheme 
 index b950b30 . . 253f3eb 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / xcshareddata / xcschemes / ActorApp . xcscheme 
 + + + b / actor - sdk / sdk - core - ios / ActorApp . xcodeproj / xcshareddata / xcschemes / ActorApp . xcscheme 
 @ @ - 69 , 6 + 69 , 11 @ @ 
 < / EnvironmentVariable > 
 < / EnvironmentVariables > 
 < AdditionalOptions > 
 + < AdditionalOption 
 + key = " NSZombieEnabled " 
 + value = " YES " 
 + isEnabled = " YES " > 
 + < / AdditionalOption > 
 < / AdditionalOptions > 
 < / LaunchAction > 
 < ProfileAction 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Executions . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Executions . swift 
 index fd9ca30 . . eceedc8 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Executions . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / Executions . swift 	 
 @ @ - 35 , 15 + 35 , 25 @ @ public class AAMenuBuilder { 
 public class AAExecutions { 
 
 public class func execute ( promise : ARPromise ) { 
 - 
 + executePromise ( promise ) 
 } 
 
 public class func execute ( command : ACCommand ) { 
 execute ( command , successBlock : nil , failureBlock : nil ) 
 } 
 
 + public class func executePromise ( promice : ARPromise ) { 
 + promice . startUserAction ( ) 
 + } 
 + 
 + public class func executePromise ( promice : ARPromise , successBlock : ( ( val : Any ? ) - > Void ) ? , failureBlock : ( ( val : Any ? ) - > Void ) ? ) { 
 + promice . startUserAction ( ) 
 + promice . then { result in 
 + successBlock ! ( val : result ) 
 + } 
 + } 
 + 
 public class func execute ( command : ACCommand , type : AAExecutionType = . Normal , ignore : [ String ] = [ ] , successBlock : ( ( val : Any ? ) - > Void ) ? , failureBlock : ( ( val : Any ? ) - > Void ) ? ) { 
 - 
 var hud : MBProgressHUD ? 
 if type ! = . Hidden { 
 hud = showProgress ( ) 
 @ @ - 171 , 6 + 181 , 10 @ @ public extension UIViewController { 
 AAExecutions . execute ( promise ) 
 } 
 
 + public func executePromise ( promise : ARPromise , successBlock : ( ( val : Any ? ) - > Void ) ? , failureBlock : ( ( val : Any ? ) - > Void ) ? ) { 
 + AAExecutions . executePromise ( promise , successBlock : successBlock , failureBlock : failureBlock ) 
 + } 
 + 
 public func execute ( command : ACCommand , successBlock : ( ( val : Any ? ) - > Void ) ? , failureBlock : ( ( val : Any ? ) - > Void ) ? ) { 
 AAExecutions . execute ( command , successBlock : successBlock , failureBlock : failureBlock ) 
 } 
 @ @ - 188 , 7 + 202 , 6 @ @ public extension UIViewController { 
 public func executeSafeOnlySuccess ( command : ACCommand , successBlock : ( ( val : Any ? ) - > Void ) ? ) { 
 AAExecutions . execute ( command , type : . Safe , ignore : [ ] , successBlock : successBlock , failureBlock : nil ) 
 } 
 - 
 
 public func executeHidden ( command : ACCommand , successBlock : ( ( val : Any ? ) - > Void ) ? = nil ) { 
 AAExecutions . execute ( command , type : . Hidden , successBlock : successBlock , failureBlock : nil ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 index 4a34243 . . 8243674 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / User / AAUserViewController . swift 
 @ @ - 200 , 7 + 200 , 6 @ @ class AAUserViewController : AAContentTableController { 
 } 
 
 if ! self . isBot { 
 - 
 / / Edit contact : Renaming 
 s . action ( " ProfileRename " ) { ( r ) - > ( ) in 
 r . selectAction = { ( ) - > Bool in 
 @ @ - 215 , 7 + 214 , 6 @ @ class AAUserViewController : AAContentTableController { 
 if d . length = = 0 { 
 return 
 } 
 - 
 c . executeSafeOnlySuccess ( Actor . editNameCommandWithUid ( jint ( self . uid ) , withName : d ) ! , successBlock : { ( val ) - > Void in 
 c . dismiss ( ) 
 } ) 
 @ @ - 235 , 34 + 233 , 37 @ @ class AAUserViewController : AAContentTableController { 
 return true 
 } 
 } 
 - 
 } 
 - 
 } 
 
 / / Block Contact 
 - 
 - section { ( s ) - > ( ) in 
 - 
 - / / Block Contact 
 - self . isContactRow = s . common { ( r ) - > ( ) in 
 - r . bindAction = { ( r ) - > ( ) in 
 - if self . user . isBlockedModel ( ) . get ( ) . booleanValue ( ) { 
 - r . content = AALocalized ( " ProfileBlockContact " ) 
 - } else { 
 - r . content = AALocalized ( " ProfileUnblockContact " ) 
 + if ! self . isBot { 
 + section { ( s ) - > ( ) in 
 + s . common { ( r ) - > ( ) in 
 + r . bindAction = { ( r ) - > ( ) in 
 + if ! self . user . isBlockedModel ( ) . get ( ) . booleanValue ( ) { 
 + r . content = AALocalized ( " ProfileBlockContact " ) 
 + } else { 
 + r . content = AALocalized ( " ProfileUnblockContact " ) 
 + } 
 + r . style = . Action 
 } 
 - r . style = . Action 
 - } 
 - r . selectAction = { ( ) - > Bool in 
 - if self . user . isBlockedModel ( ) . get ( ) . booleanValue ( ) { 
 - self . executePromise ( Actor . blockUser ( jint ( self . uid ) ) ) 
 - } else { 
 - self . executePromise ( Actor . unblockUser ( jint ( self . uid ) ) ) 
 + 
 + r . selectAction = { ( ) - > Bool in 
 + if ! self . user . isBlockedModel ( ) . get ( ) . booleanValue ( ) { 
 + self . executePromise ( Actor . blockUser ( jint ( self . uid ) ) , successBlock : { success in 
 + r . reload ( ) 
 + } , failureBlock : nil ) 
 + } else { 
 + self . executePromise ( Actor . unblockUser ( jint ( self . uid ) ) , successBlock : { success in 
 + r . reload ( ) 
 + } , failureBlock : nil ) 
 + } 
 + r . reload ( ) 
 + return true 
 } 
 - r . reload ( ) 
 - return true 
 } 
 + 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Promises . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Promises . swift 
 index bb19391 . . 9539f94 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Promises . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Promises . swift 
 @ @ - 57 , 10 + 57 , 12 @ @ class PromiseConsumer < T > : NSObject , ARConsumer { 
 init ( closure : ( T ! ) - > ( ) ) { 
 self . closure = closure 
 } 
 - 
 - 
 + 
 func applyWithId ( t : AnyObject ! ) { 
 - closure ( t as ! T ) 
 + let nilResponce = " ok " 
 + if ( t = = nil ) { 
 + closure ( nilResponce as ! T ) 
 + } 
 } 
 }
