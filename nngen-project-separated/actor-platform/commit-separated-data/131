BLEU SCORE: 0.2824099048856541

TEST MSG: refactor ( rpc ) : remove deprecated PubGroup service
GENERATED MSG: feat ( rpc ) : add friends count to PubGroup

TEST DIFF (one line): diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / GroupUserRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / GroupUserRepo . scala < nl > index f195941 . . ad018f0 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / GroupUserRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / GroupUserRepo . scala < nl > @ @ - 56 , 14 + 56 , 6 @ @ object GroupUserRepo { < nl > def find ( groupId : Int , userId : Int ) = < nl > byPKC ( ( groupId , userId ) ) . result . headOption < nl > < nl > - / / TODO : remove < nl > - def exists ( groupId : Int , userId : Int ) = < nl > - byPKC . applied ( ( groupId , userId ) ) . exists . result < nl > - < nl > - / / TODO : revisit later < nl > - def findUserIds ( groupId : Int ) = < nl > - userIdByGroupIdC ( groupId ) . result < nl > - < nl > @ deprecated ( " Duplication of event - sourced groups logic " , " 2016 - 06 - 05 " ) < nl > def delete ( groupId : Int , userId : Int ) : FixedSqlAction [ Int , NoStream , Write ] = < nl > byPKC . applied ( ( groupId , userId ) ) . delete < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala < nl > deleted file mode 100644 < nl > index 4a81f7e . . 0000000 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala < nl > + + + / dev / null < nl > @ @ - 1 , 46 + 0 , 0 @ @ < nl > - package im . actor . server . api . rpc . service . pubgroups < nl > - < nl > - import im . actor . server . group . GroupUtils < nl > - import im . actor . server . persist . { AvatarDataRepo , GroupRepo , GroupUserRepo } < nl > - < nl > - import scala . concurrent . { ExecutionContext , Future } < nl > - import akka . actor . ActorSystem < nl > - import slick . driver . PostgresDriver . api . _ < nl > - import im . actor . api . rpc . _ < nl > - import im . actor . api . rpc . pubgroups . { ApiPublicGroup , PubgroupsService , ResponseGetPublicGroups } < nl > - import im . actor . server . ApiConversions < nl > - import im . actor . server . db . DbExtension < nl > - import im . actor . server . file . ImageUtils < nl > - import im . actor . server . model . Group < nl > - import im . actor . server . persist . contact . UserContactRepo < nl > - < nl > - class PubgroupsServiceImpl ( implicit actorSystem : ActorSystem ) extends PubgroupsService { < nl > - import ApiConversions . _ < nl > - import ImageUtils . _ < nl > - < nl > - override implicit val ec : ExecutionContext = actorSystem . dispatcher < nl > - < nl > - override def doHandleGetPublicGroups ( clientData : ClientData ) : Future [ HandlerResult [ ResponseGetPublicGroups ] ] = { < nl > - authorized ( clientData ) { implicit client ⇒ < nl > - val action = for { < nl > - groups ← GroupRepo . findPublic < nl > - pubGroupStructs ← DBIO . sequence ( groups map ( g ⇒ getPubgroupStruct ( g , client . userId ) ) ) < nl > - sorted = pubGroupStructs . sortWith ( ( g1 , g2 ) ⇒ g1 . friendsCount > = g2 . friendsCount & & g1 . membersCount > = g2 . membersCount ) < nl > - } yield Ok ( ResponseGetPublicGroups ( sorted . toVector ) ) < nl > - DbExtension ( actorSystem ) . db . run ( action ) < nl > - } < nl > - } < nl > - < nl > - def getPubgroupStruct ( group : Group , userId : Int ) ( implicit ec : ExecutionContext ) : DBIO [ ApiPublicGroup ] = { < nl > - for { < nl > - membersIds ← GroupUserRepo . findUserIds ( group . id ) < nl > - userContactsIds ← UserContactRepo . findNotDeletedIds ( userId ) < nl > - friendsCount = ( membersIds intersect userContactsIds ) . length < nl > - groupAvatarModelOpt ← AvatarDataRepo . findByGroupId ( group . id ) < nl > - } yield { < nl > - ApiPublicGroup ( group . id , group . accessHash , group . title , membersIds . length , friendsCount , group . about . getOrElse ( " " ) , groupAvatarModelOpt map getAvatar ) < nl > - } < nl > - } < nl > - < nl > - } < nl > - < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 230caa9 . . 10a1a5c 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 22 , 7 + 22 , 6 @ @ import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsService < nl > import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl < nl > import im . actor . server . api . rpc . service . privacy . PrivacyServiceImpl < nl > import im . actor . server . api . rpc . service . profile . ProfileServiceImpl < nl > - import im . actor . server . api . rpc . service . pubgroups . PubgroupsServiceImpl < nl > import im . actor . server . api . rpc . service . push . PushServiceImpl < nl > import im . actor . server . api . rpc . service . sequence . { SequenceServiceConfig , SequenceServiceImpl } < nl > import im . actor . server . api . rpc . service . stickers . StickersServiceImpl < nl > @ @ - 195 , 9 + 194 , 6 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > system . log . debug ( " Starting GroupsService " ) < nl > val groupsService = new GroupsServiceImpl ( groupInviteConfig ) < nl > < nl > - system . log . debug ( " Starting PubgroupsService " ) < nl > - val pubgroupsService = new PubgroupsServiceImpl < nl > - < nl > system . log . debug ( " Starting SequenceService " ) < nl > val sequenceService = new SequenceServiceImpl ( sequenceConfig ) < nl > < nl > @ @ - 251 , 7 + 247 , 6 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > contactsService , < nl > messagingService , < nl > groupsService , < nl > - pubgroupsService , < nl > sequenceService , < nl > weakService , < nl > usersService , < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / PubgroupsServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / PubgroupsServiceSpec . scala < nl > deleted file mode 100644 < nl > index ae1f6ac . . 0000000 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / PubgroupsServiceSpec . scala < nl > + + + / dev / null < nl > @ @ - 1 , 129 + 0 , 0 @ @ < nl > - package im . actor . server . api . rpc . service < nl > - < nl > - import im . actor . api . rpc . _ < nl > - import im . actor . api . rpc . pubgroups . ResponseGetPublicGroups < nl > - import im . actor . server . _ < nl > - import im . actor . server . acl . ACLUtils < nl > - import im . actor . server . acl . ACLUtils . userAccessHash < nl > - import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl < nl > - import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } < nl > - import im . actor . server . api . rpc . service . pubgroups . PubgroupsServiceImpl < nl > - import im . actor . server . api . rpc . service . sequence . { SequenceServiceConfig , SequenceServiceImpl } < nl > - import org . scalatest . Inside . _ < nl > - < nl > - final class PubgroupsServiceSpec < nl > - extends BaseAppSuite < nl > - with GroupsServiceHelpers < nl > - with MessageParsing < nl > - with ImplicitSessionRegion < nl > - with ImplicitAuthService { < nl > - behavior of " PubgroupsService " < nl > - < nl > - it should " include number of friends in PubGroup " in pendingUntilFixed ( t . e1 ) < nl > - < nl > - it should " list all public groups with descrition " in pendingUntilFixed ( t . e2 ) < nl > - < nl > - it should " sort pubgroups by friends count and members count " in pendingUntilFixed ( t . e3 ) < nl > - < nl > - it should " show number of members and friends to any non - member " in pendingUntilFixed ( t . e4 ) < nl > - < nl > - val groupInviteConfig = GroupInviteConfig ( " http : / / actor . im " ) < nl > - val sequenceConfig = SequenceServiceConfig . load ( ) . toOption . get < nl > - < nl > - val sequenceService = new SequenceServiceImpl ( sequenceConfig ) < nl > - val messagingService = messaging . MessagingServiceImpl ( ) < nl > - implicit val groupService = new GroupsServiceImpl ( groupInviteConfig ) < nl > - val pubGroupService = new PubgroupsServiceImpl < nl > - val contactService = new ContactsServiceImpl ( ) < nl > - < nl > - object t { < nl > - val ( user1 , authId1 , authSid1 , _ ) = createUser ( ) < nl > - val ( user2 , _ , _ , _ ) = createUser ( ) < nl > - val ( user3 , _ , _ , _ ) = createUser ( ) < nl > - val ( user4 , _ , _ , _ ) = createUser ( ) < nl > - val ( user5 , _ , _ , _ ) = createUser ( ) < nl > - val ( user6 , _ , _ , _ ) = createUser ( ) < nl > - val ( user7 , _ , _ , _ ) = createUser ( ) < nl > - val ( user8 , authId8 , authSid8 , _ ) = createUser ( ) < nl > - < nl > - val sessionId = createSessionId ( ) < nl > - implicit val clientData = ClientData ( authId1 , sessionId , Some ( AuthData ( user1 . id , authSid1 , 42 ) ) ) < nl > - < nl > - val descriptions = List ( " Marvelous group for android developers group " , " Group for iOS users " , " You know it " ) < nl > - < nl > - val androidGroup = createPubGroup ( " Android group " , descriptions ( 0 ) , Set ( user2 . id , user4 . id ) ) . groupPeer < nl > - val iosGroup = createPubGroup ( " iOS group " , descriptions ( 1 ) , Set ( user2 . id , user3 . id , user4 . id , user5 . id , user6 . id , user7 . id ) ) . groupPeer < nl > - val scalaGroup = createPubGroup ( " Scala group " , descriptions ( 2 ) , Set ( user2 . id , user5 . id , user6 . id , user7 . id , user8 . id ) ) . groupPeer < nl > - val floodGroup = createPubGroup ( " Flood group " , descriptions ( 2 ) , Set ( user2 . id , user3 . id , user5 . id , user6 . id , user7 . id ) ) . groupPeer < nl > - < nl > - def e1 ( ) = { < nl > - whenReady ( contactService . handleAddContact ( user2 . id , userAccessHash ( clientData . authId , user2 . id , getUserModel ( user2 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) < nl > - whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ < nl > - inside ( resp ) { < nl > - case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ < nl > - val group = groups . find ( _ . id = = androidGroup . groupId ) < nl > - group shouldBe defined < nl > - group . get . friendsCount shouldEqual 1 < nl > - } < nl > - } < nl > - < nl > - whenReady ( contactService . handleAddContact ( user3 . id , userAccessHash ( clientData . authId , user3 . id , getUserModel ( user3 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) / / not in group . should not be in friends < nl > - whenReady ( contactService . handleAddContact ( user4 . id , userAccessHash ( clientData . authId , user4 . id , getUserModel ( user4 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) < nl > - < nl > - whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ < nl > - inside ( resp ) { < nl > - case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ < nl > - val group = groups . find ( _ . id = = androidGroup . groupId ) < nl > - group shouldBe defined < nl > - group . get . friendsCount shouldEqual 2 < nl > - } < nl > - } < nl > - } < nl > - < nl > - def e2 ( ) = { < nl > - whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ < nl > - inside ( resp ) { < nl > - case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ < nl > - groups should have length 4 < nl > - groups . map ( _ . description ) . toSet shouldEqual descriptions . toSet < nl > - } < nl > - } < nl > - } < nl > - < nl > - def e3 ( ) = { < nl > - / * * < nl > - * Sorting according number of friends and members < nl > - * ios - friends = 3 ; members = 7 < nl > - * flood - friends = 2 ; members = 6 < nl > - * android - friends = 2 ; members = 3 < nl > - * scala - friends = 1 ; members = 6 < nl > - * / < nl > - whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ < nl > - inside ( resp ) { < nl > - case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ < nl > - groups . map ( _ . id ) shouldEqual List ( iosGroup , floodGroup , androidGroup , scalaGroup ) . map ( _ . groupId ) < nl > - } < nl > - } < nl > - } < nl > - < nl > - def e4 ( ) = { < nl > - implicit val clientData = ClientData ( authId8 , sessionId , Some ( AuthData ( user8 . id , authSid8 , 42 ) ) ) < nl > - whenReady ( contactService . handleAddContact ( user2 . id , userAccessHash ( clientData . authId , user2 . id , getUserModel ( user2 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) < nl > - whenReady ( contactService . handleAddContact ( user3 . id , userAccessHash ( clientData . authId , user3 . id , getUserModel ( user3 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) < nl > - whenReady ( contactService . handleAddContact ( user4 . id , userAccessHash ( clientData . authId , user4 . id , getUserModel ( user4 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) < nl > - < nl > - whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ < nl > - inside ( resp ) { < nl > - case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ < nl > - groups . find ( _ . id = = floodGroup . groupId ) foreach { g ⇒ < nl > - g . friendsCount shouldEqual 2 < nl > - g . membersCount shouldEqual 6 < nl > - } < nl > - / / sorting should be the same as in previous example cause we got same contacts < nl > - groups . map ( _ . id ) shouldEqual List ( iosGroup , floodGroup , androidGroup , scalaGroup ) . map ( _ . groupId ) < nl > - } < nl > - } < nl > - } < nl > - } < nl > - < nl > - }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala < nl > index 044b55b . . 96d6e41 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala < nl > @ @ - 40 , 10 + 40 , 10 @ @ object UserContact { < nl > byPKNotDeleted ( ownerUserId , contactUserId ) . result . headOption < nl > < nl > def findIds ( ownerUserId : Int , contactUserIds : Set [ Int ] ) = < nl > - contacts . filter ( c ⇒ c . isDeleted = = = false & & c . ownerUserId = = = ownerUserId ) . filter ( _ . contactUserId inSet contactUserIds ) . map ( _ . contactUserId ) . result < nl > + byOwnerUserIdNotDeleted ( ownerUserId ) . filter ( _ . contactUserId inSet contactUserIds ) . map ( _ . contactUserId ) . result < nl > < nl > - def findIds _ all ( ownerUserId : Int ) = < nl > - contacts . filter ( _ . ownerUserId = = = ownerUserId ) . map ( _ . contactUserId ) . result < nl > + def findNotDeletedIds ( ownerUserId : Int ) = < nl > + byOwnerUserIdNotDeleted ( ownerUserId ) . map ( _ . contactUserId ) . result < nl > < nl > def findName ( ownerUserId : Int , contactUserId : Int ) = < nl > byPKNotDeleted ( ownerUserId , contactUserId ) . map ( _ . name ) . result < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala < nl > index 69e461a . . 2d3b24b 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala < nl > @ @ - 193 , 7 + 193 , 7 @ @ class ContactsServiceImpl ( < nl > / / finding emails of users that are registered < nl > / / but don ' t contain in user ' s contact list < nl > emailModels ← persist . UserEmail . findByEmails ( filteredEmails ) < nl > - userContacts ← persist . contact . UserContact . findIds _ all ( user . id ) < nl > + userContacts ← persist . contact . UserContact . findContactIdsAll ( user . id ) < nl > newEmailContacts = emailModels . filter ( e ⇒ ! userContacts . contains ( e . userId ) ) < nl > < nl > / / registering UserEmailContacts < nl > @ @ - 223 , 7 + 223 , 7 @ @ class ContactsServiceImpl ( < nl > < nl > val f = for { < nl > userPhones ← persist . UserPhone . findByNumbers ( phoneNumbers ) < nl > - ignoredContactsIds ← persist . contact . UserContact . findIds _ all ( user . id ) < nl > + ignoredContactsIds ← persist . contact . UserContact . findContactIdsAll ( user . id ) < nl > uniquePhones = userPhones . filter ( p ⇒ ! ignoredContactsIds . contains ( p . userId ) ) < nl > usersPhones ← DBIO . sequence ( uniquePhones map ( p ⇒ persist . User . find ( p . userId ) . headOption map ( _ . map ( ( _ , p . number ) ) ) ) ) map ( _ . flatten ) / / TODO : # perf lots of sql queries < nl > } yield { < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala < nl > index ec22f2c . . f07397f 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala < nl > @ @ - 32 , 8 + 32 , 14 @ @ class PubgroupsServiceImpl ( bucketName : String , groupInviteConfig : GroupInviteCon < nl > val authorizedAction = requireAuth ( clientData ) map { implicit client ⇒ < nl > for { < nl > groups ← persist . Group . findPublic < nl > - groupStructs ← DBIO . sequence ( groups . view map GroupUtils . getGroupStructUnsafe ) < nl > - } yield Ok ( ResponseGetPublicGroups ( groupStructs . toVector map GroupUtils . toPublicGroup ) ) < nl > + pubGroupStructs ← DBIO . sequence ( groups . view map { group ⇒ < nl > + for { < nl > + groupStruct ← GroupUtils . getGroupStructUnsafe ( group ) < nl > + contactIds ← persist . contact . UserContact . findNotDeletedIds ( client . userId ) < nl > + friendCount = ( groupStruct . members . map ( _ . userId ) intersect contactIds ) . length < nl > + } yield GroupUtils . toPublicGroup ( groupStruct , friendCount ) < nl > + } ) < nl > + } yield Ok ( ResponseGetPublicGroups ( pubGroupStructs . toVector ) ) < nl > } < nl > < nl > db . run ( toDBIOAction ( authorizedAction ) ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala < nl > index 6a59731 . . 4b21256 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala < nl > @ @ - 26 , 4 + 26 , 19 @ @ trait GroupsServiceHelpers { < nl > val result = Await . result ( service . handleCreateGroup ( Random . nextLong ( ) , title , userPeers . toVector ) , 5 . seconds ) < nl > result . toOption . get < nl > } < nl > + < nl > + protected def createPubGroup ( title : String , userIds : Set [ Int ] ) ( < nl > + implicit < nl > + clientData : ClientData , < nl > + db : Database , < nl > + service : GroupsService , < nl > + actorSystem : ActorSystem < nl > + ) : ResponseCreateGroup = { < nl > + val resp = createGroup ( title , userIds ) < nl > + Await . result ( db . run ( persist . Group . groups < nl > + . filter ( _ . id = = = resp . groupPeer . groupId ) < nl > + . map ( _ . isPublic ) < nl > + . update ( true ) ) , 5 . seconds ) < nl > + resp < nl > + } < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / PubgroupsServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / PubgroupsServiceSpec . scala < nl > new file mode 100644 < nl > index 0000000 . . a413c7d < nl > - - - / dev / null < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / PubgroupsServiceSpec . scala < nl > @ @ - 0 , 0 + 1 , 109 @ @ < nl > + package im . actor . server . api . rpc . service < nl > + < nl > + import com . amazonaws . auth . EnvironmentVariableCredentialsProvider < nl > + import com . amazonaws . services . s3 . transfer . TransferManager < nl > + import org . scalatest . Inside . _ < nl > + < nl > + import im . actor . api . rpc . _ < nl > + import im . actor . api . rpc . pubgroups . ResponseGetPublicGroups < nl > + import im . actor . server . api . rpc . service . auth . AuthSmsConfig < nl > + import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl < nl > + import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } < nl > + import im . actor . server . api . rpc . service . pubgroups . PubgroupsServiceImpl < nl > + import im . actor . server . api . rpc . service . sequence . SequenceServiceImpl < nl > + import im . actor . server . oauth . { GmailProvider , OAuth2GmailConfig } < nl > + import im . actor . server . peermanagers . { GroupPeerManager , PrivatePeerManager } < nl > + import im . actor . server . presences . { GroupPresenceManager , PresenceManager } < nl > + import im . actor . server . social . SocialManager < nl > + import im . actor . server . util . ACLUtils < nl > + import im . actor . server . { BaseAppSuite , MessageParsing } < nl > + < nl > + class PubgroupsServiceSpec extends BaseAppSuite with GroupsServiceHelpers with MessageParsing { < nl > + behavior of " PubgroupsService " < nl > + < nl > + it should " include number of friends in PubGroup " in e1 < nl > + < nl > + it should " list all public groups " in e2 < nl > + < nl > + implicit val sessionRegion = buildSessionRegionProxy ( ) < nl > + < nl > + implicit val seqUpdManagerRegion = buildSeqUpdManagerRegion ( ) < nl > + implicit val socialManagerRegion = SocialManager . startRegion ( ) < nl > + implicit val presenceManagerRegion = PresenceManager . startRegion ( ) < nl > + implicit val groupPresenceManagerRegion = GroupPresenceManager . startRegion ( ) < nl > + implicit val groupPeerManagerRegion = GroupPeerManager . startRegion ( ) < nl > + < nl > + val bucketName = " actor - uploads - test " < nl > + val awsCredentials = new EnvironmentVariableCredentialsProvider ( ) < nl > + implicit val transferManager = new TransferManager ( awsCredentials ) < nl > + val groupInviteConfig = GroupInviteConfig ( " http : / / actor . im " ) < nl > + < nl > + implicit val privatePeerManagerRegion = PrivatePeerManager . startRegion ( ) < nl > + < nl > + val sequenceService = new SequenceServiceImpl < nl > + val messagingService = messaging . MessagingServiceImpl ( mediator ) < nl > + implicit val groupService = new GroupsServiceImpl ( bucketName , groupInviteConfig ) < nl > + val oauth2GmailConfig = OAuth2GmailConfig . fromConfig ( system . settings . config . getConfig ( " oauth . v2 . gmail " ) ) < nl > + implicit val oauth2Service = new GmailProvider ( oauth2GmailConfig ) < nl > + implicit val authSmsConfig = AuthSmsConfig . fromConfig ( system . settings . config . getConfig ( " auth " ) ) < nl > + implicit val authService = buildAuthService ( ) < nl > + val pubGroupService = new PubgroupsServiceImpl ( bucketName , groupInviteConfig ) < nl > + val contactService = new ContactsServiceImpl ( ) < nl > + < nl > + def e1 ( ) = { < nl > + val ( user1 , authId1 , _ ) = createUser ( ) < nl > + val ( user2 , authId2 , _ ) = createUser ( ) < nl > + val ( user3 , _ , _ ) = createUser ( ) < nl > + val ( user4 , _ , _ ) = createUser ( ) < nl > + < nl > + val sessionId = createSessionId ( ) < nl > + implicit val clientData = ClientData ( authId1 , sessionId , Some ( user1 . id ) ) < nl > + < nl > + createPubGroup ( " Android group " , Set ( user2 . id , user4 . id ) ) . groupPeer < nl > + < nl > + whenReady ( contactService . handleAddContact ( user2 . id , < nl > + ACLUtils . userAccessHash ( clientData . authId , user2 . id , getUserModel ( user2 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) < nl > + whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ < nl > + inside ( resp ) { < nl > + case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ < nl > + groups should have length 1 < nl > + groups . head . friendsCount shouldEqual 1 < nl > + } < nl > + } < nl > + < nl > + whenReady ( contactService . handleAddContact ( user3 . id , < nl > + ACLUtils . userAccessHash ( clientData . authId , user3 . id , getUserModel ( user3 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) / / not in group . should not be in friends < nl > + whenReady ( contactService . handleAddContact ( user4 . id , < nl > + ACLUtils . userAccessHash ( clientData . authId , user4 . id , getUserModel ( user4 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) < nl > + < nl > + whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ < nl > + inside ( resp ) { < nl > + case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ < nl > + groups should have length 1 < nl > + groups . head . friendsCount shouldEqual 2 < nl > + } < nl > + } < nl > + } < nl > + < nl > + def e2 ( ) = { < nl > + val ( user1 , authId1 , _ ) = createUser ( ) < nl > + val ( user2 , _ , _ ) = createUser ( ) < nl > + val ( user3 , _ , _ ) = createUser ( ) < nl > + val ( user4 , _ , _ ) = createUser ( ) < nl > + < nl > + val sessionId = createSessionId ( ) < nl > + < nl > + implicit val clientData = ClientData ( authId1 , sessionId , Some ( user1 . id ) ) < nl > + < nl > + createPubGroup ( " Android group " , Set ( user2 . id , user4 . id ) ) . groupPeer < nl > + createPubGroup ( " Scala group " , Set ( user2 . id , user3 . id ) ) . groupPeer < nl > + < nl > + whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ < nl > + inside ( resp ) { < nl > + case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ < nl > + groups should have length 3 / / 2 here , 1 from previous spec < nl > + } < nl > + } < nl > + } < nl > + < nl > + } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > index 51a8b1a . . 17bf36a 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > @ @ - 13 , 7 + 13 , 6 @ @ import akka . util . ByteString < nl > import com . amazonaws . auth . EnvironmentVariableCredentialsProvider < nl > import com . amazonaws . services . s3 . transfer . TransferManager < nl > import com . github . dwhjames . awswrap . s3 . AmazonS3ScalaClient < nl > - import org . specs2 . execute . PendingUntilFixed < nl > import play . api . libs . json . _ < nl > < nl > import im . actor . api . rpc . ClientData < nl > @ @ - 29 , 7 + 28 , 7 @ @ import im . actor . server . social . SocialManager < nl > import im . actor . server . util . { ImageUtils , FileUtils , ACLUtils } < nl > import im . actor . server . { BaseAppSuite , models , persist } < nl > < nl > - class HttpApiFrontendSpec extends BaseAppSuite with GroupsServiceHelpers with PendingUntilFixed { < nl > + class HttpApiFrontendSpec extends BaseAppSuite with GroupsServiceHelpers { < nl > behavior of " HttpApiFrontend " < nl > < nl > " Webhooks handler " should " respond with OK to webhooks text message " in t . textMessage ( ) < nl > diff - - git a / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala b / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala < nl > index 3412ace . . b904f72 100644 < nl > - - - a / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala < nl > + + + b / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala < nl > @ @ - 42 , 8 + 42 , 8 @ @ object GroupUtils { < nl > } < nl > } < nl > < nl > - def toPublicGroup ( group : Group ) : PublicGroup = { < nl > - PublicGroup ( group . id , group . accessHash , group . title , group . members . length , 0 , " " , group . avatar ) < nl > + def toPublicGroup ( group : Group , friendsCount : Int ) : PublicGroup = { < nl > + PublicGroup ( group . id , group . accessHash , group . title , group . members . length , friendsCount , " " , group . avatar ) < nl > } < nl > < nl > def getGroupStructUnsafe ( group : models . Group ) ( implicit clientData : AuthorizedClientData , ec : ExecutionContext ) : DBIOAction [ Group , NoStream , Read with Read ] = {

TEST DIFF:
diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / GroupUserRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / GroupUserRepo . scala 
 index f195941 . . ad018f0 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / GroupUserRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / GroupUserRepo . scala 
 @ @ - 56 , 14 + 56 , 6 @ @ object GroupUserRepo { 
 def find ( groupId : Int , userId : Int ) = 
 byPKC ( ( groupId , userId ) ) . result . headOption 
 
 - / / TODO : remove 
 - def exists ( groupId : Int , userId : Int ) = 
 - byPKC . applied ( ( groupId , userId ) ) . exists . result 
 - 
 - / / TODO : revisit later 
 - def findUserIds ( groupId : Int ) = 
 - userIdByGroupIdC ( groupId ) . result 
 - 
 @ deprecated ( " Duplication of event - sourced groups logic " , " 2016 - 06 - 05 " ) 
 def delete ( groupId : Int , userId : Int ) : FixedSqlAction [ Int , NoStream , Write ] = 
 byPKC . applied ( ( groupId , userId ) ) . delete 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala 
 deleted file mode 100644 
 index 4a81f7e . . 0000000 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala 
 + + + / dev / null 
 @ @ - 1 , 46 + 0 , 0 @ @ 
 - package im . actor . server . api . rpc . service . pubgroups 
 - 
 - import im . actor . server . group . GroupUtils 
 - import im . actor . server . persist . { AvatarDataRepo , GroupRepo , GroupUserRepo } 
 - 
 - import scala . concurrent . { ExecutionContext , Future } 
 - import akka . actor . ActorSystem 
 - import slick . driver . PostgresDriver . api . _ 
 - import im . actor . api . rpc . _ 
 - import im . actor . api . rpc . pubgroups . { ApiPublicGroup , PubgroupsService , ResponseGetPublicGroups } 
 - import im . actor . server . ApiConversions 
 - import im . actor . server . db . DbExtension 
 - import im . actor . server . file . ImageUtils 
 - import im . actor . server . model . Group 
 - import im . actor . server . persist . contact . UserContactRepo 
 - 
 - class PubgroupsServiceImpl ( implicit actorSystem : ActorSystem ) extends PubgroupsService { 
 - import ApiConversions . _ 
 - import ImageUtils . _ 
 - 
 - override implicit val ec : ExecutionContext = actorSystem . dispatcher 
 - 
 - override def doHandleGetPublicGroups ( clientData : ClientData ) : Future [ HandlerResult [ ResponseGetPublicGroups ] ] = { 
 - authorized ( clientData ) { implicit client ⇒ 
 - val action = for { 
 - groups ← GroupRepo . findPublic 
 - pubGroupStructs ← DBIO . sequence ( groups map ( g ⇒ getPubgroupStruct ( g , client . userId ) ) ) 
 - sorted = pubGroupStructs . sortWith ( ( g1 , g2 ) ⇒ g1 . friendsCount > = g2 . friendsCount & & g1 . membersCount > = g2 . membersCount ) 
 - } yield Ok ( ResponseGetPublicGroups ( sorted . toVector ) ) 
 - DbExtension ( actorSystem ) . db . run ( action ) 
 - } 
 - } 
 - 
 - def getPubgroupStruct ( group : Group , userId : Int ) ( implicit ec : ExecutionContext ) : DBIO [ ApiPublicGroup ] = { 
 - for { 
 - membersIds ← GroupUserRepo . findUserIds ( group . id ) 
 - userContactsIds ← UserContactRepo . findNotDeletedIds ( userId ) 
 - friendsCount = ( membersIds intersect userContactsIds ) . length 
 - groupAvatarModelOpt ← AvatarDataRepo . findByGroupId ( group . id ) 
 - } yield { 
 - ApiPublicGroup ( group . id , group . accessHash , group . title , membersIds . length , friendsCount , group . about . getOrElse ( " " ) , groupAvatarModelOpt map getAvatar ) 
 - } 
 - } 
 - 
 - } 
 - 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 230caa9 . . 10a1a5c 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 22 , 7 + 22 , 6 @ @ import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsService 
 import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl 
 import im . actor . server . api . rpc . service . privacy . PrivacyServiceImpl 
 import im . actor . server . api . rpc . service . profile . ProfileServiceImpl 
 - import im . actor . server . api . rpc . service . pubgroups . PubgroupsServiceImpl 
 import im . actor . server . api . rpc . service . push . PushServiceImpl 
 import im . actor . server . api . rpc . service . sequence . { SequenceServiceConfig , SequenceServiceImpl } 
 import im . actor . server . api . rpc . service . stickers . StickersServiceImpl 
 @ @ - 195 , 9 + 194 , 6 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 system . log . debug ( " Starting GroupsService " ) 
 val groupsService = new GroupsServiceImpl ( groupInviteConfig ) 
 
 - system . log . debug ( " Starting PubgroupsService " ) 
 - val pubgroupsService = new PubgroupsServiceImpl 
 - 
 system . log . debug ( " Starting SequenceService " ) 
 val sequenceService = new SequenceServiceImpl ( sequenceConfig ) 
 
 @ @ - 251 , 7 + 247 , 6 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 contactsService , 
 messagingService , 
 groupsService , 
 - pubgroupsService , 
 sequenceService , 
 weakService , 
 usersService , 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / PubgroupsServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / PubgroupsServiceSpec . scala 
 deleted file mode 100644 
 index ae1f6ac . . 0000000 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / PubgroupsServiceSpec . scala 
 + + + / dev / null 
 @ @ - 1 , 129 + 0 , 0 @ @ 
 - package im . actor . server . api . rpc . service 
 - 
 - import im . actor . api . rpc . _ 
 - import im . actor . api . rpc . pubgroups . ResponseGetPublicGroups 
 - import im . actor . server . _ 
 - import im . actor . server . acl . ACLUtils 
 - import im . actor . server . acl . ACLUtils . userAccessHash 
 - import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl 
 - import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } 
 - import im . actor . server . api . rpc . service . pubgroups . PubgroupsServiceImpl 
 - import im . actor . server . api . rpc . service . sequence . { SequenceServiceConfig , SequenceServiceImpl } 
 - import org . scalatest . Inside . _ 
 - 
 - final class PubgroupsServiceSpec 
 - extends BaseAppSuite 
 - with GroupsServiceHelpers 
 - with MessageParsing 
 - with ImplicitSessionRegion 
 - with ImplicitAuthService { 
 - behavior of " PubgroupsService " 
 - 
 - it should " include number of friends in PubGroup " in pendingUntilFixed ( t . e1 ) 
 - 
 - it should " list all public groups with descrition " in pendingUntilFixed ( t . e2 ) 
 - 
 - it should " sort pubgroups by friends count and members count " in pendingUntilFixed ( t . e3 ) 
 - 
 - it should " show number of members and friends to any non - member " in pendingUntilFixed ( t . e4 ) 
 - 
 - val groupInviteConfig = GroupInviteConfig ( " http : / / actor . im " ) 
 - val sequenceConfig = SequenceServiceConfig . load ( ) . toOption . get 
 - 
 - val sequenceService = new SequenceServiceImpl ( sequenceConfig ) 
 - val messagingService = messaging . MessagingServiceImpl ( ) 
 - implicit val groupService = new GroupsServiceImpl ( groupInviteConfig ) 
 - val pubGroupService = new PubgroupsServiceImpl 
 - val contactService = new ContactsServiceImpl ( ) 
 - 
 - object t { 
 - val ( user1 , authId1 , authSid1 , _ ) = createUser ( ) 
 - val ( user2 , _ , _ , _ ) = createUser ( ) 
 - val ( user3 , _ , _ , _ ) = createUser ( ) 
 - val ( user4 , _ , _ , _ ) = createUser ( ) 
 - val ( user5 , _ , _ , _ ) = createUser ( ) 
 - val ( user6 , _ , _ , _ ) = createUser ( ) 
 - val ( user7 , _ , _ , _ ) = createUser ( ) 
 - val ( user8 , authId8 , authSid8 , _ ) = createUser ( ) 
 - 
 - val sessionId = createSessionId ( ) 
 - implicit val clientData = ClientData ( authId1 , sessionId , Some ( AuthData ( user1 . id , authSid1 , 42 ) ) ) 
 - 
 - val descriptions = List ( " Marvelous group for android developers group " , " Group for iOS users " , " You know it " ) 
 - 
 - val androidGroup = createPubGroup ( " Android group " , descriptions ( 0 ) , Set ( user2 . id , user4 . id ) ) . groupPeer 
 - val iosGroup = createPubGroup ( " iOS group " , descriptions ( 1 ) , Set ( user2 . id , user3 . id , user4 . id , user5 . id , user6 . id , user7 . id ) ) . groupPeer 
 - val scalaGroup = createPubGroup ( " Scala group " , descriptions ( 2 ) , Set ( user2 . id , user5 . id , user6 . id , user7 . id , user8 . id ) ) . groupPeer 
 - val floodGroup = createPubGroup ( " Flood group " , descriptions ( 2 ) , Set ( user2 . id , user3 . id , user5 . id , user6 . id , user7 . id ) ) . groupPeer 
 - 
 - def e1 ( ) = { 
 - whenReady ( contactService . handleAddContact ( user2 . id , userAccessHash ( clientData . authId , user2 . id , getUserModel ( user2 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) 
 - whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ 
 - inside ( resp ) { 
 - case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ 
 - val group = groups . find ( _ . id = = androidGroup . groupId ) 
 - group shouldBe defined 
 - group . get . friendsCount shouldEqual 1 
 - } 
 - } 
 - 
 - whenReady ( contactService . handleAddContact ( user3 . id , userAccessHash ( clientData . authId , user3 . id , getUserModel ( user3 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) / / not in group . should not be in friends 
 - whenReady ( contactService . handleAddContact ( user4 . id , userAccessHash ( clientData . authId , user4 . id , getUserModel ( user4 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) 
 - 
 - whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ 
 - inside ( resp ) { 
 - case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ 
 - val group = groups . find ( _ . id = = androidGroup . groupId ) 
 - group shouldBe defined 
 - group . get . friendsCount shouldEqual 2 
 - } 
 - } 
 - } 
 - 
 - def e2 ( ) = { 
 - whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ 
 - inside ( resp ) { 
 - case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ 
 - groups should have length 4 
 - groups . map ( _ . description ) . toSet shouldEqual descriptions . toSet 
 - } 
 - } 
 - } 
 - 
 - def e3 ( ) = { 
 - / * * 
 - * Sorting according number of friends and members 
 - * ios - friends = 3 ; members = 7 
 - * flood - friends = 2 ; members = 6 
 - * android - friends = 2 ; members = 3 
 - * scala - friends = 1 ; members = 6 
 - * / 
 - whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ 
 - inside ( resp ) { 
 - case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ 
 - groups . map ( _ . id ) shouldEqual List ( iosGroup , floodGroup , androidGroup , scalaGroup ) . map ( _ . groupId ) 
 - } 
 - } 
 - } 
 - 
 - def e4 ( ) = { 
 - implicit val clientData = ClientData ( authId8 , sessionId , Some ( AuthData ( user8 . id , authSid8 , 42 ) ) ) 
 - whenReady ( contactService . handleAddContact ( user2 . id , userAccessHash ( clientData . authId , user2 . id , getUserModel ( user2 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) 
 - whenReady ( contactService . handleAddContact ( user3 . id , userAccessHash ( clientData . authId , user3 . id , getUserModel ( user3 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) 
 - whenReady ( contactService . handleAddContact ( user4 . id , userAccessHash ( clientData . authId , user4 . id , getUserModel ( user4 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) 
 - 
 - whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ 
 - inside ( resp ) { 
 - case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ 
 - groups . find ( _ . id = = floodGroup . groupId ) foreach { g ⇒ 
 - g . friendsCount shouldEqual 2 
 - g . membersCount shouldEqual 6 
 - } 
 - / / sorting should be the same as in previous example cause we got same contacts 
 - groups . map ( _ . id ) shouldEqual List ( iosGroup , floodGroup , androidGroup , scalaGroup ) . map ( _ . groupId ) 
 - } 
 - } 
 - } 
 - } 
 - 
 - }

NEAREST DIFF:
diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala 
 index 044b55b . . 96d6e41 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / contact / UserContact . scala 
 @ @ - 40 , 10 + 40 , 10 @ @ object UserContact { 
 byPKNotDeleted ( ownerUserId , contactUserId ) . result . headOption 
 
 def findIds ( ownerUserId : Int , contactUserIds : Set [ Int ] ) = 
 - contacts . filter ( c ⇒ c . isDeleted = = = false & & c . ownerUserId = = = ownerUserId ) . filter ( _ . contactUserId inSet contactUserIds ) . map ( _ . contactUserId ) . result 
 + byOwnerUserIdNotDeleted ( ownerUserId ) . filter ( _ . contactUserId inSet contactUserIds ) . map ( _ . contactUserId ) . result 
 
 - def findIds _ all ( ownerUserId : Int ) = 
 - contacts . filter ( _ . ownerUserId = = = ownerUserId ) . map ( _ . contactUserId ) . result 
 + def findNotDeletedIds ( ownerUserId : Int ) = 
 + byOwnerUserIdNotDeleted ( ownerUserId ) . map ( _ . contactUserId ) . result 
 
 def findName ( ownerUserId : Int , contactUserId : Int ) = 
 byPKNotDeleted ( ownerUserId , contactUserId ) . map ( _ . name ) . result 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala 
 index 69e461a . . 2d3b24b 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala 
 @ @ - 193 , 7 + 193 , 7 @ @ class ContactsServiceImpl ( 
 / / finding emails of users that are registered 
 / / but don ' t contain in user ' s contact list 
 emailModels ← persist . UserEmail . findByEmails ( filteredEmails ) 
 - userContacts ← persist . contact . UserContact . findIds _ all ( user . id ) 
 + userContacts ← persist . contact . UserContact . findContactIdsAll ( user . id ) 
 newEmailContacts = emailModels . filter ( e ⇒ ! userContacts . contains ( e . userId ) ) 
 
 / / registering UserEmailContacts 
 @ @ - 223 , 7 + 223 , 7 @ @ class ContactsServiceImpl ( 
 
 val f = for { 
 userPhones ← persist . UserPhone . findByNumbers ( phoneNumbers ) 
 - ignoredContactsIds ← persist . contact . UserContact . findIds _ all ( user . id ) 
 + ignoredContactsIds ← persist . contact . UserContact . findContactIdsAll ( user . id ) 
 uniquePhones = userPhones . filter ( p ⇒ ! ignoredContactsIds . contains ( p . userId ) ) 
 usersPhones ← DBIO . sequence ( uniquePhones map ( p ⇒ persist . User . find ( p . userId ) . headOption map ( _ . map ( ( _ , p . number ) ) ) ) ) map ( _ . flatten ) / / TODO : # perf lots of sql queries 
 } yield { 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala 
 index ec22f2c . . f07397f 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala 
 @ @ - 32 , 8 + 32 , 14 @ @ class PubgroupsServiceImpl ( bucketName : String , groupInviteConfig : GroupInviteCon 
 val authorizedAction = requireAuth ( clientData ) map { implicit client ⇒ 
 for { 
 groups ← persist . Group . findPublic 
 - groupStructs ← DBIO . sequence ( groups . view map GroupUtils . getGroupStructUnsafe ) 
 - } yield Ok ( ResponseGetPublicGroups ( groupStructs . toVector map GroupUtils . toPublicGroup ) ) 
 + pubGroupStructs ← DBIO . sequence ( groups . view map { group ⇒ 
 + for { 
 + groupStruct ← GroupUtils . getGroupStructUnsafe ( group ) 
 + contactIds ← persist . contact . UserContact . findNotDeletedIds ( client . userId ) 
 + friendCount = ( groupStruct . members . map ( _ . userId ) intersect contactIds ) . length 
 + } yield GroupUtils . toPublicGroup ( groupStruct , friendCount ) 
 + } ) 
 + } yield Ok ( ResponseGetPublicGroups ( pubGroupStructs . toVector ) ) 
 } 
 
 db . run ( toDBIOAction ( authorizedAction ) ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala 
 index 6a59731 . . 4b21256 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala 
 @ @ - 26 , 4 + 26 , 19 @ @ trait GroupsServiceHelpers { 
 val result = Await . result ( service . handleCreateGroup ( Random . nextLong ( ) , title , userPeers . toVector ) , 5 . seconds ) 
 result . toOption . get 
 } 
 + 
 + protected def createPubGroup ( title : String , userIds : Set [ Int ] ) ( 
 + implicit 
 + clientData : ClientData , 
 + db : Database , 
 + service : GroupsService , 
 + actorSystem : ActorSystem 
 + ) : ResponseCreateGroup = { 
 + val resp = createGroup ( title , userIds ) 
 + Await . result ( db . run ( persist . Group . groups 
 + . filter ( _ . id = = = resp . groupPeer . groupId ) 
 + . map ( _ . isPublic ) 
 + . update ( true ) ) , 5 . seconds ) 
 + resp 
 + } 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / PubgroupsServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / PubgroupsServiceSpec . scala 
 new file mode 100644 
 index 0000000 . . a413c7d 
 - - - / dev / null 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / PubgroupsServiceSpec . scala 
 @ @ - 0 , 0 + 1 , 109 @ @ 
 + package im . actor . server . api . rpc . service 
 + 
 + import com . amazonaws . auth . EnvironmentVariableCredentialsProvider 
 + import com . amazonaws . services . s3 . transfer . TransferManager 
 + import org . scalatest . Inside . _ 
 + 
 + import im . actor . api . rpc . _ 
 + import im . actor . api . rpc . pubgroups . ResponseGetPublicGroups 
 + import im . actor . server . api . rpc . service . auth . AuthSmsConfig 
 + import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl 
 + import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } 
 + import im . actor . server . api . rpc . service . pubgroups . PubgroupsServiceImpl 
 + import im . actor . server . api . rpc . service . sequence . SequenceServiceImpl 
 + import im . actor . server . oauth . { GmailProvider , OAuth2GmailConfig } 
 + import im . actor . server . peermanagers . { GroupPeerManager , PrivatePeerManager } 
 + import im . actor . server . presences . { GroupPresenceManager , PresenceManager } 
 + import im . actor . server . social . SocialManager 
 + import im . actor . server . util . ACLUtils 
 + import im . actor . server . { BaseAppSuite , MessageParsing } 
 + 
 + class PubgroupsServiceSpec extends BaseAppSuite with GroupsServiceHelpers with MessageParsing { 
 + behavior of " PubgroupsService " 
 + 
 + it should " include number of friends in PubGroup " in e1 
 + 
 + it should " list all public groups " in e2 
 + 
 + implicit val sessionRegion = buildSessionRegionProxy ( ) 
 + 
 + implicit val seqUpdManagerRegion = buildSeqUpdManagerRegion ( ) 
 + implicit val socialManagerRegion = SocialManager . startRegion ( ) 
 + implicit val presenceManagerRegion = PresenceManager . startRegion ( ) 
 + implicit val groupPresenceManagerRegion = GroupPresenceManager . startRegion ( ) 
 + implicit val groupPeerManagerRegion = GroupPeerManager . startRegion ( ) 
 + 
 + val bucketName = " actor - uploads - test " 
 + val awsCredentials = new EnvironmentVariableCredentialsProvider ( ) 
 + implicit val transferManager = new TransferManager ( awsCredentials ) 
 + val groupInviteConfig = GroupInviteConfig ( " http : / / actor . im " ) 
 + 
 + implicit val privatePeerManagerRegion = PrivatePeerManager . startRegion ( ) 
 + 
 + val sequenceService = new SequenceServiceImpl 
 + val messagingService = messaging . MessagingServiceImpl ( mediator ) 
 + implicit val groupService = new GroupsServiceImpl ( bucketName , groupInviteConfig ) 
 + val oauth2GmailConfig = OAuth2GmailConfig . fromConfig ( system . settings . config . getConfig ( " oauth . v2 . gmail " ) ) 
 + implicit val oauth2Service = new GmailProvider ( oauth2GmailConfig ) 
 + implicit val authSmsConfig = AuthSmsConfig . fromConfig ( system . settings . config . getConfig ( " auth " ) ) 
 + implicit val authService = buildAuthService ( ) 
 + val pubGroupService = new PubgroupsServiceImpl ( bucketName , groupInviteConfig ) 
 + val contactService = new ContactsServiceImpl ( ) 
 + 
 + def e1 ( ) = { 
 + val ( user1 , authId1 , _ ) = createUser ( ) 
 + val ( user2 , authId2 , _ ) = createUser ( ) 
 + val ( user3 , _ , _ ) = createUser ( ) 
 + val ( user4 , _ , _ ) = createUser ( ) 
 + 
 + val sessionId = createSessionId ( ) 
 + implicit val clientData = ClientData ( authId1 , sessionId , Some ( user1 . id ) ) 
 + 
 + createPubGroup ( " Android group " , Set ( user2 . id , user4 . id ) ) . groupPeer 
 + 
 + whenReady ( contactService . handleAddContact ( user2 . id , 
 + ACLUtils . userAccessHash ( clientData . authId , user2 . id , getUserModel ( user2 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) 
 + whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ 
 + inside ( resp ) { 
 + case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ 
 + groups should have length 1 
 + groups . head . friendsCount shouldEqual 1 
 + } 
 + } 
 + 
 + whenReady ( contactService . handleAddContact ( user3 . id , 
 + ACLUtils . userAccessHash ( clientData . authId , user3 . id , getUserModel ( user3 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) / / not in group . should not be in friends 
 + whenReady ( contactService . handleAddContact ( user4 . id , 
 + ACLUtils . userAccessHash ( clientData . authId , user4 . id , getUserModel ( user4 . id ) . accessSalt ) ) ) ( _ ⇒ ( ) ) 
 + 
 + whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ 
 + inside ( resp ) { 
 + case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ 
 + groups should have length 1 
 + groups . head . friendsCount shouldEqual 2 
 + } 
 + } 
 + } 
 + 
 + def e2 ( ) = { 
 + val ( user1 , authId1 , _ ) = createUser ( ) 
 + val ( user2 , _ , _ ) = createUser ( ) 
 + val ( user3 , _ , _ ) = createUser ( ) 
 + val ( user4 , _ , _ ) = createUser ( ) 
 + 
 + val sessionId = createSessionId ( ) 
 + 
 + implicit val clientData = ClientData ( authId1 , sessionId , Some ( user1 . id ) ) 
 + 
 + createPubGroup ( " Android group " , Set ( user2 . id , user4 . id ) ) . groupPeer 
 + createPubGroup ( " Scala group " , Set ( user2 . id , user3 . id ) ) . groupPeer 
 + 
 + whenReady ( pubGroupService . handleGetPublicGroups ( ) ) { resp ⇒ 
 + inside ( resp ) { 
 + case Ok ( ResponseGetPublicGroups ( groups ) ) ⇒ 
 + groups should have length 3 / / 2 here , 1 from previous spec 
 + } 
 + } 
 + } 
 + 
 + } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 index 51a8b1a . . 17bf36a 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 @ @ - 13 , 7 + 13 , 6 @ @ import akka . util . ByteString 
 import com . amazonaws . auth . EnvironmentVariableCredentialsProvider 
 import com . amazonaws . services . s3 . transfer . TransferManager 
 import com . github . dwhjames . awswrap . s3 . AmazonS3ScalaClient 
 - import org . specs2 . execute . PendingUntilFixed 
 import play . api . libs . json . _ 
 
 import im . actor . api . rpc . ClientData 
 @ @ - 29 , 7 + 28 , 7 @ @ import im . actor . server . social . SocialManager 
 import im . actor . server . util . { ImageUtils , FileUtils , ACLUtils } 
 import im . actor . server . { BaseAppSuite , models , persist } 
 
 - class HttpApiFrontendSpec extends BaseAppSuite with GroupsServiceHelpers with PendingUntilFixed { 
 + class HttpApiFrontendSpec extends BaseAppSuite with GroupsServiceHelpers { 
 behavior of " HttpApiFrontend " 
 
 " Webhooks handler " should " respond with OK to webhooks text message " in t . textMessage ( ) 
 diff - - git a / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala b / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala 
 index 3412ace . . b904f72 100644 
 - - - a / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala 
 + + + b / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala 
 @ @ - 42 , 8 + 42 , 8 @ @ object GroupUtils { 
 } 
 } 
 
 - def toPublicGroup ( group : Group ) : PublicGroup = { 
 - PublicGroup ( group . id , group . accessHash , group . title , group . members . length , 0 , " " , group . avatar ) 
 + def toPublicGroup ( group : Group , friendsCount : Int ) : PublicGroup = { 
 + PublicGroup ( group . id , group . accessHash , group . title , group . members . length , friendsCount , " " , group . avatar ) 
 } 
 
 def getGroupStructUnsafe ( group : models . Group ) ( implicit clientData : AuthorizedClientData , ec : ExecutionContext ) : DBIOAction [ Group , NoStream , Read with Read ] = {
