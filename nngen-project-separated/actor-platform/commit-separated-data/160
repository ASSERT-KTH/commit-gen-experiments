BLEU SCORE: 0.08125165710854508

TEST MSG: chore ( android ) : move to new search
GENERATED MSG: feat ( core + android + web ) : add isStarted flag

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / search / GlobalSearchBaseFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / search / GlobalSearchBaseFragment . java < nl > index dec2205 . . 879d4a1 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / search / GlobalSearchBaseFragment . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / search / GlobalSearchBaseFragment . java < nl > @ @ - 18 , 9 + 18 , 15 @ @ import android . widget . FrameLayout ; < nl > import android . widget . LinearLayout ; < nl > import android . widget . TextView ; < nl > < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . entity . Avatar ; < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerSearchEntity ; < nl > + import im . actor . core . entity . PeerType ; < nl > import im . actor . core . entity . SearchEntity ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > + import im . actor . core . viewmodel . GroupVM ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > import im . actor . runtime . generic . mvvm . BindedDisplayList ; < nl > import im . actor . runtime . generic . mvvm . DisplayList ; < nl > @ @ - 32 , 7 + 38 , 9 @ @ import im . actor . sdk . util . Screen ; < nl > import im . actor . sdk . view . adapters . HeaderViewRecyclerAdapter ; < nl > import im . actor . sdk . view . adapters . OnItemClickedListener ; < nl > < nl > + import static im . actor . sdk . util . ActorSDKMessenger . groups ; < nl > import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > + import static im . actor . sdk . util . ActorSDKMessenger . users ; < nl > < nl > public abstract class GlobalSearchBaseFragment extends BaseFragment { < nl > < nl > @ @ - 152 , 24 + 160 , 38 @ @ public abstract class GlobalSearchBaseFragment extends BaseFragment { < nl > String activeSearchQuery = searchQuery ; < nl > searchDisplay . initSearch ( s . trim ( ) . toLowerCase ( ) , false ) ; < nl > searchAdapter . setQuery ( s . trim ( ) . toLowerCase ( ) ) ; < nl > - messenger ( ) . findUsers ( s ) . start ( new CommandCallback < UserVM [ ] > ( ) { < nl > + messenger ( ) . findPeers ( s ) . start ( new CommandCallback < List < PeerSearchEntity > > ( ) { < nl > @ Override < nl > - public void onResult ( UserVM [ ] res ) { < nl > + public void onResult ( List < PeerSearchEntity > res ) { < nl > int footerVisability = footer . getVisibility ( ) ; < nl > if ( searchQuery . equals ( activeSearchQuery ) ) { < nl > boolean showResult = false ; < nl > - UserVM u = null ; < nl > - if ( res . length > 0 ) { < nl > - u = res [ 0 ] ; < nl > + Peer peer = null ; < nl > + String name = null ; < nl > + Avatar avatar = null ; < nl > + if ( res . size ( ) > 0 ) { < nl > + peer = res . get ( 0 ) . getPeer ( ) ; < nl > + < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + UserVM userVM = users ( ) . get ( peer . getPeerId ( ) ) ; < nl > + name = userVM . getName ( ) . getName ( ) ; < nl > + avatar = userVM . getAvatar ( ) . get ( ) ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + GroupVM groupVM = groups ( ) . get ( peer . getPeerId ( ) ) ; < nl > + name = groupVM . getName ( ) . getName ( ) ; < nl > + avatar = groupVM . getAvatar ( ) . get ( ) ; < nl > + } else { < nl > + return ; < nl > + } < nl > showResult = true ; < nl > for ( int i = 0 ; i < searchDisplay . getSize ( ) ; i + + ) { < nl > - if ( searchDisplay . getItem ( i ) . getPeer ( ) . equals ( Peer . user ( u . getId ( ) ) ) ) < nl > + if ( searchDisplay . getItem ( i ) . getPeer ( ) . equals ( peer ) ) < nl > showResult = false ; < nl > break ; < nl > } < nl > } < nl > if ( showResult ) { < nl > - footerSearchHolder . bind ( new SearchEntity ( Peer . user ( u . getId ( ) ) , 0 , u . getAvatar ( ) . get ( ) , u . getName ( ) . get ( ) ) , activeSearchQuery , true ) ; < nl > + footerSearchHolder . bind ( new SearchEntity ( peer , 0 , avatar , name ) , activeSearchQuery , true ) ; < nl > showView ( footer ) ; < nl > } else { < nl > goneView ( footer ) ; < nl > @ @ - 185 , 6 + 207 , 7 @ @ public abstract class GlobalSearchBaseFragment extends BaseFragment { < nl > < nl > } < nl > } ) ; < nl > + < nl > } else { < nl > searchDisplay . initEmpty ( ) ; < nl > goneView ( footer ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index f84c916 . . a07d9c5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 1131 , 6 + 1131 , 19 @ @ public class Messenger { < nl > } < nl > < nl > / * * < nl > + * Finding peers by text query < nl > + * < nl > + * @ param query text query < nl > + * @ return found peers < nl > + * / < nl > + @ ObjectiveCName ( " findPeersWithQuery : " ) < nl > + public Command < List < PeerSearchEntity > > findPeers ( String query ) { < nl > + return callback - > modules . getSearchModule ( ) . findPeers ( query ) < nl > + . then ( v - > callback . onResult ( v ) ) < nl > + . failure ( e - > callback . onError ( e ) ) ; < nl > + } < nl > + < nl > + / * * < nl > * Finding text messages by query < nl > * < nl > * @ param peer peer for search < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java < nl > index d0d11c3 . . 2497c4e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java < nl > @ @ - 100 , 7 + 100 , 7 @ @ public class SearchModule extends AbsModule { < nl > AbsContent . fromMessage ( itm . getResult ( ) . getContent ( ) ) ) ) ) ; < nl > } < nl > < nl > - public Promise < List < PeerSearchEntity > > findPeers ( final PeerSearchType type ) { < nl > + public Promise < List < PeerSearchEntity > > findPeers ( PeerSearchType type ) { < nl > final ApiSearchPeerType apiType ; < nl > if ( type = = PeerSearchType . GROUPS ) { < nl > apiType = ApiSearchPeerType . GROUPS ; < nl > @ @ - 111 , 6 + 111 , 16 @ @ public class SearchModule extends AbsModule { < nl > } < nl > ArrayList < ApiSearchCondition > conditions = new ArrayList < > ( ) ; < nl > conditions . add ( new ApiSearchPeerTypeCondition ( apiType ) ) ; < nl > + return findPeers ( conditions ) ; < nl > + } < nl > + < nl > + public Promise < List < PeerSearchEntity > > findPeers ( String query ) { < nl > + ArrayList < ApiSearchCondition > conditions = new ArrayList < > ( ) ; < nl > + conditions . add ( new ApiSearchPieceText ( query ) ) ; < nl > + return findPeers ( conditions ) ; < nl > + } < nl > + < nl > + public Promise < List < PeerSearchEntity > > findPeers ( ArrayList < ApiSearchCondition > conditions ) { < nl > < nl > return api ( new RequestPeerSearch ( conditions , ApiSupportConfiguration . OPTIMIZATIONS ) ) < nl > . chain ( responsePeerSearch - >
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java < nl > index 2a529bf . . b102284 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java < nl > @ @ - 66 , 6 + 66 , 7 @ @ import im . actor . runtime . actors . ActorSystem ; < nl > import im . actor . runtime . actors . Props ; < nl > import im . actor . runtime . actors . messages . PoisonPill ; < nl > import im . actor . runtime . actors . messages . Void ; < nl > + import im . actor . runtime . function . Consumer ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . ActorStyle ; < nl > import im . actor . sdk . R ; < nl > @ @ - 237 , 7 + 238 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > / / Reading peer of chat < nl > intent = getIntent ( ) ; < nl > peer = Peer . fromUniqueId ( intent . getExtras ( ) . getLong ( EXTRA _ CHAT _ PEER ) ) ; < nl > - < nl > + checkIsBot ( ) ; < nl > if ( saveInstance = = null ) { < nl > / / Set compose state for auto - showing menu < nl > isCompose = intent . getExtras ( ) . getBoolean ( EXTRA _ CHAT _ COMPOSE , false ) ; < nl > @ @ - 463 , 6 + 464 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > emptyBotSend = findViewById ( R . id . botEmptyTextBlock ) ; < nl > emptyBotHint = ( TextView ) findViewById ( R . id . botEmptyHint ) ; < nl > < nl > + checkEmptyBot ( ) ; < nl > } < nl > < nl > private void startCamera ( ) { < nl > @ @ - 568 , 7 + 570 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > < nl > @ Override < nl > public void onResume ( ) { < nl > - isBot = ( peer . getPeerType ( ) = = PeerType . PRIVATE & & users ( ) . get ( peer . getPeerId ( ) ) . isBot ( ) ) ; < nl > + checkIsBot ( ) ; < nl > super . onResume ( ) ; < nl > < nl > if ( peer . getPeerType ( ) = = PeerType . PRIVATE & & menu ! = null ) { < nl > @ @ - 696 , 15 + 698 , 22 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > < nl > } < nl > < nl > + public void checkIsBot ( ) { < nl > + isBot = ( peer . getPeerType ( ) = = PeerType . PRIVATE & & users ( ) . get ( peer . getPeerId ( ) ) . isBot ( ) ) ; < nl > + } < nl > + < nl > public void checkEmptyBot ( ) { < nl > if ( isBot ) { < nl > - if ( messenger ( ) . checkChatIsempty ( peer ) ) { < nl > - showView ( emptyBotSend ) ; < nl > - showView ( emptyBotHint ) ; < nl > - } else { < nl > - hideView ( emptyBotSend ) ; < nl > - hideView ( emptyBotHint ) ; < nl > - } < nl > + messenger ( ) . isStarted ( peer . getPeerId ( ) ) < nl > + . then ( empty - > { < nl > + if ( empty ) { < nl > + showView ( emptyBotSend ) ; < nl > + showView ( emptyBotHint ) ; < nl > + } else { < nl > + hideView ( emptyBotSend ) ; < nl > + hideView ( emptyBotHint ) ; < nl > + } < nl > + } ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > index fd9d763 . . 045d631 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > @ @ - 507 , 7 + 507 , 4 @ @ public class AndroidMessenger extends im . actor . core . Messenger { < nl > return modules . getEvents ( ) ; < nl > } < nl > < nl > - public boolean checkChatIsempty ( Peer peer ) { < nl > - return modules . getMessagesModule ( ) . getConversationEngine ( peer ) . getCount ( ) = = 0 ; < nl > - } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index c0d2b8a . . f61a912 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 1569 , 6 + 1569 , 18 @ @ public class Messenger { < nl > . failure ( e - > callback . onError ( e ) ) ; < nl > } < nl > < nl > + / * * < nl > + * Check if chat with bot is started < nl > + * < nl > + * @ param uid bot user id < nl > + * @ return is chat with bot started < nl > + * / < nl > + @ ObjectiveCName ( " isStartedWithUid : " ) < nl > + public Promise < Boolean > isStarted ( int uid ) { < nl > + return modules . getMessagesModule ( ) . chatIsEmpty ( Peer . user ( uid ) ) ; < nl > + } < nl > + < nl > + < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Blocked List < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > index 0a85356 . . 76ffb68 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > @ @ - 310 , 6 + 310 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > ) ) ; < nl > } < nl > < nl > + public Promise < Boolean > chatIsEmpty ( Peer peer ) { < nl > + return new Promise < > ( resolver - > resolver . result ( getConversationEngine ( peer ) . getCount ( ) = = 0 ) ) ; < nl > + } < nl > + < nl > < nl > public void forwardContent ( Peer peer , AbsContent content ) { < nl > sendMessageActor . send ( new SenderActor . ForwardContent ( peer , content ) ) ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / search / GlobalSearchBaseFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / search / GlobalSearchBaseFragment . java 
 index dec2205 . . 879d4a1 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / search / GlobalSearchBaseFragment . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / search / GlobalSearchBaseFragment . java 
 @ @ - 18 , 9 + 18 , 15 @ @ import android . widget . FrameLayout ; 
 import android . widget . LinearLayout ; 
 import android . widget . TextView ; 
 
 + import java . util . List ; 
 + 
 + import im . actor . core . entity . Avatar ; 
 import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerSearchEntity ; 
 + import im . actor . core . entity . PeerType ; 
 import im . actor . core . entity . SearchEntity ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 + import im . actor . core . viewmodel . GroupVM ; 
 import im . actor . core . viewmodel . UserVM ; 
 import im . actor . runtime . generic . mvvm . BindedDisplayList ; 
 import im . actor . runtime . generic . mvvm . DisplayList ; 
 @ @ - 32 , 7 + 38 , 9 @ @ import im . actor . sdk . util . Screen ; 
 import im . actor . sdk . view . adapters . HeaderViewRecyclerAdapter ; 
 import im . actor . sdk . view . adapters . OnItemClickedListener ; 
 
 + import static im . actor . sdk . util . ActorSDKMessenger . groups ; 
 import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 + import static im . actor . sdk . util . ActorSDKMessenger . users ; 
 
 public abstract class GlobalSearchBaseFragment extends BaseFragment { 
 
 @ @ - 152 , 24 + 160 , 38 @ @ public abstract class GlobalSearchBaseFragment extends BaseFragment { 
 String activeSearchQuery = searchQuery ; 
 searchDisplay . initSearch ( s . trim ( ) . toLowerCase ( ) , false ) ; 
 searchAdapter . setQuery ( s . trim ( ) . toLowerCase ( ) ) ; 
 - messenger ( ) . findUsers ( s ) . start ( new CommandCallback < UserVM [ ] > ( ) { 
 + messenger ( ) . findPeers ( s ) . start ( new CommandCallback < List < PeerSearchEntity > > ( ) { 
 @ Override 
 - public void onResult ( UserVM [ ] res ) { 
 + public void onResult ( List < PeerSearchEntity > res ) { 
 int footerVisability = footer . getVisibility ( ) ; 
 if ( searchQuery . equals ( activeSearchQuery ) ) { 
 boolean showResult = false ; 
 - UserVM u = null ; 
 - if ( res . length > 0 ) { 
 - u = res [ 0 ] ; 
 + Peer peer = null ; 
 + String name = null ; 
 + Avatar avatar = null ; 
 + if ( res . size ( ) > 0 ) { 
 + peer = res . get ( 0 ) . getPeer ( ) ; 
 + 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + UserVM userVM = users ( ) . get ( peer . getPeerId ( ) ) ; 
 + name = userVM . getName ( ) . getName ( ) ; 
 + avatar = userVM . getAvatar ( ) . get ( ) ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + GroupVM groupVM = groups ( ) . get ( peer . getPeerId ( ) ) ; 
 + name = groupVM . getName ( ) . getName ( ) ; 
 + avatar = groupVM . getAvatar ( ) . get ( ) ; 
 + } else { 
 + return ; 
 + } 
 showResult = true ; 
 for ( int i = 0 ; i < searchDisplay . getSize ( ) ; i + + ) { 
 - if ( searchDisplay . getItem ( i ) . getPeer ( ) . equals ( Peer . user ( u . getId ( ) ) ) ) 
 + if ( searchDisplay . getItem ( i ) . getPeer ( ) . equals ( peer ) ) 
 showResult = false ; 
 break ; 
 } 
 } 
 if ( showResult ) { 
 - footerSearchHolder . bind ( new SearchEntity ( Peer . user ( u . getId ( ) ) , 0 , u . getAvatar ( ) . get ( ) , u . getName ( ) . get ( ) ) , activeSearchQuery , true ) ; 
 + footerSearchHolder . bind ( new SearchEntity ( peer , 0 , avatar , name ) , activeSearchQuery , true ) ; 
 showView ( footer ) ; 
 } else { 
 goneView ( footer ) ; 
 @ @ - 185 , 6 + 207 , 7 @ @ public abstract class GlobalSearchBaseFragment extends BaseFragment { 
 
 } 
 } ) ; 
 + 
 } else { 
 searchDisplay . initEmpty ( ) ; 
 goneView ( footer ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index f84c916 . . a07d9c5 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 1131 , 6 + 1131 , 19 @ @ public class Messenger { 
 } 
 
 / * * 
 + * Finding peers by text query 
 + * 
 + * @ param query text query 
 + * @ return found peers 
 + * / 
 + @ ObjectiveCName ( " findPeersWithQuery : " ) 
 + public Command < List < PeerSearchEntity > > findPeers ( String query ) { 
 + return callback - > modules . getSearchModule ( ) . findPeers ( query ) 
 + . then ( v - > callback . onResult ( v ) ) 
 + . failure ( e - > callback . onError ( e ) ) ; 
 + } 
 + 
 + / * * 
 * Finding text messages by query 
 * 
 * @ param peer peer for search 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java 
 index d0d11c3 . . 2497c4e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java 
 @ @ - 100 , 7 + 100 , 7 @ @ public class SearchModule extends AbsModule { 
 AbsContent . fromMessage ( itm . getResult ( ) . getContent ( ) ) ) ) ) ; 
 } 
 
 - public Promise < List < PeerSearchEntity > > findPeers ( final PeerSearchType type ) { 
 + public Promise < List < PeerSearchEntity > > findPeers ( PeerSearchType type ) { 
 final ApiSearchPeerType apiType ; 
 if ( type = = PeerSearchType . GROUPS ) { 
 apiType = ApiSearchPeerType . GROUPS ; 
 @ @ - 111 , 6 + 111 , 16 @ @ public class SearchModule extends AbsModule { 
 } 
 ArrayList < ApiSearchCondition > conditions = new ArrayList < > ( ) ; 
 conditions . add ( new ApiSearchPeerTypeCondition ( apiType ) ) ; 
 + return findPeers ( conditions ) ; 
 + } 
 + 
 + public Promise < List < PeerSearchEntity > > findPeers ( String query ) { 
 + ArrayList < ApiSearchCondition > conditions = new ArrayList < > ( ) ; 
 + conditions . add ( new ApiSearchPieceText ( query ) ) ; 
 + return findPeers ( conditions ) ; 
 + } 
 + 
 + public Promise < List < PeerSearchEntity > > findPeers ( ArrayList < ApiSearchCondition > conditions ) { 
 
 return api ( new RequestPeerSearch ( conditions , ApiSupportConfiguration . OPTIMIZATIONS ) ) 
 . chain ( responsePeerSearch - >

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java 
 index 2a529bf . . b102284 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java 
 @ @ - 66 , 6 + 66 , 7 @ @ import im . actor . runtime . actors . ActorSystem ; 
 import im . actor . runtime . actors . Props ; 
 import im . actor . runtime . actors . messages . PoisonPill ; 
 import im . actor . runtime . actors . messages . Void ; 
 + import im . actor . runtime . function . Consumer ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . ActorStyle ; 
 import im . actor . sdk . R ; 
 @ @ - 237 , 7 + 238 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { 
 / / Reading peer of chat 
 intent = getIntent ( ) ; 
 peer = Peer . fromUniqueId ( intent . getExtras ( ) . getLong ( EXTRA _ CHAT _ PEER ) ) ; 
 - 
 + checkIsBot ( ) ; 
 if ( saveInstance = = null ) { 
 / / Set compose state for auto - showing menu 
 isCompose = intent . getExtras ( ) . getBoolean ( EXTRA _ CHAT _ COMPOSE , false ) ; 
 @ @ - 463 , 6 + 464 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { 
 emptyBotSend = findViewById ( R . id . botEmptyTextBlock ) ; 
 emptyBotHint = ( TextView ) findViewById ( R . id . botEmptyHint ) ; 
 
 + checkEmptyBot ( ) ; 
 } 
 
 private void startCamera ( ) { 
 @ @ - 568 , 7 + 570 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { 
 
 @ Override 
 public void onResume ( ) { 
 - isBot = ( peer . getPeerType ( ) = = PeerType . PRIVATE & & users ( ) . get ( peer . getPeerId ( ) ) . isBot ( ) ) ; 
 + checkIsBot ( ) ; 
 super . onResume ( ) ; 
 
 if ( peer . getPeerType ( ) = = PeerType . PRIVATE & & menu ! = null ) { 
 @ @ - 696 , 15 + 698 , 22 @ @ public class ChatActivity extends ActorEditTextActivity { 
 
 } 
 
 + public void checkIsBot ( ) { 
 + isBot = ( peer . getPeerType ( ) = = PeerType . PRIVATE & & users ( ) . get ( peer . getPeerId ( ) ) . isBot ( ) ) ; 
 + } 
 + 
 public void checkEmptyBot ( ) { 
 if ( isBot ) { 
 - if ( messenger ( ) . checkChatIsempty ( peer ) ) { 
 - showView ( emptyBotSend ) ; 
 - showView ( emptyBotHint ) ; 
 - } else { 
 - hideView ( emptyBotSend ) ; 
 - hideView ( emptyBotHint ) ; 
 - } 
 + messenger ( ) . isStarted ( peer . getPeerId ( ) ) 
 + . then ( empty - > { 
 + if ( empty ) { 
 + showView ( emptyBotSend ) ; 
 + showView ( emptyBotHint ) ; 
 + } else { 
 + hideView ( emptyBotSend ) ; 
 + hideView ( emptyBotHint ) ; 
 + } 
 + } ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 index fd9d763 . . 045d631 100644 
 - - - a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 @ @ - 507 , 7 + 507 , 4 @ @ public class AndroidMessenger extends im . actor . core . Messenger { 
 return modules . getEvents ( ) ; 
 } 
 
 - public boolean checkChatIsempty ( Peer peer ) { 
 - return modules . getMessagesModule ( ) . getConversationEngine ( peer ) . getCount ( ) = = 0 ; 
 - } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index c0d2b8a . . f61a912 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 1569 , 6 + 1569 , 18 @ @ public class Messenger { 
 . failure ( e - > callback . onError ( e ) ) ; 
 } 
 
 + / * * 
 + * Check if chat with bot is started 
 + * 
 + * @ param uid bot user id 
 + * @ return is chat with bot started 
 + * / 
 + @ ObjectiveCName ( " isStartedWithUid : " ) 
 + public Promise < Boolean > isStarted ( int uid ) { 
 + return modules . getMessagesModule ( ) . chatIsEmpty ( Peer . user ( uid ) ) ; 
 + } 
 + 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Blocked List 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 index 0a85356 . . 76ffb68 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 @ @ - 310 , 6 + 310 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 ) ) ; 
 } 
 
 + public Promise < Boolean > chatIsEmpty ( Peer peer ) { 
 + return new Promise < > ( resolver - > resolver . result ( getConversationEngine ( peer ) . getCount ( ) = = 0 ) ) ; 
 + } 
 + 
 
 public void forwardContent ( Peer peer , AbsContent content ) { 
 sendMessageActor . send ( new SenderActor . ForwardContent ( peer , content ) ) ;
