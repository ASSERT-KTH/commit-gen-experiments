BLEU SCORE: 0.11447078430334955

TEST MSG: fix ( server : session ) : ignore ScheduledResend if there is no message in buffer
GENERATED MSG: fix ( session ) : complete ReSender with cleanup

TEST DIFF (one line): diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > index 54ce37f . . 74653dd 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > @ @ - 215 , 14 + 215 , 16 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L < nl > / / TODO : cleanup scheduled resends < nl > context . stop ( self ) < nl > case ScheduledResend ( messageId , item ) ⇒ < nl > - log . debug ( " Scheduled resend for messageId : { } , item : { } " , messageId , item ) < nl > + if ( pushBuffer contains messageId ) { < nl > + log . debug ( " Scheduled resend for messageId : { } , item : { } , resending " , messageId , item ) < nl > < nl > - decreaseBufferSize ( item ) < nl > + decreaseBufferSize ( item ) < nl > < nl > - item match { < nl > - case ni : NewSessionItem ⇒ enqueueNewSession ( ni ) < nl > - case pi : PushItem ⇒ enqueuePush ( pi , Some ( messageId ) ) < nl > - case ri : RpcItem ⇒ enqueueRpc ( ri , Some ( messageId ) ) < nl > + item match { < nl > + case ni : NewSessionItem ⇒ enqueueNewSession ( ni ) < nl > + case pi : PushItem ⇒ enqueuePush ( pi , Some ( messageId ) ) < nl > + case ri : RpcItem ⇒ enqueueRpc ( ri , Some ( messageId ) ) < nl > + } log . debug ( " ScheduledResend for messageId : { } , item : { } , ignoring ( absent in buffer ) " , messageId , item ) < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > index be2d432 . . 027ffae 100644 < nl > - - - a / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > + + + b / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > @ @ - 103 , 6 + 103 , 14 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : < nl > scheduledResend . cancel ( ) < nl > enqueueProtoMessageWithResend ( messageId , msg ) < nl > } < nl > + case OnComplete ⇒ < nl > + log . debug ( " Stopping due to stream completion " ) < nl > + cleanup ( ) < nl > + context . stop ( self ) < nl > + case OnError ( cause ) ⇒ < nl > + log . error ( cause , " Stopping due to stream error " ) < nl > + cleanup ( ) < nl > + context . stop ( self ) < nl > case ScheduledResend ( messageId ) ⇒ < nl > log . debug ( " Scheduled resend for messageId : { } " , messageId ) < nl > resendBuffer . get ( messageId ) map { < nl > @ @ - 211 , 4 + 219 , 11 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : < nl > private def boxProtoMessage ( messageId : Long , message : ProtoMessage ) : MessageBox = { < nl > MessageBox ( messageId , message ) < nl > } < nl > + < nl > + private def cleanup ( ) : Unit = { < nl > + resendBuffer foreach { < nl > + case ( _ , ( _ , scheduledResend ) ) ⇒ < nl > + scheduledResend . cancel ( ) < nl > + } < nl > + } < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 index 54ce37f . . 74653dd 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 @ @ - 215 , 14 + 215 , 16 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long , firstMessageId : L 
 / / TODO : cleanup scheduled resends 
 context . stop ( self ) 
 case ScheduledResend ( messageId , item ) ⇒ 
 - log . debug ( " Scheduled resend for messageId : { } , item : { } " , messageId , item ) 
 + if ( pushBuffer contains messageId ) { 
 + log . debug ( " Scheduled resend for messageId : { } , item : { } , resending " , messageId , item ) 
 
 - decreaseBufferSize ( item ) 
 + decreaseBufferSize ( item ) 
 
 - item match { 
 - case ni : NewSessionItem ⇒ enqueueNewSession ( ni ) 
 - case pi : PushItem ⇒ enqueuePush ( pi , Some ( messageId ) ) 
 - case ri : RpcItem ⇒ enqueueRpc ( ri , Some ( messageId ) ) 
 + item match { 
 + case ni : NewSessionItem ⇒ enqueueNewSession ( ni ) 
 + case pi : PushItem ⇒ enqueuePush ( pi , Some ( messageId ) ) 
 + case ri : RpcItem ⇒ enqueueRpc ( ri , Some ( messageId ) ) 
 + } log . debug ( " ScheduledResend for messageId : { } , item : { } , ignoring ( absent in buffer ) " , messageId , item ) 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 index be2d432 . . 027ffae 100644 
 - - - a / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 + + + b / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 @ @ - 103 , 6 + 103 , 14 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : 
 scheduledResend . cancel ( ) 
 enqueueProtoMessageWithResend ( messageId , msg ) 
 } 
 + case OnComplete ⇒ 
 + log . debug ( " Stopping due to stream completion " ) 
 + cleanup ( ) 
 + context . stop ( self ) 
 + case OnError ( cause ) ⇒ 
 + log . error ( cause , " Stopping due to stream error " ) 
 + cleanup ( ) 
 + context . stop ( self ) 
 case ScheduledResend ( messageId ) ⇒ 
 log . debug ( " Scheduled resend for messageId : { } " , messageId ) 
 resendBuffer . get ( messageId ) map { 
 @ @ - 211 , 4 + 219 , 11 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : 
 private def boxProtoMessage ( messageId : Long , message : ProtoMessage ) : MessageBox = { 
 MessageBox ( messageId , message ) 
 } 
 + 
 + private def cleanup ( ) : Unit = { 
 + resendBuffer foreach { 
 + case ( _ , ( _ , scheduledResend ) ) ⇒ 
 + scheduledResend . cancel ( ) 
 + } 
 + } 
 }
