BLEU SCORE: 0.5169731539571706

TEST MSG: feat ( core ) : Async updates handling
GENERATED MSG: feat ( core ) : Added extensions support

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java < nl > index 16d0b14 . . 05060e1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java < nl > @ @ - 8 , 8 + 8 , 11 @ @ package im . actor . core . modules . api ; < nl > import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > + import java . util . List ; < nl > < nl > import im . actor . core . api . ApiDifferenceUpdate ; < nl > + import im . actor . core . api . ApiGroup ; < nl > + import im . actor . core . api . ApiUser ; < nl > import im . actor . core . api . base . FatSeqUpdate ; < nl > import im . actor . core . api . base . SeqUpdate ; < nl > import im . actor . core . api . base . SeqUpdateTooLong ; < nl > @ @ - 31 , 6 + 34 , 7 @ @ import im . actor . runtime . Log ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . actors . Props ; < nl > + import im . actor . runtime . actors . ask . AskCallback ; < nl > < nl > public class SequenceActor extends ModuleActor { < nl > < nl > @ @ - 114 , 8 + 118 , 8 @ @ public class SequenceActor extends ModuleActor { < nl > < nl > private void onUpdateReceived ( Object u ) { < nl > / / Building parameters < nl > - int seq ; < nl > - byte [ ] state ; < nl > + final int seq ; < nl > + final byte [ ] state ; < nl > int type ; < nl > byte [ ] body ; < nl > if ( u instanceof SeqUpdate ) { < nl > @ @ - 165 , 50 + 169 , 41 @ @ public class SequenceActor extends ModuleActor { < nl > return ; < nl > } < nl > < nl > - / / Checking update < nl > - Update update = null ; < nl > - try { < nl > - update = new UpdatesParser ( ) . read ( type , body ) ; < nl > - } catch ( IOException e ) { < nl > - Log . w ( TAG , " Unable to parse update : ignoring " ) ; < nl > - e . printStackTrace ( ) ; < nl > + List < ApiUser > users = null ; < nl > + List < ApiGroup > groups = null ; < nl > + if ( u instanceof FatSeqUpdate ) { < nl > + FatSeqUpdate fatSeqUpdate = ( FatSeqUpdate ) u ; < nl > + users = fatSeqUpdate . getUsers ( ) ; < nl > + groups = fatSeqUpdate . getGroups ( ) ; < nl > } < nl > + ask ( sequenceHandler , new SequenceHandlerActor . SeqUpdate ( type , body , users , groups ) , new AskCallback ( ) { < nl > < nl > - if ( update ! = null ) { < nl > - if ( ( ! ( u instanceof FatSeqUpdate ) ) & & processor . isCausesInvalidation ( update ) ) { < nl > - Log . w ( TAG , " Message causes invalidation " ) ; < nl > - invalidate ( ) ; < nl > - return ; < nl > - } < nl > - < nl > - / / Processing update < nl > - Log . d ( TAG , " Processing update : " + update ) ; < nl > + @ Override < nl > + public void onResult ( Object obj ) { < nl > + Log . d ( TAG , " Seq Update onResult " ) ; < nl > < nl > - if ( u instanceof FatSeqUpdate ) { < nl > - FatSeqUpdate fatSeqUpdate = ( FatSeqUpdate ) u ; < nl > - processor . applyRelated ( fatSeqUpdate . getUsers ( ) , fatSeqUpdate . getGroups ( ) , false ) ; < nl > - } < nl > + / / Saving state < nl > + SequenceActor . this . seq = seq ; < nl > + SequenceActor . this . state = state ; < nl > + preferences ( ) . putInt ( KEY _ SEQ , seq ) ; < nl > + preferences ( ) . putBytes ( KEY _ STATE , state ) ; < nl > < nl > - processor . processUpdate ( update ) ; < nl > + checkRunnables ( ) ; < nl > + checkFuture ( ) ; < nl > < nl > - if ( u instanceof FatSeqUpdate ) { < nl > - FatSeqUpdate fatSeqUpdate = ( FatSeqUpdate ) u ; < nl > - processor . applyRelated ( fatSeqUpdate . getUsers ( ) , fatSeqUpdate . getGroups ( ) , true ) ; < nl > + / / Faaaaaar away < nl > + isTimerStarted = false ; < nl > + self ( ) . sendOnce ( new ForceInvalidate ( ) , 24 * 60 * 60 * 1000L ) ; < nl > } < nl > - } < nl > - < nl > - / / Saving state < nl > - this . seq = seq ; < nl > - this . state = state ; < nl > - preferences ( ) . putInt ( KEY _ SEQ , seq ) ; < nl > - preferences ( ) . putBytes ( KEY _ STATE , state ) ; < nl > < nl > - checkRunnables ( ) ; < nl > - checkFuture ( ) ; < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + e . printStackTrace ( ) ; < nl > + Log . d ( TAG , " Seq Update required difference " ) ; < nl > + invalidate ( ) ; < nl > + } < nl > + } ) ; < nl > < nl > - / / Faaaaaar away < nl > - isTimerStarted = false ; < nl > - self ( ) . sendOnce ( new ForceInvalidate ( ) , 24 * 60 * 60 * 1000L ) ; < nl > } < nl > < nl > private void invalidate ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java < nl > index 12f2f94 . . f782008 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java < nl > @ @ - 1 , 10 + 1 , 18 @ @ < nl > package im . actor . core . modules . api ; < nl > < nl > + import java . io . IOException ; < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . api . ApiGroup ; < nl > + import im . actor . core . api . ApiUser ; < nl > + import im . actor . core . api . parser . UpdatesParser ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . updates . UpdateProcessor ; < nl > import im . actor . core . util . ModuleActor ; < nl > import im . actor . core . network . parser . Update ; < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . actors . Future ; < nl > + import im . actor . runtime . actors . Promise ; < nl > < nl > public class SequenceHandlerActor extends ModuleActor { < nl > < nl > @ @ - 18 , 21 + 26 , 65 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > this . processor = processor ; < nl > } < nl > < nl > + private void onWeakUpdateReceived ( Update update , long date ) { < nl > + Log . d ( TAG , " Processing weak update : " + update ) ; < nl > + this . processor . processWeakUpdate ( update , date ) ; < nl > + } < nl > + < nl > + private void onSeqUpdate ( int type , byte [ ] body , List < ApiUser > users , < nl > + List < ApiGroup > groups , Future future ) { < nl > + < nl > + Update update ; < nl > + try { < nl > + update = new UpdatesParser ( ) . read ( type , body ) ; < nl > + } catch ( IOException e ) { < nl > + Log . w ( TAG , " Unable to parse update : ignoring " ) ; < nl > + Log . e ( TAG , e ) ; < nl > + future . onResult ( ) ; < nl > + return ; < nl > + } < nl > + < nl > + if ( groups = = null | | users = = null ) { < nl > + if ( processor . isCausesInvalidation ( update ) ) { < nl > + Log . w ( TAG , " Difference is required " ) ; < nl > + future . onError ( new RuntimeException ( " Difference is required " ) ) ; < nl > + return ; < nl > + } < nl > + } < nl > + < nl > + / / Processing update < nl > + Log . d ( TAG , " Processing update : " + update ) ; < nl > + < nl > + if ( groups ! = null & & users ! = null ) { < nl > + processor . applyRelated ( users , groups , false ) ; < nl > + } < nl > + < nl > + processor . processUpdate ( update ) ; < nl > + < nl > + if ( groups ! = null & & users ! = null ) { < nl > + processor . applyRelated ( users , groups , true ) ; < nl > + } < nl > + < nl > + Log . d ( TAG , " Processing update success " ) ; < nl > + future . onResult ( ) ; < nl > + } < nl > + < nl > @ Override < nl > public boolean onAsk ( Object message , Future future ) { < nl > if ( message instanceof WeakUpdate ) { < nl > WeakUpdate weakUpdate = ( WeakUpdate ) message ; < nl > onWeakUpdateReceived ( weakUpdate . getUpdate ( ) , weakUpdate . getDate ( ) ) ; < nl > return true ; < nl > + } else if ( message instanceof SeqUpdate ) { < nl > + SeqUpdate seqUpdate = ( SeqUpdate ) message ; < nl > + onSeqUpdate ( seqUpdate . type , seqUpdate . body , < nl > + seqUpdate . users , seqUpdate . groups , future ) ; < nl > + return false ; < nl > } else { < nl > return super . onAsk ( message , future ) ; < nl > } < nl > } < nl > < nl > - private void onWeakUpdateReceived ( Update update , long date ) { < nl > - this . processor . processWeakUpdate ( update , date ) ; < nl > - } < nl > - < nl > public static class WeakUpdate { < nl > < nl > private Update update ; < nl > @ @ - 51 , 4 + 103 , 35 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > return update ; < nl > } < nl > } < nl > + < nl > + public static class SeqUpdate { < nl > + < nl > + private int type ; < nl > + private byte [ ] body ; < nl > + private List < ApiUser > users ; < nl > + private List < ApiGroup > groups ; < nl > + < nl > + public SeqUpdate ( int type , byte [ ] body , List < ApiUser > users , List < ApiGroup > groups ) { < nl > + this . type = type ; < nl > + this . body = body ; < nl > + this . users = users ; < nl > + this . groups = groups ; < nl > + } < nl > + < nl > + public int getType ( ) { < nl > + return type ; < nl > + } < nl > + < nl > + public byte [ ] getBody ( ) { < nl > + return body ; < nl > + } < nl > + < nl > + public List < ApiUser > getUsers ( ) { < nl > + return users ; < nl > + } < nl > + < nl > + public List < ApiGroup > getGroups ( ) { < nl > + return groups ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java < nl > index de854e1 . . 60f1590 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java < nl > @ @ - 13 , 7 + 13 , 6 @ @ import im . actor . core . api . base . SeqUpdate ; < nl > import im . actor . core . events . NewSessionCreated ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . core . modules . api . SequenceActor ; < nl > import im . actor . core . modules . updates . internal . ExecuteAfter ; < nl > import im . actor . core . modules . updates . internal . RelatedResponse ; < nl > import im . actor . core . network . parser . Update ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java < nl > index fd68d93 . . 83172fc 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java < nl > @ @ - 24 , 21 + 24 , 36 @ @ import im . actor . core . viewmodel . Command ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > import im . actor . runtime . Storage ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . actors . Props ; < nl > import im . actor . runtime . mvvm . MVVMCollection ; < nl > import im . actor . runtime . storage . KeyValueEngine ; < nl > < nl > + import static im . actor . runtime . actors . ActorSystem . system ; < nl > + < nl > public class UsersModule extends AbsModule { < nl > < nl > + private ActorRef usersUpdatesActor ; < nl > private KeyValueEngine < User > users ; < nl > private MVVMCollection < User , UserVM > collection ; < nl > < nl > - public UsersModule ( ModuleContext context ) { < nl > + public UsersModule ( final ModuleContext context ) { < nl > super ( context ) ; < nl > < nl > this . collection = Storage . createKeyValue ( STORAGE _ USERS , UserVM . CREATOR ( context ( ) ) , User . CREATOR ) ; < nl > this . users = collection . getEngine ( ) ; < nl > + < nl > + usersUpdatesActor = system ( ) . actorOf ( Props . create ( UsersUpdatesActor . class , new ActorCreator < UsersUpdatesActor > ( ) { < nl > + @ Override < nl > + public UsersUpdatesActor create ( ) { < nl > + return new UsersUpdatesActor ( context ) ; < nl > + } < nl > + } ) , " sequence / user " ) ; < nl > } < nl > < nl > + / / Model < nl > + < nl > public KeyValueEngine < User > getUsersStorage ( ) { < nl > return users ; < nl > } < nl > @ @ - 47 , 6 + 62 , 12 @ @ public class UsersModule extends AbsModule { < nl > return collection ; < nl > } < nl > < nl > + public ActorRef getUsersUpdatesActor ( ) { < nl > + return usersUpdatesActor ; < nl > + } < nl > + < nl > + / / Actions < nl > + < nl > public Command < Boolean > editMyName ( final String newName ) { < nl > return new Command < Boolean > ( ) { < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java < nl > index d06d34f . . bb5dc8d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java < nl > @ @ - 52 , 7 + 52 , 6 @ @ public class UsersProcessor extends AbsModule implements Processor { < nl > } < nl > } < nl > < nl > - < nl > @ Verified < nl > public boolean hasUsers ( Collection < Integer > uids ) { < nl > for ( Integer uid : uids ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdatesActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdatesActor . java < nl > index 1acbb32 . . 650e19e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdatesActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdatesActor . java < nl > @ @ - 2 , 9 + 2 , 45 @ @ package im . actor . core . modules . users ; < nl > < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . util . ModuleActor ; < nl > + import im . actor . runtime . actors . Future ; < nl > < nl > class UsersUpdatesActor extends ModuleActor { < nl > + < nl > public UsersUpdatesActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + / / context ( ) . getUpdatesModule ( ) . < nl > + } < nl > + < nl > + private void checkUsers ( Integer [ ] uids , Future future ) { < nl > + for ( int uid : uids ) { < nl > + if ( users ( ) . getValue ( uid ) = = null ) { < nl > + future . onResult ( false ) ; < nl > + return ; < nl > + } < nl > + } < nl > + < nl > + future . onResult ( true ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public boolean onAsk ( Object message , Future future ) { < nl > + if ( message instanceof CheckUsers ) { < nl > + checkUsers ( ( ( CheckUsers ) message ) . uids , future ) ; < nl > + return false ; < nl > + } else { < nl > + return super . onAsk ( message , future ) ; < nl > + } < nl > + } < nl > + < nl > + public static class CheckUsers { < nl > + private Integer [ ] uids ; < nl > + < nl > + public CheckUsers ( Integer [ ] uids ) { < nl > + this . uids = uids ; < nl > + } < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java < nl > index d8ec6f9 . . ccda36c 100755 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java < nl > @ @ - 238 , 6 + 238 , 6 @ @ public class Actor { < nl > } < nl > } < nl > } ) ; < nl > - dest . send ( new AskRequest < Object > ( message , new AskFuture < Object > ( id , self ( ) ) ) ) ; < nl > + dest . send ( new AskRequest ( message , new AskFuture ( id , self ( ) ) ) ) ; < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Future . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Future . java < nl > index d212312 . . aa7beea 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Future . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Future . java < nl > @ @ - 2 , 13 + 2 , 19 @ @ package im . actor . runtime . actors ; < nl > < nl > import org . jetbrains . annotations . NotNull ; < nl > < nl > - public abstract class Future < T > { < nl > + import im . actor . runtime . actors . messages . Void ; < nl > < nl > - private T result ; < nl > + public abstract class Future { < nl > + < nl > + private Object result ; < nl > private Exception exception ; < nl > private boolean isFinished ; < nl > < nl > - public void onResult ( @ NotNull T result ) { < nl > + public void onResult ( ) { < nl > + onResult ( Void . INSTANCE ) ; < nl > + } < nl > + < nl > + public void onResult ( @ NotNull Object result ) { < nl > if ( isFinished ) { < nl > throw new RuntimeException ( " Already finished ! " ) ; < nl > } < nl > @ @ - 17 , 12 + 23 , 13 @ @ public abstract class Future < T > { < nl > deliverResult ( ) ; < nl > } < nl > < nl > - public void onError ( @ NotNull Exception e ) { < nl > + public void onError ( @ NotNull Exception e ) { < nl > if ( isFinished ) { < nl > throw new RuntimeException ( " Already finished ! " ) ; < nl > } < nl > this . isFinished = true ; < nl > this . exception = e ; < nl > + deliverResult ( ) ; < nl > } < nl > < nl > protected abstract void deliverResult ( ) ; < nl > @ @ - 32 , 10 + 39 , 10 @ @ public abstract class Future < T > { < nl > } < nl > < nl > public boolean isSuccess ( ) { < nl > - return isFinished & & exception ! = null ; < nl > + return isFinished & & exception = = null ; < nl > } < nl > < nl > - public T getResult ( ) { < nl > + public Object getResult ( ) { < nl > return result ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskFuture . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskFuture . java < nl > index f017a2c . . c750d50 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskFuture . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskFuture . java < nl > @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . runtime . actors . ask ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . actors . Future ; < nl > < nl > - public class AskFuture < T > extends Future < T > { < nl > + public class AskFuture extends Future { < nl > < nl > private ActorRef receiver ; < nl > private long id ; < nl > @ @ - 16 , 7 + 16 , 7 @ @ public class AskFuture < T > extends Future < T > { < nl > @ Override < nl > protected void deliverResult ( ) { < nl > if ( isSuccess ( ) ) { < nl > - receiver . send ( new AskResult < T > ( id , getResult ( ) ) ) ; < nl > + receiver . send ( new AskResult ( id , getResult ( ) ) ) ; < nl > } else { < nl > receiver . send ( new AskError ( id , getException ( ) ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskRequest . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskRequest . java < nl > index f3d2497 . . 3cf7491 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskRequest . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskRequest . java < nl > @ @ - 2 , 11 + 2 , 11 @ @ package im . actor . runtime . actors . ask ; < nl > < nl > import im . actor . runtime . actors . Future ; < nl > < nl > - public class AskRequest < T > { < nl > + public class AskRequest { < nl > private final Object message ; < nl > - private final Future < T > future ; < nl > + private final Future future ; < nl > < nl > - public AskRequest ( Object message , Future < T > future ) { < nl > + public AskRequest ( Object message , Future future ) { < nl > this . message = message ; < nl > this . future = future ; < nl > } < nl > @ @ - 15 , 7 + 15 , 7 @ @ public class AskRequest < T > { < nl > return message ; < nl > } < nl > < nl > - public Future < T > getFuture ( ) { < nl > + public Future getFuture ( ) { < nl > return future ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskResult . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskResult . java < nl > index 4c78589 . . cd55922 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskResult . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskResult . java < nl > @ @ - 1 , 11 + 1 , 11 @ @ < nl > package im . actor . runtime . actors . ask ; < nl > < nl > - public class AskResult < T > { < nl > + public class AskResult { < nl > < nl > - private T result ; < nl > + private Object result ; < nl > private long id ; < nl > < nl > - public AskResult ( long id , T result ) { < nl > + public AskResult ( long id , Object result ) { < nl > this . result = result ; < nl > this . id = id ; < nl > } < nl > @ @ - 14 , 7 + 14 , 7 @ @ public class AskResult < T > { < nl > return id ; < nl > } < nl > < nl > - public T getResult ( ) { < nl > + public Object getResult ( ) { < nl > return result ; < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / . gitignore b / . gitignore < nl > index a882b44 . . 59a9cde 100644 < nl > - - - a / . gitignore < nl > + + + b / . gitignore < nl > @ @ - 114 , 3 + 114 , 4 @ @ actor - sdk / sdk - ios / ActorSDK . xcworkspace / xcuserdata < nl > actor - sdk / sdk - ios / Pods < nl > actor - sdk / sdk - ios / ActorSDK . xcodeproj / xcuserdata < nl > actor - sdk / sdk - ios / ActorSDK . xcworkspace < nl > + actor - sdk / sdk - extension / ext / build < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java < nl > index 7aadc31 . . 29d746f 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java < nl > @ @ - 11 , 6 + 11 , 8 @ @ import im . actor . runtime . mtproto . ConnectionEndpoint ; < nl > * / < nl > public class Configuration { < nl > < nl > + private final ConfigurationExtension [ ] extensions ; < nl > + < nl > private final ConnectionEndpoint [ ] endpoints ; < nl > < nl > private PhoneBookProvider phoneBookProvider ; < nl > @ @ - 44 , 7 + 46 , 8 @ @ public class Configuration { < nl > PlatformType platformType , < nl > int minDelay , < nl > int maxDelay , < nl > - int maxFailureCount ) { < nl > + int maxFailureCount , < nl > + ConfigurationExtension [ ] extensions ) { < nl > this . endpoints = endpoints ; < nl > this . phoneBookProvider = phoneBookProvider ; < nl > this . enableContactsLogging = enableContactsLogging ; < nl > @ @ - 57 , 6 + 60 , 16 @ @ public class Configuration { < nl > this . minDelay = minDelay ; < nl > this . maxDelay = maxDelay ; < nl > this . maxFailureCount = maxFailureCount ; < nl > + this . extensions = extensions ; < nl > + } < nl > + < nl > + / * * < nl > + * Get configured extensions < nl > + * < nl > + * @ return extensions < nl > + * / < nl > + public ConfigurationExtension [ ] getExtensions ( ) { < nl > + return extensions ; < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > index b3fba86 . . dff56cb 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > @ @ - 17 , 6 + 17 , 7 @ @ import im . actor . runtime . mtproto . ConnectionEndpoint ; < nl > * / < nl > public class ConfigurationBuilder { < nl > < nl > + private ArrayList < ConfigurationExtension > extensions = new ArrayList < ConfigurationExtension > ( ) ; < nl > private ArrayList < ConnectionEndpoint > endpoints = new ArrayList < ConnectionEndpoint > ( ) ; < nl > < nl > private PhoneBookProvider phoneBookProvider ; < nl > @ @ - 178 , 6 + 179 , 18 @ @ public class ConfigurationBuilder { < nl > } < nl > < nl > / * * < nl > + * Adding app extension < nl > + * < nl > + * @ param key extension key < nl > + * @ param extension extension < nl > + * @ return this < nl > + * / < nl > + public ConfigurationBuilder addExtension ( String key , Extension extension ) { < nl > + this . extensions . add ( new ConfigurationExtension ( key , extension ) ) ; < nl > + return this ; < nl > + } < nl > + < nl > + / * * < nl > * Adding Endpoint for API < nl > * Valid URLs are : < nl > * tcp : / / [ host ] : [ port ] < nl > @ @ - 258 , 6 + 271 , 7 @ @ public class ConfigurationBuilder { < nl > phoneBookProvider , notificationProvider , < nl > apiConfiguration , enableContactsLogging , enableNetworkLogging , < nl > enableFilesLogging , deviceCategory , platformType , < nl > - minDelay , maxDelay , maxFailureCount ) ; < nl > + minDelay , maxDelay , maxFailureCount , < nl > + extensions . toArray ( new ConfigurationExtension [ extensions . size ( ) ] ) ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationExtension . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationExtension . java < nl > new file mode 100644 < nl > index 0000000 . . e964a7d < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationExtension . java < nl > @ @ - 0 , 0 + 1 , 20 @ @ < nl > + package im . actor . core ; < nl > + < nl > + public class ConfigurationExtension { < nl > + < nl > + private String key ; < nl > + private Extension extension ; < nl > + < nl > + public ConfigurationExtension ( String key , Extension extension ) { < nl > + this . key = key ; < nl > + this . extension = extension ; < nl > + } < nl > + < nl > + public String getKey ( ) { < nl > + return key ; < nl > + } < nl > + < nl > + public Extension getExtension ( ) { < nl > + return extension ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java < nl > index f251256 . . ea6736b 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java < nl > @ @ - 8 , 13 + 8 , 6 @ @ import im . actor . core . modules . ModuleContext ; < nl > public interface Extension { < nl > < nl > / * * < nl > - * Get unique extension key < nl > - * < nl > - * @ return extension key < nl > - * / < nl > - String getExtensionKey ( ) ; < nl > - < nl > - / * * < nl > * Performing registration of extension before Messenger run < nl > * < nl > * @ param context Module context < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java < nl > index 9088883 . . f97ea13 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java < nl > @ @ - 8 , 6 + 8 , 7 @ @ import im . actor . core . modules . utils . PreferenceApiStorage ; < nl > import im . actor . core . network . ActorApi ; < nl > import im . actor . core . network . ActorApiCallback ; < nl > import im . actor . core . network . Endpoints ; < nl > + import im . actor . core . network . parser . ApiParserConfig ; < nl > import im . actor . core . network . parser . Request ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > @ @ - 21 , 6 + 22 , 7 @ @ public class ApiModule extends AbsModule implements BusSubscriber { < nl > < nl > private final ActorApi actorApi ; < nl > private final ActorRef persistentRequests ; < nl > + private final ApiParserConfig parserConfig = new ApiParserConfig ( ) ; < nl > < nl > public ApiModule ( Modules context ) { < nl > super ( context ) ; < nl > @ @ - 31 , 7 + 33 , 7 @ @ public class ApiModule extends AbsModule implements BusSubscriber { < nl > context ( ) . getConfiguration ( ) . isEnableNetworkLogging ( ) , < nl > context ( ) . getConfiguration ( ) . getMinDelay ( ) , < nl > context ( ) . getConfiguration ( ) . getMaxDelay ( ) , < nl > - context ( ) . getConfiguration ( ) . getMaxFailureCount ( ) ) ; < nl > + context ( ) . getConfiguration ( ) . getMaxFailureCount ( ) , parserConfig ) ; < nl > < nl > context . getEvents ( ) . subscribe ( this , AppVisibleChanged . EVENT ) ; < nl > < nl > @ @ - 43 , 12 + 45 , 25 @ @ public class ApiModule extends AbsModule implements BusSubscriber { < nl > } ) , " api / persistence " ) ; < nl > } < nl > < nl > - < nl > + / * * < nl > + * Get Actor API instance < nl > + * < nl > + * @ return Actor API instance < nl > + * / < nl > public ActorApi getActorApi ( ) { < nl > return actorApi ; < nl > } < nl > < nl > / * * < nl > + * Get API Parser configuration < nl > + * < nl > + * @ return Actor API parser config < nl > + * / < nl > + public ApiParserConfig getParserConfig ( ) { < nl > + return parserConfig ; < nl > + } < nl > + < nl > + / * * < nl > * Performing persist request . Keep repeating request even after application restart < nl > * < nl > * @ param request request < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Extensions . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Extensions . java < nl > new file mode 100644 < nl > index 0000000 . . 6877c1d < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Extensions . java < nl > @ @ - 0 , 0 + 1 , 57 @ @ < nl > + package im . actor . core . modules ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . Extension ; < nl > + < nl > + public class Extensions extends AbsModule { < nl > + < nl > + private ArrayList < ExtensionRef > extensionRefs = new ArrayList < ExtensionRef > ( ) ; < nl > + < nl > + public Extensions ( ModuleContext context ) { < nl > + super ( context ) ; < nl > + } < nl > + < nl > + public void registerExtension ( String key , Extension extension ) { < nl > + extensionRefs . add ( new ExtensionRef ( key , extension ) ) ; < nl > + } < nl > + < nl > + public Extension findExtension ( String key ) { < nl > + for ( ExtensionRef r : extensionRefs ) { < nl > + if ( r . getKey ( ) . equals ( key ) ) { < nl > + return r . getExtension ( ) ; < nl > + } < nl > + } < nl > + return null ; < nl > + } < nl > + < nl > + public void registerExtensions ( ) { < nl > + for ( ExtensionRef r : extensionRefs ) { < nl > + r . getExtension ( ) . registerExtension ( context ( ) ) ; < nl > + } < nl > + } < nl > + < nl > + public void runExtensions ( ) { < nl > + for ( ExtensionRef r : extensionRefs ) { < nl > + r . getExtension ( ) . runExtension ( ) ; < nl > + } < nl > + } < nl > + < nl > + private class ExtensionRef { < nl > + private String key ; < nl > + private Extension extension ; < nl > + < nl > + public ExtensionRef ( String key , Extension extension ) { < nl > + this . key = key ; < nl > + this . extension = extension ; < nl > + } < nl > + < nl > + public String getKey ( ) { < nl > + return key ; < nl > + } < nl > + < nl > + public Extension getExtension ( ) { < nl > + return extension ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java < nl > index 36a6d73 . . f5c5862 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java < nl > @ @ - 83 , 4 + 83 , 6 @ @ public interface ModuleContext { < nl > Messenger getMessenger ( ) ; < nl > < nl > MentionsModule getMentions ( ) ; < nl > + < nl > + Extensions getExtensions ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java < nl > index a82d6b9 . . 9f80b34 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java < nl > @ @ - 5 , 7 + 5 , 7 @ @ < nl > package im . actor . core . modules ; < nl > < nl > import im . actor . core . Configuration ; < nl > - import im . actor . core . Extension ; < nl > + import im . actor . core . ConfigurationExtension ; < nl > import im . actor . core . Messenger ; < nl > import im . actor . core . i18n . I18nEngine ; < nl > import im . actor . core . modules . internal . AppStateModule ; < nl > @ @ - 49 , 6 + 49 , 7 @ @ public class Modules implements ModuleContext { < nl > private final AppStateModule appStateModule ; < nl > private final ExternalModule external ; < nl > private final Authentication authentication ; < nl > + private final Extensions extensions ; < nl > < nl > / / Modules for authenticated users < nl > private volatile Updates updates ; < nl > @ @ - 86 , 6 + 87 , 9 @ @ public class Modules implements ModuleContext { < nl > timing . section ( " API " ) ; < nl > this . api = new ApiModule ( this ) ; < nl > < nl > + timing . section ( " Extensions " ) ; < nl > + this . extensions = new Extensions ( this ) ; < nl > + < nl > timing . section ( " App State " ) ; < nl > this . appStateModule = new AppStateModule ( this ) ; < nl > < nl > @ @ - 95 , 6 + 99 , 12 @ @ public class Modules implements ModuleContext { < nl > timing . section ( " Pushes " ) ; < nl > this . pushes = new PushesModule ( this ) ; < nl > < nl > + timing . section ( " Extensions " ) ; < nl > + for ( ConfigurationExtension e : configuration . getExtensions ( ) ) { < nl > + this . extensions . registerExtension ( e . getKey ( ) , e . getExtension ( ) ) ; < nl > + } < nl > + this . extensions . registerExtensions ( ) ; < nl > + < nl > timing . section ( " Auth " ) ; < nl > this . authentication = new Authentication ( this ) ; < nl > this . authentication . run ( ) ; < nl > @ @ - 153 , 6 + 163 , 8 @ @ public class Modules implements ModuleContext { < nl > messages . run ( ) ; < nl > timing . section ( " Updates " ) ; < nl > updates . run ( ) ; < nl > + timing . section ( " Extensions " ) ; < nl > + extensions . runExtensions ( ) ; < nl > timing . end ( ) ; < nl > < nl > messenger . onLoggedIn ( ) ; < nl > @ @ - 271 , 6 + 283 , 11 @ @ public class Modules implements ModuleContext { < nl > return mentions ; < nl > } < nl > < nl > + @ Override < nl > + public Extensions getExtensions ( ) { < nl > + return extensions ; < nl > + } < nl > + < nl > public EventBus getEvents ( ) { < nl > return events ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java < nl > index e0f2058 . . a019d60 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java < nl > @ @ - 5 , 6 + 5 , 7 @ @ < nl > package im . actor . core . network ; < nl > < nl > import im . actor . core . api . ApiVersion ; < nl > + import im . actor . core . network . parser . ApiParserConfig ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . core . network . api . ApiBroker ; < nl > import im . actor . core . network . parser . Request ; < nl > @ @ - 42 , 7 + 43 , 8 @ @ public class ActorApi { < nl > public ActorApi ( Endpoints endpoints , AuthKeyStorage keyStorage , ActorApiCallback callback , < nl > boolean isEnableLog , int minDelay , < nl > int maxDelay , < nl > - int maxFailureCount ) { < nl > + int maxFailureCount , < nl > + ApiParserConfig parserConfig ) { < nl > this . endpoints = endpoints ; < nl > this . keyStorage = keyStorage ; < nl > this . callback = callback ; < nl > @ @ - 51 , 7 + 53 , 7 @ @ public class ActorApi { < nl > this . maxDelay = maxDelay ; < nl > this . maxFailureCount = maxFailureCount ; < nl > this . apiBroker = ApiBroker . get ( endpoints , keyStorage , callback , isEnableLog , < nl > - NEXT _ ID . get ( ) , minDelay , maxDelay , maxFailureCount ) ; < nl > + NEXT _ ID . get ( ) , minDelay , maxDelay , maxFailureCount , parserConfig ) ; < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > index 9786886 . . 207ffca 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > @ @ - 8 , 6 + 8 , 7 @ @ import java . io . IOException ; < nl > import java . util . HashMap ; < nl > < nl > import im . actor . core . api . parser . RpcParser ; < nl > + import im . actor . core . network . parser . ApiParserConfig ; < nl > import im . actor . runtime . * ; < nl > import im . actor . runtime . Runtime ; < nl > import im . actor . runtime . actors . Actor ; < nl > @ @ - 46 , 13 + 47 , 14 @ @ public class ApiBroker extends Actor { < nl > public static ActorRef get ( final Endpoints endpoints , final AuthKeyStorage keyStorage , final ActorApiCallback callback , < nl > final boolean isEnableLog , int id , final int minDelay , < nl > final int maxDelay , < nl > - final int maxFailureCount ) { < nl > + final int maxFailureCount , < nl > + final ApiParserConfig parserConfig ) { < nl > return ActorSystem . system ( ) . actorOf ( Props . create ( ApiBroker . class , new ActorCreator < ApiBroker > ( ) { < nl > @ Override < nl > public ApiBroker create ( ) { < nl > return new ApiBroker ( endpoints , keyStorage , callback , isEnableLog , minDelay , < nl > maxDelay , < nl > - maxFailureCount ) ; < nl > + maxFailureCount , parserConfig ) ; < nl > } < nl > } ) . changeDispatcher ( " network " ) , " api / broker # " + id ) ; < nl > } < nl > @ @ - 77 , 9 + 79 , 12 @ @ public class ApiBroker extends Actor { < nl > < nl > private ExponentialBackoff authIdBackOff ; < nl > < nl > + private ApiParserConfig parserConfig ; < nl > + < nl > public ApiBroker ( Endpoints endpoints , AuthKeyStorage keyStorage , < nl > ActorApiCallback callback , < nl > - boolean isEnableLog , int minDelay , int maxDelay , int maxFailureCount ) { < nl > + boolean isEnableLog , int minDelay , int maxDelay , int maxFailureCount , < nl > + ApiParserConfig parserConfig ) { < nl > this . isEnableLog = isEnableLog ; < nl > this . endpoints = endpoints ; < nl > this . keyStorage = keyStorage ; < nl > @ @ - 87 , 7 + 92 , 8 @ @ public class ApiBroker extends Actor { < nl > this . minDelay = minDelay ; < nl > this . maxDelay = maxDelay ; < nl > this . maxFailureCount = maxFailureCount ; < nl > - authIdBackOff = new ExponentialBackoff ( minDelay , maxDelay , maxFailureCount ) ; < nl > + this . authIdBackOff = new ExponentialBackoff ( minDelay , maxDelay , maxFailureCount ) ; < nl > + this . parserConfig = parserConfig ; < nl > } < nl > < nl > @ Override < nl > @ @ - 249 , 7 + 255 , 7 @ @ public class ApiBroker extends Actor { < nl > < nl > Response response ; < nl > try { < nl > - response = ( Response ) new RpcParser ( ) . read ( ok . responseType , ok . payload ) ; < nl > + response = ( Response ) parserConfig . parseRpc ( ok . responseType , ok . payload ) ; < nl > } catch ( IOException e ) { < nl > e . printStackTrace ( ) ; < nl > return ; < nl > @ @ - 337 , 7 + 343 , 7 @ @ public class ApiBroker extends Actor { < nl > < nl > RpcScope updateBox ; < nl > try { < nl > - updateBox = new RpcParser ( ) . read ( type , body ) ; < nl > + updateBox = parserConfig . parseRpc ( type , body ) ; < nl > } catch ( IOException e ) { < nl > e . printStackTrace ( ) ; < nl > Log . w ( TAG , " Broken update box " ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ApiParserConfig . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ApiParserConfig . java < nl > new file mode 100644 < nl > index 0000000 . . d54fc83 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ApiParserConfig . java < nl > @ @ - 0 , 0 + 1 , 30 @ @ < nl > + package im . actor . core . network . parser ; < nl > + < nl > + import java . io . IOException ; < nl > + import java . util . concurrent . CopyOnWriteArrayList ; < nl > + < nl > + import im . actor . core . api . parser . RpcParser ; < nl > + import im . actor . core . api . parser . UpdatesParser ; < nl > + < nl > + public class ApiParserConfig { < nl > + < nl > + private RpcParser rpcRarser = new RpcParser ( ) ; < nl > + private UpdatesParser updatesParser = new UpdatesParser ( ) ; < nl > + private CopyOnWriteArrayList < ParsingExtension > extensions = new CopyOnWriteArrayList < ParsingExtension > ( ) ; < nl > + < nl > + public void addExtension ( ParsingExtension extension ) { < nl > + extensions . add ( extension ) ; < nl > + } < nl > + < nl > + public RpcScope parseRpc ( int header , byte [ ] content ) throws IOException { < nl > + for ( ParsingExtension ex : extensions ) { < nl > + try { < nl > + return ex . getRpcScopeParser ( ) . read ( header , content ) ; < nl > + } catch ( Exception e ) { < nl > + / / Ignore < nl > + } < nl > + } < nl > + < nl > + return rpcRarser . read ( header , content ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ParsingExtension . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ParsingExtension . java < nl > new file mode 100644 < nl > index 0000000 . . dbcbf08 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ParsingExtension . java < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + package im . actor . core . network . parser ; < nl > + < nl > + public class ParsingExtension { < nl > + < nl > + private BaseParser < RpcScope > rpcScopeParser ; < nl > + < nl > + private BaseParser < Update > updateScopeParser ; < nl > + < nl > + public ParsingExtension ( BaseParser < RpcScope > rpcScopeParser , BaseParser < Update > updateScopeParser ) { < nl > + this . rpcScopeParser = rpcScopeParser ; < nl > + this . updateScopeParser = updateScopeParser ; < nl > + } < nl > + < nl > + public BaseParser < RpcScope > getRpcScopeParser ( ) { < nl > + return rpcScopeParser ; < nl > + } < nl > + < nl > + public BaseParser < Update > getUpdateScopeParser ( ) { < nl > + return updateScopeParser ; < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java 
 index 16d0b14 . . 05060e1 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java 
 @ @ - 8 , 8 + 8 , 11 @ @ package im . actor . core . modules . api ; 
 import java . io . IOException ; 
 import java . util . ArrayList ; 
 import java . util . HashMap ; 
 + import java . util . List ; 
 
 import im . actor . core . api . ApiDifferenceUpdate ; 
 + import im . actor . core . api . ApiGroup ; 
 + import im . actor . core . api . ApiUser ; 
 import im . actor . core . api . base . FatSeqUpdate ; 
 import im . actor . core . api . base . SeqUpdate ; 
 import im . actor . core . api . base . SeqUpdateTooLong ; 
 @ @ - 31 , 6 + 34 , 7 @ @ import im . actor . runtime . Log ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . actors . Props ; 
 + import im . actor . runtime . actors . ask . AskCallback ; 
 
 public class SequenceActor extends ModuleActor { 
 
 @ @ - 114 , 8 + 118 , 8 @ @ public class SequenceActor extends ModuleActor { 
 
 private void onUpdateReceived ( Object u ) { 
 / / Building parameters 
 - int seq ; 
 - byte [ ] state ; 
 + final int seq ; 
 + final byte [ ] state ; 
 int type ; 
 byte [ ] body ; 
 if ( u instanceof SeqUpdate ) { 
 @ @ - 165 , 50 + 169 , 41 @ @ public class SequenceActor extends ModuleActor { 
 return ; 
 } 
 
 - / / Checking update 
 - Update update = null ; 
 - try { 
 - update = new UpdatesParser ( ) . read ( type , body ) ; 
 - } catch ( IOException e ) { 
 - Log . w ( TAG , " Unable to parse update : ignoring " ) ; 
 - e . printStackTrace ( ) ; 
 + List < ApiUser > users = null ; 
 + List < ApiGroup > groups = null ; 
 + if ( u instanceof FatSeqUpdate ) { 
 + FatSeqUpdate fatSeqUpdate = ( FatSeqUpdate ) u ; 
 + users = fatSeqUpdate . getUsers ( ) ; 
 + groups = fatSeqUpdate . getGroups ( ) ; 
 } 
 + ask ( sequenceHandler , new SequenceHandlerActor . SeqUpdate ( type , body , users , groups ) , new AskCallback ( ) { 
 
 - if ( update ! = null ) { 
 - if ( ( ! ( u instanceof FatSeqUpdate ) ) & & processor . isCausesInvalidation ( update ) ) { 
 - Log . w ( TAG , " Message causes invalidation " ) ; 
 - invalidate ( ) ; 
 - return ; 
 - } 
 - 
 - / / Processing update 
 - Log . d ( TAG , " Processing update : " + update ) ; 
 + @ Override 
 + public void onResult ( Object obj ) { 
 + Log . d ( TAG , " Seq Update onResult " ) ; 
 
 - if ( u instanceof FatSeqUpdate ) { 
 - FatSeqUpdate fatSeqUpdate = ( FatSeqUpdate ) u ; 
 - processor . applyRelated ( fatSeqUpdate . getUsers ( ) , fatSeqUpdate . getGroups ( ) , false ) ; 
 - } 
 + / / Saving state 
 + SequenceActor . this . seq = seq ; 
 + SequenceActor . this . state = state ; 
 + preferences ( ) . putInt ( KEY _ SEQ , seq ) ; 
 + preferences ( ) . putBytes ( KEY _ STATE , state ) ; 
 
 - processor . processUpdate ( update ) ; 
 + checkRunnables ( ) ; 
 + checkFuture ( ) ; 
 
 - if ( u instanceof FatSeqUpdate ) { 
 - FatSeqUpdate fatSeqUpdate = ( FatSeqUpdate ) u ; 
 - processor . applyRelated ( fatSeqUpdate . getUsers ( ) , fatSeqUpdate . getGroups ( ) , true ) ; 
 + / / Faaaaaar away 
 + isTimerStarted = false ; 
 + self ( ) . sendOnce ( new ForceInvalidate ( ) , 24 * 60 * 60 * 1000L ) ; 
 } 
 - } 
 - 
 - / / Saving state 
 - this . seq = seq ; 
 - this . state = state ; 
 - preferences ( ) . putInt ( KEY _ SEQ , seq ) ; 
 - preferences ( ) . putBytes ( KEY _ STATE , state ) ; 
 
 - checkRunnables ( ) ; 
 - checkFuture ( ) ; 
 + @ Override 
 + public void onError ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + Log . d ( TAG , " Seq Update required difference " ) ; 
 + invalidate ( ) ; 
 + } 
 + } ) ; 
 
 - / / Faaaaaar away 
 - isTimerStarted = false ; 
 - self ( ) . sendOnce ( new ForceInvalidate ( ) , 24 * 60 * 60 * 1000L ) ; 
 } 
 
 private void invalidate ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java 
 index 12f2f94 . . f782008 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java 
 @ @ - 1 , 10 + 1 , 18 @ @ 
 package im . actor . core . modules . api ; 
 
 + import java . io . IOException ; 
 + import java . util . List ; 
 + 
 + import im . actor . core . api . ApiGroup ; 
 + import im . actor . core . api . ApiUser ; 
 + import im . actor . core . api . parser . UpdatesParser ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . updates . UpdateProcessor ; 
 import im . actor . core . util . ModuleActor ; 
 import im . actor . core . network . parser . Update ; 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . actors . Future ; 
 + import im . actor . runtime . actors . Promise ; 
 
 public class SequenceHandlerActor extends ModuleActor { 
 
 @ @ - 18 , 21 + 26 , 65 @ @ public class SequenceHandlerActor extends ModuleActor { 
 this . processor = processor ; 
 } 
 
 + private void onWeakUpdateReceived ( Update update , long date ) { 
 + Log . d ( TAG , " Processing weak update : " + update ) ; 
 + this . processor . processWeakUpdate ( update , date ) ; 
 + } 
 + 
 + private void onSeqUpdate ( int type , byte [ ] body , List < ApiUser > users , 
 + List < ApiGroup > groups , Future future ) { 
 + 
 + Update update ; 
 + try { 
 + update = new UpdatesParser ( ) . read ( type , body ) ; 
 + } catch ( IOException e ) { 
 + Log . w ( TAG , " Unable to parse update : ignoring " ) ; 
 + Log . e ( TAG , e ) ; 
 + future . onResult ( ) ; 
 + return ; 
 + } 
 + 
 + if ( groups = = null | | users = = null ) { 
 + if ( processor . isCausesInvalidation ( update ) ) { 
 + Log . w ( TAG , " Difference is required " ) ; 
 + future . onError ( new RuntimeException ( " Difference is required " ) ) ; 
 + return ; 
 + } 
 + } 
 + 
 + / / Processing update 
 + Log . d ( TAG , " Processing update : " + update ) ; 
 + 
 + if ( groups ! = null & & users ! = null ) { 
 + processor . applyRelated ( users , groups , false ) ; 
 + } 
 + 
 + processor . processUpdate ( update ) ; 
 + 
 + if ( groups ! = null & & users ! = null ) { 
 + processor . applyRelated ( users , groups , true ) ; 
 + } 
 + 
 + Log . d ( TAG , " Processing update success " ) ; 
 + future . onResult ( ) ; 
 + } 
 + 
 @ Override 
 public boolean onAsk ( Object message , Future future ) { 
 if ( message instanceof WeakUpdate ) { 
 WeakUpdate weakUpdate = ( WeakUpdate ) message ; 
 onWeakUpdateReceived ( weakUpdate . getUpdate ( ) , weakUpdate . getDate ( ) ) ; 
 return true ; 
 + } else if ( message instanceof SeqUpdate ) { 
 + SeqUpdate seqUpdate = ( SeqUpdate ) message ; 
 + onSeqUpdate ( seqUpdate . type , seqUpdate . body , 
 + seqUpdate . users , seqUpdate . groups , future ) ; 
 + return false ; 
 } else { 
 return super . onAsk ( message , future ) ; 
 } 
 } 
 
 - private void onWeakUpdateReceived ( Update update , long date ) { 
 - this . processor . processWeakUpdate ( update , date ) ; 
 - } 
 - 
 public static class WeakUpdate { 
 
 private Update update ; 
 @ @ - 51 , 4 + 103 , 35 @ @ public class SequenceHandlerActor extends ModuleActor { 
 return update ; 
 } 
 } 
 + 
 + public static class SeqUpdate { 
 + 
 + private int type ; 
 + private byte [ ] body ; 
 + private List < ApiUser > users ; 
 + private List < ApiGroup > groups ; 
 + 
 + public SeqUpdate ( int type , byte [ ] body , List < ApiUser > users , List < ApiGroup > groups ) { 
 + this . type = type ; 
 + this . body = body ; 
 + this . users = users ; 
 + this . groups = groups ; 
 + } 
 + 
 + public int getType ( ) { 
 + return type ; 
 + } 
 + 
 + public byte [ ] getBody ( ) { 
 + return body ; 
 + } 
 + 
 + public List < ApiUser > getUsers ( ) { 
 + return users ; 
 + } 
 + 
 + public List < ApiGroup > getGroups ( ) { 
 + return groups ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java 
 index de854e1 . . 60f1590 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java 
 @ @ - 13 , 7 + 13 , 6 @ @ import im . actor . core . api . base . SeqUpdate ; 
 import im . actor . core . events . NewSessionCreated ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 - import im . actor . core . modules . api . SequenceActor ; 
 import im . actor . core . modules . updates . internal . ExecuteAfter ; 
 import im . actor . core . modules . updates . internal . RelatedResponse ; 
 import im . actor . core . network . parser . Update ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java 
 index fd68d93 . . 83172fc 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java 
 @ @ - 24 , 21 + 24 , 36 @ @ import im . actor . core . viewmodel . Command ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . core . viewmodel . UserVM ; 
 import im . actor . runtime . Storage ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . actors . Props ; 
 import im . actor . runtime . mvvm . MVVMCollection ; 
 import im . actor . runtime . storage . KeyValueEngine ; 
 
 + import static im . actor . runtime . actors . ActorSystem . system ; 
 + 
 public class UsersModule extends AbsModule { 
 
 + private ActorRef usersUpdatesActor ; 
 private KeyValueEngine < User > users ; 
 private MVVMCollection < User , UserVM > collection ; 
 
 - public UsersModule ( ModuleContext context ) { 
 + public UsersModule ( final ModuleContext context ) { 
 super ( context ) ; 
 
 this . collection = Storage . createKeyValue ( STORAGE _ USERS , UserVM . CREATOR ( context ( ) ) , User . CREATOR ) ; 
 this . users = collection . getEngine ( ) ; 
 + 
 + usersUpdatesActor = system ( ) . actorOf ( Props . create ( UsersUpdatesActor . class , new ActorCreator < UsersUpdatesActor > ( ) { 
 + @ Override 
 + public UsersUpdatesActor create ( ) { 
 + return new UsersUpdatesActor ( context ) ; 
 + } 
 + } ) , " sequence / user " ) ; 
 } 
 
 + / / Model 
 + 
 public KeyValueEngine < User > getUsersStorage ( ) { 
 return users ; 
 } 
 @ @ - 47 , 6 + 62 , 12 @ @ public class UsersModule extends AbsModule { 
 return collection ; 
 } 
 
 + public ActorRef getUsersUpdatesActor ( ) { 
 + return usersUpdatesActor ; 
 + } 
 + 
 + / / Actions 
 + 
 public Command < Boolean > editMyName ( final String newName ) { 
 return new Command < Boolean > ( ) { 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java 
 index d06d34f . . bb5dc8d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java 
 @ @ - 52 , 7 + 52 , 6 @ @ public class UsersProcessor extends AbsModule implements Processor { 
 } 
 } 
 
 - 
 @ Verified 
 public boolean hasUsers ( Collection < Integer > uids ) { 
 for ( Integer uid : uids ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdatesActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdatesActor . java 
 index 1acbb32 . . 650e19e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdatesActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdatesActor . java 
 @ @ - 2 , 9 + 2 , 45 @ @ package im . actor . core . modules . users ; 
 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . util . ModuleActor ; 
 + import im . actor . runtime . actors . Future ; 
 
 class UsersUpdatesActor extends ModuleActor { 
 + 
 public UsersUpdatesActor ( ModuleContext context ) { 
 super ( context ) ; 
 } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + / / context ( ) . getUpdatesModule ( ) . 
 + } 
 + 
 + private void checkUsers ( Integer [ ] uids , Future future ) { 
 + for ( int uid : uids ) { 
 + if ( users ( ) . getValue ( uid ) = = null ) { 
 + future . onResult ( false ) ; 
 + return ; 
 + } 
 + } 
 + 
 + future . onResult ( true ) ; 
 + } 
 + 
 + @ Override 
 + public boolean onAsk ( Object message , Future future ) { 
 + if ( message instanceof CheckUsers ) { 
 + checkUsers ( ( ( CheckUsers ) message ) . uids , future ) ; 
 + return false ; 
 + } else { 
 + return super . onAsk ( message , future ) ; 
 + } 
 + } 
 + 
 + public static class CheckUsers { 
 + private Integer [ ] uids ; 
 + 
 + public CheckUsers ( Integer [ ] uids ) { 
 + this . uids = uids ; 
 + } 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java 
 index d8ec6f9 . . ccda36c 100755 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Actor . java 
 @ @ - 238 , 6 + 238 , 6 @ @ public class Actor { 
 } 
 } 
 } ) ; 
 - dest . send ( new AskRequest < Object > ( message , new AskFuture < Object > ( id , self ( ) ) ) ) ; 
 + dest . send ( new AskRequest ( message , new AskFuture ( id , self ( ) ) ) ) ; 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Future . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Future . java 
 index d212312 . . aa7beea 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Future . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / Future . java 
 @ @ - 2 , 13 + 2 , 19 @ @ package im . actor . runtime . actors ; 
 
 import org . jetbrains . annotations . NotNull ; 
 
 - public abstract class Future < T > { 
 + import im . actor . runtime . actors . messages . Void ; 
 
 - private T result ; 
 + public abstract class Future { 
 + 
 + private Object result ; 
 private Exception exception ; 
 private boolean isFinished ; 
 
 - public void onResult ( @ NotNull T result ) { 
 + public void onResult ( ) { 
 + onResult ( Void . INSTANCE ) ; 
 + } 
 + 
 + public void onResult ( @ NotNull Object result ) { 
 if ( isFinished ) { 
 throw new RuntimeException ( " Already finished ! " ) ; 
 } 
 @ @ - 17 , 12 + 23 , 13 @ @ public abstract class Future < T > { 
 deliverResult ( ) ; 
 } 
 
 - public void onError ( @ NotNull Exception e ) { 
 + public void onError ( @ NotNull Exception e ) { 
 if ( isFinished ) { 
 throw new RuntimeException ( " Already finished ! " ) ; 
 } 
 this . isFinished = true ; 
 this . exception = e ; 
 + deliverResult ( ) ; 
 } 
 
 protected abstract void deliverResult ( ) ; 
 @ @ - 32 , 10 + 39 , 10 @ @ public abstract class Future < T > { 
 } 
 
 public boolean isSuccess ( ) { 
 - return isFinished & & exception ! = null ; 
 + return isFinished & & exception = = null ; 
 } 
 
 - public T getResult ( ) { 
 + public Object getResult ( ) { 
 return result ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskFuture . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskFuture . java 
 index f017a2c . . c750d50 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskFuture . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskFuture . java 
 @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . runtime . actors . ask ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . actors . Future ; 
 
 - public class AskFuture < T > extends Future < T > { 
 + public class AskFuture extends Future { 
 
 private ActorRef receiver ; 
 private long id ; 
 @ @ - 16 , 7 + 16 , 7 @ @ public class AskFuture < T > extends Future < T > { 
 @ Override 
 protected void deliverResult ( ) { 
 if ( isSuccess ( ) ) { 
 - receiver . send ( new AskResult < T > ( id , getResult ( ) ) ) ; 
 + receiver . send ( new AskResult ( id , getResult ( ) ) ) ; 
 } else { 
 receiver . send ( new AskError ( id , getException ( ) ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskRequest . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskRequest . java 
 index f3d2497 . . 3cf7491 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskRequest . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskRequest . java 
 @ @ - 2 , 11 + 2 , 11 @ @ package im . actor . runtime . actors . ask ; 
 
 import im . actor . runtime . actors . Future ; 
 
 - public class AskRequest < T > { 
 + public class AskRequest { 
 private final Object message ; 
 - private final Future < T > future ; 
 + private final Future future ; 
 
 - public AskRequest ( Object message , Future < T > future ) { 
 + public AskRequest ( Object message , Future future ) { 
 this . message = message ; 
 this . future = future ; 
 } 
 @ @ - 15 , 7 + 15 , 7 @ @ public class AskRequest < T > { 
 return message ; 
 } 
 
 - public Future < T > getFuture ( ) { 
 + public Future getFuture ( ) { 
 return future ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskResult . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskResult . java 
 index 4c78589 . . cd55922 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskResult . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskResult . java 
 @ @ - 1 , 11 + 1 , 11 @ @ 
 package im . actor . runtime . actors . ask ; 
 
 - public class AskResult < T > { 
 + public class AskResult { 
 
 - private T result ; 
 + private Object result ; 
 private long id ; 
 
 - public AskResult ( long id , T result ) { 
 + public AskResult ( long id , Object result ) { 
 this . result = result ; 
 this . id = id ; 
 } 
 @ @ - 14 , 7 + 14 , 7 @ @ public class AskResult < T > { 
 return id ; 
 } 
 
 - public T getResult ( ) { 
 + public Object getResult ( ) { 
 return result ; 
 } 
 }

NEAREST DIFF:
diff - - git a / . gitignore b / . gitignore 
 index a882b44 . . 59a9cde 100644 
 - - - a / . gitignore 
 + + + b / . gitignore 
 @ @ - 114 , 3 + 114 , 4 @ @ actor - sdk / sdk - ios / ActorSDK . xcworkspace / xcuserdata 
 actor - sdk / sdk - ios / Pods 
 actor - sdk / sdk - ios / ActorSDK . xcodeproj / xcuserdata 
 actor - sdk / sdk - ios / ActorSDK . xcworkspace 
 + actor - sdk / sdk - extension / ext / build 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java 
 index 7aadc31 . . 29d746f 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Configuration . java 
 @ @ - 11 , 6 + 11 , 8 @ @ import im . actor . runtime . mtproto . ConnectionEndpoint ; 
 * / 
 public class Configuration { 
 
 + private final ConfigurationExtension [ ] extensions ; 
 + 
 private final ConnectionEndpoint [ ] endpoints ; 
 
 private PhoneBookProvider phoneBookProvider ; 
 @ @ - 44 , 7 + 46 , 8 @ @ public class Configuration { 
 PlatformType platformType , 
 int minDelay , 
 int maxDelay , 
 - int maxFailureCount ) { 
 + int maxFailureCount , 
 + ConfigurationExtension [ ] extensions ) { 
 this . endpoints = endpoints ; 
 this . phoneBookProvider = phoneBookProvider ; 
 this . enableContactsLogging = enableContactsLogging ; 
 @ @ - 57 , 6 + 60 , 16 @ @ public class Configuration { 
 this . minDelay = minDelay ; 
 this . maxDelay = maxDelay ; 
 this . maxFailureCount = maxFailureCount ; 
 + this . extensions = extensions ; 
 + } 
 + 
 + / * * 
 + * Get configured extensions 
 + * 
 + * @ return extensions 
 + * / 
 + public ConfigurationExtension [ ] getExtensions ( ) { 
 + return extensions ; 
 } 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 index b3fba86 . . dff56cb 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 @ @ - 17 , 6 + 17 , 7 @ @ import im . actor . runtime . mtproto . ConnectionEndpoint ; 
 * / 
 public class ConfigurationBuilder { 
 
 + private ArrayList < ConfigurationExtension > extensions = new ArrayList < ConfigurationExtension > ( ) ; 
 private ArrayList < ConnectionEndpoint > endpoints = new ArrayList < ConnectionEndpoint > ( ) ; 
 
 private PhoneBookProvider phoneBookProvider ; 
 @ @ - 178 , 6 + 179 , 18 @ @ public class ConfigurationBuilder { 
 } 
 
 / * * 
 + * Adding app extension 
 + * 
 + * @ param key extension key 
 + * @ param extension extension 
 + * @ return this 
 + * / 
 + public ConfigurationBuilder addExtension ( String key , Extension extension ) { 
 + this . extensions . add ( new ConfigurationExtension ( key , extension ) ) ; 
 + return this ; 
 + } 
 + 
 + / * * 
 * Adding Endpoint for API 
 * Valid URLs are : 
 * tcp : / / [ host ] : [ port ] 
 @ @ - 258 , 6 + 271 , 7 @ @ public class ConfigurationBuilder { 
 phoneBookProvider , notificationProvider , 
 apiConfiguration , enableContactsLogging , enableNetworkLogging , 
 enableFilesLogging , deviceCategory , platformType , 
 - minDelay , maxDelay , maxFailureCount ) ; 
 + minDelay , maxDelay , maxFailureCount , 
 + extensions . toArray ( new ConfigurationExtension [ extensions . size ( ) ] ) ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationExtension . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationExtension . java 
 new file mode 100644 
 index 0000000 . . e964a7d 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / ConfigurationExtension . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package im . actor . core ; 
 + 
 + public class ConfigurationExtension { 
 + 
 + private String key ; 
 + private Extension extension ; 
 + 
 + public ConfigurationExtension ( String key , Extension extension ) { 
 + this . key = key ; 
 + this . extension = extension ; 
 + } 
 + 
 + public String getKey ( ) { 
 + return key ; 
 + } 
 + 
 + public Extension getExtension ( ) { 
 + return extension ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java 
 index f251256 . . ea6736b 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / Extension . java 
 @ @ - 8 , 13 + 8 , 6 @ @ import im . actor . core . modules . ModuleContext ; 
 public interface Extension { 
 
 / * * 
 - * Get unique extension key 
 - * 
 - * @ return extension key 
 - * / 
 - String getExtensionKey ( ) ; 
 - 
 - / * * 
 * Performing registration of extension before Messenger run 
 * 
 * @ param context Module context 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java 
 index 9088883 . . f97ea13 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ApiModule . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import im . actor . core . modules . utils . PreferenceApiStorage ; 
 import im . actor . core . network . ActorApi ; 
 import im . actor . core . network . ActorApiCallback ; 
 import im . actor . core . network . Endpoints ; 
 + import im . actor . core . network . parser . ApiParserConfig ; 
 import im . actor . core . network . parser . Request ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 @ @ - 21 , 6 + 22 , 7 @ @ public class ApiModule extends AbsModule implements BusSubscriber { 
 
 private final ActorApi actorApi ; 
 private final ActorRef persistentRequests ; 
 + private final ApiParserConfig parserConfig = new ApiParserConfig ( ) ; 
 
 public ApiModule ( Modules context ) { 
 super ( context ) ; 
 @ @ - 31 , 7 + 33 , 7 @ @ public class ApiModule extends AbsModule implements BusSubscriber { 
 context ( ) . getConfiguration ( ) . isEnableNetworkLogging ( ) , 
 context ( ) . getConfiguration ( ) . getMinDelay ( ) , 
 context ( ) . getConfiguration ( ) . getMaxDelay ( ) , 
 - context ( ) . getConfiguration ( ) . getMaxFailureCount ( ) ) ; 
 + context ( ) . getConfiguration ( ) . getMaxFailureCount ( ) , parserConfig ) ; 
 
 context . getEvents ( ) . subscribe ( this , AppVisibleChanged . EVENT ) ; 
 
 @ @ - 43 , 12 + 45 , 25 @ @ public class ApiModule extends AbsModule implements BusSubscriber { 
 } ) , " api / persistence " ) ; 
 } 
 
 - 
 + / * * 
 + * Get Actor API instance 
 + * 
 + * @ return Actor API instance 
 + * / 
 public ActorApi getActorApi ( ) { 
 return actorApi ; 
 } 
 
 / * * 
 + * Get API Parser configuration 
 + * 
 + * @ return Actor API parser config 
 + * / 
 + public ApiParserConfig getParserConfig ( ) { 
 + return parserConfig ; 
 + } 
 + 
 + / * * 
 * Performing persist request . Keep repeating request even after application restart 
 * 
 * @ param request request 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Extensions . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Extensions . java 
 new file mode 100644 
 index 0000000 . . 6877c1d 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Extensions . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package im . actor . core . modules ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . Extension ; 
 + 
 + public class Extensions extends AbsModule { 
 + 
 + private ArrayList < ExtensionRef > extensionRefs = new ArrayList < ExtensionRef > ( ) ; 
 + 
 + public Extensions ( ModuleContext context ) { 
 + super ( context ) ; 
 + } 
 + 
 + public void registerExtension ( String key , Extension extension ) { 
 + extensionRefs . add ( new ExtensionRef ( key , extension ) ) ; 
 + } 
 + 
 + public Extension findExtension ( String key ) { 
 + for ( ExtensionRef r : extensionRefs ) { 
 + if ( r . getKey ( ) . equals ( key ) ) { 
 + return r . getExtension ( ) ; 
 + } 
 + } 
 + return null ; 
 + } 
 + 
 + public void registerExtensions ( ) { 
 + for ( ExtensionRef r : extensionRefs ) { 
 + r . getExtension ( ) . registerExtension ( context ( ) ) ; 
 + } 
 + } 
 + 
 + public void runExtensions ( ) { 
 + for ( ExtensionRef r : extensionRefs ) { 
 + r . getExtension ( ) . runExtension ( ) ; 
 + } 
 + } 
 + 
 + private class ExtensionRef { 
 + private String key ; 
 + private Extension extension ; 
 + 
 + public ExtensionRef ( String key , Extension extension ) { 
 + this . key = key ; 
 + this . extension = extension ; 
 + } 
 + 
 + public String getKey ( ) { 
 + return key ; 
 + } 
 + 
 + public Extension getExtension ( ) { 
 + return extension ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java 
 index 36a6d73 . . f5c5862 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / ModuleContext . java 
 @ @ - 83 , 4 + 83 , 6 @ @ public interface ModuleContext { 
 Messenger getMessenger ( ) ; 
 
 MentionsModule getMentions ( ) ; 
 + 
 + Extensions getExtensions ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java 
 index a82d6b9 . . 9f80b34 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / Modules . java 
 @ @ - 5 , 7 + 5 , 7 @ @ 
 package im . actor . core . modules ; 
 
 import im . actor . core . Configuration ; 
 - import im . actor . core . Extension ; 
 + import im . actor . core . ConfigurationExtension ; 
 import im . actor . core . Messenger ; 
 import im . actor . core . i18n . I18nEngine ; 
 import im . actor . core . modules . internal . AppStateModule ; 
 @ @ - 49 , 6 + 49 , 7 @ @ public class Modules implements ModuleContext { 
 private final AppStateModule appStateModule ; 
 private final ExternalModule external ; 
 private final Authentication authentication ; 
 + private final Extensions extensions ; 
 
 / / Modules for authenticated users 
 private volatile Updates updates ; 
 @ @ - 86 , 6 + 87 , 9 @ @ public class Modules implements ModuleContext { 
 timing . section ( " API " ) ; 
 this . api = new ApiModule ( this ) ; 
 
 + timing . section ( " Extensions " ) ; 
 + this . extensions = new Extensions ( this ) ; 
 + 
 timing . section ( " App State " ) ; 
 this . appStateModule = new AppStateModule ( this ) ; 
 
 @ @ - 95 , 6 + 99 , 12 @ @ public class Modules implements ModuleContext { 
 timing . section ( " Pushes " ) ; 
 this . pushes = new PushesModule ( this ) ; 
 
 + timing . section ( " Extensions " ) ; 
 + for ( ConfigurationExtension e : configuration . getExtensions ( ) ) { 
 + this . extensions . registerExtension ( e . getKey ( ) , e . getExtension ( ) ) ; 
 + } 
 + this . extensions . registerExtensions ( ) ; 
 + 
 timing . section ( " Auth " ) ; 
 this . authentication = new Authentication ( this ) ; 
 this . authentication . run ( ) ; 
 @ @ - 153 , 6 + 163 , 8 @ @ public class Modules implements ModuleContext { 
 messages . run ( ) ; 
 timing . section ( " Updates " ) ; 
 updates . run ( ) ; 
 + timing . section ( " Extensions " ) ; 
 + extensions . runExtensions ( ) ; 
 timing . end ( ) ; 
 
 messenger . onLoggedIn ( ) ; 
 @ @ - 271 , 6 + 283 , 11 @ @ public class Modules implements ModuleContext { 
 return mentions ; 
 } 
 
 + @ Override 
 + public Extensions getExtensions ( ) { 
 + return extensions ; 
 + } 
 + 
 public EventBus getEvents ( ) { 
 return events ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java 
 index e0f2058 . . a019d60 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / ActorApi . java 
 @ @ - 5 , 6 + 5 , 7 @ @ 
 package im . actor . core . network ; 
 
 import im . actor . core . api . ApiVersion ; 
 + import im . actor . core . network . parser . ApiParserConfig ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . core . network . api . ApiBroker ; 
 import im . actor . core . network . parser . Request ; 
 @ @ - 42 , 7 + 43 , 8 @ @ public class ActorApi { 
 public ActorApi ( Endpoints endpoints , AuthKeyStorage keyStorage , ActorApiCallback callback , 
 boolean isEnableLog , int minDelay , 
 int maxDelay , 
 - int maxFailureCount ) { 
 + int maxFailureCount , 
 + ApiParserConfig parserConfig ) { 
 this . endpoints = endpoints ; 
 this . keyStorage = keyStorage ; 
 this . callback = callback ; 
 @ @ - 51 , 7 + 53 , 7 @ @ public class ActorApi { 
 this . maxDelay = maxDelay ; 
 this . maxFailureCount = maxFailureCount ; 
 this . apiBroker = ApiBroker . get ( endpoints , keyStorage , callback , isEnableLog , 
 - NEXT _ ID . get ( ) , minDelay , maxDelay , maxFailureCount ) ; 
 + NEXT _ ID . get ( ) , minDelay , maxDelay , maxFailureCount , parserConfig ) ; 
 } 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 index 9786886 . . 207ffca 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import java . io . IOException ; 
 import java . util . HashMap ; 
 
 import im . actor . core . api . parser . RpcParser ; 
 + import im . actor . core . network . parser . ApiParserConfig ; 
 import im . actor . runtime . * ; 
 import im . actor . runtime . Runtime ; 
 import im . actor . runtime . actors . Actor ; 
 @ @ - 46 , 13 + 47 , 14 @ @ public class ApiBroker extends Actor { 
 public static ActorRef get ( final Endpoints endpoints , final AuthKeyStorage keyStorage , final ActorApiCallback callback , 
 final boolean isEnableLog , int id , final int minDelay , 
 final int maxDelay , 
 - final int maxFailureCount ) { 
 + final int maxFailureCount , 
 + final ApiParserConfig parserConfig ) { 
 return ActorSystem . system ( ) . actorOf ( Props . create ( ApiBroker . class , new ActorCreator < ApiBroker > ( ) { 
 @ Override 
 public ApiBroker create ( ) { 
 return new ApiBroker ( endpoints , keyStorage , callback , isEnableLog , minDelay , 
 maxDelay , 
 - maxFailureCount ) ; 
 + maxFailureCount , parserConfig ) ; 
 } 
 } ) . changeDispatcher ( " network " ) , " api / broker # " + id ) ; 
 } 
 @ @ - 77 , 9 + 79 , 12 @ @ public class ApiBroker extends Actor { 
 
 private ExponentialBackoff authIdBackOff ; 
 
 + private ApiParserConfig parserConfig ; 
 + 
 public ApiBroker ( Endpoints endpoints , AuthKeyStorage keyStorage , 
 ActorApiCallback callback , 
 - boolean isEnableLog , int minDelay , int maxDelay , int maxFailureCount ) { 
 + boolean isEnableLog , int minDelay , int maxDelay , int maxFailureCount , 
 + ApiParserConfig parserConfig ) { 
 this . isEnableLog = isEnableLog ; 
 this . endpoints = endpoints ; 
 this . keyStorage = keyStorage ; 
 @ @ - 87 , 7 + 92 , 8 @ @ public class ApiBroker extends Actor { 
 this . minDelay = minDelay ; 
 this . maxDelay = maxDelay ; 
 this . maxFailureCount = maxFailureCount ; 
 - authIdBackOff = new ExponentialBackoff ( minDelay , maxDelay , maxFailureCount ) ; 
 + this . authIdBackOff = new ExponentialBackoff ( minDelay , maxDelay , maxFailureCount ) ; 
 + this . parserConfig = parserConfig ; 
 } 
 
 @ Override 
 @ @ - 249 , 7 + 255 , 7 @ @ public class ApiBroker extends Actor { 
 
 Response response ; 
 try { 
 - response = ( Response ) new RpcParser ( ) . read ( ok . responseType , ok . payload ) ; 
 + response = ( Response ) parserConfig . parseRpc ( ok . responseType , ok . payload ) ; 
 } catch ( IOException e ) { 
 e . printStackTrace ( ) ; 
 return ; 
 @ @ - 337 , 7 + 343 , 7 @ @ public class ApiBroker extends Actor { 
 
 RpcScope updateBox ; 
 try { 
 - updateBox = new RpcParser ( ) . read ( type , body ) ; 
 + updateBox = parserConfig . parseRpc ( type , body ) ; 
 } catch ( IOException e ) { 
 e . printStackTrace ( ) ; 
 Log . w ( TAG , " Broken update box " ) ; 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ApiParserConfig . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ApiParserConfig . java 
 new file mode 100644 
 index 0000000 . . d54fc83 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ApiParserConfig . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package im . actor . core . network . parser ; 
 + 
 + import java . io . IOException ; 
 + import java . util . concurrent . CopyOnWriteArrayList ; 
 + 
 + import im . actor . core . api . parser . RpcParser ; 
 + import im . actor . core . api . parser . UpdatesParser ; 
 + 
 + public class ApiParserConfig { 
 + 
 + private RpcParser rpcRarser = new RpcParser ( ) ; 
 + private UpdatesParser updatesParser = new UpdatesParser ( ) ; 
 + private CopyOnWriteArrayList < ParsingExtension > extensions = new CopyOnWriteArrayList < ParsingExtension > ( ) ; 
 + 
 + public void addExtension ( ParsingExtension extension ) { 
 + extensions . add ( extension ) ; 
 + } 
 + 
 + public RpcScope parseRpc ( int header , byte [ ] content ) throws IOException { 
 + for ( ParsingExtension ex : extensions ) { 
 + try { 
 + return ex . getRpcScopeParser ( ) . read ( header , content ) ; 
 + } catch ( Exception e ) { 
 + / / Ignore 
 + } 
 + } 
 + 
 + return rpcRarser . read ( header , content ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ParsingExtension . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ParsingExtension . java 
 new file mode 100644 
 index 0000000 . . dbcbf08 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / network / parser / ParsingExtension . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package im . actor . core . network . parser ; 
 + 
 + public class ParsingExtension { 
 + 
 + private BaseParser < RpcScope > rpcScopeParser ; 
 + 
 + private BaseParser < Update > updateScopeParser ; 
 + 
 + public ParsingExtension ( BaseParser < RpcScope > rpcScopeParser , BaseParser < Update > updateScopeParser ) { 
 + this . rpcScopeParser = rpcScopeParser ; 
 + this . updateScopeParser = updateScopeParser ; 
 + } 
 + 
 + public BaseParser < RpcScope > getRpcScopeParser ( ) { 
 + return rpcScopeParser ; 
 + } 
 + 
 + public BaseParser < Update > getUpdateScopeParser ( ) { 
 + return updateScopeParser ; 
 + } 
 + }
