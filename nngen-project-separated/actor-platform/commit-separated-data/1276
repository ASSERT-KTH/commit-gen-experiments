BLEU SCORE: 1.0

TEST MSG: Update key - creation . md
GENERATED MSG: Update key - creation . md

TEST DIFF (one line): diff - - git a / docs / protocol / key - creation . md b / docs / protocol / key - creation . md < nl > index 1081c92 . . 8c9dbf4 100644 < nl > - - - a / docs / protocol / key - creation . md < nl > + + + b / docs / protocol / key - creation . md < nl > @ @ - 11 , 6 + 11 , 21 @ @ This technique use [ TLS 1 . 2 RFC ] ( https : / / tools . ietf . org / html / rfc5246 ) for it ' s b < nl > 1 ) Not sending server certificates if not needed on every connection . < nl > 2 ) One DiffieHellman to build one shared secret without repeating on almost every reconnect . ( we will implement PFS in next revision of MTProto v2 ) < nl > 3 ) Using only Curve25519 and AES - CBC < nl > + 4 ) Extending master _ secret to make it 256 bytes long < nl > + < nl > + # Primitives < nl > + < nl > + SHA256 - based pseudo - random function ( https : / / tools . ietf . org / html / rfc5246 # section - 5 ) : < nl > + < nl > + ` ` ` < nl > + PRF ( secret : bytes , label : string , seed : bytes ) = P _ SHA256 ( secret , bytes ( label ) + seed ) ; < nl > + P _ SHA256 ( secret , seed ) = SHA256 ( secret , A ( 1 ) + seed ) + SHA256 ( secret , A ( 2 ) + seed ) + SHA256 ( secret , A ( 3 ) + seed ) + . . . < nl > + where A ( ) : < nl > + A ( 0 ) = seed < nl > + A ( i ) = HMAC _ hash ( secret , A ( i - 1 ) ) < nl > + ` ` ` < nl > + < nl > + Original key is too short - only 32 bytes and we need to extend key to more bytes in a secure way . Pseudo - code above is taken from TLS 1 . 2 RFC . Basic idea is to take some plain - text seed from client and server , add some fixed seed to avoid getting same hashes in different parts of a program . We use client and server seed for protecting from not that good random generators . Using text as fixed seed value is for cleaner code and specifications . In our Implementation we are performing * * 8 * * SHA256 calculations . < nl > < nl > # Changes in Transport ' s Package < nl > < nl > @ @ - 83 , 23 + 98 , 22 @ @ RequestDH { < nl > clientNonce : bytes < nl > / / Client ' s key used for encryption < nl > clientKey : bytes < nl > - / / Encrypted DH request < nl > - encrypted : bytes < nl > } < nl > ` ` ` < nl > < nl > Calculations < nl > ` ` ` < nl > pre _ master _ secret : = < result _ of _ dh > < nl > - master _ secret : = SHA256 ( pre _ master _ secret , " master secret " , clientNonce , ServerNonce ) < nl > - aes _ key : = subs ( encryption _ key , 0 , 16 ) < nl > - aes _ iv : = subs ( encryption _ key , 16 , 16 ) < nl > - encrypted : = AES - CBC ( < data > , aes _ key , aes _ iv ) < nl > + master _ secret : = PRF ( pre _ master _ secret , " master secret " , clientNonce + ServerNonce ) < nl > + verification : = PRF ( master _ secret , " client finished " , clientNonce + ServerNonce ) < nl > ` ` ` < nl > < nl > + master _ secret is resulted < nl > + < nl > ` ` ` < nl > ResponseDoDH { < nl > HEADER = 0xE7 < nl > randomId : long < nl > + verify : bytes < nl > } < nl > ` ` `
NEAREST DIFF (one line): diff - - git a / docs / protocol / key - creation . md b / docs / protocol / key - creation . md < nl > index 96cd3e8 . . 0d6ca1f 100644 < nl > - - - a / docs / protocol / key - creation . md < nl > + + + b / docs / protocol / key - creation . md < nl > @ @ - 72 , 8 + 72 , 8 @ @ RequestStartDH { < nl > / / Used keyId for Diffie - Hellman start < nl > keyId : long < nl > < nl > - / / DH parameter used for encryption < nl > - dh _ x : bytes < nl > + / / Client ' s key used for encryption < nl > + clientKey : bytes < nl > / / Encrypted DH request < nl > encrypted : bytes < nl > }

TEST DIFF:
diff - - git a / docs / protocol / key - creation . md b / docs / protocol / key - creation . md 
 index 1081c92 . . 8c9dbf4 100644 
 - - - a / docs / protocol / key - creation . md 
 + + + b / docs / protocol / key - creation . md 
 @ @ - 11 , 6 + 11 , 21 @ @ This technique use [ TLS 1 . 2 RFC ] ( https : / / tools . ietf . org / html / rfc5246 ) for it ' s b 
 1 ) Not sending server certificates if not needed on every connection . 
 2 ) One DiffieHellman to build one shared secret without repeating on almost every reconnect . ( we will implement PFS in next revision of MTProto v2 ) 
 3 ) Using only Curve25519 and AES - CBC 
 + 4 ) Extending master _ secret to make it 256 bytes long 
 + 
 + # Primitives 
 + 
 + SHA256 - based pseudo - random function ( https : / / tools . ietf . org / html / rfc5246 # section - 5 ) : 
 + 
 + ` ` ` 
 + PRF ( secret : bytes , label : string , seed : bytes ) = P _ SHA256 ( secret , bytes ( label ) + seed ) ; 
 + P _ SHA256 ( secret , seed ) = SHA256 ( secret , A ( 1 ) + seed ) + SHA256 ( secret , A ( 2 ) + seed ) + SHA256 ( secret , A ( 3 ) + seed ) + . . . 
 + where A ( ) : 
 + A ( 0 ) = seed 
 + A ( i ) = HMAC _ hash ( secret , A ( i - 1 ) ) 
 + ` ` ` 
 + 
 + Original key is too short - only 32 bytes and we need to extend key to more bytes in a secure way . Pseudo - code above is taken from TLS 1 . 2 RFC . Basic idea is to take some plain - text seed from client and server , add some fixed seed to avoid getting same hashes in different parts of a program . We use client and server seed for protecting from not that good random generators . Using text as fixed seed value is for cleaner code and specifications . In our Implementation we are performing * * 8 * * SHA256 calculations . 
 
 # Changes in Transport ' s Package 
 
 @ @ - 83 , 23 + 98 , 22 @ @ RequestDH { 
 clientNonce : bytes 
 / / Client ' s key used for encryption 
 clientKey : bytes 
 - / / Encrypted DH request 
 - encrypted : bytes 
 } 
 ` ` ` 
 
 Calculations 
 ` ` ` 
 pre _ master _ secret : = < result _ of _ dh > 
 - master _ secret : = SHA256 ( pre _ master _ secret , " master secret " , clientNonce , ServerNonce ) 
 - aes _ key : = subs ( encryption _ key , 0 , 16 ) 
 - aes _ iv : = subs ( encryption _ key , 16 , 16 ) 
 - encrypted : = AES - CBC ( < data > , aes _ key , aes _ iv ) 
 + master _ secret : = PRF ( pre _ master _ secret , " master secret " , clientNonce + ServerNonce ) 
 + verification : = PRF ( master _ secret , " client finished " , clientNonce + ServerNonce ) 
 ` ` ` 
 
 + master _ secret is resulted 
 + 
 ` ` ` 
 ResponseDoDH { 
 HEADER = 0xE7 
 randomId : long 
 + verify : bytes 
 } 
 ` ` `

NEAREST DIFF:
diff - - git a / docs / protocol / key - creation . md b / docs / protocol / key - creation . md 
 index 96cd3e8 . . 0d6ca1f 100644 
 - - - a / docs / protocol / key - creation . md 
 + + + b / docs / protocol / key - creation . md 
 @ @ - 72 , 8 + 72 , 8 @ @ RequestStartDH { 
 / / Used keyId for Diffie - Hellman start 
 keyId : long 
 
 - / / DH parameter used for encryption 
 - dh _ x : bytes 
 + / / Client ' s key used for encryption 
 + clientKey : bytes 
 / / Encrypted DH request 
 encrypted : bytes 
 }
