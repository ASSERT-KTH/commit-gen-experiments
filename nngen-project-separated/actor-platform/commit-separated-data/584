BLEU SCORE: 0.21200626759025185

TEST MSG: wip ( android ) : Passing new message read / receive dates
GENERATED MSG: chore ( android ) : move push register logic to lob

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesAdapter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesAdapter . java < nl > index e98384c . . a534113 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesAdapter . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesAdapter . java < nl > @ @ - 19 , 9 + 19 , 12 @ @ import im . actor . core . entity . content . StickerContent ; < nl > import im . actor . core . entity . content . TextContent ; < nl > import im . actor . core . entity . content . VideoContent ; < nl > import im . actor . core . entity . content . VoiceContent ; < nl > + import im . actor . core . viewmodel . ConversationVM ; < nl > import im . actor . runtime . generic . mvvm . BindedDisplayList ; < nl > import im . actor . runtime . json . JSONException ; < nl > import im . actor . runtime . json . JSONObject ; < nl > + import im . actor . runtime . mvvm . Value ; < nl > + import im . actor . runtime . mvvm . ValueChangedListener ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . R ; < nl > import im . actor . runtime . android . view . BindedListAdapter ; < nl > @ @ - 38 , 12 + 41 , 16 @ @ import im . actor . sdk . controllers . conversation . messages . TextHolder ; < nl > import im . actor . sdk . controllers . conversation . messages . UnsupportedHolder ; < nl > import im . actor . sdk . controllers . fragment . ActorBinder ; < nl > < nl > + import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > + < nl > public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { < nl > < nl > private MessagesFragment messagesFragment ; < nl > private Context context ; < nl > private long firstUnread = - 1 ; < nl > - protected HashMap < Long , Message > selected = new HashMap < Long , Message > ( ) ; < nl > + private long readDate ; < nl > + private long receiveDate ; < nl > + protected HashMap < Long , Message > selected = new HashMap < > ( ) ; < nl > private ActorBinder BINDER = new ActorBinder ( ) ; < nl > < nl > public MessagesAdapter ( BindedDisplayList < Message > displayList , < nl > @ @ - 52 , 6 + 59 , 19 @ @ public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { < nl > < nl > this . messagesFragment = messagesFragment ; < nl > this . context = context ; < nl > + ConversationVM conversationVM = messenger ( ) . getConversationVM ( messagesFragment . getPeer ( ) ) ; < nl > + BINDER . bind ( conversationVM . getReadDate ( ) , new ValueChangedListener < Long > ( ) { < nl > + @ Override < nl > + public void onChanged ( Long val , Value < Long > valueModel ) { < nl > + readDate = val ; < nl > + } < nl > + } ) ; < nl > + BINDER . bind ( conversationVM . getReceiveDate ( ) , new ValueChangedListener < Long > ( ) { < nl > + @ Override < nl > + public void onChanged ( Long val , Value < Long > valueModel ) { < nl > + receiveDate = val ; < nl > + } < nl > + } ) ; < nl > } < nl > < nl > public Message [ ] getSelected ( ) { < nl > @ @ - 88 , 6 + 108 , 14 @ @ public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { < nl > return firstUnread ; < nl > } < nl > < nl > + public long getReadDate ( ) { < nl > + return readDate ; < nl > + } < nl > + < nl > + public long getReceiveDate ( ) { < nl > + return receiveDate ; < nl > + } < nl > + < nl > public void setFirstUnread ( long firstUnread ) { < nl > this . firstUnread = firstUnread ; < nl > } < nl > @ @ - 214 , 7 + 242 , 7 @ @ public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { < nl > prev = getItem ( index + 1 ) ; < nl > } < nl > PreprocessedList list = ( ( PreprocessedList ) getPreprocessedList ( ) ) ; < nl > - dialogHolder . bindData ( item , prev , next , 0 , 0 , list . getPreprocessedData ( ) [ index ] ) ; < nl > + dialogHolder . bindData ( item , prev , next , readDate , receiveDate , list . getPreprocessedData ( ) [ index ] ) ; < nl > } < nl > < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java < nl > index d53733a . . 7177ce4 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java < nl > @ @ - 44 , 6 + 44 , 7 @ @ import im . actor . core . entity . content . PhotoContent ; < nl > import im . actor . core . entity . content . TextContent ; < nl > import im . actor . core . entity . content . VideoContent ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > + import im . actor . core . viewmodel . ConversationVM ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . sdk . ActorSDK ; < nl > @ @ - 80 , 7 + 81 , 7 @ @ public class MessagesFragment extends DisplayListFragment < Message , MessageHolder < nl > private Peer peer ; < nl > < nl > protected MessagesAdapter messagesAdapter ; < nl > - / / private ConversationVM conversationVM ; < nl > + private ConversationVM conversationVM ; < nl > private ActionMode actionMode ; < nl > private int onPauseSize = 0 ; < nl > private ImageView chatBackgroundView ; < nl > @ @ - 104 , 6 + 105 , 7 @ @ public class MessagesFragment extends DisplayListFragment < Message , MessageHolder < nl > public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { < nl > try { < nl > peer = Peer . fromBytes ( getArguments ( ) . getByteArray ( " EXTRA _ PEER " ) ) ; < nl > + conversationVM = messenger ( ) . getConversationVM ( peer ) ; < nl > } catch ( IOException e ) { < nl > throw new RuntimeException ( e ) ; < nl > } < nl > @ @ - 618 , 11 + 620 , 9 @ @ public class MessagesFragment extends DisplayListFragment < Message , MessageHolder < nl > @ Override < nl > public void onDestroyView ( ) { < nl > super . onDestroyView ( ) ; < nl > - / / if ( conversationVM ! = null ) { < nl > - / / conversationVM . release ( ) ; < nl > - / / conversationVM = null ; < nl > - / / } < nl > - messagesAdapter = null ; < nl > - < nl > + if ( messagesAdapter ! = null ) { < nl > + messagesAdapter . getBinder ( ) . unbindAll ( ) ; < nl > + messagesAdapter = null ; < nl > + } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / TextHolder . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / TextHolder . java < nl > index f7dfcf2 . . 4ae06ce 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / TextHolder . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / TextHolder . java < nl > @ @ - 101 , 19 + 101 , 20 @ @ public class TextHolder extends MessageHolder { < nl > < nl > if ( message . getSenderId ( ) = = myUid ( ) ) { < nl > status . setVisibility ( View . VISIBLE ) ; < nl > - < nl > switch ( message . getMessageState ( ) ) { < nl > case SENT : < nl > - status . setResource ( R . drawable . msg _ check _ 1 ) ; < nl > - status . setTint ( sentColor ) ; < nl > - break ; < nl > case RECEIVED : < nl > - status . setResource ( R . drawable . msg _ check _ 2 ) ; < nl > - status . setTint ( deliveredColor ) ; < nl > - break ; < nl > case READ : < nl > - status . setResource ( R . drawable . msg _ check _ 2 ) ; < nl > - status . setTint ( readColor ) ; < nl > + if ( message . getSortDate ( ) < = readDate ) { < nl > + status . setResource ( R . drawable . msg _ check _ 2 ) ; < nl > + status . setTint ( readColor ) ; < nl > + } else if ( message . getSortDate ( ) < = receiveDate ) { < nl > + status . setResource ( R . drawable . msg _ check _ 2 ) ; < nl > + status . setTint ( deliveredColor ) ; < nl > + } else { < nl > + status . setResource ( R . drawable . msg _ check _ 1 ) ; < nl > + status . setTint ( sentColor ) ; < nl > + } < nl > break ; < nl > default : < nl > case PENDING : < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java < nl > index 77e834e . . 80820ee 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java < nl > @ @ - 20 , 11 + 20 , 16 @ @ public class ConversationVM extends BaseValueModel < ConversationState > { < nl > private BooleanValueModel isLoaded ; < nl > private ValueModel < Long > ownReadDate ; < nl > < nl > + private ValueModel < Long > readDate ; < nl > + private ValueModel < Long > receiveDate ; < nl > + < nl > public ConversationVM ( ConversationState rawObj ) { < nl > super ( rawObj ) ; < nl > < nl > isLoaded = new BooleanValueModel ( " chat . is _ loaded . " + rawObj . getPeer ( ) , rawObj . isLoaded ( ) ) ; < nl > - ownReadDate = new ValueModel < > ( " chat . read _ date " + rawObj . getPeer ( ) , rawObj . getInReadDate ( ) ) ; < nl > + ownReadDate = new ValueModel < > ( " chat . own _ read _ date " + rawObj . getPeer ( ) , rawObj . getInReadDate ( ) ) ; < nl > + readDate = new ValueModel < > ( " chat . read _ date " + rawObj . getPeer ( ) , rawObj . getOutReadDate ( ) ) ; < nl > + receiveDate = new ValueModel < > ( " chat . receive _ date " + rawObj . getPeer ( ) , rawObj . getOutReceiveState ( ) ) ; < nl > } < nl > < nl > public BooleanValueModel getIsLoaded ( ) { < nl > @ @ - 35 , 9 + 40 , 19 @ @ public class ConversationVM extends BaseValueModel < ConversationState > { < nl > return ownReadDate ; < nl > } < nl > < nl > + public ValueModel < Long > getReadDate ( ) { < nl > + return readDate ; < nl > + } < nl > + < nl > + public ValueModel < Long > getReceiveDate ( ) { < nl > + return receiveDate ; < nl > + } < nl > + < nl > @ Override < nl > protected void updateValues ( ConversationState rawObj ) { < nl > isLoaded . change ( rawObj . isLoaded ( ) ) ; < nl > ownReadDate . change ( rawObj . getInReadDate ( ) ) ; < nl > + readDate . change ( rawObj . getOutReadDate ( ) ) ; < nl > + receiveDate . change ( rawObj . getOutReceiveState ( ) ) ; < nl > } < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java < nl > index 0aa7127 . . 35e9768 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java < nl > + + + b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java < nl > @ @ - 10 , 9 + 10 , 57 @ @ import im . actor . runtime . Log ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . core . ActorPushManager ; < nl > < nl > - public class PushManager extends ActorPushManager { < nl > + public class PushManager implements ActorPushManager { < nl > + private static final String TAG = " im . actor . push . PushManager " ; < nl > + private boolean isRegistered ; < nl > + < nl > @ Override < nl > - public String tryRegisterPush ( Context context ) { < nl > + public void registerPush ( final Context context ) { < nl > + isRegistered = ActorSDK . sharedActor ( ) . getMessenger ( ) . getPreferences ( ) . getBool ( " push _ registered " , false ) ; < nl > + < nl > + if ( ! isRegistered ) { < nl > + Log . d ( TAG , " Requesting push token . . . " ) ; < nl > + < nl > + / / TODO : Add backoff < nl > + new Thread ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + while ( true ) { < nl > + try { < nl > + String regId = tryRegisterPush ( context ) ; < nl > + if ( regId ! = null ) { < nl > + Log . d ( TAG , " Token loaded " ) ; < nl > + onPushRegistered ( regId ) ; < nl > + return ; < nl > + } else { < nl > + Log . d ( TAG , " Unable to load Token " ) ; < nl > + } < nl > + } catch ( Exception e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + Log . d ( TAG , " Waiting for next attempt " ) ; < nl > + try { < nl > + Thread . sleep ( 1000 ) ; < nl > + } catch ( InterruptedException e1 ) { < nl > + e1 . printStackTrace ( ) ; < nl > + return ; < nl > + } < nl > + } < nl > + } < nl > + } . start ( ) ; < nl > + } else { < nl > + Log . d ( TAG , " Already registered token " ) ; < nl > + } < nl > + } < nl > + < nl > + private void onPushRegistered ( String token ) { < nl > + isRegistered = true ; < nl > + ActorSDK . sharedActor ( ) . getMessenger ( ) . getPreferences ( ) . putBool ( " push _ registered " , true ) ; < nl > + ActorSDK . sharedActor ( ) . getMessenger ( ) . registerGooglePush ( ActorSDK . sharedActor ( ) . getPushId ( ) , token ) ; < nl > + < nl > + } < nl > + < nl > + private String tryRegisterPush ( Context context ) { < nl > GoogleCloudMessaging cloudMessaging = GoogleCloudMessaging . getInstance ( context ) ; < nl > Log . d ( " Actor GCM " , " Requesting push token iteration . . . " ) ; < nl > try { < nl > @ @ - 21 , 6 + 69 , 6 @ @ public class PushManager extends ActorPushManager { < nl > e . printStackTrace ( ) ; < nl > return null ; < nl > } < nl > - < nl > } < nl > + < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushReceiver . java b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushReceiver . java < nl > index 0384bd8 . . 7a10488 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushReceiver . java < nl > + + + b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushReceiver . java < nl > @ @ - 9 , 9 + 9 , 9 @ @ import android . support . v4 . content . WakefulBroadcastReceiver ; < nl > import com . google . android . gms . gcm . GoogleCloudMessaging ; < nl > < nl > import im . actor . runtime . Log ; < nl > - import im . actor . sdk . core . ActorPushReceiver ; < nl > + import im . actor . sdk . ActorSDK ; < nl > < nl > - public class PushReceiver extends ActorPushReceiver { < nl > + public class PushReceiver extends WakefulBroadcastReceiver { < nl > < nl > private static final String TAG = " ActorPushReceiver " ; < nl > < nl > @ @ - 24 , 7 + 24 , 8 @ @ public class PushReceiver extends ActorPushReceiver { < nl > if ( GoogleCloudMessaging . MESSAGE _ TYPE _ MESSAGE . equals ( messageType ) ) { < nl > if ( extras . containsKey ( " seq " ) ) { < nl > int seq = Integer . parseInt ( extras . getString ( " seq " ) ) ; < nl > - onSeqReceived ( seq ) ; < nl > + ActorSDK . sharedActor ( ) . getMessenger ( ) . onPushReceived ( seq ) ; < nl > + < nl > setResultCode ( Activity . RESULT _ OK ) ; < nl > Log . d ( TAG , " Push received " ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > index a9a3aed . . 674fae4 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > @ @ - 18 , 11 + 18 , 8 @ @ import im . actor . core . ApiConfiguration ; < nl > import im . actor . core . ConfigurationBuilder ; < nl > import im . actor . core . DeviceCategory ; < nl > import im . actor . core . PlatformType ; < nl > - import im . actor . runtime . actors . ActorCreator ; < nl > - import im . actor . runtime . actors . Props ; < nl > import im . actor . sdk . core . AndroidNotifications ; < nl > import im . actor . sdk . core . AndroidPhoneBook ; < nl > - import im . actor . sdk . core . AndroidPushActor ; < nl > import im . actor . sdk . core . ActorPushManager ; < nl > import im . actor . sdk . intents . ActivityManager ; < nl > import im . actor . sdk . services . KeepAliveService ; < nl > @ @ - 30 , 8 + 27 , 6 @ @ import im . actor . sdk . util . Devices ; < nl > import im . actor . sdk . view . emoji . SmileProcessor ; < nl > import im . actor . runtime . android . AndroidContext ; < nl > < nl > - import static im . actor . runtime . actors . ActorSystem . system ; < nl > - < nl > < nl > public class ActorSDK { < nl > < nl > @ @ - 153 , 15 + 148 , 9 @ @ public class ActorSDK { < nl > / / GCM < nl > / / < nl > try { < nl > - < nl > final ActorPushManager pushManager = ( ActorPushManager ) Class . forName ( " im . actor . push . PushManager " ) . newInstance ( ) ; < nl > if ( pushId ! = 0 ) { < nl > - system ( ) . actorOf ( Props . create ( AndroidPushActor . class , new ActorCreator < AndroidPushActor > ( ) { < nl > - @ Override < nl > - public AndroidPushActor create ( ) { < nl > - return new AndroidPushActor ( application , messenger , pushManager ) ; < nl > - } < nl > - } ) , " actor / android / push " ) ; < nl > + pushManager . registerPush ( application ) ; < nl > } < nl > } catch ( ClassNotFoundException e ) { < nl > e . printStackTrace ( ) ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / ActorPushManager . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / ActorPushManager . java < nl > index 2b6a8fa . . 9d27450 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / ActorPushManager . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / ActorPushManager . java < nl > @ @ - 2 , 18 + 2 , 8 @ @ package im . actor . sdk . core ; < nl > < nl > import android . content . Context ; < nl > < nl > - import im . actor . core . AndroidMessenger ; < nl > - import im . actor . sdk . ActorSDK ; < nl > - < nl > - public abstract class ActorPushManager { < nl > - public abstract String tryRegisterPush ( Context context ) ; < nl > - < nl > - public void registerOnActorServer ( AndroidMessenger messenger , String token ) { < nl > - messenger . getPreferences ( ) . putBool ( " push _ registered " , true ) ; < nl > - messenger . registerGooglePush ( ActorSDK . sharedActor ( ) . getPushId ( ) , token ) ; < nl > - } < nl > - < nl > - < nl > + public interface ActorPushManager { < nl > + void registerPush ( Context context ) ; < nl > } < nl > < nl > < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / ActorPushReceiver . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / ActorPushReceiver . java < nl > deleted file mode 100644 < nl > index e827d55 . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / ActorPushReceiver . java < nl > + + + / dev / null < nl > @ @ - 1 , 11 + 0 , 0 @ @ < nl > - package im . actor . sdk . core ; < nl > - < nl > - import android . support . v4 . content . WakefulBroadcastReceiver ; < nl > - < nl > - import im . actor . sdk . ActorSDK ; < nl > - < nl > - public abstract class ActorPushReceiver extends WakefulBroadcastReceiver { < nl > - public void onSeqReceived ( int seq ) { < nl > - ActorSDK . sharedActor ( ) . getMessenger ( ) . onPushReceived ( seq ) ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java < nl > deleted file mode 100644 < nl > index b99d740 . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java < nl > + + + / dev / null < nl > @ @ - 1 , 95 + 0 , 0 @ @ < nl > - package im . actor . sdk . core ; < nl > - < nl > - import android . content . Context ; < nl > - import im . actor . core . AndroidMessenger ; < nl > - import im . actor . runtime . Log ; < nl > - import im . actor . runtime . actors . Actor ; < nl > - < nl > - / * * < nl > - * GCM push implementation for Actor push registration . < nl > - * This actor is used for load GCM token and register it on server . < nl > - * / < nl > - public class AndroidPushActor extends Actor { < nl > - < nl > - private static final String TAG = " im . actor . sdk . core . AndroidPushActor " ; < nl > - < nl > - private final AndroidMessenger messenger ; < nl > - private final Context context ; < nl > - private boolean isRegistered ; < nl > - private ActorPushManager pushManager ; < nl > - < nl > - public AndroidPushActor ( Context context , AndroidMessenger messenger , ActorPushManager pushManager ) { < nl > - this . messenger = messenger ; < nl > - this . context = context ; < nl > - this . pushManager = pushManager ; < nl > - } < nl > - < nl > - @ Override < nl > - public void preStart ( ) { < nl > - super . preStart ( ) ; < nl > - < nl > - isRegistered = messenger . getPreferences ( ) . getBool ( " push _ registered " , false ) ; < nl > - < nl > - if ( ! isRegistered ) { < nl > - Log . d ( TAG , " Requesting push token . . . " ) ; < nl > - < nl > - / / TODO : Add backoff < nl > - new Thread ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - while ( true ) { < nl > - try { < nl > - String regId = pushManager . tryRegisterPush ( context ) ; < nl > - if ( regId ! = null ) { < nl > - Log . d ( TAG , " Token loaded " ) ; < nl > - self ( ) . send ( new PushRegistered ( regId ) ) ; < nl > - return ; < nl > - } else { < nl > - Log . d ( TAG , " Unable to load Token " ) ; < nl > - } < nl > - } catch ( Exception e ) { < nl > - e . printStackTrace ( ) ; < nl > - } < nl > - Log . d ( TAG , " Waiting for next attempt " ) ; < nl > - try { < nl > - Thread . sleep ( 1000 ) ; < nl > - } catch ( InterruptedException e1 ) { < nl > - e1 . printStackTrace ( ) ; < nl > - return ; < nl > - } < nl > - } < nl > - } < nl > - } . start ( ) ; < nl > - } else { < nl > - Log . d ( TAG , " Already registered token " ) ; < nl > - } < nl > - } < nl > - < nl > - private void onPushRegistered ( String token ) { < nl > - isRegistered = true ; < nl > - pushManager . registerOnActorServer ( messenger , token ) ; < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void onReceive ( Object message ) { < nl > - if ( message instanceof PushRegistered ) { < nl > - PushRegistered pushRegistered = ( PushRegistered ) message ; < nl > - onPushRegistered ( pushRegistered . getToken ( ) ) ; < nl > - } else { < nl > - drop ( message ) ; < nl > - } < nl > - } < nl > - < nl > - public static class PushRegistered { < nl > - private String token ; < nl > - < nl > - public PushRegistered ( String token ) { < nl > - this . token = token ; < nl > - } < nl > - < nl > - public String getToken ( ) { < nl > - return token ; < nl > - } < nl > - } < nl > - }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesAdapter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesAdapter . java 
 index e98384c . . a534113 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesAdapter . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesAdapter . java 
 @ @ - 19 , 9 + 19 , 12 @ @ import im . actor . core . entity . content . StickerContent ; 
 import im . actor . core . entity . content . TextContent ; 
 import im . actor . core . entity . content . VideoContent ; 
 import im . actor . core . entity . content . VoiceContent ; 
 + import im . actor . core . viewmodel . ConversationVM ; 
 import im . actor . runtime . generic . mvvm . BindedDisplayList ; 
 import im . actor . runtime . json . JSONException ; 
 import im . actor . runtime . json . JSONObject ; 
 + import im . actor . runtime . mvvm . Value ; 
 + import im . actor . runtime . mvvm . ValueChangedListener ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . R ; 
 import im . actor . runtime . android . view . BindedListAdapter ; 
 @ @ - 38 , 12 + 41 , 16 @ @ import im . actor . sdk . controllers . conversation . messages . TextHolder ; 
 import im . actor . sdk . controllers . conversation . messages . UnsupportedHolder ; 
 import im . actor . sdk . controllers . fragment . ActorBinder ; 
 
 + import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 + 
 public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { 
 
 private MessagesFragment messagesFragment ; 
 private Context context ; 
 private long firstUnread = - 1 ; 
 - protected HashMap < Long , Message > selected = new HashMap < Long , Message > ( ) ; 
 + private long readDate ; 
 + private long receiveDate ; 
 + protected HashMap < Long , Message > selected = new HashMap < > ( ) ; 
 private ActorBinder BINDER = new ActorBinder ( ) ; 
 
 public MessagesAdapter ( BindedDisplayList < Message > displayList , 
 @ @ - 52 , 6 + 59 , 19 @ @ public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { 
 
 this . messagesFragment = messagesFragment ; 
 this . context = context ; 
 + ConversationVM conversationVM = messenger ( ) . getConversationVM ( messagesFragment . getPeer ( ) ) ; 
 + BINDER . bind ( conversationVM . getReadDate ( ) , new ValueChangedListener < Long > ( ) { 
 + @ Override 
 + public void onChanged ( Long val , Value < Long > valueModel ) { 
 + readDate = val ; 
 + } 
 + } ) ; 
 + BINDER . bind ( conversationVM . getReceiveDate ( ) , new ValueChangedListener < Long > ( ) { 
 + @ Override 
 + public void onChanged ( Long val , Value < Long > valueModel ) { 
 + receiveDate = val ; 
 + } 
 + } ) ; 
 } 
 
 public Message [ ] getSelected ( ) { 
 @ @ - 88 , 6 + 108 , 14 @ @ public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { 
 return firstUnread ; 
 } 
 
 + public long getReadDate ( ) { 
 + return readDate ; 
 + } 
 + 
 + public long getReceiveDate ( ) { 
 + return receiveDate ; 
 + } 
 + 
 public void setFirstUnread ( long firstUnread ) { 
 this . firstUnread = firstUnread ; 
 } 
 @ @ - 214 , 7 + 242 , 7 @ @ public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { 
 prev = getItem ( index + 1 ) ; 
 } 
 PreprocessedList list = ( ( PreprocessedList ) getPreprocessedList ( ) ) ; 
 - dialogHolder . bindData ( item , prev , next , 0 , 0 , list . getPreprocessedData ( ) [ index ] ) ; 
 + dialogHolder . bindData ( item , prev , next , readDate , receiveDate , list . getPreprocessedData ( ) [ index ] ) ; 
 } 
 
 @ Override 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java 
 index d53733a . . 7177ce4 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / MessagesFragment . java 
 @ @ - 44 , 6 + 44 , 7 @ @ import im . actor . core . entity . content . PhotoContent ; 
 import im . actor . core . entity . content . TextContent ; 
 import im . actor . core . entity . content . VideoContent ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 + import im . actor . core . viewmodel . ConversationVM ; 
 import im . actor . core . viewmodel . UserVM ; 
 import im . actor . runtime . Log ; 
 import im . actor . sdk . ActorSDK ; 
 @ @ - 80 , 7 + 81 , 7 @ @ public class MessagesFragment extends DisplayListFragment < Message , MessageHolder 
 private Peer peer ; 
 
 protected MessagesAdapter messagesAdapter ; 
 - / / private ConversationVM conversationVM ; 
 + private ConversationVM conversationVM ; 
 private ActionMode actionMode ; 
 private int onPauseSize = 0 ; 
 private ImageView chatBackgroundView ; 
 @ @ - 104 , 6 + 105 , 7 @ @ public class MessagesFragment extends DisplayListFragment < Message , MessageHolder 
 public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { 
 try { 
 peer = Peer . fromBytes ( getArguments ( ) . getByteArray ( " EXTRA _ PEER " ) ) ; 
 + conversationVM = messenger ( ) . getConversationVM ( peer ) ; 
 } catch ( IOException e ) { 
 throw new RuntimeException ( e ) ; 
 } 
 @ @ - 618 , 11 + 620 , 9 @ @ public class MessagesFragment extends DisplayListFragment < Message , MessageHolder 
 @ Override 
 public void onDestroyView ( ) { 
 super . onDestroyView ( ) ; 
 - / / if ( conversationVM ! = null ) { 
 - / / conversationVM . release ( ) ; 
 - / / conversationVM = null ; 
 - / / } 
 - messagesAdapter = null ; 
 - 
 + if ( messagesAdapter ! = null ) { 
 + messagesAdapter . getBinder ( ) . unbindAll ( ) ; 
 + messagesAdapter = null ; 
 + } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / TextHolder . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / TextHolder . java 
 index f7dfcf2 . . 4ae06ce 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / TextHolder . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / TextHolder . java 
 @ @ - 101 , 19 + 101 , 20 @ @ public class TextHolder extends MessageHolder { 
 
 if ( message . getSenderId ( ) = = myUid ( ) ) { 
 status . setVisibility ( View . VISIBLE ) ; 
 - 
 switch ( message . getMessageState ( ) ) { 
 case SENT : 
 - status . setResource ( R . drawable . msg _ check _ 1 ) ; 
 - status . setTint ( sentColor ) ; 
 - break ; 
 case RECEIVED : 
 - status . setResource ( R . drawable . msg _ check _ 2 ) ; 
 - status . setTint ( deliveredColor ) ; 
 - break ; 
 case READ : 
 - status . setResource ( R . drawable . msg _ check _ 2 ) ; 
 - status . setTint ( readColor ) ; 
 + if ( message . getSortDate ( ) < = readDate ) { 
 + status . setResource ( R . drawable . msg _ check _ 2 ) ; 
 + status . setTint ( readColor ) ; 
 + } else if ( message . getSortDate ( ) < = receiveDate ) { 
 + status . setResource ( R . drawable . msg _ check _ 2 ) ; 
 + status . setTint ( deliveredColor ) ; 
 + } else { 
 + status . setResource ( R . drawable . msg _ check _ 1 ) ; 
 + status . setTint ( sentColor ) ; 
 + } 
 break ; 
 default : 
 case PENDING : 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java 
 index 77e834e . . 80820ee 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / ConversationVM . java 
 @ @ - 20 , 11 + 20 , 16 @ @ public class ConversationVM extends BaseValueModel < ConversationState > { 
 private BooleanValueModel isLoaded ; 
 private ValueModel < Long > ownReadDate ; 
 
 + private ValueModel < Long > readDate ; 
 + private ValueModel < Long > receiveDate ; 
 + 
 public ConversationVM ( ConversationState rawObj ) { 
 super ( rawObj ) ; 
 
 isLoaded = new BooleanValueModel ( " chat . is _ loaded . " + rawObj . getPeer ( ) , rawObj . isLoaded ( ) ) ; 
 - ownReadDate = new ValueModel < > ( " chat . read _ date " + rawObj . getPeer ( ) , rawObj . getInReadDate ( ) ) ; 
 + ownReadDate = new ValueModel < > ( " chat . own _ read _ date " + rawObj . getPeer ( ) , rawObj . getInReadDate ( ) ) ; 
 + readDate = new ValueModel < > ( " chat . read _ date " + rawObj . getPeer ( ) , rawObj . getOutReadDate ( ) ) ; 
 + receiveDate = new ValueModel < > ( " chat . receive _ date " + rawObj . getPeer ( ) , rawObj . getOutReceiveState ( ) ) ; 
 } 
 
 public BooleanValueModel getIsLoaded ( ) { 
 @ @ - 35 , 9 + 40 , 19 @ @ public class ConversationVM extends BaseValueModel < ConversationState > { 
 return ownReadDate ; 
 } 
 
 + public ValueModel < Long > getReadDate ( ) { 
 + return readDate ; 
 + } 
 + 
 + public ValueModel < Long > getReceiveDate ( ) { 
 + return receiveDate ; 
 + } 
 + 
 @ Override 
 protected void updateValues ( ConversationState rawObj ) { 
 isLoaded . change ( rawObj . isLoaded ( ) ) ; 
 ownReadDate . change ( rawObj . getInReadDate ( ) ) ; 
 + readDate . change ( rawObj . getOutReadDate ( ) ) ; 
 + receiveDate . change ( rawObj . getOutReceiveState ( ) ) ; 
 } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java 
 index 0aa7127 . . 35e9768 100644 
 - - - a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java 
 + + + b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java 
 @ @ - 10 , 9 + 10 , 57 @ @ import im . actor . runtime . Log ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . core . ActorPushManager ; 
 
 - public class PushManager extends ActorPushManager { 
 + public class PushManager implements ActorPushManager { 
 + private static final String TAG = " im . actor . push . PushManager " ; 
 + private boolean isRegistered ; 
 + 
 @ Override 
 - public String tryRegisterPush ( Context context ) { 
 + public void registerPush ( final Context context ) { 
 + isRegistered = ActorSDK . sharedActor ( ) . getMessenger ( ) . getPreferences ( ) . getBool ( " push _ registered " , false ) ; 
 + 
 + if ( ! isRegistered ) { 
 + Log . d ( TAG , " Requesting push token . . . " ) ; 
 + 
 + / / TODO : Add backoff 
 + new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + while ( true ) { 
 + try { 
 + String regId = tryRegisterPush ( context ) ; 
 + if ( regId ! = null ) { 
 + Log . d ( TAG , " Token loaded " ) ; 
 + onPushRegistered ( regId ) ; 
 + return ; 
 + } else { 
 + Log . d ( TAG , " Unable to load Token " ) ; 
 + } 
 + } catch ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + Log . d ( TAG , " Waiting for next attempt " ) ; 
 + try { 
 + Thread . sleep ( 1000 ) ; 
 + } catch ( InterruptedException e1 ) { 
 + e1 . printStackTrace ( ) ; 
 + return ; 
 + } 
 + } 
 + } 
 + } . start ( ) ; 
 + } else { 
 + Log . d ( TAG , " Already registered token " ) ; 
 + } 
 + } 
 + 
 + private void onPushRegistered ( String token ) { 
 + isRegistered = true ; 
 + ActorSDK . sharedActor ( ) . getMessenger ( ) . getPreferences ( ) . putBool ( " push _ registered " , true ) ; 
 + ActorSDK . sharedActor ( ) . getMessenger ( ) . registerGooglePush ( ActorSDK . sharedActor ( ) . getPushId ( ) , token ) ; 
 + 
 + } 
 + 
 + private String tryRegisterPush ( Context context ) { 
 GoogleCloudMessaging cloudMessaging = GoogleCloudMessaging . getInstance ( context ) ; 
 Log . d ( " Actor GCM " , " Requesting push token iteration . . . " ) ; 
 try { 
 @ @ - 21 , 6 + 69 , 6 @ @ public class PushManager extends ActorPushManager { 
 e . printStackTrace ( ) ; 
 return null ; 
 } 
 - 
 } 
 + 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushReceiver . java b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushReceiver . java 
 index 0384bd8 . . 7a10488 100644 
 - - - a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushReceiver . java 
 + + + b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushReceiver . java 
 @ @ - 9 , 9 + 9 , 9 @ @ import android . support . v4 . content . WakefulBroadcastReceiver ; 
 import com . google . android . gms . gcm . GoogleCloudMessaging ; 
 
 import im . actor . runtime . Log ; 
 - import im . actor . sdk . core . ActorPushReceiver ; 
 + import im . actor . sdk . ActorSDK ; 
 
 - public class PushReceiver extends ActorPushReceiver { 
 + public class PushReceiver extends WakefulBroadcastReceiver { 
 
 private static final String TAG = " ActorPushReceiver " ; 
 
 @ @ - 24 , 7 + 24 , 8 @ @ public class PushReceiver extends ActorPushReceiver { 
 if ( GoogleCloudMessaging . MESSAGE _ TYPE _ MESSAGE . equals ( messageType ) ) { 
 if ( extras . containsKey ( " seq " ) ) { 
 int seq = Integer . parseInt ( extras . getString ( " seq " ) ) ; 
 - onSeqReceived ( seq ) ; 
 + ActorSDK . sharedActor ( ) . getMessenger ( ) . onPushReceived ( seq ) ; 
 + 
 setResultCode ( Activity . RESULT _ OK ) ; 
 Log . d ( TAG , " Push received " ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 index a9a3aed . . 674fae4 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 @ @ - 18 , 11 + 18 , 8 @ @ import im . actor . core . ApiConfiguration ; 
 import im . actor . core . ConfigurationBuilder ; 
 import im . actor . core . DeviceCategory ; 
 import im . actor . core . PlatformType ; 
 - import im . actor . runtime . actors . ActorCreator ; 
 - import im . actor . runtime . actors . Props ; 
 import im . actor . sdk . core . AndroidNotifications ; 
 import im . actor . sdk . core . AndroidPhoneBook ; 
 - import im . actor . sdk . core . AndroidPushActor ; 
 import im . actor . sdk . core . ActorPushManager ; 
 import im . actor . sdk . intents . ActivityManager ; 
 import im . actor . sdk . services . KeepAliveService ; 
 @ @ - 30 , 8 + 27 , 6 @ @ import im . actor . sdk . util . Devices ; 
 import im . actor . sdk . view . emoji . SmileProcessor ; 
 import im . actor . runtime . android . AndroidContext ; 
 
 - import static im . actor . runtime . actors . ActorSystem . system ; 
 - 
 
 public class ActorSDK { 
 
 @ @ - 153 , 15 + 148 , 9 @ @ public class ActorSDK { 
 / / GCM 
 / / 
 try { 
 - 
 final ActorPushManager pushManager = ( ActorPushManager ) Class . forName ( " im . actor . push . PushManager " ) . newInstance ( ) ; 
 if ( pushId ! = 0 ) { 
 - system ( ) . actorOf ( Props . create ( AndroidPushActor . class , new ActorCreator < AndroidPushActor > ( ) { 
 - @ Override 
 - public AndroidPushActor create ( ) { 
 - return new AndroidPushActor ( application , messenger , pushManager ) ; 
 - } 
 - } ) , " actor / android / push " ) ; 
 + pushManager . registerPush ( application ) ; 
 } 
 } catch ( ClassNotFoundException e ) { 
 e . printStackTrace ( ) ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / ActorPushManager . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / ActorPushManager . java 
 index 2b6a8fa . . 9d27450 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / ActorPushManager . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / ActorPushManager . java 
 @ @ - 2 , 18 + 2 , 8 @ @ package im . actor . sdk . core ; 
 
 import android . content . Context ; 
 
 - import im . actor . core . AndroidMessenger ; 
 - import im . actor . sdk . ActorSDK ; 
 - 
 - public abstract class ActorPushManager { 
 - public abstract String tryRegisterPush ( Context context ) ; 
 - 
 - public void registerOnActorServer ( AndroidMessenger messenger , String token ) { 
 - messenger . getPreferences ( ) . putBool ( " push _ registered " , true ) ; 
 - messenger . registerGooglePush ( ActorSDK . sharedActor ( ) . getPushId ( ) , token ) ; 
 - } 
 - 
 - 
 + public interface ActorPushManager { 
 + void registerPush ( Context context ) ; 
 } 
 
 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / ActorPushReceiver . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / ActorPushReceiver . java 
 deleted file mode 100644 
 index e827d55 . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / ActorPushReceiver . java 
 + + + / dev / null 
 @ @ - 1 , 11 + 0 , 0 @ @ 
 - package im . actor . sdk . core ; 
 - 
 - import android . support . v4 . content . WakefulBroadcastReceiver ; 
 - 
 - import im . actor . sdk . ActorSDK ; 
 - 
 - public abstract class ActorPushReceiver extends WakefulBroadcastReceiver { 
 - public void onSeqReceived ( int seq ) { 
 - ActorSDK . sharedActor ( ) . getMessenger ( ) . onPushReceived ( seq ) ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java 
 deleted file mode 100644 
 index b99d740 . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java 
 + + + / dev / null 
 @ @ - 1 , 95 + 0 , 0 @ @ 
 - package im . actor . sdk . core ; 
 - 
 - import android . content . Context ; 
 - import im . actor . core . AndroidMessenger ; 
 - import im . actor . runtime . Log ; 
 - import im . actor . runtime . actors . Actor ; 
 - 
 - / * * 
 - * GCM push implementation for Actor push registration . 
 - * This actor is used for load GCM token and register it on server . 
 - * / 
 - public class AndroidPushActor extends Actor { 
 - 
 - private static final String TAG = " im . actor . sdk . core . AndroidPushActor " ; 
 - 
 - private final AndroidMessenger messenger ; 
 - private final Context context ; 
 - private boolean isRegistered ; 
 - private ActorPushManager pushManager ; 
 - 
 - public AndroidPushActor ( Context context , AndroidMessenger messenger , ActorPushManager pushManager ) { 
 - this . messenger = messenger ; 
 - this . context = context ; 
 - this . pushManager = pushManager ; 
 - } 
 - 
 - @ Override 
 - public void preStart ( ) { 
 - super . preStart ( ) ; 
 - 
 - isRegistered = messenger . getPreferences ( ) . getBool ( " push _ registered " , false ) ; 
 - 
 - if ( ! isRegistered ) { 
 - Log . d ( TAG , " Requesting push token . . . " ) ; 
 - 
 - / / TODO : Add backoff 
 - new Thread ( ) { 
 - @ Override 
 - public void run ( ) { 
 - while ( true ) { 
 - try { 
 - String regId = pushManager . tryRegisterPush ( context ) ; 
 - if ( regId ! = null ) { 
 - Log . d ( TAG , " Token loaded " ) ; 
 - self ( ) . send ( new PushRegistered ( regId ) ) ; 
 - return ; 
 - } else { 
 - Log . d ( TAG , " Unable to load Token " ) ; 
 - } 
 - } catch ( Exception e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - Log . d ( TAG , " Waiting for next attempt " ) ; 
 - try { 
 - Thread . sleep ( 1000 ) ; 
 - } catch ( InterruptedException e1 ) { 
 - e1 . printStackTrace ( ) ; 
 - return ; 
 - } 
 - } 
 - } 
 - } . start ( ) ; 
 - } else { 
 - Log . d ( TAG , " Already registered token " ) ; 
 - } 
 - } 
 - 
 - private void onPushRegistered ( String token ) { 
 - isRegistered = true ; 
 - pushManager . registerOnActorServer ( messenger , token ) ; 
 - 
 - } 
 - 
 - @ Override 
 - public void onReceive ( Object message ) { 
 - if ( message instanceof PushRegistered ) { 
 - PushRegistered pushRegistered = ( PushRegistered ) message ; 
 - onPushRegistered ( pushRegistered . getToken ( ) ) ; 
 - } else { 
 - drop ( message ) ; 
 - } 
 - } 
 - 
 - public static class PushRegistered { 
 - private String token ; 
 - 
 - public PushRegistered ( String token ) { 
 - this . token = token ; 
 - } 
 - 
 - public String getToken ( ) { 
 - return token ; 
 - } 
 - } 
 - }
