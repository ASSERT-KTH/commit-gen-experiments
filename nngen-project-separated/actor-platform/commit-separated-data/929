BLEU SCORE: 1.0

TEST MSG: fix ( server : messaging ) : fixed unread counters
GENERATED MSG: fix ( server : messaging ) : fixed unread counters

TEST DIFF (one line): diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala < nl > index a6f72e6 . . 5bd52dd 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala < nl > @ @ - 189 , 7 + 189 , 7 @ @ object DialogRepo extends UserDialogOperations with DialogCommonOperations { < nl > < nl > def fetch [ A ] ( userId : Int , dateOpt : Option [ DateTime ] , limit : Int , sorting : ( ( DialogCommonTable , UserDialogTable ) ) ⇒ ColumnOrdered [ A ] , fetchArchived : Boolean ) ( implicit ec : ExecutionContext ) : DBIO [ Seq [ Dialog ] ] = { < nl > val baseQuery : Query [ ( DialogCommonTable , UserDialogTable ) , ( DialogCommon , UserDialog ) , Seq ] = { < nl > - ( if ( fetchArchived ) archived else notArchived ) < nl > + ( if ( fetchArchived ) dialogs else notArchived ) < nl > . filter ( { case ( _ , u ) ⇒ u . userId = = = userId } ) < nl > . sortBy ( sorting ) < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala < nl > index b900790 . . 6e8c166 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala < nl > @ @ - 16 , 8 + 16 , 6 @ @ object UserDialogRepo { < nl > < nl > val notArchived = userDialogs . filter ( _ . archivedAt . isEmpty ) < nl > < nl > - val notArchivedVisible = notArchived . filter ( _ . shownAt . isDefined ) < nl > - < nl > private def byPK ( userId : Rep [ Int ] , peerType : Rep [ Int ] , peerId : Rep [ Int ] ) = < nl > userDialogs . filter ( u ⇒ u . userId = = = userId & & u . peerType = = = peerType & & u . peerId = = = peerId ) < nl > < nl > @ @ - 31 , 7 + 29 , 7 @ @ object UserDialogRepo { < nl > trait UserDialogOperations { < nl > import UserDialogRepo . _ < nl > < nl > - def findUsersVisible ( userId : Rep [ Int ] ) = notArchivedVisible . filter ( _ . userId = = = userId ) < nl > + def findUsersVisible ( userId : Rep [ Int ] ) = notArchived . filter ( _ . userId = = = userId ) < nl > < nl > def findGroupIds ( userId : Int ) = < nl > idByPeerTypeC ( ( userId , PeerType . Group . value ) ) . result

TEST DIFF:
diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala 
 index a6f72e6 . . 5bd52dd 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala 
 @ @ - 189 , 7 + 189 , 7 @ @ object DialogRepo extends UserDialogOperations with DialogCommonOperations { 
 
 def fetch [ A ] ( userId : Int , dateOpt : Option [ DateTime ] , limit : Int , sorting : ( ( DialogCommonTable , UserDialogTable ) ) ⇒ ColumnOrdered [ A ] , fetchArchived : Boolean ) ( implicit ec : ExecutionContext ) : DBIO [ Seq [ Dialog ] ] = { 
 val baseQuery : Query [ ( DialogCommonTable , UserDialogTable ) , ( DialogCommon , UserDialog ) , Seq ] = { 
 - ( if ( fetchArchived ) archived else notArchived ) 
 + ( if ( fetchArchived ) dialogs else notArchived ) 
 . filter ( { case ( _ , u ) ⇒ u . userId = = = userId } ) 
 . sortBy ( sorting ) 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala 
 index b900790 . . 6e8c166 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala 
 @ @ - 16 , 8 + 16 , 6 @ @ object UserDialogRepo { 
 
 val notArchived = userDialogs . filter ( _ . archivedAt . isEmpty ) 
 
 - val notArchivedVisible = notArchived . filter ( _ . shownAt . isDefined ) 
 - 
 private def byPK ( userId : Rep [ Int ] , peerType : Rep [ Int ] , peerId : Rep [ Int ] ) = 
 userDialogs . filter ( u ⇒ u . userId = = = userId & & u . peerType = = = peerType & & u . peerId = = = peerId ) 
 
 @ @ - 31 , 7 + 29 , 7 @ @ object UserDialogRepo { 
 trait UserDialogOperations { 
 import UserDialogRepo . _ 
 
 - def findUsersVisible ( userId : Rep [ Int ] ) = notArchivedVisible . filter ( _ . userId = = = userId ) 
 + def findUsersVisible ( userId : Rep [ Int ] ) = notArchived . filter ( _ . userId = = = userId ) 
 
 def findGroupIds ( userId : Int ) = 
 idByPeerTypeC ( ( userId , PeerType . Group . value ) ) . result
