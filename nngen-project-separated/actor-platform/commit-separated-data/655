BLEU SCORE: 0.25476965408249014

TEST MSG: feat ( server : http ) : allow custom rejection handlers
GENERATED MSG: feat ( server : cluster ) : start internal bots ad ClusterSingletons

TEST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > index f58c5a7 . . 395388e 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > @ @ - 60 , 7 + 60 , 7 @ @ private [ bot ] final class BotExtension ( _ system : ActorSystem ) extends Extension { < nl > < nl > lazy val botServerBlueprint = new BotServerBlueprint ( system ) < nl > < nl > - HttpApi ( system ) . registerHook ( " bots " ) { implicit system ⇒ < nl > + HttpApi ( system ) . registerRoute ( " bots " ) { implicit system ⇒ < nl > new BotsHttpHandler ( this ) . routes < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > index f5e4888 . . 1cb42c1 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > @ @ - 13 , 7 + 13 , 7 @ @ sealed trait GroupExtension extends Extension < nl > final class GroupExtensionImpl ( system : ActorSystem ) extends GroupExtension with GroupOperations { < nl > GroupProcessor . register ( ) < nl > < nl > - HttpApi ( system ) . registerHook ( " groups " ) { implicit system ⇒ < nl > + HttpApi ( system ) . registerRoute ( " groups " ) { implicit system ⇒ < nl > new GroupsHttpHandler ( ) . routes < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala < nl > index cdc24fa . . cea73d2 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala < nl > @ @ - 13 , 7 + 13 , 7 @ @ sealed trait WebhooksExtension extends Extension < nl > * / < nl > final class WebhooksExtensionImpl ( system : ActorSystem ) extends WebhooksExtension { < nl > < nl > - HttpApi ( system ) . registerHook ( " webhooks " ) { implicit system ⇒ < nl > + HttpApi ( system ) . registerRoute ( " webhooks " ) { implicit system ⇒ < nl > new WebhooksHttpHandler ( ) . routes < nl > } < nl > < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > index 44208f2 . . fe808f2 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > @ @ - 45 , 7 + 45 , 7 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) < nl > private val httpConfig : HttpApiConfig = HttpApiConfig . load . get < nl > private val storageConfig : LocalFileStorageConfig = LocalFileStorageConfig . load . get < nl > < nl > - HttpApi ( system ) . registerHook ( " localstorage " ) { implicit system ⇒ < nl > + HttpApi ( system ) . registerRoute ( " localstorage " ) { implicit system ⇒ < nl > new FilesHttpHandler ( storageConfig ) . routes < nl > } < nl > < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > index f2d419d . . e9c6437 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . server . api . http < nl > import akka . actor . _ < nl > import akka . http . scaladsl . Http < nl > import akka . http . scaladsl . server . Directives . _ < nl > - import akka . http . scaladsl . server . Route < nl > + import akka . http . scaladsl . server . { RejectionHandler , Route } < nl > import akka . http . scaladsl . server . directives . Credentials < nl > import akka . http . scaladsl . settings . ServerSettings < nl > import akka . stream . ActorMaterializer < nl > @ @ - 25 , 17 + 25 , 29 @ @ final class HttpApi ( _ system : ActorSystem ) extends Extension { < nl > < nl > private val hooks = new HttpApiHookControl < nl > < nl > - def runHooks ( ) : Seq [ Route ] = hooks . routesHook . runAll ( ) < nl > + def runRouteHooks ( ) : Seq [ Route ] = hooks . routesHook . runAll ( ) < nl > + def runRejectionHooks ( ) : Seq [ RejectionHandler ] = hooks . rejectionsHook . runAll ( ) < nl > < nl > - var customRoutes : Seq [ Route ] = runHooks ( ) < nl > + var customRejections : Seq [ RejectionHandler ] = runRejectionHooks ( ) < nl > + var customRoutes : Seq [ Route ] = runRouteHooks ( ) < nl > < nl > - def registerHook ( name : String ) ( f : ActorSystem ⇒ Route ) : Unit = { < nl > + def registerRoute ( name : String ) ( f : ActorSystem ⇒ Route ) : Unit = { < nl > hooks . routesHook . register ( name , new HttpApiHook . RoutesHook ( system ) { < nl > override def run ( ) : Route = f ( system ) < nl > } ) < nl > < nl > synchronized { < nl > - this . customRoutes = runHooks ( ) < nl > + this . customRoutes = runRouteHooks ( ) < nl > + } < nl > + } < nl > + < nl > + def registerRejection ( name : String ) ( f : ActorSystem ⇒ RejectionHandler ) : Unit = { < nl > + hooks . rejectionsHook . register ( name , new HttpApiHook . RejectionsHook ( system ) { < nl > + def run ( ) : RejectionHandler = f ( system ) < nl > + } ) < nl > + < nl > + synchronized { < nl > + this . customRejections = runRejectionHooks ( ) < nl > } < nl > } < nl > < nl > @ @ - 84 , 6 + 96 , 7 @ @ private object HttpApiFrontend { < nl > def defaultRoutes : Route = app . routes ~ defaultVersion ( status . routes ~ info . routes ) < nl > < nl > def routes = HttpApi ( system ) . customRoutes . foldLeft ( defaultRoutes ) ( _ ~ _ ) < nl > + def rejectionHandlers = HttpApi ( system ) . customRejections . foldLeft ( RejectionHandler . default ) ( ( acc , el ) ⇒ acc . withFallback ( el ) ) < nl > < nl > val defaultSettings = ServerSettings ( system ) < nl > < nl > @ @ - 94 , 7 + 107 , 7 @ @ private object HttpApiFrontend { < nl > settings = defaultSettings . withTimeouts ( defaultSettings . timeouts . withIdleTimeout ( IdleTimeout ) ) < nl > ) < nl > . runForeach { conn ⇒ < nl > - conn handleWith routes < nl > + conn handleWith handleRejections ( rejectionHandlers ) { routes } < nl > } < nl > } < nl > } < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala < nl > index 2c7c8d6 . . c57c830 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala < nl > @ @ - 1 , 17 + 1 , 19 @ @ < nl > package im . actor . server . api . http < nl > < nl > import akka . actor . ActorSystem < nl > - import akka . http . scaladsl . server . Route < nl > - import im . actor . hook . { SyncHook0 , SyncHooksStorage0 , HooksControl } < nl > + import akka . http . scaladsl . server . { RejectionHandler , Route } < nl > + import im . actor . hook . { HooksControl , SyncHook0 , SyncHooksStorage0 } < nl > < nl > import scala . concurrent . ExecutionContext < nl > < nl > object HttpApiHook { < nl > abstract class RoutesHook ( system : ActorSystem ) extends SyncHook0 [ Route ] < nl > + abstract class RejectionsHook ( system : ActorSystem ) extends SyncHook0 [ RejectionHandler ] < nl > } < nl > < nl > final class HttpApiHookControl ( implicit ec : ExecutionContext ) extends HooksControl { < nl > import HttpApiHook . _ < nl > < nl > val routesHook = new SyncHooksStorage0 [ RoutesHook , Route ] ( ) < nl > + val rejectionsHook = new SyncHooksStorage0 [ RejectionsHook , RejectionHandler ] ( ) < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala < nl > index 3628411 . . 774fb91 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala < nl > @ @ - 17 , 7 + 17 , 7 @ @ object ActorBot { < nl > < nl > val ApiPeer = new ApiPeer ( ApiPeerType . Private , UserId ) < nl > < nl > - def start ( ) ( implicit system : ActorSystem ) = system . actorOf ( props , " ActorBot " ) < nl > + def start ( ) ( implicit system : ActorSystem ) = InternalBot . start ( props ) < nl > < nl > private def props = Props ( classOf [ ActorBot ] ) < nl > } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > index cb390de . . 305baa2 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . server . bot < nl > < nl > import akka . actor . _ < nl > + import akka . cluster . singleton . { ClusterSingletonManager , ClusterSingletonManagerSettings } < nl > import akka . pattern . pipe < nl > import akka . stream . scaladsl . { Sink , Source } < nl > import akka . stream . { ActorMaterializer , OverflowStrategy } < nl > @ @ - 16 , 15 + 17 , 20 @ @ private object InternalBot { < nl > < nl > final case class Initialized ( authId : Long , authSid : Int ) < nl > < nl > + def start ( props : Props ) ( implicit system : ActorSystem ) = < nl > + system . actorOf ( ClusterSingletonManager . props ( < nl > + props , < nl > + PoisonPill , < nl > + ClusterSingletonManagerSettings ( system ) < nl > + ) ) < nl > } < nl > < nl > abstract class InternalBot ( userId : Int , nickname : String , name : String , isAdmin : Boolean ) extends BotBase { < nl > < nl > import InternalBot . _ < nl > + import context . dispatcher < nl > < nl > - private implicit val mat = ActorMaterializer ( ) < nl > - < nl > - import context . _ < nl > + private implicit val mat = ActorMaterializer ( ) ( context . system ) < nl > < nl > override protected implicit val timeout = Timeout ( ActorConfig . defaultTimeout ) < nl > < nl > diff - - git a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala < nl > index f4e4ec3 . . 026a4cf 100644 < nl > - - - a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala < nl > + + + b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala < nl > @ @ - 1 , 11 + 1 , 12 @ @ < nl > package im . actor . server . bot < nl > < nl > import im . actor . api . rpc . contacts . ResponseSearchContacts < nl > - import im . actor . api . rpc . messaging . { ResponseLoadHistory , ApiTextMessage } < nl > + import im . actor . api . rpc . messaging . { ApiTextMessage , ResponseLoadHistory } < nl > import im . actor . api . rpc . _ < nl > import im . actor . server . _ < nl > import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl < nl > import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl < nl > + import im . actor . server . db . DbExtension < nl > import im . actor . server . dialog . DialogExtension < nl > import org . scalatest . Inside . _ < nl > < nl > @ @ - 50 , 7 + 51 , 7 @ @ final class ActorBotSpec < nl > < nl > val botOutPeer = getOutPeer ( ActorBot . UserId , authId ) < nl > < nl > - whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , 100 ) ) { rsp ⇒ < nl > + whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , None , 100 ) ) { rsp ⇒ < nl > inside ( rsp ) { < nl > case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ < nl > history . length shouldBe 2 < nl > @ @ - 81 , 7 + 82 , 7 @ @ final class ActorBotSpec < nl > < nl > val botOutPeer = getOutPeer ( ActorBot . UserId , authId ) < nl > < nl > - whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , 100 ) ) { rsp ⇒ < nl > + whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , None , 100 ) ) { rsp ⇒ < nl > inside ( rsp ) { < nl > case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ < nl > history . length shouldBe 2 < nl > diff - - git a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala < nl > index 0cee5e4 . . 201691b 100644 < nl > - - - a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala < nl > + + + b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala < nl > @ @ - 16 , 7 + 16 , 7 @ @ import scala . util . Random < nl > object EchoBot { < nl > val UserId = 100 < nl > < nl > - def start ( ) ( implicit system : ActorSystem ) = system . actorOf ( props , " EchoBot " ) < nl > + def start ( ) ( implicit system : ActorSystem ) = InternalBot . start ( props ) < nl > < nl > private def props = Props ( classOf [ EchoBot ] ) < nl > } < nl > @ @ - 48 , 6 + 48 , 11 @ @ final class EchoBotSpec < nl > private lazy val msgService = MessagingServiceImpl ( ) < nl > private implicit lazy val groupsService = new GroupsServiceImpl ( GroupInviteConfig ( " " ) ) < nl > < nl > + override def beforeAll = { < nl > + super . beforeAll ( ) < nl > + EchoBot . start ( ) < nl > + } < nl > + < nl > def replyPrivate ( ) = { < nl > val ( user , authId , authSid , _ ) = createUser ( ) < nl > < nl > @ @ - 69 , 7 + 74 , 7 @ @ final class EchoBotSpec < nl > < nl > val botOutPeer = getOutPeer ( EchoBot . UserId , authId ) < nl > < nl > - whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , 100 ) ) { rsp ⇒ < nl > + whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , None , 100 ) ) { rsp ⇒ < nl > inside ( rsp ) { < nl > case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ < nl > history . length shouldBe 2 < nl > @ @ - 97 , 7 + 102 , 7 @ @ final class EchoBotSpec < nl > < nl > Thread . sleep ( 2000 ) < nl > < nl > - whenReady ( msgService . handleLoadHistory ( outPeer , 0 , 100 ) ) { rsp ⇒ < nl > + whenReady ( msgService . handleLoadHistory ( outPeer , 0 , None , 100 ) ) { rsp ⇒ < nl > inside ( rsp ) { < nl > case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ < nl > history . length shouldBe 4 < nl > @ @ - 106 , 9 + 111 , 4 @ @ final class EchoBotSpec < nl > } < nl > } < nl > } < nl > - < nl > - override def beforeAll = { < nl > - db / / init lazy db < nl > - EchoBot . start ( ) < nl > - } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index 685a140 . . cb29b53 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 358 , 9 + 358 , 9 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with < nl > case msg : ApiAdvertiseSelf ⇒ < nl > for ( deviceId ← ebMessage . deviceId ) yield { < nl > val newDevice = Device ( deviceId , ebMessage . client , msg . peerSettings , isJoined = deviceId = = callerDeviceId ) < nl > - devices . values . view filterNot ( _ . deviceId = = newDevice . deviceId ) foreach { pairDevice = > < nl > - if ( pairDevice . canPreConnect ( msg . peerSettings ) ) < nl > - connect ( newDevice , pairDevice ) < nl > + devices . values . view filterNot ( _ . deviceId = = newDevice . deviceId ) foreach { pairDevice ⇒ < nl > + if ( pairDevice . canPreConnect ( msg . peerSettings ) ) < nl > + connect ( newDevice , pairDevice ) < nl > } < nl > putDevice ( deviceId , ebMessage . client , newDevice ) < nl > < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala < nl > index 62c8ea5 . . 541a283 100644 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala < nl > + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala < nl > @ @ - 57 , 6 + 57 , 5 @ @ abstract class ActorSuite ( system : ActorSystem = { Kamon . start ( ) ; ActorSpecificat < nl > < nl > override def afterAll ( ) : Unit = { < nl > TestKit . shutdownActorSystem ( system ) < nl > - Await . result ( system . whenTerminated , Duration . Inf ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala < nl > index f23c7f1 . . c520008 100644 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala < nl > + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala < nl > @ @ - 36 , 4 + 36 , 8 @ @ abstract class BaseAppSuite ( _ system : ActorSystem = { < nl > override implicit def patienceConfig : PatienceConfig = < nl > new PatienceConfig ( timeout = Span ( 15 , Seconds ) ) < nl > < nl > + override protected def beforeAll ( ) : Unit = { < nl > + super . beforeAll ( ) < nl > + db < nl > + } < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 index f58c5a7 . . 395388e 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 @ @ - 60 , 7 + 60 , 7 @ @ private [ bot ] final class BotExtension ( _ system : ActorSystem ) extends Extension { 
 
 lazy val botServerBlueprint = new BotServerBlueprint ( system ) 
 
 - HttpApi ( system ) . registerHook ( " bots " ) { implicit system ⇒ 
 + HttpApi ( system ) . registerRoute ( " bots " ) { implicit system ⇒ 
 new BotsHttpHandler ( this ) . routes 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 index f5e4888 . . 1cb42c1 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 @ @ - 13 , 7 + 13 , 7 @ @ sealed trait GroupExtension extends Extension 
 final class GroupExtensionImpl ( system : ActorSystem ) extends GroupExtension with GroupOperations { 
 GroupProcessor . register ( ) 
 
 - HttpApi ( system ) . registerHook ( " groups " ) { implicit system ⇒ 
 + HttpApi ( system ) . registerRoute ( " groups " ) { implicit system ⇒ 
 new GroupsHttpHandler ( ) . routes 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala 
 index cdc24fa . . cea73d2 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala 
 @ @ - 13 , 7 + 13 , 7 @ @ sealed trait WebhooksExtension extends Extension 
 * / 
 final class WebhooksExtensionImpl ( system : ActorSystem ) extends WebhooksExtension { 
 
 - HttpApi ( system ) . registerHook ( " webhooks " ) { implicit system ⇒ 
 + HttpApi ( system ) . registerRoute ( " webhooks " ) { implicit system ⇒ 
 new WebhooksHttpHandler ( ) . routes 
 } 
 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 index 44208f2 . . fe808f2 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 @ @ - 45 , 7 + 45 , 7 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) 
 private val httpConfig : HttpApiConfig = HttpApiConfig . load . get 
 private val storageConfig : LocalFileStorageConfig = LocalFileStorageConfig . load . get 
 
 - HttpApi ( system ) . registerHook ( " localstorage " ) { implicit system ⇒ 
 + HttpApi ( system ) . registerRoute ( " localstorage " ) { implicit system ⇒ 
 new FilesHttpHandler ( storageConfig ) . routes 
 } 
 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 index f2d419d . . e9c6437 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . server . api . http 
 import akka . actor . _ 
 import akka . http . scaladsl . Http 
 import akka . http . scaladsl . server . Directives . _ 
 - import akka . http . scaladsl . server . Route 
 + import akka . http . scaladsl . server . { RejectionHandler , Route } 
 import akka . http . scaladsl . server . directives . Credentials 
 import akka . http . scaladsl . settings . ServerSettings 
 import akka . stream . ActorMaterializer 
 @ @ - 25 , 17 + 25 , 29 @ @ final class HttpApi ( _ system : ActorSystem ) extends Extension { 
 
 private val hooks = new HttpApiHookControl 
 
 - def runHooks ( ) : Seq [ Route ] = hooks . routesHook . runAll ( ) 
 + def runRouteHooks ( ) : Seq [ Route ] = hooks . routesHook . runAll ( ) 
 + def runRejectionHooks ( ) : Seq [ RejectionHandler ] = hooks . rejectionsHook . runAll ( ) 
 
 - var customRoutes : Seq [ Route ] = runHooks ( ) 
 + var customRejections : Seq [ RejectionHandler ] = runRejectionHooks ( ) 
 + var customRoutes : Seq [ Route ] = runRouteHooks ( ) 
 
 - def registerHook ( name : String ) ( f : ActorSystem ⇒ Route ) : Unit = { 
 + def registerRoute ( name : String ) ( f : ActorSystem ⇒ Route ) : Unit = { 
 hooks . routesHook . register ( name , new HttpApiHook . RoutesHook ( system ) { 
 override def run ( ) : Route = f ( system ) 
 } ) 
 
 synchronized { 
 - this . customRoutes = runHooks ( ) 
 + this . customRoutes = runRouteHooks ( ) 
 + } 
 + } 
 + 
 + def registerRejection ( name : String ) ( f : ActorSystem ⇒ RejectionHandler ) : Unit = { 
 + hooks . rejectionsHook . register ( name , new HttpApiHook . RejectionsHook ( system ) { 
 + def run ( ) : RejectionHandler = f ( system ) 
 + } ) 
 + 
 + synchronized { 
 + this . customRejections = runRejectionHooks ( ) 
 } 
 } 
 
 @ @ - 84 , 6 + 96 , 7 @ @ private object HttpApiFrontend { 
 def defaultRoutes : Route = app . routes ~ defaultVersion ( status . routes ~ info . routes ) 
 
 def routes = HttpApi ( system ) . customRoutes . foldLeft ( defaultRoutes ) ( _ ~ _ ) 
 + def rejectionHandlers = HttpApi ( system ) . customRejections . foldLeft ( RejectionHandler . default ) ( ( acc , el ) ⇒ acc . withFallback ( el ) ) 
 
 val defaultSettings = ServerSettings ( system ) 
 
 @ @ - 94 , 7 + 107 , 7 @ @ private object HttpApiFrontend { 
 settings = defaultSettings . withTimeouts ( defaultSettings . timeouts . withIdleTimeout ( IdleTimeout ) ) 
 ) 
 . runForeach { conn ⇒ 
 - conn handleWith routes 
 + conn handleWith handleRejections ( rejectionHandlers ) { routes } 
 } 
 } 
 } 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala 
 index 2c7c8d6 . . c57c830 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala 
 @ @ - 1 , 17 + 1 , 19 @ @ 
 package im . actor . server . api . http 
 
 import akka . actor . ActorSystem 
 - import akka . http . scaladsl . server . Route 
 - import im . actor . hook . { SyncHook0 , SyncHooksStorage0 , HooksControl } 
 + import akka . http . scaladsl . server . { RejectionHandler , Route } 
 + import im . actor . hook . { HooksControl , SyncHook0 , SyncHooksStorage0 } 
 
 import scala . concurrent . ExecutionContext 
 
 object HttpApiHook { 
 abstract class RoutesHook ( system : ActorSystem ) extends SyncHook0 [ Route ] 
 + abstract class RejectionsHook ( system : ActorSystem ) extends SyncHook0 [ RejectionHandler ] 
 } 
 
 final class HttpApiHookControl ( implicit ec : ExecutionContext ) extends HooksControl { 
 import HttpApiHook . _ 
 
 val routesHook = new SyncHooksStorage0 [ RoutesHook , Route ] ( ) 
 + val rejectionsHook = new SyncHooksStorage0 [ RejectionsHook , RejectionHandler ] ( ) 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala 
 index 3628411 . . 774fb91 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala 
 @ @ - 17 , 7 + 17 , 7 @ @ object ActorBot { 
 
 val ApiPeer = new ApiPeer ( ApiPeerType . Private , UserId ) 
 
 - def start ( ) ( implicit system : ActorSystem ) = system . actorOf ( props , " ActorBot " ) 
 + def start ( ) ( implicit system : ActorSystem ) = InternalBot . start ( props ) 
 
 private def props = Props ( classOf [ ActorBot ] ) 
 } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 index cb390de . . 305baa2 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . server . bot 
 
 import akka . actor . _ 
 + import akka . cluster . singleton . { ClusterSingletonManager , ClusterSingletonManagerSettings } 
 import akka . pattern . pipe 
 import akka . stream . scaladsl . { Sink , Source } 
 import akka . stream . { ActorMaterializer , OverflowStrategy } 
 @ @ - 16 , 15 + 17 , 20 @ @ private object InternalBot { 
 
 final case class Initialized ( authId : Long , authSid : Int ) 
 
 + def start ( props : Props ) ( implicit system : ActorSystem ) = 
 + system . actorOf ( ClusterSingletonManager . props ( 
 + props , 
 + PoisonPill , 
 + ClusterSingletonManagerSettings ( system ) 
 + ) ) 
 } 
 
 abstract class InternalBot ( userId : Int , nickname : String , name : String , isAdmin : Boolean ) extends BotBase { 
 
 import InternalBot . _ 
 + import context . dispatcher 
 
 - private implicit val mat = ActorMaterializer ( ) 
 - 
 - import context . _ 
 + private implicit val mat = ActorMaterializer ( ) ( context . system ) 
 
 override protected implicit val timeout = Timeout ( ActorConfig . defaultTimeout ) 
 
 diff - - git a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala 
 index f4e4ec3 . . 026a4cf 100644 
 - - - a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala 
 + + + b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala 
 @ @ - 1 , 11 + 1 , 12 @ @ 
 package im . actor . server . bot 
 
 import im . actor . api . rpc . contacts . ResponseSearchContacts 
 - import im . actor . api . rpc . messaging . { ResponseLoadHistory , ApiTextMessage } 
 + import im . actor . api . rpc . messaging . { ApiTextMessage , ResponseLoadHistory } 
 import im . actor . api . rpc . _ 
 import im . actor . server . _ 
 import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl 
 import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl 
 + import im . actor . server . db . DbExtension 
 import im . actor . server . dialog . DialogExtension 
 import org . scalatest . Inside . _ 
 
 @ @ - 50 , 7 + 51 , 7 @ @ final class ActorBotSpec 
 
 val botOutPeer = getOutPeer ( ActorBot . UserId , authId ) 
 
 - whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , 100 ) ) { rsp ⇒ 
 + whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , None , 100 ) ) { rsp ⇒ 
 inside ( rsp ) { 
 case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ 
 history . length shouldBe 2 
 @ @ - 81 , 7 + 82 , 7 @ @ final class ActorBotSpec 
 
 val botOutPeer = getOutPeer ( ActorBot . UserId , authId ) 
 
 - whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , 100 ) ) { rsp ⇒ 
 + whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , None , 100 ) ) { rsp ⇒ 
 inside ( rsp ) { 
 case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ 
 history . length shouldBe 2 
 diff - - git a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala 
 index 0cee5e4 . . 201691b 100644 
 - - - a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala 
 + + + b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala 
 @ @ - 16 , 7 + 16 , 7 @ @ import scala . util . Random 
 object EchoBot { 
 val UserId = 100 
 
 - def start ( ) ( implicit system : ActorSystem ) = system . actorOf ( props , " EchoBot " ) 
 + def start ( ) ( implicit system : ActorSystem ) = InternalBot . start ( props ) 
 
 private def props = Props ( classOf [ EchoBot ] ) 
 } 
 @ @ - 48 , 6 + 48 , 11 @ @ final class EchoBotSpec 
 private lazy val msgService = MessagingServiceImpl ( ) 
 private implicit lazy val groupsService = new GroupsServiceImpl ( GroupInviteConfig ( " " ) ) 
 
 + override def beforeAll = { 
 + super . beforeAll ( ) 
 + EchoBot . start ( ) 
 + } 
 + 
 def replyPrivate ( ) = { 
 val ( user , authId , authSid , _ ) = createUser ( ) 
 
 @ @ - 69 , 7 + 74 , 7 @ @ final class EchoBotSpec 
 
 val botOutPeer = getOutPeer ( EchoBot . UserId , authId ) 
 
 - whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , 100 ) ) { rsp ⇒ 
 + whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , None , 100 ) ) { rsp ⇒ 
 inside ( rsp ) { 
 case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ 
 history . length shouldBe 2 
 @ @ - 97 , 7 + 102 , 7 @ @ final class EchoBotSpec 
 
 Thread . sleep ( 2000 ) 
 
 - whenReady ( msgService . handleLoadHistory ( outPeer , 0 , 100 ) ) { rsp ⇒ 
 + whenReady ( msgService . handleLoadHistory ( outPeer , 0 , None , 100 ) ) { rsp ⇒ 
 inside ( rsp ) { 
 case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ 
 history . length shouldBe 4 
 @ @ - 106 , 9 + 111 , 4 @ @ final class EchoBotSpec 
 } 
 } 
 } 
 - 
 - override def beforeAll = { 
 - db / / init lazy db 
 - EchoBot . start ( ) 
 - } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index 685a140 . . cb29b53 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 358 , 9 + 358 , 9 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with 
 case msg : ApiAdvertiseSelf ⇒ 
 for ( deviceId ← ebMessage . deviceId ) yield { 
 val newDevice = Device ( deviceId , ebMessage . client , msg . peerSettings , isJoined = deviceId = = callerDeviceId ) 
 - devices . values . view filterNot ( _ . deviceId = = newDevice . deviceId ) foreach { pairDevice = > 
 - if ( pairDevice . canPreConnect ( msg . peerSettings ) ) 
 - connect ( newDevice , pairDevice ) 
 + devices . values . view filterNot ( _ . deviceId = = newDevice . deviceId ) foreach { pairDevice ⇒ 
 + if ( pairDevice . canPreConnect ( msg . peerSettings ) ) 
 + connect ( newDevice , pairDevice ) 
 } 
 putDevice ( deviceId , ebMessage . client , newDevice ) 
 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala 
 index 62c8ea5 . . 541a283 100644 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala 
 + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala 
 @ @ - 57 , 6 + 57 , 5 @ @ abstract class ActorSuite ( system : ActorSystem = { Kamon . start ( ) ; ActorSpecificat 
 
 override def afterAll ( ) : Unit = { 
 TestKit . shutdownActorSystem ( system ) 
 - Await . result ( system . whenTerminated , Duration . Inf ) 
 } 
 } 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala 
 index f23c7f1 . . c520008 100644 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala 
 + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala 
 @ @ - 36 , 4 + 36 , 8 @ @ abstract class BaseAppSuite ( _ system : ActorSystem = { 
 override implicit def patienceConfig : PatienceConfig = 
 new PatienceConfig ( timeout = Span ( 15 , Seconds ) ) 
 
 + override protected def beforeAll ( ) : Unit = { 
 + super . beforeAll ( ) 
 + db 
 + } 
 }
