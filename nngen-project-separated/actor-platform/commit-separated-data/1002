BLEU SCORE: 0.2984745896009823

TEST MSG: fix ( core ) : Fixing pre keys signing
GENERATED MSG: wip ( core ) : Adding idle events

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorApp / Supporting Files / Info . plist b / actor - sdk / sdk - core - ios / ActorApp / Supporting Files / Info . plist < nl > index b3d27b0 . . db3802c 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorApp / Supporting Files / Info . plist 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorApp / Supporting Files / Info . plist 	 < nl > @ @ - 34 , 7 + 34 , 7 @ @ < nl > 	 	 < / dict > < nl > 	 < / array > < nl > 	 < key > CFBundleVersion < / key > < nl > - 	 < string > 741 < / string > < nl > + 	 < string > 747 < / string > < nl > 	 < key > Fabric < / key > < nl > 	 < dict > < nl > 	 	 < key > APIKey < / key > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / entity / PrivateKey . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / entity / PrivateKey . java < nl > index 6a7d967 . . 54ac0ad 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / entity / PrivateKey . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / entity / PrivateKey . java < nl > @ @ - 43 , 11 + 43 , 11 @ @ public class PrivateKey extends BserObject { < nl > } < nl > } ; < nl > < nl > - public static final Function < PrivateKey , ApiEncryptionKeySignature > SIGN ( PrivateKey identity ) { < nl > + public static final Function < PrivateKey , ApiEncryptionKeySignature > SIGN ( final PrivateKey identity ) { < nl > return new Function < PrivateKey , ApiEncryptionKeySignature > ( ) { < nl > @ Override < nl > public ApiEncryptionKeySignature apply ( PrivateKey privateKey ) { < nl > - byte [ ] signature = Curve25519 . calculateSignature ( Crypto . randomBytes ( 64 ) , privateKey . getKey ( ) , < nl > + byte [ ] signature = Curve25519 . calculateSignature ( Crypto . randomBytes ( 64 ) , identity . getKey ( ) , < nl > RatchetKeySignature . hashForSignature ( privateKey . getKeyId ( ) , < nl > privateKey . getKeyAlg ( ) , privateKey . getPublicKey ( ) ) ) ; < nl > return new ApiEncryptionKeySignature ( privateKey . getKeyId ( ) , " Ed25519 " , signature ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorInterface . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorInterface . java < nl > index 27b9888 . . 01ed3b3 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorInterface . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorInterface . java < nl > @ @ - 1 , 8 + 1 , 10 @ @ < nl > package im . actor . runtime . actors ; < nl > < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . actors . ask . AskIntRequest ; < nl > import im . actor . runtime . actors . ask . AskMessage ; < nl > import im . actor . runtime . actors . ask . AskResult ; < nl > + import im . actor . runtime . function . Consumer ; < nl > import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . promise . PromiseFunc ; < nl > import im . actor . runtime . promise . PromiseResolver ; < nl > @ @ - 23 , 8 + 25 , 19 @ @ public class ActorInterface { < nl > return new Promise < T > ( new PromiseFunc < T > ( ) { < nl > @ Override < nl > public void exec ( PromiseResolver < T > executor ) { < nl > + Log . d ( " IPC " , " [ " + dest . getPath ( ) + " ] - > " + message ) ; < nl > send ( new AskIntRequest ( message , executor ) ) ; < nl > } < nl > + } ) . then ( new Consumer < T > ( ) { < nl > + @ Override < nl > + public void apply ( T t ) { < nl > + Log . d ( " IPC " , " [ " + dest . getPath ( ) + " ] < - " + message + " < - " + t ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + Log . w ( " IPC " , " [ " + dest . getPath ( ) + " ] < - " + message + " < - " + e ) ; < nl > + } < nl > } ) ; < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index a44d871 . . a9ec5fc 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 41 , 6 + 41 , 7 @ @ import im . actor . core . modules . events . PeerChatClosed ; < nl > import im . actor . core . modules . events . PeerChatOpened ; < nl > import im . actor . core . modules . events . PeerInfoClosed ; < nl > import im . actor . core . modules . events . PeerInfoOpened ; < nl > + import im . actor . core . modules . events . UserIDLEChanged ; < nl > import im . actor . core . modules . events . UserVisible ; < nl > import im . actor . core . modules . internal . CallsModule ; < nl > import im . actor . core . network . NetworkState ; < nl > @ @ - 449 , 6 + 450 , 22 @ @ public class Messenger { < nl > } < nl > < nl > / * * < nl > + * Can be called to indicate that user is active < nl > + * / < nl > + @ ObjectiveCName ( " onUserActive " ) < nl > + public void onUserActive ( ) { < nl > + modules . getEvents ( ) . postSticky ( new UserIDLEChanged ( false ) ) ; < nl > + } < nl > + < nl > + / * * < nl > + * Can be called to indicate that user became idle < nl > + * / < nl > + @ ObjectiveCName ( " onUserIDLE " ) < nl > + public void onUserIDLE ( ) { < nl > + modules . getEvents ( ) . postSticky ( new UserIDLEChanged ( true ) ) ; < nl > + } < nl > + < nl > + / * * < nl > * MUST be called on dialogs open < nl > * / < nl > @ ObjectiveCName ( " onDialogsOpen " ) < nl > @ @ - 733 , 7 + 750 , 7 @ @ public class Messenger { < nl > * Send json message < nl > * < nl > * @ param peer destination peer < nl > - * @ param json json content < nl > + * @ param content json content < nl > * / < nl > @ ObjectiveCName ( " sendJsonWithPeer : withJson : " ) < nl > public void sendCustomJsonMessage ( @ NotNull Peer peer , @ NotNull JsonContent content ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / events / UserIDLEChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / events / UserIDLEChanged . java < nl > new file mode 100644 < nl > index 0000000 . . b70bb54 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / events / UserIDLEChanged . java < nl > @ @ - 0 , 0 + 1 , 29 @ @ < nl > + package im . actor . core . modules . events ; < nl > + < nl > + import im . actor . runtime . eventbus . Event ; < nl > + < nl > + public class UserIDLEChanged extends Event { < nl > + < nl > + public static final String EVENT = " user _ idle _ changed " ; < nl > + < nl > + private boolean isIDLE ; < nl > + < nl > + public UserIDLEChanged ( boolean isIDLE ) { < nl > + this . isIDLE = isIDLE ; < nl > + } < nl > + < nl > + < nl > + public boolean isIDLE ( ) { < nl > + return isIDLE ; < nl > + } < nl > + < nl > + @ Override < nl > + public String getType ( ) { < nl > + return EVENT ; < nl > + } < nl > + < nl > + @ Override < nl > + public String toString ( ) { < nl > + return EVENT + " { " + isIDLE + " } " ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java < nl > index 55643c3 . . aca6bd6 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java < nl > @ @ - 6 , 5 + 6 , 5 @ @ public class CryptoRuntimeProvider implements CryptoRuntime { < nl > public byte [ ] MD5 ( byte [ ] data ) { < nl > throw new RuntimeException ( " Dumb " ) ; < nl > } < nl > - < nl > + < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorApp / Supporting Files / Info . plist b / actor - sdk / sdk - core - ios / ActorApp / Supporting Files / Info . plist 
 index b3d27b0 . . db3802c 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorApp / Supporting Files / Info . plist 	 
 + + + b / actor - sdk / sdk - core - ios / ActorApp / Supporting Files / Info . plist 	 
 @ @ - 34 , 7 + 34 , 7 @ @ 
 	 	 < / dict > 
 	 < / array > 
 	 < key > CFBundleVersion < / key > 
 - 	 < string > 741 < / string > 
 + 	 < string > 747 < / string > 
 	 < key > Fabric < / key > 
 	 < dict > 
 	 	 < key > APIKey < / key > 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / entity / PrivateKey . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / entity / PrivateKey . java 
 index 6a7d967 . . 54ac0ad 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / entity / PrivateKey . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / entity / PrivateKey . java 
 @ @ - 43 , 11 + 43 , 11 @ @ public class PrivateKey extends BserObject { 
 } 
 } ; 
 
 - public static final Function < PrivateKey , ApiEncryptionKeySignature > SIGN ( PrivateKey identity ) { 
 + public static final Function < PrivateKey , ApiEncryptionKeySignature > SIGN ( final PrivateKey identity ) { 
 return new Function < PrivateKey , ApiEncryptionKeySignature > ( ) { 
 @ Override 
 public ApiEncryptionKeySignature apply ( PrivateKey privateKey ) { 
 - byte [ ] signature = Curve25519 . calculateSignature ( Crypto . randomBytes ( 64 ) , privateKey . getKey ( ) , 
 + byte [ ] signature = Curve25519 . calculateSignature ( Crypto . randomBytes ( 64 ) , identity . getKey ( ) , 
 RatchetKeySignature . hashForSignature ( privateKey . getKeyId ( ) , 
 privateKey . getKeyAlg ( ) , privateKey . getPublicKey ( ) ) ) ; 
 return new ApiEncryptionKeySignature ( privateKey . getKeyId ( ) , " Ed25519 " , signature ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorInterface . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorInterface . java 
 index 27b9888 . . 01ed3b3 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorInterface . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorInterface . java 
 @ @ - 1 , 8 + 1 , 10 @ @ 
 package im . actor . runtime . actors ; 
 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . actors . ask . AskIntRequest ; 
 import im . actor . runtime . actors . ask . AskMessage ; 
 import im . actor . runtime . actors . ask . AskResult ; 
 + import im . actor . runtime . function . Consumer ; 
 import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . promise . PromiseFunc ; 
 import im . actor . runtime . promise . PromiseResolver ; 
 @ @ - 23 , 8 + 25 , 19 @ @ public class ActorInterface { 
 return new Promise < T > ( new PromiseFunc < T > ( ) { 
 @ Override 
 public void exec ( PromiseResolver < T > executor ) { 
 + Log . d ( " IPC " , " [ " + dest . getPath ( ) + " ] - > " + message ) ; 
 send ( new AskIntRequest ( message , executor ) ) ; 
 } 
 + } ) . then ( new Consumer < T > ( ) { 
 + @ Override 
 + public void apply ( T t ) { 
 + Log . d ( " IPC " , " [ " + dest . getPath ( ) + " ] < - " + message + " < - " + t ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + Log . w ( " IPC " , " [ " + dest . getPath ( ) + " ] < - " + message + " < - " + e ) ; 
 + } 
 } ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index a44d871 . . a9ec5fc 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 41 , 6 + 41 , 7 @ @ import im . actor . core . modules . events . PeerChatClosed ; 
 import im . actor . core . modules . events . PeerChatOpened ; 
 import im . actor . core . modules . events . PeerInfoClosed ; 
 import im . actor . core . modules . events . PeerInfoOpened ; 
 + import im . actor . core . modules . events . UserIDLEChanged ; 
 import im . actor . core . modules . events . UserVisible ; 
 import im . actor . core . modules . internal . CallsModule ; 
 import im . actor . core . network . NetworkState ; 
 @ @ - 449 , 6 + 450 , 22 @ @ public class Messenger { 
 } 
 
 / * * 
 + * Can be called to indicate that user is active 
 + * / 
 + @ ObjectiveCName ( " onUserActive " ) 
 + public void onUserActive ( ) { 
 + modules . getEvents ( ) . postSticky ( new UserIDLEChanged ( false ) ) ; 
 + } 
 + 
 + / * * 
 + * Can be called to indicate that user became idle 
 + * / 
 + @ ObjectiveCName ( " onUserIDLE " ) 
 + public void onUserIDLE ( ) { 
 + modules . getEvents ( ) . postSticky ( new UserIDLEChanged ( true ) ) ; 
 + } 
 + 
 + / * * 
 * MUST be called on dialogs open 
 * / 
 @ ObjectiveCName ( " onDialogsOpen " ) 
 @ @ - 733 , 7 + 750 , 7 @ @ public class Messenger { 
 * Send json message 
 * 
 * @ param peer destination peer 
 - * @ param json json content 
 + * @ param content json content 
 * / 
 @ ObjectiveCName ( " sendJsonWithPeer : withJson : " ) 
 public void sendCustomJsonMessage ( @ NotNull Peer peer , @ NotNull JsonContent content ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / events / UserIDLEChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / events / UserIDLEChanged . java 
 new file mode 100644 
 index 0000000 . . b70bb54 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / events / UserIDLEChanged . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + package im . actor . core . modules . events ; 
 + 
 + import im . actor . runtime . eventbus . Event ; 
 + 
 + public class UserIDLEChanged extends Event { 
 + 
 + public static final String EVENT = " user _ idle _ changed " ; 
 + 
 + private boolean isIDLE ; 
 + 
 + public UserIDLEChanged ( boolean isIDLE ) { 
 + this . isIDLE = isIDLE ; 
 + } 
 + 
 + 
 + public boolean isIDLE ( ) { 
 + return isIDLE ; 
 + } 
 + 
 + @ Override 
 + public String getType ( ) { 
 + return EVENT ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return EVENT + " { " + isIDLE + " } " ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java 
 index 55643c3 . . aca6bd6 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java 
 @ @ - 6 , 5 + 6 , 5 @ @ public class CryptoRuntimeProvider implements CryptoRuntime { 
 public byte [ ] MD5 ( byte [ ] data ) { 
 throw new RuntimeException ( " Dumb " ) ; 
 } 
 - 
 + 
 }
