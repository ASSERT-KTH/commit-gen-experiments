BLEU SCORE: 0.2626909894424158

TEST MSG: feat ( core ) : Handling incoming call state changes
GENERATED MSG: wip ( core ) : Peer State passing

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java < nl > deleted file mode 100644 < nl > index 120a018 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java < nl > + + + / dev / null < nl > @ @ - 1 , 117 + 0 , 0 @ @ < nl > - package im . actor . core . modules . calls ; < nl > - < nl > - import java . util . List ; < nl > - < nl > - import im . actor . core . api . ApiCallMember ; < nl > - import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . core . modules . calls . bus . CallBusActor ; < nl > - import im . actor . core . modules . calls . bus . CallBusCallback ; < nl > - import im . actor . core . modules . calls . bus . CallBusInt ; < nl > - import im . actor . core . modules . calls . peers . PeerCallInt ; < nl > - import im . actor . core . modules . calls . peers . PeerSettings ; < nl > - import im . actor . core . modules . calls . peers . PeerState ; < nl > - import im . actor . core . modules . eventbus . EventBusActor ; < nl > - import im . actor . runtime . actors . Actor ; < nl > - import im . actor . runtime . actors . ActorCreator ; < nl > - import im . actor . runtime . actors . ActorRef ; < nl > - < nl > - public abstract class AbsCallActor extends EventBusActor implements CallBusCallback { < nl > - < nl > - protected final PeerSettings selfSettings ; < nl > - protected final CallViewModels callViewModels ; < nl > - protected final ActorRef callManager ; < nl > - protected CallBusInt callBus ; < nl > - protected PeerCallInt peerCall ; < nl > - < nl > - public AbsCallActor ( ModuleContext context ) { < nl > - super ( context ) ; < nl > - < nl > - this . callManager = context . getCallsModule ( ) . getCallManager ( ) ; < nl > - this . callViewModels = context ( ) . getCallsModule ( ) . getCallViewModels ( ) ; < nl > - this . selfSettings = new PeerSettings ( ) ; < nl > - this . selfSettings . setIsPreConnectionEnabled ( true ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void preStart ( ) { < nl > - super . preStart ( ) ; < nl > - callBus = new CallBusInt ( system ( ) . actorOf ( getPath ( ) + " / bus " , new ActorCreator ( ) { < nl > - @ Override < nl > - public Actor create ( ) { < nl > - return new CallBusActor ( new CallBusCallbackWrapper ( ) , selfSettings , context ( ) ) ; < nl > - } < nl > - } ) ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public final void onBusCreated ( PeerCallInt peerCallInt ) { < nl > - this . peerCall = peerCallInt ; < nl > - callPreStart ( ) ; < nl > - } < nl > - < nl > - public void callPreStart ( ) { < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void onBusStarted ( String busId ) { < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void onMembersChanged ( List < ApiCallMember > members ) { < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void onPeerStateChanged ( int uid , long deviceId , PeerState state ) { < nl > - < nl > - } < nl > - < nl > - / / < nl > - / / Wrapper < nl > - / / < nl > - < nl > - private class CallBusCallbackWrapper implements CallBusCallback { < nl > - < nl > - @ Override < nl > - public void onBusCreated ( final PeerCallInt peerCallInt ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - AbsCallActor . this . onBusCreated ( peerCallInt ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onBusStarted ( final String busId ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - AbsCallActor . this . onBusStarted ( busId ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onMembersChanged ( final List < ApiCallMember > members ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - AbsCallActor . this . onMembersChanged ( members ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onPeerStateChanged ( final int uid , final long deviceId , final PeerState state ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - AbsCallActor . this . onPeerStateChanged ( uid , deviceId , state ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index 5929861 . . c2c125d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 3 , 18 + 3 , 17 @ @ package im . actor . core . modules . calls ; < nl > import java . util . ArrayList ; < nl > import java . util . List ; < nl > < nl > - import im . actor . core . api . ApiAdvertiseSelf ; < nl > - import im . actor . core . api . ApiAnswerCall ; < nl > import im . actor . core . api . ApiCallMember ; < nl > import im . actor . core . api . rpc . RequestGetCallInfo ; < nl > import im . actor . core . api . rpc . ResponseGetCallInfo ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . calls . peers . AbsCallActor ; < nl > import im . actor . core . modules . calls . peers . PeerState ; < nl > import im . actor . core . viewmodel . CallMember ; < nl > + import im . actor . core . viewmodel . CallMemberState ; < nl > import im . actor . core . viewmodel . CallState ; < nl > import im . actor . core . viewmodel . CallVM ; < nl > - import im . actor . runtime . Log ; < nl > import im . actor . runtime . actors . messages . PoisonPill ; < nl > import im . actor . runtime . function . Consumer ; < nl > < nl > @ @ - 42 , 7 + 41 , 6 @ @ public class CallActor extends AbsCallActor { < nl > < nl > @ Override < nl > public void callPreStart ( ) { < nl > - Log . d ( TAG , " callPreStart " ) ; < nl > api ( new RequestGetCallInfo ( callId ) ) . then ( new Consumer < ResponseGetCallInfo > ( ) { < nl > @ Override < nl > public void apply ( final ResponseGetCallInfo responseGetCallInfo ) { < nl > @ @ - 60 , 22 + 58 , 33 @ @ public class CallActor extends AbsCallActor { < nl > < nl > @ Override < nl > public void onBusStarted ( String busId ) { < nl > - Log . d ( TAG , " onBusStarted " ) ; < nl > - < nl > callManager . send ( new CallManagerActor . IncomingCallReady ( callId ) , self ( ) ) ; < nl > } < nl > < nl > @ Override < nl > public void onMembersChanged ( List < ApiCallMember > members ) { < nl > - / / < nl > - / / Handle Members Update < nl > - / / < nl > + ArrayList < CallMember > vmMembers = new ArrayList < > ( ) ; < nl > + for ( ApiCallMember callMember : members ) { < nl > + vmMembers . add ( new CallMember ( callMember . getUserId ( ) , < nl > + CallMemberState . from ( callMember . getState ( ) ) ) ) ; < nl > + } < nl > + callVM . getMembers ( ) . change ( vmMembers ) ; < nl > } < nl > < nl > @ Override < nl > public void onPeerStateChanged ( int uid , long deviceId , PeerState state ) { < nl > - Log . d ( TAG , " onPeerStateChanged " + deviceId + " ( " + state + " ) " ) ; < nl > + if ( ( state = = PeerState . CONNECTED | | state = = PeerState . ACTIVE ) & & ! isConnected ) { < nl > + isConnected = true ; < nl > + if ( isAnswered ) { < nl > + callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; < nl > + } < nl > + } < nl > + } < nl > < nl > + @ Override < nl > + public void onMuteChanged ( boolean isMuted ) { < nl > + super . onMuteChanged ( isMuted ) ; < nl > + callVM . getIsMuted ( ) . change ( isMuted ) ; < nl > } < nl > < nl > public void onAnswerCall ( ) { < nl > @ @ - 83 , 7 + 92 , 11 @ @ public class CallActor extends AbsCallActor { < nl > isAnswered = true ; < nl > callBus . answerCall ( ) ; < nl > peerCall . onOwnStarted ( ) ; < nl > - < nl > + if ( isConnected ) { < nl > + callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; < nl > + } else { < nl > + callVM . getState ( ) . change ( CallState . CONNECTING ) ; < nl > + } < nl > } < nl > } < nl > < nl > @ @ - 95 , 6 + 108 , 16 @ @ public class CallActor extends AbsCallActor { < nl > } < nl > } < nl > < nl > + @ Override < nl > + public void postStop ( ) { < nl > + super . postStop ( ) ; < nl > + if ( callVM ! = null ) { < nl > + callVM . getState ( ) . change ( CallState . ENDED ) ; < nl > + } < nl > + callBus . kill ( ) ; < nl > + peerCall . kill ( ) ; < nl > + } < nl > + < nl > / / < nl > / / Messages < nl > / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > index 6233188 . . d3e21a6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 5 , 6 + 5 , 7 @ @ import java . util . HashSet ; < nl > < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . calls . peers . AbsCallActor ; < nl > import im . actor . core . util . ModuleActor ; < nl > import im . actor . core . providers . CallsProvider ; < nl > import im . actor . core . util . RandomUtils ; < nl > @ @ - 174 , 7 + 175 , 7 @ @ public class CallManagerActor extends ModuleActor { < nl > / / < nl > ActorRef ref = runningCalls . remove ( callId ) ; < nl > if ( ref ! = null ) { < nl > - / / ref . send ( new CallActor . EventBusShutdown ( ) ) ; < nl > + ref . send ( PoisonPill . INSTANCE ) ; < nl > } < nl > } < nl > } < nl > @ @ - 196 , 7 + 197 , 7 @ @ public class CallManagerActor extends ModuleActor { < nl > / / < nl > ActorRef ref = runningCalls . get ( callId ) ; < nl > if ( ref ! = null ) { < nl > - / / ref . send ( new CallSlaveActor . DoAnswerCall ( ) ) ; < nl > + ref . send ( new CallActor . AnswerCall ( ) ) ; < nl > } < nl > < nl > / / < nl > @ @ - 226 , 14 + 227 , 14 @ @ public class CallManagerActor extends ModuleActor { < nl > private void onCallMute ( long callId ) { < nl > ActorRef ref = runningCalls . get ( callId ) ; < nl > if ( ref ! = null ) { < nl > - / / ref . send ( new PeerCallActor . ChangeMute ( true ) ) ; < nl > + ref . send ( new AbsCallActor . MuteChanged ( true ) ) ; < nl > } < nl > } < nl > < nl > private void onCallUnmute ( long callId ) { < nl > ActorRef ref = runningCalls . get ( callId ) ; < nl > if ( ref ! = null ) { < nl > - / / ref . send ( new PeerCallActor . ChangeMute ( false ) ) ; < nl > + ref . send ( new AbsCallActor . MuteChanged ( false ) ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusActor . java < nl > deleted file mode 100644 < nl > index a03827c . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusActor . java < nl > + + + / dev / null < nl > @ @ - 1 , 335 + 0 , 0 @ @ < nl > - package im . actor . core . modules . calls . bus ; < nl > - < nl > - import org . jetbrains . annotations . Nullable ; < nl > - < nl > - import java . io . IOException ; < nl > - import java . util . HashMap ; < nl > - < nl > - import im . actor . core . api . ApiAdvertiseSelf ; < nl > - import im . actor . core . api . ApiAnswer ; < nl > - import im . actor . core . api . ApiAnswerCall ; < nl > - import im . actor . core . api . ApiCandidate ; < nl > - import im . actor . core . api . ApiMembersChanged ; < nl > - import im . actor . core . api . ApiNeedOffer ; < nl > - import im . actor . core . api . ApiOffer ; < nl > - import im . actor . core . api . ApiOnAnswer ; < nl > - import im . actor . core . api . ApiRejectCall ; < nl > - import im . actor . core . api . ApiSwitchMaster ; < nl > - import im . actor . core . api . ApiWebRTCSignaling ; < nl > - import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . core . modules . calls . peers . PeerCallActor ; < nl > - import im . actor . core . modules . calls . peers . PeerCallCallback ; < nl > - import im . actor . core . modules . calls . peers . PeerCallInt ; < nl > - import im . actor . core . modules . calls . peers . PeerSettings ; < nl > - import im . actor . core . modules . calls . peers . PeerState ; < nl > - import im . actor . core . modules . eventbus . EventBusActor ; < nl > - import im . actor . runtime . Log ; < nl > - import im . actor . runtime . actors . Actor ; < nl > - import im . actor . runtime . actors . ActorCreator ; < nl > - import im . actor . runtime . actors . ActorRef ; < nl > - import im . actor . runtime . webrtc . WebRTCMediaStream ; < nl > - < nl > - public class CallBusActor extends EventBusActor { < nl > - < nl > - private static final int STASH = 1 ; < nl > - < nl > - private HashMap < Long , Integer > deviceIds = new HashMap < > ( ) ; < nl > - private final PeerSettings selfSettings ; < nl > - private final PeerCallCallback peerCallback ; < nl > - private final CallBusCallback callBusCallback ; < nl > - private boolean isMasterReady ; < nl > - private int masterUid ; < nl > - private long masterDeviceId ; < nl > - private PeerCallInt peerCall ; < nl > - < nl > - public CallBusActor ( final CallBusCallback callBusCallback , PeerSettings selfSettings , ModuleContext context ) { < nl > - super ( context ) ; < nl > - < nl > - this . selfSettings = selfSettings ; < nl > - this . callBusCallback = callBusCallback ; < nl > - this . peerCallback = new CallbackWrapper ( new PeerCallCallback ( ) { < nl > - @ Override < nl > - public void onOffer ( long deviceId , String sdp ) { < nl > - sendSignal ( deviceId , new ApiOffer ( 0 , sdp , CallBusActor . this . selfSettings . toApi ( ) ) ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onAnswer ( long deviceId , String sdp ) { < nl > - sendSignal ( deviceId , new ApiAnswer ( 0 , sdp ) ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onCandidate ( long deviceId , int mdpIndex , String id , String sdp ) { < nl > - sendSignal ( deviceId , new ApiCandidate ( 0 , mdpIndex , id , sdp ) ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onPeerStateChanged ( long deviceId , PeerState state ) { < nl > - callBusCallback . onPeerStateChanged ( deviceIds . get ( deviceId ) , deviceId , state ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onStreamAdded ( long deviceId , WebRTCMediaStream stream ) { < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void onStreamRemoved ( long deviceId , WebRTCMediaStream stream ) { < nl > - < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - < nl > - @ Override < nl > - public void preStart ( ) { < nl > - super . preStart ( ) ; < nl > - < nl > - ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / peer " , new ActorCreator ( ) { < nl > - @ Override < nl > - public Actor create ( ) { < nl > - return new PeerCallActor ( peerCallback , CallBusActor . this . selfSettings , context ( ) ) ; < nl > - } < nl > - } ) ; < nl > - this . peerCall = new PeerCallInt ( ref ) ; < nl > - < nl > - callBusCallback . onBusCreated ( peerCall ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onBusStarted ( ) { < nl > - super . onBusStarted ( ) ; < nl > - callBusCallback . onBusStarted ( getBusId ( ) ) ; < nl > - } < nl > - < nl > - public void onAnswerCall ( ) { < nl > - sendSignal ( masterUid , masterDeviceId , new ApiAnswerCall ( ) ) ; < nl > - } < nl > - < nl > - public void onRejectCall ( ) { < nl > - sendSignal ( masterUid , masterDeviceId , new ApiRejectCall ( ) ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public final void onMessageReceived ( @ Nullable Integer senderId , @ Nullable Long senderDeviceId , byte [ ] data ) { < nl > - if ( senderId = = null | | senderDeviceId = = null ) { < nl > - return ; < nl > - } < nl > - deviceIds . put ( senderDeviceId , senderId ) ; < nl > - < nl > - ApiWebRTCSignaling signal ; < nl > - try { < nl > - signal = ApiWebRTCSignaling . fromBytes ( data ) ; < nl > - } catch ( IOException e ) { < nl > - e . printStackTrace ( ) ; < nl > - return ; < nl > - } < nl > - < nl > - Log . d ( " CallBusActor " , " Message Received : " + signal ) ; < nl > - < nl > - if ( signal instanceof ApiAnswer ) { < nl > - ApiAnswer answer = ( ApiAnswer ) signal ; < nl > - peerCall . onAnswer ( senderDeviceId , answer . getSdp ( ) ) ; < nl > - } else if ( signal instanceof ApiOffer ) { < nl > - ApiOffer offer = ( ApiOffer ) signal ; < nl > - peerCall . onAdvertised ( senderDeviceId , new PeerSettings ( offer . getOwnPeerSettings ( ) ) ) ; < nl > - peerCall . onOffer ( senderDeviceId , offer . getSdp ( ) ) ; < nl > - peerCall . onTheirStarted ( senderDeviceId ) ; < nl > - } else if ( signal instanceof ApiCandidate ) { < nl > - ApiCandidate candidate = ( ApiCandidate ) signal ; < nl > - peerCall . onCandidate ( senderDeviceId , candidate . getIndex ( ) , candidate . getId ( ) , candidate . getSdp ( ) ) ; < nl > - } else if ( signal instanceof ApiNeedOffer ) { < nl > - ApiNeedOffer needOffer = ( ApiNeedOffer ) signal ; < nl > - deviceIds . put ( needOffer . getDevice ( ) , needOffer . getUid ( ) ) ; < nl > - peerCall . onAdvertised ( needOffer . getDevice ( ) , new PeerSettings ( needOffer . getPeerSettings ( ) ) ) ; < nl > - peerCall . onOfferNeeded ( needOffer . getDevice ( ) ) ; < nl > - peerCall . onTheirStarted ( needOffer . getDevice ( ) ) ; < nl > - / / if ( needOffer . isSilent ( ) ! = null & & ! needOffer . isSilent ( ) ) { < nl > - / / peerCall . onTheirStarted ( needOffer . getDevice ( ) ) ; < nl > - / / } < nl > - } else if ( signal instanceof ApiOnAnswer ) { < nl > - ApiOnAnswer onAnswer = ( ApiOnAnswer ) signal ; < nl > - deviceIds . put ( onAnswer . getDevice ( ) , onAnswer . getUid ( ) ) ; < nl > - peerCall . onTheirStarted ( onAnswer . getDevice ( ) ) ; < nl > - } else if ( signal instanceof ApiSwitchMaster ) { < nl > - if ( isMasterReady ) { < nl > - return ; < nl > - } < nl > - isMasterReady = true ; < nl > - masterUid = senderId ; < nl > - masterDeviceId = senderDeviceId ; < nl > - unstashAll ( STASH ) ; < nl > - sendSignal ( masterUid , masterDeviceId , new ApiAdvertiseSelf ( selfSettings . toApi ( ) ) ) ; < nl > - } else { < nl > - / / if ( callBusCallback instanceof CallBusCallbackSlave ) { < nl > - / / CallBusCallbackSlave slaveCallback = ( CallBusCallbackSlave ) callBusCallback ; < nl > - / / if ( signal instanceof ApiSwitchMaster ) { < nl > - / / slaveCallback . onMasterSwitched ( senderId , senderDeviceId ) ; < nl > - / / } else if ( signal instanceof ApiMembersChanged ) { < nl > - / / ApiMembersChanged membersChanged = ( ApiMembersChanged ) signal ; < nl > - / / slaveCallback . onMembersChanged ( membersChanged . getAllMembers ( ) ) ; < nl > - / / } < nl > - / / } else { < nl > - / / / / Nothing ? < nl > - / / } < nl > - } < nl > - } < nl > - < nl > - public final void sendSignal ( long deviceId , ApiWebRTCSignaling signal ) { < nl > - sendSignal ( deviceIds . get ( deviceId ) , deviceId , signal ) ; < nl > - } < nl > - < nl > - public final void sendSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { < nl > - Log . d ( " CallBusActor " , " Message Sent : " + signal ) ; < nl > - try { < nl > - sendMessage ( uid , deviceId , signal . buildContainer ( ) ) ; < nl > - } catch ( IOException e ) { < nl > - e . printStackTrace ( ) ; < nl > - } < nl > - } < nl > - < nl > - @ Override < nl > - public void onReceive ( Object message ) { < nl > - if ( message instanceof JoinBus ) { < nl > - joinBus ( ( ( JoinBus ) message ) . getBusId ( ) ) ; < nl > - } else if ( message instanceof CreateBus ) { < nl > - createBus ( ) ; < nl > - } else if ( message instanceof SendSignal ) { < nl > - SendSignal signal = ( SendSignal ) message ; < nl > - sendSignal ( signal . getUid ( ) , signal . getDeviceId ( ) , signal . getSignal ( ) ) ; < nl > - } else if ( message instanceof AnswerCall ) { < nl > - if ( ! isMasterReady ) { < nl > - stash ( STASH ) ; < nl > - return ; < nl > - } < nl > - onAnswerCall ( ) ; < nl > - } else if ( message instanceof RejectCall ) { < nl > - if ( ! isMasterReady ) { < nl > - stash ( STASH ) ; < nl > - return ; < nl > - } < nl > - onRejectCall ( ) ; < nl > - } else { < nl > - super . onReceive ( message ) ; < nl > - } < nl > - } < nl > - < nl > - public static class JoinBus { < nl > - < nl > - private String busId ; < nl > - < nl > - public JoinBus ( String busId ) { < nl > - this . busId = busId ; < nl > - } < nl > - < nl > - public String getBusId ( ) { < nl > - return busId ; < nl > - } < nl > - } < nl > - < nl > - public static class CreateBus { < nl > - < nl > - } < nl > - < nl > - public static class SendSignal { < nl > - < nl > - private int uid ; < nl > - private long deviceId ; < nl > - private ApiWebRTCSignaling signal ; < nl > - < nl > - public SendSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { < nl > - this . uid = uid ; < nl > - this . deviceId = deviceId ; < nl > - this . signal = signal ; < nl > - } < nl > - < nl > - public int getUid ( ) { < nl > - return uid ; < nl > - } < nl > - < nl > - public long getDeviceId ( ) { < nl > - return deviceId ; < nl > - } < nl > - < nl > - public ApiWebRTCSignaling getSignal ( ) { < nl > - return signal ; < nl > - } < nl > - } < nl > - < nl > - public static class AnswerCall { < nl > - < nl > - } < nl > - < nl > - public static class RejectCall { < nl > - < nl > - } < nl > - < nl > - public class CallbackWrapper implements PeerCallCallback { < nl > - < nl > - private final PeerCallCallback callCallback ; < nl > - < nl > - public CallbackWrapper ( PeerCallCallback callCallback ) { < nl > - this . callCallback = callCallback ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onOffer ( final long deviceId , final String sdp ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - callCallback . onOffer ( deviceId , sdp ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onAnswer ( final long deviceId , final String sdp ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - callCallback . onAnswer ( deviceId , sdp ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onCandidate ( final long deviceId , final int mdpIndex , final String id , final String sdp ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - callCallback . onCandidate ( deviceId , mdpIndex , id , sdp ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onPeerStateChanged ( final long deviceId , final PeerState state ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - callCallback . onPeerStateChanged ( deviceId , state ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onStreamAdded ( final long deviceId , final WebRTCMediaStream stream ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - callCallback . onStreamAdded ( deviceId , stream ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onStreamRemoved ( final long deviceId , final WebRTCMediaStream stream ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - callCallback . onStreamRemoved ( deviceId , stream ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallback . java < nl > deleted file mode 100644 < nl > index d523f9c . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallback . java < nl > + + + / dev / null < nl > @ @ - 1 , 18 + 0 , 0 @ @ < nl > - package im . actor . core . modules . calls . bus ; < nl > - < nl > - import java . util . List ; < nl > - < nl > - import im . actor . core . api . ApiCallMember ; < nl > - import im . actor . core . modules . calls . peers . PeerCallInt ; < nl > - import im . actor . core . modules . calls . peers . PeerState ; < nl > - < nl > - public interface CallBusCallback { < nl > - < nl > - void onBusCreated ( PeerCallInt peerCallInt ) ; < nl > - < nl > - void onBusStarted ( String busId ) ; < nl > - < nl > - void onMembersChanged ( List < ApiCallMember > members ) ; < nl > - < nl > - void onPeerStateChanged ( int uid , long deviceId , PeerState state ) ; < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusInt . java < nl > deleted file mode 100644 < nl > index 1b82c74 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusInt . java < nl > + + + / dev / null < nl > @ @ - 1 , 32 + 0 , 0 @ @ < nl > - package im . actor . core . modules . calls . bus ; < nl > - < nl > - import im . actor . core . api . ApiWebRTCSignaling ; < nl > - import im . actor . runtime . actors . ActorInterface ; < nl > - import im . actor . runtime . actors . ActorRef ; < nl > - < nl > - public class CallBusInt extends ActorInterface { < nl > - < nl > - public CallBusInt ( ActorRef dest ) { < nl > - super ( dest ) ; < nl > - } < nl > - < nl > - public void joinBus ( String busId ) { < nl > - send ( new CallBusActor . JoinBus ( busId ) ) ; < nl > - } < nl > - < nl > - public void createBus ( ) { < nl > - send ( new CallBusActor . CreateBus ( ) ) ; < nl > - } < nl > - < nl > - public void sendSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { < nl > - send ( new CallBusActor . SendSignal ( uid , deviceId , signal ) ) ; < nl > - } < nl > - < nl > - public void answerCall ( ) { < nl > - send ( new CallBusActor . AnswerCall ( ) ) ; < nl > - } < nl > - < nl > - public void rejectCall ( ) { < nl > - send ( new CallBusActor . RejectCall ( ) ) ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java < nl > new file mode 100644 < nl > index 0000000 . . 7817cec < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java < nl > @ @ - 0 , 0 + 1 , 138 @ @ < nl > + package im . actor . core . modules . calls . peers ; < nl > + < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . api . ApiCallMember ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . calls . CallViewModels ; < nl > + import im . actor . core . modules . eventbus . EventBusActor ; < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + < nl > + public abstract class AbsCallActor extends EventBusActor implements CallBusCallback { < nl > + < nl > + protected final PeerSettings selfSettings ; < nl > + protected final CallViewModels callViewModels ; < nl > + protected final ActorRef callManager ; < nl > + protected CallBusInt callBus ; < nl > + protected PeerCallInt peerCall ; < nl > + < nl > + public AbsCallActor ( ModuleContext context ) { < nl > + super ( context ) ; < nl > + < nl > + this . callManager = context . getCallsModule ( ) . getCallManager ( ) ; < nl > + this . callViewModels = context ( ) . getCallsModule ( ) . getCallViewModels ( ) ; < nl > + this . selfSettings = new PeerSettings ( ) ; < nl > + this . selfSettings . setIsPreConnectionEnabled ( true ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + callBus = new CallBusInt ( system ( ) . actorOf ( getPath ( ) + " / bus " , new ActorCreator ( ) { < nl > + @ Override < nl > + public Actor create ( ) { < nl > + return new CallBusActor ( new CallBusCallbackWrapper ( ) , selfSettings , context ( ) ) ; < nl > + } < nl > + } ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public final void onBusCreated ( PeerCallInt peerCallInt ) { < nl > + this . peerCall = peerCallInt ; < nl > + callPreStart ( ) ; < nl > + } < nl > + < nl > + public void callPreStart ( ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onBusStarted ( String busId ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onMembersChanged ( List < ApiCallMember > members ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onPeerStateChanged ( int uid , long deviceId , PeerState state ) { < nl > + < nl > + } < nl > + < nl > + public void onMuteChanged ( boolean isMuted ) { < nl > + peerCall . onMuteChanged ( isMuted ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof MuteChanged ) { < nl > + onMuteChanged ( ( ( MuteChanged ) message ) . isMuted ( ) ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > + public static class MuteChanged { < nl > + < nl > + private boolean isMuted ; < nl > + < nl > + public MuteChanged ( boolean isMuted ) { < nl > + this . isMuted = isMuted ; < nl > + } < nl > + < nl > + public boolean isMuted ( ) { < nl > + return isMuted ; < nl > + } < nl > + } < nl > + < nl > + / / < nl > + / / Wrapper < nl > + / / < nl > + < nl > + private class CallBusCallbackWrapper implements CallBusCallback { < nl > + < nl > + @ Override < nl > + public void onBusCreated ( final PeerCallInt peerCallInt ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + AbsCallActor . this . onBusCreated ( peerCallInt ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onBusStarted ( final String busId ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + AbsCallActor . this . onBusStarted ( busId ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onMembersChanged ( final List < ApiCallMember > members ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + AbsCallActor . this . onMembersChanged ( members ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onPeerStateChanged ( final int uid , final long deviceId , final PeerState state ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + AbsCallActor . this . onPeerStateChanged ( uid , deviceId , state ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java < nl > new file mode 100644 < nl > index 0000000 . . 6ebd1c4 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java < nl > @ @ - 0 , 0 + 1 , 335 @ @ < nl > + package im . actor . core . modules . calls . peers ; < nl > + < nl > + import org . jetbrains . annotations . Nullable ; < nl > + < nl > + import java . io . IOException ; < nl > + import java . util . HashMap ; < nl > + < nl > + import im . actor . core . api . ApiAdvertiseSelf ; < nl > + import im . actor . core . api . ApiAnswer ; < nl > + import im . actor . core . api . ApiAnswerCall ; < nl > + import im . actor . core . api . ApiCandidate ; < nl > + import im . actor . core . api . ApiMembersChanged ; < nl > + import im . actor . core . api . ApiNeedOffer ; < nl > + import im . actor . core . api . ApiOffer ; < nl > + import im . actor . core . api . ApiOnAnswer ; < nl > + import im . actor . core . api . ApiRejectCall ; < nl > + import im . actor . core . api . ApiSwitchMaster ; < nl > + import im . actor . core . api . ApiWebRTCSignaling ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . calls . peers . PeerCallActor ; < nl > + import im . actor . core . modules . calls . peers . PeerCallCallback ; < nl > + import im . actor . core . modules . calls . peers . PeerCallInt ; < nl > + import im . actor . core . modules . calls . peers . PeerSettings ; < nl > + import im . actor . core . modules . calls . peers . PeerState ; < nl > + import im . actor . core . modules . eventbus . EventBusActor ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . webrtc . WebRTCMediaStream ; < nl > + < nl > + public class CallBusActor extends EventBusActor { < nl > + < nl > + private static final int STASH = 1 ; < nl > + < nl > + private HashMap < Long , Integer > deviceIds = new HashMap < > ( ) ; < nl > + private final PeerSettings selfSettings ; < nl > + private final PeerCallCallback peerCallback ; < nl > + private final CallBusCallback callBusCallback ; < nl > + private boolean isMasterReady ; < nl > + private int masterUid ; < nl > + private long masterDeviceId ; < nl > + private PeerCallInt peerCall ; < nl > + < nl > + public CallBusActor ( final CallBusCallback callBusCallback , PeerSettings selfSettings , ModuleContext context ) { < nl > + super ( context ) ; < nl > + < nl > + this . selfSettings = selfSettings ; < nl > + this . callBusCallback = callBusCallback ; < nl > + this . peerCallback = new CallbackWrapper ( new PeerCallCallback ( ) { < nl > + @ Override < nl > + public void onOffer ( long deviceId , String sdp ) { < nl > + sendSignal ( deviceId , new ApiOffer ( 0 , sdp , CallBusActor . this . selfSettings . toApi ( ) ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onAnswer ( long deviceId , String sdp ) { < nl > + sendSignal ( deviceId , new ApiAnswer ( 0 , sdp ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onCandidate ( long deviceId , int mdpIndex , String id , String sdp ) { < nl > + sendSignal ( deviceId , new ApiCandidate ( 0 , mdpIndex , id , sdp ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onPeerStateChanged ( long deviceId , PeerState state ) { < nl > + callBusCallback . onPeerStateChanged ( deviceIds . get ( deviceId ) , deviceId , state ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onStreamAdded ( long deviceId , WebRTCMediaStream stream ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onStreamRemoved ( long deviceId , WebRTCMediaStream stream ) { < nl > + < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + < nl > + ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / peer " , new ActorCreator ( ) { < nl > + @ Override < nl > + public Actor create ( ) { < nl > + return new PeerCallActor ( peerCallback , CallBusActor . this . selfSettings , context ( ) ) ; < nl > + } < nl > + } ) ; < nl > + this . peerCall = new PeerCallInt ( ref ) ; < nl > + < nl > + callBusCallback . onBusCreated ( peerCall ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onBusStarted ( ) { < nl > + super . onBusStarted ( ) ; < nl > + callBusCallback . onBusStarted ( getBusId ( ) ) ; < nl > + } < nl > + < nl > + public void onAnswerCall ( ) { < nl > + sendSignal ( masterUid , masterDeviceId , new ApiAnswerCall ( ) ) ; < nl > + } < nl > + < nl > + public void onRejectCall ( ) { < nl > + sendSignal ( masterUid , masterDeviceId , new ApiRejectCall ( ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public final void onMessageReceived ( @ Nullable Integer senderId , @ Nullable Long senderDeviceId , byte [ ] data ) { < nl > + if ( senderId = = null | | senderDeviceId = = null ) { < nl > + return ; < nl > + } < nl > + deviceIds . put ( senderDeviceId , senderId ) ; < nl > + < nl > + ApiWebRTCSignaling signal ; < nl > + try { < nl > + signal = ApiWebRTCSignaling . fromBytes ( data ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + return ; < nl > + } < nl > + < nl > + Log . d ( " CallBusActor " , " Message Received : " + signal ) ; < nl > + < nl > + if ( signal instanceof ApiAnswer ) { < nl > + ApiAnswer answer = ( ApiAnswer ) signal ; < nl > + peerCall . onAnswer ( senderDeviceId , answer . getSdp ( ) ) ; < nl > + } else if ( signal instanceof ApiOffer ) { < nl > + ApiOffer offer = ( ApiOffer ) signal ; < nl > + peerCall . onAdvertised ( senderDeviceId , new PeerSettings ( offer . getOwnPeerSettings ( ) ) ) ; < nl > + peerCall . onOffer ( senderDeviceId , offer . getSdp ( ) ) ; < nl > + peerCall . onTheirStarted ( senderDeviceId ) ; < nl > + } else if ( signal instanceof ApiCandidate ) { < nl > + ApiCandidate candidate = ( ApiCandidate ) signal ; < nl > + peerCall . onCandidate ( senderDeviceId , candidate . getIndex ( ) , candidate . getId ( ) , candidate . getSdp ( ) ) ; < nl > + } else if ( signal instanceof ApiNeedOffer ) { < nl > + ApiNeedOffer needOffer = ( ApiNeedOffer ) signal ; < nl > + deviceIds . put ( needOffer . getDevice ( ) , needOffer . getUid ( ) ) ; < nl > + peerCall . onAdvertised ( needOffer . getDevice ( ) , new PeerSettings ( needOffer . getPeerSettings ( ) ) ) ; < nl > + peerCall . onOfferNeeded ( needOffer . getDevice ( ) ) ; < nl > + peerCall . onTheirStarted ( needOffer . getDevice ( ) ) ; < nl > + / / if ( needOffer . isSilent ( ) ! = null & & ! needOffer . isSilent ( ) ) { < nl > + / / peerCall . onTheirStarted ( needOffer . getDevice ( ) ) ; < nl > + / / } < nl > + } else if ( signal instanceof ApiOnAnswer ) { < nl > + ApiOnAnswer onAnswer = ( ApiOnAnswer ) signal ; < nl > + deviceIds . put ( onAnswer . getDevice ( ) , onAnswer . getUid ( ) ) ; < nl > + peerCall . onTheirStarted ( onAnswer . getDevice ( ) ) ; < nl > + } else if ( signal instanceof ApiSwitchMaster ) { < nl > + if ( isMasterReady ) { < nl > + return ; < nl > + } < nl > + isMasterReady = true ; < nl > + masterUid = senderId ; < nl > + masterDeviceId = senderDeviceId ; < nl > + unstashAll ( STASH ) ; < nl > + sendSignal ( masterUid , masterDeviceId , new ApiAdvertiseSelf ( selfSettings . toApi ( ) ) ) ; < nl > + } else { < nl > + / / if ( callBusCallback instanceof CallBusCallbackSlave ) { < nl > + / / CallBusCallbackSlave slaveCallback = ( CallBusCallbackSlave ) callBusCallback ; < nl > + / / if ( signal instanceof ApiSwitchMaster ) { < nl > + / / slaveCallback . onMasterSwitched ( senderId , senderDeviceId ) ; < nl > + / / } else if ( signal instanceof ApiMembersChanged ) { < nl > + / / ApiMembersChanged membersChanged = ( ApiMembersChanged ) signal ; < nl > + / / slaveCallback . onMembersChanged ( membersChanged . getAllMembers ( ) ) ; < nl > + / / } < nl > + / / } else { < nl > + / / / / Nothing ? < nl > + / / } < nl > + } < nl > + } < nl > + < nl > + public final void sendSignal ( long deviceId , ApiWebRTCSignaling signal ) { < nl > + sendSignal ( deviceIds . get ( deviceId ) , deviceId , signal ) ; < nl > + } < nl > + < nl > + public final void sendSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { < nl > + Log . d ( " CallBusActor " , " Message Sent : " + signal ) ; < nl > + try { < nl > + sendMessage ( uid , deviceId , signal . buildContainer ( ) ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof JoinBus ) { < nl > + joinBus ( ( ( JoinBus ) message ) . getBusId ( ) ) ; < nl > + } else if ( message instanceof CreateBus ) { < nl > + createBus ( ) ; < nl > + } else if ( message instanceof SendSignal ) { < nl > + SendSignal signal = ( SendSignal ) message ; < nl > + sendSignal ( signal . getUid ( ) , signal . getDeviceId ( ) , signal . getSignal ( ) ) ; < nl > + } else if ( message instanceof AnswerCall ) { < nl > + if ( ! isMasterReady ) { < nl > + stash ( STASH ) ; < nl > + return ; < nl > + } < nl > + onAnswerCall ( ) ; < nl > + } else if ( message instanceof RejectCall ) { < nl > + if ( ! isMasterReady ) { < nl > + stash ( STASH ) ; < nl > + return ; < nl > + } < nl > + onRejectCall ( ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > + public static class JoinBus { < nl > + < nl > + private String busId ; < nl > + < nl > + public JoinBus ( String busId ) { < nl > + this . busId = busId ; < nl > + } < nl > + < nl > + public String getBusId ( ) { < nl > + return busId ; < nl > + } < nl > + } < nl > + < nl > + public static class CreateBus { < nl > + < nl > + } < nl > + < nl > + public static class SendSignal { < nl > + < nl > + private int uid ; < nl > + private long deviceId ; < nl > + private ApiWebRTCSignaling signal ; < nl > + < nl > + public SendSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { < nl > + this . uid = uid ; < nl > + this . deviceId = deviceId ; < nl > + this . signal = signal ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + < nl > + public long getDeviceId ( ) { < nl > + return deviceId ; < nl > + } < nl > + < nl > + public ApiWebRTCSignaling getSignal ( ) { < nl > + return signal ; < nl > + } < nl > + } < nl > + < nl > + public static class AnswerCall { < nl > + < nl > + } < nl > + < nl > + public static class RejectCall { < nl > + < nl > + } < nl > + < nl > + public class CallbackWrapper implements PeerCallCallback { < nl > + < nl > + private final PeerCallCallback callCallback ; < nl > + < nl > + public CallbackWrapper ( PeerCallCallback callCallback ) { < nl > + this . callCallback = callCallback ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onOffer ( final long deviceId , final String sdp ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callCallback . onOffer ( deviceId , sdp ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onAnswer ( final long deviceId , final String sdp ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callCallback . onAnswer ( deviceId , sdp ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onCandidate ( final long deviceId , final int mdpIndex , final String id , final String sdp ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callCallback . onCandidate ( deviceId , mdpIndex , id , sdp ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onPeerStateChanged ( final long deviceId , final PeerState state ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callCallback . onPeerStateChanged ( deviceId , state ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onStreamAdded ( final long deviceId , final WebRTCMediaStream stream ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callCallback . onStreamAdded ( deviceId , stream ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onStreamRemoved ( final long deviceId , final WebRTCMediaStream stream ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callCallback . onStreamRemoved ( deviceId , stream ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java < nl > new file mode 100644 < nl > index 0000000 . . 8d21384 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java < nl > @ @ - 0 , 0 + 1 , 18 @ @ < nl > + package im . actor . core . modules . calls . peers ; < nl > + < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . api . ApiCallMember ; < nl > + import im . actor . core . modules . calls . peers . PeerCallInt ; < nl > + import im . actor . core . modules . calls . peers . PeerState ; < nl > + < nl > + public interface CallBusCallback { < nl > + < nl > + void onBusCreated ( PeerCallInt peerCallInt ) ; < nl > + < nl > + void onBusStarted ( String busId ) ; < nl > + < nl > + void onMembersChanged ( List < ApiCallMember > members ) ; < nl > + < nl > + void onPeerStateChanged ( int uid , long deviceId , PeerState state ) ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusInt . java < nl > new file mode 100644 < nl > index 0000000 . . 71314b3 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusInt . java < nl > @ @ - 0 , 0 + 1 , 32 @ @ < nl > + package im . actor . core . modules . calls . peers ; < nl > + < nl > + import im . actor . core . api . ApiWebRTCSignaling ; < nl > + import im . actor . runtime . actors . ActorInterface ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + < nl > + public class CallBusInt extends ActorInterface { < nl > + < nl > + public CallBusInt ( ActorRef dest ) { < nl > + super ( dest ) ; < nl > + } < nl > + < nl > + public void joinBus ( String busId ) { < nl > + send ( new CallBusActor . JoinBus ( busId ) ) ; < nl > + } < nl > + < nl > + public void createBus ( ) { < nl > + send ( new CallBusActor . CreateBus ( ) ) ; < nl > + } < nl > + < nl > + public void sendSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { < nl > + send ( new CallBusActor . SendSignal ( uid , deviceId , signal ) ) ; < nl > + } < nl > + < nl > + public void answerCall ( ) { < nl > + send ( new CallBusActor . AnswerCall ( ) ) ; < nl > + } < nl > + < nl > + public void rejectCall ( ) { < nl > + send ( new CallBusActor . RejectCall ( ) ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallInt . java < nl > index 6196aa9 . . 92546ee 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallInt . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallInt . java < nl > @ @ - 50 , 4 + 50 , 8 @ @ public class PeerCallInt extends ActorInterface { < nl > public void disposePeer ( long deviceId ) { < nl > send ( new RTCDispose ( deviceId ) ) ; < nl > } < nl > - } < nl > + < nl > + public void onMuteChanged ( boolean isMuted ) { < nl > + send ( new PeerCallActor . MuteChanged ( isMuted ) ) ; < nl > + } < nl > + } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java < nl > index b3180fd . . ed05fe8 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java < nl > @ @ - 1 , 64 + 1 , 101 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > - import java . util . ArrayList ; < nl > - import java . util . HashMap ; < nl > + import java . util . List ; < nl > < nl > - import im . actor . core . entity . Group ; < nl > - import im . actor . core . entity . GroupMember ; < nl > - import im . actor . core . entity . Peer ; < nl > - import im . actor . core . entity . PeerType ; < nl > + import im . actor . core . api . ApiCallMember ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . calls . bus . CallBusActor ; < nl > + import im . actor . core . modules . calls . bus . CallBusCallback ; < nl > + import im . actor . core . modules . calls . bus . CallBusInt ; < nl > + import im . actor . core . modules . calls . peers . PeerCallInt ; < nl > + import im . actor . core . modules . calls . peers . PeerSettings ; < nl > import im . actor . core . modules . eventbus . EventBusActor ; < nl > - import im . actor . core . viewmodel . CallMember ; < nl > - import im . actor . core . viewmodel . CallMemberState ; < nl > - import im . actor . core . viewmodel . CallState ; < nl > - import im . actor . core . viewmodel . CallVM ; < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > < nl > - public class AbsCallActor extends EventBusActor { < nl > + public abstract class AbsCallActor extends EventBusActor implements CallBusCallback { < nl > < nl > - private final HashMap < Long , CallVM > callModels ; < nl > - private CallVM callVM ; < nl > + protected final PeerSettings selfSettings ; < nl > + protected final CallViewModels callViewModels ; < nl > + protected final ActorRef callManager ; < nl > + protected CallBusInt callBus ; < nl > + protected PeerCallInt peerCall ; < nl > < nl > public AbsCallActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > < nl > - callModels = context ( ) . getCallsModule ( ) . getCallModels ( ) ; < nl > + this . callManager = context . getCallsModule ( ) . getCallManager ( ) ; < nl > + this . callViewModels = context ( ) . getCallsModule ( ) . getCallViewModels ( ) ; < nl > + this . selfSettings = new PeerSettings ( ) ; < nl > + this . selfSettings . setIsPreConnectionEnabled ( true ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + callBus = new CallBusInt ( system ( ) . actorOf ( getPath ( ) + " / bus " , new ActorCreator ( ) { < nl > + @ Override < nl > + public Actor create ( ) { < nl > + return new CallBusActor ( new CallBusCallbackWrapper ( ) , selfSettings , context ( ) ) ; < nl > + } < nl > + } ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public final void onBusCreated ( PeerCallInt peerCallInt ) { < nl > + this . peerCall = peerCallInt ; < nl > + callPreStart ( ) ; < nl > + } < nl > + < nl > + public void callPreStart ( ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onBusStarted ( String busId ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onMembersChanged ( List < ApiCallMember > members ) { < nl > + < nl > } < nl > < nl > / / < nl > - / / Call Model helpers < nl > + / / Wrapper < nl > / / < nl > - public CallVM spawnNewVM ( long callId , Peer peer , boolean isOutgoing , ArrayList < CallMember > members , CallState callState ) { < nl > - CallVM callVM = new CallVM ( callId , peer , isOutgoing , members , callState ) ; < nl > - / / callVM . getIsMuted ( ) . change ( isMuted ( ) ) ; < nl > - synchronized ( callModels ) { < nl > - callModels . put ( callId , callVM ) ; < nl > + < nl > + private class CallBusCallbackWrapper implements CallBusCallback { < nl > + < nl > + @ Override < nl > + public void onBusCreated ( final PeerCallInt peerCallInt ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + AbsCallActor . this . onBusCreated ( peerCallInt ) ; < nl > + } < nl > + } ) ; < nl > } < nl > - this . callVM = callVM ; < nl > - return callVM ; < nl > - } < nl > < nl > - public CallVM spanNewOutgoingVM ( long callId , Peer peer ) { < nl > - ArrayList < CallMember > members = new ArrayList < > ( ) ; < nl > - if ( peer . getPeerType ( ) = = PeerType . PRIVATE | | < nl > - peer . getPeerType ( ) = = PeerType . PRIVATE _ ENCRYPTED ) { < nl > - members . add ( new CallMember ( peer . getPeerId ( ) , CallMemberState . RINGING ) ) ; < nl > - } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > - Group g = getGroup ( peer . getPeerId ( ) ) ; < nl > - for ( GroupMember gm : g . getMembers ( ) ) { < nl > - if ( gm . getUid ( ) ! = myUid ( ) ) { < nl > - members . add ( new CallMember ( gm . getUid ( ) , CallMemberState . RINGING ) ) ; < nl > + @ Override < nl > + public void onBusStarted ( final String busId ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + AbsCallActor . this . onBusStarted ( busId ) ; < nl > } < nl > - } < nl > + } ) ; < nl > } < nl > - return spawnNewVM ( callId , peer , true , members , CallState . RINGING ) ; < nl > - } < nl > < nl > - / / @ Override < nl > - / / public void onMute ( boolean isMuted ) { < nl > - / / super . onMute ( isMuted ) ; < nl > - / / if ( callVM ! = null ) { < nl > - / / callVM . getIsMuted ( ) . change ( isMuted ) ; < nl > - / / } < nl > - / / } < nl > + @ Override < nl > + public void onMembersChanged ( final List < ApiCallMember > members ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + AbsCallActor . this . onMembersChanged ( members ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index e8f614d . . e3ac82b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > + import java . util . ArrayList ; < nl > import java . util . List ; < nl > < nl > import im . actor . core . api . ApiAdvertiseSelf ; < nl > @ @ - 9 , 125 + 10 , 92 @ @ import im . actor . core . api . rpc . RequestGetCallInfo ; < nl > import im . actor . core . api . rpc . ResponseGetCallInfo ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . core . modules . calls . bus . CallBusActor ; < nl > - import im . actor . core . modules . calls . bus . CallBusCallbackSlave ; < nl > - import im . actor . core . modules . calls . bus . CallBusInt ; < nl > - import im . actor . core . modules . calls . peers . PeerCallInt ; < nl > - import im . actor . core . modules . calls . peers . PeerSettings ; < nl > - import im . actor . core . util . ModuleActor ; < nl > + import im . actor . core . viewmodel . CallMember ; < nl > + import im . actor . core . viewmodel . CallState ; < nl > import im . actor . core . viewmodel . CallVM ; < nl > - import im . actor . runtime . Log ; < nl > - import im . actor . runtime . actors . Actor ; < nl > - import im . actor . runtime . actors . ActorCreator ; < nl > - import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . actors . messages . PoisonPill ; < nl > import im . actor . runtime . function . Consumer ; < nl > < nl > import static im . actor . core . modules . internal . messages . entity . EntityConverter . convert ; < nl > < nl > - public class CallActor extends ModuleActor implements CallBusCallbackSlave { < nl > + public class CallActor extends AbsCallActor { < nl > < nl > private static final String TAG = " CallActor " ; < nl > < nl > - private CallBusInt callBusInt ; < nl > - private PeerCallInt peerCallInt ; < nl > - private final ActorRef callManager ; < nl > private final long callId ; < nl > - private final PeerSettings selfSettings ; < nl > < nl > private Peer peer ; < nl > private CallVM callVM ; < nl > < nl > - private boolean isMasterReady ; < nl > - private int masterUid ; < nl > - private long masterDeviceId ; < nl > - < nl > private boolean isConnected ; < nl > private boolean isAnswered ; < nl > private boolean isRejected ; < nl > < nl > public CallActor ( long callId , ModuleContext context ) { < nl > super ( context ) ; < nl > - < nl > this . callId = callId ; < nl > - this . callManager = context . getCallsModule ( ) . getCallManager ( ) ; < nl > this . isAnswered = false ; < nl > this . isConnected = false ; < nl > - this . selfSettings = new PeerSettings ( ) ; < nl > - this . selfSettings . setIsPreConnectionEnabled ( true ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void preStart ( ) { < nl > - super . preStart ( ) ; < nl > - < nl > - < nl > - callBusInt = new CallBusInt ( system ( ) . actorOf ( getPath ( ) + " / bus " , new ActorCreator ( ) { < nl > - @ Override < nl > - public Actor create ( ) { < nl > - return new CallBusActor ( new CallbackWrapper ( ) , selfSettings , context ( ) ) ; < nl > - } < nl > - } ) ) ; < nl > } < nl > < nl > @ Override < nl > - public void onBusCreated ( PeerCallInt peerCallInt ) { < nl > - this . peerCallInt = peerCallInt ; < nl > - < nl > + public void callPreStart ( ) { < nl > api ( new RequestGetCallInfo ( callId ) ) . then ( new Consumer < ResponseGetCallInfo > ( ) { < nl > @ Override < nl > public void apply ( final ResponseGetCallInfo responseGetCallInfo ) { < nl > peer = convert ( responseGetCallInfo . getPeer ( ) ) ; < nl > - callBusInt . joinBus ( responseGetCallInfo . getEventBusId ( ) ) ; < nl > + callBus . joinBus ( responseGetCallInfo . getEventBusId ( ) ) ; < nl > + callVM = callViewModels . spawnNewIncomingVM ( callId , peer , CallState . RINGING ) ; < nl > } < nl > } ) . failure ( new Consumer < Exception > ( ) { < nl > @ Override < nl > public void apply ( Exception e ) { < nl > - < nl > + self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > } < nl > } ) . done ( self ( ) ) ; < nl > } < nl > < nl > @ Override < nl > public void onBusStarted ( String busId ) { < nl > + super . onBusStarted ( busId ) ; < nl > < nl > + callManager . send ( new CallManagerActor . OnIncomingCall ( callId ) ) ; < nl > } < nl > < nl > @ Override < nl > - public void onMasterSwitched ( int uid , long deviceId ) { < nl > - if ( isMasterReady ) { < nl > - return ; < nl > - } < nl > - < nl > - Log . d ( TAG , " onMasterSwitched " ) ; < nl > - < nl > - isMasterReady = true ; < nl > - masterUid = uid ; < nl > - masterDeviceId = deviceId ; < nl > - callBusInt . sendSignal ( masterUid , masterDeviceId , new ApiAdvertiseSelf ( selfSettings . toApi ( ) ) ) ; < nl > - unstashAll ( ) ; < nl > - < nl > - schedule ( new AnswerCall ( ) , 1000 ) ; < nl > + public void onMembersChanged ( List < ApiCallMember > members ) { < nl > + / / < nl > + / / Handle Members Update < nl > + / / < nl > } < nl > < nl > - @ Override < nl > - public void onMembersChanged ( List < ApiCallMember > members ) { < nl > - Log . d ( TAG , " onMembersChanged " ) ; < nl > + public void onAnswerCall ( ) { < nl > + if ( ! isAnswered & & ! isRejected ) { < nl > + isAnswered = true ; < nl > + callBus . answerCall ( ) ; < nl > + peerCall . onOwnStarted ( ) ; < nl > < nl > + } < nl > } < nl > < nl > - public void onAnswerCall ( ) { < nl > - callBusInt . sendSignal ( masterUid , masterDeviceId , new ApiAnswerCall ( ) ) ; < nl > - peerCallInt . onOwnStarted ( ) ; < nl > + public void onRejectCall ( ) { < nl > + if ( ! isAnswered & & ! isRejected ) { < nl > + isRejected = true ; < nl > + callBus . rejectCall ( ) ; < nl > + peerCall . kill ( ) ; < nl > + } < nl > } < nl > < nl > + / / < nl > + / / Messages < nl > + / / < nl > + < nl > @ Override < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof AnswerCall ) { < nl > - if ( ! isMasterReady ) { < nl > - stash ( ) ; < nl > - return ; < nl > - } < nl > onAnswerCall ( ) ; < nl > + } else if ( message instanceof RejectCall ) { < nl > + onRejectCall ( ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > @ @ - 137 , 64 + 105 , 7 @ @ public class CallActor extends ModuleActor implements CallBusCallbackSlave { < nl > < nl > } < nl > < nl > - public class CallbackWrapper implements CallBusCallbackSlave { < nl > + public static class RejectCall { < nl > < nl > - @ Override < nl > - public void onMasterSwitched ( final int uid , final long deviceId ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - CallActor . this . onMasterSwitched ( uid , deviceId ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onMembersChanged ( final List < ApiCallMember > members ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - CallActor . this . onMembersChanged ( members ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onBusCreated ( final PeerCallInt peerCallInt ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - CallActor . this . onBusCreated ( peerCallInt ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onBusStarted ( final String busId ) { < nl > - self ( ) . send ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - CallActor . this . onBusStarted ( busId ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > } < nl > - < nl > - / / @ Override < nl > - / / public void onSignalingStarted ( ) { < nl > - / / < nl > - / / } < nl > - / / < nl > - / / @ Override < nl > - / / public void onSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { < nl > - / / if ( signal instanceof ApiSwitchMaster ) { < nl > - / / < nl > - / / } < nl > - / / Log . d ( TAG , " onSignal : " + signal ) ; < nl > - / / } < nl > - / / < nl > - / / @ Override < nl > - / / public void onSignalingStopped ( ) { < nl > - / / < nl > - / / } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallViewModels . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallViewModels . java < nl > new file mode 100644 < nl > index 0000000 . . 3dd3942 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallViewModels . java < nl > @ @ - 0 , 0 + 1 , 61 @ @ < nl > + package im . actor . core . modules . calls ; < nl > + < nl > + import java . util . ArrayList ; < nl > + import java . util . HashMap ; < nl > + < nl > + import im . actor . core . entity . Group ; < nl > + import im . actor . core . entity . GroupMember ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerType ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . viewmodel . CallMember ; < nl > + import im . actor . core . viewmodel . CallMemberState ; < nl > + import im . actor . core . viewmodel . CallState ; < nl > + import im . actor . core . viewmodel . CallVM ; < nl > + < nl > + public class CallViewModels { < nl > + < nl > + private final HashMap < Long , CallVM > callModels ; < nl > + private final ModuleContext context ; < nl > + < nl > + public CallViewModels ( ModuleContext context ) { < nl > + this . context = context ; < nl > + this . callModels = new HashMap < > ( ) ; < nl > + } < nl > + < nl > + public synchronized CallVM getCall ( long id ) { < nl > + return callModels . get ( id ) ; < nl > + } < nl > + < nl > + public synchronized CallVM spawnNewVM ( long callId , Peer peer , boolean isOutgoing , ArrayList < CallMember > members , CallState callState ) { < nl > + CallVM callVM = new CallVM ( callId , peer , isOutgoing , members , callState ) ; < nl > + synchronized ( callModels ) { < nl > + callModels . put ( callId , callVM ) ; < nl > + } < nl > + return callVM ; < nl > + } < nl > + < nl > + public synchronized CallVM spawnNewIncomingVM ( long callId , Peer peer , CallState callState ) { < nl > + CallVM callVM = new CallVM ( callId , peer , false , new ArrayList < CallMember > ( ) , callState ) ; < nl > + synchronized ( callModels ) { < nl > + callModels . put ( callId , callVM ) ; < nl > + } < nl > + return callVM ; < nl > + } < nl > + < nl > + public synchronized CallVM spawnNewOutgoingVM ( long callId , Peer peer ) { < nl > + ArrayList < CallMember > members = new ArrayList < > ( ) ; < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE | | < nl > + peer . getPeerType ( ) = = PeerType . PRIVATE _ ENCRYPTED ) { < nl > + members . add ( new CallMember ( peer . getPeerId ( ) , CallMemberState . RINGING ) ) ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group g = context . getGroupsModule ( ) . getGroups ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > + for ( GroupMember gm : g . getMembers ( ) ) { < nl > + if ( gm . getUid ( ) ! = context . getAuthModule ( ) . myUid ( ) ) { < nl > + members . add ( new CallMember ( gm . getUid ( ) , CallMemberState . RINGING ) ) ; < nl > + } < nl > + } < nl > + } < nl > + return spawnNewVM ( callId , peer , true , members , CallState . RINGING ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > index a6664fc . . acdbf99 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > @ @ - 19 , 28 + 19 , 28 @ @ public class CallsModule extends AbsModule { < nl > < nl > private CallsProvider provider ; < nl > private ActorRef callManager ; < nl > - private HashMap < Long , CallVM > callModels = new HashMap < > ( ) ; < nl > + private CallViewModels callViewModels ; < nl > < nl > public CallsModule ( ModuleContext context ) { < nl > super ( context ) ; < nl > < nl > provider = context ( ) . getConfiguration ( ) . getCallsProvider ( ) ; < nl > + callViewModels = new CallViewModels ( context ( ) ) ; < nl > } < nl > < nl > public void run ( ) { < nl > if ( provider = = null ) { < nl > return ; < nl > } < nl > - < nl > callManager = system ( ) . actorOf ( " calls / manager " , CallManagerActor . CONSTRUCTOR ( context ( ) ) ) ; < nl > } < nl > < nl > - public HashMap < Long , CallVM > getCallModels ( ) { < nl > - return callModels ; < nl > + public CallViewModels getCallViewModels ( ) { < nl > + return callViewModels ; < nl > } < nl > < nl > public CallVM getCall ( long id ) { < nl > - return callModels . get ( id ) ; < nl > + return callViewModels . getCall ( id ) ; < nl > } < nl > < nl > public ActorRef getCallManager ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusActor . java < nl > index 6286caf . . 868ea55 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusActor . java < nl > @ @ - 5 , 6 + 5 , 7 @ @ import org . jetbrains . annotations . Nullable ; < nl > import java . io . IOException ; < nl > import java . util . HashMap ; < nl > < nl > + import im . actor . core . api . ApiAdvertiseSelf ; < nl > import im . actor . core . api . ApiAnswer ; < nl > import im . actor . core . api . ApiCandidate ; < nl > import im . actor . core . api . ApiMembersChanged ; < nl > @ @ - 27 , 10 + 28 , 15 @ @ import im . actor . runtime . webrtc . WebRTCMediaStream ; < nl > < nl > public class CallBusActor extends EventBusActor { < nl > < nl > + private static final int STASH = 1 ; < nl > + < nl > private HashMap < Long , Integer > deviceIds = new HashMap < > ( ) ; < nl > private final PeerSettings selfSettings ; < nl > private final PeerCallCallback peerCallback ; < nl > private final CallBusCallback callBusCallback ; < nl > + private boolean isMasterReady ; < nl > + private int masterUid ; < nl > + private long masterDeviceId ; < nl > private PeerCallInt peerCall ; < nl > < nl > public CallBusActor ( CallBusCallback callBusCallback , PeerSettings selfSettings , ModuleContext context ) { < nl > @ @ - 55 , 6 + 61 , 11 @ @ public class CallBusActor extends EventBusActor { < nl > } < nl > < nl > @ Override < nl > + public void onHandshakeSuccessful ( long deviceId ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > public void onConnectionStarted ( long deviceId ) { < nl > < nl > } < nl > @ @ - 98 , 6 + 109 , 10 @ @ public class CallBusActor extends EventBusActor { < nl > callBusCallback . onBusStarted ( getBusId ( ) ) ; < nl > } < nl > < nl > + public void onAnswerCall ( ) { < nl > + < nl > + } < nl > + < nl > @ Override < nl > public final void onMessageReceived ( @ Nullable Integer senderId , @ Nullable Long senderDeviceId , byte [ ] data ) { < nl > if ( senderId = = null | | senderDeviceId = = null ) { < nl > @ @ - 139 , 18 + 154 , 27 @ @ public class CallBusActor extends EventBusActor { < nl > ApiOnAnswer onAnswer = ( ApiOnAnswer ) signal ; < nl > deviceIds . put ( onAnswer . getDevice ( ) , onAnswer . getUid ( ) ) ; < nl > peerCall . onTheirStarted ( onAnswer . getDevice ( ) ) ; < nl > - } else { < nl > - if ( callBusCallback instanceof CallBusCallbackSlave ) { < nl > - CallBusCallbackSlave slaveCallback = ( CallBusCallbackSlave ) callBusCallback ; < nl > - if ( signal instanceof ApiSwitchMaster ) { < nl > - slaveCallback . onMasterSwitched ( senderId , senderDeviceId ) ; < nl > - } else if ( signal instanceof ApiMembersChanged ) { < nl > - ApiMembersChanged membersChanged = ( ApiMembersChanged ) signal ; < nl > - slaveCallback . onMembersChanged ( membersChanged . getAllMembers ( ) ) ; < nl > - } < nl > - } else { < nl > - / / Nothing ? < nl > + } else if ( signal instanceof ApiSwitchMaster ) { < nl > + if ( isMasterReady ) { < nl > + return ; < nl > } < nl > + isMasterReady = true ; < nl > + masterUid = senderId ; < nl > + masterDeviceId = senderDeviceId ; < nl > + unstashAll ( STASH ) ; < nl > + sendSignal ( masterUid , masterDeviceId , new ApiAdvertiseSelf ( selfSettings . toApi ( ) ) ) ; < nl > + } else { < nl > + / / if ( callBusCallback instanceof CallBusCallbackSlave ) { < nl > + / / CallBusCallbackSlave slaveCallback = ( CallBusCallbackSlave ) callBusCallback ; < nl > + / / if ( signal instanceof ApiSwitchMaster ) { < nl > + / / slaveCallback . onMasterSwitched ( senderId , senderDeviceId ) ; < nl > + / / } else if ( signal instanceof ApiMembersChanged ) { < nl > + / / ApiMembersChanged membersChanged = ( ApiMembersChanged ) signal ; < nl > + / / slaveCallback . onMembersChanged ( membersChanged . getAllMembers ( ) ) ; < nl > + / / } < nl > + / / } else { < nl > + / / / / Nothing ? < nl > + / / } < nl > } < nl > } < nl > < nl > @ @ - 177 , 6 + 201 , 11 @ @ public class CallBusActor extends EventBusActor { < nl > } else if ( message instanceof SendSignal ) { < nl > SendSignal signal = ( SendSignal ) message ; < nl > sendSignal ( signal . getUid ( ) , signal . getDeviceId ( ) , signal . getSignal ( ) ) ; < nl > + } else if ( message instanceof AnswerCall ) { < nl > + if ( ! isMasterReady ) { < nl > + stash ( STASH ) ; < nl > + } < nl > + onAnswerCall ( ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > @ @ - 224 , 6 + 253 , 14 @ @ public class CallBusActor extends EventBusActor { < nl > } < nl > } < nl > < nl > + public static class AnswerCall { < nl > + < nl > + } < nl > + < nl > + public static class RejectCall { < nl > + < nl > + } < nl > + < nl > public class CallbackWrapper implements PeerCallCallback { < nl > < nl > private final PeerCallCallback callCallback ; < nl > @ @ - 263 , 6 + 300 , 16 @ @ public class CallBusActor extends EventBusActor { < nl > } < nl > < nl > @ Override < nl > + public void onHandshakeSuccessful ( final long deviceId ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callCallback . onHandshakeSuccessful ( deviceId ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > public void onConnectionStarted ( final long deviceId ) { < nl > self ( ) . send ( new Runnable ( ) { < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallback . java < nl > index d830a7a . . 258f807 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallback . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallback . java < nl > @ @ - 1 , 9 + 1 , 15 @ @ < nl > package im . actor . core . modules . calls . bus ; < nl > < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . api . ApiCallMember ; < nl > import im . actor . core . modules . calls . peers . PeerCallInt ; < nl > < nl > public interface CallBusCallback { < nl > + < nl > void onBusCreated ( PeerCallInt peerCallInt ) ; < nl > < nl > void onBusStarted ( String busId ) ; < nl > + < nl > + void onMembersChanged ( List < ApiCallMember > members ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallbackSlave . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallbackSlave . java < nl > deleted file mode 100644 < nl > index 9bdc718 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallbackSlave . java < nl > + + + / dev / null < nl > @ @ - 1 , 11 + 0 , 0 @ @ < nl > - package im . actor . core . modules . calls . bus ; < nl > - < nl > - import java . util . List ; < nl > - < nl > - import im . actor . core . api . ApiCallMember ; < nl > - < nl > - public interface CallBusCallbackSlave extends CallBusCallback { < nl > - void onMasterSwitched ( int uid , long deviceId ) ; < nl > - < nl > - void onMembersChanged ( List < ApiCallMember > members ) ; < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusInt . java < nl > index 2a8b486 . . 1b82c74 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusInt . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusInt . java < nl > @ @ - 21 , 4 + 21 , 12 @ @ public class CallBusInt extends ActorInterface { < nl > public void sendSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { < nl > send ( new CallBusActor . SendSignal ( uid , deviceId , signal ) ) ; < nl > } < nl > + < nl > + public void answerCall ( ) { < nl > + send ( new CallBusActor . AnswerCall ( ) ) ; < nl > + } < nl > + < nl > + public void rejectCall ( ) { < nl > + send ( new CallBusActor . RejectCall ( ) ) ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > index b84b9f0 . . 54cc145 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > @ @ - 192 , 6 + 192 , 11 @ @ public class PeerCallActor extends ModuleActor { < nl > } < nl > < nl > @ Override < nl > + public void onHandshakeSuccessful ( long deviceId ) { < nl > + callback . onHandshakeSuccessful ( deviceId ) ; < nl > + } < nl > + < nl > + @ Override < nl > public void onConnectionStarted ( long deviceId ) { < nl > callback . onConnectionStarted ( deviceId ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallCallback . java < nl > index 5740f32 . . bf25d3a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallCallback . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallCallback . java < nl > @ @ - 10 , 6 + 10 , 8 @ @ public interface PeerCallCallback { < nl > < nl > void onCandidate ( long deviceId , int mdpIndex , String id , String sdp ) ; < nl > < nl > + void onHandshakeSuccessful ( long deviceId ) ; < nl > + < nl > void onConnectionStarted ( long deviceId ) ; < nl > < nl > void onConnectionEstablished ( long deviceId ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java < nl > index ce67492 . . bce9862 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java < nl > @ @ - 229 , 6 + 229 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > } < nl > < nl > private void onHandShakeCompleted ( ) { < nl > + callback . onHandshakeSuccessful ( ) ; < nl > isReady = true ; < nl > isReadyForCandidates = true ; < nl > state = PeerConnectionState . READY ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionCallback . java < nl > index d7c07c7 . . 710287b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionCallback . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionCallback . java < nl > @ @ - 31 , 6 + 31 , 11 @ @ public interface PeerConnectionCallback { < nl > void onCandidate ( int mdpIndex , String id , String sdp ) ; < nl > < nl > / * * < nl > + * Called when Answer / Offer finished successfully < nl > + * / < nl > + void onHandshakeSuccessful ( ) ; < nl > + < nl > + / * * < nl > * Called when peer stream was added < nl > * < nl > * @ param stream added stream < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionInt . java < nl > index f784b69 . . 9a1bbbc 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionInt . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionInt . java < nl > @ @ - 113 , 6 + 113 , 16 @ @ public class PeerConnectionInt extends ActorInterface { < nl > } < nl > < nl > @ Override < nl > + public void onHandshakeSuccessful ( ) { < nl > + callbackDest . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onHandshakeSuccessful ( ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > public void onStreamAdded ( final WebRTCMediaStream stream ) { < nl > callbackDest . send ( new Runnable ( ) { < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > index 337fe7d . . 0aaf20d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > @ @ - 148 , 6 + 148 , 11 @ @ public class PeerNodeActor extends ModuleActor implements PeerConnectionCallback < nl > } < nl > < nl > @ Override < nl > + public void onHandshakeSuccessful ( ) { < nl > + callback . onHandshakeSuccessful ( deviceId ) ; < nl > + } < nl > + < nl > + @ Override < nl > public void onStreamAdded ( WebRTCMediaStream stream ) { < nl > theirMediaStreams . add ( stream ) ; < nl > stream . setEnabled ( isEnabled ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeCallback . java < nl > index 4f8b2c2 . . d11afa5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeCallback . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeCallback . java < nl > @ @ - 37 , 6 + 37 , 13 @ @ public interface PeerNodeCallback { < nl > void onCandidate ( long deviceId , int mdpIndex , String id , String sdp ) ; < nl > < nl > / * * < nl > + * Called when handshake was successful < nl > + * < nl > + * @ param deviceId Device Id < nl > + * / < nl > + void onHandshakeSuccessful ( long deviceId ) ; < nl > + < nl > + / * * < nl > * Called when connection started < nl > * < nl > * @ param deviceId Device Id < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeInt . java < nl > index 0645618 . . 89abb45 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeInt . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeInt . java < nl > @ @ - 145 , 6 + 145 , 16 @ @ public class PeerNodeInt extends ActorInterface { < nl > } < nl > < nl > @ Override < nl > + public void onHandshakeSuccessful ( final long deviceId ) { < nl > + callbackDest . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onHandshakeSuccessful ( deviceId ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > public void onConnectionStarted ( final long deviceId ) { < nl > callbackDest . send ( new Runnable ( ) { < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerState . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerState . java < nl > new file mode 100644 < nl > index 0000000 . . 3a00ef9 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerState . java < nl > @ @ - 0 , 0 + 1 , 5 @ @ < nl > + package im . actor . core . modules . calls . peers ; < nl > + < nl > + public enum PeerState { < nl > + CONNECTING , CONNECTED , ACTIVE < nl > + } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java 
 deleted file mode 100644 
 index 120a018 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java 
 + + + / dev / null 
 @ @ - 1 , 117 + 0 , 0 @ @ 
 - package im . actor . core . modules . calls ; 
 - 
 - import java . util . List ; 
 - 
 - import im . actor . core . api . ApiCallMember ; 
 - import im . actor . core . modules . ModuleContext ; 
 - import im . actor . core . modules . calls . bus . CallBusActor ; 
 - import im . actor . core . modules . calls . bus . CallBusCallback ; 
 - import im . actor . core . modules . calls . bus . CallBusInt ; 
 - import im . actor . core . modules . calls . peers . PeerCallInt ; 
 - import im . actor . core . modules . calls . peers . PeerSettings ; 
 - import im . actor . core . modules . calls . peers . PeerState ; 
 - import im . actor . core . modules . eventbus . EventBusActor ; 
 - import im . actor . runtime . actors . Actor ; 
 - import im . actor . runtime . actors . ActorCreator ; 
 - import im . actor . runtime . actors . ActorRef ; 
 - 
 - public abstract class AbsCallActor extends EventBusActor implements CallBusCallback { 
 - 
 - protected final PeerSettings selfSettings ; 
 - protected final CallViewModels callViewModels ; 
 - protected final ActorRef callManager ; 
 - protected CallBusInt callBus ; 
 - protected PeerCallInt peerCall ; 
 - 
 - public AbsCallActor ( ModuleContext context ) { 
 - super ( context ) ; 
 - 
 - this . callManager = context . getCallsModule ( ) . getCallManager ( ) ; 
 - this . callViewModels = context ( ) . getCallsModule ( ) . getCallViewModels ( ) ; 
 - this . selfSettings = new PeerSettings ( ) ; 
 - this . selfSettings . setIsPreConnectionEnabled ( true ) ; 
 - } 
 - 
 - @ Override 
 - public void preStart ( ) { 
 - super . preStart ( ) ; 
 - callBus = new CallBusInt ( system ( ) . actorOf ( getPath ( ) + " / bus " , new ActorCreator ( ) { 
 - @ Override 
 - public Actor create ( ) { 
 - return new CallBusActor ( new CallBusCallbackWrapper ( ) , selfSettings , context ( ) ) ; 
 - } 
 - } ) ) ; 
 - } 
 - 
 - @ Override 
 - public final void onBusCreated ( PeerCallInt peerCallInt ) { 
 - this . peerCall = peerCallInt ; 
 - callPreStart ( ) ; 
 - } 
 - 
 - public void callPreStart ( ) { 
 - 
 - } 
 - 
 - @ Override 
 - public void onBusStarted ( String busId ) { 
 - 
 - } 
 - 
 - @ Override 
 - public void onMembersChanged ( List < ApiCallMember > members ) { 
 - 
 - } 
 - 
 - @ Override 
 - public void onPeerStateChanged ( int uid , long deviceId , PeerState state ) { 
 - 
 - } 
 - 
 - / / 
 - / / Wrapper 
 - / / 
 - 
 - private class CallBusCallbackWrapper implements CallBusCallback { 
 - 
 - @ Override 
 - public void onBusCreated ( final PeerCallInt peerCallInt ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - AbsCallActor . this . onBusCreated ( peerCallInt ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public void onBusStarted ( final String busId ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - AbsCallActor . this . onBusStarted ( busId ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public void onMembersChanged ( final List < ApiCallMember > members ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - AbsCallActor . this . onMembersChanged ( members ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public void onPeerStateChanged ( final int uid , final long deviceId , final PeerState state ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - AbsCallActor . this . onPeerStateChanged ( uid , deviceId , state ) ; 
 - } 
 - } ) ; 
 - } 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index 5929861 . . c2c125d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 3 , 18 + 3 , 17 @ @ package im . actor . core . modules . calls ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 
 - import im . actor . core . api . ApiAdvertiseSelf ; 
 - import im . actor . core . api . ApiAnswerCall ; 
 import im . actor . core . api . ApiCallMember ; 
 import im . actor . core . api . rpc . RequestGetCallInfo ; 
 import im . actor . core . api . rpc . ResponseGetCallInfo ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . calls . peers . AbsCallActor ; 
 import im . actor . core . modules . calls . peers . PeerState ; 
 import im . actor . core . viewmodel . CallMember ; 
 + import im . actor . core . viewmodel . CallMemberState ; 
 import im . actor . core . viewmodel . CallState ; 
 import im . actor . core . viewmodel . CallVM ; 
 - import im . actor . runtime . Log ; 
 import im . actor . runtime . actors . messages . PoisonPill ; 
 import im . actor . runtime . function . Consumer ; 
 
 @ @ - 42 , 7 + 41 , 6 @ @ public class CallActor extends AbsCallActor { 
 
 @ Override 
 public void callPreStart ( ) { 
 - Log . d ( TAG , " callPreStart " ) ; 
 api ( new RequestGetCallInfo ( callId ) ) . then ( new Consumer < ResponseGetCallInfo > ( ) { 
 @ Override 
 public void apply ( final ResponseGetCallInfo responseGetCallInfo ) { 
 @ @ - 60 , 22 + 58 , 33 @ @ public class CallActor extends AbsCallActor { 
 
 @ Override 
 public void onBusStarted ( String busId ) { 
 - Log . d ( TAG , " onBusStarted " ) ; 
 - 
 callManager . send ( new CallManagerActor . IncomingCallReady ( callId ) , self ( ) ) ; 
 } 
 
 @ Override 
 public void onMembersChanged ( List < ApiCallMember > members ) { 
 - / / 
 - / / Handle Members Update 
 - / / 
 + ArrayList < CallMember > vmMembers = new ArrayList < > ( ) ; 
 + for ( ApiCallMember callMember : members ) { 
 + vmMembers . add ( new CallMember ( callMember . getUserId ( ) , 
 + CallMemberState . from ( callMember . getState ( ) ) ) ) ; 
 + } 
 + callVM . getMembers ( ) . change ( vmMembers ) ; 
 } 
 
 @ Override 
 public void onPeerStateChanged ( int uid , long deviceId , PeerState state ) { 
 - Log . d ( TAG , " onPeerStateChanged " + deviceId + " ( " + state + " ) " ) ; 
 + if ( ( state = = PeerState . CONNECTED | | state = = PeerState . ACTIVE ) & & ! isConnected ) { 
 + isConnected = true ; 
 + if ( isAnswered ) { 
 + callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; 
 + } 
 + } 
 + } 
 
 + @ Override 
 + public void onMuteChanged ( boolean isMuted ) { 
 + super . onMuteChanged ( isMuted ) ; 
 + callVM . getIsMuted ( ) . change ( isMuted ) ; 
 } 
 
 public void onAnswerCall ( ) { 
 @ @ - 83 , 7 + 92 , 11 @ @ public class CallActor extends AbsCallActor { 
 isAnswered = true ; 
 callBus . answerCall ( ) ; 
 peerCall . onOwnStarted ( ) ; 
 - 
 + if ( isConnected ) { 
 + callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; 
 + } else { 
 + callVM . getState ( ) . change ( CallState . CONNECTING ) ; 
 + } 
 } 
 } 
 
 @ @ - 95 , 6 + 108 , 16 @ @ public class CallActor extends AbsCallActor { 
 } 
 } 
 
 + @ Override 
 + public void postStop ( ) { 
 + super . postStop ( ) ; 
 + if ( callVM ! = null ) { 
 + callVM . getState ( ) . change ( CallState . ENDED ) ; 
 + } 
 + callBus . kill ( ) ; 
 + peerCall . kill ( ) ; 
 + } 
 + 
 / / 
 / / Messages 
 / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 index 6233188 . . d3e21a6 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . util . HashSet ; 
 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . calls . peers . AbsCallActor ; 
 import im . actor . core . util . ModuleActor ; 
 import im . actor . core . providers . CallsProvider ; 
 import im . actor . core . util . RandomUtils ; 
 @ @ - 174 , 7 + 175 , 7 @ @ public class CallManagerActor extends ModuleActor { 
 / / 
 ActorRef ref = runningCalls . remove ( callId ) ; 
 if ( ref ! = null ) { 
 - / / ref . send ( new CallActor . EventBusShutdown ( ) ) ; 
 + ref . send ( PoisonPill . INSTANCE ) ; 
 } 
 } 
 } 
 @ @ - 196 , 7 + 197 , 7 @ @ public class CallManagerActor extends ModuleActor { 
 / / 
 ActorRef ref = runningCalls . get ( callId ) ; 
 if ( ref ! = null ) { 
 - / / ref . send ( new CallSlaveActor . DoAnswerCall ( ) ) ; 
 + ref . send ( new CallActor . AnswerCall ( ) ) ; 
 } 
 
 / / 
 @ @ - 226 , 14 + 227 , 14 @ @ public class CallManagerActor extends ModuleActor { 
 private void onCallMute ( long callId ) { 
 ActorRef ref = runningCalls . get ( callId ) ; 
 if ( ref ! = null ) { 
 - / / ref . send ( new PeerCallActor . ChangeMute ( true ) ) ; 
 + ref . send ( new AbsCallActor . MuteChanged ( true ) ) ; 
 } 
 } 
 
 private void onCallUnmute ( long callId ) { 
 ActorRef ref = runningCalls . get ( callId ) ; 
 if ( ref ! = null ) { 
 - / / ref . send ( new PeerCallActor . ChangeMute ( false ) ) ; 
 + ref . send ( new AbsCallActor . MuteChanged ( false ) ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusActor . java 
 deleted file mode 100644 
 index a03827c . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusActor . java 
 + + + / dev / null 
 @ @ - 1 , 335 + 0 , 0 @ @ 
 - package im . actor . core . modules . calls . bus ; 
 - 
 - import org . jetbrains . annotations . Nullable ; 
 - 
 - import java . io . IOException ; 
 - import java . util . HashMap ; 
 - 
 - import im . actor . core . api . ApiAdvertiseSelf ; 
 - import im . actor . core . api . ApiAnswer ; 
 - import im . actor . core . api . ApiAnswerCall ; 
 - import im . actor . core . api . ApiCandidate ; 
 - import im . actor . core . api . ApiMembersChanged ; 
 - import im . actor . core . api . ApiNeedOffer ; 
 - import im . actor . core . api . ApiOffer ; 
 - import im . actor . core . api . ApiOnAnswer ; 
 - import im . actor . core . api . ApiRejectCall ; 
 - import im . actor . core . api . ApiSwitchMaster ; 
 - import im . actor . core . api . ApiWebRTCSignaling ; 
 - import im . actor . core . modules . ModuleContext ; 
 - import im . actor . core . modules . calls . peers . PeerCallActor ; 
 - import im . actor . core . modules . calls . peers . PeerCallCallback ; 
 - import im . actor . core . modules . calls . peers . PeerCallInt ; 
 - import im . actor . core . modules . calls . peers . PeerSettings ; 
 - import im . actor . core . modules . calls . peers . PeerState ; 
 - import im . actor . core . modules . eventbus . EventBusActor ; 
 - import im . actor . runtime . Log ; 
 - import im . actor . runtime . actors . Actor ; 
 - import im . actor . runtime . actors . ActorCreator ; 
 - import im . actor . runtime . actors . ActorRef ; 
 - import im . actor . runtime . webrtc . WebRTCMediaStream ; 
 - 
 - public class CallBusActor extends EventBusActor { 
 - 
 - private static final int STASH = 1 ; 
 - 
 - private HashMap < Long , Integer > deviceIds = new HashMap < > ( ) ; 
 - private final PeerSettings selfSettings ; 
 - private final PeerCallCallback peerCallback ; 
 - private final CallBusCallback callBusCallback ; 
 - private boolean isMasterReady ; 
 - private int masterUid ; 
 - private long masterDeviceId ; 
 - private PeerCallInt peerCall ; 
 - 
 - public CallBusActor ( final CallBusCallback callBusCallback , PeerSettings selfSettings , ModuleContext context ) { 
 - super ( context ) ; 
 - 
 - this . selfSettings = selfSettings ; 
 - this . callBusCallback = callBusCallback ; 
 - this . peerCallback = new CallbackWrapper ( new PeerCallCallback ( ) { 
 - @ Override 
 - public void onOffer ( long deviceId , String sdp ) { 
 - sendSignal ( deviceId , new ApiOffer ( 0 , sdp , CallBusActor . this . selfSettings . toApi ( ) ) ) ; 
 - } 
 - 
 - @ Override 
 - public void onAnswer ( long deviceId , String sdp ) { 
 - sendSignal ( deviceId , new ApiAnswer ( 0 , sdp ) ) ; 
 - } 
 - 
 - @ Override 
 - public void onCandidate ( long deviceId , int mdpIndex , String id , String sdp ) { 
 - sendSignal ( deviceId , new ApiCandidate ( 0 , mdpIndex , id , sdp ) ) ; 
 - } 
 - 
 - @ Override 
 - public void onPeerStateChanged ( long deviceId , PeerState state ) { 
 - callBusCallback . onPeerStateChanged ( deviceIds . get ( deviceId ) , deviceId , state ) ; 
 - } 
 - 
 - @ Override 
 - public void onStreamAdded ( long deviceId , WebRTCMediaStream stream ) { 
 - 
 - } 
 - 
 - @ Override 
 - public void onStreamRemoved ( long deviceId , WebRTCMediaStream stream ) { 
 - 
 - } 
 - } ) ; 
 - } 
 - 
 - 
 - @ Override 
 - public void preStart ( ) { 
 - super . preStart ( ) ; 
 - 
 - ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / peer " , new ActorCreator ( ) { 
 - @ Override 
 - public Actor create ( ) { 
 - return new PeerCallActor ( peerCallback , CallBusActor . this . selfSettings , context ( ) ) ; 
 - } 
 - } ) ; 
 - this . peerCall = new PeerCallInt ( ref ) ; 
 - 
 - callBusCallback . onBusCreated ( peerCall ) ; 
 - } 
 - 
 - @ Override 
 - public void onBusStarted ( ) { 
 - super . onBusStarted ( ) ; 
 - callBusCallback . onBusStarted ( getBusId ( ) ) ; 
 - } 
 - 
 - public void onAnswerCall ( ) { 
 - sendSignal ( masterUid , masterDeviceId , new ApiAnswerCall ( ) ) ; 
 - } 
 - 
 - public void onRejectCall ( ) { 
 - sendSignal ( masterUid , masterDeviceId , new ApiRejectCall ( ) ) ; 
 - } 
 - 
 - @ Override 
 - public final void onMessageReceived ( @ Nullable Integer senderId , @ Nullable Long senderDeviceId , byte [ ] data ) { 
 - if ( senderId = = null | | senderDeviceId = = null ) { 
 - return ; 
 - } 
 - deviceIds . put ( senderDeviceId , senderId ) ; 
 - 
 - ApiWebRTCSignaling signal ; 
 - try { 
 - signal = ApiWebRTCSignaling . fromBytes ( data ) ; 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - return ; 
 - } 
 - 
 - Log . d ( " CallBusActor " , " Message Received : " + signal ) ; 
 - 
 - if ( signal instanceof ApiAnswer ) { 
 - ApiAnswer answer = ( ApiAnswer ) signal ; 
 - peerCall . onAnswer ( senderDeviceId , answer . getSdp ( ) ) ; 
 - } else if ( signal instanceof ApiOffer ) { 
 - ApiOffer offer = ( ApiOffer ) signal ; 
 - peerCall . onAdvertised ( senderDeviceId , new PeerSettings ( offer . getOwnPeerSettings ( ) ) ) ; 
 - peerCall . onOffer ( senderDeviceId , offer . getSdp ( ) ) ; 
 - peerCall . onTheirStarted ( senderDeviceId ) ; 
 - } else if ( signal instanceof ApiCandidate ) { 
 - ApiCandidate candidate = ( ApiCandidate ) signal ; 
 - peerCall . onCandidate ( senderDeviceId , candidate . getIndex ( ) , candidate . getId ( ) , candidate . getSdp ( ) ) ; 
 - } else if ( signal instanceof ApiNeedOffer ) { 
 - ApiNeedOffer needOffer = ( ApiNeedOffer ) signal ; 
 - deviceIds . put ( needOffer . getDevice ( ) , needOffer . getUid ( ) ) ; 
 - peerCall . onAdvertised ( needOffer . getDevice ( ) , new PeerSettings ( needOffer . getPeerSettings ( ) ) ) ; 
 - peerCall . onOfferNeeded ( needOffer . getDevice ( ) ) ; 
 - peerCall . onTheirStarted ( needOffer . getDevice ( ) ) ; 
 - / / if ( needOffer . isSilent ( ) ! = null & & ! needOffer . isSilent ( ) ) { 
 - / / peerCall . onTheirStarted ( needOffer . getDevice ( ) ) ; 
 - / / } 
 - } else if ( signal instanceof ApiOnAnswer ) { 
 - ApiOnAnswer onAnswer = ( ApiOnAnswer ) signal ; 
 - deviceIds . put ( onAnswer . getDevice ( ) , onAnswer . getUid ( ) ) ; 
 - peerCall . onTheirStarted ( onAnswer . getDevice ( ) ) ; 
 - } else if ( signal instanceof ApiSwitchMaster ) { 
 - if ( isMasterReady ) { 
 - return ; 
 - } 
 - isMasterReady = true ; 
 - masterUid = senderId ; 
 - masterDeviceId = senderDeviceId ; 
 - unstashAll ( STASH ) ; 
 - sendSignal ( masterUid , masterDeviceId , new ApiAdvertiseSelf ( selfSettings . toApi ( ) ) ) ; 
 - } else { 
 - / / if ( callBusCallback instanceof CallBusCallbackSlave ) { 
 - / / CallBusCallbackSlave slaveCallback = ( CallBusCallbackSlave ) callBusCallback ; 
 - / / if ( signal instanceof ApiSwitchMaster ) { 
 - / / slaveCallback . onMasterSwitched ( senderId , senderDeviceId ) ; 
 - / / } else if ( signal instanceof ApiMembersChanged ) { 
 - / / ApiMembersChanged membersChanged = ( ApiMembersChanged ) signal ; 
 - / / slaveCallback . onMembersChanged ( membersChanged . getAllMembers ( ) ) ; 
 - / / } 
 - / / } else { 
 - / / / / Nothing ? 
 - / / } 
 - } 
 - } 
 - 
 - public final void sendSignal ( long deviceId , ApiWebRTCSignaling signal ) { 
 - sendSignal ( deviceIds . get ( deviceId ) , deviceId , signal ) ; 
 - } 
 - 
 - public final void sendSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { 
 - Log . d ( " CallBusActor " , " Message Sent : " + signal ) ; 
 - try { 
 - sendMessage ( uid , deviceId , signal . buildContainer ( ) ) ; 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void onReceive ( Object message ) { 
 - if ( message instanceof JoinBus ) { 
 - joinBus ( ( ( JoinBus ) message ) . getBusId ( ) ) ; 
 - } else if ( message instanceof CreateBus ) { 
 - createBus ( ) ; 
 - } else if ( message instanceof SendSignal ) { 
 - SendSignal signal = ( SendSignal ) message ; 
 - sendSignal ( signal . getUid ( ) , signal . getDeviceId ( ) , signal . getSignal ( ) ) ; 
 - } else if ( message instanceof AnswerCall ) { 
 - if ( ! isMasterReady ) { 
 - stash ( STASH ) ; 
 - return ; 
 - } 
 - onAnswerCall ( ) ; 
 - } else if ( message instanceof RejectCall ) { 
 - if ( ! isMasterReady ) { 
 - stash ( STASH ) ; 
 - return ; 
 - } 
 - onRejectCall ( ) ; 
 - } else { 
 - super . onReceive ( message ) ; 
 - } 
 - } 
 - 
 - public static class JoinBus { 
 - 
 - private String busId ; 
 - 
 - public JoinBus ( String busId ) { 
 - this . busId = busId ; 
 - } 
 - 
 - public String getBusId ( ) { 
 - return busId ; 
 - } 
 - } 
 - 
 - public static class CreateBus { 
 - 
 - } 
 - 
 - public static class SendSignal { 
 - 
 - private int uid ; 
 - private long deviceId ; 
 - private ApiWebRTCSignaling signal ; 
 - 
 - public SendSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { 
 - this . uid = uid ; 
 - this . deviceId = deviceId ; 
 - this . signal = signal ; 
 - } 
 - 
 - public int getUid ( ) { 
 - return uid ; 
 - } 
 - 
 - public long getDeviceId ( ) { 
 - return deviceId ; 
 - } 
 - 
 - public ApiWebRTCSignaling getSignal ( ) { 
 - return signal ; 
 - } 
 - } 
 - 
 - public static class AnswerCall { 
 - 
 - } 
 - 
 - public static class RejectCall { 
 - 
 - } 
 - 
 - public class CallbackWrapper implements PeerCallCallback { 
 - 
 - private final PeerCallCallback callCallback ; 
 - 
 - public CallbackWrapper ( PeerCallCallback callCallback ) { 
 - this . callCallback = callCallback ; 
 - } 
 - 
 - @ Override 
 - public void onOffer ( final long deviceId , final String sdp ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - callCallback . onOffer ( deviceId , sdp ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public void onAnswer ( final long deviceId , final String sdp ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - callCallback . onAnswer ( deviceId , sdp ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public void onCandidate ( final long deviceId , final int mdpIndex , final String id , final String sdp ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - callCallback . onCandidate ( deviceId , mdpIndex , id , sdp ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public void onPeerStateChanged ( final long deviceId , final PeerState state ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - callCallback . onPeerStateChanged ( deviceId , state ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public void onStreamAdded ( final long deviceId , final WebRTCMediaStream stream ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - callCallback . onStreamAdded ( deviceId , stream ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public void onStreamRemoved ( final long deviceId , final WebRTCMediaStream stream ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - callCallback . onStreamRemoved ( deviceId , stream ) ; 
 - } 
 - } ) ; 
 - } 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallback . java 
 deleted file mode 100644 
 index d523f9c . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallback . java 
 + + + / dev / null 
 @ @ - 1 , 18 + 0 , 0 @ @ 
 - package im . actor . core . modules . calls . bus ; 
 - 
 - import java . util . List ; 
 - 
 - import im . actor . core . api . ApiCallMember ; 
 - import im . actor . core . modules . calls . peers . PeerCallInt ; 
 - import im . actor . core . modules . calls . peers . PeerState ; 
 - 
 - public interface CallBusCallback { 
 - 
 - void onBusCreated ( PeerCallInt peerCallInt ) ; 
 - 
 - void onBusStarted ( String busId ) ; 
 - 
 - void onMembersChanged ( List < ApiCallMember > members ) ; 
 - 
 - void onPeerStateChanged ( int uid , long deviceId , PeerState state ) ; 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusInt . java 
 deleted file mode 100644 
 index 1b82c74 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusInt . java 
 + + + / dev / null 
 @ @ - 1 , 32 + 0 , 0 @ @ 
 - package im . actor . core . modules . calls . bus ; 
 - 
 - import im . actor . core . api . ApiWebRTCSignaling ; 
 - import im . actor . runtime . actors . ActorInterface ; 
 - import im . actor . runtime . actors . ActorRef ; 
 - 
 - public class CallBusInt extends ActorInterface { 
 - 
 - public CallBusInt ( ActorRef dest ) { 
 - super ( dest ) ; 
 - } 
 - 
 - public void joinBus ( String busId ) { 
 - send ( new CallBusActor . JoinBus ( busId ) ) ; 
 - } 
 - 
 - public void createBus ( ) { 
 - send ( new CallBusActor . CreateBus ( ) ) ; 
 - } 
 - 
 - public void sendSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { 
 - send ( new CallBusActor . SendSignal ( uid , deviceId , signal ) ) ; 
 - } 
 - 
 - public void answerCall ( ) { 
 - send ( new CallBusActor . AnswerCall ( ) ) ; 
 - } 
 - 
 - public void rejectCall ( ) { 
 - send ( new CallBusActor . RejectCall ( ) ) ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java 
 new file mode 100644 
 index 0000000 . . 7817cec 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java 
 @ @ - 0 , 0 + 1 , 138 @ @ 
 + package im . actor . core . modules . calls . peers ; 
 + 
 + import java . util . List ; 
 + 
 + import im . actor . core . api . ApiCallMember ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . calls . CallViewModels ; 
 + import im . actor . core . modules . eventbus . EventBusActor ; 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + 
 + public abstract class AbsCallActor extends EventBusActor implements CallBusCallback { 
 + 
 + protected final PeerSettings selfSettings ; 
 + protected final CallViewModels callViewModels ; 
 + protected final ActorRef callManager ; 
 + protected CallBusInt callBus ; 
 + protected PeerCallInt peerCall ; 
 + 
 + public AbsCallActor ( ModuleContext context ) { 
 + super ( context ) ; 
 + 
 + this . callManager = context . getCallsModule ( ) . getCallManager ( ) ; 
 + this . callViewModels = context ( ) . getCallsModule ( ) . getCallViewModels ( ) ; 
 + this . selfSettings = new PeerSettings ( ) ; 
 + this . selfSettings . setIsPreConnectionEnabled ( true ) ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + callBus = new CallBusInt ( system ( ) . actorOf ( getPath ( ) + " / bus " , new ActorCreator ( ) { 
 + @ Override 
 + public Actor create ( ) { 
 + return new CallBusActor ( new CallBusCallbackWrapper ( ) , selfSettings , context ( ) ) ; 
 + } 
 + } ) ) ; 
 + } 
 + 
 + @ Override 
 + public final void onBusCreated ( PeerCallInt peerCallInt ) { 
 + this . peerCall = peerCallInt ; 
 + callPreStart ( ) ; 
 + } 
 + 
 + public void callPreStart ( ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onBusStarted ( String busId ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onMembersChanged ( List < ApiCallMember > members ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onPeerStateChanged ( int uid , long deviceId , PeerState state ) { 
 + 
 + } 
 + 
 + public void onMuteChanged ( boolean isMuted ) { 
 + peerCall . onMuteChanged ( isMuted ) ; 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof MuteChanged ) { 
 + onMuteChanged ( ( ( MuteChanged ) message ) . isMuted ( ) ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 + public static class MuteChanged { 
 + 
 + private boolean isMuted ; 
 + 
 + public MuteChanged ( boolean isMuted ) { 
 + this . isMuted = isMuted ; 
 + } 
 + 
 + public boolean isMuted ( ) { 
 + return isMuted ; 
 + } 
 + } 
 + 
 + / / 
 + / / Wrapper 
 + / / 
 + 
 + private class CallBusCallbackWrapper implements CallBusCallback { 
 + 
 + @ Override 
 + public void onBusCreated ( final PeerCallInt peerCallInt ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + AbsCallActor . this . onBusCreated ( peerCallInt ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onBusStarted ( final String busId ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + AbsCallActor . this . onBusStarted ( busId ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onMembersChanged ( final List < ApiCallMember > members ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + AbsCallActor . this . onMembersChanged ( members ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onPeerStateChanged ( final int uid , final long deviceId , final PeerState state ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + AbsCallActor . this . onPeerStateChanged ( uid , deviceId , state ) ; 
 + } 
 + } ) ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java 
 new file mode 100644 
 index 0000000 . . 6ebd1c4 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java 
 @ @ - 0 , 0 + 1 , 335 @ @ 
 + package im . actor . core . modules . calls . peers ; 
 + 
 + import org . jetbrains . annotations . Nullable ; 
 + 
 + import java . io . IOException ; 
 + import java . util . HashMap ; 
 + 
 + import im . actor . core . api . ApiAdvertiseSelf ; 
 + import im . actor . core . api . ApiAnswer ; 
 + import im . actor . core . api . ApiAnswerCall ; 
 + import im . actor . core . api . ApiCandidate ; 
 + import im . actor . core . api . ApiMembersChanged ; 
 + import im . actor . core . api . ApiNeedOffer ; 
 + import im . actor . core . api . ApiOffer ; 
 + import im . actor . core . api . ApiOnAnswer ; 
 + import im . actor . core . api . ApiRejectCall ; 
 + import im . actor . core . api . ApiSwitchMaster ; 
 + import im . actor . core . api . ApiWebRTCSignaling ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . calls . peers . PeerCallActor ; 
 + import im . actor . core . modules . calls . peers . PeerCallCallback ; 
 + import im . actor . core . modules . calls . peers . PeerCallInt ; 
 + import im . actor . core . modules . calls . peers . PeerSettings ; 
 + import im . actor . core . modules . calls . peers . PeerState ; 
 + import im . actor . core . modules . eventbus . EventBusActor ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . webrtc . WebRTCMediaStream ; 
 + 
 + public class CallBusActor extends EventBusActor { 
 + 
 + private static final int STASH = 1 ; 
 + 
 + private HashMap < Long , Integer > deviceIds = new HashMap < > ( ) ; 
 + private final PeerSettings selfSettings ; 
 + private final PeerCallCallback peerCallback ; 
 + private final CallBusCallback callBusCallback ; 
 + private boolean isMasterReady ; 
 + private int masterUid ; 
 + private long masterDeviceId ; 
 + private PeerCallInt peerCall ; 
 + 
 + public CallBusActor ( final CallBusCallback callBusCallback , PeerSettings selfSettings , ModuleContext context ) { 
 + super ( context ) ; 
 + 
 + this . selfSettings = selfSettings ; 
 + this . callBusCallback = callBusCallback ; 
 + this . peerCallback = new CallbackWrapper ( new PeerCallCallback ( ) { 
 + @ Override 
 + public void onOffer ( long deviceId , String sdp ) { 
 + sendSignal ( deviceId , new ApiOffer ( 0 , sdp , CallBusActor . this . selfSettings . toApi ( ) ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onAnswer ( long deviceId , String sdp ) { 
 + sendSignal ( deviceId , new ApiAnswer ( 0 , sdp ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onCandidate ( long deviceId , int mdpIndex , String id , String sdp ) { 
 + sendSignal ( deviceId , new ApiCandidate ( 0 , mdpIndex , id , sdp ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onPeerStateChanged ( long deviceId , PeerState state ) { 
 + callBusCallback . onPeerStateChanged ( deviceIds . get ( deviceId ) , deviceId , state ) ; 
 + } 
 + 
 + @ Override 
 + public void onStreamAdded ( long deviceId , WebRTCMediaStream stream ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onStreamRemoved ( long deviceId , WebRTCMediaStream stream ) { 
 + 
 + } 
 + } ) ; 
 + } 
 + 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + 
 + ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / peer " , new ActorCreator ( ) { 
 + @ Override 
 + public Actor create ( ) { 
 + return new PeerCallActor ( peerCallback , CallBusActor . this . selfSettings , context ( ) ) ; 
 + } 
 + } ) ; 
 + this . peerCall = new PeerCallInt ( ref ) ; 
 + 
 + callBusCallback . onBusCreated ( peerCall ) ; 
 + } 
 + 
 + @ Override 
 + public void onBusStarted ( ) { 
 + super . onBusStarted ( ) ; 
 + callBusCallback . onBusStarted ( getBusId ( ) ) ; 
 + } 
 + 
 + public void onAnswerCall ( ) { 
 + sendSignal ( masterUid , masterDeviceId , new ApiAnswerCall ( ) ) ; 
 + } 
 + 
 + public void onRejectCall ( ) { 
 + sendSignal ( masterUid , masterDeviceId , new ApiRejectCall ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public final void onMessageReceived ( @ Nullable Integer senderId , @ Nullable Long senderDeviceId , byte [ ] data ) { 
 + if ( senderId = = null | | senderDeviceId = = null ) { 
 + return ; 
 + } 
 + deviceIds . put ( senderDeviceId , senderId ) ; 
 + 
 + ApiWebRTCSignaling signal ; 
 + try { 
 + signal = ApiWebRTCSignaling . fromBytes ( data ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + return ; 
 + } 
 + 
 + Log . d ( " CallBusActor " , " Message Received : " + signal ) ; 
 + 
 + if ( signal instanceof ApiAnswer ) { 
 + ApiAnswer answer = ( ApiAnswer ) signal ; 
 + peerCall . onAnswer ( senderDeviceId , answer . getSdp ( ) ) ; 
 + } else if ( signal instanceof ApiOffer ) { 
 + ApiOffer offer = ( ApiOffer ) signal ; 
 + peerCall . onAdvertised ( senderDeviceId , new PeerSettings ( offer . getOwnPeerSettings ( ) ) ) ; 
 + peerCall . onOffer ( senderDeviceId , offer . getSdp ( ) ) ; 
 + peerCall . onTheirStarted ( senderDeviceId ) ; 
 + } else if ( signal instanceof ApiCandidate ) { 
 + ApiCandidate candidate = ( ApiCandidate ) signal ; 
 + peerCall . onCandidate ( senderDeviceId , candidate . getIndex ( ) , candidate . getId ( ) , candidate . getSdp ( ) ) ; 
 + } else if ( signal instanceof ApiNeedOffer ) { 
 + ApiNeedOffer needOffer = ( ApiNeedOffer ) signal ; 
 + deviceIds . put ( needOffer . getDevice ( ) , needOffer . getUid ( ) ) ; 
 + peerCall . onAdvertised ( needOffer . getDevice ( ) , new PeerSettings ( needOffer . getPeerSettings ( ) ) ) ; 
 + peerCall . onOfferNeeded ( needOffer . getDevice ( ) ) ; 
 + peerCall . onTheirStarted ( needOffer . getDevice ( ) ) ; 
 + / / if ( needOffer . isSilent ( ) ! = null & & ! needOffer . isSilent ( ) ) { 
 + / / peerCall . onTheirStarted ( needOffer . getDevice ( ) ) ; 
 + / / } 
 + } else if ( signal instanceof ApiOnAnswer ) { 
 + ApiOnAnswer onAnswer = ( ApiOnAnswer ) signal ; 
 + deviceIds . put ( onAnswer . getDevice ( ) , onAnswer . getUid ( ) ) ; 
 + peerCall . onTheirStarted ( onAnswer . getDevice ( ) ) ; 
 + } else if ( signal instanceof ApiSwitchMaster ) { 
 + if ( isMasterReady ) { 
 + return ; 
 + } 
 + isMasterReady = true ; 
 + masterUid = senderId ; 
 + masterDeviceId = senderDeviceId ; 
 + unstashAll ( STASH ) ; 
 + sendSignal ( masterUid , masterDeviceId , new ApiAdvertiseSelf ( selfSettings . toApi ( ) ) ) ; 
 + } else { 
 + / / if ( callBusCallback instanceof CallBusCallbackSlave ) { 
 + / / CallBusCallbackSlave slaveCallback = ( CallBusCallbackSlave ) callBusCallback ; 
 + / / if ( signal instanceof ApiSwitchMaster ) { 
 + / / slaveCallback . onMasterSwitched ( senderId , senderDeviceId ) ; 
 + / / } else if ( signal instanceof ApiMembersChanged ) { 
 + / / ApiMembersChanged membersChanged = ( ApiMembersChanged ) signal ; 
 + / / slaveCallback . onMembersChanged ( membersChanged . getAllMembers ( ) ) ; 
 + / / } 
 + / / } else { 
 + / / / / Nothing ? 
 + / / } 
 + } 
 + } 
 + 
 + public final void sendSignal ( long deviceId , ApiWebRTCSignaling signal ) { 
 + sendSignal ( deviceIds . get ( deviceId ) , deviceId , signal ) ; 
 + } 
 + 
 + public final void sendSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { 
 + Log . d ( " CallBusActor " , " Message Sent : " + signal ) ; 
 + try { 
 + sendMessage ( uid , deviceId , signal . buildContainer ( ) ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof JoinBus ) { 
 + joinBus ( ( ( JoinBus ) message ) . getBusId ( ) ) ; 
 + } else if ( message instanceof CreateBus ) { 
 + createBus ( ) ; 
 + } else if ( message instanceof SendSignal ) { 
 + SendSignal signal = ( SendSignal ) message ; 
 + sendSignal ( signal . getUid ( ) , signal . getDeviceId ( ) , signal . getSignal ( ) ) ; 
 + } else if ( message instanceof AnswerCall ) { 
 + if ( ! isMasterReady ) { 
 + stash ( STASH ) ; 
 + return ; 
 + } 
 + onAnswerCall ( ) ; 
 + } else if ( message instanceof RejectCall ) { 
 + if ( ! isMasterReady ) { 
 + stash ( STASH ) ; 
 + return ; 
 + } 
 + onRejectCall ( ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 + public static class JoinBus { 
 + 
 + private String busId ; 
 + 
 + public JoinBus ( String busId ) { 
 + this . busId = busId ; 
 + } 
 + 
 + public String getBusId ( ) { 
 + return busId ; 
 + } 
 + } 
 + 
 + public static class CreateBus { 
 + 
 + } 
 + 
 + public static class SendSignal { 
 + 
 + private int uid ; 
 + private long deviceId ; 
 + private ApiWebRTCSignaling signal ; 
 + 
 + public SendSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { 
 + this . uid = uid ; 
 + this . deviceId = deviceId ; 
 + this . signal = signal ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + 
 + public long getDeviceId ( ) { 
 + return deviceId ; 
 + } 
 + 
 + public ApiWebRTCSignaling getSignal ( ) { 
 + return signal ; 
 + } 
 + } 
 + 
 + public static class AnswerCall { 
 + 
 + } 
 + 
 + public static class RejectCall { 
 + 
 + } 
 + 
 + public class CallbackWrapper implements PeerCallCallback { 
 + 
 + private final PeerCallCallback callCallback ; 
 + 
 + public CallbackWrapper ( PeerCallCallback callCallback ) { 
 + this . callCallback = callCallback ; 
 + } 
 + 
 + @ Override 
 + public void onOffer ( final long deviceId , final String sdp ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callCallback . onOffer ( deviceId , sdp ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onAnswer ( final long deviceId , final String sdp ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callCallback . onAnswer ( deviceId , sdp ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onCandidate ( final long deviceId , final int mdpIndex , final String id , final String sdp ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callCallback . onCandidate ( deviceId , mdpIndex , id , sdp ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onPeerStateChanged ( final long deviceId , final PeerState state ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callCallback . onPeerStateChanged ( deviceId , state ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onStreamAdded ( final long deviceId , final WebRTCMediaStream stream ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callCallback . onStreamAdded ( deviceId , stream ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onStreamRemoved ( final long deviceId , final WebRTCMediaStream stream ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callCallback . onStreamRemoved ( deviceId , stream ) ; 
 + } 
 + } ) ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java 
 new file mode 100644 
 index 0000000 . . 8d21384 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package im . actor . core . modules . calls . peers ; 
 + 
 + import java . util . List ; 
 + 
 + import im . actor . core . api . ApiCallMember ; 
 + import im . actor . core . modules . calls . peers . PeerCallInt ; 
 + import im . actor . core . modules . calls . peers . PeerState ; 
 + 
 + public interface CallBusCallback { 
 + 
 + void onBusCreated ( PeerCallInt peerCallInt ) ; 
 + 
 + void onBusStarted ( String busId ) ; 
 + 
 + void onMembersChanged ( List < ApiCallMember > members ) ; 
 + 
 + void onPeerStateChanged ( int uid , long deviceId , PeerState state ) ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusInt . java 
 new file mode 100644 
 index 0000000 . . 71314b3 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusInt . java 
 @ @ - 0 , 0 + 1 , 32 @ @ 
 + package im . actor . core . modules . calls . peers ; 
 + 
 + import im . actor . core . api . ApiWebRTCSignaling ; 
 + import im . actor . runtime . actors . ActorInterface ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + 
 + public class CallBusInt extends ActorInterface { 
 + 
 + public CallBusInt ( ActorRef dest ) { 
 + super ( dest ) ; 
 + } 
 + 
 + public void joinBus ( String busId ) { 
 + send ( new CallBusActor . JoinBus ( busId ) ) ; 
 + } 
 + 
 + public void createBus ( ) { 
 + send ( new CallBusActor . CreateBus ( ) ) ; 
 + } 
 + 
 + public void sendSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { 
 + send ( new CallBusActor . SendSignal ( uid , deviceId , signal ) ) ; 
 + } 
 + 
 + public void answerCall ( ) { 
 + send ( new CallBusActor . AnswerCall ( ) ) ; 
 + } 
 + 
 + public void rejectCall ( ) { 
 + send ( new CallBusActor . RejectCall ( ) ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallInt . java 
 index 6196aa9 . . 92546ee 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallInt . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallInt . java 
 @ @ - 50 , 4 + 50 , 8 @ @ public class PeerCallInt extends ActorInterface { 
 public void disposePeer ( long deviceId ) { 
 send ( new RTCDispose ( deviceId ) ) ; 
 } 
 - } 
 + 
 + public void onMuteChanged ( boolean isMuted ) { 
 + send ( new PeerCallActor . MuteChanged ( isMuted ) ) ; 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java 
 index b3180fd . . ed05fe8 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / AbsCallActor . java 
 @ @ - 1 , 64 + 1 , 101 @ @ 
 package im . actor . core . modules . calls ; 
 
 - import java . util . ArrayList ; 
 - import java . util . HashMap ; 
 + import java . util . List ; 
 
 - import im . actor . core . entity . Group ; 
 - import im . actor . core . entity . GroupMember ; 
 - import im . actor . core . entity . Peer ; 
 - import im . actor . core . entity . PeerType ; 
 + import im . actor . core . api . ApiCallMember ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . calls . bus . CallBusActor ; 
 + import im . actor . core . modules . calls . bus . CallBusCallback ; 
 + import im . actor . core . modules . calls . bus . CallBusInt ; 
 + import im . actor . core . modules . calls . peers . PeerCallInt ; 
 + import im . actor . core . modules . calls . peers . PeerSettings ; 
 import im . actor . core . modules . eventbus . EventBusActor ; 
 - import im . actor . core . viewmodel . CallMember ; 
 - import im . actor . core . viewmodel . CallMemberState ; 
 - import im . actor . core . viewmodel . CallState ; 
 - import im . actor . core . viewmodel . CallVM ; 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 
 - public class AbsCallActor extends EventBusActor { 
 + public abstract class AbsCallActor extends EventBusActor implements CallBusCallback { 
 
 - private final HashMap < Long , CallVM > callModels ; 
 - private CallVM callVM ; 
 + protected final PeerSettings selfSettings ; 
 + protected final CallViewModels callViewModels ; 
 + protected final ActorRef callManager ; 
 + protected CallBusInt callBus ; 
 + protected PeerCallInt peerCall ; 
 
 public AbsCallActor ( ModuleContext context ) { 
 super ( context ) ; 
 
 - callModels = context ( ) . getCallsModule ( ) . getCallModels ( ) ; 
 + this . callManager = context . getCallsModule ( ) . getCallManager ( ) ; 
 + this . callViewModels = context ( ) . getCallsModule ( ) . getCallViewModels ( ) ; 
 + this . selfSettings = new PeerSettings ( ) ; 
 + this . selfSettings . setIsPreConnectionEnabled ( true ) ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + callBus = new CallBusInt ( system ( ) . actorOf ( getPath ( ) + " / bus " , new ActorCreator ( ) { 
 + @ Override 
 + public Actor create ( ) { 
 + return new CallBusActor ( new CallBusCallbackWrapper ( ) , selfSettings , context ( ) ) ; 
 + } 
 + } ) ) ; 
 + } 
 + 
 + @ Override 
 + public final void onBusCreated ( PeerCallInt peerCallInt ) { 
 + this . peerCall = peerCallInt ; 
 + callPreStart ( ) ; 
 + } 
 + 
 + public void callPreStart ( ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onBusStarted ( String busId ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onMembersChanged ( List < ApiCallMember > members ) { 
 + 
 } 
 
 / / 
 - / / Call Model helpers 
 + / / Wrapper 
 / / 
 - public CallVM spawnNewVM ( long callId , Peer peer , boolean isOutgoing , ArrayList < CallMember > members , CallState callState ) { 
 - CallVM callVM = new CallVM ( callId , peer , isOutgoing , members , callState ) ; 
 - / / callVM . getIsMuted ( ) . change ( isMuted ( ) ) ; 
 - synchronized ( callModels ) { 
 - callModels . put ( callId , callVM ) ; 
 + 
 + private class CallBusCallbackWrapper implements CallBusCallback { 
 + 
 + @ Override 
 + public void onBusCreated ( final PeerCallInt peerCallInt ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + AbsCallActor . this . onBusCreated ( peerCallInt ) ; 
 + } 
 + } ) ; 
 } 
 - this . callVM = callVM ; 
 - return callVM ; 
 - } 
 
 - public CallVM spanNewOutgoingVM ( long callId , Peer peer ) { 
 - ArrayList < CallMember > members = new ArrayList < > ( ) ; 
 - if ( peer . getPeerType ( ) = = PeerType . PRIVATE | | 
 - peer . getPeerType ( ) = = PeerType . PRIVATE _ ENCRYPTED ) { 
 - members . add ( new CallMember ( peer . getPeerId ( ) , CallMemberState . RINGING ) ) ; 
 - } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 - Group g = getGroup ( peer . getPeerId ( ) ) ; 
 - for ( GroupMember gm : g . getMembers ( ) ) { 
 - if ( gm . getUid ( ) ! = myUid ( ) ) { 
 - members . add ( new CallMember ( gm . getUid ( ) , CallMemberState . RINGING ) ) ; 
 + @ Override 
 + public void onBusStarted ( final String busId ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + AbsCallActor . this . onBusStarted ( busId ) ; 
 } 
 - } 
 + } ) ; 
 } 
 - return spawnNewVM ( callId , peer , true , members , CallState . RINGING ) ; 
 - } 
 
 - / / @ Override 
 - / / public void onMute ( boolean isMuted ) { 
 - / / super . onMute ( isMuted ) ; 
 - / / if ( callVM ! = null ) { 
 - / / callVM . getIsMuted ( ) . change ( isMuted ) ; 
 - / / } 
 - / / } 
 + @ Override 
 + public void onMembersChanged ( final List < ApiCallMember > members ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + AbsCallActor . this . onMembersChanged ( members ) ; 
 + } 
 + } ) ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index e8f614d . . e3ac82b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . core . modules . calls ; 
 
 + import java . util . ArrayList ; 
 import java . util . List ; 
 
 import im . actor . core . api . ApiAdvertiseSelf ; 
 @ @ - 9 , 125 + 10 , 92 @ @ import im . actor . core . api . rpc . RequestGetCallInfo ; 
 import im . actor . core . api . rpc . ResponseGetCallInfo ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . modules . ModuleContext ; 
 - import im . actor . core . modules . calls . bus . CallBusActor ; 
 - import im . actor . core . modules . calls . bus . CallBusCallbackSlave ; 
 - import im . actor . core . modules . calls . bus . CallBusInt ; 
 - import im . actor . core . modules . calls . peers . PeerCallInt ; 
 - import im . actor . core . modules . calls . peers . PeerSettings ; 
 - import im . actor . core . util . ModuleActor ; 
 + import im . actor . core . viewmodel . CallMember ; 
 + import im . actor . core . viewmodel . CallState ; 
 import im . actor . core . viewmodel . CallVM ; 
 - import im . actor . runtime . Log ; 
 - import im . actor . runtime . actors . Actor ; 
 - import im . actor . runtime . actors . ActorCreator ; 
 - import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . actors . messages . PoisonPill ; 
 import im . actor . runtime . function . Consumer ; 
 
 import static im . actor . core . modules . internal . messages . entity . EntityConverter . convert ; 
 
 - public class CallActor extends ModuleActor implements CallBusCallbackSlave { 
 + public class CallActor extends AbsCallActor { 
 
 private static final String TAG = " CallActor " ; 
 
 - private CallBusInt callBusInt ; 
 - private PeerCallInt peerCallInt ; 
 - private final ActorRef callManager ; 
 private final long callId ; 
 - private final PeerSettings selfSettings ; 
 
 private Peer peer ; 
 private CallVM callVM ; 
 
 - private boolean isMasterReady ; 
 - private int masterUid ; 
 - private long masterDeviceId ; 
 - 
 private boolean isConnected ; 
 private boolean isAnswered ; 
 private boolean isRejected ; 
 
 public CallActor ( long callId , ModuleContext context ) { 
 super ( context ) ; 
 - 
 this . callId = callId ; 
 - this . callManager = context . getCallsModule ( ) . getCallManager ( ) ; 
 this . isAnswered = false ; 
 this . isConnected = false ; 
 - this . selfSettings = new PeerSettings ( ) ; 
 - this . selfSettings . setIsPreConnectionEnabled ( true ) ; 
 - } 
 - 
 - @ Override 
 - public void preStart ( ) { 
 - super . preStart ( ) ; 
 - 
 - 
 - callBusInt = new CallBusInt ( system ( ) . actorOf ( getPath ( ) + " / bus " , new ActorCreator ( ) { 
 - @ Override 
 - public Actor create ( ) { 
 - return new CallBusActor ( new CallbackWrapper ( ) , selfSettings , context ( ) ) ; 
 - } 
 - } ) ) ; 
 } 
 
 @ Override 
 - public void onBusCreated ( PeerCallInt peerCallInt ) { 
 - this . peerCallInt = peerCallInt ; 
 - 
 + public void callPreStart ( ) { 
 api ( new RequestGetCallInfo ( callId ) ) . then ( new Consumer < ResponseGetCallInfo > ( ) { 
 @ Override 
 public void apply ( final ResponseGetCallInfo responseGetCallInfo ) { 
 peer = convert ( responseGetCallInfo . getPeer ( ) ) ; 
 - callBusInt . joinBus ( responseGetCallInfo . getEventBusId ( ) ) ; 
 + callBus . joinBus ( responseGetCallInfo . getEventBusId ( ) ) ; 
 + callVM = callViewModels . spawnNewIncomingVM ( callId , peer , CallState . RINGING ) ; 
 } 
 } ) . failure ( new Consumer < Exception > ( ) { 
 @ Override 
 public void apply ( Exception e ) { 
 - 
 + self ( ) . send ( PoisonPill . INSTANCE ) ; 
 } 
 } ) . done ( self ( ) ) ; 
 } 
 
 @ Override 
 public void onBusStarted ( String busId ) { 
 + super . onBusStarted ( busId ) ; 
 
 + callManager . send ( new CallManagerActor . OnIncomingCall ( callId ) ) ; 
 } 
 
 @ Override 
 - public void onMasterSwitched ( int uid , long deviceId ) { 
 - if ( isMasterReady ) { 
 - return ; 
 - } 
 - 
 - Log . d ( TAG , " onMasterSwitched " ) ; 
 - 
 - isMasterReady = true ; 
 - masterUid = uid ; 
 - masterDeviceId = deviceId ; 
 - callBusInt . sendSignal ( masterUid , masterDeviceId , new ApiAdvertiseSelf ( selfSettings . toApi ( ) ) ) ; 
 - unstashAll ( ) ; 
 - 
 - schedule ( new AnswerCall ( ) , 1000 ) ; 
 + public void onMembersChanged ( List < ApiCallMember > members ) { 
 + / / 
 + / / Handle Members Update 
 + / / 
 } 
 
 - @ Override 
 - public void onMembersChanged ( List < ApiCallMember > members ) { 
 - Log . d ( TAG , " onMembersChanged " ) ; 
 + public void onAnswerCall ( ) { 
 + if ( ! isAnswered & & ! isRejected ) { 
 + isAnswered = true ; 
 + callBus . answerCall ( ) ; 
 + peerCall . onOwnStarted ( ) ; 
 
 + } 
 } 
 
 - public void onAnswerCall ( ) { 
 - callBusInt . sendSignal ( masterUid , masterDeviceId , new ApiAnswerCall ( ) ) ; 
 - peerCallInt . onOwnStarted ( ) ; 
 + public void onRejectCall ( ) { 
 + if ( ! isAnswered & & ! isRejected ) { 
 + isRejected = true ; 
 + callBus . rejectCall ( ) ; 
 + peerCall . kill ( ) ; 
 + } 
 } 
 
 + / / 
 + / / Messages 
 + / / 
 + 
 @ Override 
 public void onReceive ( Object message ) { 
 if ( message instanceof AnswerCall ) { 
 - if ( ! isMasterReady ) { 
 - stash ( ) ; 
 - return ; 
 - } 
 onAnswerCall ( ) ; 
 + } else if ( message instanceof RejectCall ) { 
 + onRejectCall ( ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 @ @ - 137 , 64 + 105 , 7 @ @ public class CallActor extends ModuleActor implements CallBusCallbackSlave { 
 
 } 
 
 - public class CallbackWrapper implements CallBusCallbackSlave { 
 + public static class RejectCall { 
 
 - @ Override 
 - public void onMasterSwitched ( final int uid , final long deviceId ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - CallActor . this . onMasterSwitched ( uid , deviceId ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public void onMembersChanged ( final List < ApiCallMember > members ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - CallActor . this . onMembersChanged ( members ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public void onBusCreated ( final PeerCallInt peerCallInt ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - CallActor . this . onBusCreated ( peerCallInt ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public void onBusStarted ( final String busId ) { 
 - self ( ) . send ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - CallActor . this . onBusStarted ( busId ) ; 
 - } 
 - } ) ; 
 - } 
 } 
 - 
 - / / @ Override 
 - / / public void onSignalingStarted ( ) { 
 - / / 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public void onSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { 
 - / / if ( signal instanceof ApiSwitchMaster ) { 
 - / / 
 - / / } 
 - / / Log . d ( TAG , " onSignal : " + signal ) ; 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public void onSignalingStopped ( ) { 
 - / / 
 - / / } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallViewModels . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallViewModels . java 
 new file mode 100644 
 index 0000000 . . 3dd3942 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallViewModels . java 
 @ @ - 0 , 0 + 1 , 61 @ @ 
 + package im . actor . core . modules . calls ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + 
 + import im . actor . core . entity . Group ; 
 + import im . actor . core . entity . GroupMember ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerType ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . viewmodel . CallMember ; 
 + import im . actor . core . viewmodel . CallMemberState ; 
 + import im . actor . core . viewmodel . CallState ; 
 + import im . actor . core . viewmodel . CallVM ; 
 + 
 + public class CallViewModels { 
 + 
 + private final HashMap < Long , CallVM > callModels ; 
 + private final ModuleContext context ; 
 + 
 + public CallViewModels ( ModuleContext context ) { 
 + this . context = context ; 
 + this . callModels = new HashMap < > ( ) ; 
 + } 
 + 
 + public synchronized CallVM getCall ( long id ) { 
 + return callModels . get ( id ) ; 
 + } 
 + 
 + public synchronized CallVM spawnNewVM ( long callId , Peer peer , boolean isOutgoing , ArrayList < CallMember > members , CallState callState ) { 
 + CallVM callVM = new CallVM ( callId , peer , isOutgoing , members , callState ) ; 
 + synchronized ( callModels ) { 
 + callModels . put ( callId , callVM ) ; 
 + } 
 + return callVM ; 
 + } 
 + 
 + public synchronized CallVM spawnNewIncomingVM ( long callId , Peer peer , CallState callState ) { 
 + CallVM callVM = new CallVM ( callId , peer , false , new ArrayList < CallMember > ( ) , callState ) ; 
 + synchronized ( callModels ) { 
 + callModels . put ( callId , callVM ) ; 
 + } 
 + return callVM ; 
 + } 
 + 
 + public synchronized CallVM spawnNewOutgoingVM ( long callId , Peer peer ) { 
 + ArrayList < CallMember > members = new ArrayList < > ( ) ; 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE | | 
 + peer . getPeerType ( ) = = PeerType . PRIVATE _ ENCRYPTED ) { 
 + members . add ( new CallMember ( peer . getPeerId ( ) , CallMemberState . RINGING ) ) ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group g = context . getGroupsModule ( ) . getGroups ( ) . getValue ( peer . getPeerId ( ) ) ; 
 + for ( GroupMember gm : g . getMembers ( ) ) { 
 + if ( gm . getUid ( ) ! = context . getAuthModule ( ) . myUid ( ) ) { 
 + members . add ( new CallMember ( gm . getUid ( ) , CallMemberState . RINGING ) ) ; 
 + } 
 + } 
 + } 
 + return spawnNewVM ( callId , peer , true , members , CallState . RINGING ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 index a6664fc . . acdbf99 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 @ @ - 19 , 28 + 19 , 28 @ @ public class CallsModule extends AbsModule { 
 
 private CallsProvider provider ; 
 private ActorRef callManager ; 
 - private HashMap < Long , CallVM > callModels = new HashMap < > ( ) ; 
 + private CallViewModels callViewModels ; 
 
 public CallsModule ( ModuleContext context ) { 
 super ( context ) ; 
 
 provider = context ( ) . getConfiguration ( ) . getCallsProvider ( ) ; 
 + callViewModels = new CallViewModels ( context ( ) ) ; 
 } 
 
 public void run ( ) { 
 if ( provider = = null ) { 
 return ; 
 } 
 - 
 callManager = system ( ) . actorOf ( " calls / manager " , CallManagerActor . CONSTRUCTOR ( context ( ) ) ) ; 
 } 
 
 - public HashMap < Long , CallVM > getCallModels ( ) { 
 - return callModels ; 
 + public CallViewModels getCallViewModels ( ) { 
 + return callViewModels ; 
 } 
 
 public CallVM getCall ( long id ) { 
 - return callModels . get ( id ) ; 
 + return callViewModels . getCall ( id ) ; 
 } 
 
 public ActorRef getCallManager ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusActor . java 
 index 6286caf . . 868ea55 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusActor . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import org . jetbrains . annotations . Nullable ; 
 import java . io . IOException ; 
 import java . util . HashMap ; 
 
 + import im . actor . core . api . ApiAdvertiseSelf ; 
 import im . actor . core . api . ApiAnswer ; 
 import im . actor . core . api . ApiCandidate ; 
 import im . actor . core . api . ApiMembersChanged ; 
 @ @ - 27 , 10 + 28 , 15 @ @ import im . actor . runtime . webrtc . WebRTCMediaStream ; 
 
 public class CallBusActor extends EventBusActor { 
 
 + private static final int STASH = 1 ; 
 + 
 private HashMap < Long , Integer > deviceIds = new HashMap < > ( ) ; 
 private final PeerSettings selfSettings ; 
 private final PeerCallCallback peerCallback ; 
 private final CallBusCallback callBusCallback ; 
 + private boolean isMasterReady ; 
 + private int masterUid ; 
 + private long masterDeviceId ; 
 private PeerCallInt peerCall ; 
 
 public CallBusActor ( CallBusCallback callBusCallback , PeerSettings selfSettings , ModuleContext context ) { 
 @ @ - 55 , 6 + 61 , 11 @ @ public class CallBusActor extends EventBusActor { 
 } 
 
 @ Override 
 + public void onHandshakeSuccessful ( long deviceId ) { 
 + 
 + } 
 + 
 + @ Override 
 public void onConnectionStarted ( long deviceId ) { 
 
 } 
 @ @ - 98 , 6 + 109 , 10 @ @ public class CallBusActor extends EventBusActor { 
 callBusCallback . onBusStarted ( getBusId ( ) ) ; 
 } 
 
 + public void onAnswerCall ( ) { 
 + 
 + } 
 + 
 @ Override 
 public final void onMessageReceived ( @ Nullable Integer senderId , @ Nullable Long senderDeviceId , byte [ ] data ) { 
 if ( senderId = = null | | senderDeviceId = = null ) { 
 @ @ - 139 , 18 + 154 , 27 @ @ public class CallBusActor extends EventBusActor { 
 ApiOnAnswer onAnswer = ( ApiOnAnswer ) signal ; 
 deviceIds . put ( onAnswer . getDevice ( ) , onAnswer . getUid ( ) ) ; 
 peerCall . onTheirStarted ( onAnswer . getDevice ( ) ) ; 
 - } else { 
 - if ( callBusCallback instanceof CallBusCallbackSlave ) { 
 - CallBusCallbackSlave slaveCallback = ( CallBusCallbackSlave ) callBusCallback ; 
 - if ( signal instanceof ApiSwitchMaster ) { 
 - slaveCallback . onMasterSwitched ( senderId , senderDeviceId ) ; 
 - } else if ( signal instanceof ApiMembersChanged ) { 
 - ApiMembersChanged membersChanged = ( ApiMembersChanged ) signal ; 
 - slaveCallback . onMembersChanged ( membersChanged . getAllMembers ( ) ) ; 
 - } 
 - } else { 
 - / / Nothing ? 
 + } else if ( signal instanceof ApiSwitchMaster ) { 
 + if ( isMasterReady ) { 
 + return ; 
 } 
 + isMasterReady = true ; 
 + masterUid = senderId ; 
 + masterDeviceId = senderDeviceId ; 
 + unstashAll ( STASH ) ; 
 + sendSignal ( masterUid , masterDeviceId , new ApiAdvertiseSelf ( selfSettings . toApi ( ) ) ) ; 
 + } else { 
 + / / if ( callBusCallback instanceof CallBusCallbackSlave ) { 
 + / / CallBusCallbackSlave slaveCallback = ( CallBusCallbackSlave ) callBusCallback ; 
 + / / if ( signal instanceof ApiSwitchMaster ) { 
 + / / slaveCallback . onMasterSwitched ( senderId , senderDeviceId ) ; 
 + / / } else if ( signal instanceof ApiMembersChanged ) { 
 + / / ApiMembersChanged membersChanged = ( ApiMembersChanged ) signal ; 
 + / / slaveCallback . onMembersChanged ( membersChanged . getAllMembers ( ) ) ; 
 + / / } 
 + / / } else { 
 + / / / / Nothing ? 
 + / / } 
 } 
 } 
 
 @ @ - 177 , 6 + 201 , 11 @ @ public class CallBusActor extends EventBusActor { 
 } else if ( message instanceof SendSignal ) { 
 SendSignal signal = ( SendSignal ) message ; 
 sendSignal ( signal . getUid ( ) , signal . getDeviceId ( ) , signal . getSignal ( ) ) ; 
 + } else if ( message instanceof AnswerCall ) { 
 + if ( ! isMasterReady ) { 
 + stash ( STASH ) ; 
 + } 
 + onAnswerCall ( ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 @ @ - 224 , 6 + 253 , 14 @ @ public class CallBusActor extends EventBusActor { 
 } 
 } 
 
 + public static class AnswerCall { 
 + 
 + } 
 + 
 + public static class RejectCall { 
 + 
 + } 
 + 
 public class CallbackWrapper implements PeerCallCallback { 
 
 private final PeerCallCallback callCallback ; 
 @ @ - 263 , 6 + 300 , 16 @ @ public class CallBusActor extends EventBusActor { 
 } 
 
 @ Override 
 + public void onHandshakeSuccessful ( final long deviceId ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callCallback . onHandshakeSuccessful ( deviceId ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 public void onConnectionStarted ( final long deviceId ) { 
 self ( ) . send ( new Runnable ( ) { 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallback . java 
 index d830a7a . . 258f807 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallback . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallback . java 
 @ @ - 1 , 9 + 1 , 15 @ @ 
 package im . actor . core . modules . calls . bus ; 
 
 + import java . util . List ; 
 + 
 + import im . actor . core . api . ApiCallMember ; 
 import im . actor . core . modules . calls . peers . PeerCallInt ; 
 
 public interface CallBusCallback { 
 + 
 void onBusCreated ( PeerCallInt peerCallInt ) ; 
 
 void onBusStarted ( String busId ) ; 
 + 
 + void onMembersChanged ( List < ApiCallMember > members ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallbackSlave . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallbackSlave . java 
 deleted file mode 100644 
 index 9bdc718 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusCallbackSlave . java 
 + + + / dev / null 
 @ @ - 1 , 11 + 0 , 0 @ @ 
 - package im . actor . core . modules . calls . bus ; 
 - 
 - import java . util . List ; 
 - 
 - import im . actor . core . api . ApiCallMember ; 
 - 
 - public interface CallBusCallbackSlave extends CallBusCallback { 
 - void onMasterSwitched ( int uid , long deviceId ) ; 
 - 
 - void onMembersChanged ( List < ApiCallMember > members ) ; 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusInt . java 
 index 2a8b486 . . 1b82c74 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusInt . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / bus / CallBusInt . java 
 @ @ - 21 , 4 + 21 , 12 @ @ public class CallBusInt extends ActorInterface { 
 public void sendSignal ( int uid , long deviceId , ApiWebRTCSignaling signal ) { 
 send ( new CallBusActor . SendSignal ( uid , deviceId , signal ) ) ; 
 } 
 + 
 + public void answerCall ( ) { 
 + send ( new CallBusActor . AnswerCall ( ) ) ; 
 + } 
 + 
 + public void rejectCall ( ) { 
 + send ( new CallBusActor . RejectCall ( ) ) ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 index b84b9f0 . . 54cc145 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 @ @ - 192 , 6 + 192 , 11 @ @ public class PeerCallActor extends ModuleActor { 
 } 
 
 @ Override 
 + public void onHandshakeSuccessful ( long deviceId ) { 
 + callback . onHandshakeSuccessful ( deviceId ) ; 
 + } 
 + 
 + @ Override 
 public void onConnectionStarted ( long deviceId ) { 
 callback . onConnectionStarted ( deviceId ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallCallback . java 
 index 5740f32 . . bf25d3a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallCallback . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallCallback . java 
 @ @ - 10 , 6 + 10 , 8 @ @ public interface PeerCallCallback { 
 
 void onCandidate ( long deviceId , int mdpIndex , String id , String sdp ) ; 
 
 + void onHandshakeSuccessful ( long deviceId ) ; 
 + 
 void onConnectionStarted ( long deviceId ) ; 
 
 void onConnectionEstablished ( long deviceId ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java 
 index ce67492 . . bce9862 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java 
 @ @ - 229 , 6 + 229 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 } 
 
 private void onHandShakeCompleted ( ) { 
 + callback . onHandshakeSuccessful ( ) ; 
 isReady = true ; 
 isReadyForCandidates = true ; 
 state = PeerConnectionState . READY ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionCallback . java 
 index d7c07c7 . . 710287b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionCallback . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionCallback . java 
 @ @ - 31 , 6 + 31 , 11 @ @ public interface PeerConnectionCallback { 
 void onCandidate ( int mdpIndex , String id , String sdp ) ; 
 
 / * * 
 + * Called when Answer / Offer finished successfully 
 + * / 
 + void onHandshakeSuccessful ( ) ; 
 + 
 + / * * 
 * Called when peer stream was added 
 * 
 * @ param stream added stream 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionInt . java 
 index f784b69 . . 9a1bbbc 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionInt . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionInt . java 
 @ @ - 113 , 6 + 113 , 16 @ @ public class PeerConnectionInt extends ActorInterface { 
 } 
 
 @ Override 
 + public void onHandshakeSuccessful ( ) { 
 + callbackDest . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onHandshakeSuccessful ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 public void onStreamAdded ( final WebRTCMediaStream stream ) { 
 callbackDest . send ( new Runnable ( ) { 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 index 337fe7d . . 0aaf20d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 @ @ - 148 , 6 + 148 , 11 @ @ public class PeerNodeActor extends ModuleActor implements PeerConnectionCallback 
 } 
 
 @ Override 
 + public void onHandshakeSuccessful ( ) { 
 + callback . onHandshakeSuccessful ( deviceId ) ; 
 + } 
 + 
 + @ Override 
 public void onStreamAdded ( WebRTCMediaStream stream ) { 
 theirMediaStreams . add ( stream ) ; 
 stream . setEnabled ( isEnabled ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeCallback . java 
 index 4f8b2c2 . . d11afa5 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeCallback . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeCallback . java 
 @ @ - 37 , 6 + 37 , 13 @ @ public interface PeerNodeCallback { 
 void onCandidate ( long deviceId , int mdpIndex , String id , String sdp ) ; 
 
 / * * 
 + * Called when handshake was successful 
 + * 
 + * @ param deviceId Device Id 
 + * / 
 + void onHandshakeSuccessful ( long deviceId ) ; 
 + 
 + / * * 
 * Called when connection started 
 * 
 * @ param deviceId Device Id 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeInt . java 
 index 0645618 . . 89abb45 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeInt . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeInt . java 
 @ @ - 145 , 6 + 145 , 16 @ @ public class PeerNodeInt extends ActorInterface { 
 } 
 
 @ Override 
 + public void onHandshakeSuccessful ( final long deviceId ) { 
 + callbackDest . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onHandshakeSuccessful ( deviceId ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 public void onConnectionStarted ( final long deviceId ) { 
 callbackDest . send ( new Runnable ( ) { 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerState . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerState . java 
 new file mode 100644 
 index 0000000 . . 3a00ef9 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerState . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package im . actor . core . modules . calls . peers ; 
 + 
 + public enum PeerState { 
 + CONNECTING , CONNECTED , ACTIVE 
 + } 
 \ No newline at end of file
