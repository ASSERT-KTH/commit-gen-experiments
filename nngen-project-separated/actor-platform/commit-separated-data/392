BLEU SCORE: 0.21200626759025185

TEST MSG: ref ( core ) : Code cleanup for better java 8 support
GENERATED MSG: fix ( core ) : Fixing User Online Bulk Loading

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncListEngine . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncListEngine . java < nl > index 151ebc5 . . 784eac1 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncListEngine . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncListEngine . java < nl > @ @ - 27 , 9 + 27 , 9 @ @ public class AsyncListEngine < T extends BserObject & ListEngineItem > < nl > implements ListEngineDisplayExt < T > { < nl > < nl > private final AsyncStorageInt < T > asyncStorageInt ; < nl > - private final ObjectCache < Long , T > cache = new ObjectCache < Long , T > ( ) ; < nl > + private final ObjectCache < Long , T > cache = new ObjectCache < > ( ) ; < nl > private final Object LOCK = new Object ( ) ; < nl > - private CopyOnWriteArrayList < ListEngineDisplayListener < T > > listeners = new CopyOnWriteArrayList < ListEngineDisplayListener < T > > ( ) ; < nl > + private CopyOnWriteArrayList < ListEngineDisplayListener < T > > listeners = new CopyOnWriteArrayList < > ( ) ; < nl > < nl > public AsyncListEngine ( ListStorageDisplayEx storage , BserCreator < T > creator ) { < nl > this . asyncStorageInt = new AsyncStorageInt < T > ( storage , creator ) ; < nl > @ @ - 231 , 16 + 231 , 13 @ @ public class AsyncListEngine < T extends BserObject & ListEngineItem > < nl > } < nl > < nl > private ListEngineDisplayLoadCallback < T > cover ( final ListEngineDisplayLoadCallback < T > callback ) { < nl > - return new ListEngineDisplayLoadCallback < T > ( ) { < nl > - @ Override < nl > - public void onLoaded ( List < T > items , long topSortKey , long bottomSortKey ) { < nl > - synchronized ( LOCK ) { < nl > - for ( T i : items ) { < nl > - cache . onObjectLoaded ( i . getEngineId ( ) , i ) ; < nl > - } < nl > + return ( items , topSortKey , bottomSortKey ) - > { < nl > + synchronized ( LOCK ) { < nl > + for ( T i : items ) { < nl > + cache . onObjectLoaded ( i . getEngineId ( ) , i ) ; < nl > } < nl > - callback . onLoaded ( items , topSortKey , bottomSortKey ) ; < nl > } < nl > + callback . onLoaded ( items , topSortKey , bottomSortKey ) ; < nl > } ; < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageActor . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageActor . java < nl > index 58fa2c1 . . 329bd64 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageActor . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageActor . java < nl > @ @ - 26 , 6 + 26 , 7 @ @ import im . actor . runtime . storage . ListStorageDisplayEx ; < nl > ] - * / < nl > < nl > class AsyncStorageActor < T extends BserObject & ListEngineItem > extends Actor { < nl > + < nl > private final ListStorageDisplayEx storage ; < nl > private final BserCreator < T > creator ; < nl > < nl > @ @ - 41 , 7 + 42 , 7 @ @ class AsyncStorageActor < T extends BserObject & ListEngineItem > extends Actor { < nl > storage . updateOrAdd ( new ListEngineRecord ( item . getEngineId ( ) , item . getEngineSort ( ) , < nl > item . getEngineSearch ( ) , item . toByteArray ( ) ) ) ; < nl > } else if ( items . size ( ) > 0 ) { < nl > - List < ListEngineRecord > updated = new ArrayList < ListEngineRecord > ( ) ; < nl > + List < ListEngineRecord > updated = new ArrayList < > ( ) ; < nl > for ( T i : items ) { < nl > updated . add ( new ListEngineRecord ( i . getEngineId ( ) , i . getEngineSort ( ) , < nl > i . getEngineSearch ( ) , i . toByteArray ( ) ) ) ; < nl > @ @ - 52 , 7 + 53 , 7 @ @ class AsyncStorageActor < T extends BserObject & ListEngineItem > extends Actor { < nl > < nl > @ AutoreleasePool < nl > public void replace ( List < T > items ) { < nl > - List < ListEngineRecord > updated = new ArrayList < ListEngineRecord > ( ) ; < nl > + List < ListEngineRecord > updated = new ArrayList < > ( ) ; < nl > for ( T i : items ) { < nl > updated . add ( new ListEngineRecord ( i . getEngineId ( ) , i . getEngineSort ( ) , < nl > i . getEngineSearch ( ) , i . toByteArray ( ) ) ) ; < nl > @ @ - 378 , 10 + 379 , 10 @ @ class AsyncStorageActor < T extends BserObject & ListEngineItem > extends Actor { < nl > } < nl > < nl > public interface LoadItemCallback < T extends BserObject & ListEngineItem > { < nl > - public void onLoaded ( T item ) ; < nl > + void onLoaded ( T item ) ; < nl > } < nl > < nl > public interface LoadCountCallback { < nl > - public void onLoaded ( int count ) ; < nl > + void onLoaded ( int count ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageInt . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageInt . java < nl > index 8b0b357 . . 6f52caf 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageInt . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageInt . java < nl > @ @ - 25 , 12 + 25 , 7 @ @ class AsyncStorageInt < T extends BserObject & ListEngineItem > { < nl > private ActorRef storageActor ; < nl > < nl > public AsyncStorageInt ( final ListStorageDisplayEx storage , final BserCreator < T > creator ) { < nl > - storageActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > - @ Override < nl > - public AsyncStorageActor < T > create ( ) { < nl > - return new AsyncStorageActor < T > ( storage , creator ) ; < nl > - } < nl > - } ) . changeDispatcher ( " db " ) , " list _ engine / " + NEXT _ ID + + ) ; < nl > + storageActor = system ( ) . actorOf ( Props . create ( ( ) - > new AsyncStorageActor < T > ( storage , creator ) ) . changeDispatcher ( " db " ) , " list _ engine / " + NEXT _ ID + + ) ; < nl > } < nl > < nl > public void addOrUpdateItems ( List < T > items ) { < nl > @ @ - 53 , 17 + 48 , 14 @ @ class AsyncStorageInt < T extends BserObject & ListEngineItem > { < nl > < nl > public T getValue ( long value ) { < nl > final Object lock = new Object ( ) ; < nl > - final List < T > resultList = new ArrayList < T > ( ) ; < nl > + final List < T > resultList = new ArrayList < > ( ) ; < nl > synchronized ( lock ) { < nl > - storageActor . send ( new AsyncStorageActor . LoadItem < T > ( value , new AsyncStorageActor . LoadItemCallback < T > ( ) { < nl > - @ Override < nl > - public void onLoaded ( T item ) { < nl > - synchronized ( lock ) { < nl > - if ( item ! = null ) { < nl > - resultList . add ( item ) ; < nl > - } < nl > - lock . notify ( ) ; < nl > + storageActor . send ( new AsyncStorageActor . LoadItem < T > ( value , item - > { < nl > + synchronized ( lock ) { < nl > + if ( item ! = null ) { < nl > + resultList . add ( item ) ; < nl > } < nl > + lock . notify ( ) ; < nl > } < nl > } ) ) ; < nl > < nl > @ @ - 83 , 17 + 75 , 14 @ @ class AsyncStorageInt < T extends BserObject & ListEngineItem > { < nl > < nl > public T getHeadValue ( ) { < nl > final Object lock = new Object ( ) ; < nl > - final List < T > resultList = new ArrayList < T > ( ) ; < nl > + final List < T > resultList = new ArrayList < > ( ) ; < nl > synchronized ( lock ) { < nl > - storageActor . send ( new AsyncStorageActor . LoadHead < T > ( new AsyncStorageActor . LoadItemCallback < T > ( ) { < nl > - @ Override < nl > - public void onLoaded ( T item ) { < nl > - synchronized ( lock ) { < nl > - if ( item ! = null ) { < nl > - resultList . add ( item ) ; < nl > - } < nl > - lock . notify ( ) ; < nl > + storageActor . send ( new AsyncStorageActor . LoadHead < T > ( item - > { < nl > + synchronized ( lock ) { < nl > + if ( item ! = null ) { < nl > + resultList . add ( item ) ; < nl > } < nl > + lock . notify ( ) ; < nl > } < nl > } ) ) ; < nl > < nl > @ @ - 113 , 15 + 102 , 12 @ @ class AsyncStorageInt < T extends BserObject & ListEngineItem > { < nl > < nl > public int getCount ( ) { < nl > final Object lock = new Object ( ) ; < nl > - final List < Integer > resultList = new ArrayList < Integer > ( ) ; < nl > + final List < Integer > resultList = new ArrayList < > ( ) ; < nl > synchronized ( lock ) { < nl > - storageActor . send ( new AsyncStorageActor . LoadCount ( new AsyncStorageActor . LoadCountCallback ( ) { < nl > - @ Override < nl > - public void onLoaded ( int count ) { < nl > - synchronized ( lock ) { < nl > - resultList . add ( count ) ; < nl > - lock . notify ( ) ; < nl > - } < nl > + storageActor . send ( new AsyncStorageActor . LoadCount ( count - > { < nl > + synchronized ( lock ) { < nl > + resultList . add ( count ) ; < nl > + lock . notify ( ) ; < nl > } < nl > } ) ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift < nl > index c98141c . . 518f7dc 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift < nl > @ @ - 22 , 7 + 22 , 7 @ @ class AAActorRuntime { < nl > ARCocoaWebRTCProxyProvider . setWebRTCRuntime ( CocoaWebRTCRuntime ( ) ) < nl > ARCocoaLifecycleProxyProvider . setLifecycleRuntime ( CocoaLifecycleRuntime ( ) ) < nl > ARCocoaDispatcher . setDispatcherProxy ( CocoaDispatcher ( ) ) < nl > - ARRuntimeEnvironment . setIsProductionWithBoolean ( true ) < nl > + / / ARRuntimeEnvironment . setIsProductionWithBoolean ( true ) < nl > ARCocoaCryptoProvider . setProxyProviderWithARCocoaCryptoProxyProvider ( CocoaCrypto ( ) ) < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift < nl > index 7bab864 . . 72d8e1d 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift < nl > @ @ - 101 , 8 + 101 , 8 @ @ import Foundation < nl > } < nl > < nl > private func fetchObj ( key : String ) - > AnyObject ? { < nl > - if cachedPrefs . keys . contains ( key ) { < nl > - return cachedPrefs [ key ] ! < nl > + if let obj = cachedPrefs [ key ] { < nl > + return obj < nl > } < nl > let res = prefs . objectForKey ( key ) < nl > cachedPrefs [ key ] = res < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java < nl > index cc446d5 . . 1b43134 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . core . api . ApiGroupOutPeer ; < nl > import im . actor . core . api . ApiUserOutPeer ; < nl > import im . actor . core . api . rpc . RequestSubscribeToGroupOnline ; < nl > import im . actor . core . api . rpc . RequestSubscribeToOnline ; < nl > + import im . actor . core . api . rpc . ResponseVoid ; < nl > import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > @ @ - 35 , 6 + 36 , 11 @ @ import im . actor . runtime . actors . Props ; < nl > import im . actor . runtime . annotations . Verified ; < nl > import im . actor . runtime . eventbus . BusSubscriber ; < nl > import im . actor . runtime . eventbus . Event ; < nl > + import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . function . Supplier ; < nl > + import im . actor . runtime . promise . Promise ; < nl > + import im . actor . runtime . promise . Promises ; < nl > + import im . actor . runtime . promise . PromisesArray ; < nl > < nl > @ Verified < nl > public class PresenceActor extends ModuleActor implements BusSubscriber { < nl > @ @ - 58 , 6 + 64 , 9 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { < nl > private HashSet < Integer > uids = new HashSet < > ( ) ; < nl > private HashSet < Integer > gids = new HashSet < > ( ) ; < nl > < nl > + private boolean isRequesting = false ; < nl > + private ArrayList < Peer > pendingPeers = new ArrayList < > ( ) ; < nl > + < nl > public PresenceActor ( ModuleContext messenger ) { < nl > super ( messenger ) ; < nl > } < nl > @ @ - 173 , 6 + 182 , 9 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { < nl > < nl > @ Verified < nl > private void subscribe ( Peer peer ) { < nl > + < nl > + Log . d ( TAG , " subscribe : " + peer ) ; < nl > + < nl > if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > / / Already subscribed < nl > if ( uids . contains ( peer . getPeerId ( ) ) ) { < nl > @ @ - 186 , 9 + 198 , 7 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { < nl > < nl > / / Subscribing to user online sates < nl > uids . add ( user . getUid ( ) ) ; < nl > - List < ApiUserOutPeer > peers = new ArrayList < ApiUserOutPeer > ( ) ; < nl > - peers . add ( new ApiUserOutPeer ( user . getUid ( ) , user . getAccessHash ( ) ) ) ; < nl > - request ( new RequestSubscribeToOnline ( peers ) ) ; < nl > + < nl > } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > / / Already subscribed < nl > if ( gids . contains ( peer . getPeerId ( ) ) ) { < nl > @ @ - 202 , 39 + 212 , 94 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { < nl > < nl > / / Subscribing to group online sates < nl > gids . add ( peer . getPeerId ( ) ) ; < nl > - List < ApiGroupOutPeer > peers = new ArrayList < ApiGroupOutPeer > ( ) ; < nl > - peers . add ( new ApiGroupOutPeer ( group . getGroupId ( ) , group . getAccessHash ( ) ) ) ; < nl > - request ( new RequestSubscribeToGroupOnline ( peers ) ) ; < nl > + < nl > + } else { < nl > + return ; < nl > } < nl > + < nl > + / / Adding Pending Peer < nl > + if ( pendingPeers . contains ( peer ) ) { < nl > + return ; < nl > + } < nl > + pendingPeers . add ( peer ) ; < nl > + < nl > + onCheckQueue ( ) ; < nl > } < nl > < nl > @ Verified < nl > private void onNewSessionCreated ( ) { < nl > < nl > / / Resubscribing for online states of users < nl > - List < ApiUserOutPeer > userPeers = new ArrayList < ApiUserOutPeer > ( ) ; < nl > for ( int uid : uids ) { < nl > - User user = getUser ( uid ) ; < nl > - if ( user = = null ) { < nl > - continue ; < nl > + Peer p = Peer . user ( uid ) ; < nl > + if ( ! pendingPeers . contains ( p ) ) { < nl > + pendingPeers . add ( p ) ; < nl > } < nl > - userPeers . add ( new ApiUserOutPeer ( uid , user . getAccessHash ( ) ) ) ; < nl > - } < nl > - if ( userPeers . size ( ) > 0 ) { < nl > - request ( new RequestSubscribeToOnline ( userPeers ) ) ; < nl > } < nl > < nl > / / Resubscribing for online states of groups < nl > - List < ApiGroupOutPeer > groupPeers = new ArrayList < ApiGroupOutPeer > ( ) ; < nl > for ( int gid : gids ) { < nl > - Group group = getGroup ( gid ) ; < nl > - if ( group = = null ) { < nl > - continue ; < nl > + Peer p = Peer . group ( gid ) ; < nl > + if ( ! pendingPeers . contains ( p ) ) { < nl > + pendingPeers . add ( p ) ; < nl > + } < nl > + } < nl > + < nl > + onCheckQueue ( ) ; < nl > + } < nl > + < nl > + private void onCheckQueue ( ) { < nl > + < nl > + if ( isRequesting ) { < nl > + return ; < nl > + } < nl > + < nl > + if ( pendingPeers . size ( ) = = 0 ) { < nl > + return ; < nl > + } < nl > + < nl > + ArrayList < Peer > destPeers = new ArrayList < > ( pendingPeers ) ; < nl > + pendingPeers . clear ( ) ; < nl > + ArrayList < ApiUserOutPeer > outUserPeers = new ArrayList < > ( ) ; < nl > + ArrayList < ApiGroupOutPeer > outGroupPeers = new ArrayList < > ( ) ; < nl > + < nl > + for ( Peer p : destPeers ) { < nl > + if ( p . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group g = getGroup ( p . getPeerId ( ) ) ; < nl > + if ( g ! = null ) { < nl > + outGroupPeers . add ( new ApiGroupOutPeer ( p . getPeerId ( ) , g . getAccessHash ( ) ) ) ; < nl > + } < nl > + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User u = getUser ( p . getPeerId ( ) ) ; < nl > + if ( u ! = null ) { < nl > + outUserPeers . add ( new ApiUserOutPeer ( p . getPeerId ( ) , u . getAccessHash ( ) ) ) ; < nl > + } < nl > } < nl > - groupPeers . add ( new ApiGroupOutPeer ( group . getGroupId ( ) , group . getAccessHash ( ) ) ) ; < nl > } < nl > - if ( groupPeers . size ( ) > 0 ) { < nl > - request ( new RequestSubscribeToGroupOnline ( groupPeers ) ) ; < nl > + < nl > + ArrayList < Promise < ResponseVoid > > requests = new ArrayList < > ( ) ; < nl > + if ( outUserPeers . size ( ) > 0 ) { < nl > + requests . add ( api ( new RequestSubscribeToOnline ( outUserPeers ) ) ) ; < nl > + } < nl > + if ( outGroupPeers . size ( ) > 0 ) { < nl > + requests . add ( api ( new RequestSubscribeToGroupOnline ( outGroupPeers ) ) ) ; < nl > + } < nl > + < nl > + if ( requests . size ( ) > 0 ) { < nl > + isRequesting = true ; < nl > + PromisesArray . ofPromises ( requests ) . zip ( ) . then ( new Consumer < ResponseVoid [ ] > ( ) { < nl > + @ Override < nl > + public void apply ( ResponseVoid [ ] responseVoids ) { < nl > + isRequesting = false ; < nl > + onCheckQueue ( ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + isRequesting = false ; < nl > + onCheckQueue ( ) ; < nl > + } < nl > + } ) . done ( self ( ) ) ; < nl > } < nl > } < nl > < nl > @ @ - 262 , 7 + 327 , 7 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { < nl > OnlineUserTimeout timeout = ( OnlineUserTimeout ) message ; < nl > onUserGoesOffline ( timeout . getUid ( ) , timeout . getDate ( ) , timeout . getUpdateDate ( ) ) ; < nl > } else { < nl > - drop ( message ) ; < nl > + super . onReceive ( message ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > index fb08514 . . 65d9cf8 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > @ @ - 87 , 6 + 87 , 17 @ @ public class PromisesArray < T > { < nl > } ) ; < nl > } < nl > < nl > + public static < T > PromisesArray < T > ofPromises ( Collection < Promise < T > > items ) { < nl > + ArrayList < Promise < T > > res = new ArrayList < > ( items ) ; < nl > + / / Collections . addAll ( res , items ) ; < nl > + final Promise [ ] promises = res . toArray ( new Promise [ res . size ( ) ] ) ; < nl > + return new PromisesArray < > ( new PromiseFunc < Promise < T > [ ] > ( ) { < nl > + @ Override < nl > + public void exec ( PromiseResolver < Promise < T > [ ] > executor ) { < nl > + executor . result ( promises ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > < nl > / / < nl > / / Constructors and methods

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncListEngine . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncListEngine . java 
 index 151ebc5 . . 784eac1 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncListEngine . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncListEngine . java 
 @ @ - 27 , 9 + 27 , 9 @ @ public class AsyncListEngine < T extends BserObject & ListEngineItem > 
 implements ListEngineDisplayExt < T > { 
 
 private final AsyncStorageInt < T > asyncStorageInt ; 
 - private final ObjectCache < Long , T > cache = new ObjectCache < Long , T > ( ) ; 
 + private final ObjectCache < Long , T > cache = new ObjectCache < > ( ) ; 
 private final Object LOCK = new Object ( ) ; 
 - private CopyOnWriteArrayList < ListEngineDisplayListener < T > > listeners = new CopyOnWriteArrayList < ListEngineDisplayListener < T > > ( ) ; 
 + private CopyOnWriteArrayList < ListEngineDisplayListener < T > > listeners = new CopyOnWriteArrayList < > ( ) ; 
 
 public AsyncListEngine ( ListStorageDisplayEx storage , BserCreator < T > creator ) { 
 this . asyncStorageInt = new AsyncStorageInt < T > ( storage , creator ) ; 
 @ @ - 231 , 16 + 231 , 13 @ @ public class AsyncListEngine < T extends BserObject & ListEngineItem > 
 } 
 
 private ListEngineDisplayLoadCallback < T > cover ( final ListEngineDisplayLoadCallback < T > callback ) { 
 - return new ListEngineDisplayLoadCallback < T > ( ) { 
 - @ Override 
 - public void onLoaded ( List < T > items , long topSortKey , long bottomSortKey ) { 
 - synchronized ( LOCK ) { 
 - for ( T i : items ) { 
 - cache . onObjectLoaded ( i . getEngineId ( ) , i ) ; 
 - } 
 + return ( items , topSortKey , bottomSortKey ) - > { 
 + synchronized ( LOCK ) { 
 + for ( T i : items ) { 
 + cache . onObjectLoaded ( i . getEngineId ( ) , i ) ; 
 } 
 - callback . onLoaded ( items , topSortKey , bottomSortKey ) ; 
 } 
 + callback . onLoaded ( items , topSortKey , bottomSortKey ) ; 
 } ; 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageActor . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageActor . java 
 index 58fa2c1 . . 329bd64 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageActor . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageActor . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import im . actor . runtime . storage . ListStorageDisplayEx ; 
 ] - * / 
 
 class AsyncStorageActor < T extends BserObject & ListEngineItem > extends Actor { 
 + 
 private final ListStorageDisplayEx storage ; 
 private final BserCreator < T > creator ; 
 
 @ @ - 41 , 7 + 42 , 7 @ @ class AsyncStorageActor < T extends BserObject & ListEngineItem > extends Actor { 
 storage . updateOrAdd ( new ListEngineRecord ( item . getEngineId ( ) , item . getEngineSort ( ) , 
 item . getEngineSearch ( ) , item . toByteArray ( ) ) ) ; 
 } else if ( items . size ( ) > 0 ) { 
 - List < ListEngineRecord > updated = new ArrayList < ListEngineRecord > ( ) ; 
 + List < ListEngineRecord > updated = new ArrayList < > ( ) ; 
 for ( T i : items ) { 
 updated . add ( new ListEngineRecord ( i . getEngineId ( ) , i . getEngineSort ( ) , 
 i . getEngineSearch ( ) , i . toByteArray ( ) ) ) ; 
 @ @ - 52 , 7 + 53 , 7 @ @ class AsyncStorageActor < T extends BserObject & ListEngineItem > extends Actor { 
 
 @ AutoreleasePool 
 public void replace ( List < T > items ) { 
 - List < ListEngineRecord > updated = new ArrayList < ListEngineRecord > ( ) ; 
 + List < ListEngineRecord > updated = new ArrayList < > ( ) ; 
 for ( T i : items ) { 
 updated . add ( new ListEngineRecord ( i . getEngineId ( ) , i . getEngineSort ( ) , 
 i . getEngineSearch ( ) , i . toByteArray ( ) ) ) ; 
 @ @ - 378 , 10 + 379 , 10 @ @ class AsyncStorageActor < T extends BserObject & ListEngineItem > extends Actor { 
 } 
 
 public interface LoadItemCallback < T extends BserObject & ListEngineItem > { 
 - public void onLoaded ( T item ) ; 
 + void onLoaded ( T item ) ; 
 } 
 
 public interface LoadCountCallback { 
 - public void onLoaded ( int count ) ; 
 + void onLoaded ( int count ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageInt . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageInt . java 
 index 8b0b357 . . 6f52caf 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageInt . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / storage / AsyncStorageInt . java 
 @ @ - 25 , 12 + 25 , 7 @ @ class AsyncStorageInt < T extends BserObject & ListEngineItem > { 
 private ActorRef storageActor ; 
 
 public AsyncStorageInt ( final ListStorageDisplayEx storage , final BserCreator < T > creator ) { 
 - storageActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 - @ Override 
 - public AsyncStorageActor < T > create ( ) { 
 - return new AsyncStorageActor < T > ( storage , creator ) ; 
 - } 
 - } ) . changeDispatcher ( " db " ) , " list _ engine / " + NEXT _ ID + + ) ; 
 + storageActor = system ( ) . actorOf ( Props . create ( ( ) - > new AsyncStorageActor < T > ( storage , creator ) ) . changeDispatcher ( " db " ) , " list _ engine / " + NEXT _ ID + + ) ; 
 } 
 
 public void addOrUpdateItems ( List < T > items ) { 
 @ @ - 53 , 17 + 48 , 14 @ @ class AsyncStorageInt < T extends BserObject & ListEngineItem > { 
 
 public T getValue ( long value ) { 
 final Object lock = new Object ( ) ; 
 - final List < T > resultList = new ArrayList < T > ( ) ; 
 + final List < T > resultList = new ArrayList < > ( ) ; 
 synchronized ( lock ) { 
 - storageActor . send ( new AsyncStorageActor . LoadItem < T > ( value , new AsyncStorageActor . LoadItemCallback < T > ( ) { 
 - @ Override 
 - public void onLoaded ( T item ) { 
 - synchronized ( lock ) { 
 - if ( item ! = null ) { 
 - resultList . add ( item ) ; 
 - } 
 - lock . notify ( ) ; 
 + storageActor . send ( new AsyncStorageActor . LoadItem < T > ( value , item - > { 
 + synchronized ( lock ) { 
 + if ( item ! = null ) { 
 + resultList . add ( item ) ; 
 } 
 + lock . notify ( ) ; 
 } 
 } ) ) ; 
 
 @ @ - 83 , 17 + 75 , 14 @ @ class AsyncStorageInt < T extends BserObject & ListEngineItem > { 
 
 public T getHeadValue ( ) { 
 final Object lock = new Object ( ) ; 
 - final List < T > resultList = new ArrayList < T > ( ) ; 
 + final List < T > resultList = new ArrayList < > ( ) ; 
 synchronized ( lock ) { 
 - storageActor . send ( new AsyncStorageActor . LoadHead < T > ( new AsyncStorageActor . LoadItemCallback < T > ( ) { 
 - @ Override 
 - public void onLoaded ( T item ) { 
 - synchronized ( lock ) { 
 - if ( item ! = null ) { 
 - resultList . add ( item ) ; 
 - } 
 - lock . notify ( ) ; 
 + storageActor . send ( new AsyncStorageActor . LoadHead < T > ( item - > { 
 + synchronized ( lock ) { 
 + if ( item ! = null ) { 
 + resultList . add ( item ) ; 
 } 
 + lock . notify ( ) ; 
 } 
 } ) ) ; 
 
 @ @ - 113 , 15 + 102 , 12 @ @ class AsyncStorageInt < T extends BserObject & ListEngineItem > { 
 
 public int getCount ( ) { 
 final Object lock = new Object ( ) ; 
 - final List < Integer > resultList = new ArrayList < Integer > ( ) ; 
 + final List < Integer > resultList = new ArrayList < > ( ) ; 
 synchronized ( lock ) { 
 - storageActor . send ( new AsyncStorageActor . LoadCount ( new AsyncStorageActor . LoadCountCallback ( ) { 
 - @ Override 
 - public void onLoaded ( int count ) { 
 - synchronized ( lock ) { 
 - resultList . add ( count ) ; 
 - lock . notify ( ) ; 
 - } 
 + storageActor . send ( new AsyncStorageActor . LoadCount ( count - > { 
 + synchronized ( lock ) { 
 + resultList . add ( count ) ; 
 + lock . notify ( ) ; 
 } 
 } ) ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift 
 index c98141c . . 518f7dc 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift 
 @ @ - 22 , 7 + 22 , 7 @ @ class AAActorRuntime { 
 ARCocoaWebRTCProxyProvider . setWebRTCRuntime ( CocoaWebRTCRuntime ( ) ) 
 ARCocoaLifecycleProxyProvider . setLifecycleRuntime ( CocoaLifecycleRuntime ( ) ) 
 ARCocoaDispatcher . setDispatcherProxy ( CocoaDispatcher ( ) ) 
 - ARRuntimeEnvironment . setIsProductionWithBoolean ( true ) 
 + / / ARRuntimeEnvironment . setIsProductionWithBoolean ( true ) 
 ARCocoaCryptoProvider . setProxyProviderWithARCocoaCryptoProxyProvider ( CocoaCrypto ( ) ) 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift 
 index 7bab864 . . 72d8e1d 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / Storage / UDPreferencesStorage . swift 
 @ @ - 101 , 8 + 101 , 8 @ @ import Foundation 
 } 
 
 private func fetchObj ( key : String ) - > AnyObject ? { 
 - if cachedPrefs . keys . contains ( key ) { 
 - return cachedPrefs [ key ] ! 
 + if let obj = cachedPrefs [ key ] { 
 + return obj 
 } 
 let res = prefs . objectForKey ( key ) 
 cachedPrefs [ key ] = res 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java 
 index cc446d5 . . 1b43134 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . core . api . ApiGroupOutPeer ; 
 import im . actor . core . api . ApiUserOutPeer ; 
 import im . actor . core . api . rpc . RequestSubscribeToGroupOnline ; 
 import im . actor . core . api . rpc . RequestSubscribeToOnline ; 
 + import im . actor . core . api . rpc . ResponseVoid ; 
 import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 @ @ - 35 , 6 + 36 , 11 @ @ import im . actor . runtime . actors . Props ; 
 import im . actor . runtime . annotations . Verified ; 
 import im . actor . runtime . eventbus . BusSubscriber ; 
 import im . actor . runtime . eventbus . Event ; 
 + import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . function . Supplier ; 
 + import im . actor . runtime . promise . Promise ; 
 + import im . actor . runtime . promise . Promises ; 
 + import im . actor . runtime . promise . PromisesArray ; 
 
 @ Verified 
 public class PresenceActor extends ModuleActor implements BusSubscriber { 
 @ @ - 58 , 6 + 64 , 9 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { 
 private HashSet < Integer > uids = new HashSet < > ( ) ; 
 private HashSet < Integer > gids = new HashSet < > ( ) ; 
 
 + private boolean isRequesting = false ; 
 + private ArrayList < Peer > pendingPeers = new ArrayList < > ( ) ; 
 + 
 public PresenceActor ( ModuleContext messenger ) { 
 super ( messenger ) ; 
 } 
 @ @ - 173 , 6 + 182 , 9 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { 
 
 @ Verified 
 private void subscribe ( Peer peer ) { 
 + 
 + Log . d ( TAG , " subscribe : " + peer ) ; 
 + 
 if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 / / Already subscribed 
 if ( uids . contains ( peer . getPeerId ( ) ) ) { 
 @ @ - 186 , 9 + 198 , 7 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { 
 
 / / Subscribing to user online sates 
 uids . add ( user . getUid ( ) ) ; 
 - List < ApiUserOutPeer > peers = new ArrayList < ApiUserOutPeer > ( ) ; 
 - peers . add ( new ApiUserOutPeer ( user . getUid ( ) , user . getAccessHash ( ) ) ) ; 
 - request ( new RequestSubscribeToOnline ( peers ) ) ; 
 + 
 } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 / / Already subscribed 
 if ( gids . contains ( peer . getPeerId ( ) ) ) { 
 @ @ - 202 , 39 + 212 , 94 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { 
 
 / / Subscribing to group online sates 
 gids . add ( peer . getPeerId ( ) ) ; 
 - List < ApiGroupOutPeer > peers = new ArrayList < ApiGroupOutPeer > ( ) ; 
 - peers . add ( new ApiGroupOutPeer ( group . getGroupId ( ) , group . getAccessHash ( ) ) ) ; 
 - request ( new RequestSubscribeToGroupOnline ( peers ) ) ; 
 + 
 + } else { 
 + return ; 
 } 
 + 
 + / / Adding Pending Peer 
 + if ( pendingPeers . contains ( peer ) ) { 
 + return ; 
 + } 
 + pendingPeers . add ( peer ) ; 
 + 
 + onCheckQueue ( ) ; 
 } 
 
 @ Verified 
 private void onNewSessionCreated ( ) { 
 
 / / Resubscribing for online states of users 
 - List < ApiUserOutPeer > userPeers = new ArrayList < ApiUserOutPeer > ( ) ; 
 for ( int uid : uids ) { 
 - User user = getUser ( uid ) ; 
 - if ( user = = null ) { 
 - continue ; 
 + Peer p = Peer . user ( uid ) ; 
 + if ( ! pendingPeers . contains ( p ) ) { 
 + pendingPeers . add ( p ) ; 
 } 
 - userPeers . add ( new ApiUserOutPeer ( uid , user . getAccessHash ( ) ) ) ; 
 - } 
 - if ( userPeers . size ( ) > 0 ) { 
 - request ( new RequestSubscribeToOnline ( userPeers ) ) ; 
 } 
 
 / / Resubscribing for online states of groups 
 - List < ApiGroupOutPeer > groupPeers = new ArrayList < ApiGroupOutPeer > ( ) ; 
 for ( int gid : gids ) { 
 - Group group = getGroup ( gid ) ; 
 - if ( group = = null ) { 
 - continue ; 
 + Peer p = Peer . group ( gid ) ; 
 + if ( ! pendingPeers . contains ( p ) ) { 
 + pendingPeers . add ( p ) ; 
 + } 
 + } 
 + 
 + onCheckQueue ( ) ; 
 + } 
 + 
 + private void onCheckQueue ( ) { 
 + 
 + if ( isRequesting ) { 
 + return ; 
 + } 
 + 
 + if ( pendingPeers . size ( ) = = 0 ) { 
 + return ; 
 + } 
 + 
 + ArrayList < Peer > destPeers = new ArrayList < > ( pendingPeers ) ; 
 + pendingPeers . clear ( ) ; 
 + ArrayList < ApiUserOutPeer > outUserPeers = new ArrayList < > ( ) ; 
 + ArrayList < ApiGroupOutPeer > outGroupPeers = new ArrayList < > ( ) ; 
 + 
 + for ( Peer p : destPeers ) { 
 + if ( p . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group g = getGroup ( p . getPeerId ( ) ) ; 
 + if ( g ! = null ) { 
 + outGroupPeers . add ( new ApiGroupOutPeer ( p . getPeerId ( ) , g . getAccessHash ( ) ) ) ; 
 + } 
 + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User u = getUser ( p . getPeerId ( ) ) ; 
 + if ( u ! = null ) { 
 + outUserPeers . add ( new ApiUserOutPeer ( p . getPeerId ( ) , u . getAccessHash ( ) ) ) ; 
 + } 
 } 
 - groupPeers . add ( new ApiGroupOutPeer ( group . getGroupId ( ) , group . getAccessHash ( ) ) ) ; 
 } 
 - if ( groupPeers . size ( ) > 0 ) { 
 - request ( new RequestSubscribeToGroupOnline ( groupPeers ) ) ; 
 + 
 + ArrayList < Promise < ResponseVoid > > requests = new ArrayList < > ( ) ; 
 + if ( outUserPeers . size ( ) > 0 ) { 
 + requests . add ( api ( new RequestSubscribeToOnline ( outUserPeers ) ) ) ; 
 + } 
 + if ( outGroupPeers . size ( ) > 0 ) { 
 + requests . add ( api ( new RequestSubscribeToGroupOnline ( outGroupPeers ) ) ) ; 
 + } 
 + 
 + if ( requests . size ( ) > 0 ) { 
 + isRequesting = true ; 
 + PromisesArray . ofPromises ( requests ) . zip ( ) . then ( new Consumer < ResponseVoid [ ] > ( ) { 
 + @ Override 
 + public void apply ( ResponseVoid [ ] responseVoids ) { 
 + isRequesting = false ; 
 + onCheckQueue ( ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + isRequesting = false ; 
 + onCheckQueue ( ) ; 
 + } 
 + } ) . done ( self ( ) ) ; 
 } 
 } 
 
 @ @ - 262 , 7 + 327 , 7 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { 
 OnlineUserTimeout timeout = ( OnlineUserTimeout ) message ; 
 onUserGoesOffline ( timeout . getUid ( ) , timeout . getDate ( ) , timeout . getUpdateDate ( ) ) ; 
 } else { 
 - drop ( message ) ; 
 + super . onReceive ( message ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 index fb08514 . . 65d9cf8 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 @ @ - 87 , 6 + 87 , 17 @ @ public class PromisesArray < T > { 
 } ) ; 
 } 
 
 + public static < T > PromisesArray < T > ofPromises ( Collection < Promise < T > > items ) { 
 + ArrayList < Promise < T > > res = new ArrayList < > ( items ) ; 
 + / / Collections . addAll ( res , items ) ; 
 + final Promise [ ] promises = res . toArray ( new Promise [ res . size ( ) ] ) ; 
 + return new PromisesArray < > ( new PromiseFunc < Promise < T > [ ] > ( ) { 
 + @ Override 
 + public void exec ( PromiseResolver < Promise < T > [ ] > executor ) { 
 + executor . result ( promises ) ; 
 + } 
 + } ) ; 
 + } 
 
 / / 
 / / Constructors and methods
