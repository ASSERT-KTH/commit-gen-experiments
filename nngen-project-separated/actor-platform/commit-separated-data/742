BLEU SCORE: 0.06766165252145301

TEST MSG: fix ( android ) : Remove Incorrect Extension methods
GENERATED MSG: wip ( SDK ) : Adding dialog desc processing and Grouped Dialogs model

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > index 460f9b0 . . 119768f 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > @ @ - 7 , 26 + 7 , 13 @ @ import android . view . View ; < nl > import android . view . ViewGroup ; < nl > import android . widget . CheckBox ; < nl > < nl > - import java . util . HashMap ; < nl > - < nl > import im . actor . allmessages . MainPhoneControllerEx ; < nl > - import im . actor . allmessages . MessagesHandler ; < nl > - import im . actor . allmessages . OverHandlerActor ; < nl > - import im . actor . core . entity . Peer ; < nl > - import im . actor . core . modules . internal . messages . ConversationActor ; < nl > - import im . actor . runtime . actors . Actor ; < nl > - import im . actor . runtime . actors . ActorCreator ; < nl > - import im . actor . runtime . actors . ActorRef ; < nl > - import im . actor . runtime . actors . ActorSystem ; < nl > - import im . actor . runtime . actors . Props ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . ActorSDKApplication ; < nl > import im . actor . sdk . ActorStyle ; < nl > import im . actor . sdk . BaseActorSDKDelegate ; < nl > import im . actor . sdk . controllers . activity . ActorMainActivity ; < nl > import im . actor . sdk . controllers . activity . controllers . MainPhoneController ; < nl > - import im . actor . sdk . controllers . conversation . messages . BaseJsonHolder ; < nl > - import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; < nl > import im . actor . sdk . controllers . fragment . group . GroupInfoFragment ; < nl > import im . actor . sdk . controllers . fragment . profile . ProfileFragment ; < nl > import im . actor . sdk . controllers . fragment . settings . ActorSettingsCategory ; < nl > @ @ - 189 , 25 + 176 , 6 @ @ public class Application extends ActorSDKApplication { < nl > public MainPhoneController getMainPhoneController ( ActorMainActivity mainActivity ) { < nl > return new MainPhoneControllerEx ( mainActivity ) ; < nl > } < nl > - < nl > - HashMap < Peer , MessagesHandler > handlers = new HashMap < > ( ) ; < nl > - ActorRef overHandler ; < nl > - < nl > - @ Override < nl > - public ConversationActor . ConversationActorDelegate getConversationActorDelegate ( Peer peer ) { < nl > - if ( overHandler = = null ) { < nl > - overHandler = ActorSystem . system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > - @ Override < nl > - public Actor create ( ) { < nl > - return new OverHandlerActor ( ) ; < nl > - } < nl > - } ) , " actor / overhandler " ) ; < nl > - } < nl > - if ( ! handlers . containsKey ( peer ) ) { < nl > - handlers . put ( peer , new MessagesHandler ( peer , overHandler ) ) ; < nl > - } < nl > - return handlers . get ( peer ) ; < nl > - } < nl > } < nl > < nl > public static class ProfileFragmentEx extends ProfileFragment { < nl > diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / allmessages / MessagesHandler . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / allmessages / MessagesHandler . java < nl > deleted file mode 100644 < nl > index 719aecd . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / allmessages / MessagesHandler . java < nl > + + + / dev / null < nl > @ @ - 1 , 43 + 0 , 0 @ @ < nl > - package im . actor . allmessages ; < nl > - < nl > - import java . util . ArrayList ; < nl > - < nl > - import im . actor . core . entity . Message ; < nl > - import im . actor . core . entity . Peer ; < nl > - import im . actor . core . modules . internal . messages . ConversationActor ; < nl > - import im . actor . runtime . actors . ActorRef ; < nl > - < nl > - public class MessagesHandler implements ConversationActor . ConversationActorDelegate { < nl > - < nl > - Peer peer ; < nl > - ActorRef handler ; < nl > - < nl > - < nl > - public MessagesHandler ( Peer peer , ActorRef handler ) { < nl > - this . peer = peer ; < nl > - this . handler = handler ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onIncoming ( ArrayList < Message > msgs ) { < nl > - handler . send ( new OverHandlerActor . Incoming ( peer , msgs ) ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onIncoming ( Message msg ) { < nl > - handler . send ( new OverHandlerActor . Incoming ( peer , msg ) ) ; < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void onUpdate ( Message msg ) { < nl > - handler . send ( new OverHandlerActor . Update ( peer , msg ) ) ; < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void onDelete ( long [ ] rids ) { < nl > - handler . send ( new OverHandlerActor . Delete ( peer , rids ) ) ; < nl > - < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / allmessages / OverHandlerActor . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / allmessages / OverHandlerActor . java < nl > deleted file mode 100644 < nl > index 5bfc2db . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / allmessages / OverHandlerActor . java < nl > + + + / dev / null < nl > @ @ - 1 , 152 + 0 , 0 @ @ < nl > - package im . actor . allmessages ; < nl > - < nl > - import java . util . ArrayList ; < nl > - < nl > - import im . actor . core . entity . Message ; < nl > - import im . actor . core . entity . Peer ; < nl > - import im . actor . core . entity . PeerType ; < nl > - import im . actor . core . entity . Reaction ; < nl > - import im . actor . runtime . actors . Actor ; < nl > - import im . actor . runtime . storage . ListEngine ; < nl > - < nl > - import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > - import static im . actor . sdk . util . ActorSDKMessenger . myUid ; < nl > - < nl > - public class OverHandlerActor extends Actor { < nl > - ListEngine < MessageEx > allMessages = messenger ( ) . getCustomConversationEngine ( new Peer ( PeerType . PRIVATE , 1 ) , " favorite " , MessageEx . CREATOR ) ; < nl > - < nl > - public void onIncoming ( Peer peer , ArrayList < Message > msgs ) { < nl > - ArrayList < MessageEx > msgex = new ArrayList < MessageEx > ( ) ; < nl > - for ( Message m : msgs ) { < nl > - boolean containsMyLike = false ; < nl > - for ( Reaction r : m . getReactions ( ) ) { < nl > - if ( r . getUids ( ) . contains ( myUid ( ) ) ) { < nl > - containsMyLike = true ; < nl > - break ; < nl > - } < nl > - } < nl > - if ( containsMyLike ) { < nl > - msgex . add ( new MessageEx ( m , peer ) ) ; < nl > - } < nl > - } < nl > - allMessages . addOrUpdateItems ( msgex ) ; < nl > - } < nl > - < nl > - public void onIncoming ( Peer peer , Message msg ) { < nl > - boolean containsMyLike = false ; < nl > - for ( Reaction r : msg . getReactions ( ) ) { < nl > - if ( r . getUids ( ) . contains ( myUid ( ) ) ) { < nl > - containsMyLike = true ; < nl > - break ; < nl > - } < nl > - } < nl > - if ( containsMyLike ) { < nl > - allMessages . addOrUpdateItem ( new MessageEx ( msg , peer ) ) ; < nl > - } < nl > - } < nl > - < nl > - public void onUpdate ( Peer peer , Message msg ) { < nl > - boolean containsMyReaction = false ; < nl > - for ( Reaction r : msg . getReactions ( ) ) { < nl > - if ( r . getUids ( ) . contains ( myUid ( ) ) ) { < nl > - containsMyReaction = true ; < nl > - break ; < nl > - } < nl > - } < nl > - if ( containsMyReaction ) { < nl > - allMessages . addOrUpdateItem ( new MessageEx ( msg , peer ) ) ; < nl > - } else { < nl > - allMessages . removeItem ( msg . getEngineId ( ) ) ; < nl > - < nl > - } < nl > - < nl > - } < nl > - < nl > - public void onDelete ( Peer peer , long [ ] rids ) { < nl > - allMessages . removeItems ( rids ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onReceive ( Object message ) { < nl > - if ( message instanceof Incoming ) { < nl > - ArrayList < Message > msgs = ( ( Incoming ) message ) . getMsgs ( ) ; < nl > - if ( msgs ! = null ) { < nl > - onIncoming ( ( ( Incoming ) message ) . getPeer ( ) , msgs ) ; < nl > - } else { < nl > - onIncoming ( ( ( Incoming ) message ) . getPeer ( ) , ( ( Incoming ) message ) . getMsg ( ) ) ; < nl > - } < nl > - } else if ( message instanceof Delete ) { < nl > - onDelete ( ( ( Delete ) message ) . getPeer ( ) , ( ( Delete ) message ) . getRids ( ) ) ; < nl > - } else if ( message instanceof Update ) { < nl > - onUpdate ( ( ( Update ) message ) . getPeer ( ) , ( ( Update ) message ) . getMsg ( ) ) ; < nl > - } < nl > - } < nl > - < nl > - public static class Incoming { < nl > - Peer peer ; < nl > - Message msg ; < nl > - < nl > - ArrayList < Message > msgs ; < nl > - < nl > - public Incoming ( Peer peer , Message msg ) { < nl > - this . peer = peer ; < nl > - this . msg = msg ; < nl > - } < nl > - < nl > - public Incoming ( Peer peer , ArrayList < Message > msgs ) { < nl > - this . peer = peer ; < nl > - this . msgs = msgs ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public ArrayList < Message > getMsgs ( ) { < nl > - return msgs ; < nl > - } < nl > - < nl > - public Message getMsg ( ) { < nl > - return msg ; < nl > - } < nl > - } < nl > - < nl > - public static class Delete { < nl > - Peer peer ; < nl > - long [ ] rids ; < nl > - < nl > - public Delete ( Peer peer , long [ ] rids ) { < nl > - this . peer = peer ; < nl > - this . rids = rids ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public long [ ] getRids ( ) { < nl > - return rids ; < nl > - } < nl > - } < nl > - < nl > - < nl > - public static class Update { < nl > - Peer peer ; < nl > - Message msg ; < nl > - < nl > - public Update ( Peer peer , Message msg ) { < nl > - this . peer = peer ; < nl > - this . msg = msg ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public Message getMsg ( ) { < nl > - return msg ; < nl > - } < nl > - } < nl > - < nl > - < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > index 32935be . . 7d4c157 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > @ @ - 820 , 10 + 820 , 6 @ @ public class ActorSDK { < nl > } < nl > } < nl > < nl > - public ConversationActor . ConversationActorDelegate getConversationActorDelegate ( Peer peer ) { < nl > - return delegate . getConversationActorDelegate ( peer ) ; < nl > - } < nl > - < nl > / * * < nl > * Used for handling delegated ViewHolders < nl > * / < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java < nl > index 46aba63 . . dfbdf3f 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java < nl > @ @ - 159 , 6 + 159 , 4 @ @ public interface ActorSDKDelegate { < nl > < nl > @ Deprecated < nl > ActorSettingsCategory [ ] getAfterSettingsCategories ( ) ; < nl > - < nl > - ConversationActor . ConversationActorDelegate getConversationActorDelegate ( Peer peer ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java < nl > index a60f43d . . 23a8ad5 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java < nl > @ @ - 254 , 10 + 254 , 4 @ @ public class BaseActorSDKDelegate implements ActorSDKDelegate { < nl > return null ; < nl > } < nl > < nl > - @ Override < nl > - public ConversationActor . ConversationActorDelegate getConversationActorDelegate ( Peer peer ) { < nl > - return null ; < nl > - } < nl > - < nl > - < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > index 8302c56 . . e7d019c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > @ @ - 50 , 7 + 50 , 6 @ @ import im . actor . runtime . generic . mvvm . BindedDisplayList ; < nl > import im . actor . runtime . mvvm . Value ; < nl > import im . actor . runtime . mvvm . ValueChangedListener ; < nl > import im . actor . runtime . storage . ListEngineItem ; < nl > - import im . actor . sdk . ActorSDK ; < nl > import me . leolin . shortcutbadger . ShortcutBadger ; < nl > < nl > import static im . actor . runtime . actors . ActorSystem . system ; < nl > @ @ - 483 , 9 + 482 , 4 @ @ public class AndroidMessenger extends im . actor . core . Messenger { < nl > public EventBus getEvents ( ) { < nl > return modules . getEvents ( ) ; < nl > } < nl > - < nl > - @ Override < nl > - public ConversationActor . ConversationActorDelegate getConversationActorDelegate ( Peer peer ) { < nl > - return ActorSDK . sharedActor ( ) . getConversationActorDelegate ( peer ) ; < nl > - } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index dc6c47f . . 7e507d0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 2213 , 12 + 2213 , 4 @ @ public class Messenger { < nl > ModuleContext getModuleContext ( ) { < nl > return modules ; < nl > } < nl > - < nl > - public ConversationActor . ConversationActorDelegate getConversationActorDelegate ( Peer peer ) { < nl > - return null ; < nl > - } < nl > - < nl > - public ListEngine getCustomConversationEngine ( Peer peer , String datatype , BserCreator creator ) { < nl > - return modules . getMessagesModule ( ) . getCustomConversationEngine ( peer , datatype , creator ) ; < nl > - } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > index de4377a . . 7a5ffce 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > @ @ - 56 , 7 + 56 , 6 @ @ public class ConversationActor extends ModuleActor { < nl > private long inReadState ; < nl > private long outReadState ; < nl > private long outReceiveState ; < nl > - ConversationActorDelegate delegate ; < nl > < nl > private boolean isConversationVisible = false ; < nl > private boolean isAppVisible = false ; < nl > @ @ - 91 , 7 + 90 , 6 @ @ public class ConversationActor extends ModuleActor { < nl > if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > isHiddenPeer = getGroup ( peer . getPeerId ( ) ) . isHidden ( ) ; < nl > } < nl > - delegate = context ( ) . getMessenger ( ) . getConversationActorDelegate ( peer ) ; < nl > subscribe ( AppVisibleChanged . EVENT ) ; < nl > } < nl > < nl > @ @ - 172 , 9 + 170 , 6 @ @ public class ConversationActor extends ModuleActor { < nl > / / Adding message < nl > messages . addOrUpdateItems ( updated ) ; < nl > docs . addOrUpdateItems ( updatedDocs ) ; < nl > - if ( delegate ! = null ) { < nl > - delegate . onIncoming ( updated ) ; < nl > - } < nl > < nl > for ( Message m : updated ) { < nl > if ( m . getSenderId ( ) = = myUid ( ) ) { < nl > @ @ - 240 , 9 + 235 , 6 @ @ public class ConversationActor extends ModuleActor { < nl > if ( message . getContent ( ) instanceof DocumentContent ) { < nl > docs . addOrUpdateItem ( message ) ; < nl > } < nl > - if ( delegate ! = null ) { < nl > - delegate . onIncoming ( message ) ; < nl > - } < nl > < nl > / / Updating dialog if on server < nl > if ( message . isOnServer ( ) ) { < nl > @ @ - 298 , 9 + 290 , 6 @ @ public class ConversationActor extends ModuleActor { < nl > } else { < nl > docs . removeItem ( rid ) ; < nl > } < nl > - if ( delegate ! = null ) { < nl > - delegate . onUpdate ( updatedMsg ) ; < nl > - } < nl > < nl > if ( ! isHiddenPeer ) { < nl > / / Updating dialog < nl > @ @ - 325 , 9 + 314 , 6 @ @ public class ConversationActor extends ModuleActor { < nl > } else { < nl > docs . removeItem ( rid ) ; < nl > } < nl > - if ( delegate ! = null ) { < nl > - delegate . onUpdate ( updatedMsg ) ; < nl > - } < nl > } < nl > < nl > @ Verified < nl > @ @ - 525 , 9 + 511 , 6 @ @ public class ConversationActor extends ModuleActor { < nl > } < nl > messages . removeItems ( rids2 ) ; < nl > docs . removeItems ( rids2 ) ; < nl > - if ( delegate ! = null ) { < nl > - delegate . onDelete ( rids2 ) ; < nl > - } < nl > < nl > inPendingIndex . remove ( rids ) ; < nl > outPendingIndex . remove ( rids ) ; < nl > @ @ - 599 , 9 + 582 , 6 @ @ public class ConversationActor extends ModuleActor { < nl > if ( updatedDocs . size ( ) > 0 ) { < nl > docs . addOrUpdateItems ( updatedDocs ) ; < nl > } < nl > - if ( delegate ! = null ) { < nl > - delegate . onIncoming ( updated ) ; < nl > - } < nl > < nl > inReadStateNew = Math . max ( inReadStateNew , maxReadMessage ) ; < nl > preferences ( ) . putLong ( IN _ READ _ STATE _ NEW _ PREF , inReadStateNew ) ; < nl > @ @ - 819 , 11 + 799 , 4 @ @ public class ConversationActor extends ModuleActor { < nl > public static class ConversationHidden { < nl > < nl > } < nl > - < nl > - public interface ConversationActorDelegate { < nl > - void onIncoming ( ArrayList < Message > msgs ) ; < nl > - void onIncoming ( Message msg ) ; < nl > - void onUpdate ( Message msg ) ; < nl > - void onDelete ( long [ ] rids ) ; < nl > - } < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java < nl > deleted file mode 100644 < nl > index bb8078b . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java < nl > + + + / dev / null < nl > @ @ - 1 , 80 + 0 , 0 @ @ < nl > - package im . actor . core . entity ; < nl > - < nl > - import com . google . j2objc . annotations . Property ; < nl > - < nl > - import java . io . IOException ; < nl > - < nl > - import im . actor . runtime . bser . BserObject ; < nl > - import im . actor . runtime . bser . BserValues ; < nl > - import im . actor . runtime . bser . BserWriter ; < nl > - import im . actor . runtime . storage . KeyValueItem ; < nl > - < nl > - public class DialogDesc extends BserObject implements KeyValueItem { < nl > - < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private Peer peer ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private String title ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private Avatar avatar ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private boolean isUnread ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private int counter ; < nl > - < nl > - public DialogDesc ( Peer peer , String title , Avatar avatar , boolean isUnread , int counter ) { < nl > - this . peer = peer ; < nl > - this . title = title ; < nl > - this . avatar = avatar ; < nl > - this . isUnread = isUnread ; < nl > - this . counter = counter ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public String getTitle ( ) { < nl > - return title ; < nl > - } < nl > - < nl > - public Avatar getAvatar ( ) { < nl > - return avatar ; < nl > - } < nl > - < nl > - public int getCounter ( ) { < nl > - return counter ; < nl > - } < nl > - < nl > - public boolean isUnread ( ) { < nl > - return isUnread ; < nl > - } < nl > - < nl > - @ Override < nl > - public void parse ( BserValues values ) throws IOException { < nl > - peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; < nl > - title = values . getString ( 2 ) ; < nl > - byte [ ] av = values . getBytes ( 3 ) ; < nl > - if ( av ! = null ) { < nl > - avatar = new Avatar ( av ) ; < nl > - } < nl > - counter = values . getInt ( 4 ) ; < nl > - isUnread = values . getBool ( 5 ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void serialize ( BserWriter writer ) throws IOException { < nl > - writer . writeObject ( 1 , peer ) ; < nl > - writer . writeString ( 2 , title ) ; < nl > - if ( avatar ! = null ) { < nl > - writer . writeObject ( 3 , avatar ) ; < nl > - } < nl > - writer . writeInt ( 4 , counter ) ; < nl > - writer . writeBool ( 5 , isUnread ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public long getEngineId ( ) { < nl > - return peer . getUnuqueId ( ) ; < nl > - } < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java < nl > new file mode 100644 < nl > index 0000000 . . d0c5624 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java < nl > @ @ - 0 , 0 + 1 , 69 @ @ < nl > + package im . actor . core . entity ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . bser . BserCreator ; < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . storage . KeyValueItem ; < nl > + < nl > + public class DialogSpec extends BserObject implements KeyValueItem { < nl > + < nl > + public static BserCreator < DialogSpec > CREATOR = new BserCreator < DialogSpec > ( ) { < nl > + @ Override < nl > + public DialogSpec createInstance ( ) { < nl > + return new DialogSpec ( ) ; < nl > + } < nl > + } ; < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private boolean isUnread ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private int counter ; < nl > + < nl > + public DialogSpec ( Peer peer , boolean isUnread , int counter ) { < nl > + this . peer = peer ; < nl > + this . isUnread = isUnread ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + private DialogSpec ( ) { < nl > + < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + < nl > + public boolean isUnread ( ) { < nl > + return isUnread ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; < nl > + counter = values . getInt ( 2 ) ; < nl > + isUnread = values . getBool ( 3 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + writer . writeObject ( 1 , peer ) ; < nl > + writer . writeInt ( 2 , counter ) ; < nl > + writer . writeBool ( 3 , isUnread ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public long getEngineId ( ) { < nl > + return peer . getUnuqueId ( ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > index 28142c9 . . baf3eaf 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . runtime . storage . PreferencesStorage ; < nl > public abstract class AbsModule { < nl > < nl > public static final String STORAGE _ DIALOGS = " dialogs " ; < nl > + public static final String STORAGE _ DIALOGS _ DESC = " dialogs _ desc " ; < nl > public static final String STORAGE _ USERS = " users " ; < nl > public static final String STORAGE _ GROUPS = " groups " ; < nl > public static final String STORAGE _ DOWNLOADS = " downloads " ; < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 30e0d85 . . 88416ee 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . core . api . rpc . ResponseSeq ; < nl > import im . actor . core . api . updates . UpdateChatClear ; < nl > import im . actor . core . api . updates . UpdateChatDelete ; < nl > import im . actor . core . entity . Dialog ; < nl > + import im . actor . core . entity . DialogSpec ; < nl > import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . Peer ; < nl > @ @ - 48 , 6 + 49 , 7 @ @ import im . actor . core . network . RpcInternalException ; < nl > import im . actor . core . viewmodel . Command ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . core . viewmodel . DialogGroupsVM ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > @ @ - 56 , 6 + 58 , 8 @ @ import im . actor . runtime . actors . tools . BounceFilterActor ; < nl > import im . actor . runtime . eventbus . BusSubscriber ; < nl > import im . actor . runtime . eventbus . Event ; < nl > import im . actor . runtime . files . FileSystemReference ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > + import im . actor . runtime . storage . KeyValueEngine ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > import im . actor . runtime . storage . SyncKeyValue ; < nl > < nl > @ @ - 83 , 11 + 87 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > private final SyncKeyValue cursorStorage ; < nl > < nl > + private final MVVMCollection < DialogSpec , DialogSpecVM > dialogDescKeyValue ; < nl > + < nl > private final DialogGroupsVM dialogGroups = new DialogGroupsVM ( ) ; < nl > < nl > public MessagesModule ( final ModuleContext context ) { < nl > super ( context ) ; < nl > < nl > + this . dialogDescKeyValue = Storage . createKeyValue ( STORAGE _ DIALOGS _ DESC , DialogSpecVM . CREATOR , DialogSpec . CREATOR ) ; < nl > this . cursorStorage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ CURSOR ) ) ; < nl > this . dialogs = Storage . createList ( STORAGE _ DIALOGS , Dialog . CREATOR ) ; < nl > } < nl > @ @ - 157 , 6 + 164 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > return dialogGroups ; < nl > } < nl > < nl > + public MVVMCollection < DialogSpec , DialogSpecVM > getDialogDescKeyValue ( ) { < nl > + return dialogDescKeyValue ; < nl > + } < nl > + < nl > public ActorRef getSendMessageActor ( ) { < nl > return sendMessageActor ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > index f0fdf00 . . b881551 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > @ @ - 1 , 20 + 1 , 26 @ @ < nl > package im . actor . core . modules . internal . messages ; < nl > < nl > import java . util . ArrayList ; < nl > - import java . util . HashMap ; < nl > < nl > import im . actor . core . entity . Avatar ; < nl > - import im . actor . core . entity . DialogDesc ; < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > + import im . actor . core . entity . User ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . internal . messages . entity . GroupedStorage ; < nl > import im . actor . core . modules . utils . ModuleActor ; < nl > import im . actor . core . viewmodel . DialogGroup ; < nl > + import im . actor . core . viewmodel . DialogSmall ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > < nl > public class GroupedDialogsActor extends ModuleActor { < nl > < nl > - private PeerGroup groups = new PeerGroup ( " groups " , " Groups " ) ; < nl > - private PeerGroup privates = new PeerGroup ( " private " , " Private " ) ; < nl > + private GroupedStorage storage ; < nl > + private MVVMCollection < DialogSpec , DialogSpecVM > specs ; < nl > < nl > public GroupedDialogsActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 23 , 6 + 29 , 8 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > @ Override < nl > public void preStart ( ) { < nl > super . preStart ( ) ; < nl > + specs = context ( ) . getMessagesModule ( ) . getDialogDescKeyValue ( ) ; < nl > + storage = new GroupedStorage ( ) ; < nl > } < nl > < nl > private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { < nl > @ @ - 31 , 38 + 39 , 82 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > < nl > private void onNewMessage ( Peer peer , long sortDate , int counter ) { < nl > < nl > - PeerGroup peerGroup ; < nl > - if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > - peerGroup = groups ; < nl > - } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > - peerGroup = privates ; < nl > - } else { < nl > - return ; < nl > - } < nl > + / / Updating dialog spec < nl > + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; < nl > + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; < nl > < nl > boolean found = false ; < nl > - for ( PeerDesc d : peerGroup . getPeers ( ) ) { < nl > - if ( d . getPeer ( ) . equals ( peer ) ) { < nl > - d . setCounter ( counter ) ; < nl > + for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > + found = true ; < nl > + break ; < nl > + } < nl > + } < nl > + for ( Peer p : storage . getGroupPeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > found = true ; < nl > + break ; < nl > } < nl > } < nl > < nl > if ( ! found ) { < nl > - peerGroup . getPeers ( ) . add ( new PeerDesc ( peer , counter ) ) ; < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + storage . getPrivatePeers ( ) . add ( peer ) ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + storage . getGroupPeers ( ) . add ( peer ) ; < nl > + } else { < nl > + return ; < nl > + } < nl > } < nl > < nl > - ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; < nl > - ArrayList < DialogDesc > groupDescs = new ArrayList < DialogDesc > ( ) ; < nl > - for ( PeerDesc d : peerGroup . getPeers ( ) ) { < nl > - groupDescs . add ( new DialogDesc ( d . getPeer ( ) , " GRPOUP # " + d . getPeer ( ) . getPeerId ( ) , < nl > - null , false , d . counter ) ) ; < nl > + notifyVM ( ) ; < nl > + saveStorage ( ) ; < nl > + } < nl > + < nl > + private void notifyVM ( ) { < nl > + ArrayListDialogSmall groupSpecs = new ArrayListDialogSmall ( ) ; < nl > + for ( Peer p : storage . getGroupPeers ( ) ) { < nl > + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; < nl > + if ( p . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = getGroup ( p . getPeerId ( ) ) ; < nl > + groupSpecs . add ( new DialogSmall ( p , < nl > + group . getTitle ( ) , group . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = getUser ( p . getPeerId ( ) ) ; < nl > + groupSpecs . add ( new DialogSmall ( p , < nl > + user . getName ( ) , user . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } < nl > + } < nl > + < nl > + ArrayListDialogSmall privateSpecs = new ArrayListDialogSmall ( ) ; < nl > + for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; < nl > + if ( p . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = getGroup ( p . getPeerId ( ) ) ; < nl > + privateSpecs . add ( new DialogSmall ( p , < nl > + group . getTitle ( ) , group . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = getUser ( p . getPeerId ( ) ) ; < nl > + privateSpecs . add ( new DialogSmall ( p , < nl > + user . getName ( ) , user . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } < nl > } < nl > - groups . add ( new DialogGroup ( " Groups " , " group " , groupDescs ) ) ; < nl > + < nl > + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; < nl > + groups . add ( new DialogGroup ( " Groups " , " groups " , groupSpecs ) ) ; < nl > + groups . add ( new DialogGroup ( " Private " , " private " , privateSpecs ) ) ; < nl > < nl > context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; < nl > } < nl > < nl > + private void saveStorage ( ) { < nl > + / / TODO : Implement < nl > + } < nl > + < nl > @ Override < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof PeerInformationChanged ) { < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java < nl > new file mode 100644 < nl > index 0000000 . . 3e7340c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java < nl > @ @ - 0 , 0 + 1 , 57 @ @ < nl > + package im . actor . core . modules . internal . messages . entity ; < nl > + < nl > + import java . io . IOException ; < nl > + import java . util . ArrayList ; < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > + < nl > + public class GroupedStorage extends BserObject { < nl > + < nl > + private ArrayList < Peer > groupPeers = new ArrayList < Peer > ( ) ; < nl > + private ArrayList < Peer > privatePeers = new ArrayList < Peer > ( ) ; < nl > + < nl > + public GroupedStorage ( ) { < nl > + } < nl > + < nl > + public GroupedStorage ( byte [ ] data ) throws IOException { < nl > + super . load ( data ) ; < nl > + } < nl > + < nl > + public ArrayList < Peer > getGroupPeers ( ) { < nl > + return groupPeers ; < nl > + } < nl > + < nl > + public ArrayList < Peer > getPrivatePeers ( ) { < nl > + return privatePeers ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + List < byte [ ] > rawPrivatePeers = values . getRepeatedBytes ( 1 ) ; < nl > + groupPeers . clear ( ) ; < nl > + for ( byte [ ] b : rawPrivatePeers ) { < nl > + groupPeers . add ( Peer . fromBytes ( b ) ) ; < nl > + } < nl > + List < byte [ ] > rawGroupPeers = values . getRepeatedBytes ( 2 ) ; < nl > + for ( byte [ ] b : rawGroupPeers ) { < nl > + privatePeers . add ( Peer . fromBytes ( b ) ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + for ( Peer peer : privatePeers ) { < nl > + writer . writeObject ( 1 , peer ) ; < nl > + } < nl > + for ( Peer peer : groupPeers ) { < nl > + writer . writeObject ( 2 , peer ) ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > index ae47f02 . . 47935a1 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > @ @ - 1 , 16 + 1 , 19 @ @ < nl > package im . actor . core . viewmodel ; < nl > < nl > - import java . util . ArrayList ; < nl > + import com . google . j2objc . annotations . Property ; < nl > < nl > - import im . actor . core . entity . DialogDesc ; < nl > + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; < nl > < nl > public class DialogGroup { < nl > < nl > + @ Property ( " readonly , nonatomic " ) < nl > private String title ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > private String key ; < nl > - private ArrayList < DialogDesc > dialogs ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private ArrayListDialogSmall dialogs ; < nl > < nl > - public DialogGroup ( String title , String key , ArrayList < DialogDesc > dialogs ) { < nl > + public DialogGroup ( String title , String key , ArrayListDialogSmall dialogs ) { < nl > this . title = title ; < nl > this . key = key ; < nl > this . dialogs = dialogs ; < nl > @ @ - 24 , 7 + 27 , 7 @ @ public class DialogGroup { < nl > return key ; < nl > } < nl > < nl > - public ArrayList < DialogDesc > getDialogs ( ) { < nl > + public ArrayListDialogSmall getDialogs ( ) { < nl > return dialogs ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java < nl > new file mode 100644 < nl > index 0000000 . . b77e893 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java < nl > @ @ - 0 , 0 + 1 , 41 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import im . actor . core . entity . Avatar ; < nl > + import im . actor . core . entity . Peer ; < nl > + < nl > + public class DialogSmall { < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final String title ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Avatar avatar ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final int counter ; < nl > + < nl > + public DialogSmall ( Peer peer , String title , Avatar avatar , int counter ) { < nl > + this . peer = peer ; < nl > + this . title = title ; < nl > + this . avatar = avatar ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public Avatar getAvatar ( ) { < nl > + return avatar ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java < nl > new file mode 100644 < nl > index 0000000 . . 52a266d < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java < nl > @ @ - 0 , 0 + 1 , 53 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . viewmodel . generics . BooleanValueModel ; < nl > + import im . actor . core . viewmodel . generics . IntValueModel ; < nl > + import im . actor . runtime . mvvm . BaseValueModel ; < nl > + import im . actor . runtime . mvvm . ValueModelCreator ; < nl > + < nl > + public class DialogSpecVM extends BaseValueModel < DialogSpec > { < nl > + < nl > + public static ValueModelCreator < DialogSpec , DialogSpecVM > CREATOR = new ValueModelCreator < DialogSpec , DialogSpecVM > ( ) { < nl > + @ Override < nl > + public DialogSpecVM create ( DialogSpec baseValue ) { < nl > + return new DialogSpecVM ( baseValue ) ; < nl > + } < nl > + } ; < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private IntValueModel counter ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private BooleanValueModel isUnread ; < nl > + < nl > + public DialogSpecVM ( DialogSpec rawObj ) { < nl > + super ( rawObj ) ; < nl > + < nl > + this . peer = rawObj . getPeer ( ) ; < nl > + this . counter = new IntValueModel ( " dialogs . desc . counter " , rawObj . getCounter ( ) ) ; < nl > + this . isUnread = new BooleanValueModel ( " dialogs . desc . unread " , rawObj . isUnread ( ) ) ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public IntValueModel getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + < nl > + public BooleanValueModel getIsUnread ( ) { < nl > + return isUnread ; < nl > + } < nl > + < nl > + @ Override < nl > + protected void updateValues ( DialogSpec rawObj ) { < nl > + counter . change ( rawObj . getCounter ( ) ) ; < nl > + isUnread . change ( rawObj . isUnread ( ) ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java < nl > new file mode 100644 < nl > index 0000000 . . 9727306 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java < nl > @ @ - 0 , 0 + 1 , 13 @ @ < nl > + package im . actor . core . viewmodel . generics ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . viewmodel . DialogSmall ; < nl > + < nl > + public class ArrayListDialogSmall extends ArrayList < DialogSmall > { < nl > + < nl > + @ Override < nl > + public DialogSmall get ( int index ) { < nl > + return super . get ( index ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > index 32554b4 . . f496742 100644 < nl > - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > @ @ - 6 , 7 + 6 , 7 @ @ import UIKit < nl > < nl > class AADebugController : AAContentTableController { < nl > < nl > - var debugData : AAManagedArrayRows < ACDialogDesc , AACommonCell > ! < nl > + var debugData : AAManagedArrayRows < ACDialogSmall , AACommonCell > ! < nl > < nl > init ( ) { < nl > super . init ( style : . Plain ) < nl > @ @ - 18 , 9 + 18 , 10 @ @ class AADebugController : AAContentTableController { < nl > < nl > override func tableDidLoad ( ) { < nl > section { ( s ) - > ( ) in < nl > - self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogDesc , AACommonCell > ) - > ( ) in < nl > - r . bindData = { ( cell : AACommonCell , data : ACDialogDesc ) - > ( ) in < nl > - cell . setContent ( data . title ) < nl > + self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogSmall , AACommonCell > ) - > ( ) in < nl > + r . bindData = { ( cell : AACommonCell , data : ACDialogSmall ) - > ( ) in < nl > + cell . setContent ( " \ ( data . counter ) - \ ( data . title ) " ) < nl > + cell . style = . Normal < nl > } < nl > } < nl > } < nl > @ @ - 30 , 11 + 31 , 11 @ @ class AADebugController : AAContentTableController { < nl > binder . bind ( ActorSDK . sharedActor ( ) . messenger . getDialogGroupsVM ( ) . getGroupsValueModel ( ) ) { ( value : JavaUtilArrayList ? ) - > ( ) in < nl > < nl > if value ! = nil { < nl > - var items = [ ACDialogDesc ] ( ) < nl > + var items = [ ACDialogSmall ] ( ) < nl > < nl > for i in 0 . . < value ! . size ( ) { < nl > - for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . getDialogs ( ) { < nl > - items . append ( j as ! ACDialogDesc ) < nl > + for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . dialogs { < nl > + items . append ( j as ! ACDialogSmall ) < nl > } < nl > } < nl > self . debugData . data = items

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 index 460f9b0 . . 119768f 100644 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 @ @ - 7 , 26 + 7 , 13 @ @ import android . view . View ; 
 import android . view . ViewGroup ; 
 import android . widget . CheckBox ; 
 
 - import java . util . HashMap ; 
 - 
 import im . actor . allmessages . MainPhoneControllerEx ; 
 - import im . actor . allmessages . MessagesHandler ; 
 - import im . actor . allmessages . OverHandlerActor ; 
 - import im . actor . core . entity . Peer ; 
 - import im . actor . core . modules . internal . messages . ConversationActor ; 
 - import im . actor . runtime . actors . Actor ; 
 - import im . actor . runtime . actors . ActorCreator ; 
 - import im . actor . runtime . actors . ActorRef ; 
 - import im . actor . runtime . actors . ActorSystem ; 
 - import im . actor . runtime . actors . Props ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . ActorSDKApplication ; 
 import im . actor . sdk . ActorStyle ; 
 import im . actor . sdk . BaseActorSDKDelegate ; 
 import im . actor . sdk . controllers . activity . ActorMainActivity ; 
 import im . actor . sdk . controllers . activity . controllers . MainPhoneController ; 
 - import im . actor . sdk . controllers . conversation . messages . BaseJsonHolder ; 
 - import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; 
 import im . actor . sdk . controllers . fragment . group . GroupInfoFragment ; 
 import im . actor . sdk . controllers . fragment . profile . ProfileFragment ; 
 import im . actor . sdk . controllers . fragment . settings . ActorSettingsCategory ; 
 @ @ - 189 , 25 + 176 , 6 @ @ public class Application extends ActorSDKApplication { 
 public MainPhoneController getMainPhoneController ( ActorMainActivity mainActivity ) { 
 return new MainPhoneControllerEx ( mainActivity ) ; 
 } 
 - 
 - HashMap < Peer , MessagesHandler > handlers = new HashMap < > ( ) ; 
 - ActorRef overHandler ; 
 - 
 - @ Override 
 - public ConversationActor . ConversationActorDelegate getConversationActorDelegate ( Peer peer ) { 
 - if ( overHandler = = null ) { 
 - overHandler = ActorSystem . system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 - @ Override 
 - public Actor create ( ) { 
 - return new OverHandlerActor ( ) ; 
 - } 
 - } ) , " actor / overhandler " ) ; 
 - } 
 - if ( ! handlers . containsKey ( peer ) ) { 
 - handlers . put ( peer , new MessagesHandler ( peer , overHandler ) ) ; 
 - } 
 - return handlers . get ( peer ) ; 
 - } 
 } 
 
 public static class ProfileFragmentEx extends ProfileFragment { 
 diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / allmessages / MessagesHandler . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / allmessages / MessagesHandler . java 
 deleted file mode 100644 
 index 719aecd . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / allmessages / MessagesHandler . java 
 + + + / dev / null 
 @ @ - 1 , 43 + 0 , 0 @ @ 
 - package im . actor . allmessages ; 
 - 
 - import java . util . ArrayList ; 
 - 
 - import im . actor . core . entity . Message ; 
 - import im . actor . core . entity . Peer ; 
 - import im . actor . core . modules . internal . messages . ConversationActor ; 
 - import im . actor . runtime . actors . ActorRef ; 
 - 
 - public class MessagesHandler implements ConversationActor . ConversationActorDelegate { 
 - 
 - Peer peer ; 
 - ActorRef handler ; 
 - 
 - 
 - public MessagesHandler ( Peer peer , ActorRef handler ) { 
 - this . peer = peer ; 
 - this . handler = handler ; 
 - } 
 - 
 - @ Override 
 - public void onIncoming ( ArrayList < Message > msgs ) { 
 - handler . send ( new OverHandlerActor . Incoming ( peer , msgs ) ) ; 
 - } 
 - 
 - @ Override 
 - public void onIncoming ( Message msg ) { 
 - handler . send ( new OverHandlerActor . Incoming ( peer , msg ) ) ; 
 - 
 - } 
 - 
 - @ Override 
 - public void onUpdate ( Message msg ) { 
 - handler . send ( new OverHandlerActor . Update ( peer , msg ) ) ; 
 - 
 - } 
 - 
 - @ Override 
 - public void onDelete ( long [ ] rids ) { 
 - handler . send ( new OverHandlerActor . Delete ( peer , rids ) ) ; 
 - 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / allmessages / OverHandlerActor . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / allmessages / OverHandlerActor . java 
 deleted file mode 100644 
 index 5bfc2db . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / allmessages / OverHandlerActor . java 
 + + + / dev / null 
 @ @ - 1 , 152 + 0 , 0 @ @ 
 - package im . actor . allmessages ; 
 - 
 - import java . util . ArrayList ; 
 - 
 - import im . actor . core . entity . Message ; 
 - import im . actor . core . entity . Peer ; 
 - import im . actor . core . entity . PeerType ; 
 - import im . actor . core . entity . Reaction ; 
 - import im . actor . runtime . actors . Actor ; 
 - import im . actor . runtime . storage . ListEngine ; 
 - 
 - import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 - import static im . actor . sdk . util . ActorSDKMessenger . myUid ; 
 - 
 - public class OverHandlerActor extends Actor { 
 - ListEngine < MessageEx > allMessages = messenger ( ) . getCustomConversationEngine ( new Peer ( PeerType . PRIVATE , 1 ) , " favorite " , MessageEx . CREATOR ) ; 
 - 
 - public void onIncoming ( Peer peer , ArrayList < Message > msgs ) { 
 - ArrayList < MessageEx > msgex = new ArrayList < MessageEx > ( ) ; 
 - for ( Message m : msgs ) { 
 - boolean containsMyLike = false ; 
 - for ( Reaction r : m . getReactions ( ) ) { 
 - if ( r . getUids ( ) . contains ( myUid ( ) ) ) { 
 - containsMyLike = true ; 
 - break ; 
 - } 
 - } 
 - if ( containsMyLike ) { 
 - msgex . add ( new MessageEx ( m , peer ) ) ; 
 - } 
 - } 
 - allMessages . addOrUpdateItems ( msgex ) ; 
 - } 
 - 
 - public void onIncoming ( Peer peer , Message msg ) { 
 - boolean containsMyLike = false ; 
 - for ( Reaction r : msg . getReactions ( ) ) { 
 - if ( r . getUids ( ) . contains ( myUid ( ) ) ) { 
 - containsMyLike = true ; 
 - break ; 
 - } 
 - } 
 - if ( containsMyLike ) { 
 - allMessages . addOrUpdateItem ( new MessageEx ( msg , peer ) ) ; 
 - } 
 - } 
 - 
 - public void onUpdate ( Peer peer , Message msg ) { 
 - boolean containsMyReaction = false ; 
 - for ( Reaction r : msg . getReactions ( ) ) { 
 - if ( r . getUids ( ) . contains ( myUid ( ) ) ) { 
 - containsMyReaction = true ; 
 - break ; 
 - } 
 - } 
 - if ( containsMyReaction ) { 
 - allMessages . addOrUpdateItem ( new MessageEx ( msg , peer ) ) ; 
 - } else { 
 - allMessages . removeItem ( msg . getEngineId ( ) ) ; 
 - 
 - } 
 - 
 - } 
 - 
 - public void onDelete ( Peer peer , long [ ] rids ) { 
 - allMessages . removeItems ( rids ) ; 
 - } 
 - 
 - @ Override 
 - public void onReceive ( Object message ) { 
 - if ( message instanceof Incoming ) { 
 - ArrayList < Message > msgs = ( ( Incoming ) message ) . getMsgs ( ) ; 
 - if ( msgs ! = null ) { 
 - onIncoming ( ( ( Incoming ) message ) . getPeer ( ) , msgs ) ; 
 - } else { 
 - onIncoming ( ( ( Incoming ) message ) . getPeer ( ) , ( ( Incoming ) message ) . getMsg ( ) ) ; 
 - } 
 - } else if ( message instanceof Delete ) { 
 - onDelete ( ( ( Delete ) message ) . getPeer ( ) , ( ( Delete ) message ) . getRids ( ) ) ; 
 - } else if ( message instanceof Update ) { 
 - onUpdate ( ( ( Update ) message ) . getPeer ( ) , ( ( Update ) message ) . getMsg ( ) ) ; 
 - } 
 - } 
 - 
 - public static class Incoming { 
 - Peer peer ; 
 - Message msg ; 
 - 
 - ArrayList < Message > msgs ; 
 - 
 - public Incoming ( Peer peer , Message msg ) { 
 - this . peer = peer ; 
 - this . msg = msg ; 
 - } 
 - 
 - public Incoming ( Peer peer , ArrayList < Message > msgs ) { 
 - this . peer = peer ; 
 - this . msgs = msgs ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public ArrayList < Message > getMsgs ( ) { 
 - return msgs ; 
 - } 
 - 
 - public Message getMsg ( ) { 
 - return msg ; 
 - } 
 - } 
 - 
 - public static class Delete { 
 - Peer peer ; 
 - long [ ] rids ; 
 - 
 - public Delete ( Peer peer , long [ ] rids ) { 
 - this . peer = peer ; 
 - this . rids = rids ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public long [ ] getRids ( ) { 
 - return rids ; 
 - } 
 - } 
 - 
 - 
 - public static class Update { 
 - Peer peer ; 
 - Message msg ; 
 - 
 - public Update ( Peer peer , Message msg ) { 
 - this . peer = peer ; 
 - this . msg = msg ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public Message getMsg ( ) { 
 - return msg ; 
 - } 
 - } 
 - 
 - 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 index 32935be . . 7d4c157 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 @ @ - 820 , 10 + 820 , 6 @ @ public class ActorSDK { 
 } 
 } 
 
 - public ConversationActor . ConversationActorDelegate getConversationActorDelegate ( Peer peer ) { 
 - return delegate . getConversationActorDelegate ( peer ) ; 
 - } 
 - 
 / * * 
 * Used for handling delegated ViewHolders 
 * / 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java 
 index 46aba63 . . dfbdf3f 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java 
 @ @ - 159 , 6 + 159 , 4 @ @ public interface ActorSDKDelegate { 
 
 @ Deprecated 
 ActorSettingsCategory [ ] getAfterSettingsCategories ( ) ; 
 - 
 - ConversationActor . ConversationActorDelegate getConversationActorDelegate ( Peer peer ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java 
 index a60f43d . . 23a8ad5 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java 
 @ @ - 254 , 10 + 254 , 4 @ @ public class BaseActorSDKDelegate implements ActorSDKDelegate { 
 return null ; 
 } 
 
 - @ Override 
 - public ConversationActor . ConversationActorDelegate getConversationActorDelegate ( Peer peer ) { 
 - return null ; 
 - } 
 - 
 - 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 index 8302c56 . . e7d019c 100644 
 - - - a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 @ @ - 50 , 7 + 50 , 6 @ @ import im . actor . runtime . generic . mvvm . BindedDisplayList ; 
 import im . actor . runtime . mvvm . Value ; 
 import im . actor . runtime . mvvm . ValueChangedListener ; 
 import im . actor . runtime . storage . ListEngineItem ; 
 - import im . actor . sdk . ActorSDK ; 
 import me . leolin . shortcutbadger . ShortcutBadger ; 
 
 import static im . actor . runtime . actors . ActorSystem . system ; 
 @ @ - 483 , 9 + 482 , 4 @ @ public class AndroidMessenger extends im . actor . core . Messenger { 
 public EventBus getEvents ( ) { 
 return modules . getEvents ( ) ; 
 } 
 - 
 - @ Override 
 - public ConversationActor . ConversationActorDelegate getConversationActorDelegate ( Peer peer ) { 
 - return ActorSDK . sharedActor ( ) . getConversationActorDelegate ( peer ) ; 
 - } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index dc6c47f . . 7e507d0 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 2213 , 12 + 2213 , 4 @ @ public class Messenger { 
 ModuleContext getModuleContext ( ) { 
 return modules ; 
 } 
 - 
 - public ConversationActor . ConversationActorDelegate getConversationActorDelegate ( Peer peer ) { 
 - return null ; 
 - } 
 - 
 - public ListEngine getCustomConversationEngine ( Peer peer , String datatype , BserCreator creator ) { 
 - return modules . getMessagesModule ( ) . getCustomConversationEngine ( peer , datatype , creator ) ; 
 - } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 index de4377a . . 7a5ffce 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 @ @ - 56 , 7 + 56 , 6 @ @ public class ConversationActor extends ModuleActor { 
 private long inReadState ; 
 private long outReadState ; 
 private long outReceiveState ; 
 - ConversationActorDelegate delegate ; 
 
 private boolean isConversationVisible = false ; 
 private boolean isAppVisible = false ; 
 @ @ - 91 , 7 + 90 , 6 @ @ public class ConversationActor extends ModuleActor { 
 if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 isHiddenPeer = getGroup ( peer . getPeerId ( ) ) . isHidden ( ) ; 
 } 
 - delegate = context ( ) . getMessenger ( ) . getConversationActorDelegate ( peer ) ; 
 subscribe ( AppVisibleChanged . EVENT ) ; 
 } 
 
 @ @ - 172 , 9 + 170 , 6 @ @ public class ConversationActor extends ModuleActor { 
 / / Adding message 
 messages . addOrUpdateItems ( updated ) ; 
 docs . addOrUpdateItems ( updatedDocs ) ; 
 - if ( delegate ! = null ) { 
 - delegate . onIncoming ( updated ) ; 
 - } 
 
 for ( Message m : updated ) { 
 if ( m . getSenderId ( ) = = myUid ( ) ) { 
 @ @ - 240 , 9 + 235 , 6 @ @ public class ConversationActor extends ModuleActor { 
 if ( message . getContent ( ) instanceof DocumentContent ) { 
 docs . addOrUpdateItem ( message ) ; 
 } 
 - if ( delegate ! = null ) { 
 - delegate . onIncoming ( message ) ; 
 - } 
 
 / / Updating dialog if on server 
 if ( message . isOnServer ( ) ) { 
 @ @ - 298 , 9 + 290 , 6 @ @ public class ConversationActor extends ModuleActor { 
 } else { 
 docs . removeItem ( rid ) ; 
 } 
 - if ( delegate ! = null ) { 
 - delegate . onUpdate ( updatedMsg ) ; 
 - } 
 
 if ( ! isHiddenPeer ) { 
 / / Updating dialog 
 @ @ - 325 , 9 + 314 , 6 @ @ public class ConversationActor extends ModuleActor { 
 } else { 
 docs . removeItem ( rid ) ; 
 } 
 - if ( delegate ! = null ) { 
 - delegate . onUpdate ( updatedMsg ) ; 
 - } 
 } 
 
 @ Verified 
 @ @ - 525 , 9 + 511 , 6 @ @ public class ConversationActor extends ModuleActor { 
 } 
 messages . removeItems ( rids2 ) ; 
 docs . removeItems ( rids2 ) ; 
 - if ( delegate ! = null ) { 
 - delegate . onDelete ( rids2 ) ; 
 - } 
 
 inPendingIndex . remove ( rids ) ; 
 outPendingIndex . remove ( rids ) ; 
 @ @ - 599 , 9 + 582 , 6 @ @ public class ConversationActor extends ModuleActor { 
 if ( updatedDocs . size ( ) > 0 ) { 
 docs . addOrUpdateItems ( updatedDocs ) ; 
 } 
 - if ( delegate ! = null ) { 
 - delegate . onIncoming ( updated ) ; 
 - } 
 
 inReadStateNew = Math . max ( inReadStateNew , maxReadMessage ) ; 
 preferences ( ) . putLong ( IN _ READ _ STATE _ NEW _ PREF , inReadStateNew ) ; 
 @ @ - 819 , 11 + 799 , 4 @ @ public class ConversationActor extends ModuleActor { 
 public static class ConversationHidden { 
 
 } 
 - 
 - public interface ConversationActorDelegate { 
 - void onIncoming ( ArrayList < Message > msgs ) ; 
 - void onIncoming ( Message msg ) ; 
 - void onUpdate ( Message msg ) ; 
 - void onDelete ( long [ ] rids ) ; 
 - } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java 
 deleted file mode 100644 
 index bb8078b . . 0000000 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java 
 + + + / dev / null 
 @ @ - 1 , 80 + 0 , 0 @ @ 
 - package im . actor . core . entity ; 
 - 
 - import com . google . j2objc . annotations . Property ; 
 - 
 - import java . io . IOException ; 
 - 
 - import im . actor . runtime . bser . BserObject ; 
 - import im . actor . runtime . bser . BserValues ; 
 - import im . actor . runtime . bser . BserWriter ; 
 - import im . actor . runtime . storage . KeyValueItem ; 
 - 
 - public class DialogDesc extends BserObject implements KeyValueItem { 
 - 
 - @ Property ( " readonly , nonatomic " ) 
 - private Peer peer ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private String title ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private Avatar avatar ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private boolean isUnread ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private int counter ; 
 - 
 - public DialogDesc ( Peer peer , String title , Avatar avatar , boolean isUnread , int counter ) { 
 - this . peer = peer ; 
 - this . title = title ; 
 - this . avatar = avatar ; 
 - this . isUnread = isUnread ; 
 - this . counter = counter ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public String getTitle ( ) { 
 - return title ; 
 - } 
 - 
 - public Avatar getAvatar ( ) { 
 - return avatar ; 
 - } 
 - 
 - public int getCounter ( ) { 
 - return counter ; 
 - } 
 - 
 - public boolean isUnread ( ) { 
 - return isUnread ; 
 - } 
 - 
 - @ Override 
 - public void parse ( BserValues values ) throws IOException { 
 - peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; 
 - title = values . getString ( 2 ) ; 
 - byte [ ] av = values . getBytes ( 3 ) ; 
 - if ( av ! = null ) { 
 - avatar = new Avatar ( av ) ; 
 - } 
 - counter = values . getInt ( 4 ) ; 
 - isUnread = values . getBool ( 5 ) ; 
 - } 
 - 
 - @ Override 
 - public void serialize ( BserWriter writer ) throws IOException { 
 - writer . writeObject ( 1 , peer ) ; 
 - writer . writeString ( 2 , title ) ; 
 - if ( avatar ! = null ) { 
 - writer . writeObject ( 3 , avatar ) ; 
 - } 
 - writer . writeInt ( 4 , counter ) ; 
 - writer . writeBool ( 5 , isUnread ) ; 
 - } 
 - 
 - @ Override 
 - public long getEngineId ( ) { 
 - return peer . getUnuqueId ( ) ; 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java 
 new file mode 100644 
 index 0000000 . . d0c5624 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java 
 @ @ - 0 , 0 + 1 , 69 @ @ 
 + package im . actor . core . entity ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . bser . BserCreator ; 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . storage . KeyValueItem ; 
 + 
 + public class DialogSpec extends BserObject implements KeyValueItem { 
 + 
 + public static BserCreator < DialogSpec > CREATOR = new BserCreator < DialogSpec > ( ) { 
 + @ Override 
 + public DialogSpec createInstance ( ) { 
 + return new DialogSpec ( ) ; 
 + } 
 + } ; 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private boolean isUnread ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private int counter ; 
 + 
 + public DialogSpec ( Peer peer , boolean isUnread , int counter ) { 
 + this . peer = peer ; 
 + this . isUnread = isUnread ; 
 + this . counter = counter ; 
 + } 
 + 
 + private DialogSpec ( ) { 
 + 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + 
 + public boolean isUnread ( ) { 
 + return isUnread ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; 
 + counter = values . getInt ( 2 ) ; 
 + isUnread = values . getBool ( 3 ) ; 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + writer . writeObject ( 1 , peer ) ; 
 + writer . writeInt ( 2 , counter ) ; 
 + writer . writeBool ( 3 , isUnread ) ; 
 + } 
 + 
 + @ Override 
 + public long getEngineId ( ) { 
 + return peer . getUnuqueId ( ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 index 28142c9 . . baf3eaf 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . runtime . storage . PreferencesStorage ; 
 public abstract class AbsModule { 
 
 public static final String STORAGE _ DIALOGS = " dialogs " ; 
 + public static final String STORAGE _ DIALOGS _ DESC = " dialogs _ desc " ; 
 public static final String STORAGE _ USERS = " users " ; 
 public static final String STORAGE _ GROUPS = " groups " ; 
 public static final String STORAGE _ DOWNLOADS = " downloads " ; 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 30e0d85 . . 88416ee 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . core . api . rpc . ResponseSeq ; 
 import im . actor . core . api . updates . UpdateChatClear ; 
 import im . actor . core . api . updates . UpdateChatDelete ; 
 import im . actor . core . entity . Dialog ; 
 + import im . actor . core . entity . DialogSpec ; 
 import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . Peer ; 
 @ @ - 48 , 6 + 49 , 7 @ @ import im . actor . core . network . RpcInternalException ; 
 import im . actor . core . viewmodel . Command ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . core . viewmodel . DialogGroupsVM ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 @ @ - 56 , 6 + 58 , 8 @ @ import im . actor . runtime . actors . tools . BounceFilterActor ; 
 import im . actor . runtime . eventbus . BusSubscriber ; 
 import im . actor . runtime . eventbus . Event ; 
 import im . actor . runtime . files . FileSystemReference ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 + import im . actor . runtime . storage . KeyValueEngine ; 
 import im . actor . runtime . storage . ListEngine ; 
 import im . actor . runtime . storage . SyncKeyValue ; 
 
 @ @ - 83 , 11 + 87 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 private final SyncKeyValue cursorStorage ; 
 
 + private final MVVMCollection < DialogSpec , DialogSpecVM > dialogDescKeyValue ; 
 + 
 private final DialogGroupsVM dialogGroups = new DialogGroupsVM ( ) ; 
 
 public MessagesModule ( final ModuleContext context ) { 
 super ( context ) ; 
 
 + this . dialogDescKeyValue = Storage . createKeyValue ( STORAGE _ DIALOGS _ DESC , DialogSpecVM . CREATOR , DialogSpec . CREATOR ) ; 
 this . cursorStorage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ CURSOR ) ) ; 
 this . dialogs = Storage . createList ( STORAGE _ DIALOGS , Dialog . CREATOR ) ; 
 } 
 @ @ - 157 , 6 + 164 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 return dialogGroups ; 
 } 
 
 + public MVVMCollection < DialogSpec , DialogSpecVM > getDialogDescKeyValue ( ) { 
 + return dialogDescKeyValue ; 
 + } 
 + 
 public ActorRef getSendMessageActor ( ) { 
 return sendMessageActor ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 index f0fdf00 . . b881551 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 @ @ - 1 , 20 + 1 , 26 @ @ 
 package im . actor . core . modules . internal . messages ; 
 
 import java . util . ArrayList ; 
 - import java . util . HashMap ; 
 
 import im . actor . core . entity . Avatar ; 
 - import im . actor . core . entity . DialogDesc ; 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 + import im . actor . core . entity . User ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . internal . messages . entity . GroupedStorage ; 
 import im . actor . core . modules . utils . ModuleActor ; 
 import im . actor . core . viewmodel . DialogGroup ; 
 + import im . actor . core . viewmodel . DialogSmall ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 
 public class GroupedDialogsActor extends ModuleActor { 
 
 - private PeerGroup groups = new PeerGroup ( " groups " , " Groups " ) ; 
 - private PeerGroup privates = new PeerGroup ( " private " , " Private " ) ; 
 + private GroupedStorage storage ; 
 + private MVVMCollection < DialogSpec , DialogSpecVM > specs ; 
 
 public GroupedDialogsActor ( ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 23 , 6 + 29 , 8 @ @ public class GroupedDialogsActor extends ModuleActor { 
 @ Override 
 public void preStart ( ) { 
 super . preStart ( ) ; 
 + specs = context ( ) . getMessagesModule ( ) . getDialogDescKeyValue ( ) ; 
 + storage = new GroupedStorage ( ) ; 
 } 
 
 private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { 
 @ @ - 31 , 38 + 39 , 82 @ @ public class GroupedDialogsActor extends ModuleActor { 
 
 private void onNewMessage ( Peer peer , long sortDate , int counter ) { 
 
 - PeerGroup peerGroup ; 
 - if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 - peerGroup = groups ; 
 - } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 - peerGroup = privates ; 
 - } else { 
 - return ; 
 - } 
 + / / Updating dialog spec 
 + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; 
 + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; 
 
 boolean found = false ; 
 - for ( PeerDesc d : peerGroup . getPeers ( ) ) { 
 - if ( d . getPeer ( ) . equals ( peer ) ) { 
 - d . setCounter ( counter ) ; 
 + for ( Peer p : storage . getPrivatePeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + for ( Peer p : storage . getGroupPeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 found = true ; 
 + break ; 
 } 
 } 
 
 if ( ! found ) { 
 - peerGroup . getPeers ( ) . add ( new PeerDesc ( peer , counter ) ) ; 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + storage . getPrivatePeers ( ) . add ( peer ) ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + storage . getGroupPeers ( ) . add ( peer ) ; 
 + } else { 
 + return ; 
 + } 
 } 
 
 - ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; 
 - ArrayList < DialogDesc > groupDescs = new ArrayList < DialogDesc > ( ) ; 
 - for ( PeerDesc d : peerGroup . getPeers ( ) ) { 
 - groupDescs . add ( new DialogDesc ( d . getPeer ( ) , " GRPOUP # " + d . getPeer ( ) . getPeerId ( ) , 
 - null , false , d . counter ) ) ; 
 + notifyVM ( ) ; 
 + saveStorage ( ) ; 
 + } 
 + 
 + private void notifyVM ( ) { 
 + ArrayListDialogSmall groupSpecs = new ArrayListDialogSmall ( ) ; 
 + for ( Peer p : storage . getGroupPeers ( ) ) { 
 + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; 
 + if ( p . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = getGroup ( p . getPeerId ( ) ) ; 
 + groupSpecs . add ( new DialogSmall ( p , 
 + group . getTitle ( ) , group . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = getUser ( p . getPeerId ( ) ) ; 
 + groupSpecs . add ( new DialogSmall ( p , 
 + user . getName ( ) , user . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } 
 + } 
 + 
 + ArrayListDialogSmall privateSpecs = new ArrayListDialogSmall ( ) ; 
 + for ( Peer p : storage . getPrivatePeers ( ) ) { 
 + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; 
 + if ( p . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = getGroup ( p . getPeerId ( ) ) ; 
 + privateSpecs . add ( new DialogSmall ( p , 
 + group . getTitle ( ) , group . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = getUser ( p . getPeerId ( ) ) ; 
 + privateSpecs . add ( new DialogSmall ( p , 
 + user . getName ( ) , user . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } 
 } 
 - groups . add ( new DialogGroup ( " Groups " , " group " , groupDescs ) ) ; 
 + 
 + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; 
 + groups . add ( new DialogGroup ( " Groups " , " groups " , groupSpecs ) ) ; 
 + groups . add ( new DialogGroup ( " Private " , " private " , privateSpecs ) ) ; 
 
 context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; 
 } 
 
 + private void saveStorage ( ) { 
 + / / TODO : Implement 
 + } 
 + 
 @ Override 
 public void onReceive ( Object message ) { 
 if ( message instanceof PeerInformationChanged ) { 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java 
 new file mode 100644 
 index 0000000 . . 3e7340c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package im . actor . core . modules . internal . messages . entity ; 
 + 
 + import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 + 
 + public class GroupedStorage extends BserObject { 
 + 
 + private ArrayList < Peer > groupPeers = new ArrayList < Peer > ( ) ; 
 + private ArrayList < Peer > privatePeers = new ArrayList < Peer > ( ) ; 
 + 
 + public GroupedStorage ( ) { 
 + } 
 + 
 + public GroupedStorage ( byte [ ] data ) throws IOException { 
 + super . load ( data ) ; 
 + } 
 + 
 + public ArrayList < Peer > getGroupPeers ( ) { 
 + return groupPeers ; 
 + } 
 + 
 + public ArrayList < Peer > getPrivatePeers ( ) { 
 + return privatePeers ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + List < byte [ ] > rawPrivatePeers = values . getRepeatedBytes ( 1 ) ; 
 + groupPeers . clear ( ) ; 
 + for ( byte [ ] b : rawPrivatePeers ) { 
 + groupPeers . add ( Peer . fromBytes ( b ) ) ; 
 + } 
 + List < byte [ ] > rawGroupPeers = values . getRepeatedBytes ( 2 ) ; 
 + for ( byte [ ] b : rawGroupPeers ) { 
 + privatePeers . add ( Peer . fromBytes ( b ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + for ( Peer peer : privatePeers ) { 
 + writer . writeObject ( 1 , peer ) ; 
 + } 
 + for ( Peer peer : groupPeers ) { 
 + writer . writeObject ( 2 , peer ) ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 index ae47f02 . . 47935a1 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 @ @ - 1 , 16 + 1 , 19 @ @ 
 package im . actor . core . viewmodel ; 
 
 - import java . util . ArrayList ; 
 + import com . google . j2objc . annotations . Property ; 
 
 - import im . actor . core . entity . DialogDesc ; 
 + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; 
 
 public class DialogGroup { 
 
 + @ Property ( " readonly , nonatomic " ) 
 private String title ; 
 + @ Property ( " readonly , nonatomic " ) 
 private String key ; 
 - private ArrayList < DialogDesc > dialogs ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private ArrayListDialogSmall dialogs ; 
 
 - public DialogGroup ( String title , String key , ArrayList < DialogDesc > dialogs ) { 
 + public DialogGroup ( String title , String key , ArrayListDialogSmall dialogs ) { 
 this . title = title ; 
 this . key = key ; 
 this . dialogs = dialogs ; 
 @ @ - 24 , 7 + 27 , 7 @ @ public class DialogGroup { 
 return key ; 
 } 
 
 - public ArrayList < DialogDesc > getDialogs ( ) { 
 + public ArrayListDialogSmall getDialogs ( ) { 
 return dialogs ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java 
 new file mode 100644 
 index 0000000 . . b77e893 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import im . actor . core . entity . Avatar ; 
 + import im . actor . core . entity . Peer ; 
 + 
 + public class DialogSmall { 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final String title ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Avatar avatar ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final int counter ; 
 + 
 + public DialogSmall ( Peer peer , String title , Avatar avatar , int counter ) { 
 + this . peer = peer ; 
 + this . title = title ; 
 + this . avatar = avatar ; 
 + this . counter = counter ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public Avatar getAvatar ( ) { 
 + return avatar ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java 
 new file mode 100644 
 index 0000000 . . 52a266d 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . viewmodel . generics . BooleanValueModel ; 
 + import im . actor . core . viewmodel . generics . IntValueModel ; 
 + import im . actor . runtime . mvvm . BaseValueModel ; 
 + import im . actor . runtime . mvvm . ValueModelCreator ; 
 + 
 + public class DialogSpecVM extends BaseValueModel < DialogSpec > { 
 + 
 + public static ValueModelCreator < DialogSpec , DialogSpecVM > CREATOR = new ValueModelCreator < DialogSpec , DialogSpecVM > ( ) { 
 + @ Override 
 + public DialogSpecVM create ( DialogSpec baseValue ) { 
 + return new DialogSpecVM ( baseValue ) ; 
 + } 
 + } ; 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private IntValueModel counter ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private BooleanValueModel isUnread ; 
 + 
 + public DialogSpecVM ( DialogSpec rawObj ) { 
 + super ( rawObj ) ; 
 + 
 + this . peer = rawObj . getPeer ( ) ; 
 + this . counter = new IntValueModel ( " dialogs . desc . counter " , rawObj . getCounter ( ) ) ; 
 + this . isUnread = new BooleanValueModel ( " dialogs . desc . unread " , rawObj . isUnread ( ) ) ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public IntValueModel getCounter ( ) { 
 + return counter ; 
 + } 
 + 
 + public BooleanValueModel getIsUnread ( ) { 
 + return isUnread ; 
 + } 
 + 
 + @ Override 
 + protected void updateValues ( DialogSpec rawObj ) { 
 + counter . change ( rawObj . getCounter ( ) ) ; 
 + isUnread . change ( rawObj . isUnread ( ) ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java 
 new file mode 100644 
 index 0000000 . . 9727306 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package im . actor . core . viewmodel . generics ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . viewmodel . DialogSmall ; 
 + 
 + public class ArrayListDialogSmall extends ArrayList < DialogSmall > { 
 + 
 + @ Override 
 + public DialogSmall get ( int index ) { 
 + return super . get ( index ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 index 32554b4 . . f496742 100644 
 - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 @ @ - 6 , 7 + 6 , 7 @ @ import UIKit 
 
 class AADebugController : AAContentTableController { 
 
 - var debugData : AAManagedArrayRows < ACDialogDesc , AACommonCell > ! 
 + var debugData : AAManagedArrayRows < ACDialogSmall , AACommonCell > ! 
 
 init ( ) { 
 super . init ( style : . Plain ) 
 @ @ - 18 , 9 + 18 , 10 @ @ class AADebugController : AAContentTableController { 
 
 override func tableDidLoad ( ) { 
 section { ( s ) - > ( ) in 
 - self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogDesc , AACommonCell > ) - > ( ) in 
 - r . bindData = { ( cell : AACommonCell , data : ACDialogDesc ) - > ( ) in 
 - cell . setContent ( data . title ) 
 + self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogSmall , AACommonCell > ) - > ( ) in 
 + r . bindData = { ( cell : AACommonCell , data : ACDialogSmall ) - > ( ) in 
 + cell . setContent ( " \ ( data . counter ) - \ ( data . title ) " ) 
 + cell . style = . Normal 
 } 
 } 
 } 
 @ @ - 30 , 11 + 31 , 11 @ @ class AADebugController : AAContentTableController { 
 binder . bind ( ActorSDK . sharedActor ( ) . messenger . getDialogGroupsVM ( ) . getGroupsValueModel ( ) ) { ( value : JavaUtilArrayList ? ) - > ( ) in 
 
 if value ! = nil { 
 - var items = [ ACDialogDesc ] ( ) 
 + var items = [ ACDialogSmall ] ( ) 
 
 for i in 0 . . < value ! . size ( ) { 
 - for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . getDialogs ( ) { 
 - items . append ( j as ! ACDialogDesc ) 
 + for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . dialogs { 
 + items . append ( j as ! ACDialogSmall ) 
 } 
 } 
 self . debugData . data = items
