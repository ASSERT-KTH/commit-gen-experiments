BLEU SCORE: 0.12549310621989482

TEST MSG: wip ( core ) : More clever Master Call Actor
GENERATED MSG: feat ( webrtc ) : Implemented Call Actor

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > index 38dabdb . . c692911 100644 < nl > - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > @ @ - 10935 , 6 + 10935 , 41 @ @ < nl > < ref role = " NX6Kv " node = " 3Tolai5NVBR " resolve = " device " / > < nl > < / node > < nl > < / node > < nl > + < node concept = " 2m5naR " id = " 3xEfKBqKbxy " role = " 2m5mJr " > < nl > + < property role = " TrG5h " value = " NeedDisconnect " / > < nl > + < property role = " tsOgz " value = " false " / > < nl > + < property role = " w4tQU " value = " true " / > < nl > + < ref role = " w4 $ XZ " node = " 3Tolai5NMKi " resolve = " WebRTCSignaling " / > < nl > + < node concept = " 2m7Kf5 " id = " 3xEfKBqKb $ k " role = " 2m0hLx " > < nl > + < property role = " 2m7DUN " value = " 1 " / > < nl > + < property role = " TrG5h " value = " uid " / > < nl > + < node concept = " wb0Ql " id = " 3xEfKBqKb $ o " role = " 2m7DVh " > < nl > + < ref role = " wb18D " node = " 5qm50Y0e3uz " resolve = " userId " / > < nl > + < / node > < nl > + < / node > < nl > + < node concept = " 2m7Kf5 " id = " 3xEfKBqKb $ r " role = " 2m0hLx " > < nl > + < property role = " 2m7DUN " value = " 2 " / > < nl > + < property role = " TrG5h " value = " device " / > < nl > + < node concept = " wb0Ql " id = " 3xEfKBqKb $ x " role = " 2m7DVh " > < nl > + < ref role = " wb18D " node = " 2vxDjotnUB8 " resolve = " randomId " / > < nl > + < / node > < nl > + < / node > < nl > + < node concept = " Nu42z " id = " 3xEfKBqKb $ i " role = " 3BtCOu " > < nl > + < property role = " Nu42W " value = " 14 " / > < nl > + < / node > < nl > + < node concept = " NXeRC " id = " 3xEfKBqKb $ $ " role = " NXodf " > < nl > + < property role = " NXePf " value = " Notification about requirement about required disconnection from peer " / > < nl > + < / node > < nl > + < node concept = " NX1gA " id = " 3xEfKBqKb $ D " role = " NXodf " > < nl > + < property role = " NX6R2 " value = " User ' s Id " / > < nl > + < property role = " 1GSvIU " value = " full " / > < nl > + < ref role = " NX6Kv " node = " 3xEfKBqKb $ k " resolve = " uid " / > < nl > + < / node > < nl > + < node concept = " NX1gA " id = " 3xEfKBqKb $ L " role = " NXodf " > < nl > + < property role = " NX6R2 " value = " Device Id " / > < nl > + < ref role = " NX6Kv " node = " 3xEfKBqKb $ r " resolve = " device " / > < nl > + < / node > < nl > + < / node > < nl > < node concept = " 2m5naR " id = " 3Tolai5ObtG " role = " 2m5mJr " > < nl > < property role = " TrG5h " value = " SwitchMaster " / > < nl > < property role = " tsOgz " value = " false " / > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > index c5853da . . 9a8b9e4 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > @ @ - 20 , 6 + 20 , 8 @ @ public class AACallViewController : AAViewController { < nl > public let speakerButton = UIButton ( ) < nl > public let videoButton = UIButton ( ) < nl > < nl > + public let debugLabel = UILabel ( ) < nl > + < nl > var isScheduledDispose = false < nl > < nl > public init ( callId : jlong ) { < nl > @ @ - 73 , 6 + 75 , 10 @ @ public class AACallViewController : AAViewController { < nl > callState . textAlignment = NSTextAlignment . Center < nl > callState . font = UIFont . thinSystemFontOfSize ( 32 ) < nl > < nl > + debugLabel . textColor = ActorSDK . sharedActor ( ) . style . vcTextColor < nl > + debugLabel . lineBreakMode = . ByWordWrapping < nl > + debugLabel . numberOfLines = 0 < nl > + < nl > self . view . backgroundColor = UIColor . whiteColor ( ) < nl > < nl > self . view . addSubview ( senderAvatar ) < nl > @ @ - 83 , 6 + 89 , 7 @ @ public class AACallViewController : AAViewController { < nl > self . view . addSubview ( muteButton ) < nl > self . view . addSubview ( speakerButton ) < nl > self . view . addSubview ( videoButton ) < nl > + self . view . addSubview ( debugLabel ) < nl > } < nl > < nl > public override func viewWillLayoutSubviews ( ) { < nl > @ @ - 91 , 6 + 98 , 7 @ @ public class AACallViewController : AAViewController { < nl > senderAvatar . frame = CGRectMake ( ( self . view . width - 90 ) / 2 , 100 , 90 , 90 ) < nl > peerTitle . frame = CGRectMake ( 60 , senderAvatar . bottom + 20 , view . width - 120 , 34 ) < nl > callState . frame = CGRectMake ( 60 , peerTitle . bottom + 20 , view . width - 120 , 34 ) < nl > + debugLabel . frame = view . bounds < nl > < nl > layoutButtons ( ) < nl > } < nl > @ @ - 172 , 6 + 180 , 33 @ @ public class AACallViewController : AAViewController { < nl > } < nl > } < nl > < nl > + binder . bind ( call . members ) { ( value : JavaUtilArrayList ! ) - > ( ) in < nl > + var debugStr = " " < nl > + for i in 0 . . < value . size ( ) { < nl > + let member = value . getWithInt ( i ) as ! ACCallMember < nl > + debugStr + = " \ ( member . uid ) " < nl > + switch ( member . state . toNSEnum ( ) ) { < nl > + case ACCallMemberState _ Enum . ENDED : < nl > + debugStr + = " - Ended " < nl > + break < nl > + case ACCallMemberState _ Enum . CALLING : < nl > + debugStr + = " - Calling " < nl > + break < nl > + case ACCallMemberState _ Enum . IN _ PROGRESS : < nl > + debugStr + = " - In Progress " < nl > + break < nl > + case ACCallMemberState _ Enum . CALLING _ REACHED : < nl > + debugStr + = " - Reached " < nl > + break < nl > + default : < nl > + debugStr + = " - Unknown " < nl > + break < nl > + } < nl > + debugStr + = " \ n " < nl > + } < nl > + self . debugLabel . text = debugStr < nl > + } < nl > + < nl > / / < nl > / / Binding Title < nl > / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index 9d9a3da . . 5895822 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 185 , 7 + 185 , 7 @ @ public class CallActor extends EventBusActor { < nl > peerConnections . clear ( ) ; < nl > } < nl > < nl > - public final void doEndCall ( ) { < nl > + public void doEndCall ( ) { < nl > shutdown ( ) ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > index 1243237 . . 99df2e6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 293 , 10 + 293 , 10 @ @ public class CallManagerActor extends ModuleActor { < nl > } else if ( message instanceof OnIncomingCallHandled ) { < nl > OnIncomingCallHandled incomingCallHandled = ( OnIncomingCallHandled ) message ; < nl > onIncomingCallHandled ( incomingCallHandled . getCallId ( ) ) ; < nl > - } else if ( message instanceof AnswerCall ) { < nl > - doAnswerCall ( ( ( AnswerCall ) message ) . getCallId ( ) ) ; < nl > - } else if ( message instanceof EndCall ) { < nl > - doEndCall ( ( ( EndCall ) message ) . getCallId ( ) ) ; < nl > + } else if ( message instanceof DoAnswerCall ) { < nl > + doAnswerCall ( ( ( DoAnswerCall ) message ) . getCallId ( ) ) ; < nl > + } else if ( message instanceof DoEndCall ) { < nl > + doEndCall ( ( ( DoEndCall ) message ) . getCallId ( ) ) ; < nl > } else if ( message instanceof OnCallEnded ) { < nl > onCallEnded ( ( ( OnCallEnded ) message ) . getCallId ( ) ) ; < nl > } else if ( message instanceof DoCall ) { < nl > @ @ - 358 , 11 + 358 , 11 @ @ public class CallManagerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class AnswerCall { < nl > + public static class DoAnswerCall { < nl > < nl > private long callId ; < nl > < nl > - public AnswerCall ( long callId ) { < nl > + public DoAnswerCall ( long callId ) { < nl > this . callId = callId ; < nl > } < nl > < nl > @ @ - 371 , 10 + 371 , 10 @ @ public class CallManagerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class EndCall { < nl > + public static class DoEndCall { < nl > private long callId ; < nl > < nl > - public EndCall ( long callId ) { < nl > + public DoEndCall ( long callId ) { < nl > this . callId = callId ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > index 90509d1 . . df3fc10 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > @ @ - 1 , 26 + 1 , 31 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > import java . util . ArrayList ; < nl > - import java . util . HashMap ; < nl > < nl > import im . actor . core . api . ApiAnswerCall ; < nl > import im . actor . core . api . ApiCallMember ; < nl > - import im . actor . core . api . ApiCallMemberStateHolder ; < nl > import im . actor . core . api . ApiMembersChanged ; < nl > import im . actor . core . api . ApiNeedOffer ; < nl > + import im . actor . core . api . ApiRejectCall ; < nl > import im . actor . core . api . ApiSwitchMaster ; < nl > import im . actor . core . api . ApiWebRTCSignaling ; < nl > import im . actor . core . api . rpc . RequestDoCall ; < nl > import im . actor . core . api . rpc . ResponseDoCall ; < nl > + import im . actor . core . entity . GroupMember ; < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerType ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . calls . entity . CallMember ; < nl > import im . actor . core . modules . calls . entity . CallMemberState ; < nl > + import im . actor . core . modules . calls . entity . MasterCallMember ; < nl > import im . actor . core . viewmodel . CallState ; < nl > import im . actor . core . viewmodel . CallVM ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . collections . ManagedList ; < nl > import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . function . Function ; < nl > + import im . actor . runtime . function . Predicate ; < nl > import im . actor . runtime . webrtc . WebRTCMediaStream ; < nl > < nl > public class CallMasterActor extends CallActor { < nl > @ @ - 30 , 10 + 35 , 10 @ @ public class CallMasterActor extends CallActor { < nl > private final Peer peer ; < nl > private ActorRef callManager ; < nl > private CommandCallback < Long > callback ; < nl > - private ArrayList < ConnectedHolder > connectedDevices = new ArrayList < > ( ) ; < nl > - private CallVM callVM ; < nl > private long callId ; < nl > - private ArrayList < CallMember > members = new ArrayList < > ( ) ; < nl > + private CallVM callVM ; < nl > + < nl > + private ManagedList < MasterCallMember > members ; < nl > private boolean isAnswered = false ; < nl > < nl > public CallMasterActor ( Peer peer , ModuleContext context , CommandCallback < Long > callback ) { < nl > @ @ - 54 , 6 + 59 , 24 @ @ public class CallMasterActor extends CallActor { < nl > api ( new RequestDoCall ( buidOutPeer ( peer ) , getBusId ( ) ) ) . then ( new Consumer < ResponseDoCall > ( ) { < nl > @ Override < nl > public void apply ( ResponseDoCall responseDoCall ) { < nl > + < nl > + / / TODO : Possible race conditions when members changed during call initiation < nl > + / / Need to return explicit callers in response < nl > + if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + members = ManagedList . of ( getGroup ( peer . getPeerId ( ) ) . getMembers ( ) ) < nl > + . filter ( new Predicate < GroupMember > ( ) { < nl > + @ Override < nl > + public boolean apply ( GroupMember groupMember ) { < nl > + return groupMember . getUid ( ) ! = myUid ( ) ; < nl > + } < nl > + } ) < nl > + . map ( MasterCallMember . FROM _ MEMBER ) ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + members = ManagedList . of ( new MasterCallMember ( peer . getPeerId ( ) , CallMemberState . RINGING ) ) ; < nl > + } else { < nl > + / / Halt ? < nl > + } < nl > + < nl > callId = responseDoCall . getCallId ( ) ; < nl > callVM = spanNewOutgoingVM ( responseDoCall . getCallId ( ) , peer ) ; < nl > callVM . getIsMuted ( ) . change ( isMuted ( ) ) ; < nl > @ @ - 75 , 61 + 98 , 72 @ @ public class CallMasterActor extends CallActor { < nl > public void onDeviceConnected ( int uid , long deviceId ) { < nl > < nl > / / < nl > - / / For every newly connected device notify who is king < nl > - / / in this call < nl > + / / Searching for a member < nl > / / < nl > - sendSignalingMessage ( uid , deviceId , new ApiSwitchMaster ( ) ) ; < nl > + MasterCallMember member = members < nl > + . filter ( MasterCallMember . PREDICATE ( uid ) ) < nl > + . firstOrNull ( ) ; < nl > + if ( member = = null ) { < nl > + return ; < nl > + } < nl > < nl > / / < nl > - / / Pending Members < nl > + / / Adding registered device < nl > / / < nl > - boolean found = false ; < nl > - for ( CallMember m : members ) { < nl > - if ( m . getUid ( ) = = uid ) { < nl > - m . setState ( CallMemberState . CONNECTING ) ; < nl > - found = true ; < nl > - break ; < nl > - } < nl > - } < nl > - if ( ! found ) { < nl > - members . add ( new CallMember ( uid , CallMemberState . CONNECTING ) ) ; < nl > + member . getDeviceId ( ) . add ( deviceId ) ; < nl > + < nl > + / / < nl > + / / Update member state if necessary < nl > + / / < nl > + if ( member . getState ( ) = = CallMemberState . RINGING ) { < nl > + member . setState ( CallMemberState . CONNECTING ) ; < nl > } < nl > < nl > / / < nl > - / / Notify everyone about new member < nl > + / / For every newly connected device notify who is king < nl > + / / in this call < nl > / / < nl > - sendSignalingMessage ( createMembersChanged ( ) ) ; < nl > + sendSignalingMessage ( uid , deviceId , new ApiSwitchMaster ( ) ) ; < nl > + < nl > + / / < nl > + / / Update Members State < nl > + / / < nl > + updateMembers ( ) ; < nl > } < nl > < nl > @ Override < nl > - public void onDeviceDisconnected ( int uid , long deviceId ) { < nl > + public void onDeviceDisconnected ( final int uid , final long deviceId ) { < nl > < nl > / / < nl > - / / Removing connected device . If it is was the last - stop call . < nl > + / / Searching for connected device < nl > / / < nl > - ConnectedHolder connectedHolder = new ConnectedHolder ( uid , deviceId ) ; < nl > - if ( connectedDevices . contains ( connectedHolder ) ) { < nl > - connectedDevices . remove ( connectedHolder ) ; < nl > - if ( connectedDevices . size ( ) = = 0 ) { < nl > - shutdown ( ) ; < nl > - return ; < nl > - } < nl > + MasterCallMember member = members < nl > + . filter ( MasterCallMember . PREDICATE ( uid , deviceId ) ) < nl > + . firstOrNull ( ) ; < nl > + if ( member = = null ) { < nl > + return ; < nl > + } < nl > < nl > - / / < nl > - / / Removing active member < nl > - / / < nl > - for ( CallMember m : members ) { < nl > - if ( m . getUid ( ) = = uid ) { < nl > - members . remove ( m ) ; < nl > - break ; < nl > - } < nl > - } < nl > + / / < nl > + / / Remove device and if necessary remove from group < nl > + / / < nl > + member . getDeviceId ( ) . remove ( deviceId ) ; < nl > + if ( member . getDeviceId ( ) . size ( ) = = 0 ) { < nl > + members . remove ( member ) ; < nl > + } < nl > < nl > - / / < nl > - / / Notify everyone about members changed < nl > - / / < nl > - sendSignalingMessage ( createMembersChanged ( ) ) ; < nl > + / / < nl > + / / If there are no members left - stop call < nl > + / / < nl > + if ( members . isEmpty ( ) ) { < nl > + shutdown ( ) ; < nl > + return ; < nl > } < nl > + < nl > + / / < nl > + / / Update Members State < nl > + / / < nl > + updateMembers ( ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 138 , 44 + 172 , 94 @ @ public class CallMasterActor extends CallActor { < nl > / / < nl > / / Changing State to IN _ PROGRESS once first stream appear < nl > / / < nl > - if ( callVM . getState ( ) . get ( ) = = CallState . CALLING _ OUTGOING ) { < nl > - callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; < nl > - } < nl > - < nl > if ( ! isAnswered ) { < nl > isAnswered = true ; < nl > - callManager . send ( new CallManagerActor . AnswerCall ( callId ) ) ; < nl > + callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; < nl > + callManager . send ( new CallManagerActor . OnCallAnswered ( callId ) ) ; < nl > } < nl > } < nl > < nl > - @ Override < nl > - public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { < nl > - if ( signaling instanceof ApiAnswerCall ) { < nl > - ConnectedHolder connectedHolder = new ConnectedHolder ( fromUid , fromDeviceId ) ; < nl > - if ( connectedDevices . contains ( connectedHolder ) ) { < nl > - return ; < nl > - } < nl > - getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; < nl > - for ( ConnectedHolder c : connectedDevices ) { < nl > - sendSignalingMessage ( c . uid , c . deviceId , new ApiNeedOffer ( fromUid , fromDeviceId ) ) ; < nl > - } < nl > - connectedDevices . add ( connectedHolder ) ; < nl > + public void onCallAnswered ( int uid , long deviceId ) { < nl > < nl > - for ( CallMember m : members ) { < nl > - if ( m . getUid ( ) = = fromUid ) { < nl > - m . setState ( CallMemberState . CONNECTED ) ; < nl > - break ; < nl > - } < nl > + / / < nl > + / / Searching for suitable Call Member < nl > + / / < nl > + MasterCallMember callMember = members < nl > + . filter ( MasterCallMember . PREDICATE ( uid ) ) < nl > + . firstOrNull ( ) ; < nl > + if ( callMember = = null ) { < nl > + return ; < nl > + } < nl > + < nl > + / / < nl > + / / If already connected : ignore message < nl > + / / < nl > + / / if ( callMember . getDeviceId ( ) . contains ( deviceId ) ) { < nl > + / / return ; < nl > + / / } < nl > + < nl > + / / < nl > + / / Establishing connection < nl > + / / < nl > + getPeer ( uid , deviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; < nl > + for ( MasterCallMember member : members ) { < nl > + for ( long devId : member . getDeviceId ( ) ) { < nl > + sendSignalingMessage ( member . getUid ( ) , devId , new ApiNeedOffer ( uid , deviceId ) ) ; < nl > } < nl > - sendSignalingMessage ( createMembersChanged ( ) ) ; < nl > - } else { < nl > - super . onSignalingMessage ( fromUid , fromDeviceId , signaling ) ; < nl > } < nl > + < nl > + / / < nl > + / / Adding new device < nl > + / / < nl > + callMember . getDeviceId ( ) . add ( deviceId ) ; < nl > + < nl > + / / < nl > + / / Update Member State < nl > + / / < nl > + callMember . setState ( CallMemberState . CONNECTED ) ; < nl > + < nl > + / / < nl > + / / Update Members State < nl > + / / < nl > + updateMembers ( ) ; < nl > + } < nl > + < nl > + public void onCallRejected ( int uid , long deviceId ) { < nl > + < nl > + / / < nl > + / / Searching for suitable Call Member < nl > + / / < nl > + MasterCallMember callMember = members < nl > + . filter ( MasterCallMember . PREDICATE ( uid , deviceId ) ) < nl > + . firstOrNull ( ) ; < nl > + if ( callMember = = null ) { < nl > + return ; < nl > + } < nl > + < nl > + callMember . getDeviceId ( ) . remove ( deviceId ) ; < nl > + < nl > + if ( callMember . getDeviceId ( ) . size ( ) = = 0 ) { < nl > + members . remove ( callMember ) ; < nl > + } < nl > + < nl > + if ( members . isEmpty ( ) ) { < nl > + shutdown ( ) ; < nl > + return ; < nl > + } < nl > + < nl > + / / < nl > + / / Update Members State < nl > + / / < nl > + updateMembers ( ) ; < nl > } < nl > < nl > @ Override < nl > public void onMute ( ) { < nl > super . onMute ( ) ; < nl > + < nl > + / / < nl > + / / Update CallVM state . Actual Muting is performed in super class . < nl > + / / < nl > if ( callVM ! = null ) { < nl > callVM . getIsMuted ( ) . change ( true ) ; < nl > } < nl > @ @ - 184 , 24 + 268 , 64 @ @ public class CallMasterActor extends CallActor { < nl > @ Override < nl > public void onUnmute ( ) { < nl > super . onUnmute ( ) ; < nl > + < nl > + / / < nl > + / / Update CallVM state . Actual Muting is performed in super class . < nl > + / / < nl > if ( callVM ! = null ) { < nl > callVM . getIsMuted ( ) . change ( false ) ; < nl > } < nl > } < nl > < nl > @ Override < nl > - public void onBusDisposed ( ) { < nl > - super . onBusDisposed ( ) ; < nl > + public void onBusStopped ( ) { < nl > + super . onBusStopped ( ) ; < nl > + < nl > + / / < nl > + / / Notify Creation callback if needed < nl > + / / < nl > if ( callback ! = null ) { < nl > callback . onError ( new RuntimeException ( " Internal Error " ) ) ; < nl > } < nl > + < nl > + / / < nl > + / / EventBus stopped = call ended . < nl > + / / Send notification to CallVM and CallManager . < nl > + / / < nl > + if ( callVM ! = null ) { < nl > + callVM . getState ( ) . change ( CallState . ENDED ) ; < nl > + callManager . send ( new CallManagerActor . OnCallEnded ( callId ) ) ; < nl > + } < nl > } < nl > < nl > - @ Override < nl > - public void onBusStopped ( ) { < nl > - super . onBusStopped ( ) ; < nl > - callVM . getState ( ) . change ( CallState . ENDED ) ; < nl > - callManager . send ( new CallManagerActor . OnCallEnded ( callId ) ) ; < nl > + < nl > + private void updateMembers ( ) { < nl > + < nl > + / / < nl > + / / Update Calls VM < nl > + / / < nl > + ArrayList < im . actor . core . viewmodel . CallMember > callMembers = new ArrayList < > ( ) ; < nl > + for ( CallMember m : members ) { < nl > + im . actor . core . viewmodel . CallMemberState state ; < nl > + switch ( m . getState ( ) ) { < nl > + case RINGING : < nl > + state = im . actor . core . viewmodel . CallMemberState . CALLING ; < nl > + break ; < nl > + case CONNECTED : < nl > + state = im . actor . core . viewmodel . CallMemberState . IN _ PROGRESS ; < nl > + break ; < nl > + case CONNECTING : < nl > + default : < nl > + state = im . actor . core . viewmodel . CallMemberState . CALLING _ REACHED ; < nl > + } < nl > + callMembers . add ( new im . actor . core . viewmodel . CallMember ( m . getUid ( ) , state ) ) ; < nl > + } < nl > + callVM . getMembers ( ) . change ( callMembers ) ; < nl > + < nl > + / / < nl > + / / Broadcast new members < nl > + / / < nl > + sendSignalingMessage ( createMembersChanged ( ) ) ; < nl > } < nl > < nl > private ApiMembersChanged createMembersChanged ( ) { < nl > @ @ - 212 , 41 + 336 , 18 @ @ public class CallMasterActor extends CallActor { < nl > return new ApiMembersChanged ( callMembers ) ; < nl > } < nl > < nl > - private static class ConnectedHolder { < nl > - < nl > - private int uid ; < nl > - private long deviceId ; < nl > - < nl > - public ConnectedHolder ( int uid , long deviceId ) { < nl > - this . uid = uid ; < nl > - this . deviceId = deviceId ; < nl > - } < nl > - < nl > - @ Override < nl > - public boolean equals ( Object o ) { < nl > - if ( this = = o ) return true ; < nl > - if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; < nl > - < nl > - ConnectedHolder that = ( ConnectedHolder ) o ; < nl > - < nl > - if ( uid ! = that . uid ) return false ; < nl > - return deviceId = = that . deviceId ; < nl > + / / < nl > + / / Messages handling < nl > + / / < nl > < nl > + @ Override < nl > + public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { < nl > + if ( signaling instanceof ApiAnswerCall ) { < nl > + onCallAnswered ( fromUid , fromDeviceId ) ; < nl > + } else if ( signaling instanceof ApiRejectCall ) { < nl > + onCallRejected ( fromUid , fromDeviceId ) ; < nl > + } else { < nl > + super . onSignalingMessage ( fromUid , fromDeviceId , signaling ) ; < nl > } < nl > - < nl > - @ Override < nl > - public int hashCode ( ) { < nl > - int result = uid ; < nl > - result = 31 * result + ( int ) ( deviceId ^ ( deviceId > > > 32 ) ) ; < nl > - return result ; < nl > - } < nl > - } < nl > - < nl > - private static class ConnectedUser { < nl > - private int uid ; < nl > - < nl > - } < nl > - < nl > - private enum UserState { < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > index 082f82a . . b5270f2 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > @ @ - 4 , 6 + 4 , 7 @ @ import java . util . ArrayList ; < nl > < nl > import im . actor . core . api . ApiAnswerCall ; < nl > import im . actor . core . api . ApiNeedOffer ; < nl > + import im . actor . core . api . ApiRejectCall ; < nl > import im . actor . core . api . ApiSwitchMaster ; < nl > import im . actor . core . api . ApiWebRTCSignaling ; < nl > import im . actor . core . api . rpc . RequestGetCallInfo ; < nl > @ @ - 23 , 7 + 24 , 6 @ @ public class CallSlaveActor extends CallActor { < nl > < nl > private ActorRef callManager ; < nl > private MasterNode masterNode ; < nl > - private boolean isAnswerPending = false ; < nl > private long callId ; < nl > private Peer peer ; < nl > private CallVM callVM ; < nl > @ @ - 56 , 15 + 56 , 15 @ @ public class CallSlaveActor extends CallActor { < nl > super . onBusStarted ( ) ; < nl > callVM = spawnNewVM ( callId , peer , new ArrayList < CallMember > ( ) , CallState . CALLING _ INCOMING ) ; < nl > callVM . getIsMuted ( ) . change ( isMuted ( ) ) ; < nl > - callManager . send ( new CallManagerActor . IncomingCallReady ( callId ) , self ( ) ) ; < nl > } < nl > < nl > public void onMasterNodeChanged ( int fromUid , long fromDeviceId ) { < nl > masterNode = new MasterNode ( fromUid , fromDeviceId ) ; < nl > - if ( isAnswerPending ) { < nl > - isAnswerPending = false ; < nl > - sendSignalingMessage ( masterNode . getUid ( ) , masterNode . getDeviceId ( ) , new ApiAnswerCall ( ) ) ; < nl > - } < nl > + < nl > + / / < nl > + / / Notify UI only after successful master node information received < nl > + / / < nl > + callManager . send ( new CallManagerActor . IncomingCallReady ( callId ) , self ( ) ) ; < nl > } < nl > < nl > public void onNeedOffer ( int destUid , long destDeviceId ) { < nl > @ @ - 73 , 12 + 73 , 7 @ @ public class CallSlaveActor extends CallActor { < nl > < nl > public void doAnswer ( ) { < nl > callVM . getState ( ) . change ( CallState . CONNECTING ) ; < nl > - < nl > - if ( masterNode = = null ) { < nl > - isAnswerPending = true ; < nl > - } else { < nl > - sendSignalingMessage ( masterNode . getUid ( ) , masterNode . getDeviceId ( ) , new ApiAnswerCall ( ) ) ; < nl > - } < nl > + sendSignalingMessage ( masterNode . getUid ( ) , masterNode . getDeviceId ( ) , new ApiAnswerCall ( ) ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 89 , 6 + 84 , 13 @ @ public class CallSlaveActor extends CallActor { < nl > } < nl > < nl > @ Override < nl > + public void doEndCall ( ) { < nl > + super . doEndCall ( ) ; < nl > + callVM . getState ( ) . change ( CallState . ENDED ) ; < nl > + sendSignalingMessage ( masterNode . getUid ( ) , masterNode . getDeviceId ( ) , new ApiRejectCall ( ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > public void onBusStopped ( ) { < nl > super . onBusStopped ( ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > index a19ba28 . . a6664fc 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > @ @ - 65 , 10 + 65 , 10 @ @ public class CallsModule extends AbsModule { < nl > } < nl > < nl > public void endCall ( long callId ) { < nl > - callManager . send ( new CallManagerActor . EndCall ( callId ) ) ; < nl > + callManager . send ( new CallManagerActor . DoEndCall ( callId ) ) ; < nl > } < nl > < nl > public void answerCall ( long callId ) { < nl > - callManager . send ( new CallManagerActor . AnswerCall ( callId ) ) ; < nl > + callManager . send ( new CallManagerActor . DoAnswerCall ( callId ) ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / MasterCallMember . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / MasterCallMember . java < nl > new file mode 100644 < nl > index 0000000 . . dd413c6 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / MasterCallMember . java < nl > @ @ - 0 , 0 + 1 , 45 @ @ < nl > + package im . actor . core . modules . calls . entity ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . entity . GroupMember ; < nl > + import im . actor . runtime . function . Function ; < nl > + import im . actor . runtime . function . Predicate ; < nl > + < nl > + public class MasterCallMember extends CallMember { < nl > + < nl > + public static Function < GroupMember , MasterCallMember > FROM _ MEMBER = new Function < GroupMember , MasterCallMember > ( ) { < nl > + @ Override < nl > + public MasterCallMember apply ( GroupMember groupMember ) { < nl > + return new MasterCallMember ( groupMember . getUid ( ) , CallMemberState . RINGING ) ; < nl > + } < nl > + } ; < nl > + < nl > + public static Predicate < MasterCallMember > PREDICATE ( final int uid , final long deviceId ) { < nl > + return new Predicate < MasterCallMember > ( ) { < nl > + @ Override < nl > + public boolean apply ( MasterCallMember masterCallMember ) { < nl > + return masterCallMember . getUid ( ) = = uid & & masterCallMember . getDeviceId ( ) . contains ( deviceId ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > + public static Predicate < MasterCallMember > PREDICATE ( final int uid ) { < nl > + return new Predicate < MasterCallMember > ( ) { < nl > + @ Override < nl > + public boolean apply ( MasterCallMember masterCallMember ) { < nl > + return masterCallMember . getUid ( ) = = uid ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > + private ArrayList < Long > deviceId = new ArrayList < > ( ) ; < nl > + < nl > + public MasterCallMember ( int uid , CallMemberState state ) { < nl > + super ( uid , state ) ; < nl > + } < nl > + < nl > + public ArrayList < Long > getDeviceId ( ) { < nl > + return deviceId ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / JsMediaStream . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / JsMediaStream . java < nl > index 79c0214 . . fc0137e 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / JsMediaStream . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / JsMediaStream . java < nl > @ @ - 36 , 7 + 36 , 14 @ @ public class JsMediaStream extends JavaScriptObject { < nl > public final void stopAll ( ) { < nl > JsArray < JsMediaStreamTrack > tracks = getTracks ( ) ; < nl > for ( int i = 0 ; i < tracks . length ( ) ; i + + ) { < nl > - tracks . get ( i ) . stop ( ) ; < nl > + tracks . get ( i ) . setEnabled ( false ) ; < nl > + } < nl > + } < nl > + < nl > + public final void startAll ( ) { < nl > + JsArray < JsMediaStreamTrack > tracks = getTracks ( ) ; < nl > + for ( int i = 0 ; i < tracks . length ( ) ; i + + ) { < nl > + tracks . get ( i ) . setEnabled ( true ) ; < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java < nl > index 05a3780 . . 7bfc7aa 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java < nl > @ @ - 36 , 10 + 36 , 17 @ @ public class MediaStream implements WebRTCMediaStream { < nl > < nl > @ Override < nl > public void setEnabled ( boolean isEnabled ) { < nl > - if ( isEnabled ) { < nl > - audio . play ( ) ; < nl > + if ( audio ! = null ) { < nl > + if ( isEnabled ) { < nl > + audio . play ( ) ; < nl > + } else { < nl > + audio . pause ( ) ; < nl > + } < nl > + } < nl > + if ( ! isEnabled ) { < nl > + stream . stopAll ( ) ; < nl > } else { < nl > - audio . pause ( ) ; < nl > + stream . startAll ( ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java < nl > index 234c785 . . 3aab1ce 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java < nl > @ @ - 93 , 6 + 93 , 14 @ @ public class ManagedList < T > extends ArrayList < T > { < nl > return get ( 0 ) ; < nl > } < nl > < nl > + public T firstOrNull ( ) { < nl > + if ( size ( ) = = 0 ) { < nl > + return null ; < nl > + } else { < nl > + return get ( 0 ) ; < nl > + } < nl > + } < nl > + < nl > public Promise < T > firstPromise ( ) { < nl > return new Promise < T > ( new PromiseFunc < T > ( ) { < nl > @ Override
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json < nl > index 21881e7 . . c585341 100644 < nl > - - - a / actor - sdk / sdk - api / actor . json < nl > + + + b / actor - sdk / sdk - api / actor . json < nl > @ @ - 12512 , 6 + 12512 , 24 @ @ < nl > " argument " : " sessionId " , < nl > " category " : " full " , < nl > " description " : " Session Id of candidate " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " index " , < nl > + " category " : " full " , < nl > + " description " : " Index of candidate " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " id " , < nl > + " category " : " full " , < nl > + " description " : " Id of candidate " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " sdp " , < nl > + " category " : " full " , < nl > + " description " : " SDP of candidate " < nl > } < nl > ] , < nl > " trait " : { < nl > @ @ - 12526 , 6 + 12544 , 21 @ @ < nl > } , < nl > " id " : 1 , < nl > " name " : " sessionId " < nl > + } , < nl > + { < nl > + " type " : " int32 " , < nl > + " id " : 2 , < nl > + " name " : " index " < nl > + } , < nl > + { < nl > + " type " : " string " , < nl > + " id " : 3 , < nl > + " name " : " id " < nl > + } , < nl > + { < nl > + " type " : " string " , < nl > + " id " : 4 , < nl > + " name " : " sdp " < nl > } < nl > ] < nl > } < nl > diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > index ce7385b . . aab1775 100644 < nl > - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > @ @ - 10769 , 6 + 10769 , 21 @ @ < nl > < ref role = " wb18D " node = " 2vxDjotnUB8 " resolve = " randomId " / > < nl > < / node > < nl > < / node > < nl > + < node concept = " 2m7Kf5 " id = " 3Tolai5O6hO " role = " 2m0hLx " > < nl > + < property role = " 2m7DUN " value = " 2 " / > < nl > + < property role = " TrG5h " value = " index " / > < nl > + < node concept = " 2m5ndE " id = " 3Tolai5O6hU " role = " 2m7DVh " / > < nl > + < / node > < nl > + < node concept = " 2m7Kf5 " id = " 3Tolai5O6hX " role = " 2m0hLx " > < nl > + < property role = " 2m7DUN " value = " 3 " / > < nl > + < property role = " TrG5h " value = " id " / > < nl > + < node concept = " 2m5ndX " id = " 3Tolai5O6i5 " role = " 2m7DVh " / > < nl > + < / node > < nl > + < node concept = " 2m7Kf5 " id = " 3Tolai5O6i8 " role = " 2m0hLx " > < nl > + < property role = " 2m7DUN " value = " 4 " / > < nl > + < property role = " TrG5h " value = " sdp " / > < nl > + < node concept = " 2m5ndX " id = " 3Tolai5O6ii " role = " 2m7DVh " / > < nl > + < / node > < nl > < node concept = " Nu42z " id = " 3Tolai5NNTV " role = " 3BtCOu " > < nl > < property role = " Nu42W " value = " 03 " / > < nl > < / node > < nl > @ @ - 10780 , 6 + 10795 , 21 @ @ < nl > < property role = " NX6R2 " value = " Session Id of candidate " / > < nl > < ref role = " NX6Kv " node = " 3Tolai5NNYb " resolve = " sessionId " / > < nl > < / node > < nl > + < node concept = " NX1gA " id = " 3Tolai5O6ip " role = " NXodf " > < nl > + < property role = " NX6R2 " value = " Index of candidate " / > < nl > + < property role = " 1GSvIU " value = " full " / > < nl > + < ref role = " NX6Kv " node = " 3Tolai5O6hO " resolve = " index " / > < nl > + < / node > < nl > + < node concept = " NX1gA " id = " 3Tolai5O6iz " role = " NXodf " > < nl > + < property role = " NX6R2 " value = " Id of candidate " / > < nl > + < property role = " 1GSvIU " value = " full " / > < nl > + < ref role = " NX6Kv " node = " 3Tolai5O6hX " resolve = " id " / > < nl > + < / node > < nl > + < node concept = " NX1gA " id = " 3Tolai5O6iJ " role = " NXodf " > < nl > + < property role = " NX6R2 " value = " SDP of candidate " / > < nl > + < property role = " 1GSvIU " value = " full " / > < nl > + < ref role = " NX6Kv " node = " 3Tolai5O6i8 " resolve = " sdp " / > < nl > + < / node > < nl > < / node > < nl > < node concept = " 2m5naR " id = " 3Tolai5NNUQ " role = " 2m5mJr " > < nl > < property role = " TrG5h " value = " Offer " / > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > index 8dec812 . . 4c5960f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > @ @ - 381 , 7 + 381 , 7 @ @ public class AAPromiseFunc : NSObject , ARPromiseFunc { < nl > < nl > extension ARPromise { < nl > convenience init ( closure : ( resolver : ARPromiseResolver ) - > ( ) ) { < nl > - super . init ( AAPromiseFunc ( closure : closure ) ) < nl > + self . init ( executor : AAPromiseFunc ( closure : closure ) ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift < nl > index e20b974 . . d65d367 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift < nl > @ @ - 19 , 6 + 19 , 6 @ @ class AAActorRuntime { < nl > ARCocoaFileSystemProxyProvider . setFileSystemRuntime ( CocoaFileSystemRuntime ( ) ) < nl > ARCocoaNetworkProxyProvider . setNetworkRuntime ( CocoaNetworkRuntime ( ) ) < nl > ARCocoaAssetsProxyProvider . setAssetsRuntimeWithARAssetsRuntime ( CocoaAssetsRuntime ( ) ) < nl > - < nl > + ARCocoaWebRTCProxyProvider . setWebRTCRuntime ( CocoaWebRTCRuntime ( ) ) < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > index aa669dc . . 3a6137d 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > @ @ - 70 , 9 + 70 , 9 @ @ class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnec < nl > return ARPromise ( closure : { ( resolver ) - > ( ) in < nl > self . peerConnection . createAnswer ( RTCMediaConstraints ( ) , didCreate : { ( desc , error ) - > ( ) in < nl > if error = = nil { < nl > - resolver . result ( desc . description ) < nl > + resolver . result ( ARWebRTCSessionDescription ( type : " answer " , withSDP : desc . description ) ) < nl > } else { < nl > - resolver . error ( JavaLangException ( NSString : " error " ) ) < nl > + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) < nl > } < nl > } ) < nl > } ) < nl > @ @ - 82 , 34 + 82 , 33 @ @ class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnec < nl > return ARPromise ( closure : { ( resolver ) - > ( ) in < nl > self . peerConnection . createOffer ( RTCMediaConstraints ( ) , didCreate : { ( desc , error ) - > ( ) in < nl > if error = = nil { < nl > - resolver . result ( desc . description ) < nl > + resolver . result ( ARWebRTCSessionDescription ( type : " offer " , withSDP : desc . description ) ) < nl > } else { < nl > - resolver . error ( JavaLangException ( NSString : " error " ) ) < nl > + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) < nl > } < nl > } ) < nl > } ) < nl > } < nl > < nl > - func setRemoteDescriptionWithType ( type : String , withSPD sdp : String ) - > ARPromise { < nl > + func setRemoteDescription ( description _ : ARWebRTCSessionDescription ) - > ARPromise { < nl > return ARPromise ( executor : AAPromiseFunc ( closure : { ( resolver ) - > ( ) in < nl > - self . peerConnection . setRemoteDescription ( RTCSessionDescription ( type : type , sdp : sdp ) , didSet : { ( error ) - > ( ) in < nl > + self . peerConnection . setRemoteDescription ( RTCSessionDescription ( type : description _ . type , sdp : description _ . sdp ) , didSet : { ( error ) - > ( ) in < nl > if ( error = = nil ) { < nl > - resolver . result ( JavaLangBoolean ( boolean : true ) ) < nl > + resolver . result ( description _ ) < nl > } else { < nl > - resolver . error ( JavaLangException ( NSString : " error " ) ) < nl > + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) < nl > } < nl > } ) < nl > } ) ) < nl > - < nl > } < nl > < nl > - func setLocalDescriptionWithType ( type : String , withSPD sdp : String ) - > ARPromise { < nl > + func setLocalDescription ( description _ : ARWebRTCSessionDescription ) - > ARPromise { < nl > return ARPromise ( executor : AAPromiseFunc ( closure : { ( resolver ) - > ( ) in < nl > - self . peerConnection . setLocalDescription ( RTCSessionDescription ( type : type , sdp : sdp ) , didSet : { ( error ) - > ( ) in < nl > + self . peerConnection . setLocalDescription ( RTCSessionDescription ( type : description _ . type , sdp : description _ . sdp ) , didSet : { ( error ) - > ( ) in < nl > if ( error = = nil ) { < nl > - resolver . result ( JavaLangBoolean ( boolean : true ) ) < nl > + resolver . result ( description _ ) < nl > } else { < nl > - resolver . error ( JavaLangException ( NSString : " error " ) ) < nl > + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) < nl > } < nl > } ) < nl > } ) ) < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java < nl > index 1dc7f31 . . 3250d54 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java < nl > @ @ - 17 , 9 + 17 , 15 @ @ import java . util . ArrayList ; < nl > public class ApiCandidate extends ApiWebRTCSignaling { < nl > < nl > private long sessionId ; < nl > + private int index ; < nl > + private String id ; < nl > + private String sdp ; < nl > < nl > - public ApiCandidate ( long sessionId ) { < nl > + public ApiCandidate ( long sessionId , int index , @ NotNull String id , @ NotNull String sdp ) { < nl > this . sessionId = sessionId ; < nl > + this . index = index ; < nl > + this . id = id ; < nl > + this . sdp = sdp ; < nl > } < nl > < nl > public ApiCandidate ( ) { < nl > @ @ - 34 , 20 + 40 , 49 @ @ public class ApiCandidate extends ApiWebRTCSignaling { < nl > return this . sessionId ; < nl > } < nl > < nl > + public int getIndex ( ) { < nl > + return this . index ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getId ( ) { < nl > + return this . id ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getSdp ( ) { < nl > + return this . sdp ; < nl > + } < nl > + < nl > @ Override < nl > public void parse ( BserValues values ) throws IOException { < nl > this . sessionId = values . getLong ( 1 ) ; < nl > + this . index = values . getInt ( 2 ) ; < nl > + this . id = values . getString ( 3 ) ; < nl > + this . sdp = values . getString ( 4 ) ; < nl > } < nl > < nl > @ Override < nl > public void serialize ( BserWriter writer ) throws IOException { < nl > writer . writeLong ( 1 , this . sessionId ) ; < nl > + writer . writeInt ( 2 , this . index ) ; < nl > + if ( this . id = = null ) { < nl > + throw new IOException ( ) ; < nl > + } < nl > + writer . writeString ( 3 , this . id ) ; < nl > + if ( this . sdp = = null ) { < nl > + throw new IOException ( ) ; < nl > + } < nl > + writer . writeString ( 4 , this . sdp ) ; < nl > } < nl > < nl > @ Override < nl > public String toString ( ) { < nl > String res = " struct Candidate { " ; < nl > res + = " sessionId = " + this . sessionId ; < nl > + res + = " , index = " + this . index ; < nl > + res + = " , id = " + this . id ; < nl > + res + = " , sdp = " + this . sdp ; < nl > res + = " } " ; < nl > return res ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index c2de058 . . a72ebbc 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 3 , 20 + 3 , 31 @ @ package im . actor . core . modules . calls ; < nl > import org . jetbrains . annotations . Nullable ; < nl > < nl > import java . io . IOException ; < nl > + import java . util . ArrayList ; < nl > + import java . util . HashMap ; < nl > < nl > + import im . actor . core . api . ApiAnswer ; < nl > + import im . actor . core . api . ApiCandidate ; < nl > + import im . actor . core . api . ApiOffer ; < nl > import im . actor . core . api . ApiWebRTCSignaling ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . eventbus . EventBusActor ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . WebRTC ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . function . Consumer ; < nl > import im . actor . runtime . function . Function ; < nl > import im . actor . runtime . promise . Promise ; < nl > + import im . actor . runtime . promise . Promises ; < nl > + import im . actor . runtime . webrtc . WebRTCLocalStream ; < nl > import im . actor . runtime . webrtc . WebRTCPeerConnection ; < nl > < nl > public class CallActor extends EventBusActor { < nl > < nl > private static final String TAG = " CallActor " ; < nl > < nl > + private HashMap < Integer , HashMap < Long , ActorRef > > peerConnections = new HashMap < > ( ) ; < nl > + < nl > public CallActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > } < nl > @ @ - 25 , 8 + 36 , 22 @ @ public class CallActor extends EventBusActor { < nl > super ( busId , context ) ; < nl > } < nl > < nl > - public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { < nl > + / / < nl > + / / Signaling Wrappers < nl > + / / < nl > < nl > + public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { < nl > + if ( signaling instanceof ApiOffer ) { < nl > + ApiOffer offer = ( ApiOffer ) signaling ; < nl > + getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnOffer ( offer . getSdp ( ) ) ) ; < nl > + } else if ( signaling instanceof ApiAnswer ) { < nl > + ApiAnswer answer = ( ApiAnswer ) signaling ; < nl > + getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnAnswer ( answer . getSdp ( ) ) ) ; < nl > + } else if ( signaling instanceof ApiCandidate ) { < nl > + ApiCandidate candidate = ( ApiCandidate ) signaling ; < nl > + getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnCandidate ( candidate . getIndex ( ) , < nl > + candidate . getId ( ) , candidate . getSdp ( ) ) ) ; < nl > + } < nl > } < nl > < nl > public final void sendSignalingMessage ( int uid , long deviceId , ApiWebRTCSignaling signaling ) { < nl > @ @ - 58 , 37 + 83 , 32 @ @ public class CallActor extends EventBusActor { < nl > onSignalingMessage ( senderId , senderDeviceId , signaling ) ; < nl > } < nl > < nl > - protected Promise < PeerConnection > createConnection ( final int userId , final long deviceId ) { < nl > - return WebRTC . createPeerConnection ( ) . map ( new Function < WebRTCPeerConnection , PeerConnection > ( ) { < nl > - @ Override < nl > - public PeerConnection apply ( WebRTCPeerConnection webRTCPeerConnection ) { < nl > - return new PeerConnection ( userId , deviceId , webRTCPeerConnection ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - protected static class PeerConnection { < nl > - < nl > - private int uid ; < nl > - private long deviceId ; < nl > - private WebRTCPeerConnection webRTCPeerConnection ; < nl > - < nl > - public PeerConnection ( int uid , long deviceId , WebRTCPeerConnection webRTCPeerConnection ) { < nl > - this . uid = uid ; < nl > - this . deviceId = deviceId ; < nl > - this . webRTCPeerConnection = webRTCPeerConnection ; < nl > - } < nl > - < nl > - public int getUid ( ) { < nl > - return uid ; < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof PeerConnectionActor . DoAnswer ) { < nl > + PeerConnectionActor . DoAnswer answer = ( PeerConnectionActor . DoAnswer ) message ; < nl > + sendSignalingMessage ( answer . getUid ( ) , answer . getDeviceId ( ) , < nl > + new ApiAnswer ( 0 , answer . getSdp ( ) ) ) ; < nl > + } else if ( message instanceof PeerConnectionActor . DoOffer ) { < nl > + PeerConnectionActor . DoOffer offer = ( PeerConnectionActor . DoOffer ) message ; < nl > + sendSignalingMessage ( offer . getUid ( ) , offer . getDeviceId ( ) , < nl > + new ApiOffer ( 0 , offer . getSdp ( ) ) ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > } < nl > + } < nl > < nl > - public long getDeviceId ( ) { < nl > - return deviceId ; < nl > + protected ActorRef getPeer ( int uid , long deviceId ) { < nl > + if ( ! peerConnections . containsKey ( uid ) ) { < nl > + peerConnections . put ( uid , new HashMap < Long , ActorRef > ( ) ) ; < nl > } < nl > - < nl > - public WebRTCPeerConnection getWebRTCPeerConnection ( ) { < nl > - return webRTCPeerConnection ; < nl > + HashMap < Long , ActorRef > refs = peerConnections . get ( uid ) ; < nl > + if ( refs . containsKey ( deviceId ) ) { < nl > + return refs . get ( deviceId ) ; < nl > } < nl > + ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / uid : " + uid + " / " + deviceId , < nl > + PeerConnectionActor . CONSTRUCTOR ( self ( ) , uid , deviceId , context ( ) ) ) ; < nl > + refs . put ( deviceId , ref ) ; < nl > + return ref ; < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > index 962f191 . . 09ddfc5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java < nl > @ @ - 51 , 43 + 51 , 7 @ @ public class CallMasterActor extends CallActor { < nl > @ Override < nl > public void onDeviceConnected ( final int uid , final long deviceId ) { < nl > Log . d ( TAG , " onDeviceConnected " ) ; < nl > - final long sessionId = RandomUtils . nextRid ( ) ; < nl > - WebRTC . createPeerConnection ( ) . mapPromiseSelf ( new Function < WebRTCPeerConnection , Promise < WebRTCLocalStream > > ( ) { < nl > - @ Override < nl > - public Promise < WebRTCLocalStream > apply ( final WebRTCPeerConnection webRTCPeerConnection ) { < nl > - return WebRTC . getUserAudio ( ) . then ( new Consumer < WebRTCLocalStream > ( ) { < nl > - @ Override < nl > - public void apply ( WebRTCLocalStream stream ) { < nl > - webRTCPeerConnection . addOwnStream ( stream ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) . mapPromiseSelf ( new Function < WebRTCPeerConnection , Promise < Boolean > > ( ) { < nl > - @ Override < nl > - public Promise < Boolean > apply ( final WebRTCPeerConnection webRTCPeerConnection ) { < nl > - return webRTCPeerConnection . createOffer ( ) . then ( new Consumer < String > ( ) { < nl > - @ Override < nl > - public void apply ( String sdp ) { < nl > - sendSignalingMessage ( uid , deviceId , new ApiOffer ( sessionId , sdp ) ) ; < nl > - } < nl > - } ) . mapPromise ( new Function < String , Promise < Boolean > > ( ) { < nl > - @ Override < nl > - public Promise < Boolean > apply ( String s ) { < nl > - return webRTCPeerConnection . setLocalDescription ( " offer " , s ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) . then ( new Consumer < WebRTCPeerConnection > ( ) { < nl > - @ Override < nl > - public void apply ( WebRTCPeerConnection webRTCPeerConnection ) { < nl > - Log . d ( TAG , " onCallCreated : then " ) ; < nl > - } < nl > - } ) . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - Log . d ( TAG , " onCallCreated : failure " ) ; < nl > - } < nl > - } ) . done ( self ( ) ) ; < nl > + getPeer ( uid , deviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 96 , 11 + 60 , 6 @ @ public class CallMasterActor extends CallActor { < nl > } < nl > < nl > @ Override < nl > - public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { < nl > - Log . d ( TAG , " onSignalingMessage " ) ; < nl > - } < nl > - < nl > - @ Override < nl > public void onBusShutdown ( ) { < nl > Log . d ( TAG , " onBusShutdown " ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > index 6d43f84 . . 8c2d660 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > @ @ - 1 , 8 + 1 , 16 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > + import im . actor . core . api . ApiAnswer ; < nl > + import im . actor . core . api . ApiOffer ; < nl > import im . actor . core . api . ApiWebRTCSignaling ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . runtime . Log ; < nl > + import im . actor . runtime . WebRTC ; < nl > + import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . function . Function ; < nl > + import im . actor . runtime . promise . Promise ; < nl > + import im . actor . runtime . webrtc . WebRTCLocalStream ; < nl > + import im . actor . runtime . webrtc . WebRTCPeerConnection ; < nl > < nl > public class CallSlaveActor extends CallActor { < nl > < nl > @ @ - 29 , 11 + 37 , 6 @ @ public class CallSlaveActor extends CallActor { < nl > } < nl > < nl > @ Override < nl > - public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { < nl > - Log . d ( TAG , " onSignalingMessage " ) ; < nl > - } < nl > - < nl > - @ Override < nl > public void onBusShutdown ( ) { < nl > Log . d ( TAG , " onBusShutdown " ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > new file mode 100644 < nl > index 0000000 . . ed00252 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > @ @ - 0 , 0 + 1 , 447 @ @ < nl > + package im . actor . core . modules . calls ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import org . jetbrains . annotations . NotNull ; < nl > + < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . util . ModuleActor ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . WebRTC ; < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . function . Function ; < nl > + import im . actor . runtime . function . FunctionTupled2 ; < nl > + import im . actor . runtime . promise . Promise ; < nl > + import im . actor . runtime . promise . Promises ; < nl > + import im . actor . runtime . webrtc . WebRTCLocalStream ; < nl > + import im . actor . runtime . webrtc . WebRTCPeerConnection ; < nl > + import im . actor . runtime . webrtc . WebRTCPeerConnectionCallback ; < nl > + import im . actor . runtime . webrtc . WebRTCRemoteStream ; < nl > + import im . actor . runtime . webrtc . WebRTCSessionDescription ; < nl > + < nl > + public class PeerConnectionActor extends ModuleActor { < nl > + < nl > + @ NotNull < nl > + public static ActorCreator CONSTRUCTOR ( @ NotNull final ActorRef root , < nl > + final int uid , < nl > + final long deviceId , < nl > + @ NotNull final ModuleContext context ) { < nl > + return new ActorCreator ( ) { < nl > + @ Override < nl > + public Actor create ( ) { < nl > + return new PeerConnectionActor ( root , uid , deviceId , context ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > + private final String TAG ; < nl > + @ NotNull < nl > + private final ActorRef root ; < nl > + private final int uid ; < nl > + private final long deviceId ; < nl > + private boolean isReady = false ; < nl > + private boolean isReadyForCandidates = false ; < nl > + @ NotNull < nl > + private WebRTCPeerConnection peerConnection ; < nl > + @ NotNull < nl > + private State state = State . INITIALIZATION ; < nl > + < nl > + public PeerConnectionActor ( @ NotNull ActorRef root , int uid , long deviceId , @ NotNull ModuleContext context ) { < nl > + super ( context ) ; < nl > + TAG = " PeerConnection # " + uid + " ( " + deviceId + " ) " ; < nl > + this . root = root ; < nl > + this . uid = uid ; < nl > + this . deviceId = deviceId ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + < nl > + public long getDeviceId ( ) { < nl > + return deviceId ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + < nl > + Log . d ( TAG , " preStart " ) ; < nl > + < nl > + isReady = false ; < nl > + Promises . tuple ( WebRTC . createPeerConnection ( ) , WebRTC . getUserAudio ( ) ) . map ( new FunctionTupled2 < WebRTCPeerConnection , WebRTCLocalStream , WebRTCPeerConnection > ( ) { < nl > + @ Override < nl > + public WebRTCPeerConnection apply ( WebRTCPeerConnection webRTCPeerConnection , WebRTCLocalStream stream ) { < nl > + webRTCPeerConnection . addOwnStream ( stream ) ; < nl > + return webRTCPeerConnection ; < nl > + } < nl > + } ) . then ( new Consumer < WebRTCPeerConnection > ( ) { < nl > + @ Override < nl > + public void apply ( WebRTCPeerConnection webRTCPeerConnection ) { < nl > + Log . d ( TAG , " preStart : then " ) ; < nl > + PeerConnectionActor . this . peerConnection = webRTCPeerConnection ; < nl > + PeerConnectionActor . this . peerConnection . addCallback ( new WebRTCPeerConnectionCallback ( ) { < nl > + @ Override < nl > + public void onCandidate ( int label , String id , String candidate ) { < nl > + root . send ( new DoCandidate ( uid , deviceId , label , id , candidate ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onCandidatesEnd ( ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onStreamAdded ( WebRTCRemoteStream stream ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onStreamRemoved ( WebRTCRemoteStream stream ) { < nl > + < nl > + } < nl > + } ) ; < nl > + state = State . WAITING _ HANDSHAKE ; < nl > + isReady = true ; < nl > + unstashAll ( ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + e . printStackTrace ( ) ; < nl > + / / TODO : Handle It < nl > + < nl > + Log . d ( TAG , " preStart : error " ) ; < nl > + } < nl > + } ) . done ( self ( ) ) ; < nl > + } < nl > + < nl > + public void onOfferNeeded ( ) { < nl > + / / Ignore if we are not waiting for handshake < nl > + if ( state ! = State . WAITING _ HANDSHAKE ) { < nl > + return ; < nl > + } < nl > + < nl > + / / < nl > + / / Stages < nl > + / / 1 . Create Offer < nl > + / / 2 . Set Local Description < nl > + / / 3 . Send Offer < nl > + / / < nl > + < nl > + Log . d ( TAG , " onOfferNeeded " ) ; < nl > + isReady = false ; < nl > + peerConnection . createOffer ( ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > + @ Override < nl > + public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > + return peerConnection . setLocalDescription ( description ) ; < nl > + } < nl > + } ) . then ( new Consumer < WebRTCSessionDescription > ( ) { < nl > + @ Override < nl > + public void apply ( WebRTCSessionDescription description ) { < nl > + Log . d ( TAG , " onOfferNeeded : then " ) ; < nl > + root . send ( new DoOffer ( uid , deviceId , description . getSdp ( ) ) ) ; < nl > + state = State . WAITING _ ANSWER ; < nl > + isReady = true ; < nl > + unstashAll ( ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + Log . d ( TAG , " onOfferNeeded : failure " ) ; < nl > + e . printStackTrace ( ) ; < nl > + / / TODO : Handle It < nl > + } < nl > + } ) . done ( self ( ) ) ; < nl > + } < nl > + < nl > + public void onOffer ( @ NotNull String sdp ) { < nl > + / / Ignore if we are not waiting for handshake < nl > + if ( state ! = State . WAITING _ HANDSHAKE ) { < nl > + return ; < nl > + } < nl > + < nl > + / / < nl > + / / Stages < nl > + / / 1 . Set Remote Description < nl > + / / 2 . Create Answer < nl > + / / 3 . Set Local Description < nl > + / / 4 . Send Answer < nl > + / / 5 . Enter READY mode < nl > + / / < nl > + < nl > + Log . d ( TAG , " onOffer " ) ; < nl > + isReady = false ; < nl > + peerConnection . setRemoteDescription ( new WebRTCSessionDescription ( " offer " , sdp ) ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > + @ Override < nl > + public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > + return peerConnection . createAnswer ( ) ; < nl > + } < nl > + } ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > + @ Override < nl > + public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > + return peerConnection . setLocalDescription ( description ) ; < nl > + } < nl > + } ) . then ( new Consumer < WebRTCSessionDescription > ( ) { < nl > + @ Override < nl > + public void apply ( WebRTCSessionDescription description ) { < nl > + Log . d ( TAG , " onOffer : then " ) ; < nl > + root . send ( new DoAnswer ( uid , deviceId , description . getSdp ( ) ) ) ; < nl > + onHandShakeCompleted ( ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + Log . d ( TAG , " onOffer : failure " ) ; < nl > + e . printStackTrace ( ) ; < nl > + / / TODO : Handle It < nl > + } < nl > + } ) . done ( self ( ) ) ; < nl > + } < nl > + < nl > + public void onAnswer ( @ NotNull String sdp ) { < nl > + / / Ignore if we are not waiting for answer < nl > + if ( state ! = State . WAITING _ ANSWER ) { < nl > + return ; < nl > + } < nl > + < nl > + / / < nl > + / / Stages < nl > + / / 1 . Set Remote Description < nl > + / / 2 . Enter READY mode < nl > + / / < nl > + Log . d ( TAG , " onAnswer " ) ; < nl > + peerConnection . setRemoteDescription ( new WebRTCSessionDescription ( " answer " , sdp ) ) . then ( new Consumer < WebRTCSessionDescription > ( ) { < nl > + @ Override < nl > + public void apply ( WebRTCSessionDescription description ) { < nl > + Log . d ( TAG , " onAnswer : then " ) ; < nl > + onHandShakeCompleted ( ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + Log . d ( TAG , " onAnswer : failure " ) ; < nl > + e . printStackTrace ( ) ; < nl > + / / TODO : Handle It < nl > + } < nl > + } ) . done ( self ( ) ) ; < nl > + } < nl > + < nl > + private void onHandShakeCompleted ( ) { < nl > + isReady = true ; < nl > + isReadyForCandidates = true ; < nl > + state = State . READY ; < nl > + unstashAll ( ) ; < nl > + } < nl > + < nl > + public void onCandidate ( int index , @ NotNull String id , @ NotNull String sdp ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof OnOffer ) { < nl > + if ( ! isReady ) { < nl > + stash ( ) ; < nl > + } < nl > + onOffer ( ( ( OnOffer ) message ) . getSdp ( ) ) ; < nl > + } else if ( message instanceof OnAnswer ) { < nl > + if ( ! isReady ) { < nl > + stash ( ) ; < nl > + } < nl > + onAnswer ( ( ( OnAnswer ) message ) . getSdp ( ) ) ; < nl > + } else if ( message instanceof OnCandidate ) { < nl > + if ( ! isReady | | ! isReadyForCandidates ) { < nl > + stash ( ) ; < nl > + } < nl > + OnCandidate candidate = ( OnCandidate ) message ; < nl > + onCandidate ( candidate . getIndex ( ) , candidate . getId ( ) , candidate . getSdp ( ) ) ; < nl > + } else if ( message instanceof OnOfferNeeded ) { < nl > + if ( ! isReady ) { < nl > + stash ( ) ; < nl > + } < nl > + onOfferNeeded ( ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > + / / < nl > + / / Outbound Messages < nl > + / / < nl > + < nl > + public static class DoOffer { < nl > + < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private int uid ; < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private long deviceId ; < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private String sdp ; < nl > + < nl > + public DoOffer ( int uid , long deviceId , @ NotNull String sdp ) { < nl > + this . uid = uid ; < nl > + this . deviceId = deviceId ; < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + < nl > + public long getDeviceId ( ) { < nl > + return deviceId ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + } < nl > + < nl > + public static class DoAnswer { < nl > + < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final int uid ; < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final long deviceId ; < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final String sdp ; < nl > + < nl > + public DoAnswer ( int uid , long deviceId , @ NotNull String sdp ) { < nl > + this . uid = uid ; < nl > + this . deviceId = deviceId ; < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + < nl > + public long getDeviceId ( ) { < nl > + return deviceId ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + } < nl > + < nl > + public static class DoCandidate { < nl > + < nl > + private int uid ; < nl > + private long deviceId ; < nl > + private int index ; < nl > + private String id ; < nl > + private String sdp ; < nl > + < nl > + public DoCandidate ( int uid , long deviceId , int index , String id , String sdp ) { < nl > + this . uid = uid ; < nl > + this . deviceId = deviceId ; < nl > + this . index = index ; < nl > + this . id = id ; < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + < nl > + public long getDeviceId ( ) { < nl > + return deviceId ; < nl > + } < nl > + < nl > + public int getIndex ( ) { < nl > + return index ; < nl > + } < nl > + < nl > + public String getId ( ) { < nl > + return id ; < nl > + } < nl > + < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + } < nl > + < nl > + / / < nl > + / / Inbound Messages < nl > + / / < nl > + < nl > + public static class OnOfferNeeded { < nl > + < nl > + } < nl > + < nl > + public static class OnOffer { < nl > + < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private String sdp ; < nl > + < nl > + public OnOffer ( @ NotNull String sdp ) { < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + } < nl > + < nl > + public static class OnAnswer { < nl > + < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private String sdp ; < nl > + < nl > + public OnAnswer ( @ NotNull String sdp ) { < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + } < nl > + < nl > + public static class OnCandidate { < nl > + < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final int index ; < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final String sdp ; < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final String id ; < nl > + < nl > + public OnCandidate ( int index , @ NotNull String id , @ NotNull String sdp ) { < nl > + this . index = index ; < nl > + this . id = id ; < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + public int getIndex ( ) { < nl > + return index ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getId ( ) { < nl > + return id ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + } < nl > + < nl > + private enum State { < nl > + INITIALIZATION , WAITING _ HANDSHAKE , WAITING _ ANSWER , READY < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java < nl > index 42d3ef2 . . 228072f 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java < nl > @ @ - 20 , 21 + 20 , 21 @ @ public interface WebRTCPeerConnection { < nl > @ ObjectiveCName ( " addOwnStream : " ) < nl > void addOwnStream ( @ NotNull WebRTCLocalStream stream ) ; < nl > < nl > - @ ObjectiveCName ( " setLocalDescriptionWithType : withSPD : " ) < nl > @ NotNull < nl > - Promise < Boolean > setLocalDescription ( @ NotNull String type , @ NotNull String sdp ) ; < nl > + @ ObjectiveCName ( " setLocalDescription : " ) < nl > + Promise < WebRTCSessionDescription > setLocalDescription ( @ NotNull WebRTCSessionDescription description ) ; < nl > < nl > - @ ObjectiveCName ( " setRemoteDescriptionWithType : withSPD : " ) < nl > @ NotNull < nl > - Promise < Boolean > setRemoteDescription ( @ NotNull String type , @ NotNull String sdp ) ; < nl > + @ ObjectiveCName ( " setRemoteDescription : " ) < nl > + Promise < WebRTCSessionDescription > setRemoteDescription ( @ NotNull WebRTCSessionDescription description ) ; < nl > < nl > - @ ObjectiveCName ( " creteOffer " ) < nl > @ NotNull < nl > - Promise < String > createOffer ( ) ; < nl > + @ ObjectiveCName ( " creteOffer " ) < nl > + Promise < WebRTCSessionDescription > createOffer ( ) ; < nl > < nl > - @ ObjectiveCName ( " createAnswer " ) < nl > @ NotNull < nl > - Promise < String > createAnswer ( ) ; < nl > + @ ObjectiveCName ( " createAnswer " ) < nl > + Promise < WebRTCSessionDescription > createAnswer ( ) ; < nl > < nl > @ ObjectiveCName ( " close " ) < nl > void close ( ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCSessionDescription . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCSessionDescription . java < nl > new file mode 100644 < nl > index 0000000 . . 458d904 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCSessionDescription . java < nl > @ @ - 0 , 0 + 1 , 32 @ @ < nl > + package im . actor . runtime . webrtc ; < nl > + < nl > + import com . google . j2objc . annotations . ObjectiveCName ; < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import org . jetbrains . annotations . NotNull ; < nl > + < nl > + public class WebRTCSessionDescription { < nl > + < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final String sdp ; < nl > + @ NotNull < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private final String type ; < nl > + < nl > + @ ObjectiveCName ( " initWithType : withSDP : " ) < nl > + public WebRTCSessionDescription ( @ NotNull String type , @ NotNull String sdp ) { < nl > + this . type = type ; < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getType ( ) { < nl > + return type ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 index 38dabdb . . c692911 100644 
 - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 @ @ - 10935 , 6 + 10935 , 41 @ @ 
 < ref role = " NX6Kv " node = " 3Tolai5NVBR " resolve = " device " / > 
 < / node > 
 < / node > 
 + < node concept = " 2m5naR " id = " 3xEfKBqKbxy " role = " 2m5mJr " > 
 + < property role = " TrG5h " value = " NeedDisconnect " / > 
 + < property role = " tsOgz " value = " false " / > 
 + < property role = " w4tQU " value = " true " / > 
 + < ref role = " w4 $ XZ " node = " 3Tolai5NMKi " resolve = " WebRTCSignaling " / > 
 + < node concept = " 2m7Kf5 " id = " 3xEfKBqKb $ k " role = " 2m0hLx " > 
 + < property role = " 2m7DUN " value = " 1 " / > 
 + < property role = " TrG5h " value = " uid " / > 
 + < node concept = " wb0Ql " id = " 3xEfKBqKb $ o " role = " 2m7DVh " > 
 + < ref role = " wb18D " node = " 5qm50Y0e3uz " resolve = " userId " / > 
 + < / node > 
 + < / node > 
 + < node concept = " 2m7Kf5 " id = " 3xEfKBqKb $ r " role = " 2m0hLx " > 
 + < property role = " 2m7DUN " value = " 2 " / > 
 + < property role = " TrG5h " value = " device " / > 
 + < node concept = " wb0Ql " id = " 3xEfKBqKb $ x " role = " 2m7DVh " > 
 + < ref role = " wb18D " node = " 2vxDjotnUB8 " resolve = " randomId " / > 
 + < / node > 
 + < / node > 
 + < node concept = " Nu42z " id = " 3xEfKBqKb $ i " role = " 3BtCOu " > 
 + < property role = " Nu42W " value = " 14 " / > 
 + < / node > 
 + < node concept = " NXeRC " id = " 3xEfKBqKb $ $ " role = " NXodf " > 
 + < property role = " NXePf " value = " Notification about requirement about required disconnection from peer " / > 
 + < / node > 
 + < node concept = " NX1gA " id = " 3xEfKBqKb $ D " role = " NXodf " > 
 + < property role = " NX6R2 " value = " User ' s Id " / > 
 + < property role = " 1GSvIU " value = " full " / > 
 + < ref role = " NX6Kv " node = " 3xEfKBqKb $ k " resolve = " uid " / > 
 + < / node > 
 + < node concept = " NX1gA " id = " 3xEfKBqKb $ L " role = " NXodf " > 
 + < property role = " NX6R2 " value = " Device Id " / > 
 + < ref role = " NX6Kv " node = " 3xEfKBqKb $ r " resolve = " device " / > 
 + < / node > 
 + < / node > 
 < node concept = " 2m5naR " id = " 3Tolai5ObtG " role = " 2m5mJr " > 
 < property role = " TrG5h " value = " SwitchMaster " / > 
 < property role = " tsOgz " value = " false " / > 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 index c5853da . . 9a8b9e4 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 @ @ - 20 , 6 + 20 , 8 @ @ public class AACallViewController : AAViewController { 
 public let speakerButton = UIButton ( ) 
 public let videoButton = UIButton ( ) 
 
 + public let debugLabel = UILabel ( ) 
 + 
 var isScheduledDispose = false 
 
 public init ( callId : jlong ) { 
 @ @ - 73 , 6 + 75 , 10 @ @ public class AACallViewController : AAViewController { 
 callState . textAlignment = NSTextAlignment . Center 
 callState . font = UIFont . thinSystemFontOfSize ( 32 ) 
 
 + debugLabel . textColor = ActorSDK . sharedActor ( ) . style . vcTextColor 
 + debugLabel . lineBreakMode = . ByWordWrapping 
 + debugLabel . numberOfLines = 0 
 + 
 self . view . backgroundColor = UIColor . whiteColor ( ) 
 
 self . view . addSubview ( senderAvatar ) 
 @ @ - 83 , 6 + 89 , 7 @ @ public class AACallViewController : AAViewController { 
 self . view . addSubview ( muteButton ) 
 self . view . addSubview ( speakerButton ) 
 self . view . addSubview ( videoButton ) 
 + self . view . addSubview ( debugLabel ) 
 } 
 
 public override func viewWillLayoutSubviews ( ) { 
 @ @ - 91 , 6 + 98 , 7 @ @ public class AACallViewController : AAViewController { 
 senderAvatar . frame = CGRectMake ( ( self . view . width - 90 ) / 2 , 100 , 90 , 90 ) 
 peerTitle . frame = CGRectMake ( 60 , senderAvatar . bottom + 20 , view . width - 120 , 34 ) 
 callState . frame = CGRectMake ( 60 , peerTitle . bottom + 20 , view . width - 120 , 34 ) 
 + debugLabel . frame = view . bounds 
 
 layoutButtons ( ) 
 } 
 @ @ - 172 , 6 + 180 , 33 @ @ public class AACallViewController : AAViewController { 
 } 
 } 
 
 + binder . bind ( call . members ) { ( value : JavaUtilArrayList ! ) - > ( ) in 
 + var debugStr = " " 
 + for i in 0 . . < value . size ( ) { 
 + let member = value . getWithInt ( i ) as ! ACCallMember 
 + debugStr + = " \ ( member . uid ) " 
 + switch ( member . state . toNSEnum ( ) ) { 
 + case ACCallMemberState _ Enum . ENDED : 
 + debugStr + = " - Ended " 
 + break 
 + case ACCallMemberState _ Enum . CALLING : 
 + debugStr + = " - Calling " 
 + break 
 + case ACCallMemberState _ Enum . IN _ PROGRESS : 
 + debugStr + = " - In Progress " 
 + break 
 + case ACCallMemberState _ Enum . CALLING _ REACHED : 
 + debugStr + = " - Reached " 
 + break 
 + default : 
 + debugStr + = " - Unknown " 
 + break 
 + } 
 + debugStr + = " \ n " 
 + } 
 + self . debugLabel . text = debugStr 
 + } 
 + 
 / / 
 / / Binding Title 
 / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index 9d9a3da . . 5895822 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 185 , 7 + 185 , 7 @ @ public class CallActor extends EventBusActor { 
 peerConnections . clear ( ) ; 
 } 
 
 - public final void doEndCall ( ) { 
 + public void doEndCall ( ) { 
 shutdown ( ) ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 index 1243237 . . 99df2e6 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 293 , 10 + 293 , 10 @ @ public class CallManagerActor extends ModuleActor { 
 } else if ( message instanceof OnIncomingCallHandled ) { 
 OnIncomingCallHandled incomingCallHandled = ( OnIncomingCallHandled ) message ; 
 onIncomingCallHandled ( incomingCallHandled . getCallId ( ) ) ; 
 - } else if ( message instanceof AnswerCall ) { 
 - doAnswerCall ( ( ( AnswerCall ) message ) . getCallId ( ) ) ; 
 - } else if ( message instanceof EndCall ) { 
 - doEndCall ( ( ( EndCall ) message ) . getCallId ( ) ) ; 
 + } else if ( message instanceof DoAnswerCall ) { 
 + doAnswerCall ( ( ( DoAnswerCall ) message ) . getCallId ( ) ) ; 
 + } else if ( message instanceof DoEndCall ) { 
 + doEndCall ( ( ( DoEndCall ) message ) . getCallId ( ) ) ; 
 } else if ( message instanceof OnCallEnded ) { 
 onCallEnded ( ( ( OnCallEnded ) message ) . getCallId ( ) ) ; 
 } else if ( message instanceof DoCall ) { 
 @ @ - 358 , 11 + 358 , 11 @ @ public class CallManagerActor extends ModuleActor { 
 } 
 } 
 
 - public static class AnswerCall { 
 + public static class DoAnswerCall { 
 
 private long callId ; 
 
 - public AnswerCall ( long callId ) { 
 + public DoAnswerCall ( long callId ) { 
 this . callId = callId ; 
 } 
 
 @ @ - 371 , 10 + 371 , 10 @ @ public class CallManagerActor extends ModuleActor { 
 } 
 } 
 
 - public static class EndCall { 
 + public static class DoEndCall { 
 private long callId ; 
 
 - public EndCall ( long callId ) { 
 + public DoEndCall ( long callId ) { 
 this . callId = callId ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 index 90509d1 . . df3fc10 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 @ @ - 1 , 26 + 1 , 31 @ @ 
 package im . actor . core . modules . calls ; 
 
 import java . util . ArrayList ; 
 - import java . util . HashMap ; 
 
 import im . actor . core . api . ApiAnswerCall ; 
 import im . actor . core . api . ApiCallMember ; 
 - import im . actor . core . api . ApiCallMemberStateHolder ; 
 import im . actor . core . api . ApiMembersChanged ; 
 import im . actor . core . api . ApiNeedOffer ; 
 + import im . actor . core . api . ApiRejectCall ; 
 import im . actor . core . api . ApiSwitchMaster ; 
 import im . actor . core . api . ApiWebRTCSignaling ; 
 import im . actor . core . api . rpc . RequestDoCall ; 
 import im . actor . core . api . rpc . ResponseDoCall ; 
 + import im . actor . core . entity . GroupMember ; 
 import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerType ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . calls . entity . CallMember ; 
 import im . actor . core . modules . calls . entity . CallMemberState ; 
 + import im . actor . core . modules . calls . entity . MasterCallMember ; 
 import im . actor . core . viewmodel . CallState ; 
 import im . actor . core . viewmodel . CallVM ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . collections . ManagedList ; 
 import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . function . Function ; 
 + import im . actor . runtime . function . Predicate ; 
 import im . actor . runtime . webrtc . WebRTCMediaStream ; 
 
 public class CallMasterActor extends CallActor { 
 @ @ - 30 , 10 + 35 , 10 @ @ public class CallMasterActor extends CallActor { 
 private final Peer peer ; 
 private ActorRef callManager ; 
 private CommandCallback < Long > callback ; 
 - private ArrayList < ConnectedHolder > connectedDevices = new ArrayList < > ( ) ; 
 - private CallVM callVM ; 
 private long callId ; 
 - private ArrayList < CallMember > members = new ArrayList < > ( ) ; 
 + private CallVM callVM ; 
 + 
 + private ManagedList < MasterCallMember > members ; 
 private boolean isAnswered = false ; 
 
 public CallMasterActor ( Peer peer , ModuleContext context , CommandCallback < Long > callback ) { 
 @ @ - 54 , 6 + 59 , 24 @ @ public class CallMasterActor extends CallActor { 
 api ( new RequestDoCall ( buidOutPeer ( peer ) , getBusId ( ) ) ) . then ( new Consumer < ResponseDoCall > ( ) { 
 @ Override 
 public void apply ( ResponseDoCall responseDoCall ) { 
 + 
 + / / TODO : Possible race conditions when members changed during call initiation 
 + / / Need to return explicit callers in response 
 + if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + members = ManagedList . of ( getGroup ( peer . getPeerId ( ) ) . getMembers ( ) ) 
 + . filter ( new Predicate < GroupMember > ( ) { 
 + @ Override 
 + public boolean apply ( GroupMember groupMember ) { 
 + return groupMember . getUid ( ) ! = myUid ( ) ; 
 + } 
 + } ) 
 + . map ( MasterCallMember . FROM _ MEMBER ) ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + members = ManagedList . of ( new MasterCallMember ( peer . getPeerId ( ) , CallMemberState . RINGING ) ) ; 
 + } else { 
 + / / Halt ? 
 + } 
 + 
 callId = responseDoCall . getCallId ( ) ; 
 callVM = spanNewOutgoingVM ( responseDoCall . getCallId ( ) , peer ) ; 
 callVM . getIsMuted ( ) . change ( isMuted ( ) ) ; 
 @ @ - 75 , 61 + 98 , 72 @ @ public class CallMasterActor extends CallActor { 
 public void onDeviceConnected ( int uid , long deviceId ) { 
 
 / / 
 - / / For every newly connected device notify who is king 
 - / / in this call 
 + / / Searching for a member 
 / / 
 - sendSignalingMessage ( uid , deviceId , new ApiSwitchMaster ( ) ) ; 
 + MasterCallMember member = members 
 + . filter ( MasterCallMember . PREDICATE ( uid ) ) 
 + . firstOrNull ( ) ; 
 + if ( member = = null ) { 
 + return ; 
 + } 
 
 / / 
 - / / Pending Members 
 + / / Adding registered device 
 / / 
 - boolean found = false ; 
 - for ( CallMember m : members ) { 
 - if ( m . getUid ( ) = = uid ) { 
 - m . setState ( CallMemberState . CONNECTING ) ; 
 - found = true ; 
 - break ; 
 - } 
 - } 
 - if ( ! found ) { 
 - members . add ( new CallMember ( uid , CallMemberState . CONNECTING ) ) ; 
 + member . getDeviceId ( ) . add ( deviceId ) ; 
 + 
 + / / 
 + / / Update member state if necessary 
 + / / 
 + if ( member . getState ( ) = = CallMemberState . RINGING ) { 
 + member . setState ( CallMemberState . CONNECTING ) ; 
 } 
 
 / / 
 - / / Notify everyone about new member 
 + / / For every newly connected device notify who is king 
 + / / in this call 
 / / 
 - sendSignalingMessage ( createMembersChanged ( ) ) ; 
 + sendSignalingMessage ( uid , deviceId , new ApiSwitchMaster ( ) ) ; 
 + 
 + / / 
 + / / Update Members State 
 + / / 
 + updateMembers ( ) ; 
 } 
 
 @ Override 
 - public void onDeviceDisconnected ( int uid , long deviceId ) { 
 + public void onDeviceDisconnected ( final int uid , final long deviceId ) { 
 
 / / 
 - / / Removing connected device . If it is was the last - stop call . 
 + / / Searching for connected device 
 / / 
 - ConnectedHolder connectedHolder = new ConnectedHolder ( uid , deviceId ) ; 
 - if ( connectedDevices . contains ( connectedHolder ) ) { 
 - connectedDevices . remove ( connectedHolder ) ; 
 - if ( connectedDevices . size ( ) = = 0 ) { 
 - shutdown ( ) ; 
 - return ; 
 - } 
 + MasterCallMember member = members 
 + . filter ( MasterCallMember . PREDICATE ( uid , deviceId ) ) 
 + . firstOrNull ( ) ; 
 + if ( member = = null ) { 
 + return ; 
 + } 
 
 - / / 
 - / / Removing active member 
 - / / 
 - for ( CallMember m : members ) { 
 - if ( m . getUid ( ) = = uid ) { 
 - members . remove ( m ) ; 
 - break ; 
 - } 
 - } 
 + / / 
 + / / Remove device and if necessary remove from group 
 + / / 
 + member . getDeviceId ( ) . remove ( deviceId ) ; 
 + if ( member . getDeviceId ( ) . size ( ) = = 0 ) { 
 + members . remove ( member ) ; 
 + } 
 
 - / / 
 - / / Notify everyone about members changed 
 - / / 
 - sendSignalingMessage ( createMembersChanged ( ) ) ; 
 + / / 
 + / / If there are no members left - stop call 
 + / / 
 + if ( members . isEmpty ( ) ) { 
 + shutdown ( ) ; 
 + return ; 
 } 
 + 
 + / / 
 + / / Update Members State 
 + / / 
 + updateMembers ( ) ; 
 } 
 
 @ Override 
 @ @ - 138 , 44 + 172 , 94 @ @ public class CallMasterActor extends CallActor { 
 / / 
 / / Changing State to IN _ PROGRESS once first stream appear 
 / / 
 - if ( callVM . getState ( ) . get ( ) = = CallState . CALLING _ OUTGOING ) { 
 - callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; 
 - } 
 - 
 if ( ! isAnswered ) { 
 isAnswered = true ; 
 - callManager . send ( new CallManagerActor . AnswerCall ( callId ) ) ; 
 + callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; 
 + callManager . send ( new CallManagerActor . OnCallAnswered ( callId ) ) ; 
 } 
 } 
 
 - @ Override 
 - public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { 
 - if ( signaling instanceof ApiAnswerCall ) { 
 - ConnectedHolder connectedHolder = new ConnectedHolder ( fromUid , fromDeviceId ) ; 
 - if ( connectedDevices . contains ( connectedHolder ) ) { 
 - return ; 
 - } 
 - getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; 
 - for ( ConnectedHolder c : connectedDevices ) { 
 - sendSignalingMessage ( c . uid , c . deviceId , new ApiNeedOffer ( fromUid , fromDeviceId ) ) ; 
 - } 
 - connectedDevices . add ( connectedHolder ) ; 
 + public void onCallAnswered ( int uid , long deviceId ) { 
 
 - for ( CallMember m : members ) { 
 - if ( m . getUid ( ) = = fromUid ) { 
 - m . setState ( CallMemberState . CONNECTED ) ; 
 - break ; 
 - } 
 + / / 
 + / / Searching for suitable Call Member 
 + / / 
 + MasterCallMember callMember = members 
 + . filter ( MasterCallMember . PREDICATE ( uid ) ) 
 + . firstOrNull ( ) ; 
 + if ( callMember = = null ) { 
 + return ; 
 + } 
 + 
 + / / 
 + / / If already connected : ignore message 
 + / / 
 + / / if ( callMember . getDeviceId ( ) . contains ( deviceId ) ) { 
 + / / return ; 
 + / / } 
 + 
 + / / 
 + / / Establishing connection 
 + / / 
 + getPeer ( uid , deviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; 
 + for ( MasterCallMember member : members ) { 
 + for ( long devId : member . getDeviceId ( ) ) { 
 + sendSignalingMessage ( member . getUid ( ) , devId , new ApiNeedOffer ( uid , deviceId ) ) ; 
 } 
 - sendSignalingMessage ( createMembersChanged ( ) ) ; 
 - } else { 
 - super . onSignalingMessage ( fromUid , fromDeviceId , signaling ) ; 
 } 
 + 
 + / / 
 + / / Adding new device 
 + / / 
 + callMember . getDeviceId ( ) . add ( deviceId ) ; 
 + 
 + / / 
 + / / Update Member State 
 + / / 
 + callMember . setState ( CallMemberState . CONNECTED ) ; 
 + 
 + / / 
 + / / Update Members State 
 + / / 
 + updateMembers ( ) ; 
 + } 
 + 
 + public void onCallRejected ( int uid , long deviceId ) { 
 + 
 + / / 
 + / / Searching for suitable Call Member 
 + / / 
 + MasterCallMember callMember = members 
 + . filter ( MasterCallMember . PREDICATE ( uid , deviceId ) ) 
 + . firstOrNull ( ) ; 
 + if ( callMember = = null ) { 
 + return ; 
 + } 
 + 
 + callMember . getDeviceId ( ) . remove ( deviceId ) ; 
 + 
 + if ( callMember . getDeviceId ( ) . size ( ) = = 0 ) { 
 + members . remove ( callMember ) ; 
 + } 
 + 
 + if ( members . isEmpty ( ) ) { 
 + shutdown ( ) ; 
 + return ; 
 + } 
 + 
 + / / 
 + / / Update Members State 
 + / / 
 + updateMembers ( ) ; 
 } 
 
 @ Override 
 public void onMute ( ) { 
 super . onMute ( ) ; 
 + 
 + / / 
 + / / Update CallVM state . Actual Muting is performed in super class . 
 + / / 
 if ( callVM ! = null ) { 
 callVM . getIsMuted ( ) . change ( true ) ; 
 } 
 @ @ - 184 , 24 + 268 , 64 @ @ public class CallMasterActor extends CallActor { 
 @ Override 
 public void onUnmute ( ) { 
 super . onUnmute ( ) ; 
 + 
 + / / 
 + / / Update CallVM state . Actual Muting is performed in super class . 
 + / / 
 if ( callVM ! = null ) { 
 callVM . getIsMuted ( ) . change ( false ) ; 
 } 
 } 
 
 @ Override 
 - public void onBusDisposed ( ) { 
 - super . onBusDisposed ( ) ; 
 + public void onBusStopped ( ) { 
 + super . onBusStopped ( ) ; 
 + 
 + / / 
 + / / Notify Creation callback if needed 
 + / / 
 if ( callback ! = null ) { 
 callback . onError ( new RuntimeException ( " Internal Error " ) ) ; 
 } 
 + 
 + / / 
 + / / EventBus stopped = call ended . 
 + / / Send notification to CallVM and CallManager . 
 + / / 
 + if ( callVM ! = null ) { 
 + callVM . getState ( ) . change ( CallState . ENDED ) ; 
 + callManager . send ( new CallManagerActor . OnCallEnded ( callId ) ) ; 
 + } 
 } 
 
 - @ Override 
 - public void onBusStopped ( ) { 
 - super . onBusStopped ( ) ; 
 - callVM . getState ( ) . change ( CallState . ENDED ) ; 
 - callManager . send ( new CallManagerActor . OnCallEnded ( callId ) ) ; 
 + 
 + private void updateMembers ( ) { 
 + 
 + / / 
 + / / Update Calls VM 
 + / / 
 + ArrayList < im . actor . core . viewmodel . CallMember > callMembers = new ArrayList < > ( ) ; 
 + for ( CallMember m : members ) { 
 + im . actor . core . viewmodel . CallMemberState state ; 
 + switch ( m . getState ( ) ) { 
 + case RINGING : 
 + state = im . actor . core . viewmodel . CallMemberState . CALLING ; 
 + break ; 
 + case CONNECTED : 
 + state = im . actor . core . viewmodel . CallMemberState . IN _ PROGRESS ; 
 + break ; 
 + case CONNECTING : 
 + default : 
 + state = im . actor . core . viewmodel . CallMemberState . CALLING _ REACHED ; 
 + } 
 + callMembers . add ( new im . actor . core . viewmodel . CallMember ( m . getUid ( ) , state ) ) ; 
 + } 
 + callVM . getMembers ( ) . change ( callMembers ) ; 
 + 
 + / / 
 + / / Broadcast new members 
 + / / 
 + sendSignalingMessage ( createMembersChanged ( ) ) ; 
 } 
 
 private ApiMembersChanged createMembersChanged ( ) { 
 @ @ - 212 , 41 + 336 , 18 @ @ public class CallMasterActor extends CallActor { 
 return new ApiMembersChanged ( callMembers ) ; 
 } 
 
 - private static class ConnectedHolder { 
 - 
 - private int uid ; 
 - private long deviceId ; 
 - 
 - public ConnectedHolder ( int uid , long deviceId ) { 
 - this . uid = uid ; 
 - this . deviceId = deviceId ; 
 - } 
 - 
 - @ Override 
 - public boolean equals ( Object o ) { 
 - if ( this = = o ) return true ; 
 - if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) return false ; 
 - 
 - ConnectedHolder that = ( ConnectedHolder ) o ; 
 - 
 - if ( uid ! = that . uid ) return false ; 
 - return deviceId = = that . deviceId ; 
 + / / 
 + / / Messages handling 
 + / / 
 
 + @ Override 
 + public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { 
 + if ( signaling instanceof ApiAnswerCall ) { 
 + onCallAnswered ( fromUid , fromDeviceId ) ; 
 + } else if ( signaling instanceof ApiRejectCall ) { 
 + onCallRejected ( fromUid , fromDeviceId ) ; 
 + } else { 
 + super . onSignalingMessage ( fromUid , fromDeviceId , signaling ) ; 
 } 
 - 
 - @ Override 
 - public int hashCode ( ) { 
 - int result = uid ; 
 - result = 31 * result + ( int ) ( deviceId ^ ( deviceId > > > 32 ) ) ; 
 - return result ; 
 - } 
 - } 
 - 
 - private static class ConnectedUser { 
 - private int uid ; 
 - 
 - } 
 - 
 - private enum UserState { 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 index 082f82a . . b5270f2 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import java . util . ArrayList ; 
 
 import im . actor . core . api . ApiAnswerCall ; 
 import im . actor . core . api . ApiNeedOffer ; 
 + import im . actor . core . api . ApiRejectCall ; 
 import im . actor . core . api . ApiSwitchMaster ; 
 import im . actor . core . api . ApiWebRTCSignaling ; 
 import im . actor . core . api . rpc . RequestGetCallInfo ; 
 @ @ - 23 , 7 + 24 , 6 @ @ public class CallSlaveActor extends CallActor { 
 
 private ActorRef callManager ; 
 private MasterNode masterNode ; 
 - private boolean isAnswerPending = false ; 
 private long callId ; 
 private Peer peer ; 
 private CallVM callVM ; 
 @ @ - 56 , 15 + 56 , 15 @ @ public class CallSlaveActor extends CallActor { 
 super . onBusStarted ( ) ; 
 callVM = spawnNewVM ( callId , peer , new ArrayList < CallMember > ( ) , CallState . CALLING _ INCOMING ) ; 
 callVM . getIsMuted ( ) . change ( isMuted ( ) ) ; 
 - callManager . send ( new CallManagerActor . IncomingCallReady ( callId ) , self ( ) ) ; 
 } 
 
 public void onMasterNodeChanged ( int fromUid , long fromDeviceId ) { 
 masterNode = new MasterNode ( fromUid , fromDeviceId ) ; 
 - if ( isAnswerPending ) { 
 - isAnswerPending = false ; 
 - sendSignalingMessage ( masterNode . getUid ( ) , masterNode . getDeviceId ( ) , new ApiAnswerCall ( ) ) ; 
 - } 
 + 
 + / / 
 + / / Notify UI only after successful master node information received 
 + / / 
 + callManager . send ( new CallManagerActor . IncomingCallReady ( callId ) , self ( ) ) ; 
 } 
 
 public void onNeedOffer ( int destUid , long destDeviceId ) { 
 @ @ - 73 , 12 + 73 , 7 @ @ public class CallSlaveActor extends CallActor { 
 
 public void doAnswer ( ) { 
 callVM . getState ( ) . change ( CallState . CONNECTING ) ; 
 - 
 - if ( masterNode = = null ) { 
 - isAnswerPending = true ; 
 - } else { 
 - sendSignalingMessage ( masterNode . getUid ( ) , masterNode . getDeviceId ( ) , new ApiAnswerCall ( ) ) ; 
 - } 
 + sendSignalingMessage ( masterNode . getUid ( ) , masterNode . getDeviceId ( ) , new ApiAnswerCall ( ) ) ; 
 } 
 
 @ Override 
 @ @ - 89 , 6 + 84 , 13 @ @ public class CallSlaveActor extends CallActor { 
 } 
 
 @ Override 
 + public void doEndCall ( ) { 
 + super . doEndCall ( ) ; 
 + callVM . getState ( ) . change ( CallState . ENDED ) ; 
 + sendSignalingMessage ( masterNode . getUid ( ) , masterNode . getDeviceId ( ) , new ApiRejectCall ( ) ) ; 
 + } 
 + 
 + @ Override 
 public void onBusStopped ( ) { 
 super . onBusStopped ( ) ; 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 index a19ba28 . . a6664fc 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 @ @ - 65 , 10 + 65 , 10 @ @ public class CallsModule extends AbsModule { 
 } 
 
 public void endCall ( long callId ) { 
 - callManager . send ( new CallManagerActor . EndCall ( callId ) ) ; 
 + callManager . send ( new CallManagerActor . DoEndCall ( callId ) ) ; 
 } 
 
 public void answerCall ( long callId ) { 
 - callManager . send ( new CallManagerActor . AnswerCall ( callId ) ) ; 
 + callManager . send ( new CallManagerActor . DoAnswerCall ( callId ) ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / MasterCallMember . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / MasterCallMember . java 
 new file mode 100644 
 index 0000000 . . dd413c6 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / entity / MasterCallMember . java 
 @ @ - 0 , 0 + 1 , 45 @ @ 
 + package im . actor . core . modules . calls . entity ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . entity . GroupMember ; 
 + import im . actor . runtime . function . Function ; 
 + import im . actor . runtime . function . Predicate ; 
 + 
 + public class MasterCallMember extends CallMember { 
 + 
 + public static Function < GroupMember , MasterCallMember > FROM _ MEMBER = new Function < GroupMember , MasterCallMember > ( ) { 
 + @ Override 
 + public MasterCallMember apply ( GroupMember groupMember ) { 
 + return new MasterCallMember ( groupMember . getUid ( ) , CallMemberState . RINGING ) ; 
 + } 
 + } ; 
 + 
 + public static Predicate < MasterCallMember > PREDICATE ( final int uid , final long deviceId ) { 
 + return new Predicate < MasterCallMember > ( ) { 
 + @ Override 
 + public boolean apply ( MasterCallMember masterCallMember ) { 
 + return masterCallMember . getUid ( ) = = uid & & masterCallMember . getDeviceId ( ) . contains ( deviceId ) ; 
 + } 
 + } ; 
 + } 
 + 
 + public static Predicate < MasterCallMember > PREDICATE ( final int uid ) { 
 + return new Predicate < MasterCallMember > ( ) { 
 + @ Override 
 + public boolean apply ( MasterCallMember masterCallMember ) { 
 + return masterCallMember . getUid ( ) = = uid ; 
 + } 
 + } ; 
 + } 
 + 
 + private ArrayList < Long > deviceId = new ArrayList < > ( ) ; 
 + 
 + public MasterCallMember ( int uid , CallMemberState state ) { 
 + super ( uid , state ) ; 
 + } 
 + 
 + public ArrayList < Long > getDeviceId ( ) { 
 + return deviceId ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / JsMediaStream . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / JsMediaStream . java 
 index 79c0214 . . fc0137e 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / JsMediaStream . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / JsMediaStream . java 
 @ @ - 36 , 7 + 36 , 14 @ @ public class JsMediaStream extends JavaScriptObject { 
 public final void stopAll ( ) { 
 JsArray < JsMediaStreamTrack > tracks = getTracks ( ) ; 
 for ( int i = 0 ; i < tracks . length ( ) ; i + + ) { 
 - tracks . get ( i ) . stop ( ) ; 
 + tracks . get ( i ) . setEnabled ( false ) ; 
 + } 
 + } 
 + 
 + public final void startAll ( ) { 
 + JsArray < JsMediaStreamTrack > tracks = getTracks ( ) ; 
 + for ( int i = 0 ; i < tracks . length ( ) ; i + + ) { 
 + tracks . get ( i ) . setEnabled ( true ) ; 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java 
 index 05a3780 . . 7bfc7aa 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / webrtc / MediaStream . java 
 @ @ - 36 , 10 + 36 , 17 @ @ public class MediaStream implements WebRTCMediaStream { 
 
 @ Override 
 public void setEnabled ( boolean isEnabled ) { 
 - if ( isEnabled ) { 
 - audio . play ( ) ; 
 + if ( audio ! = null ) { 
 + if ( isEnabled ) { 
 + audio . play ( ) ; 
 + } else { 
 + audio . pause ( ) ; 
 + } 
 + } 
 + if ( ! isEnabled ) { 
 + stream . stopAll ( ) ; 
 } else { 
 - audio . pause ( ) ; 
 + stream . startAll ( ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java 
 index 234c785 . . 3aab1ce 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java 
 @ @ - 93 , 6 + 93 , 14 @ @ public class ManagedList < T > extends ArrayList < T > { 
 return get ( 0 ) ; 
 } 
 
 + public T firstOrNull ( ) { 
 + if ( size ( ) = = 0 ) { 
 + return null ; 
 + } else { 
 + return get ( 0 ) ; 
 + } 
 + } 
 + 
 public Promise < T > firstPromise ( ) { 
 return new Promise < T > ( new PromiseFunc < T > ( ) { 
 @ Override

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json 
 index 21881e7 . . c585341 100644 
 - - - a / actor - sdk / sdk - api / actor . json 
 + + + b / actor - sdk / sdk - api / actor . json 
 @ @ - 12512 , 6 + 12512 , 24 @ @ 
 " argument " : " sessionId " , 
 " category " : " full " , 
 " description " : " Session Id of candidate " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " index " , 
 + " category " : " full " , 
 + " description " : " Index of candidate " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " id " , 
 + " category " : " full " , 
 + " description " : " Id of candidate " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " sdp " , 
 + " category " : " full " , 
 + " description " : " SDP of candidate " 
 } 
 ] , 
 " trait " : { 
 @ @ - 12526 , 6 + 12544 , 21 @ @ 
 } , 
 " id " : 1 , 
 " name " : " sessionId " 
 + } , 
 + { 
 + " type " : " int32 " , 
 + " id " : 2 , 
 + " name " : " index " 
 + } , 
 + { 
 + " type " : " string " , 
 + " id " : 3 , 
 + " name " : " id " 
 + } , 
 + { 
 + " type " : " string " , 
 + " id " : 4 , 
 + " name " : " sdp " 
 } 
 ] 
 } 
 diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 index ce7385b . . aab1775 100644 
 - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 @ @ - 10769 , 6 + 10769 , 21 @ @ 
 < ref role = " wb18D " node = " 2vxDjotnUB8 " resolve = " randomId " / > 
 < / node > 
 < / node > 
 + < node concept = " 2m7Kf5 " id = " 3Tolai5O6hO " role = " 2m0hLx " > 
 + < property role = " 2m7DUN " value = " 2 " / > 
 + < property role = " TrG5h " value = " index " / > 
 + < node concept = " 2m5ndE " id = " 3Tolai5O6hU " role = " 2m7DVh " / > 
 + < / node > 
 + < node concept = " 2m7Kf5 " id = " 3Tolai5O6hX " role = " 2m0hLx " > 
 + < property role = " 2m7DUN " value = " 3 " / > 
 + < property role = " TrG5h " value = " id " / > 
 + < node concept = " 2m5ndX " id = " 3Tolai5O6i5 " role = " 2m7DVh " / > 
 + < / node > 
 + < node concept = " 2m7Kf5 " id = " 3Tolai5O6i8 " role = " 2m0hLx " > 
 + < property role = " 2m7DUN " value = " 4 " / > 
 + < property role = " TrG5h " value = " sdp " / > 
 + < node concept = " 2m5ndX " id = " 3Tolai5O6ii " role = " 2m7DVh " / > 
 + < / node > 
 < node concept = " Nu42z " id = " 3Tolai5NNTV " role = " 3BtCOu " > 
 < property role = " Nu42W " value = " 03 " / > 
 < / node > 
 @ @ - 10780 , 6 + 10795 , 21 @ @ 
 < property role = " NX6R2 " value = " Session Id of candidate " / > 
 < ref role = " NX6Kv " node = " 3Tolai5NNYb " resolve = " sessionId " / > 
 < / node > 
 + < node concept = " NX1gA " id = " 3Tolai5O6ip " role = " NXodf " > 
 + < property role = " NX6R2 " value = " Index of candidate " / > 
 + < property role = " 1GSvIU " value = " full " / > 
 + < ref role = " NX6Kv " node = " 3Tolai5O6hO " resolve = " index " / > 
 + < / node > 
 + < node concept = " NX1gA " id = " 3Tolai5O6iz " role = " NXodf " > 
 + < property role = " NX6R2 " value = " Id of candidate " / > 
 + < property role = " 1GSvIU " value = " full " / > 
 + < ref role = " NX6Kv " node = " 3Tolai5O6hX " resolve = " id " / > 
 + < / node > 
 + < node concept = " NX1gA " id = " 3Tolai5O6iJ " role = " NXodf " > 
 + < property role = " NX6R2 " value = " SDP of candidate " / > 
 + < property role = " 1GSvIU " value = " full " / > 
 + < ref role = " NX6Kv " node = " 3Tolai5O6i8 " resolve = " sdp " / > 
 + < / node > 
 < / node > 
 < node concept = " 2m5naR " id = " 3Tolai5NNUQ " role = " 2m5mJr " > 
 < property role = " TrG5h " value = " Offer " / > 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 index 8dec812 . . 4c5960f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 @ @ - 381 , 7 + 381 , 7 @ @ public class AAPromiseFunc : NSObject , ARPromiseFunc { 
 
 extension ARPromise { 
 convenience init ( closure : ( resolver : ARPromiseResolver ) - > ( ) ) { 
 - super . init ( AAPromiseFunc ( closure : closure ) ) 
 + self . init ( executor : AAPromiseFunc ( closure : closure ) ) 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift 
 index e20b974 . . d65d367 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorRuntime . swift 
 @ @ - 19 , 6 + 19 , 6 @ @ class AAActorRuntime { 
 ARCocoaFileSystemProxyProvider . setFileSystemRuntime ( CocoaFileSystemRuntime ( ) ) 
 ARCocoaNetworkProxyProvider . setNetworkRuntime ( CocoaNetworkRuntime ( ) ) 
 ARCocoaAssetsProxyProvider . setAssetsRuntimeWithARAssetsRuntime ( CocoaAssetsRuntime ( ) ) 
 - 
 + ARCocoaWebRTCProxyProvider . setWebRTCRuntime ( CocoaWebRTCRuntime ( ) ) 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 index aa669dc . . 3a6137d 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 @ @ - 70 , 9 + 70 , 9 @ @ class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnec 
 return ARPromise ( closure : { ( resolver ) - > ( ) in 
 self . peerConnection . createAnswer ( RTCMediaConstraints ( ) , didCreate : { ( desc , error ) - > ( ) in 
 if error = = nil { 
 - resolver . result ( desc . description ) 
 + resolver . result ( ARWebRTCSessionDescription ( type : " answer " , withSDP : desc . description ) ) 
 } else { 
 - resolver . error ( JavaLangException ( NSString : " error " ) ) 
 + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) 
 } 
 } ) 
 } ) 
 @ @ - 82 , 34 + 82 , 33 @ @ class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnec 
 return ARPromise ( closure : { ( resolver ) - > ( ) in 
 self . peerConnection . createOffer ( RTCMediaConstraints ( ) , didCreate : { ( desc , error ) - > ( ) in 
 if error = = nil { 
 - resolver . result ( desc . description ) 
 + resolver . result ( ARWebRTCSessionDescription ( type : " offer " , withSDP : desc . description ) ) 
 } else { 
 - resolver . error ( JavaLangException ( NSString : " error " ) ) 
 + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) 
 } 
 } ) 
 } ) 
 } 
 
 - func setRemoteDescriptionWithType ( type : String , withSPD sdp : String ) - > ARPromise { 
 + func setRemoteDescription ( description _ : ARWebRTCSessionDescription ) - > ARPromise { 
 return ARPromise ( executor : AAPromiseFunc ( closure : { ( resolver ) - > ( ) in 
 - self . peerConnection . setRemoteDescription ( RTCSessionDescription ( type : type , sdp : sdp ) , didSet : { ( error ) - > ( ) in 
 + self . peerConnection . setRemoteDescription ( RTCSessionDescription ( type : description _ . type , sdp : description _ . sdp ) , didSet : { ( error ) - > ( ) in 
 if ( error = = nil ) { 
 - resolver . result ( JavaLangBoolean ( boolean : true ) ) 
 + resolver . result ( description _ ) 
 } else { 
 - resolver . error ( JavaLangException ( NSString : " error " ) ) 
 + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) 
 } 
 } ) 
 } ) ) 
 - 
 } 
 
 - func setLocalDescriptionWithType ( type : String , withSPD sdp : String ) - > ARPromise { 
 + func setLocalDescription ( description _ : ARWebRTCSessionDescription ) - > ARPromise { 
 return ARPromise ( executor : AAPromiseFunc ( closure : { ( resolver ) - > ( ) in 
 - self . peerConnection . setLocalDescription ( RTCSessionDescription ( type : type , sdp : sdp ) , didSet : { ( error ) - > ( ) in 
 + self . peerConnection . setLocalDescription ( RTCSessionDescription ( type : description _ . type , sdp : description _ . sdp ) , didSet : { ( error ) - > ( ) in 
 if ( error = = nil ) { 
 - resolver . result ( JavaLangBoolean ( boolean : true ) ) 
 + resolver . result ( description _ ) 
 } else { 
 - resolver . error ( JavaLangException ( NSString : " error " ) ) 
 + resolver . error ( JavaLangException ( NSString : " Error \ ( error . description ) " ) ) 
 } 
 } ) 
 } ) ) 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java 
 index 1dc7f31 . . 3250d54 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiCandidate . java 
 @ @ - 17 , 9 + 17 , 15 @ @ import java . util . ArrayList ; 
 public class ApiCandidate extends ApiWebRTCSignaling { 
 
 private long sessionId ; 
 + private int index ; 
 + private String id ; 
 + private String sdp ; 
 
 - public ApiCandidate ( long sessionId ) { 
 + public ApiCandidate ( long sessionId , int index , @ NotNull String id , @ NotNull String sdp ) { 
 this . sessionId = sessionId ; 
 + this . index = index ; 
 + this . id = id ; 
 + this . sdp = sdp ; 
 } 
 
 public ApiCandidate ( ) { 
 @ @ - 34 , 20 + 40 , 49 @ @ public class ApiCandidate extends ApiWebRTCSignaling { 
 return this . sessionId ; 
 } 
 
 + public int getIndex ( ) { 
 + return this . index ; 
 + } 
 + 
 + @ NotNull 
 + public String getId ( ) { 
 + return this . id ; 
 + } 
 + 
 + @ NotNull 
 + public String getSdp ( ) { 
 + return this . sdp ; 
 + } 
 + 
 @ Override 
 public void parse ( BserValues values ) throws IOException { 
 this . sessionId = values . getLong ( 1 ) ; 
 + this . index = values . getInt ( 2 ) ; 
 + this . id = values . getString ( 3 ) ; 
 + this . sdp = values . getString ( 4 ) ; 
 } 
 
 @ Override 
 public void serialize ( BserWriter writer ) throws IOException { 
 writer . writeLong ( 1 , this . sessionId ) ; 
 + writer . writeInt ( 2 , this . index ) ; 
 + if ( this . id = = null ) { 
 + throw new IOException ( ) ; 
 + } 
 + writer . writeString ( 3 , this . id ) ; 
 + if ( this . sdp = = null ) { 
 + throw new IOException ( ) ; 
 + } 
 + writer . writeString ( 4 , this . sdp ) ; 
 } 
 
 @ Override 
 public String toString ( ) { 
 String res = " struct Candidate { " ; 
 res + = " sessionId = " + this . sessionId ; 
 + res + = " , index = " + this . index ; 
 + res + = " , id = " + this . id ; 
 + res + = " , sdp = " + this . sdp ; 
 res + = " } " ; 
 return res ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index c2de058 . . a72ebbc 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 3 , 20 + 3 , 31 @ @ package im . actor . core . modules . calls ; 
 import org . jetbrains . annotations . Nullable ; 
 
 import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 
 + import im . actor . core . api . ApiAnswer ; 
 + import im . actor . core . api . ApiCandidate ; 
 + import im . actor . core . api . ApiOffer ; 
 import im . actor . core . api . ApiWebRTCSignaling ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . eventbus . EventBusActor ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . WebRTC ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . function . Consumer ; 
 import im . actor . runtime . function . Function ; 
 import im . actor . runtime . promise . Promise ; 
 + import im . actor . runtime . promise . Promises ; 
 + import im . actor . runtime . webrtc . WebRTCLocalStream ; 
 import im . actor . runtime . webrtc . WebRTCPeerConnection ; 
 
 public class CallActor extends EventBusActor { 
 
 private static final String TAG = " CallActor " ; 
 
 + private HashMap < Integer , HashMap < Long , ActorRef > > peerConnections = new HashMap < > ( ) ; 
 + 
 public CallActor ( ModuleContext context ) { 
 super ( context ) ; 
 } 
 @ @ - 25 , 8 + 36 , 22 @ @ public class CallActor extends EventBusActor { 
 super ( busId , context ) ; 
 } 
 
 - public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { 
 + / / 
 + / / Signaling Wrappers 
 + / / 
 
 + public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { 
 + if ( signaling instanceof ApiOffer ) { 
 + ApiOffer offer = ( ApiOffer ) signaling ; 
 + getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnOffer ( offer . getSdp ( ) ) ) ; 
 + } else if ( signaling instanceof ApiAnswer ) { 
 + ApiAnswer answer = ( ApiAnswer ) signaling ; 
 + getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnAnswer ( answer . getSdp ( ) ) ) ; 
 + } else if ( signaling instanceof ApiCandidate ) { 
 + ApiCandidate candidate = ( ApiCandidate ) signaling ; 
 + getPeer ( fromUid , fromDeviceId ) . send ( new PeerConnectionActor . OnCandidate ( candidate . getIndex ( ) , 
 + candidate . getId ( ) , candidate . getSdp ( ) ) ) ; 
 + } 
 } 
 
 public final void sendSignalingMessage ( int uid , long deviceId , ApiWebRTCSignaling signaling ) { 
 @ @ - 58 , 37 + 83 , 32 @ @ public class CallActor extends EventBusActor { 
 onSignalingMessage ( senderId , senderDeviceId , signaling ) ; 
 } 
 
 - protected Promise < PeerConnection > createConnection ( final int userId , final long deviceId ) { 
 - return WebRTC . createPeerConnection ( ) . map ( new Function < WebRTCPeerConnection , PeerConnection > ( ) { 
 - @ Override 
 - public PeerConnection apply ( WebRTCPeerConnection webRTCPeerConnection ) { 
 - return new PeerConnection ( userId , deviceId , webRTCPeerConnection ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - protected static class PeerConnection { 
 - 
 - private int uid ; 
 - private long deviceId ; 
 - private WebRTCPeerConnection webRTCPeerConnection ; 
 - 
 - public PeerConnection ( int uid , long deviceId , WebRTCPeerConnection webRTCPeerConnection ) { 
 - this . uid = uid ; 
 - this . deviceId = deviceId ; 
 - this . webRTCPeerConnection = webRTCPeerConnection ; 
 - } 
 - 
 - public int getUid ( ) { 
 - return uid ; 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof PeerConnectionActor . DoAnswer ) { 
 + PeerConnectionActor . DoAnswer answer = ( PeerConnectionActor . DoAnswer ) message ; 
 + sendSignalingMessage ( answer . getUid ( ) , answer . getDeviceId ( ) , 
 + new ApiAnswer ( 0 , answer . getSdp ( ) ) ) ; 
 + } else if ( message instanceof PeerConnectionActor . DoOffer ) { 
 + PeerConnectionActor . DoOffer offer = ( PeerConnectionActor . DoOffer ) message ; 
 + sendSignalingMessage ( offer . getUid ( ) , offer . getDeviceId ( ) , 
 + new ApiOffer ( 0 , offer . getSdp ( ) ) ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 } 
 + } 
 
 - public long getDeviceId ( ) { 
 - return deviceId ; 
 + protected ActorRef getPeer ( int uid , long deviceId ) { 
 + if ( ! peerConnections . containsKey ( uid ) ) { 
 + peerConnections . put ( uid , new HashMap < Long , ActorRef > ( ) ) ; 
 } 
 - 
 - public WebRTCPeerConnection getWebRTCPeerConnection ( ) { 
 - return webRTCPeerConnection ; 
 + HashMap < Long , ActorRef > refs = peerConnections . get ( uid ) ; 
 + if ( refs . containsKey ( deviceId ) ) { 
 + return refs . get ( deviceId ) ; 
 } 
 + ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / uid : " + uid + " / " + deviceId , 
 + PeerConnectionActor . CONSTRUCTOR ( self ( ) , uid , deviceId , context ( ) ) ) ; 
 + refs . put ( deviceId , ref ) ; 
 + return ref ; 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 index 962f191 . . 09ddfc5 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallMasterActor . java 
 @ @ - 51 , 43 + 51 , 7 @ @ public class CallMasterActor extends CallActor { 
 @ Override 
 public void onDeviceConnected ( final int uid , final long deviceId ) { 
 Log . d ( TAG , " onDeviceConnected " ) ; 
 - final long sessionId = RandomUtils . nextRid ( ) ; 
 - WebRTC . createPeerConnection ( ) . mapPromiseSelf ( new Function < WebRTCPeerConnection , Promise < WebRTCLocalStream > > ( ) { 
 - @ Override 
 - public Promise < WebRTCLocalStream > apply ( final WebRTCPeerConnection webRTCPeerConnection ) { 
 - return WebRTC . getUserAudio ( ) . then ( new Consumer < WebRTCLocalStream > ( ) { 
 - @ Override 
 - public void apply ( WebRTCLocalStream stream ) { 
 - webRTCPeerConnection . addOwnStream ( stream ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) . mapPromiseSelf ( new Function < WebRTCPeerConnection , Promise < Boolean > > ( ) { 
 - @ Override 
 - public Promise < Boolean > apply ( final WebRTCPeerConnection webRTCPeerConnection ) { 
 - return webRTCPeerConnection . createOffer ( ) . then ( new Consumer < String > ( ) { 
 - @ Override 
 - public void apply ( String sdp ) { 
 - sendSignalingMessage ( uid , deviceId , new ApiOffer ( sessionId , sdp ) ) ; 
 - } 
 - } ) . mapPromise ( new Function < String , Promise < Boolean > > ( ) { 
 - @ Override 
 - public Promise < Boolean > apply ( String s ) { 
 - return webRTCPeerConnection . setLocalDescription ( " offer " , s ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) . then ( new Consumer < WebRTCPeerConnection > ( ) { 
 - @ Override 
 - public void apply ( WebRTCPeerConnection webRTCPeerConnection ) { 
 - Log . d ( TAG , " onCallCreated : then " ) ; 
 - } 
 - } ) . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - Log . d ( TAG , " onCallCreated : failure " ) ; 
 - } 
 - } ) . done ( self ( ) ) ; 
 + getPeer ( uid , deviceId ) . send ( new PeerConnectionActor . OnOfferNeeded ( ) ) ; 
 } 
 
 @ Override 
 @ @ - 96 , 11 + 60 , 6 @ @ public class CallMasterActor extends CallActor { 
 } 
 
 @ Override 
 - public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { 
 - Log . d ( TAG , " onSignalingMessage " ) ; 
 - } 
 - 
 - @ Override 
 public void onBusShutdown ( ) { 
 Log . d ( TAG , " onBusShutdown " ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 index 6d43f84 . . 8c2d660 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 @ @ - 1 , 8 + 1 , 16 @ @ 
 package im . actor . core . modules . calls ; 
 
 + import im . actor . core . api . ApiAnswer ; 
 + import im . actor . core . api . ApiOffer ; 
 import im . actor . core . api . ApiWebRTCSignaling ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . runtime . Log ; 
 + import im . actor . runtime . WebRTC ; 
 + import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . function . Function ; 
 + import im . actor . runtime . promise . Promise ; 
 + import im . actor . runtime . webrtc . WebRTCLocalStream ; 
 + import im . actor . runtime . webrtc . WebRTCPeerConnection ; 
 
 public class CallSlaveActor extends CallActor { 
 
 @ @ - 29 , 11 + 37 , 6 @ @ public class CallSlaveActor extends CallActor { 
 } 
 
 @ Override 
 - public void onSignalingMessage ( int fromUid , long fromDeviceId , ApiWebRTCSignaling signaling ) { 
 - Log . d ( TAG , " onSignalingMessage " ) ; 
 - } 
 - 
 - @ Override 
 public void onBusShutdown ( ) { 
 Log . d ( TAG , " onBusShutdown " ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 new file mode 100644 
 index 0000000 . . ed00252 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 @ @ - 0 , 0 + 1 , 447 @ @ 
 + package im . actor . core . modules . calls ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import org . jetbrains . annotations . NotNull ; 
 + 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . util . ModuleActor ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . WebRTC ; 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . function . Function ; 
 + import im . actor . runtime . function . FunctionTupled2 ; 
 + import im . actor . runtime . promise . Promise ; 
 + import im . actor . runtime . promise . Promises ; 
 + import im . actor . runtime . webrtc . WebRTCLocalStream ; 
 + import im . actor . runtime . webrtc . WebRTCPeerConnection ; 
 + import im . actor . runtime . webrtc . WebRTCPeerConnectionCallback ; 
 + import im . actor . runtime . webrtc . WebRTCRemoteStream ; 
 + import im . actor . runtime . webrtc . WebRTCSessionDescription ; 
 + 
 + public class PeerConnectionActor extends ModuleActor { 
 + 
 + @ NotNull 
 + public static ActorCreator CONSTRUCTOR ( @ NotNull final ActorRef root , 
 + final int uid , 
 + final long deviceId , 
 + @ NotNull final ModuleContext context ) { 
 + return new ActorCreator ( ) { 
 + @ Override 
 + public Actor create ( ) { 
 + return new PeerConnectionActor ( root , uid , deviceId , context ) ; 
 + } 
 + } ; 
 + } 
 + 
 + private final String TAG ; 
 + @ NotNull 
 + private final ActorRef root ; 
 + private final int uid ; 
 + private final long deviceId ; 
 + private boolean isReady = false ; 
 + private boolean isReadyForCandidates = false ; 
 + @ NotNull 
 + private WebRTCPeerConnection peerConnection ; 
 + @ NotNull 
 + private State state = State . INITIALIZATION ; 
 + 
 + public PeerConnectionActor ( @ NotNull ActorRef root , int uid , long deviceId , @ NotNull ModuleContext context ) { 
 + super ( context ) ; 
 + TAG = " PeerConnection # " + uid + " ( " + deviceId + " ) " ; 
 + this . root = root ; 
 + this . uid = uid ; 
 + this . deviceId = deviceId ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + 
 + public long getDeviceId ( ) { 
 + return deviceId ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + 
 + Log . d ( TAG , " preStart " ) ; 
 + 
 + isReady = false ; 
 + Promises . tuple ( WebRTC . createPeerConnection ( ) , WebRTC . getUserAudio ( ) ) . map ( new FunctionTupled2 < WebRTCPeerConnection , WebRTCLocalStream , WebRTCPeerConnection > ( ) { 
 + @ Override 
 + public WebRTCPeerConnection apply ( WebRTCPeerConnection webRTCPeerConnection , WebRTCLocalStream stream ) { 
 + webRTCPeerConnection . addOwnStream ( stream ) ; 
 + return webRTCPeerConnection ; 
 + } 
 + } ) . then ( new Consumer < WebRTCPeerConnection > ( ) { 
 + @ Override 
 + public void apply ( WebRTCPeerConnection webRTCPeerConnection ) { 
 + Log . d ( TAG , " preStart : then " ) ; 
 + PeerConnectionActor . this . peerConnection = webRTCPeerConnection ; 
 + PeerConnectionActor . this . peerConnection . addCallback ( new WebRTCPeerConnectionCallback ( ) { 
 + @ Override 
 + public void onCandidate ( int label , String id , String candidate ) { 
 + root . send ( new DoCandidate ( uid , deviceId , label , id , candidate ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onCandidatesEnd ( ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onStreamAdded ( WebRTCRemoteStream stream ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onStreamRemoved ( WebRTCRemoteStream stream ) { 
 + 
 + } 
 + } ) ; 
 + state = State . WAITING _ HANDSHAKE ; 
 + isReady = true ; 
 + unstashAll ( ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + / / TODO : Handle It 
 + 
 + Log . d ( TAG , " preStart : error " ) ; 
 + } 
 + } ) . done ( self ( ) ) ; 
 + } 
 + 
 + public void onOfferNeeded ( ) { 
 + / / Ignore if we are not waiting for handshake 
 + if ( state ! = State . WAITING _ HANDSHAKE ) { 
 + return ; 
 + } 
 + 
 + / / 
 + / / Stages 
 + / / 1 . Create Offer 
 + / / 2 . Set Local Description 
 + / / 3 . Send Offer 
 + / / 
 + 
 + Log . d ( TAG , " onOfferNeeded " ) ; 
 + isReady = false ; 
 + peerConnection . createOffer ( ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 + @ Override 
 + public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 + return peerConnection . setLocalDescription ( description ) ; 
 + } 
 + } ) . then ( new Consumer < WebRTCSessionDescription > ( ) { 
 + @ Override 
 + public void apply ( WebRTCSessionDescription description ) { 
 + Log . d ( TAG , " onOfferNeeded : then " ) ; 
 + root . send ( new DoOffer ( uid , deviceId , description . getSdp ( ) ) ) ; 
 + state = State . WAITING _ ANSWER ; 
 + isReady = true ; 
 + unstashAll ( ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + Log . d ( TAG , " onOfferNeeded : failure " ) ; 
 + e . printStackTrace ( ) ; 
 + / / TODO : Handle It 
 + } 
 + } ) . done ( self ( ) ) ; 
 + } 
 + 
 + public void onOffer ( @ NotNull String sdp ) { 
 + / / Ignore if we are not waiting for handshake 
 + if ( state ! = State . WAITING _ HANDSHAKE ) { 
 + return ; 
 + } 
 + 
 + / / 
 + / / Stages 
 + / / 1 . Set Remote Description 
 + / / 2 . Create Answer 
 + / / 3 . Set Local Description 
 + / / 4 . Send Answer 
 + / / 5 . Enter READY mode 
 + / / 
 + 
 + Log . d ( TAG , " onOffer " ) ; 
 + isReady = false ; 
 + peerConnection . setRemoteDescription ( new WebRTCSessionDescription ( " offer " , sdp ) ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 + @ Override 
 + public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 + return peerConnection . createAnswer ( ) ; 
 + } 
 + } ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 + @ Override 
 + public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 + return peerConnection . setLocalDescription ( description ) ; 
 + } 
 + } ) . then ( new Consumer < WebRTCSessionDescription > ( ) { 
 + @ Override 
 + public void apply ( WebRTCSessionDescription description ) { 
 + Log . d ( TAG , " onOffer : then " ) ; 
 + root . send ( new DoAnswer ( uid , deviceId , description . getSdp ( ) ) ) ; 
 + onHandShakeCompleted ( ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + Log . d ( TAG , " onOffer : failure " ) ; 
 + e . printStackTrace ( ) ; 
 + / / TODO : Handle It 
 + } 
 + } ) . done ( self ( ) ) ; 
 + } 
 + 
 + public void onAnswer ( @ NotNull String sdp ) { 
 + / / Ignore if we are not waiting for answer 
 + if ( state ! = State . WAITING _ ANSWER ) { 
 + return ; 
 + } 
 + 
 + / / 
 + / / Stages 
 + / / 1 . Set Remote Description 
 + / / 2 . Enter READY mode 
 + / / 
 + Log . d ( TAG , " onAnswer " ) ; 
 + peerConnection . setRemoteDescription ( new WebRTCSessionDescription ( " answer " , sdp ) ) . then ( new Consumer < WebRTCSessionDescription > ( ) { 
 + @ Override 
 + public void apply ( WebRTCSessionDescription description ) { 
 + Log . d ( TAG , " onAnswer : then " ) ; 
 + onHandShakeCompleted ( ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + Log . d ( TAG , " onAnswer : failure " ) ; 
 + e . printStackTrace ( ) ; 
 + / / TODO : Handle It 
 + } 
 + } ) . done ( self ( ) ) ; 
 + } 
 + 
 + private void onHandShakeCompleted ( ) { 
 + isReady = true ; 
 + isReadyForCandidates = true ; 
 + state = State . READY ; 
 + unstashAll ( ) ; 
 + } 
 + 
 + public void onCandidate ( int index , @ NotNull String id , @ NotNull String sdp ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof OnOffer ) { 
 + if ( ! isReady ) { 
 + stash ( ) ; 
 + } 
 + onOffer ( ( ( OnOffer ) message ) . getSdp ( ) ) ; 
 + } else if ( message instanceof OnAnswer ) { 
 + if ( ! isReady ) { 
 + stash ( ) ; 
 + } 
 + onAnswer ( ( ( OnAnswer ) message ) . getSdp ( ) ) ; 
 + } else if ( message instanceof OnCandidate ) { 
 + if ( ! isReady | | ! isReadyForCandidates ) { 
 + stash ( ) ; 
 + } 
 + OnCandidate candidate = ( OnCandidate ) message ; 
 + onCandidate ( candidate . getIndex ( ) , candidate . getId ( ) , candidate . getSdp ( ) ) ; 
 + } else if ( message instanceof OnOfferNeeded ) { 
 + if ( ! isReady ) { 
 + stash ( ) ; 
 + } 
 + onOfferNeeded ( ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 + / / 
 + / / Outbound Messages 
 + / / 
 + 
 + public static class DoOffer { 
 + 
 + @ Property ( " nonatomic , readonly " ) 
 + private int uid ; 
 + @ Property ( " nonatomic , readonly " ) 
 + private long deviceId ; 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private String sdp ; 
 + 
 + public DoOffer ( int uid , long deviceId , @ NotNull String sdp ) { 
 + this . uid = uid ; 
 + this . deviceId = deviceId ; 
 + this . sdp = sdp ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + 
 + public long getDeviceId ( ) { 
 + return deviceId ; 
 + } 
 + 
 + @ NotNull 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + } 
 + 
 + public static class DoAnswer { 
 + 
 + @ Property ( " nonatomic , readonly " ) 
 + private final int uid ; 
 + @ Property ( " nonatomic , readonly " ) 
 + private final long deviceId ; 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private final String sdp ; 
 + 
 + public DoAnswer ( int uid , long deviceId , @ NotNull String sdp ) { 
 + this . uid = uid ; 
 + this . deviceId = deviceId ; 
 + this . sdp = sdp ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + 
 + public long getDeviceId ( ) { 
 + return deviceId ; 
 + } 
 + 
 + @ NotNull 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + } 
 + 
 + public static class DoCandidate { 
 + 
 + private int uid ; 
 + private long deviceId ; 
 + private int index ; 
 + private String id ; 
 + private String sdp ; 
 + 
 + public DoCandidate ( int uid , long deviceId , int index , String id , String sdp ) { 
 + this . uid = uid ; 
 + this . deviceId = deviceId ; 
 + this . index = index ; 
 + this . id = id ; 
 + this . sdp = sdp ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + 
 + public long getDeviceId ( ) { 
 + return deviceId ; 
 + } 
 + 
 + public int getIndex ( ) { 
 + return index ; 
 + } 
 + 
 + public String getId ( ) { 
 + return id ; 
 + } 
 + 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + } 
 + 
 + / / 
 + / / Inbound Messages 
 + / / 
 + 
 + public static class OnOfferNeeded { 
 + 
 + } 
 + 
 + public static class OnOffer { 
 + 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private String sdp ; 
 + 
 + public OnOffer ( @ NotNull String sdp ) { 
 + this . sdp = sdp ; 
 + } 
 + 
 + @ NotNull 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + } 
 + 
 + public static class OnAnswer { 
 + 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private String sdp ; 
 + 
 + public OnAnswer ( @ NotNull String sdp ) { 
 + this . sdp = sdp ; 
 + } 
 + 
 + @ NotNull 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + } 
 + 
 + public static class OnCandidate { 
 + 
 + @ Property ( " nonatomic , readonly " ) 
 + private final int index ; 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private final String sdp ; 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private final String id ; 
 + 
 + public OnCandidate ( int index , @ NotNull String id , @ NotNull String sdp ) { 
 + this . index = index ; 
 + this . id = id ; 
 + this . sdp = sdp ; 
 + } 
 + 
 + public int getIndex ( ) { 
 + return index ; 
 + } 
 + 
 + @ NotNull 
 + public String getId ( ) { 
 + return id ; 
 + } 
 + 
 + @ NotNull 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + } 
 + 
 + private enum State { 
 + INITIALIZATION , WAITING _ HANDSHAKE , WAITING _ ANSWER , READY 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java 
 index 42d3ef2 . . 228072f 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCPeerConnection . java 
 @ @ - 20 , 21 + 20 , 21 @ @ public interface WebRTCPeerConnection { 
 @ ObjectiveCName ( " addOwnStream : " ) 
 void addOwnStream ( @ NotNull WebRTCLocalStream stream ) ; 
 
 - @ ObjectiveCName ( " setLocalDescriptionWithType : withSPD : " ) 
 @ NotNull 
 - Promise < Boolean > setLocalDescription ( @ NotNull String type , @ NotNull String sdp ) ; 
 + @ ObjectiveCName ( " setLocalDescription : " ) 
 + Promise < WebRTCSessionDescription > setLocalDescription ( @ NotNull WebRTCSessionDescription description ) ; 
 
 - @ ObjectiveCName ( " setRemoteDescriptionWithType : withSPD : " ) 
 @ NotNull 
 - Promise < Boolean > setRemoteDescription ( @ NotNull String type , @ NotNull String sdp ) ; 
 + @ ObjectiveCName ( " setRemoteDescription : " ) 
 + Promise < WebRTCSessionDescription > setRemoteDescription ( @ NotNull WebRTCSessionDescription description ) ; 
 
 - @ ObjectiveCName ( " creteOffer " ) 
 @ NotNull 
 - Promise < String > createOffer ( ) ; 
 + @ ObjectiveCName ( " creteOffer " ) 
 + Promise < WebRTCSessionDescription > createOffer ( ) ; 
 
 - @ ObjectiveCName ( " createAnswer " ) 
 @ NotNull 
 - Promise < String > createAnswer ( ) ; 
 + @ ObjectiveCName ( " createAnswer " ) 
 + Promise < WebRTCSessionDescription > createAnswer ( ) ; 
 
 @ ObjectiveCName ( " close " ) 
 void close ( ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCSessionDescription . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCSessionDescription . java 
 new file mode 100644 
 index 0000000 . . 458d904 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / WebRTCSessionDescription . java 
 @ @ - 0 , 0 + 1 , 32 @ @ 
 + package im . actor . runtime . webrtc ; 
 + 
 + import com . google . j2objc . annotations . ObjectiveCName ; 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import org . jetbrains . annotations . NotNull ; 
 + 
 + public class WebRTCSessionDescription { 
 + 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private final String sdp ; 
 + @ NotNull 
 + @ Property ( " nonatomic , readonly " ) 
 + private final String type ; 
 + 
 + @ ObjectiveCName ( " initWithType : withSDP : " ) 
 + public WebRTCSessionDescription ( @ NotNull String type , @ NotNull String sdp ) { 
 + this . type = type ; 
 + this . sdp = sdp ; 
 + } 
 + 
 + @ NotNull 
 + public String getType ( ) { 
 + return type ; 
 + } 
 + 
 + @ NotNull 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + }
