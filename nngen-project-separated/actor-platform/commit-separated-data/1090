BLEU SCORE: 0.08554426802455123

TEST MSG: fix ( server : encryption ) : respond with random key in LoadEphermalKeys
GENERATED MSG: fix ( sequence ) : return actual seq in GetDifference if needMore = false

TEST DIFF (one line): diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > index b075953 . . 4e20092 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . api . rpc . misc . ResponseVoid < nl > import im . actor . api . rpc . peers . ApiUserOutPeer < nl > import im . actor . server . encryption . EncryptionExtension < nl > < nl > + import scala . concurrent . forkjoin . ThreadLocalRandom < nl > import scala . concurrent . { ExecutionContext , Future } < nl > < nl > final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends EncryptionService { < nl > @ @ - 85 , 7 + 86 , 16 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti < nl > withUserOutPeerF ( userPeer ) { < nl > for { < nl > ( keys , signs ) ← encExt . fetchApiEphermalKeys ( userPeer . userId , keyGroupId ) < nl > - } yield Ok ( ResponsePublicKeys ( keys , signs ) ) < nl > + } yield { < nl > + val ( respKeys , respSigns ) = < nl > + if ( keys . nonEmpty ) { < nl > + val key = keys ( ThreadLocalRandom . current ( ) . nextInt ( keys . length ) ) < nl > + val respSigns = signs filter ( _ . keyId = = key . keyId ) < nl > + ( Vector ( key ) , respSigns ) < nl > + } else ( keys , signs ) < nl > + < nl > + Ok ( ResponsePublicKeys ( respKeys , respSigns ) ) < nl > + } < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala < nl > index 0722656 . . 76f713b 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala < nl > @ @ - 78 , 10 + 78 , 14 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService < nl > ApiEncryptionKeySignature ( 4L , " signalg " , Array [ Byte ] ( 5 ) ) < nl > ) < nl > < nl > - val ephKeys = Vector ( ApiEncryptionKey ( 5L , " ephkeyalg " , Some ( Array [ Byte ] ( 8 , 9 , 10 ) ) , Some ( Array [ Byte ] ( 3 ) ) ) ) < nl > + val ephKeys = Vector ( < nl > + ApiEncryptionKey ( 5L , " ephkeyalg " , Some ( Array [ Byte ] ( 8 , 9 , 10 ) ) , Some ( Array [ Byte ] ( 3 ) ) ) , < nl > + ApiEncryptionKey ( 6L , " ephkeyalg " , Some ( Array [ Byte ] ( 8 , 9 , 10 ) ) , Some ( Array [ Byte ] ( 3 ) ) ) < nl > + ) < nl > val ephSignatures = Vector ( < nl > ApiEncryptionKeySignature ( 5L , " ephsignalg " , Array [ Byte ] ( 40 ) ) , < nl > - ApiEncryptionKeySignature ( 6L , " ephsignalg " , Array [ Byte ] ( 40 ) ) < nl > + ApiEncryptionKeySignature ( 5L , " ephsignalg " , Array [ Byte ] ( 41 ) ) , < nl > + ApiEncryptionKeySignature ( 6L , " ephsignalg " , Array [ Byte ] ( 60 ) ) < nl > ) < nl > < nl > val keyGroupId = { < nl > @ @ - 111 , 9 + 115 , 9 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService < nl > keyGroupId < nl > ) ) { resp ⇒ < nl > inside ( resp ) { < nl > - case Ok ( ResponsePublicKeys ( ks , sigs ) ) ⇒ < nl > - ks . map ( _ . keyId ) shouldBe ephKeys . map ( _ . keyId ) < nl > - sigs . map ( _ . keyId ) shouldBe ephSignatures . take ( 1 ) . map ( _ . keyId ) < nl > + case Ok ( ResponsePublicKeys ( Vector ( k ) , sigs ) ) ⇒ < nl > + ephKeys . map ( _ . keyId ) should contain ( k . keyId ) < nl > + sigs . map ( _ . keyId ) . distinct shouldBe Vector ( k . keyId ) < nl > } < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > index 9002660 . . 0346029 100644 < nl > - - - a / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > + + + b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > @ @ - 44 , 13 + 44 , 21 @ @ class SequenceServiceImpl ( < nl > < nl > override def jhandleGetDifference ( seq : Int , state : Array [ Byte ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseGetDifference ] ] = { < nl > val authorizedAction = requireAuth ( clientData ) . map { implicit client ⇒ < nl > + val seqstateFuture = getSeqState ( client . authId ) < nl > + < nl > for { < nl > / / FIXME : would new updates between getSeqState and getDifference break client state ? < nl > ( updates , needMore , newState ) ← getDifference ( client . authId , state ) < nl > ( diffUpdates , userIds , groupIds ) = extractDiff ( updates ) < nl > ( users , groups ) ← getUsersGroups ( userIds , groupIds ) < nl > + seqstate ← seqstateFuture < nl > } yield { < nl > - val newSeq = updates . lastOption . map ( _ . seq ) . getOrElse ( seq ) < nl > + val newSeq = < nl > + if ( needMore ) { < nl > + updates . lastOption . map ( _ . seq ) . getOrElse ( seq ) < nl > + } else { < nl > + seqstate . _ 1 < nl > + } < nl > < nl > log . debug ( " Requested timestamp { } , { } " , bytesToTimestamp ( state ) , clientData ) < nl > log . debug ( " Updates { } , { } " , updates , clientData ) < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / BaseServiceSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / BaseServiceSpec . scala < nl > index a5e331f . . a05b0d9 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / BaseServiceSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / BaseServiceSpec . scala < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . server . api . rpc . service < nl > < nl > + import akka . actor . ActorSystem < nl > import akka . contrib . pattern . DistributedPubSubExtension < nl > import akka . stream . ActorFlowMaterializer < nl > import org . scalatest . concurrent . ScalaFutures < nl > @ @ - 10 , 8 + 11 , 8 @ @ import im . actor . server . api . ActorSpecHelpers < nl > import im . actor . server . { KafkaSpec , ServiceSpecMatchers , SqlSpecHelpers } < nl > import im . actor . util . testing . _ < nl > < nl > - trait BaseServiceSuite < nl > - extends ActorSuite < nl > + abstract class BaseServiceSuite ( _ system : ActorSystem = { ActorSpecification . createSystem ( ) } ) < nl > + extends ActorSuite ( _ system ) < nl > with FlatSpecLike < nl > with ScalaFutures < nl > with Matchers < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > index 8c7ba47 . . 85979f4 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > @ @ - 1 , 5 + 1 , 9 @ @ < nl > package im . actor . server . api . rpc . service < nl > < nl > + import akka . actor . ActorSystem < nl > + import com . typesafe . config . ConfigFactory < nl > + import im . actor . util . testing . ActorSpecification < nl > + < nl > import scala . concurrent . Await < nl > import scala . concurrent . duration . _ < nl > < nl > @ @ - 17 , 7 + 21 , 15 @ @ import im . actor . server . presences . { GroupPresenceManager , PresenceManager } < nl > import im . actor . server . push . { WeakUpdatesManager , SeqUpdatesManager } < nl > import im . actor . server . social . SocialManager < nl > < nl > - class SequenceServiceSpec extends BaseServiceSuite { < nl > + class SequenceServiceSpec extends BaseServiceSuite ( { < nl > + ActorSpecification . createSystem ( < nl > + ConfigFactory . parseString ( < nl > + " " " < nl > + push . seq - updates - manager . receive - timeout = 3 seconds < nl > + " " " < nl > + ) < nl > + ) < nl > + } ) { < nl > < nl > behavior of " Sequence service " < nl > < nl > @ @ - 136 , 5 + 148 , 20 @ @ class SequenceServiceSpec extends BaseServiceSuite { < nl > < nl > diff . state shouldEqual state3 < nl > } < nl > + < nl > + whenReady ( service . handleGetState ( ) ) { res ⇒ < nl > + val state = res . toOption . get < nl > + state . seq shouldEqual seq3 < nl > + } < nl > + < nl > + Thread . sleep ( 5000 ) < nl > + < nl > + whenReady ( service . handleGetDifference ( seq3 , state3 ) ) { res ⇒ < nl > + val diff = res . toOption . get < nl > + < nl > + diff . needMore shouldEqual false < nl > + diff . seq shouldEqual 1999 < nl > + diff . state shouldEqual state3 < nl > + } < nl > } < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 index b075953 . . 4e20092 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . api . rpc . misc . ResponseVoid 
 import im . actor . api . rpc . peers . ApiUserOutPeer 
 import im . actor . server . encryption . EncryptionExtension 
 
 + import scala . concurrent . forkjoin . ThreadLocalRandom 
 import scala . concurrent . { ExecutionContext , Future } 
 
 final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends EncryptionService { 
 @ @ - 85 , 7 + 86 , 16 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti 
 withUserOutPeerF ( userPeer ) { 
 for { 
 ( keys , signs ) ← encExt . fetchApiEphermalKeys ( userPeer . userId , keyGroupId ) 
 - } yield Ok ( ResponsePublicKeys ( keys , signs ) ) 
 + } yield { 
 + val ( respKeys , respSigns ) = 
 + if ( keys . nonEmpty ) { 
 + val key = keys ( ThreadLocalRandom . current ( ) . nextInt ( keys . length ) ) 
 + val respSigns = signs filter ( _ . keyId = = key . keyId ) 
 + ( Vector ( key ) , respSigns ) 
 + } else ( keys , signs ) 
 + 
 + Ok ( ResponsePublicKeys ( respKeys , respSigns ) ) 
 + } 
 } 
 } 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala 
 index 0722656 . . 76f713b 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceSpec . scala 
 @ @ - 78 , 10 + 78 , 14 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService 
 ApiEncryptionKeySignature ( 4L , " signalg " , Array [ Byte ] ( 5 ) ) 
 ) 
 
 - val ephKeys = Vector ( ApiEncryptionKey ( 5L , " ephkeyalg " , Some ( Array [ Byte ] ( 8 , 9 , 10 ) ) , Some ( Array [ Byte ] ( 3 ) ) ) ) 
 + val ephKeys = Vector ( 
 + ApiEncryptionKey ( 5L , " ephkeyalg " , Some ( Array [ Byte ] ( 8 , 9 , 10 ) ) , Some ( Array [ Byte ] ( 3 ) ) ) , 
 + ApiEncryptionKey ( 6L , " ephkeyalg " , Some ( Array [ Byte ] ( 8 , 9 , 10 ) ) , Some ( Array [ Byte ] ( 3 ) ) ) 
 + ) 
 val ephSignatures = Vector ( 
 ApiEncryptionKeySignature ( 5L , " ephsignalg " , Array [ Byte ] ( 40 ) ) , 
 - ApiEncryptionKeySignature ( 6L , " ephsignalg " , Array [ Byte ] ( 40 ) ) 
 + ApiEncryptionKeySignature ( 5L , " ephsignalg " , Array [ Byte ] ( 41 ) ) , 
 + ApiEncryptionKeySignature ( 6L , " ephsignalg " , Array [ Byte ] ( 60 ) ) 
 ) 
 
 val keyGroupId = { 
 @ @ - 111 , 9 + 115 , 9 @ @ final class EncryptionServiceSpec extends BaseAppSuite with ImplicitAuthService 
 keyGroupId 
 ) ) { resp ⇒ 
 inside ( resp ) { 
 - case Ok ( ResponsePublicKeys ( ks , sigs ) ) ⇒ 
 - ks . map ( _ . keyId ) shouldBe ephKeys . map ( _ . keyId ) 
 - sigs . map ( _ . keyId ) shouldBe ephSignatures . take ( 1 ) . map ( _ . keyId ) 
 + case Ok ( ResponsePublicKeys ( Vector ( k ) , sigs ) ) ⇒ 
 + ephKeys . map ( _ . keyId ) should contain ( k . keyId ) 
 + sigs . map ( _ . keyId ) . distinct shouldBe Vector ( k . keyId ) 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 index 9002660 . . 0346029 100644 
 - - - a / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 + + + b / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 @ @ - 44 , 13 + 44 , 21 @ @ class SequenceServiceImpl ( 
 
 override def jhandleGetDifference ( seq : Int , state : Array [ Byte ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseGetDifference ] ] = { 
 val authorizedAction = requireAuth ( clientData ) . map { implicit client ⇒ 
 + val seqstateFuture = getSeqState ( client . authId ) 
 + 
 for { 
 / / FIXME : would new updates between getSeqState and getDifference break client state ? 
 ( updates , needMore , newState ) ← getDifference ( client . authId , state ) 
 ( diffUpdates , userIds , groupIds ) = extractDiff ( updates ) 
 ( users , groups ) ← getUsersGroups ( userIds , groupIds ) 
 + seqstate ← seqstateFuture 
 } yield { 
 - val newSeq = updates . lastOption . map ( _ . seq ) . getOrElse ( seq ) 
 + val newSeq = 
 + if ( needMore ) { 
 + updates . lastOption . map ( _ . seq ) . getOrElse ( seq ) 
 + } else { 
 + seqstate . _ 1 
 + } 
 
 log . debug ( " Requested timestamp { } , { } " , bytesToTimestamp ( state ) , clientData ) 
 log . debug ( " Updates { } , { } " , updates , clientData ) 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / BaseServiceSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / BaseServiceSpec . scala 
 index a5e331f . . a05b0d9 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / BaseServiceSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / BaseServiceSpec . scala 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . server . api . rpc . service 
 
 + import akka . actor . ActorSystem 
 import akka . contrib . pattern . DistributedPubSubExtension 
 import akka . stream . ActorFlowMaterializer 
 import org . scalatest . concurrent . ScalaFutures 
 @ @ - 10 , 8 + 11 , 8 @ @ import im . actor . server . api . ActorSpecHelpers 
 import im . actor . server . { KafkaSpec , ServiceSpecMatchers , SqlSpecHelpers } 
 import im . actor . util . testing . _ 
 
 - trait BaseServiceSuite 
 - extends ActorSuite 
 + abstract class BaseServiceSuite ( _ system : ActorSystem = { ActorSpecification . createSystem ( ) } ) 
 + extends ActorSuite ( _ system ) 
 with FlatSpecLike 
 with ScalaFutures 
 with Matchers 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 index 8c7ba47 . . 85979f4 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 @ @ - 1 , 5 + 1 , 9 @ @ 
 package im . actor . server . api . rpc . service 
 
 + import akka . actor . ActorSystem 
 + import com . typesafe . config . ConfigFactory 
 + import im . actor . util . testing . ActorSpecification 
 + 
 import scala . concurrent . Await 
 import scala . concurrent . duration . _ 
 
 @ @ - 17 , 7 + 21 , 15 @ @ import im . actor . server . presences . { GroupPresenceManager , PresenceManager } 
 import im . actor . server . push . { WeakUpdatesManager , SeqUpdatesManager } 
 import im . actor . server . social . SocialManager 
 
 - class SequenceServiceSpec extends BaseServiceSuite { 
 + class SequenceServiceSpec extends BaseServiceSuite ( { 
 + ActorSpecification . createSystem ( 
 + ConfigFactory . parseString ( 
 + " " " 
 + push . seq - updates - manager . receive - timeout = 3 seconds 
 + " " " 
 + ) 
 + ) 
 + } ) { 
 
 behavior of " Sequence service " 
 
 @ @ - 136 , 5 + 148 , 20 @ @ class SequenceServiceSpec extends BaseServiceSuite { 
 
 diff . state shouldEqual state3 
 } 
 + 
 + whenReady ( service . handleGetState ( ) ) { res ⇒ 
 + val state = res . toOption . get 
 + state . seq shouldEqual seq3 
 + } 
 + 
 + Thread . sleep ( 5000 ) 
 + 
 + whenReady ( service . handleGetDifference ( seq3 , state3 ) ) { res ⇒ 
 + val diff = res . toOption . get 
 + 
 + diff . needMore shouldEqual false 
 + diff . seq shouldEqual 1999 
 + diff . state shouldEqual state3 
 + } 
 } 
 } 
 \ No newline at end of file
