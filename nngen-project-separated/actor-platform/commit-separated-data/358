BLEU SCORE: 0.2626909894424158

TEST MSG: wip ( core ) : Working on new Intl engines
GENERATED MSG: perf ( core ) : Precached Kuznechik encryption tables

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > index 7a94e54 . . 2adfde6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > @ @ - 37 , 9 + 37 , 13 @ @ import im . actor . core . modules . Modules ; < nl > import im . actor . core . network . RpcException ; < nl > import im . actor . core . util . JavaUtil ; < nl > import im . actor . core . viewmodel . UserPresence ; < nl > + import im . actor . runtime . Assets ; < nl > import im . actor . runtime . LocaleRuntime ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . Runtime ; < nl > + import im . actor . runtime . Storage ; < nl > + import im . actor . runtime . intl . IntlEngine ; < nl > + import im . actor . runtime . json . JSONException ; < nl > < nl > public class I18nEngine { < nl > < nl > @ @ - 67 , 6 + 71 , 14 @ @ public class I18nEngine { < nl > / / Loading locale < nl > this . locale = new HashMap < > ( ) ; < nl > this . currentLocale = runtime . getCurrentLocale ( ) ; < nl > + < nl > + / / Debug Code < nl > + try { < nl > + IntlEngine engine = new IntlEngine ( Assets . loadAsset ( " AppText . json " ) ) ; < nl > + String s2 = engine + " " ; < nl > + } catch ( JSONException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > } < nl > < nl > private void assumeLoaded ( ) { < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / intl / IntlEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / intl / IntlEngine . java < nl > new file mode 100644 < nl > index 0000000 . . 4356714 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / intl / IntlEngine . java < nl > @ @ - 0 , 0 + 1 , 29 @ @ < nl > + package im . actor . runtime . intl ; < nl > + < nl > + import java . util . HashMap ; < nl > + < nl > + import im . actor . runtime . json . JSONException ; < nl > + import im . actor . runtime . json . JSONObject ; < nl > + < nl > + public class IntlEngine { < nl > + < nl > + private HashMap < String , String > keys ; < nl > + < nl > + public IntlEngine ( String localization ) throws JSONException { < nl > + this . keys = new HashMap < > ( ) ; < nl > + traverseObject ( new JSONObject ( localization ) , " " ) ; < nl > + } < nl > + < nl > + private void traverseObject ( JSONObject src , String prefix ) throws JSONException { < nl > + for ( String s : src . keySet ( ) ) { < nl > + Object itm = src . get ( s ) ; < nl > + if ( itm instanceof String ) { < nl > + keys . put ( prefix + s , ( String ) itm ) ; < nl > + } else if ( itm instanceof JSONObject ) { < nl > + traverseObject ( ( JSONObject ) itm , prefix + s + " . " ) ; < nl > + } else { < nl > + throw new RuntimeException ( " Unexpected object : " + itm ) ; < nl > + } < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift < nl > index e93bb35 . . 0f8fcf6 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift < nl > @ @ - 6 , 7 + 6 , 7 @ @ import Foundation < nl > < nl > class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { < nl > < nl > - @ objc func hasAssetWithNSString ( name : String ! ) - > jboolean { < nl > + func hasAssetWithNSString ( name : String ! ) - > jboolean { < nl > if NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) ! = nil { < nl > return true < nl > } < nl > @ @ - 16 , 7 + 16 , 7 @ @ class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { < nl > return false < nl > } < nl > < nl > - @ objc func loadAssetWithNSString ( name : String ! ) - > String ! { < nl > + func loadAssetWithNSString ( name : String ! ) - > String ! { < nl > var path : String ? < nl > path = NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) < nl > if path ! = nil { < nl > @ @ - 36 , 6 + 36 , 25 @ @ class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { < nl > } < nl > } < nl > < nl > - fatalError ( " Unable to find resource \ ( name ) " ) < nl > + return nil < nl > + } < nl > + < nl > + func loadBinAssetWithNSString ( name : String ! ) - > IOSByteArray ! { < nl > + var path : String ? < nl > + path = NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) < nl > + if path ! = nil { < nl > + if let data = NSData ( contentsOfFile : path ! ) { < nl > + return data . toJavaBytes ( ) < nl > + } < nl > + } < nl > + < nl > + path = NSBundle . framework . pathForResource ( name , ofType : nil ) < nl > + if path ! = nil { < nl > + if let data = NSData ( contentsOfFile : path ! ) { < nl > + return data . toJavaBytes ( ) < nl > + } < nl > + } < nl > + < nl > + return nil < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index b776221 . . 219518e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 61 , 7 + 61 , 9 @ @ import im . actor . core . viewmodel . UploadFileCallback ; < nl > import im . actor . core . viewmodel . UploadFileVM ; < nl > import im . actor . core . viewmodel . UploadFileVMCallback ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > + import im . actor . runtime . * ; < nl > import im . actor . runtime . actors . ActorSystem ; < nl > + import im . actor . runtime . crypto . primitives . kuznechik . KuznechikFastEngine ; < nl > import im . actor . runtime . mvvm . MVVMCollection ; < nl > import im . actor . runtime . mvvm . ValueModel ; < nl > import im . actor . runtime . storage . PreferencesStorage ; < nl > @ @ - 87 , 6 + 89 , 15 @ @ public class Messenger { < nl > / / Start Messenger initialization < nl > Timing timing = new Timing ( " MESSENGER _ INIT " ) ; < nl > < nl > + / / Encryption < nl > + timing . section ( " Encryption " ) ; < nl > + byte [ ] asset = Assets . loadBinAsset ( " kuz _ tables . bin " ) ; < nl > + if ( asset ! = null ) { < nl > + KuznechikFastEngine . initDump ( asset ) ; < nl > + } else { < nl > + KuznechikFastEngine . initCalc ( ) ; < nl > + } < nl > + < nl > / / Actor system < nl > timing . section ( " Actors " ) ; < nl > ActorSystem . system ( ) . setTraceInterface ( new ActorTrace ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin b / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin < nl > new file mode 100644 < nl > index 0000000 . . 64eb2ae < nl > Binary files / dev / null and b / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin differ < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java < nl > index 016ceac . . b72203f 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java < nl > @ @ - 20 , 6 + 20 , 11 @ @ public class CocoaAssetsProxyProvider implements AssetsRuntime { < nl > return assetsRuntime . loadAsset ( name ) ; < nl > } < nl > < nl > + @ Override < nl > + public byte [ ] loadBinAsset ( String name ) { < nl > + return assetsRuntime . loadBinAsset ( name ) ; < nl > + } < nl > + < nl > / / @ Override < nl > / / public native boolean hasAsset ( String name ) / * - [ < nl > / / NSBundle * mainBundle = [ NSBundle mainBundle ] ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java < nl > index fb991d0 . . 532b2d4 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java < nl > @ @ - 6 , 9 + 6 , 6 @ @ import java . io . InputStream ; < nl > < nl > import im . actor . runtime . AssetsRuntime ; < nl > < nl > - / * * < nl > - * Created by ex3ndr on 07 . 08 . 15 . < nl > - * / < nl > public class GenericAssetsProvider implements AssetsRuntime { < nl > < nl > @ Override < nl > @ @ - 35 , 6 + 32 , 25 @ @ public class GenericAssetsProvider implements AssetsRuntime { < nl > return null ; < nl > } < nl > < nl > + @ Override < nl > + public byte [ ] loadBinAsset ( String name ) { < nl > + InputStream stream = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( name ) ; < nl > + try { < nl > + return readFully ( stream ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } finally { < nl > + if ( stream ! = null ) { < nl > + try { < nl > + stream . close ( ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + } < nl > + return null ; < nl > + } < nl > + < nl > public String readFully ( InputStream inputStream , String encoding ) throws IOException { < nl > return new String ( readFully ( inputStream ) , encoding ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java < nl > index ca613d8 . . d40fa1a 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java < nl > @ @ - 45 , 4 + 45 , 9 @ @ public class JsAssetsProvider implements AssetsRuntime { < nl > < nl > return null ; < nl > } < nl > + < nl > + @ Override < nl > + public byte [ ] loadBinAsset ( String name ) { < nl > + return null ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java < nl > index 2f400cc . . 0cb9fe1 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java < nl > @ @ - 11 , 4 + 11 , 8 @ @ public class Assets { < nl > public static String loadAsset ( String name ) { < nl > return assetsRuntime . loadAsset ( name ) ; < nl > } < nl > + < nl > + public static byte [ ] loadBinAsset ( String name ) { < nl > + return assetsRuntime . loadBinAsset ( name ) ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java < nl > index 30e28ca . . 1237cc0 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java < nl > @ @ - 4 , 4 + 4 , 6 @ @ public interface AssetsRuntime { < nl > boolean hasAsset ( String name ) ; < nl > < nl > String loadAsset ( String name ) ; < nl > + < nl > + byte [ ] loadBinAsset ( String name ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > index 73484fc . . d319adf 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > @ @ - 122 , 10 + 122 , 14 @ @ public class KuznechikFastEngine implements BlockCipher { < nl > ( byte ) 0x37 , ( byte ) 0xc4 , ( byte ) 0xaf , ( byte ) 0x24 , ( byte ) 0x2e , ( byte ) 0x6f , ( byte ) 0x8a , ( byte ) 0xa8 , ( byte ) 0xf7 , ( byte ) 0x60 , ( byte ) 0x49 , ( byte ) 0xe3 , ( byte ) 0x80 , ( byte ) 0x86 , ( byte ) 0x59 , ( byte ) 0x07 , < nl > } ; < nl > < nl > - private static final int [ ] gf256res ; < nl > - private static final int [ ] gf256resInv ; < nl > + private static volatile int [ ] gf256res ; < nl > + private static volatile int [ ] gf256resInv ; < nl > < nl > - static { < nl > + public static void initCalc ( ) { < nl > + if ( gf256res ! = null | | gf256resInv ! = null ) { < nl > + return ; < nl > + } < nl > + < nl > gf256res = new int [ 16 * 256 * 4 ] ; < nl > gf256resInv = new int [ 16 * 256 * 4 ] ; < nl > < nl > @ @ - 149 , 6 + 153 , 15 @ @ public class KuznechikFastEngine implements BlockCipher { < nl > } < nl > } < nl > < nl > + public static void initDump ( byte [ ] data ) { < nl > + if ( gf256res ! = null | | gf256resInv ! = null ) { < nl > + return ; < nl > + } < nl > + gf256res = new int [ 16 * 256 * 4 ] ; < nl > + gf256resInv = new int [ 16 * 256 * 4 ] ; < nl > + Pack . bigEndianToInt ( data , 0 , gf256res ) ; < nl > + Pack . bigEndianToInt ( data , gf256res . length * 4 , gf256resInv ) ; < nl > + } < nl > < nl > static void kuz _ l _ fast ( int [ ] w ) { < nl > int a0 = 0 , a1 = 0 , a2 = 0 , a3 = 0 ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 index 7a94e54 . . 2adfde6 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 @ @ - 37 , 9 + 37 , 13 @ @ import im . actor . core . modules . Modules ; 
 import im . actor . core . network . RpcException ; 
 import im . actor . core . util . JavaUtil ; 
 import im . actor . core . viewmodel . UserPresence ; 
 + import im . actor . runtime . Assets ; 
 import im . actor . runtime . LocaleRuntime ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . Runtime ; 
 + import im . actor . runtime . Storage ; 
 + import im . actor . runtime . intl . IntlEngine ; 
 + import im . actor . runtime . json . JSONException ; 
 
 public class I18nEngine { 
 
 @ @ - 67 , 6 + 71 , 14 @ @ public class I18nEngine { 
 / / Loading locale 
 this . locale = new HashMap < > ( ) ; 
 this . currentLocale = runtime . getCurrentLocale ( ) ; 
 + 
 + / / Debug Code 
 + try { 
 + IntlEngine engine = new IntlEngine ( Assets . loadAsset ( " AppText . json " ) ) ; 
 + String s2 = engine + " " ; 
 + } catch ( JSONException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 } 
 
 private void assumeLoaded ( ) { 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / intl / IntlEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / intl / IntlEngine . java 
 new file mode 100644 
 index 0000000 . . 4356714 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / intl / IntlEngine . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + package im . actor . runtime . intl ; 
 + 
 + import java . util . HashMap ; 
 + 
 + import im . actor . runtime . json . JSONException ; 
 + import im . actor . runtime . json . JSONObject ; 
 + 
 + public class IntlEngine { 
 + 
 + private HashMap < String , String > keys ; 
 + 
 + public IntlEngine ( String localization ) throws JSONException { 
 + this . keys = new HashMap < > ( ) ; 
 + traverseObject ( new JSONObject ( localization ) , " " ) ; 
 + } 
 + 
 + private void traverseObject ( JSONObject src , String prefix ) throws JSONException { 
 + for ( String s : src . keySet ( ) ) { 
 + Object itm = src . get ( s ) ; 
 + if ( itm instanceof String ) { 
 + keys . put ( prefix + s , ( String ) itm ) ; 
 + } else if ( itm instanceof JSONObject ) { 
 + traverseObject ( ( JSONObject ) itm , prefix + s + " . " ) ; 
 + } else { 
 + throw new RuntimeException ( " Unexpected object : " + itm ) ; 
 + } 
 + } 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift 
 index e93bb35 . . 0f8fcf6 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaAssetsRuntime . swift 
 @ @ - 6 , 7 + 6 , 7 @ @ import Foundation 
 
 class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { 
 
 - @ objc func hasAssetWithNSString ( name : String ! ) - > jboolean { 
 + func hasAssetWithNSString ( name : String ! ) - > jboolean { 
 if NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) ! = nil { 
 return true 
 } 
 @ @ - 16 , 7 + 16 , 7 @ @ class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { 
 return false 
 } 
 
 - @ objc func loadAssetWithNSString ( name : String ! ) - > String ! { 
 + func loadAssetWithNSString ( name : String ! ) - > String ! { 
 var path : String ? 
 path = NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) 
 if path ! = nil { 
 @ @ - 36 , 6 + 36 , 25 @ @ class CocoaAssetsRuntime : NSObject , ARAssetsRuntime { 
 } 
 } 
 
 - fatalError ( " Unable to find resource \ ( name ) " ) 
 + return nil 
 + } 
 + 
 + func loadBinAssetWithNSString ( name : String ! ) - > IOSByteArray ! { 
 + var path : String ? 
 + path = NSBundle . mainBundle ( ) . pathForResource ( name , ofType : nil ) 
 + if path ! = nil { 
 + if let data = NSData ( contentsOfFile : path ! ) { 
 + return data . toJavaBytes ( ) 
 + } 
 + } 
 + 
 + path = NSBundle . framework . pathForResource ( name , ofType : nil ) 
 + if path ! = nil { 
 + if let data = NSData ( contentsOfFile : path ! ) { 
 + return data . toJavaBytes ( ) 
 + } 
 + } 
 + 
 + return nil 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index b776221 . . 219518e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 61 , 7 + 61 , 9 @ @ import im . actor . core . viewmodel . UploadFileCallback ; 
 import im . actor . core . viewmodel . UploadFileVM ; 
 import im . actor . core . viewmodel . UploadFileVMCallback ; 
 import im . actor . core . viewmodel . UserVM ; 
 + import im . actor . runtime . * ; 
 import im . actor . runtime . actors . ActorSystem ; 
 + import im . actor . runtime . crypto . primitives . kuznechik . KuznechikFastEngine ; 
 import im . actor . runtime . mvvm . MVVMCollection ; 
 import im . actor . runtime . mvvm . ValueModel ; 
 import im . actor . runtime . storage . PreferencesStorage ; 
 @ @ - 87 , 6 + 89 , 15 @ @ public class Messenger { 
 / / Start Messenger initialization 
 Timing timing = new Timing ( " MESSENGER _ INIT " ) ; 
 
 + / / Encryption 
 + timing . section ( " Encryption " ) ; 
 + byte [ ] asset = Assets . loadBinAsset ( " kuz _ tables . bin " ) ; 
 + if ( asset ! = null ) { 
 + KuznechikFastEngine . initDump ( asset ) ; 
 + } else { 
 + KuznechikFastEngine . initCalc ( ) ; 
 + } 
 + 
 / / Actor system 
 timing . section ( " Actors " ) ; 
 ActorSystem . system ( ) . setTraceInterface ( new ActorTrace ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin b / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin 
 new file mode 100644 
 index 0000000 . . 64eb2ae 
 Binary files / dev / null and b / actor - sdk / sdk - core / core / core - shared / src / main / resources / kuz _ tables . bin differ 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java 
 index 016ceac . . b72203f 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaAssetsProxyProvider . java 
 @ @ - 20 , 6 + 20 , 11 @ @ public class CocoaAssetsProxyProvider implements AssetsRuntime { 
 return assetsRuntime . loadAsset ( name ) ; 
 } 
 
 + @ Override 
 + public byte [ ] loadBinAsset ( String name ) { 
 + return assetsRuntime . loadBinAsset ( name ) ; 
 + } 
 + 
 / / @ Override 
 / / public native boolean hasAsset ( String name ) / * - [ 
 / / NSBundle * mainBundle = [ NSBundle mainBundle ] ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java 
 index fb991d0 . . 532b2d4 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericAssetsProvider . java 
 @ @ - 6 , 9 + 6 , 6 @ @ import java . io . InputStream ; 
 
 import im . actor . runtime . AssetsRuntime ; 
 
 - / * * 
 - * Created by ex3ndr on 07 . 08 . 15 . 
 - * / 
 public class GenericAssetsProvider implements AssetsRuntime { 
 
 @ Override 
 @ @ - 35 , 6 + 32 , 25 @ @ public class GenericAssetsProvider implements AssetsRuntime { 
 return null ; 
 } 
 
 + @ Override 
 + public byte [ ] loadBinAsset ( String name ) { 
 + InputStream stream = getClass ( ) . getClassLoader ( ) . getResourceAsStream ( name ) ; 
 + try { 
 + return readFully ( stream ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } finally { 
 + if ( stream ! = null ) { 
 + try { 
 + stream . close ( ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + } 
 + return null ; 
 + } 
 + 
 public String readFully ( InputStream inputStream , String encoding ) throws IOException { 
 return new String ( readFully ( inputStream ) , encoding ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java 
 index ca613d8 . . d40fa1a 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsAssetsProvider . java 
 @ @ - 45 , 4 + 45 , 9 @ @ public class JsAssetsProvider implements AssetsRuntime { 
 
 return null ; 
 } 
 + 
 + @ Override 
 + public byte [ ] loadBinAsset ( String name ) { 
 + return null ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java 
 index 2f400cc . . 0cb9fe1 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Assets . java 
 @ @ - 11 , 4 + 11 , 8 @ @ public class Assets { 
 public static String loadAsset ( String name ) { 
 return assetsRuntime . loadAsset ( name ) ; 
 } 
 + 
 + public static byte [ ] loadBinAsset ( String name ) { 
 + return assetsRuntime . loadBinAsset ( name ) ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java 
 index 30e28ca . . 1237cc0 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / AssetsRuntime . java 
 @ @ - 4 , 4 + 4 , 6 @ @ public interface AssetsRuntime { 
 boolean hasAsset ( String name ) ; 
 
 String loadAsset ( String name ) ; 
 + 
 + byte [ ] loadBinAsset ( String name ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 index 73484fc . . d319adf 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 @ @ - 122 , 10 + 122 , 14 @ @ public class KuznechikFastEngine implements BlockCipher { 
 ( byte ) 0x37 , ( byte ) 0xc4 , ( byte ) 0xaf , ( byte ) 0x24 , ( byte ) 0x2e , ( byte ) 0x6f , ( byte ) 0x8a , ( byte ) 0xa8 , ( byte ) 0xf7 , ( byte ) 0x60 , ( byte ) 0x49 , ( byte ) 0xe3 , ( byte ) 0x80 , ( byte ) 0x86 , ( byte ) 0x59 , ( byte ) 0x07 , 
 } ; 
 
 - private static final int [ ] gf256res ; 
 - private static final int [ ] gf256resInv ; 
 + private static volatile int [ ] gf256res ; 
 + private static volatile int [ ] gf256resInv ; 
 
 - static { 
 + public static void initCalc ( ) { 
 + if ( gf256res ! = null | | gf256resInv ! = null ) { 
 + return ; 
 + } 
 + 
 gf256res = new int [ 16 * 256 * 4 ] ; 
 gf256resInv = new int [ 16 * 256 * 4 ] ; 
 
 @ @ - 149 , 6 + 153 , 15 @ @ public class KuznechikFastEngine implements BlockCipher { 
 } 
 } 
 
 + public static void initDump ( byte [ ] data ) { 
 + if ( gf256res ! = null | | gf256resInv ! = null ) { 
 + return ; 
 + } 
 + gf256res = new int [ 16 * 256 * 4 ] ; 
 + gf256resInv = new int [ 16 * 256 * 4 ] ; 
 + Pack . bigEndianToInt ( data , 0 , gf256res ) ; 
 + Pack . bigEndianToInt ( data , gf256res . length * 4 , gf256resInv ) ; 
 + } 
 
 static void kuz _ l _ fast ( int [ ] w ) { 
 int a0 = 0 , a1 = 0 , a2 = 0 , a3 = 0 ;
