BLEU SCORE: 0.11868405219520975

TEST MSG: fix ( android : runtime ) : remove sdk reference
GENERATED MSG: feat ( android ) : add trusted hostname / pem

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java < nl > index 415ca69 . . 9816b04 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java < nl > @ @ - 30 , 8 + 30 , 6 @ @ import im . actor . runtime . HttpRuntime ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . http . FileDownloadCallback ; < nl > import im . actor . runtime . http . FileUploadCallback ; < nl > - import im . actor . sdk . ActorSDK ; < nl > - import im . actor . sdk . R ; < nl > import okio . Buffer ; < nl > < nl > public class AndroidHttpProvider implements HttpRuntime { < nl > @ @ - 43 , 7 + 41 , 8 @ @ public class AndroidHttpProvider implements HttpRuntime { < nl > private final MediaType MEDIA _ TYPE = MediaType . parse ( " application / octet - stream " ) ; < nl > < nl > public AndroidHttpProvider ( ) { < nl > - String cert = AndroidContext . getContext ( ) . getResources ( ) . getString ( R . string . trusted _ pem ) ; < nl > + / / String cert = AndroidContext . getContext ( ) . getResources ( ) . getString ( R . string . trusted _ pem ) ; < nl > + String cert = " none " ; < nl > if ( ! cert . equals ( " none " ) ) { < nl > SSLContext sslContext = sslContextForTrustedCertificates ( new Buffer ( ) < nl > . writeUtf8 ( cert ) < nl > @ @ - 51 , 7 + 50 , 8 @ @ public class AndroidHttpProvider implements HttpRuntime { < nl > client . setSslSocketFactory ( sslContext . getSocketFactory ( ) ) ; < nl > } < nl > < nl > - final String trustHostname = AndroidContext . getContext ( ) . getResources ( ) . getString ( R . string . trusted _ hostname ) ; < nl > + / / final String trustHostname = AndroidContext . getContext ( ) . getResources ( ) . getString ( R . string . trusted _ hostname ) ; < nl > + final String trustHostname = " none " ; < nl > if ( ! trustHostname . equals ( " none " ) ) { < nl > client . setHostnameVerifier ( new HostnameVerifier ( ) { < nl > @ Override
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / config . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / config . xml < nl > index b2ae7ba . . d2b09e8 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / config . xml < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / config . xml < nl > @ @ - 6 , 4 + 6 , 6 @ @ < nl > < resources > < nl > < integer name = " activity _ switch _ time " > 300 < / integer > < nl > < string name = " messenger _ domain " translatable = " false " > actor . cc < / string > < nl > + < string name = " trusted _ hostname " translatable = " false " > none < / string > < nl > + < string name = " trusted _ pem " translatable = " false " > none < / string > < nl > < / resources > < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java < nl > index a10b4a8 . . 415ca69 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java < nl > @ @ - 12 , 11 + 12 , 27 @ @ import com . squareup . okhttp . RequestBody ; < nl > import com . squareup . okhttp . Response ; < nl > < nl > import java . io . IOException ; < nl > + import java . io . InputStream ; < nl > + import java . security . GeneralSecurityException ; < nl > + import java . security . KeyStore ; < nl > + import java . security . SecureRandom ; < nl > + import java . security . cert . Certificate ; < nl > + import java . security . cert . CertificateFactory ; < nl > + import java . util . Collection ; < nl > + < nl > + import javax . net . ssl . HostnameVerifier ; < nl > + import javax . net . ssl . KeyManagerFactory ; < nl > + import javax . net . ssl . SSLContext ; < nl > + import javax . net . ssl . SSLSession ; < nl > + import javax . net . ssl . TrustManagerFactory ; < nl > < nl > import im . actor . runtime . HttpRuntime ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . http . FileDownloadCallback ; < nl > import im . actor . runtime . http . FileUploadCallback ; < nl > + import im . actor . sdk . ActorSDK ; < nl > + import im . actor . sdk . R ; < nl > + import okio . Buffer ; < nl > < nl > public class AndroidHttpProvider implements HttpRuntime { < nl > < nl > @ @ - 26 , 6 + 42 , 70 @ @ public class AndroidHttpProvider implements HttpRuntime { < nl > < nl > private final MediaType MEDIA _ TYPE = MediaType . parse ( " application / octet - stream " ) ; < nl > < nl > + public AndroidHttpProvider ( ) { < nl > + String cert = AndroidContext . getContext ( ) . getResources ( ) . getString ( R . string . trusted _ pem ) ; < nl > + if ( ! cert . equals ( " none " ) ) { < nl > + SSLContext sslContext = sslContextForTrustedCertificates ( new Buffer ( ) < nl > + . writeUtf8 ( cert ) < nl > + . inputStream ( ) ) ; < nl > + client . setSslSocketFactory ( sslContext . getSocketFactory ( ) ) ; < nl > + } < nl > + < nl > + final String trustHostname = AndroidContext . getContext ( ) . getResources ( ) . getString ( R . string . trusted _ hostname ) ; < nl > + if ( ! trustHostname . equals ( " none " ) ) { < nl > + client . setHostnameVerifier ( new HostnameVerifier ( ) { < nl > + @ Override < nl > + public boolean verify ( String hostname , SSLSession session ) { < nl > + return hostname . equals ( trustHostname ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } < nl > + < nl > + public SSLContext sslContextForTrustedCertificates ( InputStream in ) { < nl > + try { < nl > + CertificateFactory certificateFactory = CertificateFactory . getInstance ( " X . 509 " ) ; < nl > + Collection < ? extends Certificate > certificates = certificateFactory . generateCertificates ( in ) ; < nl > + if ( certificates . isEmpty ( ) ) { < nl > + throw new IllegalArgumentException ( " expected non - empty set of trusted certificates " ) ; < nl > + } < nl > + < nl > + / / Put the certificates a key store . < nl > + char [ ] password = " password " . toCharArray ( ) ; / / Any password will work . < nl > + KeyStore keyStore = newEmptyKeyStore ( password ) ; < nl > + int index = 0 ; < nl > + for ( Certificate certificate : certificates ) { < nl > + String certificateAlias = Integer . toString ( index + + ) ; < nl > + keyStore . setCertificateEntry ( certificateAlias , certificate ) ; < nl > + } < nl > + < nl > + / / Wrap it up in an SSL context . < nl > + KeyManagerFactory keyManagerFactory = KeyManagerFactory . getInstance ( < nl > + KeyManagerFactory . getDefaultAlgorithm ( ) ) ; < nl > + keyManagerFactory . init ( keyStore , password ) ; < nl > + TrustManagerFactory trustManagerFactory = TrustManagerFactory . getInstance ( < nl > + TrustManagerFactory . getDefaultAlgorithm ( ) ) ; < nl > + trustManagerFactory . init ( keyStore ) ; < nl > + SSLContext sslContext = SSLContext . getInstance ( " TLS " ) ; < nl > + sslContext . init ( keyManagerFactory . getKeyManagers ( ) , trustManagerFactory . getTrustManagers ( ) , < nl > + new SecureRandom ( ) ) ; < nl > + return sslContext ; < nl > + } catch ( GeneralSecurityException e ) { < nl > + throw new RuntimeException ( e ) ; < nl > + } < nl > + } < nl > + < nl > + private KeyStore newEmptyKeyStore ( char [ ] password ) throws GeneralSecurityException { < nl > + try { < nl > + KeyStore keyStore = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ; < nl > + InputStream in = null ; / / By convention , ' null ' creates an empty key store . < nl > + keyStore . load ( in , password ) ; < nl > + return keyStore ; < nl > + } catch ( IOException e ) { < nl > + throw new AssertionError ( e ) ; < nl > + } < nl > + } < nl > + < nl > @ Override < nl > public void getMethod ( String url , int startOffset , int size , int totalSize , final FileDownloadCallback callback ) { < nl > final Request request = new Request . Builder ( )

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java 
 index 415ca69 . . 9816b04 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java 
 @ @ - 30 , 8 + 30 , 6 @ @ import im . actor . runtime . HttpRuntime ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . http . FileDownloadCallback ; 
 import im . actor . runtime . http . FileUploadCallback ; 
 - import im . actor . sdk . ActorSDK ; 
 - import im . actor . sdk . R ; 
 import okio . Buffer ; 
 
 public class AndroidHttpProvider implements HttpRuntime { 
 @ @ - 43 , 7 + 41 , 8 @ @ public class AndroidHttpProvider implements HttpRuntime { 
 private final MediaType MEDIA _ TYPE = MediaType . parse ( " application / octet - stream " ) ; 
 
 public AndroidHttpProvider ( ) { 
 - String cert = AndroidContext . getContext ( ) . getResources ( ) . getString ( R . string . trusted _ pem ) ; 
 + / / String cert = AndroidContext . getContext ( ) . getResources ( ) . getString ( R . string . trusted _ pem ) ; 
 + String cert = " none " ; 
 if ( ! cert . equals ( " none " ) ) { 
 SSLContext sslContext = sslContextForTrustedCertificates ( new Buffer ( ) 
 . writeUtf8 ( cert ) 
 @ @ - 51 , 7 + 50 , 8 @ @ public class AndroidHttpProvider implements HttpRuntime { 
 client . setSslSocketFactory ( sslContext . getSocketFactory ( ) ) ; 
 } 
 
 - final String trustHostname = AndroidContext . getContext ( ) . getResources ( ) . getString ( R . string . trusted _ hostname ) ; 
 + / / final String trustHostname = AndroidContext . getContext ( ) . getResources ( ) . getString ( R . string . trusted _ hostname ) ; 
 + final String trustHostname = " none " ; 
 if ( ! trustHostname . equals ( " none " ) ) { 
 client . setHostnameVerifier ( new HostnameVerifier ( ) { 
 @ Override

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / config . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / config . xml 
 index b2ae7ba . . d2b09e8 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / config . xml 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / res / values / config . xml 
 @ @ - 6 , 4 + 6 , 6 @ @ 
 < resources > 
 < integer name = " activity _ switch _ time " > 300 < / integer > 
 < string name = " messenger _ domain " translatable = " false " > actor . cc < / string > 
 + < string name = " trusted _ hostname " translatable = " false " > none < / string > 
 + < string name = " trusted _ pem " translatable = " false " > none < / string > 
 < / resources > 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java 
 index a10b4a8 . . 415ca69 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidHttpProvider . java 
 @ @ - 12 , 11 + 12 , 27 @ @ import com . squareup . okhttp . RequestBody ; 
 import com . squareup . okhttp . Response ; 
 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . security . GeneralSecurityException ; 
 + import java . security . KeyStore ; 
 + import java . security . SecureRandom ; 
 + import java . security . cert . Certificate ; 
 + import java . security . cert . CertificateFactory ; 
 + import java . util . Collection ; 
 + 
 + import javax . net . ssl . HostnameVerifier ; 
 + import javax . net . ssl . KeyManagerFactory ; 
 + import javax . net . ssl . SSLContext ; 
 + import javax . net . ssl . SSLSession ; 
 + import javax . net . ssl . TrustManagerFactory ; 
 
 import im . actor . runtime . HttpRuntime ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . http . FileDownloadCallback ; 
 import im . actor . runtime . http . FileUploadCallback ; 
 + import im . actor . sdk . ActorSDK ; 
 + import im . actor . sdk . R ; 
 + import okio . Buffer ; 
 
 public class AndroidHttpProvider implements HttpRuntime { 
 
 @ @ - 26 , 6 + 42 , 70 @ @ public class AndroidHttpProvider implements HttpRuntime { 
 
 private final MediaType MEDIA _ TYPE = MediaType . parse ( " application / octet - stream " ) ; 
 
 + public AndroidHttpProvider ( ) { 
 + String cert = AndroidContext . getContext ( ) . getResources ( ) . getString ( R . string . trusted _ pem ) ; 
 + if ( ! cert . equals ( " none " ) ) { 
 + SSLContext sslContext = sslContextForTrustedCertificates ( new Buffer ( ) 
 + . writeUtf8 ( cert ) 
 + . inputStream ( ) ) ; 
 + client . setSslSocketFactory ( sslContext . getSocketFactory ( ) ) ; 
 + } 
 + 
 + final String trustHostname = AndroidContext . getContext ( ) . getResources ( ) . getString ( R . string . trusted _ hostname ) ; 
 + if ( ! trustHostname . equals ( " none " ) ) { 
 + client . setHostnameVerifier ( new HostnameVerifier ( ) { 
 + @ Override 
 + public boolean verify ( String hostname , SSLSession session ) { 
 + return hostname . equals ( trustHostname ) ; 
 + } 
 + } ) ; 
 + } 
 + } 
 + 
 + public SSLContext sslContextForTrustedCertificates ( InputStream in ) { 
 + try { 
 + CertificateFactory certificateFactory = CertificateFactory . getInstance ( " X . 509 " ) ; 
 + Collection < ? extends Certificate > certificates = certificateFactory . generateCertificates ( in ) ; 
 + if ( certificates . isEmpty ( ) ) { 
 + throw new IllegalArgumentException ( " expected non - empty set of trusted certificates " ) ; 
 + } 
 + 
 + / / Put the certificates a key store . 
 + char [ ] password = " password " . toCharArray ( ) ; / / Any password will work . 
 + KeyStore keyStore = newEmptyKeyStore ( password ) ; 
 + int index = 0 ; 
 + for ( Certificate certificate : certificates ) { 
 + String certificateAlias = Integer . toString ( index + + ) ; 
 + keyStore . setCertificateEntry ( certificateAlias , certificate ) ; 
 + } 
 + 
 + / / Wrap it up in an SSL context . 
 + KeyManagerFactory keyManagerFactory = KeyManagerFactory . getInstance ( 
 + KeyManagerFactory . getDefaultAlgorithm ( ) ) ; 
 + keyManagerFactory . init ( keyStore , password ) ; 
 + TrustManagerFactory trustManagerFactory = TrustManagerFactory . getInstance ( 
 + TrustManagerFactory . getDefaultAlgorithm ( ) ) ; 
 + trustManagerFactory . init ( keyStore ) ; 
 + SSLContext sslContext = SSLContext . getInstance ( " TLS " ) ; 
 + sslContext . init ( keyManagerFactory . getKeyManagers ( ) , trustManagerFactory . getTrustManagers ( ) , 
 + new SecureRandom ( ) ) ; 
 + return sslContext ; 
 + } catch ( GeneralSecurityException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + private KeyStore newEmptyKeyStore ( char [ ] password ) throws GeneralSecurityException { 
 + try { 
 + KeyStore keyStore = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ; 
 + InputStream in = null ; / / By convention , ' null ' creates an empty key store . 
 + keyStore . load ( in , password ) ; 
 + return keyStore ; 
 + } catch ( IOException e ) { 
 + throw new AssertionError ( e ) ; 
 + } 
 + } 
 + 
 @ Override 
 public void getMethod ( String url , int startOffset , int size , int totalSize , final FileDownloadCallback callback ) { 
 final Request request = new Request . Builder ( )
