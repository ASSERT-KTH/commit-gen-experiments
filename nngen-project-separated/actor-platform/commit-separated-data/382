BLEU SCORE: 0.10552670315936319

TEST MSG: feat ( android ) : add bot commands autocomplete
GENERATED MSG: wip ( sdk ) : Grouped active dialogs list

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java < nl > index 5c2fb39 . . b47ffa1 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java < nl > @ @ - 49 , 7 + 49 , 6 @ @ import java . io . File ; < nl > import java . util . ArrayList ; < nl > import java . util . Set ; < nl > < nl > - import im . actor . core . api . rpc . ResponseSeqDate ; < nl > import im . actor . core . entity . MentionFilterResult ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > @ @ - 70 , 6 + 69 , 7 @ @ import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . ActorStyle ; < nl > import im . actor . sdk . R ; < nl > import im . actor . sdk . controllers . Intents ; < nl > + import im . actor . sdk . controllers . conversation . botcommands . CommandsAdapter ; < nl > import im . actor . sdk . controllers . conversation . mentions . MentionsAdapter ; < nl > import im . actor . sdk . controllers . conversation . messages . AudioHolder ; < nl > import im . actor . sdk . controllers . conversation . view . FastShareAdapter ; < nl > @ @ - 79 , 6 + 79 , 7 @ @ import im . actor . sdk . intents . ActorIntent ; < nl > import im . actor . sdk . util . Randoms ; < nl > import im . actor . sdk . util . Screen ; < nl > import im . actor . core . utils . GalleryScannerActor ; < nl > + import im . actor . sdk . view . adapters . HolderAdapter ; < nl > import im . actor . sdk . view . adapters . RecyclerListView ; < nl > import im . actor . sdk . view . avatar . AvatarView ; < nl > import im . actor . sdk . controllers . conversation . view . TypingDrawable ; < nl > @ @ - 98 , 6 + 99 , 7 @ @ import static im . actor . sdk . util . ActorSDKMessenger . groups ; < nl > import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > import static im . actor . sdk . util . ActorSDKMessenger . users ; < nl > < nl > + @ SuppressWarnings ( " NullableProblems " ) < nl > public class ChatActivity extends ActorEditTextActivity { < nl > < nl > public static final String EXTRA _ CHAT _ PEER = " chat _ peer " ; < nl > @ @ - 150 , 10 + 152 , 10 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > private ImageView barTypingIcon ; < nl > / / Toolbar typing text < nl > private TextView barTyping ; < nl > - private boolean isMentionsVisible = false ; < nl > + private boolean isAutocompleteVisible = false ; < nl > < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > - / / Voice messges < nl > + / / Voice messages < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > private View audioContainer ; < nl > private View recordPoint ; < nl > @ @ - 171 , 16 + 173 , 17 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Mentions < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > - private MentionsAdapter mentionsAdapter ; < nl > - private RecyclerListView mentionsList ; < nl > - private String mentionSearchString = " " ; < nl > - private int mentionStart ; < nl > - private FrameLayout quoteContainer ; < nl > + private HolderAdapter autocompleteAdapter ; < nl > + private CommandsAdapter commandsAdapter ; < nl > + private RecyclerListView autocompleteList ; < nl > + private String autocompleteString = " " ; < nl > + private int autocompleteTriggerStart ; < nl > < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Quote < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > private TextView quoteText ; < nl > + private FrameLayout quoteContainer ; < nl > private String currentQuote = " " ; < nl > private String sendUri ; < nl > < nl > @ @ - 217 , 6 + 220 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > private long currentEditRid ; < nl > private Animation . AnimationListener animationListener ; < nl > private Menu menu ; < nl > + private boolean isBot = false ; < nl > < nl > public static Intent build ( Peer peer , boolean compose , Context context ) { < nl > final Intent intent = new Intent ( context , ChatActivity . class ) ; < nl > @ @ - 290 , 8 + 294 , 8 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > } ) ; < nl > < nl > / / Mentions < nl > - mentionsList = ( RecyclerListView ) findViewById ( R . id . mentionsList ) ; < nl > - mentionsList . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; < nl > + autocompleteList = ( RecyclerListView ) findViewById ( R . id . mentionsList ) ; < nl > + autocompleteList . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; < nl > < nl > / / Quote < nl > quoteContainer = ( FrameLayout ) findViewById ( R . id . quoteContainer ) ; < nl > @ @ - 559 , 6 + 563 , 8 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > public void onResume ( ) { < nl > super . onResume ( ) ; < nl > < nl > + isBot = ( peer . getPeerType ( ) = = PeerType . PRIVATE & & users ( ) . get ( peer . getPeerId ( ) ) . isBot ( ) ) ; < nl > + < nl > if ( peer . getPeerType ( ) = = PeerType . PRIVATE & & menu ! = null ) { < nl > menu . findItem ( R . id . add _ to _ contacts ) . setVisible ( users ( ) . get ( peer . getPeerId ( ) ) . isContact ( ) . get ( ) ) ; < nl > invalidateOptionsMenu ( ) ; < nl > @ @ - 780 , 7 + 786 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > } < nl > < nl > messageEditText . setText ( " " ) ; < nl > - mentionSearchString = " " ; < nl > + autocompleteString = " " ; < nl > < nl > if ( rawText . length ( ) = = 0 ) { < nl > return ; < nl > @ @ - 1009 , 25 + 1015 , 34 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > } < nl > < nl > / / Mentions < nl > + / / Bot commands < nl > < nl > - private void showMentions ( boolean initEmpty ) { < nl > - if ( isMentionsVisible ) { < nl > + private void showAutoComplete ( boolean initEmpty , boolean isMentions ) { < nl > + if ( isAutocompleteVisible ) { < nl > return ; < nl > } < nl > - isMentionsVisible = true ; < nl > + isAutocompleteVisible = true ; < nl > < nl > + if ( ! isMentions ) { < nl > + autocompleteAdapter = new CommandsAdapter ( peer . getPeerId ( ) , this , new CommandsAdapter . CommandsUpdatedCallback ( ) { < nl > + @ Override < nl > + public void onMentionsUpdated ( int oldRowsCount , int newRowsCount ) { < nl > + onMentionsChanged ( oldRowsCount , newRowsCount ) ; < nl > + } < nl > + } ) ; < nl > + } else { < nl > + GroupVM groupInfo = groups ( ) . get ( peer . getPeerId ( ) ) ; < nl > + autocompleteAdapter = new MentionsAdapter ( groupInfo . getId ( ) , this , new MentionsAdapter . MentionsUpdatedCallback ( ) { < nl > < nl > - GroupVM groupInfo = groups ( ) . get ( peer . getPeerId ( ) ) ; < nl > - mentionsAdapter = new MentionsAdapter ( groupInfo . getId ( ) , this , new MentionsAdapter . MentionsUpdatedCallback ( ) { < nl > - < nl > - @ Override < nl > - public void onMentionsUpdated ( int oldRowsCount , int newRowsCount ) { < nl > - onMentionsChanged ( oldRowsCount , newRowsCount ) ; < nl > - } < nl > - } , initEmpty ) ; < nl > + @ Override < nl > + public void onMentionsUpdated ( int oldRowsCount , int newRowsCount ) { < nl > + onMentionsChanged ( oldRowsCount , newRowsCount ) ; < nl > + } < nl > + } , initEmpty ) ; < nl > + } < nl > < nl > - mentionsList . setAdapter ( mentionsAdapter ) ; < nl > - mentionsList . setOnItemClickListener ( new AdapterView . OnItemClickListener ( ) { < nl > + autocompleteList . setAdapter ( autocompleteAdapter ) ; < nl > + autocompleteList . setOnItemClickListener ( new AdapterView . OnItemClickListener ( ) { < nl > @ Override < nl > public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { < nl > Object item = parent . getItemAtPosition ( position ) ; < nl > @ @ - 1035 , 15 + 1050 , 15 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > < nl > String origMention = ( ( MentionFilterResult ) item ) . getMentionString ( ) ; < nl > < nl > - if ( mentionStart ! = - 1 & & mentionStart + mentionSearchString . length ( ) + 1 < = messageEditText . getText ( ) . length ( ) ) { < nl > + if ( autocompleteTriggerStart ! = - 1 & & autocompleteTriggerStart + autocompleteString . length ( ) + 1 < = messageEditText . getText ( ) . length ( ) ) { < nl > < nl > - String mentionString = origMention + ( mentionStart = = 0 ? " : " : " " ) ; < nl > + String mentionString = origMention + ( autocompleteTriggerStart = = 0 ? " : " : " " ) ; < nl > < nl > Editable text = messageEditText . getText ( ) ; < nl > < nl > - int cursorPosition = mentionStart + mentionString . length ( ) ; < nl > + int cursorPosition = autocompleteTriggerStart + mentionString . length ( ) ; < nl > < nl > - text . replace ( mentionStart , mentionStart + mentionSearchString . length ( ) + 1 , mentionString ) ; < nl > + text . replace ( autocompleteTriggerStart , autocompleteTriggerStart + autocompleteString . length ( ) + 1 , mentionString ) ; < nl > < nl > messageEditText . setSelection ( cursorPosition , cursorPosition ) ; < nl > } < nl > @ @ - 1052 , 23 + 1067 , 23 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > } < nl > } ) ; < nl > hideShare ( ) ; < nl > - expandMentions ( mentionsList , 0 , mentionsList . getCount ( ) ) ; < nl > + expandMentions ( autocompleteList , 0 , autocompleteList . getCount ( ) ) ; < nl > } < nl > < nl > private void hideMentions ( ) { < nl > - if ( ! isMentionsVisible ) { < nl > + if ( ! isAutocompleteVisible ) { < nl > return ; < nl > } < nl > - isMentionsVisible = false ; < nl > + isAutocompleteVisible = false ; < nl > < nl > - expandMentions ( mentionsList , mentionsAdapter . getCount ( ) , 0 ) ; < nl > - mentionsAdapter = null ; < nl > - mentionsList . setAdapter ( null ) ; < nl > + expandMentions ( autocompleteList , autocompleteAdapter . getCount ( ) , 0 ) ; < nl > + autocompleteAdapter = null ; < nl > + autocompleteList . setAdapter ( null ) ; < nl > } < nl > < nl > private void onMentionsChanged ( int oldRowsCount , int newRowsCount ) { < nl > - if ( mentionsAdapter ! = null ) { < nl > - expandMentions ( mentionsList , oldRowsCount , newRowsCount ) ; < nl > + if ( autocompleteAdapter ! = null ) { < nl > + expandMentions ( autocompleteList , oldRowsCount , newRowsCount ) ; < nl > } < nl > } < nl > < nl > @ @ - 1108 , 7 + 1123 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > < nl > @ Override < nl > public void onBackPressed ( ) { < nl > - if ( isMentionsVisible ) { < nl > + if ( isAutocompleteVisible ) { < nl > hideMentions ( ) ; < nl > } else if ( isShareVisible ) { < nl > hideShare ( ) ; < nl > @ @ - 1349 , 31 + 1364 , 44 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > < nl > currentWord = currentWord . isEmpty ( ) ? str : currentWord ; < nl > < nl > - if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + char autocompleteTriggerChar = ' @ ' ; < nl > + String autocompleteTriggerString = " @ " ; < nl > + < nl > + < nl > + if ( peer . getPeerType ( ) = = PeerType . GROUP | | isBot ) { < nl > + < nl > + if ( isBot ) { < nl > + autocompleteTriggerChar = ' / ' ; < nl > + autocompleteTriggerString = " / " ; < nl > + } < nl > / / Open mentions < nl > - if ( count = = 1 & & s . charAt ( start ) = = ' @ ' & & ! str . endsWith ( " " ) ) { < nl > - showMentions ( false ) ; < nl > - mentionSearchString = " " ; < nl > + if ( count = = 1 & & s . charAt ( start ) = = autocompleteTriggerChar & & ! str . endsWith ( " " ) ) { < nl > + showAutoComplete ( false , ! isBot ) ; < nl > + autocompleteString = " " ; < nl > < nl > - } else if ( currentWord . startsWith ( " @ " ) & & ! str . endsWith ( " " ) ) { < nl > - showMentions ( true ) ; < nl > + } else if ( currentWord . startsWith ( autocompleteTriggerString ) & & ! str . endsWith ( " " ) ) { < nl > + showAutoComplete ( true , ! isBot ) ; < nl > } else { < nl > hideMentions ( ) ; < nl > } < nl > < nl > / / Set mentions query < nl > - mentionStart = firstPeace . lastIndexOf ( " @ " ) ; < nl > - if ( currentWord . startsWith ( " @ " ) & & currentWord . length ( ) > 1 ) { < nl > - mentionSearchString = currentWord . substring ( 1 , currentWord . length ( ) ) ; < nl > + autocompleteTriggerStart = firstPeace . lastIndexOf ( autocompleteTriggerString ) ; < nl > + if ( currentWord . startsWith ( autocompleteTriggerString ) & & currentWord . length ( ) > 1 ) { < nl > + autocompleteString = currentWord . substring ( 1 , currentWord . length ( ) ) ; < nl > } else { < nl > - mentionSearchString = " " ; < nl > + autocompleteString = " " ; < nl > } < nl > < nl > - if ( mentionSearchString . equals ( " " ) ) { < nl > + if ( autocompleteString . equals ( " " ) ) { < nl > hideMentions ( ) ; < nl > - } else if ( mentionsAdapter ! = null ) { < nl > - / / mentionsDisplay . initSearch ( mentionSearchString , false ) ; < nl > - mentionsAdapter . setQuery ( mentionSearchString . toLowerCase ( ) ) ; < nl > + } else if ( autocompleteAdapter ! = null ) { < nl > + / / mentionsDisplay . initSearch ( autocompleteString , false ) ; < nl > + if ( autocompleteAdapter instanceof MentionsAdapter ) { < nl > + ( ( MentionsAdapter ) autocompleteAdapter ) . setQuery ( autocompleteString . toLowerCase ( ) ) ; < nl > + } else if ( autocompleteAdapter instanceof CommandsAdapter ) { < nl > + ( ( CommandsAdapter ) autocompleteAdapter ) . setQuery ( autocompleteString . toLowerCase ( ) ) ; < nl > + } < nl > } < nl > } < nl > } < nl > @ @ - 1451 , 8 + 1479 , 8 @ @ public class ChatActivity extends ActorEditTextActivity { < nl > @ Override < nl > protected void onDestroy ( ) { < nl > super . onDestroy ( ) ; < nl > - if ( mentionsAdapter ! = null ) { < nl > - mentionsAdapter . dispose ( ) ; < nl > + if ( autocompleteAdapter ! = null ) { < nl > + autocompleteAdapter . dispose ( ) ; < nl > } < nl > if ( fastShareAdapter ! = null ) { < nl > fastShareAdapter . release ( ) ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / botcommands / CommandsAdapter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / botcommands / CommandsAdapter . java < nl > new file mode 100644 < nl > index 0000000 . . 410dfa6 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / botcommands / CommandsAdapter . java < nl > @ @ - 0 , 0 + 1 , 125 @ @ < nl > + package im . actor . sdk . controllers . conversation . botcommands ; < nl > + < nl > + import android . app . Activity ; < nl > + import android . content . Context ; < nl > + import android . view . View ; < nl > + import android . view . ViewGroup ; < nl > + import android . widget . TextView ; < nl > + < nl > + import java . util . ArrayList ; < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . entity . BotCommand ; < nl > + import im . actor . core . viewmodel . UserVM ; < nl > + import im . actor . sdk . ActorSDK ; < nl > + import im . actor . sdk . R ; < nl > + import im . actor . sdk . util . Screen ; < nl > + import im . actor . sdk . view . SearchHighlight ; < nl > + import im . actor . sdk . view . adapters . HolderAdapter ; < nl > + import im . actor . sdk . view . adapters . ViewHolder ; < nl > + import im . actor . sdk . view . avatar . AvatarView ; < nl > + < nl > + import static im . actor . sdk . util . ActorSDKMessenger . users ; < nl > + < nl > + public class CommandsAdapter extends HolderAdapter < BotCommand > { < nl > + < nl > + private final int uid ; < nl > + int oldRowsCount = 0 ; < nl > + private List < BotCommand > commands ; < nl > + private List < BotCommand > commandsToShow = new ArrayList < BotCommand > ( ) ; < nl > + private CommandsUpdatedCallback updatedCallback ; < nl > + private int highlightColor ; < nl > + < nl > + public CommandsAdapter ( int uid , Context context , CommandsUpdatedCallback updatedCallback ) { < nl > + super ( context ) ; < nl > + highlightColor = context . getResources ( ) . getColor ( R . color . primary ) ; < nl > + commands = users ( ) . get ( uid ) . getBotCommands ( ) . get ( ) ; < nl > + commandsToShow = users ( ) . get ( uid ) . getBotCommands ( ) . get ( ) ; < nl > + this . uid = uid ; < nl > + this . updatedCallback = updatedCallback ; < nl > + < nl > + } < nl > + < nl > + public void setQuery ( String q ) { < nl > + ArrayList < BotCommand > filterd = new ArrayList < BotCommand > ( ) ; < nl > + for ( BotCommand command : commands ) { < nl > + if ( command . getSlashCommand ( ) . toLowerCase ( ) . startsWith ( " q " ) ) { < nl > + filterd . add ( command ) ; < nl > + } < nl > + } < nl > + commandsToShow . clear ( ) ; < nl > + commandsToShow . addAll ( filterd ) ; < nl > + int newRowsCount = commandsToShow . size ( ) ; < nl > + updatedCallback . onMentionsUpdated ( oldRowsCount , newRowsCount ) ; < nl > + oldRowsCount = newRowsCount ; < nl > + notifyDataSetChanged ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public int getCount ( ) { < nl > + return commandsToShow . size ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public BotCommand getItem ( int position ) { < nl > + return commandsToShow . get ( position ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public long getItemId ( int position ) { < nl > + return position ; < nl > + } < nl > + < nl > + @ Override < nl > + protected ViewHolder < BotCommand > createHolder ( BotCommand obj ) { < nl > + return new CommandHolder ( ) ; < nl > + } < nl > + < nl > + public interface CommandsUpdatedCallback { < nl > + void onMentionsUpdated ( int oldRowsCount , int newRowsCount ) ; < nl > + } < nl > + < nl > + private class CommandHolder extends ViewHolder < BotCommand > { < nl > + < nl > + BotCommand data ; < nl > + private TextView userName ; < nl > + private TextView mentionHint ; < nl > + private AvatarView avatarView ; < nl > + < nl > + @ Override < nl > + public View init ( final BotCommand data , ViewGroup viewGroup , Context context ) { < nl > + View res = ( ( Activity ) context ) . getLayoutInflater ( ) . inflate ( R . layout . fragment _ chat _ mention _ item , viewGroup , false ) ; < nl > + res . findViewById ( R . id . divider ) . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getDividerColor ( ) ) ; < nl > + < nl > + userName = ( TextView ) res . findViewById ( R . id . name ) ; < nl > + userName . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextPrimaryColor ( ) ) ; < nl > + mentionHint = ( TextView ) res . findViewById ( R . id . mentionHint ) ; < nl > + mentionHint . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextSecondaryColor ( ) ) ; < nl > + avatarView = ( AvatarView ) res . findViewById ( R . id . avatar ) ; < nl > + avatarView . init ( Screen . dp ( 35 ) , 18 ) ; < nl > + this . data = data ; < nl > + < nl > + return res ; < nl > + } < nl > + < nl > + @ Override < nl > + public void bind ( BotCommand data , int position , Context context ) { < nl > + UserVM user = users ( ) . get ( uid ) ; < nl > + this . data = data ; < nl > + avatarView . bind ( user ) ; < nl > + CharSequence name = data . getSlashCommand ( ) ; < nl > + userName . setText ( name ) ; < nl > + < nl > + CharSequence hint = data . getDescription ( ) ; < nl > + mentionHint . setText ( hint ) ; < nl > + } < nl > + < nl > + < nl > + @ Override < nl > + public void unbind ( ) { < nl > + avatarView . unbind ( ) ; < nl > + } < nl > + } < nl > + < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / BotCommand . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / BotCommand . java < nl > new file mode 100644 < nl > index 0000000 . . e0b8a6c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / BotCommand . java < nl > @ @ - 0 , 0 + 1 , 36 @ @ < nl > + / * < nl > + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + * / < nl > + < nl > + package im . actor . core . entity ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + < nl > + public class BotCommand { < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final String command ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final String description ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final String locKey ; < nl > + < nl > + public BotCommand ( String command , String description , String loc ) { < nl > + this . command = command ; < nl > + this . description = description ; < nl > + this . locKey = loc ; < nl > + } < nl > + < nl > + public String getSlashCommand ( ) { < nl > + return command ; < nl > + } < nl > + < nl > + public String getDescription ( ) { < nl > + return description ; < nl > + } < nl > + < nl > + public String getLocKey ( ) { < nl > + return locKey ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > index 6bcea10 . . 39bce95 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > @ @ - 77 , 6 + 77 , 9 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV < nl > private String timeZone ; < nl > @ Property ( " readonly , nonatomic " ) < nl > private boolean isVerified ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private List < BotCommand > commands ; < nl > + < nl > < nl > @ NotNull < nl > @ Property ( " readonly , nonatomic " ) < nl > @ @ - 159 , 6 + 162 , 10 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV < nl > return isBot ; < nl > } < nl > < nl > + public List < BotCommand > getCommands ( ) { < nl > + return commands ; < nl > + } < nl > + < nl > public boolean isBlocked ( ) { < nl > return isBlocked ; < nl > } < nl > @ @ - 456 , 12 + 463 , 19 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV < nl > this . records . add ( new ContactRecord ( ContactRecordType . SOCIAL , record . getTypeSpec ( ) , record . getStringValue ( ) , < nl > record . getTitle ( ) , record . getSubtitle ( ) ) ) ; < nl > } < nl > + < nl > + / / Bot commands < nl > + for ( ApiBotCommand command : ext . getBotCommands ( ) ) { < nl > + commands . add ( new BotCommand ( command . getSlashCommand ( ) , command . getDescription ( ) , command . getLocKey ( ) ) ) ; < nl > + } < nl > + < nl > } < nl > this . about = ext . getAbout ( ) ; < nl > } else { < nl > this . isBlocked = false ; < nl > this . haveExtension = false ; < nl > this . records = new ArrayList < > ( ) ; < nl > + this . commands = new ArrayList < BotCommand > ( ) ; < nl > this . about = null ; < nl > this . timeZone = null ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java < nl > index e77b91c . . 6649cb2 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java < nl > @ @ - 16 , 12 + 16 , 14 @ @ import im . actor . core . entity . ContactRecordType ; < nl > import im . actor . core . entity . Sex ; < nl > import im . actor . core . entity . User ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . viewmodel . generics . ArrayListBotCommands ; < nl > import im . actor . core . viewmodel . generics . ArrayListContactRecord ; < nl > import im . actor . core . viewmodel . generics . ArrayListUserEmail ; < nl > import im . actor . core . viewmodel . generics . ArrayListUserPhone ; < nl > import im . actor . core . viewmodel . generics . ArrayListUserLink ; < nl > import im . actor . core . viewmodel . generics . AvatarValueModel ; < nl > import im . actor . core . viewmodel . generics . BooleanValueModel ; < nl > + import im . actor . core . viewmodel . generics . ValueModelBotCommands ; < nl > import im . actor . core . viewmodel . generics . ValueModelContactRecord ; < nl > import im . actor . core . viewmodel . generics . StringValueModel ; < nl > import im . actor . core . viewmodel . generics . ValueModelUserEmail ; < nl > @ @ - 84 , 6 + 86 , 10 @ @ public class UserVM extends BaseValueModel < User > { < nl > private ValueModelContactRecord contacts ; < nl > < nl > @ NotNull < nl > + private ValueModelBotCommands botCommands ; < nl > + < nl > + < nl > + @ NotNull < nl > private ArrayList < ModelChangedListener < UserVM > > listeners = new ArrayList < > ( ) ; < nl > < nl > / * * < nl > @ @ - 114 , 7 + 120 , 7 @ @ public class UserVM extends BaseValueModel < User > { < nl > emails = new ValueModelUserEmail ( " user . " + id + " . emails " , buildEmails ( user . getRecords ( ) ) ) ; < nl > links = new ValueModelUserLink ( " user . " + id + " . links " , buildLinks ( user . getRecords ( ) ) ) ; < nl > contacts = new ValueModelContactRecord ( " user . " + id + " . contacts " , new ArrayListContactRecord ( user . getRecords ( ) ) ) ; < nl > - < nl > + botCommands = new ValueModelBotCommands ( " user . " + id + " . bat _ commands " , new ArrayListBotCommands ( user . getCommands ( ) ) ) ; < nl > / / Notify about presence change every minute as text representation can change < nl > presenceTimer = new CommonTimer ( new Runnable ( ) { < nl > @ Override < nl > @ @ - 137 , 6 + 143 , 7 @ @ public class UserVM extends BaseValueModel < User > { < nl > isChanged | = avatar . change ( rawObj . getAvatar ( ) ) ; < nl > isChanged | = isBlocked . change ( rawObj . isBlocked ( ) ) ; < nl > isChanged | = isVerified . change ( rawObj . isVerified ( ) ) ; < nl > + isChanged | = botCommands . change ( new ArrayListBotCommands ( rawObj . getCommands ( ) ) ) ; < nl > < nl > / / TODO : better changed checking ? < nl > isChanged | = phones . change ( buildPhones ( rawObj . getRecords ( ) ) ) ; < nl > @ @ - 346 , 6 + 353 , 18 @ @ public class UserVM extends BaseValueModel < User > { < nl > } < nl > < nl > / * * < nl > + * Get Bot commands < nl > + * < nl > + * @ return ValueModel of ArrayList of BotCommands < nl > + * / < nl > + @ NotNull < nl > + @ ObjectiveCName ( " getBotCommandsModel " ) < nl > + public ValueModelBotCommands getBotCommands ( ) { < nl > + return botCommands ; < nl > + } < nl > + < nl > + < nl > + / * * < nl > * Subscribe to UserVM updates < nl > * < nl > * @ param listener UserVM changed listener < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListBotCommands . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListBotCommands . java < nl > new file mode 100644 < nl > index 0000000 . . 3b223fc < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListBotCommands . java < nl > @ @ - 0 , 0 + 1 , 26 @ @ < nl > + package im . actor . core . viewmodel . generics ; < nl > + < nl > + import java . util . ArrayList ; < nl > + import java . util . Collection ; < nl > + < nl > + import im . actor . core . entity . BotCommand ; < nl > + import im . actor . core . entity . ContactRecord ; < nl > + < nl > + public class ArrayListBotCommands extends ArrayList < BotCommand > { < nl > + < nl > + public ArrayListBotCommands ( int capacity ) { < nl > + super ( capacity ) ; < nl > + } < nl > + < nl > + public ArrayListBotCommands ( ) { < nl > + } < nl > + < nl > + public ArrayListBotCommands ( Collection < ? extends BotCommand > collection ) { < nl > + super ( collection ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public BotCommand get ( int index ) { < nl > + return super . get ( index ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ValueModelBotCommands . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ValueModelBotCommands . java < nl > new file mode 100644 < nl > index 0000000 . . 7f6c7e5 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ValueModelBotCommands . java < nl > @ @ - 0 , 0 + 1 , 31 @ @ < nl > + package im . actor . core . viewmodel . generics ; < nl > + < nl > + import im . actor . runtime . mvvm . ValueChangedListener ; < nl > + import im . actor . runtime . mvvm . ValueModel ; < nl > + < nl > + public class ValueModelBotCommands extends ValueModel < ArrayListBotCommands > { < nl > + < nl > + public ValueModelBotCommands ( String name , ArrayListBotCommands defaultValue ) { < nl > + super ( name , defaultValue ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public ArrayListBotCommands get ( ) { < nl > + return super . get ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void subscribe ( ValueChangedListener < ArrayListBotCommands > listener ) { < nl > + super . subscribe ( listener ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void subscribe ( ValueChangedListener < ArrayListBotCommands > listener , boolean notify ) { < nl > + super . subscribe ( listener , notify ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void unsubscribe ( ValueChangedListener < ArrayListBotCommands > listener ) { < nl > + super . unsubscribe ( listener ) ; < nl > + } < nl > + }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java < nl > new file mode 100644 < nl > index 0000000 . . bb8078b < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java < nl > @ @ - 0 , 0 + 1 , 80 @ @ < nl > + package im . actor . core . entity ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . storage . KeyValueItem ; < nl > + < nl > + public class DialogDesc extends BserObject implements KeyValueItem { < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private String title ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private Avatar avatar ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private boolean isUnread ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private int counter ; < nl > + < nl > + public DialogDesc ( Peer peer , String title , Avatar avatar , boolean isUnread , int counter ) { < nl > + this . peer = peer ; < nl > + this . title = title ; < nl > + this . avatar = avatar ; < nl > + this . isUnread = isUnread ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public Avatar getAvatar ( ) { < nl > + return avatar ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + < nl > + public boolean isUnread ( ) { < nl > + return isUnread ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; < nl > + title = values . getString ( 2 ) ; < nl > + byte [ ] av = values . getBytes ( 3 ) ; < nl > + if ( av ! = null ) { < nl > + avatar = new Avatar ( av ) ; < nl > + } < nl > + counter = values . getInt ( 4 ) ; < nl > + isUnread = values . getBool ( 5 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + writer . writeObject ( 1 , peer ) ; < nl > + writer . writeString ( 2 , title ) ; < nl > + if ( avatar ! = null ) { < nl > + writer . writeObject ( 3 , avatar ) ; < nl > + } < nl > + writer . writeInt ( 4 , counter ) ; < nl > + writer . writeBool ( 5 , isUnread ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public long getEngineId ( ) { < nl > + return peer . getUnuqueId ( ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 85714e6 . . 30e0d85 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 35 , 6 + 35 , 7 @ @ import im . actor . core . modules . internal . messages . CursorReaderActor ; < nl > import im . actor . core . modules . internal . messages . CursorReceiverActor ; < nl > import im . actor . core . modules . internal . messages . DialogsActor ; < nl > import im . actor . core . modules . internal . messages . DialogsHistoryActor ; < nl > + import im . actor . core . modules . internal . messages . GroupedDialogsActor ; < nl > import im . actor . core . modules . internal . messages . MessageDeleteActor ; < nl > import im . actor . core . modules . internal . messages . MessageShownActor ; < nl > import im . actor . core . modules . internal . messages . MessageShownFilter ; < nl > @ @ - 46 , 6 + 47 , 7 @ @ import im . actor . core . network . RpcException ; < nl > import im . actor . core . network . RpcInternalException ; < nl > import im . actor . core . viewmodel . Command ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > + import im . actor . core . viewmodel . DialogGroupsVM ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > @ @ - 62 , 8 + 64 , 10 @ @ import static im . actor . runtime . actors . ActorSystem . system ; < nl > public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > private ListEngine < Dialog > dialogs ; < nl > + < nl > private ActorRef dialogsActor ; < nl > private ActorRef dialogsHistoryActor ; < nl > + private ActorRef dialogsGroupedActor ; < nl > private ActorRef ownReadActor ; < nl > private ActorRef plainReadActor ; < nl > private ActorRef plainReceiverActor ; < nl > @ @ - 79 , 6 + 83 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > private final SyncKeyValue cursorStorage ; < nl > < nl > + private final DialogGroupsVM dialogGroups = new DialogGroupsVM ( ) ; < nl > + < nl > public MessagesModule ( final ModuleContext context ) { < nl > super ( context ) ; < nl > < nl > @ @ - 99 , 6 + 105 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > return new DialogsHistoryActor ( context ( ) ) ; < nl > } < nl > } ) , " actor / dialogs / history " ) ; < nl > + < nl > + this . dialogsGroupedActor = system ( ) . actorOf ( Props . create ( GroupedDialogsActor . class , new ActorCreator < GroupedDialogsActor > ( ) { < nl > + @ Override < nl > + public GroupedDialogsActor create ( ) { < nl > + return new GroupedDialogsActor ( context ( ) ) ; < nl > + } < nl > + } ) , " actor / dialogs / grouped " ) ; < nl > + < nl > this . ownReadActor = system ( ) . actorOf ( Props . create ( OwnReadActor . class , new ActorCreator < OwnReadActor > ( ) { < nl > @ Override < nl > public OwnReadActor create ( ) { < nl > @ @ - 139 , 6 + 153 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > context ( ) . getEvents ( ) . subscribe ( this , PeerChatOpened . EVENT ) ; < nl > } < nl > < nl > + public DialogGroupsVM getDialogGroupsVM ( ) { < nl > + return dialogGroups ; < nl > + } < nl > + < nl > public ActorRef getSendMessageActor ( ) { < nl > return sendMessageActor ; < nl > } < nl > @ @ - 221 , 6 + 239 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > return dialogsHistoryActor ; < nl > } < nl > < nl > + public ActorRef getDialogsGroupedActor ( ) { < nl > + return dialogsGroupedActor ; < nl > + } < nl > + < nl > public ListEngine < Dialog > getDialogsEngine ( ) { < nl > return dialogs ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > index 6641ed9 . . 8bf76dc 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > @ @ - 44 , 6 + 44 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > private IndexStorage outPendingIndex ; < nl > private IndexStorage inPendingIndex ; < nl > private ActorRef dialogsActor ; < nl > + private ActorRef dialogsGroupedActor ; < nl > private long inReadState ; < nl > private long outReadState ; < nl > private long outReceiveState ; < nl > @ @ - 62 , 6 + 63 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > docs = context ( ) . getMessagesModule ( ) . getConversationDocsEngine ( peer ) ; < nl > < nl > dialogsActor = context ( ) . getMessagesModule ( ) . getDialogsActor ( ) ; < nl > + dialogsGroupedActor = context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) ; < nl > outPendingIndex = Storage . createIndex ( " out _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ; < nl > inPendingIndex = Storage . createIndex ( " in _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ; < nl > < nl > @ @ - 135 , 6 + 137 , 8 @ @ public class ConversationActor extends ModuleActor { < nl > / / Update dialogs < nl > if ( topMessage ! = null ) { < nl > if ( ! isHiddenPeer ) { < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , < nl > + topMessage . getSortDate ( ) ) ) ; < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , topMessage , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > } < nl > @ @ - 185 , 6 + 189 , 8 @ @ public class ConversationActor extends ModuleActor { < nl > < nl > if ( ! isHiddenPeer ) { < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , message , inPendingIndex . getCount ( ) ) ) ; < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , < nl > + message . getSortDate ( ) ) ) ; < nl > } < nl > } < nl > } < nl > @ @ - 239 , 6 + 245 , 8 @ @ public class ConversationActor extends ModuleActor { < nl > if ( ! isHiddenPeer ) { < nl > / / Updating dialog < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , updatedMsg , inPendingIndex . getCount ( ) ) ) ; < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , < nl > + updatedMsg . getSortDate ( ) ) ) ; < nl > } < nl > < nl > / / Updating pending index < nl > @ @ - 361 , 6 + 369 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > < nl > if ( ! isHiddenPeer ) { < nl > dialogsActor . send ( new DialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > + / / TODO : Implement for grouped < nl > } < nl > } < nl > < nl > @ @ - 402 , 6 + 411 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > inPendingIndex . clear ( ) ; < nl > outPendingIndex . clear ( ) ; < nl > dialogsActor . send ( new DialogsActor . ChatDelete ( peer ) ) ; < nl > + / / TODO : Implement for grouped < nl > } < nl > < nl > / / History < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java < nl > index 311de19 . . b77ac37 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java < nl > @ @ - 50 , 7 + 50 , 7 @ @ public class DialogsActor extends ModuleActor { < nl > long start = im . actor . runtime . Runtime . getCurrentTime ( ) ; < nl > PeerDesc peerDesc = buildPeerDesc ( peer ) ; < nl > if ( peerDesc = = null ) { < nl > - Log . d ( " DialogsActor " , " unknown peer desk " ) ; < nl > + Log . d ( " DialogsActor " , " unknown peer desc " ) ; < nl > return ; < nl > } < nl > < nl > @ @ - 75 , 8 + 75 , 11 @ @ public class DialogsActor extends ModuleActor { < nl > . setText ( contentDescription . getText ( ) ) < nl > . setRelatedUid ( contentDescription . getRelatedUser ( ) ) < nl > . setStatus ( message . getMessageState ( ) ) < nl > - . setSenderId ( message . getSenderId ( ) ) < nl > - . setUnreadCount ( counter ) ; < nl > + . setSenderId ( message . getSenderId ( ) ) ; < nl > + < nl > + if ( counter > = 0 ) { < nl > + builder . setUnreadCount ( counter ) ; < nl > + } < nl > < nl > boolean forceUpdate = false ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > new file mode 100644 < nl > index 0000000 . . f0fdf00 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > @ @ - 0 , 0 + 1 , 184 @ @ < nl > + package im . actor . core . modules . internal . messages ; < nl > + < nl > + import java . util . ArrayList ; < nl > + import java . util . HashMap ; < nl > + < nl > + import im . actor . core . entity . Avatar ; < nl > + import im . actor . core . entity . DialogDesc ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerType ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . utils . ModuleActor ; < nl > + import im . actor . core . viewmodel . DialogGroup ; < nl > + < nl > + public class GroupedDialogsActor extends ModuleActor { < nl > + < nl > + private PeerGroup groups = new PeerGroup ( " groups " , " Groups " ) ; < nl > + private PeerGroup privates = new PeerGroup ( " private " , " Private " ) ; < nl > + < nl > + public GroupedDialogsActor ( ModuleContext context ) { < nl > + super ( context ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + } < nl > + < nl > + private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { < nl > + < nl > + } < nl > + < nl > + private void onNewMessage ( Peer peer , long sortDate , int counter ) { < nl > + < nl > + PeerGroup peerGroup ; < nl > + if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + peerGroup = groups ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + peerGroup = privates ; < nl > + } else { < nl > + return ; < nl > + } < nl > + < nl > + boolean found = false ; < nl > + for ( PeerDesc d : peerGroup . getPeers ( ) ) { < nl > + if ( d . getPeer ( ) . equals ( peer ) ) { < nl > + d . setCounter ( counter ) ; < nl > + found = true ; < nl > + } < nl > + } < nl > + < nl > + if ( ! found ) { < nl > + peerGroup . getPeers ( ) . add ( new PeerDesc ( peer , counter ) ) ; < nl > + } < nl > + < nl > + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; < nl > + ArrayList < DialogDesc > groupDescs = new ArrayList < DialogDesc > ( ) ; < nl > + for ( PeerDesc d : peerGroup . getPeers ( ) ) { < nl > + groupDescs . add ( new DialogDesc ( d . getPeer ( ) , " GRPOUP # " + d . getPeer ( ) . getPeerId ( ) , < nl > + null , false , d . counter ) ) ; < nl > + } < nl > + groups . add ( new DialogGroup ( " Groups " , " group " , groupDescs ) ) ; < nl > + < nl > + context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof PeerInformationChanged ) { < nl > + PeerInformationChanged informationChanged = ( PeerInformationChanged ) message ; < nl > + onPeerInfoChanged ( informationChanged . getPeer ( ) , < nl > + informationChanged . getTitle ( ) , < nl > + informationChanged . getAvatar ( ) ) ; < nl > + } else if ( message instanceof NewMessage ) { < nl > + NewMessage newMessage = ( NewMessage ) message ; < nl > + onNewMessage ( newMessage . peer , newMessage . sortDate , newMessage . counter ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > + public static class PeerInformationChanged { < nl > + < nl > + private Peer peer ; < nl > + private String title ; < nl > + private Avatar avatar ; < nl > + < nl > + public PeerInformationChanged ( Peer peer , String title , Avatar avatar ) { < nl > + this . peer = peer ; < nl > + this . title = title ; < nl > + this . avatar = avatar ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public Avatar getAvatar ( ) { < nl > + return avatar ; < nl > + } < nl > + } < nl > + < nl > + public static class CounterChanged { < nl > + private Peer peer ; < nl > + private int counter ; < nl > + < nl > + public CounterChanged ( Peer peer , int counter ) { < nl > + this . peer = peer ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + } < nl > + < nl > + public static class NewMessage { < nl > + < nl > + private Peer peer ; < nl > + private int counter ; < nl > + private long sortDate ; < nl > + < nl > + public NewMessage ( Peer peer , int counter , long sortDate ) { < nl > + this . peer = peer ; < nl > + this . counter = counter ; < nl > + this . sortDate = sortDate ; < nl > + } < nl > + } < nl > + < nl > + private class PeerGroup { < nl > + < nl > + private String key ; < nl > + private String title ; < nl > + private ArrayList < PeerDesc > peers ; < nl > + < nl > + public PeerGroup ( String key , String title ) { < nl > + this . key = key ; < nl > + this . title = title ; < nl > + this . peers = new ArrayList < PeerDesc > ( ) ; < nl > + } < nl > + < nl > + public String getKey ( ) { < nl > + return key ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public ArrayList < PeerDesc > getPeers ( ) { < nl > + return peers ; < nl > + } < nl > + } < nl > + < nl > + private class PeerDesc { < nl > + < nl > + private Peer peer ; < nl > + private int counter ; < nl > + < nl > + public PeerDesc ( Peer peer , int counter ) { < nl > + this . peer = peer ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + < nl > + public void setCounter ( int counter ) { < nl > + this . counter = counter ; < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > new file mode 100644 < nl > index 0000000 . . ae47f02 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > @ @ - 0 , 0 + 1 , 30 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . entity . DialogDesc ; < nl > + < nl > + public class DialogGroup { < nl > + < nl > + private String title ; < nl > + private String key ; < nl > + private ArrayList < DialogDesc > dialogs ; < nl > + < nl > + public DialogGroup ( String title , String key , ArrayList < DialogDesc > dialogs ) { < nl > + this . title = title ; < nl > + this . key = key ; < nl > + this . dialogs = dialogs ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public String getKey ( ) { < nl > + return key ; < nl > + } < nl > + < nl > + public ArrayList < DialogDesc > getDialogs ( ) { < nl > + return dialogs ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroupsVM . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroupsVM . java < nl > new file mode 100644 < nl > index 0000000 . . 0a374ba < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroupsVM . java < nl > @ @ - 0 , 0 + 1 , 18 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . runtime . mvvm . ValueModel ; < nl > + < nl > + public class DialogGroupsVM { < nl > + < nl > + private ValueModel < ArrayList < DialogGroup > > groupsValueModel ; < nl > + < nl > + public DialogGroupsVM ( ) { < nl > + groupsValueModel = new ValueModel < ArrayList < DialogGroup > > ( " groups . model " , null ) ; < nl > + } < nl > + < nl > + public ValueModel < ArrayList < DialogGroup > > getGroupsValueModel ( ) { < nl > + return groupsValueModel ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java < nl > index 530cb4b . . 31e2f0e 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java < nl > + + + b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java < nl > @ @ - 119 , 21 + 119 , 9 @ @ public class SQLiteKeyValue implements KeyValueStorage { < nl > } < nl > < nl > @ Override < nl > - public void clear ( ) { < nl > - checkSqlite ( ) ; < nl > - db . beginTransaction ( ) ; < nl > - try { < nl > - db . execSQL ( " DELETE FROM \ " " + name + " \ " " ) ; < nl > - db . setTransactionSuccessful ( ) ; < nl > - } finally { < nl > - db . endTransaction ( ) ; < nl > - } < nl > - } < nl > - < nl > - @ Override < nl > - public byte [ ] getValue ( long id ) { < nl > + public byte [ ] loadItem ( long key ) { < nl > checkSqlite ( ) ; < nl > - Cursor cursor = db . query ( " \ " " + name + " \ " " , new String [ ] { " \ " BYTES \ " " } , " \ " ID \ " = ? " , new String [ ] { " " + id } , null , null , null ) ; < nl > + Cursor cursor = db . query ( " \ " " + name + " \ " " , new String [ ] { " \ " BYTES \ " " } , " \ " ID \ " = ? " , new String [ ] { " " + key } , null , null , null ) ; < nl > if ( cursor = = null ) { < nl > return null ; < nl > } < nl > @ @ - 146 , 4 + 134 , 26 @ @ public class SQLiteKeyValue implements KeyValueStorage { < nl > } < nl > return null ; < nl > } < nl > + < nl > + @ Override < nl > + public List < KeyValueRecord > loadItems ( long [ ] keys ) { < nl > + return null ; < nl > + } < nl > + < nl > + @ Override < nl > + public List < KeyValueRecord > loadAllItems ( ) { < nl > + return null ; < nl > + } < nl > + < nl > + @ Override < nl > + public void clear ( ) { < nl > + checkSqlite ( ) ; < nl > + db . beginTransaction ( ) ; < nl > + try { < nl > + db . execSQL ( " DELETE FROM \ " " + name + " \ " " ) ; < nl > + db . setTransactionSuccessful ( ) ; < nl > + } finally { < nl > + db . endTransaction ( ) ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java < nl > index b153387 . . 25b59e1 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java < nl > + + + b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java < nl > @ @ - 124 , 6 + 124 , 11 @ @ public class SQLiteList implements ListStorageDisplayEx { < nl > return null ; < nl > } < nl > < nl > + @ Override < nl > + public List < ListEngineRecord > loadAllItems ( ) { < nl > + return null ; < nl > + } < nl > + < nl > < nl > public ListEngineRecord loadItemBySortKey ( long key ) { < nl > checkTable ( ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java < nl > index 60239e4 . . c7dd481 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java < nl > @ @ - 9 , 6 + 9 , 7 @ @ import com . google . j2objc . annotations . ObjectiveCName ; < nl > import java . util . List ; < nl > < nl > public interface KeyValueEngine < V extends KeyValueItem > { < nl > + < nl > @ ObjectiveCName ( " addOrUpdateItem : " ) < nl > void addOrUpdateItem ( V item ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift < nl > index fb65f46 . . c22c65a 100644 < nl > - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift < nl > + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift < nl > @ @ - 5 , 18 + 5 , 21 @ @ < nl > import Foundation < nl > < nl > @ objc class FMDBKeyValue : NSObject , ARKeyValueStorage { < nl > - var db : FMDatabase ? ; < nl > + < nl > + var db : FMDatabase ! < nl > < nl > - let databasePath : String ; < nl > - let tableName : String ; < nl > + let databasePath : String < nl > + let tableName : String < nl > < nl > - let queryCreate : String ; < nl > - let queryItem : String ; < nl > - let queryAdd : String ; < nl > - let queryDelete : String ; < nl > - let queryDeleteAll : String ; < nl > + let queryCreate : String < nl > + let queryItem : String < nl > + let queryItems : String < nl > + let queryAll : String < nl > + let queryAdd : String < nl > + let queryDelete : String < nl > + let queryDeleteAll : String < nl > < nl > - var isTableChecked : Bool = false ; < nl > + var isTableChecked : Bool = false < nl > < nl > init ( databasePath : String , tableName : String ) { < nl > self . databasePath = databasePath < nl > @ @ - 26 , 11 + 29 , 13 @ @ import Foundation < nl > self . queryCreate = " CREATE TABLE IF NOT EXISTS " + tableName + " ( " + < nl > " \ " ID \ " INTEGER NOT NULL , " + < nl > " \ " BYTES \ " BLOB NOT NULL , " + < nl > - " PRIMARY KEY ( \ " ID \ " ) ) ; " ; < nl > - self . queryItem = " SELECT \ " BYTES \ " FROM " + tableName + " WHERE \ " ID \ " = ? ; " ; < nl > - self . queryAdd = " REPLACE INTO " + tableName + " ( \ " ID \ " , \ " BYTES \ " ) VALUES ( ? , ? ) ; " ; < nl > - self . queryDelete = " DELETE FROM " + tableName + " WHERE \ " ID \ " = ? ; " ; < nl > - self . queryDeleteAll = " DELETE FROM " + tableName + " ; " ; < nl > + " PRIMARY KEY ( \ " ID \ " ) ) ; " < nl > + self . queryItem = " SELECT \ " BYTES \ " FROM " + tableName + " WHERE \ " ID \ " = ? ; " < nl > + self . queryItems = " SELECT ( \ " ID \ " , \ " BYTES \ " ) FROM " + tableName + " WHERE \ " ID \ " in ? ; " < nl > + self . queryAll = " SELECT ( \ " ID \ " , \ " BYTES \ " ) FROM " + tableName + " ; " < nl > + self . queryAdd = " REPLACE INTO " + tableName + " ( \ " ID \ " , \ " BYTES \ " ) VALUES ( ? , ? ) ; " < nl > + self . queryDelete = " DELETE FROM " + tableName + " WHERE \ " ID \ " = ? ; " < nl > + self . queryDeleteAll = " DELETE FROM " + tableName + " ; " < nl > < nl > super . init ( ) < nl > } < nl > @ @ - 39 , 68 + 44 , 103 @ @ import Foundation < nl > if ( isTableChecked ) { < nl > return < nl > } < nl > - isTableChecked = true ; < nl > + isTableChecked = true < nl > < nl > self . db = FMDatabase ( path : databasePath ) < nl > - self . db ! . open ( ) < nl > - if ( ! db ! . tableExists ( tableName ) ) { < nl > - db ! . executeUpdate ( queryCreate ) < nl > + self . db . open ( ) < nl > + if ( ! db . tableExists ( tableName ) ) { < nl > + db . executeUpdate ( queryCreate ) < nl > } < nl > } < nl > < nl > func addOrUpdateItems ( values : JavaUtilList ! ) { < nl > - checkTable ( ) ; < nl > + checkTable ( ) < nl > < nl > - db ! . beginTransaction ( ) < nl > + db . beginTransaction ( ) < nl > for i in 0 . . < values . size ( ) { < nl > - let record = values . getWithInt ( i ) as ! ARKeyValueRecord ; < nl > - db ! . executeUpdate ( queryAdd , record . getId ( ) . toNSNumber ( ) , record . getData ( ) ! . toNSData ( ) ) < nl > + let record = values . getWithInt ( i ) as ! ARKeyValueRecord < nl > + db . executeUpdate ( queryAdd , record . getId ( ) . toNSNumber ( ) , record . getData ( ) ! . toNSData ( ) ) < nl > } < nl > - db ! . commit ( ) < nl > + db . commit ( ) < nl > } < nl > < nl > func addOrUpdateItemWithKey ( key : jlong , withData data : IOSByteArray ! ) { < nl > - checkTable ( ) ; < nl > + checkTable ( ) < nl > < nl > - db ! . beginTransaction ( ) < nl > - db ! . executeUpdate ( queryAdd , key . toNSNumber ( ) , data ! . toNSData ( ) ) < nl > - db ! . commit ( ) < nl > + db . beginTransaction ( ) < nl > + db . executeUpdate ( queryAdd , key . toNSNumber ( ) , data ! . toNSData ( ) ) < nl > + db . commit ( ) < nl > } < nl > < nl > func removeItemsWithKeys ( keys : IOSLongArray ! ) { < nl > - checkTable ( ) ; < nl > + checkTable ( ) < nl > < nl > - db ! . beginTransaction ( ) < nl > + db . beginTransaction ( ) < nl > for i in 0 . . < keys . length ( ) { < nl > let key = keys . longAtIndex ( UInt ( i ) ) ; < nl > - db ! . executeUpdate ( queryDelete , key . toNSNumber ( ) ) < nl > + db . executeUpdate ( queryDelete , key . toNSNumber ( ) ) < nl > } < nl > - db ! . commit ( ) < nl > + db . commit ( ) < nl > } < nl > < nl > func removeItemWithKey ( key : jlong ) { < nl > - checkTable ( ) ; < nl > + checkTable ( ) < nl > < nl > - db ! . beginTransaction ( ) < nl > - db ! . executeUpdate ( queryDelete , key . toNSNumber ( ) ) < nl > - db ! . commit ( ) < nl > + db . beginTransaction ( ) < nl > + db . executeUpdate ( queryDelete , key . toNSNumber ( ) ) < nl > + db . commit ( ) < nl > } < nl > < nl > - func getValueWithKey ( key : jlong ) - > IOSByteArray ! { < nl > - checkTable ( ) ; < nl > + func loadItemWithKey ( key : jlong ) - > IOSByteArray ! { < nl > + checkTable ( ) < nl > < nl > - let result = db ! . dataForQuery ( queryItem , key . toNSNumber ( ) ) ; < nl > + let result = db . dataForQuery ( queryItem , key . toNSNumber ( ) ) < nl > if ( result = = nil ) { < nl > - return nil ; < nl > + return nil < nl > + } < nl > + return result . toJavaBytes ( ) < nl > + } < nl > + < nl > + func loadAllItems ( ) - > JavaUtilList ! { < nl > + checkTable ( ) < nl > + < nl > + let res = JavaUtilArrayList ( ) < nl > + < nl > + if let result = db . executeQuery ( queryAll ) { < nl > + while ( result . next ( ) ) { < nl > + res . addWithId ( ARKeyValueRecord ( key : jlong ( result . longLongIntForColumn ( " ID " ) ) , withData : result . dataForColumn ( " BYTES " ) . toJavaBytes ( ) ) ) < nl > + } < nl > + } < nl > + < nl > + return res < nl > + } < nl > + < nl > + func loadItems ( keys : IOSLongArray ! ) - > JavaUtilList ! { < nl > + checkTable ( ) < nl > + < nl > + / / Converting to NSNumbers < nl > + var ids = [ NSNumber ] ( ) < nl > + for i in 0 . . < keys . length ( ) { < nl > + ids . append ( keys . longAtIndex ( UInt ( i ) ) . toNSNumber ( ) ) < nl > } < nl > - return result . toJavaBytes ( ) ; < nl > + < nl > + let res = JavaUtilArrayList ( ) < nl > + < nl > + if let result = db . executeQuery ( queryItems , ids ) { < nl > + while ( result . next ( ) ) { < nl > + / / TODO : Optimize lookup < nl > + res . addWithId ( ARKeyValueRecord ( key : jlong ( result . longLongIntForColumn ( " ID " ) ) , withData : result . dataForColumn ( " BYTES " ) . toJavaBytes ( ) ) ) < nl > + } < nl > + } < nl > + < nl > + return res < nl > } < nl > < nl > func clear ( ) { < nl > - checkTable ( ) ; < nl > + checkTable ( ) < nl > < nl > - db ! . beginTransaction ( ) < nl > - db ! . executeUpdate ( queryDeleteAll ) ; < nl > - db ! . commit ( ) < nl > + db . beginTransaction ( ) < nl > + db . executeUpdate ( queryDeleteAll ) < nl > + db . commit ( ) < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift < nl > index 27ac7e7 . . 209a6e3 100644 < nl > - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift < nl > + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift < nl > @ @ - 199 , 6 + 199 , 12 @ @ class FMDBList : NSObject , ARListStorageDisplayEx { < nl > } < nl > } < nl > < nl > + func loadAllItems ( ) - > JavaUtilList ! { < nl > + let res = JavaUtilArrayList ( ) < nl > + / / TODO : Implement < nl > + return res < nl > + } < nl > + < nl > func loadForwardWithSortKey ( sortingKey : JavaLangLong ! , withLimit limit : jint ) - > JavaUtilList ! { < nl > checkTable ( ) ; < nl > var result : FMResultSet ? = nil ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java 
 index 5c2fb39 . . b47ffa1 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / ChatActivity . java 
 @ @ - 49 , 7 + 49 , 6 @ @ import java . io . File ; 
 import java . util . ArrayList ; 
 import java . util . Set ; 
 
 - import im . actor . core . api . rpc . ResponseSeqDate ; 
 import im . actor . core . entity . MentionFilterResult ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 @ @ - 70 , 6 + 69 , 7 @ @ import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . ActorStyle ; 
 import im . actor . sdk . R ; 
 import im . actor . sdk . controllers . Intents ; 
 + import im . actor . sdk . controllers . conversation . botcommands . CommandsAdapter ; 
 import im . actor . sdk . controllers . conversation . mentions . MentionsAdapter ; 
 import im . actor . sdk . controllers . conversation . messages . AudioHolder ; 
 import im . actor . sdk . controllers . conversation . view . FastShareAdapter ; 
 @ @ - 79 , 6 + 79 , 7 @ @ import im . actor . sdk . intents . ActorIntent ; 
 import im . actor . sdk . util . Randoms ; 
 import im . actor . sdk . util . Screen ; 
 import im . actor . core . utils . GalleryScannerActor ; 
 + import im . actor . sdk . view . adapters . HolderAdapter ; 
 import im . actor . sdk . view . adapters . RecyclerListView ; 
 import im . actor . sdk . view . avatar . AvatarView ; 
 import im . actor . sdk . controllers . conversation . view . TypingDrawable ; 
 @ @ - 98 , 6 + 99 , 7 @ @ import static im . actor . sdk . util . ActorSDKMessenger . groups ; 
 import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 import static im . actor . sdk . util . ActorSDKMessenger . users ; 
 
 + @ SuppressWarnings ( " NullableProblems " ) 
 public class ChatActivity extends ActorEditTextActivity { 
 
 public static final String EXTRA _ CHAT _ PEER = " chat _ peer " ; 
 @ @ - 150 , 10 + 152 , 10 @ @ public class ChatActivity extends ActorEditTextActivity { 
 private ImageView barTypingIcon ; 
 / / Toolbar typing text 
 private TextView barTyping ; 
 - private boolean isMentionsVisible = false ; 
 + private boolean isAutocompleteVisible = false ; 
 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Voice messges 
 + / / Voice messages 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 private View audioContainer ; 
 private View recordPoint ; 
 @ @ - 171 , 16 + 173 , 17 @ @ public class ChatActivity extends ActorEditTextActivity { 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Mentions 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - private MentionsAdapter mentionsAdapter ; 
 - private RecyclerListView mentionsList ; 
 - private String mentionSearchString = " " ; 
 - private int mentionStart ; 
 - private FrameLayout quoteContainer ; 
 + private HolderAdapter autocompleteAdapter ; 
 + private CommandsAdapter commandsAdapter ; 
 + private RecyclerListView autocompleteList ; 
 + private String autocompleteString = " " ; 
 + private int autocompleteTriggerStart ; 
 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Quote 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 private TextView quoteText ; 
 + private FrameLayout quoteContainer ; 
 private String currentQuote = " " ; 
 private String sendUri ; 
 
 @ @ - 217 , 6 + 220 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { 
 private long currentEditRid ; 
 private Animation . AnimationListener animationListener ; 
 private Menu menu ; 
 + private boolean isBot = false ; 
 
 public static Intent build ( Peer peer , boolean compose , Context context ) { 
 final Intent intent = new Intent ( context , ChatActivity . class ) ; 
 @ @ - 290 , 8 + 294 , 8 @ @ public class ChatActivity extends ActorEditTextActivity { 
 } ) ; 
 
 / / Mentions 
 - mentionsList = ( RecyclerListView ) findViewById ( R . id . mentionsList ) ; 
 - mentionsList . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; 
 + autocompleteList = ( RecyclerListView ) findViewById ( R . id . mentionsList ) ; 
 + autocompleteList . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getMainBackgroundColor ( ) ) ; 
 
 / / Quote 
 quoteContainer = ( FrameLayout ) findViewById ( R . id . quoteContainer ) ; 
 @ @ - 559 , 6 + 563 , 8 @ @ public class ChatActivity extends ActorEditTextActivity { 
 public void onResume ( ) { 
 super . onResume ( ) ; 
 
 + isBot = ( peer . getPeerType ( ) = = PeerType . PRIVATE & & users ( ) . get ( peer . getPeerId ( ) ) . isBot ( ) ) ; 
 + 
 if ( peer . getPeerType ( ) = = PeerType . PRIVATE & & menu ! = null ) { 
 menu . findItem ( R . id . add _ to _ contacts ) . setVisible ( users ( ) . get ( peer . getPeerId ( ) ) . isContact ( ) . get ( ) ) ; 
 invalidateOptionsMenu ( ) ; 
 @ @ - 780 , 7 + 786 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { 
 } 
 
 messageEditText . setText ( " " ) ; 
 - mentionSearchString = " " ; 
 + autocompleteString = " " ; 
 
 if ( rawText . length ( ) = = 0 ) { 
 return ; 
 @ @ - 1009 , 25 + 1015 , 34 @ @ public class ChatActivity extends ActorEditTextActivity { 
 } 
 
 / / Mentions 
 + / / Bot commands 
 
 - private void showMentions ( boolean initEmpty ) { 
 - if ( isMentionsVisible ) { 
 + private void showAutoComplete ( boolean initEmpty , boolean isMentions ) { 
 + if ( isAutocompleteVisible ) { 
 return ; 
 } 
 - isMentionsVisible = true ; 
 + isAutocompleteVisible = true ; 
 
 + if ( ! isMentions ) { 
 + autocompleteAdapter = new CommandsAdapter ( peer . getPeerId ( ) , this , new CommandsAdapter . CommandsUpdatedCallback ( ) { 
 + @ Override 
 + public void onMentionsUpdated ( int oldRowsCount , int newRowsCount ) { 
 + onMentionsChanged ( oldRowsCount , newRowsCount ) ; 
 + } 
 + } ) ; 
 + } else { 
 + GroupVM groupInfo = groups ( ) . get ( peer . getPeerId ( ) ) ; 
 + autocompleteAdapter = new MentionsAdapter ( groupInfo . getId ( ) , this , new MentionsAdapter . MentionsUpdatedCallback ( ) { 
 
 - GroupVM groupInfo = groups ( ) . get ( peer . getPeerId ( ) ) ; 
 - mentionsAdapter = new MentionsAdapter ( groupInfo . getId ( ) , this , new MentionsAdapter . MentionsUpdatedCallback ( ) { 
 - 
 - @ Override 
 - public void onMentionsUpdated ( int oldRowsCount , int newRowsCount ) { 
 - onMentionsChanged ( oldRowsCount , newRowsCount ) ; 
 - } 
 - } , initEmpty ) ; 
 + @ Override 
 + public void onMentionsUpdated ( int oldRowsCount , int newRowsCount ) { 
 + onMentionsChanged ( oldRowsCount , newRowsCount ) ; 
 + } 
 + } , initEmpty ) ; 
 + } 
 
 - mentionsList . setAdapter ( mentionsAdapter ) ; 
 - mentionsList . setOnItemClickListener ( new AdapterView . OnItemClickListener ( ) { 
 + autocompleteList . setAdapter ( autocompleteAdapter ) ; 
 + autocompleteList . setOnItemClickListener ( new AdapterView . OnItemClickListener ( ) { 
 @ Override 
 public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { 
 Object item = parent . getItemAtPosition ( position ) ; 
 @ @ - 1035 , 15 + 1050 , 15 @ @ public class ChatActivity extends ActorEditTextActivity { 
 
 String origMention = ( ( MentionFilterResult ) item ) . getMentionString ( ) ; 
 
 - if ( mentionStart ! = - 1 & & mentionStart + mentionSearchString . length ( ) + 1 < = messageEditText . getText ( ) . length ( ) ) { 
 + if ( autocompleteTriggerStart ! = - 1 & & autocompleteTriggerStart + autocompleteString . length ( ) + 1 < = messageEditText . getText ( ) . length ( ) ) { 
 
 - String mentionString = origMention + ( mentionStart = = 0 ? " : " : " " ) ; 
 + String mentionString = origMention + ( autocompleteTriggerStart = = 0 ? " : " : " " ) ; 
 
 Editable text = messageEditText . getText ( ) ; 
 
 - int cursorPosition = mentionStart + mentionString . length ( ) ; 
 + int cursorPosition = autocompleteTriggerStart + mentionString . length ( ) ; 
 
 - text . replace ( mentionStart , mentionStart + mentionSearchString . length ( ) + 1 , mentionString ) ; 
 + text . replace ( autocompleteTriggerStart , autocompleteTriggerStart + autocompleteString . length ( ) + 1 , mentionString ) ; 
 
 messageEditText . setSelection ( cursorPosition , cursorPosition ) ; 
 } 
 @ @ - 1052 , 23 + 1067 , 23 @ @ public class ChatActivity extends ActorEditTextActivity { 
 } 
 } ) ; 
 hideShare ( ) ; 
 - expandMentions ( mentionsList , 0 , mentionsList . getCount ( ) ) ; 
 + expandMentions ( autocompleteList , 0 , autocompleteList . getCount ( ) ) ; 
 } 
 
 private void hideMentions ( ) { 
 - if ( ! isMentionsVisible ) { 
 + if ( ! isAutocompleteVisible ) { 
 return ; 
 } 
 - isMentionsVisible = false ; 
 + isAutocompleteVisible = false ; 
 
 - expandMentions ( mentionsList , mentionsAdapter . getCount ( ) , 0 ) ; 
 - mentionsAdapter = null ; 
 - mentionsList . setAdapter ( null ) ; 
 + expandMentions ( autocompleteList , autocompleteAdapter . getCount ( ) , 0 ) ; 
 + autocompleteAdapter = null ; 
 + autocompleteList . setAdapter ( null ) ; 
 } 
 
 private void onMentionsChanged ( int oldRowsCount , int newRowsCount ) { 
 - if ( mentionsAdapter ! = null ) { 
 - expandMentions ( mentionsList , oldRowsCount , newRowsCount ) ; 
 + if ( autocompleteAdapter ! = null ) { 
 + expandMentions ( autocompleteList , oldRowsCount , newRowsCount ) ; 
 } 
 } 
 
 @ @ - 1108 , 7 + 1123 , 7 @ @ public class ChatActivity extends ActorEditTextActivity { 
 
 @ Override 
 public void onBackPressed ( ) { 
 - if ( isMentionsVisible ) { 
 + if ( isAutocompleteVisible ) { 
 hideMentions ( ) ; 
 } else if ( isShareVisible ) { 
 hideShare ( ) ; 
 @ @ - 1349 , 31 + 1364 , 44 @ @ public class ChatActivity extends ActorEditTextActivity { 
 
 currentWord = currentWord . isEmpty ( ) ? str : currentWord ; 
 
 - if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + char autocompleteTriggerChar = ' @ ' ; 
 + String autocompleteTriggerString = " @ " ; 
 + 
 + 
 + if ( peer . getPeerType ( ) = = PeerType . GROUP | | isBot ) { 
 + 
 + if ( isBot ) { 
 + autocompleteTriggerChar = ' / ' ; 
 + autocompleteTriggerString = " / " ; 
 + } 
 / / Open mentions 
 - if ( count = = 1 & & s . charAt ( start ) = = ' @ ' & & ! str . endsWith ( " " ) ) { 
 - showMentions ( false ) ; 
 - mentionSearchString = " " ; 
 + if ( count = = 1 & & s . charAt ( start ) = = autocompleteTriggerChar & & ! str . endsWith ( " " ) ) { 
 + showAutoComplete ( false , ! isBot ) ; 
 + autocompleteString = " " ; 
 
 - } else if ( currentWord . startsWith ( " @ " ) & & ! str . endsWith ( " " ) ) { 
 - showMentions ( true ) ; 
 + } else if ( currentWord . startsWith ( autocompleteTriggerString ) & & ! str . endsWith ( " " ) ) { 
 + showAutoComplete ( true , ! isBot ) ; 
 } else { 
 hideMentions ( ) ; 
 } 
 
 / / Set mentions query 
 - mentionStart = firstPeace . lastIndexOf ( " @ " ) ; 
 - if ( currentWord . startsWith ( " @ " ) & & currentWord . length ( ) > 1 ) { 
 - mentionSearchString = currentWord . substring ( 1 , currentWord . length ( ) ) ; 
 + autocompleteTriggerStart = firstPeace . lastIndexOf ( autocompleteTriggerString ) ; 
 + if ( currentWord . startsWith ( autocompleteTriggerString ) & & currentWord . length ( ) > 1 ) { 
 + autocompleteString = currentWord . substring ( 1 , currentWord . length ( ) ) ; 
 } else { 
 - mentionSearchString = " " ; 
 + autocompleteString = " " ; 
 } 
 
 - if ( mentionSearchString . equals ( " " ) ) { 
 + if ( autocompleteString . equals ( " " ) ) { 
 hideMentions ( ) ; 
 - } else if ( mentionsAdapter ! = null ) { 
 - / / mentionsDisplay . initSearch ( mentionSearchString , false ) ; 
 - mentionsAdapter . setQuery ( mentionSearchString . toLowerCase ( ) ) ; 
 + } else if ( autocompleteAdapter ! = null ) { 
 + / / mentionsDisplay . initSearch ( autocompleteString , false ) ; 
 + if ( autocompleteAdapter instanceof MentionsAdapter ) { 
 + ( ( MentionsAdapter ) autocompleteAdapter ) . setQuery ( autocompleteString . toLowerCase ( ) ) ; 
 + } else if ( autocompleteAdapter instanceof CommandsAdapter ) { 
 + ( ( CommandsAdapter ) autocompleteAdapter ) . setQuery ( autocompleteString . toLowerCase ( ) ) ; 
 + } 
 } 
 } 
 } 
 @ @ - 1451 , 8 + 1479 , 8 @ @ public class ChatActivity extends ActorEditTextActivity { 
 @ Override 
 protected void onDestroy ( ) { 
 super . onDestroy ( ) ; 
 - if ( mentionsAdapter ! = null ) { 
 - mentionsAdapter . dispose ( ) ; 
 + if ( autocompleteAdapter ! = null ) { 
 + autocompleteAdapter . dispose ( ) ; 
 } 
 if ( fastShareAdapter ! = null ) { 
 fastShareAdapter . release ( ) ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / botcommands / CommandsAdapter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / botcommands / CommandsAdapter . java 
 new file mode 100644 
 index 0000000 . . 410dfa6 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / botcommands / CommandsAdapter . java 
 @ @ - 0 , 0 + 1 , 125 @ @ 
 + package im . actor . sdk . controllers . conversation . botcommands ; 
 + 
 + import android . app . Activity ; 
 + import android . content . Context ; 
 + import android . view . View ; 
 + import android . view . ViewGroup ; 
 + import android . widget . TextView ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import im . actor . core . entity . BotCommand ; 
 + import im . actor . core . viewmodel . UserVM ; 
 + import im . actor . sdk . ActorSDK ; 
 + import im . actor . sdk . R ; 
 + import im . actor . sdk . util . Screen ; 
 + import im . actor . sdk . view . SearchHighlight ; 
 + import im . actor . sdk . view . adapters . HolderAdapter ; 
 + import im . actor . sdk . view . adapters . ViewHolder ; 
 + import im . actor . sdk . view . avatar . AvatarView ; 
 + 
 + import static im . actor . sdk . util . ActorSDKMessenger . users ; 
 + 
 + public class CommandsAdapter extends HolderAdapter < BotCommand > { 
 + 
 + private final int uid ; 
 + int oldRowsCount = 0 ; 
 + private List < BotCommand > commands ; 
 + private List < BotCommand > commandsToShow = new ArrayList < BotCommand > ( ) ; 
 + private CommandsUpdatedCallback updatedCallback ; 
 + private int highlightColor ; 
 + 
 + public CommandsAdapter ( int uid , Context context , CommandsUpdatedCallback updatedCallback ) { 
 + super ( context ) ; 
 + highlightColor = context . getResources ( ) . getColor ( R . color . primary ) ; 
 + commands = users ( ) . get ( uid ) . getBotCommands ( ) . get ( ) ; 
 + commandsToShow = users ( ) . get ( uid ) . getBotCommands ( ) . get ( ) ; 
 + this . uid = uid ; 
 + this . updatedCallback = updatedCallback ; 
 + 
 + } 
 + 
 + public void setQuery ( String q ) { 
 + ArrayList < BotCommand > filterd = new ArrayList < BotCommand > ( ) ; 
 + for ( BotCommand command : commands ) { 
 + if ( command . getSlashCommand ( ) . toLowerCase ( ) . startsWith ( " q " ) ) { 
 + filterd . add ( command ) ; 
 + } 
 + } 
 + commandsToShow . clear ( ) ; 
 + commandsToShow . addAll ( filterd ) ; 
 + int newRowsCount = commandsToShow . size ( ) ; 
 + updatedCallback . onMentionsUpdated ( oldRowsCount , newRowsCount ) ; 
 + oldRowsCount = newRowsCount ; 
 + notifyDataSetChanged ( ) ; 
 + } 
 + 
 + @ Override 
 + public int getCount ( ) { 
 + return commandsToShow . size ( ) ; 
 + } 
 + 
 + @ Override 
 + public BotCommand getItem ( int position ) { 
 + return commandsToShow . get ( position ) ; 
 + } 
 + 
 + @ Override 
 + public long getItemId ( int position ) { 
 + return position ; 
 + } 
 + 
 + @ Override 
 + protected ViewHolder < BotCommand > createHolder ( BotCommand obj ) { 
 + return new CommandHolder ( ) ; 
 + } 
 + 
 + public interface CommandsUpdatedCallback { 
 + void onMentionsUpdated ( int oldRowsCount , int newRowsCount ) ; 
 + } 
 + 
 + private class CommandHolder extends ViewHolder < BotCommand > { 
 + 
 + BotCommand data ; 
 + private TextView userName ; 
 + private TextView mentionHint ; 
 + private AvatarView avatarView ; 
 + 
 + @ Override 
 + public View init ( final BotCommand data , ViewGroup viewGroup , Context context ) { 
 + View res = ( ( Activity ) context ) . getLayoutInflater ( ) . inflate ( R . layout . fragment _ chat _ mention _ item , viewGroup , false ) ; 
 + res . findViewById ( R . id . divider ) . setBackgroundColor ( ActorSDK . sharedActor ( ) . style . getDividerColor ( ) ) ; 
 + 
 + userName = ( TextView ) res . findViewById ( R . id . name ) ; 
 + userName . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextPrimaryColor ( ) ) ; 
 + mentionHint = ( TextView ) res . findViewById ( R . id . mentionHint ) ; 
 + mentionHint . setTextColor ( ActorSDK . sharedActor ( ) . style . getTextSecondaryColor ( ) ) ; 
 + avatarView = ( AvatarView ) res . findViewById ( R . id . avatar ) ; 
 + avatarView . init ( Screen . dp ( 35 ) , 18 ) ; 
 + this . data = data ; 
 + 
 + return res ; 
 + } 
 + 
 + @ Override 
 + public void bind ( BotCommand data , int position , Context context ) { 
 + UserVM user = users ( ) . get ( uid ) ; 
 + this . data = data ; 
 + avatarView . bind ( user ) ; 
 + CharSequence name = data . getSlashCommand ( ) ; 
 + userName . setText ( name ) ; 
 + 
 + CharSequence hint = data . getDescription ( ) ; 
 + mentionHint . setText ( hint ) ; 
 + } 
 + 
 + 
 + @ Override 
 + public void unbind ( ) { 
 + avatarView . unbind ( ) ; 
 + } 
 + } 
 + 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / BotCommand . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / BotCommand . java 
 new file mode 100644 
 index 0000000 . . e0b8a6c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / BotCommand . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + / * 
 + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + * / 
 + 
 + package im . actor . core . entity ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + 
 + public class BotCommand { 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private final String command ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final String description ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final String locKey ; 
 + 
 + public BotCommand ( String command , String description , String loc ) { 
 + this . command = command ; 
 + this . description = description ; 
 + this . locKey = loc ; 
 + } 
 + 
 + public String getSlashCommand ( ) { 
 + return command ; 
 + } 
 + 
 + public String getDescription ( ) { 
 + return description ; 
 + } 
 + 
 + public String getLocKey ( ) { 
 + return locKey ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 index 6bcea10 . . 39bce95 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 @ @ - 77 , 6 + 77 , 9 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV 
 private String timeZone ; 
 @ Property ( " readonly , nonatomic " ) 
 private boolean isVerified ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private List < BotCommand > commands ; 
 + 
 
 @ NotNull 
 @ Property ( " readonly , nonatomic " ) 
 @ @ - 159 , 6 + 162 , 10 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV 
 return isBot ; 
 } 
 
 + public List < BotCommand > getCommands ( ) { 
 + return commands ; 
 + } 
 + 
 public boolean isBlocked ( ) { 
 return isBlocked ; 
 } 
 @ @ - 456 , 12 + 463 , 19 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV 
 this . records . add ( new ContactRecord ( ContactRecordType . SOCIAL , record . getTypeSpec ( ) , record . getStringValue ( ) , 
 record . getTitle ( ) , record . getSubtitle ( ) ) ) ; 
 } 
 + 
 + / / Bot commands 
 + for ( ApiBotCommand command : ext . getBotCommands ( ) ) { 
 + commands . add ( new BotCommand ( command . getSlashCommand ( ) , command . getDescription ( ) , command . getLocKey ( ) ) ) ; 
 + } 
 + 
 } 
 this . about = ext . getAbout ( ) ; 
 } else { 
 this . isBlocked = false ; 
 this . haveExtension = false ; 
 this . records = new ArrayList < > ( ) ; 
 + this . commands = new ArrayList < BotCommand > ( ) ; 
 this . about = null ; 
 this . timeZone = null ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java 
 index e77b91c . . 6649cb2 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / UserVM . java 
 @ @ - 16 , 12 + 16 , 14 @ @ import im . actor . core . entity . ContactRecordType ; 
 import im . actor . core . entity . Sex ; 
 import im . actor . core . entity . User ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . viewmodel . generics . ArrayListBotCommands ; 
 import im . actor . core . viewmodel . generics . ArrayListContactRecord ; 
 import im . actor . core . viewmodel . generics . ArrayListUserEmail ; 
 import im . actor . core . viewmodel . generics . ArrayListUserPhone ; 
 import im . actor . core . viewmodel . generics . ArrayListUserLink ; 
 import im . actor . core . viewmodel . generics . AvatarValueModel ; 
 import im . actor . core . viewmodel . generics . BooleanValueModel ; 
 + import im . actor . core . viewmodel . generics . ValueModelBotCommands ; 
 import im . actor . core . viewmodel . generics . ValueModelContactRecord ; 
 import im . actor . core . viewmodel . generics . StringValueModel ; 
 import im . actor . core . viewmodel . generics . ValueModelUserEmail ; 
 @ @ - 84 , 6 + 86 , 10 @ @ public class UserVM extends BaseValueModel < User > { 
 private ValueModelContactRecord contacts ; 
 
 @ NotNull 
 + private ValueModelBotCommands botCommands ; 
 + 
 + 
 + @ NotNull 
 private ArrayList < ModelChangedListener < UserVM > > listeners = new ArrayList < > ( ) ; 
 
 / * * 
 @ @ - 114 , 7 + 120 , 7 @ @ public class UserVM extends BaseValueModel < User > { 
 emails = new ValueModelUserEmail ( " user . " + id + " . emails " , buildEmails ( user . getRecords ( ) ) ) ; 
 links = new ValueModelUserLink ( " user . " + id + " . links " , buildLinks ( user . getRecords ( ) ) ) ; 
 contacts = new ValueModelContactRecord ( " user . " + id + " . contacts " , new ArrayListContactRecord ( user . getRecords ( ) ) ) ; 
 - 
 + botCommands = new ValueModelBotCommands ( " user . " + id + " . bat _ commands " , new ArrayListBotCommands ( user . getCommands ( ) ) ) ; 
 / / Notify about presence change every minute as text representation can change 
 presenceTimer = new CommonTimer ( new Runnable ( ) { 
 @ Override 
 @ @ - 137 , 6 + 143 , 7 @ @ public class UserVM extends BaseValueModel < User > { 
 isChanged | = avatar . change ( rawObj . getAvatar ( ) ) ; 
 isChanged | = isBlocked . change ( rawObj . isBlocked ( ) ) ; 
 isChanged | = isVerified . change ( rawObj . isVerified ( ) ) ; 
 + isChanged | = botCommands . change ( new ArrayListBotCommands ( rawObj . getCommands ( ) ) ) ; 
 
 / / TODO : better changed checking ? 
 isChanged | = phones . change ( buildPhones ( rawObj . getRecords ( ) ) ) ; 
 @ @ - 346 , 6 + 353 , 18 @ @ public class UserVM extends BaseValueModel < User > { 
 } 
 
 / * * 
 + * Get Bot commands 
 + * 
 + * @ return ValueModel of ArrayList of BotCommands 
 + * / 
 + @ NotNull 
 + @ ObjectiveCName ( " getBotCommandsModel " ) 
 + public ValueModelBotCommands getBotCommands ( ) { 
 + return botCommands ; 
 + } 
 + 
 + 
 + / * * 
 * Subscribe to UserVM updates 
 * 
 * @ param listener UserVM changed listener 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListBotCommands . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListBotCommands . java 
 new file mode 100644 
 index 0000000 . . 3b223fc 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListBotCommands . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + package im . actor . core . viewmodel . generics ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Collection ; 
 + 
 + import im . actor . core . entity . BotCommand ; 
 + import im . actor . core . entity . ContactRecord ; 
 + 
 + public class ArrayListBotCommands extends ArrayList < BotCommand > { 
 + 
 + public ArrayListBotCommands ( int capacity ) { 
 + super ( capacity ) ; 
 + } 
 + 
 + public ArrayListBotCommands ( ) { 
 + } 
 + 
 + public ArrayListBotCommands ( Collection < ? extends BotCommand > collection ) { 
 + super ( collection ) ; 
 + } 
 + 
 + @ Override 
 + public BotCommand get ( int index ) { 
 + return super . get ( index ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ValueModelBotCommands . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ValueModelBotCommands . java 
 new file mode 100644 
 index 0000000 . . 7f6c7e5 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ValueModelBotCommands . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package im . actor . core . viewmodel . generics ; 
 + 
 + import im . actor . runtime . mvvm . ValueChangedListener ; 
 + import im . actor . runtime . mvvm . ValueModel ; 
 + 
 + public class ValueModelBotCommands extends ValueModel < ArrayListBotCommands > { 
 + 
 + public ValueModelBotCommands ( String name , ArrayListBotCommands defaultValue ) { 
 + super ( name , defaultValue ) ; 
 + } 
 + 
 + @ Override 
 + public ArrayListBotCommands get ( ) { 
 + return super . get ( ) ; 
 + } 
 + 
 + @ Override 
 + public void subscribe ( ValueChangedListener < ArrayListBotCommands > listener ) { 
 + super . subscribe ( listener ) ; 
 + } 
 + 
 + @ Override 
 + public void subscribe ( ValueChangedListener < ArrayListBotCommands > listener , boolean notify ) { 
 + super . subscribe ( listener , notify ) ; 
 + } 
 + 
 + @ Override 
 + public void unsubscribe ( ValueChangedListener < ArrayListBotCommands > listener ) { 
 + super . unsubscribe ( listener ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java 
 new file mode 100644 
 index 0000000 . . bb8078b 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java 
 @ @ - 0 , 0 + 1 , 80 @ @ 
 + package im . actor . core . entity ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . storage . KeyValueItem ; 
 + 
 + public class DialogDesc extends BserObject implements KeyValueItem { 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private String title ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private Avatar avatar ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private boolean isUnread ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private int counter ; 
 + 
 + public DialogDesc ( Peer peer , String title , Avatar avatar , boolean isUnread , int counter ) { 
 + this . peer = peer ; 
 + this . title = title ; 
 + this . avatar = avatar ; 
 + this . isUnread = isUnread ; 
 + this . counter = counter ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public Avatar getAvatar ( ) { 
 + return avatar ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + 
 + public boolean isUnread ( ) { 
 + return isUnread ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; 
 + title = values . getString ( 2 ) ; 
 + byte [ ] av = values . getBytes ( 3 ) ; 
 + if ( av ! = null ) { 
 + avatar = new Avatar ( av ) ; 
 + } 
 + counter = values . getInt ( 4 ) ; 
 + isUnread = values . getBool ( 5 ) ; 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + writer . writeObject ( 1 , peer ) ; 
 + writer . writeString ( 2 , title ) ; 
 + if ( avatar ! = null ) { 
 + writer . writeObject ( 3 , avatar ) ; 
 + } 
 + writer . writeInt ( 4 , counter ) ; 
 + writer . writeBool ( 5 , isUnread ) ; 
 + } 
 + 
 + @ Override 
 + public long getEngineId ( ) { 
 + return peer . getUnuqueId ( ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 85714e6 . . 30e0d85 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import im . actor . core . modules . internal . messages . CursorReaderActor ; 
 import im . actor . core . modules . internal . messages . CursorReceiverActor ; 
 import im . actor . core . modules . internal . messages . DialogsActor ; 
 import im . actor . core . modules . internal . messages . DialogsHistoryActor ; 
 + import im . actor . core . modules . internal . messages . GroupedDialogsActor ; 
 import im . actor . core . modules . internal . messages . MessageDeleteActor ; 
 import im . actor . core . modules . internal . messages . MessageShownActor ; 
 import im . actor . core . modules . internal . messages . MessageShownFilter ; 
 @ @ - 46 , 6 + 47 , 7 @ @ import im . actor . core . network . RpcException ; 
 import im . actor . core . network . RpcInternalException ; 
 import im . actor . core . viewmodel . Command ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 + import im . actor . core . viewmodel . DialogGroupsVM ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 @ @ - 62 , 8 + 64 , 10 @ @ import static im . actor . runtime . actors . ActorSystem . system ; 
 public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 private ListEngine < Dialog > dialogs ; 
 + 
 private ActorRef dialogsActor ; 
 private ActorRef dialogsHistoryActor ; 
 + private ActorRef dialogsGroupedActor ; 
 private ActorRef ownReadActor ; 
 private ActorRef plainReadActor ; 
 private ActorRef plainReceiverActor ; 
 @ @ - 79 , 6 + 83 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 private final SyncKeyValue cursorStorage ; 
 
 + private final DialogGroupsVM dialogGroups = new DialogGroupsVM ( ) ; 
 + 
 public MessagesModule ( final ModuleContext context ) { 
 super ( context ) ; 
 
 @ @ - 99 , 6 + 105 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 return new DialogsHistoryActor ( context ( ) ) ; 
 } 
 } ) , " actor / dialogs / history " ) ; 
 + 
 + this . dialogsGroupedActor = system ( ) . actorOf ( Props . create ( GroupedDialogsActor . class , new ActorCreator < GroupedDialogsActor > ( ) { 
 + @ Override 
 + public GroupedDialogsActor create ( ) { 
 + return new GroupedDialogsActor ( context ( ) ) ; 
 + } 
 + } ) , " actor / dialogs / grouped " ) ; 
 + 
 this . ownReadActor = system ( ) . actorOf ( Props . create ( OwnReadActor . class , new ActorCreator < OwnReadActor > ( ) { 
 @ Override 
 public OwnReadActor create ( ) { 
 @ @ - 139 , 6 + 153 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 context ( ) . getEvents ( ) . subscribe ( this , PeerChatOpened . EVENT ) ; 
 } 
 
 + public DialogGroupsVM getDialogGroupsVM ( ) { 
 + return dialogGroups ; 
 + } 
 + 
 public ActorRef getSendMessageActor ( ) { 
 return sendMessageActor ; 
 } 
 @ @ - 221 , 6 + 239 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 return dialogsHistoryActor ; 
 } 
 
 + public ActorRef getDialogsGroupedActor ( ) { 
 + return dialogsGroupedActor ; 
 + } 
 + 
 public ListEngine < Dialog > getDialogsEngine ( ) { 
 return dialogs ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 index 6641ed9 . . 8bf76dc 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 @ @ - 44 , 6 + 44 , 7 @ @ public class ConversationActor extends ModuleActor { 
 private IndexStorage outPendingIndex ; 
 private IndexStorage inPendingIndex ; 
 private ActorRef dialogsActor ; 
 + private ActorRef dialogsGroupedActor ; 
 private long inReadState ; 
 private long outReadState ; 
 private long outReceiveState ; 
 @ @ - 62 , 6 + 63 , 7 @ @ public class ConversationActor extends ModuleActor { 
 docs = context ( ) . getMessagesModule ( ) . getConversationDocsEngine ( peer ) ; 
 
 dialogsActor = context ( ) . getMessagesModule ( ) . getDialogsActor ( ) ; 
 + dialogsGroupedActor = context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) ; 
 outPendingIndex = Storage . createIndex ( " out _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ; 
 inPendingIndex = Storage . createIndex ( " in _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ; 
 
 @ @ - 135 , 6 + 137 , 8 @ @ public class ConversationActor extends ModuleActor { 
 / / Update dialogs 
 if ( topMessage ! = null ) { 
 if ( ! isHiddenPeer ) { 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , 
 + topMessage . getSortDate ( ) ) ) ; 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , topMessage , inPendingIndex . getCount ( ) ) ) ; 
 } 
 } 
 @ @ - 185 , 6 + 189 , 8 @ @ public class ConversationActor extends ModuleActor { 
 
 if ( ! isHiddenPeer ) { 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , message , inPendingIndex . getCount ( ) ) ) ; 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , 
 + message . getSortDate ( ) ) ) ; 
 } 
 } 
 } 
 @ @ - 239 , 6 + 245 , 8 @ @ public class ConversationActor extends ModuleActor { 
 if ( ! isHiddenPeer ) { 
 / / Updating dialog 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , updatedMsg , inPendingIndex . getCount ( ) ) ) ; 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , 
 + updatedMsg . getSortDate ( ) ) ) ; 
 } 
 
 / / Updating pending index 
 @ @ - 361 , 6 + 369 , 7 @ @ public class ConversationActor extends ModuleActor { 
 
 if ( ! isHiddenPeer ) { 
 dialogsActor . send ( new DialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 + / / TODO : Implement for grouped 
 } 
 } 
 
 @ @ - 402 , 6 + 411 , 7 @ @ public class ConversationActor extends ModuleActor { 
 inPendingIndex . clear ( ) ; 
 outPendingIndex . clear ( ) ; 
 dialogsActor . send ( new DialogsActor . ChatDelete ( peer ) ) ; 
 + / / TODO : Implement for grouped 
 } 
 
 / / History 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java 
 index 311de19 . . b77ac37 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java 
 @ @ - 50 , 7 + 50 , 7 @ @ public class DialogsActor extends ModuleActor { 
 long start = im . actor . runtime . Runtime . getCurrentTime ( ) ; 
 PeerDesc peerDesc = buildPeerDesc ( peer ) ; 
 if ( peerDesc = = null ) { 
 - Log . d ( " DialogsActor " , " unknown peer desk " ) ; 
 + Log . d ( " DialogsActor " , " unknown peer desc " ) ; 
 return ; 
 } 
 
 @ @ - 75 , 8 + 75 , 11 @ @ public class DialogsActor extends ModuleActor { 
 . setText ( contentDescription . getText ( ) ) 
 . setRelatedUid ( contentDescription . getRelatedUser ( ) ) 
 . setStatus ( message . getMessageState ( ) ) 
 - . setSenderId ( message . getSenderId ( ) ) 
 - . setUnreadCount ( counter ) ; 
 + . setSenderId ( message . getSenderId ( ) ) ; 
 + 
 + if ( counter > = 0 ) { 
 + builder . setUnreadCount ( counter ) ; 
 + } 
 
 boolean forceUpdate = false ; 
 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 new file mode 100644 
 index 0000000 . . f0fdf00 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 @ @ - 0 , 0 + 1 , 184 @ @ 
 + package im . actor . core . modules . internal . messages ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + 
 + import im . actor . core . entity . Avatar ; 
 + import im . actor . core . entity . DialogDesc ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerType ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . utils . ModuleActor ; 
 + import im . actor . core . viewmodel . DialogGroup ; 
 + 
 + public class GroupedDialogsActor extends ModuleActor { 
 + 
 + private PeerGroup groups = new PeerGroup ( " groups " , " Groups " ) ; 
 + private PeerGroup privates = new PeerGroup ( " private " , " Private " ) ; 
 + 
 + public GroupedDialogsActor ( ModuleContext context ) { 
 + super ( context ) ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + } 
 + 
 + private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { 
 + 
 + } 
 + 
 + private void onNewMessage ( Peer peer , long sortDate , int counter ) { 
 + 
 + PeerGroup peerGroup ; 
 + if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + peerGroup = groups ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + peerGroup = privates ; 
 + } else { 
 + return ; 
 + } 
 + 
 + boolean found = false ; 
 + for ( PeerDesc d : peerGroup . getPeers ( ) ) { 
 + if ( d . getPeer ( ) . equals ( peer ) ) { 
 + d . setCounter ( counter ) ; 
 + found = true ; 
 + } 
 + } 
 + 
 + if ( ! found ) { 
 + peerGroup . getPeers ( ) . add ( new PeerDesc ( peer , counter ) ) ; 
 + } 
 + 
 + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; 
 + ArrayList < DialogDesc > groupDescs = new ArrayList < DialogDesc > ( ) ; 
 + for ( PeerDesc d : peerGroup . getPeers ( ) ) { 
 + groupDescs . add ( new DialogDesc ( d . getPeer ( ) , " GRPOUP # " + d . getPeer ( ) . getPeerId ( ) , 
 + null , false , d . counter ) ) ; 
 + } 
 + groups . add ( new DialogGroup ( " Groups " , " group " , groupDescs ) ) ; 
 + 
 + context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof PeerInformationChanged ) { 
 + PeerInformationChanged informationChanged = ( PeerInformationChanged ) message ; 
 + onPeerInfoChanged ( informationChanged . getPeer ( ) , 
 + informationChanged . getTitle ( ) , 
 + informationChanged . getAvatar ( ) ) ; 
 + } else if ( message instanceof NewMessage ) { 
 + NewMessage newMessage = ( NewMessage ) message ; 
 + onNewMessage ( newMessage . peer , newMessage . sortDate , newMessage . counter ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 + public static class PeerInformationChanged { 
 + 
 + private Peer peer ; 
 + private String title ; 
 + private Avatar avatar ; 
 + 
 + public PeerInformationChanged ( Peer peer , String title , Avatar avatar ) { 
 + this . peer = peer ; 
 + this . title = title ; 
 + this . avatar = avatar ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public Avatar getAvatar ( ) { 
 + return avatar ; 
 + } 
 + } 
 + 
 + public static class CounterChanged { 
 + private Peer peer ; 
 + private int counter ; 
 + 
 + public CounterChanged ( Peer peer , int counter ) { 
 + this . peer = peer ; 
 + this . counter = counter ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + } 
 + 
 + public static class NewMessage { 
 + 
 + private Peer peer ; 
 + private int counter ; 
 + private long sortDate ; 
 + 
 + public NewMessage ( Peer peer , int counter , long sortDate ) { 
 + this . peer = peer ; 
 + this . counter = counter ; 
 + this . sortDate = sortDate ; 
 + } 
 + } 
 + 
 + private class PeerGroup { 
 + 
 + private String key ; 
 + private String title ; 
 + private ArrayList < PeerDesc > peers ; 
 + 
 + public PeerGroup ( String key , String title ) { 
 + this . key = key ; 
 + this . title = title ; 
 + this . peers = new ArrayList < PeerDesc > ( ) ; 
 + } 
 + 
 + public String getKey ( ) { 
 + return key ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public ArrayList < PeerDesc > getPeers ( ) { 
 + return peers ; 
 + } 
 + } 
 + 
 + private class PeerDesc { 
 + 
 + private Peer peer ; 
 + private int counter ; 
 + 
 + public PeerDesc ( Peer peer , int counter ) { 
 + this . peer = peer ; 
 + this . counter = counter ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + 
 + public void setCounter ( int counter ) { 
 + this . counter = counter ; 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 new file mode 100644 
 index 0000000 . . ae47f02 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . entity . DialogDesc ; 
 + 
 + public class DialogGroup { 
 + 
 + private String title ; 
 + private String key ; 
 + private ArrayList < DialogDesc > dialogs ; 
 + 
 + public DialogGroup ( String title , String key , ArrayList < DialogDesc > dialogs ) { 
 + this . title = title ; 
 + this . key = key ; 
 + this . dialogs = dialogs ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public String getKey ( ) { 
 + return key ; 
 + } 
 + 
 + public ArrayList < DialogDesc > getDialogs ( ) { 
 + return dialogs ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroupsVM . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroupsVM . java 
 new file mode 100644 
 index 0000000 . . 0a374ba 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroupsVM . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . runtime . mvvm . ValueModel ; 
 + 
 + public class DialogGroupsVM { 
 + 
 + private ValueModel < ArrayList < DialogGroup > > groupsValueModel ; 
 + 
 + public DialogGroupsVM ( ) { 
 + groupsValueModel = new ValueModel < ArrayList < DialogGroup > > ( " groups . model " , null ) ; 
 + } 
 + 
 + public ValueModel < ArrayList < DialogGroup > > getGroupsValueModel ( ) { 
 + return groupsValueModel ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java 
 index 530cb4b . . 31e2f0e 100644 
 - - - a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java 
 + + + b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java 
 @ @ - 119 , 21 + 119 , 9 @ @ public class SQLiteKeyValue implements KeyValueStorage { 
 } 
 
 @ Override 
 - public void clear ( ) { 
 - checkSqlite ( ) ; 
 - db . beginTransaction ( ) ; 
 - try { 
 - db . execSQL ( " DELETE FROM \ " " + name + " \ " " ) ; 
 - db . setTransactionSuccessful ( ) ; 
 - } finally { 
 - db . endTransaction ( ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public byte [ ] getValue ( long id ) { 
 + public byte [ ] loadItem ( long key ) { 
 checkSqlite ( ) ; 
 - Cursor cursor = db . query ( " \ " " + name + " \ " " , new String [ ] { " \ " BYTES \ " " } , " \ " ID \ " = ? " , new String [ ] { " " + id } , null , null , null ) ; 
 + Cursor cursor = db . query ( " \ " " + name + " \ " " , new String [ ] { " \ " BYTES \ " " } , " \ " ID \ " = ? " , new String [ ] { " " + key } , null , null , null ) ; 
 if ( cursor = = null ) { 
 return null ; 
 } 
 @ @ - 146 , 4 + 134 , 26 @ @ public class SQLiteKeyValue implements KeyValueStorage { 
 } 
 return null ; 
 } 
 + 
 + @ Override 
 + public List < KeyValueRecord > loadItems ( long [ ] keys ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public List < KeyValueRecord > loadAllItems ( ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public void clear ( ) { 
 + checkSqlite ( ) ; 
 + db . beginTransaction ( ) ; 
 + try { 
 + db . execSQL ( " DELETE FROM \ " " + name + " \ " " ) ; 
 + db . setTransactionSuccessful ( ) ; 
 + } finally { 
 + db . endTransaction ( ) ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java 
 index b153387 . . 25b59e1 100644 
 - - - a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java 
 + + + b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java 
 @ @ - 124 , 6 + 124 , 11 @ @ public class SQLiteList implements ListStorageDisplayEx { 
 return null ; 
 } 
 
 + @ Override 
 + public List < ListEngineRecord > loadAllItems ( ) { 
 + return null ; 
 + } 
 + 
 
 public ListEngineRecord loadItemBySortKey ( long key ) { 
 checkTable ( ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java 
 index 60239e4 . . c7dd481 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import com . google . j2objc . annotations . ObjectiveCName ; 
 import java . util . List ; 
 
 public interface KeyValueEngine < V extends KeyValueItem > { 
 + 
 @ ObjectiveCName ( " addOrUpdateItem : " ) 
 void addOrUpdateItem ( V item ) ; 
 
 diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift 
 index fb65f46 . . c22c65a 100644 
 - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift 
 + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift 
 @ @ - 5 , 18 + 5 , 21 @ @ 
 import Foundation 
 
 @ objc class FMDBKeyValue : NSObject , ARKeyValueStorage { 
 - var db : FMDatabase ? ; 
 + 
 + var db : FMDatabase ! 
 
 - let databasePath : String ; 
 - let tableName : String ; 
 + let databasePath : String 
 + let tableName : String 
 
 - let queryCreate : String ; 
 - let queryItem : String ; 
 - let queryAdd : String ; 
 - let queryDelete : String ; 
 - let queryDeleteAll : String ; 
 + let queryCreate : String 
 + let queryItem : String 
 + let queryItems : String 
 + let queryAll : String 
 + let queryAdd : String 
 + let queryDelete : String 
 + let queryDeleteAll : String 
 
 - var isTableChecked : Bool = false ; 
 + var isTableChecked : Bool = false 
 
 init ( databasePath : String , tableName : String ) { 
 self . databasePath = databasePath 
 @ @ - 26 , 11 + 29 , 13 @ @ import Foundation 
 self . queryCreate = " CREATE TABLE IF NOT EXISTS " + tableName + " ( " + 
 " \ " ID \ " INTEGER NOT NULL , " + 
 " \ " BYTES \ " BLOB NOT NULL , " + 
 - " PRIMARY KEY ( \ " ID \ " ) ) ; " ; 
 - self . queryItem = " SELECT \ " BYTES \ " FROM " + tableName + " WHERE \ " ID \ " = ? ; " ; 
 - self . queryAdd = " REPLACE INTO " + tableName + " ( \ " ID \ " , \ " BYTES \ " ) VALUES ( ? , ? ) ; " ; 
 - self . queryDelete = " DELETE FROM " + tableName + " WHERE \ " ID \ " = ? ; " ; 
 - self . queryDeleteAll = " DELETE FROM " + tableName + " ; " ; 
 + " PRIMARY KEY ( \ " ID \ " ) ) ; " 
 + self . queryItem = " SELECT \ " BYTES \ " FROM " + tableName + " WHERE \ " ID \ " = ? ; " 
 + self . queryItems = " SELECT ( \ " ID \ " , \ " BYTES \ " ) FROM " + tableName + " WHERE \ " ID \ " in ? ; " 
 + self . queryAll = " SELECT ( \ " ID \ " , \ " BYTES \ " ) FROM " + tableName + " ; " 
 + self . queryAdd = " REPLACE INTO " + tableName + " ( \ " ID \ " , \ " BYTES \ " ) VALUES ( ? , ? ) ; " 
 + self . queryDelete = " DELETE FROM " + tableName + " WHERE \ " ID \ " = ? ; " 
 + self . queryDeleteAll = " DELETE FROM " + tableName + " ; " 
 
 super . init ( ) 
 } 
 @ @ - 39 , 68 + 44 , 103 @ @ import Foundation 
 if ( isTableChecked ) { 
 return 
 } 
 - isTableChecked = true ; 
 + isTableChecked = true 
 
 self . db = FMDatabase ( path : databasePath ) 
 - self . db ! . open ( ) 
 - if ( ! db ! . tableExists ( tableName ) ) { 
 - db ! . executeUpdate ( queryCreate ) 
 + self . db . open ( ) 
 + if ( ! db . tableExists ( tableName ) ) { 
 + db . executeUpdate ( queryCreate ) 
 } 
 } 
 
 func addOrUpdateItems ( values : JavaUtilList ! ) { 
 - checkTable ( ) ; 
 + checkTable ( ) 
 
 - db ! . beginTransaction ( ) 
 + db . beginTransaction ( ) 
 for i in 0 . . < values . size ( ) { 
 - let record = values . getWithInt ( i ) as ! ARKeyValueRecord ; 
 - db ! . executeUpdate ( queryAdd , record . getId ( ) . toNSNumber ( ) , record . getData ( ) ! . toNSData ( ) ) 
 + let record = values . getWithInt ( i ) as ! ARKeyValueRecord 
 + db . executeUpdate ( queryAdd , record . getId ( ) . toNSNumber ( ) , record . getData ( ) ! . toNSData ( ) ) 
 } 
 - db ! . commit ( ) 
 + db . commit ( ) 
 } 
 
 func addOrUpdateItemWithKey ( key : jlong , withData data : IOSByteArray ! ) { 
 - checkTable ( ) ; 
 + checkTable ( ) 
 
 - db ! . beginTransaction ( ) 
 - db ! . executeUpdate ( queryAdd , key . toNSNumber ( ) , data ! . toNSData ( ) ) 
 - db ! . commit ( ) 
 + db . beginTransaction ( ) 
 + db . executeUpdate ( queryAdd , key . toNSNumber ( ) , data ! . toNSData ( ) ) 
 + db . commit ( ) 
 } 
 
 func removeItemsWithKeys ( keys : IOSLongArray ! ) { 
 - checkTable ( ) ; 
 + checkTable ( ) 
 
 - db ! . beginTransaction ( ) 
 + db . beginTransaction ( ) 
 for i in 0 . . < keys . length ( ) { 
 let key = keys . longAtIndex ( UInt ( i ) ) ; 
 - db ! . executeUpdate ( queryDelete , key . toNSNumber ( ) ) 
 + db . executeUpdate ( queryDelete , key . toNSNumber ( ) ) 
 } 
 - db ! . commit ( ) 
 + db . commit ( ) 
 } 
 
 func removeItemWithKey ( key : jlong ) { 
 - checkTable ( ) ; 
 + checkTable ( ) 
 
 - db ! . beginTransaction ( ) 
 - db ! . executeUpdate ( queryDelete , key . toNSNumber ( ) ) 
 - db ! . commit ( ) 
 + db . beginTransaction ( ) 
 + db . executeUpdate ( queryDelete , key . toNSNumber ( ) ) 
 + db . commit ( ) 
 } 
 
 - func getValueWithKey ( key : jlong ) - > IOSByteArray ! { 
 - checkTable ( ) ; 
 + func loadItemWithKey ( key : jlong ) - > IOSByteArray ! { 
 + checkTable ( ) 
 
 - let result = db ! . dataForQuery ( queryItem , key . toNSNumber ( ) ) ; 
 + let result = db . dataForQuery ( queryItem , key . toNSNumber ( ) ) 
 if ( result = = nil ) { 
 - return nil ; 
 + return nil 
 + } 
 + return result . toJavaBytes ( ) 
 + } 
 + 
 + func loadAllItems ( ) - > JavaUtilList ! { 
 + checkTable ( ) 
 + 
 + let res = JavaUtilArrayList ( ) 
 + 
 + if let result = db . executeQuery ( queryAll ) { 
 + while ( result . next ( ) ) { 
 + res . addWithId ( ARKeyValueRecord ( key : jlong ( result . longLongIntForColumn ( " ID " ) ) , withData : result . dataForColumn ( " BYTES " ) . toJavaBytes ( ) ) ) 
 + } 
 + } 
 + 
 + return res 
 + } 
 + 
 + func loadItems ( keys : IOSLongArray ! ) - > JavaUtilList ! { 
 + checkTable ( ) 
 + 
 + / / Converting to NSNumbers 
 + var ids = [ NSNumber ] ( ) 
 + for i in 0 . . < keys . length ( ) { 
 + ids . append ( keys . longAtIndex ( UInt ( i ) ) . toNSNumber ( ) ) 
 } 
 - return result . toJavaBytes ( ) ; 
 + 
 + let res = JavaUtilArrayList ( ) 
 + 
 + if let result = db . executeQuery ( queryItems , ids ) { 
 + while ( result . next ( ) ) { 
 + / / TODO : Optimize lookup 
 + res . addWithId ( ARKeyValueRecord ( key : jlong ( result . longLongIntForColumn ( " ID " ) ) , withData : result . dataForColumn ( " BYTES " ) . toJavaBytes ( ) ) ) 
 + } 
 + } 
 + 
 + return res 
 } 
 
 func clear ( ) { 
 - checkTable ( ) ; 
 + checkTable ( ) 
 
 - db ! . beginTransaction ( ) 
 - db ! . executeUpdate ( queryDeleteAll ) ; 
 - db ! . commit ( ) 
 + db . beginTransaction ( ) 
 + db . executeUpdate ( queryDeleteAll ) 
 + db . commit ( ) 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift 
 index 27ac7e7 . . 209a6e3 100644 
 - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift 
 + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift 
 @ @ - 199 , 6 + 199 , 12 @ @ class FMDBList : NSObject , ARListStorageDisplayEx { 
 } 
 } 
 
 + func loadAllItems ( ) - > JavaUtilList ! { 
 + let res = JavaUtilArrayList ( ) 
 + / / TODO : Implement 
 + return res 
 + } 
 + 
 func loadForwardWithSortKey ( sortingKey : JavaLangLong ! , withLimit limit : jint ) - > JavaUtilList ! { 
 checkTable ( ) ; 
 var result : FMResultSet ? = nil ;
