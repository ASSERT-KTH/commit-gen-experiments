BLEU SCORE: 0.2646015952359329

TEST MSG: feat ( server : messaging ) : sort favourites by priority : Groups - > Privates | Alphabetic
GENERATED MSG: fix ( server : messaging ) : delete chat fix

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto < nl > index dd88e3a . . 20ac58c 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / group . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / group . proto < nl > @ @ - 255 , 6 + 255 , 16 @ @ message GroupQueries { < nl > message GetAccessHashResponse { < nl > required int64 access _ hash = 1 ; < nl > } < nl > + < nl > + message GetTitle { < nl > + option ( scalapb . message ) . extends = " im . actor . server . group . GroupQuery " ; < nl > + < nl > + required int32 group _ id = 1 ; < nl > + } < nl > + < nl > + message GetTitleResponse { < nl > + required string title = 1 ; < nl > + } < nl > } < nl > < nl > message GroupEvents { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > index 6f76a45 . . 7c04909 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > @ @ - 3 , 20 + 3 , 23 @ @ package im . actor . server . dialog < nl > import java . time . Instant < nl > < nl > import akka . actor . { ActorRef , Props , Status } < nl > + import akka . http . scaladsl . util . FastFuture < nl > import akka . pattern . { ask , pipe } < nl > import akka . util . Timeout < nl > import com . google . protobuf . wrappers . Int64Value < nl > import im . actor . concurrent . _ < nl > import im . actor . server . cqrs . _ < nl > import im . actor . server . dialog . DialogCommands . { SendMessage , WriteMessageSelf } < nl > - import im . actor . server . model . { Peer , PeerType } < nl > + import im . actor . server . model . { Peer , PeerErrors , PeerType } < nl > import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . messaging . UpdateChatGroupsChanged < nl > import im . actor . api . rpc . misc . ApiExtension < nl > import im . actor . config . ActorConfig < nl > import im . actor . serialization . ActorSerializer < nl > import im . actor . server . dialog . DialogQueries . GetInfoResponse < nl > + import im . actor . server . group . GroupExtension < nl > import im . actor . server . sequence . { PushRules , SeqState , SeqUpdatesExtension } < nl > + import im . actor . server . user . UserExtension < nl > < nl > import scala . concurrent . Future < nl > < nl > @ @ - 103 , 6 + 106 , 9 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > import DialogRootCommands . _ < nl > import context . dispatcher < nl > < nl > + private val userExt = UserExtension ( context . system ) < nl > + private val groupExt = GroupExtension ( context . system ) < nl > + < nl > private implicit val timeout = Timeout ( ActorConfig . defaultTimeout ) < nl > < nl > private val selfPeer : Peer = Peer . privat ( userId ) < nl > @ @ - 236 , 7 + 242 , 7 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > < nl > protected def fetchDialogGroups ( ) : Future [ Seq [ DialogGroup ] ] = { < nl > for { < nl > - favInfos ← Future . sequence ( state . active . favourites map ( sd ⇒ getInfo ( sd . peer ) map ( _ . getInfo ) ) ) < nl > + favInfos ← Future . sequence ( state . active . favourites . toSeq map ( sd ⇒ getInfo ( sd . peer ) map ( _ . getInfo ) ) ) flatMap sortFavourites < nl > groupInfos ← Future . sequence ( state . active . groups map ( sd ⇒ getInfo ( sd . peer ) map ( _ . getInfo ) ) ) < nl > dmInfos ← Future . sequence ( state . active . dms map ( sd ⇒ getInfo ( sd . peer ) map ( _ . getInfo ) ) ) < nl > } yield { < nl > @ @ - 261 , 4 + 267 , 27 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > < nl > protected def getInfo ( peer : Peer ) : Future [ DialogQueries . GetInfoResponse ] = < nl > ( dialogRef ( peer ) ? DialogQueries . GetInfo ( Some ( peer ) ) ) . mapTo [ GetInfoResponse ] < nl > + < nl > + private def sortFavourites ( infos : Seq [ DialogInfo ] ) : Future [ Seq [ DialogInfo ] ] = { < nl > + for { < nl > + infosNames ← Future . sequence ( infos map ( info ⇒ getName ( info . getPeer ) map ( info → _ ) ) ) < nl > + } yield infosNames . sortWith { < nl > + case ( ( di1 , name1 ) , ( di2 , name2 ) ) ⇒ < nl > + if ( di1 . getPeer . typ . isGroup & & di2 . getPeer . typ . isPrivate ) true < nl > + else if ( di1 . getPeer . typ . isPrivate & & di2 . getPeer . typ . isGroup ) false < nl > + else name1 . headOption . getOrElse ( ' ' ) < name2 . headOption . getOrElse ( ' ' ) < nl > + } . map ( _ . _ 1 ) < nl > + } < nl > + < nl > + private def getName ( peer : Peer ) : Future [ String ] = { < nl > + peer . typ match { < nl > + case PeerType . Private ⇒ < nl > + for { < nl > + localNameOpt ← userExt . getLocalName ( userId , peer . id ) < nl > + name ← localNameOpt map FastFuture . successful getOrElse userExt . getName ( peer . id , userId ) < nl > + } yield name < nl > + case PeerType . Group ⇒ groupExt . getTitle ( peer . id ) < nl > + case unknown ⇒ FastFuture . failed ( PeerErrors . UnknownPeerType ( unknown ) ) < nl > + } < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > index 10f3bc3 . . 00bb493 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > @ @ - 119 , 4 + 119 , 7 @ @ private [ group ] sealed trait Queries { < nl > < nl > def getAccessHash ( groupId : Int ) : Future [ Long ] = < nl > ( viewRegion . ref ? GetAccessHash ( groupId ) ) . mapTo [ GetAccessHashResponse ] map ( _ . accessHash ) < nl > + < nl > + def getTitle ( groupId : Int ) : Future [ String ] = < nl > + ( viewRegion . ref ? GetTitle ( groupId ) ) . mapTo [ GetTitleResponse ] map ( _ . title ) < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index 227cd7e . . 7db0e39 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 199 , 6 + 199 , 7 @ @ private [ group ] final class GroupProcessor < nl > case GroupQueries . IsPublic ( _ ) ⇒ isPublic ( state ) < nl > case GroupQueries . GetAccessHash ( _ ) ⇒ getAccessHash ( state ) < nl > case GroupQueries . IsHistoryShared ( _ ) ⇒ isHistoryShared ( state ) < nl > + case GroupQueries . GetTitle ( _ ) ⇒ getTitle ( state ) < nl > } < nl > < nl > override def handleInitCommand : Receive = { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > index 8f44510 . . 3e0188f 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > @ @ - 67 , 4 + 67 , 7 @ @ private [ group ] trait GroupQueryHandlers extends GroupCommandHelpers { < nl > < nl > def isHistoryShared ( group : GroupState ) : Unit = < nl > sender ( ) ! IsHistorySharedResponse ( group . isHistoryShared ) < nl > + < nl > + def getTitle ( group : GroupState ) : Unit = < nl > + sender ( ) ! GetTitleResponse ( group . title ) < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > index 6ec13a8 . . ae2fd6a 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > @ @ - 21 , 6 + 21 , 7 @ @ message DialogCommands { < nl > MessageRead message _ read = 5 ; < nl > Show show = 6 ; < nl > Hide hide = 7 ; < nl > + Delete delete = 8 ; < nl > } < nl > } < nl > < nl > @ @ - 85 , 4 + 86 , 10 @ @ message DialogCommands { < nl > required Peer dest = 1 ; < nl > } < nl > < nl > + message Delete { < nl > + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogCommand " ; < nl > + < nl > + required Peer dest = 1 ; < nl > + } < nl > + < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > index 0a7864f . . 41607a4 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > @ @ - 1 , 6 + 1 , 6 @ @ < nl > package im . actor . server . dialog < nl > < nl > - import akka . actor . { ActorRef , Status } < nl > + import akka . actor . { PoisonPill , ActorRef , Status } < nl > import akka . pattern . pipe < nl > import im . actor . api . rpc . PeersImplicits < nl > import im . actor . api . rpc . messaging . _ < nl > @ @ - 179 , 6 + 179 , 22 @ @ trait DialogCommandHandlers extends UpdateCounters with PeersImplicits { < nl > } < nl > } < nl > < nl > + protected def delete ( state : DialogState ) : Unit = { < nl > + val update = UpdateChatDelete ( peer . asStruct ) < nl > + < nl > + val future = < nl > + for { < nl > + _ ← db . run ( < nl > + HistoryMessageRepo . deleteAll ( userId , peer ) < nl > + andThen DialogRepo . delete ( userId , peer ) < nl > + ) < nl > + _ ← userExt . notifyDialogsChanged ( userId ) < nl > + seqstate ← seqUpdExt . deliverSingleUpdate ( userId , update ) < nl > + } yield seqstate < nl > + < nl > + future pipeTo sender ( ) onSuccess { case _ ⇒ self ! PoisonPill } < nl > + } < nl > + < nl > private def mustMakeReceive ( state : DialogState , mr : MessageReceived ) : Boolean = < nl > ( mr . date > state . lastReceiveDate ) & & / / receive date is later than last receive date < nl > ( mr . date < = mr . now ) & & / / and receive date is not in future < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > index 461366f . . 8deb88d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > @ @ - 23 , 6 + 23 , 7 @ @ import slick . dbio . DBIO < nl > < nl > import scala . concurrent . duration . _ < nl > import scala . concurrent . { ExecutionContext , Future } < nl > + import scala . reflect . ClassTag < nl > < nl > sealed trait DialogGroup { < nl > def key : String < nl > @ @ - 60 , 7 + 61 , 7 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > < nl > private val log = Logging ( system , getClass ) < nl > < nl > - private def withValidPeer [ A ] ( peer : Peer , senderUserId : Int , failed : ⇒ A ) ( f : ⇒ A ) : A = < nl > + private def withValidPeer [ A ] ( peer : Peer , senderUserId : Int , failed : ⇒ Future [ A ] = Future . failed [ A ] ( DialogErrors . MessageToSelf ) ) ( f : ⇒ Future [ A ] ) : Future [ A ] = < nl > peer match { < nl > case Peer ( PeerType . Private , id ) if id = = senderUserId ⇒ < nl > log . error ( s " Attempt to work with yourself , userId : $ senderUserId " ) < nl > @ @ - 124 , 6 + 125 , 11 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > ( userExt . processorRegion . ref ? Envelope ( Peer . privat ( userId ) ) . withHide ( Hide ( peer ) ) ) . mapTo [ SeqState ] < nl > } < nl > < nl > + def delete ( userId : Int , peer : Peer ) : Future [ SeqState ] = < nl > + withValidPeer ( peer , userId ) { < nl > + ( userExt . processorRegion . ref ? Envelope ( Peer . privat ( userId ) ) . withDelete ( Delete ( peer ) ) ) . mapTo [ SeqState ] < nl > + } < nl > + < nl > def getDeliveryExtension ( extensions : Seq [ ApiExtension ] ) : DeliveryExtension = { < nl > extensions match { < nl > case Seq ( ) ⇒ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > index 78a18df . . b922722 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > @ @ - 13 , 7 + 13 , 7 @ @ import im . actor . server . cqrs . ProcessorState < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . model . { Dialog ⇒ DialogModel , Peer } < nl > import im . actor . server . persist . DialogRepo < nl > - import im . actor . server . sequence . SeqStateDate < nl > + import im . actor . server . sequence . { SeqUpdatesExtension , SeqStateDate } < nl > import im . actor . server . social . SocialExtension < nl > import im . actor . server . user . UserExtension < nl > import im . actor . util . cache . CacheHelpers . _ < nl > @ @ - 105 , 6 + 105 , 7 @ @ private [ dialog ] final class DialogProcessor ( val userId : Int , val peer : Peer , ext < nl > < nl > protected val dialogExt = DialogExtension ( system ) < nl > protected val deliveryExt = dialogExt . getDeliveryExtension ( extensions ) < nl > + protected val seqUpdExt = SeqUpdatesExtension ( context . system ) < nl > < nl > protected val selfPeer : Peer = Peer . privat ( userId ) < nl > < nl > @ @ - 134 , 6 + 135 , 7 @ @ private [ dialog ] final class DialogProcessor ( val userId : Int , val peer : Peer , ext < nl > case WriteMessage ( _ , _ , date , randomId , message ) ⇒ writeMessage ( date , randomId , message ) < nl > case Show ( _ ) ⇒ show ( state ) < nl > case Hide ( _ ) ⇒ hide ( state ) < nl > + case Delete ( _ ) ⇒ delete ( state ) < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > index 358c65b . . b759493 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > @ @ - 59 , 17 + 59 , 11 @ @ trait HistoryHandlers { < nl > } < nl > < nl > override def jhandleDeleteChat ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { < nl > - val action = requireAuth ( clientData ) . map { implicit client ⇒ < nl > - val update = UpdateChatDelete ( peer . asPeer ) < nl > - < nl > + authorized ( clientData ) { implicit client ⇒ < nl > for { < nl > - _ ← persist . HistoryMessageRepo . deleteAll ( client . userId , peer . asModel ) < nl > - _ ← persist . DialogRepo . delete ( client . userId , peer . asModel ) < nl > - seqstate ← DBIO . from ( userExt . broadcastClientUpdate ( update , None , isFat = false ) ) < nl > - } yield Ok ( ResponseSeq ( seqstate . seq , seqstate . state . toByteArray ) ) < nl > + SeqState ( seq , state ) ← dialogExt . delete ( client . userId , peer . asModel ) < nl > + } yield Ok ( ResponseSeq ( seq , state . toByteArray ) ) < nl > } < nl > - < nl > - db . run ( toDBIOAction ( action ) ) < nl > } < nl > < nl > override def jhandleLoadDialogs ( endDate : Long , limit : Int , clientData : ClientData ) : Future [ HandlerResult [ ResponseLoadDialogs ] ] = {

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto 
 index dd88e3a . . 20ac58c 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / group . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / group . proto 
 @ @ - 255 , 6 + 255 , 16 @ @ message GroupQueries { 
 message GetAccessHashResponse { 
 required int64 access _ hash = 1 ; 
 } 
 + 
 + message GetTitle { 
 + option ( scalapb . message ) . extends = " im . actor . server . group . GroupQuery " ; 
 + 
 + required int32 group _ id = 1 ; 
 + } 
 + 
 + message GetTitleResponse { 
 + required string title = 1 ; 
 + } 
 } 
 
 message GroupEvents { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 index 6f76a45 . . 7c04909 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 @ @ - 3 , 20 + 3 , 23 @ @ package im . actor . server . dialog 
 import java . time . Instant 
 
 import akka . actor . { ActorRef , Props , Status } 
 + import akka . http . scaladsl . util . FastFuture 
 import akka . pattern . { ask , pipe } 
 import akka . util . Timeout 
 import com . google . protobuf . wrappers . Int64Value 
 import im . actor . concurrent . _ 
 import im . actor . server . cqrs . _ 
 import im . actor . server . dialog . DialogCommands . { SendMessage , WriteMessageSelf } 
 - import im . actor . server . model . { Peer , PeerType } 
 + import im . actor . server . model . { Peer , PeerErrors , PeerType } 
 import im . actor . api . rpc . _ 
 import im . actor . api . rpc . messaging . UpdateChatGroupsChanged 
 import im . actor . api . rpc . misc . ApiExtension 
 import im . actor . config . ActorConfig 
 import im . actor . serialization . ActorSerializer 
 import im . actor . server . dialog . DialogQueries . GetInfoResponse 
 + import im . actor . server . group . GroupExtension 
 import im . actor . server . sequence . { PushRules , SeqState , SeqUpdatesExtension } 
 + import im . actor . server . user . UserExtension 
 
 import scala . concurrent . Future 
 
 @ @ - 103 , 6 + 106 , 9 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 import DialogRootCommands . _ 
 import context . dispatcher 
 
 + private val userExt = UserExtension ( context . system ) 
 + private val groupExt = GroupExtension ( context . system ) 
 + 
 private implicit val timeout = Timeout ( ActorConfig . defaultTimeout ) 
 
 private val selfPeer : Peer = Peer . privat ( userId ) 
 @ @ - 236 , 7 + 242 , 7 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 
 protected def fetchDialogGroups ( ) : Future [ Seq [ DialogGroup ] ] = { 
 for { 
 - favInfos ← Future . sequence ( state . active . favourites map ( sd ⇒ getInfo ( sd . peer ) map ( _ . getInfo ) ) ) 
 + favInfos ← Future . sequence ( state . active . favourites . toSeq map ( sd ⇒ getInfo ( sd . peer ) map ( _ . getInfo ) ) ) flatMap sortFavourites 
 groupInfos ← Future . sequence ( state . active . groups map ( sd ⇒ getInfo ( sd . peer ) map ( _ . getInfo ) ) ) 
 dmInfos ← Future . sequence ( state . active . dms map ( sd ⇒ getInfo ( sd . peer ) map ( _ . getInfo ) ) ) 
 } yield { 
 @ @ - 261 , 4 + 267 , 27 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 
 protected def getInfo ( peer : Peer ) : Future [ DialogQueries . GetInfoResponse ] = 
 ( dialogRef ( peer ) ? DialogQueries . GetInfo ( Some ( peer ) ) ) . mapTo [ GetInfoResponse ] 
 + 
 + private def sortFavourites ( infos : Seq [ DialogInfo ] ) : Future [ Seq [ DialogInfo ] ] = { 
 + for { 
 + infosNames ← Future . sequence ( infos map ( info ⇒ getName ( info . getPeer ) map ( info → _ ) ) ) 
 + } yield infosNames . sortWith { 
 + case ( ( di1 , name1 ) , ( di2 , name2 ) ) ⇒ 
 + if ( di1 . getPeer . typ . isGroup & & di2 . getPeer . typ . isPrivate ) true 
 + else if ( di1 . getPeer . typ . isPrivate & & di2 . getPeer . typ . isGroup ) false 
 + else name1 . headOption . getOrElse ( ' ' ) < name2 . headOption . getOrElse ( ' ' ) 
 + } . map ( _ . _ 1 ) 
 + } 
 + 
 + private def getName ( peer : Peer ) : Future [ String ] = { 
 + peer . typ match { 
 + case PeerType . Private ⇒ 
 + for { 
 + localNameOpt ← userExt . getLocalName ( userId , peer . id ) 
 + name ← localNameOpt map FastFuture . successful getOrElse userExt . getName ( peer . id , userId ) 
 + } yield name 
 + case PeerType . Group ⇒ groupExt . getTitle ( peer . id ) 
 + case unknown ⇒ FastFuture . failed ( PeerErrors . UnknownPeerType ( unknown ) ) 
 + } 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 index 10f3bc3 . . 00bb493 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 @ @ - 119 , 4 + 119 , 7 @ @ private [ group ] sealed trait Queries { 
 
 def getAccessHash ( groupId : Int ) : Future [ Long ] = 
 ( viewRegion . ref ? GetAccessHash ( groupId ) ) . mapTo [ GetAccessHashResponse ] map ( _ . accessHash ) 
 + 
 + def getTitle ( groupId : Int ) : Future [ String ] = 
 + ( viewRegion . ref ? GetTitle ( groupId ) ) . mapTo [ GetTitleResponse ] map ( _ . title ) 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index 227cd7e . . 7db0e39 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 199 , 6 + 199 , 7 @ @ private [ group ] final class GroupProcessor 
 case GroupQueries . IsPublic ( _ ) ⇒ isPublic ( state ) 
 case GroupQueries . GetAccessHash ( _ ) ⇒ getAccessHash ( state ) 
 case GroupQueries . IsHistoryShared ( _ ) ⇒ isHistoryShared ( state ) 
 + case GroupQueries . GetTitle ( _ ) ⇒ getTitle ( state ) 
 } 
 
 override def handleInitCommand : Receive = { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 index 8f44510 . . 3e0188f 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 @ @ - 67 , 4 + 67 , 7 @ @ private [ group ] trait GroupQueryHandlers extends GroupCommandHelpers { 
 
 def isHistoryShared ( group : GroupState ) : Unit = 
 sender ( ) ! IsHistorySharedResponse ( group . isHistoryShared ) 
 + 
 + def getTitle ( group : GroupState ) : Unit = 
 + sender ( ) ! GetTitleResponse ( group . title ) 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 index 6ec13a8 . . ae2fd6a 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 @ @ - 21 , 6 + 21 , 7 @ @ message DialogCommands { 
 MessageRead message _ read = 5 ; 
 Show show = 6 ; 
 Hide hide = 7 ; 
 + Delete delete = 8 ; 
 } 
 } 
 
 @ @ - 85 , 4 + 86 , 10 @ @ message DialogCommands { 
 required Peer dest = 1 ; 
 } 
 
 + message Delete { 
 + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogCommand " ; 
 + 
 + required Peer dest = 1 ; 
 + } 
 + 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 index 0a7864f . . 41607a4 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package im . actor . server . dialog 
 
 - import akka . actor . { ActorRef , Status } 
 + import akka . actor . { PoisonPill , ActorRef , Status } 
 import akka . pattern . pipe 
 import im . actor . api . rpc . PeersImplicits 
 import im . actor . api . rpc . messaging . _ 
 @ @ - 179 , 6 + 179 , 22 @ @ trait DialogCommandHandlers extends UpdateCounters with PeersImplicits { 
 } 
 } 
 
 + protected def delete ( state : DialogState ) : Unit = { 
 + val update = UpdateChatDelete ( peer . asStruct ) 
 + 
 + val future = 
 + for { 
 + _ ← db . run ( 
 + HistoryMessageRepo . deleteAll ( userId , peer ) 
 + andThen DialogRepo . delete ( userId , peer ) 
 + ) 
 + _ ← userExt . notifyDialogsChanged ( userId ) 
 + seqstate ← seqUpdExt . deliverSingleUpdate ( userId , update ) 
 + } yield seqstate 
 + 
 + future pipeTo sender ( ) onSuccess { case _ ⇒ self ! PoisonPill } 
 + } 
 + 
 private def mustMakeReceive ( state : DialogState , mr : MessageReceived ) : Boolean = 
 ( mr . date > state . lastReceiveDate ) & & / / receive date is later than last receive date 
 ( mr . date < = mr . now ) & & / / and receive date is not in future 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 index 461366f . . 8deb88d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 @ @ - 23 , 6 + 23 , 7 @ @ import slick . dbio . DBIO 
 
 import scala . concurrent . duration . _ 
 import scala . concurrent . { ExecutionContext , Future } 
 + import scala . reflect . ClassTag 
 
 sealed trait DialogGroup { 
 def key : String 
 @ @ - 60 , 7 + 61 , 7 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 
 private val log = Logging ( system , getClass ) 
 
 - private def withValidPeer [ A ] ( peer : Peer , senderUserId : Int , failed : ⇒ A ) ( f : ⇒ A ) : A = 
 + private def withValidPeer [ A ] ( peer : Peer , senderUserId : Int , failed : ⇒ Future [ A ] = Future . failed [ A ] ( DialogErrors . MessageToSelf ) ) ( f : ⇒ Future [ A ] ) : Future [ A ] = 
 peer match { 
 case Peer ( PeerType . Private , id ) if id = = senderUserId ⇒ 
 log . error ( s " Attempt to work with yourself , userId : $ senderUserId " ) 
 @ @ - 124 , 6 + 125 , 11 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 ( userExt . processorRegion . ref ? Envelope ( Peer . privat ( userId ) ) . withHide ( Hide ( peer ) ) ) . mapTo [ SeqState ] 
 } 
 
 + def delete ( userId : Int , peer : Peer ) : Future [ SeqState ] = 
 + withValidPeer ( peer , userId ) { 
 + ( userExt . processorRegion . ref ? Envelope ( Peer . privat ( userId ) ) . withDelete ( Delete ( peer ) ) ) . mapTo [ SeqState ] 
 + } 
 + 
 def getDeliveryExtension ( extensions : Seq [ ApiExtension ] ) : DeliveryExtension = { 
 extensions match { 
 case Seq ( ) ⇒ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 index 78a18df . . b922722 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 @ @ - 13 , 7 + 13 , 7 @ @ import im . actor . server . cqrs . ProcessorState 
 import im . actor . server . db . DbExtension 
 import im . actor . server . model . { Dialog ⇒ DialogModel , Peer } 
 import im . actor . server . persist . DialogRepo 
 - import im . actor . server . sequence . SeqStateDate 
 + import im . actor . server . sequence . { SeqUpdatesExtension , SeqStateDate } 
 import im . actor . server . social . SocialExtension 
 import im . actor . server . user . UserExtension 
 import im . actor . util . cache . CacheHelpers . _ 
 @ @ - 105 , 6 + 105 , 7 @ @ private [ dialog ] final class DialogProcessor ( val userId : Int , val peer : Peer , ext 
 
 protected val dialogExt = DialogExtension ( system ) 
 protected val deliveryExt = dialogExt . getDeliveryExtension ( extensions ) 
 + protected val seqUpdExt = SeqUpdatesExtension ( context . system ) 
 
 protected val selfPeer : Peer = Peer . privat ( userId ) 
 
 @ @ - 134 , 6 + 135 , 7 @ @ private [ dialog ] final class DialogProcessor ( val userId : Int , val peer : Peer , ext 
 case WriteMessage ( _ , _ , date , randomId , message ) ⇒ writeMessage ( date , randomId , message ) 
 case Show ( _ ) ⇒ show ( state ) 
 case Hide ( _ ) ⇒ hide ( state ) 
 + case Delete ( _ ) ⇒ delete ( state ) 
 } 
 
 / * * 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 index 358c65b . . b759493 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 @ @ - 59 , 17 + 59 , 11 @ @ trait HistoryHandlers { 
 } 
 
 override def jhandleDeleteChat ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { 
 - val action = requireAuth ( clientData ) . map { implicit client ⇒ 
 - val update = UpdateChatDelete ( peer . asPeer ) 
 - 
 + authorized ( clientData ) { implicit client ⇒ 
 for { 
 - _ ← persist . HistoryMessageRepo . deleteAll ( client . userId , peer . asModel ) 
 - _ ← persist . DialogRepo . delete ( client . userId , peer . asModel ) 
 - seqstate ← DBIO . from ( userExt . broadcastClientUpdate ( update , None , isFat = false ) ) 
 - } yield Ok ( ResponseSeq ( seqstate . seq , seqstate . state . toByteArray ) ) 
 + SeqState ( seq , state ) ← dialogExt . delete ( client . userId , peer . asModel ) 
 + } yield Ok ( ResponseSeq ( seq , state . toByteArray ) ) 
 } 
 - 
 - db . run ( toDBIOAction ( action ) ) 
 } 
 
 override def jhandleLoadDialogs ( endDate : Long , limit : Int , clientData : ClientData ) : Future [ HandlerResult [ ResponseLoadDialogs ] ] = {
