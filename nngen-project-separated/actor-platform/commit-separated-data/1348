BLEU SCORE: 0.06837203339116285

TEST MSG: feat ( server : sdk ) : ability to create http api tokens
GENERATED MSG: fix ( oauth ) : make refresh token optional

TEST DIFF (one line): diff - - git a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala < nl > index 0c4a211 . . 156e068 100644 < nl > - - - a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala < nl > + + + b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala < nl > @ @ - 45 , 6 + 45 , 9 @ @ private [ cli ] case object UpdateIsAdminResponse extends UpdateIsAdminResponse { < nl > def apply ( ) : UpdateIsAdminResponse = this < nl > } < nl > < nl > + private [ cli ] case class CreateApiToken ( isAdmin : Boolean ) < nl > + private case class CreateApiTokenResponse ( token : String ) < nl > + < nl > private object Commands { < nl > val Help = " help " < nl > val CreateBot = " create - bot " < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala < nl > index 4dea619 . . 4756dfe 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala < nl > @ @ - 69 , 6 + 69 , 8 @ @ object ACLUtils { < nl > nextAccessSalt ( ThreadLocalRandom . current ( ) ) < nl > } < nl > < nl > + def accessToken ( ) : String = accessToken ( ThreadLocalRandom . current ( ) ) < nl > + < nl > def accessToken ( rng : ThreadLocalRandom ) : String = DigestUtils . sha256Hex ( rng . nextLong ( ) . toString ) < nl > < nl > def checkOutPeer ( outPeer : ApiOutPeer , clientAuthId : Long ) ( implicit s : ActorSystem ) : Future [ Boolean ] = { < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala < nl > new file mode 100644 < nl > index 0000000 . . 4245d66 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala < nl > @ @ - 0 , 0 + 1 , 11 @ @ < nl > + package im . actor . server . api . http . model < nl > + < nl > + import play . api . libs . json . { JsArray , Json , JsObject , Writes } < nl > + < nl > + final case class DataEntity [ A ] ( data : A ) { < nl > + def toJson ( implicit writes : Writes [ A ] ) = JsObject ( Map ( " data " → Json . toJson ( data ) ) ) < nl > + } < nl > + < nl > + final case class DataEntities [ A ] ( datas : Seq [ A ] ) { < nl > + def toJson ( implicit writes : Writes [ A ] ) = JsObject ( Map ( " data " → JsArray ( datas map ( Json . toJson ( _ ) ) ) ) ) < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - models / src / main / protobuf / model . proto b / actor - server / actor - models / src / main / protobuf / model . proto < nl > index 47315f6 . . 4b87762 100644 < nl > - - - a / actor - server / actor - models / src / main / protobuf / model . proto < nl > + + + b / actor - server / actor - models / src / main / protobuf / model . proto < nl > @ @ - 59 , 4 + 59 , 9 @ @ message ReactionEvent { < nl > message MessageReaction { < nl > repeated int32 user _ ids = 3 ; < nl > string code = 4 ; < nl > + } < nl > + < nl > + message HttpApiToken { < nl > + string token = 1 ; < nl > + bool is _ admin = 2 ; < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20151223215842 _ _ CreateApiTokens . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20151223215842 _ _ CreateApiTokens . sql < nl > new file mode 100644 < nl > index 0000000 . . 0312ac3 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20151223215842 _ _ CreateApiTokens . sql < nl > @ @ - 0 , 0 + 1 , 5 @ @ < nl > + CREATE TABLE http _ api _ tokens ( < nl > + token text NOT NULL , < nl > + is _ admin BOOL NOT NULL DEFAULT FALSE , < nl > + PRIMARY KEY token < nl > + ) < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HttpApiTokenRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HttpApiTokenRepo . scala < nl > new file mode 100644 < nl > index 0000000 . . 5129fbe < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HttpApiTokenRepo . scala < nl > @ @ - 0 , 0 + 1 , 24 @ @ < nl > + package im . actor . server . persist < nl > + < nl > + import im . actor . server . db . ActorPostgresDriver . api . _ < nl > + import im . actor . server . model . HttpApiToken < nl > + < nl > + final class HttpApiTokenTable ( tag : Tag ) extends Table [ HttpApiToken ] ( tag , " http _ api _ tokens " ) { < nl > + def token = column [ String ] ( " token " , O . PrimaryKey ) < nl > + < nl > + def isAdmin = column [ Boolean ] ( " is _ admin " ) < nl > + < nl > + def * = ( token , isAdmin ) < > ( ( HttpApiToken . apply _ ) . tupled , HttpApiToken . unapply ) < nl > + } < nl > + < nl > + object HttpApiTokenRepo { < nl > + val httpApiTokens = TableQuery [ HttpApiTokenTable ] < nl > + < nl > + val byToken = Compiled { ( token : Rep [ String ] ) ⇒ < nl > + httpApiTokens filter ( _ . token = = = token ) < nl > + } < nl > + < nl > + def find ( token : String ) = byToken ( token ) . result < nl > + < nl > + def create ( token : String , isAdmin : Boolean ) = httpApiTokens + = HttpApiToken ( token , isAdmin ) < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala < nl > index 895dc4c . . 80efb53 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala < nl > @ @ - 10 , 6 + 10 , 7 @ @ object ActorCliService { < nl > final private class ActorCliService extends Actor with ActorLogging { < nl > protected val bots = context . actorOf ( BotsCliService . props , " bots " ) < nl > protected val users = context . actorOf ( UsersCliService . props , " users " ) < nl > + protected val http = context . actorOf ( HttpCliService . props , " http " ) < nl > < nl > def receive = Actor . emptyBehavior < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / HttpCliService . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / HttpCliService . scala < nl > new file mode 100644 < nl > index 0000000 . . 9fad02f < nl > - - - / dev / null < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / HttpCliService . scala < nl > @ @ - 0 , 0 + 1 , 28 @ @ < nl > + package im . actor . server . cli < nl > + < nl > + import akka . actor . { Props , Actor } < nl > + import akka . cluster . client . ClusterClientReceptionist < nl > + import akka . pattern . pipe < nl > + import im . actor . server . acl . ACLUtils < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . persist . HttpApiTokenRepo < nl > + < nl > + object HttpCliService { < nl > + def props = Props ( new HttpCliService ) < nl > + } < nl > + < nl > + final class HttpCliService extends Actor { < nl > + import context . dispatcher < nl > + < nl > + ClusterClientReceptionist ( context . system ) . registerService ( self ) < nl > + < nl > + private val db = DbExtension ( context . system ) . db < nl > + < nl > + def receive = { < nl > + case CreateApiToken ( isAdmin ) ⇒ < nl > + val token = ACLUtils . accessToken ( ) < nl > + ( for { < nl > + _ ← db . run ( HttpApiTokenRepo . create ( token , isAdmin = isAdmin ) ) < nl > + } yield CreateApiTokenResponse ( token ) ) pipeTo sender ( ) < nl > + } < nl > + } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / OAuth2Token . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / OAuth2Token . scala < nl > index 0d15456 . . 22927bc 100644 < nl > - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / OAuth2Token . scala < nl > + + + b / actor - server / actor - models / src / main / scala / im / actor / server / models / OAuth2Token . scala < nl > @ @ - 9 , 7 + 9 , 7 @ @ import java . time . LocalDateTime < nl > * @ param accessToken The access token issued < nl > * @ param tokenType The type of the token issued < nl > * @ param expiresIn The lifetime in seconds of the access token < nl > - * @ param refreshToken The refresh token , which can be used to obtain new access tokens < nl > + * @ param refreshToken The refresh token , which can be used to obtain new access tokens . Contains only in first response . < nl > * @ param createdAt Date when ` OAuth2Token ` was registered on server < nl > * / < nl > case class OAuth2Token ( < nl > @ @ - 18 , 7 + 18 , 7 @ @ case class OAuth2Token ( < nl > accessToken : String , < nl > tokenType : String , < nl > expiresIn : Long , < nl > - refreshToken : String , < nl > + refreshToken : Option [ String ] , < nl > createdAt : LocalDateTime < nl > ) < nl > < nl > diff - - git a / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / GmailProvider . scala b / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / GmailProvider . scala < nl > index 4b67e54 . . f6b3d0a 100644 < nl > - - - a / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / GmailProvider . scala < nl > + + + b / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / GmailProvider . scala < nl > @ @ - 13 , 7 + 13 , 7 @ @ import akka . http . scaladsl . marshalling . Marshal < nl > import akka . http . scaladsl . model . HttpMethods . _ < nl > import akka . http . scaladsl . model . { FormData , HttpRequest , RequestEntity , Uri } < nl > import akka . http . scaladsl . unmarshalling . _ < nl > - import akka . stream . ActorFlowMaterializer < nl > + import akka . stream . Materializer < nl > import java . time . { ZoneOffset , LocalDateTime } < nl > import slick . dbio . DBIO < nl > import slick . driver . PostgresDriver . api . _ < nl > @ @ - 24 , 16 + 24 , 16 @ @ case class Token ( < nl > accessToken : String , < nl > tokenType : String , < nl > expiresIn : Long , < nl > - refreshToken : String , < nl > - createdAt : LocalDateTime = LocalDateTime . now ( ZoneOffset . UTC ) < nl > + refreshToken : Option [ String ] , < nl > + createdAt : LocalDateTime = LocalDateTime . now ( ZoneOffset . UTC ) < nl > ) < nl > < nl > class GmailProvider ( gmailConfig : OAuth2GmailConfig ) ( < nl > implicit < nl > - db : Database , < nl > - system : ActorSystem , < nl > - ec : ExecutionContext , < nl > - val flowMaterializer : ActorFlowMaterializer < nl > + db : Database , < nl > + system : ActorSystem , < nl > + ec : ExecutionContext , < nl > + val materializer : Materializer < nl > ) extends OAuth2Provider with Implicits { < nl > < nl > private val Utf8Encoding = " UTF - 8 " < nl > @ @ - 44 , 7 + 44 , 7 @ @ class GmailProvider ( gmailConfig : OAuth2GmailConfig ) ( < nl > for { < nl > optToken ← persist . OAuth2Token . findByUserId ( userId ) < nl > result ← optToken . map { token ⇒ < nl > - if ( isExpired ( token ) ) refreshToken ( token ) else DBIO . successful ( Some ( token ) ) < nl > + if ( isExpired ( token ) ) refreshToken ( userId ) else DBIO . successful ( Some ( token ) ) < nl > } getOrElse { < nl > val form = FormData ( < nl > " code " → code , < nl > @ @ - 59 , 14 + 59 , 19 @ @ class GmailProvider ( gmailConfig : OAuth2GmailConfig ) ( < nl > } yield result < nl > } < nl > < nl > - def refreshToken ( token : models . OAuth2Token ) : DBIO [ Option [ models . OAuth2Token ] ] = { < nl > - val form = FormData ( < nl > - " client _ id " → gmailConfig . clientId , < nl > - " client _ secret " → gmailConfig . clientSecret , < nl > - " grant _ type " → " refresh _ token " , < nl > - " refresh _ token " → token . refreshToken < nl > - ) < nl > - fetchToken ( form , token . userId ) < nl > + def refreshToken ( userId : String ) : DBIO [ Option [ models . OAuth2Token ] ] = { < nl > + for { < nl > + optRefresh ← persist . OAuth2Token . findRefreshToken ( userId ) < nl > + token ← optRefresh . map { refresh ⇒ < nl > + val form = FormData ( < nl > + " client _ id " → gmailConfig . clientId , < nl > + " client _ secret " → gmailConfig . clientSecret , < nl > + " grant _ type " → " refresh _ token " , < nl > + " refresh _ token " → refresh . refreshToken . getOrElse ( " " ) < nl > + ) < nl > + fetchToken ( form , userId ) < nl > + } . getOrElse ( DBIO . successful ( None ) ) < nl > + } yield token < nl > } < nl > < nl > def getAuthUrl ( redirectUrl : String , userId : String ) : Option [ String ] = { < nl > diff - - git a / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / Implicits . scala b / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / Implicits . scala < nl > index 7d4e9a5 . . eb5c6f7 100644 < nl > - - - a / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / Implicits . scala < nl > + + + b / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / Implicits . scala < nl > @ @ - 2 , 21 + 2 , 21 @ @ package im . actor . server . oauth < nl > < nl > import akka . http . scaladsl . unmarshalling . PredefinedFromEntityUnmarshallers . _ < nl > import akka . http . scaladsl . unmarshalling . _ < nl > - import akka . stream . FlowMaterializer < nl > + import akka . stream . Materializer < nl > import play . api . libs . functional . syntax . _ < nl > import play . api . libs . json . { JsPath , Json , Reads } < nl > < nl > trait Implicits { < nl > < nl > - implicit val flowMaterializer : FlowMaterializer < nl > + implicit val materializer : Materializer < nl > < nl > implicit val tokenReads : Reads [ Token ] = < nl > ( ( JsPath \ " access _ token " ) . read [ String ] and < nl > ( JsPath \ " token _ type " ) . read [ String ] and < nl > ( JsPath \ " expires _ in " ) . read [ Long ] and < nl > - ( JsPath \ " refresh _ token " ) . read [ String ] ) ( createToken _ ) < nl > + ( JsPath \ " refresh _ token " ) . readNullable [ String ] ) ( createToken _ ) < nl > < nl > - private def createToken ( accessToken : String , tokenType : String , expiresIn : Long , refreshToken : String ) = < nl > + private def createToken ( accessToken : String , tokenType : String , expiresIn : Long , refreshToken : Option [ String ] ) = < nl > Token ( accessToken , tokenType , expiresIn , refreshToken ) < nl > < nl > implicit val toOAuthToken : FromResponseUnmarshaller [ Option [ Token ] ] = Unmarshaller { implicit ec ⇒ resp ⇒ < nl > diff - - git a / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / OAuth2Provider . scala b / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / OAuth2Provider . scala < nl > index 7c338d9 . . 7304239 100644 < nl > - - - a / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / OAuth2Provider . scala < nl > + + + b / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / OAuth2Provider . scala < nl > @ @ - 10 , 5 + 10 , 5 @ @ trait OAuth2Provider { < nl > < nl > def getAuthUrl ( redirectUrl : String , userId : String ) : Option [ String ] < nl > < nl > - def refreshToken ( token : models . OAuth2Token ) : DBIO [ Option [ models . OAuth2Token ] ] < nl > + def refreshToken ( userId : String ) : DBIO [ Option [ models . OAuth2Token ] ] < nl > } < nl > diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20150618174638 _ _ CreateOAuth2Tokens . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20150618174638 _ _ CreateOAuth2Tokens . sql < nl > index 6dd4e4a . . e234511 100644 < nl > - - - a / actor - server / actor - persist / src / main / resources / sql / migration / V20150618174638 _ _ CreateOAuth2Tokens . sql < nl > + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20150618174638 _ _ CreateOAuth2Tokens . sql < nl > @ @ - 4 , 7 + 4 , 7 @ @ create table oauth2 _ tokens ( < nl > access _ token varchar ( 255 ) not null , < nl > token _ type varchar ( 255 ) not null , < nl > expires _ in bigint not null , < nl > - refresh _ token varchar ( 255 ) not null , < nl > - created _ at timestamp , < nl > + refresh _ token varchar ( 255 ) , < nl > + created _ at timestamp not null , < nl > primary key ( id , user _ id ) < nl > ) ; < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OAuth2Token . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OAuth2Token . scala < nl > index e47fff3 . . b3d95f0 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OAuth2Token . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OAuth2Token . scala < nl > @ @ - 12 , 7 + 12 , 7 @ @ class OAuth2TokenTable ( tag : Tag ) extends Table [ models . OAuth2Token ] ( tag , " oauth2 _ < nl > def accessToken = column [ String ] ( " access _ token " ) < nl > def tokenType = column [ String ] ( " token _ type " ) < nl > def expiresIn = column [ Long ] ( " expires _ in " ) < nl > - def refreshToken = column [ String ] ( " refresh _ token " ) < nl > + def refreshToken = column [ Option [ String ] ] ( " refresh _ token " ) < nl > def createdAt = column [ LocalDateTime ] ( " created _ at " ) < nl > < nl > def * = ( id , userId , accessToken , tokenType , expiresIn , refreshToken , createdAt ) < > ( models . OAuth2Token . tupled , models . OAuth2Token . unapply ) < nl > @ @ - 27 , 4 + 27 , 7 @ @ object OAuth2Token { < nl > def findByUserId ( userId : String ) = < nl > tokens . filter ( _ . userId = = = userId ) . sortBy ( _ . createdAt . desc ) . result . headOption < nl > < nl > + def findRefreshToken ( userId : String ) = < nl > + tokens . filter ( t ⇒ t . userId = = = userId & & t . refreshToken . isDefined ) . result . headOption < nl > + < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthErrors . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthErrors . scala < nl > index 75e5e5f . . 61916ca 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthErrors . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthErrors . scala < nl > @ @ - 15 , 5 + 15 , 5 @ @ object AuthErrors { < nl > val EmailUnoccupied = RpcError ( 400 , " EMAIL _ UNOCCUPIED " , " " , false , None ) < nl > val RedirectUrlInvalid = RpcError ( 400 , " REDIRECT _ URL _ INVALID " , " " , false , None ) < nl > val NotValidated = RpcError ( 400 , " NOT _ VALIDATED " , " " , false , None ) / / todo : proper name < nl > - val FailedToGetOAuth2Token = RpcError ( 400 , " FAILED _ GET _ OAUTH2 _ TOKEN " , " " , false , None ) < nl > + val FailedToGetOAuth2Token = RpcError ( 400 , " FAILED _ GET _ OAUTH2 _ TOKEN " , " Authorization server error . " , false , None ) < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > index f92e11e . . 2e73bc1 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > @ @ - 29 , 6 + 29 , 7 @ @ import im . actor . server . session . { SessionMessage , SessionRegion } < nl > import im . actor . server . social . SocialManager . _ < nl > import im . actor . server . util . IdUtils . _ < nl > import im . actor . server . util . PhoneNumber . _ < nl > + import im . actor . server . util . StringUtils . validName < nl > import im . actor . server . util . _ < nl > import im . actor . server . { persist , models } < nl > < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala < nl > index 233c166 . . f9cf776 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala < nl > @ @ - 18 , 7 + 18 , 7 @ @ private [ auth ] trait Helpers extends PublicKeyHelpers { < nl > < nl > def validEmail ( email : String ) : \ / [ NonEmptyList [ String ] , String ] = < nl > StringUtils . nonEmptyString ( email ) . flatMap ( matchesEmail ) < nl > - < nl > + < nl > def validPublicKey ( k : Array [ Byte ] ) : \ / [ NonEmptyList [ String ] , Array [ Byte ] ] = < nl > if ( k . isEmpty ) " Should be nonempty " . wrapNel . left else k . right < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala < nl > index f5b1de0 . . ec12860 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala < nl > @ @ - 779 , 7 + 779 , 7 @ @ object DummyOAuth2Server { < nl > import akka . http . scaladsl . server . Directives . _ < nl > import akka . http . scaladsl . server . Route < nl > import akka . http . scaladsl . unmarshalling . PredefinedFromEntityUnmarshallers . _ < nl > - import akka . stream . FlowMaterializer < nl > + import akka . stream . Materializer < nl > import org . apache . commons . codec . digest . DigestUtils < nl > < nl > val config = OAuth2GmailConfig ( < nl > @ @ - 803 , 7 + 803 , 7 @ @ object DummyOAuth2Server { < nl > def start ( ) ( < nl > implicit < nl > system : ActorSystem , < nl > - materializer : FlowMaterializer < nl > + materializer : Materializer < nl > ) : Unit = { < nl > < nl > implicit val ec : ExecutionContext = system . dispatcher

TEST DIFF:
diff - - git a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala 
 index 0c4a211 . . 156e068 100644 
 - - - a / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala 
 + + + b / actor - server / actor - cli / src / main / scala / im / actor / server / cli / ActorCli . scala 
 @ @ - 45 , 6 + 45 , 9 @ @ private [ cli ] case object UpdateIsAdminResponse extends UpdateIsAdminResponse { 
 def apply ( ) : UpdateIsAdminResponse = this 
 } 
 
 + private [ cli ] case class CreateApiToken ( isAdmin : Boolean ) 
 + private case class CreateApiTokenResponse ( token : String ) 
 + 
 private object Commands { 
 val Help = " help " 
 val CreateBot = " create - bot " 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala 
 index 4dea619 . . 4756dfe 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala 
 @ @ - 69 , 6 + 69 , 8 @ @ object ACLUtils { 
 nextAccessSalt ( ThreadLocalRandom . current ( ) ) 
 } 
 
 + def accessToken ( ) : String = accessToken ( ThreadLocalRandom . current ( ) ) 
 + 
 def accessToken ( rng : ThreadLocalRandom ) : String = DigestUtils . sha256Hex ( rng . nextLong ( ) . toString ) 
 
 def checkOutPeer ( outPeer : ApiOutPeer , clientAuthId : Long ) ( implicit s : ActorSystem ) : Future [ Boolean ] = { 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala 
 new file mode 100644 
 index 0000000 . . 4245d66 
 - - - / dev / null 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / model / DataEntity . scala 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + package im . actor . server . api . http . model 
 + 
 + import play . api . libs . json . { JsArray , Json , JsObject , Writes } 
 + 
 + final case class DataEntity [ A ] ( data : A ) { 
 + def toJson ( implicit writes : Writes [ A ] ) = JsObject ( Map ( " data " → Json . toJson ( data ) ) ) 
 + } 
 + 
 + final case class DataEntities [ A ] ( datas : Seq [ A ] ) { 
 + def toJson ( implicit writes : Writes [ A ] ) = JsObject ( Map ( " data " → JsArray ( datas map ( Json . toJson ( _ ) ) ) ) ) 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - models / src / main / protobuf / model . proto b / actor - server / actor - models / src / main / protobuf / model . proto 
 index 47315f6 . . 4b87762 100644 
 - - - a / actor - server / actor - models / src / main / protobuf / model . proto 
 + + + b / actor - server / actor - models / src / main / protobuf / model . proto 
 @ @ - 59 , 4 + 59 , 9 @ @ message ReactionEvent { 
 message MessageReaction { 
 repeated int32 user _ ids = 3 ; 
 string code = 4 ; 
 + } 
 + 
 + message HttpApiToken { 
 + string token = 1 ; 
 + bool is _ admin = 2 ; 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20151223215842 _ _ CreateApiTokens . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20151223215842 _ _ CreateApiTokens . sql 
 new file mode 100644 
 index 0000000 . . 0312ac3 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20151223215842 _ _ CreateApiTokens . sql 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + CREATE TABLE http _ api _ tokens ( 
 + token text NOT NULL , 
 + is _ admin BOOL NOT NULL DEFAULT FALSE , 
 + PRIMARY KEY token 
 + ) 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HttpApiTokenRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HttpApiTokenRepo . scala 
 new file mode 100644 
 index 0000000 . . 5129fbe 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HttpApiTokenRepo . scala 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package im . actor . server . persist 
 + 
 + import im . actor . server . db . ActorPostgresDriver . api . _ 
 + import im . actor . server . model . HttpApiToken 
 + 
 + final class HttpApiTokenTable ( tag : Tag ) extends Table [ HttpApiToken ] ( tag , " http _ api _ tokens " ) { 
 + def token = column [ String ] ( " token " , O . PrimaryKey ) 
 + 
 + def isAdmin = column [ Boolean ] ( " is _ admin " ) 
 + 
 + def * = ( token , isAdmin ) < > ( ( HttpApiToken . apply _ ) . tupled , HttpApiToken . unapply ) 
 + } 
 + 
 + object HttpApiTokenRepo { 
 + val httpApiTokens = TableQuery [ HttpApiTokenTable ] 
 + 
 + val byToken = Compiled { ( token : Rep [ String ] ) ⇒ 
 + httpApiTokens filter ( _ . token = = = token ) 
 + } 
 + 
 + def find ( token : String ) = byToken ( token ) . result 
 + 
 + def create ( token : String , isAdmin : Boolean ) = httpApiTokens + = HttpApiToken ( token , isAdmin ) 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala 
 index 895dc4c . . 80efb53 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / ActorCliService . scala 
 @ @ - 10 , 6 + 10 , 7 @ @ object ActorCliService { 
 final private class ActorCliService extends Actor with ActorLogging { 
 protected val bots = context . actorOf ( BotsCliService . props , " bots " ) 
 protected val users = context . actorOf ( UsersCliService . props , " users " ) 
 + protected val http = context . actorOf ( HttpCliService . props , " http " ) 
 
 def receive = Actor . emptyBehavior 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / HttpCliService . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / HttpCliService . scala 
 new file mode 100644 
 index 0000000 . . 9fad02f 
 - - - / dev / null 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / cli / HttpCliService . scala 
 @ @ - 0 , 0 + 1 , 28 @ @ 
 + package im . actor . server . cli 
 + 
 + import akka . actor . { Props , Actor } 
 + import akka . cluster . client . ClusterClientReceptionist 
 + import akka . pattern . pipe 
 + import im . actor . server . acl . ACLUtils 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . persist . HttpApiTokenRepo 
 + 
 + object HttpCliService { 
 + def props = Props ( new HttpCliService ) 
 + } 
 + 
 + final class HttpCliService extends Actor { 
 + import context . dispatcher 
 + 
 + ClusterClientReceptionist ( context . system ) . registerService ( self ) 
 + 
 + private val db = DbExtension ( context . system ) . db 
 + 
 + def receive = { 
 + case CreateApiToken ( isAdmin ) ⇒ 
 + val token = ACLUtils . accessToken ( ) 
 + ( for { 
 + _ ← db . run ( HttpApiTokenRepo . create ( token , isAdmin = isAdmin ) ) 
 + } yield CreateApiTokenResponse ( token ) ) pipeTo sender ( ) 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / OAuth2Token . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / OAuth2Token . scala 
 index 0d15456 . . 22927bc 100644 
 - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / OAuth2Token . scala 
 + + + b / actor - server / actor - models / src / main / scala / im / actor / server / models / OAuth2Token . scala 
 @ @ - 9 , 7 + 9 , 7 @ @ import java . time . LocalDateTime 
 * @ param accessToken The access token issued 
 * @ param tokenType The type of the token issued 
 * @ param expiresIn The lifetime in seconds of the access token 
 - * @ param refreshToken The refresh token , which can be used to obtain new access tokens 
 + * @ param refreshToken The refresh token , which can be used to obtain new access tokens . Contains only in first response . 
 * @ param createdAt Date when ` OAuth2Token ` was registered on server 
 * / 
 case class OAuth2Token ( 
 @ @ - 18 , 7 + 18 , 7 @ @ case class OAuth2Token ( 
 accessToken : String , 
 tokenType : String , 
 expiresIn : Long , 
 - refreshToken : String , 
 + refreshToken : Option [ String ] , 
 createdAt : LocalDateTime 
 ) 
 
 diff - - git a / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / GmailProvider . scala b / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / GmailProvider . scala 
 index 4b67e54 . . f6b3d0a 100644 
 - - - a / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / GmailProvider . scala 
 + + + b / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / GmailProvider . scala 
 @ @ - 13 , 7 + 13 , 7 @ @ import akka . http . scaladsl . marshalling . Marshal 
 import akka . http . scaladsl . model . HttpMethods . _ 
 import akka . http . scaladsl . model . { FormData , HttpRequest , RequestEntity , Uri } 
 import akka . http . scaladsl . unmarshalling . _ 
 - import akka . stream . ActorFlowMaterializer 
 + import akka . stream . Materializer 
 import java . time . { ZoneOffset , LocalDateTime } 
 import slick . dbio . DBIO 
 import slick . driver . PostgresDriver . api . _ 
 @ @ - 24 , 16 + 24 , 16 @ @ case class Token ( 
 accessToken : String , 
 tokenType : String , 
 expiresIn : Long , 
 - refreshToken : String , 
 - createdAt : LocalDateTime = LocalDateTime . now ( ZoneOffset . UTC ) 
 + refreshToken : Option [ String ] , 
 + createdAt : LocalDateTime = LocalDateTime . now ( ZoneOffset . UTC ) 
 ) 
 
 class GmailProvider ( gmailConfig : OAuth2GmailConfig ) ( 
 implicit 
 - db : Database , 
 - system : ActorSystem , 
 - ec : ExecutionContext , 
 - val flowMaterializer : ActorFlowMaterializer 
 + db : Database , 
 + system : ActorSystem , 
 + ec : ExecutionContext , 
 + val materializer : Materializer 
 ) extends OAuth2Provider with Implicits { 
 
 private val Utf8Encoding = " UTF - 8 " 
 @ @ - 44 , 7 + 44 , 7 @ @ class GmailProvider ( gmailConfig : OAuth2GmailConfig ) ( 
 for { 
 optToken ← persist . OAuth2Token . findByUserId ( userId ) 
 result ← optToken . map { token ⇒ 
 - if ( isExpired ( token ) ) refreshToken ( token ) else DBIO . successful ( Some ( token ) ) 
 + if ( isExpired ( token ) ) refreshToken ( userId ) else DBIO . successful ( Some ( token ) ) 
 } getOrElse { 
 val form = FormData ( 
 " code " → code , 
 @ @ - 59 , 14 + 59 , 19 @ @ class GmailProvider ( gmailConfig : OAuth2GmailConfig ) ( 
 } yield result 
 } 
 
 - def refreshToken ( token : models . OAuth2Token ) : DBIO [ Option [ models . OAuth2Token ] ] = { 
 - val form = FormData ( 
 - " client _ id " → gmailConfig . clientId , 
 - " client _ secret " → gmailConfig . clientSecret , 
 - " grant _ type " → " refresh _ token " , 
 - " refresh _ token " → token . refreshToken 
 - ) 
 - fetchToken ( form , token . userId ) 
 + def refreshToken ( userId : String ) : DBIO [ Option [ models . OAuth2Token ] ] = { 
 + for { 
 + optRefresh ← persist . OAuth2Token . findRefreshToken ( userId ) 
 + token ← optRefresh . map { refresh ⇒ 
 + val form = FormData ( 
 + " client _ id " → gmailConfig . clientId , 
 + " client _ secret " → gmailConfig . clientSecret , 
 + " grant _ type " → " refresh _ token " , 
 + " refresh _ token " → refresh . refreshToken . getOrElse ( " " ) 
 + ) 
 + fetchToken ( form , userId ) 
 + } . getOrElse ( DBIO . successful ( None ) ) 
 + } yield token 
 } 
 
 def getAuthUrl ( redirectUrl : String , userId : String ) : Option [ String ] = { 
 diff - - git a / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / Implicits . scala b / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / Implicits . scala 
 index 7d4e9a5 . . eb5c6f7 100644 
 - - - a / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / Implicits . scala 
 + + + b / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / Implicits . scala 
 @ @ - 2 , 21 + 2 , 21 @ @ package im . actor . server . oauth 
 
 import akka . http . scaladsl . unmarshalling . PredefinedFromEntityUnmarshallers . _ 
 import akka . http . scaladsl . unmarshalling . _ 
 - import akka . stream . FlowMaterializer 
 + import akka . stream . Materializer 
 import play . api . libs . functional . syntax . _ 
 import play . api . libs . json . { JsPath , Json , Reads } 
 
 trait Implicits { 
 
 - implicit val flowMaterializer : FlowMaterializer 
 + implicit val materializer : Materializer 
 
 implicit val tokenReads : Reads [ Token ] = 
 ( ( JsPath \ " access _ token " ) . read [ String ] and 
 ( JsPath \ " token _ type " ) . read [ String ] and 
 ( JsPath \ " expires _ in " ) . read [ Long ] and 
 - ( JsPath \ " refresh _ token " ) . read [ String ] ) ( createToken _ ) 
 + ( JsPath \ " refresh _ token " ) . readNullable [ String ] ) ( createToken _ ) 
 
 - private def createToken ( accessToken : String , tokenType : String , expiresIn : Long , refreshToken : String ) = 
 + private def createToken ( accessToken : String , tokenType : String , expiresIn : Long , refreshToken : Option [ String ] ) = 
 Token ( accessToken , tokenType , expiresIn , refreshToken ) 
 
 implicit val toOAuthToken : FromResponseUnmarshaller [ Option [ Token ] ] = Unmarshaller { implicit ec ⇒ resp ⇒ 
 diff - - git a / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / OAuth2Provider . scala b / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / OAuth2Provider . scala 
 index 7c338d9 . . 7304239 100644 
 - - - a / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / OAuth2Provider . scala 
 + + + b / actor - server / actor - oauth / src / main / scala / im / actor / server / oauth / OAuth2Provider . scala 
 @ @ - 10 , 5 + 10 , 5 @ @ trait OAuth2Provider { 
 
 def getAuthUrl ( redirectUrl : String , userId : String ) : Option [ String ] 
 
 - def refreshToken ( token : models . OAuth2Token ) : DBIO [ Option [ models . OAuth2Token ] ] 
 + def refreshToken ( userId : String ) : DBIO [ Option [ models . OAuth2Token ] ] 
 } 
 diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20150618174638 _ _ CreateOAuth2Tokens . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20150618174638 _ _ CreateOAuth2Tokens . sql 
 index 6dd4e4a . . e234511 100644 
 - - - a / actor - server / actor - persist / src / main / resources / sql / migration / V20150618174638 _ _ CreateOAuth2Tokens . sql 
 + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20150618174638 _ _ CreateOAuth2Tokens . sql 
 @ @ - 4 , 7 + 4 , 7 @ @ create table oauth2 _ tokens ( 
 access _ token varchar ( 255 ) not null , 
 token _ type varchar ( 255 ) not null , 
 expires _ in bigint not null , 
 - refresh _ token varchar ( 255 ) not null , 
 - created _ at timestamp , 
 + refresh _ token varchar ( 255 ) , 
 + created _ at timestamp not null , 
 primary key ( id , user _ id ) 
 ) ; 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OAuth2Token . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OAuth2Token . scala 
 index e47fff3 . . b3d95f0 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OAuth2Token . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OAuth2Token . scala 
 @ @ - 12 , 7 + 12 , 7 @ @ class OAuth2TokenTable ( tag : Tag ) extends Table [ models . OAuth2Token ] ( tag , " oauth2 _ 
 def accessToken = column [ String ] ( " access _ token " ) 
 def tokenType = column [ String ] ( " token _ type " ) 
 def expiresIn = column [ Long ] ( " expires _ in " ) 
 - def refreshToken = column [ String ] ( " refresh _ token " ) 
 + def refreshToken = column [ Option [ String ] ] ( " refresh _ token " ) 
 def createdAt = column [ LocalDateTime ] ( " created _ at " ) 
 
 def * = ( id , userId , accessToken , tokenType , expiresIn , refreshToken , createdAt ) < > ( models . OAuth2Token . tupled , models . OAuth2Token . unapply ) 
 @ @ - 27 , 4 + 27 , 7 @ @ object OAuth2Token { 
 def findByUserId ( userId : String ) = 
 tokens . filter ( _ . userId = = = userId ) . sortBy ( _ . createdAt . desc ) . result . headOption 
 
 + def findRefreshToken ( userId : String ) = 
 + tokens . filter ( t ⇒ t . userId = = = userId & & t . refreshToken . isDefined ) . result . headOption 
 + 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthErrors . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthErrors . scala 
 index 75e5e5f . . 61916ca 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthErrors . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthErrors . scala 
 @ @ - 15 , 5 + 15 , 5 @ @ object AuthErrors { 
 val EmailUnoccupied = RpcError ( 400 , " EMAIL _ UNOCCUPIED " , " " , false , None ) 
 val RedirectUrlInvalid = RpcError ( 400 , " REDIRECT _ URL _ INVALID " , " " , false , None ) 
 val NotValidated = RpcError ( 400 , " NOT _ VALIDATED " , " " , false , None ) / / todo : proper name 
 - val FailedToGetOAuth2Token = RpcError ( 400 , " FAILED _ GET _ OAUTH2 _ TOKEN " , " " , false , None ) 
 + val FailedToGetOAuth2Token = RpcError ( 400 , " FAILED _ GET _ OAUTH2 _ TOKEN " , " Authorization server error . " , false , None ) 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 index f92e11e . . 2e73bc1 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 @ @ - 29 , 6 + 29 , 7 @ @ import im . actor . server . session . { SessionMessage , SessionRegion } 
 import im . actor . server . social . SocialManager . _ 
 import im . actor . server . util . IdUtils . _ 
 import im . actor . server . util . PhoneNumber . _ 
 + import im . actor . server . util . StringUtils . validName 
 import im . actor . server . util . _ 
 import im . actor . server . { persist , models } 
 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala 
 index 233c166 . . f9cf776 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / Helpers . scala 
 @ @ - 18 , 7 + 18 , 7 @ @ private [ auth ] trait Helpers extends PublicKeyHelpers { 
 
 def validEmail ( email : String ) : \ / [ NonEmptyList [ String ] , String ] = 
 StringUtils . nonEmptyString ( email ) . flatMap ( matchesEmail ) 
 - 
 + 
 def validPublicKey ( k : Array [ Byte ] ) : \ / [ NonEmptyList [ String ] , Array [ Byte ] ] = 
 if ( k . isEmpty ) " Should be nonempty " . wrapNel . left else k . right 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala 
 index f5b1de0 . . ec12860 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala 
 @ @ - 779 , 7 + 779 , 7 @ @ object DummyOAuth2Server { 
 import akka . http . scaladsl . server . Directives . _ 
 import akka . http . scaladsl . server . Route 
 import akka . http . scaladsl . unmarshalling . PredefinedFromEntityUnmarshallers . _ 
 - import akka . stream . FlowMaterializer 
 + import akka . stream . Materializer 
 import org . apache . commons . codec . digest . DigestUtils 
 
 val config = OAuth2GmailConfig ( 
 @ @ - 803 , 7 + 803 , 7 @ @ object DummyOAuth2Server { 
 def start ( ) ( 
 implicit 
 system : ActorSystem , 
 - materializer : FlowMaterializer 
 + materializer : Materializer 
 ) : Unit = { 
 
 implicit val ec : ExecutionContext = system . dispatcher
