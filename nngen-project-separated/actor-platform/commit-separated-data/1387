BLEU SCORE: 0.3187271473320672

TEST MSG: feat ( server : bots ) : add sticker new api impl , send updates on sticker pack change
GENERATED MSG: feat ( server : bots ) : sticker bot support

TEST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > index 07964fe . . 1f547a8 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > @ @ - 26 , 6 + 26 , 7 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , < nl > private val usersService = new UsersBotService ( system ) < nl > private val groupsService = new GroupsBotService ( system ) < nl > private val stickersService = new StickersBotService ( system ) < nl > + private val filesService = new FilesBotService ( system ) < nl > < nl > private val log = Logging ( system , getClass ) < nl > < nl > @ @ - 87 , 5 + 88 , 6 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , < nl > case Services . Users ⇒ usersService < nl > case Services . Groups ⇒ groupsService < nl > case Services . Stickers ⇒ stickersService < nl > + case Services . Files ⇒ filesService < nl > } < nl > } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / FilesBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / FilesBotService . scala < nl > new file mode 100644 < nl > index 0000000 . . a048193 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / FilesBotService . scala < nl > @ @ - 0 , 0 + 1 , 49 @ @ < nl > + package im . actor . server . bot . services < nl > + < nl > + import java . nio . file . Files < nl > + < nl > + import akka . actor . ActorSystem < nl > + import im . actor . bots . BotMessages . _ < nl > + import im . actor . concurrent . FutureResultCats < nl > + import im . actor . server . acl . ACLUtils < nl > + import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . file . FileStorageExtension < nl > + import im . actor . server . persist . FileRepo < nl > + < nl > + private [ bot ] object FilesBotErrors { < nl > + val LocationInvalid = BotError ( 400 , " LOCATION _ INVALID " ) < nl > + val Forbidden = BotError ( 403 , " FORBIDDEN " ) < nl > + val DownloadFailed = BotError ( 500 , " DOWNLOAD _ FAILED " ) < nl > + val FileTooBig = BotError ( 400 , " FILE _ TOO _ BIG " ) < nl > + } < nl > + < nl > + private [ bot ] final class FilesBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResultCats [ BotError ] with ApiToBotConversions { < nl > + < nl > + import FilesBotErrors . _ < nl > + < nl > + private implicit val system : ActorSystem = _ system < nl > + import system . dispatcher < nl > + < nl > + private val fsAdapter = FileStorageExtension ( system ) . fsAdapter < nl > + private val db = DbExtension ( system ) . db < nl > + < nl > + private val MaxSize = 1024 * 1024 * 5 / / 5Mb < nl > + < nl > + override def handlers : Handlers = { < nl > + case DownloadFile ( location ) ⇒ downloadFile ( location ) . toWeak < nl > + } < nl > + < nl > + private def downloadFile ( location : FileLocation ) = RequestHandler [ DownloadFile , DownloadFile # Response ] { < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ < nl > + ifIsAdmin ( botUserId ) { < nl > + ( for { < nl > + f ← fromFutureOption ( LocationInvalid ) ( db . run ( FileRepo . find ( location . fileId ) ) ) < nl > + _ ← fromBoolean ( Forbidden ) ( location . accessHash = = ACLUtils . fileAccessHash ( f . id , f . accessSalt ) ) < nl > + _ ← fromBoolean ( FileTooBig ) ( f . size < = MaxSize ) < nl > + file ← fromFutureOption ( DownloadFailed ) ( fsAdapter . downloadFileF ( f . id ) ) < nl > + } yield ResponseDownloadFile ( Files . readAllBytes ( file . toPath ) ) ) . value < nl > + } < nl > + } < nl > + < nl > + } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala < nl > index cbe78db . . 75af247 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala < nl > @ @ - 1 , 12 + 1 , 18 @ @ < nl > package im . actor . server . bot . services < nl > < nl > import akka . actor . ActorSystem < nl > + import akka . stream . { Materializer , ActorMaterializer } < nl > + import akka . util . ByteString < nl > import im . actor . bots . BotMessages . _ < nl > import im . actor . concurrent . FutureResultCats < nl > import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } < nl > - import im . actor . server . file . { FileStorageAdapter , FileStorageExtension , ImageUtils } < nl > + import im . actor . server . file . { FileStorageAdapter , FileStorageExtension , FileUtils } < nl > + import im . actor . server . sticker . { Sticker , StickerImage } < nl > import im . actor . server . stickers . { StickerErrors , StickersExtension } < nl > < nl > + import scala . concurrent . Future < nl > + import scala . util . Try < nl > + < nl > private [ bot ] object StickersBotErrors { < nl > val LocationInvalid = BotError ( 400 , " LOCATION _ INVALID " ) < nl > val NotAllowedToEdit = BotError ( 403 , " NOT _ ALLOWED _ TO _ EDIT " ) < nl > @ @ - 29 , 25 + 35 , 31 @ @ private [ bot ] object StickersBotErrors { < nl > < nl > private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResultCats [ BotError ] with ApiToBotConversions { < nl > < nl > - import ImageUtils . _ < nl > import StickersBotErrors . _ < nl > < nl > private implicit val system : ActorSystem = _ system < nl > import system . dispatcher < nl > + private implicit val mat : Materializer = ActorMaterializer ( ) < nl > < nl > private val stickerExt = StickersExtension ( system ) < nl > - private implicit val fsAdapter : FileStorageAdapter = FileStorageExtension ( system ) . fsAdapter < nl > + private val fsAdapter : FileStorageAdapter = FileStorageExtension ( system ) . fsAdapter < nl > < nl > override def handlers : Handlers = { < nl > - case CreateStickerPack ( userId ) ⇒ createStickerPack ( userId ) . toWeak < nl > - case AddSticker ( ownerUserId , packId , emoji , fileLocation ) ⇒ addSticker ( ownerUserId , packId , emoji , fileLocation ) . toWeak < nl > - case ShowStickerPacks ( ownerUserId ) ⇒ showStickerPacks ( ownerUserId ) . toWeak < nl > - case ShowStickers ( ownerUserId , packId ) ⇒ showStickers ( ownerUserId , packId ) . toWeak < nl > - case DeleteSticker ( ownerUserId , packId , stickerId ) ⇒ deleteSticker ( ownerUserId , packId , stickerId ) . toWeak < nl > + case CreateStickerPack ( userId ) ⇒ createStickerPack ( userId ) . toWeak < nl > + case AddSticker ( ownerUserId , packId , emoji , < nl > + small , smallW , smallH , < nl > + medium , mediumW , mediumH , < nl > + large , largeW , largeH ) ⇒ addSticker ( ownerUserId , packId , emoji , < nl > + small , smallW , smallH , < nl > + medium , mediumW , mediumH , < nl > + large , largeW , largeH ) . toWeak < nl > + case ShowStickerPacks ( ownerUserId ) ⇒ showStickerPacks ( ownerUserId ) . toWeak < nl > + case ShowStickers ( ownerUserId , packId ) ⇒ showStickers ( ownerUserId , packId ) . toWeak < nl > + case DeleteSticker ( ownerUserId , packId , stickerId ) ⇒ deleteSticker ( ownerUserId , packId , stickerId ) . toWeak < nl > < nl > / / ! ! ! requires admin rights from peer user ! ! ! < nl > - case MakeStickerPackDefault ( userId , packId ) ⇒ makeStickerPackDefault ( userId , packId ) . toWeak < nl > - case UnmakeStickerPackDefault ( userId , packId ) ⇒ unmakeStickerPackDefault ( userId , packId ) . toWeak < nl > + case MakeStickerPackDefault ( userId , packId ) ⇒ makeStickerPackDefault ( userId , packId ) . toWeak < nl > + case UnmakeStickerPackDefault ( userId , packId ) ⇒ unmakeStickerPackDefault ( userId , packId ) . toWeak < nl > } < nl > < nl > private def createStickerPack ( userId : Int ) = RequestHandler [ CreateStickerPack , CreateStickerPack # Response ] { < nl > @ @ - 59 , 16 + 71 , 24 @ @ private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotSer < nl > } < nl > } < nl > < nl > - private def addSticker ( ownerUserId : Int , packId : Int , emoji : Option [ String ] , fileLocation : FileLocation ) = RequestHandler [ AddSticker , AddSticker # Response ] { < nl > - ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ < nl > - ifIsAdmin ( botUserId ) { < nl > - ( for { < nl > - _ ← fromFutureBoolean ( NotAllowedToEdit ) ( stickerExt . isOwner ( ownerUserId , packId ) ) < nl > - sticker ← fromFutureEither ( _ ⇒ LocationInvalid ) ( scaleStickerF ( fileLocation . fileId ) ) < nl > - _ ← fromFutureXor ( catchStickerErrors ) ( stickerExt . addSticker ( ownerUserId , packId , emoji , sticker ) ) < nl > - } yield Void ) . value < nl > - } < nl > - } < nl > + private def addSticker ( ownerUserId : Int , packId : Int , emoji : Option [ String ] , < nl > + smallBytes : Array [ Byte ] , smallW : Int , smallH : Int , < nl > + mediumBytes : Array [ Byte ] , mediumW : Int , mediumH : Int , < nl > + largeBytes : Array [ Byte ] , largeW : Int , largeH : Int ) = < nl > + RequestHandler [ AddSticker , AddSticker # Response ] { < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ < nl > + ifIsAdmin ( botUserId ) { < nl > + ( for { < nl > + _ ← fromFutureBoolean ( NotAllowedToEdit ) ( stickerExt . isOwner ( ownerUserId , packId ) ) < nl > + sticker ← fromFuture ( for { < nl > + small ← uploadSticker ( " small - sticker . webp " , smallBytes , smallW , smallH ) < nl > + medium ← uploadSticker ( " medium - sticker . webp " , mediumBytes , mediumW , mediumH ) < nl > + large ← uploadSticker ( " large - sticker . webp " , largeBytes , largeW , largeH ) < nl > + } yield Sticker ( small , medium , large ) ) < nl > + _ ← fromFutureXor ( catchStickerErrors ) ( stickerExt . addSticker ( ownerUserId , packId , emoji , sticker ) ) < nl > + } yield Void ) . value < nl > + } < nl > + } < nl > < nl > def showStickerPacks ( ownerUserId : Int ) = RequestHandler [ ShowStickerPacks , ShowStickerPacks # Response ] { < nl > ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ < nl > @ @ - 119 , 4 + 139 , 10 @ @ private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotSer < nl > } < nl > } < nl > < nl > + private def uploadSticker ( name : String , bytes : Array [ Byte ] , w : Int , h : Int ) : Future [ Option [ StickerImage ] ] = < nl > + Try ( for { < nl > + ( path , size ) ← FileUtils . writeBytes ( ByteString ( bytes ) ) < nl > + fileLocation ← fsAdapter . uploadFileF ( name , path . toFile ) < nl > + } yield Some ( StickerImage ( fileLocation , w , h , size ) ) ) . toOption getOrElse Future . successful ( None ) < nl > + < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / protobuf / sticker . proto b / actor - server / actor - core / src / main / protobuf / sticker . proto < nl > new file mode 100644 < nl > index 0000000 . . 5503217 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / protobuf / sticker . proto < nl > @ @ - 0 , 0 + 1 , 18 @ @ < nl > + syntax = " proto2 " ; < nl > + < nl > + package im . actor . server ; < nl > + < nl > + import " file . proto " ; < nl > + < nl > + message StickerImage { < nl > + required FileLocation file _ location = 1 ; < nl > + required int32 width = 2 ; < nl > + required int32 height = 3 ; < nl > + required int64 file _ size = 4 ; < nl > + } < nl > + < nl > + message Sticker { < nl > + optional StickerImage small = 1 ; < nl > + optional StickerImage medium = 2 ; < nl > + optional StickerImage large = 3 ; < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickerMessages . scala b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickerMessages . scala < nl > new file mode 100644 < nl > index 0000000 . . d7db95e < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickerMessages . scala < nl > @ @ - 0 , 0 + 1 , 12 @ @ < nl > + package im . actor . server . stickers < nl > + < nl > + import im . actor . serialization . ActorSerializer < nl > + import im . actor . server . sticker . { Sticker , StickerImage } < nl > + < nl > + object StickerMessages { < nl > + def register ( ) : Unit = < nl > + ActorSerializer . register ( < nl > + 100001 → classOf [ Sticker ] , < nl > + 100002 → classOf [ StickerImage ] < nl > + ) < nl > + } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala < nl > index d181983 . . 0ad008c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala < nl > @ @ - 2 , 14 + 2 , 17 @ @ package im . actor . server . stickers < nl > < nl > import akka . actor . _ < nl > import cats . data . Xor < nl > + import im . actor . api . rpc . stickers . { ApiStickerCollection , UpdateOwnStickersChanged , UpdateStickerCollectionsChanged } < nl > import im . actor . concurrent . FutureResultCats < nl > import im . actor . server . acl . ACLUtils < nl > import im . actor . server . db . DbExtension < nl > - import im . actor . server . file . Avatar < nl > import im . actor . server . model . { StickerData , StickerPack } < nl > - import im . actor . server . persist . { StickerDataRepo , OwnStickerPackRepo , StickerPackRepo } < nl > + import im . actor . server . persist . { OwnStickerPackRepo , StickerDataRepo , StickerPackRepo , UserRepo } < nl > + import im . actor . server . sequence . SeqUpdatesExtension < nl > + import im . actor . server . sticker . Sticker < nl > import im . actor . server . user . UserExtension < nl > import im . actor . util . misc . IdUtils < nl > + import slick . dbio . DBIO < nl > < nl > import scala . concurrent . Future < nl > import scala . concurrent . forkjoin . ThreadLocalRandom < nl > @ @ - 31 , 7 + 34 , 12 @ @ object StickerErrors { < nl > < nl > sealed trait StickersExtension extends Extension < nl > < nl > - final class StickersExtensionImpl ( _ system : ActorSystem ) extends StickersExtension with FutureResultCats [ StickerError ] { < nl > + final class StickersExtensionImpl ( _ system : ActorSystem ) < nl > + extends StickersExtension < nl > + with FutureResultCats [ StickerError ] < nl > + with StickersImplicitConversions { < nl > + < nl > + StickerMessages . register ( ) < nl > < nl > import StickerErrors . _ < nl > < nl > @ @ - 40 , 6 + 48 , 7 @ @ final class StickersExtensionImpl ( _ system : ActorSystem ) extends StickersExtensio < nl > < nl > private val db = DbExtension ( system ) . db < nl > private val userExt = UserExtension ( system ) < nl > + private val seqExt = SeqUpdatesExtension ( system ) < nl > < nl > def createPack ( creatorUserId : Int , isDefault : Boolean ) : Future [ Int ] = { < nl > val rng = ThreadLocalRandom . current ( ) < nl > @ @ - 48 , 17 + 57 , 20 @ @ final class StickersExtensionImpl ( _ system : ActorSystem ) extends StickersExtensio < nl > db . run ( for { < nl > _ ← StickerPackRepo . create ( StickerPack ( packId , accessSalt , creatorUserId , isDefault ) ) < nl > _ ← OwnStickerPackRepo . create ( creatorUserId , packId ) < nl > + collections ← getOwnApiStickerPacks ( creatorUserId ) < nl > + _ ← DBIO . from ( seqExt . deliverSingleUpdate ( creatorUserId , UpdateOwnStickersChanged ( collections ) ) ) < nl > } yield packId ) < nl > } < nl > < nl > def isOwner ( userId : Int , packId : Int ) : Future [ Boolean ] = db . run ( StickerPackRepo . exists ( userId , packId ) ) < nl > < nl > - def addSticker ( ownerUserId : Int , packId : Int , emoji : Option [ String ] , resizedSticker : Avatar ) : Future [ StickerError Xor Unit ] = < nl > + def addSticker ( ownerUserId : Int , packId : Int , emoji : Option [ String ] , resizedSticker : Sticker ) : Future [ StickerError Xor Unit ] = < nl > ( for { < nl > - _ ← fromFutureBoolean ( NotFound ) ( db . run ( StickerPackRepo . exists ( ownerUserId , packId ) ) ) < nl > - image128 ← fromOption ( NoPreview ) ( resizedSticker . smallImage ) < nl > - image256 = resizedSticker . largeImage < nl > - image512 = resizedSticker . fullImage < nl > + pack ← fromFutureOption ( NotFound ) ( db . run ( StickerPackRepo . find ( packId ) ) ) < nl > + _ ← fromBoolean ( NotFound ) ( pack . ownerUserId = = ownerUserId ) < nl > + image128 ← fromOption ( NoPreview ) ( resizedSticker . small ) < nl > + image256 = resizedSticker . medium < nl > + image512 = resizedSticker . large < nl > sticker = StickerData ( id = IdUtils . nextIntId ( ) , packId , emoji , < nl > image128FileId = image128 . fileLocation . fileId , < nl > image128FileHash = image128 . fileLocation . accessHash , < nl > @ @ - 70 , 6 + 82 , 9 @ @ final class StickersExtensionImpl ( _ system : ActorSystem ) extends StickersExtensio < nl > image512FileHash = image512 map ( _ . fileLocation . accessHash ) , < nl > image512FileSize = image512 map ( _ . fileSize ) ) < nl > _ ← fromFuture ( db . run ( StickerDataRepo . create ( sticker ) ) ) < nl > + packUserIds ← fromFuture ( db . run ( getPackUserIds ( pack ) ) ) < nl > + apiPack ← fromFuture ( db . run ( getApiStickerPack ( pack ) ) ) < nl > + _ ← fromFuture ( seqExt . broadcastSingleUpdate ( packUserIds . toSet , UpdateStickerCollectionsChanged ( Vector ( apiPack ) ) ) ) < nl > } yield ( ) ) . value < nl > < nl > def getStickerPacks ( ownerUserId : Int ) : Future [ Seq [ StickerPack ] ] = < nl > @ @ - 84 , 10 + 99 , 33 @ @ final class StickersExtensionImpl ( _ system : ActorSystem ) extends StickersExtensio < nl > < nl > def deleteSticker ( ownerUserId : Int , packId : Int , stickerId : Int ) : Future [ StickerError Xor Unit ] = < nl > ( for { < nl > - _ ← fromFutureBoolean ( NotFound ) ( db . run ( StickerPackRepo . exists ( ownerUserId , packId ) ) ) < nl > + pack ← fromFutureOption ( NotFound ) ( db . run ( StickerPackRepo . find ( packId ) ) ) < nl > + _ ← fromBoolean ( NotFound ) ( pack . ownerUserId = = ownerUserId ) < nl > _ ← fromFuture ( db . run ( StickerDataRepo . delete ( packId , stickerId ) ) ) < nl > + packUserIds ← fromFuture ( db . run ( getPackUserIds ( pack ) ) ) < nl > + apiPack ← fromFuture ( db . run ( getApiStickerPack ( pack ) ) ) < nl > + _ ← fromFuture ( seqExt . broadcastSingleUpdate ( packUserIds . toSet , UpdateStickerCollectionsChanged ( Vector ( apiPack ) ) ) ) < nl > } yield ( ) ) . value < nl > < nl > + def getPackUserIds ( pack : StickerPack ) : DBIO [ Seq [ Int ] ] = < nl > + if ( pack . isDefault ) < nl > + UserRepo . activeUsersIds < nl > + else OwnStickerPackRepo . findUserIds ( pack . id ) < nl > + < nl > + def getApiStickerPack ( pack : StickerPack ) : DBIO [ ApiStickerCollection ] = < nl > + for { < nl > + stickers ← StickerDataRepo . findByPack ( pack . id ) < nl > + } yield ApiStickerCollection ( pack . id , ACLUtils . stickerPackAccessHash ( pack ) , stickers ) < nl > + < nl > + def getOwnApiStickerPacks ( userId : Int ) : DBIO [ Vector [ ApiStickerCollection ] ] = < nl > + for { < nl > + packIds ← OwnStickerPackRepo . findPackIds ( userId ) < nl > + packs ← StickerPackRepo . find ( packIds ) < nl > + stickerCollections ← DBIO . sequence ( packs . toVector map { pack ⇒ < nl > + for ( stickers ← StickerDataRepo . findByPack ( pack . id ) ) yield ApiStickerCollection ( pack . id , ACLUtils . stickerPackAccessHash ( pack ) , stickers ) < nl > + } ) < nl > + } yield stickerCollections < nl > + < nl > def makeStickerPackDefault ( userId : Int , packId : Int ) : Future [ StickerError Xor Unit ] = < nl > toggleDefault ( userId , packId , toggleTo = true ) < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersImplicitConversions . scala b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersImplicitConversions . scala < nl > new file mode 100644 < nl > index 0000000 . . e9f3ff1 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersImplicitConversions . scala < nl > @ @ - 0 , 0 + 1 , 34 @ @ < nl > + package im . actor . server . stickers < nl > + < nl > + import im . actor . api . rpc . files . { ApiFileLocation , ApiImageLocation } < nl > + import im . actor . api . rpc . stickers . ApiStickerDescriptor < nl > + import im . actor . server . model . StickerData < nl > + < nl > + import scala . language . implicitConversions < nl > + < nl > + trait StickersImplicitConversions { < nl > + < nl > + implicit def stickerToApi ( s : StickerData ) : ApiStickerDescriptor = { < nl > + ApiStickerDescriptor ( < nl > + s . id , < nl > + s . emoji , < nl > + imageLocation ( s . image128FileId , s . image128FileHash , 128 , s . image128FileSize ) , < nl > + optImageLocation ( s . image512FileId , s . image512FileHash , 512 , s . image512FileSize ) , < nl > + optImageLocation ( s . image256FileId , s . image256FileHash , 256 , s . image256FileSize ) < nl > + ) < nl > + } < nl > + < nl > + implicit def stickerToApi ( stickers : Seq [ StickerData ] ) : IndexedSeq [ ApiStickerDescriptor ] = < nl > + stickers . toVector map stickerToApi < nl > + < nl > + private def imageLocation ( fileId : Long , fileHash : Long , side : Int , fileSize : Long ) : ApiImageLocation = < nl > + ApiImageLocation ( ApiFileLocation ( fileId , fileHash ) , side , side , fileSize . toInt ) < nl > + < nl > + private def optImageLocation ( fileId : Option [ Long ] , fileHash : Option [ Long ] , side : Int , fileSize : Option [ Long ] ) : Option [ ApiImageLocation ] = < nl > + for { < nl > + id ← fileId < nl > + hash ← fileHash < nl > + size ← fileSize < nl > + } yield imageLocation ( id , hash , side , size ) < nl > + < nl > + } < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OwnStickerPackRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OwnStickerPackRepo . scala < nl > index c37a529 . . 4a031ab 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OwnStickerPackRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OwnStickerPackRepo . scala < nl > @ @ - 24 , 6 + 24 , 8 @ @ object OwnStickerPackRepo { < nl > < nl > def findPackIds ( userId : Int ) : DBIO [ Seq [ Int ] ] = ownStickerPacks . filter ( _ . userId = = = userId ) . map ( _ . packId ) . result < nl > < nl > + def findUserIds ( packId : Int ) : DBIO [ Seq [ Int ] ] = ownStickerPacks . filter ( _ . packId = = = packId ) . map ( _ . userId ) . result < nl > + < nl > def exists ( userId : Int , packId : Int ) : DBIO [ Boolean ] = < nl > ownStickerPacks . filter ( p ⇒ p . userId = = = userId & & p . packId = = = packId ) . exists . result < nl > < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stickers / ImplicitConversions . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stickers / ImplicitConversions . scala < nl > deleted file mode 100644 < nl > index 8f347c3 . . 0000000 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stickers / ImplicitConversions . scala < nl > + + + / dev / null < nl > @ @ - 1 , 34 + 0 , 0 @ @ < nl > - package im . actor . server . api . rpc . service . stickers < nl > - < nl > - import im . actor . api . rpc . files . { ApiFileLocation , ApiImageLocation } < nl > - import im . actor . api . rpc . stickers . ApiStickerDescriptor < nl > - import im . actor . server . model . StickerData < nl > - < nl > - import scala . language . implicitConversions < nl > - < nl > - trait ImplicitConversions { < nl > - < nl > - implicit def stickerToApi ( s : StickerData ) : ApiStickerDescriptor = { < nl > - ApiStickerDescriptor ( < nl > - s . id , < nl > - s . emoji , < nl > - imageLocation ( s . image128FileId , s . image128FileHash , 128 , s . image128FileSize ) , < nl > - optImageLocation ( s . image512FileId , s . image512FileHash , 512 , s . image512FileSize ) , < nl > - optImageLocation ( s . image256FileId , s . image256FileHash , 256 , s . image256FileSize ) < nl > - ) < nl > - } < nl > - < nl > - implicit def stickerToApi ( stickers : Seq [ StickerData ] ) : IndexedSeq [ ApiStickerDescriptor ] = < nl > - stickers . toVector map stickerToApi < nl > - < nl > - private def imageLocation ( fileId : Long , fileHash : Long , side : Int , fileSize : Long ) : ApiImageLocation = < nl > - ApiImageLocation ( ApiFileLocation ( fileId , fileHash ) , side , side , fileSize . toInt ) < nl > - < nl > - private def optImageLocation ( fileId : Option [ Long ] , fileHash : Option [ Long ] , side : Int , fileSize : Option [ Long ] ) : Option [ ApiImageLocation ] = < nl > - for { < nl > - id ← fileId < nl > - hash ← fileHash < nl > - size ← fileSize < nl > - } yield imageLocation ( id , hash , side , size ) < nl > - < nl > - } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stickers / StickersServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stickers / StickersServiceImpl . scala < nl > index b4718c7 . . 2ac8cbe 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stickers / StickersServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stickers / StickersServiceImpl . scala < nl > @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . server . acl . ACLUtils . stickerPackAccessHash < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . persist < nl > import im . actor . server . sequence . { SeqState , SeqUpdatesExtension } < nl > + import im . actor . server . stickers . { StickersImplicitConversions , StickersExtension } < nl > import slick . dbio . DBIO < nl > < nl > import scala . concurrent . { ExecutionContext , Future } < nl > @ @ - 19 , 7 + 20 , 7 @ @ object StickerPackErrors { < nl > val CantRemoveDefaultPack = RpcError ( 400 , " CANT _ REMOVE _ DEFAULT _ PACK " , " You can ' t remove default pack " , false , None ) < nl > } < nl > < nl > - class StickersServiceImpl ( implicit actorSystem : ActorSystem ) extends StickersService with ImplicitConversions { < nl > + class StickersServiceImpl ( implicit actorSystem : ActorSystem ) extends StickersService with StickersImplicitConversions { < nl > < nl > import FutureResultRpcCats . _ < nl > import StickerPackErrors . _ < nl > @ @ - 28 , 6 + 29 , 7 @ @ class StickersServiceImpl ( implicit actorSystem : ActorSystem ) extends StickersSer < nl > < nl > private val db = DbExtension ( actorSystem ) . db < nl > private val seqUpdExt = SeqUpdatesExtension ( actorSystem ) < nl > + private val stickersExt = StickersExtension ( actorSystem ) < nl > < nl > override def jhandleLoadStickerCollection ( id : Int , accessHash : Long , clientData : ClientData ) : Future [ HandlerResult [ ResponseLoadStickerCollection ] ] = < nl > authorized ( clientData ) { client ⇒ < nl > @ @ - 46 , 7 + 48 , 7 @ @ class StickersServiceImpl ( implicit actorSystem : ActorSystem ) extends StickersSer < nl > _ ← fromBoolean ( CantRemoveDefaultPack ) ( ! pack . isDefault ) < nl > _ ← fromFutureBoolean ( AlreadyRemoved ) ( db . run ( persist . OwnStickerPackRepo . exists ( client . userId , pack . id ) map ! = ) ) < nl > _ ← fromFuture ( db . run ( persist . OwnStickerPackRepo . delete ( client . userId , pack . id ) ) ) < nl > - stickers ← fromFuture ( db . run ( getOwnStickerPacks ( client . userId ) ) ) < nl > + stickers ← fromFuture ( db . run ( stickersExt . getOwnApiStickerPacks ( client . userId ) ) ) < nl > seqState ← fromFuture ( seqUpdExt . deliverSingleUpdate ( client . userId , UpdateOwnStickersChanged ( stickers ) ) ) < nl > SeqState ( seq , state ) = seqState < nl > } yield ResponseStickersReponse ( stickers , seq , state . toByteArray ) ) . value map ( _ . toScalaz ) < nl > @ @ - 60 , 7 + 62 , 7 @ @ class StickersServiceImpl ( implicit actorSystem : ActorSystem ) extends StickersSer < nl > _ ← fromBoolean ( CantAddDefaultPack ) ( ! pack . isDefault ) < nl > _ ← fromFutureBoolean ( AlreadyAdded ) ( db . run ( persist . OwnStickerPackRepo . exists ( client . userId , pack . id ) ) ) < nl > _ ← fromFuture ( db . run ( persist . OwnStickerPackRepo . create ( client . userId , pack . id ) ) ) < nl > - stickers ← fromFuture ( db . run ( getOwnStickerPacks ( client . userId ) ) ) < nl > + stickers ← fromFuture ( db . run ( stickersExt . getOwnApiStickerPacks ( client . userId ) ) ) < nl > seqState ← fromFuture ( seqUpdExt . deliverSingleUpdate ( client . userId , UpdateOwnStickersChanged ( stickers ) ) ) < nl > SeqState ( seq , state ) = seqState < nl > } yield ResponseStickersReponse ( stickers , seq , state . toByteArray ) ) . value map ( _ . toScalaz ) < nl > @ @ - 68 , 18 + 70 , 9 @ @ class StickersServiceImpl ( implicit actorSystem : ActorSystem ) extends StickersSer < nl > < nl > override def jhandleLoadOwnStickers ( clientData : ClientData ) : Future [ HandlerResult [ ResponseLoadOwnStickers ] ] = { < nl > val action = requireAuth ( clientData ) map { implicit client ⇒ < nl > - getOwnStickerPacks ( client . userId ) map ( stickers ⇒ Ok ( ResponseLoadOwnStickers ( stickers ) ) ) < nl > + stickersExt . getOwnApiStickerPacks ( client . userId ) map ( stickers ⇒ Ok ( ResponseLoadOwnStickers ( stickers ) ) ) < nl > } < nl > db . run ( toDBIOAction ( action ) ) < nl > } < nl > < nl > - private def getOwnStickerPacks ( userId : Int ) : DBIO [ Vector [ ApiStickerCollection ] ] = < nl > - for { < nl > - packIds ← persist . OwnStickerPackRepo . findPackIds ( userId ) < nl > - packs ← persist . StickerPackRepo . find ( packIds ) < nl > - stickerCollections ← DBIO . sequence ( packs . toVector map { pack ⇒ < nl > - for ( stickers ← persist . StickerDataRepo . findByPack ( pack . id ) ) yield ApiStickerCollection ( pack . id , stickerPackAccessHash ( pack ) , stickers ) < nl > - } ) < nl > - } yield stickerCollections < nl > - < nl > } < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 446b2ee . . 4acac22 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 41 , 6 + 41 , 7 @ @ import im . actor . server . sequence . _ < nl > import im . actor . server . session . { Session , SessionConfig , SessionMessage } < nl > import im . actor . server . sms . { TelesignCallEngine , TelesignClient , TelesignSmsEngine } < nl > import im . actor . server . social . SocialExtension < nl > + import im . actor . server . stickers . StickerMessages < nl > import im . actor . server . user . _ < nl > import kamon . Kamon < nl > < nl > @ @ - 84 , 6 + 85 , 7 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > UserProcessor . register ( ) < nl > GroupProcessor . register ( ) < nl > DialogProcessor . register ( ) < nl > + StickerMessages . register ( ) < nl > < nl > val serverConfig = ActorConfig . load ( defaultConfig ) < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / stickers / StickersExtensionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / stickers / StickersExtensionSpec . scala < nl > index 10ee1bd . . 4b1e782 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / stickers / StickersExtensionSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / stickers / StickersExtensionSpec . scala < nl > @ @ - 1 , 7 + 1 , 7 @ @ < nl > package im . actor . server . stickers < nl > < nl > import cats . data . Xor < nl > - import im . actor . server . file . { AvatarImage , Avatar } < nl > + import im . actor . server . sticker . { Sticker , StickerImage } < nl > import im . actor . server . user . UserExtension < nl > import im . actor . server . { ImplicitSessionRegion , ImplicitAuthService , BaseAppSuite } < nl > import im . actor . util . misc . IdUtils < nl > @ @ - 193 , 6 + 193 , 6 @ @ class StickersExtensionSpec < nl > } < nl > < nl > private def addDummy ( userId : Int , packId : Int ) = < nl > - stickersExt . addSticker ( userId , packId , None , Avatar ( Some ( AvatarImage ( ) ) , None , None ) ) < nl > + stickersExt . addSticker ( userId , packId , None , Sticker ( Some ( StickerImage ( ) ) , None , None ) ) < nl > < nl > } < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index 01ba19c . . 30142dd 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import sbt . _ < nl > object Dependencies { < nl > object V { < nl > val actorCommons = " 0 . 0 . 8 " < nl > - val actorBotkit = " 1 . 0 . 60 " < nl > + val actorBotkit = " 1 . 0 . 66 " < nl > val akka = " 2 . 4 . 0 " < nl > val akkaExperimental = " 2 . 0 - M1 " < nl > val cats = " 0 . 2 . 0 "
NEAREST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala < nl > index 8162272 . . 83be924 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala < nl > @ @ - 57 , 8 + 57 , 9 @ @ trait ApiToBotConversions { < nl > thumb , < nl > ext ) ⇒ DocumentMessage ( fileId , accessHash , fileSize . toLong , name , mimeType , thumb , ext ) < nl > case ApiServiceMessage ( text , _ ) ⇒ ServiceMessage ( text ) < nl > - case _ : ApiStickerMessage ⇒ UnsupportedMessage < nl > - case _ : ApiUnsupportedMessage ⇒ UnsupportedMessage < nl > + case ApiStickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) ⇒ < nl > + StickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) < nl > + case _ : ApiUnsupportedMessage ⇒ UnsupportedMessage < nl > } < nl > < nl > implicit def toTextModernAttach ( ma : ApiTextModernAttach ) : TextModernAttach = < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > index 2432bf1 . . 07964fe 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > @ @ - 25 , 6 + 25 , 7 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , < nl > private val webhooksService = new WebHooksBotService ( system ) < nl > private val usersService = new UsersBotService ( system ) < nl > private val groupsService = new GroupsBotService ( system ) < nl > + private val stickersService = new StickersBotService ( system ) < nl > < nl > private val log = Logging ( system , getClass ) < nl > < nl > @ @ - 85 , 5 + 86 , 6 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , < nl > case Services . WebHooks ⇒ webhooksService < nl > case Services . Users ⇒ usersService < nl > case Services . Groups ⇒ groupsService < nl > + case Services . Stickers ⇒ stickersService < nl > } < nl > } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala < nl > index bdb1189 . . 8b547e3 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala < nl > @ @ - 74 , 6 + 74 , 12 @ @ trait BotToApiConversions { < nl > implicit def toColor ( color : Option [ Color ] ) : Option [ ApiColor ] = < nl > color map toColor < nl > < nl > + implicit def toImageLocation ( il : ImageLocation ) : ApiImageLocation = < nl > + ApiImageLocation ( il . fileLocation , il . width , il . height , il . fileSize ) < nl > + < nl > + implicit def toImageLocation ( il : Option [ ImageLocation ] ) : Option [ ApiImageLocation ] = < nl > + il map toImageLocation < nl > + < nl > implicit def toMessage ( message : MessageBody ) : ApiMessage = < nl > message match { < nl > case TextMessage ( text , ext ) ⇒ ApiTextMessage ( text , Vector . empty , ext ) < nl > @ @ - 86 , 6 + 92 , 8 @ @ trait BotToApiConversions { < nl > mimeType , < nl > thumb , < nl > ext ) ⇒ ApiDocumentMessage ( fileId , accessHash , fileSize . toInt , name , mimeType , thumb , ext ) < nl > + case StickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) ⇒ < nl > + ApiStickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) < nl > case ServiceMessage ( _ ) ⇒ throw new RuntimeException ( " Service messages are not supported " ) < nl > case UnsupportedMessage ⇒ ApiUnsupportedMessage < nl > } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala < nl > new file mode 100644 < nl > index 0000000 . . dc6a385 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala < nl > @ @ - 0 , 0 + 1 , 52 @ @ < nl > + package im . actor . server . bot . services < nl > + < nl > + import akka . actor . ActorSystem < nl > + import im . actor . bots . BotMessages . _ < nl > + import im . actor . concurrent . FutureResultCats < nl > + import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } < nl > + import im . actor . server . file . { S3StorageExtension , S3StorageAdapter , ImageUtils } < nl > + import im . actor . server . stickers . { StickerErrors , StickersExtension } < nl > + < nl > + private [ bot ] object StickersBotErrors { < nl > + val LocationInvalid = BotError ( 400 , " LOCATION _ INVALID " ) < nl > + val NotAllowedToEdit = BotError ( 403 , " NOT _ ALLOWED _ TO _ EDIT " ) < nl > + val FailedToMakePreview = BotError ( 500 , " FAILED _ MAKE _ PREVIEW " ) < nl > + } < nl > + < nl > + private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResultCats [ BotError ] with ApiToBotConversions { < nl > + < nl > + import ImageUtils . _ < nl > + import StickersBotErrors . _ < nl > + < nl > + private implicit val system : ActorSystem = _ system < nl > + import system . dispatcher < nl > + < nl > + private val stickerExt = StickersExtension ( system ) < nl > + private implicit val fsAdapter : S3StorageAdapter = S3StorageExtension ( system ) . s3StorageAdapter < nl > + < nl > + override def handlers : Handlers = { < nl > + case CreateStickerPack ⇒ createStickerPack ( ) . toWeak < nl > + case AddSticker ( packId , emoji , fileLocation ) ⇒ addSticker ( packId , emoji , fileLocation ) . toWeak < nl > + } < nl > + < nl > + private def createStickerPack ( ) = RequestHandler [ CreateStickerPack , CreateStickerPack # Response ] { < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ < nl > + ifIsAdmin ( botUserId ) { < nl > + ( for { < nl > + packId ← fromFuture ( stickerExt . createPack ( botUserId , isDefault = false ) ) < nl > + } yield Container ( packId ) ) . value < nl > + } < nl > + } < nl > + < nl > + private def addSticker ( packId : Int , emoji : Option [ String ] , fileLocation : FileLocation ) = RequestHandler [ AddSticker , AddSticker # Response ] { < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ < nl > + ifIsAdmin ( botUserId ) { < nl > + ( for { < nl > + _ ← fromFutureBoolean ( NotAllowedToEdit ) ( stickerExt . isOwner ( botUserId , packId ) ) < nl > + sticker ← fromFutureEither ( _ ⇒ LocationInvalid ) ( scaleStickerF ( fileLocation . fileId ) ) < nl > + _ ← fromFutureXor ( { case StickerErrors . NoPreview ⇒ FailedToMakePreview } ) ( stickerExt . addSticker ( botUserId , packId , emoji , sticker ) ) < nl > + } yield Void ) . value < nl > + } < nl > + } < nl > + < nl > + } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > index 634bdca . . f7fdfe5 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > @ @ - 49 , 13 + 49 , 17 @ @ object ImageUtils { < nl > aimg . scale ( scaleFactor ) < nl > } < nl > < nl > - def resizeToSmall ( aimg : AsyncImage ) ( implicit ec : ExecutionContext ) : Future [ AsyncImage ] = resizeTo ( aimg , SmallSize ) < nl > - < nl > - def resizeToLarge ( aimg : AsyncImage ) ( implicit ec : ExecutionContext ) : Future [ AsyncImage ] = resizeTo ( aimg , LargeSize ) < nl > - < nl > def dimensions ( aimg : AsyncImage ) ( implicit ec : ExecutionContext ) : ( Int , Int ) = < nl > ( aimg . width , aimg . height ) < nl > < nl > + def scaleStickerF ( fullFileId : Long ) ( < nl > + implicit < nl > + fsAdapter : FileStorageAdapter , < nl > + ec : ExecutionContext , < nl > + system : ActorSystem < nl > + ) : Future [ Either [ Throwable , Avatar ] ] = < nl > + DbExtension ( system ) . db . run ( scaleAvatar ( fullFileId , ThreadLocalRandom . current ( ) , smallSize = 128 , largeSize = 256 ) ) < nl > + < nl > def scaleAvatarF ( fullFileId : Long ) ( < nl > implicit < nl > fsAdapter : FileStorageAdapter , < nl > @ @ - 74 , 7 + 78 , 20 @ @ object ImageUtils { < nl > < nl > def scaleAvatar ( < nl > fullFileId : Long , < nl > - rnd : ThreadLocalRandom < nl > + rng : ThreadLocalRandom < nl > + ) ( < nl > + implicit < nl > + fsAdapter : FileStorageAdapter , < nl > + ec : ExecutionContext , < nl > + system : ActorSystem < nl > + ) : DBIO [ Either [ Throwable , Avatar ] ] = < nl > + scaleAvatar ( fullFileId , rng , SmallSize , LargeSize ) < nl > + < nl > + def scaleAvatar ( < nl > + fullFileId : Long , < nl > + rng : ThreadLocalRandom , < nl > + smallSize : Int , < nl > + largeSize : Int < nl > ) ( < nl > implicit < nl > fsAdapter : FileStorageAdapter , < nl > @ @ - 92 , 8 + 109 , 8 @ @ object ImageUtils { < nl > fullAimg ← DBIO . from ( AsyncImage ( fullFile ) ) < nl > ( fiw , fih ) = dimensions ( fullAimg ) < nl > < nl > - smallAimg ← DBIO . from ( resizeToSmall ( fullAimg ) ) < nl > - largeAimg ← DBIO . from ( resizeToLarge ( fullAimg ) ) < nl > + smallAimg ← DBIO . from ( resizeTo ( fullAimg , smallSize ) ) < nl > + largeAimg ← DBIO . from ( resizeTo ( fullAimg , largeSize ) ) < nl > < nl > smallFile = fullFile . getParentFile . toPath . resolve ( smallFileName ) . toFile < nl > largeFile = fullFile . getParentFile . toPath . resolve ( largeFileName ) . toFile < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala < nl > new file mode 100644 < nl > index 0000000 . . 9c273f7 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala < nl > @ @ - 0 , 0 + 1 , 71 @ @ < nl > + package im . actor . server . stickers < nl > + < nl > + import akka . actor . _ < nl > + import cats . data . Xor < nl > + import im . actor . concurrent . FutureResultCats < nl > + import im . actor . server . acl . ACLUtils < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . file . Avatar < nl > + import im . actor . server . model . { StickerData , StickerPack } < nl > + import im . actor . server . persist . { StickerDataRepo , OwnStickerPackRepo , StickerPackRepo } < nl > + < nl > + import scala . concurrent . Future < nl > + import scala . concurrent . forkjoin . ThreadLocalRandom < nl > + import scala . util . control . NoStackTrace < nl > + < nl > + object StickerErrors { < nl > + < nl > + abstract class StickerError ( message : String ) extends RuntimeException ( message ) with NoStackTrace < nl > + < nl > + case object NoPreview extends StickerError ( " Got no preview after resize " ) < nl > + } < nl > + < nl > + sealed trait StickersExtension extends Extension < nl > + < nl > + final class StickersExtensionImpl ( _ system : ActorSystem ) extends StickersExtension with FutureResultCats [ Throwable ] { < nl > + < nl > + import StickerErrors . _ < nl > + < nl > + implicit val system : ActorSystem = _ system < nl > + import system . dispatcher < nl > + < nl > + private val db = DbExtension ( system ) . db < nl > + < nl > + def createPack ( creatorUserId : Int , isDefault : Boolean ) : Future [ Int ] = { < nl > + val rng = ThreadLocalRandom . current ( ) < nl > + val packId = rng . nextInt ( ) < nl > + val accessSalt = ACLUtils . nextAccessSalt ( rng ) < nl > + db . run ( for { < nl > + _ ← StickerPackRepo . create ( StickerPack ( packId , accessSalt , creatorUserId , isDefault ) ) < nl > + _ ← OwnStickerPackRepo . create ( creatorUserId , packId ) < nl > + } yield packId ) < nl > + } < nl > + < nl > + def isOwner ( userId : Int , packId : Int ) : Future [ Boolean ] = db . run ( StickerPackRepo . exists ( userId , packId ) ) < nl > + < nl > + def addSticker ( userId : Int , packId : Int , emoji : Option [ String ] , resizedSticker : Avatar ) : Future [ Throwable Xor Unit ] = { < nl > + val rng = ThreadLocalRandom . current ( ) < nl > + val id = rng . nextInt ( ) < nl > + ( for { < nl > + image128 ← fromOption ( NoPreview ) ( resizedSticker . smallImage ) < nl > + image256 = resizedSticker . largeImage < nl > + image512 = resizedSticker . fullImage < nl > + sticker = StickerData ( id , packId , emoji , < nl > + image128FileId = image128 . fileLocation . fileId , < nl > + image128FileHash = image128 . fileLocation . accessHash , < nl > + image128FileSize = image128 . fileSize , < nl > + image256FileId = image256 map ( _ . fileLocation . fileId ) , < nl > + image256FileHash = image256 map ( _ . fileLocation . accessHash ) , < nl > + image256FileSize = image256 map ( _ . fileSize ) , < nl > + image512FileId = image512 map ( _ . fileLocation . fileId ) , < nl > + image512FileHash = image512 map ( _ . fileLocation . accessHash ) , < nl > + image512FileSize = image512 map ( _ . fileSize ) ) < nl > + _ ← fromFuture ( db . run ( StickerDataRepo . create ( sticker ) ) ) < nl > + } yield ( ) ) . value < nl > + } < nl > + } < nl > + < nl > + object StickersExtension extends ExtensionId [ StickersExtensionImpl ] with ExtensionIdProvider { < nl > + override def lookup ( ) = StickersExtension < nl > + override def createExtension ( system : ExtendedActorSystem ) = new StickersExtensionImpl ( system ) < nl > + } < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala < nl > index 4d5046d . . 8774910 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala < nl > @ @ - 2 , 6 + 2 , 8 @ @ package im . actor . server . persist < nl > < nl > import im . actor . server . model . StickerData < nl > import im . actor . server . db . ActorPostgresDriver . api . _ < nl > + import slick . dbio . Effect . Write < nl > + import slick . profile . FixedSqlAction < nl > < nl > class StickerDataTable ( tag : Tag ) extends Table [ StickerData ] ( tag , " sticker _ data " ) { < nl > def id = column [ Int ] ( " id " , O . PrimaryKey ) < nl > @ @ - 35 , 10 + 37 , 12 @ @ class StickerDataTable ( tag : Tag ) extends Table [ StickerData ] ( tag , " sticker _ data " ) < nl > < nl > object StickerDataRepo { < nl > < nl > - val stickerDatas = TableQuery [ StickerDataTable ] < nl > + val stickerData = TableQuery [ StickerDataTable ] < nl > < nl > - def find ( id : Int ) = stickerDatas . filter ( _ . id = = = id ) . result < nl > + def create ( data : StickerData ) : DBIO [ Int ] = stickerData + = data < nl > < nl > - def findByPack ( packId : Int ) = stickerDatas . filter ( _ . packId = = = packId ) . result < nl > + def find ( id : Int ) = stickerData . filter ( _ . id = = = id ) . result < nl > + < nl > + def findByPack ( packId : Int ) = stickerData . filter ( _ . packId = = = packId ) . result < nl > < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala < nl > index f0d560f . . a280f61 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala < nl > @ @ - 1 , 8 + 1 , 11 @ @ < nl > package im . actor . server . persist < nl > < nl > + import im . actor . server . db . ActorPostgresDriver < nl > + import slick . dbio . Effect . Read < nl > import slick . lifted . Tag < nl > import im . actor . server . db . ActorPostgresDriver . api . _ < nl > import im . actor . server . model . StickerPack < nl > + import slick . profile . FixedSqlAction < nl > < nl > class StickerPackTable ( tag : Tag ) extends Table [ StickerPack ] ( tag , " sticker _ packs " ) { < nl > def id = column [ Int ] ( " id " , O . PrimaryKey ) < nl > @ @ - 23 , 6 + 26 , 8 @ @ object StickerPackRepo { < nl > < nl > / / def findOwnPacks ( userId : Int ) = stickerPacks . filter ( p ⇒ p . isDefault | | p . ownerUserId = = = userId ) . result < nl > < nl > + def exists ( userId : Int , packId : Int ) : DBIO [ Boolean ] = stickerPacks . filter ( p ⇒ ( p . id = = = packId ) & & ( p . ownerUserId = = = userId ) ) . exists . result < nl > + < nl > def find ( id : Int ) = stickerPacks . filter ( _ . id = = = id ) . result . headOption < nl > < nl > def find ( ids : Seq [ Int ] , withDefault : Boolean = true ) : DBIO [ Seq [ StickerPack ] ] = < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala < nl > index e1b2d50 . . 50eab8a 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala < nl > @ @ - 40 , 6 + 40 , 9 @ @ trait FutureResultCats [ ErrorCase ] { < nl > def fromFutureEither [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Either [ Throwable , A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ Xor . fromEither ( either . left . map ( errorHandle ) ) ) ) < nl > < nl > + def fromFutureXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Throwable Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > + XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ either . leftMap ( errorHandle ) ) ) < nl > + < nl > def fromFutureBoolean ( failure : ErrorCase ) ( fa : Future [ Boolean ] ) ( implicit ec : ExecutionContext ) : Result [ Unit ] = < nl > XorT [ Future , ErrorCase , Unit ] ( fa map ( _ . toXor ( failure ) ) ) < nl > < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 2ef537a . . 2c5a220 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 50 , 8 + 50 , 8 @ @ final case class ActorServer ( system : ActorSystem ) < nl > object ActorServer { < nl > / * * < nl > * Creates a new Actor Server builder < nl > - * < nl > - * @ return < nl > + * < nl > + * @ return < nl > * / < nl > def newBuilder : ActorServerBuilder = ActorServerBuilder ( ) < nl > } < nl > @ @ - 73 , 8 + 73 , 8 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > < nl > / * * < nl > * Starts a server < nl > - * < nl > - * @ return < nl > + * < nl > + * @ return < nl > * / < nl > def start ( ) : ActorServer = { < nl > SessionMessage . register ( ) < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index afecc15 . . ce81cf8 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import sbt . _ < nl > object Dependencies { < nl > object V { < nl > val actorCommons = " 0 . 0 . 8 " < nl > - val actorBotkit = " 1 . 0 . 50 " < nl > + val actorBotkit = " 1 . 0 . 52 " < nl > val akka = " 2 . 4 . 0 " < nl > val akkaExperimental = " 2 . 0 - M1 " < nl > val cats = " 0 . 2 . 0 "

TEST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 index 07964fe . . 1f547a8 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 @ @ - 26 , 6 + 26 , 7 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , 
 private val usersService = new UsersBotService ( system ) 
 private val groupsService = new GroupsBotService ( system ) 
 private val stickersService = new StickersBotService ( system ) 
 + private val filesService = new FilesBotService ( system ) 
 
 private val log = Logging ( system , getClass ) 
 
 @ @ - 87 , 5 + 88 , 6 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , 
 case Services . Users ⇒ usersService 
 case Services . Groups ⇒ groupsService 
 case Services . Stickers ⇒ stickersService 
 + case Services . Files ⇒ filesService 
 } 
 } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / FilesBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / FilesBotService . scala 
 new file mode 100644 
 index 0000000 . . a048193 
 - - - / dev / null 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / FilesBotService . scala 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + package im . actor . server . bot . services 
 + 
 + import java . nio . file . Files 
 + 
 + import akka . actor . ActorSystem 
 + import im . actor . bots . BotMessages . _ 
 + import im . actor . concurrent . FutureResultCats 
 + import im . actor . server . acl . ACLUtils 
 + import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . file . FileStorageExtension 
 + import im . actor . server . persist . FileRepo 
 + 
 + private [ bot ] object FilesBotErrors { 
 + val LocationInvalid = BotError ( 400 , " LOCATION _ INVALID " ) 
 + val Forbidden = BotError ( 403 , " FORBIDDEN " ) 
 + val DownloadFailed = BotError ( 500 , " DOWNLOAD _ FAILED " ) 
 + val FileTooBig = BotError ( 400 , " FILE _ TOO _ BIG " ) 
 + } 
 + 
 + private [ bot ] final class FilesBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResultCats [ BotError ] with ApiToBotConversions { 
 + 
 + import FilesBotErrors . _ 
 + 
 + private implicit val system : ActorSystem = _ system 
 + import system . dispatcher 
 + 
 + private val fsAdapter = FileStorageExtension ( system ) . fsAdapter 
 + private val db = DbExtension ( system ) . db 
 + 
 + private val MaxSize = 1024 * 1024 * 5 / / 5Mb 
 + 
 + override def handlers : Handlers = { 
 + case DownloadFile ( location ) ⇒ downloadFile ( location ) . toWeak 
 + } 
 + 
 + private def downloadFile ( location : FileLocation ) = RequestHandler [ DownloadFile , DownloadFile # Response ] { 
 + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ 
 + ifIsAdmin ( botUserId ) { 
 + ( for { 
 + f ← fromFutureOption ( LocationInvalid ) ( db . run ( FileRepo . find ( location . fileId ) ) ) 
 + _ ← fromBoolean ( Forbidden ) ( location . accessHash = = ACLUtils . fileAccessHash ( f . id , f . accessSalt ) ) 
 + _ ← fromBoolean ( FileTooBig ) ( f . size < = MaxSize ) 
 + file ← fromFutureOption ( DownloadFailed ) ( fsAdapter . downloadFileF ( f . id ) ) 
 + } yield ResponseDownloadFile ( Files . readAllBytes ( file . toPath ) ) ) . value 
 + } 
 + } 
 + 
 + } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala 
 index cbe78db . . 75af247 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala 
 @ @ - 1 , 12 + 1 , 18 @ @ 
 package im . actor . server . bot . services 
 
 import akka . actor . ActorSystem 
 + import akka . stream . { Materializer , ActorMaterializer } 
 + import akka . util . ByteString 
 import im . actor . bots . BotMessages . _ 
 import im . actor . concurrent . FutureResultCats 
 import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } 
 - import im . actor . server . file . { FileStorageAdapter , FileStorageExtension , ImageUtils } 
 + import im . actor . server . file . { FileStorageAdapter , FileStorageExtension , FileUtils } 
 + import im . actor . server . sticker . { Sticker , StickerImage } 
 import im . actor . server . stickers . { StickerErrors , StickersExtension } 
 
 + import scala . concurrent . Future 
 + import scala . util . Try 
 + 
 private [ bot ] object StickersBotErrors { 
 val LocationInvalid = BotError ( 400 , " LOCATION _ INVALID " ) 
 val NotAllowedToEdit = BotError ( 403 , " NOT _ ALLOWED _ TO _ EDIT " ) 
 @ @ - 29 , 25 + 35 , 31 @ @ private [ bot ] object StickersBotErrors { 
 
 private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResultCats [ BotError ] with ApiToBotConversions { 
 
 - import ImageUtils . _ 
 import StickersBotErrors . _ 
 
 private implicit val system : ActorSystem = _ system 
 import system . dispatcher 
 + private implicit val mat : Materializer = ActorMaterializer ( ) 
 
 private val stickerExt = StickersExtension ( system ) 
 - private implicit val fsAdapter : FileStorageAdapter = FileStorageExtension ( system ) . fsAdapter 
 + private val fsAdapter : FileStorageAdapter = FileStorageExtension ( system ) . fsAdapter 
 
 override def handlers : Handlers = { 
 - case CreateStickerPack ( userId ) ⇒ createStickerPack ( userId ) . toWeak 
 - case AddSticker ( ownerUserId , packId , emoji , fileLocation ) ⇒ addSticker ( ownerUserId , packId , emoji , fileLocation ) . toWeak 
 - case ShowStickerPacks ( ownerUserId ) ⇒ showStickerPacks ( ownerUserId ) . toWeak 
 - case ShowStickers ( ownerUserId , packId ) ⇒ showStickers ( ownerUserId , packId ) . toWeak 
 - case DeleteSticker ( ownerUserId , packId , stickerId ) ⇒ deleteSticker ( ownerUserId , packId , stickerId ) . toWeak 
 + case CreateStickerPack ( userId ) ⇒ createStickerPack ( userId ) . toWeak 
 + case AddSticker ( ownerUserId , packId , emoji , 
 + small , smallW , smallH , 
 + medium , mediumW , mediumH , 
 + large , largeW , largeH ) ⇒ addSticker ( ownerUserId , packId , emoji , 
 + small , smallW , smallH , 
 + medium , mediumW , mediumH , 
 + large , largeW , largeH ) . toWeak 
 + case ShowStickerPacks ( ownerUserId ) ⇒ showStickerPacks ( ownerUserId ) . toWeak 
 + case ShowStickers ( ownerUserId , packId ) ⇒ showStickers ( ownerUserId , packId ) . toWeak 
 + case DeleteSticker ( ownerUserId , packId , stickerId ) ⇒ deleteSticker ( ownerUserId , packId , stickerId ) . toWeak 
 
 / / ! ! ! requires admin rights from peer user ! ! ! 
 - case MakeStickerPackDefault ( userId , packId ) ⇒ makeStickerPackDefault ( userId , packId ) . toWeak 
 - case UnmakeStickerPackDefault ( userId , packId ) ⇒ unmakeStickerPackDefault ( userId , packId ) . toWeak 
 + case MakeStickerPackDefault ( userId , packId ) ⇒ makeStickerPackDefault ( userId , packId ) . toWeak 
 + case UnmakeStickerPackDefault ( userId , packId ) ⇒ unmakeStickerPackDefault ( userId , packId ) . toWeak 
 } 
 
 private def createStickerPack ( userId : Int ) = RequestHandler [ CreateStickerPack , CreateStickerPack # Response ] { 
 @ @ - 59 , 16 + 71 , 24 @ @ private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotSer 
 } 
 } 
 
 - private def addSticker ( ownerUserId : Int , packId : Int , emoji : Option [ String ] , fileLocation : FileLocation ) = RequestHandler [ AddSticker , AddSticker # Response ] { 
 - ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ 
 - ifIsAdmin ( botUserId ) { 
 - ( for { 
 - _ ← fromFutureBoolean ( NotAllowedToEdit ) ( stickerExt . isOwner ( ownerUserId , packId ) ) 
 - sticker ← fromFutureEither ( _ ⇒ LocationInvalid ) ( scaleStickerF ( fileLocation . fileId ) ) 
 - _ ← fromFutureXor ( catchStickerErrors ) ( stickerExt . addSticker ( ownerUserId , packId , emoji , sticker ) ) 
 - } yield Void ) . value 
 - } 
 - } 
 + private def addSticker ( ownerUserId : Int , packId : Int , emoji : Option [ String ] , 
 + smallBytes : Array [ Byte ] , smallW : Int , smallH : Int , 
 + mediumBytes : Array [ Byte ] , mediumW : Int , mediumH : Int , 
 + largeBytes : Array [ Byte ] , largeW : Int , largeH : Int ) = 
 + RequestHandler [ AddSticker , AddSticker # Response ] { 
 + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ 
 + ifIsAdmin ( botUserId ) { 
 + ( for { 
 + _ ← fromFutureBoolean ( NotAllowedToEdit ) ( stickerExt . isOwner ( ownerUserId , packId ) ) 
 + sticker ← fromFuture ( for { 
 + small ← uploadSticker ( " small - sticker . webp " , smallBytes , smallW , smallH ) 
 + medium ← uploadSticker ( " medium - sticker . webp " , mediumBytes , mediumW , mediumH ) 
 + large ← uploadSticker ( " large - sticker . webp " , largeBytes , largeW , largeH ) 
 + } yield Sticker ( small , medium , large ) ) 
 + _ ← fromFutureXor ( catchStickerErrors ) ( stickerExt . addSticker ( ownerUserId , packId , emoji , sticker ) ) 
 + } yield Void ) . value 
 + } 
 + } 
 
 def showStickerPacks ( ownerUserId : Int ) = RequestHandler [ ShowStickerPacks , ShowStickerPacks # Response ] { 
 ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ 
 @ @ - 119 , 4 + 139 , 10 @ @ private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotSer 
 } 
 } 
 
 + private def uploadSticker ( name : String , bytes : Array [ Byte ] , w : Int , h : Int ) : Future [ Option [ StickerImage ] ] = 
 + Try ( for { 
 + ( path , size ) ← FileUtils . writeBytes ( ByteString ( bytes ) ) 
 + fileLocation ← fsAdapter . uploadFileF ( name , path . toFile ) 
 + } yield Some ( StickerImage ( fileLocation , w , h , size ) ) ) . toOption getOrElse Future . successful ( None ) 
 + 
 } 
 diff - - git a / actor - server / actor - core / src / main / protobuf / sticker . proto b / actor - server / actor - core / src / main / protobuf / sticker . proto 
 new file mode 100644 
 index 0000000 . . 5503217 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / protobuf / sticker . proto 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + syntax = " proto2 " ; 
 + 
 + package im . actor . server ; 
 + 
 + import " file . proto " ; 
 + 
 + message StickerImage { 
 + required FileLocation file _ location = 1 ; 
 + required int32 width = 2 ; 
 + required int32 height = 3 ; 
 + required int64 file _ size = 4 ; 
 + } 
 + 
 + message Sticker { 
 + optional StickerImage small = 1 ; 
 + optional StickerImage medium = 2 ; 
 + optional StickerImage large = 3 ; 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickerMessages . scala b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickerMessages . scala 
 new file mode 100644 
 index 0000000 . . d7db95e 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickerMessages . scala 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package im . actor . server . stickers 
 + 
 + import im . actor . serialization . ActorSerializer 
 + import im . actor . server . sticker . { Sticker , StickerImage } 
 + 
 + object StickerMessages { 
 + def register ( ) : Unit = 
 + ActorSerializer . register ( 
 + 100001 → classOf [ Sticker ] , 
 + 100002 → classOf [ StickerImage ] 
 + ) 
 + } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala 
 index d181983 . . 0ad008c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala 
 @ @ - 2 , 14 + 2 , 17 @ @ package im . actor . server . stickers 
 
 import akka . actor . _ 
 import cats . data . Xor 
 + import im . actor . api . rpc . stickers . { ApiStickerCollection , UpdateOwnStickersChanged , UpdateStickerCollectionsChanged } 
 import im . actor . concurrent . FutureResultCats 
 import im . actor . server . acl . ACLUtils 
 import im . actor . server . db . DbExtension 
 - import im . actor . server . file . Avatar 
 import im . actor . server . model . { StickerData , StickerPack } 
 - import im . actor . server . persist . { StickerDataRepo , OwnStickerPackRepo , StickerPackRepo } 
 + import im . actor . server . persist . { OwnStickerPackRepo , StickerDataRepo , StickerPackRepo , UserRepo } 
 + import im . actor . server . sequence . SeqUpdatesExtension 
 + import im . actor . server . sticker . Sticker 
 import im . actor . server . user . UserExtension 
 import im . actor . util . misc . IdUtils 
 + import slick . dbio . DBIO 
 
 import scala . concurrent . Future 
 import scala . concurrent . forkjoin . ThreadLocalRandom 
 @ @ - 31 , 7 + 34 , 12 @ @ object StickerErrors { 
 
 sealed trait StickersExtension extends Extension 
 
 - final class StickersExtensionImpl ( _ system : ActorSystem ) extends StickersExtension with FutureResultCats [ StickerError ] { 
 + final class StickersExtensionImpl ( _ system : ActorSystem ) 
 + extends StickersExtension 
 + with FutureResultCats [ StickerError ] 
 + with StickersImplicitConversions { 
 + 
 + StickerMessages . register ( ) 
 
 import StickerErrors . _ 
 
 @ @ - 40 , 6 + 48 , 7 @ @ final class StickersExtensionImpl ( _ system : ActorSystem ) extends StickersExtensio 
 
 private val db = DbExtension ( system ) . db 
 private val userExt = UserExtension ( system ) 
 + private val seqExt = SeqUpdatesExtension ( system ) 
 
 def createPack ( creatorUserId : Int , isDefault : Boolean ) : Future [ Int ] = { 
 val rng = ThreadLocalRandom . current ( ) 
 @ @ - 48 , 17 + 57 , 20 @ @ final class StickersExtensionImpl ( _ system : ActorSystem ) extends StickersExtensio 
 db . run ( for { 
 _ ← StickerPackRepo . create ( StickerPack ( packId , accessSalt , creatorUserId , isDefault ) ) 
 _ ← OwnStickerPackRepo . create ( creatorUserId , packId ) 
 + collections ← getOwnApiStickerPacks ( creatorUserId ) 
 + _ ← DBIO . from ( seqExt . deliverSingleUpdate ( creatorUserId , UpdateOwnStickersChanged ( collections ) ) ) 
 } yield packId ) 
 } 
 
 def isOwner ( userId : Int , packId : Int ) : Future [ Boolean ] = db . run ( StickerPackRepo . exists ( userId , packId ) ) 
 
 - def addSticker ( ownerUserId : Int , packId : Int , emoji : Option [ String ] , resizedSticker : Avatar ) : Future [ StickerError Xor Unit ] = 
 + def addSticker ( ownerUserId : Int , packId : Int , emoji : Option [ String ] , resizedSticker : Sticker ) : Future [ StickerError Xor Unit ] = 
 ( for { 
 - _ ← fromFutureBoolean ( NotFound ) ( db . run ( StickerPackRepo . exists ( ownerUserId , packId ) ) ) 
 - image128 ← fromOption ( NoPreview ) ( resizedSticker . smallImage ) 
 - image256 = resizedSticker . largeImage 
 - image512 = resizedSticker . fullImage 
 + pack ← fromFutureOption ( NotFound ) ( db . run ( StickerPackRepo . find ( packId ) ) ) 
 + _ ← fromBoolean ( NotFound ) ( pack . ownerUserId = = ownerUserId ) 
 + image128 ← fromOption ( NoPreview ) ( resizedSticker . small ) 
 + image256 = resizedSticker . medium 
 + image512 = resizedSticker . large 
 sticker = StickerData ( id = IdUtils . nextIntId ( ) , packId , emoji , 
 image128FileId = image128 . fileLocation . fileId , 
 image128FileHash = image128 . fileLocation . accessHash , 
 @ @ - 70 , 6 + 82 , 9 @ @ final class StickersExtensionImpl ( _ system : ActorSystem ) extends StickersExtensio 
 image512FileHash = image512 map ( _ . fileLocation . accessHash ) , 
 image512FileSize = image512 map ( _ . fileSize ) ) 
 _ ← fromFuture ( db . run ( StickerDataRepo . create ( sticker ) ) ) 
 + packUserIds ← fromFuture ( db . run ( getPackUserIds ( pack ) ) ) 
 + apiPack ← fromFuture ( db . run ( getApiStickerPack ( pack ) ) ) 
 + _ ← fromFuture ( seqExt . broadcastSingleUpdate ( packUserIds . toSet , UpdateStickerCollectionsChanged ( Vector ( apiPack ) ) ) ) 
 } yield ( ) ) . value 
 
 def getStickerPacks ( ownerUserId : Int ) : Future [ Seq [ StickerPack ] ] = 
 @ @ - 84 , 10 + 99 , 33 @ @ final class StickersExtensionImpl ( _ system : ActorSystem ) extends StickersExtensio 
 
 def deleteSticker ( ownerUserId : Int , packId : Int , stickerId : Int ) : Future [ StickerError Xor Unit ] = 
 ( for { 
 - _ ← fromFutureBoolean ( NotFound ) ( db . run ( StickerPackRepo . exists ( ownerUserId , packId ) ) ) 
 + pack ← fromFutureOption ( NotFound ) ( db . run ( StickerPackRepo . find ( packId ) ) ) 
 + _ ← fromBoolean ( NotFound ) ( pack . ownerUserId = = ownerUserId ) 
 _ ← fromFuture ( db . run ( StickerDataRepo . delete ( packId , stickerId ) ) ) 
 + packUserIds ← fromFuture ( db . run ( getPackUserIds ( pack ) ) ) 
 + apiPack ← fromFuture ( db . run ( getApiStickerPack ( pack ) ) ) 
 + _ ← fromFuture ( seqExt . broadcastSingleUpdate ( packUserIds . toSet , UpdateStickerCollectionsChanged ( Vector ( apiPack ) ) ) ) 
 } yield ( ) ) . value 
 
 + def getPackUserIds ( pack : StickerPack ) : DBIO [ Seq [ Int ] ] = 
 + if ( pack . isDefault ) 
 + UserRepo . activeUsersIds 
 + else OwnStickerPackRepo . findUserIds ( pack . id ) 
 + 
 + def getApiStickerPack ( pack : StickerPack ) : DBIO [ ApiStickerCollection ] = 
 + for { 
 + stickers ← StickerDataRepo . findByPack ( pack . id ) 
 + } yield ApiStickerCollection ( pack . id , ACLUtils . stickerPackAccessHash ( pack ) , stickers ) 
 + 
 + def getOwnApiStickerPacks ( userId : Int ) : DBIO [ Vector [ ApiStickerCollection ] ] = 
 + for { 
 + packIds ← OwnStickerPackRepo . findPackIds ( userId ) 
 + packs ← StickerPackRepo . find ( packIds ) 
 + stickerCollections ← DBIO . sequence ( packs . toVector map { pack ⇒ 
 + for ( stickers ← StickerDataRepo . findByPack ( pack . id ) ) yield ApiStickerCollection ( pack . id , ACLUtils . stickerPackAccessHash ( pack ) , stickers ) 
 + } ) 
 + } yield stickerCollections 
 + 
 def makeStickerPackDefault ( userId : Int , packId : Int ) : Future [ StickerError Xor Unit ] = 
 toggleDefault ( userId , packId , toggleTo = true ) 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersImplicitConversions . scala b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersImplicitConversions . scala 
 new file mode 100644 
 index 0000000 . . e9f3ff1 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersImplicitConversions . scala 
 @ @ - 0 , 0 + 1 , 34 @ @ 
 + package im . actor . server . stickers 
 + 
 + import im . actor . api . rpc . files . { ApiFileLocation , ApiImageLocation } 
 + import im . actor . api . rpc . stickers . ApiStickerDescriptor 
 + import im . actor . server . model . StickerData 
 + 
 + import scala . language . implicitConversions 
 + 
 + trait StickersImplicitConversions { 
 + 
 + implicit def stickerToApi ( s : StickerData ) : ApiStickerDescriptor = { 
 + ApiStickerDescriptor ( 
 + s . id , 
 + s . emoji , 
 + imageLocation ( s . image128FileId , s . image128FileHash , 128 , s . image128FileSize ) , 
 + optImageLocation ( s . image512FileId , s . image512FileHash , 512 , s . image512FileSize ) , 
 + optImageLocation ( s . image256FileId , s . image256FileHash , 256 , s . image256FileSize ) 
 + ) 
 + } 
 + 
 + implicit def stickerToApi ( stickers : Seq [ StickerData ] ) : IndexedSeq [ ApiStickerDescriptor ] = 
 + stickers . toVector map stickerToApi 
 + 
 + private def imageLocation ( fileId : Long , fileHash : Long , side : Int , fileSize : Long ) : ApiImageLocation = 
 + ApiImageLocation ( ApiFileLocation ( fileId , fileHash ) , side , side , fileSize . toInt ) 
 + 
 + private def optImageLocation ( fileId : Option [ Long ] , fileHash : Option [ Long ] , side : Int , fileSize : Option [ Long ] ) : Option [ ApiImageLocation ] = 
 + for { 
 + id ← fileId 
 + hash ← fileHash 
 + size ← fileSize 
 + } yield imageLocation ( id , hash , side , size ) 
 + 
 + } 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OwnStickerPackRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OwnStickerPackRepo . scala 
 index c37a529 . . 4a031ab 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OwnStickerPackRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / OwnStickerPackRepo . scala 
 @ @ - 24 , 6 + 24 , 8 @ @ object OwnStickerPackRepo { 
 
 def findPackIds ( userId : Int ) : DBIO [ Seq [ Int ] ] = ownStickerPacks . filter ( _ . userId = = = userId ) . map ( _ . packId ) . result 
 
 + def findUserIds ( packId : Int ) : DBIO [ Seq [ Int ] ] = ownStickerPacks . filter ( _ . packId = = = packId ) . map ( _ . userId ) . result 
 + 
 def exists ( userId : Int , packId : Int ) : DBIO [ Boolean ] = 
 ownStickerPacks . filter ( p ⇒ p . userId = = = userId & & p . packId = = = packId ) . exists . result 
 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stickers / ImplicitConversions . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stickers / ImplicitConversions . scala 
 deleted file mode 100644 
 index 8f347c3 . . 0000000 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stickers / ImplicitConversions . scala 
 + + + / dev / null 
 @ @ - 1 , 34 + 0 , 0 @ @ 
 - package im . actor . server . api . rpc . service . stickers 
 - 
 - import im . actor . api . rpc . files . { ApiFileLocation , ApiImageLocation } 
 - import im . actor . api . rpc . stickers . ApiStickerDescriptor 
 - import im . actor . server . model . StickerData 
 - 
 - import scala . language . implicitConversions 
 - 
 - trait ImplicitConversions { 
 - 
 - implicit def stickerToApi ( s : StickerData ) : ApiStickerDescriptor = { 
 - ApiStickerDescriptor ( 
 - s . id , 
 - s . emoji , 
 - imageLocation ( s . image128FileId , s . image128FileHash , 128 , s . image128FileSize ) , 
 - optImageLocation ( s . image512FileId , s . image512FileHash , 512 , s . image512FileSize ) , 
 - optImageLocation ( s . image256FileId , s . image256FileHash , 256 , s . image256FileSize ) 
 - ) 
 - } 
 - 
 - implicit def stickerToApi ( stickers : Seq [ StickerData ] ) : IndexedSeq [ ApiStickerDescriptor ] = 
 - stickers . toVector map stickerToApi 
 - 
 - private def imageLocation ( fileId : Long , fileHash : Long , side : Int , fileSize : Long ) : ApiImageLocation = 
 - ApiImageLocation ( ApiFileLocation ( fileId , fileHash ) , side , side , fileSize . toInt ) 
 - 
 - private def optImageLocation ( fileId : Option [ Long ] , fileHash : Option [ Long ] , side : Int , fileSize : Option [ Long ] ) : Option [ ApiImageLocation ] = 
 - for { 
 - id ← fileId 
 - hash ← fileHash 
 - size ← fileSize 
 - } yield imageLocation ( id , hash , side , size ) 
 - 
 - } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stickers / StickersServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stickers / StickersServiceImpl . scala 
 index b4718c7 . . 2ac8cbe 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stickers / StickersServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / stickers / StickersServiceImpl . scala 
 @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . server . acl . ACLUtils . stickerPackAccessHash 
 import im . actor . server . db . DbExtension 
 import im . actor . server . persist 
 import im . actor . server . sequence . { SeqState , SeqUpdatesExtension } 
 + import im . actor . server . stickers . { StickersImplicitConversions , StickersExtension } 
 import slick . dbio . DBIO 
 
 import scala . concurrent . { ExecutionContext , Future } 
 @ @ - 19 , 7 + 20 , 7 @ @ object StickerPackErrors { 
 val CantRemoveDefaultPack = RpcError ( 400 , " CANT _ REMOVE _ DEFAULT _ PACK " , " You can ' t remove default pack " , false , None ) 
 } 
 
 - class StickersServiceImpl ( implicit actorSystem : ActorSystem ) extends StickersService with ImplicitConversions { 
 + class StickersServiceImpl ( implicit actorSystem : ActorSystem ) extends StickersService with StickersImplicitConversions { 
 
 import FutureResultRpcCats . _ 
 import StickerPackErrors . _ 
 @ @ - 28 , 6 + 29 , 7 @ @ class StickersServiceImpl ( implicit actorSystem : ActorSystem ) extends StickersSer 
 
 private val db = DbExtension ( actorSystem ) . db 
 private val seqUpdExt = SeqUpdatesExtension ( actorSystem ) 
 + private val stickersExt = StickersExtension ( actorSystem ) 
 
 override def jhandleLoadStickerCollection ( id : Int , accessHash : Long , clientData : ClientData ) : Future [ HandlerResult [ ResponseLoadStickerCollection ] ] = 
 authorized ( clientData ) { client ⇒ 
 @ @ - 46 , 7 + 48 , 7 @ @ class StickersServiceImpl ( implicit actorSystem : ActorSystem ) extends StickersSer 
 _ ← fromBoolean ( CantRemoveDefaultPack ) ( ! pack . isDefault ) 
 _ ← fromFutureBoolean ( AlreadyRemoved ) ( db . run ( persist . OwnStickerPackRepo . exists ( client . userId , pack . id ) map ! = ) ) 
 _ ← fromFuture ( db . run ( persist . OwnStickerPackRepo . delete ( client . userId , pack . id ) ) ) 
 - stickers ← fromFuture ( db . run ( getOwnStickerPacks ( client . userId ) ) ) 
 + stickers ← fromFuture ( db . run ( stickersExt . getOwnApiStickerPacks ( client . userId ) ) ) 
 seqState ← fromFuture ( seqUpdExt . deliverSingleUpdate ( client . userId , UpdateOwnStickersChanged ( stickers ) ) ) 
 SeqState ( seq , state ) = seqState 
 } yield ResponseStickersReponse ( stickers , seq , state . toByteArray ) ) . value map ( _ . toScalaz ) 
 @ @ - 60 , 7 + 62 , 7 @ @ class StickersServiceImpl ( implicit actorSystem : ActorSystem ) extends StickersSer 
 _ ← fromBoolean ( CantAddDefaultPack ) ( ! pack . isDefault ) 
 _ ← fromFutureBoolean ( AlreadyAdded ) ( db . run ( persist . OwnStickerPackRepo . exists ( client . userId , pack . id ) ) ) 
 _ ← fromFuture ( db . run ( persist . OwnStickerPackRepo . create ( client . userId , pack . id ) ) ) 
 - stickers ← fromFuture ( db . run ( getOwnStickerPacks ( client . userId ) ) ) 
 + stickers ← fromFuture ( db . run ( stickersExt . getOwnApiStickerPacks ( client . userId ) ) ) 
 seqState ← fromFuture ( seqUpdExt . deliverSingleUpdate ( client . userId , UpdateOwnStickersChanged ( stickers ) ) ) 
 SeqState ( seq , state ) = seqState 
 } yield ResponseStickersReponse ( stickers , seq , state . toByteArray ) ) . value map ( _ . toScalaz ) 
 @ @ - 68 , 18 + 70 , 9 @ @ class StickersServiceImpl ( implicit actorSystem : ActorSystem ) extends StickersSer 
 
 override def jhandleLoadOwnStickers ( clientData : ClientData ) : Future [ HandlerResult [ ResponseLoadOwnStickers ] ] = { 
 val action = requireAuth ( clientData ) map { implicit client ⇒ 
 - getOwnStickerPacks ( client . userId ) map ( stickers ⇒ Ok ( ResponseLoadOwnStickers ( stickers ) ) ) 
 + stickersExt . getOwnApiStickerPacks ( client . userId ) map ( stickers ⇒ Ok ( ResponseLoadOwnStickers ( stickers ) ) ) 
 } 
 db . run ( toDBIOAction ( action ) ) 
 } 
 
 - private def getOwnStickerPacks ( userId : Int ) : DBIO [ Vector [ ApiStickerCollection ] ] = 
 - for { 
 - packIds ← persist . OwnStickerPackRepo . findPackIds ( userId ) 
 - packs ← persist . StickerPackRepo . find ( packIds ) 
 - stickerCollections ← DBIO . sequence ( packs . toVector map { pack ⇒ 
 - for ( stickers ← persist . StickerDataRepo . findByPack ( pack . id ) ) yield ApiStickerCollection ( pack . id , stickerPackAccessHash ( pack ) , stickers ) 
 - } ) 
 - } yield stickerCollections 
 - 
 } 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 446b2ee . . 4acac22 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 41 , 6 + 41 , 7 @ @ import im . actor . server . sequence . _ 
 import im . actor . server . session . { Session , SessionConfig , SessionMessage } 
 import im . actor . server . sms . { TelesignCallEngine , TelesignClient , TelesignSmsEngine } 
 import im . actor . server . social . SocialExtension 
 + import im . actor . server . stickers . StickerMessages 
 import im . actor . server . user . _ 
 import kamon . Kamon 
 
 @ @ - 84 , 6 + 85 , 7 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 UserProcessor . register ( ) 
 GroupProcessor . register ( ) 
 DialogProcessor . register ( ) 
 + StickerMessages . register ( ) 
 
 val serverConfig = ActorConfig . load ( defaultConfig ) 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / stickers / StickersExtensionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / stickers / StickersExtensionSpec . scala 
 index 10ee1bd . . 4b1e782 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / stickers / StickersExtensionSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / stickers / StickersExtensionSpec . scala 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 package im . actor . server . stickers 
 
 import cats . data . Xor 
 - import im . actor . server . file . { AvatarImage , Avatar } 
 + import im . actor . server . sticker . { Sticker , StickerImage } 
 import im . actor . server . user . UserExtension 
 import im . actor . server . { ImplicitSessionRegion , ImplicitAuthService , BaseAppSuite } 
 import im . actor . util . misc . IdUtils 
 @ @ - 193 , 6 + 193 , 6 @ @ class StickersExtensionSpec 
 } 
 
 private def addDummy ( userId : Int , packId : Int ) = 
 - stickersExt . addSticker ( userId , packId , None , Avatar ( Some ( AvatarImage ( ) ) , None , None ) ) 
 + stickersExt . addSticker ( userId , packId , None , Sticker ( Some ( StickerImage ( ) ) , None , None ) ) 
 
 } 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index 01ba19c . . 30142dd 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import sbt . _ 
 object Dependencies { 
 object V { 
 val actorCommons = " 0 . 0 . 8 " 
 - val actorBotkit = " 1 . 0 . 60 " 
 + val actorBotkit = " 1 . 0 . 66 " 
 val akka = " 2 . 4 . 0 " 
 val akkaExperimental = " 2 . 0 - M1 " 
 val cats = " 0 . 2 . 0 "

NEAREST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala 
 index 8162272 . . 83be924 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala 
 @ @ - 57 , 8 + 57 , 9 @ @ trait ApiToBotConversions { 
 thumb , 
 ext ) ⇒ DocumentMessage ( fileId , accessHash , fileSize . toLong , name , mimeType , thumb , ext ) 
 case ApiServiceMessage ( text , _ ) ⇒ ServiceMessage ( text ) 
 - case _ : ApiStickerMessage ⇒ UnsupportedMessage 
 - case _ : ApiUnsupportedMessage ⇒ UnsupportedMessage 
 + case ApiStickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) ⇒ 
 + StickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) 
 + case _ : ApiUnsupportedMessage ⇒ UnsupportedMessage 
 } 
 
 implicit def toTextModernAttach ( ma : ApiTextModernAttach ) : TextModernAttach = 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 index 2432bf1 . . 07964fe 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 @ @ - 25 , 6 + 25 , 7 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , 
 private val webhooksService = new WebHooksBotService ( system ) 
 private val usersService = new UsersBotService ( system ) 
 private val groupsService = new GroupsBotService ( system ) 
 + private val stickersService = new StickersBotService ( system ) 
 
 private val log = Logging ( system , getClass ) 
 
 @ @ - 85 , 5 + 86 , 6 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , 
 case Services . WebHooks ⇒ webhooksService 
 case Services . Users ⇒ usersService 
 case Services . Groups ⇒ groupsService 
 + case Services . Stickers ⇒ stickersService 
 } 
 } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala 
 index bdb1189 . . 8b547e3 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala 
 @ @ - 74 , 6 + 74 , 12 @ @ trait BotToApiConversions { 
 implicit def toColor ( color : Option [ Color ] ) : Option [ ApiColor ] = 
 color map toColor 
 
 + implicit def toImageLocation ( il : ImageLocation ) : ApiImageLocation = 
 + ApiImageLocation ( il . fileLocation , il . width , il . height , il . fileSize ) 
 + 
 + implicit def toImageLocation ( il : Option [ ImageLocation ] ) : Option [ ApiImageLocation ] = 
 + il map toImageLocation 
 + 
 implicit def toMessage ( message : MessageBody ) : ApiMessage = 
 message match { 
 case TextMessage ( text , ext ) ⇒ ApiTextMessage ( text , Vector . empty , ext ) 
 @ @ - 86 , 6 + 92 , 8 @ @ trait BotToApiConversions { 
 mimeType , 
 thumb , 
 ext ) ⇒ ApiDocumentMessage ( fileId , accessHash , fileSize . toInt , name , mimeType , thumb , ext ) 
 + case StickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) ⇒ 
 + ApiStickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) 
 case ServiceMessage ( _ ) ⇒ throw new RuntimeException ( " Service messages are not supported " ) 
 case UnsupportedMessage ⇒ ApiUnsupportedMessage 
 } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala 
 new file mode 100644 
 index 0000000 . . dc6a385 
 - - - / dev / null 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala 
 @ @ - 0 , 0 + 1 , 52 @ @ 
 + package im . actor . server . bot . services 
 + 
 + import akka . actor . ActorSystem 
 + import im . actor . bots . BotMessages . _ 
 + import im . actor . concurrent . FutureResultCats 
 + import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } 
 + import im . actor . server . file . { S3StorageExtension , S3StorageAdapter , ImageUtils } 
 + import im . actor . server . stickers . { StickerErrors , StickersExtension } 
 + 
 + private [ bot ] object StickersBotErrors { 
 + val LocationInvalid = BotError ( 400 , " LOCATION _ INVALID " ) 
 + val NotAllowedToEdit = BotError ( 403 , " NOT _ ALLOWED _ TO _ EDIT " ) 
 + val FailedToMakePreview = BotError ( 500 , " FAILED _ MAKE _ PREVIEW " ) 
 + } 
 + 
 + private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResultCats [ BotError ] with ApiToBotConversions { 
 + 
 + import ImageUtils . _ 
 + import StickersBotErrors . _ 
 + 
 + private implicit val system : ActorSystem = _ system 
 + import system . dispatcher 
 + 
 + private val stickerExt = StickersExtension ( system ) 
 + private implicit val fsAdapter : S3StorageAdapter = S3StorageExtension ( system ) . s3StorageAdapter 
 + 
 + override def handlers : Handlers = { 
 + case CreateStickerPack ⇒ createStickerPack ( ) . toWeak 
 + case AddSticker ( packId , emoji , fileLocation ) ⇒ addSticker ( packId , emoji , fileLocation ) . toWeak 
 + } 
 + 
 + private def createStickerPack ( ) = RequestHandler [ CreateStickerPack , CreateStickerPack # Response ] { 
 + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ 
 + ifIsAdmin ( botUserId ) { 
 + ( for { 
 + packId ← fromFuture ( stickerExt . createPack ( botUserId , isDefault = false ) ) 
 + } yield Container ( packId ) ) . value 
 + } 
 + } 
 + 
 + private def addSticker ( packId : Int , emoji : Option [ String ] , fileLocation : FileLocation ) = RequestHandler [ AddSticker , AddSticker # Response ] { 
 + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ 
 + ifIsAdmin ( botUserId ) { 
 + ( for { 
 + _ ← fromFutureBoolean ( NotAllowedToEdit ) ( stickerExt . isOwner ( botUserId , packId ) ) 
 + sticker ← fromFutureEither ( _ ⇒ LocationInvalid ) ( scaleStickerF ( fileLocation . fileId ) ) 
 + _ ← fromFutureXor ( { case StickerErrors . NoPreview ⇒ FailedToMakePreview } ) ( stickerExt . addSticker ( botUserId , packId , emoji , sticker ) ) 
 + } yield Void ) . value 
 + } 
 + } 
 + 
 + } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 index 634bdca . . f7fdfe5 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 @ @ - 49 , 13 + 49 , 17 @ @ object ImageUtils { 
 aimg . scale ( scaleFactor ) 
 } 
 
 - def resizeToSmall ( aimg : AsyncImage ) ( implicit ec : ExecutionContext ) : Future [ AsyncImage ] = resizeTo ( aimg , SmallSize ) 
 - 
 - def resizeToLarge ( aimg : AsyncImage ) ( implicit ec : ExecutionContext ) : Future [ AsyncImage ] = resizeTo ( aimg , LargeSize ) 
 - 
 def dimensions ( aimg : AsyncImage ) ( implicit ec : ExecutionContext ) : ( Int , Int ) = 
 ( aimg . width , aimg . height ) 
 
 + def scaleStickerF ( fullFileId : Long ) ( 
 + implicit 
 + fsAdapter : FileStorageAdapter , 
 + ec : ExecutionContext , 
 + system : ActorSystem 
 + ) : Future [ Either [ Throwable , Avatar ] ] = 
 + DbExtension ( system ) . db . run ( scaleAvatar ( fullFileId , ThreadLocalRandom . current ( ) , smallSize = 128 , largeSize = 256 ) ) 
 + 
 def scaleAvatarF ( fullFileId : Long ) ( 
 implicit 
 fsAdapter : FileStorageAdapter , 
 @ @ - 74 , 7 + 78 , 20 @ @ object ImageUtils { 
 
 def scaleAvatar ( 
 fullFileId : Long , 
 - rnd : ThreadLocalRandom 
 + rng : ThreadLocalRandom 
 + ) ( 
 + implicit 
 + fsAdapter : FileStorageAdapter , 
 + ec : ExecutionContext , 
 + system : ActorSystem 
 + ) : DBIO [ Either [ Throwable , Avatar ] ] = 
 + scaleAvatar ( fullFileId , rng , SmallSize , LargeSize ) 
 + 
 + def scaleAvatar ( 
 + fullFileId : Long , 
 + rng : ThreadLocalRandom , 
 + smallSize : Int , 
 + largeSize : Int 
 ) ( 
 implicit 
 fsAdapter : FileStorageAdapter , 
 @ @ - 92 , 8 + 109 , 8 @ @ object ImageUtils { 
 fullAimg ← DBIO . from ( AsyncImage ( fullFile ) ) 
 ( fiw , fih ) = dimensions ( fullAimg ) 
 
 - smallAimg ← DBIO . from ( resizeToSmall ( fullAimg ) ) 
 - largeAimg ← DBIO . from ( resizeToLarge ( fullAimg ) ) 
 + smallAimg ← DBIO . from ( resizeTo ( fullAimg , smallSize ) ) 
 + largeAimg ← DBIO . from ( resizeTo ( fullAimg , largeSize ) ) 
 
 smallFile = fullFile . getParentFile . toPath . resolve ( smallFileName ) . toFile 
 largeFile = fullFile . getParentFile . toPath . resolve ( largeFileName ) . toFile 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala 
 new file mode 100644 
 index 0000000 . . 9c273f7 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala 
 @ @ - 0 , 0 + 1 , 71 @ @ 
 + package im . actor . server . stickers 
 + 
 + import akka . actor . _ 
 + import cats . data . Xor 
 + import im . actor . concurrent . FutureResultCats 
 + import im . actor . server . acl . ACLUtils 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . file . Avatar 
 + import im . actor . server . model . { StickerData , StickerPack } 
 + import im . actor . server . persist . { StickerDataRepo , OwnStickerPackRepo , StickerPackRepo } 
 + 
 + import scala . concurrent . Future 
 + import scala . concurrent . forkjoin . ThreadLocalRandom 
 + import scala . util . control . NoStackTrace 
 + 
 + object StickerErrors { 
 + 
 + abstract class StickerError ( message : String ) extends RuntimeException ( message ) with NoStackTrace 
 + 
 + case object NoPreview extends StickerError ( " Got no preview after resize " ) 
 + } 
 + 
 + sealed trait StickersExtension extends Extension 
 + 
 + final class StickersExtensionImpl ( _ system : ActorSystem ) extends StickersExtension with FutureResultCats [ Throwable ] { 
 + 
 + import StickerErrors . _ 
 + 
 + implicit val system : ActorSystem = _ system 
 + import system . dispatcher 
 + 
 + private val db = DbExtension ( system ) . db 
 + 
 + def createPack ( creatorUserId : Int , isDefault : Boolean ) : Future [ Int ] = { 
 + val rng = ThreadLocalRandom . current ( ) 
 + val packId = rng . nextInt ( ) 
 + val accessSalt = ACLUtils . nextAccessSalt ( rng ) 
 + db . run ( for { 
 + _ ← StickerPackRepo . create ( StickerPack ( packId , accessSalt , creatorUserId , isDefault ) ) 
 + _ ← OwnStickerPackRepo . create ( creatorUserId , packId ) 
 + } yield packId ) 
 + } 
 + 
 + def isOwner ( userId : Int , packId : Int ) : Future [ Boolean ] = db . run ( StickerPackRepo . exists ( userId , packId ) ) 
 + 
 + def addSticker ( userId : Int , packId : Int , emoji : Option [ String ] , resizedSticker : Avatar ) : Future [ Throwable Xor Unit ] = { 
 + val rng = ThreadLocalRandom . current ( ) 
 + val id = rng . nextInt ( ) 
 + ( for { 
 + image128 ← fromOption ( NoPreview ) ( resizedSticker . smallImage ) 
 + image256 = resizedSticker . largeImage 
 + image512 = resizedSticker . fullImage 
 + sticker = StickerData ( id , packId , emoji , 
 + image128FileId = image128 . fileLocation . fileId , 
 + image128FileHash = image128 . fileLocation . accessHash , 
 + image128FileSize = image128 . fileSize , 
 + image256FileId = image256 map ( _ . fileLocation . fileId ) , 
 + image256FileHash = image256 map ( _ . fileLocation . accessHash ) , 
 + image256FileSize = image256 map ( _ . fileSize ) , 
 + image512FileId = image512 map ( _ . fileLocation . fileId ) , 
 + image512FileHash = image512 map ( _ . fileLocation . accessHash ) , 
 + image512FileSize = image512 map ( _ . fileSize ) ) 
 + _ ← fromFuture ( db . run ( StickerDataRepo . create ( sticker ) ) ) 
 + } yield ( ) ) . value 
 + } 
 + } 
 + 
 + object StickersExtension extends ExtensionId [ StickersExtensionImpl ] with ExtensionIdProvider { 
 + override def lookup ( ) = StickersExtension 
 + override def createExtension ( system : ExtendedActorSystem ) = new StickersExtensionImpl ( system ) 
 + } 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala 
 index 4d5046d . . 8774910 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala 
 @ @ - 2 , 6 + 2 , 8 @ @ package im . actor . server . persist 
 
 import im . actor . server . model . StickerData 
 import im . actor . server . db . ActorPostgresDriver . api . _ 
 + import slick . dbio . Effect . Write 
 + import slick . profile . FixedSqlAction 
 
 class StickerDataTable ( tag : Tag ) extends Table [ StickerData ] ( tag , " sticker _ data " ) { 
 def id = column [ Int ] ( " id " , O . PrimaryKey ) 
 @ @ - 35 , 10 + 37 , 12 @ @ class StickerDataTable ( tag : Tag ) extends Table [ StickerData ] ( tag , " sticker _ data " ) 
 
 object StickerDataRepo { 
 
 - val stickerDatas = TableQuery [ StickerDataTable ] 
 + val stickerData = TableQuery [ StickerDataTable ] 
 
 - def find ( id : Int ) = stickerDatas . filter ( _ . id = = = id ) . result 
 + def create ( data : StickerData ) : DBIO [ Int ] = stickerData + = data 
 
 - def findByPack ( packId : Int ) = stickerDatas . filter ( _ . packId = = = packId ) . result 
 + def find ( id : Int ) = stickerData . filter ( _ . id = = = id ) . result 
 + 
 + def findByPack ( packId : Int ) = stickerData . filter ( _ . packId = = = packId ) . result 
 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala 
 index f0d560f . . a280f61 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala 
 @ @ - 1 , 8 + 1 , 11 @ @ 
 package im . actor . server . persist 
 
 + import im . actor . server . db . ActorPostgresDriver 
 + import slick . dbio . Effect . Read 
 import slick . lifted . Tag 
 import im . actor . server . db . ActorPostgresDriver . api . _ 
 import im . actor . server . model . StickerPack 
 + import slick . profile . FixedSqlAction 
 
 class StickerPackTable ( tag : Tag ) extends Table [ StickerPack ] ( tag , " sticker _ packs " ) { 
 def id = column [ Int ] ( " id " , O . PrimaryKey ) 
 @ @ - 23 , 6 + 26 , 8 @ @ object StickerPackRepo { 
 
 / / def findOwnPacks ( userId : Int ) = stickerPacks . filter ( p ⇒ p . isDefault | | p . ownerUserId = = = userId ) . result 
 
 + def exists ( userId : Int , packId : Int ) : DBIO [ Boolean ] = stickerPacks . filter ( p ⇒ ( p . id = = = packId ) & & ( p . ownerUserId = = = userId ) ) . exists . result 
 + 
 def find ( id : Int ) = stickerPacks . filter ( _ . id = = = id ) . result . headOption 
 
 def find ( ids : Seq [ Int ] , withDefault : Boolean = true ) : DBIO [ Seq [ StickerPack ] ] = 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala 
 index e1b2d50 . . 50eab8a 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala 
 @ @ - 40 , 6 + 40 , 9 @ @ trait FutureResultCats [ ErrorCase ] { 
 def fromFutureEither [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Either [ Throwable , A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ Xor . fromEither ( either . left . map ( errorHandle ) ) ) ) 
 
 + def fromFutureXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Throwable Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 + XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ either . leftMap ( errorHandle ) ) ) 
 + 
 def fromFutureBoolean ( failure : ErrorCase ) ( fa : Future [ Boolean ] ) ( implicit ec : ExecutionContext ) : Result [ Unit ] = 
 XorT [ Future , ErrorCase , Unit ] ( fa map ( _ . toXor ( failure ) ) ) 
 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 2ef537a . . 2c5a220 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 50 , 8 + 50 , 8 @ @ final case class ActorServer ( system : ActorSystem ) 
 object ActorServer { 
 / * * 
 * Creates a new Actor Server builder 
 - * 
 - * @ return 
 + * 
 + * @ return 
 * / 
 def newBuilder : ActorServerBuilder = ActorServerBuilder ( ) 
 } 
 @ @ - 73 , 8 + 73 , 8 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 
 / * * 
 * Starts a server 
 - * 
 - * @ return 
 + * 
 + * @ return 
 * / 
 def start ( ) : ActorServer = { 
 SessionMessage . register ( ) 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index afecc15 . . ce81cf8 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import sbt . _ 
 object Dependencies { 
 object V { 
 val actorCommons = " 0 . 0 . 8 " 
 - val actorBotkit = " 1 . 0 . 50 " 
 + val actorBotkit = " 1 . 0 . 52 " 
 val akka = " 2 . 4 . 0 " 
 val akkaExperimental = " 2 . 0 - M1 " 
 val cats = " 0 . 2 . 0 "
