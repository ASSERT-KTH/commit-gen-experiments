BLEU SCORE: 0.038996373622972556

TEST MSG: fix ( server : messaging ) : fixed DialogState and migrators
GENERATED MSG: perf ( server ) : don ' t use im . actor . server . persist for loading users in LoadDialogs handler

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > index 0930bbb . . 1991826 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > @ @ - 53 , 6 + 53 , 7 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > < nl > case PersistEvents ( events ) ⇒ < nl > persistAll ( events ) { _ ⇒ < nl > + events foreach commit < nl > unstashAll ( ) < nl > context become receiveCommand < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > index 048a0fd . . bd2f7df 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > @ @ - 66 , 7 + 66 , 8 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { < nl > Favourited ( ts , Some ( dialog . peer ) ) < nl > } < nl > < nl > - persistAll ( Initialized ( Instant . now ( ) ) + : ( created + + archived + + favourited ) . toList ) { _ ⇒ < nl > + persistAll ( Initialized ( Instant . now ( ) ) + : ( created + + archived + + favourited ) . toList ) { events ⇒ < nl > + events foreach commit < nl > onComplete < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > index f7516a9 . . 39c44dd 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > @ @ - 73 , 8 + 73 , 10 @ @ private [ dialog ] final case class DialogState ( < nl > unreadMessages = newUnreadMessages , < nl > unreadMessagesMap = newUnreadMessagesMap < nl > ) < nl > - case MessagesRead ( date , readerUserId ) if readerUserId ! = userId & & date . isAfter ( lastReadDate ) ⇒ < nl > - this . copy ( lastReadDate = date ) < nl > + case MessagesRead ( date , readerUserId ) if readerUserId ! = userId ⇒ < nl > + if ( date . isAfter ( lastReadDate ) ) < nl > + this . copy ( lastReadDate = date ) < nl > + else this < nl > case MessagesReceived ( date ) if date . isAfter ( lastReceiveDate ) ⇒ this . copy ( lastReceiveDate = date ) < nl > case CounterReset ( ) ⇒ < nl > this . copy ( counter = 0 , unreadMessages = SortedSet . empty ( UnreadMessage . OrderingAsc ) , unreadMessagesMap = Map . empty )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > index 345f913 . . 1d44771 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > @ @ - 82 , 7 + 82 , 6 @ @ trait GroupDialogHandlers extends UpdateCounters { < nl > } < nl > < nl > protected def messageRead ( state : GroupDialogState , readerUserId : Int , readerAuthId : Long , date : Long ) : Unit = { < nl > - log . warning ( s " got message read , with state : $ state , readerUserId : $ readerUserId , date : $ date , authId : $ readerAuthId " ) < nl > val replyTo = sender ( ) < nl > withMemberIds ( groupId ) { ( memberIds , invitedUserIds , _ ) ⇒ < nl > if ( ! state . lastSenderId . contains ( readerUserId ) ) { < nl > @ @ - 105 , 13 + 104 , 11 @ @ trait GroupDialogHandlers extends UpdateCounters { < nl > < nl > val now = new DateTime ( ) . getMillis < nl > val restMembers = memberIds . filterNot ( _ = = readerUserId ) < nl > - log . warning ( s " restMembers are $ restMembers " ) < nl > val authIdsF = Future . sequence ( restMembers map UserOffice . getAuthIds ) map ( _ . flatten . toSet ) < nl > < nl > for { < nl > authIds ← authIdsF < nl > _ ← db . run ( markMessagesRead ( models . Peer . privat ( readerUserId ) , models . Peer . group ( groupId ) , new DateTime ( date ) ) ) < nl > - _ = log . warning ( s " now is : $ now actually reading by user : $ readerUserId " ) < nl > _ ← persistAndPushUpdatesF ( authIds , UpdateMessageRead ( groupPeer , date , now ) , None , isFat = false ) < nl > } yield MessageReadAck ( ) < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > index c91ce8a . . de67bd2 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > @ @ - 71 , 7 + 71 , 7 @ @ trait Processor [ State < : ProcessorState , Event < : AnyRef ] extends PersistentActo < nl > context become working ( newState ) < nl > unstashAll ( ) < nl > case msg ⇒ < nl > - log . debug ( " Stashing while initializing . Message : { } " , msg ) < nl > + log . warning ( " Stashing while initializing . Message : { } " , msg ) < nl > stash ( ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > index 07c8777 . . 4541e2c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > @ @ - 135 , 7 + 135 , 6 @ @ object SeqUpdatesManager { < nl > < nl > val fatMetaData = if ( isFat ) Some ( getFatMetaData ( update ) ) else None < nl > < nl > - log . debug ( s " pushing update $ update to authIds : $ authIds " ) < nl > persistAndPushUpdatesF ( authIds , header , serializedData , updateRefs ( update ) , pushText , getOriginPeer ( update ) , fatMetaData ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > index ac20104 . . 7884fb0 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > @ @ - 253 , 7 + 253 , 7 @ @ trait HistoryHandlers { < nl > for { < nl > groups ← DBIO . from ( Future . sequence ( groupIds map ( GroupOffice . getApiStruct ( _ , client . userId ) ) ) ) < nl > groupUserIds = groups . map ( g ⇒ g . members . map ( m ⇒ Seq ( m . userId , m . inviterUserId ) ) . flatten : + g . creatorUserId ) . flatten < nl > - users ← getUserStructs ( userIds + + groupUserIds , client . userId , client . authId ) < nl > + users ← DBIO . from ( Future . sequence ( ( userIds + + groupUserIds ) . filterNot ( _ = = 0 ) map ( UserOffice . getApiStruct ( _ , client . userId , client . authId ) ) ) ) < nl > } yield ( users , groups ) < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 index 0930bbb . . 1991826 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 @ @ - 53 , 6 + 53 , 7 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { 
 
 case PersistEvents ( events ) ⇒ 
 persistAll ( events ) { _ ⇒ 
 + events foreach commit 
 unstashAll ( ) 
 context become receiveCommand 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 index 048a0fd . . bd2f7df 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 @ @ - 66 , 7 + 66 , 8 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { 
 Favourited ( ts , Some ( dialog . peer ) ) 
 } 
 
 - persistAll ( Initialized ( Instant . now ( ) ) + : ( created + + archived + + favourited ) . toList ) { _ ⇒ 
 + persistAll ( Initialized ( Instant . now ( ) ) + : ( created + + archived + + favourited ) . toList ) { events ⇒ 
 + events foreach commit 
 onComplete 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 index f7516a9 . . 39c44dd 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 @ @ - 73 , 8 + 73 , 10 @ @ private [ dialog ] final case class DialogState ( 
 unreadMessages = newUnreadMessages , 
 unreadMessagesMap = newUnreadMessagesMap 
 ) 
 - case MessagesRead ( date , readerUserId ) if readerUserId ! = userId & & date . isAfter ( lastReadDate ) ⇒ 
 - this . copy ( lastReadDate = date ) 
 + case MessagesRead ( date , readerUserId ) if readerUserId ! = userId ⇒ 
 + if ( date . isAfter ( lastReadDate ) ) 
 + this . copy ( lastReadDate = date ) 
 + else this 
 case MessagesReceived ( date ) if date . isAfter ( lastReceiveDate ) ⇒ this . copy ( lastReceiveDate = date ) 
 case CounterReset ( ) ⇒ 
 this . copy ( counter = 0 , unreadMessages = SortedSet . empty ( UnreadMessage . OrderingAsc ) , unreadMessagesMap = Map . empty )

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 index 345f913 . . 1d44771 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 @ @ - 82 , 7 + 82 , 6 @ @ trait GroupDialogHandlers extends UpdateCounters { 
 } 
 
 protected def messageRead ( state : GroupDialogState , readerUserId : Int , readerAuthId : Long , date : Long ) : Unit = { 
 - log . warning ( s " got message read , with state : $ state , readerUserId : $ readerUserId , date : $ date , authId : $ readerAuthId " ) 
 val replyTo = sender ( ) 
 withMemberIds ( groupId ) { ( memberIds , invitedUserIds , _ ) ⇒ 
 if ( ! state . lastSenderId . contains ( readerUserId ) ) { 
 @ @ - 105 , 13 + 104 , 11 @ @ trait GroupDialogHandlers extends UpdateCounters { 
 
 val now = new DateTime ( ) . getMillis 
 val restMembers = memberIds . filterNot ( _ = = readerUserId ) 
 - log . warning ( s " restMembers are $ restMembers " ) 
 val authIdsF = Future . sequence ( restMembers map UserOffice . getAuthIds ) map ( _ . flatten . toSet ) 
 
 for { 
 authIds ← authIdsF 
 _ ← db . run ( markMessagesRead ( models . Peer . privat ( readerUserId ) , models . Peer . group ( groupId ) , new DateTime ( date ) ) ) 
 - _ = log . warning ( s " now is : $ now actually reading by user : $ readerUserId " ) 
 _ ← persistAndPushUpdatesF ( authIds , UpdateMessageRead ( groupPeer , date , now ) , None , isFat = false ) 
 } yield MessageReadAck ( ) 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 index c91ce8a . . de67bd2 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 @ @ - 71 , 7 + 71 , 7 @ @ trait Processor [ State < : ProcessorState , Event < : AnyRef ] extends PersistentActo 
 context become working ( newState ) 
 unstashAll ( ) 
 case msg ⇒ 
 - log . debug ( " Stashing while initializing . Message : { } " , msg ) 
 + log . warning ( " Stashing while initializing . Message : { } " , msg ) 
 stash ( ) 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 index 07c8777 . . 4541e2c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 @ @ - 135 , 7 + 135 , 6 @ @ object SeqUpdatesManager { 
 
 val fatMetaData = if ( isFat ) Some ( getFatMetaData ( update ) ) else None 
 
 - log . debug ( s " pushing update $ update to authIds : $ authIds " ) 
 persistAndPushUpdatesF ( authIds , header , serializedData , updateRefs ( update ) , pushText , getOriginPeer ( update ) , fatMetaData ) 
 } 
 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 index ac20104 . . 7884fb0 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 @ @ - 253 , 7 + 253 , 7 @ @ trait HistoryHandlers { 
 for { 
 groups ← DBIO . from ( Future . sequence ( groupIds map ( GroupOffice . getApiStruct ( _ , client . userId ) ) ) ) 
 groupUserIds = groups . map ( g ⇒ g . members . map ( m ⇒ Seq ( m . userId , m . inviterUserId ) ) . flatten : + g . creatorUserId ) . flatten 
 - users ← getUserStructs ( userIds + + groupUserIds , client . userId , client . authId ) 
 + users ← DBIO . from ( Future . sequence ( ( userIds + + groupUserIds ) . filterNot ( _ = = 0 ) map ( UserOffice . getApiStruct ( _ , client . userId , client . authId ) ) ) ) 
 } yield ( users , groups ) 
 }
