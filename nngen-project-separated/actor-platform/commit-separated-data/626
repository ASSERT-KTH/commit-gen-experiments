BLEU SCORE: 0.5593684915933074

TEST MSG: feat ( server : bots ) : add / remove bot slash commands
GENERATED MSG: feat ( server : bots ) : add nickname change

TEST DIFF (one line): diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > index fb845e3 . . 8f2b57b 100644 < nl > - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > @ @ - 52 , 6 + 52 , 12 @ @ object BotMessages { < nl > @ beanGetter fullImage : Option [ AvatarImage ] < nl > ) < nl > < nl > + final case class BotCommand ( < nl > + @ beanGetter slashCommand : String , < nl > + @ beanGetter description : String , < nl > + locKey : Option [ String ] < nl > + ) { def getLocKey = locKey . asJava } < nl > + < nl > final case class ContactInfo ( < nl > phones : Seq [ Long ] , < nl > emails : Seq [ String ] < nl > @ @ - 429 , 6 + 435 , 28 @ @ object BotMessages { < nl > def getAbout = about . asJava < nl > } < nl > < nl > + @ key ( " AddSlashCommand " ) < nl > + final case class AddSlashCommand ( < nl > + @ beanGetter userId : Int , < nl > + @ beanGetter command : BotCommand < nl > + ) extends RequestBody { < nl > + override type Response = Void < nl > + override val service = Services . Users < nl > + < nl > + override def readResponse ( obj : Js . Obj ) = readJs [ Response ] ( obj ) < nl > + } < nl > + < nl > + @ key ( " RemoveSlashCommand " ) < nl > + final case class RemoveSlashCommand ( < nl > + @ beanGetter userId : Int , < nl > + @ beanGetter slashCommand : String < nl > + ) extends RequestBody { < nl > + override type Response = Void < nl > + override val service = Services . Users < nl > + < nl > + override def readResponse ( obj : Js . Obj ) = readJs [ Response ] ( obj ) < nl > + } < nl > + < nl > @ key ( " IsAdmin " ) < nl > final case class IsAdmin ( @ beanGetter userId : Int ) extends RequestBody { < nl > override type Response = ResponseIsAdmin < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToInternalConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToInternalConversions . scala < nl > index 4eca5f1 . . 19356da 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToInternalConversions . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToInternalConversions . scala < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . server . bot < nl > < nl > import im . actor . bots . BotMessages < nl > + import im . actor . server . bots . BotCommand < nl > import im . actor . server . file . { FileLocation , AvatarImage , Avatar } < nl > < nl > import scala . language . implicitConversions < nl > @ @ - 17 , 4 + 18 , 7 @ @ trait BotToInternalConversions { < nl > < nl > implicit def toAvatar ( avatar : BotMessages . Avatar ) : Avatar = < nl > Avatar ( avatar . smallImage , avatar . largeImage , avatar . fullImage ) < nl > + < nl > + implicit def toBotCommand ( command : BotMessages . BotCommand ) : BotCommand = < nl > + BotCommand ( command . slashCommand , command . description , command . locKey ) < nl > } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > index 1f19960 . . 4db45ce 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > @ @ - 2 , 11 + 2 , 12 @ @ package im . actor . server . bot . services < nl > < nl > import akka . actor . ActorSystem < nl > import cats . data . Xor < nl > + import im . actor . bots . BotMessages < nl > import im . actor . bots . BotMessages . BotError < nl > import im . actor . concurrent . FutureResult < nl > import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } < nl > import im . actor . server . db . DbExtension < nl > - import im . actor . server . file . { ImageUtils , FileStorageExtension , FileStorageAdapter } < nl > + import im . actor . server . file . { FileStorageAdapter , FileStorageExtension , ImageUtils } < nl > import im . actor . server . user . { UserErrors , UserUtils } < nl > < nl > private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResult [ BotError ] with ApiToBotConversions { < nl > @ @ - 20 , 12 + 21 , 14 @ @ private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotService < nl > private implicit val _ system = system < nl > < nl > override val handlers : Handlers = { < nl > - case ChangeUserAvatar ( userId , fileLocation ) ⇒ changeUserAvatar ( userId , fileLocation ) . toWeak < nl > - case ChangeUserName ( userId , name ) ⇒ changeUserName ( userId , name ) . toWeak < nl > - case ChangeUserNickname ( userId , nickname ) ⇒ changeUserNickname ( userId , nickname ) . toWeak < nl > - case ChangeUserAbout ( userId , about ) ⇒ changeUserAbout ( userId , about ) . toWeak < nl > - case FindUser ( query ) ⇒ findUser ( query ) . toWeak < nl > - case IsAdmin ( userId ) ⇒ isAdmin ( userId ) . toWeak < nl > + case ChangeUserAvatar ( userId , fileLocation ) ⇒ changeUserAvatar ( userId , fileLocation ) . toWeak < nl > + case ChangeUserName ( userId , name ) ⇒ changeUserName ( userId , name ) . toWeak < nl > + case ChangeUserNickname ( userId , nickname ) ⇒ changeUserNickname ( userId , nickname ) . toWeak < nl > + case ChangeUserAbout ( userId , about ) ⇒ changeUserAbout ( userId , about ) . toWeak < nl > + case AddSlashCommand ( userId , command ) ⇒ addSlashCommand ( userId , command ) . toWeak < nl > + case RemoveSlashCommand ( userId , slashCommand ) ⇒ removeSlashCommand ( userId , slashCommand ) . toWeak < nl > + case FindUser ( query ) ⇒ findUser ( query ) . toWeak < nl > + case IsAdmin ( userId ) ⇒ isAdmin ( userId ) . toWeak < nl > } < nl > < nl > private def changeUserName ( userId : Int , name : String ) = RequestHandler [ ChangeUserName , ChangeUserName # Response ] { < nl > @ @ - 87 , 4 + 90 , 28 @ @ private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotService < nl > } yield ResponseIsAdmin ( isAdmin ) ) . value < nl > } < nl > } < nl > + < nl > + private def addSlashCommand ( userId : Int , command : BotCommand ) = RequestHandler [ AddSlashCommand , AddSlashCommand # Response ] { < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ < nl > + ifIsAdmin ( botUserId ) { < nl > + ( for { < nl > + _ ← fromFuture ( handleBotCommandErrors ) ( userExt . addBotCommand ( userId , command ) ) < nl > + } yield Void ) . value < nl > + } < nl > + } < nl > + < nl > + private def removeSlashCommand ( userId : Int , slashCommand : String ) = RequestHandler [ RemoveSlashCommand , RemoveSlashCommand # Response ] { < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ < nl > + ifIsAdmin ( botUserId ) { < nl > + ( for { < nl > + _ ← fromFuture ( handleBotCommandErrors ) ( userExt . removeBotCommand ( userId , slashCommand ) ) < nl > + } yield Void ) . value < nl > + } < nl > + } < nl > + < nl > + private def handleBotCommandErrors : PartialFunction [ Throwable , BotMessages . BotError ] = { < nl > + case UserErrors . InvalidBotCommand ( _ ) ⇒ BotError ( 400 , " INVALID _ SLASH _ COMMAND " ) < nl > + case UserErrors . BotCommandAlreadyExists ( _ ) ⇒ BotError ( 400 , " SLASH _ COMMAND _ EXISTS " ) < nl > + } < nl > + < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > index 635600f . . b5ed017 100644 < nl > - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala < nl > @ @ - 325 , 6 + 325 , 7 @ @ object BotMessages { < nl > override def readResponse ( obj : Js . Obj ) = readJs [ ContainerList [ String ] ] ( obj ) < nl > } < nl > < nl > + / / username is nickname < nl > @ key ( " CreateBot " ) < nl > final case class CreateBot ( < nl > @ beanGetter username : String , < nl > @ @ - 383 , 6 + 384 , 17 @ @ object BotMessages { < nl > override def readResponse ( obj : Js . Obj ) = readJs [ Response ] ( obj ) < nl > } < nl > < nl > + @ key ( " ChangeUserNickname " ) < nl > + final case class ChangeUserNickname ( < nl > + @ beanGetter userId : Int , < nl > + @ beanGetter nickname : Option [ String ] < nl > + ) extends RequestBody { < nl > + override type Response = Void < nl > + override val service = Services . Users < nl > + < nl > + override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) < nl > + } < nl > + < nl > @ key ( " ChangeUserAbout " ) < nl > final case class ChangeUserAbout ( < nl > @ beanGetter userId : Int , < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > index 44e8d36 . . 18a13dd 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > @ @ - 85 , 7 + 85 , 7 @ @ private [ bot ] final class BotExtension ( _ system : ActorSystem ) extends Extension { < nl > user ← userExt . create ( < nl > userId = userId , < nl > accessSalt = ACLUtils . nextAccessSalt ( ) , < nl > - Some ( nickname ) , < nl > + nickname = Some ( nickname ) , < nl > name = name , < nl > countryCode = " US " , < nl > sex = ApiSex . Unknown , < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsBotService . scala < nl > index c716525 . . 98825e1 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsBotService . scala < nl > @ @ - 12 , 11 + 12 , 11 @ @ private [ bot ] final class BotsBotService ( system : ActorSystem ) extends BotServiceB < nl > < nl > val botExt = BotExtension ( system ) < nl > < nl > - private def createBot ( username : String , name : String ) = RequestHandler [ CreateBot , CreateBot # Response ] ( < nl > + private def createBot ( nickname : String , name : String ) = RequestHandler [ CreateBot , CreateBot # Response ] ( < nl > ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ < nl > ifIsAdmin ( botUserId ) { < nl > ( for { < nl > - ( token , userId ) ← botExt . create ( username , name , isAdmin = false ) < nl > + ( token , userId ) ← botExt . create ( nickname , name , isAdmin = false ) < nl > } yield Right ( BotCreated ( token , userId ) ) ) recover { < nl > case UserErrors . NicknameTaken ⇒ < nl > Left ( BotError ( 400 , " USERNAME _ TAKEN " , Js . Obj ( ) , None ) ) < nl > @ @ - 25 , 6 + 25 , 6 @ @ private [ bot ] final class BotsBotService ( system : ActorSystem ) extends BotServiceB < nl > ) < nl > < nl > override def handlers : PartialFunction [ RequestBody , WeakRequestHandler ] = { < nl > - case CreateBot ( username , name ) ⇒ createBot ( username , name ) . toWeak < nl > + case CreateBot ( nickname , name ) ⇒ createBot ( nickname , name ) . toWeak < nl > } < nl > } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > index 292e277 . . 72a4df1 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > @ @ - 22 , 6 + 22 , 7 @ @ private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotService < nl > override val handlers : Handlers = { < nl > case ChangeUserAvatar ( userId , fileLocation ) ⇒ changeUserAvatar ( userId , fileLocation ) . toWeak < nl > case ChangeUserName ( userId , name ) ⇒ changeUserName ( userId , name ) . toWeak < nl > + case ChangeUserNickname ( userId , nickname ) ⇒ changeUserNickname ( userId , nickname ) . toWeak < nl > case ChangeUserAbout ( userId , about ) ⇒ changeUserAbout ( userId , about ) . toWeak < nl > case FindUser ( query ) ⇒ findUser ( query ) . toWeak < nl > } < nl > @ @ - 31 , 6 + 32 , 15 @ @ private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotService < nl > ifIsAdmin ( botUserId ) { < nl > ( for { < nl > _ ← fromFuture ( userExt . changeName ( userId , name ) ) < nl > + } yield Void ) . value < nl > + } < nl > + } < nl > + < nl > + private def changeUserNickname ( userId : Int , nickname : Option [ String ] ) = RequestHandler [ ChangeUserNickname , ChangeUserNickname # Response ] { < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ < nl > + ifIsAdmin ( botUserId ) { < nl > + ( for { < nl > + _ ← fromFuture ( userExt . changeNickname ( userId , nickname ) ) < nl > } yield Void ) . value recover { < nl > case UserErrors . InvalidNickname ⇒ Xor . left ( BotError ( 400 , " INVALID _ USERNAME " ) ) < nl > case UserErrors . NicknameTaken ⇒ Xor . left ( BotError ( 400 , " USERNAME _ TAKEN " ) )

TEST DIFF:
diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 index fb845e3 . . 8f2b57b 100644 
 - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 @ @ - 52 , 6 + 52 , 12 @ @ object BotMessages { 
 @ beanGetter fullImage : Option [ AvatarImage ] 
 ) 
 
 + final case class BotCommand ( 
 + @ beanGetter slashCommand : String , 
 + @ beanGetter description : String , 
 + locKey : Option [ String ] 
 + ) { def getLocKey = locKey . asJava } 
 + 
 final case class ContactInfo ( 
 phones : Seq [ Long ] , 
 emails : Seq [ String ] 
 @ @ - 429 , 6 + 435 , 28 @ @ object BotMessages { 
 def getAbout = about . asJava 
 } 
 
 + @ key ( " AddSlashCommand " ) 
 + final case class AddSlashCommand ( 
 + @ beanGetter userId : Int , 
 + @ beanGetter command : BotCommand 
 + ) extends RequestBody { 
 + override type Response = Void 
 + override val service = Services . Users 
 + 
 + override def readResponse ( obj : Js . Obj ) = readJs [ Response ] ( obj ) 
 + } 
 + 
 + @ key ( " RemoveSlashCommand " ) 
 + final case class RemoveSlashCommand ( 
 + @ beanGetter userId : Int , 
 + @ beanGetter slashCommand : String 
 + ) extends RequestBody { 
 + override type Response = Void 
 + override val service = Services . Users 
 + 
 + override def readResponse ( obj : Js . Obj ) = readJs [ Response ] ( obj ) 
 + } 
 + 
 @ key ( " IsAdmin " ) 
 final case class IsAdmin ( @ beanGetter userId : Int ) extends RequestBody { 
 override type Response = ResponseIsAdmin 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToInternalConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToInternalConversions . scala 
 index 4eca5f1 . . 19356da 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToInternalConversions . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToInternalConversions . scala 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . server . bot 
 
 import im . actor . bots . BotMessages 
 + import im . actor . server . bots . BotCommand 
 import im . actor . server . file . { FileLocation , AvatarImage , Avatar } 
 
 import scala . language . implicitConversions 
 @ @ - 17 , 4 + 18 , 7 @ @ trait BotToInternalConversions { 
 
 implicit def toAvatar ( avatar : BotMessages . Avatar ) : Avatar = 
 Avatar ( avatar . smallImage , avatar . largeImage , avatar . fullImage ) 
 + 
 + implicit def toBotCommand ( command : BotMessages . BotCommand ) : BotCommand = 
 + BotCommand ( command . slashCommand , command . description , command . locKey ) 
 } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 index 1f19960 . . 4db45ce 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 @ @ - 2 , 11 + 2 , 12 @ @ package im . actor . server . bot . services 
 
 import akka . actor . ActorSystem 
 import cats . data . Xor 
 + import im . actor . bots . BotMessages 
 import im . actor . bots . BotMessages . BotError 
 import im . actor . concurrent . FutureResult 
 import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } 
 import im . actor . server . db . DbExtension 
 - import im . actor . server . file . { ImageUtils , FileStorageExtension , FileStorageAdapter } 
 + import im . actor . server . file . { FileStorageAdapter , FileStorageExtension , ImageUtils } 
 import im . actor . server . user . { UserErrors , UserUtils } 
 
 private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotServiceBase ( system ) with FutureResult [ BotError ] with ApiToBotConversions { 
 @ @ - 20 , 12 + 21 , 14 @ @ private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotService 
 private implicit val _ system = system 
 
 override val handlers : Handlers = { 
 - case ChangeUserAvatar ( userId , fileLocation ) ⇒ changeUserAvatar ( userId , fileLocation ) . toWeak 
 - case ChangeUserName ( userId , name ) ⇒ changeUserName ( userId , name ) . toWeak 
 - case ChangeUserNickname ( userId , nickname ) ⇒ changeUserNickname ( userId , nickname ) . toWeak 
 - case ChangeUserAbout ( userId , about ) ⇒ changeUserAbout ( userId , about ) . toWeak 
 - case FindUser ( query ) ⇒ findUser ( query ) . toWeak 
 - case IsAdmin ( userId ) ⇒ isAdmin ( userId ) . toWeak 
 + case ChangeUserAvatar ( userId , fileLocation ) ⇒ changeUserAvatar ( userId , fileLocation ) . toWeak 
 + case ChangeUserName ( userId , name ) ⇒ changeUserName ( userId , name ) . toWeak 
 + case ChangeUserNickname ( userId , nickname ) ⇒ changeUserNickname ( userId , nickname ) . toWeak 
 + case ChangeUserAbout ( userId , about ) ⇒ changeUserAbout ( userId , about ) . toWeak 
 + case AddSlashCommand ( userId , command ) ⇒ addSlashCommand ( userId , command ) . toWeak 
 + case RemoveSlashCommand ( userId , slashCommand ) ⇒ removeSlashCommand ( userId , slashCommand ) . toWeak 
 + case FindUser ( query ) ⇒ findUser ( query ) . toWeak 
 + case IsAdmin ( userId ) ⇒ isAdmin ( userId ) . toWeak 
 } 
 
 private def changeUserName ( userId : Int , name : String ) = RequestHandler [ ChangeUserName , ChangeUserName # Response ] { 
 @ @ - 87 , 4 + 90 , 28 @ @ private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotService 
 } yield ResponseIsAdmin ( isAdmin ) ) . value 
 } 
 } 
 + 
 + private def addSlashCommand ( userId : Int , command : BotCommand ) = RequestHandler [ AddSlashCommand , AddSlashCommand # Response ] { 
 + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ 
 + ifIsAdmin ( botUserId ) { 
 + ( for { 
 + _ ← fromFuture ( handleBotCommandErrors ) ( userExt . addBotCommand ( userId , command ) ) 
 + } yield Void ) . value 
 + } 
 + } 
 + 
 + private def removeSlashCommand ( userId : Int , slashCommand : String ) = RequestHandler [ RemoveSlashCommand , RemoveSlashCommand # Response ] { 
 + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ 
 + ifIsAdmin ( botUserId ) { 
 + ( for { 
 + _ ← fromFuture ( handleBotCommandErrors ) ( userExt . removeBotCommand ( userId , slashCommand ) ) 
 + } yield Void ) . value 
 + } 
 + } 
 + 
 + private def handleBotCommandErrors : PartialFunction [ Throwable , BotMessages . BotError ] = { 
 + case UserErrors . InvalidBotCommand ( _ ) ⇒ BotError ( 400 , " INVALID _ SLASH _ COMMAND " ) 
 + case UserErrors . BotCommandAlreadyExists ( _ ) ⇒ BotError ( 400 , " SLASH _ COMMAND _ EXISTS " ) 
 + } 
 + 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 index 635600f . . b5ed017 100644 
 - - - a / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 + + + b / actor - server / actor - bots - shared / src / main / scala / im / actor / bots / BotMessages . scala 
 @ @ - 325 , 6 + 325 , 7 @ @ object BotMessages { 
 override def readResponse ( obj : Js . Obj ) = readJs [ ContainerList [ String ] ] ( obj ) 
 } 
 
 + / / username is nickname 
 @ key ( " CreateBot " ) 
 final case class CreateBot ( 
 @ beanGetter username : String , 
 @ @ - 383 , 6 + 384 , 17 @ @ object BotMessages { 
 override def readResponse ( obj : Js . Obj ) = readJs [ Response ] ( obj ) 
 } 
 
 + @ key ( " ChangeUserNickname " ) 
 + final case class ChangeUserNickname ( 
 + @ beanGetter userId : Int , 
 + @ beanGetter nickname : Option [ String ] 
 + ) extends RequestBody { 
 + override type Response = Void 
 + override val service = Services . Users 
 + 
 + override def readResponse ( obj : Js . Obj ) : Response = readJs [ Response ] ( obj ) 
 + } 
 + 
 @ key ( " ChangeUserAbout " ) 
 final case class ChangeUserAbout ( 
 @ beanGetter userId : Int , 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 index 44e8d36 . . 18a13dd 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 @ @ - 85 , 7 + 85 , 7 @ @ private [ bot ] final class BotExtension ( _ system : ActorSystem ) extends Extension { 
 user ← userExt . create ( 
 userId = userId , 
 accessSalt = ACLUtils . nextAccessSalt ( ) , 
 - Some ( nickname ) , 
 + nickname = Some ( nickname ) , 
 name = name , 
 countryCode = " US " , 
 sex = ApiSex . Unknown , 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsBotService . scala 
 index c716525 . . 98825e1 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / BotsBotService . scala 
 @ @ - 12 , 11 + 12 , 11 @ @ private [ bot ] final class BotsBotService ( system : ActorSystem ) extends BotServiceB 
 
 val botExt = BotExtension ( system ) 
 
 - private def createBot ( username : String , name : String ) = RequestHandler [ CreateBot , CreateBot # Response ] ( 
 + private def createBot ( nickname : String , name : String ) = RequestHandler [ CreateBot , CreateBot # Response ] ( 
 ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ 
 ifIsAdmin ( botUserId ) { 
 ( for { 
 - ( token , userId ) ← botExt . create ( username , name , isAdmin = false ) 
 + ( token , userId ) ← botExt . create ( nickname , name , isAdmin = false ) 
 } yield Right ( BotCreated ( token , userId ) ) ) recover { 
 case UserErrors . NicknameTaken ⇒ 
 Left ( BotError ( 400 , " USERNAME _ TAKEN " , Js . Obj ( ) , None ) ) 
 @ @ - 25 , 6 + 25 , 6 @ @ private [ bot ] final class BotsBotService ( system : ActorSystem ) extends BotServiceB 
 ) 
 
 override def handlers : PartialFunction [ RequestBody , WeakRequestHandler ] = { 
 - case CreateBot ( username , name ) ⇒ createBot ( username , name ) . toWeak 
 + case CreateBot ( nickname , name ) ⇒ createBot ( nickname , name ) . toWeak 
 } 
 } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 index 292e277 . . 72a4df1 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 @ @ - 22 , 6 + 22 , 7 @ @ private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotService 
 override val handlers : Handlers = { 
 case ChangeUserAvatar ( userId , fileLocation ) ⇒ changeUserAvatar ( userId , fileLocation ) . toWeak 
 case ChangeUserName ( userId , name ) ⇒ changeUserName ( userId , name ) . toWeak 
 + case ChangeUserNickname ( userId , nickname ) ⇒ changeUserNickname ( userId , nickname ) . toWeak 
 case ChangeUserAbout ( userId , about ) ⇒ changeUserAbout ( userId , about ) . toWeak 
 case FindUser ( query ) ⇒ findUser ( query ) . toWeak 
 } 
 @ @ - 31 , 6 + 32 , 15 @ @ private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotService 
 ifIsAdmin ( botUserId ) { 
 ( for { 
 _ ← fromFuture ( userExt . changeName ( userId , name ) ) 
 + } yield Void ) . value 
 + } 
 + } 
 + 
 + private def changeUserNickname ( userId : Int , nickname : Option [ String ] ) = RequestHandler [ ChangeUserNickname , ChangeUserNickname # Response ] { 
 + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ 
 + ifIsAdmin ( botUserId ) { 
 + ( for { 
 + _ ← fromFuture ( userExt . changeNickname ( userId , nickname ) ) 
 } yield Void ) . value recover { 
 case UserErrors . InvalidNickname ⇒ Xor . left ( BotError ( 400 , " INVALID _ USERNAME " ) ) 
 case UserErrors . NicknameTaken ⇒ Xor . left ( BotError ( 400 , " USERNAME _ TAKEN " ) )
