BLEU SCORE: 0.20024850746991507

TEST MSG: fix ( server ) : removed println
GENERATED MSG: fix ( server : messaging ) : process Initialized event

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > index 51f746e . . d44f926 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > @ @ - 69 , 13 + 69 , 11 @ @ private [ dialog ] case class ActiveDialogs ( < nl > } < nl > < nl > def withoutPeer ( sd : SortableDialog ) = { < nl > - val res = sd . peer . typ match { < nl > + sd . peer . typ match { < nl > case PeerType . Private ⇒ copy ( dms = dms . filterNot ( _ . peer = = sd . peer ) , favourites = favourites . filterNot ( _ . peer = = sd . peer ) ) < nl > case PeerType . Group ⇒ copy ( groups = groups . filterNot ( _ . peer = = sd . peer ) , favourites = favourites . filterNot ( _ . peer = = sd . peer ) ) < nl > case unknown ⇒ throw PeerErrors . UnknownPeerType ( unknown ) < nl > } < nl > - println ( res . groups ) < nl > - res < nl > } < nl > < nl > def withFavouritedPeer ( sd : SortableDialog ) = {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > index de032bc . . af782e8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > @ @ - 62 , 6 + 62 , 7 @ @ private [ dialog ] final case class DialogRootState ( < nl > case Unarchived ( ts , Some ( peer ) ) ⇒ withShownPeer ( ts , peer ) < nl > case Favourited ( ts , Some ( peer ) ) ⇒ withFavouritedPeer ( ts , peer ) < nl > case Unfavourited ( ts , Some ( peer ) ) ⇒ withUnfavouritedPeer ( ts , peer ) < nl > + case Initialized ( _ ) = > this < nl > } < nl > < nl > lazy val allPeers = activePeers + + archived < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > index 39c44dd . . 5db57e9 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > @ @ - 80 , 6 + 80 , 7 @ @ private [ dialog ] final case class DialogState ( < nl > case MessagesReceived ( date ) if date . isAfter ( lastReceiveDate ) ⇒ this . copy ( lastReceiveDate = date ) < nl > case CounterReset ( ) ⇒ < nl > this . copy ( counter = 0 , unreadMessages = SortedSet . empty ( UnreadMessage . OrderingAsc ) , unreadMessagesMap = Map . empty ) < nl > + case Initialized ( ) = > this < nl > } < nl > < nl > override def withSnapshot ( metadata : SnapshotMetadata , snapshot : Any ) : DialogState = snapshot match {

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 index 51f746e . . d44f926 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 @ @ - 69 , 13 + 69 , 11 @ @ private [ dialog ] case class ActiveDialogs ( 
 } 
 
 def withoutPeer ( sd : SortableDialog ) = { 
 - val res = sd . peer . typ match { 
 + sd . peer . typ match { 
 case PeerType . Private ⇒ copy ( dms = dms . filterNot ( _ . peer = = sd . peer ) , favourites = favourites . filterNot ( _ . peer = = sd . peer ) ) 
 case PeerType . Group ⇒ copy ( groups = groups . filterNot ( _ . peer = = sd . peer ) , favourites = favourites . filterNot ( _ . peer = = sd . peer ) ) 
 case unknown ⇒ throw PeerErrors . UnknownPeerType ( unknown ) 
 } 
 - println ( res . groups ) 
 - res 
 } 
 
 def withFavouritedPeer ( sd : SortableDialog ) = {

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 index de032bc . . af782e8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 @ @ - 62 , 6 + 62 , 7 @ @ private [ dialog ] final case class DialogRootState ( 
 case Unarchived ( ts , Some ( peer ) ) ⇒ withShownPeer ( ts , peer ) 
 case Favourited ( ts , Some ( peer ) ) ⇒ withFavouritedPeer ( ts , peer ) 
 case Unfavourited ( ts , Some ( peer ) ) ⇒ withUnfavouritedPeer ( ts , peer ) 
 + case Initialized ( _ ) = > this 
 } 
 
 lazy val allPeers = activePeers + + archived 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 index 39c44dd . . 5db57e9 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 @ @ - 80 , 6 + 80 , 7 @ @ private [ dialog ] final case class DialogState ( 
 case MessagesReceived ( date ) if date . isAfter ( lastReceiveDate ) ⇒ this . copy ( lastReceiveDate = date ) 
 case CounterReset ( ) ⇒ 
 this . copy ( counter = 0 , unreadMessages = SortedSet . empty ( UnreadMessage . OrderingAsc ) , unreadMessagesMap = Map . empty ) 
 + case Initialized ( ) = > this 
 } 
 
 override def withSnapshot ( metadata : SnapshotMetadata , snapshot : Any ) : DialogState = snapshot match {
