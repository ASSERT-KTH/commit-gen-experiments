BLEU SCORE: 0.1996939588188939

TEST MSG: feat ( core ) : Added support to FullUser
GENERATED MSG: feat ( core + js ) : load archived dialogs

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index 1891775 . . 2cbe2a9 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 1900 , 7 + 1900 , 7 @ @ < nl > 	 	 	 	 TargetAttributes = { < nl > 	 	 	 	 	 066A50D11BC4AE63000E606E = { < nl > 	 	 	 	 	 	 CreatedOnToolsVersion = 7 . 0 ; < nl > - 	 	 	 	 	 	 DevelopmentTeam = DR9YEJ8YRD ; < nl > + 	 	 	 	 	 	 DevelopmentTeam = HVJR44Y5B6 ; < nl > 	 	 	 	 	 } ; < nl > 	 	 	 	 } ; < nl > 	 	 	 } ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > index d68a4e5 . . b7fae0d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > @ @ - 67 , 6 + 67 , 10 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV < nl > @ SuppressWarnings ( " NullableProblems " ) < nl > private List < ContactRecord > records ; < nl > < nl > + @ NotNull < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private boolean haveExtension ; < nl > + < nl > public User ( @ NotNull ApiUser wrappedUser , @ Nullable ApiFullUser ext ) { < nl > super ( RECORD _ ID , RECORD _ FULL _ ID , wrappedUser , ext ) ; < nl > } < nl > @ @ - 131 , 6 + 135 , 10 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV < nl > return sex ; < nl > } < nl > < nl > + public boolean isHaveExtension ( ) { < nl > + return haveExtension ; < nl > + } < nl > + < nl > @ NotNull < nl > public List < ContactRecord > getRecords ( ) { < nl > return records ; < nl > @ @ - 260 , 6 + 268 , 7 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV < nl > / / Extension < nl > < nl > if ( ext ! = null ) { < nl > + this . haveExtension = true ; < nl > this . records = new ArrayList < > ( ) ; < nl > for ( ApiContactRecord record : ext . getContactInfo ( ) ) { < nl > if ( record . getType ( ) = = ApiContactType . PHONE ) { < nl > @ @ - 278 , 6 + 287 , 7 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV < nl > } < nl > this . about = ext . getAbout ( ) ; < nl > } else { < nl > + this . haveExtension = false ; < nl > this . records = new ArrayList < > ( ) ; < nl > this . about = null ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Configuration . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Configuration . java < nl > deleted file mode 100644 < nl > index 0c67016 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Configuration . java < nl > + + + / dev / null < nl > @ @ - 1 , 20 + 0 , 0 @ @ < nl > - package im . actor . core . modules ; < nl > - < nl > - import java . util . ArrayList ; < nl > - import java . util . Collections ; < nl > - import java . util . List ; < nl > - < nl > - import im . actor . core . api . ApiUpdateOptimization ; < nl > - < nl > - public class Configuration { < nl > - < nl > - public static final List < ApiUpdateOptimization > OPTIMIZATIONS ; < nl > - < nl > - static { < nl > - List < ApiUpdateOptimization > opts = new ArrayList < > ( ) ; < nl > - opts . add ( ApiUpdateOptimization . STRIP _ ENTITIES ) ; < nl > - opts . add ( ApiUpdateOptimization . STRIP _ COUNTERS ) ; < nl > - opts . add ( ApiUpdateOptimization . COMPACT _ USERS ) ; < nl > - OPTIMIZATIONS = Collections . unmodifiableList ( opts ) ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java < nl > index e919456 . . 86b9238 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java < nl > @ @ - 179 , 6 + 179 , 8 @ @ public class Modules implements ModuleContext { < nl > < nl > < nl > timing = new Timing ( " ACCOUNT _ RUN " ) ; < nl > + timing . section ( " Users " ) ; < nl > + users . run ( ) ; < nl > timing . section ( " Settings " ) ; < nl > settings . run ( ) ; < nl > timing . section ( " DeviceInfo " ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / ApiSupportConfiguration . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / ApiSupportConfiguration . java < nl > new file mode 100644 < nl > index 0000000 . . 38f9632 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / ApiSupportConfiguration . java < nl > @ @ - 0 , 0 + 1 , 20 @ @ < nl > + package im . actor . core . modules . api ; < nl > + < nl > + import java . util . ArrayList ; < nl > + import java . util . Collections ; < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . api . ApiUpdateOptimization ; < nl > + < nl > + public class ApiSupportConfiguration { < nl > + < nl > + public static final List < ApiUpdateOptimization > OPTIMIZATIONS ; < nl > + < nl > + static { < nl > + List < ApiUpdateOptimization > opts = new ArrayList < > ( ) ; < nl > + opts . add ( ApiUpdateOptimization . STRIP _ ENTITIES ) ; < nl > + opts . add ( ApiUpdateOptimization . STRIP _ COUNTERS ) ; < nl > + opts . add ( ApiUpdateOptimization . COMPACT _ USERS ) ; < nl > + OPTIMIZATIONS = Collections . unmodifiableList ( opts ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / BookImportActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / BookImportActor . java < nl > index 35e9776 . . 6be814e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / BookImportActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / BookImportActor . java < nl > @ @ - 4 , 19 + 4 , 15 @ @ < nl > < nl > package im . actor . core . modules . contacts ; < nl > < nl > - import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > - import java . util . Arrays ; < nl > import java . util . HashSet ; < nl > import java . util . List ; < nl > < nl > import im . actor . core . api . ApiUserOutPeer ; < nl > import im . actor . core . entity . PhoneBookIds ; < nl > - import im . actor . core . modules . Configuration ; < nl > + import im . actor . core . modules . api . ApiSupportConfiguration ; < nl > import im . actor . core . modules . contacts . entity . BookImportStorage ; < nl > - import im . actor . core . providers . PhoneBookProvider ; < nl > import im . actor . core . api . ApiEmailToImport ; < nl > - import im . actor . core . api . ApiGroup ; < nl > import im . actor . core . api . ApiPhoneToImport ; < nl > import im . actor . core . api . ApiUser ; < nl > import im . actor . core . api . base . FatSeqUpdate ; < nl > @ @ - 31 , 12 + 27 , 16 @ @ import im . actor . core . modules . ModuleActor ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > import im . actor . runtime . bser . Bser ; < nl > < nl > public class BookImportActor extends ModuleActor { < nl > < nl > private static final String TAG = " ContactsImport " ; < nl > < nl > + / / j2objc workaround < nl > + private static final Void DUMB = null ; < nl > + < nl > private final boolean ENABLE _ LOG ; < nl > < nl > private static final int MAX _ IMPORT _ SIZE = 50 ; < nl > @ @ - 218 , 7 + 218 , 7 @ @ public class BookImportActor extends ModuleActor { < nl > throw new RuntimeException ( ) ; < nl > } < nl > } < nl > - request ( new RequestImportContacts ( phoneToImports , emailToImports , Configuration . OPTIMIZATIONS ) , new RpcCallback < ResponseImportContacts > ( ) { < nl > + request ( new RequestImportContacts ( phoneToImports , emailToImports , ApiSupportConfiguration . OPTIMIZATIONS ) , new RpcCallback < ResponseImportContacts > ( ) { < nl > @ Override < nl > public void onResult ( ResponseImportContacts response ) { < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsModule . java < nl > index 2014fa8 . . c3b4902 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsModule . java < nl > @ @ - 11 , 14 + 11 , 13 @ @ import im . actor . core . api . base . SeqUpdate ; < nl > import im . actor . core . api . rpc . RequestAddContact ; < nl > import im . actor . core . api . rpc . RequestRemoveContact ; < nl > import im . actor . core . api . rpc . RequestSearchContacts ; < nl > - import im . actor . core . api . rpc . ResponseSearchContacts ; < nl > import im . actor . core . api . rpc . ResponseSeq ; < nl > import im . actor . core . api . updates . UpdateContactsAdded ; < nl > import im . actor . core . api . updates . UpdateContactsRemoved ; < nl > import im . actor . core . entity . PhoneBookContact ; < nl > import im . actor . core . entity . User ; < nl > import im . actor . core . modules . AbsModule ; < nl > - import im . actor . core . modules . Configuration ; < nl > + import im . actor . core . modules . api . ApiSupportConfiguration ; < nl > import im . actor . core . modules . Modules ; < nl > import im . actor . core . viewmodel . Command ; < nl > import im . actor . runtime . Storage ; < nl > @ @ - 90 , 7 + 89 , 7 @ @ public class ContactsModule extends AbsModule { < nl > } < nl > < nl > public Promise < UserVM [ ] > findUsers ( final String query ) { < nl > - return api ( new RequestSearchContacts ( query , Configuration . OPTIMIZATIONS ) ) < nl > + return api ( new RequestSearchContacts ( query , ApiSupportConfiguration . OPTIMIZATIONS ) ) < nl > . chain ( responseSearchContacts - > updates ( ) . applyRelatedData ( responseSearchContacts . getUsers ( ) ) ) < nl > . map ( responseSearchContacts1 - > { < nl > ArrayList < UserVM > users = new ArrayList < > ( ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsSyncActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsSyncActor . java < nl > index 001607e . . 7f892f1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsSyncActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsSyncActor . java < nl > @ @ - 9 , 16 + 9 , 14 @ @ import java . io . UnsupportedEncodingException ; < nl > import java . util . ArrayList ; < nl > import java . util . Arrays ; < nl > import java . util . Collections ; < nl > - import java . util . Comparator ; < nl > import java . util . List ; < nl > < nl > - import im . actor . core . api . ApiGroup ; < nl > import im . actor . core . api . ApiUser ; < nl > import im . actor . core . api . rpc . RequestGetContacts ; < nl > import im . actor . core . api . rpc . ResponseGetContacts ; < nl > import im . actor . core . entity . Contact ; < nl > import im . actor . core . entity . User ; < nl > - import im . actor . core . modules . Configuration ; < nl > + import im . actor . core . modules . api . ApiSupportConfiguration ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . ModuleActor ; < nl > import im . actor . core . network . RpcCallback ; < nl > @ @ - 115 , 7 + 113 , 7 @ @ public class ContactsSyncActor extends ModuleActor { < nl > Log . d ( TAG , " Performing sync with uids : " + hash ) ; < nl > } < nl > < nl > - request ( new RequestGetContacts ( hashValue , Configuration . OPTIMIZATIONS ) , new RpcCallback < ResponseGetContacts > ( ) { < nl > + request ( new RequestGetContacts ( hashValue , ApiSupportConfiguration . OPTIMIZATIONS ) , new RpcCallback < ResponseGetContacts > ( ) { < nl > @ Override < nl > public void onResult ( ResponseGetContacts response ) { < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ArchivedDialogsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ArchivedDialogsActor . java < nl > index 1f8b969 . . 9dadad9 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ArchivedDialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ArchivedDialogsActor . java < nl > @ @ - 6 , 7 + 6 , 7 @ @ package im . actor . core . modules . messaging . history ; < nl > < nl > import im . actor . core . api . rpc . RequestLoadArchived ; < nl > import im . actor . core . api . rpc . ResponseLoadArchived ; < nl > - import im . actor . core . modules . Configuration ; < nl > + import im . actor . core . modules . api . ApiSupportConfiguration ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > @ @ - 60 , 7 + 60 , 7 @ @ public class ArchivedDialogsActor extends ModuleActor { < nl > isLoading = true ; < nl > < nl > Log . d ( TAG , " Loading archived dialogs " ) ; < nl > - lastRequest = request ( new RequestLoadArchived ( nextOffset , LIMIT , Configuration . OPTIMIZATIONS ) , < nl > + lastRequest = request ( new RequestLoadArchived ( nextOffset , LIMIT , ApiSupportConfiguration . OPTIMIZATIONS ) , < nl > new RpcCallback < ResponseLoadArchived > ( ) { < nl > @ Override < nl > public void onResult ( final ResponseLoadArchived response ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java < nl > index 7bd66f9 . . e623b33 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java < nl > @ @ - 18 , 7 + 18 , 7 @ @ import im . actor . core . entity . MessageState ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . Reaction ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > - import im . actor . core . modules . Configuration ; < nl > + import im . actor . core . modules . api . ApiSupportConfiguration ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . ModuleActor ; < nl > import im . actor . runtime . Log ; < nl > @ @ - 64 , 7 + 64 , 7 @ @ public class ConversationHistoryActor extends ModuleActor { < nl > return ; < nl > } < nl > isLoading = true ; < nl > - api ( new RequestLoadHistory ( buidOutPeer ( peer ) , historyMaxDate , null , LIMIT , Configuration . OPTIMIZATIONS ) ) < nl > + api ( new RequestLoadHistory ( buidOutPeer ( peer ) , historyMaxDate , null , LIMIT , ApiSupportConfiguration . OPTIMIZATIONS ) ) < nl > . then ( new Consumer < ResponseLoadHistory > ( ) { < nl > @ Override < nl > public void apply ( ResponseLoadHistory responseLoadHistory ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / DialogsHistoryActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / DialogsHistoryActor . java < nl > index 2978b7f . . 5222263 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / DialogsHistoryActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / DialogsHistoryActor . java < nl > @ @ - 10 , 13 + 10 , 11 @ @ import java . util . List ; < nl > import im . actor . core . api . ApiDialog ; < nl > import im . actor . core . api . ApiMessageState ; < nl > import im . actor . core . api . rpc . RequestLoadDialogs ; < nl > - import im . actor . core . api . rpc . ResponseLoadDialogs ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > - import im . actor . core . modules . Configuration ; < nl > + import im . actor . core . modules . api . ApiSupportConfiguration ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . messaging . history . entity . DialogHistory ; < nl > import im . actor . core . modules . ModuleActor ; < nl > - import im . actor . runtime . function . Consumer ; < nl > < nl > import static im . actor . core . entity . EntityConverter . convert ; < nl > < nl > @ @ - 51 , 7 + 49 , 7 @ @ public class DialogsHistoryActor extends ModuleActor { < nl > } < nl > isLoading = true ; < nl > < nl > - api ( new RequestLoadDialogs ( historyMaxDate , LIMIT , Configuration . OPTIMIZATIONS ) ) < nl > + api ( new RequestLoadDialogs ( historyMaxDate , LIMIT , ApiSupportConfiguration . OPTIMIZATIONS ) ) < nl > . chain ( r - > loadRequiredPeers ( r . getUserPeers ( ) , r . getGroupPeers ( ) ) ) < nl > . chain ( r - > updates ( ) . applyRelatedData ( r . getUsers ( ) , r . getGroups ( ) ) ) < nl > . then ( r - > onLoadedMore ( r . getDialogs ( ) ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java < nl > index e8b3ac5 . . face319 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java < nl > @ @ - 7 , 9 + 7 , 6 @ @ package im . actor . core . modules . search ; < nl > import java . util . ArrayList ; < nl > import java . util . List ; < nl > < nl > - import im . actor . core . api . ApiMessageSearchItem ; < nl > - import im . actor . core . api . ApiMessageSearchResult ; < nl > - import im . actor . core . api . ApiPeerSearchResult ; < nl > import im . actor . core . api . ApiSearchAndCondition ; < nl > import im . actor . core . api . ApiSearchCondition ; < nl > import im . actor . core . api . ApiSearchContentType ; < nl > @ @ - 20 , 8 + 17 , 6 @ @ import im . actor . core . api . ApiSearchPeerTypeCondition ; < nl > import im . actor . core . api . ApiSearchPieceText ; < nl > import im . actor . core . api . rpc . RequestMessageSearch ; < nl > import im . actor . core . api . rpc . RequestPeerSearch ; < nl > - import im . actor . core . api . rpc . ResponseMessageSearchResponse ; < nl > - import im . actor . core . api . rpc . ResponsePeerSearch ; < nl > import im . actor . core . entity . Dialog ; < nl > import im . actor . core . entity . MessageSearchEntity ; < nl > import im . actor . core . entity . Peer ; < nl > @ @ - 30 , 16 + 25 , 10 @ @ import im . actor . core . entity . PeerSearchType ; < nl > import im . actor . core . entity . SearchEntity ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . modules . AbsModule ; < nl > - import im . actor . core . modules . Configuration ; < nl > + import im . actor . core . modules . api . ApiSupportConfiguration ; < nl > import im . actor . core . modules . Modules ; < nl > - import im . actor . core . network . RpcCallback ; < nl > - import im . actor . core . network . RpcException ; < nl > - import im . actor . core . viewmodel . Command ; < nl > - import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . runtime . Storage ; < nl > - import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > - import im . actor . runtime . actors . Props ; < nl > import im . actor . runtime . collections . ManagedList ; < nl > import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > @ @ - 98 , 7 + 87 , 7 @ @ public class SearchModule extends AbsModule { < nl > } < nl > < nl > private Promise < List < MessageSearchEntity > > findMessages ( final ApiSearchCondition condition ) { < nl > - return api ( new RequestMessageSearch ( condition , Configuration . OPTIMIZATIONS ) ) < nl > + return api ( new RequestMessageSearch ( condition , ApiSupportConfiguration . OPTIMIZATIONS ) ) < nl > . chain ( responseMessageSearchResponse - > < nl > updates ( ) . applyRelatedData ( < nl > responseMessageSearchResponse . getUsers ( ) , < nl > @ @ - 123 , 7 + 112 , 7 @ @ public class SearchModule extends AbsModule { < nl > ArrayList < ApiSearchCondition > conditions = new ArrayList < > ( ) ; < nl > conditions . add ( new ApiSearchPeerTypeCondition ( apiType ) ) ; < nl > < nl > - return api ( new RequestPeerSearch ( conditions , Configuration . OPTIMIZATIONS ) ) < nl > + return api ( new RequestPeerSearch ( conditions , ApiSupportConfiguration . OPTIMIZATIONS ) ) < nl > . chain ( responsePeerSearch - > < nl > updates ( ) . applyRelatedData ( < nl > responsePeerSearch . getUsers ( ) , < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java < nl > index db5e4ec . . f49a89c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java < nl > @ @ - 18 , 7 + 18 , 7 @ @ import im . actor . core . api . base . WeakUpdate ; < nl > import im . actor . core . api . parser . UpdatesParser ; < nl > import im . actor . core . api . rpc . RequestGetDifference ; < nl > import im . actor . core . api . rpc . RequestGetState ; < nl > - import im . actor . core . modules . Configuration ; < nl > + import im . actor . core . modules . api . ApiSupportConfiguration ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . sequence . internal . ExecuteAfter ; < nl > import im . actor . core . modules . ModuleActor ; < nl > @ @ - 199 , 7 + 199 , 7 @ @ public class SequenceActor extends ModuleActor { < nl > < nl > if ( seq < 0 ) { < nl > Log . d ( TAG , " Loading fresh state . . . " ) ; < nl > - api ( new RequestGetState ( Configuration . OPTIMIZATIONS ) ) . then ( response - > { < nl > + api ( new RequestGetState ( ApiSupportConfiguration . OPTIMIZATIONS ) ) . then ( response - > { < nl > if ( isValidated ) { < nl > return ; < nl > } < nl > @ @ - 218 , 7 + 218 , 7 @ @ public class SequenceActor extends ModuleActor { < nl > Log . d ( TAG , " Loading difference . . . " ) ; < nl > onUpdateStarted ( ) ; < nl > final long loadStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; < nl > - api ( new RequestGetDifference ( seq , state , Configuration . OPTIMIZATIONS ) ) . then ( response - > { < nl > + api ( new RequestGetDifference ( seq , state , ApiSupportConfiguration . OPTIMIZATIONS ) ) . then ( response - > { < nl > < nl > if ( isValidated ) { < nl > return ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java < nl > index 7e5896d . . cfe10e5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java < nl > @ @ - 12 , 7 + 12 , 12 @ @ import im . actor . core . api . updates . UpdateUserAboutChanged ; < nl > import im . actor . core . api . updates . UpdateUserLocalNameChanged ; < nl > import im . actor . core . api . updates . UpdateUserNameChanged ; < nl > import im . actor . core . api . updates . UpdateUserNickChanged ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerType ; < nl > import im . actor . core . entity . User ; < nl > + import im . actor . core . events . PeerChatOpened ; < nl > + import im . actor . core . events . PeerInfoOpened ; < nl > + import im . actor . core . events . UserVisible ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . users . router . UserRouter ; < nl > @ @ - 21 , 13 + 26 , 15 @ @ import im . actor . core . viewmodel . UserVM ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . actors . messages . Void ; < nl > + import im . actor . runtime . eventbus . BusSubscriber ; < nl > + import im . actor . runtime . eventbus . Event ; < nl > import im . actor . runtime . mvvm . MVVMCollection ; < nl > import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . storage . KeyValueEngine ; < nl > < nl > import static im . actor . runtime . actors . ActorSystem . system ; < nl > < nl > - public class UsersModule extends AbsModule { < nl > + public class UsersModule extends AbsModule implements BusSubscriber { < nl > < nl > private UserRouterInt userRouter ; < nl > private KeyValueEngine < User > users ; < nl > @ @ - 42 , 6 + 49 , 12 @ @ public class UsersModule extends AbsModule { < nl > this . userRouter = new UserRouterInt ( context ) ; < nl > } < nl > < nl > + public void run ( ) { < nl > + context ( ) . getEvents ( ) . subscribe ( this , PeerChatOpened . EVENT ) ; < nl > + context ( ) . getEvents ( ) . subscribe ( this , UserVisible . EVENT ) ; < nl > + context ( ) . getEvents ( ) . subscribe ( this , PeerInfoOpened . EVENT ) ; < nl > + } < nl > + < nl > / / Model < nl > < nl > public KeyValueEngine < User > getUsersStorage ( ) { < nl > @ @ - 100 , 4 + 113 , 21 @ @ public class UsersModule extends AbsModule { < nl > public void resetModule ( ) { < nl > users . clear ( ) ; < nl > } < nl > + < nl > + @ Override < nl > + public void onBusEvent ( Event event ) { < nl > + if ( event instanceof PeerChatOpened ) { < nl > + Peer peer = ( ( PeerChatOpened ) event ) . getPeer ( ) ; < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + getUserRouter ( ) . onFullUserNeeded ( peer . getPeerId ( ) ) ; < nl > + } < nl > + } else if ( event instanceof UserVisible ) { < nl > + getUserRouter ( ) . onFullUserNeeded ( ( ( UserVisible ) event ) . getUid ( ) ) ; < nl > + } else if ( event instanceof PeerInfoOpened ) { < nl > + Peer peer = ( ( PeerInfoOpened ) event ) . getPeer ( ) ; < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + getUserRouter ( ) . onFullUserNeeded ( peer . getPeerId ( ) ) ; < nl > + } < nl > + } < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java < nl > index 117108f . . 8c8826f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java < nl > @ @ - 1 , 8 + 1 , 12 @ @ < nl > package im . actor . core . modules . users . router ; < nl > < nl > import java . util . ArrayList ; < nl > + import java . util . HashSet ; < nl > < nl > import im . actor . core . api . ApiAvatar ; < nl > + import im . actor . core . api . ApiUserOutPeer ; < nl > + import im . actor . core . api . rpc . RequestLoadFullUsers ; < nl > + import im . actor . core . api . rpc . ResponseLoadFullUsers ; < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . MessageState ; < nl > import im . actor . core . entity . Peer ; < nl > @ @ - 13 , 132 + 17 , 180 @ @ import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . contacts . ContactsSyncActor ; < nl > import im . actor . core . modules . users . router . entity . RouterAboutChanged ; < nl > import im . actor . core . modules . users . router . entity . RouterAvatarChanged ; < nl > + import im . actor . core . modules . users . router . entity . RouterLoadFullUser ; < nl > import im . actor . core . modules . users . router . entity . RouterLocalNameChanged ; < nl > import im . actor . core . modules . users . router . entity . RouterNameChanged ; < nl > import im . actor . core . modules . users . router . entity . RouterNicknameChanged ; < nl > import im . actor . core . modules . users . router . entity . RouterUserRegistered ; < nl > import im . actor . runtime . actors . messages . Void ; < nl > import im . actor . runtime . annotations . Verified ; < nl > + import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . function . Function ; < nl > + import im . actor . runtime . function . Tuple2 ; < nl > import im . actor . runtime . promise . Promise ; < nl > < nl > import static im . actor . core . util . JavaUtil . equalsE ; < nl > < nl > public class UserRouter extends ModuleActor { < nl > < nl > + / / j2objc workaround < nl > + private static final Void DUMB = null ; < nl > + < nl > + private HashSet < Integer > requestedFullUsers = new HashSet < > ( ) ; < nl > + private boolean isFreezed = false ; < nl > + < nl > public UserRouter ( ModuleContext context ) { < nl > super ( context ) ; < nl > } < nl > < nl > @ Verified < nl > - private Promise < Void > onUserNameChanged ( int uid , String name ) { < nl > - User u = users ( ) . getValue ( uid ) ; < nl > - if ( u ! = null ) { < nl > - < nl > - / / Ignore if name not changed < nl > - if ( u . getServerName ( ) . equals ( name ) ) { < nl > - return Promise . success ( null ) ; < nl > - } < nl > - < nl > - / / Changing user name < nl > - u = u . editName ( name ) ; < nl > - < nl > - / / Updating user in collection < nl > - users ( ) . addOrUpdateItem ( u ) ; < nl > - < nl > - / / Notify if user doesn ' t have local name < nl > - if ( u . getLocalName ( ) = = null ) { < nl > - onUserDescChanged ( u ) ; < nl > - } < nl > + private void onLoadFullUser ( int uid ) { < nl > + if ( requestedFullUsers . contains ( uid ) ) { < nl > + return ; < nl > } < nl > + requestedFullUsers . add ( uid ) ; < nl > + < nl > + freeze ( ) ; < nl > + users ( ) . getValueAsync ( uid ) < nl > + . flatMap ( ( Function < User , Promise < Tuple2 < ResponseLoadFullUsers , User > > > ) u - > { < nl > + if ( ! u . isHaveExtension ( ) ) { < nl > + ArrayList < ApiUserOutPeer > users = new ArrayList < > ( ) ; < nl > + users . add ( new ApiUserOutPeer ( u . getUid ( ) , u . getAccessHash ( ) ) ) ; < nl > + return api ( new RequestLoadFullUsers ( users ) ) < nl > + . map ( responseLoadFullUsers - > < nl > + new Tuple2 < ResponseLoadFullUsers , User > ( responseLoadFullUsers , u ) ) ; < nl > + } else { < nl > + return Promise . failure ( new RuntimeException ( " Already loaded " ) ) ; < nl > + } < nl > + } ) < nl > + . then ( r - > { < nl > + < nl > + / / Changing user extension < nl > + User upd = r . getT2 ( ) . updateExt ( r . getT1 ( ) . getFullUsers ( ) . get ( 0 ) ) ; < nl > + < nl > + / / Updating user in collection < nl > + users ( ) . addOrUpdateItem ( upd ) ; < nl > + } ) < nl > + . after ( ( r , e ) - > unfreeze ( ) ) ; < nl > + } < nl > < nl > - return Promise . success ( null ) ; < nl > + @ Verified < nl > + private Promise < Void > onUserNameChanged ( int uid , String name ) { < nl > + freeze ( ) ; < nl > + return users ( ) . getValueAsync ( uid ) < nl > + . fallback ( u - > null ) < nl > + . flatMap ( u - > { < nl > + / / Ignore if name not changed < nl > + if ( u ! = null & & ! u . getServerName ( ) . equals ( name ) ) { < nl > + < nl > + / / Changing user name < nl > + u = u . editName ( name ) ; < nl > + < nl > + / / Updating user in collection < nl > + users ( ) . addOrUpdateItem ( u ) ; < nl > + < nl > + / / Notify if user doesn ' t have local name < nl > + if ( u . getLocalName ( ) = = null ) { < nl > + return onUserDescChanged ( u ) ; < nl > + } < nl > + } < nl > + return Promise . success ( ( Void ) null ) ; < nl > + } ) < nl > + . after ( ( r , e ) - > unfreeze ( ) ) ; < nl > } < nl > < nl > @ Verified < nl > private Promise < Void > onUserNickChanged ( int uid , String nick ) { < nl > - User u = users ( ) . getValue ( uid ) ; < nl > - if ( u ! = null ) { < nl > - < nl > - / / Ignore if name not changed < nl > - if ( equalsE ( u . getNick ( ) , nick ) ) { < nl > - return Promise . success ( null ) ; < nl > - } < nl > - < nl > - / / Changing user name < nl > - u = u . editNick ( nick ) ; < nl > - < nl > - / / Updating user in collection < nl > - users ( ) . addOrUpdateItem ( u ) ; < nl > - } < nl > - < nl > - return Promise . success ( null ) ; < nl > + freeze ( ) ; < nl > + return users ( ) . getValueAsync ( uid ) < nl > + . fallback ( u - > null ) < nl > + . flatMap ( u - > { < nl > + / / Ignore if username not changed < nl > + if ( u ! = null & & ! equalsE ( u . getNick ( ) , nick ) ) { < nl > + < nl > + / / Changing user name < nl > + u = u . editNick ( nick ) ; < nl > + < nl > + / / Updating user in collection < nl > + users ( ) . addOrUpdateItem ( u ) ; < nl > + } < nl > + return Promise . success ( ( Void ) null ) ; < nl > + } ) < nl > + . after ( ( r , e ) - > unfreeze ( ) ) ; < nl > } < nl > < nl > @ Verified < nl > private Promise < Void > onUserAboutChanged ( int uid , String about ) { < nl > - User u = users ( ) . getValue ( uid ) ; < nl > - if ( u ! = null ) { < nl > - < nl > - / / Ignore if name not changed < nl > - if ( equalsE ( u . getAbout ( ) , about ) ) { < nl > - return Promise . success ( null ) ; < nl > - } < nl > - < nl > - / / Changing about information < nl > - u = u . editAbout ( about ) ; < nl > - < nl > - / / Updating user in collection < nl > - users ( ) . addOrUpdateItem ( u ) ; < nl > - } < nl > - < nl > - return Promise . success ( null ) ; < nl > + freeze ( ) ; < nl > + return users ( ) . getValueAsync ( uid ) < nl > + . fallback ( u - > null ) < nl > + . flatMap ( u - > { < nl > + / / Ignore if name not changed < nl > + if ( u ! = null & & ! equalsE ( u . getAbout ( ) , about ) ) { < nl > + < nl > + / / Changing about information < nl > + u = u . editAbout ( about ) ; < nl > + < nl > + / / Updating user in collection < nl > + users ( ) . addOrUpdateItem ( u ) ; < nl > + } < nl > + return Promise . success ( ( Void ) null ) ; < nl > + } ) < nl > + . after ( ( r , e ) - > unfreeze ( ) ) ; < nl > } < nl > < nl > @ Verified < nl > private Promise < Void > onUserLocalNameChanged ( int uid , String name ) { < nl > - User u = users ( ) . getValue ( uid ) ; < nl > - if ( u ! = null ) { < nl > - < nl > - / / Ignore if local name not changed < nl > - if ( equalsE ( u . getLocalName ( ) , name ) ) { < nl > - return Promise . success ( null ) ; < nl > - } < nl > - < nl > - / / Changing user local name < nl > - u = u . editLocalName ( name ) ; < nl > - < nl > - / / Updating user in collection < nl > - users ( ) . addOrUpdateItem ( u ) ; < nl > - < nl > - / / Notify about user change < nl > - onUserDescChanged ( u ) ; < nl > - } < nl > - < nl > - return Promise . success ( null ) ; < nl > + freeze ( ) ; < nl > + return users ( ) . getValueAsync ( uid ) < nl > + . fallback ( u - > null ) < nl > + . flatMap ( u - > { < nl > + / / Ignore if local name not changed < nl > + if ( u ! = null & & ! equalsE ( u . getLocalName ( ) , name ) ) { < nl > + < nl > + / / Changing user local name < nl > + u = u . editLocalName ( name ) ; < nl > + < nl > + / / Updating user in collection < nl > + users ( ) . addOrUpdateItem ( u ) ; < nl > + < nl > + / / Notify about user change < nl > + return onUserDescChanged ( u ) ; < nl > + } < nl > + < nl > + return Promise . success ( ( Void ) null ) ; < nl > + } ) < nl > + . after ( ( r , e ) - > unfreeze ( ) ) ; < nl > } < nl > < nl > @ Verified < nl > private Promise < Void > onUserAvatarChanged ( int uid , ApiAvatar avatar ) { < nl > - User u = users ( ) . getValue ( uid ) ; < nl > - if ( u ! = null ) { < nl > - < nl > - / / Ignore if avatar not changed < nl > - / / Disabled because of future - compatibility it is unable to check equality < nl > - / / if ( equalsE ( u . getAvatar ( ) , new im . actor . model . entity . Avatar ( avatar ) ) ) { < nl > - / / return ; < nl > - / / } < nl > - < nl > - / / Changing user avatar < nl > - u = u . editAvatar ( avatar ) ; < nl > - < nl > - / / Updating user in collection < nl > - users ( ) . addOrUpdateItem ( u ) ; < nl > - < nl > - / / Notify about user change < nl > - onUserDescChanged ( u ) ; < nl > - } < nl > - < nl > - return Promise . success ( null ) ; < nl > + freeze ( ) ; < nl > + return users ( ) . getValueAsync ( uid ) < nl > + . fallback ( u - > null ) < nl > + . flatMap ( u - > { < nl > + / / Ignore if local name not changed < nl > + if ( u ! = null ) { < nl > + < nl > + / / Ignore if avatar not changed < nl > + / / Disabled because of future - compatibility it is unable to check equality < nl > + / / if ( equalsE ( u . getAvatar ( ) , new im . actor . model . entity . Avatar ( avatar ) ) ) { < nl > + / / return ; < nl > + / / } < nl > + < nl > + / / Changing user avatar < nl > + u = u . editAvatar ( avatar ) ; < nl > + < nl > + / / Updating user in collection < nl > + users ( ) . addOrUpdateItem ( u ) ; < nl > + < nl > + / / Notify about user change < nl > + return onUserDescChanged ( u ) ; < nl > + } < nl > + < nl > + return Promise . success ( ( Void ) null ) ; < nl > + } ) < nl > + . after ( ( r , e ) - > unfreeze ( ) ) ; < nl > } < nl > < nl > @ Verified < nl > @ @ - 146 , 38 + 198 , 90 @ @ public class UserRouter extends ModuleActor { < nl > ArrayList < Message > messages = new ArrayList < > ( ) ; < nl > messages . add ( new Message ( rid , date , date , uid , MessageState . UNKNOWN , ServiceUserRegistered . create ( ) ) ) ; < nl > context ( ) . getMessagesModule ( ) . getRouter ( ) . onNewMessages ( Peer . user ( uid ) , messages ) ; < nl > - return Promise . success ( null ) ; < nl > + return Promise . success ( ( Void ) null ) ; < nl > } < nl > < nl > @ Verified < nl > - private void onUserDescChanged ( User u ) { < nl > + private Promise < Void > onUserDescChanged ( User u ) { < nl > context ( ) . getMessagesModule ( ) . getRouter ( ) . onUserChanged ( u ) ; < nl > context ( ) . getContactsModule ( ) . getContactSyncActor ( ) < nl > . send ( new ContactsSyncActor . UserChanged ( u ) ) ; < nl > + return Promise . success ( ( Void ) null ) ; < nl > + } < nl > + < nl > + private void freeze ( ) { < nl > + isFreezed = true ; < nl > + } < nl > + < nl > + private void unfreeze ( ) { < nl > + isFreezed = false ; < nl > + unstashAll ( ) ; < nl > } < nl > < nl > + / / < nl > + / / Messages < nl > + / / < nl > + < nl > @ Override < nl > public Promise onAsk ( Object message ) throws Exception { < nl > if ( message instanceof RouterNameChanged ) { < nl > + if ( isFreezed ) { < nl > + stash ( ) ; < nl > + return null ; < nl > + } < nl > RouterNameChanged nameChanged = ( RouterNameChanged ) message ; < nl > return onUserNameChanged ( nameChanged . getUid ( ) , nameChanged . getName ( ) ) ; < nl > } else if ( message instanceof RouterLocalNameChanged ) { < nl > + if ( isFreezed ) { < nl > + stash ( ) ; < nl > + return null ; < nl > + } < nl > RouterLocalNameChanged localNameChanged = ( RouterLocalNameChanged ) message ; < nl > return onUserLocalNameChanged ( localNameChanged . getUid ( ) , localNameChanged . getLocalName ( ) ) ; < nl > } else if ( message instanceof RouterAvatarChanged ) { < nl > + if ( isFreezed ) { < nl > + stash ( ) ; < nl > + return null ; < nl > + } < nl > RouterAvatarChanged avatarChanged = ( RouterAvatarChanged ) message ; < nl > return onUserAvatarChanged ( avatarChanged . getUid ( ) , avatarChanged . getAvatar ( ) ) ; < nl > } else if ( message instanceof RouterNicknameChanged ) { < nl > + if ( isFreezed ) { < nl > + stash ( ) ; < nl > + return null ; < nl > + } < nl > RouterNicknameChanged nicknameChanged = ( RouterNicknameChanged ) message ; < nl > return onUserNickChanged ( nicknameChanged . getUid ( ) , nicknameChanged . getNickname ( ) ) ; < nl > } else if ( message instanceof RouterAboutChanged ) { < nl > + if ( isFreezed ) { < nl > + stash ( ) ; < nl > + return null ; < nl > + } < nl > RouterAboutChanged aboutChanged = ( RouterAboutChanged ) message ; < nl > return onUserAboutChanged ( aboutChanged . getUid ( ) , aboutChanged . getAbout ( ) ) ; < nl > } else if ( message instanceof RouterUserRegistered ) { < nl > + if ( isFreezed ) { < nl > + stash ( ) ; < nl > + return null ; < nl > + } < nl > RouterUserRegistered userRegistered = ( RouterUserRegistered ) message ; < nl > return onUserRegistered ( userRegistered . getRid ( ) , userRegistered . getUid ( ) , userRegistered . getDate ( ) ) ; < nl > } else { < nl > return super . onAsk ( message ) ; < nl > } < nl > } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof RouterLoadFullUser ) { < nl > + if ( isFreezed ) { < nl > + stash ( ) ; < nl > + return ; < nl > + } < nl > + RouterLoadFullUser loadFullUser = ( RouterLoadFullUser ) message ; < nl > + onLoadFullUser ( loadFullUser . getUid ( ) ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouterInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouterInt . java < nl > index d041adf . . 67f7af4 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouterInt . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouterInt . java < nl > @ @ - 4 , 6 + 4 , 7 @ @ import im . actor . core . api . ApiAvatar ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . users . router . entity . RouterAboutChanged ; < nl > import im . actor . core . modules . users . router . entity . RouterAvatarChanged ; < nl > + import im . actor . core . modules . users . router . entity . RouterLoadFullUser ; < nl > import im . actor . core . modules . users . router . entity . RouterLocalNameChanged ; < nl > import im . actor . core . modules . users . router . entity . RouterNameChanged ; < nl > import im . actor . core . modules . users . router . entity . RouterNicknameChanged ; < nl > @ @ - 43 , 4 + 44 , 8 @ @ public class UserRouterInt extends ActorInterface { < nl > public Promise < Void > onUserRegistered ( int uid , long rid , long date ) { < nl > return ask ( new RouterUserRegistered ( rid , uid , date ) ) ; < nl > } < nl > - } < nl > + < nl > + public void onFullUserNeeded ( int uid ) { < nl > + send ( new RouterLoadFullUser ( uid ) ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / entity / RouterLoadFullUser . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / entity / RouterLoadFullUser . java < nl > new file mode 100644 < nl > index 0000000 . . 21bbe68 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / entity / RouterLoadFullUser . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . core . modules . users . router . entity ; < nl > + < nl > + public class RouterLoadFullUser { < nl > + < nl > + private int uid ; < nl > + < nl > + public RouterLoadFullUser ( int uid ) { < nl > + this . uid = uid ; < nl > + } < nl > + < nl > + public int getUid ( ) { < nl > + return uid ; < nl > + } < nl > + }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 1aeca3b . . 318d1ae 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 358 , 6 + 358 , 20 @ @ public class JsFacade implements Exportable { < nl > messenger . getSharedDialogList ( ) . unsubscribe ( callback ) ; < nl > } < nl > < nl > + public void bindArchivedDialogs ( JsDisplayListCallback < JsDialog > callback ) { < nl > + if ( callback = = null ) { < nl > + return ; < nl > + } < nl > + messenger . getSharedArchivedDialogList ( ) . subscribe ( callback , false ) ; < nl > + } < nl > + < nl > + public void unbindArchivedDialogs ( JsDisplayListCallback < JsDialog > callback ) { < nl > + if ( callback = = null ) { < nl > + return ; < nl > + } < nl > + messenger . getSharedArchivedDialogList ( ) . unsubscribe ( callback ) ; < nl > + } < nl > + < nl > public void bindGroupDialogs ( JsBindedValueCallback callback ) { < nl > if ( callback = = null ) { < nl > return ; < nl > @ @ - 834 , 6 + 848 , 10 @ @ public class JsFacade implements Exportable { < nl > messenger . loadMoreDialogs ( ) ; < nl > } < nl > < nl > + public void onArchivedDialogsEnd ( ) { < nl > + messenger . loadMoreArchivedDialogs ( ) ; < nl > + } < nl > + < nl > public void onChatEnd ( JsPeer peer ) { < nl > messenger . loadMoreHistory ( peer . convert ( ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > index 27a49d6 . . 344388e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > @ @ - 163 , 6 + 163 , 10 @ @ public class JsMessenger extends Messenger { < nl > modules . getMessagesModule ( ) . loadMoreDialogs ( ) ; < nl > } < nl > < nl > + public void loadMoreArchivedDialogs ( ) { < nl > + modules . getMessagesModule ( ) . loadMoreArchivedDialogs ( ) ; < nl > + } < nl > + < nl > public void loadMoreHistory ( Peer peer ) { < nl > modules . getMessagesModule ( ) . loadMoreHistory ( peer ) ; < nl > } < nl > @ @ - 229 , 6 + 233 , 10 @ @ public class JsMessenger extends Messenger { < nl > return jsBindingModule . getSharedDialogList ( ) ; < nl > } < nl > < nl > + public JsDisplayList < JsDialog , Dialog > getSharedArchivedDialogList ( ) { < nl > + return jsBindingModule . getSharedArchivedDialogList ( ) ; < nl > + } < nl > + < nl > public JsDisplayList < JsContact , Contact > getSharedContactList ( ) { < nl > return jsBindingModule . getSharedContactList ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > index b1a6005 . . 000c6d9 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > @ @ - 68 , 6 + 68 , 7 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > private JsBindedValue < String > onlineState ; < nl > < nl > private JsDisplayList < JsDialog , Dialog > dialogsList ; < nl > + private JsDisplayList < JsDialog , Dialog > archivedDialogsList ; < nl > private JsDisplayList < JsContact , Contact > contactsList ; < nl > private JsDisplayList < JsSearchEntity , SearchEntity > searchList ; < nl > private HashMap < Peer , JsDisplayList < JsMessage , Message > > messageLists = new HashMap < > ( ) ; < nl > @ @ - 364 , 6 + 365 , 14 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > return dialogsList ; < nl > } < nl > < nl > + public JsDisplayList < JsDialog , Dialog > getSharedArchivedDialogList ( ) { < nl > + if ( archivedDialogsList = = null ) { < nl > + archivedDialogsList = ( JsDisplayList < JsDialog , Dialog > ) context ( ) . getDisplayListsModule ( ) . getArchivedDialogsSharedList ( ) ; < nl > + } < nl > + < nl > + return archivedDialogsList ; < nl > + } < nl > + < nl > public JsDisplayList < JsMessage , Message > getSharedMessageList ( Peer peer ) { < nl > if ( ! messageLists . containsKey ( peer ) ) { < nl > messageLists . put ( peer , < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > index 933a2b8 . . 3bcc723 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > @ @ - 24 , 6 + 24 , 7 @ @ import im . actor . runtime . storage . PreferencesStorage ; < nl > public abstract class AbsModule { < nl > < nl > public static final String STORAGE _ DIALOGS = " dialogs " ; < nl > + public static final String STORAGE _ ARCHIVED _ DIALOGS = " dialogs _ archived " ; < nl > public static final String STORAGE _ DIALOGS _ DESC = " dialogs _ desc " ; < nl > public static final String STORAGE _ USERS = " users " ; < nl > public static final String STORAGE _ STICKER _ PACKS = " sticker _ packs " ; < nl > @ @ - 74 , 6 + 75 , 10 @ @ public abstract class AbsModule { < nl > return context ( ) . getMessagesModule ( ) . getDialogsHistoryActor ( ) ; < nl > } < nl > < nl > + public ActorRef archivedDialogsActor ( ) { < nl > + return context ( ) . getMessagesModule ( ) . getArchivedDialogsActor ( ) ; < nl > + } < nl > + < nl > public ActorRef ownReadActor ( ) { < nl > return context ( ) . getMessagesModule ( ) . getOwnReadActor ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DisplayLists . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DisplayLists . java < nl > index bdfe3de . . 5de0342 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DisplayLists . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DisplayLists . java < nl > @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . runtime . mvvm . PlatformDisplayList ; < nl > public class DisplayLists extends AbsModule { < nl > < nl > private PlatformDisplayList < Dialog > dialogGlobalList ; < nl > + private PlatformDisplayList < Dialog > archivedDialogGlobalList ; < nl > < nl > private PlatformDisplayList < Contact > contactsGlobalList ; < nl > < nl > @ @ - 50 , 6 + 51 , 16 @ @ public class DisplayLists extends AbsModule { < nl > return dialogGlobalList ; < nl > } < nl > < nl > + public PlatformDisplayList < Dialog > getArchivedDialogsSharedList ( ) { < nl > + im . actor . runtime . Runtime . checkMainThread ( ) ; < nl > + < nl > + if ( archivedDialogGlobalList = = null ) { < nl > + archivedDialogGlobalList = buildArchivedDialogsList ( true ) ; < nl > + } < nl > + < nl > + return archivedDialogGlobalList ; < nl > + } < nl > + < nl > public PlatformDisplayList < Message > getMessagesSharedList ( Peer peer ) { < nl > im . actor . runtime . Runtime . checkMainThread ( ) ; < nl > < nl > @ @ - 82 , 6 + 93 , 17 @ @ public class DisplayLists extends AbsModule { < nl > return res ; < nl > } < nl > < nl > + public PlatformDisplayList < Dialog > buildArchivedDialogsList ( boolean isShared ) { < nl > + im . actor . runtime . Runtime . checkMainThread ( ) ; < nl > + < nl > + PlatformDisplayList < Dialog > res = Storage . createDisplayList ( context ( ) . getMessagesModule ( ) . getArchivedDialogsEngine ( ) , < nl > + isShared , Dialog . ENTITY _ NAME ) ; < nl > + < nl > + res . initTop ( ) ; < nl > + < nl > + return res ; < nl > + } < nl > + < nl > public PlatformDisplayList < Contact > buildContactList ( boolean isShared ) { < nl > im . actor . runtime . Runtime . checkMainThread ( ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 7c6ab7d . . 7641b6f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 47 , 6 + 47 , 7 @ @ import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . events . AppVisibleChanged ; < nl > import im . actor . core . events . PeerChatClosed ; < nl > import im . actor . core . events . PeerChatOpened ; < nl > + import im . actor . core . modules . internal . messages . ArchivedDialogsActor ; < nl > import im . actor . core . modules . internal . messages . ConversationActor ; < nl > import im . actor . core . modules . internal . messages . ConversationHistoryActor ; < nl > import im . actor . core . modules . internal . messages . CursorReaderActor ; < nl > @ @ - 66 , 6 + 67 , 7 @ @ import im . actor . core . viewmodel . Command ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . core . viewmodel . ConversationVM ; < nl > import im . actor . core . viewmodel . DialogGroupsVM ; < nl > + import im . actor . core . viewmodel . DialogSmall ; < nl > import im . actor . core . viewmodel . DialogSpecVM ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > @ @ - 83 , 9 + 85 , 11 @ @ import static im . actor . runtime . actors . ActorSystem . system ; < nl > public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > private ListEngine < Dialog > dialogs ; < nl > + private ListEngine < Dialog > archivedDialogs ; < nl > < nl > private ActorRef dialogsActor ; < nl > private ActorRef dialogsHistoryActor ; < nl > + private ActorRef archivedDialogsActor ; < nl > private ActorRef dialogsGroupedActor ; < nl > private ActorRef ownReadActor ; < nl > private ActorRef plainReadActor ; < nl > @ @ - 110 , 6 + 114 , 7 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > this . dialogDescKeyValue = Storage . createKeyValue ( STORAGE _ DIALOGS _ DESC , DialogSpecVM . CREATOR , DialogSpec . CREATOR ) ; < nl > this . cursorStorage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ CURSOR ) ) ; < nl > this . dialogs = Storage . createList ( STORAGE _ DIALOGS , Dialog . CREATOR ) ; < nl > + this . archivedDialogs = Storage . createList ( STORAGE _ ARCHIVED _ DIALOGS , Dialog . CREATOR ) ; < nl > } < nl > < nl > public void run ( ) { < nl > @ @ - 126 , 6 + 131 , 13 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } < nl > } ) , " actor / dialogs / history " ) ; < nl > < nl > + this . archivedDialogsActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > + @ Override < nl > + public ArchivedDialogsActor create ( ) { < nl > + return new ArchivedDialogsActor ( context ( ) ) ; < nl > + } < nl > + } ) , " actor / dialogs / archived " ) ; < nl > + < nl > this . dialogsGroupedActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > @ Override < nl > public GroupedDialogsActor create ( ) { < nl > @ @ - 261 , 6 + 273 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > return dialogsHistoryActor ; < nl > } < nl > < nl > + public ActorRef getArchivedDialogsActor ( ) { < nl > + return archivedDialogsActor ; < nl > + } < nl > + < nl > public ActorRef getDialogsGroupedActor ( ) { < nl > return dialogsGroupedActor ; < nl > } < nl > @ @ - 269 , 6 + 285 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > return dialogs ; < nl > } < nl > < nl > + public ListEngine < Dialog > getArchivedDialogsEngine ( ) { < nl > + return archivedDialogs ; < nl > + } < nl > + < nl > public void deleteMessages ( Peer peer , long [ ] rids ) { < nl > ActorRef conversationActor = getConversationActor ( peer ) ; < nl > ArrayList < Long > deleted = new ArrayList < Long > ( ) ; < nl > @ @ - 288 , 6 + 308 , 15 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } ) ; < nl > } < nl > < nl > + public void loadMoreArchivedDialogs ( ) { < nl > + im . actor . runtime . Runtime . dispatch ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + archivedDialogsActor . send ( new ArchivedDialogsActor . LoadMore ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > public void loadMoreHistory ( final Peer peer ) { < nl > im . actor . runtime . Runtime . dispatch ( new Runnable ( ) { < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ArchivedDialogsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ArchivedDialogsActor . java < nl > new file mode 100644 < nl > index 0000000 . . 2b829e7 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ArchivedDialogsActor . java < nl > @ @ - 0 , 0 + 1 , 119 @ @ < nl > + / * < nl > + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + * / < nl > + < nl > + package im . actor . core . modules . internal . messages ; < nl > + < nl > + import im . actor . core . api . ApiDialogShort ; < nl > + import im . actor . core . api . rpc . RequestLoadArchived ; < nl > + import im . actor . core . api . rpc . RequestLoadDialogs ; < nl > + import im . actor . core . api . rpc . ResponseLoadArchived ; < nl > + import im . actor . core . api . rpc . ResponseLoadDialogs ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . updates . internal . ArchivedDialogLoaded ; < nl > + import im . actor . core . modules . updates . internal . DialogHistoryLoaded ; < nl > + import im . actor . core . network . RpcCallback ; < nl > + import im . actor . core . network . RpcException ; < nl > + import im . actor . core . util . ModuleActor ; < nl > + import im . actor . runtime . Log ; < nl > + < nl > + public class ArchivedDialogsActor extends ModuleActor { < nl > + < nl > + private static final String TAG = " ArchivedDialogsActor " ; < nl > + < nl > + private static final int LIMIT = 20 ; < nl > + < nl > + private static final String KEY _ LOADED _ DATE = " archived _ dialogs _ date " ; < nl > + private static final String KEY _ LOADED = " archived _ dialogs _ loaded " ; < nl > + private static final String KEY _ LOADED _ INIT = " archived _ dialogs _ inited " ; < nl > + < nl > + private byte [ ] nextOffset ; < nl > + private boolean archivedLoaded ; < nl > + < nl > + private boolean isLoading = false ; < nl > + < nl > + public ArchivedDialogsActor ( ModuleContext context ) { < nl > + super ( context ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + nextOffset = preferences ( ) . getBytes ( KEY _ LOADED _ DATE ) ; < nl > + archivedLoaded = preferences ( ) . getBool ( KEY _ LOADED , false ) ; < nl > + if ( ! preferences ( ) . getBool ( KEY _ LOADED _ INIT , false ) ) { < nl > + self ( ) . send ( new LoadMore ( ) ) ; < nl > + } < nl > + } < nl > + < nl > + private void onLoadMore ( ) { < nl > + if ( archivedLoaded ) { < nl > + return ; < nl > + } < nl > + if ( isLoading ) { < nl > + return ; < nl > + } < nl > + isLoading = true ; < nl > + < nl > + Log . d ( TAG , " Loading archived " ) ; < nl > + < nl > + request ( new RequestLoadArchived ( nextOffset , LIMIT ) , < nl > + new RpcCallback < ResponseLoadArchived > ( ) { < nl > + @ Override < nl > + public void onResult ( ResponseLoadArchived response ) { < nl > + < nl > + / / Invoke on sequence actor < nl > + updates ( ) . onUpdateReceived ( new ArchivedDialogLoaded ( response ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( RpcException e ) { < nl > + e . printStackTrace ( ) ; < nl > + / / Never happens < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + private void onLoadedMore ( int loaded , byte [ ] nextOffset ) { < nl > + isLoading = false ; < nl > + < nl > + if ( loaded < LIMIT ) { < nl > + archivedLoaded = true ; < nl > + } else { < nl > + archivedLoaded = false ; < nl > + this . nextOffset = nextOffset ; < nl > + } < nl > + preferences ( ) . putBytes ( KEY _ LOADED _ DATE , nextOffset ) ; < nl > + preferences ( ) . putBool ( KEY _ LOADED , archivedLoaded ) ; < nl > + preferences ( ) . putBool ( KEY _ LOADED _ INIT , true ) ; < nl > + < nl > + Log . d ( TAG , " Archived loaded " ) ; < nl > + } < nl > + < nl > + / / Messages < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof LoadMore ) { < nl > + onLoadMore ( ) ; < nl > + } else if ( message instanceof LoadedMore ) { < nl > + LoadedMore loaded = ( LoadedMore ) message ; < nl > + onLoadedMore ( loaded . loaded , loaded . nextOffset ) ; < nl > + } else { < nl > + drop ( message ) ; < nl > + } < nl > + } < nl > + < nl > + public static class LoadMore { < nl > + < nl > + } < nl > + < nl > + public static class LoadedMore { < nl > + private int loaded ; < nl > + private byte [ ] nextOffset ; < nl > + < nl > + public LoadedMore ( int loaded , byte [ ] nextOffset ) { < nl > + this . loaded = loaded ; < nl > + this . nextOffset = nextOffset ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java < nl > index ad106d2 . . dd1c788 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java < nl > @ @ - 31 , 7 + 31 , 9 @ @ import static im . actor . core . util . JavaUtil . equalsE ; < nl > public class DialogsActor extends ModuleActor { < nl > < nl > private ListEngine < Dialog > dialogs ; < nl > + private ListEngine < Dialog > archivedDialogs ; < nl > private Boolean isEmpty ; < nl > + private Boolean isArchivedEmpty ; < nl > private Boolean emptyNotified ; < nl > < nl > public DialogsActor ( ModuleContext context ) { < nl > @ @ - 42 , 7 + 44 , 9 @ @ public class DialogsActor extends ModuleActor { < nl > public void preStart ( ) { < nl > super . preStart ( ) ; < nl > this . dialogs = context ( ) . getMessagesModule ( ) . getDialogsEngine ( ) ; < nl > - notifyState ( true ) ; < nl > + this . archivedDialogs = context ( ) . getMessagesModule ( ) . getArchivedDialogsEngine ( ) ; < nl > + notifyState ( true , true ) ; < nl > + notifyState ( true , false ) ; < nl > } < nl > < nl > @ Verified < nl > @ @ - 116 , 7 + 120 , 7 @ @ public class DialogsActor extends ModuleActor { < nl > } < nl > < nl > addOrUpdateItem ( builder . createDialog ( ) ) ; < nl > - notifyState ( forceUpdate ) ; < nl > + notifyState ( forceUpdate , false ) ; < nl > } < nl > < nl > Log . d ( " DialogsActor " , " onMessage in " + ( Runtime . getCurrentTime ( ) - start ) + " ms " ) ; < nl > @ @ - 160 , 8 + 164 , 10 @ @ public class DialogsActor extends ModuleActor { < nl > private void onChatDeleted ( Peer peer ) { < nl > / / Removing dialog < nl > dialogs . removeItem ( peer . getUnuqueId ( ) ) ; < nl > + archivedDialogs . removeItem ( peer . getUnuqueId ( ) ) ; < nl > < nl > - notifyState ( true ) ; < nl > + notifyState ( true , true ) ; < nl > + notifyState ( true , false ) ; < nl > } < nl > < nl > @ Verified < nl > @ @ - 235 , 11 + 241 , 11 @ @ public class DialogsActor extends ModuleActor { < nl > } < nl > < nl > @ Verified < nl > - private void onHistoryLoaded ( List < DialogHistory > history ) { < nl > + private void onHistoryLoaded ( List < DialogHistory > history , boolean isArchived ) { < nl > ArrayList < Dialog > updated = new ArrayList < Dialog > ( ) ; < nl > for ( DialogHistory dialogHistory : history ) { < nl > / / Ignore already available dialogs < nl > - if ( dialogs . getValue ( dialogHistory . getPeer ( ) . getUnuqueId ( ) ) ! = null ) { < nl > + if ( ( isArchived ? archivedDialogs : dialogs ) . getValue ( dialogHistory . getPeer ( ) . getUnuqueId ( ) ) ! = null ) { < nl > continue ; < nl > } < nl > < nl > @ @ - 256 , 16 + 262 , 19 @ @ public class DialogsActor extends ModuleActor { < nl > dialogHistory . getRid ( ) , description . getContentType ( ) , description . getText ( ) , dialogHistory . getStatus ( ) , < nl > dialogHistory . getSenderId ( ) , dialogHistory . getDate ( ) , description . getRelatedUser ( ) ) ) ; < nl > } < nl > - addOrUpdateItems ( updated ) ; < nl > - updateSearch ( updated ) ; < nl > - context ( ) . getAppStateModule ( ) . onDialogsLoaded ( ) ; < nl > - notifyState ( true ) ; < nl > + addOrUpdateItems ( updated , isArchived ) ; < nl > + if ( ! isArchived ) { < nl > + updateSearch ( updated ) ; < nl > + context ( ) . getAppStateModule ( ) . onDialogsLoaded ( ) ; < nl > + } < nl > + notifyState ( true , isArchived ) ; < nl > } < nl > < nl > + < nl > / / Utils < nl > < nl > - private void addOrUpdateItems ( List < Dialog > updated ) { < nl > - dialogs . addOrUpdateItems ( updated ) ; < nl > + private void addOrUpdateItems ( List < Dialog > updated , boolean isArchived ) { < nl > + ( isArchived ? archivedDialogs : dialogs ) . addOrUpdateItems ( updated ) ; < nl > } < nl > < nl > private void addOrUpdateItem ( Dialog dialog ) { < nl > @ @ - 282 , 12 + 291 , 16 @ @ public class DialogsActor extends ModuleActor { < nl > context ( ) . getSearchModule ( ) . onDialogsChanged ( updated ) ; < nl > } < nl > < nl > - private void notifyState ( boolean force ) { < nl > - if ( isEmpty = = null | | force ) { < nl > - isEmpty = this . dialogs . isEmpty ( ) ; < nl > + private void notifyState ( boolean force , boolean isArchived ) { < nl > + if ( ( isArchived ? isArchivedEmpty : isEmpty ) = = null | | force ) { < nl > + if ( isArchived ) { < nl > + isArchivedEmpty = this . archivedDialogs . isEmpty ( ) ; < nl > + } else { < nl > + isEmpty = this . dialogs . isEmpty ( ) ; < nl > + } < nl > } < nl > < nl > - if ( ! isEmpty . equals ( emptyNotified ) ) { < nl > + if ( ! isArchived & & ! isEmpty . equals ( emptyNotified ) ) { < nl > emptyNotified = isEmpty ; < nl > context ( ) . getAppStateModule ( ) . onDialogsUpdate ( isEmpty ) ; < nl > } < nl > @ @ - 349 , 7 + 362 , 7 @ @ public class DialogsActor extends ModuleActor { < nl > onMessage ( deleted . getPeer ( ) , deleted . getTopMessage ( ) , true , - 1 ) ; < nl > } else if ( message instanceof HistoryLoaded ) { < nl > HistoryLoaded historyLoaded = ( HistoryLoaded ) message ; < nl > - onHistoryLoaded ( historyLoaded . getHistory ( ) ) ; < nl > + onHistoryLoaded ( historyLoaded . getHistory ( ) , ( ( HistoryLoaded ) message ) . isArchived ( ) ) ; < nl > } else if ( message instanceof GroupChanged ) { < nl > GroupChanged groupChanged = ( GroupChanged ) message ; < nl > onGroupChanged ( groupChanged . getGroup ( ) ) ; < nl > @ @ - 522 , 14 + 535 , 20 @ @ public class DialogsActor extends ModuleActor { < nl > } < nl > < nl > public static class HistoryLoaded { < nl > + boolean archived ; < nl > private List < DialogHistory > history ; < nl > < nl > - public HistoryLoaded ( List < DialogHistory > history ) { < nl > + public HistoryLoaded ( List < DialogHistory > history , boolean archived ) { < nl > this . history = history ; < nl > + this . archived = archived ; < nl > } < nl > < nl > public List < DialogHistory > getHistory ( ) { < nl > return history ; < nl > } < nl > + < nl > + public boolean isArchived ( ) { < nl > + return archived ; < nl > + } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > index bb49bcf . . a080dec 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > @ @ - 10 , 12 + 10 , 12 @ @ import java . util . List ; < nl > < nl > import im . actor . core . api . ApiDialog ; < nl > import im . actor . core . api . ApiDialogGroup ; < nl > - import im . actor . core . api . ApiEncryptedMessage ; < nl > import im . actor . core . api . ApiMessage ; < nl > import im . actor . core . api . ApiMessageContainer ; < nl > import im . actor . core . api . ApiMessageReaction ; < nl > import im . actor . core . api . ApiPeer ; < nl > import im . actor . core . api . ApiAppCounters ; < nl > + import im . actor . core . api . rpc . ResponseLoadArchived ; < nl > import im . actor . core . api . rpc . ResponseLoadDialogs ; < nl > import im . actor . core . api . rpc . ResponseLoadHistory ; < nl > import im . actor . core . api . updates . UpdateMessage ; < nl > @ @ - 27 , 7 + 27 , 7 @ @ import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . entity . content . ServiceUserRegistered ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . core . modules . encryption . EncryptedMsgActor ; < nl > + import im . actor . core . modules . internal . messages . ArchivedDialogsActor ; < nl > import im . actor . core . modules . internal . messages . ConversationActor ; < nl > import im . actor . core . modules . internal . messages . ConversationHistoryActor ; < nl > import im . actor . core . modules . internal . messages . CursorReceiverActor ; < nl > @ @ - 286 , 14 + 286 , 21 @ @ public class MessagesProcessor extends AbsModule { < nl > < nl > @ Verified < nl > public void onDialogsLoaded ( ResponseLoadDialogs dialogsResponse ) { < nl > - < nl > / / Should we eliminate DialogHistory ? < nl > + dialogsLoaded ( dialogsResponse . getDialogs ( ) , false , null ) ; < nl > + } < nl > + < nl > + @ Verified < nl > + public void onArchivedDialogsLoaded ( ResponseLoadArchived dialogsResponse ) { < nl > + dialogsLoaded ( dialogsResponse . getDialogs ( ) , true , dialogsResponse . getNextOffset ( ) ) ; < nl > + } < nl > < nl > + public void dialogsLoaded ( List < ApiDialog > apiDialogs , boolean archived , byte [ ] nextOffset ) { < nl > ArrayList < DialogHistory > dialogs = new ArrayList < DialogHistory > ( ) ; < nl > < nl > long maxLoadedDate = Long . MAX _ VALUE ; < nl > < nl > - for ( ApiDialog dialog : dialogsResponse . getDialogs ( ) ) { < nl > + for ( ApiDialog dialog : apiDialogs ) { < nl > < nl > maxLoadedDate = Math . min ( dialog . getSortDate ( ) , maxLoadedDate ) ; < nl > < nl > @ @ - 316 , 14 + 323 , 19 @ @ public class MessagesProcessor extends AbsModule { < nl > < nl > / / Sending updates to dialogs actor < nl > if ( dialogs . size ( ) > 0 ) { < nl > - dialogsActor ( ) . send ( new DialogsActor . HistoryLoaded ( dialogs ) ) ; < nl > - } else { < nl > + dialogsActor ( ) . send ( new DialogsActor . HistoryLoaded ( dialogs , archived ) ) ; < nl > + } else if ( ! archived ) { < nl > context ( ) . getAppStateModule ( ) . onDialogsLoaded ( ) ; < nl > } < nl > < nl > / / Sending notification to history actor < nl > - dialogsHistoryActor ( ) . send ( new DialogsHistoryActor . LoadedMore ( dialogsResponse . getDialogs ( ) . size ( ) , < nl > - maxLoadedDate ) ) ; < nl > + if ( ! archived ) { < nl > + dialogsHistoryActor ( ) . send ( new DialogsHistoryActor . LoadedMore ( apiDialogs . size ( ) , < nl > + maxLoadedDate ) ) ; < nl > + } else { < nl > + archivedDialogsActor ( ) . send ( new ArchivedDialogsActor . LoadedMore ( apiDialogs . size ( ) , < nl > + nextOffset ) ) ; < nl > + } < nl > } < nl > < nl > @ Verified < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > index 1f75989 . . 611df65 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > @ @ - 11 , 6 + 11 , 7 @ @ import java . util . List ; < nl > import im . actor . core . api . ApiGroup ; < nl > import im . actor . core . api . ApiPeerType ; < nl > import im . actor . core . api . ApiUser ; < nl > + import im . actor . core . api . rpc . ResponseLoadArchived ; < nl > import im . actor . core . api . rpc . ResponseLoadDialogs ; < nl > import im . actor . core . api . updates . UpdateChatArchive ; < nl > import im . actor . core . api . updates . UpdateChatClear ; < nl > @ @ - 54 , 6 + 55 , 7 @ @ import im . actor . core . modules . calls . CallsProcessor ; < nl > import im . actor . core . modules . eventbus . EventBusProcessor ; < nl > import im . actor . core . modules . internal . contacts . ContactsSyncActor ; < nl > import im . actor . core . modules . internal . messages . OwnReadActor ; < nl > + import im . actor . core . modules . updates . internal . ArchivedDialogLoaded ; < nl > import im . actor . core . modules . updates . internal . ChangeContent ; < nl > import im . actor . core . modules . updates . internal . CombinedDifference ; < nl > import im . actor . core . modules . updates . internal . ContactsLoaded ; < nl > @ @ - 113 , 6 + 115 , 10 @ @ public class UpdateProcessor extends AbsModule { < nl > ResponseLoadDialogs dialogs = ( ( DialogHistoryLoaded ) update ) . getDialogs ( ) ; < nl > applyRelated ( dialogs . getUsers ( ) , dialogs . getGroups ( ) , false ) ; < nl > messagesProcessor . onDialogsLoaded ( dialogs ) ; < nl > + } else if ( update instanceof ArchivedDialogLoaded ) { < nl > + ResponseLoadArchived dialogs = ( ( ArchivedDialogLoaded ) update ) . getDialogs ( ) ; < nl > + applyRelated ( dialogs . getUsers ( ) , dialogs . getGroups ( ) , false ) ; < nl > + messagesProcessor . onArchivedDialogsLoaded ( dialogs ) ; < nl > } else if ( update instanceof MessagesHistoryLoaded ) { < nl > MessagesHistoryLoaded historyLoaded = ( MessagesHistoryLoaded ) update ; < nl > applyRelated ( historyLoaded . getLoadHistory ( ) . getUsers ( ) , new ArrayList < ApiGroup > ( ) , false ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / internal / ArchivedDialogLoaded . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / internal / ArchivedDialogLoaded . java < nl > new file mode 100644 < nl > index 0000000 . . 222ad0e < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / internal / ArchivedDialogLoaded . java < nl > @ @ - 0 , 0 + 1 , 19 @ @ < nl > + / * < nl > + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > + * / < nl > + < nl > + package im . actor . core . modules . updates . internal ; < nl > + < nl > + import im . actor . core . api . rpc . ResponseLoadArchived ; < nl > + < nl > + public class ArchivedDialogLoaded extends InternalUpdate { < nl > + private ResponseLoadArchived dialogs ; < nl > + < nl > + public ArchivedDialogLoaded ( ResponseLoadArchived dialogs ) { < nl > + this . dialogs = dialogs ; < nl > + } < nl > + < nl > + public ResponseLoadArchived getDialogs ( ) { < nl > + return dialogs ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java < nl > index b77e893 . . a65e8fa 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java < nl > @ @ - 2 , 19 + 2 , 25 @ @ package im . actor . core . viewmodel ; < nl > < nl > import com . google . j2objc . annotations . Property ; < nl > < nl > + import java . io . IOException ; < nl > + < nl > import im . actor . core . entity . Avatar ; < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . storage . ListEngineItem ; < nl > < nl > - public class DialogSmall { < nl > + public class DialogSmall extends BserObject implements ListEngineItem { < nl > < nl > @ Property ( " readonly , nonatomic " ) < nl > - private final Peer peer ; < nl > + private Peer peer ; < nl > @ Property ( " readonly , nonatomic " ) < nl > - private final String title ; < nl > + private String title ; < nl > @ Property ( " readonly , nonatomic " ) < nl > - private final Avatar avatar ; < nl > + private Avatar avatar ; < nl > @ Property ( " readonly , nonatomic " ) < nl > - private final int counter ; < nl > + private int counter ; < nl > < nl > public DialogSmall ( Peer peer , String title , Avatar avatar , int counter ) { < nl > this . peer = peer ; < nl > @ @ - 38 , 4 + 44 , 35 @ @ public class DialogSmall { < nl > public int getCounter ( ) { < nl > return counter ; < nl > } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; < nl > + title = values . getString ( 2 ) ; < nl > + avatar = new Avatar ( values . getBytes ( 3 ) ) ; < nl > + counter = values . getInt ( 4 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + writer . writeBytes ( 1 , peer . toByteArray ( ) ) ; < nl > + writer . writeString ( 2 , title ) ; < nl > + writer . writeBytes ( 3 , avatar . toByteArray ( ) ) ; < nl > + writer . writeInt ( 4 , counter ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public long getEngineId ( ) { < nl > + return peer . getUnuqueId ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public long getEngineSort ( ) { < nl > + return peer . getUnuqueId ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public String getEngineSearch ( ) { < nl > + return null ; < nl > + } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index 1891775 . . 2cbe2a9 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 1900 , 7 + 1900 , 7 @ @ 
 	 	 	 	 TargetAttributes = { 
 	 	 	 	 	 066A50D11BC4AE63000E606E = { 
 	 	 	 	 	 	 CreatedOnToolsVersion = 7 . 0 ; 
 - 	 	 	 	 	 	 DevelopmentTeam = DR9YEJ8YRD ; 
 + 	 	 	 	 	 	 DevelopmentTeam = HVJR44Y5B6 ; 
 	 	 	 	 	 } ; 
 	 	 	 	 } ; 
 	 	 	 } ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 index d68a4e5 . . b7fae0d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 @ @ - 67 , 6 + 67 , 10 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV 
 @ SuppressWarnings ( " NullableProblems " ) 
 private List < ContactRecord > records ; 
 
 + @ NotNull 
 + @ Property ( " readonly , nonatomic " ) 
 + private boolean haveExtension ; 
 + 
 public User ( @ NotNull ApiUser wrappedUser , @ Nullable ApiFullUser ext ) { 
 super ( RECORD _ ID , RECORD _ FULL _ ID , wrappedUser , ext ) ; 
 } 
 @ @ - 131 , 6 + 135 , 10 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV 
 return sex ; 
 } 
 
 + public boolean isHaveExtension ( ) { 
 + return haveExtension ; 
 + } 
 + 
 @ NotNull 
 public List < ContactRecord > getRecords ( ) { 
 return records ; 
 @ @ - 260 , 6 + 268 , 7 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV 
 / / Extension 
 
 if ( ext ! = null ) { 
 + this . haveExtension = true ; 
 this . records = new ArrayList < > ( ) ; 
 for ( ApiContactRecord record : ext . getContactInfo ( ) ) { 
 if ( record . getType ( ) = = ApiContactType . PHONE ) { 
 @ @ - 278 , 6 + 287 , 7 @ @ public class User extends WrapperExtEntity < ApiFullUser , ApiUser > implements KeyV 
 } 
 this . about = ext . getAbout ( ) ; 
 } else { 
 + this . haveExtension = false ; 
 this . records = new ArrayList < > ( ) ; 
 this . about = null ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Configuration . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Configuration . java 
 deleted file mode 100644 
 index 0c67016 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Configuration . java 
 + + + / dev / null 
 @ @ - 1 , 20 + 0 , 0 @ @ 
 - package im . actor . core . modules ; 
 - 
 - import java . util . ArrayList ; 
 - import java . util . Collections ; 
 - import java . util . List ; 
 - 
 - import im . actor . core . api . ApiUpdateOptimization ; 
 - 
 - public class Configuration { 
 - 
 - public static final List < ApiUpdateOptimization > OPTIMIZATIONS ; 
 - 
 - static { 
 - List < ApiUpdateOptimization > opts = new ArrayList < > ( ) ; 
 - opts . add ( ApiUpdateOptimization . STRIP _ ENTITIES ) ; 
 - opts . add ( ApiUpdateOptimization . STRIP _ COUNTERS ) ; 
 - opts . add ( ApiUpdateOptimization . COMPACT _ USERS ) ; 
 - OPTIMIZATIONS = Collections . unmodifiableList ( opts ) ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java 
 index e919456 . . 86b9238 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java 
 @ @ - 179 , 6 + 179 , 8 @ @ public class Modules implements ModuleContext { 
 
 
 timing = new Timing ( " ACCOUNT _ RUN " ) ; 
 + timing . section ( " Users " ) ; 
 + users . run ( ) ; 
 timing . section ( " Settings " ) ; 
 settings . run ( ) ; 
 timing . section ( " DeviceInfo " ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / ApiSupportConfiguration . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / ApiSupportConfiguration . java 
 new file mode 100644 
 index 0000000 . . 38f9632 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / ApiSupportConfiguration . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package im . actor . core . modules . api ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + 
 + import im . actor . core . api . ApiUpdateOptimization ; 
 + 
 + public class ApiSupportConfiguration { 
 + 
 + public static final List < ApiUpdateOptimization > OPTIMIZATIONS ; 
 + 
 + static { 
 + List < ApiUpdateOptimization > opts = new ArrayList < > ( ) ; 
 + opts . add ( ApiUpdateOptimization . STRIP _ ENTITIES ) ; 
 + opts . add ( ApiUpdateOptimization . STRIP _ COUNTERS ) ; 
 + opts . add ( ApiUpdateOptimization . COMPACT _ USERS ) ; 
 + OPTIMIZATIONS = Collections . unmodifiableList ( opts ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / BookImportActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / BookImportActor . java 
 index 35e9776 . . 6be814e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / BookImportActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / BookImportActor . java 
 @ @ - 4 , 19 + 4 , 15 @ @ 
 
 package im . actor . core . modules . contacts ; 
 
 - import java . io . IOException ; 
 import java . util . ArrayList ; 
 - import java . util . Arrays ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 
 import im . actor . core . api . ApiUserOutPeer ; 
 import im . actor . core . entity . PhoneBookIds ; 
 - import im . actor . core . modules . Configuration ; 
 + import im . actor . core . modules . api . ApiSupportConfiguration ; 
 import im . actor . core . modules . contacts . entity . BookImportStorage ; 
 - import im . actor . core . providers . PhoneBookProvider ; 
 import im . actor . core . api . ApiEmailToImport ; 
 - import im . actor . core . api . ApiGroup ; 
 import im . actor . core . api . ApiPhoneToImport ; 
 import im . actor . core . api . ApiUser ; 
 import im . actor . core . api . base . FatSeqUpdate ; 
 @ @ - 31 , 12 + 27 , 16 @ @ import im . actor . core . modules . ModuleActor ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . messages . Void ; 
 import im . actor . runtime . bser . Bser ; 
 
 public class BookImportActor extends ModuleActor { 
 
 private static final String TAG = " ContactsImport " ; 
 
 + / / j2objc workaround 
 + private static final Void DUMB = null ; 
 + 
 private final boolean ENABLE _ LOG ; 
 
 private static final int MAX _ IMPORT _ SIZE = 50 ; 
 @ @ - 218 , 7 + 218 , 7 @ @ public class BookImportActor extends ModuleActor { 
 throw new RuntimeException ( ) ; 
 } 
 } 
 - request ( new RequestImportContacts ( phoneToImports , emailToImports , Configuration . OPTIMIZATIONS ) , new RpcCallback < ResponseImportContacts > ( ) { 
 + request ( new RequestImportContacts ( phoneToImports , emailToImports , ApiSupportConfiguration . OPTIMIZATIONS ) , new RpcCallback < ResponseImportContacts > ( ) { 
 @ Override 
 public void onResult ( ResponseImportContacts response ) { 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsModule . java 
 index 2014fa8 . . c3b4902 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsModule . java 
 @ @ - 11 , 14 + 11 , 13 @ @ import im . actor . core . api . base . SeqUpdate ; 
 import im . actor . core . api . rpc . RequestAddContact ; 
 import im . actor . core . api . rpc . RequestRemoveContact ; 
 import im . actor . core . api . rpc . RequestSearchContacts ; 
 - import im . actor . core . api . rpc . ResponseSearchContacts ; 
 import im . actor . core . api . rpc . ResponseSeq ; 
 import im . actor . core . api . updates . UpdateContactsAdded ; 
 import im . actor . core . api . updates . UpdateContactsRemoved ; 
 import im . actor . core . entity . PhoneBookContact ; 
 import im . actor . core . entity . User ; 
 import im . actor . core . modules . AbsModule ; 
 - import im . actor . core . modules . Configuration ; 
 + import im . actor . core . modules . api . ApiSupportConfiguration ; 
 import im . actor . core . modules . Modules ; 
 import im . actor . core . viewmodel . Command ; 
 import im . actor . runtime . Storage ; 
 @ @ - 90 , 7 + 89 , 7 @ @ public class ContactsModule extends AbsModule { 
 } 
 
 public Promise < UserVM [ ] > findUsers ( final String query ) { 
 - return api ( new RequestSearchContacts ( query , Configuration . OPTIMIZATIONS ) ) 
 + return api ( new RequestSearchContacts ( query , ApiSupportConfiguration . OPTIMIZATIONS ) ) 
 . chain ( responseSearchContacts - > updates ( ) . applyRelatedData ( responseSearchContacts . getUsers ( ) ) ) 
 . map ( responseSearchContacts1 - > { 
 ArrayList < UserVM > users = new ArrayList < > ( ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsSyncActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsSyncActor . java 
 index 001607e . . 7f892f1 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsSyncActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / contacts / ContactsSyncActor . java 
 @ @ - 9 , 16 + 9 , 14 @ @ import java . io . UnsupportedEncodingException ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 - import java . util . Comparator ; 
 import java . util . List ; 
 
 - import im . actor . core . api . ApiGroup ; 
 import im . actor . core . api . ApiUser ; 
 import im . actor . core . api . rpc . RequestGetContacts ; 
 import im . actor . core . api . rpc . ResponseGetContacts ; 
 import im . actor . core . entity . Contact ; 
 import im . actor . core . entity . User ; 
 - import im . actor . core . modules . Configuration ; 
 + import im . actor . core . modules . api . ApiSupportConfiguration ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . ModuleActor ; 
 import im . actor . core . network . RpcCallback ; 
 @ @ - 115 , 7 + 113 , 7 @ @ public class ContactsSyncActor extends ModuleActor { 
 Log . d ( TAG , " Performing sync with uids : " + hash ) ; 
 } 
 
 - request ( new RequestGetContacts ( hashValue , Configuration . OPTIMIZATIONS ) , new RpcCallback < ResponseGetContacts > ( ) { 
 + request ( new RequestGetContacts ( hashValue , ApiSupportConfiguration . OPTIMIZATIONS ) , new RpcCallback < ResponseGetContacts > ( ) { 
 @ Override 
 public void onResult ( ResponseGetContacts response ) { 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ArchivedDialogsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ArchivedDialogsActor . java 
 index 1f8b969 . . 9dadad9 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ArchivedDialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ArchivedDialogsActor . java 
 @ @ - 6 , 7 + 6 , 7 @ @ package im . actor . core . modules . messaging . history ; 
 
 import im . actor . core . api . rpc . RequestLoadArchived ; 
 import im . actor . core . api . rpc . ResponseLoadArchived ; 
 - import im . actor . core . modules . Configuration ; 
 + import im . actor . core . modules . api . ApiSupportConfiguration ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 @ @ - 60 , 7 + 60 , 7 @ @ public class ArchivedDialogsActor extends ModuleActor { 
 isLoading = true ; 
 
 Log . d ( TAG , " Loading archived dialogs " ) ; 
 - lastRequest = request ( new RequestLoadArchived ( nextOffset , LIMIT , Configuration . OPTIMIZATIONS ) , 
 + lastRequest = request ( new RequestLoadArchived ( nextOffset , LIMIT , ApiSupportConfiguration . OPTIMIZATIONS ) , 
 new RpcCallback < ResponseLoadArchived > ( ) { 
 @ Override 
 public void onResult ( final ResponseLoadArchived response ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java 
 index 7bd66f9 . . e623b33 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java 
 @ @ - 18 , 7 + 18 , 7 @ @ import im . actor . core . entity . MessageState ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . Reaction ; 
 import im . actor . core . entity . content . AbsContent ; 
 - import im . actor . core . modules . Configuration ; 
 + import im . actor . core . modules . api . ApiSupportConfiguration ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . ModuleActor ; 
 import im . actor . runtime . Log ; 
 @ @ - 64 , 7 + 64 , 7 @ @ public class ConversationHistoryActor extends ModuleActor { 
 return ; 
 } 
 isLoading = true ; 
 - api ( new RequestLoadHistory ( buidOutPeer ( peer ) , historyMaxDate , null , LIMIT , Configuration . OPTIMIZATIONS ) ) 
 + api ( new RequestLoadHistory ( buidOutPeer ( peer ) , historyMaxDate , null , LIMIT , ApiSupportConfiguration . OPTIMIZATIONS ) ) 
 . then ( new Consumer < ResponseLoadHistory > ( ) { 
 @ Override 
 public void apply ( ResponseLoadHistory responseLoadHistory ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / DialogsHistoryActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / DialogsHistoryActor . java 
 index 2978b7f . . 5222263 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / DialogsHistoryActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / DialogsHistoryActor . java 
 @ @ - 10 , 13 + 10 , 11 @ @ import java . util . List ; 
 import im . actor . core . api . ApiDialog ; 
 import im . actor . core . api . ApiMessageState ; 
 import im . actor . core . api . rpc . RequestLoadDialogs ; 
 - import im . actor . core . api . rpc . ResponseLoadDialogs ; 
 import im . actor . core . entity . content . AbsContent ; 
 - import im . actor . core . modules . Configuration ; 
 + import im . actor . core . modules . api . ApiSupportConfiguration ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . messaging . history . entity . DialogHistory ; 
 import im . actor . core . modules . ModuleActor ; 
 - import im . actor . runtime . function . Consumer ; 
 
 import static im . actor . core . entity . EntityConverter . convert ; 
 
 @ @ - 51 , 7 + 49 , 7 @ @ public class DialogsHistoryActor extends ModuleActor { 
 } 
 isLoading = true ; 
 
 - api ( new RequestLoadDialogs ( historyMaxDate , LIMIT , Configuration . OPTIMIZATIONS ) ) 
 + api ( new RequestLoadDialogs ( historyMaxDate , LIMIT , ApiSupportConfiguration . OPTIMIZATIONS ) ) 
 . chain ( r - > loadRequiredPeers ( r . getUserPeers ( ) , r . getGroupPeers ( ) ) ) 
 . chain ( r - > updates ( ) . applyRelatedData ( r . getUsers ( ) , r . getGroups ( ) ) ) 
 . then ( r - > onLoadedMore ( r . getDialogs ( ) ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java 
 index e8b3ac5 . . face319 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java 
 @ @ - 7 , 9 + 7 , 6 @ @ package im . actor . core . modules . search ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 
 - import im . actor . core . api . ApiMessageSearchItem ; 
 - import im . actor . core . api . ApiMessageSearchResult ; 
 - import im . actor . core . api . ApiPeerSearchResult ; 
 import im . actor . core . api . ApiSearchAndCondition ; 
 import im . actor . core . api . ApiSearchCondition ; 
 import im . actor . core . api . ApiSearchContentType ; 
 @ @ - 20 , 8 + 17 , 6 @ @ import im . actor . core . api . ApiSearchPeerTypeCondition ; 
 import im . actor . core . api . ApiSearchPieceText ; 
 import im . actor . core . api . rpc . RequestMessageSearch ; 
 import im . actor . core . api . rpc . RequestPeerSearch ; 
 - import im . actor . core . api . rpc . ResponseMessageSearchResponse ; 
 - import im . actor . core . api . rpc . ResponsePeerSearch ; 
 import im . actor . core . entity . Dialog ; 
 import im . actor . core . entity . MessageSearchEntity ; 
 import im . actor . core . entity . Peer ; 
 @ @ - 30 , 16 + 25 , 10 @ @ import im . actor . core . entity . PeerSearchType ; 
 import im . actor . core . entity . SearchEntity ; 
 import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . modules . AbsModule ; 
 - import im . actor . core . modules . Configuration ; 
 + import im . actor . core . modules . api . ApiSupportConfiguration ; 
 import im . actor . core . modules . Modules ; 
 - import im . actor . core . network . RpcCallback ; 
 - import im . actor . core . network . RpcException ; 
 - import im . actor . core . viewmodel . Command ; 
 - import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . runtime . Storage ; 
 - import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 - import im . actor . runtime . actors . Props ; 
 import im . actor . runtime . collections . ManagedList ; 
 import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . storage . ListEngine ; 
 @ @ - 98 , 7 + 87 , 7 @ @ public class SearchModule extends AbsModule { 
 } 
 
 private Promise < List < MessageSearchEntity > > findMessages ( final ApiSearchCondition condition ) { 
 - return api ( new RequestMessageSearch ( condition , Configuration . OPTIMIZATIONS ) ) 
 + return api ( new RequestMessageSearch ( condition , ApiSupportConfiguration . OPTIMIZATIONS ) ) 
 . chain ( responseMessageSearchResponse - > 
 updates ( ) . applyRelatedData ( 
 responseMessageSearchResponse . getUsers ( ) , 
 @ @ - 123 , 7 + 112 , 7 @ @ public class SearchModule extends AbsModule { 
 ArrayList < ApiSearchCondition > conditions = new ArrayList < > ( ) ; 
 conditions . add ( new ApiSearchPeerTypeCondition ( apiType ) ) ; 
 
 - return api ( new RequestPeerSearch ( conditions , Configuration . OPTIMIZATIONS ) ) 
 + return api ( new RequestPeerSearch ( conditions , ApiSupportConfiguration . OPTIMIZATIONS ) ) 
 . chain ( responsePeerSearch - > 
 updates ( ) . applyRelatedData ( 
 responsePeerSearch . getUsers ( ) , 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java 
 index db5e4ec . . f49a89c 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java 
 @ @ - 18 , 7 + 18 , 7 @ @ import im . actor . core . api . base . WeakUpdate ; 
 import im . actor . core . api . parser . UpdatesParser ; 
 import im . actor . core . api . rpc . RequestGetDifference ; 
 import im . actor . core . api . rpc . RequestGetState ; 
 - import im . actor . core . modules . Configuration ; 
 + import im . actor . core . modules . api . ApiSupportConfiguration ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . sequence . internal . ExecuteAfter ; 
 import im . actor . core . modules . ModuleActor ; 
 @ @ - 199 , 7 + 199 , 7 @ @ public class SequenceActor extends ModuleActor { 
 
 if ( seq < 0 ) { 
 Log . d ( TAG , " Loading fresh state . . . " ) ; 
 - api ( new RequestGetState ( Configuration . OPTIMIZATIONS ) ) . then ( response - > { 
 + api ( new RequestGetState ( ApiSupportConfiguration . OPTIMIZATIONS ) ) . then ( response - > { 
 if ( isValidated ) { 
 return ; 
 } 
 @ @ - 218 , 7 + 218 , 7 @ @ public class SequenceActor extends ModuleActor { 
 Log . d ( TAG , " Loading difference . . . " ) ; 
 onUpdateStarted ( ) ; 
 final long loadStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; 
 - api ( new RequestGetDifference ( seq , state , Configuration . OPTIMIZATIONS ) ) . then ( response - > { 
 + api ( new RequestGetDifference ( seq , state , ApiSupportConfiguration . OPTIMIZATIONS ) ) . then ( response - > { 
 
 if ( isValidated ) { 
 return ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java 
 index 7e5896d . . cfe10e5 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java 
 @ @ - 12 , 7 + 12 , 12 @ @ import im . actor . core . api . updates . UpdateUserAboutChanged ; 
 import im . actor . core . api . updates . UpdateUserLocalNameChanged ; 
 import im . actor . core . api . updates . UpdateUserNameChanged ; 
 import im . actor . core . api . updates . UpdateUserNickChanged ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerType ; 
 import im . actor . core . entity . User ; 
 + import im . actor . core . events . PeerChatOpened ; 
 + import im . actor . core . events . PeerInfoOpened ; 
 + import im . actor . core . events . UserVisible ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . users . router . UserRouter ; 
 @ @ - 21 , 13 + 26 , 15 @ @ import im . actor . core . viewmodel . UserVM ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . actors . messages . Void ; 
 + import im . actor . runtime . eventbus . BusSubscriber ; 
 + import im . actor . runtime . eventbus . Event ; 
 import im . actor . runtime . mvvm . MVVMCollection ; 
 import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . storage . KeyValueEngine ; 
 
 import static im . actor . runtime . actors . ActorSystem . system ; 
 
 - public class UsersModule extends AbsModule { 
 + public class UsersModule extends AbsModule implements BusSubscriber { 
 
 private UserRouterInt userRouter ; 
 private KeyValueEngine < User > users ; 
 @ @ - 42 , 6 + 49 , 12 @ @ public class UsersModule extends AbsModule { 
 this . userRouter = new UserRouterInt ( context ) ; 
 } 
 
 + public void run ( ) { 
 + context ( ) . getEvents ( ) . subscribe ( this , PeerChatOpened . EVENT ) ; 
 + context ( ) . getEvents ( ) . subscribe ( this , UserVisible . EVENT ) ; 
 + context ( ) . getEvents ( ) . subscribe ( this , PeerInfoOpened . EVENT ) ; 
 + } 
 + 
 / / Model 
 
 public KeyValueEngine < User > getUsersStorage ( ) { 
 @ @ - 100 , 4 + 113 , 21 @ @ public class UsersModule extends AbsModule { 
 public void resetModule ( ) { 
 users . clear ( ) ; 
 } 
 + 
 + @ Override 
 + public void onBusEvent ( Event event ) { 
 + if ( event instanceof PeerChatOpened ) { 
 + Peer peer = ( ( PeerChatOpened ) event ) . getPeer ( ) ; 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + getUserRouter ( ) . onFullUserNeeded ( peer . getPeerId ( ) ) ; 
 + } 
 + } else if ( event instanceof UserVisible ) { 
 + getUserRouter ( ) . onFullUserNeeded ( ( ( UserVisible ) event ) . getUid ( ) ) ; 
 + } else if ( event instanceof PeerInfoOpened ) { 
 + Peer peer = ( ( PeerInfoOpened ) event ) . getPeer ( ) ; 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + getUserRouter ( ) . onFullUserNeeded ( peer . getPeerId ( ) ) ; 
 + } 
 + } 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java 
 index 117108f . . 8c8826f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouter . java 
 @ @ - 1 , 8 + 1 , 12 @ @ 
 package im . actor . core . modules . users . router ; 
 
 import java . util . ArrayList ; 
 + import java . util . HashSet ; 
 
 import im . actor . core . api . ApiAvatar ; 
 + import im . actor . core . api . ApiUserOutPeer ; 
 + import im . actor . core . api . rpc . RequestLoadFullUsers ; 
 + import im . actor . core . api . rpc . ResponseLoadFullUsers ; 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . MessageState ; 
 import im . actor . core . entity . Peer ; 
 @ @ - 13 , 132 + 17 , 180 @ @ import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . contacts . ContactsSyncActor ; 
 import im . actor . core . modules . users . router . entity . RouterAboutChanged ; 
 import im . actor . core . modules . users . router . entity . RouterAvatarChanged ; 
 + import im . actor . core . modules . users . router . entity . RouterLoadFullUser ; 
 import im . actor . core . modules . users . router . entity . RouterLocalNameChanged ; 
 import im . actor . core . modules . users . router . entity . RouterNameChanged ; 
 import im . actor . core . modules . users . router . entity . RouterNicknameChanged ; 
 import im . actor . core . modules . users . router . entity . RouterUserRegistered ; 
 import im . actor . runtime . actors . messages . Void ; 
 import im . actor . runtime . annotations . Verified ; 
 + import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . function . Function ; 
 + import im . actor . runtime . function . Tuple2 ; 
 import im . actor . runtime . promise . Promise ; 
 
 import static im . actor . core . util . JavaUtil . equalsE ; 
 
 public class UserRouter extends ModuleActor { 
 
 + / / j2objc workaround 
 + private static final Void DUMB = null ; 
 + 
 + private HashSet < Integer > requestedFullUsers = new HashSet < > ( ) ; 
 + private boolean isFreezed = false ; 
 + 
 public UserRouter ( ModuleContext context ) { 
 super ( context ) ; 
 } 
 
 @ Verified 
 - private Promise < Void > onUserNameChanged ( int uid , String name ) { 
 - User u = users ( ) . getValue ( uid ) ; 
 - if ( u ! = null ) { 
 - 
 - / / Ignore if name not changed 
 - if ( u . getServerName ( ) . equals ( name ) ) { 
 - return Promise . success ( null ) ; 
 - } 
 - 
 - / / Changing user name 
 - u = u . editName ( name ) ; 
 - 
 - / / Updating user in collection 
 - users ( ) . addOrUpdateItem ( u ) ; 
 - 
 - / / Notify if user doesn ' t have local name 
 - if ( u . getLocalName ( ) = = null ) { 
 - onUserDescChanged ( u ) ; 
 - } 
 + private void onLoadFullUser ( int uid ) { 
 + if ( requestedFullUsers . contains ( uid ) ) { 
 + return ; 
 } 
 + requestedFullUsers . add ( uid ) ; 
 + 
 + freeze ( ) ; 
 + users ( ) . getValueAsync ( uid ) 
 + . flatMap ( ( Function < User , Promise < Tuple2 < ResponseLoadFullUsers , User > > > ) u - > { 
 + if ( ! u . isHaveExtension ( ) ) { 
 + ArrayList < ApiUserOutPeer > users = new ArrayList < > ( ) ; 
 + users . add ( new ApiUserOutPeer ( u . getUid ( ) , u . getAccessHash ( ) ) ) ; 
 + return api ( new RequestLoadFullUsers ( users ) ) 
 + . map ( responseLoadFullUsers - > 
 + new Tuple2 < ResponseLoadFullUsers , User > ( responseLoadFullUsers , u ) ) ; 
 + } else { 
 + return Promise . failure ( new RuntimeException ( " Already loaded " ) ) ; 
 + } 
 + } ) 
 + . then ( r - > { 
 + 
 + / / Changing user extension 
 + User upd = r . getT2 ( ) . updateExt ( r . getT1 ( ) . getFullUsers ( ) . get ( 0 ) ) ; 
 + 
 + / / Updating user in collection 
 + users ( ) . addOrUpdateItem ( upd ) ; 
 + } ) 
 + . after ( ( r , e ) - > unfreeze ( ) ) ; 
 + } 
 
 - return Promise . success ( null ) ; 
 + @ Verified 
 + private Promise < Void > onUserNameChanged ( int uid , String name ) { 
 + freeze ( ) ; 
 + return users ( ) . getValueAsync ( uid ) 
 + . fallback ( u - > null ) 
 + . flatMap ( u - > { 
 + / / Ignore if name not changed 
 + if ( u ! = null & & ! u . getServerName ( ) . equals ( name ) ) { 
 + 
 + / / Changing user name 
 + u = u . editName ( name ) ; 
 + 
 + / / Updating user in collection 
 + users ( ) . addOrUpdateItem ( u ) ; 
 + 
 + / / Notify if user doesn ' t have local name 
 + if ( u . getLocalName ( ) = = null ) { 
 + return onUserDescChanged ( u ) ; 
 + } 
 + } 
 + return Promise . success ( ( Void ) null ) ; 
 + } ) 
 + . after ( ( r , e ) - > unfreeze ( ) ) ; 
 } 
 
 @ Verified 
 private Promise < Void > onUserNickChanged ( int uid , String nick ) { 
 - User u = users ( ) . getValue ( uid ) ; 
 - if ( u ! = null ) { 
 - 
 - / / Ignore if name not changed 
 - if ( equalsE ( u . getNick ( ) , nick ) ) { 
 - return Promise . success ( null ) ; 
 - } 
 - 
 - / / Changing user name 
 - u = u . editNick ( nick ) ; 
 - 
 - / / Updating user in collection 
 - users ( ) . addOrUpdateItem ( u ) ; 
 - } 
 - 
 - return Promise . success ( null ) ; 
 + freeze ( ) ; 
 + return users ( ) . getValueAsync ( uid ) 
 + . fallback ( u - > null ) 
 + . flatMap ( u - > { 
 + / / Ignore if username not changed 
 + if ( u ! = null & & ! equalsE ( u . getNick ( ) , nick ) ) { 
 + 
 + / / Changing user name 
 + u = u . editNick ( nick ) ; 
 + 
 + / / Updating user in collection 
 + users ( ) . addOrUpdateItem ( u ) ; 
 + } 
 + return Promise . success ( ( Void ) null ) ; 
 + } ) 
 + . after ( ( r , e ) - > unfreeze ( ) ) ; 
 } 
 
 @ Verified 
 private Promise < Void > onUserAboutChanged ( int uid , String about ) { 
 - User u = users ( ) . getValue ( uid ) ; 
 - if ( u ! = null ) { 
 - 
 - / / Ignore if name not changed 
 - if ( equalsE ( u . getAbout ( ) , about ) ) { 
 - return Promise . success ( null ) ; 
 - } 
 - 
 - / / Changing about information 
 - u = u . editAbout ( about ) ; 
 - 
 - / / Updating user in collection 
 - users ( ) . addOrUpdateItem ( u ) ; 
 - } 
 - 
 - return Promise . success ( null ) ; 
 + freeze ( ) ; 
 + return users ( ) . getValueAsync ( uid ) 
 + . fallback ( u - > null ) 
 + . flatMap ( u - > { 
 + / / Ignore if name not changed 
 + if ( u ! = null & & ! equalsE ( u . getAbout ( ) , about ) ) { 
 + 
 + / / Changing about information 
 + u = u . editAbout ( about ) ; 
 + 
 + / / Updating user in collection 
 + users ( ) . addOrUpdateItem ( u ) ; 
 + } 
 + return Promise . success ( ( Void ) null ) ; 
 + } ) 
 + . after ( ( r , e ) - > unfreeze ( ) ) ; 
 } 
 
 @ Verified 
 private Promise < Void > onUserLocalNameChanged ( int uid , String name ) { 
 - User u = users ( ) . getValue ( uid ) ; 
 - if ( u ! = null ) { 
 - 
 - / / Ignore if local name not changed 
 - if ( equalsE ( u . getLocalName ( ) , name ) ) { 
 - return Promise . success ( null ) ; 
 - } 
 - 
 - / / Changing user local name 
 - u = u . editLocalName ( name ) ; 
 - 
 - / / Updating user in collection 
 - users ( ) . addOrUpdateItem ( u ) ; 
 - 
 - / / Notify about user change 
 - onUserDescChanged ( u ) ; 
 - } 
 - 
 - return Promise . success ( null ) ; 
 + freeze ( ) ; 
 + return users ( ) . getValueAsync ( uid ) 
 + . fallback ( u - > null ) 
 + . flatMap ( u - > { 
 + / / Ignore if local name not changed 
 + if ( u ! = null & & ! equalsE ( u . getLocalName ( ) , name ) ) { 
 + 
 + / / Changing user local name 
 + u = u . editLocalName ( name ) ; 
 + 
 + / / Updating user in collection 
 + users ( ) . addOrUpdateItem ( u ) ; 
 + 
 + / / Notify about user change 
 + return onUserDescChanged ( u ) ; 
 + } 
 + 
 + return Promise . success ( ( Void ) null ) ; 
 + } ) 
 + . after ( ( r , e ) - > unfreeze ( ) ) ; 
 } 
 
 @ Verified 
 private Promise < Void > onUserAvatarChanged ( int uid , ApiAvatar avatar ) { 
 - User u = users ( ) . getValue ( uid ) ; 
 - if ( u ! = null ) { 
 - 
 - / / Ignore if avatar not changed 
 - / / Disabled because of future - compatibility it is unable to check equality 
 - / / if ( equalsE ( u . getAvatar ( ) , new im . actor . model . entity . Avatar ( avatar ) ) ) { 
 - / / return ; 
 - / / } 
 - 
 - / / Changing user avatar 
 - u = u . editAvatar ( avatar ) ; 
 - 
 - / / Updating user in collection 
 - users ( ) . addOrUpdateItem ( u ) ; 
 - 
 - / / Notify about user change 
 - onUserDescChanged ( u ) ; 
 - } 
 - 
 - return Promise . success ( null ) ; 
 + freeze ( ) ; 
 + return users ( ) . getValueAsync ( uid ) 
 + . fallback ( u - > null ) 
 + . flatMap ( u - > { 
 + / / Ignore if local name not changed 
 + if ( u ! = null ) { 
 + 
 + / / Ignore if avatar not changed 
 + / / Disabled because of future - compatibility it is unable to check equality 
 + / / if ( equalsE ( u . getAvatar ( ) , new im . actor . model . entity . Avatar ( avatar ) ) ) { 
 + / / return ; 
 + / / } 
 + 
 + / / Changing user avatar 
 + u = u . editAvatar ( avatar ) ; 
 + 
 + / / Updating user in collection 
 + users ( ) . addOrUpdateItem ( u ) ; 
 + 
 + / / Notify about user change 
 + return onUserDescChanged ( u ) ; 
 + } 
 + 
 + return Promise . success ( ( Void ) null ) ; 
 + } ) 
 + . after ( ( r , e ) - > unfreeze ( ) ) ; 
 } 
 
 @ Verified 
 @ @ - 146 , 38 + 198 , 90 @ @ public class UserRouter extends ModuleActor { 
 ArrayList < Message > messages = new ArrayList < > ( ) ; 
 messages . add ( new Message ( rid , date , date , uid , MessageState . UNKNOWN , ServiceUserRegistered . create ( ) ) ) ; 
 context ( ) . getMessagesModule ( ) . getRouter ( ) . onNewMessages ( Peer . user ( uid ) , messages ) ; 
 - return Promise . success ( null ) ; 
 + return Promise . success ( ( Void ) null ) ; 
 } 
 
 @ Verified 
 - private void onUserDescChanged ( User u ) { 
 + private Promise < Void > onUserDescChanged ( User u ) { 
 context ( ) . getMessagesModule ( ) . getRouter ( ) . onUserChanged ( u ) ; 
 context ( ) . getContactsModule ( ) . getContactSyncActor ( ) 
 . send ( new ContactsSyncActor . UserChanged ( u ) ) ; 
 + return Promise . success ( ( Void ) null ) ; 
 + } 
 + 
 + private void freeze ( ) { 
 + isFreezed = true ; 
 + } 
 + 
 + private void unfreeze ( ) { 
 + isFreezed = false ; 
 + unstashAll ( ) ; 
 } 
 
 + / / 
 + / / Messages 
 + / / 
 + 
 @ Override 
 public Promise onAsk ( Object message ) throws Exception { 
 if ( message instanceof RouterNameChanged ) { 
 + if ( isFreezed ) { 
 + stash ( ) ; 
 + return null ; 
 + } 
 RouterNameChanged nameChanged = ( RouterNameChanged ) message ; 
 return onUserNameChanged ( nameChanged . getUid ( ) , nameChanged . getName ( ) ) ; 
 } else if ( message instanceof RouterLocalNameChanged ) { 
 + if ( isFreezed ) { 
 + stash ( ) ; 
 + return null ; 
 + } 
 RouterLocalNameChanged localNameChanged = ( RouterLocalNameChanged ) message ; 
 return onUserLocalNameChanged ( localNameChanged . getUid ( ) , localNameChanged . getLocalName ( ) ) ; 
 } else if ( message instanceof RouterAvatarChanged ) { 
 + if ( isFreezed ) { 
 + stash ( ) ; 
 + return null ; 
 + } 
 RouterAvatarChanged avatarChanged = ( RouterAvatarChanged ) message ; 
 return onUserAvatarChanged ( avatarChanged . getUid ( ) , avatarChanged . getAvatar ( ) ) ; 
 } else if ( message instanceof RouterNicknameChanged ) { 
 + if ( isFreezed ) { 
 + stash ( ) ; 
 + return null ; 
 + } 
 RouterNicknameChanged nicknameChanged = ( RouterNicknameChanged ) message ; 
 return onUserNickChanged ( nicknameChanged . getUid ( ) , nicknameChanged . getNickname ( ) ) ; 
 } else if ( message instanceof RouterAboutChanged ) { 
 + if ( isFreezed ) { 
 + stash ( ) ; 
 + return null ; 
 + } 
 RouterAboutChanged aboutChanged = ( RouterAboutChanged ) message ; 
 return onUserAboutChanged ( aboutChanged . getUid ( ) , aboutChanged . getAbout ( ) ) ; 
 } else if ( message instanceof RouterUserRegistered ) { 
 + if ( isFreezed ) { 
 + stash ( ) ; 
 + return null ; 
 + } 
 RouterUserRegistered userRegistered = ( RouterUserRegistered ) message ; 
 return onUserRegistered ( userRegistered . getRid ( ) , userRegistered . getUid ( ) , userRegistered . getDate ( ) ) ; 
 } else { 
 return super . onAsk ( message ) ; 
 } 
 } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof RouterLoadFullUser ) { 
 + if ( isFreezed ) { 
 + stash ( ) ; 
 + return ; 
 + } 
 + RouterLoadFullUser loadFullUser = ( RouterLoadFullUser ) message ; 
 + onLoadFullUser ( loadFullUser . getUid ( ) ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouterInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouterInt . java 
 index d041adf . . 67f7af4 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouterInt . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / UserRouterInt . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import im . actor . core . api . ApiAvatar ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . users . router . entity . RouterAboutChanged ; 
 import im . actor . core . modules . users . router . entity . RouterAvatarChanged ; 
 + import im . actor . core . modules . users . router . entity . RouterLoadFullUser ; 
 import im . actor . core . modules . users . router . entity . RouterLocalNameChanged ; 
 import im . actor . core . modules . users . router . entity . RouterNameChanged ; 
 import im . actor . core . modules . users . router . entity . RouterNicknameChanged ; 
 @ @ - 43 , 4 + 44 , 8 @ @ public class UserRouterInt extends ActorInterface { 
 public Promise < Void > onUserRegistered ( int uid , long rid , long date ) { 
 return ask ( new RouterUserRegistered ( rid , uid , date ) ) ; 
 } 
 - } 
 + 
 + public void onFullUserNeeded ( int uid ) { 
 + send ( new RouterLoadFullUser ( uid ) ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / entity / RouterLoadFullUser . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / entity / RouterLoadFullUser . java 
 new file mode 100644 
 index 0000000 . . 21bbe68 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / router / entity / RouterLoadFullUser . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . core . modules . users . router . entity ; 
 + 
 + public class RouterLoadFullUser { 
 + 
 + private int uid ; 
 + 
 + public RouterLoadFullUser ( int uid ) { 
 + this . uid = uid ; 
 + } 
 + 
 + public int getUid ( ) { 
 + return uid ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 1aeca3b . . 318d1ae 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 358 , 6 + 358 , 20 @ @ public class JsFacade implements Exportable { 
 messenger . getSharedDialogList ( ) . unsubscribe ( callback ) ; 
 } 
 
 + public void bindArchivedDialogs ( JsDisplayListCallback < JsDialog > callback ) { 
 + if ( callback = = null ) { 
 + return ; 
 + } 
 + messenger . getSharedArchivedDialogList ( ) . subscribe ( callback , false ) ; 
 + } 
 + 
 + public void unbindArchivedDialogs ( JsDisplayListCallback < JsDialog > callback ) { 
 + if ( callback = = null ) { 
 + return ; 
 + } 
 + messenger . getSharedArchivedDialogList ( ) . unsubscribe ( callback ) ; 
 + } 
 + 
 public void bindGroupDialogs ( JsBindedValueCallback callback ) { 
 if ( callback = = null ) { 
 return ; 
 @ @ - 834 , 6 + 848 , 10 @ @ public class JsFacade implements Exportable { 
 messenger . loadMoreDialogs ( ) ; 
 } 
 
 + public void onArchivedDialogsEnd ( ) { 
 + messenger . loadMoreArchivedDialogs ( ) ; 
 + } 
 + 
 public void onChatEnd ( JsPeer peer ) { 
 messenger . loadMoreHistory ( peer . convert ( ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 index 27a49d6 . . 344388e 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 @ @ - 163 , 6 + 163 , 10 @ @ public class JsMessenger extends Messenger { 
 modules . getMessagesModule ( ) . loadMoreDialogs ( ) ; 
 } 
 
 + public void loadMoreArchivedDialogs ( ) { 
 + modules . getMessagesModule ( ) . loadMoreArchivedDialogs ( ) ; 
 + } 
 + 
 public void loadMoreHistory ( Peer peer ) { 
 modules . getMessagesModule ( ) . loadMoreHistory ( peer ) ; 
 } 
 @ @ - 229 , 6 + 233 , 10 @ @ public class JsMessenger extends Messenger { 
 return jsBindingModule . getSharedDialogList ( ) ; 
 } 
 
 + public JsDisplayList < JsDialog , Dialog > getSharedArchivedDialogList ( ) { 
 + return jsBindingModule . getSharedArchivedDialogList ( ) ; 
 + } 
 + 
 public JsDisplayList < JsContact , Contact > getSharedContactList ( ) { 
 return jsBindingModule . getSharedContactList ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 index b1a6005 . . 000c6d9 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 @ @ - 68 , 6 + 68 , 7 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 private JsBindedValue < String > onlineState ; 
 
 private JsDisplayList < JsDialog , Dialog > dialogsList ; 
 + private JsDisplayList < JsDialog , Dialog > archivedDialogsList ; 
 private JsDisplayList < JsContact , Contact > contactsList ; 
 private JsDisplayList < JsSearchEntity , SearchEntity > searchList ; 
 private HashMap < Peer , JsDisplayList < JsMessage , Message > > messageLists = new HashMap < > ( ) ; 
 @ @ - 364 , 6 + 365 , 14 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 return dialogsList ; 
 } 
 
 + public JsDisplayList < JsDialog , Dialog > getSharedArchivedDialogList ( ) { 
 + if ( archivedDialogsList = = null ) { 
 + archivedDialogsList = ( JsDisplayList < JsDialog , Dialog > ) context ( ) . getDisplayListsModule ( ) . getArchivedDialogsSharedList ( ) ; 
 + } 
 + 
 + return archivedDialogsList ; 
 + } 
 + 
 public JsDisplayList < JsMessage , Message > getSharedMessageList ( Peer peer ) { 
 if ( ! messageLists . containsKey ( peer ) ) { 
 messageLists . put ( peer , 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java 
 index 933a2b8 . . 3bcc723 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import im . actor . runtime . storage . PreferencesStorage ; 
 public abstract class AbsModule { 
 
 public static final String STORAGE _ DIALOGS = " dialogs " ; 
 + public static final String STORAGE _ ARCHIVED _ DIALOGS = " dialogs _ archived " ; 
 public static final String STORAGE _ DIALOGS _ DESC = " dialogs _ desc " ; 
 public static final String STORAGE _ USERS = " users " ; 
 public static final String STORAGE _ STICKER _ PACKS = " sticker _ packs " ; 
 @ @ - 74 , 6 + 75 , 10 @ @ public abstract class AbsModule { 
 return context ( ) . getMessagesModule ( ) . getDialogsHistoryActor ( ) ; 
 } 
 
 + public ActorRef archivedDialogsActor ( ) { 
 + return context ( ) . getMessagesModule ( ) . getArchivedDialogsActor ( ) ; 
 + } 
 + 
 public ActorRef ownReadActor ( ) { 
 return context ( ) . getMessagesModule ( ) . getOwnReadActor ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DisplayLists . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DisplayLists . java 
 index bdfe3de . . 5de0342 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DisplayLists . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / DisplayLists . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . runtime . mvvm . PlatformDisplayList ; 
 public class DisplayLists extends AbsModule { 
 
 private PlatformDisplayList < Dialog > dialogGlobalList ; 
 + private PlatformDisplayList < Dialog > archivedDialogGlobalList ; 
 
 private PlatformDisplayList < Contact > contactsGlobalList ; 
 
 @ @ - 50 , 6 + 51 , 16 @ @ public class DisplayLists extends AbsModule { 
 return dialogGlobalList ; 
 } 
 
 + public PlatformDisplayList < Dialog > getArchivedDialogsSharedList ( ) { 
 + im . actor . runtime . Runtime . checkMainThread ( ) ; 
 + 
 + if ( archivedDialogGlobalList = = null ) { 
 + archivedDialogGlobalList = buildArchivedDialogsList ( true ) ; 
 + } 
 + 
 + return archivedDialogGlobalList ; 
 + } 
 + 
 public PlatformDisplayList < Message > getMessagesSharedList ( Peer peer ) { 
 im . actor . runtime . Runtime . checkMainThread ( ) ; 
 
 @ @ - 82 , 6 + 93 , 17 @ @ public class DisplayLists extends AbsModule { 
 return res ; 
 } 
 
 + public PlatformDisplayList < Dialog > buildArchivedDialogsList ( boolean isShared ) { 
 + im . actor . runtime . Runtime . checkMainThread ( ) ; 
 + 
 + PlatformDisplayList < Dialog > res = Storage . createDisplayList ( context ( ) . getMessagesModule ( ) . getArchivedDialogsEngine ( ) , 
 + isShared , Dialog . ENTITY _ NAME ) ; 
 + 
 + res . initTop ( ) ; 
 + 
 + return res ; 
 + } 
 + 
 public PlatformDisplayList < Contact > buildContactList ( boolean isShared ) { 
 im . actor . runtime . Runtime . checkMainThread ( ) ; 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 7c6ab7d . . 7641b6f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 47 , 6 + 47 , 7 @ @ import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . events . AppVisibleChanged ; 
 import im . actor . core . events . PeerChatClosed ; 
 import im . actor . core . events . PeerChatOpened ; 
 + import im . actor . core . modules . internal . messages . ArchivedDialogsActor ; 
 import im . actor . core . modules . internal . messages . ConversationActor ; 
 import im . actor . core . modules . internal . messages . ConversationHistoryActor ; 
 import im . actor . core . modules . internal . messages . CursorReaderActor ; 
 @ @ - 66 , 6 + 67 , 7 @ @ import im . actor . core . viewmodel . Command ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . core . viewmodel . ConversationVM ; 
 import im . actor . core . viewmodel . DialogGroupsVM ; 
 + import im . actor . core . viewmodel . DialogSmall ; 
 import im . actor . core . viewmodel . DialogSpecVM ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorCreator ; 
 @ @ - 83 , 9 + 85 , 11 @ @ import static im . actor . runtime . actors . ActorSystem . system ; 
 public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 private ListEngine < Dialog > dialogs ; 
 + private ListEngine < Dialog > archivedDialogs ; 
 
 private ActorRef dialogsActor ; 
 private ActorRef dialogsHistoryActor ; 
 + private ActorRef archivedDialogsActor ; 
 private ActorRef dialogsGroupedActor ; 
 private ActorRef ownReadActor ; 
 private ActorRef plainReadActor ; 
 @ @ - 110 , 6 + 114 , 7 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 this . dialogDescKeyValue = Storage . createKeyValue ( STORAGE _ DIALOGS _ DESC , DialogSpecVM . CREATOR , DialogSpec . CREATOR ) ; 
 this . cursorStorage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ CURSOR ) ) ; 
 this . dialogs = Storage . createList ( STORAGE _ DIALOGS , Dialog . CREATOR ) ; 
 + this . archivedDialogs = Storage . createList ( STORAGE _ ARCHIVED _ DIALOGS , Dialog . CREATOR ) ; 
 } 
 
 public void run ( ) { 
 @ @ - 126 , 6 + 131 , 13 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } 
 } ) , " actor / dialogs / history " ) ; 
 
 + this . archivedDialogsActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 + @ Override 
 + public ArchivedDialogsActor create ( ) { 
 + return new ArchivedDialogsActor ( context ( ) ) ; 
 + } 
 + } ) , " actor / dialogs / archived " ) ; 
 + 
 this . dialogsGroupedActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 @ Override 
 public GroupedDialogsActor create ( ) { 
 @ @ - 261 , 6 + 273 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 return dialogsHistoryActor ; 
 } 
 
 + public ActorRef getArchivedDialogsActor ( ) { 
 + return archivedDialogsActor ; 
 + } 
 + 
 public ActorRef getDialogsGroupedActor ( ) { 
 return dialogsGroupedActor ; 
 } 
 @ @ - 269 , 6 + 285 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 return dialogs ; 
 } 
 
 + public ListEngine < Dialog > getArchivedDialogsEngine ( ) { 
 + return archivedDialogs ; 
 + } 
 + 
 public void deleteMessages ( Peer peer , long [ ] rids ) { 
 ActorRef conversationActor = getConversationActor ( peer ) ; 
 ArrayList < Long > deleted = new ArrayList < Long > ( ) ; 
 @ @ - 288 , 6 + 308 , 15 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } ) ; 
 } 
 
 + public void loadMoreArchivedDialogs ( ) { 
 + im . actor . runtime . Runtime . dispatch ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + archivedDialogsActor . send ( new ArchivedDialogsActor . LoadMore ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 public void loadMoreHistory ( final Peer peer ) { 
 im . actor . runtime . Runtime . dispatch ( new Runnable ( ) { 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ArchivedDialogsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ArchivedDialogsActor . java 
 new file mode 100644 
 index 0000000 . . 2b829e7 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ArchivedDialogsActor . java 
 @ @ - 0 , 0 + 1 , 119 @ @ 
 + / * 
 + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + * / 
 + 
 + package im . actor . core . modules . internal . messages ; 
 + 
 + import im . actor . core . api . ApiDialogShort ; 
 + import im . actor . core . api . rpc . RequestLoadArchived ; 
 + import im . actor . core . api . rpc . RequestLoadDialogs ; 
 + import im . actor . core . api . rpc . ResponseLoadArchived ; 
 + import im . actor . core . api . rpc . ResponseLoadDialogs ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . updates . internal . ArchivedDialogLoaded ; 
 + import im . actor . core . modules . updates . internal . DialogHistoryLoaded ; 
 + import im . actor . core . network . RpcCallback ; 
 + import im . actor . core . network . RpcException ; 
 + import im . actor . core . util . ModuleActor ; 
 + import im . actor . runtime . Log ; 
 + 
 + public class ArchivedDialogsActor extends ModuleActor { 
 + 
 + private static final String TAG = " ArchivedDialogsActor " ; 
 + 
 + private static final int LIMIT = 20 ; 
 + 
 + private static final String KEY _ LOADED _ DATE = " archived _ dialogs _ date " ; 
 + private static final String KEY _ LOADED = " archived _ dialogs _ loaded " ; 
 + private static final String KEY _ LOADED _ INIT = " archived _ dialogs _ inited " ; 
 + 
 + private byte [ ] nextOffset ; 
 + private boolean archivedLoaded ; 
 + 
 + private boolean isLoading = false ; 
 + 
 + public ArchivedDialogsActor ( ModuleContext context ) { 
 + super ( context ) ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + nextOffset = preferences ( ) . getBytes ( KEY _ LOADED _ DATE ) ; 
 + archivedLoaded = preferences ( ) . getBool ( KEY _ LOADED , false ) ; 
 + if ( ! preferences ( ) . getBool ( KEY _ LOADED _ INIT , false ) ) { 
 + self ( ) . send ( new LoadMore ( ) ) ; 
 + } 
 + } 
 + 
 + private void onLoadMore ( ) { 
 + if ( archivedLoaded ) { 
 + return ; 
 + } 
 + if ( isLoading ) { 
 + return ; 
 + } 
 + isLoading = true ; 
 + 
 + Log . d ( TAG , " Loading archived " ) ; 
 + 
 + request ( new RequestLoadArchived ( nextOffset , LIMIT ) , 
 + new RpcCallback < ResponseLoadArchived > ( ) { 
 + @ Override 
 + public void onResult ( ResponseLoadArchived response ) { 
 + 
 + / / Invoke on sequence actor 
 + updates ( ) . onUpdateReceived ( new ArchivedDialogLoaded ( response ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( RpcException e ) { 
 + e . printStackTrace ( ) ; 
 + / / Never happens 
 + } 
 + } ) ; 
 + } 
 + 
 + private void onLoadedMore ( int loaded , byte [ ] nextOffset ) { 
 + isLoading = false ; 
 + 
 + if ( loaded < LIMIT ) { 
 + archivedLoaded = true ; 
 + } else { 
 + archivedLoaded = false ; 
 + this . nextOffset = nextOffset ; 
 + } 
 + preferences ( ) . putBytes ( KEY _ LOADED _ DATE , nextOffset ) ; 
 + preferences ( ) . putBool ( KEY _ LOADED , archivedLoaded ) ; 
 + preferences ( ) . putBool ( KEY _ LOADED _ INIT , true ) ; 
 + 
 + Log . d ( TAG , " Archived loaded " ) ; 
 + } 
 + 
 + / / Messages 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof LoadMore ) { 
 + onLoadMore ( ) ; 
 + } else if ( message instanceof LoadedMore ) { 
 + LoadedMore loaded = ( LoadedMore ) message ; 
 + onLoadedMore ( loaded . loaded , loaded . nextOffset ) ; 
 + } else { 
 + drop ( message ) ; 
 + } 
 + } 
 + 
 + public static class LoadMore { 
 + 
 + } 
 + 
 + public static class LoadedMore { 
 + private int loaded ; 
 + private byte [ ] nextOffset ; 
 + 
 + public LoadedMore ( int loaded , byte [ ] nextOffset ) { 
 + this . loaded = loaded ; 
 + this . nextOffset = nextOffset ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java 
 index ad106d2 . . dd1c788 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java 
 @ @ - 31 , 7 + 31 , 9 @ @ import static im . actor . core . util . JavaUtil . equalsE ; 
 public class DialogsActor extends ModuleActor { 
 
 private ListEngine < Dialog > dialogs ; 
 + private ListEngine < Dialog > archivedDialogs ; 
 private Boolean isEmpty ; 
 + private Boolean isArchivedEmpty ; 
 private Boolean emptyNotified ; 
 
 public DialogsActor ( ModuleContext context ) { 
 @ @ - 42 , 7 + 44 , 9 @ @ public class DialogsActor extends ModuleActor { 
 public void preStart ( ) { 
 super . preStart ( ) ; 
 this . dialogs = context ( ) . getMessagesModule ( ) . getDialogsEngine ( ) ; 
 - notifyState ( true ) ; 
 + this . archivedDialogs = context ( ) . getMessagesModule ( ) . getArchivedDialogsEngine ( ) ; 
 + notifyState ( true , true ) ; 
 + notifyState ( true , false ) ; 
 } 
 
 @ Verified 
 @ @ - 116 , 7 + 120 , 7 @ @ public class DialogsActor extends ModuleActor { 
 } 
 
 addOrUpdateItem ( builder . createDialog ( ) ) ; 
 - notifyState ( forceUpdate ) ; 
 + notifyState ( forceUpdate , false ) ; 
 } 
 
 Log . d ( " DialogsActor " , " onMessage in " + ( Runtime . getCurrentTime ( ) - start ) + " ms " ) ; 
 @ @ - 160 , 8 + 164 , 10 @ @ public class DialogsActor extends ModuleActor { 
 private void onChatDeleted ( Peer peer ) { 
 / / Removing dialog 
 dialogs . removeItem ( peer . getUnuqueId ( ) ) ; 
 + archivedDialogs . removeItem ( peer . getUnuqueId ( ) ) ; 
 
 - notifyState ( true ) ; 
 + notifyState ( true , true ) ; 
 + notifyState ( true , false ) ; 
 } 
 
 @ Verified 
 @ @ - 235 , 11 + 241 , 11 @ @ public class DialogsActor extends ModuleActor { 
 } 
 
 @ Verified 
 - private void onHistoryLoaded ( List < DialogHistory > history ) { 
 + private void onHistoryLoaded ( List < DialogHistory > history , boolean isArchived ) { 
 ArrayList < Dialog > updated = new ArrayList < Dialog > ( ) ; 
 for ( DialogHistory dialogHistory : history ) { 
 / / Ignore already available dialogs 
 - if ( dialogs . getValue ( dialogHistory . getPeer ( ) . getUnuqueId ( ) ) ! = null ) { 
 + if ( ( isArchived ? archivedDialogs : dialogs ) . getValue ( dialogHistory . getPeer ( ) . getUnuqueId ( ) ) ! = null ) { 
 continue ; 
 } 
 
 @ @ - 256 , 16 + 262 , 19 @ @ public class DialogsActor extends ModuleActor { 
 dialogHistory . getRid ( ) , description . getContentType ( ) , description . getText ( ) , dialogHistory . getStatus ( ) , 
 dialogHistory . getSenderId ( ) , dialogHistory . getDate ( ) , description . getRelatedUser ( ) ) ) ; 
 } 
 - addOrUpdateItems ( updated ) ; 
 - updateSearch ( updated ) ; 
 - context ( ) . getAppStateModule ( ) . onDialogsLoaded ( ) ; 
 - notifyState ( true ) ; 
 + addOrUpdateItems ( updated , isArchived ) ; 
 + if ( ! isArchived ) { 
 + updateSearch ( updated ) ; 
 + context ( ) . getAppStateModule ( ) . onDialogsLoaded ( ) ; 
 + } 
 + notifyState ( true , isArchived ) ; 
 } 
 
 + 
 / / Utils 
 
 - private void addOrUpdateItems ( List < Dialog > updated ) { 
 - dialogs . addOrUpdateItems ( updated ) ; 
 + private void addOrUpdateItems ( List < Dialog > updated , boolean isArchived ) { 
 + ( isArchived ? archivedDialogs : dialogs ) . addOrUpdateItems ( updated ) ; 
 } 
 
 private void addOrUpdateItem ( Dialog dialog ) { 
 @ @ - 282 , 12 + 291 , 16 @ @ public class DialogsActor extends ModuleActor { 
 context ( ) . getSearchModule ( ) . onDialogsChanged ( updated ) ; 
 } 
 
 - private void notifyState ( boolean force ) { 
 - if ( isEmpty = = null | | force ) { 
 - isEmpty = this . dialogs . isEmpty ( ) ; 
 + private void notifyState ( boolean force , boolean isArchived ) { 
 + if ( ( isArchived ? isArchivedEmpty : isEmpty ) = = null | | force ) { 
 + if ( isArchived ) { 
 + isArchivedEmpty = this . archivedDialogs . isEmpty ( ) ; 
 + } else { 
 + isEmpty = this . dialogs . isEmpty ( ) ; 
 + } 
 } 
 
 - if ( ! isEmpty . equals ( emptyNotified ) ) { 
 + if ( ! isArchived & & ! isEmpty . equals ( emptyNotified ) ) { 
 emptyNotified = isEmpty ; 
 context ( ) . getAppStateModule ( ) . onDialogsUpdate ( isEmpty ) ; 
 } 
 @ @ - 349 , 7 + 362 , 7 @ @ public class DialogsActor extends ModuleActor { 
 onMessage ( deleted . getPeer ( ) , deleted . getTopMessage ( ) , true , - 1 ) ; 
 } else if ( message instanceof HistoryLoaded ) { 
 HistoryLoaded historyLoaded = ( HistoryLoaded ) message ; 
 - onHistoryLoaded ( historyLoaded . getHistory ( ) ) ; 
 + onHistoryLoaded ( historyLoaded . getHistory ( ) , ( ( HistoryLoaded ) message ) . isArchived ( ) ) ; 
 } else if ( message instanceof GroupChanged ) { 
 GroupChanged groupChanged = ( GroupChanged ) message ; 
 onGroupChanged ( groupChanged . getGroup ( ) ) ; 
 @ @ - 522 , 14 + 535 , 20 @ @ public class DialogsActor extends ModuleActor { 
 } 
 
 public static class HistoryLoaded { 
 + boolean archived ; 
 private List < DialogHistory > history ; 
 
 - public HistoryLoaded ( List < DialogHistory > history ) { 
 + public HistoryLoaded ( List < DialogHistory > history , boolean archived ) { 
 this . history = history ; 
 + this . archived = archived ; 
 } 
 
 public List < DialogHistory > getHistory ( ) { 
 return history ; 
 } 
 + 
 + public boolean isArchived ( ) { 
 + return archived ; 
 + } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 index bb49bcf . . a080dec 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 @ @ - 10 , 12 + 10 , 12 @ @ import java . util . List ; 
 
 import im . actor . core . api . ApiDialog ; 
 import im . actor . core . api . ApiDialogGroup ; 
 - import im . actor . core . api . ApiEncryptedMessage ; 
 import im . actor . core . api . ApiMessage ; 
 import im . actor . core . api . ApiMessageContainer ; 
 import im . actor . core . api . ApiMessageReaction ; 
 import im . actor . core . api . ApiPeer ; 
 import im . actor . core . api . ApiAppCounters ; 
 + import im . actor . core . api . rpc . ResponseLoadArchived ; 
 import im . actor . core . api . rpc . ResponseLoadDialogs ; 
 import im . actor . core . api . rpc . ResponseLoadHistory ; 
 import im . actor . core . api . updates . UpdateMessage ; 
 @ @ - 27 , 7 + 27 , 7 @ @ import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . entity . content . ServiceUserRegistered ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 - import im . actor . core . modules . encryption . EncryptedMsgActor ; 
 + import im . actor . core . modules . internal . messages . ArchivedDialogsActor ; 
 import im . actor . core . modules . internal . messages . ConversationActor ; 
 import im . actor . core . modules . internal . messages . ConversationHistoryActor ; 
 import im . actor . core . modules . internal . messages . CursorReceiverActor ; 
 @ @ - 286 , 14 + 286 , 21 @ @ public class MessagesProcessor extends AbsModule { 
 
 @ Verified 
 public void onDialogsLoaded ( ResponseLoadDialogs dialogsResponse ) { 
 - 
 / / Should we eliminate DialogHistory ? 
 + dialogsLoaded ( dialogsResponse . getDialogs ( ) , false , null ) ; 
 + } 
 + 
 + @ Verified 
 + public void onArchivedDialogsLoaded ( ResponseLoadArchived dialogsResponse ) { 
 + dialogsLoaded ( dialogsResponse . getDialogs ( ) , true , dialogsResponse . getNextOffset ( ) ) ; 
 + } 
 
 + public void dialogsLoaded ( List < ApiDialog > apiDialogs , boolean archived , byte [ ] nextOffset ) { 
 ArrayList < DialogHistory > dialogs = new ArrayList < DialogHistory > ( ) ; 
 
 long maxLoadedDate = Long . MAX _ VALUE ; 
 
 - for ( ApiDialog dialog : dialogsResponse . getDialogs ( ) ) { 
 + for ( ApiDialog dialog : apiDialogs ) { 
 
 maxLoadedDate = Math . min ( dialog . getSortDate ( ) , maxLoadedDate ) ; 
 
 @ @ - 316 , 14 + 323 , 19 @ @ public class MessagesProcessor extends AbsModule { 
 
 / / Sending updates to dialogs actor 
 if ( dialogs . size ( ) > 0 ) { 
 - dialogsActor ( ) . send ( new DialogsActor . HistoryLoaded ( dialogs ) ) ; 
 - } else { 
 + dialogsActor ( ) . send ( new DialogsActor . HistoryLoaded ( dialogs , archived ) ) ; 
 + } else if ( ! archived ) { 
 context ( ) . getAppStateModule ( ) . onDialogsLoaded ( ) ; 
 } 
 
 / / Sending notification to history actor 
 - dialogsHistoryActor ( ) . send ( new DialogsHistoryActor . LoadedMore ( dialogsResponse . getDialogs ( ) . size ( ) , 
 - maxLoadedDate ) ) ; 
 + if ( ! archived ) { 
 + dialogsHistoryActor ( ) . send ( new DialogsHistoryActor . LoadedMore ( apiDialogs . size ( ) , 
 + maxLoadedDate ) ) ; 
 + } else { 
 + archivedDialogsActor ( ) . send ( new ArchivedDialogsActor . LoadedMore ( apiDialogs . size ( ) , 
 + nextOffset ) ) ; 
 + } 
 } 
 
 @ Verified 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 index 1f75989 . . 611df65 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import java . util . List ; 
 import im . actor . core . api . ApiGroup ; 
 import im . actor . core . api . ApiPeerType ; 
 import im . actor . core . api . ApiUser ; 
 + import im . actor . core . api . rpc . ResponseLoadArchived ; 
 import im . actor . core . api . rpc . ResponseLoadDialogs ; 
 import im . actor . core . api . updates . UpdateChatArchive ; 
 import im . actor . core . api . updates . UpdateChatClear ; 
 @ @ - 54 , 6 + 55 , 7 @ @ import im . actor . core . modules . calls . CallsProcessor ; 
 import im . actor . core . modules . eventbus . EventBusProcessor ; 
 import im . actor . core . modules . internal . contacts . ContactsSyncActor ; 
 import im . actor . core . modules . internal . messages . OwnReadActor ; 
 + import im . actor . core . modules . updates . internal . ArchivedDialogLoaded ; 
 import im . actor . core . modules . updates . internal . ChangeContent ; 
 import im . actor . core . modules . updates . internal . CombinedDifference ; 
 import im . actor . core . modules . updates . internal . ContactsLoaded ; 
 @ @ - 113 , 6 + 115 , 10 @ @ public class UpdateProcessor extends AbsModule { 
 ResponseLoadDialogs dialogs = ( ( DialogHistoryLoaded ) update ) . getDialogs ( ) ; 
 applyRelated ( dialogs . getUsers ( ) , dialogs . getGroups ( ) , false ) ; 
 messagesProcessor . onDialogsLoaded ( dialogs ) ; 
 + } else if ( update instanceof ArchivedDialogLoaded ) { 
 + ResponseLoadArchived dialogs = ( ( ArchivedDialogLoaded ) update ) . getDialogs ( ) ; 
 + applyRelated ( dialogs . getUsers ( ) , dialogs . getGroups ( ) , false ) ; 
 + messagesProcessor . onArchivedDialogsLoaded ( dialogs ) ; 
 } else if ( update instanceof MessagesHistoryLoaded ) { 
 MessagesHistoryLoaded historyLoaded = ( MessagesHistoryLoaded ) update ; 
 applyRelated ( historyLoaded . getLoadHistory ( ) . getUsers ( ) , new ArrayList < ApiGroup > ( ) , false ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / internal / ArchivedDialogLoaded . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / internal / ArchivedDialogLoaded . java 
 new file mode 100644 
 index 0000000 . . 222ad0e 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / internal / ArchivedDialogLoaded . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + / * 
 + * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 + * / 
 + 
 + package im . actor . core . modules . updates . internal ; 
 + 
 + import im . actor . core . api . rpc . ResponseLoadArchived ; 
 + 
 + public class ArchivedDialogLoaded extends InternalUpdate { 
 + private ResponseLoadArchived dialogs ; 
 + 
 + public ArchivedDialogLoaded ( ResponseLoadArchived dialogs ) { 
 + this . dialogs = dialogs ; 
 + } 
 + 
 + public ResponseLoadArchived getDialogs ( ) { 
 + return dialogs ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java 
 index b77e893 . . a65e8fa 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java 
 @ @ - 2 , 19 + 2 , 25 @ @ package im . actor . core . viewmodel ; 
 
 import com . google . j2objc . annotations . Property ; 
 
 + import java . io . IOException ; 
 + 
 import im . actor . core . entity . Avatar ; 
 import im . actor . core . entity . Peer ; 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . storage . ListEngineItem ; 
 
 - public class DialogSmall { 
 + public class DialogSmall extends BserObject implements ListEngineItem { 
 
 @ Property ( " readonly , nonatomic " ) 
 - private final Peer peer ; 
 + private Peer peer ; 
 @ Property ( " readonly , nonatomic " ) 
 - private final String title ; 
 + private String title ; 
 @ Property ( " readonly , nonatomic " ) 
 - private final Avatar avatar ; 
 + private Avatar avatar ; 
 @ Property ( " readonly , nonatomic " ) 
 - private final int counter ; 
 + private int counter ; 
 
 public DialogSmall ( Peer peer , String title , Avatar avatar , int counter ) { 
 this . peer = peer ; 
 @ @ - 38 , 4 + 44 , 35 @ @ public class DialogSmall { 
 public int getCounter ( ) { 
 return counter ; 
 } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; 
 + title = values . getString ( 2 ) ; 
 + avatar = new Avatar ( values . getBytes ( 3 ) ) ; 
 + counter = values . getInt ( 4 ) ; 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + writer . writeBytes ( 1 , peer . toByteArray ( ) ) ; 
 + writer . writeString ( 2 , title ) ; 
 + writer . writeBytes ( 3 , avatar . toByteArray ( ) ) ; 
 + writer . writeInt ( 4 , counter ) ; 
 + } 
 + 
 + @ Override 
 + public long getEngineId ( ) { 
 + return peer . getUnuqueId ( ) ; 
 + } 
 + 
 + @ Override 
 + public long getEngineSort ( ) { 
 + return peer . getUnuqueId ( ) ; 
 + } 
 + 
 + @ Override 
 + public String getEngineSearch ( ) { 
 + return null ; 
 + } 
 }
