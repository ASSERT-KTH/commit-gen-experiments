BLEU SCORE: 0.06766165252145301

TEST MSG: chore ( web ) : add dummy JsPromiseDispatcher implementation
GENERATED MSG: fix ( runtime ) : Fixing incorrect reference from runtime to core classes

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 97b4138 . . f214806 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 46 , 6 + 46 , 7 @ @ import im . actor . runtime . js . fs . JsBlob ; < nl > import im . actor . runtime . js . fs . JsFile ; < nl > import im . actor . runtime . js . mvvm . JsDisplayListCallback ; < nl > import im . actor . runtime . js . utils . JsPromise ; < nl > + import im . actor . runtime . js . utils . JsPromiseDispatcher ; < nl > import im . actor . runtime . js . utils . JsPromiseExecutor ; < nl > import im . actor . runtime . markdown . MarkdownParser ; < nl > < nl > @ @ - 429 , 7 + 430 , 7 @ @ public class JsFacade implements Exportable { < nl > public void preInitChat ( JsPeer peer ) { < nl > messenger . onConversationPreLoad ( peer . convert ( ) ) ; < nl > } < nl > - < nl > + < nl > @ UsedByApp < nl > public JsMessagesBind bindMessages ( JsPeer peer , JsMessagesBindClosure callback ) { < nl > if ( callback = = null ) { < nl > @ @ - 654 , 7 + 655 , 8 @ @ public class JsFacade implements Exportable { < nl > public void apply ( Exception e ) { < nl > reject ( ) ; < nl > } < nl > - } ) ; < nl > + } ) < nl > + . done ( JsPromiseDispatcher . INSTANCE ) ; < nl > } < nl > } ) ; < nl > } < nl > @ @ - 674 , 7 + 676 , 8 @ @ public class JsFacade implements Exportable { < nl > public void apply ( Exception e ) { < nl > reject ( ) ; < nl > } < nl > - } ) ; < nl > + } ) < nl > + . done ( JsPromiseDispatcher . INSTANCE ) ; < nl > } < nl > } ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromiseDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromiseDispatcher . java < nl > new file mode 100644 < nl > index 0000000 . . d8f115b < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromiseDispatcher . java < nl > @ @ - 0 , 0 + 1 , 17 @ @ < nl > + package im . actor . runtime . js . utils ; < nl > + < nl > + import im . actor . runtime . promise . Promise ; < nl > + import im . actor . runtime . promise . PromiseDispatcher ; < nl > + < nl > + public class JsPromiseDispatcher extends PromiseDispatcher { < nl > + < nl > + public static final JsPromiseDispatcher INSTANCE = new JsPromiseDispatcher ( ) ; < nl > + < nl > + public JsPromiseDispatcher ( ) { < nl > + } < nl > + < nl > + @ Override < nl > + public void dispatch ( Promise promise , Runnable runnable ) { < nl > + < nl > + } < nl > + }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java < nl > deleted file mode 100644 < nl > index b2fb2aa . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java < nl > + + + / dev / null < nl > @ @ - 1 , 21 + 0 , 0 @ @ < nl > - package im . actor . core . js . modules ; < nl > - < nl > - import im . actor . runtime . actors . Actor ; < nl > - import im . actor . runtime . actors . ActorCreator ; < nl > - import im . actor . runtime . actors . ActorRef ; < nl > - < nl > - import static im . actor . runtime . actors . ActorSystem . system ; < nl > - < nl > - public class JsScheduller { < nl > - < nl > - private static final ActorRef SCHEDULLER = system ( ) . actorOf ( " js / scheduller " , new ActorCreator ( ) { < nl > - @ Override < nl > - public Actor create ( ) { < nl > - return new Actor ( ) ; < nl > - } < nl > - } ) ; < nl > - < nl > - public static ActorRef scheduller ( ) { < nl > - return SCHEDULLER ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java < nl > index fb0b712 . . 9c84672 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java < nl > @ @ - 4 , 9 + 4 , 9 @ @ import com . google . gwt . core . client . JsArray ; < nl > < nl > import org . jetbrains . annotations . NotNull ; < nl > < nl > - import im . actor . core . js . modules . JsScheduller ; < nl > import im . actor . runtime . WebRTCRuntime ; < nl > import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . js . threading . JsScheduller ; < nl > import im . actor . runtime . js . webrtc . JsIceServer ; < nl > import im . actor . runtime . js . webrtc . JsMediaStream ; < nl > import im . actor . runtime . js . webrtc . JsPeerConnection ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsScheduller . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsScheduller . java < nl > new file mode 100644 < nl > index 0000000 . . d6519c0 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsScheduller . java < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + package im . actor . runtime . js . threading ; < nl > + < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + < nl > + import static im . actor . runtime . actors . ActorSystem . system ; < nl > + < nl > + public class JsScheduller { < nl > + < nl > + private static final ActorRef SCHEDULLER = system ( ) . actorOf ( " js / scheduller " , new ActorCreator ( ) { < nl > + @ Override < nl > + public Actor create ( ) { < nl > + return new Actor ( ) ; < nl > + } < nl > + } ) ; < nl > + < nl > + public static ActorRef scheduller ( ) { < nl > + return SCHEDULLER ; < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 97b4138 . . f214806 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 46 , 6 + 46 , 7 @ @ import im . actor . runtime . js . fs . JsBlob ; 
 import im . actor . runtime . js . fs . JsFile ; 
 import im . actor . runtime . js . mvvm . JsDisplayListCallback ; 
 import im . actor . runtime . js . utils . JsPromise ; 
 + import im . actor . runtime . js . utils . JsPromiseDispatcher ; 
 import im . actor . runtime . js . utils . JsPromiseExecutor ; 
 import im . actor . runtime . markdown . MarkdownParser ; 
 
 @ @ - 429 , 7 + 430 , 7 @ @ public class JsFacade implements Exportable { 
 public void preInitChat ( JsPeer peer ) { 
 messenger . onConversationPreLoad ( peer . convert ( ) ) ; 
 } 
 - 
 + 
 @ UsedByApp 
 public JsMessagesBind bindMessages ( JsPeer peer , JsMessagesBindClosure callback ) { 
 if ( callback = = null ) { 
 @ @ - 654 , 7 + 655 , 8 @ @ public class JsFacade implements Exportable { 
 public void apply ( Exception e ) { 
 reject ( ) ; 
 } 
 - } ) ; 
 + } ) 
 + . done ( JsPromiseDispatcher . INSTANCE ) ; 
 } 
 } ) ; 
 } 
 @ @ - 674 , 7 + 676 , 8 @ @ public class JsFacade implements Exportable { 
 public void apply ( Exception e ) { 
 reject ( ) ; 
 } 
 - } ) ; 
 + } ) 
 + . done ( JsPromiseDispatcher . INSTANCE ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromiseDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromiseDispatcher . java 
 new file mode 100644 
 index 0000000 . . d8f115b 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromiseDispatcher . java 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + package im . actor . runtime . js . utils ; 
 + 
 + import im . actor . runtime . promise . Promise ; 
 + import im . actor . runtime . promise . PromiseDispatcher ; 
 + 
 + public class JsPromiseDispatcher extends PromiseDispatcher { 
 + 
 + public static final JsPromiseDispatcher INSTANCE = new JsPromiseDispatcher ( ) ; 
 + 
 + public JsPromiseDispatcher ( ) { 
 + } 
 + 
 + @ Override 
 + public void dispatch ( Promise promise , Runnable runnable ) { 
 + 
 + } 
 + }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java 
 deleted file mode 100644 
 index b2fb2aa . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java 
 + + + / dev / null 
 @ @ - 1 , 21 + 0 , 0 @ @ 
 - package im . actor . core . js . modules ; 
 - 
 - import im . actor . runtime . actors . Actor ; 
 - import im . actor . runtime . actors . ActorCreator ; 
 - import im . actor . runtime . actors . ActorRef ; 
 - 
 - import static im . actor . runtime . actors . ActorSystem . system ; 
 - 
 - public class JsScheduller { 
 - 
 - private static final ActorRef SCHEDULLER = system ( ) . actorOf ( " js / scheduller " , new ActorCreator ( ) { 
 - @ Override 
 - public Actor create ( ) { 
 - return new Actor ( ) ; 
 - } 
 - } ) ; 
 - 
 - public static ActorRef scheduller ( ) { 
 - return SCHEDULLER ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java 
 index fb0b712 . . 9c84672 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java 
 @ @ - 4 , 9 + 4 , 9 @ @ import com . google . gwt . core . client . JsArray ; 
 
 import org . jetbrains . annotations . NotNull ; 
 
 - import im . actor . core . js . modules . JsScheduller ; 
 import im . actor . runtime . WebRTCRuntime ; 
 import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . js . threading . JsScheduller ; 
 import im . actor . runtime . js . webrtc . JsIceServer ; 
 import im . actor . runtime . js . webrtc . JsMediaStream ; 
 import im . actor . runtime . js . webrtc . JsPeerConnection ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsScheduller . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsScheduller . java 
 new file mode 100644 
 index 0000000 . . d6519c0 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsScheduller . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package im . actor . runtime . js . threading ; 
 + 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + 
 + import static im . actor . runtime . actors . ActorSystem . system ; 
 + 
 + public class JsScheduller { 
 + 
 + private static final ActorRef SCHEDULLER = system ( ) . actorOf ( " js / scheduller " , new ActorCreator ( ) { 
 + @ Override 
 + public Actor create ( ) { 
 + return new Actor ( ) ; 
 + } 
 + } ) ; 
 + 
 + public static ActorRef scheduller ( ) { 
 + return SCHEDULLER ; 
 + } 
 + }
