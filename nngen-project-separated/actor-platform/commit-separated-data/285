BLEU SCORE: 0.03283637368030199

TEST MSG: fix ( IOS ) : add AASettingsMediaViewController
GENERATED MSG: Merge commit ' ba2111fee596ef18fb64f0f094087a56db7e0be2 '

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsMediaViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsMediaViewController . swift < nl > new file mode 100644 < nl > index 0000000 . . 5c83af0 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsMediaViewController . swift < nl > @ @ - 0 , 0 + 1 , 42 @ @ < nl > + / / < nl > + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > < nl > + / / < nl > + < nl > + import UIKit < nl > + < nl > + public class AASettingsMediaViewController : AAContentTableController { < nl > + < nl > + private var sessionsCell : AAManagedArrayRows < ARApiAuthSession , AACommonCell > ? < nl > + < nl > + public init ( ) { < nl > + super . init ( style : AAContentTableStyle . SettingsGrouped ) < nl > + < nl > + navigationItem . title = AALocalized ( " MediaTitle " ) < nl > + < nl > + / / content = ACAllEvents _ Settings . PRIVACY ( ) < nl > + } < nl > + < nl > + public required init ( coder aDecoder : NSCoder ) { < nl > + fatalError ( " init ( coder : ) has not been implemented " ) < nl > + } < nl > + < nl > + public override func tableDidLoad ( ) { < nl > + < nl > + section { ( s ) - > ( ) in < nl > + < nl > + s . common { ( r ) - > ( ) in < nl > + < nl > + r . style = . Switch < nl > + r . content = AALocalized ( " SettingsAutomaticDownloadAndSave " ) < nl > + < nl > + r . bindAction = { ( r ) - > ( ) in < nl > + r . switchOn = ActorSDK . sharedActor ( ) . storage . preferences . getBoolWithKey ( " isAutomaticDownloadEnabled " , withDefault : true ) < nl > + } < nl > + < nl > + r . switchAction = { ( on : Bool ) - > ( ) in < nl > + ActorSDK . sharedActor ( ) . setAutomaticDownloads ( on ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > + }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > index 6ece6e5 . . d4ade98 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > @ @ - 89 , 6 + 89 , 14 @ @ < nl > " SettingsLastSeenHint " = " Change who can see your Last Seen time . " ; < nl > < nl > < nl > + " SettingsLastSeenEverybody " = " Everybody " ; < nl > + < nl > + " SettingsLastSeenContacts " = " My Contacts " ; < nl > + < nl > + " SettingsLastSeenNobody " = " Nobody " ; < nl > + < nl > + < nl > + < nl > / * < nl > * Profile < nl > * / < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings < nl > index cdbdeac . . acda0c2 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings < nl > @ @ - 61 , 6 + 61 , 18 @ @ < nl > < nl > " SettingsVersion " = " Version { version } " ; < nl > < nl > + " SettingsAllSessions " = " Todas las sesiones " ; < nl > + < nl > + " SettingsLastSeen " = " Ultima vez visto " ; < nl > + < nl > + " SettingsLastSeenHint " = " Change who can see your Last Seen time . " ; < nl > + < nl > + " SettingsLastSeenEverybody " = " Todos " ; < nl > + < nl > + " SettingsLastSeenContacts " = " Mis contactos " ; < nl > + < nl > + " SettingsLastSeenNobody " = " Nadie " ; < nl > + < nl > " ShareLocation " = " Ubicaci รณ n " ; < nl > < nl > " ShareContact " = " Contacto " ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift < nl > index 919efdd . . fcb1af0 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift < nl > @ @ - 4 , 63 + 4 , 135 @ @ < nl > < nl > import UIKit < nl > < nl > - public class AASettingsLastSeenController : AAContentTableController { < nl > + public class AASettingsLastSeenController : AATableViewController { < nl > < nl > - private var sessionsCell : AAManagedArrayRows < ARApiAuthSession , AACommonCell > ? < nl > + private var privacy = Actor . getPrivacy ( ) < nl > + < nl > + / / MARK : - < nl > + / / MARK : Constructors < nl > + < nl > + private let CellIdentifier = " CellIdentifier " < nl > < nl > public init ( ) { < nl > - super . init ( style : AAContentTableStyle . SettingsGrouped ) < nl > + super . init ( style : UITableViewStyle . Grouped ) < nl > < nl > - navigationItem . title = AALocalized ( " SettingsLastSeen " ) < nl > + title = AALocalized ( " SettingsLastSeen " ) < nl > < nl > - content = ACAllEvents _ Settings . PRIVACY ( ) < nl > + content = ACAllEvents _ Settings . NOTIFICATIONS ( ) < nl > } < nl > < nl > public required init ( coder aDecoder : NSCoder ) { < nl > fatalError ( " init ( coder : ) has not been implemented " ) < nl > } < nl > < nl > - public override func tableDidLoad ( ) { < nl > + / / MARK : - < nl > + < nl > + public override func viewDidLoad ( ) { < nl > + super . viewDidLoad ( ) < nl > + < nl > + tableView . registerClass ( AACommonCell . self , forCellReuseIdentifier : CellIdentifier ) < nl > + tableView . backgroundColor = appStyle . vcBackyardColor < nl > + < nl > + view . backgroundColor = tableView . backgroundColor < nl > + } < nl > + < nl > + / / MARK : - < nl > + / / MARK : UITableView Data Source < nl > + < nl > + public override func numberOfSectionsInTableView ( tableView : UITableView ) - > Int { < nl > + return 1 < nl > + } < nl > + < nl > + public override func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) - > Int { < nl > + return 3 < nl > + } < nl > + < nl > + public func tableView ( tableView : UITableView , titleForHeaderInSection section : Int ) - > String ? { < nl > + return nil < nl > + } < nl > + < nl > + public func tableView ( tableView : UITableView , titleForFooterInSection section : Int ) - > String ? { < nl > + return nil < nl > + } < nl > + < nl > + private func lastSeenCell ( indexPath : NSIndexPath ) - > AACommonCell { < nl > + let cell = tableView . dequeueReusableCellWithIdentifier ( CellIdentifier , forIndexPath : indexPath ) as ! AACommonCell < nl > < nl > - section { ( s ) - > ( ) in < nl > + if indexPath . row = = 0 { < nl > + < nl > + cell . setContent ( AALocalized ( " SettingsLastSeenEverybody " ) ) < nl > + < nl > + if ( self . privacy = = " always " ) { < nl > + cell . style = . Checkmark < nl > + } else { < nl > + cell . style = . Normal < nl > + } < nl > + < nl > + } else if indexPath . row = = 1 { < nl > + < nl > + cell . setContent ( AALocalized ( " SettingsLastSeenContacts " ) ) < nl > < nl > - s . common ( { ( r ) - > ( ) in < nl > - r . content = " Everybody " < nl > - < nl > - r . selectAction = { < nl > - < nl > - print ( " tap in Everybody " ) < nl > - return true < nl > - } < nl > - < nl > - } ) < nl > + if ( self . privacy = = " contacts " ) { < nl > + cell . style = . Checkmark < nl > + } else { < nl > + cell . style = . Normal < nl > + } < nl > < nl > - s . common ( { ( r ) - > ( ) in < nl > - r . content = " My Contacts " < nl > - < nl > - r . selectAction = { < nl > - < nl > - print ( " tap in My Contacts " ) < nl > - return true < nl > - } < nl > - < nl > - } ) < nl > + } else if indexPath . row = = 2 { < nl > < nl > - s . common ( { ( r ) - > ( ) in < nl > - r . content = " Nobody " < nl > - < nl > - r . selectAction = { < nl > - < nl > - print ( " tap in Nobody " ) < nl > - return true < nl > - } < nl > - < nl > - } ) < nl > + cell . setContent ( AALocalized ( " SettingsLastSeenNone " ) ) < nl > < nl > + if ( self . privacy = = " none " ) { < nl > + cell . style = . Checkmark < nl > + } else { < nl > + cell . style = . Normal < nl > + } < nl > < nl > } < nl > < nl > + cell . selectionStyle = UITableViewCellSelectionStyle . None < nl > + cell . bottomSeparatorVisible = false < nl > + cell . topSeparatorVisible = false < nl > + cell . bottomSeparatorLeftInset = 0 < nl > + cell . topSeparatorLeftInset = 0 < nl > + < nl > + return cell < nl > + } < nl > + < nl > + public override func tableView ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) - > UITableViewCell { < nl > + return lastSeenCell ( indexPath ) < nl > + } < nl > + < nl > + public func tableView ( tableView : UITableView , willDisplayHeaderView view : UIView , forSection section : Int ) { < nl > + let header : UITableViewHeaderFooterView = view as ! UITableViewHeaderFooterView < nl > + header . textLabel ! . textColor = ActorSDK . sharedActor ( ) . style . cellFooterColor < nl > } < nl > < nl > + public func tableView ( tableView : UITableView , willDisplayFooterView view : UIView , forSection section : Int ) { < nl > + let header : UITableViewHeaderFooterView = view as ! UITableViewHeaderFooterView < nl > + header . textLabel ! . textColor = ActorSDK . sharedActor ( ) . style . cellFooterColor < nl > + } < nl > + < nl > + < nl > + public func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { < nl > + < nl > + if indexPath . row = = 0 { < nl > + < nl > + Actor . setPrivacyWithPrivacy ( " always " ) < nl > + < nl > + } else if indexPath . row = = 1 { < nl > + < nl > + Actor . setPrivacyWithPrivacy ( " contacts " ) < nl > + < nl > + } else if indexPath . row = = 2 { < nl > + < nl > + Actor . setPrivacyWithPrivacy ( " none " ) < nl > + < nl > + } < nl > + < nl > + self . privacy = Actor . getPrivacy ( ) < nl > + self . tableView . reloadData ( ) < nl > + < nl > + } < nl > < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift < nl > index 2ee5999 . . 95f194e 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift < nl > @ @ - 13 , 6 + 13 , 7 @ @ public enum AACommonCellStyle { < nl > case ActionCentered < nl > case Navigation < nl > case Hint < nl > + case Checkmark < nl > } < nl > < nl > public class AACommonCell : AATableViewCell { < nl > @ @ - 121 , 6 + 122 , 13 @ @ public class AACommonCell : AATableViewCell { < nl > titleLabel . textAlignment = NSTextAlignment . Left < nl > switcher ? . hidden = true < nl > accessoryType = UITableViewCellAccessoryType . DisclosureIndicator < nl > + < nl > + case . Checkmark : < nl > + titleLabel . textColor = appStyle . cellTextColor < nl > + titleLabel . textAlignment = NSTextAlignment . Left < nl > + switcher ? . hidden = true < nl > + accessoryType = UITableViewCellAccessoryType . Checkmark < nl > + break < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsMediaViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsMediaViewController . swift 
 new file mode 100644 
 index 0000000 . . 5c83af0 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsMediaViewController . swift 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + / / 
 + / / Copyright ( c ) 2014 - 2016 Actor LLC . < https : / / actor . im > 
 + / / 
 + 
 + import UIKit 
 + 
 + public class AASettingsMediaViewController : AAContentTableController { 
 + 
 + private var sessionsCell : AAManagedArrayRows < ARApiAuthSession , AACommonCell > ? 
 + 
 + public init ( ) { 
 + super . init ( style : AAContentTableStyle . SettingsGrouped ) 
 + 
 + navigationItem . title = AALocalized ( " MediaTitle " ) 
 + 
 + / / content = ACAllEvents _ Settings . PRIVACY ( ) 
 + } 
 + 
 + public required init ( coder aDecoder : NSCoder ) { 
 + fatalError ( " init ( coder : ) has not been implemented " ) 
 + } 
 + 
 + public override func tableDidLoad ( ) { 
 + 
 + section { ( s ) - > ( ) in 
 + 
 + s . common { ( r ) - > ( ) in 
 + 
 + r . style = . Switch 
 + r . content = AALocalized ( " SettingsAutomaticDownloadAndSave " ) 
 + 
 + r . bindAction = { ( r ) - > ( ) in 
 + r . switchOn = ActorSDK . sharedActor ( ) . storage . preferences . getBoolWithKey ( " isAutomaticDownloadEnabled " , withDefault : true ) 
 + } 
 + 
 + r . switchAction = { ( on : Bool ) - > ( ) in 
 + ActorSDK . sharedActor ( ) . setAutomaticDownloads ( on ) 
 + } 
 + } 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 index 6ece6e5 . . d4ade98 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 @ @ - 89 , 6 + 89 , 14 @ @ 
 " SettingsLastSeenHint " = " Change who can see your Last Seen time . " ; 
 
 
 + " SettingsLastSeenEverybody " = " Everybody " ; 
 + 
 + " SettingsLastSeenContacts " = " My Contacts " ; 
 + 
 + " SettingsLastSeenNobody " = " Nobody " ; 
 + 
 + 
 + 
 / * 
 * Profile 
 * / 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings 
 index cdbdeac . . acda0c2 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / es . lproj / Localizable . strings 
 @ @ - 61 , 6 + 61 , 18 @ @ 
 
 " SettingsVersion " = " Version { version } " ; 
 
 + " SettingsAllSessions " = " Todas las sesiones " ; 
 + 
 + " SettingsLastSeen " = " Ultima vez visto " ; 
 + 
 + " SettingsLastSeenHint " = " Change who can see your Last Seen time . " ; 
 + 
 + " SettingsLastSeenEverybody " = " Todos " ; 
 + 
 + " SettingsLastSeenContacts " = " Mis contactos " ; 
 + 
 + " SettingsLastSeenNobody " = " Nadie " ; 
 + 
 " ShareLocation " = " Ubicaci รณ n " ; 
 
 " ShareContact " = " Contacto " ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift 
 index 919efdd . . fcb1af0 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift 
 @ @ - 4 , 63 + 4 , 135 @ @ 
 
 import UIKit 
 
 - public class AASettingsLastSeenController : AAContentTableController { 
 + public class AASettingsLastSeenController : AATableViewController { 
 
 - private var sessionsCell : AAManagedArrayRows < ARApiAuthSession , AACommonCell > ? 
 + private var privacy = Actor . getPrivacy ( ) 
 + 
 + / / MARK : - 
 + / / MARK : Constructors 
 + 
 + private let CellIdentifier = " CellIdentifier " 
 
 public init ( ) { 
 - super . init ( style : AAContentTableStyle . SettingsGrouped ) 
 + super . init ( style : UITableViewStyle . Grouped ) 
 
 - navigationItem . title = AALocalized ( " SettingsLastSeen " ) 
 + title = AALocalized ( " SettingsLastSeen " ) 
 
 - content = ACAllEvents _ Settings . PRIVACY ( ) 
 + content = ACAllEvents _ Settings . NOTIFICATIONS ( ) 
 } 
 
 public required init ( coder aDecoder : NSCoder ) { 
 fatalError ( " init ( coder : ) has not been implemented " ) 
 } 
 
 - public override func tableDidLoad ( ) { 
 + / / MARK : - 
 + 
 + public override func viewDidLoad ( ) { 
 + super . viewDidLoad ( ) 
 + 
 + tableView . registerClass ( AACommonCell . self , forCellReuseIdentifier : CellIdentifier ) 
 + tableView . backgroundColor = appStyle . vcBackyardColor 
 + 
 + view . backgroundColor = tableView . backgroundColor 
 + } 
 + 
 + / / MARK : - 
 + / / MARK : UITableView Data Source 
 + 
 + public override func numberOfSectionsInTableView ( tableView : UITableView ) - > Int { 
 + return 1 
 + } 
 + 
 + public override func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) - > Int { 
 + return 3 
 + } 
 + 
 + public func tableView ( tableView : UITableView , titleForHeaderInSection section : Int ) - > String ? { 
 + return nil 
 + } 
 + 
 + public func tableView ( tableView : UITableView , titleForFooterInSection section : Int ) - > String ? { 
 + return nil 
 + } 
 + 
 + private func lastSeenCell ( indexPath : NSIndexPath ) - > AACommonCell { 
 + let cell = tableView . dequeueReusableCellWithIdentifier ( CellIdentifier , forIndexPath : indexPath ) as ! AACommonCell 
 
 - section { ( s ) - > ( ) in 
 + if indexPath . row = = 0 { 
 + 
 + cell . setContent ( AALocalized ( " SettingsLastSeenEverybody " ) ) 
 + 
 + if ( self . privacy = = " always " ) { 
 + cell . style = . Checkmark 
 + } else { 
 + cell . style = . Normal 
 + } 
 + 
 + } else if indexPath . row = = 1 { 
 + 
 + cell . setContent ( AALocalized ( " SettingsLastSeenContacts " ) ) 
 
 - s . common ( { ( r ) - > ( ) in 
 - r . content = " Everybody " 
 - 
 - r . selectAction = { 
 - 
 - print ( " tap in Everybody " ) 
 - return true 
 - } 
 - 
 - } ) 
 + if ( self . privacy = = " contacts " ) { 
 + cell . style = . Checkmark 
 + } else { 
 + cell . style = . Normal 
 + } 
 
 - s . common ( { ( r ) - > ( ) in 
 - r . content = " My Contacts " 
 - 
 - r . selectAction = { 
 - 
 - print ( " tap in My Contacts " ) 
 - return true 
 - } 
 - 
 - } ) 
 + } else if indexPath . row = = 2 { 
 
 - s . common ( { ( r ) - > ( ) in 
 - r . content = " Nobody " 
 - 
 - r . selectAction = { 
 - 
 - print ( " tap in Nobody " ) 
 - return true 
 - } 
 - 
 - } ) 
 + cell . setContent ( AALocalized ( " SettingsLastSeenNone " ) ) 
 
 + if ( self . privacy = = " none " ) { 
 + cell . style = . Checkmark 
 + } else { 
 + cell . style = . Normal 
 + } 
 
 } 
 
 + cell . selectionStyle = UITableViewCellSelectionStyle . None 
 + cell . bottomSeparatorVisible = false 
 + cell . topSeparatorVisible = false 
 + cell . bottomSeparatorLeftInset = 0 
 + cell . topSeparatorLeftInset = 0 
 + 
 + return cell 
 + } 
 + 
 + public override func tableView ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) - > UITableViewCell { 
 + return lastSeenCell ( indexPath ) 
 + } 
 + 
 + public func tableView ( tableView : UITableView , willDisplayHeaderView view : UIView , forSection section : Int ) { 
 + let header : UITableViewHeaderFooterView = view as ! UITableViewHeaderFooterView 
 + header . textLabel ! . textColor = ActorSDK . sharedActor ( ) . style . cellFooterColor 
 } 
 
 + public func tableView ( tableView : UITableView , willDisplayFooterView view : UIView , forSection section : Int ) { 
 + let header : UITableViewHeaderFooterView = view as ! UITableViewHeaderFooterView 
 + header . textLabel ! . textColor = ActorSDK . sharedActor ( ) . style . cellFooterColor 
 + } 
 + 
 + 
 + public func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { 
 + 
 + if indexPath . row = = 0 { 
 + 
 + Actor . setPrivacyWithPrivacy ( " always " ) 
 + 
 + } else if indexPath . row = = 1 { 
 + 
 + Actor . setPrivacyWithPrivacy ( " contacts " ) 
 + 
 + } else if indexPath . row = = 2 { 
 + 
 + Actor . setPrivacyWithPrivacy ( " none " ) 
 + 
 + } 
 + 
 + self . privacy = Actor . getPrivacy ( ) 
 + self . tableView . reloadData ( ) 
 + 
 + } 
 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift 
 index 2ee5999 . . 95f194e 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift 
 @ @ - 13 , 6 + 13 , 7 @ @ public enum AACommonCellStyle { 
 case ActionCentered 
 case Navigation 
 case Hint 
 + case Checkmark 
 } 
 
 public class AACommonCell : AATableViewCell { 
 @ @ - 121 , 6 + 122 , 13 @ @ public class AACommonCell : AATableViewCell { 
 titleLabel . textAlignment = NSTextAlignment . Left 
 switcher ? . hidden = true 
 accessoryType = UITableViewCellAccessoryType . DisclosureIndicator 
 + 
 + case . Checkmark : 
 + titleLabel . textColor = appStyle . cellTextColor 
 + titleLabel . textAlignment = NSTextAlignment . Left 
 + switcher ? . hidden = true 
 + accessoryType = UITableViewCellAccessoryType . Checkmark 
 + break 
 } 
 }
