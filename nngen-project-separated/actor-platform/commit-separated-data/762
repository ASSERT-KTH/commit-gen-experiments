BLEU SCORE: 0.09287528999566796

TEST MSG: fix ( server : frontend ) : switch to KuznechikFastEngine
GENERATED MSG: feat ( mon ) : Adding key creation monitoring

TEST DIFF (one line): diff - - git a / actor - server / actor - frontend / src / main / java / im / actor / crypto / box / ActorBox . java b / actor - server / actor - frontend / src / main / java / im / actor / crypto / box / ActorBox . java < nl > index 508154c . . c96ccc7 100644 < nl > - - - a / actor - server / actor - frontend / src / main / java / im / actor / crypto / box / ActorBox . java < nl > + + + b / actor - server / actor - frontend / src / main / java / im / actor / crypto / box / ActorBox . java < nl > @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . crypto . box ; < nl > import im . actor . crypto . IntegrityException ; < nl > import im . actor . crypto . primitives . aes . AESFastEngine ; < nl > import im . actor . crypto . primitives . digest . SHA256 ; < nl > - import im . actor . crypto . primitives . kuznechik . KuznechikCipher ; < nl > + import im . actor . crypto . primitives . kuznechik . KuznechikFastEngine ; < nl > import im . actor . crypto . primitives . padding . PKCS7Padding ; < nl > import im . actor . crypto . primitives . streebog . Streebog256 ; < nl > import im . actor . crypto . primitives . util . ByteStrings ; < nl > @ @ - 29 , 7 + 29 , 7 @ @ public class ActorBox { < nl > CBCHmacBox aesCipher = < nl > new CBCHmacBox ( new AESFastEngine ( key . getKeyAES ( ) ) , new SHA256 ( ) , key . getMacAES ( ) ) ; < nl > CBCHmacBox kuzCipher = < nl > - new CBCHmacBox ( new KuznechikCipher ( key . getKeyKuz ( ) ) , new Streebog256 ( ) , key . getMacKuz ( ) ) ; < nl > + new CBCHmacBox ( new KuznechikFastEngine ( key . getKeyKuz ( ) ) , new Streebog256 ( ) , key . getMacKuz ( ) ) ; < nl > byte [ ] kuzPackage = aesCipher . decryptPackage ( header , < nl > ByteStrings . substring ( cipherText , 0 , 16 ) , < nl > ByteStrings . substring ( cipherText , 16 , cipherText . length - 16 ) ) ; < nl > @ @ - 62 , 7 + 62 , 7 @ @ public class ActorBox { < nl > * / < nl > public static byte [ ] closeBox ( byte [ ] header , byte [ ] plainText , byte [ ] random32 , ActorBoxKey key ) throws IntegrityException { < nl > CBCHmacBox aesCipher = new CBCHmacBox ( new AESFastEngine ( key . getKeyAES ( ) ) , new SHA256 ( ) , key . getMacAES ( ) ) ; < nl > - CBCHmacBox kuzCipher = new CBCHmacBox ( new KuznechikCipher ( key . getKeyKuz ( ) ) , new Streebog256 ( ) , key . getMacKuz ( ) ) ; < nl > + CBCHmacBox kuzCipher = new CBCHmacBox ( new KuznechikFastEngine ( key . getKeyKuz ( ) ) , new Streebog256 ( ) , key . getMacKuz ( ) ) ; < nl > < nl > / / Calculating padding < nl > int paddingSize = ( plainText . length + 1 ) % 16 ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java < nl > index ecb80d3 . . 955989e 100644 < nl > - - - a / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java < nl > + + + b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java < nl > @ @ - 1 , 26 + 1 , 31 @ @ < nl > package im . actor . app ; < nl > < nl > - import im . actor . core . ApiConfiguration ; < nl > - import im . actor . core . ConfigurationBuilder ; < nl > - import im . actor . core . JavaSeMessenger ; < nl > - import im . actor . core . PhoneBookProvider ; < nl > + import im . actor . app . monitoring . AuthKeyCreationMon ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . actors . ActorSystem ; < nl > + import im . actor . runtime . actors . Props ; < nl > < nl > public class Main { < nl > < nl > public static void main ( String [ ] args ) { < nl > - ConfigurationBuilder builder = new ConfigurationBuilder ( ) ; < nl > - builder . addEndpoint ( " tcp : / / front1 - mtproto - api - rev3 . actor . im : 443 " ) ; < nl > - builder . addEndpoint ( " tcp : / / front2 - mtproto - api - rev3 . actor . im : 443 " ) ; < nl > - builder . setPhoneBookProvider ( new PhoneBookProvider ( ) { < nl > + < nl > + ActorRef actor = ActorSystem . system ( ) . actorOf ( Props . create ( AuthKeyCreationMon . class , new ActorCreator < AuthKeyCreationMon > ( ) { < nl > @ Override < nl > - public void loadPhoneBook ( Callback callback ) { < nl > + public AuthKeyCreationMon create ( ) { < nl > + return new AuthKeyCreationMon ( ) ; < nl > + } < nl > + } ) , " auth _ key _ mon " ) ; < nl > + < nl > + actor . send ( new AuthKeyCreationMon . StartMonitoring ( 0 ) ) ; < nl > < nl > + while ( true ) { < nl > + try { < nl > + Thread . sleep ( 100000 ) ; < nl > + } catch ( InterruptedException e ) { < nl > + e . printStackTrace ( ) ; < nl > + return ; < nl > } < nl > - } ) ; < nl > - builder . setPhoneBookImportEnabled ( false ) ; < nl > - builder . setApiConfiguration ( new ApiConfiguration ( " " , 0 , < nl > - " " , " " , " " ) ) ; < nl > - JavaSeMessenger messenger = new JavaSeMessenger ( builder . build ( ) ) ; < nl > - / / TODO : Start working with messenger object < nl > + } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - se / src / main / java / im / actor / app / monitoring / AuthKeyCreationMon . java b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / monitoring / AuthKeyCreationMon . java < nl > new file mode 100644 < nl > index 0000000 . . 2aa4d04 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / monitoring / AuthKeyCreationMon . java < nl > @ @ - 0 , 0 + 1 , 64 @ @ < nl > + package im . actor . app . monitoring ; < nl > + < nl > + import im . actor . core . network . Endpoints ; < nl > + import im . actor . core . network . TrustedKey ; < nl > + import im . actor . core . network . api . AuthKeyActor ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . actors . Props ; < nl > + import im . actor . runtime . mtproto . ConnectionEndpoint ; < nl > + < nl > + public class AuthKeyCreationMon extends Actor { < nl > + private ActorRef keyCreation ; < nl > + private Endpoints endpoints ; < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + endpoints = new Endpoints ( new ConnectionEndpoint [ ] { < nl > + new ConnectionEndpoint ( " front1 - mtproto - api - rev3 . actor . im " , 443 , ConnectionEndpoint . Type . TCP ) , < nl > + new ConnectionEndpoint ( " front2 - mtproto - api - rev3 . actor . im " , 443 , ConnectionEndpoint . Type . TCP ) < nl > + } , new TrustedKey [ 0 ] ) ; < nl > + keyCreation = system ( ) . actorOf ( Props . create ( AuthKeyActor . class , new ActorCreator < AuthKeyActor > ( ) { < nl > + @ Override < nl > + public AuthKeyActor create ( ) { < nl > + return new AuthKeyActor ( ) ; < nl > + } < nl > + } ) , getPath ( ) + " / test " ) ; < nl > + } < nl > + < nl > + private void startMonitoring ( long delay ) { < nl > + Log . d ( " AuthKeyCreation " , " Start monitoring " ) ; < nl > + keyCreation . send ( new AuthKeyActor . StartKeyCreation ( endpoints ) , self ( ) ) ; < nl > + } < nl > + < nl > + private void onKeyCreated ( ) { < nl > + Log . d ( " AuthKeyCreation " , " Key created " ) ; < nl > + keyCreation . send ( new AuthKeyActor . StartKeyCreation ( endpoints ) , self ( ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof StartMonitoring ) { < nl > + startMonitoring ( ( ( StartMonitoring ) message ) . getDelay ( ) ) ; < nl > + } else if ( message instanceof AuthKeyActor . KeyCreated ) { < nl > + onKeyCreated ( ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > + public static class StartMonitoring { < nl > + private long delay ; < nl > + < nl > + public StartMonitoring ( long delay ) { < nl > + this . delay = delay ; < nl > + } < nl > + < nl > + public long getDelay ( ) { < nl > + return delay ; < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - frontend / src / main / java / im / actor / crypto / box / ActorBox . java b / actor - server / actor - frontend / src / main / java / im / actor / crypto / box / ActorBox . java 
 index 508154c . . c96ccc7 100644 
 - - - a / actor - server / actor - frontend / src / main / java / im / actor / crypto / box / ActorBox . java 
 + + + b / actor - server / actor - frontend / src / main / java / im / actor / crypto / box / ActorBox . java 
 @ @ - 3 , 7 + 3 , 7 @ @ package im . actor . crypto . box ; 
 import im . actor . crypto . IntegrityException ; 
 import im . actor . crypto . primitives . aes . AESFastEngine ; 
 import im . actor . crypto . primitives . digest . SHA256 ; 
 - import im . actor . crypto . primitives . kuznechik . KuznechikCipher ; 
 + import im . actor . crypto . primitives . kuznechik . KuznechikFastEngine ; 
 import im . actor . crypto . primitives . padding . PKCS7Padding ; 
 import im . actor . crypto . primitives . streebog . Streebog256 ; 
 import im . actor . crypto . primitives . util . ByteStrings ; 
 @ @ - 29 , 7 + 29 , 7 @ @ public class ActorBox { 
 CBCHmacBox aesCipher = 
 new CBCHmacBox ( new AESFastEngine ( key . getKeyAES ( ) ) , new SHA256 ( ) , key . getMacAES ( ) ) ; 
 CBCHmacBox kuzCipher = 
 - new CBCHmacBox ( new KuznechikCipher ( key . getKeyKuz ( ) ) , new Streebog256 ( ) , key . getMacKuz ( ) ) ; 
 + new CBCHmacBox ( new KuznechikFastEngine ( key . getKeyKuz ( ) ) , new Streebog256 ( ) , key . getMacKuz ( ) ) ; 
 byte [ ] kuzPackage = aesCipher . decryptPackage ( header , 
 ByteStrings . substring ( cipherText , 0 , 16 ) , 
 ByteStrings . substring ( cipherText , 16 , cipherText . length - 16 ) ) ; 
 @ @ - 62 , 7 + 62 , 7 @ @ public class ActorBox { 
 * / 
 public static byte [ ] closeBox ( byte [ ] header , byte [ ] plainText , byte [ ] random32 , ActorBoxKey key ) throws IntegrityException { 
 CBCHmacBox aesCipher = new CBCHmacBox ( new AESFastEngine ( key . getKeyAES ( ) ) , new SHA256 ( ) , key . getMacAES ( ) ) ; 
 - CBCHmacBox kuzCipher = new CBCHmacBox ( new KuznechikCipher ( key . getKeyKuz ( ) ) , new Streebog256 ( ) , key . getMacKuz ( ) ) ; 
 + CBCHmacBox kuzCipher = new CBCHmacBox ( new KuznechikFastEngine ( key . getKeyKuz ( ) ) , new Streebog256 ( ) , key . getMacKuz ( ) ) ; 
 
 / / Calculating padding 
 int paddingSize = ( plainText . length + 1 ) % 16 ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java 
 index ecb80d3 . . 955989e 100644 
 - - - a / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java 
 + + + b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java 
 @ @ - 1 , 26 + 1 , 31 @ @ 
 package im . actor . app ; 
 
 - import im . actor . core . ApiConfiguration ; 
 - import im . actor . core . ConfigurationBuilder ; 
 - import im . actor . core . JavaSeMessenger ; 
 - import im . actor . core . PhoneBookProvider ; 
 + import im . actor . app . monitoring . AuthKeyCreationMon ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . actors . ActorSystem ; 
 + import im . actor . runtime . actors . Props ; 
 
 public class Main { 
 
 public static void main ( String [ ] args ) { 
 - ConfigurationBuilder builder = new ConfigurationBuilder ( ) ; 
 - builder . addEndpoint ( " tcp : / / front1 - mtproto - api - rev3 . actor . im : 443 " ) ; 
 - builder . addEndpoint ( " tcp : / / front2 - mtproto - api - rev3 . actor . im : 443 " ) ; 
 - builder . setPhoneBookProvider ( new PhoneBookProvider ( ) { 
 + 
 + ActorRef actor = ActorSystem . system ( ) . actorOf ( Props . create ( AuthKeyCreationMon . class , new ActorCreator < AuthKeyCreationMon > ( ) { 
 @ Override 
 - public void loadPhoneBook ( Callback callback ) { 
 + public AuthKeyCreationMon create ( ) { 
 + return new AuthKeyCreationMon ( ) ; 
 + } 
 + } ) , " auth _ key _ mon " ) ; 
 + 
 + actor . send ( new AuthKeyCreationMon . StartMonitoring ( 0 ) ) ; 
 
 + while ( true ) { 
 + try { 
 + Thread . sleep ( 100000 ) ; 
 + } catch ( InterruptedException e ) { 
 + e . printStackTrace ( ) ; 
 + return ; 
 } 
 - } ) ; 
 - builder . setPhoneBookImportEnabled ( false ) ; 
 - builder . setApiConfiguration ( new ApiConfiguration ( " " , 0 , 
 - " " , " " , " " ) ) ; 
 - JavaSeMessenger messenger = new JavaSeMessenger ( builder . build ( ) ) ; 
 - / / TODO : Start working with messenger object 
 + } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core - se / src / main / java / im / actor / app / monitoring / AuthKeyCreationMon . java b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / monitoring / AuthKeyCreationMon . java 
 new file mode 100644 
 index 0000000 . . 2aa4d04 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / monitoring / AuthKeyCreationMon . java 
 @ @ - 0 , 0 + 1 , 64 @ @ 
 + package im . actor . app . monitoring ; 
 + 
 + import im . actor . core . network . Endpoints ; 
 + import im . actor . core . network . TrustedKey ; 
 + import im . actor . core . network . api . AuthKeyActor ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . actors . Props ; 
 + import im . actor . runtime . mtproto . ConnectionEndpoint ; 
 + 
 + public class AuthKeyCreationMon extends Actor { 
 + private ActorRef keyCreation ; 
 + private Endpoints endpoints ; 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + endpoints = new Endpoints ( new ConnectionEndpoint [ ] { 
 + new ConnectionEndpoint ( " front1 - mtproto - api - rev3 . actor . im " , 443 , ConnectionEndpoint . Type . TCP ) , 
 + new ConnectionEndpoint ( " front2 - mtproto - api - rev3 . actor . im " , 443 , ConnectionEndpoint . Type . TCP ) 
 + } , new TrustedKey [ 0 ] ) ; 
 + keyCreation = system ( ) . actorOf ( Props . create ( AuthKeyActor . class , new ActorCreator < AuthKeyActor > ( ) { 
 + @ Override 
 + public AuthKeyActor create ( ) { 
 + return new AuthKeyActor ( ) ; 
 + } 
 + } ) , getPath ( ) + " / test " ) ; 
 + } 
 + 
 + private void startMonitoring ( long delay ) { 
 + Log . d ( " AuthKeyCreation " , " Start monitoring " ) ; 
 + keyCreation . send ( new AuthKeyActor . StartKeyCreation ( endpoints ) , self ( ) ) ; 
 + } 
 + 
 + private void onKeyCreated ( ) { 
 + Log . d ( " AuthKeyCreation " , " Key created " ) ; 
 + keyCreation . send ( new AuthKeyActor . StartKeyCreation ( endpoints ) , self ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof StartMonitoring ) { 
 + startMonitoring ( ( ( StartMonitoring ) message ) . getDelay ( ) ) ; 
 + } else if ( message instanceof AuthKeyActor . KeyCreated ) { 
 + onKeyCreated ( ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 + public static class StartMonitoring { 
 + private long delay ; 
 + 
 + public StartMonitoring ( long delay ) { 
 + this . delay = delay ; 
 + } 
 + 
 + public long getDelay ( ) { 
 + return delay ; 
 + } 
 + } 
 + } 
 \ No newline at end of file
