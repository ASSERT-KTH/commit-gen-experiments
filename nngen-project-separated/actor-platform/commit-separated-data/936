BLEU SCORE: 0.1702602472176709

TEST MSG: fix ( server : encryption ) : return seq even if own keys aren ' t present
GENERATED MSG: fix ( server : sequence ) : ignore unexisting users

TEST DIFF (one line): diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > index 957524d . . 76d9422 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala < nl > @ @ - 155 , 12 + 155 , 12 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti < nl > _ ← peersFu < nl > seqstate ← ownOpt match { < nl > case Some ( own ) ⇒ < nl > - updExt . deliverAuthIdMappedUpdate ( client . userId , Some ( UpdateEmptyUpdate ) , own ) map ( Some ( _ ) ) < nl > - case None ⇒ FastFuture . successful ( None ) < nl > + updExt . deliverAuthIdMappedUpdate ( client . userId , Some ( UpdateEmptyUpdate ) , own ) < nl > + case None ⇒ updExt . deliverSingleUpdate ( client . userId , UpdateEmptyUpdate ) < nl > } < nl > } yield Ok ( ResponseSendEncryptedPackage ( < nl > - seq = seqstate map ( _ . seq ) , < nl > - state = seqstate map ( _ . state . toByteArray ) , < nl > + seq = Some ( seqstate . seq ) , < nl > + state = Some ( seqstate . state . toByteArray ) , < nl > date = Some ( date ) , < nl > Vector . empty , < nl > Vector . empty
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserUtils . scala < nl > index ae7c6a5 . . 191aa44 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserUtils . scala < nl > @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem < nl > import im . actor . api . rpc . users . _ < nl > import im . actor . server . model < nl > import im . actor . server . model . UserPhone < nl > - import im . actor . server . office . EntityNotFound < nl > + import im . actor . server . user . UserErrors . UserNotFound < nl > < nl > import scala . language . postfixOps < nl > < nl > @ @ - 40 , 13 + 40 , 13 @ @ object UserUtils { < nl > def userPhone ( u : model . User , phones : Seq [ UserPhone ] ) : Option [ Long ] = { < nl > phones . headOption match { < nl > case Some ( phone ) ⇒ Some ( phone . number ) < nl > - case None ⇒ Some ( 0L ) < nl > + case None ⇒ Some ( 0L ) < nl > } < nl > } < nl > < nl > def normalizeLocalName ( name : Option [ String ] ) = name match { < nl > - case n @ Some ( name ) if name . nonEmpty ⇒ n < nl > - case _ ⇒ None < nl > + case n @ Some ( name ) if name . nonEmpty ⇒ n < nl > + case _ ⇒ None < nl > } < nl > < nl > def safeGetUser ( userId : Int , clientUserId : Int , clientAuthId : Long ) ( implicit system : ActorSystem ) = { < nl > @ @ - 55 , 7 + 55 , 7 @ @ object UserUtils { < nl > . getApiStruct ( userId , clientUserId , clientAuthId ) < nl > . map ( Some ( _ ) ) < nl > . recover { < nl > - case EntityNotFound ⇒ None < nl > + case _ : UserNotFound ⇒ None < nl > } < nl > } < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > index 988f205 . . 38f6959 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > @ @ - 4 , 7 + 4 , 6 @ @ import akka . event . Logging < nl > import im . actor . api . rpc . groups . ApiGroup < nl > import im . actor . api . rpc . users . ApiUser < nl > import im . actor . server . model . SeqUpdate < nl > - import im . actor . server . persist . AuthIdRepo < nl > < nl > import scala . concurrent . { ExecutionContext , Future } < nl > import scala . util . Success

TEST DIFF:
diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 index 957524d . . 76d9422 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / encryption / EncryptionServiceImpl . scala 
 @ @ - 155 , 12 + 155 , 12 @ @ final class EncryptionServiceImpl ( implicit system : ActorSystem ) extends Encrypti 
 _ ← peersFu 
 seqstate ← ownOpt match { 
 case Some ( own ) ⇒ 
 - updExt . deliverAuthIdMappedUpdate ( client . userId , Some ( UpdateEmptyUpdate ) , own ) map ( Some ( _ ) ) 
 - case None ⇒ FastFuture . successful ( None ) 
 + updExt . deliverAuthIdMappedUpdate ( client . userId , Some ( UpdateEmptyUpdate ) , own ) 
 + case None ⇒ updExt . deliverSingleUpdate ( client . userId , UpdateEmptyUpdate ) 
 } 
 } yield Ok ( ResponseSendEncryptedPackage ( 
 - seq = seqstate map ( _ . seq ) , 
 - state = seqstate map ( _ . state . toByteArray ) , 
 + seq = Some ( seqstate . seq ) , 
 + state = Some ( seqstate . state . toByteArray ) , 
 date = Some ( date ) , 
 Vector . empty , 
 Vector . empty

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserUtils . scala 
 index ae7c6a5 . . 191aa44 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserUtils . scala 
 @ @ - 4 , 7 + 4 , 7 @ @ import akka . actor . ActorSystem 
 import im . actor . api . rpc . users . _ 
 import im . actor . server . model 
 import im . actor . server . model . UserPhone 
 - import im . actor . server . office . EntityNotFound 
 + import im . actor . server . user . UserErrors . UserNotFound 
 
 import scala . language . postfixOps 
 
 @ @ - 40 , 13 + 40 , 13 @ @ object UserUtils { 
 def userPhone ( u : model . User , phones : Seq [ UserPhone ] ) : Option [ Long ] = { 
 phones . headOption match { 
 case Some ( phone ) ⇒ Some ( phone . number ) 
 - case None ⇒ Some ( 0L ) 
 + case None ⇒ Some ( 0L ) 
 } 
 } 
 
 def normalizeLocalName ( name : Option [ String ] ) = name match { 
 - case n @ Some ( name ) if name . nonEmpty ⇒ n 
 - case _ ⇒ None 
 + case n @ Some ( name ) if name . nonEmpty ⇒ n 
 + case _ ⇒ None 
 } 
 
 def safeGetUser ( userId : Int , clientUserId : Int , clientAuthId : Long ) ( implicit system : ActorSystem ) = { 
 @ @ - 55 , 7 + 55 , 7 @ @ object UserUtils { 
 . getApiStruct ( userId , clientUserId , clientAuthId ) 
 . map ( Some ( _ ) ) 
 . recover { 
 - case EntityNotFound ⇒ None 
 + case _ : UserNotFound ⇒ None 
 } 
 } 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 index 988f205 . . 38f6959 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 @ @ - 4 , 7 + 4 , 6 @ @ import akka . event . Logging 
 import im . actor . api . rpc . groups . ApiGroup 
 import im . actor . api . rpc . users . ApiUser 
 import im . actor . server . model . SeqUpdate 
 - import im . actor . server . persist . AuthIdRepo 
 
 import scala . concurrent . { ExecutionContext , Future } 
 import scala . util . Success
