BLEU SCORE: 0.17542198478193427

TEST MSG: fix ( server : s3 ) : minio work with https
GENERATED MSG: fix ( server ) : fixed compilation error

TEST DIFF (one line): diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala < nl > index 0d8ca2c . . 93773a3 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala < nl > @ @ - 50 , 6 + 50 , 7 @ @ final class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { < nl > if ( config . pathStyleAccess ) { < nl > val co = S3ClientOptions . builder ( ) < nl > . setPathStyleAccess ( true ) < nl > + . setPayloadSigningEnabled ( true ) < nl > . build ( ) < nl > cl . client . setS3ClientOptions ( co ) < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala < nl > index 6ee639d . . e114d7a 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala < nl > + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala < nl > @ @ - 1 , 7 + 1 , 6 @ @ < nl > package im . actor . server . user < nl > < nl > import akka . actor . { ActorRef , ActorSystem , Props } < nl > - import akka . contrib . pattern . { ClusterSharding , ShardRegion } < nl > < nl > object UserViewRegion { < nl > private def start ( props : Option [ Props ] ) ( implicit system : ActorSystem ) : UserViewRegion = < nl > @ @ - 19 , 7 + 18 , 7 @ @ object UserViewRegion { < nl > implicit < nl > system : ActorSystem < nl > ) : UserViewRegion = < nl > - start ( Some ( UserView . props ) ) < nl > + start ( None ) < nl > < nl > def startProxy ( ) ( implicit system : ActorSystem ) : UserViewRegion = < nl > start ( None )

TEST DIFF:
diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala 
 index 0d8ca2c . . 93773a3 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapter . scala 
 @ @ - 50 , 6 + 50 , 7 @ @ final class S3StorageAdapter ( _ system : ActorSystem ) extends FileStorageAdapter { 
 if ( config . pathStyleAccess ) { 
 val co = S3ClientOptions . builder ( ) 
 . setPathStyleAccess ( true ) 
 + . setPayloadSigningEnabled ( true ) 
 . build ( ) 
 cl . client . setS3ClientOptions ( co ) 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala 
 index 6ee639d . . e114d7a 100644 
 - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala 
 + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package im . actor . server . user 
 
 import akka . actor . { ActorRef , ActorSystem , Props } 
 - import akka . contrib . pattern . { ClusterSharding , ShardRegion } 
 
 object UserViewRegion { 
 private def start ( props : Option [ Props ] ) ( implicit system : ActorSystem ) : UserViewRegion = 
 @ @ - 19 , 7 + 18 , 7 @ @ object UserViewRegion { 
 implicit 
 system : ActorSystem 
 ) : UserViewRegion = 
 - start ( Some ( UserView . props ) ) 
 + start ( None ) 
 
 def startProxy ( ) ( implicit system : ActorSystem ) : UserViewRegion = 
 start ( None )
