BLEU SCORE: 0.26708679784499234

TEST MSG: fix ( server ) : ThreadLocalMD5 instead of stashing
GENERATED MSG: perf ( server ) : much faster user accessHash checking

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > index bdad712 . . 1c8c52d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > @ @ - 155 , 9 + 155 , 6 @ @ private [ user ] final class UserProcessor < nl > protected implicit val seqUpdatesExt : SeqUpdatesExtension = SeqUpdatesExtension ( system ) < nl > protected implicit val socialRegion : SocialManagerRegion = SocialExtension ( system ) . region < nl > < nl > - / / For GetApiStruct < nl > - protected val aclMD = ACLUtils . getMDInstance ( ) < nl > - < nl > protected implicit val timeout : Timeout = Timeout ( 10 . seconds ) < nl > < nl > protected val userId = self . path . name . toInt < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala < nl > index 1f30d24 . . f1e775a 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala < nl > @ @ - 24 , 7 + 24 , 7 @ @ private [ user ] trait UserQueriesHandlers { < nl > userExt . getLocalName ( clientUserId , state . id ) < nl > } yield GetApiStructResponse ( ApiUser ( < nl > id = userId , < nl > - accessHash = ACLUtils . userAccessHash ( clientAuthId , userId , state . accessSalt , aclMD ) , < nl > + accessHash = ACLUtils . userAccessHash ( clientAuthId , userId , state . accessSalt ) , < nl > name = state . name , < nl > localName = UserUtils . normalizeLocalName ( localName ) , < nl > sex = Some ( state . sex ) , < nl > @ @ - 37 , 21 + 37 , 7 @ @ private [ user ] trait UserQueriesHandlers { < nl > external = state . external , < nl > preferredLanguages = state . preferredLanguages . toVector , < nl > timeZone = state . timeZone < nl > - ) ) ) pipeTo context . self < nl > - < nl > - val replyTo = sender ( ) < nl > - < nl > - context become { < nl > - case rsp : GetApiStructResponse ⇒ < nl > - replyTo ! rsp < nl > - unstashAll ( ) < nl > - context become working ( state ) < nl > - case fail : Status . Failure ⇒ < nl > - replyTo ! fail < nl > - unstashAll ( ) < nl > - context become working ( state ) < nl > - case _ ⇒ stash < nl > - } < nl > + ) ) ) pipeTo sender ( ) < nl > } < nl > < nl > protected def getContactRecords ( state : UserState ) : Unit = < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala b / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala < nl > index 5f0eb26 . . 88b2093 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala < nl > @ @ - 4 , 11 + 4 , 12 @ @ import java . nio . ByteBuffer < nl > import java . security . MessageDigest < nl > < nl > import akka . actor . ActorSystem < nl > + import im . actor . concurrent . ThreadLocalMD5 < nl > import im . actor . util . ThreadLocalSecureRandom < nl > < nl > trait ACLBase { < nl > < nl > - def getMDInstance ( ) = MessageDigest . getInstance ( " MD5 " ) < nl > + def getMDInstance ( ) = ThreadLocalMD5 . current ( ) < nl > < nl > def secretKey ( ) ( implicit s : ActorSystem ) = < nl > s . settings . config . getString ( " secret " ) < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / ThreadLocalMD5 . scala b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / ThreadLocalMD5 . scala < nl > new file mode 100644 < nl > index 0000000 . . d5d7c2d < nl > - - - / dev / null < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / ThreadLocalMD5 . scala < nl > @ @ - 0 , 0 + 1 , 13 @ @ < nl > + package im . actor . concurrent < nl > + < nl > + import java . security . MessageDigest < nl > + < nl > + object ThreadLocalMD5 { < nl > + private val local : ThreadLocal [ MessageDigest ] = new ThreadLocal [ MessageDigest ] ( ) { < nl > + override protected def initialValue ( ) : MessageDigest = < nl > + MessageDigest . getInstance ( " MD5 " ) < nl > + } < nl > + < nl > + def current ( ) : MessageDigest = local . get ( ) < nl > + } < nl > +
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala < nl > index 521c208 . . 7bcad1e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala < nl > @ @ - 1 , 6 + 1 , 6 @ @ < nl > package im . actor . server . acl < nl > < nl > - import java . security . SecureRandom < nl > + import java . security . { MessageDigest , SecureRandom } < nl > import javax . crypto . SecretKeyFactory < nl > import javax . crypto . spec . PBEKeySpec < nl > < nl > @ @ - 27 , 8 + 27 , 8 @ @ object ACLUtils extends ACLBase with ACLFiles { < nl > type Hash = Array [ Byte ] < nl > type Salt = Array [ Byte ] < nl > < nl > - def userAccessHash ( authId : Long , userId : Int , accessSalt : String ) ( implicit s : ActorSystem ) : Long = < nl > - hash ( s " $ authId : $ userId : $ accessSalt : $ { secretKey ( ) } " ) < nl > + def userAccessHash ( authId : Long , userId : Int , accessSalt : String , md : MessageDigest = getMDInstance ( ) ) ( implicit s : ActorSystem ) : Long = < nl > + hash ( s " $ authId : $ userId : $ accessSalt : $ { secretKey ( ) } " , md ) < nl > < nl > def userAccessHash ( authId : Long , u : model . User ) ( implicit s : ActorSystem ) : Long = < nl > userAccessHash ( authId , u . id , u . accessSalt ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > index 5f5b126 . . 5662128 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > @ @ - 6 , 6 + 6 , 7 @ @ import akka . persistence . RecoveryCompleted < nl > import akka . util . Timeout < nl > import im . actor . api . rpc . misc . ApiExtension < nl > import im . actor . serialization . ActorSerializer < nl > + import im . actor . server . acl . ACLUtils < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . dialog . { DialogCommand , DialogExtension } < nl > import im . actor . server . event . TSEvent < nl > @ @ - 147 , 6 + 148 , 9 @ @ private [ user ] final class UserProcessor < nl > protected implicit val seqUpdatesExt : SeqUpdatesExtension = SeqUpdatesExtension ( system ) < nl > protected implicit val socialRegion : SocialManagerRegion = SocialExtension ( system ) . region < nl > < nl > + / / For GetApiStruct < nl > + protected val aclMD = ACLUtils . getMDInstance ( ) < nl > + < nl > protected implicit val timeout : Timeout = Timeout ( 10 . seconds ) < nl > < nl > protected val userId = self . path . name . toInt < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala < nl > index ee22c4e . . 20b6df3 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala < nl > @ @ - 24 , 7 + 24 , 7 @ @ private [ user ] trait UserQueriesHandlers { < nl > userExt . getLocalName ( clientUserId , state . id ) < nl > } yield GetApiStructResponse ( ApiUser ( < nl > id = userId , < nl > - accessHash = ACLUtils . userAccessHash ( clientAuthId , userId , state . accessSalt ) , < nl > + accessHash = ACLUtils . userAccessHash ( clientAuthId , userId , state . accessSalt , aclMD ) , < nl > name = state . name , < nl > localName = UserUtils . normalizeLocalName ( localName ) , < nl > sex = Some ( state . sex ) , < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > index 6ffd726 . . bf8a60a 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . api . rpc < nl > < nl > import im . actor . server . acl . ACLUtils < nl > import im . actor . server . db . DbExtension < nl > + import im . actor . server . user . UserExtension < nl > < nl > import scala . collection . immutable < nl > import scala . concurrent . { Future , ExecutionContext } < nl > @ @ - 30 , 13 + 31 , 9 @ @ object PeerHelpers { < nl > ) ( implicit client : AuthorizedClientData , actorSystem : ActorSystem , ec : ExecutionContext ) : DBIO [ RpcError \ / R ] = { < nl > outPeer . ` type ` match { < nl > case ApiPeerType . Private ⇒ < nl > - ( for { < nl > - optUser ← persist . UserRepo . find ( outPeer . id ) < nl > - usererrOrUser ← validUser ( optUser ) < nl > - hasherrOrUser ← DBIO . successful ( usererrOrUser . map ( validUserAccessHash ( outPeer . accessHash , _ ) ) ) < nl > - } yield hasherrOrUser ) . flatMap { < nl > - case Error ( err ) ⇒ DBIO . successful ( Error ( err ) ) < nl > - case _ ⇒ f < nl > + DBIO . from ( ACLUtils . checkOutPeer ( outPeer , client . authId ) ) flatMap { < nl > + case false ⇒ DBIO . successful ( Error ( CommonErrors . InvalidAccessHash ) ) < nl > + case true ⇒ f < nl > } < nl > case ApiPeerType . Group ⇒ < nl > ( for { < nl > @ @ - 198 , 14 + 195 , 6 @ @ object PeerHelpers { < nl > } < nl > } < nl > < nl > - private def validUser ( optUser : Option [ model . User ] ) = { < nl > - optUser match { < nl > - case Some ( user ) ⇒ < nl > - DBIO . successful ( \ / - ( user ) ) < nl > - case None ⇒ DBIO . successful ( Error ( CommonErrors . UserNotFound ) ) < nl > - } < nl > - } < nl > - < nl > def validateGroupAccess ( optGroup : Option [ model . Group ] , userId : Int ) ( implicit ec : ExecutionContext ) = optGroup match { < nl > case Some ( group ) ⇒ < nl > ( for ( user ← persist . GroupUserRepo . find ( group . id , userId ) ) yield user ) . flatMap { < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala b / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala < nl > index 51924b1 . . d23b981 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala < nl > @ @ - 9 , 11 + 9 , 13 @ @ import scala . concurrent . forkjoin . ThreadLocalRandom < nl > < nl > trait ACLBase { < nl > < nl > + def getMDInstance ( ) = MessageDigest . getInstance ( " MD5 " ) < nl > + < nl > def secretKey ( ) ( implicit s : ActorSystem ) = < nl > s . settings . config . getString ( " secret " ) < nl > < nl > - def hash ( s : String ) : Long = < nl > - ByteBuffer . wrap ( MessageDigest . getInstance ( " MD5 " ) . digest ( s . getBytes ) ) . getLong < nl > + def hash ( s : String , md : MessageDigest = getMDInstance ( ) ) : Long = < nl > + ByteBuffer . wrap ( md . digest ( s . getBytes ) ) . getLong < nl > < nl > def randomLong ( ) : Long = randomLong ( ThreadLocalRandom . current ( ) )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 index bdad712 . . 1c8c52d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 @ @ - 155 , 9 + 155 , 6 @ @ private [ user ] final class UserProcessor 
 protected implicit val seqUpdatesExt : SeqUpdatesExtension = SeqUpdatesExtension ( system ) 
 protected implicit val socialRegion : SocialManagerRegion = SocialExtension ( system ) . region 
 
 - / / For GetApiStruct 
 - protected val aclMD = ACLUtils . getMDInstance ( ) 
 - 
 protected implicit val timeout : Timeout = Timeout ( 10 . seconds ) 
 
 protected val userId = self . path . name . toInt 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala 
 index 1f30d24 . . f1e775a 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala 
 @ @ - 24 , 7 + 24 , 7 @ @ private [ user ] trait UserQueriesHandlers { 
 userExt . getLocalName ( clientUserId , state . id ) 
 } yield GetApiStructResponse ( ApiUser ( 
 id = userId , 
 - accessHash = ACLUtils . userAccessHash ( clientAuthId , userId , state . accessSalt , aclMD ) , 
 + accessHash = ACLUtils . userAccessHash ( clientAuthId , userId , state . accessSalt ) , 
 name = state . name , 
 localName = UserUtils . normalizeLocalName ( localName ) , 
 sex = Some ( state . sex ) , 
 @ @ - 37 , 21 + 37 , 7 @ @ private [ user ] trait UserQueriesHandlers { 
 external = state . external , 
 preferredLanguages = state . preferredLanguages . toVector , 
 timeZone = state . timeZone 
 - ) ) ) pipeTo context . self 
 - 
 - val replyTo = sender ( ) 
 - 
 - context become { 
 - case rsp : GetApiStructResponse ⇒ 
 - replyTo ! rsp 
 - unstashAll ( ) 
 - context become working ( state ) 
 - case fail : Status . Failure ⇒ 
 - replyTo ! fail 
 - unstashAll ( ) 
 - context become working ( state ) 
 - case _ ⇒ stash 
 - } 
 + ) ) ) pipeTo sender ( ) 
 } 
 
 protected def getContactRecords ( state : UserState ) : Unit = 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala b / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala 
 index 5f0eb26 . . 88b2093 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala 
 @ @ - 4 , 11 + 4 , 12 @ @ import java . nio . ByteBuffer 
 import java . security . MessageDigest 
 
 import akka . actor . ActorSystem 
 + import im . actor . concurrent . ThreadLocalMD5 
 import im . actor . util . ThreadLocalSecureRandom 
 
 trait ACLBase { 
 
 - def getMDInstance ( ) = MessageDigest . getInstance ( " MD5 " ) 
 + def getMDInstance ( ) = ThreadLocalMD5 . current ( ) 
 
 def secretKey ( ) ( implicit s : ActorSystem ) = 
 s . settings . config . getString ( " secret " ) 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / ThreadLocalMD5 . scala b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / ThreadLocalMD5 . scala 
 new file mode 100644 
 index 0000000 . . d5d7c2d 
 - - - / dev / null 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / ThreadLocalMD5 . scala 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package im . actor . concurrent 
 + 
 + import java . security . MessageDigest 
 + 
 + object ThreadLocalMD5 { 
 + private val local : ThreadLocal [ MessageDigest ] = new ThreadLocal [ MessageDigest ] ( ) { 
 + override protected def initialValue ( ) : MessageDigest = 
 + MessageDigest . getInstance ( " MD5 " ) 
 + } 
 + 
 + def current ( ) : MessageDigest = local . get ( ) 
 + } 
 +

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala 
 index 521c208 . . 7bcad1e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / acl / ACLUtils . scala 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package im . actor . server . acl 
 
 - import java . security . SecureRandom 
 + import java . security . { MessageDigest , SecureRandom } 
 import javax . crypto . SecretKeyFactory 
 import javax . crypto . spec . PBEKeySpec 
 
 @ @ - 27 , 8 + 27 , 8 @ @ object ACLUtils extends ACLBase with ACLFiles { 
 type Hash = Array [ Byte ] 
 type Salt = Array [ Byte ] 
 
 - def userAccessHash ( authId : Long , userId : Int , accessSalt : String ) ( implicit s : ActorSystem ) : Long = 
 - hash ( s " $ authId : $ userId : $ accessSalt : $ { secretKey ( ) } " ) 
 + def userAccessHash ( authId : Long , userId : Int , accessSalt : String , md : MessageDigest = getMDInstance ( ) ) ( implicit s : ActorSystem ) : Long = 
 + hash ( s " $ authId : $ userId : $ accessSalt : $ { secretKey ( ) } " , md ) 
 
 def userAccessHash ( authId : Long , u : model . User ) ( implicit s : ActorSystem ) : Long = 
 userAccessHash ( authId , u . id , u . accessSalt ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 index 5f5b126 . . 5662128 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 @ @ - 6 , 6 + 6 , 7 @ @ import akka . persistence . RecoveryCompleted 
 import akka . util . Timeout 
 import im . actor . api . rpc . misc . ApiExtension 
 import im . actor . serialization . ActorSerializer 
 + import im . actor . server . acl . ACLUtils 
 import im . actor . server . db . DbExtension 
 import im . actor . server . dialog . { DialogCommand , DialogExtension } 
 import im . actor . server . event . TSEvent 
 @ @ - 147 , 6 + 148 , 9 @ @ private [ user ] final class UserProcessor 
 protected implicit val seqUpdatesExt : SeqUpdatesExtension = SeqUpdatesExtension ( system ) 
 protected implicit val socialRegion : SocialManagerRegion = SocialExtension ( system ) . region 
 
 + / / For GetApiStruct 
 + protected val aclMD = ACLUtils . getMDInstance ( ) 
 + 
 protected implicit val timeout : Timeout = Timeout ( 10 . seconds ) 
 
 protected val userId = self . path . name . toInt 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala 
 index ee22c4e . . 20b6df3 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserQueriesHandlers . scala 
 @ @ - 24 , 7 + 24 , 7 @ @ private [ user ] trait UserQueriesHandlers { 
 userExt . getLocalName ( clientUserId , state . id ) 
 } yield GetApiStructResponse ( ApiUser ( 
 id = userId , 
 - accessHash = ACLUtils . userAccessHash ( clientAuthId , userId , state . accessSalt ) , 
 + accessHash = ACLUtils . userAccessHash ( clientAuthId , userId , state . accessSalt , aclMD ) , 
 name = state . name , 
 localName = UserUtils . normalizeLocalName ( localName ) , 
 sex = Some ( state . sex ) , 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 index 6ffd726 . . bf8a60a 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / api / rpc / PeerHelpers . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . api . rpc 
 
 import im . actor . server . acl . ACLUtils 
 import im . actor . server . db . DbExtension 
 + import im . actor . server . user . UserExtension 
 
 import scala . collection . immutable 
 import scala . concurrent . { Future , ExecutionContext } 
 @ @ - 30 , 13 + 31 , 9 @ @ object PeerHelpers { 
 ) ( implicit client : AuthorizedClientData , actorSystem : ActorSystem , ec : ExecutionContext ) : DBIO [ RpcError \ / R ] = { 
 outPeer . ` type ` match { 
 case ApiPeerType . Private ⇒ 
 - ( for { 
 - optUser ← persist . UserRepo . find ( outPeer . id ) 
 - usererrOrUser ← validUser ( optUser ) 
 - hasherrOrUser ← DBIO . successful ( usererrOrUser . map ( validUserAccessHash ( outPeer . accessHash , _ ) ) ) 
 - } yield hasherrOrUser ) . flatMap { 
 - case Error ( err ) ⇒ DBIO . successful ( Error ( err ) ) 
 - case _ ⇒ f 
 + DBIO . from ( ACLUtils . checkOutPeer ( outPeer , client . authId ) ) flatMap { 
 + case false ⇒ DBIO . successful ( Error ( CommonErrors . InvalidAccessHash ) ) 
 + case true ⇒ f 
 } 
 case ApiPeerType . Group ⇒ 
 ( for { 
 @ @ - 198 , 14 + 195 , 6 @ @ object PeerHelpers { 
 } 
 } 
 
 - private def validUser ( optUser : Option [ model . User ] ) = { 
 - optUser match { 
 - case Some ( user ) ⇒ 
 - DBIO . successful ( \ / - ( user ) ) 
 - case None ⇒ DBIO . successful ( Error ( CommonErrors . UserNotFound ) ) 
 - } 
 - } 
 - 
 def validateGroupAccess ( optGroup : Option [ model . Group ] , userId : Int ) ( implicit ec : ExecutionContext ) = optGroup match { 
 case Some ( group ) ⇒ 
 ( for ( user ← persist . GroupUserRepo . find ( group . id , userId ) ) yield user ) . flatMap { 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala b / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala 
 index 51924b1 . . d23b981 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / acl / ACLBase . scala 
 @ @ - 9 , 11 + 9 , 13 @ @ import scala . concurrent . forkjoin . ThreadLocalRandom 
 
 trait ACLBase { 
 
 + def getMDInstance ( ) = MessageDigest . getInstance ( " MD5 " ) 
 + 
 def secretKey ( ) ( implicit s : ActorSystem ) = 
 s . settings . config . getString ( " secret " ) 
 
 - def hash ( s : String ) : Long = 
 - ByteBuffer . wrap ( MessageDigest . getInstance ( " MD5 " ) . digest ( s . getBytes ) ) . getLong 
 + def hash ( s : String , md : MessageDigest = getMDInstance ( ) ) : Long = 
 + ByteBuffer . wrap ( md . digest ( s . getBytes ) ) . getLong 
 
 def randomLong ( ) : Long = randomLong ( ThreadLocalRandom . current ( ) )
