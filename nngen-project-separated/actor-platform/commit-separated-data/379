BLEU SCORE: 0.11447078430334955

TEST MSG: feat ( js ) : Initial binding method in message bind , adding edit message method
GENERATED MSG: feat ( core + js ) : Adding chat hiding

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 33f28b7 . . b0f3e26 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 442 , 6 + 442 , 25 @ @ public class JsFacade implements Exportable { < nl > return new JsMessagesBind ( callback , messenger . getSharedChatList ( peerC ) , messenger . getConversationVM ( peerC ) ) ; < nl > } < nl > < nl > + public JsPromise editMessage ( JsPeer peer , String id , String newText ) { < nl > + return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > + @ Override < nl > + public void execute ( ) { < nl > + messenger . updateMessage ( peer . convert ( ) , newText , Long . parseLong ( id ) ) . start ( new CommandCallback < Void > ( ) { < nl > + @ Override < nl > + public void onResult ( Void res ) { < nl > + resolve ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + reject ( e . getMessage ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > @ UsedByApp < nl > public void deleteMessage ( JsPeer peer , String id ) { < nl > messenger . deleteMessages ( peer . convert ( ) , new long [ ] { Long . parseLong ( id ) } ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java < nl > index 2c40617 . . ef251d6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java < nl > @ @ - 25 , 28 + 25 , 21 @ @ public class JsMessagesBind implements Exportable , JsDisplayListCallback < JsMessa < nl > private JsArray < JsMessage > arrays ; < nl > private JsArray < JavaScriptObject > overlays ; < nl > private boolean isLocked = true ; < nl > - private ValueChangedListener < Boolean > isLoadedListener = new ValueChangedListener < Boolean > ( ) { < nl > - @ Override < nl > - public void onChanged ( Boolean val , Value < Boolean > valueModel ) { < nl > - if ( ! isLocked ) { < nl > - notifySubscriber ( ) ; < nl > - } < nl > + private boolean isInited = false ; < nl > + < nl > + private ValueChangedListener < Boolean > isLoadedListener = ( val , valueModel ) - > { < nl > + if ( ! isLocked ) { < nl > + notifySubscriber ( ) ; < nl > } < nl > } ; < nl > - private ValueChangedListener < Long > readDateListener = new ValueChangedListener < Long > ( ) { < nl > - @ Override < nl > - public void onChanged ( Long val , Value < Long > valueModel ) { < nl > - if ( ! isLocked ) { < nl > - notifySubscriber ( ) ; < nl > - } < nl > + private ValueChangedListener < Long > readDateListener = ( val , valueModel ) - > { < nl > + if ( ! isLocked ) { < nl > + notifySubscriber ( ) ; < nl > } < nl > } ; < nl > - private ValueChangedListener < Long > receiveDateListener = new ValueChangedListener < Long > ( ) { < nl > - @ Override < nl > - public void onChanged ( Long val , Value < Long > valueModel ) { < nl > - if ( ! isLocked ) { < nl > - notifySubscriber ( ) ; < nl > - } < nl > + private ValueChangedListener < Long > receiveDateListener = ( val , valueModel ) - > { < nl > + if ( ! isLocked ) { < nl > + notifySubscriber ( ) ; < nl > } < nl > } ; < nl > < nl > @ @ - 62 , 6 + 55 , 14 @ @ public class JsMessagesBind implements Exportable , JsDisplayListCallback < JsMessa < nl > this . conversationVM . getReadDate ( ) . subscribe ( readDateListener ) ; < nl > this . conversationVM . getReceiveDate ( ) . subscribe ( receiveDateListener ) ; < nl > this . bind = displayList . subscribe ( this , true ) ; < nl > + } < nl > + < nl > + @ Export < nl > + public void initAll ( ) { < nl > + if ( isInited ) { < nl > + throw new RuntimeException ( " Already inited ! " ) ; < nl > + } < nl > + isInited = true ; < nl > this . bind . initAll ( ) ; < nl > notifySubscriber ( ) ; < nl > this . isLocked = false ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 11f85fc . . f431f95 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 462 , 6 + 462 , 27 @ @ public class JsFacade implements Exportable { < nl > } ) ; < nl > } < nl > < nl > + public JsPromise hideChat ( final JsPeer peer ) { < nl > + return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > + @ Override < nl > + public void execute ( ) { < nl > + messenger . hideChat ( peer . convert ( ) ) . start ( new CommandCallback < Boolean > ( ) { < nl > + @ Override < nl > + public void onResult ( Boolean res ) { < nl > + Log . d ( TAG , " hideChat : result " ) ; < nl > + resolve ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + Log . d ( TAG , " hideChat : error " ) ; < nl > + reject ( e . getMessage ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > / / Peers < nl > < nl > public JsPeer getUserPeer ( int uid ) { < nl > @ @ - 858 , 7 + 879 , 7 @ @ public class JsFacade implements Exportable { < nl > return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > @ Override < nl > public void execute ( ) { < nl > - String avatarDescriptor = provider . registerUploadFile ( file ) ; < nl > + String avatarDescriptor = file ! = null ? provider . registerUploadFile ( file ) : null ; < nl > / / noinspection ConstantConditions < nl > messenger . createGroup ( title , avatarDescriptor , uids ) . start ( new CommandCallback < Integer > ( ) { < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index b59506e . . 0202f68 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 703 , 6 + 703 , 17 @ @ public class Messenger { < nl > } < nl > < nl > / * * < nl > + * Hide chat < nl > + * < nl > + * @ param peer destination peer < nl > + * @ return Command for execution < nl > + * / < nl > + @ ObjectiveCName ( " hideChatCommandWithPeer : " ) < nl > + public Command < Boolean > hideChat ( Peer peer ) { < nl > + return modules . getMessagesModule ( ) . hideChat ( peer ) ; < nl > + } < nl > + < nl > + / * * < nl > * Save message draft < nl > * < nl > * @ param peer destination peer < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index bfbd171 . . a883a25 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 16 , 6 + 16 , 7 @ @ import im . actor . core . api . ApiPeerType ; < nl > import im . actor . core . api . base . SeqUpdate ; < nl > import im . actor . core . api . rpc . RequestClearChat ; < nl > import im . actor . core . api . rpc . RequestDeleteChat ; < nl > + import im . actor . core . api . rpc . RequestHideDialog ; < nl > import im . actor . core . api . rpc . ResponseSeq ; < nl > import im . actor . core . api . updates . UpdateChatClear ; < nl > import im . actor . core . api . updates . UpdateChatDelete ; < nl > @ @ - 366 , 7 + 367 , 7 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > @ Override < nl > public void start ( final CommandCallback < Boolean > callback ) { < nl > ApiOutPeer outPeer ; < nl > - final ApiPeer apiPeer ; < nl > + final ApiPeer apiPeer = buildApiPeer ( peer ) ; < nl > if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > if ( user = = null ) { < nl > @ @ - 380 , 8 + 381 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } < nl > outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , < nl > user . getAccessHash ( ) ) ; < nl > - apiPeer = new ApiPeer ( ApiPeerType . PRIVATE , < nl > - user . getUid ( ) ) ; < nl > } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > if ( group = = null ) { < nl > @ @ - 395 , 8 + 394 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } < nl > outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , < nl > group . getAccessHash ( ) ) ; < nl > - apiPeer = new ApiPeer ( ApiPeerType . GROUP , < nl > - group . getGroupId ( ) ) ; < nl > } else { < nl > runOnUiThread ( new Runnable ( ) { < nl > @ Override < nl > @ @ - 509 , 6 + 506 , 87 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } ; < nl > } < nl > < nl > + public Command < Boolean > hideChat ( final Peer peer ) { < nl > + return new Command < Boolean > ( ) { < nl > + @ Override < nl > + public void start ( final CommandCallback < Boolean > callback ) { < nl > + ApiOutPeer outPeer ; < nl > + final ApiPeer apiPeer ; < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > + if ( user = = null ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , < nl > + user . getAccessHash ( ) ) ; < nl > + apiPeer = new ApiPeer ( ApiPeerType . PRIVATE , < nl > + user . getUid ( ) ) ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > + if ( group = = null ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , < nl > + group . getAccessHash ( ) ) ; < nl > + apiPeer = new ApiPeer ( ApiPeerType . GROUP , < nl > + group . getGroupId ( ) ) ; < nl > + } else { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + request ( new RequestHideDialog ( outPeer ) , new RpcCallback < ResponseSeq > ( ) { < nl > + @ Override < nl > + public void onResult ( ResponseSeq response ) { < nl > + / / TODO : Implement ? < nl > + / / updates ( ) . onUpdateReceived ( new SeqUpdate ( response . getSeq ( ) , < nl > + / / response . getState ( ) , < nl > + / / UpdateChatClear . HEADER , < nl > + / / new UpdateChatClear ( apiPeer ) . toByteArray ( ) ) ) ; < nl > + updates ( ) . executeAfter ( response . getSeq ( ) , < nl > + new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onResult ( true ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( final RpcException e ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > public void resetModule ( ) { < nl > / / TODO : Implement < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 33f28b7 . . b0f3e26 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 442 , 6 + 442 , 25 @ @ public class JsFacade implements Exportable { 
 return new JsMessagesBind ( callback , messenger . getSharedChatList ( peerC ) , messenger . getConversationVM ( peerC ) ) ; 
 } 
 
 + public JsPromise editMessage ( JsPeer peer , String id , String newText ) { 
 + return JsPromise . create ( new JsPromiseExecutor ( ) { 
 + @ Override 
 + public void execute ( ) { 
 + messenger . updateMessage ( peer . convert ( ) , newText , Long . parseLong ( id ) ) . start ( new CommandCallback < Void > ( ) { 
 + @ Override 
 + public void onResult ( Void res ) { 
 + resolve ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + reject ( e . getMessage ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 @ UsedByApp 
 public void deleteMessage ( JsPeer peer , String id ) { 
 messenger . deleteMessages ( peer . convert ( ) , new long [ ] { Long . parseLong ( id ) } ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java 
 index 2c40617 . . ef251d6 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessagesBind . java 
 @ @ - 25 , 28 + 25 , 21 @ @ public class JsMessagesBind implements Exportable , JsDisplayListCallback < JsMessa 
 private JsArray < JsMessage > arrays ; 
 private JsArray < JavaScriptObject > overlays ; 
 private boolean isLocked = true ; 
 - private ValueChangedListener < Boolean > isLoadedListener = new ValueChangedListener < Boolean > ( ) { 
 - @ Override 
 - public void onChanged ( Boolean val , Value < Boolean > valueModel ) { 
 - if ( ! isLocked ) { 
 - notifySubscriber ( ) ; 
 - } 
 + private boolean isInited = false ; 
 + 
 + private ValueChangedListener < Boolean > isLoadedListener = ( val , valueModel ) - > { 
 + if ( ! isLocked ) { 
 + notifySubscriber ( ) ; 
 } 
 } ; 
 - private ValueChangedListener < Long > readDateListener = new ValueChangedListener < Long > ( ) { 
 - @ Override 
 - public void onChanged ( Long val , Value < Long > valueModel ) { 
 - if ( ! isLocked ) { 
 - notifySubscriber ( ) ; 
 - } 
 + private ValueChangedListener < Long > readDateListener = ( val , valueModel ) - > { 
 + if ( ! isLocked ) { 
 + notifySubscriber ( ) ; 
 } 
 } ; 
 - private ValueChangedListener < Long > receiveDateListener = new ValueChangedListener < Long > ( ) { 
 - @ Override 
 - public void onChanged ( Long val , Value < Long > valueModel ) { 
 - if ( ! isLocked ) { 
 - notifySubscriber ( ) ; 
 - } 
 + private ValueChangedListener < Long > receiveDateListener = ( val , valueModel ) - > { 
 + if ( ! isLocked ) { 
 + notifySubscriber ( ) ; 
 } 
 } ; 
 
 @ @ - 62 , 6 + 55 , 14 @ @ public class JsMessagesBind implements Exportable , JsDisplayListCallback < JsMessa 
 this . conversationVM . getReadDate ( ) . subscribe ( readDateListener ) ; 
 this . conversationVM . getReceiveDate ( ) . subscribe ( receiveDateListener ) ; 
 this . bind = displayList . subscribe ( this , true ) ; 
 + } 
 + 
 + @ Export 
 + public void initAll ( ) { 
 + if ( isInited ) { 
 + throw new RuntimeException ( " Already inited ! " ) ; 
 + } 
 + isInited = true ; 
 this . bind . initAll ( ) ; 
 notifySubscriber ( ) ; 
 this . isLocked = false ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 11f85fc . . f431f95 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 462 , 6 + 462 , 27 @ @ public class JsFacade implements Exportable { 
 } ) ; 
 } 
 
 + public JsPromise hideChat ( final JsPeer peer ) { 
 + return JsPromise . create ( new JsPromiseExecutor ( ) { 
 + @ Override 
 + public void execute ( ) { 
 + messenger . hideChat ( peer . convert ( ) ) . start ( new CommandCallback < Boolean > ( ) { 
 + @ Override 
 + public void onResult ( Boolean res ) { 
 + Log . d ( TAG , " hideChat : result " ) ; 
 + resolve ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + Log . d ( TAG , " hideChat : error " ) ; 
 + reject ( e . getMessage ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 / / Peers 
 
 public JsPeer getUserPeer ( int uid ) { 
 @ @ - 858 , 7 + 879 , 7 @ @ public class JsFacade implements Exportable { 
 return JsPromise . create ( new JsPromiseExecutor ( ) { 
 @ Override 
 public void execute ( ) { 
 - String avatarDescriptor = provider . registerUploadFile ( file ) ; 
 + String avatarDescriptor = file ! = null ? provider . registerUploadFile ( file ) : null ; 
 / / noinspection ConstantConditions 
 messenger . createGroup ( title , avatarDescriptor , uids ) . start ( new CommandCallback < Integer > ( ) { 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index b59506e . . 0202f68 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 703 , 6 + 703 , 17 @ @ public class Messenger { 
 } 
 
 / * * 
 + * Hide chat 
 + * 
 + * @ param peer destination peer 
 + * @ return Command for execution 
 + * / 
 + @ ObjectiveCName ( " hideChatCommandWithPeer : " ) 
 + public Command < Boolean > hideChat ( Peer peer ) { 
 + return modules . getMessagesModule ( ) . hideChat ( peer ) ; 
 + } 
 + 
 + / * * 
 * Save message draft 
 * 
 * @ param peer destination peer 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index bfbd171 . . a883a25 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 16 , 6 + 16 , 7 @ @ import im . actor . core . api . ApiPeerType ; 
 import im . actor . core . api . base . SeqUpdate ; 
 import im . actor . core . api . rpc . RequestClearChat ; 
 import im . actor . core . api . rpc . RequestDeleteChat ; 
 + import im . actor . core . api . rpc . RequestHideDialog ; 
 import im . actor . core . api . rpc . ResponseSeq ; 
 import im . actor . core . api . updates . UpdateChatClear ; 
 import im . actor . core . api . updates . UpdateChatDelete ; 
 @ @ - 366 , 7 + 367 , 7 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 @ Override 
 public void start ( final CommandCallback < Boolean > callback ) { 
 ApiOutPeer outPeer ; 
 - final ApiPeer apiPeer ; 
 + final ApiPeer apiPeer = buildApiPeer ( peer ) ; 
 if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; 
 if ( user = = null ) { 
 @ @ - 380 , 8 + 381 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } 
 outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , 
 user . getAccessHash ( ) ) ; 
 - apiPeer = new ApiPeer ( ApiPeerType . PRIVATE , 
 - user . getUid ( ) ) ; 
 } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; 
 if ( group = = null ) { 
 @ @ - 395 , 8 + 394 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } 
 outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , 
 group . getAccessHash ( ) ) ; 
 - apiPeer = new ApiPeer ( ApiPeerType . GROUP , 
 - group . getGroupId ( ) ) ; 
 } else { 
 runOnUiThread ( new Runnable ( ) { 
 @ Override 
 @ @ - 509 , 6 + 506 , 87 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } ; 
 } 
 
 + public Command < Boolean > hideChat ( final Peer peer ) { 
 + return new Command < Boolean > ( ) { 
 + @ Override 
 + public void start ( final CommandCallback < Boolean > callback ) { 
 + ApiOutPeer outPeer ; 
 + final ApiPeer apiPeer ; 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; 
 + if ( user = = null ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , 
 + user . getAccessHash ( ) ) ; 
 + apiPeer = new ApiPeer ( ApiPeerType . PRIVATE , 
 + user . getUid ( ) ) ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; 
 + if ( group = = null ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , 
 + group . getAccessHash ( ) ) ; 
 + apiPeer = new ApiPeer ( ApiPeerType . GROUP , 
 + group . getGroupId ( ) ) ; 
 + } else { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + request ( new RequestHideDialog ( outPeer ) , new RpcCallback < ResponseSeq > ( ) { 
 + @ Override 
 + public void onResult ( ResponseSeq response ) { 
 + / / TODO : Implement ? 
 + / / updates ( ) . onUpdateReceived ( new SeqUpdate ( response . getSeq ( ) , 
 + / / response . getState ( ) , 
 + / / UpdateChatClear . HEADER , 
 + / / new UpdateChatClear ( apiPeer ) . toByteArray ( ) ) ) ; 
 + updates ( ) . executeAfter ( response . getSeq ( ) , 
 + new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onResult ( true ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( final RpcException e ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + } ; 
 + } 
 + 
 public void resetModule ( ) { 
 / / TODO : Implement 
 }
