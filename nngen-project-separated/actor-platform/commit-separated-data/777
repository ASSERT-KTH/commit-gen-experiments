BLEU SCORE: 0.3002490876098761

TEST MSG: feat ( server : messaging ) : auto - archive dialogs only if there are more than 12 of them
GENERATED MSG: fix ( server : messaging ) : don ' t auto - archive favourites

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala < nl > index 30f2c8b . . 6fce2db 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala < nl > @ @ - 63 , 7 + 63 , 8 @ @ private [ user ] final class UserPeer ( userId : Int , extensions : Seq [ ApiExtension ] ) e < nl > private def startArchiving ( ) : Unit = { < nl > for { < nl > dialogs ← dialogExt . fetchGroupedDialogs ( userId ) map ( _ filterNot ( _ . _ 1 = = DialogGroups . Favourites ) flatMap ( _ . _ 2 ) ) < nl > - } self ! ArchiveIfExpired ( dialogs . toList ) < nl > + } if ( dialogs . size > 12 ) < nl > + self ! ArchiveIfExpired ( dialogs . toList ) < nl > } < nl > < nl > private def archiveIfExpired ( dialogs : Seq [ Dialog ] ) : Unit = { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index 871675c . . 1a65f87 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 99 , 7 + 99 , 7 @ @ private trait Members { < nl > < nl > def setMemberJoined ( userId : UserId , isJoined : Boolean = true ) : Unit = < nl > members get userId match { < nl > - case Some ( member ) = > members + = userId → member . copy ( isJoined = isJoined ) < nl > + case Some ( member ) ⇒ members + = userId → member . copy ( isJoined = isJoined ) < nl > case None ⇒ < nl > throw new RuntimeException ( " Attempt to set an unexistent member joined " ) < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala < nl > index 5541e3c . . 2400693 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala < nl > @ @ - 58 , 7 + 58 , 7 @ @ private [ user ] final class UserPeer ( userId : Int , extensions : Seq [ ApiExtension ] ) e < nl > < nl > private def archive ( ) : Unit = { < nl > for { < nl > - dialogs ← dialogExt . getGroupedDialogs ( userId ) map ( _ flatMap ( _ . dialogs ) ) < nl > + dialogs ← dialogExt . getGroupedDialogs ( userId ) map ( _ filterNot ( _ . key = = DialogGroups . Favourites . key ) flatMap ( _ . dialogs ) ) < nl > } yield { < nl > val toArchive = dialogs filter ( d ⇒ d . counter = = 0 & & d . date < = Instant . now ( ) . minus ( Period . ofDays ( 5 ) ) . toEpochMilli ) < nl > for ( dialog ← toArchive ) {

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala 
 index 30f2c8b . . 6fce2db 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala 
 @ @ - 63 , 7 + 63 , 8 @ @ private [ user ] final class UserPeer ( userId : Int , extensions : Seq [ ApiExtension ] ) e 
 private def startArchiving ( ) : Unit = { 
 for { 
 dialogs ← dialogExt . fetchGroupedDialogs ( userId ) map ( _ filterNot ( _ . _ 1 = = DialogGroups . Favourites ) flatMap ( _ . _ 2 ) ) 
 - } self ! ArchiveIfExpired ( dialogs . toList ) 
 + } if ( dialogs . size > 12 ) 
 + self ! ArchiveIfExpired ( dialogs . toList ) 
 } 
 
 private def archiveIfExpired ( dialogs : Seq [ Dialog ] ) : Unit = { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index 871675c . . 1a65f87 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 99 , 7 + 99 , 7 @ @ private trait Members { 
 
 def setMemberJoined ( userId : UserId , isJoined : Boolean = true ) : Unit = 
 members get userId match { 
 - case Some ( member ) = > members + = userId → member . copy ( isJoined = isJoined ) 
 + case Some ( member ) ⇒ members + = userId → member . copy ( isJoined = isJoined ) 
 case None ⇒ 
 throw new RuntimeException ( " Attempt to set an unexistent member joined " ) 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala 
 index 5541e3c . . 2400693 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserPeer . scala 
 @ @ - 58 , 7 + 58 , 7 @ @ private [ user ] final class UserPeer ( userId : Int , extensions : Seq [ ApiExtension ] ) e 
 
 private def archive ( ) : Unit = { 
 for { 
 - dialogs ← dialogExt . getGroupedDialogs ( userId ) map ( _ flatMap ( _ . dialogs ) ) 
 + dialogs ← dialogExt . getGroupedDialogs ( userId ) map ( _ filterNot ( _ . key = = DialogGroups . Favourites . key ) flatMap ( _ . dialogs ) ) 
 } yield { 
 val toArchive = dialogs filter ( d ⇒ d . counter = = 0 & & d . date < = Instant . now ( ) . minus ( Period . ofDays ( 5 ) ) . toEpochMilli ) 
 for ( dialog ← toArchive ) {
