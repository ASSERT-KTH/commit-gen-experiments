BLEU SCORE: 0.2013095485643692

TEST MSG: feat ( server : user ) : AfterCreateHook
GENERATED MSG: fix ( server : hooks ) : fixed afterAuth hook

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > index 1f82de2 . . bd92628 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > @ @ - 100 , 7 + 100 , 10 @ @ private [ user ] trait UserCommandHandlers { < nl > external = external , < nl > isBot = isBot < nl > ) < nl > - db . run ( for ( _ ← p . UserRepo . create ( user ) ) yield CreateAck ( ) ) < nl > + db . run ( for { < nl > + _ ← p . UserRepo . create ( user ) < nl > + _ ← userExt . hooks . afterCreate . runAll ( user . id ) < nl > + } yield CreateAck ( ) ) < nl > } < nl > } else { < nl > replyTo ! Status . Failure ( UserErrors . NicknameTaken ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > index 1be6a52 . . ac266f8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > @ @ - 41 , 6 + 41 , 7 @ @ object UserExtension extends ExtensionId [ UserExtensionImpl ] with ExtensionIdProv < nl > < nl > final class UserHooksControl ( implicit ec : ExecutionContext ) extends HooksControl { < nl > val afterAuth = new HooksStorage3 [ UserHook . AfterAuthHook , Unit , Int , Int , String ] < nl > + val afterCreate = new HooksStorage1 [ UserHook . AfterCreateHook , Unit , Int ] < nl > val beforeEmailContactRegistered = new HooksStorage2 [ UserHook . BeforeEmailContactRegisteredHook , Unit , Int , String ] < nl > } < nl > < nl > @ @ - 50 , 6 + 51 , 10 @ @ object UserHook { < nl > override def run ( userId : Int , appId : Int , deviceTitle : String ) : Future [ Unit ] < nl > } < nl > < nl > + abstract class AfterCreateHook ( system : ActorSystem ) extends Hook1 [ Unit , Int ] { < nl > + override def run ( userId : Int ) : Future [ Unit ] < nl > + } < nl > + < nl > abstract class BeforeEmailContactRegisteredHook ( system : ActorSystem ) extends Hook2 [ Unit , Int , String ] { < nl > def run ( userId : Int , email : String ) : Future [ Unit ] < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > index 70ad046 . . 0efe22b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > @ @ - 16 , 7 + 16 , 7 @ @ import im . actor . server . event . TSEvent < nl > import im . actor . server . file . { Avatar , ImageUtils } < nl > import im . actor . server . history . HistoryUtils < nl > import im . actor . server . models . contact . { UserContact , UserEmailContact , UserPhoneContact } < nl > - import im . actor . server . persist . UserRepo < nl > + import im . actor . server . persist . { AuthSessionRepo , UserRepo } < nl > import im . actor . server . persist . contact . { UserContactRepo , UserEmailContactRepo , UserPhoneContactRepo } < nl > import im . actor . server . sequence . SeqUpdatesManager < nl > import im . actor . server . social . SocialManager . _ < nl > @ @ - 102 , 6 + 102 , 12 @ @ private [ user ] trait UserCommandHandlers { < nl > < nl > protected def addAuth ( user : User , authId : Long ) : Unit = { < nl > persistStashingReply ( TSEvent ( now ( ) , UserEvents . AuthAdded ( authId ) ) , user ) { _ ⇒ < nl > + db . run ( AuthSessionRepo . findByAuthId ( authId ) ) foreach { < nl > + case Some ( authSession ) = > < nl > + userExt . hooks . afterAuth . runAll ( user . id , authSession . appId , authSession . deviceTitle ) < nl > + case None = > log . error ( " AuthSession was not found " ) < nl > + } < nl > + < nl > db . run ( p . AuthIdRepo . setUserData ( authId , user . id ) ) map ( _ ⇒ NewAuthAck ( ) ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > index d225767 . . 56ea7e5 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > @ @ - 31 , 13 + 31 , 13 @ @ object UserExtension extends ExtensionId [ UserExtensionImpl ] with ExtensionIdProv < nl > } < nl > < nl > final class UserHooksControl ( implicit ec : ExecutionContext ) extends HooksControl { < nl > - val afterAuth = new HooksStorage3 [ UserHook . AfterAuth , Int , Int , String ] < nl > + val afterAuth = new HooksStorage3 [ UserHook . AfterAuthHook , Int , Int , String ] < nl > val beforeEmailContactRegistered = new HooksStorage2 [ UserHook . BeforeEmailContactRegisteredHook , Int , String ] < nl > } < nl > < nl > object UserHook { < nl > < nl > - abstract class AfterAuth ( system : ActorSystem ) extends Hook3 [ Int , Int , String ] { < nl > + abstract class AfterAuthHook ( system : ActorSystem ) extends Hook3 [ Int , Int , String ] { < nl > override def run ( userId : Int , appId : Int , deviceTitle : String ) : Future [ Unit ] < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 index 1f82de2 . . bd92628 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 @ @ - 100 , 7 + 100 , 10 @ @ private [ user ] trait UserCommandHandlers { 
 external = external , 
 isBot = isBot 
 ) 
 - db . run ( for ( _ ← p . UserRepo . create ( user ) ) yield CreateAck ( ) ) 
 + db . run ( for { 
 + _ ← p . UserRepo . create ( user ) 
 + _ ← userExt . hooks . afterCreate . runAll ( user . id ) 
 + } yield CreateAck ( ) ) 
 } 
 } else { 
 replyTo ! Status . Failure ( UserErrors . NicknameTaken ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 index 1be6a52 . . ac266f8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 @ @ - 41 , 6 + 41 , 7 @ @ object UserExtension extends ExtensionId [ UserExtensionImpl ] with ExtensionIdProv 
 
 final class UserHooksControl ( implicit ec : ExecutionContext ) extends HooksControl { 
 val afterAuth = new HooksStorage3 [ UserHook . AfterAuthHook , Unit , Int , Int , String ] 
 + val afterCreate = new HooksStorage1 [ UserHook . AfterCreateHook , Unit , Int ] 
 val beforeEmailContactRegistered = new HooksStorage2 [ UserHook . BeforeEmailContactRegisteredHook , Unit , Int , String ] 
 } 
 
 @ @ - 50 , 6 + 51 , 10 @ @ object UserHook { 
 override def run ( userId : Int , appId : Int , deviceTitle : String ) : Future [ Unit ] 
 } 
 
 + abstract class AfterCreateHook ( system : ActorSystem ) extends Hook1 [ Unit , Int ] { 
 + override def run ( userId : Int ) : Future [ Unit ] 
 + } 
 + 
 abstract class BeforeEmailContactRegisteredHook ( system : ActorSystem ) extends Hook2 [ Unit , Int , String ] { 
 def run ( userId : Int , email : String ) : Future [ Unit ] 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 index 70ad046 . . 0efe22b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 @ @ - 16 , 7 + 16 , 7 @ @ import im . actor . server . event . TSEvent 
 import im . actor . server . file . { Avatar , ImageUtils } 
 import im . actor . server . history . HistoryUtils 
 import im . actor . server . models . contact . { UserContact , UserEmailContact , UserPhoneContact } 
 - import im . actor . server . persist . UserRepo 
 + import im . actor . server . persist . { AuthSessionRepo , UserRepo } 
 import im . actor . server . persist . contact . { UserContactRepo , UserEmailContactRepo , UserPhoneContactRepo } 
 import im . actor . server . sequence . SeqUpdatesManager 
 import im . actor . server . social . SocialManager . _ 
 @ @ - 102 , 6 + 102 , 12 @ @ private [ user ] trait UserCommandHandlers { 
 
 protected def addAuth ( user : User , authId : Long ) : Unit = { 
 persistStashingReply ( TSEvent ( now ( ) , UserEvents . AuthAdded ( authId ) ) , user ) { _ ⇒ 
 + db . run ( AuthSessionRepo . findByAuthId ( authId ) ) foreach { 
 + case Some ( authSession ) = > 
 + userExt . hooks . afterAuth . runAll ( user . id , authSession . appId , authSession . deviceTitle ) 
 + case None = > log . error ( " AuthSession was not found " ) 
 + } 
 + 
 db . run ( p . AuthIdRepo . setUserData ( authId , user . id ) ) map ( _ ⇒ NewAuthAck ( ) ) 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 index d225767 . . 56ea7e5 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 @ @ - 31 , 13 + 31 , 13 @ @ object UserExtension extends ExtensionId [ UserExtensionImpl ] with ExtensionIdProv 
 } 
 
 final class UserHooksControl ( implicit ec : ExecutionContext ) extends HooksControl { 
 - val afterAuth = new HooksStorage3 [ UserHook . AfterAuth , Int , Int , String ] 
 + val afterAuth = new HooksStorage3 [ UserHook . AfterAuthHook , Int , Int , String ] 
 val beforeEmailContactRegistered = new HooksStorage2 [ UserHook . BeforeEmailContactRegisteredHook , Int , String ] 
 } 
 
 object UserHook { 
 
 - abstract class AfterAuth ( system : ActorSystem ) extends Hook3 [ Int , Int , String ] { 
 + abstract class AfterAuthHook ( system : ActorSystem ) extends Hook3 [ Int , Int , String ] { 
 override def run ( userId : Int , appId : Int , deviceTitle : String ) : Future [ Unit ] 
 }
