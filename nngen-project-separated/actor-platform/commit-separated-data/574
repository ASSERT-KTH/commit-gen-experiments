BLEU SCORE: 0.09980099403873663

TEST MSG: fix ( android ) : own messages update read state
GENERATED MSG: feat ( core ) : New message read algorithm

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java < nl > index 8e83214 . . a362497 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java < nl > @ @ - 206 , 17 + 206 , 18 @ @ public class ConversationActor extends ModuleActor { < nl > outPendingIndex . put ( m . getRid ( ) , m . getDate ( ) ) ; < nl > } < nl > } else { < nl > - if ( m . getSortDate ( ) > state . getInMaxMessageDate ( ) ) { < nl > - state = state . changeInMaxDate ( m . getSortDate ( ) ) ; < nl > - conversationState . addOrUpdateItem ( state ) ; < nl > - } < nl > - < nl > / / Detecting if message already read < nl > if ( m . getSortDate ( ) > state . getInReadDate ( ) ) { < nl > / / Writing to income unread storage < nl > inPendingIndex . put ( m . getRid ( ) , m . getDate ( ) ) ; < nl > } < nl > } < nl > + < nl > + if ( m . getSortDate ( ) > state . getInMaxMessageDate ( ) ) { < nl > + state = state . changeInMaxDate ( m . getSortDate ( ) ) ; < nl > + conversationState . addOrUpdateItem ( state ) ; < nl > + } < nl > + < nl > } < nl > < nl > / / Reading messages < nl > @ @ - 273 , 11 + 274 , 6 @ @ public class ConversationActor extends ModuleActor { < nl > outPendingIndex . put ( message . getRid ( ) , message . getDate ( ) ) ; < nl > } < nl > } else { < nl > - if ( message . getSortDate ( ) > state . getInMaxMessageDate ( ) ) { < nl > - state = state . changeInMaxDate ( message . getSortDate ( ) ) ; < nl > - conversationState . addOrUpdateItem ( state ) ; < nl > - } < nl > - < nl > / / Detecting if message already read < nl > if ( message . getSortDate ( ) > state . getInReadDate ( ) ) { < nl > / / Writing to income unread storage < nl > @ @ - 285 , 6 + 281 , 12 @ @ public class ConversationActor extends ModuleActor { < nl > } < nl > } < nl > < nl > + if ( message . getSortDate ( ) > state . getInMaxMessageDate ( ) ) { < nl > + state = state . changeInMaxDate ( message . getSortDate ( ) ) ; < nl > + conversationState . addOrUpdateItem ( state ) ; < nl > + } < nl > + < nl > + < nl > if ( isConversationAutoRead ( ) ) { < nl > checkReadState ( false ) ; < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java < nl > index 0aeaf46 . . 5997ca8 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java < nl > @ @ - 38 , 7 + 38 , 7 @ @ public class JsIdleModule extends AbsModule { < nl > } < nl > < nl > public void onVisible ( ) { < nl > - idleActor . send ( new IdleActor . OnHidden ( ) ) ; < nl > + idleActor . send ( new IdleActor . OnVisible ( ) ) ; < nl > } < nl > < nl > private static class IdleActor extends ModuleActor implements JsIdleCallback { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 96b0a87 . . 93f26b3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 375 , 27 + 375 , 27 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } < nl > < nl > public void onMessageShown ( final Peer peer , final int sender , final long sortDate ) { < nl > - if ( ! context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . getIsAppVisible ( ) . get ( ) ) { < nl > - return ; < nl > - } < nl > - im . actor . runtime . Runtime . dispatch ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - if ( sender ! = myUid ( ) ) { < nl > - if ( ! messageShownFilter . containsKey ( peer ) ) { < nl > - messageShownFilter . put ( peer , system ( ) . actorOf ( Props . create ( MessageShownFilter . class , new ActorCreator < MessageShownFilter > ( ) { < nl > - @ Override < nl > - public MessageShownFilter create ( ) { < nl > - return new MessageShownFilter ( ) ; < nl > - } < nl > - } ) , " actor / shown _ filter _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ) ; < nl > - } < nl > - < nl > - messageShownFilter . get ( peer ) . send ( new BounceFilterActor . Message ( new MessageShownEvent ( peer , sortDate ) , < nl > - messageShownActor ) ) ; < nl > - } < nl > - } < nl > - } ) ; < nl > + / / if ( ! context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . getIsAppVisible ( ) . get ( ) ) { < nl > + / / return ; < nl > + / / } < nl > + / / im . actor . runtime . Runtime . dispatch ( new Runnable ( ) { < nl > + / / @ Override < nl > + / / public void run ( ) { < nl > + / / if ( sender ! = myUid ( ) ) { < nl > + / / if ( ! messageShownFilter . containsKey ( peer ) ) { < nl > + / / messageShownFilter . put ( peer , system ( ) . actorOf ( Props . create ( MessageShownFilter . class , new ActorCreator < MessageShownFilter > ( ) { < nl > + / / @ Override < nl > + / / public MessageShownFilter create ( ) { < nl > + / / return new MessageShownFilter ( ) ; < nl > + / / } < nl > + / / } ) , " actor / shown _ filter _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ) ; < nl > + / / } < nl > + / / < nl > + / / messageShownFilter . get ( peer ) . send ( new BounceFilterActor . Message ( new MessageShownEvent ( peer , sortDate ) , < nl > + / / messageShownActor ) ) ; < nl > + / / } < nl > + / / } < nl > + / / } ) ; < nl > } < nl > < nl > public void saveReadState ( Peer peer , long lastReadDate ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > index 460bd6f . . 79cb7d0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > @ @ - 17 , 10 + 17 , 12 @ @ import im . actor . core . entity . content . DocumentContent ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . events . AppVisibleChanged ; < nl > import im . actor . core . modules . utils . ModuleActor ; < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . annotations . Verified ; < nl > import im . actor . runtime . eventbus . Event ; < nl > + import im . actor . runtime . storage . IndexEngine ; < nl > import im . actor . runtime . storage . IndexStorage ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > < nl > @ @ - 36 , 6 + 38 , 7 @ @ import im . actor . runtime . storage . ListEngine ; < nl > public class ConversationActor extends ModuleActor { < nl > < nl > private final String IN _ READ _ STATE _ PREF ; < nl > + private final String IN _ READ _ STATE _ NEW _ PREF ; < nl > private final String OUT _ READ _ STATE _ PREF ; < nl > private final String OUT _ RECEIVE _ STATE _ PREF ; < nl > < nl > @ @ - 48 , 9 + 51 , 12 @ @ public class ConversationActor extends ModuleActor { < nl > private IndexStorage inPendingIndex ; < nl > private ActorRef dialogsActor ; < nl > private ActorRef dialogsGroupedActor ; < nl > + private ActorRef readerActor ; < nl > + private long inReadStateNew ; < nl > private long inReadState ; < nl > private long outReadState ; < nl > private long outReceiveState ; < nl > + < nl > private boolean isConversationVisible = false ; < nl > private boolean isAppVisible = false ; < nl > < nl > @ @ - 58 , 6 + 64 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > super ( context ) ; < nl > this . peer = peer ; < nl > this . IN _ READ _ STATE _ PREF = " chat _ state . " + peer + " . in _ read " ; < nl > + this . IN _ READ _ STATE _ NEW _ PREF = " chat _ state . " + peer + " . in _ read _ new " ; < nl > this . OUT _ READ _ STATE _ PREF = " chat _ state . " + peer + " . out _ read " ; < nl > this . OUT _ RECEIVE _ STATE _ PREF = " chat _ state . " + peer + " . out _ receive " ; < nl > } < nl > @ @ - 66 , 13 + 73 , 15 @ @ public class ConversationActor extends ModuleActor { < nl > public void preStart ( ) { < nl > messages = context ( ) . getMessagesModule ( ) . getConversationEngine ( peer ) ; < nl > docs = context ( ) . getMessagesModule ( ) . getConversationDocsEngine ( peer ) ; < nl > + readerActor = context ( ) . getMessagesModule ( ) . getOwnReadActor ( ) ; < nl > < nl > dialogsActor = context ( ) . getMessagesModule ( ) . getDialogsActor ( ) ; < nl > dialogsGroupedActor = context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) ; < nl > - outPendingIndex = Storage . createIndex ( " out _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ; < nl > - inPendingIndex = Storage . createIndex ( " in _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ; < nl > + outPendingIndex = new IndexEngine ( Storage . createIndex ( " out _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ) ; < nl > + inPendingIndex = new IndexEngine ( Storage . createIndex ( " in _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ) ; < nl > < nl > inReadState = context ( ) . getPreferences ( ) . getLong ( IN _ READ _ STATE _ PREF , 0 ) ; < nl > + inReadStateNew = context ( ) . getPreferences ( ) . getLong ( IN _ READ _ STATE _ NEW _ PREF , 0 ) ; < nl > outReadState = context ( ) . getPreferences ( ) . getLong ( OUT _ READ _ STATE _ PREF , 0 ) ; < nl > outReceiveState = context ( ) . getPreferences ( ) . getLong ( OUT _ RECEIVE _ STATE _ PREF , 0 ) ; < nl > < nl > @ @ - 86 , 26 + 95 , 30 @ @ public class ConversationActor extends ModuleActor { < nl > / / Visibility state < nl > < nl > private void onConversationVisible ( ) { < nl > + / / Log . d ( " ConversationActor " , " onConversationVisible " ) ; < nl > isConversationVisible = true ; < nl > < nl > if ( isConversationAutoRead ( ) ) { < nl > - checkReadState ( ) ; < nl > + checkReadState ( true ) ; < nl > } < nl > } < nl > < nl > private void onConversationHidden ( ) { < nl > + / / Log . d ( " ConversationActor " , " onConversationHidden " ) ; < nl > isConversationVisible = false ; < nl > } < nl > < nl > private void onAppVisible ( ) { < nl > + / / Log . d ( " ConversationActor " , " onAppVisible " ) ; < nl > isAppVisible = true ; < nl > < nl > if ( isConversationAutoRead ( ) ) { < nl > - checkReadState ( ) ; < nl > + checkReadState ( true ) ; < nl > } < nl > } < nl > < nl > private void onAppHidden ( ) { < nl > + / / Log . d ( " ConversationActor " , " onAppHidden " ) ; < nl > isAppVisible = false ; < nl > } < nl > < nl > @ @ - 113 , 9 + 126 , 6 @ @ public class ConversationActor extends ModuleActor { < nl > return isAppVisible & & isConversationVisible ; < nl > } < nl > < nl > - private void checkReadState ( ) { < nl > - < nl > - } < nl > < nl > / / Messages receive / update < nl > < nl > @ @ - 167 , 6 + 177 , 11 @ @ public class ConversationActor extends ModuleActor { < nl > outPendingIndex . put ( m . getRid ( ) , m . getDate ( ) ) ; < nl > } < nl > } else { < nl > + if ( m . getSortDate ( ) > inReadStateNew ) { < nl > + inReadStateNew = m . getSortDate ( ) ; < nl > + preferences ( ) . putLong ( IN _ READ _ STATE _ NEW _ PREF , inReadStateNew ) ; < nl > + } < nl > + < nl > / / Detecting if message already read < nl > if ( m . getSortDate ( ) > inReadState ) { < nl > / / Writing to income unread storage < nl > @ @ - 175 , 8 + 190 , 14 @ @ public class ConversationActor extends ModuleActor { < nl > } < nl > } < nl > < nl > + / / Reading messages < nl > + if ( isConversationAutoRead ( ) ) { < nl > + checkReadState ( false ) ; < nl > + } < nl > + < nl > / / Update dialogs < nl > if ( topMessage ! = null ) { < nl > + < nl > if ( ! isHiddenPeer ) { < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , topMessage , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > @ @ - 214 , 12 + 235 , 18 @ @ public class ConversationActor extends ModuleActor { < nl > < nl > / / Updating dialog if on server < nl > if ( message . isOnServer ( ) ) { < nl > + < nl > if ( message . getSenderId ( ) = = myUid ( ) ) { < nl > / / Adding to unread index if message is unread < nl > if ( message . isOnServer ( ) & & message . getMessageState ( ) ! = MessageState . READ ) { < nl > outPendingIndex . put ( message . getRid ( ) , message . getDate ( ) ) ; < nl > } < nl > } else { < nl > + if ( message . getSortDate ( ) > inReadStateNew ) { < nl > + inReadStateNew = message . getSortDate ( ) ; < nl > + preferences ( ) . putLong ( IN _ READ _ STATE _ NEW _ PREF , inReadStateNew ) ; < nl > + } < nl > + < nl > / / Detecting if message already read < nl > if ( message . getSortDate ( ) > inReadState ) { < nl > / / Writing to income unread storage < nl > @ @ - 227 , 6 + 254 , 10 @ @ public class ConversationActor extends ModuleActor { < nl > } < nl > } < nl > < nl > + if ( isConversationAutoRead ( ) ) { < nl > + checkReadState ( false ) ; < nl > + } < nl > + < nl > if ( ! isHiddenPeer ) { < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , message , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > @ @ - 421 , 7 + 452 , 9 @ @ public class ConversationActor extends ModuleActor { < nl > return ; < nl > } < nl > inReadState = date ; < nl > + inReadStateNew = Math . max ( date , inReadStateNew ) ; < nl > preferences ( ) . putLong ( IN _ READ _ STATE _ PREF , date ) ; < nl > + preferences ( ) . putLong ( IN _ READ _ STATE _ NEW _ PREF , inReadStateNew ) ; < nl > < nl > inPendingIndex . removeBeforeValue ( date ) ; < nl > < nl > @ @ - 431 , 6 + 464 , 24 @ @ public class ConversationActor extends ModuleActor { < nl > dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > < nl > + private void checkReadState ( boolean updateDialogs ) { < nl > + / / Log . d ( " ConversationActor " , " checkReadState " ) ; < nl > + if ( inReadStateNew > inReadState ) { < nl > + / / Log . d ( " ConversationActor " , " reading " ) ; < nl > + inReadState = inReadStateNew ; < nl > + preferences ( ) . putLong ( IN _ READ _ STATE _ PREF , inReadState ) ; < nl > + boolean wasNotNull = inPendingIndex . getCount ( ) ! = 0 ; < nl > + inPendingIndex . clear ( ) ; < nl > + readerActor . send ( new OwnReadActor . MessageRead ( peer , inReadState ) ) ; < nl > + if ( wasNotNull & & updateDialogs ) { < nl > + if ( ! isHiddenPeer ) { < nl > + dialogsActor . send ( new DialogsActor . CounterChanged ( peer , 0 ) ) ; < nl > + } < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , 0 ) ) ; < nl > + } < nl > + } < nl > + } < nl > + < nl > / / Deletions < nl > < nl > @ Verified < nl > @ @ - 460 , 7 + 511 , 10 @ @ public class ConversationActor extends ModuleActor { < nl > inPendingIndex . clear ( ) ; < nl > outPendingIndex . clear ( ) ; < nl > dialogsActor . send ( new DialogsActor . ChatClear ( peer ) ) ; < nl > - / / TODO : Implement for grouped < nl > + inReadStateNew = 0 ; < nl > + inReadState = 0 ; < nl > + preferences ( ) . putLong ( IN _ READ _ STATE _ PREF , inReadState ) ; < nl > + preferences ( ) . putLong ( IN _ READ _ STATE _ NEW _ PREF , inReadStateNew ) ; < nl > } < nl > < nl > @ Verified < nl > @ @ - 470 , 7 + 524 , 10 @ @ public class ConversationActor extends ModuleActor { < nl > inPendingIndex . clear ( ) ; < nl > outPendingIndex . clear ( ) ; < nl > dialogsActor . send ( new DialogsActor . ChatDelete ( peer ) ) ; < nl > - / / TODO : Implement for grouped < nl > + inReadStateNew = 0 ; < nl > + inReadState = 0 ; < nl > + preferences ( ) . putLong ( IN _ READ _ STATE _ PREF , inReadState ) ; < nl > + preferences ( ) . putLong ( IN _ READ _ STATE _ NEW _ PREF , inReadStateNew ) ; < nl > } < nl > < nl > / / History < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / OwnPresenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / OwnPresenceActor . java < nl > index 352a7b4 . . 87bade1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / OwnPresenceActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / OwnPresenceActor . java < nl > @ @ - 36 , 7 + 36 , 7 @ @ public class OwnPresenceActor extends ModuleActor implements BusSubscriber { < nl > public void preStart ( ) { < nl > / / isAlwaysOnline = config ( ) . getDeviceCategory ( ) = = DeviceCategory . DESKTOP ; < nl > isAlwaysOnline = false ; < nl > - < nl > + < nl > if ( isAlwaysOnline ) { < nl > self ( ) . sendOnce ( new PerformOnline ( ) ) ; < nl > } else { < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / websocket / WebSocketConnection . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / websocket / WebSocketConnection . java < nl > index 70d55c4 . . 37c8a37 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / websocket / WebSocketConnection . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / websocket / WebSocketConnection . java < nl > @ @ - 29 , 7 + 29 , 7 @ @ public class WebSocketConnection extends AsyncConnection { < nl > < nl > @ Override < nl > public void doConnect ( ) { < nl > - Log . d ( TAG , " doConnect " ) ; < nl > + / / Log . d ( TAG , " doConnect " ) ; < nl > < nl > isClosed = true ; < nl > < nl > @ @ - 46 , 7 + 46 , 7 @ @ public class WebSocketConnection extends AsyncConnection { < nl > < nl > @ Override < nl > public void doSend ( byte [ ] data ) { < nl > - Log . d ( TAG , " doSend " ) ; < nl > + / / Log . d ( TAG , " doSend " ) ; < nl > if ( isClosed ) { < nl > return ; < nl > } < nl > @ @ - 59 , 13 + 59 , 13 @ @ public class WebSocketConnection extends AsyncConnection { < nl > < nl > @ Override < nl > public void doClose ( ) { < nl > - Log . d ( TAG , " doClose " ) ; < nl > + / / Log . d ( TAG , " doClose " ) ; < nl > isClosed = true ; < nl > close ( ) ; < nl > } < nl > < nl > private void onRawMessage ( ArrayBuffer message ) { < nl > - Log . d ( TAG , " onRawMessage " ) ; < nl > + / / Log . d ( TAG , " onRawMessage " ) ; < nl > if ( isClosed ) { < nl > return ; < nl > } < nl > @ @ - 73 , 13 + 73 , 13 @ @ public class WebSocketConnection extends AsyncConnection { < nl > } < nl > < nl > private void onRawConnected ( ) { < nl > - Log . d ( TAG , " onRawConnected " ) ; < nl > + / / Log . d ( TAG , " onRawConnected " ) ; < nl > isClosed = false ; < nl > onConnected ( ) ; < nl > } < nl > < nl > private void onRawClosed ( ) { < nl > - Log . d ( TAG , " onRawClosed " ) ; < nl > + / / Log . d ( TAG , " onRawClosed " ) ; < nl > isClosed = true ; < nl > onClosed ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / storage / IndexEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / storage / IndexEngine . java < nl > new file mode 100644 < nl > index 0000000 . . 33f7c0e < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / storage / IndexEngine . java < nl > @ @ - 0 , 0 + 1 , 62 @ @ < nl > + package im . actor . runtime . storage ; < nl > + < nl > + import java . util . List ; < nl > + < nl > + public class IndexEngine implements IndexStorage { < nl > + < nl > + private IndexStorage storage ; < nl > + < nl > + public IndexEngine ( IndexStorage storage ) { < nl > + this . storage = storage ; < nl > + } < nl > + < nl > + @ Override < nl > + public void put ( long key , long value ) { < nl > + storage . put ( key , value ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public Long get ( long key ) { < nl > + return storage . get ( key ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public List < Long > findBeforeValue ( long value ) { < nl > + return storage . findBeforeValue ( value ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public List < Long > removeBeforeValue ( long value ) { < nl > + return storage . removeBeforeValue ( value ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public Long loadTop ( ) { < nl > + return storage . loadTop ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public Long loadBottom ( ) { < nl > + return storage . loadBottom ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void remove ( long key ) { < nl > + storage . remove ( key ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void remove ( List < Long > keys ) { < nl > + storage . remove ( keys ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public int getCount ( ) { < nl > + return storage . getCount ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void clear ( ) { < nl > + storage . clear ( ) ; < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java 
 index 8e83214 . . a362497 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java 
 @ @ - 206 , 17 + 206 , 18 @ @ public class ConversationActor extends ModuleActor { 
 outPendingIndex . put ( m . getRid ( ) , m . getDate ( ) ) ; 
 } 
 } else { 
 - if ( m . getSortDate ( ) > state . getInMaxMessageDate ( ) ) { 
 - state = state . changeInMaxDate ( m . getSortDate ( ) ) ; 
 - conversationState . addOrUpdateItem ( state ) ; 
 - } 
 - 
 / / Detecting if message already read 
 if ( m . getSortDate ( ) > state . getInReadDate ( ) ) { 
 / / Writing to income unread storage 
 inPendingIndex . put ( m . getRid ( ) , m . getDate ( ) ) ; 
 } 
 } 
 + 
 + if ( m . getSortDate ( ) > state . getInMaxMessageDate ( ) ) { 
 + state = state . changeInMaxDate ( m . getSortDate ( ) ) ; 
 + conversationState . addOrUpdateItem ( state ) ; 
 + } 
 + 
 } 
 
 / / Reading messages 
 @ @ - 273 , 11 + 274 , 6 @ @ public class ConversationActor extends ModuleActor { 
 outPendingIndex . put ( message . getRid ( ) , message . getDate ( ) ) ; 
 } 
 } else { 
 - if ( message . getSortDate ( ) > state . getInMaxMessageDate ( ) ) { 
 - state = state . changeInMaxDate ( message . getSortDate ( ) ) ; 
 - conversationState . addOrUpdateItem ( state ) ; 
 - } 
 - 
 / / Detecting if message already read 
 if ( message . getSortDate ( ) > state . getInReadDate ( ) ) { 
 / / Writing to income unread storage 
 @ @ - 285 , 6 + 281 , 12 @ @ public class ConversationActor extends ModuleActor { 
 } 
 } 
 
 + if ( message . getSortDate ( ) > state . getInMaxMessageDate ( ) ) { 
 + state = state . changeInMaxDate ( message . getSortDate ( ) ) ; 
 + conversationState . addOrUpdateItem ( state ) ; 
 + } 
 + 
 + 
 if ( isConversationAutoRead ( ) ) { 
 checkReadState ( false ) ; 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java 
 index 0aeaf46 . . 5997ca8 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java 
 @ @ - 38 , 7 + 38 , 7 @ @ public class JsIdleModule extends AbsModule { 
 } 
 
 public void onVisible ( ) { 
 - idleActor . send ( new IdleActor . OnHidden ( ) ) ; 
 + idleActor . send ( new IdleActor . OnVisible ( ) ) ; 
 } 
 
 private static class IdleActor extends ModuleActor implements JsIdleCallback { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 96b0a87 . . 93f26b3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 375 , 27 + 375 , 27 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } 
 
 public void onMessageShown ( final Peer peer , final int sender , final long sortDate ) { 
 - if ( ! context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . getIsAppVisible ( ) . get ( ) ) { 
 - return ; 
 - } 
 - im . actor . runtime . Runtime . dispatch ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - if ( sender ! = myUid ( ) ) { 
 - if ( ! messageShownFilter . containsKey ( peer ) ) { 
 - messageShownFilter . put ( peer , system ( ) . actorOf ( Props . create ( MessageShownFilter . class , new ActorCreator < MessageShownFilter > ( ) { 
 - @ Override 
 - public MessageShownFilter create ( ) { 
 - return new MessageShownFilter ( ) ; 
 - } 
 - } ) , " actor / shown _ filter _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ) ; 
 - } 
 - 
 - messageShownFilter . get ( peer ) . send ( new BounceFilterActor . Message ( new MessageShownEvent ( peer , sortDate ) , 
 - messageShownActor ) ) ; 
 - } 
 - } 
 - } ) ; 
 + / / if ( ! context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . getIsAppVisible ( ) . get ( ) ) { 
 + / / return ; 
 + / / } 
 + / / im . actor . runtime . Runtime . dispatch ( new Runnable ( ) { 
 + / / @ Override 
 + / / public void run ( ) { 
 + / / if ( sender ! = myUid ( ) ) { 
 + / / if ( ! messageShownFilter . containsKey ( peer ) ) { 
 + / / messageShownFilter . put ( peer , system ( ) . actorOf ( Props . create ( MessageShownFilter . class , new ActorCreator < MessageShownFilter > ( ) { 
 + / / @ Override 
 + / / public MessageShownFilter create ( ) { 
 + / / return new MessageShownFilter ( ) ; 
 + / / } 
 + / / } ) , " actor / shown _ filter _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ) ; 
 + / / } 
 + / / 
 + / / messageShownFilter . get ( peer ) . send ( new BounceFilterActor . Message ( new MessageShownEvent ( peer , sortDate ) , 
 + / / messageShownActor ) ) ; 
 + / / } 
 + / / } 
 + / / } ) ; 
 } 
 
 public void saveReadState ( Peer peer , long lastReadDate ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 index 460bd6f . . 79cb7d0 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 @ @ - 17 , 10 + 17 , 12 @ @ import im . actor . core . entity . content . DocumentContent ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . events . AppVisibleChanged ; 
 import im . actor . core . modules . utils . ModuleActor ; 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . annotations . Verified ; 
 import im . actor . runtime . eventbus . Event ; 
 + import im . actor . runtime . storage . IndexEngine ; 
 import im . actor . runtime . storage . IndexStorage ; 
 import im . actor . runtime . storage . ListEngine ; 
 
 @ @ - 36 , 6 + 38 , 7 @ @ import im . actor . runtime . storage . ListEngine ; 
 public class ConversationActor extends ModuleActor { 
 
 private final String IN _ READ _ STATE _ PREF ; 
 + private final String IN _ READ _ STATE _ NEW _ PREF ; 
 private final String OUT _ READ _ STATE _ PREF ; 
 private final String OUT _ RECEIVE _ STATE _ PREF ; 
 
 @ @ - 48 , 9 + 51 , 12 @ @ public class ConversationActor extends ModuleActor { 
 private IndexStorage inPendingIndex ; 
 private ActorRef dialogsActor ; 
 private ActorRef dialogsGroupedActor ; 
 + private ActorRef readerActor ; 
 + private long inReadStateNew ; 
 private long inReadState ; 
 private long outReadState ; 
 private long outReceiveState ; 
 + 
 private boolean isConversationVisible = false ; 
 private boolean isAppVisible = false ; 
 
 @ @ - 58 , 6 + 64 , 7 @ @ public class ConversationActor extends ModuleActor { 
 super ( context ) ; 
 this . peer = peer ; 
 this . IN _ READ _ STATE _ PREF = " chat _ state . " + peer + " . in _ read " ; 
 + this . IN _ READ _ STATE _ NEW _ PREF = " chat _ state . " + peer + " . in _ read _ new " ; 
 this . OUT _ READ _ STATE _ PREF = " chat _ state . " + peer + " . out _ read " ; 
 this . OUT _ RECEIVE _ STATE _ PREF = " chat _ state . " + peer + " . out _ receive " ; 
 } 
 @ @ - 66 , 13 + 73 , 15 @ @ public class ConversationActor extends ModuleActor { 
 public void preStart ( ) { 
 messages = context ( ) . getMessagesModule ( ) . getConversationEngine ( peer ) ; 
 docs = context ( ) . getMessagesModule ( ) . getConversationDocsEngine ( peer ) ; 
 + readerActor = context ( ) . getMessagesModule ( ) . getOwnReadActor ( ) ; 
 
 dialogsActor = context ( ) . getMessagesModule ( ) . getDialogsActor ( ) ; 
 dialogsGroupedActor = context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) ; 
 - outPendingIndex = Storage . createIndex ( " out _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ; 
 - inPendingIndex = Storage . createIndex ( " in _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ; 
 + outPendingIndex = new IndexEngine ( Storage . createIndex ( " out _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ) ; 
 + inPendingIndex = new IndexEngine ( Storage . createIndex ( " in _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ) ; 
 
 inReadState = context ( ) . getPreferences ( ) . getLong ( IN _ READ _ STATE _ PREF , 0 ) ; 
 + inReadStateNew = context ( ) . getPreferences ( ) . getLong ( IN _ READ _ STATE _ NEW _ PREF , 0 ) ; 
 outReadState = context ( ) . getPreferences ( ) . getLong ( OUT _ READ _ STATE _ PREF , 0 ) ; 
 outReceiveState = context ( ) . getPreferences ( ) . getLong ( OUT _ RECEIVE _ STATE _ PREF , 0 ) ; 
 
 @ @ - 86 , 26 + 95 , 30 @ @ public class ConversationActor extends ModuleActor { 
 / / Visibility state 
 
 private void onConversationVisible ( ) { 
 + / / Log . d ( " ConversationActor " , " onConversationVisible " ) ; 
 isConversationVisible = true ; 
 
 if ( isConversationAutoRead ( ) ) { 
 - checkReadState ( ) ; 
 + checkReadState ( true ) ; 
 } 
 } 
 
 private void onConversationHidden ( ) { 
 + / / Log . d ( " ConversationActor " , " onConversationHidden " ) ; 
 isConversationVisible = false ; 
 } 
 
 private void onAppVisible ( ) { 
 + / / Log . d ( " ConversationActor " , " onAppVisible " ) ; 
 isAppVisible = true ; 
 
 if ( isConversationAutoRead ( ) ) { 
 - checkReadState ( ) ; 
 + checkReadState ( true ) ; 
 } 
 } 
 
 private void onAppHidden ( ) { 
 + / / Log . d ( " ConversationActor " , " onAppHidden " ) ; 
 isAppVisible = false ; 
 } 
 
 @ @ - 113 , 9 + 126 , 6 @ @ public class ConversationActor extends ModuleActor { 
 return isAppVisible & & isConversationVisible ; 
 } 
 
 - private void checkReadState ( ) { 
 - 
 - } 
 
 / / Messages receive / update 
 
 @ @ - 167 , 6 + 177 , 11 @ @ public class ConversationActor extends ModuleActor { 
 outPendingIndex . put ( m . getRid ( ) , m . getDate ( ) ) ; 
 } 
 } else { 
 + if ( m . getSortDate ( ) > inReadStateNew ) { 
 + inReadStateNew = m . getSortDate ( ) ; 
 + preferences ( ) . putLong ( IN _ READ _ STATE _ NEW _ PREF , inReadStateNew ) ; 
 + } 
 + 
 / / Detecting if message already read 
 if ( m . getSortDate ( ) > inReadState ) { 
 / / Writing to income unread storage 
 @ @ - 175 , 8 + 190 , 14 @ @ public class ConversationActor extends ModuleActor { 
 } 
 } 
 
 + / / Reading messages 
 + if ( isConversationAutoRead ( ) ) { 
 + checkReadState ( false ) ; 
 + } 
 + 
 / / Update dialogs 
 if ( topMessage ! = null ) { 
 + 
 if ( ! isHiddenPeer ) { 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , topMessage , inPendingIndex . getCount ( ) ) ) ; 
 } 
 @ @ - 214 , 12 + 235 , 18 @ @ public class ConversationActor extends ModuleActor { 
 
 / / Updating dialog if on server 
 if ( message . isOnServer ( ) ) { 
 + 
 if ( message . getSenderId ( ) = = myUid ( ) ) { 
 / / Adding to unread index if message is unread 
 if ( message . isOnServer ( ) & & message . getMessageState ( ) ! = MessageState . READ ) { 
 outPendingIndex . put ( message . getRid ( ) , message . getDate ( ) ) ; 
 } 
 } else { 
 + if ( message . getSortDate ( ) > inReadStateNew ) { 
 + inReadStateNew = message . getSortDate ( ) ; 
 + preferences ( ) . putLong ( IN _ READ _ STATE _ NEW _ PREF , inReadStateNew ) ; 
 + } 
 + 
 / / Detecting if message already read 
 if ( message . getSortDate ( ) > inReadState ) { 
 / / Writing to income unread storage 
 @ @ - 227 , 6 + 254 , 10 @ @ public class ConversationActor extends ModuleActor { 
 } 
 } 
 
 + if ( isConversationAutoRead ( ) ) { 
 + checkReadState ( false ) ; 
 + } 
 + 
 if ( ! isHiddenPeer ) { 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , message , inPendingIndex . getCount ( ) ) ) ; 
 } 
 @ @ - 421 , 7 + 452 , 9 @ @ public class ConversationActor extends ModuleActor { 
 return ; 
 } 
 inReadState = date ; 
 + inReadStateNew = Math . max ( date , inReadStateNew ) ; 
 preferences ( ) . putLong ( IN _ READ _ STATE _ PREF , date ) ; 
 + preferences ( ) . putLong ( IN _ READ _ STATE _ NEW _ PREF , inReadStateNew ) ; 
 
 inPendingIndex . removeBeforeValue ( date ) ; 
 
 @ @ - 431 , 6 + 464 , 24 @ @ public class ConversationActor extends ModuleActor { 
 dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 } 
 
 + private void checkReadState ( boolean updateDialogs ) { 
 + / / Log . d ( " ConversationActor " , " checkReadState " ) ; 
 + if ( inReadStateNew > inReadState ) { 
 + / / Log . d ( " ConversationActor " , " reading " ) ; 
 + inReadState = inReadStateNew ; 
 + preferences ( ) . putLong ( IN _ READ _ STATE _ PREF , inReadState ) ; 
 + boolean wasNotNull = inPendingIndex . getCount ( ) ! = 0 ; 
 + inPendingIndex . clear ( ) ; 
 + readerActor . send ( new OwnReadActor . MessageRead ( peer , inReadState ) ) ; 
 + if ( wasNotNull & & updateDialogs ) { 
 + if ( ! isHiddenPeer ) { 
 + dialogsActor . send ( new DialogsActor . CounterChanged ( peer , 0 ) ) ; 
 + } 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , 0 ) ) ; 
 + } 
 + } 
 + } 
 + 
 / / Deletions 
 
 @ Verified 
 @ @ - 460 , 7 + 511 , 10 @ @ public class ConversationActor extends ModuleActor { 
 inPendingIndex . clear ( ) ; 
 outPendingIndex . clear ( ) ; 
 dialogsActor . send ( new DialogsActor . ChatClear ( peer ) ) ; 
 - / / TODO : Implement for grouped 
 + inReadStateNew = 0 ; 
 + inReadState = 0 ; 
 + preferences ( ) . putLong ( IN _ READ _ STATE _ PREF , inReadState ) ; 
 + preferences ( ) . putLong ( IN _ READ _ STATE _ NEW _ PREF , inReadStateNew ) ; 
 } 
 
 @ Verified 
 @ @ - 470 , 7 + 524 , 10 @ @ public class ConversationActor extends ModuleActor { 
 inPendingIndex . clear ( ) ; 
 outPendingIndex . clear ( ) ; 
 dialogsActor . send ( new DialogsActor . ChatDelete ( peer ) ) ; 
 - / / TODO : Implement for grouped 
 + inReadStateNew = 0 ; 
 + inReadState = 0 ; 
 + preferences ( ) . putLong ( IN _ READ _ STATE _ PREF , inReadState ) ; 
 + preferences ( ) . putLong ( IN _ READ _ STATE _ NEW _ PREF , inReadStateNew ) ; 
 } 
 
 / / History 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / OwnPresenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / OwnPresenceActor . java 
 index 352a7b4 . . 87bade1 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / OwnPresenceActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / presence / OwnPresenceActor . java 
 @ @ - 36 , 7 + 36 , 7 @ @ public class OwnPresenceActor extends ModuleActor implements BusSubscriber { 
 public void preStart ( ) { 
 / / isAlwaysOnline = config ( ) . getDeviceCategory ( ) = = DeviceCategory . DESKTOP ; 
 isAlwaysOnline = false ; 
 - 
 + 
 if ( isAlwaysOnline ) { 
 self ( ) . sendOnce ( new PerformOnline ( ) ) ; 
 } else { 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / websocket / WebSocketConnection . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / websocket / WebSocketConnection . java 
 index 70d55c4 . . 37c8a37 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / websocket / WebSocketConnection . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / websocket / WebSocketConnection . java 
 @ @ - 29 , 7 + 29 , 7 @ @ public class WebSocketConnection extends AsyncConnection { 
 
 @ Override 
 public void doConnect ( ) { 
 - Log . d ( TAG , " doConnect " ) ; 
 + / / Log . d ( TAG , " doConnect " ) ; 
 
 isClosed = true ; 
 
 @ @ - 46 , 7 + 46 , 7 @ @ public class WebSocketConnection extends AsyncConnection { 
 
 @ Override 
 public void doSend ( byte [ ] data ) { 
 - Log . d ( TAG , " doSend " ) ; 
 + / / Log . d ( TAG , " doSend " ) ; 
 if ( isClosed ) { 
 return ; 
 } 
 @ @ - 59 , 13 + 59 , 13 @ @ public class WebSocketConnection extends AsyncConnection { 
 
 @ Override 
 public void doClose ( ) { 
 - Log . d ( TAG , " doClose " ) ; 
 + / / Log . d ( TAG , " doClose " ) ; 
 isClosed = true ; 
 close ( ) ; 
 } 
 
 private void onRawMessage ( ArrayBuffer message ) { 
 - Log . d ( TAG , " onRawMessage " ) ; 
 + / / Log . d ( TAG , " onRawMessage " ) ; 
 if ( isClosed ) { 
 return ; 
 } 
 @ @ - 73 , 13 + 73 , 13 @ @ public class WebSocketConnection extends AsyncConnection { 
 } 
 
 private void onRawConnected ( ) { 
 - Log . d ( TAG , " onRawConnected " ) ; 
 + / / Log . d ( TAG , " onRawConnected " ) ; 
 isClosed = false ; 
 onConnected ( ) ; 
 } 
 
 private void onRawClosed ( ) { 
 - Log . d ( TAG , " onRawClosed " ) ; 
 + / / Log . d ( TAG , " onRawClosed " ) ; 
 isClosed = true ; 
 onClosed ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / storage / IndexEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / storage / IndexEngine . java 
 new file mode 100644 
 index 0000000 . . 33f7c0e 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / storage / IndexEngine . java 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + package im . actor . runtime . storage ; 
 + 
 + import java . util . List ; 
 + 
 + public class IndexEngine implements IndexStorage { 
 + 
 + private IndexStorage storage ; 
 + 
 + public IndexEngine ( IndexStorage storage ) { 
 + this . storage = storage ; 
 + } 
 + 
 + @ Override 
 + public void put ( long key , long value ) { 
 + storage . put ( key , value ) ; 
 + } 
 + 
 + @ Override 
 + public Long get ( long key ) { 
 + return storage . get ( key ) ; 
 + } 
 + 
 + @ Override 
 + public List < Long > findBeforeValue ( long value ) { 
 + return storage . findBeforeValue ( value ) ; 
 + } 
 + 
 + @ Override 
 + public List < Long > removeBeforeValue ( long value ) { 
 + return storage . removeBeforeValue ( value ) ; 
 + } 
 + 
 + @ Override 
 + public Long loadTop ( ) { 
 + return storage . loadTop ( ) ; 
 + } 
 + 
 + @ Override 
 + public Long loadBottom ( ) { 
 + return storage . loadBottom ( ) ; 
 + } 
 + 
 + @ Override 
 + public void remove ( long key ) { 
 + storage . remove ( key ) ; 
 + } 
 + 
 + @ Override 
 + public void remove ( List < Long > keys ) { 
 + storage . remove ( keys ) ; 
 + } 
 + 
 + @ Override 
 + public int getCount ( ) { 
 + return storage . getCount ( ) ; 
 + } 
 + 
 + @ Override 
 + public void clear ( ) { 
 + storage . clear ( ) ; 
 + } 
 + }
