BLEU SCORE: 0.10600313379512592

TEST MSG: perf ( server : core ) : optimize update counters query
GENERATED MSG: feat ( server ) : method for loading group dialogs

TEST DIFF (one line): diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala < nl > index 4a1e5a6 . . 7579b17 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala < nl > @ @ - 3 , 7 + 3 , 6 @ @ package im . actor . server . persist . dialog < nl > import com . github . tototoshi . slick . PostgresJodaSupport . _ < nl > import im . actor . server . db . ActorPostgresDriver . api . _ < nl > import im . actor . server . model . { UserDialog , PeerType , Peer } < nl > - import im . actor . server . persist . GroupRepo < nl > < nl > import org . joda . time . DateTime < nl > < nl > @ @ - 15 , 11 + 14 , 9 @ @ object UserDialogRepo { < nl > val byPKC = Compiled ( byPK _ ) < nl > val idByPeerTypeC = Compiled ( idByPeerType _ ) < nl > < nl > - val notArchived = userDialogs joinLeft GroupRepo . groups on ( _ . peerId = = = _ . id ) filter { < nl > - case ( usedDialog , groupOpt ) ⇒ usedDialog . isArchived = = = false & & groupOpt . map ( ! _ . isHidden ) . getOrElse ( true ) < nl > - } map ( _ . _ 1 ) < nl > + val notArchived = userDialogs . filter ( _ . isArchived = = = false ) < nl > < nl > - val notHiddenNotArchived = notArchived . filter ( _ . shownAt . isDefined ) < nl > + val notArchivedVisible = notArchived . filter ( _ . shownAt . isDefined ) < nl > < nl > private def byPK ( userId : Rep [ Int ] , peerType : Rep [ Int ] , peerId : Rep [ Int ] ) = < nl > userDialogs . filter ( u ⇒ u . userId = = = userId & & u . peerType = = = peerType & & u . peerId = = = peerId ) < nl > @ @ - 34 , 7 + 31 , 7 @ @ object UserDialogRepo { < nl > trait UserDialogOperations { < nl > import UserDialogRepo . _ < nl > < nl > - def findUsersVisible ( userId : Rep [ Int ] ) = notHiddenNotArchived . filter ( _ . userId = = = userId ) < nl > + def findUsersVisible ( userId : Rep [ Int ] ) = notArchivedVisible . filter ( _ . userId = = = userId ) < nl > < nl > def findGroupIds ( userId : Int ) = < nl > idByPeerTypeC ( ( userId , PeerType . Group . value ) ) . result
NEAREST DIFF (one line): diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala < nl > index 5bdb0db . . 538c8d9 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala < nl > @ @ - 1 , 7 + 1 , 5 @ @ < nl > package im . actor . server . persist < nl > < nl > - import im . actor . server . models < nl > - < nl > import scala . concurrent . ExecutionContext < nl > < nl > import com . github . tototoshi . slick . PostgresJodaSupport . _ < nl > @ @ - 65 , 8 + 63 , 16 @ @ object Dialog { < nl > def byPK ( userId : Int , peer : models . Peer ) = < nl > byPKSimple ( userId , peer . typ . toInt , peer . id ) < nl > < nl > + def byPeerType ( userId : Rep [ Int ] , peerType : Rep [ Int ] ) = < nl > + dialogs . filter ( d ⇒ d . userId = = = userId & & d . peerType = = = peerType ) < nl > + < nl > + def idByPeerType ( userId : Rep [ Int ] , peerType : Rep [ Int ] ) = < nl > + byPeerType ( userId , peerType ) . map ( _ . peerId ) < nl > + < nl > val byPKC = Compiled ( byPKSimple _ ) < nl > val byPeerC = Compiled ( byPeerSimple _ ) < nl > + val byPeerTypeC = Compiled ( byPeerType _ ) < nl > + val idByPeerTypeC = Compiled ( idByPeerType _ ) < nl > < nl > def create ( dialog : models . Dialog ) = < nl > dialogs + = dialog < nl > @ @ - 81 , 6 + 87 , 12 @ @ object Dialog { < nl > def find ( userId : Int , peer : models . Peer ) : SqlAction [ Option [ models . Dialog ] , NoStream , Read ] = < nl > byPKC ( ( userId , peer . typ . toInt , peer . id ) ) . result . headOption < nl > < nl > + def findGroups ( userId : Int ) : FixedSqlStreamingAction [ Seq [ models . Dialog ] , models . Dialog , Read ] = < nl > + byPeerTypeC ( ( userId , models . PeerType . Group . toInt ) ) . result < nl > + < nl > + def findGroupIds ( userId : Int ) : FixedSqlStreamingAction [ Seq [ Int ] , Int , Read ] = < nl > + idByPeerTypeC ( ( userId , models . PeerType . Group . toInt ) ) . result < nl > + < nl > def findLastReadBefore ( date : DateTime , userId : Int ) = < nl > dialogs . filter ( d ⇒ d . userId = = = userId & & d . ownerLastReadAt < date ) . result

TEST DIFF:
diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala 
 index 4a1e5a6 . . 7579b17 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / UserDialogOperations . scala 
 @ @ - 3 , 7 + 3 , 6 @ @ package im . actor . server . persist . dialog 
 import com . github . tototoshi . slick . PostgresJodaSupport . _ 
 import im . actor . server . db . ActorPostgresDriver . api . _ 
 import im . actor . server . model . { UserDialog , PeerType , Peer } 
 - import im . actor . server . persist . GroupRepo 
 
 import org . joda . time . DateTime 
 
 @ @ - 15 , 11 + 14 , 9 @ @ object UserDialogRepo { 
 val byPKC = Compiled ( byPK _ ) 
 val idByPeerTypeC = Compiled ( idByPeerType _ ) 
 
 - val notArchived = userDialogs joinLeft GroupRepo . groups on ( _ . peerId = = = _ . id ) filter { 
 - case ( usedDialog , groupOpt ) ⇒ usedDialog . isArchived = = = false & & groupOpt . map ( ! _ . isHidden ) . getOrElse ( true ) 
 - } map ( _ . _ 1 ) 
 + val notArchived = userDialogs . filter ( _ . isArchived = = = false ) 
 
 - val notHiddenNotArchived = notArchived . filter ( _ . shownAt . isDefined ) 
 + val notArchivedVisible = notArchived . filter ( _ . shownAt . isDefined ) 
 
 private def byPK ( userId : Rep [ Int ] , peerType : Rep [ Int ] , peerId : Rep [ Int ] ) = 
 userDialogs . filter ( u ⇒ u . userId = = = userId & & u . peerType = = = peerType & & u . peerId = = = peerId ) 
 @ @ - 34 , 7 + 31 , 7 @ @ object UserDialogRepo { 
 trait UserDialogOperations { 
 import UserDialogRepo . _ 
 
 - def findUsersVisible ( userId : Rep [ Int ] ) = notHiddenNotArchived . filter ( _ . userId = = = userId ) 
 + def findUsersVisible ( userId : Rep [ Int ] ) = notArchivedVisible . filter ( _ . userId = = = userId ) 
 
 def findGroupIds ( userId : Int ) = 
 idByPeerTypeC ( ( userId , PeerType . Group . value ) ) . result

NEAREST DIFF:
diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala 
 index 5bdb0db . . 538c8d9 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Dialog . scala 
 @ @ - 1 , 7 + 1 , 5 @ @ 
 package im . actor . server . persist 
 
 - import im . actor . server . models 
 - 
 import scala . concurrent . ExecutionContext 
 
 import com . github . tototoshi . slick . PostgresJodaSupport . _ 
 @ @ - 65 , 8 + 63 , 16 @ @ object Dialog { 
 def byPK ( userId : Int , peer : models . Peer ) = 
 byPKSimple ( userId , peer . typ . toInt , peer . id ) 
 
 + def byPeerType ( userId : Rep [ Int ] , peerType : Rep [ Int ] ) = 
 + dialogs . filter ( d ⇒ d . userId = = = userId & & d . peerType = = = peerType ) 
 + 
 + def idByPeerType ( userId : Rep [ Int ] , peerType : Rep [ Int ] ) = 
 + byPeerType ( userId , peerType ) . map ( _ . peerId ) 
 + 
 val byPKC = Compiled ( byPKSimple _ ) 
 val byPeerC = Compiled ( byPeerSimple _ ) 
 + val byPeerTypeC = Compiled ( byPeerType _ ) 
 + val idByPeerTypeC = Compiled ( idByPeerType _ ) 
 
 def create ( dialog : models . Dialog ) = 
 dialogs + = dialog 
 @ @ - 81 , 6 + 87 , 12 @ @ object Dialog { 
 def find ( userId : Int , peer : models . Peer ) : SqlAction [ Option [ models . Dialog ] , NoStream , Read ] = 
 byPKC ( ( userId , peer . typ . toInt , peer . id ) ) . result . headOption 
 
 + def findGroups ( userId : Int ) : FixedSqlStreamingAction [ Seq [ models . Dialog ] , models . Dialog , Read ] = 
 + byPeerTypeC ( ( userId , models . PeerType . Group . toInt ) ) . result 
 + 
 + def findGroupIds ( userId : Int ) : FixedSqlStreamingAction [ Seq [ Int ] , Int , Read ] = 
 + idByPeerTypeC ( ( userId , models . PeerType . Group . toInt ) ) . result 
 + 
 def findLastReadBefore ( date : DateTime , userId : Int ) = 
 dialogs . filter ( d ⇒ d . userId = = = userId & & d . ownerLastReadAt < date ) . result
