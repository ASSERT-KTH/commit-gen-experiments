BLEU SCORE: 0.13485111859503685

TEST MSG: feat ( android ) : localize call service messages
GENERATED MSG: feat ( js ) : Adding reactions

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > index f258c72 . . 9ffb946 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > @ @ - 18 , 6 + 18 , 8 @ @ import im . actor . core . entity . Notification ; < nl > import im . actor . core . entity . PeerType ; < nl > import im . actor . core . entity . Sex ; < nl > import im . actor . core . entity . User ; < nl > + import im . actor . core . entity . content . ServiceCallEnded ; < nl > + import im . actor . core . entity . content . ServiceCallMissed ; < nl > import im . actor . core . entity . content . ServiceContent ; < nl > import im . actor . core . entity . content . ServiceGroupAvatarChanged ; < nl > import im . actor . core . entity . content . ServiceGroupCreated ; < nl > @ @ - 388 , 9 + 390 , 9 @ @ public class I18nEngine { < nl > case SERVICE _ JOINED : < nl > return getTemplateNamed ( senderId , " ServiceGroupJoined " ) ; < nl > case SERVICE _ CALL _ ENDED : < nl > - return getTemplateNamed ( senderId , " ServiceCallEnded " ) ; < nl > + return locale . get ( " ServiceCallEnded " ) ; < nl > case SERVICE _ CALL _ MISSED : < nl > - return getTemplateNamed ( senderId , " ServiceCallMissed " ) ; < nl > + return locale . get ( " ServiceCallMissed " ) ; < nl > case NONE : < nl > return " " ; < nl > default : < nl > @ @ - 447 , 6 + 449 , 10 @ @ public class I18nEngine { < nl > } < nl > } else if ( content instanceof ServiceGroupUserJoined ) { < nl > return getTemplateNamed ( senderId , " ServiceGroupJoined " ) ; < nl > + } else if ( content instanceof ServiceCallEnded ) { < nl > + return locale . get ( " ServiceCallEnded " ) ; < nl > + } else if ( content instanceof ServiceCallMissed ) { < nl > + return locale . get ( " ServiceCallMissed " ) ; < nl > } < nl > < nl > return content . getCompatText ( ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java < nl > index 74224e2 . . cf77d4e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java < nl > @ @ - 5 , 11 + 5 , 14 @ @ < nl > package im . actor . core . js . entity ; < nl > < nl > import com . google . gwt . core . client . JavaScriptObject ; < nl > + import com . google . gwt . core . client . JsArray ; < nl > + import com . google . gwt . core . client . JsArrayInteger ; < nl > import com . google . gwt . core . client . JsDate ; < nl > < nl > import im . actor . core . api . ApiTextExMarkdown ; < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . Reaction ; < nl > import im . actor . core . entity . content . DocumentContent ; < nl > import im . actor . core . entity . content . FileLocalSource ; < nl > import im . actor . core . entity . content . FileRemoteSource ; < nl > @ @ - 85 , 11 + 88 , 27 @ @ public class JsMessage extends JavaScriptObject { < nl > content = JsContentUnsupported . create ( ) ; < nl > } < nl > < nl > - return create ( rid , sortKey , sender , isOut , date , fullDate , Enums . convert ( value . getMessageState ( ) ) , isOnServer , content ) ; < nl > + JsArray < JsReaction > reactions = JsArray . createArray ( ) . cast ( ) ; < nl > + < nl > + for ( Reaction r : value . getReactions ( ) ) { < nl > + JsArrayInteger uids = ( JsArrayInteger ) JsArrayInteger . createArray ( ) ; < nl > + boolean isOwnSet = false ; < nl > + for ( Integer i : r . getUids ( ) ) { < nl > + uids . push ( i ) ; < nl > + if ( i = = messenger . myUid ( ) ) { < nl > + isOwnSet = true ; < nl > + } < nl > + } < nl > + reactions . push ( JsReaction . create ( r . getCode ( ) , uids , isOwnSet ) ; < nl > + } < nl > + < nl > + return create ( rid , sortKey , sender , isOut , date , fullDate , Enums . convert ( value . getMessageState ( ) ) , isOnServer , content , < nl > + reactions ) ; < nl > } < nl > } ; < nl > < nl > - public native static JsMessage create ( String rid , String sortKey , JsPeerInfo sender , boolean isOut , String date , JsDate fullDate , String state , boolean isOnServer , JsContent content ) / * - { < nl > + public native static JsMessage create ( String rid , String sortKey , JsPeerInfo sender , boolean isOut , String date , JsDate fullDate , String state , boolean isOnServer , JsContent content , < nl > + JsArray < JsReaction > reactions ) / * - { < nl > return { < nl > rid : rid , < nl > sortKey : sortKey , < nl > @ @ - 99 , 7 + 118 , 8 @ @ public class JsMessage extends JavaScriptObject { < nl > fullDate : fullDate , < nl > state : state , < nl > isOnServer : isOnServer , < nl > - content : content < nl > + content : content , < nl > + reactions : reactions < nl > } ; < nl > } - * / ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsReaction . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsReaction . java < nl > new file mode 100644 < nl > index 0000000 . . 5925834 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsReaction . java < nl > @ @ - 0 , 0 + 1 , 15 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + import com . google . gwt . core . client . JsArrayInteger ; < nl > + < nl > + public class JsReaction extends JavaScriptObject { < nl > + < nl > + public static native JsReaction create ( String reaction , JsArrayInteger uids , boolean isOwnSet ) / * - { < nl > + return { reaction : reaction , uids : uids , isOwnSet : isOwnSet } ; < nl > + } - * / ; < nl > + < nl > + protected JsReaction ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Message . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Message . java < nl > index 4011ef8 . . 50ad9d9 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Message . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Message . java < nl > @ @ - 135 , 7 + 135 , 7 @ @ public class Message extends BserObject implements ListEngineItem { < nl > senderId = values . getInt ( 4 ) ; < nl > messageState = MessageState . fromValue ( values . getInt ( 5 ) ) ; < nl > content = AbsContent . parse ( values . getBytes ( 6 ) ) ; < nl > - reactions . clear ( ) ; < nl > + reactions = new ArrayList < Reaction > ( ) ; < nl > for ( byte [ ] react : values . getRepeatedBytes ( 7 ) ) { < nl > reactions . add ( Reaction . fromBytes ( react ) ) ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 index f258c72 . . 9ffb946 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 @ @ - 18 , 6 + 18 , 8 @ @ import im . actor . core . entity . Notification ; 
 import im . actor . core . entity . PeerType ; 
 import im . actor . core . entity . Sex ; 
 import im . actor . core . entity . User ; 
 + import im . actor . core . entity . content . ServiceCallEnded ; 
 + import im . actor . core . entity . content . ServiceCallMissed ; 
 import im . actor . core . entity . content . ServiceContent ; 
 import im . actor . core . entity . content . ServiceGroupAvatarChanged ; 
 import im . actor . core . entity . content . ServiceGroupCreated ; 
 @ @ - 388 , 9 + 390 , 9 @ @ public class I18nEngine { 
 case SERVICE _ JOINED : 
 return getTemplateNamed ( senderId , " ServiceGroupJoined " ) ; 
 case SERVICE _ CALL _ ENDED : 
 - return getTemplateNamed ( senderId , " ServiceCallEnded " ) ; 
 + return locale . get ( " ServiceCallEnded " ) ; 
 case SERVICE _ CALL _ MISSED : 
 - return getTemplateNamed ( senderId , " ServiceCallMissed " ) ; 
 + return locale . get ( " ServiceCallMissed " ) ; 
 case NONE : 
 return " " ; 
 default : 
 @ @ - 447 , 6 + 449 , 10 @ @ public class I18nEngine { 
 } 
 } else if ( content instanceof ServiceGroupUserJoined ) { 
 return getTemplateNamed ( senderId , " ServiceGroupJoined " ) ; 
 + } else if ( content instanceof ServiceCallEnded ) { 
 + return locale . get ( " ServiceCallEnded " ) ; 
 + } else if ( content instanceof ServiceCallMissed ) { 
 + return locale . get ( " ServiceCallMissed " ) ; 
 } 
 
 return content . getCompatText ( ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java 
 index 74224e2 . . cf77d4e 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java 
 @ @ - 5 , 11 + 5 , 14 @ @ 
 package im . actor . core . js . entity ; 
 
 import com . google . gwt . core . client . JavaScriptObject ; 
 + import com . google . gwt . core . client . JsArray ; 
 + import com . google . gwt . core . client . JsArrayInteger ; 
 import com . google . gwt . core . client . JsDate ; 
 
 import im . actor . core . api . ApiTextExMarkdown ; 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . Reaction ; 
 import im . actor . core . entity . content . DocumentContent ; 
 import im . actor . core . entity . content . FileLocalSource ; 
 import im . actor . core . entity . content . FileRemoteSource ; 
 @ @ - 85 , 11 + 88 , 27 @ @ public class JsMessage extends JavaScriptObject { 
 content = JsContentUnsupported . create ( ) ; 
 } 
 
 - return create ( rid , sortKey , sender , isOut , date , fullDate , Enums . convert ( value . getMessageState ( ) ) , isOnServer , content ) ; 
 + JsArray < JsReaction > reactions = JsArray . createArray ( ) . cast ( ) ; 
 + 
 + for ( Reaction r : value . getReactions ( ) ) { 
 + JsArrayInteger uids = ( JsArrayInteger ) JsArrayInteger . createArray ( ) ; 
 + boolean isOwnSet = false ; 
 + for ( Integer i : r . getUids ( ) ) { 
 + uids . push ( i ) ; 
 + if ( i = = messenger . myUid ( ) ) { 
 + isOwnSet = true ; 
 + } 
 + } 
 + reactions . push ( JsReaction . create ( r . getCode ( ) , uids , isOwnSet ) ; 
 + } 
 + 
 + return create ( rid , sortKey , sender , isOut , date , fullDate , Enums . convert ( value . getMessageState ( ) ) , isOnServer , content , 
 + reactions ) ; 
 } 
 } ; 
 
 - public native static JsMessage create ( String rid , String sortKey , JsPeerInfo sender , boolean isOut , String date , JsDate fullDate , String state , boolean isOnServer , JsContent content ) / * - { 
 + public native static JsMessage create ( String rid , String sortKey , JsPeerInfo sender , boolean isOut , String date , JsDate fullDate , String state , boolean isOnServer , JsContent content , 
 + JsArray < JsReaction > reactions ) / * - { 
 return { 
 rid : rid , 
 sortKey : sortKey , 
 @ @ - 99 , 7 + 118 , 8 @ @ public class JsMessage extends JavaScriptObject { 
 fullDate : fullDate , 
 state : state , 
 isOnServer : isOnServer , 
 - content : content 
 + content : content , 
 + reactions : reactions 
 } ; 
 } - * / ; 
 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsReaction . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsReaction . java 
 new file mode 100644 
 index 0000000 . . 5925834 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsReaction . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + import com . google . gwt . core . client . JsArrayInteger ; 
 + 
 + public class JsReaction extends JavaScriptObject { 
 + 
 + public static native JsReaction create ( String reaction , JsArrayInteger uids , boolean isOwnSet ) / * - { 
 + return { reaction : reaction , uids : uids , isOwnSet : isOwnSet } ; 
 + } - * / ; 
 + 
 + protected JsReaction ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Message . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Message . java 
 index 4011ef8 . . 50ad9d9 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Message . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Message . java 
 @ @ - 135 , 7 + 135 , 7 @ @ public class Message extends BserObject implements ListEngineItem { 
 senderId = values . getInt ( 4 ) ; 
 messageState = MessageState . fromValue ( values . getInt ( 5 ) ) ; 
 content = AbsContent . parse ( values . getBytes ( 6 ) ) ; 
 - reactions . clear ( ) ; 
 + reactions = new ArrayList < Reaction > ( ) ; 
 for ( byte [ ] react : values . getRepeatedBytes ( 7 ) ) { 
 reactions . add ( Reaction . fromBytes ( react ) ) ; 
 }
