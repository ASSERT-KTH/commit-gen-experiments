BLEU SCORE: 0.21609051104274463

TEST MSG: fix ( core ) : Fixing dropping chat cache
GENERATED MSG: fix ( core ) : Fixing compilation error , implemented missing method in bser , implemented typing cancelling

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json < nl > index f3497d9 . . 7316b4f 100644 < nl > - - - a / actor - sdk / sdk - api / actor . json < nl > + + + b / actor - sdk / sdk - api / actor . json < nl > @ @ - 6637 , 7 + 6637 , 7 @ @ < nl > { < nl > " type " : " reference " , < nl > " argument " : " dialogs " , < nl > - " category " : " full " , < nl > + " category " : " compact " , < nl > " description " : " New dialgos list " < nl > } < nl > ] , < nl > diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > index 2416c8a . . 39bb962 100644 < nl > - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > @ @ - 5917 , 7 + 5917 , 7 @ @ < nl > < property role = " NXePf " value = " Update about chat groups changed . Called only when adding , removing and reordering of grouped dialog . " / > < nl > < / node > < nl > < node concept = " NX1gA " id = " 5TxE3W70c _ I " role = " NXp _ 2 " > < nl > - < property role = " 1GSvIU " value = " full " / > < nl > + < property role = " 1GSvIU " value = " compact " / > < nl > < property role = " NX6R2 " value = " New dialgos list " / > < nl > < ref role = " NX6Kv " node = " 5TxE3W70qfx " resolve = " dialogs " / > < nl > < / node > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleCell . swift < nl > index 294eed0 . . 98954e7 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleCell . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleCell . swift < nl > @ @ - 179 , 8 + 179 , 6 @ @ public class AABubbleCell : UICollectionViewCell { < nl > < nl > contentView . transform = CGAffineTransformMake ( 1 , 0 , 0 , - 1 , 0 , 0 ) < nl > < nl > - ActorSDK . sharedActor ( ) . style . bubbleShadowEnabled ? contentView . addSubview ( bubbleShadow ) : print ( " go to light ! " ) < nl > - < nl > contentView . addSubview ( bubble ) < nl > contentView . addSubview ( bubbleBorder ) < nl > contentView . addSubview ( newMessage ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > index f576943 . . 9fe626f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > @ @ - 434 , 7 + 434 , 7 @ @ public class ConversationViewController : < nl > let group = Actor . getGroupWithGid ( peer . peerId ) < nl > if ! group . isMember . get ( ) . booleanValue ( ) { < nl > if group . isCanJoin . get ( ) . booleanValue ( ) { < nl > - / / T < nl > + executePromise ( Actor . joinGroupWithGid ( peer . peerId ) ) < nl > } else { < nl > / / DO NOTHING < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 1a908ad . . 73c3f9a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 1702 , 6 + 1702 , 18 @ @ public class Messenger { < nl > } < nl > < nl > / * * < nl > + * Join group < nl > + * < nl > + * @ param gid group ' s id < nl > + * @ return Promise of Void < nl > + * / < nl > + @ NotNull < nl > + @ ObjectiveCName ( " joinGroupWithGid : " ) < nl > + public Promise < Void > joinGroup ( int gid ) { < nl > + return modules . getGroupsModule ( ) . joinGroup ( gid ) ; < nl > + } < nl > + < nl > + / * * < nl > * Request integration token for group < nl > * < nl > * @ param gid group ' s id < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / parser / RpcParser . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / parser / RpcParser . java < nl > index 709b69a . . e628db2 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / parser / RpcParser . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / parser / RpcParser . java < nl > @ @ - 89 , 6 + 89 , 7 @ @ public class RpcParser extends BaseParser < RpcScope > { < nl > case 70 : return RequestLeaveGroup . fromBytes ( payload ) ; < nl > case 2721 : return RequestLeaveAndDelete . fromBytes ( payload ) ; < nl > case 71 : return RequestKickUser . fromBytes ( payload ) ; < nl > + case 2722 : return RequestJoinGroupByPeer . fromBytes ( payload ) ; < nl > case 2784 : return RequestMakeUserAdmin . fromBytes ( payload ) ; < nl > case 2791 : return RequestDismissUserAdmin . fromBytes ( payload ) ; < nl > case 2789 : return RequestTransferOwnership . fromBytes ( payload ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / rpc / RequestJoinGroupByPeer . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / rpc / RequestJoinGroupByPeer . java < nl > new file mode 100644 < nl > index 0000000 . . 261437e < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / rpc / RequestJoinGroupByPeer . java < nl > @ @ - 0 , 0 + 1 , 65 @ @ < nl > + package im . actor . core . api . rpc ; < nl > + / * < nl > + * Generated by the Actor API Scheme generator . DO NOT EDIT ! < nl > + * / < nl > + < nl > + import im . actor . runtime . bser . * ; < nl > + import im . actor . runtime . collections . * ; < nl > + import static im . actor . runtime . bser . Utils . * ; < nl > + import im . actor . core . network . parser . * ; < nl > + import org . jetbrains . annotations . Nullable ; < nl > + import org . jetbrains . annotations . NotNull ; < nl > + import com . google . j2objc . annotations . ObjectiveCName ; < nl > + import java . io . IOException ; < nl > + import java . util . List ; < nl > + import java . util . ArrayList ; < nl > + import im . actor . core . api . * ; < nl > + < nl > + public class RequestJoinGroupByPeer extends Request < ResponseSeq > { < nl > + < nl > + public static final int HEADER = 0xaa2 ; < nl > + public static RequestJoinGroupByPeer fromBytes ( byte [ ] data ) throws IOException { < nl > + return Bser . parse ( new RequestJoinGroupByPeer ( ) , data ) ; < nl > + } < nl > + < nl > + private ApiGroupOutPeer groupPeer ; < nl > + < nl > + public RequestJoinGroupByPeer ( @ NotNull ApiGroupOutPeer groupPeer ) { < nl > + this . groupPeer = groupPeer ; < nl > + } < nl > + < nl > + public RequestJoinGroupByPeer ( ) { < nl > + < nl > + } < nl > + < nl > + @ NotNull < nl > + public ApiGroupOutPeer getGroupPeer ( ) { < nl > + return this . groupPeer ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + this . groupPeer = values . getObj ( 1 , new ApiGroupOutPeer ( ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + if ( this . groupPeer = = null ) { < nl > + throw new IOException ( ) ; < nl > + } < nl > + writer . writeObject ( 1 , this . groupPeer ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public String toString ( ) { < nl > + String res = " rpc JoinGroupByPeer { " ; < nl > + res + = " groupPeer = " + this . groupPeer ; < nl > + res + = " } " ; < nl > + return res ; < nl > + } < nl > + < nl > + @ Override < nl > + public int getHeaderKey ( ) { < nl > + return HEADER ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / updates / UpdateChatGroupsChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / updates / UpdateChatGroupsChanged . java < nl > index 7157573 . . 2e88bbe 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / updates / UpdateChatGroupsChanged . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / updates / UpdateChatGroupsChanged . java < nl > @ @ - 54 , 7 + 54 , 7 @ @ public class UpdateChatGroupsChanged extends Update { < nl > @ Override < nl > public String toString ( ) { < nl > String res = " update ChatGroupsChanged { " ; < nl > - res + = " dialogs = " + this . dialogs ; < nl > + res + = " dialogs = " + this . dialogs . size ( ) ; < nl > res + = " } " ; < nl > return res ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java < nl > index c1c2fd8 . . 0b15da2 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java < nl > @ @ - 25 , 6 + 25 , 7 @ @ import im . actor . core . api . rpc . RequestGetGroupInviteUrl ; < nl > import im . actor . core . api . rpc . RequestGetIntegrationToken ; < nl > import im . actor . core . api . rpc . RequestInviteUser ; < nl > import im . actor . core . api . rpc . RequestJoinGroup ; < nl > + import im . actor . core . api . rpc . RequestJoinGroupByPeer ; < nl > import im . actor . core . api . rpc . RequestKickUser ; < nl > import im . actor . core . api . rpc . RequestLeaveAndDelete ; < nl > import im . actor . core . api . rpc . RequestLeaveGroup ; < nl > @ @ - 343 , 6 + 344 , 15 @ @ public class GroupsModule extends AbsModule implements BusSubscriber { < nl > . map ( responseJoinGroup - > responseJoinGroup . getGroup ( ) . getId ( ) ) ; < nl > } < nl > < nl > + public Promise < Void > joinGroup ( int gid ) { < nl > + return getGroups ( ) . getValueAsync ( gid ) < nl > + . flatMap ( group - > < nl > + api ( new RequestJoinGroupByPeer ( < nl > + new ApiGroupOutPeer ( group . getGroupId ( ) , group . getAccessHash ( ) ) ) ) ) < nl > + . chain ( r - > updates ( ) . waitForUpdate ( r . getSeq ( ) ) ) < nl > + . map ( r - > null ) ; < nl > + } < nl > + < nl > / / < nl > / / Integration Token < nl > / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java < nl > index 4cceb5c . . 6ac9f16 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java < nl > @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . modules . api . ApiSupportConfiguration ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . ModuleActor ; < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . actors . ask . AskMessage ; < nl > import im . actor . runtime . actors . messages . Void ; < nl > import im . actor . runtime . function . Consumer ; < nl > @ @ - 69 , 27 + 70 , 38 @ @ public class ConversationHistoryActor extends ModuleActor { < nl > api ( new RequestLoadHistory ( buidOutPeer ( peer ) , historyMaxDate , null , LIMIT , ApiSupportConfiguration . OPTIMIZATIONS ) ) < nl > . chain ( r - > updates ( ) . applyRelatedData ( r . getUsers ( ) , r . getGroups ( ) ) ) < nl > . chain ( r - > updates ( ) . loadRequiredPeers ( r . getUserPeers ( ) , r . getGroupPeers ( ) ) ) < nl > - . then ( applyHistory ( peer ) ) < nl > - . then ( responseLoadHistory - > { < nl > + . flatMap ( r - > { < nl > + Log . d ( " HistoryActor " , " Apply " + historyMaxDate ) ; < nl > + return applyHistory ( peer , r . getHistory ( ) ) ; < nl > + } ) < nl > + . map ( r - > { < nl > + Log . d ( " HistoryActor " , " Applied " ) ; < nl > isFreezed = false ; < nl > unstashAll ( ) ; < nl > + return null ; < nl > } ) ; < nl > } < nl > < nl > - private void onReset ( ) { < nl > - historyMaxDate = 0 ; < nl > + private Promise < Void > onReset ( ) { < nl > + < nl > + Log . d ( " HistoryActor " , " Reset " ) ; < nl > + < nl > + historyMaxDate = Long . MAX _ VALUE ; < nl > preferences ( ) . putLong ( KEY _ LOADED _ DATE , Long . MAX _ VALUE ) ; < nl > historyLoaded = false ; < nl > preferences ( ) . putBool ( KEY _ LOADED , false ) ; < nl > preferences ( ) . putBool ( KEY _ LOADED _ INIT , false ) ; < nl > - self ( ) . send ( new LoadMore ( ) ) ; < nl > - } < nl > < nl > - private Consumer < ResponseLoadHistory > applyHistory ( final Peer peer ) { < nl > - return responseLoadHistory - > applyHistory ( peer , responseLoadHistory . getHistory ( ) ) ; < nl > + isFreezed = true ; < nl > + return context ( ) . getMessagesModule ( ) . getRouter ( ) . onChatReset ( peer ) < nl > + . then ( r - > { < nl > + isFreezed = false ; < nl > + unstashAll ( ) ; < nl > + onLoadMore ( ) ; < nl > + } ) ; < nl > } < nl > < nl > - private void applyHistory ( Peer peer , List < ApiMessageContainer > history ) { < nl > + private Promise < Void > applyHistory ( Peer peer , List < ApiMessageContainer > history ) { < nl > < nl > ArrayList < Message > messages = new ArrayList < > ( ) ; < nl > long maxLoadedDate = Long . MAX _ VALUE ; < nl > @ @ - 120 , 9 + 132 , 9 @ @ public class ConversationHistoryActor extends ModuleActor { < nl > < nl > / / Sending updates to conversation actor < nl > final long finalMaxLoadedDate = maxLoadedDate ; < nl > - context ( ) . getMessagesModule ( ) . getRouter ( ) < nl > + return context ( ) . getMessagesModule ( ) . getRouter ( ) < nl > . onChatHistoryLoaded ( peer , messages , maxReceiveDate , maxReadDate , isEnded ) < nl > - . then ( r - > { < nl > + . map ( r - > { < nl > / / Saving Internal State < nl > if ( isEnded ) { < nl > historyLoaded = true ; < nl > @ @ - 133 , 6 + 145 , 7 @ @ public class ConversationHistoryActor extends ModuleActor { < nl > preferences ( ) . putLong ( KEY _ LOADED _ DATE , finalMaxLoadedDate ) ; < nl > preferences ( ) . putBool ( KEY _ LOADED , historyLoaded ) ; < nl > preferences ( ) . putBool ( KEY _ LOADED _ INIT , true ) ; < nl > + return r ; < nl > } ) ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > index fffd592 . . 4b5923c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > @ @ - 61 , 11 + 61 , 13 @ @ import im . actor . core . modules . messaging . router . entity . RouterOutgoingError ; < nl > import im . actor . core . modules . messaging . router . entity . RouterOutgoingMessage ; < nl > import im . actor . core . modules . messaging . router . entity . RouterOutgoingSent ; < nl > import im . actor . core . modules . messaging . router . entity . RouterPeersChanged ; < nl > + import im . actor . core . modules . messaging . router . entity . RouterResetChat ; < nl > import im . actor . core . network . parser . Update ; < nl > import im . actor . core . util . JavaUtil ; < nl > import im . actor . core . viewmodel . DialogGroup ; < nl > import im . actor . core . viewmodel . DialogSmall ; < nl > import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . actors . messages . Void ; < nl > import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . storage . KeyValueEngine ; < nl > @ @ - 402 , 6 + 404 , 8 @ @ public class RouterActor extends ModuleActor { < nl > private Promise < Void > onChatHistoryLoaded ( Peer peer , List < Message > messages , Long maxReadDate , < nl > Long maxReceiveDate , boolean isEnded ) { < nl > < nl > + Log . d ( TAG , " History Loaded " ) ; < nl > + < nl > long maxMessageDate = 0 ; < nl > < nl > / / Processing all new messages < nl > @ @ - 521 , 18 + 525 , 22 @ @ public class RouterActor extends ModuleActor { < nl > } < nl > < nl > private Promise < Void > onChatDropCache ( Peer peer ) { < nl > - return context ( ) . getMessagesModule ( ) . getHistoryActor ( peer ) . reset ( ) < nl > - . flatMap ( r - > { < nl > - conversation ( peer ) . clear ( ) ; < nl > + return context ( ) . getMessagesModule ( ) . getHistoryActor ( peer ) . reset ( ) ; < nl > + } < nl > < nl > - ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; < nl > - state = state . changeIsLoaded ( false ) ; < nl > - conversationStates . addOrUpdateItem ( state ) ; < nl > + private Promise < Void > onChatReset ( Peer peer ) { < nl > < nl > - updateChatState ( peer ) ; < nl > + Log . d ( TAG , " onChatReset " ) ; < nl > < nl > - return getDialogsRouter ( ) . onChatClear ( peer ) ; < nl > - } ) ; < nl > + conversation ( peer ) . clear ( ) ; < nl > + < nl > + ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; < nl > + state = state . changeIsLoaded ( false ) ; < nl > + conversationStates . addOrUpdateItem ( state ) ; < nl > + < nl > + updateChatState ( peer ) ; < nl > + < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > private Promise < Void > onChatDelete ( Peer peer ) { < nl > @ @ - 981 , 6 + 989 , 9 @ @ public class RouterActor extends ModuleActor { < nl > return onMessageDeleted ( < nl > routerDeletedMessages . getPeer ( ) , < nl > routerDeletedMessages . getRids ( ) ) ; < nl > + } else if ( message instanceof RouterResetChat ) { < nl > + RouterResetChat resetChat = ( RouterResetChat ) message ; < nl > + return onChatReset ( resetChat . getPeer ( ) ) ; < nl > } else { < nl > return super . onAsk ( message ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java < nl > index df8370a . . 1bc228a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java < nl > @ @ - 28 , 6 + 28 , 7 @ @ import im . actor . core . modules . messaging . router . entity . RouterNewMessages ; < nl > import im . actor . core . modules . messaging . router . entity . RouterOutgoingError ; < nl > import im . actor . core . modules . messaging . router . entity . RouterOutgoingMessage ; < nl > import im . actor . core . modules . messaging . router . entity . RouterPeersChanged ; < nl > + import im . actor . core . modules . messaging . router . entity . RouterResetChat ; < nl > import im . actor . core . network . parser . Update ; < nl > import im . actor . runtime . actors . ActorInterface ; < nl > import im . actor . runtime . actors . messages . Void ; < nl > @ @ - 150 , 6 + 151 , 10 @ @ public class RouterInt extends ActorInterface implements BusSubscriber { < nl > return ask ( new RouterPeersChanged ( users , groups ) ) ; < nl > } < nl > < nl > + / / Resetting < nl > + public Promise < Void > onChatReset ( Peer peer ) { < nl > + return ask ( new RouterResetChat ( peer ) ) ; < nl > + } < nl > < nl > @ Override < nl > public void onBusEvent ( Event event ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / RouterResetChat . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / RouterResetChat . java < nl > new file mode 100644 < nl > index 0000000 . . cc00cec < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / RouterResetChat . java < nl > @ @ - 0 , 0 + 1 , 18 @ @ < nl > + package im . actor . core . modules . messaging . router . entity ; < nl > + < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > + < nl > + public class RouterResetChat implements AskMessage < Void > { < nl > + < nl > + private Peer peer ; < nl > + < nl > + public RouterResetChat ( Peer peer ) { < nl > + this . peer = peer ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java < nl > index 21da5d0 . . 654a7b1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java < nl > @ @ - 78 , 7 + 78 , 10 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > < nl > / / Update Application < nl > currentPromise = currentPromise < nl > - . chain ( v - > processor . processUpdate ( update ) ) ; < nl > + . chain ( v - > processor . processUpdate ( update ) ) < nl > + . then ( v - > { < nl > + Log . d ( TAG , " Ended processing update : " + update ) ; < nl > + } ) ; < nl > < nl > / / Handling update end < nl > currentPromise . then ( v - > endUpdates ( ) ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > index fb24226 . . 779750d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > @ @ - 150 , 7 + 150 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > w . getNick ( ) , < nl > w . getAbout ( ) , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > @ @ - 168 , 7 + 170 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > w . getNick ( ) , < nl > w . getAbout ( ) , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > @ @ - 186 , 7 + 190 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > nick , < nl > w . getAbout ( ) , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > @ @ - 204 , 7 + 210 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > w . getNick ( ) , < nl > about , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > @ @ - 222 , 7 + 230 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > w . getNick ( ) , < nl > w . getAbout ( ) , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java < nl > index 2f83c05 . . 8a0b75a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java < nl > @ @ - 118 , 7 + 118 , 8 @ @ public class Authentication { < nl > apiConfiguration . getAppId ( ) , < nl > apiConfiguration . getAppKey ( ) , < nl > deviceHash , < nl > - apiConfiguration . getDeviceTitle ( ) < nl > + apiConfiguration . getDeviceTitle ( ) , < nl > + null , new ArrayList < String > ( ) < nl > ) , new RpcCallback < ResponseStartEmailAuth > ( ) { < nl > @ Override < nl > public void onResult ( ResponseStartEmailAuth response ) { < nl > @ @ - 163 , 7 + 164 , 8 @ @ public class Authentication { < nl > apiConfiguration . getAppId ( ) , < nl > apiConfiguration . getAppKey ( ) , < nl > deviceHash , < nl > - apiConfiguration . getDeviceTitle ( ) < nl > + apiConfiguration . getDeviceTitle ( ) , < nl > + null , new ArrayList < String > ( ) < nl > ) , new RpcCallback < ResponseStartPhoneAuth > ( ) { < nl > @ Override < nl > public void onResult ( ResponseStartPhoneAuth response ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 11630f1 . . bfbd171 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 288 , 6 + 288 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > public void sendMessage ( @ NotNull Peer peer , @ NotNull String message , @ Nullable String markDownText , < nl > @ Nullable ArrayList < Integer > mentions , boolean autoDetect ) { < nl > + / / Notify typing about message sent < nl > + context ( ) . getTypingModule ( ) . onMessageSent ( peer ) ; < nl > sendMessageActor . send ( new SenderActor . SendText ( peer , message , markDownText , mentions , < nl > autoDetect ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java < nl > index 72ce08e . . c867fb0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java < nl > @ @ - 51 , 6 + 51 , 10 @ @ public class TypingModule extends AbsModule { < nl > ownTypingActor . send ( new OwnTypingActor . Typing ( peer ) ) ; < nl > } < nl > < nl > + public void onMessageSent ( Peer peer ) { < nl > + ownTypingActor . send ( new OwnTypingActor . MessageSent ( peer ) ) ; < nl > + } < nl > + < nl > public void resetModule ( ) { < nl > / / TODO : Implement < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java < nl > index 341880a . . faf08d0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java < nl > @ @ - 6 , 6 + 6 , 7 @ @ package im . actor . core . modules . internal . typing ; < nl > < nl > import im . actor . core . api . ApiOutPeer ; < nl > import im . actor . core . api . ApiTypingType ; < nl > + import im . actor . core . api . rpc . RequestStopTyping ; < nl > import im . actor . core . api . rpc . RequestTyping ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . modules . ModuleContext ; < nl > @ @ - 30 , 9 + 31 , 12 @ @ public class OwnTypingActor extends ModuleActor { < nl > } < nl > < nl > private static final long TYPING _ DELAY = 3000L ; < nl > + private static final long TYPING _ CANCEL _ DELAY = 4000L ; < nl > < nl > private long lastTypingTime = 0 ; < nl > < nl > + private long prevRid = 0 ; < nl > + < nl > @ Verified < nl > public OwnTypingActor ( ModuleContext messenger ) { < nl > super ( messenger ) ; < nl > @ @ - 50 , 7 + 54 , 31 @ @ public class OwnTypingActor extends ModuleActor { < nl > return ; < nl > } < nl > < nl > - request ( new RequestTyping ( outPeer , ApiTypingType . TEXT ) ) ; < nl > + cancelPrevRequest ( ) ; < nl > + prevRid = request ( new RequestTyping ( outPeer , ApiTypingType . TEXT ) ) ; < nl > + self ( ) . sendOnce ( new AbortTyping ( peer ) , TYPING _ CANCEL _ DELAY ) ; < nl > + } < nl > + < nl > + private void onMessageSent ( Peer peer ) { < nl > + cancelPrevRequest ( ) ; < nl > + lastTypingTime = 0 ; < nl > + self ( ) . sendOnce ( new AbortTyping ( peer ) , 24 * 60 * 60 * 1000L ) ; < nl > + } < nl > + < nl > + private void onAbortTyping ( Peer peer ) { < nl > + ApiOutPeer outPeer = buidOutPeer ( peer ) ; < nl > + if ( outPeer = = null ) { < nl > + return ; < nl > + } < nl > + cancelPrevRequest ( ) ; < nl > + prevRid = request ( new RequestStopTyping ( outPeer , ApiTypingType . TEXT ) ) ; < nl > + } < nl > + < nl > + private void cancelPrevRequest ( ) { < nl > + if ( prevRid ! = 0 ) { < nl > + cancelRequest ( prevRid ) ; < nl > + prevRid = 0 ; < nl > + } < nl > } < nl > < nl > / / Messages < nl > @ @ - 59 , 11 + 87 , 27 @ @ public class OwnTypingActor extends ModuleActor { < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof Typing ) { < nl > onTyping ( ( ( Typing ) message ) . getPeer ( ) ) ; < nl > + } else if ( message instanceof MessageSent ) { < nl > + onMessageSent ( ( ( MessageSent ) message ) . getPeer ( ) ) ; < nl > + } else if ( message instanceof AbortTyping ) { < nl > + onAbortTyping ( ( ( AbortTyping ) message ) . getPeer ( ) ) ; < nl > } else { < nl > drop ( message ) ; < nl > } < nl > } < nl > < nl > + private static class AbortTyping { < nl > + private Peer peer ; < nl > + < nl > + public AbortTyping ( Peer peer ) { < nl > + this . peer = peer ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + } < nl > + < nl > public static class Typing { < nl > private Peer peer ; < nl > < nl > @ @ - 75 , 4 + 119 , 17 @ @ public class OwnTypingActor extends ModuleActor { < nl > return peer ; < nl > } < nl > } < nl > + < nl > + public static class MessageSent { < nl > + < nl > + private Peer peer ; < nl > + < nl > + public MessageSent ( Peer peer ) { < nl > + this . peer = peer ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java < nl > index ace0a50 . . 674756e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java < nl > @ @ - 32 , 8 + 32 , 18 @ @ public class TypingProcessor extends AbsModule { < nl > } < nl > } < nl > < nl > + @ Verified < nl > public void onTypingStop ( ApiPeer peer , int uid , ApiTypingType typingType ) { < nl > - < nl > + / / Other types are unsupported < nl > + / / TODO : Move to Actor < nl > + if ( typingType ! = ApiTypingType . TEXT ) { < nl > + return ; < nl > + } < nl > + if ( peer . getType ( ) = = ApiPeerType . PRIVATE ) { < nl > + typingActor . sendOnce ( new TypingActor . StopTyping ( uid ) ) ; < nl > + } else if ( peer . getType ( ) = = ApiPeerType . GROUP ) { < nl > + typingActor . sendOnce ( new TypingActor . StopGroupTyping ( peer . getId ( ) , uid ) ) ; < nl > + } < nl > } < nl > < nl > @ Verified < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > index 8a2998c . . ab71f3a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > @ @ - 40 , 6 + 40 , 7 @ @ import im . actor . core . api . updates . UpdateMessageReceived ; < nl > import im . actor . core . api . updates . UpdateMessageSent ; < nl > import im . actor . core . api . updates . UpdateParameterChanged ; < nl > import im . actor . core . api . updates . UpdateTyping ; < nl > + import im . actor . core . api . updates . UpdateTypingStop ; < nl > import im . actor . core . api . updates . UpdateUserLastSeen ; < nl > import im . actor . core . api . updates . UpdateUserLocalNameChanged ; < nl > import im . actor . core . api . updates . UpdateUserOffline ; < nl > @ @ - 198 , 6 + 199 , 9 @ @ public class UpdateProcessor extends AbsModule { < nl > } else if ( update instanceof UpdateTyping ) { < nl > UpdateTyping typing = ( UpdateTyping ) update ; < nl > typingProcessor . onTyping ( typing . getPeer ( ) , typing . getUid ( ) , typing . getTypingType ( ) ) ; < nl > + } else if ( update instanceof UpdateTypingStop ) { < nl > + UpdateTypingStop typing = ( UpdateTypingStop ) update ; < nl > + typingProcessor . onTypingStop ( typing . getPeer ( ) , typing . getUid ( ) , typing . getTypingType ( ) ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java < nl > index 67b681e . . 072af9f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java < nl > @ @ - 130 , 8 + 130 , 8 @ @ public class ModuleActor extends Actor implements BusSubscriber { < nl > return context ; < nl > } < nl > < nl > - public < T extends Response > void request ( Request < T > request ) { < nl > - request ( request , new RpcCallback < T > ( ) { < nl > + public < T extends Response > long request ( Request < T > request ) { < nl > + return request ( request , new RpcCallback < T > ( ) { < nl > @ Override < nl > public void onResult ( T response ) { < nl > < nl > @ @ - 144 , 8 + 144 , 8 @ @ public class ModuleActor extends Actor implements BusSubscriber { < nl > } ) ; < nl > } < nl > < nl > - public < T extends Response > void request ( final Request < T > request , final RpcCallback < T > callback ) { < nl > - context . getActorApi ( ) . request ( request , new RpcCallback < T > ( ) { < nl > + public < T extends Response > long request ( final Request < T > request , final RpcCallback < T > callback ) { < nl > + return context . getActorApi ( ) . request ( request , new RpcCallback < T > ( ) { < nl > @ Override < nl > public void onResult ( final T response ) { < nl > self ( ) . send ( new Runnable ( ) { < nl > @ @ - 178 , 6 + 178 , 10 @ @ public class ModuleActor extends Actor implements BusSubscriber { < nl > } ) ; < nl > } < nl > < nl > + public void cancelRequest ( long rid ) { < nl > + context . getActorApi ( ) . cancelRequest ( rid ) ; < nl > + } < nl > + < nl > @ Override < nl > public void onBusEvent ( Event event ) { < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java < nl > index a019d60 . . acfcafa 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java < nl > @ @ - 11 , 6 + 11 , 7 @ @ import im . actor . core . network . api . ApiBroker ; < nl > import im . actor . core . network . parser . Request ; < nl > import im . actor . core . network . parser . Response ; < nl > import im . actor . runtime . threading . AtomicIntegerCompat ; < nl > + import im . actor . runtime . threading . AtomicLongCompat ; < nl > < nl > / * * < nl > * Actor API Object for connecting to Actor ' s servers < nl > @ @ - 22 , 6 + 23 , 7 @ @ public class ActorApi { < nl > public static final int API _ MINOR _ VERSION = ApiVersion . VERSION _ MINOR ; < nl > < nl > private static final AtomicIntegerCompat NEXT _ ID = im . actor . runtime . Runtime . createAtomicInt ( 1 ) ; < nl > + private static final AtomicLongCompat NEXT _ RPC _ ID = im . actor . runtime . Runtime . createAtomicLong ( 1 ) ; < nl > < nl > private final Endpoints endpoints ; < nl > private final AuthKeyStorage keyStorage ; < nl > @ @ - 62 , 13 + 64 , 24 @ @ public class ActorApi { < nl > * @ param request request body < nl > * @ param callback request callback < nl > * @ param < T > type of response < nl > + * @ return rid of request < nl > * / < nl > - public synchronized < T extends Response > void request ( Request < T > request , RpcCallback < T > callback ) { < nl > + public synchronized < T extends Response > long request ( Request < T > request , RpcCallback < T > callback ) { < nl > if ( request = = null ) { < nl > throw new RuntimeException ( " Request can ' t be null " ) ; < nl > } < nl > + long rid = NEXT _ RPC _ ID . incrementAndGet ( ) ; < nl > + this . apiBroker . send ( new ApiBroker . PerformRequest ( rid , request , callback ) ) ; < nl > + return rid ; < nl > + } < nl > < nl > - this . apiBroker . send ( new ApiBroker . PerformRequest ( request , callback ) ) ; < nl > + / * * < nl > + * Cancelling API Request < nl > + * < nl > + * @ param rid request rid < nl > + * / < nl > + public synchronized void cancelRequest ( long rid ) { < nl > + this . apiBroker . send ( new ApiBroker . CancelRequest ( rid ) ) ; < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > index 207ffca . . 06f4742 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > @ @ - 60 , 7 + 60 , 7 @ @ public class ApiBroker extends Actor { < nl > } < nl > < nl > private static final String TAG = " ApiBroker " ; < nl > - private static final AtomicLongCompat NEXT _ RPC _ ID = im . actor . runtime . Runtime . createAtomicLong ( 1 ) ; < nl > + < nl > private static final AtomicIntegerCompat NEXT _ PROTO _ ID = im . actor . runtime . Runtime . createAtomicInt ( 1 ) ; < nl > < nl > private final Endpoints endpoints ; < nl > @ @ - 360 , 14 + 360 , 21 @ @ public class ApiBroker extends Actor { < nl > } < nl > < nl > public static class PerformRequest { < nl > + < nl > private Request message ; < nl > private RpcCallback callback ; < nl > + private long rid ; < nl > < nl > - public PerformRequest ( Request message , RpcCallback callback ) { < nl > + public PerformRequest ( long rid , Request message , RpcCallback callback ) { < nl > + this . rid = rid ; < nl > this . message = message ; < nl > this . callback = callback ; < nl > } < nl > < nl > + public long getRid ( ) { < nl > + return rid ; < nl > + } < nl > + < nl > public Request getMessage ( ) { < nl > return message ; < nl > } < nl > @ @ - 577 , 8 + 584 , 7 @ @ public class ApiBroker extends Actor { < nl > createMtProto ( initMTProto . getAuthId ( ) ) ; < nl > } else if ( message instanceof PerformRequest ) { < nl > PerformRequest request = ( PerformRequest ) message ; < nl > - performRequest ( NEXT _ RPC _ ID . getAndIncrement ( ) , < nl > - request . getMessage ( ) , request . getCallback ( ) ) ; < nl > + performRequest ( request . getRid ( ) , request . getMessage ( ) , request . getCallback ( ) ) ; < nl > } else if ( message instanceof CancelRequest ) { < nl > CancelRequest cancelRequest = ( CancelRequest ) message ; < nl > cancelRequest ( cancelRequest . getRandomId ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java < nl > index f203ad1 . . 6aee0c3 100755 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java < nl > @ @ - 116 , 6 + 116 , 22 @ @ public class BserWriter { < nl > } < nl > } < nl > < nl > + public void writeRepeatedString ( int fieldNumber , @ NotNull List < String > values ) throws IOException { < nl > + if ( values = = null ) { < nl > + throw new IllegalArgumentException ( " Values can not be null " ) ; < nl > + } < nl > + if ( values . size ( ) > BserLimits . MAX _ PROTO _ REPEATED ) { < nl > + throw new IllegalArgumentException ( " Too many values " ) ; < nl > + } < nl > + writtenFields . put ( fieldNumber , true ) ; < nl > + for ( String l : values ) { < nl > + if ( l = = null ) { < nl > + throw new IllegalArgumentException ( " Value can not be null " ) ; < nl > + } < nl > + writeString ( fieldNumber , l ) ; < nl > + } < nl > + } < nl > + < nl > public void writeRepeatedBytes ( int fieldNumber , @ NotNull List < byte [ ] > values ) throws IOException { < nl > if ( values = = null ) { < nl > throw new IllegalArgumentException ( " Values can not be null " ) ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json 
 index f3497d9 . . 7316b4f 100644 
 - - - a / actor - sdk / sdk - api / actor . json 
 + + + b / actor - sdk / sdk - api / actor . json 
 @ @ - 6637 , 7 + 6637 , 7 @ @ 
 { 
 " type " : " reference " , 
 " argument " : " dialogs " , 
 - " category " : " full " , 
 + " category " : " compact " , 
 " description " : " New dialgos list " 
 } 
 ] , 
 diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 index 2416c8a . . 39bb962 100644 
 - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 @ @ - 5917 , 7 + 5917 , 7 @ @ 
 < property role = " NXePf " value = " Update about chat groups changed . Called only when adding , removing and reordering of grouped dialog . " / > 
 < / node > 
 < node concept = " NX1gA " id = " 5TxE3W70c _ I " role = " NXp _ 2 " > 
 - < property role = " 1GSvIU " value = " full " / > 
 + < property role = " 1GSvIU " value = " compact " / > 
 < property role = " NX6R2 " value = " New dialgos list " / > 
 < ref role = " NX6Kv " node = " 5TxE3W70qfx " resolve = " dialogs " / > 
 < / node > 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleCell . swift 
 index 294eed0 . . 98954e7 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleCell . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Cell / AABubbleCell . swift 
 @ @ - 179 , 8 + 179 , 6 @ @ public class AABubbleCell : UICollectionViewCell { 
 
 contentView . transform = CGAffineTransformMake ( 1 , 0 , 0 , - 1 , 0 , 0 ) 
 
 - ActorSDK . sharedActor ( ) . style . bubbleShadowEnabled ? contentView . addSubview ( bubbleShadow ) : print ( " go to light ! " ) 
 - 
 contentView . addSubview ( bubble ) 
 contentView . addSubview ( bubbleBorder ) 
 contentView . addSubview ( newMessage ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 index f576943 . . 9fe626f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 @ @ - 434 , 7 + 434 , 7 @ @ public class ConversationViewController : 
 let group = Actor . getGroupWithGid ( peer . peerId ) 
 if ! group . isMember . get ( ) . booleanValue ( ) { 
 if group . isCanJoin . get ( ) . booleanValue ( ) { 
 - / / T 
 + executePromise ( Actor . joinGroupWithGid ( peer . peerId ) ) 
 } else { 
 / / DO NOTHING 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 1a908ad . . 73c3f9a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 1702 , 6 + 1702 , 18 @ @ public class Messenger { 
 } 
 
 / * * 
 + * Join group 
 + * 
 + * @ param gid group ' s id 
 + * @ return Promise of Void 
 + * / 
 + @ NotNull 
 + @ ObjectiveCName ( " joinGroupWithGid : " ) 
 + public Promise < Void > joinGroup ( int gid ) { 
 + return modules . getGroupsModule ( ) . joinGroup ( gid ) ; 
 + } 
 + 
 + / * * 
 * Request integration token for group 
 * 
 * @ param gid group ' s id 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / parser / RpcParser . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / parser / RpcParser . java 
 index 709b69a . . e628db2 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / parser / RpcParser . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / parser / RpcParser . java 
 @ @ - 89 , 6 + 89 , 7 @ @ public class RpcParser extends BaseParser < RpcScope > { 
 case 70 : return RequestLeaveGroup . fromBytes ( payload ) ; 
 case 2721 : return RequestLeaveAndDelete . fromBytes ( payload ) ; 
 case 71 : return RequestKickUser . fromBytes ( payload ) ; 
 + case 2722 : return RequestJoinGroupByPeer . fromBytes ( payload ) ; 
 case 2784 : return RequestMakeUserAdmin . fromBytes ( payload ) ; 
 case 2791 : return RequestDismissUserAdmin . fromBytes ( payload ) ; 
 case 2789 : return RequestTransferOwnership . fromBytes ( payload ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / rpc / RequestJoinGroupByPeer . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / rpc / RequestJoinGroupByPeer . java 
 new file mode 100644 
 index 0000000 . . 261437e 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / rpc / RequestJoinGroupByPeer . java 
 @ @ - 0 , 0 + 1 , 65 @ @ 
 + package im . actor . core . api . rpc ; 
 + / * 
 + * Generated by the Actor API Scheme generator . DO NOT EDIT ! 
 + * / 
 + 
 + import im . actor . runtime . bser . * ; 
 + import im . actor . runtime . collections . * ; 
 + import static im . actor . runtime . bser . Utils . * ; 
 + import im . actor . core . network . parser . * ; 
 + import org . jetbrains . annotations . Nullable ; 
 + import org . jetbrains . annotations . NotNull ; 
 + import com . google . j2objc . annotations . ObjectiveCName ; 
 + import java . io . IOException ; 
 + import java . util . List ; 
 + import java . util . ArrayList ; 
 + import im . actor . core . api . * ; 
 + 
 + public class RequestJoinGroupByPeer extends Request < ResponseSeq > { 
 + 
 + public static final int HEADER = 0xaa2 ; 
 + public static RequestJoinGroupByPeer fromBytes ( byte [ ] data ) throws IOException { 
 + return Bser . parse ( new RequestJoinGroupByPeer ( ) , data ) ; 
 + } 
 + 
 + private ApiGroupOutPeer groupPeer ; 
 + 
 + public RequestJoinGroupByPeer ( @ NotNull ApiGroupOutPeer groupPeer ) { 
 + this . groupPeer = groupPeer ; 
 + } 
 + 
 + public RequestJoinGroupByPeer ( ) { 
 + 
 + } 
 + 
 + @ NotNull 
 + public ApiGroupOutPeer getGroupPeer ( ) { 
 + return this . groupPeer ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + this . groupPeer = values . getObj ( 1 , new ApiGroupOutPeer ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + if ( this . groupPeer = = null ) { 
 + throw new IOException ( ) ; 
 + } 
 + writer . writeObject ( 1 , this . groupPeer ) ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + String res = " rpc JoinGroupByPeer { " ; 
 + res + = " groupPeer = " + this . groupPeer ; 
 + res + = " } " ; 
 + return res ; 
 + } 
 + 
 + @ Override 
 + public int getHeaderKey ( ) { 
 + return HEADER ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / updates / UpdateChatGroupsChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / updates / UpdateChatGroupsChanged . java 
 index 7157573 . . 2e88bbe 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / updates / UpdateChatGroupsChanged . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / updates / UpdateChatGroupsChanged . java 
 @ @ - 54 , 7 + 54 , 7 @ @ public class UpdateChatGroupsChanged extends Update { 
 @ Override 
 public String toString ( ) { 
 String res = " update ChatGroupsChanged { " ; 
 - res + = " dialogs = " + this . dialogs ; 
 + res + = " dialogs = " + this . dialogs . size ( ) ; 
 res + = " } " ; 
 return res ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java 
 index c1c2fd8 . . 0b15da2 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsModule . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import im . actor . core . api . rpc . RequestGetGroupInviteUrl ; 
 import im . actor . core . api . rpc . RequestGetIntegrationToken ; 
 import im . actor . core . api . rpc . RequestInviteUser ; 
 import im . actor . core . api . rpc . RequestJoinGroup ; 
 + import im . actor . core . api . rpc . RequestJoinGroupByPeer ; 
 import im . actor . core . api . rpc . RequestKickUser ; 
 import im . actor . core . api . rpc . RequestLeaveAndDelete ; 
 import im . actor . core . api . rpc . RequestLeaveGroup ; 
 @ @ - 343 , 6 + 344 , 15 @ @ public class GroupsModule extends AbsModule implements BusSubscriber { 
 . map ( responseJoinGroup - > responseJoinGroup . getGroup ( ) . getId ( ) ) ; 
 } 
 
 + public Promise < Void > joinGroup ( int gid ) { 
 + return getGroups ( ) . getValueAsync ( gid ) 
 + . flatMap ( group - > 
 + api ( new RequestJoinGroupByPeer ( 
 + new ApiGroupOutPeer ( group . getGroupId ( ) , group . getAccessHash ( ) ) ) ) ) 
 + . chain ( r - > updates ( ) . waitForUpdate ( r . getSeq ( ) ) ) 
 + . map ( r - > null ) ; 
 + } 
 + 
 / / 
 / / Integration Token 
 / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java 
 index 4cceb5c . . 6ac9f16 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / history / ConversationHistoryActor . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . modules . api . ApiSupportConfiguration ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . ModuleActor ; 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . actors . ask . AskMessage ; 
 import im . actor . runtime . actors . messages . Void ; 
 import im . actor . runtime . function . Consumer ; 
 @ @ - 69 , 27 + 70 , 38 @ @ public class ConversationHistoryActor extends ModuleActor { 
 api ( new RequestLoadHistory ( buidOutPeer ( peer ) , historyMaxDate , null , LIMIT , ApiSupportConfiguration . OPTIMIZATIONS ) ) 
 . chain ( r - > updates ( ) . applyRelatedData ( r . getUsers ( ) , r . getGroups ( ) ) ) 
 . chain ( r - > updates ( ) . loadRequiredPeers ( r . getUserPeers ( ) , r . getGroupPeers ( ) ) ) 
 - . then ( applyHistory ( peer ) ) 
 - . then ( responseLoadHistory - > { 
 + . flatMap ( r - > { 
 + Log . d ( " HistoryActor " , " Apply " + historyMaxDate ) ; 
 + return applyHistory ( peer , r . getHistory ( ) ) ; 
 + } ) 
 + . map ( r - > { 
 + Log . d ( " HistoryActor " , " Applied " ) ; 
 isFreezed = false ; 
 unstashAll ( ) ; 
 + return null ; 
 } ) ; 
 } 
 
 - private void onReset ( ) { 
 - historyMaxDate = 0 ; 
 + private Promise < Void > onReset ( ) { 
 + 
 + Log . d ( " HistoryActor " , " Reset " ) ; 
 + 
 + historyMaxDate = Long . MAX _ VALUE ; 
 preferences ( ) . putLong ( KEY _ LOADED _ DATE , Long . MAX _ VALUE ) ; 
 historyLoaded = false ; 
 preferences ( ) . putBool ( KEY _ LOADED , false ) ; 
 preferences ( ) . putBool ( KEY _ LOADED _ INIT , false ) ; 
 - self ( ) . send ( new LoadMore ( ) ) ; 
 - } 
 
 - private Consumer < ResponseLoadHistory > applyHistory ( final Peer peer ) { 
 - return responseLoadHistory - > applyHistory ( peer , responseLoadHistory . getHistory ( ) ) ; 
 + isFreezed = true ; 
 + return context ( ) . getMessagesModule ( ) . getRouter ( ) . onChatReset ( peer ) 
 + . then ( r - > { 
 + isFreezed = false ; 
 + unstashAll ( ) ; 
 + onLoadMore ( ) ; 
 + } ) ; 
 } 
 
 - private void applyHistory ( Peer peer , List < ApiMessageContainer > history ) { 
 + private Promise < Void > applyHistory ( Peer peer , List < ApiMessageContainer > history ) { 
 
 ArrayList < Message > messages = new ArrayList < > ( ) ; 
 long maxLoadedDate = Long . MAX _ VALUE ; 
 @ @ - 120 , 9 + 132 , 9 @ @ public class ConversationHistoryActor extends ModuleActor { 
 
 / / Sending updates to conversation actor 
 final long finalMaxLoadedDate = maxLoadedDate ; 
 - context ( ) . getMessagesModule ( ) . getRouter ( ) 
 + return context ( ) . getMessagesModule ( ) . getRouter ( ) 
 . onChatHistoryLoaded ( peer , messages , maxReceiveDate , maxReadDate , isEnded ) 
 - . then ( r - > { 
 + . map ( r - > { 
 / / Saving Internal State 
 if ( isEnded ) { 
 historyLoaded = true ; 
 @ @ - 133 , 6 + 145 , 7 @ @ public class ConversationHistoryActor extends ModuleActor { 
 preferences ( ) . putLong ( KEY _ LOADED _ DATE , finalMaxLoadedDate ) ; 
 preferences ( ) . putBool ( KEY _ LOADED , historyLoaded ) ; 
 preferences ( ) . putBool ( KEY _ LOADED _ INIT , true ) ; 
 + return r ; 
 } ) ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 index fffd592 . . 4b5923c 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 @ @ - 61 , 11 + 61 , 13 @ @ import im . actor . core . modules . messaging . router . entity . RouterOutgoingError ; 
 import im . actor . core . modules . messaging . router . entity . RouterOutgoingMessage ; 
 import im . actor . core . modules . messaging . router . entity . RouterOutgoingSent ; 
 import im . actor . core . modules . messaging . router . entity . RouterPeersChanged ; 
 + import im . actor . core . modules . messaging . router . entity . RouterResetChat ; 
 import im . actor . core . network . parser . Update ; 
 import im . actor . core . util . JavaUtil ; 
 import im . actor . core . viewmodel . DialogGroup ; 
 import im . actor . core . viewmodel . DialogSmall ; 
 import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . actors . messages . Void ; 
 import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . storage . KeyValueEngine ; 
 @ @ - 402 , 6 + 404 , 8 @ @ public class RouterActor extends ModuleActor { 
 private Promise < Void > onChatHistoryLoaded ( Peer peer , List < Message > messages , Long maxReadDate , 
 Long maxReceiveDate , boolean isEnded ) { 
 
 + Log . d ( TAG , " History Loaded " ) ; 
 + 
 long maxMessageDate = 0 ; 
 
 / / Processing all new messages 
 @ @ - 521 , 18 + 525 , 22 @ @ public class RouterActor extends ModuleActor { 
 } 
 
 private Promise < Void > onChatDropCache ( Peer peer ) { 
 - return context ( ) . getMessagesModule ( ) . getHistoryActor ( peer ) . reset ( ) 
 - . flatMap ( r - > { 
 - conversation ( peer ) . clear ( ) ; 
 + return context ( ) . getMessagesModule ( ) . getHistoryActor ( peer ) . reset ( ) ; 
 + } 
 
 - ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; 
 - state = state . changeIsLoaded ( false ) ; 
 - conversationStates . addOrUpdateItem ( state ) ; 
 + private Promise < Void > onChatReset ( Peer peer ) { 
 
 - updateChatState ( peer ) ; 
 + Log . d ( TAG , " onChatReset " ) ; 
 
 - return getDialogsRouter ( ) . onChatClear ( peer ) ; 
 - } ) ; 
 + conversation ( peer ) . clear ( ) ; 
 + 
 + ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; 
 + state = state . changeIsLoaded ( false ) ; 
 + conversationStates . addOrUpdateItem ( state ) ; 
 + 
 + updateChatState ( peer ) ; 
 + 
 + return Promise . success ( null ) ; 
 } 
 
 private Promise < Void > onChatDelete ( Peer peer ) { 
 @ @ - 981 , 6 + 989 , 9 @ @ public class RouterActor extends ModuleActor { 
 return onMessageDeleted ( 
 routerDeletedMessages . getPeer ( ) , 
 routerDeletedMessages . getRids ( ) ) ; 
 + } else if ( message instanceof RouterResetChat ) { 
 + RouterResetChat resetChat = ( RouterResetChat ) message ; 
 + return onChatReset ( resetChat . getPeer ( ) ) ; 
 } else { 
 return super . onAsk ( message ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java 
 index df8370a . . 1bc228a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterInt . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import im . actor . core . modules . messaging . router . entity . RouterNewMessages ; 
 import im . actor . core . modules . messaging . router . entity . RouterOutgoingError ; 
 import im . actor . core . modules . messaging . router . entity . RouterOutgoingMessage ; 
 import im . actor . core . modules . messaging . router . entity . RouterPeersChanged ; 
 + import im . actor . core . modules . messaging . router . entity . RouterResetChat ; 
 import im . actor . core . network . parser . Update ; 
 import im . actor . runtime . actors . ActorInterface ; 
 import im . actor . runtime . actors . messages . Void ; 
 @ @ - 150 , 6 + 151 , 10 @ @ public class RouterInt extends ActorInterface implements BusSubscriber { 
 return ask ( new RouterPeersChanged ( users , groups ) ) ; 
 } 
 
 + / / Resetting 
 + public Promise < Void > onChatReset ( Peer peer ) { 
 + return ask ( new RouterResetChat ( peer ) ) ; 
 + } 
 
 @ Override 
 public void onBusEvent ( Event event ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / RouterResetChat . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / RouterResetChat . java 
 new file mode 100644 
 index 0000000 . . cc00cec 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / entity / RouterResetChat . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package im . actor . core . modules . messaging . router . entity ; 
 + 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . actors . messages . Void ; 
 + 
 + public class RouterResetChat implements AskMessage < Void > { 
 + 
 + private Peer peer ; 
 + 
 + public RouterResetChat ( Peer peer ) { 
 + this . peer = peer ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java 
 index 21da5d0 . . 654a7b1 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java 
 @ @ - 78 , 7 + 78 , 10 @ @ public class SequenceHandlerActor extends ModuleActor { 
 
 / / Update Application 
 currentPromise = currentPromise 
 - . chain ( v - > processor . processUpdate ( update ) ) ; 
 + . chain ( v - > processor . processUpdate ( update ) ) 
 + . then ( v - > { 
 + Log . d ( TAG , " Ended processing update : " + update ) ; 
 + } ) ; 
 
 / / Handling update end 
 currentPromise . then ( v - > endUpdates ( ) ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 index fb24226 . . 779750d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 @ @ - 150 , 7 + 150 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 w . getNick ( ) , 
 w . getAbout ( ) , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 @ @ - 168 , 7 + 170 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 w . getNick ( ) , 
 w . getAbout ( ) , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 @ @ - 186 , 7 + 190 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 nick , 
 w . getAbout ( ) , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 @ @ - 204 , 7 + 210 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 w . getNick ( ) , 
 about , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 @ @ - 222 , 7 + 230 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 w . getNick ( ) , 
 w . getAbout ( ) , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java 
 index 2f83c05 . . 8a0b75a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java 
 @ @ - 118 , 7 + 118 , 8 @ @ public class Authentication { 
 apiConfiguration . getAppId ( ) , 
 apiConfiguration . getAppKey ( ) , 
 deviceHash , 
 - apiConfiguration . getDeviceTitle ( ) 
 + apiConfiguration . getDeviceTitle ( ) , 
 + null , new ArrayList < String > ( ) 
 ) , new RpcCallback < ResponseStartEmailAuth > ( ) { 
 @ Override 
 public void onResult ( ResponseStartEmailAuth response ) { 
 @ @ - 163 , 7 + 164 , 8 @ @ public class Authentication { 
 apiConfiguration . getAppId ( ) , 
 apiConfiguration . getAppKey ( ) , 
 deviceHash , 
 - apiConfiguration . getDeviceTitle ( ) 
 + apiConfiguration . getDeviceTitle ( ) , 
 + null , new ArrayList < String > ( ) 
 ) , new RpcCallback < ResponseStartPhoneAuth > ( ) { 
 @ Override 
 public void onResult ( ResponseStartPhoneAuth response ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 11630f1 . . bfbd171 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 288 , 6 + 288 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 public void sendMessage ( @ NotNull Peer peer , @ NotNull String message , @ Nullable String markDownText , 
 @ Nullable ArrayList < Integer > mentions , boolean autoDetect ) { 
 + / / Notify typing about message sent 
 + context ( ) . getTypingModule ( ) . onMessageSent ( peer ) ; 
 sendMessageActor . send ( new SenderActor . SendText ( peer , message , markDownText , mentions , 
 autoDetect ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java 
 index 72ce08e . . c867fb0 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java 
 @ @ - 51 , 6 + 51 , 10 @ @ public class TypingModule extends AbsModule { 
 ownTypingActor . send ( new OwnTypingActor . Typing ( peer ) ) ; 
 } 
 
 + public void onMessageSent ( Peer peer ) { 
 + ownTypingActor . send ( new OwnTypingActor . MessageSent ( peer ) ) ; 
 + } 
 + 
 public void resetModule ( ) { 
 / / TODO : Implement 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java 
 index 341880a . . faf08d0 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java 
 @ @ - 6 , 6 + 6 , 7 @ @ package im . actor . core . modules . internal . typing ; 
 
 import im . actor . core . api . ApiOutPeer ; 
 import im . actor . core . api . ApiTypingType ; 
 + import im . actor . core . api . rpc . RequestStopTyping ; 
 import im . actor . core . api . rpc . RequestTyping ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . modules . ModuleContext ; 
 @ @ - 30 , 9 + 31 , 12 @ @ public class OwnTypingActor extends ModuleActor { 
 } 
 
 private static final long TYPING _ DELAY = 3000L ; 
 + private static final long TYPING _ CANCEL _ DELAY = 4000L ; 
 
 private long lastTypingTime = 0 ; 
 
 + private long prevRid = 0 ; 
 + 
 @ Verified 
 public OwnTypingActor ( ModuleContext messenger ) { 
 super ( messenger ) ; 
 @ @ - 50 , 7 + 54 , 31 @ @ public class OwnTypingActor extends ModuleActor { 
 return ; 
 } 
 
 - request ( new RequestTyping ( outPeer , ApiTypingType . TEXT ) ) ; 
 + cancelPrevRequest ( ) ; 
 + prevRid = request ( new RequestTyping ( outPeer , ApiTypingType . TEXT ) ) ; 
 + self ( ) . sendOnce ( new AbortTyping ( peer ) , TYPING _ CANCEL _ DELAY ) ; 
 + } 
 + 
 + private void onMessageSent ( Peer peer ) { 
 + cancelPrevRequest ( ) ; 
 + lastTypingTime = 0 ; 
 + self ( ) . sendOnce ( new AbortTyping ( peer ) , 24 * 60 * 60 * 1000L ) ; 
 + } 
 + 
 + private void onAbortTyping ( Peer peer ) { 
 + ApiOutPeer outPeer = buidOutPeer ( peer ) ; 
 + if ( outPeer = = null ) { 
 + return ; 
 + } 
 + cancelPrevRequest ( ) ; 
 + prevRid = request ( new RequestStopTyping ( outPeer , ApiTypingType . TEXT ) ) ; 
 + } 
 + 
 + private void cancelPrevRequest ( ) { 
 + if ( prevRid ! = 0 ) { 
 + cancelRequest ( prevRid ) ; 
 + prevRid = 0 ; 
 + } 
 } 
 
 / / Messages 
 @ @ - 59 , 11 + 87 , 27 @ @ public class OwnTypingActor extends ModuleActor { 
 public void onReceive ( Object message ) { 
 if ( message instanceof Typing ) { 
 onTyping ( ( ( Typing ) message ) . getPeer ( ) ) ; 
 + } else if ( message instanceof MessageSent ) { 
 + onMessageSent ( ( ( MessageSent ) message ) . getPeer ( ) ) ; 
 + } else if ( message instanceof AbortTyping ) { 
 + onAbortTyping ( ( ( AbortTyping ) message ) . getPeer ( ) ) ; 
 } else { 
 drop ( message ) ; 
 } 
 } 
 
 + private static class AbortTyping { 
 + private Peer peer ; 
 + 
 + public AbortTyping ( Peer peer ) { 
 + this . peer = peer ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + } 
 + 
 public static class Typing { 
 private Peer peer ; 
 
 @ @ - 75 , 4 + 119 , 17 @ @ public class OwnTypingActor extends ModuleActor { 
 return peer ; 
 } 
 } 
 + 
 + public static class MessageSent { 
 + 
 + private Peer peer ; 
 + 
 + public MessageSent ( Peer peer ) { 
 + this . peer = peer ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java 
 index ace0a50 . . 674756e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java 
 @ @ - 32 , 8 + 32 , 18 @ @ public class TypingProcessor extends AbsModule { 
 } 
 } 
 
 + @ Verified 
 public void onTypingStop ( ApiPeer peer , int uid , ApiTypingType typingType ) { 
 - 
 + / / Other types are unsupported 
 + / / TODO : Move to Actor 
 + if ( typingType ! = ApiTypingType . TEXT ) { 
 + return ; 
 + } 
 + if ( peer . getType ( ) = = ApiPeerType . PRIVATE ) { 
 + typingActor . sendOnce ( new TypingActor . StopTyping ( uid ) ) ; 
 + } else if ( peer . getType ( ) = = ApiPeerType . GROUP ) { 
 + typingActor . sendOnce ( new TypingActor . StopGroupTyping ( peer . getId ( ) , uid ) ) ; 
 + } 
 } 
 
 @ Verified 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 index 8a2998c . . ab71f3a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 @ @ - 40 , 6 + 40 , 7 @ @ import im . actor . core . api . updates . UpdateMessageReceived ; 
 import im . actor . core . api . updates . UpdateMessageSent ; 
 import im . actor . core . api . updates . UpdateParameterChanged ; 
 import im . actor . core . api . updates . UpdateTyping ; 
 + import im . actor . core . api . updates . UpdateTypingStop ; 
 import im . actor . core . api . updates . UpdateUserLastSeen ; 
 import im . actor . core . api . updates . UpdateUserLocalNameChanged ; 
 import im . actor . core . api . updates . UpdateUserOffline ; 
 @ @ - 198 , 6 + 199 , 9 @ @ public class UpdateProcessor extends AbsModule { 
 } else if ( update instanceof UpdateTyping ) { 
 UpdateTyping typing = ( UpdateTyping ) update ; 
 typingProcessor . onTyping ( typing . getPeer ( ) , typing . getUid ( ) , typing . getTypingType ( ) ) ; 
 + } else if ( update instanceof UpdateTypingStop ) { 
 + UpdateTypingStop typing = ( UpdateTypingStop ) update ; 
 + typingProcessor . onTypingStop ( typing . getPeer ( ) , typing . getUid ( ) , typing . getTypingType ( ) ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java 
 index 67b681e . . 072af9f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java 
 @ @ - 130 , 8 + 130 , 8 @ @ public class ModuleActor extends Actor implements BusSubscriber { 
 return context ; 
 } 
 
 - public < T extends Response > void request ( Request < T > request ) { 
 - request ( request , new RpcCallback < T > ( ) { 
 + public < T extends Response > long request ( Request < T > request ) { 
 + return request ( request , new RpcCallback < T > ( ) { 
 @ Override 
 public void onResult ( T response ) { 
 
 @ @ - 144 , 8 + 144 , 8 @ @ public class ModuleActor extends Actor implements BusSubscriber { 
 } ) ; 
 } 
 
 - public < T extends Response > void request ( final Request < T > request , final RpcCallback < T > callback ) { 
 - context . getActorApi ( ) . request ( request , new RpcCallback < T > ( ) { 
 + public < T extends Response > long request ( final Request < T > request , final RpcCallback < T > callback ) { 
 + return context . getActorApi ( ) . request ( request , new RpcCallback < T > ( ) { 
 @ Override 
 public void onResult ( final T response ) { 
 self ( ) . send ( new Runnable ( ) { 
 @ @ - 178 , 6 + 178 , 10 @ @ public class ModuleActor extends Actor implements BusSubscriber { 
 } ) ; 
 } 
 
 + public void cancelRequest ( long rid ) { 
 + context . getActorApi ( ) . cancelRequest ( rid ) ; 
 + } 
 + 
 @ Override 
 public void onBusEvent ( Event event ) { 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java 
 index a019d60 . . acfcafa 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import im . actor . core . network . api . ApiBroker ; 
 import im . actor . core . network . parser . Request ; 
 import im . actor . core . network . parser . Response ; 
 import im . actor . runtime . threading . AtomicIntegerCompat ; 
 + import im . actor . runtime . threading . AtomicLongCompat ; 
 
 / * * 
 * Actor API Object for connecting to Actor ' s servers 
 @ @ - 22 , 6 + 23 , 7 @ @ public class ActorApi { 
 public static final int API _ MINOR _ VERSION = ApiVersion . VERSION _ MINOR ; 
 
 private static final AtomicIntegerCompat NEXT _ ID = im . actor . runtime . Runtime . createAtomicInt ( 1 ) ; 
 + private static final AtomicLongCompat NEXT _ RPC _ ID = im . actor . runtime . Runtime . createAtomicLong ( 1 ) ; 
 
 private final Endpoints endpoints ; 
 private final AuthKeyStorage keyStorage ; 
 @ @ - 62 , 13 + 64 , 24 @ @ public class ActorApi { 
 * @ param request request body 
 * @ param callback request callback 
 * @ param < T > type of response 
 + * @ return rid of request 
 * / 
 - public synchronized < T extends Response > void request ( Request < T > request , RpcCallback < T > callback ) { 
 + public synchronized < T extends Response > long request ( Request < T > request , RpcCallback < T > callback ) { 
 if ( request = = null ) { 
 throw new RuntimeException ( " Request can ' t be null " ) ; 
 } 
 + long rid = NEXT _ RPC _ ID . incrementAndGet ( ) ; 
 + this . apiBroker . send ( new ApiBroker . PerformRequest ( rid , request , callback ) ) ; 
 + return rid ; 
 + } 
 
 - this . apiBroker . send ( new ApiBroker . PerformRequest ( request , callback ) ) ; 
 + / * * 
 + * Cancelling API Request 
 + * 
 + * @ param rid request rid 
 + * / 
 + public synchronized void cancelRequest ( long rid ) { 
 + this . apiBroker . send ( new ApiBroker . CancelRequest ( rid ) ) ; 
 } 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 index 207ffca . . 06f4742 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 @ @ - 60 , 7 + 60 , 7 @ @ public class ApiBroker extends Actor { 
 } 
 
 private static final String TAG = " ApiBroker " ; 
 - private static final AtomicLongCompat NEXT _ RPC _ ID = im . actor . runtime . Runtime . createAtomicLong ( 1 ) ; 
 + 
 private static final AtomicIntegerCompat NEXT _ PROTO _ ID = im . actor . runtime . Runtime . createAtomicInt ( 1 ) ; 
 
 private final Endpoints endpoints ; 
 @ @ - 360 , 14 + 360 , 21 @ @ public class ApiBroker extends Actor { 
 } 
 
 public static class PerformRequest { 
 + 
 private Request message ; 
 private RpcCallback callback ; 
 + private long rid ; 
 
 - public PerformRequest ( Request message , RpcCallback callback ) { 
 + public PerformRequest ( long rid , Request message , RpcCallback callback ) { 
 + this . rid = rid ; 
 this . message = message ; 
 this . callback = callback ; 
 } 
 
 + public long getRid ( ) { 
 + return rid ; 
 + } 
 + 
 public Request getMessage ( ) { 
 return message ; 
 } 
 @ @ - 577 , 8 + 584 , 7 @ @ public class ApiBroker extends Actor { 
 createMtProto ( initMTProto . getAuthId ( ) ) ; 
 } else if ( message instanceof PerformRequest ) { 
 PerformRequest request = ( PerformRequest ) message ; 
 - performRequest ( NEXT _ RPC _ ID . getAndIncrement ( ) , 
 - request . getMessage ( ) , request . getCallback ( ) ) ; 
 + performRequest ( request . getRid ( ) , request . getMessage ( ) , request . getCallback ( ) ) ; 
 } else if ( message instanceof CancelRequest ) { 
 CancelRequest cancelRequest = ( CancelRequest ) message ; 
 cancelRequest ( cancelRequest . getRandomId ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java 
 index f203ad1 . . 6aee0c3 100755 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java 
 @ @ - 116 , 6 + 116 , 22 @ @ public class BserWriter { 
 } 
 } 
 
 + public void writeRepeatedString ( int fieldNumber , @ NotNull List < String > values ) throws IOException { 
 + if ( values = = null ) { 
 + throw new IllegalArgumentException ( " Values can not be null " ) ; 
 + } 
 + if ( values . size ( ) > BserLimits . MAX _ PROTO _ REPEATED ) { 
 + throw new IllegalArgumentException ( " Too many values " ) ; 
 + } 
 + writtenFields . put ( fieldNumber , true ) ; 
 + for ( String l : values ) { 
 + if ( l = = null ) { 
 + throw new IllegalArgumentException ( " Value can not be null " ) ; 
 + } 
 + writeString ( fieldNumber , l ) ; 
 + } 
 + } 
 + 
 public void writeRepeatedBytes ( int fieldNumber , @ NotNull List < byte [ ] > values ) throws IOException { 
 if ( values = = null ) { 
 throw new IllegalArgumentException ( " Values can not be null " ) ;
