BLEU SCORE: 0.420886844306855

TEST MSG: fix ( server : files ) : fixed FileNotFoundException
GENERATED MSG: perf ( server : files ) : streaming file uploads in LocalFileStorage

TEST DIFF (one line): diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > index 07c6400 . . 6efaa70 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > @ @ - 11 , 6 + 11 , 7 @ @ import im . actor . server . db . DbExtension < nl > import im . actor . server . persist . FileRepo < nl > < nl > import scala . concurrent . { ExecutionContext , Future , blocking } < nl > + import scala . util . { Failure , Success } < nl > < nl > trait FileStorageOperations extends LocalUploadKeyImplicits { < nl > < nl > @ @ - 26 , 8 + 27 , 12 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { < nl > for { < nl > dir ← getOrCreateFileDir ( fileId ) < nl > file = dir / name < nl > - _ ← Source ( List ( ByteString ( data ) ) ) . runWith ( FileIO . toFile ( file . toJava ) ) map ( _ ⇒ ( ) ) < nl > - } yield ( ) < nl > + _ ← Future { blocking { file . createIfNotExists ( ) } } < nl > + ioRes ← Source ( List ( ByteString ( data ) ) ) . runWith ( FileIO . toFile ( file . toJava ) ) < nl > + } yield ioRes . status match { < nl > + case Success ( _ ) ⇒ ( ) < nl > + case Failure ( cause ) ⇒ throw cause < nl > + } < nl > } < nl > < nl > protected def prepareForPartWrite ( fileId : Long , partNumber : Int ) : Future [ Unit ] = {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > index f6ccac6 . . 07c6400 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > @ @ - 40 , 12 + 40 , 12 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { < nl > } yield ( ) < nl > } < nl > < nl > - protected def appendPartBytes ( bytes : Array [ Byte ] , fileId : Long , partNumber : Int ) : Future [ Unit ] = { < nl > + protected def appendPartBytes ( bs : Source [ ByteString , Any ] , fileId : Long , partNumber : Int ) : Future [ Unit ] = { < nl > for { < nl > dir ← getOrCreateFileDir ( fileId ) < nl > partFile ← Future { blocking { dir . createChild ( LocalUploadKey . partKey ( fileId , partNumber ) . key ) } } < nl > - _ = log . debug ( " Appending bytes to part number : { } , fileId : { } , data length : { } target file : { } " , partNumber , fileId , bytes . length , partFile ) < nl > - _ ← Source ( List ( ByteString ( bytes ) ) ) . runWith ( FileIO . toFile ( partFile . toJava , append = true ) ) < nl > + _ = log . debug ( " Appending bytes to part number : { } , fileId : { } , target file : { } " , partNumber , fileId , partFile ) < nl > + _ ← bs . runWith ( FileIO . toFile ( partFile . toJava , append = true ) ) < nl > } yield ( ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala < nl > index ea6cd16 . . 08827c4 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala < nl > @ @ - 74 , 9 + 74 , 7 @ @ private [ local ] final class FilesHttpHandler ( storageConfig : LocalFileStorageConfi < nl > extractRequest { req = > < nl > val writeFu = for { < nl > _ < - prepareForPartWrite ( fileId , partNumber ) < nl > - _ < - req . entity . dataBytes < nl > - . flatMapConcat ( bs = > Source . fromFuture ( writeContent ( bs , fileId , partNumber ) ) ) < nl > - . runForeach ( _ = > ( ) ) < nl > + _ < - appendPartBytes ( req . entity . dataBytes , fileId , partNumber ) < nl > } yield ( ) < nl > onComplete ( writeFu ) { < nl > case Success ( _ ) = > < nl > @ @ - 95 , 9 + 93 , 6 @ @ private [ local ] final class FilesHttpHandler ( storageConfig : LocalFileStorageConfi < nl > } < nl > / / format : ON < nl > < nl > - private def writeContent ( bs : ByteString , fileId : Long , partNumber : Int ) : Future [ Unit ] = < nl > - appendPartBytes ( bs . toArray , fileId , partNumber ) < nl > - < nl > def validateRequest : Directive0 = < nl > extractRequestContext flatMap { ctx ⇒ < nl > parameters ( ( " signature " , " expires " . as [ Long ] ) ) tflatMap {

TEST DIFF:
diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 index 07c6400 . . 6efaa70 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 @ @ - 11 , 6 + 11 , 7 @ @ import im . actor . server . db . DbExtension 
 import im . actor . server . persist . FileRepo 
 
 import scala . concurrent . { ExecutionContext , Future , blocking } 
 + import scala . util . { Failure , Success } 
 
 trait FileStorageOperations extends LocalUploadKeyImplicits { 
 
 @ @ - 26 , 8 + 27 , 12 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { 
 for { 
 dir ← getOrCreateFileDir ( fileId ) 
 file = dir / name 
 - _ ← Source ( List ( ByteString ( data ) ) ) . runWith ( FileIO . toFile ( file . toJava ) ) map ( _ ⇒ ( ) ) 
 - } yield ( ) 
 + _ ← Future { blocking { file . createIfNotExists ( ) } } 
 + ioRes ← Source ( List ( ByteString ( data ) ) ) . runWith ( FileIO . toFile ( file . toJava ) ) 
 + } yield ioRes . status match { 
 + case Success ( _ ) ⇒ ( ) 
 + case Failure ( cause ) ⇒ throw cause 
 + } 
 } 
 
 protected def prepareForPartWrite ( fileId : Long , partNumber : Int ) : Future [ Unit ] = {

NEAREST DIFF:
diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 index f6ccac6 . . 07c6400 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 @ @ - 40 , 12 + 40 , 12 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { 
 } yield ( ) 
 } 
 
 - protected def appendPartBytes ( bytes : Array [ Byte ] , fileId : Long , partNumber : Int ) : Future [ Unit ] = { 
 + protected def appendPartBytes ( bs : Source [ ByteString , Any ] , fileId : Long , partNumber : Int ) : Future [ Unit ] = { 
 for { 
 dir ← getOrCreateFileDir ( fileId ) 
 partFile ← Future { blocking { dir . createChild ( LocalUploadKey . partKey ( fileId , partNumber ) . key ) } } 
 - _ = log . debug ( " Appending bytes to part number : { } , fileId : { } , data length : { } target file : { } " , partNumber , fileId , bytes . length , partFile ) 
 - _ ← Source ( List ( ByteString ( bytes ) ) ) . runWith ( FileIO . toFile ( partFile . toJava , append = true ) ) 
 + _ = log . debug ( " Appending bytes to part number : { } , fileId : { } , target file : { } " , partNumber , fileId , partFile ) 
 + _ ← bs . runWith ( FileIO . toFile ( partFile . toJava , append = true ) ) 
 } yield ( ) 
 } 
 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala 
 index ea6cd16 . . 08827c4 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / http / FilesHttpHandler . scala 
 @ @ - 74 , 9 + 74 , 7 @ @ private [ local ] final class FilesHttpHandler ( storageConfig : LocalFileStorageConfi 
 extractRequest { req = > 
 val writeFu = for { 
 _ < - prepareForPartWrite ( fileId , partNumber ) 
 - _ < - req . entity . dataBytes 
 - . flatMapConcat ( bs = > Source . fromFuture ( writeContent ( bs , fileId , partNumber ) ) ) 
 - . runForeach ( _ = > ( ) ) 
 + _ < - appendPartBytes ( req . entity . dataBytes , fileId , partNumber ) 
 } yield ( ) 
 onComplete ( writeFu ) { 
 case Success ( _ ) = > 
 @ @ - 95 , 9 + 93 , 6 @ @ private [ local ] final class FilesHttpHandler ( storageConfig : LocalFileStorageConfi 
 } 
 / / format : ON 
 
 - private def writeContent ( bs : ByteString , fileId : Long , partNumber : Int ) : Future [ Unit ] = 
 - appendPartBytes ( bs . toArray , fileId , partNumber ) 
 - 
 def validateRequest : Directive0 = 
 extractRequestContext flatMap { ctx ⇒ 
 parameters ( ( " signature " , " expires " . as [ Long ] ) ) tflatMap {
