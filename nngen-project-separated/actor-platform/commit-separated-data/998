BLEU SCORE: 0.06837203339116285

TEST MSG: feat ( core ) : Sorting Peer Sessions , extending encryption API scheme
GENERATED MSG: wip ( sdk ) : Grouped active dialogs list

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json < nl > index ed15f18 . . 6d9d476 100644 < nl > - - - a / actor - sdk / sdk - api / actor . json < nl > + + + b / actor - sdk / sdk - api / actor . json < nl > @ @ - 13291 , 12 + 13291 , 24 @ @ < nl > " Encrypted package that is encrypted for multiple keys " , < nl > { < nl > " type " : " reference " , < nl > + " argument " : " senderKeyGroupId " , < nl > + " category " : " full " , < nl > + " description " : " Sender key group id " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > " argument " : " keys " , < nl > " category " : " full " , < nl > " description " : " Encrypted encryption keys " < nl > } , < nl > { < nl > " type " : " reference " , < nl > + " argument " : " ignoredKeyGroups " , < nl > + " category " : " full " , < nl > + " description " : " Explictly ignored key groups " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > " argument " : " algType " , < nl > " category " : " full " , < nl > " description " : " Package encryption type " < nl > @ @ - 13311 , 6 + 13323 , 14 @ @ < nl > " attributes " : [ < nl > { < nl > " type " : { < nl > + " type " : " alias " , < nl > + " childType " : " keyGroupId " < nl > + } , < nl > + " id " : 4 , < nl > + " name " : " senderKeyGroupId " < nl > + } , < nl > + { < nl > + " type " : { < nl > " type " : " list " , < nl > " childType " : { < nl > " type " : " struct " , < nl > @ @ - 13321 , 6 + 13341 , 17 @ @ < nl > " name " : " keys " < nl > } , < nl > { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : { < nl > + " type " : " alias " , < nl > + " childType " : " keyGroupId " < nl > + } < nl > + } , < nl > + " id " : 5 , < nl > + " name " : " ignoredKeyGroups " < nl > + } , < nl > + { < nl > " type " : " string " , < nl > " id " : 2 , < nl > " name " : " algType " < nl > diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > index 04b7d33 . . 67c1f7d 100644 < nl > - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > @ @ - 10972 , 7 + 10972 , 7 @ @ < nl > < / node > < nl > < / node > < nl > < node concept = " 2m6fVq " id = " 5 _ CDdZ2jMNJ " role = " 2m5mJr " > < nl > - < property role = " TrG5h " value = " LoadEphermalPublicKeys " / > < nl > + < property role = " TrG5h " value = " LoadPreKeys " / > < nl > < node concept = " 2uC4CA " id = " 5 _ CDdZ2jQvA " role = " 2uC9gA " > < nl > < property role = " 2uC4DK " value = " 400 " / > < nl > < property role = " 2uC4Qe " value = " NO _ GROUP _ FOUND " / > < nl > @ @ - 11369 , 7 + 11369 , 7 @ @ < nl > < / node > < nl > < / node > < nl > < node concept = " 2m6fVq " id = " 5 _ CDdZ2qOwz " role = " 2m5mJr " > < nl > - < property role = " TrG5h " value = " UploadEphermalKey " / > < nl > + < property role = " TrG5h " value = " UploadPreKey " / > < nl > < node concept = " 2m7Kf5 " id = " 5 _ CDdZ2qOzv " role = " 2m0hLx " > < nl > < property role = " 2m7DUN " value = " 1 " / > < nl > < property role = " TrG5h " value = " keyGroupId " / > < nl > @ @ - 11402 , 7 + 11402 , 7 @ @ < nl > < ref role = " 2m1o9l " node = " GBscvBB6 _ K " resolve = " Void " / > < nl > < / node > < nl > < node concept = " NXeRC " id = " 5 _ CDdZ2qPs $ " role = " 1GBnQ6 " > < nl > - < property role = " NXePf " value = " Uploading Ephermal Keys " / > < nl > + < property role = " NXePf " value = " Uploading Pre Keys " / > < nl > < / node > < nl > < node concept = " NX1gA " id = " 5 _ CDdZ2qQm9 " role = " 1GBnQ6 " > < nl > < property role = " NX6R2 " value = " Key Group Id " / > < nl > @ @ - 11425 , 6 + 11425 , 13 @ @ < nl > < / node > < nl > < node concept = " 2m5naR " id = " 5 _ CDdZ2r0S4 " role = " 2m5mJr " > < nl > < property role = " TrG5h " value = " EncryptedBox " / > < nl > + < node concept = " 2m7Kf5 " id = " 1iu4pgORmss " role = " 2m0hLx " > < nl > + < property role = " 2m7DUN " value = " 4 " / > < nl > + < property role = " TrG5h " value = " senderKeyGroupId " / > < nl > + < node concept = " wb0Ql " id = " 1iu4pgORyRX " role = " 2m7DVh " > < nl > + < ref role = " wb18D " node = " 5 _ CDdZ2q76m " resolve = " keyGroupId " / > < nl > + < / node > < nl > + < / node > < nl > < node concept = " 2m7Kf5 " id = " 5 _ CDdZ2r6rJ " role = " 2m0hLx " > < nl > < property role = " 2m7DUN " value = " 1 " / > < nl > < property role = " TrG5h " value = " keys " / > < nl > @ @ - 11434 , 6 + 11441 , 15 @ @ < nl > < / node > < nl > < / node > < nl > < / node > < nl > + < node concept = " 2m7Kf5 " id = " 1iu4pgORzN8 " role = " 2m0hLx " > < nl > + < property role = " 2m7DUN " value = " 5 " / > < nl > + < property role = " TrG5h " value = " ignoredKeyGroups " / > < nl > + < node concept = " 2m5nlk " id = " 1iu4pgORzNl " role = " 2m7DVh " > < nl > + < node concept = " wb0Ql " id = " 1iu4pgORzNr " role = " 3GJlyp " > < nl > + < ref role = " wb18D " node = " 5 _ CDdZ2q76m " resolve = " keyGroupId " / > < nl > + < / node > < nl > + < / node > < nl > + < / node > < nl > < node concept = " 2m7Kf5 " id = " 5 _ CDdZ2rwG4 " role = " 2m0hLx " > < nl > < property role = " 2m7DUN " value = " 2 " / > < nl > < property role = " TrG5h " value = " algType " / > < nl > @ @ - 11447 , 11 + 11463 , 21 @ @ < nl > < node concept = " NXeRC " id = " 5 _ CDdZ2r6s9 " role = " NXodf " > < nl > < property role = " NXePf " value = " Encrypted package that is encrypted for multiple keys " / > < nl > < / node > < nl > + < node concept = " NX1gA " id = " 1iu4pgORmtV " role = " NXodf " > < nl > + < property role = " NX6R2 " value = " Sender key group id " / > < nl > + < property role = " 1GSvIU " value = " full " / > < nl > + < ref role = " NX6Kv " node = " 1iu4pgORmss " resolve = " senderKeyGroupId " / > < nl > + < / node > < nl > < node concept = " NX1gA " id = " 5 _ CDdZ2r6se " role = " NXodf " > < nl > < property role = " NX6R2 " value = " Encrypted encryption keys " / > < nl > < property role = " 1GSvIU " value = " full " / > < nl > < ref role = " NX6Kv " node = " 5 _ CDdZ2r6rJ " resolve = " keys " / > < nl > < / node > < nl > + < node concept = " NX1gA " id = " 1iu4pgORzN _ " role = " NXodf " > < nl > + < property role = " NX6R2 " value = " Explictly ignored key groups " / > < nl > + < property role = " 1GSvIU " value = " full " / > < nl > + < ref role = " NX6Kv " node = " 1iu4pgORzN8 " resolve = " ignoredKeyGroups " / > < nl > + < / node > < nl > < node concept = " NX1gA " id = " 5 _ CDdZ2rxAe " role = " NXodf " > < nl > < property role = " 1GSvIU " value = " full " / > < nl > < property role = " NX6R2 " value = " Package encryption type " / > < nl > @ @ - 11507 , 6 + 11533 , 28 @ @ < nl > < ref role = " NX6Kv " node = " 5 _ CDdZ2r2Pn " resolve = " encryptedKey " / > < nl > < / node > < nl > < / node > < nl > + < node concept = " w93zz " id = " 1iu4pgORDAA " role = " 2m5mJr " > < nl > + < property role = " 1FaRnq " value = " true " / > < nl > + < property role = " TrG5h " value = " EncryptedContainer " / > < nl > + < / node > < nl > + < node concept = " 2m5naR " id = " 1iu4pgORDIq " role = " 2m5mJr " > < nl > + < property role = " TrG5h " value = " EncryptedPrivateMessage " / > < nl > + < property role = " tsOgz " value = " true " / > < nl > + < property role = " w4tQU " value = " true " / > < nl > + < ref role = " w4 $ XZ " node = " 1iu4pgORDAA " resolve = " EncryptedContainer " / > < nl > + < node concept = " Nu42z " id = " 1iu4pgORDMl " role = " 3BtCOu " > < nl > + < property role = " Nu42W " value = " 01 " / > < nl > + < / node > < nl > + < / node > < nl > + < node concept = " 2m5naR " id = " 1iu4pgORDQj " role = " 2m5mJr " > < nl > + < property role = " TrG5h " value = " EncryptedGroupMessage " / > < nl > + < property role = " tsOgz " value = " true " / > < nl > + < property role = " w4tQU " value = " true " / > < nl > + < ref role = " w4 $ XZ " node = " 1iu4pgORDAA " resolve = " EncryptedContainer " / > < nl > + < node concept = " Nu42z " id = " 1iu4pgORDUg " role = " 3BtCOu " > < nl > + < property role = " Nu42W " value = " 02 " / > < nl > + < / node > < nl > + < / node > < nl > < node concept = " 1Dx9M1 " id = " 7ZzLuuoIXYH " role = " 1Dx9rD " > < nl > < property role = " 1Dx9K7 " value = " Package that include encryption support " / > < nl > < / node > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiEncryptedBox . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiEncryptedBox . java < nl > index 7acf648 . . 35d9b72 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiEncryptedBox . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiEncryptedBox . java < nl > @ @ - 16 , 12 + 16 , 16 @ @ import java . util . ArrayList ; < nl > < nl > public class ApiEncryptedBox extends BserObject { < nl > < nl > + private int senderKeyGroupId ; < nl > private List < ApiEncyptedBoxKey > keys ; < nl > + private List < Integer > ignoredKeyGroups ; < nl > private String algType ; < nl > private byte [ ] encPackage ; < nl > < nl > - public ApiEncryptedBox ( @ NotNull List < ApiEncyptedBoxKey > keys , @ NotNull String algType , @ NotNull byte [ ] encPackage ) { < nl > + public ApiEncryptedBox ( int senderKeyGroupId , @ NotNull List < ApiEncyptedBoxKey > keys , @ NotNull List < Integer > ignoredKeyGroups , @ NotNull String algType , @ NotNull byte [ ] encPackage ) { < nl > + this . senderKeyGroupId = senderKeyGroupId ; < nl > this . keys = keys ; < nl > + this . ignoredKeyGroups = ignoredKeyGroups ; < nl > this . algType = algType ; < nl > this . encPackage = encPackage ; < nl > } < nl > @ @ - 30 , 12 + 34 , 21 @ @ public class ApiEncryptedBox extends BserObject { < nl > < nl > } < nl > < nl > + public int getSenderKeyGroupId ( ) { < nl > + return this . senderKeyGroupId ; < nl > + } < nl > + < nl > @ NotNull < nl > public List < ApiEncyptedBoxKey > getKeys ( ) { < nl > return this . keys ; < nl > } < nl > < nl > @ NotNull < nl > + public List < Integer > getIgnoredKeyGroups ( ) { < nl > + return this . ignoredKeyGroups ; < nl > + } < nl > + < nl > + @ NotNull < nl > public String getAlgType ( ) { < nl > return this . algType ; < nl > } < nl > @ @ - 47 , 18 + 60 , 22 @ @ public class ApiEncryptedBox extends BserObject { < nl > < nl > @ Override < nl > public void parse ( BserValues values ) throws IOException { < nl > + this . senderKeyGroupId = values . getInt ( 4 ) ; < nl > List < ApiEncyptedBoxKey > _ keys = new ArrayList < ApiEncyptedBoxKey > ( ) ; < nl > for ( int i = 0 ; i < values . getRepeatedCount ( 1 ) ; i + + ) { < nl > _ keys . add ( new ApiEncyptedBoxKey ( ) ) ; < nl > } < nl > this . keys = values . getRepeatedObj ( 1 , _ keys ) ; < nl > + this . ignoredKeyGroups = values . getRepeatedInt ( 5 ) ; < nl > this . algType = values . getString ( 2 ) ; < nl > this . encPackage = values . getBytes ( 3 ) ; < nl > } < nl > < nl > @ Override < nl > public void serialize ( BserWriter writer ) throws IOException { < nl > + writer . writeInt ( 4 , this . senderKeyGroupId ) ; < nl > writer . writeRepeatedObj ( 1 , this . keys ) ; < nl > + writer . writeRepeatedInt ( 5 , this . ignoredKeyGroups ) ; < nl > if ( this . algType = = null ) { < nl > throw new IOException ( ) ; < nl > } < nl > @ @ - 72 , 7 + 89 , 9 @ @ public class ApiEncryptedBox extends BserObject { < nl > @ Override < nl > public String toString ( ) { < nl > String res = " struct EncryptedBox { " ; < nl > - res + = " keys = " + this . keys ; < nl > + res + = " senderKeyGroupId = " + this . senderKeyGroupId ; < nl > + res + = " , keys = " + this . keys ; < nl > + res + = " , ignoredKeyGroups = " + this . ignoredKeyGroups ; < nl > res + = " , algType = " + this . algType ; < nl > res + = " , encPackage = " + byteArrayToString ( this . encPackage ) ; < nl > res + = " } " ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / encryption / PeerSession . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / encryption / PeerSession . java < nl > index e85bac7 . . 79291be 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / encryption / PeerSession . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / encryption / PeerSession . java < nl > @ @ - 1 , 10 + 1 , 12 @ @ < nl > package im . actor . core . entity . encryption ; < nl > < nl > import java . io . IOException ; < nl > + import java . util . Comparator ; < nl > < nl > import im . actor . runtime . bser . BserObject ; < nl > import im . actor . runtime . bser . BserValues ; < nl > import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . crypto . primitives . util . ByteStrings ; < nl > import im . actor . runtime . function . Predicate ; < nl > < nl > public class PeerSession extends BserObject { < nl > @ @ - 29 , 6 + 31 , 13 @ @ public class PeerSession extends BserObject { < nl > } ; < nl > } < nl > < nl > + public static final Comparator < PeerSession > COMPARATOR = new Comparator < PeerSession > ( ) { < nl > + @ Override < nl > + public int compare ( PeerSession lhs , PeerSession rhs ) { < nl > + return ByteStrings . compare ( lhs . getMasterKey ( ) , rhs . getMasterKey ( ) ) ; < nl > + } < nl > + } ; < nl > + < nl > private long sid ; < nl > private int uid ; < nl > private int ownKeyGroupId ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java < nl > index f4cd037 . . 37f59bc 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java < nl > @ @ - 38 , 7 + 38 , 8 @ @ public class EncryptedMsgActor extends ModuleActor { < nl > boxKeys . add ( new ApiEncyptedBoxKey ( b . getUid ( ) , < nl > b . getKeyGroupId ( ) , " curve25519 " , b . getEncryptedKey ( ) ) ) ; < nl > } < nl > - ApiEncryptedBox apiEncryptedBox = new ApiEncryptedBox ( boxKeys , " aes - kuznechik " , encryptedBox . getBox ( ) . getEncryptedPackage ( ) ) ; < nl > + ArrayList < Integer > ignored = new ArrayList < Integer > ( ) ; < nl > + ApiEncryptedBox apiEncryptedBox = new ApiEncryptedBox ( 0 , boxKeys , ignored , " aes - kuznechik " , encryptedBox . getBox ( ) . getEncryptedPackage ( ) ) ; < nl > ApiEncryptedMessage apiEncryptedMessage = new ApiEncryptedMessage ( apiEncryptedBox ) ; < nl > future . result ( new EncryptedMessage ( apiEncryptedMessage ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > index 22e85b2 . . 3e38d02 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > @ @ - 23 , 8 + 23 , 6 @ @ import im . actor . runtime . actors . ask . AskResult ; < nl > import im . actor . runtime . crypto . IntegrityException ; < nl > import im . actor . runtime . function . Consumer ; < nl > import im . actor . runtime . function . Function ; < nl > - import im . actor . runtime . function . Predicate ; < nl > - import im . actor . runtime . function . Predicates ; < nl > import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . promise . PromiseResolver ; < nl > import im . actor . runtime . crypto . box . ActorBox ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java < nl > index 3bda7b3 . . ef4e7ab 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java < nl > @ @ - 1 , 5 + 1 , 7 @ @ < nl > package im . actor . core . modules . encryption ; < nl > < nl > + import com . google . j2objc . annotations . ObjectiveCName ; < nl > + < nl > import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > @ @ - 358 , 10 + 360 , 6 @ @ public class KeyManagerActor extends ModuleActor { < nl > } < nl > < nl > / / < nl > - / / Downloading < nl > - / / < nl > - < nl > - / / < nl > / / Downloading pre key < nl > / / < nl > < nl > @ @ - 552 , 13 + 550 , 12 @ @ public class KeyManagerActor extends ModuleActor { < nl > key . getKeyMaterial ( ) ) ) ; < nl > } < nl > < nl > - if ( keys . size ( ) > 0 ) { < nl > - return new UserKeysGroup ( keyGroup . getKeyGroupId ( ) , identity , keys . toArray ( new PublicKey [ keys . size ( ) ] ) , < nl > - new PublicKey [ 0 ] ) ; < nl > - } else { < nl > + if ( keys . size ( ) = = 0 ) { < nl > Log . w ( TAG , " ( uid : " + uid + " ) No valid keys in key group # " + keyGroup . getKeyGroupId ( ) ) ; < nl > - return null ; < nl > } < nl > + < nl > + return new UserKeysGroup ( keyGroup . getKeyGroupId ( ) , identity , keys . toArray ( new PublicKey [ keys . size ( ) ] ) , < nl > + new PublicKey [ 0 ] ) ; < nl > } < nl > < nl > private Promise < Tuple2 < UserKeysGroup , UserKeys > > pickUserGroup ( int uid , final int keyGroupId ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java < nl > index 633e2c8 . . d2de281 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java < nl > @ @ - 34 , 6 + 34 , 10 @ @ import im . actor . runtime . promise . Tuple3 ; < nl > import im . actor . runtime . promise . Tuple4 ; < nl > import im . actor . runtime . storage . KeyValueEngine ; < nl > < nl > + / * * < nl > + * Stores and manages encrypted sessions between peers . < nl > + * Can be asked to pick session parameters for specific peer . < nl > + * / < nl > public class SessionManagerActor extends ModuleActor { < nl > < nl > private static final String TAG = " SessionManagerActor " ; < nl > @ @ - 68 , 15 + 72 , 18 @ @ public class SessionManagerActor extends ModuleActor { < nl > } ; < nl > } < nl > < nl > + / * * < nl > + * Pick session < nl > + * < nl > + * @ param uid User ' s id < nl > + * @ param keyGroupId User ' s key group < nl > + * @ param resolver Resolver for result < nl > + * / < nl > public void pickSession ( final int uid , < nl > final int keyGroupId , < nl > final PromiseResolver < PeerSession > resolver ) { < nl > < nl > - / / < nl > - / / Searching for available session < nl > - / / < nl > - < nl > - pickSession ( uid , keyGroupId ) < nl > + pickCachedSession ( uid , keyGroupId ) < nl > . fallback ( new Function < Exception , Promise < PeerSession > > ( ) { < nl > @ Override < nl > public Promise < PeerSession > apply ( Exception e ) { < nl > @ @ - 112 , 20 + 119 , 29 @ @ public class SessionManagerActor extends ModuleActor { < nl > . afterVoid ( new Supplier < Promise < PeerSession > > ( ) { < nl > @ Override < nl > public Promise < PeerSession > get ( ) { < nl > - return pickSession ( uid , keyGroupId ) ; < nl > + return pickCachedSession ( uid , keyGroupId ) ; < nl > } < nl > } ) < nl > . pipeTo ( resolver ) < nl > . done ( self ( ) ) ; < nl > } < nl > < nl > + / * * < nl > + * Pick session for specific keys < nl > + * < nl > + * @ param uid User ' s id < nl > + * @ param keyGroupId User ' s key group < nl > + * @ param ownKeyId Own Pre Key id < nl > + * @ param theirKeyId Their Pre Key id < nl > + * @ param srcResolver resolver for value < nl > + * / < nl > public void pickSession ( final int uid , < nl > final int keyGroupId , < nl > final long ownKeyId , < nl > final long theirKeyId , < nl > final PromiseResolver < PeerSession > srcResolver ) { < nl > < nl > - pickSession ( uid , keyGroupId , ownKeyId , theirKeyId ) < nl > + pickCachedSession ( uid , keyGroupId , ownKeyId , theirKeyId ) < nl > . fallback ( new Function < Exception , Promise < PeerSession > > ( ) { < nl > @ Override < nl > public Promise < PeerSession > apply ( Exception e ) { < nl > @ @ - 157 , 6 + 173 , 18 @ @ public class SessionManagerActor extends ModuleActor { < nl > . done ( self ( ) ) ; < nl > } < nl > < nl > + / * * < nl > + * Spawn new session < nl > + * < nl > + * @ param uid user ' s id < nl > + * @ param ownKeyGroup own key group id < nl > + * @ param theirKeyGroup their key group Id < nl > + * @ param ownIdentity own identity private key < nl > + * @ param theirIdentity their identity public key < nl > + * @ param ownPreKey own pre key < nl > + * @ param theirPreKey their pre key < nl > + * @ return spawned session < nl > + * / < nl > private PeerSession spawnSession ( int uid , < nl > int ownKeyGroup , < nl > int theirKeyGroup , < nl > @ @ - 202 , 31 + 230 , 53 @ @ public class SessionManagerActor extends ModuleActor { < nl > return peerSession ; < nl > } < nl > < nl > - private Promise < PeerSession > pickSession ( int uid , final int keyGroupId ) { < nl > + / * * < nl > + * Picking cached session < nl > + * < nl > + * @ param uid User ' s id < nl > + * @ param keyGroupId Key Group Id < nl > + * @ return promise of session < nl > + * / < nl > + private Promise < PeerSession > pickCachedSession ( int uid , final int keyGroupId ) { < nl > return ManagedList . of ( peerSessions . getValue ( uid ) ) < nl > . flatMap ( PeerSessionsStorage . SESSIONS ) < nl > . filter ( PeerSession . BY _ THEIR _ GROUP ( keyGroupId ) ) < nl > + . sorted ( PeerSession . COMPARATOR ) < nl > . firstPromise ( ) ; < nl > } < nl > < nl > - private Promise < PeerSession > pickSession ( int uid , final int keyGroupId , final long ownKeyId , final long theirKeyId ) { < nl > + / * * < nl > + * Pick cached session for specific keys < nl > + * < nl > + * @ param uid User ' s id < nl > + * @ param keyGroupId Key Group Id < nl > + * @ param ownKeyId Own Pre key id < nl > + * @ param theirKeyId Their Pre key id < nl > + * @ return promise of session < nl > + * / < nl > + private Promise < PeerSession > pickCachedSession ( int uid , final int keyGroupId , final long ownKeyId , final long theirKeyId ) { < nl > return ManagedList . of ( peerSessions . getValue ( uid ) ) < nl > . flatMap ( PeerSessionsStorage . SESSIONS ) < nl > . filter ( PeerSession . BY _ IDS ( keyGroupId , ownKeyId , theirKeyId ) ) < nl > + . sorted ( PeerSession . COMPARATOR ) < nl > . firstPromise ( ) ; < nl > } < nl > < nl > + / / < nl > + / / Messages < nl > + / / < nl > + < nl > @ Override < nl > - public void onAsk ( Object message , PromiseResolver future ) { < nl > + public void onAsk ( Object message , PromiseResolver resolver ) { < nl > if ( message instanceof PickSessionForEncrypt ) { < nl > PickSessionForEncrypt encrypt = ( PickSessionForEncrypt ) message ; < nl > - pickSession ( encrypt . getUid ( ) , encrypt . getKeyGroupId ( ) , future ) ; < nl > + pickSession ( encrypt . getUid ( ) , encrypt . getKeyGroupId ( ) , resolver ) ; < nl > } else if ( message instanceof PickSessionForDecrypt ) { < nl > PickSessionForDecrypt decrypt = ( PickSessionForDecrypt ) message ; < nl > pickSession ( decrypt . getUid ( ) , decrypt . getKeyGroupId ( ) , decrypt . getOwnPreKey ( ) , decrypt . getTheirPreKey ( ) , < nl > - future ) ; < nl > + resolver ) ; < nl > } else { < nl > - super . onAsk ( message , future ) ; < nl > + super . onAsk ( message , resolver ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java < nl > index a5d949d . . 234c785 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java < nl > @ @ - 2 , 6 + 2 , 8 @ @ package im . actor . runtime . collections ; < nl > < nl > import java . util . ArrayList ; < nl > import java . util . Collection ; < nl > + import java . util . Collections ; < nl > + import java . util . Comparator ; < nl > < nl > import im . actor . runtime . function . Function ; < nl > import im . actor . runtime . function . Predicate ; < nl > @ @ - 81 , 6 + 83 , 12 @ @ public class ManagedList < T > extends ArrayList < T > { < nl > return res ; < nl > } < nl > < nl > + public ManagedList < T > sorted ( Comparator < T > comparator ) { < nl > + ManagedList < T > res = new ManagedList < > ( this ) ; < nl > + Collections . sort ( res , comparator ) ; < nl > + return res ; < nl > + } < nl > + < nl > public T first ( ) { < nl > return get ( 0 ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java < nl > index 0022766 . . 90c5601 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java < nl > @ @ - 108 , 4 + 108 , 24 @ @ public class ByteStrings { < nl > } < nl > return result = = 0 ; < nl > } < nl > + < nl > + < nl > + public static int compare ( byte [ ] a , byte [ ] b ) { < nl > + if ( a = = null | | b = = null ) { < nl > + throw new IllegalArgumentException ( " Arguments can ' t be null " ) ; < nl > + } < nl > + if ( a . length > b . length ) { < nl > + return 1 ; < nl > + } < nl > + for ( int i = 0 ; i < a . length ; i + + ) { < nl > + int ai = a [ i ] & 0xFF ; < nl > + int bi = b [ i ] & 0xFF ; < nl > + if ( ai > bi ) { < nl > + return 1 ; < nl > + } else if ( ai < bi ) { < nl > + return - 1 ; < nl > + } < nl > + } < nl > + return 0 ; < nl > + } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java < nl > new file mode 100644 < nl > index 0000000 . . bb8078b < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java < nl > @ @ - 0 , 0 + 1 , 80 @ @ < nl > + package im . actor . core . entity ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . storage . KeyValueItem ; < nl > + < nl > + public class DialogDesc extends BserObject implements KeyValueItem { < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private String title ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private Avatar avatar ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private boolean isUnread ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private int counter ; < nl > + < nl > + public DialogDesc ( Peer peer , String title , Avatar avatar , boolean isUnread , int counter ) { < nl > + this . peer = peer ; < nl > + this . title = title ; < nl > + this . avatar = avatar ; < nl > + this . isUnread = isUnread ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public Avatar getAvatar ( ) { < nl > + return avatar ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + < nl > + public boolean isUnread ( ) { < nl > + return isUnread ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; < nl > + title = values . getString ( 2 ) ; < nl > + byte [ ] av = values . getBytes ( 3 ) ; < nl > + if ( av ! = null ) { < nl > + avatar = new Avatar ( av ) ; < nl > + } < nl > + counter = values . getInt ( 4 ) ; < nl > + isUnread = values . getBool ( 5 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + writer . writeObject ( 1 , peer ) ; < nl > + writer . writeString ( 2 , title ) ; < nl > + if ( avatar ! = null ) { < nl > + writer . writeObject ( 3 , avatar ) ; < nl > + } < nl > + writer . writeInt ( 4 , counter ) ; < nl > + writer . writeBool ( 5 , isUnread ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public long getEngineId ( ) { < nl > + return peer . getUnuqueId ( ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 85714e6 . . 30e0d85 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 35 , 6 + 35 , 7 @ @ import im . actor . core . modules . internal . messages . CursorReaderActor ; < nl > import im . actor . core . modules . internal . messages . CursorReceiverActor ; < nl > import im . actor . core . modules . internal . messages . DialogsActor ; < nl > import im . actor . core . modules . internal . messages . DialogsHistoryActor ; < nl > + import im . actor . core . modules . internal . messages . GroupedDialogsActor ; < nl > import im . actor . core . modules . internal . messages . MessageDeleteActor ; < nl > import im . actor . core . modules . internal . messages . MessageShownActor ; < nl > import im . actor . core . modules . internal . messages . MessageShownFilter ; < nl > @ @ - 46 , 6 + 47 , 7 @ @ import im . actor . core . network . RpcException ; < nl > import im . actor . core . network . RpcInternalException ; < nl > import im . actor . core . viewmodel . Command ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > + import im . actor . core . viewmodel . DialogGroupsVM ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > @ @ - 62 , 8 + 64 , 10 @ @ import static im . actor . runtime . actors . ActorSystem . system ; < nl > public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > private ListEngine < Dialog > dialogs ; < nl > + < nl > private ActorRef dialogsActor ; < nl > private ActorRef dialogsHistoryActor ; < nl > + private ActorRef dialogsGroupedActor ; < nl > private ActorRef ownReadActor ; < nl > private ActorRef plainReadActor ; < nl > private ActorRef plainReceiverActor ; < nl > @ @ - 79 , 6 + 83 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > private final SyncKeyValue cursorStorage ; < nl > < nl > + private final DialogGroupsVM dialogGroups = new DialogGroupsVM ( ) ; < nl > + < nl > public MessagesModule ( final ModuleContext context ) { < nl > super ( context ) ; < nl > < nl > @ @ - 99 , 6 + 105 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > return new DialogsHistoryActor ( context ( ) ) ; < nl > } < nl > } ) , " actor / dialogs / history " ) ; < nl > + < nl > + this . dialogsGroupedActor = system ( ) . actorOf ( Props . create ( GroupedDialogsActor . class , new ActorCreator < GroupedDialogsActor > ( ) { < nl > + @ Override < nl > + public GroupedDialogsActor create ( ) { < nl > + return new GroupedDialogsActor ( context ( ) ) ; < nl > + } < nl > + } ) , " actor / dialogs / grouped " ) ; < nl > + < nl > this . ownReadActor = system ( ) . actorOf ( Props . create ( OwnReadActor . class , new ActorCreator < OwnReadActor > ( ) { < nl > @ Override < nl > public OwnReadActor create ( ) { < nl > @ @ - 139 , 6 + 153 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > context ( ) . getEvents ( ) . subscribe ( this , PeerChatOpened . EVENT ) ; < nl > } < nl > < nl > + public DialogGroupsVM getDialogGroupsVM ( ) { < nl > + return dialogGroups ; < nl > + } < nl > + < nl > public ActorRef getSendMessageActor ( ) { < nl > return sendMessageActor ; < nl > } < nl > @ @ - 221 , 6 + 239 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > return dialogsHistoryActor ; < nl > } < nl > < nl > + public ActorRef getDialogsGroupedActor ( ) { < nl > + return dialogsGroupedActor ; < nl > + } < nl > + < nl > public ListEngine < Dialog > getDialogsEngine ( ) { < nl > return dialogs ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > index 6641ed9 . . 8bf76dc 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > @ @ - 44 , 6 + 44 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > private IndexStorage outPendingIndex ; < nl > private IndexStorage inPendingIndex ; < nl > private ActorRef dialogsActor ; < nl > + private ActorRef dialogsGroupedActor ; < nl > private long inReadState ; < nl > private long outReadState ; < nl > private long outReceiveState ; < nl > @ @ - 62 , 6 + 63 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > docs = context ( ) . getMessagesModule ( ) . getConversationDocsEngine ( peer ) ; < nl > < nl > dialogsActor = context ( ) . getMessagesModule ( ) . getDialogsActor ( ) ; < nl > + dialogsGroupedActor = context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) ; < nl > outPendingIndex = Storage . createIndex ( " out _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ; < nl > inPendingIndex = Storage . createIndex ( " in _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ; < nl > < nl > @ @ - 135 , 6 + 137 , 8 @ @ public class ConversationActor extends ModuleActor { < nl > / / Update dialogs < nl > if ( topMessage ! = null ) { < nl > if ( ! isHiddenPeer ) { < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , < nl > + topMessage . getSortDate ( ) ) ) ; < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , topMessage , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > } < nl > @ @ - 185 , 6 + 189 , 8 @ @ public class ConversationActor extends ModuleActor { < nl > < nl > if ( ! isHiddenPeer ) { < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , message , inPendingIndex . getCount ( ) ) ) ; < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , < nl > + message . getSortDate ( ) ) ) ; < nl > } < nl > } < nl > } < nl > @ @ - 239 , 6 + 245 , 8 @ @ public class ConversationActor extends ModuleActor { < nl > if ( ! isHiddenPeer ) { < nl > / / Updating dialog < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , updatedMsg , inPendingIndex . getCount ( ) ) ) ; < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , < nl > + updatedMsg . getSortDate ( ) ) ) ; < nl > } < nl > < nl > / / Updating pending index < nl > @ @ - 361 , 6 + 369 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > < nl > if ( ! isHiddenPeer ) { < nl > dialogsActor . send ( new DialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > + / / TODO : Implement for grouped < nl > } < nl > } < nl > < nl > @ @ - 402 , 6 + 411 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > inPendingIndex . clear ( ) ; < nl > outPendingIndex . clear ( ) ; < nl > dialogsActor . send ( new DialogsActor . ChatDelete ( peer ) ) ; < nl > + / / TODO : Implement for grouped < nl > } < nl > < nl > / / History < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java < nl > index 311de19 . . b77ac37 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java < nl > @ @ - 50 , 7 + 50 , 7 @ @ public class DialogsActor extends ModuleActor { < nl > long start = im . actor . runtime . Runtime . getCurrentTime ( ) ; < nl > PeerDesc peerDesc = buildPeerDesc ( peer ) ; < nl > if ( peerDesc = = null ) { < nl > - Log . d ( " DialogsActor " , " unknown peer desk " ) ; < nl > + Log . d ( " DialogsActor " , " unknown peer desc " ) ; < nl > return ; < nl > } < nl > < nl > @ @ - 75 , 8 + 75 , 11 @ @ public class DialogsActor extends ModuleActor { < nl > . setText ( contentDescription . getText ( ) ) < nl > . setRelatedUid ( contentDescription . getRelatedUser ( ) ) < nl > . setStatus ( message . getMessageState ( ) ) < nl > - . setSenderId ( message . getSenderId ( ) ) < nl > - . setUnreadCount ( counter ) ; < nl > + . setSenderId ( message . getSenderId ( ) ) ; < nl > + < nl > + if ( counter > = 0 ) { < nl > + builder . setUnreadCount ( counter ) ; < nl > + } < nl > < nl > boolean forceUpdate = false ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > new file mode 100644 < nl > index 0000000 . . f0fdf00 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > @ @ - 0 , 0 + 1 , 184 @ @ < nl > + package im . actor . core . modules . internal . messages ; < nl > + < nl > + import java . util . ArrayList ; < nl > + import java . util . HashMap ; < nl > + < nl > + import im . actor . core . entity . Avatar ; < nl > + import im . actor . core . entity . DialogDesc ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerType ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . utils . ModuleActor ; < nl > + import im . actor . core . viewmodel . DialogGroup ; < nl > + < nl > + public class GroupedDialogsActor extends ModuleActor { < nl > + < nl > + private PeerGroup groups = new PeerGroup ( " groups " , " Groups " ) ; < nl > + private PeerGroup privates = new PeerGroup ( " private " , " Private " ) ; < nl > + < nl > + public GroupedDialogsActor ( ModuleContext context ) { < nl > + super ( context ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + } < nl > + < nl > + private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { < nl > + < nl > + } < nl > + < nl > + private void onNewMessage ( Peer peer , long sortDate , int counter ) { < nl > + < nl > + PeerGroup peerGroup ; < nl > + if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + peerGroup = groups ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + peerGroup = privates ; < nl > + } else { < nl > + return ; < nl > + } < nl > + < nl > + boolean found = false ; < nl > + for ( PeerDesc d : peerGroup . getPeers ( ) ) { < nl > + if ( d . getPeer ( ) . equals ( peer ) ) { < nl > + d . setCounter ( counter ) ; < nl > + found = true ; < nl > + } < nl > + } < nl > + < nl > + if ( ! found ) { < nl > + peerGroup . getPeers ( ) . add ( new PeerDesc ( peer , counter ) ) ; < nl > + } < nl > + < nl > + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; < nl > + ArrayList < DialogDesc > groupDescs = new ArrayList < DialogDesc > ( ) ; < nl > + for ( PeerDesc d : peerGroup . getPeers ( ) ) { < nl > + groupDescs . add ( new DialogDesc ( d . getPeer ( ) , " GRPOUP # " + d . getPeer ( ) . getPeerId ( ) , < nl > + null , false , d . counter ) ) ; < nl > + } < nl > + groups . add ( new DialogGroup ( " Groups " , " group " , groupDescs ) ) ; < nl > + < nl > + context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof PeerInformationChanged ) { < nl > + PeerInformationChanged informationChanged = ( PeerInformationChanged ) message ; < nl > + onPeerInfoChanged ( informationChanged . getPeer ( ) , < nl > + informationChanged . getTitle ( ) , < nl > + informationChanged . getAvatar ( ) ) ; < nl > + } else if ( message instanceof NewMessage ) { < nl > + NewMessage newMessage = ( NewMessage ) message ; < nl > + onNewMessage ( newMessage . peer , newMessage . sortDate , newMessage . counter ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > + public static class PeerInformationChanged { < nl > + < nl > + private Peer peer ; < nl > + private String title ; < nl > + private Avatar avatar ; < nl > + < nl > + public PeerInformationChanged ( Peer peer , String title , Avatar avatar ) { < nl > + this . peer = peer ; < nl > + this . title = title ; < nl > + this . avatar = avatar ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public Avatar getAvatar ( ) { < nl > + return avatar ; < nl > + } < nl > + } < nl > + < nl > + public static class CounterChanged { < nl > + private Peer peer ; < nl > + private int counter ; < nl > + < nl > + public CounterChanged ( Peer peer , int counter ) { < nl > + this . peer = peer ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + } < nl > + < nl > + public static class NewMessage { < nl > + < nl > + private Peer peer ; < nl > + private int counter ; < nl > + private long sortDate ; < nl > + < nl > + public NewMessage ( Peer peer , int counter , long sortDate ) { < nl > + this . peer = peer ; < nl > + this . counter = counter ; < nl > + this . sortDate = sortDate ; < nl > + } < nl > + } < nl > + < nl > + private class PeerGroup { < nl > + < nl > + private String key ; < nl > + private String title ; < nl > + private ArrayList < PeerDesc > peers ; < nl > + < nl > + public PeerGroup ( String key , String title ) { < nl > + this . key = key ; < nl > + this . title = title ; < nl > + this . peers = new ArrayList < PeerDesc > ( ) ; < nl > + } < nl > + < nl > + public String getKey ( ) { < nl > + return key ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public ArrayList < PeerDesc > getPeers ( ) { < nl > + return peers ; < nl > + } < nl > + } < nl > + < nl > + private class PeerDesc { < nl > + < nl > + private Peer peer ; < nl > + private int counter ; < nl > + < nl > + public PeerDesc ( Peer peer , int counter ) { < nl > + this . peer = peer ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + < nl > + public void setCounter ( int counter ) { < nl > + this . counter = counter ; < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > new file mode 100644 < nl > index 0000000 . . ae47f02 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > @ @ - 0 , 0 + 1 , 30 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . entity . DialogDesc ; < nl > + < nl > + public class DialogGroup { < nl > + < nl > + private String title ; < nl > + private String key ; < nl > + private ArrayList < DialogDesc > dialogs ; < nl > + < nl > + public DialogGroup ( String title , String key , ArrayList < DialogDesc > dialogs ) { < nl > + this . title = title ; < nl > + this . key = key ; < nl > + this . dialogs = dialogs ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public String getKey ( ) { < nl > + return key ; < nl > + } < nl > + < nl > + public ArrayList < DialogDesc > getDialogs ( ) { < nl > + return dialogs ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroupsVM . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroupsVM . java < nl > new file mode 100644 < nl > index 0000000 . . 0a374ba < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroupsVM . java < nl > @ @ - 0 , 0 + 1 , 18 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . runtime . mvvm . ValueModel ; < nl > + < nl > + public class DialogGroupsVM { < nl > + < nl > + private ValueModel < ArrayList < DialogGroup > > groupsValueModel ; < nl > + < nl > + public DialogGroupsVM ( ) { < nl > + groupsValueModel = new ValueModel < ArrayList < DialogGroup > > ( " groups . model " , null ) ; < nl > + } < nl > + < nl > + public ValueModel < ArrayList < DialogGroup > > getGroupsValueModel ( ) { < nl > + return groupsValueModel ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java < nl > index 530cb4b . . 31e2f0e 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java < nl > + + + b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java < nl > @ @ - 119 , 21 + 119 , 9 @ @ public class SQLiteKeyValue implements KeyValueStorage { < nl > } < nl > < nl > @ Override < nl > - public void clear ( ) { < nl > - checkSqlite ( ) ; < nl > - db . beginTransaction ( ) ; < nl > - try { < nl > - db . execSQL ( " DELETE FROM \ " " + name + " \ " " ) ; < nl > - db . setTransactionSuccessful ( ) ; < nl > - } finally { < nl > - db . endTransaction ( ) ; < nl > - } < nl > - } < nl > - < nl > - @ Override < nl > - public byte [ ] getValue ( long id ) { < nl > + public byte [ ] loadItem ( long key ) { < nl > checkSqlite ( ) ; < nl > - Cursor cursor = db . query ( " \ " " + name + " \ " " , new String [ ] { " \ " BYTES \ " " } , " \ " ID \ " = ? " , new String [ ] { " " + id } , null , null , null ) ; < nl > + Cursor cursor = db . query ( " \ " " + name + " \ " " , new String [ ] { " \ " BYTES \ " " } , " \ " ID \ " = ? " , new String [ ] { " " + key } , null , null , null ) ; < nl > if ( cursor = = null ) { < nl > return null ; < nl > } < nl > @ @ - 146 , 4 + 134 , 26 @ @ public class SQLiteKeyValue implements KeyValueStorage { < nl > } < nl > return null ; < nl > } < nl > + < nl > + @ Override < nl > + public List < KeyValueRecord > loadItems ( long [ ] keys ) { < nl > + return null ; < nl > + } < nl > + < nl > + @ Override < nl > + public List < KeyValueRecord > loadAllItems ( ) { < nl > + return null ; < nl > + } < nl > + < nl > + @ Override < nl > + public void clear ( ) { < nl > + checkSqlite ( ) ; < nl > + db . beginTransaction ( ) ; < nl > + try { < nl > + db . execSQL ( " DELETE FROM \ " " + name + " \ " " ) ; < nl > + db . setTransactionSuccessful ( ) ; < nl > + } finally { < nl > + db . endTransaction ( ) ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java < nl > index b153387 . . 25b59e1 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java < nl > + + + b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java < nl > @ @ - 124 , 6 + 124 , 11 @ @ public class SQLiteList implements ListStorageDisplayEx { < nl > return null ; < nl > } < nl > < nl > + @ Override < nl > + public List < ListEngineRecord > loadAllItems ( ) { < nl > + return null ; < nl > + } < nl > + < nl > < nl > public ListEngineRecord loadItemBySortKey ( long key ) { < nl > checkTable ( ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java < nl > index 60239e4 . . c7dd481 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java < nl > @ @ - 9 , 6 + 9 , 7 @ @ import com . google . j2objc . annotations . ObjectiveCName ; < nl > import java . util . List ; < nl > < nl > public interface KeyValueEngine < V extends KeyValueItem > { < nl > + < nl > @ ObjectiveCName ( " addOrUpdateItem : " ) < nl > void addOrUpdateItem ( V item ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift < nl > index fb65f46 . . c22c65a 100644 < nl > - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift < nl > + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift < nl > @ @ - 5 , 18 + 5 , 21 @ @ < nl > import Foundation < nl > < nl > @ objc class FMDBKeyValue : NSObject , ARKeyValueStorage { < nl > - var db : FMDatabase ? ; < nl > + < nl > + var db : FMDatabase ! < nl > < nl > - let databasePath : String ; < nl > - let tableName : String ; < nl > + let databasePath : String < nl > + let tableName : String < nl > < nl > - let queryCreate : String ; < nl > - let queryItem : String ; < nl > - let queryAdd : String ; < nl > - let queryDelete : String ; < nl > - let queryDeleteAll : String ; < nl > + let queryCreate : String < nl > + let queryItem : String < nl > + let queryItems : String < nl > + let queryAll : String < nl > + let queryAdd : String < nl > + let queryDelete : String < nl > + let queryDeleteAll : String < nl > < nl > - var isTableChecked : Bool = false ; < nl > + var isTableChecked : Bool = false < nl > < nl > init ( databasePath : String , tableName : String ) { < nl > self . databasePath = databasePath < nl > @ @ - 26 , 11 + 29 , 13 @ @ import Foundation < nl > self . queryCreate = " CREATE TABLE IF NOT EXISTS " + tableName + " ( " + < nl > " \ " ID \ " INTEGER NOT NULL , " + < nl > " \ " BYTES \ " BLOB NOT NULL , " + < nl > - " PRIMARY KEY ( \ " ID \ " ) ) ; " ; < nl > - self . queryItem = " SELECT \ " BYTES \ " FROM " + tableName + " WHERE \ " ID \ " = ? ; " ; < nl > - self . queryAdd = " REPLACE INTO " + tableName + " ( \ " ID \ " , \ " BYTES \ " ) VALUES ( ? , ? ) ; " ; < nl > - self . queryDelete = " DELETE FROM " + tableName + " WHERE \ " ID \ " = ? ; " ; < nl > - self . queryDeleteAll = " DELETE FROM " + tableName + " ; " ; < nl > + " PRIMARY KEY ( \ " ID \ " ) ) ; " < nl > + self . queryItem = " SELECT \ " BYTES \ " FROM " + tableName + " WHERE \ " ID \ " = ? ; " < nl > + self . queryItems = " SELECT ( \ " ID \ " , \ " BYTES \ " ) FROM " + tableName + " WHERE \ " ID \ " in ? ; " < nl > + self . queryAll = " SELECT ( \ " ID \ " , \ " BYTES \ " ) FROM " + tableName + " ; " < nl > + self . queryAdd = " REPLACE INTO " + tableName + " ( \ " ID \ " , \ " BYTES \ " ) VALUES ( ? , ? ) ; " < nl > + self . queryDelete = " DELETE FROM " + tableName + " WHERE \ " ID \ " = ? ; " < nl > + self . queryDeleteAll = " DELETE FROM " + tableName + " ; " < nl > < nl > super . init ( ) < nl > } < nl > @ @ - 39 , 68 + 44 , 103 @ @ import Foundation < nl > if ( isTableChecked ) { < nl > return < nl > } < nl > - isTableChecked = true ; < nl > + isTableChecked = true < nl > < nl > self . db = FMDatabase ( path : databasePath ) < nl > - self . db ! . open ( ) < nl > - if ( ! db ! . tableExists ( tableName ) ) { < nl > - db ! . executeUpdate ( queryCreate ) < nl > + self . db . open ( ) < nl > + if ( ! db . tableExists ( tableName ) ) { < nl > + db . executeUpdate ( queryCreate ) < nl > } < nl > } < nl > < nl > func addOrUpdateItems ( values : JavaUtilList ! ) { < nl > - checkTable ( ) ; < nl > + checkTable ( ) < nl > < nl > - db ! . beginTransaction ( ) < nl > + db . beginTransaction ( ) < nl > for i in 0 . . < values . size ( ) { < nl > - let record = values . getWithInt ( i ) as ! ARKeyValueRecord ; < nl > - db ! . executeUpdate ( queryAdd , record . getId ( ) . toNSNumber ( ) , record . getData ( ) ! . toNSData ( ) ) < nl > + let record = values . getWithInt ( i ) as ! ARKeyValueRecord < nl > + db . executeUpdate ( queryAdd , record . getId ( ) . toNSNumber ( ) , record . getData ( ) ! . toNSData ( ) ) < nl > } < nl > - db ! . commit ( ) < nl > + db . commit ( ) < nl > } < nl > < nl > func addOrUpdateItemWithKey ( key : jlong , withData data : IOSByteArray ! ) { < nl > - checkTable ( ) ; < nl > + checkTable ( ) < nl > < nl > - db ! . beginTransaction ( ) < nl > - db ! . executeUpdate ( queryAdd , key . toNSNumber ( ) , data ! . toNSData ( ) ) < nl > - db ! . commit ( ) < nl > + db . beginTransaction ( ) < nl > + db . executeUpdate ( queryAdd , key . toNSNumber ( ) , data ! . toNSData ( ) ) < nl > + db . commit ( ) < nl > } < nl > < nl > func removeItemsWithKeys ( keys : IOSLongArray ! ) { < nl > - checkTable ( ) ; < nl > + checkTable ( ) < nl > < nl > - db ! . beginTransaction ( ) < nl > + db . beginTransaction ( ) < nl > for i in 0 . . < keys . length ( ) { < nl > let key = keys . longAtIndex ( UInt ( i ) ) ; < nl > - db ! . executeUpdate ( queryDelete , key . toNSNumber ( ) ) < nl > + db . executeUpdate ( queryDelete , key . toNSNumber ( ) ) < nl > } < nl > - db ! . commit ( ) < nl > + db . commit ( ) < nl > } < nl > < nl > func removeItemWithKey ( key : jlong ) { < nl > - checkTable ( ) ; < nl > + checkTable ( ) < nl > < nl > - db ! . beginTransaction ( ) < nl > - db ! . executeUpdate ( queryDelete , key . toNSNumber ( ) ) < nl > - db ! . commit ( ) < nl > + db . beginTransaction ( ) < nl > + db . executeUpdate ( queryDelete , key . toNSNumber ( ) ) < nl > + db . commit ( ) < nl > } < nl > < nl > - func getValueWithKey ( key : jlong ) - > IOSByteArray ! { < nl > - checkTable ( ) ; < nl > + func loadItemWithKey ( key : jlong ) - > IOSByteArray ! { < nl > + checkTable ( ) < nl > < nl > - let result = db ! . dataForQuery ( queryItem , key . toNSNumber ( ) ) ; < nl > + let result = db . dataForQuery ( queryItem , key . toNSNumber ( ) ) < nl > if ( result = = nil ) { < nl > - return nil ; < nl > + return nil < nl > + } < nl > + return result . toJavaBytes ( ) < nl > + } < nl > + < nl > + func loadAllItems ( ) - > JavaUtilList ! { < nl > + checkTable ( ) < nl > + < nl > + let res = JavaUtilArrayList ( ) < nl > + < nl > + if let result = db . executeQuery ( queryAll ) { < nl > + while ( result . next ( ) ) { < nl > + res . addWithId ( ARKeyValueRecord ( key : jlong ( result . longLongIntForColumn ( " ID " ) ) , withData : result . dataForColumn ( " BYTES " ) . toJavaBytes ( ) ) ) < nl > + } < nl > + } < nl > + < nl > + return res < nl > + } < nl > + < nl > + func loadItems ( keys : IOSLongArray ! ) - > JavaUtilList ! { < nl > + checkTable ( ) < nl > + < nl > + / / Converting to NSNumbers < nl > + var ids = [ NSNumber ] ( ) < nl > + for i in 0 . . < keys . length ( ) { < nl > + ids . append ( keys . longAtIndex ( UInt ( i ) ) . toNSNumber ( ) ) < nl > } < nl > - return result . toJavaBytes ( ) ; < nl > + < nl > + let res = JavaUtilArrayList ( ) < nl > + < nl > + if let result = db . executeQuery ( queryItems , ids ) { < nl > + while ( result . next ( ) ) { < nl > + / / TODO : Optimize lookup < nl > + res . addWithId ( ARKeyValueRecord ( key : jlong ( result . longLongIntForColumn ( " ID " ) ) , withData : result . dataForColumn ( " BYTES " ) . toJavaBytes ( ) ) ) < nl > + } < nl > + } < nl > + < nl > + return res < nl > } < nl > < nl > func clear ( ) { < nl > - checkTable ( ) ; < nl > + checkTable ( ) < nl > < nl > - db ! . beginTransaction ( ) < nl > - db ! . executeUpdate ( queryDeleteAll ) ; < nl > - db ! . commit ( ) < nl > + db . beginTransaction ( ) < nl > + db . executeUpdate ( queryDeleteAll ) < nl > + db . commit ( ) < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift < nl > index 27ac7e7 . . 209a6e3 100644 < nl > - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift < nl > + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift < nl > @ @ - 199 , 6 + 199 , 12 @ @ class FMDBList : NSObject , ARListStorageDisplayEx { < nl > } < nl > } < nl > < nl > + func loadAllItems ( ) - > JavaUtilList ! { < nl > + let res = JavaUtilArrayList ( ) < nl > + / / TODO : Implement < nl > + return res < nl > + } < nl > + < nl > func loadForwardWithSortKey ( sortingKey : JavaLangLong ! , withLimit limit : jint ) - > JavaUtilList ! { < nl > checkTable ( ) ; < nl > var result : FMResultSet ? = nil ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json 
 index ed15f18 . . 6d9d476 100644 
 - - - a / actor - sdk / sdk - api / actor . json 
 + + + b / actor - sdk / sdk - api / actor . json 
 @ @ - 13291 , 12 + 13291 , 24 @ @ 
 " Encrypted package that is encrypted for multiple keys " , 
 { 
 " type " : " reference " , 
 + " argument " : " senderKeyGroupId " , 
 + " category " : " full " , 
 + " description " : " Sender key group id " 
 + } , 
 + { 
 + " type " : " reference " , 
 " argument " : " keys " , 
 " category " : " full " , 
 " description " : " Encrypted encryption keys " 
 } , 
 { 
 " type " : " reference " , 
 + " argument " : " ignoredKeyGroups " , 
 + " category " : " full " , 
 + " description " : " Explictly ignored key groups " 
 + } , 
 + { 
 + " type " : " reference " , 
 " argument " : " algType " , 
 " category " : " full " , 
 " description " : " Package encryption type " 
 @ @ - 13311 , 6 + 13323 , 14 @ @ 
 " attributes " : [ 
 { 
 " type " : { 
 + " type " : " alias " , 
 + " childType " : " keyGroupId " 
 + } , 
 + " id " : 4 , 
 + " name " : " senderKeyGroupId " 
 + } , 
 + { 
 + " type " : { 
 " type " : " list " , 
 " childType " : { 
 " type " : " struct " , 
 @ @ - 13321 , 6 + 13341 , 17 @ @ 
 " name " : " keys " 
 } , 
 { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : { 
 + " type " : " alias " , 
 + " childType " : " keyGroupId " 
 + } 
 + } , 
 + " id " : 5 , 
 + " name " : " ignoredKeyGroups " 
 + } , 
 + { 
 " type " : " string " , 
 " id " : 2 , 
 " name " : " algType " 
 diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 index 04b7d33 . . 67c1f7d 100644 
 - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 @ @ - 10972 , 7 + 10972 , 7 @ @ 
 < / node > 
 < / node > 
 < node concept = " 2m6fVq " id = " 5 _ CDdZ2jMNJ " role = " 2m5mJr " > 
 - < property role = " TrG5h " value = " LoadEphermalPublicKeys " / > 
 + < property role = " TrG5h " value = " LoadPreKeys " / > 
 < node concept = " 2uC4CA " id = " 5 _ CDdZ2jQvA " role = " 2uC9gA " > 
 < property role = " 2uC4DK " value = " 400 " / > 
 < property role = " 2uC4Qe " value = " NO _ GROUP _ FOUND " / > 
 @ @ - 11369 , 7 + 11369 , 7 @ @ 
 < / node > 
 < / node > 
 < node concept = " 2m6fVq " id = " 5 _ CDdZ2qOwz " role = " 2m5mJr " > 
 - < property role = " TrG5h " value = " UploadEphermalKey " / > 
 + < property role = " TrG5h " value = " UploadPreKey " / > 
 < node concept = " 2m7Kf5 " id = " 5 _ CDdZ2qOzv " role = " 2m0hLx " > 
 < property role = " 2m7DUN " value = " 1 " / > 
 < property role = " TrG5h " value = " keyGroupId " / > 
 @ @ - 11402 , 7 + 11402 , 7 @ @ 
 < ref role = " 2m1o9l " node = " GBscvBB6 _ K " resolve = " Void " / > 
 < / node > 
 < node concept = " NXeRC " id = " 5 _ CDdZ2qPs $ " role = " 1GBnQ6 " > 
 - < property role = " NXePf " value = " Uploading Ephermal Keys " / > 
 + < property role = " NXePf " value = " Uploading Pre Keys " / > 
 < / node > 
 < node concept = " NX1gA " id = " 5 _ CDdZ2qQm9 " role = " 1GBnQ6 " > 
 < property role = " NX6R2 " value = " Key Group Id " / > 
 @ @ - 11425 , 6 + 11425 , 13 @ @ 
 < / node > 
 < node concept = " 2m5naR " id = " 5 _ CDdZ2r0S4 " role = " 2m5mJr " > 
 < property role = " TrG5h " value = " EncryptedBox " / > 
 + < node concept = " 2m7Kf5 " id = " 1iu4pgORmss " role = " 2m0hLx " > 
 + < property role = " 2m7DUN " value = " 4 " / > 
 + < property role = " TrG5h " value = " senderKeyGroupId " / > 
 + < node concept = " wb0Ql " id = " 1iu4pgORyRX " role = " 2m7DVh " > 
 + < ref role = " wb18D " node = " 5 _ CDdZ2q76m " resolve = " keyGroupId " / > 
 + < / node > 
 + < / node > 
 < node concept = " 2m7Kf5 " id = " 5 _ CDdZ2r6rJ " role = " 2m0hLx " > 
 < property role = " 2m7DUN " value = " 1 " / > 
 < property role = " TrG5h " value = " keys " / > 
 @ @ - 11434 , 6 + 11441 , 15 @ @ 
 < / node > 
 < / node > 
 < / node > 
 + < node concept = " 2m7Kf5 " id = " 1iu4pgORzN8 " role = " 2m0hLx " > 
 + < property role = " 2m7DUN " value = " 5 " / > 
 + < property role = " TrG5h " value = " ignoredKeyGroups " / > 
 + < node concept = " 2m5nlk " id = " 1iu4pgORzNl " role = " 2m7DVh " > 
 + < node concept = " wb0Ql " id = " 1iu4pgORzNr " role = " 3GJlyp " > 
 + < ref role = " wb18D " node = " 5 _ CDdZ2q76m " resolve = " keyGroupId " / > 
 + < / node > 
 + < / node > 
 + < / node > 
 < node concept = " 2m7Kf5 " id = " 5 _ CDdZ2rwG4 " role = " 2m0hLx " > 
 < property role = " 2m7DUN " value = " 2 " / > 
 < property role = " TrG5h " value = " algType " / > 
 @ @ - 11447 , 11 + 11463 , 21 @ @ 
 < node concept = " NXeRC " id = " 5 _ CDdZ2r6s9 " role = " NXodf " > 
 < property role = " NXePf " value = " Encrypted package that is encrypted for multiple keys " / > 
 < / node > 
 + < node concept = " NX1gA " id = " 1iu4pgORmtV " role = " NXodf " > 
 + < property role = " NX6R2 " value = " Sender key group id " / > 
 + < property role = " 1GSvIU " value = " full " / > 
 + < ref role = " NX6Kv " node = " 1iu4pgORmss " resolve = " senderKeyGroupId " / > 
 + < / node > 
 < node concept = " NX1gA " id = " 5 _ CDdZ2r6se " role = " NXodf " > 
 < property role = " NX6R2 " value = " Encrypted encryption keys " / > 
 < property role = " 1GSvIU " value = " full " / > 
 < ref role = " NX6Kv " node = " 5 _ CDdZ2r6rJ " resolve = " keys " / > 
 < / node > 
 + < node concept = " NX1gA " id = " 1iu4pgORzN _ " role = " NXodf " > 
 + < property role = " NX6R2 " value = " Explictly ignored key groups " / > 
 + < property role = " 1GSvIU " value = " full " / > 
 + < ref role = " NX6Kv " node = " 1iu4pgORzN8 " resolve = " ignoredKeyGroups " / > 
 + < / node > 
 < node concept = " NX1gA " id = " 5 _ CDdZ2rxAe " role = " NXodf " > 
 < property role = " 1GSvIU " value = " full " / > 
 < property role = " NX6R2 " value = " Package encryption type " / > 
 @ @ - 11507 , 6 + 11533 , 28 @ @ 
 < ref role = " NX6Kv " node = " 5 _ CDdZ2r2Pn " resolve = " encryptedKey " / > 
 < / node > 
 < / node > 
 + < node concept = " w93zz " id = " 1iu4pgORDAA " role = " 2m5mJr " > 
 + < property role = " 1FaRnq " value = " true " / > 
 + < property role = " TrG5h " value = " EncryptedContainer " / > 
 + < / node > 
 + < node concept = " 2m5naR " id = " 1iu4pgORDIq " role = " 2m5mJr " > 
 + < property role = " TrG5h " value = " EncryptedPrivateMessage " / > 
 + < property role = " tsOgz " value = " true " / > 
 + < property role = " w4tQU " value = " true " / > 
 + < ref role = " w4 $ XZ " node = " 1iu4pgORDAA " resolve = " EncryptedContainer " / > 
 + < node concept = " Nu42z " id = " 1iu4pgORDMl " role = " 3BtCOu " > 
 + < property role = " Nu42W " value = " 01 " / > 
 + < / node > 
 + < / node > 
 + < node concept = " 2m5naR " id = " 1iu4pgORDQj " role = " 2m5mJr " > 
 + < property role = " TrG5h " value = " EncryptedGroupMessage " / > 
 + < property role = " tsOgz " value = " true " / > 
 + < property role = " w4tQU " value = " true " / > 
 + < ref role = " w4 $ XZ " node = " 1iu4pgORDAA " resolve = " EncryptedContainer " / > 
 + < node concept = " Nu42z " id = " 1iu4pgORDUg " role = " 3BtCOu " > 
 + < property role = " Nu42W " value = " 02 " / > 
 + < / node > 
 + < / node > 
 < node concept = " 1Dx9M1 " id = " 7ZzLuuoIXYH " role = " 1Dx9rD " > 
 < property role = " 1Dx9K7 " value = " Package that include encryption support " / > 
 < / node > 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiEncryptedBox . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiEncryptedBox . java 
 index 7acf648 . . 35d9b72 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiEncryptedBox . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / ApiEncryptedBox . java 
 @ @ - 16 , 12 + 16 , 16 @ @ import java . util . ArrayList ; 
 
 public class ApiEncryptedBox extends BserObject { 
 
 + private int senderKeyGroupId ; 
 private List < ApiEncyptedBoxKey > keys ; 
 + private List < Integer > ignoredKeyGroups ; 
 private String algType ; 
 private byte [ ] encPackage ; 
 
 - public ApiEncryptedBox ( @ NotNull List < ApiEncyptedBoxKey > keys , @ NotNull String algType , @ NotNull byte [ ] encPackage ) { 
 + public ApiEncryptedBox ( int senderKeyGroupId , @ NotNull List < ApiEncyptedBoxKey > keys , @ NotNull List < Integer > ignoredKeyGroups , @ NotNull String algType , @ NotNull byte [ ] encPackage ) { 
 + this . senderKeyGroupId = senderKeyGroupId ; 
 this . keys = keys ; 
 + this . ignoredKeyGroups = ignoredKeyGroups ; 
 this . algType = algType ; 
 this . encPackage = encPackage ; 
 } 
 @ @ - 30 , 12 + 34 , 21 @ @ public class ApiEncryptedBox extends BserObject { 
 
 } 
 
 + public int getSenderKeyGroupId ( ) { 
 + return this . senderKeyGroupId ; 
 + } 
 + 
 @ NotNull 
 public List < ApiEncyptedBoxKey > getKeys ( ) { 
 return this . keys ; 
 } 
 
 @ NotNull 
 + public List < Integer > getIgnoredKeyGroups ( ) { 
 + return this . ignoredKeyGroups ; 
 + } 
 + 
 + @ NotNull 
 public String getAlgType ( ) { 
 return this . algType ; 
 } 
 @ @ - 47 , 18 + 60 , 22 @ @ public class ApiEncryptedBox extends BserObject { 
 
 @ Override 
 public void parse ( BserValues values ) throws IOException { 
 + this . senderKeyGroupId = values . getInt ( 4 ) ; 
 List < ApiEncyptedBoxKey > _ keys = new ArrayList < ApiEncyptedBoxKey > ( ) ; 
 for ( int i = 0 ; i < values . getRepeatedCount ( 1 ) ; i + + ) { 
 _ keys . add ( new ApiEncyptedBoxKey ( ) ) ; 
 } 
 this . keys = values . getRepeatedObj ( 1 , _ keys ) ; 
 + this . ignoredKeyGroups = values . getRepeatedInt ( 5 ) ; 
 this . algType = values . getString ( 2 ) ; 
 this . encPackage = values . getBytes ( 3 ) ; 
 } 
 
 @ Override 
 public void serialize ( BserWriter writer ) throws IOException { 
 + writer . writeInt ( 4 , this . senderKeyGroupId ) ; 
 writer . writeRepeatedObj ( 1 , this . keys ) ; 
 + writer . writeRepeatedInt ( 5 , this . ignoredKeyGroups ) ; 
 if ( this . algType = = null ) { 
 throw new IOException ( ) ; 
 } 
 @ @ - 72 , 7 + 89 , 9 @ @ public class ApiEncryptedBox extends BserObject { 
 @ Override 
 public String toString ( ) { 
 String res = " struct EncryptedBox { " ; 
 - res + = " keys = " + this . keys ; 
 + res + = " senderKeyGroupId = " + this . senderKeyGroupId ; 
 + res + = " , keys = " + this . keys ; 
 + res + = " , ignoredKeyGroups = " + this . ignoredKeyGroups ; 
 res + = " , algType = " + this . algType ; 
 res + = " , encPackage = " + byteArrayToString ( this . encPackage ) ; 
 res + = " } " ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / encryption / PeerSession . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / encryption / PeerSession . java 
 index e85bac7 . . 79291be 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / encryption / PeerSession . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / encryption / PeerSession . java 
 @ @ - 1 , 10 + 1 , 12 @ @ 
 package im . actor . core . entity . encryption ; 
 
 import java . io . IOException ; 
 + import java . util . Comparator ; 
 
 import im . actor . runtime . bser . BserObject ; 
 import im . actor . runtime . bser . BserValues ; 
 import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . crypto . primitives . util . ByteStrings ; 
 import im . actor . runtime . function . Predicate ; 
 
 public class PeerSession extends BserObject { 
 @ @ - 29 , 6 + 31 , 13 @ @ public class PeerSession extends BserObject { 
 } ; 
 } 
 
 + public static final Comparator < PeerSession > COMPARATOR = new Comparator < PeerSession > ( ) { 
 + @ Override 
 + public int compare ( PeerSession lhs , PeerSession rhs ) { 
 + return ByteStrings . compare ( lhs . getMasterKey ( ) , rhs . getMasterKey ( ) ) ; 
 + } 
 + } ; 
 + 
 private long sid ; 
 private int uid ; 
 private int ownKeyGroupId ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java 
 index f4cd037 . . 37f59bc 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedMsgActor . java 
 @ @ - 38 , 7 + 38 , 8 @ @ public class EncryptedMsgActor extends ModuleActor { 
 boxKeys . add ( new ApiEncyptedBoxKey ( b . getUid ( ) , 
 b . getKeyGroupId ( ) , " curve25519 " , b . getEncryptedKey ( ) ) ) ; 
 } 
 - ApiEncryptedBox apiEncryptedBox = new ApiEncryptedBox ( boxKeys , " aes - kuznechik " , encryptedBox . getBox ( ) . getEncryptedPackage ( ) ) ; 
 + ArrayList < Integer > ignored = new ArrayList < Integer > ( ) ; 
 + ApiEncryptedBox apiEncryptedBox = new ApiEncryptedBox ( 0 , boxKeys , ignored , " aes - kuznechik " , encryptedBox . getBox ( ) . getEncryptedPackage ( ) ) ; 
 ApiEncryptedMessage apiEncryptedMessage = new ApiEncryptedMessage ( apiEncryptedBox ) ; 
 future . result ( new EncryptedMessage ( apiEncryptedMessage ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 index 22e85b2 . . 3e38d02 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 @ @ - 23 , 8 + 23 , 6 @ @ import im . actor . runtime . actors . ask . AskResult ; 
 import im . actor . runtime . crypto . IntegrityException ; 
 import im . actor . runtime . function . Consumer ; 
 import im . actor . runtime . function . Function ; 
 - import im . actor . runtime . function . Predicate ; 
 - import im . actor . runtime . function . Predicates ; 
 import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . promise . PromiseResolver ; 
 import im . actor . runtime . crypto . box . ActorBox ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java 
 index 3bda7b3 . . ef4e7ab 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package im . actor . core . modules . encryption ; 
 
 + import com . google . j2objc . annotations . ObjectiveCName ; 
 + 
 import java . io . IOException ; 
 import java . util . ArrayList ; 
 import java . util . HashMap ; 
 @ @ - 358 , 10 + 360 , 6 @ @ public class KeyManagerActor extends ModuleActor { 
 } 
 
 / / 
 - / / Downloading 
 - / / 
 - 
 - / / 
 / / Downloading pre key 
 / / 
 
 @ @ - 552 , 13 + 550 , 12 @ @ public class KeyManagerActor extends ModuleActor { 
 key . getKeyMaterial ( ) ) ) ; 
 } 
 
 - if ( keys . size ( ) > 0 ) { 
 - return new UserKeysGroup ( keyGroup . getKeyGroupId ( ) , identity , keys . toArray ( new PublicKey [ keys . size ( ) ] ) , 
 - new PublicKey [ 0 ] ) ; 
 - } else { 
 + if ( keys . size ( ) = = 0 ) { 
 Log . w ( TAG , " ( uid : " + uid + " ) No valid keys in key group # " + keyGroup . getKeyGroupId ( ) ) ; 
 - return null ; 
 } 
 + 
 + return new UserKeysGroup ( keyGroup . getKeyGroupId ( ) , identity , keys . toArray ( new PublicKey [ keys . size ( ) ] ) , 
 + new PublicKey [ 0 ] ) ; 
 } 
 
 private Promise < Tuple2 < UserKeysGroup , UserKeys > > pickUserGroup ( int uid , final int keyGroupId ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java 
 index 633e2c8 . . d2de281 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java 
 @ @ - 34 , 6 + 34 , 10 @ @ import im . actor . runtime . promise . Tuple3 ; 
 import im . actor . runtime . promise . Tuple4 ; 
 import im . actor . runtime . storage . KeyValueEngine ; 
 
 + / * * 
 + * Stores and manages encrypted sessions between peers . 
 + * Can be asked to pick session parameters for specific peer . 
 + * / 
 public class SessionManagerActor extends ModuleActor { 
 
 private static final String TAG = " SessionManagerActor " ; 
 @ @ - 68 , 15 + 72 , 18 @ @ public class SessionManagerActor extends ModuleActor { 
 } ; 
 } 
 
 + / * * 
 + * Pick session 
 + * 
 + * @ param uid User ' s id 
 + * @ param keyGroupId User ' s key group 
 + * @ param resolver Resolver for result 
 + * / 
 public void pickSession ( final int uid , 
 final int keyGroupId , 
 final PromiseResolver < PeerSession > resolver ) { 
 
 - / / 
 - / / Searching for available session 
 - / / 
 - 
 - pickSession ( uid , keyGroupId ) 
 + pickCachedSession ( uid , keyGroupId ) 
 . fallback ( new Function < Exception , Promise < PeerSession > > ( ) { 
 @ Override 
 public Promise < PeerSession > apply ( Exception e ) { 
 @ @ - 112 , 20 + 119 , 29 @ @ public class SessionManagerActor extends ModuleActor { 
 . afterVoid ( new Supplier < Promise < PeerSession > > ( ) { 
 @ Override 
 public Promise < PeerSession > get ( ) { 
 - return pickSession ( uid , keyGroupId ) ; 
 + return pickCachedSession ( uid , keyGroupId ) ; 
 } 
 } ) 
 . pipeTo ( resolver ) 
 . done ( self ( ) ) ; 
 } 
 
 + / * * 
 + * Pick session for specific keys 
 + * 
 + * @ param uid User ' s id 
 + * @ param keyGroupId User ' s key group 
 + * @ param ownKeyId Own Pre Key id 
 + * @ param theirKeyId Their Pre Key id 
 + * @ param srcResolver resolver for value 
 + * / 
 public void pickSession ( final int uid , 
 final int keyGroupId , 
 final long ownKeyId , 
 final long theirKeyId , 
 final PromiseResolver < PeerSession > srcResolver ) { 
 
 - pickSession ( uid , keyGroupId , ownKeyId , theirKeyId ) 
 + pickCachedSession ( uid , keyGroupId , ownKeyId , theirKeyId ) 
 . fallback ( new Function < Exception , Promise < PeerSession > > ( ) { 
 @ Override 
 public Promise < PeerSession > apply ( Exception e ) { 
 @ @ - 157 , 6 + 173 , 18 @ @ public class SessionManagerActor extends ModuleActor { 
 . done ( self ( ) ) ; 
 } 
 
 + / * * 
 + * Spawn new session 
 + * 
 + * @ param uid user ' s id 
 + * @ param ownKeyGroup own key group id 
 + * @ param theirKeyGroup their key group Id 
 + * @ param ownIdentity own identity private key 
 + * @ param theirIdentity their identity public key 
 + * @ param ownPreKey own pre key 
 + * @ param theirPreKey their pre key 
 + * @ return spawned session 
 + * / 
 private PeerSession spawnSession ( int uid , 
 int ownKeyGroup , 
 int theirKeyGroup , 
 @ @ - 202 , 31 + 230 , 53 @ @ public class SessionManagerActor extends ModuleActor { 
 return peerSession ; 
 } 
 
 - private Promise < PeerSession > pickSession ( int uid , final int keyGroupId ) { 
 + / * * 
 + * Picking cached session 
 + * 
 + * @ param uid User ' s id 
 + * @ param keyGroupId Key Group Id 
 + * @ return promise of session 
 + * / 
 + private Promise < PeerSession > pickCachedSession ( int uid , final int keyGroupId ) { 
 return ManagedList . of ( peerSessions . getValue ( uid ) ) 
 . flatMap ( PeerSessionsStorage . SESSIONS ) 
 . filter ( PeerSession . BY _ THEIR _ GROUP ( keyGroupId ) ) 
 + . sorted ( PeerSession . COMPARATOR ) 
 . firstPromise ( ) ; 
 } 
 
 - private Promise < PeerSession > pickSession ( int uid , final int keyGroupId , final long ownKeyId , final long theirKeyId ) { 
 + / * * 
 + * Pick cached session for specific keys 
 + * 
 + * @ param uid User ' s id 
 + * @ param keyGroupId Key Group Id 
 + * @ param ownKeyId Own Pre key id 
 + * @ param theirKeyId Their Pre key id 
 + * @ return promise of session 
 + * / 
 + private Promise < PeerSession > pickCachedSession ( int uid , final int keyGroupId , final long ownKeyId , final long theirKeyId ) { 
 return ManagedList . of ( peerSessions . getValue ( uid ) ) 
 . flatMap ( PeerSessionsStorage . SESSIONS ) 
 . filter ( PeerSession . BY _ IDS ( keyGroupId , ownKeyId , theirKeyId ) ) 
 + . sorted ( PeerSession . COMPARATOR ) 
 . firstPromise ( ) ; 
 } 
 
 + / / 
 + / / Messages 
 + / / 
 + 
 @ Override 
 - public void onAsk ( Object message , PromiseResolver future ) { 
 + public void onAsk ( Object message , PromiseResolver resolver ) { 
 if ( message instanceof PickSessionForEncrypt ) { 
 PickSessionForEncrypt encrypt = ( PickSessionForEncrypt ) message ; 
 - pickSession ( encrypt . getUid ( ) , encrypt . getKeyGroupId ( ) , future ) ; 
 + pickSession ( encrypt . getUid ( ) , encrypt . getKeyGroupId ( ) , resolver ) ; 
 } else if ( message instanceof PickSessionForDecrypt ) { 
 PickSessionForDecrypt decrypt = ( PickSessionForDecrypt ) message ; 
 pickSession ( decrypt . getUid ( ) , decrypt . getKeyGroupId ( ) , decrypt . getOwnPreKey ( ) , decrypt . getTheirPreKey ( ) , 
 - future ) ; 
 + resolver ) ; 
 } else { 
 - super . onAsk ( message , future ) ; 
 + super . onAsk ( message , resolver ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java 
 index a5d949d . . 234c785 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / collections / ManagedList . java 
 @ @ - 2 , 6 + 2 , 8 @ @ package im . actor . runtime . collections ; 
 
 import java . util . ArrayList ; 
 import java . util . Collection ; 
 + import java . util . Collections ; 
 + import java . util . Comparator ; 
 
 import im . actor . runtime . function . Function ; 
 import im . actor . runtime . function . Predicate ; 
 @ @ - 81 , 6 + 83 , 12 @ @ public class ManagedList < T > extends ArrayList < T > { 
 return res ; 
 } 
 
 + public ManagedList < T > sorted ( Comparator < T > comparator ) { 
 + ManagedList < T > res = new ManagedList < > ( this ) ; 
 + Collections . sort ( res , comparator ) ; 
 + return res ; 
 + } 
 + 
 public T first ( ) { 
 return get ( 0 ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java 
 index 0022766 . . 90c5601 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / util / ByteStrings . java 
 @ @ - 108 , 4 + 108 , 24 @ @ public class ByteStrings { 
 } 
 return result = = 0 ; 
 } 
 + 
 + 
 + public static int compare ( byte [ ] a , byte [ ] b ) { 
 + if ( a = = null | | b = = null ) { 
 + throw new IllegalArgumentException ( " Arguments can ' t be null " ) ; 
 + } 
 + if ( a . length > b . length ) { 
 + return 1 ; 
 + } 
 + for ( int i = 0 ; i < a . length ; i + + ) { 
 + int ai = a [ i ] & 0xFF ; 
 + int bi = b [ i ] & 0xFF ; 
 + if ( ai > bi ) { 
 + return 1 ; 
 + } else if ( ai < bi ) { 
 + return - 1 ; 
 + } 
 + } 
 + return 0 ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java 
 new file mode 100644 
 index 0000000 . . bb8078b 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java 
 @ @ - 0 , 0 + 1 , 80 @ @ 
 + package im . actor . core . entity ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . storage . KeyValueItem ; 
 + 
 + public class DialogDesc extends BserObject implements KeyValueItem { 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private String title ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private Avatar avatar ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private boolean isUnread ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private int counter ; 
 + 
 + public DialogDesc ( Peer peer , String title , Avatar avatar , boolean isUnread , int counter ) { 
 + this . peer = peer ; 
 + this . title = title ; 
 + this . avatar = avatar ; 
 + this . isUnread = isUnread ; 
 + this . counter = counter ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public Avatar getAvatar ( ) { 
 + return avatar ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + 
 + public boolean isUnread ( ) { 
 + return isUnread ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; 
 + title = values . getString ( 2 ) ; 
 + byte [ ] av = values . getBytes ( 3 ) ; 
 + if ( av ! = null ) { 
 + avatar = new Avatar ( av ) ; 
 + } 
 + counter = values . getInt ( 4 ) ; 
 + isUnread = values . getBool ( 5 ) ; 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + writer . writeObject ( 1 , peer ) ; 
 + writer . writeString ( 2 , title ) ; 
 + if ( avatar ! = null ) { 
 + writer . writeObject ( 3 , avatar ) ; 
 + } 
 + writer . writeInt ( 4 , counter ) ; 
 + writer . writeBool ( 5 , isUnread ) ; 
 + } 
 + 
 + @ Override 
 + public long getEngineId ( ) { 
 + return peer . getUnuqueId ( ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 85714e6 . . 30e0d85 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import im . actor . core . modules . internal . messages . CursorReaderActor ; 
 import im . actor . core . modules . internal . messages . CursorReceiverActor ; 
 import im . actor . core . modules . internal . messages . DialogsActor ; 
 import im . actor . core . modules . internal . messages . DialogsHistoryActor ; 
 + import im . actor . core . modules . internal . messages . GroupedDialogsActor ; 
 import im . actor . core . modules . internal . messages . MessageDeleteActor ; 
 import im . actor . core . modules . internal . messages . MessageShownActor ; 
 import im . actor . core . modules . internal . messages . MessageShownFilter ; 
 @ @ - 46 , 6 + 47 , 7 @ @ import im . actor . core . network . RpcException ; 
 import im . actor . core . network . RpcInternalException ; 
 import im . actor . core . viewmodel . Command ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 + import im . actor . core . viewmodel . DialogGroupsVM ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 @ @ - 62 , 8 + 64 , 10 @ @ import static im . actor . runtime . actors . ActorSystem . system ; 
 public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 private ListEngine < Dialog > dialogs ; 
 + 
 private ActorRef dialogsActor ; 
 private ActorRef dialogsHistoryActor ; 
 + private ActorRef dialogsGroupedActor ; 
 private ActorRef ownReadActor ; 
 private ActorRef plainReadActor ; 
 private ActorRef plainReceiverActor ; 
 @ @ - 79 , 6 + 83 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 private final SyncKeyValue cursorStorage ; 
 
 + private final DialogGroupsVM dialogGroups = new DialogGroupsVM ( ) ; 
 + 
 public MessagesModule ( final ModuleContext context ) { 
 super ( context ) ; 
 
 @ @ - 99 , 6 + 105 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 return new DialogsHistoryActor ( context ( ) ) ; 
 } 
 } ) , " actor / dialogs / history " ) ; 
 + 
 + this . dialogsGroupedActor = system ( ) . actorOf ( Props . create ( GroupedDialogsActor . class , new ActorCreator < GroupedDialogsActor > ( ) { 
 + @ Override 
 + public GroupedDialogsActor create ( ) { 
 + return new GroupedDialogsActor ( context ( ) ) ; 
 + } 
 + } ) , " actor / dialogs / grouped " ) ; 
 + 
 this . ownReadActor = system ( ) . actorOf ( Props . create ( OwnReadActor . class , new ActorCreator < OwnReadActor > ( ) { 
 @ Override 
 public OwnReadActor create ( ) { 
 @ @ - 139 , 6 + 153 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 context ( ) . getEvents ( ) . subscribe ( this , PeerChatOpened . EVENT ) ; 
 } 
 
 + public DialogGroupsVM getDialogGroupsVM ( ) { 
 + return dialogGroups ; 
 + } 
 + 
 public ActorRef getSendMessageActor ( ) { 
 return sendMessageActor ; 
 } 
 @ @ - 221 , 6 + 239 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 return dialogsHistoryActor ; 
 } 
 
 + public ActorRef getDialogsGroupedActor ( ) { 
 + return dialogsGroupedActor ; 
 + } 
 + 
 public ListEngine < Dialog > getDialogsEngine ( ) { 
 return dialogs ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 index 6641ed9 . . 8bf76dc 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 @ @ - 44 , 6 + 44 , 7 @ @ public class ConversationActor extends ModuleActor { 
 private IndexStorage outPendingIndex ; 
 private IndexStorage inPendingIndex ; 
 private ActorRef dialogsActor ; 
 + private ActorRef dialogsGroupedActor ; 
 private long inReadState ; 
 private long outReadState ; 
 private long outReceiveState ; 
 @ @ - 62 , 6 + 63 , 7 @ @ public class ConversationActor extends ModuleActor { 
 docs = context ( ) . getMessagesModule ( ) . getConversationDocsEngine ( peer ) ; 
 
 dialogsActor = context ( ) . getMessagesModule ( ) . getDialogsActor ( ) ; 
 + dialogsGroupedActor = context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) ; 
 outPendingIndex = Storage . createIndex ( " out _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ; 
 inPendingIndex = Storage . createIndex ( " in _ pending _ " + peer . getPeerType ( ) + " _ " + peer . getPeerId ( ) ) ; 
 
 @ @ - 135 , 6 + 137 , 8 @ @ public class ConversationActor extends ModuleActor { 
 / / Update dialogs 
 if ( topMessage ! = null ) { 
 if ( ! isHiddenPeer ) { 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , 
 + topMessage . getSortDate ( ) ) ) ; 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , topMessage , inPendingIndex . getCount ( ) ) ) ; 
 } 
 } 
 @ @ - 185 , 6 + 189 , 8 @ @ public class ConversationActor extends ModuleActor { 
 
 if ( ! isHiddenPeer ) { 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , message , inPendingIndex . getCount ( ) ) ) ; 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , 
 + message . getSortDate ( ) ) ) ; 
 } 
 } 
 } 
 @ @ - 239 , 6 + 245 , 8 @ @ public class ConversationActor extends ModuleActor { 
 if ( ! isHiddenPeer ) { 
 / / Updating dialog 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , updatedMsg , inPendingIndex . getCount ( ) ) ) ; 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , 
 + updatedMsg . getSortDate ( ) ) ) ; 
 } 
 
 / / Updating pending index 
 @ @ - 361 , 6 + 369 , 7 @ @ public class ConversationActor extends ModuleActor { 
 
 if ( ! isHiddenPeer ) { 
 dialogsActor . send ( new DialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 + / / TODO : Implement for grouped 
 } 
 } 
 
 @ @ - 402 , 6 + 411 , 7 @ @ public class ConversationActor extends ModuleActor { 
 inPendingIndex . clear ( ) ; 
 outPendingIndex . clear ( ) ; 
 dialogsActor . send ( new DialogsActor . ChatDelete ( peer ) ) ; 
 + / / TODO : Implement for grouped 
 } 
 
 / / History 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java 
 index 311de19 . . b77ac37 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / DialogsActor . java 
 @ @ - 50 , 7 + 50 , 7 @ @ public class DialogsActor extends ModuleActor { 
 long start = im . actor . runtime . Runtime . getCurrentTime ( ) ; 
 PeerDesc peerDesc = buildPeerDesc ( peer ) ; 
 if ( peerDesc = = null ) { 
 - Log . d ( " DialogsActor " , " unknown peer desk " ) ; 
 + Log . d ( " DialogsActor " , " unknown peer desc " ) ; 
 return ; 
 } 
 
 @ @ - 75 , 8 + 75 , 11 @ @ public class DialogsActor extends ModuleActor { 
 . setText ( contentDescription . getText ( ) ) 
 . setRelatedUid ( contentDescription . getRelatedUser ( ) ) 
 . setStatus ( message . getMessageState ( ) ) 
 - . setSenderId ( message . getSenderId ( ) ) 
 - . setUnreadCount ( counter ) ; 
 + . setSenderId ( message . getSenderId ( ) ) ; 
 + 
 + if ( counter > = 0 ) { 
 + builder . setUnreadCount ( counter ) ; 
 + } 
 
 boolean forceUpdate = false ; 
 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 new file mode 100644 
 index 0000000 . . f0fdf00 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 @ @ - 0 , 0 + 1 , 184 @ @ 
 + package im . actor . core . modules . internal . messages ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + 
 + import im . actor . core . entity . Avatar ; 
 + import im . actor . core . entity . DialogDesc ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerType ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . utils . ModuleActor ; 
 + import im . actor . core . viewmodel . DialogGroup ; 
 + 
 + public class GroupedDialogsActor extends ModuleActor { 
 + 
 + private PeerGroup groups = new PeerGroup ( " groups " , " Groups " ) ; 
 + private PeerGroup privates = new PeerGroup ( " private " , " Private " ) ; 
 + 
 + public GroupedDialogsActor ( ModuleContext context ) { 
 + super ( context ) ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + } 
 + 
 + private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { 
 + 
 + } 
 + 
 + private void onNewMessage ( Peer peer , long sortDate , int counter ) { 
 + 
 + PeerGroup peerGroup ; 
 + if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + peerGroup = groups ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + peerGroup = privates ; 
 + } else { 
 + return ; 
 + } 
 + 
 + boolean found = false ; 
 + for ( PeerDesc d : peerGroup . getPeers ( ) ) { 
 + if ( d . getPeer ( ) . equals ( peer ) ) { 
 + d . setCounter ( counter ) ; 
 + found = true ; 
 + } 
 + } 
 + 
 + if ( ! found ) { 
 + peerGroup . getPeers ( ) . add ( new PeerDesc ( peer , counter ) ) ; 
 + } 
 + 
 + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; 
 + ArrayList < DialogDesc > groupDescs = new ArrayList < DialogDesc > ( ) ; 
 + for ( PeerDesc d : peerGroup . getPeers ( ) ) { 
 + groupDescs . add ( new DialogDesc ( d . getPeer ( ) , " GRPOUP # " + d . getPeer ( ) . getPeerId ( ) , 
 + null , false , d . counter ) ) ; 
 + } 
 + groups . add ( new DialogGroup ( " Groups " , " group " , groupDescs ) ) ; 
 + 
 + context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof PeerInformationChanged ) { 
 + PeerInformationChanged informationChanged = ( PeerInformationChanged ) message ; 
 + onPeerInfoChanged ( informationChanged . getPeer ( ) , 
 + informationChanged . getTitle ( ) , 
 + informationChanged . getAvatar ( ) ) ; 
 + } else if ( message instanceof NewMessage ) { 
 + NewMessage newMessage = ( NewMessage ) message ; 
 + onNewMessage ( newMessage . peer , newMessage . sortDate , newMessage . counter ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 + public static class PeerInformationChanged { 
 + 
 + private Peer peer ; 
 + private String title ; 
 + private Avatar avatar ; 
 + 
 + public PeerInformationChanged ( Peer peer , String title , Avatar avatar ) { 
 + this . peer = peer ; 
 + this . title = title ; 
 + this . avatar = avatar ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public Avatar getAvatar ( ) { 
 + return avatar ; 
 + } 
 + } 
 + 
 + public static class CounterChanged { 
 + private Peer peer ; 
 + private int counter ; 
 + 
 + public CounterChanged ( Peer peer , int counter ) { 
 + this . peer = peer ; 
 + this . counter = counter ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + } 
 + 
 + public static class NewMessage { 
 + 
 + private Peer peer ; 
 + private int counter ; 
 + private long sortDate ; 
 + 
 + public NewMessage ( Peer peer , int counter , long sortDate ) { 
 + this . peer = peer ; 
 + this . counter = counter ; 
 + this . sortDate = sortDate ; 
 + } 
 + } 
 + 
 + private class PeerGroup { 
 + 
 + private String key ; 
 + private String title ; 
 + private ArrayList < PeerDesc > peers ; 
 + 
 + public PeerGroup ( String key , String title ) { 
 + this . key = key ; 
 + this . title = title ; 
 + this . peers = new ArrayList < PeerDesc > ( ) ; 
 + } 
 + 
 + public String getKey ( ) { 
 + return key ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public ArrayList < PeerDesc > getPeers ( ) { 
 + return peers ; 
 + } 
 + } 
 + 
 + private class PeerDesc { 
 + 
 + private Peer peer ; 
 + private int counter ; 
 + 
 + public PeerDesc ( Peer peer , int counter ) { 
 + this . peer = peer ; 
 + this . counter = counter ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + 
 + public void setCounter ( int counter ) { 
 + this . counter = counter ; 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 new file mode 100644 
 index 0000000 . . ae47f02 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . entity . DialogDesc ; 
 + 
 + public class DialogGroup { 
 + 
 + private String title ; 
 + private String key ; 
 + private ArrayList < DialogDesc > dialogs ; 
 + 
 + public DialogGroup ( String title , String key , ArrayList < DialogDesc > dialogs ) { 
 + this . title = title ; 
 + this . key = key ; 
 + this . dialogs = dialogs ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public String getKey ( ) { 
 + return key ; 
 + } 
 + 
 + public ArrayList < DialogDesc > getDialogs ( ) { 
 + return dialogs ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroupsVM . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroupsVM . java 
 new file mode 100644 
 index 0000000 . . 0a374ba 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroupsVM . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . runtime . mvvm . ValueModel ; 
 + 
 + public class DialogGroupsVM { 
 + 
 + private ValueModel < ArrayList < DialogGroup > > groupsValueModel ; 
 + 
 + public DialogGroupsVM ( ) { 
 + groupsValueModel = new ValueModel < ArrayList < DialogGroup > > ( " groups . model " , null ) ; 
 + } 
 + 
 + public ValueModel < ArrayList < DialogGroup > > getGroupsValueModel ( ) { 
 + return groupsValueModel ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java 
 index 530cb4b . . 31e2f0e 100644 
 - - - a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java 
 + + + b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteKeyValue . java 
 @ @ - 119 , 21 + 119 , 9 @ @ public class SQLiteKeyValue implements KeyValueStorage { 
 } 
 
 @ Override 
 - public void clear ( ) { 
 - checkSqlite ( ) ; 
 - db . beginTransaction ( ) ; 
 - try { 
 - db . execSQL ( " DELETE FROM \ " " + name + " \ " " ) ; 
 - db . setTransactionSuccessful ( ) ; 
 - } finally { 
 - db . endTransaction ( ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public byte [ ] getValue ( long id ) { 
 + public byte [ ] loadItem ( long key ) { 
 checkSqlite ( ) ; 
 - Cursor cursor = db . query ( " \ " " + name + " \ " " , new String [ ] { " \ " BYTES \ " " } , " \ " ID \ " = ? " , new String [ ] { " " + id } , null , null , null ) ; 
 + Cursor cursor = db . query ( " \ " " + name + " \ " " , new String [ ] { " \ " BYTES \ " " } , " \ " ID \ " = ? " , new String [ ] { " " + key } , null , null , null ) ; 
 if ( cursor = = null ) { 
 return null ; 
 } 
 @ @ - 146 , 4 + 134 , 26 @ @ public class SQLiteKeyValue implements KeyValueStorage { 
 } 
 return null ; 
 } 
 + 
 + @ Override 
 + public List < KeyValueRecord > loadItems ( long [ ] keys ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public List < KeyValueRecord > loadAllItems ( ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public void clear ( ) { 
 + checkSqlite ( ) ; 
 + db . beginTransaction ( ) ; 
 + try { 
 + db . execSQL ( " DELETE FROM \ " " + name + " \ " " ) ; 
 + db . setTransactionSuccessful ( ) ; 
 + } finally { 
 + db . endTransaction ( ) ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java 
 index b153387 . . 25b59e1 100644 
 - - - a / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java 
 + + + b / actor - sdk / sdk - core / runtime / android / src / main / java / im / actor / runtime / android / storage / SQLiteList . java 
 @ @ - 124 , 6 + 124 , 11 @ @ public class SQLiteList implements ListStorageDisplayEx { 
 return null ; 
 } 
 
 + @ Override 
 + public List < ListEngineRecord > loadAllItems ( ) { 
 + return null ; 
 + } 
 + 
 
 public ListEngineRecord loadItemBySortKey ( long key ) { 
 checkTable ( ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java 
 index 60239e4 . . c7dd481 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueEngine . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import com . google . j2objc . annotations . ObjectiveCName ; 
 import java . util . List ; 
 
 public interface KeyValueEngine < V extends KeyValueItem > { 
 + 
 @ ObjectiveCName ( " addOrUpdateItem : " ) 
 void addOrUpdateItem ( V item ) ; 
 
 diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift 
 index fb65f46 . . c22c65a 100644 
 - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift 
 + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBKeyValue . swift 
 @ @ - 5 , 18 + 5 , 21 @ @ 
 import Foundation 
 
 @ objc class FMDBKeyValue : NSObject , ARKeyValueStorage { 
 - var db : FMDatabase ? ; 
 + 
 + var db : FMDatabase ! 
 
 - let databasePath : String ; 
 - let tableName : String ; 
 + let databasePath : String 
 + let tableName : String 
 
 - let queryCreate : String ; 
 - let queryItem : String ; 
 - let queryAdd : String ; 
 - let queryDelete : String ; 
 - let queryDeleteAll : String ; 
 + let queryCreate : String 
 + let queryItem : String 
 + let queryItems : String 
 + let queryAll : String 
 + let queryAdd : String 
 + let queryDelete : String 
 + let queryDeleteAll : String 
 
 - var isTableChecked : Bool = false ; 
 + var isTableChecked : Bool = false 
 
 init ( databasePath : String , tableName : String ) { 
 self . databasePath = databasePath 
 @ @ - 26 , 11 + 29 , 13 @ @ import Foundation 
 self . queryCreate = " CREATE TABLE IF NOT EXISTS " + tableName + " ( " + 
 " \ " ID \ " INTEGER NOT NULL , " + 
 " \ " BYTES \ " BLOB NOT NULL , " + 
 - " PRIMARY KEY ( \ " ID \ " ) ) ; " ; 
 - self . queryItem = " SELECT \ " BYTES \ " FROM " + tableName + " WHERE \ " ID \ " = ? ; " ; 
 - self . queryAdd = " REPLACE INTO " + tableName + " ( \ " ID \ " , \ " BYTES \ " ) VALUES ( ? , ? ) ; " ; 
 - self . queryDelete = " DELETE FROM " + tableName + " WHERE \ " ID \ " = ? ; " ; 
 - self . queryDeleteAll = " DELETE FROM " + tableName + " ; " ; 
 + " PRIMARY KEY ( \ " ID \ " ) ) ; " 
 + self . queryItem = " SELECT \ " BYTES \ " FROM " + tableName + " WHERE \ " ID \ " = ? ; " 
 + self . queryItems = " SELECT ( \ " ID \ " , \ " BYTES \ " ) FROM " + tableName + " WHERE \ " ID \ " in ? ; " 
 + self . queryAll = " SELECT ( \ " ID \ " , \ " BYTES \ " ) FROM " + tableName + " ; " 
 + self . queryAdd = " REPLACE INTO " + tableName + " ( \ " ID \ " , \ " BYTES \ " ) VALUES ( ? , ? ) ; " 
 + self . queryDelete = " DELETE FROM " + tableName + " WHERE \ " ID \ " = ? ; " 
 + self . queryDeleteAll = " DELETE FROM " + tableName + " ; " 
 
 super . init ( ) 
 } 
 @ @ - 39 , 68 + 44 , 103 @ @ import Foundation 
 if ( isTableChecked ) { 
 return 
 } 
 - isTableChecked = true ; 
 + isTableChecked = true 
 
 self . db = FMDatabase ( path : databasePath ) 
 - self . db ! . open ( ) 
 - if ( ! db ! . tableExists ( tableName ) ) { 
 - db ! . executeUpdate ( queryCreate ) 
 + self . db . open ( ) 
 + if ( ! db . tableExists ( tableName ) ) { 
 + db . executeUpdate ( queryCreate ) 
 } 
 } 
 
 func addOrUpdateItems ( values : JavaUtilList ! ) { 
 - checkTable ( ) ; 
 + checkTable ( ) 
 
 - db ! . beginTransaction ( ) 
 + db . beginTransaction ( ) 
 for i in 0 . . < values . size ( ) { 
 - let record = values . getWithInt ( i ) as ! ARKeyValueRecord ; 
 - db ! . executeUpdate ( queryAdd , record . getId ( ) . toNSNumber ( ) , record . getData ( ) ! . toNSData ( ) ) 
 + let record = values . getWithInt ( i ) as ! ARKeyValueRecord 
 + db . executeUpdate ( queryAdd , record . getId ( ) . toNSNumber ( ) , record . getData ( ) ! . toNSData ( ) ) 
 } 
 - db ! . commit ( ) 
 + db . commit ( ) 
 } 
 
 func addOrUpdateItemWithKey ( key : jlong , withData data : IOSByteArray ! ) { 
 - checkTable ( ) ; 
 + checkTable ( ) 
 
 - db ! . beginTransaction ( ) 
 - db ! . executeUpdate ( queryAdd , key . toNSNumber ( ) , data ! . toNSData ( ) ) 
 - db ! . commit ( ) 
 + db . beginTransaction ( ) 
 + db . executeUpdate ( queryAdd , key . toNSNumber ( ) , data ! . toNSData ( ) ) 
 + db . commit ( ) 
 } 
 
 func removeItemsWithKeys ( keys : IOSLongArray ! ) { 
 - checkTable ( ) ; 
 + checkTable ( ) 
 
 - db ! . beginTransaction ( ) 
 + db . beginTransaction ( ) 
 for i in 0 . . < keys . length ( ) { 
 let key = keys . longAtIndex ( UInt ( i ) ) ; 
 - db ! . executeUpdate ( queryDelete , key . toNSNumber ( ) ) 
 + db . executeUpdate ( queryDelete , key . toNSNumber ( ) ) 
 } 
 - db ! . commit ( ) 
 + db . commit ( ) 
 } 
 
 func removeItemWithKey ( key : jlong ) { 
 - checkTable ( ) ; 
 + checkTable ( ) 
 
 - db ! . beginTransaction ( ) 
 - db ! . executeUpdate ( queryDelete , key . toNSNumber ( ) ) 
 - db ! . commit ( ) 
 + db . beginTransaction ( ) 
 + db . executeUpdate ( queryDelete , key . toNSNumber ( ) ) 
 + db . commit ( ) 
 } 
 
 - func getValueWithKey ( key : jlong ) - > IOSByteArray ! { 
 - checkTable ( ) ; 
 + func loadItemWithKey ( key : jlong ) - > IOSByteArray ! { 
 + checkTable ( ) 
 
 - let result = db ! . dataForQuery ( queryItem , key . toNSNumber ( ) ) ; 
 + let result = db . dataForQuery ( queryItem , key . toNSNumber ( ) ) 
 if ( result = = nil ) { 
 - return nil ; 
 + return nil 
 + } 
 + return result . toJavaBytes ( ) 
 + } 
 + 
 + func loadAllItems ( ) - > JavaUtilList ! { 
 + checkTable ( ) 
 + 
 + let res = JavaUtilArrayList ( ) 
 + 
 + if let result = db . executeQuery ( queryAll ) { 
 + while ( result . next ( ) ) { 
 + res . addWithId ( ARKeyValueRecord ( key : jlong ( result . longLongIntForColumn ( " ID " ) ) , withData : result . dataForColumn ( " BYTES " ) . toJavaBytes ( ) ) ) 
 + } 
 + } 
 + 
 + return res 
 + } 
 + 
 + func loadItems ( keys : IOSLongArray ! ) - > JavaUtilList ! { 
 + checkTable ( ) 
 + 
 + / / Converting to NSNumbers 
 + var ids = [ NSNumber ] ( ) 
 + for i in 0 . . < keys . length ( ) { 
 + ids . append ( keys . longAtIndex ( UInt ( i ) ) . toNSNumber ( ) ) 
 } 
 - return result . toJavaBytes ( ) ; 
 + 
 + let res = JavaUtilArrayList ( ) 
 + 
 + if let result = db . executeQuery ( queryItems , ids ) { 
 + while ( result . next ( ) ) { 
 + / / TODO : Optimize lookup 
 + res . addWithId ( ARKeyValueRecord ( key : jlong ( result . longLongIntForColumn ( " ID " ) ) , withData : result . dataForColumn ( " BYTES " ) . toJavaBytes ( ) ) ) 
 + } 
 + } 
 + 
 + return res 
 } 
 
 func clear ( ) { 
 - checkTable ( ) ; 
 + checkTable ( ) 
 
 - db ! . beginTransaction ( ) 
 - db ! . executeUpdate ( queryDeleteAll ) ; 
 - db ! . commit ( ) 
 + db . beginTransaction ( ) 
 + db . executeUpdate ( queryDeleteAll ) 
 + db . commit ( ) 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift 
 index 27ac7e7 . . 209a6e3 100644 
 - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift 
 + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / ActorCore / Providers / Storage / FMDBList . swift 
 @ @ - 199 , 6 + 199 , 12 @ @ class FMDBList : NSObject , ARListStorageDisplayEx { 
 } 
 } 
 
 + func loadAllItems ( ) - > JavaUtilList ! { 
 + let res = JavaUtilArrayList ( ) 
 + / / TODO : Implement 
 + return res 
 + } 
 + 
 func loadForwardWithSortKey ( sortingKey : JavaLangLong ! , withLimit limit : jint ) - > JavaUtilList ! { 
 checkTable ( ) ; 
 var result : FMResultSet ? = nil ;
