BLEU SCORE: 0.09519340818348475

TEST MSG: fix ( iOS ) : Fixing compilation error
GENERATED MSG: feat ( js ) : Implementing overlays support in JsDisplayList

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java b / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java < nl > index 7bed8c1 . . 3d71ea1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java < nl > @ @ - 52 , 19 + 52 , 6 @ @ public class CocoaMessenger extends Messenger { < nl > public BindedDisplayList < Message > getMessageDisplayList ( final Peer peer ) { < nl > if ( ! messagesLists . containsKey ( peer ) ) { < nl > BindedDisplayList < Message > list = ( BindedDisplayList < Message > ) modules . getDisplayListsModule ( ) . getMessagesSharedList ( peer ) ; < nl > - list . setBindHook ( new BindedDisplayList . BindHook < Message > ( ) { < nl > - @ Override < nl > - public void onScrolledToEnd ( ) { < nl > - modules . getMessagesModule ( ) . loadMoreHistory ( peer ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onItemTouched ( Message item ) { < nl > - if ( item . isOnServer ( ) ) { < nl > - modules . getMessagesModule ( ) . onMessageShown ( peer , item . getSenderId ( ) , item . getSortDate ( ) ) ; < nl > - } < nl > - } < nl > - } ) ; < nl > messagesLists . put ( peer , list ) ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java < nl > index fb45819 . . fe96406 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java < nl > @ @ - 4 , 6 + 4 , 9 @ @ < nl > < nl > package im . actor . core . network . mtp . actors ; < nl > < nl > + import com . google . j2objc . annotations . AutoreleasePool ; < nl > + import com . google . j2objc . annotations . RetainedLocalRef ; < nl > + < nl > import java . io . IOException ; < nl > < nl > import im . actor . core . network . ActorApi ; < nl > @ @ - 310 , 6 + 313 , 7 @ @ public class ManagerActor extends Actor { < nl > mtProto . getCallback ( ) . onConnectionsCountChanged ( currentConnection ! = null ? 1 : 0 ) ; < nl > } < nl > < nl > + @ AutoreleasePool < nl > private void onInMessage ( byte [ ] data , int offset , int len ) { < nl > / / Log . d ( TAG , " Received package " ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / AutoreleasePool . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / AutoreleasePool . java < nl > new file mode 100644 < nl > index 0000000 . . f1584f6 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / AutoreleasePool . java < nl > @ @ - 0 , 0 + 1 , 33 @ @ < nl > + / * < nl > + * Copyright 2012 Google Inc . All Rights Reserved . < nl > + * < nl > + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; < nl > + * you may not use this file except in compliance with the License . < nl > + * You may obtain a copy of the License at < nl > + * < nl > + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 < nl > + * < nl > + * Unless required by applicable law or agreed to in writing , software < nl > + * distributed under the License is distributed on an " AS IS " BASIS , < nl > + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . < nl > + * See the License for the specific language governing permissions and < nl > + * limitations under the License . < nl > + * / < nl > + < nl > + package com . google . j2objc . annotations ; < nl > + < nl > + import java . lang . annotation . ElementType ; < nl > + import java . lang . annotation . Retention ; < nl > + import java . lang . annotation . RetentionPolicy ; < nl > + import java . lang . annotation . Target ; < nl > + < nl > + / * * < nl > + * Annotation that indicates the translator should inject an autorelease pool < nl > + * around the method body . Only valid on methods that don ' t return anything . < nl > + * < nl > + * @ author Pankaj Kakkar < nl > + * / < nl > + @ Target ( { ElementType . METHOD , ElementType . LOCAL _ VARIABLE } ) < nl > + @ Retention ( RetentionPolicy . SOURCE ) < nl > + public @ interface AutoreleasePool { < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / RetainedLocalRef . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / RetainedLocalRef . java < nl > new file mode 100644 < nl > index 0000000 . . 8d7e5d8 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / RetainedLocalRef . java < nl > @ @ - 0 , 0 + 1 , 42 @ @ < nl > + / * < nl > + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; < nl > + * you may not use this file except in compliance with the License . < nl > + * You may obtain a copy of the License at < nl > + * < nl > + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 < nl > + * < nl > + * Unless required by applicable law or agreed to in writing , software < nl > + * distributed under the License is distributed on an " AS IS " BASIS , < nl > + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . < nl > + * See the License for the specific language governing permissions and < nl > + * limitations under the License . < nl > + * / < nl > + < nl > + package com . google . j2objc . annotations ; < nl > + < nl > + import java . lang . annotation . Retention ; < nl > + import java . lang . annotation . Target ; < nl > + < nl > + import static java . lang . annotation . ElementType . * ; < nl > + import static java . lang . annotation . RetentionPolicy . * ; < nl > + < nl > + / * * < nl > + * Annotation that indicates a local variable should be retained outside of any < nl > + * subsequent AutoreleasePool use . Otherwise , if a local variable has a copy < nl > + * of an object in a container that is removed in an AutoreleasePool , it will < nl > + * be deallocated before the local variable goes out of scope . < nl > + * < p > < nl > + * For example , a ThreadPoolExecutor is used to process a list of tasks , < nl > + * removing each task from the list as it is processed . ThreadPoolExecutor < nl > + * tasks are run inside of an AutoreleasePool , since these executors are often < nl > + * long - lived . If a local variable is initialized to one of the task list ' s < nl > + * elements , by default that variable won ' t be valid ( will be deallocated ) < nl > + * after task processing . Adding a LocalRetain annotation to the local < nl > + * variable ensures it is still valid after task processing . < nl > + * < nl > + * @ author Tom Ball < nl > + * / < nl > + @ Target ( LOCAL _ VARIABLE ) < nl > + @ Retention ( SOURCE ) < nl > + public @ interface RetainedLocalRef { < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / Weak . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / Weak . java < nl > new file mode 100644 < nl > index 0000000 . . 1924d74 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / Weak . java < nl > @ @ - 0 , 0 + 1 , 33 @ @ < nl > + / * < nl > + * Copyright 2012 Google Inc . All Rights Reserved . < nl > + * < nl > + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; < nl > + * you may not use this file except in compliance with the License . < nl > + * You may obtain a copy of the License at < nl > + * < nl > + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 < nl > + * < nl > + * Unless required by applicable law or agreed to in writing , software < nl > + * distributed under the License is distributed on an " AS IS " BASIS , < nl > + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . < nl > + * See the License for the specific language governing permissions and < nl > + * limitations under the License . < nl > + * / < nl > + < nl > + package com . google . j2objc . annotations ; < nl > + < nl > + import java . lang . annotation . Retention ; < nl > + import java . lang . annotation . Target ; < nl > + < nl > + import static java . lang . annotation . ElementType . * ; < nl > + import static java . lang . annotation . RetentionPolicy . * ; < nl > + < nl > + / * * < nl > + * Annotation that indicates a variable has a weak relationship to its owner . < nl > + * < nl > + * @ author Tom Ball < nl > + * / < nl > + @ Target ( { FIELD , LOCAL _ VARIABLE , PARAMETER } ) < nl > + @ Retention ( CLASS ) < nl > + public @ interface Weak { < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > index 0772a28 . . 8cbd4ae 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java < nl > @ @ - 1 , 5 + 1 , 7 @ @ < nl > package im . actor . runtime . crypto . primitives . kuznechik ; < nl > < nl > + import com . google . j2objc . annotations . Weak ; < nl > + < nl > import im . actor . runtime . crypto . primitives . BlockCipher ; < nl > import im . actor . runtime . crypto . primitives . util . Pack ; < nl > < nl > @ @ - 322 , 19 + 324 , 19 @ @ public class KuznechikFastEngine implements BlockCipher { < nl > } < nl > < nl > < nl > - static void kuz _ l ( int [ ] w , byte [ ] tmp ) { < nl > + static void kuz _ l ( @ Weak int [ ] w , @ Weak byte [ ] tmp ) { < nl > Pack . intToBigEndian ( w , tmp , 0 ) ; < nl > kuz _ l ( tmp ) ; < nl > Pack . bigEndianToInt ( tmp , 0 , w ) ; < nl > } < nl > < nl > - static void kuz _ l _ inv ( int [ ] w , byte [ ] tmp ) { < nl > + static void kuz _ l _ inv ( @ Weak int [ ] w , @ Weak byte [ ] tmp ) { < nl > Pack . intToBigEndian ( w , tmp , 0 ) ; < nl > kuz _ l _ inv ( tmp ) ; < nl > Pack . bigEndianToInt ( tmp , 0 , w ) ; < nl > } < nl > < nl > - static void kuz _ l ( byte [ ] w ) { < nl > + static void kuz _ l ( @ Weak byte [ ] w ) { < nl > for ( int j = 0 ; j < 16 ; j + + ) { < nl > byte x = w [ 15 ] ; < nl > w [ 15 ] = w [ 14 ] ; < nl > @ @ - 372 , 26 + 374 , 77 @ @ public class KuznechikFastEngine implements BlockCipher { < nl > } < nl > < nl > / / inverse of linear operation l < nl > - static void kuz _ l _ inv ( byte [ ] w ) { < nl > + static void kuz _ l _ inv ( @ Weak byte [ ] w ) { < nl > + < nl > + byte t0 = w [ 0 ] , k0 = kuz _ lvec [ 0 ] ; < nl > + byte t1 = w [ 1 ] , k1 = kuz _ lvec [ 1 ] ; < nl > + byte t2 = w [ 2 ] , k2 = kuz _ lvec [ 2 ] ; < nl > + byte t3 = w [ 3 ] , k3 = kuz _ lvec [ 3 ] ; < nl > + byte t4 = w [ 4 ] , k4 = kuz _ lvec [ 4 ] ; < nl > + byte t5 = w [ 5 ] , k5 = kuz _ lvec [ 5 ] ; < nl > + byte t6 = w [ 6 ] , k6 = kuz _ lvec [ 6 ] ; < nl > + byte t7 = w [ 7 ] , k7 = kuz _ lvec [ 7 ] ; < nl > + byte t8 = w [ 8 ] , k8 = kuz _ lvec [ 8 ] ; < nl > + byte t9 = w [ 9 ] , k9 = kuz _ lvec [ 9 ] ; < nl > + byte t10 = w [ 10 ] , k10 = kuz _ lvec [ 10 ] ; < nl > + byte t11 = w [ 11 ] , k11 = kuz _ lvec [ 11 ] ; < nl > + byte t12 = w [ 12 ] , k12 = kuz _ lvec [ 12 ] ; < nl > + byte t13 = w [ 13 ] , k13 = kuz _ lvec [ 13 ] ; < nl > + byte t14 = w [ 14 ] , k14 = kuz _ lvec [ 14 ] ; < nl > + byte t15 = w [ 15 ] ; < nl > < nl > / / 16 rounds < nl > for ( int j = 0 ; j < 16 ; j + + ) { < nl > - < nl > - / / x = w - > b [ 0 ] ; < nl > - byte x = w [ 0 ] ; < nl > - < nl > - for ( int i = 0 ; i < 15 ; i + + ) { < nl > - < nl > - / / w - > b [ i ] = w - > b [ i + 1 ] ; < nl > - w [ i ] = w [ i + 1 ] ; < nl > - < nl > - / / x ^ = kuz _ mul _ gf256 ( w - > b [ i ] , kuz _ lvec [ i ] ) ; < nl > - x ^ = kuz _ mul _ gf256 _ fast ( w [ i ] , kuz _ lvec [ i ] ) ; < nl > - } < nl > - < nl > - / / w - > b [ 15 ] = x ; < nl > - w [ 15 ] = x ; < nl > + byte x = t0 ; < nl > + t0 = t1 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t0 , k0 ) ; < nl > + t1 = t2 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t1 , k1 ) ; < nl > + t2 = t3 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t2 , k2 ) ; < nl > + t3 = t4 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t3 , k3 ) ; < nl > + t4 = t5 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t4 , k4 ) ; < nl > + t5 = t6 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t5 , k5 ) ; < nl > + t6 = t7 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t6 , k6 ) ; < nl > + t7 = t8 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t7 , k7 ) ; < nl > + t8 = t9 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t8 , k8 ) ; < nl > + t9 = t10 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t9 , k9 ) ; < nl > + t10 = t11 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t10 , k10 ) ; < nl > + t11 = t12 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t11 , k11 ) ; < nl > + t12 = t13 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t12 , k12 ) ; < nl > + t13 = t14 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t13 , k13 ) ; < nl > + t14 = t15 ; < nl > + x ^ = kuz _ mul _ gf256 _ fast ( t14 , k14 ) ; < nl > + t15 = x ; < nl > } < nl > + < nl > + w [ 0 ] = t0 ; < nl > + w [ 1 ] = t1 ; < nl > + w [ 2 ] = t2 ; < nl > + w [ 3 ] = t3 ; < nl > + w [ 4 ] = t4 ; < nl > + w [ 5 ] = t5 ; < nl > + w [ 6 ] = t6 ; < nl > + w [ 7 ] = t7 ; < nl > + w [ 8 ] = t8 ; < nl > + w [ 9 ] = t9 ; < nl > + w [ 10 ] = t10 ; < nl > + w [ 11 ] = t11 ; < nl > + w [ 12 ] = t12 ; < nl > + w [ 13 ] = t13 ; < nl > + w [ 14 ] = t14 ; < nl > + w [ 15 ] = t15 ; < nl > } < nl > < nl > / / Fast implementation of multiplication in GF ( 2 ^ 8 ) on x ^ 8 + x ^ 7 + x ^ 6 + x + 1
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java < nl > index 6e0e2dc . . d0a81c3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . runtime . js . mvvm . JsEntityConverter ; < nl > public class JsContact extends JavaScriptObject { < nl > < nl > public static JsEntityConverter < Contact , JsContact > CONVERTER = new JsEntityConverter < Contact , JsContact > ( ) { < nl > + < nl > @ Override < nl > public JsContact convert ( Contact value ) { < nl > < nl > @ @ - 26 , 6 + 27 , 16 @ @ public class JsContact extends JavaScriptObject { < nl > return create ( value . getUid ( ) , value . getName ( ) , < nl > Placeholders . getPlaceholder ( value . getUid ( ) ) , fileUrl ) ; < nl > } < nl > + < nl > + @ Override < nl > + public boolean isSupportOverlays ( ) { < nl > + return false ; < nl > + } < nl > + < nl > + @ Override < nl > + public JavaScriptObject buildOverlay ( Contact prev , Contact current , Contact next ) { < nl > + return null ; < nl > + } < nl > } ; < nl > < nl > public static native JsContact create ( int uid , String name , String placeholder , String avatar ) / * - { < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java < nl > index 955b3fb . . 6d17c3c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java < nl > @ @ - 15 , 6 + 15 , 7 @ @ import im . actor . runtime . js . mvvm . JsEntityConverter ; < nl > public class JsDialog extends JavaScriptObject { < nl > < nl > public static final JsEntityConverter < Dialog , JsDialog > CONVERTER = new JsEntityConverter < Dialog , JsDialog > ( ) { < nl > + < nl > @ Override < nl > public JsDialog convert ( Dialog src ) { < nl > < nl > @ @ - 55 , 6 + 56 , 16 @ @ public class JsDialog extends JavaScriptObject { < nl > Enums . convert ( src . getStatus ( ) ) , < nl > src . getUnreadCount ( ) ) ; < nl > } < nl > + < nl > + @ Override < nl > + public boolean isSupportOverlays ( ) { < nl > + return false ; < nl > + } < nl > + < nl > + @ Override < nl > + public JavaScriptObject buildOverlay ( Dialog prev , Dialog current , Dialog next ) { < nl > + return null ; < nl > + } < nl > } ; < nl > < nl > public static native JsDialog create ( JsPeerInfo peer , < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java < nl > index 81bc399 . . 44a5ab0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java < nl > @ @ - 9 , 6 + 9 , 9 @ @ import com . google . gwt . core . client . JsArray ; < nl > import com . google . gwt . core . client . JsArrayInteger ; < nl > import com . google . gwt . core . client . JsArrayString ; < nl > import com . google . gwt . core . client . JsDate ; < nl > + import com . google . gwt . user . datepicker . client . CalendarUtil ; < nl > + < nl > + import java . util . Date ; < nl > < nl > import im . actor . core . api . ApiTextExMarkdown ; < nl > import im . actor . core . entity . Message ; < nl > @ @ - 31 , 6 + 34 , 39 @ @ public class JsMessage extends JavaScriptObject { < nl > < nl > public static final JsEntityConverter < Message , JsMessage > CONVERTER = new JsEntityConverter < Message , JsMessage > ( ) { < nl > @ Override < nl > + public boolean isSupportOverlays ( ) { < nl > + return true ; < nl > + } < nl > + < nl > + @ Override < nl > + public JavaScriptObject buildOverlay ( Message prev , Message current , Message next ) { < nl > + Date prevDate = prev ! = null ? new Date ( prev . getDate ( ) ) : null ; < nl > + Date currentDate = new Date ( current . getDate ( ) ) ; < nl > + < nl > + boolean showDate ; < nl > + String dateDiv = null ; < nl > + if ( prev ! = null ) { < nl > + showDate = ! CalendarUtil . isSameDate ( prevDate , currentDate ) ; < nl > + } else { < nl > + showDate = true ; < nl > + } < nl > + if ( showDate ) { < nl > + dateDiv = JsMessenger . getInstance ( ) . getFormatter ( ) . formatMonth ( currentDate ) ; < nl > + } < nl > + < nl > + boolean useCompact = false ; < nl > + if ( prev ! = null & & ! showDate ) { < nl > + if ( prev . getSenderId ( ) = = current . getSenderId ( ) ) { < nl > + if ( prev . getDate ( ) - current . getDate ( ) < 10 * 60 * 1000 ) { < nl > + useCompact = true ; < nl > + } < nl > + } < nl > + } < nl > + < nl > + return JsMessageOverlay . create ( useCompact , dateDiv ) ; < nl > + } < nl > + < nl > + @ Override < nl > public JsMessage convert ( Message value ) { < nl > JsMessenger messenger = JsMessenger . getInstance ( ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessageOverlay . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessageOverlay . java < nl > new file mode 100644 < nl > index 0000000 . . 50384e4 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessageOverlay . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsMessageOverlay extends JavaScriptObject { < nl > + < nl > + public static native JsMessageOverlay create ( boolean useShort , String dateDivider ) / * - { < nl > + return { useShort : useShort , dateDivider : dateDivider } ; < nl > + } - * / ; < nl > + < nl > + protected JsMessageOverlay ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > index 43efc3a . . 594bb74 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java < nl > @ @ - 149 , 6 + 149 , 13 @ @ public class I18nEngine { < nl > } < nl > } < nl > < nl > + @ ObjectiveCName ( " formatMonth : " ) < nl > + public String formatMonth ( Date date ) { < nl > + int month = date . getMonth ( ) ; < nl > + int d = date . getDate ( ) ; < nl > + return d + " " + MONTHS [ month ] . toUpperCase ( ) ; < nl > + } < nl > + < nl > @ ObjectiveCName ( " formatTyping " ) < nl > public String formatTyping ( ) { < nl > return locale . get ( " Typing " ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java < nl > index fb14eb8 . . 746ec5a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java < nl > @ @ - 125 , 7 + 125 , 7 @ @ public class SequenceActor extends ModuleActor { < nl > pendingRunnables . add ( after ) ; < nl > } < nl > return ; < nl > - } else if ( u instanceof PushSeq ) { < nl > + } else if ( u instanceof PushSeq ) { < nl > PushSeq pushSeq = ( PushSeq ) u ; < nl > if ( pushSeq . seq < = this . seq ) { < nl > Log . d ( TAG , " Ignored PushSeq { seq : " + pushSeq . seq + " } " ) ; < nl > @ @ - 290 , 6 + 290 , 14 @ @ public class SequenceActor extends ModuleActor { < nl > } < nl > Log . d ( TAG , " Difference parsed in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - parseStart ) + " ms " ) ; < nl > < nl > + if ( updates . size ( ) > 0 ) { < nl > + String command = " Difference updates : " ; < nl > + for ( Update u : updates ) { < nl > + command + = " \ n | " + u ; < nl > + } < nl > + Log . d ( TAG , command ) ; < nl > + } < nl > + < nl > long applyStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; < nl > processor . applyDifferenceUpdate ( response . getUsers ( ) , response . getGroups ( ) , updates ) ; < nl > Log . d ( TAG , " Difference applied in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - applyStart ) + " ms " ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java < nl > index 14e0386 . . 1b5c03d 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java < nl > @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . runtime . Log ; < nl > import im . actor . runtime . bser . BserObject ; < nl > import im . actor . runtime . js . storage . JsListEngine ; < nl > import im . actor . runtime . js . storage . JsListEngineCallback ; < nl > + import im . actor . runtime . js . utils . JsModernArray ; < nl > import im . actor . runtime . mvvm . PlatformDisplayList ; < nl > import im . actor . runtime . storage . ListEngineItem ; < nl > < nl > @ @ - 27 , 16 + 28 , 29 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li < nl > private ArrayList < JsDisplayListCallback < T > > callbacksInverted = new ArrayList < JsDisplayListCallback < T > > ( ) ; < nl > < nl > private ArrayList < V > values ; < nl > - private JsArray < T > jsValues ; < nl > + private ArrayList < Boolean > isOverlayDirty ; < nl > + private JsModernArray < T > jsValues ; < nl > + private JsModernArray < JavaScriptObject > jsOverlays ; < nl > private boolean isForceReconverted = false ; < nl > + private final boolean isOverlaysSupported ; < nl > < nl > public JsDisplayList ( JsListEngine < V > listEngine , JsEntityConverter < V , T > entityConverter ) { < nl > this . listEngine = listEngine ; < nl > this . entityConverter = entityConverter ; < nl > + this . isOverlaysSupported = entityConverter . isSupportOverlays ( ) ; < nl > < nl > this . values = new ArrayList < V > ( ) ; < nl > this . jsValues = JavaScriptObject . createArray ( ) . cast ( ) ; < nl > < nl > + if ( isOverlaysSupported ) { < nl > + this . isOverlayDirty = new ArrayList < Boolean > ( ) ; < nl > + this . jsOverlays = JavaScriptObject . createArray ( ) . cast ( ) ; < nl > + } < nl > + < nl > + / / < nl > + / / Building initial list < nl > + / / < nl > + < nl > long [ ] rids = listEngine . getOrderedIds ( ) ; < nl > for ( long rid : rids ) { < nl > V item = listEngine . getValue ( rid ) ; < nl > @ @ - 46 , 59 + 60 , 43 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li < nl > } < nl > values . add ( item ) ; < nl > jsValues . push ( entityConverter . convert ( item ) ) ; < nl > - } < nl > - listEngine . addListener ( this ) ; < nl > - } < nl > < nl > - public void subscribe ( JsDisplayListCallback < T > callback ) { < nl > - if ( ! callbacks . contains ( callback ) ) { < nl > - callbacks . add ( callback ) ; < nl > + if ( isOverlaysSupported ) { < nl > + jsOverlays . push ( null ) ; < nl > + isOverlayDirty . add ( true ) ; < nl > + } < nl > } < nl > < nl > - / / new JsArray < T > ( jsValues ) < nl > - < nl > - callback . onCollectionChanged ( jsValues ) ; < nl > - } < nl > - < nl > - public void unsubscribe ( JsDisplayListCallback < T > callback ) { < nl > - callbacks . remove ( callback ) ; < nl > - } < nl > - < nl > - public void subscribeInverted ( JsDisplayListCallback < T > callback ) { < nl > - if ( ! callbacksInverted . contains ( callback ) ) { < nl > - callbacksInverted . add ( callback ) ; < nl > - } < nl > + / / < nl > + / / Processing dirty overlays < nl > + / / < nl > + processDirtyOverlays ( ) ; < nl > < nl > - callback . onCollectionChanged ( reverse ( jsValues ) ) ; < nl > - } < nl > + / / < nl > + / / Subscribing to updates < nl > + / / < nl > < nl > - public void unsubscribeInverted ( JsDisplayListCallback < T > callback ) { < nl > - callbacksInverted . remove ( callback ) ; < nl > + listEngine . addListener ( this ) ; < nl > } < nl > < nl > - public void startReconverting ( ) { < nl > - isForceReconverted = false ; < nl > + public ArrayList < V > getRawItems ( ) { < nl > + return values ; < nl > } < nl > < nl > - public void forceReconvert ( long id ) { < nl > - for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > - if ( values . get ( i ) . getEngineId ( ) = = id ) { < nl > - remove ( jsValues , i ) ; < nl > - insert ( jsValues , i , entityConverter . convert ( values . get ( i ) ) ) ; < nl > - isForceReconverted = true ; < nl > - } < nl > - } < nl > + @ Override < nl > + public void onItemAddedOrUpdated ( V item ) { < nl > + addItemOrUpdateImpl ( item ) ; < nl > + processDirtyOverlays ( ) ; < nl > + notifySubscribers ( ) ; < nl > } < nl > < nl > - public void stopReconverting ( ) { < nl > - if ( isForceReconverted ) { < nl > - isForceReconverted = false ; < nl > - notifySubscribers ( ) ; < nl > + @ Override < nl > + public void onItemsAddedOrUpdated ( List < V > items ) { < nl > + for ( V item : items ) { < nl > + addItemOrUpdateImpl ( item ) ; < nl > } < nl > - } < nl > - < nl > - public ArrayList < V > getRawItems ( ) { < nl > - return values ; < nl > + processDirtyOverlays ( ) ; < nl > + notifySubscribers ( ) ; < nl > } < nl > < nl > private void addItemOrUpdateImpl ( V item ) { < nl > @ @ - 107 , 7 + 105 , 11 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li < nl > for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > if ( values . get ( i ) . getEngineId ( ) = = id ) { < nl > values . remove ( i ) ; < nl > - remove ( jsValues , i ) ; < nl > + jsValues . remove ( i ) ; < nl > + if ( isOverlaysSupported ) { < nl > + markAsDirty ( i ) ; < nl > + jsOverlays . remove ( i ) ; < nl > + } < nl > break ; < nl > } < nl > } < nl > @ @ - 115 , 42 + 117 , 27 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li < nl > for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > if ( sortKey > values . get ( i ) . getEngineSort ( ) ) { < nl > values . add ( i , item ) ; < nl > - insert ( jsValues , i , entityConverter . convert ( item ) ) ; < nl > + jsValues . insert ( i , entityConverter . convert ( item ) ) ; < nl > + if ( isOverlaysSupported ) { < nl > + jsOverlays . insert ( i , null ) ; < nl > + markAsDirty ( i ) ; < nl > + } < nl > return ; < nl > } < nl > } < nl > < nl > values . add ( item ) ; < nl > jsValues . push ( entityConverter . convert ( item ) ) ; < nl > - } < nl > - < nl > - private void remoteItemImpl ( long id ) { < nl > - for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > - if ( values . get ( i ) . getEngineId ( ) = = id ) { < nl > - values . remove ( i ) ; < nl > - remove ( jsValues , i ) ; < nl > - break ; < nl > - } < nl > + if ( isOverlaysSupported ) { < nl > + jsOverlays . push ( null ) ; < nl > + markAsDirty ( values . size ( ) - 1 ) ; < nl > } < nl > } < nl > < nl > @ Override < nl > - public void onItemAddedOrUpdated ( V item ) { < nl > - addItemOrUpdateImpl ( item ) ; < nl > - notifySubscribers ( ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onItemsAddedOrUpdated ( List < V > items ) { < nl > - for ( V item : items ) { < nl > - addItemOrUpdateImpl ( item ) ; < nl > - } < nl > - notifySubscribers ( ) ; < nl > - } < nl > - < nl > - @ Override < nl > public void onItemRemoved ( long id ) { < nl > remoteItemImpl ( id ) ; < nl > + processDirtyOverlays ( ) ; < nl > notifySubscribers ( ) ; < nl > } < nl > < nl > @ @ - 159 , 43 + 146 , 189 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li < nl > for ( long id : ids ) { < nl > remoteItemImpl ( id ) ; < nl > } < nl > + processDirtyOverlays ( ) ; < nl > notifySubscribers ( ) ; < nl > } < nl > < nl > + private void remoteItemImpl ( long id ) { < nl > + for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > + if ( values . get ( i ) . getEngineId ( ) = = id ) { < nl > + values . remove ( i ) ; < nl > + jsValues . remove ( i ) ; < nl > + if ( isOverlaysSupported ) { < nl > + markAsDirty ( i ) ; < nl > + jsOverlays . remove ( i ) ; < nl > + } < nl > + break ; < nl > + } < nl > + } < nl > + } < nl > + < nl > @ Override < nl > public void onItemsReplaced ( List < V > items ) { < nl > values . clear ( ) ; < nl > - clear ( jsValues ) ; < nl > + jsValues . clear ( ) ; < nl > + if ( isOverlaysSupported ) { < nl > + jsOverlays . clear ( ) ; < nl > + isOverlayDirty . clear ( ) ; < nl > + } < nl > onItemsAddedOrUpdated ( items ) ; < nl > } < nl > < nl > @ Override < nl > public void onClear ( ) { < nl > values . clear ( ) ; < nl > - clear ( jsValues ) ; < nl > + jsValues . clear ( ) ; < nl > + if ( isOverlaysSupported ) { < nl > + jsOverlays . clear ( ) ; < nl > + isOverlayDirty . clear ( ) ; < nl > + } < nl > notifySubscribers ( ) ; < nl > } < nl > < nl > + / / < nl > + / / Notifications < nl > + / / < nl > + < nl > + public void subscribe ( JsDisplayListCallback < T > callback ) { < nl > + if ( ! callbacks . contains ( callback ) ) { < nl > + callbacks . add ( callback ) ; < nl > + } < nl > + < nl > + if ( isOverlaysSupported ) { < nl > + callback . onCollectionChanged ( jsValues , jsOverlays ) ; < nl > + } else { < nl > + callback . onCollectionChanged ( jsValues , null ) ; < nl > + } < nl > + } < nl > + < nl > + public void unsubscribe ( JsDisplayListCallback < T > callback ) { < nl > + callbacks . remove ( callback ) ; < nl > + } < nl > + < nl > + public void subscribeInverted ( JsDisplayListCallback < T > callback ) { < nl > + if ( ! callbacksInverted . contains ( callback ) ) { < nl > + callbacksInverted . add ( callback ) ; < nl > + } < nl > + < nl > + if ( isOverlaysSupported ) { < nl > + callback . onCollectionChanged ( jsValues . reverse ( ) , jsOverlays . reverse ( ) ) ; < nl > + } else { < nl > + callback . onCollectionChanged ( jsValues . reverse ( ) , null ) ; < nl > + } < nl > + } < nl > + < nl > + public void unsubscribeInverted ( JsDisplayListCallback < T > callback ) { < nl > + callbacksInverted . remove ( callback ) ; < nl > + } < nl > + < nl > private void notifySubscribers ( ) { < nl > - for ( JsDisplayListCallback < T > callback : callbacks ) { < nl > - callback . onCollectionChanged ( jsValues ) ; < nl > + if ( isOverlaysSupported ) { < nl > + for ( JsDisplayListCallback < T > callback : callbacks ) { < nl > + callback . onCollectionChanged ( jsValues , jsOverlays ) ; < nl > + } < nl > + } else { < nl > + for ( JsDisplayListCallback < T > callback : callbacks ) { < nl > + callback . onCollectionChanged ( jsValues , null ) ; < nl > + } < nl > } < nl > < nl > if ( callbacksInverted . size ( ) > 0 ) { < nl > - JsArray < T > rev = reverse ( jsValues ) ; < nl > - for ( JsDisplayListCallback < T > callback : callbacksInverted ) { < nl > - callback . onCollectionChanged ( rev ) ; < nl > + JsArray < T > rev = jsValues . reverse ( ) ; < nl > + if ( isOverlaysSupported ) { < nl > + JsArray < JavaScriptObject > revOverlays = jsOverlays . reverse ( ) ; < nl > + for ( JsDisplayListCallback < T > callback : callbacksInverted ) { < nl > + callback . onCollectionChanged ( rev , revOverlays ) ; < nl > + } < nl > + } else { < nl > + for ( JsDisplayListCallback < T > callback : callbacksInverted ) { < nl > + callback . onCollectionChanged ( rev , null ) ; < nl > + } < nl > } < nl > } < nl > } < nl > < nl > - protected native void clear ( JsArray < T > array ) / * - { array . splice ( 0 , array . length ) ; } - * / ; < nl > + / / < nl > + / / Reconverting < nl > + / / < nl > < nl > - protected native void insert ( JsArray < T > array , int index , T obj ) / * - { array . splice ( index , 0 , obj ) ; } - * / ; < nl > + public void startReconverting ( ) { < nl > + isForceReconverted = false ; < nl > + } < nl > + < nl > + public void forceReconvert ( long id ) { < nl > + for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > + V value = values . get ( i ) ; < nl > + if ( value . getEngineId ( ) = = id ) { < nl > + jsValues . update ( i , entityConverter . convert ( value ) ) ; < nl > + / / Do not update overlays as this is method is a hack for binding < nl > + isForceReconverted = true ; < nl > + break ; < nl > + } < nl > + } < nl > + } < nl > + < nl > + public void stopReconverting ( ) { < nl > + if ( isForceReconverted ) { < nl > + isForceReconverted = false ; < nl > + notifySubscribers ( ) ; < nl > + } < nl > + } < nl > + < nl > + / / < nl > + / / Overlays < nl > + / / < nl > + < nl > + private boolean isDirty ( int index ) { < nl > + return isOverlayDirty . get ( index ) ; < nl > + } < nl > < nl > - protected native void remove ( JsArray < T > array , int index ) / * - { array . splice ( index , 1 ) ; } - * / ; < nl > + private void markAsDirty ( int index ) { < nl > + isOverlayDirty . set ( index , true ) ; < nl > + if ( index - 1 > 0 ) { < nl > + isOverlayDirty . set ( index - 1 , true ) ; < nl > + } < nl > + < nl > + if ( index < isOverlayDirty . size ( ) ) { < nl > + isOverlayDirty . set ( index + 1 , true ) ; < nl > + } < nl > + } < nl > + < nl > + private void markAsClean ( int index ) { < nl > + isOverlayDirty . set ( index , false ) ; < nl > + } < nl > + < nl > + private boolean processDirtyOverlays ( ) { < nl > + if ( ! isOverlaysSupported ) { < nl > + return false ; < nl > + } < nl > + boolean isChanged = false ; < nl > + for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > + if ( ! isDirty ( i ) ) { < nl > + continue ; < nl > + } < nl > + < nl > + V prev = null ; < nl > + V current = values . get ( i ) ; < nl > + V next = null ; < nl > + < nl > + if ( i - 1 > = 0 ) { < nl > + prev = values . get ( i - 1 ) ; < nl > + } < nl > + if ( i + 1 < values . size ( ) ) { < nl > + next = values . get ( i + 1 ) ; < nl > + } < nl > + < nl > + jsOverlays . update ( i , entityConverter . buildOverlay ( prev , current , next ) ) ; < nl > + markAsClean ( i ) ; < nl > + isChanged = true ; < nl > + } < nl > + return isChanged ; < nl > + } < nl > < nl > - protected native JsArray < T > reverse ( JsArray < T > array ) / * - { return array . slice ( ) . reverse ( ) ; } - * / ; < nl > + / / < nl > + / / Not required methods < nl > + / / < nl > < nl > @ Override < nl > public void initCenter ( long rid ) { < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java < nl > index 43b3eb6 . . b663e79 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java < nl > @ @ - 14 , 5 + 14 , 5 @ @ import org . timepedia . exporter . client . Exportable ; < nl > @ Export < nl > @ ExportClosure < nl > public interface JsDisplayListCallback < T extends JavaScriptObject > extends Exportable { < nl > - void onCollectionChanged ( JsArray < T > array ) ; < nl > + void onCollectionChanged ( JsArray < T > array , JsArray < JavaScriptObject > overlays ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java < nl > index ce776ce . . da914e7 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java < nl > @ @ - 6 , 6 + 6 , 13 @ @ package im . actor . runtime . js . mvvm ; < nl > < nl > import com . google . gwt . core . client . JavaScriptObject ; < nl > < nl > + import java . util . ArrayList ; < nl > + < nl > public interface JsEntityConverter < F , T extends JavaScriptObject > { < nl > - T convert ( F value ) ; < nl > + < nl > + boolean isSupportOverlays ( ) ; < nl > + < nl > + JavaScriptObject buildOverlay ( F prev , F current , F next ) ; < nl > + < nl > + T convert ( F item ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsModernArray . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsModernArray . java < nl > new file mode 100644 < nl > index 0000000 . . 8ec3cdd < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsModernArray . java < nl > @ @ - 0 , 0 + 1 , 24 @ @ < nl > + package im . actor . runtime . js . utils ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + import com . google . gwt . core . client . JsArray ; < nl > + < nl > + public class JsModernArray < T extends JavaScriptObject > extends JsArray < T > { < nl > + < nl > + public native void clear ( ) / * - { this . splice ( 0 , this . length ) ; } - * / ; < nl > + < nl > + public native void insert ( int index , T obj ) / * - { this . splice ( index , 0 , obj ) ; } - * / ; < nl > + < nl > + public native void remove ( int index ) / * - { this . splice ( index , 1 ) ; } - * / ; < nl > + < nl > + public void update ( int index , T obj ) { < nl > + remove ( index ) ; < nl > + insert ( index , obj ) ; < nl > + } < nl > + < nl > + public native JsArray < T > reverse ( ) / * - { return this . slice ( ) . reverse ( ) ; } - * / ; < nl > + < nl > + protected JsModernArray ( ) { < nl > + < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java b / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java 
 index 7bed8c1 . . 3d71ea1 100644 
 - - - a / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java 
 @ @ - 52 , 19 + 52 , 6 @ @ public class CocoaMessenger extends Messenger { 
 public BindedDisplayList < Message > getMessageDisplayList ( final Peer peer ) { 
 if ( ! messagesLists . containsKey ( peer ) ) { 
 BindedDisplayList < Message > list = ( BindedDisplayList < Message > ) modules . getDisplayListsModule ( ) . getMessagesSharedList ( peer ) ; 
 - list . setBindHook ( new BindedDisplayList . BindHook < Message > ( ) { 
 - @ Override 
 - public void onScrolledToEnd ( ) { 
 - modules . getMessagesModule ( ) . loadMoreHistory ( peer ) ; 
 - } 
 - 
 - @ Override 
 - public void onItemTouched ( Message item ) { 
 - if ( item . isOnServer ( ) ) { 
 - modules . getMessagesModule ( ) . onMessageShown ( peer , item . getSenderId ( ) , item . getSortDate ( ) ) ; 
 - } 
 - } 
 - } ) ; 
 messagesLists . put ( peer , list ) ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java 
 index fb45819 . . fe96406 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / mtp / actors / ManagerActor . java 
 @ @ - 4 , 6 + 4 , 9 @ @ 
 
 package im . actor . core . network . mtp . actors ; 
 
 + import com . google . j2objc . annotations . AutoreleasePool ; 
 + import com . google . j2objc . annotations . RetainedLocalRef ; 
 + 
 import java . io . IOException ; 
 
 import im . actor . core . network . ActorApi ; 
 @ @ - 310 , 6 + 313 , 7 @ @ public class ManagerActor extends Actor { 
 mtProto . getCallback ( ) . onConnectionsCountChanged ( currentConnection ! = null ? 1 : 0 ) ; 
 } 
 
 + @ AutoreleasePool 
 private void onInMessage ( byte [ ] data , int offset , int len ) { 
 / / Log . d ( TAG , " Received package " ) ; 
 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / AutoreleasePool . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / AutoreleasePool . java 
 new file mode 100644 
 index 0000000 . . f1584f6 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / AutoreleasePool . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + / * 
 + * Copyright 2012 Google Inc . All Rights Reserved . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package com . google . j2objc . annotations ; 
 + 
 + import java . lang . annotation . ElementType ; 
 + import java . lang . annotation . Retention ; 
 + import java . lang . annotation . RetentionPolicy ; 
 + import java . lang . annotation . Target ; 
 + 
 + / * * 
 + * Annotation that indicates the translator should inject an autorelease pool 
 + * around the method body . Only valid on methods that don ' t return anything . 
 + * 
 + * @ author Pankaj Kakkar 
 + * / 
 + @ Target ( { ElementType . METHOD , ElementType . LOCAL _ VARIABLE } ) 
 + @ Retention ( RetentionPolicy . SOURCE ) 
 + public @ interface AutoreleasePool { 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / RetainedLocalRef . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / RetainedLocalRef . java 
 new file mode 100644 
 index 0000000 . . 8d7e5d8 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / RetainedLocalRef . java 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + / * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package com . google . j2objc . annotations ; 
 + 
 + import java . lang . annotation . Retention ; 
 + import java . lang . annotation . Target ; 
 + 
 + import static java . lang . annotation . ElementType . * ; 
 + import static java . lang . annotation . RetentionPolicy . * ; 
 + 
 + / * * 
 + * Annotation that indicates a local variable should be retained outside of any 
 + * subsequent AutoreleasePool use . Otherwise , if a local variable has a copy 
 + * of an object in a container that is removed in an AutoreleasePool , it will 
 + * be deallocated before the local variable goes out of scope . 
 + * < p > 
 + * For example , a ThreadPoolExecutor is used to process a list of tasks , 
 + * removing each task from the list as it is processed . ThreadPoolExecutor 
 + * tasks are run inside of an AutoreleasePool , since these executors are often 
 + * long - lived . If a local variable is initialized to one of the task list ' s 
 + * elements , by default that variable won ' t be valid ( will be deallocated ) 
 + * after task processing . Adding a LocalRetain annotation to the local 
 + * variable ensures it is still valid after task processing . 
 + * 
 + * @ author Tom Ball 
 + * / 
 + @ Target ( LOCAL _ VARIABLE ) 
 + @ Retention ( SOURCE ) 
 + public @ interface RetainedLocalRef { 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / Weak . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / Weak . java 
 new file mode 100644 
 index 0000000 . . 1924d74 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / com / google / j2objc / annotations / Weak . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + / * 
 + * Copyright 2012 Google Inc . All Rights Reserved . 
 + * 
 + * Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + * you may not use this file except in compliance with the License . 
 + * You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package com . google . j2objc . annotations ; 
 + 
 + import java . lang . annotation . Retention ; 
 + import java . lang . annotation . Target ; 
 + 
 + import static java . lang . annotation . ElementType . * ; 
 + import static java . lang . annotation . RetentionPolicy . * ; 
 + 
 + / * * 
 + * Annotation that indicates a variable has a weak relationship to its owner . 
 + * 
 + * @ author Tom Ball 
 + * / 
 + @ Target ( { FIELD , LOCAL _ VARIABLE , PARAMETER } ) 
 + @ Retention ( CLASS ) 
 + public @ interface Weak { 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 index 0772a28 . . 8cbd4ae 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / crypto / primitives / kuznechik / KuznechikFastEngine . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package im . actor . runtime . crypto . primitives . kuznechik ; 
 
 + import com . google . j2objc . annotations . Weak ; 
 + 
 import im . actor . runtime . crypto . primitives . BlockCipher ; 
 import im . actor . runtime . crypto . primitives . util . Pack ; 
 
 @ @ - 322 , 19 + 324 , 19 @ @ public class KuznechikFastEngine implements BlockCipher { 
 } 
 
 
 - static void kuz _ l ( int [ ] w , byte [ ] tmp ) { 
 + static void kuz _ l ( @ Weak int [ ] w , @ Weak byte [ ] tmp ) { 
 Pack . intToBigEndian ( w , tmp , 0 ) ; 
 kuz _ l ( tmp ) ; 
 Pack . bigEndianToInt ( tmp , 0 , w ) ; 
 } 
 
 - static void kuz _ l _ inv ( int [ ] w , byte [ ] tmp ) { 
 + static void kuz _ l _ inv ( @ Weak int [ ] w , @ Weak byte [ ] tmp ) { 
 Pack . intToBigEndian ( w , tmp , 0 ) ; 
 kuz _ l _ inv ( tmp ) ; 
 Pack . bigEndianToInt ( tmp , 0 , w ) ; 
 } 
 
 - static void kuz _ l ( byte [ ] w ) { 
 + static void kuz _ l ( @ Weak byte [ ] w ) { 
 for ( int j = 0 ; j < 16 ; j + + ) { 
 byte x = w [ 15 ] ; 
 w [ 15 ] = w [ 14 ] ; 
 @ @ - 372 , 26 + 374 , 77 @ @ public class KuznechikFastEngine implements BlockCipher { 
 } 
 
 / / inverse of linear operation l 
 - static void kuz _ l _ inv ( byte [ ] w ) { 
 + static void kuz _ l _ inv ( @ Weak byte [ ] w ) { 
 + 
 + byte t0 = w [ 0 ] , k0 = kuz _ lvec [ 0 ] ; 
 + byte t1 = w [ 1 ] , k1 = kuz _ lvec [ 1 ] ; 
 + byte t2 = w [ 2 ] , k2 = kuz _ lvec [ 2 ] ; 
 + byte t3 = w [ 3 ] , k3 = kuz _ lvec [ 3 ] ; 
 + byte t4 = w [ 4 ] , k4 = kuz _ lvec [ 4 ] ; 
 + byte t5 = w [ 5 ] , k5 = kuz _ lvec [ 5 ] ; 
 + byte t6 = w [ 6 ] , k6 = kuz _ lvec [ 6 ] ; 
 + byte t7 = w [ 7 ] , k7 = kuz _ lvec [ 7 ] ; 
 + byte t8 = w [ 8 ] , k8 = kuz _ lvec [ 8 ] ; 
 + byte t9 = w [ 9 ] , k9 = kuz _ lvec [ 9 ] ; 
 + byte t10 = w [ 10 ] , k10 = kuz _ lvec [ 10 ] ; 
 + byte t11 = w [ 11 ] , k11 = kuz _ lvec [ 11 ] ; 
 + byte t12 = w [ 12 ] , k12 = kuz _ lvec [ 12 ] ; 
 + byte t13 = w [ 13 ] , k13 = kuz _ lvec [ 13 ] ; 
 + byte t14 = w [ 14 ] , k14 = kuz _ lvec [ 14 ] ; 
 + byte t15 = w [ 15 ] ; 
 
 / / 16 rounds 
 for ( int j = 0 ; j < 16 ; j + + ) { 
 - 
 - / / x = w - > b [ 0 ] ; 
 - byte x = w [ 0 ] ; 
 - 
 - for ( int i = 0 ; i < 15 ; i + + ) { 
 - 
 - / / w - > b [ i ] = w - > b [ i + 1 ] ; 
 - w [ i ] = w [ i + 1 ] ; 
 - 
 - / / x ^ = kuz _ mul _ gf256 ( w - > b [ i ] , kuz _ lvec [ i ] ) ; 
 - x ^ = kuz _ mul _ gf256 _ fast ( w [ i ] , kuz _ lvec [ i ] ) ; 
 - } 
 - 
 - / / w - > b [ 15 ] = x ; 
 - w [ 15 ] = x ; 
 + byte x = t0 ; 
 + t0 = t1 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t0 , k0 ) ; 
 + t1 = t2 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t1 , k1 ) ; 
 + t2 = t3 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t2 , k2 ) ; 
 + t3 = t4 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t3 , k3 ) ; 
 + t4 = t5 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t4 , k4 ) ; 
 + t5 = t6 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t5 , k5 ) ; 
 + t6 = t7 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t6 , k6 ) ; 
 + t7 = t8 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t7 , k7 ) ; 
 + t8 = t9 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t8 , k8 ) ; 
 + t9 = t10 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t9 , k9 ) ; 
 + t10 = t11 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t10 , k10 ) ; 
 + t11 = t12 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t11 , k11 ) ; 
 + t12 = t13 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t12 , k12 ) ; 
 + t13 = t14 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t13 , k13 ) ; 
 + t14 = t15 ; 
 + x ^ = kuz _ mul _ gf256 _ fast ( t14 , k14 ) ; 
 + t15 = x ; 
 } 
 + 
 + w [ 0 ] = t0 ; 
 + w [ 1 ] = t1 ; 
 + w [ 2 ] = t2 ; 
 + w [ 3 ] = t3 ; 
 + w [ 4 ] = t4 ; 
 + w [ 5 ] = t5 ; 
 + w [ 6 ] = t6 ; 
 + w [ 7 ] = t7 ; 
 + w [ 8 ] = t8 ; 
 + w [ 9 ] = t9 ; 
 + w [ 10 ] = t10 ; 
 + w [ 11 ] = t11 ; 
 + w [ 12 ] = t12 ; 
 + w [ 13 ] = t13 ; 
 + w [ 14 ] = t14 ; 
 + w [ 15 ] = t15 ; 
 } 
 
 / / Fast implementation of multiplication in GF ( 2 ^ 8 ) on x ^ 8 + x ^ 7 + x ^ 6 + x + 1

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java 
 index 6e0e2dc . . d0a81c3 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsContact . java 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . runtime . js . mvvm . JsEntityConverter ; 
 public class JsContact extends JavaScriptObject { 
 
 public static JsEntityConverter < Contact , JsContact > CONVERTER = new JsEntityConverter < Contact , JsContact > ( ) { 
 + 
 @ Override 
 public JsContact convert ( Contact value ) { 
 
 @ @ - 26 , 6 + 27 , 16 @ @ public class JsContact extends JavaScriptObject { 
 return create ( value . getUid ( ) , value . getName ( ) , 
 Placeholders . getPlaceholder ( value . getUid ( ) ) , fileUrl ) ; 
 } 
 + 
 + @ Override 
 + public boolean isSupportOverlays ( ) { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public JavaScriptObject buildOverlay ( Contact prev , Contact current , Contact next ) { 
 + return null ; 
 + } 
 } ; 
 
 public static native JsContact create ( int uid , String name , String placeholder , String avatar ) / * - { 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java 
 index 955b3fb . . 6d17c3c 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsDialog . java 
 @ @ - 15 , 6 + 15 , 7 @ @ import im . actor . runtime . js . mvvm . JsEntityConverter ; 
 public class JsDialog extends JavaScriptObject { 
 
 public static final JsEntityConverter < Dialog , JsDialog > CONVERTER = new JsEntityConverter < Dialog , JsDialog > ( ) { 
 + 
 @ Override 
 public JsDialog convert ( Dialog src ) { 
 
 @ @ - 55 , 6 + 56 , 16 @ @ public class JsDialog extends JavaScriptObject { 
 Enums . convert ( src . getStatus ( ) ) , 
 src . getUnreadCount ( ) ) ; 
 } 
 + 
 + @ Override 
 + public boolean isSupportOverlays ( ) { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public JavaScriptObject buildOverlay ( Dialog prev , Dialog current , Dialog next ) { 
 + return null ; 
 + } 
 } ; 
 
 public static native JsDialog create ( JsPeerInfo peer , 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java 
 index 81bc399 . . 44a5ab0 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessage . java 
 @ @ - 9 , 6 + 9 , 9 @ @ import com . google . gwt . core . client . JsArray ; 
 import com . google . gwt . core . client . JsArrayInteger ; 
 import com . google . gwt . core . client . JsArrayString ; 
 import com . google . gwt . core . client . JsDate ; 
 + import com . google . gwt . user . datepicker . client . CalendarUtil ; 
 + 
 + import java . util . Date ; 
 
 import im . actor . core . api . ApiTextExMarkdown ; 
 import im . actor . core . entity . Message ; 
 @ @ - 31 , 6 + 34 , 39 @ @ public class JsMessage extends JavaScriptObject { 
 
 public static final JsEntityConverter < Message , JsMessage > CONVERTER = new JsEntityConverter < Message , JsMessage > ( ) { 
 @ Override 
 + public boolean isSupportOverlays ( ) { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public JavaScriptObject buildOverlay ( Message prev , Message current , Message next ) { 
 + Date prevDate = prev ! = null ? new Date ( prev . getDate ( ) ) : null ; 
 + Date currentDate = new Date ( current . getDate ( ) ) ; 
 + 
 + boolean showDate ; 
 + String dateDiv = null ; 
 + if ( prev ! = null ) { 
 + showDate = ! CalendarUtil . isSameDate ( prevDate , currentDate ) ; 
 + } else { 
 + showDate = true ; 
 + } 
 + if ( showDate ) { 
 + dateDiv = JsMessenger . getInstance ( ) . getFormatter ( ) . formatMonth ( currentDate ) ; 
 + } 
 + 
 + boolean useCompact = false ; 
 + if ( prev ! = null & & ! showDate ) { 
 + if ( prev . getSenderId ( ) = = current . getSenderId ( ) ) { 
 + if ( prev . getDate ( ) - current . getDate ( ) < 10 * 60 * 1000 ) { 
 + useCompact = true ; 
 + } 
 + } 
 + } 
 + 
 + return JsMessageOverlay . create ( useCompact , dateDiv ) ; 
 + } 
 + 
 + @ Override 
 public JsMessage convert ( Message value ) { 
 JsMessenger messenger = JsMessenger . getInstance ( ) ; 
 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessageOverlay . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessageOverlay . java 
 new file mode 100644 
 index 0000000 . . 50384e4 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsMessageOverlay . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsMessageOverlay extends JavaScriptObject { 
 + 
 + public static native JsMessageOverlay create ( boolean useShort , String dateDivider ) / * - { 
 + return { useShort : useShort , dateDivider : dateDivider } ; 
 + } - * / ; 
 + 
 + protected JsMessageOverlay ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 index 43efc3a . . 594bb74 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / i18n / I18nEngine . java 
 @ @ - 149 , 6 + 149 , 13 @ @ public class I18nEngine { 
 } 
 } 
 
 + @ ObjectiveCName ( " formatMonth : " ) 
 + public String formatMonth ( Date date ) { 
 + int month = date . getMonth ( ) ; 
 + int d = date . getDate ( ) ; 
 + return d + " " + MONTHS [ month ] . toUpperCase ( ) ; 
 + } 
 + 
 @ ObjectiveCName ( " formatTyping " ) 
 public String formatTyping ( ) { 
 return locale . get ( " Typing " ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java 
 index fb14eb8 . . 746ec5a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / SequenceActor . java 
 @ @ - 125 , 7 + 125 , 7 @ @ public class SequenceActor extends ModuleActor { 
 pendingRunnables . add ( after ) ; 
 } 
 return ; 
 - } else if ( u instanceof PushSeq ) { 
 + } else if ( u instanceof PushSeq ) { 
 PushSeq pushSeq = ( PushSeq ) u ; 
 if ( pushSeq . seq < = this . seq ) { 
 Log . d ( TAG , " Ignored PushSeq { seq : " + pushSeq . seq + " } " ) ; 
 @ @ - 290 , 6 + 290 , 14 @ @ public class SequenceActor extends ModuleActor { 
 } 
 Log . d ( TAG , " Difference parsed in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - parseStart ) + " ms " ) ; 
 
 + if ( updates . size ( ) > 0 ) { 
 + String command = " Difference updates : " ; 
 + for ( Update u : updates ) { 
 + command + = " \ n | " + u ; 
 + } 
 + Log . d ( TAG , command ) ; 
 + } 
 + 
 long applyStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; 
 processor . applyDifferenceUpdate ( response . getUsers ( ) , response . getGroups ( ) , updates ) ; 
 Log . d ( TAG , " Difference applied in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - applyStart ) + " ms " ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java 
 index 14e0386 . . 1b5c03d 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java 
 @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . runtime . Log ; 
 import im . actor . runtime . bser . BserObject ; 
 import im . actor . runtime . js . storage . JsListEngine ; 
 import im . actor . runtime . js . storage . JsListEngineCallback ; 
 + import im . actor . runtime . js . utils . JsModernArray ; 
 import im . actor . runtime . mvvm . PlatformDisplayList ; 
 import im . actor . runtime . storage . ListEngineItem ; 
 
 @ @ - 27 , 16 + 28 , 29 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li 
 private ArrayList < JsDisplayListCallback < T > > callbacksInverted = new ArrayList < JsDisplayListCallback < T > > ( ) ; 
 
 private ArrayList < V > values ; 
 - private JsArray < T > jsValues ; 
 + private ArrayList < Boolean > isOverlayDirty ; 
 + private JsModernArray < T > jsValues ; 
 + private JsModernArray < JavaScriptObject > jsOverlays ; 
 private boolean isForceReconverted = false ; 
 + private final boolean isOverlaysSupported ; 
 
 public JsDisplayList ( JsListEngine < V > listEngine , JsEntityConverter < V , T > entityConverter ) { 
 this . listEngine = listEngine ; 
 this . entityConverter = entityConverter ; 
 + this . isOverlaysSupported = entityConverter . isSupportOverlays ( ) ; 
 
 this . values = new ArrayList < V > ( ) ; 
 this . jsValues = JavaScriptObject . createArray ( ) . cast ( ) ; 
 
 + if ( isOverlaysSupported ) { 
 + this . isOverlayDirty = new ArrayList < Boolean > ( ) ; 
 + this . jsOverlays = JavaScriptObject . createArray ( ) . cast ( ) ; 
 + } 
 + 
 + / / 
 + / / Building initial list 
 + / / 
 + 
 long [ ] rids = listEngine . getOrderedIds ( ) ; 
 for ( long rid : rids ) { 
 V item = listEngine . getValue ( rid ) ; 
 @ @ - 46 , 59 + 60 , 43 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li 
 } 
 values . add ( item ) ; 
 jsValues . push ( entityConverter . convert ( item ) ) ; 
 - } 
 - listEngine . addListener ( this ) ; 
 - } 
 
 - public void subscribe ( JsDisplayListCallback < T > callback ) { 
 - if ( ! callbacks . contains ( callback ) ) { 
 - callbacks . add ( callback ) ; 
 + if ( isOverlaysSupported ) { 
 + jsOverlays . push ( null ) ; 
 + isOverlayDirty . add ( true ) ; 
 + } 
 } 
 
 - / / new JsArray < T > ( jsValues ) 
 - 
 - callback . onCollectionChanged ( jsValues ) ; 
 - } 
 - 
 - public void unsubscribe ( JsDisplayListCallback < T > callback ) { 
 - callbacks . remove ( callback ) ; 
 - } 
 - 
 - public void subscribeInverted ( JsDisplayListCallback < T > callback ) { 
 - if ( ! callbacksInverted . contains ( callback ) ) { 
 - callbacksInverted . add ( callback ) ; 
 - } 
 + / / 
 + / / Processing dirty overlays 
 + / / 
 + processDirtyOverlays ( ) ; 
 
 - callback . onCollectionChanged ( reverse ( jsValues ) ) ; 
 - } 
 + / / 
 + / / Subscribing to updates 
 + / / 
 
 - public void unsubscribeInverted ( JsDisplayListCallback < T > callback ) { 
 - callbacksInverted . remove ( callback ) ; 
 + listEngine . addListener ( this ) ; 
 } 
 
 - public void startReconverting ( ) { 
 - isForceReconverted = false ; 
 + public ArrayList < V > getRawItems ( ) { 
 + return values ; 
 } 
 
 - public void forceReconvert ( long id ) { 
 - for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 - if ( values . get ( i ) . getEngineId ( ) = = id ) { 
 - remove ( jsValues , i ) ; 
 - insert ( jsValues , i , entityConverter . convert ( values . get ( i ) ) ) ; 
 - isForceReconverted = true ; 
 - } 
 - } 
 + @ Override 
 + public void onItemAddedOrUpdated ( V item ) { 
 + addItemOrUpdateImpl ( item ) ; 
 + processDirtyOverlays ( ) ; 
 + notifySubscribers ( ) ; 
 } 
 
 - public void stopReconverting ( ) { 
 - if ( isForceReconverted ) { 
 - isForceReconverted = false ; 
 - notifySubscribers ( ) ; 
 + @ Override 
 + public void onItemsAddedOrUpdated ( List < V > items ) { 
 + for ( V item : items ) { 
 + addItemOrUpdateImpl ( item ) ; 
 } 
 - } 
 - 
 - public ArrayList < V > getRawItems ( ) { 
 - return values ; 
 + processDirtyOverlays ( ) ; 
 + notifySubscribers ( ) ; 
 } 
 
 private void addItemOrUpdateImpl ( V item ) { 
 @ @ - 107 , 7 + 105 , 11 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li 
 for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 if ( values . get ( i ) . getEngineId ( ) = = id ) { 
 values . remove ( i ) ; 
 - remove ( jsValues , i ) ; 
 + jsValues . remove ( i ) ; 
 + if ( isOverlaysSupported ) { 
 + markAsDirty ( i ) ; 
 + jsOverlays . remove ( i ) ; 
 + } 
 break ; 
 } 
 } 
 @ @ - 115 , 42 + 117 , 27 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li 
 for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 if ( sortKey > values . get ( i ) . getEngineSort ( ) ) { 
 values . add ( i , item ) ; 
 - insert ( jsValues , i , entityConverter . convert ( item ) ) ; 
 + jsValues . insert ( i , entityConverter . convert ( item ) ) ; 
 + if ( isOverlaysSupported ) { 
 + jsOverlays . insert ( i , null ) ; 
 + markAsDirty ( i ) ; 
 + } 
 return ; 
 } 
 } 
 
 values . add ( item ) ; 
 jsValues . push ( entityConverter . convert ( item ) ) ; 
 - } 
 - 
 - private void remoteItemImpl ( long id ) { 
 - for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 - if ( values . get ( i ) . getEngineId ( ) = = id ) { 
 - values . remove ( i ) ; 
 - remove ( jsValues , i ) ; 
 - break ; 
 - } 
 + if ( isOverlaysSupported ) { 
 + jsOverlays . push ( null ) ; 
 + markAsDirty ( values . size ( ) - 1 ) ; 
 } 
 } 
 
 @ Override 
 - public void onItemAddedOrUpdated ( V item ) { 
 - addItemOrUpdateImpl ( item ) ; 
 - notifySubscribers ( ) ; 
 - } 
 - 
 - @ Override 
 - public void onItemsAddedOrUpdated ( List < V > items ) { 
 - for ( V item : items ) { 
 - addItemOrUpdateImpl ( item ) ; 
 - } 
 - notifySubscribers ( ) ; 
 - } 
 - 
 - @ Override 
 public void onItemRemoved ( long id ) { 
 remoteItemImpl ( id ) ; 
 + processDirtyOverlays ( ) ; 
 notifySubscribers ( ) ; 
 } 
 
 @ @ - 159 , 43 + 146 , 189 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li 
 for ( long id : ids ) { 
 remoteItemImpl ( id ) ; 
 } 
 + processDirtyOverlays ( ) ; 
 notifySubscribers ( ) ; 
 } 
 
 + private void remoteItemImpl ( long id ) { 
 + for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 + if ( values . get ( i ) . getEngineId ( ) = = id ) { 
 + values . remove ( i ) ; 
 + jsValues . remove ( i ) ; 
 + if ( isOverlaysSupported ) { 
 + markAsDirty ( i ) ; 
 + jsOverlays . remove ( i ) ; 
 + } 
 + break ; 
 + } 
 + } 
 + } 
 + 
 @ Override 
 public void onItemsReplaced ( List < V > items ) { 
 values . clear ( ) ; 
 - clear ( jsValues ) ; 
 + jsValues . clear ( ) ; 
 + if ( isOverlaysSupported ) { 
 + jsOverlays . clear ( ) ; 
 + isOverlayDirty . clear ( ) ; 
 + } 
 onItemsAddedOrUpdated ( items ) ; 
 } 
 
 @ Override 
 public void onClear ( ) { 
 values . clear ( ) ; 
 - clear ( jsValues ) ; 
 + jsValues . clear ( ) ; 
 + if ( isOverlaysSupported ) { 
 + jsOverlays . clear ( ) ; 
 + isOverlayDirty . clear ( ) ; 
 + } 
 notifySubscribers ( ) ; 
 } 
 
 + / / 
 + / / Notifications 
 + / / 
 + 
 + public void subscribe ( JsDisplayListCallback < T > callback ) { 
 + if ( ! callbacks . contains ( callback ) ) { 
 + callbacks . add ( callback ) ; 
 + } 
 + 
 + if ( isOverlaysSupported ) { 
 + callback . onCollectionChanged ( jsValues , jsOverlays ) ; 
 + } else { 
 + callback . onCollectionChanged ( jsValues , null ) ; 
 + } 
 + } 
 + 
 + public void unsubscribe ( JsDisplayListCallback < T > callback ) { 
 + callbacks . remove ( callback ) ; 
 + } 
 + 
 + public void subscribeInverted ( JsDisplayListCallback < T > callback ) { 
 + if ( ! callbacksInverted . contains ( callback ) ) { 
 + callbacksInverted . add ( callback ) ; 
 + } 
 + 
 + if ( isOverlaysSupported ) { 
 + callback . onCollectionChanged ( jsValues . reverse ( ) , jsOverlays . reverse ( ) ) ; 
 + } else { 
 + callback . onCollectionChanged ( jsValues . reverse ( ) , null ) ; 
 + } 
 + } 
 + 
 + public void unsubscribeInverted ( JsDisplayListCallback < T > callback ) { 
 + callbacksInverted . remove ( callback ) ; 
 + } 
 + 
 private void notifySubscribers ( ) { 
 - for ( JsDisplayListCallback < T > callback : callbacks ) { 
 - callback . onCollectionChanged ( jsValues ) ; 
 + if ( isOverlaysSupported ) { 
 + for ( JsDisplayListCallback < T > callback : callbacks ) { 
 + callback . onCollectionChanged ( jsValues , jsOverlays ) ; 
 + } 
 + } else { 
 + for ( JsDisplayListCallback < T > callback : callbacks ) { 
 + callback . onCollectionChanged ( jsValues , null ) ; 
 + } 
 } 
 
 if ( callbacksInverted . size ( ) > 0 ) { 
 - JsArray < T > rev = reverse ( jsValues ) ; 
 - for ( JsDisplayListCallback < T > callback : callbacksInverted ) { 
 - callback . onCollectionChanged ( rev ) ; 
 + JsArray < T > rev = jsValues . reverse ( ) ; 
 + if ( isOverlaysSupported ) { 
 + JsArray < JavaScriptObject > revOverlays = jsOverlays . reverse ( ) ; 
 + for ( JsDisplayListCallback < T > callback : callbacksInverted ) { 
 + callback . onCollectionChanged ( rev , revOverlays ) ; 
 + } 
 + } else { 
 + for ( JsDisplayListCallback < T > callback : callbacksInverted ) { 
 + callback . onCollectionChanged ( rev , null ) ; 
 + } 
 } 
 } 
 } 
 
 - protected native void clear ( JsArray < T > array ) / * - { array . splice ( 0 , array . length ) ; } - * / ; 
 + / / 
 + / / Reconverting 
 + / / 
 
 - protected native void insert ( JsArray < T > array , int index , T obj ) / * - { array . splice ( index , 0 , obj ) ; } - * / ; 
 + public void startReconverting ( ) { 
 + isForceReconverted = false ; 
 + } 
 + 
 + public void forceReconvert ( long id ) { 
 + for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 + V value = values . get ( i ) ; 
 + if ( value . getEngineId ( ) = = id ) { 
 + jsValues . update ( i , entityConverter . convert ( value ) ) ; 
 + / / Do not update overlays as this is method is a hack for binding 
 + isForceReconverted = true ; 
 + break ; 
 + } 
 + } 
 + } 
 + 
 + public void stopReconverting ( ) { 
 + if ( isForceReconverted ) { 
 + isForceReconverted = false ; 
 + notifySubscribers ( ) ; 
 + } 
 + } 
 + 
 + / / 
 + / / Overlays 
 + / / 
 + 
 + private boolean isDirty ( int index ) { 
 + return isOverlayDirty . get ( index ) ; 
 + } 
 
 - protected native void remove ( JsArray < T > array , int index ) / * - { array . splice ( index , 1 ) ; } - * / ; 
 + private void markAsDirty ( int index ) { 
 + isOverlayDirty . set ( index , true ) ; 
 + if ( index - 1 > 0 ) { 
 + isOverlayDirty . set ( index - 1 , true ) ; 
 + } 
 + 
 + if ( index < isOverlayDirty . size ( ) ) { 
 + isOverlayDirty . set ( index + 1 , true ) ; 
 + } 
 + } 
 + 
 + private void markAsClean ( int index ) { 
 + isOverlayDirty . set ( index , false ) ; 
 + } 
 + 
 + private boolean processDirtyOverlays ( ) { 
 + if ( ! isOverlaysSupported ) { 
 + return false ; 
 + } 
 + boolean isChanged = false ; 
 + for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 + if ( ! isDirty ( i ) ) { 
 + continue ; 
 + } 
 + 
 + V prev = null ; 
 + V current = values . get ( i ) ; 
 + V next = null ; 
 + 
 + if ( i - 1 > = 0 ) { 
 + prev = values . get ( i - 1 ) ; 
 + } 
 + if ( i + 1 < values . size ( ) ) { 
 + next = values . get ( i + 1 ) ; 
 + } 
 + 
 + jsOverlays . update ( i , entityConverter . buildOverlay ( prev , current , next ) ) ; 
 + markAsClean ( i ) ; 
 + isChanged = true ; 
 + } 
 + return isChanged ; 
 + } 
 
 - protected native JsArray < T > reverse ( JsArray < T > array ) / * - { return array . slice ( ) . reverse ( ) ; } - * / ; 
 + / / 
 + / / Not required methods 
 + / / 
 
 @ Override 
 public void initCenter ( long rid ) { 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java 
 index 43b3eb6 . . b663e79 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayListCallback . java 
 @ @ - 14 , 5 + 14 , 5 @ @ import org . timepedia . exporter . client . Exportable ; 
 @ Export 
 @ ExportClosure 
 public interface JsDisplayListCallback < T extends JavaScriptObject > extends Exportable { 
 - void onCollectionChanged ( JsArray < T > array ) ; 
 + void onCollectionChanged ( JsArray < T > array , JsArray < JavaScriptObject > overlays ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java 
 index ce776ce . . da914e7 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsEntityConverter . java 
 @ @ - 6 , 6 + 6 , 13 @ @ package im . actor . runtime . js . mvvm ; 
 
 import com . google . gwt . core . client . JavaScriptObject ; 
 
 + import java . util . ArrayList ; 
 + 
 public interface JsEntityConverter < F , T extends JavaScriptObject > { 
 - T convert ( F value ) ; 
 + 
 + boolean isSupportOverlays ( ) ; 
 + 
 + JavaScriptObject buildOverlay ( F prev , F current , F next ) ; 
 + 
 + T convert ( F item ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsModernArray . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsModernArray . java 
 new file mode 100644 
 index 0000000 . . 8ec3cdd 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsModernArray . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package im . actor . runtime . js . utils ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + import com . google . gwt . core . client . JsArray ; 
 + 
 + public class JsModernArray < T extends JavaScriptObject > extends JsArray < T > { 
 + 
 + public native void clear ( ) / * - { this . splice ( 0 , this . length ) ; } - * / ; 
 + 
 + public native void insert ( int index , T obj ) / * - { this . splice ( index , 0 , obj ) ; } - * / ; 
 + 
 + public native void remove ( int index ) / * - { this . splice ( index , 1 ) ; } - * / ; 
 + 
 + public void update ( int index , T obj ) { 
 + remove ( index ) ; 
 + insert ( index , obj ) ; 
 + } 
 + 
 + public native JsArray < T > reverse ( ) / * - { return this . slice ( ) . reverse ( ) ; } - * / ; 
 + 
 + protected JsModernArray ( ) { 
 + 
 + } 
 + }
