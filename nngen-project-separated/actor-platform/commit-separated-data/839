BLEU SCORE: 0.2626909894424158

TEST MSG: wip ( core ) : Working on master call actor
GENERATED MSG: feat ( core ) : Mute / unmute calls

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > index 094cbff . . c8dff74 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > @ @ - 4 , 7 + 4 , 6 @ @ import java . util . ArrayList ; < nl > import java . util . List ; < nl > < nl > import im . actor . core . api . ApiCallMember ; < nl > - import im . actor . core . api . ApiCallMemberStateHolder ; < nl > import im . actor . core . api . rpc . RequestGetCallInfo ; < nl > import im . actor . core . api . rpc . ResponseGetCallInfo ; < nl > import im . actor . core . entity . Peer ; < nl > @ @ - 98 , 49 + 97 , 7 @ @ public class CallSlaveActor extends AbsCallActor { < nl > if ( apiCallMember . getUserId ( ) = = myUid ( ) ) { < nl > continue ; < nl > } < nl > - ApiCallMemberStateHolder stateHolder = apiCallMember . getState ( ) ; < nl > - CallMemberState state ; < nl > - switch ( stateHolder . getState ( ) ) { < nl > - case RINGING : < nl > - state = CallMemberState . RINGING ; < nl > - break ; < nl > - case RINGING _ REACHED : < nl > - state = CallMemberState . RINGING _ REACHED ; < nl > - break ; < nl > - case CONNECTING : < nl > - state = CallMemberState . CONNECTING ; < nl > - break ; < nl > - case CONNECTED : < nl > - state = CallMemberState . IN _ PROGRESS ; < nl > - break ; < nl > - case ENDED : < nl > - state = CallMemberState . ENDED ; < nl > - break ; < nl > - default : < nl > - if ( stateHolder . fallbackIsRingingReached ( ) ! = null & & stateHolder . fallbackIsRingingReached ( ) ) { < nl > - state = CallMemberState . RINGING _ REACHED ; < nl > - break ; < nl > - } < nl > - if ( stateHolder . fallbackIsEnded ( ) ! = null & & stateHolder . fallbackIsEnded ( ) ) { < nl > - state = CallMemberState . ENDED ; < nl > - break ; < nl > - } < nl > - if ( stateHolder . fallbackIsRinging ( ) ! = null & & stateHolder . fallbackIsRinging ( ) ) { < nl > - state = CallMemberState . RINGING ; < nl > - break ; < nl > - } < nl > - < nl > - if ( stateHolder . fallbackIsConnecting ( ) ! = null & & stateHolder . fallbackIsConnecting ( ) ) { < nl > - state = CallMemberState . CONNECTING ; < nl > - break ; < nl > - } < nl > - < nl > - if ( stateHolder . fallbackIsConnected ( ) ! = null & & stateHolder . fallbackIsConnected ( ) ) { < nl > - state = CallMemberState . IN _ PROGRESS ; < nl > - break ; < nl > - } < nl > - state = CallMemberState . RINGING ; < nl > - } < nl > + CallMemberState state = CallMemberState . from ( apiCallMember . getState ( ) ) ; < nl > members . add ( new CallMember ( apiCallMember . getUserId ( ) , state ) ) ; < nl > } < nl > callVM . getMembers ( ) . change ( members ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerCallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerCallMasterActor . java < nl > index 24b17b9 . . 5f8ca74 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerCallMasterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerCallMasterActor . java < nl > @ @ - 100 , 19 + 100 , 30 @ @ public class PeerCallMasterActor extends AbsCallActor { < nl > } ) . done ( self ( ) ) ; < nl > } < nl > < nl > + < nl > @ Override < nl > public void onDeviceConnected ( int uid , long deviceId ) { < nl > - if ( ! members . contains ( uid ) | | uid = = 0 ) { < nl > - return ; < nl > - } < nl > < nl > - Log . d ( TAG , " onDeviceConnected : " + deviceId ) ; < nl > + / * < nl > + * Initial connection of device to chat . < nl > + * Here we need to advertise master for any suitable member . < nl > + * / < nl > < nl > + if ( ! members . contains ( uid ) & & uid ! = 0 ) { < nl > + return ; < nl > + } < nl > sendSwitchMaster ( uid , deviceId ) ; < nl > } < nl > < nl > @ Override < nl > public void onAdvertised ( int uid , long deviceId , ApiPeerSettings settings ) { < nl > + < nl > + / * < nl > + * Advertised Peer - create local peer and start opening connections if this node supports < nl > + * connections before answering . < nl > + * Additionally filter double messages . < nl > + * / < nl > + < nl > if ( nodes . containsKey ( deviceId ) ) { < nl > return ; < nl > } < nl > @ @ - 148 , 15 + 159 , 19 @ @ public class PeerCallMasterActor extends AbsCallActor { < nl > < nl > @ Override < nl > public void onAnswered ( int uid , long deviceId ) { < nl > - super . onAnswered ( uid , deviceId ) ; < nl > < nl > - Log . d ( TAG , " onAnswered : " + deviceId ) ; < nl > + / * < nl > + * Peer Answered on call . Enabling ready connections , create new if necessary . < nl > + * / < nl > < nl > - if ( ! nodes . containsKey ( deviceId ) ) { < nl > + Node node = nodes . get ( deviceId ) ; < nl > + if ( node = = null | | node . isAnswered ( ) ) { < nl > return ; < nl > } < nl > + node . setIsAnswered ( true ) ; < nl > + < nl > + Log . d ( TAG , " onAnswered : " + deviceId ) ; < nl > < nl > - Node node = nodes . get ( deviceId ) ; < nl > if ( node . getPeerSettings ( ) . isPreConnectionEnabled ( ) & & getSelfSettings ( ) . isPreConnectionEnabled ( ) ) { < nl > getPeer ( uid , deviceId ) . onAnswered ( ) ; < nl > } else { < nl > @ @ - 185 , 6 + 200 , 9 @ @ public class PeerCallMasterActor extends AbsCallActor { < nl > } < nl > } < nl > < nl > + / / < nl > + / / Updating call state < nl > + / / < nl > if ( ! isAnswered ) { < nl > isAnswered = true ; < nl > if ( isStarted ) { < nl > @ @ - 192 , 26 + 210 , 25 @ @ public class PeerCallMasterActor extends AbsCallActor { < nl > } else { < nl > callVM . getState ( ) . change ( CallState . CONNECTING ) ; < nl > } < nl > + callManager . send ( new CallManagerActor . OnCallAnswered ( callId ) ) ; < nl > } < nl > } < nl > < nl > @ Override < nl > public void onFirstPeerStarted ( ) { < nl > - super . onFirstPeerStarted ( ) ; < nl > + < nl > + / * < nl > + * Called When first device started to send actual data < nl > + * / < nl > < nl > isStarted = true ; < nl > if ( isAnswered ) { < nl > callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; < nl > + callManager . send ( new CallManagerActor . OnCallAnswered ( callId ) ) ; < nl > } < nl > } < nl > < nl > @ Override < nl > - public void onPeerConnected ( int uid , long deviceId ) { < nl > - super . onPeerConnected ( uid , deviceId ) ; < nl > - Log . d ( TAG , " onPeerConnected : " + deviceId ) ; < nl > - } < nl > - < nl > - @ Override < nl > public void onPeerStarted ( int uid , long deviceId ) { < nl > super . onPeerStarted ( uid , deviceId ) ; < nl > Log . d ( TAG , " onPeerStarted : " + deviceId ) ; < nl > @ @ - 225 , 6 + 242 , 19 @ @ public class PeerCallMasterActor extends AbsCallActor { < nl > @ Override < nl > public void onDeviceDisconnected ( int uid , long deviceId ) { < nl > < nl > + / * < nl > + * Called when device was disconnected . Stop peer and update call state . < nl > + * / < nl > + < nl > + Node node = nodes . remove ( deviceId ) ; < nl > + if ( node = = null ) { < nl > + return ; < nl > + } < nl > + stopPeer ( deviceId ) ; < nl > + < nl > + if ( node . isAnswered ( ) ) { < nl > + / / If Node answered ? < nl > + } < nl > } < nl > < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > index 835e0c3 . . 005cea5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > @ @ - 124 , 6 + 124 , 9 @ @ public class PeerCallActor extends EventBusActor { < nl > if ( wasAnswered ) { < nl > wasAnswered = false ; < nl > sendSignaling ( uid , deviceId , new ApiAnswerCall ( ) ) ; < nl > + for ( PeerNodeInt node : refs . values ( ) ) { < nl > + node . onAnswered ( ) ; < nl > + } < nl > } < nl > < nl > if ( wasRejected ) { < nl > @ @ - 251 , 6 + 254 , 13 @ @ public class PeerCallActor extends EventBusActor { < nl > refs . clear ( ) ; < nl > } < nl > < nl > + public void stopPeer ( long deviceId ) { < nl > + PeerNodeInt peerNodeInt = refs . remove ( deviceId ) ; < nl > + if ( peerNodeInt ! = null ) { < nl > + peerNodeInt . stop ( ) ; < nl > + } < nl > + } < nl > + < nl > < nl > / / < nl > / / Messages < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > index 5d46cb3 . . 7aad0b9 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > @ @ - 50 , 6 + 50 , 9 @ @ public class PeerNodeActor extends ModuleActor { < nl > @ ActorMessage < nl > public void onAnswered ( ) { < nl > this . isAnswered = true ; < nl > + if ( mediaStream ! = null ) { < nl > + this . mediaStream . setEnabled ( ! isMuted ) ; < nl > + } < nl > makePeerConnectionIfNeeded ( ) ; < nl > enablePeerConnectionIfNeeded ( ) ; < nl > if ( isConnected ) { < nl > @ @ - 61 , 7 + 64 , 7 @ @ public class PeerNodeActor extends ModuleActor { < nl > public void setOwnSetStream ( WebRTCMediaStream mediaStream ) { < nl > < nl > this . mediaStream = mediaStream ; < nl > - this . mediaStream . setEnabled ( ! isMuted ) ; < nl > + this . mediaStream . setEnabled ( ! isMuted & & isAnswered ) ; < nl > < nl > makePeerConnectionIfNeeded ( ) ; < nl > enablePeerConnectionIfNeeded ( ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallMemberState . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallMemberState . java < nl > index f7e7c58 . . 2c73a0f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallMemberState . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallMemberState . java < nl > @ @ - 1 , 5 + 1 , 42 @ @ < nl > package im . actor . core . viewmodel ; < nl > < nl > + import im . actor . core . api . ApiCallMemberState ; < nl > + import im . actor . core . api . ApiCallMemberStateHolder ; < nl > + < nl > public enum CallMemberState { < nl > - RINGING , RINGING _ REACHED , CONNECTING , IN _ PROGRESS , ENDED < nl > + RINGING , RINGING _ REACHED , CONNECTING , IN _ PROGRESS , ENDED ; < nl > + < nl > + public static CallMemberState from ( ApiCallMemberStateHolder state ) { < nl > + switch ( state . getState ( ) ) { < nl > + case RINGING : < nl > + return CallMemberState . RINGING ; < nl > + case RINGING _ REACHED : < nl > + return CallMemberState . RINGING _ REACHED ; < nl > + case CONNECTING : < nl > + return CallMemberState . CONNECTING ; < nl > + case CONNECTED : < nl > + return CallMemberState . IN _ PROGRESS ; < nl > + case ENDED : < nl > + return CallMemberState . ENDED ; < nl > + default : < nl > + if ( state . fallbackIsRingingReached ( ) ! = null & & state . fallbackIsRingingReached ( ) ) { < nl > + return CallMemberState . RINGING _ REACHED ; < nl > + } < nl > + if ( state . fallbackIsEnded ( ) ! = null & & state . fallbackIsEnded ( ) ) { < nl > + return CallMemberState . ENDED ; < nl > + } < nl > + if ( state . fallbackIsRinging ( ) ! = null & & state . fallbackIsRinging ( ) ) { < nl > + return CallMemberState . RINGING ; < nl > + } < nl > + < nl > + if ( state . fallbackIsConnecting ( ) ! = null & & state . fallbackIsConnecting ( ) ) { < nl > + return CallMemberState . CONNECTING ; < nl > + } < nl > + < nl > + if ( state . fallbackIsConnected ( ) ! = null & & state . fallbackIsConnected ( ) ) { < nl > + return CallMemberState . IN _ PROGRESS ; < nl > + } < nl > + return CallMemberState . RINGING ; < nl > + } < nl > + } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index 2f31b3e . . 874c053 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 30 , 6 + 30 , 7 @ @ public class CallActor extends EventBusActor { < nl > < nl > private HashMap < Integer , HashMap < Long , ActorRef > > peerConnections = new HashMap < > ( ) ; < nl > private HashMap < Long , CallVM > callModels ; < nl > + private boolean isMuted = false ; < nl > < nl > public CallActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 122 , 6 + 123 , 34 @ @ public class CallActor extends EventBusActor { < nl > } < nl > } < nl > < nl > + public final void onMute ( ) { < nl > + if ( isMuted ) { < nl > + return ; < nl > + } < nl > + isMuted = true ; < nl > + < nl > + for ( int uid : peerConnections . keySet ( ) ) { < nl > + HashMap < Long , ActorRef > peers = peerConnections . get ( uid ) ; < nl > + for ( ActorRef p : peers . values ( ) ) { < nl > + p . send ( new PeerConnectionActor . DoMute ( ) ) ; < nl > + } < nl > + } < nl > + } < nl > + < nl > + public final void onUnmute ( ) { < nl > + if ( ! isMuted ) { < nl > + return ; < nl > + } < nl > + isMuted = false ; < nl > + < nl > + for ( int uid : peerConnections . keySet ( ) ) { < nl > + HashMap < Long , ActorRef > peers = peerConnections . get ( uid ) ; < nl > + for ( ActorRef p : peers . values ( ) ) { < nl > + p . send ( new PeerConnectionActor . DoUnmute ( ) ) ; < nl > + } < nl > + } < nl > + } < nl > + < nl > @ Override < nl > public final void onMessageReceived ( @ Nullable Integer senderId , @ Nullable Long senderDeviceId , byte [ ] data ) { < nl > if ( senderId = = null | | senderDeviceId = = null ) { < nl > @ @ - 166 , 7 + 195 , 7 @ @ public class CallActor extends EventBusActor { < nl > return refs . get ( deviceId ) ; < nl > } < nl > ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / uid : " + uid + " / " + deviceId , < nl > - PeerConnectionActor . CONSTRUCTOR ( self ( ) , uid , deviceId , context ( ) ) ) ; < nl > + PeerConnectionActor . CONSTRUCTOR ( self ( ) , uid , deviceId , isMuted , context ( ) ) ) ; < nl > refs . put ( deviceId , ref ) ; < nl > return ref ; < nl > } < nl > @ @ - 197 , 6 + 226 , 10 @ @ public class CallActor extends EventBusActor { < nl > } else if ( message instanceof PeerConnectionActor . OnStreamRemoved ) { < nl > PeerConnectionActor . OnStreamRemoved streamRemoved = ( PeerConnectionActor . OnStreamRemoved ) message ; < nl > onStreamRemoved ( streamRemoved . getUid ( ) , streamRemoved . getDeviceId ( ) , streamRemoved . getStream ( ) ) ; < nl > + } else if ( message instanceof Mute ) { < nl > + onMute ( ) ; < nl > + } else if ( message instanceof Unmute ) { < nl > + onUnmute ( ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > @ @ - 205 , 4 + 238 , 12 @ @ public class CallActor extends EventBusActor { < nl > public static class DoEndCall { < nl > < nl > } < nl > + < nl > + public static class Mute { < nl > + < nl > + } < nl > + < nl > + public static class Unmute { < nl > + < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > index e468e40 . . cab47db 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 209 , 6 + 209 , 22 @ @ public class CallManagerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > + / / < nl > + / / Call Mute / Unmute < nl > + / / < nl > + private void onCallMute ( long callId ) { < nl > + ActorRef ref = runningCalls . get ( callId ) ; < nl > + if ( ref ! = null ) { < nl > + < nl > + } < nl > + } < nl > + < nl > + private void onCallUnmute ( long callId ) { < nl > + ActorRef ref = runningCalls . get ( callId ) ; < nl > + if ( ref ! = null ) { < nl > + < nl > + } < nl > + } < nl > < nl > / / < nl > / / Ending call < nl > @ @ - 365 , 6 + 381 , 34 @ @ public class CallManagerActor extends ModuleActor { < nl > < nl > < nl > / / < nl > + / / Call State < nl > + / / < nl > + < nl > + public static class MuteCall { < nl > + private long callId ; < nl > + < nl > + public MuteCall ( long callId ) { < nl > + this . callId = callId ; < nl > + } < nl > + < nl > + public long getCallId ( ) { < nl > + return callId ; < nl > + } < nl > + } < nl > + < nl > + public static class UnmuteCall { < nl > + private long callId ; < nl > + < nl > + public UnmuteCall ( long callId ) { < nl > + this . callId = callId ; < nl > + } < nl > + < nl > + public long getCallId ( ) { < nl > + return callId ; < nl > + } < nl > + } < nl > + < nl > + / / < nl > / / Call Start < nl > / / < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > index f5a4696 . . a19ba28 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > @ @ - 56 , 6 + 56 , 14 @ @ public class CallsModule extends AbsModule { < nl > } ; < nl > } < nl > < nl > + public void muteCall ( long callId ) { < nl > + callManager . send ( new CallManagerActor . MuteCall ( callId ) ) ; < nl > + } < nl > + < nl > + public void unmuteCall ( long callId ) { < nl > + callManager . send ( new CallManagerActor . UnmuteCall ( callId ) ) ; < nl > + } < nl > + < nl > public void endCall ( long callId ) { < nl > callManager . send ( new CallManagerActor . EndCall ( callId ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > index d1233eb . . 774d851 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > @ @ - 33 , 11 + 33 , 12 @ @ public class PeerConnectionActor extends ModuleActor { < nl > public static ActorCreator CONSTRUCTOR ( @ NotNull final ActorRef root , < nl > final int uid , < nl > final long deviceId , < nl > + final boolean isMuted , < nl > @ NotNull final ModuleContext context ) { < nl > return new ActorCreator ( ) { < nl > @ Override < nl > public Actor create ( ) { < nl > - return new PeerConnectionActor ( root , uid , deviceId , context ) ; < nl > + return new PeerConnectionActor ( root , uid , deviceId , isMuted , context ) ; < nl > } < nl > } ; < nl > } < nl > @ @ - 47 , 6 + 48 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > private final ActorRef root ; < nl > private final int uid ; < nl > private final long deviceId ; < nl > + private boolean isMuted ; < nl > private boolean isReady = false ; < nl > private boolean isReadyForCandidates = false ; < nl > @ NotNull < nl > @ @ - 56 , 9 + 58 , 10 @ @ public class PeerConnectionActor extends ModuleActor { < nl > @ NotNull < nl > private State state = State . INITIALIZATION ; < nl > < nl > - public PeerConnectionActor ( @ NotNull ActorRef root , int uid , long deviceId , @ NotNull ModuleContext context ) { < nl > + public PeerConnectionActor ( @ NotNull ActorRef root , int uid , long deviceId , boolean isMuted , @ NotNull ModuleContext context ) { < nl > super ( context ) ; < nl > TAG = " PeerConnection # " + uid + " ( " + deviceId + " ) " ; < nl > + this . isMuted = isMuted ; < nl > this . root = root ; < nl > this . uid = uid ; < nl > this . deviceId = deviceId ; < nl > @ @ - 81 , 6 + 84 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > Promises . tuple ( WebRTC . createPeerConnection ( ) , WebRTC . getUserAudio ( ) ) . map ( new FunctionTupled2 < WebRTCPeerConnection , WebRTCMediaStream , WebRTCPeerConnection > ( ) { < nl > @ Override < nl > public WebRTCPeerConnection apply ( WebRTCPeerConnection webRTCPeerConnection , WebRTCMediaStream stream ) { < nl > + stream . setEnabled ( ! isMuted ) ; < nl > PeerConnectionActor . this . stream = stream ; < nl > webRTCPeerConnection . addOwnStream ( stream ) ; < nl > return webRTCPeerConnection ; < nl > @ @ - 266 , 6 + 270 , 18 @ @ public class PeerConnectionActor extends ModuleActor { < nl > peerConnection . addCandidate ( index , id , sdp ) ; < nl > } < nl > < nl > + public void onMute ( ) { < nl > + if ( stream ! = null ) { < nl > + stream . setEnabled ( false ) ; < nl > + } < nl > + } < nl > + < nl > + public void onUnmute ( ) { < nl > + if ( stream ! = null ) { < nl > + stream . setEnabled ( true ) ; < nl > + } < nl > + } < nl > + < nl > public void onEnded ( ) { < nl > peerConnection . close ( ) ; < nl > stream . close ( ) ; < nl > @ @ - 345 , 6 + 361 , 18 @ @ public class PeerConnectionActor extends ModuleActor { < nl > return ; < nl > } < nl > onEnded ( ) ; < nl > + } else if ( message instanceof DoMute ) { < nl > + if ( ! isReady ) { < nl > + stash ( ) ; < nl > + return ; < nl > + } < nl > + onMute ( ) ; < nl > + } else if ( message instanceof DoUnmute ) { < nl > + if ( ! isReady ) { < nl > + stash ( ) ; < nl > + return ; < nl > + } < nl > + onUnmute ( ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > @ @ - 576 , 6 + 604 , 14 @ @ public class PeerConnectionActor extends ModuleActor { < nl > < nl > } < nl > < nl > + public static class DoMute { < nl > + < nl > + } < nl > + < nl > + public static class DoUnmute { < nl > + < nl > + } < nl > + < nl > private enum State { < nl > INITIALIZATION , WAITING _ HANDSHAKE , WAITING _ ANSWER , READY , CLOSED < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 index 094cbff . . c8dff74 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 @ @ - 4 , 7 + 4 , 6 @ @ import java . util . ArrayList ; 
 import java . util . List ; 
 
 import im . actor . core . api . ApiCallMember ; 
 - import im . actor . core . api . ApiCallMemberStateHolder ; 
 import im . actor . core . api . rpc . RequestGetCallInfo ; 
 import im . actor . core . api . rpc . ResponseGetCallInfo ; 
 import im . actor . core . entity . Peer ; 
 @ @ - 98 , 49 + 97 , 7 @ @ public class CallSlaveActor extends AbsCallActor { 
 if ( apiCallMember . getUserId ( ) = = myUid ( ) ) { 
 continue ; 
 } 
 - ApiCallMemberStateHolder stateHolder = apiCallMember . getState ( ) ; 
 - CallMemberState state ; 
 - switch ( stateHolder . getState ( ) ) { 
 - case RINGING : 
 - state = CallMemberState . RINGING ; 
 - break ; 
 - case RINGING _ REACHED : 
 - state = CallMemberState . RINGING _ REACHED ; 
 - break ; 
 - case CONNECTING : 
 - state = CallMemberState . CONNECTING ; 
 - break ; 
 - case CONNECTED : 
 - state = CallMemberState . IN _ PROGRESS ; 
 - break ; 
 - case ENDED : 
 - state = CallMemberState . ENDED ; 
 - break ; 
 - default : 
 - if ( stateHolder . fallbackIsRingingReached ( ) ! = null & & stateHolder . fallbackIsRingingReached ( ) ) { 
 - state = CallMemberState . RINGING _ REACHED ; 
 - break ; 
 - } 
 - if ( stateHolder . fallbackIsEnded ( ) ! = null & & stateHolder . fallbackIsEnded ( ) ) { 
 - state = CallMemberState . ENDED ; 
 - break ; 
 - } 
 - if ( stateHolder . fallbackIsRinging ( ) ! = null & & stateHolder . fallbackIsRinging ( ) ) { 
 - state = CallMemberState . RINGING ; 
 - break ; 
 - } 
 - 
 - if ( stateHolder . fallbackIsConnecting ( ) ! = null & & stateHolder . fallbackIsConnecting ( ) ) { 
 - state = CallMemberState . CONNECTING ; 
 - break ; 
 - } 
 - 
 - if ( stateHolder . fallbackIsConnected ( ) ! = null & & stateHolder . fallbackIsConnected ( ) ) { 
 - state = CallMemberState . IN _ PROGRESS ; 
 - break ; 
 - } 
 - state = CallMemberState . RINGING ; 
 - } 
 + CallMemberState state = CallMemberState . from ( apiCallMember . getState ( ) ) ; 
 members . add ( new CallMember ( apiCallMember . getUserId ( ) , state ) ) ; 
 } 
 callVM . getMembers ( ) . change ( members ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerCallMasterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerCallMasterActor . java 
 index 24b17b9 . . 5f8ca74 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerCallMasterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerCallMasterActor . java 
 @ @ - 100 , 19 + 100 , 30 @ @ public class PeerCallMasterActor extends AbsCallActor { 
 } ) . done ( self ( ) ) ; 
 } 
 
 + 
 @ Override 
 public void onDeviceConnected ( int uid , long deviceId ) { 
 - if ( ! members . contains ( uid ) | | uid = = 0 ) { 
 - return ; 
 - } 
 
 - Log . d ( TAG , " onDeviceConnected : " + deviceId ) ; 
 + / * 
 + * Initial connection of device to chat . 
 + * Here we need to advertise master for any suitable member . 
 + * / 
 
 + if ( ! members . contains ( uid ) & & uid ! = 0 ) { 
 + return ; 
 + } 
 sendSwitchMaster ( uid , deviceId ) ; 
 } 
 
 @ Override 
 public void onAdvertised ( int uid , long deviceId , ApiPeerSettings settings ) { 
 + 
 + / * 
 + * Advertised Peer - create local peer and start opening connections if this node supports 
 + * connections before answering . 
 + * Additionally filter double messages . 
 + * / 
 + 
 if ( nodes . containsKey ( deviceId ) ) { 
 return ; 
 } 
 @ @ - 148 , 15 + 159 , 19 @ @ public class PeerCallMasterActor extends AbsCallActor { 
 
 @ Override 
 public void onAnswered ( int uid , long deviceId ) { 
 - super . onAnswered ( uid , deviceId ) ; 
 
 - Log . d ( TAG , " onAnswered : " + deviceId ) ; 
 + / * 
 + * Peer Answered on call . Enabling ready connections , create new if necessary . 
 + * / 
 
 - if ( ! nodes . containsKey ( deviceId ) ) { 
 + Node node = nodes . get ( deviceId ) ; 
 + if ( node = = null | | node . isAnswered ( ) ) { 
 return ; 
 } 
 + node . setIsAnswered ( true ) ; 
 + 
 + Log . d ( TAG , " onAnswered : " + deviceId ) ; 
 
 - Node node = nodes . get ( deviceId ) ; 
 if ( node . getPeerSettings ( ) . isPreConnectionEnabled ( ) & & getSelfSettings ( ) . isPreConnectionEnabled ( ) ) { 
 getPeer ( uid , deviceId ) . onAnswered ( ) ; 
 } else { 
 @ @ - 185 , 6 + 200 , 9 @ @ public class PeerCallMasterActor extends AbsCallActor { 
 } 
 } 
 
 + / / 
 + / / Updating call state 
 + / / 
 if ( ! isAnswered ) { 
 isAnswered = true ; 
 if ( isStarted ) { 
 @ @ - 192 , 26 + 210 , 25 @ @ public class PeerCallMasterActor extends AbsCallActor { 
 } else { 
 callVM . getState ( ) . change ( CallState . CONNECTING ) ; 
 } 
 + callManager . send ( new CallManagerActor . OnCallAnswered ( callId ) ) ; 
 } 
 } 
 
 @ Override 
 public void onFirstPeerStarted ( ) { 
 - super . onFirstPeerStarted ( ) ; 
 + 
 + / * 
 + * Called When first device started to send actual data 
 + * / 
 
 isStarted = true ; 
 if ( isAnswered ) { 
 callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; 
 + callManager . send ( new CallManagerActor . OnCallAnswered ( callId ) ) ; 
 } 
 } 
 
 @ Override 
 - public void onPeerConnected ( int uid , long deviceId ) { 
 - super . onPeerConnected ( uid , deviceId ) ; 
 - Log . d ( TAG , " onPeerConnected : " + deviceId ) ; 
 - } 
 - 
 - @ Override 
 public void onPeerStarted ( int uid , long deviceId ) { 
 super . onPeerStarted ( uid , deviceId ) ; 
 Log . d ( TAG , " onPeerStarted : " + deviceId ) ; 
 @ @ - 225 , 6 + 242 , 19 @ @ public class PeerCallMasterActor extends AbsCallActor { 
 @ Override 
 public void onDeviceDisconnected ( int uid , long deviceId ) { 
 
 + / * 
 + * Called when device was disconnected . Stop peer and update call state . 
 + * / 
 + 
 + Node node = nodes . remove ( deviceId ) ; 
 + if ( node = = null ) { 
 + return ; 
 + } 
 + stopPeer ( deviceId ) ; 
 + 
 + if ( node . isAnswered ( ) ) { 
 + / / If Node answered ? 
 + } 
 } 
 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 index 835e0c3 . . 005cea5 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 @ @ - 124 , 6 + 124 , 9 @ @ public class PeerCallActor extends EventBusActor { 
 if ( wasAnswered ) { 
 wasAnswered = false ; 
 sendSignaling ( uid , deviceId , new ApiAnswerCall ( ) ) ; 
 + for ( PeerNodeInt node : refs . values ( ) ) { 
 + node . onAnswered ( ) ; 
 + } 
 } 
 
 if ( wasRejected ) { 
 @ @ - 251 , 6 + 254 , 13 @ @ public class PeerCallActor extends EventBusActor { 
 refs . clear ( ) ; 
 } 
 
 + public void stopPeer ( long deviceId ) { 
 + PeerNodeInt peerNodeInt = refs . remove ( deviceId ) ; 
 + if ( peerNodeInt ! = null ) { 
 + peerNodeInt . stop ( ) ; 
 + } 
 + } 
 + 
 
 / / 
 / / Messages 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 index 5d46cb3 . . 7aad0b9 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 @ @ - 50 , 6 + 50 , 9 @ @ public class PeerNodeActor extends ModuleActor { 
 @ ActorMessage 
 public void onAnswered ( ) { 
 this . isAnswered = true ; 
 + if ( mediaStream ! = null ) { 
 + this . mediaStream . setEnabled ( ! isMuted ) ; 
 + } 
 makePeerConnectionIfNeeded ( ) ; 
 enablePeerConnectionIfNeeded ( ) ; 
 if ( isConnected ) { 
 @ @ - 61 , 7 + 64 , 7 @ @ public class PeerNodeActor extends ModuleActor { 
 public void setOwnSetStream ( WebRTCMediaStream mediaStream ) { 
 
 this . mediaStream = mediaStream ; 
 - this . mediaStream . setEnabled ( ! isMuted ) ; 
 + this . mediaStream . setEnabled ( ! isMuted & & isAnswered ) ; 
 
 makePeerConnectionIfNeeded ( ) ; 
 enablePeerConnectionIfNeeded ( ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallMemberState . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallMemberState . java 
 index f7e7c58 . . 2c73a0f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallMemberState . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallMemberState . java 
 @ @ - 1 , 5 + 1 , 42 @ @ 
 package im . actor . core . viewmodel ; 
 
 + import im . actor . core . api . ApiCallMemberState ; 
 + import im . actor . core . api . ApiCallMemberStateHolder ; 
 + 
 public enum CallMemberState { 
 - RINGING , RINGING _ REACHED , CONNECTING , IN _ PROGRESS , ENDED 
 + RINGING , RINGING _ REACHED , CONNECTING , IN _ PROGRESS , ENDED ; 
 + 
 + public static CallMemberState from ( ApiCallMemberStateHolder state ) { 
 + switch ( state . getState ( ) ) { 
 + case RINGING : 
 + return CallMemberState . RINGING ; 
 + case RINGING _ REACHED : 
 + return CallMemberState . RINGING _ REACHED ; 
 + case CONNECTING : 
 + return CallMemberState . CONNECTING ; 
 + case CONNECTED : 
 + return CallMemberState . IN _ PROGRESS ; 
 + case ENDED : 
 + return CallMemberState . ENDED ; 
 + default : 
 + if ( state . fallbackIsRingingReached ( ) ! = null & & state . fallbackIsRingingReached ( ) ) { 
 + return CallMemberState . RINGING _ REACHED ; 
 + } 
 + if ( state . fallbackIsEnded ( ) ! = null & & state . fallbackIsEnded ( ) ) { 
 + return CallMemberState . ENDED ; 
 + } 
 + if ( state . fallbackIsRinging ( ) ! = null & & state . fallbackIsRinging ( ) ) { 
 + return CallMemberState . RINGING ; 
 + } 
 + 
 + if ( state . fallbackIsConnecting ( ) ! = null & & state . fallbackIsConnecting ( ) ) { 
 + return CallMemberState . CONNECTING ; 
 + } 
 + 
 + if ( state . fallbackIsConnected ( ) ! = null & & state . fallbackIsConnected ( ) ) { 
 + return CallMemberState . IN _ PROGRESS ; 
 + } 
 + return CallMemberState . RINGING ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index 2f31b3e . . 874c053 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 30 , 6 + 30 , 7 @ @ public class CallActor extends EventBusActor { 
 
 private HashMap < Integer , HashMap < Long , ActorRef > > peerConnections = new HashMap < > ( ) ; 
 private HashMap < Long , CallVM > callModels ; 
 + private boolean isMuted = false ; 
 
 public CallActor ( ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 122 , 6 + 123 , 34 @ @ public class CallActor extends EventBusActor { 
 } 
 } 
 
 + public final void onMute ( ) { 
 + if ( isMuted ) { 
 + return ; 
 + } 
 + isMuted = true ; 
 + 
 + for ( int uid : peerConnections . keySet ( ) ) { 
 + HashMap < Long , ActorRef > peers = peerConnections . get ( uid ) ; 
 + for ( ActorRef p : peers . values ( ) ) { 
 + p . send ( new PeerConnectionActor . DoMute ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 + public final void onUnmute ( ) { 
 + if ( ! isMuted ) { 
 + return ; 
 + } 
 + isMuted = false ; 
 + 
 + for ( int uid : peerConnections . keySet ( ) ) { 
 + HashMap < Long , ActorRef > peers = peerConnections . get ( uid ) ; 
 + for ( ActorRef p : peers . values ( ) ) { 
 + p . send ( new PeerConnectionActor . DoUnmute ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 @ Override 
 public final void onMessageReceived ( @ Nullable Integer senderId , @ Nullable Long senderDeviceId , byte [ ] data ) { 
 if ( senderId = = null | | senderDeviceId = = null ) { 
 @ @ - 166 , 7 + 195 , 7 @ @ public class CallActor extends EventBusActor { 
 return refs . get ( deviceId ) ; 
 } 
 ActorRef ref = system ( ) . actorOf ( getPath ( ) + " / uid : " + uid + " / " + deviceId , 
 - PeerConnectionActor . CONSTRUCTOR ( self ( ) , uid , deviceId , context ( ) ) ) ; 
 + PeerConnectionActor . CONSTRUCTOR ( self ( ) , uid , deviceId , isMuted , context ( ) ) ) ; 
 refs . put ( deviceId , ref ) ; 
 return ref ; 
 } 
 @ @ - 197 , 6 + 226 , 10 @ @ public class CallActor extends EventBusActor { 
 } else if ( message instanceof PeerConnectionActor . OnStreamRemoved ) { 
 PeerConnectionActor . OnStreamRemoved streamRemoved = ( PeerConnectionActor . OnStreamRemoved ) message ; 
 onStreamRemoved ( streamRemoved . getUid ( ) , streamRemoved . getDeviceId ( ) , streamRemoved . getStream ( ) ) ; 
 + } else if ( message instanceof Mute ) { 
 + onMute ( ) ; 
 + } else if ( message instanceof Unmute ) { 
 + onUnmute ( ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 @ @ - 205 , 4 + 238 , 12 @ @ public class CallActor extends EventBusActor { 
 public static class DoEndCall { 
 
 } 
 + 
 + public static class Mute { 
 + 
 + } 
 + 
 + public static class Unmute { 
 + 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 index e468e40 . . cab47db 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 209 , 6 + 209 , 22 @ @ public class CallManagerActor extends ModuleActor { 
 } 
 } 
 
 + / / 
 + / / Call Mute / Unmute 
 + / / 
 + private void onCallMute ( long callId ) { 
 + ActorRef ref = runningCalls . get ( callId ) ; 
 + if ( ref ! = null ) { 
 + 
 + } 
 + } 
 + 
 + private void onCallUnmute ( long callId ) { 
 + ActorRef ref = runningCalls . get ( callId ) ; 
 + if ( ref ! = null ) { 
 + 
 + } 
 + } 
 
 / / 
 / / Ending call 
 @ @ - 365 , 6 + 381 , 34 @ @ public class CallManagerActor extends ModuleActor { 
 
 
 / / 
 + / / Call State 
 + / / 
 + 
 + public static class MuteCall { 
 + private long callId ; 
 + 
 + public MuteCall ( long callId ) { 
 + this . callId = callId ; 
 + } 
 + 
 + public long getCallId ( ) { 
 + return callId ; 
 + } 
 + } 
 + 
 + public static class UnmuteCall { 
 + private long callId ; 
 + 
 + public UnmuteCall ( long callId ) { 
 + this . callId = callId ; 
 + } 
 + 
 + public long getCallId ( ) { 
 + return callId ; 
 + } 
 + } 
 + 
 + / / 
 / / Call Start 
 / / 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 index f5a4696 . . a19ba28 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 @ @ - 56 , 6 + 56 , 14 @ @ public class CallsModule extends AbsModule { 
 } ; 
 } 
 
 + public void muteCall ( long callId ) { 
 + callManager . send ( new CallManagerActor . MuteCall ( callId ) ) ; 
 + } 
 + 
 + public void unmuteCall ( long callId ) { 
 + callManager . send ( new CallManagerActor . UnmuteCall ( callId ) ) ; 
 + } 
 + 
 public void endCall ( long callId ) { 
 callManager . send ( new CallManagerActor . EndCall ( callId ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 index d1233eb . . 774d851 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 @ @ - 33 , 11 + 33 , 12 @ @ public class PeerConnectionActor extends ModuleActor { 
 public static ActorCreator CONSTRUCTOR ( @ NotNull final ActorRef root , 
 final int uid , 
 final long deviceId , 
 + final boolean isMuted , 
 @ NotNull final ModuleContext context ) { 
 return new ActorCreator ( ) { 
 @ Override 
 public Actor create ( ) { 
 - return new PeerConnectionActor ( root , uid , deviceId , context ) ; 
 + return new PeerConnectionActor ( root , uid , deviceId , isMuted , context ) ; 
 } 
 } ; 
 } 
 @ @ - 47 , 6 + 48 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 private final ActorRef root ; 
 private final int uid ; 
 private final long deviceId ; 
 + private boolean isMuted ; 
 private boolean isReady = false ; 
 private boolean isReadyForCandidates = false ; 
 @ NotNull 
 @ @ - 56 , 9 + 58 , 10 @ @ public class PeerConnectionActor extends ModuleActor { 
 @ NotNull 
 private State state = State . INITIALIZATION ; 
 
 - public PeerConnectionActor ( @ NotNull ActorRef root , int uid , long deviceId , @ NotNull ModuleContext context ) { 
 + public PeerConnectionActor ( @ NotNull ActorRef root , int uid , long deviceId , boolean isMuted , @ NotNull ModuleContext context ) { 
 super ( context ) ; 
 TAG = " PeerConnection # " + uid + " ( " + deviceId + " ) " ; 
 + this . isMuted = isMuted ; 
 this . root = root ; 
 this . uid = uid ; 
 this . deviceId = deviceId ; 
 @ @ - 81 , 6 + 84 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 Promises . tuple ( WebRTC . createPeerConnection ( ) , WebRTC . getUserAudio ( ) ) . map ( new FunctionTupled2 < WebRTCPeerConnection , WebRTCMediaStream , WebRTCPeerConnection > ( ) { 
 @ Override 
 public WebRTCPeerConnection apply ( WebRTCPeerConnection webRTCPeerConnection , WebRTCMediaStream stream ) { 
 + stream . setEnabled ( ! isMuted ) ; 
 PeerConnectionActor . this . stream = stream ; 
 webRTCPeerConnection . addOwnStream ( stream ) ; 
 return webRTCPeerConnection ; 
 @ @ - 266 , 6 + 270 , 18 @ @ public class PeerConnectionActor extends ModuleActor { 
 peerConnection . addCandidate ( index , id , sdp ) ; 
 } 
 
 + public void onMute ( ) { 
 + if ( stream ! = null ) { 
 + stream . setEnabled ( false ) ; 
 + } 
 + } 
 + 
 + public void onUnmute ( ) { 
 + if ( stream ! = null ) { 
 + stream . setEnabled ( true ) ; 
 + } 
 + } 
 + 
 public void onEnded ( ) { 
 peerConnection . close ( ) ; 
 stream . close ( ) ; 
 @ @ - 345 , 6 + 361 , 18 @ @ public class PeerConnectionActor extends ModuleActor { 
 return ; 
 } 
 onEnded ( ) ; 
 + } else if ( message instanceof DoMute ) { 
 + if ( ! isReady ) { 
 + stash ( ) ; 
 + return ; 
 + } 
 + onMute ( ) ; 
 + } else if ( message instanceof DoUnmute ) { 
 + if ( ! isReady ) { 
 + stash ( ) ; 
 + return ; 
 + } 
 + onUnmute ( ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 @ @ - 576 , 6 + 604 , 14 @ @ public class PeerConnectionActor extends ModuleActor { 
 
 } 
 
 + public static class DoMute { 
 + 
 + } 
 + 
 + public static class DoUnmute { 
 + 
 + } 
 + 
 private enum State { 
 INITIALIZATION , WAITING _ HANDSHAKE , WAITING _ ANSWER , READY , CLOSED 
 }
