BLEU SCORE: 0.2509862124397896

TEST MSG: fix ( server : email ) : activation timeout
GENERATED MSG: fix ( server ) : email html template

TEST DIFF (one line): diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > index ddbd6ce . . a29c7ea 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > @ @ - 5 , 6 + 5 , 7 @ @ import java . time . { LocalDateTime , ZoneOffset } < nl > < nl > import akka . actor . _ < nl > import akka . pattern . ask < nl > + import akka . pattern . pipe < nl > import akka . stream . Materializer < nl > import akka . util . Timeout < nl > import im . actor . server . activation . Activation . { CallCode , Code , EmailCode , SmsCode } < nl > @ @ - 112 , 8 + 113 , 7 @ @ class Activation ( repeatLimit : Duration , smsEngine : AuthSmsEngine , callEngine : Au < nl > < nl > override def receive : Receive = { < nl > case Send ( code ) ⇒ < nl > - val replyTo = sender ( ) < nl > - sendCode ( code ) foreach { resp ⇒ replyTo ! SendAck ( resp ) } < nl > + ( sendCode ( code ) map SendAck ) pipeTo sender ( ) < nl > case ForgetSentCode ( code ) ⇒ forgetSentCode ( code ) < nl > } < nl > < nl > @ @ - 131 , 7 + 131 , 10 @ @ class Activation ( repeatLimit : Duration , smsEngine : AuthSmsEngine , callEngine : Au < nl > } ) map { _ ⇒ < nl > forgetSentCodeAfterDelay ( code ) < nl > \ / - ( ( ) ) < nl > - } recover { case e ⇒ - \ / ( SendFailure ( " Unable to send code " ) ) } < nl > + } recover { case e ⇒ < nl > + log . error ( e , " Failed to send code : { } " , code ) < nl > + - \ / ( SendFailure ( " Unable to send code " ) ) < nl > + } < nl > } else { < nl > log . debug ( s " Ignoring send $ code " ) < nl > Future . successful ( - \ / ( BadRequest ( " Try to request code later " ) ) ) < nl > diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > index 8c18852 . . 6002d1e 100644 < nl > - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . server . email < nl > < nl > + import im . actor . config . ActorConfig < nl > import org . apache . commons . mail . { DefaultAuthenticator , HtmlEmail } < nl > < nl > import scala . concurrent . { ExecutionContext , Future } < nl > @ @ - 30 , 8 + 31 , 11 @ @ final class DummyEmailSender extends EmailSender { < nl > } < nl > < nl > final class SmtpEmailSender ( config : EmailConfig ) ( implicit ec : ExecutionContext ) extends EmailSender { < nl > + val timeout = ( ActorConfig . defaultTimeout . toMillis / 2 ) . toInt < nl > override def send ( message : Message ) = Future { < nl > val email = new HtmlEmail ( ) < nl > + email . setSocketTimeout ( timeout ) < nl > + email . setSocketConnectionTimeout ( timeout ) < nl > email . setCharset ( " UTF - 8 " ) < nl > email . setHostName ( config . host ) < nl > email . setSmtpPort ( config . port )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala < nl > index 981021a . . 843d92b 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala < nl > @ @ - 264 , 7 + 264 , 7 @ @ object EmailTemplate { < nl > | < / td > < nl > | < / tr > < nl > | < / table > < nl > - | / < body > < nl > + | < / body > < nl > | < / html > < nl > " " " . stripMargin < nl > < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > index 7d92507 . . a95683b 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > @ @ - 9 , 7 + 9 , 7 @ @ import akka . stream . Materializer < nl > import akka . util . Timeout < nl > import im . actor . server . activation . Activation . { CallCode , Code , EmailCode , SmsCode } < nl > import im . actor . server . activation . _ < nl > - import im . actor . server . email . { EmailSender , Message } < nl > + import im . actor . server . email . { Content , EmailSender , Message } < nl > import im . actor . server . models . AuthCode < nl > import im . actor . server . persist < nl > import im . actor . server . sms . { AuthCallEngine , AuthSmsEngine } < nl > @ @ - 122 , 7 + 122 , 7 @ @ class Activation ( repeatLimit : Duration , smsEngine : AuthSmsEngine , callEngine : Au < nl > case SmsCode ( phone , c ) ⇒ smsEngine . sendCode ( phone , c ) < nl > case CallCode ( phone , c , language ) ⇒ callEngine . sendCode ( phone , c , language ) < nl > case EmailCode ( email , c ) ⇒ < nl > - emailSender . send ( Message ( email , " Actor activation code " , emailTemplate . replace ( " $ $ CODE $ $ " , c ) ) ) < nl > + emailSender . send ( Message ( email , s " Actor activation code : $ c " , Content ( Some ( emailTemplate . replace ( " $ $ CODE $ $ " , c ) ) , Some ( s " Your actor activation code : $ c " ) ) ) ) < nl > } ) map { _ ⇒ < nl > forgetSentCodeAfterDelay ( code ) < nl > \ / - ( ( ) ) < nl > diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > index 3f6580c . . 5fda915 100644 < nl > - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > @ @ - 1 , 22 + 1 , 31 @ @ < nl > package im . actor . server . email < nl > < nl > + import org . apache . commons . mail . { DefaultAuthenticator , HtmlEmail } < nl > + < nl > import scala . concurrent . { ExecutionContext , Future } < nl > < nl > - import org . apache . commons . mail . { EmailConstants , DefaultAuthenticator , SimpleEmail } < nl > + / * * < nl > + * describes content of email . One of content entries should be present . If both are present - both will be set < nl > + * @ param html email html content . Should be present if you want to send message with html < nl > + * @ param text plain text content < nl > + * / < nl > + case class Content ( html : Option [ String ] , text : Option [ String ] ) { < nl > + require ( html . isDefined | | text . isDefined ) < nl > + } < nl > < nl > - case class Message ( to : String , subject : String , content : String ) < nl > + case class Message ( to : String , subject : String , content : Content ) < nl > < nl > class EmailSender ( config : EmailConfig ) { < nl > def send ( message : Message ) ( implicit ec : ExecutionContext ) = Future { < nl > - val email = new SimpleEmail ( ) < nl > + val email = new HtmlEmail ( ) < nl > email . setHostName ( config . host ) < nl > email . setSmtpPort ( config . port ) < nl > email . setAuthenticator ( new DefaultAuthenticator ( config . username , config . password ) ) < nl > email . setStartTLSEnabled ( config . tls ) < nl > - < nl > - email . setFrom ( config . address ) < nl > + email . setFrom ( config . address , config . name ) < nl > email . setSubject ( message . subject ) < nl > - email . setContent ( message . content , EmailConstants . TEXT _ PLAIN ) < nl > + message . content . html foreach { email . setHtmlMsg } < nl > + message . content . text foreach { email . setTextMsg } < nl > email . addTo ( message . to ) < nl > email . send ( ) < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 index ddbd6ce . . a29c7ea 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . time . { LocalDateTime , ZoneOffset } 
 
 import akka . actor . _ 
 import akka . pattern . ask 
 + import akka . pattern . pipe 
 import akka . stream . Materializer 
 import akka . util . Timeout 
 import im . actor . server . activation . Activation . { CallCode , Code , EmailCode , SmsCode } 
 @ @ - 112 , 8 + 113 , 7 @ @ class Activation ( repeatLimit : Duration , smsEngine : AuthSmsEngine , callEngine : Au 
 
 override def receive : Receive = { 
 case Send ( code ) ⇒ 
 - val replyTo = sender ( ) 
 - sendCode ( code ) foreach { resp ⇒ replyTo ! SendAck ( resp ) } 
 + ( sendCode ( code ) map SendAck ) pipeTo sender ( ) 
 case ForgetSentCode ( code ) ⇒ forgetSentCode ( code ) 
 } 
 
 @ @ - 131 , 7 + 131 , 10 @ @ class Activation ( repeatLimit : Duration , smsEngine : AuthSmsEngine , callEngine : Au 
 } ) map { _ ⇒ 
 forgetSentCodeAfterDelay ( code ) 
 \ / - ( ( ) ) 
 - } recover { case e ⇒ - \ / ( SendFailure ( " Unable to send code " ) ) } 
 + } recover { case e ⇒ 
 + log . error ( e , " Failed to send code : { } " , code ) 
 + - \ / ( SendFailure ( " Unable to send code " ) ) 
 + } 
 } else { 
 log . debug ( s " Ignoring send $ code " ) 
 Future . successful ( - \ / ( BadRequest ( " Try to request code later " ) ) ) 
 diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 index 8c18852 . . 6002d1e 100644 
 - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . server . email 
 
 + import im . actor . config . ActorConfig 
 import org . apache . commons . mail . { DefaultAuthenticator , HtmlEmail } 
 
 import scala . concurrent . { ExecutionContext , Future } 
 @ @ - 30 , 8 + 31 , 11 @ @ final class DummyEmailSender extends EmailSender { 
 } 
 
 final class SmtpEmailSender ( config : EmailConfig ) ( implicit ec : ExecutionContext ) extends EmailSender { 
 + val timeout = ( ActorConfig . defaultTimeout . toMillis / 2 ) . toInt 
 override def send ( message : Message ) = Future { 
 val email = new HtmlEmail ( ) 
 + email . setSocketTimeout ( timeout ) 
 + email . setSocketConnectionTimeout ( timeout ) 
 email . setCharset ( " UTF - 8 " ) 
 email . setHostName ( config . host ) 
 email . setSmtpPort ( config . port )

NEAREST DIFF:
diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala 
 index 981021a . . 843d92b 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala 
 @ @ - 264 , 7 + 264 , 7 @ @ object EmailTemplate { 
 | < / td > 
 | < / tr > 
 | < / table > 
 - | / < body > 
 + | < / body > 
 | < / html > 
 " " " . stripMargin 
 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 index 7d92507 . . a95683b 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 @ @ - 9 , 7 + 9 , 7 @ @ import akka . stream . Materializer 
 import akka . util . Timeout 
 import im . actor . server . activation . Activation . { CallCode , Code , EmailCode , SmsCode } 
 import im . actor . server . activation . _ 
 - import im . actor . server . email . { EmailSender , Message } 
 + import im . actor . server . email . { Content , EmailSender , Message } 
 import im . actor . server . models . AuthCode 
 import im . actor . server . persist 
 import im . actor . server . sms . { AuthCallEngine , AuthSmsEngine } 
 @ @ - 122 , 7 + 122 , 7 @ @ class Activation ( repeatLimit : Duration , smsEngine : AuthSmsEngine , callEngine : Au 
 case SmsCode ( phone , c ) ⇒ smsEngine . sendCode ( phone , c ) 
 case CallCode ( phone , c , language ) ⇒ callEngine . sendCode ( phone , c , language ) 
 case EmailCode ( email , c ) ⇒ 
 - emailSender . send ( Message ( email , " Actor activation code " , emailTemplate . replace ( " $ $ CODE $ $ " , c ) ) ) 
 + emailSender . send ( Message ( email , s " Actor activation code : $ c " , Content ( Some ( emailTemplate . replace ( " $ $ CODE $ $ " , c ) ) , Some ( s " Your actor activation code : $ c " ) ) ) ) 
 } ) map { _ ⇒ 
 forgetSentCodeAfterDelay ( code ) 
 \ / - ( ( ) ) 
 diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 index 3f6580c . . 5fda915 100644 
 - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 @ @ - 1 , 22 + 1 , 31 @ @ 
 package im . actor . server . email 
 
 + import org . apache . commons . mail . { DefaultAuthenticator , HtmlEmail } 
 + 
 import scala . concurrent . { ExecutionContext , Future } 
 
 - import org . apache . commons . mail . { EmailConstants , DefaultAuthenticator , SimpleEmail } 
 + / * * 
 + * describes content of email . One of content entries should be present . If both are present - both will be set 
 + * @ param html email html content . Should be present if you want to send message with html 
 + * @ param text plain text content 
 + * / 
 + case class Content ( html : Option [ String ] , text : Option [ String ] ) { 
 + require ( html . isDefined | | text . isDefined ) 
 + } 
 
 - case class Message ( to : String , subject : String , content : String ) 
 + case class Message ( to : String , subject : String , content : Content ) 
 
 class EmailSender ( config : EmailConfig ) { 
 def send ( message : Message ) ( implicit ec : ExecutionContext ) = Future { 
 - val email = new SimpleEmail ( ) 
 + val email = new HtmlEmail ( ) 
 email . setHostName ( config . host ) 
 email . setSmtpPort ( config . port ) 
 email . setAuthenticator ( new DefaultAuthenticator ( config . username , config . password ) ) 
 email . setStartTLSEnabled ( config . tls ) 
 - 
 - email . setFrom ( config . address ) 
 + email . setFrom ( config . address , config . name ) 
 email . setSubject ( message . subject ) 
 - email . setContent ( message . content , EmailConstants . TEXT _ PLAIN ) 
 + message . content . html foreach { email . setHtmlMsg } 
 + message . content . text foreach { email . setTextMsg } 
 email . addTo ( message . to ) 
 email . send ( ) 
 }
