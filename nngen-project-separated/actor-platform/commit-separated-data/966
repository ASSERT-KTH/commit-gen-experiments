BLEU SCORE: 0.23462350320528

TEST MSG: feat ( core ) : Disable encrypted messages send / receive
GENERATED MSG: fix ( core ) : Fixing compilation errors

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java < nl > index 0c54c39 . . 3c5f66a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java < nl > @ @ - 1 , 7 + 1 , 5 @ @ < nl > package im . actor . core . modules . encryption ; < nl > < nl > - import com . google . j2objc . annotations . ObjectiveCName ; < nl > - < nl > import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > @ @ - 28 , 8 + 26 , 6 @ @ import im . actor . core . modules . encryption . entity . UserKeysGroup ; < nl > import im . actor . core . modules . encryption . entity . PublicKey ; < nl > import im . actor . core . util . ModuleActor ; < nl > import im . actor . core . util . RandomUtils ; < nl > - import im . actor . core . network . RpcCallback ; < nl > - import im . actor . core . network . RpcException ; < nl > import im . actor . runtime . Crypto ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . Storage ; < nl > @ @ - 38 , 7 + 34 , 6 @ @ import im . actor . runtime . actors . ask . AskMessage ; < nl > import im . actor . runtime . actors . ask . AskResult ; < nl > import im . actor . runtime . collections . ManagedList ; < nl > import im . actor . runtime . function . Function ; < nl > - import im . actor . runtime . function . Predicate ; < nl > import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . promise . PromiseResolver ; < nl > import im . actor . runtime . crypto . Curve25519 ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > index 740ccbe . . 4f9f421 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > @ @ - 420 , 23 + 420 , 7 @ @ public class SenderActor extends ModuleActor { < nl > return ; < nl > } < nl > < nl > - if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > - ask ( context ( ) . getEncryption ( ) . getMessageEncryptor ( ) , new EncryptedMsgActor . EncryptMessage ( peer . getPeerId ( ) , < nl > - message ) , new AskCallback ( ) { < nl > - @ Override < nl > - public void onResult ( Object obj ) { < nl > - EncryptedMsgActor . EncryptedMessage encryptedMessage = ( EncryptedMsgActor . EncryptedMessage ) obj ; < nl > - performSendApiContent ( peer , rid , encryptedMessage . getEncryptedMessage ( ) ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( Exception e ) { < nl > - / / Do nothing < nl > - } < nl > - } ) ; < nl > - } else { < nl > - performSendApiContent ( peer , rid , message ) ; < nl > - } < nl > + performSendApiContent ( peer , rid , message ) ; < nl > } < nl > < nl > private void performSendApiContent ( final Peer peer , final long rid , ApiMessage message ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > index 43dff51 . . ddf6205 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java < nl > @ @ - 57 , 13 + 57 , 6 @ @ public class MessagesProcessor extends AbsModule { < nl > ArrayList < Message > nMessages = new ArrayList < Message > ( ) ; < nl > for ( UpdateMessage u : messages ) { < nl > < nl > - if ( u . getMessage ( ) instanceof ApiEncryptedMessage ) { < nl > - / / TODO : Proper decrypt message < nl > - context ( ) . getEncryption ( ) . getMessageEncryptor ( ) . send ( new EncryptedMsgActor . InMessage ( peer , < nl > - u . getDate ( ) , u . getSenderUid ( ) , u . getRid ( ) , ( ApiEncryptedMessage ) u . getMessage ( ) ) ) ; < nl > - continue ; < nl > - } < nl > - < nl > AbsContent msgContent ; < nl > try { < nl > msgContent = AbsContent . fromMessage ( u . getMessage ( ) ) ; < nl > @ @ - 111 , 12 + 104 , 6 @ @ public class MessagesProcessor extends AbsModule { < nl > < nl > Peer peer = convert ( _ peer ) ; < nl > < nl > - if ( content instanceof ApiEncryptedMessage ) { < nl > - / / TODO : Proper decrypt message < nl > - context ( ) . getEncryption ( ) . getMessageEncryptor ( ) . send ( new EncryptedMsgActor . InMessage ( peer , < nl > - date , senderUid , rid , ( ApiEncryptedMessage ) content ) ) ; < nl > - } < nl > - < nl > AbsContent msgContent ; < nl > try { < nl > msgContent = AbsContent . fromMessage ( content ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java < nl > index 7d7bbe9 . . c144d79 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java < nl > @ @ - 45 , 7 + 45 , 6 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { < nl > @ Property ( " readonly , nonatomic " ) < nl > private int creatorId ; < nl > @ Property ( " readonly , nonatomic " ) < nl > - private boolean isMember ; < nl > private boolean isHidden ; < nl > @ Nullable < nl > @ Property ( " readonly , nonatomic " ) < nl > @ @ - 111 , 39 + 110 , 10 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { < nl > return creatorId ; < nl > } < nl > < nl > - public boolean isMember ( ) { < nl > - return isMember ; < nl > - } < nl > - < nl > public boolean isHidden ( ) { < nl > return isHidden ; < nl > } < nl > < nl > - public Group changeMember ( boolean isMember ) { < nl > - ApiGroup w = getWrapped ( ) ; < nl > - ApiGroup res = new ApiGroup ( < nl > - w . getId ( ) , < nl > - w . getAccessHash ( ) , < nl > - w . getTitle ( ) , < nl > - w . getAvatar ( ) , < nl > - isMember , < nl > - w . getCreatorUid ( ) , < nl > - w . getMembers ( ) , < nl > - w . getCreateDate ( ) , < nl > - w . disableEdit ( ) , < nl > - w . disableInviteView ( ) , < nl > - w . disableInviteRevoke ( ) , < nl > - w . disableIntegrationView ( ) , < nl > - w . disableIntegrationsRevoke ( ) , < nl > - w . isAdmin ( ) , < nl > - w . getTheme ( ) , < nl > - w . getAbout ( ) , < nl > - w . isHidden ( ) , < nl > - w . getExtensions ( ) ) ; < nl > - res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > - return new Group ( res ) ; < nl > - } < nl > - < nl > public Group clearMembers ( ) { < nl > ApiGroup w = getWrapped ( ) ; < nl > ApiGroup res = new ApiGroup ( < nl > @ @ - 151 , 20 + 121 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { < nl > w . getAccessHash ( ) , < nl > w . getTitle ( ) , < nl > w . getAvatar ( ) , < nl > - w . isMember ( ) , < nl > w . getCreatorUid ( ) , < nl > new ArrayList < ApiMember > ( ) , < nl > w . getCreateDate ( ) , < nl > - w . disableEdit ( ) , < nl > - w . disableInviteView ( ) , < nl > - w . disableInviteRevoke ( ) , < nl > - w . disableIntegrationView ( ) , < nl > - w . disableIntegrationsRevoke ( ) , < nl > - w . isAdmin ( ) , < nl > w . getTheme ( ) , < nl > w . getAbout ( ) , < nl > w . isHidden ( ) , < nl > - w . getExtensions ( ) ) ; < nl > + w . getGroupType ( ) , < nl > + w . getExt ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new Group ( res ) ; < nl > } < nl > @ @ - 182 , 20 + 146 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { < nl > w . getAccessHash ( ) , < nl > w . getTitle ( ) , < nl > w . getAvatar ( ) , < nl > - w . isMember ( ) , < nl > w . getCreatorUid ( ) , < nl > nMembers , < nl > w . getCreateDate ( ) , < nl > - w . disableEdit ( ) , < nl > - w . disableInviteView ( ) , < nl > - w . disableInviteRevoke ( ) , < nl > - w . disableIntegrationView ( ) , < nl > - w . disableIntegrationsRevoke ( ) , < nl > - w . isAdmin ( ) , < nl > w . getTheme ( ) , < nl > w . getAbout ( ) , < nl > w . isHidden ( ) , < nl > - w . getExtensions ( ) ) ; < nl > + w . getGroupType ( ) , < nl > + w . getExt ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new Group ( res ) ; < nl > } < nl > @ @ - 214 , 20 + 172 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { < nl > w . getAccessHash ( ) , < nl > w . getTitle ( ) , < nl > w . getAvatar ( ) , < nl > - w . isMember ( ) , < nl > w . getCreatorUid ( ) , < nl > nMembers , < nl > w . getCreateDate ( ) , < nl > - w . disableEdit ( ) , < nl > - w . disableInviteView ( ) , < nl > - w . disableInviteRevoke ( ) , < nl > - w . disableIntegrationView ( ) , < nl > - w . disableIntegrationsRevoke ( ) , < nl > - w . isAdmin ( ) , < nl > w . getTheme ( ) , < nl > w . getAbout ( ) , < nl > w . isHidden ( ) , < nl > - w . getExtensions ( ) ) ; < nl > + w . getGroupType ( ) , < nl > + w . getExt ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new Group ( res ) ; < nl > } < nl > @ @ - 239 , 20 + 191 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { < nl > w . getAccessHash ( ) , < nl > w . getTitle ( ) , < nl > w . getAvatar ( ) , < nl > - w . isMember ( ) , < nl > w . getCreatorUid ( ) , < nl > nMembers , < nl > w . getCreateDate ( ) , < nl > - w . disableEdit ( ) , < nl > - w . disableInviteView ( ) , < nl > - w . disableInviteRevoke ( ) , < nl > - w . disableIntegrationView ( ) , < nl > - w . disableIntegrationsRevoke ( ) , < nl > - w . isAdmin ( ) , < nl > w . getTheme ( ) , < nl > w . getAbout ( ) , < nl > w . isHidden ( ) , < nl > - w . getExtensions ( ) ) ; < nl > + w . getGroupType ( ) , < nl > + w . getExt ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new Group ( res ) ; < nl > } < nl > @ @ - 264 , 20 + 210 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { < nl > w . getAccessHash ( ) , < nl > title , < nl > w . getAvatar ( ) , < nl > - w . isMember ( ) , < nl > w . getCreatorUid ( ) , < nl > w . getMembers ( ) , < nl > w . getCreateDate ( ) , < nl > - w . disableEdit ( ) , < nl > - w . disableInviteView ( ) , < nl > - w . disableInviteRevoke ( ) , < nl > - w . disableIntegrationView ( ) , < nl > - w . disableIntegrationsRevoke ( ) , < nl > - w . isAdmin ( ) , < nl > w . getTheme ( ) , < nl > w . getAbout ( ) , < nl > w . isHidden ( ) , < nl > - w . getExtensions ( ) ) ; < nl > + w . getGroupType ( ) , < nl > + w . getExt ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new Group ( res ) ; < nl > } < nl > @ @ - 289 , 20 + 229 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { < nl > w . getAccessHash ( ) , < nl > w . getTitle ( ) , < nl > w . getAvatar ( ) , < nl > - w . isMember ( ) , < nl > w . getCreatorUid ( ) , < nl > w . getMembers ( ) , < nl > w . getCreateDate ( ) , < nl > - w . disableEdit ( ) , < nl > - w . disableInviteView ( ) , < nl > - w . disableInviteRevoke ( ) , < nl > - w . disableIntegrationView ( ) , < nl > - w . disableIntegrationsRevoke ( ) , < nl > - w . isAdmin ( ) , < nl > theme , < nl > w . getAbout ( ) , < nl > w . isHidden ( ) , < nl > - w . getExtensions ( ) ) ; < nl > + w . getGroupType ( ) , < nl > + w . getExt ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new Group ( res ) ; < nl > } < nl > @ @ - 314 , 20 + 248 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { < nl > w . getAccessHash ( ) , < nl > w . getTitle ( ) , < nl > w . getAvatar ( ) , < nl > - w . isMember ( ) , < nl > w . getCreatorUid ( ) , < nl > w . getMembers ( ) , < nl > w . getCreateDate ( ) , < nl > - w . disableEdit ( ) , < nl > - w . disableInviteView ( ) , < nl > - w . disableInviteRevoke ( ) , < nl > - w . disableIntegrationView ( ) , < nl > - w . disableIntegrationsRevoke ( ) , < nl > - w . isAdmin ( ) , < nl > w . getTheme ( ) , < nl > about , < nl > w . isHidden ( ) , < nl > - w . getExtensions ( ) ) ; < nl > + w . getGroupType ( ) , < nl > + w . getExt ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new Group ( res ) ; < nl > } < nl > @ @ - 339 , 20 + 267 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { < nl > w . getAccessHash ( ) , < nl > w . getTitle ( ) , < nl > avatar , < nl > - w . isMember ( ) , < nl > w . getCreatorUid ( ) , < nl > w . getMembers ( ) , < nl > w . getCreateDate ( ) , < nl > - w . disableEdit ( ) , < nl > - w . disableInviteView ( ) , < nl > - w . disableInviteRevoke ( ) , < nl > - w . disableIntegrationView ( ) , < nl > - w . disableIntegrationsRevoke ( ) , < nl > - w . isAdmin ( ) , < nl > w . getTheme ( ) , < nl > w . getAbout ( ) , < nl > w . isHidden ( ) , < nl > - w . getExtensions ( ) ) ; < nl > + w . getGroupType ( ) , < nl > + w . getExt ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new Group ( res ) ; < nl > } < nl > @ @ - 368 , 7 + 290 , 6 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { < nl > for ( ApiMember m : wrapped . getMembers ( ) ) { < nl > this . members . add ( new GroupMember ( m . getUid ( ) , m . getInviterUid ( ) , m . getDate ( ) , m . isAdmin ( ) ! = null ? m . isAdmin ( ) : m . getUid ( ) = = this . creatorId ) ) ; < nl > } < nl > - this . isMember = wrapped . isMember ( ) ; < nl > this . isHidden = wrapped . isHidden ( ) ! = null ? wrapped . isHidden ( ) : false ; < nl > this . about = wrapped . getAbout ( ) ; < nl > this . theme = wrapped . getTheme ( ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / GroupsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / GroupsModule . java < nl > index b0bf2cc . . 40f0eb3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / GroupsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / GroupsModule . java < nl > @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . core . api . ApiServiceMessage ; < nl > import im . actor . core . api . ApiUser ; < nl > import im . actor . core . api . ApiUserOutPeer ; < nl > import im . actor . core . api . rpc . RequestCreateGroup ; < nl > + import im . actor . core . api . rpc . RequestCreateGroupObsolete ; < nl > import im . actor . core . api . rpc . RequestEditGroupAbout ; < nl > import im . actor . core . api . rpc . RequestEditGroupTitle ; < nl > import im . actor . core . api . rpc . RequestEditGroupTopic ; < nl > @ @ - 36 , 6 + 37 , 7 @ @ import im . actor . core . api . rpc . RequestMakeUserAdmin ; < nl > import im . actor . core . api . rpc . RequestRevokeIntegrationToken ; < nl > import im . actor . core . api . rpc . RequestRevokeInviteUrl ; < nl > import im . actor . core . api . rpc . ResponseCreateGroup ; < nl > + import im . actor . core . api . rpc . ResponseCreateGroupObsolete ; < nl > import im . actor . core . api . rpc . ResponseEnterGroup ; < nl > import im . actor . core . api . rpc . ResponseGetPublicGroups ; < nl > import im . actor . core . api . rpc . ResponseIntegrationToken ; < nl > @ @ - 135 , 9 + 137 , 9 @ @ public class GroupsModule extends AbsModule { < nl > } < nl > } < nl > final long rid = RandomUtils . nextRid ( ) ; < nl > - request ( new RequestCreateGroup ( rid , title , peers ) , new RpcCallback < ResponseCreateGroup > ( ) { < nl > + request ( new RequestCreateGroupObsolete ( rid , title , peers ) , new RpcCallback < ResponseCreateGroupObsolete > ( ) { < nl > @ Override < nl > - public void onResult ( ResponseCreateGroup response ) { < nl > + public void onResult ( ResponseCreateGroupObsolete response ) { < nl > List < ApiMember > members = new ArrayList < ApiMember > ( ) ; < nl > for ( int u : response . getUsers ( ) ) { < nl > members . add ( new ApiMember ( u , myUid ( ) , response . getDate ( ) , u = = myUid ( ) ) ) ; < nl > @ @ - 145 , 10 + 147 , 9 @ @ public class GroupsModule extends AbsModule { < nl > final ApiGroup group = new ApiGroup ( < nl > response . getGroupPeer ( ) . getGroupId ( ) , < nl > response . getGroupPeer ( ) . getAccessHash ( ) , < nl > - title , null , true , myUid ( ) , members , < nl > + title , null , myUid ( ) , members , < nl > response . getDate ( ) , null , < nl > - null , null , null , null , true , null , null , null , < nl > - new ArrayList < ApiExtension > ( ) ) ; < nl > + null , false , null , null ) ; < nl > ArrayList < ApiGroup > groups = new ArrayList < ApiGroup > ( ) ; < nl > groups . add ( group ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > index f8708f4 . . 4e66efc 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > @ @ - 31 , 6 + 31 , 7 @ @ import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . MessageState ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > + import im . actor . core . entity . Reaction ; < nl > import im . actor . core . entity . User ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . entity . content . DocumentContent ; < nl > @ @ - 150 , 7 + 151 , 8 @ @ public class SenderActor extends ModuleActor { < nl > < nl > TextContent content = TextContent . create ( text , markDownText , mentions ) ; < nl > < nl > - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content ) ; < nl > + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content , < nl > + new ArrayList < Reaction > ( ) ) ; < nl > context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( message ) ; < nl > < nl > pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , content ) ) ; < nl > @ @ - 169 , 7 + 171 , 8 @ @ public class SenderActor extends ModuleActor { < nl > DocumentContent documentContent = DocumentContent . createLocal ( fileName , fileSize , < nl > descriptor , mimeType , fastThumb ) ; < nl > < nl > - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , documentContent ) ; < nl > + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , documentContent , < nl > + new ArrayList < Reaction > ( ) ) ; < nl > context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( message ) ; < nl > < nl > pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , documentContent ) ) ; < nl > @ @ - 185 , 7 + 188 , 8 @ @ public class SenderActor extends ModuleActor { < nl > long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; < nl > PhotoContent photoContent = PhotoContent . createLocalPhoto ( descriptor , fileName , fileSize , w , h , fastThumb ) ; < nl > < nl > - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , photoContent ) ; < nl > + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , photoContent , < nl > + new ArrayList < Reaction > ( ) ) ; < nl > context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( message ) ; < nl > < nl > pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , photoContent ) ) ; < nl > @ @ - 202 , 7 + 206 , 8 @ @ public class SenderActor extends ModuleActor { < nl > VideoContent videoContent = VideoContent . createLocalVideo ( descriptor , < nl > fileName , fileSize , w , h , duration , fastThumb ) ; < nl > < nl > - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , videoContent ) ; < nl > + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , videoContent , < nl > + new ArrayList < Reaction > ( ) ) ; < nl > context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( message ) ; < nl > < nl > pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , videoContent ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java < nl > index 4bc95f0 . . 2270b36 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java < nl > @ @ - 17 , 6 + 17 , 7 @ @ import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . MessageState ; < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . Reaction ; < nl > import im . actor . core . entity . content . ServiceGroupAvatarChanged ; < nl > import im . actor . core . entity . content . ServiceGroupCreated ; < nl > import im . actor . core . entity . content . ServiceGroupTitleChanged ; < nl > @ @ - 69 , 19 + 70 , 20 @ @ public class GroupsProcessor extends AbsModule { < nl > < nl > / / Updating group < nl > groups ( ) . addOrUpdateItem ( group < nl > - . changeMember ( true ) < nl > . addMember ( myUid ( ) , inviterId , date ) ) ; < nl > < nl > if ( ! isSilent ) { < nl > if ( inviterId = = myUid ( ) ) { < nl > / / If current user invite himself , add create group message < nl > Message message = new Message ( rid , date , date , inviterId , < nl > - MessageState . UNKNOWN , ServiceGroupCreated . create ( ) ) ; < nl > + MessageState . UNKNOWN , ServiceGroupCreated . create ( ) , < nl > + new ArrayList < Reaction > ( ) ) ; < nl > conversationActor ( group . peer ( ) ) . send ( message ) ; < nl > } else { < nl > / / else add invite message < nl > Message message = new Message ( rid , date , date , inviterId , < nl > - MessageState . SENT , ServiceGroupUserInvited . create ( myUid ( ) ) ) ; < nl > + MessageState . SENT , ServiceGroupUserInvited . create ( myUid ( ) ) , < nl > + new ArrayList < Reaction > ( ) ) ; < nl > conversationActor ( group . peer ( ) ) . send ( message ) ; < nl > } < nl > } < nl > @ @ - 96 , 8 + 98 , 7 @ @ public class GroupsProcessor extends AbsModule { < nl > if ( uid = = myUid ( ) ) { < nl > / / If current user leave , clear members and change member state < nl > groups ( ) . addOrUpdateItem ( group < nl > - . clearMembers ( ) < nl > - . changeMember ( false ) ) ; < nl > + . clearMembers ( ) ) ; < nl > } else { < nl > / / else remove leaved user < nl > groups ( ) . addOrUpdateItem ( group < nl > @ @ - 108 , 7 + 109 , 8 @ @ public class GroupsProcessor extends AbsModule { < nl > if ( ! isSilent ) { < nl > Message message = new Message ( rid , date , date , uid , < nl > uid = = myUid ( ) ? MessageState . SENT : MessageState . UNKNOWN , < nl > - ServiceGroupUserLeave . create ( ) ) ; < nl > + ServiceGroupUserLeave . create ( ) , < nl > + new ArrayList < Reaction > ( ) ) ; < nl > conversationActor ( group . peer ( ) ) . send ( message ) ; < nl > } < nl > } < nl > @ @ - 122 , 8 + 124 , 7 @ @ public class GroupsProcessor extends AbsModule { < nl > if ( uid = = myUid ( ) ) { < nl > / / If kicked me , clear members and change member state < nl > groups ( ) . addOrUpdateItem ( group < nl > - . clearMembers ( ) < nl > - . changeMember ( false ) ) ; < nl > + . clearMembers ( ) ) ; < nl > } else { < nl > / / else remove kicked user < nl > groups ( ) . addOrUpdateItem ( group < nl > @ @ - 134 , 7 + 135 , 8 @ @ public class GroupsProcessor extends AbsModule { < nl > if ( ! isSilent ) { < nl > Message message = new Message ( rid , date , date , kicker , < nl > kicker = = myUid ( ) ? MessageState . SENT : MessageState . UNKNOWN , < nl > - ServiceGroupUserKicked . create ( uid ) ) ; < nl > + ServiceGroupUserKicked . create ( uid ) , < nl > + new ArrayList < Reaction > ( ) ) ; < nl > conversationActor ( group . peer ( ) ) . send ( message ) ; < nl > } < nl > } < nl > @ @ - 152 , 7 + 154 , 8 @ @ public class GroupsProcessor extends AbsModule { < nl > if ( ! isSilent ) { < nl > Message message = new Message ( rid , date , date , adder , < nl > adder = = myUid ( ) ? MessageState . SENT : MessageState . UNKNOWN , < nl > - ServiceGroupUserInvited . create ( uid ) ) ; < nl > + ServiceGroupUserInvited . create ( uid ) , < nl > + new ArrayList < Reaction > ( ) ) ; < nl > conversationActor ( group . peer ( ) ) . send ( message ) ; < nl > } < nl > } < nl > @ @ - 183 , 7 + 186 , 8 @ @ public class GroupsProcessor extends AbsModule { < nl > if ( ! isSilent ) { < nl > Message message = new Message ( rid , date , date , uid , < nl > uid = = myUid ( ) ? MessageState . SENT : MessageState . UNKNOWN , < nl > - ServiceGroupTitleChanged . create ( title ) ) ; < nl > + ServiceGroupTitleChanged . create ( title ) , < nl > + new ArrayList < Reaction > ( ) ) ; < nl > conversationActor ( group . peer ( ) ) . send ( message ) ; < nl > } < nl > } < nl > @ @ - 266 , 7 + 270 , 8 @ @ public class GroupsProcessor extends AbsModule { < nl > if ( ! isSilent ) { < nl > Message message = new Message ( rid , date , date , uid , < nl > uid = = myUid ( ) ? MessageState . SENT : MessageState . UNKNOWN , < nl > - ServiceGroupAvatarChanged . create ( avatar ) ) ; < nl > + ServiceGroupAvatarChanged . create ( avatar ) , < nl > + new ArrayList < Reaction > ( ) ) ; < nl > conversationActor ( group . peer ( ) ) . send ( message ) ; < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java 
 index 0c54c39 . . 3c5f66a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java 
 @ @ - 1 , 7 + 1 , 5 @ @ 
 package im . actor . core . modules . encryption ; 
 
 - import com . google . j2objc . annotations . ObjectiveCName ; 
 - 
 import java . io . IOException ; 
 import java . util . ArrayList ; 
 import java . util . HashMap ; 
 @ @ - 28 , 8 + 26 , 6 @ @ import im . actor . core . modules . encryption . entity . UserKeysGroup ; 
 import im . actor . core . modules . encryption . entity . PublicKey ; 
 import im . actor . core . util . ModuleActor ; 
 import im . actor . core . util . RandomUtils ; 
 - import im . actor . core . network . RpcCallback ; 
 - import im . actor . core . network . RpcException ; 
 import im . actor . runtime . Crypto ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . Storage ; 
 @ @ - 38 , 7 + 34 , 6 @ @ import im . actor . runtime . actors . ask . AskMessage ; 
 import im . actor . runtime . actors . ask . AskResult ; 
 import im . actor . runtime . collections . ManagedList ; 
 import im . actor . runtime . function . Function ; 
 - import im . actor . runtime . function . Predicate ; 
 import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . promise . PromiseResolver ; 
 import im . actor . runtime . crypto . Curve25519 ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 index 740ccbe . . 4f9f421 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 @ @ - 420 , 23 + 420 , 7 @ @ public class SenderActor extends ModuleActor { 
 return ; 
 } 
 
 - if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 - ask ( context ( ) . getEncryption ( ) . getMessageEncryptor ( ) , new EncryptedMsgActor . EncryptMessage ( peer . getPeerId ( ) , 
 - message ) , new AskCallback ( ) { 
 - @ Override 
 - public void onResult ( Object obj ) { 
 - EncryptedMsgActor . EncryptedMessage encryptedMessage = ( EncryptedMsgActor . EncryptedMessage ) obj ; 
 - performSendApiContent ( peer , rid , encryptedMessage . getEncryptedMessage ( ) ) ; 
 - } 
 - 
 - @ Override 
 - public void onError ( Exception e ) { 
 - / / Do nothing 
 - } 
 - } ) ; 
 - } else { 
 - performSendApiContent ( peer , rid , message ) ; 
 - } 
 + performSendApiContent ( peer , rid , message ) ; 
 } 
 
 private void performSendApiContent ( final Peer peer , final long rid , ApiMessage message ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 index 43dff51 . . ddf6205 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / MessagesProcessor . java 
 @ @ - 57 , 13 + 57 , 6 @ @ public class MessagesProcessor extends AbsModule { 
 ArrayList < Message > nMessages = new ArrayList < Message > ( ) ; 
 for ( UpdateMessage u : messages ) { 
 
 - if ( u . getMessage ( ) instanceof ApiEncryptedMessage ) { 
 - / / TODO : Proper decrypt message 
 - context ( ) . getEncryption ( ) . getMessageEncryptor ( ) . send ( new EncryptedMsgActor . InMessage ( peer , 
 - u . getDate ( ) , u . getSenderUid ( ) , u . getRid ( ) , ( ApiEncryptedMessage ) u . getMessage ( ) ) ) ; 
 - continue ; 
 - } 
 - 
 AbsContent msgContent ; 
 try { 
 msgContent = AbsContent . fromMessage ( u . getMessage ( ) ) ; 
 @ @ - 111 , 12 + 104 , 6 @ @ public class MessagesProcessor extends AbsModule { 
 
 Peer peer = convert ( _ peer ) ; 
 
 - if ( content instanceof ApiEncryptedMessage ) { 
 - / / TODO : Proper decrypt message 
 - context ( ) . getEncryption ( ) . getMessageEncryptor ( ) . send ( new EncryptedMsgActor . InMessage ( peer , 
 - date , senderUid , rid , ( ApiEncryptedMessage ) content ) ) ; 
 - } 
 - 
 AbsContent msgContent ; 
 try { 
 msgContent = AbsContent . fromMessage ( content ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java 
 index 7d7bbe9 . . c144d79 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / Group . java 
 @ @ - 45 , 7 + 45 , 6 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { 
 @ Property ( " readonly , nonatomic " ) 
 private int creatorId ; 
 @ Property ( " readonly , nonatomic " ) 
 - private boolean isMember ; 
 private boolean isHidden ; 
 @ Nullable 
 @ Property ( " readonly , nonatomic " ) 
 @ @ - 111 , 39 + 110 , 10 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { 
 return creatorId ; 
 } 
 
 - public boolean isMember ( ) { 
 - return isMember ; 
 - } 
 - 
 public boolean isHidden ( ) { 
 return isHidden ; 
 } 
 
 - public Group changeMember ( boolean isMember ) { 
 - ApiGroup w = getWrapped ( ) ; 
 - ApiGroup res = new ApiGroup ( 
 - w . getId ( ) , 
 - w . getAccessHash ( ) , 
 - w . getTitle ( ) , 
 - w . getAvatar ( ) , 
 - isMember , 
 - w . getCreatorUid ( ) , 
 - w . getMembers ( ) , 
 - w . getCreateDate ( ) , 
 - w . disableEdit ( ) , 
 - w . disableInviteView ( ) , 
 - w . disableInviteRevoke ( ) , 
 - w . disableIntegrationView ( ) , 
 - w . disableIntegrationsRevoke ( ) , 
 - w . isAdmin ( ) , 
 - w . getTheme ( ) , 
 - w . getAbout ( ) , 
 - w . isHidden ( ) , 
 - w . getExtensions ( ) ) ; 
 - res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 - return new Group ( res ) ; 
 - } 
 - 
 public Group clearMembers ( ) { 
 ApiGroup w = getWrapped ( ) ; 
 ApiGroup res = new ApiGroup ( 
 @ @ - 151 , 20 + 121 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { 
 w . getAccessHash ( ) , 
 w . getTitle ( ) , 
 w . getAvatar ( ) , 
 - w . isMember ( ) , 
 w . getCreatorUid ( ) , 
 new ArrayList < ApiMember > ( ) , 
 w . getCreateDate ( ) , 
 - w . disableEdit ( ) , 
 - w . disableInviteView ( ) , 
 - w . disableInviteRevoke ( ) , 
 - w . disableIntegrationView ( ) , 
 - w . disableIntegrationsRevoke ( ) , 
 - w . isAdmin ( ) , 
 w . getTheme ( ) , 
 w . getAbout ( ) , 
 w . isHidden ( ) , 
 - w . getExtensions ( ) ) ; 
 + w . getGroupType ( ) , 
 + w . getExt ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new Group ( res ) ; 
 } 
 @ @ - 182 , 20 + 146 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { 
 w . getAccessHash ( ) , 
 w . getTitle ( ) , 
 w . getAvatar ( ) , 
 - w . isMember ( ) , 
 w . getCreatorUid ( ) , 
 nMembers , 
 w . getCreateDate ( ) , 
 - w . disableEdit ( ) , 
 - w . disableInviteView ( ) , 
 - w . disableInviteRevoke ( ) , 
 - w . disableIntegrationView ( ) , 
 - w . disableIntegrationsRevoke ( ) , 
 - w . isAdmin ( ) , 
 w . getTheme ( ) , 
 w . getAbout ( ) , 
 w . isHidden ( ) , 
 - w . getExtensions ( ) ) ; 
 + w . getGroupType ( ) , 
 + w . getExt ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new Group ( res ) ; 
 } 
 @ @ - 214 , 20 + 172 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { 
 w . getAccessHash ( ) , 
 w . getTitle ( ) , 
 w . getAvatar ( ) , 
 - w . isMember ( ) , 
 w . getCreatorUid ( ) , 
 nMembers , 
 w . getCreateDate ( ) , 
 - w . disableEdit ( ) , 
 - w . disableInviteView ( ) , 
 - w . disableInviteRevoke ( ) , 
 - w . disableIntegrationView ( ) , 
 - w . disableIntegrationsRevoke ( ) , 
 - w . isAdmin ( ) , 
 w . getTheme ( ) , 
 w . getAbout ( ) , 
 w . isHidden ( ) , 
 - w . getExtensions ( ) ) ; 
 + w . getGroupType ( ) , 
 + w . getExt ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new Group ( res ) ; 
 } 
 @ @ - 239 , 20 + 191 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { 
 w . getAccessHash ( ) , 
 w . getTitle ( ) , 
 w . getAvatar ( ) , 
 - w . isMember ( ) , 
 w . getCreatorUid ( ) , 
 nMembers , 
 w . getCreateDate ( ) , 
 - w . disableEdit ( ) , 
 - w . disableInviteView ( ) , 
 - w . disableInviteRevoke ( ) , 
 - w . disableIntegrationView ( ) , 
 - w . disableIntegrationsRevoke ( ) , 
 - w . isAdmin ( ) , 
 w . getTheme ( ) , 
 w . getAbout ( ) , 
 w . isHidden ( ) , 
 - w . getExtensions ( ) ) ; 
 + w . getGroupType ( ) , 
 + w . getExt ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new Group ( res ) ; 
 } 
 @ @ - 264 , 20 + 210 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { 
 w . getAccessHash ( ) , 
 title , 
 w . getAvatar ( ) , 
 - w . isMember ( ) , 
 w . getCreatorUid ( ) , 
 w . getMembers ( ) , 
 w . getCreateDate ( ) , 
 - w . disableEdit ( ) , 
 - w . disableInviteView ( ) , 
 - w . disableInviteRevoke ( ) , 
 - w . disableIntegrationView ( ) , 
 - w . disableIntegrationsRevoke ( ) , 
 - w . isAdmin ( ) , 
 w . getTheme ( ) , 
 w . getAbout ( ) , 
 w . isHidden ( ) , 
 - w . getExtensions ( ) ) ; 
 + w . getGroupType ( ) , 
 + w . getExt ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new Group ( res ) ; 
 } 
 @ @ - 289 , 20 + 229 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { 
 w . getAccessHash ( ) , 
 w . getTitle ( ) , 
 w . getAvatar ( ) , 
 - w . isMember ( ) , 
 w . getCreatorUid ( ) , 
 w . getMembers ( ) , 
 w . getCreateDate ( ) , 
 - w . disableEdit ( ) , 
 - w . disableInviteView ( ) , 
 - w . disableInviteRevoke ( ) , 
 - w . disableIntegrationView ( ) , 
 - w . disableIntegrationsRevoke ( ) , 
 - w . isAdmin ( ) , 
 theme , 
 w . getAbout ( ) , 
 w . isHidden ( ) , 
 - w . getExtensions ( ) ) ; 
 + w . getGroupType ( ) , 
 + w . getExt ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new Group ( res ) ; 
 } 
 @ @ - 314 , 20 + 248 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { 
 w . getAccessHash ( ) , 
 w . getTitle ( ) , 
 w . getAvatar ( ) , 
 - w . isMember ( ) , 
 w . getCreatorUid ( ) , 
 w . getMembers ( ) , 
 w . getCreateDate ( ) , 
 - w . disableEdit ( ) , 
 - w . disableInviteView ( ) , 
 - w . disableInviteRevoke ( ) , 
 - w . disableIntegrationView ( ) , 
 - w . disableIntegrationsRevoke ( ) , 
 - w . isAdmin ( ) , 
 w . getTheme ( ) , 
 about , 
 w . isHidden ( ) , 
 - w . getExtensions ( ) ) ; 
 + w . getGroupType ( ) , 
 + w . getExt ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new Group ( res ) ; 
 } 
 @ @ - 339 , 20 + 267 , 14 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { 
 w . getAccessHash ( ) , 
 w . getTitle ( ) , 
 avatar , 
 - w . isMember ( ) , 
 w . getCreatorUid ( ) , 
 w . getMembers ( ) , 
 w . getCreateDate ( ) , 
 - w . disableEdit ( ) , 
 - w . disableInviteView ( ) , 
 - w . disableInviteRevoke ( ) , 
 - w . disableIntegrationView ( ) , 
 - w . disableIntegrationsRevoke ( ) , 
 - w . isAdmin ( ) , 
 w . getTheme ( ) , 
 w . getAbout ( ) , 
 w . isHidden ( ) , 
 - w . getExtensions ( ) ) ; 
 + w . getGroupType ( ) , 
 + w . getExt ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new Group ( res ) ; 
 } 
 @ @ - 368 , 7 + 290 , 6 @ @ public class Group extends WrapperEntity < ApiGroup > implements KeyValueItem { 
 for ( ApiMember m : wrapped . getMembers ( ) ) { 
 this . members . add ( new GroupMember ( m . getUid ( ) , m . getInviterUid ( ) , m . getDate ( ) , m . isAdmin ( ) ! = null ? m . isAdmin ( ) : m . getUid ( ) = = this . creatorId ) ) ; 
 } 
 - this . isMember = wrapped . isMember ( ) ; 
 this . isHidden = wrapped . isHidden ( ) ! = null ? wrapped . isHidden ( ) : false ; 
 this . about = wrapped . getAbout ( ) ; 
 this . theme = wrapped . getTheme ( ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / GroupsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / GroupsModule . java 
 index b0bf2cc . . 40f0eb3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / GroupsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / GroupsModule . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . core . api . ApiServiceMessage ; 
 import im . actor . core . api . ApiUser ; 
 import im . actor . core . api . ApiUserOutPeer ; 
 import im . actor . core . api . rpc . RequestCreateGroup ; 
 + import im . actor . core . api . rpc . RequestCreateGroupObsolete ; 
 import im . actor . core . api . rpc . RequestEditGroupAbout ; 
 import im . actor . core . api . rpc . RequestEditGroupTitle ; 
 import im . actor . core . api . rpc . RequestEditGroupTopic ; 
 @ @ - 36 , 6 + 37 , 7 @ @ import im . actor . core . api . rpc . RequestMakeUserAdmin ; 
 import im . actor . core . api . rpc . RequestRevokeIntegrationToken ; 
 import im . actor . core . api . rpc . RequestRevokeInviteUrl ; 
 import im . actor . core . api . rpc . ResponseCreateGroup ; 
 + import im . actor . core . api . rpc . ResponseCreateGroupObsolete ; 
 import im . actor . core . api . rpc . ResponseEnterGroup ; 
 import im . actor . core . api . rpc . ResponseGetPublicGroups ; 
 import im . actor . core . api . rpc . ResponseIntegrationToken ; 
 @ @ - 135 , 9 + 137 , 9 @ @ public class GroupsModule extends AbsModule { 
 } 
 } 
 final long rid = RandomUtils . nextRid ( ) ; 
 - request ( new RequestCreateGroup ( rid , title , peers ) , new RpcCallback < ResponseCreateGroup > ( ) { 
 + request ( new RequestCreateGroupObsolete ( rid , title , peers ) , new RpcCallback < ResponseCreateGroupObsolete > ( ) { 
 @ Override 
 - public void onResult ( ResponseCreateGroup response ) { 
 + public void onResult ( ResponseCreateGroupObsolete response ) { 
 List < ApiMember > members = new ArrayList < ApiMember > ( ) ; 
 for ( int u : response . getUsers ( ) ) { 
 members . add ( new ApiMember ( u , myUid ( ) , response . getDate ( ) , u = = myUid ( ) ) ) ; 
 @ @ - 145 , 10 + 147 , 9 @ @ public class GroupsModule extends AbsModule { 
 final ApiGroup group = new ApiGroup ( 
 response . getGroupPeer ( ) . getGroupId ( ) , 
 response . getGroupPeer ( ) . getAccessHash ( ) , 
 - title , null , true , myUid ( ) , members , 
 + title , null , myUid ( ) , members , 
 response . getDate ( ) , null , 
 - null , null , null , null , true , null , null , null , 
 - new ArrayList < ApiExtension > ( ) ) ; 
 + null , false , null , null ) ; 
 ArrayList < ApiGroup > groups = new ArrayList < ApiGroup > ( ) ; 
 groups . add ( group ) ; 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 index f8708f4 . . 4e66efc 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import im . actor . core . entity . Message ; 
 import im . actor . core . entity . MessageState ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 + import im . actor . core . entity . Reaction ; 
 import im . actor . core . entity . User ; 
 import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . entity . content . DocumentContent ; 
 @ @ - 150 , 7 + 151 , 8 @ @ public class SenderActor extends ModuleActor { 
 
 TextContent content = TextContent . create ( text , markDownText , mentions ) ; 
 
 - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content ) ; 
 + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , content , 
 + new ArrayList < Reaction > ( ) ) ; 
 context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( message ) ; 
 
 pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , content ) ) ; 
 @ @ - 169 , 7 + 171 , 8 @ @ public class SenderActor extends ModuleActor { 
 DocumentContent documentContent = DocumentContent . createLocal ( fileName , fileSize , 
 descriptor , mimeType , fastThumb ) ; 
 
 - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , documentContent ) ; 
 + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , documentContent , 
 + new ArrayList < Reaction > ( ) ) ; 
 context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( message ) ; 
 
 pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , documentContent ) ) ; 
 @ @ - 185 , 7 + 188 , 8 @ @ public class SenderActor extends ModuleActor { 
 long sortDate = date + 365 * 24 * 60 * 60 * 1000L ; 
 PhotoContent photoContent = PhotoContent . createLocalPhoto ( descriptor , fileName , fileSize , w , h , fastThumb ) ; 
 
 - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , photoContent ) ; 
 + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , photoContent , 
 + new ArrayList < Reaction > ( ) ) ; 
 context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( message ) ; 
 
 pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , photoContent ) ) ; 
 @ @ - 202 , 7 + 206 , 8 @ @ public class SenderActor extends ModuleActor { 
 VideoContent videoContent = VideoContent . createLocalVideo ( descriptor , 
 fileName , fileSize , w , h , duration , fastThumb ) ; 
 
 - Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , videoContent ) ; 
 + Message message = new Message ( rid , sortDate , date , myUid ( ) , MessageState . PENDING , videoContent , 
 + new ArrayList < Reaction > ( ) ) ; 
 context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( message ) ; 
 
 pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( peer , rid , videoContent ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java 
 index 4bc95f0 . . 2270b36 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java 
 @ @ - 17 , 6 + 17 , 7 @ @ import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . MessageState ; 
 import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . Reaction ; 
 import im . actor . core . entity . content . ServiceGroupAvatarChanged ; 
 import im . actor . core . entity . content . ServiceGroupCreated ; 
 import im . actor . core . entity . content . ServiceGroupTitleChanged ; 
 @ @ - 69 , 19 + 70 , 20 @ @ public class GroupsProcessor extends AbsModule { 
 
 / / Updating group 
 groups ( ) . addOrUpdateItem ( group 
 - . changeMember ( true ) 
 . addMember ( myUid ( ) , inviterId , date ) ) ; 
 
 if ( ! isSilent ) { 
 if ( inviterId = = myUid ( ) ) { 
 / / If current user invite himself , add create group message 
 Message message = new Message ( rid , date , date , inviterId , 
 - MessageState . UNKNOWN , ServiceGroupCreated . create ( ) ) ; 
 + MessageState . UNKNOWN , ServiceGroupCreated . create ( ) , 
 + new ArrayList < Reaction > ( ) ) ; 
 conversationActor ( group . peer ( ) ) . send ( message ) ; 
 } else { 
 / / else add invite message 
 Message message = new Message ( rid , date , date , inviterId , 
 - MessageState . SENT , ServiceGroupUserInvited . create ( myUid ( ) ) ) ; 
 + MessageState . SENT , ServiceGroupUserInvited . create ( myUid ( ) ) , 
 + new ArrayList < Reaction > ( ) ) ; 
 conversationActor ( group . peer ( ) ) . send ( message ) ; 
 } 
 } 
 @ @ - 96 , 8 + 98 , 7 @ @ public class GroupsProcessor extends AbsModule { 
 if ( uid = = myUid ( ) ) { 
 / / If current user leave , clear members and change member state 
 groups ( ) . addOrUpdateItem ( group 
 - . clearMembers ( ) 
 - . changeMember ( false ) ) ; 
 + . clearMembers ( ) ) ; 
 } else { 
 / / else remove leaved user 
 groups ( ) . addOrUpdateItem ( group 
 @ @ - 108 , 7 + 109 , 8 @ @ public class GroupsProcessor extends AbsModule { 
 if ( ! isSilent ) { 
 Message message = new Message ( rid , date , date , uid , 
 uid = = myUid ( ) ? MessageState . SENT : MessageState . UNKNOWN , 
 - ServiceGroupUserLeave . create ( ) ) ; 
 + ServiceGroupUserLeave . create ( ) , 
 + new ArrayList < Reaction > ( ) ) ; 
 conversationActor ( group . peer ( ) ) . send ( message ) ; 
 } 
 } 
 @ @ - 122 , 8 + 124 , 7 @ @ public class GroupsProcessor extends AbsModule { 
 if ( uid = = myUid ( ) ) { 
 / / If kicked me , clear members and change member state 
 groups ( ) . addOrUpdateItem ( group 
 - . clearMembers ( ) 
 - . changeMember ( false ) ) ; 
 + . clearMembers ( ) ) ; 
 } else { 
 / / else remove kicked user 
 groups ( ) . addOrUpdateItem ( group 
 @ @ - 134 , 7 + 135 , 8 @ @ public class GroupsProcessor extends AbsModule { 
 if ( ! isSilent ) { 
 Message message = new Message ( rid , date , date , kicker , 
 kicker = = myUid ( ) ? MessageState . SENT : MessageState . UNKNOWN , 
 - ServiceGroupUserKicked . create ( uid ) ) ; 
 + ServiceGroupUserKicked . create ( uid ) , 
 + new ArrayList < Reaction > ( ) ) ; 
 conversationActor ( group . peer ( ) ) . send ( message ) ; 
 } 
 } 
 @ @ - 152 , 7 + 154 , 8 @ @ public class GroupsProcessor extends AbsModule { 
 if ( ! isSilent ) { 
 Message message = new Message ( rid , date , date , adder , 
 adder = = myUid ( ) ? MessageState . SENT : MessageState . UNKNOWN , 
 - ServiceGroupUserInvited . create ( uid ) ) ; 
 + ServiceGroupUserInvited . create ( uid ) , 
 + new ArrayList < Reaction > ( ) ) ; 
 conversationActor ( group . peer ( ) ) . send ( message ) ; 
 } 
 } 
 @ @ - 183 , 7 + 186 , 8 @ @ public class GroupsProcessor extends AbsModule { 
 if ( ! isSilent ) { 
 Message message = new Message ( rid , date , date , uid , 
 uid = = myUid ( ) ? MessageState . SENT : MessageState . UNKNOWN , 
 - ServiceGroupTitleChanged . create ( title ) ) ; 
 + ServiceGroupTitleChanged . create ( title ) , 
 + new ArrayList < Reaction > ( ) ) ; 
 conversationActor ( group . peer ( ) ) . send ( message ) ; 
 } 
 } 
 @ @ - 266 , 7 + 270 , 8 @ @ public class GroupsProcessor extends AbsModule { 
 if ( ! isSilent ) { 
 Message message = new Message ( rid , date , date , uid , 
 uid = = myUid ( ) ? MessageState . SENT : MessageState . UNKNOWN , 
 - ServiceGroupAvatarChanged . create ( avatar ) ) ; 
 + ServiceGroupAvatarChanged . create ( avatar ) , 
 + new ArrayList < Reaction > ( ) ) ; 
 conversationActor ( group . peer ( ) ) . send ( message ) ; 
 } 
 }
