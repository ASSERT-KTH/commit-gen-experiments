BLEU SCORE: 0.12600736402830257

TEST MSG: refactor ( android ) : refactor ActorStyle
GENERATED MSG: feat ( jvm ) : Updated TCP Implementation

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java < nl > index 1946fc6 . . 4878d3a 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java < nl > @ @ - 7 , 225 + 7 , 157 @ @ import im . actor . sdk . util . Screen ; < nl > / * * < nl > * Actor Styling class < nl > * / < nl > + @ SuppressWarnings ( " unused " ) < nl > public class ActorStyle { < nl > < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + / / BACKGROUNDS / / < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + < nl > private int [ ] defaultBackgrouds = new int [ ] { R . drawable . img _ chat _ background _ default , R . drawable . bg _ 1 , R . drawable . bg _ 2 , R . drawable . bg _ 3 } ; < nl > < nl > - private int toolBarColor = 0 ; < nl > - private int fabColor = 0 ; < nl > - private int fabPressedColor = 0 ; < nl > - private int mainFabbgColor = Color . parseColor ( " # ccffffff " ) ; < nl > - private int settingsCategoryTextColor = 0 ; < nl > - private int recordIconTintColor = 0 ; < nl > - private int avatarBackgroundColor = 0 ; < nl > - private int avatarBackgroundResource = 0 ; < nl > - private int actionShareColor = 0 ; < nl > + public int [ ] getDefaultBackgrouds ( ) { < nl > + return defaultBackgrouds ; < nl > + } < nl > + < nl > + public void setDefaultBackgrouds ( int [ ] defaultBackgrouds ) { < nl > + this . defaultBackgrouds = defaultBackgrouds ; < nl > + } < nl > + < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + / / COLORS / / < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > < nl > / / < nl > - / / Main Color < nl > + / / Global colors < nl > / / < nl > - private int mainColor = Color . parseColor ( " # 4d74a6 " ) ; < nl > < nl > + / / main color < nl > + private int mainColor = 0xff4d74a6 ; < nl > public int getMainColor ( ) { < nl > return mainColor ; < nl > } < nl > - < nl > public void setMainColor ( int mainColor ) { < nl > this . mainColor = mainColor ; < nl > } < nl > < nl > + / / primary alt colors < nl > + private int primaryAltColor = 0xff4ca665 ; < nl > < nl > - / / < nl > - / / List Styles < nl > - / / < nl > + public int getPrimaryAltColor ( ) { < nl > + return primaryAltColor ; < nl > + } < nl > < nl > - private int mainBackgroundColor = Color . parseColor ( " # ffffff " ) ; < nl > - private int backyardBackgroundColor = 0 ; < nl > + public void setPrimaryAltColor ( int primaryAltColor ) { < nl > + this . primaryAltColor = primaryAltColor ; < nl > + } < nl > < nl > - / / Contacts < nl > - private int contactFastTitleColor = 0 ; < nl > - private int actionAddContactColor = 0 ; < nl > - private int contactDividerColor = 0 ; < nl > + private int primaryAltHoveredColor = 0xff3d8652 ; < nl > < nl > - / / Dialogs < nl > - private int dialogsStatePendingColor = Color . parseColor ( " # 40000000 " ) ; < nl > - private int dialogsTimeColor = 0 ; < nl > - private int dialogsStateSentColor = Color . parseColor ( " # 40000000 " ) ; < nl > - private int dialogsStateDeliveredColor = Color . parseColor ( " # 40000000 " ) ; < nl > - private int dialogsStateReadColor = Color . parseColor ( " # ff7ea8ef " ) ; < nl > - private int dialogsStateErrorColor = Color . parseColor ( " # d24a43 " ) ; < nl > - private int dialogsCounterTextColor = 0 ; < nl > - private int dialogsCounterBackgroundColor = 0 ; < nl > - private int dialogsDividerColor = 0 ; < nl > - private int dialogsTitleColor = 0 ; < nl > - private int dialogsTextColor = 0 ; < nl > - private int dialogsTypingColor = 0 ; < nl > - private int dialogsActionColor = 0xff5882ac ; < nl > + public int getPrimaryAltHoveredColor ( ) { < nl > + return primaryAltHoveredColor ; < nl > + } < nl > < nl > - private int primaryAltColor = Color . parseColor ( " # 4ca665 " ) ; < nl > - private int primaryAltHoveredColor = Color . parseColor ( " # ff3d8652 " ) ; < nl > - private int primaryAltPressedColor = Color . parseColor ( " # ff5cca7b " ) ; < nl > + public void setPrimaryAltHoveredColor ( int primaryAltHoveredColor ) { < nl > + this . primaryAltHoveredColor = primaryAltHoveredColor ; < nl > + } < nl > < nl > - private int accentColor = Color . parseColor ( " # d94335 " ) ; < nl > - private int accentHoveredColor = Color . parseColor ( " # b3372c " ) ; < nl > - private int accentPressedColor = Color . parseColor ( " # ca4a3f " ) ; < nl > + private int primaryAltPressedColor = 0xff5cca7b ; < nl > < nl > - / / Base UI colors < nl > + public int getPrimaryAltPressedColor ( ) { < nl > + return primaryAltPressedColor ; < nl > + } < nl > < nl > - private int listActionColor = 0 ; < nl > - private int sectonIconSmallColor = Color . parseColor ( " # b5b6b7 " ) ; < nl > - private int sectionIconLargeColor = 0 ; < nl > + public void setPrimaryAltPressedColor ( int primaryAltPressedColor ) { < nl > + this . primaryAltPressedColor = primaryAltPressedColor ; < nl > + } < nl > < nl > - / / Dividers < nl > - private int dividerColor = Color . parseColor ( " # 1E000000 " ) ; < nl > - private int dividerInvColor = Color . parseColor ( " # 1Effffff " ) ; < nl > + / / accent colors < nl > + private int accentColor = 0xffd94335 ; < nl > < nl > - / / Text colors < nl > - private int textPrimaryInvColor = Color . parseColor ( " # DEffffff " ) ; < nl > - private int textPrimaryColor = Color . parseColor ( " # DE000000 " ) ; < nl > - private int textSecondaryColor = Color . parseColor ( " # 7A000000 " ) ; < nl > - private int textSecondaryAccentColor = 0 ; < nl > - private int textHintColor = Color . parseColor ( " # 42000000 " ) ; < nl > - private int textSubHeaderColor = Color . parseColor ( " # 6F000000 " ) ; < nl > - private int textSecondaryInvColor = Color . parseColor ( " # 8Affffff " ) ; < nl > - private int textHintInvColor = Color . parseColor ( " # 42ffffff " ) ; < nl > - private int textSubheaderInvColor = Color . parseColor ( " # 8Fffffff " ) ; < nl > + public int getAccentColor ( ) { < nl > + return accentColor ; < nl > + } < nl > < nl > - / / Settings < nl > - private int settingsMainTitleColor = 0 ; < nl > - private int settingsIconColor = 0 ; < nl > - private int settingsTitleColor = 0 ; < nl > - private int settingsSubtitleColor = 0 ; < nl > + public void setAccentColor ( int accentColor ) { < nl > + this . accentColor = accentColor ; < nl > + } < nl > < nl > - / / Profile < nl > - private int profileTitleColor = 0 ; < nl > - private int profileSubtitleColor = 0 ; < nl > - private int profileIconColor = 0 ; < nl > - private int profileContactIconColor = 0 ; < nl > + private int accentHoveredColor = 0xffb3372c ; < nl > < nl > - / / Group Profile < nl > - private int groupAdminColor = 0 ; < nl > - private int groupActionAddIconColor = 0 ; < nl > - private int groupActionAddTextColor = 0 ; < nl > - private int groupOnlineColor = Color . parseColor ( " # ff7ea8ef " ) ; < nl > + public int getAccentHoveredColor ( ) { < nl > + return accentHoveredColor ; < nl > + } < nl > < nl > - / / Conversation < nl > - private int convSendEnabledColor = 0 ; < nl > - private int convSendDisabledColor = Color . parseColor ( " # 42000000 " ) ; < nl > + public void setAccentHoveredColor ( int accentHoveredColor ) { < nl > + this . accentHoveredColor = accentHoveredColor ; < nl > + } < nl > < nl > - private int convDateLineColor = Color . parseColor ( " # 14000000 " ) ; < nl > - private int convDatetextColor = Color . parseColor ( " # ffffff " ) ; < nl > - private int convDateBgColor = Color . parseColor ( " # 99000000 " ) ; < nl > + private int accentPressedColor = 0xffca4a3f ; < nl > < nl > - private int convTextColor = 0 ; < nl > - private int convTimeColor = Color . parseColor ( " # 60000000 " ) ; < nl > - < nl > - private int convStatePendingColor = Color . parseColor ( " # 40000000 " ) ; < nl > - private int convStateSentColor = Color . parseColor ( " # 40000000 " ) ; < nl > - private int convStateDeliveredColor = Color . parseColor ( " # 40000000 " ) ; < nl > - private int convStateReadColor = Color . parseColor ( " # ff7ea8ef " ) ; < nl > - private int convStateErrorColor = Color . parseColor ( " # d24a43 " ) ; < nl > - private int convStateWarrningColor = Color . parseColor ( " # d24a43 " ) ; < nl > - < nl > - private int convMediaDateBgColor = Color . parseColor ( " # 99000000 " ) ; < nl > - private int convMediaStatePendingColor = Color . parseColor ( " # ffffff " ) ; < nl > - private int convMediaStateSentColor = Color . parseColor ( " # ffffff " ) ; < nl > - private int convMediaStateDeliveredColor = Color . parseColor ( " # ffffff " ) ; < nl > - private int convMediaStateReadColor = Color . parseColor ( " # ff7ea8ef " ) ; < nl > - private int convMediaStateErrorColor = Color . parseColor ( " # ffed534b " ) ; < nl > - private int convMediaStateWarrningColor = Color . parseColor ( " # ffed534b " ) ; < nl > - private int convLikeColor = Color . parseColor ( " # e2264d " ) ; < nl > + public int getAccentPressedColor ( ) { < nl > + return accentPressedColor ; < nl > + } < nl > < nl > - / / DialogsFragment layout settings < nl > - private int dialogsPaddingTop = Screen . dp ( 8 ) ; < nl > + public void setAccentPressedColor ( int accentPressedColor ) { < nl > + this . accentPressedColor = accentPressedColor ; < nl > + } < nl > < nl > - / / ContactsFragment layout settings < nl > - private int contactsMainPaddingTop = 0 ; < nl > + / / < nl > + / / Shared UI colors < nl > + / / < nl > < nl > - public int getMainPressedColor ( ) { < nl > - return getDarkenArgb ( getMainColor ( ) , 0 . 95 ) ; < nl > - } < nl > + private int toolBarColor = 0 ; < nl > < nl > public int getToolBarColor ( ) { < nl > - if ( toolBarColor ! = 0 ) { < nl > - return toolBarColor ; < nl > - } else { < nl > - return getMainColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( toolBarColor , getMainColor ( ) ) ; < nl > } < nl > < nl > public void setToolBarColor ( int toolBarColor ) { < nl > this . toolBarColor = toolBarColor ; < nl > } < nl > < nl > + private int fabColor = 0 ; < nl > + < nl > public int getFabColor ( ) { < nl > - if ( fabColor ! = 0 ) { < nl > - return fabColor ; < nl > - } else { < nl > - return getMainColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( fabColor , getMainColor ( ) ) ; < nl > } < nl > < nl > public void setFabColor ( int fabColor ) { < nl > this . fabColor = fabColor ; < nl > } < nl > < nl > + private int fabPressedColor = 0 ; < nl > + < nl > public int getFabPressedColor ( ) { < nl > - if ( fabPressedColor ! = 0 ) { < nl > - return fabPressedColor ; < nl > - } else { < nl > - double percent = 0 . 95 ; < nl > - return getDarkenArgb ( getFabColor ( ) , percent ) ; < nl > - } < nl > + return getColorWithFallback ( fabPressedColor , getDarkenArgb ( getFabColor ( ) , 0 . 95 ) ) ; < nl > } < nl > < nl > public void setFabPressedColor ( int fabPressedColor ) { < nl > this . fabPressedColor = fabPressedColor ; < nl > } < nl > < nl > - public int getSettingsCategoryTextColor ( ) { < nl > - if ( settingsCategoryTextColor ! = 0 ) { < nl > - return settingsCategoryTextColor ; < nl > - } else { < nl > - return getMainColor ( ) ; < nl > - } < nl > - } < nl > + private int mainFabbgColor = 0xccffffff ; < nl > < nl > - public void setSettingsCategoryTextColor ( int settingsCategoryTextColor ) { < nl > - this . settingsCategoryTextColor = settingsCategoryTextColor ; < nl > - } < nl > - < nl > - public int getRecordIconTintColor ( ) { < nl > - if ( recordIconTintColor ! = 0 ) { < nl > - return recordIconTintColor ; < nl > - } else { < nl > - return getMainColor ( ) ; < nl > - } < nl > + public int getMainFabbgColor ( ) { < nl > + return mainFabbgColor ; < nl > } < nl > < nl > - public void setRecordIconTintColor ( int recordIconTintColor ) { < nl > - this . recordIconTintColor = recordIconTintColor ; < nl > + public void setMainFabbgColor ( int mainFabbgColor ) { < nl > + this . mainFabbgColor = mainFabbgColor ; < nl > } < nl > < nl > - public int getAvatarBackgroundColor ( ) { < nl > - if ( avatarBackgroundColor ! = 0 ) { < nl > - return avatarBackgroundColor ; < nl > - } else { < nl > - return getMainColor ( ) ; < nl > - } < nl > - } < nl > + private int actionShareColor = 0 ; < nl > < nl > - public void setAvatarBackgroundResource ( int avatarBackgroundResource ) { < nl > - this . avatarBackgroundResource = avatarBackgroundResource ; < nl > + public int getActionShareColor ( ) { < nl > + return getColorWithFallback ( actionShareColor , getMainColor ( ) ) ; < nl > } < nl > < nl > - public int getAvatarBackgroundResourse ( ) { < nl > - return avatarBackgroundResource ; < nl > + public void setActionShareColor ( int actionShareColor ) { < nl > + this . actionShareColor = actionShareColor ; < nl > } < nl > < nl > - public void setAvatarBackgroundColor ( int avatarBackgroundColor ) { < nl > - this . avatarBackgroundColor = avatarBackgroundColor ; < nl > - } < nl > + private int mainBackgroundColor = 0xffffffff ; < nl > < nl > public int getMainBackgroundColor ( ) { < nl > return mainBackgroundColor ; < nl > @ @ - 235 , 157 + 167 , 104 @ @ public class ActorStyle { < nl > this . mainBackgroundColor = mainBackgroundColor ; < nl > } < nl > < nl > + private int backyardBackgroundColor = 0 ; < nl > + < nl > public int getBackyardBackgroundColor ( ) { < nl > - if ( backyardBackgroundColor ! = 0 ) { < nl > - return backyardBackgroundColor ; < nl > - } else { < nl > - return getDarkenArgb ( getMainBackgroundColor ( ) , 0 . 9375 ) ; < nl > - } < nl > + return getColorWithFallback ( backyardBackgroundColor , getDarkenArgb ( getMainBackgroundColor ( ) , 0 . 9375 ) ) ; < nl > } < nl > < nl > public void setBackyardBackgroundColor ( int backyardBackgroundColor ) { < nl > this . backyardBackgroundColor = backyardBackgroundColor ; < nl > } < nl > < nl > - public int getActionShareColor ( ) { < nl > - if ( actionShareColor ! = 0 ) { < nl > - return actionShareColor ; < nl > - } else { < nl > - return getMainColor ( ) ; < nl > - } < nl > - } < nl > - < nl > - public void setActionShareColor ( int actionShareColor ) { < nl > - this . actionShareColor = actionShareColor ; < nl > - } < nl > - < nl > - public int getActionAddContactColor ( ) { < nl > - if ( actionAddContactColor ! = 0 ) { < nl > - return actionAddContactColor ; < nl > - } else { < nl > - return getMainColor ( ) ; < nl > - } < nl > - } < nl > - < nl > - public void setActionAddContactColor ( int actionAddContactColor ) { < nl > - this . actionAddContactColor = actionAddContactColor ; < nl > - } < nl > + private int avatarBackgroundColor = 0 ; < nl > < nl > - public int getContactFastTitleColor ( ) { < nl > - if ( contactFastTitleColor ! = 0 ) { < nl > - return contactFastTitleColor ; < nl > - } else { < nl > - return getMainColor ( ) ; < nl > - } < nl > + public void setAvatarBackgroundColor ( int avatarBackgroundColor ) { < nl > + this . avatarBackgroundColor = avatarBackgroundColor ; < nl > } < nl > < nl > - public void setContactFastTitleColor ( int contactFastTitleColor ) { < nl > - this . contactFastTitleColor = contactFastTitleColor ; < nl > + public int getAvatarBackgroundColor ( ) { < nl > + return getColorWithFallback ( avatarBackgroundColor , getMainColor ( ) ) ; < nl > } < nl > < nl > - / * < nl > - * Dialogs < nl > - * / < nl > + private int avatarBackgroundResource = 0 ; < nl > < nl > - public int getDialogsActiveTextColor ( ) { < nl > - if ( dialogsActionColor ! = 0 ) { < nl > - return dialogsActionColor ; < nl > - } else { < nl > - return getDialogsTextColor ( ) ; < nl > - } < nl > + public int getAvatarBackgroundResourse ( ) { < nl > + return avatarBackgroundResource ; < nl > } < nl > < nl > - public void setDialogsActiveTextColor ( int dialogsActionColor ) { < nl > - this . dialogsActionColor = dialogsActionColor ; < nl > + public void setAvatarBackgroundResource ( int avatarBackgroundResource ) { < nl > + this . avatarBackgroundResource = avatarBackgroundResource ; < nl > } < nl > < nl > - public int getDialogsCounterTextColor ( ) { < nl > - if ( dialogsCounterTextColor ! = 0 ) { < nl > - return dialogsCounterTextColor ; < nl > - } else { < nl > - return getTextPrimaryInvColor ( ) ; < nl > - } < nl > - } < nl > + / / < nl > + / / List Styles < nl > + / / < nl > < nl > - public void setDialogsCounterTextColor ( int dialogsCounterTextColor ) { < nl > - this . dialogsCounterTextColor = dialogsCounterTextColor ; < nl > - } < nl > + / / Shared lists colors < nl > + private int listActionColor = 0 ; < nl > < nl > - public int getDialogsCounterBackgroundColor ( ) { < nl > - if ( dialogsCounterBackgroundColor ! = 0 ) { < nl > - return dialogsCounterBackgroundColor ; < nl > - } else { < nl > - return getPrimaryAltColor ( ) ; < nl > - } < nl > + public int getListActionColor ( ) { < nl > + return getColorWithFallback ( listActionColor , getMainColor ( ) ) ; < nl > } < nl > < nl > - public void setDialogsCounterBackgroundColor ( int dialogsCounterBackgroundColor ) { < nl > - this . dialogsCounterBackgroundColor = dialogsCounterBackgroundColor ; < nl > + public void setListActionColor ( int listActionColor ) { < nl > + this . listActionColor = listActionColor ; < nl > } < nl > < nl > - public int getTextPrimaryInvColor ( ) { < nl > - return textPrimaryInvColor ; < nl > - } < nl > + / / Contacts < nl > + private int contactFastTitleColor = 0 ; < nl > < nl > - public void setTextPrimaryInvColor ( int textPrimaryInvColor ) { < nl > - this . textPrimaryInvColor = textPrimaryInvColor ; < nl > + public int getContactFastTitleColor ( ) { < nl > + return getColorWithFallback ( contactFastTitleColor , getMainColor ( ) ) ; < nl > } < nl > < nl > - public int getPrimaryAltColor ( ) { < nl > - return primaryAltColor ; < nl > + public void setContactFastTitleColor ( int contactFastTitleColor ) { < nl > + this . contactFastTitleColor = contactFastTitleColor ; < nl > } < nl > < nl > - public void setPrimaryAltColor ( int primaryAltColor ) { < nl > - this . primaryAltColor = primaryAltColor ; < nl > - } < nl > + private int actionAddContactColor = 0 ; < nl > < nl > - public int getPrimaryAltHoveredColor ( ) { < nl > - return primaryAltHoveredColor ; < nl > + public int getActionAddContactColor ( ) { < nl > + return getColorWithFallback ( actionAddContactColor , getMainColor ( ) ) ; < nl > } < nl > < nl > - public void setPrimaryAltHoveredColor ( int primaryAltHoveredColor ) { < nl > - this . primaryAltHoveredColor = primaryAltHoveredColor ; < nl > + public void setActionAddContactColor ( int actionAddContactColor ) { < nl > + this . actionAddContactColor = actionAddContactColor ; < nl > } < nl > < nl > - public int getPrimaryAltPressedColor ( ) { < nl > - return primaryAltPressedColor ; < nl > - } < nl > + private int contactDividerColor = 0 ; < nl > < nl > - public void setPrimaryAltPressedColor ( int primaryAltPressedColor ) { < nl > - this . primaryAltPressedColor = primaryAltPressedColor ; < nl > + public int getContactDividerColor ( ) { < nl > + return getColorWithFallback ( contactDividerColor , getDividerColor ( ) ) ; < nl > } < nl > < nl > - public int getAccentColor ( ) { < nl > - return accentColor ; < nl > + public void setContactDividerColor ( int contactDividerColor ) { < nl > + this . contactDividerColor = contactDividerColor ; < nl > } < nl > < nl > - public void setAccentColor ( int accentColor ) { < nl > - this . accentColor = accentColor ; < nl > - } < nl > + / / Dialogs < nl > + private int dialogsStatePendingColor = 0x40000000 ; < nl > < nl > - public int getAccentHoveredColor ( ) { < nl > - return accentHoveredColor ; < nl > + public int getDialogsStatePendingColor ( ) { < nl > + return dialogsStatePendingColor ; < nl > } < nl > < nl > - public void setAccentHoveredColor ( int accentHoveredColor ) { < nl > - this . accentHoveredColor = accentHoveredColor ; < nl > + public void setDialogsStatePendingColor ( int dialogsStatePendingColor ) { < nl > + this . dialogsStatePendingColor = dialogsStatePendingColor ; < nl > } < nl > < nl > - public int getAccentPressedColor ( ) { < nl > - return accentPressedColor ; < nl > - } < nl > + private int dialogsTimeColor = 0 ; < nl > < nl > - public void setAccentPressedColor ( int accentPressedColor ) { < nl > - this . accentPressedColor = accentPressedColor ; < nl > + public int getDialogsTimeColor ( ) { < nl > + return getColorWithFallback ( dialogsTimeColor , getTextSecondaryColor ( ) ) ; < nl > } < nl > < nl > - public int getDialogsStatePendingColor ( ) { < nl > - return dialogsStatePendingColor ; < nl > + public void setDialogsTimeColor ( int dialogsTimeColor ) { < nl > + this . dialogsTimeColor = dialogsTimeColor ; < nl > } < nl > < nl > - public void setDialogsStatePendingColor ( int dialogsStatePendingColor ) { < nl > - this . dialogsStatePendingColor = dialogsStatePendingColor ; < nl > - } < nl > + private int dialogsStateSentColor = 0x40000000 ; < nl > < nl > public int getDialogsStateSentColor ( ) { < nl > return dialogsStateSentColor ; < nl > @ @ - 395 , 6 + 274 , 8 @ @ public class ActorStyle { < nl > this . dialogsStateSentColor = dialogsStateSentColor ; < nl > } < nl > < nl > + private int dialogsStateDeliveredColor = 0x40000000 ; < nl > + < nl > public int getDialogsStateDeliveredColor ( ) { < nl > return dialogsStateDeliveredColor ; < nl > } < nl > @ @ - 403 , 6 + 284 , 8 @ @ public class ActorStyle { < nl > this . dialogsStateDeliveredColor = dialogsStateDeliveredColor ; < nl > } < nl > < nl > + private int dialogsStateReadColor = 0xff7ea8ef ; < nl > + < nl > public int getDialogsStateReadColor ( ) { < nl > return dialogsStateReadColor ; < nl > } < nl > @ @ - 411 , 6 + 294 , 8 @ @ public class ActorStyle { < nl > this . dialogsStateReadColor = dialogsStateReadColor ; < nl > } < nl > < nl > + private int dialogsStateErrorColor = 0xffd24a43 ; < nl > + < nl > public int getDialogsStateErrorColor ( ) { < nl > return dialogsStateErrorColor ; < nl > } < nl > @ @ - 419 , 67 + 304 , 79 @ @ public class ActorStyle { < nl > this . dialogsStateErrorColor = dialogsStateErrorColor ; < nl > } < nl > < nl > + private int dialogsCounterTextColor = 0 ; < nl > + < nl > + public int getDialogsCounterTextColor ( ) { < nl > + return getColorWithFallback ( dialogsCounterTextColor , getTextPrimaryInvColor ( ) ) ; < nl > + } < nl > + < nl > + public void setDialogsCounterTextColor ( int dialogsCounterTextColor ) { < nl > + this . dialogsCounterTextColor = dialogsCounterTextColor ; < nl > + } < nl > + < nl > + private int dialogsCounterBackgroundColor = 0 ; < nl > + < nl > + public int getDialogsCounterBackgroundColor ( ) { < nl > + return getColorWithFallback ( dialogsCounterBackgroundColor , getPrimaryAltColor ( ) ) ; < nl > + } < nl > + < nl > + public void setDialogsCounterBackgroundColor ( int dialogsCounterBackgroundColor ) { < nl > + this . dialogsCounterBackgroundColor = dialogsCounterBackgroundColor ; < nl > + } < nl > + < nl > + private int dialogsDividerColor = 0 ; < nl > + < nl > public int getDialogsDividerColor ( ) { < nl > - if ( dialogsDividerColor ! = 0 ) { < nl > - return dialogsDividerColor ; < nl > - } else { < nl > - return getDividerColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( dialogsDividerColor , getDividerColor ( ) ) ; < nl > } < nl > < nl > public void setDialogsDividerColor ( int dialogsDividerColor ) { < nl > this . dialogsDividerColor = dialogsDividerColor ; < nl > } < nl > < nl > - public int getDialogsTitleColor ( ) { < nl > - if ( dialogsTitleColor ! = 0 ) { < nl > - return dialogsTitleColor ; < nl > - } else { < nl > - return getTextPrimaryColor ( ) ; < nl > - } < nl > + private int dialogsTitleColor = 0 ; < nl > < nl > + public int getDialogsTitleColor ( ) { < nl > + return getColorWithFallback ( dialogsTitleColor , getTextPrimaryColor ( ) ) ; < nl > } < nl > < nl > public void setDialogsTitleColor ( int dialogsTitleColor ) { < nl > this . dialogsTitleColor = dialogsTitleColor ; < nl > } < nl > < nl > + private int dialogsTextColor = 0 ; < nl > + < nl > public int getDialogsTextColor ( ) { < nl > - if ( dialogsTextColor ! = 0 ) { < nl > - return dialogsTextColor ; < nl > - } else { < nl > - return getTextSecondaryColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( dialogsTextColor , getTextSecondaryColor ( ) ) ; < nl > } < nl > < nl > public void setDialogsTextColor ( int dialogsTextColor ) { < nl > this . dialogsTextColor = dialogsTextColor ; < nl > } < nl > < nl > - public int getDialogsTimeColor ( ) { < nl > - if ( dialogsTimeColor ! = 0 ) { < nl > - return dialogsTimeColor ; < nl > - } else { < nl > - return getTextSecondaryColor ( ) ; < nl > - } < nl > - } < nl > - < nl > - public void setDialogsTimeColor ( int dialogsTimeColor ) { < nl > - this . dialogsTimeColor = dialogsTimeColor ; < nl > - } < nl > + private int dialogsTypingColor = 0 ; < nl > < nl > public int getDialogsTypingColor ( ) { < nl > - if ( dialogsTypingColor ! = 0 ) { < nl > - return dialogsTypingColor ; < nl > - } else { < nl > - return getMainColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( dialogsTypingColor , getMainColor ( ) ) ; < nl > } < nl > < nl > public void setDialogsTypingColor ( int dialogsTypingColor ) { < nl > this . dialogsTypingColor = dialogsTypingColor ; < nl > } < nl > < nl > + private int dialogsActionColor = 0xff5882ac ; < nl > + < nl > + public int getDialogsActiveTextColor ( ) { < nl > + return getColorWithFallback ( dialogsActionColor , getDialogsTextColor ( ) ) ; < nl > + } < nl > + < nl > + public void setDialogsActiveTextColor ( int dialogsActionColor ) { < nl > + this . dialogsActionColor = dialogsActionColor ; < nl > + } < nl > + < nl > + / / Dividers < nl > + private int dividerColor = 0x1E000000 ; < nl > + < nl > public int getDividerColor ( ) { < nl > return dividerColor ; < nl > } < nl > @ @ - 488 , 6 + 385 , 8 @ @ public class ActorStyle { < nl > return dividerInvColor ; < nl > } < nl > < nl > + private int dividerInvColor = 0x1Effffff ; < nl > + < nl > public void setDividerInvColor ( int dividerInvColor ) { < nl > this . dividerInvColor = dividerInvColor ; < nl > } < nl > @ @ - 496 , 6 + 395 , 19 @ @ public class ActorStyle { < nl > this . dividerColor = divider ; < nl > } < nl > < nl > + / / Text colors < nl > + private int textPrimaryInvColor = 0xDEffffff ; < nl > + < nl > + public int getTextPrimaryInvColor ( ) { < nl > + return textPrimaryInvColor ; < nl > + } < nl > + < nl > + public void setTextPrimaryInvColor ( int textPrimaryInvColor ) { < nl > + this . textPrimaryInvColor = textPrimaryInvColor ; < nl > + } < nl > + < nl > + private int textPrimaryColor = 0xDE000000 ; < nl > + < nl > public int getTextPrimaryColor ( ) { < nl > return textPrimaryColor ; < nl > } < nl > @ @ - 504 , 6 + 416 , 8 @ @ public class ActorStyle { < nl > this . textPrimaryColor = textPrimaryColor ; < nl > } < nl > < nl > + private int textSecondaryColor = 0x7A000000 ; < nl > + < nl > public int getTextSecondaryColor ( ) { < nl > return textSecondaryColor ; < nl > } < nl > @ @ - 512 , 18 + 426 , 18 @ @ public class ActorStyle { < nl > this . textSecondaryColor = textSecondaryColor ; < nl > } < nl > < nl > + private int textSecondaryAccentColor = 0 ; < nl > + < nl > public int getTextSecondaryAccentColor ( ) { < nl > - if ( textSecondaryAccentColor ! = 0 ) { < nl > - return getTextSecondaryColor ( ) ; < nl > - } else { < nl > - return textSecondaryAccentColor ; < nl > - } < nl > + return getColorWithFallback ( textSecondaryAccentColor , getTextSecondaryColor ( ) ) ; < nl > } < nl > < nl > public void setTextSecondaryAccentColor ( int textSecondaryAccentColor ) { < nl > this . textSecondaryAccentColor = textSecondaryAccentColor ; < nl > } < nl > < nl > + private int textHintColor = 0x42000000 ; < nl > + < nl > public int getTextHintColor ( ) { < nl > return textHintColor ; < nl > } < nl > @ @ - 532 , 6 + 446 , 8 @ @ public class ActorStyle { < nl > this . textHintColor = textHintColor ; < nl > } < nl > < nl > + private int textSubHeaderColor = 0x6F000000 ; < nl > + < nl > public int getTextSubHeaderColor ( ) { < nl > return textSubHeaderColor ; < nl > } < nl > @ @ - 540 , 6 + 456 , 8 @ @ public class ActorStyle { < nl > this . textSubHeaderColor = textSubHeaderColor ; < nl > } < nl > < nl > + private int textSecondaryInvColor = 0x8Affffff ; < nl > + < nl > public int getTextSecondaryInvColor ( ) { < nl > return textSecondaryInvColor ; < nl > } < nl > @ @ - 548 , 6 + 466 , 8 @ @ public class ActorStyle { < nl > this . textSecondaryInvColor = textSecondaryInvColor ; < nl > } < nl > < nl > + private int textHintInvColor = 0x42ffffff ; < nl > + < nl > public int getTextHintInvColor ( ) { < nl > return textHintInvColor ; < nl > } < nl > @ @ - 556 , 6 + 476 , 8 @ @ public class ActorStyle { < nl > this . textHintInvColor = textHintInvColor ; < nl > } < nl > < nl > + private int textSubheaderInvColor = 0x8Fffffff ; < nl > + < nl > public int getTextSubheaderInvColor ( ) { < nl > return textSubheaderInvColor ; < nl > } < nl > @ @ - 564 , 18 + 486 , 19 @ @ public class ActorStyle { < nl > this . textSubheaderInvColor = textSubheaderInvColor ; < nl > } < nl > < nl > - public int getListActionColor ( ) { < nl > - if ( listActionColor ! = 0 ) { < nl > - return listActionColor ; < nl > - } else { < nl > - return getMainColor ( ) ; < nl > - } < nl > + / / Settings < nl > + private int settingsMainTitleColor = 0 ; < nl > + < nl > + public int getSettingsMainTitleColor ( ) { < nl > + return getColorWithFallback ( settingsMainTitleColor , getListActionColor ( ) ) ; < nl > } < nl > < nl > - public void setListActionColor ( int listActionColor ) { < nl > - this . listActionColor = listActionColor ; < nl > + public void setSettingsMainTitleColor ( int settingsMainTitleColor ) { < nl > + this . settingsMainTitleColor = settingsMainTitleColor ; < nl > } < nl > < nl > + private int sectonIconSmallColor = 0xffb5b6b7 ; < nl > + < nl > public int getSectonIconSmallColor ( ) { < nl > return sectonIconSmallColor ; < nl > } < nl > @ @ - 584 , 182 + 507 , 162 @ @ public class ActorStyle { < nl > this . sectonIconSmallColor = sectonIconSmallColor ; < nl > } < nl > < nl > + private int sectionIconLargeColor = 0 ; < nl > + < nl > public int getSectionIconLargeColor ( ) { < nl > - if ( sectionIconLargeColor ! = 0 ) { < nl > - return sectionIconLargeColor ; < nl > - } else { < nl > - return getMainColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( sectionIconLargeColor , getMainColor ( ) ) ; < nl > } < nl > < nl > public void setSectionIconLargeColor ( int sectionIconLargeColor ) { < nl > this . sectionIconLargeColor = sectionIconLargeColor ; < nl > } < nl > < nl > - public int getSettingsMainTitleColor ( ) { < nl > - if ( listActionColor ! = 0 ) { < nl > - return listActionColor ; < nl > - } else { < nl > - return getSettingsCategoryTextColor ( ) ; < nl > - } < nl > - } < nl > - < nl > - public void setSettingsMainTitleColor ( int settingsMainTitleColor ) { < nl > - this . settingsMainTitleColor = settingsMainTitleColor ; < nl > - } < nl > + private int settingsIconColor = 0 ; < nl > < nl > public int getSettingsIconColor ( ) { < nl > - if ( settingsIconColor ! = 0 ) { < nl > - return settingsIconColor ; < nl > - } else { < nl > - return getSectonIconSmallColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( settingsIconColor , getSectonIconSmallColor ( ) ) ; < nl > } < nl > < nl > public void setSettingsIconColor ( int settingsIconColor ) { < nl > this . settingsIconColor = settingsIconColor ; < nl > } < nl > < nl > + private int settingsTitleColor = 0 ; < nl > + < nl > public int getSettingsTitleColor ( ) { < nl > - if ( settingsTitleColor ! = 0 ) { < nl > - return settingsTitleColor ; < nl > - } else { < nl > - return getTextPrimaryColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( settingsTitleColor , getTextPrimaryColor ( ) ) ; < nl > } < nl > < nl > public void setSettingsTitleColor ( int settingsTitleColor ) { < nl > this . settingsTitleColor = settingsTitleColor ; < nl > } < nl > < nl > + private int settingsSubtitleColor = 0 ; < nl > + < nl > public int getSettingsSubtitleColor ( ) { < nl > - if ( settingsSubtitleColor ! = 0 ) { < nl > - return settingsSubtitleColor ; < nl > - } else { < nl > - return getTextSecondaryColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( settingsSubtitleColor , getTextSecondaryColor ( ) ) ; < nl > } < nl > < nl > public void setSettingsSubtitleColor ( int settingsSubtitleColor ) { < nl > this . settingsSubtitleColor = settingsSubtitleColor ; < nl > } < nl > < nl > + private int settingsCategoryTextColor = 0 ; < nl > + < nl > + public int getSettingsCategoryTextColor ( ) { < nl > + return getColorWithFallback ( settingsCategoryTextColor , getMainColor ( ) ) ; < nl > + } < nl > + < nl > + public void setSettingsCategoryTextColor ( int settingsCategoryTextColor ) { < nl > + this . settingsCategoryTextColor = settingsCategoryTextColor ; < nl > + } < nl > + < nl > + / / Profile < nl > + private int profileTitleColor = 0 ; < nl > + < nl > public int getProfileTitleColor ( ) { < nl > - if ( profileTitleColor ! = 0 ) { < nl > - return profileTitleColor ; < nl > - } else { < nl > - return getTextPrimaryInvColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( profileTitleColor , getTextPrimaryInvColor ( ) ) ; < nl > } < nl > < nl > public void setProfileTitleColor ( int profileTitleColor ) { < nl > this . profileTitleColor = profileTitleColor ; < nl > } < nl > < nl > + private int profileSubtitleColor = 0 ; < nl > + < nl > public int getProfileSubtitleColor ( ) { < nl > - if ( profileSubtitleColor ! = 0 ) { < nl > - return profileSubtitleColor ; < nl > - } else { < nl > - return getTextSecondaryInvColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( profileSubtitleColor , getTextSecondaryInvColor ( ) ) ; < nl > } < nl > < nl > public void setProfileSubtitleColor ( int profileSubtitleColor ) { < nl > this . profileSubtitleColor = profileSubtitleColor ; < nl > } < nl > < nl > + private int profileIconColor = 0 ; < nl > + < nl > public int getProfilleIconColor ( ) { < nl > - if ( profileIconColor ! = 0 ) { < nl > - return profileIconColor ; < nl > - } else { < nl > - return getSectionIconLargeColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( profileIconColor , getSectionIconLargeColor ( ) ) ; < nl > + < nl > } < nl > < nl > public void setProfilleIconColor ( int profilleIconColor ) { < nl > this . profileIconColor = profilleIconColor ; < nl > } < nl > < nl > + private int profileContactIconColor = 0 ; < nl > + < nl > public int getProfileContactIconColor ( ) { < nl > - if ( profileContactIconColor ! = 0 ) { < nl > - return profileContactIconColor ; < nl > - } else { < nl > - return getListActionColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( profileContactIconColor , getListActionColor ( ) ) ; < nl > } < nl > < nl > public void setProfileContactIconColor ( int profileContactIconColor ) { < nl > this . profileContactIconColor = profileContactIconColor ; < nl > } < nl > < nl > + private int profileRecordIconTintColor = 0 ; < nl > + < nl > + public int getProfileRecordIconTintColor ( ) { < nl > + return getColorWithFallback ( profileRecordIconTintColor , getMainColor ( ) ) ; < nl > + } < nl > + < nl > + public void setProfileRecordIconTintColor ( int profileRecordIconTintColor ) { < nl > + this . profileRecordIconTintColor = profileRecordIconTintColor ; < nl > + } < nl > + < nl > + / / Group Profile < nl > + private int groupAdminColor = 0 ; < nl > + < nl > public int getGroupAdminColor ( ) { < nl > - if ( groupAdminColor ! = 0 ) { < nl > - return groupAdminColor ; < nl > - } else { < nl > - return getAccentColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( groupAdminColor , getAccentColor ( ) ) ; < nl > } < nl > < nl > public void setGroupAdminColor ( int groupAdminColor ) { < nl > this . groupAdminColor = groupAdminColor ; < nl > } < nl > < nl > + private int groupActionAddIconColor = 0 ; < nl > + < nl > public int getGroupActionAddIconColor ( ) { < nl > - if ( groupActionAddIconColor ! = 0 ) { < nl > - return groupActionAddIconColor ; < nl > - } else { < nl > - return getListActionColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( groupActionAddIconColor , getListActionColor ( ) ) ; < nl > } < nl > < nl > public void setGroupActionAddIconColor ( int groupActionAddIconColor ) { < nl > this . groupActionAddIconColor = groupActionAddIconColor ; < nl > } < nl > < nl > + private int groupActionAddTextColor = 0 ; < nl > + < nl > public int getGroupActionAddTextColor ( ) { < nl > - if ( groupActionAddTextColor ! = 0 ) { < nl > - return groupActionAddTextColor ; < nl > - } else { < nl > - return getListActionColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( groupActionAddTextColor , getListActionColor ( ) ) ; < nl > } < nl > < nl > public void setGroupActionAddTextColor ( int groupActionAddTextColor ) { < nl > this . groupActionAddTextColor = groupActionAddTextColor ; < nl > } < nl > < nl > - public int getContactDividerColor ( ) { < nl > - if ( contactDividerColor ! = 0 ) { < nl > - return contactDividerColor ; < nl > - } else { < nl > - return getDividerColor ( ) ; < nl > - } < nl > - } < nl > + private int groupOnlineColor = 0xff7ea8ef ; < nl > < nl > - public void setContactDividerColor ( int contactDividerColor ) { < nl > - this . contactDividerColor = contactDividerColor ; < nl > + public int getGroupOnlineColor ( ) { < nl > + return groupOnlineColor ; < nl > } < nl > < nl > - public int getMainFabbgColor ( ) { < nl > - return mainFabbgColor ; < nl > + public void setGroupOnlineColor ( int groupOnlineColor ) { < nl > + this . groupOnlineColor = groupOnlineColor ; < nl > } < nl > < nl > - public void setMainFabbgColor ( int mainFabbgColor ) { < nl > - this . mainFabbgColor = mainFabbgColor ; < nl > - } < nl > + / / Conversation < nl > + private int convSendEnabledColor = 0 ; < nl > < nl > public int getConvSendEnabledColor ( ) { < nl > - if ( convSendEnabledColor ! = 0 ) { < nl > - return convSendEnabledColor ; < nl > - } else { < nl > - return getMainColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( convSendEnabledColor , getMainColor ( ) ) ; < nl > } < nl > < nl > public void setConvSendEnabledColor ( int convSendEnabledColor ) { < nl > this . convSendEnabledColor = convSendEnabledColor ; < nl > } < nl > < nl > + private int convSendDisabledColor = 0x42000000 ; < nl > + < nl > public int getConvSendDisabledColor ( ) { < nl > return convSendDisabledColor ; < nl > } < nl > @ @ - 768 , 6 + 671 , 8 @ @ public class ActorStyle { < nl > this . convSendDisabledColor = convSendDisabledColor ; < nl > } < nl > < nl > + private int convDateLineColor = 0x14000000 ; < nl > + < nl > public int getConvDateLineColor ( ) { < nl > return convDateLineColor ; < nl > } < nl > @ @ - 776 , 6 + 681 , 8 @ @ public class ActorStyle { < nl > this . convDateLineColor = convDateLineColor ; < nl > } < nl > < nl > + private int convDatetextColor = 0xffffffff ; < nl > + < nl > public int getConvDatetextColor ( ) { < nl > return convDatetextColor ; < nl > } < nl > @ @ - 784 , 6 + 691 , 8 @ @ public class ActorStyle { < nl > this . convDatetextColor = convDatetextColor ; < nl > } < nl > < nl > + private int convDateBgColor = 0x99000000 ; < nl > + < nl > public int getConvDateBgColor ( ) { < nl > return convDateBgColor ; < nl > } < nl > @ @ - 792 , 18 + 701 , 18 @ @ public class ActorStyle { < nl > this . convDateBgColor = convDateBgColor ; < nl > } < nl > < nl > + private int convTextColor = 0 ; < nl > + < nl > public int getConvTextColor ( ) { < nl > - if ( convTextColor ! = 0 ) { < nl > - return convTextColor ; < nl > - } else { < nl > - return getTextPrimaryColor ( ) ; < nl > - } < nl > + return getColorWithFallback ( convTextColor , getTextPrimaryColor ( ) ) ; < nl > } < nl > < nl > public void setConvTextColor ( int convTextColor ) { < nl > this . convTextColor = convTextColor ; < nl > } < nl > < nl > + private int convTimeColor = 0x60000000 ; < nl > + < nl > public int getConvTimeColor ( ) { < nl > return convTimeColor ; < nl > } < nl > @ @ - 812 , 6 + 721 , 8 @ @ public class ActorStyle { < nl > this . convTimeColor = convTimeColor ; < nl > } < nl > < nl > + private int convStatePendingColor = 0x40000000 ; < nl > + < nl > public int getConvStatePendingColor ( ) { < nl > return convStatePendingColor ; < nl > } < nl > @ @ - 820 , 6 + 731 , 8 @ @ public class ActorStyle { < nl > this . convStatePendingColor = convStatePendingColor ; < nl > } < nl > < nl > + private int convStateSentColor = 0x40000000 ; < nl > + < nl > public int getConvStateSentColor ( ) { < nl > return convStateSentColor ; < nl > } < nl > @ @ - 828 , 6 + 741 , 8 @ @ public class ActorStyle { < nl > this . convStateSentColor = convStateSentColor ; < nl > } < nl > < nl > + private int convStateDeliveredColor = 0x40000000 ; < nl > + < nl > public int getConvStateDeliveredColor ( ) { < nl > return convStateDeliveredColor ; < nl > } < nl > @ @ - 836 , 6 + 751 , 8 @ @ public class ActorStyle { < nl > this . convStateDeliveredColor = convStateDeliveredColor ; < nl > } < nl > < nl > + private int convStateReadColor = 0xff7ea8ef ; < nl > + < nl > public int getConvStateReadColor ( ) { < nl > return convStateReadColor ; < nl > } < nl > @ @ - 844 , 6 + 761 , 8 @ @ public class ActorStyle { < nl > this . convStateReadColor = convStateReadColor ; < nl > } < nl > < nl > + private int convStateErrorColor = 0xffd24a43 ; < nl > + < nl > public int getConvStateErrorColor ( ) { < nl > return convStateErrorColor ; < nl > } < nl > @ @ - 852 , 6 + 771 , 8 @ @ public class ActorStyle { < nl > this . convStateErrorColor = convStateErrorColor ; < nl > } < nl > < nl > + private int convStateWarrningColor = 0xffd24a43 ; < nl > + < nl > public int getConvStateWarrningColor ( ) { < nl > return convStateWarrningColor ; < nl > } < nl > @ @ - 860 , 6 + 781 , 8 @ @ public class ActorStyle { < nl > this . convStateWarrningColor = convStateWarrningColor ; < nl > } < nl > < nl > + private int convMediaDateBgColor = 0x99000000 ; < nl > + < nl > public int getConvMediaDateBgColor ( ) { < nl > return convMediaDateBgColor ; < nl > } < nl > @ @ - 868 , 6 + 791 , 8 @ @ public class ActorStyle { < nl > this . convMediaDateBgColor = convMediaDateBgColor ; < nl > } < nl > < nl > + private int convMediaStatePendingColor = 0xffffffff ; < nl > + < nl > public int getConvMediaStatePendingColor ( ) { < nl > return convMediaStatePendingColor ; < nl > } < nl > @ @ - 876 , 6 + 801 , 8 @ @ public class ActorStyle { < nl > this . convMediaStatePendingColor = convMediaStatePendingColor ; < nl > } < nl > < nl > + private int convMediaStateSentColor = 0xffffffff ; < nl > + < nl > public int getConvMediaStateSentColor ( ) { < nl > return convMediaStateSentColor ; < nl > } < nl > @ @ - 884 , 6 + 811 , 8 @ @ public class ActorStyle { < nl > this . convMediaStateSentColor = convMediaStateSentColor ; < nl > } < nl > < nl > + private int convMediaStateDeliveredColor = 0xffffffff ; < nl > + < nl > public int getConvMediaStateDeliveredColor ( ) { < nl > return convMediaStateDeliveredColor ; < nl > } < nl > @ @ - 892 , 6 + 821 , 8 @ @ public class ActorStyle { < nl > this . convMediaStateDeliveredColor = convMediaStateDeliveredColor ; < nl > } < nl > < nl > + private int convMediaStateReadColor = 0xff7ea8ef ; < nl > + < nl > public int getConvMediaStateReadColor ( ) { < nl > return convMediaStateReadColor ; < nl > } < nl > @ @ - 900 , 6 + 831 , 8 @ @ public class ActorStyle { < nl > this . convMediaStateReadColor = convMediaStateReadColor ; < nl > } < nl > < nl > + private int convMediaStateErrorColor = 0xffed534b ; < nl > + < nl > public int getConvMediaStateErrorColor ( ) { < nl > return convMediaStateErrorColor ; < nl > } < nl > @ @ - 908 , 6 + 841 , 8 @ @ public class ActorStyle { < nl > this . convMediaStateErrorColor = convMediaStateErrorColor ; < nl > } < nl > < nl > + private int convMediaStateWarrningColor = 0xffed534b ; < nl > + < nl > public int getConvMediaStateWarrningColor ( ) { < nl > return convMediaStateWarrningColor ; < nl > } < nl > @ @ - 916 , 17 + 851 , 7 @ @ public class ActorStyle { < nl > this . convMediaStateWarrningColor = convMediaStateWarrningColor ; < nl > } < nl > < nl > - public static int getDarkenArgb ( int color , double percent ) { < nl > - return Color . argb ( Color . alpha ( color ) , ( int ) Math . round ( Color . red ( color ) * percent ) , ( int ) Math . round ( Color . green ( color ) * percent ) , ( int ) Math . round ( Color . blue ( color ) * percent ) ) ; < nl > - } < nl > - < nl > - public int getGroupOnlineColor ( ) { < nl > - return groupOnlineColor ; < nl > - } < nl > - < nl > - public void setGroupOnlineColor ( int groupOnlineColor ) { < nl > - this . groupOnlineColor = groupOnlineColor ; < nl > - } < nl > + private int convLikeColor = 0xffe2264d ; < nl > < nl > public int getConvLikeColor ( ) { < nl > return convLikeColor ; < nl > @ @ - 936 , 27 + 861 , 54 @ @ public class ActorStyle { < nl > this . convLikeColor = convLikeColor ; < nl > } < nl > < nl > - public int [ ] getDefaultBackgrouds ( ) { < nl > - return defaultBackgrouds ; < nl > + / / < nl > + / / Color utils < nl > + / / < nl > + < nl > + public int getMainPressedColor ( ) { < nl > + return getDarkenArgb ( getMainColor ( ) , 0 . 95 ) ; < nl > } < nl > < nl > - public void setDefaultBackgrouds ( int [ ] defaultBackgrouds ) { < nl > - this . defaultBackgrouds = defaultBackgrouds ; < nl > + public static int getDarkenArgb ( int color , double percent ) { < nl > + return Color . argb ( Color . alpha ( color ) , ( int ) Math . round ( Color . red ( color ) * percent ) , ( int ) Math . round ( Color . green ( color ) * percent ) , ( int ) Math . round ( Color . blue ( color ) * percent ) ) ; < nl > + } < nl > + < nl > + / * * < nl > + * Get color with fallback to default - if color is 0 , returns fallback color < nl > + * < nl > + * @ param baseColor base color < nl > + * @ param fallbackColor fallback color < nl > + * @ return base or fallback color if base color is set to 0 < nl > + * / < nl > + public int getColorWithFallback ( int baseColor , int fallbackColor ) { < nl > + if ( baseColor ! = 0 ) { < nl > + return baseColor ; < nl > + } else { < nl > + return fallbackColor ; < nl > + } < nl > } < nl > < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + / / DIMENSIONS / / < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + < nl > + / / DialogsFragment layout settings < nl > + private int dialogsPaddingTop = Screen . dp ( 8 ) ; < nl > public int getDialogsPaddingTop ( ) { < nl > return dialogsPaddingTop ; < nl > } < nl > - < nl > public void setDialogsPaddingTop ( int dialogsPaddingTop ) { < nl > this . dialogsPaddingTop = dialogsPaddingTop ; < nl > } < nl > < nl > + / / ContactsFragment layout settings < nl > + private int contactsMainPaddingTop = 0 ; < nl > + < nl > public int getContactsMainPaddingTop ( ) { < nl > return contactsMainPaddingTop ; < nl > } < nl > - < nl > public void setContactsMainPaddingTop ( int contactsMainPaddingTop ) { < nl > this . contactsMainPaddingTop = contactsMainPaddingTop ; < nl > } < nl > + < nl > }
NEAREST DIFF (one line): diff - - git a / apps / actor - android / src / main / java / im / actor / messenger / app / fragment / auth / BackspaceKeyEditText . java b / apps / actor - android / src / main / java / im / actor / messenger / app / fragment / auth / BackspaceKeyEditText . java < nl > index e785ae6 . . 2b0ec15 100644 < nl > - - - a / apps / actor - android / src / main / java / im / actor / messenger / app / fragment / auth / BackspaceKeyEditText . java < nl > + + + b / apps / actor - android / src / main / java / im / actor / messenger / app / fragment / auth / BackspaceKeyEditText . java < nl > @ @ - 1 , 7 + 1 , 6 @ @ < nl > package im . actor . messenger . app . fragment . auth ; < nl > < nl > import android . content . Context ; < nl > - import android . support . v7 . internal . widget . TintEditText ; < nl > import android . util . AttributeSet ; < nl > import android . view . KeyEvent ; < nl > import android . view . inputmethod . EditorInfo ; < nl > @ @ - 9 , 7 + 8 , 7 @ @ import android . view . inputmethod . InputConnection ; < nl > import android . view . inputmethod . InputConnectionWrapper ; < nl > import android . widget . EditText ; < nl > < nl > - public class BackspaceKeyEditText extends TintEditText { < nl > + public class BackspaceKeyEditText extends EditText { < nl > < nl > private BackspacePressListener listener ; < nl > < nl > diff - - git a / apps / actor - android / src / main / res / values / styles . xml b / apps / actor - android / src / main / res / values / styles . xml < nl > index c3ac8ae . . 8572f57 100644 < nl > - - - a / apps / actor - android / src / main / res / values / styles . xml < nl > + + + b / apps / actor - android / src / main / res / values / styles . xml < nl > @ @ - 11 , 12 + 11 , 17 @ @ < nl > < item name = " android : colorPrimary " > @ color / primary < / item > < nl > < item name = " android : colorPrimaryDark " > @ color / primary _ hovered < / item > < nl > < item name = " android : colorAccent " > @ color / accent < / item > < nl > + < nl > + < nl > < / style > < nl > < nl > < style name = " MainActivityTheme " parent = " AppToolbarTheme " > < nl > + < item name = " android : windowBackground " > @ color / bg _ main < / item > < nl > + < nl > < item name = " windowActionBar " > false < / item > < nl > + < item name = " windowNoTitle " > true < / item > < nl > < item name = " android : windowActionBar " > false < / item > < nl > - < item name = " android : windowBackground " > @ color / bg _ main < / item > < nl > + < item name = " android : windowNoTitle " > true < / item > < nl > < / style > < nl > < nl > < style name = " ProfileActivityTheme " parent = " AppToolbarTheme " > < nl > diff - - git a / library / actor - common / src / main / java / im / actor / model / network / connection / AsyncConnectionFactory . java b / library / actor - common / src / main / java / im / actor / model / network / connection / AsyncConnectionFactory . java < nl > index 986847f . . 2c281d8 100644 < nl > - - - a / library / actor - common / src / main / java / im / actor / model / network / connection / AsyncConnectionFactory . java < nl > + + + b / library / actor - common / src / main / java / im / actor / model / network / connection / AsyncConnectionFactory . java < nl > @ @ - 6 , 5 + 6 , 5 @ @ import im . actor . model . network . ConnectionEndpoint ; < nl > * Created by ex3ndr on 29 . 04 . 15 . < nl > * / < nl > public interface AsyncConnectionFactory { < nl > - AsyncConnection createConnection ( ConnectionEndpoint endpoint , AsyncConnectionInterface connectionInterface ) ; < nl > + AsyncConnection createConnection ( int connectionId , ConnectionEndpoint endpoint , AsyncConnectionInterface connectionInterface ) ; < nl > } < nl > diff - - git a / library / actor - common / src / main / java / im / actor / model / network / connection / ManagedConnection . java b / library / actor - common / src / main / java / im / actor / model / network / connection / ManagedConnection . java < nl > index 6b9e800 . . 6896cdb 100644 < nl > - - - a / library / actor - common / src / main / java / im / actor / model / network / connection / ManagedConnection . java < nl > + + + b / library / actor - common / src / main / java / im / actor / model / network / connection / ManagedConnection . java < nl > @ @ - 20 , 7 + 20 , 7 @ @ import im . actor . model . util . CRC32 ; < nl > * / < nl > public class ManagedConnection implements Connection { < nl > < nl > - private static final int CONNECTION _ TIMEOUT = 5 * 1000 ; < nl > + public static final int CONNECTION _ TIMEOUT = 5 * 1000 ; < nl > private static final int HANDSHAKE _ TIMEOUT = 5 * 1000 ; < nl > private static final int RESPONSE _ TIMEOUT = 5 * 1000 ; < nl > private static final int PING _ TIMEOUT = 5 * 60 * 1000 ; < nl > @ @ - 76 , 7 + 76 , 7 @ @ public class ManagedConnection implements Connection { < nl > this . apiMinorVersion = apiMinorVersion ; < nl > this . callback = callback ; < nl > this . factoryCallback = factoryCallback ; < nl > - this . rawConnection = connectionFactory . createConnection ( endpoint , connectionInterface ) ; < nl > + this . rawConnection = connectionFactory . createConnection ( connectionId , endpoint , connectionInterface ) ; < nl > Log . d ( TAG , " Starting connection " ) ; < nl > < nl > handshakeTimeout = new TimerCompat ( new TimeoutRunnable ( ) ) ; < nl > @ @ - 335 , 9 + 335 , 12 @ @ public class ManagedConnection implements Connection { < nl > e . printStackTrace ( ) ; < nl > close ( ) ; < nl > } < nl > + < nl > + Log . w ( TAG , " onRawReceived : end " ) ; < nl > } < nl > < nl > private synchronized void onRawClosed ( ) { < nl > + Log . w ( TAG , " Received closed event " ) ; < nl > close ( ) ; < nl > } < nl > < nl > @ @ - 348 , 6 + 351 , 7 @ @ public class ManagedConnection implements Connection { < nl > } < nl > < nl > private synchronized void rawPost ( int header , byte [ ] data , int offset , int len ) { < nl > + Log . w ( TAG , " rawPost " ) ; < nl > int packageId = sentPackages + + ; < nl > DataOutput dataOutput = new DataOutput ( ) ; < nl > dataOutput . writeInt ( packageId ) ; < nl > @ @ - 371 , 6 + 375 , 7 @ @ public class ManagedConnection implements Connection { < nl > < nl > @ Override < nl > public synchronized void post ( byte [ ] data , int offset , int len ) { < nl > + Log . w ( TAG , " post " ) ; < nl > if ( isClosed ) { < nl > return ; < nl > } < nl > @ @ - 389 , 6 + 394 , 7 @ @ public class ManagedConnection implements Connection { < nl > < nl > @ Override < nl > public synchronized void close ( ) { < nl > + Log . w ( TAG , " close " ) ; < nl > if ( isClosed ) { < nl > return ; < nl > } < nl > diff - - git a / library / actor - js / src / main / java / im / actor / model / js / providers / websocket / WebSocketConnection . java b / library / actor - js / src / main / java / im / actor / model / js / providers / websocket / WebSocketConnection . java < nl > index a768087 . . f9703b6 100644 < nl > - - - a / library / actor - js / src / main / java / im / actor / model / js / providers / websocket / WebSocketConnection . java < nl > + + + b / library / actor - js / src / main / java / im / actor / model / js / providers / websocket / WebSocketConnection . java < nl > @ @ - 16 , 6 + 16 , 7 @ @ import im . actor . model . network . connection . AsyncConnectionInterface ; < nl > public class WebSocketConnection extends AsyncConnection { < nl > < nl > private JavaScriptObject jsWebSocket ; < nl > + private boolean isClosed ; < nl > < nl > public WebSocketConnection ( ConnectionEndpoint endpoint , AsyncConnectionInterface connection ) { < nl > super ( endpoint , connection ) ; < nl > @ @ - 23 , 6 + 24 , 8 @ @ public class WebSocketConnection extends AsyncConnection { < nl > < nl > @ Override < nl > public void doConnect ( ) { < nl > + isClosed = true ; < nl > + < nl > String url ; < nl > if ( getEndpoint ( ) . getType ( ) = = ConnectionEndpoint . Type . WS ) { < nl > url = " ws : / / " + getEndpoint ( ) . getHost ( ) + " : " + getEndpoint ( ) . getPort ( ) + " / " ; < nl > @ @ - 37 , 6 + 40 , 9 @ @ public class WebSocketConnection extends AsyncConnection { < nl > < nl > @ Override < nl > public void doSend ( byte [ ] data ) { < nl > + if ( isClosed ) { < nl > + return ; < nl > + } < nl > Uint8Array push = TypedArrays . createUint8Array ( data . length ) ; < nl > for ( int i = 0 ; i < data . length ; i + + ) { < nl > push . set ( i , data [ i ] ) ; < nl > @ @ - 46 , 10 + 52 , 14 @ @ public class WebSocketConnection extends AsyncConnection { < nl > < nl > @ Override < nl > public void doClose ( ) { < nl > + isClosed = true ; < nl > close ( ) ; < nl > } < nl > < nl > private void onRawMessage ( ArrayBuffer message ) { < nl > + if ( isClosed ) { < nl > + return ; < nl > + } < nl > Uint8Array array = TypedArrays . createUint8Array ( message ) ; < nl > byte [ ] res = new byte [ array . length ( ) ] ; < nl > for ( int i = 0 ; i < res . length ; i + + ) { < nl > @ @ - 60 , 11 + 70 , 13 @ @ public class WebSocketConnection extends AsyncConnection { < nl > < nl > private void onRawConnected ( ) { < nl > Log . d ( " WS " , " Connected " ) ; < nl > + isClosed = false ; < nl > onConnected ( ) ; < nl > } < nl > < nl > private void onRawClosed ( ) { < nl > Log . d ( " WS " , " Closed " ) ; < nl > + isClosed = true ; < nl > onClosed ( ) ; < nl > } < nl > < nl > diff - - git a / library / actor - jvm / src / main / java / im / actor / model / jvm / JavaNetworkProvider . java b / library / actor - jvm / src / main / java / im / actor / model / jvm / JavaNetworkProvider . java < nl > index 2cc9e64 . . f1049db 100644 < nl > - - - a / library / actor - jvm / src / main / java / im / actor / model / jvm / JavaNetworkProvider . java < nl > + + + b / library / actor - jvm / src / main / java / im / actor / model / jvm / JavaNetworkProvider . java < nl > @ @ - 1 , 39 + 1 , 14 @ @ < nl > package im . actor . model . jvm ; < nl > < nl > - import im . actor . model . NetworkProvider ; < nl > - import im . actor . model . network . ConnectionCallback ; < nl > - import im . actor . model . network . ConnectionEndpoint ; < nl > - import im . actor . model . network . CreateConnectionCallback ; < nl > + import im . actor . model . jvm . tcp . AsyncTcpConnectionFactory ; < nl > + import im . actor . model . network . connection . ManagedNetworkProvider ; < nl > < nl > / * * < nl > * Created by ex3ndr on 13 . 04 . 15 . < nl > * / < nl > - public class JavaNetworkProvider implements NetworkProvider { < nl > + public class JavaNetworkProvider extends ManagedNetworkProvider { < nl > < nl > - @ Override < nl > - public void createConnection ( final int connectionId , < nl > - final int mtprotoVersion , < nl > - final int apiMajorVersion , < nl > - final int apiMinorVersion , < nl > - final ConnectionEndpoint endpoint , final ConnectionCallback callback , < nl > - final CreateConnectionCallback createCallback ) { < nl > - new Thread ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - try { < nl > - createCallback . onConnectionCreated ( < nl > - new JavaTcpConnection ( < nl > - connectionId , < nl > - mtprotoVersion , < nl > - apiMajorVersion , < nl > - apiMinorVersion , < nl > - endpoint , < nl > - callback ) ) ; < nl > - } catch ( Exception e ) { < nl > - e . printStackTrace ( ) ; < nl > - createCallback . onConnectionCreateError ( ) ; < nl > - } < nl > - } < nl > - } . start ( ) ; < nl > + public JavaNetworkProvider ( ) { < nl > + super ( new AsyncTcpConnectionFactory ( ) ) ; < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / library / actor - jvm / src / main / java / im / actor / model / jvm / JavaTcpConnection . java b / library / actor - jvm / src / main / java / im / actor / model / jvm / JavaTcpConnection . java < nl > deleted file mode 100644 < nl > index eee1ea8 . . 0000000 < nl > - - - a / library / actor - jvm / src / main / java / im / actor / model / jvm / JavaTcpConnection . java < nl > + + + / dev / null < nl > @ @ - 1 , 545 + 0 , 0 @ @ < nl > - package im . actor . model . jvm ; < nl > - < nl > - import java . io . IOException ; < nl > - import java . io . InputStream ; < nl > - import java . io . OutputStream ; < nl > - import java . net . InetSocketAddress ; < nl > - import java . net . Socket ; < nl > - import java . util . Arrays ; < nl > - import java . util . HashMap ; < nl > - import java . util . Random ; < nl > - import java . util . Timer ; < nl > - import java . util . TimerTask ; < nl > - import java . util . concurrent . ConcurrentLinkedQueue ; < nl > - < nl > - import javax . net . ssl . SSLSocketFactory ; < nl > - < nl > - import im . actor . model . crypto . CryptoUtils ; < nl > - import im . actor . model . droidkit . bser . DataInput ; < nl > - import im . actor . model . droidkit . bser . DataOutput ; < nl > - import im . actor . model . log . Log ; < nl > - import im . actor . model . network . Connection ; < nl > - import im . actor . model . network . ConnectionCallback ; < nl > - import im . actor . model . network . ConnectionEndpoint ; < nl > - import im . actor . model . util . CRC32 ; < nl > - < nl > - / * * < nl > - * Created by ex3ndr on 13 . 04 . 15 . < nl > - * / < nl > - public class JavaTcpConnection implements Connection { < nl > - < nl > - private static final int CONNECTION _ TIMEOUT = 5 * 1000 ; < nl > - private static final int HANDSHAKE _ TIMEOUT = 5 * 1000 ; < nl > - private static final int RESPONSE _ TIMEOUT = 5 * 1000 ; < nl > - private static final int PING _ TIMEOUT = 5 * 60 * 1000 ; < nl > - < nl > - private static final int HEADER _ PROTO = 0 ; < nl > - private static final int HEADER _ PING = 1 ; < nl > - private static final int HEADER _ PONG = 2 ; < nl > - private static final int HEADER _ DROP = 3 ; < nl > - private static final int HEADER _ REDIRECT = 4 ; < nl > - private static final int HEADER _ ACK = 6 ; < nl > - < nl > - private static final Random RANDOM = new Random ( ) ; < nl > - private static final Timer DIE _ TIMER = new Timer ( ) ; < nl > - < nl > - private final String TAG ; < nl > - private final ConnectionCallback callback ; < nl > - private final Socket socket ; < nl > - private final InputStream inputStream ; < nl > - private final OutputStream outputStream ; < nl > - private final ReaderThread readerThread ; < nl > - private final WriterThread writerThread ; < nl > - private TimerTask pingTask ; < nl > - private final HashMap < Long , TimerTask > schedulledPings = new HashMap < Long , TimerTask > ( ) ; < nl > - private final HashMap < Integer , TimerTask > packageTimers = new HashMap < Integer , TimerTask > ( ) ; < nl > - < nl > - / / Connection state < nl > - private int sentPackets ; < nl > - private int receivedPackets ; < nl > - private boolean isClosed ; < nl > - < nl > - public JavaTcpConnection ( int id , < nl > - int mtprotoVersion , < nl > - int apiMajorVersion , < nl > - int apiMinorVersion , < nl > - ConnectionEndpoint endpoint , < nl > - ConnectionCallback callback ) throws IOException { < nl > - this . TAG = " Connection # " + id ; < nl > - this . callback = callback ; < nl > - this . isClosed = false ; < nl > - this . sentPackets = 0 ; < nl > - this . receivedPackets = 0 ; < nl > - < nl > - / / Log . d ( TAG , " Creating socket . . . " ) ; < nl > - switch ( endpoint . getType ( ) ) { < nl > - case TCP : < nl > - socket = new Socket ( ) ; < nl > - break ; < nl > - case TCP _ TLS : < nl > - socket = SSLSocketFactory . getDefault ( ) . createSocket ( ) ; < nl > - break ; < nl > - default : < nl > - throw new IOException ( " Unsupported endpoint type : " + endpoint . getType ( ) ) ; < nl > - } < nl > - < nl > - this . socket . setKeepAlive ( false ) ; < nl > - this . socket . setTcpNoDelay ( true ) ; < nl > - < nl > - / / Log . d ( TAG , " Connecting socket . . . " ) ; < nl > - < nl > - this . socket . connect ( new InetSocketAddress ( endpoint . getHost ( ) , endpoint . getPort ( ) ) , CONNECTION _ TIMEOUT ) ; < nl > - < nl > - / / Log . d ( TAG , " Performing handshake . . . " ) ; < nl > - < nl > - / / Init socket streams < nl > - inputStream = this . socket . getInputStream ( ) ; < nl > - outputStream = this . socket . getOutputStream ( ) ; < nl > - < nl > - / / Handshake request < nl > - DataOutput handshakeRequest = new DataOutput ( ) ; < nl > - handshakeRequest . writeByte ( mtprotoVersion ) ; < nl > - handshakeRequest . writeByte ( apiMajorVersion ) ; < nl > - handshakeRequest . writeByte ( apiMinorVersion ) ; < nl > - byte [ ] randomData = new byte [ 32 ] ; < nl > - synchronized ( RANDOM ) { < nl > - RANDOM . nextBytes ( randomData ) ; < nl > - } < nl > - handshakeRequest . writeInt ( randomData . length ) ; < nl > - handshakeRequest . writeBytes ( randomData , 0 , randomData . length ) ; < nl > - outputStream . write ( handshakeRequest . toByteArray ( ) ) ; < nl > - outputStream . flush ( ) ; < nl > - < nl > - / / Log . d ( TAG , " Reading handshake response . . . " ) ; < nl > - / / Handshake response < nl > - socket . setSoTimeout ( HANDSHAKE _ TIMEOUT ) ; < nl > - byte [ ] data = readBytes ( 3 + 32 ) ; < nl > - socket . setSoTimeout ( 0 ) ; < nl > - DataInput handshakeResponse = new DataInput ( data ) ; < nl > - int protoVersion = handshakeResponse . readByte ( ) ; < nl > - int apiMajor = handshakeResponse . readByte ( ) ; < nl > - int apiMinor = handshakeResponse . readByte ( ) ; < nl > - byte [ ] sha256 = handshakeResponse . readBytes ( 32 ) ; < nl > - byte [ ] localSha256 = CryptoUtils . SHA256 ( randomData ) ; < nl > - < nl > - if ( ! Arrays . equals ( sha256 , localSha256 ) ) { < nl > - throw new IOException ( " SHA 256 is incorrect " ) ; < nl > - } < nl > - if ( protoVersion ! = 1 ) { < nl > - throw new IOException ( " Incorrect Proto Version , expected : 1 , got " + protoVersion + " ; " ) ; < nl > - } < nl > - if ( apiMajor ! = 1 ) { < nl > - throw new IOException ( " Incorrect Api Major Version , expected : 1 , got " + apiMajor + " ; " ) ; < nl > - } < nl > - if ( apiMinor ! = 0 ) { < nl > - throw new IOException ( " Incorrect Api Minor Version , expected : 0 , got " + apiMinor + " ; " ) ; < nl > - } < nl > - < nl > - / / Log . d ( TAG , " Handshake completed . " ) ; < nl > - < nl > - readerThread = new ReaderThread ( ) ; < nl > - writerThread = new WriterThread ( ) ; < nl > - readerThread . start ( ) ; < nl > - writerThread . start ( ) ; < nl > - < nl > - pingTask = new PingTask ( ) ; < nl > - DIE _ TIMER . schedule ( pingTask , PING _ TIMEOUT ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public synchronized void post ( byte [ ] data , int offset , int len ) { < nl > - post ( HEADER _ PROTO , data , offset , len ) ; < nl > - } < nl > - < nl > - protected synchronized void post ( int header , byte [ ] data ) { < nl > - post ( header , data , 0 , data . length ) ; < nl > - } < nl > - < nl > - protected synchronized void post ( int header , byte [ ] data , int offset , int len ) { < nl > - writerThread . pushPackage ( new WritePackage ( header , data , offset , len ) ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public synchronized boolean isClosed ( ) { < nl > - return isClosed ; < nl > - } < nl > - < nl > - @ Override < nl > - public synchronized void close ( ) { < nl > - if ( isClosed ) { < nl > - return ; < nl > - } < nl > - isClosed = true ; < nl > - < nl > - try { < nl > - readerThread . interrupt ( ) ; < nl > - } catch ( Exception e ) { < nl > - Log . e ( TAG , e ) ; < nl > - } < nl > - < nl > - try { < nl > - writerThread . interrupt ( ) ; < nl > - } catch ( Exception e ) { < nl > - Log . e ( TAG , e ) ; < nl > - } < nl > - < nl > - try { < nl > - socket . close ( ) ; < nl > - } catch ( IOException e ) { < nl > - Log . e ( TAG , e ) ; < nl > - } < nl > - < nl > - callback . onConnectionDie ( ) ; < nl > - < nl > - synchronized ( packageTimers ) { < nl > - for ( Integer id : packageTimers . keySet ( ) ) { < nl > - packageTimers . get ( id ) . cancel ( ) ; < nl > - } < nl > - for ( Long ping : schedulledPings . keySet ( ) ) { < nl > - schedulledPings . get ( ping ) . cancel ( ) ; < nl > - } < nl > - schedulledPings . clear ( ) ; < nl > - packageTimers . clear ( ) ; < nl > - } < nl > - < nl > - pingTask . cancel ( ) ; < nl > - } < nl > - < nl > - private void onServerAck ( int packageId ) { < nl > - synchronized ( packageTimers ) { < nl > - TimerTask task = packageTimers . remove ( packageId ) ; < nl > - if ( task = = null ) { < nl > - return ; < nl > - } < nl > - task . cancel ( ) ; < nl > - < nl > - refreshTimeouts ( ) ; < nl > - } < nl > - } < nl > - < nl > - private void onServerPong ( long pingId ) { < nl > - synchronized ( packageTimers ) { < nl > - TimerTask task = schedulledPings . remove ( pingId ) ; < nl > - if ( task = = null ) { < nl > - return ; < nl > - } < nl > - task . cancel ( ) ; < nl > - < nl > - refreshTimeouts ( ) ; < nl > - } < nl > - } < nl > - < nl > - private void refreshTimeouts ( ) { < nl > - for ( Long ping : schedulledPings . keySet ( ) . toArray ( new Long [ 0 ] ) ) { < nl > - / / Remove old < nl > - TimerTask oldTask = schedulledPings . remove ( ping ) ; < nl > - oldTask . cancel ( ) ; < nl > - < nl > - / / Add new < nl > - PingTimeoutTask newTask = new PingTimeoutTask ( ping ) ; < nl > - schedulledPings . put ( ping , newTask ) ; < nl > - DIE _ TIMER . schedule ( newTask , RESPONSE _ TIMEOUT ) ; < nl > - } < nl > - for ( Integer id : packageTimers . keySet ( ) . toArray ( new Integer [ 0 ] ) ) { < nl > - / / Remove old < nl > - TimerTask oldTask = packageTimers . get ( id ) ; < nl > - oldTask . cancel ( ) ; < nl > - < nl > - / / Add new < nl > - FrameTimeoutTask newTask = new FrameTimeoutTask ( id ) ; < nl > - packageTimers . put ( id , newTask ) ; < nl > - DIE _ TIMER . schedule ( newTask , RESPONSE _ TIMEOUT ) ; < nl > - } < nl > - < nl > - pingTask . cancel ( ) ; < nl > - < nl > - pingTask = new PingTask ( ) ; < nl > - DIE _ TIMER . schedule ( pingTask , PING _ TIMEOUT ) ; < nl > - } < nl > - < nl > - private class ReaderThread extends Thread { < nl > - < nl > - private final CRC32 crc32Engine = new CRC32 ( ) ; < nl > - < nl > - private ReaderThread ( ) { < nl > - setName ( TAG + " # Reader " + hashCode ( ) ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void run ( ) { < nl > - try { < nl > - while ( ! isClosed ( ) ) { < nl > - if ( socket . isClosed ( ) ) { < nl > - throw new IOException ( " Socket is closed " ) ; < nl > - } < nl > - if ( ! socket . isConnected ( ) ) { < nl > - throw new IOException ( " Socket is not connected " ) ; < nl > - } < nl > - < nl > - / / Reading package headers < nl > - / / Log . d ( TAG , " Waiting for frame header . . . " ) ; < nl > - byte [ ] packageHeader = readBytes ( 9 ) ; < nl > - DataInput dataInput = new DataInput ( packageHeader ) ; < nl > - int receivedPackageIndex = dataInput . readInt ( ) ; < nl > - if ( receivedPackageIndex ! = receivedPackets ) { < nl > - throw new IOException ( " Received frame with incorrect index . " + < nl > - " Expected : " + receivedPackets + " , got : " + receivedPackageIndex ) ; < nl > - } < nl > - receivedPackets + + ; < nl > - int header = dataInput . readByte ( ) ; < nl > - int size = dataInput . readInt ( ) ; < nl > - < nl > - / / Reading package body < nl > - / / Log . d ( TAG , " Reading frame body for # " + receivedPackageIndex ) ; < nl > - byte [ ] body = readBytes ( size + 4 ) ; < nl > - dataInput = new DataInput ( body ) ; < nl > - byte [ ] contents = dataInput . readBytes ( size ) ; < nl > - < nl > - / / Checking CRC32 < nl > - long crc32 = dataInput . readUInt ( ) ; < nl > - crc32Engine . reset ( ) ; < nl > - crc32Engine . update ( contents ) ; < nl > - long localCrc32 = crc32Engine . getValue ( ) ; < nl > - if ( localCrc32 ! = crc32 ) { < nl > - throw new IOException ( " Received frame contents with incorrect crc32 " ) ; < nl > - } < nl > - < nl > - / / Processing package < nl > - if ( header = = HEADER _ PROTO ) { < nl > - / / Log . d ( TAG , " Received proto frame " ) ; < nl > - callback . onMessage ( contents , 0 , contents . length ) ; < nl > - < nl > - DataOutput ackPackage = new DataOutput ( ) ; < nl > - ackPackage . writeInt ( receivedPackageIndex ) ; < nl > - post ( HEADER _ ACK , ackPackage . toByteArray ( ) ) ; < nl > - } else if ( header = = HEADER _ PING ) { < nl > - / / Log . d ( TAG , " Received ping frame " ) ; < nl > - post ( HEADER _ PONG , contents ) ; < nl > - } else if ( header = = HEADER _ PONG ) { < nl > - / / Log . d ( TAG , " Received pong frame " ) ; < nl > - DataInput pongInput = new DataInput ( contents ) ; < nl > - int pongLen = pongInput . readInt ( ) ; < nl > - if ( pongLen ! = 8 ) { < nl > - / / Log . w ( TAG , " Pong invalid content length , got : " + pongLen ) ; < nl > - continue ; < nl > - } < nl > - onServerPong ( pongInput . readLong ( ) ) ; < nl > - } else if ( header = = HEADER _ ACK ) { < nl > - / / Log . d ( TAG , " Received ack frame " ) ; < nl > - DataInput ackContent = new DataInput ( contents ) ; < nl > - int frameId = ackContent . readInt ( ) ; < nl > - onServerAck ( frameId ) ; < nl > - } else if ( header = = HEADER _ REDIRECT ) { < nl > - DataInput redirectContent = new DataInput ( contents ) ; < nl > - int hostLen = redirectContent . readInt ( ) ; < nl > - String host = new String ( redirectContent . readBytes ( hostLen ) , " UTF - 8 " ) ; < nl > - int port = redirectContent . readInt ( ) ; < nl > - int timeout = redirectContent . readInt ( ) ; < nl > - / / TODO : Implement redirect < nl > - throw new IOException ( " Received redirect frame : " + host + " : " + port + " with timeout " + timeout + " sec " ) ; < nl > - } else if ( header = = HEADER _ DROP ) { < nl > - DataInput drop = new DataInput ( contents ) ; < nl > - long messageId = drop . readLong ( ) ; < nl > - int errorCode = drop . readByte ( ) ; < nl > - int messageLen = drop . readInt ( ) ; < nl > - String message = new String ( drop . readBytes ( messageLen ) , " UTF - 8 " ) ; < nl > - / / Log . d ( TAG , " Received drop frame : " + message ) ; < nl > - < nl > - throw new IOException ( " Received drop frame : " + message ) ; < nl > - } else { < nl > - Log . w ( TAG , " Received unknown frame # " + header ) ; < nl > - } < nl > - } < nl > - } catch ( IOException e ) { < nl > - e . printStackTrace ( ) ; < nl > - close ( ) ; < nl > - } < nl > - } < nl > - } < nl > - < nl > - / * * < nl > - * Package send thread < nl > - * / < nl > - private class WriterThread extends Thread { < nl > - < nl > - private final CRC32 crc32Engine = new CRC32 ( ) ; < nl > - < nl > - private final ConcurrentLinkedQueue < WritePackage > packages = new ConcurrentLinkedQueue < WritePackage > ( ) ; < nl > - < nl > - public WriterThread ( ) { < nl > - setName ( TAG + " # Writer " + hashCode ( ) ) ; < nl > - } < nl > - < nl > - / * * < nl > - * Send package to connection < nl > - * < nl > - * @ param p package < nl > - * / < nl > - public void pushPackage ( final WritePackage p ) { < nl > - packages . add ( p ) ; < nl > - synchronized ( packages ) { < nl > - packages . notifyAll ( ) ; < nl > - } < nl > - } < nl > - < nl > - @ Override < nl > - public void run ( ) { < nl > - try { < nl > - while ( ! isClosed ( ) ) { < nl > - < nl > - / / Pooling of package from queue < nl > - WritePackage p ; < nl > - synchronized ( packages ) { < nl > - p = packages . poll ( ) ; < nl > - if ( p = = null ) { < nl > - try { < nl > - packages . wait ( ) ; < nl > - } catch ( final InterruptedException e ) { < nl > - return ; < nl > - } < nl > - p = packages . poll ( ) ; < nl > - } < nl > - } < nl > - if ( p = = null ) { < nl > - continue ; < nl > - } < nl > - < nl > - / / Start package send < nl > - / / Log . d ( TAG , " Sending frame # " + sentPackets ) ; < nl > - < nl > - / / Prepare package < nl > - final int packageId = sentPackets + + ; < nl > - DataOutput dataOutput = new DataOutput ( ) ; < nl > - dataOutput . writeInt ( packageId ) ; < nl > - dataOutput . writeByte ( p . getHeader ( ) ) ; < nl > - dataOutput . writeInt ( p . getContent ( ) . length ) ; < nl > - dataOutput . writeBytes ( p . getContent ( ) , p . getOffset ( ) , p . getLen ( ) ) ; < nl > - crc32Engine . reset ( ) ; < nl > - crc32Engine . update ( p . getContent ( ) , p . getOffset ( ) , p . getLen ( ) ) ; < nl > - dataOutput . writeInt ( ( int ) crc32Engine . getValue ( ) ) ; < nl > - byte [ ] destPackage = dataOutput . toByteArray ( ) ; < nl > - < nl > - / / Setting Ack timeout < nl > - if ( p . getHeader ( ) = = HEADER _ PROTO ) { < nl > - synchronized ( packageTimers ) { < nl > - TimerTask timeoutTask = new TimerTask ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - / / Log . d ( TAG , " Response # " + packageId + " not received in time " ) ; < nl > - close ( ) ; < nl > - } < nl > - } ; < nl > - packageTimers . put ( packageId , timeoutTask ) ; < nl > - DIE _ TIMER . schedule ( timeoutTask , RESPONSE _ TIMEOUT ) ; < nl > - } < nl > - } < nl > - < nl > - / / Writing package to socket < nl > - outputStream . write ( destPackage ) ; < nl > - outputStream . flush ( ) ; < nl > - } < nl > - } catch ( IOException e ) { < nl > - e . printStackTrace ( ) ; < nl > - close ( ) ; < nl > - } < nl > - } < nl > - } < nl > - < nl > - private class WritePackage { < nl > - private int header ; < nl > - private byte [ ] content ; < nl > - private int offset ; < nl > - private int len ; < nl > - < nl > - private WritePackage ( int header , byte [ ] content , int offset , int len ) { < nl > - this . header = header ; < nl > - this . content = content ; < nl > - this . offset = offset ; < nl > - this . len = len ; < nl > - } < nl > - < nl > - public int getHeader ( ) { < nl > - return header ; < nl > - } < nl > - < nl > - public byte [ ] getContent ( ) { < nl > - return content ; < nl > - } < nl > - < nl > - public int getOffset ( ) { < nl > - return offset ; < nl > - } < nl > - < nl > - public int getLen ( ) { < nl > - return len ; < nl > - } < nl > - } < nl > - < nl > - class PingTimeoutTask extends TimerTask { < nl > - private long pingId ; < nl > - < nl > - public PingTimeoutTask ( long pingId ) { < nl > - this . pingId = pingId ; < nl > - } < nl > - < nl > - @ Override < nl > - public void run ( ) { < nl > - / / Log . d ( TAG , " Ping # " + pingId + " is timed out " ) ; < nl > - close ( ) ; < nl > - } < nl > - } < nl > - < nl > - class FrameTimeoutTask extends TimerTask { < nl > - private int frameId ; < nl > - < nl > - FrameTimeoutTask ( int frameId ) { < nl > - this . frameId = frameId ; < nl > - } < nl > - < nl > - @ Override < nl > - public void run ( ) { < nl > - / / Log . d ( TAG , " Response # " + frameId + " not received in time " ) ; < nl > - close ( ) ; < nl > - } < nl > - } < nl > - < nl > - class PingTask extends TimerTask { < nl > - @ Override < nl > - public void run ( ) { < nl > - if ( isClosed ( ) ) { < nl > - return ; < nl > - } < nl > - final long pingId = RANDOM . nextLong ( ) ; < nl > - DataOutput dataOutput = new DataOutput ( ) ; < nl > - dataOutput . writeInt ( 8 ) ; < nl > - synchronized ( RANDOM ) { < nl > - dataOutput . writeLong ( pingId ) ; < nl > - } < nl > - < nl > - PingTimeoutTask pingTimeout = new PingTimeoutTask ( pingId ) ; < nl > - synchronized ( packageTimers ) { < nl > - schedulledPings . put ( pingId , pingTimeout ) ; < nl > - } < nl > - DIE _ TIMER . schedule ( pingTimeout , RESPONSE _ TIMEOUT ) ; < nl > - < nl > - / / Log . d ( TAG , " Performing ping # " + pingId + " . . . " ) ; < nl > - post ( HEADER _ PING , dataOutput . toByteArray ( ) ) ; < nl > - } < nl > - } < nl > - < nl > - private byte [ ] readBytes ( int count ) throws IOException { < nl > - byte [ ] res = new byte [ count ] ; < nl > - int offset = 0 ; < nl > - while ( offset < res . length ) { < nl > - int readed = inputStream . read ( res , offset , res . length - offset ) ; < nl > - if ( readed > 0 ) { < nl > - offset + = readed ; < nl > - } else if ( readed < 0 ) { < nl > - throw new IOException ( ) ; < nl > - } else { < nl > - Thread . yield ( ) ; < nl > - } < nl > - } < nl > - return res ; < nl > - } < nl > - } < nl > diff - - git a / library / actor - jvm / src / main / java / im / actor / model / jvm / tcp / AsyncTcpConnection . java b / library / actor - jvm / src / main / java / im / actor / model / jvm / tcp / AsyncTcpConnection . java < nl > new file mode 100644 < nl > index 0000000 . . fcdd41c < nl > - - - / dev / null < nl > + + + b / library / actor - jvm / src / main / java / im / actor / model / jvm / tcp / AsyncTcpConnection . java < nl > @ @ - 0 , 0 + 1 , 271 @ @ < nl > + package im . actor . model . jvm . tcp ; < nl > + < nl > + import java . io . IOException ; < nl > + import java . io . InputStream ; < nl > + import java . io . OutputStream ; < nl > + import java . net . InetSocketAddress ; < nl > + import java . net . Socket ; < nl > + import java . util . concurrent . ConcurrentLinkedQueue ; < nl > + import java . util . concurrent . ExecutorService ; < nl > + import java . util . concurrent . Executors ; < nl > + < nl > + import javax . net . ssl . SSLSocketFactory ; < nl > + < nl > + import im . actor . model . droidkit . bser . DataInput ; < nl > + import im . actor . model . droidkit . bser . DataOutput ; < nl > + import im . actor . model . log . Log ; < nl > + import im . actor . model . network . ConnectionEndpoint ; < nl > + import im . actor . model . network . connection . AsyncConnection ; < nl > + import im . actor . model . network . connection . AsyncConnectionInterface ; < nl > + import im . actor . model . network . connection . ManagedConnection ; < nl > + < nl > + / * * < nl > + * Created by ex3ndr on 01 . 05 . 15 . < nl > + * / < nl > + public class AsyncTcpConnection extends AsyncConnection { < nl > + < nl > + private final ExecutorService connectExecutor = Executors . newSingleThreadExecutor ( ) ; < nl > + < nl > + private final String TAG ; < nl > + < nl > + private Socket socket ; < nl > + private InputStream inputStream ; < nl > + private OutputStream outputStream ; < nl > + private WriterThread writerThread ; < nl > + private ReaderThread readerThread ; < nl > + < nl > + private boolean isConnected = false ; < nl > + private boolean isClosed = false ; < nl > + < nl > + public AsyncTcpConnection ( int id , ConnectionEndpoint endpoint , AsyncConnectionInterface connection ) { < nl > + super ( endpoint , connection ) ; < nl > + < nl > + this . TAG = " ConnectionTcp # " + id ; < nl > + } < nl > + < nl > + @ Override < nl > + public void doConnect ( ) { < nl > + connectExecutor . submit ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + try { < nl > + Socket socket ; < nl > + ConnectionEndpoint endpoint = getEndpoint ( ) ; < nl > + switch ( endpoint . getType ( ) ) { < nl > + case TCP : < nl > + socket = new Socket ( ) ; < nl > + break ; < nl > + case TCP _ TLS : < nl > + socket = SSLSocketFactory . getDefault ( ) . createSocket ( ) ; < nl > + break ; < nl > + default : < nl > + throw new RuntimeException ( " Unsupported endpoint type : " + endpoint . getType ( ) ) ; < nl > + } < nl > + < nl > + / / Configure socket < nl > + socket . setKeepAlive ( false ) ; < nl > + socket . setTcpNoDelay ( true ) ; < nl > + < nl > + socket . connect ( new InetSocketAddress ( endpoint . getHost ( ) , endpoint . getPort ( ) ) , ManagedConnection . CONNECTION _ TIMEOUT ) ; < nl > + < nl > + / / Init streams < nl > + socket . getInputStream ( ) ; < nl > + socket . getOutputStream ( ) ; < nl > + < nl > + onSocketCreated ( socket ) ; < nl > + } catch ( Exception e ) { < nl > + e . printStackTrace ( ) ; < nl > + crashConnection ( ) ; < nl > + } < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void doSend ( byte [ ] data ) { < nl > + writerThread . pushPackage ( data ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void doClose ( ) { < nl > + crashConnection ( ) ; < nl > + } < nl > + < nl > + < nl > + private synchronized void onSocketCreated ( Socket socket ) throws IOException { < nl > + if ( isClosed ) { < nl > + Log . w ( TAG , " Socket created after external close : disposing " ) ; < nl > + throw new IOException ( " Socket created after external close : disposing " ) ; < nl > + } < nl > + < nl > + this . socket = socket ; < nl > + this . inputStream = socket . getInputStream ( ) ; < nl > + this . outputStream = socket . getOutputStream ( ) ; < nl > + < nl > + this . isClosed = false ; < nl > + this . isConnected = true ; < nl > + < nl > + this . readerThread = new ReaderThread ( ) ; < nl > + this . readerThread . start ( ) ; < nl > + < nl > + this . writerThread = new WriterThread ( ) ; < nl > + this . writerThread . start ( ) ; < nl > + < nl > + onConnected ( ) ; < nl > + } < nl > + < nl > + private synchronized void onRawReceived ( byte [ ] data ) throws IOException { < nl > + if ( ! isConnected ) { < nl > + Log . d ( TAG , " onRawReceived : Not connected " ) ; < nl > + return ; < nl > + } < nl > + < nl > + onReceived ( data ) ; < nl > + } < nl > + < nl > + private synchronized void crashConnection ( ) { < nl > + Log . d ( TAG , " Crashing Connection " ) ; < nl > + < nl > + if ( isClosed ) { < nl > + return ; < nl > + } < nl > + isClosed = true ; < nl > + isConnected = false ; < nl > + < nl > + if ( writerThread ! = null ) { < nl > + writerThread . interrupt ( ) ; < nl > + } < nl > + if ( readerThread ! = null ) { < nl > + readerThread . interrupt ( ) ; < nl > + } < nl > + writerThread = null ; < nl > + readerThread = null ; < nl > + < nl > + if ( socket ! = null ) { < nl > + try { < nl > + socket . close ( ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + if ( inputStream ! = null ) { < nl > + try { < nl > + inputStream . close ( ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + if ( outputStream ! = null ) { < nl > + try { < nl > + outputStream . close ( ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + socket = null ; < nl > + inputStream = null ; < nl > + outputStream = null ; < nl > + < nl > + onClosed ( ) ; < nl > + } < nl > + < nl > + < nl > + private class WriterThread extends Thread { < nl > + private final ConcurrentLinkedQueue < byte [ ] > packages = new ConcurrentLinkedQueue < byte [ ] > ( ) ; < nl > + < nl > + public WriterThread ( ) { < nl > + setName ( TAG + " # Writer " ) ; < nl > + } < nl > + < nl > + / * * < nl > + * Send package to connection < nl > + * < nl > + * @ param p package < nl > + * / < nl > + public void pushPackage ( final byte [ ] p ) { < nl > + packages . add ( p ) ; < nl > + synchronized ( packages ) { < nl > + packages . notifyAll ( ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void run ( ) { < nl > + try { < nl > + while ( isConnected ) { < nl > + < nl > + / / Pooling of package from queue < nl > + byte [ ] p ; < nl > + synchronized ( packages ) { < nl > + p = packages . poll ( ) ; < nl > + if ( p = = null ) { < nl > + try { < nl > + packages . wait ( ) ; < nl > + } catch ( final InterruptedException e ) { < nl > + return ; < nl > + } < nl > + p = packages . poll ( ) ; < nl > + } < nl > + } < nl > + if ( p = = null ) { < nl > + continue ; < nl > + } < nl > + < nl > + outputStream . write ( p ) ; < nl > + outputStream . flush ( ) ; < nl > + } < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + crashConnection ( ) ; < nl > + } < nl > + } < nl > + } < nl > + < nl > + private class ReaderThread extends Thread { < nl > + < nl > + private ReaderThread ( ) { < nl > + setName ( TAG + " # Reader " ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void run ( ) { < nl > + try { < nl > + while ( isConnected ) { < nl > + / / Reading package headers < nl > + byte [ ] header = readBytes ( 9 ) ; < nl > + DataInput dataInput = new DataInput ( header ) ; < nl > + int receivedPackageIndex = dataInput . readInt ( ) ; < nl > + int headerValue = dataInput . readByte ( ) ; < nl > + int size = dataInput . readInt ( ) ; < nl > + < nl > + / / Reading package body < nl > + byte [ ] body = readBytes ( size + 4 ) ; < nl > + < nl > + DataOutput dataOutput = new DataOutput ( ) ; < nl > + dataOutput . writeBytes ( header ) ; < nl > + dataOutput . writeBytes ( body ) ; < nl > + onRawReceived ( dataOutput . toByteArray ( ) ) ; < nl > + } < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + crashConnection ( ) ; < nl > + } < nl > + } < nl > + < nl > + private byte [ ] readBytes ( int count ) throws IOException { < nl > + byte [ ] res = new byte [ count ] ; < nl > + int offset = 0 ; < nl > + while ( offset < res . length ) { < nl > + int readed = inputStream . read ( res , offset , res . length - offset ) ; < nl > + if ( readed > 0 ) { < nl > + offset + = readed ; < nl > + } else if ( readed < 0 ) { < nl > + throw new IOException ( ) ; < nl > + } else { < nl > + Thread . yield ( ) ; < nl > + } < nl > + } < nl > + return res ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / library / actor - jvm / src / main / java / im / actor / model / jvm / tcp / AsyncTcpConnectionFactory . java b / library / actor - jvm / src / main / java / im / actor / model / jvm / tcp / AsyncTcpConnectionFactory . java < nl > new file mode 100644 < nl > index 0000000 . . f1eff48 < nl > - - - / dev / null < nl > + + + b / library / actor - jvm / src / main / java / im / actor / model / jvm / tcp / AsyncTcpConnectionFactory . java < nl > @ @ - 0 , 0 + 1 , 17 @ @ < nl > + package im . actor . model . jvm . tcp ; < nl > + < nl > + import im . actor . model . network . ConnectionEndpoint ; < nl > + import im . actor . model . network . connection . AsyncConnection ; < nl > + import im . actor . model . network . connection . AsyncConnectionFactory ; < nl > + import im . actor . model . network . connection . AsyncConnectionInterface ; < nl > + < nl > + / * * < nl > + * Created by ex3ndr on 01 . 05 . 15 . < nl > + * / < nl > + public class AsyncTcpConnectionFactory implements AsyncConnectionFactory { < nl > + < nl > + @ Override < nl > + public AsyncConnection createConnection ( int connectionId , ConnectionEndpoint endpoint , AsyncConnectionInterface connectionInterface ) { < nl > + return new AsyncTcpConnection ( connectionId , endpoint , connectionInterface ) ; < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java 
 index 1946fc6 . . 4878d3a 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java 
 @ @ - 7 , 225 + 7 , 157 @ @ import im . actor . sdk . util . Screen ; 
 / * * 
 * Actor Styling class 
 * / 
 + @ SuppressWarnings ( " unused " ) 
 public class ActorStyle { 
 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / BACKGROUNDS / / 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 private int [ ] defaultBackgrouds = new int [ ] { R . drawable . img _ chat _ background _ default , R . drawable . bg _ 1 , R . drawable . bg _ 2 , R . drawable . bg _ 3 } ; 
 
 - private int toolBarColor = 0 ; 
 - private int fabColor = 0 ; 
 - private int fabPressedColor = 0 ; 
 - private int mainFabbgColor = Color . parseColor ( " # ccffffff " ) ; 
 - private int settingsCategoryTextColor = 0 ; 
 - private int recordIconTintColor = 0 ; 
 - private int avatarBackgroundColor = 0 ; 
 - private int avatarBackgroundResource = 0 ; 
 - private int actionShareColor = 0 ; 
 + public int [ ] getDefaultBackgrouds ( ) { 
 + return defaultBackgrouds ; 
 + } 
 + 
 + public void setDefaultBackgrouds ( int [ ] defaultBackgrouds ) { 
 + this . defaultBackgrouds = defaultBackgrouds ; 
 + } 
 + 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / COLORS / / 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 / / 
 - / / Main Color 
 + / / Global colors 
 / / 
 - private int mainColor = Color . parseColor ( " # 4d74a6 " ) ; 
 
 + / / main color 
 + private int mainColor = 0xff4d74a6 ; 
 public int getMainColor ( ) { 
 return mainColor ; 
 } 
 - 
 public void setMainColor ( int mainColor ) { 
 this . mainColor = mainColor ; 
 } 
 
 + / / primary alt colors 
 + private int primaryAltColor = 0xff4ca665 ; 
 
 - / / 
 - / / List Styles 
 - / / 
 + public int getPrimaryAltColor ( ) { 
 + return primaryAltColor ; 
 + } 
 
 - private int mainBackgroundColor = Color . parseColor ( " # ffffff " ) ; 
 - private int backyardBackgroundColor = 0 ; 
 + public void setPrimaryAltColor ( int primaryAltColor ) { 
 + this . primaryAltColor = primaryAltColor ; 
 + } 
 
 - / / Contacts 
 - private int contactFastTitleColor = 0 ; 
 - private int actionAddContactColor = 0 ; 
 - private int contactDividerColor = 0 ; 
 + private int primaryAltHoveredColor = 0xff3d8652 ; 
 
 - / / Dialogs 
 - private int dialogsStatePendingColor = Color . parseColor ( " # 40000000 " ) ; 
 - private int dialogsTimeColor = 0 ; 
 - private int dialogsStateSentColor = Color . parseColor ( " # 40000000 " ) ; 
 - private int dialogsStateDeliveredColor = Color . parseColor ( " # 40000000 " ) ; 
 - private int dialogsStateReadColor = Color . parseColor ( " # ff7ea8ef " ) ; 
 - private int dialogsStateErrorColor = Color . parseColor ( " # d24a43 " ) ; 
 - private int dialogsCounterTextColor = 0 ; 
 - private int dialogsCounterBackgroundColor = 0 ; 
 - private int dialogsDividerColor = 0 ; 
 - private int dialogsTitleColor = 0 ; 
 - private int dialogsTextColor = 0 ; 
 - private int dialogsTypingColor = 0 ; 
 - private int dialogsActionColor = 0xff5882ac ; 
 + public int getPrimaryAltHoveredColor ( ) { 
 + return primaryAltHoveredColor ; 
 + } 
 
 - private int primaryAltColor = Color . parseColor ( " # 4ca665 " ) ; 
 - private int primaryAltHoveredColor = Color . parseColor ( " # ff3d8652 " ) ; 
 - private int primaryAltPressedColor = Color . parseColor ( " # ff5cca7b " ) ; 
 + public void setPrimaryAltHoveredColor ( int primaryAltHoveredColor ) { 
 + this . primaryAltHoveredColor = primaryAltHoveredColor ; 
 + } 
 
 - private int accentColor = Color . parseColor ( " # d94335 " ) ; 
 - private int accentHoveredColor = Color . parseColor ( " # b3372c " ) ; 
 - private int accentPressedColor = Color . parseColor ( " # ca4a3f " ) ; 
 + private int primaryAltPressedColor = 0xff5cca7b ; 
 
 - / / Base UI colors 
 + public int getPrimaryAltPressedColor ( ) { 
 + return primaryAltPressedColor ; 
 + } 
 
 - private int listActionColor = 0 ; 
 - private int sectonIconSmallColor = Color . parseColor ( " # b5b6b7 " ) ; 
 - private int sectionIconLargeColor = 0 ; 
 + public void setPrimaryAltPressedColor ( int primaryAltPressedColor ) { 
 + this . primaryAltPressedColor = primaryAltPressedColor ; 
 + } 
 
 - / / Dividers 
 - private int dividerColor = Color . parseColor ( " # 1E000000 " ) ; 
 - private int dividerInvColor = Color . parseColor ( " # 1Effffff " ) ; 
 + / / accent colors 
 + private int accentColor = 0xffd94335 ; 
 
 - / / Text colors 
 - private int textPrimaryInvColor = Color . parseColor ( " # DEffffff " ) ; 
 - private int textPrimaryColor = Color . parseColor ( " # DE000000 " ) ; 
 - private int textSecondaryColor = Color . parseColor ( " # 7A000000 " ) ; 
 - private int textSecondaryAccentColor = 0 ; 
 - private int textHintColor = Color . parseColor ( " # 42000000 " ) ; 
 - private int textSubHeaderColor = Color . parseColor ( " # 6F000000 " ) ; 
 - private int textSecondaryInvColor = Color . parseColor ( " # 8Affffff " ) ; 
 - private int textHintInvColor = Color . parseColor ( " # 42ffffff " ) ; 
 - private int textSubheaderInvColor = Color . parseColor ( " # 8Fffffff " ) ; 
 + public int getAccentColor ( ) { 
 + return accentColor ; 
 + } 
 
 - / / Settings 
 - private int settingsMainTitleColor = 0 ; 
 - private int settingsIconColor = 0 ; 
 - private int settingsTitleColor = 0 ; 
 - private int settingsSubtitleColor = 0 ; 
 + public void setAccentColor ( int accentColor ) { 
 + this . accentColor = accentColor ; 
 + } 
 
 - / / Profile 
 - private int profileTitleColor = 0 ; 
 - private int profileSubtitleColor = 0 ; 
 - private int profileIconColor = 0 ; 
 - private int profileContactIconColor = 0 ; 
 + private int accentHoveredColor = 0xffb3372c ; 
 
 - / / Group Profile 
 - private int groupAdminColor = 0 ; 
 - private int groupActionAddIconColor = 0 ; 
 - private int groupActionAddTextColor = 0 ; 
 - private int groupOnlineColor = Color . parseColor ( " # ff7ea8ef " ) ; 
 + public int getAccentHoveredColor ( ) { 
 + return accentHoveredColor ; 
 + } 
 
 - / / Conversation 
 - private int convSendEnabledColor = 0 ; 
 - private int convSendDisabledColor = Color . parseColor ( " # 42000000 " ) ; 
 + public void setAccentHoveredColor ( int accentHoveredColor ) { 
 + this . accentHoveredColor = accentHoveredColor ; 
 + } 
 
 - private int convDateLineColor = Color . parseColor ( " # 14000000 " ) ; 
 - private int convDatetextColor = Color . parseColor ( " # ffffff " ) ; 
 - private int convDateBgColor = Color . parseColor ( " # 99000000 " ) ; 
 + private int accentPressedColor = 0xffca4a3f ; 
 
 - private int convTextColor = 0 ; 
 - private int convTimeColor = Color . parseColor ( " # 60000000 " ) ; 
 - 
 - private int convStatePendingColor = Color . parseColor ( " # 40000000 " ) ; 
 - private int convStateSentColor = Color . parseColor ( " # 40000000 " ) ; 
 - private int convStateDeliveredColor = Color . parseColor ( " # 40000000 " ) ; 
 - private int convStateReadColor = Color . parseColor ( " # ff7ea8ef " ) ; 
 - private int convStateErrorColor = Color . parseColor ( " # d24a43 " ) ; 
 - private int convStateWarrningColor = Color . parseColor ( " # d24a43 " ) ; 
 - 
 - private int convMediaDateBgColor = Color . parseColor ( " # 99000000 " ) ; 
 - private int convMediaStatePendingColor = Color . parseColor ( " # ffffff " ) ; 
 - private int convMediaStateSentColor = Color . parseColor ( " # ffffff " ) ; 
 - private int convMediaStateDeliveredColor = Color . parseColor ( " # ffffff " ) ; 
 - private int convMediaStateReadColor = Color . parseColor ( " # ff7ea8ef " ) ; 
 - private int convMediaStateErrorColor = Color . parseColor ( " # ffed534b " ) ; 
 - private int convMediaStateWarrningColor = Color . parseColor ( " # ffed534b " ) ; 
 - private int convLikeColor = Color . parseColor ( " # e2264d " ) ; 
 + public int getAccentPressedColor ( ) { 
 + return accentPressedColor ; 
 + } 
 
 - / / DialogsFragment layout settings 
 - private int dialogsPaddingTop = Screen . dp ( 8 ) ; 
 + public void setAccentPressedColor ( int accentPressedColor ) { 
 + this . accentPressedColor = accentPressedColor ; 
 + } 
 
 - / / ContactsFragment layout settings 
 - private int contactsMainPaddingTop = 0 ; 
 + / / 
 + / / Shared UI colors 
 + / / 
 
 - public int getMainPressedColor ( ) { 
 - return getDarkenArgb ( getMainColor ( ) , 0 . 95 ) ; 
 - } 
 + private int toolBarColor = 0 ; 
 
 public int getToolBarColor ( ) { 
 - if ( toolBarColor ! = 0 ) { 
 - return toolBarColor ; 
 - } else { 
 - return getMainColor ( ) ; 
 - } 
 + return getColorWithFallback ( toolBarColor , getMainColor ( ) ) ; 
 } 
 
 public void setToolBarColor ( int toolBarColor ) { 
 this . toolBarColor = toolBarColor ; 
 } 
 
 + private int fabColor = 0 ; 
 + 
 public int getFabColor ( ) { 
 - if ( fabColor ! = 0 ) { 
 - return fabColor ; 
 - } else { 
 - return getMainColor ( ) ; 
 - } 
 + return getColorWithFallback ( fabColor , getMainColor ( ) ) ; 
 } 
 
 public void setFabColor ( int fabColor ) { 
 this . fabColor = fabColor ; 
 } 
 
 + private int fabPressedColor = 0 ; 
 + 
 public int getFabPressedColor ( ) { 
 - if ( fabPressedColor ! = 0 ) { 
 - return fabPressedColor ; 
 - } else { 
 - double percent = 0 . 95 ; 
 - return getDarkenArgb ( getFabColor ( ) , percent ) ; 
 - } 
 + return getColorWithFallback ( fabPressedColor , getDarkenArgb ( getFabColor ( ) , 0 . 95 ) ) ; 
 } 
 
 public void setFabPressedColor ( int fabPressedColor ) { 
 this . fabPressedColor = fabPressedColor ; 
 } 
 
 - public int getSettingsCategoryTextColor ( ) { 
 - if ( settingsCategoryTextColor ! = 0 ) { 
 - return settingsCategoryTextColor ; 
 - } else { 
 - return getMainColor ( ) ; 
 - } 
 - } 
 + private int mainFabbgColor = 0xccffffff ; 
 
 - public void setSettingsCategoryTextColor ( int settingsCategoryTextColor ) { 
 - this . settingsCategoryTextColor = settingsCategoryTextColor ; 
 - } 
 - 
 - public int getRecordIconTintColor ( ) { 
 - if ( recordIconTintColor ! = 0 ) { 
 - return recordIconTintColor ; 
 - } else { 
 - return getMainColor ( ) ; 
 - } 
 + public int getMainFabbgColor ( ) { 
 + return mainFabbgColor ; 
 } 
 
 - public void setRecordIconTintColor ( int recordIconTintColor ) { 
 - this . recordIconTintColor = recordIconTintColor ; 
 + public void setMainFabbgColor ( int mainFabbgColor ) { 
 + this . mainFabbgColor = mainFabbgColor ; 
 } 
 
 - public int getAvatarBackgroundColor ( ) { 
 - if ( avatarBackgroundColor ! = 0 ) { 
 - return avatarBackgroundColor ; 
 - } else { 
 - return getMainColor ( ) ; 
 - } 
 - } 
 + private int actionShareColor = 0 ; 
 
 - public void setAvatarBackgroundResource ( int avatarBackgroundResource ) { 
 - this . avatarBackgroundResource = avatarBackgroundResource ; 
 + public int getActionShareColor ( ) { 
 + return getColorWithFallback ( actionShareColor , getMainColor ( ) ) ; 
 } 
 
 - public int getAvatarBackgroundResourse ( ) { 
 - return avatarBackgroundResource ; 
 + public void setActionShareColor ( int actionShareColor ) { 
 + this . actionShareColor = actionShareColor ; 
 } 
 
 - public void setAvatarBackgroundColor ( int avatarBackgroundColor ) { 
 - this . avatarBackgroundColor = avatarBackgroundColor ; 
 - } 
 + private int mainBackgroundColor = 0xffffffff ; 
 
 public int getMainBackgroundColor ( ) { 
 return mainBackgroundColor ; 
 @ @ - 235 , 157 + 167 , 104 @ @ public class ActorStyle { 
 this . mainBackgroundColor = mainBackgroundColor ; 
 } 
 
 + private int backyardBackgroundColor = 0 ; 
 + 
 public int getBackyardBackgroundColor ( ) { 
 - if ( backyardBackgroundColor ! = 0 ) { 
 - return backyardBackgroundColor ; 
 - } else { 
 - return getDarkenArgb ( getMainBackgroundColor ( ) , 0 . 9375 ) ; 
 - } 
 + return getColorWithFallback ( backyardBackgroundColor , getDarkenArgb ( getMainBackgroundColor ( ) , 0 . 9375 ) ) ; 
 } 
 
 public void setBackyardBackgroundColor ( int backyardBackgroundColor ) { 
 this . backyardBackgroundColor = backyardBackgroundColor ; 
 } 
 
 - public int getActionShareColor ( ) { 
 - if ( actionShareColor ! = 0 ) { 
 - return actionShareColor ; 
 - } else { 
 - return getMainColor ( ) ; 
 - } 
 - } 
 - 
 - public void setActionShareColor ( int actionShareColor ) { 
 - this . actionShareColor = actionShareColor ; 
 - } 
 - 
 - public int getActionAddContactColor ( ) { 
 - if ( actionAddContactColor ! = 0 ) { 
 - return actionAddContactColor ; 
 - } else { 
 - return getMainColor ( ) ; 
 - } 
 - } 
 - 
 - public void setActionAddContactColor ( int actionAddContactColor ) { 
 - this . actionAddContactColor = actionAddContactColor ; 
 - } 
 + private int avatarBackgroundColor = 0 ; 
 
 - public int getContactFastTitleColor ( ) { 
 - if ( contactFastTitleColor ! = 0 ) { 
 - return contactFastTitleColor ; 
 - } else { 
 - return getMainColor ( ) ; 
 - } 
 + public void setAvatarBackgroundColor ( int avatarBackgroundColor ) { 
 + this . avatarBackgroundColor = avatarBackgroundColor ; 
 } 
 
 - public void setContactFastTitleColor ( int contactFastTitleColor ) { 
 - this . contactFastTitleColor = contactFastTitleColor ; 
 + public int getAvatarBackgroundColor ( ) { 
 + return getColorWithFallback ( avatarBackgroundColor , getMainColor ( ) ) ; 
 } 
 
 - / * 
 - * Dialogs 
 - * / 
 + private int avatarBackgroundResource = 0 ; 
 
 - public int getDialogsActiveTextColor ( ) { 
 - if ( dialogsActionColor ! = 0 ) { 
 - return dialogsActionColor ; 
 - } else { 
 - return getDialogsTextColor ( ) ; 
 - } 
 + public int getAvatarBackgroundResourse ( ) { 
 + return avatarBackgroundResource ; 
 } 
 
 - public void setDialogsActiveTextColor ( int dialogsActionColor ) { 
 - this . dialogsActionColor = dialogsActionColor ; 
 + public void setAvatarBackgroundResource ( int avatarBackgroundResource ) { 
 + this . avatarBackgroundResource = avatarBackgroundResource ; 
 } 
 
 - public int getDialogsCounterTextColor ( ) { 
 - if ( dialogsCounterTextColor ! = 0 ) { 
 - return dialogsCounterTextColor ; 
 - } else { 
 - return getTextPrimaryInvColor ( ) ; 
 - } 
 - } 
 + / / 
 + / / List Styles 
 + / / 
 
 - public void setDialogsCounterTextColor ( int dialogsCounterTextColor ) { 
 - this . dialogsCounterTextColor = dialogsCounterTextColor ; 
 - } 
 + / / Shared lists colors 
 + private int listActionColor = 0 ; 
 
 - public int getDialogsCounterBackgroundColor ( ) { 
 - if ( dialogsCounterBackgroundColor ! = 0 ) { 
 - return dialogsCounterBackgroundColor ; 
 - } else { 
 - return getPrimaryAltColor ( ) ; 
 - } 
 + public int getListActionColor ( ) { 
 + return getColorWithFallback ( listActionColor , getMainColor ( ) ) ; 
 } 
 
 - public void setDialogsCounterBackgroundColor ( int dialogsCounterBackgroundColor ) { 
 - this . dialogsCounterBackgroundColor = dialogsCounterBackgroundColor ; 
 + public void setListActionColor ( int listActionColor ) { 
 + this . listActionColor = listActionColor ; 
 } 
 
 - public int getTextPrimaryInvColor ( ) { 
 - return textPrimaryInvColor ; 
 - } 
 + / / Contacts 
 + private int contactFastTitleColor = 0 ; 
 
 - public void setTextPrimaryInvColor ( int textPrimaryInvColor ) { 
 - this . textPrimaryInvColor = textPrimaryInvColor ; 
 + public int getContactFastTitleColor ( ) { 
 + return getColorWithFallback ( contactFastTitleColor , getMainColor ( ) ) ; 
 } 
 
 - public int getPrimaryAltColor ( ) { 
 - return primaryAltColor ; 
 + public void setContactFastTitleColor ( int contactFastTitleColor ) { 
 + this . contactFastTitleColor = contactFastTitleColor ; 
 } 
 
 - public void setPrimaryAltColor ( int primaryAltColor ) { 
 - this . primaryAltColor = primaryAltColor ; 
 - } 
 + private int actionAddContactColor = 0 ; 
 
 - public int getPrimaryAltHoveredColor ( ) { 
 - return primaryAltHoveredColor ; 
 + public int getActionAddContactColor ( ) { 
 + return getColorWithFallback ( actionAddContactColor , getMainColor ( ) ) ; 
 } 
 
 - public void setPrimaryAltHoveredColor ( int primaryAltHoveredColor ) { 
 - this . primaryAltHoveredColor = primaryAltHoveredColor ; 
 + public void setActionAddContactColor ( int actionAddContactColor ) { 
 + this . actionAddContactColor = actionAddContactColor ; 
 } 
 
 - public int getPrimaryAltPressedColor ( ) { 
 - return primaryAltPressedColor ; 
 - } 
 + private int contactDividerColor = 0 ; 
 
 - public void setPrimaryAltPressedColor ( int primaryAltPressedColor ) { 
 - this . primaryAltPressedColor = primaryAltPressedColor ; 
 + public int getContactDividerColor ( ) { 
 + return getColorWithFallback ( contactDividerColor , getDividerColor ( ) ) ; 
 } 
 
 - public int getAccentColor ( ) { 
 - return accentColor ; 
 + public void setContactDividerColor ( int contactDividerColor ) { 
 + this . contactDividerColor = contactDividerColor ; 
 } 
 
 - public void setAccentColor ( int accentColor ) { 
 - this . accentColor = accentColor ; 
 - } 
 + / / Dialogs 
 + private int dialogsStatePendingColor = 0x40000000 ; 
 
 - public int getAccentHoveredColor ( ) { 
 - return accentHoveredColor ; 
 + public int getDialogsStatePendingColor ( ) { 
 + return dialogsStatePendingColor ; 
 } 
 
 - public void setAccentHoveredColor ( int accentHoveredColor ) { 
 - this . accentHoveredColor = accentHoveredColor ; 
 + public void setDialogsStatePendingColor ( int dialogsStatePendingColor ) { 
 + this . dialogsStatePendingColor = dialogsStatePendingColor ; 
 } 
 
 - public int getAccentPressedColor ( ) { 
 - return accentPressedColor ; 
 - } 
 + private int dialogsTimeColor = 0 ; 
 
 - public void setAccentPressedColor ( int accentPressedColor ) { 
 - this . accentPressedColor = accentPressedColor ; 
 + public int getDialogsTimeColor ( ) { 
 + return getColorWithFallback ( dialogsTimeColor , getTextSecondaryColor ( ) ) ; 
 } 
 
 - public int getDialogsStatePendingColor ( ) { 
 - return dialogsStatePendingColor ; 
 + public void setDialogsTimeColor ( int dialogsTimeColor ) { 
 + this . dialogsTimeColor = dialogsTimeColor ; 
 } 
 
 - public void setDialogsStatePendingColor ( int dialogsStatePendingColor ) { 
 - this . dialogsStatePendingColor = dialogsStatePendingColor ; 
 - } 
 + private int dialogsStateSentColor = 0x40000000 ; 
 
 public int getDialogsStateSentColor ( ) { 
 return dialogsStateSentColor ; 
 @ @ - 395 , 6 + 274 , 8 @ @ public class ActorStyle { 
 this . dialogsStateSentColor = dialogsStateSentColor ; 
 } 
 
 + private int dialogsStateDeliveredColor = 0x40000000 ; 
 + 
 public int getDialogsStateDeliveredColor ( ) { 
 return dialogsStateDeliveredColor ; 
 } 
 @ @ - 403 , 6 + 284 , 8 @ @ public class ActorStyle { 
 this . dialogsStateDeliveredColor = dialogsStateDeliveredColor ; 
 } 
 
 + private int dialogsStateReadColor = 0xff7ea8ef ; 
 + 
 public int getDialogsStateReadColor ( ) { 
 return dialogsStateReadColor ; 
 } 
 @ @ - 411 , 6 + 294 , 8 @ @ public class ActorStyle { 
 this . dialogsStateReadColor = dialogsStateReadColor ; 
 } 
 
 + private int dialogsStateErrorColor = 0xffd24a43 ; 
 + 
 public int getDialogsStateErrorColor ( ) { 
 return dialogsStateErrorColor ; 
 } 
 @ @ - 419 , 67 + 304 , 79 @ @ public class ActorStyle { 
 this . dialogsStateErrorColor = dialogsStateErrorColor ; 
 } 
 
 + private int dialogsCounterTextColor = 0 ; 
 + 
 + public int getDialogsCounterTextColor ( ) { 
 + return getColorWithFallback ( dialogsCounterTextColor , getTextPrimaryInvColor ( ) ) ; 
 + } 
 + 
 + public void setDialogsCounterTextColor ( int dialogsCounterTextColor ) { 
 + this . dialogsCounterTextColor = dialogsCounterTextColor ; 
 + } 
 + 
 + private int dialogsCounterBackgroundColor = 0 ; 
 + 
 + public int getDialogsCounterBackgroundColor ( ) { 
 + return getColorWithFallback ( dialogsCounterBackgroundColor , getPrimaryAltColor ( ) ) ; 
 + } 
 + 
 + public void setDialogsCounterBackgroundColor ( int dialogsCounterBackgroundColor ) { 
 + this . dialogsCounterBackgroundColor = dialogsCounterBackgroundColor ; 
 + } 
 + 
 + private int dialogsDividerColor = 0 ; 
 + 
 public int getDialogsDividerColor ( ) { 
 - if ( dialogsDividerColor ! = 0 ) { 
 - return dialogsDividerColor ; 
 - } else { 
 - return getDividerColor ( ) ; 
 - } 
 + return getColorWithFallback ( dialogsDividerColor , getDividerColor ( ) ) ; 
 } 
 
 public void setDialogsDividerColor ( int dialogsDividerColor ) { 
 this . dialogsDividerColor = dialogsDividerColor ; 
 } 
 
 - public int getDialogsTitleColor ( ) { 
 - if ( dialogsTitleColor ! = 0 ) { 
 - return dialogsTitleColor ; 
 - } else { 
 - return getTextPrimaryColor ( ) ; 
 - } 
 + private int dialogsTitleColor = 0 ; 
 
 + public int getDialogsTitleColor ( ) { 
 + return getColorWithFallback ( dialogsTitleColor , getTextPrimaryColor ( ) ) ; 
 } 
 
 public void setDialogsTitleColor ( int dialogsTitleColor ) { 
 this . dialogsTitleColor = dialogsTitleColor ; 
 } 
 
 + private int dialogsTextColor = 0 ; 
 + 
 public int getDialogsTextColor ( ) { 
 - if ( dialogsTextColor ! = 0 ) { 
 - return dialogsTextColor ; 
 - } else { 
 - return getTextSecondaryColor ( ) ; 
 - } 
 + return getColorWithFallback ( dialogsTextColor , getTextSecondaryColor ( ) ) ; 
 } 
 
 public void setDialogsTextColor ( int dialogsTextColor ) { 
 this . dialogsTextColor = dialogsTextColor ; 
 } 
 
 - public int getDialogsTimeColor ( ) { 
 - if ( dialogsTimeColor ! = 0 ) { 
 - return dialogsTimeColor ; 
 - } else { 
 - return getTextSecondaryColor ( ) ; 
 - } 
 - } 
 - 
 - public void setDialogsTimeColor ( int dialogsTimeColor ) { 
 - this . dialogsTimeColor = dialogsTimeColor ; 
 - } 
 + private int dialogsTypingColor = 0 ; 
 
 public int getDialogsTypingColor ( ) { 
 - if ( dialogsTypingColor ! = 0 ) { 
 - return dialogsTypingColor ; 
 - } else { 
 - return getMainColor ( ) ; 
 - } 
 + return getColorWithFallback ( dialogsTypingColor , getMainColor ( ) ) ; 
 } 
 
 public void setDialogsTypingColor ( int dialogsTypingColor ) { 
 this . dialogsTypingColor = dialogsTypingColor ; 
 } 
 
 + private int dialogsActionColor = 0xff5882ac ; 
 + 
 + public int getDialogsActiveTextColor ( ) { 
 + return getColorWithFallback ( dialogsActionColor , getDialogsTextColor ( ) ) ; 
 + } 
 + 
 + public void setDialogsActiveTextColor ( int dialogsActionColor ) { 
 + this . dialogsActionColor = dialogsActionColor ; 
 + } 
 + 
 + / / Dividers 
 + private int dividerColor = 0x1E000000 ; 
 + 
 public int getDividerColor ( ) { 
 return dividerColor ; 
 } 
 @ @ - 488 , 6 + 385 , 8 @ @ public class ActorStyle { 
 return dividerInvColor ; 
 } 
 
 + private int dividerInvColor = 0x1Effffff ; 
 + 
 public void setDividerInvColor ( int dividerInvColor ) { 
 this . dividerInvColor = dividerInvColor ; 
 } 
 @ @ - 496 , 6 + 395 , 19 @ @ public class ActorStyle { 
 this . dividerColor = divider ; 
 } 
 
 + / / Text colors 
 + private int textPrimaryInvColor = 0xDEffffff ; 
 + 
 + public int getTextPrimaryInvColor ( ) { 
 + return textPrimaryInvColor ; 
 + } 
 + 
 + public void setTextPrimaryInvColor ( int textPrimaryInvColor ) { 
 + this . textPrimaryInvColor = textPrimaryInvColor ; 
 + } 
 + 
 + private int textPrimaryColor = 0xDE000000 ; 
 + 
 public int getTextPrimaryColor ( ) { 
 return textPrimaryColor ; 
 } 
 @ @ - 504 , 6 + 416 , 8 @ @ public class ActorStyle { 
 this . textPrimaryColor = textPrimaryColor ; 
 } 
 
 + private int textSecondaryColor = 0x7A000000 ; 
 + 
 public int getTextSecondaryColor ( ) { 
 return textSecondaryColor ; 
 } 
 @ @ - 512 , 18 + 426 , 18 @ @ public class ActorStyle { 
 this . textSecondaryColor = textSecondaryColor ; 
 } 
 
 + private int textSecondaryAccentColor = 0 ; 
 + 
 public int getTextSecondaryAccentColor ( ) { 
 - if ( textSecondaryAccentColor ! = 0 ) { 
 - return getTextSecondaryColor ( ) ; 
 - } else { 
 - return textSecondaryAccentColor ; 
 - } 
 + return getColorWithFallback ( textSecondaryAccentColor , getTextSecondaryColor ( ) ) ; 
 } 
 
 public void setTextSecondaryAccentColor ( int textSecondaryAccentColor ) { 
 this . textSecondaryAccentColor = textSecondaryAccentColor ; 
 } 
 
 + private int textHintColor = 0x42000000 ; 
 + 
 public int getTextHintColor ( ) { 
 return textHintColor ; 
 } 
 @ @ - 532 , 6 + 446 , 8 @ @ public class ActorStyle { 
 this . textHintColor = textHintColor ; 
 } 
 
 + private int textSubHeaderColor = 0x6F000000 ; 
 + 
 public int getTextSubHeaderColor ( ) { 
 return textSubHeaderColor ; 
 } 
 @ @ - 540 , 6 + 456 , 8 @ @ public class ActorStyle { 
 this . textSubHeaderColor = textSubHeaderColor ; 
 } 
 
 + private int textSecondaryInvColor = 0x8Affffff ; 
 + 
 public int getTextSecondaryInvColor ( ) { 
 return textSecondaryInvColor ; 
 } 
 @ @ - 548 , 6 + 466 , 8 @ @ public class ActorStyle { 
 this . textSecondaryInvColor = textSecondaryInvColor ; 
 } 
 
 + private int textHintInvColor = 0x42ffffff ; 
 + 
 public int getTextHintInvColor ( ) { 
 return textHintInvColor ; 
 } 
 @ @ - 556 , 6 + 476 , 8 @ @ public class ActorStyle { 
 this . textHintInvColor = textHintInvColor ; 
 } 
 
 + private int textSubheaderInvColor = 0x8Fffffff ; 
 + 
 public int getTextSubheaderInvColor ( ) { 
 return textSubheaderInvColor ; 
 } 
 @ @ - 564 , 18 + 486 , 19 @ @ public class ActorStyle { 
 this . textSubheaderInvColor = textSubheaderInvColor ; 
 } 
 
 - public int getListActionColor ( ) { 
 - if ( listActionColor ! = 0 ) { 
 - return listActionColor ; 
 - } else { 
 - return getMainColor ( ) ; 
 - } 
 + / / Settings 
 + private int settingsMainTitleColor = 0 ; 
 + 
 + public int getSettingsMainTitleColor ( ) { 
 + return getColorWithFallback ( settingsMainTitleColor , getListActionColor ( ) ) ; 
 } 
 
 - public void setListActionColor ( int listActionColor ) { 
 - this . listActionColor = listActionColor ; 
 + public void setSettingsMainTitleColor ( int settingsMainTitleColor ) { 
 + this . settingsMainTitleColor = settingsMainTitleColor ; 
 } 
 
 + private int sectonIconSmallColor = 0xffb5b6b7 ; 
 + 
 public int getSectonIconSmallColor ( ) { 
 return sectonIconSmallColor ; 
 } 
 @ @ - 584 , 182 + 507 , 162 @ @ public class ActorStyle { 
 this . sectonIconSmallColor = sectonIconSmallColor ; 
 } 
 
 + private int sectionIconLargeColor = 0 ; 
 + 
 public int getSectionIconLargeColor ( ) { 
 - if ( sectionIconLargeColor ! = 0 ) { 
 - return sectionIconLargeColor ; 
 - } else { 
 - return getMainColor ( ) ; 
 - } 
 + return getColorWithFallback ( sectionIconLargeColor , getMainColor ( ) ) ; 
 } 
 
 public void setSectionIconLargeColor ( int sectionIconLargeColor ) { 
 this . sectionIconLargeColor = sectionIconLargeColor ; 
 } 
 
 - public int getSettingsMainTitleColor ( ) { 
 - if ( listActionColor ! = 0 ) { 
 - return listActionColor ; 
 - } else { 
 - return getSettingsCategoryTextColor ( ) ; 
 - } 
 - } 
 - 
 - public void setSettingsMainTitleColor ( int settingsMainTitleColor ) { 
 - this . settingsMainTitleColor = settingsMainTitleColor ; 
 - } 
 + private int settingsIconColor = 0 ; 
 
 public int getSettingsIconColor ( ) { 
 - if ( settingsIconColor ! = 0 ) { 
 - return settingsIconColor ; 
 - } else { 
 - return getSectonIconSmallColor ( ) ; 
 - } 
 + return getColorWithFallback ( settingsIconColor , getSectonIconSmallColor ( ) ) ; 
 } 
 
 public void setSettingsIconColor ( int settingsIconColor ) { 
 this . settingsIconColor = settingsIconColor ; 
 } 
 
 + private int settingsTitleColor = 0 ; 
 + 
 public int getSettingsTitleColor ( ) { 
 - if ( settingsTitleColor ! = 0 ) { 
 - return settingsTitleColor ; 
 - } else { 
 - return getTextPrimaryColor ( ) ; 
 - } 
 + return getColorWithFallback ( settingsTitleColor , getTextPrimaryColor ( ) ) ; 
 } 
 
 public void setSettingsTitleColor ( int settingsTitleColor ) { 
 this . settingsTitleColor = settingsTitleColor ; 
 } 
 
 + private int settingsSubtitleColor = 0 ; 
 + 
 public int getSettingsSubtitleColor ( ) { 
 - if ( settingsSubtitleColor ! = 0 ) { 
 - return settingsSubtitleColor ; 
 - } else { 
 - return getTextSecondaryColor ( ) ; 
 - } 
 + return getColorWithFallback ( settingsSubtitleColor , getTextSecondaryColor ( ) ) ; 
 } 
 
 public void setSettingsSubtitleColor ( int settingsSubtitleColor ) { 
 this . settingsSubtitleColor = settingsSubtitleColor ; 
 } 
 
 + private int settingsCategoryTextColor = 0 ; 
 + 
 + public int getSettingsCategoryTextColor ( ) { 
 + return getColorWithFallback ( settingsCategoryTextColor , getMainColor ( ) ) ; 
 + } 
 + 
 + public void setSettingsCategoryTextColor ( int settingsCategoryTextColor ) { 
 + this . settingsCategoryTextColor = settingsCategoryTextColor ; 
 + } 
 + 
 + / / Profile 
 + private int profileTitleColor = 0 ; 
 + 
 public int getProfileTitleColor ( ) { 
 - if ( profileTitleColor ! = 0 ) { 
 - return profileTitleColor ; 
 - } else { 
 - return getTextPrimaryInvColor ( ) ; 
 - } 
 + return getColorWithFallback ( profileTitleColor , getTextPrimaryInvColor ( ) ) ; 
 } 
 
 public void setProfileTitleColor ( int profileTitleColor ) { 
 this . profileTitleColor = profileTitleColor ; 
 } 
 
 + private int profileSubtitleColor = 0 ; 
 + 
 public int getProfileSubtitleColor ( ) { 
 - if ( profileSubtitleColor ! = 0 ) { 
 - return profileSubtitleColor ; 
 - } else { 
 - return getTextSecondaryInvColor ( ) ; 
 - } 
 + return getColorWithFallback ( profileSubtitleColor , getTextSecondaryInvColor ( ) ) ; 
 } 
 
 public void setProfileSubtitleColor ( int profileSubtitleColor ) { 
 this . profileSubtitleColor = profileSubtitleColor ; 
 } 
 
 + private int profileIconColor = 0 ; 
 + 
 public int getProfilleIconColor ( ) { 
 - if ( profileIconColor ! = 0 ) { 
 - return profileIconColor ; 
 - } else { 
 - return getSectionIconLargeColor ( ) ; 
 - } 
 + return getColorWithFallback ( profileIconColor , getSectionIconLargeColor ( ) ) ; 
 + 
 } 
 
 public void setProfilleIconColor ( int profilleIconColor ) { 
 this . profileIconColor = profilleIconColor ; 
 } 
 
 + private int profileContactIconColor = 0 ; 
 + 
 public int getProfileContactIconColor ( ) { 
 - if ( profileContactIconColor ! = 0 ) { 
 - return profileContactIconColor ; 
 - } else { 
 - return getListActionColor ( ) ; 
 - } 
 + return getColorWithFallback ( profileContactIconColor , getListActionColor ( ) ) ; 
 } 
 
 public void setProfileContactIconColor ( int profileContactIconColor ) { 
 this . profileContactIconColor = profileContactIconColor ; 
 } 
 
 + private int profileRecordIconTintColor = 0 ; 
 + 
 + public int getProfileRecordIconTintColor ( ) { 
 + return getColorWithFallback ( profileRecordIconTintColor , getMainColor ( ) ) ; 
 + } 
 + 
 + public void setProfileRecordIconTintColor ( int profileRecordIconTintColor ) { 
 + this . profileRecordIconTintColor = profileRecordIconTintColor ; 
 + } 
 + 
 + / / Group Profile 
 + private int groupAdminColor = 0 ; 
 + 
 public int getGroupAdminColor ( ) { 
 - if ( groupAdminColor ! = 0 ) { 
 - return groupAdminColor ; 
 - } else { 
 - return getAccentColor ( ) ; 
 - } 
 + return getColorWithFallback ( groupAdminColor , getAccentColor ( ) ) ; 
 } 
 
 public void setGroupAdminColor ( int groupAdminColor ) { 
 this . groupAdminColor = groupAdminColor ; 
 } 
 
 + private int groupActionAddIconColor = 0 ; 
 + 
 public int getGroupActionAddIconColor ( ) { 
 - if ( groupActionAddIconColor ! = 0 ) { 
 - return groupActionAddIconColor ; 
 - } else { 
 - return getListActionColor ( ) ; 
 - } 
 + return getColorWithFallback ( groupActionAddIconColor , getListActionColor ( ) ) ; 
 } 
 
 public void setGroupActionAddIconColor ( int groupActionAddIconColor ) { 
 this . groupActionAddIconColor = groupActionAddIconColor ; 
 } 
 
 + private int groupActionAddTextColor = 0 ; 
 + 
 public int getGroupActionAddTextColor ( ) { 
 - if ( groupActionAddTextColor ! = 0 ) { 
 - return groupActionAddTextColor ; 
 - } else { 
 - return getListActionColor ( ) ; 
 - } 
 + return getColorWithFallback ( groupActionAddTextColor , getListActionColor ( ) ) ; 
 } 
 
 public void setGroupActionAddTextColor ( int groupActionAddTextColor ) { 
 this . groupActionAddTextColor = groupActionAddTextColor ; 
 } 
 
 - public int getContactDividerColor ( ) { 
 - if ( contactDividerColor ! = 0 ) { 
 - return contactDividerColor ; 
 - } else { 
 - return getDividerColor ( ) ; 
 - } 
 - } 
 + private int groupOnlineColor = 0xff7ea8ef ; 
 
 - public void setContactDividerColor ( int contactDividerColor ) { 
 - this . contactDividerColor = contactDividerColor ; 
 + public int getGroupOnlineColor ( ) { 
 + return groupOnlineColor ; 
 } 
 
 - public int getMainFabbgColor ( ) { 
 - return mainFabbgColor ; 
 + public void setGroupOnlineColor ( int groupOnlineColor ) { 
 + this . groupOnlineColor = groupOnlineColor ; 
 } 
 
 - public void setMainFabbgColor ( int mainFabbgColor ) { 
 - this . mainFabbgColor = mainFabbgColor ; 
 - } 
 + / / Conversation 
 + private int convSendEnabledColor = 0 ; 
 
 public int getConvSendEnabledColor ( ) { 
 - if ( convSendEnabledColor ! = 0 ) { 
 - return convSendEnabledColor ; 
 - } else { 
 - return getMainColor ( ) ; 
 - } 
 + return getColorWithFallback ( convSendEnabledColor , getMainColor ( ) ) ; 
 } 
 
 public void setConvSendEnabledColor ( int convSendEnabledColor ) { 
 this . convSendEnabledColor = convSendEnabledColor ; 
 } 
 
 + private int convSendDisabledColor = 0x42000000 ; 
 + 
 public int getConvSendDisabledColor ( ) { 
 return convSendDisabledColor ; 
 } 
 @ @ - 768 , 6 + 671 , 8 @ @ public class ActorStyle { 
 this . convSendDisabledColor = convSendDisabledColor ; 
 } 
 
 + private int convDateLineColor = 0x14000000 ; 
 + 
 public int getConvDateLineColor ( ) { 
 return convDateLineColor ; 
 } 
 @ @ - 776 , 6 + 681 , 8 @ @ public class ActorStyle { 
 this . convDateLineColor = convDateLineColor ; 
 } 
 
 + private int convDatetextColor = 0xffffffff ; 
 + 
 public int getConvDatetextColor ( ) { 
 return convDatetextColor ; 
 } 
 @ @ - 784 , 6 + 691 , 8 @ @ public class ActorStyle { 
 this . convDatetextColor = convDatetextColor ; 
 } 
 
 + private int convDateBgColor = 0x99000000 ; 
 + 
 public int getConvDateBgColor ( ) { 
 return convDateBgColor ; 
 } 
 @ @ - 792 , 18 + 701 , 18 @ @ public class ActorStyle { 
 this . convDateBgColor = convDateBgColor ; 
 } 
 
 + private int convTextColor = 0 ; 
 + 
 public int getConvTextColor ( ) { 
 - if ( convTextColor ! = 0 ) { 
 - return convTextColor ; 
 - } else { 
 - return getTextPrimaryColor ( ) ; 
 - } 
 + return getColorWithFallback ( convTextColor , getTextPrimaryColor ( ) ) ; 
 } 
 
 public void setConvTextColor ( int convTextColor ) { 
 this . convTextColor = convTextColor ; 
 } 
 
 + private int convTimeColor = 0x60000000 ; 
 + 
 public int getConvTimeColor ( ) { 
 return convTimeColor ; 
 } 
 @ @ - 812 , 6 + 721 , 8 @ @ public class ActorStyle { 
 this . convTimeColor = convTimeColor ; 
 } 
 
 + private int convStatePendingColor = 0x40000000 ; 
 + 
 public int getConvStatePendingColor ( ) { 
 return convStatePendingColor ; 
 } 
 @ @ - 820 , 6 + 731 , 8 @ @ public class ActorStyle { 
 this . convStatePendingColor = convStatePendingColor ; 
 } 
 
 + private int convStateSentColor = 0x40000000 ; 
 + 
 public int getConvStateSentColor ( ) { 
 return convStateSentColor ; 
 } 
 @ @ - 828 , 6 + 741 , 8 @ @ public class ActorStyle { 
 this . convStateSentColor = convStateSentColor ; 
 } 
 
 + private int convStateDeliveredColor = 0x40000000 ; 
 + 
 public int getConvStateDeliveredColor ( ) { 
 return convStateDeliveredColor ; 
 } 
 @ @ - 836 , 6 + 751 , 8 @ @ public class ActorStyle { 
 this . convStateDeliveredColor = convStateDeliveredColor ; 
 } 
 
 + private int convStateReadColor = 0xff7ea8ef ; 
 + 
 public int getConvStateReadColor ( ) { 
 return convStateReadColor ; 
 } 
 @ @ - 844 , 6 + 761 , 8 @ @ public class ActorStyle { 
 this . convStateReadColor = convStateReadColor ; 
 } 
 
 + private int convStateErrorColor = 0xffd24a43 ; 
 + 
 public int getConvStateErrorColor ( ) { 
 return convStateErrorColor ; 
 } 
 @ @ - 852 , 6 + 771 , 8 @ @ public class ActorStyle { 
 this . convStateErrorColor = convStateErrorColor ; 
 } 
 
 + private int convStateWarrningColor = 0xffd24a43 ; 
 + 
 public int getConvStateWarrningColor ( ) { 
 return convStateWarrningColor ; 
 } 
 @ @ - 860 , 6 + 781 , 8 @ @ public class ActorStyle { 
 this . convStateWarrningColor = convStateWarrningColor ; 
 } 
 
 + private int convMediaDateBgColor = 0x99000000 ; 
 + 
 public int getConvMediaDateBgColor ( ) { 
 return convMediaDateBgColor ; 
 } 
 @ @ - 868 , 6 + 791 , 8 @ @ public class ActorStyle { 
 this . convMediaDateBgColor = convMediaDateBgColor ; 
 } 
 
 + private int convMediaStatePendingColor = 0xffffffff ; 
 + 
 public int getConvMediaStatePendingColor ( ) { 
 return convMediaStatePendingColor ; 
 } 
 @ @ - 876 , 6 + 801 , 8 @ @ public class ActorStyle { 
 this . convMediaStatePendingColor = convMediaStatePendingColor ; 
 } 
 
 + private int convMediaStateSentColor = 0xffffffff ; 
 + 
 public int getConvMediaStateSentColor ( ) { 
 return convMediaStateSentColor ; 
 } 
 @ @ - 884 , 6 + 811 , 8 @ @ public class ActorStyle { 
 this . convMediaStateSentColor = convMediaStateSentColor ; 
 } 
 
 + private int convMediaStateDeliveredColor = 0xffffffff ; 
 + 
 public int getConvMediaStateDeliveredColor ( ) { 
 return convMediaStateDeliveredColor ; 
 } 
 @ @ - 892 , 6 + 821 , 8 @ @ public class ActorStyle { 
 this . convMediaStateDeliveredColor = convMediaStateDeliveredColor ; 
 } 
 
 + private int convMediaStateReadColor = 0xff7ea8ef ; 
 + 
 public int getConvMediaStateReadColor ( ) { 
 return convMediaStateReadColor ; 
 } 
 @ @ - 900 , 6 + 831 , 8 @ @ public class ActorStyle { 
 this . convMediaStateReadColor = convMediaStateReadColor ; 
 } 
 
 + private int convMediaStateErrorColor = 0xffed534b ; 
 + 
 public int getConvMediaStateErrorColor ( ) { 
 return convMediaStateErrorColor ; 
 } 
 @ @ - 908 , 6 + 841 , 8 @ @ public class ActorStyle { 
 this . convMediaStateErrorColor = convMediaStateErrorColor ; 
 } 
 
 + private int convMediaStateWarrningColor = 0xffed534b ; 
 + 
 public int getConvMediaStateWarrningColor ( ) { 
 return convMediaStateWarrningColor ; 
 } 
 @ @ - 916 , 17 + 851 , 7 @ @ public class ActorStyle { 
 this . convMediaStateWarrningColor = convMediaStateWarrningColor ; 
 } 
 
 - public static int getDarkenArgb ( int color , double percent ) { 
 - return Color . argb ( Color . alpha ( color ) , ( int ) Math . round ( Color . red ( color ) * percent ) , ( int ) Math . round ( Color . green ( color ) * percent ) , ( int ) Math . round ( Color . blue ( color ) * percent ) ) ; 
 - } 
 - 
 - public int getGroupOnlineColor ( ) { 
 - return groupOnlineColor ; 
 - } 
 - 
 - public void setGroupOnlineColor ( int groupOnlineColor ) { 
 - this . groupOnlineColor = groupOnlineColor ; 
 - } 
 + private int convLikeColor = 0xffe2264d ; 
 
 public int getConvLikeColor ( ) { 
 return convLikeColor ; 
 @ @ - 936 , 27 + 861 , 54 @ @ public class ActorStyle { 
 this . convLikeColor = convLikeColor ; 
 } 
 
 - public int [ ] getDefaultBackgrouds ( ) { 
 - return defaultBackgrouds ; 
 + / / 
 + / / Color utils 
 + / / 
 + 
 + public int getMainPressedColor ( ) { 
 + return getDarkenArgb ( getMainColor ( ) , 0 . 95 ) ; 
 } 
 
 - public void setDefaultBackgrouds ( int [ ] defaultBackgrouds ) { 
 - this . defaultBackgrouds = defaultBackgrouds ; 
 + public static int getDarkenArgb ( int color , double percent ) { 
 + return Color . argb ( Color . alpha ( color ) , ( int ) Math . round ( Color . red ( color ) * percent ) , ( int ) Math . round ( Color . green ( color ) * percent ) , ( int ) Math . round ( Color . blue ( color ) * percent ) ) ; 
 + } 
 + 
 + / * * 
 + * Get color with fallback to default - if color is 0 , returns fallback color 
 + * 
 + * @ param baseColor base color 
 + * @ param fallbackColor fallback color 
 + * @ return base or fallback color if base color is set to 0 
 + * / 
 + public int getColorWithFallback ( int baseColor , int fallbackColor ) { 
 + if ( baseColor ! = 0 ) { 
 + return baseColor ; 
 + } else { 
 + return fallbackColor ; 
 + } 
 } 
 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / DIMENSIONS / / 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + / / DialogsFragment layout settings 
 + private int dialogsPaddingTop = Screen . dp ( 8 ) ; 
 public int getDialogsPaddingTop ( ) { 
 return dialogsPaddingTop ; 
 } 
 - 
 public void setDialogsPaddingTop ( int dialogsPaddingTop ) { 
 this . dialogsPaddingTop = dialogsPaddingTop ; 
 } 
 
 + / / ContactsFragment layout settings 
 + private int contactsMainPaddingTop = 0 ; 
 + 
 public int getContactsMainPaddingTop ( ) { 
 return contactsMainPaddingTop ; 
 } 
 - 
 public void setContactsMainPaddingTop ( int contactsMainPaddingTop ) { 
 this . contactsMainPaddingTop = contactsMainPaddingTop ; 
 } 
 + 
 }

NEAREST DIFF:
diff - - git a / apps / actor - android / src / main / java / im / actor / messenger / app / fragment / auth / BackspaceKeyEditText . java b / apps / actor - android / src / main / java / im / actor / messenger / app / fragment / auth / BackspaceKeyEditText . java 
 index e785ae6 . . 2b0ec15 100644 
 - - - a / apps / actor - android / src / main / java / im / actor / messenger / app / fragment / auth / BackspaceKeyEditText . java 
 + + + b / apps / actor - android / src / main / java / im / actor / messenger / app / fragment / auth / BackspaceKeyEditText . java 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package im . actor . messenger . app . fragment . auth ; 
 
 import android . content . Context ; 
 - import android . support . v7 . internal . widget . TintEditText ; 
 import android . util . AttributeSet ; 
 import android . view . KeyEvent ; 
 import android . view . inputmethod . EditorInfo ; 
 @ @ - 9 , 7 + 8 , 7 @ @ import android . view . inputmethod . InputConnection ; 
 import android . view . inputmethod . InputConnectionWrapper ; 
 import android . widget . EditText ; 
 
 - public class BackspaceKeyEditText extends TintEditText { 
 + public class BackspaceKeyEditText extends EditText { 
 
 private BackspacePressListener listener ; 
 
 diff - - git a / apps / actor - android / src / main / res / values / styles . xml b / apps / actor - android / src / main / res / values / styles . xml 
 index c3ac8ae . . 8572f57 100644 
 - - - a / apps / actor - android / src / main / res / values / styles . xml 
 + + + b / apps / actor - android / src / main / res / values / styles . xml 
 @ @ - 11 , 12 + 11 , 17 @ @ 
 < item name = " android : colorPrimary " > @ color / primary < / item > 
 < item name = " android : colorPrimaryDark " > @ color / primary _ hovered < / item > 
 < item name = " android : colorAccent " > @ color / accent < / item > 
 + 
 + 
 < / style > 
 
 < style name = " MainActivityTheme " parent = " AppToolbarTheme " > 
 + < item name = " android : windowBackground " > @ color / bg _ main < / item > 
 + 
 < item name = " windowActionBar " > false < / item > 
 + < item name = " windowNoTitle " > true < / item > 
 < item name = " android : windowActionBar " > false < / item > 
 - < item name = " android : windowBackground " > @ color / bg _ main < / item > 
 + < item name = " android : windowNoTitle " > true < / item > 
 < / style > 
 
 < style name = " ProfileActivityTheme " parent = " AppToolbarTheme " > 
 diff - - git a / library / actor - common / src / main / java / im / actor / model / network / connection / AsyncConnectionFactory . java b / library / actor - common / src / main / java / im / actor / model / network / connection / AsyncConnectionFactory . java 
 index 986847f . . 2c281d8 100644 
 - - - a / library / actor - common / src / main / java / im / actor / model / network / connection / AsyncConnectionFactory . java 
 + + + b / library / actor - common / src / main / java / im / actor / model / network / connection / AsyncConnectionFactory . java 
 @ @ - 6 , 5 + 6 , 5 @ @ import im . actor . model . network . ConnectionEndpoint ; 
 * Created by ex3ndr on 29 . 04 . 15 . 
 * / 
 public interface AsyncConnectionFactory { 
 - AsyncConnection createConnection ( ConnectionEndpoint endpoint , AsyncConnectionInterface connectionInterface ) ; 
 + AsyncConnection createConnection ( int connectionId , ConnectionEndpoint endpoint , AsyncConnectionInterface connectionInterface ) ; 
 } 
 diff - - git a / library / actor - common / src / main / java / im / actor / model / network / connection / ManagedConnection . java b / library / actor - common / src / main / java / im / actor / model / network / connection / ManagedConnection . java 
 index 6b9e800 . . 6896cdb 100644 
 - - - a / library / actor - common / src / main / java / im / actor / model / network / connection / ManagedConnection . java 
 + + + b / library / actor - common / src / main / java / im / actor / model / network / connection / ManagedConnection . java 
 @ @ - 20 , 7 + 20 , 7 @ @ import im . actor . model . util . CRC32 ; 
 * / 
 public class ManagedConnection implements Connection { 
 
 - private static final int CONNECTION _ TIMEOUT = 5 * 1000 ; 
 + public static final int CONNECTION _ TIMEOUT = 5 * 1000 ; 
 private static final int HANDSHAKE _ TIMEOUT = 5 * 1000 ; 
 private static final int RESPONSE _ TIMEOUT = 5 * 1000 ; 
 private static final int PING _ TIMEOUT = 5 * 60 * 1000 ; 
 @ @ - 76 , 7 + 76 , 7 @ @ public class ManagedConnection implements Connection { 
 this . apiMinorVersion = apiMinorVersion ; 
 this . callback = callback ; 
 this . factoryCallback = factoryCallback ; 
 - this . rawConnection = connectionFactory . createConnection ( endpoint , connectionInterface ) ; 
 + this . rawConnection = connectionFactory . createConnection ( connectionId , endpoint , connectionInterface ) ; 
 Log . d ( TAG , " Starting connection " ) ; 
 
 handshakeTimeout = new TimerCompat ( new TimeoutRunnable ( ) ) ; 
 @ @ - 335 , 9 + 335 , 12 @ @ public class ManagedConnection implements Connection { 
 e . printStackTrace ( ) ; 
 close ( ) ; 
 } 
 + 
 + Log . w ( TAG , " onRawReceived : end " ) ; 
 } 
 
 private synchronized void onRawClosed ( ) { 
 + Log . w ( TAG , " Received closed event " ) ; 
 close ( ) ; 
 } 
 
 @ @ - 348 , 6 + 351 , 7 @ @ public class ManagedConnection implements Connection { 
 } 
 
 private synchronized void rawPost ( int header , byte [ ] data , int offset , int len ) { 
 + Log . w ( TAG , " rawPost " ) ; 
 int packageId = sentPackages + + ; 
 DataOutput dataOutput = new DataOutput ( ) ; 
 dataOutput . writeInt ( packageId ) ; 
 @ @ - 371 , 6 + 375 , 7 @ @ public class ManagedConnection implements Connection { 
 
 @ Override 
 public synchronized void post ( byte [ ] data , int offset , int len ) { 
 + Log . w ( TAG , " post " ) ; 
 if ( isClosed ) { 
 return ; 
 } 
 @ @ - 389 , 6 + 394 , 7 @ @ public class ManagedConnection implements Connection { 
 
 @ Override 
 public synchronized void close ( ) { 
 + Log . w ( TAG , " close " ) ; 
 if ( isClosed ) { 
 return ; 
 } 
 diff - - git a / library / actor - js / src / main / java / im / actor / model / js / providers / websocket / WebSocketConnection . java b / library / actor - js / src / main / java / im / actor / model / js / providers / websocket / WebSocketConnection . java 
 index a768087 . . f9703b6 100644 
 - - - a / library / actor - js / src / main / java / im / actor / model / js / providers / websocket / WebSocketConnection . java 
 + + + b / library / actor - js / src / main / java / im / actor / model / js / providers / websocket / WebSocketConnection . java 
 @ @ - 16 , 6 + 16 , 7 @ @ import im . actor . model . network . connection . AsyncConnectionInterface ; 
 public class WebSocketConnection extends AsyncConnection { 
 
 private JavaScriptObject jsWebSocket ; 
 + private boolean isClosed ; 
 
 public WebSocketConnection ( ConnectionEndpoint endpoint , AsyncConnectionInterface connection ) { 
 super ( endpoint , connection ) ; 
 @ @ - 23 , 6 + 24 , 8 @ @ public class WebSocketConnection extends AsyncConnection { 
 
 @ Override 
 public void doConnect ( ) { 
 + isClosed = true ; 
 + 
 String url ; 
 if ( getEndpoint ( ) . getType ( ) = = ConnectionEndpoint . Type . WS ) { 
 url = " ws : / / " + getEndpoint ( ) . getHost ( ) + " : " + getEndpoint ( ) . getPort ( ) + " / " ; 
 @ @ - 37 , 6 + 40 , 9 @ @ public class WebSocketConnection extends AsyncConnection { 
 
 @ Override 
 public void doSend ( byte [ ] data ) { 
 + if ( isClosed ) { 
 + return ; 
 + } 
 Uint8Array push = TypedArrays . createUint8Array ( data . length ) ; 
 for ( int i = 0 ; i < data . length ; i + + ) { 
 push . set ( i , data [ i ] ) ; 
 @ @ - 46 , 10 + 52 , 14 @ @ public class WebSocketConnection extends AsyncConnection { 
 
 @ Override 
 public void doClose ( ) { 
 + isClosed = true ; 
 close ( ) ; 
 } 
 
 private void onRawMessage ( ArrayBuffer message ) { 
 + if ( isClosed ) { 
 + return ; 
 + } 
 Uint8Array array = TypedArrays . createUint8Array ( message ) ; 
 byte [ ] res = new byte [ array . length ( ) ] ; 
 for ( int i = 0 ; i < res . length ; i + + ) { 
 @ @ - 60 , 11 + 70 , 13 @ @ public class WebSocketConnection extends AsyncConnection { 
 
 private void onRawConnected ( ) { 
 Log . d ( " WS " , " Connected " ) ; 
 + isClosed = false ; 
 onConnected ( ) ; 
 } 
 
 private void onRawClosed ( ) { 
 Log . d ( " WS " , " Closed " ) ; 
 + isClosed = true ; 
 onClosed ( ) ; 
 } 
 
 diff - - git a / library / actor - jvm / src / main / java / im / actor / model / jvm / JavaNetworkProvider . java b / library / actor - jvm / src / main / java / im / actor / model / jvm / JavaNetworkProvider . java 
 index 2cc9e64 . . f1049db 100644 
 - - - a / library / actor - jvm / src / main / java / im / actor / model / jvm / JavaNetworkProvider . java 
 + + + b / library / actor - jvm / src / main / java / im / actor / model / jvm / JavaNetworkProvider . java 
 @ @ - 1 , 39 + 1 , 14 @ @ 
 package im . actor . model . jvm ; 
 
 - import im . actor . model . NetworkProvider ; 
 - import im . actor . model . network . ConnectionCallback ; 
 - import im . actor . model . network . ConnectionEndpoint ; 
 - import im . actor . model . network . CreateConnectionCallback ; 
 + import im . actor . model . jvm . tcp . AsyncTcpConnectionFactory ; 
 + import im . actor . model . network . connection . ManagedNetworkProvider ; 
 
 / * * 
 * Created by ex3ndr on 13 . 04 . 15 . 
 * / 
 - public class JavaNetworkProvider implements NetworkProvider { 
 + public class JavaNetworkProvider extends ManagedNetworkProvider { 
 
 - @ Override 
 - public void createConnection ( final int connectionId , 
 - final int mtprotoVersion , 
 - final int apiMajorVersion , 
 - final int apiMinorVersion , 
 - final ConnectionEndpoint endpoint , final ConnectionCallback callback , 
 - final CreateConnectionCallback createCallback ) { 
 - new Thread ( ) { 
 - @ Override 
 - public void run ( ) { 
 - try { 
 - createCallback . onConnectionCreated ( 
 - new JavaTcpConnection ( 
 - connectionId , 
 - mtprotoVersion , 
 - apiMajorVersion , 
 - apiMinorVersion , 
 - endpoint , 
 - callback ) ) ; 
 - } catch ( Exception e ) { 
 - e . printStackTrace ( ) ; 
 - createCallback . onConnectionCreateError ( ) ; 
 - } 
 - } 
 - } . start ( ) ; 
 + public JavaNetworkProvider ( ) { 
 + super ( new AsyncTcpConnectionFactory ( ) ) ; 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / library / actor - jvm / src / main / java / im / actor / model / jvm / JavaTcpConnection . java b / library / actor - jvm / src / main / java / im / actor / model / jvm / JavaTcpConnection . java 
 deleted file mode 100644 
 index eee1ea8 . . 0000000 
 - - - a / library / actor - jvm / src / main / java / im / actor / model / jvm / JavaTcpConnection . java 
 + + + / dev / null 
 @ @ - 1 , 545 + 0 , 0 @ @ 
 - package im . actor . model . jvm ; 
 - 
 - import java . io . IOException ; 
 - import java . io . InputStream ; 
 - import java . io . OutputStream ; 
 - import java . net . InetSocketAddress ; 
 - import java . net . Socket ; 
 - import java . util . Arrays ; 
 - import java . util . HashMap ; 
 - import java . util . Random ; 
 - import java . util . Timer ; 
 - import java . util . TimerTask ; 
 - import java . util . concurrent . ConcurrentLinkedQueue ; 
 - 
 - import javax . net . ssl . SSLSocketFactory ; 
 - 
 - import im . actor . model . crypto . CryptoUtils ; 
 - import im . actor . model . droidkit . bser . DataInput ; 
 - import im . actor . model . droidkit . bser . DataOutput ; 
 - import im . actor . model . log . Log ; 
 - import im . actor . model . network . Connection ; 
 - import im . actor . model . network . ConnectionCallback ; 
 - import im . actor . model . network . ConnectionEndpoint ; 
 - import im . actor . model . util . CRC32 ; 
 - 
 - / * * 
 - * Created by ex3ndr on 13 . 04 . 15 . 
 - * / 
 - public class JavaTcpConnection implements Connection { 
 - 
 - private static final int CONNECTION _ TIMEOUT = 5 * 1000 ; 
 - private static final int HANDSHAKE _ TIMEOUT = 5 * 1000 ; 
 - private static final int RESPONSE _ TIMEOUT = 5 * 1000 ; 
 - private static final int PING _ TIMEOUT = 5 * 60 * 1000 ; 
 - 
 - private static final int HEADER _ PROTO = 0 ; 
 - private static final int HEADER _ PING = 1 ; 
 - private static final int HEADER _ PONG = 2 ; 
 - private static final int HEADER _ DROP = 3 ; 
 - private static final int HEADER _ REDIRECT = 4 ; 
 - private static final int HEADER _ ACK = 6 ; 
 - 
 - private static final Random RANDOM = new Random ( ) ; 
 - private static final Timer DIE _ TIMER = new Timer ( ) ; 
 - 
 - private final String TAG ; 
 - private final ConnectionCallback callback ; 
 - private final Socket socket ; 
 - private final InputStream inputStream ; 
 - private final OutputStream outputStream ; 
 - private final ReaderThread readerThread ; 
 - private final WriterThread writerThread ; 
 - private TimerTask pingTask ; 
 - private final HashMap < Long , TimerTask > schedulledPings = new HashMap < Long , TimerTask > ( ) ; 
 - private final HashMap < Integer , TimerTask > packageTimers = new HashMap < Integer , TimerTask > ( ) ; 
 - 
 - / / Connection state 
 - private int sentPackets ; 
 - private int receivedPackets ; 
 - private boolean isClosed ; 
 - 
 - public JavaTcpConnection ( int id , 
 - int mtprotoVersion , 
 - int apiMajorVersion , 
 - int apiMinorVersion , 
 - ConnectionEndpoint endpoint , 
 - ConnectionCallback callback ) throws IOException { 
 - this . TAG = " Connection # " + id ; 
 - this . callback = callback ; 
 - this . isClosed = false ; 
 - this . sentPackets = 0 ; 
 - this . receivedPackets = 0 ; 
 - 
 - / / Log . d ( TAG , " Creating socket . . . " ) ; 
 - switch ( endpoint . getType ( ) ) { 
 - case TCP : 
 - socket = new Socket ( ) ; 
 - break ; 
 - case TCP _ TLS : 
 - socket = SSLSocketFactory . getDefault ( ) . createSocket ( ) ; 
 - break ; 
 - default : 
 - throw new IOException ( " Unsupported endpoint type : " + endpoint . getType ( ) ) ; 
 - } 
 - 
 - this . socket . setKeepAlive ( false ) ; 
 - this . socket . setTcpNoDelay ( true ) ; 
 - 
 - / / Log . d ( TAG , " Connecting socket . . . " ) ; 
 - 
 - this . socket . connect ( new InetSocketAddress ( endpoint . getHost ( ) , endpoint . getPort ( ) ) , CONNECTION _ TIMEOUT ) ; 
 - 
 - / / Log . d ( TAG , " Performing handshake . . . " ) ; 
 - 
 - / / Init socket streams 
 - inputStream = this . socket . getInputStream ( ) ; 
 - outputStream = this . socket . getOutputStream ( ) ; 
 - 
 - / / Handshake request 
 - DataOutput handshakeRequest = new DataOutput ( ) ; 
 - handshakeRequest . writeByte ( mtprotoVersion ) ; 
 - handshakeRequest . writeByte ( apiMajorVersion ) ; 
 - handshakeRequest . writeByte ( apiMinorVersion ) ; 
 - byte [ ] randomData = new byte [ 32 ] ; 
 - synchronized ( RANDOM ) { 
 - RANDOM . nextBytes ( randomData ) ; 
 - } 
 - handshakeRequest . writeInt ( randomData . length ) ; 
 - handshakeRequest . writeBytes ( randomData , 0 , randomData . length ) ; 
 - outputStream . write ( handshakeRequest . toByteArray ( ) ) ; 
 - outputStream . flush ( ) ; 
 - 
 - / / Log . d ( TAG , " Reading handshake response . . . " ) ; 
 - / / Handshake response 
 - socket . setSoTimeout ( HANDSHAKE _ TIMEOUT ) ; 
 - byte [ ] data = readBytes ( 3 + 32 ) ; 
 - socket . setSoTimeout ( 0 ) ; 
 - DataInput handshakeResponse = new DataInput ( data ) ; 
 - int protoVersion = handshakeResponse . readByte ( ) ; 
 - int apiMajor = handshakeResponse . readByte ( ) ; 
 - int apiMinor = handshakeResponse . readByte ( ) ; 
 - byte [ ] sha256 = handshakeResponse . readBytes ( 32 ) ; 
 - byte [ ] localSha256 = CryptoUtils . SHA256 ( randomData ) ; 
 - 
 - if ( ! Arrays . equals ( sha256 , localSha256 ) ) { 
 - throw new IOException ( " SHA 256 is incorrect " ) ; 
 - } 
 - if ( protoVersion ! = 1 ) { 
 - throw new IOException ( " Incorrect Proto Version , expected : 1 , got " + protoVersion + " ; " ) ; 
 - } 
 - if ( apiMajor ! = 1 ) { 
 - throw new IOException ( " Incorrect Api Major Version , expected : 1 , got " + apiMajor + " ; " ) ; 
 - } 
 - if ( apiMinor ! = 0 ) { 
 - throw new IOException ( " Incorrect Api Minor Version , expected : 0 , got " + apiMinor + " ; " ) ; 
 - } 
 - 
 - / / Log . d ( TAG , " Handshake completed . " ) ; 
 - 
 - readerThread = new ReaderThread ( ) ; 
 - writerThread = new WriterThread ( ) ; 
 - readerThread . start ( ) ; 
 - writerThread . start ( ) ; 
 - 
 - pingTask = new PingTask ( ) ; 
 - DIE _ TIMER . schedule ( pingTask , PING _ TIMEOUT ) ; 
 - } 
 - 
 - @ Override 
 - public synchronized void post ( byte [ ] data , int offset , int len ) { 
 - post ( HEADER _ PROTO , data , offset , len ) ; 
 - } 
 - 
 - protected synchronized void post ( int header , byte [ ] data ) { 
 - post ( header , data , 0 , data . length ) ; 
 - } 
 - 
 - protected synchronized void post ( int header , byte [ ] data , int offset , int len ) { 
 - writerThread . pushPackage ( new WritePackage ( header , data , offset , len ) ) ; 
 - } 
 - 
 - @ Override 
 - public synchronized boolean isClosed ( ) { 
 - return isClosed ; 
 - } 
 - 
 - @ Override 
 - public synchronized void close ( ) { 
 - if ( isClosed ) { 
 - return ; 
 - } 
 - isClosed = true ; 
 - 
 - try { 
 - readerThread . interrupt ( ) ; 
 - } catch ( Exception e ) { 
 - Log . e ( TAG , e ) ; 
 - } 
 - 
 - try { 
 - writerThread . interrupt ( ) ; 
 - } catch ( Exception e ) { 
 - Log . e ( TAG , e ) ; 
 - } 
 - 
 - try { 
 - socket . close ( ) ; 
 - } catch ( IOException e ) { 
 - Log . e ( TAG , e ) ; 
 - } 
 - 
 - callback . onConnectionDie ( ) ; 
 - 
 - synchronized ( packageTimers ) { 
 - for ( Integer id : packageTimers . keySet ( ) ) { 
 - packageTimers . get ( id ) . cancel ( ) ; 
 - } 
 - for ( Long ping : schedulledPings . keySet ( ) ) { 
 - schedulledPings . get ( ping ) . cancel ( ) ; 
 - } 
 - schedulledPings . clear ( ) ; 
 - packageTimers . clear ( ) ; 
 - } 
 - 
 - pingTask . cancel ( ) ; 
 - } 
 - 
 - private void onServerAck ( int packageId ) { 
 - synchronized ( packageTimers ) { 
 - TimerTask task = packageTimers . remove ( packageId ) ; 
 - if ( task = = null ) { 
 - return ; 
 - } 
 - task . cancel ( ) ; 
 - 
 - refreshTimeouts ( ) ; 
 - } 
 - } 
 - 
 - private void onServerPong ( long pingId ) { 
 - synchronized ( packageTimers ) { 
 - TimerTask task = schedulledPings . remove ( pingId ) ; 
 - if ( task = = null ) { 
 - return ; 
 - } 
 - task . cancel ( ) ; 
 - 
 - refreshTimeouts ( ) ; 
 - } 
 - } 
 - 
 - private void refreshTimeouts ( ) { 
 - for ( Long ping : schedulledPings . keySet ( ) . toArray ( new Long [ 0 ] ) ) { 
 - / / Remove old 
 - TimerTask oldTask = schedulledPings . remove ( ping ) ; 
 - oldTask . cancel ( ) ; 
 - 
 - / / Add new 
 - PingTimeoutTask newTask = new PingTimeoutTask ( ping ) ; 
 - schedulledPings . put ( ping , newTask ) ; 
 - DIE _ TIMER . schedule ( newTask , RESPONSE _ TIMEOUT ) ; 
 - } 
 - for ( Integer id : packageTimers . keySet ( ) . toArray ( new Integer [ 0 ] ) ) { 
 - / / Remove old 
 - TimerTask oldTask = packageTimers . get ( id ) ; 
 - oldTask . cancel ( ) ; 
 - 
 - / / Add new 
 - FrameTimeoutTask newTask = new FrameTimeoutTask ( id ) ; 
 - packageTimers . put ( id , newTask ) ; 
 - DIE _ TIMER . schedule ( newTask , RESPONSE _ TIMEOUT ) ; 
 - } 
 - 
 - pingTask . cancel ( ) ; 
 - 
 - pingTask = new PingTask ( ) ; 
 - DIE _ TIMER . schedule ( pingTask , PING _ TIMEOUT ) ; 
 - } 
 - 
 - private class ReaderThread extends Thread { 
 - 
 - private final CRC32 crc32Engine = new CRC32 ( ) ; 
 - 
 - private ReaderThread ( ) { 
 - setName ( TAG + " # Reader " + hashCode ( ) ) ; 
 - } 
 - 
 - @ Override 
 - public void run ( ) { 
 - try { 
 - while ( ! isClosed ( ) ) { 
 - if ( socket . isClosed ( ) ) { 
 - throw new IOException ( " Socket is closed " ) ; 
 - } 
 - if ( ! socket . isConnected ( ) ) { 
 - throw new IOException ( " Socket is not connected " ) ; 
 - } 
 - 
 - / / Reading package headers 
 - / / Log . d ( TAG , " Waiting for frame header . . . " ) ; 
 - byte [ ] packageHeader = readBytes ( 9 ) ; 
 - DataInput dataInput = new DataInput ( packageHeader ) ; 
 - int receivedPackageIndex = dataInput . readInt ( ) ; 
 - if ( receivedPackageIndex ! = receivedPackets ) { 
 - throw new IOException ( " Received frame with incorrect index . " + 
 - " Expected : " + receivedPackets + " , got : " + receivedPackageIndex ) ; 
 - } 
 - receivedPackets + + ; 
 - int header = dataInput . readByte ( ) ; 
 - int size = dataInput . readInt ( ) ; 
 - 
 - / / Reading package body 
 - / / Log . d ( TAG , " Reading frame body for # " + receivedPackageIndex ) ; 
 - byte [ ] body = readBytes ( size + 4 ) ; 
 - dataInput = new DataInput ( body ) ; 
 - byte [ ] contents = dataInput . readBytes ( size ) ; 
 - 
 - / / Checking CRC32 
 - long crc32 = dataInput . readUInt ( ) ; 
 - crc32Engine . reset ( ) ; 
 - crc32Engine . update ( contents ) ; 
 - long localCrc32 = crc32Engine . getValue ( ) ; 
 - if ( localCrc32 ! = crc32 ) { 
 - throw new IOException ( " Received frame contents with incorrect crc32 " ) ; 
 - } 
 - 
 - / / Processing package 
 - if ( header = = HEADER _ PROTO ) { 
 - / / Log . d ( TAG , " Received proto frame " ) ; 
 - callback . onMessage ( contents , 0 , contents . length ) ; 
 - 
 - DataOutput ackPackage = new DataOutput ( ) ; 
 - ackPackage . writeInt ( receivedPackageIndex ) ; 
 - post ( HEADER _ ACK , ackPackage . toByteArray ( ) ) ; 
 - } else if ( header = = HEADER _ PING ) { 
 - / / Log . d ( TAG , " Received ping frame " ) ; 
 - post ( HEADER _ PONG , contents ) ; 
 - } else if ( header = = HEADER _ PONG ) { 
 - / / Log . d ( TAG , " Received pong frame " ) ; 
 - DataInput pongInput = new DataInput ( contents ) ; 
 - int pongLen = pongInput . readInt ( ) ; 
 - if ( pongLen ! = 8 ) { 
 - / / Log . w ( TAG , " Pong invalid content length , got : " + pongLen ) ; 
 - continue ; 
 - } 
 - onServerPong ( pongInput . readLong ( ) ) ; 
 - } else if ( header = = HEADER _ ACK ) { 
 - / / Log . d ( TAG , " Received ack frame " ) ; 
 - DataInput ackContent = new DataInput ( contents ) ; 
 - int frameId = ackContent . readInt ( ) ; 
 - onServerAck ( frameId ) ; 
 - } else if ( header = = HEADER _ REDIRECT ) { 
 - DataInput redirectContent = new DataInput ( contents ) ; 
 - int hostLen = redirectContent . readInt ( ) ; 
 - String host = new String ( redirectContent . readBytes ( hostLen ) , " UTF - 8 " ) ; 
 - int port = redirectContent . readInt ( ) ; 
 - int timeout = redirectContent . readInt ( ) ; 
 - / / TODO : Implement redirect 
 - throw new IOException ( " Received redirect frame : " + host + " : " + port + " with timeout " + timeout + " sec " ) ; 
 - } else if ( header = = HEADER _ DROP ) { 
 - DataInput drop = new DataInput ( contents ) ; 
 - long messageId = drop . readLong ( ) ; 
 - int errorCode = drop . readByte ( ) ; 
 - int messageLen = drop . readInt ( ) ; 
 - String message = new String ( drop . readBytes ( messageLen ) , " UTF - 8 " ) ; 
 - / / Log . d ( TAG , " Received drop frame : " + message ) ; 
 - 
 - throw new IOException ( " Received drop frame : " + message ) ; 
 - } else { 
 - Log . w ( TAG , " Received unknown frame # " + header ) ; 
 - } 
 - } 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - close ( ) ; 
 - } 
 - } 
 - } 
 - 
 - / * * 
 - * Package send thread 
 - * / 
 - private class WriterThread extends Thread { 
 - 
 - private final CRC32 crc32Engine = new CRC32 ( ) ; 
 - 
 - private final ConcurrentLinkedQueue < WritePackage > packages = new ConcurrentLinkedQueue < WritePackage > ( ) ; 
 - 
 - public WriterThread ( ) { 
 - setName ( TAG + " # Writer " + hashCode ( ) ) ; 
 - } 
 - 
 - / * * 
 - * Send package to connection 
 - * 
 - * @ param p package 
 - * / 
 - public void pushPackage ( final WritePackage p ) { 
 - packages . add ( p ) ; 
 - synchronized ( packages ) { 
 - packages . notifyAll ( ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void run ( ) { 
 - try { 
 - while ( ! isClosed ( ) ) { 
 - 
 - / / Pooling of package from queue 
 - WritePackage p ; 
 - synchronized ( packages ) { 
 - p = packages . poll ( ) ; 
 - if ( p = = null ) { 
 - try { 
 - packages . wait ( ) ; 
 - } catch ( final InterruptedException e ) { 
 - return ; 
 - } 
 - p = packages . poll ( ) ; 
 - } 
 - } 
 - if ( p = = null ) { 
 - continue ; 
 - } 
 - 
 - / / Start package send 
 - / / Log . d ( TAG , " Sending frame # " + sentPackets ) ; 
 - 
 - / / Prepare package 
 - final int packageId = sentPackets + + ; 
 - DataOutput dataOutput = new DataOutput ( ) ; 
 - dataOutput . writeInt ( packageId ) ; 
 - dataOutput . writeByte ( p . getHeader ( ) ) ; 
 - dataOutput . writeInt ( p . getContent ( ) . length ) ; 
 - dataOutput . writeBytes ( p . getContent ( ) , p . getOffset ( ) , p . getLen ( ) ) ; 
 - crc32Engine . reset ( ) ; 
 - crc32Engine . update ( p . getContent ( ) , p . getOffset ( ) , p . getLen ( ) ) ; 
 - dataOutput . writeInt ( ( int ) crc32Engine . getValue ( ) ) ; 
 - byte [ ] destPackage = dataOutput . toByteArray ( ) ; 
 - 
 - / / Setting Ack timeout 
 - if ( p . getHeader ( ) = = HEADER _ PROTO ) { 
 - synchronized ( packageTimers ) { 
 - TimerTask timeoutTask = new TimerTask ( ) { 
 - @ Override 
 - public void run ( ) { 
 - / / Log . d ( TAG , " Response # " + packageId + " not received in time " ) ; 
 - close ( ) ; 
 - } 
 - } ; 
 - packageTimers . put ( packageId , timeoutTask ) ; 
 - DIE _ TIMER . schedule ( timeoutTask , RESPONSE _ TIMEOUT ) ; 
 - } 
 - } 
 - 
 - / / Writing package to socket 
 - outputStream . write ( destPackage ) ; 
 - outputStream . flush ( ) ; 
 - } 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - close ( ) ; 
 - } 
 - } 
 - } 
 - 
 - private class WritePackage { 
 - private int header ; 
 - private byte [ ] content ; 
 - private int offset ; 
 - private int len ; 
 - 
 - private WritePackage ( int header , byte [ ] content , int offset , int len ) { 
 - this . header = header ; 
 - this . content = content ; 
 - this . offset = offset ; 
 - this . len = len ; 
 - } 
 - 
 - public int getHeader ( ) { 
 - return header ; 
 - } 
 - 
 - public byte [ ] getContent ( ) { 
 - return content ; 
 - } 
 - 
 - public int getOffset ( ) { 
 - return offset ; 
 - } 
 - 
 - public int getLen ( ) { 
 - return len ; 
 - } 
 - } 
 - 
 - class PingTimeoutTask extends TimerTask { 
 - private long pingId ; 
 - 
 - public PingTimeoutTask ( long pingId ) { 
 - this . pingId = pingId ; 
 - } 
 - 
 - @ Override 
 - public void run ( ) { 
 - / / Log . d ( TAG , " Ping # " + pingId + " is timed out " ) ; 
 - close ( ) ; 
 - } 
 - } 
 - 
 - class FrameTimeoutTask extends TimerTask { 
 - private int frameId ; 
 - 
 - FrameTimeoutTask ( int frameId ) { 
 - this . frameId = frameId ; 
 - } 
 - 
 - @ Override 
 - public void run ( ) { 
 - / / Log . d ( TAG , " Response # " + frameId + " not received in time " ) ; 
 - close ( ) ; 
 - } 
 - } 
 - 
 - class PingTask extends TimerTask { 
 - @ Override 
 - public void run ( ) { 
 - if ( isClosed ( ) ) { 
 - return ; 
 - } 
 - final long pingId = RANDOM . nextLong ( ) ; 
 - DataOutput dataOutput = new DataOutput ( ) ; 
 - dataOutput . writeInt ( 8 ) ; 
 - synchronized ( RANDOM ) { 
 - dataOutput . writeLong ( pingId ) ; 
 - } 
 - 
 - PingTimeoutTask pingTimeout = new PingTimeoutTask ( pingId ) ; 
 - synchronized ( packageTimers ) { 
 - schedulledPings . put ( pingId , pingTimeout ) ; 
 - } 
 - DIE _ TIMER . schedule ( pingTimeout , RESPONSE _ TIMEOUT ) ; 
 - 
 - / / Log . d ( TAG , " Performing ping # " + pingId + " . . . " ) ; 
 - post ( HEADER _ PING , dataOutput . toByteArray ( ) ) ; 
 - } 
 - } 
 - 
 - private byte [ ] readBytes ( int count ) throws IOException { 
 - byte [ ] res = new byte [ count ] ; 
 - int offset = 0 ; 
 - while ( offset < res . length ) { 
 - int readed = inputStream . read ( res , offset , res . length - offset ) ; 
 - if ( readed > 0 ) { 
 - offset + = readed ; 
 - } else if ( readed < 0 ) { 
 - throw new IOException ( ) ; 
 - } else { 
 - Thread . yield ( ) ; 
 - } 
 - } 
 - return res ; 
 - } 
 - } 
 diff - - git a / library / actor - jvm / src / main / java / im / actor / model / jvm / tcp / AsyncTcpConnection . java b / library / actor - jvm / src / main / java / im / actor / model / jvm / tcp / AsyncTcpConnection . java 
 new file mode 100644 
 index 0000000 . . fcdd41c 
 - - - / dev / null 
 + + + b / library / actor - jvm / src / main / java / im / actor / model / jvm / tcp / AsyncTcpConnection . java 
 @ @ - 0 , 0 + 1 , 271 @ @ 
 + package im . actor . model . jvm . tcp ; 
 + 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . io . OutputStream ; 
 + import java . net . InetSocketAddress ; 
 + import java . net . Socket ; 
 + import java . util . concurrent . ConcurrentLinkedQueue ; 
 + import java . util . concurrent . ExecutorService ; 
 + import java . util . concurrent . Executors ; 
 + 
 + import javax . net . ssl . SSLSocketFactory ; 
 + 
 + import im . actor . model . droidkit . bser . DataInput ; 
 + import im . actor . model . droidkit . bser . DataOutput ; 
 + import im . actor . model . log . Log ; 
 + import im . actor . model . network . ConnectionEndpoint ; 
 + import im . actor . model . network . connection . AsyncConnection ; 
 + import im . actor . model . network . connection . AsyncConnectionInterface ; 
 + import im . actor . model . network . connection . ManagedConnection ; 
 + 
 + / * * 
 + * Created by ex3ndr on 01 . 05 . 15 . 
 + * / 
 + public class AsyncTcpConnection extends AsyncConnection { 
 + 
 + private final ExecutorService connectExecutor = Executors . newSingleThreadExecutor ( ) ; 
 + 
 + private final String TAG ; 
 + 
 + private Socket socket ; 
 + private InputStream inputStream ; 
 + private OutputStream outputStream ; 
 + private WriterThread writerThread ; 
 + private ReaderThread readerThread ; 
 + 
 + private boolean isConnected = false ; 
 + private boolean isClosed = false ; 
 + 
 + public AsyncTcpConnection ( int id , ConnectionEndpoint endpoint , AsyncConnectionInterface connection ) { 
 + super ( endpoint , connection ) ; 
 + 
 + this . TAG = " ConnectionTcp # " + id ; 
 + } 
 + 
 + @ Override 
 + public void doConnect ( ) { 
 + connectExecutor . submit ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + try { 
 + Socket socket ; 
 + ConnectionEndpoint endpoint = getEndpoint ( ) ; 
 + switch ( endpoint . getType ( ) ) { 
 + case TCP : 
 + socket = new Socket ( ) ; 
 + break ; 
 + case TCP _ TLS : 
 + socket = SSLSocketFactory . getDefault ( ) . createSocket ( ) ; 
 + break ; 
 + default : 
 + throw new RuntimeException ( " Unsupported endpoint type : " + endpoint . getType ( ) ) ; 
 + } 
 + 
 + / / Configure socket 
 + socket . setKeepAlive ( false ) ; 
 + socket . setTcpNoDelay ( true ) ; 
 + 
 + socket . connect ( new InetSocketAddress ( endpoint . getHost ( ) , endpoint . getPort ( ) ) , ManagedConnection . CONNECTION _ TIMEOUT ) ; 
 + 
 + / / Init streams 
 + socket . getInputStream ( ) ; 
 + socket . getOutputStream ( ) ; 
 + 
 + onSocketCreated ( socket ) ; 
 + } catch ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + crashConnection ( ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void doSend ( byte [ ] data ) { 
 + writerThread . pushPackage ( data ) ; 
 + } 
 + 
 + @ Override 
 + public void doClose ( ) { 
 + crashConnection ( ) ; 
 + } 
 + 
 + 
 + private synchronized void onSocketCreated ( Socket socket ) throws IOException { 
 + if ( isClosed ) { 
 + Log . w ( TAG , " Socket created after external close : disposing " ) ; 
 + throw new IOException ( " Socket created after external close : disposing " ) ; 
 + } 
 + 
 + this . socket = socket ; 
 + this . inputStream = socket . getInputStream ( ) ; 
 + this . outputStream = socket . getOutputStream ( ) ; 
 + 
 + this . isClosed = false ; 
 + this . isConnected = true ; 
 + 
 + this . readerThread = new ReaderThread ( ) ; 
 + this . readerThread . start ( ) ; 
 + 
 + this . writerThread = new WriterThread ( ) ; 
 + this . writerThread . start ( ) ; 
 + 
 + onConnected ( ) ; 
 + } 
 + 
 + private synchronized void onRawReceived ( byte [ ] data ) throws IOException { 
 + if ( ! isConnected ) { 
 + Log . d ( TAG , " onRawReceived : Not connected " ) ; 
 + return ; 
 + } 
 + 
 + onReceived ( data ) ; 
 + } 
 + 
 + private synchronized void crashConnection ( ) { 
 + Log . d ( TAG , " Crashing Connection " ) ; 
 + 
 + if ( isClosed ) { 
 + return ; 
 + } 
 + isClosed = true ; 
 + isConnected = false ; 
 + 
 + if ( writerThread ! = null ) { 
 + writerThread . interrupt ( ) ; 
 + } 
 + if ( readerThread ! = null ) { 
 + readerThread . interrupt ( ) ; 
 + } 
 + writerThread = null ; 
 + readerThread = null ; 
 + 
 + if ( socket ! = null ) { 
 + try { 
 + socket . close ( ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + if ( inputStream ! = null ) { 
 + try { 
 + inputStream . close ( ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + if ( outputStream ! = null ) { 
 + try { 
 + outputStream . close ( ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + socket = null ; 
 + inputStream = null ; 
 + outputStream = null ; 
 + 
 + onClosed ( ) ; 
 + } 
 + 
 + 
 + private class WriterThread extends Thread { 
 + private final ConcurrentLinkedQueue < byte [ ] > packages = new ConcurrentLinkedQueue < byte [ ] > ( ) ; 
 + 
 + public WriterThread ( ) { 
 + setName ( TAG + " # Writer " ) ; 
 + } 
 + 
 + / * * 
 + * Send package to connection 
 + * 
 + * @ param p package 
 + * / 
 + public void pushPackage ( final byte [ ] p ) { 
 + packages . add ( p ) ; 
 + synchronized ( packages ) { 
 + packages . notifyAll ( ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void run ( ) { 
 + try { 
 + while ( isConnected ) { 
 + 
 + / / Pooling of package from queue 
 + byte [ ] p ; 
 + synchronized ( packages ) { 
 + p = packages . poll ( ) ; 
 + if ( p = = null ) { 
 + try { 
 + packages . wait ( ) ; 
 + } catch ( final InterruptedException e ) { 
 + return ; 
 + } 
 + p = packages . poll ( ) ; 
 + } 
 + } 
 + if ( p = = null ) { 
 + continue ; 
 + } 
 + 
 + outputStream . write ( p ) ; 
 + outputStream . flush ( ) ; 
 + } 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + crashConnection ( ) ; 
 + } 
 + } 
 + } 
 + 
 + private class ReaderThread extends Thread { 
 + 
 + private ReaderThread ( ) { 
 + setName ( TAG + " # Reader " ) ; 
 + } 
 + 
 + @ Override 
 + public void run ( ) { 
 + try { 
 + while ( isConnected ) { 
 + / / Reading package headers 
 + byte [ ] header = readBytes ( 9 ) ; 
 + DataInput dataInput = new DataInput ( header ) ; 
 + int receivedPackageIndex = dataInput . readInt ( ) ; 
 + int headerValue = dataInput . readByte ( ) ; 
 + int size = dataInput . readInt ( ) ; 
 + 
 + / / Reading package body 
 + byte [ ] body = readBytes ( size + 4 ) ; 
 + 
 + DataOutput dataOutput = new DataOutput ( ) ; 
 + dataOutput . writeBytes ( header ) ; 
 + dataOutput . writeBytes ( body ) ; 
 + onRawReceived ( dataOutput . toByteArray ( ) ) ; 
 + } 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + crashConnection ( ) ; 
 + } 
 + } 
 + 
 + private byte [ ] readBytes ( int count ) throws IOException { 
 + byte [ ] res = new byte [ count ] ; 
 + int offset = 0 ; 
 + while ( offset < res . length ) { 
 + int readed = inputStream . read ( res , offset , res . length - offset ) ; 
 + if ( readed > 0 ) { 
 + offset + = readed ; 
 + } else if ( readed < 0 ) { 
 + throw new IOException ( ) ; 
 + } else { 
 + Thread . yield ( ) ; 
 + } 
 + } 
 + return res ; 
 + } 
 + } 
 + } 
 diff - - git a / library / actor - jvm / src / main / java / im / actor / model / jvm / tcp / AsyncTcpConnectionFactory . java b / library / actor - jvm / src / main / java / im / actor / model / jvm / tcp / AsyncTcpConnectionFactory . java 
 new file mode 100644 
 index 0000000 . . f1eff48 
 - - - / dev / null 
 + + + b / library / actor - jvm / src / main / java / im / actor / model / jvm / tcp / AsyncTcpConnectionFactory . java 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + package im . actor . model . jvm . tcp ; 
 + 
 + import im . actor . model . network . ConnectionEndpoint ; 
 + import im . actor . model . network . connection . AsyncConnection ; 
 + import im . actor . model . network . connection . AsyncConnectionFactory ; 
 + import im . actor . model . network . connection . AsyncConnectionInterface ; 
 + 
 + / * * 
 + * Created by ex3ndr on 01 . 05 . 15 . 
 + * / 
 + public class AsyncTcpConnectionFactory implements AsyncConnectionFactory { 
 + 
 + @ Override 
 + public AsyncConnection createConnection ( int connectionId , ConnectionEndpoint endpoint , AsyncConnectionInterface connectionInterface ) { 
 + return new AsyncTcpConnection ( connectionId , endpoint , connectionInterface ) ; 
 + } 
 + }
