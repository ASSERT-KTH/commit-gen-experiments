BLEU SCORE: 0.11213336822390839

TEST MSG: fix ( server : groups ) : edit messages in channels ; change edit messages rules : can change any own messages in last hour
GENERATED MSG: fix ( server : core ) : bring back delete dialogs

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala < nl > index 84ec97e . . d2744e8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala < nl > @ @ - 51 , 10 + 51 , 17 @ @ trait MessageUpdating extends PeersImplicits { < nl > } yield seqState < nl > } < nl > < nl > - private def updateContentGroup ( userId : Int , clientAuthId : Long , peer : Peer , randomId : Long , updatedMessage : ApiMessage , date : Long ) ( implicit system : ActorSystem ) : Future [ SeqState ] = { < nl > + private def updateContentGroup ( < nl > + userId : Int , < nl > + clientAuthId : Long , < nl > + groupPeer : Peer , < nl > + randomId : Long , < nl > + updatedMessage : ApiMessage , < nl > + date : Long < nl > + ) ( implicit system : ActorSystem ) : Future [ SeqState ] = { < nl > import system . dispatcher < nl > val seqUpdExt = SeqUpdatesExtension ( system ) < nl > - val update = UpdateMessageContentChanged ( peer . asStruct , randomId , updatedMessage ) < nl > + val update = UpdateMessageContentChanged ( groupPeer . asStruct , randomId , updatedMessage ) < nl > for { < nl > / / update for client user < nl > seqState ← seqUpdExt . deliverClientUpdate ( < nl > @ @ - 64 , 8 + 71 , 8 @ @ trait MessageUpdating extends PeersImplicits { < nl > pushRules = seqUpdExt . pushRules ( isFat = false , None ) , < nl > deliveryId = s " msgcontent _ $ { randomId } _ $ { date } " < nl > ) < nl > - ( memberIds , _ , _ ) ← GroupExtension ( system ) . getMemberIds ( peer . id ) < nl > - membersSet = memberIds . toSet < nl > + ( memberIds , _ , optBotId ) ← GroupExtension ( system ) . getMemberIds ( groupPeer . id ) < nl > + membersSet = ( memberIds + + optBotId . toSeq ) . toSet < nl > / / update for other group members < nl > _ ← seqUpdExt . broadcastPeopleUpdate ( < nl > membersSet - userId , < nl > @ @ - 77 , 7 + 84 , 7 @ @ trait MessageUpdating extends PeersImplicits { < nl > userIds = membersSet + userId , < nl > randomId = randomId , < nl > peerType = PeerType . Group , < nl > - peerIds = Set ( peer . id ) , < nl > + peerIds = Set ( groupPeer . id ) , < nl > messageContentHeader = updatedMessage . header , < nl > messageContentData = updatedMessage . toByteArray < nl > ) ) < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > index d8aef50 . . 4ce5087 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > @ @ - 158 , 15 + 158 , 6 @ @ object HistoryMessageRepo { < nl > findNewestFilter ( userId , peer , filter ) < nl > } < nl > < nl > - def findNewestSentBy ( userId : Int , peer : Peer ) : SqlAction [ Option [ HistoryMessage ] , NoStream , Read ] = { < nl > - val filter = { m : HistoryMessageTable ⇒ < nl > - m . senderUserId = = = userId & & < nl > - m . peerType = = = peer . typ . value & & < nl > - m . peerId = = = peer . id < nl > - } < nl > - findNewestFilter ( userId , peer , filter ) < nl > - } < nl > - < nl > private def findNewestFilter ( userId : Int , peer : Peer , filterClause : HistoryMessageTable ⇒ Rep [ Boolean ] ) = { < nl > notDeletedMessages < nl > . filter ( filterClause ) < nl > @ @ - 246 , 4 + 237 , 4 @ @ object HistoryMessageRepo { < nl > . filter ( _ . randomId inSet randomIds ) < nl > . map ( _ . deletedAt ) < nl > . update ( Some ( new DateTime ) ) < nl > - } < nl > \ No newline at end of file < nl > + } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > index 898c83f . . 7715069 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > @ @ - 9 , 17 + 9 , 19 @ @ import im . actor . api . rpc . messaging . _ < nl > import im . actor . api . rpc . misc . _ < nl > import im . actor . api . rpc . peers . _ < nl > import im . actor . config . ActorConfig < nl > + import im . actor . server . group . CanSendMessageInfo < nl > import im . actor . server . messaging . { MessageParsing , MessageUpdating } < nl > + import im . actor . server . model . { Peer , PeerType } < nl > import im . actor . server . persist . HistoryMessageRepo < nl > < nl > import scala . concurrent . _ < nl > import scala . concurrent . duration . _ < nl > < nl > object MessagingRpcErors { < nl > - val NotLastMessage = RpcError ( 400 , " NOT _ LAST _ MESSAGE " , " You are trying to edit not last message . " , false , None ) < nl > val NotInTimeWindow = RpcError ( 400 , " NOT _ IN _ TIME _ WINDOW " , " You can ' t edit message sent more than 5 minutes age . " , false , None ) < nl > val NotTextMessage = RpcError ( 400 , " NOT _ TEXT _ MESSAGE " , " You can edit only text messages . " , false , None ) < nl > val NotUniqueRandomId = RpcError ( 400 , " RANDOM _ ID _ NOT _ UNIQUE " , " " , false , None ) < nl > + val NotAllowedToEdit = CommonRpcErrors . forbidden ( " You are not allowed to edit this message " ) < nl > } < nl > < nl > private [ messaging ] trait MessagingHandlers extends PeersImplicits < nl > @ @ - 35 , 7 + 37 , 7 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits < nl > private implicit val timeout : Timeout = ActorConfig . defaultTimeout < nl > < nl > / / TODO : configurable < nl > - private val editTimeWindow : Long = 5 . minutes . toMillis < nl > + private val editTimeWindow : Long = 1 . hour . toMillis < nl > < nl > override def doHandleSendMessage ( < nl > outPeer : ApiOutPeer , < nl > @ @ - 67 , 8 + 69 , 7 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits < nl > withOutPeer ( outPeer ) { < nl > val peer = outPeer . asModel < nl > ( for { < nl > - histMessage ← fromFutureOption ( CommonRpcErrors . forbidden ( " Not allowed " ) ) ( db . run ( HistoryMessageRepo . findNewestSentBy ( client . userId , peer ) ) ) < nl > - _ ← fromBoolean ( NotLastMessage ) ( histMessage . randomId = = randomId ) < nl > + histMessage ← fromFutureOption ( NotAllowedToEdit ) ( getEditableHistoryMessage ( peer , randomId ) ) < nl > _ ← fromBoolean ( NotInTimeWindow ) ( inTimeWindow ( histMessage . date . getMillis ) ) < nl > apiMessage ← fromXor ( ( e : Any ) ⇒ IntenalError ) ( Xor . fromEither ( parseMessage ( histMessage . messageContentData ) ) ) < nl > _ ← fromBoolean ( NotTextMessage ) ( apiMessage match { < nl > @ @ - 82 , 6 + 83 , 29 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits < nl > } < nl > } < nl > < nl > + private def getEditableHistoryMessage ( peer : Peer , randomId : Long ) ( implicit client : AuthorizedClientData ) = { < nl > + def findBySender ( senderId : Int ) = db . run ( HistoryMessageRepo . findBySender ( senderId , peer , randomId ) . headOption ) < nl > + < nl > + for { < nl > + optMessage ← peer match { < nl > + case Peer ( PeerType . Private , _ ) ⇒ < nl > + findBySender ( client . userId ) < nl > + case Peer ( PeerType . Group , groupId ) ⇒ < nl > + for { < nl > + CanSendMessageInfo ( canSend , isChannel , _ , optBotId ) ← groupExt . canSendMessage ( groupId , client . userId ) < nl > + mess ← ( isChannel , canSend ) match { < nl > + case ( true , true ) ⇒ / / channel , client user is one of those who can send messages , thus he can also edit message . < nl > + ( optBotId map findBySender ) getOrElse FastFuture . successful ( None ) < nl > + case ( true , false ) ⇒ / / channel , client user can ' t send messages , thus he can ' t edit message . < nl > + FastFuture . successful ( None ) < nl > + case ( false , _ ) ⇒ / / not a channel group . regular , as in case of private peer < nl > + findBySender ( client . userId ) < nl > + } < nl > + } yield mess < nl > + } < nl > + } yield optMessage < nl > + } < nl > + < nl > private def inTimeWindow ( messageDateMillis : Long ) : Boolean = { < nl > ( messageDateMillis + editTimeWindow ) > System . currentTimeMillis < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > index a6b122f . . 076104a 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > @ @ - 81 , 6 + 81 , 13 @ @ message DialogRootEvents { < nl > Peer peer = 2 ; < nl > } < nl > < nl > + message Deleted { < nl > + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogRootEvent " ; < nl > + < nl > + int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > + Peer peer = 2 ; < nl > + } < nl > + < nl > message Initialized { < nl > option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogRootEvent " ; < nl > < nl > @ @ - 121 , 6 + 128 , 7 @ @ message DialogRootCommands { < nl > option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogRootCommand " ; < nl > < nl > Peer dest = 1 ; < nl > + google . protobuf . Int32Value client _ auth _ sid = 2 ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > index dfb5c85 . . 4b58c07 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > @ @ - 45 , 7 + 45 , 7 @ @ trait DialogCommandHandlers extends PeersImplicits with UserAcl { < nl > < nl > withValidAccessHash ( sm . getDest , sm . senderAuthId map ( _ . value ) , sm . accessHash map ( _ . value ) ) { < nl > withCachedFuture [ AuthSidRandomId , SeqStateDate ] ( sm . senderAuthSid → sm . randomId ) { < nl > - val sendDate = calcSendDate < nl > + val sendDate = calcSendDate ( ) < nl > val message = sm . message < nl > PubSubExtension ( system ) . publish ( PeerMessage ( sm . getOrigin , sm . getDest , sm . randomId , sendDate , message ) ) < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > index 939a4da . . a7d6d02 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > @ @ - 2 , 22 + 2 , 24 @ @ package im . actor . server . dialog < nl > < nl > import java . time . Instant < nl > < nl > - import akka . actor . { ActorRef , Props , Status } < nl > + import akka . actor . Props < nl > import akka . http . scaladsl . util . FastFuture < nl > import akka . pattern . { ask , pipe } < nl > import akka . util . Timeout < nl > import com . google . protobuf . wrappers . Int64Value < nl > - import im . actor . concurrent . _ < nl > - import im . actor . server . cqrs . _ < nl > - import im . actor . server . dialog . DialogCommands . { SendMessage , WriteMessageSelf } < nl > - import im . actor . server . model . { Peer , PeerErrors , PeerType } < nl > import im . actor . api . rpc . _ < nl > - import im . actor . api . rpc . messaging . UpdateChatGroupsChanged < nl > + import im . actor . api . rpc . messaging . { UpdateChatDelete , UpdateChatGroupsChanged } < nl > import im . actor . api . rpc . misc . ApiExtension < nl > + import im . actor . concurrent . _ < nl > import im . actor . config . ActorConfig < nl > import im . actor . serialization . ActorSerializer < nl > + import im . actor . server . cqrs . _ < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . dialog . DialogCommands . { SendMessage , WriteMessageSelf } < nl > import im . actor . server . dialog . DialogQueries . GetInfoResponse < nl > import im . actor . server . group . GroupExtension < nl > + import im . actor . server . model . { Peer , PeerErrors , PeerType } < nl > + import im . actor . server . persist . HistoryMessageRepo < nl > import im . actor . server . sequence . { PushRules , SeqState , SeqUpdatesExtension } < nl > import im . actor . server . user . UserExtension < nl > < nl > @ @ - 33 , 7 + 35 , 8 @ @ object DialogRoot { < nl > 45015 → classOf [ DialogRootEvents . Unfavourited ] , < nl > 45017 → classOf [ DialogRootEvents . Initialized ] , < nl > 45016 → classOf [ DialogRootStateSnapshot ] , < nl > - 45018 → classOf [ DialogRootEvents . Bumped ] < nl > + 45018 → classOf [ DialogRootEvents . Bumped ] , < nl > + 45019 → classOf [ DialogRootEvents . Deleted ] < nl > ) < nl > } < nl > < nl > @ @ - 43 , 7 + 46 , 6 @ @ object DialogRoot { < nl > private trait DialogRootQueryHandlers { < nl > this : DialogRoot ⇒ < nl > import DialogRootQueries . _ < nl > - < nl > import context . _ < nl > < nl > private implicit val timeout = Timeout ( ActorConfig . defaultTimeout ) < nl > @ @ - 98 , 13 + 100 , 15 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > with IncrementalSnapshots [ DialogRootState ] < nl > with DialogRootQueryHandlers < nl > with DialogRootMigration { < nl > + import DialogRootCommands . _ < nl > import DialogRootEvents . _ < nl > import DialogRootQueries . _ < nl > - import DialogRootCommands . _ < nl > import context . dispatcher < nl > < nl > - private val userExt = UserExtension ( context . system ) < nl > - private val groupExt = GroupExtension ( context . system ) < nl > + private val system = context . system < nl > + private val userExt = UserExtension ( system ) < nl > + private val groupExt = GroupExtension ( system ) < nl > + private val db = DbExtension ( system ) . db < nl > < nl > private implicit val timeout = Timeout ( ActorConfig . defaultTimeout ) < nl > < nl > @ @ - 150 , 6 + 154 , 7 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > case Unarchive ( Some ( peer ) , clientAuthSid ) ⇒ unarchive ( peer , clientAuthSid map ( _ . value ) ) < nl > case Favourite ( Some ( peer ) , clientAuthSid ) ⇒ favourite ( peer , clientAuthSid map ( _ . value ) ) < nl > case Unfavourite ( Some ( peer ) , clientAuthSid ) ⇒ unfavourite ( peer , clientAuthSid map ( _ . value ) ) < nl > + case Delete ( Some ( peer ) , clientAuthSid ) ⇒ delete ( peer , clientAuthSid map ( _ . value ) ) < nl > } < nl > < nl > private def archive ( peer : Peer , clientAuthSid : Option [ Int ] ) = { < nl > @ @ - 184 , 6 + 189 , 19 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > } < nl > } < nl > < nl > + private def delete ( peer : Peer , clientAuthSid : Option [ Int ] ) = { < nl > + if ( ! dialogExists ( peer ) ) sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) < nl > + else persist ( Deleted ( Instant . now ( ) , Some ( peer ) ) ) { e ⇒ < nl > + commit ( e ) < nl > + ( for { < nl > + _ ← db . run ( HistoryMessageRepo . deleteAll ( userId , peer ) ) < nl > + _ ← SeqUpdatesExtension ( system ) . deliverSingleUpdate ( userId , UpdateChatDelete ( peer . asStruct ) ) < nl > + seqState ← sendChatGroupsChanged ( clientAuthSid ) < nl > + / / _ = thatDialog ! PoisonPill / / kill that dialog would be good < nl > + } yield seqState ) pipeTo sender ( ) < nl > + } < nl > + } < nl > + < nl > private def needCheckDialog ( cmd : DialogCommand ) : Option [ Peer ] = { < nl > cmd match { < nl > case sm : SendMessage ⇒ < nl > @ @ - 199 , 6 + 217 , 8 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > } < nl > } < nl > < nl > + private def dialogExists ( peer : Peer ) : Boolean = state . active . contains ( peer ) | | state . archived . exists ( _ . peer = = peer ) < nl > + < nl > private def isArchived ( peer : Peer ) : Boolean = state . archived . exists ( _ . peer = = peer ) < nl > < nl > private def isFavourited ( peer : Peer ) : Boolean = state . active . favourites . contains ( peer ) < nl > @ @ - 227 , 9 + 247 , 9 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > < nl > private def sendChatGroupsChanged ( ignoreAuthSid : Option [ Int ] = None ) : Future [ SeqState ] = { < nl > for { < nl > - groups ← DialogExtension ( context . system ) . fetchApiGroupedDialogs ( userId ) < nl > + groups ← DialogExtension ( system ) . fetchApiGroupedDialogs ( userId ) < nl > update = UpdateChatGroupsChanged ( groups ) < nl > - seqstate ← SeqUpdatesExtension ( context . system ) . < nl > + seqstate ← SeqUpdatesExtension ( system ) . < nl > deliverSingleUpdate ( userId , update , PushRules ( ) . withExcludeAuthSids ( ignoreAuthSid . toSeq ) ) < nl > } yield seqstate < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > index 7dc9787 . . 2705ba7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > @ @ - 19 , 7 + 19 , 6 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { < nl > private case object EventsPersisted < nl > < nl > val userId : Int < nl > - private val db = DbExtension ( context . system ) . db < nl > private var needMigrate = true < nl > < nl > override def afterCommit ( e : Event ) : Unit = { < nl > @ @ - 59 , 7 + 58 , 7 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { < nl > context . become ( migrating ) < nl > < nl > ( for { < nl > - models ← db . run ( DialogRepo . fetchDialogs ( userId ) ) < nl > + models ← DbExtension ( context . system ) . db . run ( DialogRepo . fetchDialogs ( userId ) ) < nl > } yield CreateEvents ( models ) ) pipeTo self < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > index 0c6fec5 . . 57a223c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > @ @ - 94 , 6 + 94 , 14 @ @ private [ dialog ] case class ActiveDialogs ( < nl > } < nl > } < nl > < nl > + def withDeletedPeer ( peer : Peer ) = { < nl > + peer . typ match { < nl > + case PeerType . Private ⇒ copy ( dms = dms - peer , favourites = favourites - peer ) < nl > + case PeerType . Group ⇒ copy ( groups = groups - peer , favourites = favourites - peer ) < nl > + case unknown ⇒ throw PeerErrors . UnknownPeerType ( unknown ) < nl > + } < nl > + } < nl > + < nl > def exists ( f : Peer ⇒ Boolean ) = favourites . exists ( f ) | | groups . exists ( f ) | | dms . exists ( f ) < nl > < nl > def map [ A ] ( f : Peer ⇒ A ) = favourites . map ( f ) + + groups . map ( f ) + + dms . map ( f ) < nl > @ @ - 128 , 6 + 136 , 7 @ @ private [ dialog ] final case class DialogRootState ( < nl > case Unarchived ( ts , Some ( peer ) ) ⇒ withUnarchivedPeer ( ts , peer ) < nl > case Favourited ( ts , Some ( peer ) ) ⇒ withFavouritedPeer ( ts , peer ) < nl > case Unfavourited ( ts , Some ( peer ) ) ⇒ withUnfavouritedPeer ( ts , peer ) < nl > + case Deleted ( ts , Some ( peer ) ) ⇒ withDeletedPeer ( ts , peer ) < nl > case Bumped ( ts , Some ( peer ) ) ⇒ withBumpedPeer ( ts , peer ) < nl > case Initialized ( _ ) ⇒ this < nl > } < nl > @ @ - 235 , 6 + 244 , 15 @ @ private [ dialog ] final case class DialogRootState ( < nl > ) < nl > } < nl > < nl > + private def withDeletedPeer ( ts : Instant , peer : Peer ) = { < nl > + copy ( < nl > + active = this . active . withDeletedPeer ( peer ) , < nl > + archived = this . archived . filterNot ( _ . peer = = peer ) , < nl > + mobile = this . mobile . filterNot ( _ . peer = = peer ) , < nl > + mobilePeers = this . mobilePeers - peer < nl > + ) < nl > + } < nl > + < nl > private def withDialogsInGroup ( group : DialogGroupType , peers : Seq [ Peer ] ) = { < nl > val newActive = group match { < nl > case DialogGroupType . Favourites ⇒ active . copy ( favourites = active . favourites + + peers ) < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > index 26107e1 . . 0fe59d4 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > @ @ - 226 , 11 + 226 , 13 @ @ object HistoryMessageRepo { < nl > . length < nl > . result < nl > < nl > - def deleteAll ( userId : Int , peer : Peer ) : FixedSqlAction [ Int , NoStream , Write ] = < nl > + def deleteAll ( userId : Int , peer : Peer ) : FixedSqlAction [ Int , NoStream , Write ] = { < nl > + require ( userId ! = SharedUserId , " Can ' t delete messages for shared user " ) < nl > notDeletedMessages < nl > . filter ( m ⇒ m . userId = = = userId & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id ) < nl > . map ( _ . deletedAt ) < nl > . update ( Some ( new DateTime ) ) < nl > + } < nl > < nl > def delete ( userId : Int , peer : Peer , randomIds : Set [ Long ] ) = < nl > notDeletedMessages < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala < nl > index 274d125 . . 12c3932 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala < nl > @ @ - 1 , 7 + 1 , 9 @ @ < nl > package im . actor . server . api . rpc . service < nl > < nl > + import cats . data . Xor < nl > import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . messaging . _ < nl > + import im . actor . api . rpc . misc . ResponseSeq < nl > import im . actor . api . rpc . peers . { ApiOutPeer , ApiPeer , ApiPeerType } < nl > import im . actor . server . acl . ACLUtils < nl > import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } < nl > @ @ - 30 , 6 + 32 , 8 @ @ final class GroupedDialogsSpec < nl > < nl > " Archived dialogs " should " be loaded by desc order " in archived < nl > < nl > + " Deleted dialogs " should " not appear in dialog list , and should mark messages as deleted in db " in deleted < nl > + < nl > private implicit lazy val groupsService = new GroupsServiceImpl ( GroupInviteConfig ( " " ) ) < nl > private implicit lazy val service = MessagingServiceImpl ( ) < nl > < nl > @ @ - 227 , 4 + 231 , 47 @ @ final class GroupedDialogsSpec < nl > okResp . nextOffset < nl > } < nl > } < nl > + < nl > + def deleted ( ) = { < nl > + val ( alice , aliceAuthId , aliceAuthSid , _ ) = createUser ( ) < nl > + val ( bob , _ , _ , _ ) = createUser ( ) < nl > + val ( charlie , _ , _ , _ ) = createUser ( ) < nl > + < nl > + implicit val clientData = ClientData ( aliceAuthId , 1 , Some ( AuthData ( alice . id , aliceAuthSid , 42 ) ) ) < nl > + val bobPeer = getOutPeer ( bob . id , aliceAuthId ) < nl > + val charliePeer = getOutPeer ( charlie . id , aliceAuthId ) < nl > + < nl > + prepareDialogs ( bob , charlie ) < nl > + < nl > + val mobileBefore = loadDialogs ( ) < nl > + mobileBefore should have length 2 < nl > + < nl > + val groupBefore = getDialogGroups ( ) < nl > + groupBefore ( " privates " ) should have length 2 < nl > + < nl > + whenReady ( service . handleLoadHistory ( charliePeer , 0L , None , 100 , Vector . empty ) ) { resp ⇒ < nl > + inside ( resp ) { < nl > + case Xor . Right ( histResp ) ⇒ histResp . history should have length 1 < nl > + } < nl > + } < nl > + < nl > + whenReady ( service . handleDeleteChat ( charliePeer ) ) { resp ⇒ < nl > + resp should matchPattern { < nl > + case Ok ( ResponseSeq ( _ , _ ) ) ⇒ < nl > + } < nl > + } < nl > + < nl > + whenReady ( service . handleLoadHistory ( charliePeer , 0L , None , 100 , Vector . empty ) ) { resp ⇒ < nl > + inside ( resp ) { < nl > + case Xor . Right ( histResp ) ⇒ histResp . history shouldBe empty < nl > + } < nl > + } < nl > + < nl > + val mobileAfter = loadDialogs ( ) < nl > + mobileAfter should have length 1 < nl > + mobileAfter . head . peer . id shouldEqual bobPeer . id < nl > + < nl > + val groupAfter = getDialogGroups ( ) < nl > + groupAfter ( " privates " ) should have length 1 < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > index 128057c . . 5ae3abf 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > @ @ - 9 , 7 + 9 , 7 @ @ import im . actor . server . cqrs . ProcessorStateProbe < nl > import im . actor . server . model . Peer < nl > < nl > final class DialogRootStateSpec extends ActorSuite with PeersImplicits { < nl > - it should " sort groued dialogs by appearing " in show < nl > + it should " sort grouped dialogs by appearing " in show < nl > it should " sort mobile dialogs by last message date " in mobileDialogs < nl > it should " remove Favourites on Unfavourite " in favouriteUnfavourite < nl > it should " remove from Archived on Favourite or new message " in removeFromArchived < nl > @ @ - 17 , 6 + 17 , 7 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { < nl > it should " order archived by date desc " in archivedOrder < nl > it should " not add to DMs or groups if already in favourites " in keepInFavourites < nl > it should " not create dialogs with itself " in noDialogsWithItself < nl > + it should " delete dialog from both grouped dialogs and archived " in deleteDialog < nl > < nl > import DialogRootEvents . _ < nl > < nl > @ @ - 174 , 6 + 175 , 32 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { < nl > checkNoAlice < nl > } < nl > < nl > + def deleteDialog ( ) = { < nl > + implicit val probe = ProcessorStateProbe ( DialogRootState . initial ( userId ) ) < nl > + < nl > + val alice = Peer . privat ( 1 ) < nl > + val bob = Peer . privat ( 2 ) < nl > + val carol = Peer . privat ( 3 ) < nl > + < nl > + probe . commit ( Created ( Instant . now , Some ( alice ) ) ) < nl > + probe . commit ( Created ( Instant . now , Some ( bob ) ) ) < nl > + probe . commit ( Created ( Instant . now , Some ( carol ) ) ) < nl > + < nl > + probe . commit ( Archived ( Instant . now , Some ( alice ) ) ) < nl > + probe . commit ( Favourited ( Instant . now , Some ( bob ) ) ) < nl > + < nl > + probe . commit ( Deleted ( Instant . now , Some ( alice ) ) ) < nl > + probe . commit ( Deleted ( Instant . now , Some ( bob ) ) ) < nl > + < nl > + getGroupPeers ( DialogGroupType . DirectMessages ) . contains ( carol ) shouldEqual true < nl > + getGroupPeers ( DialogGroupType . Favourites ) shouldBe empty < nl > + getArchivedPeers shouldBe empty < nl > + < nl > + getMobilePeers shouldBe Seq ( carol ) < nl > + < nl > + checkSnapshot < nl > + } < nl > + < nl > private def getGroupPeers ( typ : DialogGroupType ) ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = < nl > typ match { < nl > case DialogGroupType . Favourites ⇒ probe . state . active . favourites . toSeq

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala 
 index 84ec97e . . d2744e8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala 
 @ @ - 51 , 10 + 51 , 17 @ @ trait MessageUpdating extends PeersImplicits { 
 } yield seqState 
 } 
 
 - private def updateContentGroup ( userId : Int , clientAuthId : Long , peer : Peer , randomId : Long , updatedMessage : ApiMessage , date : Long ) ( implicit system : ActorSystem ) : Future [ SeqState ] = { 
 + private def updateContentGroup ( 
 + userId : Int , 
 + clientAuthId : Long , 
 + groupPeer : Peer , 
 + randomId : Long , 
 + updatedMessage : ApiMessage , 
 + date : Long 
 + ) ( implicit system : ActorSystem ) : Future [ SeqState ] = { 
 import system . dispatcher 
 val seqUpdExt = SeqUpdatesExtension ( system ) 
 - val update = UpdateMessageContentChanged ( peer . asStruct , randomId , updatedMessage ) 
 + val update = UpdateMessageContentChanged ( groupPeer . asStruct , randomId , updatedMessage ) 
 for { 
 / / update for client user 
 seqState ← seqUpdExt . deliverClientUpdate ( 
 @ @ - 64 , 8 + 71 , 8 @ @ trait MessageUpdating extends PeersImplicits { 
 pushRules = seqUpdExt . pushRules ( isFat = false , None ) , 
 deliveryId = s " msgcontent _ $ { randomId } _ $ { date } " 
 ) 
 - ( memberIds , _ , _ ) ← GroupExtension ( system ) . getMemberIds ( peer . id ) 
 - membersSet = memberIds . toSet 
 + ( memberIds , _ , optBotId ) ← GroupExtension ( system ) . getMemberIds ( groupPeer . id ) 
 + membersSet = ( memberIds + + optBotId . toSeq ) . toSet 
 / / update for other group members 
 _ ← seqUpdExt . broadcastPeopleUpdate ( 
 membersSet - userId , 
 @ @ - 77 , 7 + 84 , 7 @ @ trait MessageUpdating extends PeersImplicits { 
 userIds = membersSet + userId , 
 randomId = randomId , 
 peerType = PeerType . Group , 
 - peerIds = Set ( peer . id ) , 
 + peerIds = Set ( groupPeer . id ) , 
 messageContentHeader = updatedMessage . header , 
 messageContentData = updatedMessage . toByteArray 
 ) ) 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 index d8aef50 . . 4ce5087 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 @ @ - 158 , 15 + 158 , 6 @ @ object HistoryMessageRepo { 
 findNewestFilter ( userId , peer , filter ) 
 } 
 
 - def findNewestSentBy ( userId : Int , peer : Peer ) : SqlAction [ Option [ HistoryMessage ] , NoStream , Read ] = { 
 - val filter = { m : HistoryMessageTable ⇒ 
 - m . senderUserId = = = userId & & 
 - m . peerType = = = peer . typ . value & & 
 - m . peerId = = = peer . id 
 - } 
 - findNewestFilter ( userId , peer , filter ) 
 - } 
 - 
 private def findNewestFilter ( userId : Int , peer : Peer , filterClause : HistoryMessageTable ⇒ Rep [ Boolean ] ) = { 
 notDeletedMessages 
 . filter ( filterClause ) 
 @ @ - 246 , 4 + 237 , 4 @ @ object HistoryMessageRepo { 
 . filter ( _ . randomId inSet randomIds ) 
 . map ( _ . deletedAt ) 
 . update ( Some ( new DateTime ) ) 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 index 898c83f . . 7715069 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 @ @ - 9 , 17 + 9 , 19 @ @ import im . actor . api . rpc . messaging . _ 
 import im . actor . api . rpc . misc . _ 
 import im . actor . api . rpc . peers . _ 
 import im . actor . config . ActorConfig 
 + import im . actor . server . group . CanSendMessageInfo 
 import im . actor . server . messaging . { MessageParsing , MessageUpdating } 
 + import im . actor . server . model . { Peer , PeerType } 
 import im . actor . server . persist . HistoryMessageRepo 
 
 import scala . concurrent . _ 
 import scala . concurrent . duration . _ 
 
 object MessagingRpcErors { 
 - val NotLastMessage = RpcError ( 400 , " NOT _ LAST _ MESSAGE " , " You are trying to edit not last message . " , false , None ) 
 val NotInTimeWindow = RpcError ( 400 , " NOT _ IN _ TIME _ WINDOW " , " You can ' t edit message sent more than 5 minutes age . " , false , None ) 
 val NotTextMessage = RpcError ( 400 , " NOT _ TEXT _ MESSAGE " , " You can edit only text messages . " , false , None ) 
 val NotUniqueRandomId = RpcError ( 400 , " RANDOM _ ID _ NOT _ UNIQUE " , " " , false , None ) 
 + val NotAllowedToEdit = CommonRpcErrors . forbidden ( " You are not allowed to edit this message " ) 
 } 
 
 private [ messaging ] trait MessagingHandlers extends PeersImplicits 
 @ @ - 35 , 7 + 37 , 7 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits 
 private implicit val timeout : Timeout = ActorConfig . defaultTimeout 
 
 / / TODO : configurable 
 - private val editTimeWindow : Long = 5 . minutes . toMillis 
 + private val editTimeWindow : Long = 1 . hour . toMillis 
 
 override def doHandleSendMessage ( 
 outPeer : ApiOutPeer , 
 @ @ - 67 , 8 + 69 , 7 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits 
 withOutPeer ( outPeer ) { 
 val peer = outPeer . asModel 
 ( for { 
 - histMessage ← fromFutureOption ( CommonRpcErrors . forbidden ( " Not allowed " ) ) ( db . run ( HistoryMessageRepo . findNewestSentBy ( client . userId , peer ) ) ) 
 - _ ← fromBoolean ( NotLastMessage ) ( histMessage . randomId = = randomId ) 
 + histMessage ← fromFutureOption ( NotAllowedToEdit ) ( getEditableHistoryMessage ( peer , randomId ) ) 
 _ ← fromBoolean ( NotInTimeWindow ) ( inTimeWindow ( histMessage . date . getMillis ) ) 
 apiMessage ← fromXor ( ( e : Any ) ⇒ IntenalError ) ( Xor . fromEither ( parseMessage ( histMessage . messageContentData ) ) ) 
 _ ← fromBoolean ( NotTextMessage ) ( apiMessage match { 
 @ @ - 82 , 6 + 83 , 29 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits 
 } 
 } 
 
 + private def getEditableHistoryMessage ( peer : Peer , randomId : Long ) ( implicit client : AuthorizedClientData ) = { 
 + def findBySender ( senderId : Int ) = db . run ( HistoryMessageRepo . findBySender ( senderId , peer , randomId ) . headOption ) 
 + 
 + for { 
 + optMessage ← peer match { 
 + case Peer ( PeerType . Private , _ ) ⇒ 
 + findBySender ( client . userId ) 
 + case Peer ( PeerType . Group , groupId ) ⇒ 
 + for { 
 + CanSendMessageInfo ( canSend , isChannel , _ , optBotId ) ← groupExt . canSendMessage ( groupId , client . userId ) 
 + mess ← ( isChannel , canSend ) match { 
 + case ( true , true ) ⇒ / / channel , client user is one of those who can send messages , thus he can also edit message . 
 + ( optBotId map findBySender ) getOrElse FastFuture . successful ( None ) 
 + case ( true , false ) ⇒ / / channel , client user can ' t send messages , thus he can ' t edit message . 
 + FastFuture . successful ( None ) 
 + case ( false , _ ) ⇒ / / not a channel group . regular , as in case of private peer 
 + findBySender ( client . userId ) 
 + } 
 + } yield mess 
 + } 
 + } yield optMessage 
 + } 
 + 
 private def inTimeWindow ( messageDateMillis : Long ) : Boolean = { 
 ( messageDateMillis + editTimeWindow ) > System . currentTimeMillis 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 index a6b122f . . 076104a 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 @ @ - 81 , 6 + 81 , 13 @ @ message DialogRootEvents { 
 Peer peer = 2 ; 
 } 
 
 + message Deleted { 
 + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogRootEvent " ; 
 + 
 + int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 + Peer peer = 2 ; 
 + } 
 + 
 message Initialized { 
 option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogRootEvent " ; 
 
 @ @ - 121 , 6 + 128 , 7 @ @ message DialogRootCommands { 
 option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogRootCommand " ; 
 
 Peer dest = 1 ; 
 + google . protobuf . Int32Value client _ auth _ sid = 2 ; 
 } 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 index dfb5c85 . . 4b58c07 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 @ @ - 45 , 7 + 45 , 7 @ @ trait DialogCommandHandlers extends PeersImplicits with UserAcl { 
 
 withValidAccessHash ( sm . getDest , sm . senderAuthId map ( _ . value ) , sm . accessHash map ( _ . value ) ) { 
 withCachedFuture [ AuthSidRandomId , SeqStateDate ] ( sm . senderAuthSid → sm . randomId ) { 
 - val sendDate = calcSendDate 
 + val sendDate = calcSendDate ( ) 
 val message = sm . message 
 PubSubExtension ( system ) . publish ( PeerMessage ( sm . getOrigin , sm . getDest , sm . randomId , sendDate , message ) ) 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 index 939a4da . . a7d6d02 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 @ @ - 2 , 22 + 2 , 24 @ @ package im . actor . server . dialog 
 
 import java . time . Instant 
 
 - import akka . actor . { ActorRef , Props , Status } 
 + import akka . actor . Props 
 import akka . http . scaladsl . util . FastFuture 
 import akka . pattern . { ask , pipe } 
 import akka . util . Timeout 
 import com . google . protobuf . wrappers . Int64Value 
 - import im . actor . concurrent . _ 
 - import im . actor . server . cqrs . _ 
 - import im . actor . server . dialog . DialogCommands . { SendMessage , WriteMessageSelf } 
 - import im . actor . server . model . { Peer , PeerErrors , PeerType } 
 import im . actor . api . rpc . _ 
 - import im . actor . api . rpc . messaging . UpdateChatGroupsChanged 
 + import im . actor . api . rpc . messaging . { UpdateChatDelete , UpdateChatGroupsChanged } 
 import im . actor . api . rpc . misc . ApiExtension 
 + import im . actor . concurrent . _ 
 import im . actor . config . ActorConfig 
 import im . actor . serialization . ActorSerializer 
 + import im . actor . server . cqrs . _ 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . dialog . DialogCommands . { SendMessage , WriteMessageSelf } 
 import im . actor . server . dialog . DialogQueries . GetInfoResponse 
 import im . actor . server . group . GroupExtension 
 + import im . actor . server . model . { Peer , PeerErrors , PeerType } 
 + import im . actor . server . persist . HistoryMessageRepo 
 import im . actor . server . sequence . { PushRules , SeqState , SeqUpdatesExtension } 
 import im . actor . server . user . UserExtension 
 
 @ @ - 33 , 7 + 35 , 8 @ @ object DialogRoot { 
 45015 → classOf [ DialogRootEvents . Unfavourited ] , 
 45017 → classOf [ DialogRootEvents . Initialized ] , 
 45016 → classOf [ DialogRootStateSnapshot ] , 
 - 45018 → classOf [ DialogRootEvents . Bumped ] 
 + 45018 → classOf [ DialogRootEvents . Bumped ] , 
 + 45019 → classOf [ DialogRootEvents . Deleted ] 
 ) 
 } 
 
 @ @ - 43 , 7 + 46 , 6 @ @ object DialogRoot { 
 private trait DialogRootQueryHandlers { 
 this : DialogRoot ⇒ 
 import DialogRootQueries . _ 
 - 
 import context . _ 
 
 private implicit val timeout = Timeout ( ActorConfig . defaultTimeout ) 
 @ @ - 98 , 13 + 100 , 15 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 with IncrementalSnapshots [ DialogRootState ] 
 with DialogRootQueryHandlers 
 with DialogRootMigration { 
 + import DialogRootCommands . _ 
 import DialogRootEvents . _ 
 import DialogRootQueries . _ 
 - import DialogRootCommands . _ 
 import context . dispatcher 
 
 - private val userExt = UserExtension ( context . system ) 
 - private val groupExt = GroupExtension ( context . system ) 
 + private val system = context . system 
 + private val userExt = UserExtension ( system ) 
 + private val groupExt = GroupExtension ( system ) 
 + private val db = DbExtension ( system ) . db 
 
 private implicit val timeout = Timeout ( ActorConfig . defaultTimeout ) 
 
 @ @ - 150 , 6 + 154 , 7 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 case Unarchive ( Some ( peer ) , clientAuthSid ) ⇒ unarchive ( peer , clientAuthSid map ( _ . value ) ) 
 case Favourite ( Some ( peer ) , clientAuthSid ) ⇒ favourite ( peer , clientAuthSid map ( _ . value ) ) 
 case Unfavourite ( Some ( peer ) , clientAuthSid ) ⇒ unfavourite ( peer , clientAuthSid map ( _ . value ) ) 
 + case Delete ( Some ( peer ) , clientAuthSid ) ⇒ delete ( peer , clientAuthSid map ( _ . value ) ) 
 } 
 
 private def archive ( peer : Peer , clientAuthSid : Option [ Int ] ) = { 
 @ @ - 184 , 6 + 189 , 19 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 } 
 } 
 
 + private def delete ( peer : Peer , clientAuthSid : Option [ Int ] ) = { 
 + if ( ! dialogExists ( peer ) ) sendChatGroupsChanged ( clientAuthSid ) pipeTo sender ( ) 
 + else persist ( Deleted ( Instant . now ( ) , Some ( peer ) ) ) { e ⇒ 
 + commit ( e ) 
 + ( for { 
 + _ ← db . run ( HistoryMessageRepo . deleteAll ( userId , peer ) ) 
 + _ ← SeqUpdatesExtension ( system ) . deliverSingleUpdate ( userId , UpdateChatDelete ( peer . asStruct ) ) 
 + seqState ← sendChatGroupsChanged ( clientAuthSid ) 
 + / / _ = thatDialog ! PoisonPill / / kill that dialog would be good 
 + } yield seqState ) pipeTo sender ( ) 
 + } 
 + } 
 + 
 private def needCheckDialog ( cmd : DialogCommand ) : Option [ Peer ] = { 
 cmd match { 
 case sm : SendMessage ⇒ 
 @ @ - 199 , 6 + 217 , 8 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 } 
 } 
 
 + private def dialogExists ( peer : Peer ) : Boolean = state . active . contains ( peer ) | | state . archived . exists ( _ . peer = = peer ) 
 + 
 private def isArchived ( peer : Peer ) : Boolean = state . archived . exists ( _ . peer = = peer ) 
 
 private def isFavourited ( peer : Peer ) : Boolean = state . active . favourites . contains ( peer ) 
 @ @ - 227 , 9 + 247 , 9 @ @ private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 
 private def sendChatGroupsChanged ( ignoreAuthSid : Option [ Int ] = None ) : Future [ SeqState ] = { 
 for { 
 - groups ← DialogExtension ( context . system ) . fetchApiGroupedDialogs ( userId ) 
 + groups ← DialogExtension ( system ) . fetchApiGroupedDialogs ( userId ) 
 update = UpdateChatGroupsChanged ( groups ) 
 - seqstate ← SeqUpdatesExtension ( context . system ) . 
 + seqstate ← SeqUpdatesExtension ( system ) . 
 deliverSingleUpdate ( userId , update , PushRules ( ) . withExcludeAuthSids ( ignoreAuthSid . toSeq ) ) 
 } yield seqstate 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 index 7dc9787 . . 2705ba7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 @ @ - 19 , 7 + 19 , 6 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { 
 private case object EventsPersisted 
 
 val userId : Int 
 - private val db = DbExtension ( context . system ) . db 
 private var needMigrate = true 
 
 override def afterCommit ( e : Event ) : Unit = { 
 @ @ - 59 , 7 + 58 , 7 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { 
 context . become ( migrating ) 
 
 ( for { 
 - models ← db . run ( DialogRepo . fetchDialogs ( userId ) ) 
 + models ← DbExtension ( context . system ) . db . run ( DialogRepo . fetchDialogs ( userId ) ) 
 } yield CreateEvents ( models ) ) pipeTo self 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 index 0c6fec5 . . 57a223c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 @ @ - 94 , 6 + 94 , 14 @ @ private [ dialog ] case class ActiveDialogs ( 
 } 
 } 
 
 + def withDeletedPeer ( peer : Peer ) = { 
 + peer . typ match { 
 + case PeerType . Private ⇒ copy ( dms = dms - peer , favourites = favourites - peer ) 
 + case PeerType . Group ⇒ copy ( groups = groups - peer , favourites = favourites - peer ) 
 + case unknown ⇒ throw PeerErrors . UnknownPeerType ( unknown ) 
 + } 
 + } 
 + 
 def exists ( f : Peer ⇒ Boolean ) = favourites . exists ( f ) | | groups . exists ( f ) | | dms . exists ( f ) 
 
 def map [ A ] ( f : Peer ⇒ A ) = favourites . map ( f ) + + groups . map ( f ) + + dms . map ( f ) 
 @ @ - 128 , 6 + 136 , 7 @ @ private [ dialog ] final case class DialogRootState ( 
 case Unarchived ( ts , Some ( peer ) ) ⇒ withUnarchivedPeer ( ts , peer ) 
 case Favourited ( ts , Some ( peer ) ) ⇒ withFavouritedPeer ( ts , peer ) 
 case Unfavourited ( ts , Some ( peer ) ) ⇒ withUnfavouritedPeer ( ts , peer ) 
 + case Deleted ( ts , Some ( peer ) ) ⇒ withDeletedPeer ( ts , peer ) 
 case Bumped ( ts , Some ( peer ) ) ⇒ withBumpedPeer ( ts , peer ) 
 case Initialized ( _ ) ⇒ this 
 } 
 @ @ - 235 , 6 + 244 , 15 @ @ private [ dialog ] final case class DialogRootState ( 
 ) 
 } 
 
 + private def withDeletedPeer ( ts : Instant , peer : Peer ) = { 
 + copy ( 
 + active = this . active . withDeletedPeer ( peer ) , 
 + archived = this . archived . filterNot ( _ . peer = = peer ) , 
 + mobile = this . mobile . filterNot ( _ . peer = = peer ) , 
 + mobilePeers = this . mobilePeers - peer 
 + ) 
 + } 
 + 
 private def withDialogsInGroup ( group : DialogGroupType , peers : Seq [ Peer ] ) = { 
 val newActive = group match { 
 case DialogGroupType . Favourites ⇒ active . copy ( favourites = active . favourites + + peers ) 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 index 26107e1 . . 0fe59d4 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 @ @ - 226 , 11 + 226 , 13 @ @ object HistoryMessageRepo { 
 . length 
 . result 
 
 - def deleteAll ( userId : Int , peer : Peer ) : FixedSqlAction [ Int , NoStream , Write ] = 
 + def deleteAll ( userId : Int , peer : Peer ) : FixedSqlAction [ Int , NoStream , Write ] = { 
 + require ( userId ! = SharedUserId , " Can ' t delete messages for shared user " ) 
 notDeletedMessages 
 . filter ( m ⇒ m . userId = = = userId & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id ) 
 . map ( _ . deletedAt ) 
 . update ( Some ( new DateTime ) ) 
 + } 
 
 def delete ( userId : Int , peer : Peer , randomIds : Set [ Long ] ) = 
 notDeletedMessages 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala 
 index 274d125 . . 12c3932 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala 
 @ @ - 1 , 7 + 1 , 9 @ @ 
 package im . actor . server . api . rpc . service 
 
 + import cats . data . Xor 
 import im . actor . api . rpc . _ 
 import im . actor . api . rpc . messaging . _ 
 + import im . actor . api . rpc . misc . ResponseSeq 
 import im . actor . api . rpc . peers . { ApiOutPeer , ApiPeer , ApiPeerType } 
 import im . actor . server . acl . ACLUtils 
 import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } 
 @ @ - 30 , 6 + 32 , 8 @ @ final class GroupedDialogsSpec 
 
 " Archived dialogs " should " be loaded by desc order " in archived 
 
 + " Deleted dialogs " should " not appear in dialog list , and should mark messages as deleted in db " in deleted 
 + 
 private implicit lazy val groupsService = new GroupsServiceImpl ( GroupInviteConfig ( " " ) ) 
 private implicit lazy val service = MessagingServiceImpl ( ) 
 
 @ @ - 227 , 4 + 231 , 47 @ @ final class GroupedDialogsSpec 
 okResp . nextOffset 
 } 
 } 
 + 
 + def deleted ( ) = { 
 + val ( alice , aliceAuthId , aliceAuthSid , _ ) = createUser ( ) 
 + val ( bob , _ , _ , _ ) = createUser ( ) 
 + val ( charlie , _ , _ , _ ) = createUser ( ) 
 + 
 + implicit val clientData = ClientData ( aliceAuthId , 1 , Some ( AuthData ( alice . id , aliceAuthSid , 42 ) ) ) 
 + val bobPeer = getOutPeer ( bob . id , aliceAuthId ) 
 + val charliePeer = getOutPeer ( charlie . id , aliceAuthId ) 
 + 
 + prepareDialogs ( bob , charlie ) 
 + 
 + val mobileBefore = loadDialogs ( ) 
 + mobileBefore should have length 2 
 + 
 + val groupBefore = getDialogGroups ( ) 
 + groupBefore ( " privates " ) should have length 2 
 + 
 + whenReady ( service . handleLoadHistory ( charliePeer , 0L , None , 100 , Vector . empty ) ) { resp ⇒ 
 + inside ( resp ) { 
 + case Xor . Right ( histResp ) ⇒ histResp . history should have length 1 
 + } 
 + } 
 + 
 + whenReady ( service . handleDeleteChat ( charliePeer ) ) { resp ⇒ 
 + resp should matchPattern { 
 + case Ok ( ResponseSeq ( _ , _ ) ) ⇒ 
 + } 
 + } 
 + 
 + whenReady ( service . handleLoadHistory ( charliePeer , 0L , None , 100 , Vector . empty ) ) { resp ⇒ 
 + inside ( resp ) { 
 + case Xor . Right ( histResp ) ⇒ histResp . history shouldBe empty 
 + } 
 + } 
 + 
 + val mobileAfter = loadDialogs ( ) 
 + mobileAfter should have length 1 
 + mobileAfter . head . peer . id shouldEqual bobPeer . id 
 + 
 + val groupAfter = getDialogGroups ( ) 
 + groupAfter ( " privates " ) should have length 1 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 index 128057c . . 5ae3abf 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 @ @ - 9 , 7 + 9 , 7 @ @ import im . actor . server . cqrs . ProcessorStateProbe 
 import im . actor . server . model . Peer 
 
 final class DialogRootStateSpec extends ActorSuite with PeersImplicits { 
 - it should " sort groued dialogs by appearing " in show 
 + it should " sort grouped dialogs by appearing " in show 
 it should " sort mobile dialogs by last message date " in mobileDialogs 
 it should " remove Favourites on Unfavourite " in favouriteUnfavourite 
 it should " remove from Archived on Favourite or new message " in removeFromArchived 
 @ @ - 17 , 6 + 17 , 7 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { 
 it should " order archived by date desc " in archivedOrder 
 it should " not add to DMs or groups if already in favourites " in keepInFavourites 
 it should " not create dialogs with itself " in noDialogsWithItself 
 + it should " delete dialog from both grouped dialogs and archived " in deleteDialog 
 
 import DialogRootEvents . _ 
 
 @ @ - 174 , 6 + 175 , 32 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { 
 checkNoAlice 
 } 
 
 + def deleteDialog ( ) = { 
 + implicit val probe = ProcessorStateProbe ( DialogRootState . initial ( userId ) ) 
 + 
 + val alice = Peer . privat ( 1 ) 
 + val bob = Peer . privat ( 2 ) 
 + val carol = Peer . privat ( 3 ) 
 + 
 + probe . commit ( Created ( Instant . now , Some ( alice ) ) ) 
 + probe . commit ( Created ( Instant . now , Some ( bob ) ) ) 
 + probe . commit ( Created ( Instant . now , Some ( carol ) ) ) 
 + 
 + probe . commit ( Archived ( Instant . now , Some ( alice ) ) ) 
 + probe . commit ( Favourited ( Instant . now , Some ( bob ) ) ) 
 + 
 + probe . commit ( Deleted ( Instant . now , Some ( alice ) ) ) 
 + probe . commit ( Deleted ( Instant . now , Some ( bob ) ) ) 
 + 
 + getGroupPeers ( DialogGroupType . DirectMessages ) . contains ( carol ) shouldEqual true 
 + getGroupPeers ( DialogGroupType . Favourites ) shouldBe empty 
 + getArchivedPeers shouldBe empty 
 + 
 + getMobilePeers shouldBe Seq ( carol ) 
 + 
 + checkSnapshot 
 + } 
 + 
 private def getGroupPeers ( typ : DialogGroupType ) ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = 
 typ match { 
 case DialogGroupType . Favourites ⇒ probe . state . active . favourites . toSeq
