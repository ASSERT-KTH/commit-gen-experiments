BLEU SCORE: 0.07495553473355841

TEST MSG: fix ( web ) : make loadBlockedUsers public and resolve with result
GENERATED MSG: feat ( js ) : add answer / end call to facade

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 0bd4b77 . . f0893d8 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 1031 , 7 + 1031 , 7 @ @ public class JsFacade implements Exportable { < nl > } < nl > < nl > @ UsedByApp < nl > - private JsPromise loadBlockedUsers ( ) { < nl > + public JsPromise loadBlockedUsers ( ) { < nl > return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > @ Override < nl > public void execute ( ) { < nl > @ @ - 1042 , 12 + 1042 , 12 @ @ public class JsFacade implements Exportable { < nl > for ( User u : users ) { < nl > res . push ( getUser ( u . getUid ( ) ) ) ; < nl > } < nl > - resolve ( ) ; < nl > + resolve ( res ) ; < nl > } < nl > } ) . failure ( new Consumer < Exception > ( ) { < nl > @ Override < nl > public void apply ( Exception e ) { < nl > - reject ( ) ; < nl > + reject ( e ) ; < nl > } < nl > } ) . done ( JsPromiseDispatcher . INSTANCE ) ; < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 756db74 . . a5199e7 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 647 , 6 + 647 , 14 @ @ public class JsFacade implements Exportable { < nl > } ) ; < nl > } < nl > < nl > + public void answerCall ( long callId ) { < nl > + messenger . answerCall ( callId ) ; < nl > + } < nl > + < nl > + public void endCall ( long callId ) { < nl > + messenger . endCall ( callId ) ; < nl > + } < nl > + < nl > public void bindCall ( String id , JsBindedValueCallback callback ) { < nl > if ( callback = = null ) { < nl > return ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 0bd4b77 . . f0893d8 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 1031 , 7 + 1031 , 7 @ @ public class JsFacade implements Exportable { 
 } 
 
 @ UsedByApp 
 - private JsPromise loadBlockedUsers ( ) { 
 + public JsPromise loadBlockedUsers ( ) { 
 return JsPromise . create ( new JsPromiseExecutor ( ) { 
 @ Override 
 public void execute ( ) { 
 @ @ - 1042 , 12 + 1042 , 12 @ @ public class JsFacade implements Exportable { 
 for ( User u : users ) { 
 res . push ( getUser ( u . getUid ( ) ) ) ; 
 } 
 - resolve ( ) ; 
 + resolve ( res ) ; 
 } 
 } ) . failure ( new Consumer < Exception > ( ) { 
 @ Override 
 public void apply ( Exception e ) { 
 - reject ( ) ; 
 + reject ( e ) ; 
 } 
 } ) . done ( JsPromiseDispatcher . INSTANCE ) ; 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 756db74 . . a5199e7 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 647 , 6 + 647 , 14 @ @ public class JsFacade implements Exportable { 
 } ) ; 
 } 
 
 + public void answerCall ( long callId ) { 
 + messenger . answerCall ( callId ) ; 
 + } 
 + 
 + public void endCall ( long callId ) { 
 + messenger . endCall ( callId ) ; 
 + } 
 + 
 public void bindCall ( String id , JsBindedValueCallback callback ) { 
 if ( callback = = null ) { 
 return ;
