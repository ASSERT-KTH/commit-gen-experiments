BLEU SCORE: 0.4617366309441026

TEST MSG: fix ( server : messaging ) : fixed dialog migrations completion
GENERATED MSG: refactor ( server : messaging ) : log migration process

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > index e72d32e . . 659eeca 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > @ @ - 16 , 6 + 16 , 7 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > import context . dispatcher < nl > < nl > private case class PersistEvents ( events : List [ Event ] ) < nl > + private case object EventsPersisted < nl > < nl > private var needMigrate = true < nl > < nl > @ @ - 64 , 15 + 65 , 15 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > ) ) pipeTo self < nl > case PersistEvents ( events ) ⇒ < nl > log . warning ( " Persisting events " ) < nl > - persistAll ( events ) ( _ ⇒ ( ) ) < nl > + persistAll ( events ) ( e ⇒ commit ( e ) ) < nl > < nl > deferAsync ( ( ) ) { _ ⇒ < nl > - log . warning ( " Persisted events , commiting " ) < nl > - events foreach ( e ⇒ commit ( e ) ) < nl > log . warning ( " Migration completed " ) < nl > - unstashAll ( ) < nl > - context become receiveCommand < nl > + self ! EventsPersisted < nl > } < nl > + case EventsPersisted ⇒ < nl > + unstashAll ( ) < nl > + context become receiveCommand < nl > case Status . Failure ( e ) ⇒ < nl > log . error ( e , " Failed to migrate " ) < nl > throw e < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > index 62495e2 . . 7dc9787 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > @ @ - 16 , 6 + 16 , 7 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { < nl > import context . dispatcher < nl > < nl > private case class CreateEvents ( models : Seq [ DialogObsolete ] ) < nl > + private case object EventsPersisted < nl > < nl > val userId : Int < nl > private val db = DbExtension ( context . system ) . db < nl > @ @ - 42 , 10 + 43 , 10 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { < nl > < nl > private def migrating : Receive = { < nl > case CreateEvents ( models ) ⇒ < nl > - createEvents ( models ) { < nl > - unstashAll ( ) < nl > - context become receiveCommand < nl > - } < nl > + createEvents ( models ) < nl > + case EventsPersisted ⇒ < nl > + unstashAll ( ) < nl > + context become receiveCommand < nl > case Status . Failure ( e ) ⇒ < nl > log . error ( e , " Failed to migrate " ) < nl > throw e < nl > @ @ - 62 , 7 + 63 , 7 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { < nl > } yield CreateEvents ( models ) ) pipeTo self < nl > } < nl > < nl > - private def createEvents ( models : Seq [ DialogObsolete ] ) ( onComplete : ⇒ Unit ) : Unit = { < nl > + private def createEvents ( models : Seq [ DialogObsolete ] ) : Unit = { < nl > val created = models map { dialog ⇒ < nl > Created ( Instant . ofEpochMilli ( dialog . createdAt . getMillis ) , Some ( dialog . peer ) ) < nl > } < nl > @ @ - 78 , 10 + 79 , 9 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { < nl > } < nl > < nl > val events : List [ Event ] = Initialized ( Instant . now ( ) ) + : ( created + + archived + + favourited ) . toList < nl > - persistAll ( events ) ( _ ⇒ ( ) ) < nl > + persistAll ( events ) ( e ⇒ commit ( e ) ) < nl > deferAsync ( ( ) ) { _ ⇒ < nl > - events foreach ( e ⇒ commit ( e ) ) < nl > - onComplete < nl > + self ! EventsPersisted < nl > } < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > index 587c940 . . 4afad10 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > @ @ - 38 , 8 + 38 , 10 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > < nl > private def migrating : Receive = { < nl > case d : DialogObsolete ⇒ < nl > + log . warning ( " Finding messages " ) < nl > ( for { < nl > models ← db . run ( HistoryMessageRepo . findAfter ( userId , peer , d . ownerLastReadAt , Long . MaxValue ) ) < nl > + _ = log . warning ( " Found { } messages " , models . size ) < nl > newMessages = models map { m ⇒ < nl > NewMessage ( < nl > randomId = m . randomId , < nl > @ @ - 54 , 8 + 56 , 11 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > MessagesRead ( Instant . ofEpochMilli ( d . lastReadAt . getMillis ) ) < nl > ) ) pipeTo self < nl > case PersistEvents ( events ) ⇒ < nl > + log . warning ( " Persisting events " ) < nl > persistAll ( events ) { _ ⇒ < nl > + log . warning ( " Persisted events , commiting " ) < nl > events foreach ( e = > commit ( e ) ) < nl > + log . warning ( " Migration completed " ) < nl > unstashAll ( ) < nl > context become receiveCommand < nl > } < nl > @ @ - 68 , 6 + 73 , 7 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > } < nl > < nl > private def migrate ( ) : Unit = { < nl > + log . warning ( " Starting migration " ) < nl > context become migrating < nl > ( db . run ( DialogRepo . findDialog ( userId , peer ) ) map { < nl > case Some ( model ) ⇒ model

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 index e72d32e . . 659eeca 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 @ @ - 16 , 6 + 16 , 7 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { 
 import context . dispatcher 
 
 private case class PersistEvents ( events : List [ Event ] ) 
 + private case object EventsPersisted 
 
 private var needMigrate = true 
 
 @ @ - 64 , 15 + 65 , 15 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { 
 ) ) pipeTo self 
 case PersistEvents ( events ) ⇒ 
 log . warning ( " Persisting events " ) 
 - persistAll ( events ) ( _ ⇒ ( ) ) 
 + persistAll ( events ) ( e ⇒ commit ( e ) ) 
 
 deferAsync ( ( ) ) { _ ⇒ 
 - log . warning ( " Persisted events , commiting " ) 
 - events foreach ( e ⇒ commit ( e ) ) 
 log . warning ( " Migration completed " ) 
 - unstashAll ( ) 
 - context become receiveCommand 
 + self ! EventsPersisted 
 } 
 + case EventsPersisted ⇒ 
 + unstashAll ( ) 
 + context become receiveCommand 
 case Status . Failure ( e ) ⇒ 
 log . error ( e , " Failed to migrate " ) 
 throw e 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 index 62495e2 . . 7dc9787 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 @ @ - 16 , 6 + 16 , 7 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { 
 import context . dispatcher 
 
 private case class CreateEvents ( models : Seq [ DialogObsolete ] ) 
 + private case object EventsPersisted 
 
 val userId : Int 
 private val db = DbExtension ( context . system ) . db 
 @ @ - 42 , 10 + 43 , 10 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { 
 
 private def migrating : Receive = { 
 case CreateEvents ( models ) ⇒ 
 - createEvents ( models ) { 
 - unstashAll ( ) 
 - context become receiveCommand 
 - } 
 + createEvents ( models ) 
 + case EventsPersisted ⇒ 
 + unstashAll ( ) 
 + context become receiveCommand 
 case Status . Failure ( e ) ⇒ 
 log . error ( e , " Failed to migrate " ) 
 throw e 
 @ @ - 62 , 7 + 63 , 7 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { 
 } yield CreateEvents ( models ) ) pipeTo self 
 } 
 
 - private def createEvents ( models : Seq [ DialogObsolete ] ) ( onComplete : ⇒ Unit ) : Unit = { 
 + private def createEvents ( models : Seq [ DialogObsolete ] ) : Unit = { 
 val created = models map { dialog ⇒ 
 Created ( Instant . ofEpochMilli ( dialog . createdAt . getMillis ) , Some ( dialog . peer ) ) 
 } 
 @ @ - 78 , 10 + 79 , 9 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { 
 } 
 
 val events : List [ Event ] = Initialized ( Instant . now ( ) ) + : ( created + + archived + + favourited ) . toList 
 - persistAll ( events ) ( _ ⇒ ( ) ) 
 + persistAll ( events ) ( e ⇒ commit ( e ) ) 
 deferAsync ( ( ) ) { _ ⇒ 
 - events foreach ( e ⇒ commit ( e ) ) 
 - onComplete 
 + self ! EventsPersisted 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 index 587c940 . . 4afad10 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 @ @ - 38 , 8 + 38 , 10 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { 
 
 private def migrating : Receive = { 
 case d : DialogObsolete ⇒ 
 + log . warning ( " Finding messages " ) 
 ( for { 
 models ← db . run ( HistoryMessageRepo . findAfter ( userId , peer , d . ownerLastReadAt , Long . MaxValue ) ) 
 + _ = log . warning ( " Found { } messages " , models . size ) 
 newMessages = models map { m ⇒ 
 NewMessage ( 
 randomId = m . randomId , 
 @ @ - 54 , 8 + 56 , 11 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { 
 MessagesRead ( Instant . ofEpochMilli ( d . lastReadAt . getMillis ) ) 
 ) ) pipeTo self 
 case PersistEvents ( events ) ⇒ 
 + log . warning ( " Persisting events " ) 
 persistAll ( events ) { _ ⇒ 
 + log . warning ( " Persisted events , commiting " ) 
 events foreach ( e = > commit ( e ) ) 
 + log . warning ( " Migration completed " ) 
 unstashAll ( ) 
 context become receiveCommand 
 } 
 @ @ - 68 , 6 + 73 , 7 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { 
 } 
 
 private def migrate ( ) : Unit = { 
 + log . warning ( " Starting migration " ) 
 context become migrating 
 ( db . run ( DialogRepo . findDialog ( userId , peer ) ) map { 
 case Some ( model ) ⇒ model
