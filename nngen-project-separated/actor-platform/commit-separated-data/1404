BLEU SCORE: 0.020128303461390603

TEST MSG: fix ( server : presences ) : deliver user presence every minute to all consumers
GENERATED MSG: Merge branch ' master ' of https : / / github . com / actorapp / actor - platform

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / resources / reference . conf b / actor - server / actor - core / src / main / resources / reference . conf < nl > index 196237d . . 6b12328 100644 < nl > - - - a / actor - server / actor - core / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - core / src / main / resources / reference . conf < nl > @ @ - 4 , 6 + 4 , 13 @ @ office { < nl > passivation - interval = 0 ms < nl > } < nl > < nl > + modules { < nl > + presence { < nl > + # How often deliver state despite of its change < nl > + deliver - state - interval = 1 m < nl > + } < nl > + } < nl > + < nl > services { < nl > apple { < nl > push { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / presences / PresenceManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / presences / PresenceManager . scala < nl > index 6a5713e . . d0afa47 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / presences / PresenceManager . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / presences / PresenceManager . scala < nl > @ @ - 52 , 6 + 52 , 9 @ @ object PresenceManager { < nl > @ SerialVersionUID ( 1L ) < nl > private case class Initialized ( lastSeenAt : Option [ DateTime ] ) < nl > < nl > + @ SerialVersionUID ( 1L ) < nl > + private case object DeliverState extends Message < nl > + < nl > def props = Props ( classOf [ PresenceManager ] ) < nl > } < nl > < nl > @ @ - 62 , 6 + 65 , 8 @ @ class PresenceManager extends Actor with ActorLogging with Stash { < nl > implicit val ec : ExecutionContext = context . dispatcher < nl > private val db : Database = DbExtension ( context . system ) . db < nl > < nl > + private val DeliverStateInterval = context . system . settings . config . getDuration ( " modules . presence . deliver - state - interval " ) . getSeconds . seconds < nl > + < nl > private val receiveTimeout = 15 . minutes / / TODO : configurable < nl > context . setReceiveTimeout ( receiveTimeout ) < nl > < nl > @ @ - 96 , 6 + 101 , 7 @ @ class PresenceManager extends Actor with ActorLogging with Stash { < nl > case Initialized ( lastSeenAt : Option [ DateTime ] ) ⇒ < nl > unstashAll ( ) < nl > this . state = this . state . copy ( lastSeenAt = lastSeenAt ) < nl > + scheduleDeliverState ( ) < nl > context . become ( working ) < nl > case msg ⇒ stash ( ) < nl > } < nl > @ @ - 140 , 13 + 146 , 14 @ @ class PresenceManager extends Actor with ActorLogging with Stash { < nl > < nl > if ( newPresence ! = oldPresence ) < nl > deliverState ( ) < nl > - < nl > - case ReceiveTimeout ⇒ < nl > - if ( consumers . isEmpty ) { < nl > - context . parent ! Passivate ( stopMessage = PoisonPill ) < nl > - } < nl > + case DeliverState ⇒ < nl > + deliverState ( ) < nl > + scheduleDeliverState ( ) < nl > } < nl > < nl > + private def scheduleDeliverState ( ) : Unit = < nl > + context . system . scheduler . scheduleOnce ( DeliverStateInterval , self , DeliverState ) < nl > + < nl > private def deliverState ( ) : Unit = < nl > consumers foreach deliverState < nl > < nl > diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > index 1846910 . . 45af4b3 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > @ @ - 111 , 7 + 111 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : < nl > enqueueProtoMessageWithResend ( msg , reduceKey ) < nl > case OnNext ( OutgoingMessage ( msg : ProtoMessage with OutgoingProtoMessage , _ ) ) ⇒ enqueueProtoMessage ( msg ) < nl > case OnNext ( IncomingRequestResend ( messageId ) ) ⇒ < nl > - resendBuffer . get ( messageId ) map { < nl > + resendBuffer . get ( messageId ) foreach { < nl > case ( msg , reduceKey , scheduledResend ) ⇒ < nl > / / should be already completed because RequestResend is sent by client only after receiving Unsent notification < nl > scheduledResend . cancel ( ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > index 1d2c0e5 . . 60fcb95 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > @ @ - 204 , 6 + 204 , 7 @ @ class SessionResendSpec extends BaseSessionSpec ( < nl > weakUpdatesExt . pushUpdate ( authId , upd1 , Some ( " reduceKey 1 ( uniq ) " ) ) < nl > < nl > weakUpdatesExt . pushUpdate ( authId , upd2first , Some ( " reduceKey 2 ( same ) " ) ) < nl > + < nl > weakUpdatesExt . pushUpdate ( authId , upd2second , Some ( " reduceKey 2 ( same ) " ) ) < nl > < nl > weakUpdatesExt . pushUpdate ( authId , upd3 , Some ( " reduceKey 3 ( uniq ) " ) ) < nl > diff - - git a / actor - server / notes / 1 . 0 . 72 . markdown b / actor - server / notes / 1 . 0 . 72 . markdown < nl > new file mode 100644 < nl > index 0000000 . . cb0588d < nl > - - - / dev / null < nl > + + + b / actor - server / notes / 1 . 0 . 72 . markdown < nl > @ @ - 0 , 0 + 1 @ @ < nl > + * deliver user presence every minute to all consumers < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / README . MD b / README . MD < nl > index 8c53a78 . . 061c271 100644 < nl > - - - a / README . MD < nl > + + + b / README . MD < nl > @ @ - 9 , 6 + 9 , 13 @ @ Actor Platform is good for improving enterprise communications , building a messa < nl > < nl > This repository contains all source code of platform whereby you can start your server or / and build your iOS , Android , Web , or Desktop applications . < nl > < nl > + # Currently available clients < nl > + * Android 4 . 0 . 3 + < nl > + * iPhone / iPad 7 . 0 + < nl > + * Web < nl > + < nl > + It is very easy to [ implement your own ] ( http : / / actor . readme . io / docs / apps ) . < nl > + < nl > # Installation < nl > < nl > Building mobile messaging application is a bit complex procedure and you need certain amount of preparations : have developer accounts in Google , Apple , have SSL certificates for your servers , integrate server with various services like SMS gate , push systems , etc . . .

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / resources / reference . conf b / actor - server / actor - core / src / main / resources / reference . conf 
 index 196237d . . 6b12328 100644 
 - - - a / actor - server / actor - core / src / main / resources / reference . conf 
 + + + b / actor - server / actor - core / src / main / resources / reference . conf 
 @ @ - 4 , 6 + 4 , 13 @ @ office { 
 passivation - interval = 0 ms 
 } 
 
 + modules { 
 + presence { 
 + # How often deliver state despite of its change 
 + deliver - state - interval = 1 m 
 + } 
 + } 
 + 
 services { 
 apple { 
 push { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / presences / PresenceManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / presences / PresenceManager . scala 
 index 6a5713e . . d0afa47 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / presences / PresenceManager . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / presences / PresenceManager . scala 
 @ @ - 52 , 6 + 52 , 9 @ @ object PresenceManager { 
 @ SerialVersionUID ( 1L ) 
 private case class Initialized ( lastSeenAt : Option [ DateTime ] ) 
 
 + @ SerialVersionUID ( 1L ) 
 + private case object DeliverState extends Message 
 + 
 def props = Props ( classOf [ PresenceManager ] ) 
 } 
 
 @ @ - 62 , 6 + 65 , 8 @ @ class PresenceManager extends Actor with ActorLogging with Stash { 
 implicit val ec : ExecutionContext = context . dispatcher 
 private val db : Database = DbExtension ( context . system ) . db 
 
 + private val DeliverStateInterval = context . system . settings . config . getDuration ( " modules . presence . deliver - state - interval " ) . getSeconds . seconds 
 + 
 private val receiveTimeout = 15 . minutes / / TODO : configurable 
 context . setReceiveTimeout ( receiveTimeout ) 
 
 @ @ - 96 , 6 + 101 , 7 @ @ class PresenceManager extends Actor with ActorLogging with Stash { 
 case Initialized ( lastSeenAt : Option [ DateTime ] ) ⇒ 
 unstashAll ( ) 
 this . state = this . state . copy ( lastSeenAt = lastSeenAt ) 
 + scheduleDeliverState ( ) 
 context . become ( working ) 
 case msg ⇒ stash ( ) 
 } 
 @ @ - 140 , 13 + 146 , 14 @ @ class PresenceManager extends Actor with ActorLogging with Stash { 
 
 if ( newPresence ! = oldPresence ) 
 deliverState ( ) 
 - 
 - case ReceiveTimeout ⇒ 
 - if ( consumers . isEmpty ) { 
 - context . parent ! Passivate ( stopMessage = PoisonPill ) 
 - } 
 + case DeliverState ⇒ 
 + deliverState ( ) 
 + scheduleDeliverState ( ) 
 } 
 
 + private def scheduleDeliverState ( ) : Unit = 
 + context . system . scheduler . scheduleOnce ( DeliverStateInterval , self , DeliverState ) 
 + 
 private def deliverState ( ) : Unit = 
 consumers foreach deliverState 
 
 diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 index 1846910 . . 45af4b3 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 @ @ - 111 , 7 + 111 , 7 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : 
 enqueueProtoMessageWithResend ( msg , reduceKey ) 
 case OnNext ( OutgoingMessage ( msg : ProtoMessage with OutgoingProtoMessage , _ ) ) ⇒ enqueueProtoMessage ( msg ) 
 case OnNext ( IncomingRequestResend ( messageId ) ) ⇒ 
 - resendBuffer . get ( messageId ) map { 
 + resendBuffer . get ( messageId ) foreach { 
 case ( msg , reduceKey , scheduledResend ) ⇒ 
 / / should be already completed because RequestResend is sent by client only after receiving Unsent notification 
 scheduledResend . cancel ( ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 index 1d2c0e5 . . 60fcb95 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 @ @ - 204 , 6 + 204 , 7 @ @ class SessionResendSpec extends BaseSessionSpec ( 
 weakUpdatesExt . pushUpdate ( authId , upd1 , Some ( " reduceKey 1 ( uniq ) " ) ) 
 
 weakUpdatesExt . pushUpdate ( authId , upd2first , Some ( " reduceKey 2 ( same ) " ) ) 
 + 
 weakUpdatesExt . pushUpdate ( authId , upd2second , Some ( " reduceKey 2 ( same ) " ) ) 
 
 weakUpdatesExt . pushUpdate ( authId , upd3 , Some ( " reduceKey 3 ( uniq ) " ) ) 
 diff - - git a / actor - server / notes / 1 . 0 . 72 . markdown b / actor - server / notes / 1 . 0 . 72 . markdown 
 new file mode 100644 
 index 0000000 . . cb0588d 
 - - - / dev / null 
 + + + b / actor - server / notes / 1 . 0 . 72 . markdown 
 @ @ - 0 , 0 + 1 @ @ 
 + * deliver user presence every minute to all consumers 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / README . MD b / README . MD 
 index 8c53a78 . . 061c271 100644 
 - - - a / README . MD 
 + + + b / README . MD 
 @ @ - 9 , 6 + 9 , 13 @ @ Actor Platform is good for improving enterprise communications , building a messa 
 
 This repository contains all source code of platform whereby you can start your server or / and build your iOS , Android , Web , or Desktop applications . 
 
 + # Currently available clients 
 + * Android 4 . 0 . 3 + 
 + * iPhone / iPad 7 . 0 + 
 + * Web 
 + 
 + It is very easy to [ implement your own ] ( http : / / actor . readme . io / docs / apps ) . 
 + 
 # Installation 
 
 Building mobile messaging application is a bit complex procedure and you need certain amount of preparations : have developer accounts in Google , Apple , have SSL certificates for your servers , integrate server with various services like SMS gate , push systems , etc . . .
