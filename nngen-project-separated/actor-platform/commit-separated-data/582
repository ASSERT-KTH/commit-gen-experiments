BLEU SCORE: 0.2240750868020436

TEST MSG: fix ( android ) : Fixing Double - init on android , fix exponential backogg in GCM
GENERATED MSG: fix ( android ) : Exponential Push registration , async actor push registration

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java < nl > index dd16fff . . 0a7673f 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java < nl > + + + b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java < nl > @ @ - 35 , 6 + 35 , 7 @ @ public class PushManager implements ActorPushManager { < nl > return ; < nl > } else { < nl > Log . d ( TAG , " Unable to load Token " ) ; < nl > + exponentialBackoff . onFailure ( ) ; < nl > } < nl > } catch ( Exception e ) { < nl > e . printStackTrace ( ) ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java < nl > index f404f54 . . 55aba69 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . sdk ; < nl > < nl > + import android . app . ActivityManager ; < nl > import android . app . Application ; < nl > < nl > / * * < nl > @ @ - 12 , 9 + 13 , 20 @ @ public class ActorSDKApplication extends Application { < nl > public void onCreate ( ) { < nl > super . onCreate ( ) ; < nl > < nl > - onConfigureActorSDK ( ) ; < nl > + int id = android . os . Process . myPid ( ) ; < nl > + String myProcessName = getPackageName ( ) ; < nl > + ActivityManager activityManager = ( ActivityManager ) getSystemService ( ACTIVITY _ SERVICE ) ; < nl > + for ( ActivityManager . RunningAppProcessInfo procInfo : activityManager . getRunningAppProcesses ( ) ) { < nl > + if ( id = = procInfo . pid ) { < nl > + myProcessName = procInfo . processName ; < nl > + } < nl > + } < nl > < nl > - ActorSDK . sharedActor ( ) . createActor ( this ) ; < nl > + / / Protection on double start < nl > + if ( ! myProcessName . endsWith ( " : actor _ push " ) ) { < nl > + onConfigureActorSDK ( ) ; < nl > + ActorSDK . sharedActor ( ) . createActor ( this ) ; < nl > + } < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java < nl > index a20cd64 . . cd1a6f8 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java < nl > @ @ - 14 , 10 + 14 , 14 @ @ import im . actor . runtime . threading . AtomicIntegerCompat ; < nl > < nl > public class ExponentialBackoff { < nl > < nl > + private final Random random = new Random ( ) ; < nl > + < nl > private final int minDelay ; < nl > private final int maxDelay ; < nl > private final int maxFailureCount ; < nl > < nl > + private int currentFailureCount = 1 ; < nl > + < nl > public ExponentialBackoff ( ) { < nl > this ( 500 , 15000 , 50 ) ; < nl > } < nl > @ @ - 30 , 43 + 34 , 37 @ @ public class ExponentialBackoff { < nl > this . maxFailureCount = maxFailureCount ; < nl > } < nl > < nl > - private final AtomicIntegerCompat currentFailureCount = im . actor . runtime . Runtime . createAtomicInt ( 1 ) ; < nl > - < nl > - private final Random random = new Random ( ) ; < nl > - < nl > / * * < nl > * Calculating wait duration after failure attempt < nl > * < nl > * @ return wait in ms < nl > * / < nl > - public long exponentialWait ( ) { < nl > - long maxDelayRet = minDelay + ( ( maxDelay - minDelay ) / maxFailureCount ) * currentFailureCount . get ( ) ; < nl > - synchronized ( random ) { < nl > - return ( long ) ( random . nextFloat ( ) * maxDelayRet ) ; < nl > - } < nl > + public synchronized long exponentialWait ( ) { < nl > + long maxDelayRet = minDelay + ( ( maxDelay - minDelay ) / maxFailureCount ) * currentFailureCount ; < nl > + return ( long ) ( random . nextFloat ( ) * maxDelayRet ) ; < nl > } < nl > < nl > / * * < nl > * Notification about failure < nl > * / < nl > - public void onFailure ( ) { < nl > - final int val = currentFailureCount . incrementAndGet ( ) ; < nl > - if ( val > maxFailureCount ) { < nl > - currentFailureCount . compareAndSet ( val , maxFailureCount ) ; < nl > + public synchronized void onFailure ( ) { < nl > + currentFailureCount + + ; < nl > + if ( currentFailureCount > maxFailureCount ) { < nl > + currentFailureCount = maxFailureCount ; < nl > } < nl > } < nl > < nl > / * * < nl > * Notification about success < nl > * / < nl > - public void onSuccess ( ) { < nl > + public synchronized void onSuccess ( ) { < nl > reset ( ) ; < nl > } < nl > < nl > / * * < nl > * Resetting backoff object < nl > * / < nl > - public void reset ( ) { < nl > - currentFailureCount . set ( 0 ) ; < nl > + public synchronized void reset ( ) { < nl > + currentFailureCount = 0 ; < nl > } < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java < nl > index e9b176f . . dd16fff 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java < nl > + + + b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java < nl > @ @ - 6 , 6 + 6 , 7 @ @ import com . google . android . gms . gcm . GoogleCloudMessaging ; < nl > < nl > import java . io . IOException ; < nl > < nl > + import im . actor . core . util . ExponentialBackoff ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . core . ActorPushManager ; < nl > @ @ - 16 , 15 + 17 , 15 @ @ public class PushManager implements ActorPushManager { < nl > < nl > @ Override < nl > public void registerPush ( final Context context ) { < nl > - / / isRegistered = ActorSDK . sharedActor ( ) . getMessenger ( ) . getPreferences ( ) . getBool ( " push _ registered " , false ) ; < nl > < nl > if ( ! isRegistered ) { < nl > - Log . d ( TAG , " Requesting push token . . . " ) ; < nl > < nl > - / / TODO : Add backoff < nl > + Log . d ( TAG , " Requesting push token . . . " ) ; < nl > + < nl > new Thread ( ) { < nl > @ Override < nl > public void run ( ) { < nl > + ExponentialBackoff exponentialBackoff = new ExponentialBackoff ( ) ; < nl > while ( true ) { < nl > try { < nl > String regId = tryRegisterPush ( context ) ; < nl > @ @ - 37 , 10 + 38 , 12 @ @ public class PushManager implements ActorPushManager { < nl > } < nl > } catch ( Exception e ) { < nl > e . printStackTrace ( ) ; < nl > + exponentialBackoff . onFailure ( ) ; < nl > } < nl > - Log . d ( TAG , " Waiting for next attempt " ) ; < nl > + long waitTime = exponentialBackoff . exponentialWait ( ) ; < nl > + Log . d ( TAG , " Next attempt in " + waitTime + " ms " ) ; < nl > try { < nl > - Thread . sleep ( 1000 ) ; < nl > + Thread . sleep ( waitTime ) ; < nl > } catch ( InterruptedException e1 ) { < nl > e1 . printStackTrace ( ) ; < nl > return ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushService . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushService . java < nl > index 15042a5 . . cc9d9d9 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushService . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushService . java < nl > @ @ - 175 , 32 + 175 , 34 @ @ public class ActorPushService extends Service implements MqttCallback { < nl > isConnecting = true ; < nl > < nl > Log . d ( TAG , " Starting connecting . . . " ) ; < nl > - / / Clearing mqttClient < nl > - if ( mqttClient ! = null ) { < nl > - try { < nl > - mqttClient . close ( ) ; < nl > - } catch ( MqttException e ) { < nl > - e . printStackTrace ( ) ; < nl > - } < nl > - } < nl > - mqttClient = null ; < nl > - < nl > - try { < nl > - Thread . sleep ( exponentialBackoff . exponentialWait ( ) ) ; < nl > - } catch ( InterruptedException e ) { < nl > - e . printStackTrace ( ) ; < nl > - return ; < nl > - } < nl > < nl > - / / Setting credentials < nl > - connectOptions . setUserName ( mqttUsername ) ; < nl > - connectOptions . setPassword ( mqttPassword . toCharArray ( ) ) ; < nl > < nl > - / / Starting mqtt connection < nl > - final int attempt = + + attemptIndex ; < nl > connectionExecutor . execute ( new Runnable ( ) { < nl > @ Override < nl > public void run ( ) { < nl > + / / Clearing mqttClient < nl > + if ( mqttClient ! = null ) { < nl > + try { < nl > + mqttClient . close ( ) ; < nl > + } catch ( MqttException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + mqttClient = null ; < nl > + < nl > + try { < nl > + Thread . sleep ( exponentialBackoff . exponentialWait ( ) ) ; < nl > + } catch ( InterruptedException e ) { < nl > + e . printStackTrace ( ) ; < nl > + return ; < nl > + } < nl > + < nl > + / / Setting credentials < nl > + connectOptions . setUserName ( mqttUsername ) ; < nl > + connectOptions . setPassword ( mqttPassword . toCharArray ( ) ) ; < nl > + < nl > + / / Starting mqtt connection < nl > + final int attempt = + + attemptIndex ; < nl > Log . d ( TAG , " Connecting . . . " ) ; < nl > MqttClient mqttClient ; < nl > try { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java < nl > index aba3086 . . a20cd64 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java < nl > @ @ - 18 , 6 + 18 , 10 @ @ public class ExponentialBackoff { < nl > private final int maxDelay ; < nl > private final int maxFailureCount ; < nl > < nl > + public ExponentialBackoff ( ) { < nl > + this ( 500 , 15000 , 50 ) ; < nl > + } < nl > + < nl > public ExponentialBackoff ( int minDelay , < nl > int maxDelay , < nl > int maxFailureCount ) {

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java 
 index dd16fff . . 0a7673f 100644 
 - - - a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java 
 + + + b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java 
 @ @ - 35 , 6 + 35 , 7 @ @ public class PushManager implements ActorPushManager { 
 return ; 
 } else { 
 Log . d ( TAG , " Unable to load Token " ) ; 
 + exponentialBackoff . onFailure ( ) ; 
 } 
 } catch ( Exception e ) { 
 e . printStackTrace ( ) ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java 
 index f404f54 . . 55aba69 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . sdk ; 
 
 + import android . app . ActivityManager ; 
 import android . app . Application ; 
 
 / * * 
 @ @ - 12 , 9 + 13 , 20 @ @ public class ActorSDKApplication extends Application { 
 public void onCreate ( ) { 
 super . onCreate ( ) ; 
 
 - onConfigureActorSDK ( ) ; 
 + int id = android . os . Process . myPid ( ) ; 
 + String myProcessName = getPackageName ( ) ; 
 + ActivityManager activityManager = ( ActivityManager ) getSystemService ( ACTIVITY _ SERVICE ) ; 
 + for ( ActivityManager . RunningAppProcessInfo procInfo : activityManager . getRunningAppProcesses ( ) ) { 
 + if ( id = = procInfo . pid ) { 
 + myProcessName = procInfo . processName ; 
 + } 
 + } 
 
 - ActorSDK . sharedActor ( ) . createActor ( this ) ; 
 + / / Protection on double start 
 + if ( ! myProcessName . endsWith ( " : actor _ push " ) ) { 
 + onConfigureActorSDK ( ) ; 
 + ActorSDK . sharedActor ( ) . createActor ( this ) ; 
 + } 
 } 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java 
 index a20cd64 . . cd1a6f8 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java 
 @ @ - 14 , 10 + 14 , 14 @ @ import im . actor . runtime . threading . AtomicIntegerCompat ; 
 
 public class ExponentialBackoff { 
 
 + private final Random random = new Random ( ) ; 
 + 
 private final int minDelay ; 
 private final int maxDelay ; 
 private final int maxFailureCount ; 
 
 + private int currentFailureCount = 1 ; 
 + 
 public ExponentialBackoff ( ) { 
 this ( 500 , 15000 , 50 ) ; 
 } 
 @ @ - 30 , 43 + 34 , 37 @ @ public class ExponentialBackoff { 
 this . maxFailureCount = maxFailureCount ; 
 } 
 
 - private final AtomicIntegerCompat currentFailureCount = im . actor . runtime . Runtime . createAtomicInt ( 1 ) ; 
 - 
 - private final Random random = new Random ( ) ; 
 - 
 / * * 
 * Calculating wait duration after failure attempt 
 * 
 * @ return wait in ms 
 * / 
 - public long exponentialWait ( ) { 
 - long maxDelayRet = minDelay + ( ( maxDelay - minDelay ) / maxFailureCount ) * currentFailureCount . get ( ) ; 
 - synchronized ( random ) { 
 - return ( long ) ( random . nextFloat ( ) * maxDelayRet ) ; 
 - } 
 + public synchronized long exponentialWait ( ) { 
 + long maxDelayRet = minDelay + ( ( maxDelay - minDelay ) / maxFailureCount ) * currentFailureCount ; 
 + return ( long ) ( random . nextFloat ( ) * maxDelayRet ) ; 
 } 
 
 / * * 
 * Notification about failure 
 * / 
 - public void onFailure ( ) { 
 - final int val = currentFailureCount . incrementAndGet ( ) ; 
 - if ( val > maxFailureCount ) { 
 - currentFailureCount . compareAndSet ( val , maxFailureCount ) ; 
 + public synchronized void onFailure ( ) { 
 + currentFailureCount + + ; 
 + if ( currentFailureCount > maxFailureCount ) { 
 + currentFailureCount = maxFailureCount ; 
 } 
 } 
 
 / * * 
 * Notification about success 
 * / 
 - public void onSuccess ( ) { 
 + public synchronized void onSuccess ( ) { 
 reset ( ) ; 
 } 
 
 / * * 
 * Resetting backoff object 
 * / 
 - public void reset ( ) { 
 - currentFailureCount . set ( 0 ) ; 
 + public synchronized void reset ( ) { 
 + currentFailureCount = 0 ; 
 } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java 
 index e9b176f . . dd16fff 100644 
 - - - a / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java 
 + + + b / actor - sdk / sdk - core - android / android - google - push / src / main / java / im / actor / push / PushManager . java 
 @ @ - 6 , 6 + 6 , 7 @ @ import com . google . android . gms . gcm . GoogleCloudMessaging ; 
 
 import java . io . IOException ; 
 
 + import im . actor . core . util . ExponentialBackoff ; 
 import im . actor . runtime . Log ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . core . ActorPushManager ; 
 @ @ - 16 , 15 + 17 , 15 @ @ public class PushManager implements ActorPushManager { 
 
 @ Override 
 public void registerPush ( final Context context ) { 
 - / / isRegistered = ActorSDK . sharedActor ( ) . getMessenger ( ) . getPreferences ( ) . getBool ( " push _ registered " , false ) ; 
 
 if ( ! isRegistered ) { 
 - Log . d ( TAG , " Requesting push token . . . " ) ; 
 
 - / / TODO : Add backoff 
 + Log . d ( TAG , " Requesting push token . . . " ) ; 
 + 
 new Thread ( ) { 
 @ Override 
 public void run ( ) { 
 + ExponentialBackoff exponentialBackoff = new ExponentialBackoff ( ) ; 
 while ( true ) { 
 try { 
 String regId = tryRegisterPush ( context ) ; 
 @ @ - 37 , 10 + 38 , 12 @ @ public class PushManager implements ActorPushManager { 
 } 
 } catch ( Exception e ) { 
 e . printStackTrace ( ) ; 
 + exponentialBackoff . onFailure ( ) ; 
 } 
 - Log . d ( TAG , " Waiting for next attempt " ) ; 
 + long waitTime = exponentialBackoff . exponentialWait ( ) ; 
 + Log . d ( TAG , " Next attempt in " + waitTime + " ms " ) ; 
 try { 
 - Thread . sleep ( 1000 ) ; 
 + Thread . sleep ( waitTime ) ; 
 } catch ( InterruptedException e1 ) { 
 e1 . printStackTrace ( ) ; 
 return ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushService . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushService . java 
 index 15042a5 . . cc9d9d9 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushService . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushService . java 
 @ @ - 175 , 32 + 175 , 34 @ @ public class ActorPushService extends Service implements MqttCallback { 
 isConnecting = true ; 
 
 Log . d ( TAG , " Starting connecting . . . " ) ; 
 - / / Clearing mqttClient 
 - if ( mqttClient ! = null ) { 
 - try { 
 - mqttClient . close ( ) ; 
 - } catch ( MqttException e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - } 
 - mqttClient = null ; 
 - 
 - try { 
 - Thread . sleep ( exponentialBackoff . exponentialWait ( ) ) ; 
 - } catch ( InterruptedException e ) { 
 - e . printStackTrace ( ) ; 
 - return ; 
 - } 
 
 - / / Setting credentials 
 - connectOptions . setUserName ( mqttUsername ) ; 
 - connectOptions . setPassword ( mqttPassword . toCharArray ( ) ) ; 
 
 - / / Starting mqtt connection 
 - final int attempt = + + attemptIndex ; 
 connectionExecutor . execute ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 + / / Clearing mqttClient 
 + if ( mqttClient ! = null ) { 
 + try { 
 + mqttClient . close ( ) ; 
 + } catch ( MqttException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + mqttClient = null ; 
 + 
 + try { 
 + Thread . sleep ( exponentialBackoff . exponentialWait ( ) ) ; 
 + } catch ( InterruptedException e ) { 
 + e . printStackTrace ( ) ; 
 + return ; 
 + } 
 + 
 + / / Setting credentials 
 + connectOptions . setUserName ( mqttUsername ) ; 
 + connectOptions . setPassword ( mqttPassword . toCharArray ( ) ) ; 
 + 
 + / / Starting mqtt connection 
 + final int attempt = + + attemptIndex ; 
 Log . d ( TAG , " Connecting . . . " ) ; 
 MqttClient mqttClient ; 
 try { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java 
 index aba3086 . . a20cd64 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / util / ExponentialBackoff . java 
 @ @ - 18 , 6 + 18 , 10 @ @ public class ExponentialBackoff { 
 private final int maxDelay ; 
 private final int maxFailureCount ; 
 
 + public ExponentialBackoff ( ) { 
 + this ( 500 , 15000 , 50 ) ; 
 + } 
 + 
 public ExponentialBackoff ( int minDelay , 
 int maxDelay , 
 int maxFailureCount ) {
