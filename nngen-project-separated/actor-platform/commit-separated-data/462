BLEU SCORE: 0.16017793995604032

TEST MSG: test ( server : bot ) : fixed specs compilation errors
GENERATED MSG: feat ( server : cluster ) : start internal bots ad ClusterSingletons

TEST DIFF (one line): diff - - git a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala < nl > index d7f8654 . . 9001514 100644 < nl > - - - a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala < nl > + + + b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala < nl > @ @ - 21 , 7 + 21 , 6 @ @ final class ActorBotSpec < nl > it should " report about taken username " in takenUsername / / TODO : make it independent from rcv < nl > it should " be found by username " in username < nl > < nl > - private lazy val dialogExt = DialogExtension ( system ) < nl > private lazy val msgService = MessagingServiceImpl ( ) < nl > private lazy val contactsService = new ContactsServiceImpl < nl > < nl > diff - - git a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala < nl > index 95682cb . . 67d9f5c 100644 < nl > - - - a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala < nl > + + + b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala < nl > @ @ - 44 , 7 + 44 , 6 @ @ final class EchoBotSpec < nl > it should " reply with the same message ( private ) " in replyPrivate < nl > it should " reply with the same message ( group ) " in replyGroup < nl > < nl > - private lazy val dialogExt = DialogExtension ( system ) < nl > private lazy val msgService = MessagingServiceImpl ( ) < nl > private implicit lazy val groupsService = new GroupsServiceImpl ( GroupInviteConfig ( " " ) ) < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > index 49ec37a . . f7516a9 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala < nl > @ @ - 3 , 12 + 3 , 11 @ @ package im . actor . server . dialog < nl > import java . time . Instant < nl > < nl > import akka . persistence . SnapshotMetadata < nl > - import im . actor . server . cqrs . { Event , ProcessorState , TaggedEvent } < nl > + import im . actor . server . cqrs . { Event , ProcessorState , TaggedEvent } < nl > import im . actor . server . model . Peer < nl > < nl > import scala . collection . SortedSet < nl > < nl > - < nl > private [ dialog ] trait DialogEvent extends TaggedEvent { < nl > override def tags : Set [ String ] = Set ( " dialog " ) < nl > } < nl > @ @ - 44 , 14 + 43 , 14 @ @ private [ dialog ] object DialogState { < nl > } < nl > < nl > private [ dialog ] final case class DialogState ( < nl > - userId : Int , < nl > - lastMessageDate : Instant , / / we don ' t use it now anywhere . should we remove it ? < nl > - lastReceiveDate : Instant , < nl > - lastReadDate : Instant , < nl > - counter : Int , < nl > - unreadMessages : SortedSet [ UnreadMessage ] , < nl > - unreadMessagesMap : Map [ Long , Long ] < nl > - ) extends ProcessorState [ DialogState ] { < nl > + userId : Int , < nl > + lastMessageDate : Instant , / / we don ' t use it now anywhere . should we remove it ? < nl > + lastReceiveDate : Instant , < nl > + lastReadDate : Instant , < nl > + counter : Int , < nl > + unreadMessages : SortedSet [ UnreadMessage ] , < nl > + unreadMessagesMap : Map [ Long , Long ] < nl > + ) extends ProcessorState [ DialogState ] { < nl > import DialogEvents . _ < nl > < nl > override def updated ( e : Event ) : DialogState = e match {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala < nl > index 3628411 . . 774fb91 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala < nl > @ @ - 17 , 7 + 17 , 7 @ @ object ActorBot { < nl > < nl > val ApiPeer = new ApiPeer ( ApiPeerType . Private , UserId ) < nl > < nl > - def start ( ) ( implicit system : ActorSystem ) = system . actorOf ( props , " ActorBot " ) < nl > + def start ( ) ( implicit system : ActorSystem ) = InternalBot . start ( props ) < nl > < nl > private def props = Props ( classOf [ ActorBot ] ) < nl > } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > index cb390de . . 305baa2 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . server . bot < nl > < nl > import akka . actor . _ < nl > + import akka . cluster . singleton . { ClusterSingletonManager , ClusterSingletonManagerSettings } < nl > import akka . pattern . pipe < nl > import akka . stream . scaladsl . { Sink , Source } < nl > import akka . stream . { ActorMaterializer , OverflowStrategy } < nl > @ @ - 16 , 15 + 17 , 20 @ @ private object InternalBot { < nl > < nl > final case class Initialized ( authId : Long , authSid : Int ) < nl > < nl > + def start ( props : Props ) ( implicit system : ActorSystem ) = < nl > + system . actorOf ( ClusterSingletonManager . props ( < nl > + props , < nl > + PoisonPill , < nl > + ClusterSingletonManagerSettings ( system ) < nl > + ) ) < nl > } < nl > < nl > abstract class InternalBot ( userId : Int , nickname : String , name : String , isAdmin : Boolean ) extends BotBase { < nl > < nl > import InternalBot . _ < nl > + import context . dispatcher < nl > < nl > - private implicit val mat = ActorMaterializer ( ) < nl > - < nl > - import context . _ < nl > + private implicit val mat = ActorMaterializer ( ) ( context . system ) < nl > < nl > override protected implicit val timeout = Timeout ( ActorConfig . defaultTimeout ) < nl > < nl > diff - - git a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala < nl > index f4e4ec3 . . 026a4cf 100644 < nl > - - - a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala < nl > + + + b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala < nl > @ @ - 1 , 11 + 1 , 12 @ @ < nl > package im . actor . server . bot < nl > < nl > import im . actor . api . rpc . contacts . ResponseSearchContacts < nl > - import im . actor . api . rpc . messaging . { ResponseLoadHistory , ApiTextMessage } < nl > + import im . actor . api . rpc . messaging . { ApiTextMessage , ResponseLoadHistory } < nl > import im . actor . api . rpc . _ < nl > import im . actor . server . _ < nl > import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl < nl > import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl < nl > + import im . actor . server . db . DbExtension < nl > import im . actor . server . dialog . DialogExtension < nl > import org . scalatest . Inside . _ < nl > < nl > @ @ - 50 , 7 + 51 , 7 @ @ final class ActorBotSpec < nl > < nl > val botOutPeer = getOutPeer ( ActorBot . UserId , authId ) < nl > < nl > - whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , 100 ) ) { rsp ⇒ < nl > + whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , None , 100 ) ) { rsp ⇒ < nl > inside ( rsp ) { < nl > case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ < nl > history . length shouldBe 2 < nl > @ @ - 81 , 7 + 82 , 7 @ @ final class ActorBotSpec < nl > < nl > val botOutPeer = getOutPeer ( ActorBot . UserId , authId ) < nl > < nl > - whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , 100 ) ) { rsp ⇒ < nl > + whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , None , 100 ) ) { rsp ⇒ < nl > inside ( rsp ) { < nl > case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ < nl > history . length shouldBe 2 < nl > diff - - git a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala < nl > index 0cee5e4 . . 201691b 100644 < nl > - - - a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala < nl > + + + b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala < nl > @ @ - 16 , 7 + 16 , 7 @ @ import scala . util . Random < nl > object EchoBot { < nl > val UserId = 100 < nl > < nl > - def start ( ) ( implicit system : ActorSystem ) = system . actorOf ( props , " EchoBot " ) < nl > + def start ( ) ( implicit system : ActorSystem ) = InternalBot . start ( props ) < nl > < nl > private def props = Props ( classOf [ EchoBot ] ) < nl > } < nl > @ @ - 48 , 6 + 48 , 11 @ @ final class EchoBotSpec < nl > private lazy val msgService = MessagingServiceImpl ( ) < nl > private implicit lazy val groupsService = new GroupsServiceImpl ( GroupInviteConfig ( " " ) ) < nl > < nl > + override def beforeAll = { < nl > + super . beforeAll ( ) < nl > + EchoBot . start ( ) < nl > + } < nl > + < nl > def replyPrivate ( ) = { < nl > val ( user , authId , authSid , _ ) = createUser ( ) < nl > < nl > @ @ - 69 , 7 + 74 , 7 @ @ final class EchoBotSpec < nl > < nl > val botOutPeer = getOutPeer ( EchoBot . UserId , authId ) < nl > < nl > - whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , 100 ) ) { rsp ⇒ < nl > + whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , None , 100 ) ) { rsp ⇒ < nl > inside ( rsp ) { < nl > case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ < nl > history . length shouldBe 2 < nl > @ @ - 97 , 7 + 102 , 7 @ @ final class EchoBotSpec < nl > < nl > Thread . sleep ( 2000 ) < nl > < nl > - whenReady ( msgService . handleLoadHistory ( outPeer , 0 , 100 ) ) { rsp ⇒ < nl > + whenReady ( msgService . handleLoadHistory ( outPeer , 0 , None , 100 ) ) { rsp ⇒ < nl > inside ( rsp ) { < nl > case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ < nl > history . length shouldBe 4 < nl > @ @ - 106 , 9 + 111 , 4 @ @ final class EchoBotSpec < nl > } < nl > } < nl > } < nl > - < nl > - override def beforeAll = { < nl > - db / / init lazy db < nl > - EchoBot . start ( ) < nl > - } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index 685a140 . . cb29b53 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 358 , 9 + 358 , 9 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with < nl > case msg : ApiAdvertiseSelf ⇒ < nl > for ( deviceId ← ebMessage . deviceId ) yield { < nl > val newDevice = Device ( deviceId , ebMessage . client , msg . peerSettings , isJoined = deviceId = = callerDeviceId ) < nl > - devices . values . view filterNot ( _ . deviceId = = newDevice . deviceId ) foreach { pairDevice = > < nl > - if ( pairDevice . canPreConnect ( msg . peerSettings ) ) < nl > - connect ( newDevice , pairDevice ) < nl > + devices . values . view filterNot ( _ . deviceId = = newDevice . deviceId ) foreach { pairDevice ⇒ < nl > + if ( pairDevice . canPreConnect ( msg . peerSettings ) ) < nl > + connect ( newDevice , pairDevice ) < nl > } < nl > putDevice ( deviceId , ebMessage . client , newDevice ) < nl > < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala < nl > index 62c8ea5 . . 541a283 100644 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala < nl > + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala < nl > @ @ - 57 , 6 + 57 , 5 @ @ abstract class ActorSuite ( system : ActorSystem = { Kamon . start ( ) ; ActorSpecificat < nl > < nl > override def afterAll ( ) : Unit = { < nl > TestKit . shutdownActorSystem ( system ) < nl > - Await . result ( system . whenTerminated , Duration . Inf ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala < nl > index f23c7f1 . . c520008 100644 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala < nl > + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala < nl > @ @ - 36 , 4 + 36 , 8 @ @ abstract class BaseAppSuite ( _ system : ActorSystem = { < nl > override implicit def patienceConfig : PatienceConfig = < nl > new PatienceConfig ( timeout = Span ( 15 , Seconds ) ) < nl > < nl > + override protected def beforeAll ( ) : Unit = { < nl > + super . beforeAll ( ) < nl > + db < nl > + } < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala 
 index d7f8654 . . 9001514 100644 
 - - - a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala 
 + + + b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala 
 @ @ - 21 , 7 + 21 , 6 @ @ final class ActorBotSpec 
 it should " report about taken username " in takenUsername / / TODO : make it independent from rcv 
 it should " be found by username " in username 
 
 - private lazy val dialogExt = DialogExtension ( system ) 
 private lazy val msgService = MessagingServiceImpl ( ) 
 private lazy val contactsService = new ContactsServiceImpl 
 
 diff - - git a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala 
 index 95682cb . . 67d9f5c 100644 
 - - - a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala 
 + + + b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala 
 @ @ - 44 , 7 + 44 , 6 @ @ final class EchoBotSpec 
 it should " reply with the same message ( private ) " in replyPrivate 
 it should " reply with the same message ( group ) " in replyGroup 
 
 - private lazy val dialogExt = DialogExtension ( system ) 
 private lazy val msgService = MessagingServiceImpl ( ) 
 private implicit lazy val groupsService = new GroupsServiceImpl ( GroupInviteConfig ( " " ) ) 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 index 49ec37a . . f7516a9 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogState . scala 
 @ @ - 3 , 12 + 3 , 11 @ @ package im . actor . server . dialog 
 import java . time . Instant 
 
 import akka . persistence . SnapshotMetadata 
 - import im . actor . server . cqrs . { Event , ProcessorState , TaggedEvent } 
 + import im . actor . server . cqrs . { Event , ProcessorState , TaggedEvent } 
 import im . actor . server . model . Peer 
 
 import scala . collection . SortedSet 
 
 - 
 private [ dialog ] trait DialogEvent extends TaggedEvent { 
 override def tags : Set [ String ] = Set ( " dialog " ) 
 } 
 @ @ - 44 , 14 + 43 , 14 @ @ private [ dialog ] object DialogState { 
 } 
 
 private [ dialog ] final case class DialogState ( 
 - userId : Int , 
 - lastMessageDate : Instant , / / we don ' t use it now anywhere . should we remove it ? 
 - lastReceiveDate : Instant , 
 - lastReadDate : Instant , 
 - counter : Int , 
 - unreadMessages : SortedSet [ UnreadMessage ] , 
 - unreadMessagesMap : Map [ Long , Long ] 
 - ) extends ProcessorState [ DialogState ] { 
 + userId : Int , 
 + lastMessageDate : Instant , / / we don ' t use it now anywhere . should we remove it ? 
 + lastReceiveDate : Instant , 
 + lastReadDate : Instant , 
 + counter : Int , 
 + unreadMessages : SortedSet [ UnreadMessage ] , 
 + unreadMessagesMap : Map [ Long , Long ] 
 + ) extends ProcessorState [ DialogState ] { 
 import DialogEvents . _ 
 
 override def updated ( e : Event ) : DialogState = e match {

NEAREST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala 
 index 3628411 . . 774fb91 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ActorBot . scala 
 @ @ - 17 , 7 + 17 , 7 @ @ object ActorBot { 
 
 val ApiPeer = new ApiPeer ( ApiPeerType . Private , UserId ) 
 
 - def start ( ) ( implicit system : ActorSystem ) = system . actorOf ( props , " ActorBot " ) 
 + def start ( ) ( implicit system : ActorSystem ) = InternalBot . start ( props ) 
 
 private def props = Props ( classOf [ ActorBot ] ) 
 } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 index cb390de . . 305baa2 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . server . bot 
 
 import akka . actor . _ 
 + import akka . cluster . singleton . { ClusterSingletonManager , ClusterSingletonManagerSettings } 
 import akka . pattern . pipe 
 import akka . stream . scaladsl . { Sink , Source } 
 import akka . stream . { ActorMaterializer , OverflowStrategy } 
 @ @ - 16 , 15 + 17 , 20 @ @ private object InternalBot { 
 
 final case class Initialized ( authId : Long , authSid : Int ) 
 
 + def start ( props : Props ) ( implicit system : ActorSystem ) = 
 + system . actorOf ( ClusterSingletonManager . props ( 
 + props , 
 + PoisonPill , 
 + ClusterSingletonManagerSettings ( system ) 
 + ) ) 
 } 
 
 abstract class InternalBot ( userId : Int , nickname : String , name : String , isAdmin : Boolean ) extends BotBase { 
 
 import InternalBot . _ 
 + import context . dispatcher 
 
 - private implicit val mat = ActorMaterializer ( ) 
 - 
 - import context . _ 
 + private implicit val mat = ActorMaterializer ( ) ( context . system ) 
 
 override protected implicit val timeout = Timeout ( ActorConfig . defaultTimeout ) 
 
 diff - - git a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala 
 index f4e4ec3 . . 026a4cf 100644 
 - - - a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala 
 + + + b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / ActorBotSpec . scala 
 @ @ - 1 , 11 + 1 , 12 @ @ 
 package im . actor . server . bot 
 
 import im . actor . api . rpc . contacts . ResponseSearchContacts 
 - import im . actor . api . rpc . messaging . { ResponseLoadHistory , ApiTextMessage } 
 + import im . actor . api . rpc . messaging . { ApiTextMessage , ResponseLoadHistory } 
 import im . actor . api . rpc . _ 
 import im . actor . server . _ 
 import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl 
 import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl 
 + import im . actor . server . db . DbExtension 
 import im . actor . server . dialog . DialogExtension 
 import org . scalatest . Inside . _ 
 
 @ @ - 50 , 7 + 51 , 7 @ @ final class ActorBotSpec 
 
 val botOutPeer = getOutPeer ( ActorBot . UserId , authId ) 
 
 - whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , 100 ) ) { rsp ⇒ 
 + whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , None , 100 ) ) { rsp ⇒ 
 inside ( rsp ) { 
 case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ 
 history . length shouldBe 2 
 @ @ - 81 , 7 + 82 , 7 @ @ final class ActorBotSpec 
 
 val botOutPeer = getOutPeer ( ActorBot . UserId , authId ) 
 
 - whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , 100 ) ) { rsp ⇒ 
 + whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , None , 100 ) ) { rsp ⇒ 
 inside ( rsp ) { 
 case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ 
 history . length shouldBe 2 
 diff - - git a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala 
 index 0cee5e4 . . 201691b 100644 
 - - - a / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala 
 + + + b / actor - server / actor - bots / src / test / scala / im / actor / server / bot / EchoBotSpec . scala 
 @ @ - 16 , 7 + 16 , 7 @ @ import scala . util . Random 
 object EchoBot { 
 val UserId = 100 
 
 - def start ( ) ( implicit system : ActorSystem ) = system . actorOf ( props , " EchoBot " ) 
 + def start ( ) ( implicit system : ActorSystem ) = InternalBot . start ( props ) 
 
 private def props = Props ( classOf [ EchoBot ] ) 
 } 
 @ @ - 48 , 6 + 48 , 11 @ @ final class EchoBotSpec 
 private lazy val msgService = MessagingServiceImpl ( ) 
 private implicit lazy val groupsService = new GroupsServiceImpl ( GroupInviteConfig ( " " ) ) 
 
 + override def beforeAll = { 
 + super . beforeAll ( ) 
 + EchoBot . start ( ) 
 + } 
 + 
 def replyPrivate ( ) = { 
 val ( user , authId , authSid , _ ) = createUser ( ) 
 
 @ @ - 69 , 7 + 74 , 7 @ @ final class EchoBotSpec 
 
 val botOutPeer = getOutPeer ( EchoBot . UserId , authId ) 
 
 - whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , 100 ) ) { rsp ⇒ 
 + whenReady ( msgService . handleLoadHistory ( botOutPeer , 0 , None , 100 ) ) { rsp ⇒ 
 inside ( rsp ) { 
 case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ 
 history . length shouldBe 2 
 @ @ - 97 , 7 + 102 , 7 @ @ final class EchoBotSpec 
 
 Thread . sleep ( 2000 ) 
 
 - whenReady ( msgService . handleLoadHistory ( outPeer , 0 , 100 ) ) { rsp ⇒ 
 + whenReady ( msgService . handleLoadHistory ( outPeer , 0 , None , 100 ) ) { rsp ⇒ 
 inside ( rsp ) { 
 case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ 
 history . length shouldBe 4 
 @ @ - 106 , 9 + 111 , 4 @ @ final class EchoBotSpec 
 } 
 } 
 } 
 - 
 - override def beforeAll = { 
 - db / / init lazy db 
 - EchoBot . start ( ) 
 - } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index 685a140 . . cb29b53 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 358 , 9 + 358 , 9 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with 
 case msg : ApiAdvertiseSelf ⇒ 
 for ( deviceId ← ebMessage . deviceId ) yield { 
 val newDevice = Device ( deviceId , ebMessage . client , msg . peerSettings , isJoined = deviceId = = callerDeviceId ) 
 - devices . values . view filterNot ( _ . deviceId = = newDevice . deviceId ) foreach { pairDevice = > 
 - if ( pairDevice . canPreConnect ( msg . peerSettings ) ) 
 - connect ( newDevice , pairDevice ) 
 + devices . values . view filterNot ( _ . deviceId = = newDevice . deviceId ) foreach { pairDevice ⇒ 
 + if ( pairDevice . canPreConnect ( msg . peerSettings ) ) 
 + connect ( newDevice , pairDevice ) 
 } 
 putDevice ( deviceId , ebMessage . client , newDevice ) 
 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala 
 index 62c8ea5 . . 541a283 100644 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala 
 + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ActorSpecification . scala 
 @ @ - 57 , 6 + 57 , 5 @ @ abstract class ActorSuite ( system : ActorSystem = { Kamon . start ( ) ; ActorSpecificat 
 
 override def afterAll ( ) : Unit = { 
 TestKit . shutdownActorSystem ( system ) 
 - Await . result ( system . whenTerminated , Duration . Inf ) 
 } 
 } 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala 
 index f23c7f1 . . c520008 100644 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala 
 + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala 
 @ @ - 36 , 4 + 36 , 8 @ @ abstract class BaseAppSuite ( _ system : ActorSystem = { 
 override implicit def patienceConfig : PatienceConfig = 
 new PatienceConfig ( timeout = Span ( 15 , Seconds ) ) 
 
 + override protected def beforeAll ( ) : Unit = { 
 + super . beforeAll ( ) 
 + db 
 + } 
 }
