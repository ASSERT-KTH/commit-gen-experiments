BLEU SCORE: 0.037477767366779206

TEST MSG: feat ( server ) : add client ip address to ClientData
GENERATED MSG: Merge branch ' server / master '

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala < nl > index 4bea9f8 . . 1775dd8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala < nl > @ @ - 61 , 7 + 61 , 7 @ @ package object rpc extends PeersImplicits with HistoryImplicits with DialogConve < nl > < nl > private def requireAuth ( implicit clientData : ClientData ) : MaybeAuthorized [ AuthorizedClientData ] = < nl > clientData . authData match { < nl > - case Some ( AuthData ( userId , authSid , appId ) ) ⇒ Authorized ( AuthorizedClientData ( clientData . authId , clientData . sessionId , userId , authSid , appId ) ) < nl > + case Some ( AuthData ( userId , authSid , appId ) ) ⇒ Authorized ( AuthorizedClientData ( clientData . authId , clientData . sessionId , userId , authSid , appId , clientData . remoteAddr ) ) < nl > case None ⇒ NotAuthorized < nl > } < nl > < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala < nl > index b0baeb8 . . 106a5ae 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala < nl > @ @ - 93 , 6 + 93 , 6 @ @ abstract class Frontend ( connIdPrefix : String ) { < nl > < nl > private def nextConnId ( ) : String = s " conn - $ connIdPrefix - $ { connCounter . incrementAndGet ( ) } " < nl > < nl > - protected def mtProtoBlueprint ( serverKeys : Seq [ ServerKey ] ) ( implicit sessionRegion : SessionRegion , system : ActorSystem ) : MTProtoBlueprint . MTProtoFlow = < nl > - MTProtoBlueprint ( nextConnId ( ) , connectionTime , connectionCount , serverKeys ) < nl > + protected def mtProtoBlueprint ( serverKeys : Seq [ ServerKey ] , remoteAddress : String ) ( implicit sessionRegion : SessionRegion , system : ActorSystem ) : MTProtoBlueprint . MTProtoFlow = < nl > + MTProtoBlueprint ( nextConnId ( ) , connectionTime , connectionCount , serverKeys , Option ( remoteAddress ) ) < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala < nl > index 48b912f . . cc9e5d6 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala < nl > @ @ - 23 , 8 + 23 , 8 @ @ object MTProtoBlueprint { < nl > val protoVersions : Set [ Byte ] = Set ( 1 , 2 , 3 ) < nl > val apiMajorVersions : Set [ Byte ] = Set ( 1 ) < nl > < nl > - def apply ( connId : String , connTimeHist : Histogram , connCountMM : MinMaxCounter , serverKeys : Seq [ ServerKey ] ) ( implicit sessionRegion : SessionRegion , system : ActorSystem ) : MTProtoFlow = { < nl > - val sessionClient = system . actorOf ( SessionClient . props ( sessionRegion ) , s " sessionClient - $ connId " ) < nl > + def apply ( connId : String , connTimeHist : Histogram , connCountMM : MinMaxCounter , serverKeys : Seq [ ServerKey ] , remoteAdd : Option [ String ] = None ) ( implicit sessionRegion : SessionRegion , system : ActorSystem ) : MTProtoFlow = { < nl > + val sessionClient = system . actorOf ( SessionClient . props ( sessionRegion ) , s " sessionClient _ $ { connId } _ $ { remoteAdd . getOrElse ( " " ) } " ) < nl > val authManager = system . actorOf ( AuthorizationManager . props ( serverKeys , sessionClient ) , s " authManager - $ connId " ) < nl > val authSource = Source . fromPublisher ( ActorPublisher [ MTProto ] ( authManager ) ) < nl > < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala < nl > index f5e1cee . . 97a79a1 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala < nl > @ @ - 144 , 6 + 144 , 8 @ @ private [ frontend ] final class SessionClient ( sessionRegion : SessionRegion ) < nl > private [ this ] var seq = - 1L < nl > private [ this ] var clientSeq = - 1L < nl > < nl > + val remoteAddress = self . path . name . split ( " _ " ) ( 2 ) < nl > + < nl > def receive : Receive = waitForIds < nl > < nl > def waitForIds : Receive = publisher orElse { < nl > @ @ - 211 , 7 + 213 , 7 @ @ private [ frontend ] final class SessionClient ( sessionRegion : SessionRegion ) < nl > } else { < nl > unpack ( mbBits ) match { < nl > case Success ( rawBits ) ⇒ < nl > - sessionRegion . ref ! SessionEnvelope ( authId , sessionId ) . withHandleMessageBox ( HandleMessageBox ( ByteString . copyFrom ( rawBits . toByteBuffer ) ) ) < nl > + sessionRegion . ref ! SessionEnvelope ( authId , sessionId , Option ( remoteAddress ) ) . withHandleMessageBox ( HandleMessageBox ( ByteString . copyFrom ( rawBits . toByteBuffer ) ) ) < nl > case Failure ( EncryptedPackageDecodeError ) ⇒ < nl > enqueuePackage ( Drop ( 0 , 0 , " Cannot parse EncryptedPackage " ) ) < nl > onCompleteThenStop ( ) < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala < nl > index b4850b1 . . ab83846 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala < nl > @ @ - 24 , 7 + 24 , 7 @ @ object TcpFrontend extends Frontend ( " tcp " ) { < nl > case ( conn @ Tcp . IncomingConnection ( localAddress , remoteAddress , flow ) ) ⇒ < nl > log . debug ( " New TCP connection from { } " , localAddress ) < nl > < nl > - val mtProto = mtProtoBlueprint ( serverKeys ) < nl > + val mtProto = mtProtoBlueprint ( serverKeys , remoteAddress . getAddress ( ) . getHostAddress ( ) ) < nl > flow . joinMat ( mtProto ) ( Keep . right ) . run ( ) < nl > } ) < nl > . run ( ) < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala < nl > index f168d11 . . 102c5f0 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala < nl > @ @ - 42 , 7 + 42 , 7 @ @ object WsFrontend extends Frontend ( " ws " ) { < nl > connections runForeach { conn ⇒ < nl > log . debug ( " New HTTP Connection { } " , conn . remoteAddress ) < nl > < nl > - conn . handleWith ( route ( mtProtoBlueprint ( serverKeys ) ) ) < nl > + conn . handleWith ( route ( mtProtoBlueprint ( serverKeys , conn . remoteAddress . getAddress ( ) . getHostAddress ( ) ) ) ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > index 1126dab . . 35cd21c 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > @ @ - 192 , 7 + 192 , 7 @ @ trait AuthHelpers extends Helpers { < nl > for { < nl > _ ← userExt . auth ( userId , clientData . authId ) < nl > ack ← sessionRegion . ref < nl > - . ask ( SessionEnvelope ( clientData . authId , clientData . sessionId ) . withAuthorizeUser ( AuthorizeUser ( userId , authSid ) ) ) < nl > + . ask ( SessionEnvelope ( clientData . authId , clientData . sessionId , clientData . remoteAddr ) . withAuthorizeUser ( AuthorizeUser ( userId , authSid ) ) ) < nl > . mapTo [ AuthorizeUserAck ] < nl > } yield ack < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > index fe3ebbf . . dbc6d57 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > @ @ - 40 , 7 + 40 , 7 @ @ final class SequenceServiceImpl ( config : SequenceServiceConfig ) ( < nl > private val maxDifferenceSize : Long = config . maxDifferenceSize < nl > < nl > private def subscribeToSeq ( opts : Seq [ ApiUpdateOptimization . Value ] ) ( implicit client : AuthorizedClientData ) : Unit = { < nl > - sessionRegion . ref ! SessionEnvelope ( client . authId , client . sessionId ) < nl > + sessionRegion . ref ! SessionEnvelope ( client . authId , client . sessionId , client . remoteAddr ) < nl > . withSubscribeToSeq ( SubscribeToSeq ( opts map ( _ . id ) ) ) < nl > } < nl > < nl > @ @ - 120 , 7 + 120 , 7 @ @ final class SequenceServiceImpl ( config : SequenceServiceConfig ) ( < nl > / / FIXME : # security check access hashes < nl > val userIds = users . map ( _ . userId ) . toSet < nl > < nl > - sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) < nl > + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId , clientData . remoteAddr ) < nl > . withSubscribeToOnline ( SubscribeToOnline ( userIds . toSeq ) ) < nl > } < nl > } < nl > @ @ - 133 , 7 + 133 , 7 @ @ final class SequenceServiceImpl ( config : SequenceServiceConfig ) ( < nl > / / FIXME : # security check access hashes < nl > val userIds = users . map ( _ . userId ) . toSet < nl > < nl > - sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) < nl > + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId , clientData . remoteAddr ) < nl > . withSubscribeFromOnline ( SubscribeFromOnline ( userIds . toSeq ) ) < nl > } < nl > } < nl > @ @ - 142 , 7 + 142 , 7 @ @ final class SequenceServiceImpl ( config : SequenceServiceConfig ) ( < nl > Future . successful ( Ok ( ResponseVoid ) ) andThen { < nl > case _ ⇒ < nl > / / FIXME : # security check access hashes < nl > - sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) < nl > + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId , clientData . remoteAddr ) < nl > . withSubscribeToGroupOnline ( SubscribeToGroupOnline ( groups . map ( _ . groupId ) ) ) < nl > } < nl > } < nl > @ @ - 151 , 7 + 151 , 7 @ @ final class SequenceServiceImpl ( config : SequenceServiceConfig ) ( < nl > Future . successful ( Ok ( ResponseVoid ) ) andThen { < nl > case _ ⇒ < nl > / / FIXME : # security check access hashes < nl > - sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) < nl > + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId , clientData . remoteAddr ) < nl > . withSubscribeFromGroupOnline ( SubscribeFromGroupOnline ( groups . map ( _ . groupId ) ) ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala < nl > index 8941fdd . . e3a90ce 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala < nl > @ @ - 23 , 7 + 23 , 7 @ @ final class ValuesServiceImpl ( implicit system : ActorSystem , sessionRegion : Sessi < nl > ) : Future [ HandlerResult [ ResponseLoadSyncedSet ] ] = < nl > authorized ( clientData ) { client ⇒ < nl > sessionRegion . ref ! < nl > - SessionEnvelope ( clientData . authId , clientData . sessionId ) < nl > + SessionEnvelope ( clientData . authId , clientData . sessionId , clientData . remoteAddr ) < nl > . withSubscribeToWeak ( SubscribeToWeak ( Some ( valuesExt . syncedSet . weakGroup ( setName ) ) ) ) < nl > < nl > for { < nl > diff - - git a / actor - server / actor - session - messages / src / main / protobuf / session . proto b / actor - server / actor - session - messages / src / main / protobuf / session . proto < nl > index 9e47f64 . . 288b8f8 100644 < nl > - - - a / actor - server / actor - session - messages / src / main / protobuf / session . proto < nl > + + + b / actor - server / actor - session - messages / src / main / protobuf / session . proto < nl > @ @ - 25 , 6 + 25 , 7 @ @ message SessionEnvelope { < nl > UnsubscribeFromWeak unsubscribe _ from _ weak = 11 ; < nl > GetUpdateOptimizations get _ update _ optimizations = 12 ; < nl > } < nl > + optional string remote _ addr = 13 ; < nl > } < nl > < nl > message HandleMessageBox { < nl > diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala < nl > index 69a3767 . . 89c0575 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala < nl > @ @ - 44 , 15 + 44 , 15 @ @ object SessionConfig { < nl > object Session { < nl > < nl > private [ this ] val extractEntityId : ShardRegion . ExtractEntityId = { < nl > - case env @ SessionEnvelope ( authId , sessionId , payload ) ⇒ < nl > + case env @ SessionEnvelope ( authId , sessionId , clientAddr , payload ) ⇒ < nl > Try ( env . getField ( SessionEnvelope . descriptor . findFieldByNumber ( payload . number ) ) ) match { < nl > - case Success ( any ) ⇒ s " $ { authId } _ $ sessionId " → any < nl > + case Success ( any ) ⇒ s " $ { authId } _ $ { sessionId } _ $ { clientAddr . getOrElse ( " " ) } " → any < nl > case _ ⇒ throw new RuntimeException ( s " Empty payload $ env " ) < nl > } < nl > } < nl > < nl > private [ this ] val extractShardId : ShardRegion . ExtractShardId = { < nl > - case SessionEnvelope ( authId , sessionId , _ ) ⇒ ( authId % 10 ) . toString / / TODO : configurable < nl > + case SessionEnvelope ( authId , sessionId , _ , _ ) ⇒ ( authId % 10 ) . toString / / TODO : configurable < nl > } < nl > < nl > private val typeName = " Session " < nl > @ @ - 101 , 8 + 101 , 8 @ @ final private class Session ( implicit config : SessionConfig , materializer : Materi < nl > private [ this ] var clients = immutable . Set . empty [ ActorRef ] < nl > private [ this ] var updateOptimizations = immutable . Set . empty [ Int ] < nl > < nl > - private val ( authId , sessionId ) = self . path . name . split ( " _ " ) . toList match { < nl > - case a : : s : : Nil ⇒ ( a . toLong , s . toLong ) < nl > + private val ( authId , sessionId , remoteAddr ) = self . path . name . split ( " _ " ) . toList match { < nl > + case a : : s : : r : : Nil ⇒ ( a . toLong , s . toLong , r . toString ) < nl > case _ ⇒ < nl > val e = new RuntimeException ( " Wrong actor name " ) < nl > log . error ( e , e . getMessage ) < nl > @ @ - 193 , 7 + 193 , 7 @ @ final private class Session ( implicit config : SessionConfig , materializer : Materi < nl > } ) . run ( ) < nl > < nl > / / sessionMessagePublisher ! SessionStreamMessage . SendProtoMessage ( NewSession ( sessionId , mb . messageId ) ) < nl > - sessionMessagePublisher ! Tuple2 ( mb , ClientData ( authId , sessionId , authData ) ) < nl > + sessionMessagePublisher ! Tuple2 ( mb , ClientData ( authId , sessionId , authData , Option ( remoteAddr ) ) ) < nl > < nl > unstashAll ( ) < nl > context . become ( resolved ( sessionMessagePublisher , reSender ) ) < nl > @ @ - 208 , 7 + 208 , 7 @ @ final private class Session ( implicit config : SessionConfig , materializer : Materi < nl > recordClient ( sender ( ) , reSender ) < nl > < nl > withValidMessageBox ( messageBoxBytes . toByteArray ) { mb ⇒ < nl > - publisher ! Tuple2 ( mb , ClientData ( authId , sessionId , authData ) ) < nl > + publisher ! Tuple2 ( mb , ClientData ( authId , sessionId , authData , Option ( remoteAddr ) ) ) < nl > } < nl > case cmd : SubscribeCommand ⇒ < nl > idleControl . keepAlive ( ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala < nl > index d0017d7 . . 92b8033 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala < nl > @ @ - 1028 , 7 + 1028 , 7 @ @ final class AuthServiceSpec < nl > < nl > private def sendSessionHello ( authId : Long , sessionId : Long ) : Unit = { < nl > val message = HandleMessageBox ( ByteString . copyFrom ( MessageBoxCodec . encode ( MessageBox ( Random . nextLong ( ) , SessionHello ) ) . require . toByteBuffer ) ) < nl > - sessionRegion . ref ! SessionEnvelope ( authId , sessionId ) . withHandleMessageBox ( message ) < nl > + sessionRegion . ref ! SessionEnvelope ( authId , sessionId , None ) . withHandleMessageBox ( message ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpecHelpers . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpecHelpers . scala < nl > index 135a57a . . feba787 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpecHelpers . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpecHelpers . scala < nl > @ @ - 155 , 7 + 155 , 8 @ @ trait SessionSpecHelpers extends AbstractPatienceConfiguration with Matchers { < nl > session . tell ( < nl > SessionEnvelope ( < nl > authId , < nl > - sessionId < nl > + sessionId , < nl > + None < nl > ) . withPayload ( payload ) , < nl > probe . ref < nl > ) < nl > diff - - git a / actor - server / project / plugins . sbt b / actor - server / project / plugins . sbt < nl > index de07d27 . . 08c32a8 100644 < nl > - - - a / actor - server / project / plugins . sbt < nl > + + + b / actor - server / project / plugins . sbt < nl > @ @ - 12 , 7 + 12 , 7 @ @ addSbtPlugin ( " net . virtual - void " % " sbt - dependency - graph " % " 0 . 7 . 5 " ) < nl > < nl > addSbtPlugin ( " io . spray " % " sbt - revolver " % " 0 . 7 . 2 " ) < nl > < nl > - addSbtPlugin ( " im . actor " % % " sbt - actor - api " % " 0 . 7 . 16 " ) < nl > + addSbtPlugin ( " im . actor " % % " sbt - actor - api " % " 0 . 7 . 17 " ) < nl > < nl > addSbtPlugin ( " com . trueaccord . scalapb " % " sbt - scalapb " % " 0 . 5 . 21 " )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / IlectroUser . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / IlectroUser . scala < nl > deleted file mode 100644 < nl > index 189d99e . . 0000000 < nl > - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / IlectroUser . scala < nl > + + + / dev / null < nl > @ @ - 1 , 5 + 0 , 0 @ @ < nl > - package im . actor . server . models . llectro < nl > - < nl > - import java . util . UUID < nl > - < nl > - case class LlectroUser ( userId : Int , uuid : UUID , name : String ) < nl > diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / Interest . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / Interest . scala < nl > deleted file mode 100644 < nl > index d5e361a . . 0000000 < nl > - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / Interest . scala < nl > + + + / dev / null < nl > @ @ - 1 , 3 + 0 , 0 @ @ < nl > - package im . actor . server . models . llectro < nl > - < nl > - case class Interest ( id : Int , name : String , parentId : Int , fullPath : String , level : Int ) < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / LlectroDevice . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / LlectroDevice . scala < nl > deleted file mode 100644 < nl > index 268056a . . 0000000 < nl > - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / LlectroDevice . scala < nl > + + + / dev / null < nl > @ @ - 1 , 3 + 0 , 0 @ @ < nl > - package im . actor . server . models . llectro < nl > - < nl > - case class LlectroDevice ( authId : Long , screenWidth : Int , screenHeight : Int ) < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / UserInterest . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / UserInterest . scala < nl > deleted file mode 100644 < nl > index 963e5df . . 0000000 < nl > - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / UserInterest . scala < nl > + + + / dev / null < nl > @ @ - 1 , 3 + 0 , 0 @ @ < nl > - package im . actor . server . models . llectro < nl > - < nl > - case class UserInterest ( userId : Int , interestId : Int ) < nl > \ No newline at end of file < nl > diff - - git a / actor - server / bin / merge - to - master b / actor - server / bin / merge - to - master < nl > new file mode 100755 < nl > index 0000000 . . 57bea44 < nl > - - - / dev / null < nl > + + + b / actor - server / bin / merge - to - master < nl > @ @ - 0 , 0 + 1 , 15 @ @ < nl > + # ! / usr / bin / env bash < nl > + < nl > + set - eu < nl > + < nl > + git diff - index - - quiet - - cached HEAD < nl > + < nl > + if [ $ ? - eq 0 ] < nl > + then < nl > + git checkout master < nl > + git pull - - rebase origin master < nl > + git merge server / master < nl > + git push origin master < nl > + else < nl > + echo " Branch is dirty " < nl > + fi < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index 0ae9ff5 . . 1d00c84 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 38 , 7 + 38 , 6 @ @ object Dependencies { < nl > < nl > val concmap = " com . googlecode . concurrentlinkedhashmap " % " concurrentlinkedhashmap - lru " % " 1 . 4 . 2 " < nl > val caffeine = " com . github . ben - manes . caffeine " % " caffeine " % " 1 . 2 . 0 " < nl > - val eaioUuid = " com . eaio . uuid " % " uuid " % " 3 . 4 " < nl > < nl > val cats = " org . spire - math " % % " cats " % V . cats < nl > < nl > @ @ - 166 , 7 + 165 , 7 @ @ object Dependencies { < nl > < nl > val codecs = shared + + Seq ( scalazCore , scodecBits , scodecCore ) < nl > < nl > - val models = shared + + Seq ( eaioUuid , scodecBits , scodecCore , jodaTime , jodaConvert , slickPg ) < nl > + val models = shared + + Seq ( scodecBits , scodecCore , jodaTime , jodaConvert , slickPg ) < nl > < nl > val frontend = shared + + Seq ( < nl > akkaSlf4j , akkaActor , akkaStream ,

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala 
 index 4bea9f8 . . 1775dd8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala 
 @ @ - 61 , 7 + 61 , 7 @ @ package object rpc extends PeersImplicits with HistoryImplicits with DialogConve 
 
 private def requireAuth ( implicit clientData : ClientData ) : MaybeAuthorized [ AuthorizedClientData ] = 
 clientData . authData match { 
 - case Some ( AuthData ( userId , authSid , appId ) ) ⇒ Authorized ( AuthorizedClientData ( clientData . authId , clientData . sessionId , userId , authSid , appId ) ) 
 + case Some ( AuthData ( userId , authSid , appId ) ) ⇒ Authorized ( AuthorizedClientData ( clientData . authId , clientData . sessionId , userId , authSid , appId , clientData . remoteAddr ) ) 
 case None ⇒ NotAuthorized 
 } 
 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala 
 index b0baeb8 . . 106a5ae 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala 
 @ @ - 93 , 6 + 93 , 6 @ @ abstract class Frontend ( connIdPrefix : String ) { 
 
 private def nextConnId ( ) : String = s " conn - $ connIdPrefix - $ { connCounter . incrementAndGet ( ) } " 
 
 - protected def mtProtoBlueprint ( serverKeys : Seq [ ServerKey ] ) ( implicit sessionRegion : SessionRegion , system : ActorSystem ) : MTProtoBlueprint . MTProtoFlow = 
 - MTProtoBlueprint ( nextConnId ( ) , connectionTime , connectionCount , serverKeys ) 
 + protected def mtProtoBlueprint ( serverKeys : Seq [ ServerKey ] , remoteAddress : String ) ( implicit sessionRegion : SessionRegion , system : ActorSystem ) : MTProtoBlueprint . MTProtoFlow = 
 + MTProtoBlueprint ( nextConnId ( ) , connectionTime , connectionCount , serverKeys , Option ( remoteAddress ) ) 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala 
 index 48b912f . . cc9e5d6 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / MTProtoBlueprint . scala 
 @ @ - 23 , 8 + 23 , 8 @ @ object MTProtoBlueprint { 
 val protoVersions : Set [ Byte ] = Set ( 1 , 2 , 3 ) 
 val apiMajorVersions : Set [ Byte ] = Set ( 1 ) 
 
 - def apply ( connId : String , connTimeHist : Histogram , connCountMM : MinMaxCounter , serverKeys : Seq [ ServerKey ] ) ( implicit sessionRegion : SessionRegion , system : ActorSystem ) : MTProtoFlow = { 
 - val sessionClient = system . actorOf ( SessionClient . props ( sessionRegion ) , s " sessionClient - $ connId " ) 
 + def apply ( connId : String , connTimeHist : Histogram , connCountMM : MinMaxCounter , serverKeys : Seq [ ServerKey ] , remoteAdd : Option [ String ] = None ) ( implicit sessionRegion : SessionRegion , system : ActorSystem ) : MTProtoFlow = { 
 + val sessionClient = system . actorOf ( SessionClient . props ( sessionRegion ) , s " sessionClient _ $ { connId } _ $ { remoteAdd . getOrElse ( " " ) } " ) 
 val authManager = system . actorOf ( AuthorizationManager . props ( serverKeys , sessionClient ) , s " authManager - $ connId " ) 
 val authSource = Source . fromPublisher ( ActorPublisher [ MTProto ] ( authManager ) ) 
 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala 
 index f5e1cee . . 97a79a1 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala 
 @ @ - 144 , 6 + 144 , 8 @ @ private [ frontend ] final class SessionClient ( sessionRegion : SessionRegion ) 
 private [ this ] var seq = - 1L 
 private [ this ] var clientSeq = - 1L 
 
 + val remoteAddress = self . path . name . split ( " _ " ) ( 2 ) 
 + 
 def receive : Receive = waitForIds 
 
 def waitForIds : Receive = publisher orElse { 
 @ @ - 211 , 7 + 213 , 7 @ @ private [ frontend ] final class SessionClient ( sessionRegion : SessionRegion ) 
 } else { 
 unpack ( mbBits ) match { 
 case Success ( rawBits ) ⇒ 
 - sessionRegion . ref ! SessionEnvelope ( authId , sessionId ) . withHandleMessageBox ( HandleMessageBox ( ByteString . copyFrom ( rawBits . toByteBuffer ) ) ) 
 + sessionRegion . ref ! SessionEnvelope ( authId , sessionId , Option ( remoteAddress ) ) . withHandleMessageBox ( HandleMessageBox ( ByteString . copyFrom ( rawBits . toByteBuffer ) ) ) 
 case Failure ( EncryptedPackageDecodeError ) ⇒ 
 enqueuePackage ( Drop ( 0 , 0 , " Cannot parse EncryptedPackage " ) ) 
 onCompleteThenStop ( ) 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala 
 index b4850b1 . . ab83846 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / TcpFrontend . scala 
 @ @ - 24 , 7 + 24 , 7 @ @ object TcpFrontend extends Frontend ( " tcp " ) { 
 case ( conn @ Tcp . IncomingConnection ( localAddress , remoteAddress , flow ) ) ⇒ 
 log . debug ( " New TCP connection from { } " , localAddress ) 
 
 - val mtProto = mtProtoBlueprint ( serverKeys ) 
 + val mtProto = mtProtoBlueprint ( serverKeys , remoteAddress . getAddress ( ) . getHostAddress ( ) ) 
 flow . joinMat ( mtProto ) ( Keep . right ) . run ( ) 
 } ) 
 . run ( ) 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala 
 index f168d11 . . 102c5f0 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / WsFrontend . scala 
 @ @ - 42 , 7 + 42 , 7 @ @ object WsFrontend extends Frontend ( " ws " ) { 
 connections runForeach { conn ⇒ 
 log . debug ( " New HTTP Connection { } " , conn . remoteAddress ) 
 
 - conn . handleWith ( route ( mtProtoBlueprint ( serverKeys ) ) ) 
 + conn . handleWith ( route ( mtProtoBlueprint ( serverKeys , conn . remoteAddress . getAddress ( ) . getHostAddress ( ) ) ) ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 index 1126dab . . 35cd21c 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 @ @ - 192 , 7 + 192 , 7 @ @ trait AuthHelpers extends Helpers { 
 for { 
 _ ← userExt . auth ( userId , clientData . authId ) 
 ack ← sessionRegion . ref 
 - . ask ( SessionEnvelope ( clientData . authId , clientData . sessionId ) . withAuthorizeUser ( AuthorizeUser ( userId , authSid ) ) ) 
 + . ask ( SessionEnvelope ( clientData . authId , clientData . sessionId , clientData . remoteAddr ) . withAuthorizeUser ( AuthorizeUser ( userId , authSid ) ) ) 
 . mapTo [ AuthorizeUserAck ] 
 } yield ack 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 index fe3ebbf . . dbc6d57 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 @ @ - 40 , 7 + 40 , 7 @ @ final class SequenceServiceImpl ( config : SequenceServiceConfig ) ( 
 private val maxDifferenceSize : Long = config . maxDifferenceSize 
 
 private def subscribeToSeq ( opts : Seq [ ApiUpdateOptimization . Value ] ) ( implicit client : AuthorizedClientData ) : Unit = { 
 - sessionRegion . ref ! SessionEnvelope ( client . authId , client . sessionId ) 
 + sessionRegion . ref ! SessionEnvelope ( client . authId , client . sessionId , client . remoteAddr ) 
 . withSubscribeToSeq ( SubscribeToSeq ( opts map ( _ . id ) ) ) 
 } 
 
 @ @ - 120 , 7 + 120 , 7 @ @ final class SequenceServiceImpl ( config : SequenceServiceConfig ) ( 
 / / FIXME : # security check access hashes 
 val userIds = users . map ( _ . userId ) . toSet 
 
 - sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) 
 + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId , clientData . remoteAddr ) 
 . withSubscribeToOnline ( SubscribeToOnline ( userIds . toSeq ) ) 
 } 
 } 
 @ @ - 133 , 7 + 133 , 7 @ @ final class SequenceServiceImpl ( config : SequenceServiceConfig ) ( 
 / / FIXME : # security check access hashes 
 val userIds = users . map ( _ . userId ) . toSet 
 
 - sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) 
 + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId , clientData . remoteAddr ) 
 . withSubscribeFromOnline ( SubscribeFromOnline ( userIds . toSeq ) ) 
 } 
 } 
 @ @ - 142 , 7 + 142 , 7 @ @ final class SequenceServiceImpl ( config : SequenceServiceConfig ) ( 
 Future . successful ( Ok ( ResponseVoid ) ) andThen { 
 case _ ⇒ 
 / / FIXME : # security check access hashes 
 - sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) 
 + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId , clientData . remoteAddr ) 
 . withSubscribeToGroupOnline ( SubscribeToGroupOnline ( groups . map ( _ . groupId ) ) ) 
 } 
 } 
 @ @ - 151 , 7 + 151 , 7 @ @ final class SequenceServiceImpl ( config : SequenceServiceConfig ) ( 
 Future . successful ( Ok ( ResponseVoid ) ) andThen { 
 case _ ⇒ 
 / / FIXME : # security check access hashes 
 - sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) 
 + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId , clientData . remoteAddr ) 
 . withSubscribeFromGroupOnline ( SubscribeFromGroupOnline ( groups . map ( _ . groupId ) ) ) 
 } 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala 
 index 8941fdd . . e3a90ce 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / values / ValuesServiceImpl . scala 
 @ @ - 23 , 7 + 23 , 7 @ @ final class ValuesServiceImpl ( implicit system : ActorSystem , sessionRegion : Sessi 
 ) : Future [ HandlerResult [ ResponseLoadSyncedSet ] ] = 
 authorized ( clientData ) { client ⇒ 
 sessionRegion . ref ! 
 - SessionEnvelope ( clientData . authId , clientData . sessionId ) 
 + SessionEnvelope ( clientData . authId , clientData . sessionId , clientData . remoteAddr ) 
 . withSubscribeToWeak ( SubscribeToWeak ( Some ( valuesExt . syncedSet . weakGroup ( setName ) ) ) ) 
 
 for { 
 diff - - git a / actor - server / actor - session - messages / src / main / protobuf / session . proto b / actor - server / actor - session - messages / src / main / protobuf / session . proto 
 index 9e47f64 . . 288b8f8 100644 
 - - - a / actor - server / actor - session - messages / src / main / protobuf / session . proto 
 + + + b / actor - server / actor - session - messages / src / main / protobuf / session . proto 
 @ @ - 25 , 6 + 25 , 7 @ @ message SessionEnvelope { 
 UnsubscribeFromWeak unsubscribe _ from _ weak = 11 ; 
 GetUpdateOptimizations get _ update _ optimizations = 12 ; 
 } 
 + optional string remote _ addr = 13 ; 
 } 
 
 message HandleMessageBox { 
 diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala 
 index 69a3767 . . 89c0575 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala 
 @ @ - 44 , 15 + 44 , 15 @ @ object SessionConfig { 
 object Session { 
 
 private [ this ] val extractEntityId : ShardRegion . ExtractEntityId = { 
 - case env @ SessionEnvelope ( authId , sessionId , payload ) ⇒ 
 + case env @ SessionEnvelope ( authId , sessionId , clientAddr , payload ) ⇒ 
 Try ( env . getField ( SessionEnvelope . descriptor . findFieldByNumber ( payload . number ) ) ) match { 
 - case Success ( any ) ⇒ s " $ { authId } _ $ sessionId " → any 
 + case Success ( any ) ⇒ s " $ { authId } _ $ { sessionId } _ $ { clientAddr . getOrElse ( " " ) } " → any 
 case _ ⇒ throw new RuntimeException ( s " Empty payload $ env " ) 
 } 
 } 
 
 private [ this ] val extractShardId : ShardRegion . ExtractShardId = { 
 - case SessionEnvelope ( authId , sessionId , _ ) ⇒ ( authId % 10 ) . toString / / TODO : configurable 
 + case SessionEnvelope ( authId , sessionId , _ , _ ) ⇒ ( authId % 10 ) . toString / / TODO : configurable 
 } 
 
 private val typeName = " Session " 
 @ @ - 101 , 8 + 101 , 8 @ @ final private class Session ( implicit config : SessionConfig , materializer : Materi 
 private [ this ] var clients = immutable . Set . empty [ ActorRef ] 
 private [ this ] var updateOptimizations = immutable . Set . empty [ Int ] 
 
 - private val ( authId , sessionId ) = self . path . name . split ( " _ " ) . toList match { 
 - case a : : s : : Nil ⇒ ( a . toLong , s . toLong ) 
 + private val ( authId , sessionId , remoteAddr ) = self . path . name . split ( " _ " ) . toList match { 
 + case a : : s : : r : : Nil ⇒ ( a . toLong , s . toLong , r . toString ) 
 case _ ⇒ 
 val e = new RuntimeException ( " Wrong actor name " ) 
 log . error ( e , e . getMessage ) 
 @ @ - 193 , 7 + 193 , 7 @ @ final private class Session ( implicit config : SessionConfig , materializer : Materi 
 } ) . run ( ) 
 
 / / sessionMessagePublisher ! SessionStreamMessage . SendProtoMessage ( NewSession ( sessionId , mb . messageId ) ) 
 - sessionMessagePublisher ! Tuple2 ( mb , ClientData ( authId , sessionId , authData ) ) 
 + sessionMessagePublisher ! Tuple2 ( mb , ClientData ( authId , sessionId , authData , Option ( remoteAddr ) ) ) 
 
 unstashAll ( ) 
 context . become ( resolved ( sessionMessagePublisher , reSender ) ) 
 @ @ - 208 , 7 + 208 , 7 @ @ final private class Session ( implicit config : SessionConfig , materializer : Materi 
 recordClient ( sender ( ) , reSender ) 
 
 withValidMessageBox ( messageBoxBytes . toByteArray ) { mb ⇒ 
 - publisher ! Tuple2 ( mb , ClientData ( authId , sessionId , authData ) ) 
 + publisher ! Tuple2 ( mb , ClientData ( authId , sessionId , authData , Option ( remoteAddr ) ) ) 
 } 
 case cmd : SubscribeCommand ⇒ 
 idleControl . keepAlive ( ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala 
 index d0017d7 . . 92b8033 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala 
 @ @ - 1028 , 7 + 1028 , 7 @ @ final class AuthServiceSpec 
 
 private def sendSessionHello ( authId : Long , sessionId : Long ) : Unit = { 
 val message = HandleMessageBox ( ByteString . copyFrom ( MessageBoxCodec . encode ( MessageBox ( Random . nextLong ( ) , SessionHello ) ) . require . toByteBuffer ) ) 
 - sessionRegion . ref ! SessionEnvelope ( authId , sessionId ) . withHandleMessageBox ( message ) 
 + sessionRegion . ref ! SessionEnvelope ( authId , sessionId , None ) . withHandleMessageBox ( message ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpecHelpers . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpecHelpers . scala 
 index 135a57a . . feba787 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpecHelpers . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpecHelpers . scala 
 @ @ - 155 , 7 + 155 , 8 @ @ trait SessionSpecHelpers extends AbstractPatienceConfiguration with Matchers { 
 session . tell ( 
 SessionEnvelope ( 
 authId , 
 - sessionId 
 + sessionId , 
 + None 
 ) . withPayload ( payload ) , 
 probe . ref 
 ) 
 diff - - git a / actor - server / project / plugins . sbt b / actor - server / project / plugins . sbt 
 index de07d27 . . 08c32a8 100644 
 - - - a / actor - server / project / plugins . sbt 
 + + + b / actor - server / project / plugins . sbt 
 @ @ - 12 , 7 + 12 , 7 @ @ addSbtPlugin ( " net . virtual - void " % " sbt - dependency - graph " % " 0 . 7 . 5 " ) 
 
 addSbtPlugin ( " io . spray " % " sbt - revolver " % " 0 . 7 . 2 " ) 
 
 - addSbtPlugin ( " im . actor " % % " sbt - actor - api " % " 0 . 7 . 16 " ) 
 + addSbtPlugin ( " im . actor " % % " sbt - actor - api " % " 0 . 7 . 17 " ) 
 
 addSbtPlugin ( " com . trueaccord . scalapb " % " sbt - scalapb " % " 0 . 5 . 21 " )

NEAREST DIFF:
diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / IlectroUser . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / IlectroUser . scala 
 deleted file mode 100644 
 index 189d99e . . 0000000 
 - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / IlectroUser . scala 
 + + + / dev / null 
 @ @ - 1 , 5 + 0 , 0 @ @ 
 - package im . actor . server . models . llectro 
 - 
 - import java . util . UUID 
 - 
 - case class LlectroUser ( userId : Int , uuid : UUID , name : String ) 
 diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / Interest . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / Interest . scala 
 deleted file mode 100644 
 index d5e361a . . 0000000 
 - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / Interest . scala 
 + + + / dev / null 
 @ @ - 1 , 3 + 0 , 0 @ @ 
 - package im . actor . server . models . llectro 
 - 
 - case class Interest ( id : Int , name : String , parentId : Int , fullPath : String , level : Int ) 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / LlectroDevice . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / LlectroDevice . scala 
 deleted file mode 100644 
 index 268056a . . 0000000 
 - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / LlectroDevice . scala 
 + + + / dev / null 
 @ @ - 1 , 3 + 0 , 0 @ @ 
 - package im . actor . server . models . llectro 
 - 
 - case class LlectroDevice ( authId : Long , screenWidth : Int , screenHeight : Int ) 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / UserInterest . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / UserInterest . scala 
 deleted file mode 100644 
 index 963e5df . . 0000000 
 - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / llectro / UserInterest . scala 
 + + + / dev / null 
 @ @ - 1 , 3 + 0 , 0 @ @ 
 - package im . actor . server . models . llectro 
 - 
 - case class UserInterest ( userId : Int , interestId : Int ) 
 \ No newline at end of file 
 diff - - git a / actor - server / bin / merge - to - master b / actor - server / bin / merge - to - master 
 new file mode 100755 
 index 0000000 . . 57bea44 
 - - - / dev / null 
 + + + b / actor - server / bin / merge - to - master 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + # ! / usr / bin / env bash 
 + 
 + set - eu 
 + 
 + git diff - index - - quiet - - cached HEAD 
 + 
 + if [ $ ? - eq 0 ] 
 + then 
 + git checkout master 
 + git pull - - rebase origin master 
 + git merge server / master 
 + git push origin master 
 + else 
 + echo " Branch is dirty " 
 + fi 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index 0ae9ff5 . . 1d00c84 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 38 , 7 + 38 , 6 @ @ object Dependencies { 
 
 val concmap = " com . googlecode . concurrentlinkedhashmap " % " concurrentlinkedhashmap - lru " % " 1 . 4 . 2 " 
 val caffeine = " com . github . ben - manes . caffeine " % " caffeine " % " 1 . 2 . 0 " 
 - val eaioUuid = " com . eaio . uuid " % " uuid " % " 3 . 4 " 
 
 val cats = " org . spire - math " % % " cats " % V . cats 
 
 @ @ - 166 , 7 + 165 , 7 @ @ object Dependencies { 
 
 val codecs = shared + + Seq ( scalazCore , scodecBits , scodecCore ) 
 
 - val models = shared + + Seq ( eaioUuid , scodecBits , scodecCore , jodaTime , jodaConvert , slickPg ) 
 + val models = shared + + Seq ( scodecBits , scodecCore , jodaTime , jodaConvert , slickPg ) 
 
 val frontend = shared + + Seq ( 
 akkaSlf4j , akkaActor , akkaStream ,
