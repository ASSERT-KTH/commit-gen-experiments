BLEU SCORE: 0.02286956778061902

TEST MSG: fix ( server : activation ) : can ' t login immediately after login on other device
GENERATED MSG: Merge commit ' e6196baa3a380d924b6d3ccd62d37e2ee590ea14 '

TEST DIFF (one line): diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala < nl > index f6c8f68 . . 77d0004 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala < nl > @ @ - 13 , 14 + 13 , 18 @ @ object ActivationStateActor { < nl > < nl > private [ activation ] case class SendAck ( result : CodeFailure Xor Unit ) < nl > < nl > - private [ activation ] final case class ForgetSentCode ( code : Code ) < nl > + object ForgetSentCode { < nl > + def phone ( phone : Long ) = ForgetSentCode ( phone ) < nl > + def email ( email : String ) = ForgetSentCode ( email ) < nl > + } < nl > + private [ activation ] final case class ForgetSentCode [ T ] ( codeId : T ) < nl > < nl > def props [ Id , CodeType < : Code ] ( repeatLimit : Duration , sendAction : CodeType ⇒ Future [ Unit ] , id : CodeType ⇒ Id ) = < nl > Props ( new ActivationStateActor ( repeatLimit , sendAction , id ) ) < nl > < nl > } < nl > < nl > - class ActivationStateActor [ Id , CodeType < : Code ] ( repeatLimit : Duration , send : CodeType ⇒ Future [ Unit ] , codeId : CodeType ⇒ Id ) extends Actor with ActorLogging { < nl > + private [ activation ] final class ActivationStateActor [ Id , CodeType < : Code ] ( repeatLimit : Duration , send : CodeType ⇒ Future [ Unit ] , extractId : CodeType ⇒ Id ) extends Actor with ActorLogging { < nl > implicit val system = context . system < nl > implicit val ec = context . dispatcher < nl > < nl > @ @ - 28 , 19 + 32 , 18 @ @ class ActivationStateActor [ Id , CodeType < : Code ] ( repeatLimit : Duration , send : Co < nl > < nl > private val sentCodes = new scala . collection . mutable . HashSet [ Id ] ( ) < nl > < nl > - def codeWasNotSent ( code : CodeType ) = ! sentCodes . contains ( codeId ( code ) ) < nl > + def codeWasNotSent ( code : CodeType ) = ! sentCodes . contains ( extractId ( code ) ) < nl > < nl > - def rememberSentCode ( code : CodeType ) = sentCodes + = codeId ( code ) < nl > + def rememberSentCode ( code : CodeType ) = sentCodes + = extractId ( code ) < nl > < nl > - def forgetSentCode ( code : CodeType ) = sentCodes - = codeId ( code ) < nl > + def forgetSentCode ( codeId : Id ) = sentCodes - = codeId < nl > < nl > def forgetSentCodeAfterDelay ( code : CodeType ) = < nl > - system . scheduler . scheduleOnce ( repeatLimit . toMillis . millis , self , ForgetSentCode ( code ) ) < nl > + system . scheduler . scheduleOnce ( repeatLimit . toMillis . millis , self , ForgetSentCode ( extractId ( code ) ) ) < nl > < nl > override def receive : Receive = { < nl > - case Send ( code : CodeType @ unchecked ) ⇒ < nl > - ( sendCode ( code ) map SendAck ) pipeTo sender ( ) < nl > - case ForgetSentCode ( code : CodeType @ unchecked ) ⇒ forgetSentCode ( code ) < nl > + case Send ( code : CodeType @ unchecked ) ⇒ ( sendCode ( code ) map SendAck ) pipeTo sender ( ) < nl > + case ForgetSentCode ( codeId : Id @ unchecked ) ⇒ forgetSentCode ( codeId ) < nl > } < nl > < nl > private def sendCode ( code : CodeType ) : Future [ CodeFailure Xor Unit ] = { < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / CommonAuthCodes . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / CommonAuthCodes . scala < nl > index ae3cede . . f8b6152 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / CommonAuthCodes . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / CommonAuthCodes . scala < nl > @ @ - 35 , 7 + 35 , 7 @ @ trait CommonAuthCodes { < nl > db . run ( action ) < nl > } < nl > < nl > - override def cleanup ( txHash : String ) : Future [ Unit ] = db . run ( AuthCodeRepo . deleteByTransactionHash ( txHash ) . map ( _ ⇒ ( ) ) ) < nl > + protected def deleteAuthCode ( txHash : String ) : Future [ Unit ] = db . run ( AuthCodeRepo . deleteByTransactionHash ( txHash ) . map ( _ ⇒ ( ) ) ) < nl > < nl > protected def createAuthCodeIfNeeded ( resp : CodeFailure Xor Unit , txHash : String , code : String ) : Future [ Int ] = resp match { < nl > case Xor . Left ( _ ) ⇒ Future . successful ( 0 ) < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala < nl > index e52bd8c . . 2342a81 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala < nl > @ @ - 66 , 6 + 66 , 8 @ @ private [ activation ] final class InternalCodeProvider ( system : ActorSystem ) < nl > db . run ( action ) < nl > } < nl > < nl > + override def cleanup ( txHash : String ) : Future [ Unit ] = deleteAuthCode ( txHash ) < nl > + < nl > private def sendCode ( userId : Int , code : String ) : Future [ Unit ] = { < nl > val messageText = config . messageTemplate . replace ( " $ $ CODE $ $ " , code ) < nl > val userPeer = ApiPeer ( ApiPeerType . Private , userId ) < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala < nl > index 5c8ebb8 . . e2d9c4d 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala < nl > @ @ - 8 , 10 + 8 , 12 @ @ import akka . util . Timeout < nl > import cats . data . Xor < nl > import im . actor . config . ActorConfig < nl > import im . actor . env . ActorEnv < nl > - import im . actor . server . activation . common . ActivationStateActor . { Send , SendAck } < nl > + import im . actor . server . activation . common . ActivationStateActor . { ForgetSentCode , Send , SendAck } < nl > import im . actor . server . activation . common . _ < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . email . { Content , EmailConfig , Message , SmtpEmailSender } < nl > + import im . actor . server . model . AuthEmailTransaction < nl > + import im . actor . server . persist . auth . AuthTransactionRepo < nl > import im . actor . util . misc . EmailUtils . isTestEmail < nl > < nl > import scala . concurrent . Future < nl > @ @ - 57 , 4 + 59 , 15 @ @ private [ activation ] final class SMTPProvider ( system : ActorSystem ) extends Activa < nl > case other ⇒ throw new RuntimeException ( s " This provider can ' t handle code of type : $ { other . getClass } " ) < nl > } < nl > < nl > + override def cleanup ( txHash : String ) : Future [ Unit ] = { < nl > + for { < nl > + ac ← db . run ( AuthTransactionRepo . findChildren ( txHash ) ) < nl > + _ = ac match { < nl > + case Some ( x : AuthEmailTransaction ) ⇒ smtpStateActor ! ForgetSentCode . email ( x . email ) < nl > + case _ ⇒ < nl > + } < nl > + _ ← deleteAuthCode ( txHash ) < nl > + } yield ( ) < nl > + } < nl > + < nl > } < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / telesign / TelesignProvider . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / telesign / TelesignProvider . scala < nl > index 56ec8af . . 21bf6f8 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / telesign / TelesignProvider . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / telesign / TelesignProvider . scala < nl > @ @ - 5 , 9 + 5 , 11 @ @ import akka . pattern . ask < nl > import akka . util . Timeout < nl > import cats . data . Xor < nl > import im . actor . config . ActorConfig < nl > - import im . actor . server . activation . common . ActivationStateActor . { Send , SendAck } < nl > + import im . actor . server . activation . common . ActivationStateActor . { ForgetSentCode , Send , SendAck } < nl > import im . actor . server . activation . common . _ < nl > import im . actor . server . db . DbExtension < nl > + import im . actor . server . model . AuthPhoneTransaction < nl > + import im . actor . server . persist . auth . AuthTransactionRepo < nl > import im . actor . server . sms . { TelesignCallEngine , TelesignClient , TelesignSmsEngine } < nl > import im . actor . util . misc . PhoneNumberUtils . isTestPhone < nl > < nl > @ @ - 57 , 4 + 59 , 18 @ @ private [ activation ] final class TelesignProvider ( implicit system : ActorSystem ) e < nl > } yield resp < nl > case other ⇒ throw new RuntimeException ( s " This provider can ' t handle code of type : $ { other . getClass } " ) < nl > } < nl > + < nl > + override def cleanup ( txHash : String ) : Future [ Unit ] = { < nl > + for { < nl > + ac ← db . run ( AuthTransactionRepo . findChildren ( txHash ) ) < nl > + _ = ac match { < nl > + case Some ( x : AuthPhoneTransaction ) ⇒ < nl > + smsStateActor ! ForgetSentCode . phone ( x . phoneNumber ) < nl > + callStateActor ! ForgetSentCode . phone ( x . phoneNumber ) < nl > + case _ ⇒ < nl > + } < nl > + _ ← deleteAuthCode ( txHash ) < nl > + } yield ( ) < nl > + } < nl > + < nl > } < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyActivationProvider . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyActivationProvider . scala < nl > index 3bb38fd . . 9068e48 100644 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyActivationProvider . scala < nl > + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyActivationProvider . scala < nl > @ @ - 17 , 4 + 17 , 5 @ @ final class DummyActivationProvider ( system : ActorSystem ) extends ActivationProvi < nl > < nl > override def send ( txHash : String , code : Code ) : Future [ CodeFailure Xor Unit ] = db . run ( AuthCodeRepo . createOrUpdate ( txHash , code . code ) ) map ( _ ⇒ Xor . right ( ( ) ) ) < nl > < nl > + override def cleanup ( txHash : String ) : Future [ Unit ] = deleteAuthCode ( txHash ) < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala < nl > index 981021a . . 843d92b 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala < nl > @ @ - 264 , 7 + 264 , 7 @ @ object EmailTemplate { < nl > | < / td > < nl > | < / tr > < nl > | < / table > < nl > - | / < body > < nl > + | < / body > < nl > | < / html > < nl > " " " . stripMargin < nl > < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > index 7d92507 . . a95683b 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > @ @ - 9 , 7 + 9 , 7 @ @ import akka . stream . Materializer < nl > import akka . util . Timeout < nl > import im . actor . server . activation . Activation . { CallCode , Code , EmailCode , SmsCode } < nl > import im . actor . server . activation . _ < nl > - import im . actor . server . email . { EmailSender , Message } < nl > + import im . actor . server . email . { Content , EmailSender , Message } < nl > import im . actor . server . models . AuthCode < nl > import im . actor . server . persist < nl > import im . actor . server . sms . { AuthCallEngine , AuthSmsEngine } < nl > @ @ - 122 , 7 + 122 , 7 @ @ class Activation ( repeatLimit : Duration , smsEngine : AuthSmsEngine , callEngine : Au < nl > case SmsCode ( phone , c ) ⇒ smsEngine . sendCode ( phone , c ) < nl > case CallCode ( phone , c , language ) ⇒ callEngine . sendCode ( phone , c , language ) < nl > case EmailCode ( email , c ) ⇒ < nl > - emailSender . send ( Message ( email , " Actor activation code " , emailTemplate . replace ( " $ $ CODE $ $ " , c ) ) ) < nl > + emailSender . send ( Message ( email , s " Actor activation code : $ c " , Content ( Some ( emailTemplate . replace ( " $ $ CODE $ $ " , c ) ) , Some ( s " Your actor activation code : $ c " ) ) ) ) < nl > } ) map { _ ⇒ < nl > forgetSentCodeAfterDelay ( code ) < nl > \ / - ( ( ) ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushManager . scala < nl > index d15f62c . . 1acba09 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushManager . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushManager . scala < nl > @ @ - 100 , 8 + 100 , 8 @ @ private class CleanExpiredTokenListener ( _ system : ActorSystem ) extends ExpiredTok < nl > expiredTokens : util . Collection [ ExpiredToken ] < nl > ) : Unit = { < nl > expiredTokens foreach { t ⇒ < nl > - system . log . warning ( " APNS reported expired token , loggint out " ) < nl > - UserExtension ( system ) . logoutByAppleToken ( t . getToken ) < nl > + system . log . warning ( " APNS reported expired token " ) < nl > + / / UserExtension ( system ) . logoutByAppleToken ( t . getToken ) < nl > } < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > index 1e517a5 . . 5fda915 100644 < nl > - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > @ @ - 1 , 22 + 1 , 31 @ @ < nl > package im . actor . server . email < nl > < nl > + import org . apache . commons . mail . { DefaultAuthenticator , HtmlEmail } < nl > + < nl > import scala . concurrent . { ExecutionContext , Future } < nl > < nl > - import org . apache . commons . mail . { DefaultAuthenticator , SimpleEmail } < nl > + / * * < nl > + * describes content of email . One of content entries should be present . If both are present - both will be set < nl > + * @ param html email html content . Should be present if you want to send message with html < nl > + * @ param text plain text content < nl > + * / < nl > + case class Content ( html : Option [ String ] , text : Option [ String ] ) { < nl > + require ( html . isDefined | | text . isDefined ) < nl > + } < nl > < nl > - case class Message ( to : String , subject : String , content : String ) < nl > + case class Message ( to : String , subject : String , content : Content ) < nl > < nl > class EmailSender ( config : EmailConfig ) { < nl > def send ( message : Message ) ( implicit ec : ExecutionContext ) = Future { < nl > - val email = new SimpleEmail ( ) < nl > + val email = new HtmlEmail ( ) < nl > email . setHostName ( config . host ) < nl > email . setSmtpPort ( config . port ) < nl > email . setAuthenticator ( new DefaultAuthenticator ( config . username , config . password ) ) < nl > email . setStartTLSEnabled ( config . tls ) < nl > - < nl > - email . setFrom ( config . address ) < nl > + email . setFrom ( config . address , config . name ) < nl > email . setSubject ( message . subject ) < nl > - email . setMsg ( message . content ) < nl > + message . content . html foreach { email . setHtmlMsg } < nl > + message . content . text foreach { email . setTextMsg } < nl > email . addTo ( message . to ) < nl > email . send ( ) < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > index a8223a1 . . 7db90e4 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > @ @ - 129 , 8 + 129 , 8 @ @ trait AuthHelpers extends Helpers { < nl > * / < nl > protected def refreshAuthSession ( deviceHash : Array [ Byte ] , newSession : models . AuthSession ) : DBIO [ Unit ] = < nl > for { < nl > - prevSessions ← persist . AuthSessionRepo . findByDeviceHash ( deviceHash ) < nl > - _ ← DBIO . from ( Future . sequence ( prevSessions map userExt . logout ) ) < nl > + / / prevSessions ← persist . AuthSessionRepo . findByDeviceHash ( deviceHash ) < nl > + / / _ ← DBIO . from ( Future . sequence ( prevSessions map userExt . logout ) ) < nl > _ ← persist . AuthSessionRepo . create ( newSession ) < nl > } yield ( )

TEST DIFF:
diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala 
 index f6c8f68 . . 77d0004 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationStateActor . scala 
 @ @ - 13 , 14 + 13 , 18 @ @ object ActivationStateActor { 
 
 private [ activation ] case class SendAck ( result : CodeFailure Xor Unit ) 
 
 - private [ activation ] final case class ForgetSentCode ( code : Code ) 
 + object ForgetSentCode { 
 + def phone ( phone : Long ) = ForgetSentCode ( phone ) 
 + def email ( email : String ) = ForgetSentCode ( email ) 
 + } 
 + private [ activation ] final case class ForgetSentCode [ T ] ( codeId : T ) 
 
 def props [ Id , CodeType < : Code ] ( repeatLimit : Duration , sendAction : CodeType ⇒ Future [ Unit ] , id : CodeType ⇒ Id ) = 
 Props ( new ActivationStateActor ( repeatLimit , sendAction , id ) ) 
 
 } 
 
 - class ActivationStateActor [ Id , CodeType < : Code ] ( repeatLimit : Duration , send : CodeType ⇒ Future [ Unit ] , codeId : CodeType ⇒ Id ) extends Actor with ActorLogging { 
 + private [ activation ] final class ActivationStateActor [ Id , CodeType < : Code ] ( repeatLimit : Duration , send : CodeType ⇒ Future [ Unit ] , extractId : CodeType ⇒ Id ) extends Actor with ActorLogging { 
 implicit val system = context . system 
 implicit val ec = context . dispatcher 
 
 @ @ - 28 , 19 + 32 , 18 @ @ class ActivationStateActor [ Id , CodeType < : Code ] ( repeatLimit : Duration , send : Co 
 
 private val sentCodes = new scala . collection . mutable . HashSet [ Id ] ( ) 
 
 - def codeWasNotSent ( code : CodeType ) = ! sentCodes . contains ( codeId ( code ) ) 
 + def codeWasNotSent ( code : CodeType ) = ! sentCodes . contains ( extractId ( code ) ) 
 
 - def rememberSentCode ( code : CodeType ) = sentCodes + = codeId ( code ) 
 + def rememberSentCode ( code : CodeType ) = sentCodes + = extractId ( code ) 
 
 - def forgetSentCode ( code : CodeType ) = sentCodes - = codeId ( code ) 
 + def forgetSentCode ( codeId : Id ) = sentCodes - = codeId 
 
 def forgetSentCodeAfterDelay ( code : CodeType ) = 
 - system . scheduler . scheduleOnce ( repeatLimit . toMillis . millis , self , ForgetSentCode ( code ) ) 
 + system . scheduler . scheduleOnce ( repeatLimit . toMillis . millis , self , ForgetSentCode ( extractId ( code ) ) ) 
 
 override def receive : Receive = { 
 - case Send ( code : CodeType @ unchecked ) ⇒ 
 - ( sendCode ( code ) map SendAck ) pipeTo sender ( ) 
 - case ForgetSentCode ( code : CodeType @ unchecked ) ⇒ forgetSentCode ( code ) 
 + case Send ( code : CodeType @ unchecked ) ⇒ ( sendCode ( code ) map SendAck ) pipeTo sender ( ) 
 + case ForgetSentCode ( codeId : Id @ unchecked ) ⇒ forgetSentCode ( codeId ) 
 } 
 
 private def sendCode ( code : CodeType ) : Future [ CodeFailure Xor Unit ] = { 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / CommonAuthCodes . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / CommonAuthCodes . scala 
 index ae3cede . . f8b6152 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / CommonAuthCodes . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / CommonAuthCodes . scala 
 @ @ - 35 , 7 + 35 , 7 @ @ trait CommonAuthCodes { 
 db . run ( action ) 
 } 
 
 - override def cleanup ( txHash : String ) : Future [ Unit ] = db . run ( AuthCodeRepo . deleteByTransactionHash ( txHash ) . map ( _ ⇒ ( ) ) ) 
 + protected def deleteAuthCode ( txHash : String ) : Future [ Unit ] = db . run ( AuthCodeRepo . deleteByTransactionHash ( txHash ) . map ( _ ⇒ ( ) ) ) 
 
 protected def createAuthCodeIfNeeded ( resp : CodeFailure Xor Unit , txHash : String , code : String ) : Future [ Int ] = resp match { 
 case Xor . Left ( _ ) ⇒ Future . successful ( 0 ) 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala 
 index e52bd8c . . 2342a81 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeProvider . scala 
 @ @ - 66 , 6 + 66 , 8 @ @ private [ activation ] final class InternalCodeProvider ( system : ActorSystem ) 
 db . run ( action ) 
 } 
 
 + override def cleanup ( txHash : String ) : Future [ Unit ] = deleteAuthCode ( txHash ) 
 + 
 private def sendCode ( userId : Int , code : String ) : Future [ Unit ] = { 
 val messageText = config . messageTemplate . replace ( " $ $ CODE $ $ " , code ) 
 val userPeer = ApiPeer ( ApiPeerType . Private , userId ) 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala 
 index 5c8ebb8 . . e2d9c4d 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / smtp / SMTPProvider . scala 
 @ @ - 8 , 10 + 8 , 12 @ @ import akka . util . Timeout 
 import cats . data . Xor 
 import im . actor . config . ActorConfig 
 import im . actor . env . ActorEnv 
 - import im . actor . server . activation . common . ActivationStateActor . { Send , SendAck } 
 + import im . actor . server . activation . common . ActivationStateActor . { ForgetSentCode , Send , SendAck } 
 import im . actor . server . activation . common . _ 
 import im . actor . server . db . DbExtension 
 import im . actor . server . email . { Content , EmailConfig , Message , SmtpEmailSender } 
 + import im . actor . server . model . AuthEmailTransaction 
 + import im . actor . server . persist . auth . AuthTransactionRepo 
 import im . actor . util . misc . EmailUtils . isTestEmail 
 
 import scala . concurrent . Future 
 @ @ - 57 , 4 + 59 , 15 @ @ private [ activation ] final class SMTPProvider ( system : ActorSystem ) extends Activa 
 case other ⇒ throw new RuntimeException ( s " This provider can ' t handle code of type : $ { other . getClass } " ) 
 } 
 
 + override def cleanup ( txHash : String ) : Future [ Unit ] = { 
 + for { 
 + ac ← db . run ( AuthTransactionRepo . findChildren ( txHash ) ) 
 + _ = ac match { 
 + case Some ( x : AuthEmailTransaction ) ⇒ smtpStateActor ! ForgetSentCode . email ( x . email ) 
 + case _ ⇒ 
 + } 
 + _ ← deleteAuthCode ( txHash ) 
 + } yield ( ) 
 + } 
 + 
 } 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / telesign / TelesignProvider . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / telesign / TelesignProvider . scala 
 index 56ec8af . . 21bf6f8 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / telesign / TelesignProvider . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / telesign / TelesignProvider . scala 
 @ @ - 5 , 9 + 5 , 11 @ @ import akka . pattern . ask 
 import akka . util . Timeout 
 import cats . data . Xor 
 import im . actor . config . ActorConfig 
 - import im . actor . server . activation . common . ActivationStateActor . { Send , SendAck } 
 + import im . actor . server . activation . common . ActivationStateActor . { ForgetSentCode , Send , SendAck } 
 import im . actor . server . activation . common . _ 
 import im . actor . server . db . DbExtension 
 + import im . actor . server . model . AuthPhoneTransaction 
 + import im . actor . server . persist . auth . AuthTransactionRepo 
 import im . actor . server . sms . { TelesignCallEngine , TelesignClient , TelesignSmsEngine } 
 import im . actor . util . misc . PhoneNumberUtils . isTestPhone 
 
 @ @ - 57 , 4 + 59 , 18 @ @ private [ activation ] final class TelesignProvider ( implicit system : ActorSystem ) e 
 } yield resp 
 case other ⇒ throw new RuntimeException ( s " This provider can ' t handle code of type : $ { other . getClass } " ) 
 } 
 + 
 + override def cleanup ( txHash : String ) : Future [ Unit ] = { 
 + for { 
 + ac ← db . run ( AuthTransactionRepo . findChildren ( txHash ) ) 
 + _ = ac match { 
 + case Some ( x : AuthPhoneTransaction ) ⇒ 
 + smsStateActor ! ForgetSentCode . phone ( x . phoneNumber ) 
 + callStateActor ! ForgetSentCode . phone ( x . phoneNumber ) 
 + case _ ⇒ 
 + } 
 + _ ← deleteAuthCode ( txHash ) 
 + } yield ( ) 
 + } 
 + 
 } 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyActivationProvider . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyActivationProvider . scala 
 index 3bb38fd . . 9068e48 100644 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyActivationProvider . scala 
 + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyActivationProvider . scala 
 @ @ - 17 , 4 + 17 , 5 @ @ final class DummyActivationProvider ( system : ActorSystem ) extends ActivationProvi 
 
 override def send ( txHash : String , code : Code ) : Future [ CodeFailure Xor Unit ] = db . run ( AuthCodeRepo . createOrUpdate ( txHash , code . code ) ) map ( _ ⇒ Xor . right ( ( ) ) ) 
 
 + override def cleanup ( txHash : String ) : Future [ Unit ] = deleteAuthCode ( txHash ) 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala 
 index 981021a . . 843d92b 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / EmailTemplate . scala 
 @ @ - 264 , 7 + 264 , 7 @ @ object EmailTemplate { 
 | < / td > 
 | < / tr > 
 | < / table > 
 - | / < body > 
 + | < / body > 
 | < / html > 
 " " " . stripMargin 
 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 index 7d92507 . . a95683b 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 @ @ - 9 , 7 + 9 , 7 @ @ import akka . stream . Materializer 
 import akka . util . Timeout 
 import im . actor . server . activation . Activation . { CallCode , Code , EmailCode , SmsCode } 
 import im . actor . server . activation . _ 
 - import im . actor . server . email . { EmailSender , Message } 
 + import im . actor . server . email . { Content , EmailSender , Message } 
 import im . actor . server . models . AuthCode 
 import im . actor . server . persist 
 import im . actor . server . sms . { AuthCallEngine , AuthSmsEngine } 
 @ @ - 122 , 7 + 122 , 7 @ @ class Activation ( repeatLimit : Duration , smsEngine : AuthSmsEngine , callEngine : Au 
 case SmsCode ( phone , c ) ⇒ smsEngine . sendCode ( phone , c ) 
 case CallCode ( phone , c , language ) ⇒ callEngine . sendCode ( phone , c , language ) 
 case EmailCode ( email , c ) ⇒ 
 - emailSender . send ( Message ( email , " Actor activation code " , emailTemplate . replace ( " $ $ CODE $ $ " , c ) ) ) 
 + emailSender . send ( Message ( email , s " Actor activation code : $ c " , Content ( Some ( emailTemplate . replace ( " $ $ CODE $ $ " , c ) ) , Some ( s " Your actor activation code : $ c " ) ) ) ) 
 } ) map { _ ⇒ 
 forgetSentCodeAfterDelay ( code ) 
 \ / - ( ( ) ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushManager . scala 
 index d15f62c . . 1acba09 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushManager . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushManager . scala 
 @ @ - 100 , 8 + 100 , 8 @ @ private class CleanExpiredTokenListener ( _ system : ActorSystem ) extends ExpiredTok 
 expiredTokens : util . Collection [ ExpiredToken ] 
 ) : Unit = { 
 expiredTokens foreach { t ⇒ 
 - system . log . warning ( " APNS reported expired token , loggint out " ) 
 - UserExtension ( system ) . logoutByAppleToken ( t . getToken ) 
 + system . log . warning ( " APNS reported expired token " ) 
 + / / UserExtension ( system ) . logoutByAppleToken ( t . getToken ) 
 } 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 index 1e517a5 . . 5fda915 100644 
 - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 @ @ - 1 , 22 + 1 , 31 @ @ 
 package im . actor . server . email 
 
 + import org . apache . commons . mail . { DefaultAuthenticator , HtmlEmail } 
 + 
 import scala . concurrent . { ExecutionContext , Future } 
 
 - import org . apache . commons . mail . { DefaultAuthenticator , SimpleEmail } 
 + / * * 
 + * describes content of email . One of content entries should be present . If both are present - both will be set 
 + * @ param html email html content . Should be present if you want to send message with html 
 + * @ param text plain text content 
 + * / 
 + case class Content ( html : Option [ String ] , text : Option [ String ] ) { 
 + require ( html . isDefined | | text . isDefined ) 
 + } 
 
 - case class Message ( to : String , subject : String , content : String ) 
 + case class Message ( to : String , subject : String , content : Content ) 
 
 class EmailSender ( config : EmailConfig ) { 
 def send ( message : Message ) ( implicit ec : ExecutionContext ) = Future { 
 - val email = new SimpleEmail ( ) 
 + val email = new HtmlEmail ( ) 
 email . setHostName ( config . host ) 
 email . setSmtpPort ( config . port ) 
 email . setAuthenticator ( new DefaultAuthenticator ( config . username , config . password ) ) 
 email . setStartTLSEnabled ( config . tls ) 
 - 
 - email . setFrom ( config . address ) 
 + email . setFrom ( config . address , config . name ) 
 email . setSubject ( message . subject ) 
 - email . setMsg ( message . content ) 
 + message . content . html foreach { email . setHtmlMsg } 
 + message . content . text foreach { email . setTextMsg } 
 email . addTo ( message . to ) 
 email . send ( ) 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 index a8223a1 . . 7db90e4 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 @ @ - 129 , 8 + 129 , 8 @ @ trait AuthHelpers extends Helpers { 
 * / 
 protected def refreshAuthSession ( deviceHash : Array [ Byte ] , newSession : models . AuthSession ) : DBIO [ Unit ] = 
 for { 
 - prevSessions ← persist . AuthSessionRepo . findByDeviceHash ( deviceHash ) 
 - _ ← DBIO . from ( Future . sequence ( prevSessions map userExt . logout ) ) 
 + / / prevSessions ← persist . AuthSessionRepo . findByDeviceHash ( deviceHash ) 
 + / / _ ← DBIO . from ( Future . sequence ( prevSessions map userExt . logout ) ) 
 _ ← persist . AuthSessionRepo . create ( newSession ) 
 } yield ( )
