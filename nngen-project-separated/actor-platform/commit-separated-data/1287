BLEU SCORE: 0.345720784641941

TEST MSG: feat ( android ) : local tc update
GENERATED MSG: fix ( android ) : recover push

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > index 5880022 . . ce072ed 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . sdk . controllers . fragment . settings . ActorSettingsField ; < nl > import im . actor . sdk . controllers . fragment . settings . BaseActorSettingsActivity ; < nl > import im . actor . sdk . controllers . fragment . settings . BaseActorSettingsFragment ; < nl > import im . actor . sdk . intents . ActorIntentFragmentActivity ; < nl > + import im . actor . tc . TCMessageHolder ; < nl > < nl > public class Application extends ActorSDKApplication { < nl > < nl > diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TCMessageHolder . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TCMessageHolder . java < nl > deleted file mode 100644 < nl > index a87091a . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TCMessageHolder . java < nl > + + + / dev / null < nl > @ @ - 1 , 25 + 0 , 0 @ @ < nl > - package im . actor ; < nl > - < nl > - import android . view . ViewGroup ; < nl > - import android . widget . TextView ; < nl > - import im . actor . core . entity . Message ; < nl > - import im . actor . sdk . R ; < nl > - import im . actor . sdk . controllers . conversation . messages . BaseCustomHolder ; < nl > - import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; < nl > - import im . actor . sdk . controllers . conversation . messages . PreprocessedData ; < nl > - < nl > - public class TCMessageHolder extends BaseCustomHolder { < nl > - < nl > - TextView text ; < nl > - < nl > - public TCMessageHolder ( MessagesAdapter adapter , ViewGroup viewGroup , int id , boolean isFullSize ) { < nl > - super ( adapter , viewGroup , id , isFullSize ) ; < nl > - text = ( TextView ) itemView . findViewById ( R . id . tv _ text ) ; < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - protected void bindData ( Message message , boolean isUpdated , PreprocessedData preprocessedData ) { < nl > - text . setText ( ( ( Application . TCBotMesaage ) message . getContent ( ) ) . getRawJson ( ) ) ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCActor . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCActor . java < nl > new file mode 100644 < nl > index 0000000 . . e9b6bf5 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCActor . java < nl > @ @ - 0 , 0 + 1 , 106 @ @ < nl > + package im . actor . tc ; < nl > + < nl > + import java . util . ArrayList ; < nl > + import java . util . HashMap ; < nl > + < nl > + import im . actor . Application ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . content . JsonContent ; < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . actors . ActorSystem ; < nl > + import im . actor . runtime . actors . Props ; < nl > + import im . actor . runtime . json . JSONException ; < nl > + import im . actor . runtime . json . JSONObject ; < nl > + < nl > + import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > + < nl > + / * * < nl > + * Created by root on 12 / 31 / 15 . < nl > + * / < nl > + public class TCActor extends Actor { < nl > + < nl > + private HashMap < Integer , ArrayList < Long > > reidMap ; < nl > + private HashMap < Integer , Peer > peerMap ; < nl > + private ArrayList < Integer > ids ; < nl > + private ActorRef check ; < nl > + private String url ; < nl > + < nl > + public TCActor ( String url ) { < nl > + this . reidMap = new HashMap < > ( ) ; < nl > + this . peerMap = new HashMap < > ( ) ; < nl > + this . url = url ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + ids = new ArrayList < > ( ) ; < nl > + check = ActorSystem . system ( ) . actorOf ( Props . create ( TCCheckActor . class , new ActorCreator < TCCheckActor > ( ) { < nl > + @ Override < nl > + public TCCheckActor create ( ) { < nl > + return new TCCheckActor ( ids , url , new TCCheckActor . TCCheckCallback ( ) { < nl > + @ Override < nl > + public void onIdchecked ( int id , JSONObject json ) { < nl > + try { < nl > + for ( long rid : reidMap . get ( id ) ) { < nl > + messenger ( ) . updateJsonMessageContentLocal ( peerMap . get ( id ) , rid , JsonContent . create ( new Application . TCBotMesaage ( ) , json ) ) ; < nl > + } < nl > + if ( json . getJSONObject ( " data " ) . getString ( " state " ) . equals ( " finished " ) ) { < nl > + ids . remove ( id ) ; < nl > + reidMap . remove ( id ) ; < nl > + peerMap . remove ( id ) ; < nl > + } < nl > + } catch ( JSONException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) , " actor / tc " ) ; < nl > + } < nl > + < nl > + private void bind ( int id , long rid , Peer peer ) { < nl > + ids . add ( id ) ; < nl > + peerMap . put ( id , peer ) ; < nl > + if ( reidMap . get ( id ) ! = null ) { < nl > + reidMap . get ( id ) . add ( rid ) ; < nl > + } else { < nl > + ArrayList < Long > rids = new ArrayList < > ( ) ; < nl > + rids . add ( rid ) ; < nl > + reidMap . put ( id , rids ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof Bind ) { < nl > + bind ( ( ( Bind ) message ) . getId ( ) , ( ( Bind ) message ) . getRid ( ) , ( ( Bind ) message ) . getPeer ( ) ) ; < nl > + } < nl > + } < nl > + < nl > + public static class Bind { < nl > + int id ; < nl > + long rid ; < nl > + Peer peer ; < nl > + < nl > + public Bind ( int id , long rid , Peer peer ) { < nl > + this . id = id ; < nl > + this . rid = rid ; < nl > + this . peer = peer ; < nl > + } < nl > + < nl > + public int getId ( ) { < nl > + return id ; < nl > + } < nl > + < nl > + public long getRid ( ) { < nl > + return rid ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + } < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCCheckActor . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCCheckActor . java < nl > new file mode 100644 < nl > index 0000000 . . c30d8f2 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCCheckActor . java < nl > @ @ - 0 , 0 + 1 , 87 @ @ < nl > + package im . actor . tc ; < nl > + < nl > + import java . io . BufferedInputStream ; < nl > + import java . io . IOException ; < nl > + import java . io . InputStream ; < nl > + import java . net . HttpURLConnection ; < nl > + import java . net . URL ; < nl > + import java . net . URLConnection ; < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . runtime . json . JSONException ; < nl > + import im . actor . runtime . json . JSONObject ; < nl > + < nl > + import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > + < nl > + public class TCCheckActor extends Actor { < nl > + private ArrayList < Integer > ids ; < nl > + private String url ; < nl > + private TCCheckCallback callback ; < nl > + < nl > + public TCCheckActor ( ArrayList < Integer > ids , String url , TCCheckCallback callback ) { < nl > + this . ids = ids ; < nl > + this . url = url ; < nl > + this . callback = callback ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + self ( ) . send ( new Start ( ) ) ; < nl > + } < nl > + < nl > + private void onStart ( ) { < nl > + String end = " / httpAuth / app / rest / builds / id : " ; < nl > + String getUrl ; < nl > + while ( true ) { < nl > + if ( ids ! = null & & url ! = null ) { < nl > + for ( int i : ids ) { < nl > + getUrl = url + end + i ; < nl > + try { < nl > + HttpURLConnection connection = ( HttpURLConnection ) new URL ( getUrl ) . openConnection ( ) ; < nl > + connection . setRequestMethod ( " GET " ) ; < nl > + connection . setRequestProperty ( " Accept " , " application / json " ) ; < nl > + connection . connect ( ) ; < nl > + InputStream in = new BufferedInputStream ( connection . getInputStream ( ) ) ; < nl > + < nl > + < nl > + JSONObject json = new JSONObject ( readStream ( in ) ) ; < nl > + json . put ( " url " , url ) ; < nl > + callback . onIdchecked ( i , json ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } catch ( JSONException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + < nl > + } < nl > + try { < nl > + Thread . sleep ( 1000 ) ; < nl > + } catch ( InterruptedException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + < nl > + } < nl > + } < nl > + < nl > + private String readStream ( InputStream is ) { < nl > + java . util . Scanner s = new java . util . Scanner ( is ) . useDelimiter ( " \ \ A " ) ; < nl > + return s . hasNext ( ) ? s . next ( ) : " " ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof Start ) { < nl > + onStart ( ) ; < nl > + } < nl > + } < nl > + < nl > + public static class Start { < nl > + < nl > + } < nl > + < nl > + public interface TCCheckCallback { < nl > + void onIdchecked ( int id , JSONObject json ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCMessageHolder . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCMessageHolder . java < nl > new file mode 100644 < nl > index 0000000 . . 1cd7980 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCMessageHolder . java < nl > @ @ - 0 , 0 + 1 , 69 @ @ < nl > + package im . actor . tc ; < nl > + < nl > + import android . view . ViewGroup ; < nl > + import android . widget . TextView ; < nl > + < nl > + import im . actor . Application ; < nl > + import im . actor . core . entity . Message ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . actors . ActorSystem ; < nl > + import im . actor . runtime . actors . Props ; < nl > + import im . actor . runtime . json . JSONException ; < nl > + import im . actor . runtime . json . JSONObject ; < nl > + import im . actor . sdk . R ; < nl > + import im . actor . sdk . controllers . conversation . messages . BaseCustomHolder ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; < nl > + import im . actor . sdk . controllers . conversation . messages . PreprocessedData ; < nl > + import im . actor . sdk . core . audio . AudioPlayerActor ; < nl > + < nl > + public class TCMessageHolder extends BaseCustomHolder { < nl > + < nl > + TextView text ; < nl > + protected static ActorRef tcActor ; < nl > + < nl > + < nl > + public TCMessageHolder ( MessagesAdapter adapter , ViewGroup viewGroup , int id , boolean isFullSize ) { < nl > + super ( adapter , viewGroup , id , isFullSize ) ; < nl > + text = ( TextView ) itemView . findViewById ( R . id . tv _ text ) ; < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + protected void bindData ( Message message , boolean isUpdated , PreprocessedData preprocessedData ) { < nl > + String render = " " ; < nl > + JSONObject json = ( ( Application . TCBotMesaage ) message . getContent ( ) ) . getJson ( ) ; < nl > + try { < nl > + final JSONObject data = json . getJSONObject ( " data " ) ; < nl > + < nl > + < nl > + int id = data . getInt ( " id " ) ; < nl > + render + = " id : " + id + " \ n " ; < nl > + String state = data . getString ( " state " ) ; < nl > + render + = " state : " + state ; < nl > + int pr = data . optInt ( " percentageComplete " , 0 ) ; < nl > + if ( state . equals ( " running " ) ) { < nl > + render + = " progress : " + pr + " % \ n " ; < nl > + } < nl > + < nl > + final String usr = data . getString ( " url " ) ; < nl > + if ( tcActor = = null ) { < nl > + tcActor = ActorSystem . system ( ) . actorOf ( Props . create ( TCActor . class , new ActorCreator < TCActor > ( ) { < nl > + @ Override < nl > + public TCActor create ( ) { < nl > + return new TCActor ( usr ) ; < nl > + } < nl > + } ) , " actor / tc " ) ; < nl > + < nl > + } < nl > + < nl > + tcActor . send ( new TCActor . Bind ( id , message . getRid ( ) , getPeer ( ) ) ) ; < nl > + < nl > + } catch ( JSONException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + < nl > + text . setText ( render ) ; < nl > + < nl > + } < nl > + }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > index 71da5ab . . 8045a74 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > @ @ - 1 , 11 + 1 , 7 @ @ < nl > package im . actor ; < nl > < nl > - import java . util . ArrayList ; < nl > - < nl > - import im . actor . auth . SignEmailFragment ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . BaseActorSDKDelegate ; < nl > - import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; < nl > < nl > / * * < nl > * Created by badgr on 16 . 10 . 2015 . < nl > @ @ - 15 , 13 + 11 , 11 @ @ public class Application extends android . app . Application { < nl > public void onCreate ( ) { < nl > super . onCreate ( ) ; < nl > ActorSDK . sharedActor ( ) . setDelegate ( new ActorSDKDelegate ( ) ) ; < nl > + ActorSDK . sharedActor ( ) . setPushId ( 209133700967L ) ; < nl > ActorSDK . sharedActor ( ) . createActor ( this ) ; < nl > } < nl > < nl > private class ActorSDKDelegate extends BaseActorSDKDelegate { < nl > - @ Override < nl > - public BaseAuthFragment getSignFragment ( ) { < nl > - return new SignEmailFragment ( ) ; < nl > - } < nl > + < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java < nl > deleted file mode 100644 < nl > index 37ce216 . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java < nl > + + + / dev / null < nl > @ @ - 1 , 137 + 0 , 0 @ @ < nl > - package im . actor . auth ; < nl > - < nl > - import android . app . AlertDialog ; < nl > - import android . os . Bundle ; < nl > - import android . telephony . PhoneNumberFormattingTextWatcher ; < nl > - import android . text . Editable ; < nl > - import android . text . TextWatcher ; < nl > - import android . view . KeyEvent ; < nl > - import android . view . LayoutInflater ; < nl > - import android . view . View ; < nl > - import android . view . ViewGroup ; < nl > - import android . view . inputmethod . EditorInfo ; < nl > - import android . widget . EditText ; < nl > - import android . widget . TextView ; < nl > - < nl > - import im . actor . sdk . ActorSDK ; < nl > - import im . actor . sdk . R ; < nl > - import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; < nl > - import im . actor . sdk . util . Fonts ; < nl > - import im . actor . sdk . util . KeyboardHelper ; < nl > - < nl > - import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > - < nl > - public class SignEmailFragment extends BaseAuthFragment { < nl > - < nl > - private EditText emailEditText ; < nl > - private KeyboardHelper keyboardHelper ; < nl > - < nl > - @ Override < nl > - public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { < nl > - View v = inflater . inflate ( R . layout . fragment _ sign _ email , container , false ) ; < nl > - < nl > - ( ( TextView ) v . findViewById ( R . id . button _ continue _ text ) ) . setTypeface ( Fonts . medium ( ) ) ; < nl > - < nl > - keyboardHelper = new KeyboardHelper ( getActivity ( ) ) ; < nl > - < nl > - initView ( v ) ; < nl > - < nl > - return v ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onResume ( ) { < nl > - super . onResume ( ) ; < nl > - < nl > - / / TODO track email auth open < nl > - / / messenger ( ) . trackAuthPhoneOpen ( ) ; < nl > - < nl > - setTitle ( R . string . auth _ email _ title ) ; < nl > - < nl > - focusEmail ( ) ; < nl > - < nl > - keyboardHelper . setImeVisibility ( emailEditText , true ) ; < nl > - } < nl > - < nl > - private void initView ( View v ) { < nl > - < nl > - emailEditText = ( EditText ) v . findViewById ( R . id . tv _ email ) ; < nl > - emailEditText . addTextChangedListener ( new PhoneNumberFormattingTextWatcher ( ) ) ; < nl > - String email = messenger ( ) . getAuthEmail ( ) ; < nl > - if ( email ! = null & & ! email . isEmpty ( ) ) { < nl > - emailEditText . setText ( email ) ; < nl > - } < nl > - emailEditText . setOnEditorActionListener ( new TextView . OnEditorActionListener ( ) { < nl > - @ Override < nl > - public boolean onEditorAction ( TextView textView , int id , KeyEvent keyEvent ) { < nl > - if ( id = = EditorInfo . IME _ ACTION _ GO ) { < nl > - requestCode ( ) ; < nl > - return true ; < nl > - } < nl > - return false ; < nl > - } < nl > - } ) ; < nl > - emailEditText . addTextChangedListener ( new TextWatcher ( ) { < nl > - @ Override < nl > - public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void onTextChanged ( CharSequence s , int start , int before , int count ) { < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void afterTextChanged ( Editable s ) { < nl > - / / TODO trackAuthEmailType < nl > - / / messenger ( ) . trackAuthPhoneType ( emailEditText . getText ( ) . toString ( ) ) ; < nl > - } < nl > - } ) ; < nl > - < nl > - onClick ( v , R . id . button _ continue , new View . OnClickListener ( ) { < nl > - @ Override < nl > - public void onClick ( View view ) { < nl > - requestCode ( ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - private void requestCode ( ) { < nl > - final String ACTION = " Request code email " ; < nl > - < nl > - < nl > - if ( emailEditText . getText ( ) . toString ( ) . trim ( ) . length ( ) = = 0 ) { < nl > - String message = getString ( R . string . auth _ error _ empty _ email ) ; < nl > - new AlertDialog . Builder ( getActivity ( ) ) < nl > - . setMessage ( R . string . auth _ error _ empty _ email ) < nl > - . setPositiveButton ( R . string . dialog _ ok , null ) < nl > - . show ( ) ; < nl > - return ; < nl > - } < nl > - < nl > - String rawEmail = emailEditText . getText ( ) . toString ( ) ; < nl > - < nl > - if ( rawEmail . length ( ) = = 0 ) { < nl > - String message = getString ( R . string . auth _ error _ empty _ email ) ; < nl > - new AlertDialog . Builder ( getActivity ( ) ) < nl > - . setMessage ( R . string . auth _ error _ empty _ email ) < nl > - . setPositiveButton ( R . string . dialog _ ok , null ) < nl > - . show ( ) ; < nl > - return ; < nl > - } < nl > - < nl > - setAuthId ( rawEmail ) ; < nl > - < nl > - executeAuth ( ActorSDK . sharedActor ( ) . getMessenger ( ) . requestStartEmailAuth ( rawEmail ) , ACTION ) ; < nl > - } < nl > - < nl > - private void focusEmail ( ) { < nl > - focus ( emailEditText ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public String getHintText ( ) { < nl > - return getString ( R . string . auth _ code _ email _ hint ) . replace ( " { 0 } " , " < b > " + getAuthId ( ) + " < / b > " ) ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java b / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java < nl > deleted file mode 100644 < nl > index c74e30f . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java < nl > + + + / dev / null < nl > @ @ - 1 , 100 + 0 , 0 @ @ < nl > - package im . actor . core ; < nl > - < nl > - import android . content . Context ; < nl > - < nl > - import com . google . android . gms . gcm . GoogleCloudMessaging ; < nl > - < nl > - import java . io . IOException ; < nl > - < nl > - import im . actor . messenger . app . core . ActorSDK ; < nl > - import im . actor . runtime . Log ; < nl > - import im . actor . runtime . actors . Actor ; < nl > - < nl > - / * * < nl > - * GCM push implementation for Actor push registration . < nl > - * This actor is used for load GCM token and register it on server . < nl > - * / < nl > - public class AndroidPushActor extends Actor { < nl > - < nl > - private static final String TAG = " im . actor . core . AndroidPushActor " ; < nl > - < nl > - private final AndroidMessenger messenger ; < nl > - private final Context context ; < nl > - private boolean isRegistered ; < nl > - < nl > - public AndroidPushActor ( Context context , AndroidMessenger messenger ) { < nl > - this . messenger = messenger ; < nl > - this . context = context ; < nl > - } < nl > - < nl > - @ Override < nl > - public void preStart ( ) { < nl > - super . preStart ( ) ; < nl > - < nl > - isRegistered = messenger . getPreferences ( ) . getBool ( " push _ registered " , false ) ; < nl > - < nl > - if ( ! isRegistered ) { < nl > - Log . d ( TAG , " Requesting push token . . . " ) ; < nl > - < nl > - / / TODO : Add backoff < nl > - new Thread ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - while ( true ) { < nl > - GoogleCloudMessaging cloudMessaging = GoogleCloudMessaging . getInstance ( context ) ; < nl > - try { < nl > - Log . d ( TAG , " Requesting push token iteration . . . " ) ; < nl > - String regId = cloudMessaging . register ( " " + ActorSDK . sharedActor ( ) . getGcmProjectId ( ) ) ; < nl > - if ( regId ! = null ) { < nl > - Log . d ( TAG , " Token loaded " ) ; < nl > - self ( ) . send ( new PushRegistered ( regId ) ) ; < nl > - return ; < nl > - } else { < nl > - Log . d ( TAG , " Unable to load Token " ) ; < nl > - } < nl > - } catch ( IOException e ) { < nl > - e . printStackTrace ( ) ; < nl > - } < nl > - Log . d ( TAG , " Waiting for next attempt " ) ; < nl > - try { < nl > - Thread . sleep ( 1000 ) ; < nl > - } catch ( InterruptedException e1 ) { < nl > - e1 . printStackTrace ( ) ; < nl > - return ; < nl > - } < nl > - } < nl > - } < nl > - } . start ( ) ; < nl > - } else { < nl > - Log . d ( TAG , " Already registered token " ) ; < nl > - } < nl > - } < nl > - < nl > - private void onPushRegistered ( String token ) { < nl > - isRegistered = true ; < nl > - messenger . getPreferences ( ) . putBool ( " push _ registered " , true ) ; < nl > - messenger . registerGooglePush ( ActorSDK . sharedActor ( ) . getGcmProjectId ( ) , token ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onReceive ( Object message ) { < nl > - if ( message instanceof PushRegistered ) { < nl > - PushRegistered pushRegistered = ( PushRegistered ) message ; < nl > - onPushRegistered ( pushRegistered . getToken ( ) ) ; < nl > - } else { < nl > - drop ( message ) ; < nl > - } < nl > - } < nl > - < nl > - public static class PushRegistered { < nl > - private String token ; < nl > - < nl > - public PushRegistered ( String token ) { < nl > - this . token = token ; < nl > - } < nl > - < nl > - public String getToken ( ) { < nl > - return token ; < nl > - } < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java b / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java < nl > deleted file mode 100644 < nl > index 8dbd762 . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java < nl > + + + / dev / null < nl > @ @ - 1 , 37 + 0 , 0 @ @ < nl > - package im . actor . messenger ; < nl > - < nl > - import android . app . Activity ; < nl > - import android . content . Context ; < nl > - import android . content . Intent ; < nl > - import android . os . Bundle ; < nl > - import android . support . v4 . content . WakefulBroadcastReceiver ; < nl > - < nl > - import com . google . android . gms . gcm . GoogleCloudMessaging ; < nl > - < nl > - import im . actor . runtime . Log ; < nl > - < nl > - < nl > - import static im . actor . messenger . app . core . ActorSDK . messenger ; < nl > - < nl > - public class PushReceiver extends WakefulBroadcastReceiver { < nl > - < nl > - private static final String TAG = " PushReceiver " ; < nl > - < nl > - @ Override < nl > - public void onReceive ( Context context , Intent intent ) { < nl > - GoogleCloudMessaging gcm = GoogleCloudMessaging . getInstance ( context ) ; < nl > - Bundle extras = intent . getExtras ( ) ; < nl > - String messageType = gcm . getMessageType ( intent ) ; < nl > - if ( ! extras . isEmpty ( ) ) { < nl > - if ( GoogleCloudMessaging . MESSAGE _ TYPE _ MESSAGE . equals ( messageType ) ) { < nl > - if ( extras . containsKey ( " seq " ) ) { < nl > - int seq = Integer . parseInt ( extras . getString ( " seq " ) ) ; < nl > - messenger ( ) . onPushReceived ( seq ) ; < nl > - setResultCode ( Activity . RESULT _ OK ) ; < nl > - Log . d ( TAG , " Push received " ) ; < nl > - } < nl > - } < nl > - } < nl > - completeWakefulIntent ( intent ) ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / build . gradle b / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > index 5153388 . . 8c04484 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > @ @ - 75 , 6 + 75 , 10 @ @ dependencies { < nl > compile ' com . android . support : palette - v7 : 23 . 1 . 0 ' < nl > compile ' com . android . support : recyclerview - v7 : 23 . 1 . 0 ' < nl > compile ' com . android . support : design : 23 . 1 . 0 ' < nl > + < nl > + / / GCM < nl > + compile ' com . google . android . gms : play - services - gcm : 7 . 5 . 0 ' < nl > + < nl > } < nl > < nl > / / < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > index 1492015 . . ef17a74 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > @ @ - 18 , 14 + 18 , 20 @ @ import im . actor . core . ApiConfiguration ; < nl > import im . actor . core . ConfigurationBuilder ; < nl > import im . actor . core . DeviceCategory ; < nl > import im . actor . core . PlatformType ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . Props ; < nl > import im . actor . sdk . core . AndroidNotifications ; < nl > import im . actor . sdk . core . AndroidPhoneBook ; < nl > + import im . actor . sdk . core . AndroidPushActor ; < nl > import im . actor . sdk . intents . ActivityManager ; < nl > import im . actor . sdk . services . KeepAliveService ; < nl > import im . actor . sdk . util . Devices ; < nl > import im . actor . sdk . view . emoji . SmileProcessor ; < nl > import im . actor . runtime . android . AndroidContext ; < nl > < nl > + import static im . actor . runtime . actors . ActorSystem . system ; < nl > + < nl > + < nl > public class ActorSDK { < nl > < nl > < nl > @ @ - 61 , 6 + 67 , 11 @ @ public class ActorSDK { < nl > * / < nl > private String apiAppKey = " 4295f9666fad3faf2d04277fe7a0c40ff39a85d313de5348ad8ffa650ad71855 " ; < nl > / * * < nl > + * Push Registration Id < nl > + * / < nl > + private long pushId = 0 ; < nl > + < nl > + / * * < nl > * Is Keeping app alive enabled < nl > * / < nl > private boolean isKeepAliveEnabled = false ; < nl > @ @ - 71 , 7 + 82 , 8 @ @ public class ActorSDK { < nl > / * * < nl > * ActivityManager < nl > * / < nl > - private ActivityManager activityManager = new ActivityManager ( ) ; < nl > + private ActivityManager activityManager = new ActivityManager ( ) ; < nl > + < nl > private ActorSDK ( ) { < nl > endpoints . add ( " tls : / / front1 - mtproto - api - rev2 . actor . im " ) ; < nl > endpoints . add ( " tls : / / front2 - mtproto - api - rev2 . actor . im " ) ; < nl > @ @ - 91 , 7 + 103 , 7 @ @ public class ActorSDK { < nl > / / SDK Initialization < nl > / / < nl > < nl > - public void createActor ( Application application ) { < nl > + public void createActor ( final Application application ) { < nl > < nl > this . application = application ; < nl > < nl > @ @ - 135 , 6 + 147 , 19 @ @ public class ActorSDK { < nl > AlarmManager alarm = ( AlarmManager ) application . getSystemService ( Context . ALARM _ SERVICE ) ; < nl > alarm . setRepeating ( AlarmManager . RTC , System . currentTimeMillis ( ) , 30 * 1000 , pendingIntent ) ; < nl > } < nl > + < nl > + / / < nl > + / / GCM < nl > + / / < nl > + if ( pushId ! = 0 ) { < nl > + system ( ) . actorOf ( Props . create ( AndroidPushActor . class , new ActorCreator < AndroidPushActor > ( ) { < nl > + @ Override < nl > + public AndroidPushActor create ( ) { < nl > + return new AndroidPushActor ( application , messenger ) ; < nl > + } < nl > + } ) , " actor / android / push " ) ; < nl > + } < nl > + < nl > } < nl > < nl > public void startMessagingApp ( Activity context ) { < nl > @ @ - 240 , 6 + 265 , 22 @ @ public class ActorSDK { < nl > this . isKeepAliveEnabled = isKeepAliveEnabled ; < nl > } < nl > < nl > + / * * < nl > + * Getting Push Registration Id < nl > + * < nl > + * @ return pushId < nl > + * / < nl > + public long getPushId ( ) { < nl > + return pushId ; < nl > + } < nl > + < nl > + / * * < nl > + * Setting Push Registration Id < nl > + * / < nl > + public void setPushId ( long pushId ) { < nl > + this . pushId = pushId ; < nl > + } < nl > + < nl > public ActorSDKDelegate getDelegate ( ) { < nl > return delegate ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java < nl > new file mode 100644 < nl > index 0000000 . . d65a7a8 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java < nl > @ @ - 0 , 0 + 1 , 101 @ @ < nl > + package im . actor . sdk . core ; < nl > + < nl > + import android . content . Context ; < nl > + < nl > + import com . google . android . gms . gcm . GoogleCloudMessaging ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . core . AndroidMessenger ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . sdk . ActorSDK ; < nl > + < nl > + / * * < nl > + * GCM push implementation for Actor push registration . < nl > + * This actor is used for load GCM token and register it on server . < nl > + * / < nl > + public class AndroidPushActor extends Actor { < nl > + < nl > + private static final String TAG = " im . actor . core . AndroidPushActor " ; < nl > + < nl > + private final AndroidMessenger messenger ; < nl > + private final Context context ; < nl > + private boolean isRegistered ; < nl > + < nl > + public AndroidPushActor ( Context context , AndroidMessenger messenger ) { < nl > + this . messenger = messenger ; < nl > + this . context = context ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + < nl > + isRegistered = messenger . getPreferences ( ) . getBool ( " push _ registered " , false ) ; < nl > + < nl > + if ( ! isRegistered ) { < nl > + Log . d ( TAG , " Requesting push token . . . " ) ; < nl > + < nl > + / / TODO : Add backoff < nl > + new Thread ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + while ( true ) { < nl > + GoogleCloudMessaging cloudMessaging = GoogleCloudMessaging . getInstance ( context ) ; < nl > + try { < nl > + Log . d ( TAG , " Requesting push token iteration . . . " ) ; < nl > + String regId = cloudMessaging . register ( " " + ActorSDK . sharedActor ( ) . getPushId ( ) ) ; < nl > + if ( regId ! = null ) { < nl > + Log . d ( TAG , " Token loaded " ) ; < nl > + self ( ) . send ( new PushRegistered ( regId ) ) ; < nl > + return ; < nl > + } else { < nl > + Log . d ( TAG , " Unable to load Token " ) ; < nl > + } < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + Log . d ( TAG , " Waiting for next attempt " ) ; < nl > + try { < nl > + Thread . sleep ( 1000 ) ; < nl > + } catch ( InterruptedException e1 ) { < nl > + e1 . printStackTrace ( ) ; < nl > + return ; < nl > + } < nl > + } < nl > + } < nl > + } . start ( ) ; < nl > + } else { < nl > + Log . d ( TAG , " Already registered token " ) ; < nl > + } < nl > + } < nl > + < nl > + private void onPushRegistered ( String token ) { < nl > + isRegistered = true ; < nl > + messenger . getPreferences ( ) . putBool ( " push _ registered " , true ) ; < nl > + messenger . registerGooglePush ( ActorSDK . sharedActor ( ) . getPushId ( ) , token ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof PushRegistered ) { < nl > + PushRegistered pushRegistered = ( PushRegistered ) message ; < nl > + onPushRegistered ( pushRegistered . getToken ( ) ) ; < nl > + } else { < nl > + drop ( message ) ; < nl > + } < nl > + } < nl > + < nl > + public static class PushRegistered { < nl > + private String token ; < nl > + < nl > + public PushRegistered ( String token ) { < nl > + this . token = token ; < nl > + } < nl > + < nl > + public String getToken ( ) { < nl > + return token ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java < nl > new file mode 100644 < nl > index 0000000 . . 425cfb1 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java < nl > @ @ - 0 , 0 + 1 , 35 @ @ < nl > + package im . actor . sdk . core ; < nl > + < nl > + import android . app . Activity ; < nl > + import android . content . Context ; < nl > + import android . content . Intent ; < nl > + import android . os . Bundle ; < nl > + import android . support . v4 . content . WakefulBroadcastReceiver ; < nl > + < nl > + import com . google . android . gms . gcm . GoogleCloudMessaging ; < nl > + < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . sdk . ActorSDK ; < nl > + < nl > + public class PushReceiver extends WakefulBroadcastReceiver { < nl > + < nl > + private static final String TAG = " PushReceiver " ; < nl > + < nl > + @ Override < nl > + public void onReceive ( Context context , Intent intent ) { < nl > + GoogleCloudMessaging gcm = GoogleCloudMessaging . getInstance ( context ) ; < nl > + Bundle extras = intent . getExtras ( ) ; < nl > + String messageType = gcm . getMessageType ( intent ) ; < nl > + if ( ! extras . isEmpty ( ) ) { < nl > + if ( GoogleCloudMessaging . MESSAGE _ TYPE _ MESSAGE . equals ( messageType ) ) { < nl > + if ( extras . containsKey ( " seq " ) ) { < nl > + int seq = Integer . parseInt ( extras . getString ( " seq " ) ) ; < nl > + ActorSDK . sharedActor ( ) . getMessenger ( ) . onPushReceived ( seq ) ; < nl > + setResultCode ( Activity . RESULT _ OK ) ; < nl > + Log . d ( TAG , " Push received " ) ; < nl > + } < nl > + } < nl > + } < nl > + completeWakefulIntent ( intent ) ; < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 index 5880022 . . ce072ed 100644 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . sdk . controllers . fragment . settings . ActorSettingsField ; 
 import im . actor . sdk . controllers . fragment . settings . BaseActorSettingsActivity ; 
 import im . actor . sdk . controllers . fragment . settings . BaseActorSettingsFragment ; 
 import im . actor . sdk . intents . ActorIntentFragmentActivity ; 
 + import im . actor . tc . TCMessageHolder ; 
 
 public class Application extends ActorSDKApplication { 
 
 diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TCMessageHolder . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TCMessageHolder . java 
 deleted file mode 100644 
 index a87091a . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TCMessageHolder . java 
 + + + / dev / null 
 @ @ - 1 , 25 + 0 , 0 @ @ 
 - package im . actor ; 
 - 
 - import android . view . ViewGroup ; 
 - import android . widget . TextView ; 
 - import im . actor . core . entity . Message ; 
 - import im . actor . sdk . R ; 
 - import im . actor . sdk . controllers . conversation . messages . BaseCustomHolder ; 
 - import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; 
 - import im . actor . sdk . controllers . conversation . messages . PreprocessedData ; 
 - 
 - public class TCMessageHolder extends BaseCustomHolder { 
 - 
 - TextView text ; 
 - 
 - public TCMessageHolder ( MessagesAdapter adapter , ViewGroup viewGroup , int id , boolean isFullSize ) { 
 - super ( adapter , viewGroup , id , isFullSize ) ; 
 - text = ( TextView ) itemView . findViewById ( R . id . tv _ text ) ; 
 - 
 - } 
 - 
 - @ Override 
 - protected void bindData ( Message message , boolean isUpdated , PreprocessedData preprocessedData ) { 
 - text . setText ( ( ( Application . TCBotMesaage ) message . getContent ( ) ) . getRawJson ( ) ) ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCActor . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCActor . java 
 new file mode 100644 
 index 0000000 . . e9b6bf5 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCActor . java 
 @ @ - 0 , 0 + 1 , 106 @ @ 
 + package im . actor . tc ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + 
 + import im . actor . Application ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . content . JsonContent ; 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . actors . ActorSystem ; 
 + import im . actor . runtime . actors . Props ; 
 + import im . actor . runtime . json . JSONException ; 
 + import im . actor . runtime . json . JSONObject ; 
 + 
 + import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 + 
 + / * * 
 + * Created by root on 12 / 31 / 15 . 
 + * / 
 + public class TCActor extends Actor { 
 + 
 + private HashMap < Integer , ArrayList < Long > > reidMap ; 
 + private HashMap < Integer , Peer > peerMap ; 
 + private ArrayList < Integer > ids ; 
 + private ActorRef check ; 
 + private String url ; 
 + 
 + public TCActor ( String url ) { 
 + this . reidMap = new HashMap < > ( ) ; 
 + this . peerMap = new HashMap < > ( ) ; 
 + this . url = url ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + ids = new ArrayList < > ( ) ; 
 + check = ActorSystem . system ( ) . actorOf ( Props . create ( TCCheckActor . class , new ActorCreator < TCCheckActor > ( ) { 
 + @ Override 
 + public TCCheckActor create ( ) { 
 + return new TCCheckActor ( ids , url , new TCCheckActor . TCCheckCallback ( ) { 
 + @ Override 
 + public void onIdchecked ( int id , JSONObject json ) { 
 + try { 
 + for ( long rid : reidMap . get ( id ) ) { 
 + messenger ( ) . updateJsonMessageContentLocal ( peerMap . get ( id ) , rid , JsonContent . create ( new Application . TCBotMesaage ( ) , json ) ) ; 
 + } 
 + if ( json . getJSONObject ( " data " ) . getString ( " state " ) . equals ( " finished " ) ) { 
 + ids . remove ( id ) ; 
 + reidMap . remove ( id ) ; 
 + peerMap . remove ( id ) ; 
 + } 
 + } catch ( JSONException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + } ) , " actor / tc " ) ; 
 + } 
 + 
 + private void bind ( int id , long rid , Peer peer ) { 
 + ids . add ( id ) ; 
 + peerMap . put ( id , peer ) ; 
 + if ( reidMap . get ( id ) ! = null ) { 
 + reidMap . get ( id ) . add ( rid ) ; 
 + } else { 
 + ArrayList < Long > rids = new ArrayList < > ( ) ; 
 + rids . add ( rid ) ; 
 + reidMap . put ( id , rids ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof Bind ) { 
 + bind ( ( ( Bind ) message ) . getId ( ) , ( ( Bind ) message ) . getRid ( ) , ( ( Bind ) message ) . getPeer ( ) ) ; 
 + } 
 + } 
 + 
 + public static class Bind { 
 + int id ; 
 + long rid ; 
 + Peer peer ; 
 + 
 + public Bind ( int id , long rid , Peer peer ) { 
 + this . id = id ; 
 + this . rid = rid ; 
 + this . peer = peer ; 
 + } 
 + 
 + public int getId ( ) { 
 + return id ; 
 + } 
 + 
 + public long getRid ( ) { 
 + return rid ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + } 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCCheckActor . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCCheckActor . java 
 new file mode 100644 
 index 0000000 . . c30d8f2 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCCheckActor . java 
 @ @ - 0 , 0 + 1 , 87 @ @ 
 + package im . actor . tc ; 
 + 
 + import java . io . BufferedInputStream ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . net . HttpURLConnection ; 
 + import java . net . URL ; 
 + import java . net . URLConnection ; 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . runtime . json . JSONException ; 
 + import im . actor . runtime . json . JSONObject ; 
 + 
 + import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 + 
 + public class TCCheckActor extends Actor { 
 + private ArrayList < Integer > ids ; 
 + private String url ; 
 + private TCCheckCallback callback ; 
 + 
 + public TCCheckActor ( ArrayList < Integer > ids , String url , TCCheckCallback callback ) { 
 + this . ids = ids ; 
 + this . url = url ; 
 + this . callback = callback ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + self ( ) . send ( new Start ( ) ) ; 
 + } 
 + 
 + private void onStart ( ) { 
 + String end = " / httpAuth / app / rest / builds / id : " ; 
 + String getUrl ; 
 + while ( true ) { 
 + if ( ids ! = null & & url ! = null ) { 
 + for ( int i : ids ) { 
 + getUrl = url + end + i ; 
 + try { 
 + HttpURLConnection connection = ( HttpURLConnection ) new URL ( getUrl ) . openConnection ( ) ; 
 + connection . setRequestMethod ( " GET " ) ; 
 + connection . setRequestProperty ( " Accept " , " application / json " ) ; 
 + connection . connect ( ) ; 
 + InputStream in = new BufferedInputStream ( connection . getInputStream ( ) ) ; 
 + 
 + 
 + JSONObject json = new JSONObject ( readStream ( in ) ) ; 
 + json . put ( " url " , url ) ; 
 + callback . onIdchecked ( i , json ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } catch ( JSONException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + 
 + } 
 + try { 
 + Thread . sleep ( 1000 ) ; 
 + } catch ( InterruptedException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + 
 + } 
 + } 
 + 
 + private String readStream ( InputStream is ) { 
 + java . util . Scanner s = new java . util . Scanner ( is ) . useDelimiter ( " \ \ A " ) ; 
 + return s . hasNext ( ) ? s . next ( ) : " " ; 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof Start ) { 
 + onStart ( ) ; 
 + } 
 + } 
 + 
 + public static class Start { 
 + 
 + } 
 + 
 + public interface TCCheckCallback { 
 + void onIdchecked ( int id , JSONObject json ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCMessageHolder . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCMessageHolder . java 
 new file mode 100644 
 index 0000000 . . 1cd7980 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / tc / TCMessageHolder . java 
 @ @ - 0 , 0 + 1 , 69 @ @ 
 + package im . actor . tc ; 
 + 
 + import android . view . ViewGroup ; 
 + import android . widget . TextView ; 
 + 
 + import im . actor . Application ; 
 + import im . actor . core . entity . Message ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . actors . ActorSystem ; 
 + import im . actor . runtime . actors . Props ; 
 + import im . actor . runtime . json . JSONException ; 
 + import im . actor . runtime . json . JSONObject ; 
 + import im . actor . sdk . R ; 
 + import im . actor . sdk . controllers . conversation . messages . BaseCustomHolder ; 
 + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; 
 + import im . actor . sdk . controllers . conversation . messages . PreprocessedData ; 
 + import im . actor . sdk . core . audio . AudioPlayerActor ; 
 + 
 + public class TCMessageHolder extends BaseCustomHolder { 
 + 
 + TextView text ; 
 + protected static ActorRef tcActor ; 
 + 
 + 
 + public TCMessageHolder ( MessagesAdapter adapter , ViewGroup viewGroup , int id , boolean isFullSize ) { 
 + super ( adapter , viewGroup , id , isFullSize ) ; 
 + text = ( TextView ) itemView . findViewById ( R . id . tv _ text ) ; 
 + 
 + } 
 + 
 + @ Override 
 + protected void bindData ( Message message , boolean isUpdated , PreprocessedData preprocessedData ) { 
 + String render = " " ; 
 + JSONObject json = ( ( Application . TCBotMesaage ) message . getContent ( ) ) . getJson ( ) ; 
 + try { 
 + final JSONObject data = json . getJSONObject ( " data " ) ; 
 + 
 + 
 + int id = data . getInt ( " id " ) ; 
 + render + = " id : " + id + " \ n " ; 
 + String state = data . getString ( " state " ) ; 
 + render + = " state : " + state ; 
 + int pr = data . optInt ( " percentageComplete " , 0 ) ; 
 + if ( state . equals ( " running " ) ) { 
 + render + = " progress : " + pr + " % \ n " ; 
 + } 
 + 
 + final String usr = data . getString ( " url " ) ; 
 + if ( tcActor = = null ) { 
 + tcActor = ActorSystem . system ( ) . actorOf ( Props . create ( TCActor . class , new ActorCreator < TCActor > ( ) { 
 + @ Override 
 + public TCActor create ( ) { 
 + return new TCActor ( usr ) ; 
 + } 
 + } ) , " actor / tc " ) ; 
 + 
 + } 
 + 
 + tcActor . send ( new TCActor . Bind ( id , message . getRid ( ) , getPeer ( ) ) ) ; 
 + 
 + } catch ( JSONException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + 
 + text . setText ( render ) ; 
 + 
 + } 
 + }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 index 71da5ab . . 8045a74 100644 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 @ @ - 1 , 11 + 1 , 7 @ @ 
 package im . actor ; 
 
 - import java . util . ArrayList ; 
 - 
 - import im . actor . auth . SignEmailFragment ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . BaseActorSDKDelegate ; 
 - import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; 
 
 / * * 
 * Created by badgr on 16 . 10 . 2015 . 
 @ @ - 15 , 13 + 11 , 11 @ @ public class Application extends android . app . Application { 
 public void onCreate ( ) { 
 super . onCreate ( ) ; 
 ActorSDK . sharedActor ( ) . setDelegate ( new ActorSDKDelegate ( ) ) ; 
 + ActorSDK . sharedActor ( ) . setPushId ( 209133700967L ) ; 
 ActorSDK . sharedActor ( ) . createActor ( this ) ; 
 } 
 
 private class ActorSDKDelegate extends BaseActorSDKDelegate { 
 - @ Override 
 - public BaseAuthFragment getSignFragment ( ) { 
 - return new SignEmailFragment ( ) ; 
 - } 
 + 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java 
 deleted file mode 100644 
 index 37ce216 . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java 
 + + + / dev / null 
 @ @ - 1 , 137 + 0 , 0 @ @ 
 - package im . actor . auth ; 
 - 
 - import android . app . AlertDialog ; 
 - import android . os . Bundle ; 
 - import android . telephony . PhoneNumberFormattingTextWatcher ; 
 - import android . text . Editable ; 
 - import android . text . TextWatcher ; 
 - import android . view . KeyEvent ; 
 - import android . view . LayoutInflater ; 
 - import android . view . View ; 
 - import android . view . ViewGroup ; 
 - import android . view . inputmethod . EditorInfo ; 
 - import android . widget . EditText ; 
 - import android . widget . TextView ; 
 - 
 - import im . actor . sdk . ActorSDK ; 
 - import im . actor . sdk . R ; 
 - import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; 
 - import im . actor . sdk . util . Fonts ; 
 - import im . actor . sdk . util . KeyboardHelper ; 
 - 
 - import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 - 
 - public class SignEmailFragment extends BaseAuthFragment { 
 - 
 - private EditText emailEditText ; 
 - private KeyboardHelper keyboardHelper ; 
 - 
 - @ Override 
 - public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { 
 - View v = inflater . inflate ( R . layout . fragment _ sign _ email , container , false ) ; 
 - 
 - ( ( TextView ) v . findViewById ( R . id . button _ continue _ text ) ) . setTypeface ( Fonts . medium ( ) ) ; 
 - 
 - keyboardHelper = new KeyboardHelper ( getActivity ( ) ) ; 
 - 
 - initView ( v ) ; 
 - 
 - return v ; 
 - } 
 - 
 - @ Override 
 - public void onResume ( ) { 
 - super . onResume ( ) ; 
 - 
 - / / TODO track email auth open 
 - / / messenger ( ) . trackAuthPhoneOpen ( ) ; 
 - 
 - setTitle ( R . string . auth _ email _ title ) ; 
 - 
 - focusEmail ( ) ; 
 - 
 - keyboardHelper . setImeVisibility ( emailEditText , true ) ; 
 - } 
 - 
 - private void initView ( View v ) { 
 - 
 - emailEditText = ( EditText ) v . findViewById ( R . id . tv _ email ) ; 
 - emailEditText . addTextChangedListener ( new PhoneNumberFormattingTextWatcher ( ) ) ; 
 - String email = messenger ( ) . getAuthEmail ( ) ; 
 - if ( email ! = null & & ! email . isEmpty ( ) ) { 
 - emailEditText . setText ( email ) ; 
 - } 
 - emailEditText . setOnEditorActionListener ( new TextView . OnEditorActionListener ( ) { 
 - @ Override 
 - public boolean onEditorAction ( TextView textView , int id , KeyEvent keyEvent ) { 
 - if ( id = = EditorInfo . IME _ ACTION _ GO ) { 
 - requestCode ( ) ; 
 - return true ; 
 - } 
 - return false ; 
 - } 
 - } ) ; 
 - emailEditText . addTextChangedListener ( new TextWatcher ( ) { 
 - @ Override 
 - public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { 
 - 
 - } 
 - 
 - @ Override 
 - public void onTextChanged ( CharSequence s , int start , int before , int count ) { 
 - 
 - } 
 - 
 - @ Override 
 - public void afterTextChanged ( Editable s ) { 
 - / / TODO trackAuthEmailType 
 - / / messenger ( ) . trackAuthPhoneType ( emailEditText . getText ( ) . toString ( ) ) ; 
 - } 
 - } ) ; 
 - 
 - onClick ( v , R . id . button _ continue , new View . OnClickListener ( ) { 
 - @ Override 
 - public void onClick ( View view ) { 
 - requestCode ( ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - private void requestCode ( ) { 
 - final String ACTION = " Request code email " ; 
 - 
 - 
 - if ( emailEditText . getText ( ) . toString ( ) . trim ( ) . length ( ) = = 0 ) { 
 - String message = getString ( R . string . auth _ error _ empty _ email ) ; 
 - new AlertDialog . Builder ( getActivity ( ) ) 
 - . setMessage ( R . string . auth _ error _ empty _ email ) 
 - . setPositiveButton ( R . string . dialog _ ok , null ) 
 - . show ( ) ; 
 - return ; 
 - } 
 - 
 - String rawEmail = emailEditText . getText ( ) . toString ( ) ; 
 - 
 - if ( rawEmail . length ( ) = = 0 ) { 
 - String message = getString ( R . string . auth _ error _ empty _ email ) ; 
 - new AlertDialog . Builder ( getActivity ( ) ) 
 - . setMessage ( R . string . auth _ error _ empty _ email ) 
 - . setPositiveButton ( R . string . dialog _ ok , null ) 
 - . show ( ) ; 
 - return ; 
 - } 
 - 
 - setAuthId ( rawEmail ) ; 
 - 
 - executeAuth ( ActorSDK . sharedActor ( ) . getMessenger ( ) . requestStartEmailAuth ( rawEmail ) , ACTION ) ; 
 - } 
 - 
 - private void focusEmail ( ) { 
 - focus ( emailEditText ) ; 
 - } 
 - 
 - @ Override 
 - public String getHintText ( ) { 
 - return getString ( R . string . auth _ code _ email _ hint ) . replace ( " { 0 } " , " < b > " + getAuthId ( ) + " < / b > " ) ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java b / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java 
 deleted file mode 100644 
 index c74e30f . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java 
 + + + / dev / null 
 @ @ - 1 , 100 + 0 , 0 @ @ 
 - package im . actor . core ; 
 - 
 - import android . content . Context ; 
 - 
 - import com . google . android . gms . gcm . GoogleCloudMessaging ; 
 - 
 - import java . io . IOException ; 
 - 
 - import im . actor . messenger . app . core . ActorSDK ; 
 - import im . actor . runtime . Log ; 
 - import im . actor . runtime . actors . Actor ; 
 - 
 - / * * 
 - * GCM push implementation for Actor push registration . 
 - * This actor is used for load GCM token and register it on server . 
 - * / 
 - public class AndroidPushActor extends Actor { 
 - 
 - private static final String TAG = " im . actor . core . AndroidPushActor " ; 
 - 
 - private final AndroidMessenger messenger ; 
 - private final Context context ; 
 - private boolean isRegistered ; 
 - 
 - public AndroidPushActor ( Context context , AndroidMessenger messenger ) { 
 - this . messenger = messenger ; 
 - this . context = context ; 
 - } 
 - 
 - @ Override 
 - public void preStart ( ) { 
 - super . preStart ( ) ; 
 - 
 - isRegistered = messenger . getPreferences ( ) . getBool ( " push _ registered " , false ) ; 
 - 
 - if ( ! isRegistered ) { 
 - Log . d ( TAG , " Requesting push token . . . " ) ; 
 - 
 - / / TODO : Add backoff 
 - new Thread ( ) { 
 - @ Override 
 - public void run ( ) { 
 - while ( true ) { 
 - GoogleCloudMessaging cloudMessaging = GoogleCloudMessaging . getInstance ( context ) ; 
 - try { 
 - Log . d ( TAG , " Requesting push token iteration . . . " ) ; 
 - String regId = cloudMessaging . register ( " " + ActorSDK . sharedActor ( ) . getGcmProjectId ( ) ) ; 
 - if ( regId ! = null ) { 
 - Log . d ( TAG , " Token loaded " ) ; 
 - self ( ) . send ( new PushRegistered ( regId ) ) ; 
 - return ; 
 - } else { 
 - Log . d ( TAG , " Unable to load Token " ) ; 
 - } 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - Log . d ( TAG , " Waiting for next attempt " ) ; 
 - try { 
 - Thread . sleep ( 1000 ) ; 
 - } catch ( InterruptedException e1 ) { 
 - e1 . printStackTrace ( ) ; 
 - return ; 
 - } 
 - } 
 - } 
 - } . start ( ) ; 
 - } else { 
 - Log . d ( TAG , " Already registered token " ) ; 
 - } 
 - } 
 - 
 - private void onPushRegistered ( String token ) { 
 - isRegistered = true ; 
 - messenger . getPreferences ( ) . putBool ( " push _ registered " , true ) ; 
 - messenger . registerGooglePush ( ActorSDK . sharedActor ( ) . getGcmProjectId ( ) , token ) ; 
 - } 
 - 
 - @ Override 
 - public void onReceive ( Object message ) { 
 - if ( message instanceof PushRegistered ) { 
 - PushRegistered pushRegistered = ( PushRegistered ) message ; 
 - onPushRegistered ( pushRegistered . getToken ( ) ) ; 
 - } else { 
 - drop ( message ) ; 
 - } 
 - } 
 - 
 - public static class PushRegistered { 
 - private String token ; 
 - 
 - public PushRegistered ( String token ) { 
 - this . token = token ; 
 - } 
 - 
 - public String getToken ( ) { 
 - return token ; 
 - } 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java b / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java 
 deleted file mode 100644 
 index 8dbd762 . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - package im . actor . messenger ; 
 - 
 - import android . app . Activity ; 
 - import android . content . Context ; 
 - import android . content . Intent ; 
 - import android . os . Bundle ; 
 - import android . support . v4 . content . WakefulBroadcastReceiver ; 
 - 
 - import com . google . android . gms . gcm . GoogleCloudMessaging ; 
 - 
 - import im . actor . runtime . Log ; 
 - 
 - 
 - import static im . actor . messenger . app . core . ActorSDK . messenger ; 
 - 
 - public class PushReceiver extends WakefulBroadcastReceiver { 
 - 
 - private static final String TAG = " PushReceiver " ; 
 - 
 - @ Override 
 - public void onReceive ( Context context , Intent intent ) { 
 - GoogleCloudMessaging gcm = GoogleCloudMessaging . getInstance ( context ) ; 
 - Bundle extras = intent . getExtras ( ) ; 
 - String messageType = gcm . getMessageType ( intent ) ; 
 - if ( ! extras . isEmpty ( ) ) { 
 - if ( GoogleCloudMessaging . MESSAGE _ TYPE _ MESSAGE . equals ( messageType ) ) { 
 - if ( extras . containsKey ( " seq " ) ) { 
 - int seq = Integer . parseInt ( extras . getString ( " seq " ) ) ; 
 - messenger ( ) . onPushReceived ( seq ) ; 
 - setResultCode ( Activity . RESULT _ OK ) ; 
 - Log . d ( TAG , " Push received " ) ; 
 - } 
 - } 
 - } 
 - completeWakefulIntent ( intent ) ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / build . gradle b / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 index 5153388 . . 8c04484 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 + + + b / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 @ @ - 75 , 6 + 75 , 10 @ @ dependencies { 
 compile ' com . android . support : palette - v7 : 23 . 1 . 0 ' 
 compile ' com . android . support : recyclerview - v7 : 23 . 1 . 0 ' 
 compile ' com . android . support : design : 23 . 1 . 0 ' 
 + 
 + / / GCM 
 + compile ' com . google . android . gms : play - services - gcm : 7 . 5 . 0 ' 
 + 
 } 
 
 / / 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 index 1492015 . . ef17a74 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 @ @ - 18 , 14 + 18 , 20 @ @ import im . actor . core . ApiConfiguration ; 
 import im . actor . core . ConfigurationBuilder ; 
 import im . actor . core . DeviceCategory ; 
 import im . actor . core . PlatformType ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . Props ; 
 import im . actor . sdk . core . AndroidNotifications ; 
 import im . actor . sdk . core . AndroidPhoneBook ; 
 + import im . actor . sdk . core . AndroidPushActor ; 
 import im . actor . sdk . intents . ActivityManager ; 
 import im . actor . sdk . services . KeepAliveService ; 
 import im . actor . sdk . util . Devices ; 
 import im . actor . sdk . view . emoji . SmileProcessor ; 
 import im . actor . runtime . android . AndroidContext ; 
 
 + import static im . actor . runtime . actors . ActorSystem . system ; 
 + 
 + 
 public class ActorSDK { 
 
 
 @ @ - 61 , 6 + 67 , 11 @ @ public class ActorSDK { 
 * / 
 private String apiAppKey = " 4295f9666fad3faf2d04277fe7a0c40ff39a85d313de5348ad8ffa650ad71855 " ; 
 / * * 
 + * Push Registration Id 
 + * / 
 + private long pushId = 0 ; 
 + 
 + / * * 
 * Is Keeping app alive enabled 
 * / 
 private boolean isKeepAliveEnabled = false ; 
 @ @ - 71 , 7 + 82 , 8 @ @ public class ActorSDK { 
 / * * 
 * ActivityManager 
 * / 
 - private ActivityManager activityManager = new ActivityManager ( ) ; 
 + private ActivityManager activityManager = new ActivityManager ( ) ; 
 + 
 private ActorSDK ( ) { 
 endpoints . add ( " tls : / / front1 - mtproto - api - rev2 . actor . im " ) ; 
 endpoints . add ( " tls : / / front2 - mtproto - api - rev2 . actor . im " ) ; 
 @ @ - 91 , 7 + 103 , 7 @ @ public class ActorSDK { 
 / / SDK Initialization 
 / / 
 
 - public void createActor ( Application application ) { 
 + public void createActor ( final Application application ) { 
 
 this . application = application ; 
 
 @ @ - 135 , 6 + 147 , 19 @ @ public class ActorSDK { 
 AlarmManager alarm = ( AlarmManager ) application . getSystemService ( Context . ALARM _ SERVICE ) ; 
 alarm . setRepeating ( AlarmManager . RTC , System . currentTimeMillis ( ) , 30 * 1000 , pendingIntent ) ; 
 } 
 + 
 + / / 
 + / / GCM 
 + / / 
 + if ( pushId ! = 0 ) { 
 + system ( ) . actorOf ( Props . create ( AndroidPushActor . class , new ActorCreator < AndroidPushActor > ( ) { 
 + @ Override 
 + public AndroidPushActor create ( ) { 
 + return new AndroidPushActor ( application , messenger ) ; 
 + } 
 + } ) , " actor / android / push " ) ; 
 + } 
 + 
 } 
 
 public void startMessagingApp ( Activity context ) { 
 @ @ - 240 , 6 + 265 , 22 @ @ public class ActorSDK { 
 this . isKeepAliveEnabled = isKeepAliveEnabled ; 
 } 
 
 + / * * 
 + * Getting Push Registration Id 
 + * 
 + * @ return pushId 
 + * / 
 + public long getPushId ( ) { 
 + return pushId ; 
 + } 
 + 
 + / * * 
 + * Setting Push Registration Id 
 + * / 
 + public void setPushId ( long pushId ) { 
 + this . pushId = pushId ; 
 + } 
 + 
 public ActorSDKDelegate getDelegate ( ) { 
 return delegate ; 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java 
 new file mode 100644 
 index 0000000 . . d65a7a8 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java 
 @ @ - 0 , 0 + 1 , 101 @ @ 
 + package im . actor . sdk . core ; 
 + 
 + import android . content . Context ; 
 + 
 + import com . google . android . gms . gcm . GoogleCloudMessaging ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . core . AndroidMessenger ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . sdk . ActorSDK ; 
 + 
 + / * * 
 + * GCM push implementation for Actor push registration . 
 + * This actor is used for load GCM token and register it on server . 
 + * / 
 + public class AndroidPushActor extends Actor { 
 + 
 + private static final String TAG = " im . actor . core . AndroidPushActor " ; 
 + 
 + private final AndroidMessenger messenger ; 
 + private final Context context ; 
 + private boolean isRegistered ; 
 + 
 + public AndroidPushActor ( Context context , AndroidMessenger messenger ) { 
 + this . messenger = messenger ; 
 + this . context = context ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + 
 + isRegistered = messenger . getPreferences ( ) . getBool ( " push _ registered " , false ) ; 
 + 
 + if ( ! isRegistered ) { 
 + Log . d ( TAG , " Requesting push token . . . " ) ; 
 + 
 + / / TODO : Add backoff 
 + new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + while ( true ) { 
 + GoogleCloudMessaging cloudMessaging = GoogleCloudMessaging . getInstance ( context ) ; 
 + try { 
 + Log . d ( TAG , " Requesting push token iteration . . . " ) ; 
 + String regId = cloudMessaging . register ( " " + ActorSDK . sharedActor ( ) . getPushId ( ) ) ; 
 + if ( regId ! = null ) { 
 + Log . d ( TAG , " Token loaded " ) ; 
 + self ( ) . send ( new PushRegistered ( regId ) ) ; 
 + return ; 
 + } else { 
 + Log . d ( TAG , " Unable to load Token " ) ; 
 + } 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + Log . d ( TAG , " Waiting for next attempt " ) ; 
 + try { 
 + Thread . sleep ( 1000 ) ; 
 + } catch ( InterruptedException e1 ) { 
 + e1 . printStackTrace ( ) ; 
 + return ; 
 + } 
 + } 
 + } 
 + } . start ( ) ; 
 + } else { 
 + Log . d ( TAG , " Already registered token " ) ; 
 + } 
 + } 
 + 
 + private void onPushRegistered ( String token ) { 
 + isRegistered = true ; 
 + messenger . getPreferences ( ) . putBool ( " push _ registered " , true ) ; 
 + messenger . registerGooglePush ( ActorSDK . sharedActor ( ) . getPushId ( ) , token ) ; 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof PushRegistered ) { 
 + PushRegistered pushRegistered = ( PushRegistered ) message ; 
 + onPushRegistered ( pushRegistered . getToken ( ) ) ; 
 + } else { 
 + drop ( message ) ; 
 + } 
 + } 
 + 
 + public static class PushRegistered { 
 + private String token ; 
 + 
 + public PushRegistered ( String token ) { 
 + this . token = token ; 
 + } 
 + 
 + public String getToken ( ) { 
 + return token ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java 
 new file mode 100644 
 index 0000000 . . 425cfb1 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + package im . actor . sdk . core ; 
 + 
 + import android . app . Activity ; 
 + import android . content . Context ; 
 + import android . content . Intent ; 
 + import android . os . Bundle ; 
 + import android . support . v4 . content . WakefulBroadcastReceiver ; 
 + 
 + import com . google . android . gms . gcm . GoogleCloudMessaging ; 
 + 
 + import im . actor . runtime . Log ; 
 + import im . actor . sdk . ActorSDK ; 
 + 
 + public class PushReceiver extends WakefulBroadcastReceiver { 
 + 
 + private static final String TAG = " PushReceiver " ; 
 + 
 + @ Override 
 + public void onReceive ( Context context , Intent intent ) { 
 + GoogleCloudMessaging gcm = GoogleCloudMessaging . getInstance ( context ) ; 
 + Bundle extras = intent . getExtras ( ) ; 
 + String messageType = gcm . getMessageType ( intent ) ; 
 + if ( ! extras . isEmpty ( ) ) { 
 + if ( GoogleCloudMessaging . MESSAGE _ TYPE _ MESSAGE . equals ( messageType ) ) { 
 + if ( extras . containsKey ( " seq " ) ) { 
 + int seq = Integer . parseInt ( extras . getString ( " seq " ) ) ; 
 + ActorSDK . sharedActor ( ) . getMessenger ( ) . onPushReceived ( seq ) ; 
 + setResultCode ( Activity . RESULT _ OK ) ; 
 + Log . d ( TAG , " Push received " ) ; 
 + } 
 + } 
 + } 
 + completeWakefulIntent ( intent ) ; 
 + } 
 + }
