BLEU SCORE: 0.17065326771827602

TEST MSG: fix ( js ) : Fixing JS compilation errors
GENERATED MSG: feat ( core + js ) : Adding chat hiding

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index d511892 . . b10a810 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 448 , 17 + 448 , 9 @ @ public class JsFacade implements Exportable { < nl > return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > @ Override < nl > public void execute ( ) { < nl > - messenger . updateMessage ( peer . convert ( ) , newText , Long . parseLong ( id ) ) . start ( new CommandCallback < Void > ( ) { < nl > - @ Override < nl > - public void onResult ( Void res ) { < nl > - resolve ( ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( Exception e ) { < nl > - reject ( e . getMessage ( ) ) ; < nl > - } < nl > - } ) ; < nl > + messenger . updateMessage ( peer . convert ( ) , newText , Long . parseLong ( id ) ) < nl > + . then ( r - > resolve ( ) ) < nl > + . failure ( e - > reject ( e . getMessage ( ) ) ) ; < nl > } < nl > } ) ; < nl > } < nl > @ @ - 1233 , 39 + 1225 , 39 @ @ public class JsFacade implements Exportable { < nl > return jsRes ; < nl > } < nl > < nl > - @ UsedByApp < nl > - public JsPromise findGroups ( ) { < nl > - return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > - @ Override < nl > - public void execute ( ) { < nl > - messenger . findPeers ( PeerSearchType . GROUPS ) . start ( new CommandCallback < List < PeerSearchEntity > > ( ) { < nl > - @ Override < nl > - public void onResult ( List < PeerSearchEntity > res ) { < nl > - Log . d ( TAG , " findGroups : result " ) ; < nl > - JsArray < JsPeerSearchResult > jsRes = JsArray . createArray ( ) . cast ( ) ; < nl > - for ( PeerSearchEntity s : res ) { < nl > - if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP ) { < nl > - jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) , < nl > - s . getDescription ( ) , s . getMembersCount ( ) , ( int ) ( s . getDate ( ) / 1000L ) , < nl > - messenger . buildPeerInfo ( Peer . user ( s . getCreatorUid ( ) ) ) , s . isPublic ( ) , < nl > - s . isJoined ( ) ) ) ; < nl > - } else if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > - jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) ) ) ; < nl > - } < nl > - / / jsRes . push ( ) ; < nl > - } < nl > - resolve ( jsRes ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( Exception e ) { < nl > - Log . d ( TAG , " findGroups : error " ) ; < nl > - reject ( e . getMessage ( ) ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > + / / @ UsedByApp < nl > + / / public JsPromise findGroups ( ) { < nl > + / / return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > + / / @ Override < nl > + / / public void execute ( ) { < nl > + / / messenger . findPeers ( PeerSearchType . GROUPS ) . start ( new CommandCallback < List < PeerSearchEntity > > ( ) { < nl > + / / @ Override < nl > + / / public void onResult ( List < PeerSearchEntity > res ) { < nl > + / / Log . d ( TAG , " findGroups : result " ) ; < nl > + / / JsArray < JsPeerSearchResult > jsRes = JsArray . createArray ( ) . cast ( ) ; < nl > + / / for ( PeerSearchEntity s : res ) { < nl > + / / if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP ) { < nl > + / / jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) , < nl > + / / s . getDescription ( ) , s . getMembersCount ( ) , ( int ) ( s . getDate ( ) / 1000L ) , < nl > + / / messenger . buildPeerInfo ( Peer . user ( s . getCreatorUid ( ) ) ) , s . isPublic ( ) , < nl > + / / s . isJoined ( ) ) ) ; < nl > + / / } else if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + / / jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) ) ) ; < nl > + / / } < nl > + / / / / jsRes . push ( ) ; < nl > + / / } < nl > + / / resolve ( jsRes ) ; < nl > + / / } < nl > + / / < nl > + / / @ Override < nl > + / / public void onError ( Exception e ) { < nl > + / / Log . d ( TAG , " findGroups : error " ) ; < nl > + / / reject ( e . getMessage ( ) ) ; < nl > + / / } < nl > + / / } ) ; < nl > + / / } < nl > + / / } ) ; < nl > + / / } < nl > < nl > @ UsedByApp < nl > public void changeMyAvatar ( final JsFile file ) { < nl > @ @ - 1329 , 43 + 1321 , 19 @ @ public class JsFacade implements Exportable { < nl > return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > @ Override < nl > public void execute ( ) { < nl > - / / noinspection ConstantConditions < nl > - messenger . editGroupTitle ( gid , newTitle ) . start ( new CommandCallback < Void > ( ) { < nl > - @ Override < nl > - public void onResult ( Void res ) { < nl > - Log . d ( TAG , " editGroupTitle : result " ) ; < nl > - resolve ( ) ; < nl > - } < nl > < nl > - @ Override < nl > - public void onError ( Exception e ) { < nl > - Log . d ( TAG , " editGroupTitle : error " ) ; < nl > - reject ( e . getMessage ( ) ) ; < nl > - } < nl > - } ) ; < nl > + messenger . editGroupTitle ( gid , newTitle ) < nl > + . then ( r - > resolve ( ) ) < nl > + . failure ( e - > reject ( e . getMessage ( ) ) ) ; < nl > } < nl > + < nl > } ) ; < nl > } < nl > < nl > + < nl > @ UsedByApp < nl > public JsPromise editGroupAbout ( final int gid , final String newAbout ) { < nl > - return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > - @ Override < nl > - public void execute ( ) { < nl > - messenger . editGroupAbout ( gid , newAbout ) . start ( new CommandCallback < Void > ( ) { < nl > - @ Override < nl > - public void onResult ( Void res ) { < nl > - resolve ( ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( Exception e ) { < nl > - Log . e ( TAG , e ) ; < nl > - reject ( e . getMessage ( ) ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > + return JsPromise . from ( messenger . editGroupAbout ( gid , newAbout ) . map ( r - > null ) ) ; < nl > } < nl > < nl > @ UsedByApp < nl > @ @ - 1386 , 19 + 1354 , 9 @ @ public class JsFacade implements Exportable { < nl > public void execute ( ) { < nl > String avatarDescriptor = file ! = null ? provider . registerUploadFile ( file ) : null ; < nl > / / noinspection ConstantConditions < nl > - messenger . createGroup ( title , avatarDescriptor , uids ) . start ( new CommandCallback < Integer > ( ) { < nl > - @ Override < nl > - public void onResult ( Integer res ) { < nl > - Log . d ( TAG , " createGroup : result " ) ; < nl > - resolve ( JsPeer . create ( Peer . group ( res ) ) ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( Exception e ) { < nl > - Log . d ( TAG , " createGroup : error " ) ; < nl > - reject ( e . getMessage ( ) ) ; < nl > - } < nl > - } ) ; < nl > + messenger . createGroup ( title , avatarDescriptor , uids ) < nl > + . then ( r - > resolve ( JsPeer . create ( Peer . group ( r ) ) ) ) < nl > + . failure ( e - > reject ( e . getMessage ( ) ) ) ; < nl > } < nl > } ) ; < nl > } < nl > @ @ - 1451 , 25 + 1409 , 7 @ @ public class JsFacade implements Exportable { < nl > < nl > @ UsedByApp < nl > public JsPromise leaveGroup ( final int gid ) { < nl > - return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > - @ Override < nl > - public void execute ( ) { < nl > - / / noinspection ConstantConditions < nl > - messenger . leaveGroup ( gid ) . start ( new CommandCallback < Void > ( ) { < nl > - @ Override < nl > - public void onResult ( Void res ) { < nl > - Log . d ( TAG , " leaveGroup : result " ) ; < nl > - resolve ( ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( Exception e ) { < nl > - Log . d ( TAG , " leaveGroup : error " ) ; < nl > - reject ( e . getMessage ( ) ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > + return JsPromise . from ( messenger . leaveGroup ( gid ) . map ( r - > null ) ) ; < nl > } < nl > < nl > @ UsedByApp < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java < nl > index 65221f2 . . 82dd212 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java < nl > @ @ - 22 , 10 + 22 , 8 @ @ import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . Storage ; < nl > - import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorCancellable ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > - import im . actor . runtime . actors . Cancellable ; < nl > - import im . actor . runtime . actors . Props ; < nl > < nl > import static im . actor . runtime . actors . ActorSystem . system ; < nl > < nl > @ @ - 137 , 7 + 135 , 7 @ @ public class JsFilesModule extends AbsModule { < nl > private boolean isLoading = false ; < nl > private JsFilesModule filesModule ; < nl > private ArrayList < FileRequest > filesQueue = new ArrayList < > ( ) ; < nl > - private Cancellable performCancellable ; < nl > + private ActorCancellable performCancellable ; < nl > < nl > public FileBinderActor ( JsFilesModule filesModule , ModuleContext context ) { < nl > super ( context ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java < nl > index a4137ea . . 0be53dc 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java < nl > @ @ - 5 , 10 + 5 , 8 @ @ import im . actor . core . js . providers . electron . JsElectronApp ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleActor ; < nl > import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorCancellable ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > - import im . actor . runtime . actors . Cancellable ; < nl > - import im . actor . runtime . actors . Props ; < nl > < nl > import static im . actor . runtime . actors . ActorSystem . system ; < nl > < nl > @ @ - 41 , 7 + 39 , 7 @ @ public class JsIdleModule extends AbsModule { < nl > < nl > private boolean isAppVisible = true ; < nl > private JsMessenger messenger ; < nl > - private Cancellable flushCancellable ; < nl > + private ActorCancellable flushCancellable ; < nl > private boolean isElectron = JsElectronApp . isElectron ( ) ; < nl > < nl > public IdleActor ( JsMessenger messenger , ModuleContext context ) {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 11f85fc . . f431f95 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 462 , 6 + 462 , 27 @ @ public class JsFacade implements Exportable { < nl > } ) ; < nl > } < nl > < nl > + public JsPromise hideChat ( final JsPeer peer ) { < nl > + return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > + @ Override < nl > + public void execute ( ) { < nl > + messenger . hideChat ( peer . convert ( ) ) . start ( new CommandCallback < Boolean > ( ) { < nl > + @ Override < nl > + public void onResult ( Boolean res ) { < nl > + Log . d ( TAG , " hideChat : result " ) ; < nl > + resolve ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + Log . d ( TAG , " hideChat : error " ) ; < nl > + reject ( e . getMessage ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > / / Peers < nl > < nl > public JsPeer getUserPeer ( int uid ) { < nl > @ @ - 858 , 7 + 879 , 7 @ @ public class JsFacade implements Exportable { < nl > return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > @ Override < nl > public void execute ( ) { < nl > - String avatarDescriptor = provider . registerUploadFile ( file ) ; < nl > + String avatarDescriptor = file ! = null ? provider . registerUploadFile ( file ) : null ; < nl > / / noinspection ConstantConditions < nl > messenger . createGroup ( title , avatarDescriptor , uids ) . start ( new CommandCallback < Integer > ( ) { < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index b59506e . . 0202f68 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 703 , 6 + 703 , 17 @ @ public class Messenger { < nl > } < nl > < nl > / * * < nl > + * Hide chat < nl > + * < nl > + * @ param peer destination peer < nl > + * @ return Command for execution < nl > + * / < nl > + @ ObjectiveCName ( " hideChatCommandWithPeer : " ) < nl > + public Command < Boolean > hideChat ( Peer peer ) { < nl > + return modules . getMessagesModule ( ) . hideChat ( peer ) ; < nl > + } < nl > + < nl > + / * * < nl > * Save message draft < nl > * < nl > * @ param peer destination peer < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index bfbd171 . . a883a25 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 16 , 6 + 16 , 7 @ @ import im . actor . core . api . ApiPeerType ; < nl > import im . actor . core . api . base . SeqUpdate ; < nl > import im . actor . core . api . rpc . RequestClearChat ; < nl > import im . actor . core . api . rpc . RequestDeleteChat ; < nl > + import im . actor . core . api . rpc . RequestHideDialog ; < nl > import im . actor . core . api . rpc . ResponseSeq ; < nl > import im . actor . core . api . updates . UpdateChatClear ; < nl > import im . actor . core . api . updates . UpdateChatDelete ; < nl > @ @ - 366 , 7 + 367 , 7 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > @ Override < nl > public void start ( final CommandCallback < Boolean > callback ) { < nl > ApiOutPeer outPeer ; < nl > - final ApiPeer apiPeer ; < nl > + final ApiPeer apiPeer = buildApiPeer ( peer ) ; < nl > if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > if ( user = = null ) { < nl > @ @ - 380 , 8 + 381 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } < nl > outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , < nl > user . getAccessHash ( ) ) ; < nl > - apiPeer = new ApiPeer ( ApiPeerType . PRIVATE , < nl > - user . getUid ( ) ) ; < nl > } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > if ( group = = null ) { < nl > @ @ - 395 , 8 + 394 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } < nl > outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , < nl > group . getAccessHash ( ) ) ; < nl > - apiPeer = new ApiPeer ( ApiPeerType . GROUP , < nl > - group . getGroupId ( ) ) ; < nl > } else { < nl > runOnUiThread ( new Runnable ( ) { < nl > @ Override < nl > @ @ - 509 , 6 + 506 , 87 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } ; < nl > } < nl > < nl > + public Command < Boolean > hideChat ( final Peer peer ) { < nl > + return new Command < Boolean > ( ) { < nl > + @ Override < nl > + public void start ( final CommandCallback < Boolean > callback ) { < nl > + ApiOutPeer outPeer ; < nl > + final ApiPeer apiPeer ; < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > + if ( user = = null ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , < nl > + user . getAccessHash ( ) ) ; < nl > + apiPeer = new ApiPeer ( ApiPeerType . PRIVATE , < nl > + user . getUid ( ) ) ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; < nl > + if ( group = = null ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , < nl > + group . getAccessHash ( ) ) ; < nl > + apiPeer = new ApiPeer ( ApiPeerType . GROUP , < nl > + group . getGroupId ( ) ) ; < nl > + } else { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( new RpcInternalException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + return ; < nl > + } < nl > + request ( new RequestHideDialog ( outPeer ) , new RpcCallback < ResponseSeq > ( ) { < nl > + @ Override < nl > + public void onResult ( ResponseSeq response ) { < nl > + / / TODO : Implement ? < nl > + / / updates ( ) . onUpdateReceived ( new SeqUpdate ( response . getSeq ( ) , < nl > + / / response . getState ( ) , < nl > + / / UpdateChatClear . HEADER , < nl > + / / new UpdateChatClear ( apiPeer ) . toByteArray ( ) ) ) ; < nl > + updates ( ) . executeAfter ( response . getSeq ( ) , < nl > + new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onResult ( true ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( final RpcException e ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > public void resetModule ( ) { < nl > / / TODO : Implement < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index d511892 . . b10a810 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 448 , 17 + 448 , 9 @ @ public class JsFacade implements Exportable { 
 return JsPromise . create ( new JsPromiseExecutor ( ) { 
 @ Override 
 public void execute ( ) { 
 - messenger . updateMessage ( peer . convert ( ) , newText , Long . parseLong ( id ) ) . start ( new CommandCallback < Void > ( ) { 
 - @ Override 
 - public void onResult ( Void res ) { 
 - resolve ( ) ; 
 - } 
 - 
 - @ Override 
 - public void onError ( Exception e ) { 
 - reject ( e . getMessage ( ) ) ; 
 - } 
 - } ) ; 
 + messenger . updateMessage ( peer . convert ( ) , newText , Long . parseLong ( id ) ) 
 + . then ( r - > resolve ( ) ) 
 + . failure ( e - > reject ( e . getMessage ( ) ) ) ; 
 } 
 } ) ; 
 } 
 @ @ - 1233 , 39 + 1225 , 39 @ @ public class JsFacade implements Exportable { 
 return jsRes ; 
 } 
 
 - @ UsedByApp 
 - public JsPromise findGroups ( ) { 
 - return JsPromise . create ( new JsPromiseExecutor ( ) { 
 - @ Override 
 - public void execute ( ) { 
 - messenger . findPeers ( PeerSearchType . GROUPS ) . start ( new CommandCallback < List < PeerSearchEntity > > ( ) { 
 - @ Override 
 - public void onResult ( List < PeerSearchEntity > res ) { 
 - Log . d ( TAG , " findGroups : result " ) ; 
 - JsArray < JsPeerSearchResult > jsRes = JsArray . createArray ( ) . cast ( ) ; 
 - for ( PeerSearchEntity s : res ) { 
 - if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP ) { 
 - jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) , 
 - s . getDescription ( ) , s . getMembersCount ( ) , ( int ) ( s . getDate ( ) / 1000L ) , 
 - messenger . buildPeerInfo ( Peer . user ( s . getCreatorUid ( ) ) ) , s . isPublic ( ) , 
 - s . isJoined ( ) ) ) ; 
 - } else if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . PRIVATE ) { 
 - jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) ) ) ; 
 - } 
 - / / jsRes . push ( ) ; 
 - } 
 - resolve ( jsRes ) ; 
 - } 
 - 
 - @ Override 
 - public void onError ( Exception e ) { 
 - Log . d ( TAG , " findGroups : error " ) ; 
 - reject ( e . getMessage ( ) ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 - } 
 + / / @ UsedByApp 
 + / / public JsPromise findGroups ( ) { 
 + / / return JsPromise . create ( new JsPromiseExecutor ( ) { 
 + / / @ Override 
 + / / public void execute ( ) { 
 + / / messenger . findPeers ( PeerSearchType . GROUPS ) . start ( new CommandCallback < List < PeerSearchEntity > > ( ) { 
 + / / @ Override 
 + / / public void onResult ( List < PeerSearchEntity > res ) { 
 + / / Log . d ( TAG , " findGroups : result " ) ; 
 + / / JsArray < JsPeerSearchResult > jsRes = JsArray . createArray ( ) . cast ( ) ; 
 + / / for ( PeerSearchEntity s : res ) { 
 + / / if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP ) { 
 + / / jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) , 
 + / / s . getDescription ( ) , s . getMembersCount ( ) , ( int ) ( s . getDate ( ) / 1000L ) , 
 + / / messenger . buildPeerInfo ( Peer . user ( s . getCreatorUid ( ) ) ) , s . isPublic ( ) , 
 + / / s . isJoined ( ) ) ) ; 
 + / / } else if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + / / jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) ) ) ; 
 + / / } 
 + / / / / jsRes . push ( ) ; 
 + / / } 
 + / / resolve ( jsRes ) ; 
 + / / } 
 + / / 
 + / / @ Override 
 + / / public void onError ( Exception e ) { 
 + / / Log . d ( TAG , " findGroups : error " ) ; 
 + / / reject ( e . getMessage ( ) ) ; 
 + / / } 
 + / / } ) ; 
 + / / } 
 + / / } ) ; 
 + / / } 
 
 @ UsedByApp 
 public void changeMyAvatar ( final JsFile file ) { 
 @ @ - 1329 , 43 + 1321 , 19 @ @ public class JsFacade implements Exportable { 
 return JsPromise . create ( new JsPromiseExecutor ( ) { 
 @ Override 
 public void execute ( ) { 
 - / / noinspection ConstantConditions 
 - messenger . editGroupTitle ( gid , newTitle ) . start ( new CommandCallback < Void > ( ) { 
 - @ Override 
 - public void onResult ( Void res ) { 
 - Log . d ( TAG , " editGroupTitle : result " ) ; 
 - resolve ( ) ; 
 - } 
 
 - @ Override 
 - public void onError ( Exception e ) { 
 - Log . d ( TAG , " editGroupTitle : error " ) ; 
 - reject ( e . getMessage ( ) ) ; 
 - } 
 - } ) ; 
 + messenger . editGroupTitle ( gid , newTitle ) 
 + . then ( r - > resolve ( ) ) 
 + . failure ( e - > reject ( e . getMessage ( ) ) ) ; 
 } 
 + 
 } ) ; 
 } 
 
 + 
 @ UsedByApp 
 public JsPromise editGroupAbout ( final int gid , final String newAbout ) { 
 - return JsPromise . create ( new JsPromiseExecutor ( ) { 
 - @ Override 
 - public void execute ( ) { 
 - messenger . editGroupAbout ( gid , newAbout ) . start ( new CommandCallback < Void > ( ) { 
 - @ Override 
 - public void onResult ( Void res ) { 
 - resolve ( ) ; 
 - } 
 - 
 - @ Override 
 - public void onError ( Exception e ) { 
 - Log . e ( TAG , e ) ; 
 - reject ( e . getMessage ( ) ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 + return JsPromise . from ( messenger . editGroupAbout ( gid , newAbout ) . map ( r - > null ) ) ; 
 } 
 
 @ UsedByApp 
 @ @ - 1386 , 19 + 1354 , 9 @ @ public class JsFacade implements Exportable { 
 public void execute ( ) { 
 String avatarDescriptor = file ! = null ? provider . registerUploadFile ( file ) : null ; 
 / / noinspection ConstantConditions 
 - messenger . createGroup ( title , avatarDescriptor , uids ) . start ( new CommandCallback < Integer > ( ) { 
 - @ Override 
 - public void onResult ( Integer res ) { 
 - Log . d ( TAG , " createGroup : result " ) ; 
 - resolve ( JsPeer . create ( Peer . group ( res ) ) ) ; 
 - } 
 - 
 - @ Override 
 - public void onError ( Exception e ) { 
 - Log . d ( TAG , " createGroup : error " ) ; 
 - reject ( e . getMessage ( ) ) ; 
 - } 
 - } ) ; 
 + messenger . createGroup ( title , avatarDescriptor , uids ) 
 + . then ( r - > resolve ( JsPeer . create ( Peer . group ( r ) ) ) ) 
 + . failure ( e - > reject ( e . getMessage ( ) ) ) ; 
 } 
 } ) ; 
 } 
 @ @ - 1451 , 25 + 1409 , 7 @ @ public class JsFacade implements Exportable { 
 
 @ UsedByApp 
 public JsPromise leaveGroup ( final int gid ) { 
 - return JsPromise . create ( new JsPromiseExecutor ( ) { 
 - @ Override 
 - public void execute ( ) { 
 - / / noinspection ConstantConditions 
 - messenger . leaveGroup ( gid ) . start ( new CommandCallback < Void > ( ) { 
 - @ Override 
 - public void onResult ( Void res ) { 
 - Log . d ( TAG , " leaveGroup : result " ) ; 
 - resolve ( ) ; 
 - } 
 - 
 - @ Override 
 - public void onError ( Exception e ) { 
 - Log . d ( TAG , " leaveGroup : error " ) ; 
 - reject ( e . getMessage ( ) ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 + return JsPromise . from ( messenger . leaveGroup ( gid ) . map ( r - > null ) ) ; 
 } 
 
 @ UsedByApp 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java 
 index 65221f2 . . 82dd212 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java 
 @ @ - 22 , 10 + 22 , 8 @ @ import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . Storage ; 
 - import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorCancellable ; 
 import im . actor . runtime . actors . ActorRef ; 
 - import im . actor . runtime . actors . Cancellable ; 
 - import im . actor . runtime . actors . Props ; 
 
 import static im . actor . runtime . actors . ActorSystem . system ; 
 
 @ @ - 137 , 7 + 135 , 7 @ @ public class JsFilesModule extends AbsModule { 
 private boolean isLoading = false ; 
 private JsFilesModule filesModule ; 
 private ArrayList < FileRequest > filesQueue = new ArrayList < > ( ) ; 
 - private Cancellable performCancellable ; 
 + private ActorCancellable performCancellable ; 
 
 public FileBinderActor ( JsFilesModule filesModule , ModuleContext context ) { 
 super ( context ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java 
 index a4137ea . . 0be53dc 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsIdleModule . java 
 @ @ - 5 , 10 + 5 , 8 @ @ import im . actor . core . js . providers . electron . JsElectronApp ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleActor ; 
 import im . actor . core . modules . ModuleContext ; 
 - import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorCancellable ; 
 import im . actor . runtime . actors . ActorRef ; 
 - import im . actor . runtime . actors . Cancellable ; 
 - import im . actor . runtime . actors . Props ; 
 
 import static im . actor . runtime . actors . ActorSystem . system ; 
 
 @ @ - 41 , 7 + 39 , 7 @ @ public class JsIdleModule extends AbsModule { 
 
 private boolean isAppVisible = true ; 
 private JsMessenger messenger ; 
 - private Cancellable flushCancellable ; 
 + private ActorCancellable flushCancellable ; 
 private boolean isElectron = JsElectronApp . isElectron ( ) ; 
 
 public IdleActor ( JsMessenger messenger , ModuleContext context ) {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 11f85fc . . f431f95 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 462 , 6 + 462 , 27 @ @ public class JsFacade implements Exportable { 
 } ) ; 
 } 
 
 + public JsPromise hideChat ( final JsPeer peer ) { 
 + return JsPromise . create ( new JsPromiseExecutor ( ) { 
 + @ Override 
 + public void execute ( ) { 
 + messenger . hideChat ( peer . convert ( ) ) . start ( new CommandCallback < Boolean > ( ) { 
 + @ Override 
 + public void onResult ( Boolean res ) { 
 + Log . d ( TAG , " hideChat : result " ) ; 
 + resolve ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + Log . d ( TAG , " hideChat : error " ) ; 
 + reject ( e . getMessage ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 / / Peers 
 
 public JsPeer getUserPeer ( int uid ) { 
 @ @ - 858 , 7 + 879 , 7 @ @ public class JsFacade implements Exportable { 
 return JsPromise . create ( new JsPromiseExecutor ( ) { 
 @ Override 
 public void execute ( ) { 
 - String avatarDescriptor = provider . registerUploadFile ( file ) ; 
 + String avatarDescriptor = file ! = null ? provider . registerUploadFile ( file ) : null ; 
 / / noinspection ConstantConditions 
 messenger . createGroup ( title , avatarDescriptor , uids ) . start ( new CommandCallback < Integer > ( ) { 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index b59506e . . 0202f68 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 703 , 6 + 703 , 17 @ @ public class Messenger { 
 } 
 
 / * * 
 + * Hide chat 
 + * 
 + * @ param peer destination peer 
 + * @ return Command for execution 
 + * / 
 + @ ObjectiveCName ( " hideChatCommandWithPeer : " ) 
 + public Command < Boolean > hideChat ( Peer peer ) { 
 + return modules . getMessagesModule ( ) . hideChat ( peer ) ; 
 + } 
 + 
 + / * * 
 * Save message draft 
 * 
 * @ param peer destination peer 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index bfbd171 . . a883a25 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 16 , 6 + 16 , 7 @ @ import im . actor . core . api . ApiPeerType ; 
 import im . actor . core . api . base . SeqUpdate ; 
 import im . actor . core . api . rpc . RequestClearChat ; 
 import im . actor . core . api . rpc . RequestDeleteChat ; 
 + import im . actor . core . api . rpc . RequestHideDialog ; 
 import im . actor . core . api . rpc . ResponseSeq ; 
 import im . actor . core . api . updates . UpdateChatClear ; 
 import im . actor . core . api . updates . UpdateChatDelete ; 
 @ @ - 366 , 7 + 367 , 7 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 @ Override 
 public void start ( final CommandCallback < Boolean > callback ) { 
 ApiOutPeer outPeer ; 
 - final ApiPeer apiPeer ; 
 + final ApiPeer apiPeer = buildApiPeer ( peer ) ; 
 if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; 
 if ( user = = null ) { 
 @ @ - 380 , 8 + 381 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } 
 outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , 
 user . getAccessHash ( ) ) ; 
 - apiPeer = new ApiPeer ( ApiPeerType . PRIVATE , 
 - user . getUid ( ) ) ; 
 } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; 
 if ( group = = null ) { 
 @ @ - 395 , 8 + 394 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } 
 outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , 
 group . getAccessHash ( ) ) ; 
 - apiPeer = new ApiPeer ( ApiPeerType . GROUP , 
 - group . getGroupId ( ) ) ; 
 } else { 
 runOnUiThread ( new Runnable ( ) { 
 @ Override 
 @ @ - 509 , 6 + 506 , 87 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } ; 
 } 
 
 + public Command < Boolean > hideChat ( final Peer peer ) { 
 + return new Command < Boolean > ( ) { 
 + @ Override 
 + public void start ( final CommandCallback < Boolean > callback ) { 
 + ApiOutPeer outPeer ; 
 + final ApiPeer apiPeer ; 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = users ( ) . getValue ( peer . getPeerId ( ) ) ; 
 + if ( user = = null ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + outPeer = new ApiOutPeer ( ApiPeerType . PRIVATE , user . getUid ( ) , 
 + user . getAccessHash ( ) ) ; 
 + apiPeer = new ApiPeer ( ApiPeerType . PRIVATE , 
 + user . getUid ( ) ) ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = groups ( ) . getValue ( peer . getPeerId ( ) ) ; 
 + if ( group = = null ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + outPeer = new ApiOutPeer ( ApiPeerType . GROUP , group . getGroupId ( ) , 
 + group . getAccessHash ( ) ) ; 
 + apiPeer = new ApiPeer ( ApiPeerType . GROUP , 
 + group . getGroupId ( ) ) ; 
 + } else { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( new RpcInternalException ( ) ) ; 
 + } 
 + } ) ; 
 + return ; 
 + } 
 + request ( new RequestHideDialog ( outPeer ) , new RpcCallback < ResponseSeq > ( ) { 
 + @ Override 
 + public void onResult ( ResponseSeq response ) { 
 + / / TODO : Implement ? 
 + / / updates ( ) . onUpdateReceived ( new SeqUpdate ( response . getSeq ( ) , 
 + / / response . getState ( ) , 
 + / / UpdateChatClear . HEADER , 
 + / / new UpdateChatClear ( apiPeer ) . toByteArray ( ) ) ) ; 
 + updates ( ) . executeAfter ( response . getSeq ( ) , 
 + new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onResult ( true ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( final RpcException e ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + } ; 
 + } 
 + 
 public void resetModule ( ) { 
 / / TODO : Implement 
 }
