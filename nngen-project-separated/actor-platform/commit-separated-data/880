BLEU SCORE: 0.10786826322527471

TEST MSG: wip ( core ) : Working on CallVM
GENERATED MSG: feat ( android ) : call methods in Messenger

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > index 96bf5f5 . . 914ab06 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 142 , 6 + 142 , 8 @ @ public class CallManagerActor extends ModuleActor { < nl > } < nl > < nl > private void doAnswerCall ( final long callId ) { < nl > + Log . d ( TAG , " onIncomingCall ( " + callId + " ) " ) ; < nl > + < nl > answeredCalls . add ( callId ) ; < nl > } < nl > < nl > @ @ - 151 , 10 + 153 , 12 @ @ public class CallManagerActor extends ModuleActor { < nl > / / < nl > < nl > private void onCallEnded ( long callId ) { < nl > + Log . d ( TAG , " onCallEnded ( " + callId + " ) " ) ; < nl > runningCalls . remove ( callId ) ; < nl > } < nl > < nl > private void doEndCall ( long callId ) { < nl > + Log . d ( TAG , " doEndCall ( " + callId + " ) " ) ; < nl > ActorRef currentCall = runningCalls . remove ( callId ) ; < nl > if ( currentCall ! = null ) { < nl > currentCall . send ( new CallActor . DoEndCall ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > index 8b1641e . . 0711a6d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java < nl > @ @ - 1 , 5 + 1 , 7 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > + import java . util . ArrayList ; < nl > + < nl > import im . actor . core . api . ApiAnswerCall ; < nl > import im . actor . core . api . ApiNeedOffer ; < nl > import im . actor . core . api . ApiSwitchMaster ; < nl > @ @ - 7 , 10 + 9 , 16 @ @ import im . actor . core . api . ApiWebRTCSignaling ; < nl > import im . actor . core . api . rpc . RequestGetCallInfo ; < nl > import im . actor . core . api . rpc . ResponseGetCallInfo ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . viewmodel . CallMember ; < nl > + import im . actor . core . viewmodel . CallState ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . function . Consumer ; < nl > < nl > + import static im . actor . core . modules . internal . messages . entity . EntityConverter . convert ; < nl > + < nl > public class CallSlaveActor extends CallActor { < nl > < nl > + private ActorRef callManager ; < nl > private MasterNode masterNode ; < nl > private boolean isAnswerPending = false ; < nl > private long callId ; < nl > @ @ - 23 , 9 + 31 , 13 @ @ public class CallSlaveActor extends CallActor { < nl > @ Override < nl > public void preStart ( ) { < nl > super . preStart ( ) ; < nl > + callManager = context ( ) . getCallsModule ( ) . getCallManager ( ) ; < nl > api ( new RequestGetCallInfo ( callId ) ) . then ( new Consumer < ResponseGetCallInfo > ( ) { < nl > @ Override < nl > public void apply ( final ResponseGetCallInfo responseGetCallInfo ) { < nl > + spawnNewVM ( callId , convert ( responseGetCallInfo . getPeer ( ) ) , < nl > + new ArrayList < CallMember > ( ) , CallState . CALLING _ INCOMING ) ; < nl > + callManager . send ( new CallManagerActor . IncomingCallReady ( callId ) , self ( ) ) ; < nl > joinBus ( responseGetCallInfo . getEventBusId ( ) ) ; < nl > } < nl > } ) . failure ( new Consumer < Exception > ( ) {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 0da562b . . 502315f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 16 , 6 + 16 , 7 @ @ import java . util . List ; < nl > import im . actor . core . api . ApiMessage ; < nl > import im . actor . core . api . ApiSex ; < nl > import im . actor . core . api . ApiAuthSession ; < nl > + import im . actor . core . api . rpc . ResponseDoCall ; < nl > import im . actor . core . entity . FileReference ; < nl > import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . MentionFilterResult ; < nl > @ @ - 41 , 6 + 42 , 7 @ @ import im . actor . core . modules . events . PeerChatOpened ; < nl > import im . actor . core . modules . events . PeerInfoClosed ; < nl > import im . actor . core . modules . events . PeerInfoOpened ; < nl > import im . actor . core . modules . events . UserVisible ; < nl > + import im . actor . core . modules . internal . CallsModule ; < nl > import im . actor . core . network . NetworkState ; < nl > import im . actor . core . util . ActorTrace ; < nl > import im . actor . core . util . Timing ; < nl > @ @ - 964 , 6 + 966 , 22 @ @ public class Messenger { < nl > } < nl > < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + / / Calls < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + < nl > + public Command < ResponseDoCall > doCall ( User user , CallsModule . CallCallback callCallback ) { < nl > + return modules . getCallsModule ( ) . makeCall ( user , callCallback ) ; < nl > + } < nl > + < nl > + public void endCall ( long callId ) { < nl > + modules . getCallsModule ( ) . endCall ( callId ) ; < nl > + } < nl > + < nl > + public void answerCall ( long callId , CallsModule . CallCallback callback ) { < nl > + modules . getCallsModule ( ) . answerCall ( callId , callback ) ; < nl > + } < nl > + < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Peer operations < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > index b414eb1 . . 50606dc 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . runtime . actors . messages . PoisonPill ; < nl > < nl > public class CallActor extends ModuleActor { < nl > < nl > + private boolean inited = false ; < nl > private int timeout = 0 ; < nl > private boolean alive = false ; < nl > private long callId ; < nl > @ @ - 21 , 7 + 22 , 6 @ @ public class CallActor extends ModuleActor { < nl > @ Override < nl > public void preStart ( ) { < nl > super . preStart ( ) ; < nl > - self ( ) . send ( new CheckAlive ( ) , CallsModule . CALL _ TIMEOUT ) ; < nl > self ( ) . send ( new SendCallInProgress ( ) ) ; < nl > } < nl > < nl > @ @ - 69 , 6 + 69 , 10 @ @ public class CallActor extends ModuleActor { < nl > private void onCallInProgress ( int timeout ) { < nl > alive = true ; < nl > this . timeout = timeout ; < nl > + if ( ! inited ) { < nl > + inited = true ; < nl > + self ( ) . send ( new CheckAlive ( ) , CallsModule . CALL _ TIMEOUT ) ; < nl > + } < nl > } < nl > < nl > public static class EndCall {

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 index 96bf5f5 . . 914ab06 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 142 , 6 + 142 , 8 @ @ public class CallManagerActor extends ModuleActor { 
 } 
 
 private void doAnswerCall ( final long callId ) { 
 + Log . d ( TAG , " onIncomingCall ( " + callId + " ) " ) ; 
 + 
 answeredCalls . add ( callId ) ; 
 } 
 
 @ @ - 151 , 10 + 153 , 12 @ @ public class CallManagerActor extends ModuleActor { 
 / / 
 
 private void onCallEnded ( long callId ) { 
 + Log . d ( TAG , " onCallEnded ( " + callId + " ) " ) ; 
 runningCalls . remove ( callId ) ; 
 } 
 
 private void doEndCall ( long callId ) { 
 + Log . d ( TAG , " doEndCall ( " + callId + " ) " ) ; 
 ActorRef currentCall = runningCalls . remove ( callId ) ; 
 if ( currentCall ! = null ) { 
 currentCall . send ( new CallActor . DoEndCall ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 index 8b1641e . . 0711a6d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallSlaveActor . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package im . actor . core . modules . calls ; 
 
 + import java . util . ArrayList ; 
 + 
 import im . actor . core . api . ApiAnswerCall ; 
 import im . actor . core . api . ApiNeedOffer ; 
 import im . actor . core . api . ApiSwitchMaster ; 
 @ @ - 7 , 10 + 9 , 16 @ @ import im . actor . core . api . ApiWebRTCSignaling ; 
 import im . actor . core . api . rpc . RequestGetCallInfo ; 
 import im . actor . core . api . rpc . ResponseGetCallInfo ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . viewmodel . CallMember ; 
 + import im . actor . core . viewmodel . CallState ; 
 + import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . function . Consumer ; 
 
 + import static im . actor . core . modules . internal . messages . entity . EntityConverter . convert ; 
 + 
 public class CallSlaveActor extends CallActor { 
 
 + private ActorRef callManager ; 
 private MasterNode masterNode ; 
 private boolean isAnswerPending = false ; 
 private long callId ; 
 @ @ - 23 , 9 + 31 , 13 @ @ public class CallSlaveActor extends CallActor { 
 @ Override 
 public void preStart ( ) { 
 super . preStart ( ) ; 
 + callManager = context ( ) . getCallsModule ( ) . getCallManager ( ) ; 
 api ( new RequestGetCallInfo ( callId ) ) . then ( new Consumer < ResponseGetCallInfo > ( ) { 
 @ Override 
 public void apply ( final ResponseGetCallInfo responseGetCallInfo ) { 
 + spawnNewVM ( callId , convert ( responseGetCallInfo . getPeer ( ) ) , 
 + new ArrayList < CallMember > ( ) , CallState . CALLING _ INCOMING ) ; 
 + callManager . send ( new CallManagerActor . IncomingCallReady ( callId ) , self ( ) ) ; 
 joinBus ( responseGetCallInfo . getEventBusId ( ) ) ; 
 } 
 } ) . failure ( new Consumer < Exception > ( ) {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 0da562b . . 502315f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 16 , 6 + 16 , 7 @ @ import java . util . List ; 
 import im . actor . core . api . ApiMessage ; 
 import im . actor . core . api . ApiSex ; 
 import im . actor . core . api . ApiAuthSession ; 
 + import im . actor . core . api . rpc . ResponseDoCall ; 
 import im . actor . core . entity . FileReference ; 
 import im . actor . core . entity . Group ; 
 import im . actor . core . entity . MentionFilterResult ; 
 @ @ - 41 , 6 + 42 , 7 @ @ import im . actor . core . modules . events . PeerChatOpened ; 
 import im . actor . core . modules . events . PeerInfoClosed ; 
 import im . actor . core . modules . events . PeerInfoOpened ; 
 import im . actor . core . modules . events . UserVisible ; 
 + import im . actor . core . modules . internal . CallsModule ; 
 import im . actor . core . network . NetworkState ; 
 import im . actor . core . util . ActorTrace ; 
 import im . actor . core . util . Timing ; 
 @ @ - 964 , 6 + 966 , 22 @ @ public class Messenger { 
 } 
 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Calls 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + public Command < ResponseDoCall > doCall ( User user , CallsModule . CallCallback callCallback ) { 
 + return modules . getCallsModule ( ) . makeCall ( user , callCallback ) ; 
 + } 
 + 
 + public void endCall ( long callId ) { 
 + modules . getCallsModule ( ) . endCall ( callId ) ; 
 + } 
 + 
 + public void answerCall ( long callId , CallsModule . CallCallback callback ) { 
 + modules . getCallsModule ( ) . answerCall ( callId , callback ) ; 
 + } 
 + 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Peer operations 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 index b414eb1 . . 50606dc 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . runtime . actors . messages . PoisonPill ; 
 
 public class CallActor extends ModuleActor { 
 
 + private boolean inited = false ; 
 private int timeout = 0 ; 
 private boolean alive = false ; 
 private long callId ; 
 @ @ - 21 , 7 + 22 , 6 @ @ public class CallActor extends ModuleActor { 
 @ Override 
 public void preStart ( ) { 
 super . preStart ( ) ; 
 - self ( ) . send ( new CheckAlive ( ) , CallsModule . CALL _ TIMEOUT ) ; 
 self ( ) . send ( new SendCallInProgress ( ) ) ; 
 } 
 
 @ @ - 69 , 6 + 69 , 10 @ @ public class CallActor extends ModuleActor { 
 private void onCallInProgress ( int timeout ) { 
 alive = true ; 
 this . timeout = timeout ; 
 + if ( ! inited ) { 
 + inited = true ; 
 + self ( ) . send ( new CheckAlive ( ) , CallsModule . CALL _ TIMEOUT ) ; 
 + } 
 } 
 
 public static class EndCall {
