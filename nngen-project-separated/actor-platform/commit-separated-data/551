BLEU SCORE: 0.0688037070798893

TEST MSG: feat ( core ) : Remove obsolete own read actor
GENERATED MSG: wip ( sdk ) : Grouped dialogs counter updated , peer information changes

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > index d0057a7 . . 2e89d07 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > @ @ - 65 , 38 + 65 , 10 @ @ public abstract class AbsModule { < nl > return context ( ) . getMessagesModule ( ) . getSendMessageActor ( ) ; < nl > } < nl > < nl > - public ActorRef dialogsActor ( ) { < nl > - return context ( ) . getMessagesModule ( ) . getDialogsActor ( ) ; < nl > - } < nl > - < nl > public ActorRef stickersActor ( ) { < nl > return context ( ) . getStickersModule ( ) . getStickersActor ( ) ; < nl > } < nl > < nl > - public ActorRef dialogsHistoryActor ( ) { < nl > - return context ( ) . getMessagesModule ( ) . getDialogsHistoryActor ( ) ; < nl > - } < nl > - < nl > - public ActorRef archivedDialogsActor ( ) { < nl > - return context ( ) . getMessagesModule ( ) . getArchivedDialogsActor ( ) ; < nl > - } < nl > - < nl > - public ActorRef ownReadActor ( ) { < nl > - return context ( ) . getMessagesModule ( ) . getOwnReadActor ( ) ; < nl > - } < nl > - < nl > - public ActorRef plainReceiveActor ( ) { < nl > - return context ( ) . getMessagesModule ( ) . getPlainReceiverActor ( ) ; < nl > - } < nl > - < nl > - / / public ActorRef conversationActor ( Peer peer ) { < nl > - / / return context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) ; < nl > - / / } < nl > - / / < nl > - / / public ActorRef conversationHistoryActor ( Peer peer ) { < nl > - / / return context ( ) . getMessagesModule ( ) . getConversationHistoryActor ( peer ) ; < nl > - / / } < nl > - < nl > public PreferencesStorage preferences ( ) { < nl > return context . getPreferences ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > index 4190a86 . . baee8b9 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > @ @ - 57 , 7 + 57 , 6 @ @ import im . actor . core . modules . messaging . dialogs . DialogsActor ; < nl > import im . actor . core . modules . messaging . history . ConversationHistoryActor ; < nl > import im . actor . core . modules . messaging . history . DialogsHistoryActor ; < nl > import im . actor . core . modules . messaging . actions . MessageDeleteActor ; < nl > - import im . actor . core . modules . messaging . actions . OwnReadActor ; < nl > import im . actor . core . modules . messaging . actions . SenderActor ; < nl > import im . actor . core . modules . messaging . router . RouterInt ; < nl > import im . actor . core . network . RpcCallback ; < nl > @ @ - 91 , 7 + 90 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > private ActorRef dialogsActor ; < nl > private ActorRef dialogsHistoryActor ; < nl > private ActorRef archivedDialogsActor ; < nl > - private ActorRef ownReadActor ; < nl > private ActorRef plainReadActor ; < nl > private ActorRef plainReceiverActor ; < nl > private ActorRef sendMessageActor ; < nl > @ @ - 134 , 7 + 132 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > return new DialogsHistoryActor ( context ( ) ) ; < nl > } < nl > } ) , " actor / dialogs / history " ) ; < nl > - < nl > this . archivedDialogsActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > @ Override < nl > public ArchivedDialogsActor create ( ) { < nl > @ @ - 142 , 12 + 139 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > } < nl > } ) , " actor / dialogs / archived " ) ; < nl > < nl > - this . ownReadActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > - @ Override < nl > - public OwnReadActor create ( ) { < nl > - return new OwnReadActor ( context ( ) ) ; < nl > - } < nl > - } ) , " actor / read / own " ) ; < nl > this . plainReadActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > @ Override < nl > public CursorReaderActor create ( ) { < nl > @ @ - 193 , 10 + 184 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > return plainReceiverActor ; < nl > } < nl > < nl > - public ActorRef getOwnReadActor ( ) { < nl > - return ownReadActor ; < nl > - } < nl > - < nl > public ActorRef getHistoryActor ( final Peer peer ) { < nl > synchronized ( historyLoaderActors ) { < nl > if ( ! historyLoaderActors . containsKey ( peer ) ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / OwnReadActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / OwnReadActor . java < nl > deleted file mode 100644 < nl > index 8ae3ff7 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / OwnReadActor . java < nl > + + + / dev / null < nl > @ @ - 1 , 191 + 0 , 0 @ @ < nl > - / * < nl > - * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > < nl > - * / < nl > - < nl > - package im . actor . core . modules . messaging . actions ; < nl > - < nl > - import java . util . HashMap ; < nl > - < nl > - import im . actor . core . entity . ContentDescription ; < nl > - import im . actor . core . entity . Message ; < nl > - import im . actor . core . entity . Peer ; < nl > - import im . actor . core . entity . content . TextContent ; < nl > - import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . core . modules . ModuleActor ; < nl > - < nl > - public class OwnReadActor extends ModuleActor { < nl > - < nl > - private boolean isInDifference = false ; < nl > - private HashMap < Peer , Long > cachedReadStates = new HashMap < > ( ) ; < nl > - < nl > - public OwnReadActor ( ModuleContext context ) { < nl > - super ( context ) ; < nl > - } < nl > - < nl > - public void onDifferenceStart ( ) { < nl > - if ( isInDifference ) { < nl > - return ; < nl > - } < nl > - isInDifference = true ; < nl > - < nl > - context ( ) . getNotificationsModule ( ) . pauseNotifications ( ) ; < nl > - } < nl > - < nl > - public void onDifferenceEnd ( ) { < nl > - if ( ! isInDifference ) { < nl > - return ; < nl > - } < nl > - isInDifference = false ; < nl > - < nl > - context ( ) . getNotificationsModule ( ) . resumeNotifications ( ) ; < nl > - } < nl > - < nl > - public void onInMessage ( Peer peer , Message message ) { < nl > - / / Detecting if message already read < nl > - long readState = loadReadState ( peer ) ; < nl > - if ( message . getSortDate ( ) < = readState ) { < nl > - / / Already read < nl > - return ; < nl > - } < nl > - < nl > - / / Current mention ? < nl > - boolean hasUserMention = false ; < nl > - if ( message . getContent ( ) instanceof TextContent ) { < nl > - TextContent textContent = ( TextContent ) message . getContent ( ) ; < nl > - hasUserMention = textContent . getMentions ( ) . contains ( myUid ( ) ) ; < nl > - } < nl > - context ( ) . getNotificationsModule ( ) . onInMessage ( peer , message . getSenderId ( ) , < nl > - message . getSortDate ( ) , ContentDescription . fromContent ( message . getContent ( ) ) , < nl > - hasUserMention ) ; < nl > - } < nl > - < nl > - public void onMessageRead ( Peer peer , long sortingDate ) { < nl > - / / Detecting if message already read < nl > - long readState = loadReadState ( peer ) ; < nl > - if ( sortingDate > readState ) { < nl > - / / Notify Server < nl > - context ( ) . getMessagesModule ( ) . getPlainReadActor ( ) < nl > - . send ( new CursorReaderActor . MarkRead ( peer , sortingDate ) ) ; < nl > - < nl > - markAsOwnRead ( peer , sortingDate ) ; < nl > - } < nl > - } < nl > - < nl > - public void onMessageReadByMe ( Peer peer , long sortingDate ) { < nl > - / / Detecting if message already read < nl > - long readState = loadReadState ( peer ) ; < nl > - if ( sortingDate > readState ) { < nl > - markAsOwnRead ( peer , sortingDate ) ; < nl > - } < nl > - } < nl > - < nl > - private void markAsOwnRead ( Peer peer , long sortingDate ) { < nl > - / / Update Counters < nl > - / / context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( new ConversationActor . MessageReadByMe ( sortingDate ) ) ; < nl > - < nl > - / / Saving read state < nl > - saveReadState ( peer , sortingDate ) ; < nl > - < nl > - / / Clearing notifications < nl > - context ( ) . getNotificationsModule ( ) . onOwnRead ( peer , sortingDate ) ; < nl > - } < nl > - < nl > - private long loadReadState ( Peer peer ) { < nl > - Long res = cachedReadStates . get ( peer ) ; < nl > - if ( res ! = null ) { < nl > - return res ; < nl > - } < nl > - res = context ( ) . getMessagesModule ( ) . getConversationVM ( peer ) . getOwnReadDate ( ) . get ( ) ; < nl > - cachedReadStates . put ( peer , res ) ; < nl > - return res ; < nl > - } < nl > - < nl > - private void saveReadState ( Peer peer , long date ) { < nl > - cachedReadStates . put ( peer , date ) ; < nl > - } < nl > - < nl > - / / Messages < nl > - < nl > - @ Override < nl > - public void onReceive ( Object message ) { < nl > - if ( message instanceof MessageRead ) { < nl > - MessageRead messageRead = ( MessageRead ) message ; < nl > - onMessageRead ( messageRead . getPeer ( ) , messageRead . getSortingDate ( ) ) ; < nl > - } else if ( message instanceof MessageReadByMe ) { < nl > - MessageReadByMe readByMe = ( MessageReadByMe ) message ; < nl > - onMessageReadByMe ( readByMe . getPeer ( ) , readByMe . getSortDate ( ) ) ; < nl > - } else if ( message instanceof InMessage ) { < nl > - InMessage inMessage = ( InMessage ) message ; < nl > - onInMessage ( inMessage . getPeer ( ) , inMessage . getMessage ( ) ) ; < nl > - } else if ( message instanceof StartGetDifference ) { < nl > - onDifferenceStart ( ) ; < nl > - } else if ( message instanceof StopGetDifference ) { < nl > - onDifferenceEnd ( ) ; < nl > - } else { < nl > - drop ( message ) ; < nl > - } < nl > - } < nl > - < nl > - public static class MessageReadByMe { < nl > - Peer peer ; < nl > - long sortDate ; < nl > - < nl > - public MessageReadByMe ( Peer peer , long sortDate ) { < nl > - this . peer = peer ; < nl > - this . sortDate = sortDate ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public long getSortDate ( ) { < nl > - return sortDate ; < nl > - } < nl > - } < nl > - < nl > - public static class MessageRead { < nl > - Peer peer ; < nl > - long sortingDate ; < nl > - < nl > - public MessageRead ( Peer peer , long sortingDate ) { < nl > - this . peer = peer ; < nl > - this . sortingDate = sortingDate ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public long getSortingDate ( ) { < nl > - return sortingDate ; < nl > - } < nl > - } < nl > - < nl > - public static class InMessage { < nl > - private Peer peer ; < nl > - private Message message ; < nl > - < nl > - public InMessage ( Peer peer , Message message ) { < nl > - this . peer = peer ; < nl > - this . message = message ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public Message getMessage ( ) { < nl > - return message ; < nl > - } < nl > - } < nl > - < nl > - < nl > - public static class StartGetDifference { < nl > - < nl > - } < nl > - < nl > - public static class StopGetDifference { < nl > - < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java < nl > index 6672dd4 . . 8e3e54d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java < nl > @ @ - 56 , 7 + 56 , 6 @ @ import im . actor . core . modules . encryption . EncryptedProcessor ; < nl > import im . actor . core . modules . eventbus . EventBusProcessor ; < nl > import im . actor . core . modules . contacts . ContactsSyncActor ; < nl > import im . actor . core . modules . groups . GroupsProcessor ; < nl > - import im . actor . core . modules . messaging . actions . OwnReadActor ; < nl > import im . actor . core . modules . presence . PresenceProcessor ; < nl > import im . actor . core . modules . settings . SettingsProcessor ; < nl > import im . actor . core . modules . stickers . StickersProcessor ; < nl > @ @ - 165 , 7 + 164 , 6 @ @ public class UpdateProcessor extends AbsModule { < nl > public void applyDifferenceUpdate ( List < ApiUser > users , List < ApiGroup > groups , List < Update > updates ) { < nl > < nl > applyRelated ( users , groups , false ) ; < nl > - context ( ) . getMessagesModule ( ) . getOwnReadActor ( ) . send ( new OwnReadActor . StartGetDifference ( ) ) ; < nl > < nl > CombinedDifference combinedDifference = GetDiffCombiner . buildDiff ( updates ) ; < nl > < nl > @ @ - 192 , 7 + 190 , 6 @ @ public class UpdateProcessor extends AbsModule { < nl > processUpdate ( u ) ; < nl > } < nl > < nl > - context ( ) . getMessagesModule ( ) . getOwnReadActor ( ) . send ( new OwnReadActor . StopGetDifference ( ) ) ; < nl > applyRelated ( users , groups , true ) ; < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > index 8bf76dc . . 5f112bd 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > @ @ - 137 , 10 + 137 , 10 @ @ public class ConversationActor extends ModuleActor { < nl > / / Update dialogs < nl > if ( topMessage ! = null ) { < nl > if ( ! isHiddenPeer ) { < nl > - dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , < nl > - topMessage . getSortDate ( ) ) ) ; < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , topMessage , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , < nl > + topMessage . getSortDate ( ) ) ) ; < nl > } < nl > } < nl > < nl > @ @ - 189 , 9 + 189 , 9 @ @ public class ConversationActor extends ModuleActor { < nl > < nl > if ( ! isHiddenPeer ) { < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , message , inPendingIndex . getCount ( ) ) ) ; < nl > - dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , < nl > - message . getSortDate ( ) ) ) ; < nl > } < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , < nl > + message . getSortDate ( ) ) ) ; < nl > } < nl > } < nl > < nl > @ @ - 276 , 6 + 276 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > dialogsActor . send ( new DialogsActor . MessageStateChanged ( peer , rid , < nl > MessageState . ERROR ) ) ; < nl > } < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > } < nl > < nl > @ @ - 369 , 8 + 370 , 8 @ @ public class ConversationActor extends ModuleActor { < nl > < nl > if ( ! isHiddenPeer ) { < nl > dialogsActor . send ( new DialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > - / / TODO : Implement for grouped < nl > } < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > < nl > / / Deletions < nl > @ @ - 402 , 6 + 403 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > inPendingIndex . clear ( ) ; < nl > outPendingIndex . clear ( ) ; < nl > dialogsActor . send ( new DialogsActor . ChatClear ( peer ) ) ; < nl > + / / TODO : Implement for grouped < nl > } < nl > < nl > @ Verified < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > index dc1143a . . b6d002a 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > @ @ - 52 , 6 + 52 , 13 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > DialogSpec spec = new DialogSpec ( peer , false , counter ) ; < nl > specs . getEngine ( ) . addOrUpdateItem ( spec ) ; < nl > < nl > + / / Doesn ' t create dialogs for hidden groups < nl > + if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + if ( getGroup ( peer . getPeerId ( ) ) . isHidden ( ) ) { < nl > + return ; < nl > + } < nl > + } < nl > + < nl > boolean found = false ; < nl > for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > if ( p . equals ( peer ) ) { < nl > @ @ - 120 , 8 + 127 , 55 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; < nl > } < nl > < nl > + private void onCounterChanged ( Peer peer , int counter ) { < nl > + < nl > + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; < nl > + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; < nl > + < nl > + / / Hidden groups doesn ' t present in storage < nl > + / / and there are no need to explicit checking < nl > + < nl > + boolean found = false ; < nl > + for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > + found = true ; < nl > + break ; < nl > + } < nl > + } < nl > + for ( Peer p : storage . getGroupPeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > + found = true ; < nl > + break ; < nl > + } < nl > + } < nl > + < nl > + if ( found ) { < nl > + notifyVM ( ) ; < nl > + } < nl > + } < nl > + < nl > private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { < nl > - / / TODO : Implement < nl > + < nl > + / / Hidden groups doesn ' t present in storage < nl > + / / and there are no need to explicit checking < nl > + < nl > + boolean found = false ; < nl > + for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > + found = true ; < nl > + break ; < nl > + } < nl > + } < nl > + for ( Peer p : storage . getGroupPeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > + found = true ; < nl > + break ; < nl > + } < nl > + } < nl > + < nl > + if ( found ) { < nl > + notifyVM ( ) ; < nl > + } < nl > } < nl > < nl > < nl > @ @ - 139 , 6 + 193 , 9 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > } else if ( message instanceof NewMessage ) { < nl > NewMessage newMessage = ( NewMessage ) message ; < nl > onNewMessage ( newMessage . peer , newMessage . sortDate , newMessage . counter ) ; < nl > + } else if ( message instanceof CounterChanged ) { < nl > + CounterChanged counterChanged = ( CounterChanged ) message ; < nl > + onCounterChanged ( counterChanged . getPeer ( ) , counterChanged . getCounter ( ) ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > @ @ - 188 , 7 + 245 , 6 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > } < nl > < nl > public static class NewMessage { < nl > - < nl > private Peer peer ; < nl > private int counter ; < nl > private long sortDate ; < nl > @ @ - 199 , 52 + 255 , 4 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > this . sortDate = sortDate ; < nl > } < nl > } < nl > - < nl > - private class PeerGroup { < nl > - < nl > - private String key ; < nl > - private String title ; < nl > - private ArrayList < PeerDesc > peers ; < nl > - < nl > - public PeerGroup ( String key , String title ) { < nl > - this . key = key ; < nl > - this . title = title ; < nl > - this . peers = new ArrayList < PeerDesc > ( ) ; < nl > - } < nl > - < nl > - public String getKey ( ) { < nl > - return key ; < nl > - } < nl > - < nl > - public String getTitle ( ) { < nl > - return title ; < nl > - } < nl > - < nl > - public ArrayList < PeerDesc > getPeers ( ) { < nl > - return peers ; < nl > - } < nl > - } < nl > - < nl > - private class PeerDesc { < nl > - < nl > - private Peer peer ; < nl > - private int counter ; < nl > - < nl > - public PeerDesc ( Peer peer , int counter ) { < nl > - this . peer = peer ; < nl > - this . counter = counter ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public int getCounter ( ) { < nl > - return counter ; < nl > - } < nl > - < nl > - public void setCounter ( int counter ) { < nl > - this . counter = counter ; < nl > - } < nl > - } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java < nl > index 74487be . . dfbc311 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java < nl > @ @ - 10 , 12 + 10 , 14 @ @ import im . actor . core . api . updates . UpdateUserAvatarChanged ; < nl > import im . actor . core . api . updates . UpdateUserLocalNameChanged ; < nl > import im . actor . core . api . updates . UpdateUserNameChanged ; < nl > import im . actor . core . api . updates . UpdateUserNickChanged ; < nl > + import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . User ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . Processor ; < nl > import im . actor . core . modules . internal . contacts . ContactsSyncActor ; < nl > import im . actor . core . modules . internal . messages . DialogsActor ; < nl > + import im . actor . core . modules . internal . messages . GroupedDialogsActor ; < nl > import im . actor . runtime . annotations . Verified ; < nl > < nl > import static im . actor . core . util . JavaUtil . equalsE ; < nl > @ @ - 193 , 6 + 195 , 9 @ @ public class UsersProcessor extends AbsModule implements Processor { < nl > private void onUserDescChanged ( User u ) { < nl > context ( ) . getMessagesModule ( ) . getDialogsActor ( ) . send ( < nl > new DialogsActor . UserChanged ( u ) ) ; < nl > + context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) . send ( < nl > + new GroupedDialogsActor . PeerInformationChanged ( Peer . user ( u . getUid ( ) ) , < nl > + u . getName ( ) , u . getAvatar ( ) ) ) ; < nl > context ( ) . getContactsModule ( ) . getContactSyncActor ( ) < nl > . send ( new ContactsSyncActor . UserChanged ( u ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java < nl > index 0c0a457 . . e430293 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java < nl > @ @ - 16 , 6 + 16 , 7 @ @ import im . actor . core . api . ApiMember ; < nl > import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . MessageState ; < nl > + import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . content . ServiceGroupAvatarChanged ; < nl > import im . actor . core . entity . content . ServiceGroupCreated ; < nl > import im . actor . core . entity . content . ServiceGroupTitleChanged ; < nl > @ @ - 25 , 6 + 26 , 7 @ @ import im . actor . core . entity . content . ServiceGroupUserLeave ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . internal . messages . DialogsActor ; < nl > + import im . actor . core . modules . internal . messages . GroupedDialogsActor ; < nl > import im . actor . core . modules . internal . messages . entity . EntityConverter ; < nl > import im . actor . runtime . annotations . Verified ; < nl > < nl > @ @ - 298 , 5 + 300 , 8 @ @ public class GroupsProcessor extends AbsModule { < nl > private void onGroupDescChanged ( Group group ) { < nl > context ( ) . getMessagesModule ( ) . getDialogsActor ( ) < nl > . send ( new DialogsActor . GroupChanged ( group ) ) ; < nl > + context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) . send ( < nl > + new GroupedDialogsActor . PeerInformationChanged ( Peer . group ( group . getGroupId ( ) ) , < nl > + group . getTitle ( ) , group . getAvatar ( ) ) ) ; < nl > } < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java 
 index d0057a7 . . 2e89d07 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / AbsModule . java 
 @ @ - 65 , 38 + 65 , 10 @ @ public abstract class AbsModule { 
 return context ( ) . getMessagesModule ( ) . getSendMessageActor ( ) ; 
 } 
 
 - public ActorRef dialogsActor ( ) { 
 - return context ( ) . getMessagesModule ( ) . getDialogsActor ( ) ; 
 - } 
 - 
 public ActorRef stickersActor ( ) { 
 return context ( ) . getStickersModule ( ) . getStickersActor ( ) ; 
 } 
 
 - public ActorRef dialogsHistoryActor ( ) { 
 - return context ( ) . getMessagesModule ( ) . getDialogsHistoryActor ( ) ; 
 - } 
 - 
 - public ActorRef archivedDialogsActor ( ) { 
 - return context ( ) . getMessagesModule ( ) . getArchivedDialogsActor ( ) ; 
 - } 
 - 
 - public ActorRef ownReadActor ( ) { 
 - return context ( ) . getMessagesModule ( ) . getOwnReadActor ( ) ; 
 - } 
 - 
 - public ActorRef plainReceiveActor ( ) { 
 - return context ( ) . getMessagesModule ( ) . getPlainReceiverActor ( ) ; 
 - } 
 - 
 - / / public ActorRef conversationActor ( Peer peer ) { 
 - / / return context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) ; 
 - / / } 
 - / / 
 - / / public ActorRef conversationHistoryActor ( Peer peer ) { 
 - / / return context ( ) . getMessagesModule ( ) . getConversationHistoryActor ( peer ) ; 
 - / / } 
 - 
 public PreferencesStorage preferences ( ) { 
 return context . getPreferences ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 index 4190a86 . . baee8b9 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 @ @ - 57 , 7 + 57 , 6 @ @ import im . actor . core . modules . messaging . dialogs . DialogsActor ; 
 import im . actor . core . modules . messaging . history . ConversationHistoryActor ; 
 import im . actor . core . modules . messaging . history . DialogsHistoryActor ; 
 import im . actor . core . modules . messaging . actions . MessageDeleteActor ; 
 - import im . actor . core . modules . messaging . actions . OwnReadActor ; 
 import im . actor . core . modules . messaging . actions . SenderActor ; 
 import im . actor . core . modules . messaging . router . RouterInt ; 
 import im . actor . core . network . RpcCallback ; 
 @ @ - 91 , 7 + 90 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 private ActorRef dialogsActor ; 
 private ActorRef dialogsHistoryActor ; 
 private ActorRef archivedDialogsActor ; 
 - private ActorRef ownReadActor ; 
 private ActorRef plainReadActor ; 
 private ActorRef plainReceiverActor ; 
 private ActorRef sendMessageActor ; 
 @ @ - 134 , 7 + 132 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 return new DialogsHistoryActor ( context ( ) ) ; 
 } 
 } ) , " actor / dialogs / history " ) ; 
 - 
 this . archivedDialogsActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 @ Override 
 public ArchivedDialogsActor create ( ) { 
 @ @ - 142 , 12 + 139 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 } 
 } ) , " actor / dialogs / archived " ) ; 
 
 - this . ownReadActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 - @ Override 
 - public OwnReadActor create ( ) { 
 - return new OwnReadActor ( context ( ) ) ; 
 - } 
 - } ) , " actor / read / own " ) ; 
 this . plainReadActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 @ Override 
 public CursorReaderActor create ( ) { 
 @ @ - 193 , 10 + 184 , 6 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 return plainReceiverActor ; 
 } 
 
 - public ActorRef getOwnReadActor ( ) { 
 - return ownReadActor ; 
 - } 
 - 
 public ActorRef getHistoryActor ( final Peer peer ) { 
 synchronized ( historyLoaderActors ) { 
 if ( ! historyLoaderActors . containsKey ( peer ) ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / OwnReadActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / OwnReadActor . java 
 deleted file mode 100644 
 index 8ae3ff7 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actions / OwnReadActor . java 
 + + + / dev / null 
 @ @ - 1 , 191 + 0 , 0 @ @ 
 - / * 
 - * Copyright ( C ) 2015 Actor LLC . < https : / / actor . im > 
 - * / 
 - 
 - package im . actor . core . modules . messaging . actions ; 
 - 
 - import java . util . HashMap ; 
 - 
 - import im . actor . core . entity . ContentDescription ; 
 - import im . actor . core . entity . Message ; 
 - import im . actor . core . entity . Peer ; 
 - import im . actor . core . entity . content . TextContent ; 
 - import im . actor . core . modules . ModuleContext ; 
 - import im . actor . core . modules . ModuleActor ; 
 - 
 - public class OwnReadActor extends ModuleActor { 
 - 
 - private boolean isInDifference = false ; 
 - private HashMap < Peer , Long > cachedReadStates = new HashMap < > ( ) ; 
 - 
 - public OwnReadActor ( ModuleContext context ) { 
 - super ( context ) ; 
 - } 
 - 
 - public void onDifferenceStart ( ) { 
 - if ( isInDifference ) { 
 - return ; 
 - } 
 - isInDifference = true ; 
 - 
 - context ( ) . getNotificationsModule ( ) . pauseNotifications ( ) ; 
 - } 
 - 
 - public void onDifferenceEnd ( ) { 
 - if ( ! isInDifference ) { 
 - return ; 
 - } 
 - isInDifference = false ; 
 - 
 - context ( ) . getNotificationsModule ( ) . resumeNotifications ( ) ; 
 - } 
 - 
 - public void onInMessage ( Peer peer , Message message ) { 
 - / / Detecting if message already read 
 - long readState = loadReadState ( peer ) ; 
 - if ( message . getSortDate ( ) < = readState ) { 
 - / / Already read 
 - return ; 
 - } 
 - 
 - / / Current mention ? 
 - boolean hasUserMention = false ; 
 - if ( message . getContent ( ) instanceof TextContent ) { 
 - TextContent textContent = ( TextContent ) message . getContent ( ) ; 
 - hasUserMention = textContent . getMentions ( ) . contains ( myUid ( ) ) ; 
 - } 
 - context ( ) . getNotificationsModule ( ) . onInMessage ( peer , message . getSenderId ( ) , 
 - message . getSortDate ( ) , ContentDescription . fromContent ( message . getContent ( ) ) , 
 - hasUserMention ) ; 
 - } 
 - 
 - public void onMessageRead ( Peer peer , long sortingDate ) { 
 - / / Detecting if message already read 
 - long readState = loadReadState ( peer ) ; 
 - if ( sortingDate > readState ) { 
 - / / Notify Server 
 - context ( ) . getMessagesModule ( ) . getPlainReadActor ( ) 
 - . send ( new CursorReaderActor . MarkRead ( peer , sortingDate ) ) ; 
 - 
 - markAsOwnRead ( peer , sortingDate ) ; 
 - } 
 - } 
 - 
 - public void onMessageReadByMe ( Peer peer , long sortingDate ) { 
 - / / Detecting if message already read 
 - long readState = loadReadState ( peer ) ; 
 - if ( sortingDate > readState ) { 
 - markAsOwnRead ( peer , sortingDate ) ; 
 - } 
 - } 
 - 
 - private void markAsOwnRead ( Peer peer , long sortingDate ) { 
 - / / Update Counters 
 - / / context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( new ConversationActor . MessageReadByMe ( sortingDate ) ) ; 
 - 
 - / / Saving read state 
 - saveReadState ( peer , sortingDate ) ; 
 - 
 - / / Clearing notifications 
 - context ( ) . getNotificationsModule ( ) . onOwnRead ( peer , sortingDate ) ; 
 - } 
 - 
 - private long loadReadState ( Peer peer ) { 
 - Long res = cachedReadStates . get ( peer ) ; 
 - if ( res ! = null ) { 
 - return res ; 
 - } 
 - res = context ( ) . getMessagesModule ( ) . getConversationVM ( peer ) . getOwnReadDate ( ) . get ( ) ; 
 - cachedReadStates . put ( peer , res ) ; 
 - return res ; 
 - } 
 - 
 - private void saveReadState ( Peer peer , long date ) { 
 - cachedReadStates . put ( peer , date ) ; 
 - } 
 - 
 - / / Messages 
 - 
 - @ Override 
 - public void onReceive ( Object message ) { 
 - if ( message instanceof MessageRead ) { 
 - MessageRead messageRead = ( MessageRead ) message ; 
 - onMessageRead ( messageRead . getPeer ( ) , messageRead . getSortingDate ( ) ) ; 
 - } else if ( message instanceof MessageReadByMe ) { 
 - MessageReadByMe readByMe = ( MessageReadByMe ) message ; 
 - onMessageReadByMe ( readByMe . getPeer ( ) , readByMe . getSortDate ( ) ) ; 
 - } else if ( message instanceof InMessage ) { 
 - InMessage inMessage = ( InMessage ) message ; 
 - onInMessage ( inMessage . getPeer ( ) , inMessage . getMessage ( ) ) ; 
 - } else if ( message instanceof StartGetDifference ) { 
 - onDifferenceStart ( ) ; 
 - } else if ( message instanceof StopGetDifference ) { 
 - onDifferenceEnd ( ) ; 
 - } else { 
 - drop ( message ) ; 
 - } 
 - } 
 - 
 - public static class MessageReadByMe { 
 - Peer peer ; 
 - long sortDate ; 
 - 
 - public MessageReadByMe ( Peer peer , long sortDate ) { 
 - this . peer = peer ; 
 - this . sortDate = sortDate ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public long getSortDate ( ) { 
 - return sortDate ; 
 - } 
 - } 
 - 
 - public static class MessageRead { 
 - Peer peer ; 
 - long sortingDate ; 
 - 
 - public MessageRead ( Peer peer , long sortingDate ) { 
 - this . peer = peer ; 
 - this . sortingDate = sortingDate ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public long getSortingDate ( ) { 
 - return sortingDate ; 
 - } 
 - } 
 - 
 - public static class InMessage { 
 - private Peer peer ; 
 - private Message message ; 
 - 
 - public InMessage ( Peer peer , Message message ) { 
 - this . peer = peer ; 
 - this . message = message ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public Message getMessage ( ) { 
 - return message ; 
 - } 
 - } 
 - 
 - 
 - public static class StartGetDifference { 
 - 
 - } 
 - 
 - public static class StopGetDifference { 
 - 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java 
 index 6672dd4 . . 8e3e54d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java 
 @ @ - 56 , 7 + 56 , 6 @ @ import im . actor . core . modules . encryption . EncryptedProcessor ; 
 import im . actor . core . modules . eventbus . EventBusProcessor ; 
 import im . actor . core . modules . contacts . ContactsSyncActor ; 
 import im . actor . core . modules . groups . GroupsProcessor ; 
 - import im . actor . core . modules . messaging . actions . OwnReadActor ; 
 import im . actor . core . modules . presence . PresenceProcessor ; 
 import im . actor . core . modules . settings . SettingsProcessor ; 
 import im . actor . core . modules . stickers . StickersProcessor ; 
 @ @ - 165 , 7 + 164 , 6 @ @ public class UpdateProcessor extends AbsModule { 
 public void applyDifferenceUpdate ( List < ApiUser > users , List < ApiGroup > groups , List < Update > updates ) { 
 
 applyRelated ( users , groups , false ) ; 
 - context ( ) . getMessagesModule ( ) . getOwnReadActor ( ) . send ( new OwnReadActor . StartGetDifference ( ) ) ; 
 
 CombinedDifference combinedDifference = GetDiffCombiner . buildDiff ( updates ) ; 
 
 @ @ - 192 , 7 + 190 , 6 @ @ public class UpdateProcessor extends AbsModule { 
 processUpdate ( u ) ; 
 } 
 
 - context ( ) . getMessagesModule ( ) . getOwnReadActor ( ) . send ( new OwnReadActor . StopGetDifference ( ) ) ; 
 applyRelated ( users , groups , true ) ; 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 index 8bf76dc . . 5f112bd 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 @ @ - 137 , 10 + 137 , 10 @ @ public class ConversationActor extends ModuleActor { 
 / / Update dialogs 
 if ( topMessage ! = null ) { 
 if ( ! isHiddenPeer ) { 
 - dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , 
 - topMessage . getSortDate ( ) ) ) ; 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , topMessage , inPendingIndex . getCount ( ) ) ) ; 
 } 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , 
 + topMessage . getSortDate ( ) ) ) ; 
 } 
 } 
 
 @ @ - 189 , 9 + 189 , 9 @ @ public class ConversationActor extends ModuleActor { 
 
 if ( ! isHiddenPeer ) { 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , message , inPendingIndex . getCount ( ) ) ) ; 
 - dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , 
 - message . getSortDate ( ) ) ) ; 
 } 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , 
 + message . getSortDate ( ) ) ) ; 
 } 
 } 
 
 @ @ - 276 , 6 + 276 , 7 @ @ public class ConversationActor extends ModuleActor { 
 dialogsActor . send ( new DialogsActor . MessageStateChanged ( peer , rid , 
 MessageState . ERROR ) ) ; 
 } 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 } 
 } 
 
 @ @ - 369 , 8 + 370 , 8 @ @ public class ConversationActor extends ModuleActor { 
 
 if ( ! isHiddenPeer ) { 
 dialogsActor . send ( new DialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 - / / TODO : Implement for grouped 
 } 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 } 
 
 / / Deletions 
 @ @ - 402 , 6 + 403 , 7 @ @ public class ConversationActor extends ModuleActor { 
 inPendingIndex . clear ( ) ; 
 outPendingIndex . clear ( ) ; 
 dialogsActor . send ( new DialogsActor . ChatClear ( peer ) ) ; 
 + / / TODO : Implement for grouped 
 } 
 
 @ Verified 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 index dc1143a . . b6d002a 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 @ @ - 52 , 6 + 52 , 13 @ @ public class GroupedDialogsActor extends ModuleActor { 
 DialogSpec spec = new DialogSpec ( peer , false , counter ) ; 
 specs . getEngine ( ) . addOrUpdateItem ( spec ) ; 
 
 + / / Doesn ' t create dialogs for hidden groups 
 + if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + if ( getGroup ( peer . getPeerId ( ) ) . isHidden ( ) ) { 
 + return ; 
 + } 
 + } 
 + 
 boolean found = false ; 
 for ( Peer p : storage . getPrivatePeers ( ) ) { 
 if ( p . equals ( peer ) ) { 
 @ @ - 120 , 8 + 127 , 55 @ @ public class GroupedDialogsActor extends ModuleActor { 
 context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; 
 } 
 
 + private void onCounterChanged ( Peer peer , int counter ) { 
 + 
 + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; 
 + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; 
 + 
 + / / Hidden groups doesn ' t present in storage 
 + / / and there are no need to explicit checking 
 + 
 + boolean found = false ; 
 + for ( Peer p : storage . getPrivatePeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + for ( Peer p : storage . getGroupPeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + 
 + if ( found ) { 
 + notifyVM ( ) ; 
 + } 
 + } 
 + 
 private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { 
 - / / TODO : Implement 
 + 
 + / / Hidden groups doesn ' t present in storage 
 + / / and there are no need to explicit checking 
 + 
 + boolean found = false ; 
 + for ( Peer p : storage . getPrivatePeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + for ( Peer p : storage . getGroupPeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + 
 + if ( found ) { 
 + notifyVM ( ) ; 
 + } 
 } 
 
 
 @ @ - 139 , 6 + 193 , 9 @ @ public class GroupedDialogsActor extends ModuleActor { 
 } else if ( message instanceof NewMessage ) { 
 NewMessage newMessage = ( NewMessage ) message ; 
 onNewMessage ( newMessage . peer , newMessage . sortDate , newMessage . counter ) ; 
 + } else if ( message instanceof CounterChanged ) { 
 + CounterChanged counterChanged = ( CounterChanged ) message ; 
 + onCounterChanged ( counterChanged . getPeer ( ) , counterChanged . getCounter ( ) ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 @ @ - 188 , 7 + 245 , 6 @ @ public class GroupedDialogsActor extends ModuleActor { 
 } 
 
 public static class NewMessage { 
 - 
 private Peer peer ; 
 private int counter ; 
 private long sortDate ; 
 @ @ - 199 , 52 + 255 , 4 @ @ public class GroupedDialogsActor extends ModuleActor { 
 this . sortDate = sortDate ; 
 } 
 } 
 - 
 - private class PeerGroup { 
 - 
 - private String key ; 
 - private String title ; 
 - private ArrayList < PeerDesc > peers ; 
 - 
 - public PeerGroup ( String key , String title ) { 
 - this . key = key ; 
 - this . title = title ; 
 - this . peers = new ArrayList < PeerDesc > ( ) ; 
 - } 
 - 
 - public String getKey ( ) { 
 - return key ; 
 - } 
 - 
 - public String getTitle ( ) { 
 - return title ; 
 - } 
 - 
 - public ArrayList < PeerDesc > getPeers ( ) { 
 - return peers ; 
 - } 
 - } 
 - 
 - private class PeerDesc { 
 - 
 - private Peer peer ; 
 - private int counter ; 
 - 
 - public PeerDesc ( Peer peer , int counter ) { 
 - this . peer = peer ; 
 - this . counter = counter ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public int getCounter ( ) { 
 - return counter ; 
 - } 
 - 
 - public void setCounter ( int counter ) { 
 - this . counter = counter ; 
 - } 
 - } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java 
 index 74487be . . dfbc311 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java 
 @ @ - 10 , 12 + 10 , 14 @ @ import im . actor . core . api . updates . UpdateUserAvatarChanged ; 
 import im . actor . core . api . updates . UpdateUserLocalNameChanged ; 
 import im . actor . core . api . updates . UpdateUserNameChanged ; 
 import im . actor . core . api . updates . UpdateUserNickChanged ; 
 + import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . User ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . Processor ; 
 import im . actor . core . modules . internal . contacts . ContactsSyncActor ; 
 import im . actor . core . modules . internal . messages . DialogsActor ; 
 + import im . actor . core . modules . internal . messages . GroupedDialogsActor ; 
 import im . actor . runtime . annotations . Verified ; 
 
 import static im . actor . core . util . JavaUtil . equalsE ; 
 @ @ - 193 , 6 + 195 , 9 @ @ public class UsersProcessor extends AbsModule implements Processor { 
 private void onUserDescChanged ( User u ) { 
 context ( ) . getMessagesModule ( ) . getDialogsActor ( ) . send ( 
 new DialogsActor . UserChanged ( u ) ) ; 
 + context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) . send ( 
 + new GroupedDialogsActor . PeerInformationChanged ( Peer . user ( u . getUid ( ) ) , 
 + u . getName ( ) , u . getAvatar ( ) ) ) ; 
 context ( ) . getContactsModule ( ) . getContactSyncActor ( ) 
 . send ( new ContactsSyncActor . UserChanged ( u ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java 
 index 0c0a457 . . e430293 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java 
 @ @ - 16 , 6 + 16 , 7 @ @ import im . actor . core . api . ApiMember ; 
 import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . MessageState ; 
 + import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . content . ServiceGroupAvatarChanged ; 
 import im . actor . core . entity . content . ServiceGroupCreated ; 
 import im . actor . core . entity . content . ServiceGroupTitleChanged ; 
 @ @ - 25 , 6 + 26 , 7 @ @ import im . actor . core . entity . content . ServiceGroupUserLeave ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . internal . messages . DialogsActor ; 
 + import im . actor . core . modules . internal . messages . GroupedDialogsActor ; 
 import im . actor . core . modules . internal . messages . entity . EntityConverter ; 
 import im . actor . runtime . annotations . Verified ; 
 
 @ @ - 298 , 5 + 300 , 8 @ @ public class GroupsProcessor extends AbsModule { 
 private void onGroupDescChanged ( Group group ) { 
 context ( ) . getMessagesModule ( ) . getDialogsActor ( ) 
 . send ( new DialogsActor . GroupChanged ( group ) ) ; 
 + context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) . send ( 
 + new GroupedDialogsActor . PeerInformationChanged ( Peer . group ( group . getGroupId ( ) ) , 
 + group . getTitle ( ) , group . getAvatar ( ) ) ) ; 
 } 
 } 
 \ No newline at end of file
