BLEU SCORE: 0.3050975216056289

TEST MSG: fix ( botkit ) : larger idle timeout
GENERATED MSG: refactor ( botkit ) : more readable websocket errors

TEST DIFF (one line): diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > index a2ec686 . . 0eac250 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > @ @ - 13 , 9 + 13 , 10 @ @ import spray . http . { HttpHeaders , HttpMethods , HttpRequest } < nl > import spray . io . ServerSSLEngineProvider < nl > < nl > import scala . annotation . tailrec < nl > + import scala . concurrent . duration . _ < nl > import scala . util . control . NoStackTrace < nl > < nl > - private [ botkit ] final case object ConnectionClosed < nl > + private [ botkit ] case object ConnectionClosed < nl > < nl > private [ botkit ] object WebsocketClient { < nl > def sourceAndSink ( url : String ) ( implicit context : ActorRefFactory ) = { < nl > @ @ - 49 , 6 + 50 , 8 @ @ private [ botkit ] final class WebsocketClient ( url : String ) < nl > onMessage ( frame ) < nl > case str : String ⇒ < nl > connection ! TextFrame ( str ) < nl > + case spray . can . websocket . UpgradedToWebSocket = > < nl > + self ! spray . io . ConnectionTimeouts . SetIdleTimeout ( 1 . hour ) < nl > case event : Http . ConnectionClosed ⇒ < nl > onClose ( event ) < nl > context . stop ( self )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala < nl > index 27a350b . . 74489ec 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala < nl > @ @ - 87 , 7 + 87 , 7 @ @ abstract class BotBase extends BotBaseBase { < nl > < nl > protected def nextRandomId ( ) = ThreadLocalRandom . current ( ) . nextLong ( ) < nl > < nl > - protected def getUser ( id : Int ) = this . users . get ( id ) . getOrElse ( throw new RuntimeException ( s " User $ id not found " ) ) < nl > + protected def getUser ( id : Int ) = this . users . getOrElse ( id , throw new RuntimeException ( s " User $ id not found " ) ) < nl > < nl > - protected def getGroup ( id : Int ) = this . groups . get ( id ) . getOrElse ( throw new RuntimeException ( s " Group $ id not found " ) ) < nl > + protected def getGroup ( id : Int ) = this . groups . getOrElse ( id , throw new RuntimeException ( s " Group $ id not found " ) ) < nl > } < nl > diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > index 8d2f7c3 . . 5b42dfa 100644 < nl > - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala < nl > @ @ - 126 , 9 + 126 , 9 @ @ private [ botkit ] final class WebsocketClient ( url : String ) < nl > log . info ( " > > { } " , textToSend ) < nl > client ! textToSend < nl > case e : Http . ConnectionClosed ⇒ < nl > - onErrorThenStop ( new RuntimeException ( s " Connection closed : $ e " ) with NoStackTrace ) < nl > + onErrorThenStop ( WebsocketClientEvents . ConnectionClosed ( e ) ) < nl > case Terminated ( ` client ` ) ⇒ < nl > - onErrorThenStop ( new RuntimeException ( " Failed to connect " ) with NoStackTrace ) < nl > + onErrorThenStop ( WebsocketClientEvents . FailedToConnect ) < nl > case unmatched ⇒ < nl > log . error ( " Unmatched { } " , unmatched ) < nl > } < nl > @ @ - 152 , 4 + 152 , 11 @ @ private [ botkit ] final class WebsocketClient ( url : String ) < nl > deliverBuf ( ) < nl > } < nl > } < nl > + } < nl > + < nl > + abstract class WebsocketClientException ( message : String ) extends RuntimeException ( message ) with NoStackTrace < nl > + < nl > + object WebsocketClientEvents { < nl > + case object FailedToConnect extends WebsocketClientException ( " Failed to connect " ) < nl > + case class ConnectionClosed ( e : Http . ConnectionClosed ) extends WebsocketClientException ( s " Connection closed : $ { e . getErrorCause } " ) < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 index a2ec686 . . 0eac250 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 @ @ - 13 , 9 + 13 , 10 @ @ import spray . http . { HttpHeaders , HttpMethods , HttpRequest } 
 import spray . io . ServerSSLEngineProvider 
 
 import scala . annotation . tailrec 
 + import scala . concurrent . duration . _ 
 import scala . util . control . NoStackTrace 
 
 - private [ botkit ] final case object ConnectionClosed 
 + private [ botkit ] case object ConnectionClosed 
 
 private [ botkit ] object WebsocketClient { 
 def sourceAndSink ( url : String ) ( implicit context : ActorRefFactory ) = { 
 @ @ - 49 , 6 + 50 , 8 @ @ private [ botkit ] final class WebsocketClient ( url : String ) 
 onMessage ( frame ) 
 case str : String ⇒ 
 connection ! TextFrame ( str ) 
 + case spray . can . websocket . UpgradedToWebSocket = > 
 + self ! spray . io . ConnectionTimeouts . SetIdleTimeout ( 1 . hour ) 
 case event : Http . ConnectionClosed ⇒ 
 onClose ( event ) 
 context . stop ( self )

NEAREST DIFF:
diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala 
 index 27a350b . . 74489ec 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / BotBase . scala 
 @ @ - 87 , 7 + 87 , 7 @ @ abstract class BotBase extends BotBaseBase { 
 
 protected def nextRandomId ( ) = ThreadLocalRandom . current ( ) . nextLong ( ) 
 
 - protected def getUser ( id : Int ) = this . users . get ( id ) . getOrElse ( throw new RuntimeException ( s " User $ id not found " ) ) 
 + protected def getUser ( id : Int ) = this . users . getOrElse ( id , throw new RuntimeException ( s " User $ id not found " ) ) 
 
 - protected def getGroup ( id : Int ) = this . groups . get ( id ) . getOrElse ( throw new RuntimeException ( s " Group $ id not found " ) ) 
 + protected def getGroup ( id : Int ) = this . groups . getOrElse ( id , throw new RuntimeException ( s " Group $ id not found " ) ) 
 } 
 diff - - git a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 index 8d2f7c3 . . 5b42dfa 100644 
 - - - a / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 + + + b / actor - server / actor - botkit / src / main / scala / im / actor / botkit / WebsocketClient . scala 
 @ @ - 126 , 9 + 126 , 9 @ @ private [ botkit ] final class WebsocketClient ( url : String ) 
 log . info ( " > > { } " , textToSend ) 
 client ! textToSend 
 case e : Http . ConnectionClosed ⇒ 
 - onErrorThenStop ( new RuntimeException ( s " Connection closed : $ e " ) with NoStackTrace ) 
 + onErrorThenStop ( WebsocketClientEvents . ConnectionClosed ( e ) ) 
 case Terminated ( ` client ` ) ⇒ 
 - onErrorThenStop ( new RuntimeException ( " Failed to connect " ) with NoStackTrace ) 
 + onErrorThenStop ( WebsocketClientEvents . FailedToConnect ) 
 case unmatched ⇒ 
 log . error ( " Unmatched { } " , unmatched ) 
 } 
 @ @ - 152 , 4 + 152 , 11 @ @ private [ botkit ] final class WebsocketClient ( url : String ) 
 deliverBuf ( ) 
 } 
 } 
 + } 
 + 
 + abstract class WebsocketClientException ( message : String ) extends RuntimeException ( message ) with NoStackTrace 
 + 
 + object WebsocketClientEvents { 
 + case object FailedToConnect extends WebsocketClientException ( " Failed to connect " ) 
 + case class ConnectionClosed ( e : Http . ConnectionClosed ) extends WebsocketClientException ( s " Connection closed : $ { e . getErrorCause } " ) 
 } 
 \ No newline at end of file
