BLEU SCORE: 0.2626909894424158

TEST MSG: fix ( server ) : start Kamon on server startup
GENERATED MSG: feat ( server ) : StartedActorServer

TEST DIFF (one line): diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 7e95c52 . . fc924ff 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 42 , 6 + 42 , 7 @ @ import im . actor . server . session . { Session , SessionConfig , SessionMessage } < nl > import im . actor . server . sms . { TelesignCallEngine , TelesignClient , TelesignSmsEngine } < nl > import im . actor . server . social . SocialExtension < nl > import im . actor . server . user . _ < nl > + import kamon . Kamon < nl > < nl > import scala . language . existentials < nl > < nl > @ @ - 77 , 6 + 78 , 7 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > * @ return < nl > * / < nl > def start ( ) : ActorServer = { < nl > + Kamon . start ( ) < nl > SessionMessage . register ( ) < nl > CommonSerialization . register ( ) < nl > UserProcessor . register ( )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 052eb8e . . 88dbf40 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 45 , 8 + 45 , 10 @ @ import im . actor . server . sms . { TelesignCallEngine , TelesignClient , TelesignSmsEngi < nl > import im . actor . server . social . SocialExtension < nl > import im . actor . server . user . _ < nl > < nl > + final case class StartedActorServer ( system : ActorSystem ) < nl > + < nl > final case class ActorServer ( searchServiceClass : Class [ _ < : SearchService ] = classOf [ SearchServiceImpl ] ) { < nl > - def start ( ) : Unit = { < nl > + def start ( ) : StartedActorServer = { < nl > SessionMessage . register ( ) < nl > CommonSerialization . register ( ) < nl > UserProcessor . register ( ) < nl > @ @ - 222 , 6 + 224 , 8 @ @ final case class ActorServer ( searchServiceClass : Class [ _ < : SearchService ] = cla < nl > < nl > system . log . debug ( " Starting Http Api " ) < nl > HttpApiFrontend . start ( serverConfig ) < nl > + < nl > + StartedActorServer ( system ) < nl > } catch { < nl > case e : ConfigException ⇒ < nl > system . log . error ( e , " Failed to load server configuration " )

TEST DIFF:
diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 7e95c52 . . fc924ff 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 42 , 6 + 42 , 7 @ @ import im . actor . server . session . { Session , SessionConfig , SessionMessage } 
 import im . actor . server . sms . { TelesignCallEngine , TelesignClient , TelesignSmsEngine } 
 import im . actor . server . social . SocialExtension 
 import im . actor . server . user . _ 
 + import kamon . Kamon 
 
 import scala . language . existentials 
 
 @ @ - 77 , 6 + 78 , 7 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 * @ return 
 * / 
 def start ( ) : ActorServer = { 
 + Kamon . start ( ) 
 SessionMessage . register ( ) 
 CommonSerialization . register ( ) 
 UserProcessor . register ( )

NEAREST DIFF:
diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 052eb8e . . 88dbf40 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 45 , 8 + 45 , 10 @ @ import im . actor . server . sms . { TelesignCallEngine , TelesignClient , TelesignSmsEngi 
 import im . actor . server . social . SocialExtension 
 import im . actor . server . user . _ 
 
 + final case class StartedActorServer ( system : ActorSystem ) 
 + 
 final case class ActorServer ( searchServiceClass : Class [ _ < : SearchService ] = classOf [ SearchServiceImpl ] ) { 
 - def start ( ) : Unit = { 
 + def start ( ) : StartedActorServer = { 
 SessionMessage . register ( ) 
 CommonSerialization . register ( ) 
 UserProcessor . register ( ) 
 @ @ - 222 , 6 + 224 , 8 @ @ final case class ActorServer ( searchServiceClass : Class [ _ < : SearchService ] = cla 
 
 system . log . debug ( " Starting Http Api " ) 
 HttpApiFrontend . start ( serverConfig ) 
 + 
 + StartedActorServer ( system ) 
 } catch { 
 case e : ConfigException ⇒ 
 system . log . error ( e , " Failed to load server configuration " )
