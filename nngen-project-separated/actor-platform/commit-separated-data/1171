BLEU SCORE: 0.17976451428761386

TEST MSG: fix + feat ( iOS ) : add new attachment menu , chore some warrnings , and fixes for audio rec
GENERATED MSG: fix ( iOS ) : fix upload video and save point for new attachment menu

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / AppIcon . appiconset / Contents . json b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / AppIcon . appiconset / Contents . json < nl > index 1539cc7 . . 8d9a22f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / AppIcon . appiconset / Contents . json < nl > + + + b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / AppIcon . appiconset / Contents . json < nl > @ @ - 73 , 8 + 73 , 9 @ @ < nl > " scale " : " 2x " < nl > } , < nl > { < nl > - " idiom " : " ipad " , < nl > " size " : " 83 . 5x83 . 5 " , < nl > + " idiom " : " ipad " , < nl > + " filename " : " iconios9 . png " , < nl > " scale " : " 2x " < nl > } < nl > ] , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / AppIcon . appiconset / iconios9 . png b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / AppIcon . appiconset / iconios9 . png < nl > new file mode 100644 < nl > index 0000000 . . a1ba51b < nl > Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / AppIcon . appiconset / iconios9 . png differ < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / LaunchImage . launchimage / Contents . json b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / LaunchImage . launchimage / Contents . json < nl > index bf38d0c . . 9674ef2 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / LaunchImage . launchimage / Contents . json < nl > + + + b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / LaunchImage . launchimage / Contents . json < nl > @ @ - 35 , 6 + 35 , 7 @ @ < nl > { < nl > " orientation " : " portrait " , < nl > " idiom " : " iphone " , < nl > + " filename " : " sssss . png " , < nl > " extent " : " full - screen " , < nl > " scale " : " 1x " < nl > } , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / LaunchImage . launchimage / sssss . png b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / LaunchImage . launchimage / sssss . png < nl > new file mode 100644 < nl > index 0000000 . . 93136d3 < nl > Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / LaunchImage . launchimage / sssss . png differ < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index 57b3c32 . . 3b94877 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 74 , 7 + 74 , 7 @ @ < nl > 	 	 066A52001BC4E0B0000E606E / * libsqlite3 . tbd in Frameworks * / = { isa = PBXBuildFile ; fileRef = 066A51FF1BC4E0B0000E606E / * libsqlite3 . tbd * / ; } ; < nl > 	 	 066A52081BC4E962000E606E / * Makefile in Sources * / = { isa = PBXBuildFile ; fileRef = 066A52051BC4E962000E606E / * Makefile * / ; } ; < nl > 	 	 066A52151BC4EE04000E606E / * AAAvatarView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A52141BC4EE04000E606E / * AAAvatarView . swift * / ; } ; < nl > - 	 	 066A52221BC4EEAC000E606E / * AAManagedTable . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A52191BC4EEAC000E606E / * AAManagedTable . swift * / ; } ; < nl > + 	 	 066A52221BC4EEAC000E606E / * AAManagedTable . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A52191BC4EEAC000E606E / * AAManagedTable . swift * / ; settings = { COMPILER _ FLAGS = " - w " ; } ; } ; < nl > 	 	 066A52231BC4EEAC000E606E / * AAManagedSection . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A521A1BC4EEAC000E606E / * AAManagedSection . swift * / ; } ; < nl > 	 	 066A52241BC4EEAC000E606E / * AAManagedRange . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A521B1BC4EEAC000E606E / * AAManagedRange . swift * / ; } ; < nl > 	 	 066A52251BC4EEAC000E606E / * ManagedBindedCells . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A521C1BC4EEAC000E606E / * ManagedBindedCells . swift * / ; } ; < nl > @ @ - 226 , 7 + 226 , 7 @ @ < nl > 	 	 15D35F511C20187E00E3717A / * ASQueue . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F361C20187E00E3717A / * ASQueue . h * / ; } ; < nl > 	 	 15D35F521C20187E00E3717A / * ASQueue . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F371C20187E00E3717A / * ASQueue . m * / ; } ; < nl > 	 	 15D35F531C20187E00E3717A / * AAOpusAudioRecorder . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F381C20187E00E3717A / * AAOpusAudioRecorder . h * / ; } ; < nl > - 	 	 15D35F541C20187E00E3717A / * AAOpusAudioRecorder . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F391C20187E00E3717A / * AAOpusAudioRecorder . m * / ; } ; < nl > + 	 	 15D35F541C20187E00E3717A / * AAOpusAudioRecorder . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F391C20187E00E3717A / * AAOpusAudioRecorder . m * / ; settings = { COMPILER _ FLAGS = " - w " ; } ; } ; < nl > 	 	 15D35F551C20187E00E3717A / * AAAlertView . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F3A1C20187E00E3717A / * AAAlertView . h * / ; } ; < nl > 	 	 15D35F561C20187E00E3717A / * AAAlertView . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F3B1C20187E00E3717A / * AAAlertView . m * / ; } ; < nl > 	 	 15D35F571C20187E00E3717A / * AAAudioRecorder . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F3C1C20187E00E3717A / * AAAudioRecorder . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; < nl > @ @ - 237 , 7 + 237 , 7 @ @ < nl > 	 	 15D35F5D1C20187E00E3717A / * AANativeAudioPlayer . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F421C20187E00E3717A / * AANativeAudioPlayer . h * / ; } ; < nl > 	 	 15D35F5E1C20187E00E3717A / * AANativeAudioPlayer . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F431C20187E00E3717A / * AANativeAudioPlayer . m * / ; } ; < nl > 	 	 15D35F5F1C20187E00E3717A / * AAOpusAudioPlayerAU . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F441C20187E00E3717A / * AAOpusAudioPlayerAU . h * / ; } ; < nl > - 	 	 15D35F601C20187E00E3717A / * AAOpusAudioPlayerAU . mm in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F451C20187E00E3717A / * AAOpusAudioPlayerAU . mm * / ; } ; < nl > + 	 	 15D35F601C20187E00E3717A / * AAOpusAudioPlayerAU . mm in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F451C20187E00E3717A / * AAOpusAudioPlayerAU . mm * / ; settings = { COMPILER _ FLAGS = " - w " ; } ; } ; < nl > 	 	 15D35F611C20187E00E3717A / * AAAudioBuffer . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F461C20187E00E3717A / * AAAudioBuffer . h * / ; } ; < nl > 	 	 15D35F621C20187E00E3717A / * AAModernConversationAudioPlayer . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F471C20187E00E3717A / * AAModernConversationAudioPlayer . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; < nl > 	 	 15D35F631C20187E00E3717A / * AAModernConversationAudioPlayer . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F481C20187E00E3717A / * AAModernConversationAudioPlayer . m * / ; } ; < nl > @ @ - 252 , 7 + 252 , 7 @ @ < nl > 	 	 15D35F6F1C20196E00E3717A / * AARecordAudioController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F6E1C20196E00E3717A / * AARecordAudioController . swift * / ; } ; < nl > 	 	 15D35F751C201B6B00E3717A / * AACustomPresentationController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F731C201B6B00E3717A / * AACustomPresentationController . swift * / ; } ; < nl > 	 	 15D35F761C201B6B00E3717A / * AACustomPresentationAnimationController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F741C201B6B00E3717A / * AACustomPresentationAnimationController . swift * / ; } ; < nl > - 	 	 15D35F781C20273D00E3717A / * AAAudioRecorder . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F3D1C20187E00E3717A / * AAAudioRecorder . m * / ; } ; < nl > + 	 	 15D35F781C20273D00E3717A / * AAAudioRecorder . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F3D1C20187E00E3717A / * AAAudioRecorder . m * / ; settings = { COMPILER _ FLAGS = " - w " ; } ; } ; < nl > 	 	 15F89F071C211FED00776ACD / * opus _ defines . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F031C211FED00776ACD / * opus _ defines . h * / ; } ; < nl > 	 	 15F89F081C211FED00776ACD / * opus _ multistream . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F041C211FED00776ACD / * opus _ multistream . h * / ; } ; < nl > 	 	 15F89F091C211FED00776ACD / * opus _ types . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F051C211FED00776ACD / * opus _ types . h * / ; } ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / Contents . json b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / Contents . json < nl > new file mode 100644 < nl > index 0000000 . . da4a164 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / Contents . json < nl > @ @ - 0 , 0 + 1 , 6 @ @ < nl > + { < nl > + " info " : { < nl > + " version " : 1 , < nl > + " author " : " xcode " < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOff . imageset / Contents . json b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOff . imageset / Contents . json < nl > new file mode 100644 < nl > index 0000000 . . a0c9ebf < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOff . imageset / Contents . json < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + { < nl > + " images " : [ < nl > + { < nl > + " idiom " : " universal " , < nl > + " scale " : " 1x " < nl > + } , < nl > + { < nl > + " idiom " : " universal " , < nl > + " filename " : " ImageSelectedOff @ 2x . png " , < nl > + " scale " : " 2x " < nl > + } , < nl > + { < nl > + " idiom " : " universal " , < nl > + " scale " : " 3x " < nl > + } < nl > + ] , < nl > + " info " : { < nl > + " version " : 1 , < nl > + " author " : " xcode " < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOff . imageset / ImageSelectedOff @ 2x . png b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOff . imageset / ImageSelectedOff @ 2x . png < nl > new file mode 100644 < nl > index 0000000 . . 207e56c < nl > Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOff . imageset / ImageSelectedOff @ 2x . png differ < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOn . imageset / Contents . json b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOn . imageset / Contents . json < nl > new file mode 100644 < nl > index 0000000 . . a454e48 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOn . imageset / Contents . json < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + { < nl > + " images " : [ < nl > + { < nl > + " idiom " : " universal " , < nl > + " scale " : " 1x " < nl > + } , < nl > + { < nl > + " idiom " : " universal " , < nl > + " filename " : " ImageSelectedOn @ 2x . png " , < nl > + " scale " : " 2x " < nl > + } , < nl > + { < nl > + " idiom " : " universal " , < nl > + " scale " : " 3x " < nl > + } < nl > + ] , < nl > + " info " : { < nl > + " version " : 1 , < nl > + " author " : " xcode " < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOn . imageset / ImageSelectedOn @ 2x . png b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOn . imageset / ImageSelectedOn @ 2x . png < nl > new file mode 100644 < nl > index 0000000 . . 0677197 < nl > Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOn . imageset / ImageSelectedOn @ 2x . png differ < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > index d0bc182 . . 6369105 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > @ @ - 7 , 6 + 7 , 7 @ @ < nl > / / < nl > < nl > import UIKit < nl > + import Photos < nl > < nl > protocol AAActionSheetDelegate { < nl > func actionSheetDidFinished ( selectedObjs : Array < AnyObject > ) < nl > @ @ - 32 , 8 + 33 , 6 @ @ class AAConvActionSheet : UIView { < nl > < nl > weak var weakSuper : ConversationViewController ! < nl > < nl > - < nl > - < nl > init ( maxSelected : Int , weakSuperIn : ConversationViewController ) { < nl > super . init ( frame : CGRectZero ) < nl > < nl > @ @ - 54 , 21 + 53 , 14 @ @ class AAConvActionSheet : UIView { < nl > < nl > self . alpha = 0 < nl > self . frame = CGRectMake ( 0 , 0 , screenWidth , screenHeigth ) < nl > - self . backgroundColor = UIColor . blackColor ( ) . colorWithAlphaComponent ( 0 . 5 ) < nl > + self . backgroundColor = UIColor . blackColor ( ) . colorWithAlphaComponent ( 0 . 7 ) < nl > < nl > < nl > < nl > / / make photo < nl > < nl > - < nl > - self . configNotification ( ) < nl > - < nl > } < nl > < nl > - func configNotification ( ) { < nl > - < nl > - < nl > - } < nl > < nl > deinit { < nl > < nl > @ @ - 80 , 12 + 72 , 11 @ @ class AAConvActionSheet : UIView { < nl > < nl > func showAnimation ( ) { < nl > < nl > - / / self . btnCamera . selected = true < nl > - / / self . btnCamera . setTitle ( " Camera " , forState : UIControlState . Normal ) < nl > - < nl > var frame = self . sheetView . frame < nl > frame . origin . y = screenHeigth - 400 < nl > < nl > + self . weakSuper . navigationController ! . interactivePopGestureRecognizer ! . enabled = false < nl > + < nl > UIView . animateWithDuration ( 0 . 25 ) { ( ) - > Void in < nl > self . sheetView . frame = frame < nl > self . alpha = 1 < nl > @ @ - 95 , 19 + 86 , 26 @ @ class AAConvActionSheet : UIView { < nl > < nl > } < nl > < nl > - < nl > - < nl > } < nl > < nl > func cancelAnimation ( ) { < nl > < nl > + < nl > var frame = self . sheetView . frame < nl > frame . origin . y = screenHeigth < nl > < nl > + < nl > UIView . animateWithDuration ( 0 . 25 , animations : { ( ) - > Void in < nl > self . sheetView . frame = frame < nl > self . alpha = 0 < nl > } ) { ( bool ) - > Void in < nl > + < nl > + self . weakSuper . navigationController ! . interactivePopGestureRecognizer ! . enabled = true < nl > + < nl > + self . thumbnailView . selectedAssets = [ PHAsset ] ( ) < nl > + self . thumbnailView . reloadView ( ) < nl > + self . thumbnailView . collectionView . scrollToItemAtIndexPath ( NSIndexPath ( forRow : 0 , inSection : 0 ) , atScrollPosition : UICollectionViewScrollPosition . None , animated : false ) < nl > + self . updateSelectedPhotos ( ) < nl > } < nl > < nl > } < nl > @ @ - 161 , 7 + 159 , 7 @ @ class AAConvActionSheet : UIView { < nl > self . sheetView . addSubview ( self . btnCancel ) < nl > self . sheetView . addSubview ( self . thumbnailView ) < nl > < nl > - self . thumbnailView . frame = CGRectMake ( 0 , 5 , screenWidth , 100 ) < nl > + self . thumbnailView . frame = CGRectMake ( 0 , 5 , screenWidth , 90 ) < nl > self . btnCamera . frame = CGRectMake ( 0 , 100 , screenWidth , 50 ) < nl > self . btnLibrary . frame = CGRectMake ( 0 , 150 , screenWidth , 50 ) < nl > self . btnDocuments . frame = CGRectMake ( 0 , 200 , screenWidth , 50 ) < nl > @ @ - 210 , 6 + 208 , 10 @ @ class AAConvActionSheet : UIView { < nl > self . btnLocation . addTarget ( self , action : " btnLocationAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > self . btnContact . addTarget ( self , action : " btnContactAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > self . btnCancel . addTarget ( self , action : " btnCloseAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + < nl > + / / bineded self < nl > + < nl > + self . thumbnailView . bindedConvSheet = self < nl > < nl > } < nl > < nl > @ @ - 227 , 7 + 229 , 11 @ @ class AAConvActionSheet : UIView { < nl > < nl > func btnDocumentAction ( ) { < nl > cancelAnimation ( ) < nl > - self . weakSuper . pickDocument ( ) < nl > + < nl > + if ( NSFileManager . defaultManager ( ) . ubiquityIdentityToken ! = nil ) { < nl > + self . weakSuper . pickDocument ( ) < nl > + } < nl > + < nl > } < nl > < nl > func btnLocationAction ( ) { < nl > @ @ - 243 , 5 + 249 , 65 @ @ class AAConvActionSheet : UIView { < nl > func btnCloseAction ( ) { < nl > cancelAnimation ( ) < nl > } < nl > + < nl > + func updateSelectedPhotos ( ) { < nl > + < nl > + if self . thumbnailView . selectedAssets . count > 0 { < nl > + < nl > + var sendString : String ! < nl > + < nl > + if self . thumbnailView . selectedAssets . count = = 1 { < nl > + sendString = " Send \ ( self . thumbnailView . selectedAssets . count ) Photo " < nl > + } else { < nl > + sendString = " Send \ ( self . thumbnailView . selectedAssets . count ) Photos " < nl > + } < nl > + < nl > + / / remove target < nl > + self . btnCamera . removeTarget ( self , action : " btnCameraAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + < nl > + / / add new target < nl > + self . btnCamera . setTitle ( sendString , forState : UIControlState . Normal ) < nl > + self . btnCamera . addTarget ( self , action : " sendPhotos " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + self . btnCamera . titleLabel ? . font = UIFont ( name : " HelveticaNeue - Medium " , size : 17 ) < nl > + < nl > + < nl > + } else { < nl > + < nl > + / / remove target < nl > + self . btnCamera . removeTarget ( self , action : " sendPhotos " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + < nl > + < nl > + / / add new target < nl > + self . btnCamera . setTitle ( AALocalized ( " PhotoCamera " ) , forState : UIControlState . Normal ) < nl > + self . btnCamera . addTarget ( self , action : " btnCameraAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + self . btnCamera . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) < nl > + < nl > + } < nl > + < nl > + } < nl > + < nl > + func sendPhotos ( ) { < nl > + < nl > + self . cancelAnimation ( ) < nl > + < nl > + let priority = DISPATCH _ QUEUE _ PRIORITY _ DEFAULT < nl > + dispatch _ async ( dispatch _ get _ global _ queue ( priority , 0 ) ) { < nl > + < nl > + let arrayModelsForSend = self . thumbnailView . getSelectedAsImages ( ) < nl > + self . thumbnailView . selectedAssets = [ PHAsset ] ( ) < nl > + < nl > + for ( _ , image ) in arrayModelsForSend . enumerate ( ) { < nl > + < nl > + self . weakSuper . sendImageFromActionSheet ( image ) < nl > + < nl > + } < nl > + < nl > + dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { < nl > + self . updateSelectedPhotos ( ) < nl > + } < nl > + < nl > + } < nl > + < nl > + } < nl > < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift < nl > index d53eb8e . . a0eca58 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift < nl > @ @ - 7 , 13 + 7 , 16 @ @ < nl > / / < nl > < nl > import UIKit < nl > + import Photos < nl > < nl > class AAThumbnailCollectionCell : UICollectionViewCell { < nl > let imgThumbnails : UIImageView ! < nl > let imgSelected : UIImageView ! < nl > < nl > var indexPath : NSIndexPath ! < nl > - let isCheckSelected : Bool ! < nl > + var isCheckSelected : Bool ! < nl > + weak var bindedThumbView : AAThumbnailView ! < nl > + weak var bindedPhotoModel : PHAsset ! < nl > < nl > override init ( frame : CGRect ) { < nl > < nl > @ @ - 22 , 11 + 25 , 16 @ @ class AAThumbnailCollectionCell : UICollectionViewCell { < nl > < nl > self . imgSelected = UIImageView ( ) < nl > self . imgSelected . backgroundColor = UIColor . clearColor ( ) < nl > + self . imgSelected . userInteractionEnabled = true < nl > + self . imgSelected . contentMode = UIViewContentMode . ScaleAspectFill < nl > < nl > self . isCheckSelected = false < nl > < nl > super . init ( frame : frame ) < nl > < nl > + let tapRecognizer = UITapGestureRecognizer ( target : self , action : " handleSingleTap " ) < nl > + self . imgSelected . addGestureRecognizer ( tapRecognizer ) < nl > + < nl > self . configUI ( ) < nl > < nl > } < nl > @ @ - 37 , 6 + 45 , 42 @ @ class AAThumbnailCollectionCell : UICollectionViewCell { < nl > < nl > / / / < nl > < nl > + func handleSingleTap ( ) { < nl > + < nl > + if ( self . isCheckSelected = = false ) { < nl > + < nl > + self . imgSelected . image = UIImage . bundled ( " ImageSelectedOn " ) < nl > + < nl > + self . imgSelected . transform = CGAffineTransformMakeScale ( 0 . 5 , 0 . 5 ) < nl > + UIView . animateWithDuration ( 0 . 3 , delay : 0 , usingSpringWithDamping : 0 . 5 , initialSpringVelocity : 0 . 5 , options : UIViewAnimationOptions . CurveEaseInOut , animations : { ( ) - > Void in < nl > + < nl > + self . imgSelected . transform = CGAffineTransformIdentity < nl > + < nl > + } , completion : nil ) < nl > + < nl > + self . isCheckSelected = true < nl > + < nl > + self . bindedThumbView . addSelectedModel ( self . bindedPhotoModel ) < nl > + < nl > + } else { < nl > + < nl > + self . imgSelected . image = UIImage . bundled ( " ImageSelectedOff " ) < nl > + < nl > + self . imgSelected . transform = CGAffineTransformMakeScale ( 0 . 5 , 0 . 5 ) < nl > + UIView . animateWithDuration ( 0 . 3 , delay : 0 , usingSpringWithDamping : 0 . 5 , initialSpringVelocity : 0 . 5 , options : UIViewAnimationOptions . CurveEaseInOut , animations : { ( ) - > Void in < nl > + < nl > + self . imgSelected . transform = CGAffineTransformIdentity < nl > + < nl > + } , completion : nil ) < nl > + < nl > + self . isCheckSelected = false < nl > + < nl > + self . bindedThumbView . removeSelectedModel ( self . bindedPhotoModel ) < nl > + < nl > + } < nl > + < nl > + } < nl > + < nl > func configUI ( ) { < nl > < nl > self . addSubview ( self . imgThumbnails ) < nl > @ @ - 47 , 8 + 91 , 10 @ @ class AAThumbnailCollectionCell : UICollectionViewCell { < nl > override func layoutSubviews ( ) { < nl > super . layoutSubviews ( ) < nl > < nl > - self . imgThumbnails . frame = CGRectMake ( 0 , 0 , self . contentView . frame . size . width , self . contentView . frame . size . height ) < nl > - self . imgSelected . frame = CGRectMake ( 0 , 0 , self . contentView . frame . size . width , self . contentView . frame . size . height ) < nl > + self . imgThumbnails . frame = CGRectMake ( 0 , 0 , 90 , 90 ) < nl > + < nl > + self . imgSelected . frame = CGRectMake ( self . contentView . frame . size . width - 30 , 4 , 26 , 26 ) < nl > + < nl > < nl > < nl > } < nl > @ @ - 56 , 7 + 102 , 7 @ @ class AAThumbnailCollectionCell : UICollectionViewCell { < nl > override func prepareForReuse ( ) { < nl > super . prepareForReuse ( ) < nl > < nl > - self . imgSelected . image = nil < nl > + self . imgThumbnails . image = nil < nl > < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift < nl > index bb33b2e . . cf78608 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift < nl > @ @ - 18 , 13 + 18 , 16 @ @ public enum ImagePickerMediaType { < nl > class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSource { < nl > < nl > var collectionView : UICollectionView ! < nl > + weak var bindedConvSheet : AAConvActionSheet ! < nl > let mediaType : ImagePickerMediaType = ImagePickerMediaType . Image < nl > < nl > private var assets = [ PHAsset ] ( ) < nl > + var selectedAssets = [ PHAsset ] ( ) < nl > private let imageManager = PHCachingImageManager ( ) < nl > + private let imageManagerForOrig = PHCachingImageManager ( ) < nl > < nl > - private let minimumPreviewHeight : CGFloat = 70 < nl > - private var maximumPreviewHeight : CGFloat = 70 < nl > + private let minimumPreviewHeight : CGFloat = 90 < nl > + private var maximumPreviewHeight : CGFloat = 90 < nl > < nl > private lazy var requestOptions : PHImageRequestOptions = { < nl > let options = PHImageRequestOptions ( ) < nl > @ @ - 104 , 6 + 107 , 7 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > self . imageManager . requestImageDataForAsset ( asset , options : requestOptions ) { data , _ , _ , info in < nl > if data ! = nil { < nl > self . assets . append ( asset ) < nl > + self . prefetchImagesForAsset ( asset ) < nl > } < nl > } < nl > } < nl > @ @ - 117 , 6 + 121 , 24 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > < nl > private func requestImageForAsset ( asset : PHAsset , completion : ( image : UIImage ? ) - > ( ) ) { < nl > let targetSize = sizeForAsset ( asset , scale : UIScreen . mainScreen ( ) . scale ) < nl > + requestOptions . synchronous = false < nl > + < nl > + / / Workaround because PHImageManager . requestImageForAsset doesn ' t work for burst images < nl > + if asset . representsBurst { < nl > + imageManager . requestImageDataForAsset ( asset , options : requestOptions ) { data , _ , _ , _ in < nl > + let image = data . flatMap { UIImage ( data : $ 0 ) } < nl > + completion ( image : image ) < nl > + } < nl > + } < nl > + else { < nl > + imageManager . requestImageForAsset ( asset , targetSize : targetSize , contentMode : . AspectFill , options : requestOptions ) { image , _ in < nl > + completion ( image : image ) < nl > + } < nl > + } < nl > + } < nl > + < nl > + private func requestOriginalImageForAsset ( asset : PHAsset , completion : ( image : UIImage ? ) - > ( ) ) { < nl > + let targetSize = sizeForAsset ( asset , scale : UIScreen . mainScreen ( ) . scale ) < nl > requestOptions . synchronous = true < nl > < nl > / / Workaround because PHImageManager . requestImageForAsset doesn ' t work for burst images < nl > @ @ - 134 , 12 + 156 , 16 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > } < nl > < nl > private func sizeForAsset ( asset : PHAsset , scale : CGFloat = 1 ) - > CGSize { < nl > - let proportion = CGFloat ( asset . pixelWidth ) / CGFloat ( asset . pixelHeight ) < nl > < nl > - let imageHeight = maximumPreviewHeight - 2 * previewCollectionViewInset < nl > - let imageWidth = floor ( proportion * imageHeight ) < nl > + var complitedCGSize : CGSize ! < nl > + < nl > + if asset . pixelWidth > asset . pixelHeight { < nl > + complitedCGSize = CGSizeMake ( CGFloat ( asset . pixelHeight ) , CGFloat ( asset . pixelHeight ) ) < nl > + } else { < nl > + complitedCGSize = CGSizeMake ( CGFloat ( asset . pixelWidth ) , CGFloat ( asset . pixelWidth ) ) < nl > + } < nl > < nl > - return CGSize ( width : imageWidth * scale , height : imageHeight * scale ) < nl > + return complitedCGSize < nl > } < nl > < nl > / / / collection view delegate < nl > @ @ - 157 , 15 + 183 , 70 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > < nl > let cell = self . collectionView . dequeueReusableCellWithReuseIdentifier ( " AAThumbnailCollectionCell " , forIndexPath : indexPath ) as ! AAThumbnailCollectionCell < nl > < nl > + cell . bindedThumbView = self < nl > + < nl > + let photoModel = self . assets [ indexPath . row ] < nl > + < nl > + cell . bindedPhotoModel = photoModel < nl > + < nl > + if self . selectedAssets . contains ( photoModel ) { < nl > + cell . isCheckSelected = true < nl > + cell . imgSelected . image = UIImage . bundled ( " ImageSelectedOn " ) < nl > + < nl > + } else { < nl > + cell . isCheckSelected = false < nl > + cell . imgSelected . image = UIImage . bundled ( " ImageSelectedOff " ) < nl > + < nl > + } < nl > + < nl > cell . backgroundColor = UIColor . whiteColor ( ) < nl > < nl > let asset = assets [ indexPath . row ] < nl > < nl > requestImageForAsset ( asset ) { image in < nl > - cell . imgSelected . image = image < nl > + < nl > + var complitedImage : UIImage ! < nl > + < nl > + if image ! . size . width > image ! . size . height { < nl > + complitedImage = self . imageByCroppingImage ( image ! , toSize : CGSizeMake ( image ! . size . height , image ! . size . height ) ) < nl > + } else { < nl > + complitedImage = self . imageByCroppingImage ( image ! , toSize : CGSizeMake ( image ! . size . width , image ! . size . width ) ) < nl > + } < nl > + < nl > + cell . imgThumbnails . image = complitedImage < nl > + < nl > + < nl > } < nl > < nl > < nl > + / / let priority = DISPATCH _ QUEUE _ PRIORITY _ DEFAULT < nl > + / / dispatch _ async ( dispatch _ get _ global _ queue ( priority , 0 ) ) { < nl > + / / / / do some task < nl > + / / < nl > + / / self . requestOptions . synchronous = true < nl > + / / < nl > + / / self . imageManagerForOrig . requestImageDataForAsset ( photoModel , options : self . requestOptions , resultHandler : { ( data , _ , _ , _ ) - > Void in < nl > + / / if data ! = nil { < nl > + / / < nl > + / / let imageFromAsset = UIImage ( data : data ! ) ! < nl > + / / var complitedImage : UIImage ! < nl > + / / < nl > + / / if imageFromAsset . size . width > imageFromAsset . size . height { < nl > + / / complitedImage = self . imageByCroppingImage ( imageFromAsset , toSize : CGSizeMake ( imageFromAsset . size . height , imageFromAsset . size . height ) ) < nl > + / / } else { < nl > + / / complitedImage = self . imageByCroppingImage ( imageFromAsset , toSize : CGSizeMake ( imageFromAsset . size . width , imageFromAsset . size . width ) ) < nl > + / / } < nl > + / / < nl > + / / dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { < nl > + / / / / update some UI < nl > + / / cell . imgThumbnails . image = complitedImage < nl > + / / } < nl > + / / } < nl > + / / } ) < nl > + / / < nl > + / / } < nl > + < nl > + < nl > return cell < nl > } < nl > < nl > @ @ - 176 , 7 + 257 , 7 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > } < nl > < nl > func collectionViewSetup ( ) { < nl > - < nl > + < nl > let flowLayout = UICollectionViewFlowLayout ( ) < nl > flowLayout . scrollDirection = . Horizontal < nl > flowLayout . minimumLineSpacing = 4 < nl > @ @ - 189 , 7 + 270 , 7 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > self . collectionView . showsHorizontalScrollIndicator = false < nl > self . collectionView . delegate = self < nl > self . collectionView . dataSource = self < nl > - self . collectionView . frame = CGRectMake ( 0 , 0 , screenWidth , 80 ) < nl > + self . collectionView . frame = CGRectMake ( 0 , 0 , screenWidth , 90 ) < nl > < nl > self . collectionView . registerClass ( AAThumbnailCollectionCell . self , forCellWithReuseIdentifier : " AAThumbnailCollectionCell " ) < nl > < nl > @ @ - 213 , 4 + 294 , 40 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > return cropped ; < nl > } < nl > < nl > + func addSelectedModel ( model : PHAsset ) { < nl > + < nl > + self . selectedAssets . append ( model ) < nl > + self . bindedConvSheet . updateSelectedPhotos ( ) < nl > + < nl > + } < nl > + < nl > + func removeSelectedModel ( model : PHAsset ) { < nl > + if let index = self . selectedAssets . indexOf ( model ) { < nl > + self . selectedAssets . removeAtIndex ( index ) < nl > + self . bindedConvSheet . updateSelectedPhotos ( ) < nl > + } < nl > + } < nl > + < nl > + func getSelectedAsImages ( ) - > [ UIImage ] { < nl > + < nl > + let arrayModelsForSend = self . selectedAssets < nl > + < nl > + var compliedArray = [ UIImage ] ( ) < nl > + < nl > + for ( _ , model ) in arrayModelsForSend . enumerate ( ) { < nl > + < nl > + self . imageManagerForOrig . requestImageDataForAsset ( model , options : requestOptions , resultHandler : { ( data , _ , _ , _ ) - > Void in < nl > + if data ! = nil { < nl > + compliedArray . append ( UIImage ( data : data ! ) ! ) < nl > + } < nl > + } ) < nl > + < nl > + } < nl > + < nl > + return compliedArray < nl > + < nl > + } < nl > + < nl > + < nl > + < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > index 453c6f8 . . a53d43c 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > @ @ - 463 , 37 + 463 , 37 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > < nl > self . textInputbar . textView . resignFirstResponder ( ) < nl > < nl > - let hasCamera = UIImagePickerController . isSourceTypeAvailable ( UIImagePickerControllerSourceType . Camera ) < nl > - < nl > - let builder = AAMenuBuilder ( ) < nl > - < nl > - if hasCamera { < nl > - builder . add ( " PhotoCamera " ) { < nl > - self . pickImage ( . Camera ) < nl > - } < nl > - } < nl > - < nl > - builder . add ( " PhotoLibrary " ) { < nl > - self . pickImage ( . PhotoLibrary ) < nl > - } < nl > - < nl > - if ( NSFileManager . defaultManager ( ) . ubiquityIdentityToken ! = nil ) { < nl > - builder . add ( " SendDocument " ) { < nl > - self . pickDocument ( ) < nl > - } < nl > - } < nl > - < nl > - builder . add ( " ShareLocation " ) { < nl > - self . pickLocation ( ) < nl > - } < nl > - < nl > - builder . add ( " ShareContact " ) { < nl > - self . pickContact ( ) < nl > - } < nl > - < nl > - showActionSheet ( builder . items , cancelButton : " AlertCancel " , destructButton : nil , sourceView : self . leftButton , sourceRect : self . leftButton . bounds , tapClosure : builder . tapClosure ) < nl > + / / let hasCamera = UIImagePickerController . isSourceTypeAvailable ( UIImagePickerControllerSourceType . Camera ) < nl > + / / < nl > + / / let builder = AAMenuBuilder ( ) < nl > + / / < nl > + / / if hasCamera { < nl > + / / builder . add ( " PhotoCamera " ) { < nl > + / / self . pickImage ( . Camera ) < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / builder . add ( " PhotoLibrary " ) { < nl > + / / self . pickImage ( . PhotoLibrary ) < nl > + / / } < nl > + / / < nl > + / / if ( NSFileManager . defaultManager ( ) . ubiquityIdentityToken ! = nil ) { < nl > + / / builder . add ( " SendDocument " ) { < nl > + / / self . pickDocument ( ) < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / builder . add ( " ShareLocation " ) { < nl > + / / self . pickLocation ( ) < nl > + / / } < nl > + / / < nl > + / / builder . add ( " ShareContact " ) { < nl > + / / self . pickContact ( ) < nl > + / / } < nl > + / / < nl > + / / showActionSheet ( builder . items , cancelButton : " AlertCancel " , destructButton : nil , sourceView : self . leftButton , sourceRect : self . leftButton . bounds , tapClosure : builder . tapClosure ) < nl > < nl > - / / self . actionSheet . showAnimation ( ) < nl > + self . actionSheet . showAnimation ( ) < nl > < nl > self . rightButton . layoutIfNeeded ( ) < nl > } < nl > @ @ - 650 , 6 + 650 , 10 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > picker . dismissViewControllerAnimated ( true , completion : nil ) < nl > } < nl > < nl > + func sendImageFromActionSheet ( image : UIImage ) { < nl > + Actor . sendUIImage ( image , peer : peer ) < nl > + } < nl > + < nl > / / Location picking < nl > < nl > func pickLocation ( ) { < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AudioRecorder / AAAudioRecorder . m b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AudioRecorder / AAAudioRecorder . m < nl > index 70665ac . . 016ed15 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AudioRecorder / AAAudioRecorder . m < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AudioRecorder / AAAudioRecorder . m < nl > @ @ - 93 , 18 + 93 , 20 @ @ static void playSoundCompleted ( _ _ unused SystemSoundID ssID , _ _ unused void * clien < nl > < nl > currentTimerId = timerId ; < nl > < nl > - static SystemSoundID soundId ; < nl > - static dispatch _ once _ t onceToken ; < nl > - dispatch _ once ( & onceToken , ^ < nl > - { < nl > - NSString * path = [ NSString stringWithFormat : @ " % @ / % @ " , [ [ NSBundle mainBundle ] resourcePath ] , @ " begin _ record . caf " ] ; < nl > - NSURL * filePath = [ NSURL fileURLWithPath : path isDirectory : false ] ; < nl > - AudioServicesCreateSystemSoundID ( ( _ _ bridge CFURLRef ) filePath , & soundId ) ; < nl > - if ( soundId ! = 0 ) < nl > - AudioServicesAddSystemSoundCompletion ( soundId , NULL , kCFRunLoopCommonModes , & playSoundCompleted , NULL ) ; < nl > - } ) ; < nl > + AudioServicesPlayAlertSound ( kSystemSoundID _ Vibrate ) ; < nl > < nl > - AudioServicesPlaySystemSound ( soundId ) ; < nl > + / / static SystemSoundID soundId ; < nl > + / / static dispatch _ once _ t onceToken ; < nl > + / / dispatch _ once ( & onceToken , ^ < nl > + / / { < nl > + / / NSString * path = [ NSString stringWithFormat : @ " % @ / % @ " , [ [ NSBundle mainBundle ] resourcePath ] , @ " begin _ record . caf " ] ; < nl > + / / NSURL * filePath = [ NSURL fileURLWithPath : path isDirectory : false ] ; < nl > + / / AudioServicesCreateSystemSoundID ( ( _ _ bridge CFURLRef ) filePath , & soundId ) ; < nl > + / / if ( soundId ! = 0 ) < nl > + / / AudioServicesAddSystemSoundCompletion ( soundId , NULL , kCFRunLoopCommonModes , & playSoundCompleted , NULL ) ; < nl > + / / } ) ; < nl > + / / < nl > + / / AudioServicesPlaySystemSound ( soundId ) ; < nl > } < nl > else < nl > {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > index 0428791 . . 706ac5f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj < nl > @ @ - 273 , 7 + 273 , 6 @ @ < nl > 	 	 BE2621571C4656D700A817AB / * AAConvActionSheet . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / ; } ; < nl > 	 	 BE2621591C4656EE00A817AB / * AAThumbnailView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / ; } ; < nl > 	 	 BEAC2B311C42D683007F7A2F / * libopus . a in Frameworks * / = { isa = PBXBuildFile ; fileRef = 15F89F001C211FDE00776ACD / * libopus . a * / ; } ; < nl > - 	 	 BEF11DB51C4657D20076400A / * AAASAssetManager . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / ; } ; < nl > 	 	 BEF11DB61C466D800076400A / * begin _ record . caf in Resources * / = { isa = PBXBuildFile ; fileRef = 153F6B3C1C2A9B1900C0B960 / * begin _ record . caf * / ; } ; < nl > 	 	 BEFE68D51C4657360001F2D6 / * AAThumbnailCollectionCell . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BEFE68D41C4657360001F2D6 / * AAThumbnailCollectionCell . swift * / ; } ; < nl > / * End PBXBuildFile section * / < nl > @ @ - 555 , 7 + 554 , 6 @ @ < nl > 	 	 BE237C9C1C422FFA00060648 / * AAStickersView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAStickersView . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAConvActionSheet . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAThumbnailView . swift ; sourceTree = " < group > " ; } ; < nl > - 	 	 BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAASAssetManager . swift ; sourceTree = " < group > " ; } ; < nl > 	 	 BEFE68D41C4657360001F2D6 / * AAThumbnailCollectionCell . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAThumbnailCollectionCell . swift ; sourceTree = " < group > " ; } ; < nl > / * End PBXFileReference section * / < nl > < nl > @ @ - 1320 , 7 + 1318 , 6 @ @ < nl > 	 	 BE26215A1C4656F100A817AB / * Manager * / = { < nl > 	 	 	 isa = PBXGroup ; < nl > 	 	 	 children = ( < nl > - 	 	 	 	 BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / , < nl > 	 	 	 ) ; < nl > 	 	 	 name = Manager ; < nl > 	 	 	 sourceTree = " < group > " ; < nl > @ @ - 1692 , 7 + 1689 , 6 @ @ < nl > 	 	 	 	 15D35F671C20187E00E3717A / * NSObject + TGLock . m in Sources * / , < nl > 	 	 	 	 15D35F5C1C20187E00E3717A / * AAAudioPlayer . m in Sources * / , < nl > 	 	 	 	 152AA8BF1C298C4B0030DEEE / * AASettingsLastSeenController . swift in Sources * / , < nl > - 	 	 	 	 BEF11DB51C4657D20076400A / * AAASAssetManager . swift in Sources * / , < nl > 	 	 	 	 066A51561BC4BEF5000E606E / * AALocalized . swift in Sources * / , < nl > 	 	 	 	 069CF4CF1BCB909A00C66E12 / * CLToken . m in Sources * / , < nl > 	 	 	 	 15D35F751C201B6B00E3717A / * AACustomPresentationController . swift in Sources * / , < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > index b6bf9c5 . . 006ea4f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift < nl > @ @ - 37 , 7 + 37 , 6 @ @ public extension ACCocoaMessenger { < nl > let path = CocoaFiles . pathFromDescriptor ( descriptor ) ; < nl > < nl > videoData . writeToFile ( path , atomically : true ) / / write to file < nl > - < nl > < nl > / / get video duration < nl > < nl > @ @ - 55 , 8 + 54 , 9 @ @ public extension ACCocoaMessenger { < nl > do { < nl > let imageRef = try imageGenerator . copyCGImageAtTime ( thumbnailTime , actualTime : nil ) < nl > let thumbnail = UIImage ( CGImage : imageRef ) < nl > - let thumbData = UIImageJPEGRepresentation ( thumbnail , 0 . 55 ) ; / / thumbnail binary data < nl > - let fastThumb = ACFastThumb ( int : jint ( thumbnail . size . width ) , withInt : jint ( thumbnail . size . height ) , withByteArray : thumbData ! . toJavaBytes ( ) ) < nl > + let thumb = thumbnail . resizeSquare ( 90 , maxH : 90 ) ; < nl > + let thumbData = UIImageJPEGRepresentation ( thumb , 0 . 55 ) ; / / thumbnail binary data < nl > + let fastThumb = ACFastThumb ( int : jint ( thumb . size . width ) , withInt : jint ( thumb . size . height ) , withByteArray : thumbData ! . toJavaBytes ( ) ) < nl > < nl > print ( " video upload imageRef = \ ( imageRef ) " ) < nl > print ( " video upload thumbnail = \ ( thumbnail ) " ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > index a70b6c6 . . 01a0edb 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > @ @ - 40 , 11 + 40 , 8 @ @ public class ActorSDK { < nl > / / / Server Endpoints < nl > public var endpoints = [ < nl > " tls : / / front1 - mtproto - api - rev2 . actor . im " , < nl > - " tls : / / front2 - mtproto - api - rev2 . actor . im " , < nl > + " tls : / / front2 - mtproto - api - rev2 . actor . im " < nl > < nl > - " tcp : / / front1 - mtproto - api - rev3 . actor . im : 443 " , < nl > - " tcp : / / front2 - mtproto - api - rev3 . actor . im : 443 " , < nl > - " tcp : / / front3 - mtproto - api - rev3 . actor . im : 443 " < nl > ] { < nl > didSet { < nl > trustedKeys = [ ] < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift < nl > deleted file mode 100644 < nl > index 1850eeb . . 0000000 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift < nl > + + + / dev / null < nl > @ @ - 1 , 250 + 0 , 0 @ @ < nl > - / / < nl > - / / AAASAssetManager . swift < nl > - / / ActorSDK < nl > - / / < nl > - / / Created by kioshimafx on 1 / 13 / 16 . < nl > - / / Copyright © 2016 Steve Kite . All rights reserved . < nl > - / / < nl > - < nl > - import UIKit < nl > - import AssetsLibrary < nl > - < nl > - let ASSET _ PHOTO _ THUMBNAIL : Int = 0 < nl > - let ASSET _ PHOTO _ ASPECT _ THUMBNAIL : Int = 1 < nl > - let ASSET _ PHOTO _ SCREEN _ SIZE : Int = 2 < nl > - let ASSET _ PHOTO _ FULL _ RESOLUTION : Int = 3 < nl > - < nl > - let kNotificationSendPhotos = " NotificationSendPhotos " < nl > - let kNotificationUpdateSelected = " NotificationUpdateSelected " < nl > - < nl > - class AAAssetPhoto { < nl > - < nl > - var asset : ALAsset ! < nl > - var index : Int ! < nl > - var isSelected : Bool ! < nl > - var groupIndex : String ! < nl > - < nl > - var group : Int ! < nl > - < nl > - init ( groupIn : Int , indexIn : Int , assetIn : ALAsset ) { < nl > - < nl > - self . group = groupIn < nl > - self . index = indexIn < nl > - self . asset = assetIn < nl > - self . isSelected = true < nl > - < nl > - self . groupIndex = " \ ( group ) - \ ( index ) " < nl > - < nl > - } < nl > - < nl > - } < nl > - < nl > - class AAASAssetManager : NSObject { < nl > - < nl > - / / # # # singleton # # # < nl > - static let sharedInstance = AAASAssetManager ( ) < nl > - < nl > - var maxSelected : Int ! < nl > - var currentGroupIndex : Int ! < nl > - < nl > - / / / < nl > - < nl > - var assetPhotos : Array < ALAsset > ! < nl > - var selectedPhotos : Array < AAAssetPhoto > ! < nl > - < nl > - / / / < nl > - < nl > - var assetsLibrary : ALAssetsLibrary ! < nl > - var assetGroups : Array < ALAssetsGroup > ! < nl > - var selectedAsset : ALAsset ! < nl > - < nl > - override init ( ) { < nl > - < nl > - self . selectedPhotos = Array < AAAssetPhoto > ( ) < nl > - self . assetsLibrary = ALAssetsLibrary ( ) < nl > - self . assetsLibrary . writeImageToSavedPhotosAlbum ( nil , metadata : nil ) { ( _ , _ ) - > Void in < nl > - / / < nl > - } < nl > - < nl > - } < nl > - < nl > - / / messages _ setActivity ( user _ id : Int , reqResponse : ( VKResponse ! ) - > ( ) < nl > - < nl > - func getSavedPhotoList ( result : ( Array < AnyObject > ! ) - > ( ) , error : ( String ) - > ( ) ) { < nl > - < nl > - < nl > - dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { ( ) - > Void in < nl > - / / < nl > - } < nl > - < nl > - < nl > - } < nl > - < nl > - < nl > - func getGroupCount ( ) - > Int { < nl > - return self . assetGroups . count < nl > - } < nl > - < nl > - func getPhotoCountOfCurrentGroup ( ) - > Int { < nl > - return self . assetPhotos . count < nl > - } < nl > - < nl > - func getSelectedPhotoCount ( ) - > Int { < nl > - < nl > - let selectedArray = self . selectedPhotos . filter ( { < nl > - $ 0 . isSelected = = true < nl > - } ) < nl > - < nl > - return selectedArray . count < nl > - } < nl > - < nl > - func clearData ( ) { < nl > - < nl > - self . selectedPhotos . removeAll ( ) < nl > - self . assetGroups . removeAll ( ) < nl > - self . assetPhotos . removeAll ( ) < nl > - < nl > - < nl > - self . selectedPhotos = nil < nl > - self . assetGroups = nil < nl > - self . assetPhotos = nil < nl > - < nl > - } < nl > - < nl > - / / / / < nl > - < nl > - < nl > - func getImageFromAsset ( asset : ALAsset , type : Int ) - > UIImage { < nl > - / * < nl > - NSString * strXMP = asset . defaultRepresentation . metadata [ @ " AdjustmentXMP " ] ; < nl > - if ( strXMP = = nil | | [ strXMP isKindOfClass : [ NSNull class ] ] ) < nl > - { < nl > - iRef = [ asset . defaultRepresentation fullResolutionImage ] ; < nl > - return [ UIImage imageWithCGImage : iRef scale : 1 . 0 orientation : ( UIImageOrientation ) asset . defaultRepresentation . orientation ] ; < nl > - } < nl > - else < nl > - { < nl > - NSData * dXMP = [ strXMP dataUsingEncoding : NSUTF8StringEncoding ] ; < nl > - < nl > - CIImage * image = [ CIImage imageWithCGImage : asset . defaultRepresentation . fullResolutionImage ] ; < nl > - < nl > - NSError * error = nil ; < nl > - NSArray * filterArray = [ CIFilter filterArrayFromSerializedXMP : dXMP < nl > - inputImageExtent : image . extent < nl > - error : & error ] ; < nl > - if ( error ) { < nl > - NSLog ( @ " Error during CIFilter creation : % @ " , [ error localizedDescription ] ) ; < nl > - } < nl > - < nl > - for ( CIFilter * filter in filterArray ) { < nl > - [ filter setValue : image forKey : kCIInputImageKey ] ; < nl > - image = [ filter outputImage ] ; < nl > - } < nl > - CIContext * context = [ CIContext contextWithOptions : nil ] ; < nl > - CGImageRef cgimage = [ context createCGImage : image fromRect : [ image extent ] ] ; < nl > - UIImage * iImage = [ UIImage imageWithCGImage : cgimage scale : 1 . 0 orientation : ( UIImageOrientation ) asset . defaultRepresentation . orientation ] ; < nl > - return iImage ; < nl > - * / < nl > - < nl > - var imageRef : CGImageRef ! < nl > - < nl > - if ( type = = ASSET _ PHOTO _ THUMBNAIL ) { < nl > - imageRef = asset . thumbnail ( ) as ! CGImageRef < nl > - } else if ( type = = ASSET _ PHOTO _ ASPECT _ THUMBNAIL ) { < nl > - imageRef = asset . aspectRatioThumbnail ( ) as ! CGImageRef < nl > - } else if ( type = = ASSET _ PHOTO _ SCREEN _ SIZE ) { < nl > - imageRef = asset . defaultRepresentation ( ) as ! CGImageRef < nl > - } else if ( type = = ASSET _ PHOTO _ FULL _ RESOLUTION ) { < nl > - imageRef = asset . defaultRepresentation ( ) as ! CGImageRef < nl > - / / let strXMP = asset . defaultRepresentation ( ) . metadata ( ) [ " AdjustmentXMP " ] < nl > - < nl > - < nl > - < nl > - < nl > - } < nl > - < nl > - return UIImage ( CGImage : imageRef ) < nl > - } < nl > - < nl > - func getImageAtIndex ( nIndex : Int , nType : Int ) - > UIImage { < nl > - return getImageFromAsset ( self . assetPhotos [ nIndex ] , type : nType ) < nl > - } < nl > - < nl > - func getImagePreviewAtIndex ( nIndex : Int , nType : Int ) - > UIImage { < nl > - let photoObj = self . selectedPhotos [ nIndex ] < nl > - return getImageFromAsset ( photoObj . asset , type : nType ) < nl > - } < nl > - < nl > - func getAssetAtIndex ( index : Int ) - > ALAsset { < nl > - return self . assetPhotos [ index ] < nl > - } < nl > - < nl > - func getGroupAtIndex ( index : Int ) - > ALAssetsGroup { < nl > - return self . assetGroups [ index ] < nl > - } < nl > - < nl > - func sendSelectedPhotos ( type : Int ) - > Array < UIImage > { < nl > - < nl > - var sendArray = Array < UIImage > ( ) < nl > - < nl > - for ( _ , photoObj ) in self . selectedPhotos . enumerate ( ) { < nl > - < nl > - let image = self . getImageFromAsset ( photoObj . asset , type : type ) < nl > - sendArray . append ( image ) < nl > - < nl > - } < nl > - < nl > - self . selectedPhotos . removeAll ( ) < nl > - < nl > - return sendArray < nl > - } < nl > - < nl > - func addObjectWithIndex ( index : Int ) { < nl > - < nl > - let model = AAAssetPhoto ( groupIn : self . currentGroupIndex , indexIn : index , assetIn : self . assetPhotos [ index ] ) < nl > - < nl > - self . selectedPhotos . append ( model ) < nl > - < nl > - / / [ [ NSNotificationCenter defaultCenter ] postNotificationName : kNotificationUpdateSelected object : nil ] ; < nl > - < nl > - } < nl > - < nl > - < nl > - func removeObjectWithIndex ( index : Int ) { < nl > - < nl > - let groupIndex = " \ ( self . currentGroupIndex ! ) - \ ( index ) " < nl > - < nl > - let results = self . selectedPhotos . filter ( { < nl > - $ 0 . groupIndex = = groupIndex < nl > - } ) < nl > - < nl > - if ( results . count > 0 ) { < nl > - < nl > - / / let model = results [ 0 ] < nl > - < nl > - < nl > - } < nl > - < nl > - < nl > - } < nl > - < nl > - < nl > - func currentGroupFirstIndex ( ) - > Int { < nl > - < nl > - let results = self . selectedPhotos . filter ( { < nl > - $ 0 . group = = self . currentGroupIndex < nl > - } ) < nl > - < nl > - if ( results . count > 0 ) { < nl > - < nl > - let model = results [ 0 ] < nl > - return model . index < nl > - < nl > - } < nl > - < nl > - return 0 < nl > - } < nl > - < nl > - < nl > - < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > index d235ec3 . . d0bc182 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift < nl > @ @ - 12 , 21 + 12 , 27 @ @ protocol AAActionSheetDelegate { < nl > func actionSheetDidFinished ( selectedObjs : Array < AnyObject > ) < nl > } < nl > < nl > + let screenWidth = UIScreen . mainScreen ( ) . bounds . size . width < nl > + let screenHeigth = UIScreen . mainScreen ( ) . bounds . size . height < nl > + < nl > class AAConvActionSheet : UIView { < nl > < nl > var delegate : AAActionSheetDelegate ? < nl > < nl > var sheetView : UIView ! < nl > - var btnAlbum : UIButton ! < nl > + < nl > var btnCamera : UIButton ! < nl > + var btnLibrary : UIButton ! < nl > + var btnDocuments : UIButton ! < nl > + var btnLocation : UIButton ! < nl > + var btnContact : UIButton ! < nl > var btnCancel : UIButton ! < nl > - var thumbnailView : AAThumbnailView ! < nl > + < nl > + var thumbnailView = AAThumbnailView ( ) < nl > < nl > weak var weakSuper : ConversationViewController ! < nl > < nl > < nl > - let screenWidth = UIScreen . mainScreen ( ) . bounds . size . width < nl > - let screenHeigth = UIScreen . mainScreen ( ) . bounds . size . height < nl > < nl > init ( maxSelected : Int , weakSuperIn : ConversationViewController ) { < nl > super . init ( frame : CGRectZero ) < nl > @ @ - 48 , 14 + 54 , 12 @ @ class AAConvActionSheet : UIView { < nl > < nl > self . alpha = 0 < nl > self . frame = CGRectMake ( 0 , 0 , screenWidth , screenHeigth ) < nl > - self . backgroundColor = UIColor . clearColor ( ) < nl > + self . backgroundColor = UIColor . blackColor ( ) . colorWithAlphaComponent ( 0 . 5 ) < nl > + < nl > < nl > - self . addSubview ( self . sheetView ) < nl > < nl > - / / self . sheetView . addSubview ( self . btnCancel ) < nl > - / / self . sheetView . addSubview ( self . btnAlbum ) < nl > - / / self . sheetView . addSubview ( self . btnCamera ) < nl > - / / self . sheetView . addSubview ( self . thumbnailView ) < nl > + / / make photo < nl > + < nl > < nl > self . configNotification ( ) < nl > < nl > @ @ - 63 , 17 + 67 , 13 @ @ class AAConvActionSheet : UIView { < nl > < nl > func configNotification ( ) { < nl > < nl > - NSNotificationCenter . defaultCenter ( ) . addObserver ( self , selector : " " , name : kNotificationSendPhotos , object : nil ) < nl > - NSNotificationCenter . defaultCenter ( ) . addObserver ( self , selector : " " , name : kNotificationUpdateSelected , object : nil ) < nl > < nl > } < nl > < nl > deinit { < nl > < nl > self . weakSuper = nil < nl > - < nl > - AAASAssetManager . sharedInstance . clearData ( ) < nl > - NSNotificationCenter . defaultCenter ( ) . removeObserver ( self ) < nl > + < nl > < nl > } < nl > < nl > @ @ - 81 , 19 + 81 , 22 @ @ class AAConvActionSheet : UIView { < nl > func showAnimation ( ) { < nl > < nl > / / self . btnCamera . selected = true < nl > - / / self . thumbnailView . reloadView ( ) < nl > / / self . btnCamera . setTitle ( " Camera " , forState : UIControlState . Normal ) < nl > < nl > var frame = self . sheetView . frame < nl > - frame . origin . y = screenHeigth - 350 < nl > + frame . origin . y = screenHeigth - 400 < nl > < nl > UIView . animateWithDuration ( 0 . 25 ) { ( ) - > Void in < nl > self . sheetView . frame = frame < nl > self . alpha = 1 < nl > < nl > + self . thumbnailView . open ( ) < nl > + self . thumbnailView . reloadView ( ) < nl > + < nl > } < nl > < nl > < nl > + < nl > } < nl > < nl > func cancelAnimation ( ) { < nl > @ @ - 101 , 10 + 104 , 10 @ @ class AAConvActionSheet : UIView { < nl > var frame = self . sheetView . frame < nl > frame . origin . y = screenHeigth < nl > < nl > - UIView . animateWithDuration ( 0 . 25 ) { ( ) - > Void in < nl > + UIView . animateWithDuration ( 0 . 25 , animations : { ( ) - > Void in < nl > self . sheetView . frame = frame < nl > self . alpha = 0 < nl > - < nl > + } ) { ( bool ) - > Void in < nl > } < nl > < nl > } < nl > @ @ - 117 , 21 + 120 , 128 @ @ class AAConvActionSheet : UIView { < nl > < nl > < nl > / / sheet view < nl > - let frame = CGRectMake ( 0 , screenHeigth , screenWidth , 350 ) < nl > + let frame = CGRectMake ( 0 , screenHeigth , screenWidth , 400 ) < nl > self . sheetView = UIView ( frame : frame ) < nl > - self . sheetView . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 231 . 0 / 255 . 0 , blue : 234 . 0 / 255 . 0 , alpha : 1 ) < nl > - < nl > - < nl > - / / button cancel < nl > - < nl > - self . btnCancel = UIButton ( type : UIButtonType . Custom ) < nl > - < nl > - / / thumbnail view < nl > - < nl > - < nl > + self . sheetView . backgroundColor = UIColor . whiteColor ( ) < nl > < nl > + self . addSubview ( self . sheetView ) < nl > < nl > + self . btnCamera = UIButton ( type : UIButtonType . System ) < nl > + self . btnLibrary = UIButton ( type : UIButtonType . System ) < nl > + self . btnDocuments = UIButton ( type : UIButtonType . System ) < nl > + self . btnLocation = UIButton ( type : UIButtonType . System ) < nl > + self . btnContact = UIButton ( type : UIButtonType . System ) < nl > + self . btnCancel = UIButton ( type : UIButtonType . System ) < nl > + < nl > + / / color < nl > + < nl > + self . btnCamera . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) < nl > + self . btnLibrary . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) < nl > + self . btnDocuments . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) < nl > + self . btnLocation . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) < nl > + self . btnContact . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) < nl > + self . btnCancel . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) < nl > + < nl > + / / font size < nl > + < nl > + self . btnCamera . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) < nl > + self . btnLibrary . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) < nl > + self . btnDocuments . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) < nl > + self . btnLocation . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) < nl > + self . btnContact . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) < nl > + self . btnCancel . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) < nl > + < nl > + / / add buttons as subivews < nl > + < nl > + self . sheetView . addSubview ( self . btnCamera ) < nl > + self . sheetView . addSubview ( self . btnLibrary ) < nl > + self . sheetView . addSubview ( self . btnDocuments ) < nl > + self . sheetView . addSubview ( self . btnLocation ) < nl > + self . sheetView . addSubview ( self . btnContact ) < nl > + self . sheetView . addSubview ( self . btnCancel ) < nl > + self . sheetView . addSubview ( self . thumbnailView ) < nl > + < nl > + self . thumbnailView . frame = CGRectMake ( 0 , 5 , screenWidth , 100 ) < nl > + self . btnCamera . frame = CGRectMake ( 0 , 100 , screenWidth , 50 ) < nl > + self . btnLibrary . frame = CGRectMake ( 0 , 150 , screenWidth , 50 ) < nl > + self . btnDocuments . frame = CGRectMake ( 0 , 200 , screenWidth , 50 ) < nl > + self . btnLocation . frame = CGRectMake ( 0 , 250 , screenWidth , 50 ) < nl > + self . btnContact . frame = CGRectMake ( 0 , 300 , screenWidth , 50 ) < nl > + self . btnCancel . frame = CGRectMake ( 0 , 350 , screenWidth , 50 ) < nl > + < nl > + / / separators < nl > + < nl > + let spearator1 = UIView ( frame : CGRectMake ( 0 , 99 , screenWidth , 1 ) ) < nl > + spearator1 . backgroundColor = UIColor ( red : 223 . 9 / 255 . 0 , green : 223 . 9 / 255 . 0 , blue : 223 . 9 / 255 . 0 , alpha : 0 . 6 ) < nl > + let spearator2 = UIView ( frame : CGRectMake ( 10 , 149 , screenWidth - 20 , 1 ) ) < nl > + spearator2 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > + let spearator3 = UIView ( frame : CGRectMake ( 10 , 199 , screenWidth - 20 , 1 ) ) < nl > + spearator3 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > + let spearator4 = UIView ( frame : CGRectMake ( 10 , 249 , screenWidth - 20 , 1 ) ) < nl > + spearator4 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > + let spearator5 = UIView ( frame : CGRectMake ( 10 , 299 , screenWidth - 20 , 1 ) ) < nl > + spearator5 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > + let spearator6 = UIView ( frame : CGRectMake ( 10 , 349 , screenWidth - 20 , 1 ) ) < nl > + spearator6 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) < nl > + < nl > + / / add separatos as subview < nl > + < nl > + self . sheetView . addSubview ( spearator1 ) < nl > + self . sheetView . addSubview ( spearator2 ) < nl > + self . sheetView . addSubview ( spearator3 ) < nl > + self . sheetView . addSubview ( spearator4 ) < nl > + self . sheetView . addSubview ( spearator5 ) < nl > + self . sheetView . addSubview ( spearator6 ) < nl > + < nl > + / / set title for buttons < nl > + < nl > + self . btnCamera . setTitle ( AALocalized ( " PhotoCamera " ) , forState : UIControlState . Normal ) < nl > + self . btnLibrary . setTitle ( AALocalized ( " PhotoLibrary " ) , forState : UIControlState . Normal ) < nl > + self . btnDocuments . setTitle ( AALocalized ( " SendDocument " ) , forState : UIControlState . Normal ) < nl > + self . btnLocation . setTitle ( AALocalized ( " ShareLocation " ) , forState : UIControlState . Normal ) < nl > + self . btnContact . setTitle ( AALocalized ( " ShareContact " ) , forState : UIControlState . Normal ) < nl > + self . btnCancel . setTitle ( AALocalized ( " AlertCancel " ) , forState : UIControlState . Normal ) < nl > + < nl > + / / add actins < nl > + < nl > + self . btnCamera . addTarget ( self , action : " btnCameraAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + self . btnLibrary . addTarget ( self , action : " btnLibraryAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + self . btnDocuments . addTarget ( self , action : " btnDocumentAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + self . btnLocation . addTarget ( self , action : " btnLocationAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + self . btnContact . addTarget ( self , action : " btnContactAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + self . btnCancel . addTarget ( self , action : " btnCloseAction " , forControlEvents : UIControlEvents . TouchUpInside ) < nl > + < nl > + } < nl > + < nl > + / / MARK : - Button ' s actions < nl > + < nl > + func btnCameraAction ( ) { < nl > + cancelAnimation ( ) < nl > + self . weakSuper . pickImage ( . Camera ) < nl > } < nl > < nl > + func btnLibraryAction ( ) { < nl > + cancelAnimation ( ) < nl > + self . weakSuper . pickImage ( . PhotoLibrary ) < nl > + } < nl > + < nl > + func btnDocumentAction ( ) { < nl > + cancelAnimation ( ) < nl > + self . weakSuper . pickDocument ( ) < nl > + } < nl > + < nl > + func btnLocationAction ( ) { < nl > + cancelAnimation ( ) < nl > + self . weakSuper . pickLocation ( ) < nl > + } < nl > + < nl > + func btnContactAction ( ) { < nl > + cancelAnimation ( ) < nl > + self . weakSuper . pickContact ( ) < nl > + } < nl > + < nl > + func btnCloseAction ( ) { < nl > + cancelAnimation ( ) < nl > + } < nl > < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift < nl > index 41da72f . . d53eb8e 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift < nl > @ @ - 47 , 12 + 47 , 16 @ @ class AAThumbnailCollectionCell : UICollectionViewCell { < nl > override func layoutSubviews ( ) { < nl > super . layoutSubviews ( ) < nl > < nl > + self . imgThumbnails . frame = CGRectMake ( 0 , 0 , self . contentView . frame . size . width , self . contentView . frame . size . height ) < nl > + self . imgSelected . frame = CGRectMake ( 0 , 0 , self . contentView . frame . size . width , self . contentView . frame . size . height ) < nl > + < nl > < nl > } < nl > < nl > override func prepareForReuse ( ) { < nl > super . prepareForReuse ( ) < nl > < nl > + self . imgSelected . image = nil < nl > < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift < nl > index 8267e7a . . bb33b2e 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift < nl > @ @ - 7 , 16 + 7 , 40 @ @ < nl > / / < nl > < nl > import UIKit < nl > + import Photos < nl > + < nl > + public enum ImagePickerMediaType { < nl > + case Image < nl > + case Video < nl > + case ImageAndVideo < nl > + } < nl > < nl > class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSource { < nl > < nl > var collectionView : UICollectionView ! < nl > + let mediaType : ImagePickerMediaType = ImagePickerMediaType . Image < nl > + < nl > + private var assets = [ PHAsset ] ( ) < nl > + private let imageManager = PHCachingImageManager ( ) < nl > + < nl > + private let minimumPreviewHeight : CGFloat = 70 < nl > + private var maximumPreviewHeight : CGFloat = 70 < nl > + < nl > + private lazy var requestOptions : PHImageRequestOptions = { < nl > + let options = PHImageRequestOptions ( ) < nl > + options . deliveryMode = . HighQualityFormat < nl > + options . resizeMode = . Fast < nl > + < nl > + return options < nl > + } ( ) < nl > + < nl > + private let previewCollectionViewInset : CGFloat = 5 < nl > < nl > < nl > override init ( frame : CGRect ) { < nl > super . init ( frame : frame ) < nl > < nl > - self . configUI ( ) < nl > + self . collectionViewSetup ( ) < nl > < nl > } < nl > < nl > @ @ - 26 , 23 + 50 , 123 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > < nl > / / / < nl > < nl > - func configUI ( ) { < nl > - self . collectionViewSetup ( ) < nl > - self . addSubview ( self . collectionView ) < nl > + func open ( ) { < nl > + < nl > + if PHPhotoLibrary . authorizationStatus ( ) = = . Authorized { < nl > + fetchAssets ( ) < nl > + self . collectionView . reloadData ( ) < nl > + } else if PHPhotoLibrary . authorizationStatus ( ) = = . NotDetermined { < nl > + PHPhotoLibrary . requestAuthorization ( ) { status in < nl > + if status = = . Authorized { < nl > + dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { < nl > + self . fetchAssets ( ) < nl > + self . collectionView . reloadData ( ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > + < nl > + } < nl > + < nl > + private func fetchAssets ( ) { < nl > + let options = PHFetchOptions ( ) < nl > + options . sortDescriptors = [ NSSortDescriptor ( key : " creationDate " , ascending : false ) ] < nl > + < nl > + / / switch mediaType { < nl > + / / case . Image : < nl > + / / options . predicate = NSPredicate ( format : " mediaType = % d " , PHAssetMediaType . Image . rawValue ) < nl > + / / case . Video : < nl > + / / options . predicate = NSPredicate ( format : " mediaType = % d " , PHAssetMediaType . Video . rawValue ) < nl > + / / case . ImageAndVideo : < nl > + / / options . predicate = NSPredicate ( format : " mediaType = % d OR mediaType = % d " , PHAssetMediaType . Image . rawValue , PHAssetMediaType . Video . rawValue ) < nl > + / / } < nl > + < nl > + options . predicate = NSPredicate ( format : " mediaType = % d " , PHAssetMediaType . Image . rawValue ) < nl > + < nl > + let fetchLimit = 50 < nl > + if # available ( iOS 9 , * ) { < nl > + options . fetchLimit = fetchLimit < nl > + } < nl > + < nl > + let result = PHAsset . fetchAssetsWithOptions ( options ) < nl > + let requestOptions = PHImageRequestOptions ( ) < nl > + requestOptions . synchronous = true < nl > + requestOptions . deliveryMode = . FastFormat < nl > + < nl > + result . enumerateObjectsUsingBlock { asset , _ , stop in < nl > + defer { < nl > + if self . assets . count > fetchLimit { < nl > + stop . initialize ( true ) < nl > + } < nl > + } < nl > + < nl > + if let asset = asset as ? PHAsset { < nl > + self . imageManager . requestImageDataForAsset ( asset , options : requestOptions ) { data , _ , _ , info in < nl > + if data ! = nil { < nl > + self . assets . append ( asset ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } < nl > + < nl > + private func prefetchImagesForAsset ( asset : PHAsset ) { < nl > + let targetSize = sizeForAsset ( asset , scale : UIScreen . mainScreen ( ) . scale ) < nl > + imageManager . startCachingImagesForAssets ( [ asset ] , targetSize : targetSize , contentMode : . AspectFill , options : requestOptions ) < nl > + } < nl > + < nl > + private func requestImageForAsset ( asset : PHAsset , completion : ( image : UIImage ? ) - > ( ) ) { < nl > + let targetSize = sizeForAsset ( asset , scale : UIScreen . mainScreen ( ) . scale ) < nl > + requestOptions . synchronous = true < nl > + < nl > + / / Workaround because PHImageManager . requestImageForAsset doesn ' t work for burst images < nl > + if asset . representsBurst { < nl > + imageManager . requestImageDataForAsset ( asset , options : requestOptions ) { data , _ , _ , _ in < nl > + let image = data . flatMap { UIImage ( data : $ 0 ) } < nl > + completion ( image : image ) < nl > + } < nl > + } < nl > + else { < nl > + imageManager . requestImageForAsset ( asset , targetSize : targetSize , contentMode : . AspectFill , options : requestOptions ) { image , _ in < nl > + completion ( image : image ) < nl > + } < nl > + } < nl > + } < nl > + < nl > + private func sizeForAsset ( asset : PHAsset , scale : CGFloat = 1 ) - > CGSize { < nl > + let proportion = CGFloat ( asset . pixelWidth ) / CGFloat ( asset . pixelHeight ) < nl > + < nl > + let imageHeight = maximumPreviewHeight - 2 * previewCollectionViewInset < nl > + let imageWidth = floor ( proportion * imageHeight ) < nl > + < nl > + return CGSize ( width : imageWidth * scale , height : imageHeight * scale ) < nl > } < nl > < nl > / / / collection view delegate < nl > < nl > func numberOfSectionsInCollectionView ( collectionView : UICollectionView ) - > Int { < nl > - return 0 < nl > + return 1 < nl > } < nl > < nl > func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) - > Int { < nl > - return 0 < nl > + print ( " ASSSEEETS = = = \ ( self . assets . count ) " ) < nl > + return self . assets . count < nl > } < nl > < nl > func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) - > UICollectionViewCell { < nl > - return UICollectionViewCell ( ) < nl > + < nl > + let cell = self . collectionView . dequeueReusableCellWithReuseIdentifier ( " AAThumbnailCollectionCell " , forIndexPath : indexPath ) as ! AAThumbnailCollectionCell < nl > + < nl > + cell . backgroundColor = UIColor . whiteColor ( ) < nl > + < nl > + let asset = assets [ indexPath . row ] < nl > + < nl > + requestImageForAsset ( asset ) { image in < nl > + cell . imgSelected . image = image < nl > + } < nl > + < nl > + < nl > + return cell < nl > } < nl > < nl > / / / < nl > @ @ - 52 , 43 + 176 , 41 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou < nl > } < nl > < nl > func collectionViewSetup ( ) { < nl > - < nl > - if ( self . collectionView = = nil ) { < nl > - < nl > - let flowLayout = UICollectionViewFlowLayout ( ) < nl > - flowLayout . scrollDirection = . Horizontal < nl > - flowLayout . minimumLineSpacing = 4 < nl > - flowLayout . sectionInset = UIEdgeInsetsMake ( 5 . 0 , 4 . 0 , 5 . 0 , 4 . 0 ) < nl > - < nl > - flowLayout . itemSize = CGSizeMake ( 105 , 180 ) < nl > - < nl > - self . collectionView = UICollectionView ( frame : self . bounds , collectionViewLayout : flowLayout ) < nl > - self . collectionView . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 231 . 0 / 255 . 0 , blue : 234 . 0 / 255 . 0 , alpha : 1 . 0 ) < nl > - self . collectionView . showsHorizontalScrollIndicator = false < nl > - self . collectionView . delegate = self < nl > - self . collectionView . dataSource = self < nl > - < nl > - self . collectionView . registerClass ( AAThumbnailCollectionCell . self , forCellWithReuseIdentifier : " AAThumbnailCollectionCell " ) < nl > - < nl > - / / AAASAssetManager . sharedInstance < nl > - < nl > - / * < nl > - < nl > - [ [ UUAssetManager sharedInstance ] getGroupList : ^ ( NSArray * obj ) { < nl > - < nl > - [ [ UUAssetManager sharedInstance ] getPhotoListOfGroupByIndex : [ UUAssetManager sharedInstance ] . currentGroupIndex result : ^ ( NSArray * obj ) { < nl > - < nl > - [ _ collectionView reloadData ] ; < nl > - < nl > - } ] ; < nl > - } ] ; < nl > < nl > - * / < nl > - < nl > - < nl > - < nl > - } < nl > + let flowLayout = UICollectionViewFlowLayout ( ) < nl > + flowLayout . scrollDirection = . Horizontal < nl > + flowLayout . minimumLineSpacing = 4 < nl > + flowLayout . sectionInset = UIEdgeInsetsMake ( 5 . 0 , 4 . 0 , 5 . 0 , 4 . 0 ) < nl > + < nl > + flowLayout . itemSize = CGSizeMake ( 90 , 90 ) < nl > + < nl > + self . collectionView = UICollectionView ( frame : self . bounds , collectionViewLayout : flowLayout ) < nl > + self . collectionView . backgroundColor = UIColor . clearColor ( ) < nl > + self . collectionView . showsHorizontalScrollIndicator = false < nl > + self . collectionView . delegate = self < nl > + self . collectionView . dataSource = self < nl > + self . collectionView . frame = CGRectMake ( 0 , 0 , screenWidth , 80 ) < nl > + < nl > + self . collectionView . registerClass ( AAThumbnailCollectionCell . self , forCellWithReuseIdentifier : " AAThumbnailCollectionCell " ) < nl > + < nl > + self . addSubview ( self . collectionView ) < nl > < nl > } < nl > < nl > + func imageByCroppingImage ( image : UIImage , toSize : CGSize ) - > UIImage { < nl > + < nl > + let refWidth = CGImageGetWidth ( image . CGImage ) < nl > + let refHeight = CGImageGetHeight ( image . CGImage ) < nl > + < nl > + let x = CGFloat ( ( refWidth - Int ( toSize . width ) ) / 2 ) < nl > + let y = CGFloat ( ( refHeight - Int ( toSize . height ) ) / 2 ) < nl > + < nl > + let cropRect = CGRectMake ( x , y , toSize . height , toSize . width ) < nl > + let imageRef = CGImageCreateWithImageInRect ( image . CGImage , cropRect ) ! as CGImageRef < nl > + < nl > + let cropped = UIImage ( CGImage : imageRef , scale : 0 . 0 , orientation : UIImageOrientation . Up ) < nl > + < nl > + return cropped ; < nl > + } < nl > + < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > index 119c94c . . e34b500 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > @ @ - 88 , 11 + 88 , 6 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > self . rightButton . enabled = true < nl > self . rightButton . layoutIfNeeded ( ) < nl > < nl > - / / self . rightButton . setTitle ( AALocalized ( " ChatSend " ) , forState : UIControlState . Normal ) < nl > - / / self . rightButton . setTitleColor ( appStyle . chatSendColor , forState : UIControlState . Normal ) < nl > - / / self . rightButton . setTitleColor ( appStyle . chatSendDisabledColor , forState : UIControlState . Disabled ) < nl > - / / self . rightButton . setImage ( nil , forState : UIControlState . Normal ) < nl > - < nl > / / < nl > < nl > self . audioButton = UIButton ( type : UIButtonType . Custom ) < nl > @ @ - 496 , 7 + 491 , 7 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > < nl > showActionSheet ( builder . items , cancelButton : " AlertCancel " , destructButton : nil , sourceView : self . leftButton , sourceRect : self . leftButton . bounds , tapClosure : builder . tapClosure ) < nl > < nl > - / / self . actionSheet . showAnimation ( ) < nl > + / / self . actionSheet . showAnimation ( ) < nl > < nl > self . rightButton . layoutIfNeeded ( ) < nl > } < nl > @ @ - 615 , 7 + 610 , 9 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > func pickImage ( source : UIImagePickerControllerSourceType ) { < nl > let pickerController = AAImagePickerController ( ) < nl > pickerController . sourceType = source < nl > - pickerController . mediaTypes = [ kUTTypeImage as String , kUTTypeMovie as String ] < nl > + pickerController . mediaTypes = [ kUTTypeImage as String ] < nl > + < nl > + / / [ kUTTypeImage as String , kUTTypeMovie as String ] < nl > < nl > / / / / Style controller bg < nl > / / pickerController . view . backgroundColor = appStyle . vcBgColor

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / AppIcon . appiconset / Contents . json b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / AppIcon . appiconset / Contents . json 
 index 1539cc7 . . 8d9a22f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / AppIcon . appiconset / Contents . json 
 + + + b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / AppIcon . appiconset / Contents . json 
 @ @ - 73 , 8 + 73 , 9 @ @ 
 " scale " : " 2x " 
 } , 
 { 
 - " idiom " : " ipad " , 
 " size " : " 83 . 5x83 . 5 " , 
 + " idiom " : " ipad " , 
 + " filename " : " iconios9 . png " , 
 " scale " : " 2x " 
 } 
 ] , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / AppIcon . appiconset / iconios9 . png b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / AppIcon . appiconset / iconios9 . png 
 new file mode 100644 
 index 0000000 . . a1ba51b 
 Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / AppIcon . appiconset / iconios9 . png differ 
 diff - - git a / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / LaunchImage . launchimage / Contents . json b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / LaunchImage . launchimage / Contents . json 
 index bf38d0c . . 9674ef2 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / LaunchImage . launchimage / Contents . json 
 + + + b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / LaunchImage . launchimage / Contents . json 
 @ @ - 35 , 6 + 35 , 7 @ @ 
 { 
 " orientation " : " portrait " , 
 " idiom " : " iphone " , 
 + " filename " : " sssss . png " , 
 " extent " : " full - screen " , 
 " scale " : " 1x " 
 } , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / LaunchImage . launchimage / sssss . png b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / LaunchImage . launchimage / sssss . png 
 new file mode 100644 
 index 0000000 . . 93136d3 
 Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorApp / Resources / Images . xcassets / LaunchImage . launchimage / sssss . png differ 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index 57b3c32 . . 3b94877 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 74 , 7 + 74 , 7 @ @ 
 	 	 066A52001BC4E0B0000E606E / * libsqlite3 . tbd in Frameworks * / = { isa = PBXBuildFile ; fileRef = 066A51FF1BC4E0B0000E606E / * libsqlite3 . tbd * / ; } ; 
 	 	 066A52081BC4E962000E606E / * Makefile in Sources * / = { isa = PBXBuildFile ; fileRef = 066A52051BC4E962000E606E / * Makefile * / ; } ; 
 	 	 066A52151BC4EE04000E606E / * AAAvatarView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A52141BC4EE04000E606E / * AAAvatarView . swift * / ; } ; 
 - 	 	 066A52221BC4EEAC000E606E / * AAManagedTable . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A52191BC4EEAC000E606E / * AAManagedTable . swift * / ; } ; 
 + 	 	 066A52221BC4EEAC000E606E / * AAManagedTable . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A52191BC4EEAC000E606E / * AAManagedTable . swift * / ; settings = { COMPILER _ FLAGS = " - w " ; } ; } ; 
 	 	 066A52231BC4EEAC000E606E / * AAManagedSection . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A521A1BC4EEAC000E606E / * AAManagedSection . swift * / ; } ; 
 	 	 066A52241BC4EEAC000E606E / * AAManagedRange . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A521B1BC4EEAC000E606E / * AAManagedRange . swift * / ; } ; 
 	 	 066A52251BC4EEAC000E606E / * ManagedBindedCells . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 066A521C1BC4EEAC000E606E / * ManagedBindedCells . swift * / ; } ; 
 @ @ - 226 , 7 + 226 , 7 @ @ 
 	 	 15D35F511C20187E00E3717A / * ASQueue . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F361C20187E00E3717A / * ASQueue . h * / ; } ; 
 	 	 15D35F521C20187E00E3717A / * ASQueue . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F371C20187E00E3717A / * ASQueue . m * / ; } ; 
 	 	 15D35F531C20187E00E3717A / * AAOpusAudioRecorder . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F381C20187E00E3717A / * AAOpusAudioRecorder . h * / ; } ; 
 - 	 	 15D35F541C20187E00E3717A / * AAOpusAudioRecorder . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F391C20187E00E3717A / * AAOpusAudioRecorder . m * / ; } ; 
 + 	 	 15D35F541C20187E00E3717A / * AAOpusAudioRecorder . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F391C20187E00E3717A / * AAOpusAudioRecorder . m * / ; settings = { COMPILER _ FLAGS = " - w " ; } ; } ; 
 	 	 15D35F551C20187E00E3717A / * AAAlertView . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F3A1C20187E00E3717A / * AAAlertView . h * / ; } ; 
 	 	 15D35F561C20187E00E3717A / * AAAlertView . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F3B1C20187E00E3717A / * AAAlertView . m * / ; } ; 
 	 	 15D35F571C20187E00E3717A / * AAAudioRecorder . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F3C1C20187E00E3717A / * AAAudioRecorder . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; 
 @ @ - 237 , 7 + 237 , 7 @ @ 
 	 	 15D35F5D1C20187E00E3717A / * AANativeAudioPlayer . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F421C20187E00E3717A / * AANativeAudioPlayer . h * / ; } ; 
 	 	 15D35F5E1C20187E00E3717A / * AANativeAudioPlayer . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F431C20187E00E3717A / * AANativeAudioPlayer . m * / ; } ; 
 	 	 15D35F5F1C20187E00E3717A / * AAOpusAudioPlayerAU . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F441C20187E00E3717A / * AAOpusAudioPlayerAU . h * / ; } ; 
 - 	 	 15D35F601C20187E00E3717A / * AAOpusAudioPlayerAU . mm in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F451C20187E00E3717A / * AAOpusAudioPlayerAU . mm * / ; } ; 
 + 	 	 15D35F601C20187E00E3717A / * AAOpusAudioPlayerAU . mm in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F451C20187E00E3717A / * AAOpusAudioPlayerAU . mm * / ; settings = { COMPILER _ FLAGS = " - w " ; } ; } ; 
 	 	 15D35F611C20187E00E3717A / * AAAudioBuffer . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F461C20187E00E3717A / * AAAudioBuffer . h * / ; } ; 
 	 	 15D35F621C20187E00E3717A / * AAModernConversationAudioPlayer . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15D35F471C20187E00E3717A / * AAModernConversationAudioPlayer . h * / ; settings = { ATTRIBUTES = ( Public , ) ; } ; } ; 
 	 	 15D35F631C20187E00E3717A / * AAModernConversationAudioPlayer . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F481C20187E00E3717A / * AAModernConversationAudioPlayer . m * / ; } ; 
 @ @ - 252 , 7 + 252 , 7 @ @ 
 	 	 15D35F6F1C20196E00E3717A / * AARecordAudioController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F6E1C20196E00E3717A / * AARecordAudioController . swift * / ; } ; 
 	 	 15D35F751C201B6B00E3717A / * AACustomPresentationController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F731C201B6B00E3717A / * AACustomPresentationController . swift * / ; } ; 
 	 	 15D35F761C201B6B00E3717A / * AACustomPresentationAnimationController . swift in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F741C201B6B00E3717A / * AACustomPresentationAnimationController . swift * / ; } ; 
 - 	 	 15D35F781C20273D00E3717A / * AAAudioRecorder . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F3D1C20187E00E3717A / * AAAudioRecorder . m * / ; } ; 
 + 	 	 15D35F781C20273D00E3717A / * AAAudioRecorder . m in Sources * / = { isa = PBXBuildFile ; fileRef = 15D35F3D1C20187E00E3717A / * AAAudioRecorder . m * / ; settings = { COMPILER _ FLAGS = " - w " ; } ; } ; 
 	 	 15F89F071C211FED00776ACD / * opus _ defines . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F031C211FED00776ACD / * opus _ defines . h * / ; } ; 
 	 	 15F89F081C211FED00776ACD / * opus _ multistream . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F041C211FED00776ACD / * opus _ multistream . h * / ; } ; 
 	 	 15F89F091C211FED00776ACD / * opus _ types . h in Headers * / = { isa = PBXBuildFile ; fileRef = 15F89F051C211FED00776ACD / * opus _ types . h * / ; } ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / Contents . json b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / Contents . json 
 new file mode 100644 
 index 0000000 . . da4a164 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / Contents . json 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + { 
 + " info " : { 
 + " version " : 1 , 
 + " author " : " xcode " 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOff . imageset / Contents . json b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOff . imageset / Contents . json 
 new file mode 100644 
 index 0000000 . . a0c9ebf 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOff . imageset / Contents . json 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + { 
 + " images " : [ 
 + { 
 + " idiom " : " universal " , 
 + " scale " : " 1x " 
 + } , 
 + { 
 + " idiom " : " universal " , 
 + " filename " : " ImageSelectedOff @ 2x . png " , 
 + " scale " : " 2x " 
 + } , 
 + { 
 + " idiom " : " universal " , 
 + " scale " : " 3x " 
 + } 
 + ] , 
 + " info " : { 
 + " version " : 1 , 
 + " author " : " xcode " 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOff . imageset / ImageSelectedOff @ 2x . png b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOff . imageset / ImageSelectedOff @ 2x . png 
 new file mode 100644 
 index 0000000 . . 207e56c 
 Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOff . imageset / ImageSelectedOff @ 2x . png differ 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOn . imageset / Contents . json b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOn . imageset / Contents . json 
 new file mode 100644 
 index 0000000 . . a454e48 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOn . imageset / Contents . json 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + { 
 + " images " : [ 
 + { 
 + " idiom " : " universal " , 
 + " scale " : " 1x " 
 + } , 
 + { 
 + " idiom " : " universal " , 
 + " filename " : " ImageSelectedOn @ 2x . png " , 
 + " scale " : " 2x " 
 + } , 
 + { 
 + " idiom " : " universal " , 
 + " scale " : " 3x " 
 + } 
 + ] , 
 + " info " : { 
 + " version " : 1 , 
 + " author " : " xcode " 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOn . imageset / ImageSelectedOn @ 2x . png b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOn . imageset / ImageSelectedOn @ 2x . png 
 new file mode 100644 
 index 0000000 . . 0677197 
 Binary files / dev / null and b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Images . xcassets / attachmentmenu / ImageSelectedOn . imageset / ImageSelectedOn @ 2x . png differ 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 index d0bc182 . . 6369105 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 @ @ - 7 , 6 + 7 , 7 @ @ 
 / / 
 
 import UIKit 
 + import Photos 
 
 protocol AAActionSheetDelegate { 
 func actionSheetDidFinished ( selectedObjs : Array < AnyObject > ) 
 @ @ - 32 , 8 + 33 , 6 @ @ class AAConvActionSheet : UIView { 
 
 weak var weakSuper : ConversationViewController ! 
 
 - 
 - 
 init ( maxSelected : Int , weakSuperIn : ConversationViewController ) { 
 super . init ( frame : CGRectZero ) 
 
 @ @ - 54 , 21 + 53 , 14 @ @ class AAConvActionSheet : UIView { 
 
 self . alpha = 0 
 self . frame = CGRectMake ( 0 , 0 , screenWidth , screenHeigth ) 
 - self . backgroundColor = UIColor . blackColor ( ) . colorWithAlphaComponent ( 0 . 5 ) 
 + self . backgroundColor = UIColor . blackColor ( ) . colorWithAlphaComponent ( 0 . 7 ) 
 
 
 
 / / make photo 
 
 - 
 - self . configNotification ( ) 
 - 
 } 
 
 - func configNotification ( ) { 
 - 
 - 
 - } 
 
 deinit { 
 
 @ @ - 80 , 12 + 72 , 11 @ @ class AAConvActionSheet : UIView { 
 
 func showAnimation ( ) { 
 
 - / / self . btnCamera . selected = true 
 - / / self . btnCamera . setTitle ( " Camera " , forState : UIControlState . Normal ) 
 - 
 var frame = self . sheetView . frame 
 frame . origin . y = screenHeigth - 400 
 
 + self . weakSuper . navigationController ! . interactivePopGestureRecognizer ! . enabled = false 
 + 
 UIView . animateWithDuration ( 0 . 25 ) { ( ) - > Void in 
 self . sheetView . frame = frame 
 self . alpha = 1 
 @ @ - 95 , 19 + 86 , 26 @ @ class AAConvActionSheet : UIView { 
 
 } 
 
 - 
 - 
 } 
 
 func cancelAnimation ( ) { 
 
 + 
 var frame = self . sheetView . frame 
 frame . origin . y = screenHeigth 
 
 + 
 UIView . animateWithDuration ( 0 . 25 , animations : { ( ) - > Void in 
 self . sheetView . frame = frame 
 self . alpha = 0 
 } ) { ( bool ) - > Void in 
 + 
 + self . weakSuper . navigationController ! . interactivePopGestureRecognizer ! . enabled = true 
 + 
 + self . thumbnailView . selectedAssets = [ PHAsset ] ( ) 
 + self . thumbnailView . reloadView ( ) 
 + self . thumbnailView . collectionView . scrollToItemAtIndexPath ( NSIndexPath ( forRow : 0 , inSection : 0 ) , atScrollPosition : UICollectionViewScrollPosition . None , animated : false ) 
 + self . updateSelectedPhotos ( ) 
 } 
 
 } 
 @ @ - 161 , 7 + 159 , 7 @ @ class AAConvActionSheet : UIView { 
 self . sheetView . addSubview ( self . btnCancel ) 
 self . sheetView . addSubview ( self . thumbnailView ) 
 
 - self . thumbnailView . frame = CGRectMake ( 0 , 5 , screenWidth , 100 ) 
 + self . thumbnailView . frame = CGRectMake ( 0 , 5 , screenWidth , 90 ) 
 self . btnCamera . frame = CGRectMake ( 0 , 100 , screenWidth , 50 ) 
 self . btnLibrary . frame = CGRectMake ( 0 , 150 , screenWidth , 50 ) 
 self . btnDocuments . frame = CGRectMake ( 0 , 200 , screenWidth , 50 ) 
 @ @ - 210 , 6 + 208 , 10 @ @ class AAConvActionSheet : UIView { 
 self . btnLocation . addTarget ( self , action : " btnLocationAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 self . btnContact . addTarget ( self , action : " btnContactAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 self . btnCancel . addTarget ( self , action : " btnCloseAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + 
 + / / bineded self 
 + 
 + self . thumbnailView . bindedConvSheet = self 
 
 } 
 
 @ @ - 227 , 7 + 229 , 11 @ @ class AAConvActionSheet : UIView { 
 
 func btnDocumentAction ( ) { 
 cancelAnimation ( ) 
 - self . weakSuper . pickDocument ( ) 
 + 
 + if ( NSFileManager . defaultManager ( ) . ubiquityIdentityToken ! = nil ) { 
 + self . weakSuper . pickDocument ( ) 
 + } 
 + 
 } 
 
 func btnLocationAction ( ) { 
 @ @ - 243 , 5 + 249 , 65 @ @ class AAConvActionSheet : UIView { 
 func btnCloseAction ( ) { 
 cancelAnimation ( ) 
 } 
 + 
 + func updateSelectedPhotos ( ) { 
 + 
 + if self . thumbnailView . selectedAssets . count > 0 { 
 + 
 + var sendString : String ! 
 + 
 + if self . thumbnailView . selectedAssets . count = = 1 { 
 + sendString = " Send \ ( self . thumbnailView . selectedAssets . count ) Photo " 
 + } else { 
 + sendString = " Send \ ( self . thumbnailView . selectedAssets . count ) Photos " 
 + } 
 + 
 + / / remove target 
 + self . btnCamera . removeTarget ( self , action : " btnCameraAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + 
 + / / add new target 
 + self . btnCamera . setTitle ( sendString , forState : UIControlState . Normal ) 
 + self . btnCamera . addTarget ( self , action : " sendPhotos " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + self . btnCamera . titleLabel ? . font = UIFont ( name : " HelveticaNeue - Medium " , size : 17 ) 
 + 
 + 
 + } else { 
 + 
 + / / remove target 
 + self . btnCamera . removeTarget ( self , action : " sendPhotos " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + 
 + 
 + / / add new target 
 + self . btnCamera . setTitle ( AALocalized ( " PhotoCamera " ) , forState : UIControlState . Normal ) 
 + self . btnCamera . addTarget ( self , action : " btnCameraAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + self . btnCamera . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) 
 + 
 + } 
 + 
 + } 
 + 
 + func sendPhotos ( ) { 
 + 
 + self . cancelAnimation ( ) 
 + 
 + let priority = DISPATCH _ QUEUE _ PRIORITY _ DEFAULT 
 + dispatch _ async ( dispatch _ get _ global _ queue ( priority , 0 ) ) { 
 + 
 + let arrayModelsForSend = self . thumbnailView . getSelectedAsImages ( ) 
 + self . thumbnailView . selectedAssets = [ PHAsset ] ( ) 
 + 
 + for ( _ , image ) in arrayModelsForSend . enumerate ( ) { 
 + 
 + self . weakSuper . sendImageFromActionSheet ( image ) 
 + 
 + } 
 + 
 + dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { 
 + self . updateSelectedPhotos ( ) 
 + } 
 + 
 + } 
 + 
 + } 
 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift 
 index d53eb8e . . a0eca58 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift 
 @ @ - 7 , 13 + 7 , 16 @ @ 
 / / 
 
 import UIKit 
 + import Photos 
 
 class AAThumbnailCollectionCell : UICollectionViewCell { 
 let imgThumbnails : UIImageView ! 
 let imgSelected : UIImageView ! 
 
 var indexPath : NSIndexPath ! 
 - let isCheckSelected : Bool ! 
 + var isCheckSelected : Bool ! 
 + weak var bindedThumbView : AAThumbnailView ! 
 + weak var bindedPhotoModel : PHAsset ! 
 
 override init ( frame : CGRect ) { 
 
 @ @ - 22 , 11 + 25 , 16 @ @ class AAThumbnailCollectionCell : UICollectionViewCell { 
 
 self . imgSelected = UIImageView ( ) 
 self . imgSelected . backgroundColor = UIColor . clearColor ( ) 
 + self . imgSelected . userInteractionEnabled = true 
 + self . imgSelected . contentMode = UIViewContentMode . ScaleAspectFill 
 
 self . isCheckSelected = false 
 
 super . init ( frame : frame ) 
 
 + let tapRecognizer = UITapGestureRecognizer ( target : self , action : " handleSingleTap " ) 
 + self . imgSelected . addGestureRecognizer ( tapRecognizer ) 
 + 
 self . configUI ( ) 
 
 } 
 @ @ - 37 , 6 + 45 , 42 @ @ class AAThumbnailCollectionCell : UICollectionViewCell { 
 
 / / / 
 
 + func handleSingleTap ( ) { 
 + 
 + if ( self . isCheckSelected = = false ) { 
 + 
 + self . imgSelected . image = UIImage . bundled ( " ImageSelectedOn " ) 
 + 
 + self . imgSelected . transform = CGAffineTransformMakeScale ( 0 . 5 , 0 . 5 ) 
 + UIView . animateWithDuration ( 0 . 3 , delay : 0 , usingSpringWithDamping : 0 . 5 , initialSpringVelocity : 0 . 5 , options : UIViewAnimationOptions . CurveEaseInOut , animations : { ( ) - > Void in 
 + 
 + self . imgSelected . transform = CGAffineTransformIdentity 
 + 
 + } , completion : nil ) 
 + 
 + self . isCheckSelected = true 
 + 
 + self . bindedThumbView . addSelectedModel ( self . bindedPhotoModel ) 
 + 
 + } else { 
 + 
 + self . imgSelected . image = UIImage . bundled ( " ImageSelectedOff " ) 
 + 
 + self . imgSelected . transform = CGAffineTransformMakeScale ( 0 . 5 , 0 . 5 ) 
 + UIView . animateWithDuration ( 0 . 3 , delay : 0 , usingSpringWithDamping : 0 . 5 , initialSpringVelocity : 0 . 5 , options : UIViewAnimationOptions . CurveEaseInOut , animations : { ( ) - > Void in 
 + 
 + self . imgSelected . transform = CGAffineTransformIdentity 
 + 
 + } , completion : nil ) 
 + 
 + self . isCheckSelected = false 
 + 
 + self . bindedThumbView . removeSelectedModel ( self . bindedPhotoModel ) 
 + 
 + } 
 + 
 + } 
 + 
 func configUI ( ) { 
 
 self . addSubview ( self . imgThumbnails ) 
 @ @ - 47 , 8 + 91 , 10 @ @ class AAThumbnailCollectionCell : UICollectionViewCell { 
 override func layoutSubviews ( ) { 
 super . layoutSubviews ( ) 
 
 - self . imgThumbnails . frame = CGRectMake ( 0 , 0 , self . contentView . frame . size . width , self . contentView . frame . size . height ) 
 - self . imgSelected . frame = CGRectMake ( 0 , 0 , self . contentView . frame . size . width , self . contentView . frame . size . height ) 
 + self . imgThumbnails . frame = CGRectMake ( 0 , 0 , 90 , 90 ) 
 + 
 + self . imgSelected . frame = CGRectMake ( self . contentView . frame . size . width - 30 , 4 , 26 , 26 ) 
 + 
 
 
 } 
 @ @ - 56 , 7 + 102 , 7 @ @ class AAThumbnailCollectionCell : UICollectionViewCell { 
 override func prepareForReuse ( ) { 
 super . prepareForReuse ( ) 
 
 - self . imgSelected . image = nil 
 + self . imgThumbnails . image = nil 
 
 } 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift 
 index bb33b2e . . cf78608 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift 
 @ @ - 18 , 13 + 18 , 16 @ @ public enum ImagePickerMediaType { 
 class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSource { 
 
 var collectionView : UICollectionView ! 
 + weak var bindedConvSheet : AAConvActionSheet ! 
 let mediaType : ImagePickerMediaType = ImagePickerMediaType . Image 
 
 private var assets = [ PHAsset ] ( ) 
 + var selectedAssets = [ PHAsset ] ( ) 
 private let imageManager = PHCachingImageManager ( ) 
 + private let imageManagerForOrig = PHCachingImageManager ( ) 
 
 - private let minimumPreviewHeight : CGFloat = 70 
 - private var maximumPreviewHeight : CGFloat = 70 
 + private let minimumPreviewHeight : CGFloat = 90 
 + private var maximumPreviewHeight : CGFloat = 90 
 
 private lazy var requestOptions : PHImageRequestOptions = { 
 let options = PHImageRequestOptions ( ) 
 @ @ - 104 , 6 + 107 , 7 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 self . imageManager . requestImageDataForAsset ( asset , options : requestOptions ) { data , _ , _ , info in 
 if data ! = nil { 
 self . assets . append ( asset ) 
 + self . prefetchImagesForAsset ( asset ) 
 } 
 } 
 } 
 @ @ - 117 , 6 + 121 , 24 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 
 private func requestImageForAsset ( asset : PHAsset , completion : ( image : UIImage ? ) - > ( ) ) { 
 let targetSize = sizeForAsset ( asset , scale : UIScreen . mainScreen ( ) . scale ) 
 + requestOptions . synchronous = false 
 + 
 + / / Workaround because PHImageManager . requestImageForAsset doesn ' t work for burst images 
 + if asset . representsBurst { 
 + imageManager . requestImageDataForAsset ( asset , options : requestOptions ) { data , _ , _ , _ in 
 + let image = data . flatMap { UIImage ( data : $ 0 ) } 
 + completion ( image : image ) 
 + } 
 + } 
 + else { 
 + imageManager . requestImageForAsset ( asset , targetSize : targetSize , contentMode : . AspectFill , options : requestOptions ) { image , _ in 
 + completion ( image : image ) 
 + } 
 + } 
 + } 
 + 
 + private func requestOriginalImageForAsset ( asset : PHAsset , completion : ( image : UIImage ? ) - > ( ) ) { 
 + let targetSize = sizeForAsset ( asset , scale : UIScreen . mainScreen ( ) . scale ) 
 requestOptions . synchronous = true 
 
 / / Workaround because PHImageManager . requestImageForAsset doesn ' t work for burst images 
 @ @ - 134 , 12 + 156 , 16 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 } 
 
 private func sizeForAsset ( asset : PHAsset , scale : CGFloat = 1 ) - > CGSize { 
 - let proportion = CGFloat ( asset . pixelWidth ) / CGFloat ( asset . pixelHeight ) 
 
 - let imageHeight = maximumPreviewHeight - 2 * previewCollectionViewInset 
 - let imageWidth = floor ( proportion * imageHeight ) 
 + var complitedCGSize : CGSize ! 
 + 
 + if asset . pixelWidth > asset . pixelHeight { 
 + complitedCGSize = CGSizeMake ( CGFloat ( asset . pixelHeight ) , CGFloat ( asset . pixelHeight ) ) 
 + } else { 
 + complitedCGSize = CGSizeMake ( CGFloat ( asset . pixelWidth ) , CGFloat ( asset . pixelWidth ) ) 
 + } 
 
 - return CGSize ( width : imageWidth * scale , height : imageHeight * scale ) 
 + return complitedCGSize 
 } 
 
 / / / collection view delegate 
 @ @ - 157 , 15 + 183 , 70 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 
 let cell = self . collectionView . dequeueReusableCellWithReuseIdentifier ( " AAThumbnailCollectionCell " , forIndexPath : indexPath ) as ! AAThumbnailCollectionCell 
 
 + cell . bindedThumbView = self 
 + 
 + let photoModel = self . assets [ indexPath . row ] 
 + 
 + cell . bindedPhotoModel = photoModel 
 + 
 + if self . selectedAssets . contains ( photoModel ) { 
 + cell . isCheckSelected = true 
 + cell . imgSelected . image = UIImage . bundled ( " ImageSelectedOn " ) 
 + 
 + } else { 
 + cell . isCheckSelected = false 
 + cell . imgSelected . image = UIImage . bundled ( " ImageSelectedOff " ) 
 + 
 + } 
 + 
 cell . backgroundColor = UIColor . whiteColor ( ) 
 
 let asset = assets [ indexPath . row ] 
 
 requestImageForAsset ( asset ) { image in 
 - cell . imgSelected . image = image 
 + 
 + var complitedImage : UIImage ! 
 + 
 + if image ! . size . width > image ! . size . height { 
 + complitedImage = self . imageByCroppingImage ( image ! , toSize : CGSizeMake ( image ! . size . height , image ! . size . height ) ) 
 + } else { 
 + complitedImage = self . imageByCroppingImage ( image ! , toSize : CGSizeMake ( image ! . size . width , image ! . size . width ) ) 
 + } 
 + 
 + cell . imgThumbnails . image = complitedImage 
 + 
 + 
 } 
 
 
 + / / let priority = DISPATCH _ QUEUE _ PRIORITY _ DEFAULT 
 + / / dispatch _ async ( dispatch _ get _ global _ queue ( priority , 0 ) ) { 
 + / / / / do some task 
 + / / 
 + / / self . requestOptions . synchronous = true 
 + / / 
 + / / self . imageManagerForOrig . requestImageDataForAsset ( photoModel , options : self . requestOptions , resultHandler : { ( data , _ , _ , _ ) - > Void in 
 + / / if data ! = nil { 
 + / / 
 + / / let imageFromAsset = UIImage ( data : data ! ) ! 
 + / / var complitedImage : UIImage ! 
 + / / 
 + / / if imageFromAsset . size . width > imageFromAsset . size . height { 
 + / / complitedImage = self . imageByCroppingImage ( imageFromAsset , toSize : CGSizeMake ( imageFromAsset . size . height , imageFromAsset . size . height ) ) 
 + / / } else { 
 + / / complitedImage = self . imageByCroppingImage ( imageFromAsset , toSize : CGSizeMake ( imageFromAsset . size . width , imageFromAsset . size . width ) ) 
 + / / } 
 + / / 
 + / / dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { 
 + / / / / update some UI 
 + / / cell . imgThumbnails . image = complitedImage 
 + / / } 
 + / / } 
 + / / } ) 
 + / / 
 + / / } 
 + 
 + 
 return cell 
 } 
 
 @ @ - 176 , 7 + 257 , 7 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 } 
 
 func collectionViewSetup ( ) { 
 - 
 + 
 let flowLayout = UICollectionViewFlowLayout ( ) 
 flowLayout . scrollDirection = . Horizontal 
 flowLayout . minimumLineSpacing = 4 
 @ @ - 189 , 7 + 270 , 7 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 self . collectionView . showsHorizontalScrollIndicator = false 
 self . collectionView . delegate = self 
 self . collectionView . dataSource = self 
 - self . collectionView . frame = CGRectMake ( 0 , 0 , screenWidth , 80 ) 
 + self . collectionView . frame = CGRectMake ( 0 , 0 , screenWidth , 90 ) 
 
 self . collectionView . registerClass ( AAThumbnailCollectionCell . self , forCellWithReuseIdentifier : " AAThumbnailCollectionCell " ) 
 
 @ @ - 213 , 4 + 294 , 40 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 return cropped ; 
 } 
 
 + func addSelectedModel ( model : PHAsset ) { 
 + 
 + self . selectedAssets . append ( model ) 
 + self . bindedConvSheet . updateSelectedPhotos ( ) 
 + 
 + } 
 + 
 + func removeSelectedModel ( model : PHAsset ) { 
 + if let index = self . selectedAssets . indexOf ( model ) { 
 + self . selectedAssets . removeAtIndex ( index ) 
 + self . bindedConvSheet . updateSelectedPhotos ( ) 
 + } 
 + } 
 + 
 + func getSelectedAsImages ( ) - > [ UIImage ] { 
 + 
 + let arrayModelsForSend = self . selectedAssets 
 + 
 + var compliedArray = [ UIImage ] ( ) 
 + 
 + for ( _ , model ) in arrayModelsForSend . enumerate ( ) { 
 + 
 + self . imageManagerForOrig . requestImageDataForAsset ( model , options : requestOptions , resultHandler : { ( data , _ , _ , _ ) - > Void in 
 + if data ! = nil { 
 + compliedArray . append ( UIImage ( data : data ! ) ! ) 
 + } 
 + } ) 
 + 
 + } 
 + 
 + return compliedArray 
 + 
 + } 
 + 
 + 
 + 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 index 453c6f8 . . a53d43c 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 @ @ - 463 , 37 + 463 , 37 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 
 self . textInputbar . textView . resignFirstResponder ( ) 
 
 - let hasCamera = UIImagePickerController . isSourceTypeAvailable ( UIImagePickerControllerSourceType . Camera ) 
 - 
 - let builder = AAMenuBuilder ( ) 
 - 
 - if hasCamera { 
 - builder . add ( " PhotoCamera " ) { 
 - self . pickImage ( . Camera ) 
 - } 
 - } 
 - 
 - builder . add ( " PhotoLibrary " ) { 
 - self . pickImage ( . PhotoLibrary ) 
 - } 
 - 
 - if ( NSFileManager . defaultManager ( ) . ubiquityIdentityToken ! = nil ) { 
 - builder . add ( " SendDocument " ) { 
 - self . pickDocument ( ) 
 - } 
 - } 
 - 
 - builder . add ( " ShareLocation " ) { 
 - self . pickLocation ( ) 
 - } 
 - 
 - builder . add ( " ShareContact " ) { 
 - self . pickContact ( ) 
 - } 
 - 
 - showActionSheet ( builder . items , cancelButton : " AlertCancel " , destructButton : nil , sourceView : self . leftButton , sourceRect : self . leftButton . bounds , tapClosure : builder . tapClosure ) 
 + / / let hasCamera = UIImagePickerController . isSourceTypeAvailable ( UIImagePickerControllerSourceType . Camera ) 
 + / / 
 + / / let builder = AAMenuBuilder ( ) 
 + / / 
 + / / if hasCamera { 
 + / / builder . add ( " PhotoCamera " ) { 
 + / / self . pickImage ( . Camera ) 
 + / / } 
 + / / } 
 + / / 
 + / / builder . add ( " PhotoLibrary " ) { 
 + / / self . pickImage ( . PhotoLibrary ) 
 + / / } 
 + / / 
 + / / if ( NSFileManager . defaultManager ( ) . ubiquityIdentityToken ! = nil ) { 
 + / / builder . add ( " SendDocument " ) { 
 + / / self . pickDocument ( ) 
 + / / } 
 + / / } 
 + / / 
 + / / builder . add ( " ShareLocation " ) { 
 + / / self . pickLocation ( ) 
 + / / } 
 + / / 
 + / / builder . add ( " ShareContact " ) { 
 + / / self . pickContact ( ) 
 + / / } 
 + / / 
 + / / showActionSheet ( builder . items , cancelButton : " AlertCancel " , destructButton : nil , sourceView : self . leftButton , sourceRect : self . leftButton . bounds , tapClosure : builder . tapClosure ) 
 
 - / / self . actionSheet . showAnimation ( ) 
 + self . actionSheet . showAnimation ( ) 
 
 self . rightButton . layoutIfNeeded ( ) 
 } 
 @ @ - 650 , 6 + 650 , 10 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 picker . dismissViewControllerAnimated ( true , completion : nil ) 
 } 
 
 + func sendImageFromActionSheet ( image : UIImage ) { 
 + Actor . sendUIImage ( image , peer : peer ) 
 + } 
 + 
 / / Location picking 
 
 func pickLocation ( ) { 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AudioRecorder / AAAudioRecorder . m b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AudioRecorder / AAAudioRecorder . m 
 index 70665ac . . 016ed15 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AudioRecorder / AAAudioRecorder . m 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Utils / AudioRecorder / AAAudioRecorder . m 
 @ @ - 93 , 18 + 93 , 20 @ @ static void playSoundCompleted ( _ _ unused SystemSoundID ssID , _ _ unused void * clien 
 
 currentTimerId = timerId ; 
 
 - static SystemSoundID soundId ; 
 - static dispatch _ once _ t onceToken ; 
 - dispatch _ once ( & onceToken , ^ 
 - { 
 - NSString * path = [ NSString stringWithFormat : @ " % @ / % @ " , [ [ NSBundle mainBundle ] resourcePath ] , @ " begin _ record . caf " ] ; 
 - NSURL * filePath = [ NSURL fileURLWithPath : path isDirectory : false ] ; 
 - AudioServicesCreateSystemSoundID ( ( _ _ bridge CFURLRef ) filePath , & soundId ) ; 
 - if ( soundId ! = 0 ) 
 - AudioServicesAddSystemSoundCompletion ( soundId , NULL , kCFRunLoopCommonModes , & playSoundCompleted , NULL ) ; 
 - } ) ; 
 + AudioServicesPlayAlertSound ( kSystemSoundID _ Vibrate ) ; 
 
 - AudioServicesPlaySystemSound ( soundId ) ; 
 + / / static SystemSoundID soundId ; 
 + / / static dispatch _ once _ t onceToken ; 
 + / / dispatch _ once ( & onceToken , ^ 
 + / / { 
 + / / NSString * path = [ NSString stringWithFormat : @ " % @ / % @ " , [ [ NSBundle mainBundle ] resourcePath ] , @ " begin _ record . caf " ] ; 
 + / / NSURL * filePath = [ NSURL fileURLWithPath : path isDirectory : false ] ; 
 + / / AudioServicesCreateSystemSoundID ( ( _ _ bridge CFURLRef ) filePath , & soundId ) ; 
 + / / if ( soundId ! = 0 ) 
 + / / AudioServicesAddSystemSoundCompletion ( soundId , NULL , kCFRunLoopCommonModes , & playSoundCompleted , NULL ) ; 
 + / / } ) ; 
 + / / 
 + / / AudioServicesPlaySystemSound ( soundId ) ; 
 } 
 else 
 {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 index 0428791 . . 706ac5f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK . xcodeproj / project . pbxproj 
 @ @ - 273 , 7 + 273 , 6 @ @ 
 	 	 BE2621571C4656D700A817AB / * AAConvActionSheet . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / ; } ; 
 	 	 BE2621591C4656EE00A817AB / * AAThumbnailView . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / ; } ; 
 	 	 BEAC2B311C42D683007F7A2F / * libopus . a in Frameworks * / = { isa = PBXBuildFile ; fileRef = 15F89F001C211FDE00776ACD / * libopus . a * / ; } ; 
 - 	 	 BEF11DB51C4657D20076400A / * AAASAssetManager . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / ; } ; 
 	 	 BEF11DB61C466D800076400A / * begin _ record . caf in Resources * / = { isa = PBXBuildFile ; fileRef = 153F6B3C1C2A9B1900C0B960 / * begin _ record . caf * / ; } ; 
 	 	 BEFE68D51C4657360001F2D6 / * AAThumbnailCollectionCell . swift in Sources * / = { isa = PBXBuildFile ; fileRef = BEFE68D41C4657360001F2D6 / * AAThumbnailCollectionCell . swift * / ; } ; 
 / * End PBXBuildFile section * / 
 @ @ - 555 , 7 + 554 , 6 @ @ 
 	 	 BE237C9C1C422FFA00060648 / * AAStickersView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAStickersView . swift ; sourceTree = " < group > " ; } ; 
 	 	 BE2621561C4656D700A817AB / * AAConvActionSheet . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAConvActionSheet . swift ; sourceTree = " < group > " ; } ; 
 	 	 BE2621581C4656EE00A817AB / * AAThumbnailView . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAThumbnailView . swift ; sourceTree = " < group > " ; } ; 
 - 	 	 BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAASAssetManager . swift ; sourceTree = " < group > " ; } ; 
 	 	 BEFE68D41C4657360001F2D6 / * AAThumbnailCollectionCell . swift * / = { isa = PBXFileReference ; fileEncoding = 4 ; lastKnownFileType = sourcecode . swift ; path = AAThumbnailCollectionCell . swift ; sourceTree = " < group > " ; } ; 
 / * End PBXFileReference section * / 
 
 @ @ - 1320 , 7 + 1318 , 6 @ @ 
 	 	 BE26215A1C4656F100A817AB / * Manager * / = { 
 	 	 	 isa = PBXGroup ; 
 	 	 	 children = ( 
 - 	 	 	 	 BEF11DB41C4657D20076400A / * AAASAssetManager . swift * / , 
 	 	 	 ) ; 
 	 	 	 name = Manager ; 
 	 	 	 sourceTree = " < group > " ; 
 @ @ - 1692 , 7 + 1689 , 6 @ @ 
 	 	 	 	 15D35F671C20187E00E3717A / * NSObject + TGLock . m in Sources * / , 
 	 	 	 	 15D35F5C1C20187E00E3717A / * AAAudioPlayer . m in Sources * / , 
 	 	 	 	 152AA8BF1C298C4B0030DEEE / * AASettingsLastSeenController . swift in Sources * / , 
 - 	 	 	 	 BEF11DB51C4657D20076400A / * AAASAssetManager . swift in Sources * / , 
 	 	 	 	 066A51561BC4BEF5000E606E / * AALocalized . swift in Sources * / , 
 	 	 	 	 069CF4CF1BCB909A00C66E12 / * CLToken . m in Sources * / , 
 	 	 	 	 15D35F751C201B6B00E3717A / * AACustomPresentationController . swift in Sources * / , 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 index b6bf9c5 . . 006ea4f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / ActorCoreExt . swift 
 @ @ - 37 , 7 + 37 , 6 @ @ public extension ACCocoaMessenger { 
 let path = CocoaFiles . pathFromDescriptor ( descriptor ) ; 
 
 videoData . writeToFile ( path , atomically : true ) / / write to file 
 - 
 
 / / get video duration 
 
 @ @ - 55 , 8 + 54 , 9 @ @ public extension ACCocoaMessenger { 
 do { 
 let imageRef = try imageGenerator . copyCGImageAtTime ( thumbnailTime , actualTime : nil ) 
 let thumbnail = UIImage ( CGImage : imageRef ) 
 - let thumbData = UIImageJPEGRepresentation ( thumbnail , 0 . 55 ) ; / / thumbnail binary data 
 - let fastThumb = ACFastThumb ( int : jint ( thumbnail . size . width ) , withInt : jint ( thumbnail . size . height ) , withByteArray : thumbData ! . toJavaBytes ( ) ) 
 + let thumb = thumbnail . resizeSquare ( 90 , maxH : 90 ) ; 
 + let thumbData = UIImageJPEGRepresentation ( thumb , 0 . 55 ) ; / / thumbnail binary data 
 + let fastThumb = ACFastThumb ( int : jint ( thumb . size . width ) , withInt : jint ( thumb . size . height ) , withByteArray : thumbData ! . toJavaBytes ( ) ) 
 
 print ( " video upload imageRef = \ ( imageRef ) " ) 
 print ( " video upload thumbnail = \ ( thumbnail ) " ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 index a70b6c6 . . 01a0edb 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 @ @ - 40 , 11 + 40 , 8 @ @ public class ActorSDK { 
 / / / Server Endpoints 
 public var endpoints = [ 
 " tls : / / front1 - mtproto - api - rev2 . actor . im " , 
 - " tls : / / front2 - mtproto - api - rev2 . actor . im " , 
 + " tls : / / front2 - mtproto - api - rev2 . actor . im " 
 
 - " tcp : / / front1 - mtproto - api - rev3 . actor . im : 443 " , 
 - " tcp : / / front2 - mtproto - api - rev3 . actor . im : 443 " , 
 - " tcp : / / front3 - mtproto - api - rev3 . actor . im : 443 " 
 ] { 
 didSet { 
 trustedKeys = [ ] 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift 
 deleted file mode 100644 
 index 1850eeb . . 0000000 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAASAssetManager . swift 
 + + + / dev / null 
 @ @ - 1 , 250 + 0 , 0 @ @ 
 - / / 
 - / / AAASAssetManager . swift 
 - / / ActorSDK 
 - / / 
 - / / Created by kioshimafx on 1 / 13 / 16 . 
 - / / Copyright © 2016 Steve Kite . All rights reserved . 
 - / / 
 - 
 - import UIKit 
 - import AssetsLibrary 
 - 
 - let ASSET _ PHOTO _ THUMBNAIL : Int = 0 
 - let ASSET _ PHOTO _ ASPECT _ THUMBNAIL : Int = 1 
 - let ASSET _ PHOTO _ SCREEN _ SIZE : Int = 2 
 - let ASSET _ PHOTO _ FULL _ RESOLUTION : Int = 3 
 - 
 - let kNotificationSendPhotos = " NotificationSendPhotos " 
 - let kNotificationUpdateSelected = " NotificationUpdateSelected " 
 - 
 - class AAAssetPhoto { 
 - 
 - var asset : ALAsset ! 
 - var index : Int ! 
 - var isSelected : Bool ! 
 - var groupIndex : String ! 
 - 
 - var group : Int ! 
 - 
 - init ( groupIn : Int , indexIn : Int , assetIn : ALAsset ) { 
 - 
 - self . group = groupIn 
 - self . index = indexIn 
 - self . asset = assetIn 
 - self . isSelected = true 
 - 
 - self . groupIndex = " \ ( group ) - \ ( index ) " 
 - 
 - } 
 - 
 - } 
 - 
 - class AAASAssetManager : NSObject { 
 - 
 - / / # # # singleton # # # 
 - static let sharedInstance = AAASAssetManager ( ) 
 - 
 - var maxSelected : Int ! 
 - var currentGroupIndex : Int ! 
 - 
 - / / / 
 - 
 - var assetPhotos : Array < ALAsset > ! 
 - var selectedPhotos : Array < AAAssetPhoto > ! 
 - 
 - / / / 
 - 
 - var assetsLibrary : ALAssetsLibrary ! 
 - var assetGroups : Array < ALAssetsGroup > ! 
 - var selectedAsset : ALAsset ! 
 - 
 - override init ( ) { 
 - 
 - self . selectedPhotos = Array < AAAssetPhoto > ( ) 
 - self . assetsLibrary = ALAssetsLibrary ( ) 
 - self . assetsLibrary . writeImageToSavedPhotosAlbum ( nil , metadata : nil ) { ( _ , _ ) - > Void in 
 - / / 
 - } 
 - 
 - } 
 - 
 - / / messages _ setActivity ( user _ id : Int , reqResponse : ( VKResponse ! ) - > ( ) 
 - 
 - func getSavedPhotoList ( result : ( Array < AnyObject > ! ) - > ( ) , error : ( String ) - > ( ) ) { 
 - 
 - 
 - dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { ( ) - > Void in 
 - / / 
 - } 
 - 
 - 
 - } 
 - 
 - 
 - func getGroupCount ( ) - > Int { 
 - return self . assetGroups . count 
 - } 
 - 
 - func getPhotoCountOfCurrentGroup ( ) - > Int { 
 - return self . assetPhotos . count 
 - } 
 - 
 - func getSelectedPhotoCount ( ) - > Int { 
 - 
 - let selectedArray = self . selectedPhotos . filter ( { 
 - $ 0 . isSelected = = true 
 - } ) 
 - 
 - return selectedArray . count 
 - } 
 - 
 - func clearData ( ) { 
 - 
 - self . selectedPhotos . removeAll ( ) 
 - self . assetGroups . removeAll ( ) 
 - self . assetPhotos . removeAll ( ) 
 - 
 - 
 - self . selectedPhotos = nil 
 - self . assetGroups = nil 
 - self . assetPhotos = nil 
 - 
 - } 
 - 
 - / / / / 
 - 
 - 
 - func getImageFromAsset ( asset : ALAsset , type : Int ) - > UIImage { 
 - / * 
 - NSString * strXMP = asset . defaultRepresentation . metadata [ @ " AdjustmentXMP " ] ; 
 - if ( strXMP = = nil | | [ strXMP isKindOfClass : [ NSNull class ] ] ) 
 - { 
 - iRef = [ asset . defaultRepresentation fullResolutionImage ] ; 
 - return [ UIImage imageWithCGImage : iRef scale : 1 . 0 orientation : ( UIImageOrientation ) asset . defaultRepresentation . orientation ] ; 
 - } 
 - else 
 - { 
 - NSData * dXMP = [ strXMP dataUsingEncoding : NSUTF8StringEncoding ] ; 
 - 
 - CIImage * image = [ CIImage imageWithCGImage : asset . defaultRepresentation . fullResolutionImage ] ; 
 - 
 - NSError * error = nil ; 
 - NSArray * filterArray = [ CIFilter filterArrayFromSerializedXMP : dXMP 
 - inputImageExtent : image . extent 
 - error : & error ] ; 
 - if ( error ) { 
 - NSLog ( @ " Error during CIFilter creation : % @ " , [ error localizedDescription ] ) ; 
 - } 
 - 
 - for ( CIFilter * filter in filterArray ) { 
 - [ filter setValue : image forKey : kCIInputImageKey ] ; 
 - image = [ filter outputImage ] ; 
 - } 
 - CIContext * context = [ CIContext contextWithOptions : nil ] ; 
 - CGImageRef cgimage = [ context createCGImage : image fromRect : [ image extent ] ] ; 
 - UIImage * iImage = [ UIImage imageWithCGImage : cgimage scale : 1 . 0 orientation : ( UIImageOrientation ) asset . defaultRepresentation . orientation ] ; 
 - return iImage ; 
 - * / 
 - 
 - var imageRef : CGImageRef ! 
 - 
 - if ( type = = ASSET _ PHOTO _ THUMBNAIL ) { 
 - imageRef = asset . thumbnail ( ) as ! CGImageRef 
 - } else if ( type = = ASSET _ PHOTO _ ASPECT _ THUMBNAIL ) { 
 - imageRef = asset . aspectRatioThumbnail ( ) as ! CGImageRef 
 - } else if ( type = = ASSET _ PHOTO _ SCREEN _ SIZE ) { 
 - imageRef = asset . defaultRepresentation ( ) as ! CGImageRef 
 - } else if ( type = = ASSET _ PHOTO _ FULL _ RESOLUTION ) { 
 - imageRef = asset . defaultRepresentation ( ) as ! CGImageRef 
 - / / let strXMP = asset . defaultRepresentation ( ) . metadata ( ) [ " AdjustmentXMP " ] 
 - 
 - 
 - 
 - 
 - } 
 - 
 - return UIImage ( CGImage : imageRef ) 
 - } 
 - 
 - func getImageAtIndex ( nIndex : Int , nType : Int ) - > UIImage { 
 - return getImageFromAsset ( self . assetPhotos [ nIndex ] , type : nType ) 
 - } 
 - 
 - func getImagePreviewAtIndex ( nIndex : Int , nType : Int ) - > UIImage { 
 - let photoObj = self . selectedPhotos [ nIndex ] 
 - return getImageFromAsset ( photoObj . asset , type : nType ) 
 - } 
 - 
 - func getAssetAtIndex ( index : Int ) - > ALAsset { 
 - return self . assetPhotos [ index ] 
 - } 
 - 
 - func getGroupAtIndex ( index : Int ) - > ALAssetsGroup { 
 - return self . assetGroups [ index ] 
 - } 
 - 
 - func sendSelectedPhotos ( type : Int ) - > Array < UIImage > { 
 - 
 - var sendArray = Array < UIImage > ( ) 
 - 
 - for ( _ , photoObj ) in self . selectedPhotos . enumerate ( ) { 
 - 
 - let image = self . getImageFromAsset ( photoObj . asset , type : type ) 
 - sendArray . append ( image ) 
 - 
 - } 
 - 
 - self . selectedPhotos . removeAll ( ) 
 - 
 - return sendArray 
 - } 
 - 
 - func addObjectWithIndex ( index : Int ) { 
 - 
 - let model = AAAssetPhoto ( groupIn : self . currentGroupIndex , indexIn : index , assetIn : self . assetPhotos [ index ] ) 
 - 
 - self . selectedPhotos . append ( model ) 
 - 
 - / / [ [ NSNotificationCenter defaultCenter ] postNotificationName : kNotificationUpdateSelected object : nil ] ; 
 - 
 - } 
 - 
 - 
 - func removeObjectWithIndex ( index : Int ) { 
 - 
 - let groupIndex = " \ ( self . currentGroupIndex ! ) - \ ( index ) " 
 - 
 - let results = self . selectedPhotos . filter ( { 
 - $ 0 . groupIndex = = groupIndex 
 - } ) 
 - 
 - if ( results . count > 0 ) { 
 - 
 - / / let model = results [ 0 ] 
 - 
 - 
 - } 
 - 
 - 
 - } 
 - 
 - 
 - func currentGroupFirstIndex ( ) - > Int { 
 - 
 - let results = self . selectedPhotos . filter ( { 
 - $ 0 . group = = self . currentGroupIndex 
 - } ) 
 - 
 - if ( results . count > 0 ) { 
 - 
 - let model = results [ 0 ] 
 - return model . index 
 - 
 - } 
 - 
 - return 0 
 - } 
 - 
 - 
 - 
 - } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 index d235ec3 . . d0bc182 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAConvActionSheet . swift 
 @ @ - 12 , 21 + 12 , 27 @ @ protocol AAActionSheetDelegate { 
 func actionSheetDidFinished ( selectedObjs : Array < AnyObject > ) 
 } 
 
 + let screenWidth = UIScreen . mainScreen ( ) . bounds . size . width 
 + let screenHeigth = UIScreen . mainScreen ( ) . bounds . size . height 
 + 
 class AAConvActionSheet : UIView { 
 
 var delegate : AAActionSheetDelegate ? 
 
 var sheetView : UIView ! 
 - var btnAlbum : UIButton ! 
 + 
 var btnCamera : UIButton ! 
 + var btnLibrary : UIButton ! 
 + var btnDocuments : UIButton ! 
 + var btnLocation : UIButton ! 
 + var btnContact : UIButton ! 
 var btnCancel : UIButton ! 
 - var thumbnailView : AAThumbnailView ! 
 + 
 + var thumbnailView = AAThumbnailView ( ) 
 
 weak var weakSuper : ConversationViewController ! 
 
 
 - let screenWidth = UIScreen . mainScreen ( ) . bounds . size . width 
 - let screenHeigth = UIScreen . mainScreen ( ) . bounds . size . height 
 
 init ( maxSelected : Int , weakSuperIn : ConversationViewController ) { 
 super . init ( frame : CGRectZero ) 
 @ @ - 48 , 14 + 54 , 12 @ @ class AAConvActionSheet : UIView { 
 
 self . alpha = 0 
 self . frame = CGRectMake ( 0 , 0 , screenWidth , screenHeigth ) 
 - self . backgroundColor = UIColor . clearColor ( ) 
 + self . backgroundColor = UIColor . blackColor ( ) . colorWithAlphaComponent ( 0 . 5 ) 
 + 
 
 - self . addSubview ( self . sheetView ) 
 
 - / / self . sheetView . addSubview ( self . btnCancel ) 
 - / / self . sheetView . addSubview ( self . btnAlbum ) 
 - / / self . sheetView . addSubview ( self . btnCamera ) 
 - / / self . sheetView . addSubview ( self . thumbnailView ) 
 + / / make photo 
 + 
 
 self . configNotification ( ) 
 
 @ @ - 63 , 17 + 67 , 13 @ @ class AAConvActionSheet : UIView { 
 
 func configNotification ( ) { 
 
 - NSNotificationCenter . defaultCenter ( ) . addObserver ( self , selector : " " , name : kNotificationSendPhotos , object : nil ) 
 - NSNotificationCenter . defaultCenter ( ) . addObserver ( self , selector : " " , name : kNotificationUpdateSelected , object : nil ) 
 
 } 
 
 deinit { 
 
 self . weakSuper = nil 
 - 
 - AAASAssetManager . sharedInstance . clearData ( ) 
 - NSNotificationCenter . defaultCenter ( ) . removeObserver ( self ) 
 + 
 
 } 
 
 @ @ - 81 , 19 + 81 , 22 @ @ class AAConvActionSheet : UIView { 
 func showAnimation ( ) { 
 
 / / self . btnCamera . selected = true 
 - / / self . thumbnailView . reloadView ( ) 
 / / self . btnCamera . setTitle ( " Camera " , forState : UIControlState . Normal ) 
 
 var frame = self . sheetView . frame 
 - frame . origin . y = screenHeigth - 350 
 + frame . origin . y = screenHeigth - 400 
 
 UIView . animateWithDuration ( 0 . 25 ) { ( ) - > Void in 
 self . sheetView . frame = frame 
 self . alpha = 1 
 
 + self . thumbnailView . open ( ) 
 + self . thumbnailView . reloadView ( ) 
 + 
 } 
 
 
 + 
 } 
 
 func cancelAnimation ( ) { 
 @ @ - 101 , 10 + 104 , 10 @ @ class AAConvActionSheet : UIView { 
 var frame = self . sheetView . frame 
 frame . origin . y = screenHeigth 
 
 - UIView . animateWithDuration ( 0 . 25 ) { ( ) - > Void in 
 + UIView . animateWithDuration ( 0 . 25 , animations : { ( ) - > Void in 
 self . sheetView . frame = frame 
 self . alpha = 0 
 - 
 + } ) { ( bool ) - > Void in 
 } 
 
 } 
 @ @ - 117 , 21 + 120 , 128 @ @ class AAConvActionSheet : UIView { 
 
 
 / / sheet view 
 - let frame = CGRectMake ( 0 , screenHeigth , screenWidth , 350 ) 
 + let frame = CGRectMake ( 0 , screenHeigth , screenWidth , 400 ) 
 self . sheetView = UIView ( frame : frame ) 
 - self . sheetView . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 231 . 0 / 255 . 0 , blue : 234 . 0 / 255 . 0 , alpha : 1 ) 
 - 
 - 
 - / / button cancel 
 - 
 - self . btnCancel = UIButton ( type : UIButtonType . Custom ) 
 - 
 - / / thumbnail view 
 - 
 - 
 + self . sheetView . backgroundColor = UIColor . whiteColor ( ) 
 
 + self . addSubview ( self . sheetView ) 
 
 + self . btnCamera = UIButton ( type : UIButtonType . System ) 
 + self . btnLibrary = UIButton ( type : UIButtonType . System ) 
 + self . btnDocuments = UIButton ( type : UIButtonType . System ) 
 + self . btnLocation = UIButton ( type : UIButtonType . System ) 
 + self . btnContact = UIButton ( type : UIButtonType . System ) 
 + self . btnCancel = UIButton ( type : UIButtonType . System ) 
 + 
 + / / color 
 + 
 + self . btnCamera . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) 
 + self . btnLibrary . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) 
 + self . btnDocuments . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) 
 + self . btnLocation . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) 
 + self . btnContact . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) 
 + self . btnCancel . tintColor = UIColor ( red : 5 . 0 / 255 . 0 , green : 124 . 0 / 255 . 0 , blue : 226 . 0 / 255 . 0 , alpha : 1 ) 
 + 
 + / / font size 
 + 
 + self . btnCamera . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) 
 + self . btnLibrary . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) 
 + self . btnDocuments . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) 
 + self . btnLocation . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) 
 + self . btnContact . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) 
 + self . btnCancel . titleLabel ? . font = UIFont . systemFontOfSize ( 17 ) 
 + 
 + / / add buttons as subivews 
 + 
 + self . sheetView . addSubview ( self . btnCamera ) 
 + self . sheetView . addSubview ( self . btnLibrary ) 
 + self . sheetView . addSubview ( self . btnDocuments ) 
 + self . sheetView . addSubview ( self . btnLocation ) 
 + self . sheetView . addSubview ( self . btnContact ) 
 + self . sheetView . addSubview ( self . btnCancel ) 
 + self . sheetView . addSubview ( self . thumbnailView ) 
 + 
 + self . thumbnailView . frame = CGRectMake ( 0 , 5 , screenWidth , 100 ) 
 + self . btnCamera . frame = CGRectMake ( 0 , 100 , screenWidth , 50 ) 
 + self . btnLibrary . frame = CGRectMake ( 0 , 150 , screenWidth , 50 ) 
 + self . btnDocuments . frame = CGRectMake ( 0 , 200 , screenWidth , 50 ) 
 + self . btnLocation . frame = CGRectMake ( 0 , 250 , screenWidth , 50 ) 
 + self . btnContact . frame = CGRectMake ( 0 , 300 , screenWidth , 50 ) 
 + self . btnCancel . frame = CGRectMake ( 0 , 350 , screenWidth , 50 ) 
 + 
 + / / separators 
 + 
 + let spearator1 = UIView ( frame : CGRectMake ( 0 , 99 , screenWidth , 1 ) ) 
 + spearator1 . backgroundColor = UIColor ( red : 223 . 9 / 255 . 0 , green : 223 . 9 / 255 . 0 , blue : 223 . 9 / 255 . 0 , alpha : 0 . 6 ) 
 + let spearator2 = UIView ( frame : CGRectMake ( 10 , 149 , screenWidth - 20 , 1 ) ) 
 + spearator2 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 + let spearator3 = UIView ( frame : CGRectMake ( 10 , 199 , screenWidth - 20 , 1 ) ) 
 + spearator3 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 + let spearator4 = UIView ( frame : CGRectMake ( 10 , 249 , screenWidth - 20 , 1 ) ) 
 + spearator4 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 + let spearator5 = UIView ( frame : CGRectMake ( 10 , 299 , screenWidth - 20 , 1 ) ) 
 + spearator5 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 + let spearator6 = UIView ( frame : CGRectMake ( 10 , 349 , screenWidth - 20 , 1 ) ) 
 + spearator6 . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 230 . 0 / 255 . 0 , blue : 230 . 0 / 255 . 0 , alpha : 0 . 6 ) 
 + 
 + / / add separatos as subview 
 + 
 + self . sheetView . addSubview ( spearator1 ) 
 + self . sheetView . addSubview ( spearator2 ) 
 + self . sheetView . addSubview ( spearator3 ) 
 + self . sheetView . addSubview ( spearator4 ) 
 + self . sheetView . addSubview ( spearator5 ) 
 + self . sheetView . addSubview ( spearator6 ) 
 + 
 + / / set title for buttons 
 + 
 + self . btnCamera . setTitle ( AALocalized ( " PhotoCamera " ) , forState : UIControlState . Normal ) 
 + self . btnLibrary . setTitle ( AALocalized ( " PhotoLibrary " ) , forState : UIControlState . Normal ) 
 + self . btnDocuments . setTitle ( AALocalized ( " SendDocument " ) , forState : UIControlState . Normal ) 
 + self . btnLocation . setTitle ( AALocalized ( " ShareLocation " ) , forState : UIControlState . Normal ) 
 + self . btnContact . setTitle ( AALocalized ( " ShareContact " ) , forState : UIControlState . Normal ) 
 + self . btnCancel . setTitle ( AALocalized ( " AlertCancel " ) , forState : UIControlState . Normal ) 
 + 
 + / / add actins 
 + 
 + self . btnCamera . addTarget ( self , action : " btnCameraAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + self . btnLibrary . addTarget ( self , action : " btnLibraryAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + self . btnDocuments . addTarget ( self , action : " btnDocumentAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + self . btnLocation . addTarget ( self , action : " btnLocationAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + self . btnContact . addTarget ( self , action : " btnContactAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + self . btnCancel . addTarget ( self , action : " btnCloseAction " , forControlEvents : UIControlEvents . TouchUpInside ) 
 + 
 + } 
 + 
 + / / MARK : - Button ' s actions 
 + 
 + func btnCameraAction ( ) { 
 + cancelAnimation ( ) 
 + self . weakSuper . pickImage ( . Camera ) 
 } 
 
 + func btnLibraryAction ( ) { 
 + cancelAnimation ( ) 
 + self . weakSuper . pickImage ( . PhotoLibrary ) 
 + } 
 + 
 + func btnDocumentAction ( ) { 
 + cancelAnimation ( ) 
 + self . weakSuper . pickDocument ( ) 
 + } 
 + 
 + func btnLocationAction ( ) { 
 + cancelAnimation ( ) 
 + self . weakSuper . pickLocation ( ) 
 + } 
 + 
 + func btnContactAction ( ) { 
 + cancelAnimation ( ) 
 + self . weakSuper . pickContact ( ) 
 + } 
 + 
 + func btnCloseAction ( ) { 
 + cancelAnimation ( ) 
 + } 
 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift 
 index 41da72f . . d53eb8e 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailCollectionCell . swift 
 @ @ - 47 , 12 + 47 , 16 @ @ class AAThumbnailCollectionCell : UICollectionViewCell { 
 override func layoutSubviews ( ) { 
 super . layoutSubviews ( ) 
 
 + self . imgThumbnails . frame = CGRectMake ( 0 , 0 , self . contentView . frame . size . width , self . contentView . frame . size . height ) 
 + self . imgSelected . frame = CGRectMake ( 0 , 0 , self . contentView . frame . size . width , self . contentView . frame . size . height ) 
 + 
 
 } 
 
 override func prepareForReuse ( ) { 
 super . prepareForReuse ( ) 
 
 + self . imgSelected . image = nil 
 
 } 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift 
 index 8267e7a . . bb33b2e 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Conversation / Views / AAThumbnailView . swift 
 @ @ - 7 , 16 + 7 , 40 @ @ 
 / / 
 
 import UIKit 
 + import Photos 
 + 
 + public enum ImagePickerMediaType { 
 + case Image 
 + case Video 
 + case ImageAndVideo 
 + } 
 
 class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSource { 
 
 var collectionView : UICollectionView ! 
 + let mediaType : ImagePickerMediaType = ImagePickerMediaType . Image 
 + 
 + private var assets = [ PHAsset ] ( ) 
 + private let imageManager = PHCachingImageManager ( ) 
 + 
 + private let minimumPreviewHeight : CGFloat = 70 
 + private var maximumPreviewHeight : CGFloat = 70 
 + 
 + private lazy var requestOptions : PHImageRequestOptions = { 
 + let options = PHImageRequestOptions ( ) 
 + options . deliveryMode = . HighQualityFormat 
 + options . resizeMode = . Fast 
 + 
 + return options 
 + } ( ) 
 + 
 + private let previewCollectionViewInset : CGFloat = 5 
 
 
 override init ( frame : CGRect ) { 
 super . init ( frame : frame ) 
 
 - self . configUI ( ) 
 + self . collectionViewSetup ( ) 
 
 } 
 
 @ @ - 26 , 23 + 50 , 123 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 
 / / / 
 
 - func configUI ( ) { 
 - self . collectionViewSetup ( ) 
 - self . addSubview ( self . collectionView ) 
 + func open ( ) { 
 + 
 + if PHPhotoLibrary . authorizationStatus ( ) = = . Authorized { 
 + fetchAssets ( ) 
 + self . collectionView . reloadData ( ) 
 + } else if PHPhotoLibrary . authorizationStatus ( ) = = . NotDetermined { 
 + PHPhotoLibrary . requestAuthorization ( ) { status in 
 + if status = = . Authorized { 
 + dispatch _ async ( dispatch _ get _ main _ queue ( ) ) { 
 + self . fetchAssets ( ) 
 + self . collectionView . reloadData ( ) 
 + } 
 + } 
 + } 
 + } 
 + 
 + } 
 + 
 + private func fetchAssets ( ) { 
 + let options = PHFetchOptions ( ) 
 + options . sortDescriptors = [ NSSortDescriptor ( key : " creationDate " , ascending : false ) ] 
 + 
 + / / switch mediaType { 
 + / / case . Image : 
 + / / options . predicate = NSPredicate ( format : " mediaType = % d " , PHAssetMediaType . Image . rawValue ) 
 + / / case . Video : 
 + / / options . predicate = NSPredicate ( format : " mediaType = % d " , PHAssetMediaType . Video . rawValue ) 
 + / / case . ImageAndVideo : 
 + / / options . predicate = NSPredicate ( format : " mediaType = % d OR mediaType = % d " , PHAssetMediaType . Image . rawValue , PHAssetMediaType . Video . rawValue ) 
 + / / } 
 + 
 + options . predicate = NSPredicate ( format : " mediaType = % d " , PHAssetMediaType . Image . rawValue ) 
 + 
 + let fetchLimit = 50 
 + if # available ( iOS 9 , * ) { 
 + options . fetchLimit = fetchLimit 
 + } 
 + 
 + let result = PHAsset . fetchAssetsWithOptions ( options ) 
 + let requestOptions = PHImageRequestOptions ( ) 
 + requestOptions . synchronous = true 
 + requestOptions . deliveryMode = . FastFormat 
 + 
 + result . enumerateObjectsUsingBlock { asset , _ , stop in 
 + defer { 
 + if self . assets . count > fetchLimit { 
 + stop . initialize ( true ) 
 + } 
 + } 
 + 
 + if let asset = asset as ? PHAsset { 
 + self . imageManager . requestImageDataForAsset ( asset , options : requestOptions ) { data , _ , _ , info in 
 + if data ! = nil { 
 + self . assets . append ( asset ) 
 + } 
 + } 
 + } 
 + } 
 + } 
 + 
 + private func prefetchImagesForAsset ( asset : PHAsset ) { 
 + let targetSize = sizeForAsset ( asset , scale : UIScreen . mainScreen ( ) . scale ) 
 + imageManager . startCachingImagesForAssets ( [ asset ] , targetSize : targetSize , contentMode : . AspectFill , options : requestOptions ) 
 + } 
 + 
 + private func requestImageForAsset ( asset : PHAsset , completion : ( image : UIImage ? ) - > ( ) ) { 
 + let targetSize = sizeForAsset ( asset , scale : UIScreen . mainScreen ( ) . scale ) 
 + requestOptions . synchronous = true 
 + 
 + / / Workaround because PHImageManager . requestImageForAsset doesn ' t work for burst images 
 + if asset . representsBurst { 
 + imageManager . requestImageDataForAsset ( asset , options : requestOptions ) { data , _ , _ , _ in 
 + let image = data . flatMap { UIImage ( data : $ 0 ) } 
 + completion ( image : image ) 
 + } 
 + } 
 + else { 
 + imageManager . requestImageForAsset ( asset , targetSize : targetSize , contentMode : . AspectFill , options : requestOptions ) { image , _ in 
 + completion ( image : image ) 
 + } 
 + } 
 + } 
 + 
 + private func sizeForAsset ( asset : PHAsset , scale : CGFloat = 1 ) - > CGSize { 
 + let proportion = CGFloat ( asset . pixelWidth ) / CGFloat ( asset . pixelHeight ) 
 + 
 + let imageHeight = maximumPreviewHeight - 2 * previewCollectionViewInset 
 + let imageWidth = floor ( proportion * imageHeight ) 
 + 
 + return CGSize ( width : imageWidth * scale , height : imageHeight * scale ) 
 } 
 
 / / / collection view delegate 
 
 func numberOfSectionsInCollectionView ( collectionView : UICollectionView ) - > Int { 
 - return 0 
 + return 1 
 } 
 
 func collectionView ( collectionView : UICollectionView , numberOfItemsInSection section : Int ) - > Int { 
 - return 0 
 + print ( " ASSSEEETS = = = \ ( self . assets . count ) " ) 
 + return self . assets . count 
 } 
 
 func collectionView ( collectionView : UICollectionView , cellForItemAtIndexPath indexPath : NSIndexPath ) - > UICollectionViewCell { 
 - return UICollectionViewCell ( ) 
 + 
 + let cell = self . collectionView . dequeueReusableCellWithReuseIdentifier ( " AAThumbnailCollectionCell " , forIndexPath : indexPath ) as ! AAThumbnailCollectionCell 
 + 
 + cell . backgroundColor = UIColor . whiteColor ( ) 
 + 
 + let asset = assets [ indexPath . row ] 
 + 
 + requestImageForAsset ( asset ) { image in 
 + cell . imgSelected . image = image 
 + } 
 + 
 + 
 + return cell 
 } 
 
 / / / 
 @ @ - 52 , 43 + 176 , 41 @ @ class AAThumbnailView : UIView , UICollectionViewDelegate , UICollectionViewDataSou 
 } 
 
 func collectionViewSetup ( ) { 
 - 
 - if ( self . collectionView = = nil ) { 
 - 
 - let flowLayout = UICollectionViewFlowLayout ( ) 
 - flowLayout . scrollDirection = . Horizontal 
 - flowLayout . minimumLineSpacing = 4 
 - flowLayout . sectionInset = UIEdgeInsetsMake ( 5 . 0 , 4 . 0 , 5 . 0 , 4 . 0 ) 
 - 
 - flowLayout . itemSize = CGSizeMake ( 105 , 180 ) 
 - 
 - self . collectionView = UICollectionView ( frame : self . bounds , collectionViewLayout : flowLayout ) 
 - self . collectionView . backgroundColor = UIColor ( red : 230 . 0 / 255 . 0 , green : 231 . 0 / 255 . 0 , blue : 234 . 0 / 255 . 0 , alpha : 1 . 0 ) 
 - self . collectionView . showsHorizontalScrollIndicator = false 
 - self . collectionView . delegate = self 
 - self . collectionView . dataSource = self 
 - 
 - self . collectionView . registerClass ( AAThumbnailCollectionCell . self , forCellWithReuseIdentifier : " AAThumbnailCollectionCell " ) 
 - 
 - / / AAASAssetManager . sharedInstance 
 - 
 - / * 
 - 
 - [ [ UUAssetManager sharedInstance ] getGroupList : ^ ( NSArray * obj ) { 
 - 
 - [ [ UUAssetManager sharedInstance ] getPhotoListOfGroupByIndex : [ UUAssetManager sharedInstance ] . currentGroupIndex result : ^ ( NSArray * obj ) { 
 - 
 - [ _ collectionView reloadData ] ; 
 - 
 - } ] ; 
 - } ] ; 
 
 - * / 
 - 
 - 
 - 
 - } 
 + let flowLayout = UICollectionViewFlowLayout ( ) 
 + flowLayout . scrollDirection = . Horizontal 
 + flowLayout . minimumLineSpacing = 4 
 + flowLayout . sectionInset = UIEdgeInsetsMake ( 5 . 0 , 4 . 0 , 5 . 0 , 4 . 0 ) 
 + 
 + flowLayout . itemSize = CGSizeMake ( 90 , 90 ) 
 + 
 + self . collectionView = UICollectionView ( frame : self . bounds , collectionViewLayout : flowLayout ) 
 + self . collectionView . backgroundColor = UIColor . clearColor ( ) 
 + self . collectionView . showsHorizontalScrollIndicator = false 
 + self . collectionView . delegate = self 
 + self . collectionView . dataSource = self 
 + self . collectionView . frame = CGRectMake ( 0 , 0 , screenWidth , 80 ) 
 + 
 + self . collectionView . registerClass ( AAThumbnailCollectionCell . self , forCellWithReuseIdentifier : " AAThumbnailCollectionCell " ) 
 + 
 + self . addSubview ( self . collectionView ) 
 
 } 
 
 + func imageByCroppingImage ( image : UIImage , toSize : CGSize ) - > UIImage { 
 + 
 + let refWidth = CGImageGetWidth ( image . CGImage ) 
 + let refHeight = CGImageGetHeight ( image . CGImage ) 
 + 
 + let x = CGFloat ( ( refWidth - Int ( toSize . width ) ) / 2 ) 
 + let y = CGFloat ( ( refHeight - Int ( toSize . height ) ) / 2 ) 
 + 
 + let cropRect = CGRectMake ( x , y , toSize . height , toSize . width ) 
 + let imageRef = CGImageCreateWithImageInRect ( image . CGImage , cropRect ) ! as CGImageRef 
 + 
 + let cropped = UIImage ( CGImage : imageRef , scale : 0 . 0 , orientation : UIImageOrientation . Up ) 
 + 
 + return cropped ; 
 + } 
 + 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 index 119c94c . . e34b500 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 @ @ - 88 , 11 + 88 , 6 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 self . rightButton . enabled = true 
 self . rightButton . layoutIfNeeded ( ) 
 
 - / / self . rightButton . setTitle ( AALocalized ( " ChatSend " ) , forState : UIControlState . Normal ) 
 - / / self . rightButton . setTitleColor ( appStyle . chatSendColor , forState : UIControlState . Normal ) 
 - / / self . rightButton . setTitleColor ( appStyle . chatSendDisabledColor , forState : UIControlState . Disabled ) 
 - / / self . rightButton . setImage ( nil , forState : UIControlState . Normal ) 
 - 
 / / 
 
 self . audioButton = UIButton ( type : UIButtonType . Custom ) 
 @ @ - 496 , 7 + 491 , 7 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 
 showActionSheet ( builder . items , cancelButton : " AlertCancel " , destructButton : nil , sourceView : self . leftButton , sourceRect : self . leftButton . bounds , tapClosure : builder . tapClosure ) 
 
 - / / self . actionSheet . showAnimation ( ) 
 + / / self . actionSheet . showAnimation ( ) 
 
 self . rightButton . layoutIfNeeded ( ) 
 } 
 @ @ - 615 , 7 + 610 , 9 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 func pickImage ( source : UIImagePickerControllerSourceType ) { 
 let pickerController = AAImagePickerController ( ) 
 pickerController . sourceType = source 
 - pickerController . mediaTypes = [ kUTTypeImage as String , kUTTypeMovie as String ] 
 + pickerController . mediaTypes = [ kUTTypeImage as String ] 
 + 
 + / / [ kUTTypeImage as String , kUTTypeMovie as String ] 
 
 / / / / Style controller bg 
 / / pickerController . view . backgroundColor = appStyle . vcBgColor
