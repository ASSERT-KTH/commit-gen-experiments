BLEU SCORE: 0.018897852222361986

TEST MSG: fix ( server : webrtc ) : pairing and service messages fixes
GENERATED MSG: Merge branch ' master ' of https : / / github . com / actorapp / actor - platform

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index 75e4bff . . cac5371 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 162 , 9 + 162 , 9 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with < nl > peerSettings : Option [ ApiPeerSettings ] , < nl > isJoined : Boolean < nl > ) { < nl > - def canPreConnect ( pairPeerSettings : Option [ ApiPeerSettings ] ) : Boolean = < nl > - isJoined | | < nl > - ( peerSettings . map ( _ . canPreConnect ) . isDefined & & pairPeerSettings . map ( _ . canPreConnect ) . isDefined ) < nl > + def canPreConnect ( pairDevice : Device ) : Boolean = < nl > + ( isJoined & & pairDevice . isJoined ) | | < nl > + ( peerSettings . flatMap ( _ . canPreConnect ) . contains ( true ) & & pairDevice . peerSettings . flatMap ( _ . canPreConnect ) . contains ( true ) ) < nl > } < nl > < nl > object Pair { < nl > @ @ - 248 , 9 + 248 , 11 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with < nl > if ( isConversationStarted ) ApiServiceMessage ( " Call ended " , Some ( ApiServiceExPhoneCall ( duration ) ) ) < nl > else ApiServiceMessage ( " Missed call " , Some ( ApiServiceExPhoneMissed ) ) < nl > < nl > + log . debug ( " Senfing smsg { } { } " , smsg , memberUserIds ) < nl > + < nl > ( for { < nl > _ ← if ( peer . ` type ` . isPrivate ) FutureExt . ftraverse ( memberUserIds . toSeq ) ( userId ⇒ dialogExt . sendMessage ( < nl > - peer = ApiPeer ( ApiPeerType . Private , callerUserId ) , < nl > + peer = ApiPeer ( ApiPeerType . Private , ( memberUserIds - userId ) . head ) , < nl > senderUserId = callerUserId , < nl > senderAuthId = None , < nl > senderAuthSid = 0 , < nl > @ @ - 274 , 6 + 276 , 7 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with < nl > < nl > def connect ( device : Device , pairDevice : Device ) : SessionId = { < nl > val sessionId = Random . nextLong ( ) < nl > + log . debug ( s " Sending NeedOffer to $ { device . deviceId } with $ { pairDevice . deviceId } " ) < nl > eventBusExt . post ( < nl > EventBus . InternalClient ( self ) , < nl > eventBusId , < nl > @ @ - 307 , 6 + 310 , 7 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with < nl > val sessionId = < nl > sessions . getOrElse ( Pair . buildUnsafe ( device . deviceId , pairDevice . deviceId ) , connect ( device , pairDevice ) ) < nl > < nl > + log . debug ( " Sending EnableConnection to { } and { } " , device . deviceId , pairDevice . deviceId ) < nl > eventBusExt . post ( < nl > EventBus . InternalClient ( self ) , < nl > eventBusId , < nl > @ @ - 366 , 11 + 370 , 15 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with < nl > case ebMessage : EventBus . Message ⇒ < nl > ApiWebRTCSignaling . parseFrom ( ebMessage . message ) . right foreach { < nl > case msg : ApiAdvertiseSelf ⇒ < nl > + log . debug ( " AdvertiseSelf { } " , msg ) < nl > for ( deviceId ← ebMessage . deviceId ) yield { < nl > val newDevice = Device ( deviceId , ebMessage . client , msg . peerSettings , isJoined = deviceId = = callerDeviceId ) < nl > + log . debug ( s " newDevice $ { newDevice . deviceId } $ { newDevice . peerSettings } " ) < nl > devices . values . view filterNot ( _ . deviceId = = newDevice . deviceId ) foreach { pairDevice ⇒ < nl > - if ( pairDevice . canPreConnect ( msg . peerSettings ) ) < nl > + if ( pairDevice . canPreConnect ( newDevice ) ) { < nl > + log . debug ( s " canPreConnect is true for device $ { pairDevice . deviceId } $ { pairDevice . peerSettings } " ) < nl > connect ( newDevice , pairDevice ) < nl > + } < nl > } < nl > putDevice ( deviceId , ebMessage . client , newDevice )
NEAREST DIFF (one line): diff - - git a / README . MD b / README . MD < nl > index 8c53a78 . . 061c271 100644 < nl > - - - a / README . MD < nl > + + + b / README . MD < nl > @ @ - 9 , 6 + 9 , 13 @ @ Actor Platform is good for improving enterprise communications , building a messa < nl > < nl > This repository contains all source code of platform whereby you can start your server or / and build your iOS , Android , Web , or Desktop applications . < nl > < nl > + # Currently available clients < nl > + * Android 4 . 0 . 3 + < nl > + * iPhone / iPad 7 . 0 + < nl > + * Web < nl > + < nl > + It is very easy to [ implement your own ] ( http : / / actor . readme . io / docs / apps ) . < nl > + < nl > # Installation < nl > < nl > Building mobile messaging application is a bit complex procedure and you need certain amount of preparations : have developer accounts in Google , Apple , have SSL certificates for your servers , integrate server with various services like SMS gate , push systems , etc . . .

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index 75e4bff . . cac5371 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 162 , 9 + 162 , 9 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with 
 peerSettings : Option [ ApiPeerSettings ] , 
 isJoined : Boolean 
 ) { 
 - def canPreConnect ( pairPeerSettings : Option [ ApiPeerSettings ] ) : Boolean = 
 - isJoined | | 
 - ( peerSettings . map ( _ . canPreConnect ) . isDefined & & pairPeerSettings . map ( _ . canPreConnect ) . isDefined ) 
 + def canPreConnect ( pairDevice : Device ) : Boolean = 
 + ( isJoined & & pairDevice . isJoined ) | | 
 + ( peerSettings . flatMap ( _ . canPreConnect ) . contains ( true ) & & pairDevice . peerSettings . flatMap ( _ . canPreConnect ) . contains ( true ) ) 
 } 
 
 object Pair { 
 @ @ - 248 , 9 + 248 , 11 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with 
 if ( isConversationStarted ) ApiServiceMessage ( " Call ended " , Some ( ApiServiceExPhoneCall ( duration ) ) ) 
 else ApiServiceMessage ( " Missed call " , Some ( ApiServiceExPhoneMissed ) ) 
 
 + log . debug ( " Senfing smsg { } { } " , smsg , memberUserIds ) 
 + 
 ( for { 
 _ ← if ( peer . ` type ` . isPrivate ) FutureExt . ftraverse ( memberUserIds . toSeq ) ( userId ⇒ dialogExt . sendMessage ( 
 - peer = ApiPeer ( ApiPeerType . Private , callerUserId ) , 
 + peer = ApiPeer ( ApiPeerType . Private , ( memberUserIds - userId ) . head ) , 
 senderUserId = callerUserId , 
 senderAuthId = None , 
 senderAuthSid = 0 , 
 @ @ - 274 , 6 + 276 , 7 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with 
 
 def connect ( device : Device , pairDevice : Device ) : SessionId = { 
 val sessionId = Random . nextLong ( ) 
 + log . debug ( s " Sending NeedOffer to $ { device . deviceId } with $ { pairDevice . deviceId } " ) 
 eventBusExt . post ( 
 EventBus . InternalClient ( self ) , 
 eventBusId , 
 @ @ - 307 , 6 + 310 , 7 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with 
 val sessionId = 
 sessions . getOrElse ( Pair . buildUnsafe ( device . deviceId , pairDevice . deviceId ) , connect ( device , pairDevice ) ) 
 
 + log . debug ( " Sending EnableConnection to { } and { } " , device . deviceId , pairDevice . deviceId ) 
 eventBusExt . post ( 
 EventBus . InternalClient ( self ) , 
 eventBusId , 
 @ @ - 366 , 11 + 370 , 15 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging with 
 case ebMessage : EventBus . Message ⇒ 
 ApiWebRTCSignaling . parseFrom ( ebMessage . message ) . right foreach { 
 case msg : ApiAdvertiseSelf ⇒ 
 + log . debug ( " AdvertiseSelf { } " , msg ) 
 for ( deviceId ← ebMessage . deviceId ) yield { 
 val newDevice = Device ( deviceId , ebMessage . client , msg . peerSettings , isJoined = deviceId = = callerDeviceId ) 
 + log . debug ( s " newDevice $ { newDevice . deviceId } $ { newDevice . peerSettings } " ) 
 devices . values . view filterNot ( _ . deviceId = = newDevice . deviceId ) foreach { pairDevice ⇒ 
 - if ( pairDevice . canPreConnect ( msg . peerSettings ) ) 
 + if ( pairDevice . canPreConnect ( newDevice ) ) { 
 + log . debug ( s " canPreConnect is true for device $ { pairDevice . deviceId } $ { pairDevice . peerSettings } " ) 
 connect ( newDevice , pairDevice ) 
 + } 
 } 
 putDevice ( deviceId , ebMessage . client , newDevice )

NEAREST DIFF:
diff - - git a / README . MD b / README . MD 
 index 8c53a78 . . 061c271 100644 
 - - - a / README . MD 
 + + + b / README . MD 
 @ @ - 9 , 6 + 9 , 13 @ @ Actor Platform is good for improving enterprise communications , building a messa 
 
 This repository contains all source code of platform whereby you can start your server or / and build your iOS , Android , Web , or Desktop applications . 
 
 + # Currently available clients 
 + * Android 4 . 0 . 3 + 
 + * iPhone / iPad 7 . 0 + 
 + * Web 
 + 
 + It is very easy to [ implement your own ] ( http : / / actor . readme . io / docs / apps ) . 
 + 
 # Installation 
 
 Building mobile messaging application is a bit complex procedure and you need certain amount of preparations : have developer accounts in Google , Apple , have SSL certificates for your servers , integrate server with various services like SMS gate , push systems , etc . . .
