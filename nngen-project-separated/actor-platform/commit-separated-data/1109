BLEU SCORE: 0.06542540885608186

TEST MSG: feat ( core ) : Main keys uploading
GENERATED MSG: wip ( SDK ) : Adding dialog desc processing and Grouped Dialogs model

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / rpc / RequestCreateNewKeyGroup . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / rpc / RequestCreateNewKeyGroup . java < nl > index 47cf250 . . 933c44f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / rpc / RequestCreateNewKeyGroup . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / rpc / RequestCreateNewKeyGroup . java < nl > @ @ - 23 , 13 + 23 , 13 @ @ public class RequestCreateNewKeyGroup extends Request < ResponseCreateNewKeyGroup > < nl > } < nl > < nl > private ApiEncryptionKey identityKey ; < nl > - private int encryptionVersion ; < nl > + private List < String > supportedEncryptions ; < nl > private List < ApiEncryptionKey > keys ; < nl > private List < ApiEncryptionKeySignature > signatures ; < nl > < nl > - public RequestCreateNewKeyGroup ( @ NotNull ApiEncryptionKey identityKey , int encryptionVersion , @ NotNull List < ApiEncryptionKey > keys , @ NotNull List < ApiEncryptionKeySignature > signatures ) { < nl > + public RequestCreateNewKeyGroup ( @ NotNull ApiEncryptionKey identityKey , @ NotNull List < String > supportedEncryptions , @ NotNull List < ApiEncryptionKey > keys , @ NotNull List < ApiEncryptionKeySignature > signatures ) { < nl > this . identityKey = identityKey ; < nl > - this . encryptionVersion = encryptionVersion ; < nl > + this . supportedEncryptions = supportedEncryptions ; < nl > this . keys = keys ; < nl > this . signatures = signatures ; < nl > } < nl > @ @ - 43 , 8 + 43 , 9 @ @ public class RequestCreateNewKeyGroup extends Request < ResponseCreateNewKeyGroup > < nl > return this . identityKey ; < nl > } < nl > < nl > - public int getEncryptionVersion ( ) { < nl > - return this . encryptionVersion ; < nl > + @ NotNull < nl > + public List < String > getSupportedEncryptions ( ) { < nl > + return this . supportedEncryptions ; < nl > } < nl > < nl > @ NotNull < nl > @ @ - 60 , 7 + 61 , 7 @ @ public class RequestCreateNewKeyGroup extends Request < ResponseCreateNewKeyGroup > < nl > @ Override < nl > public void parse ( BserValues values ) throws IOException { < nl > this . identityKey = values . getObj ( 1 , new ApiEncryptionKey ( ) ) ; < nl > - this . encryptionVersion = values . getInt ( 2 ) ; < nl > + this . supportedEncryptions = values . getRepeatedString ( 2 ) ; < nl > List < ApiEncryptionKey > _ keys = new ArrayList < ApiEncryptionKey > ( ) ; < nl > for ( int i = 0 ; i < values . getRepeatedCount ( 3 ) ; i + + ) { < nl > _ keys . add ( new ApiEncryptionKey ( ) ) ; < nl > @ @ - 79 , 7 + 80 , 7 @ @ public class RequestCreateNewKeyGroup extends Request < ResponseCreateNewKeyGroup > < nl > throw new IOException ( ) ; < nl > } < nl > writer . writeObject ( 1 , this . identityKey ) ; < nl > - writer . writeInt ( 2 , this . encryptionVersion ) ; < nl > + writer . writeRepeatedString ( 2 , this . supportedEncryptions ) ; < nl > writer . writeRepeatedObj ( 3 , this . keys ) ; < nl > writer . writeRepeatedObj ( 4 , this . signatures ) ; < nl > } < nl > @ @ - 88 , 6 + 89 , 7 @ @ public class RequestCreateNewKeyGroup extends Request < ResponseCreateNewKeyGroup > < nl > public String toString ( ) { < nl > String res = " rpc CreateNewKeyGroup { " ; < nl > res + = " identityKey = " + this . identityKey ; < nl > + res + = " , supportedEncryptions = " + this . supportedEncryptions ; < nl > res + = " , keys = " + this . keys ; < nl > res + = " , signatures = " + this . signatures ; < nl > res + = " } " ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java < nl > index ea0c44b . . d79491a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java < nl > @ @ - 1 , 13 + 1 , 21 @ @ < nl > package im . actor . core . modules . internal . encryption ; < nl > < nl > import java . io . IOException ; < nl > + import java . lang . reflect . Array ; < nl > import java . util . ArrayList ; < nl > < nl > + import im . actor . core . api . ApiEncryptionKey ; < nl > + import im . actor . core . api . ApiEncryptionKeySignature ; < nl > + import im . actor . core . api . rpc . RequestCreateNewKeyGroup ; < nl > + import im . actor . core . api . rpc . ResponseCreateNewKeyGroup ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . internal . encryption . entity . EncryptionKey ; < nl > import im . actor . core . modules . internal . encryption . entity . PrivateKeyStorage ; < nl > import im . actor . core . modules . utils . ModuleActor ; < nl > + import im . actor . core . network . RpcCallback ; < nl > + import im . actor . core . network . RpcException ; < nl > import im . actor . runtime . Crypto ; < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . crypto . Curve25519 ; < nl > import im . actor . sdk . util . Randoms ; < nl > < nl > @ @ - 15 , 6 + 23 , 8 @ @ public class KeyManagerActor extends ModuleActor { < nl > < nl > private static final String PRIVATE _ KEYS = " private _ keys " ; < nl > < nl > + private static final String TAG = " KeyManagerActor " ; < nl > + < nl > private PrivateKeyStorage privateKeyStorage ; < nl > < nl > public KeyManagerActor ( ModuleContext context ) { < nl > @ @ - 33 , 6 + 43 , 8 @ @ public class KeyManagerActor extends ModuleActor { < nl > } < nl > < nl > if ( privateKeyStorage = = null ) { < nl > + Log . d ( TAG , " Generating new encryption keys . . . " ) ; < nl > + < nl > EncryptionKey identityKey = new EncryptionKey ( Randoms . randomId ( ) , < nl > Curve25519 . keyGen ( Crypto . randomBytes ( 64 ) ) ) ; < nl > ArrayList < EncryptionKey > keyPairs = new ArrayList < EncryptionKey > ( ) ; < nl > @ @ - 40 , 7 + 52 , 71 @ @ public class KeyManagerActor extends ModuleActor { < nl > Curve25519 . keyGen ( Crypto . randomBytes ( 64 ) ) ) ) ; < nl > < nl > privateKeyStorage = new PrivateKeyStorage ( identityKey , keyPairs , 0 ) ; < nl > - preferences ( ) . putBytes ( PRIVATE _ KEYS , data ) ; < nl > + preferences ( ) . putBytes ( PRIVATE _ KEYS , privateKeyStorage . toByteArray ( ) ) ; < nl > } < nl > + < nl > + if ( privateKeyStorage . getKeyGroupId ( ) = = 0 ) { < nl > + Log . d ( TAG , " Uploading main encryption keys . . . " ) ; < nl > + < nl > + EncryptionKey identityKey = privateKeyStorage . getIdentityKey ( ) ; < nl > + ApiEncryptionKey apiEncryptionKey = < nl > + new ApiEncryptionKey ( < nl > + identityKey . getKeyId ( ) , < nl > + identityKey . getKeyAlg ( ) , < nl > + identityKey . getPublicKey ( ) , < nl > + null ) ; < nl > + < nl > + ArrayList < String > encryption = new ArrayList < String > ( ) ; < nl > + encryption . add ( " curve25519 " ) ; < nl > + encryption . add ( " Ed25519 " ) ; < nl > + encryption . add ( " kuznechik128 " ) ; < nl > + encryption . add ( " streebog256 " ) ; < nl > + encryption . add ( " sha256 " ) ; < nl > + encryption . add ( " sha512 " ) ; < nl > + encryption . add ( " aes128 " ) ; < nl > + < nl > + ArrayList < ApiEncryptionKey > keys = new ArrayList < ApiEncryptionKey > ( ) ; < nl > + ArrayList < ApiEncryptionKeySignature > keySignatures = new ArrayList < ApiEncryptionKeySignature > ( ) ; < nl > + for ( EncryptionKey key : privateKeyStorage . getKeys ( ) ) { < nl > + ApiEncryptionKey apiKey = < nl > + new ApiEncryptionKey ( < nl > + key . getKeyId ( ) , < nl > + key . getKeyAlg ( ) , < nl > + key . getPublicKey ( ) , < nl > + null ) ; < nl > + keys . add ( apiKey ) ; < nl > + < nl > + < nl > + byte [ ] signature = Curve25519 . calculateSignature ( Crypto . randomBytes ( 64 ) , identityKey . getPrivateKey ( ) , apiKey . toByteArray ( ) ) ; < nl > + keySignatures . add ( < nl > + new ApiEncryptionKeySignature ( < nl > + key . getKeyId ( ) , < nl > + " Ed25519 " , < nl > + signature ) ) ; < nl > + } < nl > + < nl > + request ( new RequestCreateNewKeyGroup ( apiEncryptionKey , encryption , keys , keySignatures ) , new RpcCallback < ResponseCreateNewKeyGroup > ( ) { < nl > + @ Override < nl > + public void onResult ( ResponseCreateNewKeyGroup response ) { < nl > + privateKeyStorage = privateKeyStorage . markUploaded ( response . getKeyGroupId ( ) ) ; < nl > + preferences ( ) . putBytes ( PRIVATE _ KEYS , privateKeyStorage . toByteArray ( ) ) ; < nl > + onMainKeysReady ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( RpcException e ) { < nl > + Log . w ( TAG , " Keys upload error " ) ; < nl > + Log . e ( TAG , e ) ; < nl > + < nl > + / / Just ignore < nl > + } < nl > + } ) ; < nl > + } else { < nl > + onMainKeysReady ( ) ; < nl > + } < nl > + } < nl > + < nl > + private void onMainKeysReady ( ) { < nl > + Log . d ( TAG , " Main Keys are ready " ) ; < nl > } < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java < nl > deleted file mode 100644 < nl > index bb8078b . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java < nl > + + + / dev / null < nl > @ @ - 1 , 80 + 0 , 0 @ @ < nl > - package im . actor . core . entity ; < nl > - < nl > - import com . google . j2objc . annotations . Property ; < nl > - < nl > - import java . io . IOException ; < nl > - < nl > - import im . actor . runtime . bser . BserObject ; < nl > - import im . actor . runtime . bser . BserValues ; < nl > - import im . actor . runtime . bser . BserWriter ; < nl > - import im . actor . runtime . storage . KeyValueItem ; < nl > - < nl > - public class DialogDesc extends BserObject implements KeyValueItem { < nl > - < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private Peer peer ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private String title ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private Avatar avatar ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private boolean isUnread ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private int counter ; < nl > - < nl > - public DialogDesc ( Peer peer , String title , Avatar avatar , boolean isUnread , int counter ) { < nl > - this . peer = peer ; < nl > - this . title = title ; < nl > - this . avatar = avatar ; < nl > - this . isUnread = isUnread ; < nl > - this . counter = counter ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public String getTitle ( ) { < nl > - return title ; < nl > - } < nl > - < nl > - public Avatar getAvatar ( ) { < nl > - return avatar ; < nl > - } < nl > - < nl > - public int getCounter ( ) { < nl > - return counter ; < nl > - } < nl > - < nl > - public boolean isUnread ( ) { < nl > - return isUnread ; < nl > - } < nl > - < nl > - @ Override < nl > - public void parse ( BserValues values ) throws IOException { < nl > - peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; < nl > - title = values . getString ( 2 ) ; < nl > - byte [ ] av = values . getBytes ( 3 ) ; < nl > - if ( av ! = null ) { < nl > - avatar = new Avatar ( av ) ; < nl > - } < nl > - counter = values . getInt ( 4 ) ; < nl > - isUnread = values . getBool ( 5 ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void serialize ( BserWriter writer ) throws IOException { < nl > - writer . writeObject ( 1 , peer ) ; < nl > - writer . writeString ( 2 , title ) ; < nl > - if ( avatar ! = null ) { < nl > - writer . writeObject ( 3 , avatar ) ; < nl > - } < nl > - writer . writeInt ( 4 , counter ) ; < nl > - writer . writeBool ( 5 , isUnread ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public long getEngineId ( ) { < nl > - return peer . getUnuqueId ( ) ; < nl > - } < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java < nl > new file mode 100644 < nl > index 0000000 . . d0c5624 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java < nl > @ @ - 0 , 0 + 1 , 69 @ @ < nl > + package im . actor . core . entity ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . bser . BserCreator ; < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . storage . KeyValueItem ; < nl > + < nl > + public class DialogSpec extends BserObject implements KeyValueItem { < nl > + < nl > + public static BserCreator < DialogSpec > CREATOR = new BserCreator < DialogSpec > ( ) { < nl > + @ Override < nl > + public DialogSpec createInstance ( ) { < nl > + return new DialogSpec ( ) ; < nl > + } < nl > + } ; < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private boolean isUnread ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private int counter ; < nl > + < nl > + public DialogSpec ( Peer peer , boolean isUnread , int counter ) { < nl > + this . peer = peer ; < nl > + this . isUnread = isUnread ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + private DialogSpec ( ) { < nl > + < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + < nl > + public boolean isUnread ( ) { < nl > + return isUnread ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; < nl > + counter = values . getInt ( 2 ) ; < nl > + isUnread = values . getBool ( 3 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + writer . writeObject ( 1 , peer ) ; < nl > + writer . writeInt ( 2 , counter ) ; < nl > + writer . writeBool ( 3 , isUnread ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public long getEngineId ( ) { < nl > + return peer . getUnuqueId ( ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > index 28142c9 . . baf3eaf 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . runtime . storage . PreferencesStorage ; < nl > public abstract class AbsModule { < nl > < nl > public static final String STORAGE _ DIALOGS = " dialogs " ; < nl > + public static final String STORAGE _ DIALOGS _ DESC = " dialogs _ desc " ; < nl > public static final String STORAGE _ USERS = " users " ; < nl > public static final String STORAGE _ GROUPS = " groups " ; < nl > public static final String STORAGE _ DOWNLOADS = " downloads " ; < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 30e0d85 . . 88416ee 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . core . api . rpc . ResponseSeq ; < nl > import im . actor . core . api . updates . UpdateChatClear ; < nl > import im . actor . core . api . updates . UpdateChatDelete ; < nl > import im . actor . core . entity . Dialog ; < nl > + import im . actor . core . entity . DialogSpec ; < nl > import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . Peer ; < nl > @ @ - 48 , 6 + 49 , 7 @ @ import im . actor . core . network . RpcInternalException ; < nl > import im . actor . core . viewmodel . Command ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . core . viewmodel . DialogGroupsVM ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > @ @ - 56 , 6 + 58 , 8 @ @ import im . actor . runtime . actors . tools . BounceFilterActor ; < nl > import im . actor . runtime . eventbus . BusSubscriber ; < nl > import im . actor . runtime . eventbus . Event ; < nl > import im . actor . runtime . files . FileSystemReference ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > + import im . actor . runtime . storage . KeyValueEngine ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > import im . actor . runtime . storage . SyncKeyValue ; < nl > < nl > @ @ - 83 , 11 + 87 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > private final SyncKeyValue cursorStorage ; < nl > < nl > + private final MVVMCollection < DialogSpec , DialogSpecVM > dialogDescKeyValue ; < nl > + < nl > private final DialogGroupsVM dialogGroups = new DialogGroupsVM ( ) ; < nl > < nl > public MessagesModule ( final ModuleContext context ) { < nl > super ( context ) ; < nl > < nl > + this . dialogDescKeyValue = Storage . createKeyValue ( STORAGE _ DIALOGS _ DESC , DialogSpecVM . CREATOR , DialogSpec . CREATOR ) ; < nl > this . cursorStorage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ CURSOR ) ) ; < nl > this . dialogs = Storage . createList ( STORAGE _ DIALOGS , Dialog . CREATOR ) ; < nl > } < nl > @ @ - 157 , 6 + 164 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > return dialogGroups ; < nl > } < nl > < nl > + public MVVMCollection < DialogSpec , DialogSpecVM > getDialogDescKeyValue ( ) { < nl > + return dialogDescKeyValue ; < nl > + } < nl > + < nl > public ActorRef getSendMessageActor ( ) { < nl > return sendMessageActor ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > index f0fdf00 . . b881551 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > @ @ - 1 , 20 + 1 , 26 @ @ < nl > package im . actor . core . modules . internal . messages ; < nl > < nl > import java . util . ArrayList ; < nl > - import java . util . HashMap ; < nl > < nl > import im . actor . core . entity . Avatar ; < nl > - import im . actor . core . entity . DialogDesc ; < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > + import im . actor . core . entity . User ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . internal . messages . entity . GroupedStorage ; < nl > import im . actor . core . modules . utils . ModuleActor ; < nl > import im . actor . core . viewmodel . DialogGroup ; < nl > + import im . actor . core . viewmodel . DialogSmall ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > < nl > public class GroupedDialogsActor extends ModuleActor { < nl > < nl > - private PeerGroup groups = new PeerGroup ( " groups " , " Groups " ) ; < nl > - private PeerGroup privates = new PeerGroup ( " private " , " Private " ) ; < nl > + private GroupedStorage storage ; < nl > + private MVVMCollection < DialogSpec , DialogSpecVM > specs ; < nl > < nl > public GroupedDialogsActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 23 , 6 + 29 , 8 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > @ Override < nl > public void preStart ( ) { < nl > super . preStart ( ) ; < nl > + specs = context ( ) . getMessagesModule ( ) . getDialogDescKeyValue ( ) ; < nl > + storage = new GroupedStorage ( ) ; < nl > } < nl > < nl > private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { < nl > @ @ - 31 , 38 + 39 , 82 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > < nl > private void onNewMessage ( Peer peer , long sortDate , int counter ) { < nl > < nl > - PeerGroup peerGroup ; < nl > - if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > - peerGroup = groups ; < nl > - } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > - peerGroup = privates ; < nl > - } else { < nl > - return ; < nl > - } < nl > + / / Updating dialog spec < nl > + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; < nl > + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; < nl > < nl > boolean found = false ; < nl > - for ( PeerDesc d : peerGroup . getPeers ( ) ) { < nl > - if ( d . getPeer ( ) . equals ( peer ) ) { < nl > - d . setCounter ( counter ) ; < nl > + for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > + found = true ; < nl > + break ; < nl > + } < nl > + } < nl > + for ( Peer p : storage . getGroupPeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > found = true ; < nl > + break ; < nl > } < nl > } < nl > < nl > if ( ! found ) { < nl > - peerGroup . getPeers ( ) . add ( new PeerDesc ( peer , counter ) ) ; < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + storage . getPrivatePeers ( ) . add ( peer ) ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + storage . getGroupPeers ( ) . add ( peer ) ; < nl > + } else { < nl > + return ; < nl > + } < nl > } < nl > < nl > - ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; < nl > - ArrayList < DialogDesc > groupDescs = new ArrayList < DialogDesc > ( ) ; < nl > - for ( PeerDesc d : peerGroup . getPeers ( ) ) { < nl > - groupDescs . add ( new DialogDesc ( d . getPeer ( ) , " GRPOUP # " + d . getPeer ( ) . getPeerId ( ) , < nl > - null , false , d . counter ) ) ; < nl > + notifyVM ( ) ; < nl > + saveStorage ( ) ; < nl > + } < nl > + < nl > + private void notifyVM ( ) { < nl > + ArrayListDialogSmall groupSpecs = new ArrayListDialogSmall ( ) ; < nl > + for ( Peer p : storage . getGroupPeers ( ) ) { < nl > + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; < nl > + if ( p . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = getGroup ( p . getPeerId ( ) ) ; < nl > + groupSpecs . add ( new DialogSmall ( p , < nl > + group . getTitle ( ) , group . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = getUser ( p . getPeerId ( ) ) ; < nl > + groupSpecs . add ( new DialogSmall ( p , < nl > + user . getName ( ) , user . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } < nl > + } < nl > + < nl > + ArrayListDialogSmall privateSpecs = new ArrayListDialogSmall ( ) ; < nl > + for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; < nl > + if ( p . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = getGroup ( p . getPeerId ( ) ) ; < nl > + privateSpecs . add ( new DialogSmall ( p , < nl > + group . getTitle ( ) , group . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = getUser ( p . getPeerId ( ) ) ; < nl > + privateSpecs . add ( new DialogSmall ( p , < nl > + user . getName ( ) , user . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } < nl > } < nl > - groups . add ( new DialogGroup ( " Groups " , " group " , groupDescs ) ) ; < nl > + < nl > + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; < nl > + groups . add ( new DialogGroup ( " Groups " , " groups " , groupSpecs ) ) ; < nl > + groups . add ( new DialogGroup ( " Private " , " private " , privateSpecs ) ) ; < nl > < nl > context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; < nl > } < nl > < nl > + private void saveStorage ( ) { < nl > + / / TODO : Implement < nl > + } < nl > + < nl > @ Override < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof PeerInformationChanged ) { < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java < nl > new file mode 100644 < nl > index 0000000 . . 3e7340c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java < nl > @ @ - 0 , 0 + 1 , 57 @ @ < nl > + package im . actor . core . modules . internal . messages . entity ; < nl > + < nl > + import java . io . IOException ; < nl > + import java . util . ArrayList ; < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > + < nl > + public class GroupedStorage extends BserObject { < nl > + < nl > + private ArrayList < Peer > groupPeers = new ArrayList < Peer > ( ) ; < nl > + private ArrayList < Peer > privatePeers = new ArrayList < Peer > ( ) ; < nl > + < nl > + public GroupedStorage ( ) { < nl > + } < nl > + < nl > + public GroupedStorage ( byte [ ] data ) throws IOException { < nl > + super . load ( data ) ; < nl > + } < nl > + < nl > + public ArrayList < Peer > getGroupPeers ( ) { < nl > + return groupPeers ; < nl > + } < nl > + < nl > + public ArrayList < Peer > getPrivatePeers ( ) { < nl > + return privatePeers ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + List < byte [ ] > rawPrivatePeers = values . getRepeatedBytes ( 1 ) ; < nl > + groupPeers . clear ( ) ; < nl > + for ( byte [ ] b : rawPrivatePeers ) { < nl > + groupPeers . add ( Peer . fromBytes ( b ) ) ; < nl > + } < nl > + List < byte [ ] > rawGroupPeers = values . getRepeatedBytes ( 2 ) ; < nl > + for ( byte [ ] b : rawGroupPeers ) { < nl > + privatePeers . add ( Peer . fromBytes ( b ) ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + for ( Peer peer : privatePeers ) { < nl > + writer . writeObject ( 1 , peer ) ; < nl > + } < nl > + for ( Peer peer : groupPeers ) { < nl > + writer . writeObject ( 2 , peer ) ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > index ae47f02 . . 47935a1 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > @ @ - 1 , 16 + 1 , 19 @ @ < nl > package im . actor . core . viewmodel ; < nl > < nl > - import java . util . ArrayList ; < nl > + import com . google . j2objc . annotations . Property ; < nl > < nl > - import im . actor . core . entity . DialogDesc ; < nl > + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; < nl > < nl > public class DialogGroup { < nl > < nl > + @ Property ( " readonly , nonatomic " ) < nl > private String title ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > private String key ; < nl > - private ArrayList < DialogDesc > dialogs ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private ArrayListDialogSmall dialogs ; < nl > < nl > - public DialogGroup ( String title , String key , ArrayList < DialogDesc > dialogs ) { < nl > + public DialogGroup ( String title , String key , ArrayListDialogSmall dialogs ) { < nl > this . title = title ; < nl > this . key = key ; < nl > this . dialogs = dialogs ; < nl > @ @ - 24 , 7 + 27 , 7 @ @ public class DialogGroup { < nl > return key ; < nl > } < nl > < nl > - public ArrayList < DialogDesc > getDialogs ( ) { < nl > + public ArrayListDialogSmall getDialogs ( ) { < nl > return dialogs ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java < nl > new file mode 100644 < nl > index 0000000 . . b77e893 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java < nl > @ @ - 0 , 0 + 1 , 41 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import im . actor . core . entity . Avatar ; < nl > + import im . actor . core . entity . Peer ; < nl > + < nl > + public class DialogSmall { < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final String title ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Avatar avatar ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final int counter ; < nl > + < nl > + public DialogSmall ( Peer peer , String title , Avatar avatar , int counter ) { < nl > + this . peer = peer ; < nl > + this . title = title ; < nl > + this . avatar = avatar ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public Avatar getAvatar ( ) { < nl > + return avatar ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java < nl > new file mode 100644 < nl > index 0000000 . . 52a266d < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java < nl > @ @ - 0 , 0 + 1 , 53 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . viewmodel . generics . BooleanValueModel ; < nl > + import im . actor . core . viewmodel . generics . IntValueModel ; < nl > + import im . actor . runtime . mvvm . BaseValueModel ; < nl > + import im . actor . runtime . mvvm . ValueModelCreator ; < nl > + < nl > + public class DialogSpecVM extends BaseValueModel < DialogSpec > { < nl > + < nl > + public static ValueModelCreator < DialogSpec , DialogSpecVM > CREATOR = new ValueModelCreator < DialogSpec , DialogSpecVM > ( ) { < nl > + @ Override < nl > + public DialogSpecVM create ( DialogSpec baseValue ) { < nl > + return new DialogSpecVM ( baseValue ) ; < nl > + } < nl > + } ; < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private IntValueModel counter ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private BooleanValueModel isUnread ; < nl > + < nl > + public DialogSpecVM ( DialogSpec rawObj ) { < nl > + super ( rawObj ) ; < nl > + < nl > + this . peer = rawObj . getPeer ( ) ; < nl > + this . counter = new IntValueModel ( " dialogs . desc . counter " , rawObj . getCounter ( ) ) ; < nl > + this . isUnread = new BooleanValueModel ( " dialogs . desc . unread " , rawObj . isUnread ( ) ) ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public IntValueModel getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + < nl > + public BooleanValueModel getIsUnread ( ) { < nl > + return isUnread ; < nl > + } < nl > + < nl > + @ Override < nl > + protected void updateValues ( DialogSpec rawObj ) { < nl > + counter . change ( rawObj . getCounter ( ) ) ; < nl > + isUnread . change ( rawObj . isUnread ( ) ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java < nl > new file mode 100644 < nl > index 0000000 . . 9727306 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java < nl > @ @ - 0 , 0 + 1 , 13 @ @ < nl > + package im . actor . core . viewmodel . generics ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . viewmodel . DialogSmall ; < nl > + < nl > + public class ArrayListDialogSmall extends ArrayList < DialogSmall > { < nl > + < nl > + @ Override < nl > + public DialogSmall get ( int index ) { < nl > + return super . get ( index ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > index 32554b4 . . f496742 100644 < nl > - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > @ @ - 6 , 7 + 6 , 7 @ @ import UIKit < nl > < nl > class AADebugController : AAContentTableController { < nl > < nl > - var debugData : AAManagedArrayRows < ACDialogDesc , AACommonCell > ! < nl > + var debugData : AAManagedArrayRows < ACDialogSmall , AACommonCell > ! < nl > < nl > init ( ) { < nl > super . init ( style : . Plain ) < nl > @ @ - 18 , 9 + 18 , 10 @ @ class AADebugController : AAContentTableController { < nl > < nl > override func tableDidLoad ( ) { < nl > section { ( s ) - > ( ) in < nl > - self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogDesc , AACommonCell > ) - > ( ) in < nl > - r . bindData = { ( cell : AACommonCell , data : ACDialogDesc ) - > ( ) in < nl > - cell . setContent ( data . title ) < nl > + self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogSmall , AACommonCell > ) - > ( ) in < nl > + r . bindData = { ( cell : AACommonCell , data : ACDialogSmall ) - > ( ) in < nl > + cell . setContent ( " \ ( data . counter ) - \ ( data . title ) " ) < nl > + cell . style = . Normal < nl > } < nl > } < nl > } < nl > @ @ - 30 , 11 + 31 , 11 @ @ class AADebugController : AAContentTableController { < nl > binder . bind ( ActorSDK . sharedActor ( ) . messenger . getDialogGroupsVM ( ) . getGroupsValueModel ( ) ) { ( value : JavaUtilArrayList ? ) - > ( ) in < nl > < nl > if value ! = nil { < nl > - var items = [ ACDialogDesc ] ( ) < nl > + var items = [ ACDialogSmall ] ( ) < nl > < nl > for i in 0 . . < value ! . size ( ) { < nl > - for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . getDialogs ( ) { < nl > - items . append ( j as ! ACDialogDesc ) < nl > + for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . dialogs { < nl > + items . append ( j as ! ACDialogSmall ) < nl > } < nl > } < nl > self . debugData . data = items

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / rpc / RequestCreateNewKeyGroup . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / rpc / RequestCreateNewKeyGroup . java 
 index 47cf250 . . 933c44f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / rpc / RequestCreateNewKeyGroup . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / api / rpc / RequestCreateNewKeyGroup . java 
 @ @ - 23 , 13 + 23 , 13 @ @ public class RequestCreateNewKeyGroup extends Request < ResponseCreateNewKeyGroup > 
 } 
 
 private ApiEncryptionKey identityKey ; 
 - private int encryptionVersion ; 
 + private List < String > supportedEncryptions ; 
 private List < ApiEncryptionKey > keys ; 
 private List < ApiEncryptionKeySignature > signatures ; 
 
 - public RequestCreateNewKeyGroup ( @ NotNull ApiEncryptionKey identityKey , int encryptionVersion , @ NotNull List < ApiEncryptionKey > keys , @ NotNull List < ApiEncryptionKeySignature > signatures ) { 
 + public RequestCreateNewKeyGroup ( @ NotNull ApiEncryptionKey identityKey , @ NotNull List < String > supportedEncryptions , @ NotNull List < ApiEncryptionKey > keys , @ NotNull List < ApiEncryptionKeySignature > signatures ) { 
 this . identityKey = identityKey ; 
 - this . encryptionVersion = encryptionVersion ; 
 + this . supportedEncryptions = supportedEncryptions ; 
 this . keys = keys ; 
 this . signatures = signatures ; 
 } 
 @ @ - 43 , 8 + 43 , 9 @ @ public class RequestCreateNewKeyGroup extends Request < ResponseCreateNewKeyGroup > 
 return this . identityKey ; 
 } 
 
 - public int getEncryptionVersion ( ) { 
 - return this . encryptionVersion ; 
 + @ NotNull 
 + public List < String > getSupportedEncryptions ( ) { 
 + return this . supportedEncryptions ; 
 } 
 
 @ NotNull 
 @ @ - 60 , 7 + 61 , 7 @ @ public class RequestCreateNewKeyGroup extends Request < ResponseCreateNewKeyGroup > 
 @ Override 
 public void parse ( BserValues values ) throws IOException { 
 this . identityKey = values . getObj ( 1 , new ApiEncryptionKey ( ) ) ; 
 - this . encryptionVersion = values . getInt ( 2 ) ; 
 + this . supportedEncryptions = values . getRepeatedString ( 2 ) ; 
 List < ApiEncryptionKey > _ keys = new ArrayList < ApiEncryptionKey > ( ) ; 
 for ( int i = 0 ; i < values . getRepeatedCount ( 3 ) ; i + + ) { 
 _ keys . add ( new ApiEncryptionKey ( ) ) ; 
 @ @ - 79 , 7 + 80 , 7 @ @ public class RequestCreateNewKeyGroup extends Request < ResponseCreateNewKeyGroup > 
 throw new IOException ( ) ; 
 } 
 writer . writeObject ( 1 , this . identityKey ) ; 
 - writer . writeInt ( 2 , this . encryptionVersion ) ; 
 + writer . writeRepeatedString ( 2 , this . supportedEncryptions ) ; 
 writer . writeRepeatedObj ( 3 , this . keys ) ; 
 writer . writeRepeatedObj ( 4 , this . signatures ) ; 
 } 
 @ @ - 88 , 6 + 89 , 7 @ @ public class RequestCreateNewKeyGroup extends Request < ResponseCreateNewKeyGroup > 
 public String toString ( ) { 
 String res = " rpc CreateNewKeyGroup { " ; 
 res + = " identityKey = " + this . identityKey ; 
 + res + = " , supportedEncryptions = " + this . supportedEncryptions ; 
 res + = " , keys = " + this . keys ; 
 res + = " , signatures = " + this . signatures ; 
 res + = " } " ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java 
 index ea0c44b . . d79491a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / encryption / KeyManagerActor . java 
 @ @ - 1 , 13 + 1 , 21 @ @ 
 package im . actor . core . modules . internal . encryption ; 
 
 import java . io . IOException ; 
 + import java . lang . reflect . Array ; 
 import java . util . ArrayList ; 
 
 + import im . actor . core . api . ApiEncryptionKey ; 
 + import im . actor . core . api . ApiEncryptionKeySignature ; 
 + import im . actor . core . api . rpc . RequestCreateNewKeyGroup ; 
 + import im . actor . core . api . rpc . ResponseCreateNewKeyGroup ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . internal . encryption . entity . EncryptionKey ; 
 import im . actor . core . modules . internal . encryption . entity . PrivateKeyStorage ; 
 import im . actor . core . modules . utils . ModuleActor ; 
 + import im . actor . core . network . RpcCallback ; 
 + import im . actor . core . network . RpcException ; 
 import im . actor . runtime . Crypto ; 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . crypto . Curve25519 ; 
 import im . actor . sdk . util . Randoms ; 
 
 @ @ - 15 , 6 + 23 , 8 @ @ public class KeyManagerActor extends ModuleActor { 
 
 private static final String PRIVATE _ KEYS = " private _ keys " ; 
 
 + private static final String TAG = " KeyManagerActor " ; 
 + 
 private PrivateKeyStorage privateKeyStorage ; 
 
 public KeyManagerActor ( ModuleContext context ) { 
 @ @ - 33 , 6 + 43 , 8 @ @ public class KeyManagerActor extends ModuleActor { 
 } 
 
 if ( privateKeyStorage = = null ) { 
 + Log . d ( TAG , " Generating new encryption keys . . . " ) ; 
 + 
 EncryptionKey identityKey = new EncryptionKey ( Randoms . randomId ( ) , 
 Curve25519 . keyGen ( Crypto . randomBytes ( 64 ) ) ) ; 
 ArrayList < EncryptionKey > keyPairs = new ArrayList < EncryptionKey > ( ) ; 
 @ @ - 40 , 7 + 52 , 71 @ @ public class KeyManagerActor extends ModuleActor { 
 Curve25519 . keyGen ( Crypto . randomBytes ( 64 ) ) ) ) ; 
 
 privateKeyStorage = new PrivateKeyStorage ( identityKey , keyPairs , 0 ) ; 
 - preferences ( ) . putBytes ( PRIVATE _ KEYS , data ) ; 
 + preferences ( ) . putBytes ( PRIVATE _ KEYS , privateKeyStorage . toByteArray ( ) ) ; 
 } 
 + 
 + if ( privateKeyStorage . getKeyGroupId ( ) = = 0 ) { 
 + Log . d ( TAG , " Uploading main encryption keys . . . " ) ; 
 + 
 + EncryptionKey identityKey = privateKeyStorage . getIdentityKey ( ) ; 
 + ApiEncryptionKey apiEncryptionKey = 
 + new ApiEncryptionKey ( 
 + identityKey . getKeyId ( ) , 
 + identityKey . getKeyAlg ( ) , 
 + identityKey . getPublicKey ( ) , 
 + null ) ; 
 + 
 + ArrayList < String > encryption = new ArrayList < String > ( ) ; 
 + encryption . add ( " curve25519 " ) ; 
 + encryption . add ( " Ed25519 " ) ; 
 + encryption . add ( " kuznechik128 " ) ; 
 + encryption . add ( " streebog256 " ) ; 
 + encryption . add ( " sha256 " ) ; 
 + encryption . add ( " sha512 " ) ; 
 + encryption . add ( " aes128 " ) ; 
 + 
 + ArrayList < ApiEncryptionKey > keys = new ArrayList < ApiEncryptionKey > ( ) ; 
 + ArrayList < ApiEncryptionKeySignature > keySignatures = new ArrayList < ApiEncryptionKeySignature > ( ) ; 
 + for ( EncryptionKey key : privateKeyStorage . getKeys ( ) ) { 
 + ApiEncryptionKey apiKey = 
 + new ApiEncryptionKey ( 
 + key . getKeyId ( ) , 
 + key . getKeyAlg ( ) , 
 + key . getPublicKey ( ) , 
 + null ) ; 
 + keys . add ( apiKey ) ; 
 + 
 + 
 + byte [ ] signature = Curve25519 . calculateSignature ( Crypto . randomBytes ( 64 ) , identityKey . getPrivateKey ( ) , apiKey . toByteArray ( ) ) ; 
 + keySignatures . add ( 
 + new ApiEncryptionKeySignature ( 
 + key . getKeyId ( ) , 
 + " Ed25519 " , 
 + signature ) ) ; 
 + } 
 + 
 + request ( new RequestCreateNewKeyGroup ( apiEncryptionKey , encryption , keys , keySignatures ) , new RpcCallback < ResponseCreateNewKeyGroup > ( ) { 
 + @ Override 
 + public void onResult ( ResponseCreateNewKeyGroup response ) { 
 + privateKeyStorage = privateKeyStorage . markUploaded ( response . getKeyGroupId ( ) ) ; 
 + preferences ( ) . putBytes ( PRIVATE _ KEYS , privateKeyStorage . toByteArray ( ) ) ; 
 + onMainKeysReady ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( RpcException e ) { 
 + Log . w ( TAG , " Keys upload error " ) ; 
 + Log . e ( TAG , e ) ; 
 + 
 + / / Just ignore 
 + } 
 + } ) ; 
 + } else { 
 + onMainKeysReady ( ) ; 
 + } 
 + } 
 + 
 + private void onMainKeysReady ( ) { 
 + Log . d ( TAG , " Main Keys are ready " ) ; 
 } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java 
 deleted file mode 100644 
 index bb8078b . . 0000000 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java 
 + + + / dev / null 
 @ @ - 1 , 80 + 0 , 0 @ @ 
 - package im . actor . core . entity ; 
 - 
 - import com . google . j2objc . annotations . Property ; 
 - 
 - import java . io . IOException ; 
 - 
 - import im . actor . runtime . bser . BserObject ; 
 - import im . actor . runtime . bser . BserValues ; 
 - import im . actor . runtime . bser . BserWriter ; 
 - import im . actor . runtime . storage . KeyValueItem ; 
 - 
 - public class DialogDesc extends BserObject implements KeyValueItem { 
 - 
 - @ Property ( " readonly , nonatomic " ) 
 - private Peer peer ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private String title ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private Avatar avatar ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private boolean isUnread ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private int counter ; 
 - 
 - public DialogDesc ( Peer peer , String title , Avatar avatar , boolean isUnread , int counter ) { 
 - this . peer = peer ; 
 - this . title = title ; 
 - this . avatar = avatar ; 
 - this . isUnread = isUnread ; 
 - this . counter = counter ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public String getTitle ( ) { 
 - return title ; 
 - } 
 - 
 - public Avatar getAvatar ( ) { 
 - return avatar ; 
 - } 
 - 
 - public int getCounter ( ) { 
 - return counter ; 
 - } 
 - 
 - public boolean isUnread ( ) { 
 - return isUnread ; 
 - } 
 - 
 - @ Override 
 - public void parse ( BserValues values ) throws IOException { 
 - peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; 
 - title = values . getString ( 2 ) ; 
 - byte [ ] av = values . getBytes ( 3 ) ; 
 - if ( av ! = null ) { 
 - avatar = new Avatar ( av ) ; 
 - } 
 - counter = values . getInt ( 4 ) ; 
 - isUnread = values . getBool ( 5 ) ; 
 - } 
 - 
 - @ Override 
 - public void serialize ( BserWriter writer ) throws IOException { 
 - writer . writeObject ( 1 , peer ) ; 
 - writer . writeString ( 2 , title ) ; 
 - if ( avatar ! = null ) { 
 - writer . writeObject ( 3 , avatar ) ; 
 - } 
 - writer . writeInt ( 4 , counter ) ; 
 - writer . writeBool ( 5 , isUnread ) ; 
 - } 
 - 
 - @ Override 
 - public long getEngineId ( ) { 
 - return peer . getUnuqueId ( ) ; 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java 
 new file mode 100644 
 index 0000000 . . d0c5624 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java 
 @ @ - 0 , 0 + 1 , 69 @ @ 
 + package im . actor . core . entity ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . bser . BserCreator ; 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . storage . KeyValueItem ; 
 + 
 + public class DialogSpec extends BserObject implements KeyValueItem { 
 + 
 + public static BserCreator < DialogSpec > CREATOR = new BserCreator < DialogSpec > ( ) { 
 + @ Override 
 + public DialogSpec createInstance ( ) { 
 + return new DialogSpec ( ) ; 
 + } 
 + } ; 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private boolean isUnread ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private int counter ; 
 + 
 + public DialogSpec ( Peer peer , boolean isUnread , int counter ) { 
 + this . peer = peer ; 
 + this . isUnread = isUnread ; 
 + this . counter = counter ; 
 + } 
 + 
 + private DialogSpec ( ) { 
 + 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + 
 + public boolean isUnread ( ) { 
 + return isUnread ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; 
 + counter = values . getInt ( 2 ) ; 
 + isUnread = values . getBool ( 3 ) ; 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + writer . writeObject ( 1 , peer ) ; 
 + writer . writeInt ( 2 , counter ) ; 
 + writer . writeBool ( 3 , isUnread ) ; 
 + } 
 + 
 + @ Override 
 + public long getEngineId ( ) { 
 + return peer . getUnuqueId ( ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 index 28142c9 . . baf3eaf 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . runtime . storage . PreferencesStorage ; 
 public abstract class AbsModule { 
 
 public static final String STORAGE _ DIALOGS = " dialogs " ; 
 + public static final String STORAGE _ DIALOGS _ DESC = " dialogs _ desc " ; 
 public static final String STORAGE _ USERS = " users " ; 
 public static final String STORAGE _ GROUPS = " groups " ; 
 public static final String STORAGE _ DOWNLOADS = " downloads " ; 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 30e0d85 . . 88416ee 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . core . api . rpc . ResponseSeq ; 
 import im . actor . core . api . updates . UpdateChatClear ; 
 import im . actor . core . api . updates . UpdateChatDelete ; 
 import im . actor . core . entity . Dialog ; 
 + import im . actor . core . entity . DialogSpec ; 
 import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . Peer ; 
 @ @ - 48 , 6 + 49 , 7 @ @ import im . actor . core . network . RpcInternalException ; 
 import im . actor . core . viewmodel . Command ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . core . viewmodel . DialogGroupsVM ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 @ @ - 56 , 6 + 58 , 8 @ @ import im . actor . runtime . actors . tools . BounceFilterActor ; 
 import im . actor . runtime . eventbus . BusSubscriber ; 
 import im . actor . runtime . eventbus . Event ; 
 import im . actor . runtime . files . FileSystemReference ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 + import im . actor . runtime . storage . KeyValueEngine ; 
 import im . actor . runtime . storage . ListEngine ; 
 import im . actor . runtime . storage . SyncKeyValue ; 
 
 @ @ - 83 , 11 + 87 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 private final SyncKeyValue cursorStorage ; 
 
 + private final MVVMCollection < DialogSpec , DialogSpecVM > dialogDescKeyValue ; 
 + 
 private final DialogGroupsVM dialogGroups = new DialogGroupsVM ( ) ; 
 
 public MessagesModule ( final ModuleContext context ) { 
 super ( context ) ; 
 
 + this . dialogDescKeyValue = Storage . createKeyValue ( STORAGE _ DIALOGS _ DESC , DialogSpecVM . CREATOR , DialogSpec . CREATOR ) ; 
 this . cursorStorage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ CURSOR ) ) ; 
 this . dialogs = Storage . createList ( STORAGE _ DIALOGS , Dialog . CREATOR ) ; 
 } 
 @ @ - 157 , 6 + 164 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 return dialogGroups ; 
 } 
 
 + public MVVMCollection < DialogSpec , DialogSpecVM > getDialogDescKeyValue ( ) { 
 + return dialogDescKeyValue ; 
 + } 
 + 
 public ActorRef getSendMessageActor ( ) { 
 return sendMessageActor ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 index f0fdf00 . . b881551 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 @ @ - 1 , 20 + 1 , 26 @ @ 
 package im . actor . core . modules . internal . messages ; 
 
 import java . util . ArrayList ; 
 - import java . util . HashMap ; 
 
 import im . actor . core . entity . Avatar ; 
 - import im . actor . core . entity . DialogDesc ; 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 + import im . actor . core . entity . User ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . internal . messages . entity . GroupedStorage ; 
 import im . actor . core . modules . utils . ModuleActor ; 
 import im . actor . core . viewmodel . DialogGroup ; 
 + import im . actor . core . viewmodel . DialogSmall ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 
 public class GroupedDialogsActor extends ModuleActor { 
 
 - private PeerGroup groups = new PeerGroup ( " groups " , " Groups " ) ; 
 - private PeerGroup privates = new PeerGroup ( " private " , " Private " ) ; 
 + private GroupedStorage storage ; 
 + private MVVMCollection < DialogSpec , DialogSpecVM > specs ; 
 
 public GroupedDialogsActor ( ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 23 , 6 + 29 , 8 @ @ public class GroupedDialogsActor extends ModuleActor { 
 @ Override 
 public void preStart ( ) { 
 super . preStart ( ) ; 
 + specs = context ( ) . getMessagesModule ( ) . getDialogDescKeyValue ( ) ; 
 + storage = new GroupedStorage ( ) ; 
 } 
 
 private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { 
 @ @ - 31 , 38 + 39 , 82 @ @ public class GroupedDialogsActor extends ModuleActor { 
 
 private void onNewMessage ( Peer peer , long sortDate , int counter ) { 
 
 - PeerGroup peerGroup ; 
 - if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 - peerGroup = groups ; 
 - } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 - peerGroup = privates ; 
 - } else { 
 - return ; 
 - } 
 + / / Updating dialog spec 
 + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; 
 + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; 
 
 boolean found = false ; 
 - for ( PeerDesc d : peerGroup . getPeers ( ) ) { 
 - if ( d . getPeer ( ) . equals ( peer ) ) { 
 - d . setCounter ( counter ) ; 
 + for ( Peer p : storage . getPrivatePeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + for ( Peer p : storage . getGroupPeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 found = true ; 
 + break ; 
 } 
 } 
 
 if ( ! found ) { 
 - peerGroup . getPeers ( ) . add ( new PeerDesc ( peer , counter ) ) ; 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + storage . getPrivatePeers ( ) . add ( peer ) ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + storage . getGroupPeers ( ) . add ( peer ) ; 
 + } else { 
 + return ; 
 + } 
 } 
 
 - ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; 
 - ArrayList < DialogDesc > groupDescs = new ArrayList < DialogDesc > ( ) ; 
 - for ( PeerDesc d : peerGroup . getPeers ( ) ) { 
 - groupDescs . add ( new DialogDesc ( d . getPeer ( ) , " GRPOUP # " + d . getPeer ( ) . getPeerId ( ) , 
 - null , false , d . counter ) ) ; 
 + notifyVM ( ) ; 
 + saveStorage ( ) ; 
 + } 
 + 
 + private void notifyVM ( ) { 
 + ArrayListDialogSmall groupSpecs = new ArrayListDialogSmall ( ) ; 
 + for ( Peer p : storage . getGroupPeers ( ) ) { 
 + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; 
 + if ( p . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = getGroup ( p . getPeerId ( ) ) ; 
 + groupSpecs . add ( new DialogSmall ( p , 
 + group . getTitle ( ) , group . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = getUser ( p . getPeerId ( ) ) ; 
 + groupSpecs . add ( new DialogSmall ( p , 
 + user . getName ( ) , user . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } 
 + } 
 + 
 + ArrayListDialogSmall privateSpecs = new ArrayListDialogSmall ( ) ; 
 + for ( Peer p : storage . getPrivatePeers ( ) ) { 
 + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; 
 + if ( p . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = getGroup ( p . getPeerId ( ) ) ; 
 + privateSpecs . add ( new DialogSmall ( p , 
 + group . getTitle ( ) , group . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = getUser ( p . getPeerId ( ) ) ; 
 + privateSpecs . add ( new DialogSmall ( p , 
 + user . getName ( ) , user . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } 
 } 
 - groups . add ( new DialogGroup ( " Groups " , " group " , groupDescs ) ) ; 
 + 
 + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; 
 + groups . add ( new DialogGroup ( " Groups " , " groups " , groupSpecs ) ) ; 
 + groups . add ( new DialogGroup ( " Private " , " private " , privateSpecs ) ) ; 
 
 context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; 
 } 
 
 + private void saveStorage ( ) { 
 + / / TODO : Implement 
 + } 
 + 
 @ Override 
 public void onReceive ( Object message ) { 
 if ( message instanceof PeerInformationChanged ) { 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java 
 new file mode 100644 
 index 0000000 . . 3e7340c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package im . actor . core . modules . internal . messages . entity ; 
 + 
 + import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 + 
 + public class GroupedStorage extends BserObject { 
 + 
 + private ArrayList < Peer > groupPeers = new ArrayList < Peer > ( ) ; 
 + private ArrayList < Peer > privatePeers = new ArrayList < Peer > ( ) ; 
 + 
 + public GroupedStorage ( ) { 
 + } 
 + 
 + public GroupedStorage ( byte [ ] data ) throws IOException { 
 + super . load ( data ) ; 
 + } 
 + 
 + public ArrayList < Peer > getGroupPeers ( ) { 
 + return groupPeers ; 
 + } 
 + 
 + public ArrayList < Peer > getPrivatePeers ( ) { 
 + return privatePeers ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + List < byte [ ] > rawPrivatePeers = values . getRepeatedBytes ( 1 ) ; 
 + groupPeers . clear ( ) ; 
 + for ( byte [ ] b : rawPrivatePeers ) { 
 + groupPeers . add ( Peer . fromBytes ( b ) ) ; 
 + } 
 + List < byte [ ] > rawGroupPeers = values . getRepeatedBytes ( 2 ) ; 
 + for ( byte [ ] b : rawGroupPeers ) { 
 + privatePeers . add ( Peer . fromBytes ( b ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + for ( Peer peer : privatePeers ) { 
 + writer . writeObject ( 1 , peer ) ; 
 + } 
 + for ( Peer peer : groupPeers ) { 
 + writer . writeObject ( 2 , peer ) ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 index ae47f02 . . 47935a1 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 @ @ - 1 , 16 + 1 , 19 @ @ 
 package im . actor . core . viewmodel ; 
 
 - import java . util . ArrayList ; 
 + import com . google . j2objc . annotations . Property ; 
 
 - import im . actor . core . entity . DialogDesc ; 
 + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; 
 
 public class DialogGroup { 
 
 + @ Property ( " readonly , nonatomic " ) 
 private String title ; 
 + @ Property ( " readonly , nonatomic " ) 
 private String key ; 
 - private ArrayList < DialogDesc > dialogs ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private ArrayListDialogSmall dialogs ; 
 
 - public DialogGroup ( String title , String key , ArrayList < DialogDesc > dialogs ) { 
 + public DialogGroup ( String title , String key , ArrayListDialogSmall dialogs ) { 
 this . title = title ; 
 this . key = key ; 
 this . dialogs = dialogs ; 
 @ @ - 24 , 7 + 27 , 7 @ @ public class DialogGroup { 
 return key ; 
 } 
 
 - public ArrayList < DialogDesc > getDialogs ( ) { 
 + public ArrayListDialogSmall getDialogs ( ) { 
 return dialogs ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java 
 new file mode 100644 
 index 0000000 . . b77e893 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import im . actor . core . entity . Avatar ; 
 + import im . actor . core . entity . Peer ; 
 + 
 + public class DialogSmall { 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final String title ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Avatar avatar ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final int counter ; 
 + 
 + public DialogSmall ( Peer peer , String title , Avatar avatar , int counter ) { 
 + this . peer = peer ; 
 + this . title = title ; 
 + this . avatar = avatar ; 
 + this . counter = counter ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public Avatar getAvatar ( ) { 
 + return avatar ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java 
 new file mode 100644 
 index 0000000 . . 52a266d 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . viewmodel . generics . BooleanValueModel ; 
 + import im . actor . core . viewmodel . generics . IntValueModel ; 
 + import im . actor . runtime . mvvm . BaseValueModel ; 
 + import im . actor . runtime . mvvm . ValueModelCreator ; 
 + 
 + public class DialogSpecVM extends BaseValueModel < DialogSpec > { 
 + 
 + public static ValueModelCreator < DialogSpec , DialogSpecVM > CREATOR = new ValueModelCreator < DialogSpec , DialogSpecVM > ( ) { 
 + @ Override 
 + public DialogSpecVM create ( DialogSpec baseValue ) { 
 + return new DialogSpecVM ( baseValue ) ; 
 + } 
 + } ; 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private IntValueModel counter ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private BooleanValueModel isUnread ; 
 + 
 + public DialogSpecVM ( DialogSpec rawObj ) { 
 + super ( rawObj ) ; 
 + 
 + this . peer = rawObj . getPeer ( ) ; 
 + this . counter = new IntValueModel ( " dialogs . desc . counter " , rawObj . getCounter ( ) ) ; 
 + this . isUnread = new BooleanValueModel ( " dialogs . desc . unread " , rawObj . isUnread ( ) ) ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public IntValueModel getCounter ( ) { 
 + return counter ; 
 + } 
 + 
 + public BooleanValueModel getIsUnread ( ) { 
 + return isUnread ; 
 + } 
 + 
 + @ Override 
 + protected void updateValues ( DialogSpec rawObj ) { 
 + counter . change ( rawObj . getCounter ( ) ) ; 
 + isUnread . change ( rawObj . isUnread ( ) ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java 
 new file mode 100644 
 index 0000000 . . 9727306 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package im . actor . core . viewmodel . generics ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . viewmodel . DialogSmall ; 
 + 
 + public class ArrayListDialogSmall extends ArrayList < DialogSmall > { 
 + 
 + @ Override 
 + public DialogSmall get ( int index ) { 
 + return super . get ( index ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 index 32554b4 . . f496742 100644 
 - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 @ @ - 6 , 7 + 6 , 7 @ @ import UIKit 
 
 class AADebugController : AAContentTableController { 
 
 - var debugData : AAManagedArrayRows < ACDialogDesc , AACommonCell > ! 
 + var debugData : AAManagedArrayRows < ACDialogSmall , AACommonCell > ! 
 
 init ( ) { 
 super . init ( style : . Plain ) 
 @ @ - 18 , 9 + 18 , 10 @ @ class AADebugController : AAContentTableController { 
 
 override func tableDidLoad ( ) { 
 section { ( s ) - > ( ) in 
 - self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogDesc , AACommonCell > ) - > ( ) in 
 - r . bindData = { ( cell : AACommonCell , data : ACDialogDesc ) - > ( ) in 
 - cell . setContent ( data . title ) 
 + self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogSmall , AACommonCell > ) - > ( ) in 
 + r . bindData = { ( cell : AACommonCell , data : ACDialogSmall ) - > ( ) in 
 + cell . setContent ( " \ ( data . counter ) - \ ( data . title ) " ) 
 + cell . style = . Normal 
 } 
 } 
 } 
 @ @ - 30 , 11 + 31 , 11 @ @ class AADebugController : AAContentTableController { 
 binder . bind ( ActorSDK . sharedActor ( ) . messenger . getDialogGroupsVM ( ) . getGroupsValueModel ( ) ) { ( value : JavaUtilArrayList ? ) - > ( ) in 
 
 if value ! = nil { 
 - var items = [ ACDialogDesc ] ( ) 
 + var items = [ ACDialogSmall ] ( ) 
 
 for i in 0 . . < value ! . size ( ) { 
 - for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . getDialogs ( ) { 
 - items . append ( j as ! ACDialogDesc ) 
 + for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . dialogs { 
 + items . append ( j as ! ACDialogSmall ) 
 } 
 } 
 self . debugData . data = items
