BLEU SCORE: 0.11447078430334955

TEST MSG: feat ( server ) : add attaches to TextModerMessage ; update schema ; upgrade botkit version
GENERATED MSG: feat ( server : bots ) : sticker bot support

TEST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala < nl > index 83be924 . . 13ec625 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala < nl > @ @ - 37 , 10 + 37 , 16 @ @ trait ApiToBotConversions { < nl > < nl > implicit def toTextMessageEx ( ex : ApiTextMessageEx ) : TextMessageEx = < nl > ex match { < nl > - case ApiTextModernMessage ( text , senderNameOverride , senderPhotoOverride , style ) ⇒ TextModernMessage ( text , senderNameOverride , senderPhotoOverride , style ) < nl > - case ApiTextExMarkdown ( text ) ⇒ TextModernMessage ( Some ( text ) , None , None , None ) < nl > + case ApiTextModernMessage ( text , senderNameOverride , senderPhotoOverride , style , attaches ) ⇒ TextModernMessage ( text , senderNameOverride , toAvatar ( senderPhotoOverride ) , style , attaches ) < nl > + case ApiTextExMarkdown ( text ) ⇒ TextModernMessage ( Some ( text ) , None , None , None , Vector . empty ) < nl > } < nl > < nl > + implicit def toModernAttach ( a : ApiTextModernAttach ) : TextModernAttach = < nl > + TextModernAttach ( a . title , a . titleUrl , a . titleIcon , a . text , a . style , a . fields ) < nl > + < nl > + implicit def toModernAttach ( as : IndexedSeq [ ApiTextModernAttach ] ) : IndexedSeq [ TextModernAttach ] = < nl > + as map toModernAttach < nl > + < nl > implicit def toTextMessageEx ( ex : Option [ ApiTextMessageEx ] ) : Option [ TextMessageEx ] = < nl > ex map toTextMessageEx < nl > < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala < nl > index 8b547e3 . . f222ffa 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala < nl > @ @ - 25 , 9 + 25 , 15 @ @ trait BotToApiConversions { < nl > implicit def toDocumentExt ( ex : Option [ DocumentEx ] ) : Option [ ApiDocumentEx ] = ex map toDocumentExt < nl > < nl > implicit def toTextMessageEx ( ex : TextMessageEx ) : ApiTextMessageEx = ex match { < nl > - case TextModernMessage ( text , senderNameOverride , senderPhotoOverride , style ) ⇒ ApiTextModernMessage ( text , senderNameOverride , senderPhotoOverride , style ) < nl > + case TextModernMessage ( text , senderNameOverride , senderPhotoOverride , style , attaches ) ⇒ ApiTextModernMessage ( text , senderNameOverride , senderPhotoOverride , style , attaches ) < nl > } < nl > < nl > + implicit def toModernAttach ( a : TextModernAttach ) : ApiTextModernAttach = < nl > + ApiTextModernAttach ( a . title , a . titleUrl , a . titleIcon , a . text , a . style , a . fields ) < nl > + < nl > + implicit def toModernAttach ( as : IndexedSeq [ TextModernAttach ] ) : IndexedSeq [ ApiTextModernAttach ] = < nl > + as map toModernAttach < nl > + < nl > implicit def toTextMessageEx ( ex : Option [ TextMessageEx ] ) : Option [ ApiTextMessageEx ] = < nl > ex map toTextMessageEx < nl > < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > index c3c8303 . . 682a7a0 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala < nl > @ @ - 71 , 6 + 71 , 7 @ @ private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotService < nl > private def findUser ( query : String ) = RequestHandler [ FindUser , FindUser # Response ] { < nl > ( botUserId , botAuthId , botAuthSid ) ⇒ < nl > ifIsAdmin ( botUserId ) { < nl > + < nl > ( for { < nl > ids ← fromFuture ( userExt . findUserIds ( query ) ) < nl > users ← fromFuture ( ftraverse ( ids ) ( UserUtils . safeGetUser ( _ , botUserId , botAuthId ) ) ) map ( _ . flatten ) < nl > diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json < nl > index 626b9f8 . . 97ce822 100644 < nl > - - - a / actor - server / actor - core / src / main / actor - api / actor . json < nl > + + + b / actor - server / actor - core / src / main / actor - api / actor . json < nl > @ @ - 2929 , 13 + 2929 , 31 @ @ < nl > " type " : " reference " , < nl > " argument " : " text " , < nl > " category " : " full " , < nl > - " description " : " Text of message " < nl > + " description " : " optional text of message " < nl > } , < nl > { < nl > " type " : " reference " , < nl > " argument " : " senderNameOverride " , < nl > " category " : " full " , < nl > - " description " : " Overriding of sender " < nl > + " description " : " optional overriding of sender " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " senderPhotoOverride " , < nl > + " category " : " full " , < nl > + " description " : " optional overriding sender ' s photo " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " style " , < nl > + " category " : " full " , < nl > + " description " : " optional paragraph style " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " attaches " , < nl > + " category " : " full " , < nl > + " description " : " optional Attaches of message " < nl > } < nl > ] , < nl > " trait " : { < nl > @ @ - 2981 , 6 + 2999 , 17 @ @ < nl > } , < nl > " id " : 4 , < nl > " name " : " style " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : { < nl > + " type " : " struct " , < nl > + " childType " : " TextModernAttach " < nl > + } < nl > + } , < nl > + " id " : 5 , < nl > + " name " : " attaches " < nl > } < nl > ] < nl > } < nl > diff - - git a / actor - server / notes / 1 . 0 . 74 . markdown b / actor - server / notes / 1 . 0 . 74 . markdown < nl > new file mode 100644 < nl > index 0000000 . . 2c388e4 < nl > - - - / dev / null < nl > + + + b / actor - server / notes / 1 . 0 . 74 . markdown < nl > @ @ - 0 , 0 + 1 , 2 @ @ < nl > + * Api schema update < nl > + * Added attaches to TextModernMessage < nl > \ No newline at end of file < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index 77dc3c2 . . 01ba19c 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import sbt . _ < nl > object Dependencies { < nl > object V { < nl > val actorCommons = " 0 . 0 . 8 " < nl > - val actorBotkit = " 1 . 0 . 59 " < nl > + val actorBotkit = " 1 . 0 . 60 " < nl > val akka = " 2 . 4 . 0 " < nl > val akkaExperimental = " 2 . 0 - M1 " < nl > val cats = " 0 . 2 . 0 "
NEAREST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala < nl > index 8162272 . . 83be924 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala < nl > @ @ - 57 , 8 + 57 , 9 @ @ trait ApiToBotConversions { < nl > thumb , < nl > ext ) ⇒ DocumentMessage ( fileId , accessHash , fileSize . toLong , name , mimeType , thumb , ext ) < nl > case ApiServiceMessage ( text , _ ) ⇒ ServiceMessage ( text ) < nl > - case _ : ApiStickerMessage ⇒ UnsupportedMessage < nl > - case _ : ApiUnsupportedMessage ⇒ UnsupportedMessage < nl > + case ApiStickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) ⇒ < nl > + StickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) < nl > + case _ : ApiUnsupportedMessage ⇒ UnsupportedMessage < nl > } < nl > < nl > implicit def toTextModernAttach ( ma : ApiTextModernAttach ) : TextModernAttach = < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > index 2432bf1 . . 07964fe 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala < nl > @ @ - 25 , 6 + 25 , 7 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , < nl > private val webhooksService = new WebHooksBotService ( system ) < nl > private val usersService = new UsersBotService ( system ) < nl > private val groupsService = new GroupsBotService ( system ) < nl > + private val stickersService = new StickersBotService ( system ) < nl > < nl > private val log = Logging ( system , getClass ) < nl > < nl > @ @ - 85 , 5 + 86 , 6 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , < nl > case Services . WebHooks ⇒ webhooksService < nl > case Services . Users ⇒ usersService < nl > case Services . Groups ⇒ groupsService < nl > + case Services . Stickers ⇒ stickersService < nl > } < nl > } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala < nl > index bdb1189 . . 8b547e3 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala < nl > @ @ - 74 , 6 + 74 , 12 @ @ trait BotToApiConversions { < nl > implicit def toColor ( color : Option [ Color ] ) : Option [ ApiColor ] = < nl > color map toColor < nl > < nl > + implicit def toImageLocation ( il : ImageLocation ) : ApiImageLocation = < nl > + ApiImageLocation ( il . fileLocation , il . width , il . height , il . fileSize ) < nl > + < nl > + implicit def toImageLocation ( il : Option [ ImageLocation ] ) : Option [ ApiImageLocation ] = < nl > + il map toImageLocation < nl > + < nl > implicit def toMessage ( message : MessageBody ) : ApiMessage = < nl > message match { < nl > case TextMessage ( text , ext ) ⇒ ApiTextMessage ( text , Vector . empty , ext ) < nl > @ @ - 86 , 6 + 92 , 8 @ @ trait BotToApiConversions { < nl > mimeType , < nl > thumb , < nl > ext ) ⇒ ApiDocumentMessage ( fileId , accessHash , fileSize . toInt , name , mimeType , thumb , ext ) < nl > + case StickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) ⇒ < nl > + ApiStickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) < nl > case ServiceMessage ( _ ) ⇒ throw new RuntimeException ( " Service messages are not supported " ) < nl > case UnsupportedMessage ⇒ ApiUnsupportedMessage < nl > } < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala < nl > new file mode 100644 < nl > index 0000000 . . dc6a385 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala < nl > @ @ - 0 , 0 + 1 , 52 @ @ < nl > + package im . actor . server . bot . services < nl > + < nl > + import akka . actor . ActorSystem < nl > + import im . actor . bots . BotMessages . _ < nl > + import im . actor . concurrent . FutureResultCats < nl > + import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } < nl > + import im . actor . server . file . { S3StorageExtension , S3StorageAdapter , ImageUtils } < nl > + import im . actor . server . stickers . { StickerErrors , StickersExtension } < nl > + < nl > + private [ bot ] object StickersBotErrors { < nl > + val LocationInvalid = BotError ( 400 , " LOCATION _ INVALID " ) < nl > + val NotAllowedToEdit = BotError ( 403 , " NOT _ ALLOWED _ TO _ EDIT " ) < nl > + val FailedToMakePreview = BotError ( 500 , " FAILED _ MAKE _ PREVIEW " ) < nl > + } < nl > + < nl > + private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResultCats [ BotError ] with ApiToBotConversions { < nl > + < nl > + import ImageUtils . _ < nl > + import StickersBotErrors . _ < nl > + < nl > + private implicit val system : ActorSystem = _ system < nl > + import system . dispatcher < nl > + < nl > + private val stickerExt = StickersExtension ( system ) < nl > + private implicit val fsAdapter : S3StorageAdapter = S3StorageExtension ( system ) . s3StorageAdapter < nl > + < nl > + override def handlers : Handlers = { < nl > + case CreateStickerPack ⇒ createStickerPack ( ) . toWeak < nl > + case AddSticker ( packId , emoji , fileLocation ) ⇒ addSticker ( packId , emoji , fileLocation ) . toWeak < nl > + } < nl > + < nl > + private def createStickerPack ( ) = RequestHandler [ CreateStickerPack , CreateStickerPack # Response ] { < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ < nl > + ifIsAdmin ( botUserId ) { < nl > + ( for { < nl > + packId ← fromFuture ( stickerExt . createPack ( botUserId , isDefault = false ) ) < nl > + } yield Container ( packId ) ) . value < nl > + } < nl > + } < nl > + < nl > + private def addSticker ( packId : Int , emoji : Option [ String ] , fileLocation : FileLocation ) = RequestHandler [ AddSticker , AddSticker # Response ] { < nl > + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ < nl > + ifIsAdmin ( botUserId ) { < nl > + ( for { < nl > + _ ← fromFutureBoolean ( NotAllowedToEdit ) ( stickerExt . isOwner ( botUserId , packId ) ) < nl > + sticker ← fromFutureEither ( _ ⇒ LocationInvalid ) ( scaleStickerF ( fileLocation . fileId ) ) < nl > + _ ← fromFutureXor ( { case StickerErrors . NoPreview ⇒ FailedToMakePreview } ) ( stickerExt . addSticker ( botUserId , packId , emoji , sticker ) ) < nl > + } yield Void ) . value < nl > + } < nl > + } < nl > + < nl > + } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > index 634bdca . . f7fdfe5 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > @ @ - 49 , 13 + 49 , 17 @ @ object ImageUtils { < nl > aimg . scale ( scaleFactor ) < nl > } < nl > < nl > - def resizeToSmall ( aimg : AsyncImage ) ( implicit ec : ExecutionContext ) : Future [ AsyncImage ] = resizeTo ( aimg , SmallSize ) < nl > - < nl > - def resizeToLarge ( aimg : AsyncImage ) ( implicit ec : ExecutionContext ) : Future [ AsyncImage ] = resizeTo ( aimg , LargeSize ) < nl > - < nl > def dimensions ( aimg : AsyncImage ) ( implicit ec : ExecutionContext ) : ( Int , Int ) = < nl > ( aimg . width , aimg . height ) < nl > < nl > + def scaleStickerF ( fullFileId : Long ) ( < nl > + implicit < nl > + fsAdapter : FileStorageAdapter , < nl > + ec : ExecutionContext , < nl > + system : ActorSystem < nl > + ) : Future [ Either [ Throwable , Avatar ] ] = < nl > + DbExtension ( system ) . db . run ( scaleAvatar ( fullFileId , ThreadLocalRandom . current ( ) , smallSize = 128 , largeSize = 256 ) ) < nl > + < nl > def scaleAvatarF ( fullFileId : Long ) ( < nl > implicit < nl > fsAdapter : FileStorageAdapter , < nl > @ @ - 74 , 7 + 78 , 20 @ @ object ImageUtils { < nl > < nl > def scaleAvatar ( < nl > fullFileId : Long , < nl > - rnd : ThreadLocalRandom < nl > + rng : ThreadLocalRandom < nl > + ) ( < nl > + implicit < nl > + fsAdapter : FileStorageAdapter , < nl > + ec : ExecutionContext , < nl > + system : ActorSystem < nl > + ) : DBIO [ Either [ Throwable , Avatar ] ] = < nl > + scaleAvatar ( fullFileId , rng , SmallSize , LargeSize ) < nl > + < nl > + def scaleAvatar ( < nl > + fullFileId : Long , < nl > + rng : ThreadLocalRandom , < nl > + smallSize : Int , < nl > + largeSize : Int < nl > ) ( < nl > implicit < nl > fsAdapter : FileStorageAdapter , < nl > @ @ - 92 , 8 + 109 , 8 @ @ object ImageUtils { < nl > fullAimg ← DBIO . from ( AsyncImage ( fullFile ) ) < nl > ( fiw , fih ) = dimensions ( fullAimg ) < nl > < nl > - smallAimg ← DBIO . from ( resizeToSmall ( fullAimg ) ) < nl > - largeAimg ← DBIO . from ( resizeToLarge ( fullAimg ) ) < nl > + smallAimg ← DBIO . from ( resizeTo ( fullAimg , smallSize ) ) < nl > + largeAimg ← DBIO . from ( resizeTo ( fullAimg , largeSize ) ) < nl > < nl > smallFile = fullFile . getParentFile . toPath . resolve ( smallFileName ) . toFile < nl > largeFile = fullFile . getParentFile . toPath . resolve ( largeFileName ) . toFile < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala < nl > new file mode 100644 < nl > index 0000000 . . 9c273f7 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala < nl > @ @ - 0 , 0 + 1 , 71 @ @ < nl > + package im . actor . server . stickers < nl > + < nl > + import akka . actor . _ < nl > + import cats . data . Xor < nl > + import im . actor . concurrent . FutureResultCats < nl > + import im . actor . server . acl . ACLUtils < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . file . Avatar < nl > + import im . actor . server . model . { StickerData , StickerPack } < nl > + import im . actor . server . persist . { StickerDataRepo , OwnStickerPackRepo , StickerPackRepo } < nl > + < nl > + import scala . concurrent . Future < nl > + import scala . concurrent . forkjoin . ThreadLocalRandom < nl > + import scala . util . control . NoStackTrace < nl > + < nl > + object StickerErrors { < nl > + < nl > + abstract class StickerError ( message : String ) extends RuntimeException ( message ) with NoStackTrace < nl > + < nl > + case object NoPreview extends StickerError ( " Got no preview after resize " ) < nl > + } < nl > + < nl > + sealed trait StickersExtension extends Extension < nl > + < nl > + final class StickersExtensionImpl ( _ system : ActorSystem ) extends StickersExtension with FutureResultCats [ Throwable ] { < nl > + < nl > + import StickerErrors . _ < nl > + < nl > + implicit val system : ActorSystem = _ system < nl > + import system . dispatcher < nl > + < nl > + private val db = DbExtension ( system ) . db < nl > + < nl > + def createPack ( creatorUserId : Int , isDefault : Boolean ) : Future [ Int ] = { < nl > + val rng = ThreadLocalRandom . current ( ) < nl > + val packId = rng . nextInt ( ) < nl > + val accessSalt = ACLUtils . nextAccessSalt ( rng ) < nl > + db . run ( for { < nl > + _ ← StickerPackRepo . create ( StickerPack ( packId , accessSalt , creatorUserId , isDefault ) ) < nl > + _ ← OwnStickerPackRepo . create ( creatorUserId , packId ) < nl > + } yield packId ) < nl > + } < nl > + < nl > + def isOwner ( userId : Int , packId : Int ) : Future [ Boolean ] = db . run ( StickerPackRepo . exists ( userId , packId ) ) < nl > + < nl > + def addSticker ( userId : Int , packId : Int , emoji : Option [ String ] , resizedSticker : Avatar ) : Future [ Throwable Xor Unit ] = { < nl > + val rng = ThreadLocalRandom . current ( ) < nl > + val id = rng . nextInt ( ) < nl > + ( for { < nl > + image128 ← fromOption ( NoPreview ) ( resizedSticker . smallImage ) < nl > + image256 = resizedSticker . largeImage < nl > + image512 = resizedSticker . fullImage < nl > + sticker = StickerData ( id , packId , emoji , < nl > + image128FileId = image128 . fileLocation . fileId , < nl > + image128FileHash = image128 . fileLocation . accessHash , < nl > + image128FileSize = image128 . fileSize , < nl > + image256FileId = image256 map ( _ . fileLocation . fileId ) , < nl > + image256FileHash = image256 map ( _ . fileLocation . accessHash ) , < nl > + image256FileSize = image256 map ( _ . fileSize ) , < nl > + image512FileId = image512 map ( _ . fileLocation . fileId ) , < nl > + image512FileHash = image512 map ( _ . fileLocation . accessHash ) , < nl > + image512FileSize = image512 map ( _ . fileSize ) ) < nl > + _ ← fromFuture ( db . run ( StickerDataRepo . create ( sticker ) ) ) < nl > + } yield ( ) ) . value < nl > + } < nl > + } < nl > + < nl > + object StickersExtension extends ExtensionId [ StickersExtensionImpl ] with ExtensionIdProvider { < nl > + override def lookup ( ) = StickersExtension < nl > + override def createExtension ( system : ExtendedActorSystem ) = new StickersExtensionImpl ( system ) < nl > + } < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala < nl > index 4d5046d . . 8774910 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala < nl > @ @ - 2 , 6 + 2 , 8 @ @ package im . actor . server . persist < nl > < nl > import im . actor . server . model . StickerData < nl > import im . actor . server . db . ActorPostgresDriver . api . _ < nl > + import slick . dbio . Effect . Write < nl > + import slick . profile . FixedSqlAction < nl > < nl > class StickerDataTable ( tag : Tag ) extends Table [ StickerData ] ( tag , " sticker _ data " ) { < nl > def id = column [ Int ] ( " id " , O . PrimaryKey ) < nl > @ @ - 35 , 10 + 37 , 12 @ @ class StickerDataTable ( tag : Tag ) extends Table [ StickerData ] ( tag , " sticker _ data " ) < nl > < nl > object StickerDataRepo { < nl > < nl > - val stickerDatas = TableQuery [ StickerDataTable ] < nl > + val stickerData = TableQuery [ StickerDataTable ] < nl > < nl > - def find ( id : Int ) = stickerDatas . filter ( _ . id = = = id ) . result < nl > + def create ( data : StickerData ) : DBIO [ Int ] = stickerData + = data < nl > < nl > - def findByPack ( packId : Int ) = stickerDatas . filter ( _ . packId = = = packId ) . result < nl > + def find ( id : Int ) = stickerData . filter ( _ . id = = = id ) . result < nl > + < nl > + def findByPack ( packId : Int ) = stickerData . filter ( _ . packId = = = packId ) . result < nl > < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala < nl > index f0d560f . . a280f61 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala < nl > @ @ - 1 , 8 + 1 , 11 @ @ < nl > package im . actor . server . persist < nl > < nl > + import im . actor . server . db . ActorPostgresDriver < nl > + import slick . dbio . Effect . Read < nl > import slick . lifted . Tag < nl > import im . actor . server . db . ActorPostgresDriver . api . _ < nl > import im . actor . server . model . StickerPack < nl > + import slick . profile . FixedSqlAction < nl > < nl > class StickerPackTable ( tag : Tag ) extends Table [ StickerPack ] ( tag , " sticker _ packs " ) { < nl > def id = column [ Int ] ( " id " , O . PrimaryKey ) < nl > @ @ - 23 , 6 + 26 , 8 @ @ object StickerPackRepo { < nl > < nl > / / def findOwnPacks ( userId : Int ) = stickerPacks . filter ( p ⇒ p . isDefault | | p . ownerUserId = = = userId ) . result < nl > < nl > + def exists ( userId : Int , packId : Int ) : DBIO [ Boolean ] = stickerPacks . filter ( p ⇒ ( p . id = = = packId ) & & ( p . ownerUserId = = = userId ) ) . exists . result < nl > + < nl > def find ( id : Int ) = stickerPacks . filter ( _ . id = = = id ) . result . headOption < nl > < nl > def find ( ids : Seq [ Int ] , withDefault : Boolean = true ) : DBIO [ Seq [ StickerPack ] ] = < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala < nl > index e1b2d50 . . 50eab8a 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala < nl > @ @ - 40 , 6 + 40 , 9 @ @ trait FutureResultCats [ ErrorCase ] { < nl > def fromFutureEither [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Either [ Throwable , A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ Xor . fromEither ( either . left . map ( errorHandle ) ) ) ) < nl > < nl > + def fromFutureXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Throwable Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = < nl > + XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ either . leftMap ( errorHandle ) ) ) < nl > + < nl > def fromFutureBoolean ( failure : ErrorCase ) ( fa : Future [ Boolean ] ) ( implicit ec : ExecutionContext ) : Result [ Unit ] = < nl > XorT [ Future , ErrorCase , Unit ] ( fa map ( _ . toXor ( failure ) ) ) < nl > < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 2ef537a . . 2c5a220 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 50 , 8 + 50 , 8 @ @ final case class ActorServer ( system : ActorSystem ) < nl > object ActorServer { < nl > / * * < nl > * Creates a new Actor Server builder < nl > - * < nl > - * @ return < nl > + * < nl > + * @ return < nl > * / < nl > def newBuilder : ActorServerBuilder = ActorServerBuilder ( ) < nl > } < nl > @ @ - 73 , 8 + 73 , 8 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > < nl > / * * < nl > * Starts a server < nl > - * < nl > - * @ return < nl > + * < nl > + * @ return < nl > * / < nl > def start ( ) : ActorServer = { < nl > SessionMessage . register ( ) < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index afecc15 . . ce81cf8 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import sbt . _ < nl > object Dependencies { < nl > object V { < nl > val actorCommons = " 0 . 0 . 8 " < nl > - val actorBotkit = " 1 . 0 . 50 " < nl > + val actorBotkit = " 1 . 0 . 52 " < nl > val akka = " 2 . 4 . 0 " < nl > val akkaExperimental = " 2 . 0 - M1 " < nl > val cats = " 0 . 2 . 0 "

TEST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala 
 index 83be924 . . 13ec625 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala 
 @ @ - 37 , 10 + 37 , 16 @ @ trait ApiToBotConversions { 
 
 implicit def toTextMessageEx ( ex : ApiTextMessageEx ) : TextMessageEx = 
 ex match { 
 - case ApiTextModernMessage ( text , senderNameOverride , senderPhotoOverride , style ) ⇒ TextModernMessage ( text , senderNameOverride , senderPhotoOverride , style ) 
 - case ApiTextExMarkdown ( text ) ⇒ TextModernMessage ( Some ( text ) , None , None , None ) 
 + case ApiTextModernMessage ( text , senderNameOverride , senderPhotoOverride , style , attaches ) ⇒ TextModernMessage ( text , senderNameOverride , toAvatar ( senderPhotoOverride ) , style , attaches ) 
 + case ApiTextExMarkdown ( text ) ⇒ TextModernMessage ( Some ( text ) , None , None , None , Vector . empty ) 
 } 
 
 + implicit def toModernAttach ( a : ApiTextModernAttach ) : TextModernAttach = 
 + TextModernAttach ( a . title , a . titleUrl , a . titleIcon , a . text , a . style , a . fields ) 
 + 
 + implicit def toModernAttach ( as : IndexedSeq [ ApiTextModernAttach ] ) : IndexedSeq [ TextModernAttach ] = 
 + as map toModernAttach 
 + 
 implicit def toTextMessageEx ( ex : Option [ ApiTextMessageEx ] ) : Option [ TextMessageEx ] = 
 ex map toTextMessageEx 
 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala 
 index 8b547e3 . . f222ffa 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala 
 @ @ - 25 , 9 + 25 , 15 @ @ trait BotToApiConversions { 
 implicit def toDocumentExt ( ex : Option [ DocumentEx ] ) : Option [ ApiDocumentEx ] = ex map toDocumentExt 
 
 implicit def toTextMessageEx ( ex : TextMessageEx ) : ApiTextMessageEx = ex match { 
 - case TextModernMessage ( text , senderNameOverride , senderPhotoOverride , style ) ⇒ ApiTextModernMessage ( text , senderNameOverride , senderPhotoOverride , style ) 
 + case TextModernMessage ( text , senderNameOverride , senderPhotoOverride , style , attaches ) ⇒ ApiTextModernMessage ( text , senderNameOverride , senderPhotoOverride , style , attaches ) 
 } 
 
 + implicit def toModernAttach ( a : TextModernAttach ) : ApiTextModernAttach = 
 + ApiTextModernAttach ( a . title , a . titleUrl , a . titleIcon , a . text , a . style , a . fields ) 
 + 
 + implicit def toModernAttach ( as : IndexedSeq [ TextModernAttach ] ) : IndexedSeq [ ApiTextModernAttach ] = 
 + as map toModernAttach 
 + 
 implicit def toTextMessageEx ( ex : Option [ TextMessageEx ] ) : Option [ ApiTextMessageEx ] = 
 ex map toTextMessageEx 
 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 index c3c8303 . . 682a7a0 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / UsersBotService . scala 
 @ @ - 71 , 6 + 71 , 7 @ @ private [ bot ] final class UsersBotService ( system : ActorSystem ) extends BotService 
 private def findUser ( query : String ) = RequestHandler [ FindUser , FindUser # Response ] { 
 ( botUserId , botAuthId , botAuthSid ) ⇒ 
 ifIsAdmin ( botUserId ) { 
 + 
 ( for { 
 ids ← fromFuture ( userExt . findUserIds ( query ) ) 
 users ← fromFuture ( ftraverse ( ids ) ( UserUtils . safeGetUser ( _ , botUserId , botAuthId ) ) ) map ( _ . flatten ) 
 diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json 
 index 626b9f8 . . 97ce822 100644 
 - - - a / actor - server / actor - core / src / main / actor - api / actor . json 
 + + + b / actor - server / actor - core / src / main / actor - api / actor . json 
 @ @ - 2929 , 13 + 2929 , 31 @ @ 
 " type " : " reference " , 
 " argument " : " text " , 
 " category " : " full " , 
 - " description " : " Text of message " 
 + " description " : " optional text of message " 
 } , 
 { 
 " type " : " reference " , 
 " argument " : " senderNameOverride " , 
 " category " : " full " , 
 - " description " : " Overriding of sender " 
 + " description " : " optional overriding of sender " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " senderPhotoOverride " , 
 + " category " : " full " , 
 + " description " : " optional overriding sender ' s photo " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " style " , 
 + " category " : " full " , 
 + " description " : " optional paragraph style " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " attaches " , 
 + " category " : " full " , 
 + " description " : " optional Attaches of message " 
 } 
 ] , 
 " trait " : { 
 @ @ - 2981 , 6 + 2999 , 17 @ @ 
 } , 
 " id " : 4 , 
 " name " : " style " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : { 
 + " type " : " struct " , 
 + " childType " : " TextModernAttach " 
 + } 
 + } , 
 + " id " : 5 , 
 + " name " : " attaches " 
 } 
 ] 
 } 
 diff - - git a / actor - server / notes / 1 . 0 . 74 . markdown b / actor - server / notes / 1 . 0 . 74 . markdown 
 new file mode 100644 
 index 0000000 . . 2c388e4 
 - - - / dev / null 
 + + + b / actor - server / notes / 1 . 0 . 74 . markdown 
 @ @ - 0 , 0 + 1 , 2 @ @ 
 + * Api schema update 
 + * Added attaches to TextModernMessage 
 \ No newline at end of file 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index 77dc3c2 . . 01ba19c 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import sbt . _ 
 object Dependencies { 
 object V { 
 val actorCommons = " 0 . 0 . 8 " 
 - val actorBotkit = " 1 . 0 . 59 " 
 + val actorBotkit = " 1 . 0 . 60 " 
 val akka = " 2 . 4 . 0 " 
 val akkaExperimental = " 2 . 0 - M1 " 
 val cats = " 0 . 2 . 0 "

NEAREST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala 
 index 8162272 . . 83be924 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / ApiToBotConversions . scala 
 @ @ - 57 , 8 + 57 , 9 @ @ trait ApiToBotConversions { 
 thumb , 
 ext ) ⇒ DocumentMessage ( fileId , accessHash , fileSize . toLong , name , mimeType , thumb , ext ) 
 case ApiServiceMessage ( text , _ ) ⇒ ServiceMessage ( text ) 
 - case _ : ApiStickerMessage ⇒ UnsupportedMessage 
 - case _ : ApiUnsupportedMessage ⇒ UnsupportedMessage 
 + case ApiStickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) ⇒ 
 + StickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) 
 + case _ : ApiUnsupportedMessage ⇒ UnsupportedMessage 
 } 
 
 implicit def toTextModernAttach ( ma : ApiTextModernAttach ) : TextModernAttach = 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 index 2432bf1 . . 07964fe 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotServerBlueprint . scala 
 @ @ - 25 , 6 + 25 , 7 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , 
 private val webhooksService = new WebHooksBotService ( system ) 
 private val usersService = new UsersBotService ( system ) 
 private val groupsService = new GroupsBotService ( system ) 
 + private val stickersService = new StickersBotService ( system ) 
 
 private val log = Logging ( system , getClass ) 
 
 @ @ - 85 , 5 + 86 , 6 @ @ final class BotServerBlueprint ( botUserId : Int , botAuthId : Long , botAuthSid : Int , 
 case Services . WebHooks ⇒ webhooksService 
 case Services . Users ⇒ usersService 
 case Services . Groups ⇒ groupsService 
 + case Services . Stickers ⇒ stickersService 
 } 
 } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala 
 index bdb1189 . . 8b547e3 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotToApiConversions . scala 
 @ @ - 74 , 6 + 74 , 12 @ @ trait BotToApiConversions { 
 implicit def toColor ( color : Option [ Color ] ) : Option [ ApiColor ] = 
 color map toColor 
 
 + implicit def toImageLocation ( il : ImageLocation ) : ApiImageLocation = 
 + ApiImageLocation ( il . fileLocation , il . width , il . height , il . fileSize ) 
 + 
 + implicit def toImageLocation ( il : Option [ ImageLocation ] ) : Option [ ApiImageLocation ] = 
 + il map toImageLocation 
 + 
 implicit def toMessage ( message : MessageBody ) : ApiMessage = 
 message match { 
 case TextMessage ( text , ext ) ⇒ ApiTextMessage ( text , Vector . empty , ext ) 
 @ @ - 86 , 6 + 92 , 8 @ @ trait BotToApiConversions { 
 mimeType , 
 thumb , 
 ext ) ⇒ ApiDocumentMessage ( fileId , accessHash , fileSize . toInt , name , mimeType , thumb , ext ) 
 + case StickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) ⇒ 
 + ApiStickerMessage ( stickerId , fastPreview , image512 , image256 , stickerCollectionId , stickerCollectionAccessHash ) 
 case ServiceMessage ( _ ) ⇒ throw new RuntimeException ( " Service messages are not supported " ) 
 case UnsupportedMessage ⇒ ApiUnsupportedMessage 
 } 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala 
 new file mode 100644 
 index 0000000 . . dc6a385 
 - - - / dev / null 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / services / StickersBotService . scala 
 @ @ - 0 , 0 + 1 , 52 @ @ 
 + package im . actor . server . bot . services 
 + 
 + import akka . actor . ActorSystem 
 + import im . actor . bots . BotMessages . _ 
 + import im . actor . concurrent . FutureResultCats 
 + import im . actor . server . bot . { ApiToBotConversions , BotServiceBase } 
 + import im . actor . server . file . { S3StorageExtension , S3StorageAdapter , ImageUtils } 
 + import im . actor . server . stickers . { StickerErrors , StickersExtension } 
 + 
 + private [ bot ] object StickersBotErrors { 
 + val LocationInvalid = BotError ( 400 , " LOCATION _ INVALID " ) 
 + val NotAllowedToEdit = BotError ( 403 , " NOT _ ALLOWED _ TO _ EDIT " ) 
 + val FailedToMakePreview = BotError ( 500 , " FAILED _ MAKE _ PREVIEW " ) 
 + } 
 + 
 + private [ bot ] final class StickersBotService ( _ system : ActorSystem ) extends BotServiceBase ( _ system ) with FutureResultCats [ BotError ] with ApiToBotConversions { 
 + 
 + import ImageUtils . _ 
 + import StickersBotErrors . _ 
 + 
 + private implicit val system : ActorSystem = _ system 
 + import system . dispatcher 
 + 
 + private val stickerExt = StickersExtension ( system ) 
 + private implicit val fsAdapter : S3StorageAdapter = S3StorageExtension ( system ) . s3StorageAdapter 
 + 
 + override def handlers : Handlers = { 
 + case CreateStickerPack ⇒ createStickerPack ( ) . toWeak 
 + case AddSticker ( packId , emoji , fileLocation ) ⇒ addSticker ( packId , emoji , fileLocation ) . toWeak 
 + } 
 + 
 + private def createStickerPack ( ) = RequestHandler [ CreateStickerPack , CreateStickerPack # Response ] { 
 + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ 
 + ifIsAdmin ( botUserId ) { 
 + ( for { 
 + packId ← fromFuture ( stickerExt . createPack ( botUserId , isDefault = false ) ) 
 + } yield Container ( packId ) ) . value 
 + } 
 + } 
 + 
 + private def addSticker ( packId : Int , emoji : Option [ String ] , fileLocation : FileLocation ) = RequestHandler [ AddSticker , AddSticker # Response ] { 
 + ( botUserId : BotUserId , botAuthId : BotAuthId , botAuthSid : BotAuthSid ) ⇒ 
 + ifIsAdmin ( botUserId ) { 
 + ( for { 
 + _ ← fromFutureBoolean ( NotAllowedToEdit ) ( stickerExt . isOwner ( botUserId , packId ) ) 
 + sticker ← fromFutureEither ( _ ⇒ LocationInvalid ) ( scaleStickerF ( fileLocation . fileId ) ) 
 + _ ← fromFutureXor ( { case StickerErrors . NoPreview ⇒ FailedToMakePreview } ) ( stickerExt . addSticker ( botUserId , packId , emoji , sticker ) ) 
 + } yield Void ) . value 
 + } 
 + } 
 + 
 + } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 index 634bdca . . f7fdfe5 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 @ @ - 49 , 13 + 49 , 17 @ @ object ImageUtils { 
 aimg . scale ( scaleFactor ) 
 } 
 
 - def resizeToSmall ( aimg : AsyncImage ) ( implicit ec : ExecutionContext ) : Future [ AsyncImage ] = resizeTo ( aimg , SmallSize ) 
 - 
 - def resizeToLarge ( aimg : AsyncImage ) ( implicit ec : ExecutionContext ) : Future [ AsyncImage ] = resizeTo ( aimg , LargeSize ) 
 - 
 def dimensions ( aimg : AsyncImage ) ( implicit ec : ExecutionContext ) : ( Int , Int ) = 
 ( aimg . width , aimg . height ) 
 
 + def scaleStickerF ( fullFileId : Long ) ( 
 + implicit 
 + fsAdapter : FileStorageAdapter , 
 + ec : ExecutionContext , 
 + system : ActorSystem 
 + ) : Future [ Either [ Throwable , Avatar ] ] = 
 + DbExtension ( system ) . db . run ( scaleAvatar ( fullFileId , ThreadLocalRandom . current ( ) , smallSize = 128 , largeSize = 256 ) ) 
 + 
 def scaleAvatarF ( fullFileId : Long ) ( 
 implicit 
 fsAdapter : FileStorageAdapter , 
 @ @ - 74 , 7 + 78 , 20 @ @ object ImageUtils { 
 
 def scaleAvatar ( 
 fullFileId : Long , 
 - rnd : ThreadLocalRandom 
 + rng : ThreadLocalRandom 
 + ) ( 
 + implicit 
 + fsAdapter : FileStorageAdapter , 
 + ec : ExecutionContext , 
 + system : ActorSystem 
 + ) : DBIO [ Either [ Throwable , Avatar ] ] = 
 + scaleAvatar ( fullFileId , rng , SmallSize , LargeSize ) 
 + 
 + def scaleAvatar ( 
 + fullFileId : Long , 
 + rng : ThreadLocalRandom , 
 + smallSize : Int , 
 + largeSize : Int 
 ) ( 
 implicit 
 fsAdapter : FileStorageAdapter , 
 @ @ - 92 , 8 + 109 , 8 @ @ object ImageUtils { 
 fullAimg ← DBIO . from ( AsyncImage ( fullFile ) ) 
 ( fiw , fih ) = dimensions ( fullAimg ) 
 
 - smallAimg ← DBIO . from ( resizeToSmall ( fullAimg ) ) 
 - largeAimg ← DBIO . from ( resizeToLarge ( fullAimg ) ) 
 + smallAimg ← DBIO . from ( resizeTo ( fullAimg , smallSize ) ) 
 + largeAimg ← DBIO . from ( resizeTo ( fullAimg , largeSize ) ) 
 
 smallFile = fullFile . getParentFile . toPath . resolve ( smallFileName ) . toFile 
 largeFile = fullFile . getParentFile . toPath . resolve ( largeFileName ) . toFile 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala 
 new file mode 100644 
 index 0000000 . . 9c273f7 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / stickers / StickersExtension . scala 
 @ @ - 0 , 0 + 1 , 71 @ @ 
 + package im . actor . server . stickers 
 + 
 + import akka . actor . _ 
 + import cats . data . Xor 
 + import im . actor . concurrent . FutureResultCats 
 + import im . actor . server . acl . ACLUtils 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . file . Avatar 
 + import im . actor . server . model . { StickerData , StickerPack } 
 + import im . actor . server . persist . { StickerDataRepo , OwnStickerPackRepo , StickerPackRepo } 
 + 
 + import scala . concurrent . Future 
 + import scala . concurrent . forkjoin . ThreadLocalRandom 
 + import scala . util . control . NoStackTrace 
 + 
 + object StickerErrors { 
 + 
 + abstract class StickerError ( message : String ) extends RuntimeException ( message ) with NoStackTrace 
 + 
 + case object NoPreview extends StickerError ( " Got no preview after resize " ) 
 + } 
 + 
 + sealed trait StickersExtension extends Extension 
 + 
 + final class StickersExtensionImpl ( _ system : ActorSystem ) extends StickersExtension with FutureResultCats [ Throwable ] { 
 + 
 + import StickerErrors . _ 
 + 
 + implicit val system : ActorSystem = _ system 
 + import system . dispatcher 
 + 
 + private val db = DbExtension ( system ) . db 
 + 
 + def createPack ( creatorUserId : Int , isDefault : Boolean ) : Future [ Int ] = { 
 + val rng = ThreadLocalRandom . current ( ) 
 + val packId = rng . nextInt ( ) 
 + val accessSalt = ACLUtils . nextAccessSalt ( rng ) 
 + db . run ( for { 
 + _ ← StickerPackRepo . create ( StickerPack ( packId , accessSalt , creatorUserId , isDefault ) ) 
 + _ ← OwnStickerPackRepo . create ( creatorUserId , packId ) 
 + } yield packId ) 
 + } 
 + 
 + def isOwner ( userId : Int , packId : Int ) : Future [ Boolean ] = db . run ( StickerPackRepo . exists ( userId , packId ) ) 
 + 
 + def addSticker ( userId : Int , packId : Int , emoji : Option [ String ] , resizedSticker : Avatar ) : Future [ Throwable Xor Unit ] = { 
 + val rng = ThreadLocalRandom . current ( ) 
 + val id = rng . nextInt ( ) 
 + ( for { 
 + image128 ← fromOption ( NoPreview ) ( resizedSticker . smallImage ) 
 + image256 = resizedSticker . largeImage 
 + image512 = resizedSticker . fullImage 
 + sticker = StickerData ( id , packId , emoji , 
 + image128FileId = image128 . fileLocation . fileId , 
 + image128FileHash = image128 . fileLocation . accessHash , 
 + image128FileSize = image128 . fileSize , 
 + image256FileId = image256 map ( _ . fileLocation . fileId ) , 
 + image256FileHash = image256 map ( _ . fileLocation . accessHash ) , 
 + image256FileSize = image256 map ( _ . fileSize ) , 
 + image512FileId = image512 map ( _ . fileLocation . fileId ) , 
 + image512FileHash = image512 map ( _ . fileLocation . accessHash ) , 
 + image512FileSize = image512 map ( _ . fileSize ) ) 
 + _ ← fromFuture ( db . run ( StickerDataRepo . create ( sticker ) ) ) 
 + } yield ( ) ) . value 
 + } 
 + } 
 + 
 + object StickersExtension extends ExtensionId [ StickersExtensionImpl ] with ExtensionIdProvider { 
 + override def lookup ( ) = StickersExtension 
 + override def createExtension ( system : ExtendedActorSystem ) = new StickersExtensionImpl ( system ) 
 + } 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala 
 index 4d5046d . . 8774910 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerDataRepo . scala 
 @ @ - 2 , 6 + 2 , 8 @ @ package im . actor . server . persist 
 
 import im . actor . server . model . StickerData 
 import im . actor . server . db . ActorPostgresDriver . api . _ 
 + import slick . dbio . Effect . Write 
 + import slick . profile . FixedSqlAction 
 
 class StickerDataTable ( tag : Tag ) extends Table [ StickerData ] ( tag , " sticker _ data " ) { 
 def id = column [ Int ] ( " id " , O . PrimaryKey ) 
 @ @ - 35 , 10 + 37 , 12 @ @ class StickerDataTable ( tag : Tag ) extends Table [ StickerData ] ( tag , " sticker _ data " ) 
 
 object StickerDataRepo { 
 
 - val stickerDatas = TableQuery [ StickerDataTable ] 
 + val stickerData = TableQuery [ StickerDataTable ] 
 
 - def find ( id : Int ) = stickerDatas . filter ( _ . id = = = id ) . result 
 + def create ( data : StickerData ) : DBIO [ Int ] = stickerData + = data 
 
 - def findByPack ( packId : Int ) = stickerDatas . filter ( _ . packId = = = packId ) . result 
 + def find ( id : Int ) = stickerData . filter ( _ . id = = = id ) . result 
 + 
 + def findByPack ( packId : Int ) = stickerData . filter ( _ . packId = = = packId ) . result 
 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala 
 index f0d560f . . a280f61 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / StickerPackRepo . scala 
 @ @ - 1 , 8 + 1 , 11 @ @ 
 package im . actor . server . persist 
 
 + import im . actor . server . db . ActorPostgresDriver 
 + import slick . dbio . Effect . Read 
 import slick . lifted . Tag 
 import im . actor . server . db . ActorPostgresDriver . api . _ 
 import im . actor . server . model . StickerPack 
 + import slick . profile . FixedSqlAction 
 
 class StickerPackTable ( tag : Tag ) extends Table [ StickerPack ] ( tag , " sticker _ packs " ) { 
 def id = column [ Int ] ( " id " , O . PrimaryKey ) 
 @ @ - 23 , 6 + 26 , 8 @ @ object StickerPackRepo { 
 
 / / def findOwnPacks ( userId : Int ) = stickerPacks . filter ( p ⇒ p . isDefault | | p . ownerUserId = = = userId ) . result 
 
 + def exists ( userId : Int , packId : Int ) : DBIO [ Boolean ] = stickerPacks . filter ( p ⇒ ( p . id = = = packId ) & & ( p . ownerUserId = = = userId ) ) . exists . result 
 + 
 def find ( id : Int ) = stickerPacks . filter ( _ . id = = = id ) . result . headOption 
 
 def find ( ids : Seq [ Int ] , withDefault : Boolean = true ) : DBIO [ Seq [ StickerPack ] ] = 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala 
 index e1b2d50 . . 50eab8a 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / concurrent / FutureResultCats . scala 
 @ @ - 40 , 6 + 40 , 9 @ @ trait FutureResultCats [ ErrorCase ] { 
 def fromFutureEither [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Either [ Throwable , A ] ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ Xor . fromEither ( either . left . map ( errorHandle ) ) ) ) 
 
 + def fromFutureXor [ A ] ( errorHandle : Throwable ⇒ ErrorCase ) ( fea : Future [ Throwable Xor A ] ) ( implicit ec : ExecutionContext ) : Result [ A ] = 
 + XorT [ Future , ErrorCase , A ] ( fea map ( either ⇒ either . leftMap ( errorHandle ) ) ) 
 + 
 def fromFutureBoolean ( failure : ErrorCase ) ( fa : Future [ Boolean ] ) ( implicit ec : ExecutionContext ) : Result [ Unit ] = 
 XorT [ Future , ErrorCase , Unit ] ( fa map ( _ . toXor ( failure ) ) ) 
 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 2ef537a . . 2c5a220 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 50 , 8 + 50 , 8 @ @ final case class ActorServer ( system : ActorSystem ) 
 object ActorServer { 
 / * * 
 * Creates a new Actor Server builder 
 - * 
 - * @ return 
 + * 
 + * @ return 
 * / 
 def newBuilder : ActorServerBuilder = ActorServerBuilder ( ) 
 } 
 @ @ - 73 , 8 + 73 , 8 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 
 / * * 
 * Starts a server 
 - * 
 - * @ return 
 + * 
 + * @ return 
 * / 
 def start ( ) : ActorServer = { 
 SessionMessage . register ( ) 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index afecc15 . . ce81cf8 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import sbt . _ 
 object Dependencies { 
 object V { 
 val actorCommons = " 0 . 0 . 8 " 
 - val actorBotkit = " 1 . 0 . 50 " 
 + val actorBotkit = " 1 . 0 . 52 " 
 val akka = " 2 . 4 . 0 " 
 val akkaExperimental = " 2 . 0 - M1 " 
 val cats = " 0 . 2 . 0 "
