BLEU SCORE: 0.06766165252145301

TEST MSG: feat ( iOS + core ) : Global Search
GENERATED MSG: wip ( SDK ) : Adding dialog desc processing and Grouped Dialogs model

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift < nl > index 543a4d0 . . 5703108 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift 	 < nl > @ @ - 32 , 7 + 32 , 7 @ @ public class AADialogsListContentController : AAContentTableController , UISearchB < nl > if enableSearch { < nl > search ( AADialogSearchCell . self ) { ( s ) - > ( ) in < nl > < nl > - s . searchList = Actor . buildSearchDisplayList ( ) < nl > + s . searchModel = Actor . buildGlobalSearchModel ( ) < nl > < nl > s . selectAction = { ( itm ) - > ( ) in < nl > self . delegate ? . searchDidTap ( self , entity : itm ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentControllerDelegate . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentControllerDelegate . swift < nl > index dc425fa . . 26f9434 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentControllerDelegate . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentControllerDelegate . swift 	 < nl > @ @ - 8 , 5 + 8 , 5 @ @ public protocol AADialogsListContentControllerDelegate { < nl > < nl > func recentsDidTap ( controller : AADialogsListContentController , dialog : ACDialog ) - > Bool < nl > < nl > - func searchDidTap ( controller : AADialogsListContentController , entity : ACSearchEntity ) < nl > + func searchDidTap ( controller : AADialogsListContentController , entity : ACSearchResult ) < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogSearchCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogSearchCell . swift < nl > index 37918f2 . . ac1b90b 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogSearchCell . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogSearchCell . swift 	 < nl > @ @ - 6 , 7 + 6 , 7 @ @ import UIKit < nl > < nl > public class AADialogSearchCell : AATableViewCell , AABindedSearchCell { < nl > < nl > - public typealias BindData = ACSearchEntity < nl > + public typealias BindData = ACSearchResult < nl > < nl > public static func bindedCellHeight ( item : BindData ) - > CGFloat { < nl > < nl > @ @ - 31 , 7 + 31 , 7 @ @ public class AADialogSearchCell : AATableViewCell , AABindedSearchCell { < nl > fatalError ( " init ( coder : ) has not been implemented " ) < nl > } < nl > < nl > - public func bind ( item : ACSearchEntity , search : String ? ) { < nl > + public func bind ( item : ACSearchResult , search : String ? ) { < nl > avatarView . bind ( item . title , id : Int ( item . peer . peerId ) , avatar : item . avatar ) < nl > titleView . text = item . title < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift < nl > index 27f532e . . 5668969 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 	 < nl > @ @ - 405 , 23 + 405 , 26 @ @ private class AMBaseTableDelegate : NSObject , UITableViewDelegate , UITableViewDat < nl > < nl > public class AAManagedSearchConfig < BindCell where BindCell : AABindedSearchCell , BindCell : UITableViewCell > { < nl > < nl > - public var searchList : ARBindedDisplayList ! < nl > + public var searchList : ARBindedDisplayList ? < nl > + public var searchModel : ARSearchValueModel ? < nl > public var selectAction : ( ( BindCell . BindData ) - > ( ) ) ? < nl > public var isSearchAutoHide : Bool = true < nl > public var didBind : ( ( c : BindCell , d : BindCell . BindData ) - > ( ) ) ? < nl > } < nl > < nl > - private class AAManagedSearchController < BindCell where BindCell : AABindedSearchCell , BindCell : UITableViewCell > : NSObject , UISearchBarDelegate , UISearchDisplayDelegate , UITableViewDataSource , UITableViewDelegate , ARDisplayList _ Listener { < nl > + private class AAManagedSearchController < BindCell where BindCell : AABindedSearchCell , BindCell : UITableViewCell > : NSObject , UISearchBarDelegate , UISearchDisplayDelegate , UITableViewDataSource , UITableViewDelegate , ARDisplayList _ Listener , ARValueChangedListener { < nl > < nl > let config : AAManagedSearchConfig < BindCell > < nl > - let displayList : ARBindedDisplayList < nl > + let searchList : ARBindedDisplayList ? < nl > + let searchModel : ARSearchValueModel ? < nl > let searchDisplay : UISearchDisplayController < nl > < nl > init ( config : AAManagedSearchConfig < BindCell > , controller : UIViewController , tableView : UITableView ) { < nl > < nl > self . config = config < nl > < nl > - self . displayList = config . searchList < nl > + self . searchList = config . searchList < nl > + self . searchModel = config . searchModel < nl > < nl > let style = ActorSDK . sharedActor ( ) . style < nl > let searchBar = UISearchBar ( ) < nl > @ @ - 481 , 24 + 484 , 48 @ @ private class AAManagedSearchController < BindCell where BindCell : AABindedSearchC < nl > < nl > / / Start receiving events < nl > < nl > - self . displayList . addListener ( self ) < nl > + if let ds = searchList { < nl > + ds . addListener ( self ) < nl > + } else if let sm = searchModel { < nl > + sm . getResults ( ) . subscribeWithListener ( self ) < nl > + } else { < nl > + fatalError ( " No search model or search list is set ! " ) < nl > + } < nl > } < nl > < nl > / / Model < nl > < nl > < nl > func objectAtIndexPath ( indexPath : NSIndexPath ) - > BindCell . BindData { < nl > - return displayList . itemWithIndex ( jint ( indexPath . row ) ) as ! BindCell . BindData < nl > + if let ds = searchList { < nl > + return ds . itemWithIndex ( jint ( indexPath . row ) ) as ! BindCell . BindData < nl > + } else if let sm = searchModel { < nl > + let list = sm . getResults ( ) . get ( ) as ! JavaUtilList < nl > + return list . getWithInt ( jint ( indexPath . row ) ) as ! BindCell . BindData < nl > + } else { < nl > + fatalError ( " No search model or search list is set ! " ) < nl > + } < nl > } < nl > < nl > @ objc func onCollectionChanged ( ) { < nl > searchDisplay . searchResultsTableView . reloadData ( ) < nl > } < nl > < nl > + @ objc func onChanged ( val : AnyObject ! , withModel valueModel : ARValue ! ) { < nl > + searchDisplay . searchResultsTableView . reloadData ( ) < nl > + } < nl > + < nl > / / Table view data < nl > < nl > @ objc func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) - > Int { < nl > - return Int ( displayList . size ( ) ) ; < nl > + if let ds = searchList { < nl > + return Int ( ds . size ( ) ) < nl > + } else if let sm = searchModel { < nl > + let list = sm . getResults ( ) . get ( ) as ! JavaUtilList < nl > + return Int ( list . size ( ) ) < nl > + } else { < nl > + fatalError ( " No search model or search list is set ! " ) < nl > + } < nl > } < nl > < nl > @ objc func tableView ( tableView : UITableView , heightForRowAtIndexPath indexPath : NSIndexPath ) - > CGFloat { < nl > @ @ - 521 , 11 + 548 , 17 @ @ private class AAManagedSearchController < BindCell where BindCell : AABindedSearchC < nl > / / Search updating < nl > < nl > @ objc func searchBar ( searchBar : UISearchBar , textDidChange searchText : String ) { < nl > - let normalized = searchText . trim ( ) . lowercaseString < nl > - if ( normalized . length > 0 ) { < nl > - displayList . initSearchWithQuery ( normalized , withRefresh : false ) < nl > + if let ds = searchList { < nl > + let normalized = searchText . trim ( ) . lowercaseString < nl > + if ( normalized . length > 0 ) { < nl > + ds . initSearchWithQuery ( normalized , withRefresh : false ) < nl > + } else { < nl > + ds . initEmpty ( ) < nl > + } < nl > + } else if let sm = searchModel { < nl > + sm . queryChangedWithNSString ( searchText ) < nl > } else { < nl > - displayList . initEmpty ( ) < nl > + fatalError ( " No search model or search list is set ! " ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift < nl > index 4a69d9b . . 9f9df5a 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift < nl > @ @ - 124 , 7 + 124 , 7 @ @ public class AARecentViewController : AADialogsListContentController , AADialogsLi < nl > return false < nl > } < nl > < nl > - public func searchDidTap ( controller : AADialogsListContentController , entity : ACSearchEntity ) { < nl > + public func searchDidTap ( controller : AADialogsListContentController , entity : ACSearchResult ) { < nl > if let customController = ActorSDK . sharedActor ( ) . delegate . actorControllerForConversation ( entity . peer ) { < nl > self . navigateDetail ( customController ) < nl > } else { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index a07d9c5 . . 14ee5f3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 28 , 6 + 28 , 7 @ @ import im . actor . core . entity . MessageSearchEntity ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerSearchEntity ; < nl > import im . actor . core . entity . PeerSearchType ; < nl > + import im . actor . core . entity . SearchResult ; < nl > import im . actor . core . entity . Sex ; < nl > import im . actor . core . entity . User ; < nl > import im . actor . core . entity . WebActionDescriptor ; < nl > @ @ - 70 , 6 + 71 , 7 @ @ import im . actor . core . viewmodel . UserVM ; < nl > import im . actor . runtime . actors . ActorSystem ; < nl > import im . actor . runtime . actors . messages . Void ; < nl > import im . actor . runtime . mvvm . MVVMCollection ; < nl > + import im . actor . runtime . mvvm . SearchValueModel ; < nl > import im . actor . runtime . mvvm . ValueModel ; < nl > import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . storage . PreferencesStorage ; < nl > @ @ - 1196 , 6 + 1198 , 16 @ @ public class Messenger { < nl > . failure ( e - > callback . onError ( e ) ) ; < nl > } < nl > < nl > + / * * < nl > + * Building global search model < nl > + * < nl > + * @ return search model < nl > + * / < nl > + @ ObjectiveCName ( " buildGlobalSearchModel " ) < nl > + public SearchValueModel < SearchResult > buildGlobalSearchModel ( ) { < nl > + return modules . getSearchModule ( ) . buildSearchModel ( ) ; < nl > + } < nl > + < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Calls < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / SearchResult . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / SearchResult . java < nl > new file mode 100644 < nl > index 0000000 . . 4b7e25b < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / SearchResult . java < nl > @ @ - 0 , 0 + 1 , 50 @ @ < nl > + package im . actor . core . entity ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import org . jetbrains . annotations . NotNull ; < nl > + import org . jetbrains . annotations . Nullable ; < nl > + < nl > + public class SearchResult { < nl > + < nl > + @ NotNull < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Peer peer ; < nl > + @ Nullable < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Avatar avatar ; < nl > + @ NotNull < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final String title ; < nl > + @ Nullable < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final String matchString ; < nl > + < nl > + public SearchResult ( @ NotNull Peer peer , @ Nullable Avatar avatar , @ NotNull String title , < nl > + @ Nullable String matchString ) { < nl > + this . peer = peer ; < nl > + this . avatar = avatar ; < nl > + this . title = title ; < nl > + this . matchString = matchString ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + @ Nullable < nl > + public Avatar getAvatar ( ) { < nl > + return avatar ; < nl > + } < nl > + < nl > + @ NotNull < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + @ Nullable < nl > + public String getMatchString ( ) { < nl > + return matchString ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java < nl > index 5dff5fe . . 5450bb2 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java < nl > @ @ - 23 , 13 + 23 , 16 @ @ import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerSearchEntity ; < nl > import im . actor . core . entity . PeerSearchType ; < nl > import im . actor . core . entity . SearchEntity ; < nl > + import im . actor . core . entity . SearchResult ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . api . ApiSupportConfiguration ; < nl > import im . actor . core . modules . Modules ; < nl > + import im . actor . core . modules . search . sources . GlobalSearchSource ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . collections . ManagedList ; < nl > + import im . actor . runtime . mvvm . SearchValueModel ; < nl > import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > < nl > @ @ - 134 , 6 + 137 , 9 @ @ public class SearchModule extends AbsModule { < nl > . map ( r - > new PeerSearchEntity ( convert ( r . getPeer ( ) ) , r . getOptMatchString ( ) ) ) ) ; < nl > } < nl > < nl > + public SearchValueModel < SearchResult > buildSearchModel ( ) { < nl > + return new SearchValueModel < > ( new GlobalSearchSource ( context ( ) ) ) ; < nl > + } < nl > < nl > / / < nl > / / Local Search < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / sources / GlobalSearchSource . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / sources / GlobalSearchSource . java < nl > new file mode 100644 < nl > index 0000000 . . 888893e < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / sources / GlobalSearchSource . java < nl > @ @ - 0 , 0 + 1 , 78 @ @ < nl > + package im . actor . core . modules . search . sources ; < nl > + < nl > + import java . util . ArrayList ; < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . entity . Group ; < nl > + import im . actor . core . entity . PeerSearchEntity ; < nl > + import im . actor . core . entity . PeerType ; < nl > + import im . actor . core . entity . SearchEntity ; < nl > + import im . actor . core . entity . SearchResult ; < nl > + import im . actor . core . modules . AbsModule ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . viewmodel . UserVM ; < nl > + import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . mvvm . SearchValueSource ; < nl > + import im . actor . runtime . storage . ListEngine ; < nl > + import im . actor . runtime . storage . ListEngineDisplayExt ; < nl > + < nl > + public class GlobalSearchSource extends AbsModule implements SearchValueSource < SearchResult > { < nl > + < nl > + public GlobalSearchSource ( ModuleContext context ) { < nl > + super ( context ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void loadResults ( String query , Consumer < List < SearchResult > > callback ) { < nl > + ListEngine < SearchEntity > searchList = context ( ) . getSearchModule ( ) . getSearchList ( ) ; < nl > + if ( searchList instanceof ListEngineDisplayExt ) { < nl > + ( ( ListEngineDisplayExt < SearchEntity > ) searchList ) . loadBackward ( query , 20 , ( items , topSortKey , bottomSortKey ) - > { < nl > + ArrayList < SearchResult > localResults = new ArrayList < > ( ) ; < nl > + for ( SearchEntity e : items ) { < nl > + localResults . add ( new SearchResult ( e . getPeer ( ) , e . getAvatar ( ) , e . getTitle ( ) , < nl > + null ) ) ; < nl > + } < nl > + callback . apply ( new ArrayList < > ( localResults ) ) ; < nl > + if ( query . length ( ) > 3 ) { < nl > + loadGlobalResults ( query , localResults , callback ) ; < nl > + } < nl > + } ) ; < nl > + } else { < nl > + if ( query . length ( ) > 3 ) { < nl > + loadGlobalResults ( query , new ArrayList < > ( ) , callback ) ; < nl > + } else { < nl > + callback . apply ( new ArrayList < > ( ) ) ; < nl > + } < nl > + } < nl > + } < nl > + < nl > + < nl > + private void loadGlobalResults ( String query , ArrayList < SearchResult > localResults , Consumer < List < SearchResult > > callback ) { < nl > + context ( ) . getSearchModule ( ) . findPeers ( query ) . then ( r - > { < nl > + ArrayList < SearchResult > results = new ArrayList < > ( ) ; < nl > + outer : < nl > + for ( PeerSearchEntity peerSearch : r ) { < nl > + for ( SearchResult l : localResults ) { < nl > + if ( peerSearch . getPeer ( ) . equals ( l . getPeer ( ) ) ) { < nl > + continue outer ; < nl > + } < nl > + } < nl > + if ( peerSearch . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = context ( ) . getGroupsModule ( ) . getGroups ( ) . getValue ( peerSearch . getPeer ( ) . getPeerId ( ) ) ; < nl > + results . add ( new SearchResult ( peerSearch . getPeer ( ) , group . getAvatar ( ) , group . getTitle ( ) , < nl > + peerSearch . getOptMatchString ( ) ) ) ; < nl > + } else if ( peerSearch . getPeer ( ) . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + UserVM user = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( peerSearch . getPeer ( ) . getPeerId ( ) ) ; < nl > + results . add ( new SearchResult ( peerSearch . getPeer ( ) , user . getAvatar ( ) . get ( ) , user . getName ( ) . get ( ) , < nl > + peerSearch . getOptMatchString ( ) ) ) ; < nl > + } < nl > + } < nl > + if ( results . size ( ) > 0 ) { < nl > + ArrayList < SearchResult > combined = new ArrayList < > ( ) ; < nl > + combined . addAll ( localResults ) ; < nl > + combined . addAll ( results ) ; < nl > + callback . apply ( combined ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / AsyncVM . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / AsyncVM . java < nl > index 384f585 . . 8c6eb01 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / AsyncVM . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / AsyncVM . java < nl > @ @ - 9 , 12 + 9 , 9 @ @ public abstract class AsyncVM { < nl > private boolean isDetached ; < nl > < nl > protected final void post ( final Object obj ) { < nl > - im . actor . runtime . Runtime . postToMainThread ( new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - if ( ! isDetached ) { < nl > - onObjectReceived ( obj ) ; < nl > - } < nl > + im . actor . runtime . Runtime . postToMainThread ( ( ) - > { < nl > + if ( ! isDetached ) { < nl > + onObjectReceived ( obj ) ; < nl > } < nl > } ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / SearchValueModel . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / SearchValueModel . java < nl > new file mode 100644 < nl > index 0000000 . . ae74a86 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / SearchValueModel . java < nl > @ @ - 0 , 0 + 1 , 88 @ @ < nl > + package im . actor . runtime . mvvm ; < nl > + < nl > + import java . util . ArrayList ; < nl > + import java . util . List ; < nl > + < nl > + import im . actor . runtime . annotations . MainThread ; < nl > + < nl > + public class SearchValueModel < T > extends AsyncVM { < nl > + < nl > + private SearchValueSource < T > searchValueSource ; < nl > + private int requestId = 0 ; < nl > + private ValueModel < List < T > > results ; < nl > + < nl > + public SearchValueModel ( SearchValueSource < T > searchValueSource ) { < nl > + this . searchValueSource = searchValueSource ; < nl > + this . results = new ValueModel < > ( " search . results " , new ArrayList < > ( ) ) ; < nl > + } < nl > + < nl > + public ValueModel < List < T > > getResults ( ) { < nl > + return results ; < nl > + } < nl > + < nl > + @ MainThread < nl > + public void queryChanged ( String query ) { < nl > + < nl > + final int currentRequestId = + + requestId ; < nl > + < nl > + / / Filtering out trivial sources < nl > + if ( query = = null ) { < nl > + postResults ( new ArrayList < > ( ) , currentRequestId ) ; < nl > + return ; < nl > + } < nl > + query = query . trim ( ) ; < nl > + if ( query . length ( ) = = 0 ) { < nl > + postResults ( new ArrayList < > ( ) , currentRequestId ) ; < nl > + return ; < nl > + } < nl > + < nl > + / / Non - trivial < nl > + searchValueSource . loadResults ( query , r - > { < nl > + if ( currentRequestId = = requestId ) { < nl > + postResults ( r , currentRequestId ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ MainThread < nl > + protected void onResultsReceived ( List < T > res ) { < nl > + results . changeInUIThread ( res ) ; < nl > + } < nl > + < nl > + / / < nl > + / / Internal Loop < nl > + / / < nl > + < nl > + private void postResults ( List < T > res , int requestIndex ) { < nl > + post ( new Results < > ( res , requestIndex ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + protected void onObjectReceived ( Object obj ) { < nl > + if ( obj instanceof Results ) { < nl > + Results < T > r = ( Results < T > ) obj ; < nl > + if ( r . getRequestIndex ( ) = = requestId ) { < nl > + onResultsReceived ( r . getRes ( ) ) ; < nl > + } < nl > + } < nl > + } < nl > + < nl > + protected static class Results < T > { < nl > + < nl > + private List < T > res ; < nl > + private int requestIndex ; < nl > + < nl > + public Results ( List < T > res , int requestIndex ) { < nl > + this . res = res ; < nl > + this . requestIndex = requestIndex ; < nl > + } < nl > + < nl > + public List < T > getRes ( ) { < nl > + return res ; < nl > + } < nl > + < nl > + public int getRequestIndex ( ) { < nl > + return requestIndex ; < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / SearchValueSource . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / SearchValueSource . java < nl > new file mode 100644 < nl > index 0000000 . . c20a78b < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / SearchValueSource . java < nl > @ @ - 0 , 0 + 1 , 9 @ @ < nl > + package im . actor . runtime . mvvm ; < nl > + < nl > + import java . util . List ; < nl > + < nl > + import im . actor . runtime . function . Consumer ; < nl > + < nl > + public interface SearchValueSource < T > { < nl > + void loadResults ( String query , Consumer < List < T > > callback ) ; < nl > + }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java < nl > deleted file mode 100644 < nl > index bb8078b . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java < nl > + + + / dev / null < nl > @ @ - 1 , 80 + 0 , 0 @ @ < nl > - package im . actor . core . entity ; < nl > - < nl > - import com . google . j2objc . annotations . Property ; < nl > - < nl > - import java . io . IOException ; < nl > - < nl > - import im . actor . runtime . bser . BserObject ; < nl > - import im . actor . runtime . bser . BserValues ; < nl > - import im . actor . runtime . bser . BserWriter ; < nl > - import im . actor . runtime . storage . KeyValueItem ; < nl > - < nl > - public class DialogDesc extends BserObject implements KeyValueItem { < nl > - < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private Peer peer ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private String title ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private Avatar avatar ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private boolean isUnread ; < nl > - @ Property ( " readonly , nonatomic " ) < nl > - private int counter ; < nl > - < nl > - public DialogDesc ( Peer peer , String title , Avatar avatar , boolean isUnread , int counter ) { < nl > - this . peer = peer ; < nl > - this . title = title ; < nl > - this . avatar = avatar ; < nl > - this . isUnread = isUnread ; < nl > - this . counter = counter ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public String getTitle ( ) { < nl > - return title ; < nl > - } < nl > - < nl > - public Avatar getAvatar ( ) { < nl > - return avatar ; < nl > - } < nl > - < nl > - public int getCounter ( ) { < nl > - return counter ; < nl > - } < nl > - < nl > - public boolean isUnread ( ) { < nl > - return isUnread ; < nl > - } < nl > - < nl > - @ Override < nl > - public void parse ( BserValues values ) throws IOException { < nl > - peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; < nl > - title = values . getString ( 2 ) ; < nl > - byte [ ] av = values . getBytes ( 3 ) ; < nl > - if ( av ! = null ) { < nl > - avatar = new Avatar ( av ) ; < nl > - } < nl > - counter = values . getInt ( 4 ) ; < nl > - isUnread = values . getBool ( 5 ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void serialize ( BserWriter writer ) throws IOException { < nl > - writer . writeObject ( 1 , peer ) ; < nl > - writer . writeString ( 2 , title ) ; < nl > - if ( avatar ! = null ) { < nl > - writer . writeObject ( 3 , avatar ) ; < nl > - } < nl > - writer . writeInt ( 4 , counter ) ; < nl > - writer . writeBool ( 5 , isUnread ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public long getEngineId ( ) { < nl > - return peer . getUnuqueId ( ) ; < nl > - } < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java < nl > new file mode 100644 < nl > index 0000000 . . d0c5624 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java < nl > @ @ - 0 , 0 + 1 , 69 @ @ < nl > + package im . actor . core . entity ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . bser . BserCreator ; < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . storage . KeyValueItem ; < nl > + < nl > + public class DialogSpec extends BserObject implements KeyValueItem { < nl > + < nl > + public static BserCreator < DialogSpec > CREATOR = new BserCreator < DialogSpec > ( ) { < nl > + @ Override < nl > + public DialogSpec createInstance ( ) { < nl > + return new DialogSpec ( ) ; < nl > + } < nl > + } ; < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private boolean isUnread ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private int counter ; < nl > + < nl > + public DialogSpec ( Peer peer , boolean isUnread , int counter ) { < nl > + this . peer = peer ; < nl > + this . isUnread = isUnread ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + private DialogSpec ( ) { < nl > + < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + < nl > + public boolean isUnread ( ) { < nl > + return isUnread ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; < nl > + counter = values . getInt ( 2 ) ; < nl > + isUnread = values . getBool ( 3 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + writer . writeObject ( 1 , peer ) ; < nl > + writer . writeInt ( 2 , counter ) ; < nl > + writer . writeBool ( 3 , isUnread ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public long getEngineId ( ) { < nl > + return peer . getUnuqueId ( ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > index 28142c9 . . baf3eaf 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java < nl > @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . runtime . storage . PreferencesStorage ; < nl > public abstract class AbsModule { < nl > < nl > public static final String STORAGE _ DIALOGS = " dialogs " ; < nl > + public static final String STORAGE _ DIALOGS _ DESC = " dialogs _ desc " ; < nl > public static final String STORAGE _ USERS = " users " ; < nl > public static final String STORAGE _ GROUPS = " groups " ; < nl > public static final String STORAGE _ DOWNLOADS = " downloads " ; < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 30e0d85 . . 88416ee 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . core . api . rpc . ResponseSeq ; < nl > import im . actor . core . api . updates . UpdateChatClear ; < nl > import im . actor . core . api . updates . UpdateChatDelete ; < nl > import im . actor . core . entity . Dialog ; < nl > + import im . actor . core . entity . DialogSpec ; < nl > import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . Peer ; < nl > @ @ - 48 , 6 + 49 , 7 @ @ import im . actor . core . network . RpcInternalException ; < nl > import im . actor . core . viewmodel . Command ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . core . viewmodel . DialogGroupsVM ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > @ @ - 56 , 6 + 58 , 8 @ @ import im . actor . runtime . actors . tools . BounceFilterActor ; < nl > import im . actor . runtime . eventbus . BusSubscriber ; < nl > import im . actor . runtime . eventbus . Event ; < nl > import im . actor . runtime . files . FileSystemReference ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > + import im . actor . runtime . storage . KeyValueEngine ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > import im . actor . runtime . storage . SyncKeyValue ; < nl > < nl > @ @ - 83 , 11 + 87 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > private final SyncKeyValue cursorStorage ; < nl > < nl > + private final MVVMCollection < DialogSpec , DialogSpecVM > dialogDescKeyValue ; < nl > + < nl > private final DialogGroupsVM dialogGroups = new DialogGroupsVM ( ) ; < nl > < nl > public MessagesModule ( final ModuleContext context ) { < nl > super ( context ) ; < nl > < nl > + this . dialogDescKeyValue = Storage . createKeyValue ( STORAGE _ DIALOGS _ DESC , DialogSpecVM . CREATOR , DialogSpec . CREATOR ) ; < nl > this . cursorStorage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ CURSOR ) ) ; < nl > this . dialogs = Storage . createList ( STORAGE _ DIALOGS , Dialog . CREATOR ) ; < nl > } < nl > @ @ - 157 , 6 + 164 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > return dialogGroups ; < nl > } < nl > < nl > + public MVVMCollection < DialogSpec , DialogSpecVM > getDialogDescKeyValue ( ) { < nl > + return dialogDescKeyValue ; < nl > + } < nl > + < nl > public ActorRef getSendMessageActor ( ) { < nl > return sendMessageActor ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > index f0fdf00 . . b881551 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > @ @ - 1 , 20 + 1 , 26 @ @ < nl > package im . actor . core . modules . internal . messages ; < nl > < nl > import java . util . ArrayList ; < nl > - import java . util . HashMap ; < nl > < nl > import im . actor . core . entity . Avatar ; < nl > - import im . actor . core . entity . DialogDesc ; < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > + import im . actor . core . entity . User ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . internal . messages . entity . GroupedStorage ; < nl > import im . actor . core . modules . utils . ModuleActor ; < nl > import im . actor . core . viewmodel . DialogGroup ; < nl > + import im . actor . core . viewmodel . DialogSmall ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > < nl > public class GroupedDialogsActor extends ModuleActor { < nl > < nl > - private PeerGroup groups = new PeerGroup ( " groups " , " Groups " ) ; < nl > - private PeerGroup privates = new PeerGroup ( " private " , " Private " ) ; < nl > + private GroupedStorage storage ; < nl > + private MVVMCollection < DialogSpec , DialogSpecVM > specs ; < nl > < nl > public GroupedDialogsActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 23 , 6 + 29 , 8 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > @ Override < nl > public void preStart ( ) { < nl > super . preStart ( ) ; < nl > + specs = context ( ) . getMessagesModule ( ) . getDialogDescKeyValue ( ) ; < nl > + storage = new GroupedStorage ( ) ; < nl > } < nl > < nl > private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { < nl > @ @ - 31 , 38 + 39 , 82 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > < nl > private void onNewMessage ( Peer peer , long sortDate , int counter ) { < nl > < nl > - PeerGroup peerGroup ; < nl > - if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > - peerGroup = groups ; < nl > - } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > - peerGroup = privates ; < nl > - } else { < nl > - return ; < nl > - } < nl > + / / Updating dialog spec < nl > + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; < nl > + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; < nl > < nl > boolean found = false ; < nl > - for ( PeerDesc d : peerGroup . getPeers ( ) ) { < nl > - if ( d . getPeer ( ) . equals ( peer ) ) { < nl > - d . setCounter ( counter ) ; < nl > + for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > + found = true ; < nl > + break ; < nl > + } < nl > + } < nl > + for ( Peer p : storage . getGroupPeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > found = true ; < nl > + break ; < nl > } < nl > } < nl > < nl > if ( ! found ) { < nl > - peerGroup . getPeers ( ) . add ( new PeerDesc ( peer , counter ) ) ; < nl > + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + storage . getPrivatePeers ( ) . add ( peer ) ; < nl > + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + storage . getGroupPeers ( ) . add ( peer ) ; < nl > + } else { < nl > + return ; < nl > + } < nl > } < nl > < nl > - ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; < nl > - ArrayList < DialogDesc > groupDescs = new ArrayList < DialogDesc > ( ) ; < nl > - for ( PeerDesc d : peerGroup . getPeers ( ) ) { < nl > - groupDescs . add ( new DialogDesc ( d . getPeer ( ) , " GRPOUP # " + d . getPeer ( ) . getPeerId ( ) , < nl > - null , false , d . counter ) ) ; < nl > + notifyVM ( ) ; < nl > + saveStorage ( ) ; < nl > + } < nl > + < nl > + private void notifyVM ( ) { < nl > + ArrayListDialogSmall groupSpecs = new ArrayListDialogSmall ( ) ; < nl > + for ( Peer p : storage . getGroupPeers ( ) ) { < nl > + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; < nl > + if ( p . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = getGroup ( p . getPeerId ( ) ) ; < nl > + groupSpecs . add ( new DialogSmall ( p , < nl > + group . getTitle ( ) , group . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = getUser ( p . getPeerId ( ) ) ; < nl > + groupSpecs . add ( new DialogSmall ( p , < nl > + user . getName ( ) , user . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } < nl > + } < nl > + < nl > + ArrayListDialogSmall privateSpecs = new ArrayListDialogSmall ( ) ; < nl > + for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; < nl > + if ( p . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = getGroup ( p . getPeerId ( ) ) ; < nl > + privateSpecs . add ( new DialogSmall ( p , < nl > + group . getTitle ( ) , group . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = getUser ( p . getPeerId ( ) ) ; < nl > + privateSpecs . add ( new DialogSmall ( p , < nl > + user . getName ( ) , user . getAvatar ( ) , < nl > + spec . getCounter ( ) ) ) ; < nl > + } < nl > } < nl > - groups . add ( new DialogGroup ( " Groups " , " group " , groupDescs ) ) ; < nl > + < nl > + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; < nl > + groups . add ( new DialogGroup ( " Groups " , " groups " , groupSpecs ) ) ; < nl > + groups . add ( new DialogGroup ( " Private " , " private " , privateSpecs ) ) ; < nl > < nl > context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; < nl > } < nl > < nl > + private void saveStorage ( ) { < nl > + / / TODO : Implement < nl > + } < nl > + < nl > @ Override < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof PeerInformationChanged ) { < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java < nl > new file mode 100644 < nl > index 0000000 . . 3e7340c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java < nl > @ @ - 0 , 0 + 1 , 57 @ @ < nl > + package im . actor . core . modules . internal . messages . entity ; < nl > + < nl > + import java . io . IOException ; < nl > + import java . util . ArrayList ; < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > + < nl > + public class GroupedStorage extends BserObject { < nl > + < nl > + private ArrayList < Peer > groupPeers = new ArrayList < Peer > ( ) ; < nl > + private ArrayList < Peer > privatePeers = new ArrayList < Peer > ( ) ; < nl > + < nl > + public GroupedStorage ( ) { < nl > + } < nl > + < nl > + public GroupedStorage ( byte [ ] data ) throws IOException { < nl > + super . load ( data ) ; < nl > + } < nl > + < nl > + public ArrayList < Peer > getGroupPeers ( ) { < nl > + return groupPeers ; < nl > + } < nl > + < nl > + public ArrayList < Peer > getPrivatePeers ( ) { < nl > + return privatePeers ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + List < byte [ ] > rawPrivatePeers = values . getRepeatedBytes ( 1 ) ; < nl > + groupPeers . clear ( ) ; < nl > + for ( byte [ ] b : rawPrivatePeers ) { < nl > + groupPeers . add ( Peer . fromBytes ( b ) ) ; < nl > + } < nl > + List < byte [ ] > rawGroupPeers = values . getRepeatedBytes ( 2 ) ; < nl > + for ( byte [ ] b : rawGroupPeers ) { < nl > + privatePeers . add ( Peer . fromBytes ( b ) ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + for ( Peer peer : privatePeers ) { < nl > + writer . writeObject ( 1 , peer ) ; < nl > + } < nl > + for ( Peer peer : groupPeers ) { < nl > + writer . writeObject ( 2 , peer ) ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > index ae47f02 . . 47935a1 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java < nl > @ @ - 1 , 16 + 1 , 19 @ @ < nl > package im . actor . core . viewmodel ; < nl > < nl > - import java . util . ArrayList ; < nl > + import com . google . j2objc . annotations . Property ; < nl > < nl > - import im . actor . core . entity . DialogDesc ; < nl > + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; < nl > < nl > public class DialogGroup { < nl > < nl > + @ Property ( " readonly , nonatomic " ) < nl > private String title ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > private String key ; < nl > - private ArrayList < DialogDesc > dialogs ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private ArrayListDialogSmall dialogs ; < nl > < nl > - public DialogGroup ( String title , String key , ArrayList < DialogDesc > dialogs ) { < nl > + public DialogGroup ( String title , String key , ArrayListDialogSmall dialogs ) { < nl > this . title = title ; < nl > this . key = key ; < nl > this . dialogs = dialogs ; < nl > @ @ - 24 , 7 + 27 , 7 @ @ public class DialogGroup { < nl > return key ; < nl > } < nl > < nl > - public ArrayList < DialogDesc > getDialogs ( ) { < nl > + public ArrayListDialogSmall getDialogs ( ) { < nl > return dialogs ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java < nl > new file mode 100644 < nl > index 0000000 . . b77e893 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java < nl > @ @ - 0 , 0 + 1 , 41 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import im . actor . core . entity . Avatar ; < nl > + import im . actor . core . entity . Peer ; < nl > + < nl > + public class DialogSmall { < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final String title ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Avatar avatar ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final int counter ; < nl > + < nl > + public DialogSmall ( Peer peer , String title , Avatar avatar , int counter ) { < nl > + this . peer = peer ; < nl > + this . title = title ; < nl > + this . avatar = avatar ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public Avatar getAvatar ( ) { < nl > + return avatar ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java < nl > new file mode 100644 < nl > index 0000000 . . 52a266d < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java < nl > @ @ - 0 , 0 + 1 , 53 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . viewmodel . generics . BooleanValueModel ; < nl > + import im . actor . core . viewmodel . generics . IntValueModel ; < nl > + import im . actor . runtime . mvvm . BaseValueModel ; < nl > + import im . actor . runtime . mvvm . ValueModelCreator ; < nl > + < nl > + public class DialogSpecVM extends BaseValueModel < DialogSpec > { < nl > + < nl > + public static ValueModelCreator < DialogSpec , DialogSpecVM > CREATOR = new ValueModelCreator < DialogSpec , DialogSpecVM > ( ) { < nl > + @ Override < nl > + public DialogSpecVM create ( DialogSpec baseValue ) { < nl > + return new DialogSpecVM ( baseValue ) ; < nl > + } < nl > + } ; < nl > + < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private final Peer peer ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private IntValueModel counter ; < nl > + @ Property ( " readonly , nonatomic " ) < nl > + private BooleanValueModel isUnread ; < nl > + < nl > + public DialogSpecVM ( DialogSpec rawObj ) { < nl > + super ( rawObj ) ; < nl > + < nl > + this . peer = rawObj . getPeer ( ) ; < nl > + this . counter = new IntValueModel ( " dialogs . desc . counter " , rawObj . getCounter ( ) ) ; < nl > + this . isUnread = new BooleanValueModel ( " dialogs . desc . unread " , rawObj . isUnread ( ) ) ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public IntValueModel getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + < nl > + public BooleanValueModel getIsUnread ( ) { < nl > + return isUnread ; < nl > + } < nl > + < nl > + @ Override < nl > + protected void updateValues ( DialogSpec rawObj ) { < nl > + counter . change ( rawObj . getCounter ( ) ) ; < nl > + isUnread . change ( rawObj . isUnread ( ) ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java < nl > new file mode 100644 < nl > index 0000000 . . 9727306 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java < nl > @ @ - 0 , 0 + 1 , 13 @ @ < nl > + package im . actor . core . viewmodel . generics ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . viewmodel . DialogSmall ; < nl > + < nl > + public class ArrayListDialogSmall extends ArrayList < DialogSmall > { < nl > + < nl > + @ Override < nl > + public DialogSmall get ( int index ) { < nl > + return super . get ( index ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > index 32554b4 . . f496742 100644 < nl > - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift < nl > @ @ - 6 , 7 + 6 , 7 @ @ import UIKit < nl > < nl > class AADebugController : AAContentTableController { < nl > < nl > - var debugData : AAManagedArrayRows < ACDialogDesc , AACommonCell > ! < nl > + var debugData : AAManagedArrayRows < ACDialogSmall , AACommonCell > ! < nl > < nl > init ( ) { < nl > super . init ( style : . Plain ) < nl > @ @ - 18 , 9 + 18 , 10 @ @ class AADebugController : AAContentTableController { < nl > < nl > override func tableDidLoad ( ) { < nl > section { ( s ) - > ( ) in < nl > - self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogDesc , AACommonCell > ) - > ( ) in < nl > - r . bindData = { ( cell : AACommonCell , data : ACDialogDesc ) - > ( ) in < nl > - cell . setContent ( data . title ) < nl > + self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogSmall , AACommonCell > ) - > ( ) in < nl > + r . bindData = { ( cell : AACommonCell , data : ACDialogSmall ) - > ( ) in < nl > + cell . setContent ( " \ ( data . counter ) - \ ( data . title ) " ) < nl > + cell . style = . Normal < nl > } < nl > } < nl > } < nl > @ @ - 30 , 11 + 31 , 11 @ @ class AADebugController : AAContentTableController { < nl > binder . bind ( ActorSDK . sharedActor ( ) . messenger . getDialogGroupsVM ( ) . getGroupsValueModel ( ) ) { ( value : JavaUtilArrayList ? ) - > ( ) in < nl > < nl > if value ! = nil { < nl > - var items = [ ACDialogDesc ] ( ) < nl > + var items = [ ACDialogSmall ] ( ) < nl > < nl > for i in 0 . . < value ! . size ( ) { < nl > - for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . getDialogs ( ) { < nl > - items . append ( j as ! ACDialogDesc ) < nl > + for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . dialogs { < nl > + items . append ( j as ! ACDialogSmall ) < nl > } < nl > } < nl > self . debugData . data = items

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift 
 index 543a4d0 . . 5703108 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentController . swift 	 
 @ @ - 32 , 7 + 32 , 7 @ @ public class AADialogsListContentController : AAContentTableController , UISearchB 
 if enableSearch { 
 search ( AADialogSearchCell . self ) { ( s ) - > ( ) in 
 
 - s . searchList = Actor . buildSearchDisplayList ( ) 
 + s . searchModel = Actor . buildGlobalSearchModel ( ) 
 
 s . selectAction = { ( itm ) - > ( ) in 
 self . delegate ? . searchDidTap ( self , entity : itm ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentControllerDelegate . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentControllerDelegate . swift 
 index dc425fa . . 26f9434 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentControllerDelegate . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / AADialogsListContentControllerDelegate . swift 	 
 @ @ - 8 , 5 + 8 , 5 @ @ public protocol AADialogsListContentControllerDelegate { 
 
 func recentsDidTap ( controller : AADialogsListContentController , dialog : ACDialog ) - > Bool 
 
 - func searchDidTap ( controller : AADialogsListContentController , entity : ACSearchEntity ) 
 + func searchDidTap ( controller : AADialogsListContentController , entity : ACSearchResult ) 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogSearchCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogSearchCell . swift 
 index 37918f2 . . ac1b90b 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogSearchCell . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogSearchCell . swift 	 
 @ @ - 6 , 7 + 6 , 7 @ @ import UIKit 
 
 public class AADialogSearchCell : AATableViewCell , AABindedSearchCell { 
 
 - public typealias BindData = ACSearchEntity 
 + public typealias BindData = ACSearchResult 
 
 public static func bindedCellHeight ( item : BindData ) - > CGFloat { 
 
 @ @ - 31 , 7 + 31 , 7 @ @ public class AADialogSearchCell : AATableViewCell , AABindedSearchCell { 
 fatalError ( " init ( coder : ) has not been implemented " ) 
 } 
 
 - public func bind ( item : ACSearchEntity , search : String ? ) { 
 + public func bind ( item : ACSearchResult , search : String ? ) { 
 avatarView . bind ( item . title , id : Int ( item . peer . peerId ) , avatar : item . avatar ) 
 titleView . text = item . title 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 
 index 27f532e . . 5668969 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Managed Runtime / AAManagedTable . swift 	 
 @ @ - 405 , 23 + 405 , 26 @ @ private class AMBaseTableDelegate : NSObject , UITableViewDelegate , UITableViewDat 
 
 public class AAManagedSearchConfig < BindCell where BindCell : AABindedSearchCell , BindCell : UITableViewCell > { 
 
 - public var searchList : ARBindedDisplayList ! 
 + public var searchList : ARBindedDisplayList ? 
 + public var searchModel : ARSearchValueModel ? 
 public var selectAction : ( ( BindCell . BindData ) - > ( ) ) ? 
 public var isSearchAutoHide : Bool = true 
 public var didBind : ( ( c : BindCell , d : BindCell . BindData ) - > ( ) ) ? 
 } 
 
 - private class AAManagedSearchController < BindCell where BindCell : AABindedSearchCell , BindCell : UITableViewCell > : NSObject , UISearchBarDelegate , UISearchDisplayDelegate , UITableViewDataSource , UITableViewDelegate , ARDisplayList _ Listener { 
 + private class AAManagedSearchController < BindCell where BindCell : AABindedSearchCell , BindCell : UITableViewCell > : NSObject , UISearchBarDelegate , UISearchDisplayDelegate , UITableViewDataSource , UITableViewDelegate , ARDisplayList _ Listener , ARValueChangedListener { 
 
 let config : AAManagedSearchConfig < BindCell > 
 - let displayList : ARBindedDisplayList 
 + let searchList : ARBindedDisplayList ? 
 + let searchModel : ARSearchValueModel ? 
 let searchDisplay : UISearchDisplayController 
 
 init ( config : AAManagedSearchConfig < BindCell > , controller : UIViewController , tableView : UITableView ) { 
 
 self . config = config 
 
 - self . displayList = config . searchList 
 + self . searchList = config . searchList 
 + self . searchModel = config . searchModel 
 
 let style = ActorSDK . sharedActor ( ) . style 
 let searchBar = UISearchBar ( ) 
 @ @ - 481 , 24 + 484 , 48 @ @ private class AAManagedSearchController < BindCell where BindCell : AABindedSearchC 
 
 / / Start receiving events 
 
 - self . displayList . addListener ( self ) 
 + if let ds = searchList { 
 + ds . addListener ( self ) 
 + } else if let sm = searchModel { 
 + sm . getResults ( ) . subscribeWithListener ( self ) 
 + } else { 
 + fatalError ( " No search model or search list is set ! " ) 
 + } 
 } 
 
 / / Model 
 
 
 func objectAtIndexPath ( indexPath : NSIndexPath ) - > BindCell . BindData { 
 - return displayList . itemWithIndex ( jint ( indexPath . row ) ) as ! BindCell . BindData 
 + if let ds = searchList { 
 + return ds . itemWithIndex ( jint ( indexPath . row ) ) as ! BindCell . BindData 
 + } else if let sm = searchModel { 
 + let list = sm . getResults ( ) . get ( ) as ! JavaUtilList 
 + return list . getWithInt ( jint ( indexPath . row ) ) as ! BindCell . BindData 
 + } else { 
 + fatalError ( " No search model or search list is set ! " ) 
 + } 
 } 
 
 @ objc func onCollectionChanged ( ) { 
 searchDisplay . searchResultsTableView . reloadData ( ) 
 } 
 
 + @ objc func onChanged ( val : AnyObject ! , withModel valueModel : ARValue ! ) { 
 + searchDisplay . searchResultsTableView . reloadData ( ) 
 + } 
 + 
 / / Table view data 
 
 @ objc func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) - > Int { 
 - return Int ( displayList . size ( ) ) ; 
 + if let ds = searchList { 
 + return Int ( ds . size ( ) ) 
 + } else if let sm = searchModel { 
 + let list = sm . getResults ( ) . get ( ) as ! JavaUtilList 
 + return Int ( list . size ( ) ) 
 + } else { 
 + fatalError ( " No search model or search list is set ! " ) 
 + } 
 } 
 
 @ objc func tableView ( tableView : UITableView , heightForRowAtIndexPath indexPath : NSIndexPath ) - > CGFloat { 
 @ @ - 521 , 11 + 548 , 17 @ @ private class AAManagedSearchController < BindCell where BindCell : AABindedSearchC 
 / / Search updating 
 
 @ objc func searchBar ( searchBar : UISearchBar , textDidChange searchText : String ) { 
 - let normalized = searchText . trim ( ) . lowercaseString 
 - if ( normalized . length > 0 ) { 
 - displayList . initSearchWithQuery ( normalized , withRefresh : false ) 
 + if let ds = searchList { 
 + let normalized = searchText . trim ( ) . lowercaseString 
 + if ( normalized . length > 0 ) { 
 + ds . initSearchWithQuery ( normalized , withRefresh : false ) 
 + } else { 
 + ds . initEmpty ( ) 
 + } 
 + } else if let sm = searchModel { 
 + sm . queryChangedWithNSString ( searchText ) 
 } else { 
 - displayList . initEmpty ( ) 
 + fatalError ( " No search model or search list is set ! " ) 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift 
 index 4a69d9b . . 9f9df5a 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Recent / AARecentViewController . swift 
 @ @ - 124 , 7 + 124 , 7 @ @ public class AARecentViewController : AADialogsListContentController , AADialogsLi 
 return false 
 } 
 
 - public func searchDidTap ( controller : AADialogsListContentController , entity : ACSearchEntity ) { 
 + public func searchDidTap ( controller : AADialogsListContentController , entity : ACSearchResult ) { 
 if let customController = ActorSDK . sharedActor ( ) . delegate . actorControllerForConversation ( entity . peer ) { 
 self . navigateDetail ( customController ) 
 } else { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index a07d9c5 . . 14ee5f3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import im . actor . core . entity . MessageSearchEntity ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerSearchEntity ; 
 import im . actor . core . entity . PeerSearchType ; 
 + import im . actor . core . entity . SearchResult ; 
 import im . actor . core . entity . Sex ; 
 import im . actor . core . entity . User ; 
 import im . actor . core . entity . WebActionDescriptor ; 
 @ @ - 70 , 6 + 71 , 7 @ @ import im . actor . core . viewmodel . UserVM ; 
 import im . actor . runtime . actors . ActorSystem ; 
 import im . actor . runtime . actors . messages . Void ; 
 import im . actor . runtime . mvvm . MVVMCollection ; 
 + import im . actor . runtime . mvvm . SearchValueModel ; 
 import im . actor . runtime . mvvm . ValueModel ; 
 import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . storage . PreferencesStorage ; 
 @ @ - 1196 , 6 + 1198 , 16 @ @ public class Messenger { 
 . failure ( e - > callback . onError ( e ) ) ; 
 } 
 
 + / * * 
 + * Building global search model 
 + * 
 + * @ return search model 
 + * / 
 + @ ObjectiveCName ( " buildGlobalSearchModel " ) 
 + public SearchValueModel < SearchResult > buildGlobalSearchModel ( ) { 
 + return modules . getSearchModule ( ) . buildSearchModel ( ) ; 
 + } 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Calls 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / SearchResult . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / SearchResult . java 
 new file mode 100644 
 index 0000000 . . 4b7e25b 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / SearchResult . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + package im . actor . core . entity ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import org . jetbrains . annotations . NotNull ; 
 + import org . jetbrains . annotations . Nullable ; 
 + 
 + public class SearchResult { 
 + 
 + @ NotNull 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Peer peer ; 
 + @ Nullable 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Avatar avatar ; 
 + @ NotNull 
 + @ Property ( " readonly , nonatomic " ) 
 + private final String title ; 
 + @ Nullable 
 + @ Property ( " readonly , nonatomic " ) 
 + private final String matchString ; 
 + 
 + public SearchResult ( @ NotNull Peer peer , @ Nullable Avatar avatar , @ NotNull String title , 
 + @ Nullable String matchString ) { 
 + this . peer = peer ; 
 + this . avatar = avatar ; 
 + this . title = title ; 
 + this . matchString = matchString ; 
 + } 
 + 
 + @ NotNull 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + @ Nullable 
 + public Avatar getAvatar ( ) { 
 + return avatar ; 
 + } 
 + 
 + @ NotNull 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + @ Nullable 
 + public String getMatchString ( ) { 
 + return matchString ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java 
 index 5dff5fe . . 5450bb2 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / SearchModule . java 
 @ @ - 23 , 13 + 23 , 16 @ @ import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerSearchEntity ; 
 import im . actor . core . entity . PeerSearchType ; 
 import im . actor . core . entity . SearchEntity ; 
 + import im . actor . core . entity . SearchResult ; 
 import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . api . ApiSupportConfiguration ; 
 import im . actor . core . modules . Modules ; 
 + import im . actor . core . modules . search . sources . GlobalSearchSource ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . collections . ManagedList ; 
 + import im . actor . runtime . mvvm . SearchValueModel ; 
 import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . storage . ListEngine ; 
 
 @ @ - 134 , 6 + 137 , 9 @ @ public class SearchModule extends AbsModule { 
 . map ( r - > new PeerSearchEntity ( convert ( r . getPeer ( ) ) , r . getOptMatchString ( ) ) ) ) ; 
 } 
 
 + public SearchValueModel < SearchResult > buildSearchModel ( ) { 
 + return new SearchValueModel < > ( new GlobalSearchSource ( context ( ) ) ) ; 
 + } 
 
 / / 
 / / Local Search 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / sources / GlobalSearchSource . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / sources / GlobalSearchSource . java 
 new file mode 100644 
 index 0000000 . . 888893e 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / search / sources / GlobalSearchSource . java 
 @ @ - 0 , 0 + 1 , 78 @ @ 
 + package im . actor . core . modules . search . sources ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import im . actor . core . entity . Group ; 
 + import im . actor . core . entity . PeerSearchEntity ; 
 + import im . actor . core . entity . PeerType ; 
 + import im . actor . core . entity . SearchEntity ; 
 + import im . actor . core . entity . SearchResult ; 
 + import im . actor . core . modules . AbsModule ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . viewmodel . UserVM ; 
 + import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . mvvm . SearchValueSource ; 
 + import im . actor . runtime . storage . ListEngine ; 
 + import im . actor . runtime . storage . ListEngineDisplayExt ; 
 + 
 + public class GlobalSearchSource extends AbsModule implements SearchValueSource < SearchResult > { 
 + 
 + public GlobalSearchSource ( ModuleContext context ) { 
 + super ( context ) ; 
 + } 
 + 
 + @ Override 
 + public void loadResults ( String query , Consumer < List < SearchResult > > callback ) { 
 + ListEngine < SearchEntity > searchList = context ( ) . getSearchModule ( ) . getSearchList ( ) ; 
 + if ( searchList instanceof ListEngineDisplayExt ) { 
 + ( ( ListEngineDisplayExt < SearchEntity > ) searchList ) . loadBackward ( query , 20 , ( items , topSortKey , bottomSortKey ) - > { 
 + ArrayList < SearchResult > localResults = new ArrayList < > ( ) ; 
 + for ( SearchEntity e : items ) { 
 + localResults . add ( new SearchResult ( e . getPeer ( ) , e . getAvatar ( ) , e . getTitle ( ) , 
 + null ) ) ; 
 + } 
 + callback . apply ( new ArrayList < > ( localResults ) ) ; 
 + if ( query . length ( ) > 3 ) { 
 + loadGlobalResults ( query , localResults , callback ) ; 
 + } 
 + } ) ; 
 + } else { 
 + if ( query . length ( ) > 3 ) { 
 + loadGlobalResults ( query , new ArrayList < > ( ) , callback ) ; 
 + } else { 
 + callback . apply ( new ArrayList < > ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 + 
 + private void loadGlobalResults ( String query , ArrayList < SearchResult > localResults , Consumer < List < SearchResult > > callback ) { 
 + context ( ) . getSearchModule ( ) . findPeers ( query ) . then ( r - > { 
 + ArrayList < SearchResult > results = new ArrayList < > ( ) ; 
 + outer : 
 + for ( PeerSearchEntity peerSearch : r ) { 
 + for ( SearchResult l : localResults ) { 
 + if ( peerSearch . getPeer ( ) . equals ( l . getPeer ( ) ) ) { 
 + continue outer ; 
 + } 
 + } 
 + if ( peerSearch . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = context ( ) . getGroupsModule ( ) . getGroups ( ) . getValue ( peerSearch . getPeer ( ) . getPeerId ( ) ) ; 
 + results . add ( new SearchResult ( peerSearch . getPeer ( ) , group . getAvatar ( ) , group . getTitle ( ) , 
 + peerSearch . getOptMatchString ( ) ) ) ; 
 + } else if ( peerSearch . getPeer ( ) . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + UserVM user = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( peerSearch . getPeer ( ) . getPeerId ( ) ) ; 
 + results . add ( new SearchResult ( peerSearch . getPeer ( ) , user . getAvatar ( ) . get ( ) , user . getName ( ) . get ( ) , 
 + peerSearch . getOptMatchString ( ) ) ) ; 
 + } 
 + } 
 + if ( results . size ( ) > 0 ) { 
 + ArrayList < SearchResult > combined = new ArrayList < > ( ) ; 
 + combined . addAll ( localResults ) ; 
 + combined . addAll ( results ) ; 
 + callback . apply ( combined ) ; 
 + } 
 + } ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / AsyncVM . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / AsyncVM . java 
 index 384f585 . . 8c6eb01 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / AsyncVM . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / AsyncVM . java 
 @ @ - 9 , 12 + 9 , 9 @ @ public abstract class AsyncVM { 
 private boolean isDetached ; 
 
 protected final void post ( final Object obj ) { 
 - im . actor . runtime . Runtime . postToMainThread ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - if ( ! isDetached ) { 
 - onObjectReceived ( obj ) ; 
 - } 
 + im . actor . runtime . Runtime . postToMainThread ( ( ) - > { 
 + if ( ! isDetached ) { 
 + onObjectReceived ( obj ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / SearchValueModel . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / SearchValueModel . java 
 new file mode 100644 
 index 0000000 . . ae74a86 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / SearchValueModel . java 
 @ @ - 0 , 0 + 1 , 88 @ @ 
 + package im . actor . runtime . mvvm ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import im . actor . runtime . annotations . MainThread ; 
 + 
 + public class SearchValueModel < T > extends AsyncVM { 
 + 
 + private SearchValueSource < T > searchValueSource ; 
 + private int requestId = 0 ; 
 + private ValueModel < List < T > > results ; 
 + 
 + public SearchValueModel ( SearchValueSource < T > searchValueSource ) { 
 + this . searchValueSource = searchValueSource ; 
 + this . results = new ValueModel < > ( " search . results " , new ArrayList < > ( ) ) ; 
 + } 
 + 
 + public ValueModel < List < T > > getResults ( ) { 
 + return results ; 
 + } 
 + 
 + @ MainThread 
 + public void queryChanged ( String query ) { 
 + 
 + final int currentRequestId = + + requestId ; 
 + 
 + / / Filtering out trivial sources 
 + if ( query = = null ) { 
 + postResults ( new ArrayList < > ( ) , currentRequestId ) ; 
 + return ; 
 + } 
 + query = query . trim ( ) ; 
 + if ( query . length ( ) = = 0 ) { 
 + postResults ( new ArrayList < > ( ) , currentRequestId ) ; 
 + return ; 
 + } 
 + 
 + / / Non - trivial 
 + searchValueSource . loadResults ( query , r - > { 
 + if ( currentRequestId = = requestId ) { 
 + postResults ( r , currentRequestId ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ MainThread 
 + protected void onResultsReceived ( List < T > res ) { 
 + results . changeInUIThread ( res ) ; 
 + } 
 + 
 + / / 
 + / / Internal Loop 
 + / / 
 + 
 + private void postResults ( List < T > res , int requestIndex ) { 
 + post ( new Results < > ( res , requestIndex ) ) ; 
 + } 
 + 
 + @ Override 
 + protected void onObjectReceived ( Object obj ) { 
 + if ( obj instanceof Results ) { 
 + Results < T > r = ( Results < T > ) obj ; 
 + if ( r . getRequestIndex ( ) = = requestId ) { 
 + onResultsReceived ( r . getRes ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 + protected static class Results < T > { 
 + 
 + private List < T > res ; 
 + private int requestIndex ; 
 + 
 + public Results ( List < T > res , int requestIndex ) { 
 + this . res = res ; 
 + this . requestIndex = requestIndex ; 
 + } 
 + 
 + public List < T > getRes ( ) { 
 + return res ; 
 + } 
 + 
 + public int getRequestIndex ( ) { 
 + return requestIndex ; 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / SearchValueSource . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / SearchValueSource . java 
 new file mode 100644 
 index 0000000 . . c20a78b 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / mvvm / SearchValueSource . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package im . actor . runtime . mvvm ; 
 + 
 + import java . util . List ; 
 + 
 + import im . actor . runtime . function . Consumer ; 
 + 
 + public interface SearchValueSource < T > { 
 + void loadResults ( String query , Consumer < List < T > > callback ) ; 
 + }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java 
 deleted file mode 100644 
 index bb8078b . . 0000000 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogDesc . java 
 + + + / dev / null 
 @ @ - 1 , 80 + 0 , 0 @ @ 
 - package im . actor . core . entity ; 
 - 
 - import com . google . j2objc . annotations . Property ; 
 - 
 - import java . io . IOException ; 
 - 
 - import im . actor . runtime . bser . BserObject ; 
 - import im . actor . runtime . bser . BserValues ; 
 - import im . actor . runtime . bser . BserWriter ; 
 - import im . actor . runtime . storage . KeyValueItem ; 
 - 
 - public class DialogDesc extends BserObject implements KeyValueItem { 
 - 
 - @ Property ( " readonly , nonatomic " ) 
 - private Peer peer ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private String title ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private Avatar avatar ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private boolean isUnread ; 
 - @ Property ( " readonly , nonatomic " ) 
 - private int counter ; 
 - 
 - public DialogDesc ( Peer peer , String title , Avatar avatar , boolean isUnread , int counter ) { 
 - this . peer = peer ; 
 - this . title = title ; 
 - this . avatar = avatar ; 
 - this . isUnread = isUnread ; 
 - this . counter = counter ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public String getTitle ( ) { 
 - return title ; 
 - } 
 - 
 - public Avatar getAvatar ( ) { 
 - return avatar ; 
 - } 
 - 
 - public int getCounter ( ) { 
 - return counter ; 
 - } 
 - 
 - public boolean isUnread ( ) { 
 - return isUnread ; 
 - } 
 - 
 - @ Override 
 - public void parse ( BserValues values ) throws IOException { 
 - peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; 
 - title = values . getString ( 2 ) ; 
 - byte [ ] av = values . getBytes ( 3 ) ; 
 - if ( av ! = null ) { 
 - avatar = new Avatar ( av ) ; 
 - } 
 - counter = values . getInt ( 4 ) ; 
 - isUnread = values . getBool ( 5 ) ; 
 - } 
 - 
 - @ Override 
 - public void serialize ( BserWriter writer ) throws IOException { 
 - writer . writeObject ( 1 , peer ) ; 
 - writer . writeString ( 2 , title ) ; 
 - if ( avatar ! = null ) { 
 - writer . writeObject ( 3 , avatar ) ; 
 - } 
 - writer . writeInt ( 4 , counter ) ; 
 - writer . writeBool ( 5 , isUnread ) ; 
 - } 
 - 
 - @ Override 
 - public long getEngineId ( ) { 
 - return peer . getUnuqueId ( ) ; 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java 
 new file mode 100644 
 index 0000000 . . d0c5624 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / entity / DialogSpec . java 
 @ @ - 0 , 0 + 1 , 69 @ @ 
 + package im . actor . core . entity ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . bser . BserCreator ; 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . storage . KeyValueItem ; 
 + 
 + public class DialogSpec extends BserObject implements KeyValueItem { 
 + 
 + public static BserCreator < DialogSpec > CREATOR = new BserCreator < DialogSpec > ( ) { 
 + @ Override 
 + public DialogSpec createInstance ( ) { 
 + return new DialogSpec ( ) ; 
 + } 
 + } ; 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private boolean isUnread ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private int counter ; 
 + 
 + public DialogSpec ( Peer peer , boolean isUnread , int counter ) { 
 + this . peer = peer ; 
 + this . isUnread = isUnread ; 
 + this . counter = counter ; 
 + } 
 + 
 + private DialogSpec ( ) { 
 + 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + 
 + public boolean isUnread ( ) { 
 + return isUnread ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + peer = Peer . fromBytes ( values . getBytes ( 1 ) ) ; 
 + counter = values . getInt ( 2 ) ; 
 + isUnread = values . getBool ( 3 ) ; 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + writer . writeObject ( 1 , peer ) ; 
 + writer . writeInt ( 2 , counter ) ; 
 + writer . writeBool ( 3 , isUnread ) ; 
 + } 
 + 
 + @ Override 
 + public long getEngineId ( ) { 
 + return peer . getUnuqueId ( ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 index 28142c9 . . baf3eaf 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / AbsModule . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . runtime . storage . PreferencesStorage ; 
 public abstract class AbsModule { 
 
 public static final String STORAGE _ DIALOGS = " dialogs " ; 
 + public static final String STORAGE _ DIALOGS _ DESC = " dialogs _ desc " ; 
 public static final String STORAGE _ USERS = " users " ; 
 public static final String STORAGE _ GROUPS = " groups " ; 
 public static final String STORAGE _ DOWNLOADS = " downloads " ; 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 30e0d85 . . 88416ee 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . core . api . rpc . ResponseSeq ; 
 import im . actor . core . api . updates . UpdateChatClear ; 
 import im . actor . core . api . updates . UpdateChatDelete ; 
 import im . actor . core . entity . Dialog ; 
 + import im . actor . core . entity . DialogSpec ; 
 import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . Peer ; 
 @ @ - 48 , 6 + 49 , 7 @ @ import im . actor . core . network . RpcInternalException ; 
 import im . actor . core . viewmodel . Command ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . core . viewmodel . DialogGroupsVM ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 @ @ - 56 , 6 + 58 , 8 @ @ import im . actor . runtime . actors . tools . BounceFilterActor ; 
 import im . actor . runtime . eventbus . BusSubscriber ; 
 import im . actor . runtime . eventbus . Event ; 
 import im . actor . runtime . files . FileSystemReference ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 + import im . actor . runtime . storage . KeyValueEngine ; 
 import im . actor . runtime . storage . ListEngine ; 
 import im . actor . runtime . storage . SyncKeyValue ; 
 
 @ @ - 83 , 11 + 87 , 14 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 private final SyncKeyValue cursorStorage ; 
 
 + private final MVVMCollection < DialogSpec , DialogSpecVM > dialogDescKeyValue ; 
 + 
 private final DialogGroupsVM dialogGroups = new DialogGroupsVM ( ) ; 
 
 public MessagesModule ( final ModuleContext context ) { 
 super ( context ) ; 
 
 + this . dialogDescKeyValue = Storage . createKeyValue ( STORAGE _ DIALOGS _ DESC , DialogSpecVM . CREATOR , DialogSpec . CREATOR ) ; 
 this . cursorStorage = new SyncKeyValue ( Storage . createKeyValue ( STORAGE _ CURSOR ) ) ; 
 this . dialogs = Storage . createList ( STORAGE _ DIALOGS , Dialog . CREATOR ) ; 
 } 
 @ @ - 157 , 6 + 164 , 10 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 return dialogGroups ; 
 } 
 
 + public MVVMCollection < DialogSpec , DialogSpecVM > getDialogDescKeyValue ( ) { 
 + return dialogDescKeyValue ; 
 + } 
 + 
 public ActorRef getSendMessageActor ( ) { 
 return sendMessageActor ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 index f0fdf00 . . b881551 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 @ @ - 1 , 20 + 1 , 26 @ @ 
 package im . actor . core . modules . internal . messages ; 
 
 import java . util . ArrayList ; 
 - import java . util . HashMap ; 
 
 import im . actor . core . entity . Avatar ; 
 - import im . actor . core . entity . DialogDesc ; 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 + import im . actor . core . entity . User ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . internal . messages . entity . GroupedStorage ; 
 import im . actor . core . modules . utils . ModuleActor ; 
 import im . actor . core . viewmodel . DialogGroup ; 
 + import im . actor . core . viewmodel . DialogSmall ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 
 public class GroupedDialogsActor extends ModuleActor { 
 
 - private PeerGroup groups = new PeerGroup ( " groups " , " Groups " ) ; 
 - private PeerGroup privates = new PeerGroup ( " private " , " Private " ) ; 
 + private GroupedStorage storage ; 
 + private MVVMCollection < DialogSpec , DialogSpecVM > specs ; 
 
 public GroupedDialogsActor ( ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 23 , 6 + 29 , 8 @ @ public class GroupedDialogsActor extends ModuleActor { 
 @ Override 
 public void preStart ( ) { 
 super . preStart ( ) ; 
 + specs = context ( ) . getMessagesModule ( ) . getDialogDescKeyValue ( ) ; 
 + storage = new GroupedStorage ( ) ; 
 } 
 
 private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { 
 @ @ - 31 , 38 + 39 , 82 @ @ public class GroupedDialogsActor extends ModuleActor { 
 
 private void onNewMessage ( Peer peer , long sortDate , int counter ) { 
 
 - PeerGroup peerGroup ; 
 - if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 - peerGroup = groups ; 
 - } else if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 - peerGroup = privates ; 
 - } else { 
 - return ; 
 - } 
 + / / Updating dialog spec 
 + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; 
 + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; 
 
 boolean found = false ; 
 - for ( PeerDesc d : peerGroup . getPeers ( ) ) { 
 - if ( d . getPeer ( ) . equals ( peer ) ) { 
 - d . setCounter ( counter ) ; 
 + for ( Peer p : storage . getPrivatePeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + for ( Peer p : storage . getGroupPeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 found = true ; 
 + break ; 
 } 
 } 
 
 if ( ! found ) { 
 - peerGroup . getPeers ( ) . add ( new PeerDesc ( peer , counter ) ) ; 
 + if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + storage . getPrivatePeers ( ) . add ( peer ) ; 
 + } else if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + storage . getGroupPeers ( ) . add ( peer ) ; 
 + } else { 
 + return ; 
 + } 
 } 
 
 - ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; 
 - ArrayList < DialogDesc > groupDescs = new ArrayList < DialogDesc > ( ) ; 
 - for ( PeerDesc d : peerGroup . getPeers ( ) ) { 
 - groupDescs . add ( new DialogDesc ( d . getPeer ( ) , " GRPOUP # " + d . getPeer ( ) . getPeerId ( ) , 
 - null , false , d . counter ) ) ; 
 + notifyVM ( ) ; 
 + saveStorage ( ) ; 
 + } 
 + 
 + private void notifyVM ( ) { 
 + ArrayListDialogSmall groupSpecs = new ArrayListDialogSmall ( ) ; 
 + for ( Peer p : storage . getGroupPeers ( ) ) { 
 + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; 
 + if ( p . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = getGroup ( p . getPeerId ( ) ) ; 
 + groupSpecs . add ( new DialogSmall ( p , 
 + group . getTitle ( ) , group . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = getUser ( p . getPeerId ( ) ) ; 
 + groupSpecs . add ( new DialogSmall ( p , 
 + user . getName ( ) , user . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } 
 + } 
 + 
 + ArrayListDialogSmall privateSpecs = new ArrayListDialogSmall ( ) ; 
 + for ( Peer p : storage . getPrivatePeers ( ) ) { 
 + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; 
 + if ( p . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = getGroup ( p . getPeerId ( ) ) ; 
 + privateSpecs . add ( new DialogSmall ( p , 
 + group . getTitle ( ) , group . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = getUser ( p . getPeerId ( ) ) ; 
 + privateSpecs . add ( new DialogSmall ( p , 
 + user . getName ( ) , user . getAvatar ( ) , 
 + spec . getCounter ( ) ) ) ; 
 + } 
 } 
 - groups . add ( new DialogGroup ( " Groups " , " group " , groupDescs ) ) ; 
 + 
 + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; 
 + groups . add ( new DialogGroup ( " Groups " , " groups " , groupSpecs ) ) ; 
 + groups . add ( new DialogGroup ( " Private " , " private " , privateSpecs ) ) ; 
 
 context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; 
 } 
 
 + private void saveStorage ( ) { 
 + / / TODO : Implement 
 + } 
 + 
 @ Override 
 public void onReceive ( Object message ) { 
 if ( message instanceof PeerInformationChanged ) { 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java 
 new file mode 100644 
 index 0000000 . . 3e7340c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / entity / GroupedStorage . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package im . actor . core . modules . internal . messages . entity ; 
 + 
 + import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 + 
 + public class GroupedStorage extends BserObject { 
 + 
 + private ArrayList < Peer > groupPeers = new ArrayList < Peer > ( ) ; 
 + private ArrayList < Peer > privatePeers = new ArrayList < Peer > ( ) ; 
 + 
 + public GroupedStorage ( ) { 
 + } 
 + 
 + public GroupedStorage ( byte [ ] data ) throws IOException { 
 + super . load ( data ) ; 
 + } 
 + 
 + public ArrayList < Peer > getGroupPeers ( ) { 
 + return groupPeers ; 
 + } 
 + 
 + public ArrayList < Peer > getPrivatePeers ( ) { 
 + return privatePeers ; 
 + } 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + List < byte [ ] > rawPrivatePeers = values . getRepeatedBytes ( 1 ) ; 
 + groupPeers . clear ( ) ; 
 + for ( byte [ ] b : rawPrivatePeers ) { 
 + groupPeers . add ( Peer . fromBytes ( b ) ) ; 
 + } 
 + List < byte [ ] > rawGroupPeers = values . getRepeatedBytes ( 2 ) ; 
 + for ( byte [ ] b : rawGroupPeers ) { 
 + privatePeers . add ( Peer . fromBytes ( b ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + for ( Peer peer : privatePeers ) { 
 + writer . writeObject ( 1 , peer ) ; 
 + } 
 + for ( Peer peer : groupPeers ) { 
 + writer . writeObject ( 2 , peer ) ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 index ae47f02 . . 47935a1 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogGroup . java 
 @ @ - 1 , 16 + 1 , 19 @ @ 
 package im . actor . core . viewmodel ; 
 
 - import java . util . ArrayList ; 
 + import com . google . j2objc . annotations . Property ; 
 
 - import im . actor . core . entity . DialogDesc ; 
 + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; 
 
 public class DialogGroup { 
 
 + @ Property ( " readonly , nonatomic " ) 
 private String title ; 
 + @ Property ( " readonly , nonatomic " ) 
 private String key ; 
 - private ArrayList < DialogDesc > dialogs ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private ArrayListDialogSmall dialogs ; 
 
 - public DialogGroup ( String title , String key , ArrayList < DialogDesc > dialogs ) { 
 + public DialogGroup ( String title , String key , ArrayListDialogSmall dialogs ) { 
 this . title = title ; 
 this . key = key ; 
 this . dialogs = dialogs ; 
 @ @ - 24 , 7 + 27 , 7 @ @ public class DialogGroup { 
 return key ; 
 } 
 
 - public ArrayList < DialogDesc > getDialogs ( ) { 
 + public ArrayListDialogSmall getDialogs ( ) { 
 return dialogs ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java 
 new file mode 100644 
 index 0000000 . . b77e893 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSmall . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import im . actor . core . entity . Avatar ; 
 + import im . actor . core . entity . Peer ; 
 + 
 + public class DialogSmall { 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final String title ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Avatar avatar ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private final int counter ; 
 + 
 + public DialogSmall ( Peer peer , String title , Avatar avatar , int counter ) { 
 + this . peer = peer ; 
 + this . title = title ; 
 + this . avatar = avatar ; 
 + this . counter = counter ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public Avatar getAvatar ( ) { 
 + return avatar ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java 
 new file mode 100644 
 index 0000000 . . 52a266d 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / DialogSpecVM . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . viewmodel . generics . BooleanValueModel ; 
 + import im . actor . core . viewmodel . generics . IntValueModel ; 
 + import im . actor . runtime . mvvm . BaseValueModel ; 
 + import im . actor . runtime . mvvm . ValueModelCreator ; 
 + 
 + public class DialogSpecVM extends BaseValueModel < DialogSpec > { 
 + 
 + public static ValueModelCreator < DialogSpec , DialogSpecVM > CREATOR = new ValueModelCreator < DialogSpec , DialogSpecVM > ( ) { 
 + @ Override 
 + public DialogSpecVM create ( DialogSpec baseValue ) { 
 + return new DialogSpecVM ( baseValue ) ; 
 + } 
 + } ; 
 + 
 + @ Property ( " readonly , nonatomic " ) 
 + private final Peer peer ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private IntValueModel counter ; 
 + @ Property ( " readonly , nonatomic " ) 
 + private BooleanValueModel isUnread ; 
 + 
 + public DialogSpecVM ( DialogSpec rawObj ) { 
 + super ( rawObj ) ; 
 + 
 + this . peer = rawObj . getPeer ( ) ; 
 + this . counter = new IntValueModel ( " dialogs . desc . counter " , rawObj . getCounter ( ) ) ; 
 + this . isUnread = new BooleanValueModel ( " dialogs . desc . unread " , rawObj . isUnread ( ) ) ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public IntValueModel getCounter ( ) { 
 + return counter ; 
 + } 
 + 
 + public BooleanValueModel getIsUnread ( ) { 
 + return isUnread ; 
 + } 
 + 
 + @ Override 
 + protected void updateValues ( DialogSpec rawObj ) { 
 + counter . change ( rawObj . getCounter ( ) ) ; 
 + isUnread . change ( rawObj . isUnread ( ) ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java 
 new file mode 100644 
 index 0000000 . . 9727306 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListDialogSmall . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package im . actor . core . viewmodel . generics ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . viewmodel . DialogSmall ; 
 + 
 + public class ArrayListDialogSmall extends ArrayList < DialogSmall > { 
 + 
 + @ Override 
 + public DialogSmall get ( int index ) { 
 + return super . get ( index ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 index 32554b4 . . f496742 100644 
 - - - a / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 + + + b / actor - sdk / sdk - ios / ActorSDK / Sources / Controllers / Recent / AADebugController . swift 
 @ @ - 6 , 7 + 6 , 7 @ @ import UIKit 
 
 class AADebugController : AAContentTableController { 
 
 - var debugData : AAManagedArrayRows < ACDialogDesc , AACommonCell > ! 
 + var debugData : AAManagedArrayRows < ACDialogSmall , AACommonCell > ! 
 
 init ( ) { 
 super . init ( style : . Plain ) 
 @ @ - 18 , 9 + 18 , 10 @ @ class AADebugController : AAContentTableController { 
 
 override func tableDidLoad ( ) { 
 section { ( s ) - > ( ) in 
 - self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogDesc , AACommonCell > ) - > ( ) in 
 - r . bindData = { ( cell : AACommonCell , data : ACDialogDesc ) - > ( ) in 
 - cell . setContent ( data . title ) 
 + self . debugData = s . arrays { ( r : AAManagedArrayRows < ACDialogSmall , AACommonCell > ) - > ( ) in 
 + r . bindData = { ( cell : AACommonCell , data : ACDialogSmall ) - > ( ) in 
 + cell . setContent ( " \ ( data . counter ) - \ ( data . title ) " ) 
 + cell . style = . Normal 
 } 
 } 
 } 
 @ @ - 30 , 11 + 31 , 11 @ @ class AADebugController : AAContentTableController { 
 binder . bind ( ActorSDK . sharedActor ( ) . messenger . getDialogGroupsVM ( ) . getGroupsValueModel ( ) ) { ( value : JavaUtilArrayList ? ) - > ( ) in 
 
 if value ! = nil { 
 - var items = [ ACDialogDesc ] ( ) 
 + var items = [ ACDialogSmall ] ( ) 
 
 for i in 0 . . < value ! . size ( ) { 
 - for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . getDialogs ( ) { 
 - items . append ( j as ! ACDialogDesc ) 
 + for j in ( value ! . getWithInt ( i ) as ! ACDialogGroup ) . dialogs { 
 + items . append ( j as ! ACDialogSmall ) 
 } 
 } 
 self . debugData . data = items
