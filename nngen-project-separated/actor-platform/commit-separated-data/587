BLEU SCORE: 0.11803467016908868

TEST MSG: ref ( core ) : Remove obsolete user update actor
GENERATED MSG: fix ( core ) : Fixing compilation error , implemented missing method in bser , implemented typing cancelling

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java < nl > index 12037a1 . . 57a2308 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java < nl > @ @ - 34 , 7 + 34 , 6 @ @ import static im . actor . runtime . actors . ActorSystem . system ; < nl > < nl > public class UsersModule extends AbsModule { < nl > < nl > - private ActorRef usersUpdatesActor ; < nl > private KeyValueEngine < User > users ; < nl > private MVVMCollection < User , UserVM > collection ; < nl > < nl > @ @ - 43 , 13 + 42 , 6 @ @ public class UsersModule extends AbsModule { < nl > < nl > this . collection = Storage . createKeyValue ( STORAGE _ USERS , UserVM . CREATOR ( context ( ) ) , User . CREATOR ) ; < nl > this . users = collection . getEngine ( ) ; < nl > - < nl > - usersUpdatesActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > - @ Override < nl > - public UsersUpdatesActor create ( ) { < nl > - return new UsersUpdatesActor ( context ) ; < nl > - } < nl > - } ) , " sequence / user " ) ; < nl > } < nl > < nl > / / Model < nl > @ @ - 61 , 11 + 53 , 7 @ @ public class UsersModule extends AbsModule { < nl > public MVVMCollection < User , UserVM > getUsers ( ) { < nl > return collection ; < nl > } < nl > - < nl > - public ActorRef getUsersUpdatesActor ( ) { < nl > - return usersUpdatesActor ; < nl > - } < nl > - < nl > + < nl > / / Actions < nl > < nl > public Command < Boolean > editMyName ( final String newName ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdates . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdates . java < nl > deleted file mode 100644 < nl > index 8109bfc . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdates . java < nl > + + + / dev / null < nl > @ @ - 1 , 4 + 0 , 0 @ @ < nl > - package im . actor . core . modules . users ; < nl > - < nl > - public class UsersUpdates { < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdatesActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdatesActor . java < nl > deleted file mode 100644 < nl > index 2ad2ce0 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdatesActor . java < nl > + + + / dev / null < nl > @ @ - 1 , 44 + 0 , 0 @ @ < nl > - package im . actor . core . modules . users ; < nl > - < nl > - import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . core . modules . ModuleActor ; < nl > - < nl > - class UsersUpdatesActor extends ModuleActor { < nl > - < nl > - public UsersUpdatesActor ( ModuleContext context ) { < nl > - super ( context ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void preStart ( ) { < nl > - / / context ( ) . getUpdatesModule ( ) . < nl > - } < nl > - < nl > - / / private void checkUsers ( Integer [ ] uids , PromiseResolver future ) { < nl > - / / for ( int uid : uids ) { < nl > - / / if ( users ( ) . getValue ( uid ) = = null ) { < nl > - / / future . result ( false ) ; < nl > - / / return ; < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / future . result ( true ) ; < nl > - / / } < nl > - / / < nl > - / / @ Override < nl > - / / public void onAsk ( Object message , PromiseResolver future ) { < nl > - / / if ( message instanceof CheckUsers ) { < nl > - / / checkUsers ( ( ( CheckUsers ) message ) . uids , future ) ; < nl > - / / } else { < nl > - / / super . onAsk ( message , future ) ; < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / public static class CheckUsers { < nl > - / / private Integer [ ] uids ; < nl > - / / < nl > - / / public CheckUsers ( Integer [ ] uids ) { < nl > - / / this . uids = uids ; < nl > - / / } < nl > - / / } < nl > - } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > index fb24226 . . 779750d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java < nl > @ @ - 150 , 7 + 150 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > w . getNick ( ) , < nl > w . getAbout ( ) , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > @ @ - 168 , 7 + 170 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > w . getNick ( ) , < nl > w . getAbout ( ) , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > @ @ - 186 , 7 + 190 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > nick , < nl > w . getAbout ( ) , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > @ @ - 204 , 7 + 210 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > w . getNick ( ) , < nl > about , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > @ @ - 222 , 7 + 230 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { < nl > w . isBot ( ) , < nl > w . getNick ( ) , < nl > w . getAbout ( ) , < nl > - w . getExternal ( ) ) ; < nl > + w . getExternal ( ) , < nl > + w . getPreferredLanguages ( ) , < nl > + w . getTimeZone ( ) ) ; < nl > res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; < nl > return new User ( res ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java < nl > index 2f83c05 . . 8a0b75a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java < nl > @ @ - 118 , 7 + 118 , 8 @ @ public class Authentication { < nl > apiConfiguration . getAppId ( ) , < nl > apiConfiguration . getAppKey ( ) , < nl > deviceHash , < nl > - apiConfiguration . getDeviceTitle ( ) < nl > + apiConfiguration . getDeviceTitle ( ) , < nl > + null , new ArrayList < String > ( ) < nl > ) , new RpcCallback < ResponseStartEmailAuth > ( ) { < nl > @ Override < nl > public void onResult ( ResponseStartEmailAuth response ) { < nl > @ @ - 163 , 7 + 164 , 8 @ @ public class Authentication { < nl > apiConfiguration . getAppId ( ) , < nl > apiConfiguration . getAppKey ( ) , < nl > deviceHash , < nl > - apiConfiguration . getDeviceTitle ( ) < nl > + apiConfiguration . getDeviceTitle ( ) , < nl > + null , new ArrayList < String > ( ) < nl > ) , new RpcCallback < ResponseStartPhoneAuth > ( ) { < nl > @ Override < nl > public void onResult ( ResponseStartPhoneAuth response ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > index 11630f1 . . bfbd171 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java < nl > @ @ - 288 , 6 + 288 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > public void sendMessage ( @ NotNull Peer peer , @ NotNull String message , @ Nullable String markDownText , < nl > @ Nullable ArrayList < Integer > mentions , boolean autoDetect ) { < nl > + / / Notify typing about message sent < nl > + context ( ) . getTypingModule ( ) . onMessageSent ( peer ) ; < nl > sendMessageActor . send ( new SenderActor . SendText ( peer , message , markDownText , mentions , < nl > autoDetect ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java < nl > index 72ce08e . . c867fb0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java < nl > @ @ - 51 , 6 + 51 , 10 @ @ public class TypingModule extends AbsModule { < nl > ownTypingActor . send ( new OwnTypingActor . Typing ( peer ) ) ; < nl > } < nl > < nl > + public void onMessageSent ( Peer peer ) { < nl > + ownTypingActor . send ( new OwnTypingActor . MessageSent ( peer ) ) ; < nl > + } < nl > + < nl > public void resetModule ( ) { < nl > / / TODO : Implement < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java < nl > index 341880a . . faf08d0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java < nl > @ @ - 6 , 6 + 6 , 7 @ @ package im . actor . core . modules . internal . typing ; < nl > < nl > import im . actor . core . api . ApiOutPeer ; < nl > import im . actor . core . api . ApiTypingType ; < nl > + import im . actor . core . api . rpc . RequestStopTyping ; < nl > import im . actor . core . api . rpc . RequestTyping ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . modules . ModuleContext ; < nl > @ @ - 30 , 9 + 31 , 12 @ @ public class OwnTypingActor extends ModuleActor { < nl > } < nl > < nl > private static final long TYPING _ DELAY = 3000L ; < nl > + private static final long TYPING _ CANCEL _ DELAY = 4000L ; < nl > < nl > private long lastTypingTime = 0 ; < nl > < nl > + private long prevRid = 0 ; < nl > + < nl > @ Verified < nl > public OwnTypingActor ( ModuleContext messenger ) { < nl > super ( messenger ) ; < nl > @ @ - 50 , 7 + 54 , 31 @ @ public class OwnTypingActor extends ModuleActor { < nl > return ; < nl > } < nl > < nl > - request ( new RequestTyping ( outPeer , ApiTypingType . TEXT ) ) ; < nl > + cancelPrevRequest ( ) ; < nl > + prevRid = request ( new RequestTyping ( outPeer , ApiTypingType . TEXT ) ) ; < nl > + self ( ) . sendOnce ( new AbortTyping ( peer ) , TYPING _ CANCEL _ DELAY ) ; < nl > + } < nl > + < nl > + private void onMessageSent ( Peer peer ) { < nl > + cancelPrevRequest ( ) ; < nl > + lastTypingTime = 0 ; < nl > + self ( ) . sendOnce ( new AbortTyping ( peer ) , 24 * 60 * 60 * 1000L ) ; < nl > + } < nl > + < nl > + private void onAbortTyping ( Peer peer ) { < nl > + ApiOutPeer outPeer = buidOutPeer ( peer ) ; < nl > + if ( outPeer = = null ) { < nl > + return ; < nl > + } < nl > + cancelPrevRequest ( ) ; < nl > + prevRid = request ( new RequestStopTyping ( outPeer , ApiTypingType . TEXT ) ) ; < nl > + } < nl > + < nl > + private void cancelPrevRequest ( ) { < nl > + if ( prevRid ! = 0 ) { < nl > + cancelRequest ( prevRid ) ; < nl > + prevRid = 0 ; < nl > + } < nl > } < nl > < nl > / / Messages < nl > @ @ - 59 , 11 + 87 , 27 @ @ public class OwnTypingActor extends ModuleActor { < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof Typing ) { < nl > onTyping ( ( ( Typing ) message ) . getPeer ( ) ) ; < nl > + } else if ( message instanceof MessageSent ) { < nl > + onMessageSent ( ( ( MessageSent ) message ) . getPeer ( ) ) ; < nl > + } else if ( message instanceof AbortTyping ) { < nl > + onAbortTyping ( ( ( AbortTyping ) message ) . getPeer ( ) ) ; < nl > } else { < nl > drop ( message ) ; < nl > } < nl > } < nl > < nl > + private static class AbortTyping { < nl > + private Peer peer ; < nl > + < nl > + public AbortTyping ( Peer peer ) { < nl > + this . peer = peer ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + } < nl > + < nl > public static class Typing { < nl > private Peer peer ; < nl > < nl > @ @ - 75 , 4 + 119 , 17 @ @ public class OwnTypingActor extends ModuleActor { < nl > return peer ; < nl > } < nl > } < nl > + < nl > + public static class MessageSent { < nl > + < nl > + private Peer peer ; < nl > + < nl > + public MessageSent ( Peer peer ) { < nl > + this . peer = peer ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java < nl > index ace0a50 . . 674756e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java < nl > @ @ - 32 , 8 + 32 , 18 @ @ public class TypingProcessor extends AbsModule { < nl > } < nl > } < nl > < nl > + @ Verified < nl > public void onTypingStop ( ApiPeer peer , int uid , ApiTypingType typingType ) { < nl > - < nl > + / / Other types are unsupported < nl > + / / TODO : Move to Actor < nl > + if ( typingType ! = ApiTypingType . TEXT ) { < nl > + return ; < nl > + } < nl > + if ( peer . getType ( ) = = ApiPeerType . PRIVATE ) { < nl > + typingActor . sendOnce ( new TypingActor . StopTyping ( uid ) ) ; < nl > + } else if ( peer . getType ( ) = = ApiPeerType . GROUP ) { < nl > + typingActor . sendOnce ( new TypingActor . StopGroupTyping ( peer . getId ( ) , uid ) ) ; < nl > + } < nl > } < nl > < nl > @ Verified < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > index 8a2998c . . ab71f3a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > @ @ - 40 , 6 + 40 , 7 @ @ import im . actor . core . api . updates . UpdateMessageReceived ; < nl > import im . actor . core . api . updates . UpdateMessageSent ; < nl > import im . actor . core . api . updates . UpdateParameterChanged ; < nl > import im . actor . core . api . updates . UpdateTyping ; < nl > + import im . actor . core . api . updates . UpdateTypingStop ; < nl > import im . actor . core . api . updates . UpdateUserLastSeen ; < nl > import im . actor . core . api . updates . UpdateUserLocalNameChanged ; < nl > import im . actor . core . api . updates . UpdateUserOffline ; < nl > @ @ - 198 , 6 + 199 , 9 @ @ public class UpdateProcessor extends AbsModule { < nl > } else if ( update instanceof UpdateTyping ) { < nl > UpdateTyping typing = ( UpdateTyping ) update ; < nl > typingProcessor . onTyping ( typing . getPeer ( ) , typing . getUid ( ) , typing . getTypingType ( ) ) ; < nl > + } else if ( update instanceof UpdateTypingStop ) { < nl > + UpdateTypingStop typing = ( UpdateTypingStop ) update ; < nl > + typingProcessor . onTypingStop ( typing . getPeer ( ) , typing . getUid ( ) , typing . getTypingType ( ) ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java < nl > index 67b681e . . 072af9f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java < nl > @ @ - 130 , 8 + 130 , 8 @ @ public class ModuleActor extends Actor implements BusSubscriber { < nl > return context ; < nl > } < nl > < nl > - public < T extends Response > void request ( Request < T > request ) { < nl > - request ( request , new RpcCallback < T > ( ) { < nl > + public < T extends Response > long request ( Request < T > request ) { < nl > + return request ( request , new RpcCallback < T > ( ) { < nl > @ Override < nl > public void onResult ( T response ) { < nl > < nl > @ @ - 144 , 8 + 144 , 8 @ @ public class ModuleActor extends Actor implements BusSubscriber { < nl > } ) ; < nl > } < nl > < nl > - public < T extends Response > void request ( final Request < T > request , final RpcCallback < T > callback ) { < nl > - context . getActorApi ( ) . request ( request , new RpcCallback < T > ( ) { < nl > + public < T extends Response > long request ( final Request < T > request , final RpcCallback < T > callback ) { < nl > + return context . getActorApi ( ) . request ( request , new RpcCallback < T > ( ) { < nl > @ Override < nl > public void onResult ( final T response ) { < nl > self ( ) . send ( new Runnable ( ) { < nl > @ @ - 178 , 6 + 178 , 10 @ @ public class ModuleActor extends Actor implements BusSubscriber { < nl > } ) ; < nl > } < nl > < nl > + public void cancelRequest ( long rid ) { < nl > + context . getActorApi ( ) . cancelRequest ( rid ) ; < nl > + } < nl > + < nl > @ Override < nl > public void onBusEvent ( Event event ) { < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java < nl > index a019d60 . . acfcafa 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java < nl > @ @ - 11 , 6 + 11 , 7 @ @ import im . actor . core . network . api . ApiBroker ; < nl > import im . actor . core . network . parser . Request ; < nl > import im . actor . core . network . parser . Response ; < nl > import im . actor . runtime . threading . AtomicIntegerCompat ; < nl > + import im . actor . runtime . threading . AtomicLongCompat ; < nl > < nl > / * * < nl > * Actor API Object for connecting to Actor ' s servers < nl > @ @ - 22 , 6 + 23 , 7 @ @ public class ActorApi { < nl > public static final int API _ MINOR _ VERSION = ApiVersion . VERSION _ MINOR ; < nl > < nl > private static final AtomicIntegerCompat NEXT _ ID = im . actor . runtime . Runtime . createAtomicInt ( 1 ) ; < nl > + private static final AtomicLongCompat NEXT _ RPC _ ID = im . actor . runtime . Runtime . createAtomicLong ( 1 ) ; < nl > < nl > private final Endpoints endpoints ; < nl > private final AuthKeyStorage keyStorage ; < nl > @ @ - 62 , 13 + 64 , 24 @ @ public class ActorApi { < nl > * @ param request request body < nl > * @ param callback request callback < nl > * @ param < T > type of response < nl > + * @ return rid of request < nl > * / < nl > - public synchronized < T extends Response > void request ( Request < T > request , RpcCallback < T > callback ) { < nl > + public synchronized < T extends Response > long request ( Request < T > request , RpcCallback < T > callback ) { < nl > if ( request = = null ) { < nl > throw new RuntimeException ( " Request can ' t be null " ) ; < nl > } < nl > + long rid = NEXT _ RPC _ ID . incrementAndGet ( ) ; < nl > + this . apiBroker . send ( new ApiBroker . PerformRequest ( rid , request , callback ) ) ; < nl > + return rid ; < nl > + } < nl > < nl > - this . apiBroker . send ( new ApiBroker . PerformRequest ( request , callback ) ) ; < nl > + / * * < nl > + * Cancelling API Request < nl > + * < nl > + * @ param rid request rid < nl > + * / < nl > + public synchronized void cancelRequest ( long rid ) { < nl > + this . apiBroker . send ( new ApiBroker . CancelRequest ( rid ) ) ; < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > index 207ffca . . 06f4742 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java < nl > @ @ - 60 , 7 + 60 , 7 @ @ public class ApiBroker extends Actor { < nl > } < nl > < nl > private static final String TAG = " ApiBroker " ; < nl > - private static final AtomicLongCompat NEXT _ RPC _ ID = im . actor . runtime . Runtime . createAtomicLong ( 1 ) ; < nl > + < nl > private static final AtomicIntegerCompat NEXT _ PROTO _ ID = im . actor . runtime . Runtime . createAtomicInt ( 1 ) ; < nl > < nl > private final Endpoints endpoints ; < nl > @ @ - 360 , 14 + 360 , 21 @ @ public class ApiBroker extends Actor { < nl > } < nl > < nl > public static class PerformRequest { < nl > + < nl > private Request message ; < nl > private RpcCallback callback ; < nl > + private long rid ; < nl > < nl > - public PerformRequest ( Request message , RpcCallback callback ) { < nl > + public PerformRequest ( long rid , Request message , RpcCallback callback ) { < nl > + this . rid = rid ; < nl > this . message = message ; < nl > this . callback = callback ; < nl > } < nl > < nl > + public long getRid ( ) { < nl > + return rid ; < nl > + } < nl > + < nl > public Request getMessage ( ) { < nl > return message ; < nl > } < nl > @ @ - 577 , 8 + 584 , 7 @ @ public class ApiBroker extends Actor { < nl > createMtProto ( initMTProto . getAuthId ( ) ) ; < nl > } else if ( message instanceof PerformRequest ) { < nl > PerformRequest request = ( PerformRequest ) message ; < nl > - performRequest ( NEXT _ RPC _ ID . getAndIncrement ( ) , < nl > - request . getMessage ( ) , request . getCallback ( ) ) ; < nl > + performRequest ( request . getRid ( ) , request . getMessage ( ) , request . getCallback ( ) ) ; < nl > } else if ( message instanceof CancelRequest ) { < nl > CancelRequest cancelRequest = ( CancelRequest ) message ; < nl > cancelRequest ( cancelRequest . getRandomId ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java < nl > index f203ad1 . . 6aee0c3 100755 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java < nl > @ @ - 116 , 6 + 116 , 22 @ @ public class BserWriter { < nl > } < nl > } < nl > < nl > + public void writeRepeatedString ( int fieldNumber , @ NotNull List < String > values ) throws IOException { < nl > + if ( values = = null ) { < nl > + throw new IllegalArgumentException ( " Values can not be null " ) ; < nl > + } < nl > + if ( values . size ( ) > BserLimits . MAX _ PROTO _ REPEATED ) { < nl > + throw new IllegalArgumentException ( " Too many values " ) ; < nl > + } < nl > + writtenFields . put ( fieldNumber , true ) ; < nl > + for ( String l : values ) { < nl > + if ( l = = null ) { < nl > + throw new IllegalArgumentException ( " Value can not be null " ) ; < nl > + } < nl > + writeString ( fieldNumber , l ) ; < nl > + } < nl > + } < nl > + < nl > public void writeRepeatedBytes ( int fieldNumber , @ NotNull List < byte [ ] > values ) throws IOException { < nl > if ( values = = null ) { < nl > throw new IllegalArgumentException ( " Values can not be null " ) ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java 
 index 12037a1 . . 57a2308 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersModule . java 
 @ @ - 34 , 7 + 34 , 6 @ @ import static im . actor . runtime . actors . ActorSystem . system ; 
 
 public class UsersModule extends AbsModule { 
 
 - private ActorRef usersUpdatesActor ; 
 private KeyValueEngine < User > users ; 
 private MVVMCollection < User , UserVM > collection ; 
 
 @ @ - 43 , 13 + 42 , 6 @ @ public class UsersModule extends AbsModule { 
 
 this . collection = Storage . createKeyValue ( STORAGE _ USERS , UserVM . CREATOR ( context ( ) ) , User . CREATOR ) ; 
 this . users = collection . getEngine ( ) ; 
 - 
 - usersUpdatesActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 - @ Override 
 - public UsersUpdatesActor create ( ) { 
 - return new UsersUpdatesActor ( context ) ; 
 - } 
 - } ) , " sequence / user " ) ; 
 } 
 
 / / Model 
 @ @ - 61 , 11 + 53 , 7 @ @ public class UsersModule extends AbsModule { 
 public MVVMCollection < User , UserVM > getUsers ( ) { 
 return collection ; 
 } 
 - 
 - public ActorRef getUsersUpdatesActor ( ) { 
 - return usersUpdatesActor ; 
 - } 
 - 
 + 
 / / Actions 
 
 public Command < Boolean > editMyName ( final String newName ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdates . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdates . java 
 deleted file mode 100644 
 index 8109bfc . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdates . java 
 + + + / dev / null 
 @ @ - 1 , 4 + 0 , 0 @ @ 
 - package im . actor . core . modules . users ; 
 - 
 - public class UsersUpdates { 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdatesActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdatesActor . java 
 deleted file mode 100644 
 index 2ad2ce0 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersUpdatesActor . java 
 + + + / dev / null 
 @ @ - 1 , 44 + 0 , 0 @ @ 
 - package im . actor . core . modules . users ; 
 - 
 - import im . actor . core . modules . ModuleContext ; 
 - import im . actor . core . modules . ModuleActor ; 
 - 
 - class UsersUpdatesActor extends ModuleActor { 
 - 
 - public UsersUpdatesActor ( ModuleContext context ) { 
 - super ( context ) ; 
 - } 
 - 
 - @ Override 
 - public void preStart ( ) { 
 - / / context ( ) . getUpdatesModule ( ) . 
 - } 
 - 
 - / / private void checkUsers ( Integer [ ] uids , PromiseResolver future ) { 
 - / / for ( int uid : uids ) { 
 - / / if ( users ( ) . getValue ( uid ) = = null ) { 
 - / / future . result ( false ) ; 
 - / / return ; 
 - / / } 
 - / / } 
 - / / 
 - / / future . result ( true ) ; 
 - / / } 
 - / / 
 - / / @ Override 
 - / / public void onAsk ( Object message , PromiseResolver future ) { 
 - / / if ( message instanceof CheckUsers ) { 
 - / / checkUsers ( ( ( CheckUsers ) message ) . uids , future ) ; 
 - / / } else { 
 - / / super . onAsk ( message , future ) ; 
 - / / } 
 - / / } 
 - / / 
 - / / public static class CheckUsers { 
 - / / private Integer [ ] uids ; 
 - / / 
 - / / public CheckUsers ( Integer [ ] uids ) { 
 - / / this . uids = uids ; 
 - / / } 
 - / / } 
 - } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 index fb24226 . . 779750d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / User . java 
 @ @ - 150 , 7 + 150 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 w . getNick ( ) , 
 w . getAbout ( ) , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 @ @ - 168 , 7 + 170 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 w . getNick ( ) , 
 w . getAbout ( ) , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 @ @ - 186 , 7 + 190 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 nick , 
 w . getAbout ( ) , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 @ @ - 204 , 7 + 210 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 w . getNick ( ) , 
 about , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 @ @ - 222 , 7 + 230 , 9 @ @ public class User extends WrapperEntity < ApiUser > implements KeyValueItem { 
 w . isBot ( ) , 
 w . getNick ( ) , 
 w . getAbout ( ) , 
 - w . getExternal ( ) ) ; 
 + w . getExternal ( ) , 
 + w . getPreferredLanguages ( ) , 
 + w . getTimeZone ( ) ) ; 
 res . setUnmappedObjects ( w . getUnmappedObjects ( ) ) ; 
 return new User ( res ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java 
 index 2f83c05 . . 8a0b75a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Authentication . java 
 @ @ - 118 , 7 + 118 , 8 @ @ public class Authentication { 
 apiConfiguration . getAppId ( ) , 
 apiConfiguration . getAppKey ( ) , 
 deviceHash , 
 - apiConfiguration . getDeviceTitle ( ) 
 + apiConfiguration . getDeviceTitle ( ) , 
 + null , new ArrayList < String > ( ) 
 ) , new RpcCallback < ResponseStartEmailAuth > ( ) { 
 @ Override 
 public void onResult ( ResponseStartEmailAuth response ) { 
 @ @ - 163 , 7 + 164 , 8 @ @ public class Authentication { 
 apiConfiguration . getAppId ( ) , 
 apiConfiguration . getAppKey ( ) , 
 deviceHash , 
 - apiConfiguration . getDeviceTitle ( ) 
 + apiConfiguration . getDeviceTitle ( ) , 
 + null , new ArrayList < String > ( ) 
 ) , new RpcCallback < ResponseStartPhoneAuth > ( ) { 
 @ Override 
 public void onResult ( ResponseStartPhoneAuth response ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 index 11630f1 . . bfbd171 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / MessagesModule . java 
 @ @ - 288 , 6 + 288 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 public void sendMessage ( @ NotNull Peer peer , @ NotNull String message , @ Nullable String markDownText , 
 @ Nullable ArrayList < Integer > mentions , boolean autoDetect ) { 
 + / / Notify typing about message sent 
 + context ( ) . getTypingModule ( ) . onMessageSent ( peer ) ; 
 sendMessageActor . send ( new SenderActor . SendText ( peer , message , markDownText , mentions , 
 autoDetect ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java 
 index 72ce08e . . c867fb0 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / TypingModule . java 
 @ @ - 51 , 6 + 51 , 10 @ @ public class TypingModule extends AbsModule { 
 ownTypingActor . send ( new OwnTypingActor . Typing ( peer ) ) ; 
 } 
 
 + public void onMessageSent ( Peer peer ) { 
 + ownTypingActor . send ( new OwnTypingActor . MessageSent ( peer ) ) ; 
 + } 
 + 
 public void resetModule ( ) { 
 / / TODO : Implement 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java 
 index 341880a . . faf08d0 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / typing / OwnTypingActor . java 
 @ @ - 6 , 6 + 6 , 7 @ @ package im . actor . core . modules . internal . typing ; 
 
 import im . actor . core . api . ApiOutPeer ; 
 import im . actor . core . api . ApiTypingType ; 
 + import im . actor . core . api . rpc . RequestStopTyping ; 
 import im . actor . core . api . rpc . RequestTyping ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . modules . ModuleContext ; 
 @ @ - 30 , 9 + 31 , 12 @ @ public class OwnTypingActor extends ModuleActor { 
 } 
 
 private static final long TYPING _ DELAY = 3000L ; 
 + private static final long TYPING _ CANCEL _ DELAY = 4000L ; 
 
 private long lastTypingTime = 0 ; 
 
 + private long prevRid = 0 ; 
 + 
 @ Verified 
 public OwnTypingActor ( ModuleContext messenger ) { 
 super ( messenger ) ; 
 @ @ - 50 , 7 + 54 , 31 @ @ public class OwnTypingActor extends ModuleActor { 
 return ; 
 } 
 
 - request ( new RequestTyping ( outPeer , ApiTypingType . TEXT ) ) ; 
 + cancelPrevRequest ( ) ; 
 + prevRid = request ( new RequestTyping ( outPeer , ApiTypingType . TEXT ) ) ; 
 + self ( ) . sendOnce ( new AbortTyping ( peer ) , TYPING _ CANCEL _ DELAY ) ; 
 + } 
 + 
 + private void onMessageSent ( Peer peer ) { 
 + cancelPrevRequest ( ) ; 
 + lastTypingTime = 0 ; 
 + self ( ) . sendOnce ( new AbortTyping ( peer ) , 24 * 60 * 60 * 1000L ) ; 
 + } 
 + 
 + private void onAbortTyping ( Peer peer ) { 
 + ApiOutPeer outPeer = buidOutPeer ( peer ) ; 
 + if ( outPeer = = null ) { 
 + return ; 
 + } 
 + cancelPrevRequest ( ) ; 
 + prevRid = request ( new RequestStopTyping ( outPeer , ApiTypingType . TEXT ) ) ; 
 + } 
 + 
 + private void cancelPrevRequest ( ) { 
 + if ( prevRid ! = 0 ) { 
 + cancelRequest ( prevRid ) ; 
 + prevRid = 0 ; 
 + } 
 } 
 
 / / Messages 
 @ @ - 59 , 11 + 87 , 27 @ @ public class OwnTypingActor extends ModuleActor { 
 public void onReceive ( Object message ) { 
 if ( message instanceof Typing ) { 
 onTyping ( ( ( Typing ) message ) . getPeer ( ) ) ; 
 + } else if ( message instanceof MessageSent ) { 
 + onMessageSent ( ( ( MessageSent ) message ) . getPeer ( ) ) ; 
 + } else if ( message instanceof AbortTyping ) { 
 + onAbortTyping ( ( ( AbortTyping ) message ) . getPeer ( ) ) ; 
 } else { 
 drop ( message ) ; 
 } 
 } 
 
 + private static class AbortTyping { 
 + private Peer peer ; 
 + 
 + public AbortTyping ( Peer peer ) { 
 + this . peer = peer ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + } 
 + 
 public static class Typing { 
 private Peer peer ; 
 
 @ @ - 75 , 4 + 119 , 17 @ @ public class OwnTypingActor extends ModuleActor { 
 return peer ; 
 } 
 } 
 + 
 + public static class MessageSent { 
 + 
 + private Peer peer ; 
 + 
 + public MessageSent ( Peer peer ) { 
 + this . peer = peer ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java 
 index ace0a50 . . 674756e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / TypingProcessor . java 
 @ @ - 32 , 8 + 32 , 18 @ @ public class TypingProcessor extends AbsModule { 
 } 
 } 
 
 + @ Verified 
 public void onTypingStop ( ApiPeer peer , int uid , ApiTypingType typingType ) { 
 - 
 + / / Other types are unsupported 
 + / / TODO : Move to Actor 
 + if ( typingType ! = ApiTypingType . TEXT ) { 
 + return ; 
 + } 
 + if ( peer . getType ( ) = = ApiPeerType . PRIVATE ) { 
 + typingActor . sendOnce ( new TypingActor . StopTyping ( uid ) ) ; 
 + } else if ( peer . getType ( ) = = ApiPeerType . GROUP ) { 
 + typingActor . sendOnce ( new TypingActor . StopGroupTyping ( peer . getId ( ) , uid ) ) ; 
 + } 
 } 
 
 @ Verified 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 index 8a2998c . . ab71f3a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 @ @ - 40 , 6 + 40 , 7 @ @ import im . actor . core . api . updates . UpdateMessageReceived ; 
 import im . actor . core . api . updates . UpdateMessageSent ; 
 import im . actor . core . api . updates . UpdateParameterChanged ; 
 import im . actor . core . api . updates . UpdateTyping ; 
 + import im . actor . core . api . updates . UpdateTypingStop ; 
 import im . actor . core . api . updates . UpdateUserLastSeen ; 
 import im . actor . core . api . updates . UpdateUserLocalNameChanged ; 
 import im . actor . core . api . updates . UpdateUserOffline ; 
 @ @ - 198 , 6 + 199 , 9 @ @ public class UpdateProcessor extends AbsModule { 
 } else if ( update instanceof UpdateTyping ) { 
 UpdateTyping typing = ( UpdateTyping ) update ; 
 typingProcessor . onTyping ( typing . getPeer ( ) , typing . getUid ( ) , typing . getTypingType ( ) ) ; 
 + } else if ( update instanceof UpdateTypingStop ) { 
 + UpdateTypingStop typing = ( UpdateTypingStop ) update ; 
 + typingProcessor . onTypingStop ( typing . getPeer ( ) , typing . getUid ( ) , typing . getTypingType ( ) ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java 
 index 67b681e . . 072af9f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / utils / ModuleActor . java 
 @ @ - 130 , 8 + 130 , 8 @ @ public class ModuleActor extends Actor implements BusSubscriber { 
 return context ; 
 } 
 
 - public < T extends Response > void request ( Request < T > request ) { 
 - request ( request , new RpcCallback < T > ( ) { 
 + public < T extends Response > long request ( Request < T > request ) { 
 + return request ( request , new RpcCallback < T > ( ) { 
 @ Override 
 public void onResult ( T response ) { 
 
 @ @ - 144 , 8 + 144 , 8 @ @ public class ModuleActor extends Actor implements BusSubscriber { 
 } ) ; 
 } 
 
 - public < T extends Response > void request ( final Request < T > request , final RpcCallback < T > callback ) { 
 - context . getActorApi ( ) . request ( request , new RpcCallback < T > ( ) { 
 + public < T extends Response > long request ( final Request < T > request , final RpcCallback < T > callback ) { 
 + return context . getActorApi ( ) . request ( request , new RpcCallback < T > ( ) { 
 @ Override 
 public void onResult ( final T response ) { 
 self ( ) . send ( new Runnable ( ) { 
 @ @ - 178 , 6 + 178 , 10 @ @ public class ModuleActor extends Actor implements BusSubscriber { 
 } ) ; 
 } 
 
 + public void cancelRequest ( long rid ) { 
 + context . getActorApi ( ) . cancelRequest ( rid ) ; 
 + } 
 + 
 @ Override 
 public void onBusEvent ( Event event ) { 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java 
 index a019d60 . . acfcafa 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / ActorApi . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import im . actor . core . network . api . ApiBroker ; 
 import im . actor . core . network . parser . Request ; 
 import im . actor . core . network . parser . Response ; 
 import im . actor . runtime . threading . AtomicIntegerCompat ; 
 + import im . actor . runtime . threading . AtomicLongCompat ; 
 
 / * * 
 * Actor API Object for connecting to Actor ' s servers 
 @ @ - 22 , 6 + 23 , 7 @ @ public class ActorApi { 
 public static final int API _ MINOR _ VERSION = ApiVersion . VERSION _ MINOR ; 
 
 private static final AtomicIntegerCompat NEXT _ ID = im . actor . runtime . Runtime . createAtomicInt ( 1 ) ; 
 + private static final AtomicLongCompat NEXT _ RPC _ ID = im . actor . runtime . Runtime . createAtomicLong ( 1 ) ; 
 
 private final Endpoints endpoints ; 
 private final AuthKeyStorage keyStorage ; 
 @ @ - 62 , 13 + 64 , 24 @ @ public class ActorApi { 
 * @ param request request body 
 * @ param callback request callback 
 * @ param < T > type of response 
 + * @ return rid of request 
 * / 
 - public synchronized < T extends Response > void request ( Request < T > request , RpcCallback < T > callback ) { 
 + public synchronized < T extends Response > long request ( Request < T > request , RpcCallback < T > callback ) { 
 if ( request = = null ) { 
 throw new RuntimeException ( " Request can ' t be null " ) ; 
 } 
 + long rid = NEXT _ RPC _ ID . incrementAndGet ( ) ; 
 + this . apiBroker . send ( new ApiBroker . PerformRequest ( rid , request , callback ) ) ; 
 + return rid ; 
 + } 
 
 - this . apiBroker . send ( new ApiBroker . PerformRequest ( request , callback ) ) ; 
 + / * * 
 + * Cancelling API Request 
 + * 
 + * @ param rid request rid 
 + * / 
 + public synchronized void cancelRequest ( long rid ) { 
 + this . apiBroker . send ( new ApiBroker . CancelRequest ( rid ) ) ; 
 } 
 
 / * * 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 index 207ffca . . 06f4742 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / network / api / ApiBroker . java 
 @ @ - 60 , 7 + 60 , 7 @ @ public class ApiBroker extends Actor { 
 } 
 
 private static final String TAG = " ApiBroker " ; 
 - private static final AtomicLongCompat NEXT _ RPC _ ID = im . actor . runtime . Runtime . createAtomicLong ( 1 ) ; 
 + 
 private static final AtomicIntegerCompat NEXT _ PROTO _ ID = im . actor . runtime . Runtime . createAtomicInt ( 1 ) ; 
 
 private final Endpoints endpoints ; 
 @ @ - 360 , 14 + 360 , 21 @ @ public class ApiBroker extends Actor { 
 } 
 
 public static class PerformRequest { 
 + 
 private Request message ; 
 private RpcCallback callback ; 
 + private long rid ; 
 
 - public PerformRequest ( Request message , RpcCallback callback ) { 
 + public PerformRequest ( long rid , Request message , RpcCallback callback ) { 
 + this . rid = rid ; 
 this . message = message ; 
 this . callback = callback ; 
 } 
 
 + public long getRid ( ) { 
 + return rid ; 
 + } 
 + 
 public Request getMessage ( ) { 
 return message ; 
 } 
 @ @ - 577 , 8 + 584 , 7 @ @ public class ApiBroker extends Actor { 
 createMtProto ( initMTProto . getAuthId ( ) ) ; 
 } else if ( message instanceof PerformRequest ) { 
 PerformRequest request = ( PerformRequest ) message ; 
 - performRequest ( NEXT _ RPC _ ID . getAndIncrement ( ) , 
 - request . getMessage ( ) , request . getCallback ( ) ) ; 
 + performRequest ( request . getRid ( ) , request . getMessage ( ) , request . getCallback ( ) ) ; 
 } else if ( message instanceof CancelRequest ) { 
 CancelRequest cancelRequest = ( CancelRequest ) message ; 
 cancelRequest ( cancelRequest . getRandomId ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java 
 index f203ad1 . . 6aee0c3 100755 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / bser / BserWriter . java 
 @ @ - 116 , 6 + 116 , 22 @ @ public class BserWriter { 
 } 
 } 
 
 + public void writeRepeatedString ( int fieldNumber , @ NotNull List < String > values ) throws IOException { 
 + if ( values = = null ) { 
 + throw new IllegalArgumentException ( " Values can not be null " ) ; 
 + } 
 + if ( values . size ( ) > BserLimits . MAX _ PROTO _ REPEATED ) { 
 + throw new IllegalArgumentException ( " Too many values " ) ; 
 + } 
 + writtenFields . put ( fieldNumber , true ) ; 
 + for ( String l : values ) { 
 + if ( l = = null ) { 
 + throw new IllegalArgumentException ( " Value can not be null " ) ; 
 + } 
 + writeString ( fieldNumber , l ) ; 
 + } 
 + } 
 + 
 public void writeRepeatedBytes ( int fieldNumber , @ NotNull List < byte [ ] > values ) throws IOException { 
 if ( values = = null ) { 
 throw new IllegalArgumentException ( " Values can not be null " ) ;
