BLEU SCORE: 0.08913765521398126

TEST MSG: fix ( runtime ) : cast ArrayList to Array of promises
GENERATED MSG: fix ( core ) promise to array

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > index db2a0b5 . . fb08514 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > @ @ - 30 , 6 + 30 , 7 @ @ public class PromisesArray < T > { < nl > * @ param < T > type of array < nl > * @ return array < nl > * / < nl > + @ SuppressWarnings ( " unchecked " ) < nl > public static < T > PromisesArray < T > of ( Collection < T > collection ) { < nl > final ArrayList < Promise < T > > res = new ArrayList < > ( ) ; < nl > for ( T t : collection ) { < nl > @ @ - 77 , 7 + 78 , 7 @ @ public class PromisesArray < T > { < nl > public static < T > PromisesArray < T > ofPromises ( Promise < T > . . . items ) { < nl > ArrayList < Promise < T > > res = new ArrayList < > ( ) ; < nl > Collections . addAll ( res , items ) ; < nl > - final Promise [ ] promises = ( Promise [ ] ) res . toArray ( ) ; < nl > + final Promise [ ] promises = res . toArray ( new Promise [ res . size ( ) ] ) ; < nl > return new PromisesArray < > ( new PromiseFunc < Promise < T > [ ] > ( ) { < nl > @ Override < nl > public void exec ( PromiseResolver < Promise < T > [ ] > executor ) {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > index db2a0b5 . . a00ed19 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java < nl > @ @ - 77 , 7 + 77 , 7 @ @ public class PromisesArray < T > { < nl > public static < T > PromisesArray < T > ofPromises ( Promise < T > . . . items ) { < nl > ArrayList < Promise < T > > res = new ArrayList < > ( ) ; < nl > Collections . addAll ( res , items ) ; < nl > - final Promise [ ] promises = ( Promise [ ] ) res . toArray ( ) ; < nl > + final Promise [ ] promises = res . toArray ( new Promise [ res . size ( ) ] ) ; < nl > return new PromisesArray < > ( new PromiseFunc < Promise < T > [ ] > ( ) { < nl > @ Override < nl > public void exec ( PromiseResolver < Promise < T > [ ] > executor ) {

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 index db2a0b5 . . fb08514 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 @ @ - 30 , 6 + 30 , 7 @ @ public class PromisesArray < T > { 
 * @ param < T > type of array 
 * @ return array 
 * / 
 + @ SuppressWarnings ( " unchecked " ) 
 public static < T > PromisesArray < T > of ( Collection < T > collection ) { 
 final ArrayList < Promise < T > > res = new ArrayList < > ( ) ; 
 for ( T t : collection ) { 
 @ @ - 77 , 7 + 78 , 7 @ @ public class PromisesArray < T > { 
 public static < T > PromisesArray < T > ofPromises ( Promise < T > . . . items ) { 
 ArrayList < Promise < T > > res = new ArrayList < > ( ) ; 
 Collections . addAll ( res , items ) ; 
 - final Promise [ ] promises = ( Promise [ ] ) res . toArray ( ) ; 
 + final Promise [ ] promises = res . toArray ( new Promise [ res . size ( ) ] ) ; 
 return new PromisesArray < > ( new PromiseFunc < Promise < T > [ ] > ( ) { 
 @ Override 
 public void exec ( PromiseResolver < Promise < T > [ ] > executor ) {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 index db2a0b5 . . a00ed19 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / PromisesArray . java 
 @ @ - 77 , 7 + 77 , 7 @ @ public class PromisesArray < T > { 
 public static < T > PromisesArray < T > ofPromises ( Promise < T > . . . items ) { 
 ArrayList < Promise < T > > res = new ArrayList < > ( ) ; 
 Collections . addAll ( res , items ) ; 
 - final Promise [ ] promises = ( Promise [ ] ) res . toArray ( ) ; 
 + final Promise [ ] promises = res . toArray ( new Promise [ res . size ( ) ] ) ; 
 return new PromisesArray < > ( new PromiseFunc < Promise < T > [ ] > ( ) { 
 @ Override 
 public void exec ( PromiseResolver < Promise < T > [ ] > executor ) {
