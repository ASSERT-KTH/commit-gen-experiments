BLEU SCORE: 0.1777835117834348

TEST MSG: fix + chore ( iOS ) : last seen rewrite + new loc strings
GENERATED MSG: wip ( iOS ) : Invite links

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > index 6ece6e5 . . e5de378 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings < nl > @ @ - 88 , 6 + 88 , 13 @ @ < nl > < nl > " SettingsLastSeenHint " = " Change who can see your Last Seen time . " ; < nl > < nl > + " SettingsLastSeenEverybody " = " Everybody " ; < nl > + < nl > + " SettingsLastSeenContacts " = " My Contacts " ; < nl > + < nl > + " SettingsLastSeenNobody " = " Nobody " ; < nl > + < nl > + < nl > < nl > / * < nl > * Profile < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift < nl > index 919efdd . . fcb1af0 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift < nl > @ @ - 4 , 63 + 4 , 135 @ @ < nl > < nl > import UIKit < nl > < nl > - public class AASettingsLastSeenController : AAContentTableController { < nl > + public class AASettingsLastSeenController : AATableViewController { < nl > < nl > - private var sessionsCell : AAManagedArrayRows < ARApiAuthSession , AACommonCell > ? < nl > + private var privacy = Actor . getPrivacy ( ) < nl > + < nl > + / / MARK : - < nl > + / / MARK : Constructors < nl > + < nl > + private let CellIdentifier = " CellIdentifier " < nl > < nl > public init ( ) { < nl > - super . init ( style : AAContentTableStyle . SettingsGrouped ) < nl > + super . init ( style : UITableViewStyle . Grouped ) < nl > < nl > - navigationItem . title = AALocalized ( " SettingsLastSeen " ) < nl > + title = AALocalized ( " SettingsLastSeen " ) < nl > < nl > - content = ACAllEvents _ Settings . PRIVACY ( ) < nl > + content = ACAllEvents _ Settings . NOTIFICATIONS ( ) < nl > } < nl > < nl > public required init ( coder aDecoder : NSCoder ) { < nl > fatalError ( " init ( coder : ) has not been implemented " ) < nl > } < nl > < nl > - public override func tableDidLoad ( ) { < nl > + / / MARK : - < nl > + < nl > + public override func viewDidLoad ( ) { < nl > + super . viewDidLoad ( ) < nl > + < nl > + tableView . registerClass ( AACommonCell . self , forCellReuseIdentifier : CellIdentifier ) < nl > + tableView . backgroundColor = appStyle . vcBackyardColor < nl > + < nl > + view . backgroundColor = tableView . backgroundColor < nl > + } < nl > + < nl > + / / MARK : - < nl > + / / MARK : UITableView Data Source < nl > + < nl > + public override func numberOfSectionsInTableView ( tableView : UITableView ) - > Int { < nl > + return 1 < nl > + } < nl > + < nl > + public override func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) - > Int { < nl > + return 3 < nl > + } < nl > + < nl > + public func tableView ( tableView : UITableView , titleForHeaderInSection section : Int ) - > String ? { < nl > + return nil < nl > + } < nl > + < nl > + public func tableView ( tableView : UITableView , titleForFooterInSection section : Int ) - > String ? { < nl > + return nil < nl > + } < nl > + < nl > + private func lastSeenCell ( indexPath : NSIndexPath ) - > AACommonCell { < nl > + let cell = tableView . dequeueReusableCellWithIdentifier ( CellIdentifier , forIndexPath : indexPath ) as ! AACommonCell < nl > < nl > - section { ( s ) - > ( ) in < nl > + if indexPath . row = = 0 { < nl > + < nl > + cell . setContent ( AALocalized ( " SettingsLastSeenEverybody " ) ) < nl > + < nl > + if ( self . privacy = = " always " ) { < nl > + cell . style = . Checkmark < nl > + } else { < nl > + cell . style = . Normal < nl > + } < nl > + < nl > + } else if indexPath . row = = 1 { < nl > + < nl > + cell . setContent ( AALocalized ( " SettingsLastSeenContacts " ) ) < nl > < nl > - s . common ( { ( r ) - > ( ) in < nl > - r . content = " Everybody " < nl > - < nl > - r . selectAction = { < nl > - < nl > - print ( " tap in Everybody " ) < nl > - return true < nl > - } < nl > - < nl > - } ) < nl > + if ( self . privacy = = " contacts " ) { < nl > + cell . style = . Checkmark < nl > + } else { < nl > + cell . style = . Normal < nl > + } < nl > < nl > - s . common ( { ( r ) - > ( ) in < nl > - r . content = " My Contacts " < nl > - < nl > - r . selectAction = { < nl > - < nl > - print ( " tap in My Contacts " ) < nl > - return true < nl > - } < nl > - < nl > - } ) < nl > + } else if indexPath . row = = 2 { < nl > < nl > - s . common ( { ( r ) - > ( ) in < nl > - r . content = " Nobody " < nl > - < nl > - r . selectAction = { < nl > - < nl > - print ( " tap in Nobody " ) < nl > - return true < nl > - } < nl > - < nl > - } ) < nl > + cell . setContent ( AALocalized ( " SettingsLastSeenNone " ) ) < nl > < nl > + if ( self . privacy = = " none " ) { < nl > + cell . style = . Checkmark < nl > + } else { < nl > + cell . style = . Normal < nl > + } < nl > < nl > } < nl > < nl > + cell . selectionStyle = UITableViewCellSelectionStyle . None < nl > + cell . bottomSeparatorVisible = false < nl > + cell . topSeparatorVisible = false < nl > + cell . bottomSeparatorLeftInset = 0 < nl > + cell . topSeparatorLeftInset = 0 < nl > + < nl > + return cell < nl > + } < nl > + < nl > + public override func tableView ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) - > UITableViewCell { < nl > + return lastSeenCell ( indexPath ) < nl > + } < nl > + < nl > + public func tableView ( tableView : UITableView , willDisplayHeaderView view : UIView , forSection section : Int ) { < nl > + let header : UITableViewHeaderFooterView = view as ! UITableViewHeaderFooterView < nl > + header . textLabel ! . textColor = ActorSDK . sharedActor ( ) . style . cellFooterColor < nl > } < nl > < nl > + public func tableView ( tableView : UITableView , willDisplayFooterView view : UIView , forSection section : Int ) { < nl > + let header : UITableViewHeaderFooterView = view as ! UITableViewHeaderFooterView < nl > + header . textLabel ! . textColor = ActorSDK . sharedActor ( ) . style . cellFooterColor < nl > + } < nl > + < nl > + < nl > + public func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { < nl > + < nl > + if indexPath . row = = 0 { < nl > + < nl > + Actor . setPrivacyWithPrivacy ( " always " ) < nl > + < nl > + } else if indexPath . row = = 1 { < nl > + < nl > + Actor . setPrivacyWithPrivacy ( " contacts " ) < nl > + < nl > + } else if indexPath . row = = 2 { < nl > + < nl > + Actor . setPrivacyWithPrivacy ( " none " ) < nl > + < nl > + } < nl > + < nl > + self . privacy = Actor . getPrivacy ( ) < nl > + self . tableView . reloadData ( ) < nl > + < nl > + } < nl > < nl > } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift < nl > index 2ee5999 . . 95f194e 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift < nl > @ @ - 13 , 6 + 13 , 7 @ @ public enum AACommonCellStyle { < nl > case ActionCentered < nl > case Navigation < nl > case Hint < nl > + case Checkmark < nl > } < nl > < nl > public class AACommonCell : AATableViewCell { < nl > @ @ - 121 , 6 + 122 , 13 @ @ public class AACommonCell : AATableViewCell { < nl > titleLabel . textAlignment = NSTextAlignment . Left < nl > switcher ? . hidden = true < nl > accessoryType = UITableViewCellAccessoryType . DisclosureIndicator < nl > + < nl > + case . Checkmark : < nl > + titleLabel . textColor = appStyle . cellTextColor < nl > + titleLabel . textAlignment = NSTextAlignment . Left < nl > + switcher ? . hidden = true < nl > + accessoryType = UITableViewCellAccessoryType . Checkmark < nl > + break < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / apps / actor - ios / ActorClient / Screens / Conversation / Info / AAAddParticipantController . swift b / apps / actor - ios / ActorClient / Screens / Conversation / Info / AAAddParticipantController . swift < nl > index 8e04da4 . . e30f273 100644 < nl > - - - a / apps / actor - ios / ActorClient / Screens / Conversation / Info / AAAddParticipantController . swift < nl > + + + b / apps / actor - ios / ActorClient / Screens / Conversation / Info / AAAddParticipantController . swift < nl > @ @ - 20 , 8 + 20 , 12 @ @ class AAAddParticipantController : ContactsBaseController { < nl > < nl > override func viewDidLoad ( ) { < nl > < nl > - title = " Contacts " / / TODO : Localize < nl > - navigationItem . leftBarButtonItem = UIBarButtonItem ( title : " Cancel " , style : UIBarButtonItemStyle . Plain , target : self , action : Selector ( " dismiss " ) ) / / TODO : Localize < nl > + title = NSLocalizedString ( " GroupAddParticipantTitle " , comment : " Participant Title " ) < nl > + < nl > + navigationItem . leftBarButtonItem = UIBarButtonItem ( < nl > + title : NSLocalizedString ( " NavigationCancel " , comment : " Cancel " ) , < nl > + style : UIBarButtonItemStyle . Plain , < nl > + target : self , action : Selector ( " dismiss " ) ) < nl > < nl > tableView = UITableView ( frame : view . bounds , style : UITableViewStyle . Plain ) < nl > tableView . backgroundColor = UIColor . whiteColor ( ) < nl > @ @ - 56 , 7 + 60 , 7 @ @ class AAAddParticipantController : ContactsBaseController { < nl > tableView . deselectRowAtIndexPath ( indexPath , animated : true ) < nl > < nl > if indexPath . section = = 0 { < nl > - navigateNext ( InviteLinkController ( ) , removeCurrent : true ) < nl > + navigateNext ( InviteLinkController ( gid : gid ) , removeCurrent : false ) < nl > } else { < nl > var contact = objectAtIndexPath ( indexPath ) as ! AMContact ; < nl > execute ( MSG . inviteMemberCommandWithGid ( jint ( gid ) , withUid : contact . getUid ( ) ) , successBlock : { ( val ) - > ( ) in < nl > diff - - git a / apps / actor - ios / ActorClient / Screens / InviteLinkController . swift b / apps / actor - ios / ActorClient / Screens / InviteLinkController . swift < nl > index dc01af4 . . b1b560f 100644 < nl > - - - a / apps / actor - ios / ActorClient / Screens / InviteLinkController . swift < nl > + + + b / apps / actor - ios / ActorClient / Screens / InviteLinkController . swift < nl > @ @ - 10 , 10 + 10 , 16 @ @ import Foundation < nl > < nl > class InviteLinkController : AATableViewController { < nl > < nl > - var tableData : UATableData ! < nl > + let gid : Int < nl > + var tableData : UAGrouppedTableData ! < nl > + var currentUrl : String ? < nl > + var urlCell : UACommonCellRegion ! < nl > < nl > - init ( ) { < nl > - super . init ( style : UITableViewStyle . Plain ) < nl > + init ( gid : Int ) { < nl > + self . gid = gid < nl > + super . init ( style : UITableViewStyle . Grouped ) < nl > + < nl > + title = NSLocalizedString ( " GroupInviteLinkPageTitle " , comment : " Invite Link Title " ) < nl > } < nl > < nl > required init ( coder aDecoder : NSCoder ) { < nl > @ @ - 26 , 10 + 32 , 57 @ @ class InviteLinkController : AATableViewController { < nl > tableView . separatorStyle = UITableViewCellSeparatorStyle . None < nl > tableView . backgroundColor = MainAppTheme . list . backyardColor < nl > < nl > - tableData = UATableData ( tableView : tableView ) < nl > - tableData . addSection ( ) < nl > + tableView . hidden = true < nl > + < nl > + tableData = UAGrouppedTableData ( tableView : tableView ) < nl > + urlCell = tableData . addSection ( ) < nl > + . setHeaderText ( NSLocalizedString ( " GroupInviteLinkTitle " , comment : " Link title " ) ) < nl > + . setFooterText ( NSLocalizedString ( " GroupInviteLinkHint " , comment : " Link hint " ) ) < nl > . addCommonCell ( ) < nl > - . setStyle ( AATableViewCellStyle . Hint ) < nl > - . setContent ( " Share this link with anyone in your business network and easily start chat " ) < nl > + . setStyle ( AATableViewCellStyle . Normal ) < nl > + < nl > + var section = tableData . addSection ( ) < nl > + < nl > + section . addActionCell ( " GroupInviteLinkActionCopy " , actionClosure : { ( ) - > ( ) in < nl > + UIPasteboard . generalPasteboard ( ) . string = self . currentUrl < nl > + self . alertUser ( " GroupInviteLinkCopied " ) < nl > + } ) < nl > + . showBottomSeparator ( 15 ) < nl > + . showTopSeparator ( 0 ) < nl > + < nl > + section . addActionCell ( " GroupInviteLinkActionShare " , actionClosure : { ( ) - > ( ) in < nl > + UIApplication . sharedApplication ( ) . openURL ( NSURL ( string : self . currentUrl ! ) ! ) < nl > + } ) < nl > + . hideTopSeparator ( ) < nl > + . showBottomSeparator ( 0 ) < nl > + < nl > + tableData . addSection ( ) < nl > + . addActionCell ( " GroupInviteLinkActionRevoke " , actionClosure : { ( ) - > ( ) in < nl > + self . confirmAlertUser ( " GroupInviteLinkRevokeMessage " , action : " GroupInviteLinkRevokeAction " , tapYes : { ( ) - > ( ) in < nl > + self . reloadLink ( ) < nl > + } ) < nl > + } ) < nl > + . setStyle ( AATableViewCellStyle . Destructive ) < nl > + < nl > + < nl > + execute ( MSG . requestInviteLinkCommandWithGid ( jint ( gid ) ) , successBlock : { ( val ) - > Void in < nl > + self . currentUrl = val as ! String < nl > + self . urlCell . setContent ( self . currentUrl ! ) < nl > + self . tableView . hidden = false < nl > + self . tableView . reloadData ( ) < nl > + } ) { ( val ) - > Void in < nl > + / / TODO : Implement < nl > + } < nl > + } < nl > + < nl > + func reloadLink ( ) { < nl > + execute ( MSG . requestRevokeLinkCommandWithGid ( jint ( gid ) ) , successBlock : { ( val ) - > Void in < nl > + self . currentUrl = val as ! String < nl > + self . urlCell . setContent ( self . currentUrl ! ) < nl > + self . tableView . hidden = false < nl > + self . tableView . reloadData ( ) < nl > + } ) { ( val ) - > Void in < nl > + / / TODO : Implement < nl > + } < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / apps / actor - ios / ActorClient / Screens / Root / AAViewController . swift b / apps / actor - ios / ActorClient / Screens / Root / AAViewController . swift < nl > index 167d67c . . 01e1af2 100644 < nl > - - - a / apps / actor - ios / ActorClient / Screens / Root / AAViewController . swift < nl > + + + b / apps / actor - ios / ActorClient / Screens / Root / AAViewController . swift < nl > @ @ - 109 , 6 + 109 , 30 @ @ class AAViewController : UIViewController { < nl > applyScrollUi ( tableView , cell : tableView . cellForRowAtIndexPath ( indexPath ) ) < nl > } < nl > < nl > + func alertUser ( message : String ) { < nl > + RMUniversalAlert . showAlertInViewController ( self , < nl > + withTitle : nil , < nl > + message : NSLocalizedString ( message , comment : " Message " ) , < nl > + cancelButtonTitle : NSLocalizedString ( " AlertOk " , comment : " Ok " ) , < nl > + destructiveButtonTitle : nil , < nl > + otherButtonTitles : nil , < nl > + tapBlock : nil ) < nl > + } < nl > + < nl > + func confirmAlertUser ( message : String , action : String , tapYes : ( ) - > ( ) ) { < nl > + RMUniversalAlert . showAlertInViewController ( self , < nl > + withTitle : nil , < nl > + message : NSLocalizedString ( message , comment : " Message " ) , < nl > + cancelButtonTitle : NSLocalizedString ( " AlertCancel " , comment : " Cancel " ) , < nl > + destructiveButtonTitle : nil , < nl > + otherButtonTitles : [ NSLocalizedString ( action , comment : " Cancel " ) ] , < nl > + tapBlock : { ( alert , buttonIndex ) - > Void in < nl > + if ( buttonIndex > = alert . firstOtherButtonIndex ) { < nl > + tapYes ( ) < nl > + } < nl > + } ) < nl > + } < nl > + < nl > func confirmUser ( message : String , action : String , cancel : String , tapYes : ( ) - > ( ) ) { < nl > RMUniversalAlert . showActionSheetInViewController ( < nl > self , < nl > diff - - git a / apps / actor - ios / ActorClient / UATableData . swift b / apps / actor - ios / ActorClient / UATableData . swift < nl > index 54be08f . . 84c4d3c 100644 < nl > - - - a / apps / actor - ios / ActorClient / UATableData . swift < nl > + + + b / apps / actor - ios / ActorClient / UATableData . swift < nl > @ @ - 8 , 7 + 8 , 7 @ @ < nl > < nl > import Foundation < nl > < nl > - class UATableData : NSObject , UITableViewDataSource , UITableViewDelegate { < nl > + class UABaseTableData : NSObject , UITableViewDataSource , UITableViewDelegate { < nl > < nl > static let ReuseCommonCell = " CommonCell " ; < nl > < nl > @ @ - 21 , 7 + 21 , 7 @ @ class UATableData : NSObject , UITableViewDataSource , UITableViewDelegate { < nl > self . tableView = tableView < nl > super . init ( ) < nl > < nl > - self . tableView . registerClass ( AATableViewCell . self , forCellReuseIdentifier : UATableData . ReuseCommonCell ) < nl > + self . tableView . registerClass ( AATableViewCell . self , forCellReuseIdentifier : UABaseTableData . ReuseCommonCell ) < nl > self . tableView . dataSource = self < nl > self . tableView . delegate = self < nl > } < nl > @ @ - 48 , 26 + 48 , 18 @ @ class UATableData : NSObject , UITableViewDataSource , UITableViewDelegate { < nl > return sections [ indexPath . section ] . buildCell ( tableView , cellForRowAtIndexPath : indexPath ) < nl > } < nl > < nl > - func tableView ( tableView : UITableView , viewForHeaderInSection section : Int ) - > UIView ? { < nl > - return UIView ( ) < nl > + func tableView ( tableView : UITableView , titleForHeaderInSection section : Int ) - > String ? { < nl > + return sections [ section ] . headerText < nl > } < nl > - < nl > - func tableView ( tableView : UITableView , viewForFooterInSection section : Int ) - > UIView ? { < nl > - return UIView ( ) < nl > + < nl > + func tableView ( tableView : UITableView , titleForFooterInSection section : Int ) - > String ? { < nl > + return sections [ section ] . footerText < nl > } < nl > < nl > func tableView ( tableView : UITableView , heightForRowAtIndexPath indexPath : NSIndexPath ) - > CGFloat { < nl > return CGFloat ( sections [ indexPath . section ] . cellHeight ( tableView , cellForRowAtIndexPath : indexPath ) ) < nl > } < nl > < nl > - func tableView ( tableView : UITableView , heightForHeaderInSection section : Int ) - > CGFloat { < nl > - return CGFloat ( sections [ section ] . headerHeight ) < nl > - } < nl > - < nl > - func tableView ( tableView : UITableView , heightForFooterInSection section : Int ) - > CGFloat { < nl > - return CGFloat ( sections [ section ] . footerHeight ) < nl > - } < nl > - < nl > func tableView ( tableView : UITableView , canEditRowAtIndexPath indexPath : NSIndexPath ) - > Bool { < nl > return false < nl > } < nl > @ @ - 96 , 11 + 88 , 57 @ @ class UATableData : NSObject , UITableViewDataSource , UITableViewDelegate { < nl > } < nl > } < nl > < nl > + class UATableData : UABaseTableData { < nl > + < nl > + func tableView ( tableView : UITableView , heightForHeaderInSection section : Int ) - > CGFloat { < nl > + return CGFloat ( sections [ section ] . headerHeight ) < nl > + } < nl > + < nl > + func tableView ( tableView : UITableView , heightForFooterInSection section : Int ) - > CGFloat { < nl > + return CGFloat ( sections [ section ] . footerHeight ) < nl > + } < nl > + < nl > + func tableView ( tableView : UITableView , viewForHeaderInSection section : Int ) - > UIView ? { < nl > + if ( sections [ section ] . headerText = = nil ) { < nl > + return UIView ( ) < nl > + } else { < nl > + return nil < nl > + } < nl > + } < nl > + < nl > + func tableView ( tableView : UITableView , viewForFooterInSection section : Int ) - > UIView ? { < nl > + if ( sections [ section ] . footerText = = nil ) { < nl > + return UIView ( ) < nl > + } else { < nl > + return nil < nl > + } < nl > + } < nl > + } < nl > + < nl > + class UAGrouppedTableData : UABaseTableData { < nl > + < nl > + < nl > + < nl > + func tableView ( tableView : UITableView , willDisplayHeaderView view : UIView , forSection section : Int ) { < nl > + let header : UITableViewHeaderFooterView = view as ! UITableViewHeaderFooterView < nl > + header . textLabel . textColor = MainAppTheme . list . sectionColor < nl > + } < nl > + < nl > + func tableView ( tableView : UITableView , willDisplayFooterView view : UIView , forSection section : Int ) { < nl > + let header : UITableViewHeaderFooterView = view as ! UITableViewHeaderFooterView < nl > + header . textLabel . textColor = MainAppTheme . list . hintColor < nl > + } < nl > + } < nl > + < nl > + < nl > class UASection { < nl > < nl > var headerHeight : Double = 0 < nl > var footerHeight : Double = 0 < nl > < nl > + var headerText : String ? = nil < nl > + var footerText : String ? = nil < nl > + < nl > private var tableView : UITableView < nl > private var regions : [ UARegion ] = [ UARegion ] ( ) < nl > < nl > @ @ - 108 , 6 + 146 , 16 @ @ class UASection { < nl > self . tableView = tableView < nl > } < nl > < nl > + func setFooterText ( footerText : String ) - > UASection { < nl > + self . footerText = footerText < nl > + return self < nl > + } < nl > + < nl > + func setHeaderText ( headerText : String ) - > UASection { < nl > + self . headerText = headerText < nl > + return self < nl > + } < nl > + < nl > func setFooterHeight ( footerHeight : Double ) - > UASection { < nl > self . footerHeight = footerHeight < nl > return self < nl > @ @ - 157 , 53 + 205 , 36 @ @ class UASection { < nl > return res < nl > } < nl > < nl > - func buildCell ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) - > UITableViewCell { < nl > + private func getRegion ( indexPath : NSIndexPath ) - > RegionSearchResult { < nl > var prevLength = 0 < nl > for r in regions { < nl > - if ( prevLength < = indexPath . row & & indexPath . row < = prevLength + r . itemsCount ( ) ) { < nl > - return r . buildCell ( tableView , index : indexPath . row - prevLength , indexPath : indexPath ) < nl > + if ( prevLength < = indexPath . row & & indexPath . row < prevLength + r . itemsCount ( ) ) { < nl > + return RegionSearchResult ( region : r , index : indexPath . row - prevLength ) < nl > } < nl > prevLength + = r . itemsCount ( ) < nl > } < nl > < nl > - fatalError ( " Inconsistent build cell " ) < nl > + fatalError ( " Inconsistent cell " ) < nl > + } < nl > + < nl > + func buildCell ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) - > UITableViewCell { < nl > + var r = getRegion ( indexPath ) < nl > + return r . region . buildCell ( tableView , index : r . index , indexPath : indexPath ) < nl > } < nl > < nl > func cellHeight ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) - > Double { < nl > - var prevLength = 0 < nl > - for r in regions { < nl > - if ( prevLength < = indexPath . row & & indexPath . row < = prevLength + r . itemsCount ( ) ) { < nl > - return r . cellHeight ( indexPath . row - prevLength ) < nl > - } < nl > - prevLength + = r . itemsCount ( ) < nl > - } < nl > - < nl > - fatalError ( " Inconsistent build cell " ) < nl > + var r = getRegion ( indexPath ) < nl > + return r . region . cellHeight ( r . index ) < nl > } < nl > < nl > func canSelect ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) - > Bool { < nl > - var prevLength = 0 < nl > - for r in regions { < nl > - if ( prevLength < = indexPath . row & & indexPath . row < = prevLength + r . itemsCount ( ) ) { < nl > - return r . canSelect ( indexPath . row - prevLength ) < nl > - } < nl > - prevLength + = r . itemsCount ( ) < nl > - } < nl > - < nl > - fatalError ( " Inconsistent build cell " ) < nl > + var r = getRegion ( indexPath ) < nl > + return r . region . canSelect ( r . index ) < nl > } < nl > < nl > func select ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) { < nl > - var prevLength = 0 < nl > - for r in regions { < nl > - if ( prevLength < = indexPath . row & & indexPath . row < = prevLength + r . itemsCount ( ) ) { < nl > - r . select ( indexPath . row - prevLength ) < nl > - return < nl > - } < nl > - prevLength + = r . itemsCount ( ) < nl > - } < nl > - < nl > - fatalError ( " Inconsistent build cell " ) < nl > + var r = getRegion ( indexPath ) < nl > + r . region . select ( r . index ) < nl > } < nl > } < nl > < nl > @ @ - 398 , 7 + 429 , 7 @ @ class UACommonCellRegion : UARegion { < nl > override func buildCell ( tableView : UITableView , index : Int , indexPath : NSIndexPath ) - > UITableViewCell { < nl > var res = tableView < nl > . dequeueReusableCellWithIdentifier ( < nl > - UATableData . ReuseCommonCell , < nl > + UABaseTableData . ReuseCommonCell , < nl > forIndexPath : indexPath ) < nl > as ! AATableViewCell < nl > < nl > @ @ - 432 , 4 + 463 , 13 @ @ class UACommonCellRegion : UARegion { < nl > } < nl > } < nl > < nl > + class RegionSearchResult { < nl > + let region : UARegion < nl > + let index : Int < nl > + < nl > + init ( region : UARegion , index : Int ) { < nl > + self . region = region < nl > + self . index = index < nl > + } < nl > + } < nl > < nl > diff - - git a / apps / actor - ios / Base . lproj / Localizable . strings b / apps / actor - ios / Base . lproj / Localizable . strings < nl > index e9e3d27 . . 1d7b7b5 100644 < nl > - - - a / apps / actor - ios / Base . lproj / Localizable . strings < nl > + + + b / apps / actor - ios / Base . lproj / Localizable . strings < nl > @ @ - 78 , 8 + 78 , 28 @ @ < nl > < nl > " GroupAddParticipant " = " Add Prticipant . . . " ; < nl > < nl > + " GroupAddParticipantTitle " = " Contacts " ; < nl > + < nl > " GroupLeave " = " Leave group " ; < nl > < nl > + " GroupInviteLinkActionCopy " = " Copy Link " ; < nl > + < nl > + " GroupInviteLinkActionRevoke " = " Revoke Link " ; < nl > + < nl > + " GroupInviteLinkActionShare " = " Share Link " ; < nl > + < nl > + " GroupInviteLinkPageTitle " = " Invite Link " ; < nl > + < nl > + " GroupInviteLinkTitle " = " LINK " ; < nl > + < nl > + " GroupInviteLinkHint " = " You can invite people to this group by sending them this invitation link . " ; < nl > + < nl > + " GroupInviteLinkCopied " = " Link copied to clipboard . " ; < nl > + < nl > + " GroupInviteLinkRevokeMessage " = " Are you sure want to revoke this link ? Once you do , no one will be able to join the group using it . " ; < nl > + < nl > + " GroupInviteLinkRevokeAction " = " Revoke " ; < nl > + < nl > / * < nl > * Compose < nl > * / < nl > @ @ - 224 , 6 + 244 , 8 @ @ < nl > < nl > " NavigationDone " = " Done " ; < nl > < nl > + " NavigationCancel " = " Cancel " ; < nl > + < nl > " NavigationBack " = " " ; < nl > < nl > " NavigationNext " = " Next " ; < nl > diff - - git a / apps / actor - ios / ru . lproj / Localizable . strings b / apps / actor - ios / ru . lproj / Localizable . strings < nl > index 2623776 . . f956a8b 100644 < nl > - - - a / apps / actor - ios / ru . lproj / Localizable . strings < nl > + + + b / apps / actor - ios / ru . lproj / Localizable . strings < nl > @ @ - 78 , 8 + 78 , 28 @ @ < nl > < nl > " GroupAddParticipant " = " Д о б а в и т ь в г р у п п у . . . " ; < nl > < nl > + " GroupAddParticipantTitle " = " К о н т а к т ы " ; < nl > + < nl > " GroupLeave " = " П о к и н у т ь г р у п п у " ; < nl > < nl > + " GroupInviteLinkActionCopy " = " С к о п и р о в а т ь с с ы л к у " ; < nl > + < nl > + " GroupInviteLinkActionRevoke " = " С б р о с и т ь с с ы л к у " ; < nl > + < nl > + " GroupInviteLinkActionShare " = " П о д е л и т ь с я с с ы л к о й " ; < nl > + < nl > + " GroupInviteLinkPageTitle " = " П р и г л а ш е н и е " ; < nl > + < nl > + " GroupInviteLinkTitle " = " С С Ы Л К А " ; < nl > + < nl > + " GroupInviteLinkHint " = " В ы м о ж е т е п р и г л а с и т ь л ю д е й в э т у г р у п п у , о т п р а в л я я и м э т у с с ы л к у д л я п р и г л а ш е н и я . " ; < nl > + < nl > + " GroupInviteLinkCopied " = " С с ы л к а с к о п и р о в а н а в б у ф е р о б м е н а . " ; < nl > + < nl > + " GroupInviteLinkRevokeMessage " = " В ы у в е р е н ы , ч т о х о т и т е с б р о с и т ь с с ы л к у ? К а к т о л ь к о В ы э т о с д е л а е т е , н и к т о н е с м о ж е т п о н е й п р и с о е д и н и т ь с я в г р у п п у . " ; < nl > + < nl > + " GroupInviteLinkRevokeAction " = " С б р о с и т ь " ; < nl > + < nl > / * < nl > * Compose < nl > * / < nl > @ @ - 224 , 6 + 244 , 8 @ @ < nl > < nl > " NavigationDone " = " Г о т о в о " ; < nl > < nl > + " NavigationCancel " = " О т м е н а " ; < nl > + < nl > " NavigationBack " = " " ; < nl > < nl > " NavigationNext " = " Д а л е е " ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 index 6ece6e5 . . e5de378 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Resources / Base . lproj / Localizable . strings 
 @ @ - 88 , 6 + 88 , 13 @ @ 
 
 " SettingsLastSeenHint " = " Change who can see your Last Seen time . " ; 
 
 + " SettingsLastSeenEverybody " = " Everybody " ; 
 + 
 + " SettingsLastSeenContacts " = " My Contacts " ; 
 + 
 + " SettingsLastSeenNobody " = " Nobody " ; 
 + 
 + 
 
 / * 
 * Profile 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift 
 index 919efdd . . fcb1af0 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Settings / AASettingsLastSeenController . swift 
 @ @ - 4 , 63 + 4 , 135 @ @ 
 
 import UIKit 
 
 - public class AASettingsLastSeenController : AAContentTableController { 
 + public class AASettingsLastSeenController : AATableViewController { 
 
 - private var sessionsCell : AAManagedArrayRows < ARApiAuthSession , AACommonCell > ? 
 + private var privacy = Actor . getPrivacy ( ) 
 + 
 + / / MARK : - 
 + / / MARK : Constructors 
 + 
 + private let CellIdentifier = " CellIdentifier " 
 
 public init ( ) { 
 - super . init ( style : AAContentTableStyle . SettingsGrouped ) 
 + super . init ( style : UITableViewStyle . Grouped ) 
 
 - navigationItem . title = AALocalized ( " SettingsLastSeen " ) 
 + title = AALocalized ( " SettingsLastSeen " ) 
 
 - content = ACAllEvents _ Settings . PRIVACY ( ) 
 + content = ACAllEvents _ Settings . NOTIFICATIONS ( ) 
 } 
 
 public required init ( coder aDecoder : NSCoder ) { 
 fatalError ( " init ( coder : ) has not been implemented " ) 
 } 
 
 - public override func tableDidLoad ( ) { 
 + / / MARK : - 
 + 
 + public override func viewDidLoad ( ) { 
 + super . viewDidLoad ( ) 
 + 
 + tableView . registerClass ( AACommonCell . self , forCellReuseIdentifier : CellIdentifier ) 
 + tableView . backgroundColor = appStyle . vcBackyardColor 
 + 
 + view . backgroundColor = tableView . backgroundColor 
 + } 
 + 
 + / / MARK : - 
 + / / MARK : UITableView Data Source 
 + 
 + public override func numberOfSectionsInTableView ( tableView : UITableView ) - > Int { 
 + return 1 
 + } 
 + 
 + public override func tableView ( tableView : UITableView , numberOfRowsInSection section : Int ) - > Int { 
 + return 3 
 + } 
 + 
 + public func tableView ( tableView : UITableView , titleForHeaderInSection section : Int ) - > String ? { 
 + return nil 
 + } 
 + 
 + public func tableView ( tableView : UITableView , titleForFooterInSection section : Int ) - > String ? { 
 + return nil 
 + } 
 + 
 + private func lastSeenCell ( indexPath : NSIndexPath ) - > AACommonCell { 
 + let cell = tableView . dequeueReusableCellWithIdentifier ( CellIdentifier , forIndexPath : indexPath ) as ! AACommonCell 
 
 - section { ( s ) - > ( ) in 
 + if indexPath . row = = 0 { 
 + 
 + cell . setContent ( AALocalized ( " SettingsLastSeenEverybody " ) ) 
 + 
 + if ( self . privacy = = " always " ) { 
 + cell . style = . Checkmark 
 + } else { 
 + cell . style = . Normal 
 + } 
 + 
 + } else if indexPath . row = = 1 { 
 + 
 + cell . setContent ( AALocalized ( " SettingsLastSeenContacts " ) ) 
 
 - s . common ( { ( r ) - > ( ) in 
 - r . content = " Everybody " 
 - 
 - r . selectAction = { 
 - 
 - print ( " tap in Everybody " ) 
 - return true 
 - } 
 - 
 - } ) 
 + if ( self . privacy = = " contacts " ) { 
 + cell . style = . Checkmark 
 + } else { 
 + cell . style = . Normal 
 + } 
 
 - s . common ( { ( r ) - > ( ) in 
 - r . content = " My Contacts " 
 - 
 - r . selectAction = { 
 - 
 - print ( " tap in My Contacts " ) 
 - return true 
 - } 
 - 
 - } ) 
 + } else if indexPath . row = = 2 { 
 
 - s . common ( { ( r ) - > ( ) in 
 - r . content = " Nobody " 
 - 
 - r . selectAction = { 
 - 
 - print ( " tap in Nobody " ) 
 - return true 
 - } 
 - 
 - } ) 
 + cell . setContent ( AALocalized ( " SettingsLastSeenNone " ) ) 
 
 + if ( self . privacy = = " none " ) { 
 + cell . style = . Checkmark 
 + } else { 
 + cell . style = . Normal 
 + } 
 
 } 
 
 + cell . selectionStyle = UITableViewCellSelectionStyle . None 
 + cell . bottomSeparatorVisible = false 
 + cell . topSeparatorVisible = false 
 + cell . bottomSeparatorLeftInset = 0 
 + cell . topSeparatorLeftInset = 0 
 + 
 + return cell 
 + } 
 + 
 + public override func tableView ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) - > UITableViewCell { 
 + return lastSeenCell ( indexPath ) 
 + } 
 + 
 + public func tableView ( tableView : UITableView , willDisplayHeaderView view : UIView , forSection section : Int ) { 
 + let header : UITableViewHeaderFooterView = view as ! UITableViewHeaderFooterView 
 + header . textLabel ! . textColor = ActorSDK . sharedActor ( ) . style . cellFooterColor 
 } 
 
 + public func tableView ( tableView : UITableView , willDisplayFooterView view : UIView , forSection section : Int ) { 
 + let header : UITableViewHeaderFooterView = view as ! UITableViewHeaderFooterView 
 + header . textLabel ! . textColor = ActorSDK . sharedActor ( ) . style . cellFooterColor 
 + } 
 + 
 + 
 + public func tableView ( tableView : UITableView , didSelectRowAtIndexPath indexPath : NSIndexPath ) { 
 + 
 + if indexPath . row = = 0 { 
 + 
 + Actor . setPrivacyWithPrivacy ( " always " ) 
 + 
 + } else if indexPath . row = = 1 { 
 + 
 + Actor . setPrivacyWithPrivacy ( " contacts " ) 
 + 
 + } else if indexPath . row = = 2 { 
 + 
 + Actor . setPrivacyWithPrivacy ( " none " ) 
 + 
 + } 
 + 
 + self . privacy = Actor . getPrivacy ( ) 
 + self . tableView . reloadData ( ) 
 + 
 + } 
 
 } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift 
 index 2ee5999 . . 95f194e 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / Cells / AACommonCell . swift 
 @ @ - 13 , 6 + 13 , 7 @ @ public enum AACommonCellStyle { 
 case ActionCentered 
 case Navigation 
 case Hint 
 + case Checkmark 
 } 
 
 public class AACommonCell : AATableViewCell { 
 @ @ - 121 , 6 + 122 , 13 @ @ public class AACommonCell : AATableViewCell { 
 titleLabel . textAlignment = NSTextAlignment . Left 
 switcher ? . hidden = true 
 accessoryType = UITableViewCellAccessoryType . DisclosureIndicator 
 + 
 + case . Checkmark : 
 + titleLabel . textColor = appStyle . cellTextColor 
 + titleLabel . textAlignment = NSTextAlignment . Left 
 + switcher ? . hidden = true 
 + accessoryType = UITableViewCellAccessoryType . Checkmark 
 + break 
 } 
 }

NEAREST DIFF:
diff - - git a / apps / actor - ios / ActorClient / Screens / Conversation / Info / AAAddParticipantController . swift b / apps / actor - ios / ActorClient / Screens / Conversation / Info / AAAddParticipantController . swift 
 index 8e04da4 . . e30f273 100644 
 - - - a / apps / actor - ios / ActorClient / Screens / Conversation / Info / AAAddParticipantController . swift 
 + + + b / apps / actor - ios / ActorClient / Screens / Conversation / Info / AAAddParticipantController . swift 
 @ @ - 20 , 8 + 20 , 12 @ @ class AAAddParticipantController : ContactsBaseController { 
 
 override func viewDidLoad ( ) { 
 
 - title = " Contacts " / / TODO : Localize 
 - navigationItem . leftBarButtonItem = UIBarButtonItem ( title : " Cancel " , style : UIBarButtonItemStyle . Plain , target : self , action : Selector ( " dismiss " ) ) / / TODO : Localize 
 + title = NSLocalizedString ( " GroupAddParticipantTitle " , comment : " Participant Title " ) 
 + 
 + navigationItem . leftBarButtonItem = UIBarButtonItem ( 
 + title : NSLocalizedString ( " NavigationCancel " , comment : " Cancel " ) , 
 + style : UIBarButtonItemStyle . Plain , 
 + target : self , action : Selector ( " dismiss " ) ) 
 
 tableView = UITableView ( frame : view . bounds , style : UITableViewStyle . Plain ) 
 tableView . backgroundColor = UIColor . whiteColor ( ) 
 @ @ - 56 , 7 + 60 , 7 @ @ class AAAddParticipantController : ContactsBaseController { 
 tableView . deselectRowAtIndexPath ( indexPath , animated : true ) 
 
 if indexPath . section = = 0 { 
 - navigateNext ( InviteLinkController ( ) , removeCurrent : true ) 
 + navigateNext ( InviteLinkController ( gid : gid ) , removeCurrent : false ) 
 } else { 
 var contact = objectAtIndexPath ( indexPath ) as ! AMContact ; 
 execute ( MSG . inviteMemberCommandWithGid ( jint ( gid ) , withUid : contact . getUid ( ) ) , successBlock : { ( val ) - > ( ) in 
 diff - - git a / apps / actor - ios / ActorClient / Screens / InviteLinkController . swift b / apps / actor - ios / ActorClient / Screens / InviteLinkController . swift 
 index dc01af4 . . b1b560f 100644 
 - - - a / apps / actor - ios / ActorClient / Screens / InviteLinkController . swift 
 + + + b / apps / actor - ios / ActorClient / Screens / InviteLinkController . swift 
 @ @ - 10 , 10 + 10 , 16 @ @ import Foundation 
 
 class InviteLinkController : AATableViewController { 
 
 - var tableData : UATableData ! 
 + let gid : Int 
 + var tableData : UAGrouppedTableData ! 
 + var currentUrl : String ? 
 + var urlCell : UACommonCellRegion ! 
 
 - init ( ) { 
 - super . init ( style : UITableViewStyle . Plain ) 
 + init ( gid : Int ) { 
 + self . gid = gid 
 + super . init ( style : UITableViewStyle . Grouped ) 
 + 
 + title = NSLocalizedString ( " GroupInviteLinkPageTitle " , comment : " Invite Link Title " ) 
 } 
 
 required init ( coder aDecoder : NSCoder ) { 
 @ @ - 26 , 10 + 32 , 57 @ @ class InviteLinkController : AATableViewController { 
 tableView . separatorStyle = UITableViewCellSeparatorStyle . None 
 tableView . backgroundColor = MainAppTheme . list . backyardColor 
 
 - tableData = UATableData ( tableView : tableView ) 
 - tableData . addSection ( ) 
 + tableView . hidden = true 
 + 
 + tableData = UAGrouppedTableData ( tableView : tableView ) 
 + urlCell = tableData . addSection ( ) 
 + . setHeaderText ( NSLocalizedString ( " GroupInviteLinkTitle " , comment : " Link title " ) ) 
 + . setFooterText ( NSLocalizedString ( " GroupInviteLinkHint " , comment : " Link hint " ) ) 
 . addCommonCell ( ) 
 - . setStyle ( AATableViewCellStyle . Hint ) 
 - . setContent ( " Share this link with anyone in your business network and easily start chat " ) 
 + . setStyle ( AATableViewCellStyle . Normal ) 
 + 
 + var section = tableData . addSection ( ) 
 + 
 + section . addActionCell ( " GroupInviteLinkActionCopy " , actionClosure : { ( ) - > ( ) in 
 + UIPasteboard . generalPasteboard ( ) . string = self . currentUrl 
 + self . alertUser ( " GroupInviteLinkCopied " ) 
 + } ) 
 + . showBottomSeparator ( 15 ) 
 + . showTopSeparator ( 0 ) 
 + 
 + section . addActionCell ( " GroupInviteLinkActionShare " , actionClosure : { ( ) - > ( ) in 
 + UIApplication . sharedApplication ( ) . openURL ( NSURL ( string : self . currentUrl ! ) ! ) 
 + } ) 
 + . hideTopSeparator ( ) 
 + . showBottomSeparator ( 0 ) 
 + 
 + tableData . addSection ( ) 
 + . addActionCell ( " GroupInviteLinkActionRevoke " , actionClosure : { ( ) - > ( ) in 
 + self . confirmAlertUser ( " GroupInviteLinkRevokeMessage " , action : " GroupInviteLinkRevokeAction " , tapYes : { ( ) - > ( ) in 
 + self . reloadLink ( ) 
 + } ) 
 + } ) 
 + . setStyle ( AATableViewCellStyle . Destructive ) 
 + 
 + 
 + execute ( MSG . requestInviteLinkCommandWithGid ( jint ( gid ) ) , successBlock : { ( val ) - > Void in 
 + self . currentUrl = val as ! String 
 + self . urlCell . setContent ( self . currentUrl ! ) 
 + self . tableView . hidden = false 
 + self . tableView . reloadData ( ) 
 + } ) { ( val ) - > Void in 
 + / / TODO : Implement 
 + } 
 + } 
 + 
 + func reloadLink ( ) { 
 + execute ( MSG . requestRevokeLinkCommandWithGid ( jint ( gid ) ) , successBlock : { ( val ) - > Void in 
 + self . currentUrl = val as ! String 
 + self . urlCell . setContent ( self . currentUrl ! ) 
 + self . tableView . hidden = false 
 + self . tableView . reloadData ( ) 
 + } ) { ( val ) - > Void in 
 + / / TODO : Implement 
 + } 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / apps / actor - ios / ActorClient / Screens / Root / AAViewController . swift b / apps / actor - ios / ActorClient / Screens / Root / AAViewController . swift 
 index 167d67c . . 01e1af2 100644 
 - - - a / apps / actor - ios / ActorClient / Screens / Root / AAViewController . swift 
 + + + b / apps / actor - ios / ActorClient / Screens / Root / AAViewController . swift 
 @ @ - 109 , 6 + 109 , 30 @ @ class AAViewController : UIViewController { 
 applyScrollUi ( tableView , cell : tableView . cellForRowAtIndexPath ( indexPath ) ) 
 } 
 
 + func alertUser ( message : String ) { 
 + RMUniversalAlert . showAlertInViewController ( self , 
 + withTitle : nil , 
 + message : NSLocalizedString ( message , comment : " Message " ) , 
 + cancelButtonTitle : NSLocalizedString ( " AlertOk " , comment : " Ok " ) , 
 + destructiveButtonTitle : nil , 
 + otherButtonTitles : nil , 
 + tapBlock : nil ) 
 + } 
 + 
 + func confirmAlertUser ( message : String , action : String , tapYes : ( ) - > ( ) ) { 
 + RMUniversalAlert . showAlertInViewController ( self , 
 + withTitle : nil , 
 + message : NSLocalizedString ( message , comment : " Message " ) , 
 + cancelButtonTitle : NSLocalizedString ( " AlertCancel " , comment : " Cancel " ) , 
 + destructiveButtonTitle : nil , 
 + otherButtonTitles : [ NSLocalizedString ( action , comment : " Cancel " ) ] , 
 + tapBlock : { ( alert , buttonIndex ) - > Void in 
 + if ( buttonIndex > = alert . firstOtherButtonIndex ) { 
 + tapYes ( ) 
 + } 
 + } ) 
 + } 
 + 
 func confirmUser ( message : String , action : String , cancel : String , tapYes : ( ) - > ( ) ) { 
 RMUniversalAlert . showActionSheetInViewController ( 
 self , 
 diff - - git a / apps / actor - ios / ActorClient / UATableData . swift b / apps / actor - ios / ActorClient / UATableData . swift 
 index 54be08f . . 84c4d3c 100644 
 - - - a / apps / actor - ios / ActorClient / UATableData . swift 
 + + + b / apps / actor - ios / ActorClient / UATableData . swift 
 @ @ - 8 , 7 + 8 , 7 @ @ 
 
 import Foundation 
 
 - class UATableData : NSObject , UITableViewDataSource , UITableViewDelegate { 
 + class UABaseTableData : NSObject , UITableViewDataSource , UITableViewDelegate { 
 
 static let ReuseCommonCell = " CommonCell " ; 
 
 @ @ - 21 , 7 + 21 , 7 @ @ class UATableData : NSObject , UITableViewDataSource , UITableViewDelegate { 
 self . tableView = tableView 
 super . init ( ) 
 
 - self . tableView . registerClass ( AATableViewCell . self , forCellReuseIdentifier : UATableData . ReuseCommonCell ) 
 + self . tableView . registerClass ( AATableViewCell . self , forCellReuseIdentifier : UABaseTableData . ReuseCommonCell ) 
 self . tableView . dataSource = self 
 self . tableView . delegate = self 
 } 
 @ @ - 48 , 26 + 48 , 18 @ @ class UATableData : NSObject , UITableViewDataSource , UITableViewDelegate { 
 return sections [ indexPath . section ] . buildCell ( tableView , cellForRowAtIndexPath : indexPath ) 
 } 
 
 - func tableView ( tableView : UITableView , viewForHeaderInSection section : Int ) - > UIView ? { 
 - return UIView ( ) 
 + func tableView ( tableView : UITableView , titleForHeaderInSection section : Int ) - > String ? { 
 + return sections [ section ] . headerText 
 } 
 - 
 - func tableView ( tableView : UITableView , viewForFooterInSection section : Int ) - > UIView ? { 
 - return UIView ( ) 
 + 
 + func tableView ( tableView : UITableView , titleForFooterInSection section : Int ) - > String ? { 
 + return sections [ section ] . footerText 
 } 
 
 func tableView ( tableView : UITableView , heightForRowAtIndexPath indexPath : NSIndexPath ) - > CGFloat { 
 return CGFloat ( sections [ indexPath . section ] . cellHeight ( tableView , cellForRowAtIndexPath : indexPath ) ) 
 } 
 
 - func tableView ( tableView : UITableView , heightForHeaderInSection section : Int ) - > CGFloat { 
 - return CGFloat ( sections [ section ] . headerHeight ) 
 - } 
 - 
 - func tableView ( tableView : UITableView , heightForFooterInSection section : Int ) - > CGFloat { 
 - return CGFloat ( sections [ section ] . footerHeight ) 
 - } 
 - 
 func tableView ( tableView : UITableView , canEditRowAtIndexPath indexPath : NSIndexPath ) - > Bool { 
 return false 
 } 
 @ @ - 96 , 11 + 88 , 57 @ @ class UATableData : NSObject , UITableViewDataSource , UITableViewDelegate { 
 } 
 } 
 
 + class UATableData : UABaseTableData { 
 + 
 + func tableView ( tableView : UITableView , heightForHeaderInSection section : Int ) - > CGFloat { 
 + return CGFloat ( sections [ section ] . headerHeight ) 
 + } 
 + 
 + func tableView ( tableView : UITableView , heightForFooterInSection section : Int ) - > CGFloat { 
 + return CGFloat ( sections [ section ] . footerHeight ) 
 + } 
 + 
 + func tableView ( tableView : UITableView , viewForHeaderInSection section : Int ) - > UIView ? { 
 + if ( sections [ section ] . headerText = = nil ) { 
 + return UIView ( ) 
 + } else { 
 + return nil 
 + } 
 + } 
 + 
 + func tableView ( tableView : UITableView , viewForFooterInSection section : Int ) - > UIView ? { 
 + if ( sections [ section ] . footerText = = nil ) { 
 + return UIView ( ) 
 + } else { 
 + return nil 
 + } 
 + } 
 + } 
 + 
 + class UAGrouppedTableData : UABaseTableData { 
 + 
 + 
 + 
 + func tableView ( tableView : UITableView , willDisplayHeaderView view : UIView , forSection section : Int ) { 
 + let header : UITableViewHeaderFooterView = view as ! UITableViewHeaderFooterView 
 + header . textLabel . textColor = MainAppTheme . list . sectionColor 
 + } 
 + 
 + func tableView ( tableView : UITableView , willDisplayFooterView view : UIView , forSection section : Int ) { 
 + let header : UITableViewHeaderFooterView = view as ! UITableViewHeaderFooterView 
 + header . textLabel . textColor = MainAppTheme . list . hintColor 
 + } 
 + } 
 + 
 + 
 class UASection { 
 
 var headerHeight : Double = 0 
 var footerHeight : Double = 0 
 
 + var headerText : String ? = nil 
 + var footerText : String ? = nil 
 + 
 private var tableView : UITableView 
 private var regions : [ UARegion ] = [ UARegion ] ( ) 
 
 @ @ - 108 , 6 + 146 , 16 @ @ class UASection { 
 self . tableView = tableView 
 } 
 
 + func setFooterText ( footerText : String ) - > UASection { 
 + self . footerText = footerText 
 + return self 
 + } 
 + 
 + func setHeaderText ( headerText : String ) - > UASection { 
 + self . headerText = headerText 
 + return self 
 + } 
 + 
 func setFooterHeight ( footerHeight : Double ) - > UASection { 
 self . footerHeight = footerHeight 
 return self 
 @ @ - 157 , 53 + 205 , 36 @ @ class UASection { 
 return res 
 } 
 
 - func buildCell ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) - > UITableViewCell { 
 + private func getRegion ( indexPath : NSIndexPath ) - > RegionSearchResult { 
 var prevLength = 0 
 for r in regions { 
 - if ( prevLength < = indexPath . row & & indexPath . row < = prevLength + r . itemsCount ( ) ) { 
 - return r . buildCell ( tableView , index : indexPath . row - prevLength , indexPath : indexPath ) 
 + if ( prevLength < = indexPath . row & & indexPath . row < prevLength + r . itemsCount ( ) ) { 
 + return RegionSearchResult ( region : r , index : indexPath . row - prevLength ) 
 } 
 prevLength + = r . itemsCount ( ) 
 } 
 
 - fatalError ( " Inconsistent build cell " ) 
 + fatalError ( " Inconsistent cell " ) 
 + } 
 + 
 + func buildCell ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) - > UITableViewCell { 
 + var r = getRegion ( indexPath ) 
 + return r . region . buildCell ( tableView , index : r . index , indexPath : indexPath ) 
 } 
 
 func cellHeight ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) - > Double { 
 - var prevLength = 0 
 - for r in regions { 
 - if ( prevLength < = indexPath . row & & indexPath . row < = prevLength + r . itemsCount ( ) ) { 
 - return r . cellHeight ( indexPath . row - prevLength ) 
 - } 
 - prevLength + = r . itemsCount ( ) 
 - } 
 - 
 - fatalError ( " Inconsistent build cell " ) 
 + var r = getRegion ( indexPath ) 
 + return r . region . cellHeight ( r . index ) 
 } 
 
 func canSelect ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) - > Bool { 
 - var prevLength = 0 
 - for r in regions { 
 - if ( prevLength < = indexPath . row & & indexPath . row < = prevLength + r . itemsCount ( ) ) { 
 - return r . canSelect ( indexPath . row - prevLength ) 
 - } 
 - prevLength + = r . itemsCount ( ) 
 - } 
 - 
 - fatalError ( " Inconsistent build cell " ) 
 + var r = getRegion ( indexPath ) 
 + return r . region . canSelect ( r . index ) 
 } 
 
 func select ( tableView : UITableView , cellForRowAtIndexPath indexPath : NSIndexPath ) { 
 - var prevLength = 0 
 - for r in regions { 
 - if ( prevLength < = indexPath . row & & indexPath . row < = prevLength + r . itemsCount ( ) ) { 
 - r . select ( indexPath . row - prevLength ) 
 - return 
 - } 
 - prevLength + = r . itemsCount ( ) 
 - } 
 - 
 - fatalError ( " Inconsistent build cell " ) 
 + var r = getRegion ( indexPath ) 
 + r . region . select ( r . index ) 
 } 
 } 
 
 @ @ - 398 , 7 + 429 , 7 @ @ class UACommonCellRegion : UARegion { 
 override func buildCell ( tableView : UITableView , index : Int , indexPath : NSIndexPath ) - > UITableViewCell { 
 var res = tableView 
 . dequeueReusableCellWithIdentifier ( 
 - UATableData . ReuseCommonCell , 
 + UABaseTableData . ReuseCommonCell , 
 forIndexPath : indexPath ) 
 as ! AATableViewCell 
 
 @ @ - 432 , 4 + 463 , 13 @ @ class UACommonCellRegion : UARegion { 
 } 
 } 
 
 + class RegionSearchResult { 
 + let region : UARegion 
 + let index : Int 
 + 
 + init ( region : UARegion , index : Int ) { 
 + self . region = region 
 + self . index = index 
 + } 
 + } 
 
 diff - - git a / apps / actor - ios / Base . lproj / Localizable . strings b / apps / actor - ios / Base . lproj / Localizable . strings 
 index e9e3d27 . . 1d7b7b5 100644 
 - - - a / apps / actor - ios / Base . lproj / Localizable . strings 
 + + + b / apps / actor - ios / Base . lproj / Localizable . strings 
 @ @ - 78 , 8 + 78 , 28 @ @ 
 
 " GroupAddParticipant " = " Add Prticipant . . . " ; 
 
 + " GroupAddParticipantTitle " = " Contacts " ; 
 + 
 " GroupLeave " = " Leave group " ; 
 
 + " GroupInviteLinkActionCopy " = " Copy Link " ; 
 + 
 + " GroupInviteLinkActionRevoke " = " Revoke Link " ; 
 + 
 + " GroupInviteLinkActionShare " = " Share Link " ; 
 + 
 + " GroupInviteLinkPageTitle " = " Invite Link " ; 
 + 
 + " GroupInviteLinkTitle " = " LINK " ; 
 + 
 + " GroupInviteLinkHint " = " You can invite people to this group by sending them this invitation link . " ; 
 + 
 + " GroupInviteLinkCopied " = " Link copied to clipboard . " ; 
 + 
 + " GroupInviteLinkRevokeMessage " = " Are you sure want to revoke this link ? Once you do , no one will be able to join the group using it . " ; 
 + 
 + " GroupInviteLinkRevokeAction " = " Revoke " ; 
 + 
 / * 
 * Compose 
 * / 
 @ @ - 224 , 6 + 244 , 8 @ @ 
 
 " NavigationDone " = " Done " ; 
 
 + " NavigationCancel " = " Cancel " ; 
 + 
 " NavigationBack " = " " ; 
 
 " NavigationNext " = " Next " ; 
 diff - - git a / apps / actor - ios / ru . lproj / Localizable . strings b / apps / actor - ios / ru . lproj / Localizable . strings 
 index 2623776 . . f956a8b 100644 
 - - - a / apps / actor - ios / ru . lproj / Localizable . strings 
 + + + b / apps / actor - ios / ru . lproj / Localizable . strings 
 @ @ - 78 , 8 + 78 , 28 @ @ 
 
 " GroupAddParticipant " = " Д о б а в и т ь в г р у п п у . . . " ; 
 
 + " GroupAddParticipantTitle " = " К о н т а к т ы " ; 
 + 
 " GroupLeave " = " П о к и н у т ь г р у п п у " ; 
 
 + " GroupInviteLinkActionCopy " = " С к о п и р о в а т ь с с ы л к у " ; 
 + 
 + " GroupInviteLinkActionRevoke " = " С б р о с и т ь с с ы л к у " ; 
 + 
 + " GroupInviteLinkActionShare " = " П о д е л и т ь с я с с ы л к о й " ; 
 + 
 + " GroupInviteLinkPageTitle " = " П р и г л а ш е н и е " ; 
 + 
 + " GroupInviteLinkTitle " = " С С Ы Л К А " ; 
 + 
 + " GroupInviteLinkHint " = " В ы м о ж е т е п р и г л а с и т ь л ю д е й в э т у г р у п п у , о т п р а в л я я и м э т у с с ы л к у д л я п р и г л а ш е н и я . " ; 
 + 
 + " GroupInviteLinkCopied " = " С с ы л к а с к о п и р о в а н а в б у ф е р о б м е н а . " ; 
 + 
 + " GroupInviteLinkRevokeMessage " = " В ы у в е р е н ы , ч т о х о т и т е с б р о с и т ь с с ы л к у ? К а к т о л ь к о В ы э т о с д е л а е т е , н и к т о н е с м о ж е т п о н е й п р и с о е д и н и т ь с я в г р у п п у . " ; 
 + 
 + " GroupInviteLinkRevokeAction " = " С б р о с и т ь " ; 
 + 
 / * 
 * Compose 
 * / 
 @ @ - 224 , 6 + 244 , 8 @ @ 
 
 " NavigationDone " = " Г о т о в о " ; 
 
 + " NavigationCancel " = " О т м е н а " ; 
 + 
 " NavigationBack " = " " ; 
 
 " NavigationNext " = " Д а л е е " ;
