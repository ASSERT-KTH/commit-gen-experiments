BLEU SCORE: 0.04023185929567686

TEST MSG: Merge branch ' server / frontend - fix '
GENERATED MSG: fix ( server : frontend ) : fixed connection hangup for slow clients

TEST DIFF (one line): diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala < nl > index 4ced97b . . 7159b4a 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala < nl > @ @ - 46 , 6 + 46 , 8 @ @ private [ frontend ] final class PackageHandleStage ( < nl > val hresp = HandshakeResponse ( protoVersion , apiMajorVersion , apiMinorVersion , sha256Sign ) < nl > hresp < nl > } ) < nl > + < nl > + pullIn ( ) < nl > case TransportPackage ( index , body ) ⇒ < nl > val ack = Ack ( index ) < nl > < nl > @ @ - 64 , 7 + 66 , 10 @ @ private [ frontend ] final class PackageHandleStage ( < nl > case m ⇒ Seq ( ack ) < nl > } < nl > < nl > - emitMultiple ( out , fs . iterator , pullIn ) < nl > + if ( fs . nonEmpty ) < nl > + emitMultiple ( out , fs . iterator , pullIn ) < nl > + else < nl > + pullIn ( ) < nl > } < nl > } ) < nl > < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala < nl > index 492cd4e . . e89d2f5 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala < nl > @ @ - 61 , 7 + 61 , 11 @ @ private [ frontend ] final class PackageParseStage ( implicit system : ActorSystem ) < nl > failStage ( new Exception ( msg ) with NoStackTrace ) < nl > case _ ⇒ < nl > parserState = newState < nl > - emitMultiple ( out , res . iterator , pullIn ) < nl > + < nl > + if ( res . iterator . hasNext ) < nl > + emitMultiple ( out , res . iterator , pullIn ) < nl > + else < nl > + pullIn ( ) < nl > } < nl > } < nl > } ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala < nl > index 1160144 . . 97abab5 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala < nl > @ @ - 41 , 8 + 41 , 8 @ @ class MTProtoClient ( system : ActorSystem ) { < nl > } < nl > } < nl > < nl > - def send ( tp : MTProto ) : Unit = { < nl > - clientActor ! Send ( tp ) < nl > + def send ( tp : MTProto , slowly : Boolean = false ) : Unit = { < nl > + clientActor ! Send ( tp , slowly ) < nl > } < nl > < nl > def receiveTransportPackage ( ) ( implicit timeout : Timeout = Timeout ( 10 . seconds ) ) : Option [ TransportPackage ] = { < nl > @ @ - 57 , 7 + 57 , 7 @ @ object MTProtoClientActor { < nl > < nl > case object MTConnected < nl > < nl > - case class Send ( p : MTProto ) < nl > + case class Send ( p : MTProto , slowly : Boolean ) < nl > < nl > case object GetTransportPackage < nl > < nl > @ @ - 107 , 8 + 107 , 8 @ @ class MTProtoClientActor extends Actor with ActorLogging { < nl > } < nl > < nl > def receiving ( connection : ActorRef , buffer : BitVector , tps : Seq [ TransportPackage ] , consumers : Seq [ ActorRef ] ) : Receive = { < nl > - case Send ( p ) ⇒ < nl > - send ( connection , p ) < nl > + case Send ( p , slowly ) ⇒ < nl > + send ( connection , p , slowly ) < nl > case GetTransportPackage ⇒ < nl > if ( tps . isEmpty | | ! consumers . isEmpty ) { < nl > context . become ( receiving ( connection , buffer , tps , consumers : + sender ( ) ) , discardOld = true ) < nl > @ @ - 165 , 15 + 165 , 24 @ @ class MTProtoClientActor extends Actor with ActorLogging { < nl > / / val randomBytesDigest = DigestUtils . sha1 ( Array ( protoVersion , apiMajorVersion , apiMinorVersion ) + + randomBytes ) < nl > val handshake = Handshake ( protoVersion , apiMajorVersion , apiMinorVersion , randomBytes ) < nl > log . debug ( " Sending handshake { } " , handshake ) < nl > - send ( connection , handshake ) < nl > + send ( connection , handshake , slowly = false ) < nl > } < nl > < nl > - private def send ( connection : ActorRef , mtp : MTProto ) : Unit = { < nl > + private def send ( connection : ActorRef , mtp : MTProto , slowly : Boolean ) : Unit = { < nl > val bits = TransportPackageCodec . encode ( TransportPackage ( 1 , mtp ) ) . require < nl > < nl > val data = ByteString ( bits . toByteBuffer ) < nl > < nl > - log . debug ( " Writing { } " , data ) < nl > - connection ! Write ( data ) < nl > + if ( ! slowly ) { < nl > + log . debug ( " Writing { } " , data ) < nl > + connection ! Write ( data ) < nl > + } else { < nl > + log . debug ( " Writing slowly { } " , data ) < nl > + < nl > + data . grouped ( 5 ) foreach { chunk ⇒ < nl > + connection ! Write ( chunk ) < nl > + Thread . sleep ( 5 ) < nl > + } < nl > + } < nl > } < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > index 3bbcba9 . . 433d752 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > @ @ - 7 , 9 + 7 , 11 @ @ import com . amazonaws . services . s3 . transfer . TransferManager < nl > import com . typesafe . config . ConfigFactory < nl > import im . actor . api . rpc . auth . _ < nl > import im . actor . api . rpc . codecs . RequestCodec < nl > + import im . actor . api . rpc . configs . RequestEditParameter < nl > import im . actor . api . rpc . sequence . RequestGetDifference < nl > import im . actor . api . rpc . { Request , RpcOk , RpcResult } < nl > import im . actor . server . api . rpc . service . auth . AuthServiceImpl < nl > + import im . actor . server . api . rpc . service . configs . ConfigsServiceImpl < nl > import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl < nl > import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl < nl > import im . actor . server . api . rpc . service . sequence . { SequenceServiceConfig , SequenceServiceImpl } < nl > @ @ - 41 , 6 + 43 , 8 @ @ class SimpleServerE2eSpec extends ActorSuite ( < nl > < nl > it should " respond to RPC requests " in Server . e2 < nl > < nl > + it should " respond to big RPC requests " in Server . bigRequests < nl > + < nl > it should " notify about lost session " in Server . e3 < nl > < nl > it should " throw AuthIdInvalid if sending wrong AuthId " in Server . authIdInvalid < nl > @ @ - 71 , 7 + 75 , 8 @ @ class SimpleServerE2eSpec extends ActorSuite ( < nl > new AuthServiceImpl ( new DummyCodeActivation ) , < nl > new ContactsServiceImpl , < nl > MessagingServiceImpl ( ) , < nl > - new SequenceServiceImpl ( sequenceConfig ) < nl > + new SequenceServiceImpl ( sequenceConfig ) , < nl > + new ConfigsServiceImpl ( ) < nl > ) < nl > < nl > RpcApiExtension ( system ) . register ( services ) < nl > @ @ - 113 , 6 + 118 , 33 @ @ class SimpleServerE2eSpec extends ActorSuite ( < nl > client . close ( ) < nl > } < nl > < nl > + def bigRequests ( ) = { < nl > + implicit val client = MTProtoClient ( ) < nl > + < nl > + client . connectAndHandshake ( remote ) < nl > + < nl > + val authId = requestAuthId ( ) < nl > + val sessionId = 2L < nl > + val phoneNumber = 75550000000L < nl > + < nl > + signUp ( authId , sessionId , phoneNumber ) < nl > + < nl > + val messageId = Random . nextLong ( ) < nl > + < nl > + val requestBytes = RequestCodec . encode ( Request ( RequestEditParameter ( s " very l $ { " o " * 100 } ng key " , Some ( s " very lo $ { " n " * 100 } g value " ) ) ) ) . require < nl > + val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , RpcRequestBox ( requestBytes ) ) ) . require < nl > + val mtPackage = MTPackage ( authId , sessionId , mbBytes ) < nl > + < nl > + client . send ( mtPackage , slowly = true ) < nl > + < nl > + expectMessageAck ( messageId ) < nl > + < nl > + val result = receiveRpcResult ( messageId ) < nl > + result shouldBe an [ RpcOk ] < nl > + < nl > + client . close ( ) < nl > + } < nl > + < nl > def e3 ( ) = { < nl > implicit val client = MTProtoClient ( )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala < nl > index 4ced97b . . 7159b4a 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala < nl > @ @ - 46 , 6 + 46 , 8 @ @ private [ frontend ] final class PackageHandleStage ( < nl > val hresp = HandshakeResponse ( protoVersion , apiMajorVersion , apiMinorVersion , sha256Sign ) < nl > hresp < nl > } ) < nl > + < nl > + pullIn ( ) < nl > case TransportPackage ( index , body ) ⇒ < nl > val ack = Ack ( index ) < nl > < nl > @ @ - 64 , 7 + 66 , 10 @ @ private [ frontend ] final class PackageHandleStage ( < nl > case m ⇒ Seq ( ack ) < nl > } < nl > < nl > - emitMultiple ( out , fs . iterator , pullIn ) < nl > + if ( fs . nonEmpty ) < nl > + emitMultiple ( out , fs . iterator , pullIn ) < nl > + else < nl > + pullIn ( ) < nl > } < nl > } ) < nl > < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala < nl > index 492cd4e . . e89d2f5 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala < nl > @ @ - 61 , 7 + 61 , 11 @ @ private [ frontend ] final class PackageParseStage ( implicit system : ActorSystem ) < nl > failStage ( new Exception ( msg ) with NoStackTrace ) < nl > case _ ⇒ < nl > parserState = newState < nl > - emitMultiple ( out , res . iterator , pullIn ) < nl > + < nl > + if ( res . iterator . hasNext ) < nl > + emitMultiple ( out , res . iterator , pullIn ) < nl > + else < nl > + pullIn ( ) < nl > } < nl > } < nl > } ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala < nl > index 1160144 . . 97abab5 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala < nl > @ @ - 41 , 8 + 41 , 8 @ @ class MTProtoClient ( system : ActorSystem ) { < nl > } < nl > } < nl > < nl > - def send ( tp : MTProto ) : Unit = { < nl > - clientActor ! Send ( tp ) < nl > + def send ( tp : MTProto , slowly : Boolean = false ) : Unit = { < nl > + clientActor ! Send ( tp , slowly ) < nl > } < nl > < nl > def receiveTransportPackage ( ) ( implicit timeout : Timeout = Timeout ( 10 . seconds ) ) : Option [ TransportPackage ] = { < nl > @ @ - 57 , 7 + 57 , 7 @ @ object MTProtoClientActor { < nl > < nl > case object MTConnected < nl > < nl > - case class Send ( p : MTProto ) < nl > + case class Send ( p : MTProto , slowly : Boolean ) < nl > < nl > case object GetTransportPackage < nl > < nl > @ @ - 107 , 8 + 107 , 8 @ @ class MTProtoClientActor extends Actor with ActorLogging { < nl > } < nl > < nl > def receiving ( connection : ActorRef , buffer : BitVector , tps : Seq [ TransportPackage ] , consumers : Seq [ ActorRef ] ) : Receive = { < nl > - case Send ( p ) ⇒ < nl > - send ( connection , p ) < nl > + case Send ( p , slowly ) ⇒ < nl > + send ( connection , p , slowly ) < nl > case GetTransportPackage ⇒ < nl > if ( tps . isEmpty | | ! consumers . isEmpty ) { < nl > context . become ( receiving ( connection , buffer , tps , consumers : + sender ( ) ) , discardOld = true ) < nl > @ @ - 165 , 15 + 165 , 24 @ @ class MTProtoClientActor extends Actor with ActorLogging { < nl > / / val randomBytesDigest = DigestUtils . sha1 ( Array ( protoVersion , apiMajorVersion , apiMinorVersion ) + + randomBytes ) < nl > val handshake = Handshake ( protoVersion , apiMajorVersion , apiMinorVersion , randomBytes ) < nl > log . debug ( " Sending handshake { } " , handshake ) < nl > - send ( connection , handshake ) < nl > + send ( connection , handshake , slowly = false ) < nl > } < nl > < nl > - private def send ( connection : ActorRef , mtp : MTProto ) : Unit = { < nl > + private def send ( connection : ActorRef , mtp : MTProto , slowly : Boolean ) : Unit = { < nl > val bits = TransportPackageCodec . encode ( TransportPackage ( 1 , mtp ) ) . require < nl > < nl > val data = ByteString ( bits . toByteBuffer ) < nl > < nl > - log . debug ( " Writing { } " , data ) < nl > - connection ! Write ( data ) < nl > + if ( ! slowly ) { < nl > + log . debug ( " Writing { } " , data ) < nl > + connection ! Write ( data ) < nl > + } else { < nl > + log . debug ( " Writing slowly { } " , data ) < nl > + < nl > + data . grouped ( 5 ) foreach { chunk ⇒ < nl > + connection ! Write ( chunk ) < nl > + Thread . sleep ( 5 ) < nl > + } < nl > + } < nl > } < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > index 3bbcba9 . . 433d752 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > @ @ - 7 , 9 + 7 , 11 @ @ import com . amazonaws . services . s3 . transfer . TransferManager < nl > import com . typesafe . config . ConfigFactory < nl > import im . actor . api . rpc . auth . _ < nl > import im . actor . api . rpc . codecs . RequestCodec < nl > + import im . actor . api . rpc . configs . RequestEditParameter < nl > import im . actor . api . rpc . sequence . RequestGetDifference < nl > import im . actor . api . rpc . { Request , RpcOk , RpcResult } < nl > import im . actor . server . api . rpc . service . auth . AuthServiceImpl < nl > + import im . actor . server . api . rpc . service . configs . ConfigsServiceImpl < nl > import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl < nl > import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl < nl > import im . actor . server . api . rpc . service . sequence . { SequenceServiceConfig , SequenceServiceImpl } < nl > @ @ - 41 , 6 + 43 , 8 @ @ class SimpleServerE2eSpec extends ActorSuite ( < nl > < nl > it should " respond to RPC requests " in Server . e2 < nl > < nl > + it should " respond to big RPC requests " in Server . bigRequests < nl > + < nl > it should " notify about lost session " in Server . e3 < nl > < nl > it should " throw AuthIdInvalid if sending wrong AuthId " in Server . authIdInvalid < nl > @ @ - 71 , 7 + 75 , 8 @ @ class SimpleServerE2eSpec extends ActorSuite ( < nl > new AuthServiceImpl ( new DummyCodeActivation ) , < nl > new ContactsServiceImpl , < nl > MessagingServiceImpl ( ) , < nl > - new SequenceServiceImpl ( sequenceConfig ) < nl > + new SequenceServiceImpl ( sequenceConfig ) , < nl > + new ConfigsServiceImpl ( ) < nl > ) < nl > < nl > RpcApiExtension ( system ) . register ( services ) < nl > @ @ - 113 , 6 + 118 , 33 @ @ class SimpleServerE2eSpec extends ActorSuite ( < nl > client . close ( ) < nl > } < nl > < nl > + def bigRequests ( ) = { < nl > + implicit val client = MTProtoClient ( ) < nl > + < nl > + client . connectAndHandshake ( remote ) < nl > + < nl > + val authId = requestAuthId ( ) < nl > + val sessionId = 2L < nl > + val phoneNumber = 75550000000L < nl > + < nl > + signUp ( authId , sessionId , phoneNumber ) < nl > + < nl > + val messageId = Random . nextLong ( ) < nl > + < nl > + val requestBytes = RequestCodec . encode ( Request ( RequestEditParameter ( s " very l $ { " o " * 100 } ng key " , Some ( s " very lo $ { " n " * 100 } g value " ) ) ) ) . require < nl > + val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , RpcRequestBox ( requestBytes ) ) ) . require < nl > + val mtPackage = MTPackage ( authId , sessionId , mbBytes ) < nl > + < nl > + client . send ( mtPackage , slowly = true ) < nl > + < nl > + expectMessageAck ( messageId ) < nl > + < nl > + val result = receiveRpcResult ( messageId ) < nl > + result shouldBe an [ RpcOk ] < nl > + < nl > + client . close ( ) < nl > + } < nl > + < nl > def e3 ( ) = { < nl > implicit val client = MTProtoClient ( )

TEST DIFF:
diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala 
 index 4ced97b . . 7159b4a 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala 
 @ @ - 46 , 6 + 46 , 8 @ @ private [ frontend ] final class PackageHandleStage ( 
 val hresp = HandshakeResponse ( protoVersion , apiMajorVersion , apiMinorVersion , sha256Sign ) 
 hresp 
 } ) 
 + 
 + pullIn ( ) 
 case TransportPackage ( index , body ) ⇒ 
 val ack = Ack ( index ) 
 
 @ @ - 64 , 7 + 66 , 10 @ @ private [ frontend ] final class PackageHandleStage ( 
 case m ⇒ Seq ( ack ) 
 } 
 
 - emitMultiple ( out , fs . iterator , pullIn ) 
 + if ( fs . nonEmpty ) 
 + emitMultiple ( out , fs . iterator , pullIn ) 
 + else 
 + pullIn ( ) 
 } 
 } ) 
 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala 
 index 492cd4e . . e89d2f5 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala 
 @ @ - 61 , 7 + 61 , 11 @ @ private [ frontend ] final class PackageParseStage ( implicit system : ActorSystem ) 
 failStage ( new Exception ( msg ) with NoStackTrace ) 
 case _ ⇒ 
 parserState = newState 
 - emitMultiple ( out , res . iterator , pullIn ) 
 + 
 + if ( res . iterator . hasNext ) 
 + emitMultiple ( out , res . iterator , pullIn ) 
 + else 
 + pullIn ( ) 
 } 
 } 
 } ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala 
 index 1160144 . . 97abab5 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala 
 @ @ - 41 , 8 + 41 , 8 @ @ class MTProtoClient ( system : ActorSystem ) { 
 } 
 } 
 
 - def send ( tp : MTProto ) : Unit = { 
 - clientActor ! Send ( tp ) 
 + def send ( tp : MTProto , slowly : Boolean = false ) : Unit = { 
 + clientActor ! Send ( tp , slowly ) 
 } 
 
 def receiveTransportPackage ( ) ( implicit timeout : Timeout = Timeout ( 10 . seconds ) ) : Option [ TransportPackage ] = { 
 @ @ - 57 , 7 + 57 , 7 @ @ object MTProtoClientActor { 
 
 case object MTConnected 
 
 - case class Send ( p : MTProto ) 
 + case class Send ( p : MTProto , slowly : Boolean ) 
 
 case object GetTransportPackage 
 
 @ @ - 107 , 8 + 107 , 8 @ @ class MTProtoClientActor extends Actor with ActorLogging { 
 } 
 
 def receiving ( connection : ActorRef , buffer : BitVector , tps : Seq [ TransportPackage ] , consumers : Seq [ ActorRef ] ) : Receive = { 
 - case Send ( p ) ⇒ 
 - send ( connection , p ) 
 + case Send ( p , slowly ) ⇒ 
 + send ( connection , p , slowly ) 
 case GetTransportPackage ⇒ 
 if ( tps . isEmpty | | ! consumers . isEmpty ) { 
 context . become ( receiving ( connection , buffer , tps , consumers : + sender ( ) ) , discardOld = true ) 
 @ @ - 165 , 15 + 165 , 24 @ @ class MTProtoClientActor extends Actor with ActorLogging { 
 / / val randomBytesDigest = DigestUtils . sha1 ( Array ( protoVersion , apiMajorVersion , apiMinorVersion ) + + randomBytes ) 
 val handshake = Handshake ( protoVersion , apiMajorVersion , apiMinorVersion , randomBytes ) 
 log . debug ( " Sending handshake { } " , handshake ) 
 - send ( connection , handshake ) 
 + send ( connection , handshake , slowly = false ) 
 } 
 
 - private def send ( connection : ActorRef , mtp : MTProto ) : Unit = { 
 + private def send ( connection : ActorRef , mtp : MTProto , slowly : Boolean ) : Unit = { 
 val bits = TransportPackageCodec . encode ( TransportPackage ( 1 , mtp ) ) . require 
 
 val data = ByteString ( bits . toByteBuffer ) 
 
 - log . debug ( " Writing { } " , data ) 
 - connection ! Write ( data ) 
 + if ( ! slowly ) { 
 + log . debug ( " Writing { } " , data ) 
 + connection ! Write ( data ) 
 + } else { 
 + log . debug ( " Writing slowly { } " , data ) 
 + 
 + data . grouped ( 5 ) foreach { chunk ⇒ 
 + connection ! Write ( chunk ) 
 + Thread . sleep ( 5 ) 
 + } 
 + } 
 } 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 index 3bbcba9 . . 433d752 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 @ @ - 7 , 9 + 7 , 11 @ @ import com . amazonaws . services . s3 . transfer . TransferManager 
 import com . typesafe . config . ConfigFactory 
 import im . actor . api . rpc . auth . _ 
 import im . actor . api . rpc . codecs . RequestCodec 
 + import im . actor . api . rpc . configs . RequestEditParameter 
 import im . actor . api . rpc . sequence . RequestGetDifference 
 import im . actor . api . rpc . { Request , RpcOk , RpcResult } 
 import im . actor . server . api . rpc . service . auth . AuthServiceImpl 
 + import im . actor . server . api . rpc . service . configs . ConfigsServiceImpl 
 import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl 
 import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl 
 import im . actor . server . api . rpc . service . sequence . { SequenceServiceConfig , SequenceServiceImpl } 
 @ @ - 41 , 6 + 43 , 8 @ @ class SimpleServerE2eSpec extends ActorSuite ( 
 
 it should " respond to RPC requests " in Server . e2 
 
 + it should " respond to big RPC requests " in Server . bigRequests 
 + 
 it should " notify about lost session " in Server . e3 
 
 it should " throw AuthIdInvalid if sending wrong AuthId " in Server . authIdInvalid 
 @ @ - 71 , 7 + 75 , 8 @ @ class SimpleServerE2eSpec extends ActorSuite ( 
 new AuthServiceImpl ( new DummyCodeActivation ) , 
 new ContactsServiceImpl , 
 MessagingServiceImpl ( ) , 
 - new SequenceServiceImpl ( sequenceConfig ) 
 + new SequenceServiceImpl ( sequenceConfig ) , 
 + new ConfigsServiceImpl ( ) 
 ) 
 
 RpcApiExtension ( system ) . register ( services ) 
 @ @ - 113 , 6 + 118 , 33 @ @ class SimpleServerE2eSpec extends ActorSuite ( 
 client . close ( ) 
 } 
 
 + def bigRequests ( ) = { 
 + implicit val client = MTProtoClient ( ) 
 + 
 + client . connectAndHandshake ( remote ) 
 + 
 + val authId = requestAuthId ( ) 
 + val sessionId = 2L 
 + val phoneNumber = 75550000000L 
 + 
 + signUp ( authId , sessionId , phoneNumber ) 
 + 
 + val messageId = Random . nextLong ( ) 
 + 
 + val requestBytes = RequestCodec . encode ( Request ( RequestEditParameter ( s " very l $ { " o " * 100 } ng key " , Some ( s " very lo $ { " n " * 100 } g value " ) ) ) ) . require 
 + val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , RpcRequestBox ( requestBytes ) ) ) . require 
 + val mtPackage = MTPackage ( authId , sessionId , mbBytes ) 
 + 
 + client . send ( mtPackage , slowly = true ) 
 + 
 + expectMessageAck ( messageId ) 
 + 
 + val result = receiveRpcResult ( messageId ) 
 + result shouldBe an [ RpcOk ] 
 + 
 + client . close ( ) 
 + } 
 + 
 def e3 ( ) = { 
 implicit val client = MTProtoClient ( )

NEAREST DIFF:
diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala 
 index 4ced97b . . 7159b4a 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageHandleStage . scala 
 @ @ - 46 , 6 + 46 , 8 @ @ private [ frontend ] final class PackageHandleStage ( 
 val hresp = HandshakeResponse ( protoVersion , apiMajorVersion , apiMinorVersion , sha256Sign ) 
 hresp 
 } ) 
 + 
 + pullIn ( ) 
 case TransportPackage ( index , body ) ⇒ 
 val ack = Ack ( index ) 
 
 @ @ - 64 , 7 + 66 , 10 @ @ private [ frontend ] final class PackageHandleStage ( 
 case m ⇒ Seq ( ack ) 
 } 
 
 - emitMultiple ( out , fs . iterator , pullIn ) 
 + if ( fs . nonEmpty ) 
 + emitMultiple ( out , fs . iterator , pullIn ) 
 + else 
 + pullIn ( ) 
 } 
 } ) 
 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala 
 index 492cd4e . . e89d2f5 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / PackageParseStage . scala 
 @ @ - 61 , 7 + 61 , 11 @ @ private [ frontend ] final class PackageParseStage ( implicit system : ActorSystem ) 
 failStage ( new Exception ( msg ) with NoStackTrace ) 
 case _ ⇒ 
 parserState = newState 
 - emitMultiple ( out , res . iterator , pullIn ) 
 + 
 + if ( res . iterator . hasNext ) 
 + emitMultiple ( out , res . iterator , pullIn ) 
 + else 
 + pullIn ( ) 
 } 
 } 
 } ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala 
 index 1160144 . . 97abab5 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / MTProtoClient . scala 
 @ @ - 41 , 8 + 41 , 8 @ @ class MTProtoClient ( system : ActorSystem ) { 
 } 
 } 
 
 - def send ( tp : MTProto ) : Unit = { 
 - clientActor ! Send ( tp ) 
 + def send ( tp : MTProto , slowly : Boolean = false ) : Unit = { 
 + clientActor ! Send ( tp , slowly ) 
 } 
 
 def receiveTransportPackage ( ) ( implicit timeout : Timeout = Timeout ( 10 . seconds ) ) : Option [ TransportPackage ] = { 
 @ @ - 57 , 7 + 57 , 7 @ @ object MTProtoClientActor { 
 
 case object MTConnected 
 
 - case class Send ( p : MTProto ) 
 + case class Send ( p : MTProto , slowly : Boolean ) 
 
 case object GetTransportPackage 
 
 @ @ - 107 , 8 + 107 , 8 @ @ class MTProtoClientActor extends Actor with ActorLogging { 
 } 
 
 def receiving ( connection : ActorRef , buffer : BitVector , tps : Seq [ TransportPackage ] , consumers : Seq [ ActorRef ] ) : Receive = { 
 - case Send ( p ) ⇒ 
 - send ( connection , p ) 
 + case Send ( p , slowly ) ⇒ 
 + send ( connection , p , slowly ) 
 case GetTransportPackage ⇒ 
 if ( tps . isEmpty | | ! consumers . isEmpty ) { 
 context . become ( receiving ( connection , buffer , tps , consumers : + sender ( ) ) , discardOld = true ) 
 @ @ - 165 , 15 + 165 , 24 @ @ class MTProtoClientActor extends Actor with ActorLogging { 
 / / val randomBytesDigest = DigestUtils . sha1 ( Array ( protoVersion , apiMajorVersion , apiMinorVersion ) + + randomBytes ) 
 val handshake = Handshake ( protoVersion , apiMajorVersion , apiMinorVersion , randomBytes ) 
 log . debug ( " Sending handshake { } " , handshake ) 
 - send ( connection , handshake ) 
 + send ( connection , handshake , slowly = false ) 
 } 
 
 - private def send ( connection : ActorRef , mtp : MTProto ) : Unit = { 
 + private def send ( connection : ActorRef , mtp : MTProto , slowly : Boolean ) : Unit = { 
 val bits = TransportPackageCodec . encode ( TransportPackage ( 1 , mtp ) ) . require 
 
 val data = ByteString ( bits . toByteBuffer ) 
 
 - log . debug ( " Writing { } " , data ) 
 - connection ! Write ( data ) 
 + if ( ! slowly ) { 
 + log . debug ( " Writing { } " , data ) 
 + connection ! Write ( data ) 
 + } else { 
 + log . debug ( " Writing slowly { } " , data ) 
 + 
 + data . grouped ( 5 ) foreach { chunk ⇒ 
 + connection ! Write ( chunk ) 
 + Thread . sleep ( 5 ) 
 + } 
 + } 
 } 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 index 3bbcba9 . . 433d752 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 @ @ - 7 , 9 + 7 , 11 @ @ import com . amazonaws . services . s3 . transfer . TransferManager 
 import com . typesafe . config . ConfigFactory 
 import im . actor . api . rpc . auth . _ 
 import im . actor . api . rpc . codecs . RequestCodec 
 + import im . actor . api . rpc . configs . RequestEditParameter 
 import im . actor . api . rpc . sequence . RequestGetDifference 
 import im . actor . api . rpc . { Request , RpcOk , RpcResult } 
 import im . actor . server . api . rpc . service . auth . AuthServiceImpl 
 + import im . actor . server . api . rpc . service . configs . ConfigsServiceImpl 
 import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl 
 import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl 
 import im . actor . server . api . rpc . service . sequence . { SequenceServiceConfig , SequenceServiceImpl } 
 @ @ - 41 , 6 + 43 , 8 @ @ class SimpleServerE2eSpec extends ActorSuite ( 
 
 it should " respond to RPC requests " in Server . e2 
 
 + it should " respond to big RPC requests " in Server . bigRequests 
 + 
 it should " notify about lost session " in Server . e3 
 
 it should " throw AuthIdInvalid if sending wrong AuthId " in Server . authIdInvalid 
 @ @ - 71 , 7 + 75 , 8 @ @ class SimpleServerE2eSpec extends ActorSuite ( 
 new AuthServiceImpl ( new DummyCodeActivation ) , 
 new ContactsServiceImpl , 
 MessagingServiceImpl ( ) , 
 - new SequenceServiceImpl ( sequenceConfig ) 
 + new SequenceServiceImpl ( sequenceConfig ) , 
 + new ConfigsServiceImpl ( ) 
 ) 
 
 RpcApiExtension ( system ) . register ( services ) 
 @ @ - 113 , 6 + 118 , 33 @ @ class SimpleServerE2eSpec extends ActorSuite ( 
 client . close ( ) 
 } 
 
 + def bigRequests ( ) = { 
 + implicit val client = MTProtoClient ( ) 
 + 
 + client . connectAndHandshake ( remote ) 
 + 
 + val authId = requestAuthId ( ) 
 + val sessionId = 2L 
 + val phoneNumber = 75550000000L 
 + 
 + signUp ( authId , sessionId , phoneNumber ) 
 + 
 + val messageId = Random . nextLong ( ) 
 + 
 + val requestBytes = RequestCodec . encode ( Request ( RequestEditParameter ( s " very l $ { " o " * 100 } ng key " , Some ( s " very lo $ { " n " * 100 } g value " ) ) ) ) . require 
 + val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , RpcRequestBox ( requestBytes ) ) ) . require 
 + val mtPackage = MTPackage ( authId , sessionId , mbBytes ) 
 + 
 + client . send ( mtPackage , slowly = true ) 
 + 
 + expectMessageAck ( messageId ) 
 + 
 + val result = receiveRpcResult ( messageId ) 
 + result shouldBe an [ RpcOk ] 
 + 
 + client . close ( ) 
 + } 
 + 
 def e3 ( ) = { 
 implicit val client = MTProtoClient ( )
