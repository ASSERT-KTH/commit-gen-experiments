BLEU SCORE: 0.09578464408619825

TEST MSG: feat ( js ) : Enabled call binding and event bus support
GENERATED MSG: wip ( js + core ) : Integration of WebRTC

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index cecfeda . . 175e89f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 623 , 6 + 623 , 40 @ @ public class JsFacade implements Exportable { < nl > messenger . getJsGroupOnline ( gid ) . unsubscribe ( callback ) ; < nl > } < nl > < nl > + / / Calls < nl > + < nl > + public void bindCall ( String id , JsBindedValueCallback callback ) { < nl > + if ( callback = = null ) { < nl > + return ; < nl > + } < nl > + messenger . getJsCall ( id ) . subscribe ( callback ) ; < nl > + } < nl > + < nl > + public void unbindCall ( String id , JsBindedValueCallback callback ) { < nl > + if ( callback = = null ) { < nl > + return ; < nl > + } < nl > + messenger . getJsCall ( id ) . unsubscribe ( callback ) ; < nl > + } < nl > + < nl > + / / Event Bus < nl > + < nl > + public void bindEventBus ( JsEventBusCallback callback ) { < nl > + if ( callback = = null ) { < nl > + return ; < nl > + } < nl > + < nl > + messenger . subscribeEventBus ( callback ) ; < nl > + } < nl > + < nl > + public void unbindEventBus ( JsEventBusCallback callback ) { < nl > + if ( callback = = null ) { < nl > + return ; < nl > + } < nl > + < nl > + messenger . unsubscribeEventBus ( callback ) ; < nl > + } < nl > + < nl > / / Actions < nl > < nl > public void sendMessage ( JsPeer peer , String text ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > index 5a88615 . . 27a49d6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > @ @ - 4 , 6 + 4 , 7 @ @ < nl > < nl > package im . actor . core . js ; < nl > < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > import com . google . gwt . core . client . JsArray ; < nl > import com . google . gwt . user . client . Event ; < nl > < nl > @ @ - 18 , 8 + 19 , 10 @ @ import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > import im . actor . core . entity . SearchEntity ; < nl > import im . actor . core . entity . content . FastThumb ; < nl > + import im . actor . core . js . entity . JsCall ; < nl > import im . actor . core . js . entity . JsCounter ; < nl > import im . actor . core . js . entity . JsDialogGroup ; < nl > + import im . actor . core . js . entity . JsEventBusCallback ; < nl > import im . actor . core . js . entity . JsOnlineGroup ; < nl > import im . actor . core . js . entity . JsOnlineUser ; < nl > import im . actor . core . js . entity . JsSearchEntity ; < nl > @ @ - 180 , 6 + 183 , 10 @ @ public class JsMessenger extends Messenger { < nl > return jsBindingModule . getGroupOnline ( gid ) ; < nl > } < nl > < nl > + public JsBindedValue < JsCall > getJsCall ( String id ) { < nl > + return jsBindingModule . getCall ( id ) ; < nl > + } < nl > + < nl > public JsBindedValue < JsTyping > getTyping ( Peer peer ) { < nl > return jsBindingModule . getTyping ( peer ) ; < nl > } < nl > @ @ - 238 , 7 + 245 , 17 @ @ public class JsMessenger extends Messenger { < nl > return jsBindingModule . getDialogsGroupedList ( ) ; < nl > } < nl > < nl > + public void broadcastEvent ( String tag , JavaScriptObject obj ) { < nl > + jsBindingModule . broadcastEvent ( tag , obj ) ; < nl > + } < nl > + < nl > + public void subscribeEventBus ( JsEventBusCallback callback ) { < nl > + jsBindingModule . subscribeEventBus ( callback ) ; < nl > + } < nl > < nl > + public void unsubscribeEventBus ( JsEventBusCallback callback ) { < nl > + jsBindingModule . unsubscribeEventBus ( callback ) ; < nl > + } < nl > < nl > private String getSmallAvatarUrl ( Avatar avatar ) { < nl > if ( avatar ! = null & & avatar . getSmallImage ( ) ! = null ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsCall . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsCall . java < nl > new file mode 100644 < nl > index 0000000 . . e87e3b3 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsCall . java < nl > @ @ - 0 , 0 + 1 , 43 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + import com . google . gwt . core . client . JsArray ; < nl > + < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . js . JsMessenger ; < nl > + import im . actor . core . viewmodel . CallModel ; < nl > + < nl > + public class JsCall extends JavaScriptObject { < nl > + < nl > + public static JsCall create ( JsMessenger messenger , CallModel model ) { < nl > + JsArray < JsPeerInfo > members = JsArray . createArray ( ) . cast ( ) ; < nl > + for ( int uid : model . getActiveMembers ( ) . get ( ) ) { < nl > + members . push ( messenger . buildPeerInfo ( Peer . user ( uid ) ) ) ; < nl > + } < nl > + String state ; < nl > + switch ( model . getState ( ) . get ( ) ) { < nl > + case CALLING _ INCOMING : < nl > + state = " calling _ in " ; < nl > + break ; < nl > + case CALLING _ OUTGOING : < nl > + state = " calling _ out " ; < nl > + break ; < nl > + case IN _ PROGRESS : < nl > + state = " in _ progress " ; < nl > + break ; < nl > + default : < nl > + case ENDED : < nl > + state = " ended " ; < nl > + break ; < nl > + } < nl > + return create ( JsPeer . create ( model . getPeer ( ) ) , members , state ) ; < nl > + } < nl > + < nl > + public static native JsCall create ( JsPeer peer , JsArray < JsPeerInfo > members , String state ) / * - { < nl > + return { peer : peer , members : members , state : state } ; < nl > + } - * / ; < nl > + < nl > + protected JsCall ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsEventBusCallback . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsEventBusCallback . java < nl > new file mode 100644 < nl > index 0000000 . . 8f4f140 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsEventBusCallback . java < nl > @ @ - 0 , 0 + 1 , 13 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + import org . timepedia . exporter . client . Export ; < nl > + import org . timepedia . exporter . client . ExportClosure ; < nl > + import org . timepedia . exporter . client . Exportable ; < nl > + < nl > + @ Export < nl > + @ ExportClosure < nl > + public interface JsEventBusCallback extends Exportable { < nl > + void onEvent ( String tag , JavaScriptObject item ) ; < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > index 45a7999 . . b1a6005 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > @ @ - 4 , 6 + 4 , 7 @ @ < nl > < nl > package im . actor . core . js . modules ; < nl > < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > import com . google . gwt . core . client . JsArray ; < nl > < nl > import java . util . ArrayList ; < nl > @ @ - 11 , 6 + 12 , 7 @ @ import java . util . HashMap ; < nl > import java . util . HashSet ; < nl > < nl > import im . actor . core . entity . Avatar ; < nl > + import im . actor . core . entity . CallState ; < nl > import im . actor . core . entity . Contact ; < nl > import im . actor . core . entity . Dialog ; < nl > import im . actor . core . entity . Message ; < nl > @ @ - 21 , 11 + 23 , 13 @ @ import im . actor . core . entity . content . DocumentContent ; < nl > import im . actor . core . entity . content . FileRemoteSource ; < nl > import im . actor . core . entity . content . StickerContent ; < nl > import im . actor . core . js . JsMessenger ; < nl > + import im . actor . core . js . entity . JsCall ; < nl > import im . actor . core . js . entity . JsContact ; < nl > import im . actor . core . js . entity . JsCounter ; < nl > import im . actor . core . js . entity . JsDialog ; < nl > import im . actor . core . js . entity . JsDialogGroup ; < nl > import im . actor . core . js . entity . JsDialogShort ; < nl > + import im . actor . core . js . entity . JsEventBusCallback ; < nl > import im . actor . core . js . entity . JsGroup ; < nl > import im . actor . core . js . entity . JsMessage ; < nl > import im . actor . core . js . entity . JsOnlineGroup ; < nl > @ @ - 37 , 6 + 41 , 7 @ @ import im . actor . core . js . entity . JsUser ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . Modules ; < nl > import im . actor . core . viewmodel . AppStateVM ; < nl > + import im . actor . core . viewmodel . CallModel ; < nl > import im . actor . core . viewmodel . DialogGroup ; < nl > import im . actor . core . viewmodel . DialogSmall ; < nl > import im . actor . core . viewmodel . GroupTypingVM ; < nl > @ @ - 55 , 29 + 60 , 50 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > private JsMessenger messenger ; < nl > private JsFilesModule filesModule ; < nl > < nl > - private HashMap < Integer , JsBindedValue < JsUser > > users = new HashMap < Integer , JsBindedValue < JsUser > > ( ) ; < nl > - private HashMap < Integer , JsBindedValue < JsGroup > > groups = new HashMap < Integer , JsBindedValue < JsGroup > > ( ) ; < nl > - private HashMap < Integer , JsBindedValue < JsOnlineUser > > usersOnlines = new HashMap < Integer , JsBindedValue < JsOnlineUser > > ( ) ; < nl > - private HashMap < Integer , JsBindedValue < JsOnlineGroup > > groupOnlines = new HashMap < Integer , JsBindedValue < JsOnlineGroup > > ( ) ; < nl > - private HashMap < Peer , JsBindedValue < JsTyping > > typing = new HashMap < Peer , JsBindedValue < JsTyping > > ( ) ; < nl > + private HashMap < Integer , JsBindedValue < JsUser > > users = new HashMap < > ( ) ; < nl > + private HashMap < Integer , JsBindedValue < JsGroup > > groups = new HashMap < > ( ) ; < nl > + private HashMap < Integer , JsBindedValue < JsOnlineUser > > usersOnlines = new HashMap < > ( ) ; < nl > + private HashMap < Integer , JsBindedValue < JsOnlineGroup > > groupOnlines = new HashMap < > ( ) ; < nl > + private HashMap < Peer , JsBindedValue < JsTyping > > typing = new HashMap < > ( ) ; < nl > private JsBindedValue < String > onlineState ; < nl > < nl > private JsDisplayList < JsDialog , Dialog > dialogsList ; < nl > private JsDisplayList < JsContact , Contact > contactsList ; < nl > private JsDisplayList < JsSearchEntity , SearchEntity > searchList ; < nl > - private HashMap < Peer , JsDisplayList < JsMessage , Message > > messageLists = new HashMap < Peer , JsDisplayList < JsMessage , Message > > ( ) ; < nl > + private HashMap < Peer , JsDisplayList < JsMessage , Message > > messageLists = new HashMap < > ( ) ; < nl > < nl > private JsBindedValue < JsCounter > globalCounter ; < nl > private JsBindedValue < JsCounter > tempGlobalCounter ; < nl > < nl > private JsBindedValue < JsArray < JsDialogGroup > > dialogsGroupedList ; < nl > < nl > + private HashMap < String , JsBindedValue < JsCall > > calls = new HashMap < > ( ) ; < nl > + < nl > + private ArrayList < JsEventBusCallback > eventBusCallbacks = new ArrayList < > ( ) ; < nl > + < nl > public JsBindingModule ( JsMessenger messenger , JsFilesModule filesModule , Modules modules ) { < nl > super ( modules ) ; < nl > < nl > this . filesModule = filesModule ; < nl > this . messenger = messenger ; < nl > this . filesModule . registerListener ( this ) ; < nl > + < nl > + } < nl > + < nl > + public void broadcastEvent ( String tag , JavaScriptObject obj ) { < nl > + for ( JsEventBusCallback c : eventBusCallbacks ) { < nl > + c . onEvent ( tag , obj ) ; < nl > + } < nl > + } < nl > + < nl > + public void subscribeEventBus ( JsEventBusCallback callback ) { < nl > + if ( ! eventBusCallbacks . contains ( callback ) ) { < nl > + eventBusCallbacks . add ( callback ) ; < nl > + } < nl > + } < nl > + < nl > + public void unsubscribeEventBus ( JsEventBusCallback callback ) { < nl > + eventBusCallbacks . remove ( callback ) ; < nl > } < nl > < nl > public JsBindedValue < JsArray < JsDialogGroup > > getDialogsGroupedList ( ) { < nl > @ @ - 243 , 6 + 269 , 33 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > return groupOnlines . get ( gid ) ; < nl > } < nl > < nl > + public JsBindedValue < JsCall > getCall ( String id ) { < nl > + if ( ! calls . containsKey ( id ) ) { < nl > + final CallModel callModel = messenger . getCall ( Long . parseLong ( id ) ) ; < nl > + final JsBindedValue < JsCall > jsCall = new JsBindedValue < > ( JsCall . create ( messenger , callModel ) ) ; < nl > + callModel . getState ( ) . subscribe ( new ValueChangedListener < CallState > ( ) { < nl > + @ Override < nl > + public void onChanged ( CallState val , Value < CallState > valueModel ) { < nl > + jsCall . changeValue ( JsCall . create ( messenger , callModel ) ) ; < nl > + } < nl > + } ) ; < nl > + callModel . getActiveMembers ( ) . subscribe ( new ValueChangedListener < ArrayList < Integer > > ( ) { < nl > + @ Override < nl > + public void onChanged ( ArrayList < Integer > val , Value < ArrayList < Integer > > valueModel ) { < nl > + jsCall . changeValue ( JsCall . create ( messenger , callModel ) ) ; < nl > + } < nl > + } ) ; < nl > + callModel . getCallStarted ( ) . subscribe ( new ValueChangedListener < Long > ( ) { < nl > + @ Override < nl > + public void onChanged ( Long val , Value < Long > valueModel ) { < nl > + jsCall . changeValue ( JsCall . create ( messenger , callModel ) ) ; < nl > + } < nl > + } ) ; < nl > + calls . put ( id , jsCall ) ; < nl > + } < nl > + return calls . get ( id ) ; < nl > + } < nl > + < nl > public JsBindedValue < JsTyping > getTyping ( final Peer peer ) { < nl > if ( ! typing . containsKey ( peer ) ) { < nl > if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > @ @ - 407 , 7 + 460 , 7 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > / / < nl > < nl > for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { < nl > - for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { < nl > + for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { < nl > b . startReconverting ( ) ; < nl > for ( Message message : b . getRawItems ( ) ) { < nl > UserVM user = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( message . getSenderId ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > index 4dd1081 . . 510dfcd 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > @ @ - 1 , 7 + 1 , 10 @ @ < nl > package im . actor . core . js . providers ; < nl > < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > import com . google . gwt . core . client . JsArray ; < nl > < nl > + import im . actor . core . Messenger ; < nl > + import im . actor . core . js . JsMessenger ; < nl > import im . actor . core . js . modules . JsScheduller ; < nl > import im . actor . core . js . providers . webrtc . JsAudio ; < nl > import im . actor . core . js . providers . webrtc . JsIceServer ; < nl > @ @ - 24 , 6 + 27 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { < nl > private static final String TAG = " JsWebRTCProvider " ; < nl > < nl > private WebRTCController controller ; < nl > + private JsMessenger messenger ; < nl > private JsPeerConnection peerConnection ; < nl > private JsAudio voicePlayback ; < nl > private JsMediaStream voiceCapture ; < nl > @ @ - 31 , 20 + 35 , 29 @ @ public class JsWebRTCProvider implements WebRTCProvider { < nl > private long runningCallId ; < nl > < nl > @ Override < nl > - public void init ( WebRTCController controller ) { < nl > + public void init ( Messenger messenger , WebRTCController controller ) { < nl > this . controller = controller ; < nl > + this . messenger = ( JsMessenger ) messenger ; < nl > } < nl > < nl > @ Override < nl > - public void onIncomingCall ( final long callId ) { < nl > + public void onIncomingCall ( long callId ) { < nl > runningCallId = callId ; < nl > + < nl > + messenger . broadcastEvent ( " call " , callEvent ( " " + callId , " incoming " ) ) ; < nl > } < nl > < nl > @ Override < nl > public void onOutgoingCall ( long callId ) { < nl > runningCallId = callId ; < nl > + < nl > + messenger . broadcastEvent ( " call " , callEvent ( " " + callId , " outgoing " ) ) ; < nl > } < nl > < nl > + private final native JavaScriptObject callEvent ( String id , String type ) / * - { < nl > + return { id : id , type : type } ; < nl > + } - * / ; < nl > + < nl > private void createPeerConnection ( final long callId ) { < nl > JsArray < JsIceServer > servers = JsArray . createArray ( ) . cast ( ) ; < nl > servers . push ( JsIceServer . create ( " stun : 62 . 4 . 22 . 219 : 3478 " ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index f2465a0 . . 7677751 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 49 , 6 + 49 , 7 @ @ import im . actor . core . network . NetworkState ; < nl > import im . actor . core . util . ActorTrace ; < nl > import im . actor . core . util . Timing ; < nl > import im . actor . core . viewmodel . AppStateVM ; < nl > + import im . actor . core . viewmodel . CallModel ; < nl > import im . actor . core . viewmodel . Command ; < nl > import im . actor . core . viewmodel . ConversationVM ; < nl > import im . actor . core . viewmodel . DialogGroupsVM ; < nl > @ @ - 1005 , 6 + 1006 , 37 @ @ public class Messenger { < nl > return modules . getCallsModule ( ) . makeCall ( uid ) ; < nl > } < nl > < nl > + / * * < nl > + * Ending call by call id < nl > + * < nl > + * @ param callId Call id < nl > + * / < nl > + @ ObjectiveCName ( " endCallWithCallId : " ) < nl > + public void endCall ( long callId ) { < nl > + modules . getCallsModule ( ) . endCall ( callId ) ; < nl > + } < nl > + < nl > + / * * < nl > + * Answer call by call id < nl > + * < nl > + * @ param callId Call id < nl > + * / < nl > + @ ObjectiveCName ( " answerCallWithCallId : " ) < nl > + public void answerCall ( long callId ) { < nl > + modules . getCallsModule ( ) . answerCall ( callId ) ; < nl > + } < nl > + < nl > + / * * < nl > + * Get Call View Model by call id < nl > + * < nl > + * @ param callId Call id < nl > + * @ return Call view model < nl > + * / < nl > + @ ObjectiveCName ( " getCallWithCallId : " ) < nl > + public CallModel getCall ( long callId ) { < nl > + return modules . getCallsModule ( ) . getCall ( callId ) ; < nl > + } < nl > + < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Peer operations < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / CallState . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / CallState . java < nl > index d72fdae . . c294e56 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / CallState . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / CallState . java < nl > @ @ - 1 , 5 + 1 , 5 @ @ < nl > package im . actor . core . entity ; < nl > < nl > public enum CallState { < nl > - CALLING , IN _ PROGRESS , ENDED < nl > + CALLING _ OUTGOING , CALLING _ INCOMING , IN _ PROGRESS , ENDED < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > index 1e175b5 . . 83d0bbc 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 8 , 6 + 8 , 7 @ @ import im . actor . core . api . rpc . RequestEndCall ; < nl > import im . actor . core . api . rpc . RequestSendCallSignal ; < nl > import im . actor . core . api . rpc . RequestSubscribeToCalls ; < nl > import im . actor . core . api . rpc . ResponseVoid ; < nl > + import im . actor . core . entity . CallState ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . signals . AbsSignal ; < nl > import im . actor . core . entity . signals . AnswerSignal ; < nl > @ @ - 18 , 9 + 19 , 8 @ @ import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > import im . actor . core . util . ModuleActor ; < nl > - import im . actor . core . viewmodel . UserVM ; < nl > import im . actor . core . webrtc . WebRTCProvider ; < nl > - import im . actor . runtime . Log ; < nl > + import im . actor . runtime . * ; < nl > import im . actor . runtime . eventbus . Event ; < nl > import im . actor . runtime . function . Constructor ; < nl > < nl > @ @ - 64 , 7 + 64 , 7 @ @ public class CallManagerActor extends ModuleActor { < nl > < nl > webRTCController = new WebRTCControllerImpl ( self ( ) ) ; < nl > provider = config ( ) . getWebRTCProvider ( ) ; < nl > - provider . init ( webRTCController ) ; < nl > + provider . init ( context ( ) . getMessenger ( ) , webRTCController ) ; < nl > } < nl > < nl > < nl > @ @ - 84 , 7 + 84 , 11 @ @ public class CallManagerActor extends ModuleActor { < nl > isOfferRequested = true ; / / No outgoing offer needed for ingoing call < nl > isOfferReceived = false ; < nl > isAnswerReceived = true ; / / No incoming answers needed for ingoing call < nl > - provider . onIncomingCall ( callId , Peer . user ( uid ) , new UserVM [ ] { getUserVM ( uid ) } ) ; < nl > + ArrayList < Integer > members = new ArrayList < > ( ) ; < nl > + members . add ( myUid ( ) ) ; < nl > + members . add ( uid ) ; < nl > + context ( ) . getCallsModule ( ) . spawnNewModel ( callId , Peer . user ( uid ) , members , CallState . CALLING _ INCOMING ) ; < nl > + provider . onIncomingCall ( callId ) ; < nl > } < nl > } < nl > < nl > @ @ - 100 , 7 + 104 , 11 @ @ public class CallManagerActor extends ModuleActor { < nl > isOfferRequested = false ; < nl > isOfferReceived = true ; / / No offers needed for outgoing call < nl > isAnswerReceived = false ; < nl > - provider . onOutgoingCall ( callId , Peer . user ( uid ) , new UserVM [ ] { getUserVM ( uid ) } ) ; < nl > + ArrayList < Integer > members = new ArrayList < > ( ) ; < nl > + members . add ( myUid ( ) ) ; < nl > + members . add ( uid ) ; < nl > + context ( ) . getCallsModule ( ) . spawnNewModel ( callId , Peer . user ( uid ) , members , CallState . CALLING _ OUTGOING ) ; < nl > + provider . onOutgoingCall ( callId ) ; < nl > } < nl > } < nl > < nl > @ @ - 162 , 6 + 170 , 8 @ @ public class CallManagerActor extends ModuleActor { < nl > OfferSignal offer = ( OfferSignal ) signal ; < nl > if ( ! isOfferReceived ) { < nl > isOfferReceived = true ; < nl > + context ( ) . getCallsModule ( ) . getCall ( callId ) . getCallStarted ( ) . change ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; < nl > + context ( ) . getCallsModule ( ) . getCall ( callId ) . getState ( ) . change ( CallState . IN _ PROGRESS ) ; < nl > provider . onOfferReceived ( callId , offer . getSdp ( ) ) ; < nl > } < nl > } else if ( signal instanceof AnswerSignal ) { < nl > @ @ - 202 , 9 + 212 , 12 @ @ public class CallManagerActor extends ModuleActor { < nl > if ( webRTCController . getCallId ( ) = = callId ) { < nl > if ( ! isOfferRequested ) { < nl > isOfferRequested = true ; < nl > + context ( ) . getCallsModule ( ) . getCall ( callId ) . getCallStarted ( ) . change ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; < nl > + context ( ) . getCallsModule ( ) . getCall ( callId ) . getState ( ) . change ( CallState . IN _ PROGRESS ) ; < nl > provider . onOfferNeeded ( callId ) ; < nl > } < nl > < nl > + < nl > / / TODO : Auto kill call on timeout < nl > } < nl > } < nl > @ @ - 234 , 6 + 247 , 7 @ @ public class CallManagerActor extends ModuleActor { < nl > context ( ) . getActorApi ( ) . cancelRequest ( r ) ; < nl > } < nl > pendingRequests . clear ( ) ; < nl > + context ( ) . getCallsModule ( ) . getCall ( callId ) . getState ( ) . change ( CallState . ENDED ) ; < nl > } < nl > } < nl > < nl > @ @ - 439 , 18 + 453 , 6 @ @ public class CallManagerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class MediaStreamsReady { < nl > - private long callid ; < nl > - < nl > - public MediaStreamsReady ( long callid ) { < nl > - this . callid = callid ; < nl > - } < nl > - < nl > - public long getCallid ( ) { < nl > - return callid ; < nl > - } < nl > - } < nl > - < nl > private static class DoKeepAlive { < nl > private long callId ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > index b22d13f . . c275fbf 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > @ @ - 1 , 11 + 1 , 17 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > + import java . util . ArrayList ; < nl > + import java . util . HashMap ; < nl > + < nl > import im . actor . core . api . ApiOutPeer ; < nl > import im . actor . core . api . ApiPeerType ; < nl > import im . actor . core . api . rpc . RequestDoCall ; < nl > + import im . actor . core . entity . CallState ; < nl > + import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . User ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > + import im . actor . core . viewmodel . CallModel ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . core . webrtc . WebRTCProvider ; < nl > import im . actor . core . api . rpc . ResponseDoCall ; < nl > @ @ - 24 , 6 + 30 , 7 @ @ public class CallsModule extends AbsModule { < nl > < nl > private WebRTCProvider provider ; < nl > private ActorRef callManager ; < nl > + private HashMap < Long , CallModel > callModels = new HashMap < > ( ) ; < nl > < nl > public CallsModule ( ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 39 , 6 + 46 , 14 @ @ public class CallsModule extends AbsModule { < nl > callManager = system ( ) . actorOf ( " calls / manager " , CallManagerActor . CONSTRUCTOR ( context ( ) ) ) ; < nl > } < nl > < nl > + public void spawnNewModel ( long id , Peer peer , ArrayList < Integer > activeMembers , CallState state ) { < nl > + callModels . put ( id , new CallModel ( id , peer , activeMembers , state ) ) ; < nl > + } < nl > + < nl > + public CallModel getCall ( long id ) { < nl > + return callModels . get ( id ) ; < nl > + } < nl > + < nl > public ActorRef getCallManager ( ) { < nl > return callManager ; < nl > } < nl > @ @ - 63 , 4 + 78 , 12 @ @ public class CallsModule extends AbsModule { < nl > } < nl > } ; < nl > } < nl > + < nl > + public void endCall ( long callId ) { < nl > + callManager . send ( new CallManagerActor . EndCall ( callId ) ) ; < nl > + } < nl > + < nl > + public void answerCall ( long callId ) { < nl > + callManager . send ( new CallManagerActor . AnswerCall ( callId ) ) ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallModel . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallModel . java < nl > new file mode 100644 < nl > index 0000000 . . e5a37f0 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallModel . java < nl > @ @ - 0 , 0 + 1 , 44 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . entity . CallState ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . runtime . mvvm . ValueModel ; < nl > + < nl > + public class CallModel { < nl > + < nl > + private final long callId ; < nl > + private final Peer peer ; < nl > + private final ValueModel < CallState > state ; < nl > + private final ValueModel < Long > callStarted ; < nl > + private final ValueModel < ArrayList < Integer > > activeMembers ; < nl > + < nl > + public CallModel ( long callId , Peer peer , ArrayList < Integer > activeMembers , CallState state ) { < nl > + this . callId = callId ; < nl > + this . peer = peer ; < nl > + this . state = new ValueModel < > ( " calls . " + callId + " . state " , state ) ; < nl > + this . callStarted = new ValueModel < > ( " calls . " + callId + " . started " , null ) ; < nl > + this . activeMembers = new ValueModel < > ( " calls . " + callId + " . members " , new ArrayList < > ( activeMembers ) ) ; < nl > + } < nl > + < nl > + public long getCallId ( ) { < nl > + return callId ; < nl > + } < nl > + < nl > + public ValueModel < CallState > getState ( ) { < nl > + return state ; < nl > + } < nl > + < nl > + public ValueModel < Long > getCallStarted ( ) { < nl > + return callStarted ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public ValueModel < ArrayList < Integer > > getActiveMembers ( ) { < nl > + return activeMembers ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallViewModel . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallViewModel . java < nl > deleted file mode 100644 < nl > index 6aca143 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallViewModel . java < nl > + + + / dev / null < nl > @ @ - 1 , 29 + 0 , 0 @ @ < nl > - package im . actor . core . viewmodel ; < nl > - < nl > - import im . actor . core . entity . CallState ; < nl > - import im . actor . runtime . mvvm . ValueModel ; < nl > - < nl > - public class CallViewModel { < nl > - < nl > - private long callId ; < nl > - private ValueModel < CallState > state ; < nl > - private ValueModel < Long > callStarted ; < nl > - < nl > - public CallViewModel ( long callId , CallState state ) { < nl > - this . callId = callId ; < nl > - this . state = new ValueModel < > ( " calls . " + callId + " . state " , state ) ; < nl > - this . callStarted = new ValueModel < > ( " calls . " + callId + " . started " , null ) ; < nl > - } < nl > - < nl > - public long getCallId ( ) { < nl > - return callId ; < nl > - } < nl > - < nl > - public ValueModel < CallState > getState ( ) { < nl > - return state ; < nl > - } < nl > - < nl > - public ValueModel < Long > getCallStarted ( ) { < nl > - return callStarted ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / webrtc / WebRTCProvider . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / webrtc / WebRTCProvider . java < nl > index 3ac073b . . f50b6a3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / webrtc / WebRTCProvider . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / webrtc / WebRTCProvider . java < nl > @ @ - 1 , 7 + 1 , 6 @ @ < nl > package im . actor . core . webrtc ; < nl > < nl > - import im . actor . core . entity . Peer ; < nl > - import im . actor . core . viewmodel . UserVM ; < nl > + import im . actor . core . Messenger ; < nl > < nl > / * * < nl > * WebRTC provider . Used for providing Calls support . < nl > @ @ - 14 , 9 + 13 , 10 @ @ public interface WebRTCProvider { < nl > / * * < nl > * Init WebRTC provider < nl > * < nl > + * @ param messenger Messenger < nl > * @ param controller controller < nl > * / < nl > - void init ( WebRTCController controller ) ; < nl > + void init ( Messenger messenger , WebRTCController controller ) ; < nl > < nl > / * * < nl > * Incoming Call event . To answer call invoke controller . answerCall ( ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsClosure . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsClosure . java < nl > index 3a4a0fa . . 411b668 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsClosure . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsClosure . java < nl > @ @ - 4 , 13 + 4 , 6 @ @ < nl > < nl > package im . actor . core . js . entity ; < nl > < nl > - < nl > - import org . timepedia . exporter . client . Export ; < nl > - import org . timepedia . exporter . client . ExportClosure ; < nl > - import org . timepedia . exporter . client . Exportable ; < nl > - < nl > - @ Export < nl > - @ ExportClosure < nl > - public interface JsClosure extends Exportable { < nl > + public interface JsClosure { < nl > void callback ( ) ; < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsClosureError . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsClosureError . java < nl > new file mode 100644 < nl > index 0000000 . . 9a50080 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsClosureError . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public interface JsClosureError { < nl > + void onError ( JavaScriptObject error ) ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > index 2f01f33 . . c1e728f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > @ @ - 1 , 31 + 1 , 107 @ @ < nl > package im . actor . core . js . providers ; < nl > < nl > import im . actor . core . WebRTCProvider ; < nl > + import im . actor . core . entity . signals . AbsSignal ; < nl > + import im . actor . core . entity . signals . AnswerSignal ; < nl > + import im . actor . core . entity . signals . CandidateSignal ; < nl > + import im . actor . core . entity . signals . OfferSignal ; < nl > + import im . actor . core . js . JsMessenger ; < nl > + import im . actor . core . js . providers . webrtc . JsPeerConnection ; < nl > + import im . actor . core . js . providers . webrtc . JsPeerConnectionListener ; < nl > + import im . actor . core . js . providers . webrtc . JsSessionDescription ; < nl > + import im . actor . core . js . providers . webrtc . JsStreaming ; < nl > + import im . actor . core . js . providers . webrtc . JsUserMediaStream ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . function . Consumer ; < nl > < nl > public class JsWebRTCProvider implements WebRTCProvider { < nl > < nl > + private static final String TAG = " JsWebRTCProvider " ; < nl > + < nl > + private JsPeerConnection peerConnection ; < nl > + private JsUserMediaStream mediaStream ; < nl > + < nl > @ Override < nl > public void onIncomingCall ( ) { < nl > - < nl > + Log . d ( TAG , " onIncomingCall " ) ; < nl > + JsMessenger . getInstance ( ) . callAnswer ( ) ; < nl > + peerConnection = JsPeerConnection . create ( null ) ; < nl > + peerConnection . setListener ( new JsPeerConnectionListener ( ) { < nl > + @ Override < nl > + public void onIceCandidate ( String candidate ) { < nl > + Log . d ( TAG , " onIceCandidate : " + candidate ) ; < nl > + } < nl > + } ) ; < nl > + JsStreaming . getUserAudio ( ) . then ( new Consumer < JsUserMediaStream > ( ) { < nl > + @ Override < nl > + public void apply ( JsUserMediaStream jsUserMediaStream ) { < nl > + Log . d ( TAG , " Audio is created " ) ; < nl > + peerConnection . setLocalDescription ( JsSessionDescription . create ( jsUserMediaStream ) ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + Log . d ( TAG , " Audio failured " ) ; < nl > + } < nl > + } ) ; < nl > } < nl > < nl > @ Override < nl > public void onOutgoingCall ( ) { < nl > - < nl > + Log . d ( TAG , " onOutgoingCall " ) ; < nl > } < nl > < nl > @ Override < nl > public void onCallStarted ( ) { < nl > - < nl > + Log . d ( TAG , " onCallStarted " ) ; < nl > } < nl > < nl > @ Override < nl > - public void onSignalingReceived ( byte [ ] data ) { < nl > + public void onSignalingReceived ( AbsSignal signal ) { < nl > + Log . d ( TAG , " onSignalingReceived : " + signal ) ; < nl > + if ( signal instanceof OfferSignal ) { < nl > + String sdp = ( ( OfferSignal ) signal ) . getSdp ( ) ; < nl > + JsSessionDescription description = JsSessionDescription . createOffer ( sdp ) ; < nl > + peerConnection . setRemoteDescription ( description ) . then ( new Consumer < String > ( ) { < nl > + @ Override < nl > + public void apply ( String s ) { < nl > + Log . d ( TAG , " Description set " ) ; < nl > + peerConnection . createAnswer ( ) . then ( new Consumer < JsSessionDescription > ( ) { < nl > + @ Override < nl > + public void apply ( JsSessionDescription jsSessionDescription ) { < nl > + Log . d ( TAG , " Session desc : " + jsSessionDescription ) ; < nl > + JsMessenger . getInstance ( ) . callSendSignaling ( new AnswerSignal ( jsSessionDescription . getSDP ( ) ) ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + Log . d ( TAG , " Description desc error " ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + Log . d ( TAG , " Description error " ) ; < nl > + } < nl > + } ) ; < nl > < nl > + } else if ( signal instanceof CandidateSignal ) { < nl > + CandidateSignal candidateSignal = ( CandidateSignal ) signal ; < nl > + try { < nl > + peerConnection . addIceCandidate ( candidateSignal . getLabel ( ) , candidateSignal . getSdp ( ) ) ; < nl > + } catch ( Exception e ) { < nl > + Log . e ( TAG , e ) ; < nl > + } < nl > + } < nl > } < nl > < nl > @ Override < nl > public void onCallEnded ( ) { < nl > + Log . d ( TAG , " onCallEnded " ) ; < nl > < nl > + / / TODO : Close < nl > + peerConnection = null ; < nl > + mediaStream = null ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java < nl > index ccee846 . . 34f9f9c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java < nl > @ @ - 2 , 6 + 2 , 8 @ @ package im . actor . core . js . providers . webrtc ; < nl > < nl > import com . google . gwt . core . client . JavaScriptObject ; < nl > < nl > + import im . actor . core . js . entity . JsClosure ; < nl > + import im . actor . core . js . entity . JsClosureError ; < nl > import im . actor . core . js . modules . JsScheduller ; < nl > import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . promise . PromiseFunc ; < nl > @ @ - 10 , 7 + 12 , 7 @ @ import im . actor . runtime . promise . PromiseResolver ; < nl > public class JsPeerConnection extends JavaScriptObject { < nl > < nl > public static native JsPeerConnection create ( JsPeerConnectionConfig config ) / * - { < nl > - return { peerConnection : new webkitRTCPeerConnection ( config ) } ; < nl > + return { peerConnection : new webkitRTCPeerConnection ( config , { optional : [ { DtlsSrtpKeyAgreement : true } ] } ) } ; < nl > } - * / ; < nl > < nl > protected JsPeerConnection ( ) { < nl > @ @ - 27 , 8 + 29 , 27 @ @ public class JsPeerConnection extends JavaScriptObject { < nl > this . peerConnection . setLocalDescription ( description ) ; < nl > } - * / ; < nl > < nl > - public final native void setRemoteDescription ( JsSessionDescription description ) / * - { < nl > - this . peerConnection . setRemoteDescription ( description ) ; < nl > + public final Promise < String > setRemoteDescription ( final JsSessionDescription description ) { < nl > + return new Promise < > ( new PromiseFunc < String > ( ) { < nl > + @ Override < nl > + public void exec ( final PromiseResolver < String > resolver ) { < nl > + setRemoteDescription ( description , new JsClosure ( ) { < nl > + @ Override < nl > + public void callback ( ) { < nl > + resolver . result ( null ) ; < nl > + } < nl > + } , new JsClosureError ( ) { < nl > + @ Override < nl > + public void onError ( JavaScriptObject error ) { < nl > + resolver . error ( new RuntimeException ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) . done ( JsScheduller . scheduller ( ) ) ; < nl > + } < nl > + < nl > + public final native void addIceCandidate ( int label , String candidate ) / * - { < nl > + this . peerConnection . addIceCandidate ( new RTCIceCandidate ( { sdpMLineIndex : label , candidate : candidate } ) ) ; < nl > } - * / ; < nl > < nl > public final Promise < JsSessionDescription > createOffer ( ) { < nl > @ @ - 50 , 11 + 71 , 50 @ @ public class JsPeerConnection extends JavaScriptObject { < nl > } ) . done ( JsScheduller . scheduller ( ) ) ; < nl > } < nl > < nl > + public final Promise < JsSessionDescription > createAnswer ( ) { < nl > + return new Promise < > ( new PromiseFunc < JsSessionDescription > ( ) { < nl > + @ Override < nl > + public void exec ( final PromiseResolver < JsSessionDescription > resolver ) { < nl > + createAnswer ( new JsSessionDescriptionCallback ( ) { < nl > + @ Override < nl > + public void onOfferCreated ( JsSessionDescription offer ) { < nl > + resolver . result ( offer ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onOfferFailure ( ) { < nl > + resolver . error ( new RuntimeException ( " Offer failure " ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) . done ( JsScheduller . scheduller ( ) ) ; < nl > + } < nl > + < nl > private final native void createOffer ( JsSessionDescriptionCallback callback ) / * - { < nl > this . peerConnection . createOffer ( function ( offer ) { < nl > callback . @ im . actor . core . js . providers . webrtc . JsSessionDescriptionCallback : : onOfferCreated ( * ) ( offer ) ; < nl > } , function ( error ) { < nl > + $ wnd . console . warn ( error ) ; < nl > + callback . @ im . actor . core . js . providers . webrtc . JsSessionDescriptionCallback : : onOfferFailure ( * ) ( ) ; < nl > + } ) ; < nl > + } - * / ; < nl > + < nl > + private final native void createAnswer ( JsSessionDescriptionCallback callback ) / * - { < nl > + this . peerConnection . createAnswer ( function ( offer ) { < nl > + callback . @ im . actor . core . js . providers . webrtc . JsSessionDescriptionCallback : : onOfferCreated ( * ) ( offer ) ; < nl > + } , function ( error ) { < nl > + $ wnd . console . warn ( error ) ; < nl > callback . @ im . actor . core . js . providers . webrtc . JsSessionDescriptionCallback : : onOfferFailure ( * ) ( ) ; < nl > } ) ; < nl > } - * / ; < nl > + < nl > + < nl > + private final native void setRemoteDescription ( JsSessionDescription description , JsClosure closure , JsClosureError error ) / * - { < nl > + this . peerConnection . setRemoteDescription ( description , function ( ) { < nl > + closure . @ im . actor . core . js . entity . JsClosure : : callback ( * ) ( ) ; < nl > + } , function ( e ) { < nl > + $ wnd . console . warn ( e ) ; < nl > + error . @ im . actor . core . js . entity . JsClosureError : : onError ( * ) ( e ) ; < nl > + } ) ; < nl > + } - * / ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsRTCIceCandidate . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsRTCIceCandidate . java < nl > new file mode 100644 < nl > index 0000000 . . 0dd3617 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsRTCIceCandidate . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsRTCIceCandidate extends JavaScriptObject { < nl > + < nl > + public native static JsRTCIceCandidate create ( String candidate ) / * - { < nl > + return new RTCIceCandidate ( candidate ) ; < nl > + } - * / ; < nl > + < nl > + protected JsRTCIceCandidate ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java < nl > index 4154488 . . 7df0909 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java < nl > @ @ - 4 , 6 + 4 , 14 @ @ import com . google . gwt . core . client . JavaScriptObject ; < nl > < nl > public class JsSessionDescription extends JavaScriptObject { < nl > < nl > + public static native JsSessionDescription createOffer ( String sdp ) / * - { < nl > + return new RTCSessionDescription ( { type : ' offer ' , sdp : sdp } ) ; < nl > + } - * / ; < nl > + < nl > + public static native JsSessionDescription create ( JsUserMediaStream stream ) / * - { < nl > + return new RTCSessionDescription ( stream ) ; < nl > + } - * / ; < nl > + < nl > protected JsSessionDescription ( ) { < nl > < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 180a9e6 . . f040452 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 43 , 6 + 43 , 7 @ @ import im . actor . core . events . PeerChatOpened ; < nl > import im . actor . core . events . PeerInfoClosed ; < nl > import im . actor . core . events . PeerInfoOpened ; < nl > import im . actor . core . events . UserVisible ; < nl > + import im . actor . core . modules . calls . CallManagerActor ; < nl > import im . actor . core . modules . calls . CallsModule ; < nl > import im . actor . core . network . NetworkState ; < nl > import im . actor . core . util . ActorTrace ; < nl > @ @ - 1031 , 6 + 1032 , 14 @ @ public class Messenger { < nl > modules . getCallsModule ( ) . sendSignal ( callId , data ) ; < nl > } < nl > < nl > + public void callSendSignaling ( AbsSignal data ) { < nl > + modules . getCallsModule ( ) . getCallManager ( ) . send ( new CallManagerActor . SendSignaling ( data ) ) ; < nl > + } < nl > + < nl > + public void callAnswer ( ) { < nl > + modules . getCallsModule ( ) . getCallManager ( ) . send ( new CallManagerActor . AnswerCall ( ) ) ; < nl > + } < nl > + < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Peer operations < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / WebRTCProvider . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / WebRTCProvider . java < nl > index e278409 . . 200013c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / WebRTCProvider . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / WebRTCProvider . java < nl > @ @ - 1 , 5 + 1 , 7 @ @ < nl > package im . actor . core ; < nl > < nl > + import im . actor . core . entity . signals . AbsSignal ; < nl > + < nl > public interface WebRTCProvider { < nl > < nl > void onIncomingCall ( ) ; < nl > @ @ - 8 , 7 + 10 , 7 @ @ public interface WebRTCProvider { < nl > < nl > void onCallStarted ( ) ; < nl > < nl > - void onSignalingReceived ( byte [ ] data ) ; < nl > + void onSignalingReceived ( AbsSignal signal ) ; < nl > < nl > void onCallEnded ( ) ; < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AbsSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AbsSignal . java < nl > index c78d8fb . . 99de9b6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AbsSignal . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AbsSignal . java < nl > @ @ - 11 , 7 + 11 , 7 @ @ import im . actor . runtime . bser . DataInput ; < nl > < nl > public abstract class AbsSignal extends BserObject { < nl > < nl > - String type ; < nl > + private String type ; < nl > < nl > @ Override < nl > public void parse ( BserValues values ) throws IOException { < nl > @ @ - 27 , 22 + 27 , 19 @ @ public abstract class AbsSignal extends BserObject { < nl > < nl > public static AbsSignal fromBytes ( byte [ ] data ) { < nl > try { < nl > - < nl > - AbsSignal res = null ; < nl > BserValues values = new BserValues ( BserParser . deserialize ( new DataInput ( data , 0 , data . length ) ) ) ; < nl > - if ( values . getString ( 1 ) . equals ( new OfferSignal ( ) . getType ( ) ) ) { < nl > + String type = values . getString ( 1 ) ; < nl > + AbsSignal res ; < nl > + if ( OfferSignal . TYPE . equals ( type ) ) { < nl > res = new OfferSignal ( ) ; < nl > - } else if ( values . getString ( 1 ) . equals ( new AnswerSignal ( ) . getType ( ) ) ) { < nl > + } else if ( AnswerSignal . TYPE . equals ( type ) ) { < nl > res = new AnswerSignal ( ) ; < nl > - } else if ( values . getString ( 1 ) . equals ( new CandidateSignal ( ) . getType ( ) ) ) { < nl > + } else if ( CandidateSignal . TYPE . equals ( type ) ) { < nl > res = new CandidateSignal ( ) ; < nl > - } < nl > - < nl > - if ( res ! = null ) { < nl > - res . parse ( values ) ; < nl > } else { < nl > - Log . w ( " Signaling parser " , " unknown signal " ) ; < nl > + throw new IOException ( " Unknown signal type " + type ) ; < nl > } < nl > + res . parse ( values ) ; < nl > return res ; < nl > } catch ( IOException e ) { < nl > return null ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AnswerSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AnswerSignal . java < nl > index 9baf5de . . 2cc526c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AnswerSignal . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AnswerSignal . java < nl > @ @ - 5 , 11 + 5 , 10 @ @ import java . io . IOException ; < nl > import im . actor . runtime . bser . BserValues ; < nl > import im . actor . runtime . bser . BserWriter ; < nl > < nl > - / * * < nl > - * Created by root on 1 / 15 / 16 . < nl > - * / < nl > public class AnswerSignal extends AbsSignal { < nl > < nl > + public static final String TYPE = " answer " ; < nl > + < nl > private String sdp ; < nl > < nl > public AnswerSignal ( String sdp ) { < nl > @ @ - 35 , 6 + 34 , 11 @ @ public class AnswerSignal extends AbsSignal { < nl > < nl > @ Override < nl > public String getType ( ) { < nl > - return " answer " ; < nl > + return TYPE ; < nl > + } < nl > + < nl > + @ Override < nl > + public String toString ( ) { < nl > + return " { type : " + TYPE + " , sdp : " + sdp + " } " ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / CandidateSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / CandidateSignal . java < nl > index bd82885 . . 1b13e43 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / CandidateSignal . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / CandidateSignal . java < nl > @ @ - 7 , 6 + 7 , 8 @ @ import im . actor . runtime . bser . BserWriter ; < nl > < nl > public class CandidateSignal extends AbsSignal { < nl > < nl > + public static final String TYPE = " candidate " ; < nl > + < nl > private String sdp ; < nl > private int label ; < nl > private String id ; < nl > @ @ - 19 , 6 + 21 , 7 @ @ public class CandidateSignal extends AbsSignal { < nl > } < nl > < nl > public CandidateSignal ( ) { < nl > + < nl > } < nl > < nl > public String getSdp ( ) { < nl > @ @ - 49 , 6 + 52 , 11 @ @ public class CandidateSignal extends AbsSignal { < nl > < nl > @ Override < nl > public String getType ( ) { < nl > - return " candidate " ; < nl > + return TYPE ; < nl > + } < nl > + < nl > + @ Override < nl > + public String toString ( ) { < nl > + return " { type : " + TYPE + " , id : " + id + " , label : " + label + " sdp : " + sdp + " } " ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / OfferSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / OfferSignal . java < nl > index f4cd4f2 . . 456ad69 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / OfferSignal . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / OfferSignal . java < nl > @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . runtime . bser . BserWriter ; < nl > < nl > public class OfferSignal extends AbsSignal { < nl > < nl > + public static final String TYPE = " OFFER " ; < nl > < nl > private String sdp ; < nl > < nl > @ @ - 15 , 8 + 16 , 8 @ @ public class OfferSignal extends AbsSignal { < nl > } < nl > < nl > public OfferSignal ( ) { < nl > - } < nl > < nl > + } < nl > < nl > public String getSdp ( ) { < nl > return sdp ; < nl > @ @ - 34 , 6 + 35 , 11 @ @ public class OfferSignal extends AbsSignal { < nl > < nl > @ Override < nl > public String getType ( ) { < nl > - return " OFFER " ; < nl > + return TYPE ; < nl > + } < nl > + < nl > + @ Override < nl > + public String toString ( ) { < nl > + return " { type : " + TYPE + " , sdp : " + sdp + " } " ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index c5f0055 . . 0df9b8b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 15 , 7 + 15 , 7 @ @ public class CallActor extends ModuleActor { < nl > private boolean alive = false ; < nl > private long callId ; < nl > private CallsModule . CallCallback callback ; < nl > - private ArrayList < byte [ ] > signals = new ArrayList < byte [ ] > ( ) ; < nl > + private ArrayList < byte [ ] > signals = new ArrayList < > ( ) ; < nl > < nl > public CallActor ( long callId , ModuleContext context ) { < nl > super ( context ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > index e496823 . . df83bde 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 1 , 6 + 1 , 9 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > + import im . actor . core . api . rpc . RequestCallInProgress ; < nl > + import im . actor . core . api . rpc . RequestSendCallSignal ; < nl > import im . actor . core . api . rpc . RequestSubscribeToCalls ; < nl > + import im . actor . core . entity . signals . AbsSignal ; < nl > import im . actor . core . events . NewSessionCreated ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . util . ModuleActor ; < nl > @ @ - 20 , 8 + 23 , 12 @ @ public class CallManagerActor extends ModuleActor { < nl > } < nl > < nl > private static final String TAG = " CallManagerActor " ; < nl > + private static final int IN _ PROGRESS _ TIMEOUT = 15000 ; < nl > < nl > private long subscribeRequest = - 1 ; < nl > + private long progressRequest = - 1 ; < nl > + < nl > + private long runningCallId = - 1 ; < nl > < nl > public CallManagerActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 36 , 10 + 43 , 41 @ @ public class CallManagerActor extends ModuleActor { < nl > < nl > private void onIncomingCall ( long callId , int uid ) { < nl > Log . d ( TAG , " onIncomingCall ( " + callId + " , " + uid + " ) " ) ; < nl > + if ( runningCallId ! = - 1 ) { < nl > + return ; < nl > + } < nl > + runningCallId = callId ; < nl > + config ( ) . getWebRTCProvider ( ) . onIncomingCall ( ) ; < nl > + } < nl > + < nl > + private void onAnswerCall ( ) { < nl > + Log . d ( TAG , " onAnswerCall " ) ; < nl > + if ( runningCallId = = - 1 ) { < nl > + return ; < nl > + } < nl > + < nl > + progressRequest = request ( new RequestCallInProgress ( runningCallId , IN _ PROGRESS _ TIMEOUT ) ) ; < nl > } < nl > < nl > private void onSignaling ( long callId , byte [ ] message ) { < nl > Log . d ( TAG , " onSignaling ( " + callId + " ) " ) ; < nl > + if ( runningCallId ! = callId ) { < nl > + return ; < nl > + } < nl > + < nl > + AbsSignal signal = AbsSignal . fromBytes ( message ) ; < nl > + if ( signal ! = null ) { < nl > + config ( ) . getWebRTCProvider ( ) . onSignalingReceived ( signal ) ; < nl > + } < nl > + } < nl > + < nl > + private void onSendSignal ( AbsSignal signal ) { < nl > + Log . d ( TAG , " onSendSignal : " + signal ) ; < nl > + if ( runningCallId = = - 1 ) { < nl > + return ; < nl > + } < nl > + < nl > + request ( new RequestSendCallSignal ( runningCallId , signal . toByteArray ( ) ) ) ; < nl > } < nl > < nl > private void subscribeForCalls ( ) { < nl > @ @ - 67 , 6 + 105 , 10 @ @ public class CallManagerActor extends ModuleActor { < nl > } else if ( message instanceof OnSignaling ) { < nl > OnSignaling signaling = ( OnSignaling ) message ; < nl > onSignaling ( signaling . getCallId ( ) , signaling . getMessage ( ) ) ; < nl > + } else if ( message instanceof AnswerCall ) { < nl > + onAnswerCall ( ) ; < nl > + } else if ( message instanceof SendSignaling ) { < nl > + onSendSignal ( ( ( SendSignaling ) message ) . getSignal ( ) ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > @ @ - 108 , 4 + 150 , 21 @ @ public class CallManagerActor extends ModuleActor { < nl > return message ; < nl > } < nl > } < nl > + < nl > + public static class AnswerCall { < nl > + < nl > + } < nl > + < nl > + public static class SendSignaling { < nl > + < nl > + private AbsSignal signal ; < nl > + < nl > + public SendSignaling ( AbsSignal signal ) { < nl > + this . signal = signal ; < nl > + } < nl > + < nl > + public AbsSignal getSignal ( ) { < nl > + return signal ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java < nl > index 027b5ac . . 5941ae3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > + import im . actor . core . api . updates . UpdateCallEnded ; < nl > import im . actor . core . api . updates . UpdateCallSignal ; < nl > import im . actor . core . api . updates . UpdateIncomingCall ; < nl > import im . actor . core . modules . ModuleContext ; < nl > @ @ - 27 , 6 + 28 , 11 @ @ public class CallsProcessor implements Processor { < nl > new CallManagerActor . OnSignaling ( < nl > updateCallSignal . getCallId ( ) , < nl > updateCallSignal . getContent ( ) ) ) ; < nl > + return true ; < nl > + } else if ( update instanceof UpdateCallEnded ) { < nl > + UpdateCallEnded callEnded = ( UpdateCallEnded ) update ; < nl > + < nl > + return true ; < nl > } < nl > return false ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index cecfeda . . 175e89f 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 623 , 6 + 623 , 40 @ @ public class JsFacade implements Exportable { 
 messenger . getJsGroupOnline ( gid ) . unsubscribe ( callback ) ; 
 } 
 
 + / / Calls 
 + 
 + public void bindCall ( String id , JsBindedValueCallback callback ) { 
 + if ( callback = = null ) { 
 + return ; 
 + } 
 + messenger . getJsCall ( id ) . subscribe ( callback ) ; 
 + } 
 + 
 + public void unbindCall ( String id , JsBindedValueCallback callback ) { 
 + if ( callback = = null ) { 
 + return ; 
 + } 
 + messenger . getJsCall ( id ) . unsubscribe ( callback ) ; 
 + } 
 + 
 + / / Event Bus 
 + 
 + public void bindEventBus ( JsEventBusCallback callback ) { 
 + if ( callback = = null ) { 
 + return ; 
 + } 
 + 
 + messenger . subscribeEventBus ( callback ) ; 
 + } 
 + 
 + public void unbindEventBus ( JsEventBusCallback callback ) { 
 + if ( callback = = null ) { 
 + return ; 
 + } 
 + 
 + messenger . unsubscribeEventBus ( callback ) ; 
 + } 
 + 
 / / Actions 
 
 public void sendMessage ( JsPeer peer , String text ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 index 5a88615 . . 27a49d6 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 @ @ - 4 , 6 + 4 , 7 @ @ 
 
 package im . actor . core . js ; 
 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 import com . google . gwt . core . client . JsArray ; 
 import com . google . gwt . user . client . Event ; 
 
 @ @ - 18 , 8 + 19 , 10 @ @ import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 import im . actor . core . entity . SearchEntity ; 
 import im . actor . core . entity . content . FastThumb ; 
 + import im . actor . core . js . entity . JsCall ; 
 import im . actor . core . js . entity . JsCounter ; 
 import im . actor . core . js . entity . JsDialogGroup ; 
 + import im . actor . core . js . entity . JsEventBusCallback ; 
 import im . actor . core . js . entity . JsOnlineGroup ; 
 import im . actor . core . js . entity . JsOnlineUser ; 
 import im . actor . core . js . entity . JsSearchEntity ; 
 @ @ - 180 , 6 + 183 , 10 @ @ public class JsMessenger extends Messenger { 
 return jsBindingModule . getGroupOnline ( gid ) ; 
 } 
 
 + public JsBindedValue < JsCall > getJsCall ( String id ) { 
 + return jsBindingModule . getCall ( id ) ; 
 + } 
 + 
 public JsBindedValue < JsTyping > getTyping ( Peer peer ) { 
 return jsBindingModule . getTyping ( peer ) ; 
 } 
 @ @ - 238 , 7 + 245 , 17 @ @ public class JsMessenger extends Messenger { 
 return jsBindingModule . getDialogsGroupedList ( ) ; 
 } 
 
 + public void broadcastEvent ( String tag , JavaScriptObject obj ) { 
 + jsBindingModule . broadcastEvent ( tag , obj ) ; 
 + } 
 + 
 + public void subscribeEventBus ( JsEventBusCallback callback ) { 
 + jsBindingModule . subscribeEventBus ( callback ) ; 
 + } 
 
 + public void unsubscribeEventBus ( JsEventBusCallback callback ) { 
 + jsBindingModule . unsubscribeEventBus ( callback ) ; 
 + } 
 
 private String getSmallAvatarUrl ( Avatar avatar ) { 
 if ( avatar ! = null & & avatar . getSmallImage ( ) ! = null ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsCall . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsCall . java 
 new file mode 100644 
 index 0000000 . . e87e3b3 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsCall . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + import com . google . gwt . core . client . JsArray ; 
 + 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . js . JsMessenger ; 
 + import im . actor . core . viewmodel . CallModel ; 
 + 
 + public class JsCall extends JavaScriptObject { 
 + 
 + public static JsCall create ( JsMessenger messenger , CallModel model ) { 
 + JsArray < JsPeerInfo > members = JsArray . createArray ( ) . cast ( ) ; 
 + for ( int uid : model . getActiveMembers ( ) . get ( ) ) { 
 + members . push ( messenger . buildPeerInfo ( Peer . user ( uid ) ) ) ; 
 + } 
 + String state ; 
 + switch ( model . getState ( ) . get ( ) ) { 
 + case CALLING _ INCOMING : 
 + state = " calling _ in " ; 
 + break ; 
 + case CALLING _ OUTGOING : 
 + state = " calling _ out " ; 
 + break ; 
 + case IN _ PROGRESS : 
 + state = " in _ progress " ; 
 + break ; 
 + default : 
 + case ENDED : 
 + state = " ended " ; 
 + break ; 
 + } 
 + return create ( JsPeer . create ( model . getPeer ( ) ) , members , state ) ; 
 + } 
 + 
 + public static native JsCall create ( JsPeer peer , JsArray < JsPeerInfo > members , String state ) / * - { 
 + return { peer : peer , members : members , state : state } ; 
 + } - * / ; 
 + 
 + protected JsCall ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsEventBusCallback . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsEventBusCallback . java 
 new file mode 100644 
 index 0000000 . . 8f4f140 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsEventBusCallback . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + import org . timepedia . exporter . client . Export ; 
 + import org . timepedia . exporter . client . ExportClosure ; 
 + import org . timepedia . exporter . client . Exportable ; 
 + 
 + @ Export 
 + @ ExportClosure 
 + public interface JsEventBusCallback extends Exportable { 
 + void onEvent ( String tag , JavaScriptObject item ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 index 45a7999 . . b1a6005 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 @ @ - 4 , 6 + 4 , 7 @ @ 
 
 package im . actor . core . js . modules ; 
 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 import com . google . gwt . core . client . JsArray ; 
 
 import java . util . ArrayList ; 
 @ @ - 11 , 6 + 12 , 7 @ @ import java . util . HashMap ; 
 import java . util . HashSet ; 
 
 import im . actor . core . entity . Avatar ; 
 + import im . actor . core . entity . CallState ; 
 import im . actor . core . entity . Contact ; 
 import im . actor . core . entity . Dialog ; 
 import im . actor . core . entity . Message ; 
 @ @ - 21 , 11 + 23 , 13 @ @ import im . actor . core . entity . content . DocumentContent ; 
 import im . actor . core . entity . content . FileRemoteSource ; 
 import im . actor . core . entity . content . StickerContent ; 
 import im . actor . core . js . JsMessenger ; 
 + import im . actor . core . js . entity . JsCall ; 
 import im . actor . core . js . entity . JsContact ; 
 import im . actor . core . js . entity . JsCounter ; 
 import im . actor . core . js . entity . JsDialog ; 
 import im . actor . core . js . entity . JsDialogGroup ; 
 import im . actor . core . js . entity . JsDialogShort ; 
 + import im . actor . core . js . entity . JsEventBusCallback ; 
 import im . actor . core . js . entity . JsGroup ; 
 import im . actor . core . js . entity . JsMessage ; 
 import im . actor . core . js . entity . JsOnlineGroup ; 
 @ @ - 37 , 6 + 41 , 7 @ @ import im . actor . core . js . entity . JsUser ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . Modules ; 
 import im . actor . core . viewmodel . AppStateVM ; 
 + import im . actor . core . viewmodel . CallModel ; 
 import im . actor . core . viewmodel . DialogGroup ; 
 import im . actor . core . viewmodel . DialogSmall ; 
 import im . actor . core . viewmodel . GroupTypingVM ; 
 @ @ - 55 , 29 + 60 , 50 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 private JsMessenger messenger ; 
 private JsFilesModule filesModule ; 
 
 - private HashMap < Integer , JsBindedValue < JsUser > > users = new HashMap < Integer , JsBindedValue < JsUser > > ( ) ; 
 - private HashMap < Integer , JsBindedValue < JsGroup > > groups = new HashMap < Integer , JsBindedValue < JsGroup > > ( ) ; 
 - private HashMap < Integer , JsBindedValue < JsOnlineUser > > usersOnlines = new HashMap < Integer , JsBindedValue < JsOnlineUser > > ( ) ; 
 - private HashMap < Integer , JsBindedValue < JsOnlineGroup > > groupOnlines = new HashMap < Integer , JsBindedValue < JsOnlineGroup > > ( ) ; 
 - private HashMap < Peer , JsBindedValue < JsTyping > > typing = new HashMap < Peer , JsBindedValue < JsTyping > > ( ) ; 
 + private HashMap < Integer , JsBindedValue < JsUser > > users = new HashMap < > ( ) ; 
 + private HashMap < Integer , JsBindedValue < JsGroup > > groups = new HashMap < > ( ) ; 
 + private HashMap < Integer , JsBindedValue < JsOnlineUser > > usersOnlines = new HashMap < > ( ) ; 
 + private HashMap < Integer , JsBindedValue < JsOnlineGroup > > groupOnlines = new HashMap < > ( ) ; 
 + private HashMap < Peer , JsBindedValue < JsTyping > > typing = new HashMap < > ( ) ; 
 private JsBindedValue < String > onlineState ; 
 
 private JsDisplayList < JsDialog , Dialog > dialogsList ; 
 private JsDisplayList < JsContact , Contact > contactsList ; 
 private JsDisplayList < JsSearchEntity , SearchEntity > searchList ; 
 - private HashMap < Peer , JsDisplayList < JsMessage , Message > > messageLists = new HashMap < Peer , JsDisplayList < JsMessage , Message > > ( ) ; 
 + private HashMap < Peer , JsDisplayList < JsMessage , Message > > messageLists = new HashMap < > ( ) ; 
 
 private JsBindedValue < JsCounter > globalCounter ; 
 private JsBindedValue < JsCounter > tempGlobalCounter ; 
 
 private JsBindedValue < JsArray < JsDialogGroup > > dialogsGroupedList ; 
 
 + private HashMap < String , JsBindedValue < JsCall > > calls = new HashMap < > ( ) ; 
 + 
 + private ArrayList < JsEventBusCallback > eventBusCallbacks = new ArrayList < > ( ) ; 
 + 
 public JsBindingModule ( JsMessenger messenger , JsFilesModule filesModule , Modules modules ) { 
 super ( modules ) ; 
 
 this . filesModule = filesModule ; 
 this . messenger = messenger ; 
 this . filesModule . registerListener ( this ) ; 
 + 
 + } 
 + 
 + public void broadcastEvent ( String tag , JavaScriptObject obj ) { 
 + for ( JsEventBusCallback c : eventBusCallbacks ) { 
 + c . onEvent ( tag , obj ) ; 
 + } 
 + } 
 + 
 + public void subscribeEventBus ( JsEventBusCallback callback ) { 
 + if ( ! eventBusCallbacks . contains ( callback ) ) { 
 + eventBusCallbacks . add ( callback ) ; 
 + } 
 + } 
 + 
 + public void unsubscribeEventBus ( JsEventBusCallback callback ) { 
 + eventBusCallbacks . remove ( callback ) ; 
 } 
 
 public JsBindedValue < JsArray < JsDialogGroup > > getDialogsGroupedList ( ) { 
 @ @ - 243 , 6 + 269 , 33 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 return groupOnlines . get ( gid ) ; 
 } 
 
 + public JsBindedValue < JsCall > getCall ( String id ) { 
 + if ( ! calls . containsKey ( id ) ) { 
 + final CallModel callModel = messenger . getCall ( Long . parseLong ( id ) ) ; 
 + final JsBindedValue < JsCall > jsCall = new JsBindedValue < > ( JsCall . create ( messenger , callModel ) ) ; 
 + callModel . getState ( ) . subscribe ( new ValueChangedListener < CallState > ( ) { 
 + @ Override 
 + public void onChanged ( CallState val , Value < CallState > valueModel ) { 
 + jsCall . changeValue ( JsCall . create ( messenger , callModel ) ) ; 
 + } 
 + } ) ; 
 + callModel . getActiveMembers ( ) . subscribe ( new ValueChangedListener < ArrayList < Integer > > ( ) { 
 + @ Override 
 + public void onChanged ( ArrayList < Integer > val , Value < ArrayList < Integer > > valueModel ) { 
 + jsCall . changeValue ( JsCall . create ( messenger , callModel ) ) ; 
 + } 
 + } ) ; 
 + callModel . getCallStarted ( ) . subscribe ( new ValueChangedListener < Long > ( ) { 
 + @ Override 
 + public void onChanged ( Long val , Value < Long > valueModel ) { 
 + jsCall . changeValue ( JsCall . create ( messenger , callModel ) ) ; 
 + } 
 + } ) ; 
 + calls . put ( id , jsCall ) ; 
 + } 
 + return calls . get ( id ) ; 
 + } 
 + 
 public JsBindedValue < JsTyping > getTyping ( final Peer peer ) { 
 if ( ! typing . containsKey ( peer ) ) { 
 if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 @ @ - 407 , 7 + 460 , 7 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 / / 
 
 for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { 
 - for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { 
 + for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { 
 b . startReconverting ( ) ; 
 for ( Message message : b . getRawItems ( ) ) { 
 UserVM user = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( message . getSenderId ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 index 4dd1081 . . 510dfcd 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 @ @ - 1 , 7 + 1 , 10 @ @ 
 package im . actor . core . js . providers ; 
 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 import com . google . gwt . core . client . JsArray ; 
 
 + import im . actor . core . Messenger ; 
 + import im . actor . core . js . JsMessenger ; 
 import im . actor . core . js . modules . JsScheduller ; 
 import im . actor . core . js . providers . webrtc . JsAudio ; 
 import im . actor . core . js . providers . webrtc . JsIceServer ; 
 @ @ - 24 , 6 + 27 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { 
 private static final String TAG = " JsWebRTCProvider " ; 
 
 private WebRTCController controller ; 
 + private JsMessenger messenger ; 
 private JsPeerConnection peerConnection ; 
 private JsAudio voicePlayback ; 
 private JsMediaStream voiceCapture ; 
 @ @ - 31 , 20 + 35 , 29 @ @ public class JsWebRTCProvider implements WebRTCProvider { 
 private long runningCallId ; 
 
 @ Override 
 - public void init ( WebRTCController controller ) { 
 + public void init ( Messenger messenger , WebRTCController controller ) { 
 this . controller = controller ; 
 + this . messenger = ( JsMessenger ) messenger ; 
 } 
 
 @ Override 
 - public void onIncomingCall ( final long callId ) { 
 + public void onIncomingCall ( long callId ) { 
 runningCallId = callId ; 
 + 
 + messenger . broadcastEvent ( " call " , callEvent ( " " + callId , " incoming " ) ) ; 
 } 
 
 @ Override 
 public void onOutgoingCall ( long callId ) { 
 runningCallId = callId ; 
 + 
 + messenger . broadcastEvent ( " call " , callEvent ( " " + callId , " outgoing " ) ) ; 
 } 
 
 + private final native JavaScriptObject callEvent ( String id , String type ) / * - { 
 + return { id : id , type : type } ; 
 + } - * / ; 
 + 
 private void createPeerConnection ( final long callId ) { 
 JsArray < JsIceServer > servers = JsArray . createArray ( ) . cast ( ) ; 
 servers . push ( JsIceServer . create ( " stun : 62 . 4 . 22 . 219 : 3478 " ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index f2465a0 . . 7677751 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 49 , 6 + 49 , 7 @ @ import im . actor . core . network . NetworkState ; 
 import im . actor . core . util . ActorTrace ; 
 import im . actor . core . util . Timing ; 
 import im . actor . core . viewmodel . AppStateVM ; 
 + import im . actor . core . viewmodel . CallModel ; 
 import im . actor . core . viewmodel . Command ; 
 import im . actor . core . viewmodel . ConversationVM ; 
 import im . actor . core . viewmodel . DialogGroupsVM ; 
 @ @ - 1005 , 6 + 1006 , 37 @ @ public class Messenger { 
 return modules . getCallsModule ( ) . makeCall ( uid ) ; 
 } 
 
 + / * * 
 + * Ending call by call id 
 + * 
 + * @ param callId Call id 
 + * / 
 + @ ObjectiveCName ( " endCallWithCallId : " ) 
 + public void endCall ( long callId ) { 
 + modules . getCallsModule ( ) . endCall ( callId ) ; 
 + } 
 + 
 + / * * 
 + * Answer call by call id 
 + * 
 + * @ param callId Call id 
 + * / 
 + @ ObjectiveCName ( " answerCallWithCallId : " ) 
 + public void answerCall ( long callId ) { 
 + modules . getCallsModule ( ) . answerCall ( callId ) ; 
 + } 
 + 
 + / * * 
 + * Get Call View Model by call id 
 + * 
 + * @ param callId Call id 
 + * @ return Call view model 
 + * / 
 + @ ObjectiveCName ( " getCallWithCallId : " ) 
 + public CallModel getCall ( long callId ) { 
 + return modules . getCallsModule ( ) . getCall ( callId ) ; 
 + } 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Peer operations 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / CallState . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / CallState . java 
 index d72fdae . . c294e56 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / CallState . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / CallState . java 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 package im . actor . core . entity ; 
 
 public enum CallState { 
 - CALLING , IN _ PROGRESS , ENDED 
 + CALLING _ OUTGOING , CALLING _ INCOMING , IN _ PROGRESS , ENDED 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 index 1e175b5 . . 83d0bbc 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import im . actor . core . api . rpc . RequestEndCall ; 
 import im . actor . core . api . rpc . RequestSendCallSignal ; 
 import im . actor . core . api . rpc . RequestSubscribeToCalls ; 
 import im . actor . core . api . rpc . ResponseVoid ; 
 + import im . actor . core . entity . CallState ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . signals . AbsSignal ; 
 import im . actor . core . entity . signals . AnswerSignal ; 
 @ @ - 18 , 9 + 19 , 8 @ @ import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 import im . actor . core . util . ModuleActor ; 
 - import im . actor . core . viewmodel . UserVM ; 
 import im . actor . core . webrtc . WebRTCProvider ; 
 - import im . actor . runtime . Log ; 
 + import im . actor . runtime . * ; 
 import im . actor . runtime . eventbus . Event ; 
 import im . actor . runtime . function . Constructor ; 
 
 @ @ - 64 , 7 + 64 , 7 @ @ public class CallManagerActor extends ModuleActor { 
 
 webRTCController = new WebRTCControllerImpl ( self ( ) ) ; 
 provider = config ( ) . getWebRTCProvider ( ) ; 
 - provider . init ( webRTCController ) ; 
 + provider . init ( context ( ) . getMessenger ( ) , webRTCController ) ; 
 } 
 
 
 @ @ - 84 , 7 + 84 , 11 @ @ public class CallManagerActor extends ModuleActor { 
 isOfferRequested = true ; / / No outgoing offer needed for ingoing call 
 isOfferReceived = false ; 
 isAnswerReceived = true ; / / No incoming answers needed for ingoing call 
 - provider . onIncomingCall ( callId , Peer . user ( uid ) , new UserVM [ ] { getUserVM ( uid ) } ) ; 
 + ArrayList < Integer > members = new ArrayList < > ( ) ; 
 + members . add ( myUid ( ) ) ; 
 + members . add ( uid ) ; 
 + context ( ) . getCallsModule ( ) . spawnNewModel ( callId , Peer . user ( uid ) , members , CallState . CALLING _ INCOMING ) ; 
 + provider . onIncomingCall ( callId ) ; 
 } 
 } 
 
 @ @ - 100 , 7 + 104 , 11 @ @ public class CallManagerActor extends ModuleActor { 
 isOfferRequested = false ; 
 isOfferReceived = true ; / / No offers needed for outgoing call 
 isAnswerReceived = false ; 
 - provider . onOutgoingCall ( callId , Peer . user ( uid ) , new UserVM [ ] { getUserVM ( uid ) } ) ; 
 + ArrayList < Integer > members = new ArrayList < > ( ) ; 
 + members . add ( myUid ( ) ) ; 
 + members . add ( uid ) ; 
 + context ( ) . getCallsModule ( ) . spawnNewModel ( callId , Peer . user ( uid ) , members , CallState . CALLING _ OUTGOING ) ; 
 + provider . onOutgoingCall ( callId ) ; 
 } 
 } 
 
 @ @ - 162 , 6 + 170 , 8 @ @ public class CallManagerActor extends ModuleActor { 
 OfferSignal offer = ( OfferSignal ) signal ; 
 if ( ! isOfferReceived ) { 
 isOfferReceived = true ; 
 + context ( ) . getCallsModule ( ) . getCall ( callId ) . getCallStarted ( ) . change ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; 
 + context ( ) . getCallsModule ( ) . getCall ( callId ) . getState ( ) . change ( CallState . IN _ PROGRESS ) ; 
 provider . onOfferReceived ( callId , offer . getSdp ( ) ) ; 
 } 
 } else if ( signal instanceof AnswerSignal ) { 
 @ @ - 202 , 9 + 212 , 12 @ @ public class CallManagerActor extends ModuleActor { 
 if ( webRTCController . getCallId ( ) = = callId ) { 
 if ( ! isOfferRequested ) { 
 isOfferRequested = true ; 
 + context ( ) . getCallsModule ( ) . getCall ( callId ) . getCallStarted ( ) . change ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; 
 + context ( ) . getCallsModule ( ) . getCall ( callId ) . getState ( ) . change ( CallState . IN _ PROGRESS ) ; 
 provider . onOfferNeeded ( callId ) ; 
 } 
 
 + 
 / / TODO : Auto kill call on timeout 
 } 
 } 
 @ @ - 234 , 6 + 247 , 7 @ @ public class CallManagerActor extends ModuleActor { 
 context ( ) . getActorApi ( ) . cancelRequest ( r ) ; 
 } 
 pendingRequests . clear ( ) ; 
 + context ( ) . getCallsModule ( ) . getCall ( callId ) . getState ( ) . change ( CallState . ENDED ) ; 
 } 
 } 
 
 @ @ - 439 , 18 + 453 , 6 @ @ public class CallManagerActor extends ModuleActor { 
 } 
 } 
 
 - public static class MediaStreamsReady { 
 - private long callid ; 
 - 
 - public MediaStreamsReady ( long callid ) { 
 - this . callid = callid ; 
 - } 
 - 
 - public long getCallid ( ) { 
 - return callid ; 
 - } 
 - } 
 - 
 private static class DoKeepAlive { 
 private long callId ; 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 index b22d13f . . c275fbf 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 @ @ - 1 , 11 + 1 , 17 @ @ 
 package im . actor . core . modules . calls ; 
 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + 
 import im . actor . core . api . ApiOutPeer ; 
 import im . actor . core . api . ApiPeerType ; 
 import im . actor . core . api . rpc . RequestDoCall ; 
 + import im . actor . core . entity . CallState ; 
 + import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . User ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 + import im . actor . core . viewmodel . CallModel ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . core . webrtc . WebRTCProvider ; 
 import im . actor . core . api . rpc . ResponseDoCall ; 
 @ @ - 24 , 6 + 30 , 7 @ @ public class CallsModule extends AbsModule { 
 
 private WebRTCProvider provider ; 
 private ActorRef callManager ; 
 + private HashMap < Long , CallModel > callModels = new HashMap < > ( ) ; 
 
 public CallsModule ( ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 39 , 6 + 46 , 14 @ @ public class CallsModule extends AbsModule { 
 callManager = system ( ) . actorOf ( " calls / manager " , CallManagerActor . CONSTRUCTOR ( context ( ) ) ) ; 
 } 
 
 + public void spawnNewModel ( long id , Peer peer , ArrayList < Integer > activeMembers , CallState state ) { 
 + callModels . put ( id , new CallModel ( id , peer , activeMembers , state ) ) ; 
 + } 
 + 
 + public CallModel getCall ( long id ) { 
 + return callModels . get ( id ) ; 
 + } 
 + 
 public ActorRef getCallManager ( ) { 
 return callManager ; 
 } 
 @ @ - 63 , 4 + 78 , 12 @ @ public class CallsModule extends AbsModule { 
 } 
 } ; 
 } 
 + 
 + public void endCall ( long callId ) { 
 + callManager . send ( new CallManagerActor . EndCall ( callId ) ) ; 
 + } 
 + 
 + public void answerCall ( long callId ) { 
 + callManager . send ( new CallManagerActor . AnswerCall ( callId ) ) ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallModel . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallModel . java 
 new file mode 100644 
 index 0000000 . . e5a37f0 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallModel . java 
 @ @ - 0 , 0 + 1 , 44 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . entity . CallState ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . runtime . mvvm . ValueModel ; 
 + 
 + public class CallModel { 
 + 
 + private final long callId ; 
 + private final Peer peer ; 
 + private final ValueModel < CallState > state ; 
 + private final ValueModel < Long > callStarted ; 
 + private final ValueModel < ArrayList < Integer > > activeMembers ; 
 + 
 + public CallModel ( long callId , Peer peer , ArrayList < Integer > activeMembers , CallState state ) { 
 + this . callId = callId ; 
 + this . peer = peer ; 
 + this . state = new ValueModel < > ( " calls . " + callId + " . state " , state ) ; 
 + this . callStarted = new ValueModel < > ( " calls . " + callId + " . started " , null ) ; 
 + this . activeMembers = new ValueModel < > ( " calls . " + callId + " . members " , new ArrayList < > ( activeMembers ) ) ; 
 + } 
 + 
 + public long getCallId ( ) { 
 + return callId ; 
 + } 
 + 
 + public ValueModel < CallState > getState ( ) { 
 + return state ; 
 + } 
 + 
 + public ValueModel < Long > getCallStarted ( ) { 
 + return callStarted ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public ValueModel < ArrayList < Integer > > getActiveMembers ( ) { 
 + return activeMembers ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallViewModel . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallViewModel . java 
 deleted file mode 100644 
 index 6aca143 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallViewModel . java 
 + + + / dev / null 
 @ @ - 1 , 29 + 0 , 0 @ @ 
 - package im . actor . core . viewmodel ; 
 - 
 - import im . actor . core . entity . CallState ; 
 - import im . actor . runtime . mvvm . ValueModel ; 
 - 
 - public class CallViewModel { 
 - 
 - private long callId ; 
 - private ValueModel < CallState > state ; 
 - private ValueModel < Long > callStarted ; 
 - 
 - public CallViewModel ( long callId , CallState state ) { 
 - this . callId = callId ; 
 - this . state = new ValueModel < > ( " calls . " + callId + " . state " , state ) ; 
 - this . callStarted = new ValueModel < > ( " calls . " + callId + " . started " , null ) ; 
 - } 
 - 
 - public long getCallId ( ) { 
 - return callId ; 
 - } 
 - 
 - public ValueModel < CallState > getState ( ) { 
 - return state ; 
 - } 
 - 
 - public ValueModel < Long > getCallStarted ( ) { 
 - return callStarted ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / webrtc / WebRTCProvider . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / webrtc / WebRTCProvider . java 
 index 3ac073b . . f50b6a3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / webrtc / WebRTCProvider . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / webrtc / WebRTCProvider . java 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package im . actor . core . webrtc ; 
 
 - import im . actor . core . entity . Peer ; 
 - import im . actor . core . viewmodel . UserVM ; 
 + import im . actor . core . Messenger ; 
 
 / * * 
 * WebRTC provider . Used for providing Calls support . 
 @ @ - 14 , 9 + 13 , 10 @ @ public interface WebRTCProvider { 
 / * * 
 * Init WebRTC provider 
 * 
 + * @ param messenger Messenger 
 * @ param controller controller 
 * / 
 - void init ( WebRTCController controller ) ; 
 + void init ( Messenger messenger , WebRTCController controller ) ; 
 
 / * * 
 * Incoming Call event . To answer call invoke controller . answerCall ( ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsClosure . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsClosure . java 
 index 3a4a0fa . . 411b668 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsClosure . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsClosure . java 
 @ @ - 4 , 13 + 4 , 6 @ @ 
 
 package im . actor . core . js . entity ; 
 
 - 
 - import org . timepedia . exporter . client . Export ; 
 - import org . timepedia . exporter . client . ExportClosure ; 
 - import org . timepedia . exporter . client . Exportable ; 
 - 
 - @ Export 
 - @ ExportClosure 
 - public interface JsClosure extends Exportable { 
 + public interface JsClosure { 
 void callback ( ) ; 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsClosureError . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsClosureError . java 
 new file mode 100644 
 index 0000000 . . 9a50080 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsClosureError . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public interface JsClosureError { 
 + void onError ( JavaScriptObject error ) ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 index 2f01f33 . . c1e728f 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 @ @ - 1 , 31 + 1 , 107 @ @ 
 package im . actor . core . js . providers ; 
 
 import im . actor . core . WebRTCProvider ; 
 + import im . actor . core . entity . signals . AbsSignal ; 
 + import im . actor . core . entity . signals . AnswerSignal ; 
 + import im . actor . core . entity . signals . CandidateSignal ; 
 + import im . actor . core . entity . signals . OfferSignal ; 
 + import im . actor . core . js . JsMessenger ; 
 + import im . actor . core . js . providers . webrtc . JsPeerConnection ; 
 + import im . actor . core . js . providers . webrtc . JsPeerConnectionListener ; 
 + import im . actor . core . js . providers . webrtc . JsSessionDescription ; 
 + import im . actor . core . js . providers . webrtc . JsStreaming ; 
 + import im . actor . core . js . providers . webrtc . JsUserMediaStream ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . function . Consumer ; 
 
 public class JsWebRTCProvider implements WebRTCProvider { 
 
 + private static final String TAG = " JsWebRTCProvider " ; 
 + 
 + private JsPeerConnection peerConnection ; 
 + private JsUserMediaStream mediaStream ; 
 + 
 @ Override 
 public void onIncomingCall ( ) { 
 - 
 + Log . d ( TAG , " onIncomingCall " ) ; 
 + JsMessenger . getInstance ( ) . callAnswer ( ) ; 
 + peerConnection = JsPeerConnection . create ( null ) ; 
 + peerConnection . setListener ( new JsPeerConnectionListener ( ) { 
 + @ Override 
 + public void onIceCandidate ( String candidate ) { 
 + Log . d ( TAG , " onIceCandidate : " + candidate ) ; 
 + } 
 + } ) ; 
 + JsStreaming . getUserAudio ( ) . then ( new Consumer < JsUserMediaStream > ( ) { 
 + @ Override 
 + public void apply ( JsUserMediaStream jsUserMediaStream ) { 
 + Log . d ( TAG , " Audio is created " ) ; 
 + peerConnection . setLocalDescription ( JsSessionDescription . create ( jsUserMediaStream ) ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + Log . d ( TAG , " Audio failured " ) ; 
 + } 
 + } ) ; 
 } 
 
 @ Override 
 public void onOutgoingCall ( ) { 
 - 
 + Log . d ( TAG , " onOutgoingCall " ) ; 
 } 
 
 @ Override 
 public void onCallStarted ( ) { 
 - 
 + Log . d ( TAG , " onCallStarted " ) ; 
 } 
 
 @ Override 
 - public void onSignalingReceived ( byte [ ] data ) { 
 + public void onSignalingReceived ( AbsSignal signal ) { 
 + Log . d ( TAG , " onSignalingReceived : " + signal ) ; 
 + if ( signal instanceof OfferSignal ) { 
 + String sdp = ( ( OfferSignal ) signal ) . getSdp ( ) ; 
 + JsSessionDescription description = JsSessionDescription . createOffer ( sdp ) ; 
 + peerConnection . setRemoteDescription ( description ) . then ( new Consumer < String > ( ) { 
 + @ Override 
 + public void apply ( String s ) { 
 + Log . d ( TAG , " Description set " ) ; 
 + peerConnection . createAnswer ( ) . then ( new Consumer < JsSessionDescription > ( ) { 
 + @ Override 
 + public void apply ( JsSessionDescription jsSessionDescription ) { 
 + Log . d ( TAG , " Session desc : " + jsSessionDescription ) ; 
 + JsMessenger . getInstance ( ) . callSendSignaling ( new AnswerSignal ( jsSessionDescription . getSDP ( ) ) ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + Log . d ( TAG , " Description desc error " ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + Log . d ( TAG , " Description error " ) ; 
 + } 
 + } ) ; 
 
 + } else if ( signal instanceof CandidateSignal ) { 
 + CandidateSignal candidateSignal = ( CandidateSignal ) signal ; 
 + try { 
 + peerConnection . addIceCandidate ( candidateSignal . getLabel ( ) , candidateSignal . getSdp ( ) ) ; 
 + } catch ( Exception e ) { 
 + Log . e ( TAG , e ) ; 
 + } 
 + } 
 } 
 
 @ Override 
 public void onCallEnded ( ) { 
 + Log . d ( TAG , " onCallEnded " ) ; 
 
 + / / TODO : Close 
 + peerConnection = null ; 
 + mediaStream = null ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java 
 index ccee846 . . 34f9f9c 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java 
 @ @ - 2 , 6 + 2 , 8 @ @ package im . actor . core . js . providers . webrtc ; 
 
 import com . google . gwt . core . client . JavaScriptObject ; 
 
 + import im . actor . core . js . entity . JsClosure ; 
 + import im . actor . core . js . entity . JsClosureError ; 
 import im . actor . core . js . modules . JsScheduller ; 
 import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . promise . PromiseFunc ; 
 @ @ - 10 , 7 + 12 , 7 @ @ import im . actor . runtime . promise . PromiseResolver ; 
 public class JsPeerConnection extends JavaScriptObject { 
 
 public static native JsPeerConnection create ( JsPeerConnectionConfig config ) / * - { 
 - return { peerConnection : new webkitRTCPeerConnection ( config ) } ; 
 + return { peerConnection : new webkitRTCPeerConnection ( config , { optional : [ { DtlsSrtpKeyAgreement : true } ] } ) } ; 
 } - * / ; 
 
 protected JsPeerConnection ( ) { 
 @ @ - 27 , 8 + 29 , 27 @ @ public class JsPeerConnection extends JavaScriptObject { 
 this . peerConnection . setLocalDescription ( description ) ; 
 } - * / ; 
 
 - public final native void setRemoteDescription ( JsSessionDescription description ) / * - { 
 - this . peerConnection . setRemoteDescription ( description ) ; 
 + public final Promise < String > setRemoteDescription ( final JsSessionDescription description ) { 
 + return new Promise < > ( new PromiseFunc < String > ( ) { 
 + @ Override 
 + public void exec ( final PromiseResolver < String > resolver ) { 
 + setRemoteDescription ( description , new JsClosure ( ) { 
 + @ Override 
 + public void callback ( ) { 
 + resolver . result ( null ) ; 
 + } 
 + } , new JsClosureError ( ) { 
 + @ Override 
 + public void onError ( JavaScriptObject error ) { 
 + resolver . error ( new RuntimeException ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) . done ( JsScheduller . scheduller ( ) ) ; 
 + } 
 + 
 + public final native void addIceCandidate ( int label , String candidate ) / * - { 
 + this . peerConnection . addIceCandidate ( new RTCIceCandidate ( { sdpMLineIndex : label , candidate : candidate } ) ) ; 
 } - * / ; 
 
 public final Promise < JsSessionDescription > createOffer ( ) { 
 @ @ - 50 , 11 + 71 , 50 @ @ public class JsPeerConnection extends JavaScriptObject { 
 } ) . done ( JsScheduller . scheduller ( ) ) ; 
 } 
 
 + public final Promise < JsSessionDescription > createAnswer ( ) { 
 + return new Promise < > ( new PromiseFunc < JsSessionDescription > ( ) { 
 + @ Override 
 + public void exec ( final PromiseResolver < JsSessionDescription > resolver ) { 
 + createAnswer ( new JsSessionDescriptionCallback ( ) { 
 + @ Override 
 + public void onOfferCreated ( JsSessionDescription offer ) { 
 + resolver . result ( offer ) ; 
 + } 
 + 
 + @ Override 
 + public void onOfferFailure ( ) { 
 + resolver . error ( new RuntimeException ( " Offer failure " ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) . done ( JsScheduller . scheduller ( ) ) ; 
 + } 
 + 
 private final native void createOffer ( JsSessionDescriptionCallback callback ) / * - { 
 this . peerConnection . createOffer ( function ( offer ) { 
 callback . @ im . actor . core . js . providers . webrtc . JsSessionDescriptionCallback : : onOfferCreated ( * ) ( offer ) ; 
 } , function ( error ) { 
 + $ wnd . console . warn ( error ) ; 
 + callback . @ im . actor . core . js . providers . webrtc . JsSessionDescriptionCallback : : onOfferFailure ( * ) ( ) ; 
 + } ) ; 
 + } - * / ; 
 + 
 + private final native void createAnswer ( JsSessionDescriptionCallback callback ) / * - { 
 + this . peerConnection . createAnswer ( function ( offer ) { 
 + callback . @ im . actor . core . js . providers . webrtc . JsSessionDescriptionCallback : : onOfferCreated ( * ) ( offer ) ; 
 + } , function ( error ) { 
 + $ wnd . console . warn ( error ) ; 
 callback . @ im . actor . core . js . providers . webrtc . JsSessionDescriptionCallback : : onOfferFailure ( * ) ( ) ; 
 } ) ; 
 } - * / ; 
 + 
 + 
 + private final native void setRemoteDescription ( JsSessionDescription description , JsClosure closure , JsClosureError error ) / * - { 
 + this . peerConnection . setRemoteDescription ( description , function ( ) { 
 + closure . @ im . actor . core . js . entity . JsClosure : : callback ( * ) ( ) ; 
 + } , function ( e ) { 
 + $ wnd . console . warn ( e ) ; 
 + error . @ im . actor . core . js . entity . JsClosureError : : onError ( * ) ( e ) ; 
 + } ) ; 
 + } - * / ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsRTCIceCandidate . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsRTCIceCandidate . java 
 new file mode 100644 
 index 0000000 . . 0dd3617 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsRTCIceCandidate . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsRTCIceCandidate extends JavaScriptObject { 
 + 
 + public native static JsRTCIceCandidate create ( String candidate ) / * - { 
 + return new RTCIceCandidate ( candidate ) ; 
 + } - * / ; 
 + 
 + protected JsRTCIceCandidate ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java 
 index 4154488 . . 7df0909 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java 
 @ @ - 4 , 6 + 4 , 14 @ @ import com . google . gwt . core . client . JavaScriptObject ; 
 
 public class JsSessionDescription extends JavaScriptObject { 
 
 + public static native JsSessionDescription createOffer ( String sdp ) / * - { 
 + return new RTCSessionDescription ( { type : ' offer ' , sdp : sdp } ) ; 
 + } - * / ; 
 + 
 + public static native JsSessionDescription create ( JsUserMediaStream stream ) / * - { 
 + return new RTCSessionDescription ( stream ) ; 
 + } - * / ; 
 + 
 protected JsSessionDescription ( ) { 
 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 180a9e6 . . f040452 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 43 , 6 + 43 , 7 @ @ import im . actor . core . events . PeerChatOpened ; 
 import im . actor . core . events . PeerInfoClosed ; 
 import im . actor . core . events . PeerInfoOpened ; 
 import im . actor . core . events . UserVisible ; 
 + import im . actor . core . modules . calls . CallManagerActor ; 
 import im . actor . core . modules . calls . CallsModule ; 
 import im . actor . core . network . NetworkState ; 
 import im . actor . core . util . ActorTrace ; 
 @ @ - 1031 , 6 + 1032 , 14 @ @ public class Messenger { 
 modules . getCallsModule ( ) . sendSignal ( callId , data ) ; 
 } 
 
 + public void callSendSignaling ( AbsSignal data ) { 
 + modules . getCallsModule ( ) . getCallManager ( ) . send ( new CallManagerActor . SendSignaling ( data ) ) ; 
 + } 
 + 
 + public void callAnswer ( ) { 
 + modules . getCallsModule ( ) . getCallManager ( ) . send ( new CallManagerActor . AnswerCall ( ) ) ; 
 + } 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Peer operations 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / WebRTCProvider . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / WebRTCProvider . java 
 index e278409 . . 200013c 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / WebRTCProvider . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / WebRTCProvider . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package im . actor . core ; 
 
 + import im . actor . core . entity . signals . AbsSignal ; 
 + 
 public interface WebRTCProvider { 
 
 void onIncomingCall ( ) ; 
 @ @ - 8 , 7 + 10 , 7 @ @ public interface WebRTCProvider { 
 
 void onCallStarted ( ) ; 
 
 - void onSignalingReceived ( byte [ ] data ) ; 
 + void onSignalingReceived ( AbsSignal signal ) ; 
 
 void onCallEnded ( ) ; 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AbsSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AbsSignal . java 
 index c78d8fb . . 99de9b6 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AbsSignal . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AbsSignal . java 
 @ @ - 11 , 7 + 11 , 7 @ @ import im . actor . runtime . bser . DataInput ; 
 
 public abstract class AbsSignal extends BserObject { 
 
 - String type ; 
 + private String type ; 
 
 @ Override 
 public void parse ( BserValues values ) throws IOException { 
 @ @ - 27 , 22 + 27 , 19 @ @ public abstract class AbsSignal extends BserObject { 
 
 public static AbsSignal fromBytes ( byte [ ] data ) { 
 try { 
 - 
 - AbsSignal res = null ; 
 BserValues values = new BserValues ( BserParser . deserialize ( new DataInput ( data , 0 , data . length ) ) ) ; 
 - if ( values . getString ( 1 ) . equals ( new OfferSignal ( ) . getType ( ) ) ) { 
 + String type = values . getString ( 1 ) ; 
 + AbsSignal res ; 
 + if ( OfferSignal . TYPE . equals ( type ) ) { 
 res = new OfferSignal ( ) ; 
 - } else if ( values . getString ( 1 ) . equals ( new AnswerSignal ( ) . getType ( ) ) ) { 
 + } else if ( AnswerSignal . TYPE . equals ( type ) ) { 
 res = new AnswerSignal ( ) ; 
 - } else if ( values . getString ( 1 ) . equals ( new CandidateSignal ( ) . getType ( ) ) ) { 
 + } else if ( CandidateSignal . TYPE . equals ( type ) ) { 
 res = new CandidateSignal ( ) ; 
 - } 
 - 
 - if ( res ! = null ) { 
 - res . parse ( values ) ; 
 } else { 
 - Log . w ( " Signaling parser " , " unknown signal " ) ; 
 + throw new IOException ( " Unknown signal type " + type ) ; 
 } 
 + res . parse ( values ) ; 
 return res ; 
 } catch ( IOException e ) { 
 return null ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AnswerSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AnswerSignal . java 
 index 9baf5de . . 2cc526c 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AnswerSignal . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AnswerSignal . java 
 @ @ - 5 , 11 + 5 , 10 @ @ import java . io . IOException ; 
 import im . actor . runtime . bser . BserValues ; 
 import im . actor . runtime . bser . BserWriter ; 
 
 - / * * 
 - * Created by root on 1 / 15 / 16 . 
 - * / 
 public class AnswerSignal extends AbsSignal { 
 
 + public static final String TYPE = " answer " ; 
 + 
 private String sdp ; 
 
 public AnswerSignal ( String sdp ) { 
 @ @ - 35 , 6 + 34 , 11 @ @ public class AnswerSignal extends AbsSignal { 
 
 @ Override 
 public String getType ( ) { 
 - return " answer " ; 
 + return TYPE ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return " { type : " + TYPE + " , sdp : " + sdp + " } " ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / CandidateSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / CandidateSignal . java 
 index bd82885 . . 1b13e43 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / CandidateSignal . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / CandidateSignal . java 
 @ @ - 7 , 6 + 7 , 8 @ @ import im . actor . runtime . bser . BserWriter ; 
 
 public class CandidateSignal extends AbsSignal { 
 
 + public static final String TYPE = " candidate " ; 
 + 
 private String sdp ; 
 private int label ; 
 private String id ; 
 @ @ - 19 , 6 + 21 , 7 @ @ public class CandidateSignal extends AbsSignal { 
 } 
 
 public CandidateSignal ( ) { 
 + 
 } 
 
 public String getSdp ( ) { 
 @ @ - 49 , 6 + 52 , 11 @ @ public class CandidateSignal extends AbsSignal { 
 
 @ Override 
 public String getType ( ) { 
 - return " candidate " ; 
 + return TYPE ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return " { type : " + TYPE + " , id : " + id + " , label : " + label + " sdp : " + sdp + " } " ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / OfferSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / OfferSignal . java 
 index f4cd4f2 . . 456ad69 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / OfferSignal . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / OfferSignal . java 
 @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . runtime . bser . BserWriter ; 
 
 public class OfferSignal extends AbsSignal { 
 
 + public static final String TYPE = " OFFER " ; 
 
 private String sdp ; 
 
 @ @ - 15 , 8 + 16 , 8 @ @ public class OfferSignal extends AbsSignal { 
 } 
 
 public OfferSignal ( ) { 
 - } 
 
 + } 
 
 public String getSdp ( ) { 
 return sdp ; 
 @ @ - 34 , 6 + 35 , 11 @ @ public class OfferSignal extends AbsSignal { 
 
 @ Override 
 public String getType ( ) { 
 - return " OFFER " ; 
 + return TYPE ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return " { type : " + TYPE + " , sdp : " + sdp + " } " ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index c5f0055 . . 0df9b8b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 15 , 7 + 15 , 7 @ @ public class CallActor extends ModuleActor { 
 private boolean alive = false ; 
 private long callId ; 
 private CallsModule . CallCallback callback ; 
 - private ArrayList < byte [ ] > signals = new ArrayList < byte [ ] > ( ) ; 
 + private ArrayList < byte [ ] > signals = new ArrayList < > ( ) ; 
 
 public CallActor ( long callId , ModuleContext context ) { 
 super ( context ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 index e496823 . . df83bde 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 1 , 6 + 1 , 9 @ @ 
 package im . actor . core . modules . calls ; 
 
 + import im . actor . core . api . rpc . RequestCallInProgress ; 
 + import im . actor . core . api . rpc . RequestSendCallSignal ; 
 import im . actor . core . api . rpc . RequestSubscribeToCalls ; 
 + import im . actor . core . entity . signals . AbsSignal ; 
 import im . actor . core . events . NewSessionCreated ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . util . ModuleActor ; 
 @ @ - 20 , 8 + 23 , 12 @ @ public class CallManagerActor extends ModuleActor { 
 } 
 
 private static final String TAG = " CallManagerActor " ; 
 + private static final int IN _ PROGRESS _ TIMEOUT = 15000 ; 
 
 private long subscribeRequest = - 1 ; 
 + private long progressRequest = - 1 ; 
 + 
 + private long runningCallId = - 1 ; 
 
 public CallManagerActor ( ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 36 , 10 + 43 , 41 @ @ public class CallManagerActor extends ModuleActor { 
 
 private void onIncomingCall ( long callId , int uid ) { 
 Log . d ( TAG , " onIncomingCall ( " + callId + " , " + uid + " ) " ) ; 
 + if ( runningCallId ! = - 1 ) { 
 + return ; 
 + } 
 + runningCallId = callId ; 
 + config ( ) . getWebRTCProvider ( ) . onIncomingCall ( ) ; 
 + } 
 + 
 + private void onAnswerCall ( ) { 
 + Log . d ( TAG , " onAnswerCall " ) ; 
 + if ( runningCallId = = - 1 ) { 
 + return ; 
 + } 
 + 
 + progressRequest = request ( new RequestCallInProgress ( runningCallId , IN _ PROGRESS _ TIMEOUT ) ) ; 
 } 
 
 private void onSignaling ( long callId , byte [ ] message ) { 
 Log . d ( TAG , " onSignaling ( " + callId + " ) " ) ; 
 + if ( runningCallId ! = callId ) { 
 + return ; 
 + } 
 + 
 + AbsSignal signal = AbsSignal . fromBytes ( message ) ; 
 + if ( signal ! = null ) { 
 + config ( ) . getWebRTCProvider ( ) . onSignalingReceived ( signal ) ; 
 + } 
 + } 
 + 
 + private void onSendSignal ( AbsSignal signal ) { 
 + Log . d ( TAG , " onSendSignal : " + signal ) ; 
 + if ( runningCallId = = - 1 ) { 
 + return ; 
 + } 
 + 
 + request ( new RequestSendCallSignal ( runningCallId , signal . toByteArray ( ) ) ) ; 
 } 
 
 private void subscribeForCalls ( ) { 
 @ @ - 67 , 6 + 105 , 10 @ @ public class CallManagerActor extends ModuleActor { 
 } else if ( message instanceof OnSignaling ) { 
 OnSignaling signaling = ( OnSignaling ) message ; 
 onSignaling ( signaling . getCallId ( ) , signaling . getMessage ( ) ) ; 
 + } else if ( message instanceof AnswerCall ) { 
 + onAnswerCall ( ) ; 
 + } else if ( message instanceof SendSignaling ) { 
 + onSendSignal ( ( ( SendSignaling ) message ) . getSignal ( ) ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 @ @ - 108 , 4 + 150 , 21 @ @ public class CallManagerActor extends ModuleActor { 
 return message ; 
 } 
 } 
 + 
 + public static class AnswerCall { 
 + 
 + } 
 + 
 + public static class SendSignaling { 
 + 
 + private AbsSignal signal ; 
 + 
 + public SendSignaling ( AbsSignal signal ) { 
 + this . signal = signal ; 
 + } 
 + 
 + public AbsSignal getSignal ( ) { 
 + return signal ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java 
 index 027b5ac . . 5941ae3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . core . modules . calls ; 
 
 + import im . actor . core . api . updates . UpdateCallEnded ; 
 import im . actor . core . api . updates . UpdateCallSignal ; 
 import im . actor . core . api . updates . UpdateIncomingCall ; 
 import im . actor . core . modules . ModuleContext ; 
 @ @ - 27 , 6 + 28 , 11 @ @ public class CallsProcessor implements Processor { 
 new CallManagerActor . OnSignaling ( 
 updateCallSignal . getCallId ( ) , 
 updateCallSignal . getContent ( ) ) ) ; 
 + return true ; 
 + } else if ( update instanceof UpdateCallEnded ) { 
 + UpdateCallEnded callEnded = ( UpdateCallEnded ) update ; 
 + 
 + return true ; 
 } 
 return false ; 
 }
