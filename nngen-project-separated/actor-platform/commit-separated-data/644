BLEU SCORE: 0.23901088824528133

TEST MSG: fix ( server : messaging ) : mark messages read before sending updates
GENERATED MSG: fix ( server : core ) : check read condition for UpdateMessageReadByMe

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > index 8fd0925 . . d634104 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > @ @ - 153 , 10 + 153 , 10 @ @ trait DialogCommandHandlers extends PeersImplicits { < nl > < nl > ( if ( mustRead ) { < nl > for { < nl > + _ ← dialogExt . ackMessageRead ( peer , mr ) < nl > _ ← db . run ( markMessagesRead ( selfPeer , peer , new DateTime ( mr . date ) ) ) < nl > unreadCount ← db . run ( dialogExt . getUnreadTotal ( userId ) ) < nl > _ ← deliveryExt . read ( userId , mr . readerAuthSid , peer , mr . date , Some ( unreadCount ) ) < nl > - _ ← dialogExt . ackMessageRead ( peer , mr ) < nl > _ ← deliveryExt . sendCountersUpdate ( userId , unreadCount ) < nl > } yield MessageReadAck ( ) < nl > } else {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > index 57412ec . . 6a2ea02 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala < nl > @ @ - 152 , 10 + 152 , 9 @ @ trait DialogCommandHandlers extends UpdateCounters with PeersImplicits { < nl > protected def messageRead ( state : DialogState , mr : MessageRead ) : Unit = { < nl > val mustRead = mustMakeRead ( state , mr ) < nl > < nl > - val readerUpd = deliveryExt . read ( userId , mr . readerAuthSid , peer , mr . date ) < nl > ( if ( mustRead ) { < nl > for { < nl > - _ ← readerUpd < nl > + _ ← deliveryExt . read ( userId , mr . readerAuthSid , peer , mr . date ) < nl > _ ← dialogExt . ackMessageRead ( peer , mr ) < nl > _ ← db . run ( markMessagesRead ( selfPeer , peer , new DateTime ( mr . date ) ) ) < nl > _ ← deliveryExt . sendCountersUpdate ( userId )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 index 8fd0925 . . d634104 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 @ @ - 153 , 10 + 153 , 10 @ @ trait DialogCommandHandlers extends PeersImplicits { 
 
 ( if ( mustRead ) { 
 for { 
 + _ ← dialogExt . ackMessageRead ( peer , mr ) 
 _ ← db . run ( markMessagesRead ( selfPeer , peer , new DateTime ( mr . date ) ) ) 
 unreadCount ← db . run ( dialogExt . getUnreadTotal ( userId ) ) 
 _ ← deliveryExt . read ( userId , mr . readerAuthSid , peer , mr . date , Some ( unreadCount ) ) 
 - _ ← dialogExt . ackMessageRead ( peer , mr ) 
 _ ← deliveryExt . sendCountersUpdate ( userId , unreadCount ) 
 } yield MessageReadAck ( ) 
 } else {

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 index 57412ec . . 6a2ea02 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogCommandHandlers . scala 
 @ @ - 152 , 10 + 152 , 9 @ @ trait DialogCommandHandlers extends UpdateCounters with PeersImplicits { 
 protected def messageRead ( state : DialogState , mr : MessageRead ) : Unit = { 
 val mustRead = mustMakeRead ( state , mr ) 
 
 - val readerUpd = deliveryExt . read ( userId , mr . readerAuthSid , peer , mr . date ) 
 ( if ( mustRead ) { 
 for { 
 - _ ← readerUpd 
 + _ ← deliveryExt . read ( userId , mr . readerAuthSid , peer , mr . date ) 
 _ ← dialogExt . ackMessageRead ( peer , mr ) 
 _ ← db . run ( markMessagesRead ( selfPeer , peer , new DateTime ( mr . date ) ) ) 
 _ ← deliveryExt . sendCountersUpdate ( userId )
