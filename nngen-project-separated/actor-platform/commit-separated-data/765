BLEU SCORE: 0.14458924666162856

TEST MSG: fix ( server : rpc ) : forgotten time check in message update
GENERATED MSG: fix ( server ) : publish group events to all subscribers

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala < nl > index 4d3ec72 . . 7500b32 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala < nl > @ @ - 17 , 8 + 17 , 10 @ @ trait MessageUpdating extends PeersImplicits { < nl > < nl > def updateMessageContent ( clientUserId : Int , peer : Peer , randomId : Long , updatedMessage : ApiMessage ) ( implicit system : ActorSystem ) : Future [ SeqState ] = { < nl > peer match { < nl > - case Peer ( PeerType . Private , _ ) ⇒ updateContentPrivate ( clientUserId , peer , randomId , updatedMessage ) < nl > - case Peer ( PeerType . Group , _ ) ⇒ updateContentGroup ( clientUserId , peer , randomId , updatedMessage ) < nl > + case Peer ( PeerType . Private , _ ) ⇒ < nl > + system . log . debug ( " Sending UpdateMessageContentChanged , client : { } , peer : { } , randomId : { } " , clientUserId , peer , randomId ) < nl > + updateContentPrivate ( clientUserId , peer , randomId , updatedMessage ) < nl > + case Peer ( PeerType . Group , _ ) ⇒ updateContentGroup ( clientUserId , peer , randomId , updatedMessage ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > index 0e70104 . . b34493b 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > @ @ - 57 , 7 + 57 , 7 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits < nl > ( for { < nl > histMessage ← fromFutureOption ( CommonRpcErrors . forbidden ( " Not allowed " ) ) ( db . run ( HistoryMessageRepo . findNewestSentBy ( client . userId , peer ) ) ) < nl > _ ← fromBoolean ( NotLastMessage ) ( histMessage . randomId = = randomId ) < nl > - _ = fromBoolean ( NotInTimeWindow ) ( inTimeWindow ( histMessage . date . getMillis ) ) < nl > + _ ← fromBoolean ( NotInTimeWindow ) ( inTimeWindow ( histMessage . date . getMillis ) ) < nl > apiMessage ← fromXor ( ( e : Any ) ⇒ IntenalError ) ( Xor . fromEither ( parseMessage ( histMessage . messageContentData ) ) ) < nl > _ ← fromBoolean ( NotTextMessage ) ( apiMessage match { < nl > case _ : ApiTextMessage ⇒ true
NEAREST DIFF (one line): diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingServiceImpl . scala < nl > index 89d8c25 . . 365b399 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingServiceImpl . scala < nl > @ @ - 56 , 8 + 56 , 8 @ @ object MessagingService { < nl > case models . PeerType . Group ⇒ < nl > val topic = messagesTopic ( message . toPeer ) < nl > < nl > - mediator ! DistributedPubSubMediator . Publish ( groupMessagesTopic , message , sendOneMessageToEachGroup = true ) < nl > - mediator ! DistributedPubSubMediator . Publish ( topic , message , sendOneMessageToEachGroup = true ) < nl > + mediator ! DistributedPubSubMediator . Publish ( groupMessagesTopic , message , sendOneMessageToEachGroup = false ) < nl > + mediator ! DistributedPubSubMediator . Publish ( topic , message , sendOneMessageToEachGroup = false ) < nl > } < nl > } < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksWorker . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksWorker . scala < nl > index 9d14ab2 . . fb5204f 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksWorker . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksWorker . scala < nl > @ @ - 61 , 7 + 61 , 7 @ @ class ReverseHooksWorker ( groupId : Int , token : String , mediator : ActorRef ) < nl > < nl > def init : Receive = { < nl > case Resubscribe ⇒ < nl > - mediator ! Subscribe ( MessagingService . messagesTopic ( Peer ( PeerType . Group , groupId ) ) , Some ( interceptorGroupId ( groupId ) ) , self ) < nl > + mediator ! Subscribe ( MessagingService . messagesTopic ( Peer ( PeerType . Group , groupId ) ) , None , self ) < nl > case SubscribeAck ( Subscribe ( topic , _ , _ ) ) ⇒ < nl > log . debug ( " Watching for group ' s { } reverse hooks " , groupId ) < nl > scheduledResubscribe . cancel ( ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > index 55d19cf . . 5e6fdf5 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala < nl > @ @ - 161 , 7 + 161 , 7 @ @ class WebhookHandlerSpec < nl > < nl > whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 7L , TextMessage ( commands ( 3 ) , Vector . empty , None ) ) ) ( _ ⇒ ( ) ) < nl > < nl > - Thread . sleep ( 5000 ) < nl > + Thread . sleep ( 10000 ) < nl > < nl > val messages3000 = hook3000 . getMessages < nl > messages3000 should have size 4

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala 
 index 4d3ec72 . . 7500b32 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / MessageUpdating . scala 
 @ @ - 17 , 8 + 17 , 10 @ @ trait MessageUpdating extends PeersImplicits { 
 
 def updateMessageContent ( clientUserId : Int , peer : Peer , randomId : Long , updatedMessage : ApiMessage ) ( implicit system : ActorSystem ) : Future [ SeqState ] = { 
 peer match { 
 - case Peer ( PeerType . Private , _ ) ⇒ updateContentPrivate ( clientUserId , peer , randomId , updatedMessage ) 
 - case Peer ( PeerType . Group , _ ) ⇒ updateContentGroup ( clientUserId , peer , randomId , updatedMessage ) 
 + case Peer ( PeerType . Private , _ ) ⇒ 
 + system . log . debug ( " Sending UpdateMessageContentChanged , client : { } , peer : { } , randomId : { } " , clientUserId , peer , randomId ) 
 + updateContentPrivate ( clientUserId , peer , randomId , updatedMessage ) 
 + case Peer ( PeerType . Group , _ ) ⇒ updateContentGroup ( clientUserId , peer , randomId , updatedMessage ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 index 0e70104 . . b34493b 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 @ @ - 57 , 7 + 57 , 7 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits 
 ( for { 
 histMessage ← fromFutureOption ( CommonRpcErrors . forbidden ( " Not allowed " ) ) ( db . run ( HistoryMessageRepo . findNewestSentBy ( client . userId , peer ) ) ) 
 _ ← fromBoolean ( NotLastMessage ) ( histMessage . randomId = = randomId ) 
 - _ = fromBoolean ( NotInTimeWindow ) ( inTimeWindow ( histMessage . date . getMillis ) ) 
 + _ ← fromBoolean ( NotInTimeWindow ) ( inTimeWindow ( histMessage . date . getMillis ) ) 
 apiMessage ← fromXor ( ( e : Any ) ⇒ IntenalError ) ( Xor . fromEither ( parseMessage ( histMessage . messageContentData ) ) ) 
 _ ← fromBoolean ( NotTextMessage ) ( apiMessage match { 
 case _ : ApiTextMessage ⇒ true

NEAREST DIFF:
diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingServiceImpl . scala 
 index 89d8c25 . . 365b399 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingServiceImpl . scala 
 @ @ - 56 , 8 + 56 , 8 @ @ object MessagingService { 
 case models . PeerType . Group ⇒ 
 val topic = messagesTopic ( message . toPeer ) 
 
 - mediator ! DistributedPubSubMediator . Publish ( groupMessagesTopic , message , sendOneMessageToEachGroup = true ) 
 - mediator ! DistributedPubSubMediator . Publish ( topic , message , sendOneMessageToEachGroup = true ) 
 + mediator ! DistributedPubSubMediator . Publish ( groupMessagesTopic , message , sendOneMessageToEachGroup = false ) 
 + mediator ! DistributedPubSubMediator . Publish ( topic , message , sendOneMessageToEachGroup = false ) 
 } 
 } 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksWorker . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksWorker . scala 
 index 9d14ab2 . . fb5204f 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksWorker . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / ReverseHooksWorker . scala 
 @ @ - 61 , 7 + 61 , 7 @ @ class ReverseHooksWorker ( groupId : Int , token : String , mediator : ActorRef ) 
 
 def init : Receive = { 
 case Resubscribe ⇒ 
 - mediator ! Subscribe ( MessagingService . messagesTopic ( Peer ( PeerType . Group , groupId ) ) , Some ( interceptorGroupId ( groupId ) ) , self ) 
 + mediator ! Subscribe ( MessagingService . messagesTopic ( Peer ( PeerType . Group , groupId ) ) , None , self ) 
 case SubscribeAck ( Subscribe ( topic , _ , _ ) ) ⇒ 
 log . debug ( " Watching for group ' s { } reverse hooks " , groupId ) 
 scheduledResubscribe . cancel ( ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 index 55d19cf . . 5e6fdf5 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / WebhookHandlerSpec . scala 
 @ @ - 161 , 7 + 161 , 7 @ @ class WebhookHandlerSpec 
 
 whenReady ( messagingService . handleSendMessage ( group . asOutPeer , 7L , TextMessage ( commands ( 3 ) , Vector . empty , None ) ) ) ( _ ⇒ ( ) ) 
 
 - Thread . sleep ( 5000 ) 
 + Thread . sleep ( 10000 ) 
 
 val messages3000 = hook3000 . getMessages 
 messages3000 should have size 4
