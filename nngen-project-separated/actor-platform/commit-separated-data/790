BLEU SCORE: 0.016932492841722675

TEST MSG: fix ( server : webrtc ) : fixed call rejection and joining
GENERATED MSG: Merge commit ' 33972b245d6f4f17ce69916df2f3f66ecbeb72e5 '

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json < nl > index 47c23f5 . . fbf3477 100644 < nl > - - - a / actor - sdk / sdk - api / actor . json < nl > + + + b / actor - sdk / sdk - api / actor . json < nl > @ @ - 12845 , 6 + 12845 , 17 @ @ < nl > } , < nl > " id " : 1 , < nl > " name " : " peer " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " opt " , < nl > + " childType " : { < nl > + " type " : " alias " , < nl > + " childType " : " msec " < nl > + } < nl > + } , < nl > + " id " : 2 , < nl > + " name " : " timeout " < nl > } < nl > ] < nl > } < nl > diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > index 141f807 . . 5a1bdd3 100644 < nl > - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > @ @ - 10999 , 6 + 10999 , 15 @ @ < nl > < ref role = " 2m5mJy " node = " GBscvBB6hj " resolve = " OutPeer " / > < nl > < / node > < nl > < / node > < nl > + < node concept = " 2m7Kf5 " id = " 56r0npHiuXf " role = " 2m0hLx " > < nl > + < property role = " 2m7DUN " value = " 2 " / > < nl > + < property role = " TrG5h " value = " timeout " / > < nl > + < node concept = " 2m5nlT " id = " 56r0npHixa9 " role = " 2m7DVh " > < nl > + < node concept = " wb0Ql " id = " 56r0npHixaf " role = " 3GH5xg " > < nl > + < ref role = " wb18D " node = " 6u8Nlnzqdrd " resolve = " msec " / > < nl > + < / node > < nl > + < / node > < nl > + < / node > < nl > < node concept = " Nu42z " id = " 201xLeQvfQP " role = " NuuwV " > < nl > < property role = " Nu42W " value = " A25 " / > < nl > < / node > < nl > diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json < nl > index 47c23f5 . . fbf3477 100644 < nl > - - - a / actor - server / actor - core / src / main / actor - api / actor . json < nl > + + + b / actor - server / actor - core / src / main / actor - api / actor . json < nl > @ @ - 12845 , 6 + 12845 , 17 @ @ < nl > } , < nl > " id " : 1 , < nl > " name " : " peer " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " opt " , < nl > + " childType " : { < nl > + " type " : " alias " , < nl > + " childType " : " msec " < nl > + } < nl > + } , < nl > + " id " : 2 , < nl > + " name " : " timeout " < nl > } < nl > ] < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > index 630bcb8 . . ea2da0a 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > @ @ - 19 , 6 + 19 , 8 @ @ object EventBus { < nl > def isInternal : Boolean < nl > def isExternal : Boolean < nl > def externalUserId : Option [ UserId ] < nl > + def externalAuthId : Option [ AuthId ] < nl > + def internalActorRef : Option [ ActorRef ] < nl > } < nl > final case class InternalClient ( ref : ActorRef ) extends Client { < nl > override def isInternal : Boolean = true < nl > @ @ - 26 , 6 + 28 , 10 @ @ object EventBus { < nl > override def isExternal : Boolean = false < nl > < nl > override def externalUserId : Option [ UserId ] = None < nl > + < nl > + override def externalAuthId : Option [ AuthId ] = None < nl > + < nl > + override def internalActorRef = Some ( ref ) < nl > } < nl > final case class ExternalClient ( userId : UserId , authId : AuthId ) extends Client { < nl > override def isInternal : Boolean = false < nl > @ @ - 33 , 6 + 39 , 10 @ @ object EventBus { < nl > override def isExternal : Boolean = true < nl > < nl > override def externalUserId : Option [ UserId ] = Some ( userId ) < nl > + < nl > + override def externalAuthId : Option [ AuthId ] = Some ( authId ) < nl > + < nl > + override def internalActorRef = None < nl > } < nl > < nl > final case class Message ( id : String , client : Client , deviceId : Option [ Long ] , message : Array [ Byte ] ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > index 7e1b5b1 . . 96fa35e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala < nl > @ @ - 142 , 6 + 142 , 7 @ @ final class EventBusMediator extends Actor with ActorLogging { < nl > consumers . put ( client , deviceId ) < nl > timeoutOpt foreach ( consumers . keepAlive ( client , _ ) ) < nl > sender ( ) ! CreateAck ( deviceId ) < nl > + client . internalActorRef foreach context . watch < nl > context become created ( deviceId ) < nl > case _ ⇒ < nl > sender ( ) ! Status . Failure ( EventBusErrors . EventBusNotFound ) < nl > @ @ - 196 , 29 + 197 , 39 @ @ final class EventBusMediator extends Actor with ActorLogging { < nl > case ConsumerTimedOut ( client ) ⇒ < nl > disconnect ( client ) < nl > case Join ( client , timeoutOpt ) ⇒ < nl > - val deviceId = Random . nextLong ( ) < nl > + client . externalAuthId flatMap consumers . byAuthId match { < nl > + case Some ( ( _ , deviceId ) ) ⇒ sender ( ) ! JoinAck ( deviceId ) < nl > + case None ⇒ < nl > + val deviceId = Random . nextLong ( ) < nl > + < nl > + val update = client match { < nl > + case ExternalClient ( userId , _ ) ⇒ UpdateEventBusDeviceConnected ( id , Some ( userId ) , deviceId ) < nl > + case InternalClient ( _ ) ⇒ UpdateEventBusDeviceConnected ( id , None , deviceId ) < nl > + } < nl > < nl > - val update = client match { < nl > - case ExternalClient ( userId , _ ) ⇒ UpdateEventBusDeviceConnected ( id , Some ( userId ) , deviceId ) < nl > - case InternalClient ( _ ) ⇒ UpdateEventBusDeviceConnected ( id , None , deviceId ) < nl > - } < nl > + broadcast ( update ) < nl > + this . consumers . actorRefs foreach ( _ ! EventBus . Joined ( id , client , deviceId ) ) < nl > + consumers . put ( client , deviceId ) < nl > < nl > - broadcast ( update ) < nl > - this . consumers . actorRefs foreach ( _ ! EventBus . Joined ( id , client , deviceId ) ) < nl > - consumers . put ( client , deviceId ) < nl > + timeoutOpt foreach ( consumers . keepAlive ( client , _ ) ) < nl > + client . internalActorRef foreach context . watch < nl > < nl > - timeoutOpt foreach ( consumers . keepAlive ( client , _ ) ) < nl > - sender ( ) ! JoinAck ( deviceId ) < nl > + sender ( ) ! JoinAck ( deviceId ) < nl > + } < nl > case Dispose ( client : Client ) ⇒ < nl > if ( owner . contains ( client ) ) { < nl > log . debug ( " Disposing by owner request " ) < nl > dispose ( ) < nl > } else sender ( ) ! Status . Failure ( new RuntimeException ( " Attempt to dispose by not an owner " ) ) < nl > case Terminated ( ref ) ⇒ < nl > + log . debug ( " Terminated { } " , ref ) < nl > disconnect ( InternalClient ( ref ) ) < nl > } < nl > < nl > private def disconnect ( client : Client ) = { < nl > + log . debug ( " Disconnecting { } " , client ) < nl > + log . debug ( " owner : { } " , owner ) < nl > + log . debug ( " consumers : { } " , consumers . owners ) < nl > if ( ( owner . isDefined & & consumers . owners = = Set ( client ) ) | | consumers . devices . toSet = = Set ( client ) ) { < nl > log . debug ( " Disposing as no more clients connected " ) < nl > dispose ( ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index 3f88425 . . 66edf9c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 35 , 7 + 35 , 7 @ @ object WebrtcCallErrors { < nl > private [ webrtc ] sealed trait WebrtcCallMessage < nl > < nl > private [ webrtc ] object WebrtcCallMessages { < nl > - final case class StartCall ( callerUserId : UserId , callerAuthId : AuthId , peer : Peer ) extends WebrtcCallMessage < nl > + final case class StartCall ( callerUserId : UserId , callerAuthId : AuthId , peer : Peer , timeout : Option [ Long ] ) extends WebrtcCallMessage < nl > final case class StartCallAck ( eventBusId : String , callerDeviceId : EventBus . DeviceId ) < nl > < nl > final case class JoinCall ( calleeUserId : UserId , authId : AuthId ) extends WebrtcCallMessage < nl > @ @ - 108 , 6 + 108 , 8 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging { < nl > < nl > def receive = waitForStart < nl > < nl > + / / FIXME : set receive timeout < nl > + < nl > def waitForStart : Receive = { < nl > case s : StartCall ⇒ < nl > case class Res ( eventBusId : String , callees : Seq [ Int ] , callerDeviceId : EventBus . DeviceId ) < nl > @ @ - 117 , 7 + 119 , 7 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging { < nl > ( for { < nl > callees ← fetchParticipants ( callerUserId , peer ) map ( _ filterNot ( _ = = callerUserId ) ) < nl > eventBusId ← eventBusExt . create ( eventBusClient , timeout = None , isOwned = Some ( true ) ) map ( _ . _ 1 ) < nl > - callerDeviceId ← eventBusExt . join ( EventBus . ExternalClient ( s . callerUserId , s . callerAuthId ) , eventBusId , Some ( 16000 ) ) < nl > + callerDeviceId ← eventBusExt . join ( EventBus . ExternalClient ( s . callerUserId , s . callerAuthId ) , eventBusId , s . timeout ) < nl > _ ← scheduleIncomingCallUpdates ( callees ) < nl > } yield Res ( eventBusId , callees , callerDeviceId ) ) pipeTo self < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala < nl > index c63e96d . . d3deefb 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala < nl > @ @ - 33 , 7 + 33 , 7 @ @ final class WebrtcExtension ( system : ActorSystem ) extends Extension { < nl > import im . actor . server . webrtc . WebrtcCallMessages . _ < nl > import system . dispatcher < nl > < nl > - private implicit val timeout : Timeout = Timeout ( ActorConfig . defaultTimeout ) < nl > + private implicit val defaultTimeout : Timeout = Timeout ( ActorConfig . defaultTimeout ) < nl > < nl > private val extractEntityId : ExtractEntityId = { < nl > case WebrtcCallEnvelope ( id , message ) ⇒ ( id . toString , message ) < nl > @ @ - 49 , 12 + 49 , 12 @ @ final class WebrtcExtension ( system : ActorSystem ) extends Extension { < nl > < nl > private [ webrtc ] val config = WebrtcConfig . load ( system . settings . config ) . get < nl > < nl > - def doCall ( callerUserId : UserId , callerAuthId : AuthId , peer : Peer ) : Future [ ( Long , String , EventBus . DeviceId ) ] = { < nl > + def doCall ( callerUserId : UserId , callerAuthId : AuthId , peer : Peer , timeout : Option [ Long ] ) : Future [ ( Long , String , EventBus . DeviceId ) ] = { < nl > val callId = ThreadLocalRandom . current ( ) . nextLong ( ) < nl > < nl > ( region ? WebrtcCallEnvelope ( < nl > callId , < nl > - StartCall ( callerUserId , callerAuthId , peer ) < nl > + StartCall ( callerUserId , callerAuthId , peer , timeout ) < nl > ) ) . mapTo [ StartCallAck ] map ( ack ⇒ ( callId , ack . eventBusId , ack . callerDeviceId ) ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala < nl > index 91dea72 . . 8130563 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala < nl > @ @ - 35 , 11 + 35 , 11 @ @ final class WebrtcServiceImpl ( implicit system : ActorSystem , sessionRegion : Sessi < nl > } yield Ok ( ResponseGetCallInfo ( peer . asStruct , Vector . empty , users . toVector , eventBusId ) ) < nl > } < nl > < nl > - override def doHandleDoCall ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseDoCall ] ] = < nl > + override def doHandleDoCall ( peer : ApiOutPeer , timeout : Option [ Long ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseDoCall ] ] = < nl > authorized ( clientData ) { implicit client ⇒ < nl > withOutPeerF ( peer ) { < nl > for { < nl > - ( callId , eventBusId , callerDeviceId ) ← webrtcExt . doCall ( client . userId , client . authId , peer . asModel ) < nl > + ( callId , eventBusId , callerDeviceId ) ← webrtcExt . doCall ( client . userId , client . authId , peer . asModel , timeout ) < nl > } yield Ok ( ResponseDoCall ( callId , eventBusId , callerDeviceId ) ) < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json < nl > index ce78eb5 . . e927614 100644 < nl > - - - a / actor - sdk / sdk - api / actor . json < nl > + + + b / actor - sdk / sdk - api / actor . json < nl > @ @ - 11200 , 7 + 11200 , 7 @ @ < nl > " childType " : " UserOutPeer " < nl > } , < nl > " id " : 1 , < nl > - " name " : " userOutPee " < nl > + " name " : " userOutPeer " < nl > } , < nl > { < nl > " type " : " string " , < nl > diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > index fa7eb9b . . 9092056 100644 < nl > - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > @ @ - 9672 , 7 + 9672 , 7 @ @ < nl > < property role = " TrG5h " value = " CheckFeatureEnabled " / > < nl > < node concept = " 2m7Kf5 " id = " 6tgpW9bxE3M " role = " 2m0hLx " > < nl > < property role = " 2m7DUN " value = " 1 " / > < nl > - < property role = " TrG5h " value = " userOutPee " / > < nl > + < property role = " TrG5h " value = " userOutPeer " / > < nl > < node concept = " 2m5mGg " id = " 6tgpW9bxE3T " role = " 2m7DVh " > < nl > < ref role = " 2m5mJy " node = " GBscvBB6ia " resolve = " UserOutPeer " / > < nl > < / node > < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > index a57f360 . . a7b5601 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift < nl > @ @ - 381 , 24 + 381 , 16 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > } < nl > < nl > } else { < nl > - self . stickersButton . hidden = false < nl > - / / if ( self . audioButton . hidden ) { < nl > - / / < nl > - / / self . rightButton . tintColor = appStyle . chatSendColor < nl > - / / self . rightButton . setImage ( UIImage . tinted ( " aa _ keyboard " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) < nl > - / / self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) < nl > - / / self . rightButton . enabled = true < nl > - / / < nl > - / / } else { < nl > - / / < nl > - / / self . rightButton . tintColor = appStyle . chatSendColor < nl > - / / self . rightButton . setImage ( UIImage . tinted ( " aa _ keyboard " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) < nl > - / / self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) < nl > - / / self . rightButton . enabled = true < nl > - / / < nl > - / / } < nl > < nl > - self . micOn = true < nl > + self . stickersButton . hidden = false < nl > + if ( self . micOn = = false ) { < nl > + < nl > + self . rightButton . tintColor = appStyle . chatAttachColor < nl > + self . rightButton . setImage ( UIImage . bundled ( " aa _ micbutton " ) , forState : UIControlState . Normal ) < nl > + self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) < nl > + self . rightButton . enabled = true < nl > + < nl > + } < nl > < nl > } < nl > < nl > @ @ - 417 , 9 + 409 , 11 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > super . didPressRightButton ( sender ) < nl > < nl > } else { < nl > - < nl > + < nl > if ( self . audioButton . hidden ) { < nl > - / / self . textView . resignFirstResponder ( ) < nl > + self . textView . resignFirstResponder ( ) < nl > + < nl > + self . micOn = true < nl > < nl > self . rightButton . tintColor = appStyle . chatAttachColor < nl > self . rightButton . setImage ( UIImage . bundled ( " keyboard _ button " ) , forState : UIControlState . Normal ) < nl > @ @ - 436 , 6 + 430 , 9 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen < nl > < nl > < nl > } else { < nl > + < nl > + self . micOn = false < nl > + < nl > self . audioButton . hidden = true ; < nl > < nl > self . rightButton . tintColor = appStyle . chatAttachColor < nl > diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json < nl > index ae20836 . . 1d17e98 100644 < nl > - - - a / actor - server / actor - core / src / main / actor - api / actor . json < nl > + + + b / actor - server / actor - core / src / main / actor - api / actor . json < nl > @ @ - 11200 , 7 + 11200 , 7 @ @ < nl > " childType " : " UserOutPeer " < nl > } , < nl > " id " : 1 , < nl > - " name " : " userOutPee " < nl > + " name " : " userOutPeer " < nl > } , < nl > { < nl > " type " : " string " , < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala < nl > index 5c94b7e . . 829b63b 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala < nl > @ @ - 193 , 7 + 193 , 7 @ @ private [ frontend ] final class SessionClient ( sessionRegion : SessionRegion ) < nl > case Status . Failure ( e ) ⇒ < nl > log . error ( e , " Failed to check authId " ) < nl > onErrorThenStop ( e ) < nl > - case other = > stash ( ) < nl > + case other ⇒ stash ( ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - models / src / main / protobuf / model . proto b / actor - server / actor - models / src / main / protobuf / model . proto < nl > index da3eceb . . fd543eb 100644 < nl > - - - a / actor - server / actor - models / src / main / protobuf / model . proto < nl > + + + b / actor - server / actor - models / src / main / protobuf / model . proto < nl > @ @ - 75 , 4 + 75 , 10 @ @ message UserPassword { < nl > message MasterKey { < nl > int64 auth _ id = 1 ; < nl > bytes body = 2 ; < nl > + } < nl > + < nl > + message DeviceFeature { < nl > + int64 auth _ id = 1 ; < nl > + string name = 2 ; < nl > + bytes args = 3 ; < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / DeviceFeatureRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / DeviceFeatureRepo . scala < nl > new file mode 100644 < nl > index 0000000 . . 7b66795 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / DeviceFeatureRepo . scala < nl > @ @ - 0 , 0 + 1 , 38 @ @ < nl > + package im . actor . server . persist < nl > + < nl > + import com . google . protobuf . ByteString < nl > + import im . actor . server . db . ActorPostgresDriver . api . _ < nl > + import im . actor . server . model . DeviceFeature < nl > + < nl > + final class DeviceFeatureTable ( tag : Tag ) extends Table [ DeviceFeature ] ( tag , " device _ features " ) { < nl > + def authId = column [ Long ] ( " auth _ id " , O . PrimaryKey ) < nl > + < nl > + def name = column [ String ] ( " name " , O . PrimaryKey ) < nl > + < nl > + def args = column [ ByteString ] ( " args " ) < nl > + < nl > + def * = ( authId , name , args ) < > ( ( DeviceFeature . apply _ ) . tupled , DeviceFeature . unapply ) < nl > + } < nl > + < nl > + object DeviceFeatureRepo { < nl > + val deviceFeatures = TableQuery [ DeviceFeatureTable ] < nl > + < nl > + def byPK ( authId : Rep [ Long ] , name : Rep [ String ] ) = deviceFeatures filter ( df ⇒ df . authId = = = authId & & df . name = = = name ) < nl > + < nl > + val byPKC = Compiled ( byPK _ ) < nl > + val existsC = Compiled { ( authId : Rep [ Long ] , name : Rep [ String ] ) ⇒ < nl > + byPK ( authId , name ) . exists < nl > + } < nl > + < nl > + def enable ( feature : DeviceFeature ) = < nl > + deviceFeatures . insertOrUpdate ( feature ) < nl > + < nl > + def disable ( authId : Long , name : String ) = < nl > + byPKC ( ( authId , name ) ) . delete < nl > + < nl > + def find ( authId : Long , name : String ) = < nl > + byPKC ( ( authId , name ) ) . result . headOption < nl > + < nl > + def exists ( authId : Long , name : String ) = < nl > + existsC ( ( authId , name ) ) . result < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala < nl > index e69de29 . . ac06e74 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala < nl > @ @ - 0 , 0 + 1 , 59 @ @ < nl > + package im . actor . server . api . rpc . service . features < nl > + < nl > + import akka . actor . _ < nl > + import com . google . protobuf . ByteString < nl > + import im . actor . api . rpc . _ < nl > + import im . actor . api . rpc . features . FeaturesService < nl > + import im . actor . api . rpc . misc . { ResponseBool , ResponseVoid } < nl > + import im . actor . api . rpc . peers . ApiUserOutPeer < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . model . DeviceFeature < nl > + import im . actor . server . persist . DeviceFeatureRepo < nl > + < nl > + import scala . concurrent . { ExecutionContext , Future } < nl > + < nl > + final class FeaturesServiceImpl ( implicit system : ActorSystem ) extends FeaturesService { < nl > + override implicit protected val ec : ExecutionContext = system . dispatcher < nl > + < nl > + private val db = DbExtension ( system ) . db < nl > + < nl > + override def jhandleEnableFeature ( < nl > + featureName : String , < nl > + args : Option [ Array [ Byte ] ] , < nl > + clientData : ClientData < nl > + ) : Future [ HandlerResult [ ResponseVoid ] ] = < nl > + authorized ( clientData ) { client ⇒ < nl > + for { < nl > + _ ← db . run ( < nl > + DeviceFeatureRepo . enable ( < nl > + DeviceFeature ( < nl > + client . authId , < nl > + featureName , < nl > + args . map ( ByteString . copyFrom ) . getOrElse ( ByteString . EMPTY ) < nl > + ) < nl > + ) < nl > + ) < nl > + } yield Ok ( ResponseVoid ) < nl > + } < nl > + < nl > + override def jhandleCheckFeatureEnabled ( < nl > + userOutPeer : ApiUserOutPeer , < nl > + featureName : String , < nl > + clientData : ClientData < nl > + ) : Future [ HandlerResult [ ResponseBool ] ] = < nl > + authorized ( clientData ) { client ⇒ < nl > + for { < nl > + exists ← db . run ( DeviceFeatureRepo . exists ( client . authId , featureName ) ) < nl > + } yield Ok ( ResponseBool ( exists ) ) < nl > + } < nl > + < nl > + override def jhandleDisableFeature ( < nl > + featureName : String , < nl > + clientData : ClientData < nl > + ) : Future [ HandlerResult [ ResponseVoid ] ] = < nl > + authorized ( clientData ) { client ⇒ < nl > + for { < nl > + _ ← db . run ( DeviceFeatureRepo . disable ( client . authId , featureName ) ) < nl > + } yield Ok ( ResponseVoid ) < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 32fa728 . . c138818 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . server . api . rpc . service . auth . AuthServiceImpl < nl > import im . actor . server . api . rpc . service . configs . ConfigsServiceImpl < nl > import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl < nl > import im . actor . server . api . rpc . service . device . DeviceServiceImpl < nl > + import im . actor . server . api . rpc . service . features . FeaturesServiceImpl < nl > import im . actor . server . api . rpc . service . files . FilesServiceImpl < nl > import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } < nl > import im . actor . server . api . rpc . service . messaging . { MessagingServiceImpl , ReverseHooksListener } < nl > @ @ - 227 , 6 + 228 , 9 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > system . log . debug ( " Starting StickersServiceImpl " ) < nl > val stickerService = new StickersServiceImpl < nl > < nl > + system . log . debug ( " Starting FeaturesServiceImpl " ) < nl > + val featuresService = new FeaturesServiceImpl < nl > + < nl > val services = Seq ( < nl > authService , < nl > contactsService , < nl > @ @ - 243 , 7 + 247 , 8 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > integrationsService , < nl > webactionsService , < nl > deviceService , < nl > - stickerService < nl > + stickerService , < nl > + featuresService < nl > ) < nl > < nl > system . log . warning ( " Starting ActorBot " )

TEST DIFF:
diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json 
 index 47c23f5 . . fbf3477 100644 
 - - - a / actor - sdk / sdk - api / actor . json 
 + + + b / actor - sdk / sdk - api / actor . json 
 @ @ - 12845 , 6 + 12845 , 17 @ @ 
 } , 
 " id " : 1 , 
 " name " : " peer " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " opt " , 
 + " childType " : { 
 + " type " : " alias " , 
 + " childType " : " msec " 
 + } 
 + } , 
 + " id " : 2 , 
 + " name " : " timeout " 
 } 
 ] 
 } 
 diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 index 141f807 . . 5a1bdd3 100644 
 - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 @ @ - 10999 , 6 + 10999 , 15 @ @ 
 < ref role = " 2m5mJy " node = " GBscvBB6hj " resolve = " OutPeer " / > 
 < / node > 
 < / node > 
 + < node concept = " 2m7Kf5 " id = " 56r0npHiuXf " role = " 2m0hLx " > 
 + < property role = " 2m7DUN " value = " 2 " / > 
 + < property role = " TrG5h " value = " timeout " / > 
 + < node concept = " 2m5nlT " id = " 56r0npHixa9 " role = " 2m7DVh " > 
 + < node concept = " wb0Ql " id = " 56r0npHixaf " role = " 3GH5xg " > 
 + < ref role = " wb18D " node = " 6u8Nlnzqdrd " resolve = " msec " / > 
 + < / node > 
 + < / node > 
 + < / node > 
 < node concept = " Nu42z " id = " 201xLeQvfQP " role = " NuuwV " > 
 < property role = " Nu42W " value = " A25 " / > 
 < / node > 
 diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json 
 index 47c23f5 . . fbf3477 100644 
 - - - a / actor - server / actor - core / src / main / actor - api / actor . json 
 + + + b / actor - server / actor - core / src / main / actor - api / actor . json 
 @ @ - 12845 , 6 + 12845 , 17 @ @ 
 } , 
 " id " : 1 , 
 " name " : " peer " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " opt " , 
 + " childType " : { 
 + " type " : " alias " , 
 + " childType " : " msec " 
 + } 
 + } , 
 + " id " : 2 , 
 + " name " : " timeout " 
 } 
 ] 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 index 630bcb8 . . ea2da0a 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 @ @ - 19 , 6 + 19 , 8 @ @ object EventBus { 
 def isInternal : Boolean 
 def isExternal : Boolean 
 def externalUserId : Option [ UserId ] 
 + def externalAuthId : Option [ AuthId ] 
 + def internalActorRef : Option [ ActorRef ] 
 } 
 final case class InternalClient ( ref : ActorRef ) extends Client { 
 override def isInternal : Boolean = true 
 @ @ - 26 , 6 + 28 , 10 @ @ object EventBus { 
 override def isExternal : Boolean = false 
 
 override def externalUserId : Option [ UserId ] = None 
 + 
 + override def externalAuthId : Option [ AuthId ] = None 
 + 
 + override def internalActorRef = Some ( ref ) 
 } 
 final case class ExternalClient ( userId : UserId , authId : AuthId ) extends Client { 
 override def isInternal : Boolean = false 
 @ @ - 33 , 6 + 39 , 10 @ @ object EventBus { 
 override def isExternal : Boolean = true 
 
 override def externalUserId : Option [ UserId ] = Some ( userId ) 
 + 
 + override def externalAuthId : Option [ AuthId ] = Some ( authId ) 
 + 
 + override def internalActorRef = None 
 } 
 
 final case class Message ( id : String , client : Client , deviceId : Option [ Long ] , message : Array [ Byte ] ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 index 7e1b5b1 . . 96fa35e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusMediator . scala 
 @ @ - 142 , 6 + 142 , 7 @ @ final class EventBusMediator extends Actor with ActorLogging { 
 consumers . put ( client , deviceId ) 
 timeoutOpt foreach ( consumers . keepAlive ( client , _ ) ) 
 sender ( ) ! CreateAck ( deviceId ) 
 + client . internalActorRef foreach context . watch 
 context become created ( deviceId ) 
 case _ ⇒ 
 sender ( ) ! Status . Failure ( EventBusErrors . EventBusNotFound ) 
 @ @ - 196 , 29 + 197 , 39 @ @ final class EventBusMediator extends Actor with ActorLogging { 
 case ConsumerTimedOut ( client ) ⇒ 
 disconnect ( client ) 
 case Join ( client , timeoutOpt ) ⇒ 
 - val deviceId = Random . nextLong ( ) 
 + client . externalAuthId flatMap consumers . byAuthId match { 
 + case Some ( ( _ , deviceId ) ) ⇒ sender ( ) ! JoinAck ( deviceId ) 
 + case None ⇒ 
 + val deviceId = Random . nextLong ( ) 
 + 
 + val update = client match { 
 + case ExternalClient ( userId , _ ) ⇒ UpdateEventBusDeviceConnected ( id , Some ( userId ) , deviceId ) 
 + case InternalClient ( _ ) ⇒ UpdateEventBusDeviceConnected ( id , None , deviceId ) 
 + } 
 
 - val update = client match { 
 - case ExternalClient ( userId , _ ) ⇒ UpdateEventBusDeviceConnected ( id , Some ( userId ) , deviceId ) 
 - case InternalClient ( _ ) ⇒ UpdateEventBusDeviceConnected ( id , None , deviceId ) 
 - } 
 + broadcast ( update ) 
 + this . consumers . actorRefs foreach ( _ ! EventBus . Joined ( id , client , deviceId ) ) 
 + consumers . put ( client , deviceId ) 
 
 - broadcast ( update ) 
 - this . consumers . actorRefs foreach ( _ ! EventBus . Joined ( id , client , deviceId ) ) 
 - consumers . put ( client , deviceId ) 
 + timeoutOpt foreach ( consumers . keepAlive ( client , _ ) ) 
 + client . internalActorRef foreach context . watch 
 
 - timeoutOpt foreach ( consumers . keepAlive ( client , _ ) ) 
 - sender ( ) ! JoinAck ( deviceId ) 
 + sender ( ) ! JoinAck ( deviceId ) 
 + } 
 case Dispose ( client : Client ) ⇒ 
 if ( owner . contains ( client ) ) { 
 log . debug ( " Disposing by owner request " ) 
 dispose ( ) 
 } else sender ( ) ! Status . Failure ( new RuntimeException ( " Attempt to dispose by not an owner " ) ) 
 case Terminated ( ref ) ⇒ 
 + log . debug ( " Terminated { } " , ref ) 
 disconnect ( InternalClient ( ref ) ) 
 } 
 
 private def disconnect ( client : Client ) = { 
 + log . debug ( " Disconnecting { } " , client ) 
 + log . debug ( " owner : { } " , owner ) 
 + log . debug ( " consumers : { } " , consumers . owners ) 
 if ( ( owner . isDefined & & consumers . owners = = Set ( client ) ) | | consumers . devices . toSet = = Set ( client ) ) { 
 log . debug ( " Disposing as no more clients connected " ) 
 dispose ( ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index 3f88425 . . 66edf9c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 35 , 7 + 35 , 7 @ @ object WebrtcCallErrors { 
 private [ webrtc ] sealed trait WebrtcCallMessage 
 
 private [ webrtc ] object WebrtcCallMessages { 
 - final case class StartCall ( callerUserId : UserId , callerAuthId : AuthId , peer : Peer ) extends WebrtcCallMessage 
 + final case class StartCall ( callerUserId : UserId , callerAuthId : AuthId , peer : Peer , timeout : Option [ Long ] ) extends WebrtcCallMessage 
 final case class StartCallAck ( eventBusId : String , callerDeviceId : EventBus . DeviceId ) 
 
 final case class JoinCall ( calleeUserId : UserId , authId : AuthId ) extends WebrtcCallMessage 
 @ @ - 108 , 6 + 108 , 8 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging { 
 
 def receive = waitForStart 
 
 + / / FIXME : set receive timeout 
 + 
 def waitForStart : Receive = { 
 case s : StartCall ⇒ 
 case class Res ( eventBusId : String , callees : Seq [ Int ] , callerDeviceId : EventBus . DeviceId ) 
 @ @ - 117 , 7 + 119 , 7 @ @ private final class WebrtcCallActor extends StashingActor with ActorLogging { 
 ( for { 
 callees ← fetchParticipants ( callerUserId , peer ) map ( _ filterNot ( _ = = callerUserId ) ) 
 eventBusId ← eventBusExt . create ( eventBusClient , timeout = None , isOwned = Some ( true ) ) map ( _ . _ 1 ) 
 - callerDeviceId ← eventBusExt . join ( EventBus . ExternalClient ( s . callerUserId , s . callerAuthId ) , eventBusId , Some ( 16000 ) ) 
 + callerDeviceId ← eventBusExt . join ( EventBus . ExternalClient ( s . callerUserId , s . callerAuthId ) , eventBusId , s . timeout ) 
 _ ← scheduleIncomingCallUpdates ( callees ) 
 } yield Res ( eventBusId , callees , callerDeviceId ) ) pipeTo self 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala 
 index c63e96d . . d3deefb 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala 
 @ @ - 33 , 7 + 33 , 7 @ @ final class WebrtcExtension ( system : ActorSystem ) extends Extension { 
 import im . actor . server . webrtc . WebrtcCallMessages . _ 
 import system . dispatcher 
 
 - private implicit val timeout : Timeout = Timeout ( ActorConfig . defaultTimeout ) 
 + private implicit val defaultTimeout : Timeout = Timeout ( ActorConfig . defaultTimeout ) 
 
 private val extractEntityId : ExtractEntityId = { 
 case WebrtcCallEnvelope ( id , message ) ⇒ ( id . toString , message ) 
 @ @ - 49 , 12 + 49 , 12 @ @ final class WebrtcExtension ( system : ActorSystem ) extends Extension { 
 
 private [ webrtc ] val config = WebrtcConfig . load ( system . settings . config ) . get 
 
 - def doCall ( callerUserId : UserId , callerAuthId : AuthId , peer : Peer ) : Future [ ( Long , String , EventBus . DeviceId ) ] = { 
 + def doCall ( callerUserId : UserId , callerAuthId : AuthId , peer : Peer , timeout : Option [ Long ] ) : Future [ ( Long , String , EventBus . DeviceId ) ] = { 
 val callId = ThreadLocalRandom . current ( ) . nextLong ( ) 
 
 ( region ? WebrtcCallEnvelope ( 
 callId , 
 - StartCall ( callerUserId , callerAuthId , peer ) 
 + StartCall ( callerUserId , callerAuthId , peer , timeout ) 
 ) ) . mapTo [ StartCallAck ] map ( ack ⇒ ( callId , ack . eventBusId , ack . callerDeviceId ) ) 
 } 
 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala 
 index 91dea72 . . 8130563 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala 
 @ @ - 35 , 11 + 35 , 11 @ @ final class WebrtcServiceImpl ( implicit system : ActorSystem , sessionRegion : Sessi 
 } yield Ok ( ResponseGetCallInfo ( peer . asStruct , Vector . empty , users . toVector , eventBusId ) ) 
 } 
 
 - override def doHandleDoCall ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseDoCall ] ] = 
 + override def doHandleDoCall ( peer : ApiOutPeer , timeout : Option [ Long ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseDoCall ] ] = 
 authorized ( clientData ) { implicit client ⇒ 
 withOutPeerF ( peer ) { 
 for { 
 - ( callId , eventBusId , callerDeviceId ) ← webrtcExt . doCall ( client . userId , client . authId , peer . asModel ) 
 + ( callId , eventBusId , callerDeviceId ) ← webrtcExt . doCall ( client . userId , client . authId , peer . asModel , timeout ) 
 } yield Ok ( ResponseDoCall ( callId , eventBusId , callerDeviceId ) ) 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json 
 index ce78eb5 . . e927614 100644 
 - - - a / actor - sdk / sdk - api / actor . json 
 + + + b / actor - sdk / sdk - api / actor . json 
 @ @ - 11200 , 7 + 11200 , 7 @ @ 
 " childType " : " UserOutPeer " 
 } , 
 " id " : 1 , 
 - " name " : " userOutPee " 
 + " name " : " userOutPeer " 
 } , 
 { 
 " type " : " string " , 
 diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 index fa7eb9b . . 9092056 100644 
 - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 @ @ - 9672 , 7 + 9672 , 7 @ @ 
 < property role = " TrG5h " value = " CheckFeatureEnabled " / > 
 < node concept = " 2m7Kf5 " id = " 6tgpW9bxE3M " role = " 2m0hLx " > 
 < property role = " 2m7DUN " value = " 1 " / > 
 - < property role = " TrG5h " value = " userOutPee " / > 
 + < property role = " TrG5h " value = " userOutPeer " / > 
 < node concept = " 2m5mGg " id = " 6tgpW9bxE3T " role = " 2m7DVh " > 
 < ref role = " 2m5mJy " node = " GBscvBB6ia " resolve = " UserOutPeer " / > 
 < / node > 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 index a57f360 . . a7b5601 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Conversation / ConversationViewController . swift 
 @ @ - 381 , 24 + 381 , 16 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 } 
 
 } else { 
 - self . stickersButton . hidden = false 
 - / / if ( self . audioButton . hidden ) { 
 - / / 
 - / / self . rightButton . tintColor = appStyle . chatSendColor 
 - / / self . rightButton . setImage ( UIImage . tinted ( " aa _ keyboard " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) 
 - / / self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) 
 - / / self . rightButton . enabled = true 
 - / / 
 - / / } else { 
 - / / 
 - / / self . rightButton . tintColor = appStyle . chatSendColor 
 - / / self . rightButton . setImage ( UIImage . tinted ( " aa _ keyboard " , color : appStyle . chatAttachColor ) , forState : UIControlState . Normal ) 
 - / / self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) 
 - / / self . rightButton . enabled = true 
 - / / 
 - / / } 
 
 - self . micOn = true 
 + self . stickersButton . hidden = false 
 + if ( self . micOn = = false ) { 
 + 
 + self . rightButton . tintColor = appStyle . chatAttachColor 
 + self . rightButton . setImage ( UIImage . bundled ( " aa _ micbutton " ) , forState : UIControlState . Normal ) 
 + self . rightButton . setTitle ( " " , forState : UIControlState . Normal ) 
 + self . rightButton . enabled = true 
 + 
 + } 
 
 } 
 
 @ @ - 417 , 9 + 409 , 11 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 super . didPressRightButton ( sender ) 
 
 } else { 
 - 
 + 
 if ( self . audioButton . hidden ) { 
 - / / self . textView . resignFirstResponder ( ) 
 + self . textView . resignFirstResponder ( ) 
 + 
 + self . micOn = true 
 
 self . rightButton . tintColor = appStyle . chatAttachColor 
 self . rightButton . setImage ( UIImage . bundled ( " keyboard _ button " ) , forState : UIControlState . Normal ) 
 @ @ - 436 , 6 + 430 , 9 @ @ class ConversationViewController : AAConversationContentController , UIDocumentMen 
 
 
 } else { 
 + 
 + self . micOn = false 
 + 
 self . audioButton . hidden = true ; 
 
 self . rightButton . tintColor = appStyle . chatAttachColor 
 diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json 
 index ae20836 . . 1d17e98 100644 
 - - - a / actor - server / actor - core / src / main / actor - api / actor . json 
 + + + b / actor - server / actor - core / src / main / actor - api / actor . json 
 @ @ - 11200 , 7 + 11200 , 7 @ @ 
 " childType " : " UserOutPeer " 
 } , 
 " id " : 1 , 
 - " name " : " userOutPee " 
 + " name " : " userOutPeer " 
 } , 
 { 
 " type " : " string " , 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala 
 index 5c94b7e . . 829b63b 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala 
 @ @ - 193 , 7 + 193 , 7 @ @ private [ frontend ] final class SessionClient ( sessionRegion : SessionRegion ) 
 case Status . Failure ( e ) ⇒ 
 log . error ( e , " Failed to check authId " ) 
 onErrorThenStop ( e ) 
 - case other = > stash ( ) 
 + case other ⇒ stash ( ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - models / src / main / protobuf / model . proto b / actor - server / actor - models / src / main / protobuf / model . proto 
 index da3eceb . . fd543eb 100644 
 - - - a / actor - server / actor - models / src / main / protobuf / model . proto 
 + + + b / actor - server / actor - models / src / main / protobuf / model . proto 
 @ @ - 75 , 4 + 75 , 10 @ @ message UserPassword { 
 message MasterKey { 
 int64 auth _ id = 1 ; 
 bytes body = 2 ; 
 + } 
 + 
 + message DeviceFeature { 
 + int64 auth _ id = 1 ; 
 + string name = 2 ; 
 + bytes args = 3 ; 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / DeviceFeatureRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / DeviceFeatureRepo . scala 
 new file mode 100644 
 index 0000000 . . 7b66795 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / DeviceFeatureRepo . scala 
 @ @ - 0 , 0 + 1 , 38 @ @ 
 + package im . actor . server . persist 
 + 
 + import com . google . protobuf . ByteString 
 + import im . actor . server . db . ActorPostgresDriver . api . _ 
 + import im . actor . server . model . DeviceFeature 
 + 
 + final class DeviceFeatureTable ( tag : Tag ) extends Table [ DeviceFeature ] ( tag , " device _ features " ) { 
 + def authId = column [ Long ] ( " auth _ id " , O . PrimaryKey ) 
 + 
 + def name = column [ String ] ( " name " , O . PrimaryKey ) 
 + 
 + def args = column [ ByteString ] ( " args " ) 
 + 
 + def * = ( authId , name , args ) < > ( ( DeviceFeature . apply _ ) . tupled , DeviceFeature . unapply ) 
 + } 
 + 
 + object DeviceFeatureRepo { 
 + val deviceFeatures = TableQuery [ DeviceFeatureTable ] 
 + 
 + def byPK ( authId : Rep [ Long ] , name : Rep [ String ] ) = deviceFeatures filter ( df ⇒ df . authId = = = authId & & df . name = = = name ) 
 + 
 + val byPKC = Compiled ( byPK _ ) 
 + val existsC = Compiled { ( authId : Rep [ Long ] , name : Rep [ String ] ) ⇒ 
 + byPK ( authId , name ) . exists 
 + } 
 + 
 + def enable ( feature : DeviceFeature ) = 
 + deviceFeatures . insertOrUpdate ( feature ) 
 + 
 + def disable ( authId : Long , name : String ) = 
 + byPKC ( ( authId , name ) ) . delete 
 + 
 + def find ( authId : Long , name : String ) = 
 + byPKC ( ( authId , name ) ) . result . headOption 
 + 
 + def exists ( authId : Long , name : String ) = 
 + existsC ( ( authId , name ) ) . result 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala 
 index e69de29 . . ac06e74 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / features / FeaturesServiceImpl . scala 
 @ @ - 0 , 0 + 1 , 59 @ @ 
 + package im . actor . server . api . rpc . service . features 
 + 
 + import akka . actor . _ 
 + import com . google . protobuf . ByteString 
 + import im . actor . api . rpc . _ 
 + import im . actor . api . rpc . features . FeaturesService 
 + import im . actor . api . rpc . misc . { ResponseBool , ResponseVoid } 
 + import im . actor . api . rpc . peers . ApiUserOutPeer 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . model . DeviceFeature 
 + import im . actor . server . persist . DeviceFeatureRepo 
 + 
 + import scala . concurrent . { ExecutionContext , Future } 
 + 
 + final class FeaturesServiceImpl ( implicit system : ActorSystem ) extends FeaturesService { 
 + override implicit protected val ec : ExecutionContext = system . dispatcher 
 + 
 + private val db = DbExtension ( system ) . db 
 + 
 + override def jhandleEnableFeature ( 
 + featureName : String , 
 + args : Option [ Array [ Byte ] ] , 
 + clientData : ClientData 
 + ) : Future [ HandlerResult [ ResponseVoid ] ] = 
 + authorized ( clientData ) { client ⇒ 
 + for { 
 + _ ← db . run ( 
 + DeviceFeatureRepo . enable ( 
 + DeviceFeature ( 
 + client . authId , 
 + featureName , 
 + args . map ( ByteString . copyFrom ) . getOrElse ( ByteString . EMPTY ) 
 + ) 
 + ) 
 + ) 
 + } yield Ok ( ResponseVoid ) 
 + } 
 + 
 + override def jhandleCheckFeatureEnabled ( 
 + userOutPeer : ApiUserOutPeer , 
 + featureName : String , 
 + clientData : ClientData 
 + ) : Future [ HandlerResult [ ResponseBool ] ] = 
 + authorized ( clientData ) { client ⇒ 
 + for { 
 + exists ← db . run ( DeviceFeatureRepo . exists ( client . authId , featureName ) ) 
 + } yield Ok ( ResponseBool ( exists ) ) 
 + } 
 + 
 + override def jhandleDisableFeature ( 
 + featureName : String , 
 + clientData : ClientData 
 + ) : Future [ HandlerResult [ ResponseVoid ] ] = 
 + authorized ( clientData ) { client ⇒ 
 + for { 
 + _ ← db . run ( DeviceFeatureRepo . disable ( client . authId , featureName ) ) 
 + } yield Ok ( ResponseVoid ) 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 32fa728 . . c138818 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . server . api . rpc . service . auth . AuthServiceImpl 
 import im . actor . server . api . rpc . service . configs . ConfigsServiceImpl 
 import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl 
 import im . actor . server . api . rpc . service . device . DeviceServiceImpl 
 + import im . actor . server . api . rpc . service . features . FeaturesServiceImpl 
 import im . actor . server . api . rpc . service . files . FilesServiceImpl 
 import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } 
 import im . actor . server . api . rpc . service . messaging . { MessagingServiceImpl , ReverseHooksListener } 
 @ @ - 227 , 6 + 228 , 9 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 system . log . debug ( " Starting StickersServiceImpl " ) 
 val stickerService = new StickersServiceImpl 
 
 + system . log . debug ( " Starting FeaturesServiceImpl " ) 
 + val featuresService = new FeaturesServiceImpl 
 + 
 val services = Seq ( 
 authService , 
 contactsService , 
 @ @ - 243 , 7 + 247 , 8 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 integrationsService , 
 webactionsService , 
 deviceService , 
 - stickerService 
 + stickerService , 
 + featuresService 
 ) 
 
 system . log . warning ( " Starting ActorBot " )
