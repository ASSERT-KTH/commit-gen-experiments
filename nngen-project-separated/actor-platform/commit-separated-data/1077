BLEU SCORE: 0.13292417883329388

TEST MSG: feat ( server : push ) : integration with Actor Push ( rabbitmq )
GENERATED MSG: feat ( server ) : support for multiple gcm keys

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / sequence . proto b / actor - server / actor - core / src / main / protobuf / sequence . proto < nl > index ef1c202 . . fb353a2 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / sequence . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / sequence . proto < nl > @ @ - 66 , 6 + 66 , 7 @ @ message UserSequenceCommands { < nl > oneof creds { < nl > GooglePushCredentials google = 1 ; < nl > ApplePushCredentials apple = 2 ; < nl > + ActorPushCredentials actor = 3 ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / resources / reference . conf b / actor - server / actor - core / src / main / resources / reference . conf < nl > index afe2ffd . . 81d251d 100644 < nl > - - - a / actor - server / actor - core / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - core / src / main / resources / reference . conf < nl > @ @ - 28 , 6 + 28 , 16 @ @ services { < nl > keys : [ ] < nl > } < nl > } < nl > + < nl > + rabbitmq { < nl > + virtual - host = " / " < nl > + hosts = [ " 127 . 0 . 0 . 1 " ] < nl > + username = " guest " < nl > + password = " guest " < nl > + port = 5672 < nl > + ssl = false < nl > + timeout = 3s < nl > + } < nl > } < nl > < nl > push { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / actor / ActorPush . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / actor / ActorPush . scala < nl > new file mode 100644 < nl > index 0000000 . . 811caf8 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / actor / ActorPush . scala < nl > @ @ - 0 , 0 + 1 , 100 @ @ < nl > + package im . actor . server . push . actor < nl > + < nl > + import akka . actor . _ < nl > + import akka . event . Logging < nl > + import com . rabbitmq . client . { Consumer , TopologyRecoveryException , Channel , Connection } < nl > + import com . rabbitmq . client . impl . DefaultExceptionHandler < nl > + import com . spingo . op _ rabbit . _ < nl > + import im . actor . server . model . push . ActorPushCredentials < nl > + import io . circe . generic . auto . _ < nl > + import io . circe . syntax . _ < nl > + < nl > + import scala . util . { Failure , Success , Try } < nl > + < nl > + final case class ActorPushMessage ( data : Map [ String , String ] ) < nl > + < nl > + final class ActorPush ( system : ActorSystem ) extends Extension { < nl > + private val log = Logging ( system , getClass ) < nl > + < nl > + val rabbitControl = < nl > + Try ( ConnectionParams . fromConfig ( system . settings . config . getConfig ( " services . rabbitmq " ) ) ) match { < nl > + case Success ( config ) ⇒ < nl > + system . actorOf ( Props ( new RabbitControl ( config . copy ( exceptionHandler = new ExceptionHandler ( system ) ) ) ) , " rabbit - control " ) < nl > + case Failure ( e ) ⇒ < nl > + log . error ( e , " Failed to parse rabbitmq configuration " ) < nl > + system . deadLetters < nl > + } < nl > + < nl > + def deliver ( seq : Int , creds : ActorPushCredentials ) : Unit = < nl > + rabbitControl ! Message . topic ( < nl > + ActorPushMessage ( data = Map ( < nl > + " seq " → seq . toString < nl > + ) ) . asJson . toString ( ) , < nl > + routingKey = creds . topic < nl > + ) < nl > + } < nl > + < nl > + private final class ExceptionHandler ( system : ActorSystem ) extends DefaultExceptionHandler { < nl > + private val log = Logging ( system , getClass ) < nl > + < nl > + override def handleUnexpectedConnectionDriverException ( conn : Connection , exception : Throwable ) : Unit = { < nl > + log . error ( exception , " Unexpected connection driver " ) < nl > + super . handleUnexpectedConnectionDriverException ( conn , exception ) < nl > + } < nl > + < nl > + override def handleConsumerException ( channel : Channel , exception : Throwable , consumer : Consumer , consumerTag : String , methodName : String ) : Unit = { < nl > + log . error ( exception , " Consumer exception , consumer : { } , consumerTag : { } , methodName : { } " , consumer , consumerTag , methodName ) < nl > + super . handleConsumerException ( channel , exception , consumer , consumerTag , methodName ) < nl > + } < nl > + < nl > + override def handleBlockedListenerException ( connection : Connection , exception : Throwable ) : Unit = { < nl > + log . error ( exception , " Blocked listener " ) < nl > + super . handleBlockedListenerException ( connection , exception ) < nl > + } < nl > + < nl > + override def handleChannelRecoveryException ( ch : Channel , exception : Throwable ) : Unit = { < nl > + log . error ( exception , " Channel recovery error " ) < nl > + super . handleChannelRecoveryException ( ch , exception ) < nl > + } < nl > + < nl > + override def handleFlowListenerException ( channel : Channel , exception : Throwable ) : Unit = { < nl > + log . error ( exception , " Flow listener error " ) < nl > + super . handleFlowListenerException ( channel , exception ) < nl > + } < nl > + < nl > + override def handleChannelKiller ( channel : Channel , exception : Throwable , what : String ) : Unit = { < nl > + log . error ( exception , " Channel killer , what : { } " , what ) < nl > + super . handleChannelKiller ( channel , exception , what ) < nl > + } < nl > + < nl > + override def handleReturnListenerException ( channel : Channel , exception : Throwable ) : Unit = { < nl > + log . error ( exception , " Return listener error " ) < nl > + super . handleReturnListenerException ( channel , exception ) < nl > + } < nl > + < nl > + override def handleConnectionKiller ( connection : Connection , exception : Throwable , what : String ) : Unit = { < nl > + log . error ( exception , " Connection killer , what : { } " , what ) < nl > + super . handleConnectionKiller ( connection , exception , what ) < nl > + } < nl > + < nl > + override def handleTopologyRecoveryException ( conn : Connection , ch : Channel , exception : TopologyRecoveryException ) : Unit = { < nl > + log . error ( exception , " Topology recovery error , channel : { } " , ch ) < nl > + super . handleTopologyRecoveryException ( conn , ch , exception ) < nl > + } < nl > + < nl > + override def handleConfirmListenerException ( channel : Channel , exception : Throwable ) : Unit = { < nl > + log . error ( exception , " Confirm listener error " ) < nl > + super . handleConfirmListenerException ( channel , exception ) < nl > + } < nl > + < nl > + override def handleConnectionRecoveryException ( conn : Connection , exception : Throwable ) : Unit = { < nl > + log . error ( exception , " Connection recovery error " ) < nl > + super . handleConnectionRecoveryException ( conn , exception ) < nl > + } < nl > + } < nl > + < nl > + object ActorPush extends ExtensionId [ ActorPush ] with ExtensionIdProvider { < nl > + override def createExtension ( system : ExtendedActorSystem ) : ActorPush = new ActorPush ( system ) < nl > + < nl > + override def lookup ( ) : ExtensionId [ _ < : Extension ] = ActorPush < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala < nl > index 08d0b58 . . a23f95d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala < nl > @ @ - 12 , 7 + 12 , 7 @ @ import im . actor . api . rpc . Update < nl > import im . actor . api . rpc . messaging . UpdateMessage < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . model . _ < nl > - import im . actor . server . model . push . { ApplePushCredentials ⇒ ApplePushCredentialsModel , GooglePushCredentials ⇒ GooglePushCredentialsModel , PushCredentials } < nl > + import im . actor . server . model . push . { ApplePushCredentials ⇒ ApplePushCredentialsModel , GooglePushCredentials ⇒ GooglePushCredentialsModel , ActorPushCredentials ⇒ ActorPushCredentialsModel , PushCredentials } < nl > import im . actor . server . persist . AuthSessionRepo < nl > import im . actor . server . persist . push . ApplePushCredentialsRepo < nl > import im . actor . server . persist . sequence . UserSequenceRepo < nl > @ @ - 184 , 12 + 184 , 15 @ @ final class SeqUpdatesExtension ( < nl > < nl > def registerApplePushCredentials ( creds : ApplePushCredentialsModel ) = registerPushCredentials ( creds ) < nl > < nl > + def registerActorPushCredentials ( creds : ActorPushCredentialsModel ) = registerPushCredentials ( creds ) < nl > + < nl > / / TODO : real future < nl > def registerPushCredentials ( creds : PushCredentials ) = < nl > withAuthSession ( creds . authId ) { session ⇒ < nl > val register = creds match { < nl > case c : GooglePushCredentialsModel ⇒ RegisterPushCredentials ( ) . withGoogle ( c ) < nl > case c : ApplePushCredentialsModel ⇒ RegisterPushCredentials ( ) . withApple ( c ) < nl > + case c : ActorPushCredentialsModel ⇒ RegisterPushCredentials ( ) . withActor ( c ) < nl > } < nl > region . ref ! Envelope ( session . userId ) . withRegisterPushCredentials ( register ) < nl > Future . successful ( ( ) ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala < nl > index 28f31e7 . . 74d0c8f 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala < nl > @ @ - 3 , 11 + 3 , 12 @ @ package im . actor . server . sequence < nl > import akka . actor . _ < nl > import akka . pattern . pipe < nl > import im . actor . server . db . DbExtension < nl > - import im . actor . server . model . push . { ApplePushCredentials , GooglePushCredentials , PushCredentials } < nl > + import im . actor . server . model . push . { ActorPushCredentials , ApplePushCredentials , GooglePushCredentials , PushCredentials } < nl > import im . actor . server . model . { DeviceType , Peer , PeerType } < nl > import im . actor . server . persist . AuthSessionRepo < nl > import im . actor . server . persist . configs . ParameterRepo < nl > - import im . actor . server . persist . push . { ApplePushCredentialsRepo , GooglePushCredentialsRepo } < nl > + import im . actor . server . persist . push . { ActorPushCredentialsRepo , ApplePushCredentialsRepo , GooglePushCredentialsRepo } < nl > + import im . actor . server . push . actor . ActorPush < nl > import im . actor . server . sequence . UserSequenceCommands . ReloadSettings < nl > import slick . dbio . DBIO < nl > < nl > @ @ - 165 , 6 + 166 , 8 @ @ private [ sequence ] final class VendorPush ( < nl > register ( r . getApple ) < nl > case r : RegisterPushCredentials if r . creds . isGoogle ⇒ < nl > register ( r . getGoogle ) < nl > + case r : RegisterPushCredentials if r . creds . isActor ⇒ < nl > + register ( r . getActor ) < nl > case UnregisterPushCredentials ( authId ) ⇒ < nl > unregister ( authId ) < nl > case DeliverPush ( seq , rules ) ⇒ < nl > @ @ - 185 , 13 + 188 , 16 @ @ private [ sequence ] final class VendorPush ( < nl > db . run ( for { < nl > googleCreds ← GooglePushCredentialsRepo . findByUser ( userId ) < nl > appleCreds ← ApplePushCredentialsRepo . findByUser ( userId ) < nl > + actorCreds ← ActorPushCredentialsRepo . findByUser ( userId ) < nl > google ← DBIO . sequence ( googleCreds map withInfo ) map ( _ . flatten ) < nl > apple ← DBIO . sequence ( appleCreds map withInfo ) map ( _ . flatten ) < nl > - } yield Initialized ( apple + + google ) ) pipeTo self < nl > + actor ← DBIO . sequence ( actorCreds map withInfo ) map ( _ . flatten ) < nl > + } yield Initialized ( apple + + google + + actor ) ) pipeTo self < nl > } < nl > < nl > / * * < nl > * Delivers a push to all credentials according to push rules < nl > + * < nl > * @ param seq < nl > * @ param rules < nl > * / < nl > @ @ - 203 , 6 + 209 , 7 @ @ private [ sequence ] final class VendorPush ( < nl > < nl > / * * < nl > * Delivers to a specific creds according to push rules < nl > + * < nl > * @ param seq < nl > * @ param rules < nl > * @ param creds < nl > @ @ - 264 , 6 + 271 , 7 @ @ private [ sequence ] final class VendorPush ( < nl > < nl > / * * < nl > * Delivers an invisible push with seq and contentAvailable < nl > + * < nl > * @ param seq < nl > * @ param creds < nl > * / < nl > @ @ - 273 , 11 + 281 , 14 @ @ private [ sequence ] final class VendorPush ( < nl > googlePushProvider . deliverInvisible ( seq , c ) < nl > case c : ApplePushCredentials ⇒ < nl > applePushProvider . deliverInvisible ( seq , c ) < nl > + case c : ActorPushCredentials ⇒ < nl > + ActorPush ( context . system ) . deliver ( seq = seq , c ) < nl > } < nl > } < nl > < nl > / * * < nl > * Delivers a visible push with seq and ( optionally ) text , sound , vibration < nl > + * < nl > * @ param seq < nl > * @ param creds < nl > * @ param data < nl > @ @ - 306 , 6 + 317 , 8 @ @ private [ sequence ] final class VendorPush ( < nl > isSoundEnabled = isSoundEnabled , < nl > isVibrationEnabled = isVibrationEnabled < nl > ) < nl > + case c : ActorPushCredentials ⇒ < nl > + ActorPush ( context . system ) . deliver ( seq = seq , c ) < nl > } < nl > } < nl > < nl > @ @ - 314 , 6 + 327 , 7 @ @ private [ sequence ] final class VendorPush ( < nl > _ ← creds match { < nl > case c : GooglePushCredentials ⇒ GooglePushCredentialsRepo . createOrUpdate ( c ) < nl > case c : ApplePushCredentials ⇒ ApplePushCredentialsRepo . createOrUpdate ( c ) < nl > + case c : ActorPushCredentials ⇒ ActorPushCredentialsRepo . createOrUpdate ( c ) < nl > } < nl > appIdCredsOpt ← withInfo ( creds ) < nl > } yield { < nl > @ @ - 336 , 6 + 350 , 7 @ @ private [ sequence ] final class VendorPush ( < nl > db . run ( creds match { < nl > case c : GooglePushCredentials ⇒ GooglePushCredentialsRepo . delete ( c . authId ) < nl > case c : ApplePushCredentials ⇒ ApplePushCredentialsRepo . delete ( c . authId ) < nl > + case c : ActorPushCredentials ⇒ ActorPushCredentialsRepo . delete ( c . authId ) < nl > } ) onFailure { < nl > case e ⇒ log . error ( " Failed to unregister creds " ) < nl > } < nl > diff - - git a / actor - server / actor - models / src / main / protobuf / model / push . proto b / actor - server / actor - models / src / main / protobuf / model / push . proto < nl > index 5b015db . . 6b9657b 100644 < nl > - - - a / actor - server / actor - models / src / main / protobuf / model / push . proto < nl > + + + b / actor - server / actor - models / src / main / protobuf / model / push . proto < nl > @ @ - 19 , 3 + 19 , 10 @ @ message ApplePushCredentials { < nl > int32 apns _ key = 2 ; < nl > bytes token = 3 ; < nl > } < nl > + < nl > + message ActorPushCredentials { < nl > + option ( scalapb . message ) . extends = " im . actor . server . model . push . PushCredentials " ; < nl > + < nl > + int64 auth _ id = 1 ; < nl > + string topic = 2 ; < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20160122065245 _ _ CreateActorPushCredentials . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20160122065245 _ _ CreateActorPushCredentials . sql < nl > new file mode 100644 < nl > index 0000000 . . 7e67afe < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20160122065245 _ _ CreateActorPushCredentials . sql < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + CREATE TABLE actor _ push _ credentials ( < nl > + auth _ id BIGINT NOT NULL , < nl > + topic TEXT NOT NULL , < nl > + PRIMARY KEY ( auth _ id ) < nl > + ) ; < nl > + < nl > + CREATE UNIQUE INDEX ON actor _ push _ credentials ( topic ) ; < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ActorPushCredentialsRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ActorPushCredentialsRepo . scala < nl > new file mode 100644 < nl > index 0000000 . . 9576c8e < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ActorPushCredentialsRepo . scala < nl > @ @ - 0 , 0 + 1 , 58 @ @ < nl > + package im . actor . server . persist . push < nl > + < nl > + import im . actor . server . model . push . ActorPushCredentials < nl > + import im . actor . server . db . ActorPostgresDriver . api . _ < nl > + import im . actor . server . persist . AuthIdRepo < nl > + < nl > + import scala . concurrent . ExecutionContext < nl > + import scala . language . postfixOps < nl > + < nl > + final class ActorPushCredentialsTable ( tag : Tag ) extends Table [ ActorPushCredentials ] ( tag , " actor _ push _ credentials " ) { < nl > + def authId = column [ Long ] ( " auth _ id " , O . PrimaryKey ) < nl > + < nl > + def topic = column [ String ] ( " topic " ) < nl > + < nl > + def * = ( authId , topic ) < > ( ( ActorPushCredentials . apply _ ) . tupled , ActorPushCredentials . unapply ) < nl > + } < nl > + < nl > + object ActorPushCredentialsRepo { < nl > + val creds = TableQuery [ ActorPushCredentialsTable ] < nl > + < nl > + def byTopic ( topic : String ) : Query [ ActorPushCredentialsTable , ActorPushCredentials , Seq ] = < nl > + creds . filter ( _ . topic = = = topic ) < nl > + < nl > + def createOrUpdate ( authId : Long , topic : String ) ( implicit ec : ExecutionContext ) = { < nl > + for { < nl > + _ ← creds . filterNot ( _ . authId = = = authId ) . filter ( c ⇒ c . topic = = = topic ) . delete < nl > + r ← creds . insertOrUpdate ( ActorPushCredentials ( authId , topic ) ) < nl > + } yield r < nl > + } < nl > + < nl > + def createOrUpdate ( c : ActorPushCredentials ) = < nl > + creds . insertOrUpdate ( c ) < nl > + < nl > + def byAuthId ( authId : Rep [ Long ] ) = creds . filter ( _ . authId = = = authId ) < nl > + < nl > + val byAuthIdC = Compiled ( byAuthId _ ) < nl > + < nl > + def find ( authId : Long ) = < nl > + byAuthIdC ( authId ) . result . headOption < nl > + < nl > + def find ( authIds : Set [ Long ] ) = < nl > + creds filter ( _ . authId inSet authIds ) result < nl > + < nl > + def findByUser ( userId : Int ) ( implicit ec : ExecutionContext ) = < nl > + for { < nl > + authIds ← AuthIdRepo . activeByUserIdCompiled ( userId ) . result < nl > + creds ← find ( authIds map ( _ . id ) toSet ) < nl > + } yield creds < nl > + < nl > + def delete ( authId : Long ) = < nl > + creds . filter ( _ . authId = = = authId ) . delete < nl > + < nl > + def findByTopic ( topic : String ) = < nl > + byTopic ( topic ) . result < nl > + < nl > + def deleteByTopic ( topic : String ) = < nl > + byTopic ( topic ) . delete < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala < nl > index 3e291e0 . . 43c7cf3 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala < nl > @ @ - 57 , 9 + 57 , 17 @ @ final class PushServiceImpl ( < nl > } < nl > < nl > override def jhandleRegisterActorPush ( < nl > - endpoint : String , < nl > + topic : String , < nl > publicKeys : IndexedSeq [ ApiEncryptionKey ] , < nl > clientData : ClientData < nl > - ) : Future [ HandlerResult [ ResponseVoid ] ] = < nl > - Future . failed ( new RuntimeException ( " Not implemented " ) ) < nl > + ) : Future [ HandlerResult [ ResponseVoid ] ] = { < nl > + val creds = model . push . ActorPushCredentials ( clientData . authId , topic ) < nl > + < nl > + db . run ( for { < nl > + _ ← persist . push . ActorPushCredentialsRepo . deleteByTopic ( topic ) < nl > + _ ← persist . push . ActorPushCredentialsRepo . createOrUpdate ( clientData . authId , topic ) < nl > + _ = seqUpdExt . registerActorPushCredentials ( creds ) < nl > + } yield Ok ( ResponseVoid ) ) < nl > + } < nl > + < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index f806cf0 . . fbd130e 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 102 , 6 + 102 , 7 @ @ object Dependencies { < nl > < nl > val tyrex = " tyrex " % " tyrex " % " 1 . 0 . 1 " < nl > < nl > + val opRabbit = " com . spingo " % % " op - rabbit - core " % " 1 . 2 . 1 " < nl > val pushy = " com . relayrides " % " pushy " % " 0 . 4 . 3 " < nl > < nl > val logbackClassic = " ch . qos . logback " % " logback - classic " % " 1 . 1 . 2 " < nl > @ @ - 164 , 6 + 165 , 7 @ @ object Dependencies { < nl > akkaClusterSharding , < nl > akkaDdata , < nl > caffeine , < nl > + opRabbit , < nl > pushy , < nl > jodaTime , < nl > postgresJdbc , < nl > diff - - git a / actor - server / project / Resolvers . scala b / actor - server / project / Resolvers . scala < nl > index 2c5311a . . c90beee 100644 < nl > - - - a / actor - server / project / Resolvers . scala < nl > + + + b / actor - server / project / Resolvers . scala < nl > @ @ - 10 , 7 + 10 , 12 @ @ object Resolvers { < nl > Resolver . bintrayRepo ( " dnvriend " , " maven " ) , < nl > Resolver . bintrayRepo ( " dwhjames " , " maven " ) , < nl > Resolver . bintrayRepo ( " krasserm " , " maven " ) , < nl > - " gcm - server - repository " at " https : / / raw . githubusercontent . com / slorber / gcm - server - repository / master / releases / " , < nl > + < nl > + / / for op - rabbit < nl > + " The New Motion Public Repo " at " http : / / nexus . thenewmotion . com / content / groups / public / " , < nl > + / / for akka - rabbitmq ( needed by op - rabbit ) < nl > + " SpinGo OSS " at " http : / / spingo - oss . s3 . amazonaws . com / repositories / releases " , < nl > + < nl > Resolver . sonatypeRepo ( " snapshots " ) < nl > ) < nl > }
NEAREST DIFF (one line): diff - - git a / actor - apps / core / src / main / java / im / actor / model / modules / Auth . java b / actor - apps / core / src / main / java / im / actor / model / modules / Auth . java < nl > index 5575c4d . . 5d67138 100644 < nl > - - - a / actor - apps / core / src / main / java / im / actor / model / modules / Auth . java < nl > + + + b / actor - apps / core / src / main / java / im / actor / model / modules / Auth . java < nl > @ @ - 94 , 6 + 94 , 8 @ @ public class Auth extends BaseModule { < nl > } < nl > < nl > private void onLoggedIn ( final CommandCallback < AuthState > callback , ResponseAuth response ) { < nl > + < nl > + < nl > preferences ( ) . putBool ( KEY _ AUTH , true ) ; < nl > state = AuthState . LOGGED _ IN ; < nl > myUid = response . getUser ( ) . getId ( ) ; < nl > diff - - git a / actor - server / actor - commons - base / src / main / resources / reference . conf b / actor - server / actor - commons - base / src / main / resources / reference . conf < nl > deleted file mode 100644 < nl > index 090d89d . . 0000000 < nl > - - - a / actor - server / actor - commons - base / src / main / resources / reference . conf < nl > + + + / dev / null < nl > @ @ - 1 , 56 + 0 , 0 @ @ < nl > - akka { < nl > - extensions = [ " akka . contrib . pattern . DistributedPubSubExtension " ] < nl > - < nl > - loggers = [ " akka . event . slf4j . Slf4jLogger " ] < nl > - < nl > - persistence { < nl > - journal . plugin = " kafka - journal " < nl > - snapshot - store . plugin = " kafka - snapshot - store " < nl > - } < nl > - < nl > - actor { < nl > - provider = " akka . cluster . ClusterActorRefProvider " < nl > - extensions + = [ " com . romix . akka . serialization . kryo . KryoSerializationExtension $ " ] < nl > - < nl > - serializers { < nl > - kryo = " com . romix . akka . serialization . kryo . KryoSerializer " < nl > - } < nl > - < nl > - serialization - bindings { < nl > - " im . actor . server . commons . serialization . KryoSerializable " = kryo < nl > - " akka . actor . ActorRef " = kryo < nl > - } < nl > - < nl > - kryo { < nl > - type = " graph " < nl > - idstrategy = " incremental " < nl > - < nl > - serializer - pool - size = 16 < nl > - < nl > - buffer - size = 4096 < nl > - < nl > - max - buffer - size = - 1 < nl > - < nl > - use - manifests = false < nl > - < nl > - post - serialization - transformations = " off " < nl > - < nl > - implicit - registration - logging = true < nl > - < nl > - kryo - trace = false < nl > - < nl > - kryo - custom - serializer - init = " im . actor . server . commons . serialization . KryoInit " < nl > - } < nl > - } < nl > - < nl > - remote { < nl > - netty . tcp { < nl > - hostname = " 127 . 0 . 0 . 1 " < nl > - port = 2553 < nl > - } < nl > - } < nl > - < nl > - cluster { < nl > - seed - nodes = [ " akka . tcp : / / actor - server @ 127 . 0 . 0 . 1 : 2553 " ] < nl > - } < nl > - } < nl > diff - - git a / actor - server / actor - push / src / main / resources / reference . conf b / actor - server / actor - push / src / main / resources / reference . conf < nl > index b4c0d0c . . 05fdbab 100644 < nl > - - - a / actor - server / actor - push / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - push / src / main / resources / reference . conf < nl > @ @ - 8 , 16 + 8 , 27 @ @ akka { < nl > } < nl > } < nl > < nl > - push { < nl > - seq - updates - manager { < nl > - receive - timeout = 120 seconds < nl > - } < nl > - < nl > + services { < nl > apple { < nl > - certs = [ ] < nl > - sandbox = false < nl > + push { < nl > + keys { < nl > + < nl > + } < nl > + } < nl > } < nl > < nl > google { < nl > + push { < nl > + keys { < nl > + < nl > + } < nl > + } < nl > } < nl > } < nl > + < nl > + push { < nl > + seq - updates - manager { < nl > + receive - timeout = 120 seconds < nl > + } < nl > + } < nl > + < nl > diff - - git a / actor - server / actor - push / src / main / scala / im / actor / server / push / ApplePushManager . scala b / actor - server / actor - push / src / main / scala / im / actor / server / push / ApplePushManager . scala < nl > index b1e024c . . be84d5b 100644 < nl > - - - a / actor - server / actor - push / src / main / scala / im / actor / server / push / ApplePushManager . scala < nl > + + + b / actor - server / actor - push / src / main / scala / im / actor / server / push / ApplePushManager . scala < nl > @ @ - 50 , 9 + 50 , 8 @ @ class ApplePushManager ( config : ApplePushManagerConfig , actorSystem : ActorSystem ) < nl > ( cert . key , mgr ) < nl > } . toMap < nl > < nl > - def getInstance ( key : Int ) : Option [ PushManager [ SimpleApnsPushNotification ] ] = { < nl > + def getInstance ( key : Int ) : Option [ PushManager [ SimpleApnsPushNotification ] ] = < nl > managers . get ( key ) < nl > - } < nl > } < nl > < nl > private class LoggingRejectedNotificationListener ( actorSystem : ActorSystem ) extends RejectedNotificationListener [ SimpleApnsPushNotification ] { < nl > diff - - git a / actor - server / actor - push / src / main / scala / im / actor / server / push / GooglePushManager . scala b / actor - server / actor - push / src / main / scala / im / actor / server / push / GooglePushManager . scala < nl > new file mode 100644 < nl > index 0000000 . . 2d2ff74 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - push / src / main / scala / im / actor / server / push / GooglePushManager . scala < nl > @ @ - 0 , 0 + 1 , 40 @ @ < nl > + package im . actor . server . push < nl > + < nl > + import scala . util . Try < nl > + < nl > + import com . github . kxbmap . configs . _ < nl > + import com . google . android . gcm . server . Sender < nl > + import com . typesafe . config . Config < nl > + < nl > + case class GooglePushKey ( projectId : Long , key : String ) < nl > + < nl > + object GooglePushKey { < nl > + def load ( config : Config ) : Try [ GooglePushKey ] = { < nl > + for { < nl > + projectId ← config . get [ Try [ Long ] ] ( " project - id " ) < nl > + key ← config . get [ Try [ String ] ] ( " key " ) < nl > + } yield GooglePushKey ( projectId , key ) < nl > + } < nl > + } < nl > + < nl > + case class GooglePushManagerConfig ( keys : List [ GooglePushKey ] ) < nl > + < nl > + object GooglePushManagerConfig { < nl > + def load ( googlePushConfig : Config ) : Try [ GooglePushManagerConfig ] = < nl > + for { < nl > + keyConfigs ← googlePushConfig . get [ Try [ List [ Config ] ] ] ( " keys " ) < nl > + keys ← Try ( keyConfigs map ( GooglePushKey . load ( _ ) . get ) ) < nl > + } yield GooglePushManagerConfig ( keys ) < nl > + } < nl > + < nl > + class GooglePushManager ( config : GooglePushManagerConfig ) { < nl > + private val senders : Map [ Long , Sender ] = < nl > + ( config . keys map { < nl > + case GooglePushKey ( projectId , key ) ⇒ < nl > + val sender = new Sender ( key ) < nl > + ( projectId → sender ) < nl > + } ) . toMap < nl > + < nl > + def getInstance ( key : Long ) : Option [ Sender ] = < nl > + senders . get ( key ) < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - push / src / main / scala / im / actor / server / push / GooglePusher . scala b / actor - server / actor - push / src / main / scala / im / actor / server / push / GooglePusher . scala < nl > index 8355bea . . 70561b8 100644 < nl > - - - a / actor - server / actor - push / src / main / scala / im / actor / server / push / GooglePusher . scala < nl > + + + b / actor - server / actor - push / src / main / scala / im / actor / server / push / GooglePusher . scala < nl > @ @ - 11 , 61 + 11 , 66 @ @ import im . actor . server . models < nl > import im . actor . server . persist < nl > < nl > / / FIXME : # perf pinned dispatcher < nl > - private [ push ] class GooglePusher ( gcmSender : Sender , db : Database ) ( implicit system : ActorSystem ) extends VendorPush { < nl > + private [ push ] class GooglePusher ( pushManager : GooglePushManager , db : Database ) ( implicit system : ActorSystem ) extends VendorPush { < nl > implicit val ec : ExecutionContext = system . dispatcher < nl > < nl > def deliverGooglePush ( creds : models . push . GooglePushCredentials , authId : Long , seq : Int , textOpt : Option [ String ] , originPeerOpt : Option [ Peer ] ) : Unit = { < nl > - system . log . debug ( " Delivering google push , authId : { } , seq : { } " , authId , seq ) < nl > + pushManager . getInstance ( creds . projectId ) match { < nl > + case Some ( gcmSender ) ⇒ < nl > + system . log . debug ( " Delivering google push , authId : { } , seq : { } " , authId , seq ) < nl > < nl > - val builder = ( new Message . Builder ) < nl > - . collapseKey ( authId . toString ) < nl > - . addData ( " seq " , seq . toString ) < nl > + val builder = ( new Message . Builder ) < nl > + . collapseKey ( authId . toString ) < nl > + . addData ( " seq " , seq . toString ) < nl > < nl > - val messageAction = textOpt match { < nl > - case Some ( text ) ⇒ < nl > - persist . AuthId . findUserId ( authId ) flatMap { < nl > - case Some ( userId ) ⇒ < nl > - persist . AuthSession . findAppIdByAuthId ( authId ) flatMap { < nl > - case Some ( appId ) ⇒ < nl > - val category = models . AuthSession . appCategory ( appId ) < nl > - val paramBase = s " category . $ { category } . notification " < nl > + val messageAction = textOpt match { < nl > + case Some ( text ) ⇒ < nl > + persist . AuthId . findUserId ( authId ) flatMap { < nl > + case Some ( userId ) ⇒ < nl > + persist . AuthSession . findAppIdByAuthId ( authId ) flatMap { < nl > + case Some ( appId ) ⇒ < nl > + val category = models . AuthSession . appCategory ( appId ) < nl > + val paramBase = s " category . $ { category } . notification " < nl > < nl > - ( originPeerOpt match { < nl > - case Some ( originPeer ) ⇒ < nl > - getChatNotificationEnabled ( userId , paramBase , originPeer ) < nl > - case None ⇒ DBIO . successful ( true ) < nl > - } ) flatMap { < nl > - case true ⇒ < nl > - for { < nl > - showText ← getShowText ( userId , paramBase ) < nl > - } yield { < nl > - if ( showText ) { < nl > - builder . addData ( " message " , text ) < nl > - } < nl > + ( originPeerOpt match { < nl > + case Some ( originPeer ) ⇒ < nl > + getChatNotificationEnabled ( userId , paramBase , originPeer ) < nl > + case None ⇒ DBIO . successful ( true ) < nl > + } ) flatMap { < nl > + case true ⇒ < nl > + for { < nl > + showText ← getShowText ( userId , paramBase ) < nl > + } yield { < nl > + if ( showText ) { < nl > + builder . addData ( " message " , text ) < nl > + } < nl > < nl > - builder . build ( ) < nl > + builder . build ( ) < nl > + } < nl > + case false ⇒ DBIO . successful ( builder . build ( ) ) < nl > } < nl > - case false ⇒ DBIO . successful ( builder . build ( ) ) < nl > + case None ⇒ DBIO . successful ( builder . build ( ) ) < nl > } < nl > case None ⇒ DBIO . successful ( builder . build ( ) ) < nl > } < nl > case None ⇒ DBIO . successful ( builder . build ( ) ) < nl > } < nl > - case None ⇒ DBIO . successful ( builder . build ( ) ) < nl > - } < nl > < nl > - db . run ( for { < nl > - message ← messageAction < nl > - } yield { < nl > - system . log . debug ( " Delivering google push message , authId : { } , message : { } " , authId , message . toString ) < nl > + db . run ( for { < nl > + message ← messageAction < nl > + } yield { < nl > + system . log . debug ( " Delivering google push message , authId : { } , message : { } " , authId , message . toString ) < nl > < nl > - val resultFuture = Future { blocking { gcmSender . send ( message , creds . regId , 3 ) } } < nl > + val resultFuture = Future { blocking { gcmSender . send ( message , creds . regId , 3 ) } } < nl > < nl > - resultFuture . map { result ⇒ < nl > - system . log . debug ( " Google push result messageId : { } , error : { } " , result . getMessageId , result . getErrorCodeName ) < nl > - } . onFailure { < nl > - case e ⇒ system . log . error ( e , " Failed to deliver google push " ) < nl > - } < nl > - } ) < nl > + resultFuture . map { result ⇒ < nl > + system . log . debug ( " Google push result messageId : { } , error : { } " , result . getMessageId , result . getErrorCodeName ) < nl > + } . onFailure { < nl > + case e ⇒ system . log . error ( e , " Failed to deliver google push " ) < nl > + } < nl > + } ) < nl > + case None ⇒ < nl > + system . log . error ( " Key not found for projectId { } " , creds . projectId ) < nl > + } < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala b / actor - server / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > index 49aaf3e . . 356d2a5 100644 < nl > - - - a / actor - server / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > + + + b / actor - server / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > @ @ - 124 , 12 + 124 , 12 @ @ object SeqUpdatesManager { < nl > < nl > def startRegion ( ) ( < nl > implicit < nl > - system : ActorSystem , < nl > - gcmSender : GCMSender , < nl > - applePushManager : ApplePushManager , < nl > - db : Database < nl > + system : ActorSystem , < nl > + googlePushManager : GooglePushManager , < nl > + applePushManager : ApplePushManager , < nl > + db : Database < nl > ) : SeqUpdatesManagerRegion = < nl > - startRegion ( Some ( Props ( classOf [ SeqUpdatesManager ] , gcmSender , applePushManager , db ) ) ) < nl > + startRegion ( Some ( Props ( classOf [ SeqUpdatesManager ] , googlePushManager , applePushManager , db ) ) ) < nl > < nl > def startRegionProxy ( ) ( implicit system : ActorSystem ) : SeqUpdatesManagerRegion = startRegion ( None ) < nl > < nl > @ @ - 466 , 9 + 466 , 9 @ @ object SeqUpdatesManager { < nl > } < nl > < nl > class SeqUpdatesManager ( < nl > - gcmSender : GCMSender , < nl > - applePushManager : ApplePushManager , < nl > - db : Database < nl > + googlePushManager : GooglePushManager , < nl > + applePushManager : ApplePushManager , < nl > + db : Database < nl > ) extends PersistentActor with Stash with ActorLogging with VendorPush { < nl > < nl > import ShardRegion . Passivate < nl > @ @ - 495 , 7 + 495 , 7 @ @ class SeqUpdatesManager ( < nl > private [ this ] var appleCredsOpt : Option [ models . push . ApplePushCredentials ] = None < nl > < nl > private [ this ] val applePusher = new ApplePusher ( applePushManager , db ) < nl > - private [ this ] val googlePusher = new GooglePusher ( gcmSender , db ) < nl > + private [ this ] val googlePusher = new GooglePusher ( googlePushManager , db ) < nl > < nl > def receiveInitialized : Receive = { < nl > case Envelope ( _ , GetSequenceState ) ⇒ < nl > diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > index 31727d2 . . 14bc264 100644 < nl > - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > @ @ - 35 , 7 + 35 , 7 @ @ import im . actor . server . enrich . { RichMessageConfig , RichMessageWorker } < nl > import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } < nl > import im . actor . server . peermanagers . { GroupPeerManager , PrivatePeerManager } < nl > import im . actor . server . presences . { GroupPresenceManager , PresenceManager } < nl > - import im . actor . server . push . { ApplePushManager , ApplePushManagerConfig , SeqUpdatesManager , WeakUpdatesManager } < nl > + import im . actor . server . push . _ < nl > import im . actor . server . session . { Session , SessionConfig } < nl > import im . actor . server . sms . TelesignSmsEngine < nl > import im . actor . server . social . SocialManager < nl > @ @ - 50 , 7 + 50 , 7 @ @ class Main extends Bootable with DbInit with FlywayInit { < nl > val authConfig = AuthConfig . fromConfig ( serverConfig . getConfig ( " auth " ) ) < nl > / / FIXME : get rid of Option . get < nl > val emailConfig = EmailConfig . fromConfig ( serverConfig . getConfig ( " services . email " ) ) . toOption . get < nl > - val googlePushConfig = serverConfig . getConfig ( " push . google " ) < nl > + val googlePushConfig = GooglePushManagerConfig . load ( serverConfig . getConfig ( " services . google . push " ) ) . get < nl > val groupInviteConfig = GroupInviteConfig . load ( serverConfig . getConfig ( " messaging . groups . invite " ) ) < nl > / / FIXME : get rid of Option . get < nl > val webappConfig = HttpApiConfig . load ( serverConfig . getConfig ( " webapp " ) ) . toOption . get < nl > @ @ - 73 , 7 + 73 , 7 @ @ class Main extends Bootable with DbInit with FlywayInit { < nl > val flyway = initFlyway ( ds . ds ) < nl > flyway . migrate ( ) < nl > < nl > - implicit val gcmSender = new Sender ( googlePushConfig . getString ( " key " ) ) < nl > + implicit val googlePushManager = new GooglePushManager ( googlePushConfig ) < nl > < nl > implicit val apnsManager = new ApplePushManager ( applePushConfig , system ) < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / ActorSpecHelpers . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / ActorSpecHelpers . scala < nl > index 22e5f29 . . e90c94a 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / ActorSpecHelpers . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / ActorSpecHelpers . scala < nl > @ @ - 1 , 17 + 1 , 16 @ @ < nl > package im . actor . server . api < nl > < nl > import akka . actor . ActorSystem < nl > - import com . google . android . gcm . server . Sender < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > - import im . actor . server . push . { ApplePushManager , ApplePushManagerConfig , SeqUpdatesManager , SeqUpdatesManagerRegion } < nl > + import im . actor . server . push . _ < nl > < nl > trait ActorSpecHelpers { < nl > def buildSeqUpdManagerRegion ( ) ( implicit system : ActorSystem , db : Database ) : SeqUpdatesManagerRegion = { < nl > val gcmConfig = system . settings . config . getConfig ( " push . google " ) < nl > val appleConfig = ApplePushManagerConfig . load ( system . settings . config . getConfig ( " push . apple " ) ) < nl > < nl > - implicit val gcmSender = new Sender ( gcmConfig . getString ( " key " ) ) < nl > + implicit val googlePushManager = new GooglePushManager ( GooglePushManagerConfig ( List . empty ) ) < nl > < nl > implicit val applePushManager = new ApplePushManager ( appleConfig , system ) < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > index 1b1a224 . . 6aab243 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > @ @ - 30 , 7 + 30 , 7 @ @ import im . actor . server . mtproto . transport . { MTPackage , TransportPackage } < nl > import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } < nl > import im . actor . server . peermanagers . { PrivatePeerManager , GroupPeerManager } < nl > import im . actor . server . presences . { GroupPresenceManager , PresenceManager } < nl > - import im . actor . server . push . { ApplePushManager , ApplePushManagerConfig , SeqUpdatesManager , WeakUpdatesManager } < nl > + import im . actor . server . push . _ < nl > import im . actor . server . session . { Session , SessionConfig } < nl > import im . actor . server . social . SocialManager < nl > import im . actor . util . testing . _ < nl > @ @ - 67 , 7 + 67 , 7 @ @ class SimpleServerE2eSpec extends ActorFlatSuite ( < nl > val apnsConfig = system . settings . config . getConfig ( " push . apple " ) < nl > val oauthGoogleConfig = OAuth2GoogleConfig . load ( system . settings . config . getConfig ( " services . google . oauth " ) ) < nl > < nl > - implicit val gcmSender = new Sender ( gcmConfig . getString ( " key " ) ) < nl > + implicit val googlePushManager = new GooglePushManager ( GooglePushManagerConfig ( List . empty ) ) < nl > < nl > implicit val apnsManager = new ApplePushManager ( ApplePushManagerConfig . load ( apnsConfig ) , system ) < nl > < nl > diff - - git a / actor - server / src / main / resources / application . conf . example b / actor - server / src / main / resources / application . conf . example < nl > index 3a76b97 . . 8789c92 100644 < nl > - - - a / actor - server / src / main / resources / application . conf . example < nl > + + + b / actor - server / src / main / resources / application . conf . example < nl > @ @ - 274 , 7 + 274 , 7 @ @ services { < nl > # # } < nl > # keys = [ < nl > # { < nl > - # projectId : < nl > + # project - id : < nl > # key : < nl > # } < nl > # ]

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / sequence . proto b / actor - server / actor - core / src / main / protobuf / sequence . proto 
 index ef1c202 . . fb353a2 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / sequence . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / sequence . proto 
 @ @ - 66 , 6 + 66 , 7 @ @ message UserSequenceCommands { 
 oneof creds { 
 GooglePushCredentials google = 1 ; 
 ApplePushCredentials apple = 2 ; 
 + ActorPushCredentials actor = 3 ; 
 } 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / resources / reference . conf b / actor - server / actor - core / src / main / resources / reference . conf 
 index afe2ffd . . 81d251d 100644 
 - - - a / actor - server / actor - core / src / main / resources / reference . conf 
 + + + b / actor - server / actor - core / src / main / resources / reference . conf 
 @ @ - 28 , 6 + 28 , 16 @ @ services { 
 keys : [ ] 
 } 
 } 
 + 
 + rabbitmq { 
 + virtual - host = " / " 
 + hosts = [ " 127 . 0 . 0 . 1 " ] 
 + username = " guest " 
 + password = " guest " 
 + port = 5672 
 + ssl = false 
 + timeout = 3s 
 + } 
 } 
 
 push { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / actor / ActorPush . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / actor / ActorPush . scala 
 new file mode 100644 
 index 0000000 . . 811caf8 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / actor / ActorPush . scala 
 @ @ - 0 , 0 + 1 , 100 @ @ 
 + package im . actor . server . push . actor 
 + 
 + import akka . actor . _ 
 + import akka . event . Logging 
 + import com . rabbitmq . client . { Consumer , TopologyRecoveryException , Channel , Connection } 
 + import com . rabbitmq . client . impl . DefaultExceptionHandler 
 + import com . spingo . op _ rabbit . _ 
 + import im . actor . server . model . push . ActorPushCredentials 
 + import io . circe . generic . auto . _ 
 + import io . circe . syntax . _ 
 + 
 + import scala . util . { Failure , Success , Try } 
 + 
 + final case class ActorPushMessage ( data : Map [ String , String ] ) 
 + 
 + final class ActorPush ( system : ActorSystem ) extends Extension { 
 + private val log = Logging ( system , getClass ) 
 + 
 + val rabbitControl = 
 + Try ( ConnectionParams . fromConfig ( system . settings . config . getConfig ( " services . rabbitmq " ) ) ) match { 
 + case Success ( config ) ⇒ 
 + system . actorOf ( Props ( new RabbitControl ( config . copy ( exceptionHandler = new ExceptionHandler ( system ) ) ) ) , " rabbit - control " ) 
 + case Failure ( e ) ⇒ 
 + log . error ( e , " Failed to parse rabbitmq configuration " ) 
 + system . deadLetters 
 + } 
 + 
 + def deliver ( seq : Int , creds : ActorPushCredentials ) : Unit = 
 + rabbitControl ! Message . topic ( 
 + ActorPushMessage ( data = Map ( 
 + " seq " → seq . toString 
 + ) ) . asJson . toString ( ) , 
 + routingKey = creds . topic 
 + ) 
 + } 
 + 
 + private final class ExceptionHandler ( system : ActorSystem ) extends DefaultExceptionHandler { 
 + private val log = Logging ( system , getClass ) 
 + 
 + override def handleUnexpectedConnectionDriverException ( conn : Connection , exception : Throwable ) : Unit = { 
 + log . error ( exception , " Unexpected connection driver " ) 
 + super . handleUnexpectedConnectionDriverException ( conn , exception ) 
 + } 
 + 
 + override def handleConsumerException ( channel : Channel , exception : Throwable , consumer : Consumer , consumerTag : String , methodName : String ) : Unit = { 
 + log . error ( exception , " Consumer exception , consumer : { } , consumerTag : { } , methodName : { } " , consumer , consumerTag , methodName ) 
 + super . handleConsumerException ( channel , exception , consumer , consumerTag , methodName ) 
 + } 
 + 
 + override def handleBlockedListenerException ( connection : Connection , exception : Throwable ) : Unit = { 
 + log . error ( exception , " Blocked listener " ) 
 + super . handleBlockedListenerException ( connection , exception ) 
 + } 
 + 
 + override def handleChannelRecoveryException ( ch : Channel , exception : Throwable ) : Unit = { 
 + log . error ( exception , " Channel recovery error " ) 
 + super . handleChannelRecoveryException ( ch , exception ) 
 + } 
 + 
 + override def handleFlowListenerException ( channel : Channel , exception : Throwable ) : Unit = { 
 + log . error ( exception , " Flow listener error " ) 
 + super . handleFlowListenerException ( channel , exception ) 
 + } 
 + 
 + override def handleChannelKiller ( channel : Channel , exception : Throwable , what : String ) : Unit = { 
 + log . error ( exception , " Channel killer , what : { } " , what ) 
 + super . handleChannelKiller ( channel , exception , what ) 
 + } 
 + 
 + override def handleReturnListenerException ( channel : Channel , exception : Throwable ) : Unit = { 
 + log . error ( exception , " Return listener error " ) 
 + super . handleReturnListenerException ( channel , exception ) 
 + } 
 + 
 + override def handleConnectionKiller ( connection : Connection , exception : Throwable , what : String ) : Unit = { 
 + log . error ( exception , " Connection killer , what : { } " , what ) 
 + super . handleConnectionKiller ( connection , exception , what ) 
 + } 
 + 
 + override def handleTopologyRecoveryException ( conn : Connection , ch : Channel , exception : TopologyRecoveryException ) : Unit = { 
 + log . error ( exception , " Topology recovery error , channel : { } " , ch ) 
 + super . handleTopologyRecoveryException ( conn , ch , exception ) 
 + } 
 + 
 + override def handleConfirmListenerException ( channel : Channel , exception : Throwable ) : Unit = { 
 + log . error ( exception , " Confirm listener error " ) 
 + super . handleConfirmListenerException ( channel , exception ) 
 + } 
 + 
 + override def handleConnectionRecoveryException ( conn : Connection , exception : Throwable ) : Unit = { 
 + log . error ( exception , " Connection recovery error " ) 
 + super . handleConnectionRecoveryException ( conn , exception ) 
 + } 
 + } 
 + 
 + object ActorPush extends ExtensionId [ ActorPush ] with ExtensionIdProvider { 
 + override def createExtension ( system : ExtendedActorSystem ) : ActorPush = new ActorPush ( system ) 
 + 
 + override def lookup ( ) : ExtensionId [ _ < : Extension ] = ActorPush 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala 
 index 08d0b58 . . a23f95d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / SeqUpdatesExtension . scala 
 @ @ - 12 , 7 + 12 , 7 @ @ import im . actor . api . rpc . Update 
 import im . actor . api . rpc . messaging . UpdateMessage 
 import im . actor . server . db . DbExtension 
 import im . actor . server . model . _ 
 - import im . actor . server . model . push . { ApplePushCredentials ⇒ ApplePushCredentialsModel , GooglePushCredentials ⇒ GooglePushCredentialsModel , PushCredentials } 
 + import im . actor . server . model . push . { ApplePushCredentials ⇒ ApplePushCredentialsModel , GooglePushCredentials ⇒ GooglePushCredentialsModel , ActorPushCredentials ⇒ ActorPushCredentialsModel , PushCredentials } 
 import im . actor . server . persist . AuthSessionRepo 
 import im . actor . server . persist . push . ApplePushCredentialsRepo 
 import im . actor . server . persist . sequence . UserSequenceRepo 
 @ @ - 184 , 12 + 184 , 15 @ @ final class SeqUpdatesExtension ( 
 
 def registerApplePushCredentials ( creds : ApplePushCredentialsModel ) = registerPushCredentials ( creds ) 
 
 + def registerActorPushCredentials ( creds : ActorPushCredentialsModel ) = registerPushCredentials ( creds ) 
 + 
 / / TODO : real future 
 def registerPushCredentials ( creds : PushCredentials ) = 
 withAuthSession ( creds . authId ) { session ⇒ 
 val register = creds match { 
 case c : GooglePushCredentialsModel ⇒ RegisterPushCredentials ( ) . withGoogle ( c ) 
 case c : ApplePushCredentialsModel ⇒ RegisterPushCredentials ( ) . withApple ( c ) 
 + case c : ActorPushCredentialsModel ⇒ RegisterPushCredentials ( ) . withActor ( c ) 
 } 
 region . ref ! Envelope ( session . userId ) . withRegisterPushCredentials ( register ) 
 Future . successful ( ( ) ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala 
 index 28f31e7 . . 74d0c8f 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala 
 @ @ - 3 , 11 + 3 , 12 @ @ package im . actor . server . sequence 
 import akka . actor . _ 
 import akka . pattern . pipe 
 import im . actor . server . db . DbExtension 
 - import im . actor . server . model . push . { ApplePushCredentials , GooglePushCredentials , PushCredentials } 
 + import im . actor . server . model . push . { ActorPushCredentials , ApplePushCredentials , GooglePushCredentials , PushCredentials } 
 import im . actor . server . model . { DeviceType , Peer , PeerType } 
 import im . actor . server . persist . AuthSessionRepo 
 import im . actor . server . persist . configs . ParameterRepo 
 - import im . actor . server . persist . push . { ApplePushCredentialsRepo , GooglePushCredentialsRepo } 
 + import im . actor . server . persist . push . { ActorPushCredentialsRepo , ApplePushCredentialsRepo , GooglePushCredentialsRepo } 
 + import im . actor . server . push . actor . ActorPush 
 import im . actor . server . sequence . UserSequenceCommands . ReloadSettings 
 import slick . dbio . DBIO 
 
 @ @ - 165 , 6 + 166 , 8 @ @ private [ sequence ] final class VendorPush ( 
 register ( r . getApple ) 
 case r : RegisterPushCredentials if r . creds . isGoogle ⇒ 
 register ( r . getGoogle ) 
 + case r : RegisterPushCredentials if r . creds . isActor ⇒ 
 + register ( r . getActor ) 
 case UnregisterPushCredentials ( authId ) ⇒ 
 unregister ( authId ) 
 case DeliverPush ( seq , rules ) ⇒ 
 @ @ - 185 , 13 + 188 , 16 @ @ private [ sequence ] final class VendorPush ( 
 db . run ( for { 
 googleCreds ← GooglePushCredentialsRepo . findByUser ( userId ) 
 appleCreds ← ApplePushCredentialsRepo . findByUser ( userId ) 
 + actorCreds ← ActorPushCredentialsRepo . findByUser ( userId ) 
 google ← DBIO . sequence ( googleCreds map withInfo ) map ( _ . flatten ) 
 apple ← DBIO . sequence ( appleCreds map withInfo ) map ( _ . flatten ) 
 - } yield Initialized ( apple + + google ) ) pipeTo self 
 + actor ← DBIO . sequence ( actorCreds map withInfo ) map ( _ . flatten ) 
 + } yield Initialized ( apple + + google + + actor ) ) pipeTo self 
 } 
 
 / * * 
 * Delivers a push to all credentials according to push rules 
 + * 
 * @ param seq 
 * @ param rules 
 * / 
 @ @ - 203 , 6 + 209 , 7 @ @ private [ sequence ] final class VendorPush ( 
 
 / * * 
 * Delivers to a specific creds according to push rules 
 + * 
 * @ param seq 
 * @ param rules 
 * @ param creds 
 @ @ - 264 , 6 + 271 , 7 @ @ private [ sequence ] final class VendorPush ( 
 
 / * * 
 * Delivers an invisible push with seq and contentAvailable 
 + * 
 * @ param seq 
 * @ param creds 
 * / 
 @ @ - 273 , 11 + 281 , 14 @ @ private [ sequence ] final class VendorPush ( 
 googlePushProvider . deliverInvisible ( seq , c ) 
 case c : ApplePushCredentials ⇒ 
 applePushProvider . deliverInvisible ( seq , c ) 
 + case c : ActorPushCredentials ⇒ 
 + ActorPush ( context . system ) . deliver ( seq = seq , c ) 
 } 
 } 
 
 / * * 
 * Delivers a visible push with seq and ( optionally ) text , sound , vibration 
 + * 
 * @ param seq 
 * @ param creds 
 * @ param data 
 @ @ - 306 , 6 + 317 , 8 @ @ private [ sequence ] final class VendorPush ( 
 isSoundEnabled = isSoundEnabled , 
 isVibrationEnabled = isVibrationEnabled 
 ) 
 + case c : ActorPushCredentials ⇒ 
 + ActorPush ( context . system ) . deliver ( seq = seq , c ) 
 } 
 } 
 
 @ @ - 314 , 6 + 327 , 7 @ @ private [ sequence ] final class VendorPush ( 
 _ ← creds match { 
 case c : GooglePushCredentials ⇒ GooglePushCredentialsRepo . createOrUpdate ( c ) 
 case c : ApplePushCredentials ⇒ ApplePushCredentialsRepo . createOrUpdate ( c ) 
 + case c : ActorPushCredentials ⇒ ActorPushCredentialsRepo . createOrUpdate ( c ) 
 } 
 appIdCredsOpt ← withInfo ( creds ) 
 } yield { 
 @ @ - 336 , 6 + 350 , 7 @ @ private [ sequence ] final class VendorPush ( 
 db . run ( creds match { 
 case c : GooglePushCredentials ⇒ GooglePushCredentialsRepo . delete ( c . authId ) 
 case c : ApplePushCredentials ⇒ ApplePushCredentialsRepo . delete ( c . authId ) 
 + case c : ActorPushCredentials ⇒ ActorPushCredentialsRepo . delete ( c . authId ) 
 } ) onFailure { 
 case e ⇒ log . error ( " Failed to unregister creds " ) 
 } 
 diff - - git a / actor - server / actor - models / src / main / protobuf / model / push . proto b / actor - server / actor - models / src / main / protobuf / model / push . proto 
 index 5b015db . . 6b9657b 100644 
 - - - a / actor - server / actor - models / src / main / protobuf / model / push . proto 
 + + + b / actor - server / actor - models / src / main / protobuf / model / push . proto 
 @ @ - 19 , 3 + 19 , 10 @ @ message ApplePushCredentials { 
 int32 apns _ key = 2 ; 
 bytes token = 3 ; 
 } 
 + 
 + message ActorPushCredentials { 
 + option ( scalapb . message ) . extends = " im . actor . server . model . push . PushCredentials " ; 
 + 
 + int64 auth _ id = 1 ; 
 + string topic = 2 ; 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20160122065245 _ _ CreateActorPushCredentials . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20160122065245 _ _ CreateActorPushCredentials . sql 
 new file mode 100644 
 index 0000000 . . 7e67afe 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20160122065245 _ _ CreateActorPushCredentials . sql 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + CREATE TABLE actor _ push _ credentials ( 
 + auth _ id BIGINT NOT NULL , 
 + topic TEXT NOT NULL , 
 + PRIMARY KEY ( auth _ id ) 
 + ) ; 
 + 
 + CREATE UNIQUE INDEX ON actor _ push _ credentials ( topic ) ; 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ActorPushCredentialsRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ActorPushCredentialsRepo . scala 
 new file mode 100644 
 index 0000000 . . 9576c8e 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ActorPushCredentialsRepo . scala 
 @ @ - 0 , 0 + 1 , 58 @ @ 
 + package im . actor . server . persist . push 
 + 
 + import im . actor . server . model . push . ActorPushCredentials 
 + import im . actor . server . db . ActorPostgresDriver . api . _ 
 + import im . actor . server . persist . AuthIdRepo 
 + 
 + import scala . concurrent . ExecutionContext 
 + import scala . language . postfixOps 
 + 
 + final class ActorPushCredentialsTable ( tag : Tag ) extends Table [ ActorPushCredentials ] ( tag , " actor _ push _ credentials " ) { 
 + def authId = column [ Long ] ( " auth _ id " , O . PrimaryKey ) 
 + 
 + def topic = column [ String ] ( " topic " ) 
 + 
 + def * = ( authId , topic ) < > ( ( ActorPushCredentials . apply _ ) . tupled , ActorPushCredentials . unapply ) 
 + } 
 + 
 + object ActorPushCredentialsRepo { 
 + val creds = TableQuery [ ActorPushCredentialsTable ] 
 + 
 + def byTopic ( topic : String ) : Query [ ActorPushCredentialsTable , ActorPushCredentials , Seq ] = 
 + creds . filter ( _ . topic = = = topic ) 
 + 
 + def createOrUpdate ( authId : Long , topic : String ) ( implicit ec : ExecutionContext ) = { 
 + for { 
 + _ ← creds . filterNot ( _ . authId = = = authId ) . filter ( c ⇒ c . topic = = = topic ) . delete 
 + r ← creds . insertOrUpdate ( ActorPushCredentials ( authId , topic ) ) 
 + } yield r 
 + } 
 + 
 + def createOrUpdate ( c : ActorPushCredentials ) = 
 + creds . insertOrUpdate ( c ) 
 + 
 + def byAuthId ( authId : Rep [ Long ] ) = creds . filter ( _ . authId = = = authId ) 
 + 
 + val byAuthIdC = Compiled ( byAuthId _ ) 
 + 
 + def find ( authId : Long ) = 
 + byAuthIdC ( authId ) . result . headOption 
 + 
 + def find ( authIds : Set [ Long ] ) = 
 + creds filter ( _ . authId inSet authIds ) result 
 + 
 + def findByUser ( userId : Int ) ( implicit ec : ExecutionContext ) = 
 + for { 
 + authIds ← AuthIdRepo . activeByUserIdCompiled ( userId ) . result 
 + creds ← find ( authIds map ( _ . id ) toSet ) 
 + } yield creds 
 + 
 + def delete ( authId : Long ) = 
 + creds . filter ( _ . authId = = = authId ) . delete 
 + 
 + def findByTopic ( topic : String ) = 
 + byTopic ( topic ) . result 
 + 
 + def deleteByTopic ( topic : String ) = 
 + byTopic ( topic ) . delete 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala 
 index 3e291e0 . . 43c7cf3 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala 
 @ @ - 57 , 9 + 57 , 17 @ @ final class PushServiceImpl ( 
 } 
 
 override def jhandleRegisterActorPush ( 
 - endpoint : String , 
 + topic : String , 
 publicKeys : IndexedSeq [ ApiEncryptionKey ] , 
 clientData : ClientData 
 - ) : Future [ HandlerResult [ ResponseVoid ] ] = 
 - Future . failed ( new RuntimeException ( " Not implemented " ) ) 
 + ) : Future [ HandlerResult [ ResponseVoid ] ] = { 
 + val creds = model . push . ActorPushCredentials ( clientData . authId , topic ) 
 + 
 + db . run ( for { 
 + _ ← persist . push . ActorPushCredentialsRepo . deleteByTopic ( topic ) 
 + _ ← persist . push . ActorPushCredentialsRepo . createOrUpdate ( clientData . authId , topic ) 
 + _ = seqUpdExt . registerActorPushCredentials ( creds ) 
 + } yield Ok ( ResponseVoid ) ) 
 + } 
 + 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index f806cf0 . . fbd130e 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 102 , 6 + 102 , 7 @ @ object Dependencies { 
 
 val tyrex = " tyrex " % " tyrex " % " 1 . 0 . 1 " 
 
 + val opRabbit = " com . spingo " % % " op - rabbit - core " % " 1 . 2 . 1 " 
 val pushy = " com . relayrides " % " pushy " % " 0 . 4 . 3 " 
 
 val logbackClassic = " ch . qos . logback " % " logback - classic " % " 1 . 1 . 2 " 
 @ @ - 164 , 6 + 165 , 7 @ @ object Dependencies { 
 akkaClusterSharding , 
 akkaDdata , 
 caffeine , 
 + opRabbit , 
 pushy , 
 jodaTime , 
 postgresJdbc , 
 diff - - git a / actor - server / project / Resolvers . scala b / actor - server / project / Resolvers . scala 
 index 2c5311a . . c90beee 100644 
 - - - a / actor - server / project / Resolvers . scala 
 + + + b / actor - server / project / Resolvers . scala 
 @ @ - 10 , 7 + 10 , 12 @ @ object Resolvers { 
 Resolver . bintrayRepo ( " dnvriend " , " maven " ) , 
 Resolver . bintrayRepo ( " dwhjames " , " maven " ) , 
 Resolver . bintrayRepo ( " krasserm " , " maven " ) , 
 - " gcm - server - repository " at " https : / / raw . githubusercontent . com / slorber / gcm - server - repository / master / releases / " , 
 + 
 + / / for op - rabbit 
 + " The New Motion Public Repo " at " http : / / nexus . thenewmotion . com / content / groups / public / " , 
 + / / for akka - rabbitmq ( needed by op - rabbit ) 
 + " SpinGo OSS " at " http : / / spingo - oss . s3 . amazonaws . com / repositories / releases " , 
 + 
 Resolver . sonatypeRepo ( " snapshots " ) 
 ) 
 }

NEAREST DIFF:
diff - - git a / actor - apps / core / src / main / java / im / actor / model / modules / Auth . java b / actor - apps / core / src / main / java / im / actor / model / modules / Auth . java 
 index 5575c4d . . 5d67138 100644 
 - - - a / actor - apps / core / src / main / java / im / actor / model / modules / Auth . java 
 + + + b / actor - apps / core / src / main / java / im / actor / model / modules / Auth . java 
 @ @ - 94 , 6 + 94 , 8 @ @ public class Auth extends BaseModule { 
 } 
 
 private void onLoggedIn ( final CommandCallback < AuthState > callback , ResponseAuth response ) { 
 + 
 + 
 preferences ( ) . putBool ( KEY _ AUTH , true ) ; 
 state = AuthState . LOGGED _ IN ; 
 myUid = response . getUser ( ) . getId ( ) ; 
 diff - - git a / actor - server / actor - commons - base / src / main / resources / reference . conf b / actor - server / actor - commons - base / src / main / resources / reference . conf 
 deleted file mode 100644 
 index 090d89d . . 0000000 
 - - - a / actor - server / actor - commons - base / src / main / resources / reference . conf 
 + + + / dev / null 
 @ @ - 1 , 56 + 0 , 0 @ @ 
 - akka { 
 - extensions = [ " akka . contrib . pattern . DistributedPubSubExtension " ] 
 - 
 - loggers = [ " akka . event . slf4j . Slf4jLogger " ] 
 - 
 - persistence { 
 - journal . plugin = " kafka - journal " 
 - snapshot - store . plugin = " kafka - snapshot - store " 
 - } 
 - 
 - actor { 
 - provider = " akka . cluster . ClusterActorRefProvider " 
 - extensions + = [ " com . romix . akka . serialization . kryo . KryoSerializationExtension $ " ] 
 - 
 - serializers { 
 - kryo = " com . romix . akka . serialization . kryo . KryoSerializer " 
 - } 
 - 
 - serialization - bindings { 
 - " im . actor . server . commons . serialization . KryoSerializable " = kryo 
 - " akka . actor . ActorRef " = kryo 
 - } 
 - 
 - kryo { 
 - type = " graph " 
 - idstrategy = " incremental " 
 - 
 - serializer - pool - size = 16 
 - 
 - buffer - size = 4096 
 - 
 - max - buffer - size = - 1 
 - 
 - use - manifests = false 
 - 
 - post - serialization - transformations = " off " 
 - 
 - implicit - registration - logging = true 
 - 
 - kryo - trace = false 
 - 
 - kryo - custom - serializer - init = " im . actor . server . commons . serialization . KryoInit " 
 - } 
 - } 
 - 
 - remote { 
 - netty . tcp { 
 - hostname = " 127 . 0 . 0 . 1 " 
 - port = 2553 
 - } 
 - } 
 - 
 - cluster { 
 - seed - nodes = [ " akka . tcp : / / actor - server @ 127 . 0 . 0 . 1 : 2553 " ] 
 - } 
 - } 
 diff - - git a / actor - server / actor - push / src / main / resources / reference . conf b / actor - server / actor - push / src / main / resources / reference . conf 
 index b4c0d0c . . 05fdbab 100644 
 - - - a / actor - server / actor - push / src / main / resources / reference . conf 
 + + + b / actor - server / actor - push / src / main / resources / reference . conf 
 @ @ - 8 , 16 + 8 , 27 @ @ akka { 
 } 
 } 
 
 - push { 
 - seq - updates - manager { 
 - receive - timeout = 120 seconds 
 - } 
 - 
 + services { 
 apple { 
 - certs = [ ] 
 - sandbox = false 
 + push { 
 + keys { 
 + 
 + } 
 + } 
 } 
 
 google { 
 + push { 
 + keys { 
 + 
 + } 
 + } 
 } 
 } 
 + 
 + push { 
 + seq - updates - manager { 
 + receive - timeout = 120 seconds 
 + } 
 + } 
 + 
 diff - - git a / actor - server / actor - push / src / main / scala / im / actor / server / push / ApplePushManager . scala b / actor - server / actor - push / src / main / scala / im / actor / server / push / ApplePushManager . scala 
 index b1e024c . . be84d5b 100644 
 - - - a / actor - server / actor - push / src / main / scala / im / actor / server / push / ApplePushManager . scala 
 + + + b / actor - server / actor - push / src / main / scala / im / actor / server / push / ApplePushManager . scala 
 @ @ - 50 , 9 + 50 , 8 @ @ class ApplePushManager ( config : ApplePushManagerConfig , actorSystem : ActorSystem ) 
 ( cert . key , mgr ) 
 } . toMap 
 
 - def getInstance ( key : Int ) : Option [ PushManager [ SimpleApnsPushNotification ] ] = { 
 + def getInstance ( key : Int ) : Option [ PushManager [ SimpleApnsPushNotification ] ] = 
 managers . get ( key ) 
 - } 
 } 
 
 private class LoggingRejectedNotificationListener ( actorSystem : ActorSystem ) extends RejectedNotificationListener [ SimpleApnsPushNotification ] { 
 diff - - git a / actor - server / actor - push / src / main / scala / im / actor / server / push / GooglePushManager . scala b / actor - server / actor - push / src / main / scala / im / actor / server / push / GooglePushManager . scala 
 new file mode 100644 
 index 0000000 . . 2d2ff74 
 - - - / dev / null 
 + + + b / actor - server / actor - push / src / main / scala / im / actor / server / push / GooglePushManager . scala 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package im . actor . server . push 
 + 
 + import scala . util . Try 
 + 
 + import com . github . kxbmap . configs . _ 
 + import com . google . android . gcm . server . Sender 
 + import com . typesafe . config . Config 
 + 
 + case class GooglePushKey ( projectId : Long , key : String ) 
 + 
 + object GooglePushKey { 
 + def load ( config : Config ) : Try [ GooglePushKey ] = { 
 + for { 
 + projectId ← config . get [ Try [ Long ] ] ( " project - id " ) 
 + key ← config . get [ Try [ String ] ] ( " key " ) 
 + } yield GooglePushKey ( projectId , key ) 
 + } 
 + } 
 + 
 + case class GooglePushManagerConfig ( keys : List [ GooglePushKey ] ) 
 + 
 + object GooglePushManagerConfig { 
 + def load ( googlePushConfig : Config ) : Try [ GooglePushManagerConfig ] = 
 + for { 
 + keyConfigs ← googlePushConfig . get [ Try [ List [ Config ] ] ] ( " keys " ) 
 + keys ← Try ( keyConfigs map ( GooglePushKey . load ( _ ) . get ) ) 
 + } yield GooglePushManagerConfig ( keys ) 
 + } 
 + 
 + class GooglePushManager ( config : GooglePushManagerConfig ) { 
 + private val senders : Map [ Long , Sender ] = 
 + ( config . keys map { 
 + case GooglePushKey ( projectId , key ) ⇒ 
 + val sender = new Sender ( key ) 
 + ( projectId → sender ) 
 + } ) . toMap 
 + 
 + def getInstance ( key : Long ) : Option [ Sender ] = 
 + senders . get ( key ) 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - push / src / main / scala / im / actor / server / push / GooglePusher . scala b / actor - server / actor - push / src / main / scala / im / actor / server / push / GooglePusher . scala 
 index 8355bea . . 70561b8 100644 
 - - - a / actor - server / actor - push / src / main / scala / im / actor / server / push / GooglePusher . scala 
 + + + b / actor - server / actor - push / src / main / scala / im / actor / server / push / GooglePusher . scala 
 @ @ - 11 , 61 + 11 , 66 @ @ import im . actor . server . models 
 import im . actor . server . persist 
 
 / / FIXME : # perf pinned dispatcher 
 - private [ push ] class GooglePusher ( gcmSender : Sender , db : Database ) ( implicit system : ActorSystem ) extends VendorPush { 
 + private [ push ] class GooglePusher ( pushManager : GooglePushManager , db : Database ) ( implicit system : ActorSystem ) extends VendorPush { 
 implicit val ec : ExecutionContext = system . dispatcher 
 
 def deliverGooglePush ( creds : models . push . GooglePushCredentials , authId : Long , seq : Int , textOpt : Option [ String ] , originPeerOpt : Option [ Peer ] ) : Unit = { 
 - system . log . debug ( " Delivering google push , authId : { } , seq : { } " , authId , seq ) 
 + pushManager . getInstance ( creds . projectId ) match { 
 + case Some ( gcmSender ) ⇒ 
 + system . log . debug ( " Delivering google push , authId : { } , seq : { } " , authId , seq ) 
 
 - val builder = ( new Message . Builder ) 
 - . collapseKey ( authId . toString ) 
 - . addData ( " seq " , seq . toString ) 
 + val builder = ( new Message . Builder ) 
 + . collapseKey ( authId . toString ) 
 + . addData ( " seq " , seq . toString ) 
 
 - val messageAction = textOpt match { 
 - case Some ( text ) ⇒ 
 - persist . AuthId . findUserId ( authId ) flatMap { 
 - case Some ( userId ) ⇒ 
 - persist . AuthSession . findAppIdByAuthId ( authId ) flatMap { 
 - case Some ( appId ) ⇒ 
 - val category = models . AuthSession . appCategory ( appId ) 
 - val paramBase = s " category . $ { category } . notification " 
 + val messageAction = textOpt match { 
 + case Some ( text ) ⇒ 
 + persist . AuthId . findUserId ( authId ) flatMap { 
 + case Some ( userId ) ⇒ 
 + persist . AuthSession . findAppIdByAuthId ( authId ) flatMap { 
 + case Some ( appId ) ⇒ 
 + val category = models . AuthSession . appCategory ( appId ) 
 + val paramBase = s " category . $ { category } . notification " 
 
 - ( originPeerOpt match { 
 - case Some ( originPeer ) ⇒ 
 - getChatNotificationEnabled ( userId , paramBase , originPeer ) 
 - case None ⇒ DBIO . successful ( true ) 
 - } ) flatMap { 
 - case true ⇒ 
 - for { 
 - showText ← getShowText ( userId , paramBase ) 
 - } yield { 
 - if ( showText ) { 
 - builder . addData ( " message " , text ) 
 - } 
 + ( originPeerOpt match { 
 + case Some ( originPeer ) ⇒ 
 + getChatNotificationEnabled ( userId , paramBase , originPeer ) 
 + case None ⇒ DBIO . successful ( true ) 
 + } ) flatMap { 
 + case true ⇒ 
 + for { 
 + showText ← getShowText ( userId , paramBase ) 
 + } yield { 
 + if ( showText ) { 
 + builder . addData ( " message " , text ) 
 + } 
 
 - builder . build ( ) 
 + builder . build ( ) 
 + } 
 + case false ⇒ DBIO . successful ( builder . build ( ) ) 
 } 
 - case false ⇒ DBIO . successful ( builder . build ( ) ) 
 + case None ⇒ DBIO . successful ( builder . build ( ) ) 
 } 
 case None ⇒ DBIO . successful ( builder . build ( ) ) 
 } 
 case None ⇒ DBIO . successful ( builder . build ( ) ) 
 } 
 - case None ⇒ DBIO . successful ( builder . build ( ) ) 
 - } 
 
 - db . run ( for { 
 - message ← messageAction 
 - } yield { 
 - system . log . debug ( " Delivering google push message , authId : { } , message : { } " , authId , message . toString ) 
 + db . run ( for { 
 + message ← messageAction 
 + } yield { 
 + system . log . debug ( " Delivering google push message , authId : { } , message : { } " , authId , message . toString ) 
 
 - val resultFuture = Future { blocking { gcmSender . send ( message , creds . regId , 3 ) } } 
 + val resultFuture = Future { blocking { gcmSender . send ( message , creds . regId , 3 ) } } 
 
 - resultFuture . map { result ⇒ 
 - system . log . debug ( " Google push result messageId : { } , error : { } " , result . getMessageId , result . getErrorCodeName ) 
 - } . onFailure { 
 - case e ⇒ system . log . error ( e , " Failed to deliver google push " ) 
 - } 
 - } ) 
 + resultFuture . map { result ⇒ 
 + system . log . debug ( " Google push result messageId : { } , error : { } " , result . getMessageId , result . getErrorCodeName ) 
 + } . onFailure { 
 + case e ⇒ system . log . error ( e , " Failed to deliver google push " ) 
 + } 
 + } ) 
 + case None ⇒ 
 + system . log . error ( " Key not found for projectId { } " , creds . projectId ) 
 + } 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala b / actor - server / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 index 49aaf3e . . 356d2a5 100644 
 - - - a / actor - server / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 + + + b / actor - server / actor - push / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 @ @ - 124 , 12 + 124 , 12 @ @ object SeqUpdatesManager { 
 
 def startRegion ( ) ( 
 implicit 
 - system : ActorSystem , 
 - gcmSender : GCMSender , 
 - applePushManager : ApplePushManager , 
 - db : Database 
 + system : ActorSystem , 
 + googlePushManager : GooglePushManager , 
 + applePushManager : ApplePushManager , 
 + db : Database 
 ) : SeqUpdatesManagerRegion = 
 - startRegion ( Some ( Props ( classOf [ SeqUpdatesManager ] , gcmSender , applePushManager , db ) ) ) 
 + startRegion ( Some ( Props ( classOf [ SeqUpdatesManager ] , googlePushManager , applePushManager , db ) ) ) 
 
 def startRegionProxy ( ) ( implicit system : ActorSystem ) : SeqUpdatesManagerRegion = startRegion ( None ) 
 
 @ @ - 466 , 9 + 466 , 9 @ @ object SeqUpdatesManager { 
 } 
 
 class SeqUpdatesManager ( 
 - gcmSender : GCMSender , 
 - applePushManager : ApplePushManager , 
 - db : Database 
 + googlePushManager : GooglePushManager , 
 + applePushManager : ApplePushManager , 
 + db : Database 
 ) extends PersistentActor with Stash with ActorLogging with VendorPush { 
 
 import ShardRegion . Passivate 
 @ @ - 495 , 7 + 495 , 7 @ @ class SeqUpdatesManager ( 
 private [ this ] var appleCredsOpt : Option [ models . push . ApplePushCredentials ] = None 
 
 private [ this ] val applePusher = new ApplePusher ( applePushManager , db ) 
 - private [ this ] val googlePusher = new GooglePusher ( gcmSender , db ) 
 + private [ this ] val googlePusher = new GooglePusher ( googlePushManager , db ) 
 
 def receiveInitialized : Receive = { 
 case Envelope ( _ , GetSequenceState ) ⇒ 
 diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 index 31727d2 . . 14bc264 100644 
 - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 @ @ - 35 , 7 + 35 , 7 @ @ import im . actor . server . enrich . { RichMessageConfig , RichMessageWorker } 
 import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } 
 import im . actor . server . peermanagers . { GroupPeerManager , PrivatePeerManager } 
 import im . actor . server . presences . { GroupPresenceManager , PresenceManager } 
 - import im . actor . server . push . { ApplePushManager , ApplePushManagerConfig , SeqUpdatesManager , WeakUpdatesManager } 
 + import im . actor . server . push . _ 
 import im . actor . server . session . { Session , SessionConfig } 
 import im . actor . server . sms . TelesignSmsEngine 
 import im . actor . server . social . SocialManager 
 @ @ - 50 , 7 + 50 , 7 @ @ class Main extends Bootable with DbInit with FlywayInit { 
 val authConfig = AuthConfig . fromConfig ( serverConfig . getConfig ( " auth " ) ) 
 / / FIXME : get rid of Option . get 
 val emailConfig = EmailConfig . fromConfig ( serverConfig . getConfig ( " services . email " ) ) . toOption . get 
 - val googlePushConfig = serverConfig . getConfig ( " push . google " ) 
 + val googlePushConfig = GooglePushManagerConfig . load ( serverConfig . getConfig ( " services . google . push " ) ) . get 
 val groupInviteConfig = GroupInviteConfig . load ( serverConfig . getConfig ( " messaging . groups . invite " ) ) 
 / / FIXME : get rid of Option . get 
 val webappConfig = HttpApiConfig . load ( serverConfig . getConfig ( " webapp " ) ) . toOption . get 
 @ @ - 73 , 7 + 73 , 7 @ @ class Main extends Bootable with DbInit with FlywayInit { 
 val flyway = initFlyway ( ds . ds ) 
 flyway . migrate ( ) 
 
 - implicit val gcmSender = new Sender ( googlePushConfig . getString ( " key " ) ) 
 + implicit val googlePushManager = new GooglePushManager ( googlePushConfig ) 
 
 implicit val apnsManager = new ApplePushManager ( applePushConfig , system ) 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / ActorSpecHelpers . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / ActorSpecHelpers . scala 
 index 22e5f29 . . e90c94a 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / ActorSpecHelpers . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / ActorSpecHelpers . scala 
 @ @ - 1 , 17 + 1 , 16 @ @ 
 package im . actor . server . api 
 
 import akka . actor . ActorSystem 
 - import com . google . android . gcm . server . Sender 
 import slick . driver . PostgresDriver . api . _ 
 
 - import im . actor . server . push . { ApplePushManager , ApplePushManagerConfig , SeqUpdatesManager , SeqUpdatesManagerRegion } 
 + import im . actor . server . push . _ 
 
 trait ActorSpecHelpers { 
 def buildSeqUpdManagerRegion ( ) ( implicit system : ActorSystem , db : Database ) : SeqUpdatesManagerRegion = { 
 val gcmConfig = system . settings . config . getConfig ( " push . google " ) 
 val appleConfig = ApplePushManagerConfig . load ( system . settings . config . getConfig ( " push . apple " ) ) 
 
 - implicit val gcmSender = new Sender ( gcmConfig . getString ( " key " ) ) 
 + implicit val googlePushManager = new GooglePushManager ( GooglePushManagerConfig ( List . empty ) ) 
 
 implicit val applePushManager = new ApplePushManager ( appleConfig , system ) 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 index 1b1a224 . . 6aab243 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 @ @ - 30 , 7 + 30 , 7 @ @ import im . actor . server . mtproto . transport . { MTPackage , TransportPackage } 
 import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } 
 import im . actor . server . peermanagers . { PrivatePeerManager , GroupPeerManager } 
 import im . actor . server . presences . { GroupPresenceManager , PresenceManager } 
 - import im . actor . server . push . { ApplePushManager , ApplePushManagerConfig , SeqUpdatesManager , WeakUpdatesManager } 
 + import im . actor . server . push . _ 
 import im . actor . server . session . { Session , SessionConfig } 
 import im . actor . server . social . SocialManager 
 import im . actor . util . testing . _ 
 @ @ - 67 , 7 + 67 , 7 @ @ class SimpleServerE2eSpec extends ActorFlatSuite ( 
 val apnsConfig = system . settings . config . getConfig ( " push . apple " ) 
 val oauthGoogleConfig = OAuth2GoogleConfig . load ( system . settings . config . getConfig ( " services . google . oauth " ) ) 
 
 - implicit val gcmSender = new Sender ( gcmConfig . getString ( " key " ) ) 
 + implicit val googlePushManager = new GooglePushManager ( GooglePushManagerConfig ( List . empty ) ) 
 
 implicit val apnsManager = new ApplePushManager ( ApplePushManagerConfig . load ( apnsConfig ) , system ) 
 
 diff - - git a / actor - server / src / main / resources / application . conf . example b / actor - server / src / main / resources / application . conf . example 
 index 3a76b97 . . 8789c92 100644 
 - - - a / actor - server / src / main / resources / application . conf . example 
 + + + b / actor - server / src / main / resources / application . conf . example 
 @ @ - 274 , 7 + 274 , 7 @ @ services { 
 # # } 
 # keys = [ 
 # { 
 - # projectId : 
 + # project - id : 
 # key : 
 # } 
 # ]
