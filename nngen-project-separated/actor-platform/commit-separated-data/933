BLEU SCORE: 0.08295193507109855

TEST MSG: fix ( scheme ) : Fixing collisions in new service messages
GENERATED MSG: wip ( core ) : Async Sequence

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json < nl > index 6d22344 . . fbcf44a 100644 < nl > - - - a / actor - sdk / sdk - api / actor . json < nl > + + + b / actor - sdk / sdk - api / actor . json < nl > @ @ - 3901 , 7 + 3901 , 7 @ @ < nl > ] , < nl > " trait " : { < nl > " name " : " ServiceEx " , < nl > - " key " : 16 < nl > + " key " : 20 < nl > } , < nl > " expandable " : " true " , < nl > " attributes " : [ ] < nl > @ @ - 3916 , 7 + 3916 , 7 @ @ < nl > ] , < nl > " trait " : { < nl > " name " : " ServiceEx " , < nl > - " key " : 17 < nl > + " key " : 21 < nl > } , < nl > " expandable " : " true " , < nl > " attributes " : [ ] < nl > diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > index 56f6210 . . 9394872 100644 < nl > - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > @ @ - 3663 , 7 + 3663 , 7 @ @ < nl > < property role = " w4tQU " value = " true " / > < nl > < ref role = " w4 $ XZ " node = " 55bmeIQ9med " resolve = " ServiceEx " / > < nl > < node concept = " Nu42z " id = " 6gbxTdnelwL " role = " 3BtCOu " > < nl > - < property role = " Nu42W " value = " 10 " / > < nl > + < property role = " Nu42W " value = " 14 " / > < nl > < / node > < nl > < node concept = " NXeRC " id = " 6gbxTdnelwN " role = " NXodf " > < nl > < property role = " NXePf " value = " Message about chat archived " / > < nl > @ @ - 3675 , 7 + 3675 , 7 @ @ < nl > < property role = " tsOgz " value = " true " / > < nl > < ref role = " w4 $ XZ " node = " 55bmeIQ9med " resolve = " ServiceEx " / > < nl > < node concept = " Nu42z " id = " 6gbxTdnemQg " role = " 3BtCOu " > < nl > - < property role = " Nu42W " value = " 11 " / > < nl > + < property role = " Nu42W " value = " 15 " / > < nl > < / node > < nl > < node concept = " NXeRC " id = " 6gbxTdnemQi " role = " NXodf " > < nl > < property role = " NXePf " value = " Message about chat restored " / > < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > index 43a4b06 . . 4d5d6fe 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > @ @ - 24 , 7 + 24 , 7 @ @ import im . actor . core . DeviceCategory ; < nl > import im . actor . core . PlatformType ; < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . events . IncomingCall ; < nl > - import im . actor . core . modules . internal . CallsModule ; < nl > + import im . actor . core . modules . calls . CallsModule ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . android . view . BindedViewHolder ; < nl > import im . actor . runtime . eventbus . BusSubscriber ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 1db8362 . . 180a9e6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 43 , 7 + 43 , 7 @ @ import im . actor . core . events . PeerChatOpened ; < nl > import im . actor . core . events . PeerInfoClosed ; < nl > import im . actor . core . events . PeerInfoOpened ; < nl > import im . actor . core . events . UserVisible ; < nl > - import im . actor . core . modules . internal . CallsModule ; < nl > + import im . actor . core . modules . calls . CallsModule ; < nl > import im . actor . core . network . NetworkState ; < nl > import im . actor . core . util . ActorTrace ; < nl > import im . actor . core . util . Timing ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java < nl > index c037014 . . d0ce68c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java < nl > @ @ - 6 , 7 + 6 , 7 @ @ import im . actor . core . i18n . I18nEngine ; < nl > import im . actor . core . modules . api . ApiModule ; < nl > import im . actor . core . modules . sequence . Updates ; < nl > import im . actor . core . modules . internal . AppStateModule ; < nl > - import im . actor . core . modules . internal . CallsModule ; < nl > + import im . actor . core . modules . calls . CallsModule ; < nl > import im . actor . core . modules . internal . ContactsModule ; < nl > import im . actor . core . modules . internal . DeviceInfoModule ; < nl > import im . actor . core . modules . internal . DisplayLists ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java < nl > index 011c9ed . . 63989df 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java < nl > @ @ - 10 , 7 + 10 , 7 @ @ import im . actor . core . i18n . I18nEngine ; < nl > import im . actor . core . modules . api . ApiModule ; < nl > import im . actor . core . modules . sequence . Updates ; < nl > import im . actor . core . modules . internal . AppStateModule ; < nl > - import im . actor . core . modules . internal . CallsModule ; < nl > + import im . actor . core . modules . calls . CallsModule ; < nl > import im . actor . core . modules . internal . ContactsModule ; < nl > import im . actor . core . modules . internal . DeviceInfoModule ; < nl > import im . actor . core . modules . internal . DisplayLists ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > new file mode 100644 < nl > index 0000000 . . c5f0055 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 0 , 0 + 1 , 180 @ @ < nl > + package im . actor . core . modules . calls ; < nl > + < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . util . ModuleActor ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . messages . PoisonPill ; < nl > + < nl > + public class CallActor extends ModuleActor { < nl > + < nl > + public static final String TAG = " CallActor " ; < nl > + private boolean inited = false ; < nl > + private int timeout = 0 ; < nl > + private boolean alive = false ; < nl > + private long callId ; < nl > + private CallsModule . CallCallback callback ; < nl > + private ArrayList < byte [ ] > signals = new ArrayList < byte [ ] > ( ) ; < nl > + < nl > + public CallActor ( long callId , ModuleContext context ) { < nl > + super ( context ) ; < nl > + this . callId = callId ; < nl > + } < nl > + < nl > + public CallActor ( long callId , CallsModule . CallCallback callCallback , ModuleContext context ) { < nl > + super ( context ) ; < nl > + this . callId = callId ; < nl > + this . callback = callCallback ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + self ( ) . send ( new SendCallInProgress ( ) ) ; < nl > + self ( ) . send ( new CheckCallIsHandled ( ) , 1500 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof CallInProgress ) { < nl > + onCallInProgress ( ( ( CallInProgress ) message ) . getTimeout ( ) ) ; < nl > + } else if ( message instanceof CheckAlive ) { < nl > + checkAlive ( ) ; < nl > + } else if ( message instanceof SendCallInProgress ) { < nl > + sendCallInProgress ( ) ; < nl > + } else if ( message instanceof EndCall ) { < nl > + onEndCall ( ) ; < nl > + } else if ( message instanceof Signal ) { < nl > + onSignal ( ( ( Signal ) message ) . getData ( ) ) ; < nl > + } else if ( message instanceof HandleCall ) { < nl > + onHandleCall ( ( ( HandleCall ) message ) . getCallback ( ) ) ; < nl > + } else if ( message instanceof CheckCallIsHandled ) { < nl > + checkCallHandled ( ) ; < nl > + } < nl > + } < nl > + < nl > + private void checkCallHandled ( ) { < nl > + if ( callback = = null ) { < nl > + / / don ' t want to wait for fragment forever < nl > + callback = new CallsModule . CallCallback ( ) { < nl > + @ Override < nl > + public void onCallEnd ( ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onSignal ( byte [ ] data ) { < nl > + < nl > + } < nl > + } ; < nl > + } < nl > + } < nl > + < nl > + public void onSignal ( byte [ ] data ) { < nl > + if ( callback ! = null ) { < nl > + callback . onSignal ( data ) ; < nl > + } else { < nl > + signals . add ( data ) ; < nl > + } < nl > + } < nl > + < nl > + public void onEndCall ( ) { < nl > + if ( callback = = null ) { < nl > + / / fragment not yet created ? < nl > + self ( ) . send ( new EndCall ( ) , 500 ) ; < nl > + return ; < nl > + } < nl > + callback . onCallEnd ( ) ; < nl > + context ( ) . getCallsModule ( ) . onCallEnded ( callId ) ; < nl > + self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > + } < nl > + < nl > + public void checkAlive ( ) { < nl > + if ( alive ) { < nl > + alive = false ; < nl > + self ( ) . send ( new CheckAlive ( ) , timeout * 1000 ) ; < nl > + } else { < nl > + Log . d ( TAG , " no call in progress - call is dead " ) ; < nl > + context ( ) . getCallsModule ( ) . endCall ( callId ) ; < nl > + self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > + } < nl > + } < nl > + < nl > + private void sendCallInProgress ( ) { < nl > + context ( ) . getCallsModule ( ) . callInProgress ( callId ) ; < nl > + self ( ) . send ( new SendCallInProgress ( ) , CallsModule . CALL _ TIMEOUT * 1000 / 3 ) ; < nl > + < nl > + } < nl > + < nl > + private void onCallInProgress ( int timeout ) { < nl > + alive = true ; < nl > + this . timeout = timeout ; < nl > + if ( ! inited ) { < nl > + inited = true ; < nl > + alive = false ; < nl > + self ( ) . send ( new CheckAlive ( ) , timeout * 1000 ) ; < nl > + } < nl > + } < nl > + < nl > + private void onHandleCall ( CallsModule . CallCallback callCallback ) { < nl > + this . callback = callCallback ; < nl > + for ( byte [ ] s : signals ) { < nl > + callback . onSignal ( s ) ; < nl > + } < nl > + } < nl > + < nl > + public static class EndCall { < nl > + < nl > + } < nl > + < nl > + public static class Signal { < nl > + byte [ ] data ; < nl > + < nl > + public Signal ( byte [ ] data ) { < nl > + this . data = data ; < nl > + } < nl > + < nl > + public byte [ ] getData ( ) { < nl > + return data ; < nl > + } < nl > + } < nl > + < nl > + public static class CallInProgress { < nl > + < nl > + int timeout ; < nl > + < nl > + public CallInProgress ( int timeout ) { < nl > + this . timeout = timeout ; < nl > + } < nl > + < nl > + public int getTimeout ( ) { < nl > + return timeout ; < nl > + } < nl > + < nl > + } < nl > + < nl > + public static class HandleCall { < nl > + CallsModule . CallCallback callback ; < nl > + < nl > + public HandleCall ( CallsModule . CallCallback callback ) { < nl > + this . callback = callback ; < nl > + } < nl > + < nl > + public CallsModule . CallCallback getCallback ( ) { < nl > + return callback ; < nl > + } < nl > + } < nl > + < nl > + private static class CheckAlive { < nl > + < nl > + } < nl > + < nl > + private static class SendCallInProgress { < nl > + < nl > + } < nl > + < nl > + private static class CheckCallIsHandled { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > new file mode 100644 < nl > index 0000000 . . 2b3bc7c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > @ @ - 0 , 0 + 1 , 183 @ @ < nl > + package im . actor . core . modules . calls ; < nl > + < nl > + import java . util . HashMap ; < nl > + < nl > + import im . actor . core . api . ApiOutPeer ; < nl > + import im . actor . core . api . ApiPeerType ; < nl > + import im . actor . core . api . rpc . RequestCallInProgress ; < nl > + import im . actor . core . api . rpc . RequestDoCall ; < nl > + import im . actor . core . api . rpc . RequestEndCall ; < nl > + import im . actor . core . api . rpc . RequestSendCallSignal ; < nl > + import im . actor . core . api . rpc . RequestSubscribeToCalls ; < nl > + import im . actor . core . api . rpc . ResponseDoCall ; < nl > + import im . actor . core . entity . User ; < nl > + import im . actor . core . entity . signals . AbsSignal ; < nl > + import im . actor . core . events . IncomingCall ; < nl > + import im . actor . core . events . NewSessionCreated ; < nl > + import im . actor . core . modules . AbsModule ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . calls . CallActor ; < nl > + import im . actor . core . network . RpcCallback ; < nl > + import im . actor . core . network . RpcException ; < nl > + import im . actor . core . viewmodel . Command ; < nl > + import im . actor . core . viewmodel . CommandCallback ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . actors . ActorSystem ; < nl > + import im . actor . runtime . actors . Props ; < nl > + import im . actor . runtime . eventbus . BusSubscriber ; < nl > + import im . actor . runtime . eventbus . Event ; < nl > + < nl > + public class CallsModule extends AbsModule { < nl > + < nl > + public static final int MAX _ CALLS _ COUNT = 1 ; < nl > + private static final String TAG = " CALLS " ; < nl > + < nl > + public CallsModule ( ModuleContext context ) { < nl > + super ( context ) ; < nl > + } < nl > + < nl > + < nl > + public static final int CALL _ TIMEOUT = 10 ; < nl > + public static boolean CALLS _ ENABLED = false ; < nl > + public static boolean MULTIPLE _ CALLS _ ENABLED = false ; < nl > + HashMap < Long , ActorRef > calls = new HashMap < > ( ) ; < nl > + < nl > + public void run ( ) { < nl > + if ( CALLS _ ENABLED ) { < nl > + request ( new RequestSubscribeToCalls ( ) ) ; < nl > + context ( ) . getEvents ( ) . subscribe ( new BusSubscriber ( ) { < nl > + @ Override < nl > + public void onBusEvent ( Event event ) { < nl > + request ( new RequestSubscribeToCalls ( ) ) ; < nl > + } < nl > + } , NewSessionCreated . EVENT ) ; < nl > + } < nl > + } < nl > + < nl > + public Command < ResponseDoCall > makeCall ( final int uid , final CallCallback callCallback ) { < nl > + return new Command < ResponseDoCall > ( ) { < nl > + @ Override < nl > + public void start ( final CommandCallback < ResponseDoCall > callback ) { < nl > + User u = users ( ) . getValue ( uid ) ; < nl > + request ( new RequestDoCall ( new ApiOutPeer ( ApiPeerType . PRIVATE , u . getUid ( ) , u . getAccessHash ( ) ) , CALL _ TIMEOUT ) , new RpcCallback < ResponseDoCall > ( ) { < nl > + @ Override < nl > + public void onResult ( final ResponseDoCall response ) { < nl > + callback . onResult ( response ) ; < nl > + < nl > + Log . d ( TAG , " make call " + response . getCallId ( ) ) ; < nl > + calls . put ( response . getCallId ( ) , < nl > + ActorSystem . system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > + @ Override < nl > + public Actor create ( ) { < nl > + return new CallActor ( response . getCallId ( ) , callCallback , context ( ) ) ; < nl > + } < nl > + } ) , " actor / call _ " + response . getCallId ( ) ) ) ; < nl > + < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( RpcException e ) { < nl > + callback . onError ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > + public void callInProgress ( long callId ) { < nl > + request ( new RequestCallInProgress ( callId , CALL _ TIMEOUT ) ) ; < nl > + } < nl > + < nl > + public void handleCall ( final long callId , final CallCallback callback ) { < nl > + ActorRef call = calls . get ( callId ) ; < nl > + if ( call ! = null ) { < nl > + call . send ( new CallActor . HandleCall ( callback ) ) ; < nl > + } else { < nl > + / / can ' t find call - close fragment < nl > + callback . onCallEnd ( ) ; < nl > + } < nl > + } < nl > + < nl > + / / do end call < nl > + public void endCall ( long callId ) { < nl > + Log . d ( TAG , " do end call " + callId ) ; < nl > + < nl > + request ( new RequestEndCall ( callId ) ) ; < nl > + ActorRef call = calls . get ( callId ) ; < nl > + if ( call ! = null ) { < nl > + Log . d ( TAG , " call exist - end it " ) ; < nl > + < nl > + call . send ( new CallActor . EndCall ( ) ) ; < nl > + } else { < nl > + Log . d ( TAG , " call not exist - remove it " ) ; < nl > + onCallEnded ( callId ) ; < nl > + } < nl > + } < nl > + < nl > + public void onIncomingCall ( final long callId , int uid ) { < nl > + Log . d ( TAG , " incoming call " + callId ) ; < nl > + < nl > + if ( ! calls . keySet ( ) . contains ( callId ) ) { < nl > + calls . put ( callId , < nl > + ActorSystem . system ( ) . actorOf ( " actor / call _ " + callId , new ActorCreator ( ) { < nl > + @ Override < nl > + public Actor create ( ) { < nl > + return new CallActor ( callId , context ( ) ) ; < nl > + } < nl > + } ) ) ; < nl > + if ( ! MULTIPLE _ CALLS _ ENABLED & calls . keySet ( ) . size ( ) > MAX _ CALLS _ COUNT ) { < nl > + calls . get ( callId ) . send ( new CallActor . EndCall ( ) ) ; < nl > + } else { < nl > + context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; < nl > + } < nl > + } < nl > + < nl > + } < nl > + < nl > + / / on end call update < nl > + public void onEndCall ( long callId ) { < nl > + Log . d ( TAG , " end call update : " + callId ) ; < nl > + ActorRef call = calls . get ( callId ) ; < nl > + if ( call ! = null ) { < nl > + Log . d ( TAG , " call exist - end it " ) ; < nl > + call . send ( new CallActor . EndCall ( ) ) ; < nl > + } else { < nl > + Log . d ( TAG , " call not exist - remove it " ) ; < nl > + calls . remove ( callId ) ; < nl > + } < nl > + } < nl > + < nl > + / / after end call update processed by CallActor < nl > + public void onCallEnded ( long callId ) { < nl > + Log . d ( TAG , " on callActor ended call : " + callId ) ; < nl > + calls . remove ( callId ) ; < nl > + } < nl > + < nl > + public void onCallInProgress ( long callId , int timeout ) { < nl > + ActorRef call = calls . get ( callId ) ; < nl > + if ( call ! = null ) { < nl > + call . send ( new CallActor . CallInProgress ( timeout ) ) ; < nl > + } < nl > + } < nl > + < nl > + public void sendSignal ( long callId , AbsSignal signal ) { < nl > + request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; < nl > + } < nl > + < nl > + public void onSignal ( long callId , byte [ ] data ) { < nl > + ActorRef call = calls . get ( callId ) ; < nl > + if ( call ! = null ) { < nl > + call . send ( new CallActor . Signal ( data ) ) ; < nl > + } < nl > + } < nl > + < nl > + public interface CallCallback { < nl > + void onCallEnd ( ) ; < nl > + < nl > + void onSignal ( byte [ ] data ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > deleted file mode 100644 < nl > index 570f0e8 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > + + + / dev / null < nl > @ @ - 1 , 183 + 0 , 0 @ @ < nl > - package im . actor . core . modules . internal ; < nl > - < nl > - import java . util . HashMap ; < nl > - < nl > - import im . actor . core . api . ApiOutPeer ; < nl > - import im . actor . core . api . ApiPeerType ; < nl > - import im . actor . core . api . rpc . RequestCallInProgress ; < nl > - import im . actor . core . api . rpc . RequestDoCall ; < nl > - import im . actor . core . api . rpc . RequestEndCall ; < nl > - import im . actor . core . api . rpc . RequestSendCallSignal ; < nl > - import im . actor . core . api . rpc . RequestSubscribeToCalls ; < nl > - import im . actor . core . api . rpc . ResponseDoCall ; < nl > - import im . actor . core . entity . User ; < nl > - import im . actor . core . entity . signals . AbsSignal ; < nl > - import im . actor . core . events . IncomingCall ; < nl > - import im . actor . core . events . NewSessionCreated ; < nl > - import im . actor . core . modules . AbsModule ; < nl > - import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . core . modules . internal . calls . CallActor ; < nl > - import im . actor . core . network . RpcCallback ; < nl > - import im . actor . core . network . RpcException ; < nl > - import im . actor . core . viewmodel . Command ; < nl > - import im . actor . core . viewmodel . CommandCallback ; < nl > - import im . actor . runtime . Log ; < nl > - import im . actor . runtime . actors . Actor ; < nl > - import im . actor . runtime . actors . ActorCreator ; < nl > - import im . actor . runtime . actors . ActorRef ; < nl > - import im . actor . runtime . actors . ActorSystem ; < nl > - import im . actor . runtime . actors . Props ; < nl > - import im . actor . runtime . eventbus . BusSubscriber ; < nl > - import im . actor . runtime . eventbus . Event ; < nl > - < nl > - public class CallsModule extends AbsModule { < nl > - < nl > - public static final int MAX _ CALLS _ COUNT = 1 ; < nl > - private static final String TAG = " CALLS " ; < nl > - < nl > - public CallsModule ( ModuleContext context ) { < nl > - super ( context ) ; < nl > - } < nl > - < nl > - < nl > - public static final int CALL _ TIMEOUT = 10 ; < nl > - public static boolean CALLS _ ENABLED = false ; < nl > - public static boolean MULTIPLE _ CALLS _ ENABLED = false ; < nl > - HashMap < Long , ActorRef > calls = new HashMap < Long , ActorRef > ( ) ; < nl > - < nl > - public void run ( ) { < nl > - if ( CALLS _ ENABLED ) { < nl > - request ( new RequestSubscribeToCalls ( ) ) ; < nl > - context ( ) . getEvents ( ) . subscribe ( new BusSubscriber ( ) { < nl > - @ Override < nl > - public void onBusEvent ( Event event ) { < nl > - request ( new RequestSubscribeToCalls ( ) ) ; < nl > - } < nl > - } , NewSessionCreated . EVENT ) ; < nl > - } < nl > - } < nl > - < nl > - public Command < ResponseDoCall > makeCall ( final int uid , final CallCallback callCallback ) { < nl > - return new Command < ResponseDoCall > ( ) { < nl > - @ Override < nl > - public void start ( final CommandCallback < ResponseDoCall > callback ) { < nl > - User u = users ( ) . getValue ( uid ) ; < nl > - request ( new RequestDoCall ( new ApiOutPeer ( ApiPeerType . PRIVATE , u . getUid ( ) , u . getAccessHash ( ) ) , CALL _ TIMEOUT ) , new RpcCallback < ResponseDoCall > ( ) { < nl > - @ Override < nl > - public void onResult ( final ResponseDoCall response ) { < nl > - callback . onResult ( response ) ; < nl > - < nl > - Log . d ( TAG , " make call " + response . getCallId ( ) ) ; < nl > - calls . put ( response . getCallId ( ) , < nl > - ActorSystem . system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > - @ Override < nl > - public Actor create ( ) { < nl > - return new CallActor ( response . getCallId ( ) , callCallback , context ( ) ) ; < nl > - } < nl > - } ) , " actor / call _ " + response . getCallId ( ) ) ) ; < nl > - < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( RpcException e ) { < nl > - callback . onError ( e ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ; < nl > - } < nl > - < nl > - public void callInProgress ( long callId ) { < nl > - request ( new RequestCallInProgress ( callId , CALL _ TIMEOUT ) ) ; < nl > - } < nl > - < nl > - public void handleCall ( final long callId , final CallCallback callback ) { < nl > - ActorRef call = calls . get ( callId ) ; < nl > - if ( call ! = null ) { < nl > - call . send ( new CallActor . HandleCall ( callback ) ) ; < nl > - } else { < nl > - / / can ' t find call - close fragment < nl > - callback . onCallEnd ( ) ; < nl > - } < nl > - } < nl > - < nl > - / / do end call < nl > - public void endCall ( long callId ) { < nl > - Log . d ( TAG , " do end call " + callId ) ; < nl > - < nl > - request ( new RequestEndCall ( callId ) ) ; < nl > - ActorRef call = calls . get ( callId ) ; < nl > - if ( call ! = null ) { < nl > - Log . d ( TAG , " call exist - end it " ) ; < nl > - < nl > - call . send ( new CallActor . EndCall ( ) ) ; < nl > - } else { < nl > - Log . d ( TAG , " call not exist - remove it " ) ; < nl > - onCallEnded ( callId ) ; < nl > - } < nl > - } < nl > - < nl > - public void onIncomingCall ( final long callId , int uid ) { < nl > - Log . d ( TAG , " incoming call " + callId ) ; < nl > - < nl > - if ( ! calls . keySet ( ) . contains ( callId ) ) { < nl > - calls . put ( callId , < nl > - ActorSystem . system ( ) . actorOf ( " actor / call _ " + callId , new ActorCreator ( ) { < nl > - @ Override < nl > - public Actor create ( ) { < nl > - return new CallActor ( callId , context ( ) ) ; < nl > - } < nl > - } ) ) ; < nl > - if ( ! MULTIPLE _ CALLS _ ENABLED & calls . keySet ( ) . size ( ) > MAX _ CALLS _ COUNT ) { < nl > - calls . get ( callId ) . send ( new CallActor . EndCall ( ) ) ; < nl > - } else { < nl > - context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; < nl > - } < nl > - } < nl > - < nl > - } < nl > - < nl > - / / on end call update < nl > - public void onEndCall ( long callId ) { < nl > - Log . d ( TAG , " end call update : " + callId ) ; < nl > - ActorRef call = calls . get ( callId ) ; < nl > - if ( call ! = null ) { < nl > - Log . d ( TAG , " call exist - end it " ) ; < nl > - call . send ( new CallActor . EndCall ( ) ) ; < nl > - } else { < nl > - Log . d ( TAG , " call not exist - remove it " ) ; < nl > - calls . remove ( callId ) ; < nl > - } < nl > - } < nl > - < nl > - / / after end call update processed by CallActor < nl > - public void onCallEnded ( long callId ) { < nl > - Log . d ( TAG , " on callActor ended call : " + callId ) ; < nl > - calls . remove ( callId ) ; < nl > - } < nl > - < nl > - public void onCallInProgress ( long callId , int timeout ) { < nl > - ActorRef call = calls . get ( callId ) ; < nl > - if ( call ! = null ) { < nl > - call . send ( new CallActor . CallInProgress ( timeout ) ) ; < nl > - } < nl > - } < nl > - < nl > - public void sendSignal ( long callId , AbsSignal signal ) { < nl > - request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; < nl > - } < nl > - < nl > - public void onSignal ( long callId , byte [ ] data ) { < nl > - ActorRef call = calls . get ( callId ) ; < nl > - if ( call ! = null ) { < nl > - call . send ( new CallActor . Signal ( data ) ) ; < nl > - } < nl > - } < nl > - < nl > - public interface CallCallback { < nl > - void onCallEnd ( ) ; < nl > - < nl > - void onSignal ( byte [ ] data ) ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > deleted file mode 100644 < nl > index 27c2ec6 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > + + + / dev / null < nl > @ @ - 1 , 181 + 0 , 0 @ @ < nl > - package im . actor . core . modules . internal . calls ; < nl > - < nl > - import java . util . ArrayList ; < nl > - < nl > - import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . core . modules . internal . CallsModule ; < nl > - import im . actor . core . util . ModuleActor ; < nl > - import im . actor . runtime . Log ; < nl > - import im . actor . runtime . actors . messages . PoisonPill ; < nl > - < nl > - public class CallActor extends ModuleActor { < nl > - < nl > - public static final String TAG = " CallActor " ; < nl > - private boolean inited = false ; < nl > - private int timeout = 0 ; < nl > - private boolean alive = false ; < nl > - private long callId ; < nl > - private CallsModule . CallCallback callback ; < nl > - private ArrayList < byte [ ] > signals = new ArrayList < byte [ ] > ( ) ; < nl > - < nl > - public CallActor ( long callId , ModuleContext context ) { < nl > - super ( context ) ; < nl > - this . callId = callId ; < nl > - } < nl > - < nl > - public CallActor ( long callId , CallsModule . CallCallback callCallback , ModuleContext context ) { < nl > - super ( context ) ; < nl > - this . callId = callId ; < nl > - this . callback = callCallback ; < nl > - } < nl > - < nl > - @ Override < nl > - public void preStart ( ) { < nl > - super . preStart ( ) ; < nl > - self ( ) . send ( new SendCallInProgress ( ) ) ; < nl > - self ( ) . send ( new CheckCallIsHandled ( ) , 1500 ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onReceive ( Object message ) { < nl > - if ( message instanceof CallInProgress ) { < nl > - onCallInProgress ( ( ( CallInProgress ) message ) . getTimeout ( ) ) ; < nl > - } else if ( message instanceof CheckAlive ) { < nl > - checkAlive ( ) ; < nl > - } else if ( message instanceof SendCallInProgress ) { < nl > - sendCallInProgress ( ) ; < nl > - } else if ( message instanceof EndCall ) { < nl > - onEndCall ( ) ; < nl > - } else if ( message instanceof Signal ) { < nl > - onSignal ( ( ( Signal ) message ) . getData ( ) ) ; < nl > - } else if ( message instanceof HandleCall ) { < nl > - onHandleCall ( ( ( HandleCall ) message ) . getCallback ( ) ) ; < nl > - } else if ( message instanceof CheckCallIsHandled ) { < nl > - checkCallHandled ( ) ; < nl > - } < nl > - } < nl > - < nl > - private void checkCallHandled ( ) { < nl > - if ( callback = = null ) { < nl > - / / don ' t want to wait for fragment forever < nl > - callback = new CallsModule . CallCallback ( ) { < nl > - @ Override < nl > - public void onCallEnd ( ) { < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void onSignal ( byte [ ] data ) { < nl > - < nl > - } < nl > - } ; < nl > - } < nl > - } < nl > - < nl > - public void onSignal ( byte [ ] data ) { < nl > - if ( callback ! = null ) { < nl > - callback . onSignal ( data ) ; < nl > - } else { < nl > - signals . add ( data ) ; < nl > - } < nl > - } < nl > - < nl > - public void onEndCall ( ) { < nl > - if ( callback = = null ) { < nl > - / / fragment not yet created ? < nl > - self ( ) . send ( new EndCall ( ) , 500 ) ; < nl > - return ; < nl > - } < nl > - callback . onCallEnd ( ) ; < nl > - context ( ) . getCallsModule ( ) . onCallEnded ( callId ) ; < nl > - self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > - } < nl > - < nl > - public void checkAlive ( ) { < nl > - if ( alive ) { < nl > - alive = false ; < nl > - self ( ) . send ( new CheckAlive ( ) , timeout * 1000 ) ; < nl > - } else { < nl > - Log . d ( TAG , " no call in progress - call is dead " ) ; < nl > - context ( ) . getCallsModule ( ) . endCall ( callId ) ; < nl > - self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > - } < nl > - } < nl > - < nl > - private void sendCallInProgress ( ) { < nl > - context ( ) . getCallsModule ( ) . callInProgress ( callId ) ; < nl > - self ( ) . send ( new SendCallInProgress ( ) , CallsModule . CALL _ TIMEOUT * 1000 / 3 ) ; < nl > - < nl > - } < nl > - < nl > - private void onCallInProgress ( int timeout ) { < nl > - alive = true ; < nl > - this . timeout = timeout ; < nl > - if ( ! inited ) { < nl > - inited = true ; < nl > - alive = false ; < nl > - self ( ) . send ( new CheckAlive ( ) , timeout * 1000 ) ; < nl > - } < nl > - } < nl > - < nl > - private void onHandleCall ( CallsModule . CallCallback callCallback ) { < nl > - this . callback = callCallback ; < nl > - for ( byte [ ] s : signals ) { < nl > - callback . onSignal ( s ) ; < nl > - } < nl > - } < nl > - < nl > - public static class EndCall { < nl > - < nl > - } < nl > - < nl > - public static class Signal { < nl > - byte [ ] data ; < nl > - < nl > - public Signal ( byte [ ] data ) { < nl > - this . data = data ; < nl > - } < nl > - < nl > - public byte [ ] getData ( ) { < nl > - return data ; < nl > - } < nl > - } < nl > - < nl > - public static class CallInProgress { < nl > - < nl > - int timeout ; < nl > - < nl > - public CallInProgress ( int timeout ) { < nl > - this . timeout = timeout ; < nl > - } < nl > - < nl > - public int getTimeout ( ) { < nl > - return timeout ; < nl > - } < nl > - < nl > - } < nl > - < nl > - public static class HandleCall { < nl > - CallsModule . CallCallback callback ; < nl > - < nl > - public HandleCall ( CallsModule . CallCallback callback ) { < nl > - this . callback = callback ; < nl > - } < nl > - < nl > - public CallsModule . CallCallback getCallback ( ) { < nl > - return callback ; < nl > - } < nl > - } < nl > - < nl > - private static class CheckAlive { < nl > - < nl > - } < nl > - < nl > - private static class SendCallInProgress { < nl > - < nl > - } < nl > - < nl > - private static class CheckCallIsHandled { < nl > - < nl > - } < nl > - }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java b / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java < nl > index 7bed8c1 . . 3d71ea1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java < nl > @ @ - 52 , 19 + 52 , 6 @ @ public class CocoaMessenger extends Messenger { < nl > public BindedDisplayList < Message > getMessageDisplayList ( final Peer peer ) { < nl > if ( ! messagesLists . containsKey ( peer ) ) { < nl > BindedDisplayList < Message > list = ( BindedDisplayList < Message > ) modules . getDisplayListsModule ( ) . getMessagesSharedList ( peer ) ; < nl > - list . setBindHook ( new BindedDisplayList . BindHook < Message > ( ) { < nl > - @ Override < nl > - public void onScrolledToEnd ( ) { < nl > - modules . getMessagesModule ( ) . loadMoreHistory ( peer ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onItemTouched ( Message item ) { < nl > - if ( item . isOnServer ( ) ) { < nl > - modules . getMessagesModule ( ) . onMessageShown ( peer , item . getSenderId ( ) , item . getSortDate ( ) ) ; < nl > - } < nl > - } < nl > - } ) ; < nl > messagesLists . put ( peer , list ) ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java < nl > index d6c8aea . . 2e9d280 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java < nl > @ @ - 4 , 34 + 4 , 40 @ @ < nl > < nl > package im . actor . core . modules . api ; < nl > < nl > - < nl > - import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > + import java . util . List ; < nl > < nl > - import im . actor . core . api . ApiUpdateContainer ; < nl > + import im . actor . core . api . ApiGroup ; < nl > import im . actor . core . api . ApiUpdateOptimization ; < nl > + import im . actor . core . api . ApiUser ; < nl > import im . actor . core . api . base . FatSeqUpdate ; < nl > import im . actor . core . api . base . SeqUpdate ; < nl > import im . actor . core . api . base . SeqUpdateTooLong ; < nl > - import im . actor . core . api . base . WeakUpdate ; < nl > - import im . actor . core . api . parser . UpdatesParser ; < nl > import im . actor . core . api . rpc . RequestGetDifference ; < nl > import im . actor . core . api . rpc . RequestGetState ; < nl > import im . actor . core . api . rpc . ResponseGetDifference ; < nl > import im . actor . core . api . rpc . ResponseSeq ; < nl > import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . core . modules . updates . UpdateProcessor ; < nl > import im . actor . core . modules . updates . internal . ExecuteAfter ; < nl > - import im . actor . core . modules . updates . internal . InternalUpdate ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > - import im . actor . core . network . parser . Update ; < nl > import im . actor . core . util . ModuleActor ; < nl > import im . actor . runtime . Log ; < nl > + import im . actor . runtime . function . Constructor ; < nl > + import im . actor . runtime . function . Consumer ; < nl > < nl > public class SequenceActor extends ModuleActor { < nl > < nl > + public static Constructor < SequenceActor > CONSTRUCTOR ( final ModuleContext context ) { < nl > + return new Constructor < SequenceActor > ( ) { < nl > + @ Override < nl > + public SequenceActor create ( ) { < nl > + return new SequenceActor ( context ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > private static final String TAG = " Updates " ; < nl > private static final int INVALIDATE _ GAP = 2000 ; / / 2 Secs < nl > private static final int INVALIDATE _ MAX _ SEC _ HOLE = 10 ; < nl > @ @ - 39 , 9 + 45 , 9 @ @ public class SequenceActor extends ModuleActor { < nl > private static final String KEY _ SEQ = " updates _ seq " ; < nl > private static final String KEY _ STATE = " updates _ state " ; < nl > < nl > - private HashMap < Integer , Object > further = new HashMap < Integer , Object > ( ) ; < nl > + private HashMap < Integer , Object > further = new HashMap < > ( ) ; < nl > < nl > - private ArrayList < ExecuteAfter > pendingRunnables = new ArrayList < ExecuteAfter > ( ) ; < nl > + private ArrayList < ExecuteAfter > pendingRunnables = new ArrayList < > ( ) ; < nl > < nl > private boolean isValidated = true ; < nl > private boolean isTimerStarted = false ; < nl > @ @ - 49 , 8 + 55 , 9 @ @ public class SequenceActor extends ModuleActor { < nl > private int seq ; < nl > private byte [ ] state ; < nl > < nl > - private UpdateProcessor processor ; < nl > - private UpdatesParser parser ; < nl > + private int finishedSeq ; < nl > + < nl > + private SequenceHandlerInt handler ; < nl > < nl > public SequenceActor ( ModuleContext modules ) { < nl > super ( modules ) ; < nl > @ @ - 59 , 39 + 66 , 35 @ @ public class SequenceActor extends ModuleActor { < nl > @ Override < nl > public void preStart ( ) { < nl > seq = preferences ( ) . getInt ( KEY _ SEQ , - 1 ) ; < nl > + finishedSeq = seq ; < nl > state = preferences ( ) . getBytes ( KEY _ STATE ) ; < nl > - parser = new UpdatesParser ( ) ; < nl > - processor = new UpdateProcessor ( context ( ) ) ; < nl > + < nl > + handler = context ( ) . getUpdatesModule ( ) . getUpdateHandler ( ) ; < nl > < nl > self ( ) . send ( new Invalidate ( ) ) ; < nl > } < nl > < nl > - @ Override < nl > - public void onReceive ( Object message ) { < nl > - if ( message instanceof Invalidate | | message instanceof SeqUpdateTooLong | | < nl > - message instanceof ForceInvalidate ) { < nl > - invalidate ( ) ; < nl > - } else if ( message instanceof SeqUpdate ) { < nl > - onUpdateReceived ( message ) ; < nl > - } else if ( message instanceof FatSeqUpdate ) { < nl > - onUpdateReceived ( message ) ; < nl > - } else if ( message instanceof WeakUpdate ) { < nl > - onUpdateReceived ( message ) ; < nl > - } else if ( message instanceof InternalUpdate ) { < nl > - onUpdateReceived ( message ) ; < nl > - } else if ( message instanceof ExecuteAfter ) { < nl > - onUpdateReceived ( message ) ; < nl > - } else if ( message instanceof PushSeq ) { < nl > - onUpdateReceived ( message ) ; < nl > + private void onPushSeqReceived ( int seq ) { < nl > + if ( seq < = this . seq ) { < nl > + Log . d ( TAG , " Ignored PushSeq { seq : " + seq + " } " ) ; < nl > } else { < nl > - drop ( message ) ; < nl > + Log . w ( TAG , " External Out of sequence : starting timer for invalidation " ) ; < nl > + self ( ) . sendOnce ( new ForceInvalidate ( ) , INVALIDATE _ GAP ) ; < nl > + } < nl > + } < nl > + < nl > + private void onExecuteAfter ( ExecuteAfter after ) { < nl > + if ( after . getSeq ( ) < = this . seq ) { < nl > + after . getRunnable ( ) . run ( ) ; < nl > + } else { < nl > + pendingRunnables . add ( after ) ; < nl > } < nl > } < nl > < nl > private void onUpdateReceived ( Object u ) { < nl > / / Building parameters < nl > - int seq ; < nl > - byte [ ] state ; < nl > + final int seq ; < nl > + final byte [ ] state ; < nl > int type ; < nl > byte [ ] body ; < nl > if ( u instanceof SeqUpdate ) { < nl > @ @ - 104 , 40 + 107 , 8 @ @ public class SequenceActor extends ModuleActor { < nl > state = ( ( FatSeqUpdate ) u ) . getState ( ) ; < nl > type = ( ( FatSeqUpdate ) u ) . getUpdateHeader ( ) ; < nl > body = ( ( FatSeqUpdate ) u ) . getUpdate ( ) ; < nl > - } else if ( u instanceof WeakUpdate ) { < nl > - WeakUpdate w = ( WeakUpdate ) u ; < nl > - try { < nl > - Update update = parser . read ( w . getUpdateHeader ( ) , w . getUpdate ( ) ) ; < nl > - processor . processWeakUpdate ( update , w . getDate ( ) ) ; < nl > - Log . d ( TAG , " Weak Update : " + update ) ; < nl > - } catch ( IOException e ) { < nl > - e . printStackTrace ( ) ; < nl > - Log . w ( TAG , " Unable to parse update : ignoring " ) ; < nl > - } < nl > - return ; < nl > - } else if ( u instanceof InternalUpdate ) { < nl > - Log . d ( TAG , " Received internal update " ) ; < nl > - processor . processInternalUpdate ( ( InternalUpdate ) u ) ; < nl > - return ; < nl > - } else if ( u instanceof ExecuteAfter ) { < nl > - ExecuteAfter after = ( ExecuteAfter ) u ; < nl > - if ( after . getSeq ( ) < = this . seq ) { < nl > - after . getRunnable ( ) . run ( ) ; < nl > - } else { < nl > - pendingRunnables . add ( after ) ; < nl > - } < nl > - return ; < nl > - } else if ( u instanceof PushSeq ) { < nl > - PushSeq pushSeq = ( PushSeq ) u ; < nl > - if ( pushSeq . seq < = this . seq ) { < nl > - Log . d ( TAG , " Ignored PushSeq { seq : " + pushSeq . seq + " } " ) ; < nl > - } else { < nl > - Log . w ( TAG , " External Out of sequence : starting timer for invalidation " ) ; < nl > - self ( ) . sendOnce ( new ForceInvalidate ( ) , INVALIDATE _ GAP ) ; < nl > - } < nl > - return ; < nl > } else { < nl > - return ; < nl > + throw new RuntimeException ( ) ; < nl > } < nl > < nl > / / Checking sequence < nl > @ @ - 173 , 45 + 144 , 31 @ @ public class SequenceActor extends ModuleActor { < nl > return ; < nl > } < nl > < nl > - / / Checking update < nl > - Update update = null ; < nl > - try { < nl > - update = new UpdatesParser ( ) . read ( type , body ) ; < nl > - } catch ( IOException e ) { < nl > - Log . w ( TAG , " Unable to parse update : ignoring " ) ; < nl > - e . printStackTrace ( ) ; < nl > + List < ApiUser > users = null ; < nl > + List < ApiGroup > groups = null ; < nl > + if ( u instanceof FatSeqUpdate ) { < nl > + users = ( ( FatSeqUpdate ) u ) . getUsers ( ) ; < nl > + groups = ( ( FatSeqUpdate ) u ) . getGroups ( ) ; < nl > } < nl > - < nl > - if ( update ! = null ) { < nl > - if ( ( ! ( u instanceof FatSeqUpdate ) ) & & processor . isCausesInvalidation ( update ) ) { < nl > - Log . w ( TAG , " Message causes invalidation " ) ; < nl > - invalidate ( ) ; < nl > - return ; < nl > + handler . onSeqUpdate ( type , body , users , groups ) . then ( new Consumer < SequenceHandlerActor . UpdateProcessed > ( ) { < nl > + @ Override < nl > + public void apply ( SequenceHandlerActor . UpdateProcessed updateProcessed ) { < nl > + finishedSeq = seq ; < nl > + preferences ( ) . putInt ( KEY _ SEQ , finishedSeq ) ; < nl > + preferences ( ) . putBytes ( KEY _ STATE , state ) ; < nl > + checkRunnables ( ) ; < nl > } < nl > - < nl > - / / Processing update < nl > - Log . d ( TAG , " Processing update : " + update ) ; < nl > - < nl > - if ( u instanceof FatSeqUpdate ) { < nl > - FatSeqUpdate fatSeqUpdate = ( FatSeqUpdate ) u ; < nl > - processor . applyRelated ( fatSeqUpdate . getUsers ( ) , fatSeqUpdate . getGroups ( ) , false ) ; < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + / / TODO ? < nl > } < nl > + } ) ; < nl > < nl > - processor . processUpdate ( update ) ; < nl > - < nl > - if ( u instanceof FatSeqUpdate ) { < nl > - FatSeqUpdate fatSeqUpdate = ( FatSeqUpdate ) u ; < nl > - processor . applyRelated ( fatSeqUpdate . getUsers ( ) , fatSeqUpdate . getGroups ( ) , true ) ; < nl > - } < nl > - } < nl > - < nl > - / / Saving state < nl > + / / Saving memory - only state < nl > this . seq = seq ; < nl > this . state = state ; < nl > - preferences ( ) . putInt ( KEY _ SEQ , seq ) ; < nl > - preferences ( ) . putBytes ( KEY _ STATE , state ) ; < nl > < nl > - checkRunnables ( ) ; < nl > checkFuture ( ) ; < nl > < nl > / / Faaaaaar away < nl > @ @ - 239 , 6 + 196 , 7 @ @ public class SequenceActor extends ModuleActor { < nl > } < nl > < nl > seq = response . getSeq ( ) ; < nl > + finishedSeq = seq ; < nl > state = response . getState ( ) ; < nl > < nl > isValidated = true ; < nl > @ @ - 272 , 7 + 230 , 7 @ @ public class SequenceActor extends ModuleActor { < nl > final long loadStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; < nl > request ( new RequestGetDifference ( seq , state , new ArrayList < ApiUpdateOptimization > ( ) ) , new RpcCallback < ResponseGetDifference > ( ) { < nl > @ Override < nl > - public void onResult ( ResponseGetDifference response ) { < nl > + public void onResult ( final ResponseGetDifference response ) { < nl > if ( isValidated ) { < nl > return ; < nl > } < nl > @ @ - 280 , 39 + 238 , 28 @ @ public class SequenceActor extends ModuleActor { < nl > Log . d ( TAG , " Difference loaded { seq = " + response . getSeq ( ) + " } in " < nl > + ( im . actor . runtime . Runtime . getCurrentTime ( ) - loadStart ) + " ms " ) ; < nl > < nl > - long parseStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; < nl > - ArrayList < Update > updates = new ArrayList < Update > ( ) ; < nl > - for ( ApiUpdateContainer u : response . getUpdates ( ) ) { < nl > - try { < nl > - updates . add ( parser . read ( u . getUpdateHeader ( ) , u . getUpdate ( ) ) ) ; < nl > - } catch ( IOException e ) { < nl > - e . printStackTrace ( ) ; < nl > - Log . d ( TAG , " Broken update # " + u . getUpdateHeader ( ) + " : ignoring " ) ; < nl > - } < nl > - } < nl > - Log . d ( TAG , " Difference parsed in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - parseStart ) + " ms " ) ; < nl > - < nl > - if ( updates . size ( ) > 0 ) { < nl > - String command = " Difference updates : " ; < nl > - for ( Update u : updates ) { < nl > - command + = " \ n | " + u ; < nl > - } < nl > - Log . d ( TAG , command ) ; < nl > - } < nl > - < nl > - long applyStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; < nl > - processor . applyDifferenceUpdate ( response . getUsers ( ) , response . getGroups ( ) , updates ) ; < nl > - Log . d ( TAG , " Difference applied in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - applyStart ) + " ms " ) ; < nl > + / / checkRunnables ( ) ; < nl > < nl > seq = response . getSeq ( ) ; < nl > state = response . getState ( ) ; < nl > < nl > - isValidated = true ; < nl > + handler . onDifferenceUpdate ( response ) . then ( new Consumer < SequenceHandlerActor . UpdateProcessed > ( ) { < nl > + @ Override < nl > + public void apply ( SequenceHandlerActor . UpdateProcessed updateProcessed ) { < nl > + finishedSeq = response . getSeq ( ) ; < nl > + preferences ( ) . putInt ( KEY _ SEQ , seq ) ; < nl > + preferences ( ) . putBytes ( KEY _ STATE , state ) ; < nl > + checkRunnables ( ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + / / TODO ? < nl > + } < nl > + } ) ; < nl > < nl > - preferences ( ) . putInt ( KEY _ SEQ , seq ) ; < nl > - preferences ( ) . putBytes ( KEY _ STATE , state ) ; < nl > + isValidated = true ; < nl > < nl > - checkRunnables ( ) ; < nl > checkFuture ( ) ; < nl > < nl > / / Faaaaaar away < nl > @ @ - 365 , 7 + 312 , 7 @ @ public class SequenceActor extends ModuleActor { < nl > private void checkRunnables ( ) { < nl > if ( pendingRunnables . size ( ) > 0 ) { < nl > for ( ExecuteAfter e : pendingRunnables . toArray ( new ExecuteAfter [ pendingRunnables . size ( ) ] ) ) { < nl > - if ( e . getSeq ( ) < = this . seq ) { < nl > + if ( e . getSeq ( ) < = this . finishedSeq ) { < nl > e . getRunnable ( ) . run ( ) ; < nl > pendingRunnables . remove ( e ) ; < nl > } < nl > @ @ - 373 , 6 + 320 , 27 @ @ public class SequenceActor extends ModuleActor { < nl > } < nl > } < nl > < nl > + / / < nl > + / / Messages < nl > + / / < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof Invalidate < nl > + | | message instanceof SeqUpdateTooLong < nl > + | | message instanceof ForceInvalidate ) { < nl > + invalidate ( ) ; < nl > + } else if ( message instanceof SeqUpdate | | message instanceof FatSeqUpdate ) { < nl > + onUpdateReceived ( message ) ; < nl > + } else if ( message instanceof ExecuteAfter ) { < nl > + onExecuteAfter ( ( ExecuteAfter ) message ) ; < nl > + } else if ( message instanceof PushSeq ) { < nl > + onPushSeqReceived ( ( ( PushSeq ) message ) . seq ) ; < nl > + } else { < nl > + drop ( message ) ; < nl > + } < nl > + } < nl > + < nl > public static class ForceInvalidate { < nl > < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java < nl > index 2b01df2 . . 0502c55 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java < nl > @ @ - 1 , 56 + 1 , 94 @ @ < nl > package im . actor . core . modules . api ; < nl > < nl > + import org . jetbrains . annotations . Nullable ; < nl > + < nl > import java . io . IOException ; < nl > + import java . util . ArrayList ; < nl > import java . util . List ; < nl > < nl > import im . actor . core . api . ApiGroup ; < nl > + import im . actor . core . api . ApiUpdateContainer ; < nl > import im . actor . core . api . ApiUser ; < nl > import im . actor . core . api . parser . UpdatesParser ; < nl > + import im . actor . core . api . rpc . ResponseGetDifference ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . updates . UpdateProcessor ; < nl > + import im . actor . core . modules . updates . internal . InternalUpdate ; < nl > import im . actor . core . util . ModuleActor ; < nl > import im . actor . core . network . parser . Update ; < nl > import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . function . Constructor ; < nl > + import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . promise . PromiseResolver ; < nl > + import im . actor . runtime . promise . Promises ; < nl > < nl > public class SequenceHandlerActor extends ModuleActor { < nl > < nl > + public static Constructor < SequenceHandlerActor > CONSTRUCTOR ( final ModuleContext context ) { < nl > + return new Constructor < SequenceHandlerActor > ( ) { < nl > + @ Override < nl > + public SequenceHandlerActor create ( ) { < nl > + return new SequenceHandlerActor ( context ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > private static final String TAG = " SequenceHandlerActor " ; < nl > < nl > private UpdateProcessor processor ; < nl > + private UpdatesParser updatesParser ; < nl > < nl > - public SequenceHandlerActor ( UpdateProcessor processor , ModuleContext context ) { < nl > + public SequenceHandlerActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > < nl > - this . processor = processor ; < nl > + this . processor = new UpdateProcessor ( context ) ; < nl > } < nl > < nl > - private void onWeakUpdateReceived ( Update update , long date ) { < nl > - Log . d ( TAG , " Processing weak update : " + update ) ; < nl > - this . processor . processWeakUpdate ( update , date ) ; < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + this . updatesParser = new UpdatesParser ( ) ; < nl > } < nl > < nl > - private void onSeqUpdate ( int type , byte [ ] body , List < ApiUser > users , < nl > - List < ApiGroup > groups , PromiseResolver future ) { < nl > + private void onInternalUpdate ( InternalUpdate internalUpdate ) { < nl > + processor . processInternalUpdate ( internalUpdate ) ; < nl > + } < nl > < nl > + private void onWeakUpdateReceived ( int type , byte [ ] body , long date ) { < nl > Update update ; < nl > try { < nl > - update = new UpdatesParser ( ) . read ( type , body ) ; < nl > + update = updatesParser . read ( type , body ) ; < nl > } catch ( IOException e ) { < nl > Log . w ( TAG , " Unable to parse update : ignoring " ) ; < nl > Log . e ( TAG , e ) ; < nl > - future . result ( null ) ; < nl > return ; < nl > } < nl > < nl > - if ( groups = = null | | users = = null ) { < nl > - if ( processor . isCausesInvalidation ( update ) ) { < nl > - Log . w ( TAG , " Difference is required " ) ; < nl > - future . error ( new RuntimeException ( " Difference is required " ) ) ; < nl > - return ; < nl > - } < nl > + Log . d ( TAG , " Processing weak update : " + update ) ; < nl > + this . processor . processWeakUpdate ( update , date ) ; < nl > + } < nl > + < nl > + private Promise < UpdateProcessed > onSeqUpdate ( int type , byte [ ] body , @ Nullable List < ApiUser > users , < nl > + @ Nullable List < ApiGroup > groups ) throws Exception { < nl > + < nl > + Update update ; < nl > + try { < nl > + update = updatesParser . read ( type , body ) ; < nl > + } catch ( IOException e ) { < nl > + Log . w ( TAG , " Unable to parse update : ignoring " ) ; < nl > + Log . e ( TAG , e ) ; < nl > + return Promises . success ( new UpdateProcessed ( ) ) ; < nl > } < nl > < nl > + / / TODO : Implement < nl > + / / if ( groups = = null | | users = = null ) { < nl > + / / if ( processor . isCausesInvalidation ( update ) ) { < nl > + / / Log . w ( TAG , " Difference is required " ) ; < nl > + / / throw new RuntimeException ( ) ; < nl > + / / } < nl > + / / } < nl > + < nl > / / Processing update < nl > Log . d ( TAG , " Processing update : " + update ) ; < nl > < nl > @ @ - 65 , 51 + 103 , 107 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > } < nl > < nl > Log . d ( TAG , " Processing update success " ) ; < nl > - future . result ( null ) ; < nl > + return Promises . success ( new UpdateProcessed ( ) ) ; < nl > + } < nl > + < nl > + private Promise < UpdateProcessed > onDifferenceUpdate ( ResponseGetDifference difference ) { < nl > + long parseStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; < nl > + ArrayList < Update > updates = new ArrayList < Update > ( ) ; < nl > + for ( ApiUpdateContainer u : difference . getUpdates ( ) ) { < nl > + try { < nl > + updates . add ( updatesParser . read ( u . getUpdateHeader ( ) , u . getUpdate ( ) ) ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + Log . d ( TAG , " Broken update # " + u . getUpdateHeader ( ) + " : ignoring " ) ; < nl > + } < nl > + } < nl > + Log . d ( TAG , " Difference parsed in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - parseStart ) + " ms " ) ; < nl > + < nl > + if ( updates . size ( ) > 0 ) { < nl > + String command = " Difference updates : " ; < nl > + for ( Update u : updates ) { < nl > + command + = " \ n | " + u ; < nl > + } < nl > + Log . d ( TAG , command ) ; < nl > + } < nl > + < nl > + long applyStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; < nl > + processor . applyDifferenceUpdate ( difference . getUsers ( ) , difference . getGroups ( ) , updates ) ; < nl > + Log . d ( TAG , " Difference applied in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - applyStart ) + " ms " ) ; < nl > + return Promises . success ( new UpdateProcessed ( ) ) ; < nl > } < nl > < nl > @ Override < nl > - public void onAsk ( Object message , PromiseResolver future ) { < nl > + public void onReceive ( Object message ) { < nl > if ( message instanceof WeakUpdate ) { < nl > WeakUpdate weakUpdate = ( WeakUpdate ) message ; < nl > - onWeakUpdateReceived ( weakUpdate . getUpdate ( ) , weakUpdate . getDate ( ) ) ; < nl > - future . result ( null ) ; < nl > - } else if ( message instanceof SeqUpdate ) { < nl > + try { < nl > + onWeakUpdateReceived ( weakUpdate . type , weakUpdate . body , weakUpdate . date ) ; < nl > + } catch ( Exception e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } else if ( message instanceof InternalUpdate ) { < nl > + onInternalUpdate ( ( InternalUpdate ) message ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onAsk ( Object message , PromiseResolver resolver ) { < nl > + if ( message instanceof SeqUpdate ) { < nl > SeqUpdate seqUpdate = ( SeqUpdate ) message ; < nl > - onSeqUpdate ( seqUpdate . type , seqUpdate . body , < nl > - seqUpdate . users , seqUpdate . groups , future ) ; < nl > + try { < nl > + onSeqUpdate ( seqUpdate . type , seqUpdate . body , seqUpdate . users , seqUpdate . groups ) < nl > + . pipeTo ( resolver ) ; < nl > + } catch ( Exception e ) { < nl > + resolver . tryError ( e ) ; < nl > + } < nl > + } else if ( message instanceof DifferenceUpdate ) { < nl > + DifferenceUpdate differenceUpdate = ( DifferenceUpdate ) message ; < nl > + onDifferenceUpdate ( differenceUpdate . getDifference ( ) ) < nl > + . pipeTo ( resolver ) ; < nl > } else { < nl > - super . onAsk ( message , future ) ; < nl > + super . onAsk ( message , resolver ) ; < nl > } < nl > } < nl > < nl > public static class WeakUpdate { < nl > < nl > - private Update update ; < nl > + private int type ; < nl > + private byte [ ] body ; < nl > private long date ; < nl > < nl > - public WeakUpdate ( Update update , long date ) { < nl > - this . update = update ; < nl > + public WeakUpdate ( int type , byte [ ] body , long date ) { < nl > + this . type = type ; < nl > + this . body = body ; < nl > this . date = date ; < nl > } < nl > < nl > - public long getDate ( ) { < nl > - return date ; < nl > + public int getType ( ) { < nl > + return type ; < nl > } < nl > < nl > - public Update getUpdate ( ) { < nl > - return update ; < nl > + public byte [ ] getBody ( ) { < nl > + return body ; < nl > + } < nl > + < nl > + public long getDate ( ) { < nl > + return date ; < nl > } < nl > } < nl > < nl > - public static class SeqUpdate { < nl > + public static class SeqUpdate implements AskMessage < UpdateProcessed > { < nl > < nl > private int type ; < nl > private byte [ ] body ; < nl > + @ Nullable < nl > private List < ApiUser > users ; < nl > - private List < ApiGroup > groups ; < nl > + @ Nullable < nl > + private < nl > + List < ApiGroup > groups ; < nl > < nl > - public SeqUpdate ( int type , byte [ ] body , List < ApiUser > users , List < ApiGroup > groups ) { < nl > + public SeqUpdate ( int type , byte [ ] body , @ Nullable List < ApiUser > users , @ Nullable List < ApiGroup > groups ) { < nl > this . type = type ; < nl > this . body = body ; < nl > this . users = users ; < nl > @ @ - 124 , 12 + 218 , 32 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > return body ; < nl > } < nl > < nl > - public List < ApiUser > getUsers ( ) { < nl > + public < nl > + @ Nullable < nl > + List < ApiUser > getUsers ( ) { < nl > return users ; < nl > } < nl > < nl > - public List < ApiGroup > getGroups ( ) { < nl > + public < nl > + @ Nullable < nl > + List < ApiGroup > getGroups ( ) { < nl > return groups ; < nl > } < nl > } < nl > + < nl > + public static class DifferenceUpdate implements AskMessage < UpdateProcessed > { < nl > + private ResponseGetDifference difference ; < nl > + < nl > + public DifferenceUpdate ( ResponseGetDifference difference ) { < nl > + this . difference = difference ; < nl > + } < nl > + < nl > + public ResponseGetDifference getDifference ( ) { < nl > + return difference ; < nl > + } < nl > + } < nl > + < nl > + public static class UpdateProcessed { < nl > + < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerInt . java < nl > new file mode 100644 < nl > index 0000000 . . afa1446 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerInt . java < nl > @ @ - 0 , 0 + 1 , 39 @ @ < nl > + package im . actor . core . modules . api ; < nl > + < nl > + import org . jetbrains . annotations . Nullable ; < nl > + < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . api . ApiGroup ; < nl > + import im . actor . core . api . ApiUser ; < nl > + import im . actor . core . api . rpc . ResponseGetDifference ; < nl > + import im . actor . core . modules . updates . internal . InternalUpdate ; < nl > + import im . actor . runtime . actors . ActorInterface ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . promise . Promise ; < nl > + import im . actor . core . modules . api . SequenceHandlerActor . * ; < nl > + < nl > + public class SequenceHandlerInt extends ActorInterface { < nl > + < nl > + public SequenceHandlerInt ( ActorRef dest ) { < nl > + super ( dest ) ; < nl > + } < nl > + < nl > + public Promise < UpdateProcessed > onSeqUpdate ( int updateKey , byte [ ] data , < nl > + @ Nullable List < ApiUser > users , < nl > + @ Nullable List < ApiGroup > groups ) { < nl > + return ask ( new SeqUpdate ( updateKey , data , users , groups ) ) ; < nl > + } < nl > + < nl > + public Promise < UpdateProcessed > onDifferenceUpdate ( ResponseGetDifference difference ) { < nl > + return ask ( new DifferenceUpdate ( difference ) ) ; < nl > + } < nl > + < nl > + public void onWeakUpdate ( int type , byte [ ] data , long date ) { < nl > + send ( new WeakUpdate ( type , data , date ) ) ; < nl > + } < nl > + < nl > + public void onInternalUpdate ( InternalUpdate internalUpdate ) { < nl > + send ( internalUpdate ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java < nl > index 99f0180 . . 6e6c704 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java < nl > @ @ - 10 , 10 + 10 , 12 @ @ import im . actor . core . api . ApiGroup ; < nl > import im . actor . core . api . ApiUser ; < nl > import im . actor . core . api . base . FatSeqUpdate ; < nl > import im . actor . core . api . base . SeqUpdate ; < nl > + import im . actor . core . api . base . WeakUpdate ; < nl > import im . actor . core . events . NewSessionCreated ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . updates . internal . ExecuteAfter ; < nl > + import im . actor . core . modules . updates . internal . InternalUpdate ; < nl > import im . actor . core . modules . updates . internal . RelatedResponse ; < nl > import im . actor . core . network . parser . Update ; < nl > import im . actor . runtime . actors . Actor ; < nl > @ @ - 28 , 22 + 30 , 31 @ @ import static im . actor . runtime . actors . ActorSystem . system ; < nl > public class Updates extends AbsModule implements BusSubscriber { < nl > < nl > private ActorRef updateActor ; < nl > + private ActorRef updateHandler ; < nl > + private SequenceHandlerInt updateHandlerInt ; < nl > < nl > public Updates ( ModuleContext messenger ) { < nl > super ( messenger ) ; < nl > } < nl > < nl > public void run ( ) { < nl > - this . updateActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > - @ Override < nl > - public Actor create ( ) { < nl > - return new SequenceActor ( context ( ) ) ; < nl > - } < nl > - } ) . changeDispatcher ( " updates " ) , " actor / updates " ) ; < nl > + this . updateHandler = system ( ) . actorOf ( " actor / updates / handler " , " updates " , < nl > + SequenceHandlerActor . CONSTRUCTOR ( context ( ) ) ) ; < nl > + this . updateHandlerInt = new SequenceHandlerInt ( this . updateHandler ) ; < nl > + this . updateActor = system ( ) . actorOf ( " actor / updates " , SequenceActor . CONSTRUCTOR ( context ( ) ) ) ; < nl > + < nl > < nl > context ( ) . getEvents ( ) . subscribe ( this , NewSessionCreated . EVENT ) ; < nl > } < nl > < nl > + public ActorRef getUpdateActor ( ) { < nl > + return updateActor ; < nl > + } < nl > + < nl > + public SequenceHandlerInt getUpdateHandler ( ) { < nl > + return updateHandlerInt ; < nl > + } < nl > + < nl > public void onPushReceived ( int seq ) { < nl > updateActor . send ( new SequenceActor . PushSeq ( seq ) ) ; < nl > } < nl > @ @ - 59 , 7 + 70 , 15 @ @ public class Updates extends AbsModule implements BusSubscriber { < nl > } < nl > < nl > public void onUpdateReceived ( Object update ) { < nl > - updateActor . send ( update ) ; < nl > + if ( update instanceof WeakUpdate ) { < nl > + WeakUpdate weakUpdate = ( WeakUpdate ) update ; < nl > + updateHandlerInt . onWeakUpdate ( weakUpdate . getUpdateHeader ( ) , < nl > + weakUpdate . getUpdate ( ) , weakUpdate . getDate ( ) ) ; < nl > + } else if ( update instanceof InternalUpdate ) { < nl > + updateHandlerInt . onInternalUpdate ( ( InternalUpdate ) update ) ; < nl > + } else { < nl > + updateActor . send ( update ) ; < nl > + } < nl > } < nl > < nl > public void onUpdateReceived ( Object update , Long delay ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > index 51753aa . . 0d29f96 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java < nl > @ @ - 322 , 7 + 322 , 7 @ @ public class EncryptedPeerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class EncryptBox extends AskMessage < EncryptBoxResponse > { < nl > + public static class EncryptBox implements AskMessage < EncryptBoxResponse > { < nl > private byte [ ] data ; < nl > < nl > public EncryptBox ( byte [ ] data ) { < nl > @ @ - 347 , 7 + 347 , 7 @ @ public class EncryptedPeerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class DecryptBox extends AskMessage < DecryptBoxResponse > { < nl > + public static class DecryptBox implements AskMessage < DecryptBoxResponse > { < nl > < nl > private EncryptedBox encryptedBox ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedSessionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedSessionActor . java < nl > index dd575d3 . . c2aec25 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedSessionActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedSessionActor . java < nl > @ @ - 247 , 7 + 247 , 7 @ @ public class EncryptedSessionActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class EncryptPackage extends AskMessage < EncryptedPackageRes > { < nl > + public static class EncryptPackage implements AskMessage < EncryptedPackageRes > { < nl > private byte [ ] data ; < nl > < nl > public EncryptPackage ( byte [ ] data ) { < nl > @ @ - 278 , 7 + 278 , 7 @ @ public class EncryptedSessionActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class DecryptPackage extends AskMessage < DecryptedPackage > { < nl > + public static class DecryptPackage implements AskMessage < DecryptedPackage > { < nl > < nl > private byte [ ] data ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java < nl > index 3c5f66a . . c3ed111 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java < nl > @ @ - 648 , 7 + 648 , 7 @ @ public class KeyManagerActor extends ModuleActor { < nl > / / Own Keys < nl > / / < nl > < nl > - public static class FetchOwnKey extends AskMessage < OwnIdentity > { < nl > + public static class FetchOwnKey implements AskMessage < OwnIdentity > { < nl > < nl > } < nl > < nl > @ @ - 671 , 11 + 671 , 11 @ @ public class KeyManagerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class FetchOwnRandomPreKey extends AskMessage < PrivateKey > { < nl > + public static class FetchOwnRandomPreKey implements AskMessage < PrivateKey > { < nl > < nl > } < nl > < nl > - public static class FetchOwnPreKeyByPublic extends AskMessage < PrivateKey > { < nl > + public static class FetchOwnPreKeyByPublic implements AskMessage < PrivateKey > { < nl > < nl > private byte [ ] publicKey ; < nl > < nl > @ @ - 688 , 7 + 688 , 7 @ @ public class KeyManagerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class FetchOwnPreKeyById extends AskMessage < PrivateKey > { < nl > + public static class FetchOwnPreKeyById implements AskMessage < PrivateKey > { < nl > < nl > private long keyId ; < nl > < nl > @ @ - 705 , 7 + 705 , 7 @ @ public class KeyManagerActor extends ModuleActor { < nl > / / Users Keys < nl > / / < nl > < nl > - public static class FetchUserKeys extends AskMessage < UserKeys > { < nl > + public static class FetchUserKeys implements AskMessage < UserKeys > { < nl > private int uid ; < nl > < nl > public FetchUserKeys ( int uid ) { < nl > @ @ - 717 , 7 + 717 , 7 @ @ public class KeyManagerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class FetchUserPreKey extends AskMessage < PublicKey > { < nl > + public static class FetchUserPreKey implements AskMessage < PublicKey > { < nl > < nl > private int uid ; < nl > private int keyGroup ; < nl > @ @ - 742 , 7 + 742 , 7 @ @ public class KeyManagerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class FetchUserPreKeyRandom extends AskMessage < PublicKey > { < nl > + public static class FetchUserPreKeyRandom implements AskMessage < PublicKey > { < nl > < nl > private int uid ; < nl > private int keyGroup ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java < nl > index d2de281 . . 4fef69b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java < nl > @ @ - 280 , 7 + 280 , 7 @ @ public class SessionManagerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class PickSessionForDecrypt extends AskMessage < PeerSession > { < nl > + public static class PickSessionForDecrypt implements AskMessage < PeerSession > { < nl > < nl > private int uid ; < nl > private int keyGroupId ; < nl > @ @ - 311 , 7 + 311 , 7 @ @ public class SessionManagerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class PickSessionForEncrypt extends AskMessage < PeerSession > { < nl > + public static class PickSessionForEncrypt implements AskMessage < PeerSession > { < nl > < nl > private int uid ; < nl > private int keyGroupId ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorSystem . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorSystem . java < nl > index a1fad8f . . 62e8d1f 100755 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorSystem . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorSystem . java < nl > @ @ - 8 , 6 + 8 , 7 @ @ import java . util . HashMap ; < nl > < nl > import im . actor . runtime . Runtime ; < nl > import im . actor . runtime . actors . mailbox . ActorDispatcher ; < nl > + import im . actor . runtime . function . Constructor ; < nl > import im . actor . runtime . promise . Promise ; < nl > < nl > / * * < nl > @ @ - 122 , 10 + 123 , 36 @ @ public class ActorSystem { < nl > return mailboxesDispatcher . referenceActor ( path , props ) ; < nl > } < nl > < nl > + public ActorRef actorOf ( String path , Props props ) { < nl > + return actorOf ( props , path ) ; < nl > + } < nl > + < nl > public ActorRef actorOf ( String path , ActorCreator creator ) { < nl > return actorOf ( Props . create ( creator ) , path ) ; < nl > } < nl > < nl > + public ActorRef actorOf ( String path , final Constructor < ? extends Actor > constructor ) { < nl > + return actorOf ( Props . create ( new ActorCreator ( ) { < nl > + @ Override < nl > + public Actor create ( ) { < nl > + return constructor . create ( ) ; < nl > + } < nl > + } ) , path ) ; < nl > + } < nl > + < nl > + public ActorRef actorOf ( String path , String dispatcher , ActorCreator creator ) { < nl > + return actorOf ( Props . create ( creator ) . changeDispatcher ( dispatcher ) , path ) ; < nl > + } < nl > + < nl > + public ActorRef actorOf ( String path , String dispatcher , final Constructor < ? extends Actor > constructor ) { < nl > + return actorOf ( Props . create ( new ActorCreator ( ) { < nl > + @ Override < nl > + public Actor create ( ) { < nl > + return constructor . create ( ) ; < nl > + } < nl > + } ) . changeDispatcher ( dispatcher ) , path ) ; < nl > + } < nl > + < nl > / * * < nl > * Getting current trace interface for actor system < nl > * < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskMessage . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskMessage . java < nl > index 54f8943 . . 2e78dfe 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskMessage . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskMessage . java < nl > @ @ - 1 , 5 + 1 , 5 @ @ < nl > package im . actor . runtime . actors . ask ; < nl > < nl > - public abstract class AskMessage < T > { < nl > + public interface AskMessage < T > { < nl > < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / Constructor . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / Constructor . java < nl > new file mode 100644 < nl > index 0000000 . . b773f1c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / Constructor . java < nl > @ @ - 0 , 0 + 1 , 5 @ @ < nl > + package im . actor . runtime . function ; < nl > + < nl > + public interface Constructor < T > { < nl > + T create ( ) ; < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json 
 index 6d22344 . . fbcf44a 100644 
 - - - a / actor - sdk / sdk - api / actor . json 
 + + + b / actor - sdk / sdk - api / actor . json 
 @ @ - 3901 , 7 + 3901 , 7 @ @ 
 ] , 
 " trait " : { 
 " name " : " ServiceEx " , 
 - " key " : 16 
 + " key " : 20 
 } , 
 " expandable " : " true " , 
 " attributes " : [ ] 
 @ @ - 3916 , 7 + 3916 , 7 @ @ 
 ] , 
 " trait " : { 
 " name " : " ServiceEx " , 
 - " key " : 17 
 + " key " : 21 
 } , 
 " expandable " : " true " , 
 " attributes " : [ ] 
 diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 index 56f6210 . . 9394872 100644 
 - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 @ @ - 3663 , 7 + 3663 , 7 @ @ 
 < property role = " w4tQU " value = " true " / > 
 < ref role = " w4 $ XZ " node = " 55bmeIQ9med " resolve = " ServiceEx " / > 
 < node concept = " Nu42z " id = " 6gbxTdnelwL " role = " 3BtCOu " > 
 - < property role = " Nu42W " value = " 10 " / > 
 + < property role = " Nu42W " value = " 14 " / > 
 < / node > 
 < node concept = " NXeRC " id = " 6gbxTdnelwN " role = " NXodf " > 
 < property role = " NXePf " value = " Message about chat archived " / > 
 @ @ - 3675 , 7 + 3675 , 7 @ @ 
 < property role = " tsOgz " value = " true " / > 
 < ref role = " w4 $ XZ " node = " 55bmeIQ9med " resolve = " ServiceEx " / > 
 < node concept = " Nu42z " id = " 6gbxTdnemQg " role = " 3BtCOu " > 
 - < property role = " Nu42W " value = " 11 " / > 
 + < property role = " Nu42W " value = " 15 " / > 
 < / node > 
 < node concept = " NXeRC " id = " 6gbxTdnemQi " role = " NXodf " > 
 < property role = " NXePf " value = " Message about chat restored " / > 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 index 43a4b06 . . 4d5d6fe 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 @ @ - 24 , 7 + 24 , 7 @ @ import im . actor . core . DeviceCategory ; 
 import im . actor . core . PlatformType ; 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . events . IncomingCall ; 
 - import im . actor . core . modules . internal . CallsModule ; 
 + import im . actor . core . modules . calls . CallsModule ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . android . view . BindedViewHolder ; 
 import im . actor . runtime . eventbus . BusSubscriber ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 1db8362 . . 180a9e6 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 43 , 7 + 43 , 7 @ @ import im . actor . core . events . PeerChatOpened ; 
 import im . actor . core . events . PeerInfoClosed ; 
 import im . actor . core . events . PeerInfoOpened ; 
 import im . actor . core . events . UserVisible ; 
 - import im . actor . core . modules . internal . CallsModule ; 
 + import im . actor . core . modules . calls . CallsModule ; 
 import im . actor . core . network . NetworkState ; 
 import im . actor . core . util . ActorTrace ; 
 import im . actor . core . util . Timing ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java 
 index c037014 . . d0ce68c 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java 
 @ @ - 6 , 7 + 6 , 7 @ @ import im . actor . core . i18n . I18nEngine ; 
 import im . actor . core . modules . api . ApiModule ; 
 import im . actor . core . modules . sequence . Updates ; 
 import im . actor . core . modules . internal . AppStateModule ; 
 - import im . actor . core . modules . internal . CallsModule ; 
 + import im . actor . core . modules . calls . CallsModule ; 
 import im . actor . core . modules . internal . ContactsModule ; 
 import im . actor . core . modules . internal . DeviceInfoModule ; 
 import im . actor . core . modules . internal . DisplayLists ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java 
 index 011c9ed . . 63989df 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java 
 @ @ - 10 , 7 + 10 , 7 @ @ import im . actor . core . i18n . I18nEngine ; 
 import im . actor . core . modules . api . ApiModule ; 
 import im . actor . core . modules . sequence . Updates ; 
 import im . actor . core . modules . internal . AppStateModule ; 
 - import im . actor . core . modules . internal . CallsModule ; 
 + import im . actor . core . modules . calls . CallsModule ; 
 import im . actor . core . modules . internal . ContactsModule ; 
 import im . actor . core . modules . internal . DeviceInfoModule ; 
 import im . actor . core . modules . internal . DisplayLists ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 new file mode 100644 
 index 0000000 . . c5f0055 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 0 , 0 + 1 , 180 @ @ 
 + package im . actor . core . modules . calls ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . util . ModuleActor ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . messages . PoisonPill ; 
 + 
 + public class CallActor extends ModuleActor { 
 + 
 + public static final String TAG = " CallActor " ; 
 + private boolean inited = false ; 
 + private int timeout = 0 ; 
 + private boolean alive = false ; 
 + private long callId ; 
 + private CallsModule . CallCallback callback ; 
 + private ArrayList < byte [ ] > signals = new ArrayList < byte [ ] > ( ) ; 
 + 
 + public CallActor ( long callId , ModuleContext context ) { 
 + super ( context ) ; 
 + this . callId = callId ; 
 + } 
 + 
 + public CallActor ( long callId , CallsModule . CallCallback callCallback , ModuleContext context ) { 
 + super ( context ) ; 
 + this . callId = callId ; 
 + this . callback = callCallback ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + self ( ) . send ( new SendCallInProgress ( ) ) ; 
 + self ( ) . send ( new CheckCallIsHandled ( ) , 1500 ) ; 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof CallInProgress ) { 
 + onCallInProgress ( ( ( CallInProgress ) message ) . getTimeout ( ) ) ; 
 + } else if ( message instanceof CheckAlive ) { 
 + checkAlive ( ) ; 
 + } else if ( message instanceof SendCallInProgress ) { 
 + sendCallInProgress ( ) ; 
 + } else if ( message instanceof EndCall ) { 
 + onEndCall ( ) ; 
 + } else if ( message instanceof Signal ) { 
 + onSignal ( ( ( Signal ) message ) . getData ( ) ) ; 
 + } else if ( message instanceof HandleCall ) { 
 + onHandleCall ( ( ( HandleCall ) message ) . getCallback ( ) ) ; 
 + } else if ( message instanceof CheckCallIsHandled ) { 
 + checkCallHandled ( ) ; 
 + } 
 + } 
 + 
 + private void checkCallHandled ( ) { 
 + if ( callback = = null ) { 
 + / / don ' t want to wait for fragment forever 
 + callback = new CallsModule . CallCallback ( ) { 
 + @ Override 
 + public void onCallEnd ( ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onSignal ( byte [ ] data ) { 
 + 
 + } 
 + } ; 
 + } 
 + } 
 + 
 + public void onSignal ( byte [ ] data ) { 
 + if ( callback ! = null ) { 
 + callback . onSignal ( data ) ; 
 + } else { 
 + signals . add ( data ) ; 
 + } 
 + } 
 + 
 + public void onEndCall ( ) { 
 + if ( callback = = null ) { 
 + / / fragment not yet created ? 
 + self ( ) . send ( new EndCall ( ) , 500 ) ; 
 + return ; 
 + } 
 + callback . onCallEnd ( ) ; 
 + context ( ) . getCallsModule ( ) . onCallEnded ( callId ) ; 
 + self ( ) . send ( PoisonPill . INSTANCE ) ; 
 + } 
 + 
 + public void checkAlive ( ) { 
 + if ( alive ) { 
 + alive = false ; 
 + self ( ) . send ( new CheckAlive ( ) , timeout * 1000 ) ; 
 + } else { 
 + Log . d ( TAG , " no call in progress - call is dead " ) ; 
 + context ( ) . getCallsModule ( ) . endCall ( callId ) ; 
 + self ( ) . send ( PoisonPill . INSTANCE ) ; 
 + } 
 + } 
 + 
 + private void sendCallInProgress ( ) { 
 + context ( ) . getCallsModule ( ) . callInProgress ( callId ) ; 
 + self ( ) . send ( new SendCallInProgress ( ) , CallsModule . CALL _ TIMEOUT * 1000 / 3 ) ; 
 + 
 + } 
 + 
 + private void onCallInProgress ( int timeout ) { 
 + alive = true ; 
 + this . timeout = timeout ; 
 + if ( ! inited ) { 
 + inited = true ; 
 + alive = false ; 
 + self ( ) . send ( new CheckAlive ( ) , timeout * 1000 ) ; 
 + } 
 + } 
 + 
 + private void onHandleCall ( CallsModule . CallCallback callCallback ) { 
 + this . callback = callCallback ; 
 + for ( byte [ ] s : signals ) { 
 + callback . onSignal ( s ) ; 
 + } 
 + } 
 + 
 + public static class EndCall { 
 + 
 + } 
 + 
 + public static class Signal { 
 + byte [ ] data ; 
 + 
 + public Signal ( byte [ ] data ) { 
 + this . data = data ; 
 + } 
 + 
 + public byte [ ] getData ( ) { 
 + return data ; 
 + } 
 + } 
 + 
 + public static class CallInProgress { 
 + 
 + int timeout ; 
 + 
 + public CallInProgress ( int timeout ) { 
 + this . timeout = timeout ; 
 + } 
 + 
 + public int getTimeout ( ) { 
 + return timeout ; 
 + } 
 + 
 + } 
 + 
 + public static class HandleCall { 
 + CallsModule . CallCallback callback ; 
 + 
 + public HandleCall ( CallsModule . CallCallback callback ) { 
 + this . callback = callback ; 
 + } 
 + 
 + public CallsModule . CallCallback getCallback ( ) { 
 + return callback ; 
 + } 
 + } 
 + 
 + private static class CheckAlive { 
 + 
 + } 
 + 
 + private static class SendCallInProgress { 
 + 
 + } 
 + 
 + private static class CheckCallIsHandled { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 new file mode 100644 
 index 0000000 . . 2b3bc7c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 @ @ - 0 , 0 + 1 , 183 @ @ 
 + package im . actor . core . modules . calls ; 
 + 
 + import java . util . HashMap ; 
 + 
 + import im . actor . core . api . ApiOutPeer ; 
 + import im . actor . core . api . ApiPeerType ; 
 + import im . actor . core . api . rpc . RequestCallInProgress ; 
 + import im . actor . core . api . rpc . RequestDoCall ; 
 + import im . actor . core . api . rpc . RequestEndCall ; 
 + import im . actor . core . api . rpc . RequestSendCallSignal ; 
 + import im . actor . core . api . rpc . RequestSubscribeToCalls ; 
 + import im . actor . core . api . rpc . ResponseDoCall ; 
 + import im . actor . core . entity . User ; 
 + import im . actor . core . entity . signals . AbsSignal ; 
 + import im . actor . core . events . IncomingCall ; 
 + import im . actor . core . events . NewSessionCreated ; 
 + import im . actor . core . modules . AbsModule ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . calls . CallActor ; 
 + import im . actor . core . network . RpcCallback ; 
 + import im . actor . core . network . RpcException ; 
 + import im . actor . core . viewmodel . Command ; 
 + import im . actor . core . viewmodel . CommandCallback ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . actors . ActorSystem ; 
 + import im . actor . runtime . actors . Props ; 
 + import im . actor . runtime . eventbus . BusSubscriber ; 
 + import im . actor . runtime . eventbus . Event ; 
 + 
 + public class CallsModule extends AbsModule { 
 + 
 + public static final int MAX _ CALLS _ COUNT = 1 ; 
 + private static final String TAG = " CALLS " ; 
 + 
 + public CallsModule ( ModuleContext context ) { 
 + super ( context ) ; 
 + } 
 + 
 + 
 + public static final int CALL _ TIMEOUT = 10 ; 
 + public static boolean CALLS _ ENABLED = false ; 
 + public static boolean MULTIPLE _ CALLS _ ENABLED = false ; 
 + HashMap < Long , ActorRef > calls = new HashMap < > ( ) ; 
 + 
 + public void run ( ) { 
 + if ( CALLS _ ENABLED ) { 
 + request ( new RequestSubscribeToCalls ( ) ) ; 
 + context ( ) . getEvents ( ) . subscribe ( new BusSubscriber ( ) { 
 + @ Override 
 + public void onBusEvent ( Event event ) { 
 + request ( new RequestSubscribeToCalls ( ) ) ; 
 + } 
 + } , NewSessionCreated . EVENT ) ; 
 + } 
 + } 
 + 
 + public Command < ResponseDoCall > makeCall ( final int uid , final CallCallback callCallback ) { 
 + return new Command < ResponseDoCall > ( ) { 
 + @ Override 
 + public void start ( final CommandCallback < ResponseDoCall > callback ) { 
 + User u = users ( ) . getValue ( uid ) ; 
 + request ( new RequestDoCall ( new ApiOutPeer ( ApiPeerType . PRIVATE , u . getUid ( ) , u . getAccessHash ( ) ) , CALL _ TIMEOUT ) , new RpcCallback < ResponseDoCall > ( ) { 
 + @ Override 
 + public void onResult ( final ResponseDoCall response ) { 
 + callback . onResult ( response ) ; 
 + 
 + Log . d ( TAG , " make call " + response . getCallId ( ) ) ; 
 + calls . put ( response . getCallId ( ) , 
 + ActorSystem . system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 + @ Override 
 + public Actor create ( ) { 
 + return new CallActor ( response . getCallId ( ) , callCallback , context ( ) ) ; 
 + } 
 + } ) , " actor / call _ " + response . getCallId ( ) ) ) ; 
 + 
 + 
 + } 
 + 
 + @ Override 
 + public void onError ( RpcException e ) { 
 + callback . onError ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ; 
 + } 
 + 
 + public void callInProgress ( long callId ) { 
 + request ( new RequestCallInProgress ( callId , CALL _ TIMEOUT ) ) ; 
 + } 
 + 
 + public void handleCall ( final long callId , final CallCallback callback ) { 
 + ActorRef call = calls . get ( callId ) ; 
 + if ( call ! = null ) { 
 + call . send ( new CallActor . HandleCall ( callback ) ) ; 
 + } else { 
 + / / can ' t find call - close fragment 
 + callback . onCallEnd ( ) ; 
 + } 
 + } 
 + 
 + / / do end call 
 + public void endCall ( long callId ) { 
 + Log . d ( TAG , " do end call " + callId ) ; 
 + 
 + request ( new RequestEndCall ( callId ) ) ; 
 + ActorRef call = calls . get ( callId ) ; 
 + if ( call ! = null ) { 
 + Log . d ( TAG , " call exist - end it " ) ; 
 + 
 + call . send ( new CallActor . EndCall ( ) ) ; 
 + } else { 
 + Log . d ( TAG , " call not exist - remove it " ) ; 
 + onCallEnded ( callId ) ; 
 + } 
 + } 
 + 
 + public void onIncomingCall ( final long callId , int uid ) { 
 + Log . d ( TAG , " incoming call " + callId ) ; 
 + 
 + if ( ! calls . keySet ( ) . contains ( callId ) ) { 
 + calls . put ( callId , 
 + ActorSystem . system ( ) . actorOf ( " actor / call _ " + callId , new ActorCreator ( ) { 
 + @ Override 
 + public Actor create ( ) { 
 + return new CallActor ( callId , context ( ) ) ; 
 + } 
 + } ) ) ; 
 + if ( ! MULTIPLE _ CALLS _ ENABLED & calls . keySet ( ) . size ( ) > MAX _ CALLS _ COUNT ) { 
 + calls . get ( callId ) . send ( new CallActor . EndCall ( ) ) ; 
 + } else { 
 + context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; 
 + } 
 + } 
 + 
 + } 
 + 
 + / / on end call update 
 + public void onEndCall ( long callId ) { 
 + Log . d ( TAG , " end call update : " + callId ) ; 
 + ActorRef call = calls . get ( callId ) ; 
 + if ( call ! = null ) { 
 + Log . d ( TAG , " call exist - end it " ) ; 
 + call . send ( new CallActor . EndCall ( ) ) ; 
 + } else { 
 + Log . d ( TAG , " call not exist - remove it " ) ; 
 + calls . remove ( callId ) ; 
 + } 
 + } 
 + 
 + / / after end call update processed by CallActor 
 + public void onCallEnded ( long callId ) { 
 + Log . d ( TAG , " on callActor ended call : " + callId ) ; 
 + calls . remove ( callId ) ; 
 + } 
 + 
 + public void onCallInProgress ( long callId , int timeout ) { 
 + ActorRef call = calls . get ( callId ) ; 
 + if ( call ! = null ) { 
 + call . send ( new CallActor . CallInProgress ( timeout ) ) ; 
 + } 
 + } 
 + 
 + public void sendSignal ( long callId , AbsSignal signal ) { 
 + request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; 
 + } 
 + 
 + public void onSignal ( long callId , byte [ ] data ) { 
 + ActorRef call = calls . get ( callId ) ; 
 + if ( call ! = null ) { 
 + call . send ( new CallActor . Signal ( data ) ) ; 
 + } 
 + } 
 + 
 + public interface CallCallback { 
 + void onCallEnd ( ) ; 
 + 
 + void onSignal ( byte [ ] data ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 deleted file mode 100644 
 index 570f0e8 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 + + + / dev / null 
 @ @ - 1 , 183 + 0 , 0 @ @ 
 - package im . actor . core . modules . internal ; 
 - 
 - import java . util . HashMap ; 
 - 
 - import im . actor . core . api . ApiOutPeer ; 
 - import im . actor . core . api . ApiPeerType ; 
 - import im . actor . core . api . rpc . RequestCallInProgress ; 
 - import im . actor . core . api . rpc . RequestDoCall ; 
 - import im . actor . core . api . rpc . RequestEndCall ; 
 - import im . actor . core . api . rpc . RequestSendCallSignal ; 
 - import im . actor . core . api . rpc . RequestSubscribeToCalls ; 
 - import im . actor . core . api . rpc . ResponseDoCall ; 
 - import im . actor . core . entity . User ; 
 - import im . actor . core . entity . signals . AbsSignal ; 
 - import im . actor . core . events . IncomingCall ; 
 - import im . actor . core . events . NewSessionCreated ; 
 - import im . actor . core . modules . AbsModule ; 
 - import im . actor . core . modules . ModuleContext ; 
 - import im . actor . core . modules . internal . calls . CallActor ; 
 - import im . actor . core . network . RpcCallback ; 
 - import im . actor . core . network . RpcException ; 
 - import im . actor . core . viewmodel . Command ; 
 - import im . actor . core . viewmodel . CommandCallback ; 
 - import im . actor . runtime . Log ; 
 - import im . actor . runtime . actors . Actor ; 
 - import im . actor . runtime . actors . ActorCreator ; 
 - import im . actor . runtime . actors . ActorRef ; 
 - import im . actor . runtime . actors . ActorSystem ; 
 - import im . actor . runtime . actors . Props ; 
 - import im . actor . runtime . eventbus . BusSubscriber ; 
 - import im . actor . runtime . eventbus . Event ; 
 - 
 - public class CallsModule extends AbsModule { 
 - 
 - public static final int MAX _ CALLS _ COUNT = 1 ; 
 - private static final String TAG = " CALLS " ; 
 - 
 - public CallsModule ( ModuleContext context ) { 
 - super ( context ) ; 
 - } 
 - 
 - 
 - public static final int CALL _ TIMEOUT = 10 ; 
 - public static boolean CALLS _ ENABLED = false ; 
 - public static boolean MULTIPLE _ CALLS _ ENABLED = false ; 
 - HashMap < Long , ActorRef > calls = new HashMap < Long , ActorRef > ( ) ; 
 - 
 - public void run ( ) { 
 - if ( CALLS _ ENABLED ) { 
 - request ( new RequestSubscribeToCalls ( ) ) ; 
 - context ( ) . getEvents ( ) . subscribe ( new BusSubscriber ( ) { 
 - @ Override 
 - public void onBusEvent ( Event event ) { 
 - request ( new RequestSubscribeToCalls ( ) ) ; 
 - } 
 - } , NewSessionCreated . EVENT ) ; 
 - } 
 - } 
 - 
 - public Command < ResponseDoCall > makeCall ( final int uid , final CallCallback callCallback ) { 
 - return new Command < ResponseDoCall > ( ) { 
 - @ Override 
 - public void start ( final CommandCallback < ResponseDoCall > callback ) { 
 - User u = users ( ) . getValue ( uid ) ; 
 - request ( new RequestDoCall ( new ApiOutPeer ( ApiPeerType . PRIVATE , u . getUid ( ) , u . getAccessHash ( ) ) , CALL _ TIMEOUT ) , new RpcCallback < ResponseDoCall > ( ) { 
 - @ Override 
 - public void onResult ( final ResponseDoCall response ) { 
 - callback . onResult ( response ) ; 
 - 
 - Log . d ( TAG , " make call " + response . getCallId ( ) ) ; 
 - calls . put ( response . getCallId ( ) , 
 - ActorSystem . system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 - @ Override 
 - public Actor create ( ) { 
 - return new CallActor ( response . getCallId ( ) , callCallback , context ( ) ) ; 
 - } 
 - } ) , " actor / call _ " + response . getCallId ( ) ) ) ; 
 - 
 - 
 - } 
 - 
 - @ Override 
 - public void onError ( RpcException e ) { 
 - callback . onError ( e ) ; 
 - } 
 - } ) ; 
 - } 
 - } ; 
 - } 
 - 
 - public void callInProgress ( long callId ) { 
 - request ( new RequestCallInProgress ( callId , CALL _ TIMEOUT ) ) ; 
 - } 
 - 
 - public void handleCall ( final long callId , final CallCallback callback ) { 
 - ActorRef call = calls . get ( callId ) ; 
 - if ( call ! = null ) { 
 - call . send ( new CallActor . HandleCall ( callback ) ) ; 
 - } else { 
 - / / can ' t find call - close fragment 
 - callback . onCallEnd ( ) ; 
 - } 
 - } 
 - 
 - / / do end call 
 - public void endCall ( long callId ) { 
 - Log . d ( TAG , " do end call " + callId ) ; 
 - 
 - request ( new RequestEndCall ( callId ) ) ; 
 - ActorRef call = calls . get ( callId ) ; 
 - if ( call ! = null ) { 
 - Log . d ( TAG , " call exist - end it " ) ; 
 - 
 - call . send ( new CallActor . EndCall ( ) ) ; 
 - } else { 
 - Log . d ( TAG , " call not exist - remove it " ) ; 
 - onCallEnded ( callId ) ; 
 - } 
 - } 
 - 
 - public void onIncomingCall ( final long callId , int uid ) { 
 - Log . d ( TAG , " incoming call " + callId ) ; 
 - 
 - if ( ! calls . keySet ( ) . contains ( callId ) ) { 
 - calls . put ( callId , 
 - ActorSystem . system ( ) . actorOf ( " actor / call _ " + callId , new ActorCreator ( ) { 
 - @ Override 
 - public Actor create ( ) { 
 - return new CallActor ( callId , context ( ) ) ; 
 - } 
 - } ) ) ; 
 - if ( ! MULTIPLE _ CALLS _ ENABLED & calls . keySet ( ) . size ( ) > MAX _ CALLS _ COUNT ) { 
 - calls . get ( callId ) . send ( new CallActor . EndCall ( ) ) ; 
 - } else { 
 - context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; 
 - } 
 - } 
 - 
 - } 
 - 
 - / / on end call update 
 - public void onEndCall ( long callId ) { 
 - Log . d ( TAG , " end call update : " + callId ) ; 
 - ActorRef call = calls . get ( callId ) ; 
 - if ( call ! = null ) { 
 - Log . d ( TAG , " call exist - end it " ) ; 
 - call . send ( new CallActor . EndCall ( ) ) ; 
 - } else { 
 - Log . d ( TAG , " call not exist - remove it " ) ; 
 - calls . remove ( callId ) ; 
 - } 
 - } 
 - 
 - / / after end call update processed by CallActor 
 - public void onCallEnded ( long callId ) { 
 - Log . d ( TAG , " on callActor ended call : " + callId ) ; 
 - calls . remove ( callId ) ; 
 - } 
 - 
 - public void onCallInProgress ( long callId , int timeout ) { 
 - ActorRef call = calls . get ( callId ) ; 
 - if ( call ! = null ) { 
 - call . send ( new CallActor . CallInProgress ( timeout ) ) ; 
 - } 
 - } 
 - 
 - public void sendSignal ( long callId , AbsSignal signal ) { 
 - request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; 
 - } 
 - 
 - public void onSignal ( long callId , byte [ ] data ) { 
 - ActorRef call = calls . get ( callId ) ; 
 - if ( call ! = null ) { 
 - call . send ( new CallActor . Signal ( data ) ) ; 
 - } 
 - } 
 - 
 - public interface CallCallback { 
 - void onCallEnd ( ) ; 
 - 
 - void onSignal ( byte [ ] data ) ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 deleted file mode 100644 
 index 27c2ec6 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 + + + / dev / null 
 @ @ - 1 , 181 + 0 , 0 @ @ 
 - package im . actor . core . modules . internal . calls ; 
 - 
 - import java . util . ArrayList ; 
 - 
 - import im . actor . core . modules . ModuleContext ; 
 - import im . actor . core . modules . internal . CallsModule ; 
 - import im . actor . core . util . ModuleActor ; 
 - import im . actor . runtime . Log ; 
 - import im . actor . runtime . actors . messages . PoisonPill ; 
 - 
 - public class CallActor extends ModuleActor { 
 - 
 - public static final String TAG = " CallActor " ; 
 - private boolean inited = false ; 
 - private int timeout = 0 ; 
 - private boolean alive = false ; 
 - private long callId ; 
 - private CallsModule . CallCallback callback ; 
 - private ArrayList < byte [ ] > signals = new ArrayList < byte [ ] > ( ) ; 
 - 
 - public CallActor ( long callId , ModuleContext context ) { 
 - super ( context ) ; 
 - this . callId = callId ; 
 - } 
 - 
 - public CallActor ( long callId , CallsModule . CallCallback callCallback , ModuleContext context ) { 
 - super ( context ) ; 
 - this . callId = callId ; 
 - this . callback = callCallback ; 
 - } 
 - 
 - @ Override 
 - public void preStart ( ) { 
 - super . preStart ( ) ; 
 - self ( ) . send ( new SendCallInProgress ( ) ) ; 
 - self ( ) . send ( new CheckCallIsHandled ( ) , 1500 ) ; 
 - } 
 - 
 - @ Override 
 - public void onReceive ( Object message ) { 
 - if ( message instanceof CallInProgress ) { 
 - onCallInProgress ( ( ( CallInProgress ) message ) . getTimeout ( ) ) ; 
 - } else if ( message instanceof CheckAlive ) { 
 - checkAlive ( ) ; 
 - } else if ( message instanceof SendCallInProgress ) { 
 - sendCallInProgress ( ) ; 
 - } else if ( message instanceof EndCall ) { 
 - onEndCall ( ) ; 
 - } else if ( message instanceof Signal ) { 
 - onSignal ( ( ( Signal ) message ) . getData ( ) ) ; 
 - } else if ( message instanceof HandleCall ) { 
 - onHandleCall ( ( ( HandleCall ) message ) . getCallback ( ) ) ; 
 - } else if ( message instanceof CheckCallIsHandled ) { 
 - checkCallHandled ( ) ; 
 - } 
 - } 
 - 
 - private void checkCallHandled ( ) { 
 - if ( callback = = null ) { 
 - / / don ' t want to wait for fragment forever 
 - callback = new CallsModule . CallCallback ( ) { 
 - @ Override 
 - public void onCallEnd ( ) { 
 - 
 - } 
 - 
 - @ Override 
 - public void onSignal ( byte [ ] data ) { 
 - 
 - } 
 - } ; 
 - } 
 - } 
 - 
 - public void onSignal ( byte [ ] data ) { 
 - if ( callback ! = null ) { 
 - callback . onSignal ( data ) ; 
 - } else { 
 - signals . add ( data ) ; 
 - } 
 - } 
 - 
 - public void onEndCall ( ) { 
 - if ( callback = = null ) { 
 - / / fragment not yet created ? 
 - self ( ) . send ( new EndCall ( ) , 500 ) ; 
 - return ; 
 - } 
 - callback . onCallEnd ( ) ; 
 - context ( ) . getCallsModule ( ) . onCallEnded ( callId ) ; 
 - self ( ) . send ( PoisonPill . INSTANCE ) ; 
 - } 
 - 
 - public void checkAlive ( ) { 
 - if ( alive ) { 
 - alive = false ; 
 - self ( ) . send ( new CheckAlive ( ) , timeout * 1000 ) ; 
 - } else { 
 - Log . d ( TAG , " no call in progress - call is dead " ) ; 
 - context ( ) . getCallsModule ( ) . endCall ( callId ) ; 
 - self ( ) . send ( PoisonPill . INSTANCE ) ; 
 - } 
 - } 
 - 
 - private void sendCallInProgress ( ) { 
 - context ( ) . getCallsModule ( ) . callInProgress ( callId ) ; 
 - self ( ) . send ( new SendCallInProgress ( ) , CallsModule . CALL _ TIMEOUT * 1000 / 3 ) ; 
 - 
 - } 
 - 
 - private void onCallInProgress ( int timeout ) { 
 - alive = true ; 
 - this . timeout = timeout ; 
 - if ( ! inited ) { 
 - inited = true ; 
 - alive = false ; 
 - self ( ) . send ( new CheckAlive ( ) , timeout * 1000 ) ; 
 - } 
 - } 
 - 
 - private void onHandleCall ( CallsModule . CallCallback callCallback ) { 
 - this . callback = callCallback ; 
 - for ( byte [ ] s : signals ) { 
 - callback . onSignal ( s ) ; 
 - } 
 - } 
 - 
 - public static class EndCall { 
 - 
 - } 
 - 
 - public static class Signal { 
 - byte [ ] data ; 
 - 
 - public Signal ( byte [ ] data ) { 
 - this . data = data ; 
 - } 
 - 
 - public byte [ ] getData ( ) { 
 - return data ; 
 - } 
 - } 
 - 
 - public static class CallInProgress { 
 - 
 - int timeout ; 
 - 
 - public CallInProgress ( int timeout ) { 
 - this . timeout = timeout ; 
 - } 
 - 
 - public int getTimeout ( ) { 
 - return timeout ; 
 - } 
 - 
 - } 
 - 
 - public static class HandleCall { 
 - CallsModule . CallCallback callback ; 
 - 
 - public HandleCall ( CallsModule . CallCallback callback ) { 
 - this . callback = callback ; 
 - } 
 - 
 - public CallsModule . CallCallback getCallback ( ) { 
 - return callback ; 
 - } 
 - } 
 - 
 - private static class CheckAlive { 
 - 
 - } 
 - 
 - private static class SendCallInProgress { 
 - 
 - } 
 - 
 - private static class CheckCallIsHandled { 
 - 
 - } 
 - }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java b / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java 
 index 7bed8c1 . . 3d71ea1 100644 
 - - - a / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - cocoa / src / main / java / im / actor / core / CocoaMessenger . java 
 @ @ - 52 , 19 + 52 , 6 @ @ public class CocoaMessenger extends Messenger { 
 public BindedDisplayList < Message > getMessageDisplayList ( final Peer peer ) { 
 if ( ! messagesLists . containsKey ( peer ) ) { 
 BindedDisplayList < Message > list = ( BindedDisplayList < Message > ) modules . getDisplayListsModule ( ) . getMessagesSharedList ( peer ) ; 
 - list . setBindHook ( new BindedDisplayList . BindHook < Message > ( ) { 
 - @ Override 
 - public void onScrolledToEnd ( ) { 
 - modules . getMessagesModule ( ) . loadMoreHistory ( peer ) ; 
 - } 
 - 
 - @ Override 
 - public void onItemTouched ( Message item ) { 
 - if ( item . isOnServer ( ) ) { 
 - modules . getMessagesModule ( ) . onMessageShown ( peer , item . getSenderId ( ) , item . getSortDate ( ) ) ; 
 - } 
 - } 
 - } ) ; 
 messagesLists . put ( peer , list ) ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java 
 index d6c8aea . . 2e9d280 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceActor . java 
 @ @ - 4 , 34 + 4 , 40 @ @ 
 
 package im . actor . core . modules . api ; 
 
 - 
 - import java . io . IOException ; 
 import java . util . ArrayList ; 
 import java . util . HashMap ; 
 + import java . util . List ; 
 
 - import im . actor . core . api . ApiUpdateContainer ; 
 + import im . actor . core . api . ApiGroup ; 
 import im . actor . core . api . ApiUpdateOptimization ; 
 + import im . actor . core . api . ApiUser ; 
 import im . actor . core . api . base . FatSeqUpdate ; 
 import im . actor . core . api . base . SeqUpdate ; 
 import im . actor . core . api . base . SeqUpdateTooLong ; 
 - import im . actor . core . api . base . WeakUpdate ; 
 - import im . actor . core . api . parser . UpdatesParser ; 
 import im . actor . core . api . rpc . RequestGetDifference ; 
 import im . actor . core . api . rpc . RequestGetState ; 
 import im . actor . core . api . rpc . ResponseGetDifference ; 
 import im . actor . core . api . rpc . ResponseSeq ; 
 import im . actor . core . modules . ModuleContext ; 
 - import im . actor . core . modules . updates . UpdateProcessor ; 
 import im . actor . core . modules . updates . internal . ExecuteAfter ; 
 - import im . actor . core . modules . updates . internal . InternalUpdate ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 - import im . actor . core . network . parser . Update ; 
 import im . actor . core . util . ModuleActor ; 
 import im . actor . runtime . Log ; 
 + import im . actor . runtime . function . Constructor ; 
 + import im . actor . runtime . function . Consumer ; 
 
 public class SequenceActor extends ModuleActor { 
 
 + public static Constructor < SequenceActor > CONSTRUCTOR ( final ModuleContext context ) { 
 + return new Constructor < SequenceActor > ( ) { 
 + @ Override 
 + public SequenceActor create ( ) { 
 + return new SequenceActor ( context ) ; 
 + } 
 + } ; 
 + } 
 + 
 private static final String TAG = " Updates " ; 
 private static final int INVALIDATE _ GAP = 2000 ; / / 2 Secs 
 private static final int INVALIDATE _ MAX _ SEC _ HOLE = 10 ; 
 @ @ - 39 , 9 + 45 , 9 @ @ public class SequenceActor extends ModuleActor { 
 private static final String KEY _ SEQ = " updates _ seq " ; 
 private static final String KEY _ STATE = " updates _ state " ; 
 
 - private HashMap < Integer , Object > further = new HashMap < Integer , Object > ( ) ; 
 + private HashMap < Integer , Object > further = new HashMap < > ( ) ; 
 
 - private ArrayList < ExecuteAfter > pendingRunnables = new ArrayList < ExecuteAfter > ( ) ; 
 + private ArrayList < ExecuteAfter > pendingRunnables = new ArrayList < > ( ) ; 
 
 private boolean isValidated = true ; 
 private boolean isTimerStarted = false ; 
 @ @ - 49 , 8 + 55 , 9 @ @ public class SequenceActor extends ModuleActor { 
 private int seq ; 
 private byte [ ] state ; 
 
 - private UpdateProcessor processor ; 
 - private UpdatesParser parser ; 
 + private int finishedSeq ; 
 + 
 + private SequenceHandlerInt handler ; 
 
 public SequenceActor ( ModuleContext modules ) { 
 super ( modules ) ; 
 @ @ - 59 , 39 + 66 , 35 @ @ public class SequenceActor extends ModuleActor { 
 @ Override 
 public void preStart ( ) { 
 seq = preferences ( ) . getInt ( KEY _ SEQ , - 1 ) ; 
 + finishedSeq = seq ; 
 state = preferences ( ) . getBytes ( KEY _ STATE ) ; 
 - parser = new UpdatesParser ( ) ; 
 - processor = new UpdateProcessor ( context ( ) ) ; 
 + 
 + handler = context ( ) . getUpdatesModule ( ) . getUpdateHandler ( ) ; 
 
 self ( ) . send ( new Invalidate ( ) ) ; 
 } 
 
 - @ Override 
 - public void onReceive ( Object message ) { 
 - if ( message instanceof Invalidate | | message instanceof SeqUpdateTooLong | | 
 - message instanceof ForceInvalidate ) { 
 - invalidate ( ) ; 
 - } else if ( message instanceof SeqUpdate ) { 
 - onUpdateReceived ( message ) ; 
 - } else if ( message instanceof FatSeqUpdate ) { 
 - onUpdateReceived ( message ) ; 
 - } else if ( message instanceof WeakUpdate ) { 
 - onUpdateReceived ( message ) ; 
 - } else if ( message instanceof InternalUpdate ) { 
 - onUpdateReceived ( message ) ; 
 - } else if ( message instanceof ExecuteAfter ) { 
 - onUpdateReceived ( message ) ; 
 - } else if ( message instanceof PushSeq ) { 
 - onUpdateReceived ( message ) ; 
 + private void onPushSeqReceived ( int seq ) { 
 + if ( seq < = this . seq ) { 
 + Log . d ( TAG , " Ignored PushSeq { seq : " + seq + " } " ) ; 
 } else { 
 - drop ( message ) ; 
 + Log . w ( TAG , " External Out of sequence : starting timer for invalidation " ) ; 
 + self ( ) . sendOnce ( new ForceInvalidate ( ) , INVALIDATE _ GAP ) ; 
 + } 
 + } 
 + 
 + private void onExecuteAfter ( ExecuteAfter after ) { 
 + if ( after . getSeq ( ) < = this . seq ) { 
 + after . getRunnable ( ) . run ( ) ; 
 + } else { 
 + pendingRunnables . add ( after ) ; 
 } 
 } 
 
 private void onUpdateReceived ( Object u ) { 
 / / Building parameters 
 - int seq ; 
 - byte [ ] state ; 
 + final int seq ; 
 + final byte [ ] state ; 
 int type ; 
 byte [ ] body ; 
 if ( u instanceof SeqUpdate ) { 
 @ @ - 104 , 40 + 107 , 8 @ @ public class SequenceActor extends ModuleActor { 
 state = ( ( FatSeqUpdate ) u ) . getState ( ) ; 
 type = ( ( FatSeqUpdate ) u ) . getUpdateHeader ( ) ; 
 body = ( ( FatSeqUpdate ) u ) . getUpdate ( ) ; 
 - } else if ( u instanceof WeakUpdate ) { 
 - WeakUpdate w = ( WeakUpdate ) u ; 
 - try { 
 - Update update = parser . read ( w . getUpdateHeader ( ) , w . getUpdate ( ) ) ; 
 - processor . processWeakUpdate ( update , w . getDate ( ) ) ; 
 - Log . d ( TAG , " Weak Update : " + update ) ; 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - Log . w ( TAG , " Unable to parse update : ignoring " ) ; 
 - } 
 - return ; 
 - } else if ( u instanceof InternalUpdate ) { 
 - Log . d ( TAG , " Received internal update " ) ; 
 - processor . processInternalUpdate ( ( InternalUpdate ) u ) ; 
 - return ; 
 - } else if ( u instanceof ExecuteAfter ) { 
 - ExecuteAfter after = ( ExecuteAfter ) u ; 
 - if ( after . getSeq ( ) < = this . seq ) { 
 - after . getRunnable ( ) . run ( ) ; 
 - } else { 
 - pendingRunnables . add ( after ) ; 
 - } 
 - return ; 
 - } else if ( u instanceof PushSeq ) { 
 - PushSeq pushSeq = ( PushSeq ) u ; 
 - if ( pushSeq . seq < = this . seq ) { 
 - Log . d ( TAG , " Ignored PushSeq { seq : " + pushSeq . seq + " } " ) ; 
 - } else { 
 - Log . w ( TAG , " External Out of sequence : starting timer for invalidation " ) ; 
 - self ( ) . sendOnce ( new ForceInvalidate ( ) , INVALIDATE _ GAP ) ; 
 - } 
 - return ; 
 } else { 
 - return ; 
 + throw new RuntimeException ( ) ; 
 } 
 
 / / Checking sequence 
 @ @ - 173 , 45 + 144 , 31 @ @ public class SequenceActor extends ModuleActor { 
 return ; 
 } 
 
 - / / Checking update 
 - Update update = null ; 
 - try { 
 - update = new UpdatesParser ( ) . read ( type , body ) ; 
 - } catch ( IOException e ) { 
 - Log . w ( TAG , " Unable to parse update : ignoring " ) ; 
 - e . printStackTrace ( ) ; 
 + List < ApiUser > users = null ; 
 + List < ApiGroup > groups = null ; 
 + if ( u instanceof FatSeqUpdate ) { 
 + users = ( ( FatSeqUpdate ) u ) . getUsers ( ) ; 
 + groups = ( ( FatSeqUpdate ) u ) . getGroups ( ) ; 
 } 
 - 
 - if ( update ! = null ) { 
 - if ( ( ! ( u instanceof FatSeqUpdate ) ) & & processor . isCausesInvalidation ( update ) ) { 
 - Log . w ( TAG , " Message causes invalidation " ) ; 
 - invalidate ( ) ; 
 - return ; 
 + handler . onSeqUpdate ( type , body , users , groups ) . then ( new Consumer < SequenceHandlerActor . UpdateProcessed > ( ) { 
 + @ Override 
 + public void apply ( SequenceHandlerActor . UpdateProcessed updateProcessed ) { 
 + finishedSeq = seq ; 
 + preferences ( ) . putInt ( KEY _ SEQ , finishedSeq ) ; 
 + preferences ( ) . putBytes ( KEY _ STATE , state ) ; 
 + checkRunnables ( ) ; 
 } 
 - 
 - / / Processing update 
 - Log . d ( TAG , " Processing update : " + update ) ; 
 - 
 - if ( u instanceof FatSeqUpdate ) { 
 - FatSeqUpdate fatSeqUpdate = ( FatSeqUpdate ) u ; 
 - processor . applyRelated ( fatSeqUpdate . getUsers ( ) , fatSeqUpdate . getGroups ( ) , false ) ; 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + / / TODO ? 
 } 
 + } ) ; 
 
 - processor . processUpdate ( update ) ; 
 - 
 - if ( u instanceof FatSeqUpdate ) { 
 - FatSeqUpdate fatSeqUpdate = ( FatSeqUpdate ) u ; 
 - processor . applyRelated ( fatSeqUpdate . getUsers ( ) , fatSeqUpdate . getGroups ( ) , true ) ; 
 - } 
 - } 
 - 
 - / / Saving state 
 + / / Saving memory - only state 
 this . seq = seq ; 
 this . state = state ; 
 - preferences ( ) . putInt ( KEY _ SEQ , seq ) ; 
 - preferences ( ) . putBytes ( KEY _ STATE , state ) ; 
 
 - checkRunnables ( ) ; 
 checkFuture ( ) ; 
 
 / / Faaaaaar away 
 @ @ - 239 , 6 + 196 , 7 @ @ public class SequenceActor extends ModuleActor { 
 } 
 
 seq = response . getSeq ( ) ; 
 + finishedSeq = seq ; 
 state = response . getState ( ) ; 
 
 isValidated = true ; 
 @ @ - 272 , 7 + 230 , 7 @ @ public class SequenceActor extends ModuleActor { 
 final long loadStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; 
 request ( new RequestGetDifference ( seq , state , new ArrayList < ApiUpdateOptimization > ( ) ) , new RpcCallback < ResponseGetDifference > ( ) { 
 @ Override 
 - public void onResult ( ResponseGetDifference response ) { 
 + public void onResult ( final ResponseGetDifference response ) { 
 if ( isValidated ) { 
 return ; 
 } 
 @ @ - 280 , 39 + 238 , 28 @ @ public class SequenceActor extends ModuleActor { 
 Log . d ( TAG , " Difference loaded { seq = " + response . getSeq ( ) + " } in " 
 + ( im . actor . runtime . Runtime . getCurrentTime ( ) - loadStart ) + " ms " ) ; 
 
 - long parseStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; 
 - ArrayList < Update > updates = new ArrayList < Update > ( ) ; 
 - for ( ApiUpdateContainer u : response . getUpdates ( ) ) { 
 - try { 
 - updates . add ( parser . read ( u . getUpdateHeader ( ) , u . getUpdate ( ) ) ) ; 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - Log . d ( TAG , " Broken update # " + u . getUpdateHeader ( ) + " : ignoring " ) ; 
 - } 
 - } 
 - Log . d ( TAG , " Difference parsed in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - parseStart ) + " ms " ) ; 
 - 
 - if ( updates . size ( ) > 0 ) { 
 - String command = " Difference updates : " ; 
 - for ( Update u : updates ) { 
 - command + = " \ n | " + u ; 
 - } 
 - Log . d ( TAG , command ) ; 
 - } 
 - 
 - long applyStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; 
 - processor . applyDifferenceUpdate ( response . getUsers ( ) , response . getGroups ( ) , updates ) ; 
 - Log . d ( TAG , " Difference applied in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - applyStart ) + " ms " ) ; 
 + / / checkRunnables ( ) ; 
 
 seq = response . getSeq ( ) ; 
 state = response . getState ( ) ; 
 
 - isValidated = true ; 
 + handler . onDifferenceUpdate ( response ) . then ( new Consumer < SequenceHandlerActor . UpdateProcessed > ( ) { 
 + @ Override 
 + public void apply ( SequenceHandlerActor . UpdateProcessed updateProcessed ) { 
 + finishedSeq = response . getSeq ( ) ; 
 + preferences ( ) . putInt ( KEY _ SEQ , seq ) ; 
 + preferences ( ) . putBytes ( KEY _ STATE , state ) ; 
 + checkRunnables ( ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + / / TODO ? 
 + } 
 + } ) ; 
 
 - preferences ( ) . putInt ( KEY _ SEQ , seq ) ; 
 - preferences ( ) . putBytes ( KEY _ STATE , state ) ; 
 + isValidated = true ; 
 
 - checkRunnables ( ) ; 
 checkFuture ( ) ; 
 
 / / Faaaaaar away 
 @ @ - 365 , 7 + 312 , 7 @ @ public class SequenceActor extends ModuleActor { 
 private void checkRunnables ( ) { 
 if ( pendingRunnables . size ( ) > 0 ) { 
 for ( ExecuteAfter e : pendingRunnables . toArray ( new ExecuteAfter [ pendingRunnables . size ( ) ] ) ) { 
 - if ( e . getSeq ( ) < = this . seq ) { 
 + if ( e . getSeq ( ) < = this . finishedSeq ) { 
 e . getRunnable ( ) . run ( ) ; 
 pendingRunnables . remove ( e ) ; 
 } 
 @ @ - 373 , 6 + 320 , 27 @ @ public class SequenceActor extends ModuleActor { 
 } 
 } 
 
 + / / 
 + / / Messages 
 + / / 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof Invalidate 
 + | | message instanceof SeqUpdateTooLong 
 + | | message instanceof ForceInvalidate ) { 
 + invalidate ( ) ; 
 + } else if ( message instanceof SeqUpdate | | message instanceof FatSeqUpdate ) { 
 + onUpdateReceived ( message ) ; 
 + } else if ( message instanceof ExecuteAfter ) { 
 + onExecuteAfter ( ( ExecuteAfter ) message ) ; 
 + } else if ( message instanceof PushSeq ) { 
 + onPushSeqReceived ( ( ( PushSeq ) message ) . seq ) ; 
 + } else { 
 + drop ( message ) ; 
 + } 
 + } 
 + 
 public static class ForceInvalidate { 
 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java 
 index 2b01df2 . . 0502c55 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerActor . java 
 @ @ - 1 , 56 + 1 , 94 @ @ 
 package im . actor . core . modules . api ; 
 
 + import org . jetbrains . annotations . Nullable ; 
 + 
 import java . io . IOException ; 
 + import java . util . ArrayList ; 
 import java . util . List ; 
 
 import im . actor . core . api . ApiGroup ; 
 + import im . actor . core . api . ApiUpdateContainer ; 
 import im . actor . core . api . ApiUser ; 
 import im . actor . core . api . parser . UpdatesParser ; 
 + import im . actor . core . api . rpc . ResponseGetDifference ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . updates . UpdateProcessor ; 
 + import im . actor . core . modules . updates . internal . InternalUpdate ; 
 import im . actor . core . util . ModuleActor ; 
 import im . actor . core . network . parser . Update ; 
 import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . function . Constructor ; 
 + import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . promise . PromiseResolver ; 
 + import im . actor . runtime . promise . Promises ; 
 
 public class SequenceHandlerActor extends ModuleActor { 
 
 + public static Constructor < SequenceHandlerActor > CONSTRUCTOR ( final ModuleContext context ) { 
 + return new Constructor < SequenceHandlerActor > ( ) { 
 + @ Override 
 + public SequenceHandlerActor create ( ) { 
 + return new SequenceHandlerActor ( context ) ; 
 + } 
 + } ; 
 + } 
 + 
 private static final String TAG = " SequenceHandlerActor " ; 
 
 private UpdateProcessor processor ; 
 + private UpdatesParser updatesParser ; 
 
 - public SequenceHandlerActor ( UpdateProcessor processor , ModuleContext context ) { 
 + public SequenceHandlerActor ( ModuleContext context ) { 
 super ( context ) ; 
 
 - this . processor = processor ; 
 + this . processor = new UpdateProcessor ( context ) ; 
 } 
 
 - private void onWeakUpdateReceived ( Update update , long date ) { 
 - Log . d ( TAG , " Processing weak update : " + update ) ; 
 - this . processor . processWeakUpdate ( update , date ) ; 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + this . updatesParser = new UpdatesParser ( ) ; 
 } 
 
 - private void onSeqUpdate ( int type , byte [ ] body , List < ApiUser > users , 
 - List < ApiGroup > groups , PromiseResolver future ) { 
 + private void onInternalUpdate ( InternalUpdate internalUpdate ) { 
 + processor . processInternalUpdate ( internalUpdate ) ; 
 + } 
 
 + private void onWeakUpdateReceived ( int type , byte [ ] body , long date ) { 
 Update update ; 
 try { 
 - update = new UpdatesParser ( ) . read ( type , body ) ; 
 + update = updatesParser . read ( type , body ) ; 
 } catch ( IOException e ) { 
 Log . w ( TAG , " Unable to parse update : ignoring " ) ; 
 Log . e ( TAG , e ) ; 
 - future . result ( null ) ; 
 return ; 
 } 
 
 - if ( groups = = null | | users = = null ) { 
 - if ( processor . isCausesInvalidation ( update ) ) { 
 - Log . w ( TAG , " Difference is required " ) ; 
 - future . error ( new RuntimeException ( " Difference is required " ) ) ; 
 - return ; 
 - } 
 + Log . d ( TAG , " Processing weak update : " + update ) ; 
 + this . processor . processWeakUpdate ( update , date ) ; 
 + } 
 + 
 + private Promise < UpdateProcessed > onSeqUpdate ( int type , byte [ ] body , @ Nullable List < ApiUser > users , 
 + @ Nullable List < ApiGroup > groups ) throws Exception { 
 + 
 + Update update ; 
 + try { 
 + update = updatesParser . read ( type , body ) ; 
 + } catch ( IOException e ) { 
 + Log . w ( TAG , " Unable to parse update : ignoring " ) ; 
 + Log . e ( TAG , e ) ; 
 + return Promises . success ( new UpdateProcessed ( ) ) ; 
 } 
 
 + / / TODO : Implement 
 + / / if ( groups = = null | | users = = null ) { 
 + / / if ( processor . isCausesInvalidation ( update ) ) { 
 + / / Log . w ( TAG , " Difference is required " ) ; 
 + / / throw new RuntimeException ( ) ; 
 + / / } 
 + / / } 
 + 
 / / Processing update 
 Log . d ( TAG , " Processing update : " + update ) ; 
 
 @ @ - 65 , 51 + 103 , 107 @ @ public class SequenceHandlerActor extends ModuleActor { 
 } 
 
 Log . d ( TAG , " Processing update success " ) ; 
 - future . result ( null ) ; 
 + return Promises . success ( new UpdateProcessed ( ) ) ; 
 + } 
 + 
 + private Promise < UpdateProcessed > onDifferenceUpdate ( ResponseGetDifference difference ) { 
 + long parseStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; 
 + ArrayList < Update > updates = new ArrayList < Update > ( ) ; 
 + for ( ApiUpdateContainer u : difference . getUpdates ( ) ) { 
 + try { 
 + updates . add ( updatesParser . read ( u . getUpdateHeader ( ) , u . getUpdate ( ) ) ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + Log . d ( TAG , " Broken update # " + u . getUpdateHeader ( ) + " : ignoring " ) ; 
 + } 
 + } 
 + Log . d ( TAG , " Difference parsed in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - parseStart ) + " ms " ) ; 
 + 
 + if ( updates . size ( ) > 0 ) { 
 + String command = " Difference updates : " ; 
 + for ( Update u : updates ) { 
 + command + = " \ n | " + u ; 
 + } 
 + Log . d ( TAG , command ) ; 
 + } 
 + 
 + long applyStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; 
 + processor . applyDifferenceUpdate ( difference . getUsers ( ) , difference . getGroups ( ) , updates ) ; 
 + Log . d ( TAG , " Difference applied in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - applyStart ) + " ms " ) ; 
 + return Promises . success ( new UpdateProcessed ( ) ) ; 
 } 
 
 @ Override 
 - public void onAsk ( Object message , PromiseResolver future ) { 
 + public void onReceive ( Object message ) { 
 if ( message instanceof WeakUpdate ) { 
 WeakUpdate weakUpdate = ( WeakUpdate ) message ; 
 - onWeakUpdateReceived ( weakUpdate . getUpdate ( ) , weakUpdate . getDate ( ) ) ; 
 - future . result ( null ) ; 
 - } else if ( message instanceof SeqUpdate ) { 
 + try { 
 + onWeakUpdateReceived ( weakUpdate . type , weakUpdate . body , weakUpdate . date ) ; 
 + } catch ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } else if ( message instanceof InternalUpdate ) { 
 + onInternalUpdate ( ( InternalUpdate ) message ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void onAsk ( Object message , PromiseResolver resolver ) { 
 + if ( message instanceof SeqUpdate ) { 
 SeqUpdate seqUpdate = ( SeqUpdate ) message ; 
 - onSeqUpdate ( seqUpdate . type , seqUpdate . body , 
 - seqUpdate . users , seqUpdate . groups , future ) ; 
 + try { 
 + onSeqUpdate ( seqUpdate . type , seqUpdate . body , seqUpdate . users , seqUpdate . groups ) 
 + . pipeTo ( resolver ) ; 
 + } catch ( Exception e ) { 
 + resolver . tryError ( e ) ; 
 + } 
 + } else if ( message instanceof DifferenceUpdate ) { 
 + DifferenceUpdate differenceUpdate = ( DifferenceUpdate ) message ; 
 + onDifferenceUpdate ( differenceUpdate . getDifference ( ) ) 
 + . pipeTo ( resolver ) ; 
 } else { 
 - super . onAsk ( message , future ) ; 
 + super . onAsk ( message , resolver ) ; 
 } 
 } 
 
 public static class WeakUpdate { 
 
 - private Update update ; 
 + private int type ; 
 + private byte [ ] body ; 
 private long date ; 
 
 - public WeakUpdate ( Update update , long date ) { 
 - this . update = update ; 
 + public WeakUpdate ( int type , byte [ ] body , long date ) { 
 + this . type = type ; 
 + this . body = body ; 
 this . date = date ; 
 } 
 
 - public long getDate ( ) { 
 - return date ; 
 + public int getType ( ) { 
 + return type ; 
 } 
 
 - public Update getUpdate ( ) { 
 - return update ; 
 + public byte [ ] getBody ( ) { 
 + return body ; 
 + } 
 + 
 + public long getDate ( ) { 
 + return date ; 
 } 
 } 
 
 - public static class SeqUpdate { 
 + public static class SeqUpdate implements AskMessage < UpdateProcessed > { 
 
 private int type ; 
 private byte [ ] body ; 
 + @ Nullable 
 private List < ApiUser > users ; 
 - private List < ApiGroup > groups ; 
 + @ Nullable 
 + private 
 + List < ApiGroup > groups ; 
 
 - public SeqUpdate ( int type , byte [ ] body , List < ApiUser > users , List < ApiGroup > groups ) { 
 + public SeqUpdate ( int type , byte [ ] body , @ Nullable List < ApiUser > users , @ Nullable List < ApiGroup > groups ) { 
 this . type = type ; 
 this . body = body ; 
 this . users = users ; 
 @ @ - 124 , 12 + 218 , 32 @ @ public class SequenceHandlerActor extends ModuleActor { 
 return body ; 
 } 
 
 - public List < ApiUser > getUsers ( ) { 
 + public 
 + @ Nullable 
 + List < ApiUser > getUsers ( ) { 
 return users ; 
 } 
 
 - public List < ApiGroup > getGroups ( ) { 
 + public 
 + @ Nullable 
 + List < ApiGroup > getGroups ( ) { 
 return groups ; 
 } 
 } 
 + 
 + public static class DifferenceUpdate implements AskMessage < UpdateProcessed > { 
 + private ResponseGetDifference difference ; 
 + 
 + public DifferenceUpdate ( ResponseGetDifference difference ) { 
 + this . difference = difference ; 
 + } 
 + 
 + public ResponseGetDifference getDifference ( ) { 
 + return difference ; 
 + } 
 + } 
 + 
 + public static class UpdateProcessed { 
 + 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerInt . java 
 new file mode 100644 
 index 0000000 . . afa1446 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / SequenceHandlerInt . java 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + package im . actor . core . modules . api ; 
 + 
 + import org . jetbrains . annotations . Nullable ; 
 + 
 + import java . util . List ; 
 + 
 + import im . actor . core . api . ApiGroup ; 
 + import im . actor . core . api . ApiUser ; 
 + import im . actor . core . api . rpc . ResponseGetDifference ; 
 + import im . actor . core . modules . updates . internal . InternalUpdate ; 
 + import im . actor . runtime . actors . ActorInterface ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . promise . Promise ; 
 + import im . actor . core . modules . api . SequenceHandlerActor . * ; 
 + 
 + public class SequenceHandlerInt extends ActorInterface { 
 + 
 + public SequenceHandlerInt ( ActorRef dest ) { 
 + super ( dest ) ; 
 + } 
 + 
 + public Promise < UpdateProcessed > onSeqUpdate ( int updateKey , byte [ ] data , 
 + @ Nullable List < ApiUser > users , 
 + @ Nullable List < ApiGroup > groups ) { 
 + return ask ( new SeqUpdate ( updateKey , data , users , groups ) ) ; 
 + } 
 + 
 + public Promise < UpdateProcessed > onDifferenceUpdate ( ResponseGetDifference difference ) { 
 + return ask ( new DifferenceUpdate ( difference ) ) ; 
 + } 
 + 
 + public void onWeakUpdate ( int type , byte [ ] data , long date ) { 
 + send ( new WeakUpdate ( type , data , date ) ) ; 
 + } 
 + 
 + public void onInternalUpdate ( InternalUpdate internalUpdate ) { 
 + send ( internalUpdate ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java 
 index 99f0180 . . 6e6c704 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / api / Updates . java 
 @ @ - 10 , 10 + 10 , 12 @ @ import im . actor . core . api . ApiGroup ; 
 import im . actor . core . api . ApiUser ; 
 import im . actor . core . api . base . FatSeqUpdate ; 
 import im . actor . core . api . base . SeqUpdate ; 
 + import im . actor . core . api . base . WeakUpdate ; 
 import im . actor . core . events . NewSessionCreated ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . updates . internal . ExecuteAfter ; 
 + import im . actor . core . modules . updates . internal . InternalUpdate ; 
 import im . actor . core . modules . updates . internal . RelatedResponse ; 
 import im . actor . core . network . parser . Update ; 
 import im . actor . runtime . actors . Actor ; 
 @ @ - 28 , 22 + 30 , 31 @ @ import static im . actor . runtime . actors . ActorSystem . system ; 
 public class Updates extends AbsModule implements BusSubscriber { 
 
 private ActorRef updateActor ; 
 + private ActorRef updateHandler ; 
 + private SequenceHandlerInt updateHandlerInt ; 
 
 public Updates ( ModuleContext messenger ) { 
 super ( messenger ) ; 
 } 
 
 public void run ( ) { 
 - this . updateActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 - @ Override 
 - public Actor create ( ) { 
 - return new SequenceActor ( context ( ) ) ; 
 - } 
 - } ) . changeDispatcher ( " updates " ) , " actor / updates " ) ; 
 + this . updateHandler = system ( ) . actorOf ( " actor / updates / handler " , " updates " , 
 + SequenceHandlerActor . CONSTRUCTOR ( context ( ) ) ) ; 
 + this . updateHandlerInt = new SequenceHandlerInt ( this . updateHandler ) ; 
 + this . updateActor = system ( ) . actorOf ( " actor / updates " , SequenceActor . CONSTRUCTOR ( context ( ) ) ) ; 
 + 
 
 context ( ) . getEvents ( ) . subscribe ( this , NewSessionCreated . EVENT ) ; 
 } 
 
 + public ActorRef getUpdateActor ( ) { 
 + return updateActor ; 
 + } 
 + 
 + public SequenceHandlerInt getUpdateHandler ( ) { 
 + return updateHandlerInt ; 
 + } 
 + 
 public void onPushReceived ( int seq ) { 
 updateActor . send ( new SequenceActor . PushSeq ( seq ) ) ; 
 } 
 @ @ - 59 , 7 + 70 , 15 @ @ public class Updates extends AbsModule implements BusSubscriber { 
 } 
 
 public void onUpdateReceived ( Object update ) { 
 - updateActor . send ( update ) ; 
 + if ( update instanceof WeakUpdate ) { 
 + WeakUpdate weakUpdate = ( WeakUpdate ) update ; 
 + updateHandlerInt . onWeakUpdate ( weakUpdate . getUpdateHeader ( ) , 
 + weakUpdate . getUpdate ( ) , weakUpdate . getDate ( ) ) ; 
 + } else if ( update instanceof InternalUpdate ) { 
 + updateHandlerInt . onInternalUpdate ( ( InternalUpdate ) update ) ; 
 + } else { 
 + updateActor . send ( update ) ; 
 + } 
 } 
 
 public void onUpdateReceived ( Object update , Long delay ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 index 51753aa . . 0d29f96 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedPeerActor . java 
 @ @ - 322 , 7 + 322 , 7 @ @ public class EncryptedPeerActor extends ModuleActor { 
 } 
 } 
 
 - public static class EncryptBox extends AskMessage < EncryptBoxResponse > { 
 + public static class EncryptBox implements AskMessage < EncryptBoxResponse > { 
 private byte [ ] data ; 
 
 public EncryptBox ( byte [ ] data ) { 
 @ @ - 347 , 7 + 347 , 7 @ @ public class EncryptedPeerActor extends ModuleActor { 
 } 
 } 
 
 - public static class DecryptBox extends AskMessage < DecryptBoxResponse > { 
 + public static class DecryptBox implements AskMessage < DecryptBoxResponse > { 
 
 private EncryptedBox encryptedBox ; 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedSessionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedSessionActor . java 
 index dd575d3 . . c2aec25 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedSessionActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / EncryptedSessionActor . java 
 @ @ - 247 , 7 + 247 , 7 @ @ public class EncryptedSessionActor extends ModuleActor { 
 } 
 } 
 
 - public static class EncryptPackage extends AskMessage < EncryptedPackageRes > { 
 + public static class EncryptPackage implements AskMessage < EncryptedPackageRes > { 
 private byte [ ] data ; 
 
 public EncryptPackage ( byte [ ] data ) { 
 @ @ - 278 , 7 + 278 , 7 @ @ public class EncryptedSessionActor extends ModuleActor { 
 } 
 } 
 
 - public static class DecryptPackage extends AskMessage < DecryptedPackage > { 
 + public static class DecryptPackage implements AskMessage < DecryptedPackage > { 
 
 private byte [ ] data ; 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java 
 index 3c5f66a . . c3ed111 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / KeyManagerActor . java 
 @ @ - 648 , 7 + 648 , 7 @ @ public class KeyManagerActor extends ModuleActor { 
 / / Own Keys 
 / / 
 
 - public static class FetchOwnKey extends AskMessage < OwnIdentity > { 
 + public static class FetchOwnKey implements AskMessage < OwnIdentity > { 
 
 } 
 
 @ @ - 671 , 11 + 671 , 11 @ @ public class KeyManagerActor extends ModuleActor { 
 } 
 } 
 
 - public static class FetchOwnRandomPreKey extends AskMessage < PrivateKey > { 
 + public static class FetchOwnRandomPreKey implements AskMessage < PrivateKey > { 
 
 } 
 
 - public static class FetchOwnPreKeyByPublic extends AskMessage < PrivateKey > { 
 + public static class FetchOwnPreKeyByPublic implements AskMessage < PrivateKey > { 
 
 private byte [ ] publicKey ; 
 
 @ @ - 688 , 7 + 688 , 7 @ @ public class KeyManagerActor extends ModuleActor { 
 } 
 } 
 
 - public static class FetchOwnPreKeyById extends AskMessage < PrivateKey > { 
 + public static class FetchOwnPreKeyById implements AskMessage < PrivateKey > { 
 
 private long keyId ; 
 
 @ @ - 705 , 7 + 705 , 7 @ @ public class KeyManagerActor extends ModuleActor { 
 / / Users Keys 
 / / 
 
 - public static class FetchUserKeys extends AskMessage < UserKeys > { 
 + public static class FetchUserKeys implements AskMessage < UserKeys > { 
 private int uid ; 
 
 public FetchUserKeys ( int uid ) { 
 @ @ - 717 , 7 + 717 , 7 @ @ public class KeyManagerActor extends ModuleActor { 
 } 
 } 
 
 - public static class FetchUserPreKey extends AskMessage < PublicKey > { 
 + public static class FetchUserPreKey implements AskMessage < PublicKey > { 
 
 private int uid ; 
 private int keyGroup ; 
 @ @ - 742 , 7 + 742 , 7 @ @ public class KeyManagerActor extends ModuleActor { 
 } 
 } 
 
 - public static class FetchUserPreKeyRandom extends AskMessage < PublicKey > { 
 + public static class FetchUserPreKeyRandom implements AskMessage < PublicKey > { 
 
 private int uid ; 
 private int keyGroup ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java 
 index d2de281 . . 4fef69b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / encryption / SessionManagerActor . java 
 @ @ - 280 , 7 + 280 , 7 @ @ public class SessionManagerActor extends ModuleActor { 
 } 
 } 
 
 - public static class PickSessionForDecrypt extends AskMessage < PeerSession > { 
 + public static class PickSessionForDecrypt implements AskMessage < PeerSession > { 
 
 private int uid ; 
 private int keyGroupId ; 
 @ @ - 311 , 7 + 311 , 7 @ @ public class SessionManagerActor extends ModuleActor { 
 } 
 } 
 
 - public static class PickSessionForEncrypt extends AskMessage < PeerSession > { 
 + public static class PickSessionForEncrypt implements AskMessage < PeerSession > { 
 
 private int uid ; 
 private int keyGroupId ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorSystem . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorSystem . java 
 index a1fad8f . . 62e8d1f 100755 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorSystem . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ActorSystem . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import java . util . HashMap ; 
 
 import im . actor . runtime . Runtime ; 
 import im . actor . runtime . actors . mailbox . ActorDispatcher ; 
 + import im . actor . runtime . function . Constructor ; 
 import im . actor . runtime . promise . Promise ; 
 
 / * * 
 @ @ - 122 , 10 + 123 , 36 @ @ public class ActorSystem { 
 return mailboxesDispatcher . referenceActor ( path , props ) ; 
 } 
 
 + public ActorRef actorOf ( String path , Props props ) { 
 + return actorOf ( props , path ) ; 
 + } 
 + 
 public ActorRef actorOf ( String path , ActorCreator creator ) { 
 return actorOf ( Props . create ( creator ) , path ) ; 
 } 
 
 + public ActorRef actorOf ( String path , final Constructor < ? extends Actor > constructor ) { 
 + return actorOf ( Props . create ( new ActorCreator ( ) { 
 + @ Override 
 + public Actor create ( ) { 
 + return constructor . create ( ) ; 
 + } 
 + } ) , path ) ; 
 + } 
 + 
 + public ActorRef actorOf ( String path , String dispatcher , ActorCreator creator ) { 
 + return actorOf ( Props . create ( creator ) . changeDispatcher ( dispatcher ) , path ) ; 
 + } 
 + 
 + public ActorRef actorOf ( String path , String dispatcher , final Constructor < ? extends Actor > constructor ) { 
 + return actorOf ( Props . create ( new ActorCreator ( ) { 
 + @ Override 
 + public Actor create ( ) { 
 + return constructor . create ( ) ; 
 + } 
 + } ) . changeDispatcher ( dispatcher ) , path ) ; 
 + } 
 + 
 / * * 
 * Getting current trace interface for actor system 
 * 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskMessage . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskMessage . java 
 index 54f8943 . . 2e78dfe 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskMessage . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / actors / ask / AskMessage . java 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 package im . actor . runtime . actors . ask ; 
 
 - public abstract class AskMessage < T > { 
 + public interface AskMessage < T > { 
 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / Constructor . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / Constructor . java 
 new file mode 100644 
 index 0000000 . . b773f1c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / function / Constructor . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package im . actor . runtime . function ; 
 + 
 + public interface Constructor < T > { 
 + T create ( ) ; 
 + }
