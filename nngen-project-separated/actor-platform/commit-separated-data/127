BLEU SCORE: 0.12300686288463772

TEST MSG: fix ( server : groups ) : show invite info for groups with short name
GENERATED MSG: fix ( server ) : fixed cluster issues

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > index 33d1833 . . 6d304ea 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > @ @ - 302 , 6 + 302 , 7 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { < nl > } else { < nl > persist ( HistoryBecameShared ( Instant . now , cmd . clientUserId ) ) { evt ⇒ < nl > val newState = commit ( evt ) < nl > + log . debug ( " History of group { } became shared " , groupId ) < nl > < nl > val memberIds = newState . memberIds < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > index e1ed6e7 . . e6de46c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > @ @ - 135 , 7 + 135 , 10 @ @ trait GroupQueryHandlers { < nl > canEditShortName = Some ( state . permissions . canEditShortName ( clientUserId ) ) , < nl > canEditAdminList = Some ( state . permissions . canEditAdmins ( clientUserId ) ) , < nl > canViewAdminList = Some ( state . permissions . canViewAdmins ( clientUserId ) ) , < nl > - canEditAdminSettings = Some ( state . permissions . canEditAdminSettings ( clientUserId ) ) < nl > + canEditAdminSettings = Some ( state . permissions . canEditAdminSettings ( clientUserId ) ) , < nl > + canInviteViaLink = None , < nl > + canDelete = None , < nl > + canLeave = None < nl > ) < nl > ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > index 80b6fb0 . . 77ec517 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > @ @ - 108 , 7 + 108 , 7 @ @ private [ group ] final case class GroupState ( < nl > avatar : Option [ Avatar ] , < nl > topic : Option [ String ] , < nl > shortName : Option [ String ] , < nl > - groupType : GroupType , / / TODO : rename to groupType < nl > + groupType : GroupType , < nl > isHidden : Boolean , < nl > isHistoryShared : Boolean , < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala < nl > index 0e64b70 . . e8d3b80 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala < nl > @ @ - 6 , 36 + 6 , 33 @ @ import akka . http . scaladsl . model . StatusCodes . _ < nl > import akka . http . scaladsl . server . Directives . _ < nl > import akka . http . scaladsl . server . Route < nl > import akka . http . scaladsl . util . FastFuture < nl > - import im . actor . server . api . http . { HttpHandler , json } < nl > import im . actor . server . api . http . json . JsonFormatters . { errorsFormat , groupInviteInfoFormat } < nl > + import im . actor . server . api . http . { HttpHandler , json } < nl > import im . actor . server . db . DbExtension < nl > - import im . actor . server . file . ImageUtils . getAvatar < nl > import im . actor . server . file . { Avatar , FileLocation , FileStorageExtension } < nl > import im . actor . server . group . GroupExtension < nl > - import im . actor . server . model . AvatarData < nl > + import im . actor . server . names . GlobalNamesStorageKeyValueStorage < nl > import im . actor . server . persist . _ < nl > import im . actor . server . persist . files . FileRepo < nl > import im . actor . server . user . UserExtension < nl > import play . api . libs . json . Json < nl > - import slick . driver . PostgresDriver . api . _ < nl > < nl > import scala . concurrent . Future < nl > - import scala . concurrent . duration . _ < nl > import scala . util . { Failure , Success } < nl > < nl > private [ group ] final class GroupsHttpHandler ( ) ( implicit system : ActorSystem ) extends HttpHandler { < nl > < nl > import im . actor . server . ApiConversions . _ < nl > - < nl > import system . dispatcher < nl > private val db = DbExtension ( system ) . db < nl > private val fsAdapter = FileStorageExtension ( system ) . fsAdapter < nl > + private val globalNamesStorage = new GlobalNamesStorageKeyValueStorage < nl > < nl > override def routes : Route = < nl > defaultVersion { < nl > - path ( " groups " / " invites " / Segment ) { token ⇒ < nl > + path ( " groups " / " invites " / Segment ) { tokenOrShortName ⇒ < nl > get { < nl > - onComplete ( retrieve ( token ) ) { < nl > + onComplete ( retrieve ( tokenOrShortName ) ) { < nl > case Success ( Right ( result ) ) ⇒ < nl > complete ( HttpResponse ( < nl > status = OK , < nl > @ @ - 52 , 25 + 49 , 36 @ @ private [ group ] final class GroupsHttpHandler ( ) ( implicit system : ActorSystem ) ext < nl > } < nl > } < nl > < nl > - private def retrieve ( token : String ) : Future [ Either [ json . Errors , json . GroupInviteInfo ] ] = for { < nl > - optTokenInfo ← db . run ( GroupInviteTokenRepo . findByToken ( token ) ) < nl > - result ← optTokenInfo map { tokenInfo ⇒ < nl > - for { < nl > - groupInfo ← GroupExtension ( system ) . getApiStruct ( tokenInfo . groupId , 0 ) < nl > - groupTitle = groupInfo . title < nl > - groupAvatar = groupInfo . avatar < nl > - groupAvatarUrls ← avatarUrls ( groupAvatar ) < nl > + private def retrieve ( tokenOrShortName : String ) : Future [ Either [ json . Errors , json . GroupInviteInfo ] ] = for { < nl > + byToken ← db . run ( GroupInviteTokenRepo . findByToken ( tokenOrShortName ) ) < nl > + byGroupId ← globalNamesStorage . getGroupId ( tokenOrShortName ) < nl > + optInviteData = ( byToken , byGroupId ) match { < nl > + case ( Some ( tokenInfo ) , _ ) ⇒ Some ( tokenInfo . groupId → Some ( tokenInfo . creatorId ) ) < nl > + case ( _ , Some ( groupId ) ) ⇒ Some ( groupId → None ) < nl > + case _ ⇒ None < nl > + } < nl > + result ← optInviteData map { < nl > + case ( groupId , optInviterId ) ⇒ < nl > + for { < nl > + groupInfo ← GroupExtension ( system ) . getApiStruct ( groupId , 0 ) < nl > + groupTitle = groupInfo . title < nl > + groupAvatar = groupInfo . avatar < nl > + groupAvatarUrls ← avatarUrls ( groupAvatar ) < nl > < nl > - inviterInfo ← UserExtension ( system ) . getApiStruct ( tokenInfo . creatorId , 0 , 0L ) < nl > - inviterName = inviterInfo . name < nl > - inviterAvatar = inviterInfo . avatar < nl > - inviterAvatarUrls ← avatarUrls ( inviterAvatar ) < nl > - } yield Right ( < nl > - json . GroupInviteInfo ( < nl > - group = json . Group ( groupTitle , groupAvatarUrls ) , < nl > - inviter = json . User ( inviterName , inviterAvatarUrls ) < nl > + optInviterInfo ← optInviterId match { < nl > + case Some ( inviterId ) ⇒ < nl > + for { < nl > + user ← UserExtension ( system ) . getApiStruct ( inviterId , 0 , 0L ) < nl > + avatars ← avatarUrls ( user . avatar ) < nl > + } yield Some ( json . InviterInfo ( user . name , avatars ) ) < nl > + case None ⇒ FastFuture . successful ( None ) < nl > + } < nl > + } yield Right ( < nl > + json . GroupInviteInfo ( < nl > + group = json . GroupInfo ( groupTitle , groupAvatarUrls ) , < nl > + inviter = optInviterInfo < nl > + ) < nl > ) < nl > - ) < nl > } getOrElse FastFuture . successful ( Left ( json . Errors ( " Expired or invalid token " ) ) ) < nl > } yield result < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala < nl > index a24cc6b . . d6cae1b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala < nl > @ @ - 29 , 12 + 29 , 12 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { < nl > ( ext . db , ext . connector ) < nl > } < nl > < nl > - def getUserOwnerId ( name : String ) : Future [ Option [ Int ] ] = < nl > + def getUserId ( name : String ) : Future [ Option [ Int ] ] = < nl > getOwner ( name ) map ( _ . collect { < nl > case GlobalNameOwner ( OwnerType . User , userId ) ⇒ userId < nl > } ) < nl > < nl > - def getGroupOwnerId ( name : String ) : Future [ Option [ Int ] ] = < nl > + def getGroupId ( name : String ) : Future [ Option [ Int ] ] = < nl > getOwner ( name ) map ( _ . collect { < nl > case GlobalNameOwner ( OwnerType . Group , groupId ) ⇒ groupId < nl > } ) < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > index 7d1d341 . . c1d5931 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > @ @ - 6 , 15 + 6 , 15 @ @ import akka . actor . ActorSystem < nl > import akka . event . Logging < nl > import akka . http . scaladsl . util . FastFuture < nl > import akka . stream . Materializer < nl > - import akka . stream . scaladsl . { FileIO , Source } < nl > + import akka . stream . scaladsl . { FileIO , Source } < nl > import akka . util . ByteString < nl > - import better . files . { File , _ } < nl > + import better . files . { File , _ } < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . file . UnsafeFileName < nl > import im . actor . server . persist . files . FileRepo < nl > < nl > - import scala . concurrent . { ExecutionContext , Future , blocking } < nl > - import scala . util . { Failure , Success } < nl > + import scala . concurrent . { ExecutionContext , Future , blocking } < nl > + import scala . util . { Failure , Success } < nl > < nl > trait FileStorageOperations extends LocalUploadKeyImplicits { < nl > < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonFormatters . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonFormatters . scala < nl > index 348aaa1 . . 1c20383 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonFormatters . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonFormatters . scala < nl > @ @ - 11 , 8 + 11 , 8 @ @ object JsonFormatters { < nl > ( JsPath \ " image _ url " ) . read [ String ] . map [ Content ] { Image } < nl > < nl > implicit val avatarUrlsFormat : Format [ AvatarUrls ] = Json . format [ AvatarUrls ] < nl > - implicit val userFormat : Format [ User ] = Json . format [ User ] < nl > - implicit val groupFormat : Format [ Group ] = Json . format [ Group ] < nl > + implicit val userFormat : Format [ InviterInfo ] = Json . format [ InviterInfo ] < nl > + implicit val groupFormat : Format [ GroupInfo ] = Json . format [ GroupInfo ] < nl > implicit val groupInviteInfoFormat : Format [ GroupInviteInfo ] = Json . format [ GroupInviteInfo ] < nl > implicit val errorsFormat : Format [ Errors ] = Json . format [ Errors ] < nl > < nl > @ @ - 22 , 4 + 22 , 4 @ @ object JsonFormatters { < nl > < nl > implicit val reverseHookResponseFormat : Format [ ReverseHookResponse ] = Json . format [ ReverseHookResponse ] < nl > implicit val statusFormat : Format [ Status ] = Json . format [ Status ] < nl > - } < nl > \ No newline at end of file < nl > + } < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / models . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / models . scala < nl > index 2758eba . . fc84bec 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / models . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / models . scala < nl > @ @ - 5 , 9 + 5 , 9 @ @ case class Text ( text : String ) extends Content < nl > case class Image ( imageUrl : String ) extends Content < nl > case class Document ( documentUrl : String ) extends Content < nl > < nl > - case class Group ( title : String , avatars : Option [ AvatarUrls ] ) < nl > - case class User ( name : String , avatars : Option [ AvatarUrls ] ) < nl > - case class GroupInviteInfo ( group : Group , inviter : User ) < nl > + case class GroupInfo ( title : String , avatars : Option [ AvatarUrls ] ) < nl > + case class InviterInfo ( name : String , avatars : Option [ AvatarUrls ] ) < nl > + case class GroupInviteInfo ( group : GroupInfo , inviter : Option [ InviterInfo ] ) < nl > case class AvatarUrls ( small : Option [ String ] , large : Option [ String ] , full : Option [ String ] ) < nl > < nl > case class Errors ( message : String ) < nl > @ @ - 17 , 4 + 17 , 4 @ @ case class ReverseHook ( url : String ) < nl > case class Status ( status : String ) < nl > case class ReverseHookResponse ( id : Int , url : Option [ String ] ) < nl > < nl > - final case class ServerInfo ( projectName : String , endpoints : List [ String ] ) < nl > \ No newline at end of file < nl > + final case class ServerInfo ( projectName : String , endpoints : List [ String ] ) < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > index 6d46810 . . e5aeda7 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > @ @ - 93 , 7 + 93 , 6 @ @ object GroupRepo { < nl > ) < nl > } < nl > < nl > - @ deprecated ( " Public groups are deprecated in Group V2 API " , " 2016 - 06 - 05 " ) < nl > def findPublic = < nl > groups . filter ( _ . isPublic = = = true ) . map ( _ . asGroup ) . result < nl > < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > index 4b2dd15 . . 4a84713 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > @ @ - 67 , 7 + 67 , 7 @ @ trait AuthHelpers extends Helpers { < nl > protected def newUsernameSignUp ( transaction : AuthUsernameTransaction , name : String , sex : Option [ ApiSex ] ) : Result [ ( Int , String ) Xor User ] = { < nl > val username = transaction . username < nl > for { < nl > - optUserId ← fromFuture ( globalNamesStorage . getUserOwnerId ( username ) ) < nl > + optUserId ← fromFuture ( globalNamesStorage . getUserId ( username ) ) < nl > result ← optUserId match { < nl > case Some ( id ) ⇒ point ( Xor . left ( ( id , " " ) ) ) < nl > case None ⇒ newUser ( name , " " , sex , username = Some ( username ) ) < nl > @ @ - 168 , 7 + 168 , 7 @ @ trait AuthHelpers extends Helpers { < nl > } yield ( emailModel . userId , " " ) < nl > case u : AuthUsernameTransaction ⇒ < nl > for { < nl > - userId ← fromFutureOption ( AuthErrors . UsernameUnoccupied ) ( globalNamesStorage . getUserOwnerId ( u . username ) ) < nl > + userId ← fromFutureOption ( AuthErrors . UsernameUnoccupied ) ( globalNamesStorage . getUserId ( u . username ) ) < nl > } yield ( userId , " " ) < nl > case _ : AuthAnonymousTransaction ⇒ < nl > fromEither ( Xor . left ( AuthErrors . NotValidated ) ) < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > index 4f49ce9 . . bfa32c5 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > @ @ - 202 , 7 + 202 , 7 @ @ final class AuthServiceImpl ( val oauth2Service : GoogleProvider ) ( < nl > val action = < nl > for { < nl > normUsername ← fromOption ( ProfileRpcErrors . NicknameInvalid ) ( StringUtils . normalizeUsername ( username ) ) < nl > - optUserId ← fromFuture ( globalNamesStorage . getUserOwnerId ( username ) ) < nl > + optUserId ← fromFuture ( globalNamesStorage . getUserId ( username ) ) < nl > _ ← optUserId map ( id ⇒ forbidDeletedUser ( id ) ) getOrElse point ( ( ) ) < nl > optAuthTransaction ← fromDBIO ( AuthUsernameTransactionRepo . find ( username , deviceHash ) ) < nl > transactionHash ← optAuthTransaction match { < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala < nl > index 362e3fc . . 5ac4370 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala < nl > @ @ - 172 , 7 + 172 , 7 @ @ class ContactsServiceImpl ( implicit actorSystem : ActorSystem ) < nl > < nl > private def findByNickname ( nickname : String , client : AuthorizedClientData ) : Result [ Vector [ ApiUser ] ] = { < nl > for { < nl > - optUserId ← fromFuture ( globalNamesStorage . getUserOwnerId ( nickname ) ) < nl > + optUserId ← fromFuture ( globalNamesStorage . getUserId ( nickname ) ) < nl > structs ← fromFuture ( Future . sequence ( optUserId . toSeq map ( userId ⇒ userExt . getApiStruct ( userId , client . userId , client . authId ) ) ) ) < nl > } yield structs . toVector < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > index 89f4ce8 . . fc654f9 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > @ @ - 369 , 7 + 369 , 7 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act < nl > } yield info . groupId → Some ( info . creatorId ) < nl > case Xor . Right ( groupName ) ⇒ < nl > for { < nl > - groupId ← fromFutureOption ( GroupRpcErrors . InvalidInviteGroup ) ( globalNamesStorage . getGroupOwnerId ( groupName ) ) < nl > + groupId ← fromFutureOption ( GroupRpcErrors . InvalidInviteGroup ) ( globalNamesStorage . getGroupId ( groupName ) ) < nl > } yield groupId → None < nl > } < nl > ( groupId , optInviter ) = joinInfo < nl > @ @ - 459 , 6 + 459 , 8 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act < nl > } < nl > } < nl > < nl > + protected def doHandleDeleteGroup ( groupPeer : ApiGroupOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = ? ? ? < nl > + < nl > private def usersOrPeers ( userIds : Vector [ Int ] , stripEntities : Boolean ) ( implicit client : AuthorizedClientData ) : Future [ ( Vector [ ApiUser ] , Vector [ ApiUserOutPeer ] ) ] = < nl > if ( stripEntities ) { < nl > val users = Vector . empty [ ApiUser ] < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala < nl > index 031d453 . . bb5ad0d 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala < nl > @ @ - 56 , 6 + 56 , 8 @ @ final class HttpApiFrontendSpec < nl > < nl > " Groups handler " should " respond with JSON message to group invite info with correct invite token " in t . groupInvitesOk ( ) < nl > < nl > + it should " respond with JSON message without inviter , when we join via group short name " in t . groupInvitesShortName ( ) < nl > + < nl > it should " respond with JSON message with avatar full links to group invite info with correct invite token " in t . groupInvitesAvatars1 ( ) < nl > < nl > it should " respond with JSON message with avatar partial links to group invite info with correct invite token " in t . groupInvitesAvatars2 ( ) < nl > @ @ - 316 , 6 + 318 , 22 @ @ final class HttpApiFrontendSpec < nl > } < nl > } < nl > < nl > + def groupInvitesShortName ( ) = { < nl > + val shortName = " division " < nl > + whenReady ( groupExt . updateShortName ( groupOutPeer . groupId , user1 . id , authId1 , Some ( shortName ) ) ) { _ ⇒ < nl > + val request = HttpRequest ( < nl > + method = GET , < nl > + uri = s " $ { config . baseUri } / v1 / groups / invites / $ shortName " < nl > + ) < nl > + val resp = singleRequest ( request ) . futureValue < nl > + resp . status shouldEqual OK < nl > + val body = resp . entity . asString < nl > + val response = Json . parse ( body ) < nl > + ( response \ " group " \ " title " ) . as [ String ] shouldEqual groupName < nl > + ( response \ " inviter " \ " name " ) . toOption shouldEqual None < nl > + } < nl > + } < nl > + < nl > def groupInvitesAvatars1 ( ) = { < nl > val avatarData = Files . readAllBytes ( Paths . get ( getClass . getResource ( " / valid - avatar . jpg " ) . toURI ) ) < nl > val fileLocation = db . run ( fsAdapter . uploadFile ( UnsafeFileName ( " avatar " ) , avatarData ) ) . futureValue
NEAREST DIFF (one line): diff - - git a / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala b / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > index 25b1496 . . 4f514b0 100644 < nl > - - - a / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > + + + b / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > @ @ - 55 , 8 + 55 , 13 @ @ private [ api ] trait MessageMapper { < nl > ByteString . copyFrom ( group . toByteArray ) < nl > } < nl > < nl > - private def applyPeer ( buf : ByteString ) : Peer = < nl > - Peer . parseFrom ( CodedInputStream . newInstance ( buf . asReadOnlyByteBuffer ( ) ) ) . right . get < nl > + private def applyPeer ( bytes : ByteString ) : Peer = { < nl > + if ( bytes . size ( ) > 0 ) { < nl > + Peer . parseFrom ( CodedInputStream . newInstance ( bytes . asReadOnlyByteBuffer ( ) ) ) . right . get < nl > + } else { < nl > + null < nl > + } < nl > + } < nl > < nl > private def unapplyPeer ( peer : Peer ) : ByteString = < nl > ByteString . copyFrom ( peer . toByteArray ) < nl > diff - - git a / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala b / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala < nl > index 780e6a7 . . 5ebe48c 100644 < nl > - - - a / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala < nl > + + + b / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala < nl > @ @ - 1 , 31 + 1 , 15 @ @ < nl > package im . actor . server . commons < nl > < nl > - import com . typesafe . config . { ConfigFactory , Config } < nl > + import com . typesafe . config . { Config , ConfigFactory } < nl > < nl > object ActorConfig { < nl > def load ( ) : Config = { < nl > ConfigFactory . parseString ( < nl > - s " " " < nl > + " " " < nl > | akka { < nl > | actor { < nl > | provider : " akka . cluster . ClusterActorRefProvider " < nl > | } < nl > - | < nl > - | remote { < nl > - | netty . tcp { < nl > - | hostname : " 127 . 0 . 0 . 1 " < nl > - | port : 2553 < nl > - | } < nl > - | } < nl > - | < nl > - | cluster { < nl > - | seed - nodes : [ " akka . tcp : / / actor - server @ 127 . 0 . 0 . 1 : 2553 " ] < nl > - | } < nl > - | < nl > - | persistence { < nl > - | journal . plugin : " jdbc - journal " < nl > - | snapshot - store . plugin : " jdbc - snapshot - store " < nl > - | } < nl > | } < nl > | < nl > | jdbc - connection { < nl > @ @ - 35 , 6 + 19 , 16 @ @ object ActorConfig { < nl > " " " . stripMargin < nl > ) < nl > . withFallback ( ConfigFactory . load ( ) ) < nl > + . withFallback ( ConfigFactory . parseString ( < nl > + " " " < nl > + | akka { < nl > + | persistence { < nl > + | journal . plugin : " jdbc - journal " < nl > + | snapshot - store . plugin : " jdbc - snapshot - store " < nl > + | } < nl > + | } < nl > + " " " . stripMargin < nl > + ) ) < nl > . resolve ( ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala < nl > index 900f96e . . 9807973 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala < nl > @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ < nl > sealed trait GroupDialogExtension extends Extension < nl > < nl > final class GroupDialogExtensionImpl ( system : ActorSystem ) extends GroupDialogExtension { < nl > + GroupDialog . register ( ) < nl > + < nl > lazy val region : GroupDialogRegion = GroupDialogRegion . start ( ) ( system ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala < nl > index 79bf6f5 . . d5d79d6 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala < nl > @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ < nl > sealed trait PrivateDialogExtension extends Extension < nl > < nl > final class PrivateDialogExtensionImpl ( system : ActorSystem ) extends PrivateDialogExtension { < nl > + PrivateDialog . register ( ) < nl > + < nl > lazy val region : PrivateDialogRegion = PrivateDialogRegion . start ( ) ( system ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > index 4b344bc . . 6dd3eb7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ < nl > sealed trait GroupExtension extends Extension < nl > < nl > final class GroupExtensionImpl ( system : ActorSystem ) extends GroupExtension { < nl > + GroupProcessor . register ( ) < nl > + < nl > lazy val processorRegion : GroupProcessorRegion = GroupProcessorRegion . start ( ) ( system ) < nl > lazy val viewRegion : GroupViewRegion = GroupViewRegion ( processorRegion . ref ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index ce3eec3 . . 458a489 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 7 , 11 + 7 , 10 @ @ import akka . persistence . { RecoveryCompleted , RecoveryFailure } < nl > import akka . util . Timeout < nl > import im . actor . server . commons . serialization . ActorSerializer < nl > import im . actor . server . db . DbExtension < nl > + import im . actor . server . dialog . group . { GroupDialogExtension , GroupDialogRegion } < nl > import im . actor . server . event . TSEvent < nl > import im . actor . server . file . Avatar < nl > import im . actor . server . office . { PeerProcessor , ProcessorState , StopOffice } < nl > - import im . actor . server . dialog . group . GroupDialogExtension < nl > - import im . actor . server . dialog . group . GroupDialogRegion < nl > import im . actor . server . push . SeqUpdatesExtension < nl > import im . actor . server . user . { UserExtension , UserProcessorRegion , UserViewRegion } < nl > import im . actor . server . util . { FileStorageAdapter , S3StorageExtension } < nl > @ @ - 84 , 6 + 83 , 8 @ @ object GroupProcessor { < nl > ActorSerializer . register ( 21004 , classOf [ GroupQueries . CheckAccessHashResponse ] ) < nl > ActorSerializer . register ( 21005 , classOf [ GroupQueries . GetMembers ] ) < nl > ActorSerializer . register ( 21006 , classOf [ GroupQueries . GetMembersResponse ] ) < nl > + ActorSerializer . register ( 21007 , classOf [ GroupQueries . GetApiStruct ] ) < nl > + ActorSerializer . register ( 21008 , classOf [ GroupQueries . GetApiStructResponse ] ) < nl > < nl > ActorSerializer . register ( 22003 , classOf [ GroupEvents . UserInvited ] ) < nl > ActorSerializer . register ( 22004 , classOf [ GroupEvents . UserJoined ] ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala < nl > index f58914d . . 1fc3f06 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala < nl > @ @ - 43 , 6 + 43 , 8 @ @ final class SeqUpdatesExtensionImpl ( < nl > private implicit val system : ActorSystem = _ system < nl > private implicit lazy val db : Database = DbExtension ( system ) . db < nl > < nl > + SeqUpdatesManager . register ( ) < nl > + < nl > lazy val region : SeqUpdatesManagerRegion = SeqUpdatesManagerRegion . start ( ) ( system , gpm , apm ) < nl > < nl > def getFatData ( < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > index b8c35f6 . . 4c42aa0 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala < nl > @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . push < nl > < nl > import java . nio . ByteBuffer < nl > < nl > - import im . actor . server . util . AnyRefLogSource < nl > + import im . actor . server . commons . serialization . ActorSerializer < nl > < nl > import scala . annotation . tailrec < nl > import scala . concurrent . _ < nl > @ @ - 18 , 7 + 18 , 7 @ @ import im . actor . api . rpc . peers . { PeerType , Peer } < nl > import im . actor . api . { rpc ⇒ api } < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . models . sequence < nl > - import im . actor . server . sequence . SeqState < nl > + import im . actor . server . sequence . { SeqStateDate , SeqState } < nl > import im . actor . server . user . { UserOffice , UserViewRegion } < nl > import im . actor . server . { models , persist ⇒ p } < nl > < nl > @ @ - 34 , 6 + 34 , 11 @ @ object SeqUpdatesManager { < nl > / / TODO : configurable < nl > private implicit val OperationTimeout = Timeout ( 30 . seconds ) < nl > < nl > + def register ( ) : Unit = { < nl > + ActorSerializer . register ( 60001 , classOf [ SeqState ] ) < nl > + ActorSerializer . register ( 60002 , classOf [ SeqStateDate ] ) < nl > + } < nl > + < nl > def getSeqState ( authId : Long ) ( implicit ext : SeqUpdatesExtension , ec : ExecutionContext ) : Future [ SeqState ] = < nl > ext . region . ref . ask ( Envelope ( authId , GetSequenceState ) ) ( OperationTimeout ) . mapTo [ SeqState ] < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > index 1f6e847 . . b3ed7b2 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ < nl > sealed trait UserExtension extends Extension < nl > < nl > final class UserExtensionImpl ( system : ActorSystem ) extends UserExtension { < nl > + UserProcessor . register ( ) < nl > + < nl > lazy val processorRegion : UserProcessorRegion = UserProcessorRegion . start ( ) ( system ) < nl > lazy val viewRegion : UserViewRegion = UserViewRegion ( processorRegion . ref ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > index d506745 . . ac89e49 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > @ @ - 102 , 6 + 102 , 8 @ @ object UserProcessor { < nl > ActorSerializer . register ( 11004 , classOf [ UserQueries . GetContactRecordsResponse ] ) < nl > ActorSerializer . register ( 11005 , classOf [ UserQueries . CheckAccessHash ] ) < nl > ActorSerializer . register ( 11006 , classOf [ UserQueries . CheckAccessHashResponse ] ) < nl > + ActorSerializer . register ( 11007 , classOf [ UserQueries . GetApiStruct ] ) < nl > + ActorSerializer . register ( 11008 , classOf [ UserQueries . GetApiStructResponse ] ) < nl > < nl > ActorSerializer . register ( 12001 , classOf [ UserEvents . AuthAdded ] ) < nl > ActorSerializer . register ( 12002 , classOf [ UserEvents . AuthRemoved ] ) < nl > diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > index ccdd66e . . 3ae4734 100644 < nl > - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > @ @ - 93 , 12 + 93 , 10 @ @ object Main extends App { < nl > case _ ⇒ throw new Exception ( " " " Invalid activation . default - service value provided : valid options : " internal " , actor - activation " " " ) < nl > } < nl > < nl > - Session . startRegion ( < nl > + implicit val sessionRegion = Session . startRegion ( < nl > Some ( Session . props ( mediator ) ) < nl > ) < nl > < nl > - implicit val sessionRegion = Session . startRegionProxy ( ) < nl > - < nl > RichMessageWorker . startWorker ( richMessageConfig , mediator ) < nl > < nl > implicit val oauth2Service = new GoogleProvider ( oauth2GoogleConfig ) < nl > diff - - git a / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala b / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala < nl > index 2e3a937 . . 2dd469e 100644 < nl > - - - a / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala < nl > + + + b / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala < nl > @ @ - 2 , 11 + 2 , 6 @ @ package im . actor . server . util < nl > < nl > import java . io . File < nl > < nl > - import scala . concurrent . duration . _ < nl > - import scala . concurrent . forkjoin . ThreadLocalRandom < nl > - import scala . concurrent . { ExecutionContext , Future } < nl > - import scala . util . Try < nl > - < nl > import akka . actor . _ < nl > import com . amazonaws . HttpMethod < nl > import com . amazonaws . auth . BasicAWSCredentials < nl > @ @ - 16 , 13 + 11 , 25 @ @ import com . amazonaws . services . s3 . transfer . model . UploadResult < nl > import com . github . dwhjames . awswrap . s3 . { AmazonS3ScalaClient , FutureTransfer } < nl > import com . github . kxbmap . configs . _ < nl > import com . typesafe . config . { Config , ConfigFactory } < nl > - import slick . driver . PostgresDriver . api . _ < nl > - < nl > - import im . actor . api . rpc . files . FileLocation < nl > + import im . actor . api . rpc . files . { FileLocation ⇒ ApiFileLocation } < nl > + import im . actor . server . commons . serialization . ActorSerializer < nl > import im . actor . server . db . DbExtension < nl > + import im . actor . server . file . { Avatar , AvatarImage , FileLocation } < nl > import im . actor . server . { models , persist } < nl > + import slick . driver . PostgresDriver . api . _ < nl > < nl > - class S3StorageExtensionImpl ( val s3StorageAdapter : S3StorageAdapter ) extends Extension < nl > + import scala . concurrent . duration . _ < nl > + import scala . concurrent . forkjoin . ThreadLocalRandom < nl > + import scala . concurrent . { ExecutionContext , Future } < nl > + import scala . util . Try < nl > + < nl > + class S3StorageExtensionImpl ( val s3StorageAdapter : S3StorageAdapter ) extends Extension { < nl > + / / TODO : move to a proper place < nl > + < nl > + ActorSerializer . register ( 80001 , classOf [ FileLocation ] ) < nl > + ActorSerializer . register ( 80002 , classOf [ AvatarImage ] ) < nl > + ActorSerializer . register ( 80003 , classOf [ Avatar ] ) < nl > + } < nl > < nl > object S3StorageExtension extends ExtensionId [ S3StorageExtensionImpl ] with ExtensionIdProvider { < nl > override def lookup = S3StorageExtension < nl > @ @ - 62 , 10 + 69 , 10 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext < nl > val s3Client = new AmazonS3ScalaClient ( awsCredentials ) < nl > val transferManager = new TransferManager ( awsCredentials ) < nl > < nl > - override def uploadFile ( name : String , file : File ) : DBIO [ FileLocation ] = < nl > + override def uploadFile ( name : String , file : File ) : DBIO [ ApiFileLocation ] = < nl > uploadFile ( bucketName , name , file ) < nl > < nl > - override def uploadFileF ( name : String , file : File ) : Future [ FileLocation ] = < nl > + override def uploadFileF ( name : String , file : File ) : Future [ ApiFileLocation ] = < nl > db . run ( uploadFile ( name , file ) ) < nl > < nl > override def downloadFile ( id : Long ) : DBIO [ Option [ File ] ] = { < nl > @ @ - 102 , 7 + 109 , 7 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext < nl > } yield file < nl > } < nl > < nl > - private def uploadFile ( bucketName : String , name : String , file : File ) : DBIO [ FileLocation ] = { < nl > + private def uploadFile ( bucketName : String , name : String , file : File ) : DBIO [ ApiFileLocation ] = { < nl > val rnd = ThreadLocalRandom . current ( ) < nl > val id = rnd . nextLong ( ) < nl > val accessSalt = ACLUtils . nextAccessSalt ( rnd ) < nl > @ @ - 112 , 7 + 119 , 7 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext < nl > _ ← persist . File . create ( id , accessSalt , FileUtils . s3Key ( id , name ) ) < nl > _ ← DBIO . from ( s3Upload ( bucketName , id , name , file ) ) < nl > _ ← DBIO . from ( sizeF ) flatMap ( s ⇒ persist . File . setUploaded ( id , s , name ) ) < nl > - } yield FileLocation ( id , ACLUtils . fileAccessHash ( id , accessSalt ) ) < nl > + } yield ApiFileLocation ( id , ACLUtils . fileAccessHash ( id , accessSalt ) ) < nl > } < nl > < nl > private def s3Upload ( bucketName : String , id : Long , name : String , file : File ) : Future [ UploadResult ] = {

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 index 33d1833 . . 6d304ea 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 @ @ - 302 , 6 + 302 , 7 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { 
 } else { 
 persist ( HistoryBecameShared ( Instant . now , cmd . clientUserId ) ) { evt ⇒ 
 val newState = commit ( evt ) 
 + log . debug ( " History of group { } became shared " , groupId ) 
 
 val memberIds = newState . memberIds 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 index e1ed6e7 . . e6de46c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 @ @ - 135 , 7 + 135 , 10 @ @ trait GroupQueryHandlers { 
 canEditShortName = Some ( state . permissions . canEditShortName ( clientUserId ) ) , 
 canEditAdminList = Some ( state . permissions . canEditAdmins ( clientUserId ) ) , 
 canViewAdminList = Some ( state . permissions . canViewAdmins ( clientUserId ) ) , 
 - canEditAdminSettings = Some ( state . permissions . canEditAdminSettings ( clientUserId ) ) 
 + canEditAdminSettings = Some ( state . permissions . canEditAdminSettings ( clientUserId ) ) , 
 + canInviteViaLink = None , 
 + canDelete = None , 
 + canLeave = None 
 ) 
 ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 index 80b6fb0 . . 77ec517 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 @ @ - 108 , 7 + 108 , 7 @ @ private [ group ] final case class GroupState ( 
 avatar : Option [ Avatar ] , 
 topic : Option [ String ] , 
 shortName : Option [ String ] , 
 - groupType : GroupType , / / TODO : rename to groupType 
 + groupType : GroupType , 
 isHidden : Boolean , 
 isHistoryShared : Boolean , 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala 
 index 0e64b70 . . e8d3b80 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / http / GroupsHttpHandler . scala 
 @ @ - 6 , 36 + 6 , 33 @ @ import akka . http . scaladsl . model . StatusCodes . _ 
 import akka . http . scaladsl . server . Directives . _ 
 import akka . http . scaladsl . server . Route 
 import akka . http . scaladsl . util . FastFuture 
 - import im . actor . server . api . http . { HttpHandler , json } 
 import im . actor . server . api . http . json . JsonFormatters . { errorsFormat , groupInviteInfoFormat } 
 + import im . actor . server . api . http . { HttpHandler , json } 
 import im . actor . server . db . DbExtension 
 - import im . actor . server . file . ImageUtils . getAvatar 
 import im . actor . server . file . { Avatar , FileLocation , FileStorageExtension } 
 import im . actor . server . group . GroupExtension 
 - import im . actor . server . model . AvatarData 
 + import im . actor . server . names . GlobalNamesStorageKeyValueStorage 
 import im . actor . server . persist . _ 
 import im . actor . server . persist . files . FileRepo 
 import im . actor . server . user . UserExtension 
 import play . api . libs . json . Json 
 - import slick . driver . PostgresDriver . api . _ 
 
 import scala . concurrent . Future 
 - import scala . concurrent . duration . _ 
 import scala . util . { Failure , Success } 
 
 private [ group ] final class GroupsHttpHandler ( ) ( implicit system : ActorSystem ) extends HttpHandler { 
 
 import im . actor . server . ApiConversions . _ 
 - 
 import system . dispatcher 
 private val db = DbExtension ( system ) . db 
 private val fsAdapter = FileStorageExtension ( system ) . fsAdapter 
 + private val globalNamesStorage = new GlobalNamesStorageKeyValueStorage 
 
 override def routes : Route = 
 defaultVersion { 
 - path ( " groups " / " invites " / Segment ) { token ⇒ 
 + path ( " groups " / " invites " / Segment ) { tokenOrShortName ⇒ 
 get { 
 - onComplete ( retrieve ( token ) ) { 
 + onComplete ( retrieve ( tokenOrShortName ) ) { 
 case Success ( Right ( result ) ) ⇒ 
 complete ( HttpResponse ( 
 status = OK , 
 @ @ - 52 , 25 + 49 , 36 @ @ private [ group ] final class GroupsHttpHandler ( ) ( implicit system : ActorSystem ) ext 
 } 
 } 
 
 - private def retrieve ( token : String ) : Future [ Either [ json . Errors , json . GroupInviteInfo ] ] = for { 
 - optTokenInfo ← db . run ( GroupInviteTokenRepo . findByToken ( token ) ) 
 - result ← optTokenInfo map { tokenInfo ⇒ 
 - for { 
 - groupInfo ← GroupExtension ( system ) . getApiStruct ( tokenInfo . groupId , 0 ) 
 - groupTitle = groupInfo . title 
 - groupAvatar = groupInfo . avatar 
 - groupAvatarUrls ← avatarUrls ( groupAvatar ) 
 + private def retrieve ( tokenOrShortName : String ) : Future [ Either [ json . Errors , json . GroupInviteInfo ] ] = for { 
 + byToken ← db . run ( GroupInviteTokenRepo . findByToken ( tokenOrShortName ) ) 
 + byGroupId ← globalNamesStorage . getGroupId ( tokenOrShortName ) 
 + optInviteData = ( byToken , byGroupId ) match { 
 + case ( Some ( tokenInfo ) , _ ) ⇒ Some ( tokenInfo . groupId → Some ( tokenInfo . creatorId ) ) 
 + case ( _ , Some ( groupId ) ) ⇒ Some ( groupId → None ) 
 + case _ ⇒ None 
 + } 
 + result ← optInviteData map { 
 + case ( groupId , optInviterId ) ⇒ 
 + for { 
 + groupInfo ← GroupExtension ( system ) . getApiStruct ( groupId , 0 ) 
 + groupTitle = groupInfo . title 
 + groupAvatar = groupInfo . avatar 
 + groupAvatarUrls ← avatarUrls ( groupAvatar ) 
 
 - inviterInfo ← UserExtension ( system ) . getApiStruct ( tokenInfo . creatorId , 0 , 0L ) 
 - inviterName = inviterInfo . name 
 - inviterAvatar = inviterInfo . avatar 
 - inviterAvatarUrls ← avatarUrls ( inviterAvatar ) 
 - } yield Right ( 
 - json . GroupInviteInfo ( 
 - group = json . Group ( groupTitle , groupAvatarUrls ) , 
 - inviter = json . User ( inviterName , inviterAvatarUrls ) 
 + optInviterInfo ← optInviterId match { 
 + case Some ( inviterId ) ⇒ 
 + for { 
 + user ← UserExtension ( system ) . getApiStruct ( inviterId , 0 , 0L ) 
 + avatars ← avatarUrls ( user . avatar ) 
 + } yield Some ( json . InviterInfo ( user . name , avatars ) ) 
 + case None ⇒ FastFuture . successful ( None ) 
 + } 
 + } yield Right ( 
 + json . GroupInviteInfo ( 
 + group = json . GroupInfo ( groupTitle , groupAvatarUrls ) , 
 + inviter = optInviterInfo 
 + ) 
 ) 
 - ) 
 } getOrElse FastFuture . successful ( Left ( json . Errors ( " Expired or invalid token " ) ) ) 
 } yield result 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala 
 index a24cc6b . . d6cae1b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / names / GlobalNamesStorage . scala 
 @ @ - 29 , 12 + 29 , 12 @ @ final class GlobalNamesStorageKeyValueStorage ( implicit system : ActorSystem ) { 
 ( ext . db , ext . connector ) 
 } 
 
 - def getUserOwnerId ( name : String ) : Future [ Option [ Int ] ] = 
 + def getUserId ( name : String ) : Future [ Option [ Int ] ] = 
 getOwner ( name ) map ( _ . collect { 
 case GlobalNameOwner ( OwnerType . User , userId ) ⇒ userId 
 } ) 
 
 - def getGroupOwnerId ( name : String ) : Future [ Option [ Int ] ] = 
 + def getGroupId ( name : String ) : Future [ Option [ Int ] ] = 
 getOwner ( name ) map ( _ . collect { 
 case GlobalNameOwner ( OwnerType . Group , groupId ) ⇒ groupId 
 } ) 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 index 7d1d341 . . c1d5931 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 @ @ - 6 , 15 + 6 , 15 @ @ import akka . actor . ActorSystem 
 import akka . event . Logging 
 import akka . http . scaladsl . util . FastFuture 
 import akka . stream . Materializer 
 - import akka . stream . scaladsl . { FileIO , Source } 
 + import akka . stream . scaladsl . { FileIO , Source } 
 import akka . util . ByteString 
 - import better . files . { File , _ } 
 + import better . files . { File , _ } 
 import im . actor . server . db . DbExtension 
 import im . actor . server . file . UnsafeFileName 
 import im . actor . server . persist . files . FileRepo 
 
 - import scala . concurrent . { ExecutionContext , Future , blocking } 
 - import scala . util . { Failure , Success } 
 + import scala . concurrent . { ExecutionContext , Future , blocking } 
 + import scala . util . { Failure , Success } 
 
 trait FileStorageOperations extends LocalUploadKeyImplicits { 
 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonFormatters . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonFormatters . scala 
 index 348aaa1 . . 1c20383 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonFormatters . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonFormatters . scala 
 @ @ - 11 , 8 + 11 , 8 @ @ object JsonFormatters { 
 ( JsPath \ " image _ url " ) . read [ String ] . map [ Content ] { Image } 
 
 implicit val avatarUrlsFormat : Format [ AvatarUrls ] = Json . format [ AvatarUrls ] 
 - implicit val userFormat : Format [ User ] = Json . format [ User ] 
 - implicit val groupFormat : Format [ Group ] = Json . format [ Group ] 
 + implicit val userFormat : Format [ InviterInfo ] = Json . format [ InviterInfo ] 
 + implicit val groupFormat : Format [ GroupInfo ] = Json . format [ GroupInfo ] 
 implicit val groupInviteInfoFormat : Format [ GroupInviteInfo ] = Json . format [ GroupInviteInfo ] 
 implicit val errorsFormat : Format [ Errors ] = Json . format [ Errors ] 
 
 @ @ - 22 , 4 + 22 , 4 @ @ object JsonFormatters { 
 
 implicit val reverseHookResponseFormat : Format [ ReverseHookResponse ] = Json . format [ ReverseHookResponse ] 
 implicit val statusFormat : Format [ Status ] = Json . format [ Status ] 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / models . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / models . scala 
 index 2758eba . . fc84bec 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / models . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / json / models . scala 
 @ @ - 5 , 9 + 5 , 9 @ @ case class Text ( text : String ) extends Content 
 case class Image ( imageUrl : String ) extends Content 
 case class Document ( documentUrl : String ) extends Content 
 
 - case class Group ( title : String , avatars : Option [ AvatarUrls ] ) 
 - case class User ( name : String , avatars : Option [ AvatarUrls ] ) 
 - case class GroupInviteInfo ( group : Group , inviter : User ) 
 + case class GroupInfo ( title : String , avatars : Option [ AvatarUrls ] ) 
 + case class InviterInfo ( name : String , avatars : Option [ AvatarUrls ] ) 
 + case class GroupInviteInfo ( group : GroupInfo , inviter : Option [ InviterInfo ] ) 
 case class AvatarUrls ( small : Option [ String ] , large : Option [ String ] , full : Option [ String ] ) 
 
 case class Errors ( message : String ) 
 @ @ - 17 , 4 + 17 , 4 @ @ case class ReverseHook ( url : String ) 
 case class Status ( status : String ) 
 case class ReverseHookResponse ( id : Int , url : Option [ String ] ) 
 
 - final case class ServerInfo ( projectName : String , endpoints : List [ String ] ) 
 \ No newline at end of file 
 + final case class ServerInfo ( projectName : String , endpoints : List [ String ] ) 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 index 6d46810 . . e5aeda7 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 @ @ - 93 , 7 + 93 , 6 @ @ object GroupRepo { 
 ) 
 } 
 
 - @ deprecated ( " Public groups are deprecated in Group V2 API " , " 2016 - 06 - 05 " ) 
 def findPublic = 
 groups . filter ( _ . isPublic = = = true ) . map ( _ . asGroup ) . result 
 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 index 4b2dd15 . . 4a84713 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 @ @ - 67 , 7 + 67 , 7 @ @ trait AuthHelpers extends Helpers { 
 protected def newUsernameSignUp ( transaction : AuthUsernameTransaction , name : String , sex : Option [ ApiSex ] ) : Result [ ( Int , String ) Xor User ] = { 
 val username = transaction . username 
 for { 
 - optUserId ← fromFuture ( globalNamesStorage . getUserOwnerId ( username ) ) 
 + optUserId ← fromFuture ( globalNamesStorage . getUserId ( username ) ) 
 result ← optUserId match { 
 case Some ( id ) ⇒ point ( Xor . left ( ( id , " " ) ) ) 
 case None ⇒ newUser ( name , " " , sex , username = Some ( username ) ) 
 @ @ - 168 , 7 + 168 , 7 @ @ trait AuthHelpers extends Helpers { 
 } yield ( emailModel . userId , " " ) 
 case u : AuthUsernameTransaction ⇒ 
 for { 
 - userId ← fromFutureOption ( AuthErrors . UsernameUnoccupied ) ( globalNamesStorage . getUserOwnerId ( u . username ) ) 
 + userId ← fromFutureOption ( AuthErrors . UsernameUnoccupied ) ( globalNamesStorage . getUserId ( u . username ) ) 
 } yield ( userId , " " ) 
 case _ : AuthAnonymousTransaction ⇒ 
 fromEither ( Xor . left ( AuthErrors . NotValidated ) ) 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 index 4f49ce9 . . bfa32c5 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 @ @ - 202 , 7 + 202 , 7 @ @ final class AuthServiceImpl ( val oauth2Service : GoogleProvider ) ( 
 val action = 
 for { 
 normUsername ← fromOption ( ProfileRpcErrors . NicknameInvalid ) ( StringUtils . normalizeUsername ( username ) ) 
 - optUserId ← fromFuture ( globalNamesStorage . getUserOwnerId ( username ) ) 
 + optUserId ← fromFuture ( globalNamesStorage . getUserId ( username ) ) 
 _ ← optUserId map ( id ⇒ forbidDeletedUser ( id ) ) getOrElse point ( ( ) ) 
 optAuthTransaction ← fromDBIO ( AuthUsernameTransactionRepo . find ( username , deviceHash ) ) 
 transactionHash ← optAuthTransaction match { 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala 
 index 362e3fc . . 5ac4370 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / contacts / ContactsServiceImpl . scala 
 @ @ - 172 , 7 + 172 , 7 @ @ class ContactsServiceImpl ( implicit actorSystem : ActorSystem ) 
 
 private def findByNickname ( nickname : String , client : AuthorizedClientData ) : Result [ Vector [ ApiUser ] ] = { 
 for { 
 - optUserId ← fromFuture ( globalNamesStorage . getUserOwnerId ( nickname ) ) 
 + optUserId ← fromFuture ( globalNamesStorage . getUserId ( nickname ) ) 
 structs ← fromFuture ( Future . sequence ( optUserId . toSeq map ( userId ⇒ userExt . getApiStruct ( userId , client . userId , client . authId ) ) ) ) 
 } yield structs . toVector 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 index 89f4ce8 . . fc654f9 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 @ @ - 369 , 7 + 369 , 7 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act 
 } yield info . groupId → Some ( info . creatorId ) 
 case Xor . Right ( groupName ) ⇒ 
 for { 
 - groupId ← fromFutureOption ( GroupRpcErrors . InvalidInviteGroup ) ( globalNamesStorage . getGroupOwnerId ( groupName ) ) 
 + groupId ← fromFutureOption ( GroupRpcErrors . InvalidInviteGroup ) ( globalNamesStorage . getGroupId ( groupName ) ) 
 } yield groupId → None 
 } 
 ( groupId , optInviter ) = joinInfo 
 @ @ - 459 , 6 + 459 , 8 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act 
 } 
 } 
 
 + protected def doHandleDeleteGroup ( groupPeer : ApiGroupOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = ? ? ? 
 + 
 private def usersOrPeers ( userIds : Vector [ Int ] , stripEntities : Boolean ) ( implicit client : AuthorizedClientData ) : Future [ ( Vector [ ApiUser ] , Vector [ ApiUserOutPeer ] ) ] = 
 if ( stripEntities ) { 
 val users = Vector . empty [ ApiUser ] 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala 
 index 031d453 . . bb5ad0d 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala 
 @ @ - 56 , 6 + 56 , 8 @ @ final class HttpApiFrontendSpec 
 
 " Groups handler " should " respond with JSON message to group invite info with correct invite token " in t . groupInvitesOk ( ) 
 
 + it should " respond with JSON message without inviter , when we join via group short name " in t . groupInvitesShortName ( ) 
 + 
 it should " respond with JSON message with avatar full links to group invite info with correct invite token " in t . groupInvitesAvatars1 ( ) 
 
 it should " respond with JSON message with avatar partial links to group invite info with correct invite token " in t . groupInvitesAvatars2 ( ) 
 @ @ - 316 , 6 + 318 , 22 @ @ final class HttpApiFrontendSpec 
 } 
 } 
 
 + def groupInvitesShortName ( ) = { 
 + val shortName = " division " 
 + whenReady ( groupExt . updateShortName ( groupOutPeer . groupId , user1 . id , authId1 , Some ( shortName ) ) ) { _ ⇒ 
 + val request = HttpRequest ( 
 + method = GET , 
 + uri = s " $ { config . baseUri } / v1 / groups / invites / $ shortName " 
 + ) 
 + val resp = singleRequest ( request ) . futureValue 
 + resp . status shouldEqual OK 
 + val body = resp . entity . asString 
 + val response = Json . parse ( body ) 
 + ( response \ " group " \ " title " ) . as [ String ] shouldEqual groupName 
 + ( response \ " inviter " \ " name " ) . toOption shouldEqual None 
 + } 
 + } 
 + 
 def groupInvitesAvatars1 ( ) = { 
 val avatarData = Files . readAllBytes ( Paths . get ( getClass . getResource ( " / valid - avatar . jpg " ) . toURI ) ) 
 val fileLocation = db . run ( fsAdapter . uploadFile ( UnsafeFileName ( " avatar " ) , avatarData ) ) . futureValue

NEAREST DIFF:
diff - - git a / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala b / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala 
 index 25b1496 . . 4f514b0 100644 
 - - - a / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala 
 + + + b / actor - server / actor - commons - api / src / main / scala / im / actor / server / api / TypeMappers . scala 
 @ @ - 55 , 8 + 55 , 13 @ @ private [ api ] trait MessageMapper { 
 ByteString . copyFrom ( group . toByteArray ) 
 } 
 
 - private def applyPeer ( buf : ByteString ) : Peer = 
 - Peer . parseFrom ( CodedInputStream . newInstance ( buf . asReadOnlyByteBuffer ( ) ) ) . right . get 
 + private def applyPeer ( bytes : ByteString ) : Peer = { 
 + if ( bytes . size ( ) > 0 ) { 
 + Peer . parseFrom ( CodedInputStream . newInstance ( bytes . asReadOnlyByteBuffer ( ) ) ) . right . get 
 + } else { 
 + null 
 + } 
 + } 
 
 private def unapplyPeer ( peer : Peer ) : ByteString = 
 ByteString . copyFrom ( peer . toByteArray ) 
 diff - - git a / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala b / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala 
 index 780e6a7 . . 5ebe48c 100644 
 - - - a / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala 
 + + + b / actor - server / actor - commons - base / src / main / scala / im / actor / server / commons / ActorConfig . scala 
 @ @ - 1 , 31 + 1 , 15 @ @ 
 package im . actor . server . commons 
 
 - import com . typesafe . config . { ConfigFactory , Config } 
 + import com . typesafe . config . { Config , ConfigFactory } 
 
 object ActorConfig { 
 def load ( ) : Config = { 
 ConfigFactory . parseString ( 
 - s " " " 
 + " " " 
 | akka { 
 | actor { 
 | provider : " akka . cluster . ClusterActorRefProvider " 
 | } 
 - | 
 - | remote { 
 - | netty . tcp { 
 - | hostname : " 127 . 0 . 0 . 1 " 
 - | port : 2553 
 - | } 
 - | } 
 - | 
 - | cluster { 
 - | seed - nodes : [ " akka . tcp : / / actor - server @ 127 . 0 . 0 . 1 : 2553 " ] 
 - | } 
 - | 
 - | persistence { 
 - | journal . plugin : " jdbc - journal " 
 - | snapshot - store . plugin : " jdbc - snapshot - store " 
 - | } 
 | } 
 | 
 | jdbc - connection { 
 @ @ - 35 , 6 + 19 , 16 @ @ object ActorConfig { 
 " " " . stripMargin 
 ) 
 . withFallback ( ConfigFactory . load ( ) ) 
 + . withFallback ( ConfigFactory . parseString ( 
 + " " " 
 + | akka { 
 + | persistence { 
 + | journal . plugin : " jdbc - journal " 
 + | snapshot - store . plugin : " jdbc - snapshot - store " 
 + | } 
 + | } 
 + " " " . stripMargin 
 + ) ) 
 . resolve ( ) 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala 
 index 900f96e . . 9807973 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogExtension . scala 
 @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ 
 sealed trait GroupDialogExtension extends Extension 
 
 final class GroupDialogExtensionImpl ( system : ActorSystem ) extends GroupDialogExtension { 
 + GroupDialog . register ( ) 
 + 
 lazy val region : GroupDialogRegion = GroupDialogRegion . start ( ) ( system ) 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala 
 index 79bf6f5 . . d5d79d6 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogExtension . scala 
 @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ 
 sealed trait PrivateDialogExtension extends Extension 
 
 final class PrivateDialogExtensionImpl ( system : ActorSystem ) extends PrivateDialogExtension { 
 + PrivateDialog . register ( ) 
 + 
 lazy val region : PrivateDialogRegion = PrivateDialogRegion . start ( ) ( system ) 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 index 4b344bc . . 6dd3eb7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ 
 sealed trait GroupExtension extends Extension 
 
 final class GroupExtensionImpl ( system : ActorSystem ) extends GroupExtension { 
 + GroupProcessor . register ( ) 
 + 
 lazy val processorRegion : GroupProcessorRegion = GroupProcessorRegion . start ( ) ( system ) 
 lazy val viewRegion : GroupViewRegion = GroupViewRegion ( processorRegion . ref ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index ce3eec3 . . 458a489 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 7 , 11 + 7 , 10 @ @ import akka . persistence . { RecoveryCompleted , RecoveryFailure } 
 import akka . util . Timeout 
 import im . actor . server . commons . serialization . ActorSerializer 
 import im . actor . server . db . DbExtension 
 + import im . actor . server . dialog . group . { GroupDialogExtension , GroupDialogRegion } 
 import im . actor . server . event . TSEvent 
 import im . actor . server . file . Avatar 
 import im . actor . server . office . { PeerProcessor , ProcessorState , StopOffice } 
 - import im . actor . server . dialog . group . GroupDialogExtension 
 - import im . actor . server . dialog . group . GroupDialogRegion 
 import im . actor . server . push . SeqUpdatesExtension 
 import im . actor . server . user . { UserExtension , UserProcessorRegion , UserViewRegion } 
 import im . actor . server . util . { FileStorageAdapter , S3StorageExtension } 
 @ @ - 84 , 6 + 83 , 8 @ @ object GroupProcessor { 
 ActorSerializer . register ( 21004 , classOf [ GroupQueries . CheckAccessHashResponse ] ) 
 ActorSerializer . register ( 21005 , classOf [ GroupQueries . GetMembers ] ) 
 ActorSerializer . register ( 21006 , classOf [ GroupQueries . GetMembersResponse ] ) 
 + ActorSerializer . register ( 21007 , classOf [ GroupQueries . GetApiStruct ] ) 
 + ActorSerializer . register ( 21008 , classOf [ GroupQueries . GetApiStructResponse ] ) 
 
 ActorSerializer . register ( 22003 , classOf [ GroupEvents . UserInvited ] ) 
 ActorSerializer . register ( 22004 , classOf [ GroupEvents . UserJoined ] ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala 
 index f58914d . . 1fc3f06 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesExtension . scala 
 @ @ - 43 , 6 + 43 , 8 @ @ final class SeqUpdatesExtensionImpl ( 
 private implicit val system : ActorSystem = _ system 
 private implicit lazy val db : Database = DbExtension ( system ) . db 
 
 + SeqUpdatesManager . register ( ) 
 + 
 lazy val region : SeqUpdatesManagerRegion = SeqUpdatesManagerRegion . start ( ) ( system , gpm , apm ) 
 
 def getFatData ( 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 index b8c35f6 . . 4c42aa0 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / push / SeqUpdatesManager . scala 
 @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . push 
 
 import java . nio . ByteBuffer 
 
 - import im . actor . server . util . AnyRefLogSource 
 + import im . actor . server . commons . serialization . ActorSerializer 
 
 import scala . annotation . tailrec 
 import scala . concurrent . _ 
 @ @ - 18 , 7 + 18 , 7 @ @ import im . actor . api . rpc . peers . { PeerType , Peer } 
 import im . actor . api . { rpc ⇒ api } 
 import im . actor . server . db . DbExtension 
 import im . actor . server . models . sequence 
 - import im . actor . server . sequence . SeqState 
 + import im . actor . server . sequence . { SeqStateDate , SeqState } 
 import im . actor . server . user . { UserOffice , UserViewRegion } 
 import im . actor . server . { models , persist ⇒ p } 
 
 @ @ - 34 , 6 + 34 , 11 @ @ object SeqUpdatesManager { 
 / / TODO : configurable 
 private implicit val OperationTimeout = Timeout ( 30 . seconds ) 
 
 + def register ( ) : Unit = { 
 + ActorSerializer . register ( 60001 , classOf [ SeqState ] ) 
 + ActorSerializer . register ( 60002 , classOf [ SeqStateDate ] ) 
 + } 
 + 
 def getSeqState ( authId : Long ) ( implicit ext : SeqUpdatesExtension , ec : ExecutionContext ) : Future [ SeqState ] = 
 ext . region . ref . ask ( Envelope ( authId , GetSequenceState ) ) ( OperationTimeout ) . mapTo [ SeqState ] 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 index 1f6e847 . . b3ed7b2 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 @ @ - 5 , 6 + 5 , 8 @ @ import akka . actor . _ 
 sealed trait UserExtension extends Extension 
 
 final class UserExtensionImpl ( system : ActorSystem ) extends UserExtension { 
 + UserProcessor . register ( ) 
 + 
 lazy val processorRegion : UserProcessorRegion = UserProcessorRegion . start ( ) ( system ) 
 lazy val viewRegion : UserViewRegion = UserViewRegion ( processorRegion . ref ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 index d506745 . . ac89e49 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 @ @ - 102 , 6 + 102 , 8 @ @ object UserProcessor { 
 ActorSerializer . register ( 11004 , classOf [ UserQueries . GetContactRecordsResponse ] ) 
 ActorSerializer . register ( 11005 , classOf [ UserQueries . CheckAccessHash ] ) 
 ActorSerializer . register ( 11006 , classOf [ UserQueries . CheckAccessHashResponse ] ) 
 + ActorSerializer . register ( 11007 , classOf [ UserQueries . GetApiStruct ] ) 
 + ActorSerializer . register ( 11008 , classOf [ UserQueries . GetApiStructResponse ] ) 
 
 ActorSerializer . register ( 12001 , classOf [ UserEvents . AuthAdded ] ) 
 ActorSerializer . register ( 12002 , classOf [ UserEvents . AuthRemoved ] ) 
 diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 index ccdd66e . . 3ae4734 100644 
 - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 @ @ - 93 , 12 + 93 , 10 @ @ object Main extends App { 
 case _ ⇒ throw new Exception ( " " " Invalid activation . default - service value provided : valid options : " internal " , actor - activation " " " ) 
 } 
 
 - Session . startRegion ( 
 + implicit val sessionRegion = Session . startRegion ( 
 Some ( Session . props ( mediator ) ) 
 ) 
 
 - implicit val sessionRegion = Session . startRegionProxy ( ) 
 - 
 RichMessageWorker . startWorker ( richMessageConfig , mediator ) 
 
 implicit val oauth2Service = new GoogleProvider ( oauth2GoogleConfig ) 
 diff - - git a / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala b / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala 
 index 2e3a937 . . 2dd469e 100644 
 - - - a / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala 
 + + + b / actor - server / actor - utils / src / main / scala / im / actor / server / util / S3StorageAdapter . scala 
 @ @ - 2 , 11 + 2 , 6 @ @ package im . actor . server . util 
 
 import java . io . File 
 
 - import scala . concurrent . duration . _ 
 - import scala . concurrent . forkjoin . ThreadLocalRandom 
 - import scala . concurrent . { ExecutionContext , Future } 
 - import scala . util . Try 
 - 
 import akka . actor . _ 
 import com . amazonaws . HttpMethod 
 import com . amazonaws . auth . BasicAWSCredentials 
 @ @ - 16 , 13 + 11 , 25 @ @ import com . amazonaws . services . s3 . transfer . model . UploadResult 
 import com . github . dwhjames . awswrap . s3 . { AmazonS3ScalaClient , FutureTransfer } 
 import com . github . kxbmap . configs . _ 
 import com . typesafe . config . { Config , ConfigFactory } 
 - import slick . driver . PostgresDriver . api . _ 
 - 
 - import im . actor . api . rpc . files . FileLocation 
 + import im . actor . api . rpc . files . { FileLocation ⇒ ApiFileLocation } 
 + import im . actor . server . commons . serialization . ActorSerializer 
 import im . actor . server . db . DbExtension 
 + import im . actor . server . file . { Avatar , AvatarImage , FileLocation } 
 import im . actor . server . { models , persist } 
 + import slick . driver . PostgresDriver . api . _ 
 
 - class S3StorageExtensionImpl ( val s3StorageAdapter : S3StorageAdapter ) extends Extension 
 + import scala . concurrent . duration . _ 
 + import scala . concurrent . forkjoin . ThreadLocalRandom 
 + import scala . concurrent . { ExecutionContext , Future } 
 + import scala . util . Try 
 + 
 + class S3StorageExtensionImpl ( val s3StorageAdapter : S3StorageAdapter ) extends Extension { 
 + / / TODO : move to a proper place 
 + 
 + ActorSerializer . register ( 80001 , classOf [ FileLocation ] ) 
 + ActorSerializer . register ( 80002 , classOf [ AvatarImage ] ) 
 + ActorSerializer . register ( 80003 , classOf [ Avatar ] ) 
 + } 
 
 object S3StorageExtension extends ExtensionId [ S3StorageExtensionImpl ] with ExtensionIdProvider { 
 override def lookup = S3StorageExtension 
 @ @ - 62 , 10 + 69 , 10 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext 
 val s3Client = new AmazonS3ScalaClient ( awsCredentials ) 
 val transferManager = new TransferManager ( awsCredentials ) 
 
 - override def uploadFile ( name : String , file : File ) : DBIO [ FileLocation ] = 
 + override def uploadFile ( name : String , file : File ) : DBIO [ ApiFileLocation ] = 
 uploadFile ( bucketName , name , file ) 
 
 - override def uploadFileF ( name : String , file : File ) : Future [ FileLocation ] = 
 + override def uploadFileF ( name : String , file : File ) : Future [ ApiFileLocation ] = 
 db . run ( uploadFile ( name , file ) ) 
 
 override def downloadFile ( id : Long ) : DBIO [ Option [ File ] ] = { 
 @ @ - 102 , 7 + 109 , 7 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext 
 } yield file 
 } 
 
 - private def uploadFile ( bucketName : String , name : String , file : File ) : DBIO [ FileLocation ] = { 
 + private def uploadFile ( bucketName : String , name : String , file : File ) : DBIO [ ApiFileLocation ] = { 
 val rnd = ThreadLocalRandom . current ( ) 
 val id = rnd . nextLong ( ) 
 val accessSalt = ACLUtils . nextAccessSalt ( rnd ) 
 @ @ - 112 , 7 + 119 , 7 @ @ class S3StorageAdapter ( config : S3StorageAdapterConfig , _ system : ActorSystem ) ext 
 _ ← persist . File . create ( id , accessSalt , FileUtils . s3Key ( id , name ) ) 
 _ ← DBIO . from ( s3Upload ( bucketName , id , name , file ) ) 
 _ ← DBIO . from ( sizeF ) flatMap ( s ⇒ persist . File . setUploaded ( id , s , name ) ) 
 - } yield FileLocation ( id , ACLUtils . fileAccessHash ( id , accessSalt ) ) 
 + } yield ApiFileLocation ( id , ACLUtils . fileAccessHash ( id , accessSalt ) ) 
 } 
 
 private def s3Upload ( bucketName : String , id : Long , name : String , file : File ) : Future [ UploadResult ] = {
