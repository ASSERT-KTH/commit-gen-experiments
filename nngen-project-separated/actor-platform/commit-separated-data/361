BLEU SCORE: 0.14991106946711685

TEST MSG: perf ( core + android ) : Bunch of micro optimizations
GENERATED MSG: feat ( android ) : Actor Push service

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > index 7750ed2 . . 17ba128 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > @ @ - 212 , 22 + 212 , 32 @ @ public class ActorSDK { < nl > < nl > public void createActor ( final Application application ) { < nl > < nl > - / / Debug . startMethodTracing ( " create _ actor9 " ) ; < nl > + / / Debug . startMethodTracing ( " create _ actor11 " ) ; < nl > < nl > this . application = application ; < nl > < nl > + boolean [ ] isLoaded = new boolean [ 1 ] ; < nl > + isLoaded [ 0 ] = false ; < nl > + < nl > / / < nl > / / SDK Tools < nl > / / < nl > < nl > - ImagePipelineConfig config = ImagePipelineConfig . newBuilder ( application ) < nl > - . setDownsampleEnabled ( true ) < nl > - . build ( ) ; < nl > - Fresco . initialize ( application , config ) ; < nl > - / / TODO : Replace < nl > - SmileProcessor emojiProcessor = new SmileProcessor ( application ) ; < nl > + Runtime . dispatch ( ( ) - > { < nl > + ImagePipelineConfig config = ImagePipelineConfig . newBuilder ( application ) < nl > + . setDownsampleEnabled ( true ) < nl > + . build ( ) ; < nl > + Fresco . initialize ( application , config ) ; < nl > + < nl > + SmileProcessor emojiProcessor = new SmileProcessor ( application ) ; < nl > + ActorSystem . system ( ) . addDispatcher ( " voice _ capture _ dispatcher " , 1 ) ; < nl > + synchronized ( isLoaded ) { < nl > + isLoaded [ 0 ] = true ; < nl > + isLoaded . notifyAll ( ) ; < nl > + } < nl > + emojiProcessor . loadEmoji ( ) ; < nl > < nl > - ActorSystem . system ( ) . addDispatcher ( " voice _ capture _ dispatcher " , 1 ) ; < nl > + } ) ; < nl > < nl > / / < nl > / / SDK Configuration < nl > @ @ - 278 , 33 + 288 , 33 @ @ public class ActorSDK { < nl > < nl > this . messenger = new AndroidMessenger ( AndroidContext . getContext ( ) , builder . build ( ) ) ; < nl > < nl > - / / < nl > - / / Keep Alive < nl > - / / < nl > + Runtime . dispatch ( ( ) - > { < nl > < nl > - if ( isKeepAliveEnabled ) { < nl > - Intent keepAliveService = new Intent ( application , KeepAliveService . class ) ; < nl > - PendingIntent pendingIntent = PendingIntent . getService ( application , 0 , keepAliveService , 0 ) ; < nl > - AlarmManager alarm = ( AlarmManager ) application . getSystemService ( Context . ALARM _ SERVICE ) ; < nl > - alarm . setRepeating ( AlarmManager . RTC , System . currentTimeMillis ( ) , 30 * 1000 , pendingIntent ) ; < nl > - } < nl > + / / < nl > + / / Keep Alive < nl > + / / < nl > + if ( isKeepAliveEnabled ) { < nl > + Intent keepAliveService = new Intent ( application , KeepAliveService . class ) ; < nl > + PendingIntent pendingIntent = PendingIntent . getService ( application , 0 , keepAliveService , 0 ) ; < nl > + AlarmManager alarm = ( AlarmManager ) application . getSystemService ( Context . ALARM _ SERVICE ) ; < nl > + alarm . setRepeating ( AlarmManager . RTC , System . currentTimeMillis ( ) , 30 * 1000 , pendingIntent ) ; < nl > + } < nl > < nl > - / / < nl > - / / Actor Push < nl > - / / < nl > < nl > - if ( actorPushEndpoint ! = null & & delegate . useActorPush ( ) ) { < nl > - ActorPushRegister . registerForPush ( application , actorPushEndpoint , endpoint - > { < nl > - Log . d ( TAG , " On Actor push registered : " + endpoint ) ; < nl > - messenger . registerActorPush ( endpoint ) ; < nl > - } ) ; < nl > - } < nl > + / / < nl > + / / Actor Push < nl > + / / < nl > + if ( actorPushEndpoint ! = null & & delegate . useActorPush ( ) ) { < nl > + ActorPushRegister . registerForPush ( application , actorPushEndpoint , endpoint - > { < nl > + Log . d ( TAG , " On Actor push registered : " + endpoint ) ; < nl > + messenger . registerActorPush ( endpoint ) ; < nl > + } ) ; < nl > + } < nl > < nl > - / / < nl > - / / GCM < nl > - / / < nl > < nl > - Runtime . dispatch ( ( ) - > { < nl > + / / < nl > + / / GCM < nl > + / / < nl > try { < nl > if ( pushId ! = 0 ) { < nl > final ActorPushManager pushManager = ( ActorPushManager ) Class . forName ( " im . actor . push . PushManager " ) . newInstance ( ) ; < nl > @ @ - 315 , 8 + 325 , 18 @ @ public class ActorSDK { < nl > } < nl > } ) ; < nl > < nl > - / / Load Emoji after everything < nl > - emojiProcessor . loadEmoji ( ) ; < nl > + < nl > + if ( ! isLoaded [ 0 ] ) { < nl > + synchronized ( isLoaded ) { < nl > + if ( ! isLoaded [ 0 ] ) { < nl > + try { < nl > + isLoaded . wait ( ) ; < nl > + } catch ( InterruptedException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + } < nl > + } < nl > < nl > / / Debug . stopMethodTracing ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / Strings . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / Strings . java < nl > index 09f22ec . . b4475fb 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / Strings . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / Strings . java < nl > @ @ - 91 , 70 + 91 , 73 @ @ public class Strings { < nl > < nl > private static final Map < Character , String > charMap = new HashMap < Character , String > ( ) ; < nl > < nl > - static { < nl > - charMap . put ( ' а ' , " a " ) ; < nl > - charMap . put ( ' б ' , " b " ) ; < nl > - charMap . put ( ' в ' , " v " ) ; < nl > - charMap . put ( ' г ' , " g " ) ; < nl > - charMap . put ( ' д ' , " d " ) ; < nl > - charMap . put ( ' е ' , " e " ) ; < nl > - charMap . put ( ' ё ' , " e " ) ; < nl > - charMap . put ( ' ж ' , " zh " ) ; < nl > - charMap . put ( ' з ' , " z " ) ; < nl > - charMap . put ( ' и ' , " i " ) ; < nl > - charMap . put ( ' й ' , " i " ) ; < nl > - charMap . put ( ' к ' , " k " ) ; < nl > - charMap . put ( ' л ' , " l " ) ; < nl > - charMap . put ( ' м ' , " m " ) ; < nl > - charMap . put ( ' н ' , " n " ) ; < nl > - charMap . put ( ' о ' , " o " ) ; < nl > - charMap . put ( ' п ' , " p " ) ; < nl > - charMap . put ( ' р ' , " r " ) ; < nl > - charMap . put ( ' с ' , " s " ) ; < nl > - charMap . put ( ' т ' , " t " ) ; < nl > - charMap . put ( ' у ' , " u " ) ; < nl > - charMap . put ( ' ф ' , " f " ) ; < nl > - charMap . put ( ' х ' , " h " ) ; < nl > - charMap . put ( ' ц ' , " c " ) ; < nl > - charMap . put ( ' ч ' , " ch " ) ; < nl > - charMap . put ( ' ш ' , " sh " ) ; < nl > - charMap . put ( ' щ ' , " sh " ) ; < nl > - charMap . put ( ' ъ ' , " ' " ) ; < nl > - charMap . put ( ' ы ' , " y " ) ; < nl > - charMap . put ( ' ь ' , " ' " ) ; < nl > - charMap . put ( ' э ' , " e " ) ; < nl > - charMap . put ( ' ю ' , " u " ) ; < nl > - charMap . put ( ' я ' , " ya " ) ; < nl > - < nl > - charMap . put ( ' a ' , " а " ) ; < nl > - charMap . put ( ' b ' , " б " ) ; < nl > - charMap . put ( ' c ' , " ц " ) ; < nl > - charMap . put ( ' d ' , " д " ) ; < nl > - charMap . put ( ' e ' , " е " ) ; < nl > - charMap . put ( ' f ' , " ф " ) ; < nl > - charMap . put ( ' g ' , " г " ) ; < nl > - charMap . put ( ' h ' , " х " ) ; < nl > - charMap . put ( ' i ' , " и " ) ; < nl > - charMap . put ( ' j ' , " д ж " ) ; < nl > - charMap . put ( ' k ' , " к " ) ; < nl > - charMap . put ( ' l ' , " л " ) ; < nl > - charMap . put ( ' m ' , " м " ) ; < nl > - charMap . put ( ' n ' , " н " ) ; < nl > - charMap . put ( ' o ' , " о " ) ; < nl > - charMap . put ( ' p ' , " п " ) ; < nl > - charMap . put ( ' q ' , " к " ) ; < nl > - charMap . put ( ' r ' , " р " ) ; < nl > - charMap . put ( ' s ' , " с " ) ; < nl > - charMap . put ( ' t ' , " т " ) ; < nl > - charMap . put ( ' u ' , " ю " ) ; < nl > - charMap . put ( ' v ' , " в " ) ; < nl > - charMap . put ( ' w ' , " в " ) ; < nl > - charMap . put ( ' x ' , " к с " ) ; < nl > - charMap . put ( ' y ' , " й " ) ; < nl > - charMap . put ( ' z ' , " з " ) ; < nl > - } < nl > - < nl > public static String transliterate ( String string ) { < nl > + if ( charMap . size ( ) = = 0 ) { < nl > + synchronized ( charMap ) { < nl > + if ( charMap . size ( ) = = 0 ) { < nl > + charMap . put ( ' а ' , " a " ) ; < nl > + charMap . put ( ' б ' , " b " ) ; < nl > + charMap . put ( ' в ' , " v " ) ; < nl > + charMap . put ( ' г ' , " g " ) ; < nl > + charMap . put ( ' д ' , " d " ) ; < nl > + charMap . put ( ' е ' , " e " ) ; < nl > + charMap . put ( ' ё ' , " e " ) ; < nl > + charMap . put ( ' ж ' , " zh " ) ; < nl > + charMap . put ( ' з ' , " z " ) ; < nl > + charMap . put ( ' и ' , " i " ) ; < nl > + charMap . put ( ' й ' , " i " ) ; < nl > + charMap . put ( ' к ' , " k " ) ; < nl > + charMap . put ( ' л ' , " l " ) ; < nl > + charMap . put ( ' м ' , " m " ) ; < nl > + charMap . put ( ' н ' , " n " ) ; < nl > + charMap . put ( ' о ' , " o " ) ; < nl > + charMap . put ( ' п ' , " p " ) ; < nl > + charMap . put ( ' р ' , " r " ) ; < nl > + charMap . put ( ' с ' , " s " ) ; < nl > + charMap . put ( ' т ' , " t " ) ; < nl > + charMap . put ( ' у ' , " u " ) ; < nl > + charMap . put ( ' ф ' , " f " ) ; < nl > + charMap . put ( ' х ' , " h " ) ; < nl > + charMap . put ( ' ц ' , " c " ) ; < nl > + charMap . put ( ' ч ' , " ch " ) ; < nl > + charMap . put ( ' ш ' , " sh " ) ; < nl > + charMap . put ( ' щ ' , " sh " ) ; < nl > + charMap . put ( ' ъ ' , " ' " ) ; < nl > + charMap . put ( ' ы ' , " y " ) ; < nl > + charMap . put ( ' ь ' , " ' " ) ; < nl > + charMap . put ( ' э ' , " e " ) ; < nl > + charMap . put ( ' ю ' , " u " ) ; < nl > + charMap . put ( ' я ' , " ya " ) ; < nl > + < nl > + charMap . put ( ' a ' , " а " ) ; < nl > + charMap . put ( ' b ' , " б " ) ; < nl > + charMap . put ( ' c ' , " ц " ) ; < nl > + charMap . put ( ' d ' , " д " ) ; < nl > + charMap . put ( ' e ' , " е " ) ; < nl > + charMap . put ( ' f ' , " ф " ) ; < nl > + charMap . put ( ' g ' , " г " ) ; < nl > + charMap . put ( ' h ' , " х " ) ; < nl > + charMap . put ( ' i ' , " и " ) ; < nl > + charMap . put ( ' j ' , " д ж " ) ; < nl > + charMap . put ( ' k ' , " к " ) ; < nl > + charMap . put ( ' l ' , " л " ) ; < nl > + charMap . put ( ' m ' , " м " ) ; < nl > + charMap . put ( ' n ' , " н " ) ; < nl > + charMap . put ( ' o ' , " о " ) ; < nl > + charMap . put ( ' p ' , " п " ) ; < nl > + charMap . put ( ' q ' , " к " ) ; < nl > + charMap . put ( ' r ' , " р " ) ; < nl > + charMap . put ( ' s ' , " с " ) ; < nl > + charMap . put ( ' t ' , " т " ) ; < nl > + charMap . put ( ' u ' , " ю " ) ; < nl > + charMap . put ( ' v ' , " в " ) ; < nl > + charMap . put ( ' w ' , " в " ) ; < nl > + charMap . put ( ' x ' , " к с " ) ; < nl > + charMap . put ( ' y ' , " й " ) ; < nl > + charMap . put ( ' z ' , " з " ) ; < nl > + } < nl > + } < nl > + } < nl > StringBuilder transliteratedString = new StringBuilder ( ) ; < nl > for ( int i = 0 ; i < string . length ( ) ; i + + ) { < nl > Character ch = string . charAt ( i ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > index 71d1b50 . . d216885 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java < nl > @ @ - 19 , 6 + 19 , 7 @ @ import im . actor . core . util . StringMatch ; < nl > import im . actor . runtime . Crypto ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . mtproto . ConnectionEndpoint ; < nl > + import im . actor . runtime . util . Hex ; < nl > import im . actor . runtime . webrtc . WebRTCIceServer ; < nl > < nl > / * * < nl > @ @ - 119 , 7 + 120 , 7 @ @ public class ConfigurationBuilder { < nl > @ NotNull < nl > @ ObjectiveCName ( " addTrustedKey : " ) < nl > public ConfigurationBuilder addTrustedKey ( String trustedKey ) { < nl > - trustedKeys . add ( new TrustedKey ( Crypto . fromHex ( trustedKey ) ) ) ; < nl > + trustedKeys . add ( new TrustedKey ( Hex . fromHex ( trustedKey ) ) ) ; < nl > return this ; < nl > } < nl > < nl > @ @ - 318 , 7 + 319 , 7 @ @ public class ConfigurationBuilder { < nl > @ NotNull < nl > @ ObjectiveCName ( " addEndpoint : withKnownIp : " ) < nl > public ConfigurationBuilder addEndpoint ( @ NotNull String url ) { < nl > - < nl > + < nl > / / Manual buggy parsing for GWT < nl > / / TODO : Correct URL parsing < nl > String scheme = url . substring ( 0 , url . indexOf ( " : " ) ) . toLowerCase ( ) ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java < nl > index 1c9a6e4 . . e80e9ed 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java < nl > @ @ - 91 , 31 + 91 , 10 @ @ public class Crypto { < nl > * @ return hex string < nl > * / < nl > public static String hex ( byte [ ] bytes ) { < nl > - char [ ] hexChars = new char [ bytes . length * 2 ] ; < nl > - for ( int j = 0 ; j < bytes . length ; j + + ) { < nl > - int v = bytes [ j ] & 0xFF ; < nl > - hexChars [ j * 2 ] = hexArray [ v > > > 4 ] ; < nl > - hexChars [ j * 2 + 1 ] = hexArray [ v & 0x0F ] ; < nl > - } < nl > - return new String ( hexChars ) ; < nl > - } < nl > - < nl > - private static int fromHexShort ( char a ) { < nl > - if ( a > = ' 0 ' & & a < = ' 9 ' ) { < nl > - return a - ' 0 ' ; < nl > - } < nl > - if ( a > = ' a ' & & a < = ' f ' ) { < nl > - return 10 + ( a - ' a ' ) ; < nl > - } < nl > - < nl > - throw new RuntimeException ( ) ; < nl > + return Hex . hex ( bytes ) ; < nl > } < nl > < nl > public static byte [ ] fromHex ( String hex ) { < nl > - byte [ ] res = new byte [ hex . length ( ) / 2 ] ; < nl > - for ( int i = 0 ; i < res . length ; i + + ) { < nl > - res [ i ] = ( byte ) ( ( fromHexShort ( hex . charAt ( i * 2 ) ) < < 4 ) + fromHexShort ( hex . charAt ( i * 2 + 1 ) ) ) ; < nl > - } < nl > - return res ; < nl > + return Hex . fromHex ( hex ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / util / Hex . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / util / Hex . java < nl > index 8213ad5 . . 391bb16 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / util / Hex . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / util / Hex . java < nl > @ @ - 2 , 23 + 2 , 7 @ @ package im . actor . runtime . util ; < nl > < nl > public class Hex { < nl > < nl > - public static byte [ ] fromHex ( String hex ) { < nl > - byte [ ] res = new byte [ hex . length ( ) / 2 ] ; < nl > - for ( int j = 0 ; j < hex . length ( ) / 2 ; j + + ) { < nl > - String dg = hex . charAt ( j * 2 ) + " " + hex . charAt ( j * 2 + 1 ) ; < nl > - res [ j ] = ( byte ) Integer . parseInt ( dg , 16 ) ; < nl > - } < nl > - return res ; < nl > - } < nl > - < nl > - public static byte [ ] fromHexReverse ( String hex ) { < nl > - byte [ ] res = new byte [ hex . length ( ) / 2 ] ; < nl > - for ( int j = 0 ; j < hex . length ( ) / 2 ; j + + ) { < nl > - String dg = hex . charAt ( j * 2 ) + " " + hex . charAt ( j * 2 + 1 ) ; < nl > - res [ res . length - j - 1 ] = ( byte ) Integer . parseInt ( dg , 16 ) ; < nl > - } < nl > - return res ; < nl > - } < nl > + final protected static char [ ] HEXES _ SMALL = " 0123456789abcdef " . toCharArray ( ) ; < nl > < nl > private static final String HEXES = " 0123456789ABCDEF " ; < nl > < nl > @ @ - 29 , 4 + 13 , 40 @ @ public class Hex { < nl > } < nl > return hex . toString ( ) ; < nl > } < nl > + < nl > + < nl > + / * * < nl > + * Calculating lowcase hex string < nl > + * < nl > + * @ param bytes data for hex < nl > + * @ return hex string < nl > + * / < nl > + public static String hex ( byte [ ] bytes ) { < nl > + char [ ] hexChars = new char [ bytes . length * 2 ] ; < nl > + for ( int j = 0 ; j < bytes . length ; j + + ) { < nl > + int v = bytes [ j ] & 0xFF ; < nl > + hexChars [ j * 2 ] = HEXES _ SMALL [ v > > > 4 ] ; < nl > + hexChars [ j * 2 + 1 ] = HEXES _ SMALL [ v & 0x0F ] ; < nl > + } < nl > + return new String ( hexChars ) ; < nl > + } < nl > + < nl > + private static int fromHexShort ( char a ) { < nl > + if ( a > = ' 0 ' & & a < = ' 9 ' ) { < nl > + return a - ' 0 ' ; < nl > + } < nl > + if ( a > = ' a ' & & a < = ' f ' ) { < nl > + return 10 + ( a - ' a ' ) ; < nl > + } < nl > + < nl > + throw new RuntimeException ( ) ; < nl > + } < nl > + < nl > + public static byte [ ] fromHex ( String hex ) { < nl > + byte [ ] res = new byte [ hex . length ( ) / 2 ] ; < nl > + for ( int i = 0 ; i < res . length ; i + + ) { < nl > + res [ i ] = ( byte ) ( ( fromHexShort ( hex . charAt ( i * 2 ) ) < < 4 ) + fromHexShort ( hex . charAt ( i * 2 + 1 ) ) ) ; < nl > + } < nl > + return res ; < nl > + } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / build . gradle b / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > index 4796c50 . . ba9f7fd 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > @ @ - 67 , 6 + 67 , 7 @ @ dependencies { < nl > < nl > / / Core < nl > compile ' com . squareup . okhttp : okhttp : 2 . 5 . 0 ' < nl > + compile ' org . eclipse . paho : org . eclipse . paho . client . mqttv3 : 1 . 0 . 2 ' < nl > < nl > / / Android Support < nl > compile ' com . android . support : support - v4 : 23 . 1 . 0 ' < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml < nl > index 8728e69 . . 8fe727b 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml < nl > @ @ - 276 , 6 + 276 , 21 @ @ < nl > android : enabled = " true " < nl > android : exported = " true " / > < nl > < nl > + < service < nl > + android : name = " im . actor . sdk . push . ActorPushService " < nl > + android : enabled = " true " < nl > + android : exported = " true " < nl > + android : process = " : actor _ push " / > < nl > + < nl > + < receiver < nl > + android : name = " im . actor . sdk . receivers . SDKPushReceiver " < nl > + android : enabled = " true " < nl > + android : exported = " true " > < nl > + < intent - filter > < nl > + < action android : name = " im . actor . push . intent . RECEIVE " / > < nl > + < category android : name = " $ { applicationId } " / > < nl > + < / intent - filter > < nl > + < / receiver > < nl > < nl > < / application > < nl > < / manifest > < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > index 04a4226 . . cf2f514 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > @ @ - 28 , 6 + 28 , 7 @ @ import im . actor . core . PlatformType ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . modules . events . IncomingCall ; < nl > import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . ActorContext ; < nl > import im . actor . runtime . android . view . BindedViewHolder ; < nl > import im . actor . runtime . eventbus . BusSubscriber ; < nl > import im . actor . runtime . eventbus . Event ; < nl > @ @ - 44 , 6 + 45 , 7 @ @ import im . actor . sdk . intents . ActivityManager ; < nl > import im . actor . sdk . intents . ActorIntent ; < nl > import im . actor . sdk . intents . ActorIntentActivity ; < nl > import im . actor . sdk . intents . ActorIntentFragmentActivity ; < nl > + import im . actor . sdk . push . ActorPushRegister ; < nl > import im . actor . sdk . services . KeepAliveService ; < nl > import im . actor . sdk . util . Devices ; < nl > import im . actor . sdk . view . emoji . SmileProcessor ; < nl > @ @ - 238 , 8 + 240 , 21 @ @ public class ActorSDK { < nl > } < nl > < nl > / / < nl > - / / GCM < nl > + / / Actor Push < nl > / / < nl > + < nl > + ActorPushRegister . registerForPush ( application , new ActorPushRegister . Callback ( ) { < nl > + @ Override < nl > + public void onRegistered ( String endpoint ) { < nl > + Log . d ( TAG , " On Actor push registered : " + endpoint ) ; < nl > + messenger . registerActorPush ( endpoint ) ; < nl > + } < nl > + } ) ; < nl > + < nl > + / / < nl > + / / GCM < nl > + / / < nl > + < nl > try { < nl > final ActorPushManager pushManager = ( ActorPushManager ) Class . forName ( " im . actor . push . PushManager " ) . newInstance ( ) ; < nl > if ( pushId ! = 0 ) { < nl > @ @ - 249 , 6 + 264 , 10 @ @ public class ActorSDK { < nl > e . printStackTrace ( ) ; < nl > } < nl > < nl > + / / < nl > + / / Calls subscribing < nl > + / / < nl > + < nl > messenger . getEvents ( ) . subscribe ( new BusSubscriber ( ) { < nl > @ Override < nl > public void onBusEvent ( Event event ) { < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushReceiver . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushReceiver . java < nl > new file mode 100644 < nl > index 0000000 . . 5f4b45b < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushReceiver . java < nl > @ @ - 0 , 0 + 1 , 32 @ @ < nl > + package im . actor . sdk . push ; < nl > + < nl > + import android . content . BroadcastReceiver ; < nl > + import android . content . Context ; < nl > + import android . content . Intent ; < nl > + import android . util . Log ; < nl > + < nl > + / * * < nl > + * Abstract class for Actor Push receiver < nl > + * / < nl > + public abstract class ActorPushReceiver extends BroadcastReceiver { < nl > + < nl > + public ActorPushReceiver ( ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Context context , Intent intent ) { < nl > + if ( " im . actor . push . intent . RECEIVE " . equals ( intent . getAction ( ) ) ) { < nl > + onPushReceived ( intent . getStringExtra ( " push _ payload " ) ) ; < nl > + } else { < nl > + / / Ignore < nl > + } < nl > + } < nl > + < nl > + / * * < nl > + * Called when push is received < nl > + * < nl > + * @ param payload payload of the push < nl > + * / < nl > + public abstract void onPushReceived ( String payload ) ; < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushRegister . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushRegister . java < nl > new file mode 100644 < nl > index 0000000 . . efbb693 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushRegister . java < nl > @ @ - 0 , 0 + 1 , 113 @ @ < nl > + package im . actor . sdk . push ; < nl > + < nl > + import android . content . Context ; < nl > + import android . content . Intent ; < nl > + import android . content . SharedPreferences ; < nl > + < nl > + import com . squareup . okhttp . Callback ; < nl > + import com . squareup . okhttp . MediaType ; < nl > + import com . squareup . okhttp . OkHttpClient ; < nl > + import com . squareup . okhttp . Request ; < nl > + import com . squareup . okhttp . RequestBody ; < nl > + import com . squareup . okhttp . Response ; < nl > + < nl > + import org . json . JSONArray ; < nl > + import org . json . JSONException ; < nl > + import org . json . JSONObject ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . Log ; < nl > + < nl > + / * * < nl > + * Registration for Actor Push < nl > + * / < nl > + public final class ActorPushRegister { < nl > + < nl > + private static OkHttpClient client = new OkHttpClient ( ) ; < nl > + < nl > + public static void registerForPush ( final Context context , final Callback callback ) { < nl > + < nl > + final SharedPreferences sharedPreferences = context . getSharedPreferences ( " actor _ push _ register " , Context . MODE _ PRIVATE ) ; < nl > + String registrationEndpoint = sharedPreferences . getString ( " registration _ endpoint " , null ) ; < nl > + String registrationData = sharedPreferences . getString ( " registration _ data " , null ) ; < nl > + if ( registrationEndpoint ! = null & & registrationData ! = null ) { < nl > + try { < nl > + JSONObject data = new JSONObject ( registrationData ) ; < nl > + startService ( data , context ) ; < nl > + callback . onRegistered ( registrationEndpoint ) ; < nl > + return ; < nl > + } catch ( JSONException e ) { < nl > + e . printStackTrace ( ) ; < nl > + sharedPreferences . edit ( ) . clear ( ) . commit ( ) ; < nl > + } < nl > + } < nl > + < nl > + final Request request = new Request . Builder ( ) < nl > + . url ( " https : / / push . actor . im / apps / 31337 / subscriptions " ) < nl > + . method ( " POST " , RequestBody . create ( MediaType . parse ( " application / json " ) , " { } " ) ) < nl > + . build ( ) ; < nl > + < nl > + client . newCall ( request ) . enqueue ( new com . squareup . okhttp . Callback ( ) { < nl > + < nl > + @ Override < nl > + public void onFailure ( Request request , IOException e ) { < nl > + / / TODO : Handle ? < nl > + } < nl > + < nl > + @ Override < nl > + public void onResponse ( Response response ) throws IOException { < nl > + try { < nl > + String res = response . body ( ) . string ( ) ; < nl > + JSONObject js = new JSONObject ( res ) . getJSONObject ( " data " ) ; < nl > + String endpoint = js . getString ( " endpoint " ) ; < nl > + sharedPreferences . edit ( ) < nl > + . putString ( " registration _ endpoint " , endpoint ) < nl > + . putString ( " registration _ data " , js . toString ( ) ) < nl > + . commit ( ) ; < nl > + startService ( js , context ) ; < nl > + Log . d ( " ActorPushRegister " , " Endpoint : " + endpoint ) ; < nl > + callback . onRegistered ( endpoint ) ; < nl > + } catch ( JSONException e ) { < nl > + e . printStackTrace ( ) ; < nl > + / / TODO : Handle ? < nl > + } < nl > + } < nl > + } ) ; < nl > + < nl > + / / topic = UUID . randomUUID ( ) . toString ( ) ; < nl > + / / sharedPreferences . edit ( ) . putString ( " topic " , topic ) . commit ( ) ; < nl > + / / < nl > + / / context . startService ( new Intent ( context , ActorPushService . class ) < nl > + / / . putExtra ( " mqtt _ url " , " tcp : / / lab2 . 81port . com : 1883 " ) < nl > + / / . putExtra ( " mqtt _ topic " , topic ) ) ; < nl > + / / < nl > + / / return topic ; < nl > + } < nl > + < nl > + private static void startService ( JSONObject config , Context context ) { < nl > + try { < nl > + JSONObject object = config . getJSONObject ( " mqttServer " ) ; < nl > + JSONArray hostsJ = object . getJSONArray ( " hosts " ) ; < nl > + String [ ] hosts = new String [ hostsJ . length ( ) ] ; < nl > + for ( int i = 0 ; i < hosts . length ; i + + ) { < nl > + hosts [ i ] = hostsJ . getString ( i ) ; < nl > + } < nl > + String username = object . getString ( " username " ) ; < nl > + String password = object . getString ( " password " ) ; < nl > + String topic = config . getString ( " topic " ) ; < nl > + context . startService ( new Intent ( context , ActorPushService . class ) < nl > + . putExtra ( " mqtt _ urls " , hosts ) < nl > + . putExtra ( " mqtt _ topic " , topic ) < nl > + . putExtra ( " mqtt _ username " , username ) < nl > + . putExtra ( " mqtt _ password " , password ) ) ; < nl > + < nl > + } catch ( JSONException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + < nl > + public interface Callback { < nl > + void onRegistered ( String endpoint ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushService . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushService . java < nl > new file mode 100644 < nl > index 0000000 . . 4ef5c96 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushService . java < nl > @ @ - 0 , 0 + 1 , 333 @ @ < nl > + package im . actor . sdk . push ; < nl > + < nl > + import android . app . Service ; < nl > + import android . content . Intent ; < nl > + import android . content . SharedPreferences ; < nl > + import android . content . pm . PackageManager ; < nl > + import android . content . pm . ResolveInfo ; < nl > + import android . os . IBinder ; < nl > + import android . util . Log ; < nl > + < nl > + import org . eclipse . paho . client . mqttv3 . IMqttDeliveryToken ; < nl > + import org . eclipse . paho . client . mqttv3 . MqttCallback ; < nl > + import org . eclipse . paho . client . mqttv3 . MqttClient ; < nl > + import org . eclipse . paho . client . mqttv3 . MqttConnectOptions ; < nl > + import org . eclipse . paho . client . mqttv3 . MqttException ; < nl > + import org . eclipse . paho . client . mqttv3 . MqttMessage ; < nl > + import org . eclipse . paho . client . mqttv3 . persist . MemoryPersistence ; < nl > + < nl > + import java . util . List ; < nl > + import java . util . Random ; < nl > + import java . util . UUID ; < nl > + import java . util . concurrent . Executor ; < nl > + import java . util . concurrent . Executors ; < nl > + < nl > + / * * < nl > + * Actor Push service based on MQTT < nl > + * / < nl > + public class ActorPushService extends Service implements MqttCallback { < nl > + < nl > + private static final String TAG = " PushService " ; < nl > + < nl > + private final Executor connectionExecutor = Executors . newSingleThreadExecutor ( ) ; < nl > + < nl > + private final MemoryPersistence persistence = new MemoryPersistence ( ) ; < nl > + private final MqttConnectOptions connectOptions = new MqttConnectOptions ( ) ; < nl > + < nl > + private String packageName ; < nl > + private String receiverName ; < nl > + < nl > + private SharedPreferences preferences ; < nl > + < nl > + private String [ ] mqttUrls ; < nl > + private String mqttClientId ; < nl > + private String mqttTopic ; < nl > + private String mqttUsername ; < nl > + private String mqttPassword ; < nl > + < nl > + private MqttClient mqttClient ; < nl > + < nl > + private int attemptIndex = 0 ; < nl > + private boolean isConnecting = false ; < nl > + < nl > + private Random random = new Random ( ) ; < nl > + < nl > + public ActorPushService ( ) { < nl > + < nl > + / / Configuration on MQTT connection options < nl > + connectOptions . setCleanSession ( false ) ; < nl > + connectOptions . setConnectionTimeout ( 5 / * 5 seconds * / ) ; < nl > + connectOptions . setKeepAliveInterval ( 15 * 60 / * 15 minutes * / ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onCreate ( ) { < nl > + Log . d ( TAG , " onCreate " ) ; < nl > + super . onCreate ( ) ; < nl > + < nl > + / / Loading Application Package < nl > + packageName = getApplicationContext ( ) . getPackageName ( ) ; < nl > + < nl > + / / < nl > + / / Searching for Receiver < nl > + / / < nl > + PackageManager packageManager = getPackageManager ( ) ; < nl > + Intent intent = new Intent ( " im . actor . push . intent . RECEIVE " ) ; < nl > + List < ResolveInfo > resolveInfoList = packageManager . queryBroadcastReceivers ( intent , 0 ) ; < nl > + for ( ResolveInfo r : resolveInfoList ) { < nl > + if ( packageName . equals ( r . activityInfo . packageName ) ) { < nl > + receiverName = r . activityInfo . name ; < nl > + break ; < nl > + } < nl > + } < nl > + < nl > + / / < nl > + / / Loading current MQTT state < nl > + / / < nl > + preferences = getSharedPreferences ( " actor _ push _ service " , MODE _ PRIVATE ) ; < nl > + < nl > + / / < nl > + / / Loading unique clientId < nl > + / / < nl > + mqttClientId = preferences . getString ( " mqtt _ clientId " , null ) ; < nl > + if ( mqttClientId = = null ) { < nl > + mqttClientId = UUID . randomUUID ( ) . toString ( ) ; < nl > + preferences . edit ( ) < nl > + . putString ( " mqtt _ clientId " , mqttClientId ) < nl > + . commit ( ) ; < nl > + } < nl > + < nl > + / / < nl > + / / Loading registration info < nl > + / / < nl > + String urls = preferences . getString ( " mqtt _ hosts " , null ) ; < nl > + if ( urls ! = null ) { < nl > + mqttUrls = urls . split ( " , " ) ; < nl > + } < nl > + mqttTopic = preferences . getString ( " mqtt _ topic " , null ) ; < nl > + mqttUsername = preferences . getString ( " mqtt _ username " , null ) ; < nl > + mqttPassword = preferences . getString ( " mqtt _ password " , null ) ; < nl > + < nl > + / / < nl > + / / Starting service < nl > + / / < nl > + if ( mqttUrls = = null | | mqttTopic = = null | | mqttUsername = = null | | mqttPassword = = null ) { < nl > + mqttUrls = null ; < nl > + mqttTopic = null ; < nl > + mqttUsername = null ; < nl > + mqttPassword = null ; < nl > + Log . d ( TAG , " Not started " ) ; < nl > + } else { < nl > + tryConnect ( ) ; < nl > + } < nl > + } < nl > + < nl > + / / < nl > + / / Connection creation < nl > + / / < nl > + < nl > + private synchronized void connectToBroker ( String [ ] hosts , String topic , String username , String password ) { < nl > + Log . d ( TAG , " connectToBroker : " + hosts + " , topic : " + topic ) ; < nl > + < nl > + / / Cancelling old connection < nl > + cancelConnection ( ) ; < nl > + < nl > + / / Saving credentials < nl > + mqttUrls = hosts ; < nl > + mqttTopic = topic ; < nl > + mqttUsername = username ; < nl > + mqttPassword = password ; < nl > + StringBuilder b = new StringBuilder ( ) ; < nl > + for ( int i = 0 ; i < hosts . length ; i + + ) { < nl > + if ( i ! = 0 ) { < nl > + b . append ( " , " ) ; < nl > + } < nl > + b . append ( hosts [ i ] ) ; < nl > + } < nl > + preferences . edit ( ) < nl > + . putString ( " mqtt _ url " , b . toString ( ) ) < nl > + . putString ( " mqtt _ topic " , mqttTopic ) < nl > + . putString ( " mqtt _ username " , mqttUsername ) < nl > + . putString ( " mqtt _ password " , mqttPassword ) < nl > + . commit ( ) ; < nl > + < nl > + / / Starting connection < nl > + tryConnect ( ) ; < nl > + } < nl > + < nl > + private synchronized void tryConnect ( ) { < nl > + Log . d ( TAG , " tryConnect " ) ; < nl > + / / If connected < nl > + if ( mqttClient ! = null & & mqttClient . isConnected ( ) ) { < nl > + Log . d ( TAG , " Already connected " ) ; < nl > + return ; < nl > + } < nl > + < nl > + / / Checking state < nl > + if ( isConnecting ) { < nl > + Log . d ( TAG , " Already connecting " ) ; < nl > + return ; < nl > + } < nl > + isConnecting = true ; < nl > + < nl > + Log . d ( TAG , " Starting connecting . . . " ) ; < nl > + / / Clearing mqttClient < nl > + if ( mqttClient ! = null ) { < nl > + try { < nl > + mqttClient . close ( ) ; < nl > + } catch ( MqttException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + mqttClient = null ; < nl > + < nl > + / / Setting credentials < nl > + connectOptions . setUserName ( mqttUsername ) ; < nl > + connectOptions . setPassword ( mqttPassword . toCharArray ( ) ) ; < nl > + < nl > + / / Starting mqtt connection < nl > + final int attempt = + + attemptIndex ; < nl > + connectionExecutor . execute ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + Log . d ( TAG , " Connecting . . . " ) ; < nl > + MqttClient mqttClient ; < nl > + try { < nl > + mqttClient = new MqttClient ( mqttUrls [ random . nextInt ( mqttUrls . length ) ] , mqttClientId , persistence ) ; < nl > + mqttClient . connect ( connectOptions ) ; < nl > + Log . d ( TAG , " Connected " ) ; < nl > + mqttClient . setCallback ( ActorPushService . this ) ; < nl > + mqttClient . subscribe ( mqttTopic , 1 ) ; < nl > + Log . d ( TAG , " Complete " ) ; < nl > + } catch ( MqttException e ) { < nl > + Log . d ( TAG , " Exception " ) ; < nl > + e . printStackTrace ( ) ; < nl > + onConnectionFailure ( ) ; < nl > + return ; < nl > + } < nl > + Log . d ( TAG , " Success " ) ; < nl > + onConnected ( attempt , mqttClient ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + private synchronized void cancelConnection ( ) { < nl > + Log . d ( TAG , " cancelConnection " ) ; < nl > + isConnecting = false ; < nl > + attemptIndex + + ; < nl > + < nl > + / / Clearing mqttClient < nl > + if ( mqttClient ! = null ) { < nl > + try { < nl > + mqttClient . close ( ) ; < nl > + } catch ( MqttException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + mqttClient = null ; < nl > + } < nl > + < nl > + private synchronized void onConnected ( int attempt , MqttClient mqttClient ) { < nl > + if ( this . attemptIndex = = attempt ) { < nl > + this . mqttClient = mqttClient ; < nl > + } else { < nl > + / / Incorrect attempt < nl > + try { < nl > + mqttClient . disconnect ( ) ; < nl > + } catch ( MqttException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + try { < nl > + mqttClient . close ( ) ; < nl > + } catch ( MqttException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + < nl > + < nl > + } < nl > + < nl > + private synchronized void onConnectionFailure ( ) { < nl > + Log . d ( TAG , " Connect Failure " ) ; < nl > + < nl > + / / < nl > + / / Trying to recreate connection < nl > + / / < nl > + isConnecting = false ; < nl > + tryConnect ( ) ; < nl > + } < nl > + < nl > + / / < nl > + / / MQTT callbacks < nl > + / / < nl > + < nl > + @ Override < nl > + public synchronized void connectionLost ( Throwable cause ) { < nl > + Log . d ( TAG , " Connection Lost " ) ; < nl > + < nl > + / / Clearing connection < nl > + if ( mqttClient ! = null ) { < nl > + try { < nl > + mqttClient . disconnect ( ) ; < nl > + } catch ( MqttException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + try { < nl > + mqttClient . close ( ) ; < nl > + } catch ( MqttException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + this . mqttClient = null ; < nl > + < nl > + / / < nl > + / / Trying to recreate connection < nl > + / / < nl > + tryConnect ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public synchronized void messageArrived ( String topic , MqttMessage message ) throws Exception { < nl > + String msg = new String ( message . getPayload ( ) , " utf - 8 " ) ; < nl > + Log . d ( TAG , " Received " + topic + " " + msg ) ; < nl > + < nl > + if ( packageName ! = null & & receiverName ! = null ) { < nl > + sendBroadcast ( new Intent ( " im . actor . push . intent . RECEIVE " ) < nl > + . setClassName ( packageName , receiverName ) < nl > + . putExtra ( " push _ payload " , msg ) ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public synchronized void deliveryComplete ( IMqttDeliveryToken token ) { < nl > + / / Ignore < nl > + } < nl > + < nl > + / / < nl > + / / Internals < nl > + / / < nl > + < nl > + @ Override < nl > + public IBinder onBind ( Intent intent ) { < nl > + / / Do not implement binding as this will probably block from service restarting < nl > + return null ; < nl > + } < nl > + < nl > + @ Override < nl > + public int onStartCommand ( Intent intent , int flags , int startId ) { < nl > + if ( intent . hasExtra ( " mqtt _ urls " ) < nl > + & & intent . hasExtra ( " mqtt _ topic " ) < nl > + & & intent . hasExtra ( " mqtt _ username " ) < nl > + & & intent . hasExtra ( " mqtt _ password " ) ) { < nl > + String [ ] url = intent . getStringArrayExtra ( " mqtt _ urls " ) ; < nl > + String topic = intent . getStringExtra ( " mqtt _ topic " ) ; < nl > + String username = intent . getStringExtra ( " mqtt _ username " ) ; < nl > + String password = intent . getStringExtra ( " mqtt _ password " ) ; < nl > + connectToBroker ( url , topic , username , password ) ; < nl > + } < nl > + < nl > + / / Making Service restart after killing < nl > + / / TODO : May not work correctly on 4 . 4 + on some devices - need to implement workaround < nl > + return START _ STICKY ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / receivers / SDKPushReceiver . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / receivers / SDKPushReceiver . java < nl > new file mode 100644 < nl > index 0000000 . . 10e012e < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / receivers / SDKPushReceiver . java < nl > @ @ - 0 , 0 + 1 , 13 @ @ < nl > + package im . actor . sdk . receivers ; < nl > + < nl > + import android . util . Log ; < nl > + < nl > + import im . actor . sdk . push . ActorPushReceiver ; < nl > + < nl > + public class SDKPushReceiver extends ActorPushReceiver { < nl > + < nl > + @ Override < nl > + public void onPushReceived ( String payload ) { < nl > + Log . d ( " TestPushReceiver " , " On push received : " + payload ) ; < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index d2174c8 . . f208401 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 1976 , 6 + 1976 , 16 @ @ public class Messenger { < nl > } < nl > < nl > / * * < nl > + * Register actor push < nl > + * < nl > + * @ param endpoint push endpoint < nl > + * / < nl > + @ ObjectiveCName ( " registerActorPushWithEndpoint : " ) < nl > + public void registerActorPush ( String endpoint ) { < nl > + modules . getPushesModule ( ) . registerActorPush ( endpoint ) ; < nl > + } < nl > + < nl > + / * * < nl > * Get preferences storage < nl > * < nl > * @ return the Preferences < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / PushesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / PushesModule . java < nl > index 323dcff . . 7ee0d4b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / PushesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / PushesModule . java < nl > @ @ - 36 , 6 + 36 , 10 @ @ public class PushesModule extends AbsModule { < nl > pushRegisterActor . send ( new PushRegisterActor . RegisterApplePush ( apnsKey , token ) ) ; < nl > } < nl > < nl > + public void registerActorPush ( String endpoint ) { < nl > + pushRegisterActor . send ( new PushRegisterActor . RegisterActorPush ( endpoint ) ) ; < nl > + } < nl > + < nl > public void resetModule ( ) { < nl > pushRegisterActor . send ( new PushRegisterActor . ResendPush ( ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / push / PushRegisterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / push / PushRegisterActor . java < nl > index 60ae34b . . a44ffca 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / push / PushRegisterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / push / PushRegisterActor . java < nl > @ @ - 4 , 6 + 4 , 10 @ @ < nl > < nl > package im . actor . core . modules . internal . push ; < nl > < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . core . api . ApiEncryptionKey ; < nl > + import im . actor . core . api . rpc . RequestRegisterActorPush ; < nl > import im . actor . core . api . rpc . RequestRegisterApplePush ; < nl > import im . actor . core . api . rpc . RequestRegisterGooglePush ; < nl > import im . actor . core . api . rpc . ResponseVoid ; < nl > @ @ - 34 , 6 + 38 , 12 @ @ public class PushRegisterActor extends ModuleActor { < nl > registerApplePush ( apnsId , token ) ; < nl > } < nl > } < nl > + if ( preferences ( ) . getBool ( " push . actor " , false ) ) { < nl > + if ( ! preferences ( ) . getBool ( " push . actor . registered " , false ) ) { < nl > + String endpoint = preferences ( ) . getString ( " push . actor . endpoint " ) ; < nl > + registerActorPush ( endpoint ) ; < nl > + } < nl > + } < nl > } < nl > < nl > private void registerGooglePush ( long projectId , String token ) { < nl > @ @ - 74 , 6 + 84 , 24 @ @ public class PushRegisterActor extends ModuleActor { < nl > } ) ; < nl > } < nl > < nl > + private void registerActorPush ( String endpoint ) { < nl > + preferences ( ) . putBool ( " push . actor " , true ) ; < nl > + preferences ( ) . putBool ( " push . actor . registered " , false ) ; < nl > + preferences ( ) . putString ( " push . actor . endpoint " , endpoint ) ; < nl > + < nl > + request ( new RequestRegisterActorPush ( endpoint , new ArrayList < ApiEncryptionKey > ( ) ) , new RpcCallback < ResponseVoid > ( ) { < nl > + @ Override < nl > + public void onResult ( ResponseVoid response ) { < nl > + preferences ( ) . putBool ( " push . actor . registered " , true ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( RpcException e ) { < nl > + < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > private void resendPush ( ) { < nl > if ( preferences ( ) . getBool ( " push . google " , false ) ) { < nl > preferences ( ) . putBool ( " push . google . registered " , false ) ; < nl > @ @ - 100 , 6 + 128 , 9 @ @ public class PushRegisterActor extends ModuleActor { < nl > } else if ( message instanceof RegisterApplePush ) { < nl > RegisterApplePush applePush = ( RegisterApplePush ) message ; < nl > registerApplePush ( applePush . getApnsKey ( ) , applePush . getToken ( ) ) ; < nl > + } else if ( message instanceof RegisterActorPush ) { < nl > + RegisterActorPush actorPush = ( RegisterActorPush ) message ; < nl > + registerActorPush ( actorPush . getEndpoint ( ) ) ; < nl > } else if ( message instanceof ResendPush ) { < nl > resendPush ( ) ; < nl > } else { < nl > @ @ - 143 , 6 + 174 , 18 @ @ public class PushRegisterActor extends ModuleActor { < nl > } < nl > } < nl > < nl > + public static class RegisterActorPush { < nl > + private String endpoint ; < nl > + < nl > + public RegisterActorPush ( String endpoint ) { < nl > + this . endpoint = endpoint ; < nl > + } < nl > + < nl > + public String getEndpoint ( ) { < nl > + return endpoint ; < nl > + } < nl > + } < nl > + < nl > public static class ResendPush { < nl > < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 index 7750ed2 . . 17ba128 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 @ @ - 212 , 22 + 212 , 32 @ @ public class ActorSDK { 
 
 public void createActor ( final Application application ) { 
 
 - / / Debug . startMethodTracing ( " create _ actor9 " ) ; 
 + / / Debug . startMethodTracing ( " create _ actor11 " ) ; 
 
 this . application = application ; 
 
 + boolean [ ] isLoaded = new boolean [ 1 ] ; 
 + isLoaded [ 0 ] = false ; 
 + 
 / / 
 / / SDK Tools 
 / / 
 
 - ImagePipelineConfig config = ImagePipelineConfig . newBuilder ( application ) 
 - . setDownsampleEnabled ( true ) 
 - . build ( ) ; 
 - Fresco . initialize ( application , config ) ; 
 - / / TODO : Replace 
 - SmileProcessor emojiProcessor = new SmileProcessor ( application ) ; 
 + Runtime . dispatch ( ( ) - > { 
 + ImagePipelineConfig config = ImagePipelineConfig . newBuilder ( application ) 
 + . setDownsampleEnabled ( true ) 
 + . build ( ) ; 
 + Fresco . initialize ( application , config ) ; 
 + 
 + SmileProcessor emojiProcessor = new SmileProcessor ( application ) ; 
 + ActorSystem . system ( ) . addDispatcher ( " voice _ capture _ dispatcher " , 1 ) ; 
 + synchronized ( isLoaded ) { 
 + isLoaded [ 0 ] = true ; 
 + isLoaded . notifyAll ( ) ; 
 + } 
 + emojiProcessor . loadEmoji ( ) ; 
 
 - ActorSystem . system ( ) . addDispatcher ( " voice _ capture _ dispatcher " , 1 ) ; 
 + } ) ; 
 
 / / 
 / / SDK Configuration 
 @ @ - 278 , 33 + 288 , 33 @ @ public class ActorSDK { 
 
 this . messenger = new AndroidMessenger ( AndroidContext . getContext ( ) , builder . build ( ) ) ; 
 
 - / / 
 - / / Keep Alive 
 - / / 
 + Runtime . dispatch ( ( ) - > { 
 
 - if ( isKeepAliveEnabled ) { 
 - Intent keepAliveService = new Intent ( application , KeepAliveService . class ) ; 
 - PendingIntent pendingIntent = PendingIntent . getService ( application , 0 , keepAliveService , 0 ) ; 
 - AlarmManager alarm = ( AlarmManager ) application . getSystemService ( Context . ALARM _ SERVICE ) ; 
 - alarm . setRepeating ( AlarmManager . RTC , System . currentTimeMillis ( ) , 30 * 1000 , pendingIntent ) ; 
 - } 
 + / / 
 + / / Keep Alive 
 + / / 
 + if ( isKeepAliveEnabled ) { 
 + Intent keepAliveService = new Intent ( application , KeepAliveService . class ) ; 
 + PendingIntent pendingIntent = PendingIntent . getService ( application , 0 , keepAliveService , 0 ) ; 
 + AlarmManager alarm = ( AlarmManager ) application . getSystemService ( Context . ALARM _ SERVICE ) ; 
 + alarm . setRepeating ( AlarmManager . RTC , System . currentTimeMillis ( ) , 30 * 1000 , pendingIntent ) ; 
 + } 
 
 - / / 
 - / / Actor Push 
 - / / 
 
 - if ( actorPushEndpoint ! = null & & delegate . useActorPush ( ) ) { 
 - ActorPushRegister . registerForPush ( application , actorPushEndpoint , endpoint - > { 
 - Log . d ( TAG , " On Actor push registered : " + endpoint ) ; 
 - messenger . registerActorPush ( endpoint ) ; 
 - } ) ; 
 - } 
 + / / 
 + / / Actor Push 
 + / / 
 + if ( actorPushEndpoint ! = null & & delegate . useActorPush ( ) ) { 
 + ActorPushRegister . registerForPush ( application , actorPushEndpoint , endpoint - > { 
 + Log . d ( TAG , " On Actor push registered : " + endpoint ) ; 
 + messenger . registerActorPush ( endpoint ) ; 
 + } ) ; 
 + } 
 
 - / / 
 - / / GCM 
 - / / 
 
 - Runtime . dispatch ( ( ) - > { 
 + / / 
 + / / GCM 
 + / / 
 try { 
 if ( pushId ! = 0 ) { 
 final ActorPushManager pushManager = ( ActorPushManager ) Class . forName ( " im . actor . push . PushManager " ) . newInstance ( ) ; 
 @ @ - 315 , 8 + 325 , 18 @ @ public class ActorSDK { 
 } 
 } ) ; 
 
 - / / Load Emoji after everything 
 - emojiProcessor . loadEmoji ( ) ; 
 + 
 + if ( ! isLoaded [ 0 ] ) { 
 + synchronized ( isLoaded ) { 
 + if ( ! isLoaded [ 0 ] ) { 
 + try { 
 + isLoaded . wait ( ) ; 
 + } catch ( InterruptedException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + } 
 + } 
 
 / / Debug . stopMethodTracing ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / Strings . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / Strings . java 
 index 09f22ec . . b4475fb 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / Strings . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / Strings . java 
 @ @ - 91 , 70 + 91 , 73 @ @ public class Strings { 
 
 private static final Map < Character , String > charMap = new HashMap < Character , String > ( ) ; 
 
 - static { 
 - charMap . put ( ' а ' , " a " ) ; 
 - charMap . put ( ' б ' , " b " ) ; 
 - charMap . put ( ' в ' , " v " ) ; 
 - charMap . put ( ' г ' , " g " ) ; 
 - charMap . put ( ' д ' , " d " ) ; 
 - charMap . put ( ' е ' , " e " ) ; 
 - charMap . put ( ' ё ' , " e " ) ; 
 - charMap . put ( ' ж ' , " zh " ) ; 
 - charMap . put ( ' з ' , " z " ) ; 
 - charMap . put ( ' и ' , " i " ) ; 
 - charMap . put ( ' й ' , " i " ) ; 
 - charMap . put ( ' к ' , " k " ) ; 
 - charMap . put ( ' л ' , " l " ) ; 
 - charMap . put ( ' м ' , " m " ) ; 
 - charMap . put ( ' н ' , " n " ) ; 
 - charMap . put ( ' о ' , " o " ) ; 
 - charMap . put ( ' п ' , " p " ) ; 
 - charMap . put ( ' р ' , " r " ) ; 
 - charMap . put ( ' с ' , " s " ) ; 
 - charMap . put ( ' т ' , " t " ) ; 
 - charMap . put ( ' у ' , " u " ) ; 
 - charMap . put ( ' ф ' , " f " ) ; 
 - charMap . put ( ' х ' , " h " ) ; 
 - charMap . put ( ' ц ' , " c " ) ; 
 - charMap . put ( ' ч ' , " ch " ) ; 
 - charMap . put ( ' ш ' , " sh " ) ; 
 - charMap . put ( ' щ ' , " sh " ) ; 
 - charMap . put ( ' ъ ' , " ' " ) ; 
 - charMap . put ( ' ы ' , " y " ) ; 
 - charMap . put ( ' ь ' , " ' " ) ; 
 - charMap . put ( ' э ' , " e " ) ; 
 - charMap . put ( ' ю ' , " u " ) ; 
 - charMap . put ( ' я ' , " ya " ) ; 
 - 
 - charMap . put ( ' a ' , " а " ) ; 
 - charMap . put ( ' b ' , " б " ) ; 
 - charMap . put ( ' c ' , " ц " ) ; 
 - charMap . put ( ' d ' , " д " ) ; 
 - charMap . put ( ' e ' , " е " ) ; 
 - charMap . put ( ' f ' , " ф " ) ; 
 - charMap . put ( ' g ' , " г " ) ; 
 - charMap . put ( ' h ' , " х " ) ; 
 - charMap . put ( ' i ' , " и " ) ; 
 - charMap . put ( ' j ' , " д ж " ) ; 
 - charMap . put ( ' k ' , " к " ) ; 
 - charMap . put ( ' l ' , " л " ) ; 
 - charMap . put ( ' m ' , " м " ) ; 
 - charMap . put ( ' n ' , " н " ) ; 
 - charMap . put ( ' o ' , " о " ) ; 
 - charMap . put ( ' p ' , " п " ) ; 
 - charMap . put ( ' q ' , " к " ) ; 
 - charMap . put ( ' r ' , " р " ) ; 
 - charMap . put ( ' s ' , " с " ) ; 
 - charMap . put ( ' t ' , " т " ) ; 
 - charMap . put ( ' u ' , " ю " ) ; 
 - charMap . put ( ' v ' , " в " ) ; 
 - charMap . put ( ' w ' , " в " ) ; 
 - charMap . put ( ' x ' , " к с " ) ; 
 - charMap . put ( ' y ' , " й " ) ; 
 - charMap . put ( ' z ' , " з " ) ; 
 - } 
 - 
 public static String transliterate ( String string ) { 
 + if ( charMap . size ( ) = = 0 ) { 
 + synchronized ( charMap ) { 
 + if ( charMap . size ( ) = = 0 ) { 
 + charMap . put ( ' а ' , " a " ) ; 
 + charMap . put ( ' б ' , " b " ) ; 
 + charMap . put ( ' в ' , " v " ) ; 
 + charMap . put ( ' г ' , " g " ) ; 
 + charMap . put ( ' д ' , " d " ) ; 
 + charMap . put ( ' е ' , " e " ) ; 
 + charMap . put ( ' ё ' , " e " ) ; 
 + charMap . put ( ' ж ' , " zh " ) ; 
 + charMap . put ( ' з ' , " z " ) ; 
 + charMap . put ( ' и ' , " i " ) ; 
 + charMap . put ( ' й ' , " i " ) ; 
 + charMap . put ( ' к ' , " k " ) ; 
 + charMap . put ( ' л ' , " l " ) ; 
 + charMap . put ( ' м ' , " m " ) ; 
 + charMap . put ( ' н ' , " n " ) ; 
 + charMap . put ( ' о ' , " o " ) ; 
 + charMap . put ( ' п ' , " p " ) ; 
 + charMap . put ( ' р ' , " r " ) ; 
 + charMap . put ( ' с ' , " s " ) ; 
 + charMap . put ( ' т ' , " t " ) ; 
 + charMap . put ( ' у ' , " u " ) ; 
 + charMap . put ( ' ф ' , " f " ) ; 
 + charMap . put ( ' х ' , " h " ) ; 
 + charMap . put ( ' ц ' , " c " ) ; 
 + charMap . put ( ' ч ' , " ch " ) ; 
 + charMap . put ( ' ш ' , " sh " ) ; 
 + charMap . put ( ' щ ' , " sh " ) ; 
 + charMap . put ( ' ъ ' , " ' " ) ; 
 + charMap . put ( ' ы ' , " y " ) ; 
 + charMap . put ( ' ь ' , " ' " ) ; 
 + charMap . put ( ' э ' , " e " ) ; 
 + charMap . put ( ' ю ' , " u " ) ; 
 + charMap . put ( ' я ' , " ya " ) ; 
 + 
 + charMap . put ( ' a ' , " а " ) ; 
 + charMap . put ( ' b ' , " б " ) ; 
 + charMap . put ( ' c ' , " ц " ) ; 
 + charMap . put ( ' d ' , " д " ) ; 
 + charMap . put ( ' e ' , " е " ) ; 
 + charMap . put ( ' f ' , " ф " ) ; 
 + charMap . put ( ' g ' , " г " ) ; 
 + charMap . put ( ' h ' , " х " ) ; 
 + charMap . put ( ' i ' , " и " ) ; 
 + charMap . put ( ' j ' , " д ж " ) ; 
 + charMap . put ( ' k ' , " к " ) ; 
 + charMap . put ( ' l ' , " л " ) ; 
 + charMap . put ( ' m ' , " м " ) ; 
 + charMap . put ( ' n ' , " н " ) ; 
 + charMap . put ( ' o ' , " о " ) ; 
 + charMap . put ( ' p ' , " п " ) ; 
 + charMap . put ( ' q ' , " к " ) ; 
 + charMap . put ( ' r ' , " р " ) ; 
 + charMap . put ( ' s ' , " с " ) ; 
 + charMap . put ( ' t ' , " т " ) ; 
 + charMap . put ( ' u ' , " ю " ) ; 
 + charMap . put ( ' v ' , " в " ) ; 
 + charMap . put ( ' w ' , " в " ) ; 
 + charMap . put ( ' x ' , " к с " ) ; 
 + charMap . put ( ' y ' , " й " ) ; 
 + charMap . put ( ' z ' , " з " ) ; 
 + } 
 + } 
 + } 
 StringBuilder transliteratedString = new StringBuilder ( ) ; 
 for ( int i = 0 ; i < string . length ( ) ; i + + ) { 
 Character ch = string . charAt ( i ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 index 71d1b50 . . d216885 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / ConfigurationBuilder . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import im . actor . core . util . StringMatch ; 
 import im . actor . runtime . Crypto ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . mtproto . ConnectionEndpoint ; 
 + import im . actor . runtime . util . Hex ; 
 import im . actor . runtime . webrtc . WebRTCIceServer ; 
 
 / * * 
 @ @ - 119 , 7 + 120 , 7 @ @ public class ConfigurationBuilder { 
 @ NotNull 
 @ ObjectiveCName ( " addTrustedKey : " ) 
 public ConfigurationBuilder addTrustedKey ( String trustedKey ) { 
 - trustedKeys . add ( new TrustedKey ( Crypto . fromHex ( trustedKey ) ) ) ; 
 + trustedKeys . add ( new TrustedKey ( Hex . fromHex ( trustedKey ) ) ) ; 
 return this ; 
 } 
 
 @ @ - 318 , 7 + 319 , 7 @ @ public class ConfigurationBuilder { 
 @ NotNull 
 @ ObjectiveCName ( " addEndpoint : withKnownIp : " ) 
 public ConfigurationBuilder addEndpoint ( @ NotNull String url ) { 
 - 
 + 
 / / Manual buggy parsing for GWT 
 / / TODO : Correct URL parsing 
 String scheme = url . substring ( 0 , url . indexOf ( " : " ) ) . toLowerCase ( ) ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java 
 index 1c9a6e4 . . e80e9ed 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Crypto . java 
 @ @ - 91 , 31 + 91 , 10 @ @ public class Crypto { 
 * @ return hex string 
 * / 
 public static String hex ( byte [ ] bytes ) { 
 - char [ ] hexChars = new char [ bytes . length * 2 ] ; 
 - for ( int j = 0 ; j < bytes . length ; j + + ) { 
 - int v = bytes [ j ] & 0xFF ; 
 - hexChars [ j * 2 ] = hexArray [ v > > > 4 ] ; 
 - hexChars [ j * 2 + 1 ] = hexArray [ v & 0x0F ] ; 
 - } 
 - return new String ( hexChars ) ; 
 - } 
 - 
 - private static int fromHexShort ( char a ) { 
 - if ( a > = ' 0 ' & & a < = ' 9 ' ) { 
 - return a - ' 0 ' ; 
 - } 
 - if ( a > = ' a ' & & a < = ' f ' ) { 
 - return 10 + ( a - ' a ' ) ; 
 - } 
 - 
 - throw new RuntimeException ( ) ; 
 + return Hex . hex ( bytes ) ; 
 } 
 
 public static byte [ ] fromHex ( String hex ) { 
 - byte [ ] res = new byte [ hex . length ( ) / 2 ] ; 
 - for ( int i = 0 ; i < res . length ; i + + ) { 
 - res [ i ] = ( byte ) ( ( fromHexShort ( hex . charAt ( i * 2 ) ) < < 4 ) + fromHexShort ( hex . charAt ( i * 2 + 1 ) ) ) ; 
 - } 
 - return res ; 
 + return Hex . fromHex ( hex ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / util / Hex . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / util / Hex . java 
 index 8213ad5 . . 391bb16 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / util / Hex . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / util / Hex . java 
 @ @ - 2 , 23 + 2 , 7 @ @ package im . actor . runtime . util ; 
 
 public class Hex { 
 
 - public static byte [ ] fromHex ( String hex ) { 
 - byte [ ] res = new byte [ hex . length ( ) / 2 ] ; 
 - for ( int j = 0 ; j < hex . length ( ) / 2 ; j + + ) { 
 - String dg = hex . charAt ( j * 2 ) + " " + hex . charAt ( j * 2 + 1 ) ; 
 - res [ j ] = ( byte ) Integer . parseInt ( dg , 16 ) ; 
 - } 
 - return res ; 
 - } 
 - 
 - public static byte [ ] fromHexReverse ( String hex ) { 
 - byte [ ] res = new byte [ hex . length ( ) / 2 ] ; 
 - for ( int j = 0 ; j < hex . length ( ) / 2 ; j + + ) { 
 - String dg = hex . charAt ( j * 2 ) + " " + hex . charAt ( j * 2 + 1 ) ; 
 - res [ res . length - j - 1 ] = ( byte ) Integer . parseInt ( dg , 16 ) ; 
 - } 
 - return res ; 
 - } 
 + final protected static char [ ] HEXES _ SMALL = " 0123456789abcdef " . toCharArray ( ) ; 
 
 private static final String HEXES = " 0123456789ABCDEF " ; 
 
 @ @ - 29 , 4 + 13 , 40 @ @ public class Hex { 
 } 
 return hex . toString ( ) ; 
 } 
 + 
 + 
 + / * * 
 + * Calculating lowcase hex string 
 + * 
 + * @ param bytes data for hex 
 + * @ return hex string 
 + * / 
 + public static String hex ( byte [ ] bytes ) { 
 + char [ ] hexChars = new char [ bytes . length * 2 ] ; 
 + for ( int j = 0 ; j < bytes . length ; j + + ) { 
 + int v = bytes [ j ] & 0xFF ; 
 + hexChars [ j * 2 ] = HEXES _ SMALL [ v > > > 4 ] ; 
 + hexChars [ j * 2 + 1 ] = HEXES _ SMALL [ v & 0x0F ] ; 
 + } 
 + return new String ( hexChars ) ; 
 + } 
 + 
 + private static int fromHexShort ( char a ) { 
 + if ( a > = ' 0 ' & & a < = ' 9 ' ) { 
 + return a - ' 0 ' ; 
 + } 
 + if ( a > = ' a ' & & a < = ' f ' ) { 
 + return 10 + ( a - ' a ' ) ; 
 + } 
 + 
 + throw new RuntimeException ( ) ; 
 + } 
 + 
 + public static byte [ ] fromHex ( String hex ) { 
 + byte [ ] res = new byte [ hex . length ( ) / 2 ] ; 
 + for ( int i = 0 ; i < res . length ; i + + ) { 
 + res [ i ] = ( byte ) ( ( fromHexShort ( hex . charAt ( i * 2 ) ) < < 4 ) + fromHexShort ( hex . charAt ( i * 2 + 1 ) ) ) ; 
 + } 
 + return res ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / build . gradle b / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 index 4796c50 . . ba9f7fd 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 + + + b / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 @ @ - 67 , 6 + 67 , 7 @ @ dependencies { 
 
 / / Core 
 compile ' com . squareup . okhttp : okhttp : 2 . 5 . 0 ' 
 + compile ' org . eclipse . paho : org . eclipse . paho . client . mqttv3 : 1 . 0 . 2 ' 
 
 / / Android Support 
 compile ' com . android . support : support - v4 : 23 . 1 . 0 ' 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml 
 index 8728e69 . . 8fe727b 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / AndroidManifest . xml 
 @ @ - 276 , 6 + 276 , 21 @ @ 
 android : enabled = " true " 
 android : exported = " true " / > 
 
 + < service 
 + android : name = " im . actor . sdk . push . ActorPushService " 
 + android : enabled = " true " 
 + android : exported = " true " 
 + android : process = " : actor _ push " / > 
 + 
 + < receiver 
 + android : name = " im . actor . sdk . receivers . SDKPushReceiver " 
 + android : enabled = " true " 
 + android : exported = " true " > 
 + < intent - filter > 
 + < action android : name = " im . actor . push . intent . RECEIVE " / > 
 + < category android : name = " $ { applicationId } " / > 
 + < / intent - filter > 
 + < / receiver > 
 
 < / application > 
 < / manifest > 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 index 04a4226 . . cf2f514 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import im . actor . core . PlatformType ; 
 import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . modules . events . IncomingCall ; 
 import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . ActorContext ; 
 import im . actor . runtime . android . view . BindedViewHolder ; 
 import im . actor . runtime . eventbus . BusSubscriber ; 
 import im . actor . runtime . eventbus . Event ; 
 @ @ - 44 , 6 + 45 , 7 @ @ import im . actor . sdk . intents . ActivityManager ; 
 import im . actor . sdk . intents . ActorIntent ; 
 import im . actor . sdk . intents . ActorIntentActivity ; 
 import im . actor . sdk . intents . ActorIntentFragmentActivity ; 
 + import im . actor . sdk . push . ActorPushRegister ; 
 import im . actor . sdk . services . KeepAliveService ; 
 import im . actor . sdk . util . Devices ; 
 import im . actor . sdk . view . emoji . SmileProcessor ; 
 @ @ - 238 , 8 + 240 , 21 @ @ public class ActorSDK { 
 } 
 
 / / 
 - / / GCM 
 + / / Actor Push 
 / / 
 + 
 + ActorPushRegister . registerForPush ( application , new ActorPushRegister . Callback ( ) { 
 + @ Override 
 + public void onRegistered ( String endpoint ) { 
 + Log . d ( TAG , " On Actor push registered : " + endpoint ) ; 
 + messenger . registerActorPush ( endpoint ) ; 
 + } 
 + } ) ; 
 + 
 + / / 
 + / / GCM 
 + / / 
 + 
 try { 
 final ActorPushManager pushManager = ( ActorPushManager ) Class . forName ( " im . actor . push . PushManager " ) . newInstance ( ) ; 
 if ( pushId ! = 0 ) { 
 @ @ - 249 , 6 + 264 , 10 @ @ public class ActorSDK { 
 e . printStackTrace ( ) ; 
 } 
 
 + / / 
 + / / Calls subscribing 
 + / / 
 + 
 messenger . getEvents ( ) . subscribe ( new BusSubscriber ( ) { 
 @ Override 
 public void onBusEvent ( Event event ) { 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushReceiver . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushReceiver . java 
 new file mode 100644 
 index 0000000 . . 5f4b45b 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushReceiver . java 
 @ @ - 0 , 0 + 1 , 32 @ @ 
 + package im . actor . sdk . push ; 
 + 
 + import android . content . BroadcastReceiver ; 
 + import android . content . Context ; 
 + import android . content . Intent ; 
 + import android . util . Log ; 
 + 
 + / * * 
 + * Abstract class for Actor Push receiver 
 + * / 
 + public abstract class ActorPushReceiver extends BroadcastReceiver { 
 + 
 + public ActorPushReceiver ( ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Context context , Intent intent ) { 
 + if ( " im . actor . push . intent . RECEIVE " . equals ( intent . getAction ( ) ) ) { 
 + onPushReceived ( intent . getStringExtra ( " push _ payload " ) ) ; 
 + } else { 
 + / / Ignore 
 + } 
 + } 
 + 
 + / * * 
 + * Called when push is received 
 + * 
 + * @ param payload payload of the push 
 + * / 
 + public abstract void onPushReceived ( String payload ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushRegister . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushRegister . java 
 new file mode 100644 
 index 0000000 . . efbb693 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushRegister . java 
 @ @ - 0 , 0 + 1 , 113 @ @ 
 + package im . actor . sdk . push ; 
 + 
 + import android . content . Context ; 
 + import android . content . Intent ; 
 + import android . content . SharedPreferences ; 
 + 
 + import com . squareup . okhttp . Callback ; 
 + import com . squareup . okhttp . MediaType ; 
 + import com . squareup . okhttp . OkHttpClient ; 
 + import com . squareup . okhttp . Request ; 
 + import com . squareup . okhttp . RequestBody ; 
 + import com . squareup . okhttp . Response ; 
 + 
 + import org . json . JSONArray ; 
 + import org . json . JSONException ; 
 + import org . json . JSONObject ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . Log ; 
 + 
 + / * * 
 + * Registration for Actor Push 
 + * / 
 + public final class ActorPushRegister { 
 + 
 + private static OkHttpClient client = new OkHttpClient ( ) ; 
 + 
 + public static void registerForPush ( final Context context , final Callback callback ) { 
 + 
 + final SharedPreferences sharedPreferences = context . getSharedPreferences ( " actor _ push _ register " , Context . MODE _ PRIVATE ) ; 
 + String registrationEndpoint = sharedPreferences . getString ( " registration _ endpoint " , null ) ; 
 + String registrationData = sharedPreferences . getString ( " registration _ data " , null ) ; 
 + if ( registrationEndpoint ! = null & & registrationData ! = null ) { 
 + try { 
 + JSONObject data = new JSONObject ( registrationData ) ; 
 + startService ( data , context ) ; 
 + callback . onRegistered ( registrationEndpoint ) ; 
 + return ; 
 + } catch ( JSONException e ) { 
 + e . printStackTrace ( ) ; 
 + sharedPreferences . edit ( ) . clear ( ) . commit ( ) ; 
 + } 
 + } 
 + 
 + final Request request = new Request . Builder ( ) 
 + . url ( " https : / / push . actor . im / apps / 31337 / subscriptions " ) 
 + . method ( " POST " , RequestBody . create ( MediaType . parse ( " application / json " ) , " { } " ) ) 
 + . build ( ) ; 
 + 
 + client . newCall ( request ) . enqueue ( new com . squareup . okhttp . Callback ( ) { 
 + 
 + @ Override 
 + public void onFailure ( Request request , IOException e ) { 
 + / / TODO : Handle ? 
 + } 
 + 
 + @ Override 
 + public void onResponse ( Response response ) throws IOException { 
 + try { 
 + String res = response . body ( ) . string ( ) ; 
 + JSONObject js = new JSONObject ( res ) . getJSONObject ( " data " ) ; 
 + String endpoint = js . getString ( " endpoint " ) ; 
 + sharedPreferences . edit ( ) 
 + . putString ( " registration _ endpoint " , endpoint ) 
 + . putString ( " registration _ data " , js . toString ( ) ) 
 + . commit ( ) ; 
 + startService ( js , context ) ; 
 + Log . d ( " ActorPushRegister " , " Endpoint : " + endpoint ) ; 
 + callback . onRegistered ( endpoint ) ; 
 + } catch ( JSONException e ) { 
 + e . printStackTrace ( ) ; 
 + / / TODO : Handle ? 
 + } 
 + } 
 + } ) ; 
 + 
 + / / topic = UUID . randomUUID ( ) . toString ( ) ; 
 + / / sharedPreferences . edit ( ) . putString ( " topic " , topic ) . commit ( ) ; 
 + / / 
 + / / context . startService ( new Intent ( context , ActorPushService . class ) 
 + / / . putExtra ( " mqtt _ url " , " tcp : / / lab2 . 81port . com : 1883 " ) 
 + / / . putExtra ( " mqtt _ topic " , topic ) ) ; 
 + / / 
 + / / return topic ; 
 + } 
 + 
 + private static void startService ( JSONObject config , Context context ) { 
 + try { 
 + JSONObject object = config . getJSONObject ( " mqttServer " ) ; 
 + JSONArray hostsJ = object . getJSONArray ( " hosts " ) ; 
 + String [ ] hosts = new String [ hostsJ . length ( ) ] ; 
 + for ( int i = 0 ; i < hosts . length ; i + + ) { 
 + hosts [ i ] = hostsJ . getString ( i ) ; 
 + } 
 + String username = object . getString ( " username " ) ; 
 + String password = object . getString ( " password " ) ; 
 + String topic = config . getString ( " topic " ) ; 
 + context . startService ( new Intent ( context , ActorPushService . class ) 
 + . putExtra ( " mqtt _ urls " , hosts ) 
 + . putExtra ( " mqtt _ topic " , topic ) 
 + . putExtra ( " mqtt _ username " , username ) 
 + . putExtra ( " mqtt _ password " , password ) ) ; 
 + 
 + } catch ( JSONException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + 
 + public interface Callback { 
 + void onRegistered ( String endpoint ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushService . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushService . java 
 new file mode 100644 
 index 0000000 . . 4ef5c96 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / push / ActorPushService . java 
 @ @ - 0 , 0 + 1 , 333 @ @ 
 + package im . actor . sdk . push ; 
 + 
 + import android . app . Service ; 
 + import android . content . Intent ; 
 + import android . content . SharedPreferences ; 
 + import android . content . pm . PackageManager ; 
 + import android . content . pm . ResolveInfo ; 
 + import android . os . IBinder ; 
 + import android . util . Log ; 
 + 
 + import org . eclipse . paho . client . mqttv3 . IMqttDeliveryToken ; 
 + import org . eclipse . paho . client . mqttv3 . MqttCallback ; 
 + import org . eclipse . paho . client . mqttv3 . MqttClient ; 
 + import org . eclipse . paho . client . mqttv3 . MqttConnectOptions ; 
 + import org . eclipse . paho . client . mqttv3 . MqttException ; 
 + import org . eclipse . paho . client . mqttv3 . MqttMessage ; 
 + import org . eclipse . paho . client . mqttv3 . persist . MemoryPersistence ; 
 + 
 + import java . util . List ; 
 + import java . util . Random ; 
 + import java . util . UUID ; 
 + import java . util . concurrent . Executor ; 
 + import java . util . concurrent . Executors ; 
 + 
 + / * * 
 + * Actor Push service based on MQTT 
 + * / 
 + public class ActorPushService extends Service implements MqttCallback { 
 + 
 + private static final String TAG = " PushService " ; 
 + 
 + private final Executor connectionExecutor = Executors . newSingleThreadExecutor ( ) ; 
 + 
 + private final MemoryPersistence persistence = new MemoryPersistence ( ) ; 
 + private final MqttConnectOptions connectOptions = new MqttConnectOptions ( ) ; 
 + 
 + private String packageName ; 
 + private String receiverName ; 
 + 
 + private SharedPreferences preferences ; 
 + 
 + private String [ ] mqttUrls ; 
 + private String mqttClientId ; 
 + private String mqttTopic ; 
 + private String mqttUsername ; 
 + private String mqttPassword ; 
 + 
 + private MqttClient mqttClient ; 
 + 
 + private int attemptIndex = 0 ; 
 + private boolean isConnecting = false ; 
 + 
 + private Random random = new Random ( ) ; 
 + 
 + public ActorPushService ( ) { 
 + 
 + / / Configuration on MQTT connection options 
 + connectOptions . setCleanSession ( false ) ; 
 + connectOptions . setConnectionTimeout ( 5 / * 5 seconds * / ) ; 
 + connectOptions . setKeepAliveInterval ( 15 * 60 / * 15 minutes * / ) ; 
 + } 
 + 
 + @ Override 
 + public void onCreate ( ) { 
 + Log . d ( TAG , " onCreate " ) ; 
 + super . onCreate ( ) ; 
 + 
 + / / Loading Application Package 
 + packageName = getApplicationContext ( ) . getPackageName ( ) ; 
 + 
 + / / 
 + / / Searching for Receiver 
 + / / 
 + PackageManager packageManager = getPackageManager ( ) ; 
 + Intent intent = new Intent ( " im . actor . push . intent . RECEIVE " ) ; 
 + List < ResolveInfo > resolveInfoList = packageManager . queryBroadcastReceivers ( intent , 0 ) ; 
 + for ( ResolveInfo r : resolveInfoList ) { 
 + if ( packageName . equals ( r . activityInfo . packageName ) ) { 
 + receiverName = r . activityInfo . name ; 
 + break ; 
 + } 
 + } 
 + 
 + / / 
 + / / Loading current MQTT state 
 + / / 
 + preferences = getSharedPreferences ( " actor _ push _ service " , MODE _ PRIVATE ) ; 
 + 
 + / / 
 + / / Loading unique clientId 
 + / / 
 + mqttClientId = preferences . getString ( " mqtt _ clientId " , null ) ; 
 + if ( mqttClientId = = null ) { 
 + mqttClientId = UUID . randomUUID ( ) . toString ( ) ; 
 + preferences . edit ( ) 
 + . putString ( " mqtt _ clientId " , mqttClientId ) 
 + . commit ( ) ; 
 + } 
 + 
 + / / 
 + / / Loading registration info 
 + / / 
 + String urls = preferences . getString ( " mqtt _ hosts " , null ) ; 
 + if ( urls ! = null ) { 
 + mqttUrls = urls . split ( " , " ) ; 
 + } 
 + mqttTopic = preferences . getString ( " mqtt _ topic " , null ) ; 
 + mqttUsername = preferences . getString ( " mqtt _ username " , null ) ; 
 + mqttPassword = preferences . getString ( " mqtt _ password " , null ) ; 
 + 
 + / / 
 + / / Starting service 
 + / / 
 + if ( mqttUrls = = null | | mqttTopic = = null | | mqttUsername = = null | | mqttPassword = = null ) { 
 + mqttUrls = null ; 
 + mqttTopic = null ; 
 + mqttUsername = null ; 
 + mqttPassword = null ; 
 + Log . d ( TAG , " Not started " ) ; 
 + } else { 
 + tryConnect ( ) ; 
 + } 
 + } 
 + 
 + / / 
 + / / Connection creation 
 + / / 
 + 
 + private synchronized void connectToBroker ( String [ ] hosts , String topic , String username , String password ) { 
 + Log . d ( TAG , " connectToBroker : " + hosts + " , topic : " + topic ) ; 
 + 
 + / / Cancelling old connection 
 + cancelConnection ( ) ; 
 + 
 + / / Saving credentials 
 + mqttUrls = hosts ; 
 + mqttTopic = topic ; 
 + mqttUsername = username ; 
 + mqttPassword = password ; 
 + StringBuilder b = new StringBuilder ( ) ; 
 + for ( int i = 0 ; i < hosts . length ; i + + ) { 
 + if ( i ! = 0 ) { 
 + b . append ( " , " ) ; 
 + } 
 + b . append ( hosts [ i ] ) ; 
 + } 
 + preferences . edit ( ) 
 + . putString ( " mqtt _ url " , b . toString ( ) ) 
 + . putString ( " mqtt _ topic " , mqttTopic ) 
 + . putString ( " mqtt _ username " , mqttUsername ) 
 + . putString ( " mqtt _ password " , mqttPassword ) 
 + . commit ( ) ; 
 + 
 + / / Starting connection 
 + tryConnect ( ) ; 
 + } 
 + 
 + private synchronized void tryConnect ( ) { 
 + Log . d ( TAG , " tryConnect " ) ; 
 + / / If connected 
 + if ( mqttClient ! = null & & mqttClient . isConnected ( ) ) { 
 + Log . d ( TAG , " Already connected " ) ; 
 + return ; 
 + } 
 + 
 + / / Checking state 
 + if ( isConnecting ) { 
 + Log . d ( TAG , " Already connecting " ) ; 
 + return ; 
 + } 
 + isConnecting = true ; 
 + 
 + Log . d ( TAG , " Starting connecting . . . " ) ; 
 + / / Clearing mqttClient 
 + if ( mqttClient ! = null ) { 
 + try { 
 + mqttClient . close ( ) ; 
 + } catch ( MqttException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + mqttClient = null ; 
 + 
 + / / Setting credentials 
 + connectOptions . setUserName ( mqttUsername ) ; 
 + connectOptions . setPassword ( mqttPassword . toCharArray ( ) ) ; 
 + 
 + / / Starting mqtt connection 
 + final int attempt = + + attemptIndex ; 
 + connectionExecutor . execute ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + Log . d ( TAG , " Connecting . . . " ) ; 
 + MqttClient mqttClient ; 
 + try { 
 + mqttClient = new MqttClient ( mqttUrls [ random . nextInt ( mqttUrls . length ) ] , mqttClientId , persistence ) ; 
 + mqttClient . connect ( connectOptions ) ; 
 + Log . d ( TAG , " Connected " ) ; 
 + mqttClient . setCallback ( ActorPushService . this ) ; 
 + mqttClient . subscribe ( mqttTopic , 1 ) ; 
 + Log . d ( TAG , " Complete " ) ; 
 + } catch ( MqttException e ) { 
 + Log . d ( TAG , " Exception " ) ; 
 + e . printStackTrace ( ) ; 
 + onConnectionFailure ( ) ; 
 + return ; 
 + } 
 + Log . d ( TAG , " Success " ) ; 
 + onConnected ( attempt , mqttClient ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + private synchronized void cancelConnection ( ) { 
 + Log . d ( TAG , " cancelConnection " ) ; 
 + isConnecting = false ; 
 + attemptIndex + + ; 
 + 
 + / / Clearing mqttClient 
 + if ( mqttClient ! = null ) { 
 + try { 
 + mqttClient . close ( ) ; 
 + } catch ( MqttException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + mqttClient = null ; 
 + } 
 + 
 + private synchronized void onConnected ( int attempt , MqttClient mqttClient ) { 
 + if ( this . attemptIndex = = attempt ) { 
 + this . mqttClient = mqttClient ; 
 + } else { 
 + / / Incorrect attempt 
 + try { 
 + mqttClient . disconnect ( ) ; 
 + } catch ( MqttException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + try { 
 + mqttClient . close ( ) ; 
 + } catch ( MqttException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + 
 + 
 + } 
 + 
 + private synchronized void onConnectionFailure ( ) { 
 + Log . d ( TAG , " Connect Failure " ) ; 
 + 
 + / / 
 + / / Trying to recreate connection 
 + / / 
 + isConnecting = false ; 
 + tryConnect ( ) ; 
 + } 
 + 
 + / / 
 + / / MQTT callbacks 
 + / / 
 + 
 + @ Override 
 + public synchronized void connectionLost ( Throwable cause ) { 
 + Log . d ( TAG , " Connection Lost " ) ; 
 + 
 + / / Clearing connection 
 + if ( mqttClient ! = null ) { 
 + try { 
 + mqttClient . disconnect ( ) ; 
 + } catch ( MqttException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + try { 
 + mqttClient . close ( ) ; 
 + } catch ( MqttException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + this . mqttClient = null ; 
 + 
 + / / 
 + / / Trying to recreate connection 
 + / / 
 + tryConnect ( ) ; 
 + } 
 + 
 + @ Override 
 + public synchronized void messageArrived ( String topic , MqttMessage message ) throws Exception { 
 + String msg = new String ( message . getPayload ( ) , " utf - 8 " ) ; 
 + Log . d ( TAG , " Received " + topic + " " + msg ) ; 
 + 
 + if ( packageName ! = null & & receiverName ! = null ) { 
 + sendBroadcast ( new Intent ( " im . actor . push . intent . RECEIVE " ) 
 + . setClassName ( packageName , receiverName ) 
 + . putExtra ( " push _ payload " , msg ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public synchronized void deliveryComplete ( IMqttDeliveryToken token ) { 
 + / / Ignore 
 + } 
 + 
 + / / 
 + / / Internals 
 + / / 
 + 
 + @ Override 
 + public IBinder onBind ( Intent intent ) { 
 + / / Do not implement binding as this will probably block from service restarting 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public int onStartCommand ( Intent intent , int flags , int startId ) { 
 + if ( intent . hasExtra ( " mqtt _ urls " ) 
 + & & intent . hasExtra ( " mqtt _ topic " ) 
 + & & intent . hasExtra ( " mqtt _ username " ) 
 + & & intent . hasExtra ( " mqtt _ password " ) ) { 
 + String [ ] url = intent . getStringArrayExtra ( " mqtt _ urls " ) ; 
 + String topic = intent . getStringExtra ( " mqtt _ topic " ) ; 
 + String username = intent . getStringExtra ( " mqtt _ username " ) ; 
 + String password = intent . getStringExtra ( " mqtt _ password " ) ; 
 + connectToBroker ( url , topic , username , password ) ; 
 + } 
 + 
 + / / Making Service restart after killing 
 + / / TODO : May not work correctly on 4 . 4 + on some devices - need to implement workaround 
 + return START _ STICKY ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / receivers / SDKPushReceiver . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / receivers / SDKPushReceiver . java 
 new file mode 100644 
 index 0000000 . . 10e012e 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / receivers / SDKPushReceiver . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package im . actor . sdk . receivers ; 
 + 
 + import android . util . Log ; 
 + 
 + import im . actor . sdk . push . ActorPushReceiver ; 
 + 
 + public class SDKPushReceiver extends ActorPushReceiver { 
 + 
 + @ Override 
 + public void onPushReceived ( String payload ) { 
 + Log . d ( " TestPushReceiver " , " On push received : " + payload ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index d2174c8 . . f208401 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 1976 , 6 + 1976 , 16 @ @ public class Messenger { 
 } 
 
 / * * 
 + * Register actor push 
 + * 
 + * @ param endpoint push endpoint 
 + * / 
 + @ ObjectiveCName ( " registerActorPushWithEndpoint : " ) 
 + public void registerActorPush ( String endpoint ) { 
 + modules . getPushesModule ( ) . registerActorPush ( endpoint ) ; 
 + } 
 + 
 + / * * 
 * Get preferences storage 
 * 
 * @ return the Preferences 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / PushesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / PushesModule . java 
 index 323dcff . . 7ee0d4b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / PushesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / PushesModule . java 
 @ @ - 36 , 6 + 36 , 10 @ @ public class PushesModule extends AbsModule { 
 pushRegisterActor . send ( new PushRegisterActor . RegisterApplePush ( apnsKey , token ) ) ; 
 } 
 
 + public void registerActorPush ( String endpoint ) { 
 + pushRegisterActor . send ( new PushRegisterActor . RegisterActorPush ( endpoint ) ) ; 
 + } 
 + 
 public void resetModule ( ) { 
 pushRegisterActor . send ( new PushRegisterActor . ResendPush ( ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / push / PushRegisterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / push / PushRegisterActor . java 
 index 60ae34b . . a44ffca 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / push / PushRegisterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / push / PushRegisterActor . java 
 @ @ - 4 , 6 + 4 , 10 @ @ 
 
 package im . actor . core . modules . internal . push ; 
 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . core . api . ApiEncryptionKey ; 
 + import im . actor . core . api . rpc . RequestRegisterActorPush ; 
 import im . actor . core . api . rpc . RequestRegisterApplePush ; 
 import im . actor . core . api . rpc . RequestRegisterGooglePush ; 
 import im . actor . core . api . rpc . ResponseVoid ; 
 @ @ - 34 , 6 + 38 , 12 @ @ public class PushRegisterActor extends ModuleActor { 
 registerApplePush ( apnsId , token ) ; 
 } 
 } 
 + if ( preferences ( ) . getBool ( " push . actor " , false ) ) { 
 + if ( ! preferences ( ) . getBool ( " push . actor . registered " , false ) ) { 
 + String endpoint = preferences ( ) . getString ( " push . actor . endpoint " ) ; 
 + registerActorPush ( endpoint ) ; 
 + } 
 + } 
 } 
 
 private void registerGooglePush ( long projectId , String token ) { 
 @ @ - 74 , 6 + 84 , 24 @ @ public class PushRegisterActor extends ModuleActor { 
 } ) ; 
 } 
 
 + private void registerActorPush ( String endpoint ) { 
 + preferences ( ) . putBool ( " push . actor " , true ) ; 
 + preferences ( ) . putBool ( " push . actor . registered " , false ) ; 
 + preferences ( ) . putString ( " push . actor . endpoint " , endpoint ) ; 
 + 
 + request ( new RequestRegisterActorPush ( endpoint , new ArrayList < ApiEncryptionKey > ( ) ) , new RpcCallback < ResponseVoid > ( ) { 
 + @ Override 
 + public void onResult ( ResponseVoid response ) { 
 + preferences ( ) . putBool ( " push . actor . registered " , true ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( RpcException e ) { 
 + 
 + } 
 + } ) ; 
 + } 
 + 
 private void resendPush ( ) { 
 if ( preferences ( ) . getBool ( " push . google " , false ) ) { 
 preferences ( ) . putBool ( " push . google . registered " , false ) ; 
 @ @ - 100 , 6 + 128 , 9 @ @ public class PushRegisterActor extends ModuleActor { 
 } else if ( message instanceof RegisterApplePush ) { 
 RegisterApplePush applePush = ( RegisterApplePush ) message ; 
 registerApplePush ( applePush . getApnsKey ( ) , applePush . getToken ( ) ) ; 
 + } else if ( message instanceof RegisterActorPush ) { 
 + RegisterActorPush actorPush = ( RegisterActorPush ) message ; 
 + registerActorPush ( actorPush . getEndpoint ( ) ) ; 
 } else if ( message instanceof ResendPush ) { 
 resendPush ( ) ; 
 } else { 
 @ @ - 143 , 6 + 174 , 18 @ @ public class PushRegisterActor extends ModuleActor { 
 } 
 } 
 
 + public static class RegisterActorPush { 
 + private String endpoint ; 
 + 
 + public RegisterActorPush ( String endpoint ) { 
 + this . endpoint = endpoint ; 
 + } 
 + 
 + public String getEndpoint ( ) { 
 + return endpoint ; 
 + } 
 + } 
 + 
 public static class ResendPush { 
 
 }
