BLEU SCORE: 0.254331431291972

TEST MSG: fix ( server : test ) : compilation errors
GENERATED MSG: fix ( server : rpc ) : delete vendor credentials on logout

TEST DIFF (one line): diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala < nl > index d2c6b73 . . f5ce894 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala < nl > @ @ - 5 , 6 + 5 , 7 @ @ import java . time . { LocalDateTime , ZoneOffset } < nl > < nl > import cats . data . Xor < nl > import com . google . protobuf . ByteString < nl > + import com . google . protobuf . wrappers . Int32Value < nl > import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . auth . _ < nl > import im . actor . api . rpc . contacts . { ApiPhoneToImport , ResponseGetContacts , UpdateContactRegistered } < nl > @ @ - 484 , 7 + 485 , 7 @ @ final class AuthServiceSpec < nl > whenReady ( db . run ( persist . contact . UserContactRepo . find ( regUser . id , user . id ) ) ) { optContact ⇒ < nl > optContact should not be empty < nl > optContact . get should matchPattern { < nl > - case UserContact ( _ , _ , Some ( _ ) , false ) ⇒ < nl > + case UserContact ( _ , _ , Some ( _ ) , false , _ ) ⇒ < nl > } < nl > } < nl > whenReady ( db . run ( persist . contact . UserContactRepo . findNotDeletedIds ( user . id ) ) ) ( _ shouldBe empty ) < nl > @ @ - 956 , 7 + 957 , 7 @ @ final class AuthServiceSpec < nl > whenReady ( db . run ( persist . contact . UserContactRepo . find ( regUser . id , user . id ) ) ) { optContact ⇒ < nl > optContact should not be empty < nl > optContact . get should matchPattern { < nl > - case UserContact ( _ , _ , _ , false ) ⇒ < nl > + case UserContact ( _ , _ , _ , false , _ ) ⇒ < nl > } < nl > } < nl > } < nl > @ @ - 967 , 7 + 968 , 7 @ @ final class AuthServiceSpec < nl > implicit val clientData = ClientData ( authId , sessionId , Some ( AuthData ( user . id , authSid , 42 ) ) ) < nl > < nl > seqUpdExt . registerGooglePushCredentials ( model . push . GooglePushCredentials ( authId , 22L , " hello " ) ) < nl > - seqUpdExt . registerApplePushCredentials ( model . push . ApplePushCredentials ( authId , 22 , ByteString . copyFrom ( " hello " . getBytes ) ) ) < nl > + seqUpdExt . registerApplePushCredentials ( model . push . ApplePushCredentials ( authId , Some ( Int32Value ( 22 ) ) , ByteString . copyFrom ( " hello " . getBytes ) ) ) < nl > < nl > / / let seqUpdateManager register credentials < nl > Thread . sleep ( 5000L )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > index 98e5b22 . . 0e9ce9c 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > @ @ - 173 , 6 + 173 , 7 @ @ trait AuthHelpers extends Helpers { < nl > for { < nl > _ ← persist . AuthSession . delete ( session . userId , session . id ) < nl > _ ← persist . AuthId . delete ( session . authId ) < nl > + _ = deletePushCredentials ( session . authId ) < nl > } yield { < nl > AuthService . publishAuthIdInvalidated ( m . mediator , session . authId ) < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala < nl > index 81823fd . . 0b44d91 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala < nl > @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . api . rpc . service < nl > import java . net . URLEncoder < nl > import java . time . { LocalDateTime , ZoneOffset } < nl > < nl > + import im . actor . api . rpc . misc . ResponseVoid < nl > import im . actor . server . activation . gate . { GateCodeActivation , GateConfig } < nl > < nl > import scala . concurrent . { ExecutionContext , Future } < nl > @ @ - 12 , 6 + 13 , 7 @ @ import scalaz . \ / < nl > import akka . contrib . pattern . DistributedPubSubExtension < nl > import com . google . protobuf . CodedInputStream < nl > import org . scalatest . Inside . _ < nl > + import im . actor . server . models < nl > < nl > import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . auth . _ < nl > @ @ - 27 , 7 + 29 , 7 @ @ import im . actor . server . mtproto . protocol . { MessageBox , SessionHello } < nl > import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } < nl > import im . actor . server . persist . auth . AuthTransaction < nl > import im . actor . server . presences . { GroupPresenceManager , PresenceManager } < nl > - import im . actor . server . push . WeakUpdatesManager < nl > + import im . actor . server . push . { SeqUpdatesManager , WeakUpdatesManager } < nl > import im . actor . server . session . SessionMessage . _ < nl > import im . actor . server . session . { Session , SessionConfig } < nl > import im . actor . server . sms . AuthSmsEngine < nl > @ @ - 97 , 6 + 99 , 8 @ @ class AuthServiceSpec extends BaseAppSuite { < nl > < nl > it should " register unregistered contacts and send updates for email auth " in s . e24 < nl > < nl > + " Logout " should " remove authId and vendor credentials " in s . e25 < nl > + < nl > object s { < nl > implicit val ec = system . dispatcher < nl > < nl > @ @ - 796 , 6 + 800 , 45 @ @ class AuthServiceSpec extends BaseAppSuite { < nl > } < nl > } < nl > < nl > + def e25 ( ) = { < nl > + val ( user , authId , _ ) = createUser ( ) < nl > + val sessionId = createSessionId ( ) < nl > + implicit val clientData = ClientData ( authId , sessionId , Some ( user . id ) ) < nl > + < nl > + SeqUpdatesManager . setPushCredentials ( authId , models . push . GooglePushCredentials ( authId , 22L , " hello " ) ) < nl > + SeqUpdatesManager . setPushCredentials ( authId , models . push . ApplePushCredentials ( authId , 22 , " hello " . getBytes ( ) ) ) < nl > + < nl > + / / let seqUpdateManager register credentials < nl > + Thread . sleep ( 1000L ) < nl > + whenReady ( db . run ( persist . AuthId . find ( authId ) ) ) { optAuthId ⇒ < nl > + optAuthId shouldBe defined < nl > + } < nl > + whenReady ( db . run ( persist . push . GooglePushCredentials . find ( authId ) ) ) { optGoogleCreds ⇒ < nl > + optGoogleCreds shouldBe defined < nl > + } < nl > + whenReady ( db . run ( persist . push . ApplePushCredentials . find ( authId ) ) ) { appleCreds ⇒ < nl > + appleCreds shouldBe defined < nl > + } < nl > + < nl > + whenReady ( service . handleSignOut ( ) ) { resp ⇒ < nl > + resp should matchPattern { < nl > + case Ok ( ResponseVoid ) ⇒ < nl > + } < nl > + < nl > + } < nl > + / / let seqUpdateManager register credentials < nl > + Thread . sleep ( 1000L ) < nl > + whenReady ( db . run ( persist . AuthId . find ( authId ) ) ) { optAuthId ⇒ < nl > + optAuthId should not be defined < nl > + } < nl > + whenReady ( db . run ( persist . push . GooglePushCredentials . find ( authId ) ) ) { optGoogleCreds ⇒ < nl > + optGoogleCreds should not be defined < nl > + } < nl > + whenReady ( db . run ( persist . push . ApplePushCredentials . find ( authId ) ) ) { appleCreds ⇒ < nl > + appleCreds should not be defined < nl > + } < nl > + } < nl > + < nl > private def startPhoneAuth ( phoneNumber : Long ) ( implicit clientData : ClientData ) : Future [ \ / [ RpcError , ResponseStartPhoneAuth ] ] = { < nl > service . handleStartPhoneAuth ( < nl > phoneNumber = phoneNumber ,

TEST DIFF:
diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala 
 index d2c6b73 . . f5ce894 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . time . { LocalDateTime , ZoneOffset } 
 
 import cats . data . Xor 
 import com . google . protobuf . ByteString 
 + import com . google . protobuf . wrappers . Int32Value 
 import im . actor . api . rpc . _ 
 import im . actor . api . rpc . auth . _ 
 import im . actor . api . rpc . contacts . { ApiPhoneToImport , ResponseGetContacts , UpdateContactRegistered } 
 @ @ - 484 , 7 + 485 , 7 @ @ final class AuthServiceSpec 
 whenReady ( db . run ( persist . contact . UserContactRepo . find ( regUser . id , user . id ) ) ) { optContact ⇒ 
 optContact should not be empty 
 optContact . get should matchPattern { 
 - case UserContact ( _ , _ , Some ( _ ) , false ) ⇒ 
 + case UserContact ( _ , _ , Some ( _ ) , false , _ ) ⇒ 
 } 
 } 
 whenReady ( db . run ( persist . contact . UserContactRepo . findNotDeletedIds ( user . id ) ) ) ( _ shouldBe empty ) 
 @ @ - 956 , 7 + 957 , 7 @ @ final class AuthServiceSpec 
 whenReady ( db . run ( persist . contact . UserContactRepo . find ( regUser . id , user . id ) ) ) { optContact ⇒ 
 optContact should not be empty 
 optContact . get should matchPattern { 
 - case UserContact ( _ , _ , _ , false ) ⇒ 
 + case UserContact ( _ , _ , _ , false , _ ) ⇒ 
 } 
 } 
 } 
 @ @ - 967 , 7 + 968 , 7 @ @ final class AuthServiceSpec 
 implicit val clientData = ClientData ( authId , sessionId , Some ( AuthData ( user . id , authSid , 42 ) ) ) 
 
 seqUpdExt . registerGooglePushCredentials ( model . push . GooglePushCredentials ( authId , 22L , " hello " ) ) 
 - seqUpdExt . registerApplePushCredentials ( model . push . ApplePushCredentials ( authId , 22 , ByteString . copyFrom ( " hello " . getBytes ) ) ) 
 + seqUpdExt . registerApplePushCredentials ( model . push . ApplePushCredentials ( authId , Some ( Int32Value ( 22 ) ) , ByteString . copyFrom ( " hello " . getBytes ) ) ) 
 
 / / let seqUpdateManager register credentials 
 Thread . sleep ( 5000L )

NEAREST DIFF:
diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 index 98e5b22 . . 0e9ce9c 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 @ @ - 173 , 6 + 173 , 7 @ @ trait AuthHelpers extends Helpers { 
 for { 
 _ ← persist . AuthSession . delete ( session . userId , session . id ) 
 _ ← persist . AuthId . delete ( session . authId ) 
 + _ = deletePushCredentials ( session . authId ) 
 } yield { 
 AuthService . publishAuthIdInvalidated ( m . mediator , session . authId ) 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala 
 index 81823fd . . 0b44d91 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala 
 @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . server . api . rpc . service 
 import java . net . URLEncoder 
 import java . time . { LocalDateTime , ZoneOffset } 
 
 + import im . actor . api . rpc . misc . ResponseVoid 
 import im . actor . server . activation . gate . { GateCodeActivation , GateConfig } 
 
 import scala . concurrent . { ExecutionContext , Future } 
 @ @ - 12 , 6 + 13 , 7 @ @ import scalaz . \ / 
 import akka . contrib . pattern . DistributedPubSubExtension 
 import com . google . protobuf . CodedInputStream 
 import org . scalatest . Inside . _ 
 + import im . actor . server . models 
 
 import im . actor . api . rpc . _ 
 import im . actor . api . rpc . auth . _ 
 @ @ - 27 , 7 + 29 , 7 @ @ import im . actor . server . mtproto . protocol . { MessageBox , SessionHello } 
 import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } 
 import im . actor . server . persist . auth . AuthTransaction 
 import im . actor . server . presences . { GroupPresenceManager , PresenceManager } 
 - import im . actor . server . push . WeakUpdatesManager 
 + import im . actor . server . push . { SeqUpdatesManager , WeakUpdatesManager } 
 import im . actor . server . session . SessionMessage . _ 
 import im . actor . server . session . { Session , SessionConfig } 
 import im . actor . server . sms . AuthSmsEngine 
 @ @ - 97 , 6 + 99 , 8 @ @ class AuthServiceSpec extends BaseAppSuite { 
 
 it should " register unregistered contacts and send updates for email auth " in s . e24 
 
 + " Logout " should " remove authId and vendor credentials " in s . e25 
 + 
 object s { 
 implicit val ec = system . dispatcher 
 
 @ @ - 796 , 6 + 800 , 45 @ @ class AuthServiceSpec extends BaseAppSuite { 
 } 
 } 
 
 + def e25 ( ) = { 
 + val ( user , authId , _ ) = createUser ( ) 
 + val sessionId = createSessionId ( ) 
 + implicit val clientData = ClientData ( authId , sessionId , Some ( user . id ) ) 
 + 
 + SeqUpdatesManager . setPushCredentials ( authId , models . push . GooglePushCredentials ( authId , 22L , " hello " ) ) 
 + SeqUpdatesManager . setPushCredentials ( authId , models . push . ApplePushCredentials ( authId , 22 , " hello " . getBytes ( ) ) ) 
 + 
 + / / let seqUpdateManager register credentials 
 + Thread . sleep ( 1000L ) 
 + whenReady ( db . run ( persist . AuthId . find ( authId ) ) ) { optAuthId ⇒ 
 + optAuthId shouldBe defined 
 + } 
 + whenReady ( db . run ( persist . push . GooglePushCredentials . find ( authId ) ) ) { optGoogleCreds ⇒ 
 + optGoogleCreds shouldBe defined 
 + } 
 + whenReady ( db . run ( persist . push . ApplePushCredentials . find ( authId ) ) ) { appleCreds ⇒ 
 + appleCreds shouldBe defined 
 + } 
 + 
 + whenReady ( service . handleSignOut ( ) ) { resp ⇒ 
 + resp should matchPattern { 
 + case Ok ( ResponseVoid ) ⇒ 
 + } 
 + 
 + } 
 + / / let seqUpdateManager register credentials 
 + Thread . sleep ( 1000L ) 
 + whenReady ( db . run ( persist . AuthId . find ( authId ) ) ) { optAuthId ⇒ 
 + optAuthId should not be defined 
 + } 
 + whenReady ( db . run ( persist . push . GooglePushCredentials . find ( authId ) ) ) { optGoogleCreds ⇒ 
 + optGoogleCreds should not be defined 
 + } 
 + whenReady ( db . run ( persist . push . ApplePushCredentials . find ( authId ) ) ) { appleCreds ⇒ 
 + appleCreds should not be defined 
 + } 
 + } 
 + 
 private def startPhoneAuth ( phoneNumber : Long ) ( implicit clientData : ClientData ) : Future [ \ / [ RpcError , ResponseStartPhoneAuth ] ] = { 
 service . handleStartPhoneAuth ( 
 phoneNumber = phoneNumber ,
