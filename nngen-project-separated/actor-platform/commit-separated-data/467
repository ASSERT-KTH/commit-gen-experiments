BLEU SCORE: 0.4216120484488187

TEST MSG: fix ( server : messaging ) : fixed DialogRoot snapshot recovery
GENERATED MSG: test ( server : messaging ) : ( un ) archive spec

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > index 2d44f6c . . e5a0065 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > @ @ - 79 , 7 + 79 , 7 @ @ private final case class DialogRootState ( < nl > < nl > dialogGroups . foldLeft ( state ) { < nl > case ( acc , DialogGroup ( group , infos ) ) ⇒ < nl > - withDialogsInGroup ( group , infos map ( di ⇒ SortableDialog ( di . date , di . getPeer ) ) ) < nl > + acc . withDialogsInGroup ( group , infos map ( di ⇒ SortableDialog ( di . date , di . getPeer ) ) ) < nl > } < nl > } < nl > } < nl > @ @ - 139 , 14 + 139 , 19 @ @ private final case class DialogRootState ( < nl > ) < nl > } < nl > < nl > - private def withDialogsInGroup ( group : DialogGroupType , sortableDialogs : Seq [ SortableDialog ] ) = < nl > + private def withDialogsInGroup ( group : DialogGroupType , sortableDialogs : Seq [ SortableDialog ] ) = { < nl > + val activeBase = < nl > + if ( this . active . contains ( group ) ) this . active < nl > + else this . active + ( group → SortedSet . empty ( SortableDialog . ordering ) ) < nl > + < nl > copy ( < nl > - active = this . active map { < nl > + active = activeBase map { < nl > case ( ` group ` , dialogs ) ⇒ ( group , dialogs + + sortableDialogs ) < nl > case other ⇒ other < nl > } , < nl > activePeers = this . activePeers + + sortableDialogs < nl > ) < nl > + } < nl > < nl > private def dialogGroup ( sortableDialog : SortableDialog , isFavourite : Boolean = false ) = { < nl > val group = ( isFavourite , sortableDialog . peer . typ ) match { < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > index b76cbc6 . . f7cb830 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . dialog < nl > < nl > import java . time . Instant < nl > < nl > + import akka . persistence . SnapshotMetadata < nl > import im . actor . api . rpc . PeersImplicits < nl > import im . actor . server . ActorSuite < nl > import im . actor . server . cqrs . ProcessorStateProbe < nl > @ @ - 32 , 6 + 33 , 7 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { < nl > getActivePeers should be ( Seq ( alice , bob ) ) < nl > < nl > getGroupPeers ( DialogGroupType . DirectMessages ) should be ( Seq ( alice , bob ) ) < nl > + checkSnapshot < nl > } < nl > < nl > def favouriteUnfavourite ( ) = { < nl > @ @ - 46 , 6 + 48 , 7 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { < nl > < nl > probe . state . active . keys shouldNot contain ( DialogGroupType . Favourites ) < nl > getGroupPeers ( DialogGroupType . DirectMessages ) should contain ( alice ) < nl > + checkSnapshot < nl > } < nl > < nl > def removeFromArchived ( ) = { < nl > @ @ - 55 , 17 + 58 , 21 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { < nl > < nl > probe . commit ( Archived ( Instant . now , Some ( alice ) ) ) < nl > getArchivedPeers should be ( Seq ( alice ) ) < nl > + checkSnapshot < nl > < nl > probe . commit ( Unarchived ( Instant . now , Some ( alice ) ) ) < nl > getArchivedPeers should be ( Seq . empty ) < nl > getGroupPeers ( DialogGroupType . DirectMessages ) should be ( Seq ( alice ) ) < nl > + checkSnapshot < nl > < nl > probe . commit ( Archived ( Instant . now , Some ( alice ) ) ) < nl > getGroupPeers ( DialogGroupType . DirectMessages ) should be ( Seq . empty ) < nl > + checkSnapshot < nl > < nl > probe . commit ( Favourited ( Instant . now , Some ( alice ) ) ) < nl > getArchivedPeers should be ( Seq . empty ) < nl > getGroupPeers ( DialogGroupType . Favourites ) should be ( Seq ( alice ) ) < nl > + checkSnapshot < nl > } < nl > < nl > private def getGroupPeers ( typ : DialogGroupType ) ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = < nl > @ @ - 76 , 4 + 83 , 7 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { < nl > < nl > private def getArchivedPeers ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = < nl > probe . state . archived . toSeq . map ( _ . peer ) < nl > + < nl > + private def checkSnapshot ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = < nl > + DialogRootState . initial . withSnapshot ( SnapshotMetadata ( " " , 0 ) , probe . state . snapshot ) should be ( probe . state ) < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > index b1eab08 . . b76cbc6 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala < nl > @ @ - 11 , 6 + 11 , 7 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { < nl > it should " have DMs and Groups by default " in default < nl > it should " sort dialogs by appearing " in show < nl > it should " remove Favourites on Unfavourite " in favouriteUnfavourite < nl > + it should " remove from Archived on Favourite or new message " in removeFromArchived < nl > < nl > import DialogRootEvents . _ < nl > < nl > @ @ - 47 , 9 + 48 , 32 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { < nl > getGroupPeers ( DialogGroupType . DirectMessages ) should contain ( alice ) < nl > } < nl > < nl > + def removeFromArchived ( ) = { < nl > + implicit val probe = ProcessorStateProbe ( DialogRootState . initial ) < nl > + < nl > + val alice = Peer . privat ( 1 ) < nl > + < nl > + probe . commit ( Archived ( Instant . now , Some ( alice ) ) ) < nl > + getArchivedPeers should be ( Seq ( alice ) ) < nl > + < nl > + probe . commit ( Unarchived ( Instant . now , Some ( alice ) ) ) < nl > + getArchivedPeers should be ( Seq . empty ) < nl > + getGroupPeers ( DialogGroupType . DirectMessages ) should be ( Seq ( alice ) ) < nl > + < nl > + probe . commit ( Archived ( Instant . now , Some ( alice ) ) ) < nl > + getGroupPeers ( DialogGroupType . DirectMessages ) should be ( Seq . empty ) < nl > + < nl > + probe . commit ( Favourited ( Instant . now , Some ( alice ) ) ) < nl > + getArchivedPeers should be ( Seq . empty ) < nl > + getGroupPeers ( DialogGroupType . Favourites ) should be ( Seq ( alice ) ) < nl > + } < nl > + < nl > private def getGroupPeers ( typ : DialogGroupType ) ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = < nl > probe . state . active . get ( typ ) . get . toSeq . map ( _ . peer ) < nl > < nl > private def getActivePeers ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = < nl > probe . state . activePeers . toSeq . map ( _ . peer ) < nl > + < nl > + private def getArchivedPeers ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = < nl > + probe . state . archived . toSeq . map ( _ . peer ) < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 index 2d44f6c . . e5a0065 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 @ @ - 79 , 7 + 79 , 7 @ @ private final case class DialogRootState ( 
 
 dialogGroups . foldLeft ( state ) { 
 case ( acc , DialogGroup ( group , infos ) ) ⇒ 
 - withDialogsInGroup ( group , infos map ( di ⇒ SortableDialog ( di . date , di . getPeer ) ) ) 
 + acc . withDialogsInGroup ( group , infos map ( di ⇒ SortableDialog ( di . date , di . getPeer ) ) ) 
 } 
 } 
 } 
 @ @ - 139 , 14 + 139 , 19 @ @ private final case class DialogRootState ( 
 ) 
 } 
 
 - private def withDialogsInGroup ( group : DialogGroupType , sortableDialogs : Seq [ SortableDialog ] ) = 
 + private def withDialogsInGroup ( group : DialogGroupType , sortableDialogs : Seq [ SortableDialog ] ) = { 
 + val activeBase = 
 + if ( this . active . contains ( group ) ) this . active 
 + else this . active + ( group → SortedSet . empty ( SortableDialog . ordering ) ) 
 + 
 copy ( 
 - active = this . active map { 
 + active = activeBase map { 
 case ( ` group ` , dialogs ) ⇒ ( group , dialogs + + sortableDialogs ) 
 case other ⇒ other 
 } , 
 activePeers = this . activePeers + + sortableDialogs 
 ) 
 + } 
 
 private def dialogGroup ( sortableDialog : SortableDialog , isFavourite : Boolean = false ) = { 
 val group = ( isFavourite , sortableDialog . peer . typ ) match { 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 index b76cbc6 . . f7cb830 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . dialog 
 
 import java . time . Instant 
 
 + import akka . persistence . SnapshotMetadata 
 import im . actor . api . rpc . PeersImplicits 
 import im . actor . server . ActorSuite 
 import im . actor . server . cqrs . ProcessorStateProbe 
 @ @ - 32 , 6 + 33 , 7 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { 
 getActivePeers should be ( Seq ( alice , bob ) ) 
 
 getGroupPeers ( DialogGroupType . DirectMessages ) should be ( Seq ( alice , bob ) ) 
 + checkSnapshot 
 } 
 
 def favouriteUnfavourite ( ) = { 
 @ @ - 46 , 6 + 48 , 7 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { 
 
 probe . state . active . keys shouldNot contain ( DialogGroupType . Favourites ) 
 getGroupPeers ( DialogGroupType . DirectMessages ) should contain ( alice ) 
 + checkSnapshot 
 } 
 
 def removeFromArchived ( ) = { 
 @ @ - 55 , 17 + 58 , 21 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { 
 
 probe . commit ( Archived ( Instant . now , Some ( alice ) ) ) 
 getArchivedPeers should be ( Seq ( alice ) ) 
 + checkSnapshot 
 
 probe . commit ( Unarchived ( Instant . now , Some ( alice ) ) ) 
 getArchivedPeers should be ( Seq . empty ) 
 getGroupPeers ( DialogGroupType . DirectMessages ) should be ( Seq ( alice ) ) 
 + checkSnapshot 
 
 probe . commit ( Archived ( Instant . now , Some ( alice ) ) ) 
 getGroupPeers ( DialogGroupType . DirectMessages ) should be ( Seq . empty ) 
 + checkSnapshot 
 
 probe . commit ( Favourited ( Instant . now , Some ( alice ) ) ) 
 getArchivedPeers should be ( Seq . empty ) 
 getGroupPeers ( DialogGroupType . Favourites ) should be ( Seq ( alice ) ) 
 + checkSnapshot 
 } 
 
 private def getGroupPeers ( typ : DialogGroupType ) ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = 
 @ @ - 76 , 4 + 83 , 7 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { 
 
 private def getArchivedPeers ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = 
 probe . state . archived . toSeq . map ( _ . peer ) 
 + 
 + private def checkSnapshot ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = 
 + DialogRootState . initial . withSnapshot ( SnapshotMetadata ( " " , 0 ) , probe . state . snapshot ) should be ( probe . state ) 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 index b1eab08 . . b76cbc6 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogRootStateSpec . scala 
 @ @ - 11 , 6 + 11 , 7 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { 
 it should " have DMs and Groups by default " in default 
 it should " sort dialogs by appearing " in show 
 it should " remove Favourites on Unfavourite " in favouriteUnfavourite 
 + it should " remove from Archived on Favourite or new message " in removeFromArchived 
 
 import DialogRootEvents . _ 
 
 @ @ - 47 , 9 + 48 , 32 @ @ final class DialogRootStateSpec extends ActorSuite with PeersImplicits { 
 getGroupPeers ( DialogGroupType . DirectMessages ) should contain ( alice ) 
 } 
 
 + def removeFromArchived ( ) = { 
 + implicit val probe = ProcessorStateProbe ( DialogRootState . initial ) 
 + 
 + val alice = Peer . privat ( 1 ) 
 + 
 + probe . commit ( Archived ( Instant . now , Some ( alice ) ) ) 
 + getArchivedPeers should be ( Seq ( alice ) ) 
 + 
 + probe . commit ( Unarchived ( Instant . now , Some ( alice ) ) ) 
 + getArchivedPeers should be ( Seq . empty ) 
 + getGroupPeers ( DialogGroupType . DirectMessages ) should be ( Seq ( alice ) ) 
 + 
 + probe . commit ( Archived ( Instant . now , Some ( alice ) ) ) 
 + getGroupPeers ( DialogGroupType . DirectMessages ) should be ( Seq . empty ) 
 + 
 + probe . commit ( Favourited ( Instant . now , Some ( alice ) ) ) 
 + getArchivedPeers should be ( Seq . empty ) 
 + getGroupPeers ( DialogGroupType . Favourites ) should be ( Seq ( alice ) ) 
 + } 
 + 
 private def getGroupPeers ( typ : DialogGroupType ) ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = 
 probe . state . active . get ( typ ) . get . toSeq . map ( _ . peer ) 
 
 private def getActivePeers ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = 
 probe . state . activePeers . toSeq . map ( _ . peer ) 
 + 
 + private def getArchivedPeers ( implicit probe : ProcessorStateProbe [ DialogRootState ] ) = 
 + probe . state . archived . toSeq . map ( _ . peer ) 
 } 
 \ No newline at end of file
