BLEU SCORE: 0.15851165692617147

TEST MSG: fix ( server : core ) : more logging on break stashing
GENERATED MSG: fix ( server ) : fix ProcessorState

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > index 3783955 . . 6318bb5 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > @ @ - 87 , 7 + 87 , 10 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFuture < nl > < nl > private final def unstashing : Receive = { < nl > case BreakStashing ( ts , evts , state ) ⇒ < nl > - log . error ( " Break stashing . Was in stashing since : { } , with events : { } " , ts , ( evts mkString " ; " ) ) < nl > + val strEvents = evts map { e ⇒ < nl > + s " { type : $ { e . getClass . getName } , event : $ e } " < nl > + } < nl > + log . error ( " Break stashing . Was in stashing since : { } , with events : { } " , ts , strEvents mkString " ; " ) < nl > context become working ( state ) < nl > unstashAll ( ) < nl > case UnstashAndWork ( evt , s ) ⇒
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > index 311a0a1 . . 3f61fcb 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > @ @ - 20 , 6 + 20 , 8 @ @ import scala . util . { Failure , Success } < nl > case object EntityNotFound extends RuntimeException with NoStackTrace < nl > case object StopOffice < nl > < nl > + trait ProcessorState < nl > + < nl > trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFutures { < nl > < nl > case class UnstashAndWork ( evt : Event , state : State )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 index 3783955 . . 6318bb5 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 @ @ - 87 , 7 + 87 , 10 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFuture 
 
 private final def unstashing : Receive = { 
 case BreakStashing ( ts , evts , state ) ⇒ 
 - log . error ( " Break stashing . Was in stashing since : { } , with events : { } " , ts , ( evts mkString " ; " ) ) 
 + val strEvents = evts map { e ⇒ 
 + s " { type : $ { e . getClass . getName } , event : $ e } " 
 + } 
 + log . error ( " Break stashing . Was in stashing since : { } , with events : { } " , ts , strEvents mkString " ; " ) 
 context become working ( state ) 
 unstashAll ( ) 
 case UnstashAndWork ( evt , s ) ⇒

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 index 311a0a1 . . 3f61fcb 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 @ @ - 20 , 6 + 20 , 8 @ @ import scala . util . { Failure , Success } 
 case object EntityNotFound extends RuntimeException with NoStackTrace 
 case object StopOffice 
 
 + trait ProcessorState 
 + 
 trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFutures { 
 
 case class UnstashAndWork ( evt : Event , state : State )
