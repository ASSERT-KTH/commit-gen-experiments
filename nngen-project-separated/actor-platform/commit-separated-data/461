BLEU SCORE: 0.7016879391277371

TEST MSG: chore ( server : messaging ) : DialogProcessor migrator to eventsourcing
GENERATED MSG: chore ( server : messaging ) : DialogRoot migrator to eventsourcing

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > index eab1f4d . . 0874089 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala < nl > @ @ - 46 , 7 + 46 , 8 @ @ private [ dialog ] final class DialogProcessor ( val userId : Int , val peer : Peer , ext < nl > with AlertingActor < nl > with DialogCommandHandlers < nl > with ActorFutures < nl > - with StashingActor { < nl > + with StashingActor < nl > + with DialogProcessorMigration { < nl > import DialogCommands . _ < nl > import DialogQueries . _ < nl > import DialogProcessor . _ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > new file mode 100644 < nl > index 0000000 . . 42ac6b9 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > @ @ - 0 , 0 + 1 , 72 @ @ < nl > + package im . actor . server . dialog < nl > + < nl > + import java . time . Instant < nl > + < nl > + import akka . actor . Status < nl > + import akka . pattern . pipe < nl > + import im . actor . server . cqrs . { Event , Processor } < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . model . { DialogObsolete , Peer } < nl > + import im . actor . server . persist . HistoryMessageRepo < nl > + import im . actor . server . persist . dialog . DialogRepo < nl > + < nl > + trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > + import DialogEvents . _ < nl > + import context . dispatcher < nl > + < nl > + private case class PersistEvents ( events : List [ Event ] ) < nl > + < nl > + private var needMigrate = true < nl > + < nl > + val userId : Int < nl > + val peer : Peer < nl > + private val db = DbExtension ( context . system ) . db < nl > + < nl > + override def afterCommit ( e : Event ) = e match { < nl > + case Initialized ( ) ⇒ needMigrate = false < nl > + case _ ⇒ < nl > + } < nl > + < nl > + override protected def onRecoveryCompleted ( ) : Unit = { < nl > + super . onRecoveryCompleted ( ) < nl > + if ( needMigrate ) < nl > + migrate ( ) < nl > + } < nl > + < nl > + private def migrating : Receive = { < nl > + case d : DialogObsolete ⇒ < nl > + ( for { < nl > + models ← db . run ( HistoryMessageRepo . findAfter ( userId , peer , d . ownerLastReadAt , Long . MaxValue ) ) < nl > + newMessages = models map { m ⇒ < nl > + NewMessage ( < nl > + randomId = m . randomId , < nl > + date = Instant . ofEpochMilli ( m . date . getMillis ) , < nl > + senderUserId = m . senderUserId , < nl > + messageHeader = m . messageContentHeader < nl > + ) < nl > + } < nl > + } yield PersistEvents ( < nl > + Initialized ( ) + : < nl > + newMessages . toList : + < nl > + MessagesRead ( Instant . ofEpochMilli ( d . lastReadAt . getMillis ) ) < nl > + ) ) pipeTo self < nl > + < nl > + case PersistEvents ( events ) ⇒ < nl > + persistAll ( events ) { _ ⇒ < nl > + unstashAll ( ) < nl > + context become receiveCommand < nl > + } < nl > + case Status . Failure ( e ) ⇒ < nl > + log . error ( e , " Failed to migrate " ) < nl > + throw e < nl > + case _ ⇒ stash ( ) < nl > + } < nl > + < nl > + private def migrate ( ) : Unit = { < nl > + context become migrating < nl > + db . run ( DialogRepo . findDialog ( userId , peer ) ) map { < nl > + case Some ( model ) ⇒ self ! model < nl > + case _ ⇒ self ! Status . Failure ( new IllegalStateException ( " Cannot find dialog " ) ) < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > index ca7ffd9 . . 048a0fd 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > @ @ - 4 , 25 + 4 , 25 @ @ import java . time . Instant < nl > < nl > import akka . actor . Status < nl > import akka . pattern . pipe < nl > - import im . actor . server . cqrs . { Event , Processor } < nl > + import im . actor . server . cqrs . { Event , Processor } < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . model . DialogObsolete < nl > import im . actor . server . persist . dialog . DialogRepo < nl > < nl > - private case class CreateEvents ( models : Seq [ DialogObsolete ] ) < nl > - < nl > trait DialogRootMigration extends Processor [ DialogRootState ] { < nl > < nl > import DialogRootEvents . _ < nl > import context . dispatcher < nl > < nl > + private case class CreateEvents ( models : Seq [ DialogObsolete ] ) < nl > + < nl > val userId : Int < nl > private val db = DbExtension ( context . system ) . db < nl > private var needMigrate = true < nl > < nl > override def afterCommit ( e : Event ) : Unit = e match { < nl > case Initialized ( _ ) ⇒ needMigrate = false < nl > - case _ ⇒ < nl > + case _ ⇒ < nl > } < nl > < nl > override protected def onRecoveryCompleted ( ) : Unit = { < nl > @ @ - 34 , 6 + 34 , 7 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { < nl > private def migrating : Receive = { < nl > case CreateEvents ( models ) ⇒ < nl > createEvents ( models ) { < nl > + unstashAll ( ) < nl > context become receiveCommand < nl > } < nl > case Status . Failure ( e ) ⇒
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > index 549754f . . 1c70ec7 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto < nl > @ @ - 79 , 6 + 79 , 12 @ @ message DialogRootEvents { < nl > int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > Peer peer = 2 ; < nl > } < nl > + < nl > + message Initialized { < nl > + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogRootEvent " ; < nl > + < nl > + int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > + } < nl > } < nl > < nl > message DialogRootCommands { < nl > @ @ - 340 , 4 + 346 , 8 @ @ message DialogEvents { < nl > message CounterReset { < nl > option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogEvent " ; < nl > } < nl > + < nl > + message Initialized { < nl > + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogEvent " ; < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala < nl > index d4b028a . . 2d2b249 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala < nl > @ @ - 36 , 8 + 36 , 8 @ @ trait IncrementalSnapshots [ S < : ProcessorState [ S ] ] extends ProcessorStateControl < nl > < nl > val SnapshotCommitsThreshold = 100 < nl > < nl > - override protected def afterCommit ( ) : Unit = { < nl > - super . afterCommit ( ) < nl > + override protected def afterCommit ( e : Event ) : Unit = { < nl > + super . afterCommit ( e ) < nl > _ commitsNum + = 1 < nl > if ( _ commitsNum = = SnapshotCommitsThreshold ) { < nl > log . debug ( " Saving snapshot due to threshold hit " ) < nl > @ @ - 56 , 15 + 56 , 15 @ @ trait ProcessorStateControl [ S < : ProcessorState [ S ] ] { < nl > def setState ( state : S ) = this . _ state = state < nl > < nl > def commit ( e : Event ) : S = { < nl > - beforeCommit ( ) < nl > + beforeCommit ( e ) < nl > setState ( state . updated ( e ) ) < nl > - afterCommit ( ) < nl > + afterCommit ( e ) < nl > state < nl > } < nl > < nl > - protected def beforeCommit ( ) = { } < nl > + protected def beforeCommit ( e : Event ) = { } < nl > < nl > - protected def afterCommit ( ) = { } < nl > + protected def afterCommit ( e : Event ) = { } < nl > } < nl > < nl > object ProcessorStateProbe { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > index 6a0b95e . . bb01b2d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala < nl > @ @ - 92 , 10 + 92 , 11 @ @ private trait DialogRootQueryHandlers { < nl > } < nl > } < nl > < nl > - private class DialogRoot ( userId : Int , extensions : Seq [ ApiExtension ] ) < nl > + private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) < nl > extends Processor [ DialogRootState ] < nl > with IncrementalSnapshots [ DialogRootState ] < nl > - with DialogRootQueryHandlers { < nl > + with DialogRootQueryHandlers < nl > + with DialogRootMigration { < nl > import DialogRootEvents . _ < nl > import DialogRootQueries . _ < nl > import DialogRootCommands . _ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > new file mode 100644 < nl > index 0000000 . . ca7ffd9 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > @ @ - 0 , 0 + 1 , 72 @ @ < nl > + package im . actor . server . dialog < nl > + < nl > + import java . time . Instant < nl > + < nl > + import akka . actor . Status < nl > + import akka . pattern . pipe < nl > + import im . actor . server . cqrs . { Event , Processor } < nl > + import im . actor . server . db . DbExtension < nl > + import im . actor . server . model . DialogObsolete < nl > + import im . actor . server . persist . dialog . DialogRepo < nl > + < nl > + private case class CreateEvents ( models : Seq [ DialogObsolete ] ) < nl > + < nl > + trait DialogRootMigration extends Processor [ DialogRootState ] { < nl > + < nl > + import DialogRootEvents . _ < nl > + import context . dispatcher < nl > + < nl > + val userId : Int < nl > + private val db = DbExtension ( context . system ) . db < nl > + private var needMigrate = true < nl > + < nl > + override def afterCommit ( e : Event ) : Unit = e match { < nl > + case Initialized ( _ ) ⇒ needMigrate = false < nl > + case _ ⇒ < nl > + } < nl > + < nl > + override protected def onRecoveryCompleted ( ) : Unit = { < nl > + super . onRecoveryCompleted ( ) < nl > + if ( needMigrate ) < nl > + migrate ( ) < nl > + } < nl > + < nl > + private def migrating : Receive = { < nl > + case CreateEvents ( models ) ⇒ < nl > + createEvents ( models ) { < nl > + context become receiveCommand < nl > + } < nl > + case Status . Failure ( e ) ⇒ < nl > + log . error ( e , " Failed to migrate " ) < nl > + throw e < nl > + case _ ⇒ stash ( ) < nl > + } < nl > + < nl > + private def migrate ( ) : Unit = { < nl > + context . become ( migrating ) < nl > + < nl > + ( for { < nl > + models ← db . run ( DialogRepo . fetchDialogs ( userId ) ) < nl > + } yield CreateEvents ( models ) ) pipeTo self < nl > + } < nl > + < nl > + private def createEvents ( models : Seq [ DialogObsolete ] ) ( onComplete : ⇒ Unit ) : Unit = { < nl > + val created = models map { dialog ⇒ < nl > + Created ( Instant . ofEpochMilli ( dialog . createdAt . getMillis ) , Some ( dialog . peer ) ) < nl > + } < nl > + < nl > + val archived = models . view . filter ( _ . archivedAt . isDefined ) map { dialog ⇒ < nl > + Archived ( Instant . ofEpochMilli ( dialog . archivedAt . get . getMillis ) , Some ( dialog . peer ) ) < nl > + } < nl > + < nl > + var ts = Instant . now ( ) < nl > + val favourited = models . view . filter ( _ . isFavourite ) map { dialog ⇒ < nl > + ts = ts . plusMillis ( 1 ) < nl > + Favourited ( ts , Some ( dialog . peer ) ) < nl > + } < nl > + < nl > + persistAll ( Initialized ( Instant . now ( ) ) + : ( created + + archived + + favourited ) . toList ) { _ ⇒ < nl > + onComplete < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > index 58b76bc . . de032bc 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala < nl > @ @ - 49 , 7 + 49 , 7 @ @ private object DialogRootState { < nl > ) < nl > } < nl > < nl > - private final case class DialogRootState ( < nl > + private [ dialog ] final case class DialogRootState ( < nl > active : Map [ DialogGroupType , SortedSet [ SortableDialog ] ] , < nl > activePeers : SortedSet [ SortableDialog ] , < nl > archived : SortedSet [ SortableDialog ] < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala < nl > index dfd8365 . . 00247f7 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala < nl > @ @ - 4 , 10 + 4 , 13 @ @ import com . github . tototoshi . slick . PostgresJodaSupport . _ < nl > import im . actor . server . db . ActorPostgresDriver . api . _ < nl > import im . actor . server . model . _ < nl > import org . joda . time . DateTime < nl > + import slick . dbio . DBIOAction < nl > + import slick . dbio . Effect . Read < nl > import slick . lifted . ColumnOrdered < nl > + import slick . profile . FixedSqlStreamingAction < nl > < nl > import scala . concurrent . ExecutionContext < nl > - import scala . util . { Success , Failure } < nl > + import scala . util . { Failure , Success } < nl > < nl > final class DialogCommonTable ( tag : Tag ) extends Table [ DialogCommon ] ( tag , " dialog _ commons " ) { < nl > < nl > @ @ - 115 , 6 + 118 , 8 @ @ object DialogRepo extends UserDialogOperations with DialogCommonOperations { < nl > < nl > private val byPKC = Compiled ( byPKSimple _ ) < nl > < nl > + private val byUserC = Compiled ( byUserId _ ) < nl > + < nl > private val archived = DialogRepo . dialogs . filter ( _ . _ 2 . archivedAt . isDefined ) < nl > < nl > private val notArchived = DialogRepo . dialogs . filter ( _ . _ 2 . archivedAt . isEmpty ) < nl > @ @ - 134 , 6 + 139 , 12 @ @ object DialogRepo extends UserDialogOperations with DialogCommonOperations { < nl > private def byPKSimple ( userId : Rep [ Int ] , peerType : Rep [ Int ] , peerId : Rep [ Int ] ) = < nl > dialogs . filter ( { case ( _ , u ) ⇒ u . userId = = = userId & & u . peerType = = = peerType & & u . peerId = = = peerId } ) < nl > < nl > + private def byUserId ( userId : Rep [ Int ] ) = < nl > + dialogs . filter ( { case ( _ , u ) ⇒ u . userId = = = userId } ) < nl > + < nl > def findDialog ( userId : Int , peer : Peer ) ( implicit ec : ExecutionContext ) : DBIO [ Option [ DialogObsolete ] ] = < nl > byPKC ( ( userId , peer . typ . value , peer . id ) ) . result . headOption map ( _ . map { case ( c , u ) ⇒ DialogObsolete . fromCommonAndUser ( c , u ) } ) < nl > + < nl > + def fetchDialogs ( userId : Int ) ( implicit ec : ExecutionContext ) : DBIO [ Seq [ DialogObsolete ] ] = < nl > + byUserId ( userId ) . result map ( _ . map { case ( c , u ) ⇒ DialogObsolete . fromCommonAndUser ( c , u ) } ) < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 index eab1f4d . . 0874089 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessor . scala 
 @ @ - 46 , 7 + 46 , 8 @ @ private [ dialog ] final class DialogProcessor ( val userId : Int , val peer : Peer , ext 
 with AlertingActor 
 with DialogCommandHandlers 
 with ActorFutures 
 - with StashingActor { 
 + with StashingActor 
 + with DialogProcessorMigration { 
 import DialogCommands . _ 
 import DialogQueries . _ 
 import DialogProcessor . _ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 new file mode 100644 
 index 0000000 . . 42ac6b9 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 @ @ - 0 , 0 + 1 , 72 @ @ 
 + package im . actor . server . dialog 
 + 
 + import java . time . Instant 
 + 
 + import akka . actor . Status 
 + import akka . pattern . pipe 
 + import im . actor . server . cqrs . { Event , Processor } 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . model . { DialogObsolete , Peer } 
 + import im . actor . server . persist . HistoryMessageRepo 
 + import im . actor . server . persist . dialog . DialogRepo 
 + 
 + trait DialogProcessorMigration extends Processor [ DialogState ] { 
 + import DialogEvents . _ 
 + import context . dispatcher 
 + 
 + private case class PersistEvents ( events : List [ Event ] ) 
 + 
 + private var needMigrate = true 
 + 
 + val userId : Int 
 + val peer : Peer 
 + private val db = DbExtension ( context . system ) . db 
 + 
 + override def afterCommit ( e : Event ) = e match { 
 + case Initialized ( ) ⇒ needMigrate = false 
 + case _ ⇒ 
 + } 
 + 
 + override protected def onRecoveryCompleted ( ) : Unit = { 
 + super . onRecoveryCompleted ( ) 
 + if ( needMigrate ) 
 + migrate ( ) 
 + } 
 + 
 + private def migrating : Receive = { 
 + case d : DialogObsolete ⇒ 
 + ( for { 
 + models ← db . run ( HistoryMessageRepo . findAfter ( userId , peer , d . ownerLastReadAt , Long . MaxValue ) ) 
 + newMessages = models map { m ⇒ 
 + NewMessage ( 
 + randomId = m . randomId , 
 + date = Instant . ofEpochMilli ( m . date . getMillis ) , 
 + senderUserId = m . senderUserId , 
 + messageHeader = m . messageContentHeader 
 + ) 
 + } 
 + } yield PersistEvents ( 
 + Initialized ( ) + : 
 + newMessages . toList : + 
 + MessagesRead ( Instant . ofEpochMilli ( d . lastReadAt . getMillis ) ) 
 + ) ) pipeTo self 
 + 
 + case PersistEvents ( events ) ⇒ 
 + persistAll ( events ) { _ ⇒ 
 + unstashAll ( ) 
 + context become receiveCommand 
 + } 
 + case Status . Failure ( e ) ⇒ 
 + log . error ( e , " Failed to migrate " ) 
 + throw e 
 + case _ ⇒ stash ( ) 
 + } 
 + 
 + private def migrate ( ) : Unit = { 
 + context become migrating 
 + db . run ( DialogRepo . findDialog ( userId , peer ) ) map { 
 + case Some ( model ) ⇒ self ! model 
 + case _ ⇒ self ! Status . Failure ( new IllegalStateException ( " Cannot find dialog " ) ) 
 + } 
 + } 
 + } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 index ca7ffd9 . . 048a0fd 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 @ @ - 4 , 25 + 4 , 25 @ @ import java . time . Instant 
 
 import akka . actor . Status 
 import akka . pattern . pipe 
 - import im . actor . server . cqrs . { Event , Processor } 
 + import im . actor . server . cqrs . { Event , Processor } 
 import im . actor . server . db . DbExtension 
 import im . actor . server . model . DialogObsolete 
 import im . actor . server . persist . dialog . DialogRepo 
 
 - private case class CreateEvents ( models : Seq [ DialogObsolete ] ) 
 - 
 trait DialogRootMigration extends Processor [ DialogRootState ] { 
 
 import DialogRootEvents . _ 
 import context . dispatcher 
 
 + private case class CreateEvents ( models : Seq [ DialogObsolete ] ) 
 + 
 val userId : Int 
 private val db = DbExtension ( context . system ) . db 
 private var needMigrate = true 
 
 override def afterCommit ( e : Event ) : Unit = e match { 
 case Initialized ( _ ) ⇒ needMigrate = false 
 - case _ ⇒ 
 + case _ ⇒ 
 } 
 
 override protected def onRecoveryCompleted ( ) : Unit = { 
 @ @ - 34 , 6 + 34 , 7 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { 
 private def migrating : Receive = { 
 case CreateEvents ( models ) ⇒ 
 createEvents ( models ) { 
 + unstashAll ( ) 
 context become receiveCommand 
 } 
 case Status . Failure ( e ) ⇒

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / dialog . proto b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 index 549754f . . 1c70ec7 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / dialog . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / dialog . proto 
 @ @ - 79 , 6 + 79 , 12 @ @ message DialogRootEvents { 
 int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 Peer peer = 2 ; 
 } 
 + 
 + message Initialized { 
 + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogRootEvent " ; 
 + 
 + int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 + } 
 } 
 
 message DialogRootCommands { 
 @ @ - 340 , 4 + 346 , 8 @ @ message DialogEvents { 
 message CounterReset { 
 option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogEvent " ; 
 } 
 + 
 + message Initialized { 
 + option ( scalapb . message ) . extends = " im . actor . server . dialog . DialogEvent " ; 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala 
 index d4b028a . . 2d2b249 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / cqrs / Processor . scala 
 @ @ - 36 , 8 + 36 , 8 @ @ trait IncrementalSnapshots [ S < : ProcessorState [ S ] ] extends ProcessorStateControl 
 
 val SnapshotCommitsThreshold = 100 
 
 - override protected def afterCommit ( ) : Unit = { 
 - super . afterCommit ( ) 
 + override protected def afterCommit ( e : Event ) : Unit = { 
 + super . afterCommit ( e ) 
 _ commitsNum + = 1 
 if ( _ commitsNum = = SnapshotCommitsThreshold ) { 
 log . debug ( " Saving snapshot due to threshold hit " ) 
 @ @ - 56 , 15 + 56 , 15 @ @ trait ProcessorStateControl [ S < : ProcessorState [ S ] ] { 
 def setState ( state : S ) = this . _ state = state 
 
 def commit ( e : Event ) : S = { 
 - beforeCommit ( ) 
 + beforeCommit ( e ) 
 setState ( state . updated ( e ) ) 
 - afterCommit ( ) 
 + afterCommit ( e ) 
 state 
 } 
 
 - protected def beforeCommit ( ) = { } 
 + protected def beforeCommit ( e : Event ) = { } 
 
 - protected def afterCommit ( ) = { } 
 + protected def afterCommit ( e : Event ) = { } 
 } 
 
 object ProcessorStateProbe { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 index 6a0b95e . . bb01b2d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRoot . scala 
 @ @ - 92 , 10 + 92 , 11 @ @ private trait DialogRootQueryHandlers { 
 } 
 } 
 
 - private class DialogRoot ( userId : Int , extensions : Seq [ ApiExtension ] ) 
 + private class DialogRoot ( val userId : Int , extensions : Seq [ ApiExtension ] ) 
 extends Processor [ DialogRootState ] 
 with IncrementalSnapshots [ DialogRootState ] 
 - with DialogRootQueryHandlers { 
 + with DialogRootQueryHandlers 
 + with DialogRootMigration { 
 import DialogRootEvents . _ 
 import DialogRootQueries . _ 
 import DialogRootCommands . _ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 new file mode 100644 
 index 0000000 . . ca7ffd9 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 @ @ - 0 , 0 + 1 , 72 @ @ 
 + package im . actor . server . dialog 
 + 
 + import java . time . Instant 
 + 
 + import akka . actor . Status 
 + import akka . pattern . pipe 
 + import im . actor . server . cqrs . { Event , Processor } 
 + import im . actor . server . db . DbExtension 
 + import im . actor . server . model . DialogObsolete 
 + import im . actor . server . persist . dialog . DialogRepo 
 + 
 + private case class CreateEvents ( models : Seq [ DialogObsolete ] ) 
 + 
 + trait DialogRootMigration extends Processor [ DialogRootState ] { 
 + 
 + import DialogRootEvents . _ 
 + import context . dispatcher 
 + 
 + val userId : Int 
 + private val db = DbExtension ( context . system ) . db 
 + private var needMigrate = true 
 + 
 + override def afterCommit ( e : Event ) : Unit = e match { 
 + case Initialized ( _ ) ⇒ needMigrate = false 
 + case _ ⇒ 
 + } 
 + 
 + override protected def onRecoveryCompleted ( ) : Unit = { 
 + super . onRecoveryCompleted ( ) 
 + if ( needMigrate ) 
 + migrate ( ) 
 + } 
 + 
 + private def migrating : Receive = { 
 + case CreateEvents ( models ) ⇒ 
 + createEvents ( models ) { 
 + context become receiveCommand 
 + } 
 + case Status . Failure ( e ) ⇒ 
 + log . error ( e , " Failed to migrate " ) 
 + throw e 
 + case _ ⇒ stash ( ) 
 + } 
 + 
 + private def migrate ( ) : Unit = { 
 + context . become ( migrating ) 
 + 
 + ( for { 
 + models ← db . run ( DialogRepo . fetchDialogs ( userId ) ) 
 + } yield CreateEvents ( models ) ) pipeTo self 
 + } 
 + 
 + private def createEvents ( models : Seq [ DialogObsolete ] ) ( onComplete : ⇒ Unit ) : Unit = { 
 + val created = models map { dialog ⇒ 
 + Created ( Instant . ofEpochMilli ( dialog . createdAt . getMillis ) , Some ( dialog . peer ) ) 
 + } 
 + 
 + val archived = models . view . filter ( _ . archivedAt . isDefined ) map { dialog ⇒ 
 + Archived ( Instant . ofEpochMilli ( dialog . archivedAt . get . getMillis ) , Some ( dialog . peer ) ) 
 + } 
 + 
 + var ts = Instant . now ( ) 
 + val favourited = models . view . filter ( _ . isFavourite ) map { dialog ⇒ 
 + ts = ts . plusMillis ( 1 ) 
 + Favourited ( ts , Some ( dialog . peer ) ) 
 + } 
 + 
 + persistAll ( Initialized ( Instant . now ( ) ) + : ( created + + archived + + favourited ) . toList ) { _ ⇒ 
 + onComplete 
 + } 
 + } 
 + } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 index 58b76bc . . de032bc 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootState . scala 
 @ @ - 49 , 7 + 49 , 7 @ @ private object DialogRootState { 
 ) 
 } 
 
 - private final case class DialogRootState ( 
 + private [ dialog ] final case class DialogRootState ( 
 active : Map [ DialogGroupType , SortedSet [ SortableDialog ] ] , 
 activePeers : SortedSet [ SortableDialog ] , 
 archived : SortedSet [ SortableDialog ] 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala 
 index dfd8365 . . 00247f7 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / dialog / DialogRepo . scala 
 @ @ - 4 , 10 + 4 , 13 @ @ import com . github . tototoshi . slick . PostgresJodaSupport . _ 
 import im . actor . server . db . ActorPostgresDriver . api . _ 
 import im . actor . server . model . _ 
 import org . joda . time . DateTime 
 + import slick . dbio . DBIOAction 
 + import slick . dbio . Effect . Read 
 import slick . lifted . ColumnOrdered 
 + import slick . profile . FixedSqlStreamingAction 
 
 import scala . concurrent . ExecutionContext 
 - import scala . util . { Success , Failure } 
 + import scala . util . { Failure , Success } 
 
 final class DialogCommonTable ( tag : Tag ) extends Table [ DialogCommon ] ( tag , " dialog _ commons " ) { 
 
 @ @ - 115 , 6 + 118 , 8 @ @ object DialogRepo extends UserDialogOperations with DialogCommonOperations { 
 
 private val byPKC = Compiled ( byPKSimple _ ) 
 
 + private val byUserC = Compiled ( byUserId _ ) 
 + 
 private val archived = DialogRepo . dialogs . filter ( _ . _ 2 . archivedAt . isDefined ) 
 
 private val notArchived = DialogRepo . dialogs . filter ( _ . _ 2 . archivedAt . isEmpty ) 
 @ @ - 134 , 6 + 139 , 12 @ @ object DialogRepo extends UserDialogOperations with DialogCommonOperations { 
 private def byPKSimple ( userId : Rep [ Int ] , peerType : Rep [ Int ] , peerId : Rep [ Int ] ) = 
 dialogs . filter ( { case ( _ , u ) ⇒ u . userId = = = userId & & u . peerType = = = peerType & & u . peerId = = = peerId } ) 
 
 + private def byUserId ( userId : Rep [ Int ] ) = 
 + dialogs . filter ( { case ( _ , u ) ⇒ u . userId = = = userId } ) 
 + 
 def findDialog ( userId : Int , peer : Peer ) ( implicit ec : ExecutionContext ) : DBIO [ Option [ DialogObsolete ] ] = 
 byPKC ( ( userId , peer . typ . value , peer . id ) ) . result . headOption map ( _ . map { case ( c , u ) ⇒ DialogObsolete . fromCommonAndUser ( c , u ) } ) 
 + 
 + def fetchDialogs ( userId : Int ) ( implicit ec : ExecutionContext ) : DBIO [ Seq [ DialogObsolete ] ] = 
 + byUserId ( userId ) . result map ( _ . map { case ( c , u ) ⇒ DialogObsolete . fromCommonAndUser ( c , u ) } ) 
 } 
 \ No newline at end of file
