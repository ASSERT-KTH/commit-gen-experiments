BLEU SCORE: 0.08493098745313143

TEST MSG: fix ( server : tests ) : fix http spec to match local storage
GENERATED MSG: fix ( http - api ) : fixed json formats

TEST DIFF (one line): diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala < nl > index 26aaac0 . . 33cdf15 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala < nl > @ @ - 19 , 6 + 19 , 7 @ @ import im . actor . server . api . http . json . { AvatarUrls , _ } < nl > import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } < nl > import im . actor . server . api . rpc . service . messaging < nl > import im . actor . server . file . { FileStorageExtension , ImageUtils } < nl > + import im . actor . server . webhooks . WebhooksExtension < nl > import im . actor . server . webhooks . http . routes . OutgoingHooksErrors < nl > import play . api . libs . json . _ < nl > < nl > @ @ - 79 , 6 + 80 , 8 @ @ final class HttpApiFrontendSpec < nl > < nl > private val fsAdapter = FileStorageExtension ( system ) . fsAdapter < nl > < nl > + WebhooksExtension ( system ) / / initialize webhooks routes < nl > + < nl > implicit val reverseHookResponseUnmarshaller : FromEntityUnmarshaller [ ReverseHookResponse ] = Unmarshaller { implicit ec ⇒ entity ⇒ < nl > Unmarshal ( entity ) . to [ String ] . map { body ⇒ < nl > Json . parse ( body ) . as [ ReverseHookResponse ] < nl > @ @ - 357 , 7 + 360 , 7 @ @ final class HttpApiFrontendSpec < nl > val avatarUrls = ( response \ " group " \ " avatars " ) . as [ AvatarUrls ] < nl > inside ( avatarUrls ) { < nl > case AvatarUrls ( Some ( small ) , Some ( large ) , Some ( full ) ) ⇒ < nl > - List ( small , large , full ) foreach ( _ should startWith ( s " https : / / $ s3BucketName . s3 . amazonaws . com " ) ) < nl > + List ( small , large , full ) foreach ( _ should startWith ( " http : / / " ) ) < nl > } < nl > ( response \ " inviter " \ " avatars " ) . as [ AvatarUrls ] should matchPattern { < nl > case AvatarUrls ( None , None , None ) ⇒ < nl > @ @ - 395 , 7 + 398 , 7 @ @ final class HttpApiFrontendSpec < nl > val avatarUrls = ( response \ " group " \ " avatars " ) . as [ AvatarUrls ] < nl > inside ( avatarUrls ) { < nl > case AvatarUrls ( None , Some ( large ) , Some ( full ) ) ⇒ < nl > - List ( large , full ) foreach ( _ should startWith ( s " https : / / $ s3BucketName . s3 . amazonaws . com " ) ) < nl > + List ( large , full ) foreach ( _ should startWith ( " http : / / " ) ) < nl > } < nl > ( response \ " inviter " \ " avatars " ) . as [ AvatarUrls ] should matchPattern { < nl > case AvatarUrls ( None , None , None ) ⇒
NEAREST DIFF (one line): diff - - git a / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala b / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala < nl > index 93a2c5f . . 415da46 100644 < nl > - - - a / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala < nl > + + + b / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala < nl > @ @ - 15 , 7 + 15 , 7 @ @ import slick . driver . PostgresDriver . api . _ < nl > < nl > import im . actor . api . rpc . files . FileLocation < nl > import im . actor . server . api . http . json . JsonImplicits . { errorsFormat , groupInviteInfoFormat } < nl > - import im . actor . server . api . http . json . { AvatarUrls , Errors , GroupInviteInfo } < nl > + import im . actor . server . api . http . json . { Group , User , AvatarUrls , Errors , GroupInviteInfo } < nl > import im . actor . server . util . FileUtils . getFileUrl < nl > import im . actor . server . util . ImageUtils . getAvatar < nl > import im . actor . server . { models , persist } < nl > @ @ - 54 , 17 + 54 , 17 @ @ class GroupsHandler ( s3BucketName : String ) ( < nl > for { < nl > groupTitle ← persist . Group . findTitle ( token . groupId ) < nl > groupAvatar ← persist . AvatarData . findByGroupId ( token . groupId ) < nl > - groupAvatarUrl ← avatarUrl ( groupAvatar ) < nl > + groupAvatarUrls ← avatarUrls ( groupAvatar ) < nl > < nl > inviterName ← persist . User . findName ( token . creatorId ) < nl > inviterAvatar ← persist . AvatarData . findByUserId ( token . creatorId ) . headOption < nl > - inviterAvatarUrl ← avatarUrl ( inviterAvatar ) < nl > - } yield Right ( GroupInviteInfo ( groupTitle . getOrElse ( " Group " ) , groupAvatarUrl , inviterName . getOrElse ( " User " ) , inviterAvatarUrl ) ) < nl > + inviterAvatarUrls ← avatarUrls ( inviterAvatar ) < nl > + } yield Right ( GroupInviteInfo ( group = Group ( groupTitle . getOrElse ( " Group " ) , groupAvatarUrls ) , inviter = User ( inviterName . getOrElse ( " User " ) , inviterAvatarUrls ) ) ) < nl > } . getOrElse ( DBIO . successful ( Left ( Errors ( " Expired or invalid token " ) ) ) ) < nl > } yield result < nl > } < nl > < nl > - private def avatarUrl ( optAvatar : Option [ models . AvatarData ] ) : DBIO [ Option [ AvatarUrls ] ] = { < nl > + private def avatarUrls ( optAvatar : Option [ models . AvatarData ] ) : DBIO [ Option [ AvatarUrls ] ] = { < nl > optAvatar . map ( getAvatar ) . map { avatar ⇒ < nl > for { < nl > small ← avatar . smallImage . map ( i ⇒ urlOrNone ( i . fileLocation ) ) . getOrElse ( DBIO . successful ( None ) ) / / TODO : rewrite with shapeless < nl > diff - - git a / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonImplicits . scala b / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonImplicits . scala < nl > index da291cd . . 17e9cc0 100644 < nl > - - - a / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonImplicits . scala < nl > + + + b / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonImplicits . scala < nl > @ @ - 11 , 6 + 11 , 8 @ @ object JsonImplicits { < nl > ( JsPath \ " image _ url " ) . read [ String ] . map [ Content ] { Image } < nl > < nl > implicit val avatarUrlsFormat : Format [ AvatarUrls ] = Json . format [ AvatarUrls ] < nl > + implicit val userFormat : Format [ User ] = Json . format [ User ] < nl > + implicit val groupFormat : Format [ Group ] = Json . format [ Group ] < nl > implicit val groupInviteInfoFormat : Format [ GroupInviteInfo ] = Json . format [ GroupInviteInfo ] < nl > implicit val errorsFormat : Format [ Errors ] = Json . format [ Errors ] < nl > < nl > diff - - git a / actor - http - api / src / main / scala / im / actor / server / api / http / json / Models . scala b / actor - http - api / src / main / scala / im / actor / server / api / http / json / Models . scala < nl > index 44d08c8 . . fecec21 100644 < nl > - - - a / actor - http - api / src / main / scala / im / actor / server / api / http / json / Models . scala < nl > + + + b / actor - http - api / src / main / scala / im / actor / server / api / http / json / Models . scala < nl > @ @ - 4 , 12 + 4 , 9 @ @ sealed trait Content < nl > case class Text ( text : String ) extends Content < nl > case class Image ( imageUrl : String ) extends Content < nl > case class Document ( documentUrl : String ) extends Content < nl > + case class Group ( title : String , avatars : Option [ AvatarUrls ] ) < nl > + case class User ( name : String , avatars : Option [ AvatarUrls ] ) < nl > < nl > - case class GroupInviteInfo ( < nl > - groupTitle : String , < nl > - groupAvatars : Option [ AvatarUrls ] , < nl > - inviterName : String , < nl > - inviterAvatars : Option [ AvatarUrls ] < nl > - ) < nl > + case class GroupInviteInfo ( group : Group , inviter : User ) < nl > case class AvatarUrls ( small : Option [ String ] , large : Option [ String ] , full : Option [ String ] ) < nl > case class Errors ( message : String ) < nl > \ No newline at end of file < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala b / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > index 08605eb . . 5cbf88f 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > @ @ - 149 , 8 + 149 , 8 @ @ class HttpApiFrontendSpec extends BaseAppSuite with GroupsServiceHelpers { < nl > resp . status shouldEqual StatusCodes . OK < nl > whenReady ( resp . entity . dataBytes . runFold ( ByteString . empty ) ( _ + + _ ) . map ( _ . decodeString ( " utf - 8 " ) ) ) { body ⇒ < nl > val response = Json . parse ( body ) < nl > - ( response \ " groupTitle " ) . as [ String ] shouldEqual groupName < nl > - ( response \ " inviterName " ) . as [ String ] shouldEqual user1 . name < nl > + ( response \ " group " \ " title " ) . as [ String ] shouldEqual groupName < nl > + ( response \ " inviter " \ " name " ) . as [ String ] shouldEqual user1 . name < nl > } < nl > } < nl > } < nl > @ @ - 158 , 6 + 158 , 7 @ @ class HttpApiFrontendSpec extends BaseAppSuite with GroupsServiceHelpers { < nl > def groupInvitesAvatars1 ( ) = { < nl > val avatarFile = Paths . get ( getClass . getResource ( " / valid - avatar . jpg " ) . toURI ) . toFile < nl > val fileLocation = whenReady ( db . run ( FileUtils . uploadFile ( bucketName , " avatar " , avatarFile ) ) ) ( identity ) < nl > + < nl > whenReady ( db . run ( ImageUtils . scaleAvatar ( fileLocation . fileId , ThreadLocalRandom . current ( ) , bucketName ) ) ) { result ⇒ < nl > result should matchPattern { case Right ( _ ) ⇒ } < nl > val avatar = ImageUtils . getAvatarData ( models . AvatarData . OfGroup , groupOutPeer . groupId , result . right . toOption . get ) < nl > @ @ - 166 , 25 + 167 , 29 @ @ class HttpApiFrontendSpec extends BaseAppSuite with GroupsServiceHelpers { < nl > < nl > val token = ACLUtils . accessToken ( ThreadLocalRandom . current ( ) ) < nl > val inviteToken = models . GroupInviteToken ( groupOutPeer . groupId , user1 . id , token ) < nl > + < nl > whenReady ( db . run ( persist . GroupInviteToken . create ( inviteToken ) ) ) { _ ⇒ < nl > val request = HttpRequest ( < nl > method = HttpMethods . GET , < nl > uri = s " http : / / $ { config . interface } : $ { config . port } / v1 / groups / invites / $ token " < nl > ) < nl > + < nl > val resp = whenReady ( http . singleRequest ( request ) ) ( identity ) < nl > resp . status shouldEqual StatusCodes . OK < nl > + < nl > whenReady ( resp . entity . dataBytes . runFold ( ByteString . empty ) ( _ + + _ ) . map ( _ . decodeString ( " utf - 8 " ) ) ) { body ⇒ < nl > import JsonImplicits . avatarUrlsFormat < nl > < nl > val response = Json . parse ( body ) < nl > - ( response \ " groupTitle " ) . as [ String ] shouldEqual groupName < nl > - ( response \ " inviterName " ) . as [ String ] shouldEqual user1 . name < nl > - val avatarUrls = ( response \ " groupAvatars " ) . as [ AvatarUrls ] < nl > + ( response \ " group " \ " title " ) . as [ String ] shouldEqual groupName < nl > + ( response \ " inviter " \ " name " ) . as [ String ] shouldEqual user1 . name < nl > + < nl > + val avatarUrls = ( response \ " group " \ " avatars " ) . as [ AvatarUrls ] < nl > inside ( avatarUrls ) { < nl > case AvatarUrls ( Some ( small ) , Some ( large ) , Some ( full ) ) ⇒ < nl > List ( small , large , full ) foreach ( _ should startWith ( s " https : / / $ bucketName . s3 . amazonaws . com " ) ) < nl > } < nl > - ( response \ " inviterAvatars " ) . as [ AvatarUrls ] should matchPattern { < nl > + ( response \ " inviter " \ " avatars " ) . as [ AvatarUrls ] should matchPattern { < nl > case AvatarUrls ( None , None , None ) ⇒ < nl > } < nl > } < nl > @ @ - 215 , 14 + 220 , 14 @ @ class HttpApiFrontendSpec extends BaseAppSuite with GroupsServiceHelpers { < nl > import JsonImplicits . avatarUrlsFormat < nl > < nl > val response = Json . parse ( body ) < nl > - ( response \ " groupTitle " ) . as [ String ] shouldEqual groupName < nl > - ( response \ " inviterName " ) . as [ String ] shouldEqual user1 . name < nl > - val avatarUrls = ( response \ " groupAvatars " ) . as [ AvatarUrls ] < nl > + ( response \ " group " \ " title " ) . as [ String ] shouldEqual groupName < nl > + ( response \ " inviter " \ " name " ) . as [ String ] shouldEqual user1 . name < nl > + val avatarUrls = ( response \ " group " \ " avatars " ) . as [ AvatarUrls ] < nl > inside ( avatarUrls ) { < nl > case AvatarUrls ( None , Some ( large ) , Some ( full ) ) ⇒ < nl > List ( large , full ) foreach ( _ should startWith ( s " https : / / $ bucketName . s3 . amazonaws . com " ) ) < nl > } < nl > - ( response \ " inviterAvatars " ) . as [ AvatarUrls ] should matchPattern { < nl > + ( response \ " inviter " \ " avatars " ) . as [ AvatarUrls ] should matchPattern { < nl > case AvatarUrls ( None , None , None ) ⇒ < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala 
 index 26aaac0 . . 33cdf15 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / http / HttpApiFrontendSpec . scala 
 @ @ - 19 , 6 + 19 , 7 @ @ import im . actor . server . api . http . json . { AvatarUrls , _ } 
 import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } 
 import im . actor . server . api . rpc . service . messaging 
 import im . actor . server . file . { FileStorageExtension , ImageUtils } 
 + import im . actor . server . webhooks . WebhooksExtension 
 import im . actor . server . webhooks . http . routes . OutgoingHooksErrors 
 import play . api . libs . json . _ 
 
 @ @ - 79 , 6 + 80 , 8 @ @ final class HttpApiFrontendSpec 
 
 private val fsAdapter = FileStorageExtension ( system ) . fsAdapter 
 
 + WebhooksExtension ( system ) / / initialize webhooks routes 
 + 
 implicit val reverseHookResponseUnmarshaller : FromEntityUnmarshaller [ ReverseHookResponse ] = Unmarshaller { implicit ec ⇒ entity ⇒ 
 Unmarshal ( entity ) . to [ String ] . map { body ⇒ 
 Json . parse ( body ) . as [ ReverseHookResponse ] 
 @ @ - 357 , 7 + 360 , 7 @ @ final class HttpApiFrontendSpec 
 val avatarUrls = ( response \ " group " \ " avatars " ) . as [ AvatarUrls ] 
 inside ( avatarUrls ) { 
 case AvatarUrls ( Some ( small ) , Some ( large ) , Some ( full ) ) ⇒ 
 - List ( small , large , full ) foreach ( _ should startWith ( s " https : / / $ s3BucketName . s3 . amazonaws . com " ) ) 
 + List ( small , large , full ) foreach ( _ should startWith ( " http : / / " ) ) 
 } 
 ( response \ " inviter " \ " avatars " ) . as [ AvatarUrls ] should matchPattern { 
 case AvatarUrls ( None , None , None ) ⇒ 
 @ @ - 395 , 7 + 398 , 7 @ @ final class HttpApiFrontendSpec 
 val avatarUrls = ( response \ " group " \ " avatars " ) . as [ AvatarUrls ] 
 inside ( avatarUrls ) { 
 case AvatarUrls ( None , Some ( large ) , Some ( full ) ) ⇒ 
 - List ( large , full ) foreach ( _ should startWith ( s " https : / / $ s3BucketName . s3 . amazonaws . com " ) ) 
 + List ( large , full ) foreach ( _ should startWith ( " http : / / " ) ) 
 } 
 ( response \ " inviter " \ " avatars " ) . as [ AvatarUrls ] should matchPattern { 
 case AvatarUrls ( None , None , None ) ⇒

NEAREST DIFF:
diff - - git a / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala b / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala 
 index 93a2c5f . . 415da46 100644 
 - - - a / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala 
 + + + b / actor - http - api / src / main / scala / im / actor / server / api / http / groups / GroupsHandler . scala 
 @ @ - 15 , 7 + 15 , 7 @ @ import slick . driver . PostgresDriver . api . _ 
 
 import im . actor . api . rpc . files . FileLocation 
 import im . actor . server . api . http . json . JsonImplicits . { errorsFormat , groupInviteInfoFormat } 
 - import im . actor . server . api . http . json . { AvatarUrls , Errors , GroupInviteInfo } 
 + import im . actor . server . api . http . json . { Group , User , AvatarUrls , Errors , GroupInviteInfo } 
 import im . actor . server . util . FileUtils . getFileUrl 
 import im . actor . server . util . ImageUtils . getAvatar 
 import im . actor . server . { models , persist } 
 @ @ - 54 , 17 + 54 , 17 @ @ class GroupsHandler ( s3BucketName : String ) ( 
 for { 
 groupTitle ← persist . Group . findTitle ( token . groupId ) 
 groupAvatar ← persist . AvatarData . findByGroupId ( token . groupId ) 
 - groupAvatarUrl ← avatarUrl ( groupAvatar ) 
 + groupAvatarUrls ← avatarUrls ( groupAvatar ) 
 
 inviterName ← persist . User . findName ( token . creatorId ) 
 inviterAvatar ← persist . AvatarData . findByUserId ( token . creatorId ) . headOption 
 - inviterAvatarUrl ← avatarUrl ( inviterAvatar ) 
 - } yield Right ( GroupInviteInfo ( groupTitle . getOrElse ( " Group " ) , groupAvatarUrl , inviterName . getOrElse ( " User " ) , inviterAvatarUrl ) ) 
 + inviterAvatarUrls ← avatarUrls ( inviterAvatar ) 
 + } yield Right ( GroupInviteInfo ( group = Group ( groupTitle . getOrElse ( " Group " ) , groupAvatarUrls ) , inviter = User ( inviterName . getOrElse ( " User " ) , inviterAvatarUrls ) ) ) 
 } . getOrElse ( DBIO . successful ( Left ( Errors ( " Expired or invalid token " ) ) ) ) 
 } yield result 
 } 
 
 - private def avatarUrl ( optAvatar : Option [ models . AvatarData ] ) : DBIO [ Option [ AvatarUrls ] ] = { 
 + private def avatarUrls ( optAvatar : Option [ models . AvatarData ] ) : DBIO [ Option [ AvatarUrls ] ] = { 
 optAvatar . map ( getAvatar ) . map { avatar ⇒ 
 for { 
 small ← avatar . smallImage . map ( i ⇒ urlOrNone ( i . fileLocation ) ) . getOrElse ( DBIO . successful ( None ) ) / / TODO : rewrite with shapeless 
 diff - - git a / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonImplicits . scala b / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonImplicits . scala 
 index da291cd . . 17e9cc0 100644 
 - - - a / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonImplicits . scala 
 + + + b / actor - http - api / src / main / scala / im / actor / server / api / http / json / JsonImplicits . scala 
 @ @ - 11 , 6 + 11 , 8 @ @ object JsonImplicits { 
 ( JsPath \ " image _ url " ) . read [ String ] . map [ Content ] { Image } 
 
 implicit val avatarUrlsFormat : Format [ AvatarUrls ] = Json . format [ AvatarUrls ] 
 + implicit val userFormat : Format [ User ] = Json . format [ User ] 
 + implicit val groupFormat : Format [ Group ] = Json . format [ Group ] 
 implicit val groupInviteInfoFormat : Format [ GroupInviteInfo ] = Json . format [ GroupInviteInfo ] 
 implicit val errorsFormat : Format [ Errors ] = Json . format [ Errors ] 
 
 diff - - git a / actor - http - api / src / main / scala / im / actor / server / api / http / json / Models . scala b / actor - http - api / src / main / scala / im / actor / server / api / http / json / Models . scala 
 index 44d08c8 . . fecec21 100644 
 - - - a / actor - http - api / src / main / scala / im / actor / server / api / http / json / Models . scala 
 + + + b / actor - http - api / src / main / scala / im / actor / server / api / http / json / Models . scala 
 @ @ - 4 , 12 + 4 , 9 @ @ sealed trait Content 
 case class Text ( text : String ) extends Content 
 case class Image ( imageUrl : String ) extends Content 
 case class Document ( documentUrl : String ) extends Content 
 + case class Group ( title : String , avatars : Option [ AvatarUrls ] ) 
 + case class User ( name : String , avatars : Option [ AvatarUrls ] ) 
 
 - case class GroupInviteInfo ( 
 - groupTitle : String , 
 - groupAvatars : Option [ AvatarUrls ] , 
 - inviterName : String , 
 - inviterAvatars : Option [ AvatarUrls ] 
 - ) 
 + case class GroupInviteInfo ( group : Group , inviter : User ) 
 case class AvatarUrls ( small : Option [ String ] , large : Option [ String ] , full : Option [ String ] ) 
 case class Errors ( message : String ) 
 \ No newline at end of file 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala b / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 index 08605eb . . 5cbf88f 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 @ @ - 149 , 8 + 149 , 8 @ @ class HttpApiFrontendSpec extends BaseAppSuite with GroupsServiceHelpers { 
 resp . status shouldEqual StatusCodes . OK 
 whenReady ( resp . entity . dataBytes . runFold ( ByteString . empty ) ( _ + + _ ) . map ( _ . decodeString ( " utf - 8 " ) ) ) { body ⇒ 
 val response = Json . parse ( body ) 
 - ( response \ " groupTitle " ) . as [ String ] shouldEqual groupName 
 - ( response \ " inviterName " ) . as [ String ] shouldEqual user1 . name 
 + ( response \ " group " \ " title " ) . as [ String ] shouldEqual groupName 
 + ( response \ " inviter " \ " name " ) . as [ String ] shouldEqual user1 . name 
 } 
 } 
 } 
 @ @ - 158 , 6 + 158 , 7 @ @ class HttpApiFrontendSpec extends BaseAppSuite with GroupsServiceHelpers { 
 def groupInvitesAvatars1 ( ) = { 
 val avatarFile = Paths . get ( getClass . getResource ( " / valid - avatar . jpg " ) . toURI ) . toFile 
 val fileLocation = whenReady ( db . run ( FileUtils . uploadFile ( bucketName , " avatar " , avatarFile ) ) ) ( identity ) 
 + 
 whenReady ( db . run ( ImageUtils . scaleAvatar ( fileLocation . fileId , ThreadLocalRandom . current ( ) , bucketName ) ) ) { result ⇒ 
 result should matchPattern { case Right ( _ ) ⇒ } 
 val avatar = ImageUtils . getAvatarData ( models . AvatarData . OfGroup , groupOutPeer . groupId , result . right . toOption . get ) 
 @ @ - 166 , 25 + 167 , 29 @ @ class HttpApiFrontendSpec extends BaseAppSuite with GroupsServiceHelpers { 
 
 val token = ACLUtils . accessToken ( ThreadLocalRandom . current ( ) ) 
 val inviteToken = models . GroupInviteToken ( groupOutPeer . groupId , user1 . id , token ) 
 + 
 whenReady ( db . run ( persist . GroupInviteToken . create ( inviteToken ) ) ) { _ ⇒ 
 val request = HttpRequest ( 
 method = HttpMethods . GET , 
 uri = s " http : / / $ { config . interface } : $ { config . port } / v1 / groups / invites / $ token " 
 ) 
 + 
 val resp = whenReady ( http . singleRequest ( request ) ) ( identity ) 
 resp . status shouldEqual StatusCodes . OK 
 + 
 whenReady ( resp . entity . dataBytes . runFold ( ByteString . empty ) ( _ + + _ ) . map ( _ . decodeString ( " utf - 8 " ) ) ) { body ⇒ 
 import JsonImplicits . avatarUrlsFormat 
 
 val response = Json . parse ( body ) 
 - ( response \ " groupTitle " ) . as [ String ] shouldEqual groupName 
 - ( response \ " inviterName " ) . as [ String ] shouldEqual user1 . name 
 - val avatarUrls = ( response \ " groupAvatars " ) . as [ AvatarUrls ] 
 + ( response \ " group " \ " title " ) . as [ String ] shouldEqual groupName 
 + ( response \ " inviter " \ " name " ) . as [ String ] shouldEqual user1 . name 
 + 
 + val avatarUrls = ( response \ " group " \ " avatars " ) . as [ AvatarUrls ] 
 inside ( avatarUrls ) { 
 case AvatarUrls ( Some ( small ) , Some ( large ) , Some ( full ) ) ⇒ 
 List ( small , large , full ) foreach ( _ should startWith ( s " https : / / $ bucketName . s3 . amazonaws . com " ) ) 
 } 
 - ( response \ " inviterAvatars " ) . as [ AvatarUrls ] should matchPattern { 
 + ( response \ " inviter " \ " avatars " ) . as [ AvatarUrls ] should matchPattern { 
 case AvatarUrls ( None , None , None ) ⇒ 
 } 
 } 
 @ @ - 215 , 14 + 220 , 14 @ @ class HttpApiFrontendSpec extends BaseAppSuite with GroupsServiceHelpers { 
 import JsonImplicits . avatarUrlsFormat 
 
 val response = Json . parse ( body ) 
 - ( response \ " groupTitle " ) . as [ String ] shouldEqual groupName 
 - ( response \ " inviterName " ) . as [ String ] shouldEqual user1 . name 
 - val avatarUrls = ( response \ " groupAvatars " ) . as [ AvatarUrls ] 
 + ( response \ " group " \ " title " ) . as [ String ] shouldEqual groupName 
 + ( response \ " inviter " \ " name " ) . as [ String ] shouldEqual user1 . name 
 + val avatarUrls = ( response \ " group " \ " avatars " ) . as [ AvatarUrls ] 
 inside ( avatarUrls ) { 
 case AvatarUrls ( None , Some ( large ) , Some ( full ) ) ⇒ 
 List ( large , full ) foreach ( _ should startWith ( s " https : / / $ bucketName . s3 . amazonaws . com " ) ) 
 } 
 - ( response \ " inviterAvatars " ) . as [ AvatarUrls ] should matchPattern { 
 + ( response \ " inviter " \ " avatars " ) . as [ AvatarUrls ] should matchPattern { 
 case AvatarUrls ( None , None , None ) ⇒ 
 } 
 }
