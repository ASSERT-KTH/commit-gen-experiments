BLEU SCORE: 0.06495958253289974

TEST MSG: fix ( server : config ) : set config . file property on server startup to give access to server . conf for third - party modules
GENERATED MSG: fix ( server ) : start kamon after starting actor system

TEST DIFF (one line): diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > index 2546bf7 . . 5cc9cfe 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > @ @ - 1 , 6 + 1 , 5 @ @ < nl > package im . actor . config < nl > < nl > - import java . io . File < nl > import java . util . concurrent . TimeUnit < nl > < nl > import akka . actor . ActorSystem < nl > @ @ - 12 , 11 + 11 , 7 @ @ import scala . util . { Failure , Success , Try } < nl > < nl > object ActorConfig { < nl > def load ( defaults : Config = ConfigFactory . empty ( ) ) : Config = { < nl > - val mainConfig = Option ( System . getProperty ( " actor . home " ) ) match { < nl > - case Some ( home ) ⇒ < nl > - ConfigFactory . load ( ConfigFactory . parseFile ( new File ( s " $ home / conf / server . conf " ) ) ) < nl > - case None ⇒ ConfigFactory . load ( ) < nl > - } < nl > + val mainConfig = ConfigFactory . load ( ) < nl > < nl > val config = defaults . withFallback ( ConfigFactory . parseString ( < nl > s " " " < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 0c2a442 . . 004206a 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 75 , 6 + 75 , 10 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > * @ return < nl > * / < nl > def start ( ) : ActorServer = { < nl > + Option ( System . getProperty ( " actor . home " ) ) foreach { home = > < nl > + System . setProperty ( " config . file " , s " $ home / conf / server . conf " ) < nl > + } < nl > + < nl > System . setProperty ( " sun . jnu . encoding " , " UTF - 8 " ) < nl > System . setProperty ( " file . encoding " , " UTF - 8 " )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index fc924ff . . 769b0b4 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 78 , 7 + 78 , 6 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > * @ return < nl > * / < nl > def start ( ) : ActorServer = { < nl > - Kamon . start ( ) < nl > SessionMessage . register ( ) < nl > CommonSerialization . register ( ) < nl > UserProcessor . register ( ) < nl > @ @ - 88 , 6 + 87 , 7 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > val serverConfig = ActorConfig . load ( defaultConfig ) < nl > < nl > implicit val system = ActorSystem ( serverConfig . getString ( " actor - system - name " ) , serverConfig ) < nl > + Kamon . start ( ) < nl > < nl > try { < nl > < nl > diff - - git a / actor - server / notes / 1 . 0 . 70 . markdown b / actor - server / notes / 1 . 0 . 70 . markdown < nl > new file mode 100644 < nl > index 0000000 . . 69904dd < nl > - - - / dev / null < nl > + + + b / actor - server / notes / 1 . 0 . 70 . markdown < nl > @ @ - 0 , 0 + 1 @ @ < nl > + * start kamon after starting actor system

TEST DIFF:
diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 index 2546bf7 . . 5cc9cfe 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 @ @ - 1 , 6 + 1 , 5 @ @ 
 package im . actor . config 
 
 - import java . io . File 
 import java . util . concurrent . TimeUnit 
 
 import akka . actor . ActorSystem 
 @ @ - 12 , 11 + 11 , 7 @ @ import scala . util . { Failure , Success , Try } 
 
 object ActorConfig { 
 def load ( defaults : Config = ConfigFactory . empty ( ) ) : Config = { 
 - val mainConfig = Option ( System . getProperty ( " actor . home " ) ) match { 
 - case Some ( home ) ⇒ 
 - ConfigFactory . load ( ConfigFactory . parseFile ( new File ( s " $ home / conf / server . conf " ) ) ) 
 - case None ⇒ ConfigFactory . load ( ) 
 - } 
 + val mainConfig = ConfigFactory . load ( ) 
 
 val config = defaults . withFallback ( ConfigFactory . parseString ( 
 s " " " 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 0c2a442 . . 004206a 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 75 , 6 + 75 , 10 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 * @ return 
 * / 
 def start ( ) : ActorServer = { 
 + Option ( System . getProperty ( " actor . home " ) ) foreach { home = > 
 + System . setProperty ( " config . file " , s " $ home / conf / server . conf " ) 
 + } 
 + 
 System . setProperty ( " sun . jnu . encoding " , " UTF - 8 " ) 
 System . setProperty ( " file . encoding " , " UTF - 8 " )

NEAREST DIFF:
diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index fc924ff . . 769b0b4 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 78 , 7 + 78 , 6 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 * @ return 
 * / 
 def start ( ) : ActorServer = { 
 - Kamon . start ( ) 
 SessionMessage . register ( ) 
 CommonSerialization . register ( ) 
 UserProcessor . register ( ) 
 @ @ - 88 , 6 + 87 , 7 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 val serverConfig = ActorConfig . load ( defaultConfig ) 
 
 implicit val system = ActorSystem ( serverConfig . getString ( " actor - system - name " ) , serverConfig ) 
 + Kamon . start ( ) 
 
 try { 
 
 diff - - git a / actor - server / notes / 1 . 0 . 70 . markdown b / actor - server / notes / 1 . 0 . 70 . markdown 
 new file mode 100644 
 index 0000000 . . 69904dd 
 - - - / dev / null 
 + + + b / actor - server / notes / 1 . 0 . 70 . markdown 
 @ @ - 0 , 0 + 1 @ @ 
 + * start kamon after starting actor system
