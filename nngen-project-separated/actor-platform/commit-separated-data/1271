BLEU SCORE: 0.17395797375642236

TEST MSG: perf ( server ) : reduce GC overhead caused by Http Routes controlled by hooks
GENERATED MSG: refactor ( server ) : hooks rework

TEST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > index ed40cd3 . . 798d78e 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > @ @ - 59 , 7 + 59 , 7 @ @ private [ bot ] final class BotExtension ( _ system : ActorSystem ) extends Extension { < nl > shardakka . simpleKeyValue ( BotExtension . whUserTokensKV ( userId ) ) < nl > < nl > HttpApi ( system ) . registerHook ( " bots " ) { implicit system ⇒ < nl > - Future . successful ( new BotsHttpHandler ( this ) . routes ) < nl > + new BotsHttpHandler ( this ) . routes < nl > } < nl > < nl > / * * < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > index d6fb686 . . f5e4888 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import akka . util . Timeout < nl > import im . actor . server . api . http . HttpApi < nl > import im . actor . server . group . http . GroupsHttpHandler < nl > < nl > - import scala . concurrent . { Future , ExecutionContext } < nl > + import scala . concurrent . ExecutionContext < nl > import scala . concurrent . duration . _ < nl > < nl > sealed trait GroupExtension extends Extension < nl > @ @ - 14 , 7 + 14 , 7 @ @ final class GroupExtensionImpl ( system : ActorSystem ) extends GroupExtension with < nl > GroupProcessor . register ( ) < nl > < nl > HttpApi ( system ) . registerHook ( " groups " ) { implicit system ⇒ < nl > - Future . successful ( new GroupsHttpHandler ( ) . routes ) < nl > + new GroupsHttpHandler ( ) . routes < nl > } < nl > < nl > lazy val processorRegion : GroupProcessorRegion = GroupProcessorRegion . start ( ) ( system ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala < nl > index 682161a . . cdc24fa 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala < nl > @ @ - 4 , 8 + 4 , 6 @ @ import akka . actor . _ < nl > import im . actor . server . api . http . HttpApi < nl > import im . actor . server . webhooks . http . routes . WebhooksHttpHandler < nl > < nl > - import scala . concurrent . Future < nl > - < nl > sealed trait WebhooksExtension extends Extension < nl > < nl > / * * < nl > @ @ - 16 , 7 + 14 , 7 @ @ sealed trait WebhooksExtension extends Extension < nl > final class WebhooksExtensionImpl ( system : ActorSystem ) extends WebhooksExtension { < nl > < nl > HttpApi ( system ) . registerHook ( " webhooks " ) { implicit system ⇒ < nl > - Future . successful ( new WebhooksHttpHandler ( ) . routes ) < nl > + new WebhooksHttpHandler ( ) . routes < nl > } < nl > < nl > } < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > index 7f9df65 . . c2a2435 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala < nl > @ @ - 73 , 7 + 73 , 7 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { < nl > < nl > protected def getFileName ( name : String ) = if ( name . trim . isEmpty ) " file " else name < nl > < nl > - protected def fileDirectory ( fileId : Long ) : File = file " $ storageLocation / file _ $ { fileId } " < nl > + protected def fileDirectory ( fileId : Long ) : File = file " $ storageLocation / file _ $ { fileId } " < nl > < nl > private def getOrCreateFileDir ( fileId : Long ) = fileDirectory ( fileId ) . createIfNotExists ( asDirectory = true ) < nl > < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > index 16995c0 . . 749dde5 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala < nl > @ @ - 43 , 7 + 43 , 7 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) < nl > private val storageConfig : LocalFileStorageConfig = LocalFileStorageConfig . load . get < nl > < nl > HttpApi ( system ) . registerHook ( " localstorage " ) { implicit system ⇒ < nl > - Future . successful ( new FilesHttpHandler ( storageConfig ) . routes ) < nl > + new FilesHttpHandler ( storageConfig ) . routes < nl > } < nl > < nl > protected val storageLocation = initFileStorage ( storageConfig . location ) < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > index 988638b . . 8e54282 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > @ @ - 25 , 12 + 25 , 18 @ @ final class HttpApi ( _ system : ActorSystem ) extends Extension { < nl > < nl > private val hooks = new HttpApiHookControl < nl > < nl > - def runHooks ( ) : Future [ Seq [ Route ] ] = hooks . routesHook . runAll ( ) < nl > + def runHooks ( ) : Seq [ Route ] = hooks . routesHook . runAll ( ) < nl > < nl > - def registerHook ( name : String ) ( f : ActorSystem ⇒ Future [ Route ] ) : Unit = { < nl > + var customRoutes : Seq [ Route ] = runHooks ( ) < nl > + < nl > + def registerHook ( name : String ) ( f : ActorSystem ⇒ Route ) : Unit = { < nl > hooks . routesHook . register ( name , new HttpApiHook . RoutesHook ( system ) { < nl > - override def run ( ) : Future [ Route ] = f ( system ) < nl > + override def run ( ) : Route = f ( system ) < nl > } ) < nl > + < nl > + synchronized { < nl > + this . customRoutes = runHooks ( ) < nl > + } < nl > } < nl > < nl > HttpApiFrontend . start ( system . settings . config ) < nl > @ @ - 73 , 7 + 79 , 6 @ @ private object HttpApiFrontend { < nl > } < nl > < nl > def start ( config : HttpApiConfig , tlsContext : Option [ TlsContext ] ) ( implicit system : ActorSystem ) : Unit = { < nl > - import system . dispatcher < nl > implicit val mat = ActorMaterializer ( ) < nl > < nl > val status = new StatusHttpHandler < nl > @ @ - 81 , 14 + 86 , 7 @ @ private object HttpApiFrontend { < nl > < nl > def defaultRoutes : Route = app . routes ~ defaultVersion ( status . routes ) < nl > < nl > - / / FIXME : consider more optimal Route creation < nl > - < nl > - def routesFuture : Future [ Route ] = < nl > - for { < nl > - custom ← customRoutes < nl > - } yield custom . foldLeft ( defaultRoutes ) ( _ ~ _ ) < nl > - < nl > - def customRoutes : Future [ Seq [ Route ] ] = HttpApi ( system ) . runHooks ( ) < nl > + def routes = HttpApi ( system ) . customRoutes . foldLeft ( defaultRoutes ) ( _ ~ _ ) < nl > < nl > val defaultSettings = ServerSettings ( system ) < nl > < nl > @ @ - 98 , 12 + 96 , 8 @ @ private object HttpApiFrontend { < nl > httpsContext = tlsContext map ( _ . asHttpsContext ) , < nl > settings = defaultSettings . copy ( timeouts = defaultSettings . timeouts . copy ( idleTimeout = IdleTimeout ) ) < nl > ) < nl > - . mapAsync ( 1 ) { conn ⇒ < nl > - routesFuture map ( conn → _ ) < nl > - } < nl > - . runForeach { < nl > - case ( conn , routes ) ⇒ < nl > - conn handleWith routes < nl > + . runForeach { conn ⇒ < nl > + conn handleWith routes < nl > } < nl > } < nl > } < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala < nl > index bdd7b95 . . 2c7c8d6 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala < nl > @ @ - 2 , 16 + 2 , 16 @ @ package im . actor . server . api . http < nl > < nl > import akka . actor . ActorSystem < nl > import akka . http . scaladsl . server . Route < nl > - import im . actor . hook . { HooksStorage0 , HooksControl , Hook0 } < nl > + import im . actor . hook . { SyncHook0 , SyncHooksStorage0 , HooksControl } < nl > < nl > import scala . concurrent . ExecutionContext < nl > < nl > object HttpApiHook { < nl > - abstract class RoutesHook ( system : ActorSystem ) extends Hook0 [ Route ] < nl > + abstract class RoutesHook ( system : ActorSystem ) extends SyncHook0 [ Route ] < nl > } < nl > < nl > final class HttpApiHookControl ( implicit ec : ExecutionContext ) extends HooksControl { < nl > import HttpApiHook . _ < nl > < nl > - val routesHook = new HooksStorage0 [ RoutesHook , Route ] ( ) < nl > + val routesHook = new SyncHooksStorage0 [ RoutesHook , Route ] ( ) < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / app / AppFilesHttpHandler . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / app / AppFilesHttpHandler . scala < nl > index c02fa19 . . d699918 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / app / AppFilesHttpHandler . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / app / AppFilesHttpHandler . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ import im . actor . server . api . http . HttpHandler < nl > < nl > import scala . concurrent . ExecutionContext < nl > < nl > - private [ http ] final class AppFilesHttpHandler ( staticFilesDirectory : String ) ( implicit ec : ExecutionContext ) extends HttpHandler { < nl > + private [ http ] final class AppFilesHttpHandler ( staticFilesDirectory : String ) extends HttpHandler { < nl > override def routes : Route = pathPrefix ( " app " ) { < nl > getFromDirectory ( staticFilesDirectory ) < nl > } < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / hook / Hook . scala b / actor - server / actor - runtime / src / main / scala / im / actor / hook / Hook . scala < nl > index 1878dfa . . f79bc3b 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / hook / Hook . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / hook / Hook . scala < nl > @ @ - 8 , 6 + 8 , 10 @ @ import scala . concurrent . { ExecutionContext , Future } < nl > < nl > trait Hook < nl > < nl > + trait SyncHook0 [ R ] extends Hook { < nl > + def run ( ) : R < nl > + } < nl > + < nl > trait Hook0 [ R ] extends Hook { < nl > def run ( ) : Future [ R ] < nl > } < nl > @ @ - 42 , 6 + 46 , 10 @ @ class HooksStorage [ H < : Hook ] { < nl > } < nl > } < nl > < nl > + final class SyncHooksStorage0 [ H < : SyncHook0 [ R ] , R ] extends HooksStorage [ H ] { < nl > + def runAll ( ) : Seq [ R ] = hooksList map ( _ . run ( ) ) < nl > + } < nl > + < nl > final class HooksStorage0 [ H < : Hook0 [ R ] , R ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > def runAll ( ) : Future [ Seq [ R ] ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( ) ) < nl > } < nl > diff - - git a / actor - server / notes / 1 . 0 . 85 . markdown b / actor - server / notes / 1 . 0 . 85 . markdown < nl > new file mode 100644 < nl > index 0000000 . . cbe2776 < nl > - - - / dev / null < nl > + + + b / actor - server / notes / 1 . 0 . 85 . markdown < nl > @ @ - 0 , 0 + 1 , 9 @ @ < nl > + Bug fixes < nl > + = = = < nl > + < nl > + * Reduce GC overhead caused by Http Routes controlled by hooks < nl > + < nl > + Packaging < nl > + = = = < nl > + < nl > + Save heap dump in logs dir on OutOfMemoryError < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > index 0cc3629 . . 2aeabbc 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > @ @ - 7 , 18 + 7 , 29 @ @ import scala . concurrent . { ExecutionContext , Future } < nl > < nl > trait Hook < nl > < nl > - class HooksStorage [ A < : Hook ] { < nl > - private val hooks = TrieMap . empty [ String , A ] < nl > - protected def hooksList = hooks . values . toSeq < nl > + trait Hook0 extends Hook { < nl > + def run ( ) : Future [ Unit ] < nl > + } < nl > + < nl > + trait Hook1 [ P ] extends Hook { < nl > + def run ( p : P ) : Future [ Unit ] < nl > + } < nl > < nl > - def register ( name : String , hook : A ) : Unit = < nl > + class HooksStorage [ H < : Hook ] { < nl > + private val hooks = TrieMap . empty [ String , H ] < nl > + protected def hooksList : Seq [ H ] = hooks . values . toSeq < nl > + < nl > + def register ( name : String , hook : H ) : Unit = < nl > if ( hooks . putIfAbsent ( name , hook ) . nonEmpty ) < nl > throw HookException . HookAlreadyRegistered ( name ) < nl > } < nl > < nl > - class HooksStorage0 [ A < : Hook ] ( run : A ⇒ Future [ Unit ] ) ( implicit ec : ExecutionContext ) extends HooksStorage { < nl > - def runAll ( ) : Future [ Unit ] = < nl > - FutureExt . ftraverse ( hooksList ) ( run ) map ( _ ⇒ ( ) ) < nl > + final class HooksStorage0 [ H < : Hook0 ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > + def runAll ( ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( ) ) map ( _ ⇒ ( ) ) < nl > + } < nl > + < nl > + final class HooksStorage1 [ H < : Hook1 [ P ] , P ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > + def runAll ( p : P ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( p ) ) map ( _ ⇒ ( ) ) < nl > } < nl > < nl > abstract class HooksControl { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > index 05c6d5c . . 1e6b001 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > @ @ - 137 , 8 + 137 , 12 @ @ private [ user ] trait UserCommandHandlers { < nl > val rng = ThreadLocalRandom . current ( ) < nl > db . run ( for { < nl > _ ← p . UserPhoneRepo . create ( rng . nextInt ( ) , userId , ACLUtils . nextAccessSalt ( rng ) , phone , " Mobile phone " ) < nl > - _ ← markContactRegistered ( user , phone , false ) < nl > - } yield AddPhoneAck ( ) ) < nl > + } yield { < nl > + db . run ( markContactRegistered ( user , phone , false ) ) onFailure { < nl > + case e ⇒ log . error ( e , " Failed to mark phone contact registered " ) < nl > + } < nl > + AddPhoneAck ( ) < nl > + } ) < nl > } < nl > < nl > protected def addEmail ( user : User , email : String ) : Unit = < nl > @ @ - 146 , 8 + 150 , 12 @ @ private [ user ] trait UserCommandHandlers { < nl > val rng = ThreadLocalRandom . current ( ) < nl > db . run ( for { < nl > _ ← p . UserEmailRepo . create ( rng . nextInt ( ) , userId , ACLUtils . nextAccessSalt ( rng ) , email , " Email " ) < nl > - _ ← markContactRegistered ( user , email , false ) < nl > - } yield AddEmailAck ( ) ) < nl > + } yield { < nl > + db . run ( markContactRegistered ( user , email , false ) ) onFailure { < nl > + case e ⇒ log . error ( e , " Failed to mark email contact registered " ) < nl > + } < nl > + AddEmailAck ( ) < nl > + } ) < nl > } < nl > < nl > protected def changeNickname ( user : User , clientAuthId : Long , nicknameOpt : Option [ String ] ) : Unit = { < nl > @ @ - 285 , 7 + 293 , 7 @ @ private [ user ] trait UserCommandHandlers { < nl > private def markContactRegistered ( user : User , email : String , isSilent : Boolean ) : DBIO [ Unit ] = { < nl > val date = new DateTime < nl > for { < nl > - _ ← DBIO . from ( userExt . hooks . beforeContactRegistered . runAll ( ) ) < nl > + _ ← DBIO . from ( userExt . hooks . beforeContactRegistered . runAll ( user ) ) < nl > contacts ← p . contact . UnregisteredEmailContactRepo . find ( email ) < nl > _ = log . debug ( s " Unregistered $ email is in contacts of users : $ contacts " ) < nl > _ ← DBIO . sequence ( contacts . map { contact ⇒ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > index 97683b4 . . 2a20435 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > @ @ - 31 , 15 + 31 , 13 @ @ object UserExtension extends ExtensionId [ UserExtensionImpl ] with ExtensionIdProv < nl > } < nl > < nl > final class UserHooksControl ( implicit ec : ExecutionContext ) extends HooksControl { < nl > - val beforeContactRegistered = new HooksStorage0 [ UserHook . BeforeContactRegisteredHook ] ( _ . run ( ) ) < nl > + val beforeContactRegistered = new HooksStorage1 [ UserHook . BeforeContactRegisteredHook , User ] < nl > } < nl > < nl > - abstract class UserHook ( system : ActorSystem ) extends Hook < nl > - < nl > object UserHook { < nl > < nl > - abstract class BeforeContactRegisteredHook ( system : ActorSystem ) extends UserHook ( system ) { < nl > - def run ( ) : Future [ Unit ] < nl > + abstract class BeforeContactRegisteredHook ( system : ActorSystem ) extends Hook1 [ User ] { < nl > + def run ( user : User ) : Future [ Unit ] < nl > } < nl > < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala < nl > index 7bac524 . . 98facb6 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala < nl > @ @ - 44 , 5 + 44 , 4 @ @ object UserEmailRepo { < nl > < nl > def create ( id : Int , userId : Int , accessSalt : String , email : String , title : String ) : FixedSqlAction [ Int , NoStream , Write ] = < nl > emails + = models . UserEmail ( id , userId , accessSalt , email , title ) < nl > - < nl > } < nl > diff - - git a / actor - server / actor - runtime / src / main / resources / reference . conf b / actor - server / actor - runtime / src / main / resources / reference . conf < nl > new file mode 100644 < nl > index 0000000 . . de0a073 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - runtime / src / main / resources / reference . conf < nl > @ @ - 0 , 0 + 1 , 3 @ @ < nl > + akka { < nl > + extensions : [ " im . actor . server . db . DbExtension " , " im . actor . server . bot . BotExtension " , " akka . cluster . client . ClusterClientReceptionist " ] $ { akka . extensions } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > index b56645c . . 9407cea 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala < nl > @ @ - 21 , 14 + 21 , 12 @ @ object ActorConfig { < nl > } < nl > < nl > val config = ConfigFactory . parseString ( < nl > - " " " < nl > + s " " " < nl > | akka { < nl > | actor { < nl > | provider : " akka . cluster . ClusterActorRefProvider " < nl > | } < nl > | < nl > - | extensions : [ " im . actor . server . db . DbExtension " , " im . actor . server . bot . BotExtension " , " akka . cluster . client . ClusterClientReceptionist " ] < nl > - | < nl > | loggers = [ " akka . event . slf4j . Slf4jLogger " ] < nl > | < nl > | logging - filter = " akka . event . slf4j . Slf4jLoggingFilter " < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > index 796c7e0 . . 27b3f07 100644 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . server . oauth . GoogleProvider < nl > import im . actor . server . session . { Session , SessionConfig , SessionRegion } < nl > import im . actor . server . user . UserExtension < nl > import org . scalatest . Suite < nl > + import org . scalatest . concurrent . Futures < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > import scala . concurrent . _ < nl > @ @ - 32 , 7 + 33 , 7 @ @ trait UserStructExtensions { < nl > } < nl > } < nl > < nl > - trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions { < nl > + trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions with Futures { < nl > this : Suite ⇒ < nl > < nl > protected val system : ActorSystem

TEST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 index ed40cd3 . . 798d78e 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 @ @ - 59 , 7 + 59 , 7 @ @ private [ bot ] final class BotExtension ( _ system : ActorSystem ) extends Extension { 
 shardakka . simpleKeyValue ( BotExtension . whUserTokensKV ( userId ) ) 
 
 HttpApi ( system ) . registerHook ( " bots " ) { implicit system ⇒ 
 - Future . successful ( new BotsHttpHandler ( this ) . routes ) 
 + new BotsHttpHandler ( this ) . routes 
 } 
 
 / * * 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 index d6fb686 . . f5e4888 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupExtension . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import akka . util . Timeout 
 import im . actor . server . api . http . HttpApi 
 import im . actor . server . group . http . GroupsHttpHandler 
 
 - import scala . concurrent . { Future , ExecutionContext } 
 + import scala . concurrent . ExecutionContext 
 import scala . concurrent . duration . _ 
 
 sealed trait GroupExtension extends Extension 
 @ @ - 14 , 7 + 14 , 7 @ @ final class GroupExtensionImpl ( system : ActorSystem ) extends GroupExtension with 
 GroupProcessor . register ( ) 
 
 HttpApi ( system ) . registerHook ( " groups " ) { implicit system ⇒ 
 - Future . successful ( new GroupsHttpHandler ( ) . routes ) 
 + new GroupsHttpHandler ( ) . routes 
 } 
 
 lazy val processorRegion : GroupProcessorRegion = GroupProcessorRegion . start ( ) ( system ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala 
 index 682161a . . cdc24fa 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webhooks / WebhooksExtension . scala 
 @ @ - 4 , 8 + 4 , 6 @ @ import akka . actor . _ 
 import im . actor . server . api . http . HttpApi 
 import im . actor . server . webhooks . http . routes . WebhooksHttpHandler 
 
 - import scala . concurrent . Future 
 - 
 sealed trait WebhooksExtension extends Extension 
 
 / * * 
 @ @ - 16 , 7 + 14 , 7 @ @ sealed trait WebhooksExtension extends Extension 
 final class WebhooksExtensionImpl ( system : ActorSystem ) extends WebhooksExtension { 
 
 HttpApi ( system ) . registerHook ( " webhooks " ) { implicit system ⇒ 
 - Future . successful ( new WebhooksHttpHandler ( ) . routes ) 
 + new WebhooksHttpHandler ( ) . routes 
 } 
 
 } 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 index 7f9df65 . . c2a2435 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / FileStorageOperations . scala 
 @ @ - 73 , 7 + 73 , 7 @ @ trait FileStorageOperations extends LocalUploadKeyImplicits { 
 
 protected def getFileName ( name : String ) = if ( name . trim . isEmpty ) " file " else name 
 
 - protected def fileDirectory ( fileId : Long ) : File = file " $ storageLocation / file _ $ { fileId } " 
 + protected def fileDirectory ( fileId : Long ) : File = file " $ storageLocation / file _ $ { fileId } " 
 
 private def getOrCreateFileDir ( fileId : Long ) = fileDirectory ( fileId ) . createIfNotExists ( asDirectory = true ) 
 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 index 16995c0 . . 749dde5 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageAdapter . scala 
 @ @ - 43 , 7 + 43 , 7 @ @ final class LocalFileStorageAdapter ( _ system : ActorSystem ) 
 private val storageConfig : LocalFileStorageConfig = LocalFileStorageConfig . load . get 
 
 HttpApi ( system ) . registerHook ( " localstorage " ) { implicit system ⇒ 
 - Future . successful ( new FilesHttpHandler ( storageConfig ) . routes ) 
 + new FilesHttpHandler ( storageConfig ) . routes 
 } 
 
 protected val storageLocation = initFileStorage ( storageConfig . location ) 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 index 988638b . . 8e54282 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 @ @ - 25 , 12 + 25 , 18 @ @ final class HttpApi ( _ system : ActorSystem ) extends Extension { 
 
 private val hooks = new HttpApiHookControl 
 
 - def runHooks ( ) : Future [ Seq [ Route ] ] = hooks . routesHook . runAll ( ) 
 + def runHooks ( ) : Seq [ Route ] = hooks . routesHook . runAll ( ) 
 
 - def registerHook ( name : String ) ( f : ActorSystem ⇒ Future [ Route ] ) : Unit = { 
 + var customRoutes : Seq [ Route ] = runHooks ( ) 
 + 
 + def registerHook ( name : String ) ( f : ActorSystem ⇒ Route ) : Unit = { 
 hooks . routesHook . register ( name , new HttpApiHook . RoutesHook ( system ) { 
 - override def run ( ) : Future [ Route ] = f ( system ) 
 + override def run ( ) : Route = f ( system ) 
 } ) 
 + 
 + synchronized { 
 + this . customRoutes = runHooks ( ) 
 + } 
 } 
 
 HttpApiFrontend . start ( system . settings . config ) 
 @ @ - 73 , 7 + 79 , 6 @ @ private object HttpApiFrontend { 
 } 
 
 def start ( config : HttpApiConfig , tlsContext : Option [ TlsContext ] ) ( implicit system : ActorSystem ) : Unit = { 
 - import system . dispatcher 
 implicit val mat = ActorMaterializer ( ) 
 
 val status = new StatusHttpHandler 
 @ @ - 81 , 14 + 86 , 7 @ @ private object HttpApiFrontend { 
 
 def defaultRoutes : Route = app . routes ~ defaultVersion ( status . routes ) 
 
 - / / FIXME : consider more optimal Route creation 
 - 
 - def routesFuture : Future [ Route ] = 
 - for { 
 - custom ← customRoutes 
 - } yield custom . foldLeft ( defaultRoutes ) ( _ ~ _ ) 
 - 
 - def customRoutes : Future [ Seq [ Route ] ] = HttpApi ( system ) . runHooks ( ) 
 + def routes = HttpApi ( system ) . customRoutes . foldLeft ( defaultRoutes ) ( _ ~ _ ) 
 
 val defaultSettings = ServerSettings ( system ) 
 
 @ @ - 98 , 12 + 96 , 8 @ @ private object HttpApiFrontend { 
 httpsContext = tlsContext map ( _ . asHttpsContext ) , 
 settings = defaultSettings . copy ( timeouts = defaultSettings . timeouts . copy ( idleTimeout = IdleTimeout ) ) 
 ) 
 - . mapAsync ( 1 ) { conn ⇒ 
 - routesFuture map ( conn → _ ) 
 - } 
 - . runForeach { 
 - case ( conn , routes ) ⇒ 
 - conn handleWith routes 
 + . runForeach { conn ⇒ 
 + conn handleWith routes 
 } 
 } 
 } 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala 
 index bdd7b95 . . 2c7c8d6 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala 
 @ @ - 2 , 16 + 2 , 16 @ @ package im . actor . server . api . http 
 
 import akka . actor . ActorSystem 
 import akka . http . scaladsl . server . Route 
 - import im . actor . hook . { HooksStorage0 , HooksControl , Hook0 } 
 + import im . actor . hook . { SyncHook0 , SyncHooksStorage0 , HooksControl } 
 
 import scala . concurrent . ExecutionContext 
 
 object HttpApiHook { 
 - abstract class RoutesHook ( system : ActorSystem ) extends Hook0 [ Route ] 
 + abstract class RoutesHook ( system : ActorSystem ) extends SyncHook0 [ Route ] 
 } 
 
 final class HttpApiHookControl ( implicit ec : ExecutionContext ) extends HooksControl { 
 import HttpApiHook . _ 
 
 - val routesHook = new HooksStorage0 [ RoutesHook , Route ] ( ) 
 + val routesHook = new SyncHooksStorage0 [ RoutesHook , Route ] ( ) 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / app / AppFilesHttpHandler . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / app / AppFilesHttpHandler . scala 
 index c02fa19 . . d699918 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / app / AppFilesHttpHandler . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / app / AppFilesHttpHandler . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ import im . actor . server . api . http . HttpHandler 
 
 import scala . concurrent . ExecutionContext 
 
 - private [ http ] final class AppFilesHttpHandler ( staticFilesDirectory : String ) ( implicit ec : ExecutionContext ) extends HttpHandler { 
 + private [ http ] final class AppFilesHttpHandler ( staticFilesDirectory : String ) extends HttpHandler { 
 override def routes : Route = pathPrefix ( " app " ) { 
 getFromDirectory ( staticFilesDirectory ) 
 } 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / hook / Hook . scala b / actor - server / actor - runtime / src / main / scala / im / actor / hook / Hook . scala 
 index 1878dfa . . f79bc3b 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / hook / Hook . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / hook / Hook . scala 
 @ @ - 8 , 6 + 8 , 10 @ @ import scala . concurrent . { ExecutionContext , Future } 
 
 trait Hook 
 
 + trait SyncHook0 [ R ] extends Hook { 
 + def run ( ) : R 
 + } 
 + 
 trait Hook0 [ R ] extends Hook { 
 def run ( ) : Future [ R ] 
 } 
 @ @ - 42 , 6 + 46 , 10 @ @ class HooksStorage [ H < : Hook ] { 
 } 
 } 
 
 + final class SyncHooksStorage0 [ H < : SyncHook0 [ R ] , R ] extends HooksStorage [ H ] { 
 + def runAll ( ) : Seq [ R ] = hooksList map ( _ . run ( ) ) 
 + } 
 + 
 final class HooksStorage0 [ H < : Hook0 [ R ] , R ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 def runAll ( ) : Future [ Seq [ R ] ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( ) ) 
 } 
 diff - - git a / actor - server / notes / 1 . 0 . 85 . markdown b / actor - server / notes / 1 . 0 . 85 . markdown 
 new file mode 100644 
 index 0000000 . . cbe2776 
 - - - / dev / null 
 + + + b / actor - server / notes / 1 . 0 . 85 . markdown 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + Bug fixes 
 + = = = 
 + 
 + * Reduce GC overhead caused by Http Routes controlled by hooks 
 + 
 + Packaging 
 + = = = 
 + 
 + Save heap dump in logs dir on OutOfMemoryError 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 index 0cc3629 . . 2aeabbc 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 @ @ - 7 , 18 + 7 , 29 @ @ import scala . concurrent . { ExecutionContext , Future } 
 
 trait Hook 
 
 - class HooksStorage [ A < : Hook ] { 
 - private val hooks = TrieMap . empty [ String , A ] 
 - protected def hooksList = hooks . values . toSeq 
 + trait Hook0 extends Hook { 
 + def run ( ) : Future [ Unit ] 
 + } 
 + 
 + trait Hook1 [ P ] extends Hook { 
 + def run ( p : P ) : Future [ Unit ] 
 + } 
 
 - def register ( name : String , hook : A ) : Unit = 
 + class HooksStorage [ H < : Hook ] { 
 + private val hooks = TrieMap . empty [ String , H ] 
 + protected def hooksList : Seq [ H ] = hooks . values . toSeq 
 + 
 + def register ( name : String , hook : H ) : Unit = 
 if ( hooks . putIfAbsent ( name , hook ) . nonEmpty ) 
 throw HookException . HookAlreadyRegistered ( name ) 
 } 
 
 - class HooksStorage0 [ A < : Hook ] ( run : A ⇒ Future [ Unit ] ) ( implicit ec : ExecutionContext ) extends HooksStorage { 
 - def runAll ( ) : Future [ Unit ] = 
 - FutureExt . ftraverse ( hooksList ) ( run ) map ( _ ⇒ ( ) ) 
 + final class HooksStorage0 [ H < : Hook0 ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 + def runAll ( ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( ) ) map ( _ ⇒ ( ) ) 
 + } 
 + 
 + final class HooksStorage1 [ H < : Hook1 [ P ] , P ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 + def runAll ( p : P ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( p ) ) map ( _ ⇒ ( ) ) 
 } 
 
 abstract class HooksControl { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 index 05c6d5c . . 1e6b001 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 @ @ - 137 , 8 + 137 , 12 @ @ private [ user ] trait UserCommandHandlers { 
 val rng = ThreadLocalRandom . current ( ) 
 db . run ( for { 
 _ ← p . UserPhoneRepo . create ( rng . nextInt ( ) , userId , ACLUtils . nextAccessSalt ( rng ) , phone , " Mobile phone " ) 
 - _ ← markContactRegistered ( user , phone , false ) 
 - } yield AddPhoneAck ( ) ) 
 + } yield { 
 + db . run ( markContactRegistered ( user , phone , false ) ) onFailure { 
 + case e ⇒ log . error ( e , " Failed to mark phone contact registered " ) 
 + } 
 + AddPhoneAck ( ) 
 + } ) 
 } 
 
 protected def addEmail ( user : User , email : String ) : Unit = 
 @ @ - 146 , 8 + 150 , 12 @ @ private [ user ] trait UserCommandHandlers { 
 val rng = ThreadLocalRandom . current ( ) 
 db . run ( for { 
 _ ← p . UserEmailRepo . create ( rng . nextInt ( ) , userId , ACLUtils . nextAccessSalt ( rng ) , email , " Email " ) 
 - _ ← markContactRegistered ( user , email , false ) 
 - } yield AddEmailAck ( ) ) 
 + } yield { 
 + db . run ( markContactRegistered ( user , email , false ) ) onFailure { 
 + case e ⇒ log . error ( e , " Failed to mark email contact registered " ) 
 + } 
 + AddEmailAck ( ) 
 + } ) 
 } 
 
 protected def changeNickname ( user : User , clientAuthId : Long , nicknameOpt : Option [ String ] ) : Unit = { 
 @ @ - 285 , 7 + 293 , 7 @ @ private [ user ] trait UserCommandHandlers { 
 private def markContactRegistered ( user : User , email : String , isSilent : Boolean ) : DBIO [ Unit ] = { 
 val date = new DateTime 
 for { 
 - _ ← DBIO . from ( userExt . hooks . beforeContactRegistered . runAll ( ) ) 
 + _ ← DBIO . from ( userExt . hooks . beforeContactRegistered . runAll ( user ) ) 
 contacts ← p . contact . UnregisteredEmailContactRepo . find ( email ) 
 _ = log . debug ( s " Unregistered $ email is in contacts of users : $ contacts " ) 
 _ ← DBIO . sequence ( contacts . map { contact ⇒ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 index 97683b4 . . 2a20435 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 @ @ - 31 , 15 + 31 , 13 @ @ object UserExtension extends ExtensionId [ UserExtensionImpl ] with ExtensionIdProv 
 } 
 
 final class UserHooksControl ( implicit ec : ExecutionContext ) extends HooksControl { 
 - val beforeContactRegistered = new HooksStorage0 [ UserHook . BeforeContactRegisteredHook ] ( _ . run ( ) ) 
 + val beforeContactRegistered = new HooksStorage1 [ UserHook . BeforeContactRegisteredHook , User ] 
 } 
 
 - abstract class UserHook ( system : ActorSystem ) extends Hook 
 - 
 object UserHook { 
 
 - abstract class BeforeContactRegisteredHook ( system : ActorSystem ) extends UserHook ( system ) { 
 - def run ( ) : Future [ Unit ] 
 + abstract class BeforeContactRegisteredHook ( system : ActorSystem ) extends Hook1 [ User ] { 
 + def run ( user : User ) : Future [ Unit ] 
 } 
 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala 
 index 7bac524 . . 98facb6 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserEmailRepo . scala 
 @ @ - 44 , 5 + 44 , 4 @ @ object UserEmailRepo { 
 
 def create ( id : Int , userId : Int , accessSalt : String , email : String , title : String ) : FixedSqlAction [ Int , NoStream , Write ] = 
 emails + = models . UserEmail ( id , userId , accessSalt , email , title ) 
 - 
 } 
 diff - - git a / actor - server / actor - runtime / src / main / resources / reference . conf b / actor - server / actor - runtime / src / main / resources / reference . conf 
 new file mode 100644 
 index 0000000 . . de0a073 
 - - - / dev / null 
 + + + b / actor - server / actor - runtime / src / main / resources / reference . conf 
 @ @ - 0 , 0 + 1 , 3 @ @ 
 + akka { 
 + extensions : [ " im . actor . server . db . DbExtension " , " im . actor . server . bot . BotExtension " , " akka . cluster . client . ClusterClientReceptionist " ] $ { akka . extensions } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 index b56645c . . 9407cea 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / config / ActorConfig . scala 
 @ @ - 21 , 14 + 21 , 12 @ @ object ActorConfig { 
 } 
 
 val config = ConfigFactory . parseString ( 
 - " " " 
 + s " " " 
 | akka { 
 | actor { 
 | provider : " akka . cluster . ClusterActorRefProvider " 
 | } 
 | 
 - | extensions : [ " im . actor . server . db . DbExtension " , " im . actor . server . bot . BotExtension " , " akka . cluster . client . ClusterClientReceptionist " ] 
 - | 
 | loggers = [ " akka . event . slf4j . Slf4jLogger " ] 
 | 
 | logging - filter = " akka . event . slf4j . Slf4jLoggingFilter " 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 index 796c7e0 . . 27b3f07 100644 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . server . oauth . GoogleProvider 
 import im . actor . server . session . { Session , SessionConfig , SessionRegion } 
 import im . actor . server . user . UserExtension 
 import org . scalatest . Suite 
 + import org . scalatest . concurrent . Futures 
 import slick . driver . PostgresDriver . api . _ 
 
 import scala . concurrent . _ 
 @ @ - 32 , 7 + 33 , 7 @ @ trait UserStructExtensions { 
 } 
 } 
 
 - trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions { 
 + trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions with Futures { 
 this : Suite ⇒ 
 
 protected val system : ActorSystem
