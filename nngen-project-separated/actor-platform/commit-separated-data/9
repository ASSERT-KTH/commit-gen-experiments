BLEU SCORE: 0.17542198478193427

TEST MSG: feat ( server : groups ) : add group ext methods
GENERATED MSG: feat ( server ) : moved pubgroups state to GroupOffice

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto < nl > index b0fa464 . . 183b00c 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / group . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / group . proto < nl > @ @ - 168 , 4 + 168 , 19 @ @ message GroupEvents { < nl > required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > required int32 executor _ user _ id = 2 ; < nl > } < nl > + < nl > + message ExtAdded { < nl > + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; < nl > + < nl > + required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > + required bytes ext = 2 [ ( scalapb . field ) . type = " im . actor . server . group . GroupExt " ] ; < nl > + } < nl > + < nl > + message ExtRemoved { < nl > + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; < nl > + < nl > + required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; < nl > + required string key = 2 ; < nl > + } < nl > + < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / protobuf / groupV2 . proto b / actor - server / actor - core / src / main / protobuf / groupV2 . proto < nl > index 47be829 . . 943b5af 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / groupV2 . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / groupV2 . proto < nl > @ @ - 18 , 6 + 18 , 15 @ @ import " file . proto " ; < nl > import " sequence . proto " ; < nl > import " dialog . proto " ; < nl > < nl > + / / TODO : Can ' t share with UserExt : proto 2 / 3 < nl > + message GroupExt { < nl > + string key = 1 ; < nl > + oneof value { < nl > + string string _ value = 2 ; < nl > + bool bool _ value = 3 ; < nl > + } < nl > + } < nl > + < nl > message GroupMember { < nl > int32 user _ id = 1 ; < nl > int32 inviter _ user _ id = 2 ; < nl > @ @ - 45 , 6 + 54 , 8 @ @ message GroupEnvelope { < nl > GroupCommands . TransferOwnership transfer _ ownership = 14 ; < nl > GroupCommands . UpdateAdminSettings update _ admin _ settings = 30 ; < nl > GroupCommands . DeleteGroup delete _ group = 33 ; < nl > + GroupCommands . AddExt add _ ext = 34 ; < nl > + GroupCommands . RemoveExt remove _ ext = 35 ; < nl > } < nl > oneof query { < nl > GroupQueries . GetAccessHash get _ access _ hash = 15 ; < nl > @ @ - 219 , 6 + 230 , 23 @ @ message GroupCommands { < nl > int32 client _ user _ id = 1 ; < nl > int64 client _ auth _ id = 2 ; < nl > } < nl > + < nl > + message AddExt { < nl > + option ( scalapb . message ) . extends = " GroupCommand " ; < nl > + < nl > + GroupExt ext = 1 ; < nl > + } < nl > + < nl > + message AddExtAck { } < nl > + < nl > + message RemoveExt { < nl > + option ( scalapb . message ) . extends = " GroupCommand " ; < nl > + < nl > + string key = 1 ; < nl > + } < nl > + < nl > + message RemoveExtAck { } < nl > + < nl > } < nl > < nl > message GroupQueries { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > index b7ab276 . . 49c4418 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala < nl > @ @ - 17 , 6 + 17 , 7 @ @ import im . actor . api . rpc . sequence . SeqUpdate < nl > import im . actor . api . rpc . users . ApiSex . ApiSex < nl > import im . actor . api . rpc . users . { ApiFullUser , ApiUser , ApiSex ⇒ S } < nl > import im . actor . serialization . ActorSerializer < nl > + import im . actor . server . group . GroupExt < nl > import org . joda . time . DateTime < nl > < nl > abstract class ActorSystemMapper [ BaseType , CustomType ] ( implicit val system : ActorSystem ) extends TypeMapper [ BaseType , CustomType ] < nl > @ @ - 184 , 6 + 185 , 17 @ @ private [ api ] trait MessageMapper { < nl > def unapplyExtension ( ext : ApiExtension ) : ByteString = < nl > ByteString . copyFrom ( ext . toByteArray ) < nl > < nl > + def applyGroupExt ( bytes : ByteString ) : GroupExt = { < nl > + if ( bytes . size > 0 ) { < nl > + GroupExt . parseFrom ( CodedInputStream . newInstance ( bytes . asReadOnlyByteBuffer ( ) ) ) < nl > + } else { < nl > + null < nl > + } < nl > + } < nl > + < nl > + def unapplyGroupExt ( ext : GroupExt ) : ByteString = < nl > + ByteString . copyFrom ( ext . toByteArray ) < nl > + < nl > private def applyAdminSettings ( bytes : ByteString ) : ApiAdminSettings = { < nl > if ( bytes . size ( ) > 0 ) { < nl > val res = ApiAdminSettings . parseFrom ( CodedInputStream . newInstance ( bytes . toByteArray ) ) < nl > @ @ - 228 , 6 + 240 , 8 @ @ private [ api ] trait MessageMapper { < nl > < nl > implicit val extensionMapper : TypeMapper [ ByteString , ApiExtension ] = TypeMapper ( applyExtension ) ( unapplyExtension ) < nl > < nl > + implicit val groupExtMapper : TypeMapper [ ByteString , GroupExt ] = TypeMapper ( applyGroupExt ) ( unapplyGroupExt ) < nl > + < nl > implicit val adminSettingsMapper : TypeMapper [ ByteString , ApiAdminSettings ] = TypeMapper ( applyAdminSettings ) ( unapplyAdminSettings ) < nl > < nl > implicit def actorRefMapper ( implicit system : ActorSystem ) : TypeMapper [ String , ActorRef ] = < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala < nl > index 578a11e . . 1decbe7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala < nl > @ @ - 46 , 4 + 46 , 6 @ @ object GroupErrors { < nl > case object CantLeaveGroup extends Exception with NoStackTrace < nl > < nl > final case class IncorrectGroupType ( value : Int ) extends Exception with NoStackTrace < nl > + < nl > + case object InvalidExtension extends Exception with NoStackTrace < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > index 44b1b3f . . 8a97247 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > @ @ - 127 , 6 + 127 , 16 @ @ private [ group ] sealed trait Commands extends UserAcl { < nl > GroupEnvelope ( groupId ) < nl > . withDeleteGroup ( DeleteGroup ( clientUserId , clientAuthId ) ) ) . mapTo [ SeqState ] < nl > < nl > + def addExt ( groupId : Int , ext : GroupExt ) : Future [ Unit ] = < nl > + ( processorRegion . ref ? < nl > + GroupEnvelope ( groupId ) < nl > + . withAddExt ( AddExt ( Some ( ext ) ) ) ) . mapTo [ AddExtAck ] map ( _ ⇒ ( ) ) < nl > + < nl > + def removeExt ( groupId : Int , key : String ) : Future [ Unit ] = < nl > + ( processorRegion . ref ? < nl > + GroupEnvelope ( groupId ) < nl > + . withRemoveExt ( RemoveExt ( key ) ) ) . mapTo [ RemoveExtAck ] map ( _ ⇒ ( ) ) < nl > + < nl > } < nl > < nl > private [ group ] sealed trait Queries { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index 0496cd7 . . dd6b895 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 7 , 6 + 7 , 7 @ @ import akka . actor . { ActorRef , ActorSystem , Props , ReceiveTimeout , Status } < nl > import akka . cluster . sharding . ShardRegion < nl > import akka . http . scaladsl . util . FastFuture < nl > import com . github . benmanes . caffeine . cache . { Cache , Caffeine } < nl > + import im . actor . api . rpc . collections . { ApiInt32Value , ApiMapValue , ApiMapValueItem , ApiStringValue } < nl > import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > import im . actor . concurrent . ActorFutures < nl > import im . actor . serialization . ActorSerializer < nl > @ @ - 15 , 6 + 16 , 7 @ @ import im . actor . server . db . DbExtension < nl > import im . actor . server . dialog . _ < nl > import im . actor . server . group . GroupErrors . _ < nl > import im . actor . server . group . GroupCommands . _ < nl > + import im . actor . server . group . GroupExt . Value . { BoolValue , StringValue } < nl > import im . actor . server . group . GroupQueries . _ < nl > import im . actor . server . names . GlobalNamesStorageKeyValueStorage < nl > import im . actor . server . sequence . SeqUpdatesExtension < nl > @ @ - 54 , 6 + 56 , 8 @ @ object GroupProcessor { < nl > 20024 → classOf [ GroupCommands . UpdateAdminSettings ] , < nl > 20025 → classOf [ GroupCommands . MakeHistoryShared ] , < nl > 20026 → classOf [ GroupCommands . DeleteGroup ] , < nl > + 20027 → classOf [ GroupCommands . AddExt ] , < nl > + 20028 → classOf [ GroupCommands . RemoveExt ] , < nl > < nl > 21001 → classOf [ GroupQueries . GetIntegrationToken ] , < nl > 21002 → classOf [ GroupQueries . GetIntegrationTokenResponse ] , < nl > @ @ - 96 , 7 + 100 , 9 @ @ object GroupProcessor { < nl > 22020 → classOf [ GroupEvents . AdminStatusChanged ] , < nl > 22021 → classOf [ GroupEvents . HistoryBecameShared ] , < nl > 22022 → classOf [ GroupEvents . GroupDeleted ] , < nl > - 22023 → classOf [ GroupEvents . MembersBecameAsync ] < nl > + 22023 → classOf [ GroupEvents . MembersBecameAsync ] , < nl > + 22024 → classOf [ GroupEvents . ExtAdded ] , < nl > + 22025 → classOf [ GroupEvents . ExtRemoved ] < nl > ) < nl > < nl > def persistenceIdFor ( groupId : Int ) : String = s " Group - $ { groupId } " < nl > @ @ - 152 , 6 + 158 , 8 @ @ private [ group ] final class GroupProcessor < nl > case u : UpdateTopic ⇒ updateTopic ( u ) < nl > case u : UpdateAbout ⇒ updateAbout ( u ) < nl > case u : UpdateShortName ⇒ updateShortName ( u ) < nl > + case a : AddExt ⇒ addExt ( a ) < nl > + case r : RemoveExt ⇒ removeExt ( r ) < nl > < nl > / / admin actions < nl > case r : RevokeIntegrationToken ⇒ revokeIntegrationToken ( r ) < nl > @ @ - 194 , 6 + 202 , 15 @ @ private [ group ] final class GroupProcessor < nl > case LoadAdminSettings ( clientUserId ) ⇒ loadAdminSettings ( clientUserId ) < nl > } < nl > < nl > + protected def extToApi ( exts : Seq [ GroupExt ] ) : ApiMapValue = { < nl > + ApiMapValue ( < nl > + exts . toVector map { < nl > + case GroupExt ( key , BoolValue ( b ) ) ⇒ ApiMapValueItem ( key , ApiInt32Value ( if ( b ) 1 else 0 ) ) < nl > + case GroupExt ( key , StringValue ( s ) ) ⇒ ApiMapValueItem ( key , ApiStringValue ( s ) ) < nl > + } < nl > + ) < nl > + } < nl > + < nl > override def afterCommit ( e : Event ) = { < nl > super . afterCommit ( e ) < nl > if ( recoveryFinished ) { < nl > @ @ - 202 , 7 + 219 , 7 @ @ private [ group ] final class GroupProcessor < nl > updateCanCall ( state ) < nl > } < nl > / / from 50 + members we make group with async members < nl > - if ( state . membersCount > = 50 & & ! state . isAsyncMembers ) { < nl > + if ( ! state . isAsyncMembers & & state . membersCount > = 50 ) { < nl > makeMembersAsync ( ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > index cf68390 . . 65955c7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > @ @ - 114 , 7 + 114 , 7 @ @ trait GroupQueryHandlers { < nl > theme = state . topic , < nl > about = state . about , < nl > isHidden = Some ( state . isHidden ) , < nl > - ext = None , < nl > + ext = Some ( extToApi ( state . exts ) ) , < nl > membersCount = Some ( count ) , < nl > groupType = Some ( state . groupType match { < nl > case Channel ⇒ ApiGroupType . CHANNEL < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > index e124305 . . fa42616 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala < nl > @ @ - 96 , 7 + 96 , 8 @ @ private [ group ] object GroupState { < nl > deletedAt = None , < nl > < nl > / / ? ? ? < nl > - extensions = Map . empty < nl > + internalExtensions = Map . empty , < nl > + exts = Seq . empty < nl > ) < nl > } < nl > < nl > @ @ - 124 , 11 + 125 , 12 @ @ private [ group ] final case class GroupState ( < nl > invitedUserIds : Set [ Int ] , < nl > < nl > / / security and etc . < nl > - accessHash : Long , < nl > - adminSettings : AdminSettings , < nl > - bot : Option [ Bot ] , < nl > - deletedAt : Option [ Instant ] , < nl > - extensions : Map [ Int , Array [ Byte ] ] < nl > + accessHash : Long , < nl > + adminSettings : AdminSettings , < nl > + bot : Option [ Bot ] , < nl > + deletedAt : Option [ Instant ] , < nl > + internalExtensions : Map [ Int , Array [ Byte ] ] , < nl > + exts : Seq [ GroupExt ] < nl > ) extends ProcessorState [ GroupState ] { < nl > < nl > lazy val memberIds = members . keySet < nl > @ @ - 200 , 7 + 202 , 7 @ @ private [ group ] final case class GroupState ( < nl > if ( typeOfGroup . isChannel ) AdminSettings . ChannelsDefault < nl > else AdminSettings . PlainDefault , < nl > bot = None , < nl > - extensions = ( evt . extensions map { / / TODO : validate is it right ? < nl > + internalExtensions = ( evt . extensions map { / / TODO : validate is it right ? < nl > case ApiExtension ( extId , data ) ⇒ < nl > extId → data < nl > } ) . toMap < nl > @ @ - 287 , 6 + 289 , 13 @ @ private [ group ] final case class GroupState ( < nl > if ( groupType . isChannel ) AdminSettings . ChannelsDefault < nl > else AdminSettings . PlainDefault < nl > ) < nl > + case ExtAdded ( _ , ext ) ⇒ < nl > + if ( exts . contains ( ext ) ) < nl > + this < nl > + else < nl > + this . copy ( exts = exts : + ext ) < nl > + case ExtRemoved ( _ , key ) ⇒ < nl > + this . copy ( exts = exts . filterNot ( _ . key = = key ) ) < nl > / / deprecated events < nl > case UserBecameAdmin ( _ , userId , _ ) ⇒ < nl > this . copy ( < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala < nl > index 462075a . . bc42b1e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala < nl > @ @ - 9 , 7 + 9 , 7 @ @ import com . github . ghik . silencer . silent < nl > import im . actor . api . rpc . files . ApiAvatar < nl > import im . actor . api . rpc . groups . _ < nl > import im . actor . server . file . { Avatar , ImageUtils } < nl > - import im . actor . server . group . GroupCommands . { MakeHistoryShared , UpdateAbout , UpdateAvatar , UpdateAvatarAck , UpdateShortName , UpdateTitle , UpdateTopic } < nl > + import im . actor . server . group . GroupCommands . { AddExt , AddExtAck , MakeHistoryShared , RemoveExt , RemoveExtAck , UpdateAbout , UpdateAvatar , UpdateAvatarAck , UpdateShortName , UpdateTitle , UpdateTopic } < nl > import im . actor . server . group . GroupErrors . _ < nl > import im . actor . server . group . GroupEvents . { AboutUpdated , AvatarUpdated , ShortNameUpdated , TitleUpdated , TopicUpdated } < nl > import im . actor . server . model . AvatarData < nl > @ @ - 327 , 6 + 327 , 33 @ @ private [ group ] trait InfoCommandHandlers { < nl > } < nl > } < nl > < nl > + protected def addExt ( cmd : AddExt ) : Unit = < nl > + cmd . ext match { < nl > + case Some ( ext ) ⇒ < nl > + persist ( GroupEvents . ExtAdded ( Instant . now , ext ) ) { evt ⇒ < nl > + val newState = commit ( evt ) < nl > + sendExtUpdate ( newState ) map ( _ ⇒ AddExtAck ( ) ) pipeTo sender ( ) < nl > + } < nl > + case None ⇒ < nl > + sender ( ) ! Status . Failure ( InvalidExtension ) < nl > + } < nl > + < nl > + protected def removeExt ( cmd : RemoveExt ) : Unit = < nl > + if ( state . exts . exists ( _ . key = = cmd . key ) ) { < nl > + persist ( GroupEvents . ExtRemoved ( Instant . now , cmd . key ) ) { evt ⇒ < nl > + val newState = commit ( evt ) < nl > + sendExtUpdate ( newState ) map ( _ ⇒ RemoveExtAck ( ) ) pipeTo sender ( ) < nl > + } < nl > + } else { < nl > + sender ( ) ! RemoveExtAck ( ) < nl > + } < nl > + < nl > + private def sendExtUpdate ( state : GroupState ) : Future [ Unit ] = < nl > + seqUpdExt . broadcastPeopleUpdate ( < nl > + userIds = state . memberIds , < nl > + update = UpdateGroupExtChanged ( groupId , Some ( extToApi ( state . exts ) ) ) < nl > + ) < nl > + < nl > private def getAvatarData ( avatar : Option [ Avatar ] ) : AvatarData = < nl > avatar < nl > . map ( ImageUtils . getAvatarData ( AvatarData . OfGroup , groupId , _ ) )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - peer - managers / src / main / protobuf / group . proto b / actor - server / actor - peer - managers / src / main / protobuf / group . proto < nl > index 089851f . . 17113d1 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / protobuf / group . proto < nl > + + + b / actor - server / actor - peer - managers / src / main / protobuf / group . proto < nl > @ @ - 23 , 7 + 23 , 7 @ @ message GroupCommands { < nl > repeated int32 user _ ids = 5 ; < nl > } < nl > < nl > - message CreateResponse { < nl > + message CreateAck { < nl > required int64 access _ hash = 1 ; < nl > required int32 seq = 2 ; < nl > required bytes state = 3 ; < nl > @ @ - 114 , 6 + 114 , 16 @ @ message GroupCommands { < nl > optional bytes avatar = 1 [ ( scalapb . field ) . type = " im . actor . api . rpc . files . Avatar " ] ; < nl > required SeqStateDate seqstatedate = 2 ; < nl > } < nl > + < nl > + message MakePublic { < nl > + option ( scalapb . message ) . extends = " im . actor . server . group . GroupCommand " ; < nl > + < nl > + required int32 group _ id = 1 ; < nl > + < nl > + optional string descrption = 2 ; < nl > + } < nl > + < nl > + message MakePublicAck { } < nl > } < nl > < nl > message GroupEvents { < nl > @ @ - 182 , 5 + 192 , 15 @ @ message GroupEvents { < nl > < nl > optional Avatar avatar = 1 ; < nl > } < nl > + < nl > + message BecamePublic { < nl > + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; < nl > + } < nl > + < nl > + message DescriptionUpdated { < nl > + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; < nl > + < nl > + required string description = 1 ; < nl > + } < nl > } < nl > < nl > diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 2b48b44 . . 82fcaec 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 6 , 7 + 6 , 6 @ @ import slick . driver . PostgresDriver . api . _ < nl > import im . actor . api . rpc . groups . UpdateGroupAvatarChanged < nl > import im . actor . server . api . ApiConversions . _ < nl > import im . actor . server . file . Avatar < nl > - import im . actor . server . group . GroupEvents . AvatarUpdated < nl > import im . actor . server . push . SeqUpdatesManager . _ < nl > import im . actor . server . push . SeqUpdatesManagerRegion < nl > import im . actor . server . sequence . SeqStateDate < nl > @ @ - 18 , 6 + 17 , 7 @ @ private [ group ] trait GroupCommandHandlers { < nl > self : GroupOfficeActor ⇒ < nl > < nl > import GroupCommands . _ < nl > + import GroupEvents . _ < nl > < nl > private implicit val system = context . system < nl > private implicit val ec = context . dispatcher < nl > @ @ - 53 , 4 + 53 , 13 @ @ private [ group ] trait GroupCommandHandlers { < nl > } ) < nl > } < nl > } < nl > + < nl > + protected def makePublic ( group : Group , description : String ) ( implicit db : Database ) : Unit = { < nl > + persistStashingReply ( Vector ( BecamePublic ( ) , DescriptionUpdated ( description ) ) ) ( workWith ( _ , group ) ) { _ ⇒ < nl > + db . run ( DBIO . sequence ( Seq ( < nl > + p . Group . makePublic ( groupId ) , < nl > + p . Group . updateDescription ( groupId , description ) < nl > + ) ) ) map ( _ ⇒ MakePublicAck ( ) ) < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala < nl > index 2021d59 . . 874d345 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala < nl > + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala < nl > @ @ - 52 , 6 + 52 , 7 @ @ private [ group ] case class Group ( < nl > members : Map [ Int , Member ] , < nl > invitedUserIds : Set [ Int ] , < nl > title : String , < nl > + description : String , < nl > isPublic : Boolean , < nl > lastSenderId : Option [ Int ] , < nl > lastReceivedDate : Option [ DateTime ] , < nl > @ @ - 67 , 7 + 68 , 7 @ @ private [ group ] object GroupOfficeActor { < nl > private case class Initialized ( groupUsersIds : Set [ Int ] , invitedUsersIds : Set [ Int ] , isPublic : Boolean ) < nl > < nl > ActorSerializer . register ( 5001 , classOf [ GroupCommands . Create ] ) < nl > - ActorSerializer . register ( 5002 , classOf [ GroupCommands . CreateResponse ] ) < nl > + ActorSerializer . register ( 5002 , classOf [ GroupCommands . CreateAck ] ) < nl > ActorSerializer . register ( 5003 , classOf [ GroupCommands . Invite ] ) < nl > ActorSerializer . register ( 5004 , classOf [ GroupCommands . Join ] ) < nl > ActorSerializer . register ( 5005 , classOf [ GroupCommands . Kick ] ) < nl > @ @ - 76 , 6 + 77 , 8 @ @ private [ group ] object GroupOfficeActor { < nl > ActorSerializer . register ( 5008 , classOf [ GroupCommands . MessageReceived ] ) < nl > ActorSerializer . register ( 5009 , classOf [ GroupCommands . MessageRead ] ) < nl > ActorSerializer . register ( 5010 , classOf [ GroupCommands . UpdateAvatar ] ) < nl > + ActorSerializer . register ( 5011 , classOf [ GroupCommands . MakePublic ] ) < nl > + ActorSerializer . register ( 5012 , classOf [ GroupCommands . MakePublicAck ] ) < nl > < nl > ActorSerializer . register ( 6001 , classOf [ GroupEvents . MessageRead ] ) < nl > ActorSerializer . register ( 6002 , classOf [ GroupEvents . MessageReceived ] ) < nl > @ @ - 86 , 6 + 89 , 8 @ @ private [ group ] object GroupOfficeActor { < nl > ActorSerializer . register ( 6007 , classOf [ GroupEvents . UserKicked ] ) < nl > ActorSerializer . register ( 6008 , classOf [ GroupEvents . UserLeft ] ) < nl > ActorSerializer . register ( 6009 , classOf [ GroupEvents . AvatarUpdated ] ) < nl > + ActorSerializer . register ( 6010 , classOf [ GroupEvents . BecamePublic ] ) < nl > + ActorSerializer . register ( 6011 , classOf [ GroupEvents . DescriptionUpdated ] ) < nl > < nl > def props ( < nl > implicit < nl > @ @ - 178 , 7 + 183 , 7 @ @ private [ group ] final class GroupOfficeActor ( < nl > serviceMessage . toByteArray < nl > ) < nl > SeqState ( seq , state ) ← broadcastClientUpdate ( creatorUserId , creatorAuthId , update , None , false ) < nl > - } yield CreateResponse ( group . accessHash , seq , state , date . getMillis ) < nl > + } yield CreateAck ( group . accessHash , seq , state , date . getMillis ) < nl > ) pipeTo sender ( ) < nl > < nl > case evt @ GroupEvents . BotAdded ( userId , token ) ⇒ < nl > @ @ - 313 , 8 + 318 , 6 @ @ private [ group ] final class GroupOfficeActor ( < nl > val memberIds = group . members . keySet < nl > < nl > val action : DBIO [ ( SeqStateDate , Vector [ Sequence ] , Long ) ] = { < nl > - context become working ( updateState ( evt , group ) ) < nl > - < nl > val isMember = memberIds . contains ( joiningUserId ) < nl > < nl > / / TODO : Move to view < nl > @ @ - 402 , 6 + 405 , 8 @ @ private [ group ] final class GroupOfficeActor ( < nl > } < nl > case UpdateAvatar ( groupId , clientUserId , clientAuthId , avatarOpt , randomId ) ⇒ < nl > updateAvatar ( group , clientUserId , clientAuthId , avatarOpt , randomId ) < nl > + case MakePublic ( groupId , description ) ⇒ < nl > + makePublic ( group , description . getOrElse ( " " ) ) < nl > case StopOffice ⇒ context stop self < nl > case ReceiveTimeout ⇒ context . parent ! ShardRegion . Passivate ( stopMessage = StopOffice ) < nl > } < nl > @ @ - 431 , 6 + 436 , 7 @ @ private [ group ] final class GroupOfficeActor ( < nl > id = groupId , < nl > accessHash = evt . accessHash , < nl > title = evt . title , < nl > + description = " " , < nl > creatorUserId = evt . creatorUserId , < nl > createdAt = evt . createdAt , < nl > members = Map ( evt . creatorUserId → Member ( evt . creatorUserId , evt . creatorUserId , evt . createdAt ) ) , < nl > @ @ - 470 , 6 + 476 , 10 @ @ private [ group ] final class GroupOfficeActor ( < nl > state . copy ( members = state . members - userId ) < nl > case GroupEvents . AvatarUpdated ( avatar ) ⇒ < nl > state . copy ( avatar = avatar ) < nl > + case GroupEvents . BecamePublic ( ) ⇒ < nl > + state . copy ( isPublic = true ) < nl > + case GroupEvents . DescriptionUpdated ( desc ) ⇒ < nl > + state . copy ( description = desc ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > index dfcb529 . . 8abdaaa 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > @ @ - 21 , 9 + 21 , 23 @ @ trait GroupOperations { < nl > timeout : Timeout , < nl > ec : ExecutionContext , < nl > client : AuthorizedClientData < nl > - ) : Future [ CreateResponse ] = < nl > - ( peerManagerRegion . ref ? Create ( groupId , client . userId , client . authId , title , randomId , userIds . toSeq ) ) < nl > - . mapTo [ CreateResponse ] < nl > + ) : Future [ CreateAck ] = create ( groupId , client . userId , client . authId , title , randomId , userIds ) < nl > + < nl > + def create ( groupId : Int , clientUserId : Int , clientAuthId : Long , title : String , randomId : Long , userIds : Set [ Int ] ) ( < nl > + implicit < nl > + peerManagerRegion : GroupOfficeRegion , < nl > + timeout : Timeout , < nl > + ec : ExecutionContext < nl > + ) : Future [ CreateAck ] = < nl > + ( peerManagerRegion . ref ? Create ( groupId , clientUserId , clientAuthId , title , randomId , userIds . toSeq ) ) . mapTo [ CreateAck ] < nl > + < nl > + def makePublic ( groupId : Int , description : String ) ( < nl > + implicit < nl > + region : GroupOfficeRegion , < nl > + timeout : Timeout , < nl > + ec : ExecutionContext < nl > + ) : Future [ MakePublicAck ] = < nl > + ( region . ref ? MakePublic ( groupId , Some ( description ) ) ) . mapTo [ MakePublicAck ] < nl > < nl > def sendMessage ( groupId : Int , senderUserId : Int , senderAuthId : Long , accessHash : Long , randomId : Long , message : ApiMessage , isFat : Boolean = false ) ( < nl > implicit < nl > diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala < nl > index 6bdbeb9 . . 7c48f2a 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala < nl > + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . office < nl > < nl > import java . util . concurrent . TimeUnit < nl > < nl > + import scala . collection . immutable < nl > import scala . concurrent . Future < nl > import scala . concurrent . duration . _ < nl > import scala . language . postfixOps < nl > @ @ - 24 , 10 + 25 , 17 @ @ trait Office extends PersistentActor with ActorLogging { < nl > log . error ( reason , " Failure while processing message { } " , message ) < nl > } < nl > < nl > - def stashing : Receive = { < nl > + protected def stashing : Receive = { < nl > case msg ⇒ stash ( ) < nl > } < nl > < nl > + def persistReply [ E , R ] ( e : E ) ( onComplete : E ⇒ Any ) ( f : E ⇒ R ) : Unit = { < nl > + persist ( e ) { evt ⇒ < nl > + sender ( ) ! f ( e ) < nl > + onComplete ( evt ) < nl > + } < nl > + } < nl > + < nl > def persistStashing [ E , R ] ( e : E ) ( onComplete : E ⇒ Any ) ( f : E ⇒ Future [ R ] ) : Unit = { < nl > context become stashing < nl > < nl > @ @ - 64 , 6 + 72 , 28 @ @ trait Office extends PersistentActor with ActorLogging { < nl > } < nl > } < nl > < nl > + def persistStashingReply [ E , R ] ( es : immutable . Seq [ E ] ) ( onComplete : E ⇒ Any ) ( f : immutable . Seq [ E ] ⇒ Future [ R ] ) : Unit = { < nl > + val replyTo = sender ( ) < nl > + < nl > + context become stashing < nl > + < nl > + persistAsync ( es ) ( _ ⇒ ( ) ) < nl > + < nl > + defer ( ( ) ) { _ ⇒ < nl > + f ( es ) pipeTo replyTo onComplete { < nl > + case Success ( _ ) ⇒ < nl > + es foreach onComplete < nl > + unstashAll ( ) < nl > + case Failure ( e ) ⇒ < nl > + log . error ( e , " Failure while processing event { } " , e ) < nl > + replyTo ! Status . Failure ( e ) < nl > + < nl > + es foreach onComplete < nl > + unstashAll ( ) < nl > + } < nl > + } < nl > + } < nl > + < nl > if ( passivationIntervalMs > 0 ) { < nl > log . warning ( " Passivating in { } ms " , passivationIntervalMs ) < nl > < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > index 9d89b96 . . 247c8fc 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > @ @ - 99 , 4 + 99 , 11 @ @ object Group { < nl > byIdC . applied ( id ) < nl > . map ( g ⇒ ( g . title , g . titleChangerUserId , g . titleChangedAt , g . titleChangeRandomId ) ) < nl > . update ( ( title , changerUserId , date , randomId ) ) < nl > + < nl > + def updateDescription ( id : Int , description : String ) = < nl > + byIdC . applied ( id ) < nl > + . map ( _ . description ) < nl > + . update ( description ) < nl > + < nl > + def makePublic ( id : Int ) = byIdC . applied ( id ) . map ( _ . isPublic ) . update ( true ) < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala < nl > index d7aa06b . . 8f6c13d 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala < nl > @ @ - 1 , 22 + 1 , 13 @ @ < nl > package im . actor . server . api . rpc . service . pubgroups < nl > < nl > - import im . actor . server . group . GroupOfficeRegion < nl > - < nl > import scala . concurrent . { ExecutionContext , Future } < nl > < nl > import akka . actor . ActorSystem < nl > - import com . amazonaws . services . s3 . transfer . TransferManager < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > import im . actor . api . rpc . _ < nl > - import im . actor . api . rpc . groups . { ResponseCreateGroup , ResponseJoinGroup , ResponseJoinGroupDirect , GroupsService } < nl > - import im . actor . api . rpc . pubgroups . { PublicGroup , ResponseGetPublicGroups , PubgroupsService } < nl > - import im . actor . server . api . rpc . service . groups . GroupInviteConfig < nl > - import im . actor . server . models < nl > + import im . actor . api . rpc . pubgroups . { PubgroupsService , ResponseGetPublicGroups } < nl > import im . actor . server . persist < nl > - import im . actor . server . presences . GroupPresenceManagerRegion < nl > - import im . actor . server . push . SeqUpdatesManagerRegion < nl > - import im . actor . server . util . GroupUtils < nl > import im . actor . server . util . GroupUtils . getPubgroupStructUnsafe < nl > < nl > class PubgroupsServiceImpl ( < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala < nl > index a2bfb1f . . 2cd7688 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala < nl > @ @ - 1 , 15 + 1 , 17 @ @ < nl > package im . actor . server . api . rpc . service < nl > < nl > - import scala . concurrent . Await < nl > + import scala . concurrent . { ExecutionContext , Await } < nl > import scala . concurrent . duration . _ < nl > import scala . util . Random < nl > < nl > import akka . actor . ActorSystem < nl > + import akka . util . Timeout < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > import im . actor . api . rpc . ClientData < nl > import im . actor . api . rpc . groups . { GroupsService , ResponseCreateGroup } < nl > import im . actor . api . rpc . peers . UserOutPeer < nl > + import im . actor . server . group . { GroupOfficeRegion , GroupOffice } < nl > import im . actor . server . persist < nl > import im . actor . server . util . ACLUtils < nl > < nl > @ @ - 32 , 14 + 34 , 13 @ @ trait GroupsServiceHelpers { < nl > clientData : ClientData , < nl > db : Database , < nl > service : GroupsService , < nl > - actorSystem : ActorSystem < nl > + actorSystem : ActorSystem , < nl > + region : GroupOfficeRegion , < nl > + timeout : Timeout , < nl > + ec : ExecutionContext < nl > ) : ResponseCreateGroup = { < nl > val resp = createGroup ( title , userIds ) < nl > - / / TODO : delete after proper service implementation < nl > - Await . result ( db . run ( persist . Group . groups < nl > - . filter ( _ . id = = = resp . groupPeer . groupId ) < nl > - . map ( g ⇒ ( g . isPublic , g . description ) ) < nl > - . update ( ( true , description ) ) ) , 5 . seconds ) < nl > + Await . result ( GroupOffice . makePublic ( resp . groupPeer . groupId , description ) , 5 . seconds ) < nl > resp < nl > } < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > index 544eb9e . . 8d085c2 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > @ @ - 173 , 10 + 173 , 12 @ @ class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceHelpers < nl > < nl > def public ( ) = { < nl > val group = models . Group ( Random . nextInt , 0 , Random . nextLong , " Public group " , isPublic = true , new DateTime , " A public group " ) < nl > + val groupId = Random . nextInt < nl > < nl > - whenReady ( db . run ( persist . Group . create ( group , Random . nextLong ) ) ) ( identity ) < nl > + val accessHash = whenReady ( GroupOffice . create ( groupId , 0 , 0L , " Public group " , Random . nextLong , Set . empty ) ) ( _ . accessHash ) < nl > + whenReady ( GroupOffice . makePublic ( groupId , " Public group description " ) ) ( identity ) < nl > < nl > - val groupOutPeer = GroupOutPeer ( group . id , group . accessHash ) < nl > + val groupOutPeer = GroupOutPeer ( groupId , accessHash ) < nl > < nl > { < nl > implicit val clientData = clientData1

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto 
 index b0fa464 . . 183b00c 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / group . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / group . proto 
 @ @ - 168 , 4 + 168 , 19 @ @ message GroupEvents { 
 required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 required int32 executor _ user _ id = 2 ; 
 } 
 + 
 + message ExtAdded { 
 + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; 
 + 
 + required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 + required bytes ext = 2 [ ( scalapb . field ) . type = " im . actor . server . group . GroupExt " ] ; 
 + } 
 + 
 + message ExtRemoved { 
 + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; 
 + 
 + required int64 ts = 1 [ ( scalapb . field ) . type = " java . time . Instant " ] ; 
 + required string key = 2 ; 
 + } 
 + 
 } 
 diff - - git a / actor - server / actor - core / src / main / protobuf / groupV2 . proto b / actor - server / actor - core / src / main / protobuf / groupV2 . proto 
 index 47be829 . . 943b5af 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / groupV2 . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / groupV2 . proto 
 @ @ - 18 , 6 + 18 , 15 @ @ import " file . proto " ; 
 import " sequence . proto " ; 
 import " dialog . proto " ; 
 
 + / / TODO : Can ' t share with UserExt : proto 2 / 3 
 + message GroupExt { 
 + string key = 1 ; 
 + oneof value { 
 + string string _ value = 2 ; 
 + bool bool _ value = 3 ; 
 + } 
 + } 
 + 
 message GroupMember { 
 int32 user _ id = 1 ; 
 int32 inviter _ user _ id = 2 ; 
 @ @ - 45 , 6 + 54 , 8 @ @ message GroupEnvelope { 
 GroupCommands . TransferOwnership transfer _ ownership = 14 ; 
 GroupCommands . UpdateAdminSettings update _ admin _ settings = 30 ; 
 GroupCommands . DeleteGroup delete _ group = 33 ; 
 + GroupCommands . AddExt add _ ext = 34 ; 
 + GroupCommands . RemoveExt remove _ ext = 35 ; 
 } 
 oneof query { 
 GroupQueries . GetAccessHash get _ access _ hash = 15 ; 
 @ @ - 219 , 6 + 230 , 23 @ @ message GroupCommands { 
 int32 client _ user _ id = 1 ; 
 int64 client _ auth _ id = 2 ; 
 } 
 + 
 + message AddExt { 
 + option ( scalapb . message ) . extends = " GroupCommand " ; 
 + 
 + GroupExt ext = 1 ; 
 + } 
 + 
 + message AddExtAck { } 
 + 
 + message RemoveExt { 
 + option ( scalapb . message ) . extends = " GroupCommand " ; 
 + 
 + string key = 1 ; 
 + } 
 + 
 + message RemoveExtAck { } 
 + 
 } 
 
 message GroupQueries { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala 
 index b7ab276 . . 49c4418 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / api / TypeMappers . scala 
 @ @ - 17 , 6 + 17 , 7 @ @ import im . actor . api . rpc . sequence . SeqUpdate 
 import im . actor . api . rpc . users . ApiSex . ApiSex 
 import im . actor . api . rpc . users . { ApiFullUser , ApiUser , ApiSex ⇒ S } 
 import im . actor . serialization . ActorSerializer 
 + import im . actor . server . group . GroupExt 
 import org . joda . time . DateTime 
 
 abstract class ActorSystemMapper [ BaseType , CustomType ] ( implicit val system : ActorSystem ) extends TypeMapper [ BaseType , CustomType ] 
 @ @ - 184 , 6 + 185 , 17 @ @ private [ api ] trait MessageMapper { 
 def unapplyExtension ( ext : ApiExtension ) : ByteString = 
 ByteString . copyFrom ( ext . toByteArray ) 
 
 + def applyGroupExt ( bytes : ByteString ) : GroupExt = { 
 + if ( bytes . size > 0 ) { 
 + GroupExt . parseFrom ( CodedInputStream . newInstance ( bytes . asReadOnlyByteBuffer ( ) ) ) 
 + } else { 
 + null 
 + } 
 + } 
 + 
 + def unapplyGroupExt ( ext : GroupExt ) : ByteString = 
 + ByteString . copyFrom ( ext . toByteArray ) 
 + 
 private def applyAdminSettings ( bytes : ByteString ) : ApiAdminSettings = { 
 if ( bytes . size ( ) > 0 ) { 
 val res = ApiAdminSettings . parseFrom ( CodedInputStream . newInstance ( bytes . toByteArray ) ) 
 @ @ - 228 , 6 + 240 , 8 @ @ private [ api ] trait MessageMapper { 
 
 implicit val extensionMapper : TypeMapper [ ByteString , ApiExtension ] = TypeMapper ( applyExtension ) ( unapplyExtension ) 
 
 + implicit val groupExtMapper : TypeMapper [ ByteString , GroupExt ] = TypeMapper ( applyGroupExt ) ( unapplyGroupExt ) 
 + 
 implicit val adminSettingsMapper : TypeMapper [ ByteString , ApiAdminSettings ] = TypeMapper ( applyAdminSettings ) ( unapplyAdminSettings ) 
 
 implicit def actorRefMapper ( implicit system : ActorSystem ) : TypeMapper [ String , ActorRef ] = 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala 
 index 578a11e . . 1decbe7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupErrors . scala 
 @ @ - 46 , 4 + 46 , 6 @ @ object GroupErrors { 
 case object CantLeaveGroup extends Exception with NoStackTrace 
 
 final case class IncorrectGroupType ( value : Int ) extends Exception with NoStackTrace 
 + 
 + case object InvalidExtension extends Exception with NoStackTrace 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 index 44b1b3f . . 8a97247 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 @ @ - 127 , 6 + 127 , 16 @ @ private [ group ] sealed trait Commands extends UserAcl { 
 GroupEnvelope ( groupId ) 
 . withDeleteGroup ( DeleteGroup ( clientUserId , clientAuthId ) ) ) . mapTo [ SeqState ] 
 
 + def addExt ( groupId : Int , ext : GroupExt ) : Future [ Unit ] = 
 + ( processorRegion . ref ? 
 + GroupEnvelope ( groupId ) 
 + . withAddExt ( AddExt ( Some ( ext ) ) ) ) . mapTo [ AddExtAck ] map ( _ ⇒ ( ) ) 
 + 
 + def removeExt ( groupId : Int , key : String ) : Future [ Unit ] = 
 + ( processorRegion . ref ? 
 + GroupEnvelope ( groupId ) 
 + . withRemoveExt ( RemoveExt ( key ) ) ) . mapTo [ RemoveExtAck ] map ( _ ⇒ ( ) ) 
 + 
 } 
 
 private [ group ] sealed trait Queries { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index 0496cd7 . . dd6b895 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 7 , 6 + 7 , 7 @ @ import akka . actor . { ActorRef , ActorSystem , Props , ReceiveTimeout , Status } 
 import akka . cluster . sharding . ShardRegion 
 import akka . http . scaladsl . util . FastFuture 
 import com . github . benmanes . caffeine . cache . { Cache , Caffeine } 
 + import im . actor . api . rpc . collections . { ApiInt32Value , ApiMapValue , ApiMapValueItem , ApiStringValue } 
 import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 import im . actor . concurrent . ActorFutures 
 import im . actor . serialization . ActorSerializer 
 @ @ - 15 , 6 + 16 , 7 @ @ import im . actor . server . db . DbExtension 
 import im . actor . server . dialog . _ 
 import im . actor . server . group . GroupErrors . _ 
 import im . actor . server . group . GroupCommands . _ 
 + import im . actor . server . group . GroupExt . Value . { BoolValue , StringValue } 
 import im . actor . server . group . GroupQueries . _ 
 import im . actor . server . names . GlobalNamesStorageKeyValueStorage 
 import im . actor . server . sequence . SeqUpdatesExtension 
 @ @ - 54 , 6 + 56 , 8 @ @ object GroupProcessor { 
 20024 → classOf [ GroupCommands . UpdateAdminSettings ] , 
 20025 → classOf [ GroupCommands . MakeHistoryShared ] , 
 20026 → classOf [ GroupCommands . DeleteGroup ] , 
 + 20027 → classOf [ GroupCommands . AddExt ] , 
 + 20028 → classOf [ GroupCommands . RemoveExt ] , 
 
 21001 → classOf [ GroupQueries . GetIntegrationToken ] , 
 21002 → classOf [ GroupQueries . GetIntegrationTokenResponse ] , 
 @ @ - 96 , 7 + 100 , 9 @ @ object GroupProcessor { 
 22020 → classOf [ GroupEvents . AdminStatusChanged ] , 
 22021 → classOf [ GroupEvents . HistoryBecameShared ] , 
 22022 → classOf [ GroupEvents . GroupDeleted ] , 
 - 22023 → classOf [ GroupEvents . MembersBecameAsync ] 
 + 22023 → classOf [ GroupEvents . MembersBecameAsync ] , 
 + 22024 → classOf [ GroupEvents . ExtAdded ] , 
 + 22025 → classOf [ GroupEvents . ExtRemoved ] 
 ) 
 
 def persistenceIdFor ( groupId : Int ) : String = s " Group - $ { groupId } " 
 @ @ - 152 , 6 + 158 , 8 @ @ private [ group ] final class GroupProcessor 
 case u : UpdateTopic ⇒ updateTopic ( u ) 
 case u : UpdateAbout ⇒ updateAbout ( u ) 
 case u : UpdateShortName ⇒ updateShortName ( u ) 
 + case a : AddExt ⇒ addExt ( a ) 
 + case r : RemoveExt ⇒ removeExt ( r ) 
 
 / / admin actions 
 case r : RevokeIntegrationToken ⇒ revokeIntegrationToken ( r ) 
 @ @ - 194 , 6 + 202 , 15 @ @ private [ group ] final class GroupProcessor 
 case LoadAdminSettings ( clientUserId ) ⇒ loadAdminSettings ( clientUserId ) 
 } 
 
 + protected def extToApi ( exts : Seq [ GroupExt ] ) : ApiMapValue = { 
 + ApiMapValue ( 
 + exts . toVector map { 
 + case GroupExt ( key , BoolValue ( b ) ) ⇒ ApiMapValueItem ( key , ApiInt32Value ( if ( b ) 1 else 0 ) ) 
 + case GroupExt ( key , StringValue ( s ) ) ⇒ ApiMapValueItem ( key , ApiStringValue ( s ) ) 
 + } 
 + ) 
 + } 
 + 
 override def afterCommit ( e : Event ) = { 
 super . afterCommit ( e ) 
 if ( recoveryFinished ) { 
 @ @ - 202 , 7 + 219 , 7 @ @ private [ group ] final class GroupProcessor 
 updateCanCall ( state ) 
 } 
 / / from 50 + members we make group with async members 
 - if ( state . membersCount > = 50 & & ! state . isAsyncMembers ) { 
 + if ( ! state . isAsyncMembers & & state . membersCount > = 50 ) { 
 makeMembersAsync ( ) 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 index cf68390 . . 65955c7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 @ @ - 114 , 7 + 114 , 7 @ @ trait GroupQueryHandlers { 
 theme = state . topic , 
 about = state . about , 
 isHidden = Some ( state . isHidden ) , 
 - ext = None , 
 + ext = Some ( extToApi ( state . exts ) ) , 
 membersCount = Some ( count ) , 
 groupType = Some ( state . groupType match { 
 case Channel ⇒ ApiGroupType . CHANNEL 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 index e124305 . . fa42616 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupState . scala 
 @ @ - 96 , 7 + 96 , 8 @ @ private [ group ] object GroupState { 
 deletedAt = None , 
 
 / / ? ? ? 
 - extensions = Map . empty 
 + internalExtensions = Map . empty , 
 + exts = Seq . empty 
 ) 
 } 
 
 @ @ - 124 , 11 + 125 , 12 @ @ private [ group ] final case class GroupState ( 
 invitedUserIds : Set [ Int ] , 
 
 / / security and etc . 
 - accessHash : Long , 
 - adminSettings : AdminSettings , 
 - bot : Option [ Bot ] , 
 - deletedAt : Option [ Instant ] , 
 - extensions : Map [ Int , Array [ Byte ] ] 
 + accessHash : Long , 
 + adminSettings : AdminSettings , 
 + bot : Option [ Bot ] , 
 + deletedAt : Option [ Instant ] , 
 + internalExtensions : Map [ Int , Array [ Byte ] ] , 
 + exts : Seq [ GroupExt ] 
 ) extends ProcessorState [ GroupState ] { 
 
 lazy val memberIds = members . keySet 
 @ @ - 200 , 7 + 202 , 7 @ @ private [ group ] final case class GroupState ( 
 if ( typeOfGroup . isChannel ) AdminSettings . ChannelsDefault 
 else AdminSettings . PlainDefault , 
 bot = None , 
 - extensions = ( evt . extensions map { / / TODO : validate is it right ? 
 + internalExtensions = ( evt . extensions map { / / TODO : validate is it right ? 
 case ApiExtension ( extId , data ) ⇒ 
 extId → data 
 } ) . toMap 
 @ @ - 287 , 6 + 289 , 13 @ @ private [ group ] final case class GroupState ( 
 if ( groupType . isChannel ) AdminSettings . ChannelsDefault 
 else AdminSettings . PlainDefault 
 ) 
 + case ExtAdded ( _ , ext ) ⇒ 
 + if ( exts . contains ( ext ) ) 
 + this 
 + else 
 + this . copy ( exts = exts : + ext ) 
 + case ExtRemoved ( _ , key ) ⇒ 
 + this . copy ( exts = exts . filterNot ( _ . key = = key ) ) 
 / / deprecated events 
 case UserBecameAdmin ( _ , userId , _ ) ⇒ 
 this . copy ( 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala 
 index 462075a . . bc42b1e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / InfoCommandHandlers . scala 
 @ @ - 9 , 7 + 9 , 7 @ @ import com . github . ghik . silencer . silent 
 import im . actor . api . rpc . files . ApiAvatar 
 import im . actor . api . rpc . groups . _ 
 import im . actor . server . file . { Avatar , ImageUtils } 
 - import im . actor . server . group . GroupCommands . { MakeHistoryShared , UpdateAbout , UpdateAvatar , UpdateAvatarAck , UpdateShortName , UpdateTitle , UpdateTopic } 
 + import im . actor . server . group . GroupCommands . { AddExt , AddExtAck , MakeHistoryShared , RemoveExt , RemoveExtAck , UpdateAbout , UpdateAvatar , UpdateAvatarAck , UpdateShortName , UpdateTitle , UpdateTopic } 
 import im . actor . server . group . GroupErrors . _ 
 import im . actor . server . group . GroupEvents . { AboutUpdated , AvatarUpdated , ShortNameUpdated , TitleUpdated , TopicUpdated } 
 import im . actor . server . model . AvatarData 
 @ @ - 327 , 6 + 327 , 33 @ @ private [ group ] trait InfoCommandHandlers { 
 } 
 } 
 
 + protected def addExt ( cmd : AddExt ) : Unit = 
 + cmd . ext match { 
 + case Some ( ext ) ⇒ 
 + persist ( GroupEvents . ExtAdded ( Instant . now , ext ) ) { evt ⇒ 
 + val newState = commit ( evt ) 
 + sendExtUpdate ( newState ) map ( _ ⇒ AddExtAck ( ) ) pipeTo sender ( ) 
 + } 
 + case None ⇒ 
 + sender ( ) ! Status . Failure ( InvalidExtension ) 
 + } 
 + 
 + protected def removeExt ( cmd : RemoveExt ) : Unit = 
 + if ( state . exts . exists ( _ . key = = cmd . key ) ) { 
 + persist ( GroupEvents . ExtRemoved ( Instant . now , cmd . key ) ) { evt ⇒ 
 + val newState = commit ( evt ) 
 + sendExtUpdate ( newState ) map ( _ ⇒ RemoveExtAck ( ) ) pipeTo sender ( ) 
 + } 
 + } else { 
 + sender ( ) ! RemoveExtAck ( ) 
 + } 
 + 
 + private def sendExtUpdate ( state : GroupState ) : Future [ Unit ] = 
 + seqUpdExt . broadcastPeopleUpdate ( 
 + userIds = state . memberIds , 
 + update = UpdateGroupExtChanged ( groupId , Some ( extToApi ( state . exts ) ) ) 
 + ) 
 + 
 private def getAvatarData ( avatar : Option [ Avatar ] ) : AvatarData = 
 avatar 
 . map ( ImageUtils . getAvatarData ( AvatarData . OfGroup , groupId , _ ) )

NEAREST DIFF:
diff - - git a / actor - server / actor - peer - managers / src / main / protobuf / group . proto b / actor - server / actor - peer - managers / src / main / protobuf / group . proto 
 index 089851f . . 17113d1 100644 
 - - - a / actor - server / actor - peer - managers / src / main / protobuf / group . proto 
 + + + b / actor - server / actor - peer - managers / src / main / protobuf / group . proto 
 @ @ - 23 , 7 + 23 , 7 @ @ message GroupCommands { 
 repeated int32 user _ ids = 5 ; 
 } 
 
 - message CreateResponse { 
 + message CreateAck { 
 required int64 access _ hash = 1 ; 
 required int32 seq = 2 ; 
 required bytes state = 3 ; 
 @ @ - 114 , 6 + 114 , 16 @ @ message GroupCommands { 
 optional bytes avatar = 1 [ ( scalapb . field ) . type = " im . actor . api . rpc . files . Avatar " ] ; 
 required SeqStateDate seqstatedate = 2 ; 
 } 
 + 
 + message MakePublic { 
 + option ( scalapb . message ) . extends = " im . actor . server . group . GroupCommand " ; 
 + 
 + required int32 group _ id = 1 ; 
 + 
 + optional string descrption = 2 ; 
 + } 
 + 
 + message MakePublicAck { } 
 } 
 
 message GroupEvents { 
 @ @ - 182 , 5 + 192 , 15 @ @ message GroupEvents { 
 
 optional Avatar avatar = 1 ; 
 } 
 + 
 + message BecamePublic { 
 + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; 
 + } 
 + 
 + message DescriptionUpdated { 
 + option ( scalapb . message ) . extends = " im . actor . server . group . GroupEvent " ; 
 + 
 + required string description = 1 ; 
 + } 
 } 
 
 diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 2b48b44 . . 82fcaec 100644 
 - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 6 , 7 + 6 , 6 @ @ import slick . driver . PostgresDriver . api . _ 
 import im . actor . api . rpc . groups . UpdateGroupAvatarChanged 
 import im . actor . server . api . ApiConversions . _ 
 import im . actor . server . file . Avatar 
 - import im . actor . server . group . GroupEvents . AvatarUpdated 
 import im . actor . server . push . SeqUpdatesManager . _ 
 import im . actor . server . push . SeqUpdatesManagerRegion 
 import im . actor . server . sequence . SeqStateDate 
 @ @ - 18 , 6 + 17 , 7 @ @ private [ group ] trait GroupCommandHandlers { 
 self : GroupOfficeActor ⇒ 
 
 import GroupCommands . _ 
 + import GroupEvents . _ 
 
 private implicit val system = context . system 
 private implicit val ec = context . dispatcher 
 @ @ - 53 , 4 + 53 , 13 @ @ private [ group ] trait GroupCommandHandlers { 
 } ) 
 } 
 } 
 + 
 + protected def makePublic ( group : Group , description : String ) ( implicit db : Database ) : Unit = { 
 + persistStashingReply ( Vector ( BecamePublic ( ) , DescriptionUpdated ( description ) ) ) ( workWith ( _ , group ) ) { _ ⇒ 
 + db . run ( DBIO . sequence ( Seq ( 
 + p . Group . makePublic ( groupId ) , 
 + p . Group . updateDescription ( groupId , description ) 
 + ) ) ) map ( _ ⇒ MakePublicAck ( ) ) 
 + } 
 + } 
 } 
 diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala 
 index 2021d59 . . 874d345 100644 
 - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala 
 + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOfficeActor . scala 
 @ @ - 52 , 6 + 52 , 7 @ @ private [ group ] case class Group ( 
 members : Map [ Int , Member ] , 
 invitedUserIds : Set [ Int ] , 
 title : String , 
 + description : String , 
 isPublic : Boolean , 
 lastSenderId : Option [ Int ] , 
 lastReceivedDate : Option [ DateTime ] , 
 @ @ - 67 , 7 + 68 , 7 @ @ private [ group ] object GroupOfficeActor { 
 private case class Initialized ( groupUsersIds : Set [ Int ] , invitedUsersIds : Set [ Int ] , isPublic : Boolean ) 
 
 ActorSerializer . register ( 5001 , classOf [ GroupCommands . Create ] ) 
 - ActorSerializer . register ( 5002 , classOf [ GroupCommands . CreateResponse ] ) 
 + ActorSerializer . register ( 5002 , classOf [ GroupCommands . CreateAck ] ) 
 ActorSerializer . register ( 5003 , classOf [ GroupCommands . Invite ] ) 
 ActorSerializer . register ( 5004 , classOf [ GroupCommands . Join ] ) 
 ActorSerializer . register ( 5005 , classOf [ GroupCommands . Kick ] ) 
 @ @ - 76 , 6 + 77 , 8 @ @ private [ group ] object GroupOfficeActor { 
 ActorSerializer . register ( 5008 , classOf [ GroupCommands . MessageReceived ] ) 
 ActorSerializer . register ( 5009 , classOf [ GroupCommands . MessageRead ] ) 
 ActorSerializer . register ( 5010 , classOf [ GroupCommands . UpdateAvatar ] ) 
 + ActorSerializer . register ( 5011 , classOf [ GroupCommands . MakePublic ] ) 
 + ActorSerializer . register ( 5012 , classOf [ GroupCommands . MakePublicAck ] ) 
 
 ActorSerializer . register ( 6001 , classOf [ GroupEvents . MessageRead ] ) 
 ActorSerializer . register ( 6002 , classOf [ GroupEvents . MessageReceived ] ) 
 @ @ - 86 , 6 + 89 , 8 @ @ private [ group ] object GroupOfficeActor { 
 ActorSerializer . register ( 6007 , classOf [ GroupEvents . UserKicked ] ) 
 ActorSerializer . register ( 6008 , classOf [ GroupEvents . UserLeft ] ) 
 ActorSerializer . register ( 6009 , classOf [ GroupEvents . AvatarUpdated ] ) 
 + ActorSerializer . register ( 6010 , classOf [ GroupEvents . BecamePublic ] ) 
 + ActorSerializer . register ( 6011 , classOf [ GroupEvents . DescriptionUpdated ] ) 
 
 def props ( 
 implicit 
 @ @ - 178 , 7 + 183 , 7 @ @ private [ group ] final class GroupOfficeActor ( 
 serviceMessage . toByteArray 
 ) 
 SeqState ( seq , state ) ← broadcastClientUpdate ( creatorUserId , creatorAuthId , update , None , false ) 
 - } yield CreateResponse ( group . accessHash , seq , state , date . getMillis ) 
 + } yield CreateAck ( group . accessHash , seq , state , date . getMillis ) 
 ) pipeTo sender ( ) 
 
 case evt @ GroupEvents . BotAdded ( userId , token ) ⇒ 
 @ @ - 313 , 8 + 318 , 6 @ @ private [ group ] final class GroupOfficeActor ( 
 val memberIds = group . members . keySet 
 
 val action : DBIO [ ( SeqStateDate , Vector [ Sequence ] , Long ) ] = { 
 - context become working ( updateState ( evt , group ) ) 
 - 
 val isMember = memberIds . contains ( joiningUserId ) 
 
 / / TODO : Move to view 
 @ @ - 402 , 6 + 405 , 8 @ @ private [ group ] final class GroupOfficeActor ( 
 } 
 case UpdateAvatar ( groupId , clientUserId , clientAuthId , avatarOpt , randomId ) ⇒ 
 updateAvatar ( group , clientUserId , clientAuthId , avatarOpt , randomId ) 
 + case MakePublic ( groupId , description ) ⇒ 
 + makePublic ( group , description . getOrElse ( " " ) ) 
 case StopOffice ⇒ context stop self 
 case ReceiveTimeout ⇒ context . parent ! ShardRegion . Passivate ( stopMessage = StopOffice ) 
 } 
 @ @ - 431 , 6 + 436 , 7 @ @ private [ group ] final class GroupOfficeActor ( 
 id = groupId , 
 accessHash = evt . accessHash , 
 title = evt . title , 
 + description = " " , 
 creatorUserId = evt . creatorUserId , 
 createdAt = evt . createdAt , 
 members = Map ( evt . creatorUserId → Member ( evt . creatorUserId , evt . creatorUserId , evt . createdAt ) ) , 
 @ @ - 470 , 6 + 476 , 10 @ @ private [ group ] final class GroupOfficeActor ( 
 state . copy ( members = state . members - userId ) 
 case GroupEvents . AvatarUpdated ( avatar ) ⇒ 
 state . copy ( avatar = avatar ) 
 + case GroupEvents . BecamePublic ( ) ⇒ 
 + state . copy ( isPublic = true ) 
 + case GroupEvents . DescriptionUpdated ( desc ) ⇒ 
 + state . copy ( description = desc ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala 
 index dfcb529 . . 8abdaaa 100644 
 - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala 
 + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / group / GroupOperations . scala 
 @ @ - 21 , 9 + 21 , 23 @ @ trait GroupOperations { 
 timeout : Timeout , 
 ec : ExecutionContext , 
 client : AuthorizedClientData 
 - ) : Future [ CreateResponse ] = 
 - ( peerManagerRegion . ref ? Create ( groupId , client . userId , client . authId , title , randomId , userIds . toSeq ) ) 
 - . mapTo [ CreateResponse ] 
 + ) : Future [ CreateAck ] = create ( groupId , client . userId , client . authId , title , randomId , userIds ) 
 + 
 + def create ( groupId : Int , clientUserId : Int , clientAuthId : Long , title : String , randomId : Long , userIds : Set [ Int ] ) ( 
 + implicit 
 + peerManagerRegion : GroupOfficeRegion , 
 + timeout : Timeout , 
 + ec : ExecutionContext 
 + ) : Future [ CreateAck ] = 
 + ( peerManagerRegion . ref ? Create ( groupId , clientUserId , clientAuthId , title , randomId , userIds . toSeq ) ) . mapTo [ CreateAck ] 
 + 
 + def makePublic ( groupId : Int , description : String ) ( 
 + implicit 
 + region : GroupOfficeRegion , 
 + timeout : Timeout , 
 + ec : ExecutionContext 
 + ) : Future [ MakePublicAck ] = 
 + ( region . ref ? MakePublic ( groupId , Some ( description ) ) ) . mapTo [ MakePublicAck ] 
 
 def sendMessage ( groupId : Int , senderUserId : Int , senderAuthId : Long , accessHash : Long , randomId : Long , message : ApiMessage , isFat : Boolean = false ) ( 
 implicit 
 diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala 
 index 6bdbeb9 . . 7c48f2a 100644 
 - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala 
 + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / office / Office . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server . office 
 
 import java . util . concurrent . TimeUnit 
 
 + import scala . collection . immutable 
 import scala . concurrent . Future 
 import scala . concurrent . duration . _ 
 import scala . language . postfixOps 
 @ @ - 24 , 10 + 25 , 17 @ @ trait Office extends PersistentActor with ActorLogging { 
 log . error ( reason , " Failure while processing message { } " , message ) 
 } 
 
 - def stashing : Receive = { 
 + protected def stashing : Receive = { 
 case msg ⇒ stash ( ) 
 } 
 
 + def persistReply [ E , R ] ( e : E ) ( onComplete : E ⇒ Any ) ( f : E ⇒ R ) : Unit = { 
 + persist ( e ) { evt ⇒ 
 + sender ( ) ! f ( e ) 
 + onComplete ( evt ) 
 + } 
 + } 
 + 
 def persistStashing [ E , R ] ( e : E ) ( onComplete : E ⇒ Any ) ( f : E ⇒ Future [ R ] ) : Unit = { 
 context become stashing 
 
 @ @ - 64 , 6 + 72 , 28 @ @ trait Office extends PersistentActor with ActorLogging { 
 } 
 } 
 
 + def persistStashingReply [ E , R ] ( es : immutable . Seq [ E ] ) ( onComplete : E ⇒ Any ) ( f : immutable . Seq [ E ] ⇒ Future [ R ] ) : Unit = { 
 + val replyTo = sender ( ) 
 + 
 + context become stashing 
 + 
 + persistAsync ( es ) ( _ ⇒ ( ) ) 
 + 
 + defer ( ( ) ) { _ ⇒ 
 + f ( es ) pipeTo replyTo onComplete { 
 + case Success ( _ ) ⇒ 
 + es foreach onComplete 
 + unstashAll ( ) 
 + case Failure ( e ) ⇒ 
 + log . error ( e , " Failure while processing event { } " , e ) 
 + replyTo ! Status . Failure ( e ) 
 + 
 + es foreach onComplete 
 + unstashAll ( ) 
 + } 
 + } 
 + } 
 + 
 if ( passivationIntervalMs > 0 ) { 
 log . warning ( " Passivating in { } ms " , passivationIntervalMs ) 
 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 index 9d89b96 . . 247c8fc 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 @ @ - 99 , 4 + 99 , 11 @ @ object Group { 
 byIdC . applied ( id ) 
 . map ( g ⇒ ( g . title , g . titleChangerUserId , g . titleChangedAt , g . titleChangeRandomId ) ) 
 . update ( ( title , changerUserId , date , randomId ) ) 
 + 
 + def updateDescription ( id : Int , description : String ) = 
 + byIdC . applied ( id ) 
 + . map ( _ . description ) 
 + . update ( description ) 
 + 
 + def makePublic ( id : Int ) = byIdC . applied ( id ) . map ( _ . isPublic ) . update ( true ) 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala 
 index d7aa06b . . 8f6c13d 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / pubgroups / PubgroupsServiceImpl . scala 
 @ @ - 1 , 22 + 1 , 13 @ @ 
 package im . actor . server . api . rpc . service . pubgroups 
 
 - import im . actor . server . group . GroupOfficeRegion 
 - 
 import scala . concurrent . { ExecutionContext , Future } 
 
 import akka . actor . ActorSystem 
 - import com . amazonaws . services . s3 . transfer . TransferManager 
 import slick . driver . PostgresDriver . api . _ 
 
 import im . actor . api . rpc . _ 
 - import im . actor . api . rpc . groups . { ResponseCreateGroup , ResponseJoinGroup , ResponseJoinGroupDirect , GroupsService } 
 - import im . actor . api . rpc . pubgroups . { PublicGroup , ResponseGetPublicGroups , PubgroupsService } 
 - import im . actor . server . api . rpc . service . groups . GroupInviteConfig 
 - import im . actor . server . models 
 + import im . actor . api . rpc . pubgroups . { PubgroupsService , ResponseGetPublicGroups } 
 import im . actor . server . persist 
 - import im . actor . server . presences . GroupPresenceManagerRegion 
 - import im . actor . server . push . SeqUpdatesManagerRegion 
 - import im . actor . server . util . GroupUtils 
 import im . actor . server . util . GroupUtils . getPubgroupStructUnsafe 
 
 class PubgroupsServiceImpl ( 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala 
 index a2bfb1f . . 2cd7688 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceHelpers . scala 
 @ @ - 1 , 15 + 1 , 17 @ @ 
 package im . actor . server . api . rpc . service 
 
 - import scala . concurrent . Await 
 + import scala . concurrent . { ExecutionContext , Await } 
 import scala . concurrent . duration . _ 
 import scala . util . Random 
 
 import akka . actor . ActorSystem 
 + import akka . util . Timeout 
 import slick . driver . PostgresDriver . api . _ 
 
 import im . actor . api . rpc . ClientData 
 import im . actor . api . rpc . groups . { GroupsService , ResponseCreateGroup } 
 import im . actor . api . rpc . peers . UserOutPeer 
 + import im . actor . server . group . { GroupOfficeRegion , GroupOffice } 
 import im . actor . server . persist 
 import im . actor . server . util . ACLUtils 
 
 @ @ - 32 , 14 + 34 , 13 @ @ trait GroupsServiceHelpers { 
 clientData : ClientData , 
 db : Database , 
 service : GroupsService , 
 - actorSystem : ActorSystem 
 + actorSystem : ActorSystem , 
 + region : GroupOfficeRegion , 
 + timeout : Timeout , 
 + ec : ExecutionContext 
 ) : ResponseCreateGroup = { 
 val resp = createGroup ( title , userIds ) 
 - / / TODO : delete after proper service implementation 
 - Await . result ( db . run ( persist . Group . groups 
 - . filter ( _ . id = = = resp . groupPeer . groupId ) 
 - . map ( g ⇒ ( g . isPublic , g . description ) ) 
 - . update ( ( true , description ) ) ) , 5 . seconds ) 
 + Await . result ( GroupOffice . makePublic ( resp . groupPeer . groupId , description ) , 5 . seconds ) 
 resp 
 } 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 index 544eb9e . . 8d085c2 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 @ @ - 173 , 10 + 173 , 12 @ @ class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceHelpers 
 
 def public ( ) = { 
 val group = models . Group ( Random . nextInt , 0 , Random . nextLong , " Public group " , isPublic = true , new DateTime , " A public group " ) 
 + val groupId = Random . nextInt 
 
 - whenReady ( db . run ( persist . Group . create ( group , Random . nextLong ) ) ) ( identity ) 
 + val accessHash = whenReady ( GroupOffice . create ( groupId , 0 , 0L , " Public group " , Random . nextLong , Set . empty ) ) ( _ . accessHash ) 
 + whenReady ( GroupOffice . makePublic ( groupId , " Public group description " ) ) ( identity ) 
 
 - val groupOutPeer = GroupOutPeer ( group . id , group . accessHash ) 
 + val groupOutPeer = GroupOutPeer ( groupId , accessHash ) 
 
 { 
 implicit val clientData = clientData1
