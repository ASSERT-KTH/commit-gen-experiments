BLEU SCORE: 0.2984745896009823

TEST MSG: fix ( android ) : disable call wakelock onPause
GENERATED MSG: feat ( android ) : add AudioStreamVolumeValueActor

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > index e97dcb5 . . 5828183 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > @ @ - 328 , 7 + 328 , 6 @ @ public class CallFragment extends BaseFragment { < nl > toggleSpeaker ( speaker , speakerTV , true ) ; < nl > initIncoming ( ) ; < nl > } < nl > - enableWakeLock ( ) ; < nl > break ; < nl > < nl > case CONNECTING : < nl > @ @ - 510 , 11 + 509 , 6 @ @ public class CallFragment extends BaseFragment { < nl > if ( v ! = null ) { < nl > v . cancel ( ) ; < nl > } < nl > - if ( wakeLock ! = null ) { < nl > - if ( wakeLock . isHeld ( ) ) { < nl > - wakeLock . release ( ) ; < nl > - } < nl > - } < nl > < nl > if ( timer ! = null ) { < nl > timer . send ( PoisonPill . INSTANCE ) ; < nl > @ @ - 527 , 6 + 521 , 14 @ @ public class CallFragment extends BaseFragment { < nl > < nl > } < nl > < nl > + public void disableWakeLock ( ) { < nl > + if ( wakeLock ! = null ) { < nl > + if ( wakeLock . isHeld ( ) ) { < nl > + wakeLock . release ( ) ; < nl > + } < nl > + } < nl > + } < nl > + < nl > @ Override < nl > public boolean onOptionsItemSelected ( MenuItem item ) { < nl > if ( item . getItemId ( ) = = R . id . members ) { < nl > @ @ - 556 , 6 + 558 , 7 @ @ public class CallFragment extends BaseFragment { < nl > < nl > n . flags + = Notification . FLAG _ ONGOING _ EVENT ; < nl > < nl > + disableWakeLock ( ) ; < nl > < nl > manager . notify ( NOTIFICATION _ ID , n ) ; < nl > } < nl > @ @ - 565 , 6 + 568 , 8 @ @ public class CallFragment extends BaseFragment { < nl > @ Override < nl > public void onResume ( ) { < nl > super . onResume ( ) ; < nl > + enableWakeLock ( ) ; < nl > + < nl > manager . cancel ( NOTIFICATION _ ID ) ; < nl > / / animator . popAnimation ( true ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / AudioStreamVolumeValueActor . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / AudioStreamVolumeValueActor . java < nl > new file mode 100644 < nl > index 0000000 . . 952f7cb < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / AudioStreamVolumeValueActor . java < nl > @ @ - 0 , 0 + 1 , 139 @ @ < nl > + package im . actor . sdk . controllers . calls ; < nl > + < nl > + import android . media . AudioFormat ; < nl > + import android . media . AudioManager ; < nl > + import android . media . AudioRecord ; < nl > + import android . media . MediaRecorder ; < nl > + < nl > + import java . util . ArrayList ; < nl > + import java . util . Arrays ; < nl > + < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . runtime . actors . messages . PoisonPill ; < nl > + import im . actor . sdk . core . audio . OpusEncoderActor ; < nl > + import im . actor . sdk . core . audio . VoiceBuffers ; < nl > + < nl > + public class AudioStreamVolumeValueActor extends Actor { < nl > + private static final int BUFFER _ SIZE = 16 * 1024 ; < nl > + private int delay ; < nl > + private AudioRecord audioRecord ; < nl > + boolean inited = false ; < nl > + < nl > + public AudioStreamVolumeValueActor ( ) { < nl > + } < nl > + < nl > + ArrayList < VolumeValueListener > callbacks = new ArrayList < VolumeValueListener > ( ) ; < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + delay = 10 ; < nl > + } < nl > + < nl > + private void subscribeForVolume ( VolumeValueListener callback ) { < nl > + if ( audioRecord = = null ) { < nl > + int minBufferSize = AudioRecord . getMinBufferSize ( 16000 , AudioFormat . CHANNEL _ IN _ MONO , AudioFormat . ENCODING _ PCM _ 16BIT ) ; < nl > + int bufferSize = 16 * minBufferSize ; < nl > + audioRecord = new AudioRecord ( MediaRecorder . AudioSource . DEFAULT , 16000 , AudioFormat . CHANNEL _ IN _ MONO , < nl > + AudioFormat . ENCODING _ PCM _ 16BIT , bufferSize ) ; < nl > + audioRecord . startRecording ( ) ; < nl > + } < nl > + callbacks . add ( callback ) ; < nl > + if ( ! inited ) { < nl > + inited = true ; < nl > + schedule ( new Check ( ) , delay ) ; < nl > + } < nl > + } < nl > + < nl > + private void unsubscribeFromVolume ( VolumeValueListener callback ) { < nl > + callbacks . remove ( callback ) ; < nl > + audioRecord . stop ( ) ; < nl > + audioRecord . release ( ) ; < nl > + audioRecord = null ; < nl > + self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > + } < nl > + < nl > + private void check ( ) { < nl > + < nl > + if ( audioRecord ! = null ) { < nl > + byte [ ] buffer = VoiceBuffers . getInstance ( ) . obtainBuffer ( BUFFER _ SIZE ) ; < nl > + int len = audioRecord . read ( buffer , 0 , buffer . length ) ; < nl > + if ( len > 0 ) { < nl > + int i = getMax ( buffer ) - getMin ( buffer ) ; < nl > + for ( VolumeValueListener c : callbacks ) { < nl > + c . onVolumeValue ( i ) ; < nl > + } < nl > + } else { < nl > + VoiceBuffers . getInstance ( ) . releaseBuffer ( buffer ) ; < nl > + } < nl > + < nl > + } < nl > + < nl > + < nl > + self ( ) . send ( new Check ( ) ) ; < nl > + } < nl > + < nl > + byte getMax ( byte [ ] array ) { < nl > + byte max = array [ 0 ] ; < nl > + for ( int i = 1 ; i < array . length ; i + + ) { < nl > + if ( array [ i ] > max ) { < nl > + max = array [ i ] ; < nl > + } < nl > + } < nl > + < nl > + return max ; < nl > + } < nl > + < nl > + byte getMin ( byte [ ] array ) { < nl > + byte min = array [ 0 ] ; < nl > + for ( int i = 1 ; i < array . length ; i + + ) { < nl > + if ( array [ i ] < min ) { < nl > + min = array [ i ] ; < nl > + } < nl > + } < nl > + < nl > + return min ; < nl > + } < nl > + < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof Check ) { < nl > + check ( ) ; < nl > + } else if ( message instanceof Subscribe ) { < nl > + subscribeForVolume ( ( ( Subscribe ) message ) . getCallback ( ) ) ; < nl > + } else if ( message instanceof Unsubscribe ) { < nl > + unsubscribeFromVolume ( ( ( Unsubscribe ) message ) . getCallback ( ) ) ; < nl > + } < nl > + } < nl > + < nl > + interface VolumeValueListener { < nl > + void onVolumeValue ( int val ) ; < nl > + } < nl > + < nl > + public static class Subscribe { < nl > + VolumeValueListener callback ; < nl > + < nl > + public Subscribe ( VolumeValueListener callback ) { < nl > + this . callback = callback ; < nl > + } < nl > + < nl > + public VolumeValueListener getCallback ( ) { < nl > + return callback ; < nl > + } < nl > + } < nl > + < nl > + public static class Unsubscribe { < nl > + VolumeValueListener callback ; < nl > + < nl > + public Unsubscribe ( VolumeValueListener callback ) { < nl > + this . callback = callback ; < nl > + } < nl > + < nl > + public VolumeValueListener getCallback ( ) { < nl > + return callback ; < nl > + } < nl > + } < nl > + < nl > + private static class Check { } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > index 1967338 . . 2aab0c3 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > @ @ - 94 , 6 + 94 , 8 @ @ public class CallFragment extends BaseFragment { < nl > private View layer1 ; < nl > private View layer2 ; < nl > private View layer3 ; < nl > + private ActorRef audioVolumeListener ; < nl > + private AudioStreamVolumeValueActor . VolumeValueListener volumeValueListener ; < nl > < nl > public CallFragment ( ) { < nl > < nl > @ @ - 247 , 6 + 249 , 23 @ @ public class CallFragment extends BaseFragment { < nl > } < nl > < nl > audioManager = ( AudioManager ) getActivity ( ) . getSystemService ( Context . AUDIO _ SERVICE ) ; < nl > + < nl > + audioVolumeListener = ActorSystem . system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > + @ Override < nl > + public AudioStreamVolumeValueActor create ( ) { < nl > + return new AudioStreamVolumeValueActor ( ) ; < nl > + } < nl > + } ) , " actor / calls / audioVolumeListener " ) ; < nl > + < nl > + volumeValueListener = new AudioStreamVolumeValueActor . VolumeValueListener ( ) { < nl > + @ Override < nl > + public void onVolumeValue ( int val ) { < nl > + Log . d ( " VOLUME " , val + " " ) ; < nl > + } < nl > + } ; < nl > + audioVolumeListener . send ( new AudioStreamVolumeValueActor . Subscribe ( volumeValueListener ) ) ; < nl > + < nl > + audioManager . getStreamVolume ( AudioManager . STREAM _ VOICE _ CALL ) ; < nl > final TintImageView speaker = ( TintImageView ) cont . findViewById ( R . id . speaker ) ; < nl > speaker . setResource ( R . drawable . ic _ volume _ up _ white _ 24dp ) ; < nl > final TextView speakerTV = ( TextView ) cont . findViewById ( R . id . speaker _ tv ) ; < nl > @ @ - 334 , 6 + 353 , 7 @ @ public class CallFragment extends BaseFragment { < nl > < nl > case ENDED : < nl > statusTV . setText ( R . string . call _ ended ) ; < nl > + audioVolumeListener . send ( new AudioStreamVolumeValueActor . Unsubscribe ( volumeValueListener ) ) ; < nl > onCallEnd ( ) ; < nl > break ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 index e97dcb5 . . 5828183 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 @ @ - 328 , 7 + 328 , 6 @ @ public class CallFragment extends BaseFragment { 
 toggleSpeaker ( speaker , speakerTV , true ) ; 
 initIncoming ( ) ; 
 } 
 - enableWakeLock ( ) ; 
 break ; 
 
 case CONNECTING : 
 @ @ - 510 , 11 + 509 , 6 @ @ public class CallFragment extends BaseFragment { 
 if ( v ! = null ) { 
 v . cancel ( ) ; 
 } 
 - if ( wakeLock ! = null ) { 
 - if ( wakeLock . isHeld ( ) ) { 
 - wakeLock . release ( ) ; 
 - } 
 - } 
 
 if ( timer ! = null ) { 
 timer . send ( PoisonPill . INSTANCE ) ; 
 @ @ - 527 , 6 + 521 , 14 @ @ public class CallFragment extends BaseFragment { 
 
 } 
 
 + public void disableWakeLock ( ) { 
 + if ( wakeLock ! = null ) { 
 + if ( wakeLock . isHeld ( ) ) { 
 + wakeLock . release ( ) ; 
 + } 
 + } 
 + } 
 + 
 @ Override 
 public boolean onOptionsItemSelected ( MenuItem item ) { 
 if ( item . getItemId ( ) = = R . id . members ) { 
 @ @ - 556 , 6 + 558 , 7 @ @ public class CallFragment extends BaseFragment { 
 
 n . flags + = Notification . FLAG _ ONGOING _ EVENT ; 
 
 + disableWakeLock ( ) ; 
 
 manager . notify ( NOTIFICATION _ ID , n ) ; 
 } 
 @ @ - 565 , 6 + 568 , 8 @ @ public class CallFragment extends BaseFragment { 
 @ Override 
 public void onResume ( ) { 
 super . onResume ( ) ; 
 + enableWakeLock ( ) ; 
 + 
 manager . cancel ( NOTIFICATION _ ID ) ; 
 / / animator . popAnimation ( true ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / AudioStreamVolumeValueActor . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / AudioStreamVolumeValueActor . java 
 new file mode 100644 
 index 0000000 . . 952f7cb 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / AudioStreamVolumeValueActor . java 
 @ @ - 0 , 0 + 1 , 139 @ @ 
 + package im . actor . sdk . controllers . calls ; 
 + 
 + import android . media . AudioFormat ; 
 + import android . media . AudioManager ; 
 + import android . media . AudioRecord ; 
 + import android . media . MediaRecorder ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 + 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . runtime . actors . messages . PoisonPill ; 
 + import im . actor . sdk . core . audio . OpusEncoderActor ; 
 + import im . actor . sdk . core . audio . VoiceBuffers ; 
 + 
 + public class AudioStreamVolumeValueActor extends Actor { 
 + private static final int BUFFER _ SIZE = 16 * 1024 ; 
 + private int delay ; 
 + private AudioRecord audioRecord ; 
 + boolean inited = false ; 
 + 
 + public AudioStreamVolumeValueActor ( ) { 
 + } 
 + 
 + ArrayList < VolumeValueListener > callbacks = new ArrayList < VolumeValueListener > ( ) ; 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + delay = 10 ; 
 + } 
 + 
 + private void subscribeForVolume ( VolumeValueListener callback ) { 
 + if ( audioRecord = = null ) { 
 + int minBufferSize = AudioRecord . getMinBufferSize ( 16000 , AudioFormat . CHANNEL _ IN _ MONO , AudioFormat . ENCODING _ PCM _ 16BIT ) ; 
 + int bufferSize = 16 * minBufferSize ; 
 + audioRecord = new AudioRecord ( MediaRecorder . AudioSource . DEFAULT , 16000 , AudioFormat . CHANNEL _ IN _ MONO , 
 + AudioFormat . ENCODING _ PCM _ 16BIT , bufferSize ) ; 
 + audioRecord . startRecording ( ) ; 
 + } 
 + callbacks . add ( callback ) ; 
 + if ( ! inited ) { 
 + inited = true ; 
 + schedule ( new Check ( ) , delay ) ; 
 + } 
 + } 
 + 
 + private void unsubscribeFromVolume ( VolumeValueListener callback ) { 
 + callbacks . remove ( callback ) ; 
 + audioRecord . stop ( ) ; 
 + audioRecord . release ( ) ; 
 + audioRecord = null ; 
 + self ( ) . send ( PoisonPill . INSTANCE ) ; 
 + } 
 + 
 + private void check ( ) { 
 + 
 + if ( audioRecord ! = null ) { 
 + byte [ ] buffer = VoiceBuffers . getInstance ( ) . obtainBuffer ( BUFFER _ SIZE ) ; 
 + int len = audioRecord . read ( buffer , 0 , buffer . length ) ; 
 + if ( len > 0 ) { 
 + int i = getMax ( buffer ) - getMin ( buffer ) ; 
 + for ( VolumeValueListener c : callbacks ) { 
 + c . onVolumeValue ( i ) ; 
 + } 
 + } else { 
 + VoiceBuffers . getInstance ( ) . releaseBuffer ( buffer ) ; 
 + } 
 + 
 + } 
 + 
 + 
 + self ( ) . send ( new Check ( ) ) ; 
 + } 
 + 
 + byte getMax ( byte [ ] array ) { 
 + byte max = array [ 0 ] ; 
 + for ( int i = 1 ; i < array . length ; i + + ) { 
 + if ( array [ i ] > max ) { 
 + max = array [ i ] ; 
 + } 
 + } 
 + 
 + return max ; 
 + } 
 + 
 + byte getMin ( byte [ ] array ) { 
 + byte min = array [ 0 ] ; 
 + for ( int i = 1 ; i < array . length ; i + + ) { 
 + if ( array [ i ] < min ) { 
 + min = array [ i ] ; 
 + } 
 + } 
 + 
 + return min ; 
 + } 
 + 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof Check ) { 
 + check ( ) ; 
 + } else if ( message instanceof Subscribe ) { 
 + subscribeForVolume ( ( ( Subscribe ) message ) . getCallback ( ) ) ; 
 + } else if ( message instanceof Unsubscribe ) { 
 + unsubscribeFromVolume ( ( ( Unsubscribe ) message ) . getCallback ( ) ) ; 
 + } 
 + } 
 + 
 + interface VolumeValueListener { 
 + void onVolumeValue ( int val ) ; 
 + } 
 + 
 + public static class Subscribe { 
 + VolumeValueListener callback ; 
 + 
 + public Subscribe ( VolumeValueListener callback ) { 
 + this . callback = callback ; 
 + } 
 + 
 + public VolumeValueListener getCallback ( ) { 
 + return callback ; 
 + } 
 + } 
 + 
 + public static class Unsubscribe { 
 + VolumeValueListener callback ; 
 + 
 + public Unsubscribe ( VolumeValueListener callback ) { 
 + this . callback = callback ; 
 + } 
 + 
 + public VolumeValueListener getCallback ( ) { 
 + return callback ; 
 + } 
 + } 
 + 
 + private static class Check { } 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 index 1967338 . . 2aab0c3 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 @ @ - 94 , 6 + 94 , 8 @ @ public class CallFragment extends BaseFragment { 
 private View layer1 ; 
 private View layer2 ; 
 private View layer3 ; 
 + private ActorRef audioVolumeListener ; 
 + private AudioStreamVolumeValueActor . VolumeValueListener volumeValueListener ; 
 
 public CallFragment ( ) { 
 
 @ @ - 247 , 6 + 249 , 23 @ @ public class CallFragment extends BaseFragment { 
 } 
 
 audioManager = ( AudioManager ) getActivity ( ) . getSystemService ( Context . AUDIO _ SERVICE ) ; 
 + 
 + audioVolumeListener = ActorSystem . system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 + @ Override 
 + public AudioStreamVolumeValueActor create ( ) { 
 + return new AudioStreamVolumeValueActor ( ) ; 
 + } 
 + } ) , " actor / calls / audioVolumeListener " ) ; 
 + 
 + volumeValueListener = new AudioStreamVolumeValueActor . VolumeValueListener ( ) { 
 + @ Override 
 + public void onVolumeValue ( int val ) { 
 + Log . d ( " VOLUME " , val + " " ) ; 
 + } 
 + } ; 
 + audioVolumeListener . send ( new AudioStreamVolumeValueActor . Subscribe ( volumeValueListener ) ) ; 
 + 
 + audioManager . getStreamVolume ( AudioManager . STREAM _ VOICE _ CALL ) ; 
 final TintImageView speaker = ( TintImageView ) cont . findViewById ( R . id . speaker ) ; 
 speaker . setResource ( R . drawable . ic _ volume _ up _ white _ 24dp ) ; 
 final TextView speakerTV = ( TextView ) cont . findViewById ( R . id . speaker _ tv ) ; 
 @ @ - 334 , 6 + 353 , 7 @ @ public class CallFragment extends BaseFragment { 
 
 case ENDED : 
 statusTV . setText ( R . string . call _ ended ) ; 
 + audioVolumeListener . send ( new AudioStreamVolumeValueActor . Unsubscribe ( volumeValueListener ) ) ; 
 onCallEnd ( ) ; 
 break ;
