BLEU SCORE: 0.11339582221952

TEST MSG: fix ( core ) : Fixing in message notifications
GENERATED MSG: feat ( android ) : call methods in Messenger

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > index 839406d . . c942af3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . core . entity . PeerType ; < nl > import im . actor . core . entity . Reaction ; < nl > import im . actor . core . entity . User ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > + import im . actor . core . entity . content . TextContent ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleActor ; < nl > import im . actor . core . modules . ModuleContext ; < nl > @ @ - 277 , 12 + 278 , 20 @ @ public class RouterActor extends ModuleActor { < nl > / / < nl > if ( ! isConversationVisible ) { < nl > for ( Message m : messages ) { < nl > - context ( ) . getNotificationsModule ( ) . onInMessage ( < nl > - peer , < nl > - m . getSenderId ( ) , < nl > - m . getSortDate ( ) , < nl > - ContentDescription . fromContent ( m . getContent ( ) ) , < nl > - false / * TODO : Implement * / ) ; < nl > + if ( m . getSenderId ( ) ! = myUid ( ) ) { < nl > + boolean hasCurrentMention = false ; < nl > + if ( m . getContent ( ) instanceof TextContent ) { < nl > + if ( ( ( TextContent ) m . getContent ( ) ) . getMentions ( ) . contains ( myUid ( ) ) ) { < nl > + hasCurrentMention = true ; < nl > + } < nl > + } < nl > + context ( ) . getNotificationsModule ( ) . onInMessage ( < nl > + peer , < nl > + m . getSenderId ( ) , < nl > + m . getSortDate ( ) , < nl > + ContentDescription . fromContent ( m . getContent ( ) ) , < nl > + hasCurrentMention ) ; < nl > + } < nl > } < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 0da562b . . 502315f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 16 , 6 + 16 , 7 @ @ import java . util . List ; < nl > import im . actor . core . api . ApiMessage ; < nl > import im . actor . core . api . ApiSex ; < nl > import im . actor . core . api . ApiAuthSession ; < nl > + import im . actor . core . api . rpc . ResponseDoCall ; < nl > import im . actor . core . entity . FileReference ; < nl > import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . MentionFilterResult ; < nl > @ @ - 41 , 6 + 42 , 7 @ @ import im . actor . core . modules . events . PeerChatOpened ; < nl > import im . actor . core . modules . events . PeerInfoClosed ; < nl > import im . actor . core . modules . events . PeerInfoOpened ; < nl > import im . actor . core . modules . events . UserVisible ; < nl > + import im . actor . core . modules . internal . CallsModule ; < nl > import im . actor . core . network . NetworkState ; < nl > import im . actor . core . util . ActorTrace ; < nl > import im . actor . core . util . Timing ; < nl > @ @ - 964 , 6 + 966 , 22 @ @ public class Messenger { < nl > } < nl > < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + / / Calls < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + < nl > + public Command < ResponseDoCall > doCall ( User user , CallsModule . CallCallback callCallback ) { < nl > + return modules . getCallsModule ( ) . makeCall ( user , callCallback ) ; < nl > + } < nl > + < nl > + public void endCall ( long callId ) { < nl > + modules . getCallsModule ( ) . endCall ( callId ) ; < nl > + } < nl > + < nl > + public void answerCall ( long callId , CallsModule . CallCallback callback ) { < nl > + modules . getCallsModule ( ) . answerCall ( callId , callback ) ; < nl > + } < nl > + < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Peer operations < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > index b414eb1 . . 50606dc 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . runtime . actors . messages . PoisonPill ; < nl > < nl > public class CallActor extends ModuleActor { < nl > < nl > + private boolean inited = false ; < nl > private int timeout = 0 ; < nl > private boolean alive = false ; < nl > private long callId ; < nl > @ @ - 21 , 7 + 22 , 6 @ @ public class CallActor extends ModuleActor { < nl > @ Override < nl > public void preStart ( ) { < nl > super . preStart ( ) ; < nl > - self ( ) . send ( new CheckAlive ( ) , CallsModule . CALL _ TIMEOUT ) ; < nl > self ( ) . send ( new SendCallInProgress ( ) ) ; < nl > } < nl > < nl > @ @ - 69 , 6 + 69 , 10 @ @ public class CallActor extends ModuleActor { < nl > private void onCallInProgress ( int timeout ) { < nl > alive = true ; < nl > this . timeout = timeout ; < nl > + if ( ! inited ) { < nl > + inited = true ; < nl > + self ( ) . send ( new CheckAlive ( ) , CallsModule . CALL _ TIMEOUT ) ; < nl > + } < nl > } < nl > < nl > public static class EndCall {

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 index 839406d . . c942af3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . core . entity . PeerType ; 
 import im . actor . core . entity . Reaction ; 
 import im . actor . core . entity . User ; 
 import im . actor . core . entity . content . AbsContent ; 
 + import im . actor . core . entity . content . TextContent ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleActor ; 
 import im . actor . core . modules . ModuleContext ; 
 @ @ - 277 , 12 + 278 , 20 @ @ public class RouterActor extends ModuleActor { 
 / / 
 if ( ! isConversationVisible ) { 
 for ( Message m : messages ) { 
 - context ( ) . getNotificationsModule ( ) . onInMessage ( 
 - peer , 
 - m . getSenderId ( ) , 
 - m . getSortDate ( ) , 
 - ContentDescription . fromContent ( m . getContent ( ) ) , 
 - false / * TODO : Implement * / ) ; 
 + if ( m . getSenderId ( ) ! = myUid ( ) ) { 
 + boolean hasCurrentMention = false ; 
 + if ( m . getContent ( ) instanceof TextContent ) { 
 + if ( ( ( TextContent ) m . getContent ( ) ) . getMentions ( ) . contains ( myUid ( ) ) ) { 
 + hasCurrentMention = true ; 
 + } 
 + } 
 + context ( ) . getNotificationsModule ( ) . onInMessage ( 
 + peer , 
 + m . getSenderId ( ) , 
 + m . getSortDate ( ) , 
 + ContentDescription . fromContent ( m . getContent ( ) ) , 
 + hasCurrentMention ) ; 
 + } 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 0da562b . . 502315f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 16 , 6 + 16 , 7 @ @ import java . util . List ; 
 import im . actor . core . api . ApiMessage ; 
 import im . actor . core . api . ApiSex ; 
 import im . actor . core . api . ApiAuthSession ; 
 + import im . actor . core . api . rpc . ResponseDoCall ; 
 import im . actor . core . entity . FileReference ; 
 import im . actor . core . entity . Group ; 
 import im . actor . core . entity . MentionFilterResult ; 
 @ @ - 41 , 6 + 42 , 7 @ @ import im . actor . core . modules . events . PeerChatOpened ; 
 import im . actor . core . modules . events . PeerInfoClosed ; 
 import im . actor . core . modules . events . PeerInfoOpened ; 
 import im . actor . core . modules . events . UserVisible ; 
 + import im . actor . core . modules . internal . CallsModule ; 
 import im . actor . core . network . NetworkState ; 
 import im . actor . core . util . ActorTrace ; 
 import im . actor . core . util . Timing ; 
 @ @ - 964 , 6 + 966 , 22 @ @ public class Messenger { 
 } 
 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Calls 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + public Command < ResponseDoCall > doCall ( User user , CallsModule . CallCallback callCallback ) { 
 + return modules . getCallsModule ( ) . makeCall ( user , callCallback ) ; 
 + } 
 + 
 + public void endCall ( long callId ) { 
 + modules . getCallsModule ( ) . endCall ( callId ) ; 
 + } 
 + 
 + public void answerCall ( long callId , CallsModule . CallCallback callback ) { 
 + modules . getCallsModule ( ) . answerCall ( callId , callback ) ; 
 + } 
 + 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Peer operations 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 index b414eb1 . . 50606dc 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . runtime . actors . messages . PoisonPill ; 
 
 public class CallActor extends ModuleActor { 
 
 + private boolean inited = false ; 
 private int timeout = 0 ; 
 private boolean alive = false ; 
 private long callId ; 
 @ @ - 21 , 7 + 22 , 6 @ @ public class CallActor extends ModuleActor { 
 @ Override 
 public void preStart ( ) { 
 super . preStart ( ) ; 
 - self ( ) . send ( new CheckAlive ( ) , CallsModule . CALL _ TIMEOUT ) ; 
 self ( ) . send ( new SendCallInProgress ( ) ) ; 
 } 
 
 @ @ - 69 , 6 + 69 , 10 @ @ public class CallActor extends ModuleActor { 
 private void onCallInProgress ( int timeout ) { 
 alive = true ; 
 this . timeout = timeout ; 
 + if ( ! inited ) { 
 + inited = true ; 
 + self ( ) . send ( new CheckAlive ( ) , CallsModule . CALL _ TIMEOUT ) ; 
 + } 
 } 
 
 public static class EndCall {
