BLEU SCORE: 0.2521193618434983

TEST MSG: fix ( server : http ) : put wss in correct array
GENERATED MSG: fix ( server : bots ) : : poop :

TEST DIFF (one line): diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / info / AboutHttpHandler . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / info / AboutHttpHandler . scala < nl > index 7c47ebe . . bf8b9cb 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / info / AboutHttpHandler . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / info / AboutHttpHandler . scala < nl > @ @ - 30 , 8 + 30 , 8 @ @ private [ http ] final class AboutHttpHandler ( ) ( implicit system : ActorSystem ) exten < nl > el match { < nl > case e if e . startsWith ( " tcp " ) ⇒ Endpoints ( e : : tcp , tls , ws , wss ) < nl > case e if e . startsWith ( " tls " ) ⇒ Endpoints ( tcp , e : : tls , ws , wss ) < nl > - case e if e . startsWith ( " ws " ) ⇒ Endpoints ( tcp , tls , e : : ws , wss ) < nl > case e if e . startsWith ( " wss " ) ⇒ Endpoints ( tcp , tls , ws , e : : wss ) < nl > + case e if e . startsWith ( " ws " ) ⇒ Endpoints ( tcp , tls , e : : ws , wss ) < nl > } < nl > } < nl > ServerInfo ( ActorConfig . projectName , publicEndPoints )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / bots / BotsHandler . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / bots / BotsHandler . scala < nl > index 06ed085 . . 0129ee0 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / bots / BotsHandler . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / bots / BotsHandler . scala < nl > @ @ - 48 , 8 + 48 , 8 @ @ private [ http ] final class BotsHandler ( implicit system : ActorSystem , val material < nl > < nl > val sendMessageF = for { < nl > data ← request . entity . dataBytes . runFold ( ByteString . empty ) ( _ + + _ ) < nl > - _ ← sendMessage ( headers , data , token ) < nl > - } yield ( ) < nl > + res ← sendMessage ( headers , data , token ) < nl > + } yield res < nl > < nl > onComplete ( sendMessageF ) { < nl > case Success ( result ) ⇒

TEST DIFF:
diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / info / AboutHttpHandler . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / info / AboutHttpHandler . scala 
 index 7c47ebe . . bf8b9cb 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / info / AboutHttpHandler . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / info / AboutHttpHandler . scala 
 @ @ - 30 , 8 + 30 , 8 @ @ private [ http ] final class AboutHttpHandler ( ) ( implicit system : ActorSystem ) exten 
 el match { 
 case e if e . startsWith ( " tcp " ) ⇒ Endpoints ( e : : tcp , tls , ws , wss ) 
 case e if e . startsWith ( " tls " ) ⇒ Endpoints ( tcp , e : : tls , ws , wss ) 
 - case e if e . startsWith ( " ws " ) ⇒ Endpoints ( tcp , tls , e : : ws , wss ) 
 case e if e . startsWith ( " wss " ) ⇒ Endpoints ( tcp , tls , ws , e : : wss ) 
 + case e if e . startsWith ( " ws " ) ⇒ Endpoints ( tcp , tls , e : : ws , wss ) 
 } 
 } 
 ServerInfo ( ActorConfig . projectName , publicEndPoints )

NEAREST DIFF:
diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / bots / BotsHandler . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / bots / BotsHandler . scala 
 index 06ed085 . . 0129ee0 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / bots / BotsHandler . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / bots / BotsHandler . scala 
 @ @ - 48 , 8 + 48 , 8 @ @ private [ http ] final class BotsHandler ( implicit system : ActorSystem , val material 
 
 val sendMessageF = for { 
 data ← request . entity . dataBytes . runFold ( ByteString . empty ) ( _ + + _ ) 
 - _ ← sendMessage ( headers , data , token ) 
 - } yield ( ) 
 + res ← sendMessage ( headers , data , token ) 
 + } yield res 
 
 onComplete ( sendMessageF ) { 
 case Success ( result ) ⇒
