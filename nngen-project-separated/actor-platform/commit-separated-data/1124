BLEU SCORE: 0.10600313379512592

TEST MSG: feat ( mon ) : Adding mtproto auth key creation monitoring
GENERATED MSG: feat ( sdk ) : New methods in storage engines

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java < nl > index 955989e . . d421b26 100644 < nl > - - - a / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java < nl > + + + b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java < nl > @ @ - 17 , 7 + 17 , 7 @ @ public class Main { < nl > } < nl > } ) , " auth _ key _ mon " ) ; < nl > < nl > - actor . send ( new AuthKeyCreationMon . StartMonitoring ( 0 ) ) ; < nl > + actor . send ( new AuthKeyCreationMon . StartMonitoring ( 500 ) ) ; < nl > < nl > while ( true ) { < nl > try { < nl > diff - - git a / actor - sdk / sdk - core - se / src / main / java / im / actor / app / monitoring / AuthKeyCreationMon . java b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / monitoring / AuthKeyCreationMon . java < nl > index 2aa4d04 . . ed15e56 100644 < nl > - - - a / actor - sdk / sdk - core - se / src / main / java / im / actor / app / monitoring / AuthKeyCreationMon . java < nl > + + + b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / monitoring / AuthKeyCreationMon . java < nl > @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . runtime . mtproto . ConnectionEndpoint ; < nl > public class AuthKeyCreationMon extends Actor { < nl > private ActorRef keyCreation ; < nl > private Endpoints endpoints ; < nl > + private long delay ; < nl > < nl > @ Override < nl > public void preStart ( ) { < nl > @ @ - 30 , 13 + 31 , 14 @ @ public class AuthKeyCreationMon extends Actor { < nl > } < nl > < nl > private void startMonitoring ( long delay ) { < nl > + this . delay = delay ; < nl > Log . d ( " AuthKeyCreation " , " Start monitoring " ) ; < nl > keyCreation . send ( new AuthKeyActor . StartKeyCreation ( endpoints ) , self ( ) ) ; < nl > } < nl > < nl > private void onKeyCreated ( ) { < nl > Log . d ( " AuthKeyCreation " , " Key created " ) ; < nl > - keyCreation . send ( new AuthKeyActor . StartKeyCreation ( endpoints ) , self ( ) ) ; < nl > + keyCreation . send ( new AuthKeyActor . StartKeyCreation ( endpoints ) , delay , self ( ) ) ; < nl > } < nl > < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - se / build . gradle b / actor - sdk / sdk - core / core / core - se / build . gradle < nl > index 49c5726 . . 5984e59 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - se / build . gradle < nl > + + + b / actor - sdk / sdk - core / core / core - se / build . gradle < nl > @ @ - 6 , 6 + 6 , 9 @ @ buildscript { < nl > < nl > apply plugin : ' java ' < nl > < nl > + group = ' im . actor ' < nl > + version = ' 0 . 0 . 1 ' < nl > + < nl > compileJava { < nl > sourceCompatibility = 1 . 6 < nl > targetCompatibility = 1 . 6 < nl > @ @ - 29 , 4 + 32 , 81 @ @ dependencies { < nl > compile project ( ' : actor - sdk : sdk - core : runtime : runtime - se ' ) < nl > compile ' com . squareup . okhttp : okhttp : 2 + ' < nl > testCompile " junit : junit : 4 . 11 " < nl > + } < nl > + < nl > + / / < nl > + / / Configuration of publishing < nl > + / / < nl > + < nl > + String ossrhUsername = " " < nl > + String ossrhPassword = " " < nl > + boolean isDeployConfigured = false < nl > + if ( project . rootProject . file ( ' gradle . properties ' ) . exists ( ) ) { < nl > + Properties properties = new Properties ( ) < nl > + properties . load ( project . rootProject . file ( ' gradle . properties ' ) . newDataInputStream ( ) ) < nl > + ossrhUsername = properties . getProperty ( " ossrhUsername " , " " ) < nl > + ossrhPassword = properties . getProperty ( " ossrhPassword " , " " ) < nl > + version = properties . getProperty ( " version " , " " ) < nl > + < nl > + nexusStaging { < nl > + username ossrhUsername < nl > + password ossrhPassword < nl > + } < nl > + < nl > + isDeployConfigured = true < nl > + } < nl > + < nl > + project . afterEvaluate { < nl > + < nl > + artifacts { < nl > + archives javadocJarRelease < nl > + archives sourcesJarRelease < nl > + } < nl > + < nl > + if ( isDeployConfigured ) { < nl > + < nl > + signing { < nl > + sign configurations . archives < nl > + } < nl > + < nl > + uploadArchives { < nl > + repositories { < nl > + mavenDeployer { < nl > + beforeDeployment { MavenDeployment deployment - > signing . signPom ( deployment ) } < nl > + < nl > + repository ( url : " https : / / oss . sonatype . org / service / local / staging / deploy / maven2 / " ) { < nl > + authentication ( userName : ossrhUsername , password : ossrhPassword ) < nl > + } < nl > + < nl > + pom . project { < nl > + name ' Actor Core for Java SE ' < nl > + packaging ' jar ' < nl > + description ' Actor Core : Actor Java library ' < nl > + url ' https : / / github . com / actorapp / actor - platform ' < nl > + < nl > + scm { < nl > + url ' scm : git @ github . com : actorapp / actor - platform . git ' < nl > + connection ' scm : git @ github . com : actorapp / actor - platform . git ' < nl > + developerConnection ' scm : git @ github . com : actorapp / actor - platform . git ' < nl > + } < nl > + < nl > + licenses { < nl > + license { < nl > + name ' The MIT License ( MIT ) ' < nl > + url ' http : / / opensource . org / licenses / MIT ' < nl > + distribution ' repo ' < nl > + } < nl > + } < nl > + < nl > + developers { < nl > + developer { < nl > + id ' ex3ndr ' < nl > + name ' Stepan Korshakov ' < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeStorageProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeStorageProvider . java < nl > index 0a76646 . . cde1551 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeStorageProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeStorageProvider . java < nl > @ @ - 9 , 6 + 9 , 7 @ @ import im . actor . runtime . storage . IndexStorage ; < nl > import im . actor . runtime . storage . KeyValueStorage ; < nl > import im . actor . runtime . storage . ListStorage ; < nl > import im . actor . runtime . storage . PreferencesStorage ; < nl > + import im . actor . runtime . storage . memory . MemoryIndexStorage ; < nl > import im . actor . runtime . storage . memory . MemoryKeyValueStorage ; < nl > import im . actor . runtime . storage . memory . MemoryListStorage ; < nl > import im . actor . runtime . storage . memory . MemoryPreferencesStorage ; < nl > @ @ - 26 , 7 + 27 , 7 @ @ public class JavaSeStorageProvider implements StorageRuntime { < nl > < nl > @ Override < nl > public IndexStorage createIndex ( String name ) { < nl > - throw new RuntimeException ( ) ; < nl > + return new MemoryIndexStorage ( ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 41 , 6 + 42 , 6 @ @ public class JavaSeStorageProvider implements StorageRuntime { < nl > < nl > @ Override < nl > public void resetStorage ( ) { < nl > - < nl > + < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / storage / memory / MemoryIndexStorage . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / storage / memory / MemoryIndexStorage . java < nl > index 0c1f118 . . fabe84a 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / storage / memory / MemoryIndexStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / storage / memory / MemoryIndexStorage . java < nl > @ @ - 1 , 48 + 1 , 66 @ @ < nl > package im . actor . runtime . storage . memory ; < nl > < nl > + import java . util . ArrayList ; < nl > + import java . util . HashMap ; < nl > import java . util . List ; < nl > < nl > import im . actor . runtime . storage . IndexStorage ; < nl > < nl > public class MemoryIndexStorage implements IndexStorage { < nl > < nl > + private HashMap < Long , Long > index = new HashMap < Long , Long > ( ) ; < nl > + < nl > @ Override < nl > public void put ( long key , long value ) { < nl > - < nl > + index . put ( key , value ) ; < nl > } < nl > < nl > @ Override < nl > public Long get ( long key ) { < nl > - return null ; < nl > + return index . get ( key ) ; < nl > } < nl > < nl > @ Override < nl > public List < Long > findBeforeValue ( long value ) { < nl > - return null ; < nl > + ArrayList < Long > ids = new ArrayList < Long > ( ) ; < nl > + for ( long k : index . keySet ( ) ) { < nl > + if ( index . get ( k ) < value ) { < nl > + ids . add ( k ) ; < nl > + } < nl > + } < nl > + return ids ; < nl > } < nl > < nl > @ Override < nl > public List < Long > removeBeforeValue ( long value ) { < nl > - return null ; < nl > + ArrayList < Long > ids = new ArrayList < Long > ( ) ; < nl > + for ( long k : index . keySet ( ) ) { < nl > + if ( index . get ( k ) > = value ) { < nl > + ids . add ( k ) ; < nl > + } < nl > + } < nl > + return ids ; < nl > } < nl > < nl > @ Override < nl > public void remove ( long key ) { < nl > - < nl > + index . remove ( key ) ; < nl > } < nl > < nl > @ Override < nl > public void remove ( List < Long > keys ) { < nl > - < nl > + for ( long l : keys ) { < nl > + remove ( l ) ; < nl > + } < nl > } < nl > < nl > @ Override < nl > public int getCount ( ) { < nl > - return 0 ; < nl > + return index . size ( ) ; < nl > } < nl > < nl > @ Override < nl > public void clear ( ) { < nl > - < nl > + index . clear ( ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java < nl > index f5b9643 . . 55643c3 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java < nl > @ @ - 6 , 14 + 6 , 5 @ @ public class CryptoRuntimeProvider implements CryptoRuntime { < nl > public byte [ ] MD5 ( byte [ ] data ) { < nl > throw new RuntimeException ( " Dumb " ) ; < nl > } < nl > - < nl > - @ Override < nl > - public byte [ ] SHA256 ( byte [ ] data ) { < nl > - throw new RuntimeException ( " Dumb " ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public byte [ ] SHA512 ( byte [ ] data ) { < nl > - throw new RuntimeException ( " Dumb " ) ; < nl > - } < nl > + < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java < nl > index 4603abc . . 19fdb7f 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java < nl > @ @ - 158 , 7 + 158 , 7 @ @ public class MVVMCollection < T extends BserObject & KeyValueItem , V extends BaseV < nl > return cache . get ( id ) ; < nl > } < nl > < nl > - byte [ ] data = collectionStorage . getValue ( id ) ; < nl > + byte [ ] data = collectionStorage . loadItem ( id ) ; < nl > < nl > if ( data ! = null ) { < nl > try { < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java < nl > index 3efd294 . . 4bf8fb8 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java < nl > @ @ - 9 , 21 + 9 , 69 @ @ import com . google . j2objc . annotations . ObjectiveCName ; < nl > import java . util . List ; < nl > < nl > public interface KeyValueStorage { < nl > + < nl > + / * * < nl > + * Adding new or replacing old record < nl > + * < nl > + * @ param key record key < nl > + * @ param data record raw data < nl > + * / < nl > @ ObjectiveCName ( " addOrUpdateItemWithKey : withData : " ) < nl > void addOrUpdateItem ( long key , byte [ ] data ) ; < nl > < nl > + / * * < nl > + * Adding new or replacing old records < nl > + * < nl > + * @ param values records < nl > + * / < nl > @ ObjectiveCName ( " addOrUpdateItems : " ) < nl > void addOrUpdateItems ( List < KeyValueRecord > values ) ; < nl > < nl > + / * * < nl > + * Removing record by key < nl > + * < nl > + * @ param key record key < nl > + * / < nl > @ ObjectiveCName ( " removeItemWithKey : " ) < nl > void removeItem ( long key ) ; < nl > < nl > + / * * < nl > + * Removing records by keys < nl > + * < nl > + * @ param keys record keys < nl > + * / < nl > @ ObjectiveCName ( " removeItemsWithKeys : " ) < nl > void removeItems ( long [ ] keys ) ; < nl > < nl > + / * * < nl > + * Loading item by key < nl > + * < nl > + * @ param key record key < nl > + * @ return result or null if not found < nl > + * / < nl > + @ ObjectiveCName ( " loadItemWithKey : " ) < nl > + byte [ ] loadItem ( long key ) ; < nl > + < nl > + / * * < nl > + * Loading items by keys < nl > + * < nl > + * @ param keys record keys < nl > + * @ return all loaded items < nl > + * / < nl > + @ ObjectiveCName ( " loadItems : " ) < nl > + List < KeyValueRecord > loadItems ( long [ ] keys ) ; < nl > + < nl > + / * * < nl > + * Loading all items from storage < nl > + * < nl > + * @ return all items < nl > + * / < nl > + @ ObjectiveCName ( " loadAllItems " ) < nl > + List < KeyValueRecord > loadAllItems ( ) ; < nl > + < nl > + / * * < nl > + * Clearing storage < nl > + * / < nl > @ ObjectiveCName ( " clear " ) < nl > void clear ( ) ; < nl > - < nl > - @ ObjectiveCName ( " getValueWithKey : " ) < nl > - byte [ ] getValue ( long key ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java < nl > index dff9c2b . . 19d8315 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java < nl > @ @ - 32 , 6 + 32 , 9 @ @ public interface ListStorage { < nl > @ ObjectiveCName ( " loadItemWithKey : " ) < nl > ListEngineRecord loadItem ( long key ) ; < nl > < nl > + @ ObjectiveCName ( " loadAllItems " ) < nl > + List < ListEngineRecord > loadAllItems ( ) ; < nl > + < nl > @ ObjectiveCName ( " isEmpty " ) < nl > boolean isEmpty ( ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java < nl > index 0081db1 . . a54f1ec 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java < nl > @ @ - 21 , 6 + 21 , 6 @ @ public class SyncKeyValue { < nl > } < nl > < nl > public synchronized byte [ ] get ( long key ) { < nl > - return storage . getValue ( key ) ; < nl > + return storage . loadItem ( key ) ; < nl > } < nl > - } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java < nl > index 05b4ca8 . . 5e9f694 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . runtime . storage . memory ; < nl > < nl > + import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > import java . util . List ; < nl > < nl > @ @ - 35 , 12 + 36 , 33 @ @ public class MemoryKeyValueStorage implements KeyValueStorage { < nl > } < nl > < nl > @ Override < nl > - public void clear ( ) { < nl > - records . clear ( ) ; < nl > + public byte [ ] loadItem ( long key ) { < nl > + return records . get ( key ) ; < nl > } < nl > < nl > @ Override < nl > - public byte [ ] getValue ( long key ) { < nl > - return records . get ( key ) ; < nl > + public List < KeyValueRecord > loadItems ( long [ ] keys ) { < nl > + ArrayList < KeyValueRecord > res = new ArrayList < KeyValueRecord > ( ) ; < nl > + for ( long id : keys ) { < nl > + byte [ ] data = loadItem ( id ) ; < nl > + if ( data ! = null ) { < nl > + res . add ( new KeyValueRecord ( id , data ) ) ; < nl > + } < nl > + } < nl > + return res ; < nl > + } < nl > + < nl > + @ Override < nl > + public List < KeyValueRecord > loadAllItems ( ) { < nl > + ArrayList < KeyValueRecord > res = new ArrayList < KeyValueRecord > ( ) ; < nl > + for ( long id : records . keySet ( ) ) { < nl > + res . add ( new KeyValueRecord ( id , records . get ( id ) ) ) ; < nl > + } < nl > + return res ; < nl > + } < nl > + < nl > + @ Override < nl > + public void clear ( ) { < nl > + records . clear ( ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java < nl > index b3455d6 . . 188f5c0 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java < nl > @ @ - 1 , 14 + 1 , 12 @ @ < nl > package im . actor . runtime . storage . memory ; < nl > < nl > + import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > import java . util . List ; < nl > < nl > import im . actor . runtime . storage . ListEngineRecord ; < nl > import im . actor . runtime . storage . ListStorage ; < nl > < nl > - / * * < nl > - * Created by ex3ndr on 28 . 07 . 15 . < nl > - * / < nl > public class MemoryListStorage implements ListStorage { < nl > < nl > private HashMap < Long , Record > records = new HashMap < Long , Record > ( ) ; < nl > @ @ - 54 , 6 + 52 , 16 @ @ public class MemoryListStorage implements ListStorage { < nl > } < nl > < nl > @ Override < nl > + public List < ListEngineRecord > loadAllItems ( ) { < nl > + ArrayList < ListEngineRecord > res = new ArrayList < ListEngineRecord > ( ) ; < nl > + for ( long id : records . keySet ( ) ) { < nl > + Record record = records . get ( id ) ; < nl > + res . add ( new ListEngineRecord ( id , record . getOrder ( ) , record . getQuery ( ) , record . getData ( ) ) ) ; < nl > + } < nl > + return res ; < nl > + } < nl > + < nl > + @ Override < nl > public boolean isEmpty ( ) { < nl > return getCount ( ) = = 0 ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java 
 index 955989e . . d421b26 100644 
 - - - a / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java 
 + + + b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / Main . java 
 @ @ - 17 , 7 + 17 , 7 @ @ public class Main { 
 } 
 } ) , " auth _ key _ mon " ) ; 
 
 - actor . send ( new AuthKeyCreationMon . StartMonitoring ( 0 ) ) ; 
 + actor . send ( new AuthKeyCreationMon . StartMonitoring ( 500 ) ) ; 
 
 while ( true ) { 
 try { 
 diff - - git a / actor - sdk / sdk - core - se / src / main / java / im / actor / app / monitoring / AuthKeyCreationMon . java b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / monitoring / AuthKeyCreationMon . java 
 index 2aa4d04 . . ed15e56 100644 
 - - - a / actor - sdk / sdk - core - se / src / main / java / im / actor / app / monitoring / AuthKeyCreationMon . java 
 + + + b / actor - sdk / sdk - core - se / src / main / java / im / actor / app / monitoring / AuthKeyCreationMon . java 
 @ @ - 13 , 6 + 13 , 7 @ @ import im . actor . runtime . mtproto . ConnectionEndpoint ; 
 public class AuthKeyCreationMon extends Actor { 
 private ActorRef keyCreation ; 
 private Endpoints endpoints ; 
 + private long delay ; 
 
 @ Override 
 public void preStart ( ) { 
 @ @ - 30 , 13 + 31 , 14 @ @ public class AuthKeyCreationMon extends Actor { 
 } 
 
 private void startMonitoring ( long delay ) { 
 + this . delay = delay ; 
 Log . d ( " AuthKeyCreation " , " Start monitoring " ) ; 
 keyCreation . send ( new AuthKeyActor . StartKeyCreation ( endpoints ) , self ( ) ) ; 
 } 
 
 private void onKeyCreated ( ) { 
 Log . d ( " AuthKeyCreation " , " Key created " ) ; 
 - keyCreation . send ( new AuthKeyActor . StartKeyCreation ( endpoints ) , self ( ) ) ; 
 + keyCreation . send ( new AuthKeyActor . StartKeyCreation ( endpoints ) , delay , self ( ) ) ; 
 } 
 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - se / build . gradle b / actor - sdk / sdk - core / core / core - se / build . gradle 
 index 49c5726 . . 5984e59 100644 
 - - - a / actor - sdk / sdk - core / core / core - se / build . gradle 
 + + + b / actor - sdk / sdk - core / core / core - se / build . gradle 
 @ @ - 6 , 6 + 6 , 9 @ @ buildscript { 
 
 apply plugin : ' java ' 
 
 + group = ' im . actor ' 
 + version = ' 0 . 0 . 1 ' 
 + 
 compileJava { 
 sourceCompatibility = 1 . 6 
 targetCompatibility = 1 . 6 
 @ @ - 29 , 4 + 32 , 81 @ @ dependencies { 
 compile project ( ' : actor - sdk : sdk - core : runtime : runtime - se ' ) 
 compile ' com . squareup . okhttp : okhttp : 2 + ' 
 testCompile " junit : junit : 4 . 11 " 
 + } 
 + 
 + / / 
 + / / Configuration of publishing 
 + / / 
 + 
 + String ossrhUsername = " " 
 + String ossrhPassword = " " 
 + boolean isDeployConfigured = false 
 + if ( project . rootProject . file ( ' gradle . properties ' ) . exists ( ) ) { 
 + Properties properties = new Properties ( ) 
 + properties . load ( project . rootProject . file ( ' gradle . properties ' ) . newDataInputStream ( ) ) 
 + ossrhUsername = properties . getProperty ( " ossrhUsername " , " " ) 
 + ossrhPassword = properties . getProperty ( " ossrhPassword " , " " ) 
 + version = properties . getProperty ( " version " , " " ) 
 + 
 + nexusStaging { 
 + username ossrhUsername 
 + password ossrhPassword 
 + } 
 + 
 + isDeployConfigured = true 
 + } 
 + 
 + project . afterEvaluate { 
 + 
 + artifacts { 
 + archives javadocJarRelease 
 + archives sourcesJarRelease 
 + } 
 + 
 + if ( isDeployConfigured ) { 
 + 
 + signing { 
 + sign configurations . archives 
 + } 
 + 
 + uploadArchives { 
 + repositories { 
 + mavenDeployer { 
 + beforeDeployment { MavenDeployment deployment - > signing . signPom ( deployment ) } 
 + 
 + repository ( url : " https : / / oss . sonatype . org / service / local / staging / deploy / maven2 / " ) { 
 + authentication ( userName : ossrhUsername , password : ossrhPassword ) 
 + } 
 + 
 + pom . project { 
 + name ' Actor Core for Java SE ' 
 + packaging ' jar ' 
 + description ' Actor Core : Actor Java library ' 
 + url ' https : / / github . com / actorapp / actor - platform ' 
 + 
 + scm { 
 + url ' scm : git @ github . com : actorapp / actor - platform . git ' 
 + connection ' scm : git @ github . com : actorapp / actor - platform . git ' 
 + developerConnection ' scm : git @ github . com : actorapp / actor - platform . git ' 
 + } 
 + 
 + licenses { 
 + license { 
 + name ' The MIT License ( MIT ) ' 
 + url ' http : / / opensource . org / licenses / MIT ' 
 + distribution ' repo ' 
 + } 
 + } 
 + 
 + developers { 
 + developer { 
 + id ' ex3ndr ' 
 + name ' Stepan Korshakov ' 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeStorageProvider . java b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeStorageProvider . java 
 index 0a76646 . . cde1551 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeStorageProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - se / src / main / java / im / actor / runtime / se / JavaSeStorageProvider . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import im . actor . runtime . storage . IndexStorage ; 
 import im . actor . runtime . storage . KeyValueStorage ; 
 import im . actor . runtime . storage . ListStorage ; 
 import im . actor . runtime . storage . PreferencesStorage ; 
 + import im . actor . runtime . storage . memory . MemoryIndexStorage ; 
 import im . actor . runtime . storage . memory . MemoryKeyValueStorage ; 
 import im . actor . runtime . storage . memory . MemoryListStorage ; 
 import im . actor . runtime . storage . memory . MemoryPreferencesStorage ; 
 @ @ - 26 , 7 + 27 , 7 @ @ public class JavaSeStorageProvider implements StorageRuntime { 
 
 @ Override 
 public IndexStorage createIndex ( String name ) { 
 - throw new RuntimeException ( ) ; 
 + return new MemoryIndexStorage ( ) ; 
 } 
 
 @ Override 
 @ @ - 41 , 6 + 42 , 6 @ @ public class JavaSeStorageProvider implements StorageRuntime { 
 
 @ Override 
 public void resetStorage ( ) { 
 - 
 + 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / storage / memory / MemoryIndexStorage . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / storage / memory / MemoryIndexStorage . java 
 index 0c1f118 . . fabe84a 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / storage / memory / MemoryIndexStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / storage / memory / MemoryIndexStorage . java 
 @ @ - 1 , 48 + 1 , 66 @ @ 
 package im . actor . runtime . storage . memory ; 
 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 import java . util . List ; 
 
 import im . actor . runtime . storage . IndexStorage ; 
 
 public class MemoryIndexStorage implements IndexStorage { 
 
 + private HashMap < Long , Long > index = new HashMap < Long , Long > ( ) ; 
 + 
 @ Override 
 public void put ( long key , long value ) { 
 - 
 + index . put ( key , value ) ; 
 } 
 
 @ Override 
 public Long get ( long key ) { 
 - return null ; 
 + return index . get ( key ) ; 
 } 
 
 @ Override 
 public List < Long > findBeforeValue ( long value ) { 
 - return null ; 
 + ArrayList < Long > ids = new ArrayList < Long > ( ) ; 
 + for ( long k : index . keySet ( ) ) { 
 + if ( index . get ( k ) < value ) { 
 + ids . add ( k ) ; 
 + } 
 + } 
 + return ids ; 
 } 
 
 @ Override 
 public List < Long > removeBeforeValue ( long value ) { 
 - return null ; 
 + ArrayList < Long > ids = new ArrayList < Long > ( ) ; 
 + for ( long k : index . keySet ( ) ) { 
 + if ( index . get ( k ) > = value ) { 
 + ids . add ( k ) ; 
 + } 
 + } 
 + return ids ; 
 } 
 
 @ Override 
 public void remove ( long key ) { 
 - 
 + index . remove ( key ) ; 
 } 
 
 @ Override 
 public void remove ( List < Long > keys ) { 
 - 
 + for ( long l : keys ) { 
 + remove ( l ) ; 
 + } 
 } 
 
 @ Override 
 public int getCount ( ) { 
 - return 0 ; 
 + return index . size ( ) ; 
 } 
 
 @ Override 
 public void clear ( ) { 
 - 
 + index . clear ( ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java 
 index f5b9643 . . 55643c3 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / CryptoRuntimeProvider . java 
 @ @ - 6 , 14 + 6 , 5 @ @ public class CryptoRuntimeProvider implements CryptoRuntime { 
 public byte [ ] MD5 ( byte [ ] data ) { 
 throw new RuntimeException ( " Dumb " ) ; 
 } 
 - 
 - @ Override 
 - public byte [ ] SHA256 ( byte [ ] data ) { 
 - throw new RuntimeException ( " Dumb " ) ; 
 - } 
 - 
 - @ Override 
 - public byte [ ] SHA512 ( byte [ ] data ) { 
 - throw new RuntimeException ( " Dumb " ) ; 
 - } 
 + 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java 
 index 4603abc . . 19fdb7f 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / mvvm / MVVMCollection . java 
 @ @ - 158 , 7 + 158 , 7 @ @ public class MVVMCollection < T extends BserObject & KeyValueItem , V extends BaseV 
 return cache . get ( id ) ; 
 } 
 
 - byte [ ] data = collectionStorage . getValue ( id ) ; 
 + byte [ ] data = collectionStorage . loadItem ( id ) ; 
 
 if ( data ! = null ) { 
 try { 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java 
 index 3efd294 . . 4bf8fb8 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / KeyValueStorage . java 
 @ @ - 9 , 21 + 9 , 69 @ @ import com . google . j2objc . annotations . ObjectiveCName ; 
 import java . util . List ; 
 
 public interface KeyValueStorage { 
 + 
 + / * * 
 + * Adding new or replacing old record 
 + * 
 + * @ param key record key 
 + * @ param data record raw data 
 + * / 
 @ ObjectiveCName ( " addOrUpdateItemWithKey : withData : " ) 
 void addOrUpdateItem ( long key , byte [ ] data ) ; 
 
 + / * * 
 + * Adding new or replacing old records 
 + * 
 + * @ param values records 
 + * / 
 @ ObjectiveCName ( " addOrUpdateItems : " ) 
 void addOrUpdateItems ( List < KeyValueRecord > values ) ; 
 
 + / * * 
 + * Removing record by key 
 + * 
 + * @ param key record key 
 + * / 
 @ ObjectiveCName ( " removeItemWithKey : " ) 
 void removeItem ( long key ) ; 
 
 + / * * 
 + * Removing records by keys 
 + * 
 + * @ param keys record keys 
 + * / 
 @ ObjectiveCName ( " removeItemsWithKeys : " ) 
 void removeItems ( long [ ] keys ) ; 
 
 + / * * 
 + * Loading item by key 
 + * 
 + * @ param key record key 
 + * @ return result or null if not found 
 + * / 
 + @ ObjectiveCName ( " loadItemWithKey : " ) 
 + byte [ ] loadItem ( long key ) ; 
 + 
 + / * * 
 + * Loading items by keys 
 + * 
 + * @ param keys record keys 
 + * @ return all loaded items 
 + * / 
 + @ ObjectiveCName ( " loadItems : " ) 
 + List < KeyValueRecord > loadItems ( long [ ] keys ) ; 
 + 
 + / * * 
 + * Loading all items from storage 
 + * 
 + * @ return all items 
 + * / 
 + @ ObjectiveCName ( " loadAllItems " ) 
 + List < KeyValueRecord > loadAllItems ( ) ; 
 + 
 + / * * 
 + * Clearing storage 
 + * / 
 @ ObjectiveCName ( " clear " ) 
 void clear ( ) ; 
 - 
 - @ ObjectiveCName ( " getValueWithKey : " ) 
 - byte [ ] getValue ( long key ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java 
 index dff9c2b . . 19d8315 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / ListStorage . java 
 @ @ - 32 , 6 + 32 , 9 @ @ public interface ListStorage { 
 @ ObjectiveCName ( " loadItemWithKey : " ) 
 ListEngineRecord loadItem ( long key ) ; 
 
 + @ ObjectiveCName ( " loadAllItems " ) 
 + List < ListEngineRecord > loadAllItems ( ) ; 
 + 
 @ ObjectiveCName ( " isEmpty " ) 
 boolean isEmpty ( ) ; 
 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java 
 index 0081db1 . . a54f1ec 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / SyncKeyValue . java 
 @ @ - 21 , 6 + 21 , 6 @ @ public class SyncKeyValue { 
 } 
 
 public synchronized byte [ ] get ( long key ) { 
 - return storage . getValue ( key ) ; 
 + return storage . loadItem ( key ) ; 
 } 
 - } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java 
 index 05b4ca8 . . 5e9f694 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryKeyValueStorage . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . runtime . storage . memory ; 
 
 + import java . util . ArrayList ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 
 @ @ - 35 , 12 + 36 , 33 @ @ public class MemoryKeyValueStorage implements KeyValueStorage { 
 } 
 
 @ Override 
 - public void clear ( ) { 
 - records . clear ( ) ; 
 + public byte [ ] loadItem ( long key ) { 
 + return records . get ( key ) ; 
 } 
 
 @ Override 
 - public byte [ ] getValue ( long key ) { 
 - return records . get ( key ) ; 
 + public List < KeyValueRecord > loadItems ( long [ ] keys ) { 
 + ArrayList < KeyValueRecord > res = new ArrayList < KeyValueRecord > ( ) ; 
 + for ( long id : keys ) { 
 + byte [ ] data = loadItem ( id ) ; 
 + if ( data ! = null ) { 
 + res . add ( new KeyValueRecord ( id , data ) ) ; 
 + } 
 + } 
 + return res ; 
 + } 
 + 
 + @ Override 
 + public List < KeyValueRecord > loadAllItems ( ) { 
 + ArrayList < KeyValueRecord > res = new ArrayList < KeyValueRecord > ( ) ; 
 + for ( long id : records . keySet ( ) ) { 
 + res . add ( new KeyValueRecord ( id , records . get ( id ) ) ) ; 
 + } 
 + return res ; 
 + } 
 + 
 + @ Override 
 + public void clear ( ) { 
 + records . clear ( ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java 
 index b3455d6 . . 188f5c0 100644 
 - - - a / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / shared / src / main / java / im / actor / runtime / storage / memory / MemoryListStorage . java 
 @ @ - 1 , 14 + 1 , 12 @ @ 
 package im . actor . runtime . storage . memory ; 
 
 + import java . util . ArrayList ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 
 import im . actor . runtime . storage . ListEngineRecord ; 
 import im . actor . runtime . storage . ListStorage ; 
 
 - / * * 
 - * Created by ex3ndr on 28 . 07 . 15 . 
 - * / 
 public class MemoryListStorage implements ListStorage { 
 
 private HashMap < Long , Record > records = new HashMap < Long , Record > ( ) ; 
 @ @ - 54 , 6 + 52 , 16 @ @ public class MemoryListStorage implements ListStorage { 
 } 
 
 @ Override 
 + public List < ListEngineRecord > loadAllItems ( ) { 
 + ArrayList < ListEngineRecord > res = new ArrayList < ListEngineRecord > ( ) ; 
 + for ( long id : records . keySet ( ) ) { 
 + Record record = records . get ( id ) ; 
 + res . add ( new ListEngineRecord ( id , record . getOrder ( ) , record . getQuery ( ) , record . getData ( ) ) ) ; 
 + } 
 + return res ; 
 + } 
 + 
 + @ Override 
 public boolean isEmpty ( ) { 
 return getCount ( ) = = 0 ; 
 }
