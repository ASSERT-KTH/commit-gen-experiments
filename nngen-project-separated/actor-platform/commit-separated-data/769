BLEU SCORE: 0.13485111859503685

TEST MSG: fix ( server : test ) : compilation errors
GENERATED MSG: fix ( tests ) : expect forbidden in specs

TEST DIFF (one line): diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > index 460a981 . . 73dfefb 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > @ @ - 117 , 7 + 117 , 7 @ @ final class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceH < nl > { < nl > implicit val clientData = clientData1 < nl > < nl > - whenReady ( service . handleLoadHistory ( user2Peer , message3Date , 100 ) ) { resp ⇒ < nl > + whenReady ( service . handleLoadHistory ( user2Peer , message3Date , None , 100 ) ) { resp ⇒ < nl > resp should matchPattern { < nl > case Ok ( _ ) ⇒ < nl > } < nl > @ @ - 190 , 7 + 190 , 7 @ @ final class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceH < nl > < nl > Thread . sleep ( 2000 ) < nl > < nl > - whenReady ( service . handleLoadHistory ( groupOutPeer . asOutPeer , 0 , 100 ) ) { resp ⇒ < nl > + whenReady ( service . handleLoadHistory ( groupOutPeer . asOutPeer , 0 , None , 100 ) ) { resp ⇒ < nl > val history = resp . toOption . get . history < nl > / / history does not contain message about group creation , as group was not created by Zero user < nl > history . length shouldEqual 4 < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceSpec . scala < nl > index 2875a68 . . 64add45 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceSpec . scala < nl > @ @ - 339 , 7 + 339 , 7 @ @ class MessagingServiceSpec < nl > { < nl > implicit val clientData = ClientData ( aliceAuthId , 1 , Some ( AuthData ( alice . id , aliceAuthSid ) ) ) < nl > < nl > - whenReady ( service . handleLoadHistory ( bobOutPeer , 0L , Int . MaxValue ) ) { resp ⇒ < nl > + whenReady ( service . handleLoadHistory ( bobOutPeer , 0L , None , Int . MaxValue ) ) { resp ⇒ < nl > inside ( resp ) { < nl > case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ < nl > val textMessages = history map { e ⇒ < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / messaging / ReactionsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / messaging / ReactionsSpec . scala < nl > index 9eb605f . . 53c04cb 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / messaging / ReactionsSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / messaging / ReactionsSpec . scala < nl > @ @ - 46 , 7 + 46 , 7 @ @ final class ReactionsSpec < nl > { < nl > implicit val clientData = aliceClient < nl > val peer = getOutPeer ( bob . id , aliceAuthId ) < nl > - whenReady ( service . handleLoadHistory ( peer , 0 , Int . MaxValue ) ) { resp ⇒ < nl > + whenReady ( service . handleLoadHistory ( peer , 0 , None , Int . MaxValue ) ) { resp ⇒ < nl > inside ( resp ) { < nl > case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ < nl > history . head . reactions should be ( Vector ( ApiMessageReaction ( Vector ( bob . id ) , " like " ) ) ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorSpec . scala < nl > index aeefdb7 . . 4a39bb9 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorSpec . scala < nl > @ @ - 50 , 7 + 50 , 7 @ @ final class DialogProcessorSpec extends BaseAppSuite < nl > { < nl > implicit val clientData = ClientData ( bobAuthId , 2 , Some ( AuthData ( bob . id , bobAuthSid ) ) ) < nl > val aliceOutPeer = whenReady ( ACLUtils . getOutPeer ( alicePeer , bobAuthId ) ) ( identity ) < nl > - whenReady ( messService . handleLoadHistory ( aliceOutPeer , 0L , Int . MaxValue ) ) { resp ⇒ < nl > + whenReady ( messService . handleLoadHistory ( aliceOutPeer , 0L , None , Int . MaxValue ) ) { resp ⇒ < nl > inside ( resp ) { < nl > case Ok ( ResponseLoadHistory ( messages , _ ) ) ⇒ < nl > val ( aliceMessages , bobsMessages ) = messages map { mess ⇒ < nl > @ @ - 92 , 7 + 92 , 7 @ @ final class DialogProcessorSpec extends BaseAppSuite < nl > { < nl > implicit val clientData = ClientData ( bobAuthId , 2 , Some ( AuthData ( bob . id , bobAuthSid ) ) ) < nl > val aliceOutPeer = whenReady ( ACLUtils . getOutPeer ( alicePeer , bobAuthId ) ) ( identity ) < nl > - whenReady ( messService . handleLoadHistory ( aliceOutPeer , 0L , Int . MaxValue ) ) { resp ⇒ < nl > + whenReady ( messService . handleLoadHistory ( aliceOutPeer , 0L , None , Int . MaxValue ) ) { resp ⇒ < nl > inside ( resp ) { < nl > case Ok ( ResponseLoadHistory ( messages , _ ) ) ⇒ < nl > val ( aliceMessages , bobsMessages ) = messages partition ( m ⇒ m . senderUserId = = alice . id ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / user / ContactRegisteredSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / user / ContactRegisteredSpec . scala < nl > index 251eca6 . . 497e9bc 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / user / ContactRegisteredSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / user / ContactRegisteredSpec . scala < nl > @ @ - 36 , 7 + 36 , 7 @ @ final class ContactRegisteredSpec extends BaseAppSuite with ImplicitAuthService < nl > } < nl > } < nl > < nl > - whenReady ( msgService . handleLoadHistory ( getOutPeer ( bob . authData . get . userId , clientData . authId ) , 0 , 100 ) ) { resp ⇒ < nl > + whenReady ( msgService . handleLoadHistory ( getOutPeer ( bob . authData . get . userId , clientData . authId ) , 0 , None , 100 ) ) { resp ⇒ < nl > inside ( resp ) { < nl > case Ok ( ResponseLoadHistory ( Vector ( hm ) , _ ) ) ⇒ < nl > inside ( hm . message ) { < nl > @ @ - 75 , 7 + 75 , 7 @ @ final class ContactRegisteredSpec extends BaseAppSuite with ImplicitAuthService < nl > } < nl > } < nl > < nl > - whenReady ( msgService . handleLoadHistory ( getOutPeer ( alice . authData . get . userId , bob . authId ) , 0 , 100 ) ) { resp ⇒ < nl > + whenReady ( msgService . handleLoadHistory ( getOutPeer ( alice . authData . get . userId , bob . authId ) , 0 , None , 100 ) ) { resp ⇒ < nl > inside ( resp ) { < nl > case Ok ( ResponseLoadHistory ( Vector ( ) , Vector ( ) ) ) ⇒ < nl > }
NEAREST DIFF (one line): diff - - git a / actor - tests / src / test / scala / im / actor / server / ServiceSpecMatchers . scala b / actor - tests / src / test / scala / im / actor / server / ServiceSpecMatchers . scala < nl > index 31f6b14 . . 3ee2134 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / ServiceSpecMatchers . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / ServiceSpecMatchers . scala < nl > @ @ - 9 , 6 + 9 , 6 @ @ import im . actor . api . rpc . RpcError < nl > < nl > trait ServiceSpecMatchers extends Matchers { < nl > def matchNotAuthorized [ T ] : Matcher [ \ / [ RpcError , T ] ] = matchPattern { < nl > - case - \ / ( RpcError ( 403 , " USER _ NOT _ AUTHORIZED " , _ , _ , _ ) ) ⇒ < nl > + case - \ / ( RpcError ( 403 , " FORBIDDEN " , _ , _ , _ ) ) ⇒ < nl > } < nl > } < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > index 8c9c645 . . 80db89e 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala < nl > @ @ - 324 , 7 + 324 , 7 @ @ class GroupsServiceSpec extends BaseAppSuite with GroupsServiceHelpers with Mess < nl > { < nl > implicit val clientData = ClientData ( authId2 , sessionId , Some ( user2 . id ) ) < nl > whenReady ( service . handleGetGroupInviteUrl ( groupOutPeer ) ) { resp ⇒ < nl > - resp shouldEqual Error ( CommonErrors . UserNotAuthorized ) < nl > + resp should matchNotAuthorized < nl > } < nl > } < nl > < nl > diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / IntegrationsServiceSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / IntegrationsServiceSpec . scala < nl > index dbf2e13 . . e6b604e 100644 < nl > - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / IntegrationsServiceSpec . scala < nl > + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / IntegrationsServiceSpec . scala < nl > @ @ - 106 , 14 + 106 , 7 @ @ class IntegrationsServiceSpec extends BaseAppSuite with GroupsServiceHelpers { < nl > val groupToken = whenReady ( db . run ( persist . GroupBot . findByGroup ( outPeer . id ) ) ) ( result ⇒ result . map ( _ . token ) . getOrElse ( fail ( ) ) ) < nl > < nl > whenReady ( service . jhandleRevokeIntegrationToken ( outPeer , clientData2 ) ) { resp ⇒ < nl > - val expected = CommonErrors . noPermission ( " Only admin can perform this action " ) < nl > - inside ( resp ) { < nl > - case Error ( error : RpcError ) ⇒ < nl > - error . code shouldEqual expected . code < nl > - error . tag shouldEqual expected . tag < nl > - error . userMessage shouldEqual expected . userMessage < nl > - error . canTryAgain shouldEqual expected . canTryAgain < nl > - } < nl > + resp should matchNotAuthorized < nl > } < nl > < nl > whenReady ( service . jhandleGetIntegrationToken ( outPeer , clientData2 ) ) { resp ⇒

TEST DIFF:
diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 index 460a981 . . 73dfefb 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 @ @ - 117 , 7 + 117 , 7 @ @ final class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceH 
 { 
 implicit val clientData = clientData1 
 
 - whenReady ( service . handleLoadHistory ( user2Peer , message3Date , 100 ) ) { resp ⇒ 
 + whenReady ( service . handleLoadHistory ( user2Peer , message3Date , None , 100 ) ) { resp ⇒ 
 resp should matchPattern { 
 case Ok ( _ ) ⇒ 
 } 
 @ @ - 190 , 7 + 190 , 7 @ @ final class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceH 
 
 Thread . sleep ( 2000 ) 
 
 - whenReady ( service . handleLoadHistory ( groupOutPeer . asOutPeer , 0 , 100 ) ) { resp ⇒ 
 + whenReady ( service . handleLoadHistory ( groupOutPeer . asOutPeer , 0 , None , 100 ) ) { resp ⇒ 
 val history = resp . toOption . get . history 
 / / history does not contain message about group creation , as group was not created by Zero user 
 history . length shouldEqual 4 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceSpec . scala 
 index 2875a68 . . 64add45 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceSpec . scala 
 @ @ - 339 , 7 + 339 , 7 @ @ class MessagingServiceSpec 
 { 
 implicit val clientData = ClientData ( aliceAuthId , 1 , Some ( AuthData ( alice . id , aliceAuthSid ) ) ) 
 
 - whenReady ( service . handleLoadHistory ( bobOutPeer , 0L , Int . MaxValue ) ) { resp ⇒ 
 + whenReady ( service . handleLoadHistory ( bobOutPeer , 0L , None , Int . MaxValue ) ) { resp ⇒ 
 inside ( resp ) { 
 case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ 
 val textMessages = history map { e ⇒ 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / messaging / ReactionsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / messaging / ReactionsSpec . scala 
 index 9eb605f . . 53c04cb 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / messaging / ReactionsSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / messaging / ReactionsSpec . scala 
 @ @ - 46 , 7 + 46 , 7 @ @ final class ReactionsSpec 
 { 
 implicit val clientData = aliceClient 
 val peer = getOutPeer ( bob . id , aliceAuthId ) 
 - whenReady ( service . handleLoadHistory ( peer , 0 , Int . MaxValue ) ) { resp ⇒ 
 + whenReady ( service . handleLoadHistory ( peer , 0 , None , Int . MaxValue ) ) { resp ⇒ 
 inside ( resp ) { 
 case Ok ( ResponseLoadHistory ( history , _ ) ) ⇒ 
 history . head . reactions should be ( Vector ( ApiMessageReaction ( Vector ( bob . id ) , " like " ) ) ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorSpec . scala 
 index aeefdb7 . . 4a39bb9 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / DialogProcessorSpec . scala 
 @ @ - 50 , 7 + 50 , 7 @ @ final class DialogProcessorSpec extends BaseAppSuite 
 { 
 implicit val clientData = ClientData ( bobAuthId , 2 , Some ( AuthData ( bob . id , bobAuthSid ) ) ) 
 val aliceOutPeer = whenReady ( ACLUtils . getOutPeer ( alicePeer , bobAuthId ) ) ( identity ) 
 - whenReady ( messService . handleLoadHistory ( aliceOutPeer , 0L , Int . MaxValue ) ) { resp ⇒ 
 + whenReady ( messService . handleLoadHistory ( aliceOutPeer , 0L , None , Int . MaxValue ) ) { resp ⇒ 
 inside ( resp ) { 
 case Ok ( ResponseLoadHistory ( messages , _ ) ) ⇒ 
 val ( aliceMessages , bobsMessages ) = messages map { mess ⇒ 
 @ @ - 92 , 7 + 92 , 7 @ @ final class DialogProcessorSpec extends BaseAppSuite 
 { 
 implicit val clientData = ClientData ( bobAuthId , 2 , Some ( AuthData ( bob . id , bobAuthSid ) ) ) 
 val aliceOutPeer = whenReady ( ACLUtils . getOutPeer ( alicePeer , bobAuthId ) ) ( identity ) 
 - whenReady ( messService . handleLoadHistory ( aliceOutPeer , 0L , Int . MaxValue ) ) { resp ⇒ 
 + whenReady ( messService . handleLoadHistory ( aliceOutPeer , 0L , None , Int . MaxValue ) ) { resp ⇒ 
 inside ( resp ) { 
 case Ok ( ResponseLoadHistory ( messages , _ ) ) ⇒ 
 val ( aliceMessages , bobsMessages ) = messages partition ( m ⇒ m . senderUserId = = alice . id ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / user / ContactRegisteredSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / user / ContactRegisteredSpec . scala 
 index 251eca6 . . 497e9bc 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / user / ContactRegisteredSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / user / ContactRegisteredSpec . scala 
 @ @ - 36 , 7 + 36 , 7 @ @ final class ContactRegisteredSpec extends BaseAppSuite with ImplicitAuthService 
 } 
 } 
 
 - whenReady ( msgService . handleLoadHistory ( getOutPeer ( bob . authData . get . userId , clientData . authId ) , 0 , 100 ) ) { resp ⇒ 
 + whenReady ( msgService . handleLoadHistory ( getOutPeer ( bob . authData . get . userId , clientData . authId ) , 0 , None , 100 ) ) { resp ⇒ 
 inside ( resp ) { 
 case Ok ( ResponseLoadHistory ( Vector ( hm ) , _ ) ) ⇒ 
 inside ( hm . message ) { 
 @ @ - 75 , 7 + 75 , 7 @ @ final class ContactRegisteredSpec extends BaseAppSuite with ImplicitAuthService 
 } 
 } 
 
 - whenReady ( msgService . handleLoadHistory ( getOutPeer ( alice . authData . get . userId , bob . authId ) , 0 , 100 ) ) { resp ⇒ 
 + whenReady ( msgService . handleLoadHistory ( getOutPeer ( alice . authData . get . userId , bob . authId ) , 0 , None , 100 ) ) { resp ⇒ 
 inside ( resp ) { 
 case Ok ( ResponseLoadHistory ( Vector ( ) , Vector ( ) ) ) ⇒ 
 }

NEAREST DIFF:
diff - - git a / actor - tests / src / test / scala / im / actor / server / ServiceSpecMatchers . scala b / actor - tests / src / test / scala / im / actor / server / ServiceSpecMatchers . scala 
 index 31f6b14 . . 3ee2134 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / ServiceSpecMatchers . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / ServiceSpecMatchers . scala 
 @ @ - 9 , 6 + 9 , 6 @ @ import im . actor . api . rpc . RpcError 
 
 trait ServiceSpecMatchers extends Matchers { 
 def matchNotAuthorized [ T ] : Matcher [ \ / [ RpcError , T ] ] = matchPattern { 
 - case - \ / ( RpcError ( 403 , " USER _ NOT _ AUTHORIZED " , _ , _ , _ ) ) ⇒ 
 + case - \ / ( RpcError ( 403 , " FORBIDDEN " , _ , _ , _ ) ) ⇒ 
 } 
 } 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 index 8c9c645 . . 80db89e 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupsServiceSpec . scala 
 @ @ - 324 , 7 + 324 , 7 @ @ class GroupsServiceSpec extends BaseAppSuite with GroupsServiceHelpers with Mess 
 { 
 implicit val clientData = ClientData ( authId2 , sessionId , Some ( user2 . id ) ) 
 whenReady ( service . handleGetGroupInviteUrl ( groupOutPeer ) ) { resp ⇒ 
 - resp shouldEqual Error ( CommonErrors . UserNotAuthorized ) 
 + resp should matchNotAuthorized 
 } 
 } 
 
 diff - - git a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / IntegrationsServiceSpec . scala b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / IntegrationsServiceSpec . scala 
 index dbf2e13 . . e6b604e 100644 
 - - - a / actor - tests / src / test / scala / im / actor / server / api / rpc / service / IntegrationsServiceSpec . scala 
 + + + b / actor - tests / src / test / scala / im / actor / server / api / rpc / service / IntegrationsServiceSpec . scala 
 @ @ - 106 , 14 + 106 , 7 @ @ class IntegrationsServiceSpec extends BaseAppSuite with GroupsServiceHelpers { 
 val groupToken = whenReady ( db . run ( persist . GroupBot . findByGroup ( outPeer . id ) ) ) ( result ⇒ result . map ( _ . token ) . getOrElse ( fail ( ) ) ) 
 
 whenReady ( service . jhandleRevokeIntegrationToken ( outPeer , clientData2 ) ) { resp ⇒ 
 - val expected = CommonErrors . noPermission ( " Only admin can perform this action " ) 
 - inside ( resp ) { 
 - case Error ( error : RpcError ) ⇒ 
 - error . code shouldEqual expected . code 
 - error . tag shouldEqual expected . tag 
 - error . userMessage shouldEqual expected . userMessage 
 - error . canTryAgain shouldEqual expected . canTryAgain 
 - } 
 + resp should matchNotAuthorized 
 } 
 
 whenReady ( service . jhandleGetIntegrationToken ( outPeer , clientData2 ) ) { resp ⇒
