BLEU SCORE: 0.13784336590962215

TEST MSG: chore ( android ) : add json layouter
GENERATED MSG: feat ( android - sdk ) : custom messages

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > index c853f65 . . f21c2f1 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > @ @ - 1 , 5 + 1 , 10 @ @ < nl > package im . actor ; < nl > < nl > + import android . content . Intent ; < nl > + import android . graphics . Color ; < nl > + import android . graphics . PorterDuff ; < nl > + import android . graphics . PorterDuffColorFilter ; < nl > + import android . net . Uri ; < nl > import android . os . Bundle ; < nl > import android . support . multidex . MultiDex ; < nl > import android . support . v4 . app . Fragment ; < nl > @ @ - 7 , 6 + 12 , 7 @ @ import android . support . v7 . app . ActionBar ; < nl > import android . view . LayoutInflater ; < nl > import android . view . View ; < nl > import android . view . ViewGroup ; < nl > + import android . widget . Button ; < nl > import android . widget . CheckBox ; < nl > import android . widget . Toast ; < nl > < nl > @ @ - 15 , 9 + 21 , 14 @ @ import org . jetbrains . annotations . Nullable ; < nl > import java . util . ArrayList ; < nl > import java . util . List ; < nl > < nl > + import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . content . JsonContent ; < nl > + import im . actor . core . entity . content . PhotoContent ; < nl > import im . actor . develop . R ; < nl > import im . actor . holders . BubbleTextHolderLayouter ; < nl > + import im . actor . runtime . json . JSONException ; < nl > + import im . actor . runtime . json . JSONObject ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . ActorSDKApplication ; < nl > import im . actor . sdk . ActorStyle ; < nl > @ @ - 26 , 6 + 37 , 11 @ @ import im . actor . sdk . controllers . conversation . attach . ShareMenuField ; < nl > import im . actor . sdk . controllers . conversation . attach . AbsAttachFragment ; < nl > import im . actor . sdk . controllers . conversation . attach . AttachFragment ; < nl > import im . actor . sdk . controllers . conversation . messages . BubbleLayouter ; < nl > + import im . actor . sdk . controllers . conversation . messages . JsonXmlBubbleLayouter ; < nl > + import im . actor . sdk . controllers . conversation . messages . XmlBubbleLayouter ; < nl > + import im . actor . sdk . controllers . conversation . messages . content . PhotoHolder ; < nl > + import im . actor . sdk . controllers . conversation . messages . content . TextHolder ; < nl > + import im . actor . sdk . controllers . conversation . messages . content . preprocessor . PreprocessedData ; < nl > import im . actor . sdk . controllers . root . RootFragment ; < nl > import im . actor . sdk . controllers . settings . ActorSettingsCategories ; < nl > import im . actor . sdk . controllers . settings . ActorSettingsCategory ; < nl > @ @ - 92 , 7 + 108 , 29 @ @ public class Application extends ActorSDKApplication { < nl > < nl > @ Override < nl > public void configureChatViewHolders ( ArrayList < BubbleLayouter > layouters ) { < nl > - layouters . add ( 0 , new BubbleTextHolderLayouter ( ) ) ; < nl > + / / layouters . add ( 0 , new BubbleTextHolderLayouter ( ) ) ; < nl > + layouters . add ( 0 , new XmlBubbleLayouter ( content - > content instanceof PhotoContent , R . layout . adapter _ dialog _ photo , ( adapter1 , root1 , peer1 ) - > new PhotoHolder ( adapter1 , root1 , peer1 ) { < nl > + @ Override < nl > + protected void onConfigureViewHolder ( ) { < nl > + previewView . setColorFilter ( ActorStyle . adjustColorAlpha ( Color . CYAN , 20 ) , PorterDuff . Mode . ADD ) ; < nl > + } < nl > + } ) ) ; < nl > + layouters . add ( 0 , new JsonXmlBubbleLayouter ( null , R . layout . adapter _ dialog _ text , ( adapter , root , peer ) - > new TextHolder ( adapter , root , peer ) { < nl > + @ Override < nl > + protected void bindData ( Message message , long readDate , long receiveDate , boolean isUpdated , PreprocessedData preprocessedData ) { < nl > + String jsonString = " can ' t read json " ; < nl > + try { < nl > + JSONObject jsonObject = new JSONObject ( ( ( JsonContent ) message . getContent ( ) ) . getRawJson ( ) ) ; < nl > + String dataType = jsonObject . getString ( " dataType " ) ; < nl > + JSONObject data = jsonObject . getJSONObject ( " data " ) ; < nl > + jsonString = dataType + " \ n \ n " ; < nl > + jsonString + = data . toString ( 3 ) ; < nl > + } catch ( JSONException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + bindRawText ( jsonString , readDate , receiveDate , reactions , message , false ) ; < nl > + } < nl > + } ) ) ; < nl > } < nl > < nl > @ Nullable < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java < nl > index 95a729f . . fac4075 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java < nl > @ @ - 924 , 6 + 924 , 10 @ @ public class ActorStyle { < nl > return Color . argb ( Color . alpha ( color ) , ( int ) Math . round ( Color . red ( color ) * percent ) , ( int ) Math . round ( Color . green ( color ) * percent ) , ( int ) Math . round ( Color . blue ( color ) * percent ) ) ; < nl > } < nl > < nl > + public static int adjustColorAlpha ( int color , int alpha ) { < nl > + return ( alpha < < 24 ) | ( color & 0x00ffffff ) ; < nl > + } < nl > + < nl > / * * < nl > * Get color with fallback to default - if color is 0 , returns fallback color < nl > * < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / JsonBubbleLayouter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / JsonBubbleLayouter . java < nl > new file mode 100644 < nl > index 0000000 . . 7b33e0b < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / JsonBubbleLayouter . java < nl > @ @ - 0 , 0 + 1 , 39 @ @ < nl > + package im . actor . sdk . controllers . conversation . messages ; < nl > + < nl > + import android . view . ViewGroup ; < nl > + < nl > + import org . jetbrains . annotations . NotNull ; < nl > + < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . content . AbsContent ; < nl > + import im . actor . core . entity . content . JsonContent ; < nl > + import im . actor . runtime . json . JSONException ; < nl > + import im . actor . runtime . json . JSONObject ; < nl > + import im . actor . sdk . controllers . conversation . messages . content . AbsMessageViewHolder ; < nl > + < nl > + public class JsonBubbleLayouter extends LambdaBubbleLayouter { < nl > + < nl > + < nl > + public JsonBubbleLayouter ( String dataType , @ NotNull LambdaBubbleLayouter . ViewHolderCreator creator ) { < nl > + super ( content - > < nl > + { < nl > + if ( content instanceof JsonContent ) { < nl > + if ( dataType = = null ) { < nl > + return true ; < nl > + } < nl > + try { < nl > + return dataType . equals ( new JSONObject ( ( ( JsonContent ) content ) . getRawJson ( ) ) . getString ( " dataType " ) ) ; < nl > + } catch ( JSONException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + return false ; < nl > + } , creator ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public boolean isMatch ( AbsContent content ) { < nl > + return matcher . isMatch ( content ) ; < nl > + } < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / JsonXmlBubbleLayouter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / JsonXmlBubbleLayouter . java < nl > new file mode 100644 < nl > index 0000000 . . 3e068d9 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / JsonXmlBubbleLayouter . java < nl > @ @ - 0 , 0 + 1 , 31 @ @ < nl > + package im . actor . sdk . controllers . conversation . messages ; < nl > + < nl > + import android . support . annotation . LayoutRes ; < nl > + import android . view . ViewGroup ; < nl > + < nl > + import org . jetbrains . annotations . NotNull ; < nl > + < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . content . AbsContent ; < nl > + import im . actor . core . entity . content . JsonContent ; < nl > + import im . actor . runtime . json . JSONException ; < nl > + import im . actor . runtime . json . JSONObject ; < nl > + import im . actor . sdk . controllers . conversation . messages . content . AbsMessageViewHolder ; < nl > + import im . actor . sdk . controllers . conversation . view . BubbleContainer ; < nl > + import im . actor . sdk . util . ViewUtils ; < nl > + < nl > + public class JsonXmlBubbleLayouter extends JsonBubbleLayouter { < nl > + < nl > + private int id ; < nl > + < nl > + public JsonXmlBubbleLayouter ( String dataType , @ LayoutRes int id , @ NotNull ViewHolderCreator creator ) { < nl > + super ( dataType , creator ) ; < nl > + this . id = id ; < nl > + } < nl > + < nl > + @ Override < nl > + public AbsMessageViewHolder onCreateViewHolder ( MessagesAdapter adapter , ViewGroup root , Peer peer ) { < nl > + return creator . onCreateViewHolder ( adapter , ( ViewGroup ) ViewUtils . inflate ( id , root ) , peer ) ; < nl > + } < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / LambdaBubbleLayouter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / LambdaBubbleLayouter . java < nl > new file mode 100644 < nl > index 0000000 . . c9266db < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / LambdaBubbleLayouter . java < nl > @ @ - 0 , 0 + 1 , 37 @ @ < nl > + package im . actor . sdk . controllers . conversation . messages ; < nl > + < nl > + import android . view . ViewGroup ; < nl > + < nl > + import org . jetbrains . annotations . NotNull ; < nl > + < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . content . AbsContent ; < nl > + import im . actor . sdk . controllers . conversation . messages . content . AbsMessageViewHolder ; < nl > + < nl > + public class LambdaBubbleLayouter implements BubbleLayouter { < nl > + protected Matcher matcher ; < nl > + protected ViewHolderCreator creator ; < nl > + < nl > + public LambdaBubbleLayouter ( @ NotNull Matcher matcher , @ NotNull ViewHolderCreator creator ) { < nl > + this . matcher = matcher ; < nl > + this . creator = creator ; < nl > + } < nl > + < nl > + @ Override < nl > + public boolean isMatch ( AbsContent content ) { < nl > + return matcher . isMatch ( content ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public AbsMessageViewHolder onCreateViewHolder ( MessagesAdapter adapter , ViewGroup root , Peer peer ) { < nl > + return creator . onCreateViewHolder ( adapter , root , peer ) ; < nl > + } < nl > + < nl > + public interface Matcher { < nl > + boolean isMatch ( AbsContent content ) ; < nl > + } < nl > + < nl > + public interface ViewHolderCreator { < nl > + AbsMessageViewHolder onCreateViewHolder ( MessagesAdapter adapter , ViewGroup root , Peer peer ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java < nl > index cf56806 . . e70148f 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java < nl > @ @ - 69 , 25 + 69 , 27 @ @ public class MessagesAdapter extends BindedListAdapter < Message , AbsMessageViewHo < nl > < nl > static { < nl > holderMap = new ArrayList < > ( ) ; < nl > - holderMap . add ( new HolderMapEntry ( TextContent . class , TEXT _ CONTENT ) ) ; < nl > - holderMap . add ( new HolderMapEntry ( ServiceContent . class , SERVICE _ CONTENT ) ) ; < nl > - holderMap . add ( new HolderMapEntry ( PhotoContent . class , PHOTO _ CONTENT ) ) ; < nl > - holderMap . add ( new HolderMapEntry ( VideoContent . class , PHOTO _ CONTENT ) ) ; < nl > - holderMap . add ( new HolderMapEntry ( AnimationContent . class , PHOTO _ CONTENT ) ) ; < nl > - holderMap . add ( new HolderMapEntry ( VoiceContent . class , VOICE _ CONTENT ) ) ; < nl > - holderMap . add ( new HolderMapEntry ( DocumentContent . class , DOCUMENT _ CONTENT ) ) ; < nl > - holderMap . add ( new HolderMapEntry ( ContactContent . class , CONTACT _ CONTENT ) ) ; < nl > - holderMap . add ( new HolderMapEntry ( LocationContent . class , LOCATION _ CONTENT ) ) ; < nl > - holderMap . add ( new HolderMapEntry ( StickerContent . class , STICKER _ CONTENT ) ) ; < nl > + holderMap . add ( new HolderMapEntry ( TextContent . class , TEXT _ CONTENT , R . layout . adapter _ dialog _ text ) ) ; < nl > + holderMap . add ( new HolderMapEntry ( ServiceContent . class , SERVICE _ CONTENT , R . layout . adapter _ dialog _ service ) ) ; < nl > + holderMap . add ( new HolderMapEntry ( PhotoContent . class , PHOTO _ CONTENT , R . layout . adapter _ dialog _ photo ) ) ; < nl > + holderMap . add ( new HolderMapEntry ( VideoContent . class , PHOTO _ CONTENT , R . layout . adapter _ dialog _ photo ) ) ; < nl > + holderMap . add ( new HolderMapEntry ( AnimationContent . class , PHOTO _ CONTENT , R . layout . adapter _ dialog _ photo ) ) ; < nl > + holderMap . add ( new HolderMapEntry ( VoiceContent . class , R . layout . adapter _ dialog _ audio , VOICE _ CONTENT ) ) ; < nl > + holderMap . add ( new HolderMapEntry ( DocumentContent . class , R . layout . adapter _ dialog _ doc , DOCUMENT _ CONTENT ) ) ; < nl > + holderMap . add ( new HolderMapEntry ( ContactContent . class , R . layout . adapter _ dialog _ contact , CONTACT _ CONTENT ) ) ; < nl > + holderMap . add ( new HolderMapEntry ( LocationContent . class , R . layout . adapter _ dialog _ locaton , LOCATION _ CONTENT ) ) ; < nl > + holderMap . add ( new HolderMapEntry ( StickerContent . class , R . layout . adapter _ dialog _ sticker , STICKER _ CONTENT ) ) ; < nl > } < nl > < nl > private static class HolderMapEntry { < nl > Class aClass ; < nl > int id ; < nl > + int layoutId ; < nl > < nl > - public HolderMapEntry ( Class aClass , int id ) { < nl > + public HolderMapEntry ( Class aClass , int id , int layoutId ) { < nl > this . aClass = aClass ; < nl > this . id = id ; < nl > + this . layoutId = layoutId ; < nl > } < nl > < nl > public Class getaClass ( ) { < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / XmlBubbleLayouter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / XmlBubbleLayouter . java < nl > new file mode 100644 < nl > index 0000000 . . 45a8411 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / XmlBubbleLayouter . java < nl > @ @ - 0 , 0 + 1 , 26 @ @ < nl > + package im . actor . sdk . controllers . conversation . messages ; < nl > + < nl > + import android . support . annotation . LayoutRes ; < nl > + import android . view . ViewGroup ; < nl > + < nl > + import org . jetbrains . annotations . NotNull ; < nl > + < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . sdk . controllers . conversation . messages . content . AbsMessageViewHolder ; < nl > + import im . actor . sdk . util . ViewUtils ; < nl > + < nl > + public class XmlBubbleLayouter extends LambdaBubbleLayouter { < nl > + < nl > + private int id ; < nl > + < nl > + public XmlBubbleLayouter ( @ NotNull Matcher matcher , @ LayoutRes int id , @ NotNull ViewHolderCreator creator ) { < nl > + super ( matcher , creator ) ; < nl > + this . id = id ; < nl > + } < nl > + < nl > + @ Override < nl > + public AbsMessageViewHolder onCreateViewHolder ( MessagesAdapter adapter , ViewGroup root , Peer peer ) { < nl > + return creator . onCreateViewHolder ( adapter , ( ViewGroup ) ViewUtils . inflate ( id , root ) , peer ) ; < nl > + } < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ViewUtils . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ViewUtils . java < nl > index db4a143 . . f7bd2f2 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ViewUtils . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ViewUtils . java < nl > @ @ - 21 , 9 + 21 , 13 @ @ public class ViewUtils { < nl > } < nl > < nl > public static View inflate ( @ LayoutRes int id , ViewGroup viewGroup ) { < nl > + return inflate ( id , viewGroup , false ) ; < nl > + } < nl > + < nl > + public static View inflate ( @ LayoutRes int id , ViewGroup viewGroup , boolean attach ) { < nl > return LayoutInflater < nl > . from ( viewGroup . getContext ( ) ) < nl > - . inflate ( id , viewGroup , false ) ; < nl > + . inflate ( id , viewGroup , attach ) ; < nl > } < nl > < nl > public static void goneView ( final View view , boolean isAnimated , boolean isSlow ) {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > index ddc22a6 . . 56b5963 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > @ @ - 1 , 13 + 1 , 24 @ @ < nl > package im . actor ; < nl > < nl > import android . graphics . Color ; < nl > + import android . view . LayoutInflater ; < nl > import android . view . View ; < nl > + import android . view . ViewGroup ; < nl > import android . widget . CheckBox ; < nl > < nl > + import im . actor . core . api . ApiMessage ; < nl > + import im . actor . core . api . ApiTextMessage ; < nl > + import im . actor . core . entity . content . AbsContent ; < nl > + import im . actor . core . entity . content . ContentConverter ; < nl > + import im . actor . core . entity . content . TextContent ; < nl > + import im . actor . core . entity . content . internal . AbsContentContainer ; < nl > + import im . actor . core . entity . content . internal . ContentRemoteContainer ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . ActorSDKApplication ; < nl > import im . actor . sdk . ActorStyle ; < nl > import im . actor . sdk . BaseActorSDKDelegate ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessageHolder ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; < nl > import im . actor . sdk . controllers . fragment . settings . ActorSettingsCategory ; < nl > import im . actor . sdk . controllers . fragment . settings . ActorSettingsField ; < nl > import im . actor . sdk . controllers . fragment . settings . BaseActorSettingsActivity ; < nl > @ @ - 27 , 11 + 38 , 46 @ @ public class Application extends ActorSDKApplication { < nl > < nl > ActorStyle style = ActorSDK . sharedActor ( ) . style ; < nl > style . setMainColor ( Color . parseColor ( " # 529a88 " ) ) ; < nl > + AbsContent . registerConverter ( new ContentConverter ( ) { < nl > + @ Override < nl > + public AbsContent convert ( AbsContentContainer container ) { < nl > + if ( container instanceof ContentRemoteContainer ) { < nl > + ApiMessage msg = ( ( ContentRemoteContainer ) container ) . getMessage ( ) ; < nl > + if ( msg instanceof ApiTextMessage ) { < nl > + return new TextContent ( ( ContentRemoteContainer ) container ) ; < nl > + } < nl > + } < nl > + return null ; < nl > + } < nl > + < nl > + @ Override < nl > + public Class destinationType ( ) { < nl > + return TextExContent . class ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + public class TextExContent extends TextContent { < nl > + < nl > + public TextExContent ( ContentRemoteContainer remoteContainer ) { < nl > + super ( remoteContainer ) ; < nl > + } < nl > } < nl > < nl > private class ActorSDKDelegate extends BaseActorSDKDelegate { < nl > < nl > @ Override < nl > + public MessageHolder getCustomMessageViewHolder ( Class < AbsContent > content , MessagesAdapter messagesAdapter , ViewGroup viewGroup ) { < nl > + if ( content . isAssignableFrom ( TextExContent . class ) ) { < nl > + return new TextExHolder ( messagesAdapter , LayoutInflater < nl > + . from ( viewGroup . getContext ( ) ) < nl > + . inflate ( R . layout . adapter _ dialog _ text , viewGroup , false ) ) ; < nl > + } else { < nl > + return null ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > public ActorIntentFragmentActivity getSettingsIntent ( ) { < nl > return new BaseActorSettingsActivity ( ) { < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TextExHolder . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TextExHolder . java < nl > new file mode 100644 < nl > index 0000000 . . ab2ccf6 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TextExHolder . java < nl > @ @ - 0 , 0 + 1 , 151 @ @ < nl > + package im . actor ; < nl > + < nl > + import android . graphics . Color ; < nl > + import android . text . Spannable ; < nl > + import android . text . method . LinkMovementMethod ; < nl > + import android . view . MotionEvent ; < nl > + import android . view . View ; < nl > + import android . view . ViewGroup ; < nl > + import android . widget . FrameLayout ; < nl > + import android . widget . TextView ; < nl > + < nl > + import java . util . Random ; < nl > + < nl > + import im . actor . core . entity . Message ; < nl > + import im . actor . sdk . ActorSDK ; < nl > + import im . actor . sdk . R ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessageHolder ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; < nl > + import im . actor . sdk . controllers . conversation . messages . PreprocessedData ; < nl > + import im . actor . sdk . controllers . conversation . messages . PreprocessedTextData ; < nl > + import im . actor . sdk . util . Fonts ; < nl > + import im . actor . sdk . view . TintImageView ; < nl > + < nl > + import static im . actor . sdk . util . ActorSDKMessenger . myUid ; < nl > + < nl > + public class TextExHolder extends MessageHolder { < nl > + < nl > + protected ViewGroup mainContainer ; < nl > + protected FrameLayout messageBubble ; < nl > + protected TextView text ; < nl > + protected TextView time ; < nl > + protected TintImageView status ; < nl > + < nl > + private int waitColor ; < nl > + private int sentColor ; < nl > + private int deliveredColor ; < nl > + private int readColor ; < nl > + private int errorColor ; < nl > + < nl > + public TextExHolder ( MessagesAdapter fragment , final View itemView ) { < nl > + super ( fragment , itemView , false ) ; < nl > + < nl > + mainContainer = ( ViewGroup ) itemView . findViewById ( R . id . mainContainer ) ; < nl > + messageBubble = ( FrameLayout ) itemView . findViewById ( R . id . fl _ bubble ) ; < nl > + text = ( TextView ) itemView . findViewById ( R . id . tv _ text ) ; < nl > + text . setTextColor ( ActorSDK . sharedActor ( ) . style . getConvTextColor ( ) ) ; < nl > + text . setTypeface ( Fonts . regular ( ) ) ; < nl > + < nl > + time = ( TextView ) itemView . findViewById ( R . id . tv _ time ) ; < nl > + ActorSDK . sharedActor ( ) . style . getConvTimeColor ( ) ; < nl > + time . setTypeface ( Fonts . regular ( ) ) ; < nl > + time . setTextColor ( ActorSDK . sharedActor ( ) . style . getConvTimeColor ( ) ) ; < nl > + status = ( TintImageView ) itemView . findViewById ( R . id . stateIcon ) ; < nl > + < nl > + waitColor = ActorSDK . sharedActor ( ) . style . getConvStatePendingColor ( ) ; < nl > + sentColor = ActorSDK . sharedActor ( ) . style . getConvStateSentColor ( ) ; < nl > + deliveredColor = ActorSDK . sharedActor ( ) . style . getConvStateDeliveredColor ( ) ; < nl > + readColor = ActorSDK . sharedActor ( ) . style . getConvStateReadColor ( ) ; < nl > + errorColor = ActorSDK . sharedActor ( ) . style . getConvStateErrorColor ( ) ; < nl > + < nl > + onConfigureViewHolder ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + protected void bindData ( final Message message , boolean isUpdated , PreprocessedData preprocessedData ) { < nl > + Random rnd = new Random ( ) ; < nl > + int color = Color . argb ( 255 , rnd . nextInt ( 256 ) , rnd . nextInt ( 256 ) , rnd . nextInt ( 256 ) ) ; < nl > + text . setBackgroundColor ( color ) ; < nl > + PreprocessedTextData textData = ( PreprocessedTextData ) preprocessedData ; < nl > + Spannable reactions = preprocessedData . getReactionsSpannable ( ) ; < nl > + CharSequence text ; < nl > + if ( textData . getSpannableString ( ) ! = null ) { < nl > + text = textData . getSpannableString ( ) ; < nl > + } else { < nl > + text = textData . getText ( ) ; < nl > + } < nl > + bindRawText ( text , reactions , message , false ) ; < nl > + } < nl > + < nl > + public void bindRawText ( CharSequence rawText , Spannable reactions , Message message , boolean isItalic ) { < nl > + if ( message . getSenderId ( ) = = myUid ( ) ) { < nl > + messageBubble . setBackgroundResource ( R . drawable . bubble _ text _ out ) ; < nl > + } else { < nl > + messageBubble . setBackgroundResource ( R . drawable . bubble _ text _ in ) ; < nl > + } < nl > + < nl > + if ( isItalic ) { < nl > + text . setTypeface ( Fonts . italic ( ) ) ; < nl > + } else { < nl > + text . setTypeface ( Fonts . regular ( ) ) ; < nl > + } < nl > + < nl > + text . setText ( rawText ) ; < nl > + < nl > + / / Fixing url long tap < nl > + text . setMovementMethod ( new CustomLinkMovementMethod ( ) ) ; < nl > + < nl > + / / Fixing span offsets < nl > + / / if ( rawText instanceof Spannable ) { < nl > + / / Spannable s = ( Spannable ) rawText ; < nl > + / / QuoteSpan [ ] qSpans = s . getSpans ( 0 , s . length ( ) , QuoteSpan . class ) ; < nl > + / / text . setMinimumWidth ( 0 ) ; < nl > + / / if ( qSpans . length > 0 ) { < nl > + / / text . measure ( 0 , 0 ) ; < nl > + / / text . setMinimumWidth ( text . getMeasuredWidth ( ) + qSpans [ 0 ] . getLeadingMargin ( true ) ) ; < nl > + / / } < nl > + / / } < nl > + < nl > + if ( message . getSenderId ( ) = = myUid ( ) ) { < nl > + status . setVisibility ( View . VISIBLE ) ; < nl > + < nl > + switch ( message . getMessageState ( ) ) { < nl > + case SENT : < nl > + status . setResource ( R . drawable . msg _ check _ 1 ) ; < nl > + status . setTint ( sentColor ) ; < nl > + break ; < nl > + case RECEIVED : < nl > + status . setResource ( R . drawable . msg _ check _ 2 ) ; < nl > + status . setTint ( deliveredColor ) ; < nl > + break ; < nl > + case READ : < nl > + status . setResource ( R . drawable . msg _ check _ 2 ) ; < nl > + status . setTint ( readColor ) ; < nl > + break ; < nl > + default : < nl > + case PENDING : < nl > + status . setResource ( R . drawable . msg _ clock ) ; < nl > + status . setTint ( waitColor ) ; < nl > + break ; < nl > + case ERROR : < nl > + status . setResource ( R . drawable . msg _ error ) ; < nl > + status . setTint ( errorColor ) ; < nl > + break ; < nl > + } < nl > + } else { < nl > + status . setVisibility ( View . GONE ) ; < nl > + } < nl > + < nl > + setTimeAndReactions ( time ) ; < nl > + } < nl > + < nl > + class CustomLinkMovementMethod extends LinkMovementMethod { < nl > + < nl > + @ Override < nl > + public boolean onTouchEvent ( TextView textView , Spannable spannable , MotionEvent event ) { < nl > + super . onTouchEvent ( textView , spannable , event ) ; < nl > + mainContainer . onTouchEvent ( event ) ; < nl > + return true ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > index a2a54c2 . . 3c7b187 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > @ @ - 8 , 6 + 8 , 8 @ @ import android . content . Context ; < nl > import android . content . Intent ; < nl > import android . os . Build ; < nl > import android . os . Bundle ; < nl > + import android . view . View ; < nl > + import android . view . ViewGroup ; < nl > < nl > import com . facebook . drawee . backends . pipeline . Fresco ; < nl > < nl > @ @ - 23 , 9 + 25 , 12 @ @ import im . actor . core . ApiConfiguration ; < nl > import im . actor . core . ConfigurationBuilder ; < nl > import im . actor . core . DeviceCategory ; < nl > import im . actor . core . PlatformType ; < nl > + import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . android . view . BindedViewHolder ; < nl > import im . actor . sdk . controllers . activity . ActorMainActivity ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessageHolder ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; < nl > import im . actor . sdk . controllers . fragment . auth . AuthActivity ; < nl > import im . actor . sdk . controllers . fragment . dialogs . DialogHolder ; < nl > import im . actor . sdk . controllers . fragment . settings . MyProfileActivity ; < nl > @ @ - 448 , 9 + 453 , 24 @ @ public class ActorSDK { < nl > } < nl > } < nl > < nl > + public MessageHolder getDelegatedMessageViewHolder ( Class < AbsContent > base , OnDelegateViewHolder < MessageHolder > callback , MessagesAdapter messagesAdapter , ViewGroup viewGroup ) { < nl > + MessageHolder delegated = delegate . getCustomMessageViewHolder ( base , messagesAdapter , viewGroup ) ; < nl > + if ( delegated ! = null ) { < nl > + return delegated ; < nl > + } else { < nl > + return callback . onNotDelegated ( ) ; < nl > + } < nl > + } < nl > + < nl > public interface OnDelegateViewHolder < T > { < nl > T onNotDelegated ( ) ; < nl > < nl > } < nl > < nl > + public interface OnDeligateMessageHolder { < nl > + MessageHolder onNotDelegated ( ) ; < nl > + < nl > + View getItemView ( ) ; < nl > + } < nl > + < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java < nl > index cf595a6 . . 849fa08 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java < nl > @ @ - 2 , 11 + 2 , 15 @ @ package im . actor . sdk ; < nl > < nl > import android . content . Context ; < nl > import android . view . View ; < nl > + import android . view . ViewGroup ; < nl > < nl > import im . actor . core . AuthState ; < nl > + import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . runtime . android . view . BindedViewHolder ; < nl > import im . actor . sdk . controllers . activity . ActorMainActivity ; < nl > import im . actor . sdk . controllers . activity . controllers . MainPhoneController ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessageHolder ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; < nl > import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; < nl > import im . actor . sdk . controllers . fragment . settings . ActorSettingsCategory ; < nl > import im . actor . sdk . intents . ActorIntent ; < nl > @ @ - 95 , 4 + 99 , 6 @ @ public interface ActorSDKDelegate { < nl > < nl > @ Deprecated < nl > ActorSettingsCategory [ ] getAfterSettingsCategories ( ) ; < nl > + < nl > + MessageHolder getCustomMessageViewHolder ( Class < AbsContent > content , MessagesAdapter messagesAdapter , ViewGroup viewGroup ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java < nl > index 1360c6d . . 75680fe 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java < nl > @ @ - 2 , 11 + 2 , 15 @ @ package im . actor . sdk ; < nl > < nl > import android . content . Context ; < nl > import android . view . View ; < nl > + import android . view . ViewGroup ; < nl > < nl > import im . actor . core . AuthState ; < nl > + import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . runtime . android . view . BindedViewHolder ; < nl > import im . actor . sdk . controllers . activity . ActorMainActivity ; < nl > import im . actor . sdk . controllers . activity . controllers . MainPhoneController ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessageHolder ; < nl > + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; < nl > import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; < nl > import im . actor . sdk . controllers . fragment . auth . SignPhoneFragment ; < nl > import im . actor . sdk . controllers . fragment . settings . ActorSettingsCategory ; < nl > @ @ - 141 , 5 + 145 , 10 @ @ public class BaseActorSDKDelegate implements ActorSDKDelegate { < nl > return null ; < nl > } < nl > < nl > + @ Override < nl > + public MessageHolder getCustomMessageViewHolder ( Class < AbsContent > content , MessagesAdapter messagesAdapter , ViewGroup viewGroup ) { < nl > + return null ; < nl > + } < nl > + < nl > < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java < nl > index 0602ada . . 486ab94 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java < nl > @ @ - 10 , 6 + 10 , 7 @ @ import java . util . HashMap ; < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . entity . content . ContactContent ; < nl > + import im . actor . core . entity . content . ContentConverter ; < nl > import im . actor . core . entity . content . DocumentContent ; < nl > import im . actor . core . entity . content . LocationContent ; < nl > import im . actor . core . entity . content . PhotoContent ; < nl > @ @ - 18 , 6 + 19 , 7 @ @ import im . actor . core . entity . content . StickerContent ; < nl > import im . actor . core . entity . content . TextContent ; < nl > import im . actor . core . entity . content . VideoContent ; < nl > import im . actor . core . entity . content . VoiceContent ; < nl > + import im . actor . runtime . actors . Actor ; < nl > import im . actor . runtime . generic . mvvm . BindedDisplayList ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . R ; < nl > @ @ - 81 , 6 + 83 , 12 @ @ public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { < nl > @ Override < nl > public int getItemViewType ( int position ) { < nl > AbsContent content = getItem ( position ) . getContent ( ) ; < nl > + for ( int i = 0 ; i < AbsContent . getConverters ( ) . length ; i + + ) { < nl > + ContentConverter converter = AbsContent . getConverters ( ) [ i ] ; < nl > + if ( content . getClass ( ) . isAssignableFrom ( converter . destinationType ( ) ) ) { < nl > + return 8 + i ; < nl > + } < nl > + } < nl > if ( content instanceof TextContent ) { < nl > return 0 ; < nl > } else if ( content instanceof ServiceContent ) { < nl > @ @ - 99 , 9 + 107 , 8 @ @ public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { < nl > return 6 ; < nl > } else if ( content instanceof StickerContent ) { < nl > return 7 ; < nl > - } else { < nl > - return 8 ; < nl > } < nl > + return - 1 ; < nl > } < nl > < nl > protected View inflate ( int id , ViewGroup viewGroup ) { < nl > @ @ - 170 , 7 + 177 , 12 @ @ public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { < nl > } < nl > } , MessagesAdapter . this , inflate ( R . layout . adapter _ dialog _ sticker , viewGroup ) ) ; < nl > default : < nl > - return new UnsupportedHolder ( MessagesAdapter . this , inflate ( R . layout . adapter _ dialog _ text , viewGroup ) ) ; < nl > + return ActorSDK . sharedActor ( ) . getDelegatedMessageViewHolder ( AbsContent . getConverters ( ) [ viewType - 8 ] . destinationType ( ) , new ActorSDK . OnDelegateViewHolder < MessageHolder > ( ) { < nl > + @ Override < nl > + public MessageHolder onNotDelegated ( ) { < nl > + return new UnsupportedHolder ( MessagesAdapter . this , inflate ( R . layout . adapter _ dialog _ text , viewGroup ) ) ; < nl > + } < nl > + } , MessagesAdapter . this , viewGroup ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > index da3d7f3 . . 861c52a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java < nl > @ @ - 191 , 4 + 191 , 8 @ @ public abstract class AbsContent { < nl > < nl > public void onIncoming ( Peer peer , ModuleContext context ) { < nl > } < nl > + < nl > + public static ContentConverter [ ] getConverters ( ) { < nl > + return converters ; < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ContentConverter . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ContentConverter . java < nl > index fe2bfe8 . . 26614b4 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ContentConverter . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ContentConverter . java < nl > @ @ - 4 , 4 + 4 , 6 @ @ import im . actor . core . entity . content . internal . AbsContentContainer ; < nl > < nl > public interface ContentConverter { < nl > AbsContent convert ( AbsContentContainer container ) ; < nl > + < nl > + Class destinationType ( ) ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 index c853f65 . . f21c2f1 100644 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 @ @ - 1 , 5 + 1 , 10 @ @ 
 package im . actor ; 
 
 + import android . content . Intent ; 
 + import android . graphics . Color ; 
 + import android . graphics . PorterDuff ; 
 + import android . graphics . PorterDuffColorFilter ; 
 + import android . net . Uri ; 
 import android . os . Bundle ; 
 import android . support . multidex . MultiDex ; 
 import android . support . v4 . app . Fragment ; 
 @ @ - 7 , 6 + 12 , 7 @ @ import android . support . v7 . app . ActionBar ; 
 import android . view . LayoutInflater ; 
 import android . view . View ; 
 import android . view . ViewGroup ; 
 + import android . widget . Button ; 
 import android . widget . CheckBox ; 
 import android . widget . Toast ; 
 
 @ @ - 15 , 9 + 21 , 14 @ @ import org . jetbrains . annotations . Nullable ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 
 + import im . actor . core . entity . Message ; 
 import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . content . JsonContent ; 
 + import im . actor . core . entity . content . PhotoContent ; 
 import im . actor . develop . R ; 
 import im . actor . holders . BubbleTextHolderLayouter ; 
 + import im . actor . runtime . json . JSONException ; 
 + import im . actor . runtime . json . JSONObject ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . ActorSDKApplication ; 
 import im . actor . sdk . ActorStyle ; 
 @ @ - 26 , 6 + 37 , 11 @ @ import im . actor . sdk . controllers . conversation . attach . ShareMenuField ; 
 import im . actor . sdk . controllers . conversation . attach . AbsAttachFragment ; 
 import im . actor . sdk . controllers . conversation . attach . AttachFragment ; 
 import im . actor . sdk . controllers . conversation . messages . BubbleLayouter ; 
 + import im . actor . sdk . controllers . conversation . messages . JsonXmlBubbleLayouter ; 
 + import im . actor . sdk . controllers . conversation . messages . XmlBubbleLayouter ; 
 + import im . actor . sdk . controllers . conversation . messages . content . PhotoHolder ; 
 + import im . actor . sdk . controllers . conversation . messages . content . TextHolder ; 
 + import im . actor . sdk . controllers . conversation . messages . content . preprocessor . PreprocessedData ; 
 import im . actor . sdk . controllers . root . RootFragment ; 
 import im . actor . sdk . controllers . settings . ActorSettingsCategories ; 
 import im . actor . sdk . controllers . settings . ActorSettingsCategory ; 
 @ @ - 92 , 7 + 108 , 29 @ @ public class Application extends ActorSDKApplication { 
 
 @ Override 
 public void configureChatViewHolders ( ArrayList < BubbleLayouter > layouters ) { 
 - layouters . add ( 0 , new BubbleTextHolderLayouter ( ) ) ; 
 + / / layouters . add ( 0 , new BubbleTextHolderLayouter ( ) ) ; 
 + layouters . add ( 0 , new XmlBubbleLayouter ( content - > content instanceof PhotoContent , R . layout . adapter _ dialog _ photo , ( adapter1 , root1 , peer1 ) - > new PhotoHolder ( adapter1 , root1 , peer1 ) { 
 + @ Override 
 + protected void onConfigureViewHolder ( ) { 
 + previewView . setColorFilter ( ActorStyle . adjustColorAlpha ( Color . CYAN , 20 ) , PorterDuff . Mode . ADD ) ; 
 + } 
 + } ) ) ; 
 + layouters . add ( 0 , new JsonXmlBubbleLayouter ( null , R . layout . adapter _ dialog _ text , ( adapter , root , peer ) - > new TextHolder ( adapter , root , peer ) { 
 + @ Override 
 + protected void bindData ( Message message , long readDate , long receiveDate , boolean isUpdated , PreprocessedData preprocessedData ) { 
 + String jsonString = " can ' t read json " ; 
 + try { 
 + JSONObject jsonObject = new JSONObject ( ( ( JsonContent ) message . getContent ( ) ) . getRawJson ( ) ) ; 
 + String dataType = jsonObject . getString ( " dataType " ) ; 
 + JSONObject data = jsonObject . getJSONObject ( " data " ) ; 
 + jsonString = dataType + " \ n \ n " ; 
 + jsonString + = data . toString ( 3 ) ; 
 + } catch ( JSONException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + bindRawText ( jsonString , readDate , receiveDate , reactions , message , false ) ; 
 + } 
 + } ) ) ; 
 } 
 
 @ Nullable 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java 
 index 95a729f . . fac4075 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java 
 @ @ - 924 , 6 + 924 , 10 @ @ public class ActorStyle { 
 return Color . argb ( Color . alpha ( color ) , ( int ) Math . round ( Color . red ( color ) * percent ) , ( int ) Math . round ( Color . green ( color ) * percent ) , ( int ) Math . round ( Color . blue ( color ) * percent ) ) ; 
 } 
 
 + public static int adjustColorAlpha ( int color , int alpha ) { 
 + return ( alpha < < 24 ) | ( color & 0x00ffffff ) ; 
 + } 
 + 
 / * * 
 * Get color with fallback to default - if color is 0 , returns fallback color 
 * 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / JsonBubbleLayouter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / JsonBubbleLayouter . java 
 new file mode 100644 
 index 0000000 . . 7b33e0b 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / JsonBubbleLayouter . java 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + package im . actor . sdk . controllers . conversation . messages ; 
 + 
 + import android . view . ViewGroup ; 
 + 
 + import org . jetbrains . annotations . NotNull ; 
 + 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . content . AbsContent ; 
 + import im . actor . core . entity . content . JsonContent ; 
 + import im . actor . runtime . json . JSONException ; 
 + import im . actor . runtime . json . JSONObject ; 
 + import im . actor . sdk . controllers . conversation . messages . content . AbsMessageViewHolder ; 
 + 
 + public class JsonBubbleLayouter extends LambdaBubbleLayouter { 
 + 
 + 
 + public JsonBubbleLayouter ( String dataType , @ NotNull LambdaBubbleLayouter . ViewHolderCreator creator ) { 
 + super ( content - > 
 + { 
 + if ( content instanceof JsonContent ) { 
 + if ( dataType = = null ) { 
 + return true ; 
 + } 
 + try { 
 + return dataType . equals ( new JSONObject ( ( ( JsonContent ) content ) . getRawJson ( ) ) . getString ( " dataType " ) ) ; 
 + } catch ( JSONException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + return false ; 
 + } , creator ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isMatch ( AbsContent content ) { 
 + return matcher . isMatch ( content ) ; 
 + } 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / JsonXmlBubbleLayouter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / JsonXmlBubbleLayouter . java 
 new file mode 100644 
 index 0000000 . . 3e068d9 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / JsonXmlBubbleLayouter . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package im . actor . sdk . controllers . conversation . messages ; 
 + 
 + import android . support . annotation . LayoutRes ; 
 + import android . view . ViewGroup ; 
 + 
 + import org . jetbrains . annotations . NotNull ; 
 + 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . content . AbsContent ; 
 + import im . actor . core . entity . content . JsonContent ; 
 + import im . actor . runtime . json . JSONException ; 
 + import im . actor . runtime . json . JSONObject ; 
 + import im . actor . sdk . controllers . conversation . messages . content . AbsMessageViewHolder ; 
 + import im . actor . sdk . controllers . conversation . view . BubbleContainer ; 
 + import im . actor . sdk . util . ViewUtils ; 
 + 
 + public class JsonXmlBubbleLayouter extends JsonBubbleLayouter { 
 + 
 + private int id ; 
 + 
 + public JsonXmlBubbleLayouter ( String dataType , @ LayoutRes int id , @ NotNull ViewHolderCreator creator ) { 
 + super ( dataType , creator ) ; 
 + this . id = id ; 
 + } 
 + 
 + @ Override 
 + public AbsMessageViewHolder onCreateViewHolder ( MessagesAdapter adapter , ViewGroup root , Peer peer ) { 
 + return creator . onCreateViewHolder ( adapter , ( ViewGroup ) ViewUtils . inflate ( id , root ) , peer ) ; 
 + } 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / LambdaBubbleLayouter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / LambdaBubbleLayouter . java 
 new file mode 100644 
 index 0000000 . . c9266db 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / LambdaBubbleLayouter . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package im . actor . sdk . controllers . conversation . messages ; 
 + 
 + import android . view . ViewGroup ; 
 + 
 + import org . jetbrains . annotations . NotNull ; 
 + 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . content . AbsContent ; 
 + import im . actor . sdk . controllers . conversation . messages . content . AbsMessageViewHolder ; 
 + 
 + public class LambdaBubbleLayouter implements BubbleLayouter { 
 + protected Matcher matcher ; 
 + protected ViewHolderCreator creator ; 
 + 
 + public LambdaBubbleLayouter ( @ NotNull Matcher matcher , @ NotNull ViewHolderCreator creator ) { 
 + this . matcher = matcher ; 
 + this . creator = creator ; 
 + } 
 + 
 + @ Override 
 + public boolean isMatch ( AbsContent content ) { 
 + return matcher . isMatch ( content ) ; 
 + } 
 + 
 + @ Override 
 + public AbsMessageViewHolder onCreateViewHolder ( MessagesAdapter adapter , ViewGroup root , Peer peer ) { 
 + return creator . onCreateViewHolder ( adapter , root , peer ) ; 
 + } 
 + 
 + public interface Matcher { 
 + boolean isMatch ( AbsContent content ) ; 
 + } 
 + 
 + public interface ViewHolderCreator { 
 + AbsMessageViewHolder onCreateViewHolder ( MessagesAdapter adapter , ViewGroup root , Peer peer ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java 
 index cf56806 . . e70148f 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java 
 @ @ - 69 , 25 + 69 , 27 @ @ public class MessagesAdapter extends BindedListAdapter < Message , AbsMessageViewHo 
 
 static { 
 holderMap = new ArrayList < > ( ) ; 
 - holderMap . add ( new HolderMapEntry ( TextContent . class , TEXT _ CONTENT ) ) ; 
 - holderMap . add ( new HolderMapEntry ( ServiceContent . class , SERVICE _ CONTENT ) ) ; 
 - holderMap . add ( new HolderMapEntry ( PhotoContent . class , PHOTO _ CONTENT ) ) ; 
 - holderMap . add ( new HolderMapEntry ( VideoContent . class , PHOTO _ CONTENT ) ) ; 
 - holderMap . add ( new HolderMapEntry ( AnimationContent . class , PHOTO _ CONTENT ) ) ; 
 - holderMap . add ( new HolderMapEntry ( VoiceContent . class , VOICE _ CONTENT ) ) ; 
 - holderMap . add ( new HolderMapEntry ( DocumentContent . class , DOCUMENT _ CONTENT ) ) ; 
 - holderMap . add ( new HolderMapEntry ( ContactContent . class , CONTACT _ CONTENT ) ) ; 
 - holderMap . add ( new HolderMapEntry ( LocationContent . class , LOCATION _ CONTENT ) ) ; 
 - holderMap . add ( new HolderMapEntry ( StickerContent . class , STICKER _ CONTENT ) ) ; 
 + holderMap . add ( new HolderMapEntry ( TextContent . class , TEXT _ CONTENT , R . layout . adapter _ dialog _ text ) ) ; 
 + holderMap . add ( new HolderMapEntry ( ServiceContent . class , SERVICE _ CONTENT , R . layout . adapter _ dialog _ service ) ) ; 
 + holderMap . add ( new HolderMapEntry ( PhotoContent . class , PHOTO _ CONTENT , R . layout . adapter _ dialog _ photo ) ) ; 
 + holderMap . add ( new HolderMapEntry ( VideoContent . class , PHOTO _ CONTENT , R . layout . adapter _ dialog _ photo ) ) ; 
 + holderMap . add ( new HolderMapEntry ( AnimationContent . class , PHOTO _ CONTENT , R . layout . adapter _ dialog _ photo ) ) ; 
 + holderMap . add ( new HolderMapEntry ( VoiceContent . class , R . layout . adapter _ dialog _ audio , VOICE _ CONTENT ) ) ; 
 + holderMap . add ( new HolderMapEntry ( DocumentContent . class , R . layout . adapter _ dialog _ doc , DOCUMENT _ CONTENT ) ) ; 
 + holderMap . add ( new HolderMapEntry ( ContactContent . class , R . layout . adapter _ dialog _ contact , CONTACT _ CONTENT ) ) ; 
 + holderMap . add ( new HolderMapEntry ( LocationContent . class , R . layout . adapter _ dialog _ locaton , LOCATION _ CONTENT ) ) ; 
 + holderMap . add ( new HolderMapEntry ( StickerContent . class , R . layout . adapter _ dialog _ sticker , STICKER _ CONTENT ) ) ; 
 } 
 
 private static class HolderMapEntry { 
 Class aClass ; 
 int id ; 
 + int layoutId ; 
 
 - public HolderMapEntry ( Class aClass , int id ) { 
 + public HolderMapEntry ( Class aClass , int id , int layoutId ) { 
 this . aClass = aClass ; 
 this . id = id ; 
 + this . layoutId = layoutId ; 
 } 
 
 public Class getaClass ( ) { 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / XmlBubbleLayouter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / XmlBubbleLayouter . java 
 new file mode 100644 
 index 0000000 . . 45a8411 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / XmlBubbleLayouter . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + package im . actor . sdk . controllers . conversation . messages ; 
 + 
 + import android . support . annotation . LayoutRes ; 
 + import android . view . ViewGroup ; 
 + 
 + import org . jetbrains . annotations . NotNull ; 
 + 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . sdk . controllers . conversation . messages . content . AbsMessageViewHolder ; 
 + import im . actor . sdk . util . ViewUtils ; 
 + 
 + public class XmlBubbleLayouter extends LambdaBubbleLayouter { 
 + 
 + private int id ; 
 + 
 + public XmlBubbleLayouter ( @ NotNull Matcher matcher , @ LayoutRes int id , @ NotNull ViewHolderCreator creator ) { 
 + super ( matcher , creator ) ; 
 + this . id = id ; 
 + } 
 + 
 + @ Override 
 + public AbsMessageViewHolder onCreateViewHolder ( MessagesAdapter adapter , ViewGroup root , Peer peer ) { 
 + return creator . onCreateViewHolder ( adapter , ( ViewGroup ) ViewUtils . inflate ( id , root ) , peer ) ; 
 + } 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ViewUtils . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ViewUtils . java 
 index db4a143 . . f7bd2f2 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ViewUtils . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / util / ViewUtils . java 
 @ @ - 21 , 9 + 21 , 13 @ @ public class ViewUtils { 
 } 
 
 public static View inflate ( @ LayoutRes int id , ViewGroup viewGroup ) { 
 + return inflate ( id , viewGroup , false ) ; 
 + } 
 + 
 + public static View inflate ( @ LayoutRes int id , ViewGroup viewGroup , boolean attach ) { 
 return LayoutInflater 
 . from ( viewGroup . getContext ( ) ) 
 - . inflate ( id , viewGroup , false ) ; 
 + . inflate ( id , viewGroup , attach ) ; 
 } 
 
 public static void goneView ( final View view , boolean isAnimated , boolean isSlow ) {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 index ddc22a6 . . 56b5963 100644 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 @ @ - 1 , 13 + 1 , 24 @ @ 
 package im . actor ; 
 
 import android . graphics . Color ; 
 + import android . view . LayoutInflater ; 
 import android . view . View ; 
 + import android . view . ViewGroup ; 
 import android . widget . CheckBox ; 
 
 + import im . actor . core . api . ApiMessage ; 
 + import im . actor . core . api . ApiTextMessage ; 
 + import im . actor . core . entity . content . AbsContent ; 
 + import im . actor . core . entity . content . ContentConverter ; 
 + import im . actor . core . entity . content . TextContent ; 
 + import im . actor . core . entity . content . internal . AbsContentContainer ; 
 + import im . actor . core . entity . content . internal . ContentRemoteContainer ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . ActorSDKApplication ; 
 import im . actor . sdk . ActorStyle ; 
 import im . actor . sdk . BaseActorSDKDelegate ; 
 + import im . actor . sdk . controllers . conversation . messages . MessageHolder ; 
 + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; 
 import im . actor . sdk . controllers . fragment . settings . ActorSettingsCategory ; 
 import im . actor . sdk . controllers . fragment . settings . ActorSettingsField ; 
 import im . actor . sdk . controllers . fragment . settings . BaseActorSettingsActivity ; 
 @ @ - 27 , 11 + 38 , 46 @ @ public class Application extends ActorSDKApplication { 
 
 ActorStyle style = ActorSDK . sharedActor ( ) . style ; 
 style . setMainColor ( Color . parseColor ( " # 529a88 " ) ) ; 
 + AbsContent . registerConverter ( new ContentConverter ( ) { 
 + @ Override 
 + public AbsContent convert ( AbsContentContainer container ) { 
 + if ( container instanceof ContentRemoteContainer ) { 
 + ApiMessage msg = ( ( ContentRemoteContainer ) container ) . getMessage ( ) ; 
 + if ( msg instanceof ApiTextMessage ) { 
 + return new TextContent ( ( ContentRemoteContainer ) container ) ; 
 + } 
 + } 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public Class destinationType ( ) { 
 + return TextExContent . class ; 
 + } 
 + } ) ; 
 + } 
 + 
 + public class TextExContent extends TextContent { 
 + 
 + public TextExContent ( ContentRemoteContainer remoteContainer ) { 
 + super ( remoteContainer ) ; 
 + } 
 } 
 
 private class ActorSDKDelegate extends BaseActorSDKDelegate { 
 
 @ Override 
 + public MessageHolder getCustomMessageViewHolder ( Class < AbsContent > content , MessagesAdapter messagesAdapter , ViewGroup viewGroup ) { 
 + if ( content . isAssignableFrom ( TextExContent . class ) ) { 
 + return new TextExHolder ( messagesAdapter , LayoutInflater 
 + . from ( viewGroup . getContext ( ) ) 
 + . inflate ( R . layout . adapter _ dialog _ text , viewGroup , false ) ) ; 
 + } else { 
 + return null ; 
 + } 
 + } 
 + 
 + @ Override 
 public ActorIntentFragmentActivity getSettingsIntent ( ) { 
 return new BaseActorSettingsActivity ( ) { 
 @ Override 
 diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TextExHolder . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TextExHolder . java 
 new file mode 100644 
 index 0000000 . . ab2ccf6 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / TextExHolder . java 
 @ @ - 0 , 0 + 1 , 151 @ @ 
 + package im . actor ; 
 + 
 + import android . graphics . Color ; 
 + import android . text . Spannable ; 
 + import android . text . method . LinkMovementMethod ; 
 + import android . view . MotionEvent ; 
 + import android . view . View ; 
 + import android . view . ViewGroup ; 
 + import android . widget . FrameLayout ; 
 + import android . widget . TextView ; 
 + 
 + import java . util . Random ; 
 + 
 + import im . actor . core . entity . Message ; 
 + import im . actor . sdk . ActorSDK ; 
 + import im . actor . sdk . R ; 
 + import im . actor . sdk . controllers . conversation . messages . MessageHolder ; 
 + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; 
 + import im . actor . sdk . controllers . conversation . messages . PreprocessedData ; 
 + import im . actor . sdk . controllers . conversation . messages . PreprocessedTextData ; 
 + import im . actor . sdk . util . Fonts ; 
 + import im . actor . sdk . view . TintImageView ; 
 + 
 + import static im . actor . sdk . util . ActorSDKMessenger . myUid ; 
 + 
 + public class TextExHolder extends MessageHolder { 
 + 
 + protected ViewGroup mainContainer ; 
 + protected FrameLayout messageBubble ; 
 + protected TextView text ; 
 + protected TextView time ; 
 + protected TintImageView status ; 
 + 
 + private int waitColor ; 
 + private int sentColor ; 
 + private int deliveredColor ; 
 + private int readColor ; 
 + private int errorColor ; 
 + 
 + public TextExHolder ( MessagesAdapter fragment , final View itemView ) { 
 + super ( fragment , itemView , false ) ; 
 + 
 + mainContainer = ( ViewGroup ) itemView . findViewById ( R . id . mainContainer ) ; 
 + messageBubble = ( FrameLayout ) itemView . findViewById ( R . id . fl _ bubble ) ; 
 + text = ( TextView ) itemView . findViewById ( R . id . tv _ text ) ; 
 + text . setTextColor ( ActorSDK . sharedActor ( ) . style . getConvTextColor ( ) ) ; 
 + text . setTypeface ( Fonts . regular ( ) ) ; 
 + 
 + time = ( TextView ) itemView . findViewById ( R . id . tv _ time ) ; 
 + ActorSDK . sharedActor ( ) . style . getConvTimeColor ( ) ; 
 + time . setTypeface ( Fonts . regular ( ) ) ; 
 + time . setTextColor ( ActorSDK . sharedActor ( ) . style . getConvTimeColor ( ) ) ; 
 + status = ( TintImageView ) itemView . findViewById ( R . id . stateIcon ) ; 
 + 
 + waitColor = ActorSDK . sharedActor ( ) . style . getConvStatePendingColor ( ) ; 
 + sentColor = ActorSDK . sharedActor ( ) . style . getConvStateSentColor ( ) ; 
 + deliveredColor = ActorSDK . sharedActor ( ) . style . getConvStateDeliveredColor ( ) ; 
 + readColor = ActorSDK . sharedActor ( ) . style . getConvStateReadColor ( ) ; 
 + errorColor = ActorSDK . sharedActor ( ) . style . getConvStateErrorColor ( ) ; 
 + 
 + onConfigureViewHolder ( ) ; 
 + } 
 + 
 + @ Override 
 + protected void bindData ( final Message message , boolean isUpdated , PreprocessedData preprocessedData ) { 
 + Random rnd = new Random ( ) ; 
 + int color = Color . argb ( 255 , rnd . nextInt ( 256 ) , rnd . nextInt ( 256 ) , rnd . nextInt ( 256 ) ) ; 
 + text . setBackgroundColor ( color ) ; 
 + PreprocessedTextData textData = ( PreprocessedTextData ) preprocessedData ; 
 + Spannable reactions = preprocessedData . getReactionsSpannable ( ) ; 
 + CharSequence text ; 
 + if ( textData . getSpannableString ( ) ! = null ) { 
 + text = textData . getSpannableString ( ) ; 
 + } else { 
 + text = textData . getText ( ) ; 
 + } 
 + bindRawText ( text , reactions , message , false ) ; 
 + } 
 + 
 + public void bindRawText ( CharSequence rawText , Spannable reactions , Message message , boolean isItalic ) { 
 + if ( message . getSenderId ( ) = = myUid ( ) ) { 
 + messageBubble . setBackgroundResource ( R . drawable . bubble _ text _ out ) ; 
 + } else { 
 + messageBubble . setBackgroundResource ( R . drawable . bubble _ text _ in ) ; 
 + } 
 + 
 + if ( isItalic ) { 
 + text . setTypeface ( Fonts . italic ( ) ) ; 
 + } else { 
 + text . setTypeface ( Fonts . regular ( ) ) ; 
 + } 
 + 
 + text . setText ( rawText ) ; 
 + 
 + / / Fixing url long tap 
 + text . setMovementMethod ( new CustomLinkMovementMethod ( ) ) ; 
 + 
 + / / Fixing span offsets 
 + / / if ( rawText instanceof Spannable ) { 
 + / / Spannable s = ( Spannable ) rawText ; 
 + / / QuoteSpan [ ] qSpans = s . getSpans ( 0 , s . length ( ) , QuoteSpan . class ) ; 
 + / / text . setMinimumWidth ( 0 ) ; 
 + / / if ( qSpans . length > 0 ) { 
 + / / text . measure ( 0 , 0 ) ; 
 + / / text . setMinimumWidth ( text . getMeasuredWidth ( ) + qSpans [ 0 ] . getLeadingMargin ( true ) ) ; 
 + / / } 
 + / / } 
 + 
 + if ( message . getSenderId ( ) = = myUid ( ) ) { 
 + status . setVisibility ( View . VISIBLE ) ; 
 + 
 + switch ( message . getMessageState ( ) ) { 
 + case SENT : 
 + status . setResource ( R . drawable . msg _ check _ 1 ) ; 
 + status . setTint ( sentColor ) ; 
 + break ; 
 + case RECEIVED : 
 + status . setResource ( R . drawable . msg _ check _ 2 ) ; 
 + status . setTint ( deliveredColor ) ; 
 + break ; 
 + case READ : 
 + status . setResource ( R . drawable . msg _ check _ 2 ) ; 
 + status . setTint ( readColor ) ; 
 + break ; 
 + default : 
 + case PENDING : 
 + status . setResource ( R . drawable . msg _ clock ) ; 
 + status . setTint ( waitColor ) ; 
 + break ; 
 + case ERROR : 
 + status . setResource ( R . drawable . msg _ error ) ; 
 + status . setTint ( errorColor ) ; 
 + break ; 
 + } 
 + } else { 
 + status . setVisibility ( View . GONE ) ; 
 + } 
 + 
 + setTimeAndReactions ( time ) ; 
 + } 
 + 
 + class CustomLinkMovementMethod extends LinkMovementMethod { 
 + 
 + @ Override 
 + public boolean onTouchEvent ( TextView textView , Spannable spannable , MotionEvent event ) { 
 + super . onTouchEvent ( textView , spannable , event ) ; 
 + mainContainer . onTouchEvent ( event ) ; 
 + return true ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 index a2a54c2 . . 3c7b187 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 @ @ - 8 , 6 + 8 , 8 @ @ import android . content . Context ; 
 import android . content . Intent ; 
 import android . os . Build ; 
 import android . os . Bundle ; 
 + import android . view . View ; 
 + import android . view . ViewGroup ; 
 
 import com . facebook . drawee . backends . pipeline . Fresco ; 
 
 @ @ - 23 , 9 + 25 , 12 @ @ import im . actor . core . ApiConfiguration ; 
 import im . actor . core . ConfigurationBuilder ; 
 import im . actor . core . DeviceCategory ; 
 import im . actor . core . PlatformType ; 
 + import im . actor . core . entity . content . AbsContent ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . android . view . BindedViewHolder ; 
 import im . actor . sdk . controllers . activity . ActorMainActivity ; 
 + import im . actor . sdk . controllers . conversation . messages . MessageHolder ; 
 + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; 
 import im . actor . sdk . controllers . fragment . auth . AuthActivity ; 
 import im . actor . sdk . controllers . fragment . dialogs . DialogHolder ; 
 import im . actor . sdk . controllers . fragment . settings . MyProfileActivity ; 
 @ @ - 448 , 9 + 453 , 24 @ @ public class ActorSDK { 
 } 
 } 
 
 + public MessageHolder getDelegatedMessageViewHolder ( Class < AbsContent > base , OnDelegateViewHolder < MessageHolder > callback , MessagesAdapter messagesAdapter , ViewGroup viewGroup ) { 
 + MessageHolder delegated = delegate . getCustomMessageViewHolder ( base , messagesAdapter , viewGroup ) ; 
 + if ( delegated ! = null ) { 
 + return delegated ; 
 + } else { 
 + return callback . onNotDelegated ( ) ; 
 + } 
 + } 
 + 
 public interface OnDelegateViewHolder < T > { 
 T onNotDelegated ( ) ; 
 
 } 
 
 + public interface OnDeligateMessageHolder { 
 + MessageHolder onNotDelegated ( ) ; 
 + 
 + View getItemView ( ) ; 
 + } 
 + 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java 
 index cf595a6 . . 849fa08 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKDelegate . java 
 @ @ - 2 , 11 + 2 , 15 @ @ package im . actor . sdk ; 
 
 import android . content . Context ; 
 import android . view . View ; 
 + import android . view . ViewGroup ; 
 
 import im . actor . core . AuthState ; 
 + import im . actor . core . entity . content . AbsContent ; 
 import im . actor . runtime . android . view . BindedViewHolder ; 
 import im . actor . sdk . controllers . activity . ActorMainActivity ; 
 import im . actor . sdk . controllers . activity . controllers . MainPhoneController ; 
 + import im . actor . sdk . controllers . conversation . messages . MessageHolder ; 
 + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; 
 import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; 
 import im . actor . sdk . controllers . fragment . settings . ActorSettingsCategory ; 
 import im . actor . sdk . intents . ActorIntent ; 
 @ @ - 95 , 4 + 99 , 6 @ @ public interface ActorSDKDelegate { 
 
 @ Deprecated 
 ActorSettingsCategory [ ] getAfterSettingsCategories ( ) ; 
 + 
 + MessageHolder getCustomMessageViewHolder ( Class < AbsContent > content , MessagesAdapter messagesAdapter , ViewGroup viewGroup ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java 
 index 1360c6d . . 75680fe 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java 
 @ @ - 2 , 11 + 2 , 15 @ @ package im . actor . sdk ; 
 
 import android . content . Context ; 
 import android . view . View ; 
 + import android . view . ViewGroup ; 
 
 import im . actor . core . AuthState ; 
 + import im . actor . core . entity . content . AbsContent ; 
 import im . actor . runtime . android . view . BindedViewHolder ; 
 import im . actor . sdk . controllers . activity . ActorMainActivity ; 
 import im . actor . sdk . controllers . activity . controllers . MainPhoneController ; 
 + import im . actor . sdk . controllers . conversation . messages . MessageHolder ; 
 + import im . actor . sdk . controllers . conversation . messages . MessagesAdapter ; 
 import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; 
 import im . actor . sdk . controllers . fragment . auth . SignPhoneFragment ; 
 import im . actor . sdk . controllers . fragment . settings . ActorSettingsCategory ; 
 @ @ - 141 , 5 + 145 , 10 @ @ public class BaseActorSDKDelegate implements ActorSDKDelegate { 
 return null ; 
 } 
 
 + @ Override 
 + public MessageHolder getCustomMessageViewHolder ( Class < AbsContent > content , MessagesAdapter messagesAdapter , ViewGroup viewGroup ) { 
 + return null ; 
 + } 
 + 
 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java 
 index 0602ada . . 486ab94 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / messages / MessagesAdapter . java 
 @ @ - 10 , 6 + 10 , 7 @ @ import java . util . HashMap ; 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . entity . content . ContactContent ; 
 + import im . actor . core . entity . content . ContentConverter ; 
 import im . actor . core . entity . content . DocumentContent ; 
 import im . actor . core . entity . content . LocationContent ; 
 import im . actor . core . entity . content . PhotoContent ; 
 @ @ - 18 , 6 + 19 , 7 @ @ import im . actor . core . entity . content . StickerContent ; 
 import im . actor . core . entity . content . TextContent ; 
 import im . actor . core . entity . content . VideoContent ; 
 import im . actor . core . entity . content . VoiceContent ; 
 + import im . actor . runtime . actors . Actor ; 
 import im . actor . runtime . generic . mvvm . BindedDisplayList ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . R ; 
 @ @ - 81 , 6 + 83 , 12 @ @ public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { 
 @ Override 
 public int getItemViewType ( int position ) { 
 AbsContent content = getItem ( position ) . getContent ( ) ; 
 + for ( int i = 0 ; i < AbsContent . getConverters ( ) . length ; i + + ) { 
 + ContentConverter converter = AbsContent . getConverters ( ) [ i ] ; 
 + if ( content . getClass ( ) . isAssignableFrom ( converter . destinationType ( ) ) ) { 
 + return 8 + i ; 
 + } 
 + } 
 if ( content instanceof TextContent ) { 
 return 0 ; 
 } else if ( content instanceof ServiceContent ) { 
 @ @ - 99 , 9 + 107 , 8 @ @ public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { 
 return 6 ; 
 } else if ( content instanceof StickerContent ) { 
 return 7 ; 
 - } else { 
 - return 8 ; 
 } 
 + return - 1 ; 
 } 
 
 protected View inflate ( int id , ViewGroup viewGroup ) { 
 @ @ - 170 , 7 + 177 , 12 @ @ public class MessagesAdapter extends BindedListAdapter < Message , MessageHolder > { 
 } 
 } , MessagesAdapter . this , inflate ( R . layout . adapter _ dialog _ sticker , viewGroup ) ) ; 
 default : 
 - return new UnsupportedHolder ( MessagesAdapter . this , inflate ( R . layout . adapter _ dialog _ text , viewGroup ) ) ; 
 + return ActorSDK . sharedActor ( ) . getDelegatedMessageViewHolder ( AbsContent . getConverters ( ) [ viewType - 8 ] . destinationType ( ) , new ActorSDK . OnDelegateViewHolder < MessageHolder > ( ) { 
 + @ Override 
 + public MessageHolder onNotDelegated ( ) { 
 + return new UnsupportedHolder ( MessagesAdapter . this , inflate ( R . layout . adapter _ dialog _ text , viewGroup ) ) ; 
 + } 
 + } , MessagesAdapter . this , viewGroup ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 index da3d7f3 . . 861c52a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / AbsContent . java 
 @ @ - 191 , 4 + 191 , 8 @ @ public abstract class AbsContent { 
 
 public void onIncoming ( Peer peer , ModuleContext context ) { 
 } 
 + 
 + public static ContentConverter [ ] getConverters ( ) { 
 + return converters ; 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ContentConverter . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ContentConverter . java 
 index fe2bfe8 . . 26614b4 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ContentConverter . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / content / ContentConverter . java 
 @ @ - 4 , 4 + 4 , 6 @ @ import im . actor . core . entity . content . internal . AbsContentContainer ; 
 
 public interface ContentConverter { 
 AbsContent convert ( AbsContentContainer container ) ; 
 + 
 + Class destinationType ( ) ; 
 }
