BLEU SCORE: 0.19640732545025652

TEST MSG: feat ( core + js ) : Handling call ending
GENERATED MSG: feat ( js ) : Implemented Streaming API binding

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > index df27754 . . d98cea0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java < nl > @ @ - 18 , 7 + 18 , 7 @ @ import im . actor . core . js . providers . webrtc . JsPeerConnectionListener ; < nl > import im . actor . core . js . providers . webrtc . JsRTCIceCandidate ; < nl > import im . actor . core . js . providers . webrtc . JsSessionDescription ; < nl > import im . actor . core . js . providers . webrtc . JsStreaming ; < nl > - import im . actor . core . js . providers . webrtc . JsUserMediaStream ; < nl > + import im . actor . core . js . providers . webrtc . JsMediaStream ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > import im . actor . core . webrtc . WebRTCController ; < nl > import im . actor . core . webrtc . WebRTCProvider ; < nl > @ @ - 45 , 6 + 45 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { < nl > < nl > Log . d ( TAG , " onIncomingCall " ) ; < nl > pendingCandidates = new ArrayList < > ( ) ; < nl > + isReady = false ; < nl > JsArray < JsIceServer > servers = JsArray . createArray ( ) . cast ( ) ; < nl > servers . push ( JsIceServer . create ( " stun : 62 . 4 . 22 . 219 : 3478 " ) ) ; < nl > servers . push ( JsIceServer . create ( " turn : 62 . 4 . 22 . 219 : 3478 ? transport = tcp " , " actor " , " password " ) ) ; < nl > @ @ - 57 , 25 + 58 , 22 @ @ public class JsWebRTCProvider implements WebRTCProvider { < nl > if ( candidate ! = null ) { < nl > controller . sendSignaling ( new CandidateSignal ( candidate . getId ( ) , < nl > candidate . getLabel ( ) , candidate . getSDP ( ) ) ) ; < nl > - < nl > - / / JsMessenger . getInstance ( ) . callSendSignaling ( new CandidateSignal ( candidate . getId ( ) , < nl > - / / candidate . getLabel ( ) , candidate . getSDP ( ) ) ) ; < nl > } < nl > } < nl > < nl > @ Override < nl > - public void onStreamAdded ( JsUserMediaStream stream ) { < nl > + public void onStreamAdded ( JsMediaStream stream ) { < nl > Log . d ( TAG , " onStreamAdded : " + JsonUtils . stringify ( stream ) ) ; < nl > JsAudio . playStream ( stream ) ; < nl > } < nl > } ) ; < nl > < nl > - JsStreaming . getUserAudio ( ) . then ( new Consumer < JsUserMediaStream > ( ) { < nl > + JsStreaming . getUserAudio ( ) . then ( new Consumer < JsMediaStream > ( ) { < nl > @ Override < nl > - public void apply ( JsUserMediaStream jsUserMediaStream ) { < nl > + public void apply ( JsMediaStream jsMediaStream ) { < nl > / / JsAudio . playStream ( jsUserMediaStream ) ; < nl > Log . d ( TAG , " Audio is created " ) ; < nl > - peerConnection . addStream ( jsUserMediaStream ) ; < nl > + peerConnection . addStream ( jsMediaStream ) ; < nl > } < nl > } ) . failure ( new Consumer < Exception > ( ) { < nl > @ Override < nl > @ @ - 153 , 6 + 151 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { < nl > < nl > @ Override < nl > public void onCallEnd ( ) { < nl > - < nl > + peerConnection . close ( ) ; < nl > + peerConnection = null ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsAudio . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsAudio . java < nl > index cad3256 . . aa5ecae 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsAudio . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsAudio . java < nl > @ @ - 1 , 7 + 1 , 7 @ @ < nl > package im . actor . core . js . providers . webrtc ; < nl > < nl > public class JsAudio { < nl > - public static native void playStream ( JsUserMediaStream stream ) / * - { < nl > + public static native void playStream ( JsMediaStream stream ) / * - { < nl > var audio = $ wnd . document . createElement ( ' AUDIO ' ) ; < nl > $ wnd . console . warn ( audio ) ; < nl > var url = URL . createObjectURL ( stream ) ; ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaCallback . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaCallback . java < nl > index ab2f9b9 . . 3f3582c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaCallback . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaCallback . java < nl > @ @ - 1 , 7 + 1 , 7 @ @ < nl > package im . actor . core . js . providers . webrtc ; < nl > < nl > public interface JsMediaCallback { < nl > - void onCreated ( JsUserMediaStream mediaStream ) ; < nl > + void onCreated ( JsMediaStream mediaStream ) ; < nl > < nl > void onError ( JsUserMediaError error ) ; < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaStream . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaStream . java < nl > new file mode 100644 < nl > index 0000000 . . 4282a97 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaStream . java < nl > @ @ - 0 , 0 + 1 , 9 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsMediaStream extends JavaScriptObject { < nl > + protected JsMediaStream ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java < nl > index 5f8a174 . . 4303e66 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java < nl > @ @ - 69 , 7 + 69 , 7 @ @ public class JsPeerConnection extends JavaScriptObject { < nl > } ) . done ( JsScheduller . scheduller ( ) ) ; < nl > } < nl > < nl > - public final native void addStream ( JsUserMediaStream stream ) / * - { < nl > + public final native void addStream ( JsMediaStream stream ) / * - { < nl > this . peerConnection . addStream ( stream ) ; < nl > } - * / ; < nl > < nl > @ @ - 77 , 6 + 77 , 10 @ @ public class JsPeerConnection extends JavaScriptObject { < nl > this . peerConnection . addIceCandidate ( new RTCIceCandidate ( { sdpMLineIndex : label , candidate : candidate } ) ) ; < nl > } - * / ; < nl > < nl > + public final native void close ( ) / * - { < nl > + this . peerConnection . close ( ) ; < nl > + } - * / ; < nl > + < nl > public final Promise < JsSessionDescription > createOffer ( ) { < nl > return new Promise < > ( new PromiseFunc < JsSessionDescription > ( ) { < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java < nl > index e6ede17 . . a588694 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java < nl > @ @ - 3 , 5 + 3 , 5 @ @ package im . actor . core . js . providers . webrtc ; < nl > public interface JsPeerConnectionListener { < nl > void onIceCandidate ( JsRTCIceCandidate candidate ) ; < nl > < nl > - void onStreamAdded ( JsUserMediaStream stream ) ; < nl > + void onStreamAdded ( JsMediaStream stream ) ; < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsStreaming . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsStreaming . java < nl > index 5f70b80 . . 2f5d036 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsStreaming . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsStreaming . java < nl > @ @ - 7 , 25 + 7 , 25 @ @ import im . actor . runtime . promise . PromiseResolver ; < nl > < nl > public class JsStreaming { < nl > < nl > - public static Promise < JsUserMediaStream > getUserAudio ( ) { < nl > + public static Promise < JsMediaStream > getUserAudio ( ) { < nl > return getUserMedia ( JsUserMediaConstraint . audioOnly ( ) ) ; < nl > } < nl > < nl > - public static Promise < JsUserMediaStream > getUserVideo ( ) { < nl > + public static Promise < JsMediaStream > getUserVideo ( ) { < nl > return getUserMedia ( JsUserMediaConstraint . videoOnly ( ) ) ; < nl > } < nl > < nl > - public static Promise < JsUserMediaStream > getUserAudioVideo ( ) { < nl > + public static Promise < JsMediaStream > getUserAudioVideo ( ) { < nl > return getUserMedia ( JsUserMediaConstraint . audioVideo ( ) ) ; < nl > } < nl > < nl > - public static Promise < JsUserMediaStream > getUserMedia ( final JsUserMediaConstraint constraint ) { < nl > - return new Promise < > ( new PromiseFunc < JsUserMediaStream > ( ) { < nl > + public static Promise < JsMediaStream > getUserMedia ( final JsUserMediaConstraint constraint ) { < nl > + return new Promise < > ( new PromiseFunc < JsMediaStream > ( ) { < nl > @ Override < nl > - public void exec ( final PromiseResolver < JsUserMediaStream > resolver ) { < nl > + public void exec ( final PromiseResolver < JsMediaStream > resolver ) { < nl > getUserMediaJs ( constraint , new JsMediaCallback ( ) { < nl > @ Override < nl > - public void onCreated ( JsUserMediaStream mediaStream ) { < nl > + public void onCreated ( JsMediaStream mediaStream ) { < nl > resolver . result ( mediaStream ) ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaStream . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaStream . java < nl > deleted file mode 100644 < nl > index 8737261 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaStream . java < nl > + + + / dev / null < nl > @ @ - 1 , 9 + 0 , 0 @ @ < nl > - package im . actor . core . js . providers . webrtc ; < nl > - < nl > - import com . google . gwt . core . client . JavaScriptObject ; < nl > - < nl > - public class JsUserMediaStream extends JavaScriptObject { < nl > - protected JsUserMediaStream ( ) { < nl > - < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > index 9cb2c36 . . cf9c977 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 1 , 5 + 1 , 7 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > + import java . util . HashSet ; < nl > + < nl > import im . actor . core . api . rpc . RequestCallInProgress ; < nl > import im . actor . core . api . rpc . RequestSendCallSignal ; < nl > import im . actor . core . api . rpc . RequestSubscribeToCalls ; < nl > @ @ - 29 , 6 + 31 , 7 @ @ public class CallManagerActor extends ModuleActor { < nl > private static final int IN _ PROGRESS _ TIMEOUT = 15000 ; < nl > < nl > private long subscribeRequest = - 1 ; < nl > + private HashSet < Long > pendingRequests ; < nl > < nl > private WebRTCControllerImpl webRTCController ; < nl > private WebRTCProvider provider ; < nl > @ @ - 52 , 45 + 55 , 46 @ @ public class CallManagerActor extends ModuleActor { < nl > Log . d ( TAG , " onIncomingCall ( " + callId + " , " + uid + " ) " ) ; < nl > < nl > / / Switching call id < nl > - if ( webRTCController . getCallId ( ) ! = - 1 ) { < nl > - return ; < nl > - } < nl > - webRTCController . switchCallId ( callId ) ; < nl > + if ( webRTCController . getCallId ( ) = = - 1 ) { < nl > + webRTCController . switchCallId ( callId ) ; < nl > < nl > - / / Notify provider < nl > - provider . onIncomingCall ( Peer . user ( uid ) , new UserVM [ ] { getUserVM ( uid ) } ) ; < nl > + / / Notify provider < nl > + pendingRequests = new HashSet < > ( ) ; < nl > + provider . onIncomingCall ( Peer . user ( uid ) , new UserVM [ ] { getUserVM ( uid ) } ) ; < nl > + } < nl > } < nl > < nl > private void onAnswerCall ( long callId ) { < nl > Log . d ( TAG , " onAnswerCall " ) ; < nl > - if ( webRTCController . getCallId ( ) ! = callId ) { < nl > - return ; < nl > + if ( webRTCController . getCallId ( ) = = callId ) { < nl > + request ( new RequestCallInProgress ( callId , IN _ PROGRESS _ TIMEOUT ) ) ; < nl > } < nl > - < nl > - request ( new RequestCallInProgress ( callId , IN _ PROGRESS _ TIMEOUT ) ) ; < nl > } < nl > < nl > private void onSignaling ( long callId , byte [ ] message ) { < nl > Log . d ( TAG , " onSignaling ( " + callId + " ) " ) ; < nl > - if ( webRTCController . getCallId ( ) ! = callId ) { < nl > - return ; < nl > - } < nl > - < nl > - AbsSignal signal = AbsSignal . fromBytes ( message ) ; < nl > - if ( signal ! = null ) { < nl > - provider . onCallSignaling ( signal ) ; < nl > + if ( webRTCController . getCallId ( ) = = callId ) { < nl > + AbsSignal signal = AbsSignal . fromBytes ( message ) ; < nl > + if ( signal ! = null ) { < nl > + provider . onCallSignaling ( signal ) ; < nl > + } < nl > } < nl > } < nl > < nl > private void onSendSignal ( long callId , AbsSignal signal ) { < nl > Log . d ( TAG , " onSendSignal : " + signal ) ; < nl > - if ( webRTCController . getCallId ( ) ! = callId ) { < nl > - return ; < nl > + if ( webRTCController . getCallId ( ) = = callId ) { < nl > + request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; < nl > } < nl > - < nl > - request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; < nl > } < nl > < nl > + private void onCallEnded ( long callId ) { < nl > + Log . d ( TAG , " onCallEnded : " + callId ) ; < nl > + if ( webRTCController . getCallId ( ) = = callId ) { < nl > + webRTCController . clearCallId ( ) ; < nl > + provider . onCallEnd ( ) ; < nl > + } < nl > + } < nl > < nl > private void subscribeForCalls ( ) { < nl > if ( subscribeRequest ! = - 1 ) { < nl > @ @ - 121 , 6 + 125 , 8 @ @ public class CallManagerActor extends ModuleActor { < nl > onAnswerCall ( ( ( AnswerCall ) message ) . getCallId ( ) ) ; < nl > } else if ( message instanceof SendSignaling ) { < nl > onSendSignal ( ( ( SendSignaling ) message ) . getCallId ( ) , ( ( SendSignaling ) message ) . getSignal ( ) ) ; < nl > + } else if ( message instanceof OnCallEnded ) { < nl > + onCallEnded ( ( ( OnCallEnded ) message ) . getCallId ( ) ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > @ @ - 163 , 6 + 169 , 18 @ @ public class CallManagerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > + public static class OnCallEnded { < nl > + private long callId ; < nl > + < nl > + public OnCallEnded ( long callId ) { < nl > + this . callId = callId ; < nl > + } < nl > + < nl > + public long getCallId ( ) { < nl > + return callId ; < nl > + } < nl > + } < nl > + < nl > public static class AnswerCall { < nl > < nl > private long callId ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java < nl > index 5941ae3 . . c902b27 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > import im . actor . core . api . updates . UpdateCallEnded ; < nl > + import im . actor . core . api . updates . UpdateCallInProgress ; < nl > import im . actor . core . api . updates . UpdateCallSignal ; < nl > import im . actor . core . api . updates . UpdateIncomingCall ; < nl > import im . actor . core . modules . ModuleContext ; < nl > @ @ - 15 , 6 + 16 , 7 @ @ public class CallsProcessor implements Processor { < nl > < nl > @ Override < nl > public boolean process ( Object update ) { < nl > + < nl > if ( update instanceof UpdateIncomingCall ) { < nl > UpdateIncomingCall updateIncomingCall = ( UpdateIncomingCall ) update ; < nl > context . getCallsModule ( ) . getCallManager ( ) . send ( < nl > @ @ - 31 , 7 + 33 , 12 @ @ public class CallsProcessor implements Processor { < nl > return true ; < nl > } else if ( update instanceof UpdateCallEnded ) { < nl > UpdateCallEnded callEnded = ( UpdateCallEnded ) update ; < nl > - < nl > + context . getCallsModule ( ) . getCallManager ( ) . send ( < nl > + new CallManagerActor . OnCallEnded ( < nl > + callEnded . getCallId ( ) ) ) ; < nl > + return true ; < nl > + } else if ( update instanceof UpdateCallInProgress ) { < nl > + / / TODO : Implement < nl > return true ; < nl > } < nl > return false ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 6553608 . . 381220a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 21 , 12 + 21 , 12 @ @ import im . actor . core . entity . PeerSearchType ; < nl > import im . actor . core . entity . PeerType ; < nl > import im . actor . core . js . entity . * ; < nl > import im . actor . core . js . modules . JsBindedValueCallback ; < nl > - import im . actor . core . js . modules . JsIdleModule ; < nl > import im . actor . core . js . providers . JsNotificationsProvider ; < nl > import im . actor . core . js . providers . JsPhoneBookProvider ; < nl > import im . actor . core . js . providers . JsWebRTCProvider ; < nl > import im . actor . core . js . providers . electron . JsElectronApp ; < nl > - import im . actor . core . js . providers . electron . JsElectronListener ; < nl > + import im . actor . core . js . providers . webrtc . JsUserMediaStream ; < nl > + import im . actor . core . js . providers . webrtc . JsWebRTC ; < nl > import im . actor . core . js . utils . HtmlMarkdownUtils ; < nl > import im . actor . core . js . utils . IdentityUtils ; < nl > import im . actor . core . network . RpcException ; < nl > @ @ - 34 , 11 + 34 , 11 @ @ import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . Storage ; < nl > + import im . actor . runtime . function . Consumer ; < nl > import im . actor . runtime . js . JsFileSystemProvider ; < nl > import im . actor . runtime . js . fs . JsBlob ; < nl > import im . actor . runtime . js . fs . JsFile ; < nl > import im . actor . runtime . js . mvvm . JsDisplayListCallback ; < nl > - import im . actor . runtime . js . threading . JsSecureInterval ; < nl > import im . actor . runtime . js . utils . JsPromise ; < nl > import im . actor . runtime . js . utils . JsPromiseExecutor ; < nl > import im . actor . runtime . markdown . MarkdownParser ; < nl > @ @ - 134 , 6 + 134 , 18 @ @ public class JsFacade implements Exportable { < nl > < nl > messenger = new JsMessenger ( configuration . build ( ) ) ; < nl > < nl > + JsWebRTC . getAudioMedia ( ) . then ( new Consumer < JsUserMediaStream > ( ) { < nl > + @ Override < nl > + public void apply ( JsUserMediaStream mediaStream ) { < nl > + Log . d ( TAG , " Audio received " ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + Log . w ( TAG , " Audio Error " ) ; < nl > + } < nl > + } ) ; < nl > + < nl > Log . d ( TAG , " JsMessenger created " ) ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java < nl > new file mode 100644 < nl > index 0000000 . . b2fb2aa < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + package im . actor . core . js . modules ; < nl > + < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + < nl > + import static im . actor . runtime . actors . ActorSystem . system ; < nl > + < nl > + public class JsScheduller { < nl > + < nl > + private static final ActorRef SCHEDULLER = system ( ) . actorOf ( " js / scheduller " , new ActorCreator ( ) { < nl > + @ Override < nl > + public Actor create ( ) { < nl > + return new Actor ( ) ; < nl > + } < nl > + } ) ; < nl > + < nl > + public static ActorRef scheduller ( ) { < nl > + return SCHEDULLER ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaCallback . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaCallback . java < nl > new file mode 100644 < nl > index 0000000 . . ab2f9b9 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaCallback . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + public interface JsMediaCallback { < nl > + void onCreated ( JsUserMediaStream mediaStream ) ; < nl > + < nl > + void onError ( JsUserMediaError error ) ; < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaConstraint . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaConstraint . java < nl > new file mode 100644 < nl > index 0000000 . . ce8a6dc < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaConstraint . java < nl > @ @ - 0 , 0 + 1 , 22 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsUserMediaConstraint extends JavaScriptObject { < nl > + < nl > + public static native JsUserMediaConstraint audioOnly ( ) / * - { < nl > + return { audio : true , video : false } ; < nl > + } - * / ; < nl > + < nl > + public static native JsUserMediaConstraint videoOnly ( ) / * - { < nl > + return { audio : false , video : true } ; < nl > + } - * / ; < nl > + < nl > + public static native JsUserMediaConstraint audioVideo ( ) / * - { < nl > + return { audio : true , video : true } ; < nl > + } - * / ; < nl > + < nl > + protected JsUserMediaConstraint ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaError . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaError . java < nl > new file mode 100644 < nl > index 0000000 . . 73c0523 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaError . java < nl > @ @ - 0 , 0 + 1 , 9 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsUserMediaError extends JavaScriptObject { < nl > + protected JsUserMediaError ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaStream . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaStream . java < nl > new file mode 100644 < nl > index 0000000 . . 8737261 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaStream . java < nl > @ @ - 0 , 0 + 1 , 9 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsUserMediaStream extends JavaScriptObject { < nl > + protected JsUserMediaStream ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsWebRTC . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsWebRTC . java < nl > new file mode 100644 < nl > index 0000000 . . 12adf49 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsWebRTC . java < nl > @ @ - 0 , 0 + 1 , 48 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + import im . actor . core . js . modules . JsScheduller ; < nl > + import im . actor . runtime . promise . Promise ; < nl > + import im . actor . runtime . promise . PromiseFunc ; < nl > + import im . actor . runtime . promise . PromiseResolver ; < nl > + < nl > + public class JsWebRTC { < nl > + < nl > + public static Promise < JsUserMediaStream > getUserAudio ( ) { < nl > + return getUserMedia ( JsUserMediaConstraint . audioOnly ( ) ) ; < nl > + } < nl > + < nl > + public static Promise < JsUserMediaStream > getUserVideo ( ) { < nl > + return getUserMedia ( JsUserMediaConstraint . videoOnly ( ) ) ; < nl > + } < nl > + < nl > + public static Promise < JsUserMediaStream > getUserAudioVideo ( ) { < nl > + return getUserMedia ( JsUserMediaConstraint . audioVideo ( ) ) ; < nl > + } < nl > + < nl > + public static Promise < JsUserMediaStream > getUserMedia ( final JsUserMediaConstraint constraint ) { < nl > + return new Promise < > ( new PromiseFunc < JsUserMediaStream > ( ) { < nl > + @ Override < nl > + public void exec ( final PromiseResolver < JsUserMediaStream > resolver ) { < nl > + getUserMediaJs ( constraint , new JsMediaCallback ( ) { < nl > + @ Override < nl > + public void onCreated ( JsUserMediaStream mediaStream ) { < nl > + resolver . result ( mediaStream ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( JsUserMediaError error ) { < nl > + resolver . error ( new MediaException ( error ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) . done ( JsScheduller . scheduller ( ) ) ; < nl > + } < nl > + < nl > + protected static native void getUserMediaJs ( JsUserMediaConstraint constraint , JsMediaCallback callback ) / * - { < nl > + $ wnd . navigator . getUserMedia ( constraint , function ( stream ) { < nl > + callback . @ im . actor . core . js . providers . webrtc . JsMediaCallback : : onCreated ( * ) ( stream ) ; < nl > + } , function ( error ) { < nl > + callback . @ im . actor . core . js . providers . webrtc . JsMediaCallback : : onError ( * ) ( error ) ; < nl > + } ) ; < nl > + } - * / ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / MediaException . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / MediaException . java < nl > new file mode 100644 < nl > index 0000000 . . 3843ad7 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / MediaException . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + public class MediaException extends RuntimeException { < nl > + < nl > + private JsUserMediaError error ; < nl > + < nl > + public MediaException ( JsUserMediaError error ) { < nl > + this . error = error ; < nl > + } < nl > + < nl > + public JsUserMediaError getError ( ) { < nl > + return error ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > index 4293e4f . . e496823 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 38 , 6 + 38 , 10 @ @ public class CallManagerActor extends ModuleActor { < nl > Log . d ( TAG , " onIncomingCall ( " + callId + " , " + uid + " ) " ) ; < nl > } < nl > < nl > + private void onSignaling ( long callId , byte [ ] message ) { < nl > + Log . d ( TAG , " onSignaling ( " + callId + " ) " ) ; < nl > + } < nl > + < nl > private void subscribeForCalls ( ) { < nl > if ( subscribeRequest ! = - 1 ) { < nl > context ( ) . getActorApi ( ) . cancelRequest ( subscribeRequest ) ; < nl > @ @ - 60 , 6 + 64 , 9 @ @ public class CallManagerActor extends ModuleActor { < nl > if ( message instanceof OnIncomingCall ) { < nl > OnIncomingCall call = ( OnIncomingCall ) message ; < nl > onIncomingCall ( call . getCallId ( ) , call . getUid ( ) ) ; < nl > + } else if ( message instanceof OnSignaling ) { < nl > + OnSignaling signaling = ( OnSignaling ) message ; < nl > + onSignaling ( signaling . getCallId ( ) , signaling . getMessage ( ) ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > @ @ - 83 , 4 + 90 , 22 @ @ public class CallManagerActor extends ModuleActor { < nl > return uid ; < nl > } < nl > } < nl > + < nl > + public static class OnSignaling { < nl > + private long callId ; < nl > + private byte [ ] message ; < nl > + < nl > + public OnSignaling ( long callId , byte [ ] message ) { < nl > + this . callId = callId ; < nl > + this . message = message ; < nl > + } < nl > + < nl > + public long getCallId ( ) { < nl > + return callId ; < nl > + } < nl > + < nl > + public byte [ ] getMessage ( ) { < nl > + return message ; < nl > + } < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > index 695288e . . 65386c4 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > @ @ - 70 , 6 + 70 , 10 @ @ public class CallsModule extends AbsModule { < nl > / / } < nl > } < nl > < nl > + public ActorRef getCallManager ( ) { < nl > + return callManager ; < nl > + } < nl > + < nl > public Command < ResponseDoCall > makeCall ( final int uid , final CallCallback callCallback ) { < nl > / / return new Command < ResponseDoCall > ( ) { < nl > / / @ Override < nl > @ @ - 140 , 18 + 144 , 6 @ @ public class CallsModule extends AbsModule { < nl > callManager . send ( new CallManagerActor . OnIncomingCall ( callId , uid ) ) ; < nl > } < nl > < nl > - / / on end call update < nl > - public void onEndCall ( long callId ) { < nl > - / / Log . d ( TAG , " end call update : " + callId ) ; < nl > - / / ActorRef call = calls . get ( callId ) ; < nl > - / / if ( call ! = null ) { < nl > - / / Log . d ( TAG , " call exist - end it " ) ; < nl > - / / call . send ( new CallActor . EndCall ( ) ) ; < nl > - / / } else { < nl > - / / Log . d ( TAG , " call not exist - remove it " ) ; < nl > - / / calls . remove ( callId ) ; < nl > - / / } < nl > - } < nl > < nl > / / after end call update processed by CallActor < nl > public void onCallEnded ( long callId ) { < nl > @ @ - 159 , 24 + 151 , 11 @ @ public class CallsModule extends AbsModule { < nl > / / calls . remove ( callId ) ; < nl > } < nl > < nl > - public void onCallInProgress ( long callId , int timeout ) { < nl > - / / ActorRef call = calls . get ( callId ) ; < nl > - / / if ( call ! = null ) { < nl > - / / call . send ( new CallActor . CallInProgress ( timeout ) ) ; < nl > - / / } < nl > - } < nl > < nl > public void sendSignal ( long callId , AbsSignal signal ) { < nl > / / request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; < nl > } < nl > < nl > - public void onSignal ( long callId , byte [ ] data ) { < nl > - / / ActorRef call = calls . get ( callId ) ; < nl > - / / if ( call ! = null ) { < nl > - / / call . send ( new CallActor . Signal ( data ) ) ; < nl > - / / } < nl > - } < nl > - < nl > public interface CallCallback { < nl > void onCallEnd ( ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java < nl > index 45e5015 . . 027b5ac 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java < nl > @ @ - 1 , 30 + 1 , 33 @ @ < nl > package im . actor . core . modules . calls ; < nl > < nl > - import im . actor . core . api . updates . UpdateCallEnded ; < nl > - import im . actor . core . api . updates . UpdateCallInProgress ; < nl > import im . actor . core . api . updates . UpdateCallSignal ; < nl > import im . actor . core . api . updates . UpdateIncomingCall ; < nl > - import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . sequence . Processor ; < nl > < nl > - public class CallsProcessor extends AbsModule { < nl > - public CallsProcessor ( ModuleContext context ) { < nl > - super ( context ) ; < nl > - } < nl > - < nl > - public void onIncomingCall ( UpdateIncomingCall call ) { < nl > - context ( ) . getCallsModule ( ) . onIncomingCall ( call . getCallId ( ) , call . getUid ( ) ) ; < nl > - } < nl > + public class CallsProcessor implements Processor { < nl > + private ModuleContext context ; < nl > < nl > - public void onCallInProgress ( UpdateCallInProgress inProgress ) { < nl > - context ( ) . getCallsModule ( ) . onCallInProgress ( inProgress . getCallId ( ) , inProgress . getTimeout ( ) ) ; < nl > - } < nl > - < nl > - public void onCallEnd ( UpdateCallEnded callEnd ) { < nl > - context ( ) . getCallsModule ( ) . onEndCall ( callEnd . getCallId ( ) ) ; < nl > + public CallsProcessor ( ModuleContext context ) { < nl > + this . context = context ; < nl > } < nl > < nl > - public void onSignal ( UpdateCallSignal signal ) { < nl > - context ( ) . getCallsModule ( ) . onSignal ( signal . getCallId ( ) , signal . getContent ( ) ) ; < nl > + @ Override < nl > + public boolean process ( Object update ) { < nl > + if ( update instanceof UpdateIncomingCall ) { < nl > + UpdateIncomingCall updateIncomingCall = ( UpdateIncomingCall ) update ; < nl > + context . getCallsModule ( ) . getCallManager ( ) . send ( < nl > + new CallManagerActor . OnIncomingCall ( < nl > + updateIncomingCall . getCallId ( ) , < nl > + updateIncomingCall . getUid ( ) ) ) ; < nl > + return true ; < nl > + } else if ( update instanceof UpdateCallSignal ) { < nl > + UpdateCallSignal updateCallSignal = ( UpdateCallSignal ) update ; < nl > + context . getCallsModule ( ) . getCallManager ( ) . send ( < nl > + new CallManagerActor . OnSignaling ( < nl > + updateCallSignal . getCallId ( ) , < nl > + updateCallSignal . getContent ( ) ) ) ; < nl > + } < nl > + return false ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > index 5b7501d . . bc87f7b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java < nl > @ @ - 205 , 6 + 205 , 9 @ @ public class UpdateProcessor extends AbsModule { < nl > } < nl > < nl > public void processWeakUpdate ( Update update , long date ) { < nl > + if ( callsProcessor . process ( update ) ) { < nl > + return ; < nl > + } < nl > if ( update instanceof UpdateUserOnline ) { < nl > UpdateUserOnline userOnline = ( UpdateUserOnline ) update ; < nl > presenceProcessor . onUserOnline ( userOnline . getUid ( ) , date ) ; < nl > @ @ - 223 , 14 + 226 , 6 @ @ public class UpdateProcessor extends AbsModule { < nl > } else if ( update instanceof UpdateTypingStop ) { < nl > UpdateTypingStop typing = ( UpdateTypingStop ) update ; < nl > typingProcessor . onTypingStop ( typing . getPeer ( ) , typing . getUid ( ) , typing . getTypingType ( ) ) ; < nl > - } else if ( update instanceof UpdateIncomingCall ) { < nl > - callsProcessor . onIncomingCall ( ( UpdateIncomingCall ) update ) ; < nl > - } else if ( update instanceof UpdateCallInProgress ) { < nl > - callsProcessor . onCallInProgress ( ( UpdateCallInProgress ) update ) ; < nl > - } else if ( update instanceof UpdateCallSignal ) { < nl > - callsProcessor . onSignal ( ( UpdateCallSignal ) update ) ; < nl > - } else if ( update instanceof UpdateCallEnded ) { < nl > - callsProcessor . onCallEnd ( ( UpdateCallEnded ) update ) ; < nl > } < nl > } < nl > < nl > @ @ - 242 , 6 + 237 , 9 @ @ public class UpdateProcessor extends AbsModule { < nl > if ( encryptedProcessor . process ( update ) ) { < nl > return ; < nl > } < nl > + if ( callsProcessor . process ( update ) ) { < nl > + return ; < nl > + } < nl > if ( update instanceof UpdateMessage ) { < nl > UpdateMessage message = ( UpdateMessage ) update ; < nl > messagesProcessor . onMessage ( message . getPeer ( ) , message . getSenderUid ( ) , message . getDate ( ) , message . getRid ( ) , < nl > @ @ - 344 , 14 + 342 , 6 @ @ public class UpdateProcessor extends AbsModule { < nl > stickersProcessor . onOwnStickerCollectionsChanged ( ( ( UpdateOwnStickersChanged ) update ) . getCollections ( ) ) ; < nl > } else if ( update instanceof UpdateStickerCollectionsChanged ) { < nl > stickersProcessor . onStickerCollectionsChanged ( ( ( UpdateStickerCollectionsChanged ) update ) . getCollections ( ) ) ; < nl > - } else if ( update instanceof UpdateIncomingCall ) { < nl > - callsProcessor . onIncomingCall ( ( UpdateIncomingCall ) update ) ; < nl > - } else if ( update instanceof UpdateCallInProgress ) { < nl > - callsProcessor . onCallInProgress ( ( UpdateCallInProgress ) update ) ; < nl > - } else if ( update instanceof UpdateCallSignal ) { < nl > - callsProcessor . onSignal ( ( UpdateCallSignal ) update ) ; < nl > - } else if ( update instanceof UpdateCallEnded ) { < nl > - callsProcessor . onCallEnd ( ( UpdateCallEnded ) update ) ; < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 index df27754 . . d98cea0 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / JsWebRTCProvider . java 
 @ @ - 18 , 7 + 18 , 7 @ @ import im . actor . core . js . providers . webrtc . JsPeerConnectionListener ; 
 import im . actor . core . js . providers . webrtc . JsRTCIceCandidate ; 
 import im . actor . core . js . providers . webrtc . JsSessionDescription ; 
 import im . actor . core . js . providers . webrtc . JsStreaming ; 
 - import im . actor . core . js . providers . webrtc . JsUserMediaStream ; 
 + import im . actor . core . js . providers . webrtc . JsMediaStream ; 
 import im . actor . core . viewmodel . UserVM ; 
 import im . actor . core . webrtc . WebRTCController ; 
 import im . actor . core . webrtc . WebRTCProvider ; 
 @ @ - 45 , 6 + 45 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { 
 
 Log . d ( TAG , " onIncomingCall " ) ; 
 pendingCandidates = new ArrayList < > ( ) ; 
 + isReady = false ; 
 JsArray < JsIceServer > servers = JsArray . createArray ( ) . cast ( ) ; 
 servers . push ( JsIceServer . create ( " stun : 62 . 4 . 22 . 219 : 3478 " ) ) ; 
 servers . push ( JsIceServer . create ( " turn : 62 . 4 . 22 . 219 : 3478 ? transport = tcp " , " actor " , " password " ) ) ; 
 @ @ - 57 , 25 + 58 , 22 @ @ public class JsWebRTCProvider implements WebRTCProvider { 
 if ( candidate ! = null ) { 
 controller . sendSignaling ( new CandidateSignal ( candidate . getId ( ) , 
 candidate . getLabel ( ) , candidate . getSDP ( ) ) ) ; 
 - 
 - / / JsMessenger . getInstance ( ) . callSendSignaling ( new CandidateSignal ( candidate . getId ( ) , 
 - / / candidate . getLabel ( ) , candidate . getSDP ( ) ) ) ; 
 } 
 } 
 
 @ Override 
 - public void onStreamAdded ( JsUserMediaStream stream ) { 
 + public void onStreamAdded ( JsMediaStream stream ) { 
 Log . d ( TAG , " onStreamAdded : " + JsonUtils . stringify ( stream ) ) ; 
 JsAudio . playStream ( stream ) ; 
 } 
 } ) ; 
 
 - JsStreaming . getUserAudio ( ) . then ( new Consumer < JsUserMediaStream > ( ) { 
 + JsStreaming . getUserAudio ( ) . then ( new Consumer < JsMediaStream > ( ) { 
 @ Override 
 - public void apply ( JsUserMediaStream jsUserMediaStream ) { 
 + public void apply ( JsMediaStream jsMediaStream ) { 
 / / JsAudio . playStream ( jsUserMediaStream ) ; 
 Log . d ( TAG , " Audio is created " ) ; 
 - peerConnection . addStream ( jsUserMediaStream ) ; 
 + peerConnection . addStream ( jsMediaStream ) ; 
 } 
 } ) . failure ( new Consumer < Exception > ( ) { 
 @ Override 
 @ @ - 153 , 6 + 151 , 7 @ @ public class JsWebRTCProvider implements WebRTCProvider { 
 
 @ Override 
 public void onCallEnd ( ) { 
 - 
 + peerConnection . close ( ) ; 
 + peerConnection = null ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsAudio . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsAudio . java 
 index cad3256 . . aa5ecae 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsAudio . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsAudio . java 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 package im . actor . core . js . providers . webrtc ; 
 
 public class JsAudio { 
 - public static native void playStream ( JsUserMediaStream stream ) / * - { 
 + public static native void playStream ( JsMediaStream stream ) / * - { 
 var audio = $ wnd . document . createElement ( ' AUDIO ' ) ; 
 $ wnd . console . warn ( audio ) ; 
 var url = URL . createObjectURL ( stream ) ; ; 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaCallback . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaCallback . java 
 index ab2f9b9 . . 3f3582c 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaCallback . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaCallback . java 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 package im . actor . core . js . providers . webrtc ; 
 
 public interface JsMediaCallback { 
 - void onCreated ( JsUserMediaStream mediaStream ) ; 
 + void onCreated ( JsMediaStream mediaStream ) ; 
 
 void onError ( JsUserMediaError error ) ; 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaStream . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaStream . java 
 new file mode 100644 
 index 0000000 . . 4282a97 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaStream . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsMediaStream extends JavaScriptObject { 
 + protected JsMediaStream ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java 
 index 5f8a174 . . 4303e66 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java 
 @ @ - 69 , 7 + 69 , 7 @ @ public class JsPeerConnection extends JavaScriptObject { 
 } ) . done ( JsScheduller . scheduller ( ) ) ; 
 } 
 
 - public final native void addStream ( JsUserMediaStream stream ) / * - { 
 + public final native void addStream ( JsMediaStream stream ) / * - { 
 this . peerConnection . addStream ( stream ) ; 
 } - * / ; 
 
 @ @ - 77 , 6 + 77 , 10 @ @ public class JsPeerConnection extends JavaScriptObject { 
 this . peerConnection . addIceCandidate ( new RTCIceCandidate ( { sdpMLineIndex : label , candidate : candidate } ) ) ; 
 } - * / ; 
 
 + public final native void close ( ) / * - { 
 + this . peerConnection . close ( ) ; 
 + } - * / ; 
 + 
 public final Promise < JsSessionDescription > createOffer ( ) { 
 return new Promise < > ( new PromiseFunc < JsSessionDescription > ( ) { 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java 
 index e6ede17 . . a588694 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java 
 @ @ - 3 , 5 + 3 , 5 @ @ package im . actor . core . js . providers . webrtc ; 
 public interface JsPeerConnectionListener { 
 void onIceCandidate ( JsRTCIceCandidate candidate ) ; 
 
 - void onStreamAdded ( JsUserMediaStream stream ) ; 
 + void onStreamAdded ( JsMediaStream stream ) ; 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsStreaming . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsStreaming . java 
 index 5f70b80 . . 2f5d036 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsStreaming . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsStreaming . java 
 @ @ - 7 , 25 + 7 , 25 @ @ import im . actor . runtime . promise . PromiseResolver ; 
 
 public class JsStreaming { 
 
 - public static Promise < JsUserMediaStream > getUserAudio ( ) { 
 + public static Promise < JsMediaStream > getUserAudio ( ) { 
 return getUserMedia ( JsUserMediaConstraint . audioOnly ( ) ) ; 
 } 
 
 - public static Promise < JsUserMediaStream > getUserVideo ( ) { 
 + public static Promise < JsMediaStream > getUserVideo ( ) { 
 return getUserMedia ( JsUserMediaConstraint . videoOnly ( ) ) ; 
 } 
 
 - public static Promise < JsUserMediaStream > getUserAudioVideo ( ) { 
 + public static Promise < JsMediaStream > getUserAudioVideo ( ) { 
 return getUserMedia ( JsUserMediaConstraint . audioVideo ( ) ) ; 
 } 
 
 - public static Promise < JsUserMediaStream > getUserMedia ( final JsUserMediaConstraint constraint ) { 
 - return new Promise < > ( new PromiseFunc < JsUserMediaStream > ( ) { 
 + public static Promise < JsMediaStream > getUserMedia ( final JsUserMediaConstraint constraint ) { 
 + return new Promise < > ( new PromiseFunc < JsMediaStream > ( ) { 
 @ Override 
 - public void exec ( final PromiseResolver < JsUserMediaStream > resolver ) { 
 + public void exec ( final PromiseResolver < JsMediaStream > resolver ) { 
 getUserMediaJs ( constraint , new JsMediaCallback ( ) { 
 @ Override 
 - public void onCreated ( JsUserMediaStream mediaStream ) { 
 + public void onCreated ( JsMediaStream mediaStream ) { 
 resolver . result ( mediaStream ) ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaStream . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaStream . java 
 deleted file mode 100644 
 index 8737261 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaStream . java 
 + + + / dev / null 
 @ @ - 1 , 9 + 0 , 0 @ @ 
 - package im . actor . core . js . providers . webrtc ; 
 - 
 - import com . google . gwt . core . client . JavaScriptObject ; 
 - 
 - public class JsUserMediaStream extends JavaScriptObject { 
 - protected JsUserMediaStream ( ) { 
 - 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 index 9cb2c36 . . cf9c977 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package im . actor . core . modules . calls ; 
 
 + import java . util . HashSet ; 
 + 
 import im . actor . core . api . rpc . RequestCallInProgress ; 
 import im . actor . core . api . rpc . RequestSendCallSignal ; 
 import im . actor . core . api . rpc . RequestSubscribeToCalls ; 
 @ @ - 29 , 6 + 31 , 7 @ @ public class CallManagerActor extends ModuleActor { 
 private static final int IN _ PROGRESS _ TIMEOUT = 15000 ; 
 
 private long subscribeRequest = - 1 ; 
 + private HashSet < Long > pendingRequests ; 
 
 private WebRTCControllerImpl webRTCController ; 
 private WebRTCProvider provider ; 
 @ @ - 52 , 45 + 55 , 46 @ @ public class CallManagerActor extends ModuleActor { 
 Log . d ( TAG , " onIncomingCall ( " + callId + " , " + uid + " ) " ) ; 
 
 / / Switching call id 
 - if ( webRTCController . getCallId ( ) ! = - 1 ) { 
 - return ; 
 - } 
 - webRTCController . switchCallId ( callId ) ; 
 + if ( webRTCController . getCallId ( ) = = - 1 ) { 
 + webRTCController . switchCallId ( callId ) ; 
 
 - / / Notify provider 
 - provider . onIncomingCall ( Peer . user ( uid ) , new UserVM [ ] { getUserVM ( uid ) } ) ; 
 + / / Notify provider 
 + pendingRequests = new HashSet < > ( ) ; 
 + provider . onIncomingCall ( Peer . user ( uid ) , new UserVM [ ] { getUserVM ( uid ) } ) ; 
 + } 
 } 
 
 private void onAnswerCall ( long callId ) { 
 Log . d ( TAG , " onAnswerCall " ) ; 
 - if ( webRTCController . getCallId ( ) ! = callId ) { 
 - return ; 
 + if ( webRTCController . getCallId ( ) = = callId ) { 
 + request ( new RequestCallInProgress ( callId , IN _ PROGRESS _ TIMEOUT ) ) ; 
 } 
 - 
 - request ( new RequestCallInProgress ( callId , IN _ PROGRESS _ TIMEOUT ) ) ; 
 } 
 
 private void onSignaling ( long callId , byte [ ] message ) { 
 Log . d ( TAG , " onSignaling ( " + callId + " ) " ) ; 
 - if ( webRTCController . getCallId ( ) ! = callId ) { 
 - return ; 
 - } 
 - 
 - AbsSignal signal = AbsSignal . fromBytes ( message ) ; 
 - if ( signal ! = null ) { 
 - provider . onCallSignaling ( signal ) ; 
 + if ( webRTCController . getCallId ( ) = = callId ) { 
 + AbsSignal signal = AbsSignal . fromBytes ( message ) ; 
 + if ( signal ! = null ) { 
 + provider . onCallSignaling ( signal ) ; 
 + } 
 } 
 } 
 
 private void onSendSignal ( long callId , AbsSignal signal ) { 
 Log . d ( TAG , " onSendSignal : " + signal ) ; 
 - if ( webRTCController . getCallId ( ) ! = callId ) { 
 - return ; 
 + if ( webRTCController . getCallId ( ) = = callId ) { 
 + request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; 
 } 
 - 
 - request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; 
 } 
 
 + private void onCallEnded ( long callId ) { 
 + Log . d ( TAG , " onCallEnded : " + callId ) ; 
 + if ( webRTCController . getCallId ( ) = = callId ) { 
 + webRTCController . clearCallId ( ) ; 
 + provider . onCallEnd ( ) ; 
 + } 
 + } 
 
 private void subscribeForCalls ( ) { 
 if ( subscribeRequest ! = - 1 ) { 
 @ @ - 121 , 6 + 125 , 8 @ @ public class CallManagerActor extends ModuleActor { 
 onAnswerCall ( ( ( AnswerCall ) message ) . getCallId ( ) ) ; 
 } else if ( message instanceof SendSignaling ) { 
 onSendSignal ( ( ( SendSignaling ) message ) . getCallId ( ) , ( ( SendSignaling ) message ) . getSignal ( ) ) ; 
 + } else if ( message instanceof OnCallEnded ) { 
 + onCallEnded ( ( ( OnCallEnded ) message ) . getCallId ( ) ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 @ @ - 163 , 6 + 169 , 18 @ @ public class CallManagerActor extends ModuleActor { 
 } 
 } 
 
 + public static class OnCallEnded { 
 + private long callId ; 
 + 
 + public OnCallEnded ( long callId ) { 
 + this . callId = callId ; 
 + } 
 + 
 + public long getCallId ( ) { 
 + return callId ; 
 + } 
 + } 
 + 
 public static class AnswerCall { 
 
 private long callId ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java 
 index 5941ae3 . . c902b27 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . core . modules . calls ; 
 
 import im . actor . core . api . updates . UpdateCallEnded ; 
 + import im . actor . core . api . updates . UpdateCallInProgress ; 
 import im . actor . core . api . updates . UpdateCallSignal ; 
 import im . actor . core . api . updates . UpdateIncomingCall ; 
 import im . actor . core . modules . ModuleContext ; 
 @ @ - 15 , 6 + 16 , 7 @ @ public class CallsProcessor implements Processor { 
 
 @ Override 
 public boolean process ( Object update ) { 
 + 
 if ( update instanceof UpdateIncomingCall ) { 
 UpdateIncomingCall updateIncomingCall = ( UpdateIncomingCall ) update ; 
 context . getCallsModule ( ) . getCallManager ( ) . send ( 
 @ @ - 31 , 7 + 33 , 12 @ @ public class CallsProcessor implements Processor { 
 return true ; 
 } else if ( update instanceof UpdateCallEnded ) { 
 UpdateCallEnded callEnded = ( UpdateCallEnded ) update ; 
 - 
 + context . getCallsModule ( ) . getCallManager ( ) . send ( 
 + new CallManagerActor . OnCallEnded ( 
 + callEnded . getCallId ( ) ) ) ; 
 + return true ; 
 + } else if ( update instanceof UpdateCallInProgress ) { 
 + / / TODO : Implement 
 return true ; 
 } 
 return false ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 6553608 . . 381220a 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 21 , 12 + 21 , 12 @ @ import im . actor . core . entity . PeerSearchType ; 
 import im . actor . core . entity . PeerType ; 
 import im . actor . core . js . entity . * ; 
 import im . actor . core . js . modules . JsBindedValueCallback ; 
 - import im . actor . core . js . modules . JsIdleModule ; 
 import im . actor . core . js . providers . JsNotificationsProvider ; 
 import im . actor . core . js . providers . JsPhoneBookProvider ; 
 import im . actor . core . js . providers . JsWebRTCProvider ; 
 import im . actor . core . js . providers . electron . JsElectronApp ; 
 - import im . actor . core . js . providers . electron . JsElectronListener ; 
 + import im . actor . core . js . providers . webrtc . JsUserMediaStream ; 
 + import im . actor . core . js . providers . webrtc . JsWebRTC ; 
 import im . actor . core . js . utils . HtmlMarkdownUtils ; 
 import im . actor . core . js . utils . IdentityUtils ; 
 import im . actor . core . network . RpcException ; 
 @ @ - 34 , 11 + 34 , 11 @ @ import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . core . viewmodel . UserVM ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . Storage ; 
 + import im . actor . runtime . function . Consumer ; 
 import im . actor . runtime . js . JsFileSystemProvider ; 
 import im . actor . runtime . js . fs . JsBlob ; 
 import im . actor . runtime . js . fs . JsFile ; 
 import im . actor . runtime . js . mvvm . JsDisplayListCallback ; 
 - import im . actor . runtime . js . threading . JsSecureInterval ; 
 import im . actor . runtime . js . utils . JsPromise ; 
 import im . actor . runtime . js . utils . JsPromiseExecutor ; 
 import im . actor . runtime . markdown . MarkdownParser ; 
 @ @ - 134 , 6 + 134 , 18 @ @ public class JsFacade implements Exportable { 
 
 messenger = new JsMessenger ( configuration . build ( ) ) ; 
 
 + JsWebRTC . getAudioMedia ( ) . then ( new Consumer < JsUserMediaStream > ( ) { 
 + @ Override 
 + public void apply ( JsUserMediaStream mediaStream ) { 
 + Log . d ( TAG , " Audio received " ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + Log . w ( TAG , " Audio Error " ) ; 
 + } 
 + } ) ; 
 + 
 Log . d ( TAG , " JsMessenger created " ) ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java 
 new file mode 100644 
 index 0000000 . . b2fb2aa 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package im . actor . core . js . modules ; 
 + 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + 
 + import static im . actor . runtime . actors . ActorSystem . system ; 
 + 
 + public class JsScheduller { 
 + 
 + private static final ActorRef SCHEDULLER = system ( ) . actorOf ( " js / scheduller " , new ActorCreator ( ) { 
 + @ Override 
 + public Actor create ( ) { 
 + return new Actor ( ) ; 
 + } 
 + } ) ; 
 + 
 + public static ActorRef scheduller ( ) { 
 + return SCHEDULLER ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaCallback . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaCallback . java 
 new file mode 100644 
 index 0000000 . . ab2f9b9 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsMediaCallback . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + public interface JsMediaCallback { 
 + void onCreated ( JsUserMediaStream mediaStream ) ; 
 + 
 + void onError ( JsUserMediaError error ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaConstraint . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaConstraint . java 
 new file mode 100644 
 index 0000000 . . ce8a6dc 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaConstraint . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsUserMediaConstraint extends JavaScriptObject { 
 + 
 + public static native JsUserMediaConstraint audioOnly ( ) / * - { 
 + return { audio : true , video : false } ; 
 + } - * / ; 
 + 
 + public static native JsUserMediaConstraint videoOnly ( ) / * - { 
 + return { audio : false , video : true } ; 
 + } - * / ; 
 + 
 + public static native JsUserMediaConstraint audioVideo ( ) / * - { 
 + return { audio : true , video : true } ; 
 + } - * / ; 
 + 
 + protected JsUserMediaConstraint ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaError . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaError . java 
 new file mode 100644 
 index 0000000 . . 73c0523 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaError . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsUserMediaError extends JavaScriptObject { 
 + protected JsUserMediaError ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaStream . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaStream . java 
 new file mode 100644 
 index 0000000 . . 8737261 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsUserMediaStream . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsUserMediaStream extends JavaScriptObject { 
 + protected JsUserMediaStream ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsWebRTC . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsWebRTC . java 
 new file mode 100644 
 index 0000000 . . 12adf49 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsWebRTC . java 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + import im . actor . core . js . modules . JsScheduller ; 
 + import im . actor . runtime . promise . Promise ; 
 + import im . actor . runtime . promise . PromiseFunc ; 
 + import im . actor . runtime . promise . PromiseResolver ; 
 + 
 + public class JsWebRTC { 
 + 
 + public static Promise < JsUserMediaStream > getUserAudio ( ) { 
 + return getUserMedia ( JsUserMediaConstraint . audioOnly ( ) ) ; 
 + } 
 + 
 + public static Promise < JsUserMediaStream > getUserVideo ( ) { 
 + return getUserMedia ( JsUserMediaConstraint . videoOnly ( ) ) ; 
 + } 
 + 
 + public static Promise < JsUserMediaStream > getUserAudioVideo ( ) { 
 + return getUserMedia ( JsUserMediaConstraint . audioVideo ( ) ) ; 
 + } 
 + 
 + public static Promise < JsUserMediaStream > getUserMedia ( final JsUserMediaConstraint constraint ) { 
 + return new Promise < > ( new PromiseFunc < JsUserMediaStream > ( ) { 
 + @ Override 
 + public void exec ( final PromiseResolver < JsUserMediaStream > resolver ) { 
 + getUserMediaJs ( constraint , new JsMediaCallback ( ) { 
 + @ Override 
 + public void onCreated ( JsUserMediaStream mediaStream ) { 
 + resolver . result ( mediaStream ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( JsUserMediaError error ) { 
 + resolver . error ( new MediaException ( error ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) . done ( JsScheduller . scheduller ( ) ) ; 
 + } 
 + 
 + protected static native void getUserMediaJs ( JsUserMediaConstraint constraint , JsMediaCallback callback ) / * - { 
 + $ wnd . navigator . getUserMedia ( constraint , function ( stream ) { 
 + callback . @ im . actor . core . js . providers . webrtc . JsMediaCallback : : onCreated ( * ) ( stream ) ; 
 + } , function ( error ) { 
 + callback . @ im . actor . core . js . providers . webrtc . JsMediaCallback : : onError ( * ) ( error ) ; 
 + } ) ; 
 + } - * / ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / MediaException . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / MediaException . java 
 new file mode 100644 
 index 0000000 . . 3843ad7 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / MediaException . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + public class MediaException extends RuntimeException { 
 + 
 + private JsUserMediaError error ; 
 + 
 + public MediaException ( JsUserMediaError error ) { 
 + this . error = error ; 
 + } 
 + 
 + public JsUserMediaError getError ( ) { 
 + return error ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 index 4293e4f . . e496823 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 38 , 6 + 38 , 10 @ @ public class CallManagerActor extends ModuleActor { 
 Log . d ( TAG , " onIncomingCall ( " + callId + " , " + uid + " ) " ) ; 
 } 
 
 + private void onSignaling ( long callId , byte [ ] message ) { 
 + Log . d ( TAG , " onSignaling ( " + callId + " ) " ) ; 
 + } 
 + 
 private void subscribeForCalls ( ) { 
 if ( subscribeRequest ! = - 1 ) { 
 context ( ) . getActorApi ( ) . cancelRequest ( subscribeRequest ) ; 
 @ @ - 60 , 6 + 64 , 9 @ @ public class CallManagerActor extends ModuleActor { 
 if ( message instanceof OnIncomingCall ) { 
 OnIncomingCall call = ( OnIncomingCall ) message ; 
 onIncomingCall ( call . getCallId ( ) , call . getUid ( ) ) ; 
 + } else if ( message instanceof OnSignaling ) { 
 + OnSignaling signaling = ( OnSignaling ) message ; 
 + onSignaling ( signaling . getCallId ( ) , signaling . getMessage ( ) ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 @ @ - 83 , 4 + 90 , 22 @ @ public class CallManagerActor extends ModuleActor { 
 return uid ; 
 } 
 } 
 + 
 + public static class OnSignaling { 
 + private long callId ; 
 + private byte [ ] message ; 
 + 
 + public OnSignaling ( long callId , byte [ ] message ) { 
 + this . callId = callId ; 
 + this . message = message ; 
 + } 
 + 
 + public long getCallId ( ) { 
 + return callId ; 
 + } 
 + 
 + public byte [ ] getMessage ( ) { 
 + return message ; 
 + } 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 index 695288e . . 65386c4 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 @ @ - 70 , 6 + 70 , 10 @ @ public class CallsModule extends AbsModule { 
 / / } 
 } 
 
 + public ActorRef getCallManager ( ) { 
 + return callManager ; 
 + } 
 + 
 public Command < ResponseDoCall > makeCall ( final int uid , final CallCallback callCallback ) { 
 / / return new Command < ResponseDoCall > ( ) { 
 / / @ Override 
 @ @ - 140 , 18 + 144 , 6 @ @ public class CallsModule extends AbsModule { 
 callManager . send ( new CallManagerActor . OnIncomingCall ( callId , uid ) ) ; 
 } 
 
 - / / on end call update 
 - public void onEndCall ( long callId ) { 
 - / / Log . d ( TAG , " end call update : " + callId ) ; 
 - / / ActorRef call = calls . get ( callId ) ; 
 - / / if ( call ! = null ) { 
 - / / Log . d ( TAG , " call exist - end it " ) ; 
 - / / call . send ( new CallActor . EndCall ( ) ) ; 
 - / / } else { 
 - / / Log . d ( TAG , " call not exist - remove it " ) ; 
 - / / calls . remove ( callId ) ; 
 - / / } 
 - } 
 
 / / after end call update processed by CallActor 
 public void onCallEnded ( long callId ) { 
 @ @ - 159 , 24 + 151 , 11 @ @ public class CallsModule extends AbsModule { 
 / / calls . remove ( callId ) ; 
 } 
 
 - public void onCallInProgress ( long callId , int timeout ) { 
 - / / ActorRef call = calls . get ( callId ) ; 
 - / / if ( call ! = null ) { 
 - / / call . send ( new CallActor . CallInProgress ( timeout ) ) ; 
 - / / } 
 - } 
 
 public void sendSignal ( long callId , AbsSignal signal ) { 
 / / request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; 
 } 
 
 - public void onSignal ( long callId , byte [ ] data ) { 
 - / / ActorRef call = calls . get ( callId ) ; 
 - / / if ( call ! = null ) { 
 - / / call . send ( new CallActor . Signal ( data ) ) ; 
 - / / } 
 - } 
 - 
 public interface CallCallback { 
 void onCallEnd ( ) ; 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java 
 index 45e5015 . . 027b5ac 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsProcessor . java 
 @ @ - 1 , 30 + 1 , 33 @ @ 
 package im . actor . core . modules . calls ; 
 
 - import im . actor . core . api . updates . UpdateCallEnded ; 
 - import im . actor . core . api . updates . UpdateCallInProgress ; 
 import im . actor . core . api . updates . UpdateCallSignal ; 
 import im . actor . core . api . updates . UpdateIncomingCall ; 
 - import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . sequence . Processor ; 
 
 - public class CallsProcessor extends AbsModule { 
 - public CallsProcessor ( ModuleContext context ) { 
 - super ( context ) ; 
 - } 
 - 
 - public void onIncomingCall ( UpdateIncomingCall call ) { 
 - context ( ) . getCallsModule ( ) . onIncomingCall ( call . getCallId ( ) , call . getUid ( ) ) ; 
 - } 
 + public class CallsProcessor implements Processor { 
 + private ModuleContext context ; 
 
 - public void onCallInProgress ( UpdateCallInProgress inProgress ) { 
 - context ( ) . getCallsModule ( ) . onCallInProgress ( inProgress . getCallId ( ) , inProgress . getTimeout ( ) ) ; 
 - } 
 - 
 - public void onCallEnd ( UpdateCallEnded callEnd ) { 
 - context ( ) . getCallsModule ( ) . onEndCall ( callEnd . getCallId ( ) ) ; 
 + public CallsProcessor ( ModuleContext context ) { 
 + this . context = context ; 
 } 
 
 - public void onSignal ( UpdateCallSignal signal ) { 
 - context ( ) . getCallsModule ( ) . onSignal ( signal . getCallId ( ) , signal . getContent ( ) ) ; 
 + @ Override 
 + public boolean process ( Object update ) { 
 + if ( update instanceof UpdateIncomingCall ) { 
 + UpdateIncomingCall updateIncomingCall = ( UpdateIncomingCall ) update ; 
 + context . getCallsModule ( ) . getCallManager ( ) . send ( 
 + new CallManagerActor . OnIncomingCall ( 
 + updateIncomingCall . getCallId ( ) , 
 + updateIncomingCall . getUid ( ) ) ) ; 
 + return true ; 
 + } else if ( update instanceof UpdateCallSignal ) { 
 + UpdateCallSignal updateCallSignal = ( UpdateCallSignal ) update ; 
 + context . getCallsModule ( ) . getCallManager ( ) . send ( 
 + new CallManagerActor . OnSignaling ( 
 + updateCallSignal . getCallId ( ) , 
 + updateCallSignal . getContent ( ) ) ) ; 
 + } 
 + return false ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 index 5b7501d . . bc87f7b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / updates / UpdateProcessor . java 
 @ @ - 205 , 6 + 205 , 9 @ @ public class UpdateProcessor extends AbsModule { 
 } 
 
 public void processWeakUpdate ( Update update , long date ) { 
 + if ( callsProcessor . process ( update ) ) { 
 + return ; 
 + } 
 if ( update instanceof UpdateUserOnline ) { 
 UpdateUserOnline userOnline = ( UpdateUserOnline ) update ; 
 presenceProcessor . onUserOnline ( userOnline . getUid ( ) , date ) ; 
 @ @ - 223 , 14 + 226 , 6 @ @ public class UpdateProcessor extends AbsModule { 
 } else if ( update instanceof UpdateTypingStop ) { 
 UpdateTypingStop typing = ( UpdateTypingStop ) update ; 
 typingProcessor . onTypingStop ( typing . getPeer ( ) , typing . getUid ( ) , typing . getTypingType ( ) ) ; 
 - } else if ( update instanceof UpdateIncomingCall ) { 
 - callsProcessor . onIncomingCall ( ( UpdateIncomingCall ) update ) ; 
 - } else if ( update instanceof UpdateCallInProgress ) { 
 - callsProcessor . onCallInProgress ( ( UpdateCallInProgress ) update ) ; 
 - } else if ( update instanceof UpdateCallSignal ) { 
 - callsProcessor . onSignal ( ( UpdateCallSignal ) update ) ; 
 - } else if ( update instanceof UpdateCallEnded ) { 
 - callsProcessor . onCallEnd ( ( UpdateCallEnded ) update ) ; 
 } 
 } 
 
 @ @ - 242 , 6 + 237 , 9 @ @ public class UpdateProcessor extends AbsModule { 
 if ( encryptedProcessor . process ( update ) ) { 
 return ; 
 } 
 + if ( callsProcessor . process ( update ) ) { 
 + return ; 
 + } 
 if ( update instanceof UpdateMessage ) { 
 UpdateMessage message = ( UpdateMessage ) update ; 
 messagesProcessor . onMessage ( message . getPeer ( ) , message . getSenderUid ( ) , message . getDate ( ) , message . getRid ( ) , 
 @ @ - 344 , 14 + 342 , 6 @ @ public class UpdateProcessor extends AbsModule { 
 stickersProcessor . onOwnStickerCollectionsChanged ( ( ( UpdateOwnStickersChanged ) update ) . getCollections ( ) ) ; 
 } else if ( update instanceof UpdateStickerCollectionsChanged ) { 
 stickersProcessor . onStickerCollectionsChanged ( ( ( UpdateStickerCollectionsChanged ) update ) . getCollections ( ) ) ; 
 - } else if ( update instanceof UpdateIncomingCall ) { 
 - callsProcessor . onIncomingCall ( ( UpdateIncomingCall ) update ) ; 
 - } else if ( update instanceof UpdateCallInProgress ) { 
 - callsProcessor . onCallInProgress ( ( UpdateCallInProgress ) update ) ; 
 - } else if ( update instanceof UpdateCallSignal ) { 
 - callsProcessor . onSignal ( ( UpdateCallSignal ) update ) ; 
 - } else if ( update instanceof UpdateCallEnded ) { 
 - callsProcessor . onCallEnd ( ( UpdateCallEnded ) update ) ; 
 } 
 }
