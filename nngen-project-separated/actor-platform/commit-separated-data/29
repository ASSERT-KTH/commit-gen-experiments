BLEU SCORE: 0.4294494810927983

TEST MSG: fix ( server : sequence ) : new messages in groupped dialog update
GENERATED MSG: fix ( server : sequence ) : increment counter in difference when groupped dialogs updated

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala < nl > index c1e0271 . . e89d7d4 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala < nl > @ @ - 60 , 7 + 60 , 7 @ @ trait DifferenceOperations { this : SeqUpdatesExtension ⇒ < nl > < nl > private def incrementCounter ( dialogs : IndexedSeq [ ApiDialogShort ] , upd : UpdateMessage ) = < nl > dialogs map { dlg ⇒ < nl > - if ( upd . peer = = dlg . peer ) { < nl > + if ( upd . peer = = dlg . peer & & upd . date > dlg . date ) { < nl > dlg . copy ( counter = dlg . counter + 1 ) < nl > } else { < nl > dlg < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > index 652b384 . . b7f3e0e 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > @ @ - 38 , 7 + 38 , 8 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { < nl > it should " not produce empty difference if there is one update bigger than difference size limit " in bigUpdate < nl > it should " map updates correctly " in mapUpdates < nl > it should " exclude optimized updates from sequence " in optimizedUpdates < nl > - it should " return single UpdateChatGroupsChanged in difference as if it was applied after all message reads " in chatGroupChanged < nl > + it should " return single UpdateChatGroupsChanged in difference as if it was applied after all message reads " in chatGroupChangedRead < nl > + it should " return single UpdateChatGroupsChanged in difference as if it was aplied after all received messages " in chatGroupChangedReceived < nl > < nl > private val config = SequenceServiceConfig . load ( ) . get < nl > < nl > @ @ - 278 , 7 + 279 , 7 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { < nl > } < nl > } < nl > < nl > - def chatGroupChanged ( ) : Unit = { < nl > + def chatGroupChangedRead ( ) : Unit = { < nl > val ( alice , aliceAuthId , aliceAuthSid , _ ) = createUser ( ) < nl > < nl > val sessionId = createSessionId ( ) < nl > @ @ - 358 , 4 + 359 , 58 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { < nl > < nl > } < nl > < nl > + def chatGroupChangedReceived ( ) : Unit = { < nl > + val ( alice , aliceAuthId , aliceAuthSid , _ ) = createUser ( ) < nl > + < nl > + val sessionId = createSessionId ( ) < nl > + val aliceClientData = ClientData ( aliceAuthId , sessionId , Some ( AuthData ( alice . id , aliceAuthSid , 42 ) ) ) < nl > + < nl > + val ( bob , bobAuthId , bobAuthSid , _ ) = createUser ( ) < nl > + val bobClientData = ClientData ( bobAuthId , sessionId , Some ( AuthData ( bob . id , bobAuthSid , 42 ) ) ) < nl > + < nl > + { < nl > + implicit val cd = bobClientData < nl > + 1 to 10 map { i ⇒ < nl > + sendMessageToUser ( alice . id , s " Hello $ i " ) . _ 2 . date < nl > + } < nl > + } < nl > + < nl > + { < nl > + implicit val cd = aliceClientData < nl > + / / FAVOURITE < nl > + whenReady ( msgService . handleFavouriteDialog ( getOutPeer ( bob . id , aliceAuthId ) ) ) ( identity ) < nl > + < nl > + / / UNFAVOURITE < nl > + whenReady ( msgService . handleUnfavouriteDialog ( getOutPeer ( bob . id , aliceAuthId ) ) ) ( identity ) < nl > + } < nl > + < nl > + { < nl > + implicit val cd = bobClientData < nl > + 1 to 5 map { i ⇒ < nl > + sendMessageToUser ( alice . id , s " Hello $ i " ) . _ 2 . date < nl > + } < nl > + } < nl > + < nl > + { < nl > + implicit val cd = aliceClientData < nl > + < nl > + whenReady ( service . handleGetDifference ( 0 , Array . empty , Vector . empty ) ) { res ⇒ < nl > + inside ( res ) { < nl > + case Ok ( rsp : ResponseGetDifference ) ⇒ < nl > + val groupedChatsUpdates = rsp . updates . filter ( _ . updateHeader = = UpdateChatGroupsChanged . header ) < nl > + groupedChatsUpdates should have length 1 < nl > + } < nl > + } < nl > + < nl > + expectUpdate ( classOf [ UpdateChatGroupsChanged ] ) { upd ⇒ < nl > + val optDirect = upd . dialogs . find ( _ . key = = DialogGroupKeys . Direct ) < nl > + optDirect shouldBe defined < nl > + < nl > + val bobsDialog = optDirect . get . dialogs . find ( _ . peer . id = = bob . id ) < nl > + bobsDialog . get . counter shouldEqual 15 < nl > + } < nl > + } < nl > + < nl > + } < nl > + < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala < nl > index b1a843e . . c1e0271 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala < nl > @ @ - 1 , 8 + 1 , 7 @ @ < nl > package im . actor . server . sequence . operations < nl > < nl > import akka . http . scaladsl . util . FastFuture < nl > - import im . actor . api . rpc . messaging . { ApiDialogGroup , ApiDialogShort , UpdateChatGroupsChanged , UpdateMessageReadByMe } < nl > - import im . actor . api . rpc . peers . ApiPeer < nl > + import im . actor . api . rpc . messaging . _ < nl > import im . actor . api . rpc . sequence . UpdateEmptyUpdate < nl > import im . actor . server . dialog . { DialogGroupKeys , DialogGroupTitles } < nl > import im . actor . server . model . { SeqUpdate , SerializedUpdate , UpdateMapping } < nl > @ @ - 59 , 6 + 58 , 15 @ @ trait DifferenceOperations { this : SeqUpdatesExtension ⇒ < nl > } < nl > } < nl > < nl > + private def incrementCounter ( dialogs : IndexedSeq [ ApiDialogShort ] , upd : UpdateMessage ) = < nl > + dialogs map { dlg ⇒ < nl > + if ( upd . peer = = dlg . peer ) { < nl > + dlg . copy ( counter = dlg . counter + 1 ) < nl > + } else { < nl > + dlg < nl > + } < nl > + } < nl > + < nl > def toVector = { < nl > val originalUpdates = ( generic + + reduced . values ) . values . toVector < nl > < nl > @ @ - 96 , 6 + 104 , 14 @ @ trait DifferenceOperations { this : SeqUpdatesExtension ⇒ < nl > rewriteDialogsCounter ( dir , upd ) < nl > ) < nl > } getOrElse acc < nl > + } else if ( upd . header = = upd . header ) { < nl > + UpdateMessage . parseFrom ( upd . body ) . right . toOption map { upd ⇒ < nl > + ( < nl > + incrementCounter ( fav , upd ) , < nl > + incrementCounter ( gr , upd ) , < nl > + incrementCounter ( dir , upd ) < nl > + ) < nl > + } getOrElse acc < nl > } else acc < nl > } < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > index 6f0e15d . . 652b384 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala < nl > @ @ - 307 , 12 + 307 , 15 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { < nl > < nl > { < nl > implicit val cd = aliceClientData < nl > + / / FAVOURITE < nl > whenReady ( msgService . handleFavouriteDialog ( getOutPeer ( bob . id , aliceAuthId ) ) ) ( identity ) < nl > < nl > / / read 5 messages , 15 left < nl > whenReady ( msgService . handleMessageRead ( getOutPeer ( bob . id , aliceAuthId ) , bobReadDates ( 4 ) ) ) ( identity ) < nl > < nl > + / / UNFAVOURITE < nl > whenReady ( msgService . handleUnfavouriteDialog ( getOutPeer ( bob . id , aliceAuthId ) ) ) ( identity ) < nl > + < nl > / / read 10 messages , 10 left < nl > whenReady ( msgService . handleMessageRead ( getOutPeer ( bob . id , aliceAuthId ) , bobReadDates ( 9 ) ) ) ( identity ) < nl > < nl > @ @ - 321 , 6 + 324 , 13 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { < nl > } < nl > < nl > { < nl > + implicit val cd = ClientData ( bobAuthId , sessionId , Some ( AuthData ( bob . id , bobAuthSid , 42 ) ) ) < nl > + 1 to 10 map { i ⇒ < nl > + sendMessageToUser ( alice . id , s " Hello $ i " ) . _ 2 . date < nl > + } < nl > + } < nl > + < nl > + { < nl > implicit val cd = aliceClientData < nl > < nl > whenReady ( service . handleGetDifference ( 0 , Array . empty , Vector . empty ) ) { res ⇒ < nl > @ @ - 336 , 7 + 346 , 7 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { < nl > optDirect shouldBe defined < nl > < nl > val bobsDialog = optDirect . get . dialogs . find ( _ . peer . id = = bob . id ) < nl > - bobsDialog . get . counter shouldEqual 10 < nl > + bobsDialog . get . counter shouldEqual 20 < nl > < nl > val optGroups = upd . dialogs . find ( _ . key = = DialogGroupKeys . Groups ) < nl > optGroups shouldBe defined

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala 
 index c1e0271 . . e89d7d4 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala 
 @ @ - 60 , 7 + 60 , 7 @ @ trait DifferenceOperations { this : SeqUpdatesExtension ⇒ 
 
 private def incrementCounter ( dialogs : IndexedSeq [ ApiDialogShort ] , upd : UpdateMessage ) = 
 dialogs map { dlg ⇒ 
 - if ( upd . peer = = dlg . peer ) { 
 + if ( upd . peer = = dlg . peer & & upd . date > dlg . date ) { 
 dlg . copy ( counter = dlg . counter + 1 ) 
 } else { 
 dlg 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 index 652b384 . . b7f3e0e 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 @ @ - 38 , 7 + 38 , 8 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { 
 it should " not produce empty difference if there is one update bigger than difference size limit " in bigUpdate 
 it should " map updates correctly " in mapUpdates 
 it should " exclude optimized updates from sequence " in optimizedUpdates 
 - it should " return single UpdateChatGroupsChanged in difference as if it was applied after all message reads " in chatGroupChanged 
 + it should " return single UpdateChatGroupsChanged in difference as if it was applied after all message reads " in chatGroupChangedRead 
 + it should " return single UpdateChatGroupsChanged in difference as if it was aplied after all received messages " in chatGroupChangedReceived 
 
 private val config = SequenceServiceConfig . load ( ) . get 
 
 @ @ - 278 , 7 + 279 , 7 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { 
 } 
 } 
 
 - def chatGroupChanged ( ) : Unit = { 
 + def chatGroupChangedRead ( ) : Unit = { 
 val ( alice , aliceAuthId , aliceAuthSid , _ ) = createUser ( ) 
 
 val sessionId = createSessionId ( ) 
 @ @ - 358 , 4 + 359 , 58 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { 
 
 } 
 
 + def chatGroupChangedReceived ( ) : Unit = { 
 + val ( alice , aliceAuthId , aliceAuthSid , _ ) = createUser ( ) 
 + 
 + val sessionId = createSessionId ( ) 
 + val aliceClientData = ClientData ( aliceAuthId , sessionId , Some ( AuthData ( alice . id , aliceAuthSid , 42 ) ) ) 
 + 
 + val ( bob , bobAuthId , bobAuthSid , _ ) = createUser ( ) 
 + val bobClientData = ClientData ( bobAuthId , sessionId , Some ( AuthData ( bob . id , bobAuthSid , 42 ) ) ) 
 + 
 + { 
 + implicit val cd = bobClientData 
 + 1 to 10 map { i ⇒ 
 + sendMessageToUser ( alice . id , s " Hello $ i " ) . _ 2 . date 
 + } 
 + } 
 + 
 + { 
 + implicit val cd = aliceClientData 
 + / / FAVOURITE 
 + whenReady ( msgService . handleFavouriteDialog ( getOutPeer ( bob . id , aliceAuthId ) ) ) ( identity ) 
 + 
 + / / UNFAVOURITE 
 + whenReady ( msgService . handleUnfavouriteDialog ( getOutPeer ( bob . id , aliceAuthId ) ) ) ( identity ) 
 + } 
 + 
 + { 
 + implicit val cd = bobClientData 
 + 1 to 5 map { i ⇒ 
 + sendMessageToUser ( alice . id , s " Hello $ i " ) . _ 2 . date 
 + } 
 + } 
 + 
 + { 
 + implicit val cd = aliceClientData 
 + 
 + whenReady ( service . handleGetDifference ( 0 , Array . empty , Vector . empty ) ) { res ⇒ 
 + inside ( res ) { 
 + case Ok ( rsp : ResponseGetDifference ) ⇒ 
 + val groupedChatsUpdates = rsp . updates . filter ( _ . updateHeader = = UpdateChatGroupsChanged . header ) 
 + groupedChatsUpdates should have length 1 
 + } 
 + } 
 + 
 + expectUpdate ( classOf [ UpdateChatGroupsChanged ] ) { upd ⇒ 
 + val optDirect = upd . dialogs . find ( _ . key = = DialogGroupKeys . Direct ) 
 + optDirect shouldBe defined 
 + 
 + val bobsDialog = optDirect . get . dialogs . find ( _ . peer . id = = bob . id ) 
 + bobsDialog . get . counter shouldEqual 15 
 + } 
 + } 
 + 
 + } 
 + 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala 
 index b1a843e . . c1e0271 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / operations / DifferenceOperations . scala 
 @ @ - 1 , 8 + 1 , 7 @ @ 
 package im . actor . server . sequence . operations 
 
 import akka . http . scaladsl . util . FastFuture 
 - import im . actor . api . rpc . messaging . { ApiDialogGroup , ApiDialogShort , UpdateChatGroupsChanged , UpdateMessageReadByMe } 
 - import im . actor . api . rpc . peers . ApiPeer 
 + import im . actor . api . rpc . messaging . _ 
 import im . actor . api . rpc . sequence . UpdateEmptyUpdate 
 import im . actor . server . dialog . { DialogGroupKeys , DialogGroupTitles } 
 import im . actor . server . model . { SeqUpdate , SerializedUpdate , UpdateMapping } 
 @ @ - 59 , 6 + 58 , 15 @ @ trait DifferenceOperations { this : SeqUpdatesExtension ⇒ 
 } 
 } 
 
 + private def incrementCounter ( dialogs : IndexedSeq [ ApiDialogShort ] , upd : UpdateMessage ) = 
 + dialogs map { dlg ⇒ 
 + if ( upd . peer = = dlg . peer ) { 
 + dlg . copy ( counter = dlg . counter + 1 ) 
 + } else { 
 + dlg 
 + } 
 + } 
 + 
 def toVector = { 
 val originalUpdates = ( generic + + reduced . values ) . values . toVector 
 
 @ @ - 96 , 6 + 104 , 14 @ @ trait DifferenceOperations { this : SeqUpdatesExtension ⇒ 
 rewriteDialogsCounter ( dir , upd ) 
 ) 
 } getOrElse acc 
 + } else if ( upd . header = = upd . header ) { 
 + UpdateMessage . parseFrom ( upd . body ) . right . toOption map { upd ⇒ 
 + ( 
 + incrementCounter ( fav , upd ) , 
 + incrementCounter ( gr , upd ) , 
 + incrementCounter ( dir , upd ) 
 + ) 
 + } getOrElse acc 
 } else acc 
 } 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 index 6f0e15d . . 652b384 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / SequenceServiceSpec . scala 
 @ @ - 307 , 12 + 307 , 15 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { 
 
 { 
 implicit val cd = aliceClientData 
 + / / FAVOURITE 
 whenReady ( msgService . handleFavouriteDialog ( getOutPeer ( bob . id , aliceAuthId ) ) ) ( identity ) 
 
 / / read 5 messages , 15 left 
 whenReady ( msgService . handleMessageRead ( getOutPeer ( bob . id , aliceAuthId ) , bobReadDates ( 4 ) ) ) ( identity ) 
 
 + / / UNFAVOURITE 
 whenReady ( msgService . handleUnfavouriteDialog ( getOutPeer ( bob . id , aliceAuthId ) ) ) ( identity ) 
 + 
 / / read 10 messages , 10 left 
 whenReady ( msgService . handleMessageRead ( getOutPeer ( bob . id , aliceAuthId ) , bobReadDates ( 9 ) ) ) ( identity ) 
 
 @ @ - 321 , 6 + 324 , 13 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { 
 } 
 
 { 
 + implicit val cd = ClientData ( bobAuthId , sessionId , Some ( AuthData ( bob . id , bobAuthSid , 42 ) ) ) 
 + 1 to 10 map { i ⇒ 
 + sendMessageToUser ( alice . id , s " Hello $ i " ) . _ 2 . date 
 + } 
 + } 
 + 
 + { 
 implicit val cd = aliceClientData 
 
 whenReady ( service . handleGetDifference ( 0 , Array . empty , Vector . empty ) ) { res ⇒ 
 @ @ - 336 , 7 + 346 , 7 @ @ final class SequenceServiceSpec extends BaseAppSuite ( { 
 optDirect shouldBe defined 
 
 val bobsDialog = optDirect . get . dialogs . find ( _ . peer . id = = bob . id ) 
 - bobsDialog . get . counter shouldEqual 10 
 + bobsDialog . get . counter shouldEqual 20 
 
 val optGroups = upd . dialogs . find ( _ . key = = DialogGroupKeys . Groups ) 
 optGroups shouldBe defined
