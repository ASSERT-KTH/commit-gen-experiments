BLEU SCORE: 0.45622720708659226

TEST MSG: feat ( core ) : add call signals
GENERATED MSG: feat ( core ) : Implemented peer search methods

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index a9ec5fc . . 5cfc81b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 10 , 10 + 10 , 8 @ @ import org . jetbrains . annotations . NotNull ; < nl > import org . jetbrains . annotations . Nullable ; < nl > < nl > import java . util . ArrayList ; < nl > - import java . util . HashSet ; < nl > import java . util . List ; < nl > < nl > - import im . actor . core . api . ApiMessage ; < nl > import im . actor . core . api . ApiSex ; < nl > import im . actor . core . api . ApiAuthSession ; < nl > import im . actor . core . api . rpc . ResponseDoCall ; < nl > @ @ - 62 , 7 + 60 , 6 @ @ import im . actor . core . viewmodel . UploadFileVM ; < nl > import im . actor . core . viewmodel . UploadFileVMCallback ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > import im . actor . runtime . actors . ActorSystem ; < nl > - import im . actor . runtime . json . JSONObject ; < nl > import im . actor . runtime . mvvm . MVVMCollection ; < nl > import im . actor . runtime . mvvm . ValueModel ; < nl > import im . actor . runtime . storage . PreferencesStorage ; < nl > @ @ - 1007 , 7 + 1004 , 7 @ @ public class Messenger { < nl > } < nl > < nl > public void answerCall ( long callId , CallsModule . CallCallback callback ) { < nl > - modules . getCallsModule ( ) . answerCall ( callId , callback ) ; < nl > + modules . getCallsModule ( ) . handleCall ( callId , callback ) ; < nl > } < nl > < nl > public void sendCallSignal ( long callId , byte [ ] data ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AbsSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AbsSignal . java < nl > new file mode 100644 < nl > index 0000000 . . c78d8fb < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AbsSignal . java < nl > @ @ - 0 , 0 + 1 , 58 @ @ < nl > + package im . actor . core . entity . signals ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . bser . BserObject ; < nl > + import im . actor . runtime . bser . BserParser ; < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + import im . actor . runtime . bser . DataInput ; < nl > + < nl > + public abstract class AbsSignal extends BserObject { < nl > + < nl > + String type ; < nl > + < nl > + @ Override < nl > + public void parse ( BserValues values ) throws IOException { < nl > + type = values . getString ( 1 ) ; < nl > + parseSignal ( values ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serialize ( BserWriter writer ) throws IOException { < nl > + writer . writeString ( 1 , getType ( ) ) ; < nl > + serializeSignal ( writer ) ; < nl > + } < nl > + < nl > + public static AbsSignal fromBytes ( byte [ ] data ) { < nl > + try { < nl > + < nl > + AbsSignal res = null ; < nl > + BserValues values = new BserValues ( BserParser . deserialize ( new DataInput ( data , 0 , data . length ) ) ) ; < nl > + if ( values . getString ( 1 ) . equals ( new OfferSignal ( ) . getType ( ) ) ) { < nl > + res = new OfferSignal ( ) ; < nl > + } else if ( values . getString ( 1 ) . equals ( new AnswerSignal ( ) . getType ( ) ) ) { < nl > + res = new AnswerSignal ( ) ; < nl > + } else if ( values . getString ( 1 ) . equals ( new CandidateSignal ( ) . getType ( ) ) ) { < nl > + res = new CandidateSignal ( ) ; < nl > + } < nl > + < nl > + if ( res ! = null ) { < nl > + res . parse ( values ) ; < nl > + } else { < nl > + Log . w ( " Signaling parser " , " unknown signal " ) ; < nl > + } < nl > + return res ; < nl > + } catch ( IOException e ) { < nl > + return null ; < nl > + } < nl > + } < nl > + < nl > + public abstract String getType ( ) ; < nl > + < nl > + protected abstract void parseSignal ( BserValues values ) throws IOException ; < nl > + < nl > + protected abstract void serializeSignal ( BserWriter writer ) throws IOException ; < nl > + < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AnswerSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AnswerSignal . java < nl > new file mode 100644 < nl > index 0000000 . . 9baf5de < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AnswerSignal . java < nl > @ @ - 0 , 0 + 1 , 40 @ @ < nl > + package im . actor . core . entity . signals ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + < nl > + / * * < nl > + * Created by root on 1 / 15 / 16 . < nl > + * / < nl > + public class AnswerSignal extends AbsSignal { < nl > + < nl > + private String sdp ; < nl > + < nl > + public AnswerSignal ( String sdp ) { < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + public AnswerSignal ( ) { < nl > + } < nl > + < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parseSignal ( BserValues values ) throws IOException { < nl > + this . sdp = values . getString ( 2 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serializeSignal ( BserWriter writer ) throws IOException { < nl > + writer . writeString ( 2 , sdp ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public String getType ( ) { < nl > + return " answer " ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / CandidateSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / CandidateSignal . java < nl > new file mode 100644 < nl > index 0000000 . . bd82885 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / CandidateSignal . java < nl > @ @ - 0 , 0 + 1 , 54 @ @ < nl > + package im . actor . core . entity . signals ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + < nl > + public class CandidateSignal extends AbsSignal { < nl > + < nl > + private String sdp ; < nl > + private int label ; < nl > + private String id ; < nl > + < nl > + public CandidateSignal ( String id , int label , String sdp ) { < nl > + this . sdp = sdp ; < nl > + this . id = id ; < nl > + this . label = label ; < nl > + < nl > + } < nl > + < nl > + public CandidateSignal ( ) { < nl > + } < nl > + < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + < nl > + public int getLabel ( ) { < nl > + return label ; < nl > + } < nl > + < nl > + public String getId ( ) { < nl > + return id ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parseSignal ( BserValues values ) throws IOException { < nl > + this . sdp = values . getString ( 2 ) ; < nl > + this . id = values . getString ( 3 ) ; < nl > + this . label = values . getInt ( 4 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serializeSignal ( BserWriter writer ) throws IOException { < nl > + writer . writeString ( 2 , sdp ) ; < nl > + writer . writeString ( 3 , id ) ; < nl > + writer . writeInt ( 4 , label ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public String getType ( ) { < nl > + return " candidate " ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / OfferSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / OfferSignal . java < nl > new file mode 100644 < nl > index 0000000 . . f4cd4f2 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / OfferSignal . java < nl > @ @ - 0 , 0 + 1 , 39 @ @ < nl > + package im . actor . core . entity . signals ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . runtime . bser . BserValues ; < nl > + import im . actor . runtime . bser . BserWriter ; < nl > + < nl > + public class OfferSignal extends AbsSignal { < nl > + < nl > + < nl > + private String sdp ; < nl > + < nl > + public OfferSignal ( String sdp ) { < nl > + this . sdp = sdp ; < nl > + } < nl > + < nl > + public OfferSignal ( ) { < nl > + } < nl > + < nl > + < nl > + public String getSdp ( ) { < nl > + return sdp ; < nl > + } < nl > + < nl > + @ Override < nl > + public void parseSignal ( BserValues values ) throws IOException { < nl > + this . sdp = values . getString ( 2 ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void serializeSignal ( BserWriter writer ) throws IOException { < nl > + writer . writeString ( 2 , sdp ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public String getType ( ) { < nl > + return " OFFER " ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > index 9ddd551 . . 7f5e078 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > @ @ - 10 , 9 + 10 , 8 @ @ import im . actor . core . api . rpc . RequestEndCall ; < nl > import im . actor . core . api . rpc . RequestSendCallSignal ; < nl > import im . actor . core . api . rpc . RequestSubscribeToCalls ; < nl > import im . actor . core . api . rpc . ResponseDoCall ; < nl > - import im . actor . core . api . updates . UpdateIncomingCall ; < nl > - import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . User ; < nl > + import im . actor . core . entity . signals . AbsSignal ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . events . IncomingCall ; < nl > @ @ - 76 , 8 + 75 , 11 @ @ public class CallsModule extends AbsModule { < nl > request ( new RequestCallInProgress ( callId , CALL _ TIMEOUT ) ) ; < nl > } < nl > < nl > - public void answerCall ( final long callId , final CallCallback callback ) { < nl > - calls . get ( callId ) . send ( new CallActor . AnswerCall ( callback ) ) ; < nl > + public void handleCall ( final long callId , final CallCallback callback ) { < nl > + ActorRef call = calls . get ( callId ) ; < nl > + if ( call ! = null ) { < nl > + call . send ( new CallActor . HandleCall ( callback ) ) ; < nl > + } < nl > } < nl > < nl > / / do end call < nl > @ @ - 122 , 8 + 124 , 8 @ @ public class CallsModule extends AbsModule { < nl > } < nl > } < nl > < nl > - public void sendSignal ( long callId , byte [ ] data ) { < nl > - request ( new RequestSendCallSignal ( callId , data ) ) ; < nl > + public void sendSignal ( long callId , AbsSignal signal ) { < nl > + request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; < nl > } < nl > < nl > public void onSignal ( long callId , byte [ ] data ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > index 6884b1c . . 123e199 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > @ @ - 47 , 8 + 47 , 8 @ @ public class CallActor extends ModuleActor { < nl > onEndCall ( ) ; < nl > } else if ( message instanceof Signal ) { < nl > onSignal ( ( ( Signal ) message ) . getData ( ) ) ; < nl > - } else if ( message instanceof AnswerCall ) { < nl > - onAnswerCall ( ( ( AnswerCall ) message ) . getCallback ( ) ) ; < nl > + } else if ( message instanceof HandleCall ) { < nl > + onHandleCall ( ( ( HandleCall ) message ) . getCallback ( ) ) ; < nl > } < nl > } < nl > < nl > @ @ - 97 , 7 + 97 , 7 @ @ public class CallActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - private void onAnswerCall ( CallsModule . CallCallback callCallback ) { < nl > + private void onHandleCall ( CallsModule . CallCallback callCallback ) { < nl > this . callback = callCallback ; < nl > for ( byte [ ] s : signals ) { < nl > callback . onSignal ( s ) ; < nl > @ @ - 134 , 10 + 134 , 10 @ @ public class CallActor extends ModuleActor { < nl > < nl > } < nl > < nl > - public static class AnswerCall { < nl > + public static class HandleCall { < nl > CallsModule . CallCallback callback ; < nl > < nl > - public AnswerCall ( CallsModule . CallCallback callback ) { < nl > + public HandleCall ( CallsModule . CallCallback callback ) { < nl > this . callback = callback ; < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 4583c31 . . 174a996 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 14 , 6 + 14 , 9 @ @ import im . actor . core . * ; < nl > import im . actor . core . api . ApiAuthSession ; < nl > import im . actor . core . entity . MentionFilterResult ; < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerSearchEntity ; < nl > + import im . actor . core . entity . PeerSearchType ; < nl > + import im . actor . core . entity . PeerType ; < nl > import im . actor . core . js . entity . * ; < nl > import im . actor . core . js . modules . JsBindedValueCallback ; < nl > import im . actor . core . js . providers . JsNotificationsProvider ; < nl > @ @ - 710 , 6 + 713 , 38 @ @ public class JsFacade implements Exportable { < nl > } ) ; < nl > } < nl > < nl > + public JsPromise findGroups ( ) { < nl > + return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > + @ Override < nl > + public void execute ( ) { < nl > + messenger . findPeers ( PeerSearchType . GROUPS ) . start ( new CommandCallback < List < PeerSearchEntity > > ( ) { < nl > + @ Override < nl > + public void onResult ( List < PeerSearchEntity > res ) { < nl > + Log . d ( TAG , " findGroups : result " ) ; < nl > + JsArray < JsPeerSearchResult > jsRes = JsArray . createArray ( ) . cast ( ) ; < nl > + for ( PeerSearchEntity s : res ) { < nl > + if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP ) { < nl > + jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) , < nl > + s . getDescription ( ) , s . getMembersCount ( ) , ( int ) ( s . getDate ( ) / 1000L ) , < nl > + messenger . buildPeerInfo ( Peer . user ( s . getCreatorUid ( ) ) ) , s . isPublic ( ) , < nl > + s . isJoined ( ) ) ) ; < nl > + } else if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) ) ) ; < nl > + } < nl > + / / jsRes . push ( ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + Log . d ( TAG , " findGroups : error " ) ; < nl > + reject ( e . getMessage ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > public void changeMyAvatar ( final JsFile file ) { < nl > String descriptor = provider . registerUploadFile ( file ) ; < nl > messenger . changeMyAvatar ( descriptor ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java < nl > new file mode 100644 < nl > index 0000000 . . d88fe40 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsPeerSearchResult extends JavaScriptObject { < nl > + < nl > + public native static JsPeerSearchResult create ( JsPeerInfo peerInfo , String description , < nl > + int membersCount , int created , JsPeerInfo creator , < nl > + boolean isPublic , boolean isJoined ) / * - { < nl > + return { peerInfo : peerInfo , description : description , membersCount : membersCount , created : created , < nl > + isPublic : isPublic , isJoined : isJoined } ; < nl > + } - * / ; < nl > + < nl > + public native static JsPeerSearchResult create ( JsPeerInfo peerInfo ) / * - { < nl > + return { peerInfo : peerInfo } ; < nl > + } - * / ; < nl > + < nl > + protected JsPeerSearchResult ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 63dbbc4 . . b59506e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 18 , 6 + 18 , 8 @ @ import im . actor . core . entity . FileReference ; < nl > import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . MentionFilterResult ; < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerSearchEntity ; < nl > + import im . actor . core . entity . PeerSearchType ; < nl > import im . actor . core . entity . PublicGroup ; < nl > import im . actor . core . entity . Sex ; < nl > import im . actor . core . entity . User ; < nl > @ @ - 746 , 6 + 748 , 17 @ @ public class Messenger { < nl > return modules . getMentions ( ) . findMentions ( gid , query ) ; < nl > } < nl > < nl > + / * * < nl > + * Finding peers by type < nl > + * < nl > + * @ param type type of peer < nl > + * @ return found peers < nl > + * / < nl > + @ ObjectiveCName ( " findPeersWithType : " ) < nl > + public Command < List < PeerSearchEntity > > findPeers ( PeerSearchType type ) { < nl > + return modules . getSearchModule ( ) . findPeers ( type ) ; < nl > + } < nl > + < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Peer operations < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java < nl > new file mode 100644 < nl > index 0000000 . . 53e6fed < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java < nl > @ @ - 0 , 0 + 1 , 57 @ @ < nl > + package im . actor . core . entity ; < nl > + < nl > + public class PeerSearchEntity { < nl > + < nl > + private Peer peer ; < nl > + private String title ; < nl > + private String description ; < nl > + private Integer membersCount ; < nl > + private Long date ; < nl > + private Integer creatorUid ; < nl > + private Boolean isPublic ; < nl > + private Boolean isJoined ; < nl > + < nl > + public PeerSearchEntity ( Peer peer , String title , String description , Integer membersCount , < nl > + Long date , Integer creatorUid , Boolean isPublic , Boolean isJoined ) { < nl > + this . peer = peer ; < nl > + this . title = title ; < nl > + this . description = description ; < nl > + this . membersCount = membersCount ; < nl > + this . date = date ; < nl > + this . creatorUid = creatorUid ; < nl > + this . isPublic = isPublic ; < nl > + this . isJoined = isJoined ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public String getDescription ( ) { < nl > + return description ; < nl > + } < nl > + < nl > + public Integer getMembersCount ( ) { < nl > + return membersCount ; < nl > + } < nl > + < nl > + public Long getDate ( ) { < nl > + return date ; < nl > + } < nl > + < nl > + public Integer getCreatorUid ( ) { < nl > + return creatorUid ; < nl > + } < nl > + < nl > + public Boolean isPublic ( ) { < nl > + return isPublic ; < nl > + } < nl > + < nl > + public Boolean isJoined ( ) { < nl > + return isJoined ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java < nl > new file mode 100644 < nl > index 0000000 . . 14b4f2b < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java < nl > @ @ - 0 , 0 + 1 , 5 @ @ < nl > + package im . actor . core . entity ; < nl > + < nl > + public enum PeerSearchType { < nl > + CONTACTS , GROUPS , PUBLIC < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java < nl > index 42c9383 . . 6b74816 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java < nl > @ @ - 4 , 19 + 4 , 33 @ @ < nl > < nl > package im . actor . core . modules . internal ; < nl > < nl > + import java . util . ArrayList ; < nl > import java . util . List ; < nl > < nl > + import im . actor . core . api . ApiPeerSearchResult ; < nl > + import im . actor . core . api . ApiSearchCondition ; < nl > + import im . actor . core . api . ApiSearchPeerType ; < nl > + import im . actor . core . api . ApiSearchPeerTypeCondition ; < nl > + import im . actor . core . api . rpc . RequestPeerSearch ; < nl > + import im . actor . core . api . rpc . ResponsePeerSearch ; < nl > import im . actor . core . entity . Dialog ; < nl > + import im . actor . core . entity . PeerSearchEntity ; < nl > + import im . actor . core . entity . PeerSearchType ; < nl > import im . actor . core . entity . SearchEntity ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . Modules ; < nl > import im . actor . core . modules . internal . search . SearchActor ; < nl > + import im . actor . core . network . RpcCallback ; < nl > + import im . actor . core . network . RpcException ; < nl > + import im . actor . core . viewmodel . Command ; < nl > + import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . actors . Props ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > < nl > + import static im . actor . core . modules . internal . messages . entity . EntityConverter . convert ; < nl > import static im . actor . runtime . actors . ActorSystem . system ; < nl > < nl > public class SearchModule extends AbsModule { < nl > @ @ - 55 , 6 + 69 , 57 @ @ public class SearchModule extends AbsModule { < nl > actorRef . send ( new SearchActor . OnContactsUpdated ( res ) ) ; < nl > } < nl > < nl > + public Command < List < PeerSearchEntity > > findPeers ( final PeerSearchType type ) { < nl > + final ApiSearchPeerType apiType ; < nl > + if ( type = = PeerSearchType . GROUPS ) { < nl > + apiType = ApiSearchPeerType . GROUPS ; < nl > + } else if ( type = = PeerSearchType . PUBLIC ) { < nl > + apiType = ApiSearchPeerType . PUBLIC ; < nl > + } else { < nl > + apiType = ApiSearchPeerType . CONTACTS ; < nl > + } < nl > + return new Command < List < PeerSearchEntity > > ( ) { < nl > + @ Override < nl > + public void start ( final CommandCallback < List < PeerSearchEntity > > callback ) { < nl > + ArrayList < ApiSearchCondition > conditions = new ArrayList < ApiSearchCondition > ( ) ; < nl > + conditions . add ( new ApiSearchPeerTypeCondition ( apiType ) ) ; < nl > + request ( new RequestPeerSearch ( conditions ) , new RpcCallback < ResponsePeerSearch > ( ) { < nl > + @ Override < nl > + public void onResult ( final ResponsePeerSearch response ) { < nl > + updates ( ) . executeRelatedResponse ( response . getUsers ( ) , < nl > + response . getGroups ( ) , new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + final ArrayList < PeerSearchEntity > res = new ArrayList < PeerSearchEntity > ( ) ; < nl > + for ( ApiPeerSearchResult r : response . getSearchResults ( ) ) { < nl > + res . add ( new PeerSearchEntity ( convert ( r . getPeer ( ) ) , r . getTitle ( ) , < nl > + r . getDescription ( ) , r . getMembersCount ( ) , r . getDateCreated ( ) , < nl > + r . getCreator ( ) , r . isPublic ( ) , r . isJoined ( ) ) ) ; < nl > + } < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onResult ( res ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( final RpcException e ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > public void resetModule ( ) { < nl > actorRef . send ( new SearchActor . Clear ( ) ) ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index a9ec5fc . . 5cfc81b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 10 , 10 + 10 , 8 @ @ import org . jetbrains . annotations . NotNull ; 
 import org . jetbrains . annotations . Nullable ; 
 
 import java . util . ArrayList ; 
 - import java . util . HashSet ; 
 import java . util . List ; 
 
 - import im . actor . core . api . ApiMessage ; 
 import im . actor . core . api . ApiSex ; 
 import im . actor . core . api . ApiAuthSession ; 
 import im . actor . core . api . rpc . ResponseDoCall ; 
 @ @ - 62 , 7 + 60 , 6 @ @ import im . actor . core . viewmodel . UploadFileVM ; 
 import im . actor . core . viewmodel . UploadFileVMCallback ; 
 import im . actor . core . viewmodel . UserVM ; 
 import im . actor . runtime . actors . ActorSystem ; 
 - import im . actor . runtime . json . JSONObject ; 
 import im . actor . runtime . mvvm . MVVMCollection ; 
 import im . actor . runtime . mvvm . ValueModel ; 
 import im . actor . runtime . storage . PreferencesStorage ; 
 @ @ - 1007 , 7 + 1004 , 7 @ @ public class Messenger { 
 } 
 
 public void answerCall ( long callId , CallsModule . CallCallback callback ) { 
 - modules . getCallsModule ( ) . answerCall ( callId , callback ) ; 
 + modules . getCallsModule ( ) . handleCall ( callId , callback ) ; 
 } 
 
 public void sendCallSignal ( long callId , byte [ ] data ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AbsSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AbsSignal . java 
 new file mode 100644 
 index 0000000 . . c78d8fb 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AbsSignal . java 
 @ @ - 0 , 0 + 1 , 58 @ @ 
 + package im . actor . core . entity . signals ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . bser . BserObject ; 
 + import im . actor . runtime . bser . BserParser ; 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + import im . actor . runtime . bser . DataInput ; 
 + 
 + public abstract class AbsSignal extends BserObject { 
 + 
 + String type ; 
 + 
 + @ Override 
 + public void parse ( BserValues values ) throws IOException { 
 + type = values . getString ( 1 ) ; 
 + parseSignal ( values ) ; 
 + } 
 + 
 + @ Override 
 + public void serialize ( BserWriter writer ) throws IOException { 
 + writer . writeString ( 1 , getType ( ) ) ; 
 + serializeSignal ( writer ) ; 
 + } 
 + 
 + public static AbsSignal fromBytes ( byte [ ] data ) { 
 + try { 
 + 
 + AbsSignal res = null ; 
 + BserValues values = new BserValues ( BserParser . deserialize ( new DataInput ( data , 0 , data . length ) ) ) ; 
 + if ( values . getString ( 1 ) . equals ( new OfferSignal ( ) . getType ( ) ) ) { 
 + res = new OfferSignal ( ) ; 
 + } else if ( values . getString ( 1 ) . equals ( new AnswerSignal ( ) . getType ( ) ) ) { 
 + res = new AnswerSignal ( ) ; 
 + } else if ( values . getString ( 1 ) . equals ( new CandidateSignal ( ) . getType ( ) ) ) { 
 + res = new CandidateSignal ( ) ; 
 + } 
 + 
 + if ( res ! = null ) { 
 + res . parse ( values ) ; 
 + } else { 
 + Log . w ( " Signaling parser " , " unknown signal " ) ; 
 + } 
 + return res ; 
 + } catch ( IOException e ) { 
 + return null ; 
 + } 
 + } 
 + 
 + public abstract String getType ( ) ; 
 + 
 + protected abstract void parseSignal ( BserValues values ) throws IOException ; 
 + 
 + protected abstract void serializeSignal ( BserWriter writer ) throws IOException ; 
 + 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AnswerSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AnswerSignal . java 
 new file mode 100644 
 index 0000000 . . 9baf5de 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / AnswerSignal . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package im . actor . core . entity . signals ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + 
 + / * * 
 + * Created by root on 1 / 15 / 16 . 
 + * / 
 + public class AnswerSignal extends AbsSignal { 
 + 
 + private String sdp ; 
 + 
 + public AnswerSignal ( String sdp ) { 
 + this . sdp = sdp ; 
 + } 
 + 
 + public AnswerSignal ( ) { 
 + } 
 + 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + 
 + @ Override 
 + public void parseSignal ( BserValues values ) throws IOException { 
 + this . sdp = values . getString ( 2 ) ; 
 + } 
 + 
 + @ Override 
 + public void serializeSignal ( BserWriter writer ) throws IOException { 
 + writer . writeString ( 2 , sdp ) ; 
 + } 
 + 
 + @ Override 
 + public String getType ( ) { 
 + return " answer " ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / CandidateSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / CandidateSignal . java 
 new file mode 100644 
 index 0000000 . . bd82885 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / CandidateSignal . java 
 @ @ - 0 , 0 + 1 , 54 @ @ 
 + package im . actor . core . entity . signals ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + 
 + public class CandidateSignal extends AbsSignal { 
 + 
 + private String sdp ; 
 + private int label ; 
 + private String id ; 
 + 
 + public CandidateSignal ( String id , int label , String sdp ) { 
 + this . sdp = sdp ; 
 + this . id = id ; 
 + this . label = label ; 
 + 
 + } 
 + 
 + public CandidateSignal ( ) { 
 + } 
 + 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + 
 + public int getLabel ( ) { 
 + return label ; 
 + } 
 + 
 + public String getId ( ) { 
 + return id ; 
 + } 
 + 
 + @ Override 
 + public void parseSignal ( BserValues values ) throws IOException { 
 + this . sdp = values . getString ( 2 ) ; 
 + this . id = values . getString ( 3 ) ; 
 + this . label = values . getInt ( 4 ) ; 
 + } 
 + 
 + @ Override 
 + public void serializeSignal ( BserWriter writer ) throws IOException { 
 + writer . writeString ( 2 , sdp ) ; 
 + writer . writeString ( 3 , id ) ; 
 + writer . writeInt ( 4 , label ) ; 
 + } 
 + 
 + @ Override 
 + public String getType ( ) { 
 + return " candidate " ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / OfferSignal . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / OfferSignal . java 
 new file mode 100644 
 index 0000000 . . f4cd4f2 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / signals / OfferSignal . java 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + package im . actor . core . entity . signals ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . runtime . bser . BserValues ; 
 + import im . actor . runtime . bser . BserWriter ; 
 + 
 + public class OfferSignal extends AbsSignal { 
 + 
 + 
 + private String sdp ; 
 + 
 + public OfferSignal ( String sdp ) { 
 + this . sdp = sdp ; 
 + } 
 + 
 + public OfferSignal ( ) { 
 + } 
 + 
 + 
 + public String getSdp ( ) { 
 + return sdp ; 
 + } 
 + 
 + @ Override 
 + public void parseSignal ( BserValues values ) throws IOException { 
 + this . sdp = values . getString ( 2 ) ; 
 + } 
 + 
 + @ Override 
 + public void serializeSignal ( BserWriter writer ) throws IOException { 
 + writer . writeString ( 2 , sdp ) ; 
 + } 
 + 
 + @ Override 
 + public String getType ( ) { 
 + return " OFFER " ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 index 9ddd551 . . 7f5e078 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 @ @ - 10 , 9 + 10 , 8 @ @ import im . actor . core . api . rpc . RequestEndCall ; 
 import im . actor . core . api . rpc . RequestSendCallSignal ; 
 import im . actor . core . api . rpc . RequestSubscribeToCalls ; 
 import im . actor . core . api . rpc . ResponseDoCall ; 
 - import im . actor . core . api . updates . UpdateIncomingCall ; 
 - import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . User ; 
 + import im . actor . core . entity . signals . AbsSignal ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . events . IncomingCall ; 
 @ @ - 76 , 8 + 75 , 11 @ @ public class CallsModule extends AbsModule { 
 request ( new RequestCallInProgress ( callId , CALL _ TIMEOUT ) ) ; 
 } 
 
 - public void answerCall ( final long callId , final CallCallback callback ) { 
 - calls . get ( callId ) . send ( new CallActor . AnswerCall ( callback ) ) ; 
 + public void handleCall ( final long callId , final CallCallback callback ) { 
 + ActorRef call = calls . get ( callId ) ; 
 + if ( call ! = null ) { 
 + call . send ( new CallActor . HandleCall ( callback ) ) ; 
 + } 
 } 
 
 / / do end call 
 @ @ - 122 , 8 + 124 , 8 @ @ public class CallsModule extends AbsModule { 
 } 
 } 
 
 - public void sendSignal ( long callId , byte [ ] data ) { 
 - request ( new RequestSendCallSignal ( callId , data ) ) ; 
 + public void sendSignal ( long callId , AbsSignal signal ) { 
 + request ( new RequestSendCallSignal ( callId , signal . toByteArray ( ) ) ) ; 
 } 
 
 public void onSignal ( long callId , byte [ ] data ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 index 6884b1c . . 123e199 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 @ @ - 47 , 8 + 47 , 8 @ @ public class CallActor extends ModuleActor { 
 onEndCall ( ) ; 
 } else if ( message instanceof Signal ) { 
 onSignal ( ( ( Signal ) message ) . getData ( ) ) ; 
 - } else if ( message instanceof AnswerCall ) { 
 - onAnswerCall ( ( ( AnswerCall ) message ) . getCallback ( ) ) ; 
 + } else if ( message instanceof HandleCall ) { 
 + onHandleCall ( ( ( HandleCall ) message ) . getCallback ( ) ) ; 
 } 
 } 
 
 @ @ - 97 , 7 + 97 , 7 @ @ public class CallActor extends ModuleActor { 
 } 
 } 
 
 - private void onAnswerCall ( CallsModule . CallCallback callCallback ) { 
 + private void onHandleCall ( CallsModule . CallCallback callCallback ) { 
 this . callback = callCallback ; 
 for ( byte [ ] s : signals ) { 
 callback . onSignal ( s ) ; 
 @ @ - 134 , 10 + 134 , 10 @ @ public class CallActor extends ModuleActor { 
 
 } 
 
 - public static class AnswerCall { 
 + public static class HandleCall { 
 CallsModule . CallCallback callback ; 
 
 - public AnswerCall ( CallsModule . CallCallback callback ) { 
 + public HandleCall ( CallsModule . CallCallback callback ) { 
 this . callback = callback ; 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 4583c31 . . 174a996 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 14 , 6 + 14 , 9 @ @ import im . actor . core . * ; 
 import im . actor . core . api . ApiAuthSession ; 
 import im . actor . core . entity . MentionFilterResult ; 
 import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerSearchEntity ; 
 + import im . actor . core . entity . PeerSearchType ; 
 + import im . actor . core . entity . PeerType ; 
 import im . actor . core . js . entity . * ; 
 import im . actor . core . js . modules . JsBindedValueCallback ; 
 import im . actor . core . js . providers . JsNotificationsProvider ; 
 @ @ - 710 , 6 + 713 , 38 @ @ public class JsFacade implements Exportable { 
 } ) ; 
 } 
 
 + public JsPromise findGroups ( ) { 
 + return JsPromise . create ( new JsPromiseExecutor ( ) { 
 + @ Override 
 + public void execute ( ) { 
 + messenger . findPeers ( PeerSearchType . GROUPS ) . start ( new CommandCallback < List < PeerSearchEntity > > ( ) { 
 + @ Override 
 + public void onResult ( List < PeerSearchEntity > res ) { 
 + Log . d ( TAG , " findGroups : result " ) ; 
 + JsArray < JsPeerSearchResult > jsRes = JsArray . createArray ( ) . cast ( ) ; 
 + for ( PeerSearchEntity s : res ) { 
 + if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP ) { 
 + jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) , 
 + s . getDescription ( ) , s . getMembersCount ( ) , ( int ) ( s . getDate ( ) / 1000L ) , 
 + messenger . buildPeerInfo ( Peer . user ( s . getCreatorUid ( ) ) ) , s . isPublic ( ) , 
 + s . isJoined ( ) ) ) ; 
 + } else if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) ) ) ; 
 + } 
 + / / jsRes . push ( ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + Log . d ( TAG , " findGroups : error " ) ; 
 + reject ( e . getMessage ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 public void changeMyAvatar ( final JsFile file ) { 
 String descriptor = provider . registerUploadFile ( file ) ; 
 messenger . changeMyAvatar ( descriptor ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java 
 new file mode 100644 
 index 0000000 . . d88fe40 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsPeerSearchResult extends JavaScriptObject { 
 + 
 + public native static JsPeerSearchResult create ( JsPeerInfo peerInfo , String description , 
 + int membersCount , int created , JsPeerInfo creator , 
 + boolean isPublic , boolean isJoined ) / * - { 
 + return { peerInfo : peerInfo , description : description , membersCount : membersCount , created : created , 
 + isPublic : isPublic , isJoined : isJoined } ; 
 + } - * / ; 
 + 
 + public native static JsPeerSearchResult create ( JsPeerInfo peerInfo ) / * - { 
 + return { peerInfo : peerInfo } ; 
 + } - * / ; 
 + 
 + protected JsPeerSearchResult ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 63dbbc4 . . b59506e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 18 , 6 + 18 , 8 @ @ import im . actor . core . entity . FileReference ; 
 import im . actor . core . entity . Group ; 
 import im . actor . core . entity . MentionFilterResult ; 
 import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerSearchEntity ; 
 + import im . actor . core . entity . PeerSearchType ; 
 import im . actor . core . entity . PublicGroup ; 
 import im . actor . core . entity . Sex ; 
 import im . actor . core . entity . User ; 
 @ @ - 746 , 6 + 748 , 17 @ @ public class Messenger { 
 return modules . getMentions ( ) . findMentions ( gid , query ) ; 
 } 
 
 + / * * 
 + * Finding peers by type 
 + * 
 + * @ param type type of peer 
 + * @ return found peers 
 + * / 
 + @ ObjectiveCName ( " findPeersWithType : " ) 
 + public Command < List < PeerSearchEntity > > findPeers ( PeerSearchType type ) { 
 + return modules . getSearchModule ( ) . findPeers ( type ) ; 
 + } 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Peer operations 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java 
 new file mode 100644 
 index 0000000 . . 53e6fed 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package im . actor . core . entity ; 
 + 
 + public class PeerSearchEntity { 
 + 
 + private Peer peer ; 
 + private String title ; 
 + private String description ; 
 + private Integer membersCount ; 
 + private Long date ; 
 + private Integer creatorUid ; 
 + private Boolean isPublic ; 
 + private Boolean isJoined ; 
 + 
 + public PeerSearchEntity ( Peer peer , String title , String description , Integer membersCount , 
 + Long date , Integer creatorUid , Boolean isPublic , Boolean isJoined ) { 
 + this . peer = peer ; 
 + this . title = title ; 
 + this . description = description ; 
 + this . membersCount = membersCount ; 
 + this . date = date ; 
 + this . creatorUid = creatorUid ; 
 + this . isPublic = isPublic ; 
 + this . isJoined = isJoined ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public String getDescription ( ) { 
 + return description ; 
 + } 
 + 
 + public Integer getMembersCount ( ) { 
 + return membersCount ; 
 + } 
 + 
 + public Long getDate ( ) { 
 + return date ; 
 + } 
 + 
 + public Integer getCreatorUid ( ) { 
 + return creatorUid ; 
 + } 
 + 
 + public Boolean isPublic ( ) { 
 + return isPublic ; 
 + } 
 + 
 + public Boolean isJoined ( ) { 
 + return isJoined ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java 
 new file mode 100644 
 index 0000000 . . 14b4f2b 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package im . actor . core . entity ; 
 + 
 + public enum PeerSearchType { 
 + CONTACTS , GROUPS , PUBLIC 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java 
 index 42c9383 . . 6b74816 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java 
 @ @ - 4 , 19 + 4 , 33 @ @ 
 
 package im . actor . core . modules . internal ; 
 
 + import java . util . ArrayList ; 
 import java . util . List ; 
 
 + import im . actor . core . api . ApiPeerSearchResult ; 
 + import im . actor . core . api . ApiSearchCondition ; 
 + import im . actor . core . api . ApiSearchPeerType ; 
 + import im . actor . core . api . ApiSearchPeerTypeCondition ; 
 + import im . actor . core . api . rpc . RequestPeerSearch ; 
 + import im . actor . core . api . rpc . ResponsePeerSearch ; 
 import im . actor . core . entity . Dialog ; 
 + import im . actor . core . entity . PeerSearchEntity ; 
 + import im . actor . core . entity . PeerSearchType ; 
 import im . actor . core . entity . SearchEntity ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . Modules ; 
 import im . actor . core . modules . internal . search . SearchActor ; 
 + import im . actor . core . network . RpcCallback ; 
 + import im . actor . core . network . RpcException ; 
 + import im . actor . core . viewmodel . Command ; 
 + import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . actors . Props ; 
 import im . actor . runtime . storage . ListEngine ; 
 
 + import static im . actor . core . modules . internal . messages . entity . EntityConverter . convert ; 
 import static im . actor . runtime . actors . ActorSystem . system ; 
 
 public class SearchModule extends AbsModule { 
 @ @ - 55 , 6 + 69 , 57 @ @ public class SearchModule extends AbsModule { 
 actorRef . send ( new SearchActor . OnContactsUpdated ( res ) ) ; 
 } 
 
 + public Command < List < PeerSearchEntity > > findPeers ( final PeerSearchType type ) { 
 + final ApiSearchPeerType apiType ; 
 + if ( type = = PeerSearchType . GROUPS ) { 
 + apiType = ApiSearchPeerType . GROUPS ; 
 + } else if ( type = = PeerSearchType . PUBLIC ) { 
 + apiType = ApiSearchPeerType . PUBLIC ; 
 + } else { 
 + apiType = ApiSearchPeerType . CONTACTS ; 
 + } 
 + return new Command < List < PeerSearchEntity > > ( ) { 
 + @ Override 
 + public void start ( final CommandCallback < List < PeerSearchEntity > > callback ) { 
 + ArrayList < ApiSearchCondition > conditions = new ArrayList < ApiSearchCondition > ( ) ; 
 + conditions . add ( new ApiSearchPeerTypeCondition ( apiType ) ) ; 
 + request ( new RequestPeerSearch ( conditions ) , new RpcCallback < ResponsePeerSearch > ( ) { 
 + @ Override 
 + public void onResult ( final ResponsePeerSearch response ) { 
 + updates ( ) . executeRelatedResponse ( response . getUsers ( ) , 
 + response . getGroups ( ) , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + final ArrayList < PeerSearchEntity > res = new ArrayList < PeerSearchEntity > ( ) ; 
 + for ( ApiPeerSearchResult r : response . getSearchResults ( ) ) { 
 + res . add ( new PeerSearchEntity ( convert ( r . getPeer ( ) ) , r . getTitle ( ) , 
 + r . getDescription ( ) , r . getMembersCount ( ) , r . getDateCreated ( ) , 
 + r . getCreator ( ) , r . isPublic ( ) , r . isJoined ( ) ) ) ; 
 + } 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onResult ( res ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( final RpcException e ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + } ; 
 + } 
 + 
 public void resetModule ( ) { 
 actorRef . send ( new SearchActor . Clear ( ) ) ; 
 }
