BLEU SCORE: 0.08737167851715878

TEST MSG: fix ( server : core ) : fix unread counter in public groups
GENERATED MSG: test ( server ) : UnreadCounterSpec

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > index c40541f . . 857d583 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > @ @ - 229 , 10 + 229 , 10 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > if ( isSharedUser ( historyOwner ) ) { < nl > for { < nl > isMember ← DBIO . from ( groupExt . getMemberIds ( peer . id ) map { case ( memberIds , _ , _ ) ⇒ memberIds contains clientUserId } ) < nl > - result ← if ( isMember ) HistoryMessageRepo . getUnreadCount ( historyOwner , peer , ownerLastReadAt ) else DBIO . successful ( 0 ) < nl > + result ← if ( isMember ) HistoryMessageRepo . getUnreadCount ( historyOwner , clientUserId , peer , ownerLastReadAt ) else DBIO . successful ( 0 ) < nl > } yield result < nl > } else { < nl > - HistoryMessageRepo . getUnreadCount ( historyOwner , peer , ownerLastReadAt ) < nl > + HistoryMessageRepo . getUnreadCount ( historyOwner , clientUserId , peer , ownerLastReadAt ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > index bb6dbb0 . . 3774733 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala < nl > @ @ - 120 , 10 + 120 , 10 @ @ object HistoryMessageRepo { < nl > . map ( m ⇒ ( m . messageContentHeader , m . messageContentData ) ) < nl > . update ( ( messageContentHeader , messageContentData ) ) < nl > < nl > - def getUnreadCount ( userId : Int , peer : Peer , lastReadAt : DateTime , noServiceMessages : Boolean = false ) : FixedSqlAction [ Int , PostgresDriver . api . NoStream , Read ] = < nl > + def getUnreadCount ( historyOwner : Int , clientUserId : Int , peer : Peer , lastReadAt : DateTime , noServiceMessages : Boolean = false ) : FixedSqlAction [ Int , PostgresDriver . api . NoStream , Read ] = < nl > ( if ( noServiceMessages ) withoutServiceMessages else notDeletedMessages ) < nl > - . filter ( m ⇒ m . userId = = = userId & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id ) < nl > - . filter ( m ⇒ m . date > lastReadAt & & m . senderUserId = ! = userId ) < nl > + . filter ( m ⇒ m . userId = = = historyOwner & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id ) < nl > + . filter ( m ⇒ m . date > lastReadAt & & m . senderUserId = ! = clientUserId ) < nl > . length < nl > . result < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / UnreadCountersSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / UnreadCountersSpec . scala < nl > index f8f75a6 . . e2a9f0d 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / UnreadCountersSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / UnreadCountersSpec . scala < nl > @ @ - 2 , 13 + 2 , 17 @ @ package im . actor . server . dialog < nl > < nl > import im . actor . api . rpc . messaging . ResponseLoadDialogs < nl > import im . actor . api . rpc . _ < nl > - import im . actor . server . { ImplicitSessionRegion , ImplicitAuthService , BaseAppSuite } < nl > + import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } < nl > + import im . actor . server . { GroupsServiceHelpers , ImplicitSessionRegion , ImplicitAuthService , BaseAppSuite } < nl > import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl < nl > < nl > - final class UnreadCountersSpec extends BaseAppSuite with ImplicitAuthService with ImplicitSessionRegion { < nl > + final class UnreadCountersSpec extends BaseAppSuite with ImplicitAuthService with ImplicitSessionRegion with GroupsServiceHelpers { < nl > it should " consider own messages read " in ownMessagesRead < nl > < nl > + it should " display correct unread count in public groups " in publicGroups < nl > + < nl > private implicit lazy val msgService = MessagingServiceImpl ( ) < nl > + private implicit lazy val groupsService = new GroupsServiceImpl ( GroupInviteConfig ( " " ) ) < nl > < nl > def ownMessagesRead ( ) : Unit = { < nl > val ( alice , aliceAuthId , aliceAuthSid , _ ) = createUser ( ) < nl > @ @ - 35 , 4 + 39 , 26 @ @ final class UnreadCountersSpec extends BaseAppSuite with ImplicitAuthService wit < nl > } < nl > } < nl > } < nl > + < nl > + def publicGroups ( ) : Unit = { < nl > + < nl > + val ( alice , aliceAuthId , aliceAuthSid , _ ) = createUser ( ) < nl > + implicit val aliceClientData = ClientData ( aliceAuthId , 1 , Some ( AuthData ( alice . id , aliceAuthSid ) ) ) < nl > + < nl > + val groupPeer = createPubGroup ( " Public " , " " , Set ( alice . id ) ) . groupPeer < nl > + < nl > + for ( i ← 1 to 10 ) { < nl > + sendMessageToGroup ( groupPeer . groupId , textMessage ( s " Hello $ i " ) ) < nl > + } < nl > + < nl > + Thread . sleep ( 1000 ) < nl > + < nl > + whenReady ( msgService . handleLoadDialogs ( 0 , 100 ) ) { resp ⇒ < nl > + inside ( resp ) { < nl > + case Ok ( ResponseLoadDialogs ( _ , _ , dialogs ) ) ⇒ < nl > + dialogs . head . unreadCount should = = = ( 0 ) < nl > + } < nl > + } < nl > + } < nl > + < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala < nl > index 63e1c8d . . c1afcf0 100644 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala < nl > + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala < nl > @ @ - 17 , 6 + 17 , 7 @ @ abstract class BaseAppSuite ( _ system : ActorSystem = { < nl > extends ActorSuite ( _ system ) < nl > with FlatSpecLike < nl > with ScalaFutures < nl > + with MessagingSpecHelpers < nl > with Matchers < nl > with Inside < nl > with ServiceSpecMatchers < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / UnreadCountersSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / UnreadCountersSpec . scala < nl > new file mode 100644 < nl > index 0000000 . . f8f75a6 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / UnreadCountersSpec . scala < nl > @ @ - 0 , 0 + 1 , 38 @ @ < nl > + package im . actor . server . dialog < nl > + < nl > + import im . actor . api . rpc . messaging . ResponseLoadDialogs < nl > + import im . actor . api . rpc . _ < nl > + import im . actor . server . { ImplicitSessionRegion , ImplicitAuthService , BaseAppSuite } < nl > + import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl < nl > + < nl > + final class UnreadCountersSpec extends BaseAppSuite with ImplicitAuthService with ImplicitSessionRegion { < nl > + it should " consider own messages read " in ownMessagesRead < nl > + < nl > + private implicit lazy val msgService = MessagingServiceImpl ( ) < nl > + < nl > + def ownMessagesRead ( ) : Unit = { < nl > + val ( alice , aliceAuthId , aliceAuthSid , _ ) = createUser ( ) < nl > + val ( bob , bobAuthId , bobAuthSid , _ ) = createUser ( ) < nl > + < nl > + { < nl > + implicit val clientData = ClientData ( bobAuthId , 2 , Some ( AuthData ( bob . id , bobAuthSid ) ) ) < nl > + < nl > + sendMessageToUser ( alice . id , textMessage ( " Hi Alice ! " ) ) < nl > + } < nl > + < nl > + { < nl > + implicit val clientData = ClientData ( aliceAuthId , 1 , Some ( AuthData ( alice . id , aliceAuthSid ) ) ) < nl > + < nl > + sendMessageToUser ( bob . id , textMessage ( " Hi Bob ! " ) ) < nl > + < nl > + Thread . sleep ( 1000 ) < nl > + < nl > + whenReady ( msgService . handleLoadDialogs ( 0 , 100 ) ) { resp ⇒ < nl > + inside ( resp ) { < nl > + case Ok ( ResponseLoadDialogs ( _ , _ , dialogs ) ) ⇒ < nl > + dialogs . head . unreadCount should = = = ( 1 ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 index c40541f . . 857d583 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 @ @ - 229 , 10 + 229 , 10 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 if ( isSharedUser ( historyOwner ) ) { 
 for { 
 isMember ← DBIO . from ( groupExt . getMemberIds ( peer . id ) map { case ( memberIds , _ , _ ) ⇒ memberIds contains clientUserId } ) 
 - result ← if ( isMember ) HistoryMessageRepo . getUnreadCount ( historyOwner , peer , ownerLastReadAt ) else DBIO . successful ( 0 ) 
 + result ← if ( isMember ) HistoryMessageRepo . getUnreadCount ( historyOwner , clientUserId , peer , ownerLastReadAt ) else DBIO . successful ( 0 ) 
 } yield result 
 } else { 
 - HistoryMessageRepo . getUnreadCount ( historyOwner , peer , ownerLastReadAt ) 
 + HistoryMessageRepo . getUnreadCount ( historyOwner , clientUserId , peer , ownerLastReadAt ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 index bb6dbb0 . . 3774733 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessageRepo . scala 
 @ @ - 120 , 10 + 120 , 10 @ @ object HistoryMessageRepo { 
 . map ( m ⇒ ( m . messageContentHeader , m . messageContentData ) ) 
 . update ( ( messageContentHeader , messageContentData ) ) 
 
 - def getUnreadCount ( userId : Int , peer : Peer , lastReadAt : DateTime , noServiceMessages : Boolean = false ) : FixedSqlAction [ Int , PostgresDriver . api . NoStream , Read ] = 
 + def getUnreadCount ( historyOwner : Int , clientUserId : Int , peer : Peer , lastReadAt : DateTime , noServiceMessages : Boolean = false ) : FixedSqlAction [ Int , PostgresDriver . api . NoStream , Read ] = 
 ( if ( noServiceMessages ) withoutServiceMessages else notDeletedMessages ) 
 - . filter ( m ⇒ m . userId = = = userId & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id ) 
 - . filter ( m ⇒ m . date > lastReadAt & & m . senderUserId = ! = userId ) 
 + . filter ( m ⇒ m . userId = = = historyOwner & & m . peerType = = = peer . typ . value & & m . peerId = = = peer . id ) 
 + . filter ( m ⇒ m . date > lastReadAt & & m . senderUserId = ! = clientUserId ) 
 . length 
 . result 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / UnreadCountersSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / UnreadCountersSpec . scala 
 index f8f75a6 . . e2a9f0d 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / UnreadCountersSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / UnreadCountersSpec . scala 
 @ @ - 2 , 13 + 2 , 17 @ @ package im . actor . server . dialog 
 
 import im . actor . api . rpc . messaging . ResponseLoadDialogs 
 import im . actor . api . rpc . _ 
 - import im . actor . server . { ImplicitSessionRegion , ImplicitAuthService , BaseAppSuite } 
 + import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } 
 + import im . actor . server . { GroupsServiceHelpers , ImplicitSessionRegion , ImplicitAuthService , BaseAppSuite } 
 import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl 
 
 - final class UnreadCountersSpec extends BaseAppSuite with ImplicitAuthService with ImplicitSessionRegion { 
 + final class UnreadCountersSpec extends BaseAppSuite with ImplicitAuthService with ImplicitSessionRegion with GroupsServiceHelpers { 
 it should " consider own messages read " in ownMessagesRead 
 
 + it should " display correct unread count in public groups " in publicGroups 
 + 
 private implicit lazy val msgService = MessagingServiceImpl ( ) 
 + private implicit lazy val groupsService = new GroupsServiceImpl ( GroupInviteConfig ( " " ) ) 
 
 def ownMessagesRead ( ) : Unit = { 
 val ( alice , aliceAuthId , aliceAuthSid , _ ) = createUser ( ) 
 @ @ - 35 , 4 + 39 , 26 @ @ final class UnreadCountersSpec extends BaseAppSuite with ImplicitAuthService wit 
 } 
 } 
 } 
 + 
 + def publicGroups ( ) : Unit = { 
 + 
 + val ( alice , aliceAuthId , aliceAuthSid , _ ) = createUser ( ) 
 + implicit val aliceClientData = ClientData ( aliceAuthId , 1 , Some ( AuthData ( alice . id , aliceAuthSid ) ) ) 
 + 
 + val groupPeer = createPubGroup ( " Public " , " " , Set ( alice . id ) ) . groupPeer 
 + 
 + for ( i ← 1 to 10 ) { 
 + sendMessageToGroup ( groupPeer . groupId , textMessage ( s " Hello $ i " ) ) 
 + } 
 + 
 + Thread . sleep ( 1000 ) 
 + 
 + whenReady ( msgService . handleLoadDialogs ( 0 , 100 ) ) { resp ⇒ 
 + inside ( resp ) { 
 + case Ok ( ResponseLoadDialogs ( _ , _ , dialogs ) ) ⇒ 
 + dialogs . head . unreadCount should = = = ( 0 ) 
 + } 
 + } 
 + } 
 + 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala 
 index 63e1c8d . . c1afcf0 100644 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala 
 + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / BaseAppSuite . scala 
 @ @ - 17 , 6 + 17 , 7 @ @ abstract class BaseAppSuite ( _ system : ActorSystem = { 
 extends ActorSuite ( _ system ) 
 with FlatSpecLike 
 with ScalaFutures 
 + with MessagingSpecHelpers 
 with Matchers 
 with Inside 
 with ServiceSpecMatchers 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / UnreadCountersSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / UnreadCountersSpec . scala 
 new file mode 100644 
 index 0000000 . . f8f75a6 
 - - - / dev / null 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / dialog / UnreadCountersSpec . scala 
 @ @ - 0 , 0 + 1 , 38 @ @ 
 + package im . actor . server . dialog 
 + 
 + import im . actor . api . rpc . messaging . ResponseLoadDialogs 
 + import im . actor . api . rpc . _ 
 + import im . actor . server . { ImplicitSessionRegion , ImplicitAuthService , BaseAppSuite } 
 + import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl 
 + 
 + final class UnreadCountersSpec extends BaseAppSuite with ImplicitAuthService with ImplicitSessionRegion { 
 + it should " consider own messages read " in ownMessagesRead 
 + 
 + private implicit lazy val msgService = MessagingServiceImpl ( ) 
 + 
 + def ownMessagesRead ( ) : Unit = { 
 + val ( alice , aliceAuthId , aliceAuthSid , _ ) = createUser ( ) 
 + val ( bob , bobAuthId , bobAuthSid , _ ) = createUser ( ) 
 + 
 + { 
 + implicit val clientData = ClientData ( bobAuthId , 2 , Some ( AuthData ( bob . id , bobAuthSid ) ) ) 
 + 
 + sendMessageToUser ( alice . id , textMessage ( " Hi Alice ! " ) ) 
 + } 
 + 
 + { 
 + implicit val clientData = ClientData ( aliceAuthId , 1 , Some ( AuthData ( alice . id , aliceAuthSid ) ) ) 
 + 
 + sendMessageToUser ( bob . id , textMessage ( " Hi Bob ! " ) ) 
 + 
 + Thread . sleep ( 1000 ) 
 + 
 + whenReady ( msgService . handleLoadDialogs ( 0 , 100 ) ) { resp ⇒ 
 + inside ( resp ) { 
 + case Ok ( ResponseLoadDialogs ( _ , _ , dialogs ) ) ⇒ 
 + dialogs . head . unreadCount should = = = ( 1 ) 
 + } 
 + } 
 + } 
 + } 
 + } 
 \ No newline at end of file
