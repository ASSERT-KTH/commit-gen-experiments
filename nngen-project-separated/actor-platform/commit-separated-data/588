BLEU SCORE: 0.0688037070798893

TEST MSG: fix ( android ) : Remove obsolete OutMessage in OwnReadActor
GENERATED MSG: wip ( sdk ) : Grouped dialogs counter updated , peer information changes

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java < nl > index 70a26f4 . . f0b6071 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java < nl > @ @ - 86 , 10 + 86 , 6 @ @ public class MessagesProcessor extends AbsModule { < nl > plainReceiveActor ( ) . send ( new CursorReceiverActor . MarkReceived ( peer , intMessageSortDate ) ) ; < nl > } < nl > < nl > - if ( outMessageSortDate > 0 ) { < nl > - ownReadActor ( ) . send ( new OwnReadActor . OutMessage ( peer , outMessageSortDate ) ) ; < nl > - } < nl > - < nl > / / OwnReadActor < nl > for ( Message m : nMessages ) { < nl > if ( m . getSenderId ( ) ! = myUid ( ) ) { < nl > @ @ - 126 , 10 + 122 , 6 @ @ public class MessagesProcessor extends AbsModule { < nl > < nl > / / Send to own read actor < nl > ownReadActor ( ) . send ( new OwnReadActor . InMessage ( peer , message ) ) ; < nl > - / / msgContent . onIncoming ( peer , context ( ) ) ; < nl > - } else { < nl > - / / Send to own read actor < nl > - ownReadActor ( ) . send ( new OwnReadActor . OutMessage ( peer , message . getSortDate ( ) ) ) ; < nl > } < nl > } < nl > < nl > @ @ - 194 , 9 + 186 , 6 @ @ public class MessagesProcessor extends AbsModule { < nl > < nl > / / Notify Sender Actor < nl > sendActor ( ) . send ( new SenderActor . MessageSent ( peer , rid ) ) ; < nl > - < nl > - / / Send to own read actor < nl > - ownReadActor ( ) . send ( new OwnReadActor . OutMessage ( peer , date ) ) ; < nl > } < nl > < nl > @ Verified < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / OwnReadActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / OwnReadActor . java < nl > index 61e0ffb . . c7a5091 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / OwnReadActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / OwnReadActor . java < nl > @ @ - 56 , 20 + 56 , 6 @ @ public class OwnReadActor extends ModuleActor { < nl > hasUserMention ) ; < nl > } < nl > < nl > - public void onOutMessage ( Peer peer , long sortDate ) { < nl > - / / long readState = context ( ) . getMessagesModule ( ) . loadReadState ( peer ) ; < nl > - / / if ( sortDate < = readState ) { < nl > - / / / / Already read < nl > - / / return ; < nl > - / / } < nl > - < nl > - / / Update Counters < nl > - / / context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( new ConversationActor . MessageReadByMe ( sortingDate ) ) ; < nl > - < nl > - / / Saving read state < nl > - / / context ( ) . getMessagesModule ( ) . saveReadState ( peer , sortDate ) ; < nl > - } < nl > - < nl > public void onMessageRead ( Peer peer , long sortingDate ) { < nl > / / Detecting if message already read < nl > long readState = context ( ) . getMessagesModule ( ) . loadReadState ( peer ) ; < nl > @ @ - 122 , 9 + 108 , 6 @ @ public class OwnReadActor extends ModuleActor { < nl > } else if ( message instanceof InMessage ) { < nl > InMessage inMessage = ( InMessage ) message ; < nl > onInMessage ( inMessage . getPeer ( ) , inMessage . getMessage ( ) ) ; < nl > - } else if ( message instanceof OutMessage ) { < nl > - OutMessage outMessage = ( OutMessage ) message ; < nl > - onOutMessage ( outMessage . getPeer ( ) , outMessage . getSortDate ( ) ) ; < nl > } else if ( message instanceof StartGetDifference ) { < nl > onDifferenceStart ( ) ; < nl > } else if ( message instanceof StopGetDifference ) { < nl > @ @ - 188 , 23 + 171 , 6 @ @ public class OwnReadActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class OutMessage { < nl > - private Peer peer ; < nl > - private long sortDate ; < nl > - < nl > - public OutMessage ( Peer peer , long sortDate ) { < nl > - this . peer = peer ; < nl > - this . sortDate = sortDate ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public long getSortDate ( ) { < nl > - return sortDate ; < nl > - } < nl > - } < nl > < nl > public static class StartGetDifference {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > index 8bf76dc . . 5f112bd 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java < nl > @ @ - 137 , 10 + 137 , 10 @ @ public class ConversationActor extends ModuleActor { < nl > / / Update dialogs < nl > if ( topMessage ! = null ) { < nl > if ( ! isHiddenPeer ) { < nl > - dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , < nl > - topMessage . getSortDate ( ) ) ) ; < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , topMessage , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , < nl > + topMessage . getSortDate ( ) ) ) ; < nl > } < nl > } < nl > < nl > @ @ - 189 , 9 + 189 , 9 @ @ public class ConversationActor extends ModuleActor { < nl > < nl > if ( ! isHiddenPeer ) { < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , message , inPendingIndex . getCount ( ) ) ) ; < nl > - dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , < nl > - message . getSortDate ( ) ) ) ; < nl > } < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , < nl > + message . getSortDate ( ) ) ) ; < nl > } < nl > } < nl > < nl > @ @ - 276 , 6 + 276 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > dialogsActor . send ( new DialogsActor . MessageStateChanged ( peer , rid , < nl > MessageState . ERROR ) ) ; < nl > } < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > } < nl > < nl > @ @ - 369 , 8 + 370 , 8 @ @ public class ConversationActor extends ModuleActor { < nl > < nl > if ( ! isHiddenPeer ) { < nl > dialogsActor . send ( new DialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > - / / TODO : Implement for grouped < nl > } < nl > + dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > < nl > / / Deletions < nl > @ @ - 402 , 6 + 403 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > inPendingIndex . clear ( ) ; < nl > outPendingIndex . clear ( ) ; < nl > dialogsActor . send ( new DialogsActor . ChatClear ( peer ) ) ; < nl > + / / TODO : Implement for grouped < nl > } < nl > < nl > @ Verified < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > index dc1143a . . b6d002a 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java < nl > @ @ - 52 , 6 + 52 , 13 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > DialogSpec spec = new DialogSpec ( peer , false , counter ) ; < nl > specs . getEngine ( ) . addOrUpdateItem ( spec ) ; < nl > < nl > + / / Doesn ' t create dialogs for hidden groups < nl > + if ( peer . getPeerType ( ) = = PeerType . GROUP ) { < nl > + if ( getGroup ( peer . getPeerId ( ) ) . isHidden ( ) ) { < nl > + return ; < nl > + } < nl > + } < nl > + < nl > boolean found = false ; < nl > for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > if ( p . equals ( peer ) ) { < nl > @ @ - 120 , 8 + 127 , 55 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; < nl > } < nl > < nl > + private void onCounterChanged ( Peer peer , int counter ) { < nl > + < nl > + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; < nl > + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; < nl > + < nl > + / / Hidden groups doesn ' t present in storage < nl > + / / and there are no need to explicit checking < nl > + < nl > + boolean found = false ; < nl > + for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > + found = true ; < nl > + break ; < nl > + } < nl > + } < nl > + for ( Peer p : storage . getGroupPeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > + found = true ; < nl > + break ; < nl > + } < nl > + } < nl > + < nl > + if ( found ) { < nl > + notifyVM ( ) ; < nl > + } < nl > + } < nl > + < nl > private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { < nl > - / / TODO : Implement < nl > + < nl > + / / Hidden groups doesn ' t present in storage < nl > + / / and there are no need to explicit checking < nl > + < nl > + boolean found = false ; < nl > + for ( Peer p : storage . getPrivatePeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > + found = true ; < nl > + break ; < nl > + } < nl > + } < nl > + for ( Peer p : storage . getGroupPeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > + found = true ; < nl > + break ; < nl > + } < nl > + } < nl > + < nl > + if ( found ) { < nl > + notifyVM ( ) ; < nl > + } < nl > } < nl > < nl > < nl > @ @ - 139 , 6 + 193 , 9 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > } else if ( message instanceof NewMessage ) { < nl > NewMessage newMessage = ( NewMessage ) message ; < nl > onNewMessage ( newMessage . peer , newMessage . sortDate , newMessage . counter ) ; < nl > + } else if ( message instanceof CounterChanged ) { < nl > + CounterChanged counterChanged = ( CounterChanged ) message ; < nl > + onCounterChanged ( counterChanged . getPeer ( ) , counterChanged . getCounter ( ) ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > @ @ - 188 , 7 + 245 , 6 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > } < nl > < nl > public static class NewMessage { < nl > - < nl > private Peer peer ; < nl > private int counter ; < nl > private long sortDate ; < nl > @ @ - 199 , 52 + 255 , 4 @ @ public class GroupedDialogsActor extends ModuleActor { < nl > this . sortDate = sortDate ; < nl > } < nl > } < nl > - < nl > - private class PeerGroup { < nl > - < nl > - private String key ; < nl > - private String title ; < nl > - private ArrayList < PeerDesc > peers ; < nl > - < nl > - public PeerGroup ( String key , String title ) { < nl > - this . key = key ; < nl > - this . title = title ; < nl > - this . peers = new ArrayList < PeerDesc > ( ) ; < nl > - } < nl > - < nl > - public String getKey ( ) { < nl > - return key ; < nl > - } < nl > - < nl > - public String getTitle ( ) { < nl > - return title ; < nl > - } < nl > - < nl > - public ArrayList < PeerDesc > getPeers ( ) { < nl > - return peers ; < nl > - } < nl > - } < nl > - < nl > - private class PeerDesc { < nl > - < nl > - private Peer peer ; < nl > - private int counter ; < nl > - < nl > - public PeerDesc ( Peer peer , int counter ) { < nl > - this . peer = peer ; < nl > - this . counter = counter ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public int getCounter ( ) { < nl > - return counter ; < nl > - } < nl > - < nl > - public void setCounter ( int counter ) { < nl > - this . counter = counter ; < nl > - } < nl > - } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java < nl > index 74487be . . dfbc311 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java < nl > @ @ - 10 , 12 + 10 , 14 @ @ import im . actor . core . api . updates . UpdateUserAvatarChanged ; < nl > import im . actor . core . api . updates . UpdateUserLocalNameChanged ; < nl > import im . actor . core . api . updates . UpdateUserNameChanged ; < nl > import im . actor . core . api . updates . UpdateUserNickChanged ; < nl > + import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . User ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . Processor ; < nl > import im . actor . core . modules . internal . contacts . ContactsSyncActor ; < nl > import im . actor . core . modules . internal . messages . DialogsActor ; < nl > + import im . actor . core . modules . internal . messages . GroupedDialogsActor ; < nl > import im . actor . runtime . annotations . Verified ; < nl > < nl > import static im . actor . core . util . JavaUtil . equalsE ; < nl > @ @ - 193 , 6 + 195 , 9 @ @ public class UsersProcessor extends AbsModule implements Processor { < nl > private void onUserDescChanged ( User u ) { < nl > context ( ) . getMessagesModule ( ) . getDialogsActor ( ) . send ( < nl > new DialogsActor . UserChanged ( u ) ) ; < nl > + context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) . send ( < nl > + new GroupedDialogsActor . PeerInformationChanged ( Peer . user ( u . getUid ( ) ) , < nl > + u . getName ( ) , u . getAvatar ( ) ) ) ; < nl > context ( ) . getContactsModule ( ) . getContactSyncActor ( ) < nl > . send ( new ContactsSyncActor . UserChanged ( u ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java < nl > index 0c0a457 . . e430293 100644 < nl > - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java < nl > @ @ - 16 , 6 + 16 , 7 @ @ import im . actor . core . api . ApiMember ; < nl > import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . Message ; < nl > import im . actor . core . entity . MessageState ; < nl > + import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . content . ServiceGroupAvatarChanged ; < nl > import im . actor . core . entity . content . ServiceGroupCreated ; < nl > import im . actor . core . entity . content . ServiceGroupTitleChanged ; < nl > @ @ - 25 , 6 + 26 , 7 @ @ import im . actor . core . entity . content . ServiceGroupUserLeave ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . internal . messages . DialogsActor ; < nl > + import im . actor . core . modules . internal . messages . GroupedDialogsActor ; < nl > import im . actor . core . modules . internal . messages . entity . EntityConverter ; < nl > import im . actor . runtime . annotations . Verified ; < nl > < nl > @ @ - 298 , 5 + 300 , 8 @ @ public class GroupsProcessor extends AbsModule { < nl > private void onGroupDescChanged ( Group group ) { < nl > context ( ) . getMessagesModule ( ) . getDialogsActor ( ) < nl > . send ( new DialogsActor . GroupChanged ( group ) ) ; < nl > + context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) . send ( < nl > + new GroupedDialogsActor . PeerInformationChanged ( Peer . group ( group . getGroupId ( ) ) , < nl > + group . getTitle ( ) , group . getAvatar ( ) ) ) ; < nl > } < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java 
 index 70a26f4 . . f0b6071 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java 
 @ @ - 86 , 10 + 86 , 6 @ @ public class MessagesProcessor extends AbsModule { 
 plainReceiveActor ( ) . send ( new CursorReceiverActor . MarkReceived ( peer , intMessageSortDate ) ) ; 
 } 
 
 - if ( outMessageSortDate > 0 ) { 
 - ownReadActor ( ) . send ( new OwnReadActor . OutMessage ( peer , outMessageSortDate ) ) ; 
 - } 
 - 
 / / OwnReadActor 
 for ( Message m : nMessages ) { 
 if ( m . getSenderId ( ) ! = myUid ( ) ) { 
 @ @ - 126 , 10 + 122 , 6 @ @ public class MessagesProcessor extends AbsModule { 
 
 / / Send to own read actor 
 ownReadActor ( ) . send ( new OwnReadActor . InMessage ( peer , message ) ) ; 
 - / / msgContent . onIncoming ( peer , context ( ) ) ; 
 - } else { 
 - / / Send to own read actor 
 - ownReadActor ( ) . send ( new OwnReadActor . OutMessage ( peer , message . getSortDate ( ) ) ) ; 
 } 
 } 
 
 @ @ - 194 , 9 + 186 , 6 @ @ public class MessagesProcessor extends AbsModule { 
 
 / / Notify Sender Actor 
 sendActor ( ) . send ( new SenderActor . MessageSent ( peer , rid ) ) ; 
 - 
 - / / Send to own read actor 
 - ownReadActor ( ) . send ( new OwnReadActor . OutMessage ( peer , date ) ) ; 
 } 
 
 @ Verified 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / OwnReadActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / OwnReadActor . java 
 index 61e0ffb . . c7a5091 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / OwnReadActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / OwnReadActor . java 
 @ @ - 56 , 20 + 56 , 6 @ @ public class OwnReadActor extends ModuleActor { 
 hasUserMention ) ; 
 } 
 
 - public void onOutMessage ( Peer peer , long sortDate ) { 
 - / / long readState = context ( ) . getMessagesModule ( ) . loadReadState ( peer ) ; 
 - / / if ( sortDate < = readState ) { 
 - / / / / Already read 
 - / / return ; 
 - / / } 
 - 
 - / / Update Counters 
 - / / context ( ) . getMessagesModule ( ) . getConversationActor ( peer ) . send ( new ConversationActor . MessageReadByMe ( sortingDate ) ) ; 
 - 
 - / / Saving read state 
 - / / context ( ) . getMessagesModule ( ) . saveReadState ( peer , sortDate ) ; 
 - } 
 - 
 public void onMessageRead ( Peer peer , long sortingDate ) { 
 / / Detecting if message already read 
 long readState = context ( ) . getMessagesModule ( ) . loadReadState ( peer ) ; 
 @ @ - 122 , 9 + 108 , 6 @ @ public class OwnReadActor extends ModuleActor { 
 } else if ( message instanceof InMessage ) { 
 InMessage inMessage = ( InMessage ) message ; 
 onInMessage ( inMessage . getPeer ( ) , inMessage . getMessage ( ) ) ; 
 - } else if ( message instanceof OutMessage ) { 
 - OutMessage outMessage = ( OutMessage ) message ; 
 - onOutMessage ( outMessage . getPeer ( ) , outMessage . getSortDate ( ) ) ; 
 } else if ( message instanceof StartGetDifference ) { 
 onDifferenceStart ( ) ; 
 } else if ( message instanceof StopGetDifference ) { 
 @ @ - 188 , 23 + 171 , 6 @ @ public class OwnReadActor extends ModuleActor { 
 } 
 } 
 
 - public static class OutMessage { 
 - private Peer peer ; 
 - private long sortDate ; 
 - 
 - public OutMessage ( Peer peer , long sortDate ) { 
 - this . peer = peer ; 
 - this . sortDate = sortDate ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public long getSortDate ( ) { 
 - return sortDate ; 
 - } 
 - } 
 
 public static class StartGetDifference {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 index 8bf76dc . . 5f112bd 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / ConversationActor . java 
 @ @ - 137 , 10 + 137 , 10 @ @ public class ConversationActor extends ModuleActor { 
 / / Update dialogs 
 if ( topMessage ! = null ) { 
 if ( ! isHiddenPeer ) { 
 - dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , 
 - topMessage . getSortDate ( ) ) ) ; 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , topMessage , inPendingIndex . getCount ( ) ) ) ; 
 } 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , 
 + topMessage . getSortDate ( ) ) ) ; 
 } 
 } 
 
 @ @ - 189 , 9 + 189 , 9 @ @ public class ConversationActor extends ModuleActor { 
 
 if ( ! isHiddenPeer ) { 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , message , inPendingIndex . getCount ( ) ) ) ; 
 - dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , 
 - message . getSortDate ( ) ) ) ; 
 } 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . NewMessage ( peer , inPendingIndex . getCount ( ) , 
 + message . getSortDate ( ) ) ) ; 
 } 
 } 
 
 @ @ - 276 , 6 + 276 , 7 @ @ public class ConversationActor extends ModuleActor { 
 dialogsActor . send ( new DialogsActor . MessageStateChanged ( peer , rid , 
 MessageState . ERROR ) ) ; 
 } 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 } 
 } 
 
 @ @ - 369 , 8 + 370 , 8 @ @ public class ConversationActor extends ModuleActor { 
 
 if ( ! isHiddenPeer ) { 
 dialogsActor . send ( new DialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 - / / TODO : Implement for grouped 
 } 
 + dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 } 
 
 / / Deletions 
 @ @ - 402 , 6 + 403 , 7 @ @ public class ConversationActor extends ModuleActor { 
 inPendingIndex . clear ( ) ; 
 outPendingIndex . clear ( ) ; 
 dialogsActor . send ( new DialogsActor . ChatClear ( peer ) ) ; 
 + / / TODO : Implement for grouped 
 } 
 
 @ Verified 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 index dc1143a . . b6d002a 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / messages / GroupedDialogsActor . java 
 @ @ - 52 , 6 + 52 , 13 @ @ public class GroupedDialogsActor extends ModuleActor { 
 DialogSpec spec = new DialogSpec ( peer , false , counter ) ; 
 specs . getEngine ( ) . addOrUpdateItem ( spec ) ; 
 
 + / / Doesn ' t create dialogs for hidden groups 
 + if ( peer . getPeerType ( ) = = PeerType . GROUP ) { 
 + if ( getGroup ( peer . getPeerId ( ) ) . isHidden ( ) ) { 
 + return ; 
 + } 
 + } 
 + 
 boolean found = false ; 
 for ( Peer p : storage . getPrivatePeers ( ) ) { 
 if ( p . equals ( peer ) ) { 
 @ @ - 120 , 8 + 127 , 55 @ @ public class GroupedDialogsActor extends ModuleActor { 
 context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; 
 } 
 
 + private void onCounterChanged ( Peer peer , int counter ) { 
 + 
 + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; 
 + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; 
 + 
 + / / Hidden groups doesn ' t present in storage 
 + / / and there are no need to explicit checking 
 + 
 + boolean found = false ; 
 + for ( Peer p : storage . getPrivatePeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + for ( Peer p : storage . getGroupPeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + 
 + if ( found ) { 
 + notifyVM ( ) ; 
 + } 
 + } 
 + 
 private void onPeerInfoChanged ( Peer peer , String title , Avatar avatar ) { 
 - / / TODO : Implement 
 + 
 + / / Hidden groups doesn ' t present in storage 
 + / / and there are no need to explicit checking 
 + 
 + boolean found = false ; 
 + for ( Peer p : storage . getPrivatePeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + for ( Peer p : storage . getGroupPeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + 
 + if ( found ) { 
 + notifyVM ( ) ; 
 + } 
 } 
 
 
 @ @ - 139 , 6 + 193 , 9 @ @ public class GroupedDialogsActor extends ModuleActor { 
 } else if ( message instanceof NewMessage ) { 
 NewMessage newMessage = ( NewMessage ) message ; 
 onNewMessage ( newMessage . peer , newMessage . sortDate , newMessage . counter ) ; 
 + } else if ( message instanceof CounterChanged ) { 
 + CounterChanged counterChanged = ( CounterChanged ) message ; 
 + onCounterChanged ( counterChanged . getPeer ( ) , counterChanged . getCounter ( ) ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 @ @ - 188 , 7 + 245 , 6 @ @ public class GroupedDialogsActor extends ModuleActor { 
 } 
 
 public static class NewMessage { 
 - 
 private Peer peer ; 
 private int counter ; 
 private long sortDate ; 
 @ @ - 199 , 52 + 255 , 4 @ @ public class GroupedDialogsActor extends ModuleActor { 
 this . sortDate = sortDate ; 
 } 
 } 
 - 
 - private class PeerGroup { 
 - 
 - private String key ; 
 - private String title ; 
 - private ArrayList < PeerDesc > peers ; 
 - 
 - public PeerGroup ( String key , String title ) { 
 - this . key = key ; 
 - this . title = title ; 
 - this . peers = new ArrayList < PeerDesc > ( ) ; 
 - } 
 - 
 - public String getKey ( ) { 
 - return key ; 
 - } 
 - 
 - public String getTitle ( ) { 
 - return title ; 
 - } 
 - 
 - public ArrayList < PeerDesc > getPeers ( ) { 
 - return peers ; 
 - } 
 - } 
 - 
 - private class PeerDesc { 
 - 
 - private Peer peer ; 
 - private int counter ; 
 - 
 - public PeerDesc ( Peer peer , int counter ) { 
 - this . peer = peer ; 
 - this . counter = counter ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public int getCounter ( ) { 
 - return counter ; 
 - } 
 - 
 - public void setCounter ( int counter ) { 
 - this . counter = counter ; 
 - } 
 - } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java 
 index 74487be . . dfbc311 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / internal / users / UsersProcessor . java 
 @ @ - 10 , 12 + 10 , 14 @ @ import im . actor . core . api . updates . UpdateUserAvatarChanged ; 
 import im . actor . core . api . updates . UpdateUserLocalNameChanged ; 
 import im . actor . core . api . updates . UpdateUserNameChanged ; 
 import im . actor . core . api . updates . UpdateUserNickChanged ; 
 + import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . User ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . Processor ; 
 import im . actor . core . modules . internal . contacts . ContactsSyncActor ; 
 import im . actor . core . modules . internal . messages . DialogsActor ; 
 + import im . actor . core . modules . internal . messages . GroupedDialogsActor ; 
 import im . actor . runtime . annotations . Verified ; 
 
 import static im . actor . core . util . JavaUtil . equalsE ; 
 @ @ - 193 , 6 + 195 , 9 @ @ public class UsersProcessor extends AbsModule implements Processor { 
 private void onUserDescChanged ( User u ) { 
 context ( ) . getMessagesModule ( ) . getDialogsActor ( ) . send ( 
 new DialogsActor . UserChanged ( u ) ) ; 
 + context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) . send ( 
 + new GroupedDialogsActor . PeerInformationChanged ( Peer . user ( u . getUid ( ) ) , 
 + u . getName ( ) , u . getAvatar ( ) ) ) ; 
 context ( ) . getContactsModule ( ) . getContactSyncActor ( ) 
 . send ( new ContactsSyncActor . UserChanged ( u ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java 
 index 0c0a457 . . e430293 100644 
 - - - a / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java 
 + + + b / actor - sdk / sdk - core / core / shared / src / main / java / im / actor / core / modules / updates / GroupsProcessor . java 
 @ @ - 16 , 6 + 16 , 7 @ @ import im . actor . core . api . ApiMember ; 
 import im . actor . core . entity . Group ; 
 import im . actor . core . entity . Message ; 
 import im . actor . core . entity . MessageState ; 
 + import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . content . ServiceGroupAvatarChanged ; 
 import im . actor . core . entity . content . ServiceGroupCreated ; 
 import im . actor . core . entity . content . ServiceGroupTitleChanged ; 
 @ @ - 25 , 6 + 26 , 7 @ @ import im . actor . core . entity . content . ServiceGroupUserLeave ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . internal . messages . DialogsActor ; 
 + import im . actor . core . modules . internal . messages . GroupedDialogsActor ; 
 import im . actor . core . modules . internal . messages . entity . EntityConverter ; 
 import im . actor . runtime . annotations . Verified ; 
 
 @ @ - 298 , 5 + 300 , 8 @ @ public class GroupsProcessor extends AbsModule { 
 private void onGroupDescChanged ( Group group ) { 
 context ( ) . getMessagesModule ( ) . getDialogsActor ( ) 
 . send ( new DialogsActor . GroupChanged ( group ) ) ; 
 + context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) . send ( 
 + new GroupedDialogsActor . PeerInformationChanged ( Peer . group ( group . getGroupId ( ) ) , 
 + group . getTitle ( ) , group . getAvatar ( ) ) ) ; 
 } 
 } 
 \ No newline at end of file
