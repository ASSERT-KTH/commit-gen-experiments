BLEU SCORE: 0.1198091452856599

TEST MSG: fix ( server : groups ) : push leave update to client with old group API
GENERATED MSG: fix ( server ) : group members fixes

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > index 566d29f . . 50fb910 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala < nl > @ @ - 14 , 7 + 14 , 7 @ @ import im . actor . server . acl . ACLUtils < nl > import im . actor . server . group . GroupCommands . { DeleteGroup , DismissUserAdmin , MakeHistoryShared , MakeUserAdmin , RevokeIntegrationToken , RevokeIntegrationTokenAck , TransferOwnership , UpdateAdminSettings , UpdateAdminSettingsAck } < nl > import im . actor . server . group . GroupErrors . { NotAMember , NotAdmin , UserAlreadyAdmin , UserAlreadyNotAdmin } < nl > import im . actor . server . group . GroupEvents . { AdminSettingsUpdated , AdminStatusChanged , GroupDeleted , HistoryBecameShared , IntegrationTokenRevoked , OwnerChanged } < nl > - import im . actor . server . persist . { GroupBotRepo , GroupUserRepo , HistoryMessageRepo } < nl > + import im . actor . server . persist . { GroupBotRepo , GroupInviteTokenRepo , GroupUserRepo , HistoryMessageRepo } < nl > import im . actor . server . sequence . { SeqState , SeqStateDate } < nl > < nl > import scala . concurrent . Future < nl > @ @ - 346 , 6 + 346 , 10 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { < nl > persist ( GroupDeleted ( Instant . now , cmd . clientUserId ) ) { evt ⇒ < nl > val newState = commit ( evt ) < nl > < nl > + val dateMillis = evt . ts . toEpochMilli < nl > + val randomId = ACLUtils . randomLong ( ) < nl > + < nl > + / / TODO : add UpdateIsDeleted < nl > val deleteGroupMembersUpdates : Vector [ Update ] = Vector ( < nl > UpdateGroupCanSendMessagesChanged ( groupId , canSendMessages = false ) , < nl > UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) , < nl > @ @ - 366 , 11 + 370 , 34 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { < nl > UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) < nl > ) < nl > < nl > - / / TODO : add UpdateIsDeleted < nl > - / / TODO : for old API updates as in leacve < nl > + / / TODO : remove deprecated . GroupInviteTokenRepo don ' t have replacement yet . < nl > + newState . memberIds foreach { userId ⇒ < nl > + db . run ( < nl > + for { < nl > + _ ← GroupUserRepo . delete ( groupId , userId ) < nl > + _ ← GroupInviteTokenRepo . revoke ( groupId , userId ) < nl > + } yield ( ) < nl > + ) < nl > + } < nl > < nl > val result : Future [ SeqState ] = for { < nl > _ ← db . run ( HistoryMessageRepo . deleteAll ( cmd . clientUserId , apiGroupPeer . asModel ) ) < nl > + < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + / / Groups V1 API updates / / < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + < nl > + / / push all members updates about other members left group < nl > + _ ← FutureExt . ftraverse ( newState . memberIds . toSeq ) { userId ⇒ < nl > + seqUpdExt . broadcastPeopleUpdate ( < nl > + userIds = newState . memberIds - userId , < nl > + update = UpdateGroupUserLeaveObsolete ( groupId , userId , dateMillis , randomId ) < nl > + ) < nl > + } < nl > + < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > + / / Groups V2 API updates / / < nl > + / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > _ ← Future . traverse ( deleteGroupMembersUpdates ) { update ⇒ < nl > seqUpdExt . broadcastPeopleUpdate ( newState . memberIds , update ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index 3e24dc5 . . faf98a1 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . server . user . UserExtension < nl > import scala . concurrent . duration . _ < nl > import scala . concurrent . { ExecutionContext , Future } < nl > < nl > + / / TODO : maybe add dateMillis < nl > trait GroupEvent extends TaggedEvent { < nl > val ts : Instant
NEAREST DIFF (one line): diff - - git a / . gitignore b / . gitignore < nl > index d16f251 . . 5022d3b 100644 < nl > - - - a / . gitignore < nl > + + + b / . gitignore < nl > @ @ - 3 , 6 + 3 , 7 @ @ target / < nl > actor - server / src / main / resources / application . conf < nl > actor - server / actor - tests / src / test / resources / application . conf < nl > actor - server / actor - testkit / src / test / resources / application . conf < nl > + actor - server / actor - testkit / src / main / resources / application . conf < nl > actor - tests / journal < nl > actor - tests / snapshots < nl > actor - dashboard / logs < nl > diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto < nl > index 3adf4e8 . . de4d02f 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / group . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / group . proto < nl > @ @ - 29 , 6 + 29 , 20 @ @ message GroupCommands { < nl > required int64 date = 4 ; < nl > } < nl > < nl > + message CreateInternal { < nl > + option ( scalapb . message ) . extends = " im . actor . server . group . GroupCommand " ; < nl > + < nl > + required int32 group _ id = 1 ; < nl > + < nl > + required int32 creator _ user _ id = 3 ; < nl > + required string title = 4 ; < nl > + repeated int32 user _ ids = 5 ; < nl > + } < nl > + < nl > + message CreateInternalAck { < nl > + required int64 access _ hash = 1 ; < nl > + } < nl > + < nl > message Join { < nl > option ( scalapb . message ) . extends = " im . actor . server . group . GroupCommand " ; < nl > < nl > @ @ - 221 , 6 + 235 , 7 @ @ message GroupEvents { < nl > required int32 creator _ user _ id = 2 ; < nl > required int64 access _ hash = 3 ; < nl > required string title = 4 ; < nl > + repeated int32 user _ ids = 6 ; < nl > } < nl > < nl > message UserInvited { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 8b079dd . . 85ab17c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 38 , 11 + 38 , 30 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > import GroupCommands . _ < nl > import GroupEvents . _ < nl > < nl > - protected def create ( groupId : Int , creatorUserId : Int , creatorAuthId : Long , title : String , randomId : Long , userIds : Set [ Int ] ) : Unit = { < nl > - val rng = ThreadLocalRandom . current ( ) < nl > + protected def createInternal ( creatorUserId : Int , title : String , userIds : Seq [ Int ] ) : Unit = { < nl > + val accessHash = genAccessHash ( ) < nl > < nl > - val accessHash = rng . nextLong ( ) < nl > + val date = now ( ) < nl > + val created = GroupEvents . Created ( groupId , creatorUserId , accessHash , title , userIds ) < nl > + val state = initState ( date , created ) < nl > < nl > + persist ( TSEvent ( date , created ) ) { _ ⇒ < nl > + context become working ( state ) < nl > + < nl > + val rng = ThreadLocalRandom . current ( ) < nl > + db . run ( for { < nl > + _ ← createInDb ( state , rng . nextLong ( ) ) < nl > + } yield CreateInternalAck ( accessHash ) ) pipeTo sender ( ) onFailure { < nl > + case e ⇒ < nl > + log . error ( e , " Failed to create group internally " ) < nl > + } < nl > + } < nl > + } < nl > + < nl > + protected def create ( groupId : Int , creatorUserId : Int , creatorAuthId : Long , title : String , randomId : Long , userIds : Set [ Int ] ) : Unit = { < nl > + val accessHash = genAccessHash ( ) < nl > + < nl > + val rng = ThreadLocalRandom . current ( ) < nl > userIds . filterNot ( _ = = creatorUserId ) foreach { userId ⇒ < nl > val randomId = rng . nextLong ( ) < nl > context . parent ! Invite ( groupId , userId , creatorUserId , creatorAuthId , randomId ) < nl > @ @ - 400 , 4 + 419 , 21 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > } yield SeqStateDate ( seq , state , date . getMillis ) < nl > } < nl > < nl > + private def genAccessHash ( ) : Long = < nl > + ThreadLocalRandom . current ( ) . nextLong ( ) < nl > + < nl > + private def createInDb ( state : Group , randomId : Long ) = < nl > + p . Group . create ( < nl > + models . Group ( < nl > + id = groupId , < nl > + creatorUserId = state . creatorUserId , < nl > + accessHash = state . accessHash , < nl > + title = state . title , < nl > + isPublic = state . isPublic , < nl > + createdAt = state . createdAt , < nl > + about = None , < nl > + topic = None < nl > + ) , < nl > + randomId < nl > + ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > index 03f4750 . . 955e770 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > @ @ - 30 , 6 + 30 , 14 @ @ private [ group ] sealed trait Commands { < nl > ) : Future [ CreateAck ] = < nl > ( peerManagerRegion . ref ? Create ( groupId , clientUserId , clientAuthId , title , randomId , userIds . toSeq ) ) . mapTo [ CreateAck ] < nl > < nl > + def createInternal ( groupId : Int , creatorUserId : Int , title : String , userIds : Set [ Int ] ) ( < nl > + implicit < nl > + region : GroupProcessorRegion , < nl > + timeout : Timeout , < nl > + ec : ExecutionContext < nl > + ) : Future [ CreateInternalAck ] = < nl > + ( region . ref ? CreateInternal ( groupId , creatorUserId , title , userIds . toSeq ) ) . mapTo [ CreateInternalAck ] < nl > + < nl > def makePublic ( groupId : Int , description : String ) ( < nl > implicit < nl > region : GroupProcessorRegion , < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index 1111ce3 . . 7f1ceef 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 78 , 6 + 78 , 8 @ @ object GroupProcessor { < nl > ActorSerializer . register ( 20018 , classOf [ GroupCommands . RevokeIntegrationToken ] ) < nl > ActorSerializer . register ( 20020 , classOf [ GroupCommands . RevokeIntegrationTokenAck ] ) < nl > ActorSerializer . register ( 20023 , classOf [ GroupCommands . JoinAfterFirstRead ] ) < nl > + ActorSerializer . register ( 20024 , classOf [ GroupCommands . CreateInternal ] ) < nl > + ActorSerializer . register ( 20025 , classOf [ GroupCommands . CreateInternalAck ] ) < nl > < nl > ActorSerializer . register ( 21001 , classOf [ GroupQueries . GetIntegrationToken ] ) < nl > ActorSerializer . register ( 21002 , classOf [ GroupQueries . GetIntegrationTokenResponse ] ) < nl > @ @ - 191 , 6 + 193 , 8 @ @ private [ group ] final class GroupProcessor < nl > override def handleInitCommand : Receive = { < nl > case Create ( _ , creatorUserId , creatorAuthId , title , randomId , userIds ) ⇒ < nl > create ( groupId , creatorUserId , creatorAuthId , title , randomId , userIds . toSet ) < nl > + case CreateInternal ( _ , creatorUserId , title , userIds ) ⇒ < nl > + createInternal ( creatorUserId , title , userIds ) < nl > } < nl > < nl > override def handleCommand ( state : Group ) : Receive = { < nl > @ @ - 261 , 10 + 265 , 10 @ @ private [ group ] final class GroupProcessor < nl > about = None , < nl > creatorUserId = evt . creatorUserId , < nl > createdAt = ts , < nl > - members = Map ( evt . creatorUserId → Member ( evt . creatorUserId , evt . creatorUserId , ts , isAdmin = true ) ) , < nl > + members = ( evt . userIds map ( userId ⇒ ( userId → Member ( userId , evt . creatorUserId , ts , isAdmin = ( userId = = evt . creatorUserId ) ) ) ) ) . toMap , < nl > isPublic = false , < nl > bot = None , < nl > - invitedUserIds = Set . empty , < nl > + invitedUserIds = evt . userIds . filterNot ( _ = = evt . creatorUserId ) . toSet , < nl > avatar = None , < nl > topic = None < nl > ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala < nl > new file mode 100644 < nl > index 0000000 . . 30af7a5 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala < nl > @ @ - 0 , 0 + 1 , 89 @ @ < nl > + package im . actor . server . migrations < nl > + < nl > + import akka . actor . { ActorLogging , Actor , Props , ActorSystem } < nl > + import akka . persistence . { RecoveryFailure , RecoveryCompleted , PersistentActor } < nl > + import im . actor . server . event . TSEvent < nl > + import im . actor . server . group . { GroupEvents , GroupOffice } < nl > + import slick . driver . PostgresDriver . api . _ < nl > + import im . actor . server . persist < nl > + < nl > + import scala . concurrent . { Promise , Future , ExecutionContext } < nl > + import scala . concurrent . duration . _ < nl > + < nl > + object GroupCreatorMemberMigrator extends Migration { < nl > + private case object Migrate < nl > + < nl > + protected override def migrationName = " 2015 - 08 - 28 - GroupCreatorMemberMigration " < nl > + < nl > + protected override def migrationTimeout = 1 . hour < nl > + < nl > + protected override def startMigration ( ) ( implicit system : ActorSystem , db : Database , ec : ExecutionContext ) : Future [ Unit ] = { < nl > + db . run ( persist . Group . allIds ) flatMap { groupIds ⇒ < nl > + Future . sequence ( groupIds map { groupId ⇒ < nl > + val promise = Promise [ Unit ] ( ) < nl > + < nl > + system . actorOf ( Props ( classOf [ GroupCreatorMemberMigrator ] , promise , groupId ) , s " migrate _ group _ creator _ member _ $ { groupId } " ) < nl > + promise . future onFailure { < nl > + case e ⇒ system . log . error ( e , s " Failed to migrate $ { groupId } " ) < nl > + } < nl > + < nl > + promise . future < nl > + } ) map ( _ ⇒ ( ) ) < nl > + } < nl > + } < nl > + } < nl > + < nl > + private final class GroupCreatorMemberMigrator ( promise : Promise [ Unit ] , groupId : Int ) extends PersistentActor with ActorLogging { < nl > + import GroupCreatorMemberMigrator . _ < nl > + import GroupEvents . _ < nl > + < nl > + override def persistenceId = GroupOffice . persistenceIdFor ( groupId ) < nl > + < nl > + def receiveCommand = { < nl > + case Migrate ⇒ migrate ( ) < nl > + } < nl > + < nl > + var originalCreatorUserId : Int = - 1 < nl > + var creatorUserIdOpt : Option [ Int ] = None < nl > + < nl > + def receiveRecover = { < nl > + case TSEvent ( _ , e : Created ) ⇒ < nl > + creatorUserIdOpt = Some ( e . creatorUserId ) < nl > + originalCreatorUserId = e . creatorUserId < nl > + case TSEvent ( _ , e : UserLeft ) ⇒ < nl > + if ( creatorUserIdOpt . exists ( _ = = e . userId ) ) { < nl > + creatorUserIdOpt = None < nl > + } < nl > + case TSEvent ( _ , e : UserKicked ) ⇒ < nl > + if ( creatorUserIdOpt . exists ( _ = = e . userId ) ) { < nl > + creatorUserIdOpt = None < nl > + } < nl > + case RecoveryCompleted ⇒ < nl > + self ! Migrate < nl > + case RecoveryFailure ( e ) ⇒ < nl > + log . error ( e , " Failed to recover " ) < nl > + } < nl > + < nl > + override def preRestart ( reason : Throwable , message : Option [ Any ] ) : Unit = { < nl > + super . preRestart ( reason , message ) < nl > + promise . failure ( reason ) < nl > + } < nl > + < nl > + private def migrate ( ) : Unit = { < nl > + log . warning ( " Migrating { } " , groupId ) < nl > + creatorUserIdOpt match { < nl > + case Some ( creatorUserId ) ⇒ < nl > + log . warning ( " Adding member { } " , creatorUserId ) < nl > + persist ( UserInvited ( creatorUserId , creatorUserId ) ) ( identity ) < nl > + persist ( UserJoined ( creatorUserId , creatorUserId ) ) { _ ⇒ < nl > + log . warning ( " Migrated " ) < nl > + promise . success ( ( ) ) < nl > + context stop self < nl > + } < nl > + case None ⇒ < nl > + log . warning ( " No migration needed , creator left " ) < nl > + promise . success ( ( ) ) < nl > + context stop self < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala < nl > index fec156d . . a268b0e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala < nl > @ @ - 35 , 6 + 35 , 7 @ @ trait Migration { < nl > } recover { < nl > case e ⇒ < nl > system . log . error ( e , s " Migration $ migrationName failed ! ! ! " ) < nl > + throw e < nl > } , migrationTimeout ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > index edbf023 . . 61e2e55 100644 < nl > - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > @ @ - 31 , 7 + 31 , 7 @ @ import im . actor . server . dialog . privat . { PrivateDialog , PrivateDialogExtension } < nl > import im . actor . server . email . { EmailConfig , EmailSender } < nl > import im . actor . server . enrich . { RichMessageConfig , RichMessageWorker } < nl > import im . actor . server . group . _ < nl > - import im . actor . server . migrations . { IntegrationTokenMigrator , LocalNamesMigrator } < nl > + import im . actor . server . migrations . { GroupCreatorMemberMigrator , IntegrationTokenMigrator , LocalNamesMigrator } < nl > import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } < nl > import im . actor . server . dialog . group . { GroupDialog , GroupDialogExtension } < nl > import im . actor . server . presences . { GroupPresenceManager , PresenceManager } < nl > @ @ - 87 , 6 + 87 , 7 @ @ object Main extends App { < nl > UserMigrator . migrate ( ) < nl > GroupMigrator . migrate ( ) < nl > LocalNamesMigrator . migrate ( ) < nl > + GroupCreatorMemberMigrator . migrate ( ) < nl > < nl > implicit val weakUpdManagerRegion = WeakUpdatesManager . startRegion ( ) < nl > implicit val presenceManagerRegion = PresenceManager . startRegion ( ) < nl > diff - - git a / actor - server / actor - utils / src / main / scala / im / actor / server / util / IdUtils . scala b / actor - server / actor - utils / src / main / scala / im / actor / server / util / IdUtils . scala < nl > index c5ee2a4 . . beba172 100644 < nl > - - - a / actor - server / actor - utils / src / main / scala / im / actor / server / util / IdUtils . scala < nl > + + + b / actor - server / actor - utils / src / main / scala / im / actor / server / util / IdUtils . scala < nl > @ @ - 4 , 6 + 4 , 8 @ @ import scala . concurrent . forkjoin . ThreadLocalRandom < nl > import scala . util . Random < nl > < nl > object IdUtils { < nl > + def nextIntId ( ) : Int = nextIntId ( ThreadLocalRandom . current ( ) ) < nl > + < nl > def nextIntId ( rnd : ThreadLocalRandom ) : Int = rnd . nextInt ( 1000 , Int . MaxValue ) + 1 < nl > < nl > def nextAuthId ( rng : Random ) : Long = {

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 index 566d29f . . 50fb910 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / AdminCommandHandlers . scala 
 @ @ - 14 , 7 + 14 , 7 @ @ import im . actor . server . acl . ACLUtils 
 import im . actor . server . group . GroupCommands . { DeleteGroup , DismissUserAdmin , MakeHistoryShared , MakeUserAdmin , RevokeIntegrationToken , RevokeIntegrationTokenAck , TransferOwnership , UpdateAdminSettings , UpdateAdminSettingsAck } 
 import im . actor . server . group . GroupErrors . { NotAMember , NotAdmin , UserAlreadyAdmin , UserAlreadyNotAdmin } 
 import im . actor . server . group . GroupEvents . { AdminSettingsUpdated , AdminStatusChanged , GroupDeleted , HistoryBecameShared , IntegrationTokenRevoked , OwnerChanged } 
 - import im . actor . server . persist . { GroupBotRepo , GroupUserRepo , HistoryMessageRepo } 
 + import im . actor . server . persist . { GroupBotRepo , GroupInviteTokenRepo , GroupUserRepo , HistoryMessageRepo } 
 import im . actor . server . sequence . { SeqState , SeqStateDate } 
 
 import scala . concurrent . Future 
 @ @ - 346 , 6 + 346 , 10 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { 
 persist ( GroupDeleted ( Instant . now , cmd . clientUserId ) ) { evt ⇒ 
 val newState = commit ( evt ) 
 
 + val dateMillis = evt . ts . toEpochMilli 
 + val randomId = ACLUtils . randomLong ( ) 
 + 
 + / / TODO : add UpdateIsDeleted 
 val deleteGroupMembersUpdates : Vector [ Update ] = Vector ( 
 UpdateGroupCanSendMessagesChanged ( groupId , canSendMessages = false ) , 
 UpdateGroupCanViewMembersChanged ( groupId , canViewMembers = false ) , 
 @ @ - 366 , 11 + 370 , 34 @ @ private [ group ] trait AdminCommandHandlers extends GroupsImplicits { 
 UpdateGroupMembersUpdated ( groupId , members = Vector . empty ) 
 ) 
 
 - / / TODO : add UpdateIsDeleted 
 - / / TODO : for old API updates as in leacve 
 + / / TODO : remove deprecated . GroupInviteTokenRepo don ' t have replacement yet . 
 + newState . memberIds foreach { userId ⇒ 
 + db . run ( 
 + for { 
 + _ ← GroupUserRepo . delete ( groupId , userId ) 
 + _ ← GroupInviteTokenRepo . revoke ( groupId , userId ) 
 + } yield ( ) 
 + ) 
 + } 
 
 val result : Future [ SeqState ] = for { 
 _ ← db . run ( HistoryMessageRepo . deleteAll ( cmd . clientUserId , apiGroupPeer . asModel ) ) 
 + 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Groups V1 API updates / / 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + / / push all members updates about other members left group 
 + _ ← FutureExt . ftraverse ( newState . memberIds . toSeq ) { userId ⇒ 
 + seqUpdExt . broadcastPeopleUpdate ( 
 + userIds = newState . memberIds - userId , 
 + update = UpdateGroupUserLeaveObsolete ( groupId , userId , dateMillis , randomId ) 
 + ) 
 + } 
 + 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Groups V2 API updates / / 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 _ ← Future . traverse ( deleteGroupMembersUpdates ) { update ⇒ 
 seqUpdExt . broadcastPeopleUpdate ( newState . memberIds , update ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index 3e24dc5 . . faf98a1 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . server . user . UserExtension 
 import scala . concurrent . duration . _ 
 import scala . concurrent . { ExecutionContext , Future } 
 
 + / / TODO : maybe add dateMillis 
 trait GroupEvent extends TaggedEvent { 
 val ts : Instant

NEAREST DIFF:
diff - - git a / . gitignore b / . gitignore 
 index d16f251 . . 5022d3b 100644 
 - - - a / . gitignore 
 + + + b / . gitignore 
 @ @ - 3 , 6 + 3 , 7 @ @ target / 
 actor - server / src / main / resources / application . conf 
 actor - server / actor - tests / src / test / resources / application . conf 
 actor - server / actor - testkit / src / test / resources / application . conf 
 + actor - server / actor - testkit / src / main / resources / application . conf 
 actor - tests / journal 
 actor - tests / snapshots 
 actor - dashboard / logs 
 diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto 
 index 3adf4e8 . . de4d02f 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / group . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / group . proto 
 @ @ - 29 , 6 + 29 , 20 @ @ message GroupCommands { 
 required int64 date = 4 ; 
 } 
 
 + message CreateInternal { 
 + option ( scalapb . message ) . extends = " im . actor . server . group . GroupCommand " ; 
 + 
 + required int32 group _ id = 1 ; 
 + 
 + required int32 creator _ user _ id = 3 ; 
 + required string title = 4 ; 
 + repeated int32 user _ ids = 5 ; 
 + } 
 + 
 + message CreateInternalAck { 
 + required int64 access _ hash = 1 ; 
 + } 
 + 
 message Join { 
 option ( scalapb . message ) . extends = " im . actor . server . group . GroupCommand " ; 
 
 @ @ - 221 , 6 + 235 , 7 @ @ message GroupEvents { 
 required int32 creator _ user _ id = 2 ; 
 required int64 access _ hash = 3 ; 
 required string title = 4 ; 
 + repeated int32 user _ ids = 6 ; 
 } 
 
 message UserInvited { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 8b079dd . . 85ab17c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 38 , 11 + 38 , 30 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 import GroupCommands . _ 
 import GroupEvents . _ 
 
 - protected def create ( groupId : Int , creatorUserId : Int , creatorAuthId : Long , title : String , randomId : Long , userIds : Set [ Int ] ) : Unit = { 
 - val rng = ThreadLocalRandom . current ( ) 
 + protected def createInternal ( creatorUserId : Int , title : String , userIds : Seq [ Int ] ) : Unit = { 
 + val accessHash = genAccessHash ( ) 
 
 - val accessHash = rng . nextLong ( ) 
 + val date = now ( ) 
 + val created = GroupEvents . Created ( groupId , creatorUserId , accessHash , title , userIds ) 
 + val state = initState ( date , created ) 
 
 + persist ( TSEvent ( date , created ) ) { _ ⇒ 
 + context become working ( state ) 
 + 
 + val rng = ThreadLocalRandom . current ( ) 
 + db . run ( for { 
 + _ ← createInDb ( state , rng . nextLong ( ) ) 
 + } yield CreateInternalAck ( accessHash ) ) pipeTo sender ( ) onFailure { 
 + case e ⇒ 
 + log . error ( e , " Failed to create group internally " ) 
 + } 
 + } 
 + } 
 + 
 + protected def create ( groupId : Int , creatorUserId : Int , creatorAuthId : Long , title : String , randomId : Long , userIds : Set [ Int ] ) : Unit = { 
 + val accessHash = genAccessHash ( ) 
 + 
 + val rng = ThreadLocalRandom . current ( ) 
 userIds . filterNot ( _ = = creatorUserId ) foreach { userId ⇒ 
 val randomId = rng . nextLong ( ) 
 context . parent ! Invite ( groupId , userId , creatorUserId , creatorAuthId , randomId ) 
 @ @ - 400 , 4 + 419 , 21 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 } yield SeqStateDate ( seq , state , date . getMillis ) 
 } 
 
 + private def genAccessHash ( ) : Long = 
 + ThreadLocalRandom . current ( ) . nextLong ( ) 
 + 
 + private def createInDb ( state : Group , randomId : Long ) = 
 + p . Group . create ( 
 + models . Group ( 
 + id = groupId , 
 + creatorUserId = state . creatorUserId , 
 + accessHash = state . accessHash , 
 + title = state . title , 
 + isPublic = state . isPublic , 
 + createdAt = state . createdAt , 
 + about = None , 
 + topic = None 
 + ) , 
 + randomId 
 + ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 index 03f4750 . . 955e770 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 @ @ - 30 , 6 + 30 , 14 @ @ private [ group ] sealed trait Commands { 
 ) : Future [ CreateAck ] = 
 ( peerManagerRegion . ref ? Create ( groupId , clientUserId , clientAuthId , title , randomId , userIds . toSeq ) ) . mapTo [ CreateAck ] 
 
 + def createInternal ( groupId : Int , creatorUserId : Int , title : String , userIds : Set [ Int ] ) ( 
 + implicit 
 + region : GroupProcessorRegion , 
 + timeout : Timeout , 
 + ec : ExecutionContext 
 + ) : Future [ CreateInternalAck ] = 
 + ( region . ref ? CreateInternal ( groupId , creatorUserId , title , userIds . toSeq ) ) . mapTo [ CreateInternalAck ] 
 + 
 def makePublic ( groupId : Int , description : String ) ( 
 implicit 
 region : GroupProcessorRegion , 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index 1111ce3 . . 7f1ceef 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 78 , 6 + 78 , 8 @ @ object GroupProcessor { 
 ActorSerializer . register ( 20018 , classOf [ GroupCommands . RevokeIntegrationToken ] ) 
 ActorSerializer . register ( 20020 , classOf [ GroupCommands . RevokeIntegrationTokenAck ] ) 
 ActorSerializer . register ( 20023 , classOf [ GroupCommands . JoinAfterFirstRead ] ) 
 + ActorSerializer . register ( 20024 , classOf [ GroupCommands . CreateInternal ] ) 
 + ActorSerializer . register ( 20025 , classOf [ GroupCommands . CreateInternalAck ] ) 
 
 ActorSerializer . register ( 21001 , classOf [ GroupQueries . GetIntegrationToken ] ) 
 ActorSerializer . register ( 21002 , classOf [ GroupQueries . GetIntegrationTokenResponse ] ) 
 @ @ - 191 , 6 + 193 , 8 @ @ private [ group ] final class GroupProcessor 
 override def handleInitCommand : Receive = { 
 case Create ( _ , creatorUserId , creatorAuthId , title , randomId , userIds ) ⇒ 
 create ( groupId , creatorUserId , creatorAuthId , title , randomId , userIds . toSet ) 
 + case CreateInternal ( _ , creatorUserId , title , userIds ) ⇒ 
 + createInternal ( creatorUserId , title , userIds ) 
 } 
 
 override def handleCommand ( state : Group ) : Receive = { 
 @ @ - 261 , 10 + 265 , 10 @ @ private [ group ] final class GroupProcessor 
 about = None , 
 creatorUserId = evt . creatorUserId , 
 createdAt = ts , 
 - members = Map ( evt . creatorUserId → Member ( evt . creatorUserId , evt . creatorUserId , ts , isAdmin = true ) ) , 
 + members = ( evt . userIds map ( userId ⇒ ( userId → Member ( userId , evt . creatorUserId , ts , isAdmin = ( userId = = evt . creatorUserId ) ) ) ) ) . toMap , 
 isPublic = false , 
 bot = None , 
 - invitedUserIds = Set . empty , 
 + invitedUserIds = evt . userIds . filterNot ( _ = = evt . creatorUserId ) . toSet , 
 avatar = None , 
 topic = None 
 ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala 
 new file mode 100644 
 index 0000000 . . 30af7a5 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / GroupCreatorMemberMigrator . scala 
 @ @ - 0 , 0 + 1 , 89 @ @ 
 + package im . actor . server . migrations 
 + 
 + import akka . actor . { ActorLogging , Actor , Props , ActorSystem } 
 + import akka . persistence . { RecoveryFailure , RecoveryCompleted , PersistentActor } 
 + import im . actor . server . event . TSEvent 
 + import im . actor . server . group . { GroupEvents , GroupOffice } 
 + import slick . driver . PostgresDriver . api . _ 
 + import im . actor . server . persist 
 + 
 + import scala . concurrent . { Promise , Future , ExecutionContext } 
 + import scala . concurrent . duration . _ 
 + 
 + object GroupCreatorMemberMigrator extends Migration { 
 + private case object Migrate 
 + 
 + protected override def migrationName = " 2015 - 08 - 28 - GroupCreatorMemberMigration " 
 + 
 + protected override def migrationTimeout = 1 . hour 
 + 
 + protected override def startMigration ( ) ( implicit system : ActorSystem , db : Database , ec : ExecutionContext ) : Future [ Unit ] = { 
 + db . run ( persist . Group . allIds ) flatMap { groupIds ⇒ 
 + Future . sequence ( groupIds map { groupId ⇒ 
 + val promise = Promise [ Unit ] ( ) 
 + 
 + system . actorOf ( Props ( classOf [ GroupCreatorMemberMigrator ] , promise , groupId ) , s " migrate _ group _ creator _ member _ $ { groupId } " ) 
 + promise . future onFailure { 
 + case e ⇒ system . log . error ( e , s " Failed to migrate $ { groupId } " ) 
 + } 
 + 
 + promise . future 
 + } ) map ( _ ⇒ ( ) ) 
 + } 
 + } 
 + } 
 + 
 + private final class GroupCreatorMemberMigrator ( promise : Promise [ Unit ] , groupId : Int ) extends PersistentActor with ActorLogging { 
 + import GroupCreatorMemberMigrator . _ 
 + import GroupEvents . _ 
 + 
 + override def persistenceId = GroupOffice . persistenceIdFor ( groupId ) 
 + 
 + def receiveCommand = { 
 + case Migrate ⇒ migrate ( ) 
 + } 
 + 
 + var originalCreatorUserId : Int = - 1 
 + var creatorUserIdOpt : Option [ Int ] = None 
 + 
 + def receiveRecover = { 
 + case TSEvent ( _ , e : Created ) ⇒ 
 + creatorUserIdOpt = Some ( e . creatorUserId ) 
 + originalCreatorUserId = e . creatorUserId 
 + case TSEvent ( _ , e : UserLeft ) ⇒ 
 + if ( creatorUserIdOpt . exists ( _ = = e . userId ) ) { 
 + creatorUserIdOpt = None 
 + } 
 + case TSEvent ( _ , e : UserKicked ) ⇒ 
 + if ( creatorUserIdOpt . exists ( _ = = e . userId ) ) { 
 + creatorUserIdOpt = None 
 + } 
 + case RecoveryCompleted ⇒ 
 + self ! Migrate 
 + case RecoveryFailure ( e ) ⇒ 
 + log . error ( e , " Failed to recover " ) 
 + } 
 + 
 + override def preRestart ( reason : Throwable , message : Option [ Any ] ) : Unit = { 
 + super . preRestart ( reason , message ) 
 + promise . failure ( reason ) 
 + } 
 + 
 + private def migrate ( ) : Unit = { 
 + log . warning ( " Migrating { } " , groupId ) 
 + creatorUserIdOpt match { 
 + case Some ( creatorUserId ) ⇒ 
 + log . warning ( " Adding member { } " , creatorUserId ) 
 + persist ( UserInvited ( creatorUserId , creatorUserId ) ) ( identity ) 
 + persist ( UserJoined ( creatorUserId , creatorUserId ) ) { _ ⇒ 
 + log . warning ( " Migrated " ) 
 + promise . success ( ( ) ) 
 + context stop self 
 + } 
 + case None ⇒ 
 + log . warning ( " No migration needed , creator left " ) 
 + promise . success ( ( ) ) 
 + context stop self 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala 
 index fec156d . . a268b0e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / Migration . scala 
 @ @ - 35 , 6 + 35 , 7 @ @ trait Migration { 
 } recover { 
 case e ⇒ 
 system . log . error ( e , s " Migration $ migrationName failed ! ! ! " ) 
 + throw e 
 } , migrationTimeout ) 
 } 
 
 diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 index edbf023 . . 61e2e55 100644 
 - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 @ @ - 31 , 7 + 31 , 7 @ @ import im . actor . server . dialog . privat . { PrivateDialog , PrivateDialogExtension } 
 import im . actor . server . email . { EmailConfig , EmailSender } 
 import im . actor . server . enrich . { RichMessageConfig , RichMessageWorker } 
 import im . actor . server . group . _ 
 - import im . actor . server . migrations . { IntegrationTokenMigrator , LocalNamesMigrator } 
 + import im . actor . server . migrations . { GroupCreatorMemberMigrator , IntegrationTokenMigrator , LocalNamesMigrator } 
 import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } 
 import im . actor . server . dialog . group . { GroupDialog , GroupDialogExtension } 
 import im . actor . server . presences . { GroupPresenceManager , PresenceManager } 
 @ @ - 87 , 6 + 87 , 7 @ @ object Main extends App { 
 UserMigrator . migrate ( ) 
 GroupMigrator . migrate ( ) 
 LocalNamesMigrator . migrate ( ) 
 + GroupCreatorMemberMigrator . migrate ( ) 
 
 implicit val weakUpdManagerRegion = WeakUpdatesManager . startRegion ( ) 
 implicit val presenceManagerRegion = PresenceManager . startRegion ( ) 
 diff - - git a / actor - server / actor - utils / src / main / scala / im / actor / server / util / IdUtils . scala b / actor - server / actor - utils / src / main / scala / im / actor / server / util / IdUtils . scala 
 index c5ee2a4 . . beba172 100644 
 - - - a / actor - server / actor - utils / src / main / scala / im / actor / server / util / IdUtils . scala 
 + + + b / actor - server / actor - utils / src / main / scala / im / actor / server / util / IdUtils . scala 
 @ @ - 4 , 6 + 4 , 8 @ @ import scala . concurrent . forkjoin . ThreadLocalRandom 
 import scala . util . Random 
 
 object IdUtils { 
 + def nextIntId ( ) : Int = nextIntId ( ThreadLocalRandom . current ( ) ) 
 + 
 def nextIntId ( rnd : ThreadLocalRandom ) : Int = rnd . nextInt ( 1000 , Int . MaxValue ) + 1 
 
 def nextAuthId ( rng : Random ) : Long = {
