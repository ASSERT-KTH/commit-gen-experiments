BLEU SCORE: 0.45622720708659226

TEST MSG: ref ( core ) : Async Dialogs handling
GENERATED MSG: ref ( core ) : GroupedDialogs - > ActiveDialogs

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > index e0be385 . . 0a85356 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > @ @ - 51 , 6 + 51 , 7 @ @ import im . actor . core . events . PeerChatOpened ; < nl > import im . actor . core . events . PeerChatPreload ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . messaging . dialogs . DialogsInt ; < nl > import im . actor . core . modules . messaging . history . ArchivedDialogsActor ; < nl > import im . actor . core . modules . messaging . actions . CursorReaderActor ; < nl > import im . actor . core . modules . messaging . actions . CursorReceiverActor ; < nl > @ @ - 96 , 7 + 97 , 7 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > private ListEngine < Dialog > dialogs ; < nl > < nl > - private ActorRef dialogsActor ; < nl > + private DialogsInt dialogsInt ; < nl > private ActorRef dialogsHistoryActor ; < nl > private ActorRef archivedDialogsActor ; < nl > private ActorRef plainReadActor ; < nl > @ @ - 129 , 7 + 130 , 7 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > < nl > this . router = new RouterInt ( context ( ) ) ; < nl > < nl > - this . dialogsActor = system ( ) . actorOf ( " actor / dialogs " , ( ) - > new DialogsActor ( context ( ) ) ) ; < nl > + this . dialogsInt = new DialogsInt ( context ( ) ) ; < nl > this . dialogsHistoryActor = system ( ) . actorOf ( " actor / dialogs / history " , ( ) - > new DialogsHistoryActor ( context ( ) ) ) ; < nl > this . archivedDialogsActor = system ( ) . actorOf ( " actor / dialogs / archived " , ( ) - > new ArchivedDialogsActor ( context ( ) ) ) ; < nl > < nl > @ @ - 205 , 8 + 206 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > return conversationStates . get ( peer . getUnuqueId ( ) ) ; < nl > } < nl > < nl > - public ActorRef getDialogsActor ( ) { < nl > - return dialogsActor ; < nl > + public DialogsInt getDialogsInt ( ) { < nl > + return dialogsInt ; < nl > } < nl > < nl > public ListEngine < Dialog > getDialogsEngine ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / DialogsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / DialogsActor . java < nl > index d7cdf4d . . bde055b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / DialogsActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / DialogsActor . java < nl > @ @ - 18 , 11 + 18 , 24 @ @ import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . User ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . ChatClear ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . ChatDelete ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . CounterChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . GroupChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . HistoryLoaded ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . InMessage ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . MessageContentChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . MessageDeleted ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . PeerReadChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . PeerReceiveChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . UserChanged ; < nl > import im . actor . core . modules . messaging . history . entity . DialogHistory ; < nl > import im . actor . core . modules . ModuleActor ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . Runtime ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > import im . actor . runtime . annotations . Verified ; < nl > + import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > < nl > import static im . actor . core . util . JavaUtil . equalsE ; < nl > @ @ - 45 , 19 + 58 , 19 @ @ public class DialogsActor extends ModuleActor { < nl > } < nl > < nl > @ Verified < nl > - private void onMessage ( Peer peer , Message message , boolean forceWrite , int counter ) { < nl > + private Promise < Void > onMessage ( Peer peer , Message message , boolean forceWrite , int counter ) { < nl > long start = im . actor . runtime . Runtime . getCurrentTime ( ) ; < nl > PeerDesc peerDesc = buildPeerDesc ( peer ) ; < nl > if ( peerDesc = = null ) { < nl > Log . d ( " DialogsActor " , " unknown peer desc " ) ; < nl > - return ; < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > if ( message = = null ) { < nl > / / Ignore empty message if not forcing write < nl > if ( ! forceWrite ) { < nl > Log . d ( " DialogsActor " , " not force " ) ; < nl > - return ; < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > / / Else perform chat clear < nl > @ @ - 85 , 7 + 98 , 7 @ @ public class DialogsActor extends ModuleActor { < nl > / / Ignore old messages if no force < nl > if ( ! forceWrite & & dialog . getSortDate ( ) > message . getSortDate ( ) ) { < nl > Log . d ( " DialogsActor " , " too old " ) ; < nl > - return ; < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > builder . setPeer ( dialog . getPeer ( ) ) < nl > @ @ - 104 , 7 + 117 , 7 @ @ public class DialogsActor extends ModuleActor { < nl > / / Do not create dialogs for silent messages < nl > if ( contentDescription . isSilent ( ) ) { < nl > Log . d ( " DialogsActor " , " is silent in " ) ; < nl > - return ; < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > builder . setPeer ( peer ) < nl > @ @ - 119 , 17 + 132 , 17 @ @ public class DialogsActor extends ModuleActor { < nl > notifyState ( forceUpdate ) ; < nl > } < nl > < nl > - Log . d ( " DialogsActor " , " onMessage in " + ( Runtime . getCurrentTime ( ) - start ) + " ms " ) ; < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > @ Verified < nl > - private void onUserChanged ( User user ) { < nl > + private Promise < Void > onUserChanged ( User user ) { < nl > Dialog dialog = dialogs . getValue ( user . peer ( ) . getUnuqueId ( ) ) ; < nl > if ( dialog ! = null ) { < nl > / / Ignore if nothing changed < nl > if ( dialog . getDialogTitle ( ) . equals ( user . getName ( ) ) < nl > & & equalsE ( dialog . getDialogAvatar ( ) , user . getAvatar ( ) ) ) { < nl > - return ; < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > / / Update dialog peer info < nl > @ @ - 137 , 16 + 150 , 18 @ @ public class DialogsActor extends ModuleActor { < nl > addOrUpdateItem ( updated ) ; < nl > updateSearch ( updated ) ; < nl > } < nl > + < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > @ Verified < nl > - private void onGroupChanged ( Group group ) { < nl > + private Promise < Void > onGroupChanged ( Group group ) { < nl > Dialog dialog = dialogs . getValue ( group . peer ( ) . getUnuqueId ( ) ) ; < nl > if ( dialog ! = null ) { < nl > / / Ignore if nothing changed < nl > if ( dialog . getDialogTitle ( ) . equals ( group . getTitle ( ) ) < nl > & & equalsE ( dialog . getDialogAvatar ( ) , group . getAvatar ( ) ) ) { < nl > - return ; < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > / / Update dialog peer info < nl > @ @ - 154 , 18 + 169 , 21 @ @ public class DialogsActor extends ModuleActor { < nl > addOrUpdateItem ( updated ) ; < nl > updateSearch ( updated ) ; < nl > } < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > @ Verified < nl > - private void onChatDeleted ( Peer peer ) { < nl > - / / Removing dialog < nl > + private Promise < Void > onChatDeleted ( Peer peer ) { < nl > + < nl > dialogs . removeItem ( peer . getUnuqueId ( ) ) ; < nl > < nl > notifyState ( true ) ; < nl > + < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > @ Verified < nl > - private void onChatClear ( Peer peer ) { < nl > + private Promise < Void > onChatClear ( Peer peer ) { < nl > Dialog dialog = dialogs . getValue ( peer . getUnuqueId ( ) ) ; < nl > < nl > / / If we have dialog for this peer < nl > @ @ - 181 , 10 + 199 , 12 @ @ public class DialogsActor extends ModuleActor { < nl > . setSenderId ( 0 ) < nl > . createDialog ( ) ) ; < nl > } < nl > + < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > @ Verified < nl > - private void onPeerRead ( Peer peer , long date ) { < nl > + private Promise < Void > onPeerRead ( Peer peer , long date ) { < nl > Dialog dialog = dialogs . getValue ( peer . getUnuqueId ( ) ) ; < nl > if ( dialog ! = null ) { < nl > addOrUpdateItem ( new DialogBuilder ( dialog ) < nl > @ @ - 192 , 56 + 212 , 55 @ @ public class DialogsActor extends ModuleActor { < nl > . updateKnownReceiveDate ( date ) < nl > . createDialog ( ) ) ; < nl > } < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > @ Verified < nl > - private void onPeerReceive ( Peer peer , long date ) { < nl > + private Promise < Void > onPeerReceive ( Peer peer , long date ) { < nl > Dialog dialog = dialogs . getValue ( peer . getUnuqueId ( ) ) ; < nl > if ( dialog ! = null ) { < nl > addOrUpdateItem ( new DialogBuilder ( dialog ) < nl > . updateKnownReceiveDate ( date ) < nl > . createDialog ( ) ) ; < nl > } < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > @ Verified < nl > - private void onMessageContentChanged ( Peer peer , long rid , AbsContent content ) { < nl > + private Promise < Void > onMessageContentChanged ( Peer peer , long rid , AbsContent content ) { < nl > Dialog dialog = dialogs . getValue ( peer . getUnuqueId ( ) ) ; < nl > < nl > / / If message is on top < nl > if ( dialog ! = null & & dialog . getRid ( ) = = rid ) { < nl > < nl > - / / Update dialog < nl > ContentDescription description = ContentDescription . fromContent ( content ) ; < nl > + < nl > addOrUpdateItem ( new DialogBuilder ( dialog ) < nl > . setText ( description . getText ( ) ) < nl > . setRelatedUid ( description . getRelatedUser ( ) ) < nl > . setMessageType ( description . getContentType ( ) ) < nl > . createDialog ( ) ) ; < nl > } < nl > + < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > @ Verified < nl > - private void onCounterChanged ( Peer peer , int count ) { < nl > + private Promise < Void > onCounterChanged ( Peer peer , int count ) { < nl > Dialog dialog = dialogs . getValue ( peer . getUnuqueId ( ) ) ; < nl > < nl > - / / If we have dialog for this peer < nl > - if ( dialog ! = null ) { < nl > - < nl > - / / Counter not actually changed < nl > - if ( dialog . getUnreadCount ( ) = = count ) { < nl > - return ; < nl > - } < nl > - < nl > - / / Update dialog < nl > + / / If we have dialog for this peer and counter changed < nl > + if ( dialog ! = null & & dialog . getUnreadCount ( ) ! = count ) { < nl > addOrUpdateItem ( new DialogBuilder ( dialog ) < nl > . setUnreadCount ( count ) < nl > . createDialog ( ) ) ; < nl > } < nl > + < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > @ Verified < nl > - private void onHistoryLoaded ( List < DialogHistory > history ) { < nl > + private Promise < Void > onHistoryLoaded ( List < DialogHistory > history ) { < nl > ArrayList < Dialog > updated = new ArrayList < Dialog > ( ) ; < nl > for ( DialogHistory dialogHistory : history ) { < nl > / / Ignore already available dialogs < nl > @ @ - 284 , 6 + 303 , 7 @ @ public class DialogsActor extends ModuleActor { < nl > updateSearch ( updated ) ; < nl > context ( ) . getAppStateModule ( ) . onDialogsLoaded ( ) ; < nl > notifyState ( true ) ; < nl > + return Promise . success ( null ) ; < nl > } < nl > < nl > / / Utils < nl > @ @ - 391 , 185 + 411 , 42 @ @ public class DialogsActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class InMessage { < nl > - private Peer peer ; < nl > - private Message message ; < nl > - private int counter ; < nl > - < nl > - public InMessage ( Peer peer , Message message , int counter ) { < nl > - this . peer = peer ; < nl > - this . message = message ; < nl > - this . counter = counter ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public Message getMessage ( ) { < nl > - return message ; < nl > - } < nl > - < nl > - public int getCounter ( ) { < nl > - return counter ; < nl > - } < nl > - } < nl > - < nl > - public static class CounterChanged { < nl > - private Peer peer ; < nl > - private int counter ; < nl > - < nl > - public CounterChanged ( Peer peer , int counter ) { < nl > - this . peer = peer ; < nl > - this . counter = counter ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public int getCounter ( ) { < nl > - return counter ; < nl > - } < nl > - } < nl > - < nl > - public static class UserChanged { < nl > - private User user ; < nl > - < nl > - public UserChanged ( User user ) { < nl > - this . user = user ; < nl > - } < nl > - < nl > - public User getUser ( ) { < nl > - return user ; < nl > - } < nl > - } < nl > - < nl > - public static class GroupChanged { < nl > - private Group group ; < nl > - < nl > - public GroupChanged ( Group group ) { < nl > - this . group = group ; < nl > - } < nl > - < nl > - public Group getGroup ( ) { < nl > - return group ; < nl > - } < nl > - } < nl > - < nl > - public static class ChatClear { < nl > - private Peer peer ; < nl > - < nl > - public ChatClear ( Peer peer ) { < nl > - this . peer = peer ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - } < nl > - < nl > - public static class ChatDelete { < nl > - private Peer peer ; < nl > - < nl > - public ChatDelete ( Peer peer ) { < nl > - this . peer = peer ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - } < nl > - < nl > - public static class PeerReadChanged { < nl > - < nl > - private Peer peer ; < nl > - private long date ; < nl > - < nl > - public PeerReadChanged ( Peer peer , long date ) { < nl > - this . peer = peer ; < nl > - this . date = date ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public long getDate ( ) { < nl > - return date ; < nl > - } < nl > - } < nl > - < nl > - public static class PeerReceiveChanged { < nl > - < nl > - private Peer peer ; < nl > - private long date ; < nl > - < nl > - public PeerReceiveChanged ( Peer peer , long date ) { < nl > - this . peer = peer ; < nl > - this . date = date ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public long getDate ( ) { < nl > - return date ; < nl > - } < nl > - } < nl > - < nl > - public static class MessageContentChanged { < nl > - private Peer peer ; < nl > - private long rid ; < nl > - private AbsContent content ; < nl > - < nl > - public MessageContentChanged ( Peer peer , long rid , AbsContent content ) { < nl > - this . peer = peer ; < nl > - this . rid = rid ; < nl > - this . content = content ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public long getRid ( ) { < nl > - return rid ; < nl > - } < nl > - < nl > - public AbsContent getContent ( ) { < nl > - return content ; < nl > - } < nl > - } < nl > - < nl > - public static class MessageDeleted { < nl > - private Peer peer ; < nl > - private Message topMessage ; < nl > - < nl > - public MessageDeleted ( Peer peer , Message topMessage ) { < nl > - this . peer = peer ; < nl > - this . topMessage = topMessage ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public Message getTopMessage ( ) { < nl > - return topMessage ; < nl > - } < nl > - } < nl > - < nl > - public static class HistoryLoaded { < nl > - private List < DialogHistory > history ; < nl > - < nl > - public HistoryLoaded ( List < DialogHistory > history ) { < nl > - this . history = history ; < nl > - } < nl > - < nl > - public List < DialogHistory > getHistory ( ) { < nl > - return history ; < nl > + @ Override < nl > + public Promise onAsk ( Object message ) throws Exception { < nl > + if ( message instanceof InMessage ) { < nl > + InMessage inMessage = ( InMessage ) message ; < nl > + return onMessage ( inMessage . getPeer ( ) , inMessage . getMessage ( ) , false , inMessage . getCounter ( ) ) ; < nl > + } else if ( message instanceof UserChanged ) { < nl > + UserChanged userChanged = ( UserChanged ) message ; < nl > + return onUserChanged ( userChanged . getUser ( ) ) ; < nl > + } else if ( message instanceof ChatClear ) { < nl > + return onChatClear ( ( ( ChatClear ) message ) . getPeer ( ) ) ; < nl > + } else if ( message instanceof ChatDelete ) { < nl > + return onChatDeleted ( ( ( ChatDelete ) message ) . getPeer ( ) ) ; < nl > + } else if ( message instanceof PeerReadChanged ) { < nl > + PeerReadChanged peerReadChanged = ( PeerReadChanged ) message ; < nl > + return onPeerRead ( peerReadChanged . getPeer ( ) , peerReadChanged . getDate ( ) ) ; < nl > + } else if ( message instanceof PeerReceiveChanged ) { < nl > + PeerReceiveChanged peerReceiveChanged = ( PeerReceiveChanged ) message ; < nl > + return onPeerReceive ( peerReceiveChanged . getPeer ( ) , peerReceiveChanged . getDate ( ) ) ; < nl > + } else if ( message instanceof MessageDeleted ) { < nl > + MessageDeleted deleted = ( MessageDeleted ) message ; < nl > + return onMessage ( deleted . getPeer ( ) , deleted . getTopMessage ( ) , true , - 1 ) ; < nl > + } else if ( message instanceof HistoryLoaded ) { < nl > + HistoryLoaded historyLoaded = ( HistoryLoaded ) message ; < nl > + return onHistoryLoaded ( historyLoaded . getHistory ( ) ) ; < nl > + } else if ( message instanceof GroupChanged ) { < nl > + GroupChanged groupChanged = ( GroupChanged ) message ; < nl > + return onGroupChanged ( groupChanged . getGroup ( ) ) ; < nl > + } else if ( message instanceof MessageContentChanged ) { < nl > + MessageContentChanged contentChanged = ( MessageContentChanged ) message ; < nl > + return onMessageContentChanged ( contentChanged . getPeer ( ) , contentChanged . getRid ( ) , < nl > + contentChanged . getContent ( ) ) ; < nl > + } else if ( message instanceof CounterChanged ) { < nl > + CounterChanged counterChanged = ( CounterChanged ) message ; < nl > + return onCounterChanged ( counterChanged . getPeer ( ) , counterChanged . getCounter ( ) ) ; < nl > + } else { < nl > + return super . onAsk ( message ) ; < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / DialogsInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / DialogsInt . java < nl > new file mode 100644 < nl > index 0000000 . . 19da073 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / DialogsInt . java < nl > @ @ - 0 , 0 + 1 , 78 @ @ < nl > + package im . actor . core . modules . messaging . dialogs ; < nl > + < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . entity . Group ; < nl > + import im . actor . core . entity . Message ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . User ; < nl > + import im . actor . core . entity . content . AbsContent ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . ChatClear ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . ChatDelete ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . CounterChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . GroupChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . HistoryLoaded ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . InMessage ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . MessageContentChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . MessageDeleted ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . PeerReadChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . PeerReceiveChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . UserChanged ; < nl > + import im . actor . core . modules . messaging . history . entity . DialogHistory ; < nl > + import im . actor . runtime . actors . ActorInterface ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > + import im . actor . runtime . promise . Promise ; < nl > + < nl > + import static im . actor . runtime . actors . ActorSystem . system ; < nl > + < nl > + public class DialogsInt extends ActorInterface { < nl > + < nl > + public DialogsInt ( ModuleContext context ) { < nl > + setDest ( system ( ) . actorOf ( " actor / dialogs " , ( ) - > new DialogsActor ( context ) ) ) ; < nl > + } < nl > + < nl > + public Promise < Void > onChatClear ( Peer peer ) { < nl > + return ask ( new ChatClear ( peer ) ) ; < nl > + } < nl > + < nl > + public Promise < Void > onChatDelete ( Peer peer ) { < nl > + return ask ( new ChatDelete ( peer ) ) ; < nl > + } < nl > + < nl > + public Promise < Void > onCounterChanged ( Peer peer , int counter ) { < nl > + return ask ( new CounterChanged ( peer , counter ) ) ; < nl > + } < nl > + < nl > + public Promise < Void > onGroupChanged ( Group group ) { < nl > + return ask ( new GroupChanged ( group ) ) ; < nl > + } < nl > + < nl > + public Promise < Void > onUserChanged ( User user ) { < nl > + return ask ( new UserChanged ( user ) ) ; < nl > + } < nl > + < nl > + public Promise < Void > onHistoryLoaded ( List < DialogHistory > history ) { < nl > + return ask ( new HistoryLoaded ( history ) ) ; < nl > + } < nl > + < nl > + public Promise < Void > onMessage ( Peer peer , Message message , int counter ) { < nl > + return ask ( new InMessage ( peer , message , counter ) ) ; < nl > + } < nl > + < nl > + public Promise < Void > onMessageContentChanged ( Peer peer , long rid , AbsContent content ) { < nl > + return ask ( new MessageContentChanged ( peer , rid , content ) ) ; < nl > + } < nl > + < nl > + public Promise < Void > onMessageDeleted ( Peer peer , Message topMessage ) { < nl > + return ask ( new MessageDeleted ( peer , topMessage ) ) ; < nl > + } < nl > + < nl > + public Promise < Void > onPeerReadChanged ( Peer peer , long date ) { < nl > + return ask ( new PeerReadChanged ( peer , date ) ) ; < nl > + } < nl > + < nl > + public Promise < Void > onPeerReceiveChanged ( Peer peer , long date ) { < nl > + return ask ( new PeerReceiveChanged ( peer , date ) ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / ChatClear . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / ChatClear . java < nl > new file mode 100644 < nl > index 0000000 . . 95bc5ec < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / ChatClear . java < nl > @ @ - 0 , 0 + 1 , 18 @ @ < nl > + package im . actor . core . modules . messaging . dialogs . entity ; < nl > + < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > + < nl > + public class ChatClear implements AskMessage < Void > { < nl > + < nl > + private Peer peer ; < nl > + < nl > + public ChatClear ( Peer peer ) { < nl > + this . peer = peer ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / ChatDelete . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / ChatDelete . java < nl > new file mode 100644 < nl > index 0000000 . . 215ea07 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / ChatDelete . java < nl > @ @ - 0 , 0 + 1 , 18 @ @ < nl > + package im . actor . core . modules . messaging . dialogs . entity ; < nl > + < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > + < nl > + public class ChatDelete implements AskMessage < Void > { < nl > + < nl > + private Peer peer ; < nl > + < nl > + public ChatDelete ( Peer peer ) { < nl > + this . peer = peer ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / CounterChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / CounterChanged . java < nl > new file mode 100644 < nl > index 0000000 . . ac42d49 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / CounterChanged . java < nl > @ @ - 0 , 0 + 1 , 24 @ @ < nl > + package im . actor . core . modules . messaging . dialogs . entity ; < nl > + < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > + < nl > + public class CounterChanged implements AskMessage < Void > { < nl > + < nl > + private Peer peer ; < nl > + private int counter ; < nl > + < nl > + public CounterChanged ( Peer peer , int counter ) { < nl > + this . peer = peer ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / GroupChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / GroupChanged . java < nl > new file mode 100644 < nl > index 0000000 . . a77293a < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / GroupChanged . java < nl > @ @ - 0 , 0 + 1 , 18 @ @ < nl > + package im . actor . core . modules . messaging . dialogs . entity ; < nl > + < nl > + import im . actor . core . entity . Group ; < nl > + import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > + < nl > + public class GroupChanged implements AskMessage < Void > { < nl > + < nl > + private Group group ; < nl > + < nl > + public GroupChanged ( Group group ) { < nl > + this . group = group ; < nl > + } < nl > + < nl > + public Group getGroup ( ) { < nl > + return group ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / HistoryLoaded . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / HistoryLoaded . java < nl > new file mode 100644 < nl > index 0000000 . . 6ba6f53 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / HistoryLoaded . java < nl > @ @ - 0 , 0 + 1 , 20 @ @ < nl > + package im . actor . core . modules . messaging . dialogs . entity ; < nl > + < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . modules . messaging . history . entity . DialogHistory ; < nl > + import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > + < nl > + public class HistoryLoaded implements AskMessage < Void > { < nl > + < nl > + private List < DialogHistory > history ; < nl > + < nl > + public HistoryLoaded ( List < DialogHistory > history ) { < nl > + this . history = history ; < nl > + } < nl > + < nl > + public List < DialogHistory > getHistory ( ) { < nl > + return history ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / InMessage . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / InMessage . java < nl > new file mode 100644 < nl > index 0000000 . . 7a42d3d < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / InMessage . java < nl > @ @ - 0 , 0 + 1 , 31 @ @ < nl > + package im . actor . core . modules . messaging . dialogs . entity ; < nl > + < nl > + import im . actor . core . entity . Message ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > + < nl > + public class InMessage implements AskMessage < Void > { < nl > + < nl > + private Peer peer ; < nl > + private Message message ; < nl > + private int counter ; < nl > + < nl > + public InMessage ( Peer peer , Message message , int counter ) { < nl > + this . peer = peer ; < nl > + this . message = message ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public Message getMessage ( ) { < nl > + return message ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / MessageContentChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / MessageContentChanged . java < nl > new file mode 100644 < nl > index 0000000 . . de7645c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / MessageContentChanged . java < nl > @ @ - 0 , 0 + 1 , 31 @ @ < nl > + package im . actor . core . modules . messaging . dialogs . entity ; < nl > + < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . content . AbsContent ; < nl > + import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > + < nl > + public class MessageContentChanged implements AskMessage < Void > { < nl > + < nl > + private Peer peer ; < nl > + private long rid ; < nl > + private AbsContent content ; < nl > + < nl > + public MessageContentChanged ( Peer peer , long rid , AbsContent content ) { < nl > + this . peer = peer ; < nl > + this . rid = rid ; < nl > + this . content = content ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public long getRid ( ) { < nl > + return rid ; < nl > + } < nl > + < nl > + public AbsContent getContent ( ) { < nl > + return content ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / MessageDeleted . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / MessageDeleted . java < nl > new file mode 100644 < nl > index 0000000 . . a83a04e < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / MessageDeleted . java < nl > @ @ - 0 , 0 + 1 , 25 @ @ < nl > + package im . actor . core . modules . messaging . dialogs . entity ; < nl > + < nl > + import im . actor . core . entity . Message ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > + < nl > + public class MessageDeleted implements AskMessage < Void > { < nl > + < nl > + private Peer peer ; < nl > + private Message topMessage ; < nl > + < nl > + public MessageDeleted ( Peer peer , Message topMessage ) { < nl > + this . peer = peer ; < nl > + this . topMessage = topMessage ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public Message getTopMessage ( ) { < nl > + return topMessage ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / PeerReadChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / PeerReadChanged . java < nl > new file mode 100644 < nl > index 0000000 . . bcaea62 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / PeerReadChanged . java < nl > @ @ - 0 , 0 + 1 , 24 @ @ < nl > + package im . actor . core . modules . messaging . dialogs . entity ; < nl > + < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > + < nl > + public class PeerReadChanged implements AskMessage < Void > { < nl > + < nl > + private Peer peer ; < nl > + private long date ; < nl > + < nl > + public PeerReadChanged ( Peer peer , long date ) { < nl > + this . peer = peer ; < nl > + this . date = date ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public long getDate ( ) { < nl > + return date ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / PeerReceiveChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / PeerReceiveChanged . java < nl > new file mode 100644 < nl > index 0000000 . . dfd84ec < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / PeerReceiveChanged . java < nl > @ @ - 0 , 0 + 1 , 24 @ @ < nl > + package im . actor . core . modules . messaging . dialogs . entity ; < nl > + < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > + < nl > + public class PeerReceiveChanged implements AskMessage < Void > { < nl > + < nl > + private Peer peer ; < nl > + private long date ; < nl > + < nl > + public PeerReceiveChanged ( Peer peer , long date ) { < nl > + this . peer = peer ; < nl > + this . date = date ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public long getDate ( ) { < nl > + return date ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / UserChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / UserChanged . java < nl > new file mode 100644 < nl > index 0000000 . . 10c3bae < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / UserChanged . java < nl > @ @ - 0 , 0 + 1 , 18 @ @ < nl > + package im . actor . core . modules . messaging . dialogs . entity ; < nl > + < nl > + import im . actor . core . entity . User ; < nl > + import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > + < nl > + public class UserChanged implements AskMessage < Void > { < nl > + < nl > + private User user ; < nl > + < nl > + public UserChanged ( User user ) { < nl > + this . user = user ; < nl > + } < nl > + < nl > + public User getUser ( ) { < nl > + return user ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > index 4719bc6 . . 81f76a7 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java < nl > @ @ - 38 , 7 + 38 , 17 @ @ import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . messaging . actions . CursorReaderActor ; < nl > import im . actor . core . modules . messaging . actions . CursorReceiverActor ; < nl > import im . actor . core . modules . messaging . actions . SenderActor ; < nl > - import im . actor . core . modules . messaging . dialogs . DialogsActor ; < nl > + import im . actor . core . modules . messaging . dialogs . DialogsInt ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . ChatClear ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . ChatDelete ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . CounterChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . GroupChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . InMessage ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . MessageDeleted ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . PeerReadChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . PeerReceiveChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . UserChanged ; < nl > + import im . actor . core . modules . messaging . dialogs . entity . HistoryLoaded ; < nl > import im . actor . core . modules . messaging . history . entity . DialogHistory ; < nl > import im . actor . core . modules . messaging . router . entity . ActiveDialogGroup ; < nl > import im . actor . core . modules . messaging . router . entity . ActiveDialogStorage ; < nl > @ @ - 76 , 6 + 86 , 9 @ @ public class RouterActor extends ModuleActor { < nl > < nl > private static final String TAG = " RouterActor " ; < nl > < nl > + / / j2objc workaround < nl > + private static final Void DUMB = null ; < nl > + < nl > / / Visibility < nl > private final HashSet < Peer > visiblePeers = new HashSet < > ( ) ; < nl > private boolean isAppVisible = false ; < nl > @ @ - 269 , 7 + 282 , 7 @ @ public class RouterActor extends ModuleActor { < nl > / / < nl > / / Updating Dialog List < nl > / / < nl > - dialogsActor ( new DialogsActor . InMessage ( peer , topMessage , state . getUnreadCount ( ) ) ) ; < nl > + Promise < Void > res = getDialogsRouter ( ) . onMessage ( peer , topMessage , state . getUnreadCount ( ) ) ; < nl > < nl > < nl > / / < nl > @ @ - 294 , 7 + 307 , 7 @ @ public class RouterActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - return Promise . success ( null ) ; < nl > + return res ; < nl > } < nl > < nl > < nl > @ @ - 319 , 9 + 332 , 10 @ @ public class RouterActor extends ModuleActor { < nl > conversation ( peer ) . addOrUpdateItem ( updatedMsg ) ; < nl > < nl > / / Notify dialogs < nl > - dialogsActor ( new DialogsActor . InMessage ( peer , updatedMsg , - 1 ) ) ; < nl > + return getDialogsRouter ( ) . onMessage ( peer , updatedMsg , - 1 ) ; < nl > + } else { < nl > + return Promise . success ( null ) ; < nl > } < nl > - return Promise . success ( null ) ; < nl > } < nl > < nl > private Promise < Void > onOutgoingError ( Peer peer , long rid ) { < nl > @ @ - 361 , 9 + 375 , 7 @ @ public class RouterActor extends ModuleActor { < nl > conversationStates . addOrUpdateItem ( state ) ; < nl > } < nl > < nl > - dialogsActor ( new DialogsActor . HistoryLoaded ( dialogs ) ) ; < nl > - < nl > - return Promise . success ( null ) ; < nl > + return getDialogsRouter ( ) . onHistoryLoaded ( dialogs ) ; < nl > } < nl > < nl > private Promise < Void > onChatHistoryLoaded ( Peer peer , List < Message > messages , Long maxReadDate , < nl > @ @ - 421 , 12 + 433 , 15 @ @ public class RouterActor extends ModuleActor { < nl > / / < nl > < nl > private Promise < Void > onContentUpdate ( Peer peer , long rid , AbsContent content ) { < nl > + < nl > Message message = conversation ( peer ) . getValue ( rid ) ; < nl > - / / Ignore if we already doesn ' t have this message < nl > + < nl > if ( message ! = null ) { < nl > conversation ( peer ) . addOrUpdateItem ( message . changeContent ( content ) ) ; < nl > + return getDialogsRouter ( ) . onMessageContentChanged ( peer , rid , content ) ; < nl > + } else { < nl > + return Promise . success ( null ) ; < nl > } < nl > - return Promise . success ( null ) ; < nl > } < nl > < nl > private Promise < Void > onReactionsUpdate ( Peer peer , long rid , List < Reaction > reactions ) { < nl > @ @ - 451 , 27 + 466 , 22 @ @ public class RouterActor extends ModuleActor { < nl > conversation ( peer ) . removeItems ( JavaUtil . unbox ( rids ) ) ; < nl > < nl > Message head = conversation ( peer ) . getHeadValue ( ) ; < nl > - dialogsActor ( new DialogsActor . MessageDeleted ( peer , head . getMessageState ( ) = = MessageState . PENDING ? null : head ) ) ; < nl > < nl > - return Promise . success ( null ) ; < nl > + return getDialogsRouter ( ) . onMessageDeleted ( peer , head . getMessageState ( ) = = MessageState . PENDING ? null : head ) ; < nl > } < nl > < nl > private Promise < Void > onChatClear ( Peer peer ) { < nl > < nl > conversation ( peer ) . clear ( ) ; < nl > < nl > - dialogsActor ( new DialogsActor . ChatClear ( peer ) ) ; < nl > - < nl > - return Promise . success ( null ) ; < nl > + return getDialogsRouter ( ) . onChatClear ( peer ) ; < nl > } < nl > < nl > private Promise < Void > onChatDelete ( Peer peer ) { < nl > < nl > conversation ( peer ) . clear ( ) ; < nl > < nl > - dialogsActor ( new DialogsActor . ChatDelete ( peer ) ) ; < nl > - < nl > - return Promise . success ( null ) ; < nl > + return getDialogsRouter ( ) . onChatDelete ( peer ) ; < nl > } < nl > < nl > < nl > @ @ - 482 , 10 + 492 , 13 @ @ public class RouterActor extends ModuleActor { < nl > private Promise < Void > onMessageRead ( Peer peer , long date ) { < nl > ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; < nl > boolean isChanged = false ; < nl > + Promise < Void > res ; < nl > if ( date > state . getOutReadDate ( ) ) { < nl > state = state . changeOutReadDate ( date ) ; < nl > - dialogsActor ( new DialogsActor . PeerReadChanged ( peer , date ) ) ; < nl > + res = getDialogsRouter ( ) . onPeerReadChanged ( peer , date ) ; < nl > isChanged = true ; < nl > + } else { < nl > + res = Promise . success ( null ) ; < nl > } < nl > if ( date > state . getOutReceiveDate ( ) ) { < nl > state = state . changeOutReceiveDate ( date ) ; < nl > @ @ - 495 , 32 + 508 , 36 @ @ public class RouterActor extends ModuleActor { < nl > conversationStates . addOrUpdateItem ( state ) ; < nl > } < nl > < nl > - return Promise . success ( null ) ; < nl > + return res ; < nl > } < nl > < nl > private Promise < Void > onMessageReceived ( Peer peer , long date ) { < nl > ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; < nl > if ( date > state . getOutReceiveDate ( ) ) { < nl > - dialogsActor ( new DialogsActor . PeerReceiveChanged ( peer , date ) ) ; < nl > state = state . changeOutReceiveDate ( date ) ; < nl > conversationStates . addOrUpdateItem ( state ) ; < nl > + < nl > + return getDialogsRouter ( ) . onPeerReceiveChanged ( peer , date ) ; < nl > + } else { < nl > + return Promise . success ( null ) ; < nl > } < nl > - return Promise . success ( null ) ; < nl > } < nl > < nl > private Promise < Void > onMessageReadByMe ( Peer peer , long date , int counter ) { < nl > + < nl > ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; < nl > state = state < nl > . changeCounter ( counter ) < nl > . changeInReadDate ( date ) ; < nl > conversationStates . addOrUpdateItem ( state ) ; < nl > < nl > - dialogsActor ( new DialogsActor . CounterChanged ( peer , counter ) ) ; < nl > + Promise < Void > res = getDialogsRouter ( ) . onCounterChanged ( peer , counter ) ; < nl > < nl > notifyActiveDialogsVM ( ) ; < nl > < nl > context ( ) . getNotificationsModule ( ) . onOwnRead ( peer , date ) ; < nl > - return Promise . success ( null ) ; < nl > + < nl > + return res ; < nl > } < nl > < nl > < nl > @ @ - 529 , 6 + 546 , 9 @ @ public class RouterActor extends ModuleActor { < nl > / / < nl > < nl > private Promise < Void > onPeersChanged ( List < User > users , List < Group > groups ) { < nl > + < nl > + Promise < Void > res = Promise . success ( null ) ; < nl > + < nl > boolean isActiveNeedUpdate = false ; < nl > for ( User u : users ) { < nl > if ( ! isActiveNeedUpdate ) { < nl > @ @ - 539 , 7 + 559 , 7 @ @ public class RouterActor extends ModuleActor { < nl > } < nl > } < nl > } < nl > - dialogsActor ( new DialogsActor . UserChanged ( u ) ) ; < nl > + res = res . chain ( v - > getDialogsRouter ( ) . onUserChanged ( u ) ) ; < nl > } < nl > for ( Group group : groups ) { < nl > if ( ! isActiveNeedUpdate ) { < nl > @ @ - 550 , 14 + 570 , 15 @ @ public class RouterActor extends ModuleActor { < nl > } < nl > } < nl > } < nl > - dialogsActor ( new DialogsActor . GroupChanged ( group ) ) ; < nl > + < nl > + res = res . chain ( v - > getDialogsRouter ( ) . onGroupChanged ( group ) ) ; < nl > } < nl > < nl > if ( isActiveNeedUpdate ) { < nl > notifyActiveDialogsVM ( ) ; < nl > } < nl > < nl > - return Promise . success ( null ) ; < nl > + return res ; < nl > } < nl > < nl > < nl > @ @ - 603 , 9 + 624 , 9 @ @ public class RouterActor extends ModuleActor { < nl > context ( ) . getMessagesModule ( ) . getPlainReadActor ( ) < nl > . send ( new CursorReaderActor . MarkRead ( peer , state . getInMaxMessageDate ( ) ) ) ; < nl > < nl > - dialogsActor ( new DialogsActor . CounterChanged ( peer , 0 ) ) ; < nl > - < nl > notifyActiveDialogsVM ( ) ; < nl > + < nl > + getDialogsRouter ( ) . onCounterChanged ( peer , 0 ) ; < nl > } < nl > } < nl > } < nl > @ @ - 630 , 8 + 651 , 8 @ @ public class RouterActor extends ModuleActor { < nl > / / Tools < nl > / / < nl > < nl > - private void dialogsActor ( Object message ) { < nl > - context ( ) . getMessagesModule ( ) . getDialogsActor ( ) . send ( message ) ; < nl > + private DialogsInt getDialogsRouter ( ) { < nl > + return context ( ) . getMessagesModule ( ) . getDialogsInt ( ) ; < nl > } < nl > < nl > private ListEngine < Message > conversation ( Peer peer ) {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java < nl > index 3aafefb . . de1b281 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java < nl > @ @ - 27 , 7 + 27 , 7 @ @ import im . actor . core . entity . content . ServiceGroupUserLeave ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . messaging . actors . DialogsActor ; < nl > - import im . actor . core . modules . messaging . actors . GroupedDialogsActor ; < nl > + import im . actor . core . modules . messaging . actors . ActiveDialogsActor ; < nl > import im . actor . core . modules . messaging . actors . entity . EntityConverter ; < nl > import im . actor . runtime . annotations . Verified ; < nl > < nl > @ @ - 307 , 7 + 307 , 7 @ @ public class GroupsProcessor extends AbsModule { < nl > . send ( new DialogsActor . GroupChanged ( group ) ) ; < nl > if ( context ( ) . getConfiguration ( ) . isEnabledGroupedChatList ( ) ) { < nl > context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) . send ( < nl > - new GroupedDialogsActor . PeerInformationChanged ( Peer . group ( group . getGroupId ( ) ) ) ) ; < nl > + new ActiveDialogsActor . PeerInformationChanged ( Peer . group ( group . getGroupId ( ) ) ) ) ; < nl > } < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > index 2a9dde4 . . 22a12d5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java < nl > @ @ - 60 , 7 + 60 , 7 @ @ import im . actor . core . modules . messaging . actors . CursorReaderActor ; < nl > import im . actor . core . modules . messaging . actors . CursorReceiverActor ; < nl > import im . actor . core . modules . messaging . actors . DialogsActor ; < nl > import im . actor . core . modules . messaging . actors . DialogsHistoryActor ; < nl > - import im . actor . core . modules . messaging . actors . GroupedDialogsActor ; < nl > + import im . actor . core . modules . messaging . actors . ActiveDialogsActor ; < nl > import im . actor . core . modules . messaging . actors . MessageDeleteActor ; < nl > import im . actor . core . modules . messaging . actors . OwnReadActor ; < nl > import im . actor . core . modules . messaging . actors . SenderActor ; < nl > @ @ - 147 , 8 + 147 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { < nl > if ( context ( ) . getConfiguration ( ) . isEnabledGroupedChatList ( ) ) { < nl > this . dialogsGroupedActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > @ Override < nl > - public GroupedDialogsActor create ( ) { < nl > - return new GroupedDialogsActor ( context ( ) ) ; < nl > + public ActiveDialogsActor create ( ) { < nl > + return new ActiveDialogsActor ( context ( ) ) ; < nl > } < nl > } ) , " actor / dialogs / grouped " ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java < nl > index f0b6071 . . a8502f6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java < nl > @ @ - 33 , 7 + 33 , 7 @ @ import im . actor . core . modules . messaging . actors . ConversationHistoryActor ; < nl > import im . actor . core . modules . messaging . actors . CursorReceiverActor ; < nl > import im . actor . core . modules . messaging . actors . DialogsActor ; < nl > import im . actor . core . modules . messaging . actors . DialogsHistoryActor ; < nl > - import im . actor . core . modules . messaging . actors . GroupedDialogsActor ; < nl > + import im . actor . core . modules . messaging . actors . ActiveDialogsActor ; < nl > import im . actor . core . modules . messaging . actors . OwnReadActor ; < nl > import im . actor . core . modules . messaging . actors . SenderActor ; < nl > import im . actor . core . modules . messaging . actors . entity . DialogHistory ; < nl > @ @ - 359 , 19 + 359 , 10 @ @ public class MessagesProcessor extends AbsModule { < nl > context ( ) . getAppStateModule ( ) . onCountersChanged ( counters ) ; < nl > } < nl > < nl > - public void onChatArchived ( ApiPeer peer ) { < nl > - / / context ( ) . getMessagesModule ( ) . getDialogsActor ( ) < nl > - / / . send ( new DialogsActor . ChatDelete ( convert ( peer ) ) ) ; < nl > - } < nl > - < nl > - public void onChatRestored ( Peer peer ) { < nl > - < nl > - } < nl > - < nl > public void onChatGroupsChanged ( List < ApiDialogGroup > groups ) { < nl > if ( context ( ) . getConfiguration ( ) . isEnabledGroupedChatList ( ) ) { < nl > context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) < nl > - . send ( new GroupedDialogsActor . GroupedDialogsChanged ( groups ) ) ; < nl > + . send ( new ActiveDialogsActor . GroupedDialogsChanged ( groups ) ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ActiveDialogsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ActiveDialogsActor . java < nl > new file mode 100644 < nl > index 0000000 . . 51b5c75 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ActiveDialogsActor . java < nl > @ @ - 0 , 0 + 1 , 261 @ @ < nl > + package im . actor . core . modules . messaging . actors ; < nl > + < nl > + import java . io . IOException ; < nl > + import java . util . ArrayList ; < nl > + import java . util . List ; < nl > + < nl > + import im . actor . core . api . ApiDialogGroup ; < nl > + import im . actor . core . api . ApiDialogShort ; < nl > + import im . actor . core . api . ApiPeer ; < nl > + import im . actor . core . api . rpc . RequestLoadGroupedDialogs ; < nl > + import im . actor . core . api . rpc . ResponseLoadGroupedDialogs ; < nl > + import im . actor . core . entity . Avatar ; < nl > + import im . actor . core . entity . DialogSpec ; < nl > + import im . actor . core . entity . Group ; < nl > + import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerType ; < nl > + import im . actor . core . entity . User ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . modules . messaging . actors . entity . GroupedItem ; < nl > + import im . actor . core . modules . messaging . actors . entity . GroupedStorage ; < nl > + import im . actor . core . modules . ModuleActor ; < nl > + import im . actor . core . network . RpcCallback ; < nl > + import im . actor . core . network . RpcException ; < nl > + import im . actor . core . viewmodel . DialogGroup ; < nl > + import im . actor . core . viewmodel . DialogSmall ; < nl > + import im . actor . core . viewmodel . DialogSpecVM ; < nl > + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; < nl > + import im . actor . runtime . mvvm . MVVMCollection ; < nl > + < nl > + import static im . actor . core . modules . messaging . actors . entity . EntityConverter . convert ; < nl > + < nl > + public class ActiveDialogsActor extends ModuleActor { < nl > + < nl > + private static final String PREFERENCE _ GROUPED = " dialogs . grouped " ; < nl > + private static final String PREFERENCE _ GROUPED _ LOADED = " dialogs . grouped . loaded " ; < nl > + < nl > + private boolean isLoaded = false ; < nl > + private GroupedStorage storage ; < nl > + private MVVMCollection < DialogSpec , DialogSpecVM > specs ; < nl > + < nl > + public ActiveDialogsActor ( ModuleContext context ) { < nl > + super ( context ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + specs = context ( ) . getMessagesModule ( ) . getDialogDescKeyValue ( ) ; < nl > + storage = new GroupedStorage ( ) ; < nl > + < nl > + byte [ ] data = preferences ( ) . getBytes ( PREFERENCE _ GROUPED ) ; < nl > + if ( data ! = null ) { < nl > + try { < nl > + storage = new GroupedStorage ( data ) ; < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + } < nl > + < nl > + isLoaded = preferences ( ) . getBool ( PREFERENCE _ GROUPED _ LOADED , false ) ; < nl > + < nl > + if ( ! isLoaded ) { < nl > + request ( new RequestLoadGroupedDialogs ( ) , new RpcCallback < ResponseLoadGroupedDialogs > ( ) { < nl > + @ Override < nl > + public void onResult ( final ResponseLoadGroupedDialogs response ) { < nl > + updates ( ) . executeRelatedResponse ( response . getUsers ( ) , response . getGroups ( ) , < nl > + self ( ) , < nl > + new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + applyGroups ( response . getDialogs ( ) ) ; < nl > + isLoaded = true ; < nl > + preferences ( ) . putBool ( PREFERENCE _ GROUPED _ LOADED , true ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( RpcException e ) { < nl > + / / Ignore < nl > + } < nl > + } ) ; < nl > + } else { < nl > + notifyVM ( ) ; < nl > + } < nl > + } < nl > + < nl > + private void onCounterChanged ( Peer peer , int counter ) { < nl > + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; < nl > + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; < nl > + notifyVM ( peer ) ; < nl > + } < nl > + < nl > + private void onPeerInfoChanged ( Peer peer ) { < nl > + notifyVM ( peer ) ; < nl > + } < nl > + < nl > + private void onGroupedChanged ( List < ApiDialogGroup > groupedItems ) { < nl > + applyGroups ( groupedItems ) ; < nl > + } < nl > + < nl > + < nl > + private void onChatArchived ( ApiPeer peer ) { < nl > + < nl > + } < nl > + < nl > + < nl > + / / Tools < nl > + < nl > + private void notifyVM ( Peer peer ) { < nl > + boolean found = false ; < nl > + for ( GroupedItem i : storage . getGroups ( ) ) { < nl > + for ( Peer p : i . getPeers ( ) ) { < nl > + if ( p . equals ( peer ) ) { < nl > + found = true ; < nl > + break ; < nl > + } < nl > + } < nl > + } < nl > + < nl > + if ( found ) { < nl > + notifyVM ( ) ; < nl > + } < nl > + } < nl > + < nl > + private void notifyVM ( ) { < nl > + < nl > + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; < nl > + for ( GroupedItem i : storage . getGroups ( ) ) { < nl > + ArrayListDialogSmall dialogSmalls = new ArrayListDialogSmall ( ) ; < nl > + for ( Peer p : i . getPeers ( ) ) { < nl > + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; < nl > + String title ; < nl > + Avatar avatar ; < nl > + if ( p . getPeerType ( ) = = PeerType . GROUP ) { < nl > + Group group = getGroup ( p . getPeerId ( ) ) ; < nl > + title = group . getTitle ( ) ; < nl > + avatar = group . getAvatar ( ) ; < nl > + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + User user = getUser ( p . getPeerId ( ) ) ; < nl > + title = user . getName ( ) ; < nl > + avatar = user . getAvatar ( ) ; < nl > + } else { < nl > + continue ; < nl > + } < nl > + < nl > + dialogSmalls . add ( new DialogSmall ( p , title , avatar , spec . getCounter ( ) ) ) ; < nl > + } < nl > + groups . add ( new DialogGroup ( i . getTitle ( ) , i . getKey ( ) , dialogSmalls ) ) ; < nl > + } < nl > + context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; < nl > + } < nl > + < nl > + < nl > + private void applyGroups ( List < ApiDialogGroup > dialogGroups ) { < nl > + < nl > + / / Writing missing specs < nl > + < nl > + ArrayList < DialogSpec > updatedSpecs = new ArrayList < DialogSpec > ( ) ; < nl > + for ( ApiDialogGroup g : dialogGroups ) { < nl > + for ( ApiDialogShort s : g . getDialogs ( ) ) { < nl > + Peer peer = convert ( s . getPeer ( ) ) ; < nl > + if ( specs . getEngine ( ) . getValue ( peer . getUnuqueId ( ) ) = = null ) { < nl > + updatedSpecs . add ( new DialogSpec ( peer , false , s . getCounter ( ) ) ) ; < nl > + } < nl > + } < nl > + } < nl > + specs . getEngine ( ) . addOrUpdateItems ( updatedSpecs ) ; < nl > + < nl > + / / Updating storage < nl > + < nl > + storage . getGroups ( ) . clear ( ) ; < nl > + for ( ApiDialogGroup g : dialogGroups ) { < nl > + ArrayList < Peer > peers = new ArrayList < Peer > ( ) ; < nl > + for ( ApiDialogShort s : g . getDialogs ( ) ) { < nl > + Peer peer = convert ( s . getPeer ( ) ) ; < nl > + peers . add ( peer ) ; < nl > + } < nl > + storage . getGroups ( ) . add ( new GroupedItem ( g . getKey ( ) , g . getTitle ( ) , peers ) ) ; < nl > + } < nl > + preferences ( ) . putBytes ( PREFERENCE _ GROUPED , storage . toByteArray ( ) ) ; < nl > + < nl > + / / Updating VM < nl > + < nl > + notifyVM ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof PeerInformationChanged ) { < nl > + PeerInformationChanged informationChanged = ( PeerInformationChanged ) message ; < nl > + onPeerInfoChanged ( informationChanged . getPeer ( ) ) ; < nl > + } else if ( message instanceof CounterChanged ) { < nl > + CounterChanged counterChanged = ( CounterChanged ) message ; < nl > + onCounterChanged ( counterChanged . getPeer ( ) , counterChanged . getCounter ( ) ) ; < nl > + } else if ( message instanceof GroupedDialogsChanged ) { < nl > + GroupedDialogsChanged g = ( GroupedDialogsChanged ) message ; < nl > + onGroupedChanged ( g . getItems ( ) ) ; < nl > + } else if ( message instanceof ChatArchived ) { < nl > + onChatArchived ( ( ( ChatArchived ) message ) . getPeer ( ) ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > + public static class GroupedDialogsChanged { < nl > + < nl > + private List < ApiDialogGroup > items ; < nl > + < nl > + public GroupedDialogsChanged ( List < ApiDialogGroup > items ) { < nl > + this . items = items ; < nl > + } < nl > + < nl > + public List < ApiDialogGroup > getItems ( ) { < nl > + return items ; < nl > + } < nl > + } < nl > + < nl > + public static class PeerInformationChanged { < nl > + < nl > + private Peer peer ; < nl > + < nl > + public PeerInformationChanged ( Peer peer ) { < nl > + this . peer = peer ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + } < nl > + < nl > + public static class CounterChanged { < nl > + private Peer peer ; < nl > + private int counter ; < nl > + < nl > + public CounterChanged ( Peer peer , int counter ) { < nl > + this . peer = peer ; < nl > + this . counter = counter ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public int getCounter ( ) { < nl > + return counter ; < nl > + } < nl > + } < nl > + < nl > + public static class ChatArchived { < nl > + ApiPeer peer ; < nl > + public ChatArchived ( ApiPeer peer ) { < nl > + this . peer = peer ; < nl > + } < nl > + < nl > + public ApiPeer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java < nl > index 2fa4307 . . eaedae5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java < nl > @ @ - 202 , 7 + 202 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , topMessage , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > if ( dialogsGroupedActor ! = null ) { < nl > - dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > + dialogsGroupedActor . send ( new ActiveDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > } < nl > } < nl > @ @ - 264 , 7 + 264 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , message , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > if ( dialogsGroupedActor ! = null ) { < nl > - dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > + dialogsGroupedActor . send ( new ActiveDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > } < nl > } < nl > @ @ - 342 , 7 + 342 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > / / Updating dialog < nl > dialogsActor . send ( new DialogsActor . InMessage ( peer , updatedMsg , inPendingIndex . getCount ( ) ) ) ; < nl > if ( dialogsGroupedActor ! = null ) { < nl > - dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > + dialogsGroupedActor . send ( new ActiveDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > } < nl > < nl > @ @ - 369 , 7 + 369 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > } < nl > < nl > if ( dialogsGroupedActor ! = null ) { < nl > - dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > + dialogsGroupedActor . send ( new ActiveDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > } < nl > } < nl > @ @ - 449 , 7 + 449 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > dialogsActor . send ( new DialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > if ( dialogsGroupedActor ! = null ) { < nl > - dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > + dialogsGroupedActor . send ( new ActiveDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; < nl > } < nl > } < nl > < nl > @ @ - 467 , 7 + 467 , 7 @ @ public class ConversationActor extends ModuleActor { < nl > dialogsActor . send ( new DialogsActor . CounterChanged ( peer , 0 ) ) ; < nl > } < nl > if ( dialogsGroupedActor ! = null ) { < nl > - dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , 0 ) ) ; < nl > + dialogsGroupedActor . send ( new ActiveDialogsActor . CounterChanged ( peer , 0 ) ) ; < nl > } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / GroupedDialogsActor . java < nl > deleted file mode 100644 < nl > index 157cd43 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / GroupedDialogsActor . java < nl > + + + / dev / null < nl > @ @ - 1 , 261 + 0 , 0 @ @ < nl > - package im . actor . core . modules . messaging . actors ; < nl > - < nl > - import java . io . IOException ; < nl > - import java . util . ArrayList ; < nl > - import java . util . List ; < nl > - < nl > - import im . actor . core . api . ApiDialogGroup ; < nl > - import im . actor . core . api . ApiDialogShort ; < nl > - import im . actor . core . api . ApiPeer ; < nl > - import im . actor . core . api . rpc . RequestLoadGroupedDialogs ; < nl > - import im . actor . core . api . rpc . ResponseLoadGroupedDialogs ; < nl > - import im . actor . core . entity . Avatar ; < nl > - import im . actor . core . entity . DialogSpec ; < nl > - import im . actor . core . entity . Group ; < nl > - import im . actor . core . entity . Peer ; < nl > - import im . actor . core . entity . PeerType ; < nl > - import im . actor . core . entity . User ; < nl > - import im . actor . core . modules . ModuleContext ; < nl > - import im . actor . core . modules . messaging . actors . entity . GroupedItem ; < nl > - import im . actor . core . modules . messaging . actors . entity . GroupedStorage ; < nl > - import im . actor . core . modules . ModuleActor ; < nl > - import im . actor . core . network . RpcCallback ; < nl > - import im . actor . core . network . RpcException ; < nl > - import im . actor . core . viewmodel . DialogGroup ; < nl > - import im . actor . core . viewmodel . DialogSmall ; < nl > - import im . actor . core . viewmodel . DialogSpecVM ; < nl > - import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; < nl > - import im . actor . runtime . mvvm . MVVMCollection ; < nl > - < nl > - import static im . actor . core . modules . messaging . actors . entity . EntityConverter . convert ; < nl > - < nl > - public class GroupedDialogsActor extends ModuleActor { < nl > - < nl > - private static final String PREFERENCE _ GROUPED = " dialogs . grouped " ; < nl > - private static final String PREFERENCE _ GROUPED _ LOADED = " dialogs . grouped . loaded " ; < nl > - < nl > - private boolean isLoaded = false ; < nl > - private GroupedStorage storage ; < nl > - private MVVMCollection < DialogSpec , DialogSpecVM > specs ; < nl > - < nl > - public GroupedDialogsActor ( ModuleContext context ) { < nl > - super ( context ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void preStart ( ) { < nl > - super . preStart ( ) ; < nl > - specs = context ( ) . getMessagesModule ( ) . getDialogDescKeyValue ( ) ; < nl > - storage = new GroupedStorage ( ) ; < nl > - < nl > - byte [ ] data = preferences ( ) . getBytes ( PREFERENCE _ GROUPED ) ; < nl > - if ( data ! = null ) { < nl > - try { < nl > - storage = new GroupedStorage ( data ) ; < nl > - } catch ( IOException e ) { < nl > - e . printStackTrace ( ) ; < nl > - } < nl > - } < nl > - < nl > - isLoaded = preferences ( ) . getBool ( PREFERENCE _ GROUPED _ LOADED , false ) ; < nl > - < nl > - if ( ! isLoaded ) { < nl > - request ( new RequestLoadGroupedDialogs ( ) , new RpcCallback < ResponseLoadGroupedDialogs > ( ) { < nl > - @ Override < nl > - public void onResult ( final ResponseLoadGroupedDialogs response ) { < nl > - updates ( ) . executeRelatedResponse ( response . getUsers ( ) , response . getGroups ( ) , < nl > - self ( ) , < nl > - new Runnable ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - applyGroups ( response . getDialogs ( ) ) ; < nl > - isLoaded = true ; < nl > - preferences ( ) . putBool ( PREFERENCE _ GROUPED _ LOADED , true ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( RpcException e ) { < nl > - / / Ignore < nl > - } < nl > - } ) ; < nl > - } else { < nl > - notifyVM ( ) ; < nl > - } < nl > - } < nl > - < nl > - private void onCounterChanged ( Peer peer , int counter ) { < nl > - DialogSpec spec = new DialogSpec ( peer , false , counter ) ; < nl > - specs . getEngine ( ) . addOrUpdateItem ( spec ) ; < nl > - notifyVM ( peer ) ; < nl > - } < nl > - < nl > - private void onPeerInfoChanged ( Peer peer ) { < nl > - notifyVM ( peer ) ; < nl > - } < nl > - < nl > - private void onGroupedChanged ( List < ApiDialogGroup > groupedItems ) { < nl > - applyGroups ( groupedItems ) ; < nl > - } < nl > - < nl > - < nl > - private void onChatArchived ( ApiPeer peer ) { < nl > - < nl > - } < nl > - < nl > - < nl > - / / Tools < nl > - < nl > - private void notifyVM ( Peer peer ) { < nl > - boolean found = false ; < nl > - for ( GroupedItem i : storage . getGroups ( ) ) { < nl > - for ( Peer p : i . getPeers ( ) ) { < nl > - if ( p . equals ( peer ) ) { < nl > - found = true ; < nl > - break ; < nl > - } < nl > - } < nl > - } < nl > - < nl > - if ( found ) { < nl > - notifyVM ( ) ; < nl > - } < nl > - } < nl > - < nl > - private void notifyVM ( ) { < nl > - < nl > - ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; < nl > - for ( GroupedItem i : storage . getGroups ( ) ) { < nl > - ArrayListDialogSmall dialogSmalls = new ArrayListDialogSmall ( ) ; < nl > - for ( Peer p : i . getPeers ( ) ) { < nl > - DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; < nl > - String title ; < nl > - Avatar avatar ; < nl > - if ( p . getPeerType ( ) = = PeerType . GROUP ) { < nl > - Group group = getGroup ( p . getPeerId ( ) ) ; < nl > - title = group . getTitle ( ) ; < nl > - avatar = group . getAvatar ( ) ; < nl > - } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > - User user = getUser ( p . getPeerId ( ) ) ; < nl > - title = user . getName ( ) ; < nl > - avatar = user . getAvatar ( ) ; < nl > - } else { < nl > - continue ; < nl > - } < nl > - < nl > - dialogSmalls . add ( new DialogSmall ( p , title , avatar , spec . getCounter ( ) ) ) ; < nl > - } < nl > - groups . add ( new DialogGroup ( i . getTitle ( ) , i . getKey ( ) , dialogSmalls ) ) ; < nl > - } < nl > - context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; < nl > - } < nl > - < nl > - < nl > - private void applyGroups ( List < ApiDialogGroup > dialogGroups ) { < nl > - < nl > - / / Writing missing specs < nl > - < nl > - ArrayList < DialogSpec > updatedSpecs = new ArrayList < DialogSpec > ( ) ; < nl > - for ( ApiDialogGroup g : dialogGroups ) { < nl > - for ( ApiDialogShort s : g . getDialogs ( ) ) { < nl > - Peer peer = convert ( s . getPeer ( ) ) ; < nl > - if ( specs . getEngine ( ) . getValue ( peer . getUnuqueId ( ) ) = = null ) { < nl > - updatedSpecs . add ( new DialogSpec ( peer , false , s . getCounter ( ) ) ) ; < nl > - } < nl > - } < nl > - } < nl > - specs . getEngine ( ) . addOrUpdateItems ( updatedSpecs ) ; < nl > - < nl > - / / Updating storage < nl > - < nl > - storage . getGroups ( ) . clear ( ) ; < nl > - for ( ApiDialogGroup g : dialogGroups ) { < nl > - ArrayList < Peer > peers = new ArrayList < Peer > ( ) ; < nl > - for ( ApiDialogShort s : g . getDialogs ( ) ) { < nl > - Peer peer = convert ( s . getPeer ( ) ) ; < nl > - peers . add ( peer ) ; < nl > - } < nl > - storage . getGroups ( ) . add ( new GroupedItem ( g . getKey ( ) , g . getTitle ( ) , peers ) ) ; < nl > - } < nl > - preferences ( ) . putBytes ( PREFERENCE _ GROUPED , storage . toByteArray ( ) ) ; < nl > - < nl > - / / Updating VM < nl > - < nl > - notifyVM ( ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onReceive ( Object message ) { < nl > - if ( message instanceof PeerInformationChanged ) { < nl > - PeerInformationChanged informationChanged = ( PeerInformationChanged ) message ; < nl > - onPeerInfoChanged ( informationChanged . getPeer ( ) ) ; < nl > - } else if ( message instanceof CounterChanged ) { < nl > - CounterChanged counterChanged = ( CounterChanged ) message ; < nl > - onCounterChanged ( counterChanged . getPeer ( ) , counterChanged . getCounter ( ) ) ; < nl > - } else if ( message instanceof GroupedDialogsChanged ) { < nl > - GroupedDialogsChanged g = ( GroupedDialogsChanged ) message ; < nl > - onGroupedChanged ( g . getItems ( ) ) ; < nl > - } else if ( message instanceof ChatArchived ) { < nl > - onChatArchived ( ( ( ChatArchived ) message ) . getPeer ( ) ) ; < nl > - } else { < nl > - super . onReceive ( message ) ; < nl > - } < nl > - } < nl > - < nl > - public static class GroupedDialogsChanged { < nl > - < nl > - private List < ApiDialogGroup > items ; < nl > - < nl > - public GroupedDialogsChanged ( List < ApiDialogGroup > items ) { < nl > - this . items = items ; < nl > - } < nl > - < nl > - public List < ApiDialogGroup > getItems ( ) { < nl > - return items ; < nl > - } < nl > - } < nl > - < nl > - public static class PeerInformationChanged { < nl > - < nl > - private Peer peer ; < nl > - < nl > - public PeerInformationChanged ( Peer peer ) { < nl > - this . peer = peer ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - } < nl > - < nl > - public static class CounterChanged { < nl > - private Peer peer ; < nl > - private int counter ; < nl > - < nl > - public CounterChanged ( Peer peer , int counter ) { < nl > - this . peer = peer ; < nl > - this . counter = counter ; < nl > - } < nl > - < nl > - public Peer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - < nl > - public int getCounter ( ) { < nl > - return counter ; < nl > - } < nl > - } < nl > - < nl > - public static class ChatArchived { < nl > - ApiPeer peer ; < nl > - public ChatArchived ( ApiPeer peer ) { < nl > - this . peer = peer ; < nl > - } < nl > - < nl > - public ApiPeer getPeer ( ) { < nl > - return peer ; < nl > - } < nl > - } < nl > - } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java < nl > index 8ebb832 . . 908406c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java < nl > @ @ - 343 , 8 + 343 , 6 @ @ public class UpdateProcessor extends AbsModule { < nl > messagesProcessor . onCountersChanged ( ( ( UpdateCountersChanged ) update ) . getCounters ( ) ) ; < nl > } else if ( update instanceof UpdateChatGroupsChanged ) { < nl > messagesProcessor . onChatGroupsChanged ( ( ( UpdateChatGroupsChanged ) update ) . getDialogs ( ) ) ; < nl > - } else if ( update instanceof UpdateChatArchive ) { < nl > - messagesProcessor . onChatArchived ( ( ( UpdateChatArchive ) update ) . getPeer ( ) ) ; < nl > } else if ( update instanceof UpdateReactionsUpdate ) { < nl > messagesProcessor . onReactionsChanged ( ( ( UpdateReactionsUpdate ) update ) . getPeer ( ) , < nl > ( ( UpdateReactionsUpdate ) update ) . getRid ( ) , ( ( UpdateReactionsUpdate ) update ) . getReactions ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java < nl > index 0245be1 . . 0a4edd6 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java < nl > @ @ - 17 , 7 + 17 , 7 @ @ import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . sequence . Processor ; < nl > import im . actor . core . modules . contacts . ContactsSyncActor ; < nl > import im . actor . core . modules . messaging . actors . DialogsActor ; < nl > - import im . actor . core . modules . messaging . actors . GroupedDialogsActor ; < nl > + import im . actor . core . modules . messaging . actors . ActiveDialogsActor ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . annotations . Verified ; < nl > < nl > @ @ - 205 , 7 + 205 , 7 @ @ public class UsersProcessor extends AbsModule implements Processor { < nl > new DialogsActor . UserChanged ( u ) ) ; < nl > if ( context ( ) . getConfiguration ( ) . isEnabledGroupedChatList ( ) ) { < nl > context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) . send ( < nl > - new GroupedDialogsActor . PeerInformationChanged ( Peer . user ( u . getUid ( ) ) ) ) ; < nl > + new ActiveDialogsActor . PeerInformationChanged ( Peer . user ( u . getUid ( ) ) ) ) ; < nl > } < nl > context ( ) . getContactsModule ( ) . getContactSyncActor ( ) < nl > . send ( new ContactsSyncActor . UserChanged ( u ) ) ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 index e0be385 . . 0a85356 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 @ @ - 51 , 6 + 51 , 7 @ @ import im . actor . core . events . PeerChatOpened ; 
 import im . actor . core . events . PeerChatPreload ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . messaging . dialogs . DialogsInt ; 
 import im . actor . core . modules . messaging . history . ArchivedDialogsActor ; 
 import im . actor . core . modules . messaging . actions . CursorReaderActor ; 
 import im . actor . core . modules . messaging . actions . CursorReceiverActor ; 
 @ @ - 96 , 7 + 97 , 7 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 private ListEngine < Dialog > dialogs ; 
 
 - private ActorRef dialogsActor ; 
 + private DialogsInt dialogsInt ; 
 private ActorRef dialogsHistoryActor ; 
 private ActorRef archivedDialogsActor ; 
 private ActorRef plainReadActor ; 
 @ @ - 129 , 7 + 130 , 7 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 
 this . router = new RouterInt ( context ( ) ) ; 
 
 - this . dialogsActor = system ( ) . actorOf ( " actor / dialogs " , ( ) - > new DialogsActor ( context ( ) ) ) ; 
 + this . dialogsInt = new DialogsInt ( context ( ) ) ; 
 this . dialogsHistoryActor = system ( ) . actorOf ( " actor / dialogs / history " , ( ) - > new DialogsHistoryActor ( context ( ) ) ) ; 
 this . archivedDialogsActor = system ( ) . actorOf ( " actor / dialogs / archived " , ( ) - > new ArchivedDialogsActor ( context ( ) ) ) ; 
 
 @ @ - 205 , 8 + 206 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 return conversationStates . get ( peer . getUnuqueId ( ) ) ; 
 } 
 
 - public ActorRef getDialogsActor ( ) { 
 - return dialogsActor ; 
 + public DialogsInt getDialogsInt ( ) { 
 + return dialogsInt ; 
 } 
 
 public ListEngine < Dialog > getDialogsEngine ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / DialogsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / DialogsActor . java 
 index d7cdf4d . . bde055b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / DialogsActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / DialogsActor . java 
 @ @ - 18 , 11 + 18 , 24 @ @ import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . User ; 
 import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . messaging . dialogs . entity . ChatClear ; 
 + import im . actor . core . modules . messaging . dialogs . entity . ChatDelete ; 
 + import im . actor . core . modules . messaging . dialogs . entity . CounterChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . GroupChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . HistoryLoaded ; 
 + import im . actor . core . modules . messaging . dialogs . entity . InMessage ; 
 + import im . actor . core . modules . messaging . dialogs . entity . MessageContentChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . MessageDeleted ; 
 + import im . actor . core . modules . messaging . dialogs . entity . PeerReadChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . PeerReceiveChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . UserChanged ; 
 import im . actor . core . modules . messaging . history . entity . DialogHistory ; 
 import im . actor . core . modules . ModuleActor ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . Runtime ; 
 + import im . actor . runtime . actors . messages . Void ; 
 import im . actor . runtime . annotations . Verified ; 
 + import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . storage . ListEngine ; 
 
 import static im . actor . core . util . JavaUtil . equalsE ; 
 @ @ - 45 , 19 + 58 , 19 @ @ public class DialogsActor extends ModuleActor { 
 } 
 
 @ Verified 
 - private void onMessage ( Peer peer , Message message , boolean forceWrite , int counter ) { 
 + private Promise < Void > onMessage ( Peer peer , Message message , boolean forceWrite , int counter ) { 
 long start = im . actor . runtime . Runtime . getCurrentTime ( ) ; 
 PeerDesc peerDesc = buildPeerDesc ( peer ) ; 
 if ( peerDesc = = null ) { 
 Log . d ( " DialogsActor " , " unknown peer desc " ) ; 
 - return ; 
 + return Promise . success ( null ) ; 
 } 
 
 if ( message = = null ) { 
 / / Ignore empty message if not forcing write 
 if ( ! forceWrite ) { 
 Log . d ( " DialogsActor " , " not force " ) ; 
 - return ; 
 + return Promise . success ( null ) ; 
 } 
 
 / / Else perform chat clear 
 @ @ - 85 , 7 + 98 , 7 @ @ public class DialogsActor extends ModuleActor { 
 / / Ignore old messages if no force 
 if ( ! forceWrite & & dialog . getSortDate ( ) > message . getSortDate ( ) ) { 
 Log . d ( " DialogsActor " , " too old " ) ; 
 - return ; 
 + return Promise . success ( null ) ; 
 } 
 
 builder . setPeer ( dialog . getPeer ( ) ) 
 @ @ - 104 , 7 + 117 , 7 @ @ public class DialogsActor extends ModuleActor { 
 / / Do not create dialogs for silent messages 
 if ( contentDescription . isSilent ( ) ) { 
 Log . d ( " DialogsActor " , " is silent in " ) ; 
 - return ; 
 + return Promise . success ( null ) ; 
 } 
 
 builder . setPeer ( peer ) 
 @ @ - 119 , 17 + 132 , 17 @ @ public class DialogsActor extends ModuleActor { 
 notifyState ( forceUpdate ) ; 
 } 
 
 - Log . d ( " DialogsActor " , " onMessage in " + ( Runtime . getCurrentTime ( ) - start ) + " ms " ) ; 
 + return Promise . success ( null ) ; 
 } 
 
 @ Verified 
 - private void onUserChanged ( User user ) { 
 + private Promise < Void > onUserChanged ( User user ) { 
 Dialog dialog = dialogs . getValue ( user . peer ( ) . getUnuqueId ( ) ) ; 
 if ( dialog ! = null ) { 
 / / Ignore if nothing changed 
 if ( dialog . getDialogTitle ( ) . equals ( user . getName ( ) ) 
 & & equalsE ( dialog . getDialogAvatar ( ) , user . getAvatar ( ) ) ) { 
 - return ; 
 + return Promise . success ( null ) ; 
 } 
 
 / / Update dialog peer info 
 @ @ - 137 , 16 + 150 , 18 @ @ public class DialogsActor extends ModuleActor { 
 addOrUpdateItem ( updated ) ; 
 updateSearch ( updated ) ; 
 } 
 + 
 + return Promise . success ( null ) ; 
 } 
 
 @ Verified 
 - private void onGroupChanged ( Group group ) { 
 + private Promise < Void > onGroupChanged ( Group group ) { 
 Dialog dialog = dialogs . getValue ( group . peer ( ) . getUnuqueId ( ) ) ; 
 if ( dialog ! = null ) { 
 / / Ignore if nothing changed 
 if ( dialog . getDialogTitle ( ) . equals ( group . getTitle ( ) ) 
 & & equalsE ( dialog . getDialogAvatar ( ) , group . getAvatar ( ) ) ) { 
 - return ; 
 + return Promise . success ( null ) ; 
 } 
 
 / / Update dialog peer info 
 @ @ - 154 , 18 + 169 , 21 @ @ public class DialogsActor extends ModuleActor { 
 addOrUpdateItem ( updated ) ; 
 updateSearch ( updated ) ; 
 } 
 + return Promise . success ( null ) ; 
 } 
 
 @ Verified 
 - private void onChatDeleted ( Peer peer ) { 
 - / / Removing dialog 
 + private Promise < Void > onChatDeleted ( Peer peer ) { 
 + 
 dialogs . removeItem ( peer . getUnuqueId ( ) ) ; 
 
 notifyState ( true ) ; 
 + 
 + return Promise . success ( null ) ; 
 } 
 
 @ Verified 
 - private void onChatClear ( Peer peer ) { 
 + private Promise < Void > onChatClear ( Peer peer ) { 
 Dialog dialog = dialogs . getValue ( peer . getUnuqueId ( ) ) ; 
 
 / / If we have dialog for this peer 
 @ @ - 181 , 10 + 199 , 12 @ @ public class DialogsActor extends ModuleActor { 
 . setSenderId ( 0 ) 
 . createDialog ( ) ) ; 
 } 
 + 
 + return Promise . success ( null ) ; 
 } 
 
 @ Verified 
 - private void onPeerRead ( Peer peer , long date ) { 
 + private Promise < Void > onPeerRead ( Peer peer , long date ) { 
 Dialog dialog = dialogs . getValue ( peer . getUnuqueId ( ) ) ; 
 if ( dialog ! = null ) { 
 addOrUpdateItem ( new DialogBuilder ( dialog ) 
 @ @ - 192 , 56 + 212 , 55 @ @ public class DialogsActor extends ModuleActor { 
 . updateKnownReceiveDate ( date ) 
 . createDialog ( ) ) ; 
 } 
 + return Promise . success ( null ) ; 
 } 
 
 @ Verified 
 - private void onPeerReceive ( Peer peer , long date ) { 
 + private Promise < Void > onPeerReceive ( Peer peer , long date ) { 
 Dialog dialog = dialogs . getValue ( peer . getUnuqueId ( ) ) ; 
 if ( dialog ! = null ) { 
 addOrUpdateItem ( new DialogBuilder ( dialog ) 
 . updateKnownReceiveDate ( date ) 
 . createDialog ( ) ) ; 
 } 
 + return Promise . success ( null ) ; 
 } 
 
 @ Verified 
 - private void onMessageContentChanged ( Peer peer , long rid , AbsContent content ) { 
 + private Promise < Void > onMessageContentChanged ( Peer peer , long rid , AbsContent content ) { 
 Dialog dialog = dialogs . getValue ( peer . getUnuqueId ( ) ) ; 
 
 / / If message is on top 
 if ( dialog ! = null & & dialog . getRid ( ) = = rid ) { 
 
 - / / Update dialog 
 ContentDescription description = ContentDescription . fromContent ( content ) ; 
 + 
 addOrUpdateItem ( new DialogBuilder ( dialog ) 
 . setText ( description . getText ( ) ) 
 . setRelatedUid ( description . getRelatedUser ( ) ) 
 . setMessageType ( description . getContentType ( ) ) 
 . createDialog ( ) ) ; 
 } 
 + 
 + return Promise . success ( null ) ; 
 } 
 
 @ Verified 
 - private void onCounterChanged ( Peer peer , int count ) { 
 + private Promise < Void > onCounterChanged ( Peer peer , int count ) { 
 Dialog dialog = dialogs . getValue ( peer . getUnuqueId ( ) ) ; 
 
 - / / If we have dialog for this peer 
 - if ( dialog ! = null ) { 
 - 
 - / / Counter not actually changed 
 - if ( dialog . getUnreadCount ( ) = = count ) { 
 - return ; 
 - } 
 - 
 - / / Update dialog 
 + / / If we have dialog for this peer and counter changed 
 + if ( dialog ! = null & & dialog . getUnreadCount ( ) ! = count ) { 
 addOrUpdateItem ( new DialogBuilder ( dialog ) 
 . setUnreadCount ( count ) 
 . createDialog ( ) ) ; 
 } 
 + 
 + return Promise . success ( null ) ; 
 } 
 
 @ Verified 
 - private void onHistoryLoaded ( List < DialogHistory > history ) { 
 + private Promise < Void > onHistoryLoaded ( List < DialogHistory > history ) { 
 ArrayList < Dialog > updated = new ArrayList < Dialog > ( ) ; 
 for ( DialogHistory dialogHistory : history ) { 
 / / Ignore already available dialogs 
 @ @ - 284 , 6 + 303 , 7 @ @ public class DialogsActor extends ModuleActor { 
 updateSearch ( updated ) ; 
 context ( ) . getAppStateModule ( ) . onDialogsLoaded ( ) ; 
 notifyState ( true ) ; 
 + return Promise . success ( null ) ; 
 } 
 
 / / Utils 
 @ @ - 391 , 185 + 411 , 42 @ @ public class DialogsActor extends ModuleActor { 
 } 
 } 
 
 - public static class InMessage { 
 - private Peer peer ; 
 - private Message message ; 
 - private int counter ; 
 - 
 - public InMessage ( Peer peer , Message message , int counter ) { 
 - this . peer = peer ; 
 - this . message = message ; 
 - this . counter = counter ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public Message getMessage ( ) { 
 - return message ; 
 - } 
 - 
 - public int getCounter ( ) { 
 - return counter ; 
 - } 
 - } 
 - 
 - public static class CounterChanged { 
 - private Peer peer ; 
 - private int counter ; 
 - 
 - public CounterChanged ( Peer peer , int counter ) { 
 - this . peer = peer ; 
 - this . counter = counter ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public int getCounter ( ) { 
 - return counter ; 
 - } 
 - } 
 - 
 - public static class UserChanged { 
 - private User user ; 
 - 
 - public UserChanged ( User user ) { 
 - this . user = user ; 
 - } 
 - 
 - public User getUser ( ) { 
 - return user ; 
 - } 
 - } 
 - 
 - public static class GroupChanged { 
 - private Group group ; 
 - 
 - public GroupChanged ( Group group ) { 
 - this . group = group ; 
 - } 
 - 
 - public Group getGroup ( ) { 
 - return group ; 
 - } 
 - } 
 - 
 - public static class ChatClear { 
 - private Peer peer ; 
 - 
 - public ChatClear ( Peer peer ) { 
 - this . peer = peer ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - } 
 - 
 - public static class ChatDelete { 
 - private Peer peer ; 
 - 
 - public ChatDelete ( Peer peer ) { 
 - this . peer = peer ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - } 
 - 
 - public static class PeerReadChanged { 
 - 
 - private Peer peer ; 
 - private long date ; 
 - 
 - public PeerReadChanged ( Peer peer , long date ) { 
 - this . peer = peer ; 
 - this . date = date ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public long getDate ( ) { 
 - return date ; 
 - } 
 - } 
 - 
 - public static class PeerReceiveChanged { 
 - 
 - private Peer peer ; 
 - private long date ; 
 - 
 - public PeerReceiveChanged ( Peer peer , long date ) { 
 - this . peer = peer ; 
 - this . date = date ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public long getDate ( ) { 
 - return date ; 
 - } 
 - } 
 - 
 - public static class MessageContentChanged { 
 - private Peer peer ; 
 - private long rid ; 
 - private AbsContent content ; 
 - 
 - public MessageContentChanged ( Peer peer , long rid , AbsContent content ) { 
 - this . peer = peer ; 
 - this . rid = rid ; 
 - this . content = content ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public long getRid ( ) { 
 - return rid ; 
 - } 
 - 
 - public AbsContent getContent ( ) { 
 - return content ; 
 - } 
 - } 
 - 
 - public static class MessageDeleted { 
 - private Peer peer ; 
 - private Message topMessage ; 
 - 
 - public MessageDeleted ( Peer peer , Message topMessage ) { 
 - this . peer = peer ; 
 - this . topMessage = topMessage ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public Message getTopMessage ( ) { 
 - return topMessage ; 
 - } 
 - } 
 - 
 - public static class HistoryLoaded { 
 - private List < DialogHistory > history ; 
 - 
 - public HistoryLoaded ( List < DialogHistory > history ) { 
 - this . history = history ; 
 - } 
 - 
 - public List < DialogHistory > getHistory ( ) { 
 - return history ; 
 + @ Override 
 + public Promise onAsk ( Object message ) throws Exception { 
 + if ( message instanceof InMessage ) { 
 + InMessage inMessage = ( InMessage ) message ; 
 + return onMessage ( inMessage . getPeer ( ) , inMessage . getMessage ( ) , false , inMessage . getCounter ( ) ) ; 
 + } else if ( message instanceof UserChanged ) { 
 + UserChanged userChanged = ( UserChanged ) message ; 
 + return onUserChanged ( userChanged . getUser ( ) ) ; 
 + } else if ( message instanceof ChatClear ) { 
 + return onChatClear ( ( ( ChatClear ) message ) . getPeer ( ) ) ; 
 + } else if ( message instanceof ChatDelete ) { 
 + return onChatDeleted ( ( ( ChatDelete ) message ) . getPeer ( ) ) ; 
 + } else if ( message instanceof PeerReadChanged ) { 
 + PeerReadChanged peerReadChanged = ( PeerReadChanged ) message ; 
 + return onPeerRead ( peerReadChanged . getPeer ( ) , peerReadChanged . getDate ( ) ) ; 
 + } else if ( message instanceof PeerReceiveChanged ) { 
 + PeerReceiveChanged peerReceiveChanged = ( PeerReceiveChanged ) message ; 
 + return onPeerReceive ( peerReceiveChanged . getPeer ( ) , peerReceiveChanged . getDate ( ) ) ; 
 + } else if ( message instanceof MessageDeleted ) { 
 + MessageDeleted deleted = ( MessageDeleted ) message ; 
 + return onMessage ( deleted . getPeer ( ) , deleted . getTopMessage ( ) , true , - 1 ) ; 
 + } else if ( message instanceof HistoryLoaded ) { 
 + HistoryLoaded historyLoaded = ( HistoryLoaded ) message ; 
 + return onHistoryLoaded ( historyLoaded . getHistory ( ) ) ; 
 + } else if ( message instanceof GroupChanged ) { 
 + GroupChanged groupChanged = ( GroupChanged ) message ; 
 + return onGroupChanged ( groupChanged . getGroup ( ) ) ; 
 + } else if ( message instanceof MessageContentChanged ) { 
 + MessageContentChanged contentChanged = ( MessageContentChanged ) message ; 
 + return onMessageContentChanged ( contentChanged . getPeer ( ) , contentChanged . getRid ( ) , 
 + contentChanged . getContent ( ) ) ; 
 + } else if ( message instanceof CounterChanged ) { 
 + CounterChanged counterChanged = ( CounterChanged ) message ; 
 + return onCounterChanged ( counterChanged . getPeer ( ) , counterChanged . getCounter ( ) ) ; 
 + } else { 
 + return super . onAsk ( message ) ; 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / DialogsInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / DialogsInt . java 
 new file mode 100644 
 index 0000000 . . 19da073 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / DialogsInt . java 
 @ @ - 0 , 0 + 1 , 78 @ @ 
 + package im . actor . core . modules . messaging . dialogs ; 
 + 
 + import java . util . List ; 
 + 
 + import im . actor . core . entity . Group ; 
 + import im . actor . core . entity . Message ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . User ; 
 + import im . actor . core . entity . content . AbsContent ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . messaging . dialogs . entity . ChatClear ; 
 + import im . actor . core . modules . messaging . dialogs . entity . ChatDelete ; 
 + import im . actor . core . modules . messaging . dialogs . entity . CounterChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . GroupChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . HistoryLoaded ; 
 + import im . actor . core . modules . messaging . dialogs . entity . InMessage ; 
 + import im . actor . core . modules . messaging . dialogs . entity . MessageContentChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . MessageDeleted ; 
 + import im . actor . core . modules . messaging . dialogs . entity . PeerReadChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . PeerReceiveChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . UserChanged ; 
 + import im . actor . core . modules . messaging . history . entity . DialogHistory ; 
 + import im . actor . runtime . actors . ActorInterface ; 
 + import im . actor . runtime . actors . messages . Void ; 
 + import im . actor . runtime . promise . Promise ; 
 + 
 + import static im . actor . runtime . actors . ActorSystem . system ; 
 + 
 + public class DialogsInt extends ActorInterface { 
 + 
 + public DialogsInt ( ModuleContext context ) { 
 + setDest ( system ( ) . actorOf ( " actor / dialogs " , ( ) - > new DialogsActor ( context ) ) ) ; 
 + } 
 + 
 + public Promise < Void > onChatClear ( Peer peer ) { 
 + return ask ( new ChatClear ( peer ) ) ; 
 + } 
 + 
 + public Promise < Void > onChatDelete ( Peer peer ) { 
 + return ask ( new ChatDelete ( peer ) ) ; 
 + } 
 + 
 + public Promise < Void > onCounterChanged ( Peer peer , int counter ) { 
 + return ask ( new CounterChanged ( peer , counter ) ) ; 
 + } 
 + 
 + public Promise < Void > onGroupChanged ( Group group ) { 
 + return ask ( new GroupChanged ( group ) ) ; 
 + } 
 + 
 + public Promise < Void > onUserChanged ( User user ) { 
 + return ask ( new UserChanged ( user ) ) ; 
 + } 
 + 
 + public Promise < Void > onHistoryLoaded ( List < DialogHistory > history ) { 
 + return ask ( new HistoryLoaded ( history ) ) ; 
 + } 
 + 
 + public Promise < Void > onMessage ( Peer peer , Message message , int counter ) { 
 + return ask ( new InMessage ( peer , message , counter ) ) ; 
 + } 
 + 
 + public Promise < Void > onMessageContentChanged ( Peer peer , long rid , AbsContent content ) { 
 + return ask ( new MessageContentChanged ( peer , rid , content ) ) ; 
 + } 
 + 
 + public Promise < Void > onMessageDeleted ( Peer peer , Message topMessage ) { 
 + return ask ( new MessageDeleted ( peer , topMessage ) ) ; 
 + } 
 + 
 + public Promise < Void > onPeerReadChanged ( Peer peer , long date ) { 
 + return ask ( new PeerReadChanged ( peer , date ) ) ; 
 + } 
 + 
 + public Promise < Void > onPeerReceiveChanged ( Peer peer , long date ) { 
 + return ask ( new PeerReceiveChanged ( peer , date ) ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / ChatClear . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / ChatClear . java 
 new file mode 100644 
 index 0000000 . . 95bc5ec 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / ChatClear . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package im . actor . core . modules . messaging . dialogs . entity ; 
 + 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . actors . messages . Void ; 
 + 
 + public class ChatClear implements AskMessage < Void > { 
 + 
 + private Peer peer ; 
 + 
 + public ChatClear ( Peer peer ) { 
 + this . peer = peer ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / ChatDelete . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / ChatDelete . java 
 new file mode 100644 
 index 0000000 . . 215ea07 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / ChatDelete . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package im . actor . core . modules . messaging . dialogs . entity ; 
 + 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . actors . messages . Void ; 
 + 
 + public class ChatDelete implements AskMessage < Void > { 
 + 
 + private Peer peer ; 
 + 
 + public ChatDelete ( Peer peer ) { 
 + this . peer = peer ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / CounterChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / CounterChanged . java 
 new file mode 100644 
 index 0000000 . . ac42d49 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / CounterChanged . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package im . actor . core . modules . messaging . dialogs . entity ; 
 + 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . actors . messages . Void ; 
 + 
 + public class CounterChanged implements AskMessage < Void > { 
 + 
 + private Peer peer ; 
 + private int counter ; 
 + 
 + public CounterChanged ( Peer peer , int counter ) { 
 + this . peer = peer ; 
 + this . counter = counter ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / GroupChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / GroupChanged . java 
 new file mode 100644 
 index 0000000 . . a77293a 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / GroupChanged . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package im . actor . core . modules . messaging . dialogs . entity ; 
 + 
 + import im . actor . core . entity . Group ; 
 + import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . actors . messages . Void ; 
 + 
 + public class GroupChanged implements AskMessage < Void > { 
 + 
 + private Group group ; 
 + 
 + public GroupChanged ( Group group ) { 
 + this . group = group ; 
 + } 
 + 
 + public Group getGroup ( ) { 
 + return group ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / HistoryLoaded . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / HistoryLoaded . java 
 new file mode 100644 
 index 0000000 . . 6ba6f53 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / HistoryLoaded . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package im . actor . core . modules . messaging . dialogs . entity ; 
 + 
 + import java . util . List ; 
 + 
 + import im . actor . core . modules . messaging . history . entity . DialogHistory ; 
 + import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . actors . messages . Void ; 
 + 
 + public class HistoryLoaded implements AskMessage < Void > { 
 + 
 + private List < DialogHistory > history ; 
 + 
 + public HistoryLoaded ( List < DialogHistory > history ) { 
 + this . history = history ; 
 + } 
 + 
 + public List < DialogHistory > getHistory ( ) { 
 + return history ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / InMessage . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / InMessage . java 
 new file mode 100644 
 index 0000000 . . 7a42d3d 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / InMessage . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package im . actor . core . modules . messaging . dialogs . entity ; 
 + 
 + import im . actor . core . entity . Message ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . actors . messages . Void ; 
 + 
 + public class InMessage implements AskMessage < Void > { 
 + 
 + private Peer peer ; 
 + private Message message ; 
 + private int counter ; 
 + 
 + public InMessage ( Peer peer , Message message , int counter ) { 
 + this . peer = peer ; 
 + this . message = message ; 
 + this . counter = counter ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public Message getMessage ( ) { 
 + return message ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / MessageContentChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / MessageContentChanged . java 
 new file mode 100644 
 index 0000000 . . de7645c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / MessageContentChanged . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package im . actor . core . modules . messaging . dialogs . entity ; 
 + 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . content . AbsContent ; 
 + import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . actors . messages . Void ; 
 + 
 + public class MessageContentChanged implements AskMessage < Void > { 
 + 
 + private Peer peer ; 
 + private long rid ; 
 + private AbsContent content ; 
 + 
 + public MessageContentChanged ( Peer peer , long rid , AbsContent content ) { 
 + this . peer = peer ; 
 + this . rid = rid ; 
 + this . content = content ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public long getRid ( ) { 
 + return rid ; 
 + } 
 + 
 + public AbsContent getContent ( ) { 
 + return content ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / MessageDeleted . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / MessageDeleted . java 
 new file mode 100644 
 index 0000000 . . a83a04e 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / MessageDeleted . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package im . actor . core . modules . messaging . dialogs . entity ; 
 + 
 + import im . actor . core . entity . Message ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . actors . messages . Void ; 
 + 
 + public class MessageDeleted implements AskMessage < Void > { 
 + 
 + private Peer peer ; 
 + private Message topMessage ; 
 + 
 + public MessageDeleted ( Peer peer , Message topMessage ) { 
 + this . peer = peer ; 
 + this . topMessage = topMessage ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public Message getTopMessage ( ) { 
 + return topMessage ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / PeerReadChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / PeerReadChanged . java 
 new file mode 100644 
 index 0000000 . . bcaea62 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / PeerReadChanged . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package im . actor . core . modules . messaging . dialogs . entity ; 
 + 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . actors . messages . Void ; 
 + 
 + public class PeerReadChanged implements AskMessage < Void > { 
 + 
 + private Peer peer ; 
 + private long date ; 
 + 
 + public PeerReadChanged ( Peer peer , long date ) { 
 + this . peer = peer ; 
 + this . date = date ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public long getDate ( ) { 
 + return date ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / PeerReceiveChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / PeerReceiveChanged . java 
 new file mode 100644 
 index 0000000 . . dfd84ec 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / PeerReceiveChanged . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package im . actor . core . modules . messaging . dialogs . entity ; 
 + 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . actors . messages . Void ; 
 + 
 + public class PeerReceiveChanged implements AskMessage < Void > { 
 + 
 + private Peer peer ; 
 + private long date ; 
 + 
 + public PeerReceiveChanged ( Peer peer , long date ) { 
 + this . peer = peer ; 
 + this . date = date ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public long getDate ( ) { 
 + return date ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / UserChanged . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / UserChanged . java 
 new file mode 100644 
 index 0000000 . . 10c3bae 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / dialogs / entity / UserChanged . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package im . actor . core . modules . messaging . dialogs . entity ; 
 + 
 + import im . actor . core . entity . User ; 
 + import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . actors . messages . Void ; 
 + 
 + public class UserChanged implements AskMessage < Void > { 
 + 
 + private User user ; 
 + 
 + public UserChanged ( User user ) { 
 + this . user = user ; 
 + } 
 + 
 + public User getUser ( ) { 
 + return user ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 index 4719bc6 . . 81f76a7 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / router / RouterActor . java 
 @ @ - 38 , 7 + 38 , 17 @ @ import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . messaging . actions . CursorReaderActor ; 
 import im . actor . core . modules . messaging . actions . CursorReceiverActor ; 
 import im . actor . core . modules . messaging . actions . SenderActor ; 
 - import im . actor . core . modules . messaging . dialogs . DialogsActor ; 
 + import im . actor . core . modules . messaging . dialogs . DialogsInt ; 
 + import im . actor . core . modules . messaging . dialogs . entity . ChatClear ; 
 + import im . actor . core . modules . messaging . dialogs . entity . ChatDelete ; 
 + import im . actor . core . modules . messaging . dialogs . entity . CounterChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . GroupChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . InMessage ; 
 + import im . actor . core . modules . messaging . dialogs . entity . MessageDeleted ; 
 + import im . actor . core . modules . messaging . dialogs . entity . PeerReadChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . PeerReceiveChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . UserChanged ; 
 + import im . actor . core . modules . messaging . dialogs . entity . HistoryLoaded ; 
 import im . actor . core . modules . messaging . history . entity . DialogHistory ; 
 import im . actor . core . modules . messaging . router . entity . ActiveDialogGroup ; 
 import im . actor . core . modules . messaging . router . entity . ActiveDialogStorage ; 
 @ @ - 76 , 6 + 86 , 9 @ @ public class RouterActor extends ModuleActor { 
 
 private static final String TAG = " RouterActor " ; 
 
 + / / j2objc workaround 
 + private static final Void DUMB = null ; 
 + 
 / / Visibility 
 private final HashSet < Peer > visiblePeers = new HashSet < > ( ) ; 
 private boolean isAppVisible = false ; 
 @ @ - 269 , 7 + 282 , 7 @ @ public class RouterActor extends ModuleActor { 
 / / 
 / / Updating Dialog List 
 / / 
 - dialogsActor ( new DialogsActor . InMessage ( peer , topMessage , state . getUnreadCount ( ) ) ) ; 
 + Promise < Void > res = getDialogsRouter ( ) . onMessage ( peer , topMessage , state . getUnreadCount ( ) ) ; 
 
 
 / / 
 @ @ - 294 , 7 + 307 , 7 @ @ public class RouterActor extends ModuleActor { 
 } 
 } 
 
 - return Promise . success ( null ) ; 
 + return res ; 
 } 
 
 
 @ @ - 319 , 9 + 332 , 10 @ @ public class RouterActor extends ModuleActor { 
 conversation ( peer ) . addOrUpdateItem ( updatedMsg ) ; 
 
 / / Notify dialogs 
 - dialogsActor ( new DialogsActor . InMessage ( peer , updatedMsg , - 1 ) ) ; 
 + return getDialogsRouter ( ) . onMessage ( peer , updatedMsg , - 1 ) ; 
 + } else { 
 + return Promise . success ( null ) ; 
 } 
 - return Promise . success ( null ) ; 
 } 
 
 private Promise < Void > onOutgoingError ( Peer peer , long rid ) { 
 @ @ - 361 , 9 + 375 , 7 @ @ public class RouterActor extends ModuleActor { 
 conversationStates . addOrUpdateItem ( state ) ; 
 } 
 
 - dialogsActor ( new DialogsActor . HistoryLoaded ( dialogs ) ) ; 
 - 
 - return Promise . success ( null ) ; 
 + return getDialogsRouter ( ) . onHistoryLoaded ( dialogs ) ; 
 } 
 
 private Promise < Void > onChatHistoryLoaded ( Peer peer , List < Message > messages , Long maxReadDate , 
 @ @ - 421 , 12 + 433 , 15 @ @ public class RouterActor extends ModuleActor { 
 / / 
 
 private Promise < Void > onContentUpdate ( Peer peer , long rid , AbsContent content ) { 
 + 
 Message message = conversation ( peer ) . getValue ( rid ) ; 
 - / / Ignore if we already doesn ' t have this message 
 + 
 if ( message ! = null ) { 
 conversation ( peer ) . addOrUpdateItem ( message . changeContent ( content ) ) ; 
 + return getDialogsRouter ( ) . onMessageContentChanged ( peer , rid , content ) ; 
 + } else { 
 + return Promise . success ( null ) ; 
 } 
 - return Promise . success ( null ) ; 
 } 
 
 private Promise < Void > onReactionsUpdate ( Peer peer , long rid , List < Reaction > reactions ) { 
 @ @ - 451 , 27 + 466 , 22 @ @ public class RouterActor extends ModuleActor { 
 conversation ( peer ) . removeItems ( JavaUtil . unbox ( rids ) ) ; 
 
 Message head = conversation ( peer ) . getHeadValue ( ) ; 
 - dialogsActor ( new DialogsActor . MessageDeleted ( peer , head . getMessageState ( ) = = MessageState . PENDING ? null : head ) ) ; 
 
 - return Promise . success ( null ) ; 
 + return getDialogsRouter ( ) . onMessageDeleted ( peer , head . getMessageState ( ) = = MessageState . PENDING ? null : head ) ; 
 } 
 
 private Promise < Void > onChatClear ( Peer peer ) { 
 
 conversation ( peer ) . clear ( ) ; 
 
 - dialogsActor ( new DialogsActor . ChatClear ( peer ) ) ; 
 - 
 - return Promise . success ( null ) ; 
 + return getDialogsRouter ( ) . onChatClear ( peer ) ; 
 } 
 
 private Promise < Void > onChatDelete ( Peer peer ) { 
 
 conversation ( peer ) . clear ( ) ; 
 
 - dialogsActor ( new DialogsActor . ChatDelete ( peer ) ) ; 
 - 
 - return Promise . success ( null ) ; 
 + return getDialogsRouter ( ) . onChatDelete ( peer ) ; 
 } 
 
 
 @ @ - 482 , 10 + 492 , 13 @ @ public class RouterActor extends ModuleActor { 
 private Promise < Void > onMessageRead ( Peer peer , long date ) { 
 ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; 
 boolean isChanged = false ; 
 + Promise < Void > res ; 
 if ( date > state . getOutReadDate ( ) ) { 
 state = state . changeOutReadDate ( date ) ; 
 - dialogsActor ( new DialogsActor . PeerReadChanged ( peer , date ) ) ; 
 + res = getDialogsRouter ( ) . onPeerReadChanged ( peer , date ) ; 
 isChanged = true ; 
 + } else { 
 + res = Promise . success ( null ) ; 
 } 
 if ( date > state . getOutReceiveDate ( ) ) { 
 state = state . changeOutReceiveDate ( date ) ; 
 @ @ - 495 , 32 + 508 , 36 @ @ public class RouterActor extends ModuleActor { 
 conversationStates . addOrUpdateItem ( state ) ; 
 } 
 
 - return Promise . success ( null ) ; 
 + return res ; 
 } 
 
 private Promise < Void > onMessageReceived ( Peer peer , long date ) { 
 ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; 
 if ( date > state . getOutReceiveDate ( ) ) { 
 - dialogsActor ( new DialogsActor . PeerReceiveChanged ( peer , date ) ) ; 
 state = state . changeOutReceiveDate ( date ) ; 
 conversationStates . addOrUpdateItem ( state ) ; 
 + 
 + return getDialogsRouter ( ) . onPeerReceiveChanged ( peer , date ) ; 
 + } else { 
 + return Promise . success ( null ) ; 
 } 
 - return Promise . success ( null ) ; 
 } 
 
 private Promise < Void > onMessageReadByMe ( Peer peer , long date , int counter ) { 
 + 
 ConversationState state = conversationStates . getValue ( peer . getUnuqueId ( ) ) ; 
 state = state 
 . changeCounter ( counter ) 
 . changeInReadDate ( date ) ; 
 conversationStates . addOrUpdateItem ( state ) ; 
 
 - dialogsActor ( new DialogsActor . CounterChanged ( peer , counter ) ) ; 
 + Promise < Void > res = getDialogsRouter ( ) . onCounterChanged ( peer , counter ) ; 
 
 notifyActiveDialogsVM ( ) ; 
 
 context ( ) . getNotificationsModule ( ) . onOwnRead ( peer , date ) ; 
 - return Promise . success ( null ) ; 
 + 
 + return res ; 
 } 
 
 
 @ @ - 529 , 6 + 546 , 9 @ @ public class RouterActor extends ModuleActor { 
 / / 
 
 private Promise < Void > onPeersChanged ( List < User > users , List < Group > groups ) { 
 + 
 + Promise < Void > res = Promise . success ( null ) ; 
 + 
 boolean isActiveNeedUpdate = false ; 
 for ( User u : users ) { 
 if ( ! isActiveNeedUpdate ) { 
 @ @ - 539 , 7 + 559 , 7 @ @ public class RouterActor extends ModuleActor { 
 } 
 } 
 } 
 - dialogsActor ( new DialogsActor . UserChanged ( u ) ) ; 
 + res = res . chain ( v - > getDialogsRouter ( ) . onUserChanged ( u ) ) ; 
 } 
 for ( Group group : groups ) { 
 if ( ! isActiveNeedUpdate ) { 
 @ @ - 550 , 14 + 570 , 15 @ @ public class RouterActor extends ModuleActor { 
 } 
 } 
 } 
 - dialogsActor ( new DialogsActor . GroupChanged ( group ) ) ; 
 + 
 + res = res . chain ( v - > getDialogsRouter ( ) . onGroupChanged ( group ) ) ; 
 } 
 
 if ( isActiveNeedUpdate ) { 
 notifyActiveDialogsVM ( ) ; 
 } 
 
 - return Promise . success ( null ) ; 
 + return res ; 
 } 
 
 
 @ @ - 603 , 9 + 624 , 9 @ @ public class RouterActor extends ModuleActor { 
 context ( ) . getMessagesModule ( ) . getPlainReadActor ( ) 
 . send ( new CursorReaderActor . MarkRead ( peer , state . getInMaxMessageDate ( ) ) ) ; 
 
 - dialogsActor ( new DialogsActor . CounterChanged ( peer , 0 ) ) ; 
 - 
 notifyActiveDialogsVM ( ) ; 
 + 
 + getDialogsRouter ( ) . onCounterChanged ( peer , 0 ) ; 
 } 
 } 
 } 
 @ @ - 630 , 8 + 651 , 8 @ @ public class RouterActor extends ModuleActor { 
 / / Tools 
 / / 
 
 - private void dialogsActor ( Object message ) { 
 - context ( ) . getMessagesModule ( ) . getDialogsActor ( ) . send ( message ) ; 
 + private DialogsInt getDialogsRouter ( ) { 
 + return context ( ) . getMessagesModule ( ) . getDialogsInt ( ) ; 
 } 
 
 private ListEngine < Message > conversation ( Peer peer ) {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java 
 index 3aafefb . . de1b281 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / groups / GroupsProcessor . java 
 @ @ - 27 , 7 + 27 , 7 @ @ import im . actor . core . entity . content . ServiceGroupUserLeave ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . messaging . actors . DialogsActor ; 
 - import im . actor . core . modules . messaging . actors . GroupedDialogsActor ; 
 + import im . actor . core . modules . messaging . actors . ActiveDialogsActor ; 
 import im . actor . core . modules . messaging . actors . entity . EntityConverter ; 
 import im . actor . runtime . annotations . Verified ; 
 
 @ @ - 307 , 7 + 307 , 7 @ @ public class GroupsProcessor extends AbsModule { 
 . send ( new DialogsActor . GroupChanged ( group ) ) ; 
 if ( context ( ) . getConfiguration ( ) . isEnabledGroupedChatList ( ) ) { 
 context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) . send ( 
 - new GroupedDialogsActor . PeerInformationChanged ( Peer . group ( group . getGroupId ( ) ) ) ) ; 
 + new ActiveDialogsActor . PeerInformationChanged ( Peer . group ( group . getGroupId ( ) ) ) ) ; 
 } 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 index 2a9dde4 . . 22a12d5 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesModule . java 
 @ @ - 60 , 7 + 60 , 7 @ @ import im . actor . core . modules . messaging . actors . CursorReaderActor ; 
 import im . actor . core . modules . messaging . actors . CursorReceiverActor ; 
 import im . actor . core . modules . messaging . actors . DialogsActor ; 
 import im . actor . core . modules . messaging . actors . DialogsHistoryActor ; 
 - import im . actor . core . modules . messaging . actors . GroupedDialogsActor ; 
 + import im . actor . core . modules . messaging . actors . ActiveDialogsActor ; 
 import im . actor . core . modules . messaging . actors . MessageDeleteActor ; 
 import im . actor . core . modules . messaging . actors . OwnReadActor ; 
 import im . actor . core . modules . messaging . actors . SenderActor ; 
 @ @ - 147 , 8 + 147 , 8 @ @ public class MessagesModule extends AbsModule implements BusSubscriber { 
 if ( context ( ) . getConfiguration ( ) . isEnabledGroupedChatList ( ) ) { 
 this . dialogsGroupedActor = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 @ Override 
 - public GroupedDialogsActor create ( ) { 
 - return new GroupedDialogsActor ( context ( ) ) ; 
 + public ActiveDialogsActor create ( ) { 
 + return new ActiveDialogsActor ( context ( ) ) ; 
 } 
 } ) , " actor / dialogs / grouped " ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java 
 index f0b6071 . . a8502f6 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / MessagesProcessor . java 
 @ @ - 33 , 7 + 33 , 7 @ @ import im . actor . core . modules . messaging . actors . ConversationHistoryActor ; 
 import im . actor . core . modules . messaging . actors . CursorReceiverActor ; 
 import im . actor . core . modules . messaging . actors . DialogsActor ; 
 import im . actor . core . modules . messaging . actors . DialogsHistoryActor ; 
 - import im . actor . core . modules . messaging . actors . GroupedDialogsActor ; 
 + import im . actor . core . modules . messaging . actors . ActiveDialogsActor ; 
 import im . actor . core . modules . messaging . actors . OwnReadActor ; 
 import im . actor . core . modules . messaging . actors . SenderActor ; 
 import im . actor . core . modules . messaging . actors . entity . DialogHistory ; 
 @ @ - 359 , 19 + 359 , 10 @ @ public class MessagesProcessor extends AbsModule { 
 context ( ) . getAppStateModule ( ) . onCountersChanged ( counters ) ; 
 } 
 
 - public void onChatArchived ( ApiPeer peer ) { 
 - / / context ( ) . getMessagesModule ( ) . getDialogsActor ( ) 
 - / / . send ( new DialogsActor . ChatDelete ( convert ( peer ) ) ) ; 
 - } 
 - 
 - public void onChatRestored ( Peer peer ) { 
 - 
 - } 
 - 
 public void onChatGroupsChanged ( List < ApiDialogGroup > groups ) { 
 if ( context ( ) . getConfiguration ( ) . isEnabledGroupedChatList ( ) ) { 
 context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) 
 - . send ( new GroupedDialogsActor . GroupedDialogsChanged ( groups ) ) ; 
 + . send ( new ActiveDialogsActor . GroupedDialogsChanged ( groups ) ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ActiveDialogsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ActiveDialogsActor . java 
 new file mode 100644 
 index 0000000 . . 51b5c75 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ActiveDialogsActor . java 
 @ @ - 0 , 0 + 1 , 261 @ @ 
 + package im . actor . core . modules . messaging . actors ; 
 + 
 + import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import im . actor . core . api . ApiDialogGroup ; 
 + import im . actor . core . api . ApiDialogShort ; 
 + import im . actor . core . api . ApiPeer ; 
 + import im . actor . core . api . rpc . RequestLoadGroupedDialogs ; 
 + import im . actor . core . api . rpc . ResponseLoadGroupedDialogs ; 
 + import im . actor . core . entity . Avatar ; 
 + import im . actor . core . entity . DialogSpec ; 
 + import im . actor . core . entity . Group ; 
 + import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerType ; 
 + import im . actor . core . entity . User ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . modules . messaging . actors . entity . GroupedItem ; 
 + import im . actor . core . modules . messaging . actors . entity . GroupedStorage ; 
 + import im . actor . core . modules . ModuleActor ; 
 + import im . actor . core . network . RpcCallback ; 
 + import im . actor . core . network . RpcException ; 
 + import im . actor . core . viewmodel . DialogGroup ; 
 + import im . actor . core . viewmodel . DialogSmall ; 
 + import im . actor . core . viewmodel . DialogSpecVM ; 
 + import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; 
 + import im . actor . runtime . mvvm . MVVMCollection ; 
 + 
 + import static im . actor . core . modules . messaging . actors . entity . EntityConverter . convert ; 
 + 
 + public class ActiveDialogsActor extends ModuleActor { 
 + 
 + private static final String PREFERENCE _ GROUPED = " dialogs . grouped " ; 
 + private static final String PREFERENCE _ GROUPED _ LOADED = " dialogs . grouped . loaded " ; 
 + 
 + private boolean isLoaded = false ; 
 + private GroupedStorage storage ; 
 + private MVVMCollection < DialogSpec , DialogSpecVM > specs ; 
 + 
 + public ActiveDialogsActor ( ModuleContext context ) { 
 + super ( context ) ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + specs = context ( ) . getMessagesModule ( ) . getDialogDescKeyValue ( ) ; 
 + storage = new GroupedStorage ( ) ; 
 + 
 + byte [ ] data = preferences ( ) . getBytes ( PREFERENCE _ GROUPED ) ; 
 + if ( data ! = null ) { 
 + try { 
 + storage = new GroupedStorage ( data ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + 
 + isLoaded = preferences ( ) . getBool ( PREFERENCE _ GROUPED _ LOADED , false ) ; 
 + 
 + if ( ! isLoaded ) { 
 + request ( new RequestLoadGroupedDialogs ( ) , new RpcCallback < ResponseLoadGroupedDialogs > ( ) { 
 + @ Override 
 + public void onResult ( final ResponseLoadGroupedDialogs response ) { 
 + updates ( ) . executeRelatedResponse ( response . getUsers ( ) , response . getGroups ( ) , 
 + self ( ) , 
 + new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + applyGroups ( response . getDialogs ( ) ) ; 
 + isLoaded = true ; 
 + preferences ( ) . putBool ( PREFERENCE _ GROUPED _ LOADED , true ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( RpcException e ) { 
 + / / Ignore 
 + } 
 + } ) ; 
 + } else { 
 + notifyVM ( ) ; 
 + } 
 + } 
 + 
 + private void onCounterChanged ( Peer peer , int counter ) { 
 + DialogSpec spec = new DialogSpec ( peer , false , counter ) ; 
 + specs . getEngine ( ) . addOrUpdateItem ( spec ) ; 
 + notifyVM ( peer ) ; 
 + } 
 + 
 + private void onPeerInfoChanged ( Peer peer ) { 
 + notifyVM ( peer ) ; 
 + } 
 + 
 + private void onGroupedChanged ( List < ApiDialogGroup > groupedItems ) { 
 + applyGroups ( groupedItems ) ; 
 + } 
 + 
 + 
 + private void onChatArchived ( ApiPeer peer ) { 
 + 
 + } 
 + 
 + 
 + / / Tools 
 + 
 + private void notifyVM ( Peer peer ) { 
 + boolean found = false ; 
 + for ( GroupedItem i : storage . getGroups ( ) ) { 
 + for ( Peer p : i . getPeers ( ) ) { 
 + if ( p . equals ( peer ) ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + } 
 + 
 + if ( found ) { 
 + notifyVM ( ) ; 
 + } 
 + } 
 + 
 + private void notifyVM ( ) { 
 + 
 + ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; 
 + for ( GroupedItem i : storage . getGroups ( ) ) { 
 + ArrayListDialogSmall dialogSmalls = new ArrayListDialogSmall ( ) ; 
 + for ( Peer p : i . getPeers ( ) ) { 
 + DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; 
 + String title ; 
 + Avatar avatar ; 
 + if ( p . getPeerType ( ) = = PeerType . GROUP ) { 
 + Group group = getGroup ( p . getPeerId ( ) ) ; 
 + title = group . getTitle ( ) ; 
 + avatar = group . getAvatar ( ) ; 
 + } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + User user = getUser ( p . getPeerId ( ) ) ; 
 + title = user . getName ( ) ; 
 + avatar = user . getAvatar ( ) ; 
 + } else { 
 + continue ; 
 + } 
 + 
 + dialogSmalls . add ( new DialogSmall ( p , title , avatar , spec . getCounter ( ) ) ) ; 
 + } 
 + groups . add ( new DialogGroup ( i . getTitle ( ) , i . getKey ( ) , dialogSmalls ) ) ; 
 + } 
 + context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; 
 + } 
 + 
 + 
 + private void applyGroups ( List < ApiDialogGroup > dialogGroups ) { 
 + 
 + / / Writing missing specs 
 + 
 + ArrayList < DialogSpec > updatedSpecs = new ArrayList < DialogSpec > ( ) ; 
 + for ( ApiDialogGroup g : dialogGroups ) { 
 + for ( ApiDialogShort s : g . getDialogs ( ) ) { 
 + Peer peer = convert ( s . getPeer ( ) ) ; 
 + if ( specs . getEngine ( ) . getValue ( peer . getUnuqueId ( ) ) = = null ) { 
 + updatedSpecs . add ( new DialogSpec ( peer , false , s . getCounter ( ) ) ) ; 
 + } 
 + } 
 + } 
 + specs . getEngine ( ) . addOrUpdateItems ( updatedSpecs ) ; 
 + 
 + / / Updating storage 
 + 
 + storage . getGroups ( ) . clear ( ) ; 
 + for ( ApiDialogGroup g : dialogGroups ) { 
 + ArrayList < Peer > peers = new ArrayList < Peer > ( ) ; 
 + for ( ApiDialogShort s : g . getDialogs ( ) ) { 
 + Peer peer = convert ( s . getPeer ( ) ) ; 
 + peers . add ( peer ) ; 
 + } 
 + storage . getGroups ( ) . add ( new GroupedItem ( g . getKey ( ) , g . getTitle ( ) , peers ) ) ; 
 + } 
 + preferences ( ) . putBytes ( PREFERENCE _ GROUPED , storage . toByteArray ( ) ) ; 
 + 
 + / / Updating VM 
 + 
 + notifyVM ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof PeerInformationChanged ) { 
 + PeerInformationChanged informationChanged = ( PeerInformationChanged ) message ; 
 + onPeerInfoChanged ( informationChanged . getPeer ( ) ) ; 
 + } else if ( message instanceof CounterChanged ) { 
 + CounterChanged counterChanged = ( CounterChanged ) message ; 
 + onCounterChanged ( counterChanged . getPeer ( ) , counterChanged . getCounter ( ) ) ; 
 + } else if ( message instanceof GroupedDialogsChanged ) { 
 + GroupedDialogsChanged g = ( GroupedDialogsChanged ) message ; 
 + onGroupedChanged ( g . getItems ( ) ) ; 
 + } else if ( message instanceof ChatArchived ) { 
 + onChatArchived ( ( ( ChatArchived ) message ) . getPeer ( ) ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 + public static class GroupedDialogsChanged { 
 + 
 + private List < ApiDialogGroup > items ; 
 + 
 + public GroupedDialogsChanged ( List < ApiDialogGroup > items ) { 
 + this . items = items ; 
 + } 
 + 
 + public List < ApiDialogGroup > getItems ( ) { 
 + return items ; 
 + } 
 + } 
 + 
 + public static class PeerInformationChanged { 
 + 
 + private Peer peer ; 
 + 
 + public PeerInformationChanged ( Peer peer ) { 
 + this . peer = peer ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + } 
 + 
 + public static class CounterChanged { 
 + private Peer peer ; 
 + private int counter ; 
 + 
 + public CounterChanged ( Peer peer , int counter ) { 
 + this . peer = peer ; 
 + this . counter = counter ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public int getCounter ( ) { 
 + return counter ; 
 + } 
 + } 
 + 
 + public static class ChatArchived { 
 + ApiPeer peer ; 
 + public ChatArchived ( ApiPeer peer ) { 
 + this . peer = peer ; 
 + } 
 + 
 + public ApiPeer getPeer ( ) { 
 + return peer ; 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java 
 index 2fa4307 . . eaedae5 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / ConversationActor . java 
 @ @ - 202 , 7 + 202 , 7 @ @ public class ConversationActor extends ModuleActor { 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , topMessage , inPendingIndex . getCount ( ) ) ) ; 
 } 
 if ( dialogsGroupedActor ! = null ) { 
 - dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 + dialogsGroupedActor . send ( new ActiveDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 } 
 } 
 } 
 @ @ - 264 , 7 + 264 , 7 @ @ public class ConversationActor extends ModuleActor { 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , message , inPendingIndex . getCount ( ) ) ) ; 
 } 
 if ( dialogsGroupedActor ! = null ) { 
 - dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 + dialogsGroupedActor . send ( new ActiveDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 } 
 } 
 } 
 @ @ - 342 , 7 + 342 , 7 @ @ public class ConversationActor extends ModuleActor { 
 / / Updating dialog 
 dialogsActor . send ( new DialogsActor . InMessage ( peer , updatedMsg , inPendingIndex . getCount ( ) ) ) ; 
 if ( dialogsGroupedActor ! = null ) { 
 - dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 + dialogsGroupedActor . send ( new ActiveDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 } 
 } 
 
 @ @ - 369 , 7 + 369 , 7 @ @ public class ConversationActor extends ModuleActor { 
 } 
 
 if ( dialogsGroupedActor ! = null ) { 
 - dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 + dialogsGroupedActor . send ( new ActiveDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 } 
 } 
 } 
 @ @ - 449 , 7 + 449 , 7 @ @ public class ConversationActor extends ModuleActor { 
 dialogsActor . send ( new DialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 } 
 if ( dialogsGroupedActor ! = null ) { 
 - dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 + dialogsGroupedActor . send ( new ActiveDialogsActor . CounterChanged ( peer , inPendingIndex . getCount ( ) ) ) ; 
 } 
 } 
 
 @ @ - 467 , 7 + 467 , 7 @ @ public class ConversationActor extends ModuleActor { 
 dialogsActor . send ( new DialogsActor . CounterChanged ( peer , 0 ) ) ; 
 } 
 if ( dialogsGroupedActor ! = null ) { 
 - dialogsGroupedActor . send ( new GroupedDialogsActor . CounterChanged ( peer , 0 ) ) ; 
 + dialogsGroupedActor . send ( new ActiveDialogsActor . CounterChanged ( peer , 0 ) ) ; 
 } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / GroupedDialogsActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / GroupedDialogsActor . java 
 deleted file mode 100644 
 index 157cd43 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / messaging / actors / GroupedDialogsActor . java 
 + + + / dev / null 
 @ @ - 1 , 261 + 0 , 0 @ @ 
 - package im . actor . core . modules . messaging . actors ; 
 - 
 - import java . io . IOException ; 
 - import java . util . ArrayList ; 
 - import java . util . List ; 
 - 
 - import im . actor . core . api . ApiDialogGroup ; 
 - import im . actor . core . api . ApiDialogShort ; 
 - import im . actor . core . api . ApiPeer ; 
 - import im . actor . core . api . rpc . RequestLoadGroupedDialogs ; 
 - import im . actor . core . api . rpc . ResponseLoadGroupedDialogs ; 
 - import im . actor . core . entity . Avatar ; 
 - import im . actor . core . entity . DialogSpec ; 
 - import im . actor . core . entity . Group ; 
 - import im . actor . core . entity . Peer ; 
 - import im . actor . core . entity . PeerType ; 
 - import im . actor . core . entity . User ; 
 - import im . actor . core . modules . ModuleContext ; 
 - import im . actor . core . modules . messaging . actors . entity . GroupedItem ; 
 - import im . actor . core . modules . messaging . actors . entity . GroupedStorage ; 
 - import im . actor . core . modules . ModuleActor ; 
 - import im . actor . core . network . RpcCallback ; 
 - import im . actor . core . network . RpcException ; 
 - import im . actor . core . viewmodel . DialogGroup ; 
 - import im . actor . core . viewmodel . DialogSmall ; 
 - import im . actor . core . viewmodel . DialogSpecVM ; 
 - import im . actor . core . viewmodel . generics . ArrayListDialogSmall ; 
 - import im . actor . runtime . mvvm . MVVMCollection ; 
 - 
 - import static im . actor . core . modules . messaging . actors . entity . EntityConverter . convert ; 
 - 
 - public class GroupedDialogsActor extends ModuleActor { 
 - 
 - private static final String PREFERENCE _ GROUPED = " dialogs . grouped " ; 
 - private static final String PREFERENCE _ GROUPED _ LOADED = " dialogs . grouped . loaded " ; 
 - 
 - private boolean isLoaded = false ; 
 - private GroupedStorage storage ; 
 - private MVVMCollection < DialogSpec , DialogSpecVM > specs ; 
 - 
 - public GroupedDialogsActor ( ModuleContext context ) { 
 - super ( context ) ; 
 - } 
 - 
 - @ Override 
 - public void preStart ( ) { 
 - super . preStart ( ) ; 
 - specs = context ( ) . getMessagesModule ( ) . getDialogDescKeyValue ( ) ; 
 - storage = new GroupedStorage ( ) ; 
 - 
 - byte [ ] data = preferences ( ) . getBytes ( PREFERENCE _ GROUPED ) ; 
 - if ( data ! = null ) { 
 - try { 
 - storage = new GroupedStorage ( data ) ; 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - } 
 - 
 - isLoaded = preferences ( ) . getBool ( PREFERENCE _ GROUPED _ LOADED , false ) ; 
 - 
 - if ( ! isLoaded ) { 
 - request ( new RequestLoadGroupedDialogs ( ) , new RpcCallback < ResponseLoadGroupedDialogs > ( ) { 
 - @ Override 
 - public void onResult ( final ResponseLoadGroupedDialogs response ) { 
 - updates ( ) . executeRelatedResponse ( response . getUsers ( ) , response . getGroups ( ) , 
 - self ( ) , 
 - new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - applyGroups ( response . getDialogs ( ) ) ; 
 - isLoaded = true ; 
 - preferences ( ) . putBool ( PREFERENCE _ GROUPED _ LOADED , true ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public void onError ( RpcException e ) { 
 - / / Ignore 
 - } 
 - } ) ; 
 - } else { 
 - notifyVM ( ) ; 
 - } 
 - } 
 - 
 - private void onCounterChanged ( Peer peer , int counter ) { 
 - DialogSpec spec = new DialogSpec ( peer , false , counter ) ; 
 - specs . getEngine ( ) . addOrUpdateItem ( spec ) ; 
 - notifyVM ( peer ) ; 
 - } 
 - 
 - private void onPeerInfoChanged ( Peer peer ) { 
 - notifyVM ( peer ) ; 
 - } 
 - 
 - private void onGroupedChanged ( List < ApiDialogGroup > groupedItems ) { 
 - applyGroups ( groupedItems ) ; 
 - } 
 - 
 - 
 - private void onChatArchived ( ApiPeer peer ) { 
 - 
 - } 
 - 
 - 
 - / / Tools 
 - 
 - private void notifyVM ( Peer peer ) { 
 - boolean found = false ; 
 - for ( GroupedItem i : storage . getGroups ( ) ) { 
 - for ( Peer p : i . getPeers ( ) ) { 
 - if ( p . equals ( peer ) ) { 
 - found = true ; 
 - break ; 
 - } 
 - } 
 - } 
 - 
 - if ( found ) { 
 - notifyVM ( ) ; 
 - } 
 - } 
 - 
 - private void notifyVM ( ) { 
 - 
 - ArrayList < DialogGroup > groups = new ArrayList < DialogGroup > ( ) ; 
 - for ( GroupedItem i : storage . getGroups ( ) ) { 
 - ArrayListDialogSmall dialogSmalls = new ArrayListDialogSmall ( ) ; 
 - for ( Peer p : i . getPeers ( ) ) { 
 - DialogSpec spec = specs . getEngine ( ) . getValue ( p . getUnuqueId ( ) ) ; 
 - String title ; 
 - Avatar avatar ; 
 - if ( p . getPeerType ( ) = = PeerType . GROUP ) { 
 - Group group = getGroup ( p . getPeerId ( ) ) ; 
 - title = group . getTitle ( ) ; 
 - avatar = group . getAvatar ( ) ; 
 - } else if ( p . getPeerType ( ) = = PeerType . PRIVATE ) { 
 - User user = getUser ( p . getPeerId ( ) ) ; 
 - title = user . getName ( ) ; 
 - avatar = user . getAvatar ( ) ; 
 - } else { 
 - continue ; 
 - } 
 - 
 - dialogSmalls . add ( new DialogSmall ( p , title , avatar , spec . getCounter ( ) ) ) ; 
 - } 
 - groups . add ( new DialogGroup ( i . getTitle ( ) , i . getKey ( ) , dialogSmalls ) ) ; 
 - } 
 - context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . change ( groups ) ; 
 - } 
 - 
 - 
 - private void applyGroups ( List < ApiDialogGroup > dialogGroups ) { 
 - 
 - / / Writing missing specs 
 - 
 - ArrayList < DialogSpec > updatedSpecs = new ArrayList < DialogSpec > ( ) ; 
 - for ( ApiDialogGroup g : dialogGroups ) { 
 - for ( ApiDialogShort s : g . getDialogs ( ) ) { 
 - Peer peer = convert ( s . getPeer ( ) ) ; 
 - if ( specs . getEngine ( ) . getValue ( peer . getUnuqueId ( ) ) = = null ) { 
 - updatedSpecs . add ( new DialogSpec ( peer , false , s . getCounter ( ) ) ) ; 
 - } 
 - } 
 - } 
 - specs . getEngine ( ) . addOrUpdateItems ( updatedSpecs ) ; 
 - 
 - / / Updating storage 
 - 
 - storage . getGroups ( ) . clear ( ) ; 
 - for ( ApiDialogGroup g : dialogGroups ) { 
 - ArrayList < Peer > peers = new ArrayList < Peer > ( ) ; 
 - for ( ApiDialogShort s : g . getDialogs ( ) ) { 
 - Peer peer = convert ( s . getPeer ( ) ) ; 
 - peers . add ( peer ) ; 
 - } 
 - storage . getGroups ( ) . add ( new GroupedItem ( g . getKey ( ) , g . getTitle ( ) , peers ) ) ; 
 - } 
 - preferences ( ) . putBytes ( PREFERENCE _ GROUPED , storage . toByteArray ( ) ) ; 
 - 
 - / / Updating VM 
 - 
 - notifyVM ( ) ; 
 - } 
 - 
 - @ Override 
 - public void onReceive ( Object message ) { 
 - if ( message instanceof PeerInformationChanged ) { 
 - PeerInformationChanged informationChanged = ( PeerInformationChanged ) message ; 
 - onPeerInfoChanged ( informationChanged . getPeer ( ) ) ; 
 - } else if ( message instanceof CounterChanged ) { 
 - CounterChanged counterChanged = ( CounterChanged ) message ; 
 - onCounterChanged ( counterChanged . getPeer ( ) , counterChanged . getCounter ( ) ) ; 
 - } else if ( message instanceof GroupedDialogsChanged ) { 
 - GroupedDialogsChanged g = ( GroupedDialogsChanged ) message ; 
 - onGroupedChanged ( g . getItems ( ) ) ; 
 - } else if ( message instanceof ChatArchived ) { 
 - onChatArchived ( ( ( ChatArchived ) message ) . getPeer ( ) ) ; 
 - } else { 
 - super . onReceive ( message ) ; 
 - } 
 - } 
 - 
 - public static class GroupedDialogsChanged { 
 - 
 - private List < ApiDialogGroup > items ; 
 - 
 - public GroupedDialogsChanged ( List < ApiDialogGroup > items ) { 
 - this . items = items ; 
 - } 
 - 
 - public List < ApiDialogGroup > getItems ( ) { 
 - return items ; 
 - } 
 - } 
 - 
 - public static class PeerInformationChanged { 
 - 
 - private Peer peer ; 
 - 
 - public PeerInformationChanged ( Peer peer ) { 
 - this . peer = peer ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - } 
 - 
 - public static class CounterChanged { 
 - private Peer peer ; 
 - private int counter ; 
 - 
 - public CounterChanged ( Peer peer , int counter ) { 
 - this . peer = peer ; 
 - this . counter = counter ; 
 - } 
 - 
 - public Peer getPeer ( ) { 
 - return peer ; 
 - } 
 - 
 - public int getCounter ( ) { 
 - return counter ; 
 - } 
 - } 
 - 
 - public static class ChatArchived { 
 - ApiPeer peer ; 
 - public ChatArchived ( ApiPeer peer ) { 
 - this . peer = peer ; 
 - } 
 - 
 - public ApiPeer getPeer ( ) { 
 - return peer ; 
 - } 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java 
 index 8ebb832 . . 908406c 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / UpdateProcessor . java 
 @ @ - 343 , 8 + 343 , 6 @ @ public class UpdateProcessor extends AbsModule { 
 messagesProcessor . onCountersChanged ( ( ( UpdateCountersChanged ) update ) . getCounters ( ) ) ; 
 } else if ( update instanceof UpdateChatGroupsChanged ) { 
 messagesProcessor . onChatGroupsChanged ( ( ( UpdateChatGroupsChanged ) update ) . getDialogs ( ) ) ; 
 - } else if ( update instanceof UpdateChatArchive ) { 
 - messagesProcessor . onChatArchived ( ( ( UpdateChatArchive ) update ) . getPeer ( ) ) ; 
 } else if ( update instanceof UpdateReactionsUpdate ) { 
 messagesProcessor . onReactionsChanged ( ( ( UpdateReactionsUpdate ) update ) . getPeer ( ) , 
 ( ( UpdateReactionsUpdate ) update ) . getRid ( ) , ( ( UpdateReactionsUpdate ) update ) . getReactions ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java 
 index 0245be1 . . 0a4edd6 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / users / UsersProcessor . java 
 @ @ - 17 , 7 + 17 , 7 @ @ import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . sequence . Processor ; 
 import im . actor . core . modules . contacts . ContactsSyncActor ; 
 import im . actor . core . modules . messaging . actors . DialogsActor ; 
 - import im . actor . core . modules . messaging . actors . GroupedDialogsActor ; 
 + import im . actor . core . modules . messaging . actors . ActiveDialogsActor ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . annotations . Verified ; 
 
 @ @ - 205 , 7 + 205 , 7 @ @ public class UsersProcessor extends AbsModule implements Processor { 
 new DialogsActor . UserChanged ( u ) ) ; 
 if ( context ( ) . getConfiguration ( ) . isEnabledGroupedChatList ( ) ) { 
 context ( ) . getMessagesModule ( ) . getDialogsGroupedActor ( ) . send ( 
 - new GroupedDialogsActor . PeerInformationChanged ( Peer . user ( u . getUid ( ) ) ) ) ; 
 + new ActiveDialogsActor . PeerInformationChanged ( Peer . user ( u . getUid ( ) ) ) ) ; 
 } 
 context ( ) . getContactsModule ( ) . getContactSyncActor ( ) 
 . send ( new ContactsSyncActor . UserChanged ( u ) ) ;
