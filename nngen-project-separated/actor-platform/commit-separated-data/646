BLEU SCORE: 0.12164634345707655

TEST MSG: feat ( android ) : send logs expiring
GENERATED MSG: feat ( webrtc ) : Switching of media stream mode

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidLogProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidLogProvider . java < nl > index 61bb27d . . 4813616 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidLogProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidLogProvider . java < nl > @ @ - 28 , 9 + 28 , 11 @ @ import im . actor . runtime . json . JSONObject ; < nl > < nl > public class AndroidLogProvider implements LogRuntime { < nl > < nl > + public static final int SEND _ LOGS _ EXPIRES = 1000 * 60 * 60 * 3 ; < nl > private static FileHandler fileHandler ; < nl > private static boolean writeLogs ; < nl > private static boolean sendLogs ; < nl > + private static long sendLogsTime ; < nl > private static String sendLogsUrl = null ; < nl > private static SharedPreferences shp ; < nl > private static final OkHttpClient client ; < nl > @ @ - 39 , 6 + 41 , 7 @ @ public class AndroidLogProvider implements LogRuntime { < nl > String name ; < nl > shp = AndroidContext . getContext ( ) . getSharedPreferences ( " properties . ini " , Context . MODE _ PRIVATE ) ; < nl > sendLogs = shp . getBoolean ( " sendLogs " , false ) ; < nl > + sendLogsTime = shp . getLong ( " sendLogsTime " , 0 ) ; < nl > sendLogsUrl = shp . getString ( " sendLogsUrl " , null ) ; < nl > writeLogs = shp . getBoolean ( " writeLogs " , false ) ; < nl > if ( 0 = = Environment . getExternalStorageState ( ) . compareTo ( Environment . MEDIA _ MOUNTED ) ) { < nl > @ @ - 101 , 6 + 104 , 10 @ @ public class AndroidLogProvider implements LogRuntime { < nl > s = s . concat ( " \ n " ) . concat ( level ) . concat ( " " ) . concat ( tag ) . concat ( " : " ) . concat ( msg ) ; < nl > < nl > if ( i = = 19 ) { < nl > + if ( System . currentTimeMillis ( ) - sendLogsTime > SEND _ LOGS _ EXPIRES ) { < nl > + setSendLogs ( null ) ; < nl > + return ; < nl > + } < nl > s = s . concat ( " ` ` ` " ) ; < nl > JSONObject json = new JSONObject ( ) ; < nl > try { < nl > @ @ - 152 , 7 + 159 , 9 @ @ public class AndroidLogProvider implements LogRuntime { < nl > public static void setSendLogs ( String sendLogsUrl ) { < nl > AndroidLogProvider . sendLogs = sendLogsUrl ! = null ; < nl > AndroidLogProvider . sendLogsUrl = sendLogsUrl ; < nl > + AndroidLogProvider . sendLogsTime = sendLogsUrl = = null ? 0 : System . currentTimeMillis ( ) ; < nl > shp . edit ( ) . putString ( " sendLogsUrl " , sendLogsUrl ) . apply ( ) ; < nl > + shp . edit ( ) . putLong ( " sendLogsTime " , sendLogsTime ) . apply ( ) ; < nl > shp . edit ( ) . putBoolean ( " sendLogs " , sendLogs ) . apply ( ) ; < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > index 276d705 . . bea137c 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > @ @ - 88 , 11 + 88 , 8 @ @ class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnec < nl > } < nl > < nl > func addOwnStream ( stream : ARWebRTCMediaStream ) { < nl > - if let audio = stream as ? RTCAudioTrack { < nl > - print ( " addOwnStream " ) < nl > - let mediaStream = peerConnectionFactory . mediaStreamWithLabel ( " ARDAMSa0 " ) < nl > - mediaStream . addAudioTrack ( audio ) < nl > - peerConnection . addStream ( mediaStream ) < nl > + if let str = stream as ? MediaStream { < nl > + peerConnection . addStream ( str . stream ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > index c6215ac . . 1facad3 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java < nl > @ @ - 21 , 6 + 21 , 11 @ @ import im . actor . runtime . webrtc . WebRTCMediaStream ; < nl > import im . actor . runtime . webrtc . WebRTCPeerConnection ; < nl > import im . actor . runtime . webrtc . WebRTCPeerConnectionCallback ; < nl > import im . actor . runtime . webrtc . WebRTCSessionDescription ; < nl > + import im . actor . runtime . webrtc . sdp . SDP ; < nl > + import im . actor . runtime . webrtc . sdp . SDPScheme ; < nl > + import im . actor . runtime . webrtc . sdp . entities . SDPCodec ; < nl > + import im . actor . runtime . webrtc . sdp . entities . SDPMedia ; < nl > + import im . actor . runtime . webrtc . sdp . entities . SDPMediaMode ; < nl > < nl > public class PeerConnectionActor extends ModuleActor { < nl > < nl > @ @ - 113 , 10 + 118 , 9 @ @ public class PeerConnectionActor extends ModuleActor { < nl > } ) . failure ( new Consumer < Exception > ( ) { < nl > @ Override < nl > public void apply ( Exception e ) { < nl > - e . printStackTrace ( ) ; < nl > - / / TODO : Handle It < nl > - < nl > Log . d ( TAG , " preStart : error " ) ; < nl > + e . printStackTrace ( ) ; < nl > + onHandshakeFailure ( ) ; < nl > } < nl > } ) . done ( self ( ) ) ; < nl > } < nl > @ @ - 136 , 7 + 140 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > < nl > Log . d ( TAG , " onOfferNeeded " ) ; < nl > isReady = false ; < nl > - peerConnection . createOffer ( ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > + peerConnection . createOffer ( ) . map ( OPTIMIZE _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > @ Override < nl > public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > return peerConnection . setLocalDescription ( description ) ; < nl > @ @ - 155 , 7 + 159 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > public void apply ( Exception e ) { < nl > Log . d ( TAG , " onOfferNeeded : failure " ) ; < nl > e . printStackTrace ( ) ; < nl > - / / TODO : Handle It < nl > + onHandshakeFailure ( ) ; < nl > } < nl > } ) . done ( self ( ) ) ; < nl > } < nl > @ @ - 183 , 7 + 187 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > return peerConnection . createAnswer ( ) ; < nl > } < nl > - } ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > + } ) . map ( OPTIMIZE _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > @ Override < nl > public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > return peerConnection . setLocalDescription ( description ) ; < nl > @ @ - 197 , 8 + 201 , 9 @ @ public class PeerConnectionActor extends ModuleActor { < nl > } ) . failure ( new Consumer < Exception > ( ) { < nl > @ Override < nl > public void apply ( Exception e ) { < nl > + Log . d ( TAG , " onOffer : failure " ) ; < nl > e . printStackTrace ( ) ; < nl > - / / TODO : Handle It < nl > + onHandshakeFailure ( ) ; < nl > } < nl > } ) . done ( self ( ) ) ; < nl > } < nl > @ @ - 228 , 11 + 233 , 28 @ @ public class PeerConnectionActor extends ModuleActor { < nl > public void apply ( Exception e ) { < nl > Log . d ( TAG , " onAnswer : failure " ) ; < nl > e . printStackTrace ( ) ; < nl > - / / TODO : Handle It < nl > + onHandshakeFailure ( ) ; < nl > } < nl > } ) . done ( self ( ) ) ; < nl > } < nl > < nl > + private void onHandshakeFailure ( ) { < nl > + isReady = false ; < nl > + isReadyForCandidates = false ; < nl > + state = State . CLOSED ; < nl > + if ( peerConnection ! = null ) { < nl > + peerConnection . close ( ) ; < nl > + peerConnection = null ; < nl > + } < nl > + if ( stream ! = null ) { < nl > + stream . close ( ) ; < nl > + stream = null ; < nl > + } < nl > + self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > + < nl > + / / TODO : Notify Root < nl > + } < nl > + < nl > private void onHandShakeCompleted ( ) { < nl > isReady = true ; < nl > isReadyForCandidates = true ; < nl > @ @ - 252 , 6 + 274 , 39 @ @ public class PeerConnectionActor extends ModuleActor { < nl > self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > } < nl > < nl > + / / < nl > + / / Configuration < nl > + / / < nl > + < nl > + private static Function < WebRTCSessionDescription , WebRTCSessionDescription > OPTIMIZE _ SDP < nl > + = new Function < WebRTCSessionDescription , WebRTCSessionDescription > ( ) { < nl > + @ Override < nl > + public WebRTCSessionDescription apply ( WebRTCSessionDescription description ) { < nl > + SDPScheme sdpScheme = SDP . parse ( description . getSdp ( ) ) ; < nl > + < nl > + for ( SDPMedia m : sdpScheme . getMediaLevel ( ) ) { < nl > + < nl > + / / Disabling media streams < nl > + m . setMode ( SDPMediaMode . INACTIVE ) ; < nl > + < nl > + / / Optimizing opus < nl > + if ( " audio " . equals ( m . getType ( ) ) ) { < nl > + for ( SDPCodec codec : m . getCodecs ( ) ) { < nl > + if ( " opus " . equals ( codec . getName ( ) ) ) { < nl > + < nl > + } < nl > + } < nl > + } < nl > + } < nl > + < nl > + return new WebRTCSessionDescription ( description . getType ( ) , sdpScheme . toSDP ( ) ) ; < nl > + } < nl > + } ; < nl > + < nl > + / / < nl > + / / Messages < nl > + / / < nl > + < nl > @ Override < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof OnOffer ) { < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java < nl > index c4c00e3 . . c73258b 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java < nl > @ @ - 7 , 7 + 7 , 7 @ @ import org . jetbrains . annotations . NotNull ; < nl > import im . actor . runtime . WebRTCRuntime ; < nl > import im . actor . runtime . promise . Promise ; < nl > import im . actor . runtime . promise . Promises ; < nl > - import im . actor . runtime . webrtc . WebRTCLocalStream ; < nl > + import im . actor . runtime . webrtc . WebRTCMediaStream ; < nl > import im . actor . runtime . webrtc . WebRTCPeerConnection ; < nl > < nl > public class CocoaWebRTCProxyProvider implements WebRTCRuntime { < nl > @ @ - 30 , 7 + 30 , 7 @ @ public class CocoaWebRTCProxyProvider implements WebRTCRuntime { < nl > < nl > @ NotNull < nl > @ Override < nl > - public Promise < WebRTCLocalStream > getUserAudio ( ) { < nl > + public Promise < WebRTCMediaStream > getUserAudio ( ) { < nl > if ( rtcRuntime = = null ) { < nl > return Promises . failure ( new RuntimeException ( " WebRTC Runtime not set " ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java < nl > index 0eac2ec . . b3786f5 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java < nl > @ @ - 46 , 6 + 46 , 10 @ @ public class SDPMedia { < nl > return mode ; < nl > } < nl > < nl > + public void setMode ( SDPMediaMode mode ) { < nl > + this . mode = mode ; < nl > + } < nl > + < nl > public String toSDP ( ) { < nl > String res = " m = " + type + " " + port + " " + protocol ; < nl > for ( SDPCodec codec : codecs ) {

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidLogProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidLogProvider . java 
 index 61bb27d . . 4813616 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidLogProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidLogProvider . java 
 @ @ - 28 , 9 + 28 , 11 @ @ import im . actor . runtime . json . JSONObject ; 
 
 public class AndroidLogProvider implements LogRuntime { 
 
 + public static final int SEND _ LOGS _ EXPIRES = 1000 * 60 * 60 * 3 ; 
 private static FileHandler fileHandler ; 
 private static boolean writeLogs ; 
 private static boolean sendLogs ; 
 + private static long sendLogsTime ; 
 private static String sendLogsUrl = null ; 
 private static SharedPreferences shp ; 
 private static final OkHttpClient client ; 
 @ @ - 39 , 6 + 41 , 7 @ @ public class AndroidLogProvider implements LogRuntime { 
 String name ; 
 shp = AndroidContext . getContext ( ) . getSharedPreferences ( " properties . ini " , Context . MODE _ PRIVATE ) ; 
 sendLogs = shp . getBoolean ( " sendLogs " , false ) ; 
 + sendLogsTime = shp . getLong ( " sendLogsTime " , 0 ) ; 
 sendLogsUrl = shp . getString ( " sendLogsUrl " , null ) ; 
 writeLogs = shp . getBoolean ( " writeLogs " , false ) ; 
 if ( 0 = = Environment . getExternalStorageState ( ) . compareTo ( Environment . MEDIA _ MOUNTED ) ) { 
 @ @ - 101 , 6 + 104 , 10 @ @ public class AndroidLogProvider implements LogRuntime { 
 s = s . concat ( " \ n " ) . concat ( level ) . concat ( " " ) . concat ( tag ) . concat ( " : " ) . concat ( msg ) ; 
 
 if ( i = = 19 ) { 
 + if ( System . currentTimeMillis ( ) - sendLogsTime > SEND _ LOGS _ EXPIRES ) { 
 + setSendLogs ( null ) ; 
 + return ; 
 + } 
 s = s . concat ( " ` ` ` " ) ; 
 JSONObject json = new JSONObject ( ) ; 
 try { 
 @ @ - 152 , 7 + 159 , 9 @ @ public class AndroidLogProvider implements LogRuntime { 
 public static void setSendLogs ( String sendLogsUrl ) { 
 AndroidLogProvider . sendLogs = sendLogsUrl ! = null ; 
 AndroidLogProvider . sendLogsUrl = sendLogsUrl ; 
 + AndroidLogProvider . sendLogsTime = sendLogsUrl = = null ? 0 : System . currentTimeMillis ( ) ; 
 shp . edit ( ) . putString ( " sendLogsUrl " , sendLogsUrl ) . apply ( ) ; 
 + shp . edit ( ) . putLong ( " sendLogsTime " , sendLogsTime ) . apply ( ) ; 
 shp . edit ( ) . putBoolean ( " sendLogs " , sendLogs ) . apply ( ) ; 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 index 276d705 . . bea137c 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 @ @ - 88 , 11 + 88 , 8 @ @ class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnec 
 } 
 
 func addOwnStream ( stream : ARWebRTCMediaStream ) { 
 - if let audio = stream as ? RTCAudioTrack { 
 - print ( " addOwnStream " ) 
 - let mediaStream = peerConnectionFactory . mediaStreamWithLabel ( " ARDAMSa0 " ) 
 - mediaStream . addAudioTrack ( audio ) 
 - peerConnection . addStream ( mediaStream ) 
 + if let str = stream as ? MediaStream { 
 + peerConnection . addStream ( str . stream ) 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 index c6215ac . . 1facad3 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / PeerConnectionActor . java 
 @ @ - 21 , 6 + 21 , 11 @ @ import im . actor . runtime . webrtc . WebRTCMediaStream ; 
 import im . actor . runtime . webrtc . WebRTCPeerConnection ; 
 import im . actor . runtime . webrtc . WebRTCPeerConnectionCallback ; 
 import im . actor . runtime . webrtc . WebRTCSessionDescription ; 
 + import im . actor . runtime . webrtc . sdp . SDP ; 
 + import im . actor . runtime . webrtc . sdp . SDPScheme ; 
 + import im . actor . runtime . webrtc . sdp . entities . SDPCodec ; 
 + import im . actor . runtime . webrtc . sdp . entities . SDPMedia ; 
 + import im . actor . runtime . webrtc . sdp . entities . SDPMediaMode ; 
 
 public class PeerConnectionActor extends ModuleActor { 
 
 @ @ - 113 , 10 + 118 , 9 @ @ public class PeerConnectionActor extends ModuleActor { 
 } ) . failure ( new Consumer < Exception > ( ) { 
 @ Override 
 public void apply ( Exception e ) { 
 - e . printStackTrace ( ) ; 
 - / / TODO : Handle It 
 - 
 Log . d ( TAG , " preStart : error " ) ; 
 + e . printStackTrace ( ) ; 
 + onHandshakeFailure ( ) ; 
 } 
 } ) . done ( self ( ) ) ; 
 } 
 @ @ - 136 , 7 + 140 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 
 Log . d ( TAG , " onOfferNeeded " ) ; 
 isReady = false ; 
 - peerConnection . createOffer ( ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 + peerConnection . createOffer ( ) . map ( OPTIMIZE _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 @ Override 
 public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 return peerConnection . setLocalDescription ( description ) ; 
 @ @ - 155 , 7 + 159 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 public void apply ( Exception e ) { 
 Log . d ( TAG , " onOfferNeeded : failure " ) ; 
 e . printStackTrace ( ) ; 
 - / / TODO : Handle It 
 + onHandshakeFailure ( ) ; 
 } 
 } ) . done ( self ( ) ) ; 
 } 
 @ @ - 183 , 7 + 187 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 return peerConnection . createAnswer ( ) ; 
 } 
 - } ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 + } ) . map ( OPTIMIZE _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 @ Override 
 public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 return peerConnection . setLocalDescription ( description ) ; 
 @ @ - 197 , 8 + 201 , 9 @ @ public class PeerConnectionActor extends ModuleActor { 
 } ) . failure ( new Consumer < Exception > ( ) { 
 @ Override 
 public void apply ( Exception e ) { 
 + Log . d ( TAG , " onOffer : failure " ) ; 
 e . printStackTrace ( ) ; 
 - / / TODO : Handle It 
 + onHandshakeFailure ( ) ; 
 } 
 } ) . done ( self ( ) ) ; 
 } 
 @ @ - 228 , 11 + 233 , 28 @ @ public class PeerConnectionActor extends ModuleActor { 
 public void apply ( Exception e ) { 
 Log . d ( TAG , " onAnswer : failure " ) ; 
 e . printStackTrace ( ) ; 
 - / / TODO : Handle It 
 + onHandshakeFailure ( ) ; 
 } 
 } ) . done ( self ( ) ) ; 
 } 
 
 + private void onHandshakeFailure ( ) { 
 + isReady = false ; 
 + isReadyForCandidates = false ; 
 + state = State . CLOSED ; 
 + if ( peerConnection ! = null ) { 
 + peerConnection . close ( ) ; 
 + peerConnection = null ; 
 + } 
 + if ( stream ! = null ) { 
 + stream . close ( ) ; 
 + stream = null ; 
 + } 
 + self ( ) . send ( PoisonPill . INSTANCE ) ; 
 + 
 + / / TODO : Notify Root 
 + } 
 + 
 private void onHandShakeCompleted ( ) { 
 isReady = true ; 
 isReadyForCandidates = true ; 
 @ @ - 252 , 6 + 274 , 39 @ @ public class PeerConnectionActor extends ModuleActor { 
 self ( ) . send ( PoisonPill . INSTANCE ) ; 
 } 
 
 + / / 
 + / / Configuration 
 + / / 
 + 
 + private static Function < WebRTCSessionDescription , WebRTCSessionDescription > OPTIMIZE _ SDP 
 + = new Function < WebRTCSessionDescription , WebRTCSessionDescription > ( ) { 
 + @ Override 
 + public WebRTCSessionDescription apply ( WebRTCSessionDescription description ) { 
 + SDPScheme sdpScheme = SDP . parse ( description . getSdp ( ) ) ; 
 + 
 + for ( SDPMedia m : sdpScheme . getMediaLevel ( ) ) { 
 + 
 + / / Disabling media streams 
 + m . setMode ( SDPMediaMode . INACTIVE ) ; 
 + 
 + / / Optimizing opus 
 + if ( " audio " . equals ( m . getType ( ) ) ) { 
 + for ( SDPCodec codec : m . getCodecs ( ) ) { 
 + if ( " opus " . equals ( codec . getName ( ) ) ) { 
 + 
 + } 
 + } 
 + } 
 + } 
 + 
 + return new WebRTCSessionDescription ( description . getType ( ) , sdpScheme . toSDP ( ) ) ; 
 + } 
 + } ; 
 + 
 + / / 
 + / / Messages 
 + / / 
 + 
 @ Override 
 public void onReceive ( Object message ) { 
 if ( message instanceof OnOffer ) { 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java 
 index c4c00e3 . . c73258b 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaWebRTCProxyProvider . java 
 @ @ - 7 , 7 + 7 , 7 @ @ import org . jetbrains . annotations . NotNull ; 
 import im . actor . runtime . WebRTCRuntime ; 
 import im . actor . runtime . promise . Promise ; 
 import im . actor . runtime . promise . Promises ; 
 - import im . actor . runtime . webrtc . WebRTCLocalStream ; 
 + import im . actor . runtime . webrtc . WebRTCMediaStream ; 
 import im . actor . runtime . webrtc . WebRTCPeerConnection ; 
 
 public class CocoaWebRTCProxyProvider implements WebRTCRuntime { 
 @ @ - 30 , 7 + 30 , 7 @ @ public class CocoaWebRTCProxyProvider implements WebRTCRuntime { 
 
 @ NotNull 
 @ Override 
 - public Promise < WebRTCLocalStream > getUserAudio ( ) { 
 + public Promise < WebRTCMediaStream > getUserAudio ( ) { 
 if ( rtcRuntime = = null ) { 
 return Promises . failure ( new RuntimeException ( " WebRTC Runtime not set " ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java 
 index 0eac2ec . . b3786f5 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / webrtc / sdp / entities / SDPMedia . java 
 @ @ - 46 , 6 + 46 , 10 @ @ public class SDPMedia { 
 return mode ; 
 } 
 
 + public void setMode ( SDPMediaMode mode ) { 
 + this . mode = mode ; 
 + } 
 + 
 public String toSDP ( ) { 
 String res = " m = " + type + " " + port + " " + protocol ; 
 for ( SDPCodec codec : codecs ) {
