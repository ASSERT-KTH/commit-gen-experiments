BLEU SCORE: 0.1702602472176709

TEST MSG: fix ( server : calls ) : send RpcError if call not started in Signal and Progress
GENERATED MSG: fix ( server : profile ) : added EditPreferredLanguages

TEST DIFF (one line): diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala < nl > index 75ed780 . . 81f398d 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala < nl > @ @ - 54 , 9 + 54 , 11 @ @ final class WebrtcServiceImpl ( implicit system : ActorSystem , sessionRegion : Sessi < nl > < nl > override def jhandleCallInProgress ( callId : Long , timeout : Int , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = < nl > authorized ( clientData ) { client ⇒ < nl > - for { < nl > + ( for { < nl > _ ← webrtcExt . sendCallInProgress ( client . userId , callId , timeout ) < nl > - } yield Ok ( ResponseVoid ) < nl > + } yield Ok ( ResponseVoid ) ) recover { < nl > + case WebrtcCallErrors . CallNotStarted ⇒ Error ( WebrtcErrors . CallNotStarted ) < nl > + } < nl > } < nl > < nl > override def jhandleSubscribeToCalls ( clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = < nl > @ @ - 69 , 8 + 71 , 10 @ @ final class WebrtcServiceImpl ( implicit system : ActorSystem , sessionRegion : Sessi < nl > < nl > override def jhandleSendCallSignal ( callId : Long , content : Array [ Byte ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = < nl > authorized ( clientData ) { client ⇒ < nl > - for { < nl > + ( for { < nl > _ ← webrtcExt . sendCallSignal ( client . userId , callId , content ) < nl > - } yield Ok ( ResponseVoid ) < nl > + } yield Ok ( ResponseVoid ) ) recover { < nl > + case WebrtcCallErrors . CallNotStarted ⇒ Error ( WebrtcErrors . CallNotStarted ) < nl > + } < nl > } < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala < nl > index b2581b2 . . e4b1eb4 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala < nl > @ @ - 146 , 5 + 146 , 13 @ @ class ProfileServiceImpl ( ) ( < nl > db . run ( toDBIOAction ( authorizedAction ) ) < nl > } < nl > < nl > - override def jhandleEditMyPreferredLanguages ( preferredLanguages : Vector [ String ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = ? ? ? < nl > + override def jhandleEditMyPreferredLanguages ( preferredLanguages : Vector [ String ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { < nl > + val authorizedAction = requireAuth ( clientData ) map { implicit client ⇒ < nl > + ( for { < nl > + SeqState ( seq , state ) ← fromFuture ( userExt . changePreferredLanguages ( client . userId , client . authId , preferredLanguages ) ) < nl > + } yield ResponseSeq ( seq , state . toByteArray ) ) . run < nl > + } < nl > + < nl > + db . run ( toDBIOAction ( authorizedAction ) ) < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > index 1389bdc . . cf71e8e 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > @ @ - 17 , 9 + 17 , 8 @ @ import im . actor . api . rpc . misc . { ResponseBool , ResponseSeq } < nl > import im . actor . server . _ < nl > import im . actor . server . api . rpc . service . files . FilesServiceImpl < nl > import im . actor . server . api . rpc . service . profile . { ProfileErrors , ProfileServiceImpl } < nl > - import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } < nl > < nl > - class ProfileServiceSpec < nl > + final class ProfileServiceSpec < nl > extends BaseAppSuite < nl > with ImplicitFileStorageAdapter < nl > with ImplicitSessionRegionProxy < nl > @ @ - 34 , 6 + 33 , 10 @ @ class ProfileServiceSpec < nl > < nl > " EditAbout " should " set valid about value to user " in profile . e5 < nl > < nl > + " ChangeMyTimeZone " should " change time zone " in profile . timeZone < nl > + < nl > + " ChangeMyPreferredLanguages " should " change preferred languages " in profile . preferredLanguages < nl > + < nl > implicit lazy val service = new ProfileServiceImpl < nl > implicit lazy val filesService = new FilesServiceImpl < nl > < nl > @ @ - 212 , 6 + 215 , 26 @ @ class ProfileServiceSpec < nl > < nl > } < nl > < nl > - } < nl > + def timeZone ( ) = { < nl > + val ( user , authId , _ ) = createUser ( ) < nl > + < nl > + implicit val clientData = ClientData ( authId , 1 , Some ( user . id ) ) < nl > + whenReady ( service . handleEditMyTimeZone ( " Africa / Addis _ Ababa " ) ) { resp ⇒ < nl > + resp should matchPattern { < nl > + case Ok ( _ : ResponseSeq ) ⇒ < nl > + } < nl > + } < nl > + } < nl > + < nl > + def preferredLanguages ( ) = { < nl > + val ( user , authId , _ ) = createUser ( ) < nl > < nl > + implicit val clientData = ClientData ( authId , 1 , Some ( user . id ) ) < nl > + whenReady ( service . handleEditMyPreferredLanguages ( Vector ( " pt - BR " , " en - US " , " ru " ) ) ) { resp ⇒ < nl > + resp should matchPattern { < nl > + case Ok ( _ : ResponseSeq ) ⇒ < nl > + } < nl > + } < nl > + } < nl > + } < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala 
 index 75ed780 . . 81f398d 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala 
 @ @ - 54 , 9 + 54 , 11 @ @ final class WebrtcServiceImpl ( implicit system : ActorSystem , sessionRegion : Sessi 
 
 override def jhandleCallInProgress ( callId : Long , timeout : Int , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = 
 authorized ( clientData ) { client ⇒ 
 - for { 
 + ( for { 
 _ ← webrtcExt . sendCallInProgress ( client . userId , callId , timeout ) 
 - } yield Ok ( ResponseVoid ) 
 + } yield Ok ( ResponseVoid ) ) recover { 
 + case WebrtcCallErrors . CallNotStarted ⇒ Error ( WebrtcErrors . CallNotStarted ) 
 + } 
 } 
 
 override def jhandleSubscribeToCalls ( clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = 
 @ @ - 69 , 8 + 71 , 10 @ @ final class WebrtcServiceImpl ( implicit system : ActorSystem , sessionRegion : Sessi 
 
 override def jhandleSendCallSignal ( callId : Long , content : Array [ Byte ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = 
 authorized ( clientData ) { client ⇒ 
 - for { 
 + ( for { 
 _ ← webrtcExt . sendCallSignal ( client . userId , callId , content ) 
 - } yield Ok ( ResponseVoid ) 
 + } yield Ok ( ResponseVoid ) ) recover { 
 + case WebrtcCallErrors . CallNotStarted ⇒ Error ( WebrtcErrors . CallNotStarted ) 
 + } 
 } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala 
 index b2581b2 . . e4b1eb4 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / profile / ProfileServiceImpl . scala 
 @ @ - 146 , 5 + 146 , 13 @ @ class ProfileServiceImpl ( ) ( 
 db . run ( toDBIOAction ( authorizedAction ) ) 
 } 
 
 - override def jhandleEditMyPreferredLanguages ( preferredLanguages : Vector [ String ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = ? ? ? 
 + override def jhandleEditMyPreferredLanguages ( preferredLanguages : Vector [ String ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { 
 + val authorizedAction = requireAuth ( clientData ) map { implicit client ⇒ 
 + ( for { 
 + SeqState ( seq , state ) ← fromFuture ( userExt . changePreferredLanguages ( client . userId , client . authId , preferredLanguages ) ) 
 + } yield ResponseSeq ( seq , state . toByteArray ) ) . run 
 + } 
 + 
 + db . run ( toDBIOAction ( authorizedAction ) ) 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 index 1389bdc . . cf71e8e 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 @ @ - 17 , 9 + 17 , 8 @ @ import im . actor . api . rpc . misc . { ResponseBool , ResponseSeq } 
 import im . actor . server . _ 
 import im . actor . server . api . rpc . service . files . FilesServiceImpl 
 import im . actor . server . api . rpc . service . profile . { ProfileErrors , ProfileServiceImpl } 
 - import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } 
 
 - class ProfileServiceSpec 
 + final class ProfileServiceSpec 
 extends BaseAppSuite 
 with ImplicitFileStorageAdapter 
 with ImplicitSessionRegionProxy 
 @ @ - 34 , 6 + 33 , 10 @ @ class ProfileServiceSpec 
 
 " EditAbout " should " set valid about value to user " in profile . e5 
 
 + " ChangeMyTimeZone " should " change time zone " in profile . timeZone 
 + 
 + " ChangeMyPreferredLanguages " should " change preferred languages " in profile . preferredLanguages 
 + 
 implicit lazy val service = new ProfileServiceImpl 
 implicit lazy val filesService = new FilesServiceImpl 
 
 @ @ - 212 , 6 + 215 , 26 @ @ class ProfileServiceSpec 
 
 } 
 
 - } 
 + def timeZone ( ) = { 
 + val ( user , authId , _ ) = createUser ( ) 
 + 
 + implicit val clientData = ClientData ( authId , 1 , Some ( user . id ) ) 
 + whenReady ( service . handleEditMyTimeZone ( " Africa / Addis _ Ababa " ) ) { resp ⇒ 
 + resp should matchPattern { 
 + case Ok ( _ : ResponseSeq ) ⇒ 
 + } 
 + } 
 + } 
 + 
 + def preferredLanguages ( ) = { 
 + val ( user , authId , _ ) = createUser ( ) 
 
 + implicit val clientData = ClientData ( authId , 1 , Some ( user . id ) ) 
 + whenReady ( service . handleEditMyPreferredLanguages ( Vector ( " pt - BR " , " en - US " , " ru " ) ) ) { resp ⇒ 
 + resp should matchPattern { 
 + case Ok ( _ : ResponseSeq ) ⇒ 
 + } 
 + } 
 + } 
 + } 
 }
