BLEU SCORE: 0.07933493800053908

TEST MSG: fix ( core ) : Better broken closure work - around
GENERATED MSG: feat ( ios + core ) : Integrated Wake Locks , passing call id from PuskKit to core

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java < nl > index d623d48 . . b366101 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java < nl > @ @ - 24 , 12 + 24 , 12 @ @ import im . actor . core . network . RpcException ; < nl > import im . actor . core . modules . ModuleActor ; < nl > import im . actor . runtime . * ; < nl > import im . actor . runtime . Runtime ; < nl > - import im . actor . runtime . actors . Actor ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . Cancellable ; < nl > - import im . actor . runtime . function . Constructor ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > import im . actor . runtime . function . Consumer ; < nl > import im . actor . runtime . power . WakeLock ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > < nl > public class SequenceActor extends ModuleActor { < nl > < nl > @ @ - 37 , 6 + 37 , 9 @ @ public class SequenceActor extends ModuleActor { < nl > return ( ) - > new SequenceActor ( context ) ; < nl > } < nl > < nl > + / / Do Not Remove ! WorkAround for missing j2objc translator include < nl > + private static final Void DUMB = null ; < nl > + < nl > private static final String TAG = " Updates " ; < nl > private static final int INVALIDATE _ GAP = 2000 ; / / 2 Secs < nl > private static final int INVALIDATE _ MAX _ SEC _ HOLE = 10 ; < nl > @ @ - 132 , 12 + 135 , 10 @ @ public class SequenceActor extends ModuleActor { < nl > < nl > Log . d ( TAG , " Handling update # " + seq ) ; < nl > startWakeLock ( ) ; < nl > - handler . onSeqUpdate ( type , body , users , groups ) . then ( new Consumer < SequenceHandlerActor . UpdateProcessed > ( ) { < nl > - @ Override < nl > - public void apply ( SequenceHandlerActor . UpdateProcessed updateProcessed ) { < nl > - Log . d ( TAG , " Handling update ended # " + seq ) ; < nl > - onUpdatesApplied ( seq , state ) ; < nl > - } < nl > + < nl > + handler . onSeqUpdate ( type , body , users , groups ) . then ( aVoid - > { < nl > + Log . d ( TAG , " Handling update ended # " + seq ) ; < nl > + onUpdatesApplied ( seq , state ) ; < nl > } ) . failure ( e - > { < nl > SequenceActor . this . seq = finishedSeq ; < nl > SequenceActor . this . state = finishedState ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java < nl > index 5c6c039 . . 83d3e09 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java < nl > @ @ - 23 , 6 + 23 , 7 @ @ import im . actor . core . network . parser . Update ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . Runtime ; < nl > import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > import im . actor . runtime . function . Constructor ; < nl > import im . actor . runtime . function . Consumer ; < nl > import im . actor . runtime . promise . Promise ; < nl > @ @ - 81 , 9 + 82 , 9 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > afterApply . run ( ) ; < nl > } < nl > < nl > - private Promise < UpdateProcessed > onSeqUpdate ( int type , byte [ ] body , < nl > - @ Nullable List < ApiUser > users , < nl > - @ Nullable List < ApiGroup > groups ) throws Exception { < nl > + private Promise < Void > onSeqUpdate ( int type , byte [ ] body , < nl > + @ Nullable List < ApiUser > users , < nl > + @ Nullable List < ApiGroup > groups ) throws Exception { < nl > < nl > Update update ; < nl > try { < nl > @ @ - 91 , 7 + 92 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > } catch ( IOException e ) { < nl > Log . w ( TAG , " Unable to parse update : ignoring " ) ; < nl > Log . e ( TAG , e ) ; < nl > - return Promises . success ( new UpdateProcessed ( ) ) ; < nl > + return Promises . success ( Void . INSTANCE ) ; < nl > } < nl > < nl > if ( groups = = null | | users = = null ) { < nl > @ @ - 115 , 10 + 116 , 10 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > } < nl > < nl > / / Log . d ( TAG , " Processing update success " ) ; < nl > - return Promises . success ( new UpdateProcessed ( ) ) ; < nl > + return Promises . success ( Void . INSTANCE ) ; < nl > } < nl > < nl > - private Promise < UpdateProcessed > onDifferenceUpdate ( final ResponseGetDifference difference ) { < nl > + private Promise < Void > onDifferenceUpdate ( final ResponseGetDifference difference ) { < nl > long parseStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; < nl > final ArrayList < Update > updates = new ArrayList < > ( ) ; < nl > for ( ApiUpdateContainer u : difference . getUpdates ( ) ) { < nl > @ @ - 157 , 7 + 158 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > if ( pendingGroupPeers . size ( ) > 0 | | pendingUserPeers . size ( ) > 0 ) { < nl > Log . d ( TAG , " Downloading pending peers ( users : " + pendingUserPeers . size ( ) + " , groups : " + pendingGroupPeers . size ( ) + " ) " ) ; < nl > isUpdating = true ; < nl > - return new Promise < > ( ( PromiseFunc < UpdateProcessed > ) resolver - > < nl > + return new Promise < > ( ( PromiseFunc < Void > ) resolver - > < nl > api ( new RequestGetReferencedEntitites ( pendingUserPeers , pendingGroupPeers ) ) < nl > . then ( responseGetReferencedEntitites - > { < nl > Log . d ( TAG , " Pending peers downloaded " ) ; < nl > @ @ - 166 , 7 + 167 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > long applyStart = Runtime . getCurrentTime ( ) ; < nl > processor . applyDifferenceUpdate ( difference . getUsers ( ) , difference . getGroups ( ) , updates ) ; < nl > Log . d ( TAG , " Difference applied in " + ( Runtime . getCurrentTime ( ) - applyStart ) + " ms " ) ; < nl > - resolver . result ( new UpdateProcessed ( ) ) ; < nl > + resolver . result ( Void . INSTANCE ) ; < nl > unstashAll ( ) ; < nl > isUpdating = false ; < nl > } ) < nl > @ @ - 179 , 7 + 180 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > long applyStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; < nl > processor . applyDifferenceUpdate ( difference . getUsers ( ) , difference . getGroups ( ) , updates ) ; < nl > Log . d ( TAG , " Difference applied in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - applyStart ) + " ms " ) ; < nl > - return Promises . success ( new UpdateProcessed ( ) ) ; < nl > + return Promises . success ( Void . INSTANCE ) ; < nl > } < nl > } < nl > < nl > @ @ - 256 , 7 + 257 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class SeqUpdate implements AskMessage < UpdateProcessed > { < nl > + public static class SeqUpdate implements AskMessage < Void > { < nl > < nl > private int type ; < nl > private byte [ ] body ; < nl > @ @ - 294 , 7 + 295 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > - public static class DifferenceUpdate implements AskMessage < UpdateProcessed > { < nl > + public static class DifferenceUpdate implements AskMessage < Void > { < nl > private ResponseGetDifference difference ; < nl > < nl > public DifferenceUpdate ( ResponseGetDifference difference ) { < nl > @ @ - 305 , 8 + 306 , 4 @ @ public class SequenceHandlerActor extends ModuleActor { < nl > return difference ; < nl > } < nl > } < nl > - < nl > - public static class UpdateProcessed { < nl > - < nl > - } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerInt . java < nl > index 85a7c44 . . d23712a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerInt . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerInt . java < nl > @ @ - 11 , 6 + 11 , 7 @ @ import im . actor . core . modules . sequence . internal . InternalUpdate ; < nl > import im . actor . core . modules . sequence . internal . RelatedResponse ; < nl > import im . actor . runtime . actors . ActorInterface ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . actors . messages . Void ; < nl > import im . actor . runtime . promise . Promise ; < nl > import im . actor . core . modules . sequence . SequenceHandlerActor . * ; < nl > < nl > @ @ - 20 , 13 + 21 , 13 @ @ public class SequenceHandlerInt extends ActorInterface { < nl > super ( dest ) ; < nl > } < nl > < nl > - public Promise < UpdateProcessed > onSeqUpdate ( int updateKey , byte [ ] data , < nl > - @ Nullable List < ApiUser > users , < nl > - @ Nullable List < ApiGroup > groups ) { < nl > + public Promise < Void > onSeqUpdate ( int updateKey , byte [ ] data , < nl > + @ Nullable List < ApiUser > users , < nl > + @ Nullable List < ApiGroup > groups ) { < nl > return ask ( new SeqUpdate ( updateKey , data , users , groups ) ) ; < nl > } < nl > < nl > - public Promise < UpdateProcessed > onDifferenceUpdate ( ResponseGetDifference difference ) { < nl > + public Promise < Void > onDifferenceUpdate ( ResponseGetDifference difference ) { < nl > return ask ( new DifferenceUpdate ( difference ) ) ; < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > index 58a48b5 . . 7b136d7 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > @ @ - 342 , 7 + 342 , 6 @ @ import PushKit < nl > @ objc public func pushRegistry ( registry : PKPushRegistry ! , didUpdatePushCredentials credentials : PKPushCredentials ! , forType type : String ! ) { < nl > if ( type = = PKPushTypeVoIP ) { < nl > let tokenString = " \ ( credentials . token ) " . replace ( " " , dest : " " ) . replace ( " < " , dest : " " ) . replace ( " > " , dest : " " ) < nl > - print ( " PushKit : \ ( tokenString ) " ) < nl > pushRegisterKitToken ( tokenString ) < nl > } < nl > } < nl > @ @ - 355 , 7 + 354 , 10 @ @ import PushKit < nl > < nl > @ objc public func pushRegistry ( registry : PKPushRegistry ! , didReceiveIncomingPushWithPayload payload : PKPushPayload ! , forType type : String ! ) { < nl > if ( type = = PKPushTypeVoIP ) { < nl > - print ( " PushKit Payload : \ ( payload ) " ) < nl > + let aps = payload . dictionaryPayload [ " aps " ] as ! [ NSString : AnyObject ] < nl > + if let callId = aps [ " callId " ] as ? String { < nl > + Actor . checkCall ( jlong ( callId ) ! ) < nl > + } < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 53a7cd1 . . d868238 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 1072 , 6 + 1072 , 18 @ @ public class Messenger { < nl > } < nl > } < nl > < nl > + / * * < nl > + * Checking incoming call from push notification < nl > + * < nl > + * @ param callId Call Id < nl > + * / < nl > + @ ObjectiveCName ( " checkCall : " ) < nl > + public void checkCall ( long callId ) { < nl > + if ( modules . getCallsModule ( ) ! = null ) { < nl > + modules . getCallsModule ( ) . checkCall ( callId ) ; < nl > + } < nl > + } < nl > + < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Peer operations < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index 59a2d11 . . f544d1d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 14 , 12 + 14 , 14 @ @ import im . actor . core . viewmodel . CallVM ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . runtime . actors . messages . PoisonPill ; < nl > import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . power . WakeLock ; < nl > < nl > import static im . actor . core . modules . internal . messages . entity . EntityConverter . convert ; < nl > < nl > public class CallActor extends AbsCallActor { < nl > < nl > private final boolean isMaster ; < nl > + private final WakeLock wakeLock ; < nl > private long callId ; < nl > private Peer peer ; < nl > private CallVM callVM ; < nl > @ @ - 29 , 16 + 31 , 18 @ @ public class CallActor extends AbsCallActor { < nl > private boolean isAnswered ; < nl > private boolean isRejected ; < nl > < nl > - public CallActor ( long callId , ModuleContext context ) { < nl > + public CallActor ( long callId , WakeLock wakeLock , ModuleContext context ) { < nl > super ( context ) ; < nl > + this . wakeLock = wakeLock ; < nl > this . isMaster = false ; < nl > this . callId = callId ; < nl > this . isAnswered = false ; < nl > this . isActive = false ; < nl > } < nl > < nl > - public CallActor ( Peer peer , CommandCallback < Long > callback , ModuleContext context ) { < nl > + public CallActor ( Peer peer , CommandCallback < Long > callback , WakeLock wakeLock , ModuleContext context ) { < nl > super ( context ) ; < nl > + this . wakeLock = wakeLock ; < nl > this . isMaster = true ; < nl > this . callback = callback ; < nl > this . peer = peer ; < nl > @ @ - 154 , 6 + 158 , 7 @ @ public class CallActor extends AbsCallActor { < nl > if ( callId ! = 0 ) { < nl > callManager . send ( new CallManagerActor . OnCallEnded ( callId ) , self ( ) ) ; < nl > } < nl > + wakeLock . releaseLock ( ) ; < nl > } < nl > < nl > / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > index 525b26a . . 0194b2a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 11 , 11 + 11 , 13 @ @ import im . actor . core . providers . CallsProvider ; < nl > import im . actor . core . util . RandomUtils ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . runtime . * ; < nl > + import im . actor . runtime . Runtime ; < nl > import im . actor . runtime . actors . Actor ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . actors . messages . PoisonPill ; < nl > import im . actor . runtime . function . Constructor ; < nl > + import im . actor . runtime . power . WakeLock ; < nl > < nl > public class CallManagerActor extends ModuleActor { < nl > < nl > @ @ - 70 , 10 + 72 , 11 @ @ public class CallManagerActor extends ModuleActor { < nl > / / < nl > / / Spawning new Actor for call < nl > / / < nl > + final WakeLock wakeLock = Runtime . makeWakeLock ( ) ; < nl > system ( ) . actorOf ( " actor / master / " + RandomUtils . nextRid ( ) , new ActorCreator ( ) { < nl > @ Override < nl > public Actor create ( ) { < nl > - return new CallActor ( peer , callback , context ( ) ) ; < nl > + return new CallActor ( peer , callback , wakeLock , context ( ) ) ; < nl > } < nl > } ) ; < nl > } < nl > @ @ - 118 , 24 + 121 , 31 @ @ public class CallManagerActor extends ModuleActor { < nl > / / Incoming call < nl > / / < nl > < nl > - private void onIncomingCall ( final long callId ) { < nl > + private void onIncomingCall ( final long callId , WakeLock wakeLock ) { < nl > Log . d ( TAG , " onIncomingCall ( " + callId + " ) " ) ; < nl > < nl > / / < nl > / / Filter double updates about incoming call < nl > / / < nl > if ( handledCalls . contains ( callId ) ) { < nl > + if ( wakeLock ! = null ) { < nl > + wakeLock . releaseLock ( ) ; < nl > + } < nl > return ; < nl > } < nl > handledCalls . add ( callId ) ; < nl > + if ( wakeLock = = null ) { < nl > + wakeLock = Runtime . makeWakeLock ( ) ; < nl > + } < nl > < nl > / / < nl > / / Spawning new Actor for call < nl > / / < nl > - system ( ) . actorOf ( " actor / slave / " + RandomUtils . nextRid ( ) , new ActorCreator ( ) { < nl > + final WakeLock finalWakeLock = wakeLock ; < nl > + system ( ) . actorOf ( " actor / call " + RandomUtils . nextRid ( ) , new ActorCreator ( ) { < nl > @ Override < nl > public Actor create ( ) { < nl > - return new CallActor ( callId , context ( ) ) ; < nl > + return new CallActor ( callId , finalWakeLock , context ( ) ) ; < nl > } < nl > } ) ; < nl > } < nl > @ @ - 306 , 7 + 316 , 10 @ @ public class CallManagerActor extends ModuleActor { < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof OnIncomingCall ) { < nl > OnIncomingCall call = ( OnIncomingCall ) message ; < nl > - onIncomingCall ( call . getCallId ( ) ) ; < nl > + onIncomingCall ( call . getCallId ( ) , null ) ; < nl > + } else if ( message instanceof OnIncomingCallLocked ) { < nl > + OnIncomingCallLocked locked = ( OnIncomingCallLocked ) message ; < nl > + onIncomingCall ( locked . getCallId ( ) , locked . getWakeLock ( ) ) ; < nl > } else if ( message instanceof OnIncomingCallHandled ) { < nl > OnIncomingCallHandled incomingCallHandled = ( OnIncomingCallHandled ) message ; < nl > onIncomingCallHandled ( incomingCallHandled . getCallId ( ) ) ; < nl > @ @ - 352 , 6 + 365 , 25 @ @ public class CallManagerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > + public static class OnIncomingCallLocked { < nl > + < nl > + private long callId ; < nl > + private WakeLock wakeLock ; < nl > + < nl > + public OnIncomingCallLocked ( long callId , WakeLock wakeLock ) { < nl > + this . callId = callId ; < nl > + this . wakeLock = wakeLock ; < nl > + } < nl > + < nl > + public long getCallId ( ) { < nl > + return callId ; < nl > + } < nl > + < nl > + public WakeLock getWakeLock ( ) { < nl > + return wakeLock ; < nl > + } < nl > + } < nl > + < nl > public static class OnIncomingCallHandled { < nl > < nl > private long callId ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > index fb0d93d . . 745d76f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . core . providers . CallsProvider ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . viewmodel . Command ; < nl > + import im . actor . runtime . * ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > < nl > import static im . actor . runtime . actors . ActorSystem . system ; < nl > @ @ - 44 , 6 + 45 , 10 @ @ public class CallsModule extends AbsModule { < nl > return callManager ; < nl > } < nl > < nl > + public void checkCall ( long callId ) { < nl > + callManager . send ( new CallManagerActor . OnIncomingCallLocked ( callId , im . actor . runtime . Runtime . makeWakeLock ( ) ) ) ; < nl > + } < nl > + < nl > public void probablyEndCall ( ) { < nl > callManager . send ( new CallManagerActor . ProbablyEndCall ( ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > index 4f9f421 . . 94e71f1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > @ @ - 9 , 6 + 9 , 7 @ @ import org . jetbrains . annotations . Nullable ; < nl > < nl > import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > + import java . util . HashMap ; < nl > import java . util . List ; < nl > < nl > import im . actor . core . api . ApiDocumentExVoice ; < nl > @ @ - 59 , 8 + 60 , 10 @ @ import im . actor . core . util . ModuleActor ; < nl > import im . actor . core . util . RandomUtils ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > - import im . actor . runtime . Storage ; < nl > + import im . actor . runtime . * ; < nl > + import im . actor . runtime . Runtime ; < nl > import im . actor . runtime . actors . ask . AskCallback ; < nl > + import im . actor . runtime . power . WakeLock ; < nl > < nl > public class SenderActor extends ModuleActor { < nl > < nl > @ @ - 69 , 6 + 72 , 7 @ @ public class SenderActor extends ModuleActor { < nl > private PendingMessagesStorage pendingMessages ; < nl > < nl > private long lastSendDate = 0 ; < nl > + private HashMap < Long , WakeLock > fileUplaodingWakeLocks = new HashMap < > ( ) ; < nl > < nl > public SenderActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 321 , 6 + 325 , 7 @ @ public class SenderActor extends ModuleActor { < nl > } < nl > < nl > private void performUploadFile ( long rid , String descriptor , String fileName ) { < nl > + fileUplaodingWakeLocks . put ( rid , Runtime . makeWakeLock ( ) ) ; < nl > context ( ) . getFilesModule ( ) . requestUpload ( rid , descriptor , fileName , self ( ) ) ; < nl > } < nl > < nl > @ @ - 354 , 8 + 359 , 8 @ @ public class SenderActor extends ModuleActor { < nl > < nl > pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( msg . getPeer ( ) , msg . getRid ( ) , nContent ) ) ; < nl > context ( ) . getMessagesModule ( ) . getConversationActor ( msg . getPeer ( ) ) . send ( new ConversationActor . MessageContentUpdated ( msg . getRid ( ) , nContent ) ) ; < nl > - < nl > performSendContent ( msg . getPeer ( ) , rid , nContent ) ; < nl > + fileUplaodingWakeLocks . remove ( rid ) . releaseLock ( ) ; < nl > } < nl > < nl > private void onFileUploadError ( long rid ) { < nl > @ @ - 365 , 11 + 370 , 13 @ @ public class SenderActor extends ModuleActor { < nl > } < nl > < nl > self ( ) . send ( new MessageError ( msg . getPeer ( ) , msg . getRid ( ) ) ) ; < nl > + fileUplaodingWakeLocks . remove ( rid ) . releaseLock ( ) ; < nl > } < nl > < nl > / / Sending content < nl > < nl > private void performSendContent ( final Peer peer , final long rid , AbsContent content ) { < nl > + WakeLock wakeLock = im . actor . runtime . Runtime . makeWakeLock ( ) ; < nl > < nl > ApiMessage message ; < nl > if ( content instanceof TextContent ) { < nl > @ @ - 420 , 10 + 427 , 10 @ @ public class SenderActor extends ModuleActor { < nl > return ; < nl > } < nl > < nl > - performSendApiContent ( peer , rid , message ) ; < nl > + performSendApiContent ( peer , rid , message , wakeLock ) ; < nl > } < nl > < nl > - private void performSendApiContent ( final Peer peer , final long rid , ApiMessage message ) { < nl > + private void performSendApiContent ( final Peer peer , final long rid , ApiMessage message , final WakeLock wakeLock ) { < nl > final ApiOutPeer outPeer = buidOutPeer ( peer ) ; < nl > final ApiPeer apiPeer = buildApiPeer ( peer ) ; < nl > if ( outPeer = = null | | apiPeer = = null ) { < nl > @ @ - 438 , 11 + 445 , 13 @ @ public class SenderActor extends ModuleActor { < nl > response . getState ( ) , < nl > UpdateMessageSent . HEADER , < nl > new UpdateMessageSent ( apiPeer , rid , response . getDate ( ) ) . toByteArray ( ) ) ) ; < nl > + wakeLock . releaseLock ( ) ; < nl > } < nl > < nl > @ Override < nl > public void onError ( RpcException e ) { < nl > self ( ) . send ( new MessageError ( peer , rid ) ) ; < nl > + wakeLock . releaseLock ( ) ; < nl > } < nl > } ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java < nl > index ef9026d . . 3cf9d18 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java < nl > @ @ - 22 , 10 + 22 , 12 @ @ import im . actor . core . modules . updates . internal . ExecuteAfter ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > import im . actor . core . util . ModuleActor ; < nl > - import im . actor . runtime . Log ; < nl > + import im . actor . runtime . * ; < nl > + import im . actor . runtime . Runtime ; < nl > import im . actor . runtime . actors . Cancellable ; < nl > import im . actor . runtime . function . Constructor ; < nl > import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . power . WakeLock ; < nl > < nl > public class SequenceActor extends ModuleActor { < nl > < nl > @ @ - 59 , 6 + 61 , 8 @ @ public class SequenceActor extends ModuleActor { < nl > < nl > private SequenceHandlerInt handler ; < nl > < nl > + private WakeLock currentWakeLock ; < nl > + < nl > public SequenceActor ( ModuleContext modules ) { < nl > super ( modules ) ; < nl > } < nl > @ @ - 71 , 6 + 75 , 8 @ @ public class SequenceActor extends ModuleActor { < nl > < nl > handler = context ( ) . getUpdatesModule ( ) . getUpdateHandler ( ) ; < nl > < nl > + currentWakeLock = im . actor . runtime . Runtime . makeWakeLock ( ) ; < nl > + < nl > self ( ) . send ( new Invalidate ( ) ) ; < nl > } < nl > < nl > @ @ - 127 , 6 + 133 , 7 @ @ public class SequenceActor extends ModuleActor { < nl > } < nl > < nl > Log . d ( TAG , " Handling update # " + seq ) ; < nl > + startWakeLock ( ) ; < nl > handler . onSeqUpdate ( type , body , users , groups ) . then ( new Consumer < SequenceHandlerActor . UpdateProcessed > ( ) { < nl > @ Override < nl > public void apply ( SequenceHandlerActor . UpdateProcessed updateProcessed ) { < nl > @ @ - 157 , 6 + 164 , 8 @ @ public class SequenceActor extends ModuleActor { < nl > } < nl > isValidated = false ; < nl > < nl > + startWakeLock ( ) ; < nl > + < nl > if ( seq < 0 ) { < nl > Log . d ( TAG , " Loading fresh state . . . " ) ; < nl > ArrayList < ApiUpdateOptimization > optimizations = new ArrayList < > ( ) ; < nl > @ @ - 173 , 6 + 182 , 9 @ @ public class SequenceActor extends ModuleActor { < nl > seq = response . getSeq ( ) ; < nl > state = response . getState ( ) ; < nl > persistState ( seq , state ) ; < nl > + < nl > + stopWakeLock ( ) ; < nl > + < nl > onBecomeValid ( response . getSeq ( ) , response . getState ( ) ) ; < nl > } < nl > < nl > @ @ - 237 , 6 + 249 , 7 @ @ public class SequenceActor extends ModuleActor { < nl > persistState ( seq , state ) ; < nl > if ( this . seq = = seq ) { < nl > Log . d ( TAG , " All updates applied { seq : " + seq + " } " ) ; < nl > + stopWakeLock ( ) ; < nl > } else { < nl > Log . d ( TAG , " Updates applied { seq : " + seq + " , finishedSeq : " + finishedSeq + " } " ) ; < nl > } < nl > @ @ - 314 , 6 + 327 , 27 @ @ public class SequenceActor extends ModuleActor { < nl > isTimerStarted = false ; < nl > } < nl > < nl > + < nl > + / / < nl > + / / Weak Locks < nl > + / / < nl > + < nl > + private void startWakeLock ( ) { < nl > + if ( currentWakeLock = = null ) { < nl > + currentWakeLock = Runtime . makeWakeLock ( ) ; < nl > + Log . w ( TAG , " Starting Wake Lock " ) ; < nl > + } < nl > + } < nl > + < nl > + private void stopWakeLock ( ) { < nl > + if ( currentWakeLock ! = null ) { < nl > + currentWakeLock . releaseLock ( ) ; < nl > + currentWakeLock = null ; < nl > + Log . w ( TAG , " Released Wake Lock " ) ; < nl > + } < nl > + } < nl > + < nl > + < nl > / / < nl > / / Messages < nl > / / < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > index a9a88b1 . . 7e624bd 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . runtime ; < nl > < nl > import im . actor . runtime . actors . ThreadPriority ; < nl > + import im . actor . runtime . power . WakeLock ; < nl > import im . actor . runtime . threading . Dispatcher ; < nl > import im . actor . runtime . threading . AtomicIntegerCompat ; < nl > import im . actor . runtime . threading . AtomicLongCompat ; < nl > @ @ - 79 , 4 + 80 , 8 @ @ public class Runtime { < nl > public static void killApp ( ) { < nl > lifecycleRuntime . killApp ( ) ; < nl > } < nl > + < nl > + public static WakeLock makeWakeLock ( ) { < nl > + return lifecycleRuntime . makeWakeLock ( ) ; < nl > + } < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java 
 index d623d48 . . b366101 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java 
 @ @ - 24 , 12 + 24 , 12 @ @ import im . actor . core . network . RpcException ; 
 import im . actor . core . modules . ModuleActor ; 
 import im . actor . runtime . * ; 
 import im . actor . runtime . Runtime ; 
 - import im . actor . runtime . actors . Actor ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . Cancellable ; 
 - import im . actor . runtime . function . Constructor ; 
 + import im . actor . runtime . actors . messages . Void ; 
 import im . actor . runtime . function . Consumer ; 
 import im . actor . runtime . power . WakeLock ; 
 + import im . actor . runtime . actors . messages . Void ; 
 
 public class SequenceActor extends ModuleActor { 
 
 @ @ - 37 , 6 + 37 , 9 @ @ public class SequenceActor extends ModuleActor { 
 return ( ) - > new SequenceActor ( context ) ; 
 } 
 
 + / / Do Not Remove ! WorkAround for missing j2objc translator include 
 + private static final Void DUMB = null ; 
 + 
 private static final String TAG = " Updates " ; 
 private static final int INVALIDATE _ GAP = 2000 ; / / 2 Secs 
 private static final int INVALIDATE _ MAX _ SEC _ HOLE = 10 ; 
 @ @ - 132 , 12 + 135 , 10 @ @ public class SequenceActor extends ModuleActor { 
 
 Log . d ( TAG , " Handling update # " + seq ) ; 
 startWakeLock ( ) ; 
 - handler . onSeqUpdate ( type , body , users , groups ) . then ( new Consumer < SequenceHandlerActor . UpdateProcessed > ( ) { 
 - @ Override 
 - public void apply ( SequenceHandlerActor . UpdateProcessed updateProcessed ) { 
 - Log . d ( TAG , " Handling update ended # " + seq ) ; 
 - onUpdatesApplied ( seq , state ) ; 
 - } 
 + 
 + handler . onSeqUpdate ( type , body , users , groups ) . then ( aVoid - > { 
 + Log . d ( TAG , " Handling update ended # " + seq ) ; 
 + onUpdatesApplied ( seq , state ) ; 
 } ) . failure ( e - > { 
 SequenceActor . this . seq = finishedSeq ; 
 SequenceActor . this . state = finishedState ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java 
 index 5c6c039 . . 83d3e09 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerActor . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import im . actor . core . network . parser . Update ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . Runtime ; 
 import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . actors . messages . Void ; 
 import im . actor . runtime . function . Constructor ; 
 import im . actor . runtime . function . Consumer ; 
 import im . actor . runtime . promise . Promise ; 
 @ @ - 81 , 9 + 82 , 9 @ @ public class SequenceHandlerActor extends ModuleActor { 
 afterApply . run ( ) ; 
 } 
 
 - private Promise < UpdateProcessed > onSeqUpdate ( int type , byte [ ] body , 
 - @ Nullable List < ApiUser > users , 
 - @ Nullable List < ApiGroup > groups ) throws Exception { 
 + private Promise < Void > onSeqUpdate ( int type , byte [ ] body , 
 + @ Nullable List < ApiUser > users , 
 + @ Nullable List < ApiGroup > groups ) throws Exception { 
 
 Update update ; 
 try { 
 @ @ - 91 , 7 + 92 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { 
 } catch ( IOException e ) { 
 Log . w ( TAG , " Unable to parse update : ignoring " ) ; 
 Log . e ( TAG , e ) ; 
 - return Promises . success ( new UpdateProcessed ( ) ) ; 
 + return Promises . success ( Void . INSTANCE ) ; 
 } 
 
 if ( groups = = null | | users = = null ) { 
 @ @ - 115 , 10 + 116 , 10 @ @ public class SequenceHandlerActor extends ModuleActor { 
 } 
 
 / / Log . d ( TAG , " Processing update success " ) ; 
 - return Promises . success ( new UpdateProcessed ( ) ) ; 
 + return Promises . success ( Void . INSTANCE ) ; 
 } 
 
 - private Promise < UpdateProcessed > onDifferenceUpdate ( final ResponseGetDifference difference ) { 
 + private Promise < Void > onDifferenceUpdate ( final ResponseGetDifference difference ) { 
 long parseStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; 
 final ArrayList < Update > updates = new ArrayList < > ( ) ; 
 for ( ApiUpdateContainer u : difference . getUpdates ( ) ) { 
 @ @ - 157 , 7 + 158 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { 
 if ( pendingGroupPeers . size ( ) > 0 | | pendingUserPeers . size ( ) > 0 ) { 
 Log . d ( TAG , " Downloading pending peers ( users : " + pendingUserPeers . size ( ) + " , groups : " + pendingGroupPeers . size ( ) + " ) " ) ; 
 isUpdating = true ; 
 - return new Promise < > ( ( PromiseFunc < UpdateProcessed > ) resolver - > 
 + return new Promise < > ( ( PromiseFunc < Void > ) resolver - > 
 api ( new RequestGetReferencedEntitites ( pendingUserPeers , pendingGroupPeers ) ) 
 . then ( responseGetReferencedEntitites - > { 
 Log . d ( TAG , " Pending peers downloaded " ) ; 
 @ @ - 166 , 7 + 167 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { 
 long applyStart = Runtime . getCurrentTime ( ) ; 
 processor . applyDifferenceUpdate ( difference . getUsers ( ) , difference . getGroups ( ) , updates ) ; 
 Log . d ( TAG , " Difference applied in " + ( Runtime . getCurrentTime ( ) - applyStart ) + " ms " ) ; 
 - resolver . result ( new UpdateProcessed ( ) ) ; 
 + resolver . result ( Void . INSTANCE ) ; 
 unstashAll ( ) ; 
 isUpdating = false ; 
 } ) 
 @ @ - 179 , 7 + 180 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { 
 long applyStart = im . actor . runtime . Runtime . getCurrentTime ( ) ; 
 processor . applyDifferenceUpdate ( difference . getUsers ( ) , difference . getGroups ( ) , updates ) ; 
 Log . d ( TAG , " Difference applied in " + ( im . actor . runtime . Runtime . getCurrentTime ( ) - applyStart ) + " ms " ) ; 
 - return Promises . success ( new UpdateProcessed ( ) ) ; 
 + return Promises . success ( Void . INSTANCE ) ; 
 } 
 } 
 
 @ @ - 256 , 7 + 257 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { 
 } 
 } 
 
 - public static class SeqUpdate implements AskMessage < UpdateProcessed > { 
 + public static class SeqUpdate implements AskMessage < Void > { 
 
 private int type ; 
 private byte [ ] body ; 
 @ @ - 294 , 7 + 295 , 7 @ @ public class SequenceHandlerActor extends ModuleActor { 
 } 
 } 
 
 - public static class DifferenceUpdate implements AskMessage < UpdateProcessed > { 
 + public static class DifferenceUpdate implements AskMessage < Void > { 
 private ResponseGetDifference difference ; 
 
 public DifferenceUpdate ( ResponseGetDifference difference ) { 
 @ @ - 305 , 8 + 306 , 4 @ @ public class SequenceHandlerActor extends ModuleActor { 
 return difference ; 
 } 
 } 
 - 
 - public static class UpdateProcessed { 
 - 
 - } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerInt . java 
 index 85a7c44 . . d23712a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerInt . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceHandlerInt . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import im . actor . core . modules . sequence . internal . InternalUpdate ; 
 import im . actor . core . modules . sequence . internal . RelatedResponse ; 
 import im . actor . runtime . actors . ActorInterface ; 
 import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . actors . messages . Void ; 
 import im . actor . runtime . promise . Promise ; 
 import im . actor . core . modules . sequence . SequenceHandlerActor . * ; 
 
 @ @ - 20 , 13 + 21 , 13 @ @ public class SequenceHandlerInt extends ActorInterface { 
 super ( dest ) ; 
 } 
 
 - public Promise < UpdateProcessed > onSeqUpdate ( int updateKey , byte [ ] data , 
 - @ Nullable List < ApiUser > users , 
 - @ Nullable List < ApiGroup > groups ) { 
 + public Promise < Void > onSeqUpdate ( int updateKey , byte [ ] data , 
 + @ Nullable List < ApiUser > users , 
 + @ Nullable List < ApiGroup > groups ) { 
 return ask ( new SeqUpdate ( updateKey , data , users , groups ) ) ; 
 } 
 
 - public Promise < UpdateProcessed > onDifferenceUpdate ( ResponseGetDifference difference ) { 
 + public Promise < Void > onDifferenceUpdate ( ResponseGetDifference difference ) { 
 return ask ( new DifferenceUpdate ( difference ) ) ; 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 index 58a48b5 . . 7b136d7 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 @ @ - 342 , 7 + 342 , 6 @ @ import PushKit 
 @ objc public func pushRegistry ( registry : PKPushRegistry ! , didUpdatePushCredentials credentials : PKPushCredentials ! , forType type : String ! ) { 
 if ( type = = PKPushTypeVoIP ) { 
 let tokenString = " \ ( credentials . token ) " . replace ( " " , dest : " " ) . replace ( " < " , dest : " " ) . replace ( " > " , dest : " " ) 
 - print ( " PushKit : \ ( tokenString ) " ) 
 pushRegisterKitToken ( tokenString ) 
 } 
 } 
 @ @ - 355 , 7 + 354 , 10 @ @ import PushKit 
 
 @ objc public func pushRegistry ( registry : PKPushRegistry ! , didReceiveIncomingPushWithPayload payload : PKPushPayload ! , forType type : String ! ) { 
 if ( type = = PKPushTypeVoIP ) { 
 - print ( " PushKit Payload : \ ( payload ) " ) 
 + let aps = payload . dictionaryPayload [ " aps " ] as ! [ NSString : AnyObject ] 
 + if let callId = aps [ " callId " ] as ? String { 
 + Actor . checkCall ( jlong ( callId ) ! ) 
 + } 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 53a7cd1 . . d868238 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 1072 , 6 + 1072 , 18 @ @ public class Messenger { 
 } 
 } 
 
 + / * * 
 + * Checking incoming call from push notification 
 + * 
 + * @ param callId Call Id 
 + * / 
 + @ ObjectiveCName ( " checkCall : " ) 
 + public void checkCall ( long callId ) { 
 + if ( modules . getCallsModule ( ) ! = null ) { 
 + modules . getCallsModule ( ) . checkCall ( callId ) ; 
 + } 
 + } 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Peer operations 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index 59a2d11 . . f544d1d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 14 , 12 + 14 , 14 @ @ import im . actor . core . viewmodel . CallVM ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . runtime . actors . messages . PoisonPill ; 
 import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . power . WakeLock ; 
 
 import static im . actor . core . modules . internal . messages . entity . EntityConverter . convert ; 
 
 public class CallActor extends AbsCallActor { 
 
 private final boolean isMaster ; 
 + private final WakeLock wakeLock ; 
 private long callId ; 
 private Peer peer ; 
 private CallVM callVM ; 
 @ @ - 29 , 16 + 31 , 18 @ @ public class CallActor extends AbsCallActor { 
 private boolean isAnswered ; 
 private boolean isRejected ; 
 
 - public CallActor ( long callId , ModuleContext context ) { 
 + public CallActor ( long callId , WakeLock wakeLock , ModuleContext context ) { 
 super ( context ) ; 
 + this . wakeLock = wakeLock ; 
 this . isMaster = false ; 
 this . callId = callId ; 
 this . isAnswered = false ; 
 this . isActive = false ; 
 } 
 
 - public CallActor ( Peer peer , CommandCallback < Long > callback , ModuleContext context ) { 
 + public CallActor ( Peer peer , CommandCallback < Long > callback , WakeLock wakeLock , ModuleContext context ) { 
 super ( context ) ; 
 + this . wakeLock = wakeLock ; 
 this . isMaster = true ; 
 this . callback = callback ; 
 this . peer = peer ; 
 @ @ - 154 , 6 + 158 , 7 @ @ public class CallActor extends AbsCallActor { 
 if ( callId ! = 0 ) { 
 callManager . send ( new CallManagerActor . OnCallEnded ( callId ) , self ( ) ) ; 
 } 
 + wakeLock . releaseLock ( ) ; 
 } 
 
 / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 index 525b26a . . 0194b2a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 11 , 11 + 11 , 13 @ @ import im . actor . core . providers . CallsProvider ; 
 import im . actor . core . util . RandomUtils ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . runtime . * ; 
 + import im . actor . runtime . Runtime ; 
 import im . actor . runtime . actors . Actor ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . actors . messages . PoisonPill ; 
 import im . actor . runtime . function . Constructor ; 
 + import im . actor . runtime . power . WakeLock ; 
 
 public class CallManagerActor extends ModuleActor { 
 
 @ @ - 70 , 10 + 72 , 11 @ @ public class CallManagerActor extends ModuleActor { 
 / / 
 / / Spawning new Actor for call 
 / / 
 + final WakeLock wakeLock = Runtime . makeWakeLock ( ) ; 
 system ( ) . actorOf ( " actor / master / " + RandomUtils . nextRid ( ) , new ActorCreator ( ) { 
 @ Override 
 public Actor create ( ) { 
 - return new CallActor ( peer , callback , context ( ) ) ; 
 + return new CallActor ( peer , callback , wakeLock , context ( ) ) ; 
 } 
 } ) ; 
 } 
 @ @ - 118 , 24 + 121 , 31 @ @ public class CallManagerActor extends ModuleActor { 
 / / Incoming call 
 / / 
 
 - private void onIncomingCall ( final long callId ) { 
 + private void onIncomingCall ( final long callId , WakeLock wakeLock ) { 
 Log . d ( TAG , " onIncomingCall ( " + callId + " ) " ) ; 
 
 / / 
 / / Filter double updates about incoming call 
 / / 
 if ( handledCalls . contains ( callId ) ) { 
 + if ( wakeLock ! = null ) { 
 + wakeLock . releaseLock ( ) ; 
 + } 
 return ; 
 } 
 handledCalls . add ( callId ) ; 
 + if ( wakeLock = = null ) { 
 + wakeLock = Runtime . makeWakeLock ( ) ; 
 + } 
 
 / / 
 / / Spawning new Actor for call 
 / / 
 - system ( ) . actorOf ( " actor / slave / " + RandomUtils . nextRid ( ) , new ActorCreator ( ) { 
 + final WakeLock finalWakeLock = wakeLock ; 
 + system ( ) . actorOf ( " actor / call " + RandomUtils . nextRid ( ) , new ActorCreator ( ) { 
 @ Override 
 public Actor create ( ) { 
 - return new CallActor ( callId , context ( ) ) ; 
 + return new CallActor ( callId , finalWakeLock , context ( ) ) ; 
 } 
 } ) ; 
 } 
 @ @ - 306 , 7 + 316 , 10 @ @ public class CallManagerActor extends ModuleActor { 
 public void onReceive ( Object message ) { 
 if ( message instanceof OnIncomingCall ) { 
 OnIncomingCall call = ( OnIncomingCall ) message ; 
 - onIncomingCall ( call . getCallId ( ) ) ; 
 + onIncomingCall ( call . getCallId ( ) , null ) ; 
 + } else if ( message instanceof OnIncomingCallLocked ) { 
 + OnIncomingCallLocked locked = ( OnIncomingCallLocked ) message ; 
 + onIncomingCall ( locked . getCallId ( ) , locked . getWakeLock ( ) ) ; 
 } else if ( message instanceof OnIncomingCallHandled ) { 
 OnIncomingCallHandled incomingCallHandled = ( OnIncomingCallHandled ) message ; 
 onIncomingCallHandled ( incomingCallHandled . getCallId ( ) ) ; 
 @ @ - 352 , 6 + 365 , 25 @ @ public class CallManagerActor extends ModuleActor { 
 } 
 } 
 
 + public static class OnIncomingCallLocked { 
 + 
 + private long callId ; 
 + private WakeLock wakeLock ; 
 + 
 + public OnIncomingCallLocked ( long callId , WakeLock wakeLock ) { 
 + this . callId = callId ; 
 + this . wakeLock = wakeLock ; 
 + } 
 + 
 + public long getCallId ( ) { 
 + return callId ; 
 + } 
 + 
 + public WakeLock getWakeLock ( ) { 
 + return wakeLock ; 
 + } 
 + } 
 + 
 public static class OnIncomingCallHandled { 
 
 private long callId ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 index fb0d93d . . 745d76f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . core . providers . CallsProvider ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . viewmodel . Command ; 
 + import im . actor . runtime . * ; 
 import im . actor . runtime . actors . ActorRef ; 
 
 import static im . actor . runtime . actors . ActorSystem . system ; 
 @ @ - 44 , 6 + 45 , 10 @ @ public class CallsModule extends AbsModule { 
 return callManager ; 
 } 
 
 + public void checkCall ( long callId ) { 
 + callManager . send ( new CallManagerActor . OnIncomingCallLocked ( callId , im . actor . runtime . Runtime . makeWakeLock ( ) ) ) ; 
 + } 
 + 
 public void probablyEndCall ( ) { 
 callManager . send ( new CallManagerActor . ProbablyEndCall ( ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 index 4f9f421 . . 94e71f1 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import org . jetbrains . annotations . Nullable ; 
 
 import java . io . IOException ; 
 import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 import java . util . List ; 
 
 import im . actor . core . api . ApiDocumentExVoice ; 
 @ @ - 59 , 8 + 60 , 10 @ @ import im . actor . core . util . ModuleActor ; 
 import im . actor . core . util . RandomUtils ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 - import im . actor . runtime . Storage ; 
 + import im . actor . runtime . * ; 
 + import im . actor . runtime . Runtime ; 
 import im . actor . runtime . actors . ask . AskCallback ; 
 + import im . actor . runtime . power . WakeLock ; 
 
 public class SenderActor extends ModuleActor { 
 
 @ @ - 69 , 6 + 72 , 7 @ @ public class SenderActor extends ModuleActor { 
 private PendingMessagesStorage pendingMessages ; 
 
 private long lastSendDate = 0 ; 
 + private HashMap < Long , WakeLock > fileUplaodingWakeLocks = new HashMap < > ( ) ; 
 
 public SenderActor ( ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 321 , 6 + 325 , 7 @ @ public class SenderActor extends ModuleActor { 
 } 
 
 private void performUploadFile ( long rid , String descriptor , String fileName ) { 
 + fileUplaodingWakeLocks . put ( rid , Runtime . makeWakeLock ( ) ) ; 
 context ( ) . getFilesModule ( ) . requestUpload ( rid , descriptor , fileName , self ( ) ) ; 
 } 
 
 @ @ - 354 , 8 + 359 , 8 @ @ public class SenderActor extends ModuleActor { 
 
 pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( msg . getPeer ( ) , msg . getRid ( ) , nContent ) ) ; 
 context ( ) . getMessagesModule ( ) . getConversationActor ( msg . getPeer ( ) ) . send ( new ConversationActor . MessageContentUpdated ( msg . getRid ( ) , nContent ) ) ; 
 - 
 performSendContent ( msg . getPeer ( ) , rid , nContent ) ; 
 + fileUplaodingWakeLocks . remove ( rid ) . releaseLock ( ) ; 
 } 
 
 private void onFileUploadError ( long rid ) { 
 @ @ - 365 , 11 + 370 , 13 @ @ public class SenderActor extends ModuleActor { 
 } 
 
 self ( ) . send ( new MessageError ( msg . getPeer ( ) , msg . getRid ( ) ) ) ; 
 + fileUplaodingWakeLocks . remove ( rid ) . releaseLock ( ) ; 
 } 
 
 / / Sending content 
 
 private void performSendContent ( final Peer peer , final long rid , AbsContent content ) { 
 + WakeLock wakeLock = im . actor . runtime . Runtime . makeWakeLock ( ) ; 
 
 ApiMessage message ; 
 if ( content instanceof TextContent ) { 
 @ @ - 420 , 10 + 427 , 10 @ @ public class SenderActor extends ModuleActor { 
 return ; 
 } 
 
 - performSendApiContent ( peer , rid , message ) ; 
 + performSendApiContent ( peer , rid , message , wakeLock ) ; 
 } 
 
 - private void performSendApiContent ( final Peer peer , final long rid , ApiMessage message ) { 
 + private void performSendApiContent ( final Peer peer , final long rid , ApiMessage message , final WakeLock wakeLock ) { 
 final ApiOutPeer outPeer = buidOutPeer ( peer ) ; 
 final ApiPeer apiPeer = buildApiPeer ( peer ) ; 
 if ( outPeer = = null | | apiPeer = = null ) { 
 @ @ - 438 , 11 + 445 , 13 @ @ public class SenderActor extends ModuleActor { 
 response . getState ( ) , 
 UpdateMessageSent . HEADER , 
 new UpdateMessageSent ( apiPeer , rid , response . getDate ( ) ) . toByteArray ( ) ) ) ; 
 + wakeLock . releaseLock ( ) ; 
 } 
 
 @ Override 
 public void onError ( RpcException e ) { 
 self ( ) . send ( new MessageError ( peer , rid ) ) ; 
 + wakeLock . releaseLock ( ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java 
 index ef9026d . . 3cf9d18 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java 
 @ @ - 22 , 10 + 22 , 12 @ @ import im . actor . core . modules . updates . internal . ExecuteAfter ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 import im . actor . core . util . ModuleActor ; 
 - import im . actor . runtime . Log ; 
 + import im . actor . runtime . * ; 
 + import im . actor . runtime . Runtime ; 
 import im . actor . runtime . actors . Cancellable ; 
 import im . actor . runtime . function . Constructor ; 
 import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . power . WakeLock ; 
 
 public class SequenceActor extends ModuleActor { 
 
 @ @ - 59 , 6 + 61 , 8 @ @ public class SequenceActor extends ModuleActor { 
 
 private SequenceHandlerInt handler ; 
 
 + private WakeLock currentWakeLock ; 
 + 
 public SequenceActor ( ModuleContext modules ) { 
 super ( modules ) ; 
 } 
 @ @ - 71 , 6 + 75 , 8 @ @ public class SequenceActor extends ModuleActor { 
 
 handler = context ( ) . getUpdatesModule ( ) . getUpdateHandler ( ) ; 
 
 + currentWakeLock = im . actor . runtime . Runtime . makeWakeLock ( ) ; 
 + 
 self ( ) . send ( new Invalidate ( ) ) ; 
 } 
 
 @ @ - 127 , 6 + 133 , 7 @ @ public class SequenceActor extends ModuleActor { 
 } 
 
 Log . d ( TAG , " Handling update # " + seq ) ; 
 + startWakeLock ( ) ; 
 handler . onSeqUpdate ( type , body , users , groups ) . then ( new Consumer < SequenceHandlerActor . UpdateProcessed > ( ) { 
 @ Override 
 public void apply ( SequenceHandlerActor . UpdateProcessed updateProcessed ) { 
 @ @ - 157 , 6 + 164 , 8 @ @ public class SequenceActor extends ModuleActor { 
 } 
 isValidated = false ; 
 
 + startWakeLock ( ) ; 
 + 
 if ( seq < 0 ) { 
 Log . d ( TAG , " Loading fresh state . . . " ) ; 
 ArrayList < ApiUpdateOptimization > optimizations = new ArrayList < > ( ) ; 
 @ @ - 173 , 6 + 182 , 9 @ @ public class SequenceActor extends ModuleActor { 
 seq = response . getSeq ( ) ; 
 state = response . getState ( ) ; 
 persistState ( seq , state ) ; 
 + 
 + stopWakeLock ( ) ; 
 + 
 onBecomeValid ( response . getSeq ( ) , response . getState ( ) ) ; 
 } 
 
 @ @ - 237 , 6 + 249 , 7 @ @ public class SequenceActor extends ModuleActor { 
 persistState ( seq , state ) ; 
 if ( this . seq = = seq ) { 
 Log . d ( TAG , " All updates applied { seq : " + seq + " } " ) ; 
 + stopWakeLock ( ) ; 
 } else { 
 Log . d ( TAG , " Updates applied { seq : " + seq + " , finishedSeq : " + finishedSeq + " } " ) ; 
 } 
 @ @ - 314 , 6 + 327 , 27 @ @ public class SequenceActor extends ModuleActor { 
 isTimerStarted = false ; 
 } 
 
 + 
 + / / 
 + / / Weak Locks 
 + / / 
 + 
 + private void startWakeLock ( ) { 
 + if ( currentWakeLock = = null ) { 
 + currentWakeLock = Runtime . makeWakeLock ( ) ; 
 + Log . w ( TAG , " Starting Wake Lock " ) ; 
 + } 
 + } 
 + 
 + private void stopWakeLock ( ) { 
 + if ( currentWakeLock ! = null ) { 
 + currentWakeLock . releaseLock ( ) ; 
 + currentWakeLock = null ; 
 + Log . w ( TAG , " Released Wake Lock " ) ; 
 + } 
 + } 
 + 
 + 
 / / 
 / / Messages 
 / / 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 index a9a88b1 . . 7e624bd 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . runtime ; 
 
 import im . actor . runtime . actors . ThreadPriority ; 
 + import im . actor . runtime . power . WakeLock ; 
 import im . actor . runtime . threading . Dispatcher ; 
 import im . actor . runtime . threading . AtomicIntegerCompat ; 
 import im . actor . runtime . threading . AtomicLongCompat ; 
 @ @ - 79 , 4 + 80 , 8 @ @ public class Runtime { 
 public static void killApp ( ) { 
 lifecycleRuntime . killApp ( ) ; 
 } 
 + 
 + public static WakeLock makeWakeLock ( ) { 
 + return lifecycleRuntime . makeWakeLock ( ) ; 
 + } 
 } 
 \ No newline at end of file
