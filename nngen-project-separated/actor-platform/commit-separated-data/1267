BLEU SCORE: 0.09509189748920097

TEST MSG: fix ( server ) : fixed compilation error
GENERATED MSG: fix ( server : messaging ) : censored text in Apple push if text is disabled

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala < nl > index be10f97 . . 313a409 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import akka . event . Logging < nl > import com . google . android . gcm . server . { Sender , Message } < nl > import im . actor . server . model . push . GooglePushCredentials < nl > < nl > - import scala . concurrent . { Future , blocking } < nl > + import scala . concurrent . { ExecutionContext , Future , blocking } < nl > < nl > private [ sequence ] final class GooglePushProvider ( userId : Int , googlePushManager : GooglePushManager , system : ActorSystem ) extends PushProvider { < nl > private val Retries = 3 < nl > @ @ - 56 , 7 + 56 , 7 @ @ private [ sequence ] final class GooglePushProvider ( userId : Int , googlePushManager : < nl > case None ⇒ log . warning ( " No google push configured for project - id : { } " , projectId ) < nl > } < nl > < nl > - private def send ( message : Message , regId : String , retries : Int ) ( implicit mgr : Sender ) : Unit = Future { < nl > + private def send ( message : Message , regId : String , retries : Int ) ( implicit mgr : Sender , ec : ExecutionContext ) : Unit = Future { < nl > blocking { < nl > mgr . send ( message , regId , Retries ) < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / sequence . proto b / actor - server / actor - core / src / main / protobuf / sequence . proto < nl > index 41a14c4 . . 49d2dee 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / sequence . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / sequence . proto < nl > @ @ - 13 , 6 + 13 , 7 @ @ import " model . proto " ; < nl > < nl > message PushData { < nl > string text = 1 ; < nl > + string censoredText = 3 ; < nl > Peer peer = 2 ; < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala < nl > index b8b1152 . . b4688fd 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala < nl > @ @ - 44 , 11 + 44 , 16 @ @ final class ActorDelivery ( ) ( implicit val system : ActorSystem ) < nl > < nl > for { < nl > senderName ← userExt . getName ( senderUserId , receiverUserId ) < nl > - pushText ← getPushText ( peer , receiverUserId , senderName , message ) < nl > + ( pushText , censoredPushText ) ← getPushText ( peer , receiverUserId , senderName , message ) < nl > _ ← seqUpdatesExt . deliverSingleUpdate ( < nl > receiverUserId , < nl > receiverUpdate , < nl > - PushRules ( isFat = isFat ) . withData ( PushData ( ) . withText ( pushText ) . withPeer ( peer ) ) , < nl > + PushRules ( isFat = isFat ) . withData ( < nl > + PushData ( ) < nl > + . withText ( pushText ) < nl > + . withCensoredText ( censoredPushText ) < nl > + . withPeer ( peer ) < nl > + ) , < nl > deliveryId = s " msg _ $ { peer . toString } _ $ randomId " < nl > ) < nl > counterUpdate ← db . run ( getUpdateCountersChanged ( receiverUserId ) ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala < nl > index 36d8ecb . . 5052806 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala < nl > @ @ - 12 , 7 + 12 , 12 @ @ trait PushText { < nl > implicit val system : ActorSystem < nl > import system . dispatcher < nl > < nl > - protected def getPushText ( peer : Peer , outUser : Int , clientName : String , message : ApiMessage ) : Future [ String ] = { < nl > + type PushText = String < nl > + type CensoredPushText = String < nl > + < nl > + private val CensoredText = " New message " < nl > + < nl > + protected def getPushText ( peer : Peer , outUser : Int , clientName : String , message : ApiMessage ) : Future [ ( PushText , CensoredPushText ) ] = { < nl > message match { < nl > case ApiTextMessage ( text , _ , _ ) ⇒ < nl > formatAuthored ( peer , outUser , clientName , text ) < nl > @ @ - 25 , 14 + 30 , 17 @ @ trait PushText { < nl > case _ ⇒ < nl > formatAuthored ( peer , outUser , clientName , dm . name ) < nl > } < nl > - case unsupported ⇒ Future . successful ( " " ) < nl > + case unsupported ⇒ Future . successful ( ( " " , " " ) ) < nl > } < nl > } < nl > < nl > - private def formatAuthored ( peer : Peer , userId : Int , authorName : String , message : String ) : Future [ String ] = { < nl > + private def formatAuthored ( peer : Peer , userId : Int , authorName : String , message : String ) : Future [ ( PushText , CensoredPushText ) ] = { < nl > peer match { < nl > - case Peer ( PeerType . Group , groupId ) ⇒ GroupExtension ( system ) . getApiStruct ( groupId , userId ) map ( g ⇒ s " $ authorName @ $ { g . title } : $ message " ) < nl > - case Peer ( PeerType . Private , _ ) ⇒ Future . successful ( s " $ authorName : $ message " ) < nl > + case Peer ( PeerType . Group , groupId ) ⇒ < nl > + for { < nl > + group ← GroupExtension ( system ) . getApiStruct ( groupId , userId ) < nl > + } yield ( s " $ authorName @ $ { group . title } : $ message " , s " $ authorName @ $ { group . title } : $ CensoredText " ) < nl > + case Peer ( PeerType . Private , _ ) ⇒ Future . successful ( ( s " $ authorName : $ message " , s " $ authorName : $ CensoredText " ) ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala < nl > index 7248398 . . f71b70b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala < nl > @ @ - 49 , 6 + 49 , 8 @ @ private [ sequence ] final class ApplePushProvider ( userId : Int , applePushManager : A < nl > < nl > if ( data . text . nonEmpty & & isTextEnabled ) < nl > builder . setAlertBody ( data . text ) < nl > + else if ( data . censoredText . nonEmpty ) < nl > + builder . setAlertBody ( data . censoredText ) < nl > < nl > if ( isSoundEnabled ) < nl > builder . setSoundFileName ( " iapetus . caf " ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala < nl > index 99b074b . . 28f31e7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala < nl > @ @ - 215 , 11 + 215 , 11 @ @ private [ sequence ] final class VendorPush ( < nl > log . debug ( " AuthSid is excluded , not pushing " ) < nl > } else { < nl > rules . data match { < nl > - case Some ( data @ PushData ( text , peerOpt ) ) ⇒ < nl > + case Some ( data ) ⇒ < nl > val settings = notificationSettings . specific . getOrElse ( deviceType , notificationSettings . generic ) < nl > < nl > val isVisible = < nl > - ( settings . enabled , peerOpt ) match { < nl > + ( settings . enabled , data . peer ) match { < nl > case ( true , Some ( peer ) ) ⇒ < nl > settings . peers . get ( peer ) match { < nl > case Some ( true ) ⇒

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala 
 index be10f97 . . 313a409 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import akka . event . Logging 
 import com . google . android . gcm . server . { Sender , Message } 
 import im . actor . server . model . push . GooglePushCredentials 
 
 - import scala . concurrent . { Future , blocking } 
 + import scala . concurrent . { ExecutionContext , Future , blocking } 
 
 private [ sequence ] final class GooglePushProvider ( userId : Int , googlePushManager : GooglePushManager , system : ActorSystem ) extends PushProvider { 
 private val Retries = 3 
 @ @ - 56 , 7 + 56 , 7 @ @ private [ sequence ] final class GooglePushProvider ( userId : Int , googlePushManager : 
 case None ⇒ log . warning ( " No google push configured for project - id : { } " , projectId ) 
 } 
 
 - private def send ( message : Message , regId : String , retries : Int ) ( implicit mgr : Sender ) : Unit = Future { 
 + private def send ( message : Message , regId : String , retries : Int ) ( implicit mgr : Sender , ec : ExecutionContext ) : Unit = Future { 
 blocking { 
 mgr . send ( message , regId , Retries ) 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / sequence . proto b / actor - server / actor - core / src / main / protobuf / sequence . proto 
 index 41a14c4 . . 49d2dee 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / sequence . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / sequence . proto 
 @ @ - 13 , 6 + 13 , 7 @ @ import " model . proto " ; 
 
 message PushData { 
 string text = 1 ; 
 + string censoredText = 3 ; 
 Peer peer = 2 ; 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala 
 index b8b1152 . . b4688fd 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala 
 @ @ - 44 , 11 + 44 , 16 @ @ final class ActorDelivery ( ) ( implicit val system : ActorSystem ) 
 
 for { 
 senderName ← userExt . getName ( senderUserId , receiverUserId ) 
 - pushText ← getPushText ( peer , receiverUserId , senderName , message ) 
 + ( pushText , censoredPushText ) ← getPushText ( peer , receiverUserId , senderName , message ) 
 _ ← seqUpdatesExt . deliverSingleUpdate ( 
 receiverUserId , 
 receiverUpdate , 
 - PushRules ( isFat = isFat ) . withData ( PushData ( ) . withText ( pushText ) . withPeer ( peer ) ) , 
 + PushRules ( isFat = isFat ) . withData ( 
 + PushData ( ) 
 + . withText ( pushText ) 
 + . withCensoredText ( censoredPushText ) 
 + . withPeer ( peer ) 
 + ) , 
 deliveryId = s " msg _ $ { peer . toString } _ $ randomId " 
 ) 
 counterUpdate ← db . run ( getUpdateCountersChanged ( receiverUserId ) ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala 
 index 36d8ecb . . 5052806 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / messaging / PushText . scala 
 @ @ - 12 , 7 + 12 , 12 @ @ trait PushText { 
 implicit val system : ActorSystem 
 import system . dispatcher 
 
 - protected def getPushText ( peer : Peer , outUser : Int , clientName : String , message : ApiMessage ) : Future [ String ] = { 
 + type PushText = String 
 + type CensoredPushText = String 
 + 
 + private val CensoredText = " New message " 
 + 
 + protected def getPushText ( peer : Peer , outUser : Int , clientName : String , message : ApiMessage ) : Future [ ( PushText , CensoredPushText ) ] = { 
 message match { 
 case ApiTextMessage ( text , _ , _ ) ⇒ 
 formatAuthored ( peer , outUser , clientName , text ) 
 @ @ - 25 , 14 + 30 , 17 @ @ trait PushText { 
 case _ ⇒ 
 formatAuthored ( peer , outUser , clientName , dm . name ) 
 } 
 - case unsupported ⇒ Future . successful ( " " ) 
 + case unsupported ⇒ Future . successful ( ( " " , " " ) ) 
 } 
 } 
 
 - private def formatAuthored ( peer : Peer , userId : Int , authorName : String , message : String ) : Future [ String ] = { 
 + private def formatAuthored ( peer : Peer , userId : Int , authorName : String , message : String ) : Future [ ( PushText , CensoredPushText ) ] = { 
 peer match { 
 - case Peer ( PeerType . Group , groupId ) ⇒ GroupExtension ( system ) . getApiStruct ( groupId , userId ) map ( g ⇒ s " $ authorName @ $ { g . title } : $ message " ) 
 - case Peer ( PeerType . Private , _ ) ⇒ Future . successful ( s " $ authorName : $ message " ) 
 + case Peer ( PeerType . Group , groupId ) ⇒ 
 + for { 
 + group ← GroupExtension ( system ) . getApiStruct ( groupId , userId ) 
 + } yield ( s " $ authorName @ $ { group . title } : $ message " , s " $ authorName @ $ { group . title } : $ CensoredText " ) 
 + case Peer ( PeerType . Private , _ ) ⇒ Future . successful ( ( s " $ authorName : $ message " , s " $ authorName : $ CensoredText " ) ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala 
 index 7248398 . . f71b70b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala 
 @ @ - 49 , 6 + 49 , 8 @ @ private [ sequence ] final class ApplePushProvider ( userId : Int , applePushManager : A 
 
 if ( data . text . nonEmpty & & isTextEnabled ) 
 builder . setAlertBody ( data . text ) 
 + else if ( data . censoredText . nonEmpty ) 
 + builder . setAlertBody ( data . censoredText ) 
 
 if ( isSoundEnabled ) 
 builder . setSoundFileName ( " iapetus . caf " ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala 
 index 99b074b . . 28f31e7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / VendorPush . scala 
 @ @ - 215 , 11 + 215 , 11 @ @ private [ sequence ] final class VendorPush ( 
 log . debug ( " AuthSid is excluded , not pushing " ) 
 } else { 
 rules . data match { 
 - case Some ( data @ PushData ( text , peerOpt ) ) ⇒ 
 + case Some ( data ) ⇒ 
 val settings = notificationSettings . specific . getOrElse ( deviceType , notificationSettings . generic ) 
 
 val isVisible = 
 - ( settings . enabled , peerOpt ) match { 
 + ( settings . enabled , data . peer ) match { 
 case ( true , Some ( peer ) ) ⇒ 
 settings . peers . get ( peer ) match { 
 case Some ( true ) ⇒
