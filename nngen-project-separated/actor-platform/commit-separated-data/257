BLEU SCORE: 0.13784336590962215

TEST MSG: feat ( runtime ) : Adding OS Type
GENERATED MSG: fix ( runtime + core ) : WeakReferenceCompat implementation

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidMainThreadProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidMainThreadProvider . java < nl > index 1421f36 . . 2a25c96 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidMainThreadProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidMainThreadProvider . java < nl > @ @ - 8 , 6 + 8 , 7 @ @ import android . os . Handler ; < nl > import android . os . Looper ; < nl > < nl > import im . actor . runtime . MainThreadRuntime ; < nl > + import im . actor . runtime . os . OSType ; < nl > < nl > public class AndroidMainThreadProvider implements MainThreadRuntime { < nl > < nl > @ @ - 27 , 4 + 28 , 9 @ @ public class AndroidMainThreadProvider implements MainThreadRuntime { < nl > public boolean isSingleThread ( ) { < nl > return false ; < nl > } < nl > + < nl > + @ Override < nl > + public OSType getOSType ( ) { < nl > + return OSType . ANDROID ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - clc / src / main / java / im / actor / runtime / MainThreadRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - clc / src / main / java / im / actor / runtime / MainThreadRuntimeProvider . java < nl > index 4195d91 . . 7210416 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - clc / src / main / java / im / actor / runtime / MainThreadRuntimeProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - clc / src / main / java / im / actor / runtime / MainThreadRuntimeProvider . java < nl > @ @ - 5 , 6 + 5 , 8 @ @ import org . slf4j . LoggerFactory ; < nl > < nl > import java . util . concurrent . * ; < nl > < nl > + import im . actor . runtime . os . OSType ; < nl > + < nl > / * * < nl > * Created by ex3ndr on 07 . 08 . 15 . < nl > * / < nl > @ @ - 51 , 4 + 53 , 9 @ @ public class MainThreadRuntimeProvider implements MainThreadRuntime { < nl > public boolean isSingleThread ( ) { < nl > return false ; < nl > } < nl > + < nl > + @ Override < nl > + public OSType getOSType ( ) { < nl > + return OSType . OTHER ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaMainThreadProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaMainThreadProvider . java < nl > index 9d03232 . . 8d9d6ba 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaMainThreadProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaMainThreadProvider . java < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . runtime . cocoa ; < nl > < nl > import im . actor . runtime . MainThreadRuntime ; < nl > + import im . actor . runtime . os . OSType ; < nl > < nl > public class CocoaMainThreadProvider implements MainThreadRuntime { < nl > < nl > @ @ - 21 , 4 + 22 , 9 @ @ public class CocoaMainThreadProvider implements MainThreadRuntime { < nl > public boolean isSingleThread ( ) { < nl > return false ; < nl > } < nl > + < nl > + @ Override < nl > + public OSType getOSType ( ) { < nl > + return OSType . IOS ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsMainThreadProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsMainThreadProvider . java < nl > index b762f82 . . f0e7a00 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsMainThreadProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsMainThreadProvider . java < nl > @ @ - 7 , 6 + 7 , 7 @ @ package im . actor . runtime . js ; < nl > import com . google . gwt . core . client . Scheduler ; < nl > < nl > import im . actor . runtime . MainThreadRuntime ; < nl > + import im . actor . runtime . os . OSType ; < nl > < nl > public class JsMainThreadProvider implements MainThreadRuntime { < nl > < nl > @ @ - 29 , 4 + 30 , 9 @ @ public class JsMainThreadProvider implements MainThreadRuntime { < nl > public boolean isSingleThread ( ) { < nl > return true ; < nl > } < nl > + < nl > + @ Override < nl > + public OSType getOSType ( ) { < nl > + return OSType . WEB ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / MainThreadRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / MainThreadRuntime . java < nl > index 43af4e0 . . 3fcc081 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / MainThreadRuntime . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / MainThreadRuntime . java < nl > @ @ - 6 , 10 + 6 , 13 @ @ package im . actor . runtime ; < nl > < nl > import com . google . j2objc . annotations . ObjectiveCName ; < nl > < nl > + import im . actor . runtime . os . OSType ; < nl > + < nl > / * * < nl > * Provider for dispatching on Main application Thread < nl > * / < nl > public interface MainThreadRuntime { < nl > + < nl > / * * < nl > * Post Runnable to main thread . < nl > * Implementation is recommended to always post to main thread < nl > @ @ - 35 , 4 + 38 , 12 @ @ public interface MainThreadRuntime { < nl > * / < nl > @ ObjectiveCName ( " isSingleThread " ) < nl > boolean isSingleThread ( ) ; < nl > + < nl > + / * * < nl > + * Return Current OS < nl > + * < nl > + * @ return OS < nl > + * / < nl > + @ ObjectiveCName ( " getOSType " ) < nl > + OSType getOSType ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > index c6e2af5 . . 95a4b86 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . runtime ; < nl > import com . google . j2objc . annotations . AutoreleasePool ; < nl > < nl > import im . actor . runtime . actors . ThreadPriority ; < nl > + import im . actor . runtime . os . OSType ; < nl > import im . actor . runtime . power . WakeLock ; < nl > import im . actor . runtime . threading . Dispatcher ; < nl > import im . actor . runtime . threading . AtomicIntegerCompat ; < nl > @ @ - 19 , 6 + 20 , 10 @ @ public class Runtime { < nl > private static final LifecycleRuntime lifecycleRuntime = new LifecycleRuntimeProvider ( ) ; < nl > private static final LocaleRuntime localeRuntime = new LocaleRuntimeProvider ( ) ; < nl > < nl > + public static OSType getSystemType ( ) { < nl > + return mainThreadRuntime . getOSType ( ) ; < nl > + } < nl > + < nl > public static LocaleRuntime getLocaleRuntime ( ) { < nl > return localeRuntime ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / os / OSType . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / os / OSType . java < nl > new file mode 100644 < nl > index 0000000 . . e127312 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / os / OSType . java < nl > @ @ - 0 , 0 + 1 , 5 @ @ < nl > + package im . actor . runtime . os ; < nl > + < nl > + public enum OSType { < nl > + ANDROID , IOS , WEB , OTHER < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / MainThreadRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / MainThreadRuntimeProvider . java < nl > index d76dcd2 . . 18ec1d4 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / MainThreadRuntimeProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / MainThreadRuntimeProvider . java < nl > @ @ - 1 , 5 + 1 , 7 @ @ < nl > package im . actor . runtime ; < nl > < nl > + import im . actor . runtime . os . OSType ; < nl > + < nl > public class MainThreadRuntimeProvider implements MainThreadRuntime { < nl > @ Override < nl > public void postToMainThread ( Runnable runnable ) { < nl > @ @ - 15 , 4 + 17 , 9 @ @ public class MainThreadRuntimeProvider implements MainThreadRuntime { < nl > public boolean isSingleThread ( ) { < nl > throw new RuntimeException ( " Dumb " ) ; < nl > } < nl > + < nl > + @ Override < nl > + public OSType getOSType ( ) { < nl > + throw new RuntimeException ( " Dumb " ) ; < nl > + } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java < nl > index b6d1eab . . 90259d7 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java < nl > @ @ - 4 , 7 + 4 , 6 @ @ < nl > < nl > package im . actor . core . modules . internal . file ; < nl > < nl > - import java . lang . ref . WeakReference ; < nl > import java . util . ArrayList ; < nl > < nl > import im . actor . core . entity . FileReference ; < nl > @ @ - 14 , 14 + 13 , 14 @ @ import im . actor . core . util . ModuleActor ; < nl > import im . actor . core . util . RandomUtils ; < nl > import im . actor . core . viewmodel . FileCallback ; < nl > import im . actor . core . viewmodel . FileEventCallback ; < nl > - import im . actor . runtime . Log ; < nl > - import im . actor . runtime . Storage ; < nl > + import im . actor . runtime . * ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . actors . Props ; < nl > import im . actor . runtime . actors . messages . PoisonPill ; < nl > import im . actor . runtime . files . FileSystemReference ; < nl > import im . actor . runtime . storage . KeyValueEngine ; < nl > + import im . actor . runtime . threading . WeakReferenceCompat ; < nl > < nl > public class DownloadManager extends ModuleActor { < nl > < nl > @ @ - 761 , 13 + 760 , 14 @ @ public class DownloadManager extends ModuleActor { < nl > } < nl > < nl > private class WeakCallbackHolder { < nl > - private WeakReference < FileEventCallback > callbackWeakReference ; < nl > + < nl > + private WeakReferenceCompat < FileEventCallback > callbackWeakReference ; < nl > < nl > public WeakCallbackHolder ( FileEventCallback callbackWeakReference ) { < nl > - this . callbackWeakReference = new WeakReference < > ( callbackWeakReference ) ; < nl > + this . callbackWeakReference = im . actor . runtime . Runtime . createWeakReference ( callbackWeakReference ) ; < nl > } < nl > < nl > - public WeakReference < FileEventCallback > getCallbackWeakReference ( ) { < nl > + public WeakReferenceCompat < FileEventCallback > getCallbackWeakReference ( ) { < nl > return callbackWeakReference ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericThreadingProvider . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericThreadingProvider . java < nl > index 2c98a06 . . cd3c2c8 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericThreadingProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericThreadingProvider . java < nl > @ @ - 6 , 10 + 6 , 12 @ @ import im . actor . runtime . generic . threading . GenericImmediateDispatcher ; < nl > import im . actor . runtime . generic . threading . GenericThreadLocal ; < nl > import im . actor . runtime . ThreadingRuntime ; < nl > import im . actor . runtime . actors . ThreadPriority ; < nl > + import im . actor . runtime . generic . threading . GenericWeakReference ; < nl > import im . actor . runtime . threading . AtomicIntegerCompat ; < nl > import im . actor . runtime . threading . AtomicLongCompat ; < nl > import im . actor . runtime . threading . ImmediateDispatcher ; < nl > import im . actor . runtime . threading . ThreadLocalCompat ; < nl > + import im . actor . runtime . threading . WeakReferenceCompat ; < nl > < nl > public abstract class GenericThreadingProvider implements ThreadingRuntime { < nl > < nl > @ @ - 43 , 6 + 45 , 11 @ @ public abstract class GenericThreadingProvider implements ThreadingRuntime { < nl > } < nl > < nl > @ Override < nl > + public < T > WeakReferenceCompat < T > createWeakReference ( T val ) { < nl > + return new GenericWeakReference < > ( val ) ; < nl > + } < nl > + < nl > + @ Override < nl > public AtomicLongCompat createAtomicLong ( long value ) { < nl > return new GenericAtomicLong ( value ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericWeakReference . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericWeakReference . java < nl > new file mode 100644 < nl > index 0000000 . . de5d4e1 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericWeakReference . java < nl > @ @ - 0 , 0 + 1 , 19 @ @ < nl > + package im . actor . runtime . generic . threading ; < nl > + < nl > + import java . lang . ref . WeakReference ; < nl > + < nl > + import im . actor . runtime . threading . WeakReferenceCompat ; < nl > + < nl > + public class GenericWeakReference < T > extends WeakReferenceCompat < T > { < nl > + < nl > + private WeakReference < T > weakReference ; < nl > + < nl > + public GenericWeakReference ( T val ) { < nl > + weakReference = new WeakReference < T > ( val ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public T get ( ) { < nl > + return weakReference . get ( ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java < nl > index bf164f7 . . ac5427b 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java < nl > @ @ - 13 , 11 + 13 , 13 @ @ import im . actor . runtime . js . threading . JsAtomicLong ; < nl > import im . actor . runtime . js . threading . JsDispatcher ; < nl > import im . actor . runtime . js . threading . JsImmediateDispatcher ; < nl > import im . actor . runtime . js . threading . JsThreadLocal ; < nl > + import im . actor . runtime . js . threading . JsWeakReference ; < nl > import im . actor . runtime . threading . AtomicIntegerCompat ; < nl > import im . actor . runtime . threading . AtomicLongCompat ; < nl > import im . actor . runtime . threading . Dispatcher ; < nl > import im . actor . runtime . threading . ImmediateDispatcher ; < nl > import im . actor . runtime . threading . ThreadLocalCompat ; < nl > + import im . actor . runtime . threading . WeakReferenceCompat ; < nl > < nl > public class JsThreadingProvider implements ThreadingRuntime { < nl > < nl > @ @ - 58 , 6 + 60 , 11 @ @ public class JsThreadingProvider implements ThreadingRuntime { < nl > } < nl > < nl > @ Override < nl > + public < T > WeakReferenceCompat < T > createWeakReference ( T val ) { < nl > + return new JsWeakReference < > ( val ) ; < nl > + } < nl > + < nl > + @ Override < nl > public Dispatcher createDispatcher ( String name ) { < nl > return new JsDispatcher ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsWeakReference . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsWeakReference . java < nl > new file mode 100644 < nl > index 0000000 . . 91ee4d4 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsWeakReference . java < nl > @ @ - 0 , 0 + 1 , 17 @ @ < nl > + package im . actor . runtime . js . threading ; < nl > + < nl > + import im . actor . runtime . threading . WeakReferenceCompat ; < nl > + < nl > + public class JsWeakReference < T > extends WeakReferenceCompat < T > { < nl > + < nl > + private T value ; < nl > + < nl > + public JsWeakReference ( T value ) { < nl > + this . value = value ; < nl > + } < nl > + < nl > + @ Override < nl > + public T get ( ) { < nl > + return value ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > index dac44ce . . a72b1ac 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > @ @ - 9 , 6 + 9 , 7 @ @ import im . actor . runtime . threading . AtomicIntegerCompat ; < nl > import im . actor . runtime . threading . AtomicLongCompat ; < nl > import im . actor . runtime . threading . ImmediateDispatcher ; < nl > import im . actor . runtime . threading . ThreadLocalCompat ; < nl > + import im . actor . runtime . threading . WeakReferenceCompat ; < nl > < nl > public class Runtime { < nl > < nl > @ @ - 54 , 6 + 55 , 10 @ @ public class Runtime { < nl > return threadingRuntime . createThreadLocal ( ) ; < nl > } < nl > < nl > + public static < T > WeakReferenceCompat < T > createWeakReference ( T val ) { < nl > + return threadingRuntime . createWeakReference ( val ) ; < nl > + } < nl > + < nl > public static boolean isSingleThread ( ) { < nl > return mainThreadRuntime . isSingleThread ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / ThreadingRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / ThreadingRuntime . java < nl > index 596373f . . 3adce47 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / ThreadingRuntime . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / ThreadingRuntime . java < nl > @ @ - 12 , 6 + 12 , 7 @ @ import im . actor . runtime . threading . AtomicIntegerCompat ; < nl > import im . actor . runtime . threading . AtomicLongCompat ; < nl > import im . actor . runtime . threading . ImmediateDispatcher ; < nl > import im . actor . runtime . threading . ThreadLocalCompat ; < nl > + import im . actor . runtime . threading . WeakReferenceCompat ; < nl > < nl > / * * < nl > * Provider for multithreading support . Contains all required methods for performing asynchronous operations . < nl > @ @ - 52 , 7 + 53 , 7 @ @ public interface ThreadingRuntime { < nl > int getCoresCount ( ) ; < nl > < nl > / * * < nl > - * Creating compatable AtomicInteger object < nl > + * Creating compatible AtomicInteger object < nl > * < nl > * @ param value initial value of AtomicInteger < nl > * @ return the AtomicInteger < nl > @ @ - 61 , 7 + 62 , 7 @ @ public interface ThreadingRuntime { < nl > AtomicIntegerCompat createAtomicInt ( int value ) ; < nl > < nl > / * * < nl > - * Creating compatable AtomicLong object < nl > + * Creating compatible AtomicLong object < nl > * < nl > * @ param value initial value of AtomicLong < nl > * @ return the AtomicLong < nl > @ @ - 70 , 7 + 71 , 7 @ @ public interface ThreadingRuntime { < nl > AtomicLongCompat createAtomicLong ( long value ) ; < nl > < nl > / * * < nl > - * Creating compatable ThreadLocal object < nl > + * Creating compatible ThreadLocal object < nl > * < nl > * @ param < T > type of container < nl > * @ return the ThreadLocal object < nl > @ @ - 79 , 6 + 80 , 16 @ @ public interface ThreadingRuntime { < nl > < T > ThreadLocalCompat < T > createThreadLocal ( ) ; < nl > < nl > / * * < nl > + * Creating compatible weak reference < nl > + * < nl > + * @ param val value for reference < nl > + * @ param < T > type of reference < nl > + * @ return weak reference < nl > + * / < nl > + @ ObjectiveCName ( " createWeakReference : " ) < nl > + < T > WeakReferenceCompat < T > createWeakReference ( T val ) ; < nl > + < nl > + / * * < nl > * Creating Dispatcher for very lightweight tasks < nl > * < nl > * @ return the Dispatcher object < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / WeakReferenceCompat . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / WeakReferenceCompat . java < nl > new file mode 100644 < nl > index 0000000 . . 6b2c922 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / WeakReferenceCompat . java < nl > @ @ - 0 , 0 + 1 , 10 @ @ < nl > + package im . actor . runtime . threading ; < nl > + < nl > + / * * < nl > + * Compatible Weak Reference < nl > + * < nl > + * @ param < T > type of reference < nl > + * / < nl > + public abstract class WeakReferenceCompat < T > { < nl > + public abstract T get ( ) ; < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / ThreadingRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / ThreadingRuntimeProvider . java < nl > index e67012f . . 95e0dcf 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / ThreadingRuntimeProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / ThreadingRuntimeProvider . java < nl > @ @ - 6 , 6 + 6 , 7 @ @ import im . actor . runtime . threading . AtomicLongCompat ; < nl > import im . actor . runtime . threading . Dispatcher ; < nl > import im . actor . runtime . threading . ImmediateDispatcher ; < nl > import im . actor . runtime . threading . ThreadLocalCompat ; < nl > + import im . actor . runtime . threading . WeakReferenceCompat ; < nl > < nl > public class ThreadingRuntimeProvider implements ThreadingRuntime { < nl > < nl > @ @ - 45 , 6 + 46 , 11 @ @ public class ThreadingRuntimeProvider implements ThreadingRuntime { < nl > } < nl > < nl > @ Override < nl > + public < T > WeakReferenceCompat < T > createWeakReference ( T val ) { < nl > + throw new RuntimeException ( " Dumb " ) ; < nl > + } < nl > + < nl > + @ Override < nl > public Dispatcher createDispatcher ( String name ) { < nl > throw new RuntimeException ( " Dumb " ) ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidMainThreadProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidMainThreadProvider . java 
 index 1421f36 . . 2a25c96 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidMainThreadProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidMainThreadProvider . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import android . os . Handler ; 
 import android . os . Looper ; 
 
 import im . actor . runtime . MainThreadRuntime ; 
 + import im . actor . runtime . os . OSType ; 
 
 public class AndroidMainThreadProvider implements MainThreadRuntime { 
 
 @ @ - 27 , 4 + 28 , 9 @ @ public class AndroidMainThreadProvider implements MainThreadRuntime { 
 public boolean isSingleThread ( ) { 
 return false ; 
 } 
 + 
 + @ Override 
 + public OSType getOSType ( ) { 
 + return OSType . ANDROID ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - clc / src / main / java / im / actor / runtime / MainThreadRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - clc / src / main / java / im / actor / runtime / MainThreadRuntimeProvider . java 
 index 4195d91 . . 7210416 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - clc / src / main / java / im / actor / runtime / MainThreadRuntimeProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - clc / src / main / java / im / actor / runtime / MainThreadRuntimeProvider . java 
 @ @ - 5 , 6 + 5 , 8 @ @ import org . slf4j . LoggerFactory ; 
 
 import java . util . concurrent . * ; 
 
 + import im . actor . runtime . os . OSType ; 
 + 
 / * * 
 * Created by ex3ndr on 07 . 08 . 15 . 
 * / 
 @ @ - 51 , 4 + 53 , 9 @ @ public class MainThreadRuntimeProvider implements MainThreadRuntime { 
 public boolean isSingleThread ( ) { 
 return false ; 
 } 
 + 
 + @ Override 
 + public OSType getOSType ( ) { 
 + return OSType . OTHER ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaMainThreadProvider . java b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaMainThreadProvider . java 
 index 9d03232 . . 8d9d6ba 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaMainThreadProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - cocoa / src / main / java / im / actor / runtime / cocoa / CocoaMainThreadProvider . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . runtime . cocoa ; 
 
 import im . actor . runtime . MainThreadRuntime ; 
 + import im . actor . runtime . os . OSType ; 
 
 public class CocoaMainThreadProvider implements MainThreadRuntime { 
 
 @ @ - 21 , 4 + 22 , 9 @ @ public class CocoaMainThreadProvider implements MainThreadRuntime { 
 public boolean isSingleThread ( ) { 
 return false ; 
 } 
 + 
 + @ Override 
 + public OSType getOSType ( ) { 
 + return OSType . IOS ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsMainThreadProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsMainThreadProvider . java 
 index b762f82 . . f0e7a00 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsMainThreadProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsMainThreadProvider . java 
 @ @ - 7 , 6 + 7 , 7 @ @ package im . actor . runtime . js ; 
 import com . google . gwt . core . client . Scheduler ; 
 
 import im . actor . runtime . MainThreadRuntime ; 
 + import im . actor . runtime . os . OSType ; 
 
 public class JsMainThreadProvider implements MainThreadRuntime { 
 
 @ @ - 29 , 4 + 30 , 9 @ @ public class JsMainThreadProvider implements MainThreadRuntime { 
 public boolean isSingleThread ( ) { 
 return true ; 
 } 
 + 
 + @ Override 
 + public OSType getOSType ( ) { 
 + return OSType . WEB ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / MainThreadRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / MainThreadRuntime . java 
 index 43af4e0 . . 3fcc081 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / MainThreadRuntime . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / MainThreadRuntime . java 
 @ @ - 6 , 10 + 6 , 13 @ @ package im . actor . runtime ; 
 
 import com . google . j2objc . annotations . ObjectiveCName ; 
 
 + import im . actor . runtime . os . OSType ; 
 + 
 / * * 
 * Provider for dispatching on Main application Thread 
 * / 
 public interface MainThreadRuntime { 
 + 
 / * * 
 * Post Runnable to main thread . 
 * Implementation is recommended to always post to main thread 
 @ @ - 35 , 4 + 38 , 12 @ @ public interface MainThreadRuntime { 
 * / 
 @ ObjectiveCName ( " isSingleThread " ) 
 boolean isSingleThread ( ) ; 
 + 
 + / * * 
 + * Return Current OS 
 + * 
 + * @ return OS 
 + * / 
 + @ ObjectiveCName ( " getOSType " ) 
 + OSType getOSType ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 index c6e2af5 . . 95a4b86 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 @ @ - 3 , 6 + 3 , 7 @ @ package im . actor . runtime ; 
 import com . google . j2objc . annotations . AutoreleasePool ; 
 
 import im . actor . runtime . actors . ThreadPriority ; 
 + import im . actor . runtime . os . OSType ; 
 import im . actor . runtime . power . WakeLock ; 
 import im . actor . runtime . threading . Dispatcher ; 
 import im . actor . runtime . threading . AtomicIntegerCompat ; 
 @ @ - 19 , 6 + 20 , 10 @ @ public class Runtime { 
 private static final LifecycleRuntime lifecycleRuntime = new LifecycleRuntimeProvider ( ) ; 
 private static final LocaleRuntime localeRuntime = new LocaleRuntimeProvider ( ) ; 
 
 + public static OSType getSystemType ( ) { 
 + return mainThreadRuntime . getOSType ( ) ; 
 + } 
 + 
 public static LocaleRuntime getLocaleRuntime ( ) { 
 return localeRuntime ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / os / OSType . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / os / OSType . java 
 new file mode 100644 
 index 0000000 . . e127312 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / os / OSType . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package im . actor . runtime . os ; 
 + 
 + public enum OSType { 
 + ANDROID , IOS , WEB , OTHER 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / MainThreadRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / MainThreadRuntimeProvider . java 
 index d76dcd2 . . 18ec1d4 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / MainThreadRuntimeProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / MainThreadRuntimeProvider . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package im . actor . runtime ; 
 
 + import im . actor . runtime . os . OSType ; 
 + 
 public class MainThreadRuntimeProvider implements MainThreadRuntime { 
 @ Override 
 public void postToMainThread ( Runnable runnable ) { 
 @ @ - 15 , 4 + 17 , 9 @ @ public class MainThreadRuntimeProvider implements MainThreadRuntime { 
 public boolean isSingleThread ( ) { 
 throw new RuntimeException ( " Dumb " ) ; 
 } 
 + 
 + @ Override 
 + public OSType getOSType ( ) { 
 + throw new RuntimeException ( " Dumb " ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java 
 index b6d1eab . . 90259d7 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java 
 @ @ - 4 , 7 + 4 , 6 @ @ 
 
 package im . actor . core . modules . internal . file ; 
 
 - import java . lang . ref . WeakReference ; 
 import java . util . ArrayList ; 
 
 import im . actor . core . entity . FileReference ; 
 @ @ - 14 , 14 + 13 , 14 @ @ import im . actor . core . util . ModuleActor ; 
 import im . actor . core . util . RandomUtils ; 
 import im . actor . core . viewmodel . FileCallback ; 
 import im . actor . core . viewmodel . FileEventCallback ; 
 - import im . actor . runtime . Log ; 
 - import im . actor . runtime . Storage ; 
 + import im . actor . runtime . * ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . actors . Props ; 
 import im . actor . runtime . actors . messages . PoisonPill ; 
 import im . actor . runtime . files . FileSystemReference ; 
 import im . actor . runtime . storage . KeyValueEngine ; 
 + import im . actor . runtime . threading . WeakReferenceCompat ; 
 
 public class DownloadManager extends ModuleActor { 
 
 @ @ - 761 , 13 + 760 , 14 @ @ public class DownloadManager extends ModuleActor { 
 } 
 
 private class WeakCallbackHolder { 
 - private WeakReference < FileEventCallback > callbackWeakReference ; 
 + 
 + private WeakReferenceCompat < FileEventCallback > callbackWeakReference ; 
 
 public WeakCallbackHolder ( FileEventCallback callbackWeakReference ) { 
 - this . callbackWeakReference = new WeakReference < > ( callbackWeakReference ) ; 
 + this . callbackWeakReference = im . actor . runtime . Runtime . createWeakReference ( callbackWeakReference ) ; 
 } 
 
 - public WeakReference < FileEventCallback > getCallbackWeakReference ( ) { 
 + public WeakReferenceCompat < FileEventCallback > getCallbackWeakReference ( ) { 
 return callbackWeakReference ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericThreadingProvider . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericThreadingProvider . java 
 index 2c98a06 . . cd3c2c8 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericThreadingProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / GenericThreadingProvider . java 
 @ @ - 6 , 10 + 6 , 12 @ @ import im . actor . runtime . generic . threading . GenericImmediateDispatcher ; 
 import im . actor . runtime . generic . threading . GenericThreadLocal ; 
 import im . actor . runtime . ThreadingRuntime ; 
 import im . actor . runtime . actors . ThreadPriority ; 
 + import im . actor . runtime . generic . threading . GenericWeakReference ; 
 import im . actor . runtime . threading . AtomicIntegerCompat ; 
 import im . actor . runtime . threading . AtomicLongCompat ; 
 import im . actor . runtime . threading . ImmediateDispatcher ; 
 import im . actor . runtime . threading . ThreadLocalCompat ; 
 + import im . actor . runtime . threading . WeakReferenceCompat ; 
 
 public abstract class GenericThreadingProvider implements ThreadingRuntime { 
 
 @ @ - 43 , 6 + 45 , 11 @ @ public abstract class GenericThreadingProvider implements ThreadingRuntime { 
 } 
 
 @ Override 
 + public < T > WeakReferenceCompat < T > createWeakReference ( T val ) { 
 + return new GenericWeakReference < > ( val ) ; 
 + } 
 + 
 + @ Override 
 public AtomicLongCompat createAtomicLong ( long value ) { 
 return new GenericAtomicLong ( value ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericWeakReference . java b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericWeakReference . java 
 new file mode 100644 
 index 0000000 . . de5d4e1 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - generic / src / main / java / im / actor / runtime / generic / threading / GenericWeakReference . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package im . actor . runtime . generic . threading ; 
 + 
 + import java . lang . ref . WeakReference ; 
 + 
 + import im . actor . runtime . threading . WeakReferenceCompat ; 
 + 
 + public class GenericWeakReference < T > extends WeakReferenceCompat < T > { 
 + 
 + private WeakReference < T > weakReference ; 
 + 
 + public GenericWeakReference ( T val ) { 
 + weakReference = new WeakReference < T > ( val ) ; 
 + } 
 + 
 + @ Override 
 + public T get ( ) { 
 + return weakReference . get ( ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java 
 index bf164f7 . . ac5427b 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java 
 @ @ - 13 , 11 + 13 , 13 @ @ import im . actor . runtime . js . threading . JsAtomicLong ; 
 import im . actor . runtime . js . threading . JsDispatcher ; 
 import im . actor . runtime . js . threading . JsImmediateDispatcher ; 
 import im . actor . runtime . js . threading . JsThreadLocal ; 
 + import im . actor . runtime . js . threading . JsWeakReference ; 
 import im . actor . runtime . threading . AtomicIntegerCompat ; 
 import im . actor . runtime . threading . AtomicLongCompat ; 
 import im . actor . runtime . threading . Dispatcher ; 
 import im . actor . runtime . threading . ImmediateDispatcher ; 
 import im . actor . runtime . threading . ThreadLocalCompat ; 
 + import im . actor . runtime . threading . WeakReferenceCompat ; 
 
 public class JsThreadingProvider implements ThreadingRuntime { 
 
 @ @ - 58 , 6 + 60 , 11 @ @ public class JsThreadingProvider implements ThreadingRuntime { 
 } 
 
 @ Override 
 + public < T > WeakReferenceCompat < T > createWeakReference ( T val ) { 
 + return new JsWeakReference < > ( val ) ; 
 + } 
 + 
 + @ Override 
 public Dispatcher createDispatcher ( String name ) { 
 return new JsDispatcher ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsWeakReference . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsWeakReference . java 
 new file mode 100644 
 index 0000000 . . 91ee4d4 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsWeakReference . java 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + package im . actor . runtime . js . threading ; 
 + 
 + import im . actor . runtime . threading . WeakReferenceCompat ; 
 + 
 + public class JsWeakReference < T > extends WeakReferenceCompat < T > { 
 + 
 + private T value ; 
 + 
 + public JsWeakReference ( T value ) { 
 + this . value = value ; 
 + } 
 + 
 + @ Override 
 + public T get ( ) { 
 + return value ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 index dac44ce . . a72b1ac 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import im . actor . runtime . threading . AtomicIntegerCompat ; 
 import im . actor . runtime . threading . AtomicLongCompat ; 
 import im . actor . runtime . threading . ImmediateDispatcher ; 
 import im . actor . runtime . threading . ThreadLocalCompat ; 
 + import im . actor . runtime . threading . WeakReferenceCompat ; 
 
 public class Runtime { 
 
 @ @ - 54 , 6 + 55 , 10 @ @ public class Runtime { 
 return threadingRuntime . createThreadLocal ( ) ; 
 } 
 
 + public static < T > WeakReferenceCompat < T > createWeakReference ( T val ) { 
 + return threadingRuntime . createWeakReference ( val ) ; 
 + } 
 + 
 public static boolean isSingleThread ( ) { 
 return mainThreadRuntime . isSingleThread ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / ThreadingRuntime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / ThreadingRuntime . java 
 index 596373f . . 3adce47 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / ThreadingRuntime . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / ThreadingRuntime . java 
 @ @ - 12 , 6 + 12 , 7 @ @ import im . actor . runtime . threading . AtomicIntegerCompat ; 
 import im . actor . runtime . threading . AtomicLongCompat ; 
 import im . actor . runtime . threading . ImmediateDispatcher ; 
 import im . actor . runtime . threading . ThreadLocalCompat ; 
 + import im . actor . runtime . threading . WeakReferenceCompat ; 
 
 / * * 
 * Provider for multithreading support . Contains all required methods for performing asynchronous operations . 
 @ @ - 52 , 7 + 53 , 7 @ @ public interface ThreadingRuntime { 
 int getCoresCount ( ) ; 
 
 / * * 
 - * Creating compatable AtomicInteger object 
 + * Creating compatible AtomicInteger object 
 * 
 * @ param value initial value of AtomicInteger 
 * @ return the AtomicInteger 
 @ @ - 61 , 7 + 62 , 7 @ @ public interface ThreadingRuntime { 
 AtomicIntegerCompat createAtomicInt ( int value ) ; 
 
 / * * 
 - * Creating compatable AtomicLong object 
 + * Creating compatible AtomicLong object 
 * 
 * @ param value initial value of AtomicLong 
 * @ return the AtomicLong 
 @ @ - 70 , 7 + 71 , 7 @ @ public interface ThreadingRuntime { 
 AtomicLongCompat createAtomicLong ( long value ) ; 
 
 / * * 
 - * Creating compatable ThreadLocal object 
 + * Creating compatible ThreadLocal object 
 * 
 * @ param < T > type of container 
 * @ return the ThreadLocal object 
 @ @ - 79 , 6 + 80 , 16 @ @ public interface ThreadingRuntime { 
 < T > ThreadLocalCompat < T > createThreadLocal ( ) ; 
 
 / * * 
 + * Creating compatible weak reference 
 + * 
 + * @ param val value for reference 
 + * @ param < T > type of reference 
 + * @ return weak reference 
 + * / 
 + @ ObjectiveCName ( " createWeakReference : " ) 
 + < T > WeakReferenceCompat < T > createWeakReference ( T val ) ; 
 + 
 + / * * 
 * Creating Dispatcher for very lightweight tasks 
 * 
 * @ return the Dispatcher object 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / WeakReferenceCompat . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / WeakReferenceCompat . java 
 new file mode 100644 
 index 0000000 . . 6b2c922 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / WeakReferenceCompat . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package im . actor . runtime . threading ; 
 + 
 + / * * 
 + * Compatible Weak Reference 
 + * 
 + * @ param < T > type of reference 
 + * / 
 + public abstract class WeakReferenceCompat < T > { 
 + public abstract T get ( ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / ThreadingRuntimeProvider . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / ThreadingRuntimeProvider . java 
 index e67012f . . 95e0dcf 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / ThreadingRuntimeProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / template / java / im / actor / runtime / ThreadingRuntimeProvider . java 
 @ @ - 6 , 6 + 6 , 7 @ @ import im . actor . runtime . threading . AtomicLongCompat ; 
 import im . actor . runtime . threading . Dispatcher ; 
 import im . actor . runtime . threading . ImmediateDispatcher ; 
 import im . actor . runtime . threading . ThreadLocalCompat ; 
 + import im . actor . runtime . threading . WeakReferenceCompat ; 
 
 public class ThreadingRuntimeProvider implements ThreadingRuntime { 
 
 @ @ - 45 , 6 + 46 , 11 @ @ public class ThreadingRuntimeProvider implements ThreadingRuntime { 
 } 
 
 @ Override 
 + public < T > WeakReferenceCompat < T > createWeakReference ( T val ) { 
 + throw new RuntimeException ( " Dumb " ) ; 
 + } 
 + 
 + @ Override 
 public Dispatcher createDispatcher ( String name ) { 
 throw new RuntimeException ( " Dumb " ) ; 
 }
