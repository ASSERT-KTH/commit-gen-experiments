BLEU SCORE: 0.2102369368326755

TEST MSG: feat ( server : http ) : Hooks to inject your own routes in runtime
GENERATED MSG: feat ( server : sdk ) : ability to set custom HTTP API routes

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > index 7d2aa4c . . a75570d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala < nl > @ @ - 7 , 20 + 7 , 20 @ @ import scala . concurrent . { ExecutionContext , Future } < nl > < nl > trait Hook < nl > < nl > - trait Hook0 extends Hook { < nl > - def run ( ) : Future [ Unit ] < nl > + trait Hook0 [ R ] extends Hook { < nl > + def run ( ) : Future [ R ] < nl > } < nl > < nl > - trait Hook1 [ A ] extends Hook { < nl > - def run ( a : A ) : Future [ Unit ] < nl > + trait Hook1 [ R , A ] extends Hook { < nl > + def run ( a : A ) : Future [ R ] < nl > } < nl > < nl > - trait Hook2 [ A , B ] extends Hook { < nl > - def run ( a : A , b : B ) : Future [ Unit ] < nl > + trait Hook2 [ R , A , B ] extends Hook { < nl > + def run ( a : A , b : B ) : Future [ R ] < nl > } < nl > < nl > - trait Hook3 [ A , B , C ] extends Hook { < nl > - def run ( a : A , b : B , c : C ) : Future [ Unit ] < nl > + trait Hook3 [ R , A , B , C ] extends Hook { < nl > + def run ( a : A , b : B , c : C ) : Future [ R ] < nl > } < nl > < nl > class HooksStorage [ H < : Hook ] { < nl > @ @ - 32 , 20 + 32 , 20 @ @ class HooksStorage [ H < : Hook ] { < nl > throw HookException . HookAlreadyRegistered ( name ) < nl > } < nl > < nl > - final class HooksStorage0 [ H < : Hook0 ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > - def runAll ( ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( ) ) map ( _ ⇒ ( ) ) < nl > + final class HooksStorage0 [ H < : Hook0 [ R ] , R ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > + def runAll ( ) : Future [ Seq [ R ] ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( ) ) < nl > } < nl > < nl > - final class HooksStorage1 [ H < : Hook1 [ A ] , A ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > - def runAll ( a : A ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a ) ) map ( _ ⇒ ( ) ) < nl > + final class HooksStorage1 [ H < : Hook1 [ R , A ] , R , A ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > + def runAll ( a : A ) : Future [ Seq [ R ] ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a ) ) < nl > } < nl > < nl > - final class HooksStorage2 [ H < : Hook2 [ A , B ] , A , B ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > - def runAll ( a : A , b : B ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a , b ) ) map ( _ ⇒ ( ) ) < nl > + final class HooksStorage2 [ H < : Hook2 [ R , A , B ] , R , A , B ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > + def runAll ( a : A , b : B ) : Future [ Seq [ R ] ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a , b ) ) < nl > } < nl > < nl > - final class HooksStorage3 [ H < : Hook3 [ A , B , C ] , A , B , C ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > - def runAll ( a : A , b : B , c : C ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a , b , c ) ) map ( _ ⇒ ( ) ) < nl > + final class HooksStorage3 [ H < : Hook3 [ R , A , B , C ] , R , A , B , C ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { < nl > + def runAll ( a : A , b : B , c : C ) : Future [ Seq [ R ] ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a , b , c ) ) < nl > } < nl > < nl > abstract class HooksControl < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > index 241a2bc . . e10611e 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala < nl > @ @ - 38 , 17 + 38 , 17 @ @ object UserExtension extends ExtensionId [ UserExtensionImpl ] with ExtensionIdProv < nl > } < nl > < nl > final class UserHooksControl ( implicit ec : ExecutionContext ) extends HooksControl { < nl > - val afterAuth = new HooksStorage3 [ UserHook . AfterAuthHook , Int , Int , String ] < nl > - val beforeEmailContactRegistered = new HooksStorage2 [ UserHook . BeforeEmailContactRegisteredHook , Int , String ] < nl > + val afterAuth = new HooksStorage3 [ UserHook . AfterAuthHook , Unit , Int , Int , String ] < nl > + val beforeEmailContactRegistered = new HooksStorage2 [ UserHook . BeforeEmailContactRegisteredHook , Unit , Int , String ] < nl > } < nl > < nl > object UserHook { < nl > < nl > - abstract class AfterAuthHook ( system : ActorSystem ) extends Hook3 [ Int , Int , String ] { < nl > + abstract class AfterAuthHook ( system : ActorSystem ) extends Hook3 [ Unit , Int , Int , String ] { < nl > override def run ( userId : Int , appId : Int , deviceTitle : String ) : Future [ Unit ] < nl > } < nl > < nl > - abstract class BeforeEmailContactRegisteredHook ( system : ActorSystem ) extends Hook2 [ Int , String ] { < nl > + abstract class BeforeEmailContactRegisteredHook ( system : ActorSystem ) extends Hook2 [ Unit , Int , String ] { < nl > def run ( userId : Int , email : String ) : Future [ Unit ] < nl > } < nl > } < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > index 5733391 . . 96c519a 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > @ @ - 1 , 13 + 1 , 11 @ @ < nl > package im . actor . server . api . http < nl > < nl > - import akka . actor . ActorSystem < nl > + import akka . actor . _ < nl > import akka . http . ServerSettings < nl > import akka . http . scaladsl . Http < nl > - import akka . http . scaladsl . model . HttpMethods . _ < nl > - import akka . http . scaladsl . model . headers . _ < nl > import akka . http . scaladsl . server . Directives . _ < nl > import akka . http . scaladsl . server . Route < nl > - import akka . stream . Materializer < nl > + import akka . stream . { ActorMaterializer , Materializer } < nl > import com . typesafe . config . Config < nl > import im . actor . server . api . http . app . AppFilesHandler < nl > import im . actor . server . api . http . bots . BotsHandler < nl > @ @ - 20 , 16 + 18 , 32 @ @ import im . actor . server . group . { GroupExtension , GroupViewRegion } < nl > import im . actor . tls . TlsContext < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > - import scala . concurrent . ExecutionContext < nl > + import scala . concurrent . { Future , ExecutionContext } < nl > import scala . concurrent . duration . _ < nl > import scala . util . { Failure , Success } < nl > < nl > - object HttpApiFrontend { < nl > + final class HttpApi ( _ system : ActorSystem ) extends Extension { < nl > + implicit val system = _ system < nl > + implicit val ec = system . dispatcher < nl > + implicit val mat = ActorMaterializer ( ) < nl > + < nl > + val hooks = new HttpApiHookControl < nl > + < nl > + HttpApiFrontend . start ( system . settings . config ) < nl > + } < nl > + < nl > + object HttpApi extends ExtensionId [ HttpApi ] with ExtensionIdProvider { < nl > + override def createExtension ( system : ExtendedActorSystem ) : HttpApi = new HttpApi ( system ) < nl > + < nl > + override def lookup ( ) : ExtensionId [ _ < : Extension ] = HttpApi < nl > + } < nl > + < nl > + private object HttpApiFrontend { < nl > import HttpApiHelpers . _ < nl > < nl > private val IdleTimeout = 15 . minutes < nl > < nl > - def start ( serverConfig : Config , customRoutes : Seq [ Route ] = Seq . empty ) ( < nl > + def start ( serverConfig : Config ) ( < nl > implicit < nl > system : ActorSystem , < nl > materializer : Materializer < nl > @ @ - 37 , 13 + 51 , 13 @ @ object HttpApiFrontend { < nl > HttpApiConfig . load ( serverConfig . getConfig ( " http " ) ) match { < nl > case Success ( apiConfig ) ⇒ < nl > val tlsContext = TlsContext . load ( serverConfig . getConfig ( " tls . keystores " ) ) . right . toOption < nl > - start ( apiConfig , customRoutes , tlsContext ) < nl > + start ( apiConfig , tlsContext ) < nl > case Failure ( e ) ⇒ < nl > throw e < nl > } < nl > } < nl > < nl > - def start ( config : HttpApiConfig , customRoutes : Seq [ Route ] , tlsContext : Option [ TlsContext ] ) ( < nl > + def start ( config : HttpApiConfig , tlsContext : Option [ TlsContext ] ) ( < nl > implicit < nl > system : ActorSystem , < nl > materializer : Materializer < nl > @ @ - 73 , 7 + 87 , 13 @ @ object HttpApiFrontend { < nl > } < nl > / / format : ON < nl > < nl > - def routes : Route = customRoutes . foldLeft ( defaultRoutes ) ( _ ~ _ ) < nl > + def routes : Future [ Route ] = < nl > + for { < nl > + custom ← customRoutes < nl > + } yield custom . foldLeft ( defaultRoutes ) ( _ ~ _ ) < nl > + < nl > + def customRoutes : Future [ Seq [ Route ] ] = < nl > + HttpApi ( system ) . hooks . routesHook . runAll ( ) < nl > < nl > val defaultSettings = ServerSettings ( system ) < nl > < nl > @ @ - 84 , 8 + 104 , 7 @ @ object HttpApiFrontend { < nl > settings = defaultSettings . copy ( timeouts = defaultSettings . timeouts . copy ( idleTimeout = IdleTimeout ) ) < nl > ) < nl > . runForeach { connection ⇒ < nl > - connection handleWith Route . handlerFlow ( routes ) < nl > + routes map ( connection handleWith Route . handlerFlow ( _ ) ) < nl > } < nl > } < nl > - < nl > } < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala < nl > new file mode 100644 < nl > index 0000000 . . e473353 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala < nl > @ @ - 0 , 0 + 1 , 17 @ @ < nl > + package im . actor . server . api . http < nl > + < nl > + import akka . actor . ActorSystem < nl > + import akka . http . scaladsl . server . Route < nl > + import im . actor . server . hook . { HooksStorage0 , HooksControl , Hook0 } < nl > + < nl > + import scala . concurrent . ExecutionContext < nl > + < nl > + object HttpApiHook { < nl > + abstract class RoutesHook ( system : ActorSystem ) extends Hook0 [ Route ] < nl > + } < nl > + < nl > + final class HttpApiHookControl ( implicit ec : ExecutionContext ) extends HooksControl { < nl > + import HttpApiHook . _ < nl > + < nl > + val routesHook = new HooksStorage0 [ RoutesHook , Route ] ( ) < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 4acac22 . . c66d35c 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 8 , 7 + 8 , 7 @ @ import com . typesafe . config . { Config , ConfigFactory , ConfigException } < nl > import im . actor . config . ActorConfig < nl > import im . actor . server . activation . gate . { GateCodeActivation , GateConfig } < nl > import im . actor . server . activation . internal . { ActivationConfig , InternalCodeActivation } < nl > - import im . actor . server . api . http . { HttpApiConfig , HttpApiFrontend } < nl > + import im . actor . server . api . http . { HttpApi , HttpApiConfig } < nl > import im . actor . server . api . rpc . RpcApiExtension < nl > import im . actor . server . api . rpc . service . auth . AuthServiceImpl < nl > import im . actor . server . api . rpc . service . configs . ConfigsServiceImpl < nl > @ @ - 260 , 7 + 260 , 7 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > Frontend . start ( serverConfig ) < nl > < nl > system . log . debug ( " Starting Http Api " ) < nl > - HttpApiFrontend . start ( serverConfig , httpRoutes ( system ) ) < nl > + HttpApi ( system ) < nl > < nl > ActorServer ( system ) < nl > } catch { < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > index be0c086 . . 84b2b23 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > @ @ - 17 , 7 + 17 , 7 @ @ import im . actor . server . acl . ACLUtils < nl > import im . actor . server . api . http . json . JsonFormatters . _ < nl > import im . actor . server . api . http . json . { AvatarUrls , _ } < nl > import im . actor . server . api . http . webhooks . OutgoingHooksErrors < nl > - import im . actor . server . api . http . { HttpApiConfig , HttpApiFrontend } < nl > + import im . actor . server . api . http . { HttpApi , HttpApiConfig , HttpApiFrontend } < nl > import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } < nl > import im . actor . server . api . rpc . service . messaging < nl > import im . actor . server . file . { FileStorageExtension , ImageUtils } < nl > @ @ - 106 , 7 + 106 , 7 @ @ final class HttpApiFrontendSpec < nl > < nl > val resourcesPath = Paths . get ( getClass . getResource ( " / files " ) . toURI ) . toFile . getCanonicalPath < nl > val config = HttpApiConfig ( " 127 . 0 . 0 . 1 " , 9000 , " http " , " localhost " , resourcesPath , None ) < nl > - HttpApiFrontend . start ( config , Seq . empty , None ) < nl > + HttpApi ( system ) < nl > < nl > val http = Http ( )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > index e2a35c8 . . a50007f 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala < nl > @ @ - 34 , 7 + 34 , 7 @ @ object HttpApiFrontend { < nl > < nl > private val IdleTimeout = 15 . minutes < nl > < nl > - def start ( serverConfig : Config ) ( < nl > + def start ( serverConfig : Config , customRoutes : Seq [ Route ] = Seq . empty ) ( < nl > implicit < nl > system : ActorSystem , < nl > materializer : Materializer < nl > @ @ - 42 , 13 + 42 , 13 @ @ object HttpApiFrontend { < nl > HttpApiConfig . load ( serverConfig . getConfig ( " webapp " ) ) match { < nl > case Success ( apiConfig ) ⇒ < nl > val tlsContext = TlsContext . load ( serverConfig . getConfig ( " tls . keystores " ) ) . right . toOption < nl > - start ( apiConfig , tlsContext ) < nl > + start ( apiConfig , customRoutes , tlsContext ) < nl > case Failure ( e ) ⇒ < nl > throw e < nl > } < nl > } < nl > < nl > - def start ( config : HttpApiConfig , tlsContext : Option [ TlsContext ] ) ( < nl > + def start ( config : HttpApiConfig , customRoutes : Seq [ Route ] , tlsContext : Option [ TlsContext ] ) ( < nl > implicit < nl > system : ActorSystem , < nl > materializer : Materializer < nl > @ @ - 66 , 7 + 66 , 7 @ @ object HttpApiFrontend { < nl > val app = new AppFilesHandler ( config . staticFiles ) < nl > < nl > / / format : OFF < nl > - def routes : Route = < nl > + def defaultRoutes : Route = < nl > app . routes ~ < nl > pathPrefix ( " v1 " ) { < nl > respondWithDefaultHeaders ( corsHeaders ) { < nl > @ @ - 78 , 6 + 78 , 8 @ @ object HttpApiFrontend { < nl > } < nl > / / format : ON < nl > < nl > + def routes : Route = customRoutes . foldLeft ( defaultRoutes ) ( _ ~ _ ) < nl > + < nl > val defaultSettings = ServerSettings ( system ) < nl > < nl > Http ( ) . bind ( < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 35263b6 . . c4167a2 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server < nl > < nl > import akka . actor . _ < nl > import akka . cluster . Cluster < nl > + import akka . http . scaladsl . server . Route < nl > import akka . stream . ActorMaterializer < nl > import com . typesafe . config . { Config , ConfigFactory , ConfigException } < nl > import im . actor . config . ActorConfig < nl > @ @ - 53 , 7 + 54 , 7 @ @ object ActorServer { < nl > def newBuilder : ActorServerBuilder = ActorServerBuilder ( ) < nl > } < nl > < nl > - final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( ) ) extends ActorServerModules { < nl > + final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( ) , httpRoutes : Seq [ Route ] = Seq . empty ) extends ActorServerModules { < nl > / * * < nl > * < nl > * @ param config < nl > @ @ - 62 , 6 + 63 , 13 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > def withDefaultConfig ( config : Config ) = this . copy ( defaultConfig = config ) < nl > < nl > / * * < nl > + * < nl > + * @ param routes < nl > + * @ return < nl > + * / < nl > + def withHttpRoutes ( routes : Seq [ Route ] ) = this . copy ( httpRoutes = httpRoutes ) < nl > + < nl > + / * * < nl > * Starts a server < nl > * @ return < nl > * / < nl > @ @ - 241 , 7 + 249 , 7 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > Frontend . start ( serverConfig ) < nl > < nl > system . log . debug ( " Starting Http Api " ) < nl > - HttpApiFrontend . start ( serverConfig ) < nl > + HttpApiFrontend . start ( serverConfig , httpRoutes ) < nl > < nl > ActorServer ( system ) < nl > } catch { < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > index 157a996 . . ad957f6 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > @ @ - 105 , 7 + 105 , 7 @ @ final class HttpApiFrontendSpec < nl > < nl > val resourcesPath = Paths . get ( getClass . getResource ( " / files " ) . toURI ) . toFile . getCanonicalPath < nl > val config = HttpApiConfig ( " 127 . 0 . 0 . 1 " , 9000 , " http " , " localhost " , resourcesPath , None ) < nl > - HttpApiFrontend . start ( config , None ) < nl > + HttpApiFrontend . start ( config , Seq . empty , None ) < nl > < nl > val http = Http ( )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 index 7d2aa4c . . a75570d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / hook / Hook . scala 
 @ @ - 7 , 20 + 7 , 20 @ @ import scala . concurrent . { ExecutionContext , Future } 
 
 trait Hook 
 
 - trait Hook0 extends Hook { 
 - def run ( ) : Future [ Unit ] 
 + trait Hook0 [ R ] extends Hook { 
 + def run ( ) : Future [ R ] 
 } 
 
 - trait Hook1 [ A ] extends Hook { 
 - def run ( a : A ) : Future [ Unit ] 
 + trait Hook1 [ R , A ] extends Hook { 
 + def run ( a : A ) : Future [ R ] 
 } 
 
 - trait Hook2 [ A , B ] extends Hook { 
 - def run ( a : A , b : B ) : Future [ Unit ] 
 + trait Hook2 [ R , A , B ] extends Hook { 
 + def run ( a : A , b : B ) : Future [ R ] 
 } 
 
 - trait Hook3 [ A , B , C ] extends Hook { 
 - def run ( a : A , b : B , c : C ) : Future [ Unit ] 
 + trait Hook3 [ R , A , B , C ] extends Hook { 
 + def run ( a : A , b : B , c : C ) : Future [ R ] 
 } 
 
 class HooksStorage [ H < : Hook ] { 
 @ @ - 32 , 20 + 32 , 20 @ @ class HooksStorage [ H < : Hook ] { 
 throw HookException . HookAlreadyRegistered ( name ) 
 } 
 
 - final class HooksStorage0 [ H < : Hook0 ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 - def runAll ( ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( ) ) map ( _ ⇒ ( ) ) 
 + final class HooksStorage0 [ H < : Hook0 [ R ] , R ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 + def runAll ( ) : Future [ Seq [ R ] ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( ) ) 
 } 
 
 - final class HooksStorage1 [ H < : Hook1 [ A ] , A ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 - def runAll ( a : A ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a ) ) map ( _ ⇒ ( ) ) 
 + final class HooksStorage1 [ H < : Hook1 [ R , A ] , R , A ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 + def runAll ( a : A ) : Future [ Seq [ R ] ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a ) ) 
 } 
 
 - final class HooksStorage2 [ H < : Hook2 [ A , B ] , A , B ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 - def runAll ( a : A , b : B ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a , b ) ) map ( _ ⇒ ( ) ) 
 + final class HooksStorage2 [ H < : Hook2 [ R , A , B ] , R , A , B ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 + def runAll ( a : A , b : B ) : Future [ Seq [ R ] ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a , b ) ) 
 } 
 
 - final class HooksStorage3 [ H < : Hook3 [ A , B , C ] , A , B , C ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 - def runAll ( a : A , b : B , c : C ) : Future [ Unit ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a , b , c ) ) map ( _ ⇒ ( ) ) 
 + final class HooksStorage3 [ H < : Hook3 [ R , A , B , C ] , R , A , B , C ] ( implicit ec : ExecutionContext ) extends HooksStorage [ H ] { 
 + def runAll ( a : A , b : B , c : C ) : Future [ Seq [ R ] ] = FutureExt . ftraverse ( hooksList ) ( _ . run ( a , b , c ) ) 
 } 
 
 abstract class HooksControl 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 index 241a2bc . . e10611e 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserExtension . scala 
 @ @ - 38 , 17 + 38 , 17 @ @ object UserExtension extends ExtensionId [ UserExtensionImpl ] with ExtensionIdProv 
 } 
 
 final class UserHooksControl ( implicit ec : ExecutionContext ) extends HooksControl { 
 - val afterAuth = new HooksStorage3 [ UserHook . AfterAuthHook , Int , Int , String ] 
 - val beforeEmailContactRegistered = new HooksStorage2 [ UserHook . BeforeEmailContactRegisteredHook , Int , String ] 
 + val afterAuth = new HooksStorage3 [ UserHook . AfterAuthHook , Unit , Int , Int , String ] 
 + val beforeEmailContactRegistered = new HooksStorage2 [ UserHook . BeforeEmailContactRegisteredHook , Unit , Int , String ] 
 } 
 
 object UserHook { 
 
 - abstract class AfterAuthHook ( system : ActorSystem ) extends Hook3 [ Int , Int , String ] { 
 + abstract class AfterAuthHook ( system : ActorSystem ) extends Hook3 [ Unit , Int , Int , String ] { 
 override def run ( userId : Int , appId : Int , deviceTitle : String ) : Future [ Unit ] 
 } 
 
 - abstract class BeforeEmailContactRegisteredHook ( system : ActorSystem ) extends Hook2 [ Int , String ] { 
 + abstract class BeforeEmailContactRegisteredHook ( system : ActorSystem ) extends Hook2 [ Unit , Int , String ] { 
 def run ( userId : Int , email : String ) : Future [ Unit ] 
 } 
 } 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 index 5733391 . . 96c519a 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 @ @ - 1 , 13 + 1 , 11 @ @ 
 package im . actor . server . api . http 
 
 - import akka . actor . ActorSystem 
 + import akka . actor . _ 
 import akka . http . ServerSettings 
 import akka . http . scaladsl . Http 
 - import akka . http . scaladsl . model . HttpMethods . _ 
 - import akka . http . scaladsl . model . headers . _ 
 import akka . http . scaladsl . server . Directives . _ 
 import akka . http . scaladsl . server . Route 
 - import akka . stream . Materializer 
 + import akka . stream . { ActorMaterializer , Materializer } 
 import com . typesafe . config . Config 
 import im . actor . server . api . http . app . AppFilesHandler 
 import im . actor . server . api . http . bots . BotsHandler 
 @ @ - 20 , 16 + 18 , 32 @ @ import im . actor . server . group . { GroupExtension , GroupViewRegion } 
 import im . actor . tls . TlsContext 
 import slick . driver . PostgresDriver . api . _ 
 
 - import scala . concurrent . ExecutionContext 
 + import scala . concurrent . { Future , ExecutionContext } 
 import scala . concurrent . duration . _ 
 import scala . util . { Failure , Success } 
 
 - object HttpApiFrontend { 
 + final class HttpApi ( _ system : ActorSystem ) extends Extension { 
 + implicit val system = _ system 
 + implicit val ec = system . dispatcher 
 + implicit val mat = ActorMaterializer ( ) 
 + 
 + val hooks = new HttpApiHookControl 
 + 
 + HttpApiFrontend . start ( system . settings . config ) 
 + } 
 + 
 + object HttpApi extends ExtensionId [ HttpApi ] with ExtensionIdProvider { 
 + override def createExtension ( system : ExtendedActorSystem ) : HttpApi = new HttpApi ( system ) 
 + 
 + override def lookup ( ) : ExtensionId [ _ < : Extension ] = HttpApi 
 + } 
 + 
 + private object HttpApiFrontend { 
 import HttpApiHelpers . _ 
 
 private val IdleTimeout = 15 . minutes 
 
 - def start ( serverConfig : Config , customRoutes : Seq [ Route ] = Seq . empty ) ( 
 + def start ( serverConfig : Config ) ( 
 implicit 
 system : ActorSystem , 
 materializer : Materializer 
 @ @ - 37 , 13 + 51 , 13 @ @ object HttpApiFrontend { 
 HttpApiConfig . load ( serverConfig . getConfig ( " http " ) ) match { 
 case Success ( apiConfig ) ⇒ 
 val tlsContext = TlsContext . load ( serverConfig . getConfig ( " tls . keystores " ) ) . right . toOption 
 - start ( apiConfig , customRoutes , tlsContext ) 
 + start ( apiConfig , tlsContext ) 
 case Failure ( e ) ⇒ 
 throw e 
 } 
 } 
 
 - def start ( config : HttpApiConfig , customRoutes : Seq [ Route ] , tlsContext : Option [ TlsContext ] ) ( 
 + def start ( config : HttpApiConfig , tlsContext : Option [ TlsContext ] ) ( 
 implicit 
 system : ActorSystem , 
 materializer : Materializer 
 @ @ - 73 , 7 + 87 , 13 @ @ object HttpApiFrontend { 
 } 
 / / format : ON 
 
 - def routes : Route = customRoutes . foldLeft ( defaultRoutes ) ( _ ~ _ ) 
 + def routes : Future [ Route ] = 
 + for { 
 + custom ← customRoutes 
 + } yield custom . foldLeft ( defaultRoutes ) ( _ ~ _ ) 
 + 
 + def customRoutes : Future [ Seq [ Route ] ] = 
 + HttpApi ( system ) . hooks . routesHook . runAll ( ) 
 
 val defaultSettings = ServerSettings ( system ) 
 
 @ @ - 84 , 8 + 104 , 7 @ @ object HttpApiFrontend { 
 settings = defaultSettings . copy ( timeouts = defaultSettings . timeouts . copy ( idleTimeout = IdleTimeout ) ) 
 ) 
 . runForeach { connection ⇒ 
 - connection handleWith Route . handlerFlow ( routes ) 
 + routes map ( connection handleWith Route . handlerFlow ( _ ) ) 
 } 
 } 
 - 
 } 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala 
 new file mode 100644 
 index 0000000 . . e473353 
 - - - / dev / null 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiHook . scala 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + package im . actor . server . api . http 
 + 
 + import akka . actor . ActorSystem 
 + import akka . http . scaladsl . server . Route 
 + import im . actor . server . hook . { HooksStorage0 , HooksControl , Hook0 } 
 + 
 + import scala . concurrent . ExecutionContext 
 + 
 + object HttpApiHook { 
 + abstract class RoutesHook ( system : ActorSystem ) extends Hook0 [ Route ] 
 + } 
 + 
 + final class HttpApiHookControl ( implicit ec : ExecutionContext ) extends HooksControl { 
 + import HttpApiHook . _ 
 + 
 + val routesHook = new HooksStorage0 [ RoutesHook , Route ] ( ) 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 4acac22 . . c66d35c 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 8 , 7 + 8 , 7 @ @ import com . typesafe . config . { Config , ConfigFactory , ConfigException } 
 import im . actor . config . ActorConfig 
 import im . actor . server . activation . gate . { GateCodeActivation , GateConfig } 
 import im . actor . server . activation . internal . { ActivationConfig , InternalCodeActivation } 
 - import im . actor . server . api . http . { HttpApiConfig , HttpApiFrontend } 
 + import im . actor . server . api . http . { HttpApi , HttpApiConfig } 
 import im . actor . server . api . rpc . RpcApiExtension 
 import im . actor . server . api . rpc . service . auth . AuthServiceImpl 
 import im . actor . server . api . rpc . service . configs . ConfigsServiceImpl 
 @ @ - 260 , 7 + 260 , 7 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 Frontend . start ( serverConfig ) 
 
 system . log . debug ( " Starting Http Api " ) 
 - HttpApiFrontend . start ( serverConfig , httpRoutes ( system ) ) 
 + HttpApi ( system ) 
 
 ActorServer ( system ) 
 } catch { 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 index be0c086 . . 84b2b23 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 @ @ - 17 , 7 + 17 , 7 @ @ import im . actor . server . acl . ACLUtils 
 import im . actor . server . api . http . json . JsonFormatters . _ 
 import im . actor . server . api . http . json . { AvatarUrls , _ } 
 import im . actor . server . api . http . webhooks . OutgoingHooksErrors 
 - import im . actor . server . api . http . { HttpApiConfig , HttpApiFrontend } 
 + import im . actor . server . api . http . { HttpApi , HttpApiConfig , HttpApiFrontend } 
 import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } 
 import im . actor . server . api . rpc . service . messaging 
 import im . actor . server . file . { FileStorageExtension , ImageUtils } 
 @ @ - 106 , 7 + 106 , 7 @ @ final class HttpApiFrontendSpec 
 
 val resourcesPath = Paths . get ( getClass . getResource ( " / files " ) . toURI ) . toFile . getCanonicalPath 
 val config = HttpApiConfig ( " 127 . 0 . 0 . 1 " , 9000 , " http " , " localhost " , resourcesPath , None ) 
 - HttpApiFrontend . start ( config , Seq . empty , None ) 
 + HttpApi ( system ) 
 
 val http = Http ( )

NEAREST DIFF:
diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 index e2a35c8 . . a50007f 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiFrontend . scala 
 @ @ - 34 , 7 + 34 , 7 @ @ object HttpApiFrontend { 
 
 private val IdleTimeout = 15 . minutes 
 
 - def start ( serverConfig : Config ) ( 
 + def start ( serverConfig : Config , customRoutes : Seq [ Route ] = Seq . empty ) ( 
 implicit 
 system : ActorSystem , 
 materializer : Materializer 
 @ @ - 42 , 13 + 42 , 13 @ @ object HttpApiFrontend { 
 HttpApiConfig . load ( serverConfig . getConfig ( " webapp " ) ) match { 
 case Success ( apiConfig ) ⇒ 
 val tlsContext = TlsContext . load ( serverConfig . getConfig ( " tls . keystores " ) ) . right . toOption 
 - start ( apiConfig , tlsContext ) 
 + start ( apiConfig , customRoutes , tlsContext ) 
 case Failure ( e ) ⇒ 
 throw e 
 } 
 } 
 
 - def start ( config : HttpApiConfig , tlsContext : Option [ TlsContext ] ) ( 
 + def start ( config : HttpApiConfig , customRoutes : Seq [ Route ] , tlsContext : Option [ TlsContext ] ) ( 
 implicit 
 system : ActorSystem , 
 materializer : Materializer 
 @ @ - 66 , 7 + 66 , 7 @ @ object HttpApiFrontend { 
 val app = new AppFilesHandler ( config . staticFiles ) 
 
 / / format : OFF 
 - def routes : Route = 
 + def defaultRoutes : Route = 
 app . routes ~ 
 pathPrefix ( " v1 " ) { 
 respondWithDefaultHeaders ( corsHeaders ) { 
 @ @ - 78 , 6 + 78 , 8 @ @ object HttpApiFrontend { 
 } 
 / / format : ON 
 
 + def routes : Route = customRoutes . foldLeft ( defaultRoutes ) ( _ ~ _ ) 
 + 
 val defaultSettings = ServerSettings ( system ) 
 
 Http ( ) . bind ( 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 35263b6 . . c4167a2 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server 
 
 import akka . actor . _ 
 import akka . cluster . Cluster 
 + import akka . http . scaladsl . server . Route 
 import akka . stream . ActorMaterializer 
 import com . typesafe . config . { Config , ConfigFactory , ConfigException } 
 import im . actor . config . ActorConfig 
 @ @ - 53 , 7 + 54 , 7 @ @ object ActorServer { 
 def newBuilder : ActorServerBuilder = ActorServerBuilder ( ) 
 } 
 
 - final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( ) ) extends ActorServerModules { 
 + final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( ) , httpRoutes : Seq [ Route ] = Seq . empty ) extends ActorServerModules { 
 / * * 
 * 
 * @ param config 
 @ @ - 62 , 6 + 63 , 13 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 def withDefaultConfig ( config : Config ) = this . copy ( defaultConfig = config ) 
 
 / * * 
 + * 
 + * @ param routes 
 + * @ return 
 + * / 
 + def withHttpRoutes ( routes : Seq [ Route ] ) = this . copy ( httpRoutes = httpRoutes ) 
 + 
 + / * * 
 * Starts a server 
 * @ return 
 * / 
 @ @ - 241 , 7 + 249 , 7 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 Frontend . start ( serverConfig ) 
 
 system . log . debug ( " Starting Http Api " ) 
 - HttpApiFrontend . start ( serverConfig ) 
 + HttpApiFrontend . start ( serverConfig , httpRoutes ) 
 
 ActorServer ( system ) 
 } catch { 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 index 157a996 . . ad957f6 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 @ @ - 105 , 7 + 105 , 7 @ @ final class HttpApiFrontendSpec 
 
 val resourcesPath = Paths . get ( getClass . getResource ( " / files " ) . toURI ) . toFile . getCanonicalPath 
 val config = HttpApiConfig ( " 127 . 0 . 0 . 1 " , 9000 , " http " , " localhost " , resourcesPath , None ) 
 - HttpApiFrontend . start ( config , None ) 
 + HttpApiFrontend . start ( config , Seq . empty , None ) 
 
 val http = Http ( )
