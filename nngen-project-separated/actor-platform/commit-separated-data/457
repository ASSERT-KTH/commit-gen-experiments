BLEU SCORE: 0.11457509197294043

TEST MSG: fix ( server : messaging ) : safier migration
GENERATED MSG: fix ( server ) : doubling Status . Failure after pipeTo , closes # 115

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > index 1d4efaf . . 7d74beb 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala < nl > @ @ - 50 , 7 + 50 , 6 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > newMessages . toList : + < nl > MessagesRead ( Instant . ofEpochMilli ( d . lastReadAt . getMillis ) ) < nl > ) ) pipeTo self < nl > - < nl > case PersistEvents ( events ) ⇒ < nl > persistAll ( events ) { _ ⇒ < nl > events foreach ( e = > commit ( e ) ) < nl > @ @ - 60 , 14 + 59 , 16 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { < nl > case Status . Failure ( e ) ⇒ < nl > log . error ( e , " Failed to migrate " ) < nl > throw e < nl > - case _ ⇒ stash ( ) < nl > + case msg ⇒ < nl > + log . debug ( " Stashing while migrating { } " , msg . getClass . getName ) < nl > + stash ( ) < nl > } < nl > < nl > private def migrate ( ) : Unit = { < nl > context become migrating < nl > - db . run ( DialogRepo . findDialog ( userId , peer ) ) map { < nl > - case Some ( model ) ⇒ self ! model < nl > - case _ ⇒ self ! PersistEvents ( List ( Initialized ( ) ) ) < nl > - } < nl > + ( db . run ( DialogRepo . findDialog ( userId , peer ) ) map { < nl > + case Some ( model ) ⇒ model < nl > + case _ ⇒ PersistEvents ( List ( Initialized ( ) ) ) < nl > + } ) pipeTo self < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > index d53d6a6 . . 438fcfd 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala < nl > @ @ - 40 , 7 + 40 , 9 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { < nl > case Status . Failure ( e ) ⇒ < nl > log . error ( e , " Failed to migrate " ) < nl > throw e < nl > - case _ ⇒ stash ( ) < nl > + case msg ⇒ < nl > + log . debug ( " Stashing while migrating { } " , msg . getClass . getName ) < nl > + stash ( ) < nl > } < nl > < nl > private def migrate ( ) : Unit = {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > index f2324fa . . 3c6c640 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala < nl > @ @ - 79 , 7 + 79 , 6 @ @ trait GroupDialogHandlers extends UpdateCounters { < nl > } < nl > } else Future . successful ( MessageReceivedAck ( ) ) ) pipeTo replyTo onFailure { < nl > case e ⇒ < nl > - replyTo ! Status . Failure ( ReceiveFailed ) < nl > log . error ( e , " Failed to mark messages received " ) < nl > } < nl > } < nl > @ @ - 135 , 7 + 134 , 6 @ @ trait GroupDialogHandlers extends UpdateCounters { < nl > _ ← readerAckF < nl > } yield MessageReadAck ( ) ) pipeTo replyTo onFailure { < nl > case e ⇒ < nl > - replyTo ! Status . Failure ( ReadFailed ) < nl > log . error ( e , " Failed to mark messages read " ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala < nl > index d466e17 . . c3ab212 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala < nl > @ @ - 68 , 7 + 68 , 6 @ @ trait PrivateDialogHandlers extends UpdateCounters { < nl > Future . successful ( MessageReceivedAck ( ) ) < nl > } ) pipeTo replyTo onFailure { < nl > case e ⇒ < nl > - replyTo ! Status . Failure ( ReceiveFailed ) < nl > log . error ( e , " Failed to mark messages received " ) < nl > } < nl > } < nl > @ @ - 98 , 7 + 97 , 6 @ @ trait PrivateDialogHandlers extends UpdateCounters { < nl > Future . successful ( MessageReadAck ( ) ) < nl > } ) pipeTo replyTo onFailure { < nl > case e ⇒ < nl > - replyTo ! Status . Failure ( ReadFailed ) < nl > log . error ( e , " Failed to mark messages read " ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 09c9c81 . . c07b0d7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 197 , 10 + 197 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > } yield updates < nl > } < nl > < nl > - db . run ( action ) pipeTo replyTo onFailure { < nl > - case e ⇒ < nl > - replyTo ! Status . Failure ( e ) < nl > - } < nl > + db . run ( action ) pipeTo replyTo < nl > } < nl > } else { < nl > sender ( ) ! Status . Failure ( GroupErrors . UserAlreadyInvited ) < nl > @ @ - 217 , 9 + 214 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > val update = UpdateGroupUserKick ( groupId , kickedUserId , kickerUserId , date . getMillis , randomId ) < nl > val serviceMessage = GroupServiceMessages . userKicked ( kickedUserId ) < nl > < nl > - db . run ( removeUser ( kickedUserId , group . members . keySet , kickerAuthId , serviceMessage , update , date , randomId ) ) pipeTo replyTo onFailure { < nl > - case e ⇒ replyTo ! Status . Failure ( e ) < nl > - } < nl > + db . run ( removeUser ( kickedUserId , group . members . keySet , kickerAuthId , serviceMessage , update , date , randomId ) ) pipeTo replyTo < nl > } < nl > } < nl > < nl > @ @ - 232 , 9 + 227 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > < nl > val update = UpdateGroupUserLeave ( groupId , userId , date . getMillis , randomId ) < nl > val serviceMessage = GroupServiceMessages . userLeft ( userId ) < nl > - db . run ( removeUser ( userId , group . members . keySet , authId , serviceMessage , update , date , randomId ) ) pipeTo replyTo onFailure { < nl > - case e ⇒ replyTo ! Status . Failure ( e ) < nl > - } < nl > + db . run ( removeUser ( userId , group . members . keySet , authId , serviceMessage , update , date , randomId ) ) pipeTo replyTo < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index cb8d5fb . . ef173a8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 206 , 9 + 206 , 7 @ @ private [ group ] final class GroupProcessor < nl > < nl > val replyTo = sender ( ) < nl > < nl > - invite ( state , inviteeUserId , inviterUserId , inviterAuthId , randomId , evt . ts ) pipeTo replyTo onFailure { < nl > - case e ⇒ replyTo ! Status . Failure ( e ) < nl > - } < nl > + invite ( state , inviteeUserId , inviterUserId , inviterAuthId , randomId , evt . ts ) pipeTo replyTo < nl > } < nl > } else { < nl > sender ( ) ! Status . Failure ( GroupErrors . UserAlreadyInvited ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > index 4bec2b8 . . 7a5017c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > @ @ - 119 , 8 + 119 , 6 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorLoggin < nl > unstashAndWork ( e , state ) < nl > case Failure ( f ) ⇒ < nl > log . error ( f , " Failure while processing event { } " , e ) < nl > - replyTo ! Status . Failure ( f ) < nl > - < nl > unstashAndWork ( e , state ) < nl > } < nl > } < nl > @ @ - 140 , 8 + 138 , 6 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorLoggin < nl > unstashAndWorkBatch ( es , state ) < nl > case Failure ( e ) ⇒ < nl > log . error ( e , " Failure while processing event { } " , e ) < nl > - replyTo ! Status . Failure ( e ) < nl > - < nl > unstashAndWorkBatch ( es , state ) < nl > } < nl > } < nl > @ @ - 158 , 8 + 154 , 6 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorLoggin < nl > unstashAndWork ( e , state ) < nl > case Failure ( f ) ⇒ < nl > log . error ( f , " Failure while processing event { } " , e ) < nl > - replyTo ! Status . Failure ( f ) < nl > - < nl > unstashAndWork ( e , state ) < nl > } < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > index 8f4d368 . . 15379ca 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala < nl > @ @ - 15 , 12 + 15 , 6 @ @ import slick . driver . PostgresDriver . api . _ < nl > < nl > import scala . concurrent . Future < nl > < nl > - object HistoryErrors { < nl > - val ReceiveFailed = RpcError ( 500 , " RECEIVE _ FAILED " , " " , true , None ) < nl > - val ReadFailed = RpcError ( 500 , " READ _ FAILED " , " " , true , None ) < nl > - < nl > - } < nl > - < nl > trait HistoryHandlers { < nl > self : MessagingServiceImpl ⇒ < nl > < nl > @ @ - 34 , 9 + 28 , 7 @ @ trait HistoryHandlers { < nl > } < nl > } < nl > < nl > - db . run ( toDBIOAction ( action ) ) recover { < nl > - case ReceiveFailed ⇒ Error ( HistoryErrors . ReceiveFailed ) < nl > - } < nl > + db . run ( toDBIOAction ( action ) ) < nl > } < nl > < nl > override def jhandleMessageRead ( peer : ApiOutPeer , date : Long , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { < nl > @ @ - 46 , 9 + 38 , 7 @ @ trait HistoryHandlers { < nl > } < nl > } < nl > < nl > - db . run ( toDBIOAction ( action ) ) recover { < nl > - case ReadFailed ⇒ Error ( HistoryErrors . ReadFailed ) < nl > - } < nl > + db . run ( toDBIOAction ( action ) ) < nl > } < nl > < nl > override def jhandleClearChat ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > index 01ee7e7 . . 6deafc6 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > @ @ - 3 , 13 + 3 , 13 @ @ package im . actor . server . session < nl > import akka . testkit . TestProbe < nl > import com . typesafe . config . ConfigFactory < nl > import im . actor . api . rpc . _ < nl > - import im . actor . api . rpc . auth . { RequestSendAuthCodeObsolete , ResponseSendAuthCodeObsolete } < nl > + import im . actor . api . rpc . auth . { RequestSendAuthCodeObsolete , ResponseSendAuthCodeObsolete } < nl > import im . actor . api . rpc . codecs . RequestCodec < nl > import im . actor . api . rpc . contacts . UpdateContactRegistered < nl > import im . actor . api . rpc . weak . UpdateUserOffline < nl > import im . actor . server . ActorSpecification < nl > import im . actor . server . mtproto . protocol . _ < nl > - import im . actor . server . sequence . { SeqUpdatesManager , WeakUpdatesManager } < nl > + import im . actor . server . sequence . { SeqUpdatesManager , WeakUpdatesManager } < nl > < nl > import scala . concurrent . duration . _ < nl > import scala . util . Random

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 index 1d4efaf . . 7d74beb 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogProcessorMigration . scala 
 @ @ - 50 , 7 + 50 , 6 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { 
 newMessages . toList : + 
 MessagesRead ( Instant . ofEpochMilli ( d . lastReadAt . getMillis ) ) 
 ) ) pipeTo self 
 - 
 case PersistEvents ( events ) ⇒ 
 persistAll ( events ) { _ ⇒ 
 events foreach ( e = > commit ( e ) ) 
 @ @ - 60 , 14 + 59 , 16 @ @ trait DialogProcessorMigration extends Processor [ DialogState ] { 
 case Status . Failure ( e ) ⇒ 
 log . error ( e , " Failed to migrate " ) 
 throw e 
 - case _ ⇒ stash ( ) 
 + case msg ⇒ 
 + log . debug ( " Stashing while migrating { } " , msg . getClass . getName ) 
 + stash ( ) 
 } 
 
 private def migrate ( ) : Unit = { 
 context become migrating 
 - db . run ( DialogRepo . findDialog ( userId , peer ) ) map { 
 - case Some ( model ) ⇒ self ! model 
 - case _ ⇒ self ! PersistEvents ( List ( Initialized ( ) ) ) 
 - } 
 + ( db . run ( DialogRepo . findDialog ( userId , peer ) ) map { 
 + case Some ( model ) ⇒ model 
 + case _ ⇒ PersistEvents ( List ( Initialized ( ) ) ) 
 + } ) pipeTo self 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 index d53d6a6 . . 438fcfd 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogRootMigration . scala 
 @ @ - 40 , 7 + 40 , 9 @ @ trait DialogRootMigration extends Processor [ DialogRootState ] { 
 case Status . Failure ( e ) ⇒ 
 log . error ( e , " Failed to migrate " ) 
 throw e 
 - case _ ⇒ stash ( ) 
 + case msg ⇒ 
 + log . debug ( " Stashing while migrating { } " , msg . getClass . getName ) 
 + stash ( ) 
 } 
 
 private def migrate ( ) : Unit = {

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 index f2324fa . . 3c6c640 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialogHandlers . scala 
 @ @ - 79 , 7 + 79 , 6 @ @ trait GroupDialogHandlers extends UpdateCounters { 
 } 
 } else Future . successful ( MessageReceivedAck ( ) ) ) pipeTo replyTo onFailure { 
 case e ⇒ 
 - replyTo ! Status . Failure ( ReceiveFailed ) 
 log . error ( e , " Failed to mark messages received " ) 
 } 
 } 
 @ @ - 135 , 7 + 134 , 6 @ @ trait GroupDialogHandlers extends UpdateCounters { 
 _ ← readerAckF 
 } yield MessageReadAck ( ) ) pipeTo replyTo onFailure { 
 case e ⇒ 
 - replyTo ! Status . Failure ( ReadFailed ) 
 log . error ( e , " Failed to mark messages read " ) 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala 
 index d466e17 . . c3ab212 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialogHandlers . scala 
 @ @ - 68 , 7 + 68 , 6 @ @ trait PrivateDialogHandlers extends UpdateCounters { 
 Future . successful ( MessageReceivedAck ( ) ) 
 } ) pipeTo replyTo onFailure { 
 case e ⇒ 
 - replyTo ! Status . Failure ( ReceiveFailed ) 
 log . error ( e , " Failed to mark messages received " ) 
 } 
 } 
 @ @ - 98 , 7 + 97 , 6 @ @ trait PrivateDialogHandlers extends UpdateCounters { 
 Future . successful ( MessageReadAck ( ) ) 
 } ) pipeTo replyTo onFailure { 
 case e ⇒ 
 - replyTo ! Status . Failure ( ReadFailed ) 
 log . error ( e , " Failed to mark messages read " ) 
 } 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 09c9c81 . . c07b0d7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 197 , 10 + 197 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 } yield updates 
 } 
 
 - db . run ( action ) pipeTo replyTo onFailure { 
 - case e ⇒ 
 - replyTo ! Status . Failure ( e ) 
 - } 
 + db . run ( action ) pipeTo replyTo 
 } 
 } else { 
 sender ( ) ! Status . Failure ( GroupErrors . UserAlreadyInvited ) 
 @ @ - 217 , 9 + 214 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 val update = UpdateGroupUserKick ( groupId , kickedUserId , kickerUserId , date . getMillis , randomId ) 
 val serviceMessage = GroupServiceMessages . userKicked ( kickedUserId ) 
 
 - db . run ( removeUser ( kickedUserId , group . members . keySet , kickerAuthId , serviceMessage , update , date , randomId ) ) pipeTo replyTo onFailure { 
 - case e ⇒ replyTo ! Status . Failure ( e ) 
 - } 
 + db . run ( removeUser ( kickedUserId , group . members . keySet , kickerAuthId , serviceMessage , update , date , randomId ) ) pipeTo replyTo 
 } 
 } 
 
 @ @ - 232 , 9 + 227 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 
 val update = UpdateGroupUserLeave ( groupId , userId , date . getMillis , randomId ) 
 val serviceMessage = GroupServiceMessages . userLeft ( userId ) 
 - db . run ( removeUser ( userId , group . members . keySet , authId , serviceMessage , update , date , randomId ) ) pipeTo replyTo onFailure { 
 - case e ⇒ replyTo ! Status . Failure ( e ) 
 - } 
 + db . run ( removeUser ( userId , group . members . keySet , authId , serviceMessage , update , date , randomId ) ) pipeTo replyTo 
 } 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index cb8d5fb . . ef173a8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 206 , 9 + 206 , 7 @ @ private [ group ] final class GroupProcessor 
 
 val replyTo = sender ( ) 
 
 - invite ( state , inviteeUserId , inviterUserId , inviterAuthId , randomId , evt . ts ) pipeTo replyTo onFailure { 
 - case e ⇒ replyTo ! Status . Failure ( e ) 
 - } 
 + invite ( state , inviteeUserId , inviterUserId , inviterAuthId , randomId , evt . ts ) pipeTo replyTo 
 } 
 } else { 
 sender ( ) ! Status . Failure ( GroupErrors . UserAlreadyInvited ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 index 4bec2b8 . . 7a5017c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 @ @ - 119 , 8 + 119 , 6 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorLoggin 
 unstashAndWork ( e , state ) 
 case Failure ( f ) ⇒ 
 log . error ( f , " Failure while processing event { } " , e ) 
 - replyTo ! Status . Failure ( f ) 
 - 
 unstashAndWork ( e , state ) 
 } 
 } 
 @ @ - 140 , 8 + 138 , 6 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorLoggin 
 unstashAndWorkBatch ( es , state ) 
 case Failure ( e ) ⇒ 
 log . error ( e , " Failure while processing event { } " , e ) 
 - replyTo ! Status . Failure ( e ) 
 - 
 unstashAndWorkBatch ( es , state ) 
 } 
 } 
 @ @ - 158 , 8 + 154 , 6 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorLoggin 
 unstashAndWork ( e , state ) 
 case Failure ( f ) ⇒ 
 log . error ( f , " Failure while processing event { } " , e ) 
 - replyTo ! Status . Failure ( f ) 
 - 
 unstashAndWork ( e , state ) 
 } 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 index 8f4d368 . . 15379ca 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / HistoryHandlers . scala 
 @ @ - 15 , 12 + 15 , 6 @ @ import slick . driver . PostgresDriver . api . _ 
 
 import scala . concurrent . Future 
 
 - object HistoryErrors { 
 - val ReceiveFailed = RpcError ( 500 , " RECEIVE _ FAILED " , " " , true , None ) 
 - val ReadFailed = RpcError ( 500 , " READ _ FAILED " , " " , true , None ) 
 - 
 - } 
 - 
 trait HistoryHandlers { 
 self : MessagingServiceImpl ⇒ 
 
 @ @ - 34 , 9 + 28 , 7 @ @ trait HistoryHandlers { 
 } 
 } 
 
 - db . run ( toDBIOAction ( action ) ) recover { 
 - case ReceiveFailed ⇒ Error ( HistoryErrors . ReceiveFailed ) 
 - } 
 + db . run ( toDBIOAction ( action ) ) 
 } 
 
 override def jhandleMessageRead ( peer : ApiOutPeer , date : Long , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { 
 @ @ - 46 , 9 + 38 , 7 @ @ trait HistoryHandlers { 
 } 
 } 
 
 - db . run ( toDBIOAction ( action ) ) recover { 
 - case ReadFailed ⇒ Error ( HistoryErrors . ReadFailed ) 
 - } 
 + db . run ( toDBIOAction ( action ) ) 
 } 
 
 override def jhandleClearChat ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = { 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 index 01ee7e7 . . 6deafc6 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 @ @ - 3 , 13 + 3 , 13 @ @ package im . actor . server . session 
 import akka . testkit . TestProbe 
 import com . typesafe . config . ConfigFactory 
 import im . actor . api . rpc . _ 
 - import im . actor . api . rpc . auth . { RequestSendAuthCodeObsolete , ResponseSendAuthCodeObsolete } 
 + import im . actor . api . rpc . auth . { RequestSendAuthCodeObsolete , ResponseSendAuthCodeObsolete } 
 import im . actor . api . rpc . codecs . RequestCodec 
 import im . actor . api . rpc . contacts . UpdateContactRegistered 
 import im . actor . api . rpc . weak . UpdateUserOffline 
 import im . actor . server . ActorSpecification 
 import im . actor . server . mtproto . protocol . _ 
 - import im . actor . server . sequence . { SeqUpdatesManager , WeakUpdatesManager } 
 + import im . actor . server . sequence . { SeqUpdatesManager , WeakUpdatesManager } 
 
 import scala . concurrent . duration . _ 
 import scala . util . Random
