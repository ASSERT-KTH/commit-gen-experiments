BLEU SCORE: 0.23196101068401995

TEST MSG: feat ( server : webrtc ) : implicitly join caller to eventbus
GENERATED MSG: feat ( server : auth ) : set timeZone and preferredLanguages on auth

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json < nl > index 678667f . . 47c23f5 100644 < nl > - - - a / actor - sdk / sdk - api / actor . json < nl > + + + b / actor - sdk / sdk - api / actor . json < nl > @ @ - 12817 , 6 + 12817 , 14 @ @ < nl > } , < nl > " id " : 2 , < nl > " name " : " eventBusId " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " alias " , < nl > + " childType " : " randomId " < nl > + } , < nl > + " id " : 3 , < nl > + " name " : " deviceId " < nl > } < nl > ] < nl > } , < nl > diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > index 71b61e4 . . 141f807 100644 < nl > - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps < nl > @ @ - 11015 , 6 + 11015 , 13 @ @ < nl > < ref role = " wb18D " node = " 3Tolai5MCV $ " resolve = " busId " / > < nl > < / node > < nl > < / node > < nl > + < node concept = " 2m7Kf5 " id = " 7 _ xsn7u7TOp " role = " 2m0hLx " > < nl > + < property role = " 2m7DUN " value = " 3 " / > < nl > + < property role = " TrG5h " value = " deviceId " / > < nl > + < node concept = " wb0Ql " id = " 7 _ xsn7u7UVr " role = " 2m7DVh " > < nl > + < ref role = " wb18D " node = " 2vxDjotnUB8 " resolve = " randomId " / > < nl > + < / node > < nl > + < / node > < nl > < node concept = " Nu42z " id = " 201xLeQvfS9 " role = " NuuwV " > < nl > < property role = " Nu42W " value = " A26 " / > < nl > < / node > < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationConfig . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationConfig . scala < nl > index cb89085 . . 4b65b87 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationConfig . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationConfig . scala < nl > @ @ - 1 , 6 + 1 , 6 @ @ < nl > package im . actor . server . activation . common < nl > < nl > - import com . github . kxbmap . configs . _ < nl > + import com . github . kxbmap . configs . syntax . _ < nl > import com . typesafe . config . { Config , ConfigFactory } < nl > < nl > import scala . concurrent . duration . _ < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala < nl > index 670ec0a . . 121bfb4 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala < nl > @ @ - 1 , 6 + 1 , 6 @ @ < nl > package im . actor . server . activation . gate < nl > < nl > - import com . github . kxbmap . configs . _ < nl > + import com . github . kxbmap . configs . syntax . _ < nl > import com . typesafe . config . Config < nl > import im . actor . config . ActorConfig < nl > < nl > diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalActivationConfig . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalActivationConfig . scala < nl > index 9ad726e . . fb4c81e 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalActivationConfig . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalActivationConfig . scala < nl > @ @ - 1 , 6 + 1 , 6 @ @ < nl > package im . actor . server . activation . internal < nl > < nl > - import com . github . kxbmap . configs . _ < nl > + import com . github . kxbmap . configs . syntax . _ < nl > import com . typesafe . config . Config < nl > import im . actor . config . ActorConfig < nl > < nl > diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json < nl > index 29a9619 . . 47c23f5 100644 < nl > - - - a / actor - server / actor - core / src / main / actor - api / actor . json < nl > + + + b / actor - server / actor - core / src / main / actor - api / actor . json < nl > @ @ - 4569 , 6 + 4569 , 64 @ @ < nl > { < nl > " type " : " rpc " , < nl > " content " : { < nl > + " name " : " UpdateMessage " , < nl > + " header " : 2658 , < nl > + " response " : { < nl > + " type " : " reference " , < nl > + " name " : " SeqDate " < nl > + } , < nl > + " doc " : [ < nl > + " Changing Message content " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " peer " , < nl > + " category " : " full " , < nl > + " description " : " Destination Peer " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " rid " , < nl > + " category " : " full " , < nl > + " description " : " Message random id " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " updatedMessage " , < nl > + " category " : " full " , < nl > + " description " : " Updated Message content " < nl > + } < nl > + ] , < nl > + " attributes " : [ < nl > + { < nl > + " type " : { < nl > + " type " : " struct " , < nl > + " childType " : " OutPeer " < nl > + } , < nl > + " id " : 1 , < nl > + " name " : " peer " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " alias " , < nl > + " childType " : " randomId " < nl > + } , < nl > + " id " : 2 , < nl > + " name " : " rid " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " trait " , < nl > + " childType " : " Message " < nl > + } , < nl > + " id " : 3 , < nl > + " name " : " updatedMessage " < nl > + } < nl > + ] < nl > + } < nl > + } , < nl > + { < nl > + " type " : " rpc " , < nl > + " content " : { < nl > " name " : " MessageReceived " , < nl > " header " : 55 , < nl > " response " : { < nl > @ @ - 12052 , 7 + 12110 , 7 @ @ < nl > { < nl > " type " : " reference " , < nl > " argument " : " message " , < nl > - " category " : " full " , < nl > + " category " : " hidden " , < nl > " description " : " Message " < nl > } < nl > ] , < nl > @ @ - 12226 , 7 + 12284 , 7 @ @ < nl > { < nl > " type " : " reference " , < nl > " argument " : " message " , < nl > - " category " : " compact " , < nl > + " category " : " hidden " , < nl > " description " : " Message " < nl > } < nl > ] , < nl > @ @ - 12738 , 6 + 12796 , 12 @ @ < nl > " argument " : " callId " , < nl > " category " : " full " , < nl > " description " : " Call Id " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " eventBusId " , < nl > + " category " : " full " , < nl > + " description " : " Call Event Bus Id " < nl > } < nl > ] , < nl > " attributes " : [ < nl > @ @ - 12745 , 6 + 12809 , 22 @ @ < nl > " type " : " int64 " , < nl > " id " : 1 , < nl > " name " : " callId " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " alias " , < nl > + " childType " : " busId " < nl > + } , < nl > + " id " : 2 , < nl > + " name " : " eventBusId " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " alias " , < nl > + " childType " : " randomId " < nl > + } , < nl > + " id " : 3 , < nl > + " name " : " deviceId " < nl > } < nl > ] < nl > } , < nl > @ @ - 12755 , 12 + 12835 , 6 @ @ < nl > " argument " : " peer " , < nl > " category " : " full " , < nl > " description " : " destination peer " < nl > - } , < nl > - { < nl > - " type " : " reference " , < nl > - " argument " : " eventBusId " , < nl > - " category " : " full " , < nl > - " description " : " Call Event Bus Id " < nl > } < nl > ] , < nl > " attributes " : [ < nl > @ @ - 12771 , 14 + 12845 , 6 @ @ < nl > } , < nl > " id " : 1 , < nl > " name " : " peer " < nl > - } , < nl > - { < nl > - " type " : { < nl > - " type " : " alias " , < nl > - " childType " : " busId " < nl > - } , < nl > - " id " : 2 , < nl > - " name " : " eventBusId " < nl > } < nl > ] < nl > } < nl > @ @ - 13001 , 6 + 13067 , 56 @ @ < nl > } < nl > } , < nl > { < nl > + " type " : " struct " , < nl > + " content " : { < nl > + " name " : " ICEServer " , < nl > + " doc " : [ < nl > + " ICE Server description " , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " url " , < nl > + " category " : " full " , < nl > + " description " : " Url to server " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " username " , < nl > + " category " : " full " , < nl > + " description " : " Optional username " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " credential " , < nl > + " category " : " danger " , < nl > + " description " : " Optional credential " < nl > + } < nl > + ] , < nl > + " attributes " : [ < nl > + { < nl > + " type " : " string " , < nl > + " id " : 1 , < nl > + " name " : " url " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " opt " , < nl > + " childType " : " string " < nl > + } , < nl > + " id " : 2 , < nl > + " name " : " username " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " opt " , < nl > + " childType " : " string " < nl > + } , < nl > + " id " : 3 , < nl > + " name " : " credential " < nl > + } < nl > + ] < nl > + } < nl > + } , < nl > + { < nl > " type " : " trait " , < nl > " content " : { < nl > " isContainer " : " true " , < nl > @ @ - 13055 , 7 + 13171 , 19 @ @ < nl > " name " : " WebRTCSignaling " , < nl > " key " : 26 < nl > } , < nl > - " attributes " : [ ] < nl > + " attributes " : [ < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : { < nl > + " type " : " struct " , < nl > + " childType " : " ICEServer " < nl > + } < nl > + } , < nl > + " id " : 1 , < nl > + " name " : " server " < nl > + } < nl > + ] < nl > } < nl > } , < nl > { < nl > @ @ - 13694 , 6 + 13822 , 12 @ @ < nl > " argument " : " canBeAudioRelay " , < nl > " category " : " full " , < nl > " description " : " If peer can audio relay . Default is false . " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " canPreConnect " , < nl > + " category " : " full " , < nl > + " description " : " If peer can preconnect before answer " < nl > } < nl > ] , < nl > " attributes " : [ < nl > @ @ - 13727 , 7 + 13861 , 7 @ @ < nl > " childType " : " bool " < nl > } , < nl > " id " : 4 , < nl > - " name " : " canConnect " < nl > + " name " : " canPreConnect " < nl > } < nl > ] < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > index 8b8db9d . . 630bcb8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala < nl > @ @ - 62 , 9 + 62 , 15 @ @ final class EventBusExtension ( system : ActorSystem ) extends Extension { < nl > clientAuthId : AuthId , < nl > timeout : Option [ Long ] , < nl > isOwned : Option [ Boolean ] < nl > - ) : Future [ ( EventBusId , DeviceId ) ] = { < nl > + ) : Future [ ( EventBusId , DeviceId ) ] = < nl > + create ( EventBus . ExternalClient ( clientUserId , clientAuthId ) , timeout , isOwned ) < nl > + < nl > + def create ( ref : ActorRef , timeout : Option [ Long ] , isOwned : Option [ Boolean ] ) : Future [ ( String , EventBus . DeviceId ) ] = < nl > + create ( EventBus . InternalClient ( ref ) , timeout , isOwned ) < nl > + < nl > + def create ( client : EventBus . Client , timeout : Option [ Long ] , isOwned : Option [ Boolean ] ) : Future [ ( String , EventBus . DeviceId ) ] = { < nl > val id = UUID . randomUUID ( ) . toString < nl > - ( region ? EventBusEnvelope ( id , Create ( ExternalClient ( clientUserId , clientAuthId ) , timeout , isOwned ) ) ) . mapTo [ CreateAck ] map ( ack ⇒ ( id , ack . deviceId ) ) < nl > + ( region ? EventBusEnvelope ( id , Create ( client , timeout , isOwned ) ) ) . mapTo [ CreateAck ] map ( ack ⇒ ( id , ack . deviceId ) ) < nl > } < nl > < nl > def dispose ( clientUserId : UserId , clientAuthId : AuthId , id : String ) : Future [ Unit ] = < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala < nl > index 702a936 . . de7d7c3 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala < nl > @ @ - 10 , 7 + 10 , 7 @ @ import akka . stream . actor . ActorPublisher < nl > import akka . stream . scaladsl . Source < nl > import akka . util . ByteString < nl > import cats . data . Xor < nl > - import com . github . kxbmap . configs . _ < nl > + import com . github . kxbmap . configs . syntax . _ < nl > import com . typesafe . config . Config < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . persist . push . GooglePushCredentialsRepo < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index bc0bcb7 . . c35ea50 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 32 , 11 + 32 , 11 @ @ object WebrtcCallErrors { < nl > object NotJoinedToEventBus extends WebrtcCallError ( " Not joined to EventBus " ) < nl > } < nl > < nl > - sealed trait WebrtcCallMessage < nl > + private [ webrtc ] sealed trait WebrtcCallMessage < nl > < nl > - object WebrtcCallMessages { < nl > - final case class StartCall ( callerUserId : UserId , peer : Peer , eventBusId : String ) extends WebrtcCallMessage < nl > - case object StartCallAck < nl > + private [ webrtc ] object WebrtcCallMessages { < nl > + final case class StartCall ( callerUserId : UserId , callerAuthId : AuthId , peer : Peer ) extends WebrtcCallMessage < nl > + final case class StartCallAck ( eventBusId : String , callerDeviceId : EventBus . DeviceId ) < nl > < nl > final case class JoinCall ( calleeUserId : UserId , authId : AuthId ) extends WebrtcCallMessage < nl > case object JoinCallAck < nl > @ @ - 50 , 7 + 50 , 7 @ @ object WebrtcCallMessages { < nl > } < nl > } < nl > < nl > - final case class WebrtcCallEnvelope ( id : Long , message : WebrtcCallMessage ) < nl > + private [ webrtc ] final case class WebrtcCallEnvelope ( id : Long , message : WebrtcCallMessage ) < nl > < nl > object WebrtcCallActor { < nl > val RegionTypeName = " WebrtcCall " < nl > @ @ - 71 , 6 + 71 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > private val groupExt = GroupExtension ( context . system ) < nl > private val valuesExt = ValuesExtension ( context . system ) < nl > private val apnsExt = ApplePushExtension ( context . system ) < nl > + private val webrtcExt = WebrtcExtension ( context . system ) < nl > < nl > case class Device ( < nl > deviceId : EventBus . DeviceId , < nl > @ @ - 78 , 9 + 79 , 9 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > peerSettings : Option [ ApiPeerSettings ] , < nl > isJoined : Boolean < nl > ) { < nl > - def canConnect ( pairPeerSettings : Option [ ApiPeerSettings ] ) : Boolean = < nl > + def canPreConnect ( pairPeerSettings : Option [ ApiPeerSettings ] ) : Boolean = < nl > isJoined | | < nl > - ( peerSettings . map ( _ . canConnect ) . isDefined & & pairPeerSettings . map ( _ . canConnect ) . isDefined ) < nl > + ( peerSettings . map ( _ . canPreConnect ) . isDefined & & pairPeerSettings . map ( _ . canPreConnect ) . isDefined ) < nl > } < nl > < nl > object Pair { < nl > @ @ - 94 , 6 + 95 , 8 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > < nl > type SessionId = Long < nl > < nl > + private val eventBusClient = EventBus . InternalClient ( self ) < nl > + < nl > private var scheduledUpds = Map . empty [ UserId , Cancellable ] < nl > private var devices = Map . empty [ EventBus . DeviceId , Device ] < nl > private var clients = Map . empty [ EventBus . Client , EventBus . DeviceId ] < nl > @ @ - 107 , 28 + 110 , 28 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > < nl > def waitForStart : Receive = { < nl > case s : StartCall ⇒ < nl > - case class Res ( callees : Seq [ Int ] , callerDeviceId : EventBus . DeviceId ) < nl > + case class Res ( eventBusId : String , callees : Seq [ Int ] , callerDeviceId : EventBus . DeviceId ) < nl > this . peer = s . peer < nl > this . callerUserId = s . callerUserId < nl > < nl > ( for { < nl > callees ← fetchParticipants ( callerUserId , peer ) map ( _ filterNot ( _ = = callerUserId ) ) < nl > - callerDeviceId ← eventBusExt . fetchOwner ( s . eventBusId ) < nl > - _ ← eventBusExt . join ( EventBus . InternalClient ( self ) , s . eventBusId , None ) < nl > + eventBusId ← eventBusExt . create ( eventBusClient , timeout = None , isOwned = Some ( true ) ) map ( _ . _ 1 ) < nl > + callerDeviceId ← eventBusExt . join ( EventBus . ExternalClient ( s . callerUserId , s . callerAuthId ) , eventBusId , Some ( 16000 ) ) < nl > _ ← scheduleIncomingCallUpdates ( callees ) < nl > - } yield Res ( callees , callerDeviceId ) ) pipeTo self < nl > + } yield Res ( eventBusId , callees , callerDeviceId ) ) pipeTo self < nl > < nl > becomeStashing ( replyTo ⇒ { < nl > - case Res ( callees , callerDeviceId ) ⇒ < nl > - replyTo ! StartCallAck < nl > + case Res ( eventBusId , callees , callerDeviceId ) ⇒ < nl > + replyTo ! StartCallAck ( eventBusId , callerDeviceId ) < nl > < nl > - eventBusExt . post ( EventBus . InternalClient ( self ) , s . eventBusId , Seq ( callerDeviceId ) , ApiAdvertiseMaster . toByteArray ) < nl > + advertiseMaster ( eventBusId , callerDeviceId ) < nl > < nl > callees foreach ( putParticipant ( _ , ApiCallMemberState . RINGING ) ) < nl > putParticipant ( callerUserId , ApiCallMemberState . CONNECTED ) < nl > broadcastSyncedSet ( ) < nl > < nl > - context become callInProgress ( peer , s . eventBusId , callerDeviceId , System . currentTimeMillis ( ) , callerUserId ) < nl > + context become callInProgress ( peer , eventBusId , callerDeviceId , System . currentTimeMillis ( ) , callerUserId ) < nl > unstashAll ( ) < nl > case failure : Status . Failure ⇒ < nl > replyTo forward failure < nl > @ @ - 251 , 7 + 254 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > sender ( ) ! GetInfoAck ( eventBusId , peer , participants . keySet . toSeq ) < nl > case EventBus . Joined ( _ , client , deviceId ) ⇒ < nl > if ( client . isExternal ) < nl > - eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( deviceId ) , ApiAdvertiseMaster . toByteArray ) < nl > + advertiseMaster ( eventBusId , deviceId ) < nl > case ebMessage : EventBus . Message ⇒ < nl > ApiWebRTCSignaling . parseFrom ( ebMessage . message ) . right foreach { < nl > case msg : ApiAdvertiseSelf ⇒ < nl > @ @ - 259 , 7 + 262 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > val newDevice = Device ( deviceId , ebMessage . client , msg . peerSettings , isJoined = deviceId = = callerDeviceId ) < nl > devices foreach { < nl > case ( pairDeviceId , pairDevice ) ⇒ < nl > - if ( pairDevice . canConnect ( msg . peerSettings ) ) < nl > + if ( pairDevice . canPreConnect ( msg . peerSettings ) ) < nl > connect ( newDevice , pairDevice ) < nl > } < nl > putDevice ( deviceId , ebMessage . client , newDevice ) < nl > @ @ - 308 , 6 + 311 , 14 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > } < nl > } < nl > < nl > + private def advertiseMaster ( eventBusId : String , deviceId : EventBus . DeviceId ) : Unit = { < nl > + val advMaster = < nl > + ApiAdvertiseMaster ( < nl > + server = webrtcExt . config . iceServers . toVector map ( s ⇒ ApiICEServer ( s . url , s . username , s . credential ) ) < nl > + ) < nl > + eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( deviceId ) , advMaster . toByteArray ) < nl > + } < nl > + < nl > private def isConnected ( userId : UserId ) : Boolean = { < nl > val userDevices = devices . filter ( _ . _ 2 . client . externalUserId . contains ( userId ) ) . values . map ( _ . deviceId ) . toSet < nl > sessions . keySet . exists ( pair ⇒ userDevices . contains ( pair . left ) | | userDevices . contains ( pair . right ) ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala < nl > index 29d30d2 . . c63e96d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala < nl > @ @ - 1 , 22 + 1 , 35 @ @ < nl > package im . actor . server . webrtc < nl > < nl > import akka . actor . _ < nl > + import akka . cluster . sharding . ShardRegion . { ExtractEntityId , ExtractShardId } < nl > + import akka . cluster . sharding . { ClusterSharding , ClusterShardingSettings } < nl > import akka . pattern . ask < nl > - import akka . cluster . sharding . ShardRegion . { ExtractShardId , ExtractEntityId } < nl > - import akka . cluster . sharding . { ClusterShardingSettings , ClusterSharding } < nl > import akka . util . Timeout < nl > + import com . github . kxbmap . configs . syntax . _ < nl > + import com . typesafe . config . Config < nl > import im . actor . config . ActorConfig < nl > + import im . actor . server . eventbus . EventBus < nl > import im . actor . server . model . Peer < nl > import im . actor . types . _ < nl > < nl > import scala . concurrent . Future < nl > import scala . concurrent . forkjoin . ThreadLocalRandom < nl > + import scala . util . Try < nl > < nl > object Webrtc { < nl > private [ webrtc ] val SyncedSetName = " messaging . calls " < nl > } < nl > < nl > + private [ webrtc ] case class ICEServer ( url : String , username : Option [ String ] , credential : Option [ String ] ) < nl > + < nl > + private [ webrtc ] case class WebrtcConfig ( iceServers : Seq [ ICEServer ] ) < nl > + < nl > + private [ webrtc ] object WebrtcConfig { < nl > + def load ( config : Config ) : Try [ WebrtcConfig ] = Try ( config . get [ WebrtcConfig ] ( " modules . webrtc " ) ) < nl > + } < nl > + < nl > final class WebrtcExtension ( system : ActorSystem ) extends Extension { < nl > + < nl > import im . actor . server . webrtc . WebrtcCallMessages . _ < nl > import system . dispatcher < nl > < nl > @ @ - 34 , 10 + 47 , 15 @ @ final class WebrtcExtension ( system : ActorSystem ) extends Extension { < nl > ClusterSharding ( system ) < nl > . start ( " WebrtcCall " , WebrtcCallActor . props , ClusterShardingSettings ( system ) , extractEntityId , extractShardId ) < nl > < nl > - def doCall ( callerUserId : Int , peer : Peer , eventBusId : String ) : Future [ Long ] = { < nl > + private [ webrtc ] val config = WebrtcConfig . load ( system . settings . config ) . get < nl > + < nl > + def doCall ( callerUserId : UserId , callerAuthId : AuthId , peer : Peer ) : Future [ ( Long , String , EventBus . DeviceId ) ] = { < nl > val callId = ThreadLocalRandom . current ( ) . nextLong ( ) < nl > < nl > - region ? WebrtcCallEnvelope ( callId , StartCall ( callerUserId , peer , eventBusId ) ) map ( _ ⇒ callId ) < nl > + ( region ? WebrtcCallEnvelope ( < nl > + callId , < nl > + StartCall ( callerUserId , callerAuthId , peer ) < nl > + ) ) . mapTo [ StartCallAck ] map ( ack ⇒ ( callId , ack . eventBusId , ack . callerDeviceId ) ) < nl > } < nl > < nl > def joinCall ( calleeUserId : Int , calleeAuthId : Long , callId : Long ) : Future [ Unit ] = < nl > diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala < nl > index 450a59d . . 17d0480 100644 < nl > - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala < nl > + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala < nl > @ @ - 3 , 36 + 3 , 19 @ @ package im . actor . server . email < nl > import im . actor . config . ActorConfig < nl > < nl > import scala . util . Try < nl > - import com . github . kxbmap . configs . _ < nl > + import com . github . kxbmap . configs . syntax . _ < nl > import com . typesafe . config . Config < nl > < nl > - case class EmailConfig ( < nl > - / / sender part < nl > - address : String , < nl > - name : String , < nl > - prefix : String , < nl > + private [ email ] case class Sender ( address : String , name : String , prefix : String ) < nl > + private [ email ] case class Smtp ( host : String , port : Int , username : String , password : String , tls : Boolean ) < nl > < nl > - / / smtp part < nl > - host : String , < nl > - port : Int , < nl > - username : String , < nl > - password : String , < nl > - tls : Boolean < nl > + case class EmailConfig ( < nl > + sender : Sender , < nl > + smtp : Smtp < nl > ) < nl > < nl > object EmailConfig { < nl > - def load ( config : Config ) : Try [ EmailConfig ] = < nl > - for { < nl > - address ← config . get [ Try [ String ] ] ( " sender . address " ) < nl > - name ← config . get [ Try [ String ] ] ( " sender . name " ) < nl > - prefix ← config . get [ Try [ String ] ] ( " sender . prefix " ) < nl > - < nl > - host ← config . get [ Try [ String ] ] ( " smtp . host " ) < nl > - port ← config . get [ Try [ Int ] ] ( " smtp . port " ) < nl > - username ← config . get [ Try [ String ] ] ( " smtp . username " ) < nl > - password ← config . get [ Try [ String ] ] ( " smtp . password " ) < nl > - tls ← config . get [ Try [ Boolean ] ] ( " smtp . tls " ) < nl > - } yield EmailConfig ( address , name , prefix , host , port , username , password , tls ) < nl > + def load ( config : Config ) : Try [ EmailConfig ] = Try ( config . get [ EmailConfig ] ( " " ) ) < nl > < nl > def load : Try [ EmailConfig ] = load ( ActorConfig . load ( ) . getConfig ( " services . email " ) ) < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > index b708712 . . 3468e8b 100644 < nl > - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > @ @ - 37 , 11 + 37 , 11 @ @ final class SmtpEmailSender ( config : EmailConfig ) ( implicit ec : ExecutionContext ) < nl > email . setSocketTimeout ( timeout ) < nl > email . setSocketConnectionTimeout ( timeout ) < nl > email . setCharset ( " UTF - 8 " ) < nl > - email . setHostName ( config . host ) < nl > - email . setSmtpPort ( config . port ) < nl > - email . setAuthenticator ( new DefaultAuthenticator ( config . username , config . password ) ) < nl > - email . setStartTLSEnabled ( config . tls ) < nl > - email . setFrom ( config . address , config . name ) < nl > + email . setHostName ( config . smtp . host ) < nl > + email . setSmtpPort ( config . smtp . port ) < nl > + email . setAuthenticator ( new DefaultAuthenticator ( config . smtp . username , config . smtp . password ) ) < nl > + email . setStartTLSEnabled ( config . smtp . tls ) < nl > + email . setFrom ( config . sender . address , config . sender . name ) < nl > email . setSubject ( message . subject ) < nl > message . content . html foreach { email . setHtmlMsg } < nl > message . content . text foreach { email . setTextMsg } < nl > diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala < nl > index 14890d0 . . b0baeb8 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala < nl > @ @ - 8 , 7 + 8 , 7 @ @ import scala . collection . JavaConversions . _ < nl > < nl > import akka . actor . ActorSystem < nl > import akka . stream . Materializer < nl > - import com . github . kxbmap . configs . _ < nl > + import com . github . kxbmap . configs . syntax . _ < nl > import com . typesafe . config . Config < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > @ @ - 39 , 7 + 39 , 7 @ @ object Endpoint { < nl > typ ← config . get [ Either [ Throwable , String ] ] ( " type " ) . right . flatMap ( EndpointType . fromString ) . right < nl > host ← config . get [ Either [ Throwable , String ] ] ( " interface " ) . right < nl > port ← config . get [ Either [ Throwable , Int ] ] ( " port " ) . right < nl > - keystore ← Right ( config . opt [ String ] ( " keystore " ) ) . right < nl > + keystore ← Right ( config . getOpt [ String ] ( " keystore " ) ) . right < nl > } yield Endpoint ( < nl > typ , host , port , keystore < nl > ) < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageConfig . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageConfig . scala < nl > index 8a2bd15 . . 80aa668 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageConfig . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageConfig . scala < nl > @ @ - 1 , 6 + 1 , 6 @ @ < nl > package im . actor . server . file . local < nl > < nl > - import com . github . kxbmap . configs . _ < nl > + import com . github . kxbmap . configs . syntax . _ < nl > import com . typesafe . config . Config < nl > import im . actor . config . ActorConfig < nl > < nl > diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapterConfig . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapterConfig . scala < nl > index 2987b9a . . 6d5f06b 100644 < nl > - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapterConfig . scala < nl > + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapterConfig . scala < nl > @ @ - 1 , 6 + 1 , 6 @ @ < nl > package im . actor . server . file . s3 < nl > < nl > - import com . github . kxbmap . configs . _ < nl > + import com . github . kxbmap . configs . syntax . _ < nl > import com . typesafe . config . { ConfigFactory , Config } < nl > < nl > import scala . util . Try < nl > diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiConfig . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiConfig . scala < nl > index d0122ec . . 453f016 100644 < nl > - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiConfig . scala < nl > + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiConfig . scala < nl > @ @ - 4 , 7 + 4 , 7 @ @ import im . actor . config . ActorConfig < nl > < nl > import scala . util . { Success , Try } < nl > < nl > - import com . github . kxbmap . configs . _ < nl > + import com . github . kxbmap . configs . syntax . _ < nl > import com . typesafe . config . Config < nl > < nl > case class HttpApiConfig ( interface : String , port : Int , baseUri : String , staticFiles : String , keystore : Option [ String ] ) < nl > @ @ - 16 , 7 + 16 , 7 @ @ object HttpApiConfig { < nl > port ← config . get [ Try [ Int ] ] ( " port " ) < nl > baseUri ← config . get [ Try [ String ] ] ( " base - uri " ) < nl > staticFiles ← config . get [ Try [ String ] ] ( " static - files - directory " ) < nl > - keystore ← Success ( config . opt [ String ] ( " keystore " ) ) < nl > + keystore ← Success ( config . getOpt [ String ] ( " keystore " ) ) < nl > } yield HttpApiConfig ( interface , port , baseUri , staticFiles , keystore ) < nl > < nl > def load : Try [ HttpApiConfig ] = load ( ActorConfig . load ( ) . getConfig ( " http " ) ) < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala < nl > index 14c8a56 . . 7ba3d84 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala < nl > @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . db < nl > < nl > import akka . actor . _ < nl > import akka . event . Logging < nl > - import com . github . kxbmap . configs . _ < nl > + import com . github . kxbmap . configs . syntax . _ < nl > import com . typesafe . config . { Config , ConfigFactory } < nl > import im . actor . server . JNDI < nl > import org . flywaydb . core . Flyway < nl > diff - - git a / actor - server / actor - rpc - api / src / main / resources / reference . conf b / actor - server / actor - rpc - api / src / main / resources / reference . conf < nl > index 83c27b4 . . c6ddc19 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - rpc - api / src / main / resources / reference . conf < nl > @ @ - 16 , 4 + 16 , 8 @ @ modules { < nl > search { < nl > rpc = " im . actor . server . api . rpc . service . search . SearchServiceImpl " < nl > } < nl > + < nl > + webrtc { < nl > + ice - servers : [ ] < nl > + } < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > index 7718e0b . . 6f9073f 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . server . api . rpc . service . messaging < nl > < nl > + import akka . http . scaladsl . util . FastFuture < nl > import akka . util . Timeout < nl > import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . messaging . _ < nl > @ @ - 31 , 4 + 32 , 7 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits { < nl > ) ) < nl > ) yield ResponseSeqDate ( s . seq , s . state . toByteArray , s . date ) ) . value < nl > } < nl > + < nl > + override def doHandleUpdateMessage ( peer : ApiOutPeer , randomId : Long , updatedMessage : ApiMessage , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeqDate ] ] = < nl > + FastFuture . failed ( new RuntimeException ( " Not implemented " ) ) < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala < nl > index 836daad . . 91dea72 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala < nl > @ @ - 35 , 12 + 35 , 12 @ @ final class WebrtcServiceImpl ( implicit system : ActorSystem , sessionRegion : Sessi < nl > } yield Ok ( ResponseGetCallInfo ( peer . asStruct , Vector . empty , users . toVector , eventBusId ) ) < nl > } < nl > < nl > - override def doHandleDoCall ( peer : ApiOutPeer , eventBusId : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseDoCall ] ] = < nl > + override def doHandleDoCall ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseDoCall ] ] = < nl > authorized ( clientData ) { implicit client ⇒ < nl > withOutPeerF ( peer ) { < nl > for { < nl > - callId ← webrtcExt . doCall ( client . userId , peer . asModel , eventBusId ) < nl > - } yield Ok ( ResponseDoCall ( callId ) ) < nl > + ( callId , eventBusId , callerDeviceId ) ← webrtcExt . doCall ( client . userId , client . authId , peer . asModel ) < nl > + } yield Ok ( ResponseDoCall ( callId , eventBusId , callerDeviceId ) ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index 38d013c . . 89f2377 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 55 , 7 + 55 , 7 @ @ object Dependencies { < nl > val circeGeneric = " io . circe " % % " circe - generic " % V . circe < nl > val circeParse = " io . circe " % % " circe - parse " % V . circe < nl > < nl > - val configs = " com . github . kxbmap " % % " configs " % " 0 . 2 . 4 " < nl > + val configs = " com . github . kxbmap " % % " configs " % " 0 . 3 . 0 " < nl > < nl > val dispatch = " net . databinder . dispatch " % % " dispatch - core " % " 0 . 11 . 3 " < nl > val javaCompat = " org . scala - lang . modules " % % " scala - java8 - compat " % " 0 . 7 . 0 "
NEAREST DIFF (one line): diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > index dc0dd68 . . d09a364 100644 < nl > - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala < nl > @ @ - 9 , 13 + 9 , 12 @ @ import akka . stream . Materializer < nl > import akka . util . Timeout < nl > import im . actor . server . activation . Activation . { CallCode , Code , EmailCode , SmsCode } < nl > import im . actor . server . activation . _ < nl > - import im . actor . server . email . { Content , EmailSender , Message } < nl > + import im . actor . server . email . { EmailSender , Content , Message } < nl > import im . actor . server . models . AuthCode < nl > import im . actor . server . persist < nl > import im . actor . server . sms . { AuthCallEngine , AuthSmsEngine } < nl > import im . actor . util . misc . EmailUtils . isTestEmail < nl > import im . actor . util . misc . PhoneNumberUtils . isTestPhone < nl > - import im . actor . util . misc . { EmailUtils , PhoneNumberUtils } < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > import scala . concurrent . duration . _ < nl > @ @ - 124 , 6 + 123 , 8 @ @ class Activation ( repeatLimit : Duration , smsEngine : AuthSmsEngine , callEngine : Au < nl > case SmsCode ( phone , c ) ⇒ smsEngine . sendCode ( phone , c ) < nl > case CallCode ( phone , c , language ) ⇒ callEngine . sendCode ( phone , c , language ) < nl > case EmailCode ( email , c ) ⇒ < nl > + println ( s " = = = email , $ { email } " ) < nl > + if ( email = = null ) println ( " = = = null " ) < nl > emailSender . send ( Message ( email , s " Actor activation code : $ c " , Content ( Some ( emailTemplate . replace ( " $ $ CODE $ $ " , c ) ) , Some ( s " Your actor activation code : $ c " ) ) ) ) < nl > } ) map { _ ⇒ < nl > forgetSentCodeAfterDelay ( code ) < nl > diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json < nl > index 0da016e . . 5acee8a 100644 < nl > - - - a / actor - server / actor - core / src / main / actor - api / actor . json < nl > + + + b / actor - server / actor - core / src / main / actor - api / actor . json < nl > @ @ - 127 , 6 + 127 , 18 @ @ < nl > " argument " : " deviceTitle " , < nl > " category " : " full " , < nl > " description " : " Device Title " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " timeZone " , < nl > + " category " : " full " , < nl > + " description " : " TimeZone of device " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " preferredLanguages " , < nl > + " category " : " full " , < nl > + " description " : " Preferred languages of device " < nl > } < nl > ] , < nl > " attributes " : [ < nl > @ @ - 154 , 6 + 166 , 22 @ @ < nl > " type " : " string " , < nl > " id " : 5 , < nl > " name " : " deviceTitle " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " opt " , < nl > + " childType " : " string " < nl > + } , < nl > + " id " : 6 , < nl > + " name " : " timeZone " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : " string " < nl > + } , < nl > + " id " : 7 , < nl > + " name " : " preferredLanguages " < nl > } < nl > ] < nl > } < nl > @ @ - 258 , 14 + 286 , 26 @ @ < nl > { < nl > " type " : " reference " , < nl > " argument " : " deviceHash " , < nl > - " category " : " hidden " , < nl > + " category " : " full " , < nl > " description " : " Hash of device unique id and app bundle id . Used for autologout users when app is reinstalled " < nl > } , < nl > { < nl > " type " : " reference " , < nl > " argument " : " deviceTitle " , < nl > - " category " : " hidden " , < nl > + " category " : " full " , < nl > " description " : " Device Title " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " timeZone " , < nl > + " category " : " full " , < nl > + " description " : " TimeZone of device " < nl > + } , < nl > + { < nl > + " type " : " reference " , < nl > + " argument " : " preferredLanguages " , < nl > + " category " : " full " , < nl > + " description " : " Preferred languages " < nl > } < nl > ] , < nl > " attributes " : [ < nl > @ @ - 293 , 6 + 333 , 22 @ @ < nl > " type " : " string " , < nl > " id " : 5 , < nl > " name " : " deviceTitle " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " opt " , < nl > + " childType " : " string " < nl > + } , < nl > + " id " : 6 , < nl > + " name " : " timeZone " < nl > + } , < nl > + { < nl > + " type " : { < nl > + " type " : " list " , < nl > + " childType " : " string " < nl > + } , < nl > + " id " : 7 , < nl > + " name " : " preferredLanguages " < nl > } < nl > ] < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / protobuf / auth . proto b / actor - server / actor - core / src / main / protobuf / auth . proto < nl > new file mode 100644 < nl > index 0000000 . . bf1e891 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - core / src / main / protobuf / auth . proto < nl > @ @ - 0 , 0 + 1 , 8 @ @ < nl > + syntax = " proto3 " ; < nl > + < nl > + package im . actor . server ; < nl > + < nl > + message UserData { < nl > + string time _ zone = 1 ; < nl > + repeated string preferred _ languages = 2 ; < nl > + } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > index b9e04a2 . . ebcd4e7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala < nl > @ @ - 8 , 6 + 8 , 7 @ @ import im . actor . api . rpc . misc . ApiExtension < nl > import im . actor . api . rpc . { AuthorizedClientData , Update } < nl > import im . actor . api . rpc . peers . ApiPeer < nl > import im . actor . api . rpc . users . { ApiUser , ApiSex } < nl > + import im . actor . server . auth . UserData < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . file . Avatar < nl > import im . actor . server . persist . UserRepo < nl > @ @ - 80 , 6 + 81 , 12 @ @ private [ user ] sealed trait Commands extends AuthCommands { < nl > def changeTimeZone ( userId : Int , authId : Long , timeZone : String ) : Future [ SeqState ] = < nl > ( processorRegion . ref ? ChangeTimeZone ( userId , authId , timeZone ) ) . mapTo [ SeqState ] < nl > < nl > + def setUserData ( userId : Int , authId : Long , data : UserData ) : Future [ Unit ] = < nl > + for { < nl > + _ ← changeTimeZone ( userId , authId , data . timeZone ) < nl > + _ ← changePreferredLanguages ( userId , authId , data . preferredLanguages ) < nl > + } yield ( ) < nl > + < nl > def changePreferredLanguages ( userId : Int , authId : Long , preferredLanguages : Seq [ String ] ) : Future [ SeqState ] = < nl > ( processorRegion . ref ? ChangePreferredLanguages ( userId , authId , preferredLanguages ) ) . mapTo [ SeqState ] < nl > < nl > diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > index 5fda915 . . cc16a1a 100644 < nl > - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > @ @ - 15 , 8 + 15 , 16 @ @ case class Content ( html : Option [ String ] , text : Option [ String ] ) { < nl > < nl > case class Message ( to : String , subject : String , content : Content ) < nl > < nl > - class EmailSender ( config : EmailConfig ) { < nl > - def send ( message : Message ) ( implicit ec : ExecutionContext ) = Future { < nl > + trait EmailSender { < nl > + def send ( message : Message ) : Future [ Unit ] < nl > + } < nl > + < nl > + final class DummyEmailSender extends EmailSender { < nl > + override def send ( message : Message ) : Future [ Unit ] = Future . successful ( ( ) ) < nl > + } < nl > + < nl > + final class SmtpEmailSender ( config : EmailConfig ) ( implicit ec : ExecutionContext ) extends EmailSender { < nl > + override def send ( message : Message ) = Future { < nl > val email = new HtmlEmail ( ) < nl > email . setHostName ( config . host ) < nl > email . setSmtpPort ( config . port ) < nl > diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / AuthTransactions . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / AuthTransactions . scala < nl > index d014aee . . 15dc480 100644 < nl > - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / AuthTransactions . scala < nl > + + + b / actor - server / actor - models / src / main / scala / im / actor / server / models / AuthTransactions . scala < nl > @ @ - 12 , 6 + 12 , 7 @ @ case class AuthTransaction ( < nl > deviceHash : Array [ Byte ] , < nl > deviceTitle : String , < nl > accessSalt : String , < nl > + userData : Array [ Byte ] , < nl > isChecked : Boolean = false , < nl > deletedAt : Option [ LocalDateTime ] = None < nl > ) < nl > @ @ - 27 , 6 + 28 , 7 @ @ case class AuthPhoneTransaction ( < nl > deviceHash : Array [ Byte ] , < nl > deviceTitle : String , < nl > accessSalt : String , < nl > + userData : Array [ Byte ] , < nl > isChecked : Boolean = false , < nl > deletedAt : Option [ LocalDateTime ] = None < nl > ) extends AuthTransactionChildren < nl > @ @ - 43 , 6 + 45 , 7 @ @ case class AuthEmailTransaction ( < nl > deviceHash : Array [ Byte ] , < nl > deviceTitle : String , < nl > accessSalt : String , < nl > + userData : Array [ Byte ] , < nl > isChecked : Boolean = false , < nl > deletedAt : Option [ LocalDateTime ] = None < nl > ) extends AuthTransactionChildren < nl > @ @ - 55 , 4 + 58 , 5 @ @ sealed trait AuthTransactionChildren { < nl > def deviceTitle : String < nl > def isChecked : Boolean < nl > def accessSalt : String < nl > + def userData : Array [ Byte ] < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20151029213151 _ _ AddUserDataToAuthTransaction . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20151029213151 _ _ AddUserDataToAuthTransaction . sql < nl > new file mode 100644 < nl > index 0000000 . . a3fbe0f < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20151029213151 _ _ AddUserDataToAuthTransaction . sql < nl > @ @ - 0 , 0 + 1 @ @ < nl > + ALTER TABLE auth _ transactions ADD COLUMN user _ data BYTEA ; < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthEmailTransactionRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthEmailTransactionRepo . scala < nl > index 45da5d5 . . 613c1f6 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthEmailTransactionRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthEmailTransactionRepo . scala < nl > @ @ - 9 , 7 + 9 , 19 @ @ final class AuthEmailTransactionTable ( tag : Tag ) extends AuthTransactionBase [ mode < nl > def redirectUri = column [ Option [ String ] ] ( " redirect _ uri " ) < nl > < nl > val inherited = AuthTransactionRepo . transactions . baseTableRow < nl > - def * = ( email , redirectUri , transactionHash , appId , apiKey , deviceHash , deviceTitle , accessSalt , isChecked , deletedAt ) < > ( models . AuthEmailTransaction . tupled , models . AuthEmailTransaction . unapply ) < nl > + def * = ( < nl > + email , < nl > + redirectUri , < nl > + transactionHash , < nl > + appId , < nl > + apiKey , < nl > + deviceHash , < nl > + deviceTitle , < nl > + accessSalt , < nl > + userData , < nl > + isChecked , < nl > + deletedAt < nl > + ) < > ( models . AuthEmailTransaction . tupled , models . AuthEmailTransaction . unapply ) < nl > } < nl > < nl > object AuthEmailTransactionRepo { < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthPhoneTransactionRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthPhoneTransactionRepo . scala < nl > index 84dde45 . . 40ffd76 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthPhoneTransactionRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthPhoneTransactionRepo . scala < nl > @ @ - 8 , 7 + 8 , 18 @ @ class AuthPhoneTransactionTable ( tag : Tag ) extends AuthTransactionBase [ models . Aut < nl > def phoneNumber = column [ Long ] ( " phone _ number " ) < nl > < nl > val inherited = AuthTransactionRepo . transactions . baseTableRow < nl > - def * = ( phoneNumber , transactionHash , appId , apiKey , deviceHash , deviceTitle , accessSalt , isChecked , deletedAt ) < > ( models . AuthPhoneTransaction . tupled , models . AuthPhoneTransaction . unapply ) < nl > + def * = ( < nl > + phoneNumber , < nl > + transactionHash , < nl > + appId , < nl > + apiKey , < nl > + deviceHash , < nl > + deviceTitle , < nl > + accessSalt , < nl > + userData , < nl > + isChecked , < nl > + deletedAt < nl > + ) < > ( models . AuthPhoneTransaction . tupled , models . AuthPhoneTransaction . unapply ) < nl > } < nl > < nl > object AuthPhoneTransactionRepo { < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthTransactionRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthTransactionRepo . scala < nl > index 230a95b . . 844ce73 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthTransactionRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthTransactionRepo . scala < nl > @ @ - 15 , 12 + 15 , 23 @ @ private [ auth ] abstract class AuthTransactionBase [ T ] ( tag : Tag , tname : String ) ext < nl > def deviceHash = column [ Array [ Byte ] ] ( " device _ hash " ) < nl > def deviceTitle = column [ String ] ( " device _ title " ) < nl > def accessSalt = column [ String ] ( " access _ salt " ) < nl > + def userData = column [ Array [ Byte ] ] ( " user _ data " ) < nl > def isChecked = column [ Boolean ] ( " is _ checked " ) < nl > def deletedAt = column [ Option [ LocalDateTime ] ] ( " deleted _ at " ) < nl > } < nl > < nl > final class AuthTransactionTable ( tag : Tag ) extends AuthTransactionBase [ models . AuthTransaction ] ( tag , " auth _ transactions " ) { < nl > - def * = ( transactionHash , appId , apiKey , deviceHash , deviceTitle , accessSalt , isChecked , deletedAt ) < > ( models . AuthTransaction . tupled , models . AuthTransaction . unapply ) < nl > + def * = ( < nl > + transactionHash , < nl > + appId , < nl > + apiKey , < nl > + deviceHash , < nl > + deviceTitle , < nl > + accessSalt , < nl > + userData , < nl > + isChecked , < nl > + deletedAt < nl > + ) < > ( models . AuthTransaction . tupled , models . AuthTransaction . unapply ) < nl > } < nl > < nl > object AuthTransactionRepo { < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > index cc60987 . . dfb4a24 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > @ @ - 2 , 31 + 2 , 28 @ @ package im . actor . server . api . rpc . service . auth < nl > < nl > import java . time . { LocalDateTime , ZoneOffset } < nl > < nl > - import im . actor . server . acl . ACLUtils < nl > - import im . actor . util . misc . EmailUtils . isTestEmail < nl > - import im . actor . util . misc . { PhoneNumberUtils , EmailUtils } < nl > - < nl > - import scala . concurrent . Future < nl > - import scala . concurrent . forkjoin . ThreadLocalRandom < nl > - import scalaz . { - \ / , \ / , \ / - } < nl > - < nl > import akka . actor . ActorSystem < nl > import akka . pattern . ask < nl > - import slick . dbio . _ < nl > - < nl > import im . actor . api . rpc . DBIOResult . _ < nl > import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . users . ApiSex . _ < nl > + import im . actor . server . acl . ACLUtils < nl > import im . actor . server . activation . Activation . { CallCode , EmailCode , SmsCode } < nl > import im . actor . server . activation . _ < nl > + import im . actor . server . auth . UserData < nl > import im . actor . server . models . { AuthEmailTransaction , AuthPhoneTransaction , User } < nl > import im . actor . server . persist . auth . AuthTransactionRepo < nl > import im . actor . server . session . _ < nl > - import im . actor . server . user . UserExtension < nl > + import im . actor . server . { models , persist } < nl > + import im . actor . util . misc . EmailUtils . isTestEmail < nl > import im . actor . util . misc . IdUtils . _ < nl > import im . actor . util . misc . PhoneNumberUtils . _ < nl > import im . actor . util . misc . StringUtils . validName < nl > - import im . actor . server . { models , persist } < nl > + import slick . dbio . _ < nl > + < nl > + import scala . concurrent . Future < nl > + import scala . concurrent . forkjoin . ThreadLocalRandom < nl > + import scalaz . { - \ / , \ / , \ / - } < nl > < nl > trait AuthHelpers extends Helpers { < nl > self : AuthServiceImpl ⇒ < nl > @ @ - 69 , 6 + 66 , 7 @ @ trait AuthHelpers extends Helpers { < nl > def handleUserCreate ( user : models . User , transaction : models . AuthTransactionChildren , authId : Long ) : Result [ User ] = { < nl > for { < nl > _ ← fromFuture ( userExt . create ( user . id , user . accessSalt , user . nickname , user . name , user . countryCode , im . actor . api . rpc . users . ApiSex ( user . sex . toInt ) , isBot = false ) ) < nl > + _ ← fromFuture ( userExt . setUserData ( user . id , authId , UserData . parseFrom ( transaction . userData ) ) recover { case _ ⇒ ( ) } ) < nl > _ ← fromDBIO ( persist . AvatarDataRepo . create ( models . AvatarData . empty ( models . AvatarData . OfUser , user . id . toLong ) ) ) < nl > _ ← fromDBIO ( AuthTransactionRepo . delete ( transaction . transactionHash ) ) < nl > _ ← transaction match { < nl > @ @ - 145 , 10 + 143 , 11 @ @ trait AuthHelpers extends Helpers { < nl > } < nl > < nl > / / TODO : what country to use in case of email auth < nl > - protected def authorizeT ( userId : Int , countryCode : String , clientData : ClientData ) : Result [ User ] = { < nl > + protected def authorizeT ( userId : Int , countryCode : String , userData : UserData , clientData : ClientData ) : Result [ User ] = { < nl > for { < nl > user ← fromDBIOOption ( CommonErrors . UserNotFound ) ( persist . UserRepo . find ( userId ) . headOption ) < nl > _ ← fromFuture ( userExt . changeCountryCode ( userId , countryCode ) ) < nl > + _ ← fromFuture ( userExt . setUserData ( userId , clientData . authId , userData ) recover { case _ ⇒ ( ) } ) < nl > _ ← fromDBIO ( persist . AuthIdRepo . setUserData ( clientData . authId , userId ) ) < nl > } yield user < nl > } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > index 161c3e1 . . fb55d61 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . api . rpc . misc . _ < nl > import im . actor . api . rpc . users . ApiSex . ApiSex < nl > import im . actor . server . acl . ACLUtils < nl > import im . actor . server . activation . internal . CodeActivation < nl > + import im . actor . server . auth . UserData < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . oauth . { GoogleProvider , OAuth2ProvidersDomains } < nl > import im . actor . server . persist . auth . AuthTransactionRepo < nl > @ @ - 112 , 7 + 113 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( < nl > < nl > email ← fromDBIOOption ( AuthErrors . EmailUnoccupied ) ( persist . UserEmailRepo . find ( transaction . email ) ) < nl > < nl > - user ← authorizeT ( email . userId , profile . locale . getOrElse ( " " ) , clientData ) < nl > + user ← authorizeT ( email . userId , profile . locale . getOrElse ( " " ) , UserData . parseFrom ( transaction . userData ) , clientData ) < nl > userStruct ← fromFuture ( userExt . getApiStruct ( user . id , user . id , clientData . authId ) ) < nl > < nl > / / refresh session data < nl > @ @ - 146 , 7 + 147 , 16 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( < nl > db . run ( action . run ) < nl > } < nl > < nl > - def jhandleStartPhoneAuth ( phoneNumber : Long , appId : Int , apiKey : String , deviceHash : Array [ Byte ] , deviceTitle : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseStartPhoneAuth ] ] = { < nl > + def jhandleStartPhoneAuth ( < nl > + phoneNumber : Long , < nl > + appId : Int , < nl > + apiKey : String , < nl > + deviceHash : Array [ Byte ] , < nl > + deviceTitle : String , < nl > + timeZone : Option [ String ] , < nl > + preferredLanguages : IndexedSeq [ String ] , < nl > + clientData : ClientData < nl > + ) : Future [ HandlerResult [ ResponseStartPhoneAuth ] ] = { < nl > val action = for { < nl > normalizedPhone ← fromOption ( AuthErrors . PhoneNumberInvalid ) ( normalizeLong ( phoneNumber ) . headOption ) < nl > optAuthTransaction ← fromDBIO ( persist . auth . AuthPhoneTransactionRepo . findByPhoneAndDeviceHash ( normalizedPhone , deviceHash ) ) < nl > @ @ - 155 , 7 + 165 , 16 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( < nl > case None ⇒ < nl > val accessSalt = ACLUtils . nextAccessSalt ( ) < nl > val transactionHash = ACLUtils . authTransactionHash ( accessSalt ) < nl > - val phoneAuthTransaction = models . AuthPhoneTransaction ( normalizedPhone , transactionHash , appId , apiKey , deviceHash , deviceTitle , accessSalt ) < nl > + val phoneAuthTransaction = models . AuthPhoneTransaction ( < nl > + normalizedPhone , < nl > + transactionHash , < nl > + appId , < nl > + apiKey , < nl > + deviceHash , < nl > + deviceTitle , < nl > + accessSalt , < nl > + UserData ( timeZone . getOrElse ( " " ) , preferredLanguages ) . toByteArray < nl > + ) < nl > for { < nl > _ ← fromDBIO ( persist . auth . AuthPhoneTransactionRepo . create ( phoneAuthTransaction ) ) < nl > } yield transactionHash < nl > @ @ - 190 , 7 + 209 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( < nl > } < nl > / / fallback to sign up if user exists < nl > user ← signInORsignUp match { < nl > - case - \ / ( ( userId , countryCode ) ) ⇒ authorizeT ( userId , countryCode , clientData ) < nl > + case - \ / ( ( userId , countryCode ) ) ⇒ authorizeT ( userId , countryCode , UserData . parseFrom ( transaction . userData ) , clientData ) < nl > case \ / - ( user ) ⇒ handleUserCreate ( user , transaction , clientData . authId ) < nl > } < nl > userStruct ← fromFuture ( userExt . getApiStruct ( user . id , user . id , clientData . authId ) ) < nl > @ @ - 214 , 7 + 233 , 16 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( < nl > db . run ( action . run ) < nl > } < nl > < nl > - def jhandleStartEmailAuth ( email : String , appId : Int , apiKey : String , deviceHash : Array [ Byte ] , deviceTitle : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseStartEmailAuth ] ] = { < nl > + override def jhandleStartEmailAuth ( < nl > + email : String , < nl > + appId : Int , < nl > + apiKey : String , < nl > + deviceHash : Array [ Byte ] , < nl > + deviceTitle : String , < nl > + timeZone : Option [ String ] , < nl > + preferredLanguages : IndexedSeq [ String ] , < nl > + clientData : ClientData < nl > + ) : Future [ HandlerResult [ ResponseStartEmailAuth ] ] = { < nl > val action = for { < nl > validEmail ← fromEither ( validEmail ( email ) . leftMap ( validationFailed ( " EMAIL _ INVALID " , _ ) ) ) / / it actually does not change input email < nl > activationType = if ( OAuth2ProvidersDomains . supportsOAuth2 ( email ) ) OAUTH2 else CODE < nl > @ @ - 234 , 7 + 262 , 17 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( < nl > case None ⇒ < nl > val accessSalt = ACLUtils . nextAccessSalt ( ) < nl > val transactionHash = ACLUtils . authTransactionHash ( accessSalt ) < nl > - val emailAuthTransaction = models . AuthEmailTransaction ( validEmail , None , transactionHash , appId , apiKey , deviceHash , deviceTitle , accessSalt ) < nl > + val emailAuthTransaction = models . AuthEmailTransaction ( < nl > + validEmail , < nl > + None , < nl > + transactionHash , < nl > + appId , < nl > + apiKey , < nl > + deviceHash , < nl > + deviceTitle , < nl > + accessSalt , < nl > + UserData ( timeZone . getOrElse ( " " ) , preferredLanguages ) . toByteArray < nl > + ) < nl > activationType match { < nl > case CODE ⇒ < nl > for { < nl > @ @ - 263 , 7 + 301 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( < nl > ( userId , countryCode ) = userAndCounty < nl > < nl > / / sign in user and delete auth transaction < nl > - user ← authorizeT ( userId , countryCode , clientData ) < nl > + user ← authorizeT ( userId , countryCode , UserData . parseFrom ( transaction . userData ) , clientData ) < nl > userStruct ← fromFuture ( userExt . getApiStruct ( user . id , user . id , clientData . authId ) ) < nl > _ ← fromDBIO ( persist . auth . AuthTransactionRepo . delete ( transaction . transactionHash ) ) < nl > < nl > diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > index 4240f18 . . ae6a6c9 100644 < nl > - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > @ @ - 30 , 7 + 30 , 7 @ @ import im . actor . server . bot . ActorBot < nl > import im . actor . server . cli . ActorCliService < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . dialog . { DialogExtension , DialogProcessor } < nl > - import im . actor . server . email . { EmailConfig , EmailSender } < nl > + import im . actor . server . email . { EmailConfig , SmtpEmailSender } < nl > import im . actor . server . enrich . { RichMessageConfig , RichMessageWorker } < nl > import im . actor . server . group . _ < nl > import im . actor . server . migrations . { HiddenGroupMigrator , GroupCreatorMemberMigrator , IntegrationTokenMigrator , LocalNamesMigrator } < nl > @ @ - 111 , 7 + 111 , 7 @ @ object Main extends App { < nl > activationConfig , < nl > new TelesignSmsEngine ( telesignClient ) , < nl > new TelesignCallEngine ( ( telesignClient ) ) , < nl > - new EmailSender ( emailConfig ) < nl > + new SmtpEmailSender ( emailConfig ) < nl > ) < nl > case " actor - activation " ⇒ new GateCodeActivation ( gateConfig ) < nl > case _ ⇒ throw new Exception ( " " " Invalid activation . default - service value provided : valid options : " internal " , actor - activation " " " ) < nl > diff - - git a / actor - server / actor - sms / src / main / scala / im / actor / server / sms / AuthCallEngine . scala b / actor - server / actor - sms / src / main / scala / im / actor / server / sms / AuthCallEngine . scala < nl > index 98f0050 . . 1590641 100644 < nl > - - - a / actor - server / actor - sms / src / main / scala / im / actor / server / sms / AuthCallEngine . scala < nl > + + + b / actor - server / actor - sms / src / main / scala / im / actor / server / sms / AuthCallEngine . scala < nl > @ @ - 4 , 4 + 4 , 4 @ @ import scala . concurrent . Future < nl > < nl > trait AuthCallEngine { < nl > def sendCode ( phoneNumber : Long , code : String , language : String ) : Future [ Unit ] < nl > - } < nl > \ No newline at end of file < nl > + } < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyCodeActivation . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyCodeActivation . scala < nl > index 8ee41c0 . . 09cb0fa 100644 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyCodeActivation . scala < nl > + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyCodeActivation . scala < nl > @ @ - 7 , 7 + 7 , 7 @ @ import slick . dbio . _ < nl > < nl > import scalaz . { \ / , \ / - } < nl > < nl > - class DummyCodeActivation extends CodeActivation { < nl > + final class DummyCodeActivation extends CodeActivation { < nl > override def send ( transactionHash : Option [ String ] , code : Code ) : DBIO [ String \ / Unit ] = DBIO . successful ( \ / - ( ( ) ) ) < nl > override def validate ( codeHash : String , code : String ) : DBIO [ ValidationResponse ] = DBIO . successful ( Validated ) < nl > def finish ( transactionHash : String ) : DBIO [ Unit ] = DBIO . successful ( ( ) ) < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / SequenceMatchers . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / SequenceMatchers . scala < nl > index 03ed611 . . da937f1 100644 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / SequenceMatchers . scala < nl > + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / SequenceMatchers . scala < nl > @ @ - 148 , 7 + 148 , 7 @ @ trait SequenceMatchers extends Matchers with ScalaFutures with AnyRefLogSource { < nl > ) < nl > } < nl > < nl > - private def matchUpdates ( seq : Int , state : Array [ Byte ] ) ( check : Vector [ ApiDifferenceUpdate ] ⇒ Any ) ( implicit client : ClientData ) = < nl > + private def matchUpdates ( seq : Int , state : Array [ Byte ] ) ( check : IndexedSeq [ ApiDifferenceUpdate ] ⇒ Any ) ( implicit client : ClientData ) = < nl > repeatAfterSleep ( DefaultRetryCount ) { ( ) ⇒ < nl > whenReady ( sequenceService . handleGetDifference ( seq , state ) ) { diff ⇒ < nl > inside ( diff ) { < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > index 11b4f4e . . 046453e 100644 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > @ @ - 1 , 14 + 1 , 13 @ @ < nl > package im . actor . server < nl > < nl > import akka . actor . { ActorRef , ActorSystem } < nl > - import akka . cluster . pubsub . DistributedPubSub < nl > import akka . stream . Materializer < nl > import akka . util . Timeout < nl > import eu . codearte . jfairy . Fairy < nl > import im . actor . api . rpc . peers . { ApiOutPeer , ApiPeerType } < nl > import im . actor . api . { rpc ⇒ rpcapi } < nl > import im . actor . server . api . rpc . RpcApiService < nl > - import im . actor . server . api . rpc . service . auth < nl > + import im . actor . server . api . rpc . service . auth . AuthServiceImpl < nl > import im . actor . server . oauth . GoogleProvider < nl > import im . actor . server . session . { Session , SessionConfig , SessionRegion } < nl > import im . actor . server . user . UserExtension < nl > @ @ - 153 , 7 + 152 , 7 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi < nl > sessionRegion : SessionRegion , < nl > oauth2Service : GoogleProvider , < nl > system : ActorSystem < nl > - ) = new auth . AuthServiceImpl ( new DummyCodeActivation ) < nl > + ) = new AuthServiceImpl ( new DummyCodeActivation ) < nl > < nl > protected def withoutLogs [ A ] ( f : ⇒ A ) ( implicit system : ActorSystem ) : A = { < nl > val logger = org . slf4j . LoggerFactory . getLogger ( org . slf4j . Logger . ROOT _ LOGGER _ NAME ) . asInstanceOf [ ch . qos . logback . classic . Logger ] < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala < nl > index 9895ba6 . . 06cdf25 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala < nl > @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } < nl > import im . actor . server . persist . auth . AuthTransactionRepo < nl > import im . actor . server . sequence . SeqUpdatesManager < nl > import im . actor . server . session . { HandleMessageBox , Session , SessionConfig , SessionEnvelope } < nl > + import im . actor . server . email . DummyEmailSender < nl > import im . actor . server . sms . { AuthCallEngine , AuthSmsEngine } < nl > import im . actor . server . user . ContactsUtils < nl > import org . scalatest . Inside . _ < nl > @ @ - 77 , 7 + 78 , 7 @ @ final class AuthServiceSpec < nl > < nl > / / it should " respond with ok to email of registered user " in s . e13 < nl > < nl > - it should " respond with error to malformed email address " in s . e14 < nl > + it should " respond with error to malformed email address " in s . malformedEmail < nl > < nl > it should " respond with same transactionHash when called multiple times " in s . e15 < nl > < nl > @ @ - 115 , 7 + 116 , 7 @ @ final class AuthServiceSpec < nl > val oauthGoogleConfig = DummyOAuth2Server . config < nl > implicit val oauth2Service = new GoogleProvider ( oauthGoogleConfig ) < nl > val activationConfig = ActivationConfig . load . get < nl > - val activationContext = InternalCodeActivation . newContext ( activationConfig , new DummySmsEngine , new DummyCallEngine , null ) < nl > + val activationContext = InternalCodeActivation . newContext ( activationConfig , new DummySmsEngine , new DummyCallEngine , new DummyEmailSender ) < nl > implicit val service = new auth . AuthServiceImpl ( activationContext ) < nl > implicit val rpcApiService = system . actorOf ( RpcApiService . props ( Seq ( service ) ) ) < nl > implicit val contactService = new ContactsServiceImpl < nl > @ @ - 169 , 7 + 170 , 9 @ @ final class AuthServiceSpec < nl > appId = 42 , < nl > apiKey = " apiKey " , < nl > deviceHash = deviceHash , < nl > - deviceTitle = " Specs virtual device " < nl > + deviceTitle = " Specs virtual device " , < nl > + timeZone = None , < nl > + preferredLanguages = Vector . empty < nl > ) < nl > < nl > val transactionHash = < nl > @ @ - 199 , 7 + 202 , 9 @ @ final class AuthServiceSpec < nl > appId = 42 , < nl > apiKey = " apiKey " , < nl > deviceHash = Random . nextLong ( ) . toBinaryString . getBytes , < nl > - deviceTitle = " Specs virtual device " < nl > + deviceTitle = " Specs virtual device " , < nl > + timeZone = None , < nl > + preferredLanguages = Vector . empty < nl > ) ) { resp ⇒ < nl > resp should matchPattern { case Ok ( ResponseStartPhoneAuth ( _ , false ) ) ⇒ } < nl > resp . toOption . get . transactionHash < nl > @ @ - 210 , 7 + 215 , 9 @ @ final class AuthServiceSpec < nl > appId = 3 , < nl > apiKey = " someKey " , < nl > deviceHash = Random . nextLong ( ) . toBinaryString . getBytes , < nl > - deviceTitle = " Web browser " < nl > + deviceTitle = " Web browser " , < nl > + timeZone = None , < nl > + preferredLanguages = Vector . empty < nl > ) ) { resp ⇒ < nl > resp should matchPattern { case Ok ( ResponseStartPhoneAuth ( _ , false ) ) ⇒ } < nl > resp . toOption . get . transactionHash < nl > @ @ - 601 , 7 + 608 , 7 @ @ final class AuthServiceSpec < nl > < nl > def e13 ( ) = { } < nl > < nl > - def e14 ( ) = { < nl > + def malformedEmail ( ) = { < nl > val malformedEmail = " foo @ bar " < nl > implicit val clientData = ClientData ( createAuthId ( ) , createSessionId ( ) , None ) < nl > < nl > @ @ - 622 , 7 + 629 , 9 @ @ final class AuthServiceSpec < nl > appId = 42 , < nl > apiKey = " apiKey " , < nl > deviceHash = deviceHash , < nl > - deviceTitle = " Specs virtual device " < nl > + deviceTitle = " Specs virtual device " , < nl > + timeZone = None , < nl > + preferredLanguages = Vector . empty < nl > ) < nl > < nl > val transactionHash = < nl > @ @ - 652 , 7 + 661 , 9 @ @ final class AuthServiceSpec < nl > appId = 42 , < nl > apiKey = " apiKey " , < nl > deviceHash = Random . nextLong ( ) . toBinaryString . getBytes , < nl > - deviceTitle = " Specs virtual device " < nl > + deviceTitle = " Specs virtual device " , < nl > + timeZone = None , < nl > + preferredLanguages = Vector . empty < nl > ) ) { resp ⇒ < nl > resp should matchPattern { case Ok ( ResponseStartEmailAuth ( _ , false , _ ) ) ⇒ } < nl > resp . toOption . get . transactionHash < nl > @ @ - 663 , 7 + 674 , 9 @ @ final class AuthServiceSpec < nl > appId = 3 , < nl > apiKey = " someKey " , < nl > deviceHash = Random . nextLong ( ) . toBinaryString . getBytes , < nl > - deviceTitle = " Web browser " < nl > + deviceTitle = " Web browser " , < nl > + timeZone = None , < nl > + preferredLanguages = Vector . empty < nl > ) ) { resp ⇒ < nl > resp should matchPattern { case Ok ( ResponseStartEmailAuth ( _ , false , _ ) ) ⇒ } < nl > resp . toOption . get . transactionHash < nl > @ @ - 969 , 7 + 982 , 9 @ @ final class AuthServiceSpec < nl > appId = 42 , < nl > apiKey = " apiKey " , < nl > deviceHash = Random . nextLong ( ) . toBinaryString . getBytes , < nl > - deviceTitle = " Specs virtual device " < nl > + deviceTitle = " Specs virtual device " , < nl > + timeZone = None , < nl > + preferredLanguages = Vector . empty < nl > ) < nl > } < nl > < nl > @ @ - 979 , 7 + 994 , 9 @ @ final class AuthServiceSpec < nl > appId = 42 , < nl > apiKey = " apiKey " , < nl > deviceHash = Random . nextLong ( ) . toBinaryString . getBytes , < nl > - deviceTitle = " Specs virtual device " < nl > + deviceTitle = " Specs virtual device " , < nl > + timeZone = None , < nl > + preferredLanguages = Vector . empty < nl > ) < nl > } < nl > < nl > @ @ - 1063 , 10 + 1080 , 11 @ @ object DummyOAuth2Server { < nl > } < nl > } < nl > < nl > - class DummySmsEngine extends AuthSmsEngine { < nl > + final class DummySmsEngine extends AuthSmsEngine { < nl > override def sendCode ( phoneNumber : Long , code : String ) : Future [ Unit ] = Future . successful ( ( ) ) < nl > } < nl > < nl > - class DummyCallEngine extends AuthCallEngine { < nl > + final class DummyCallEngine extends AuthCallEngine { < nl > override def sendCode ( phoneNumber : Long , code : String , language : String ) : Future [ Unit ] = Future . successful ( ( ) ) < nl > - } < nl > \ No newline at end of file < nl > + } < nl > + < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala < nl > index a27e6c8 . . 57fe17e 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala < nl > @ @ - 48 , 7 + 48 , 7 @ @ final class GroupedDialogsSpec < nl > < nl > groups . map ( _ . id ) . toSet shouldBe Set ( group . groupPeer . groupId ) < nl > < nl > - val ( gs , ps ) = dgroups . foldLeft ( Vector . empty [ ApiDialogShort ] , Vector . empty [ ApiDialogShort ] ) { < nl > + val ( gs , ps ) = dgroups . foldLeft ( IndexedSeq . empty [ ApiDialogShort ] , IndexedSeq . empty [ ApiDialogShort ] ) { < nl > case ( ( gs , ps ) , dg ) ⇒ < nl > dg . key match { < nl > case " groups " ⇒ ( dg . dialogs , ps )

TEST DIFF:
diff - - git a / actor - sdk / sdk - api / actor . json b / actor - sdk / sdk - api / actor . json 
 index 678667f . . 47c23f5 100644 
 - - - a / actor - sdk / sdk - api / actor . json 
 + + + b / actor - sdk / sdk - api / actor . json 
 @ @ - 12817 , 6 + 12817 , 14 @ @ 
 } , 
 " id " : 2 , 
 " name " : " eventBusId " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " alias " , 
 + " childType " : " randomId " 
 + } , 
 + " id " : 3 , 
 + " name " : " deviceId " 
 } 
 ] 
 } , 
 diff - - git a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 index 71b61e4 . . 141f807 100644 
 - - - a / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 + + + b / actor - sdk / sdk - api / api - language / solutions / im . actor . api / models / im / actor / api / scheme . mps 
 @ @ - 11015 , 6 + 11015 , 13 @ @ 
 < ref role = " wb18D " node = " 3Tolai5MCV $ " resolve = " busId " / > 
 < / node > 
 < / node > 
 + < node concept = " 2m7Kf5 " id = " 7 _ xsn7u7TOp " role = " 2m0hLx " > 
 + < property role = " 2m7DUN " value = " 3 " / > 
 + < property role = " TrG5h " value = " deviceId " / > 
 + < node concept = " wb0Ql " id = " 7 _ xsn7u7UVr " role = " 2m7DVh " > 
 + < ref role = " wb18D " node = " 2vxDjotnUB8 " resolve = " randomId " / > 
 + < / node > 
 + < / node > 
 < node concept = " Nu42z " id = " 201xLeQvfS9 " role = " NuuwV " > 
 < property role = " Nu42W " value = " A26 " / > 
 < / node > 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationConfig . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationConfig . scala 
 index cb89085 . . 4b65b87 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationConfig . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / common / ActivationConfig . scala 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package im . actor . server . activation . common 
 
 - import com . github . kxbmap . configs . _ 
 + import com . github . kxbmap . configs . syntax . _ 
 import com . typesafe . config . { Config , ConfigFactory } 
 
 import scala . concurrent . duration . _ 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala 
 index 670ec0a . . 121bfb4 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / gate / GateConfig . scala 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package im . actor . server . activation . gate 
 
 - import com . github . kxbmap . configs . _ 
 + import com . github . kxbmap . configs . syntax . _ 
 import com . typesafe . config . Config 
 import im . actor . config . ActorConfig 
 
 diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalActivationConfig . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalActivationConfig . scala 
 index 9ad726e . . fb4c81e 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalActivationConfig . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalActivationConfig . scala 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package im . actor . server . activation . internal 
 
 - import com . github . kxbmap . configs . _ 
 + import com . github . kxbmap . configs . syntax . _ 
 import com . typesafe . config . Config 
 import im . actor . config . ActorConfig 
 
 diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json 
 index 29a9619 . . 47c23f5 100644 
 - - - a / actor - server / actor - core / src / main / actor - api / actor . json 
 + + + b / actor - server / actor - core / src / main / actor - api / actor . json 
 @ @ - 4569 , 6 + 4569 , 64 @ @ 
 { 
 " type " : " rpc " , 
 " content " : { 
 + " name " : " UpdateMessage " , 
 + " header " : 2658 , 
 + " response " : { 
 + " type " : " reference " , 
 + " name " : " SeqDate " 
 + } , 
 + " doc " : [ 
 + " Changing Message content " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " peer " , 
 + " category " : " full " , 
 + " description " : " Destination Peer " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " rid " , 
 + " category " : " full " , 
 + " description " : " Message random id " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " updatedMessage " , 
 + " category " : " full " , 
 + " description " : " Updated Message content " 
 + } 
 + ] , 
 + " attributes " : [ 
 + { 
 + " type " : { 
 + " type " : " struct " , 
 + " childType " : " OutPeer " 
 + } , 
 + " id " : 1 , 
 + " name " : " peer " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " alias " , 
 + " childType " : " randomId " 
 + } , 
 + " id " : 2 , 
 + " name " : " rid " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " trait " , 
 + " childType " : " Message " 
 + } , 
 + " id " : 3 , 
 + " name " : " updatedMessage " 
 + } 
 + ] 
 + } 
 + } , 
 + { 
 + " type " : " rpc " , 
 + " content " : { 
 " name " : " MessageReceived " , 
 " header " : 55 , 
 " response " : { 
 @ @ - 12052 , 7 + 12110 , 7 @ @ 
 { 
 " type " : " reference " , 
 " argument " : " message " , 
 - " category " : " full " , 
 + " category " : " hidden " , 
 " description " : " Message " 
 } 
 ] , 
 @ @ - 12226 , 7 + 12284 , 7 @ @ 
 { 
 " type " : " reference " , 
 " argument " : " message " , 
 - " category " : " compact " , 
 + " category " : " hidden " , 
 " description " : " Message " 
 } 
 ] , 
 @ @ - 12738 , 6 + 12796 , 12 @ @ 
 " argument " : " callId " , 
 " category " : " full " , 
 " description " : " Call Id " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " eventBusId " , 
 + " category " : " full " , 
 + " description " : " Call Event Bus Id " 
 } 
 ] , 
 " attributes " : [ 
 @ @ - 12745 , 6 + 12809 , 22 @ @ 
 " type " : " int64 " , 
 " id " : 1 , 
 " name " : " callId " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " alias " , 
 + " childType " : " busId " 
 + } , 
 + " id " : 2 , 
 + " name " : " eventBusId " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " alias " , 
 + " childType " : " randomId " 
 + } , 
 + " id " : 3 , 
 + " name " : " deviceId " 
 } 
 ] 
 } , 
 @ @ - 12755 , 12 + 12835 , 6 @ @ 
 " argument " : " peer " , 
 " category " : " full " , 
 " description " : " destination peer " 
 - } , 
 - { 
 - " type " : " reference " , 
 - " argument " : " eventBusId " , 
 - " category " : " full " , 
 - " description " : " Call Event Bus Id " 
 } 
 ] , 
 " attributes " : [ 
 @ @ - 12771 , 14 + 12845 , 6 @ @ 
 } , 
 " id " : 1 , 
 " name " : " peer " 
 - } , 
 - { 
 - " type " : { 
 - " type " : " alias " , 
 - " childType " : " busId " 
 - } , 
 - " id " : 2 , 
 - " name " : " eventBusId " 
 } 
 ] 
 } 
 @ @ - 13001 , 6 + 13067 , 56 @ @ 
 } 
 } , 
 { 
 + " type " : " struct " , 
 + " content " : { 
 + " name " : " ICEServer " , 
 + " doc " : [ 
 + " ICE Server description " , 
 + { 
 + " type " : " reference " , 
 + " argument " : " url " , 
 + " category " : " full " , 
 + " description " : " Url to server " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " username " , 
 + " category " : " full " , 
 + " description " : " Optional username " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " credential " , 
 + " category " : " danger " , 
 + " description " : " Optional credential " 
 + } 
 + ] , 
 + " attributes " : [ 
 + { 
 + " type " : " string " , 
 + " id " : 1 , 
 + " name " : " url " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " opt " , 
 + " childType " : " string " 
 + } , 
 + " id " : 2 , 
 + " name " : " username " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " opt " , 
 + " childType " : " string " 
 + } , 
 + " id " : 3 , 
 + " name " : " credential " 
 + } 
 + ] 
 + } 
 + } , 
 + { 
 " type " : " trait " , 
 " content " : { 
 " isContainer " : " true " , 
 @ @ - 13055 , 7 + 13171 , 19 @ @ 
 " name " : " WebRTCSignaling " , 
 " key " : 26 
 } , 
 - " attributes " : [ ] 
 + " attributes " : [ 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : { 
 + " type " : " struct " , 
 + " childType " : " ICEServer " 
 + } 
 + } , 
 + " id " : 1 , 
 + " name " : " server " 
 + } 
 + ] 
 } 
 } , 
 { 
 @ @ - 13694 , 6 + 13822 , 12 @ @ 
 " argument " : " canBeAudioRelay " , 
 " category " : " full " , 
 " description " : " If peer can audio relay . Default is false . " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " canPreConnect " , 
 + " category " : " full " , 
 + " description " : " If peer can preconnect before answer " 
 } 
 ] , 
 " attributes " : [ 
 @ @ - 13727 , 7 + 13861 , 7 @ @ 
 " childType " : " bool " 
 } , 
 " id " : 4 , 
 - " name " : " canConnect " 
 + " name " : " canPreConnect " 
 } 
 ] 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 index 8b8db9d . . 630bcb8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / eventbus / EventBusExtension . scala 
 @ @ - 62 , 9 + 62 , 15 @ @ final class EventBusExtension ( system : ActorSystem ) extends Extension { 
 clientAuthId : AuthId , 
 timeout : Option [ Long ] , 
 isOwned : Option [ Boolean ] 
 - ) : Future [ ( EventBusId , DeviceId ) ] = { 
 + ) : Future [ ( EventBusId , DeviceId ) ] = 
 + create ( EventBus . ExternalClient ( clientUserId , clientAuthId ) , timeout , isOwned ) 
 + 
 + def create ( ref : ActorRef , timeout : Option [ Long ] , isOwned : Option [ Boolean ] ) : Future [ ( String , EventBus . DeviceId ) ] = 
 + create ( EventBus . InternalClient ( ref ) , timeout , isOwned ) 
 + 
 + def create ( client : EventBus . Client , timeout : Option [ Long ] , isOwned : Option [ Boolean ] ) : Future [ ( String , EventBus . DeviceId ) ] = { 
 val id = UUID . randomUUID ( ) . toString 
 - ( region ? EventBusEnvelope ( id , Create ( ExternalClient ( clientUserId , clientAuthId ) , timeout , isOwned ) ) ) . mapTo [ CreateAck ] map ( ack ⇒ ( id , ack . deviceId ) ) 
 + ( region ? EventBusEnvelope ( id , Create ( client , timeout , isOwned ) ) ) . mapTo [ CreateAck ] map ( ack ⇒ ( id , ack . deviceId ) ) 
 } 
 
 def dispose ( clientUserId : UserId , clientAuthId : AuthId , id : String ) : Future [ Unit ] = 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala 
 index 702a936 . . de7d7c3 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala 
 @ @ - 10 , 7 + 10 , 7 @ @ import akka . stream . actor . ActorPublisher 
 import akka . stream . scaladsl . Source 
 import akka . util . ByteString 
 import cats . data . Xor 
 - import com . github . kxbmap . configs . _ 
 + import com . github . kxbmap . configs . syntax . _ 
 import com . typesafe . config . Config 
 import im . actor . server . db . DbExtension 
 import im . actor . server . persist . push . GooglePushCredentialsRepo 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index bc0bcb7 . . c35ea50 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 32 , 11 + 32 , 11 @ @ object WebrtcCallErrors { 
 object NotJoinedToEventBus extends WebrtcCallError ( " Not joined to EventBus " ) 
 } 
 
 - sealed trait WebrtcCallMessage 
 + private [ webrtc ] sealed trait WebrtcCallMessage 
 
 - object WebrtcCallMessages { 
 - final case class StartCall ( callerUserId : UserId , peer : Peer , eventBusId : String ) extends WebrtcCallMessage 
 - case object StartCallAck 
 + private [ webrtc ] object WebrtcCallMessages { 
 + final case class StartCall ( callerUserId : UserId , callerAuthId : AuthId , peer : Peer ) extends WebrtcCallMessage 
 + final case class StartCallAck ( eventBusId : String , callerDeviceId : EventBus . DeviceId ) 
 
 final case class JoinCall ( calleeUserId : UserId , authId : AuthId ) extends WebrtcCallMessage 
 case object JoinCallAck 
 @ @ - 50 , 7 + 50 , 7 @ @ object WebrtcCallMessages { 
 } 
 } 
 
 - final case class WebrtcCallEnvelope ( id : Long , message : WebrtcCallMessage ) 
 + private [ webrtc ] final case class WebrtcCallEnvelope ( id : Long , message : WebrtcCallMessage ) 
 
 object WebrtcCallActor { 
 val RegionTypeName = " WebrtcCall " 
 @ @ - 71 , 6 + 71 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 private val groupExt = GroupExtension ( context . system ) 
 private val valuesExt = ValuesExtension ( context . system ) 
 private val apnsExt = ApplePushExtension ( context . system ) 
 + private val webrtcExt = WebrtcExtension ( context . system ) 
 
 case class Device ( 
 deviceId : EventBus . DeviceId , 
 @ @ - 78 , 9 + 79 , 9 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 peerSettings : Option [ ApiPeerSettings ] , 
 isJoined : Boolean 
 ) { 
 - def canConnect ( pairPeerSettings : Option [ ApiPeerSettings ] ) : Boolean = 
 + def canPreConnect ( pairPeerSettings : Option [ ApiPeerSettings ] ) : Boolean = 
 isJoined | | 
 - ( peerSettings . map ( _ . canConnect ) . isDefined & & pairPeerSettings . map ( _ . canConnect ) . isDefined ) 
 + ( peerSettings . map ( _ . canPreConnect ) . isDefined & & pairPeerSettings . map ( _ . canPreConnect ) . isDefined ) 
 } 
 
 object Pair { 
 @ @ - 94 , 6 + 95 , 8 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 
 type SessionId = Long 
 
 + private val eventBusClient = EventBus . InternalClient ( self ) 
 + 
 private var scheduledUpds = Map . empty [ UserId , Cancellable ] 
 private var devices = Map . empty [ EventBus . DeviceId , Device ] 
 private var clients = Map . empty [ EventBus . Client , EventBus . DeviceId ] 
 @ @ - 107 , 28 + 110 , 28 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 
 def waitForStart : Receive = { 
 case s : StartCall ⇒ 
 - case class Res ( callees : Seq [ Int ] , callerDeviceId : EventBus . DeviceId ) 
 + case class Res ( eventBusId : String , callees : Seq [ Int ] , callerDeviceId : EventBus . DeviceId ) 
 this . peer = s . peer 
 this . callerUserId = s . callerUserId 
 
 ( for { 
 callees ← fetchParticipants ( callerUserId , peer ) map ( _ filterNot ( _ = = callerUserId ) ) 
 - callerDeviceId ← eventBusExt . fetchOwner ( s . eventBusId ) 
 - _ ← eventBusExt . join ( EventBus . InternalClient ( self ) , s . eventBusId , None ) 
 + eventBusId ← eventBusExt . create ( eventBusClient , timeout = None , isOwned = Some ( true ) ) map ( _ . _ 1 ) 
 + callerDeviceId ← eventBusExt . join ( EventBus . ExternalClient ( s . callerUserId , s . callerAuthId ) , eventBusId , Some ( 16000 ) ) 
 _ ← scheduleIncomingCallUpdates ( callees ) 
 - } yield Res ( callees , callerDeviceId ) ) pipeTo self 
 + } yield Res ( eventBusId , callees , callerDeviceId ) ) pipeTo self 
 
 becomeStashing ( replyTo ⇒ { 
 - case Res ( callees , callerDeviceId ) ⇒ 
 - replyTo ! StartCallAck 
 + case Res ( eventBusId , callees , callerDeviceId ) ⇒ 
 + replyTo ! StartCallAck ( eventBusId , callerDeviceId ) 
 
 - eventBusExt . post ( EventBus . InternalClient ( self ) , s . eventBusId , Seq ( callerDeviceId ) , ApiAdvertiseMaster . toByteArray ) 
 + advertiseMaster ( eventBusId , callerDeviceId ) 
 
 callees foreach ( putParticipant ( _ , ApiCallMemberState . RINGING ) ) 
 putParticipant ( callerUserId , ApiCallMemberState . CONNECTED ) 
 broadcastSyncedSet ( ) 
 
 - context become callInProgress ( peer , s . eventBusId , callerDeviceId , System . currentTimeMillis ( ) , callerUserId ) 
 + context become callInProgress ( peer , eventBusId , callerDeviceId , System . currentTimeMillis ( ) , callerUserId ) 
 unstashAll ( ) 
 case failure : Status . Failure ⇒ 
 replyTo forward failure 
 @ @ - 251 , 7 + 254 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 sender ( ) ! GetInfoAck ( eventBusId , peer , participants . keySet . toSeq ) 
 case EventBus . Joined ( _ , client , deviceId ) ⇒ 
 if ( client . isExternal ) 
 - eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( deviceId ) , ApiAdvertiseMaster . toByteArray ) 
 + advertiseMaster ( eventBusId , deviceId ) 
 case ebMessage : EventBus . Message ⇒ 
 ApiWebRTCSignaling . parseFrom ( ebMessage . message ) . right foreach { 
 case msg : ApiAdvertiseSelf ⇒ 
 @ @ - 259 , 7 + 262 , 7 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 val newDevice = Device ( deviceId , ebMessage . client , msg . peerSettings , isJoined = deviceId = = callerDeviceId ) 
 devices foreach { 
 case ( pairDeviceId , pairDevice ) ⇒ 
 - if ( pairDevice . canConnect ( msg . peerSettings ) ) 
 + if ( pairDevice . canPreConnect ( msg . peerSettings ) ) 
 connect ( newDevice , pairDevice ) 
 } 
 putDevice ( deviceId , ebMessage . client , newDevice ) 
 @ @ - 308 , 6 + 311 , 14 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 } 
 } 
 
 + private def advertiseMaster ( eventBusId : String , deviceId : EventBus . DeviceId ) : Unit = { 
 + val advMaster = 
 + ApiAdvertiseMaster ( 
 + server = webrtcExt . config . iceServers . toVector map ( s ⇒ ApiICEServer ( s . url , s . username , s . credential ) ) 
 + ) 
 + eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( deviceId ) , advMaster . toByteArray ) 
 + } 
 + 
 private def isConnected ( userId : UserId ) : Boolean = { 
 val userDevices = devices . filter ( _ . _ 2 . client . externalUserId . contains ( userId ) ) . values . map ( _ . deviceId ) . toSet 
 sessions . keySet . exists ( pair ⇒ userDevices . contains ( pair . left ) | | userDevices . contains ( pair . right ) ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala 
 index 29d30d2 . . c63e96d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcExtension . scala 
 @ @ - 1 , 22 + 1 , 35 @ @ 
 package im . actor . server . webrtc 
 
 import akka . actor . _ 
 + import akka . cluster . sharding . ShardRegion . { ExtractEntityId , ExtractShardId } 
 + import akka . cluster . sharding . { ClusterSharding , ClusterShardingSettings } 
 import akka . pattern . ask 
 - import akka . cluster . sharding . ShardRegion . { ExtractShardId , ExtractEntityId } 
 - import akka . cluster . sharding . { ClusterShardingSettings , ClusterSharding } 
 import akka . util . Timeout 
 + import com . github . kxbmap . configs . syntax . _ 
 + import com . typesafe . config . Config 
 import im . actor . config . ActorConfig 
 + import im . actor . server . eventbus . EventBus 
 import im . actor . server . model . Peer 
 import im . actor . types . _ 
 
 import scala . concurrent . Future 
 import scala . concurrent . forkjoin . ThreadLocalRandom 
 + import scala . util . Try 
 
 object Webrtc { 
 private [ webrtc ] val SyncedSetName = " messaging . calls " 
 } 
 
 + private [ webrtc ] case class ICEServer ( url : String , username : Option [ String ] , credential : Option [ String ] ) 
 + 
 + private [ webrtc ] case class WebrtcConfig ( iceServers : Seq [ ICEServer ] ) 
 + 
 + private [ webrtc ] object WebrtcConfig { 
 + def load ( config : Config ) : Try [ WebrtcConfig ] = Try ( config . get [ WebrtcConfig ] ( " modules . webrtc " ) ) 
 + } 
 + 
 final class WebrtcExtension ( system : ActorSystem ) extends Extension { 
 + 
 import im . actor . server . webrtc . WebrtcCallMessages . _ 
 import system . dispatcher 
 
 @ @ - 34 , 10 + 47 , 15 @ @ final class WebrtcExtension ( system : ActorSystem ) extends Extension { 
 ClusterSharding ( system ) 
 . start ( " WebrtcCall " , WebrtcCallActor . props , ClusterShardingSettings ( system ) , extractEntityId , extractShardId ) 
 
 - def doCall ( callerUserId : Int , peer : Peer , eventBusId : String ) : Future [ Long ] = { 
 + private [ webrtc ] val config = WebrtcConfig . load ( system . settings . config ) . get 
 + 
 + def doCall ( callerUserId : UserId , callerAuthId : AuthId , peer : Peer ) : Future [ ( Long , String , EventBus . DeviceId ) ] = { 
 val callId = ThreadLocalRandom . current ( ) . nextLong ( ) 
 
 - region ? WebrtcCallEnvelope ( callId , StartCall ( callerUserId , peer , eventBusId ) ) map ( _ ⇒ callId ) 
 + ( region ? WebrtcCallEnvelope ( 
 + callId , 
 + StartCall ( callerUserId , callerAuthId , peer ) 
 + ) ) . mapTo [ StartCallAck ] map ( ack ⇒ ( callId , ack . eventBusId , ack . callerDeviceId ) ) 
 } 
 
 def joinCall ( calleeUserId : Int , calleeAuthId : Long , callId : Long ) : Future [ Unit ] = 
 diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala 
 index 450a59d . . 17d0480 100644 
 - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala 
 + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailConfig . scala 
 @ @ - 3 , 36 + 3 , 19 @ @ package im . actor . server . email 
 import im . actor . config . ActorConfig 
 
 import scala . util . Try 
 - import com . github . kxbmap . configs . _ 
 + import com . github . kxbmap . configs . syntax . _ 
 import com . typesafe . config . Config 
 
 - case class EmailConfig ( 
 - / / sender part 
 - address : String , 
 - name : String , 
 - prefix : String , 
 + private [ email ] case class Sender ( address : String , name : String , prefix : String ) 
 + private [ email ] case class Smtp ( host : String , port : Int , username : String , password : String , tls : Boolean ) 
 
 - / / smtp part 
 - host : String , 
 - port : Int , 
 - username : String , 
 - password : String , 
 - tls : Boolean 
 + case class EmailConfig ( 
 + sender : Sender , 
 + smtp : Smtp 
 ) 
 
 object EmailConfig { 
 - def load ( config : Config ) : Try [ EmailConfig ] = 
 - for { 
 - address ← config . get [ Try [ String ] ] ( " sender . address " ) 
 - name ← config . get [ Try [ String ] ] ( " sender . name " ) 
 - prefix ← config . get [ Try [ String ] ] ( " sender . prefix " ) 
 - 
 - host ← config . get [ Try [ String ] ] ( " smtp . host " ) 
 - port ← config . get [ Try [ Int ] ] ( " smtp . port " ) 
 - username ← config . get [ Try [ String ] ] ( " smtp . username " ) 
 - password ← config . get [ Try [ String ] ] ( " smtp . password " ) 
 - tls ← config . get [ Try [ Boolean ] ] ( " smtp . tls " ) 
 - } yield EmailConfig ( address , name , prefix , host , port , username , password , tls ) 
 + def load ( config : Config ) : Try [ EmailConfig ] = Try ( config . get [ EmailConfig ] ( " " ) ) 
 
 def load : Try [ EmailConfig ] = load ( ActorConfig . load ( ) . getConfig ( " services . email " ) ) 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 index b708712 . . 3468e8b 100644 
 - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 @ @ - 37 , 11 + 37 , 11 @ @ final class SmtpEmailSender ( config : EmailConfig ) ( implicit ec : ExecutionContext ) 
 email . setSocketTimeout ( timeout ) 
 email . setSocketConnectionTimeout ( timeout ) 
 email . setCharset ( " UTF - 8 " ) 
 - email . setHostName ( config . host ) 
 - email . setSmtpPort ( config . port ) 
 - email . setAuthenticator ( new DefaultAuthenticator ( config . username , config . password ) ) 
 - email . setStartTLSEnabled ( config . tls ) 
 - email . setFrom ( config . address , config . name ) 
 + email . setHostName ( config . smtp . host ) 
 + email . setSmtpPort ( config . smtp . port ) 
 + email . setAuthenticator ( new DefaultAuthenticator ( config . smtp . username , config . smtp . password ) ) 
 + email . setStartTLSEnabled ( config . smtp . tls ) 
 + email . setFrom ( config . sender . address , config . sender . name ) 
 email . setSubject ( message . subject ) 
 message . content . html foreach { email . setHtmlMsg } 
 message . content . text foreach { email . setTextMsg } 
 diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala 
 index 14890d0 . . b0baeb8 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / Frontend . scala 
 @ @ - 8 , 7 + 8 , 7 @ @ import scala . collection . JavaConversions . _ 
 
 import akka . actor . ActorSystem 
 import akka . stream . Materializer 
 - import com . github . kxbmap . configs . _ 
 + import com . github . kxbmap . configs . syntax . _ 
 import com . typesafe . config . Config 
 import slick . driver . PostgresDriver . api . _ 
 
 @ @ - 39 , 7 + 39 , 7 @ @ object Endpoint { 
 typ ← config . get [ Either [ Throwable , String ] ] ( " type " ) . right . flatMap ( EndpointType . fromString ) . right 
 host ← config . get [ Either [ Throwable , String ] ] ( " interface " ) . right 
 port ← config . get [ Either [ Throwable , Int ] ] ( " port " ) . right 
 - keystore ← Right ( config . opt [ String ] ( " keystore " ) ) . right 
 + keystore ← Right ( config . getOpt [ String ] ( " keystore " ) ) . right 
 } yield Endpoint ( 
 typ , host , port , keystore 
 ) 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageConfig . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageConfig . scala 
 index 8a2bd15 . . 80aa668 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageConfig . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / local / LocalFileStorageConfig . scala 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package im . actor . server . file . local 
 
 - import com . github . kxbmap . configs . _ 
 + import com . github . kxbmap . configs . syntax . _ 
 import com . typesafe . config . Config 
 import im . actor . config . ActorConfig 
 
 diff - - git a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapterConfig . scala b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapterConfig . scala 
 index 2987b9a . . 6d5f06b 100644 
 - - - a / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapterConfig . scala 
 + + + b / actor - server / actor - fs - adapters / src / main / scala / im / actor / server / file / s3 / S3StorageAdapterConfig . scala 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package im . actor . server . file . s3 
 
 - import com . github . kxbmap . configs . _ 
 + import com . github . kxbmap . configs . syntax . _ 
 import com . typesafe . config . { ConfigFactory , Config } 
 
 import scala . util . Try 
 diff - - git a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiConfig . scala b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiConfig . scala 
 index d0122ec . . 453f016 100644 
 - - - a / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiConfig . scala 
 + + + b / actor - server / actor - http - api / src / main / scala / im / actor / server / api / http / HttpApiConfig . scala 
 @ @ - 4 , 7 + 4 , 7 @ @ import im . actor . config . ActorConfig 
 
 import scala . util . { Success , Try } 
 
 - import com . github . kxbmap . configs . _ 
 + import com . github . kxbmap . configs . syntax . _ 
 import com . typesafe . config . Config 
 
 case class HttpApiConfig ( interface : String , port : Int , baseUri : String , staticFiles : String , keystore : Option [ String ] ) 
 @ @ - 16 , 7 + 16 , 7 @ @ object HttpApiConfig { 
 port ← config . get [ Try [ Int ] ] ( " port " ) 
 baseUri ← config . get [ Try [ String ] ] ( " base - uri " ) 
 staticFiles ← config . get [ Try [ String ] ] ( " static - files - directory " ) 
 - keystore ← Success ( config . opt [ String ] ( " keystore " ) ) 
 + keystore ← Success ( config . getOpt [ String ] ( " keystore " ) ) 
 } yield HttpApiConfig ( interface , port , baseUri , staticFiles , keystore ) 
 
 def load : Try [ HttpApiConfig ] = load ( ActorConfig . load ( ) . getConfig ( " http " ) ) 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala 
 index 14c8a56 . . 7ba3d84 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / db / DbExtension . scala 
 @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . db 
 
 import akka . actor . _ 
 import akka . event . Logging 
 - import com . github . kxbmap . configs . _ 
 + import com . github . kxbmap . configs . syntax . _ 
 import com . typesafe . config . { Config , ConfigFactory } 
 import im . actor . server . JNDI 
 import org . flywaydb . core . Flyway 
 diff - - git a / actor - server / actor - rpc - api / src / main / resources / reference . conf b / actor - server / actor - rpc - api / src / main / resources / reference . conf 
 index 83c27b4 . . c6ddc19 100644 
 - - - a / actor - server / actor - rpc - api / src / main / resources / reference . conf 
 + + + b / actor - server / actor - rpc - api / src / main / resources / reference . conf 
 @ @ - 16 , 4 + 16 , 8 @ @ modules { 
 search { 
 rpc = " im . actor . server . api . rpc . service . search . SearchServiceImpl " 
 } 
 + 
 + webrtc { 
 + ice - servers : [ ] 
 + } 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 index 7718e0b . . 6f9073f 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / messaging / MessagingHandlers . scala 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . server . api . rpc . service . messaging 
 
 + import akka . http . scaladsl . util . FastFuture 
 import akka . util . Timeout 
 import im . actor . api . rpc . _ 
 import im . actor . api . rpc . messaging . _ 
 @ @ - 31 , 4 + 32 , 7 @ @ private [ messaging ] trait MessagingHandlers extends PeersImplicits { 
 ) ) 
 ) yield ResponseSeqDate ( s . seq , s . state . toByteArray , s . date ) ) . value 
 } 
 + 
 + override def doHandleUpdateMessage ( peer : ApiOutPeer , randomId : Long , updatedMessage : ApiMessage , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeqDate ] ] = 
 + FastFuture . failed ( new RuntimeException ( " Not implemented " ) ) 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala 
 index 836daad . . 91dea72 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / webrtc / WebrtcServiceImpl . scala 
 @ @ - 35 , 12 + 35 , 12 @ @ final class WebrtcServiceImpl ( implicit system : ActorSystem , sessionRegion : Sessi 
 } yield Ok ( ResponseGetCallInfo ( peer . asStruct , Vector . empty , users . toVector , eventBusId ) ) 
 } 
 
 - override def doHandleDoCall ( peer : ApiOutPeer , eventBusId : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseDoCall ] ] = 
 + override def doHandleDoCall ( peer : ApiOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseDoCall ] ] = 
 authorized ( clientData ) { implicit client ⇒ 
 withOutPeerF ( peer ) { 
 for { 
 - callId ← webrtcExt . doCall ( client . userId , peer . asModel , eventBusId ) 
 - } yield Ok ( ResponseDoCall ( callId ) ) 
 + ( callId , eventBusId , callerDeviceId ) ← webrtcExt . doCall ( client . userId , client . authId , peer . asModel ) 
 + } yield Ok ( ResponseDoCall ( callId , eventBusId , callerDeviceId ) ) 
 } 
 } 
 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index 38d013c . . 89f2377 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 55 , 7 + 55 , 7 @ @ object Dependencies { 
 val circeGeneric = " io . circe " % % " circe - generic " % V . circe 
 val circeParse = " io . circe " % % " circe - parse " % V . circe 
 
 - val configs = " com . github . kxbmap " % % " configs " % " 0 . 2 . 4 " 
 + val configs = " com . github . kxbmap " % % " configs " % " 0 . 3 . 0 " 
 
 val dispatch = " net . databinder . dispatch " % % " dispatch - core " % " 0 . 11 . 3 " 
 val javaCompat = " org . scala - lang . modules " % % " scala - java8 - compat " % " 0 . 7 . 0 "

NEAREST DIFF:
diff - - git a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 index dc0dd68 . . d09a364 100644 
 - - - a / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 + + + b / actor - server / actor - activation / src / main / scala / im / actor / server / activation / internal / InternalCodeActivation . scala 
 @ @ - 9 , 13 + 9 , 12 @ @ import akka . stream . Materializer 
 import akka . util . Timeout 
 import im . actor . server . activation . Activation . { CallCode , Code , EmailCode , SmsCode } 
 import im . actor . server . activation . _ 
 - import im . actor . server . email . { Content , EmailSender , Message } 
 + import im . actor . server . email . { EmailSender , Content , Message } 
 import im . actor . server . models . AuthCode 
 import im . actor . server . persist 
 import im . actor . server . sms . { AuthCallEngine , AuthSmsEngine } 
 import im . actor . util . misc . EmailUtils . isTestEmail 
 import im . actor . util . misc . PhoneNumberUtils . isTestPhone 
 - import im . actor . util . misc . { EmailUtils , PhoneNumberUtils } 
 import slick . driver . PostgresDriver . api . _ 
 
 import scala . concurrent . duration . _ 
 @ @ - 124 , 6 + 123 , 8 @ @ class Activation ( repeatLimit : Duration , smsEngine : AuthSmsEngine , callEngine : Au 
 case SmsCode ( phone , c ) ⇒ smsEngine . sendCode ( phone , c ) 
 case CallCode ( phone , c , language ) ⇒ callEngine . sendCode ( phone , c , language ) 
 case EmailCode ( email , c ) ⇒ 
 + println ( s " = = = email , $ { email } " ) 
 + if ( email = = null ) println ( " = = = null " ) 
 emailSender . send ( Message ( email , s " Actor activation code : $ c " , Content ( Some ( emailTemplate . replace ( " $ $ CODE $ $ " , c ) ) , Some ( s " Your actor activation code : $ c " ) ) ) ) 
 } ) map { _ ⇒ 
 forgetSentCodeAfterDelay ( code ) 
 diff - - git a / actor - server / actor - core / src / main / actor - api / actor . json b / actor - server / actor - core / src / main / actor - api / actor . json 
 index 0da016e . . 5acee8a 100644 
 - - - a / actor - server / actor - core / src / main / actor - api / actor . json 
 + + + b / actor - server / actor - core / src / main / actor - api / actor . json 
 @ @ - 127 , 6 + 127 , 18 @ @ 
 " argument " : " deviceTitle " , 
 " category " : " full " , 
 " description " : " Device Title " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " timeZone " , 
 + " category " : " full " , 
 + " description " : " TimeZone of device " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " preferredLanguages " , 
 + " category " : " full " , 
 + " description " : " Preferred languages of device " 
 } 
 ] , 
 " attributes " : [ 
 @ @ - 154 , 6 + 166 , 22 @ @ 
 " type " : " string " , 
 " id " : 5 , 
 " name " : " deviceTitle " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " opt " , 
 + " childType " : " string " 
 + } , 
 + " id " : 6 , 
 + " name " : " timeZone " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : " string " 
 + } , 
 + " id " : 7 , 
 + " name " : " preferredLanguages " 
 } 
 ] 
 } 
 @ @ - 258 , 14 + 286 , 26 @ @ 
 { 
 " type " : " reference " , 
 " argument " : " deviceHash " , 
 - " category " : " hidden " , 
 + " category " : " full " , 
 " description " : " Hash of device unique id and app bundle id . Used for autologout users when app is reinstalled " 
 } , 
 { 
 " type " : " reference " , 
 " argument " : " deviceTitle " , 
 - " category " : " hidden " , 
 + " category " : " full " , 
 " description " : " Device Title " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " timeZone " , 
 + " category " : " full " , 
 + " description " : " TimeZone of device " 
 + } , 
 + { 
 + " type " : " reference " , 
 + " argument " : " preferredLanguages " , 
 + " category " : " full " , 
 + " description " : " Preferred languages " 
 } 
 ] , 
 " attributes " : [ 
 @ @ - 293 , 6 + 333 , 22 @ @ 
 " type " : " string " , 
 " id " : 5 , 
 " name " : " deviceTitle " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " opt " , 
 + " childType " : " string " 
 + } , 
 + " id " : 6 , 
 + " name " : " timeZone " 
 + } , 
 + { 
 + " type " : { 
 + " type " : " list " , 
 + " childType " : " string " 
 + } , 
 + " id " : 7 , 
 + " name " : " preferredLanguages " 
 } 
 ] 
 } 
 diff - - git a / actor - server / actor - core / src / main / protobuf / auth . proto b / actor - server / actor - core / src / main / protobuf / auth . proto 
 new file mode 100644 
 index 0000000 . . bf1e891 
 - - - / dev / null 
 + + + b / actor - server / actor - core / src / main / protobuf / auth . proto 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + syntax = " proto3 " ; 
 + 
 + package im . actor . server ; 
 + 
 + message UserData { 
 + string time _ zone = 1 ; 
 + repeated string preferred _ languages = 2 ; 
 + } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 index b9e04a2 . . ebcd4e7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserOperations . scala 
 @ @ - 8 , 6 + 8 , 7 @ @ import im . actor . api . rpc . misc . ApiExtension 
 import im . actor . api . rpc . { AuthorizedClientData , Update } 
 import im . actor . api . rpc . peers . ApiPeer 
 import im . actor . api . rpc . users . { ApiUser , ApiSex } 
 + import im . actor . server . auth . UserData 
 import im . actor . server . db . DbExtension 
 import im . actor . server . file . Avatar 
 import im . actor . server . persist . UserRepo 
 @ @ - 80 , 6 + 81 , 12 @ @ private [ user ] sealed trait Commands extends AuthCommands { 
 def changeTimeZone ( userId : Int , authId : Long , timeZone : String ) : Future [ SeqState ] = 
 ( processorRegion . ref ? ChangeTimeZone ( userId , authId , timeZone ) ) . mapTo [ SeqState ] 
 
 + def setUserData ( userId : Int , authId : Long , data : UserData ) : Future [ Unit ] = 
 + for { 
 + _ ← changeTimeZone ( userId , authId , data . timeZone ) 
 + _ ← changePreferredLanguages ( userId , authId , data . preferredLanguages ) 
 + } yield ( ) 
 + 
 def changePreferredLanguages ( userId : Int , authId : Long , preferredLanguages : Seq [ String ] ) : Future [ SeqState ] = 
 ( processorRegion . ref ? ChangePreferredLanguages ( userId , authId , preferredLanguages ) ) . mapTo [ SeqState ] 
 
 diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 index 5fda915 . . cc16a1a 100644 
 - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 @ @ - 15 , 8 + 15 , 16 @ @ case class Content ( html : Option [ String ] , text : Option [ String ] ) { 
 
 case class Message ( to : String , subject : String , content : Content ) 
 
 - class EmailSender ( config : EmailConfig ) { 
 - def send ( message : Message ) ( implicit ec : ExecutionContext ) = Future { 
 + trait EmailSender { 
 + def send ( message : Message ) : Future [ Unit ] 
 + } 
 + 
 + final class DummyEmailSender extends EmailSender { 
 + override def send ( message : Message ) : Future [ Unit ] = Future . successful ( ( ) ) 
 + } 
 + 
 + final class SmtpEmailSender ( config : EmailConfig ) ( implicit ec : ExecutionContext ) extends EmailSender { 
 + override def send ( message : Message ) = Future { 
 val email = new HtmlEmail ( ) 
 email . setHostName ( config . host ) 
 email . setSmtpPort ( config . port ) 
 diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / models / AuthTransactions . scala b / actor - server / actor - models / src / main / scala / im / actor / server / models / AuthTransactions . scala 
 index d014aee . . 15dc480 100644 
 - - - a / actor - server / actor - models / src / main / scala / im / actor / server / models / AuthTransactions . scala 
 + + + b / actor - server / actor - models / src / main / scala / im / actor / server / models / AuthTransactions . scala 
 @ @ - 12 , 6 + 12 , 7 @ @ case class AuthTransaction ( 
 deviceHash : Array [ Byte ] , 
 deviceTitle : String , 
 accessSalt : String , 
 + userData : Array [ Byte ] , 
 isChecked : Boolean = false , 
 deletedAt : Option [ LocalDateTime ] = None 
 ) 
 @ @ - 27 , 6 + 28 , 7 @ @ case class AuthPhoneTransaction ( 
 deviceHash : Array [ Byte ] , 
 deviceTitle : String , 
 accessSalt : String , 
 + userData : Array [ Byte ] , 
 isChecked : Boolean = false , 
 deletedAt : Option [ LocalDateTime ] = None 
 ) extends AuthTransactionChildren 
 @ @ - 43 , 6 + 45 , 7 @ @ case class AuthEmailTransaction ( 
 deviceHash : Array [ Byte ] , 
 deviceTitle : String , 
 accessSalt : String , 
 + userData : Array [ Byte ] , 
 isChecked : Boolean = false , 
 deletedAt : Option [ LocalDateTime ] = None 
 ) extends AuthTransactionChildren 
 @ @ - 55 , 4 + 58 , 5 @ @ sealed trait AuthTransactionChildren { 
 def deviceTitle : String 
 def isChecked : Boolean 
 def accessSalt : String 
 + def userData : Array [ Byte ] 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20151029213151 _ _ AddUserDataToAuthTransaction . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20151029213151 _ _ AddUserDataToAuthTransaction . sql 
 new file mode 100644 
 index 0000000 . . a3fbe0f 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20151029213151 _ _ AddUserDataToAuthTransaction . sql 
 @ @ - 0 , 0 + 1 @ @ 
 + ALTER TABLE auth _ transactions ADD COLUMN user _ data BYTEA ; 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthEmailTransactionRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthEmailTransactionRepo . scala 
 index 45da5d5 . . 613c1f6 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthEmailTransactionRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthEmailTransactionRepo . scala 
 @ @ - 9 , 7 + 9 , 19 @ @ final class AuthEmailTransactionTable ( tag : Tag ) extends AuthTransactionBase [ mode 
 def redirectUri = column [ Option [ String ] ] ( " redirect _ uri " ) 
 
 val inherited = AuthTransactionRepo . transactions . baseTableRow 
 - def * = ( email , redirectUri , transactionHash , appId , apiKey , deviceHash , deviceTitle , accessSalt , isChecked , deletedAt ) < > ( models . AuthEmailTransaction . tupled , models . AuthEmailTransaction . unapply ) 
 + def * = ( 
 + email , 
 + redirectUri , 
 + transactionHash , 
 + appId , 
 + apiKey , 
 + deviceHash , 
 + deviceTitle , 
 + accessSalt , 
 + userData , 
 + isChecked , 
 + deletedAt 
 + ) < > ( models . AuthEmailTransaction . tupled , models . AuthEmailTransaction . unapply ) 
 } 
 
 object AuthEmailTransactionRepo { 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthPhoneTransactionRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthPhoneTransactionRepo . scala 
 index 84dde45 . . 40ffd76 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthPhoneTransactionRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthPhoneTransactionRepo . scala 
 @ @ - 8 , 7 + 8 , 18 @ @ class AuthPhoneTransactionTable ( tag : Tag ) extends AuthTransactionBase [ models . Aut 
 def phoneNumber = column [ Long ] ( " phone _ number " ) 
 
 val inherited = AuthTransactionRepo . transactions . baseTableRow 
 - def * = ( phoneNumber , transactionHash , appId , apiKey , deviceHash , deviceTitle , accessSalt , isChecked , deletedAt ) < > ( models . AuthPhoneTransaction . tupled , models . AuthPhoneTransaction . unapply ) 
 + def * = ( 
 + phoneNumber , 
 + transactionHash , 
 + appId , 
 + apiKey , 
 + deviceHash , 
 + deviceTitle , 
 + accessSalt , 
 + userData , 
 + isChecked , 
 + deletedAt 
 + ) < > ( models . AuthPhoneTransaction . tupled , models . AuthPhoneTransaction . unapply ) 
 } 
 
 object AuthPhoneTransactionRepo { 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthTransactionRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthTransactionRepo . scala 
 index 230a95b . . 844ce73 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthTransactionRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / auth / AuthTransactionRepo . scala 
 @ @ - 15 , 12 + 15 , 23 @ @ private [ auth ] abstract class AuthTransactionBase [ T ] ( tag : Tag , tname : String ) ext 
 def deviceHash = column [ Array [ Byte ] ] ( " device _ hash " ) 
 def deviceTitle = column [ String ] ( " device _ title " ) 
 def accessSalt = column [ String ] ( " access _ salt " ) 
 + def userData = column [ Array [ Byte ] ] ( " user _ data " ) 
 def isChecked = column [ Boolean ] ( " is _ checked " ) 
 def deletedAt = column [ Option [ LocalDateTime ] ] ( " deleted _ at " ) 
 } 
 
 final class AuthTransactionTable ( tag : Tag ) extends AuthTransactionBase [ models . AuthTransaction ] ( tag , " auth _ transactions " ) { 
 - def * = ( transactionHash , appId , apiKey , deviceHash , deviceTitle , accessSalt , isChecked , deletedAt ) < > ( models . AuthTransaction . tupled , models . AuthTransaction . unapply ) 
 + def * = ( 
 + transactionHash , 
 + appId , 
 + apiKey , 
 + deviceHash , 
 + deviceTitle , 
 + accessSalt , 
 + userData , 
 + isChecked , 
 + deletedAt 
 + ) < > ( models . AuthTransaction . tupled , models . AuthTransaction . unapply ) 
 } 
 
 object AuthTransactionRepo { 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 index cc60987 . . dfb4a24 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 @ @ - 2 , 31 + 2 , 28 @ @ package im . actor . server . api . rpc . service . auth 
 
 import java . time . { LocalDateTime , ZoneOffset } 
 
 - import im . actor . server . acl . ACLUtils 
 - import im . actor . util . misc . EmailUtils . isTestEmail 
 - import im . actor . util . misc . { PhoneNumberUtils , EmailUtils } 
 - 
 - import scala . concurrent . Future 
 - import scala . concurrent . forkjoin . ThreadLocalRandom 
 - import scalaz . { - \ / , \ / , \ / - } 
 - 
 import akka . actor . ActorSystem 
 import akka . pattern . ask 
 - import slick . dbio . _ 
 - 
 import im . actor . api . rpc . DBIOResult . _ 
 import im . actor . api . rpc . _ 
 import im . actor . api . rpc . users . ApiSex . _ 
 + import im . actor . server . acl . ACLUtils 
 import im . actor . server . activation . Activation . { CallCode , EmailCode , SmsCode } 
 import im . actor . server . activation . _ 
 + import im . actor . server . auth . UserData 
 import im . actor . server . models . { AuthEmailTransaction , AuthPhoneTransaction , User } 
 import im . actor . server . persist . auth . AuthTransactionRepo 
 import im . actor . server . session . _ 
 - import im . actor . server . user . UserExtension 
 + import im . actor . server . { models , persist } 
 + import im . actor . util . misc . EmailUtils . isTestEmail 
 import im . actor . util . misc . IdUtils . _ 
 import im . actor . util . misc . PhoneNumberUtils . _ 
 import im . actor . util . misc . StringUtils . validName 
 - import im . actor . server . { models , persist } 
 + import slick . dbio . _ 
 + 
 + import scala . concurrent . Future 
 + import scala . concurrent . forkjoin . ThreadLocalRandom 
 + import scalaz . { - \ / , \ / , \ / - } 
 
 trait AuthHelpers extends Helpers { 
 self : AuthServiceImpl ⇒ 
 @ @ - 69 , 6 + 66 , 7 @ @ trait AuthHelpers extends Helpers { 
 def handleUserCreate ( user : models . User , transaction : models . AuthTransactionChildren , authId : Long ) : Result [ User ] = { 
 for { 
 _ ← fromFuture ( userExt . create ( user . id , user . accessSalt , user . nickname , user . name , user . countryCode , im . actor . api . rpc . users . ApiSex ( user . sex . toInt ) , isBot = false ) ) 
 + _ ← fromFuture ( userExt . setUserData ( user . id , authId , UserData . parseFrom ( transaction . userData ) ) recover { case _ ⇒ ( ) } ) 
 _ ← fromDBIO ( persist . AvatarDataRepo . create ( models . AvatarData . empty ( models . AvatarData . OfUser , user . id . toLong ) ) ) 
 _ ← fromDBIO ( AuthTransactionRepo . delete ( transaction . transactionHash ) ) 
 _ ← transaction match { 
 @ @ - 145 , 10 + 143 , 11 @ @ trait AuthHelpers extends Helpers { 
 } 
 
 / / TODO : what country to use in case of email auth 
 - protected def authorizeT ( userId : Int , countryCode : String , clientData : ClientData ) : Result [ User ] = { 
 + protected def authorizeT ( userId : Int , countryCode : String , userData : UserData , clientData : ClientData ) : Result [ User ] = { 
 for { 
 user ← fromDBIOOption ( CommonErrors . UserNotFound ) ( persist . UserRepo . find ( userId ) . headOption ) 
 _ ← fromFuture ( userExt . changeCountryCode ( userId , countryCode ) ) 
 + _ ← fromFuture ( userExt . setUserData ( userId , clientData . authId , userData ) recover { case _ ⇒ ( ) } ) 
 _ ← fromDBIO ( persist . AuthIdRepo . setUserData ( clientData . authId , userId ) ) 
 } yield user 
 } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 index 161c3e1 . . fb55d61 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . api . rpc . misc . _ 
 import im . actor . api . rpc . users . ApiSex . ApiSex 
 import im . actor . server . acl . ACLUtils 
 import im . actor . server . activation . internal . CodeActivation 
 + import im . actor . server . auth . UserData 
 import im . actor . server . db . DbExtension 
 import im . actor . server . oauth . { GoogleProvider , OAuth2ProvidersDomains } 
 import im . actor . server . persist . auth . AuthTransactionRepo 
 @ @ - 112 , 7 + 113 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( 
 
 email ← fromDBIOOption ( AuthErrors . EmailUnoccupied ) ( persist . UserEmailRepo . find ( transaction . email ) ) 
 
 - user ← authorizeT ( email . userId , profile . locale . getOrElse ( " " ) , clientData ) 
 + user ← authorizeT ( email . userId , profile . locale . getOrElse ( " " ) , UserData . parseFrom ( transaction . userData ) , clientData ) 
 userStruct ← fromFuture ( userExt . getApiStruct ( user . id , user . id , clientData . authId ) ) 
 
 / / refresh session data 
 @ @ - 146 , 7 + 147 , 16 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( 
 db . run ( action . run ) 
 } 
 
 - def jhandleStartPhoneAuth ( phoneNumber : Long , appId : Int , apiKey : String , deviceHash : Array [ Byte ] , deviceTitle : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseStartPhoneAuth ] ] = { 
 + def jhandleStartPhoneAuth ( 
 + phoneNumber : Long , 
 + appId : Int , 
 + apiKey : String , 
 + deviceHash : Array [ Byte ] , 
 + deviceTitle : String , 
 + timeZone : Option [ String ] , 
 + preferredLanguages : IndexedSeq [ String ] , 
 + clientData : ClientData 
 + ) : Future [ HandlerResult [ ResponseStartPhoneAuth ] ] = { 
 val action = for { 
 normalizedPhone ← fromOption ( AuthErrors . PhoneNumberInvalid ) ( normalizeLong ( phoneNumber ) . headOption ) 
 optAuthTransaction ← fromDBIO ( persist . auth . AuthPhoneTransactionRepo . findByPhoneAndDeviceHash ( normalizedPhone , deviceHash ) ) 
 @ @ - 155 , 7 + 165 , 16 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( 
 case None ⇒ 
 val accessSalt = ACLUtils . nextAccessSalt ( ) 
 val transactionHash = ACLUtils . authTransactionHash ( accessSalt ) 
 - val phoneAuthTransaction = models . AuthPhoneTransaction ( normalizedPhone , transactionHash , appId , apiKey , deviceHash , deviceTitle , accessSalt ) 
 + val phoneAuthTransaction = models . AuthPhoneTransaction ( 
 + normalizedPhone , 
 + transactionHash , 
 + appId , 
 + apiKey , 
 + deviceHash , 
 + deviceTitle , 
 + accessSalt , 
 + UserData ( timeZone . getOrElse ( " " ) , preferredLanguages ) . toByteArray 
 + ) 
 for { 
 _ ← fromDBIO ( persist . auth . AuthPhoneTransactionRepo . create ( phoneAuthTransaction ) ) 
 } yield transactionHash 
 @ @ - 190 , 7 + 209 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( 
 } 
 / / fallback to sign up if user exists 
 user ← signInORsignUp match { 
 - case - \ / ( ( userId , countryCode ) ) ⇒ authorizeT ( userId , countryCode , clientData ) 
 + case - \ / ( ( userId , countryCode ) ) ⇒ authorizeT ( userId , countryCode , UserData . parseFrom ( transaction . userData ) , clientData ) 
 case \ / - ( user ) ⇒ handleUserCreate ( user , transaction , clientData . authId ) 
 } 
 userStruct ← fromFuture ( userExt . getApiStruct ( user . id , user . id , clientData . authId ) ) 
 @ @ - 214 , 7 + 233 , 16 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( 
 db . run ( action . run ) 
 } 
 
 - def jhandleStartEmailAuth ( email : String , appId : Int , apiKey : String , deviceHash : Array [ Byte ] , deviceTitle : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseStartEmailAuth ] ] = { 
 + override def jhandleStartEmailAuth ( 
 + email : String , 
 + appId : Int , 
 + apiKey : String , 
 + deviceHash : Array [ Byte ] , 
 + deviceTitle : String , 
 + timeZone : Option [ String ] , 
 + preferredLanguages : IndexedSeq [ String ] , 
 + clientData : ClientData 
 + ) : Future [ HandlerResult [ ResponseStartEmailAuth ] ] = { 
 val action = for { 
 validEmail ← fromEither ( validEmail ( email ) . leftMap ( validationFailed ( " EMAIL _ INVALID " , _ ) ) ) / / it actually does not change input email 
 activationType = if ( OAuth2ProvidersDomains . supportsOAuth2 ( email ) ) OAUTH2 else CODE 
 @ @ - 234 , 7 + 262 , 17 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( 
 case None ⇒ 
 val accessSalt = ACLUtils . nextAccessSalt ( ) 
 val transactionHash = ACLUtils . authTransactionHash ( accessSalt ) 
 - val emailAuthTransaction = models . AuthEmailTransaction ( validEmail , None , transactionHash , appId , apiKey , deviceHash , deviceTitle , accessSalt ) 
 + val emailAuthTransaction = models . AuthEmailTransaction ( 
 + validEmail , 
 + None , 
 + transactionHash , 
 + appId , 
 + apiKey , 
 + deviceHash , 
 + deviceTitle , 
 + accessSalt , 
 + UserData ( timeZone . getOrElse ( " " ) , preferredLanguages ) . toByteArray 
 + ) 
 activationType match { 
 case CODE ⇒ 
 for { 
 @ @ - 263 , 7 + 301 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation ) ( 
 ( userId , countryCode ) = userAndCounty 
 
 / / sign in user and delete auth transaction 
 - user ← authorizeT ( userId , countryCode , clientData ) 
 + user ← authorizeT ( userId , countryCode , UserData . parseFrom ( transaction . userData ) , clientData ) 
 userStruct ← fromFuture ( userExt . getApiStruct ( user . id , user . id , clientData . authId ) ) 
 _ ← fromDBIO ( persist . auth . AuthTransactionRepo . delete ( transaction . transactionHash ) ) 
 
 diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 index 4240f18 . . ae6a6c9 100644 
 - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 @ @ - 30 , 7 + 30 , 7 @ @ import im . actor . server . bot . ActorBot 
 import im . actor . server . cli . ActorCliService 
 import im . actor . server . db . DbExtension 
 import im . actor . server . dialog . { DialogExtension , DialogProcessor } 
 - import im . actor . server . email . { EmailConfig , EmailSender } 
 + import im . actor . server . email . { EmailConfig , SmtpEmailSender } 
 import im . actor . server . enrich . { RichMessageConfig , RichMessageWorker } 
 import im . actor . server . group . _ 
 import im . actor . server . migrations . { HiddenGroupMigrator , GroupCreatorMemberMigrator , IntegrationTokenMigrator , LocalNamesMigrator } 
 @ @ - 111 , 7 + 111 , 7 @ @ object Main extends App { 
 activationConfig , 
 new TelesignSmsEngine ( telesignClient ) , 
 new TelesignCallEngine ( ( telesignClient ) ) , 
 - new EmailSender ( emailConfig ) 
 + new SmtpEmailSender ( emailConfig ) 
 ) 
 case " actor - activation " ⇒ new GateCodeActivation ( gateConfig ) 
 case _ ⇒ throw new Exception ( " " " Invalid activation . default - service value provided : valid options : " internal " , actor - activation " " " ) 
 diff - - git a / actor - server / actor - sms / src / main / scala / im / actor / server / sms / AuthCallEngine . scala b / actor - server / actor - sms / src / main / scala / im / actor / server / sms / AuthCallEngine . scala 
 index 98f0050 . . 1590641 100644 
 - - - a / actor - server / actor - sms / src / main / scala / im / actor / server / sms / AuthCallEngine . scala 
 + + + b / actor - server / actor - sms / src / main / scala / im / actor / server / sms / AuthCallEngine . scala 
 @ @ - 4 , 4 + 4 , 4 @ @ import scala . concurrent . Future 
 
 trait AuthCallEngine { 
 def sendCode ( phoneNumber : Long , code : String , language : String ) : Future [ Unit ] 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyCodeActivation . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyCodeActivation . scala 
 index 8ee41c0 . . 09cb0fa 100644 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyCodeActivation . scala 
 + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / DummyCodeActivation . scala 
 @ @ - 7 , 7 + 7 , 7 @ @ import slick . dbio . _ 
 
 import scalaz . { \ / , \ / - } 
 
 - class DummyCodeActivation extends CodeActivation { 
 + final class DummyCodeActivation extends CodeActivation { 
 override def send ( transactionHash : Option [ String ] , code : Code ) : DBIO [ String \ / Unit ] = DBIO . successful ( \ / - ( ( ) ) ) 
 override def validate ( codeHash : String , code : String ) : DBIO [ ValidationResponse ] = DBIO . successful ( Validated ) 
 def finish ( transactionHash : String ) : DBIO [ Unit ] = DBIO . successful ( ( ) ) 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / SequenceMatchers . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / SequenceMatchers . scala 
 index 03ed611 . . da937f1 100644 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / SequenceMatchers . scala 
 + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / SequenceMatchers . scala 
 @ @ - 148 , 7 + 148 , 7 @ @ trait SequenceMatchers extends Matchers with ScalaFutures with AnyRefLogSource { 
 ) 
 } 
 
 - private def matchUpdates ( seq : Int , state : Array [ Byte ] ) ( check : Vector [ ApiDifferenceUpdate ] ⇒ Any ) ( implicit client : ClientData ) = 
 + private def matchUpdates ( seq : Int , state : Array [ Byte ] ) ( check : IndexedSeq [ ApiDifferenceUpdate ] ⇒ Any ) ( implicit client : ClientData ) = 
 repeatAfterSleep ( DefaultRetryCount ) { ( ) ⇒ 
 whenReady ( sequenceService . handleGetDifference ( seq , state ) ) { diff ⇒ 
 inside ( diff ) { 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 index 11b4f4e . . 046453e 100644 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 @ @ - 1 , 14 + 1 , 13 @ @ 
 package im . actor . server 
 
 import akka . actor . { ActorRef , ActorSystem } 
 - import akka . cluster . pubsub . DistributedPubSub 
 import akka . stream . Materializer 
 import akka . util . Timeout 
 import eu . codearte . jfairy . Fairy 
 import im . actor . api . rpc . peers . { ApiOutPeer , ApiPeerType } 
 import im . actor . api . { rpc ⇒ rpcapi } 
 import im . actor . server . api . rpc . RpcApiService 
 - import im . actor . server . api . rpc . service . auth 
 + import im . actor . server . api . rpc . service . auth . AuthServiceImpl 
 import im . actor . server . oauth . GoogleProvider 
 import im . actor . server . session . { Session , SessionConfig , SessionRegion } 
 import im . actor . server . user . UserExtension 
 @ @ - 153 , 7 + 152 , 7 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi 
 sessionRegion : SessionRegion , 
 oauth2Service : GoogleProvider , 
 system : ActorSystem 
 - ) = new auth . AuthServiceImpl ( new DummyCodeActivation ) 
 + ) = new AuthServiceImpl ( new DummyCodeActivation ) 
 
 protected def withoutLogs [ A ] ( f : ⇒ A ) ( implicit system : ActorSystem ) : A = { 
 val logger = org . slf4j . LoggerFactory . getLogger ( org . slf4j . Logger . ROOT _ LOGGER _ NAME ) . asInstanceOf [ ch . qos . logback . classic . Logger ] 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala 
 index 9895ba6 . . 06cdf25 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala 
 @ @ - 21 , 6 + 21 , 7 @ @ import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } 
 import im . actor . server . persist . auth . AuthTransactionRepo 
 import im . actor . server . sequence . SeqUpdatesManager 
 import im . actor . server . session . { HandleMessageBox , Session , SessionConfig , SessionEnvelope } 
 + import im . actor . server . email . DummyEmailSender 
 import im . actor . server . sms . { AuthCallEngine , AuthSmsEngine } 
 import im . actor . server . user . ContactsUtils 
 import org . scalatest . Inside . _ 
 @ @ - 77 , 7 + 78 , 7 @ @ final class AuthServiceSpec 
 
 / / it should " respond with ok to email of registered user " in s . e13 
 
 - it should " respond with error to malformed email address " in s . e14 
 + it should " respond with error to malformed email address " in s . malformedEmail 
 
 it should " respond with same transactionHash when called multiple times " in s . e15 
 
 @ @ - 115 , 7 + 116 , 7 @ @ final class AuthServiceSpec 
 val oauthGoogleConfig = DummyOAuth2Server . config 
 implicit val oauth2Service = new GoogleProvider ( oauthGoogleConfig ) 
 val activationConfig = ActivationConfig . load . get 
 - val activationContext = InternalCodeActivation . newContext ( activationConfig , new DummySmsEngine , new DummyCallEngine , null ) 
 + val activationContext = InternalCodeActivation . newContext ( activationConfig , new DummySmsEngine , new DummyCallEngine , new DummyEmailSender ) 
 implicit val service = new auth . AuthServiceImpl ( activationContext ) 
 implicit val rpcApiService = system . actorOf ( RpcApiService . props ( Seq ( service ) ) ) 
 implicit val contactService = new ContactsServiceImpl 
 @ @ - 169 , 7 + 170 , 9 @ @ final class AuthServiceSpec 
 appId = 42 , 
 apiKey = " apiKey " , 
 deviceHash = deviceHash , 
 - deviceTitle = " Specs virtual device " 
 + deviceTitle = " Specs virtual device " , 
 + timeZone = None , 
 + preferredLanguages = Vector . empty 
 ) 
 
 val transactionHash = 
 @ @ - 199 , 7 + 202 , 9 @ @ final class AuthServiceSpec 
 appId = 42 , 
 apiKey = " apiKey " , 
 deviceHash = Random . nextLong ( ) . toBinaryString . getBytes , 
 - deviceTitle = " Specs virtual device " 
 + deviceTitle = " Specs virtual device " , 
 + timeZone = None , 
 + preferredLanguages = Vector . empty 
 ) ) { resp ⇒ 
 resp should matchPattern { case Ok ( ResponseStartPhoneAuth ( _ , false ) ) ⇒ } 
 resp . toOption . get . transactionHash 
 @ @ - 210 , 7 + 215 , 9 @ @ final class AuthServiceSpec 
 appId = 3 , 
 apiKey = " someKey " , 
 deviceHash = Random . nextLong ( ) . toBinaryString . getBytes , 
 - deviceTitle = " Web browser " 
 + deviceTitle = " Web browser " , 
 + timeZone = None , 
 + preferredLanguages = Vector . empty 
 ) ) { resp ⇒ 
 resp should matchPattern { case Ok ( ResponseStartPhoneAuth ( _ , false ) ) ⇒ } 
 resp . toOption . get . transactionHash 
 @ @ - 601 , 7 + 608 , 7 @ @ final class AuthServiceSpec 
 
 def e13 ( ) = { } 
 
 - def e14 ( ) = { 
 + def malformedEmail ( ) = { 
 val malformedEmail = " foo @ bar " 
 implicit val clientData = ClientData ( createAuthId ( ) , createSessionId ( ) , None ) 
 
 @ @ - 622 , 7 + 629 , 9 @ @ final class AuthServiceSpec 
 appId = 42 , 
 apiKey = " apiKey " , 
 deviceHash = deviceHash , 
 - deviceTitle = " Specs virtual device " 
 + deviceTitle = " Specs virtual device " , 
 + timeZone = None , 
 + preferredLanguages = Vector . empty 
 ) 
 
 val transactionHash = 
 @ @ - 652 , 7 + 661 , 9 @ @ final class AuthServiceSpec 
 appId = 42 , 
 apiKey = " apiKey " , 
 deviceHash = Random . nextLong ( ) . toBinaryString . getBytes , 
 - deviceTitle = " Specs virtual device " 
 + deviceTitle = " Specs virtual device " , 
 + timeZone = None , 
 + preferredLanguages = Vector . empty 
 ) ) { resp ⇒ 
 resp should matchPattern { case Ok ( ResponseStartEmailAuth ( _ , false , _ ) ) ⇒ } 
 resp . toOption . get . transactionHash 
 @ @ - 663 , 7 + 674 , 9 @ @ final class AuthServiceSpec 
 appId = 3 , 
 apiKey = " someKey " , 
 deviceHash = Random . nextLong ( ) . toBinaryString . getBytes , 
 - deviceTitle = " Web browser " 
 + deviceTitle = " Web browser " , 
 + timeZone = None , 
 + preferredLanguages = Vector . empty 
 ) ) { resp ⇒ 
 resp should matchPattern { case Ok ( ResponseStartEmailAuth ( _ , false , _ ) ) ⇒ } 
 resp . toOption . get . transactionHash 
 @ @ - 969 , 7 + 982 , 9 @ @ final class AuthServiceSpec 
 appId = 42 , 
 apiKey = " apiKey " , 
 deviceHash = Random . nextLong ( ) . toBinaryString . getBytes , 
 - deviceTitle = " Specs virtual device " 
 + deviceTitle = " Specs virtual device " , 
 + timeZone = None , 
 + preferredLanguages = Vector . empty 
 ) 
 } 
 
 @ @ - 979 , 7 + 994 , 9 @ @ final class AuthServiceSpec 
 appId = 42 , 
 apiKey = " apiKey " , 
 deviceHash = Random . nextLong ( ) . toBinaryString . getBytes , 
 - deviceTitle = " Specs virtual device " 
 + deviceTitle = " Specs virtual device " , 
 + timeZone = None , 
 + preferredLanguages = Vector . empty 
 ) 
 } 
 
 @ @ - 1063 , 10 + 1080 , 11 @ @ object DummyOAuth2Server { 
 } 
 } 
 
 - class DummySmsEngine extends AuthSmsEngine { 
 + final class DummySmsEngine extends AuthSmsEngine { 
 override def sendCode ( phoneNumber : Long , code : String ) : Future [ Unit ] = Future . successful ( ( ) ) 
 } 
 
 - class DummyCallEngine extends AuthCallEngine { 
 + final class DummyCallEngine extends AuthCallEngine { 
 override def sendCode ( phoneNumber : Long , code : String , language : String ) : Future [ Unit ] = Future . successful ( ( ) ) 
 - } 
 \ No newline at end of file 
 + } 
 + 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala 
 index a27e6c8 . . 57fe17e 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / GroupedDialogsSpec . scala 
 @ @ - 48 , 7 + 48 , 7 @ @ final class GroupedDialogsSpec 
 
 groups . map ( _ . id ) . toSet shouldBe Set ( group . groupPeer . groupId ) 
 
 - val ( gs , ps ) = dgroups . foldLeft ( Vector . empty [ ApiDialogShort ] , Vector . empty [ ApiDialogShort ] ) { 
 + val ( gs , ps ) = dgroups . foldLeft ( IndexedSeq . empty [ ApiDialogShort ] , IndexedSeq . empty [ ApiDialogShort ] ) { 
 case ( ( gs , ps ) , dg ) ⇒ 
 dg . key match { 
 case " groups " ⇒ ( dg . dialogs , ps )
