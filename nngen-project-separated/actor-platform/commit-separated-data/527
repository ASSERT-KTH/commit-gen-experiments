BLEU SCORE: 0.7102992180127422

TEST MSG: Revert " wip ( js ) : New File Url binding "
GENERATED MSG: wip ( js ) : New File Url binding

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > index e872376 . . 4234238 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > @ @ - 419 , 185 + 419 , 153 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > return tempGlobalCounter ; < nl > } < nl > < nl > - / / @ Override < nl > - / / public void onFileLoaded ( HashSet < Long > fileId ) { < nl > - / / < nl > - / / / / < nl > - / / / / Dialogs List < nl > - / / / / < nl > - / / < nl > - / / if ( dialogsList ! = null ) { < nl > - / / for ( JsDisplayListBind < JsDialog , Dialog > b : dialogsList . getActiveBinds ( ) ) { < nl > - / / b . startReconverting ( ) ; < nl > - / / for ( Dialog dialog : b . getRawItems ( ) ) { < nl > - / / if ( checkAvatar ( dialog . getDialogAvatar ( ) , fileId ) ) { < nl > - / / b . forceReconvert ( dialog . getEngineId ( ) ) ; < nl > - / / } < nl > - / / } < nl > - / / b . stopReconverting ( ) ; < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / / / < nl > - / / / / Grouped Dialogs < nl > - / / / / < nl > - / / < nl > - / / if ( dialogsGroupedList ! = null ) { < nl > - / / ArrayList < DialogGroup > groups = context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . get ( ) ; < nl > - / / if ( groups ! = null ) { < nl > - / / outer : < nl > - / / for ( DialogGroup g : groups ) { < nl > - / / for ( DialogSmall ds : g . getDialogs ( ) ) { < nl > - / / if ( checkAvatar ( ds . getAvatar ( ) , fileId ) ) { < nl > - / / context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . forceNotify ( ) ; < nl > - / / break outer ; < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / / / < nl > - / / / / Contacts List < nl > - / / / / < nl > - / / < nl > - / / if ( contactsList ! = null ) { < nl > - / / for ( JsDisplayListBind < JsContact , Contact > b : contactsList . getActiveBinds ( ) ) { < nl > - / / b . startReconverting ( ) ; < nl > - / / for ( Contact contact : b . getRawItems ( ) ) { < nl > - / / if ( checkAvatar ( contact . getAvatar ( ) , fileId ) ) { < nl > - / / b . forceReconvert ( contact . getEngineId ( ) ) ; < nl > - / / } < nl > - / / } < nl > - / / b . stopReconverting ( ) ; < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / / / < nl > - / / / / Message Contents < nl > - / / / / < nl > - / / < nl > - / / for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { < nl > - / / for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { < nl > - / / b . startReconverting ( ) ; < nl > - / / for ( Message message : b . getRawItems ( ) ) { < nl > - / / UserVM user = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( message . getSenderId ( ) ) ; < nl > - / / if ( checkAvatar ( user . getAvatar ( ) . get ( ) , fileId ) ) { < nl > - / / b . forceReconvert ( message . getEngineId ( ) ) ; < nl > - / / continue ; < nl > - / / } < nl > - / / if ( message . getContent ( ) instanceof DocumentContent ) { < nl > - / / DocumentContent doc = ( DocumentContent ) message . getContent ( ) ; < nl > - / / if ( doc . getSource ( ) instanceof FileRemoteSource ) { < nl > - / / if ( fileId . contains ( ( ( FileRemoteSource ) doc . getSource ( ) ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > - / / b . forceReconvert ( message . getEngineId ( ) ) ; < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / if ( message . getContent ( ) instanceof StickerContent ) { < nl > - / / StickerContent content = ( StickerContent ) message . getContent ( ) ; < nl > - / / if ( content . getImage512 ( ) ! = null ) { < nl > - / / long stickerFileId = content . getImage512 ( ) . getReference ( ) . getFileId ( ) ; < nl > - / / if ( fileId . contains ( stickerFileId ) ) { < nl > - / / b . forceReconvert ( message . getEngineId ( ) ) ; < nl > - / / } < nl > - / / } else if ( content . getImage256 ( ) ! = null ) { < nl > - / / long stickerFileId = content . getImage256 ( ) . getReference ( ) . getFileId ( ) ; < nl > - / / if ( fileId . contains ( stickerFileId ) ) { < nl > - / / b . forceReconvert ( message . getEngineId ( ) ) ; < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / b . stopReconverting ( ) ; < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / / / < nl > - / / / / Users < nl > - / / / / < nl > - / / < nl > - / / for ( JsBindedValue < JsUser > u : users . values ( ) ) { < nl > - / / int uid = u . get ( ) . getUid ( ) ; < nl > - / / UserVM userVM = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( uid ) ; < nl > - / / if ( checkAvatar ( userVM . getAvatar ( ) . get ( ) , fileId ) ) { < nl > - / / u . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / / / < nl > - / / / / Groups < nl > - / / / / < nl > - / / < nl > - / / for ( JsBindedValue < JsGroup > g : groups . values ( ) ) { < nl > - / / int gid = g . get ( ) . getGid ( ) ; < nl > - / / GroupVM groupVM = context ( ) . getGroupsModule ( ) . getGroupsCollection ( ) . get ( gid ) ; < nl > - / / if ( checkAvatar ( groupVM . getAvatar ( ) . get ( ) , fileId ) ) { < nl > - / / g . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / / / < nl > - / / / / Stickers < nl > - / / / / < nl > - / / if ( stickers ! = null ) { < nl > - / / outer : < nl > - / / for ( StickerPack stickerPack : messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . get ( ) ) { < nl > - / / for ( Sticker s : stickerPack . getStickers ( ) ) { < nl > - / / if ( s . getImage256 ( ) ! = null & & fileId . contains ( s . getImage256 ( ) . getFileId ( ) ) ) { < nl > - / / messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . forceNotify ( ) ; < nl > - / / break outer ; < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / } < nl > + @ Override < nl > + public void onFileLoaded ( HashSet < Long > fileId ) { < nl > < nl > - protected boolean checkAvatar ( Avatar avatar , HashSet < Long > fileIds ) { < nl > - if ( avatar = = null ) { < nl > - return false ; < nl > + / / < nl > + / / Dialogs List < nl > + / / < nl > + < nl > + if ( dialogsList ! = null ) { < nl > + for ( JsDisplayListBind < JsDialog , Dialog > b : dialogsList . getActiveBinds ( ) ) { < nl > + b . startReconverting ( ) ; < nl > + for ( Dialog dialog : b . getRawItems ( ) ) { < nl > + if ( checkAvatar ( dialog . getDialogAvatar ( ) , fileId ) ) { < nl > + b . forceReconvert ( dialog . getEngineId ( ) ) ; < nl > + } < nl > + } < nl > + b . stopReconverting ( ) ; < nl > + } < nl > } < nl > - if ( avatar . getSmallImage ( ) ! = null & & fileIds . contains ( avatar . getSmallImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > - return true ; < nl > + < nl > + / / < nl > + / / Grouped Dialogs < nl > + / / < nl > + < nl > + if ( dialogsGroupedList ! = null ) { < nl > + ArrayList < DialogGroup > groups = context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . get ( ) ; < nl > + if ( groups ! = null ) { < nl > + outer : < nl > + for ( DialogGroup g : groups ) { < nl > + for ( DialogSmall ds : g . getDialogs ( ) ) { < nl > + if ( checkAvatar ( ds . getAvatar ( ) , fileId ) ) { < nl > + context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . forceNotify ( ) ; < nl > + break outer ; < nl > + } < nl > + } < nl > + } < nl > + } < nl > } < nl > - if ( avatar . getFullImage ( ) ! = null & & fileIds . contains ( avatar . getFullImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > - return true ; < nl > + < nl > + / / < nl > + / / Contacts List < nl > + / / < nl > + < nl > + if ( contactsList ! = null ) { < nl > + for ( JsDisplayListBind < JsContact , Contact > b : contactsList . getActiveBinds ( ) ) { < nl > + b . startReconverting ( ) ; < nl > + for ( Contact contact : b . getRawItems ( ) ) { < nl > + if ( checkAvatar ( contact . getAvatar ( ) , fileId ) ) { < nl > + b . forceReconvert ( contact . getEngineId ( ) ) ; < nl > + } < nl > + } < nl > + b . stopReconverting ( ) ; < nl > + } < nl > } < nl > - if ( avatar . getLargeImage ( ) ! = null & & fileIds . contains ( avatar . getLargeImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > - return true ; < nl > + < nl > + / / < nl > + / / Message Contents < nl > + / / < nl > + < nl > + for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { < nl > + for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { < nl > + b . startReconverting ( ) ; < nl > + for ( Message message : b . getRawItems ( ) ) { < nl > + UserVM user = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( message . getSenderId ( ) ) ; < nl > + if ( checkAvatar ( user . getAvatar ( ) . get ( ) , fileId ) ) { < nl > + b . forceReconvert ( message . getEngineId ( ) ) ; < nl > + continue ; < nl > + } < nl > + if ( message . getContent ( ) instanceof DocumentContent ) { < nl > + DocumentContent doc = ( DocumentContent ) message . getContent ( ) ; < nl > + if ( doc . getSource ( ) instanceof FileRemoteSource ) { < nl > + if ( fileId . contains ( ( ( FileRemoteSource ) doc . getSource ( ) ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > + b . forceReconvert ( message . getEngineId ( ) ) ; < nl > + } < nl > + } < nl > + } < nl > + if ( message . getContent ( ) instanceof StickerContent ) { < nl > + StickerContent content = ( StickerContent ) message . getContent ( ) ; < nl > + if ( content . getImage512 ( ) ! = null ) { < nl > + long stickerFileId = content . getImage512 ( ) . getReference ( ) . getFileId ( ) ; < nl > + if ( fileId . contains ( stickerFileId ) ) { < nl > + b . forceReconvert ( message . getEngineId ( ) ) ; < nl > + } < nl > + } else if ( content . getImage256 ( ) ! = null ) { < nl > + long stickerFileId = content . getImage256 ( ) . getReference ( ) . getFileId ( ) ; < nl > + if ( fileId . contains ( stickerFileId ) ) { < nl > + b . forceReconvert ( message . getEngineId ( ) ) ; < nl > + } < nl > + } < nl > + } < nl > + } < nl > + b . stopReconverting ( ) ; < nl > + } < nl > } < nl > - return false ; < nl > - } < nl > < nl > - @ Override < nl > - public void onUrlBuilderReady ( ) { < nl > + / / < nl > + / / Users < nl > + / / < nl > < nl > for ( JsBindedValue < JsUser > u : users . values ( ) ) { < nl > int uid = u . get ( ) . getUid ( ) ; < nl > UserVM userVM = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( uid ) ; < nl > - u . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; < nl > + if ( checkAvatar ( userVM . getAvatar ( ) . get ( ) , fileId ) ) { < nl > + u . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; < nl > + } < nl > } < nl > < nl > + / / < nl > + / / Groups < nl > + / / < nl > + < nl > for ( JsBindedValue < JsGroup > g : groups . values ( ) ) { < nl > int gid = g . get ( ) . getGid ( ) ; < nl > GroupVM groupVM = context ( ) . getGroupsModule ( ) . getGroupsCollection ( ) . get ( gid ) ; < nl > - g . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; < nl > - } < nl > - < nl > - if ( dialogsGroupedList ! = null ) { < nl > - context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . forceNotify ( ) ; < nl > + if ( checkAvatar ( groupVM . getAvatar ( ) . get ( ) , fileId ) ) { < nl > + g . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; < nl > + } < nl > } < nl > < nl > - for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { < nl > - for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { < nl > - b . startReconverting ( ) ; < nl > - for ( Message message : b . getRawItems ( ) ) { < nl > - b . forceReconvert ( message . getEngineId ( ) ) ; < nl > + / / < nl > + / / Stickers < nl > + / / < nl > + if ( stickers ! = null ) { < nl > + outer : < nl > + for ( StickerPack stickerPack : messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . get ( ) ) { < nl > + for ( Sticker s : stickerPack . getStickers ( ) ) { < nl > + if ( s . getImage256 ( ) ! = null & & fileId . contains ( s . getImage256 ( ) . getFileId ( ) ) ) { < nl > + messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . forceNotify ( ) ; < nl > + break outer ; < nl > + } < nl > } < nl > - b . stopReconverting ( ) ; < nl > } < nl > } < nl > + } < nl > < nl > - messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . forceNotify ( ) ; < nl > + protected boolean checkAvatar ( Avatar avatar , HashSet < Long > fileIds ) { < nl > + if ( avatar = = null ) { < nl > + return false ; < nl > + } < nl > + if ( avatar . getSmallImage ( ) ! = null & & fileIds . contains ( avatar . getSmallImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > + return true ; < nl > + } < nl > + if ( avatar . getFullImage ( ) ! = null & & fileIds . contains ( avatar . getFullImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > + return true ; < nl > + } < nl > + if ( avatar . getLargeImage ( ) ! = null & & fileIds . contains ( avatar . getLargeImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > + return true ; < nl > + } < nl > + return false ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java < nl > index 4f3127c . . 0f63b09 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java < nl > @ @ - 4 , 6 + 4 , 8 @ @ < nl > < nl > package im . actor . core . js . modules ; < nl > < nl > + import java . util . HashSet ; < nl > + < nl > public interface JsFileLoadedListener { < nl > - void onUrlBuilderReady ( ) ; < nl > + void onFileLoaded ( HashSet < Long > fileIds ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java < nl > index 426af4d . . 65221f2 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java < nl > @ @ - 4 , 19 + 4 , 30 @ @ < nl > < nl > package im . actor . core . js . modules ; < nl > < nl > + import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > + import java . util . HashSet ; < nl > < nl > - import im . actor . core . api . rpc . RequestGetFileUrlBuilder ; < nl > - import im . actor . core . api . rpc . ResponseGetFileUrlBuilder ; < nl > + import im . actor . core . api . ApiFileLocation ; < nl > + import im . actor . core . api . ApiFileUrlDescription ; < nl > + import im . actor . core . api . rpc . RequestGetFileUrls ; < nl > + import im . actor . core . api . rpc . ResponseGetFileUrls ; < nl > + import im . actor . core . js . modules . entity . CachedFileUrl ; < nl > import im . actor . core . modules . AbsModule ; < nl > + import im . actor . core . modules . ModuleActor ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . Modules ; < nl > + import im . actor . core . util . BaseKeyValueEngine ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > - import im . actor . runtime . Crypto ; < nl > import im . actor . runtime . Log ; < nl > - import im . actor . runtime . bser . DataOutput ; < nl > - import im . actor . runtime . crypto . Cryptos ; < nl > - import im . actor . runtime . crypto . primitives . hmac . HMAC ; < nl > + import im . actor . runtime . Storage ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . actors . Cancellable ; < nl > + import im . actor . runtime . actors . Props ; < nl > + < nl > + import static im . actor . runtime . actors . ActorSystem . system ; < nl > < nl > / * * < nl > * File ' s URL binder < nl > @ @ - 25 , 24 + 36 , 33 @ @ public class JsFilesModule extends AbsModule { < nl > < nl > private static final String TAG = " JsFilesModule " ; < nl > < nl > - private static final ArrayList < String > SUPPORTED _ ALGOS = new ArrayList < > ( ) ; < nl > - < nl > - static { < nl > - SUPPORTED _ ALGOS . add ( " HMAC _ SHA256 " ) ; < nl > - } < nl > - < nl > + private ActorRef urlLoader ; < nl > + private BaseKeyValueEngine < CachedFileUrl > keyValueStorage ; < nl > + private HashSet < Long > requestedFiles = new HashSet < > ( ) ; < nl > private ArrayList < JsFileLoadedListener > listeners = new ArrayList < > ( ) ; < nl > < nl > - private boolean isLoaded = false ; < nl > - private String baseUrl ; < nl > - private String seed ; < nl > - private HMAC hmac ; < nl > - private int timeout ; < nl > - < nl > public JsFilesModule ( final Modules modules ) { < nl > super ( modules ) ; < nl > < nl > - requestUrlBuilder ( ) ; < nl > + urlLoader = system ( ) . actorOf ( " files / url _ loader " , ( ) - > new FileBinderActor ( JsFilesModule . this , modules ) ) ; < nl > + < nl > + keyValueStorage = new BaseKeyValueEngine < CachedFileUrl > ( Storage . createKeyValue ( " file _ url _ cache " ) ) { < nl > + < nl > + @ Override < nl > + protected byte [ ] serialize ( CachedFileUrl value ) { < nl > + return value . toByteArray ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + protected CachedFileUrl deserialize ( byte [ ] data ) { < nl > + try { < nl > + return CachedFileUrl . fromBytes ( data ) ; < nl > + } catch ( IOException e ) { < nl > + Log . e ( TAG , e ) ; < nl > + return null ; < nl > + } < nl > + } < nl > + } ; < nl > } < nl > < nl > / * * < nl > @ @ - 73 , 53 + 93 , 173 @ @ public class JsFilesModule extends AbsModule { < nl > * @ return url for a file or null if not yet available < nl > * / < nl > public String getFileUrl ( long id , long accessHash ) { < nl > - requestUrlBuilderIfNeeded ( ) ; < nl > - if ( isLoaded ) { < nl > - hmac . reset ( ) ; < nl > - DataOutput dataOutput = new DataOutput ( ) ; < nl > - dataOutput . writeBytes ( seed . getBytes ( ) ) ; < nl > - dataOutput . writeBytes ( ( id + " " ) . getBytes ( ) ) ; < nl > - dataOutput . writeBytes ( ( accessHash + " " ) . getBytes ( ) ) ; < nl > - byte [ ] toHash = dataOutput . toByteArray ( ) ; < nl > - hmac . update ( toHash , 0 , toHash . length ) ; < nl > - byte [ ] sig = new byte [ hmac . getDigestSize ( ) ] ; < nl > - hmac . doFinal ( sig , 0 ) ; < nl > - String signature = seed + " _ " + Crypto . hex ( sig ) ; < nl > - return baseUrl + " / " + id + " ? signature = " + signature ; < nl > + CachedFileUrl cachedFileUrl = keyValueStorage . getValue ( id ) ; < nl > + if ( cachedFileUrl ! = null ) { < nl > + long urlTime = cachedFileUrl . getTimeout ( ) ; < nl > + long currentTime = im . actor . runtime . Runtime . getCurrentSyncedTime ( ) ; < nl > + if ( urlTime < = currentTime ) { < nl > + Log . w ( " JsFilesModule " , " URL # " + id + " timeout ( urlTime : " + urlTime + " , current : " + currentTime + " ) " ) ; < nl > + keyValueStorage . removeItem ( id ) ; < nl > + } else { < nl > + return cachedFileUrl . getUrl ( ) ; < nl > + } < nl > + } < nl > + < nl > + if ( ! requestedFiles . contains ( id ) ) { < nl > + requestedFiles . add ( id ) ; < nl > + urlLoader . send ( new FileRequest ( id , accessHash ) ) ; < nl > } < nl > < nl > return null ; < nl > } < nl > < nl > - private void requestUrlBuilderIfNeeded ( ) { < nl > - long currentTime = im . actor . runtime . Runtime . getCurrentSyncedTime ( ) ; < nl > - if ( isLoaded & & ( timeout * 1000L < currentTime ) ) { < nl > - requestUrlBuilder ( ) ; < nl > + private void onFileUrlLoaded ( ArrayList < FileResponse > responses ) { < nl > + HashSet < Long > ids = new HashSet < > ( ) ; < nl > + ArrayList < CachedFileUrl > cachedFileUrls = new ArrayList < > ( ) ; < nl > + for ( FileResponse r : responses ) { < nl > + ids . add ( r . getId ( ) ) ; < nl > + requestedFiles . remove ( r . getId ( ) ) ; < nl > + cachedFileUrls . add ( new CachedFileUrl ( r . getId ( ) , r . getUrl ( ) , r . getTimeout ( ) ) ) ; < nl > + } < nl > + keyValueStorage . addOrUpdateItems ( cachedFileUrls ) ; < nl > + for ( JsFileLoadedListener listener : listeners ) { < nl > + listener . onFileLoaded ( ids ) ; < nl > } < nl > } < nl > < nl > - private void requestUrlBuilder ( ) { < nl > - isLoaded = false ; < nl > - request ( new RequestGetFileUrlBuilder ( SUPPORTED _ ALGOS ) , new RpcCallback < ResponseGetFileUrlBuilder > ( ) { < nl > - @ Override < nl > - public void onResult ( ResponseGetFileUrlBuilder response ) { < nl > + / * * < nl > + * Internal File Url loader < nl > + * / < nl > + private static class FileBinderActor extends ModuleActor { < nl > + private static final long DELAY = 200 ; < nl > + private static final int MAX _ FILE _ SIZE = 50 ; < nl > < nl > - isLoaded = true ; < nl > - baseUrl = response . getBaseUrl ( ) ; < nl > - seed = response . getSeed ( ) ; < nl > - hmac = Cryptos . HMAC _ SHA256 ( response . getSignatureSecret ( ) ) ; < nl > - timeout = response . getTimeout ( ) ; < nl > + private boolean isLoading = false ; < nl > + private JsFilesModule filesModule ; < nl > + private ArrayList < FileRequest > filesQueue = new ArrayList < > ( ) ; < nl > + private Cancellable performCancellable ; < nl > < nl > - for ( JsFileLoadedListener listener : listeners ) { < nl > - listener . onUrlBuilderReady ( ) ; < nl > - } < nl > + public FileBinderActor ( JsFilesModule filesModule , ModuleContext context ) { < nl > + super ( context ) ; < nl > + < nl > + this . filesModule = filesModule ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof FileRequest ) { < nl > + filesQueue . add ( ( FileRequest ) message ) ; < nl > + < nl > + schedulePerform ( ) ; < nl > + } else if ( message instanceof PerformLoad ) { < nl > + performLoad ( ) ; < nl > + } else { < nl > + drop ( message ) ; < nl > } < nl > + } < nl > < nl > - @ Override < nl > - public void onError ( RpcException e ) { < nl > - / / Ignore < nl > - Log . e ( TAG , e ) ; < nl > + private void performLoad ( ) { < nl > + if ( isLoading ) { < nl > + return ; < nl > + } < nl > + ArrayList < ApiFileLocation > fileLocations = new ArrayList < > ( ) ; < nl > + for ( int i = 0 ; i < MAX _ FILE _ SIZE & & filesQueue . size ( ) > 0 ; i + + ) { < nl > + FileRequest request = filesQueue . remove ( 0 ) ; < nl > + fileLocations . add ( new ApiFileLocation ( request . getId ( ) , < nl > + request . getAccessHash ( ) ) ) ; < nl > + } < nl > + if ( fileLocations . size ( ) = = 0 ) { < nl > + return ; < nl > + } < nl > + < nl > + isLoading = true ; < nl > + request ( new RequestGetFileUrls ( fileLocations ) , new RpcCallback < ResponseGetFileUrls > ( ) { < nl > + @ Override < nl > + public void onResult ( ResponseGetFileUrls response ) { < nl > + < nl > + / / Converting result < nl > + long currentTime = im . actor . runtime . Runtime . getCurrentSyncedTime ( ) ; < nl > + ArrayList < FileResponse > responses = new ArrayList < > ( ) ; < nl > + for ( ApiFileUrlDescription u : response . getFileUrls ( ) ) { < nl > + long urlTime = currentTime + u . getTimeout ( ) * 1000L ; < nl > + responses . add ( new FileResponse ( u . getFileId ( ) , u . getUrl ( ) , < nl > + urlTime ) ) ; < nl > + } < nl > + < nl > + / / Notify about loaded < nl > + filesModule . onFileUrlLoaded ( responses ) ; < nl > + < nl > + isLoading = false ; < nl > + schedulePerform ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( RpcException e ) { < nl > + / / Setting flag < nl > + isLoading = false ; < nl > + < nl > + / / Logging error < nl > + Log . e ( TAG , e ) ; < nl > + < nl > + isLoading = false ; < nl > + schedulePerform ( ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + private void schedulePerform ( ) { < nl > + if ( performCancellable ! = null ) { < nl > + performCancellable . cancel ( ) ; < nl > + performCancellable = null ; < nl > } < nl > - } ) ; < nl > + performCancellable = schedule ( new PerformLoad ( ) , DELAY ) ; < nl > + } < nl > + < nl > + private class PerformLoad { < nl > + < nl > + } < nl > + } < nl > + < nl > + private static class FileRequest { < nl > + < nl > + private long id ; < nl > + private long accessHash ; < nl > + < nl > + public FileRequest ( long id , long accessHash ) { < nl > + this . id = id ; < nl > + this . accessHash = accessHash ; < nl > + } < nl > + < nl > + public long getId ( ) { < nl > + return id ; < nl > + } < nl > + < nl > + public long getAccessHash ( ) { < nl > + return accessHash ; < nl > + } < nl > + } < nl > + < nl > + private static class FileResponse { < nl > + private long id ; < nl > + private String url ; < nl > + private long timeout ; < nl > + < nl > + public FileResponse ( long id , String url , long timeout ) { < nl > + this . id = id ; < nl > + this . url = url ; < nl > + this . timeout = timeout ; < nl > + } < nl > + < nl > + public long getId ( ) { < nl > + return id ; < nl > + } < nl > + < nl > + public String getUrl ( ) { < nl > + return url ; < nl > + } < nl > + < nl > + public long getTimeout ( ) { < nl > + return timeout ; < nl > + } < nl > } < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > index 4234238 . . e872376 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > @ @ - 419 , 153 + 419 , 185 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > return tempGlobalCounter ; < nl > } < nl > < nl > - @ Override < nl > - public void onFileLoaded ( HashSet < Long > fileId ) { < nl > - < nl > - / / < nl > - / / Dialogs List < nl > - / / < nl > + / / @ Override < nl > + / / public void onFileLoaded ( HashSet < Long > fileId ) { < nl > + / / < nl > + / / / / < nl > + / / / / Dialogs List < nl > + / / / / < nl > + / / < nl > + / / if ( dialogsList ! = null ) { < nl > + / / for ( JsDisplayListBind < JsDialog , Dialog > b : dialogsList . getActiveBinds ( ) ) { < nl > + / / b . startReconverting ( ) ; < nl > + / / for ( Dialog dialog : b . getRawItems ( ) ) { < nl > + / / if ( checkAvatar ( dialog . getDialogAvatar ( ) , fileId ) ) { < nl > + / / b . forceReconvert ( dialog . getEngineId ( ) ) ; < nl > + / / } < nl > + / / } < nl > + / / b . stopReconverting ( ) ; < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / / / < nl > + / / / / Grouped Dialogs < nl > + / / / / < nl > + / / < nl > + / / if ( dialogsGroupedList ! = null ) { < nl > + / / ArrayList < DialogGroup > groups = context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . get ( ) ; < nl > + / / if ( groups ! = null ) { < nl > + / / outer : < nl > + / / for ( DialogGroup g : groups ) { < nl > + / / for ( DialogSmall ds : g . getDialogs ( ) ) { < nl > + / / if ( checkAvatar ( ds . getAvatar ( ) , fileId ) ) { < nl > + / / context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . forceNotify ( ) ; < nl > + / / break outer ; < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / / / < nl > + / / / / Contacts List < nl > + / / / / < nl > + / / < nl > + / / if ( contactsList ! = null ) { < nl > + / / for ( JsDisplayListBind < JsContact , Contact > b : contactsList . getActiveBinds ( ) ) { < nl > + / / b . startReconverting ( ) ; < nl > + / / for ( Contact contact : b . getRawItems ( ) ) { < nl > + / / if ( checkAvatar ( contact . getAvatar ( ) , fileId ) ) { < nl > + / / b . forceReconvert ( contact . getEngineId ( ) ) ; < nl > + / / } < nl > + / / } < nl > + / / b . stopReconverting ( ) ; < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / / / < nl > + / / / / Message Contents < nl > + / / / / < nl > + / / < nl > + / / for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { < nl > + / / for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { < nl > + / / b . startReconverting ( ) ; < nl > + / / for ( Message message : b . getRawItems ( ) ) { < nl > + / / UserVM user = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( message . getSenderId ( ) ) ; < nl > + / / if ( checkAvatar ( user . getAvatar ( ) . get ( ) , fileId ) ) { < nl > + / / b . forceReconvert ( message . getEngineId ( ) ) ; < nl > + / / continue ; < nl > + / / } < nl > + / / if ( message . getContent ( ) instanceof DocumentContent ) { < nl > + / / DocumentContent doc = ( DocumentContent ) message . getContent ( ) ; < nl > + / / if ( doc . getSource ( ) instanceof FileRemoteSource ) { < nl > + / / if ( fileId . contains ( ( ( FileRemoteSource ) doc . getSource ( ) ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > + / / b . forceReconvert ( message . getEngineId ( ) ) ; < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / if ( message . getContent ( ) instanceof StickerContent ) { < nl > + / / StickerContent content = ( StickerContent ) message . getContent ( ) ; < nl > + / / if ( content . getImage512 ( ) ! = null ) { < nl > + / / long stickerFileId = content . getImage512 ( ) . getReference ( ) . getFileId ( ) ; < nl > + / / if ( fileId . contains ( stickerFileId ) ) { < nl > + / / b . forceReconvert ( message . getEngineId ( ) ) ; < nl > + / / } < nl > + / / } else if ( content . getImage256 ( ) ! = null ) { < nl > + / / long stickerFileId = content . getImage256 ( ) . getReference ( ) . getFileId ( ) ; < nl > + / / if ( fileId . contains ( stickerFileId ) ) { < nl > + / / b . forceReconvert ( message . getEngineId ( ) ) ; < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / b . stopReconverting ( ) ; < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / / / < nl > + / / / / Users < nl > + / / / / < nl > + / / < nl > + / / for ( JsBindedValue < JsUser > u : users . values ( ) ) { < nl > + / / int uid = u . get ( ) . getUid ( ) ; < nl > + / / UserVM userVM = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( uid ) ; < nl > + / / if ( checkAvatar ( userVM . getAvatar ( ) . get ( ) , fileId ) ) { < nl > + / / u . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / / / < nl > + / / / / Groups < nl > + / / / / < nl > + / / < nl > + / / for ( JsBindedValue < JsGroup > g : groups . values ( ) ) { < nl > + / / int gid = g . get ( ) . getGid ( ) ; < nl > + / / GroupVM groupVM = context ( ) . getGroupsModule ( ) . getGroupsCollection ( ) . get ( gid ) ; < nl > + / / if ( checkAvatar ( groupVM . getAvatar ( ) . get ( ) , fileId ) ) { < nl > + / / g . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; < nl > + / / } < nl > + / / } < nl > + / / < nl > + / / / / < nl > + / / / / Stickers < nl > + / / / / < nl > + / / if ( stickers ! = null ) { < nl > + / / outer : < nl > + / / for ( StickerPack stickerPack : messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . get ( ) ) { < nl > + / / for ( Sticker s : stickerPack . getStickers ( ) ) { < nl > + / / if ( s . getImage256 ( ) ! = null & & fileId . contains ( s . getImage256 ( ) . getFileId ( ) ) ) { < nl > + / / messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . forceNotify ( ) ; < nl > + / / break outer ; < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / } < nl > < nl > - if ( dialogsList ! = null ) { < nl > - for ( JsDisplayListBind < JsDialog , Dialog > b : dialogsList . getActiveBinds ( ) ) { < nl > - b . startReconverting ( ) ; < nl > - for ( Dialog dialog : b . getRawItems ( ) ) { < nl > - if ( checkAvatar ( dialog . getDialogAvatar ( ) , fileId ) ) { < nl > - b . forceReconvert ( dialog . getEngineId ( ) ) ; < nl > - } < nl > - } < nl > - b . stopReconverting ( ) ; < nl > - } < nl > + protected boolean checkAvatar ( Avatar avatar , HashSet < Long > fileIds ) { < nl > + if ( avatar = = null ) { < nl > + return false ; < nl > } < nl > - < nl > - / / < nl > - / / Grouped Dialogs < nl > - / / < nl > - < nl > - if ( dialogsGroupedList ! = null ) { < nl > - ArrayList < DialogGroup > groups = context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . get ( ) ; < nl > - if ( groups ! = null ) { < nl > - outer : < nl > - for ( DialogGroup g : groups ) { < nl > - for ( DialogSmall ds : g . getDialogs ( ) ) { < nl > - if ( checkAvatar ( ds . getAvatar ( ) , fileId ) ) { < nl > - context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . forceNotify ( ) ; < nl > - break outer ; < nl > - } < nl > - } < nl > - } < nl > - } < nl > + if ( avatar . getSmallImage ( ) ! = null & & fileIds . contains ( avatar . getSmallImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > + return true ; < nl > } < nl > - < nl > - / / < nl > - / / Contacts List < nl > - / / < nl > - < nl > - if ( contactsList ! = null ) { < nl > - for ( JsDisplayListBind < JsContact , Contact > b : contactsList . getActiveBinds ( ) ) { < nl > - b . startReconverting ( ) ; < nl > - for ( Contact contact : b . getRawItems ( ) ) { < nl > - if ( checkAvatar ( contact . getAvatar ( ) , fileId ) ) { < nl > - b . forceReconvert ( contact . getEngineId ( ) ) ; < nl > - } < nl > - } < nl > - b . stopReconverting ( ) ; < nl > - } < nl > + if ( avatar . getFullImage ( ) ! = null & & fileIds . contains ( avatar . getFullImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > + return true ; < nl > } < nl > - < nl > - / / < nl > - / / Message Contents < nl > - / / < nl > - < nl > - for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { < nl > - for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { < nl > - b . startReconverting ( ) ; < nl > - for ( Message message : b . getRawItems ( ) ) { < nl > - UserVM user = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( message . getSenderId ( ) ) ; < nl > - if ( checkAvatar ( user . getAvatar ( ) . get ( ) , fileId ) ) { < nl > - b . forceReconvert ( message . getEngineId ( ) ) ; < nl > - continue ; < nl > - } < nl > - if ( message . getContent ( ) instanceof DocumentContent ) { < nl > - DocumentContent doc = ( DocumentContent ) message . getContent ( ) ; < nl > - if ( doc . getSource ( ) instanceof FileRemoteSource ) { < nl > - if ( fileId . contains ( ( ( FileRemoteSource ) doc . getSource ( ) ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > - b . forceReconvert ( message . getEngineId ( ) ) ; < nl > - } < nl > - } < nl > - } < nl > - if ( message . getContent ( ) instanceof StickerContent ) { < nl > - StickerContent content = ( StickerContent ) message . getContent ( ) ; < nl > - if ( content . getImage512 ( ) ! = null ) { < nl > - long stickerFileId = content . getImage512 ( ) . getReference ( ) . getFileId ( ) ; < nl > - if ( fileId . contains ( stickerFileId ) ) { < nl > - b . forceReconvert ( message . getEngineId ( ) ) ; < nl > - } < nl > - } else if ( content . getImage256 ( ) ! = null ) { < nl > - long stickerFileId = content . getImage256 ( ) . getReference ( ) . getFileId ( ) ; < nl > - if ( fileId . contains ( stickerFileId ) ) { < nl > - b . forceReconvert ( message . getEngineId ( ) ) ; < nl > - } < nl > - } < nl > - } < nl > - } < nl > - b . stopReconverting ( ) ; < nl > - } < nl > + if ( avatar . getLargeImage ( ) ! = null & & fileIds . contains ( avatar . getLargeImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > + return true ; < nl > } < nl > + return false ; < nl > + } < nl > < nl > - / / < nl > - / / Users < nl > - / / < nl > + @ Override < nl > + public void onUrlBuilderReady ( ) { < nl > < nl > for ( JsBindedValue < JsUser > u : users . values ( ) ) { < nl > int uid = u . get ( ) . getUid ( ) ; < nl > UserVM userVM = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( uid ) ; < nl > - if ( checkAvatar ( userVM . getAvatar ( ) . get ( ) , fileId ) ) { < nl > - u . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; < nl > - } < nl > + u . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; < nl > } < nl > < nl > - / / < nl > - / / Groups < nl > - / / < nl > - < nl > for ( JsBindedValue < JsGroup > g : groups . values ( ) ) { < nl > int gid = g . get ( ) . getGid ( ) ; < nl > GroupVM groupVM = context ( ) . getGroupsModule ( ) . getGroupsCollection ( ) . get ( gid ) ; < nl > - if ( checkAvatar ( groupVM . getAvatar ( ) . get ( ) , fileId ) ) { < nl > - g . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; < nl > - } < nl > + g . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; < nl > } < nl > < nl > - / / < nl > - / / Stickers < nl > - / / < nl > - if ( stickers ! = null ) { < nl > - outer : < nl > - for ( StickerPack stickerPack : messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . get ( ) ) { < nl > - for ( Sticker s : stickerPack . getStickers ( ) ) { < nl > - if ( s . getImage256 ( ) ! = null & & fileId . contains ( s . getImage256 ( ) . getFileId ( ) ) ) { < nl > - messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . forceNotify ( ) ; < nl > - break outer ; < nl > - } < nl > + if ( dialogsGroupedList ! = null ) { < nl > + context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . forceNotify ( ) ; < nl > + } < nl > + < nl > + for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { < nl > + for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { < nl > + b . startReconverting ( ) ; < nl > + for ( Message message : b . getRawItems ( ) ) { < nl > + b . forceReconvert ( message . getEngineId ( ) ) ; < nl > } < nl > + b . stopReconverting ( ) ; < nl > } < nl > } < nl > - } < nl > < nl > - protected boolean checkAvatar ( Avatar avatar , HashSet < Long > fileIds ) { < nl > - if ( avatar = = null ) { < nl > - return false ; < nl > - } < nl > - if ( avatar . getSmallImage ( ) ! = null & & fileIds . contains ( avatar . getSmallImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > - return true ; < nl > - } < nl > - if ( avatar . getFullImage ( ) ! = null & & fileIds . contains ( avatar . getFullImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > - return true ; < nl > - } < nl > - if ( avatar . getLargeImage ( ) ! = null & & fileIds . contains ( avatar . getLargeImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > - return true ; < nl > - } < nl > - return false ; < nl > + messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . forceNotify ( ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java < nl > index 0f63b09 . . 4f3127c 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java < nl > @ @ - 4 , 8 + 4 , 6 @ @ < nl > < nl > package im . actor . core . js . modules ; < nl > < nl > - import java . util . HashSet ; < nl > - < nl > public interface JsFileLoadedListener { < nl > - void onFileLoaded ( HashSet < Long > fileIds ) ; < nl > + void onUrlBuilderReady ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java < nl > index 65221f2 . . 426af4d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java < nl > @ @ - 4 , 30 + 4 , 19 @ @ < nl > < nl > package im . actor . core . js . modules ; < nl > < nl > - import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > - import java . util . HashSet ; < nl > < nl > - import im . actor . core . api . ApiFileLocation ; < nl > - import im . actor . core . api . ApiFileUrlDescription ; < nl > - import im . actor . core . api . rpc . RequestGetFileUrls ; < nl > - import im . actor . core . api . rpc . ResponseGetFileUrls ; < nl > - import im . actor . core . js . modules . entity . CachedFileUrl ; < nl > + import im . actor . core . api . rpc . RequestGetFileUrlBuilder ; < nl > + import im . actor . core . api . rpc . ResponseGetFileUrlBuilder ; < nl > import im . actor . core . modules . AbsModule ; < nl > - import im . actor . core . modules . ModuleActor ; < nl > - import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . Modules ; < nl > - import im . actor . core . util . BaseKeyValueEngine ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > + import im . actor . runtime . Crypto ; < nl > import im . actor . runtime . Log ; < nl > - import im . actor . runtime . Storage ; < nl > - import im . actor . runtime . actors . ActorCreator ; < nl > - import im . actor . runtime . actors . ActorRef ; < nl > - import im . actor . runtime . actors . Cancellable ; < nl > - import im . actor . runtime . actors . Props ; < nl > - < nl > - import static im . actor . runtime . actors . ActorSystem . system ; < nl > + import im . actor . runtime . bser . DataOutput ; < nl > + import im . actor . runtime . crypto . Cryptos ; < nl > + import im . actor . runtime . crypto . primitives . hmac . HMAC ; < nl > < nl > / * * < nl > * File ' s URL binder < nl > @ @ - 36 , 33 + 25 , 24 @ @ public class JsFilesModule extends AbsModule { < nl > < nl > private static final String TAG = " JsFilesModule " ; < nl > < nl > - private ActorRef urlLoader ; < nl > - private BaseKeyValueEngine < CachedFileUrl > keyValueStorage ; < nl > - private HashSet < Long > requestedFiles = new HashSet < > ( ) ; < nl > - private ArrayList < JsFileLoadedListener > listeners = new ArrayList < > ( ) ; < nl > + private static final ArrayList < String > SUPPORTED _ ALGOS = new ArrayList < > ( ) ; < nl > < nl > - public JsFilesModule ( final Modules modules ) { < nl > - super ( modules ) ; < nl > + static { < nl > + SUPPORTED _ ALGOS . add ( " HMAC _ SHA256 " ) ; < nl > + } < nl > < nl > - urlLoader = system ( ) . actorOf ( " files / url _ loader " , ( ) - > new FileBinderActor ( JsFilesModule . this , modules ) ) ; < nl > + private ArrayList < JsFileLoadedListener > listeners = new ArrayList < > ( ) ; < nl > < nl > - keyValueStorage = new BaseKeyValueEngine < CachedFileUrl > ( Storage . createKeyValue ( " file _ url _ cache " ) ) { < nl > + private boolean isLoaded = false ; < nl > + private String baseUrl ; < nl > + private String seed ; < nl > + private HMAC hmac ; < nl > + private int timeout ; < nl > < nl > - @ Override < nl > - protected byte [ ] serialize ( CachedFileUrl value ) { < nl > - return value . toByteArray ( ) ; < nl > - } < nl > + public JsFilesModule ( final Modules modules ) { < nl > + super ( modules ) ; < nl > < nl > - @ Override < nl > - protected CachedFileUrl deserialize ( byte [ ] data ) { < nl > - try { < nl > - return CachedFileUrl . fromBytes ( data ) ; < nl > - } catch ( IOException e ) { < nl > - Log . e ( TAG , e ) ; < nl > - return null ; < nl > - } < nl > - } < nl > - } ; < nl > + requestUrlBuilder ( ) ; < nl > } < nl > < nl > / * * < nl > @ @ - 93 , 173 + 73 , 53 @ @ public class JsFilesModule extends AbsModule { < nl > * @ return url for a file or null if not yet available < nl > * / < nl > public String getFileUrl ( long id , long accessHash ) { < nl > - CachedFileUrl cachedFileUrl = keyValueStorage . getValue ( id ) ; < nl > - if ( cachedFileUrl ! = null ) { < nl > - long urlTime = cachedFileUrl . getTimeout ( ) ; < nl > - long currentTime = im . actor . runtime . Runtime . getCurrentSyncedTime ( ) ; < nl > - if ( urlTime < = currentTime ) { < nl > - Log . w ( " JsFilesModule " , " URL # " + id + " timeout ( urlTime : " + urlTime + " , current : " + currentTime + " ) " ) ; < nl > - keyValueStorage . removeItem ( id ) ; < nl > - } else { < nl > - return cachedFileUrl . getUrl ( ) ; < nl > - } < nl > - } < nl > - < nl > - if ( ! requestedFiles . contains ( id ) ) { < nl > - requestedFiles . add ( id ) ; < nl > - urlLoader . send ( new FileRequest ( id , accessHash ) ) ; < nl > + requestUrlBuilderIfNeeded ( ) ; < nl > + if ( isLoaded ) { < nl > + hmac . reset ( ) ; < nl > + DataOutput dataOutput = new DataOutput ( ) ; < nl > + dataOutput . writeBytes ( seed . getBytes ( ) ) ; < nl > + dataOutput . writeBytes ( ( id + " " ) . getBytes ( ) ) ; < nl > + dataOutput . writeBytes ( ( accessHash + " " ) . getBytes ( ) ) ; < nl > + byte [ ] toHash = dataOutput . toByteArray ( ) ; < nl > + hmac . update ( toHash , 0 , toHash . length ) ; < nl > + byte [ ] sig = new byte [ hmac . getDigestSize ( ) ] ; < nl > + hmac . doFinal ( sig , 0 ) ; < nl > + String signature = seed + " _ " + Crypto . hex ( sig ) ; < nl > + return baseUrl + " / " + id + " ? signature = " + signature ; < nl > } < nl > < nl > return null ; < nl > } < nl > < nl > - private void onFileUrlLoaded ( ArrayList < FileResponse > responses ) { < nl > - HashSet < Long > ids = new HashSet < > ( ) ; < nl > - ArrayList < CachedFileUrl > cachedFileUrls = new ArrayList < > ( ) ; < nl > - for ( FileResponse r : responses ) { < nl > - ids . add ( r . getId ( ) ) ; < nl > - requestedFiles . remove ( r . getId ( ) ) ; < nl > - cachedFileUrls . add ( new CachedFileUrl ( r . getId ( ) , r . getUrl ( ) , r . getTimeout ( ) ) ) ; < nl > - } < nl > - keyValueStorage . addOrUpdateItems ( cachedFileUrls ) ; < nl > - for ( JsFileLoadedListener listener : listeners ) { < nl > - listener . onFileLoaded ( ids ) ; < nl > + private void requestUrlBuilderIfNeeded ( ) { < nl > + long currentTime = im . actor . runtime . Runtime . getCurrentSyncedTime ( ) ; < nl > + if ( isLoaded & & ( timeout * 1000L < currentTime ) ) { < nl > + requestUrlBuilder ( ) ; < nl > } < nl > } < nl > < nl > - / * * < nl > - * Internal File Url loader < nl > - * / < nl > - private static class FileBinderActor extends ModuleActor { < nl > - private static final long DELAY = 200 ; < nl > - private static final int MAX _ FILE _ SIZE = 50 ; < nl > - < nl > - private boolean isLoading = false ; < nl > - private JsFilesModule filesModule ; < nl > - private ArrayList < FileRequest > filesQueue = new ArrayList < > ( ) ; < nl > - private Cancellable performCancellable ; < nl > - < nl > - public FileBinderActor ( JsFilesModule filesModule , ModuleContext context ) { < nl > - super ( context ) ; < nl > - < nl > - this . filesModule = filesModule ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onReceive ( Object message ) { < nl > - if ( message instanceof FileRequest ) { < nl > - filesQueue . add ( ( FileRequest ) message ) ; < nl > - < nl > - schedulePerform ( ) ; < nl > - } else if ( message instanceof PerformLoad ) { < nl > - performLoad ( ) ; < nl > - } else { < nl > - drop ( message ) ; < nl > - } < nl > - } < nl > - < nl > - private void performLoad ( ) { < nl > - if ( isLoading ) { < nl > - return ; < nl > - } < nl > - ArrayList < ApiFileLocation > fileLocations = new ArrayList < > ( ) ; < nl > - for ( int i = 0 ; i < MAX _ FILE _ SIZE & & filesQueue . size ( ) > 0 ; i + + ) { < nl > - FileRequest request = filesQueue . remove ( 0 ) ; < nl > - fileLocations . add ( new ApiFileLocation ( request . getId ( ) , < nl > - request . getAccessHash ( ) ) ) ; < nl > - } < nl > - if ( fileLocations . size ( ) = = 0 ) { < nl > - return ; < nl > - } < nl > - < nl > - isLoading = true ; < nl > - request ( new RequestGetFileUrls ( fileLocations ) , new RpcCallback < ResponseGetFileUrls > ( ) { < nl > - @ Override < nl > - public void onResult ( ResponseGetFileUrls response ) { < nl > - < nl > - / / Converting result < nl > - long currentTime = im . actor . runtime . Runtime . getCurrentSyncedTime ( ) ; < nl > - ArrayList < FileResponse > responses = new ArrayList < > ( ) ; < nl > - for ( ApiFileUrlDescription u : response . getFileUrls ( ) ) { < nl > - long urlTime = currentTime + u . getTimeout ( ) * 1000L ; < nl > - responses . add ( new FileResponse ( u . getFileId ( ) , u . getUrl ( ) , < nl > - urlTime ) ) ; < nl > - } < nl > - < nl > - / / Notify about loaded < nl > - filesModule . onFileUrlLoaded ( responses ) ; < nl > - < nl > - isLoading = false ; < nl > - schedulePerform ( ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( RpcException e ) { < nl > - / / Setting flag < nl > - isLoading = false ; < nl > + private void requestUrlBuilder ( ) { < nl > + isLoaded = false ; < nl > + request ( new RequestGetFileUrlBuilder ( SUPPORTED _ ALGOS ) , new RpcCallback < ResponseGetFileUrlBuilder > ( ) { < nl > + @ Override < nl > + public void onResult ( ResponseGetFileUrlBuilder response ) { < nl > < nl > - / / Logging error < nl > - Log . e ( TAG , e ) ; < nl > + isLoaded = true ; < nl > + baseUrl = response . getBaseUrl ( ) ; < nl > + seed = response . getSeed ( ) ; < nl > + hmac = Cryptos . HMAC _ SHA256 ( response . getSignatureSecret ( ) ) ; < nl > + timeout = response . getTimeout ( ) ; < nl > < nl > - isLoading = false ; < nl > - schedulePerform ( ) ; < nl > + for ( JsFileLoadedListener listener : listeners ) { < nl > + listener . onUrlBuilderReady ( ) ; < nl > } < nl > - } ) ; < nl > - } < nl > - < nl > - private void schedulePerform ( ) { < nl > - if ( performCancellable ! = null ) { < nl > - performCancellable . cancel ( ) ; < nl > - performCancellable = null ; < nl > } < nl > - performCancellable = schedule ( new PerformLoad ( ) , DELAY ) ; < nl > - } < nl > - < nl > - private class PerformLoad { < nl > - < nl > - } < nl > - } < nl > - < nl > - private static class FileRequest { < nl > - < nl > - private long id ; < nl > - private long accessHash ; < nl > - < nl > - public FileRequest ( long id , long accessHash ) { < nl > - this . id = id ; < nl > - this . accessHash = accessHash ; < nl > - } < nl > - < nl > - public long getId ( ) { < nl > - return id ; < nl > - } < nl > - < nl > - public long getAccessHash ( ) { < nl > - return accessHash ; < nl > - } < nl > - } < nl > - < nl > - private static class FileResponse { < nl > - private long id ; < nl > - private String url ; < nl > - private long timeout ; < nl > - < nl > - public FileResponse ( long id , String url , long timeout ) { < nl > - this . id = id ; < nl > - this . url = url ; < nl > - this . timeout = timeout ; < nl > - } < nl > - < nl > - public long getId ( ) { < nl > - return id ; < nl > - } < nl > - < nl > - public String getUrl ( ) { < nl > - return url ; < nl > - } < nl > < nl > - public long getTimeout ( ) { < nl > - return timeout ; < nl > - } < nl > + @ Override < nl > + public void onError ( RpcException e ) { < nl > + / / Ignore < nl > + Log . e ( TAG , e ) ; < nl > + } < nl > + } ) ; < nl > } < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 index e872376 . . 4234238 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 @ @ - 419 , 185 + 419 , 153 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 return tempGlobalCounter ; 
 } 
 
 - / / @ Override 
 - / / public void onFileLoaded ( HashSet < Long > fileId ) { 
 - / / 
 - / / / / 
 - / / / / Dialogs List 
 - / / / / 
 - / / 
 - / / if ( dialogsList ! = null ) { 
 - / / for ( JsDisplayListBind < JsDialog , Dialog > b : dialogsList . getActiveBinds ( ) ) { 
 - / / b . startReconverting ( ) ; 
 - / / for ( Dialog dialog : b . getRawItems ( ) ) { 
 - / / if ( checkAvatar ( dialog . getDialogAvatar ( ) , fileId ) ) { 
 - / / b . forceReconvert ( dialog . getEngineId ( ) ) ; 
 - / / } 
 - / / } 
 - / / b . stopReconverting ( ) ; 
 - / / } 
 - / / } 
 - / / 
 - / / / / 
 - / / / / Grouped Dialogs 
 - / / / / 
 - / / 
 - / / if ( dialogsGroupedList ! = null ) { 
 - / / ArrayList < DialogGroup > groups = context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . get ( ) ; 
 - / / if ( groups ! = null ) { 
 - / / outer : 
 - / / for ( DialogGroup g : groups ) { 
 - / / for ( DialogSmall ds : g . getDialogs ( ) ) { 
 - / / if ( checkAvatar ( ds . getAvatar ( ) , fileId ) ) { 
 - / / context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . forceNotify ( ) ; 
 - / / break outer ; 
 - / / } 
 - / / } 
 - / / } 
 - / / } 
 - / / } 
 - / / 
 - / / / / 
 - / / / / Contacts List 
 - / / / / 
 - / / 
 - / / if ( contactsList ! = null ) { 
 - / / for ( JsDisplayListBind < JsContact , Contact > b : contactsList . getActiveBinds ( ) ) { 
 - / / b . startReconverting ( ) ; 
 - / / for ( Contact contact : b . getRawItems ( ) ) { 
 - / / if ( checkAvatar ( contact . getAvatar ( ) , fileId ) ) { 
 - / / b . forceReconvert ( contact . getEngineId ( ) ) ; 
 - / / } 
 - / / } 
 - / / b . stopReconverting ( ) ; 
 - / / } 
 - / / } 
 - / / 
 - / / / / 
 - / / / / Message Contents 
 - / / / / 
 - / / 
 - / / for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { 
 - / / for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { 
 - / / b . startReconverting ( ) ; 
 - / / for ( Message message : b . getRawItems ( ) ) { 
 - / / UserVM user = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( message . getSenderId ( ) ) ; 
 - / / if ( checkAvatar ( user . getAvatar ( ) . get ( ) , fileId ) ) { 
 - / / b . forceReconvert ( message . getEngineId ( ) ) ; 
 - / / continue ; 
 - / / } 
 - / / if ( message . getContent ( ) instanceof DocumentContent ) { 
 - / / DocumentContent doc = ( DocumentContent ) message . getContent ( ) ; 
 - / / if ( doc . getSource ( ) instanceof FileRemoteSource ) { 
 - / / if ( fileId . contains ( ( ( FileRemoteSource ) doc . getSource ( ) ) . getFileReference ( ) . getFileId ( ) ) ) { 
 - / / b . forceReconvert ( message . getEngineId ( ) ) ; 
 - / / } 
 - / / } 
 - / / } 
 - / / if ( message . getContent ( ) instanceof StickerContent ) { 
 - / / StickerContent content = ( StickerContent ) message . getContent ( ) ; 
 - / / if ( content . getImage512 ( ) ! = null ) { 
 - / / long stickerFileId = content . getImage512 ( ) . getReference ( ) . getFileId ( ) ; 
 - / / if ( fileId . contains ( stickerFileId ) ) { 
 - / / b . forceReconvert ( message . getEngineId ( ) ) ; 
 - / / } 
 - / / } else if ( content . getImage256 ( ) ! = null ) { 
 - / / long stickerFileId = content . getImage256 ( ) . getReference ( ) . getFileId ( ) ; 
 - / / if ( fileId . contains ( stickerFileId ) ) { 
 - / / b . forceReconvert ( message . getEngineId ( ) ) ; 
 - / / } 
 - / / } 
 - / / } 
 - / / } 
 - / / b . stopReconverting ( ) ; 
 - / / } 
 - / / } 
 - / / 
 - / / / / 
 - / / / / Users 
 - / / / / 
 - / / 
 - / / for ( JsBindedValue < JsUser > u : users . values ( ) ) { 
 - / / int uid = u . get ( ) . getUid ( ) ; 
 - / / UserVM userVM = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( uid ) ; 
 - / / if ( checkAvatar ( userVM . getAvatar ( ) . get ( ) , fileId ) ) { 
 - / / u . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; 
 - / / } 
 - / / } 
 - / / 
 - / / / / 
 - / / / / Groups 
 - / / / / 
 - / / 
 - / / for ( JsBindedValue < JsGroup > g : groups . values ( ) ) { 
 - / / int gid = g . get ( ) . getGid ( ) ; 
 - / / GroupVM groupVM = context ( ) . getGroupsModule ( ) . getGroupsCollection ( ) . get ( gid ) ; 
 - / / if ( checkAvatar ( groupVM . getAvatar ( ) . get ( ) , fileId ) ) { 
 - / / g . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; 
 - / / } 
 - / / } 
 - / / 
 - / / / / 
 - / / / / Stickers 
 - / / / / 
 - / / if ( stickers ! = null ) { 
 - / / outer : 
 - / / for ( StickerPack stickerPack : messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . get ( ) ) { 
 - / / for ( Sticker s : stickerPack . getStickers ( ) ) { 
 - / / if ( s . getImage256 ( ) ! = null & & fileId . contains ( s . getImage256 ( ) . getFileId ( ) ) ) { 
 - / / messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . forceNotify ( ) ; 
 - / / break outer ; 
 - / / } 
 - / / } 
 - / / } 
 - / / } 
 - / / } 
 + @ Override 
 + public void onFileLoaded ( HashSet < Long > fileId ) { 
 
 - protected boolean checkAvatar ( Avatar avatar , HashSet < Long > fileIds ) { 
 - if ( avatar = = null ) { 
 - return false ; 
 + / / 
 + / / Dialogs List 
 + / / 
 + 
 + if ( dialogsList ! = null ) { 
 + for ( JsDisplayListBind < JsDialog , Dialog > b : dialogsList . getActiveBinds ( ) ) { 
 + b . startReconverting ( ) ; 
 + for ( Dialog dialog : b . getRawItems ( ) ) { 
 + if ( checkAvatar ( dialog . getDialogAvatar ( ) , fileId ) ) { 
 + b . forceReconvert ( dialog . getEngineId ( ) ) ; 
 + } 
 + } 
 + b . stopReconverting ( ) ; 
 + } 
 } 
 - if ( avatar . getSmallImage ( ) ! = null & & fileIds . contains ( avatar . getSmallImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { 
 - return true ; 
 + 
 + / / 
 + / / Grouped Dialogs 
 + / / 
 + 
 + if ( dialogsGroupedList ! = null ) { 
 + ArrayList < DialogGroup > groups = context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . get ( ) ; 
 + if ( groups ! = null ) { 
 + outer : 
 + for ( DialogGroup g : groups ) { 
 + for ( DialogSmall ds : g . getDialogs ( ) ) { 
 + if ( checkAvatar ( ds . getAvatar ( ) , fileId ) ) { 
 + context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . forceNotify ( ) ; 
 + break outer ; 
 + } 
 + } 
 + } 
 + } 
 } 
 - if ( avatar . getFullImage ( ) ! = null & & fileIds . contains ( avatar . getFullImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { 
 - return true ; 
 + 
 + / / 
 + / / Contacts List 
 + / / 
 + 
 + if ( contactsList ! = null ) { 
 + for ( JsDisplayListBind < JsContact , Contact > b : contactsList . getActiveBinds ( ) ) { 
 + b . startReconverting ( ) ; 
 + for ( Contact contact : b . getRawItems ( ) ) { 
 + if ( checkAvatar ( contact . getAvatar ( ) , fileId ) ) { 
 + b . forceReconvert ( contact . getEngineId ( ) ) ; 
 + } 
 + } 
 + b . stopReconverting ( ) ; 
 + } 
 } 
 - if ( avatar . getLargeImage ( ) ! = null & & fileIds . contains ( avatar . getLargeImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { 
 - return true ; 
 + 
 + / / 
 + / / Message Contents 
 + / / 
 + 
 + for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { 
 + for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { 
 + b . startReconverting ( ) ; 
 + for ( Message message : b . getRawItems ( ) ) { 
 + UserVM user = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( message . getSenderId ( ) ) ; 
 + if ( checkAvatar ( user . getAvatar ( ) . get ( ) , fileId ) ) { 
 + b . forceReconvert ( message . getEngineId ( ) ) ; 
 + continue ; 
 + } 
 + if ( message . getContent ( ) instanceof DocumentContent ) { 
 + DocumentContent doc = ( DocumentContent ) message . getContent ( ) ; 
 + if ( doc . getSource ( ) instanceof FileRemoteSource ) { 
 + if ( fileId . contains ( ( ( FileRemoteSource ) doc . getSource ( ) ) . getFileReference ( ) . getFileId ( ) ) ) { 
 + b . forceReconvert ( message . getEngineId ( ) ) ; 
 + } 
 + } 
 + } 
 + if ( message . getContent ( ) instanceof StickerContent ) { 
 + StickerContent content = ( StickerContent ) message . getContent ( ) ; 
 + if ( content . getImage512 ( ) ! = null ) { 
 + long stickerFileId = content . getImage512 ( ) . getReference ( ) . getFileId ( ) ; 
 + if ( fileId . contains ( stickerFileId ) ) { 
 + b . forceReconvert ( message . getEngineId ( ) ) ; 
 + } 
 + } else if ( content . getImage256 ( ) ! = null ) { 
 + long stickerFileId = content . getImage256 ( ) . getReference ( ) . getFileId ( ) ; 
 + if ( fileId . contains ( stickerFileId ) ) { 
 + b . forceReconvert ( message . getEngineId ( ) ) ; 
 + } 
 + } 
 + } 
 + } 
 + b . stopReconverting ( ) ; 
 + } 
 } 
 - return false ; 
 - } 
 
 - @ Override 
 - public void onUrlBuilderReady ( ) { 
 + / / 
 + / / Users 
 + / / 
 
 for ( JsBindedValue < JsUser > u : users . values ( ) ) { 
 int uid = u . get ( ) . getUid ( ) ; 
 UserVM userVM = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( uid ) ; 
 - u . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; 
 + if ( checkAvatar ( userVM . getAvatar ( ) . get ( ) , fileId ) ) { 
 + u . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; 
 + } 
 } 
 
 + / / 
 + / / Groups 
 + / / 
 + 
 for ( JsBindedValue < JsGroup > g : groups . values ( ) ) { 
 int gid = g . get ( ) . getGid ( ) ; 
 GroupVM groupVM = context ( ) . getGroupsModule ( ) . getGroupsCollection ( ) . get ( gid ) ; 
 - g . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; 
 - } 
 - 
 - if ( dialogsGroupedList ! = null ) { 
 - context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . forceNotify ( ) ; 
 + if ( checkAvatar ( groupVM . getAvatar ( ) . get ( ) , fileId ) ) { 
 + g . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; 
 + } 
 } 
 
 - for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { 
 - for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { 
 - b . startReconverting ( ) ; 
 - for ( Message message : b . getRawItems ( ) ) { 
 - b . forceReconvert ( message . getEngineId ( ) ) ; 
 + / / 
 + / / Stickers 
 + / / 
 + if ( stickers ! = null ) { 
 + outer : 
 + for ( StickerPack stickerPack : messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . get ( ) ) { 
 + for ( Sticker s : stickerPack . getStickers ( ) ) { 
 + if ( s . getImage256 ( ) ! = null & & fileId . contains ( s . getImage256 ( ) . getFileId ( ) ) ) { 
 + messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . forceNotify ( ) ; 
 + break outer ; 
 + } 
 } 
 - b . stopReconverting ( ) ; 
 } 
 } 
 + } 
 
 - messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . forceNotify ( ) ; 
 + protected boolean checkAvatar ( Avatar avatar , HashSet < Long > fileIds ) { 
 + if ( avatar = = null ) { 
 + return false ; 
 + } 
 + if ( avatar . getSmallImage ( ) ! = null & & fileIds . contains ( avatar . getSmallImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { 
 + return true ; 
 + } 
 + if ( avatar . getFullImage ( ) ! = null & & fileIds . contains ( avatar . getFullImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { 
 + return true ; 
 + } 
 + if ( avatar . getLargeImage ( ) ! = null & & fileIds . contains ( avatar . getLargeImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { 
 + return true ; 
 + } 
 + return false ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java 
 index 4f3127c . . 0f63b09 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java 
 @ @ - 4 , 6 + 4 , 8 @ @ 
 
 package im . actor . core . js . modules ; 
 
 + import java . util . HashSet ; 
 + 
 public interface JsFileLoadedListener { 
 - void onUrlBuilderReady ( ) ; 
 + void onFileLoaded ( HashSet < Long > fileIds ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java 
 index 426af4d . . 65221f2 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java 
 @ @ - 4 , 19 + 4 , 30 @ @ 
 
 package im . actor . core . js . modules ; 
 
 + import java . io . IOException ; 
 import java . util . ArrayList ; 
 + import java . util . HashSet ; 
 
 - import im . actor . core . api . rpc . RequestGetFileUrlBuilder ; 
 - import im . actor . core . api . rpc . ResponseGetFileUrlBuilder ; 
 + import im . actor . core . api . ApiFileLocation ; 
 + import im . actor . core . api . ApiFileUrlDescription ; 
 + import im . actor . core . api . rpc . RequestGetFileUrls ; 
 + import im . actor . core . api . rpc . ResponseGetFileUrls ; 
 + import im . actor . core . js . modules . entity . CachedFileUrl ; 
 import im . actor . core . modules . AbsModule ; 
 + import im . actor . core . modules . ModuleActor ; 
 + import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . Modules ; 
 + import im . actor . core . util . BaseKeyValueEngine ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 - import im . actor . runtime . Crypto ; 
 import im . actor . runtime . Log ; 
 - import im . actor . runtime . bser . DataOutput ; 
 - import im . actor . runtime . crypto . Cryptos ; 
 - import im . actor . runtime . crypto . primitives . hmac . HMAC ; 
 + import im . actor . runtime . Storage ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . actors . Cancellable ; 
 + import im . actor . runtime . actors . Props ; 
 + 
 + import static im . actor . runtime . actors . ActorSystem . system ; 
 
 / * * 
 * File ' s URL binder 
 @ @ - 25 , 24 + 36 , 33 @ @ public class JsFilesModule extends AbsModule { 
 
 private static final String TAG = " JsFilesModule " ; 
 
 - private static final ArrayList < String > SUPPORTED _ ALGOS = new ArrayList < > ( ) ; 
 - 
 - static { 
 - SUPPORTED _ ALGOS . add ( " HMAC _ SHA256 " ) ; 
 - } 
 - 
 + private ActorRef urlLoader ; 
 + private BaseKeyValueEngine < CachedFileUrl > keyValueStorage ; 
 + private HashSet < Long > requestedFiles = new HashSet < > ( ) ; 
 private ArrayList < JsFileLoadedListener > listeners = new ArrayList < > ( ) ; 
 
 - private boolean isLoaded = false ; 
 - private String baseUrl ; 
 - private String seed ; 
 - private HMAC hmac ; 
 - private int timeout ; 
 - 
 public JsFilesModule ( final Modules modules ) { 
 super ( modules ) ; 
 
 - requestUrlBuilder ( ) ; 
 + urlLoader = system ( ) . actorOf ( " files / url _ loader " , ( ) - > new FileBinderActor ( JsFilesModule . this , modules ) ) ; 
 + 
 + keyValueStorage = new BaseKeyValueEngine < CachedFileUrl > ( Storage . createKeyValue ( " file _ url _ cache " ) ) { 
 + 
 + @ Override 
 + protected byte [ ] serialize ( CachedFileUrl value ) { 
 + return value . toByteArray ( ) ; 
 + } 
 + 
 + @ Override 
 + protected CachedFileUrl deserialize ( byte [ ] data ) { 
 + try { 
 + return CachedFileUrl . fromBytes ( data ) ; 
 + } catch ( IOException e ) { 
 + Log . e ( TAG , e ) ; 
 + return null ; 
 + } 
 + } 
 + } ; 
 } 
 
 / * * 
 @ @ - 73 , 53 + 93 , 173 @ @ public class JsFilesModule extends AbsModule { 
 * @ return url for a file or null if not yet available 
 * / 
 public String getFileUrl ( long id , long accessHash ) { 
 - requestUrlBuilderIfNeeded ( ) ; 
 - if ( isLoaded ) { 
 - hmac . reset ( ) ; 
 - DataOutput dataOutput = new DataOutput ( ) ; 
 - dataOutput . writeBytes ( seed . getBytes ( ) ) ; 
 - dataOutput . writeBytes ( ( id + " " ) . getBytes ( ) ) ; 
 - dataOutput . writeBytes ( ( accessHash + " " ) . getBytes ( ) ) ; 
 - byte [ ] toHash = dataOutput . toByteArray ( ) ; 
 - hmac . update ( toHash , 0 , toHash . length ) ; 
 - byte [ ] sig = new byte [ hmac . getDigestSize ( ) ] ; 
 - hmac . doFinal ( sig , 0 ) ; 
 - String signature = seed + " _ " + Crypto . hex ( sig ) ; 
 - return baseUrl + " / " + id + " ? signature = " + signature ; 
 + CachedFileUrl cachedFileUrl = keyValueStorage . getValue ( id ) ; 
 + if ( cachedFileUrl ! = null ) { 
 + long urlTime = cachedFileUrl . getTimeout ( ) ; 
 + long currentTime = im . actor . runtime . Runtime . getCurrentSyncedTime ( ) ; 
 + if ( urlTime < = currentTime ) { 
 + Log . w ( " JsFilesModule " , " URL # " + id + " timeout ( urlTime : " + urlTime + " , current : " + currentTime + " ) " ) ; 
 + keyValueStorage . removeItem ( id ) ; 
 + } else { 
 + return cachedFileUrl . getUrl ( ) ; 
 + } 
 + } 
 + 
 + if ( ! requestedFiles . contains ( id ) ) { 
 + requestedFiles . add ( id ) ; 
 + urlLoader . send ( new FileRequest ( id , accessHash ) ) ; 
 } 
 
 return null ; 
 } 
 
 - private void requestUrlBuilderIfNeeded ( ) { 
 - long currentTime = im . actor . runtime . Runtime . getCurrentSyncedTime ( ) ; 
 - if ( isLoaded & & ( timeout * 1000L < currentTime ) ) { 
 - requestUrlBuilder ( ) ; 
 + private void onFileUrlLoaded ( ArrayList < FileResponse > responses ) { 
 + HashSet < Long > ids = new HashSet < > ( ) ; 
 + ArrayList < CachedFileUrl > cachedFileUrls = new ArrayList < > ( ) ; 
 + for ( FileResponse r : responses ) { 
 + ids . add ( r . getId ( ) ) ; 
 + requestedFiles . remove ( r . getId ( ) ) ; 
 + cachedFileUrls . add ( new CachedFileUrl ( r . getId ( ) , r . getUrl ( ) , r . getTimeout ( ) ) ) ; 
 + } 
 + keyValueStorage . addOrUpdateItems ( cachedFileUrls ) ; 
 + for ( JsFileLoadedListener listener : listeners ) { 
 + listener . onFileLoaded ( ids ) ; 
 } 
 } 
 
 - private void requestUrlBuilder ( ) { 
 - isLoaded = false ; 
 - request ( new RequestGetFileUrlBuilder ( SUPPORTED _ ALGOS ) , new RpcCallback < ResponseGetFileUrlBuilder > ( ) { 
 - @ Override 
 - public void onResult ( ResponseGetFileUrlBuilder response ) { 
 + / * * 
 + * Internal File Url loader 
 + * / 
 + private static class FileBinderActor extends ModuleActor { 
 + private static final long DELAY = 200 ; 
 + private static final int MAX _ FILE _ SIZE = 50 ; 
 
 - isLoaded = true ; 
 - baseUrl = response . getBaseUrl ( ) ; 
 - seed = response . getSeed ( ) ; 
 - hmac = Cryptos . HMAC _ SHA256 ( response . getSignatureSecret ( ) ) ; 
 - timeout = response . getTimeout ( ) ; 
 + private boolean isLoading = false ; 
 + private JsFilesModule filesModule ; 
 + private ArrayList < FileRequest > filesQueue = new ArrayList < > ( ) ; 
 + private Cancellable performCancellable ; 
 
 - for ( JsFileLoadedListener listener : listeners ) { 
 - listener . onUrlBuilderReady ( ) ; 
 - } 
 + public FileBinderActor ( JsFilesModule filesModule , ModuleContext context ) { 
 + super ( context ) ; 
 + 
 + this . filesModule = filesModule ; 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof FileRequest ) { 
 + filesQueue . add ( ( FileRequest ) message ) ; 
 + 
 + schedulePerform ( ) ; 
 + } else if ( message instanceof PerformLoad ) { 
 + performLoad ( ) ; 
 + } else { 
 + drop ( message ) ; 
 } 
 + } 
 
 - @ Override 
 - public void onError ( RpcException e ) { 
 - / / Ignore 
 - Log . e ( TAG , e ) ; 
 + private void performLoad ( ) { 
 + if ( isLoading ) { 
 + return ; 
 + } 
 + ArrayList < ApiFileLocation > fileLocations = new ArrayList < > ( ) ; 
 + for ( int i = 0 ; i < MAX _ FILE _ SIZE & & filesQueue . size ( ) > 0 ; i + + ) { 
 + FileRequest request = filesQueue . remove ( 0 ) ; 
 + fileLocations . add ( new ApiFileLocation ( request . getId ( ) , 
 + request . getAccessHash ( ) ) ) ; 
 + } 
 + if ( fileLocations . size ( ) = = 0 ) { 
 + return ; 
 + } 
 + 
 + isLoading = true ; 
 + request ( new RequestGetFileUrls ( fileLocations ) , new RpcCallback < ResponseGetFileUrls > ( ) { 
 + @ Override 
 + public void onResult ( ResponseGetFileUrls response ) { 
 + 
 + / / Converting result 
 + long currentTime = im . actor . runtime . Runtime . getCurrentSyncedTime ( ) ; 
 + ArrayList < FileResponse > responses = new ArrayList < > ( ) ; 
 + for ( ApiFileUrlDescription u : response . getFileUrls ( ) ) { 
 + long urlTime = currentTime + u . getTimeout ( ) * 1000L ; 
 + responses . add ( new FileResponse ( u . getFileId ( ) , u . getUrl ( ) , 
 + urlTime ) ) ; 
 + } 
 + 
 + / / Notify about loaded 
 + filesModule . onFileUrlLoaded ( responses ) ; 
 + 
 + isLoading = false ; 
 + schedulePerform ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( RpcException e ) { 
 + / / Setting flag 
 + isLoading = false ; 
 + 
 + / / Logging error 
 + Log . e ( TAG , e ) ; 
 + 
 + isLoading = false ; 
 + schedulePerform ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + private void schedulePerform ( ) { 
 + if ( performCancellable ! = null ) { 
 + performCancellable . cancel ( ) ; 
 + performCancellable = null ; 
 } 
 - } ) ; 
 + performCancellable = schedule ( new PerformLoad ( ) , DELAY ) ; 
 + } 
 + 
 + private class PerformLoad { 
 + 
 + } 
 + } 
 + 
 + private static class FileRequest { 
 + 
 + private long id ; 
 + private long accessHash ; 
 + 
 + public FileRequest ( long id , long accessHash ) { 
 + this . id = id ; 
 + this . accessHash = accessHash ; 
 + } 
 + 
 + public long getId ( ) { 
 + return id ; 
 + } 
 + 
 + public long getAccessHash ( ) { 
 + return accessHash ; 
 + } 
 + } 
 + 
 + private static class FileResponse { 
 + private long id ; 
 + private String url ; 
 + private long timeout ; 
 + 
 + public FileResponse ( long id , String url , long timeout ) { 
 + this . id = id ; 
 + this . url = url ; 
 + this . timeout = timeout ; 
 + } 
 + 
 + public long getId ( ) { 
 + return id ; 
 + } 
 + 
 + public String getUrl ( ) { 
 + return url ; 
 + } 
 + 
 + public long getTimeout ( ) { 
 + return timeout ; 
 + } 
 } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 index 4234238 . . e872376 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 @ @ - 419 , 153 + 419 , 185 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 return tempGlobalCounter ; 
 } 
 
 - @ Override 
 - public void onFileLoaded ( HashSet < Long > fileId ) { 
 - 
 - / / 
 - / / Dialogs List 
 - / / 
 + / / @ Override 
 + / / public void onFileLoaded ( HashSet < Long > fileId ) { 
 + / / 
 + / / / / 
 + / / / / Dialogs List 
 + / / / / 
 + / / 
 + / / if ( dialogsList ! = null ) { 
 + / / for ( JsDisplayListBind < JsDialog , Dialog > b : dialogsList . getActiveBinds ( ) ) { 
 + / / b . startReconverting ( ) ; 
 + / / for ( Dialog dialog : b . getRawItems ( ) ) { 
 + / / if ( checkAvatar ( dialog . getDialogAvatar ( ) , fileId ) ) { 
 + / / b . forceReconvert ( dialog . getEngineId ( ) ) ; 
 + / / } 
 + / / } 
 + / / b . stopReconverting ( ) ; 
 + / / } 
 + / / } 
 + / / 
 + / / / / 
 + / / / / Grouped Dialogs 
 + / / / / 
 + / / 
 + / / if ( dialogsGroupedList ! = null ) { 
 + / / ArrayList < DialogGroup > groups = context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . get ( ) ; 
 + / / if ( groups ! = null ) { 
 + / / outer : 
 + / / for ( DialogGroup g : groups ) { 
 + / / for ( DialogSmall ds : g . getDialogs ( ) ) { 
 + / / if ( checkAvatar ( ds . getAvatar ( ) , fileId ) ) { 
 + / / context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . forceNotify ( ) ; 
 + / / break outer ; 
 + / / } 
 + / / } 
 + / / } 
 + / / } 
 + / / } 
 + / / 
 + / / / / 
 + / / / / Contacts List 
 + / / / / 
 + / / 
 + / / if ( contactsList ! = null ) { 
 + / / for ( JsDisplayListBind < JsContact , Contact > b : contactsList . getActiveBinds ( ) ) { 
 + / / b . startReconverting ( ) ; 
 + / / for ( Contact contact : b . getRawItems ( ) ) { 
 + / / if ( checkAvatar ( contact . getAvatar ( ) , fileId ) ) { 
 + / / b . forceReconvert ( contact . getEngineId ( ) ) ; 
 + / / } 
 + / / } 
 + / / b . stopReconverting ( ) ; 
 + / / } 
 + / / } 
 + / / 
 + / / / / 
 + / / / / Message Contents 
 + / / / / 
 + / / 
 + / / for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { 
 + / / for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { 
 + / / b . startReconverting ( ) ; 
 + / / for ( Message message : b . getRawItems ( ) ) { 
 + / / UserVM user = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( message . getSenderId ( ) ) ; 
 + / / if ( checkAvatar ( user . getAvatar ( ) . get ( ) , fileId ) ) { 
 + / / b . forceReconvert ( message . getEngineId ( ) ) ; 
 + / / continue ; 
 + / / } 
 + / / if ( message . getContent ( ) instanceof DocumentContent ) { 
 + / / DocumentContent doc = ( DocumentContent ) message . getContent ( ) ; 
 + / / if ( doc . getSource ( ) instanceof FileRemoteSource ) { 
 + / / if ( fileId . contains ( ( ( FileRemoteSource ) doc . getSource ( ) ) . getFileReference ( ) . getFileId ( ) ) ) { 
 + / / b . forceReconvert ( message . getEngineId ( ) ) ; 
 + / / } 
 + / / } 
 + / / } 
 + / / if ( message . getContent ( ) instanceof StickerContent ) { 
 + / / StickerContent content = ( StickerContent ) message . getContent ( ) ; 
 + / / if ( content . getImage512 ( ) ! = null ) { 
 + / / long stickerFileId = content . getImage512 ( ) . getReference ( ) . getFileId ( ) ; 
 + / / if ( fileId . contains ( stickerFileId ) ) { 
 + / / b . forceReconvert ( message . getEngineId ( ) ) ; 
 + / / } 
 + / / } else if ( content . getImage256 ( ) ! = null ) { 
 + / / long stickerFileId = content . getImage256 ( ) . getReference ( ) . getFileId ( ) ; 
 + / / if ( fileId . contains ( stickerFileId ) ) { 
 + / / b . forceReconvert ( message . getEngineId ( ) ) ; 
 + / / } 
 + / / } 
 + / / } 
 + / / } 
 + / / b . stopReconverting ( ) ; 
 + / / } 
 + / / } 
 + / / 
 + / / / / 
 + / / / / Users 
 + / / / / 
 + / / 
 + / / for ( JsBindedValue < JsUser > u : users . values ( ) ) { 
 + / / int uid = u . get ( ) . getUid ( ) ; 
 + / / UserVM userVM = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( uid ) ; 
 + / / if ( checkAvatar ( userVM . getAvatar ( ) . get ( ) , fileId ) ) { 
 + / / u . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; 
 + / / } 
 + / / } 
 + / / 
 + / / / / 
 + / / / / Groups 
 + / / / / 
 + / / 
 + / / for ( JsBindedValue < JsGroup > g : groups . values ( ) ) { 
 + / / int gid = g . get ( ) . getGid ( ) ; 
 + / / GroupVM groupVM = context ( ) . getGroupsModule ( ) . getGroupsCollection ( ) . get ( gid ) ; 
 + / / if ( checkAvatar ( groupVM . getAvatar ( ) . get ( ) , fileId ) ) { 
 + / / g . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; 
 + / / } 
 + / / } 
 + / / 
 + / / / / 
 + / / / / Stickers 
 + / / / / 
 + / / if ( stickers ! = null ) { 
 + / / outer : 
 + / / for ( StickerPack stickerPack : messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . get ( ) ) { 
 + / / for ( Sticker s : stickerPack . getStickers ( ) ) { 
 + / / if ( s . getImage256 ( ) ! = null & & fileId . contains ( s . getImage256 ( ) . getFileId ( ) ) ) { 
 + / / messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . forceNotify ( ) ; 
 + / / break outer ; 
 + / / } 
 + / / } 
 + / / } 
 + / / } 
 + / / } 
 
 - if ( dialogsList ! = null ) { 
 - for ( JsDisplayListBind < JsDialog , Dialog > b : dialogsList . getActiveBinds ( ) ) { 
 - b . startReconverting ( ) ; 
 - for ( Dialog dialog : b . getRawItems ( ) ) { 
 - if ( checkAvatar ( dialog . getDialogAvatar ( ) , fileId ) ) { 
 - b . forceReconvert ( dialog . getEngineId ( ) ) ; 
 - } 
 - } 
 - b . stopReconverting ( ) ; 
 - } 
 + protected boolean checkAvatar ( Avatar avatar , HashSet < Long > fileIds ) { 
 + if ( avatar = = null ) { 
 + return false ; 
 } 
 - 
 - / / 
 - / / Grouped Dialogs 
 - / / 
 - 
 - if ( dialogsGroupedList ! = null ) { 
 - ArrayList < DialogGroup > groups = context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . get ( ) ; 
 - if ( groups ! = null ) { 
 - outer : 
 - for ( DialogGroup g : groups ) { 
 - for ( DialogSmall ds : g . getDialogs ( ) ) { 
 - if ( checkAvatar ( ds . getAvatar ( ) , fileId ) ) { 
 - context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . forceNotify ( ) ; 
 - break outer ; 
 - } 
 - } 
 - } 
 - } 
 + if ( avatar . getSmallImage ( ) ! = null & & fileIds . contains ( avatar . getSmallImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { 
 + return true ; 
 } 
 - 
 - / / 
 - / / Contacts List 
 - / / 
 - 
 - if ( contactsList ! = null ) { 
 - for ( JsDisplayListBind < JsContact , Contact > b : contactsList . getActiveBinds ( ) ) { 
 - b . startReconverting ( ) ; 
 - for ( Contact contact : b . getRawItems ( ) ) { 
 - if ( checkAvatar ( contact . getAvatar ( ) , fileId ) ) { 
 - b . forceReconvert ( contact . getEngineId ( ) ) ; 
 - } 
 - } 
 - b . stopReconverting ( ) ; 
 - } 
 + if ( avatar . getFullImage ( ) ! = null & & fileIds . contains ( avatar . getFullImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { 
 + return true ; 
 } 
 - 
 - / / 
 - / / Message Contents 
 - / / 
 - 
 - for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { 
 - for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { 
 - b . startReconverting ( ) ; 
 - for ( Message message : b . getRawItems ( ) ) { 
 - UserVM user = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( message . getSenderId ( ) ) ; 
 - if ( checkAvatar ( user . getAvatar ( ) . get ( ) , fileId ) ) { 
 - b . forceReconvert ( message . getEngineId ( ) ) ; 
 - continue ; 
 - } 
 - if ( message . getContent ( ) instanceof DocumentContent ) { 
 - DocumentContent doc = ( DocumentContent ) message . getContent ( ) ; 
 - if ( doc . getSource ( ) instanceof FileRemoteSource ) { 
 - if ( fileId . contains ( ( ( FileRemoteSource ) doc . getSource ( ) ) . getFileReference ( ) . getFileId ( ) ) ) { 
 - b . forceReconvert ( message . getEngineId ( ) ) ; 
 - } 
 - } 
 - } 
 - if ( message . getContent ( ) instanceof StickerContent ) { 
 - StickerContent content = ( StickerContent ) message . getContent ( ) ; 
 - if ( content . getImage512 ( ) ! = null ) { 
 - long stickerFileId = content . getImage512 ( ) . getReference ( ) . getFileId ( ) ; 
 - if ( fileId . contains ( stickerFileId ) ) { 
 - b . forceReconvert ( message . getEngineId ( ) ) ; 
 - } 
 - } else if ( content . getImage256 ( ) ! = null ) { 
 - long stickerFileId = content . getImage256 ( ) . getReference ( ) . getFileId ( ) ; 
 - if ( fileId . contains ( stickerFileId ) ) { 
 - b . forceReconvert ( message . getEngineId ( ) ) ; 
 - } 
 - } 
 - } 
 - } 
 - b . stopReconverting ( ) ; 
 - } 
 + if ( avatar . getLargeImage ( ) ! = null & & fileIds . contains ( avatar . getLargeImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { 
 + return true ; 
 } 
 + return false ; 
 + } 
 
 - / / 
 - / / Users 
 - / / 
 + @ Override 
 + public void onUrlBuilderReady ( ) { 
 
 for ( JsBindedValue < JsUser > u : users . values ( ) ) { 
 int uid = u . get ( ) . getUid ( ) ; 
 UserVM userVM = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( uid ) ; 
 - if ( checkAvatar ( userVM . getAvatar ( ) . get ( ) , fileId ) ) { 
 - u . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; 
 - } 
 + u . changeValue ( JsUser . fromUserVM ( userVM , messenger ) ) ; 
 } 
 
 - / / 
 - / / Groups 
 - / / 
 - 
 for ( JsBindedValue < JsGroup > g : groups . values ( ) ) { 
 int gid = g . get ( ) . getGid ( ) ; 
 GroupVM groupVM = context ( ) . getGroupsModule ( ) . getGroupsCollection ( ) . get ( gid ) ; 
 - if ( checkAvatar ( groupVM . getAvatar ( ) . get ( ) , fileId ) ) { 
 - g . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; 
 - } 
 + g . changeValue ( JsGroup . fromGroupVM ( groupVM , messenger ) ) ; 
 } 
 
 - / / 
 - / / Stickers 
 - / / 
 - if ( stickers ! = null ) { 
 - outer : 
 - for ( StickerPack stickerPack : messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . get ( ) ) { 
 - for ( Sticker s : stickerPack . getStickers ( ) ) { 
 - if ( s . getImage256 ( ) ! = null & & fileId . contains ( s . getImage256 ( ) . getFileId ( ) ) ) { 
 - messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . forceNotify ( ) ; 
 - break outer ; 
 - } 
 + if ( dialogsGroupedList ! = null ) { 
 + context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) . forceNotify ( ) ; 
 + } 
 + 
 + for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { 
 + for ( JsDisplayListBind < JsMessage , Message > b : messageList . getActiveBinds ( ) ) { 
 + b . startReconverting ( ) ; 
 + for ( Message message : b . getRawItems ( ) ) { 
 + b . forceReconvert ( message . getEngineId ( ) ) ; 
 } 
 + b . stopReconverting ( ) ; 
 } 
 } 
 - } 
 
 - protected boolean checkAvatar ( Avatar avatar , HashSet < Long > fileIds ) { 
 - if ( avatar = = null ) { 
 - return false ; 
 - } 
 - if ( avatar . getSmallImage ( ) ! = null & & fileIds . contains ( avatar . getSmallImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { 
 - return true ; 
 - } 
 - if ( avatar . getFullImage ( ) ! = null & & fileIds . contains ( avatar . getFullImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { 
 - return true ; 
 - } 
 - if ( avatar . getLargeImage ( ) ! = null & & fileIds . contains ( avatar . getLargeImage ( ) . getFileReference ( ) . getFileId ( ) ) ) { 
 - return true ; 
 - } 
 - return false ; 
 + messenger . getAvailableStickersVM ( ) . getOwnStickerPacks ( ) . forceNotify ( ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java 
 index 0f63b09 . . 4f3127c 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFileLoadedListener . java 
 @ @ - 4 , 8 + 4 , 6 @ @ 
 
 package im . actor . core . js . modules ; 
 
 - import java . util . HashSet ; 
 - 
 public interface JsFileLoadedListener { 
 - void onFileLoaded ( HashSet < Long > fileIds ) ; 
 + void onUrlBuilderReady ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java 
 index 65221f2 . . 426af4d 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsFilesModule . java 
 @ @ - 4 , 30 + 4 , 19 @ @ 
 
 package im . actor . core . js . modules ; 
 
 - import java . io . IOException ; 
 import java . util . ArrayList ; 
 - import java . util . HashSet ; 
 
 - import im . actor . core . api . ApiFileLocation ; 
 - import im . actor . core . api . ApiFileUrlDescription ; 
 - import im . actor . core . api . rpc . RequestGetFileUrls ; 
 - import im . actor . core . api . rpc . ResponseGetFileUrls ; 
 - import im . actor . core . js . modules . entity . CachedFileUrl ; 
 + import im . actor . core . api . rpc . RequestGetFileUrlBuilder ; 
 + import im . actor . core . api . rpc . ResponseGetFileUrlBuilder ; 
 import im . actor . core . modules . AbsModule ; 
 - import im . actor . core . modules . ModuleActor ; 
 - import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . Modules ; 
 - import im . actor . core . util . BaseKeyValueEngine ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 + import im . actor . runtime . Crypto ; 
 import im . actor . runtime . Log ; 
 - import im . actor . runtime . Storage ; 
 - import im . actor . runtime . actors . ActorCreator ; 
 - import im . actor . runtime . actors . ActorRef ; 
 - import im . actor . runtime . actors . Cancellable ; 
 - import im . actor . runtime . actors . Props ; 
 - 
 - import static im . actor . runtime . actors . ActorSystem . system ; 
 + import im . actor . runtime . bser . DataOutput ; 
 + import im . actor . runtime . crypto . Cryptos ; 
 + import im . actor . runtime . crypto . primitives . hmac . HMAC ; 
 
 / * * 
 * File ' s URL binder 
 @ @ - 36 , 33 + 25 , 24 @ @ public class JsFilesModule extends AbsModule { 
 
 private static final String TAG = " JsFilesModule " ; 
 
 - private ActorRef urlLoader ; 
 - private BaseKeyValueEngine < CachedFileUrl > keyValueStorage ; 
 - private HashSet < Long > requestedFiles = new HashSet < > ( ) ; 
 - private ArrayList < JsFileLoadedListener > listeners = new ArrayList < > ( ) ; 
 + private static final ArrayList < String > SUPPORTED _ ALGOS = new ArrayList < > ( ) ; 
 
 - public JsFilesModule ( final Modules modules ) { 
 - super ( modules ) ; 
 + static { 
 + SUPPORTED _ ALGOS . add ( " HMAC _ SHA256 " ) ; 
 + } 
 
 - urlLoader = system ( ) . actorOf ( " files / url _ loader " , ( ) - > new FileBinderActor ( JsFilesModule . this , modules ) ) ; 
 + private ArrayList < JsFileLoadedListener > listeners = new ArrayList < > ( ) ; 
 
 - keyValueStorage = new BaseKeyValueEngine < CachedFileUrl > ( Storage . createKeyValue ( " file _ url _ cache " ) ) { 
 + private boolean isLoaded = false ; 
 + private String baseUrl ; 
 + private String seed ; 
 + private HMAC hmac ; 
 + private int timeout ; 
 
 - @ Override 
 - protected byte [ ] serialize ( CachedFileUrl value ) { 
 - return value . toByteArray ( ) ; 
 - } 
 + public JsFilesModule ( final Modules modules ) { 
 + super ( modules ) ; 
 
 - @ Override 
 - protected CachedFileUrl deserialize ( byte [ ] data ) { 
 - try { 
 - return CachedFileUrl . fromBytes ( data ) ; 
 - } catch ( IOException e ) { 
 - Log . e ( TAG , e ) ; 
 - return null ; 
 - } 
 - } 
 - } ; 
 + requestUrlBuilder ( ) ; 
 } 
 
 / * * 
 @ @ - 93 , 173 + 73 , 53 @ @ public class JsFilesModule extends AbsModule { 
 * @ return url for a file or null if not yet available 
 * / 
 public String getFileUrl ( long id , long accessHash ) { 
 - CachedFileUrl cachedFileUrl = keyValueStorage . getValue ( id ) ; 
 - if ( cachedFileUrl ! = null ) { 
 - long urlTime = cachedFileUrl . getTimeout ( ) ; 
 - long currentTime = im . actor . runtime . Runtime . getCurrentSyncedTime ( ) ; 
 - if ( urlTime < = currentTime ) { 
 - Log . w ( " JsFilesModule " , " URL # " + id + " timeout ( urlTime : " + urlTime + " , current : " + currentTime + " ) " ) ; 
 - keyValueStorage . removeItem ( id ) ; 
 - } else { 
 - return cachedFileUrl . getUrl ( ) ; 
 - } 
 - } 
 - 
 - if ( ! requestedFiles . contains ( id ) ) { 
 - requestedFiles . add ( id ) ; 
 - urlLoader . send ( new FileRequest ( id , accessHash ) ) ; 
 + requestUrlBuilderIfNeeded ( ) ; 
 + if ( isLoaded ) { 
 + hmac . reset ( ) ; 
 + DataOutput dataOutput = new DataOutput ( ) ; 
 + dataOutput . writeBytes ( seed . getBytes ( ) ) ; 
 + dataOutput . writeBytes ( ( id + " " ) . getBytes ( ) ) ; 
 + dataOutput . writeBytes ( ( accessHash + " " ) . getBytes ( ) ) ; 
 + byte [ ] toHash = dataOutput . toByteArray ( ) ; 
 + hmac . update ( toHash , 0 , toHash . length ) ; 
 + byte [ ] sig = new byte [ hmac . getDigestSize ( ) ] ; 
 + hmac . doFinal ( sig , 0 ) ; 
 + String signature = seed + " _ " + Crypto . hex ( sig ) ; 
 + return baseUrl + " / " + id + " ? signature = " + signature ; 
 } 
 
 return null ; 
 } 
 
 - private void onFileUrlLoaded ( ArrayList < FileResponse > responses ) { 
 - HashSet < Long > ids = new HashSet < > ( ) ; 
 - ArrayList < CachedFileUrl > cachedFileUrls = new ArrayList < > ( ) ; 
 - for ( FileResponse r : responses ) { 
 - ids . add ( r . getId ( ) ) ; 
 - requestedFiles . remove ( r . getId ( ) ) ; 
 - cachedFileUrls . add ( new CachedFileUrl ( r . getId ( ) , r . getUrl ( ) , r . getTimeout ( ) ) ) ; 
 - } 
 - keyValueStorage . addOrUpdateItems ( cachedFileUrls ) ; 
 - for ( JsFileLoadedListener listener : listeners ) { 
 - listener . onFileLoaded ( ids ) ; 
 + private void requestUrlBuilderIfNeeded ( ) { 
 + long currentTime = im . actor . runtime . Runtime . getCurrentSyncedTime ( ) ; 
 + if ( isLoaded & & ( timeout * 1000L < currentTime ) ) { 
 + requestUrlBuilder ( ) ; 
 } 
 } 
 
 - / * * 
 - * Internal File Url loader 
 - * / 
 - private static class FileBinderActor extends ModuleActor { 
 - private static final long DELAY = 200 ; 
 - private static final int MAX _ FILE _ SIZE = 50 ; 
 - 
 - private boolean isLoading = false ; 
 - private JsFilesModule filesModule ; 
 - private ArrayList < FileRequest > filesQueue = new ArrayList < > ( ) ; 
 - private Cancellable performCancellable ; 
 - 
 - public FileBinderActor ( JsFilesModule filesModule , ModuleContext context ) { 
 - super ( context ) ; 
 - 
 - this . filesModule = filesModule ; 
 - } 
 - 
 - @ Override 
 - public void onReceive ( Object message ) { 
 - if ( message instanceof FileRequest ) { 
 - filesQueue . add ( ( FileRequest ) message ) ; 
 - 
 - schedulePerform ( ) ; 
 - } else if ( message instanceof PerformLoad ) { 
 - performLoad ( ) ; 
 - } else { 
 - drop ( message ) ; 
 - } 
 - } 
 - 
 - private void performLoad ( ) { 
 - if ( isLoading ) { 
 - return ; 
 - } 
 - ArrayList < ApiFileLocation > fileLocations = new ArrayList < > ( ) ; 
 - for ( int i = 0 ; i < MAX _ FILE _ SIZE & & filesQueue . size ( ) > 0 ; i + + ) { 
 - FileRequest request = filesQueue . remove ( 0 ) ; 
 - fileLocations . add ( new ApiFileLocation ( request . getId ( ) , 
 - request . getAccessHash ( ) ) ) ; 
 - } 
 - if ( fileLocations . size ( ) = = 0 ) { 
 - return ; 
 - } 
 - 
 - isLoading = true ; 
 - request ( new RequestGetFileUrls ( fileLocations ) , new RpcCallback < ResponseGetFileUrls > ( ) { 
 - @ Override 
 - public void onResult ( ResponseGetFileUrls response ) { 
 - 
 - / / Converting result 
 - long currentTime = im . actor . runtime . Runtime . getCurrentSyncedTime ( ) ; 
 - ArrayList < FileResponse > responses = new ArrayList < > ( ) ; 
 - for ( ApiFileUrlDescription u : response . getFileUrls ( ) ) { 
 - long urlTime = currentTime + u . getTimeout ( ) * 1000L ; 
 - responses . add ( new FileResponse ( u . getFileId ( ) , u . getUrl ( ) , 
 - urlTime ) ) ; 
 - } 
 - 
 - / / Notify about loaded 
 - filesModule . onFileUrlLoaded ( responses ) ; 
 - 
 - isLoading = false ; 
 - schedulePerform ( ) ; 
 - } 
 - 
 - @ Override 
 - public void onError ( RpcException e ) { 
 - / / Setting flag 
 - isLoading = false ; 
 + private void requestUrlBuilder ( ) { 
 + isLoaded = false ; 
 + request ( new RequestGetFileUrlBuilder ( SUPPORTED _ ALGOS ) , new RpcCallback < ResponseGetFileUrlBuilder > ( ) { 
 + @ Override 
 + public void onResult ( ResponseGetFileUrlBuilder response ) { 
 
 - / / Logging error 
 - Log . e ( TAG , e ) ; 
 + isLoaded = true ; 
 + baseUrl = response . getBaseUrl ( ) ; 
 + seed = response . getSeed ( ) ; 
 + hmac = Cryptos . HMAC _ SHA256 ( response . getSignatureSecret ( ) ) ; 
 + timeout = response . getTimeout ( ) ; 
 
 - isLoading = false ; 
 - schedulePerform ( ) ; 
 + for ( JsFileLoadedListener listener : listeners ) { 
 + listener . onUrlBuilderReady ( ) ; 
 } 
 - } ) ; 
 - } 
 - 
 - private void schedulePerform ( ) { 
 - if ( performCancellable ! = null ) { 
 - performCancellable . cancel ( ) ; 
 - performCancellable = null ; 
 } 
 - performCancellable = schedule ( new PerformLoad ( ) , DELAY ) ; 
 - } 
 - 
 - private class PerformLoad { 
 - 
 - } 
 - } 
 - 
 - private static class FileRequest { 
 - 
 - private long id ; 
 - private long accessHash ; 
 - 
 - public FileRequest ( long id , long accessHash ) { 
 - this . id = id ; 
 - this . accessHash = accessHash ; 
 - } 
 - 
 - public long getId ( ) { 
 - return id ; 
 - } 
 - 
 - public long getAccessHash ( ) { 
 - return accessHash ; 
 - } 
 - } 
 - 
 - private static class FileResponse { 
 - private long id ; 
 - private String url ; 
 - private long timeout ; 
 - 
 - public FileResponse ( long id , String url , long timeout ) { 
 - this . id = id ; 
 - this . url = url ; 
 - this . timeout = timeout ; 
 - } 
 - 
 - public long getId ( ) { 
 - return id ; 
 - } 
 - 
 - public String getUrl ( ) { 
 - return url ; 
 - } 
 
 - public long getTimeout ( ) { 
 - return timeout ; 
 - } 
 + @ Override 
 + public void onError ( RpcException e ) { 
 + / / Ignore 
 + Log . e ( TAG , e ) ; 
 + } 
 + } ) ; 
 } 
 } 
 \ No newline at end of file
