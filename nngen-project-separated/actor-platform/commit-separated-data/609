BLEU SCORE: 0.2732231510487644

TEST MSG: fix ( server : push ) : don ' t fail the whole google push stream on some request failure
GENERATED MSG: refactor ( server : push ) : more debug on google push

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushExtension . scala < nl > index e4af2ce . . 62c59a6 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushExtension . scala < nl > @ @ - 76 , 14 + 76 , 14 @ @ final class GooglePushExtension ( system : ActorSystem ) extends Extension { < nl > . mapAsync ( 1 ) { < nl > case ( Success ( resp ) , delivery ) ⇒ < nl > if ( resp . status = = StatusCodes . OK ) { < nl > - resp . entity . dataBytes . runFold ( ByteString . empty ) ( _ + + _ ) map ( _ → delivery ) < nl > - } else FastFuture . failed ( new RuntimeException ( s " Failed to deliver message , StatusCode was not OK : $ { resp . status } " ) ) < nl > + resp . entity . dataBytes . runFold ( ByteString . empty ) ( _ + + _ ) map ( bs = > Xor . Right ( bs → delivery ) ) < nl > + } else FastFuture . successful ( Xor . Left ( new RuntimeException ( s " Failed to deliver message , StatusCode was not OK : $ { resp . status } " ) ) ) < nl > case ( Failure ( e ) , delivery ) ⇒ < nl > - FastFuture . failed ( e ) < nl > + FastFuture . successful ( Xor . Left ( e ) ) < nl > } < nl > . runForeach { < nl > / / TODO : flatten < nl > - case ( bs , delivery ) ⇒ < nl > + case Xor . Right ( ( bs , delivery ) ) ⇒ < nl > parse ( new String ( bs . toArray , " UTF - 8 " ) ) match { < nl > case Xor . Right ( json ) ⇒ < nl > json . asObject match { < nl > @ @ - 105 , 6 + 105 , 8 @ @ final class GooglePushExtension ( system : ActorSystem ) extends Extension { < nl > } < nl > case Xor . Left ( failure ) ⇒ log . error ( failure . underlying , " Failed to parse response " ) < nl > } < nl > + case Xor . Left ( e ) = > < nl > + log . error ( e , " Failure " ) < nl > } onComplete { < nl > case Failure ( e ) ⇒ log . error ( e , " Failure in stream " ) < nl > case Success ( _ ) ⇒ log . debug ( " Stream completed " )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala < nl > index 06345e9 . . 27f6650 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala < nl > @ @ - 69 , 15 + 69 , 17 @ @ final class GooglePushManager ( config : GooglePushManagerConfig ) ( implicit system : < nl > case Xor . Right ( json ) ⇒ < nl > json . asObject match { < nl > case Some ( obj ) ⇒ < nl > - obj ( " error " ) flatMap ( _ . asString ) foreach { < nl > - case " InvalidRegistration " ⇒ < nl > + obj ( " error " ) map ( _ . asString ) foreach { < nl > + case Some ( " InvalidRegistration " ) ⇒ < nl > log . warning ( " Invalid registration , deleting " ) < nl > remove ( delivery . regId ) < nl > - case " NotRegistered " ⇒ < nl > + case Some ( " NotRegistered " ) ⇒ < nl > log . warning ( " Token is not registered , deleting " ) < nl > remove ( delivery . regId ) < nl > - case other ⇒ < nl > + case Some ( other ) ⇒ < nl > log . warning ( " Error in GCM response : { } " , other ) < nl > + case None = > < nl > + log . debug ( " Delivered successfully " ) < nl > } < nl > case None ⇒ < nl > log . error ( " Expected JSON Object but got : { } " , json ) < nl > @ @ - 85 , 10 + 87 , 13 @ @ final class GooglePushManager ( config : GooglePushManagerConfig ) ( implicit system : < nl > case Xor . Left ( failure ) ⇒ log . error ( failure . underlying , " Failed to parse response " ) < nl > } < nl > } < nl > - } else log . error ( " Status code was not OK : { } " , resp . status ) < nl > + } else log . error ( " Failed to deliver message , StatusCode was not OK : { } " , resp . status ) < nl > case ( Failure ( e ) , delivery ) ⇒ < nl > log . error ( e , " Failed to deliver message : { } " , delivery . m ) < nl > - } < nl > + } onComplete { < nl > + case Failure ( e ) = > log . error ( e , " Failure in stream " ) < nl > + case Success ( _ ) = > log . debug ( " Stream completed " ) < nl > + } < nl > < nl > private def remove ( regId : String ) : Future [ Int ] = db . run ( GooglePushCredentialsRepo . deleteByToken ( regId ) ) < nl > < nl > @ @ - 135 , 6 + 140 , 8 @ @ private final class GooglePushDelivery extends ActorPublisher [ ( HttpRequest , Goog < nl > case d : Delivery if buf . size = = MaxQueue ⇒ < nl > log . error ( " Current queue is already at size MaxQueue : { } , ignoring delivery " , MaxQueue ) < nl > case d : Delivery ⇒ < nl > + log . debug ( " New delivery " ) < nl > + < nl > if ( buf . isEmpty & & totalDemand > 0 ) < nl > onNext ( mkJob ( d ) ) < nl > else {

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushExtension . scala 
 index e4af2ce . . 62c59a6 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushExtension . scala 
 @ @ - 76 , 14 + 76 , 14 @ @ final class GooglePushExtension ( system : ActorSystem ) extends Extension { 
 . mapAsync ( 1 ) { 
 case ( Success ( resp ) , delivery ) ⇒ 
 if ( resp . status = = StatusCodes . OK ) { 
 - resp . entity . dataBytes . runFold ( ByteString . empty ) ( _ + + _ ) map ( _ → delivery ) 
 - } else FastFuture . failed ( new RuntimeException ( s " Failed to deliver message , StatusCode was not OK : $ { resp . status } " ) ) 
 + resp . entity . dataBytes . runFold ( ByteString . empty ) ( _ + + _ ) map ( bs = > Xor . Right ( bs → delivery ) ) 
 + } else FastFuture . successful ( Xor . Left ( new RuntimeException ( s " Failed to deliver message , StatusCode was not OK : $ { resp . status } " ) ) ) 
 case ( Failure ( e ) , delivery ) ⇒ 
 - FastFuture . failed ( e ) 
 + FastFuture . successful ( Xor . Left ( e ) ) 
 } 
 . runForeach { 
 / / TODO : flatten 
 - case ( bs , delivery ) ⇒ 
 + case Xor . Right ( ( bs , delivery ) ) ⇒ 
 parse ( new String ( bs . toArray , " UTF - 8 " ) ) match { 
 case Xor . Right ( json ) ⇒ 
 json . asObject match { 
 @ @ - 105 , 6 + 105 , 8 @ @ final class GooglePushExtension ( system : ActorSystem ) extends Extension { 
 } 
 case Xor . Left ( failure ) ⇒ log . error ( failure . underlying , " Failed to parse response " ) 
 } 
 + case Xor . Left ( e ) = > 
 + log . error ( e , " Failure " ) 
 } onComplete { 
 case Failure ( e ) ⇒ log . error ( e , " Failure in stream " ) 
 case Success ( _ ) ⇒ log . debug ( " Stream completed " )

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala 
 index 06345e9 . . 27f6650 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala 
 @ @ - 69 , 15 + 69 , 17 @ @ final class GooglePushManager ( config : GooglePushManagerConfig ) ( implicit system : 
 case Xor . Right ( json ) ⇒ 
 json . asObject match { 
 case Some ( obj ) ⇒ 
 - obj ( " error " ) flatMap ( _ . asString ) foreach { 
 - case " InvalidRegistration " ⇒ 
 + obj ( " error " ) map ( _ . asString ) foreach { 
 + case Some ( " InvalidRegistration " ) ⇒ 
 log . warning ( " Invalid registration , deleting " ) 
 remove ( delivery . regId ) 
 - case " NotRegistered " ⇒ 
 + case Some ( " NotRegistered " ) ⇒ 
 log . warning ( " Token is not registered , deleting " ) 
 remove ( delivery . regId ) 
 - case other ⇒ 
 + case Some ( other ) ⇒ 
 log . warning ( " Error in GCM response : { } " , other ) 
 + case None = > 
 + log . debug ( " Delivered successfully " ) 
 } 
 case None ⇒ 
 log . error ( " Expected JSON Object but got : { } " , json ) 
 @ @ - 85 , 10 + 87 , 13 @ @ final class GooglePushManager ( config : GooglePushManagerConfig ) ( implicit system : 
 case Xor . Left ( failure ) ⇒ log . error ( failure . underlying , " Failed to parse response " ) 
 } 
 } 
 - } else log . error ( " Status code was not OK : { } " , resp . status ) 
 + } else log . error ( " Failed to deliver message , StatusCode was not OK : { } " , resp . status ) 
 case ( Failure ( e ) , delivery ) ⇒ 
 log . error ( e , " Failed to deliver message : { } " , delivery . m ) 
 - } 
 + } onComplete { 
 + case Failure ( e ) = > log . error ( e , " Failure in stream " ) 
 + case Success ( _ ) = > log . debug ( " Stream completed " ) 
 + } 
 
 private def remove ( regId : String ) : Future [ Int ] = db . run ( GooglePushCredentialsRepo . deleteByToken ( regId ) ) 
 
 @ @ - 135 , 6 + 140 , 8 @ @ private final class GooglePushDelivery extends ActorPublisher [ ( HttpRequest , Goog 
 case d : Delivery if buf . size = = MaxQueue ⇒ 
 log . error ( " Current queue is already at size MaxQueue : { } , ignoring delivery " , MaxQueue ) 
 case d : Delivery ⇒ 
 + log . debug ( " New delivery " ) 
 + 
 if ( buf . isEmpty & & totalDemand > 0 ) 
 onNext ( mkJob ( d ) ) 
 else {
