BLEU SCORE: 0.23217460403031903

TEST MSG: chore ( core ) : calls logging
GENERATED MSG: fix ( core ) : end call if already on call

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > index de0d68b . . 88a80e0 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > import im . actor . core . viewmodel . Command ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . actors . ActorSystem ; < nl > @ @ - 28 , 6 + 29 , 7 @ @ import im . actor . runtime . actors . Props ; < nl > public class CallsModule extends AbsModule { < nl > < nl > public static final int MAX _ CALLS _ COUNT = 1 ; < nl > + private static final String TAG = " CALLS " ; < nl > < nl > public CallsModule ( ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 55 , 6 + 57 , 7 @ @ public class CallsModule extends AbsModule { < nl > public void onResult ( final ResponseDoCall response ) { < nl > callback . onResult ( response ) ; < nl > < nl > + Log . d ( TAG , " make call " + response . getCallId ( ) ) ; < nl > calls . put ( response . getCallId ( ) , < nl > ActorSystem . system ( ) . actorOf ( Props . create ( CallActor . class , new ActorCreator < CallActor > ( ) { < nl > @ Override < nl > @ @ - 91 , 16 + 94 , 22 @ @ public class CallsModule extends AbsModule { < nl > < nl > / / do end call < nl > public void endCall ( long callId ) { < nl > + Log . d ( TAG , " do end call " + callId ) ; < nl > + < nl > request ( new RequestEndCall ( callId ) ) ; < nl > ActorRef call = calls . get ( callId ) ; < nl > if ( call ! = null ) { < nl > + Log . d ( TAG , " call exist - end it " ) ; < nl > + < nl > call . send ( new CallActor . EndCall ( ) ) ; < nl > } else { < nl > + Log . d ( TAG , " call not exist - remove it " ) ; < nl > onCallEnded ( callId ) ; < nl > } < nl > } < nl > < nl > public void onIncomingCall ( final long callId , int uid ) { < nl > + Log . d ( TAG , " incoming call " + callId ) ; < nl > < nl > if ( ! calls . keySet ( ) . contains ( callId ) ) { < nl > calls . put ( callId , < nl > @ @ - 121 , 14 + 130 , 20 @ @ public class CallsModule extends AbsModule { < nl > < nl > / / on end call update < nl > public void onEndCall ( long callId ) { < nl > + Log . d ( TAG , " end call update " ) ; < nl > ActorRef call = calls . get ( callId ) ; < nl > if ( call ! = null ) { < nl > + Log . d ( TAG , " call exist - end it " ) ; < nl > call . send ( new CallActor . EndCall ( ) ) ; < nl > + } else { < nl > + Log . d ( TAG , " call not exist - remove it " ) ; < nl > + calls . remove ( callId ) ; < nl > } < nl > } < nl > < nl > / / after end call update processed by CallActor < nl > public void onCallEnded ( long callId ) { < nl > + Log . d ( TAG , " on callActor ended call " ) ; < nl > calls . remove ( callId ) ; < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > index 47680b6 . . 65dbbff 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > @ @ - 27 , 6 + 27 , 7 @ @ import im . actor . core . DeviceCategory ; < nl > import im . actor . core . PlatformType ; < nl > import im . actor . core . entity . content . AbsContent ; < nl > import im . actor . core . modules . events . IncomingCall ; < nl > + import im . actor . core . modules . internal . CallsModule ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . actors . ActorContext ; < nl > import im . actor . runtime . android . view . BindedViewHolder ; < nl > @ @ - 145 , 6 + 146 , 11 @ @ public class ActorSDK { < nl > * / < nl > private ActivityManager activityManager = new ActivityManager ( ) ; < nl > < nl > + / * * < nl > + * Call enabled < nl > + * / < nl > + private boolean callsEnabled = false ; < nl > + < nl > private ActorSDK ( ) { < nl > endpoints = new String [ ] { < nl > " tls : / / front1 - mtproto - api - rev2 . actor . im " , < nl > @ @ - 503 , 6 + 509 , 15 @ @ public class ActorSDK { < nl > this . twitter = twitter ; < nl > } < nl > < nl > + public void setCallsEnabled ( boolean callsEnabled ) { < nl > + this . callsEnabled = callsEnabled ; < nl > + CallsModule . CALLS _ ENABLED = callsEnabled ; < nl > + } < nl > + < nl > + public boolean isCallsEnabled ( ) { < nl > + return callsEnabled ; < nl > + } < nl > + < nl > / * * < nl > * Getting Application Delegate . < nl > * < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index ae0b10b . . 23f1b50 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 1009 , 6 + 1009 , 14 @ @ public class Messenger { < nl > / / Calls < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > < nl > + / * * < nl > + * Command for doing call < nl > + * < nl > + * @ param uid user you want to call < nl > + * @ param callCallback ui callback < nl > + * @ return command to execute < nl > + * / < nl > + @ ObjectiveCName ( " doCallWithUid : withCallback " ) < nl > public Command < ResponseDoCall > doCall ( int uid , CallsModule . CallCallback callCallback ) { < nl > return modules . getCallsModule ( ) . makeCall ( uid , callCallback ) ; < nl > } < nl > @ @ - 1017 , 10 + 1025 , 23 @ @ public class Messenger { < nl > modules . getCallsModule ( ) . endCall ( callId ) ; < nl > } < nl > < nl > - public void answerCall ( long callId , CallsModule . CallCallback callback ) { < nl > + / * * < nl > + * Handle call in ui - < b > should < b / > be called , when receiving IncomingCallEvent < nl > + * @ param callId < nl > + * @ param callback < nl > + * / < nl > + @ ObjectiveCName ( " handleCallWithCallId : withCallback : " ) < nl > + public void handleCall ( long callId , CallsModule . CallCallback callback ) { < nl > modules . getCallsModule ( ) . handleCall ( callId , callback ) ; < nl > } < nl > < nl > + / * * < nl > + * Send call signaling < nl > + * < nl > + * @ param callId call id < nl > + * @ param data signal object to send < nl > + * / < nl > + @ ObjectiveCName ( " sendCallSignalWithCallId : withData : " ) < nl > public void sendCallSignal ( long callId , AbsSignal data ) { < nl > modules . getCallsModule ( ) . sendSignal ( callId , data ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > index 7f5e078 . . aed8460 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java < nl > @ @ - 32 , 11 + 32 , 12 @ @ public class CallsModule extends AbsModule { < nl > < nl > < nl > public static final int CALL _ TIMEOUT = 10 ; < nl > - public boolean callsEnabled = true ; < nl > + public static boolean CALLS _ ENABLED = false ; < nl > + public static boolean MULTIPLE _ CALLS _ ENABLED = false ; < nl > HashMap < Long , ActorRef > calls = new HashMap < Long , ActorRef > ( ) ; < nl > < nl > public void run ( ) { < nl > - if ( callsEnabled ) { < nl > + if ( CALLS _ ENABLED ) { < nl > request ( new RequestSubscribeToCalls ( ) ) ; < nl > } < nl > } < nl > @ @ - 79 , 6 + 80 , 9 @ @ public class CallsModule extends AbsModule { < nl > ActorRef call = calls . get ( callId ) ; < nl > if ( call ! = null ) { < nl > call . send ( new CallActor . HandleCall ( callback ) ) ; < nl > + } else { < nl > + / / can ' t find call - close fragment < nl > + callback . onCallEnd ( ) ; < nl > } < nl > } < nl > < nl > @ @ - 92 , 6 + 96 , 7 @ @ public class CallsModule extends AbsModule { < nl > } < nl > < nl > public void onIncomingCall ( final long callId , int uid ) { < nl > + < nl > if ( ! calls . keySet ( ) . contains ( callId ) ) { < nl > calls . put ( callId , < nl > ActorSystem . system ( ) . actorOf ( Props . create ( CallActor . class , new ActorCreator < CallActor > ( ) { < nl > @ @ - 100 , 8 + 105 , 13 @ @ public class CallsModule extends AbsModule { < nl > return new CallActor ( callId , context ( ) ) ; < nl > } < nl > } ) , " actor / call " ) ) ; < nl > - context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; < nl > + if ( ! MULTIPLE _ CALLS _ ENABLED & calls . keySet ( ) . size ( ) > 0 ) { < nl > + calls . get ( callId ) . send ( new CallActor . EndCall ( ) ) ; < nl > + } else { < nl > + context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; < nl > + } < nl > } < nl > + < nl > } < nl > < nl > / / on end call update < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > index 123e199 . . f95c43e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java < nl > @ @ - 33 , 6 + 33 , 7 @ @ public class CallActor extends ModuleActor { < nl > public void preStart ( ) { < nl > super . preStart ( ) ; < nl > self ( ) . send ( new SendCallInProgress ( ) ) ; < nl > + self ( ) . send ( new CheckCallIsHandled ( ) , 1500 ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 49 , 6 + 50 , 25 @ @ public class CallActor extends ModuleActor { < nl > onSignal ( ( ( Signal ) message ) . getData ( ) ) ; < nl > } else if ( message instanceof HandleCall ) { < nl > onHandleCall ( ( ( HandleCall ) message ) . getCallback ( ) ) ; < nl > + } else if ( message instanceof CheckCallIsHandled ) { < nl > + checkCallHandled ( ) ; < nl > + } < nl > + } < nl > + < nl > + private void checkCallHandled ( ) { < nl > + if ( callback = = null ) { < nl > + / / don ' t want to wait for fragment forever < nl > + callback = new CallsModule . CallCallback ( ) { < nl > + @ Override < nl > + public void onCallEnd ( ) { < nl > + < nl > + } < nl > + < nl > + @ Override < nl > + public void onSignal ( byte [ ] data ) { < nl > + < nl > + } < nl > + } ; < nl > } < nl > } < nl > < nl > @ @ - 62 , 6 + 82 , 7 @ @ public class CallActor extends ModuleActor { < nl > < nl > public void onEndCall ( ) { < nl > if ( callback = = null ) { < nl > + / / fragment not yet created ? < nl > self ( ) . send ( new EndCall ( ) , 500 ) ; < nl > return ; < nl > } < nl > @ @ - 153 , 4 + 174 , 8 @ @ public class CallActor extends ModuleActor { < nl > private static class SendCallInProgress { < nl > < nl > } < nl > + < nl > + private static class CheckCallIsHandled { < nl > + < nl > + } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 index de0d68b . . 88a80e0 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 import im . actor . core . viewmodel . Command ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . actors . ActorSystem ; 
 @ @ - 28 , 6 + 29 , 7 @ @ import im . actor . runtime . actors . Props ; 
 public class CallsModule extends AbsModule { 
 
 public static final int MAX _ CALLS _ COUNT = 1 ; 
 + private static final String TAG = " CALLS " ; 
 
 public CallsModule ( ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 55 , 6 + 57 , 7 @ @ public class CallsModule extends AbsModule { 
 public void onResult ( final ResponseDoCall response ) { 
 callback . onResult ( response ) ; 
 
 + Log . d ( TAG , " make call " + response . getCallId ( ) ) ; 
 calls . put ( response . getCallId ( ) , 
 ActorSystem . system ( ) . actorOf ( Props . create ( CallActor . class , new ActorCreator < CallActor > ( ) { 
 @ Override 
 @ @ - 91 , 16 + 94 , 22 @ @ public class CallsModule extends AbsModule { 
 
 / / do end call 
 public void endCall ( long callId ) { 
 + Log . d ( TAG , " do end call " + callId ) ; 
 + 
 request ( new RequestEndCall ( callId ) ) ; 
 ActorRef call = calls . get ( callId ) ; 
 if ( call ! = null ) { 
 + Log . d ( TAG , " call exist - end it " ) ; 
 + 
 call . send ( new CallActor . EndCall ( ) ) ; 
 } else { 
 + Log . d ( TAG , " call not exist - remove it " ) ; 
 onCallEnded ( callId ) ; 
 } 
 } 
 
 public void onIncomingCall ( final long callId , int uid ) { 
 + Log . d ( TAG , " incoming call " + callId ) ; 
 
 if ( ! calls . keySet ( ) . contains ( callId ) ) { 
 calls . put ( callId , 
 @ @ - 121 , 14 + 130 , 20 @ @ public class CallsModule extends AbsModule { 
 
 / / on end call update 
 public void onEndCall ( long callId ) { 
 + Log . d ( TAG , " end call update " ) ; 
 ActorRef call = calls . get ( callId ) ; 
 if ( call ! = null ) { 
 + Log . d ( TAG , " call exist - end it " ) ; 
 call . send ( new CallActor . EndCall ( ) ) ; 
 + } else { 
 + Log . d ( TAG , " call not exist - remove it " ) ; 
 + calls . remove ( callId ) ; 
 } 
 } 
 
 / / after end call update processed by CallActor 
 public void onCallEnded ( long callId ) { 
 + Log . d ( TAG , " on callActor ended call " ) ; 
 calls . remove ( callId ) ; 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 index 47680b6 . . 65dbbff 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import im . actor . core . DeviceCategory ; 
 import im . actor . core . PlatformType ; 
 import im . actor . core . entity . content . AbsContent ; 
 import im . actor . core . modules . events . IncomingCall ; 
 + import im . actor . core . modules . internal . CallsModule ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . actors . ActorContext ; 
 import im . actor . runtime . android . view . BindedViewHolder ; 
 @ @ - 145 , 6 + 146 , 11 @ @ public class ActorSDK { 
 * / 
 private ActivityManager activityManager = new ActivityManager ( ) ; 
 
 + / * * 
 + * Call enabled 
 + * / 
 + private boolean callsEnabled = false ; 
 + 
 private ActorSDK ( ) { 
 endpoints = new String [ ] { 
 " tls : / / front1 - mtproto - api - rev2 . actor . im " , 
 @ @ - 503 , 6 + 509 , 15 @ @ public class ActorSDK { 
 this . twitter = twitter ; 
 } 
 
 + public void setCallsEnabled ( boolean callsEnabled ) { 
 + this . callsEnabled = callsEnabled ; 
 + CallsModule . CALLS _ ENABLED = callsEnabled ; 
 + } 
 + 
 + public boolean isCallsEnabled ( ) { 
 + return callsEnabled ; 
 + } 
 + 
 / * * 
 * Getting Application Delegate . 
 * 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index ae0b10b . . 23f1b50 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 1009 , 6 + 1009 , 14 @ @ public class Messenger { 
 / / Calls 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 + / * * 
 + * Command for doing call 
 + * 
 + * @ param uid user you want to call 
 + * @ param callCallback ui callback 
 + * @ return command to execute 
 + * / 
 + @ ObjectiveCName ( " doCallWithUid : withCallback " ) 
 public Command < ResponseDoCall > doCall ( int uid , CallsModule . CallCallback callCallback ) { 
 return modules . getCallsModule ( ) . makeCall ( uid , callCallback ) ; 
 } 
 @ @ - 1017 , 10 + 1025 , 23 @ @ public class Messenger { 
 modules . getCallsModule ( ) . endCall ( callId ) ; 
 } 
 
 - public void answerCall ( long callId , CallsModule . CallCallback callback ) { 
 + / * * 
 + * Handle call in ui - < b > should < b / > be called , when receiving IncomingCallEvent 
 + * @ param callId 
 + * @ param callback 
 + * / 
 + @ ObjectiveCName ( " handleCallWithCallId : withCallback : " ) 
 + public void handleCall ( long callId , CallsModule . CallCallback callback ) { 
 modules . getCallsModule ( ) . handleCall ( callId , callback ) ; 
 } 
 
 + / * * 
 + * Send call signaling 
 + * 
 + * @ param callId call id 
 + * @ param data signal object to send 
 + * / 
 + @ ObjectiveCName ( " sendCallSignalWithCallId : withData : " ) 
 public void sendCallSignal ( long callId , AbsSignal data ) { 
 modules . getCallsModule ( ) . sendSignal ( callId , data ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 index 7f5e078 . . aed8460 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / CallsModule . java 
 @ @ - 32 , 11 + 32 , 12 @ @ public class CallsModule extends AbsModule { 
 
 
 public static final int CALL _ TIMEOUT = 10 ; 
 - public boolean callsEnabled = true ; 
 + public static boolean CALLS _ ENABLED = false ; 
 + public static boolean MULTIPLE _ CALLS _ ENABLED = false ; 
 HashMap < Long , ActorRef > calls = new HashMap < Long , ActorRef > ( ) ; 
 
 public void run ( ) { 
 - if ( callsEnabled ) { 
 + if ( CALLS _ ENABLED ) { 
 request ( new RequestSubscribeToCalls ( ) ) ; 
 } 
 } 
 @ @ - 79 , 6 + 80 , 9 @ @ public class CallsModule extends AbsModule { 
 ActorRef call = calls . get ( callId ) ; 
 if ( call ! = null ) { 
 call . send ( new CallActor . HandleCall ( callback ) ) ; 
 + } else { 
 + / / can ' t find call - close fragment 
 + callback . onCallEnd ( ) ; 
 } 
 } 
 
 @ @ - 92 , 6 + 96 , 7 @ @ public class CallsModule extends AbsModule { 
 } 
 
 public void onIncomingCall ( final long callId , int uid ) { 
 + 
 if ( ! calls . keySet ( ) . contains ( callId ) ) { 
 calls . put ( callId , 
 ActorSystem . system ( ) . actorOf ( Props . create ( CallActor . class , new ActorCreator < CallActor > ( ) { 
 @ @ - 100 , 8 + 105 , 13 @ @ public class CallsModule extends AbsModule { 
 return new CallActor ( callId , context ( ) ) ; 
 } 
 } ) , " actor / call " ) ) ; 
 - context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; 
 + if ( ! MULTIPLE _ CALLS _ ENABLED & calls . keySet ( ) . size ( ) > 0 ) { 
 + calls . get ( callId ) . send ( new CallActor . EndCall ( ) ) ; 
 + } else { 
 + context ( ) . getEvents ( ) . post ( new IncomingCall ( callId , uid ) ) ; 
 + } 
 } 
 + 
 } 
 
 / / on end call update 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 index 123e199 . . f95c43e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / calls / CallActor . java 
 @ @ - 33 , 6 + 33 , 7 @ @ public class CallActor extends ModuleActor { 
 public void preStart ( ) { 
 super . preStart ( ) ; 
 self ( ) . send ( new SendCallInProgress ( ) ) ; 
 + self ( ) . send ( new CheckCallIsHandled ( ) , 1500 ) ; 
 } 
 
 @ Override 
 @ @ - 49 , 6 + 50 , 25 @ @ public class CallActor extends ModuleActor { 
 onSignal ( ( ( Signal ) message ) . getData ( ) ) ; 
 } else if ( message instanceof HandleCall ) { 
 onHandleCall ( ( ( HandleCall ) message ) . getCallback ( ) ) ; 
 + } else if ( message instanceof CheckCallIsHandled ) { 
 + checkCallHandled ( ) ; 
 + } 
 + } 
 + 
 + private void checkCallHandled ( ) { 
 + if ( callback = = null ) { 
 + / / don ' t want to wait for fragment forever 
 + callback = new CallsModule . CallCallback ( ) { 
 + @ Override 
 + public void onCallEnd ( ) { 
 + 
 + } 
 + 
 + @ Override 
 + public void onSignal ( byte [ ] data ) { 
 + 
 + } 
 + } ; 
 } 
 } 
 
 @ @ - 62 , 6 + 82 , 7 @ @ public class CallActor extends ModuleActor { 
 
 public void onEndCall ( ) { 
 if ( callback = = null ) { 
 + / / fragment not yet created ? 
 self ( ) . send ( new EndCall ( ) , 500 ) ; 
 return ; 
 } 
 @ @ - 153 , 4 + 174 , 8 @ @ public class CallActor extends ModuleActor { 
 private static class SendCallInProgress { 
 
 } 
 + 
 + private static class CheckCallIsHandled { 
 + 
 + } 
 }
