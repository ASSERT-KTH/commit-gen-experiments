BLEU SCORE: 0.020244462660665517

TEST MSG: Merge branch ' master ' of https : / / github . com / actorapp / actor - platform
GENERATED MSG: fix ( server : calls ) : calls fixes

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / rpc / raw / MapStyleRawApiService . scala b / actor - server / actor - core / src / main / scala / im / actor / rpc / raw / MapStyleRawApiService . scala < nl > index 058fac1 . . 6487e87 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / rpc / raw / MapStyleRawApiService . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / rpc / raw / MapStyleRawApiService . scala < nl > @ @ - 11 , 11 + 11 , 11 @ @ import scala . concurrent . Future < nl > trait ProductImplicits { < nl > < nl > / * * < nl > - * Implicit conversion for case classes and case objects . < nl > - * Allows to represent case class as ApiMap . < nl > - * Case classes with 0 fields and case objects are converted to empty ApiMap < nl > - * @ param product case class or case object < nl > - * / < nl > + * Implicit conversion for case classes and case objects . < nl > + * Allows to represent case class as ApiMap . < nl > + * Case classes with 0 fields and case objects are converted to empty ApiMap < nl > + * @ param product case class or case object < nl > + * / < nl > implicit class Foo ( product : Product ) { < nl > def asApiMap : ApiMapValue = { < nl > / / case object or empty case class < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala < nl > index 06345e9 . . 8b5da92 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala < nl > @ @ - 10 , 18 + 10 , 17 @ @ import akka . stream . actor . ActorPublisher < nl > import akka . stream . scaladsl . Source < nl > import akka . util . ByteString < nl > import cats . data . Xor < nl > + import com . github . kxbmap . configs . _ < nl > + import com . typesafe . config . Config < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . persist . push . GooglePushCredentialsRepo < nl > import io . circe . generic . auto . _ < nl > - < nl > - import com . github . kxbmap . configs . _ < nl > - import com . typesafe . config . Config < nl > import io . circe . jawn . _ < nl > import io . circe . syntax . _ < nl > < nl > import scala . annotation . tailrec < nl > import scala . concurrent . Future < nl > - import scala . util . { Failure , Success , Try } < nl > + import scala . util . { Failure , Success , Try } < nl > < nl > case class GooglePushKey ( projectId : Long , key : String ) < nl > < nl > @ @ - 45 , 6 + 44 , 7 @ @ object GooglePushManagerConfig { < nl > } < nl > < nl > final case class GooglePushMessage ( < nl > + to : String , < nl > collapseKey : Option [ String ] , < nl > data : Option [ Map [ String , String ] ] < nl > ) < nl > @ @ - 69 , 15 + 69 , 17 @ @ final class GooglePushManager ( config : GooglePushManagerConfig ) ( implicit system : < nl > case Xor . Right ( json ) ⇒ < nl > json . asObject match { < nl > case Some ( obj ) ⇒ < nl > - obj ( " error " ) flatMap ( _ . asString ) foreach { < nl > - case " InvalidRegistration " ⇒ < nl > + obj ( " error " ) map ( _ . asString ) foreach { < nl > + case Some ( " InvalidRegistration " ) ⇒ < nl > log . warning ( " Invalid registration , deleting " ) < nl > - remove ( delivery . regId ) < nl > - case " NotRegistered " ⇒ < nl > + remove ( delivery . m . to ) < nl > + case Some ( " NotRegistered " ) ⇒ < nl > log . warning ( " Token is not registered , deleting " ) < nl > - remove ( delivery . regId ) < nl > - case other ⇒ < nl > + remove ( delivery . m . to ) < nl > + case Some ( other ) ⇒ < nl > log . warning ( " Error in GCM response : { } " , other ) < nl > + case None ⇒ < nl > + log . debug ( " Delivered successfully " ) < nl > } < nl > case None ⇒ < nl > log . error ( " Expected JSON Object but got : { } " , json ) < nl > @ @ - 85 , 9 + 87 , 12 @ @ final class GooglePushManager ( config : GooglePushManagerConfig ) ( implicit system : < nl > case Xor . Left ( failure ) ⇒ log . error ( failure . underlying , " Failed to parse response " ) < nl > } < nl > } < nl > - } else log . error ( " Status code was not OK : { } " , resp . status ) < nl > + } else log . error ( " Failed to deliver message , StatusCode was not OK : { } " , resp . status ) < nl > case ( Failure ( e ) , delivery ) ⇒ < nl > log . error ( e , " Failed to deliver message : { } " , delivery . m ) < nl > + } onComplete { < nl > + case Failure ( e ) ⇒ log . error ( e , " Failure in stream " ) < nl > + case Success ( _ ) ⇒ log . debug ( " Stream completed " ) < nl > } < nl > < nl > private def remove ( regId : String ) : Future [ Int ] = db . run ( GooglePushCredentialsRepo . deleteByToken ( regId ) ) < nl > @ @ - 97 , 10 + 102 , 10 @ @ final class GooglePushManager ( config : GooglePushManagerConfig ) ( implicit system : < nl > case GooglePushKey ( projectId , key ) ⇒ projectId → key < nl > } ) . toMap < nl > < nl > - def send ( projectId : Long , regId : String , message : GooglePushMessage ) : Unit = < nl > + def send ( projectId : Long , message : GooglePushMessage ) : Unit = < nl > keys get projectId match { < nl > case Some ( key ) ⇒ < nl > - deliveryPublisher ! GooglePushDelivery . Delivery ( message , key , regId ) < nl > + deliveryPublisher ! GooglePushDelivery . Delivery ( message , key ) < nl > case None ⇒ < nl > log . warning ( " Key not found for projectId : { } " , projectId ) < nl > } < nl > @ @ - 110 , 7 + 115 , 7 @ @ private object GooglePushDelivery { < nl > < nl > object Tick < nl > < nl > - final case class Delivery ( m : GooglePushMessage , key : String , regId : String ) < nl > + final case class Delivery ( m : GooglePushMessage , key : String ) < nl > < nl > private val MaxQueue = 100000 < nl > private val MaxConnections = 4 < nl > @ @ - 157 , 11 + 162 , 12 @ @ private final class GooglePushDelivery extends ActorPublisher [ ( HttpRequest , Goog < nl > } < nl > } < nl > < nl > - private def mkJob ( d : Delivery ) : ( HttpRequest , Delivery ) = < nl > + private def mkJob ( d : Delivery ) : ( HttpRequest , Delivery ) = { < nl > HttpRequest ( < nl > method = HttpMethods . POST , < nl > uri = Uri ( " / gcm / send " ) , < nl > - headers = List ( headers . Authorization ( headers . GenericHttpCredentials ( s " key = $ { d . regId } " , Map . empty [ String , String ] ) ) ) , < nl > + headers = List ( headers . Authorization ( headers . GenericHttpCredentials ( s " key = $ { d . key } " , Map . empty [ String , String ] ) ) ) , < nl > entity = HttpEntity ( ContentTypes . ` application / json ` , d . m . asJson . toString ( ) ) < nl > ) → d < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala < nl > index 8376311 . . 66a5f88 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala < nl > @ @ - 6 , 11 + 6 , 12 @ @ import im . actor . server . model . push . GooglePushCredentials < nl > private [ sequence ] final class GooglePushProvider ( userId : Int , googlePushManager : GooglePushManager , system : ActorSystem ) extends PushProvider { < nl > def deliverInvisible ( seq : Int , creds : GooglePushCredentials ) : Unit = { < nl > val message = GooglePushMessage ( < nl > + to = creds . regId , < nl > collapseKey = Some ( s " seq - invisible - $ { userId . toString } " ) , < nl > data = Some ( Map ( " seq " → seq . toString ) ) < nl > ) < nl > < nl > - googlePushManager . send ( creds . projectId , creds . regId , message ) < nl > + googlePushManager . send ( creds . projectId , message ) < nl > } < nl > < nl > def deliverVisible ( < nl > @ @ - 22 , 6 + 23 , 7 @ @ private [ sequence ] final class GooglePushProvider ( userId : Int , googlePushManager : < nl > isVibrationEnabled : Boolean < nl > ) : Unit = { < nl > val message = GooglePushMessage ( < nl > + to = creds . regId , < nl > collapseKey = Some ( s " seq - visible - $ { userId . toString } " ) , < nl > data = Some ( Map ( " seq " → seq . toString ) + + ( < nl > data . text match { < nl > @ @ - 32 , 6 + 34 , 6 @ @ private [ sequence ] final class GooglePushProvider ( userId : Int , googlePushManager : < nl > ) ) < nl > ) < nl > < nl > - googlePushManager . send ( creds . projectId , creds . regId , message ) < nl > + googlePushManager . send ( creds . projectId , message ) < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20160117171824 _ _ CreateIndexOnGoogleRegId . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20160117171824 _ _ CreateIndexOnGoogleRegId . sql < nl > new file mode 100644 < nl > index 0000000 . . bb24b14 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20160117171824 _ _ CreateIndexOnGoogleRegId . sql < nl > @ @ - 0 , 0 + 1 @ @ < nl > + CREATE INDEX ON google _ push _ credentials ( reg _ id ) ; < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala < nl > index 759781e . . 6355e01 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala < nl > @ @ - 34 , 19 + 34 , 19 @ @ object UpdatesConsumerMessage { < nl > case object SubscribeToSeq extends UpdatesConsumerMessage < nl > < nl > @ SerialVersionUID ( 1L ) < nl > - case object SubscribeToWeak extends UpdatesConsumerMessage < nl > + final case class SubscribeToWeak ( group : Option [ String ] ) extends UpdatesConsumerMessage < nl > < nl > @ SerialVersionUID ( 1L ) < nl > - case class SubscribeToUserPresences ( userIds : Set [ Int ] ) extends UpdatesConsumerMessage < nl > + final case class SubscribeToUserPresences ( userIds : Set [ Int ] ) extends UpdatesConsumerMessage < nl > < nl > @ SerialVersionUID ( 1L ) < nl > - case class UnsubscribeFromUserPresences ( userIds : Set [ Int ] ) extends UpdatesConsumerMessage < nl > + final case class UnsubscribeFromUserPresences ( userIds : Set [ Int ] ) extends UpdatesConsumerMessage < nl > < nl > @ SerialVersionUID ( 1L ) < nl > - case class SubscribeToGroupPresences ( groupIds : Set [ Int ] ) extends UpdatesConsumerMessage < nl > + final case class SubscribeToGroupPresences ( groupIds : Set [ Int ] ) extends UpdatesConsumerMessage < nl > < nl > @ SerialVersionUID ( 1L ) < nl > - case class UnsubscribeFromGroupPresences ( groupIds : Set [ Int ] ) extends UpdatesConsumerMessage < nl > + final case class UnsubscribeFromGroupPresences ( groupIds : Set [ Int ] ) extends UpdatesConsumerMessage < nl > < nl > } < nl > < nl > @ @ - 73 , 7 + 73 , 7 @ @ private [ sequence ] class UpdatesConsumer ( userId : Int , authId : Long , authSid : Int , < nl > private var subscribedToSeq : Boolean = false < nl > < nl > override def preStart ( ) : Unit = { < nl > - self ! SubscribeToWeak < nl > + self ! SubscribeToWeak ( None ) < nl > } < nl > < nl > def receive = { < nl > @ @ - 94 , 12 + 94 , 18 @ @ private [ sequence ] class UpdatesConsumer ( userId : Int , authId : Long , authSid : Int , < nl > < nl > seqUpdExt . subscribe ( userId , self ) pipeTo self < nl > } < nl > - case SubscribeToWeak ⇒ < nl > + case SubscribeToWeak ( None ) ⇒ < nl > weakUpdatesExt . subscribe ( authId , self , None ) onFailure { < nl > case e ⇒ < nl > - self ! SubscribeToWeak < nl > + self ! SubscribeToWeak ( None ) < nl > log . error ( e , " Failed to subscribe to weak updates " ) < nl > } < nl > + case SubscribeToWeak ( Some ( group ) ) ⇒ < nl > + weakUpdatesExt . subscribe ( authId , self , Some ( group ) ) onFailure { < nl > + case e ⇒ < nl > + self ! SubscribeToWeak ( Some ( group ) ) < nl > + log . error ( e , " Failed to subscribe to weak updates , group : { } " , group ) < nl > + } < nl > case cmd @ SubscribeToUserPresences ( userIds ) ⇒ < nl > userIds foreach { userId ⇒ < nl > presenceExt . subscribe ( userId , self ) onFailure { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index 0ffc3f7 . . 3ba8407 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . server . sequence . { WeakUpdatesExtension , SeqUpdatesExtension } < nl > import scala . concurrent . Future < nl > import scala . concurrent . duration . _ < nl > import scala . concurrent . forkjoin . ThreadLocalRandom < nl > + import scala . util . { Failure , Success } < nl > < nl > sealed abstract class WebrtcCallError ( message : String ) extends RuntimeException ( message ) < nl > < nl > @ @ - 21 , 20 + 22 , 23 @ @ object WebrtcCallErrors { < nl > object NotAParticipant extends WebrtcCallError ( " Not participant " ) < nl > } < nl > < nl > - sealed trait WebrtcCallMessages < nl > + sealed trait WebrtcCallMessage < nl > < nl > object WebrtcCallMessages { < nl > - final case class StartCall ( callerUserId : Int , receiverUserId : Int ) extends WebrtcCallMessages < nl > + final case class StartCall ( callerUserId : Int , receiverUserId : Int ) extends WebrtcCallMessage < nl > case object CallStarted < nl > < nl > - final case class CallInProgress ( userId : Int , timeout : Int ) extends WebrtcCallMessages < nl > + final case class CallInProgress ( userId : Int , timeout : Int ) extends WebrtcCallMessage < nl > + object CallInProgressAck < nl > < nl > - final case class CallSignal ( userId : Int , pkg : Array [ Byte ] ) extends WebrtcCallMessages < nl > + final case class CallSignal ( userId : Int , pkg : Array [ Byte ] ) extends WebrtcCallMessage < nl > + object CallSignalAck < nl > < nl > - case class EndCall ( userId : Int ) extends WebrtcCallMessages < nl > + final case class EndCall ( userId : Int ) extends WebrtcCallMessage < nl > + object EndCallAck < nl > } < nl > < nl > - final case class WebrtcCallEnvelope ( id : Long , message : WebrtcCallMessages ) < nl > + final case class WebrtcCallEnvelope ( id : Long , message : WebrtcCallMessage ) < nl > < nl > object WebrtcCallActor { < nl > val RegionTypeName = " WebrtcCall " < nl > @ @ - 119 , 9 + 123 , 11 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > case ( ) ⇒ < nl > context . unbecome ( ) < nl > unstashAll ( ) < nl > - case failure : Status . Failure ⇒ < nl > + replyTo ! CallInProgressAck < nl > + case Status . Failure ( cause ) ⇒ < nl > end ( ) < nl > - throw failure . cause < nl > + log . error ( cause , " Failed to process CallInProgress " ) < nl > + throw cause < nl > } , discardOld = false ) < nl > } < nl > case CallSignal ( userId , pkg ) ⇒ < nl > @ @ - 129 , 13 + 135 , 18 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > / / TODO : stashing < nl > val update = UpdateCallSignal ( id , pkg ) < nl > weakUpdExt . broadcastUserWeakUpdate ( target , update , Some ( s " webrtc _ call _ signal _ $ id " ) , Some ( Webrtc . WeakGroup ) ) < nl > + sender ( ) ! CallSignalAck < nl > } < nl > case EndCall ( userId ) ⇒ < nl > withOrigin ( userId ) { _ ⇒ < nl > scheduledEnd . cancel ( ) < nl > + val replyTo = sender ( ) < nl > < nl > - end ( ) map ( _ ⇒ PoisonPill ) pipeTo self onFailure { < nl > - case e ⇒ log . error ( e , " Failed to end call " ) < nl > + end ( ) map ( _ ⇒ PoisonPill ) pipeTo self onComplete { < nl > + case Success ( _ ) ⇒ replyTo ! EndCallAck < nl > + case Failure ( e ) ⇒ < nl > + replyTo ! Status . Failure ( e ) < nl > + log . error ( e , " Failed to end call " ) < nl > } < nl > } < nl > } < nl > diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20160110234231 _ _ CreateWebrtcCalls . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20160110234231 _ _ CreateWebrtcCalls . sql < nl > index 492e29e . . 2045015 100644 < nl > - - - a / actor - server / actor - persist / src / main / resources / sql / migration / V20160110234231 _ _ CreateWebrtcCalls . sql < nl > + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20160110234231 _ _ CreateWebrtcCalls . sql < nl > @ @ - 2 , 5 + 2 , 5 @ @ CREATE TABLE webrtc _ calls ( < nl > id BIGINT NOT NULL , < nl > initiator _ user _ id INT NOT NULL , < nl > receiver _ user _ id INT NOT NULL , < nl > - PRIMARY KEY id < nl > + PRIMARY KEY ( id ) < nl > ) < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > index 77b49b3 . . a090522 100644 < nl > - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala < nl > @ @ - 26 , 6 + 26 , 7 @ @ import im . actor . server . api . rpc . service . users . UsersServiceImpl < nl > import im . actor . server . api . rpc . service . weak . WeakServiceImpl < nl > import im . actor . server . api . rpc . service . webactions . WebactionsServiceImpl < nl > import im . actor . server . api . rpc . service . webhooks . IntegrationsServiceImpl < nl > + import im . actor . server . api . rpc . service . webrtc . WebrtcServiceImpl < nl > import im . actor . server . bot . { BotExtension , ActorBot } < nl > import im . actor . server . cli . ActorCliService < nl > import im . actor . server . db . DbExtension < nl > @ @ - 231 , 6 + 232 , 9 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > system . log . debug ( " Starting FeaturesServiceImpl " ) < nl > val featuresService = new FeaturesServiceImpl < nl > < nl > + system . log . debug ( " Starting WebrtcServiceImpl " ) < nl > + val webrtcService = new WebrtcServiceImpl ( ) < nl > + < nl > val services = Seq ( < nl > authService , < nl > contactsService , < nl > @ @ - 248 , 7 + 252 , 8 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( < nl > webactionsService , < nl > deviceService , < nl > stickerService , < nl > - featuresService < nl > + featuresService , < nl > + webrtcService < nl > ) < nl > < nl > system . log . warning ( " Starting BotExtension " ) < nl > diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala < nl > index a938d50 . . 4947740 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala < nl > @ @ - 49 , 6 + 49 , 10 @ @ private [ session ] class UpdatesHandler ( authId : Long ) < nl > consumer ! UpdatesConsumerMessage . UnsubscribeFromGroupPresences ( groupIds . toSet ) < nl > case SubscribeToSeq ( ) ⇒ < nl > consumer ! UpdatesConsumerMessage . SubscribeToSeq < nl > + case SubscribeToWeak ( Some ( group ) ) ⇒ < nl > + consumer ! UpdatesConsumerMessage . SubscribeToWeak ( Some ( group ) ) < nl > + case SubscribeToWeak ( None ) ⇒ < nl > + log . error ( " Subscribe to weak is done implicitly on UpdatesConsumer start " ) < nl > } < nl > case OnComplete ⇒ < nl > context . stop ( self )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / rpc / raw / MapStyleRawApiService . scala b / actor - server / actor - core / src / main / scala / im / actor / rpc / raw / MapStyleRawApiService . scala 
 index 058fac1 . . 6487e87 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / rpc / raw / MapStyleRawApiService . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / rpc / raw / MapStyleRawApiService . scala 
 @ @ - 11 , 11 + 11 , 11 @ @ import scala . concurrent . Future 
 trait ProductImplicits { 
 
 / * * 
 - * Implicit conversion for case classes and case objects . 
 - * Allows to represent case class as ApiMap . 
 - * Case classes with 0 fields and case objects are converted to empty ApiMap 
 - * @ param product case class or case object 
 - * / 
 + * Implicit conversion for case classes and case objects . 
 + * Allows to represent case class as ApiMap . 
 + * Case classes with 0 fields and case objects are converted to empty ApiMap 
 + * @ param product case class or case object 
 + * / 
 implicit class Foo ( product : Product ) { 
 def asApiMap : ApiMapValue = { 
 / / case object or empty case class 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala 
 index 06345e9 . . 8b5da92 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushManager . scala 
 @ @ - 10 , 18 + 10 , 17 @ @ import akka . stream . actor . ActorPublisher 
 import akka . stream . scaladsl . Source 
 import akka . util . ByteString 
 import cats . data . Xor 
 + import com . github . kxbmap . configs . _ 
 + import com . typesafe . config . Config 
 import im . actor . server . db . DbExtension 
 import im . actor . server . persist . push . GooglePushCredentialsRepo 
 import io . circe . generic . auto . _ 
 - 
 - import com . github . kxbmap . configs . _ 
 - import com . typesafe . config . Config 
 import io . circe . jawn . _ 
 import io . circe . syntax . _ 
 
 import scala . annotation . tailrec 
 import scala . concurrent . Future 
 - import scala . util . { Failure , Success , Try } 
 + import scala . util . { Failure , Success , Try } 
 
 case class GooglePushKey ( projectId : Long , key : String ) 
 
 @ @ - 45 , 6 + 44 , 7 @ @ object GooglePushManagerConfig { 
 } 
 
 final case class GooglePushMessage ( 
 + to : String , 
 collapseKey : Option [ String ] , 
 data : Option [ Map [ String , String ] ] 
 ) 
 @ @ - 69 , 15 + 69 , 17 @ @ final class GooglePushManager ( config : GooglePushManagerConfig ) ( implicit system : 
 case Xor . Right ( json ) ⇒ 
 json . asObject match { 
 case Some ( obj ) ⇒ 
 - obj ( " error " ) flatMap ( _ . asString ) foreach { 
 - case " InvalidRegistration " ⇒ 
 + obj ( " error " ) map ( _ . asString ) foreach { 
 + case Some ( " InvalidRegistration " ) ⇒ 
 log . warning ( " Invalid registration , deleting " ) 
 - remove ( delivery . regId ) 
 - case " NotRegistered " ⇒ 
 + remove ( delivery . m . to ) 
 + case Some ( " NotRegistered " ) ⇒ 
 log . warning ( " Token is not registered , deleting " ) 
 - remove ( delivery . regId ) 
 - case other ⇒ 
 + remove ( delivery . m . to ) 
 + case Some ( other ) ⇒ 
 log . warning ( " Error in GCM response : { } " , other ) 
 + case None ⇒ 
 + log . debug ( " Delivered successfully " ) 
 } 
 case None ⇒ 
 log . error ( " Expected JSON Object but got : { } " , json ) 
 @ @ - 85 , 9 + 87 , 12 @ @ final class GooglePushManager ( config : GooglePushManagerConfig ) ( implicit system : 
 case Xor . Left ( failure ) ⇒ log . error ( failure . underlying , " Failed to parse response " ) 
 } 
 } 
 - } else log . error ( " Status code was not OK : { } " , resp . status ) 
 + } else log . error ( " Failed to deliver message , StatusCode was not OK : { } " , resp . status ) 
 case ( Failure ( e ) , delivery ) ⇒ 
 log . error ( e , " Failed to deliver message : { } " , delivery . m ) 
 + } onComplete { 
 + case Failure ( e ) ⇒ log . error ( e , " Failure in stream " ) 
 + case Success ( _ ) ⇒ log . debug ( " Stream completed " ) 
 } 
 
 private def remove ( regId : String ) : Future [ Int ] = db . run ( GooglePushCredentialsRepo . deleteByToken ( regId ) ) 
 @ @ - 97 , 10 + 102 , 10 @ @ final class GooglePushManager ( config : GooglePushManagerConfig ) ( implicit system : 
 case GooglePushKey ( projectId , key ) ⇒ projectId → key 
 } ) . toMap 
 
 - def send ( projectId : Long , regId : String , message : GooglePushMessage ) : Unit = 
 + def send ( projectId : Long , message : GooglePushMessage ) : Unit = 
 keys get projectId match { 
 case Some ( key ) ⇒ 
 - deliveryPublisher ! GooglePushDelivery . Delivery ( message , key , regId ) 
 + deliveryPublisher ! GooglePushDelivery . Delivery ( message , key ) 
 case None ⇒ 
 log . warning ( " Key not found for projectId : { } " , projectId ) 
 } 
 @ @ - 110 , 7 + 115 , 7 @ @ private object GooglePushDelivery { 
 
 object Tick 
 
 - final case class Delivery ( m : GooglePushMessage , key : String , regId : String ) 
 + final case class Delivery ( m : GooglePushMessage , key : String ) 
 
 private val MaxQueue = 100000 
 private val MaxConnections = 4 
 @ @ - 157 , 11 + 162 , 12 @ @ private final class GooglePushDelivery extends ActorPublisher [ ( HttpRequest , Goog 
 } 
 } 
 
 - private def mkJob ( d : Delivery ) : ( HttpRequest , Delivery ) = 
 + private def mkJob ( d : Delivery ) : ( HttpRequest , Delivery ) = { 
 HttpRequest ( 
 method = HttpMethods . POST , 
 uri = Uri ( " / gcm / send " ) , 
 - headers = List ( headers . Authorization ( headers . GenericHttpCredentials ( s " key = $ { d . regId } " , Map . empty [ String , String ] ) ) ) , 
 + headers = List ( headers . Authorization ( headers . GenericHttpCredentials ( s " key = $ { d . key } " , Map . empty [ String , String ] ) ) ) , 
 entity = HttpEntity ( ContentTypes . ` application / json ` , d . m . asJson . toString ( ) ) 
 ) → d 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala 
 index 8376311 . . 66a5f88 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / GooglePushProvider . scala 
 @ @ - 6 , 11 + 6 , 12 @ @ import im . actor . server . model . push . GooglePushCredentials 
 private [ sequence ] final class GooglePushProvider ( userId : Int , googlePushManager : GooglePushManager , system : ActorSystem ) extends PushProvider { 
 def deliverInvisible ( seq : Int , creds : GooglePushCredentials ) : Unit = { 
 val message = GooglePushMessage ( 
 + to = creds . regId , 
 collapseKey = Some ( s " seq - invisible - $ { userId . toString } " ) , 
 data = Some ( Map ( " seq " → seq . toString ) ) 
 ) 
 
 - googlePushManager . send ( creds . projectId , creds . regId , message ) 
 + googlePushManager . send ( creds . projectId , message ) 
 } 
 
 def deliverVisible ( 
 @ @ - 22 , 6 + 23 , 7 @ @ private [ sequence ] final class GooglePushProvider ( userId : Int , googlePushManager : 
 isVibrationEnabled : Boolean 
 ) : Unit = { 
 val message = GooglePushMessage ( 
 + to = creds . regId , 
 collapseKey = Some ( s " seq - visible - $ { userId . toString } " ) , 
 data = Some ( Map ( " seq " → seq . toString ) + + ( 
 data . text match { 
 @ @ - 32 , 6 + 34 , 6 @ @ private [ sequence ] final class GooglePushProvider ( userId : Int , googlePushManager : 
 ) ) 
 ) 
 
 - googlePushManager . send ( creds . projectId , creds . regId , message ) 
 + googlePushManager . send ( creds . projectId , message ) 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20160117171824 _ _ CreateIndexOnGoogleRegId . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20160117171824 _ _ CreateIndexOnGoogleRegId . sql 
 new file mode 100644 
 index 0000000 . . bb24b14 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20160117171824 _ _ CreateIndexOnGoogleRegId . sql 
 @ @ - 0 , 0 + 1 @ @ 
 + CREATE INDEX ON google _ push _ credentials ( reg _ id ) ; 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala 
 index 759781e . . 6355e01 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala 
 @ @ - 34 , 19 + 34 , 19 @ @ object UpdatesConsumerMessage { 
 case object SubscribeToSeq extends UpdatesConsumerMessage 
 
 @ SerialVersionUID ( 1L ) 
 - case object SubscribeToWeak extends UpdatesConsumerMessage 
 + final case class SubscribeToWeak ( group : Option [ String ] ) extends UpdatesConsumerMessage 
 
 @ SerialVersionUID ( 1L ) 
 - case class SubscribeToUserPresences ( userIds : Set [ Int ] ) extends UpdatesConsumerMessage 
 + final case class SubscribeToUserPresences ( userIds : Set [ Int ] ) extends UpdatesConsumerMessage 
 
 @ SerialVersionUID ( 1L ) 
 - case class UnsubscribeFromUserPresences ( userIds : Set [ Int ] ) extends UpdatesConsumerMessage 
 + final case class UnsubscribeFromUserPresences ( userIds : Set [ Int ] ) extends UpdatesConsumerMessage 
 
 @ SerialVersionUID ( 1L ) 
 - case class SubscribeToGroupPresences ( groupIds : Set [ Int ] ) extends UpdatesConsumerMessage 
 + final case class SubscribeToGroupPresences ( groupIds : Set [ Int ] ) extends UpdatesConsumerMessage 
 
 @ SerialVersionUID ( 1L ) 
 - case class UnsubscribeFromGroupPresences ( groupIds : Set [ Int ] ) extends UpdatesConsumerMessage 
 + final case class UnsubscribeFromGroupPresences ( groupIds : Set [ Int ] ) extends UpdatesConsumerMessage 
 
 } 
 
 @ @ - 73 , 7 + 73 , 7 @ @ private [ sequence ] class UpdatesConsumer ( userId : Int , authId : Long , authSid : Int , 
 private var subscribedToSeq : Boolean = false 
 
 override def preStart ( ) : Unit = { 
 - self ! SubscribeToWeak 
 + self ! SubscribeToWeak ( None ) 
 } 
 
 def receive = { 
 @ @ - 94 , 12 + 94 , 18 @ @ private [ sequence ] class UpdatesConsumer ( userId : Int , authId : Long , authSid : Int , 
 
 seqUpdExt . subscribe ( userId , self ) pipeTo self 
 } 
 - case SubscribeToWeak ⇒ 
 + case SubscribeToWeak ( None ) ⇒ 
 weakUpdatesExt . subscribe ( authId , self , None ) onFailure { 
 case e ⇒ 
 - self ! SubscribeToWeak 
 + self ! SubscribeToWeak ( None ) 
 log . error ( e , " Failed to subscribe to weak updates " ) 
 } 
 + case SubscribeToWeak ( Some ( group ) ) ⇒ 
 + weakUpdatesExt . subscribe ( authId , self , Some ( group ) ) onFailure { 
 + case e ⇒ 
 + self ! SubscribeToWeak ( Some ( group ) ) 
 + log . error ( e , " Failed to subscribe to weak updates , group : { } " , group ) 
 + } 
 case cmd @ SubscribeToUserPresences ( userIds ) ⇒ 
 userIds foreach { userId ⇒ 
 presenceExt . subscribe ( userId , self ) onFailure { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index 0ffc3f7 . . 3ba8407 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 14 , 6 + 14 , 7 @ @ import im . actor . server . sequence . { WeakUpdatesExtension , SeqUpdatesExtension } 
 import scala . concurrent . Future 
 import scala . concurrent . duration . _ 
 import scala . concurrent . forkjoin . ThreadLocalRandom 
 + import scala . util . { Failure , Success } 
 
 sealed abstract class WebrtcCallError ( message : String ) extends RuntimeException ( message ) 
 
 @ @ - 21 , 20 + 22 , 23 @ @ object WebrtcCallErrors { 
 object NotAParticipant extends WebrtcCallError ( " Not participant " ) 
 } 
 
 - sealed trait WebrtcCallMessages 
 + sealed trait WebrtcCallMessage 
 
 object WebrtcCallMessages { 
 - final case class StartCall ( callerUserId : Int , receiverUserId : Int ) extends WebrtcCallMessages 
 + final case class StartCall ( callerUserId : Int , receiverUserId : Int ) extends WebrtcCallMessage 
 case object CallStarted 
 
 - final case class CallInProgress ( userId : Int , timeout : Int ) extends WebrtcCallMessages 
 + final case class CallInProgress ( userId : Int , timeout : Int ) extends WebrtcCallMessage 
 + object CallInProgressAck 
 
 - final case class CallSignal ( userId : Int , pkg : Array [ Byte ] ) extends WebrtcCallMessages 
 + final case class CallSignal ( userId : Int , pkg : Array [ Byte ] ) extends WebrtcCallMessage 
 + object CallSignalAck 
 
 - case class EndCall ( userId : Int ) extends WebrtcCallMessages 
 + final case class EndCall ( userId : Int ) extends WebrtcCallMessage 
 + object EndCallAck 
 } 
 
 - final case class WebrtcCallEnvelope ( id : Long , message : WebrtcCallMessages ) 
 + final case class WebrtcCallEnvelope ( id : Long , message : WebrtcCallMessage ) 
 
 object WebrtcCallActor { 
 val RegionTypeName = " WebrtcCall " 
 @ @ - 119 , 9 + 123 , 11 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 case ( ) ⇒ 
 context . unbecome ( ) 
 unstashAll ( ) 
 - case failure : Status . Failure ⇒ 
 + replyTo ! CallInProgressAck 
 + case Status . Failure ( cause ) ⇒ 
 end ( ) 
 - throw failure . cause 
 + log . error ( cause , " Failed to process CallInProgress " ) 
 + throw cause 
 } , discardOld = false ) 
 } 
 case CallSignal ( userId , pkg ) ⇒ 
 @ @ - 129 , 13 + 135 , 18 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 / / TODO : stashing 
 val update = UpdateCallSignal ( id , pkg ) 
 weakUpdExt . broadcastUserWeakUpdate ( target , update , Some ( s " webrtc _ call _ signal _ $ id " ) , Some ( Webrtc . WeakGroup ) ) 
 + sender ( ) ! CallSignalAck 
 } 
 case EndCall ( userId ) ⇒ 
 withOrigin ( userId ) { _ ⇒ 
 scheduledEnd . cancel ( ) 
 + val replyTo = sender ( ) 
 
 - end ( ) map ( _ ⇒ PoisonPill ) pipeTo self onFailure { 
 - case e ⇒ log . error ( e , " Failed to end call " ) 
 + end ( ) map ( _ ⇒ PoisonPill ) pipeTo self onComplete { 
 + case Success ( _ ) ⇒ replyTo ! EndCallAck 
 + case Failure ( e ) ⇒ 
 + replyTo ! Status . Failure ( e ) 
 + log . error ( e , " Failed to end call " ) 
 } 
 } 
 } 
 diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20160110234231 _ _ CreateWebrtcCalls . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20160110234231 _ _ CreateWebrtcCalls . sql 
 index 492e29e . . 2045015 100644 
 - - - a / actor - server / actor - persist / src / main / resources / sql / migration / V20160110234231 _ _ CreateWebrtcCalls . sql 
 + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20160110234231 _ _ CreateWebrtcCalls . sql 
 @ @ - 2 , 5 + 2 , 5 @ @ CREATE TABLE webrtc _ calls ( 
 id BIGINT NOT NULL , 
 initiator _ user _ id INT NOT NULL , 
 receiver _ user _ id INT NOT NULL , 
 - PRIMARY KEY id 
 + PRIMARY KEY ( id ) 
 ) 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 index 77b49b3 . . a090522 100644 
 - - - a / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 + + + b / actor - server / actor - server - sdk / src / main / scala / im / actor / server / ActorServer . scala 
 @ @ - 26 , 6 + 26 , 7 @ @ import im . actor . server . api . rpc . service . users . UsersServiceImpl 
 import im . actor . server . api . rpc . service . weak . WeakServiceImpl 
 import im . actor . server . api . rpc . service . webactions . WebactionsServiceImpl 
 import im . actor . server . api . rpc . service . webhooks . IntegrationsServiceImpl 
 + import im . actor . server . api . rpc . service . webrtc . WebrtcServiceImpl 
 import im . actor . server . bot . { BotExtension , ActorBot } 
 import im . actor . server . cli . ActorCliService 
 import im . actor . server . db . DbExtension 
 @ @ - 231 , 6 + 232 , 9 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 system . log . debug ( " Starting FeaturesServiceImpl " ) 
 val featuresService = new FeaturesServiceImpl 
 
 + system . log . debug ( " Starting WebrtcServiceImpl " ) 
 + val webrtcService = new WebrtcServiceImpl ( ) 
 + 
 val services = Seq ( 
 authService , 
 contactsService , 
 @ @ - 248 , 7 + 252 , 8 @ @ final case class ActorServerBuilder ( defaultConfig : Config = ConfigFactory . empty ( 
 webactionsService , 
 deviceService , 
 stickerService , 
 - featuresService 
 + featuresService , 
 + webrtcService 
 ) 
 
 system . log . warning ( " Starting BotExtension " ) 
 diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala 
 index a938d50 . . 4947740 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala 
 @ @ - 49 , 6 + 49 , 10 @ @ private [ session ] class UpdatesHandler ( authId : Long ) 
 consumer ! UpdatesConsumerMessage . UnsubscribeFromGroupPresences ( groupIds . toSet ) 
 case SubscribeToSeq ( ) ⇒ 
 consumer ! UpdatesConsumerMessage . SubscribeToSeq 
 + case SubscribeToWeak ( Some ( group ) ) ⇒ 
 + consumer ! UpdatesConsumerMessage . SubscribeToWeak ( Some ( group ) ) 
 + case SubscribeToWeak ( None ) ⇒ 
 + log . error ( " Subscribe to weak is done implicitly on UpdatesConsumer start " ) 
 } 
 case OnComplete ⇒ 
 context . stop ( self )
