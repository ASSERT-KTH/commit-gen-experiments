BLEU SCORE: 0.1297464032679993

TEST MSG: feat ( js ) : Enable JsDisplay list logging
GENERATED MSG: perf + fix ( js ) : Faster dialog list rebinding without not - updating - bug

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java < nl > index 1b5c03d . . 3618a31 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java < nl > @ @ - 21 , 6 + 21 , 8 @ @ import im . actor . runtime . storage . ListEngineItem ; < nl > public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & ListEngineItem > implements JsListEngineCallback < V > , < nl > PlatformDisplayList < V > { < nl > < nl > + private static final String TAG = " JsDisplayList " ; < nl > + < nl > private final JsListEngine < V > listEngine ; < nl > private final JsEntityConverter < V , T > entityConverter ; < nl > < nl > @ @ - 223 , 12 + 225 , 17 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li < nl > } < nl > < nl > private void notifySubscribers ( ) { < nl > + Log . d ( TAG , " notifySubscribers " ) ; < nl > if ( isOverlaysSupported ) { < nl > + Log . d ( TAG , " notifySubscribers : isOverlaysSupported " ) ; < nl > for ( JsDisplayListCallback < T > callback : callbacks ) { < nl > + Log . d ( TAG , " notifySubscribers : isOverlaysSupported : item " ) ; < nl > callback . onCollectionChanged ( jsValues , jsOverlays ) ; < nl > } < nl > } else { < nl > + Log . d ( TAG , " notifySubscribers : isOverlaysSupported : false " ) ; < nl > for ( JsDisplayListCallback < T > callback : callbacks ) { < nl > + Log . d ( TAG , " notifySubscribers : isOverlaysSupported : item " ) ; < nl > callback . onCollectionChanged ( jsValues , null ) ; < nl > } < nl > }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > index 2b34e7f . . 4472625 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > @ @ - 362 , 43 + 362 , 55 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > < nl > @ Override < nl > public void onFileLoaded ( HashSet < Long > fileId ) { < nl > + < nl > + / / < nl > + / / Dialogs List < nl > + / / < nl > if ( dialogsList ! = null ) { < nl > + dialogsList . startReconverting ( ) ; < nl > for ( Dialog dialog : dialogsList . getRawItems ( ) ) { < nl > if ( checkAvatar ( dialog . getDialogAvatar ( ) , fileId ) ) { < nl > dialogsList . forceReconvert ( dialog . getEngineId ( ) ) ; < nl > } < nl > } < nl > + dialogsList . stopReconverting ( ) ; < nl > + } < nl > + < nl > + / / < nl > + / / Grouped Dialogs < nl > + / / < nl > + if ( dialogsGroupedList ! = null ) { < nl > + / / TODO : Implement < nl > } < nl > < nl > if ( contactsList ! = null ) { < nl > + contactsList . startReconverting ( ) ; < nl > for ( Contact contact : contactsList . getRawItems ( ) ) { < nl > if ( checkAvatar ( contact . getAvatar ( ) , fileId ) ) { < nl > contactsList . forceReconvert ( contact . getEngineId ( ) ) ; < nl > } < nl > } < nl > + contactsList . stopReconverting ( ) ; < nl > } < nl > < nl > for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { < nl > - boolean founded = false ; < nl > + messageList . startReconverting ( ) ; < nl > for ( Message message : messageList . getRawItems ( ) ) { < nl > UserVM user = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( message . getSenderId ( ) ) ; < nl > if ( checkAvatar ( user . getAvatar ( ) . get ( ) , fileId ) ) { < nl > - founded = true ; < nl > - break ; < nl > + messageList . forceReconvert ( message . getEngineId ( ) ) ; < nl > + continue ; < nl > } < nl > if ( message . getContent ( ) instanceof DocumentContent ) { < nl > DocumentContent doc = ( DocumentContent ) message . getContent ( ) ; < nl > if ( doc . getSource ( ) instanceof FileRemoteSource ) { < nl > if ( fileId . contains ( ( ( FileRemoteSource ) doc . getSource ( ) ) . getFileReference ( ) . getFileId ( ) ) ) { < nl > - founded = true ; < nl > - break ; < nl > + messageList . forceReconvert ( message . getEngineId ( ) ) ; < nl > } < nl > } < nl > } < nl > } < nl > - if ( founded ) { < nl > - messageList . forceReconvert ( ) ; < nl > - } < nl > + messageList . stopReconverting ( ) ; < nl > } < nl > < nl > for ( JsBindedValue < JsUser > u : users . values ( ) ) { < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java < nl > index 52322d7 . . 14e0386 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java < nl > @ @ - 28 , 6 + 28 , 7 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li < nl > < nl > private ArrayList < V > values ; < nl > private JsArray < T > jsValues ; < nl > + private boolean isForceReconverted = false ; < nl > < nl > public JsDisplayList ( JsListEngine < V > listEngine , JsEntityConverter < V , T > entityConverter ) { < nl > this . listEngine = listEngine ; < nl > @ @ - 40 , 7 + 41 , 7 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li < nl > for ( long rid : rids ) { < nl > V item = listEngine . getValue ( rid ) ; < nl > if ( item = = null ) { < nl > - Log . w ( " AngularList " , " Unable to find item # " + rid ) ; < nl > + Log . w ( " JsDisplayList " , " Unable to find item # " + rid ) ; < nl > continue ; < nl > } < nl > values . add ( item ) ; < nl > @ @ - 75 , 23 + 76 , 25 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li < nl > callbacksInverted . remove ( callback ) ; < nl > } < nl > < nl > + public void startReconverting ( ) { < nl > + isForceReconverted = false ; < nl > + } < nl > + < nl > public void forceReconvert ( long id ) { < nl > for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > if ( values . get ( i ) . getEngineId ( ) = = id ) { < nl > remove ( jsValues , i ) ; < nl > insert ( jsValues , i , entityConverter . convert ( values . get ( i ) ) ) ; < nl > + isForceReconverted = true ; < nl > } < nl > } < nl > } < nl > < nl > - public void forceReconvert ( ) { < nl > - clear ( jsValues ) ; < nl > - < nl > - for ( int i = 0 ; i < values . size ( ) ; i + + ) { < nl > - jsValues . push ( entityConverter . convert ( values . get ( i ) ) ) ; < nl > + public void stopReconverting ( ) { < nl > + if ( isForceReconverted ) { < nl > + isForceReconverted = false ; < nl > + notifySubscribers ( ) ; < nl > } < nl > - < nl > - notifySubscribers ( ) ; < nl > } < nl > < nl > public ArrayList < V > getRawItems ( ) {

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java 
 index 1b5c03d . . 3618a31 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java 
 @ @ - 21 , 6 + 21 , 8 @ @ import im . actor . runtime . storage . ListEngineItem ; 
 public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & ListEngineItem > implements JsListEngineCallback < V > , 
 PlatformDisplayList < V > { 
 
 + private static final String TAG = " JsDisplayList " ; 
 + 
 private final JsListEngine < V > listEngine ; 
 private final JsEntityConverter < V , T > entityConverter ; 
 
 @ @ - 223 , 12 + 225 , 17 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li 
 } 
 
 private void notifySubscribers ( ) { 
 + Log . d ( TAG , " notifySubscribers " ) ; 
 if ( isOverlaysSupported ) { 
 + Log . d ( TAG , " notifySubscribers : isOverlaysSupported " ) ; 
 for ( JsDisplayListCallback < T > callback : callbacks ) { 
 + Log . d ( TAG , " notifySubscribers : isOverlaysSupported : item " ) ; 
 callback . onCollectionChanged ( jsValues , jsOverlays ) ; 
 } 
 } else { 
 + Log . d ( TAG , " notifySubscribers : isOverlaysSupported : false " ) ; 
 for ( JsDisplayListCallback < T > callback : callbacks ) { 
 + Log . d ( TAG , " notifySubscribers : isOverlaysSupported : item " ) ; 
 callback . onCollectionChanged ( jsValues , null ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 index 2b34e7f . . 4472625 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 @ @ - 362 , 43 + 362 , 55 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 
 @ Override 
 public void onFileLoaded ( HashSet < Long > fileId ) { 
 + 
 + / / 
 + / / Dialogs List 
 + / / 
 if ( dialogsList ! = null ) { 
 + dialogsList . startReconverting ( ) ; 
 for ( Dialog dialog : dialogsList . getRawItems ( ) ) { 
 if ( checkAvatar ( dialog . getDialogAvatar ( ) , fileId ) ) { 
 dialogsList . forceReconvert ( dialog . getEngineId ( ) ) ; 
 } 
 } 
 + dialogsList . stopReconverting ( ) ; 
 + } 
 + 
 + / / 
 + / / Grouped Dialogs 
 + / / 
 + if ( dialogsGroupedList ! = null ) { 
 + / / TODO : Implement 
 } 
 
 if ( contactsList ! = null ) { 
 + contactsList . startReconverting ( ) ; 
 for ( Contact contact : contactsList . getRawItems ( ) ) { 
 if ( checkAvatar ( contact . getAvatar ( ) , fileId ) ) { 
 contactsList . forceReconvert ( contact . getEngineId ( ) ) ; 
 } 
 } 
 + contactsList . stopReconverting ( ) ; 
 } 
 
 for ( JsDisplayList < JsMessage , Message > messageList : messageLists . values ( ) ) { 
 - boolean founded = false ; 
 + messageList . startReconverting ( ) ; 
 for ( Message message : messageList . getRawItems ( ) ) { 
 UserVM user = context ( ) . getUsersModule ( ) . getUsers ( ) . get ( message . getSenderId ( ) ) ; 
 if ( checkAvatar ( user . getAvatar ( ) . get ( ) , fileId ) ) { 
 - founded = true ; 
 - break ; 
 + messageList . forceReconvert ( message . getEngineId ( ) ) ; 
 + continue ; 
 } 
 if ( message . getContent ( ) instanceof DocumentContent ) { 
 DocumentContent doc = ( DocumentContent ) message . getContent ( ) ; 
 if ( doc . getSource ( ) instanceof FileRemoteSource ) { 
 if ( fileId . contains ( ( ( FileRemoteSource ) doc . getSource ( ) ) . getFileReference ( ) . getFileId ( ) ) ) { 
 - founded = true ; 
 - break ; 
 + messageList . forceReconvert ( message . getEngineId ( ) ) ; 
 } 
 } 
 } 
 } 
 - if ( founded ) { 
 - messageList . forceReconvert ( ) ; 
 - } 
 + messageList . stopReconverting ( ) ; 
 } 
 
 for ( JsBindedValue < JsUser > u : users . values ( ) ) { 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java 
 index 52322d7 . . 14e0386 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / mvvm / JsDisplayList . java 
 @ @ - 28 , 6 + 28 , 7 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li 
 
 private ArrayList < V > values ; 
 private JsArray < T > jsValues ; 
 + private boolean isForceReconverted = false ; 
 
 public JsDisplayList ( JsListEngine < V > listEngine , JsEntityConverter < V , T > entityConverter ) { 
 this . listEngine = listEngine ; 
 @ @ - 40 , 7 + 41 , 7 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li 
 for ( long rid : rids ) { 
 V item = listEngine . getValue ( rid ) ; 
 if ( item = = null ) { 
 - Log . w ( " AngularList " , " Unable to find item # " + rid ) ; 
 + Log . w ( " JsDisplayList " , " Unable to find item # " + rid ) ; 
 continue ; 
 } 
 values . add ( item ) ; 
 @ @ - 75 , 23 + 76 , 25 @ @ public class JsDisplayList < T extends JavaScriptObject , V extends BserObject & Li 
 callbacksInverted . remove ( callback ) ; 
 } 
 
 + public void startReconverting ( ) { 
 + isForceReconverted = false ; 
 + } 
 + 
 public void forceReconvert ( long id ) { 
 for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 if ( values . get ( i ) . getEngineId ( ) = = id ) { 
 remove ( jsValues , i ) ; 
 insert ( jsValues , i , entityConverter . convert ( values . get ( i ) ) ) ; 
 + isForceReconverted = true ; 
 } 
 } 
 } 
 
 - public void forceReconvert ( ) { 
 - clear ( jsValues ) ; 
 - 
 - for ( int i = 0 ; i < values . size ( ) ; i + + ) { 
 - jsValues . push ( entityConverter . convert ( values . get ( i ) ) ) ; 
 + public void stopReconverting ( ) { 
 + if ( isForceReconverted ) { 
 + isForceReconverted = false ; 
 + notifySubscribers ( ) ; 
 } 
 - 
 - notifySubscribers ( ) ; 
 } 
 
 public ArrayList < V > getRawItems ( ) {
