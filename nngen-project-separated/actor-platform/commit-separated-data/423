BLEU SCORE: 0.23462350320528

TEST MSG: ref ( js ) : blocked users to new promise converter
GENERATED MSG: feat ( js ) : More search methods

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 9191a39 . . 33f28b7 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 643 , 42 + 643 , 12 @ @ public class JsFacade implements Exportable { < nl > < nl > @ UsedByApp < nl > public JsPromise blockUser ( final int uid ) { < nl > - return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > - @ Override < nl > - public void execute ( ) { < nl > - messenger . blockUser ( uid ) . then ( new Consumer < im . actor . runtime . actors . messages . Void > ( ) { < nl > - @ Override < nl > - public void apply ( Void aVoid ) { < nl > - resolve ( ) ; < nl > - } < nl > - } ) . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - reject ( ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > + return JsPromise . from ( messenger . blockUser ( uid ) ) ; < nl > } < nl > < nl > @ UsedByApp < nl > public JsPromise unblockUser ( final int uid ) { < nl > - return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > - @ Override < nl > - public void execute ( ) { < nl > - messenger . unblockUser ( uid ) . then ( new Consumer < im . actor . runtime . actors . messages . Void > ( ) { < nl > - @ Override < nl > - public void apply ( Void aVoid ) { < nl > - resolve ( ) ; < nl > - } < nl > - } ) . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - reject ( ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > + return JsPromise . from ( messenger . unblockUser ( uid ) ) ; < nl > } < nl > < nl > / / Groups < nl > @ @ - 1030 , 26 + 1000 , 15 @ @ public class JsFacade implements Exportable { < nl > < nl > @ UsedByApp < nl > public JsPromise loadBlockedUsers ( ) { < nl > - return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > - @ Override < nl > - public void execute ( ) { < nl > - messenger . loadBlockedUsers ( ) . then ( new Consumer < List < User > > ( ) { < nl > - @ Override < nl > - public void apply ( List < User > users ) { < nl > - JsArray < JsUser > res = JsArray . createArray ( ) . cast ( ) ; < nl > - for ( User u : users ) { < nl > - res . push ( getUser ( u . getUid ( ) ) ) ; < nl > - } < nl > - resolve ( res ) ; < nl > - } < nl > - } ) . failure ( new Consumer < Exception > ( ) { < nl > - @ Override < nl > - public void apply ( Exception e ) { < nl > - reject ( e ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) ; < nl > + return JsPromise . from ( messenger . loadBlockedUsers ( ) < nl > + . map ( users - > { < nl > + JsArray < JsUser > res = JsArray . createArray ( ) . cast ( ) ; < nl > + for ( User u : users ) { < nl > + res . push ( getUser ( u . getUid ( ) ) ) ; < nl > + } < nl > + return res ; < nl > + } ) < nl > + ) ; < nl > } < nl > < nl > @ UsedByApp < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromise . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromise . java < nl > index a16de67 . . 759894c 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromise . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromise . java < nl > @ @ - 6 , 8 + 6 , 21 @ @ package im . actor . runtime . js . utils ; < nl > < nl > import com . google . gwt . core . client . JavaScriptObject ; < nl > < nl > + import im . actor . runtime . promise . Promise ; < nl > + < nl > public class JsPromise extends JavaScriptObject { < nl > < nl > + public static < T > JsPromise from ( Promise < T > promise ) { < nl > + create ( new JsPromiseExecutor ( ) { < nl > + @ Override < nl > + public void execute ( ) { < nl > + promise . then ( this : : resolve ) < nl > + . failure ( this : : reject ) ; < nl > + } < nl > + } ) ; < nl > + return null ; < nl > + } < nl > + < nl > public static native JsPromise create ( JsPromiseExecutor executor ) / * - { < nl > var _ executor = executor < nl > return new Promise ( function ( resolve , reject ) {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 48e83eb . . 6d7fc78 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 755 , 15 + 755 , 67 @ @ public class JsFacade implements Exportable { < nl > messenger . findTextMessages ( peer . convert ( ) , query ) . start ( new CommandCallback < List < MessageSearchEntity > > ( ) { < nl > @ Override < nl > public void onResult ( List < MessageSearchEntity > res ) { < nl > - JsArray < JsMessageSearchEntity > jsRes = JsArray . createArray ( ) . cast ( ) ; < nl > - for ( MessageSearchEntity e : res ) { < nl > - jsRes . push ( JsMessageSearchEntity . create ( e . getRid ( ) + " " , < nl > - messenger . buildPeerInfo ( Peer . user ( e . getSenderId ( ) ) ) , < nl > - messenger . getFormatter ( ) . formatDate ( e . getDate ( ) ) , < nl > - JsContent . createContent ( e . getContent ( ) , < nl > - e . getSenderId ( ) ) ) ) ; < nl > - } < nl > - resolve ( jsRes ) ; < nl > + resolve ( convertSearchRes ( res ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + Log . d ( TAG , " findAllText : error " ) ; < nl > + reject ( e . getMessage ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + public JsPromise findAllPhotos ( final JsPeer peer ) { < nl > + return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > + @ Override < nl > + public void execute ( ) { < nl > + messenger . findAllPhotos ( peer . convert ( ) ) . start ( new CommandCallback < List < MessageSearchEntity > > ( ) { < nl > + @ Override < nl > + public void onResult ( List < MessageSearchEntity > res ) { < nl > + resolve ( convertSearchRes ( res ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + Log . d ( TAG , " findAllText : error " ) ; < nl > + reject ( e . getMessage ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + public JsPromise findAllDocs ( final JsPeer peer ) { < nl > + return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > + @ Override < nl > + public void execute ( ) { < nl > + messenger . findAllDocs ( peer . convert ( ) ) . start ( new CommandCallback < List < MessageSearchEntity > > ( ) { < nl > + @ Override < nl > + public void onResult ( List < MessageSearchEntity > res ) { < nl > + resolve ( convertSearchRes ( res ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + Log . d ( TAG , " findAllText : error " ) ; < nl > + reject ( e . getMessage ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + public JsPromise findAllLinks ( final JsPeer peer ) { < nl > + return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > + @ Override < nl > + public void execute ( ) { < nl > + messenger . findAllLinks ( peer . convert ( ) ) . start ( new CommandCallback < List < MessageSearchEntity > > ( ) { < nl > + @ Override < nl > + public void onResult ( List < MessageSearchEntity > res ) { < nl > + resolve ( convertSearchRes ( res ) ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 776 , 6 + 828 , 18 @ @ public class JsFacade implements Exportable { < nl > } ) ; < nl > } < nl > < nl > + private JsArray < JsMessageSearchEntity > convertSearchRes ( List < MessageSearchEntity > res ) { < nl > + JsArray < JsMessageSearchEntity > jsRes = JsArray . createArray ( ) . cast ( ) ; < nl > + for ( MessageSearchEntity e : res ) { < nl > + jsRes . push ( JsMessageSearchEntity . create ( e . getRid ( ) + " " , < nl > + messenger . buildPeerInfo ( Peer . user ( e . getSenderId ( ) ) ) , < nl > + messenger . getFormatter ( ) . formatDate ( e . getDate ( ) ) , < nl > + JsContent . createContent ( e . getContent ( ) , < nl > + e . getSenderId ( ) ) ) ) ; < nl > + } < nl > + return jsRes ; < nl > + } < nl > + < nl > public JsPromise findGroups ( ) { < nl > return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > @ Override

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 9191a39 . . 33f28b7 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 643 , 42 + 643 , 12 @ @ public class JsFacade implements Exportable { 
 
 @ UsedByApp 
 public JsPromise blockUser ( final int uid ) { 
 - return JsPromise . create ( new JsPromiseExecutor ( ) { 
 - @ Override 
 - public void execute ( ) { 
 - messenger . blockUser ( uid ) . then ( new Consumer < im . actor . runtime . actors . messages . Void > ( ) { 
 - @ Override 
 - public void apply ( Void aVoid ) { 
 - resolve ( ) ; 
 - } 
 - } ) . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - reject ( ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 + return JsPromise . from ( messenger . blockUser ( uid ) ) ; 
 } 
 
 @ UsedByApp 
 public JsPromise unblockUser ( final int uid ) { 
 - return JsPromise . create ( new JsPromiseExecutor ( ) { 
 - @ Override 
 - public void execute ( ) { 
 - messenger . unblockUser ( uid ) . then ( new Consumer < im . actor . runtime . actors . messages . Void > ( ) { 
 - @ Override 
 - public void apply ( Void aVoid ) { 
 - resolve ( ) ; 
 - } 
 - } ) . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - reject ( ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 + return JsPromise . from ( messenger . unblockUser ( uid ) ) ; 
 } 
 
 / / Groups 
 @ @ - 1030 , 26 + 1000 , 15 @ @ public class JsFacade implements Exportable { 
 
 @ UsedByApp 
 public JsPromise loadBlockedUsers ( ) { 
 - return JsPromise . create ( new JsPromiseExecutor ( ) { 
 - @ Override 
 - public void execute ( ) { 
 - messenger . loadBlockedUsers ( ) . then ( new Consumer < List < User > > ( ) { 
 - @ Override 
 - public void apply ( List < User > users ) { 
 - JsArray < JsUser > res = JsArray . createArray ( ) . cast ( ) ; 
 - for ( User u : users ) { 
 - res . push ( getUser ( u . getUid ( ) ) ) ; 
 - } 
 - resolve ( res ) ; 
 - } 
 - } ) . failure ( new Consumer < Exception > ( ) { 
 - @ Override 
 - public void apply ( Exception e ) { 
 - reject ( e ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) ; 
 + return JsPromise . from ( messenger . loadBlockedUsers ( ) 
 + . map ( users - > { 
 + JsArray < JsUser > res = JsArray . createArray ( ) . cast ( ) ; 
 + for ( User u : users ) { 
 + res . push ( getUser ( u . getUid ( ) ) ) ; 
 + } 
 + return res ; 
 + } ) 
 + ) ; 
 } 
 
 @ UsedByApp 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromise . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromise . java 
 index a16de67 . . 759894c 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromise . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / utils / JsPromise . java 
 @ @ - 6 , 8 + 6 , 21 @ @ package im . actor . runtime . js . utils ; 
 
 import com . google . gwt . core . client . JavaScriptObject ; 
 
 + import im . actor . runtime . promise . Promise ; 
 + 
 public class JsPromise extends JavaScriptObject { 
 
 + public static < T > JsPromise from ( Promise < T > promise ) { 
 + create ( new JsPromiseExecutor ( ) { 
 + @ Override 
 + public void execute ( ) { 
 + promise . then ( this : : resolve ) 
 + . failure ( this : : reject ) ; 
 + } 
 + } ) ; 
 + return null ; 
 + } 
 + 
 public static native JsPromise create ( JsPromiseExecutor executor ) / * - { 
 var _ executor = executor 
 return new Promise ( function ( resolve , reject ) {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 48e83eb . . 6d7fc78 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 755 , 15 + 755 , 67 @ @ public class JsFacade implements Exportable { 
 messenger . findTextMessages ( peer . convert ( ) , query ) . start ( new CommandCallback < List < MessageSearchEntity > > ( ) { 
 @ Override 
 public void onResult ( List < MessageSearchEntity > res ) { 
 - JsArray < JsMessageSearchEntity > jsRes = JsArray . createArray ( ) . cast ( ) ; 
 - for ( MessageSearchEntity e : res ) { 
 - jsRes . push ( JsMessageSearchEntity . create ( e . getRid ( ) + " " , 
 - messenger . buildPeerInfo ( Peer . user ( e . getSenderId ( ) ) ) , 
 - messenger . getFormatter ( ) . formatDate ( e . getDate ( ) ) , 
 - JsContent . createContent ( e . getContent ( ) , 
 - e . getSenderId ( ) ) ) ) ; 
 - } 
 - resolve ( jsRes ) ; 
 + resolve ( convertSearchRes ( res ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + Log . d ( TAG , " findAllText : error " ) ; 
 + reject ( e . getMessage ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + public JsPromise findAllPhotos ( final JsPeer peer ) { 
 + return JsPromise . create ( new JsPromiseExecutor ( ) { 
 + @ Override 
 + public void execute ( ) { 
 + messenger . findAllPhotos ( peer . convert ( ) ) . start ( new CommandCallback < List < MessageSearchEntity > > ( ) { 
 + @ Override 
 + public void onResult ( List < MessageSearchEntity > res ) { 
 + resolve ( convertSearchRes ( res ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + Log . d ( TAG , " findAllText : error " ) ; 
 + reject ( e . getMessage ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + public JsPromise findAllDocs ( final JsPeer peer ) { 
 + return JsPromise . create ( new JsPromiseExecutor ( ) { 
 + @ Override 
 + public void execute ( ) { 
 + messenger . findAllDocs ( peer . convert ( ) ) . start ( new CommandCallback < List < MessageSearchEntity > > ( ) { 
 + @ Override 
 + public void onResult ( List < MessageSearchEntity > res ) { 
 + resolve ( convertSearchRes ( res ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + Log . d ( TAG , " findAllText : error " ) ; 
 + reject ( e . getMessage ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + public JsPromise findAllLinks ( final JsPeer peer ) { 
 + return JsPromise . create ( new JsPromiseExecutor ( ) { 
 + @ Override 
 + public void execute ( ) { 
 + messenger . findAllLinks ( peer . convert ( ) ) . start ( new CommandCallback < List < MessageSearchEntity > > ( ) { 
 + @ Override 
 + public void onResult ( List < MessageSearchEntity > res ) { 
 + resolve ( convertSearchRes ( res ) ) ; 
 } 
 
 @ Override 
 @ @ - 776 , 6 + 828 , 18 @ @ public class JsFacade implements Exportable { 
 } ) ; 
 } 
 
 + private JsArray < JsMessageSearchEntity > convertSearchRes ( List < MessageSearchEntity > res ) { 
 + JsArray < JsMessageSearchEntity > jsRes = JsArray . createArray ( ) . cast ( ) ; 
 + for ( MessageSearchEntity e : res ) { 
 + jsRes . push ( JsMessageSearchEntity . create ( e . getRid ( ) + " " , 
 + messenger . buildPeerInfo ( Peer . user ( e . getSenderId ( ) ) ) , 
 + messenger . getFormatter ( ) . formatDate ( e . getDate ( ) ) , 
 + JsContent . createContent ( e . getContent ( ) , 
 + e . getSenderId ( ) ) ) ) ; 
 + } 
 + return jsRes ; 
 + } 
 + 
 public JsPromise findGroups ( ) { 
 return JsPromise . create ( new JsPromiseExecutor ( ) { 
 @ Override
