BLEU SCORE: 0.46713797772820004

TEST MSG: feat ( core ) : Remove online states logging
GENERATED MSG: feat ( core ) : Added logging to PresenceActor

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java < nl > index 3a77fb8 . . 0a4a45f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java < nl > @ @ - 49 , 7 + 49 , 7 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { < nl > < nl > private static final int ONLINE _ TIMEOUT = 5 * 60 * 1000 ; < nl > < nl > - private static final String TAG = " PresenceActor " ; < nl > + / / private static final String TAG = " PresenceActor " ; < nl > < nl > private HashMap < Integer , Long > lastUidState = new HashMap < > ( ) ; < nl > private HashMap < Integer , Long > lastGidState = new HashMap < > ( ) ; < nl > @ @ - 74 , 13 + 74 , 13 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { < nl > < nl > @ Verified < nl > private void onUserOnline ( int uid , long updateDate ) { < nl > - Log . d ( TAG , " onUserOnline # " + uid + " at " + updateDate ) ; < nl > + / / Log . d ( TAG , " onUserOnline # " + uid + " at " + updateDate ) ; < nl > if ( lastUidState . containsKey ( uid ) & & lastUidState . get ( uid ) > = updateDate ) { < nl > - Log . d ( TAG , " onUserOnline : ignored - too old " ) ; < nl > + / / Log . d ( TAG , " onUserOnline : ignored - too old " ) ; < nl > return ; < nl > } < nl > lastUidState . put ( uid , updateDate ) ; < nl > - Log . d ( TAG , " onUserOnline : updated " ) ; < nl > + / / Log . d ( TAG , " onUserOnline : updated " ) ; < nl > < nl > UserVM vm = getUserVM ( uid ) ; < nl > if ( vm ! = null ) { < nl > @ @ - 97 , 13 + 97 , 13 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { < nl > < nl > @ Verified < nl > private void onUserOffline ( int uid , long updateDate ) { < nl > - Log . d ( TAG , " onUserOffline # " + uid + " at " + updateDate ) ; < nl > + / / Log . d ( TAG , " onUserOffline # " + uid + " at " + updateDate ) ; < nl > if ( lastUidState . containsKey ( uid ) & & lastUidState . get ( uid ) > = updateDate ) { < nl > - Log . d ( TAG , " onUserOffline : ignored - too old " ) ; < nl > + / / Log . d ( TAG , " onUserOffline : ignored - too old " ) ; < nl > return ; < nl > } < nl > lastUidState . put ( uid , updateDate ) ; < nl > - Log . d ( TAG , " onUserOffline : updated " ) ; < nl > + / / Log . d ( TAG , " onUserOffline : updated " ) ; < nl > < nl > UserVM vm = getUserVM ( uid ) ; < nl > if ( vm ! = null ) { < nl > @ @ - 118 , 13 + 118 , 13 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { < nl > < nl > @ Verified < nl > private void onUserLastSeen ( int uid , int date , long updateDate ) { < nl > - Log . d ( TAG , " onUserLastSeen # " + uid + " at " + date + " at " + updateDate ) ; < nl > + / / Log . d ( TAG , " onUserLastSeen # " + uid + " at " + date + " at " + updateDate ) ; < nl > if ( lastUidState . containsKey ( uid ) & & lastUidState . get ( uid ) > = updateDate ) { < nl > - Log . d ( TAG , " onUserLastSeen : ignored - too old " ) ; < nl > + / / Log . d ( TAG , " onUserLastSeen : ignored - too old " ) ; < nl > return ; < nl > } < nl > lastUidState . put ( uid , updateDate ) ; < nl > - Log . d ( TAG , " onUserLastSeen : updated " ) ; < nl > + / / Log . d ( TAG , " onUserLastSeen : updated " ) ; < nl > < nl > UserVM vm = getUserVM ( uid ) ; < nl > if ( vm ! = null ) { < nl > @ @ - 138 , 13 + 138 , 13 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { < nl > } < nl > < nl > private void onUserGoesOffline ( int uid , int date , long updateDate ) { < nl > - Log . d ( TAG , " onUserGoesOffline # " + uid + " at " + date + " at " + updateDate ) ; < nl > + / / Log . d ( TAG , " onUserGoesOffline # " + uid + " at " + date + " at " + updateDate ) ; < nl > if ( lastUidState . containsKey ( uid ) & & lastUidState . get ( uid ) > = updateDate ) { < nl > - Log . d ( TAG , " onUserGoesOffline : ignored - too old " ) ; < nl > + / / Log . d ( TAG , " onUserGoesOffline : ignored - too old " ) ; < nl > return ; < nl > } < nl > lastUidState . put ( uid , updateDate ) ; < nl > - Log . d ( TAG , " onUserGoesOffline : updated " ) ; < nl > + / / Log . d ( TAG , " onUserGoesOffline : updated " ) ; < nl > < nl > UserVM vm = getUserVM ( uid ) ; < nl > if ( vm ! = null ) { < nl > @ @ - 159 , 13 + 159 , 13 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { < nl > < nl > @ Verified < nl > private void onGroupOnline ( int gid , int count , long updateDate ) { < nl > - Log . d ( TAG , " onGroupOnline # " + gid + " " + count + " at " + updateDate ) ; < nl > + / / Log . d ( TAG , " onGroupOnline # " + gid + " " + count + " at " + updateDate ) ; < nl > if ( lastGidState . containsKey ( gid ) & & lastGidState . get ( gid ) > = updateDate ) { < nl > - Log . d ( TAG , " onGroupOnline : ignored - too old " ) ; < nl > + / / Log . d ( TAG , " onGroupOnline : ignored - too old " ) ; < nl > return ; < nl > } < nl > lastGidState . put ( gid , updateDate ) ; < nl > - Log . d ( TAG , " onGroupOnline : updated " ) ; < nl > + / / Log . d ( TAG , " onGroupOnline : updated " ) ; < nl > < nl > GroupVM vm = getGroupVM ( gid ) ; < nl > if ( vm ! = null ) { < nl > @ @ - 176 , 7 + 176 , 7 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { < nl > @ Verified < nl > private void subscribe ( Peer peer ) { < nl > < nl > - Log . d ( TAG , " subscribe : " + peer ) ; < nl > + / / Log . d ( TAG , " subscribe : " + peer ) ; < nl > < nl > if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > / / Already subscribed
NEAREST DIFF (one line): diff - - git a / actor - apps / core / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java b / actor - apps / core / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java < nl > index 0b40095 . . 8103280 100644 < nl > - - - a / actor - apps / core / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java < nl > + + + b / actor - apps / core / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java < nl > @ @ - 22 , 6 + 22 , 7 @ @ import im . actor . core . modules . utils . ModuleActor ; < nl > import im . actor . core . viewmodel . GroupVM ; < nl > import im . actor . core . viewmodel . UserPresence ; < nl > import im . actor . core . viewmodel . UserVM ; < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . actors . ActorSystem ; < nl > @ @ - 59 , 6 + 60 , 8 @ @ public class PresenceActor extends ModuleActor { < nl > < nl > private static final int ONLINE _ TIMEOUT = 5 * 60 * 1000 ; < nl > < nl > + private static final String TAG = " PresenceActor " ; < nl > + < nl > private HashMap < Integer , Long > lastUidState = new HashMap < Integer , Long > ( ) ; < nl > private HashMap < Integer , Long > lastGidState = new HashMap < Integer , Long > ( ) ; < nl > private HashSet < Integer > uids = new HashSet < Integer > ( ) ; < nl > @ @ - 70 , 10 + 73 , 13 @ @ public class PresenceActor extends ModuleActor { < nl > < nl > @ Verified < nl > private void onUserOnline ( int uid , long updateDate ) { < nl > + Log . d ( TAG , " onUserOnline # " + uid + " at " + updateDate ) ; < nl > if ( lastUidState . containsKey ( uid ) & & lastUidState . get ( uid ) > = updateDate ) { < nl > + Log . d ( TAG , " onUserOnline : ignored - too old " ) ; < nl > return ; < nl > } < nl > lastUidState . put ( uid , updateDate ) ; < nl > + Log . d ( TAG , " onUserOnline : updated " ) ; < nl > < nl > UserVM vm = getUserVM ( uid ) ; < nl > if ( vm ! = null ) { < nl > @ @ - 85 , 10 + 91 , 13 @ @ public class PresenceActor extends ModuleActor { < nl > < nl > @ Verified < nl > private void onUserOffline ( int uid , long updateDate ) { < nl > + Log . d ( TAG , " onUserOffline # " + uid + " at " + updateDate ) ; < nl > if ( lastUidState . containsKey ( uid ) & & lastUidState . get ( uid ) > = updateDate ) { < nl > + Log . d ( TAG , " onUserOffline : ignored - too old " ) ; < nl > return ; < nl > } < nl > lastUidState . put ( uid , updateDate ) ; < nl > + Log . d ( TAG , " onUserOffline : updated " ) ; < nl > < nl > UserVM vm = getUserVM ( uid ) ; < nl > if ( vm ! = null ) { < nl > @ @ - 98 , 10 + 107 , 13 @ @ public class PresenceActor extends ModuleActor { < nl > < nl > @ Verified < nl > private void onUserLastSeen ( int uid , long date , long updateDate ) { < nl > + Log . d ( TAG , " onUserLastSeen # " + uid + " at " + date + " at " + updateDate ) ; < nl > if ( lastUidState . containsKey ( uid ) & & lastUidState . get ( uid ) > = updateDate ) { < nl > + Log . d ( TAG , " onUserLastSeen : ignored - too old " ) ; < nl > return ; < nl > } < nl > lastUidState . put ( uid , updateDate ) ; < nl > + Log . d ( TAG , " onUserLastSeen : updated " ) ; < nl > < nl > UserVM vm = getUserVM ( uid ) ; < nl > if ( vm ! = null ) { < nl > @ @ - 111 , 10 + 123 , 13 @ @ public class PresenceActor extends ModuleActor { < nl > < nl > @ Verified < nl > private void onGroupOnline ( int gid , int count , long updateDate ) { < nl > + Log . d ( TAG , " onGroupOnline # " + gid + " " + count + " at " + updateDate ) ; < nl > if ( lastGidState . containsKey ( gid ) & & lastGidState . get ( gid ) > = updateDate ) { < nl > + Log . d ( TAG , " onGroupOnline : ignored - too old " ) ; < nl > return ; < nl > } < nl > lastGidState . put ( gid , updateDate ) ; < nl > + Log . d ( TAG , " onGroupOnline : updated " ) ; < nl > < nl > GroupVM vm = getGroupVM ( gid ) ; < nl > if ( vm ! = null ) {

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java 
 index 3a77fb8 . . 0a4a45f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / presence / PresenceActor . java 
 @ @ - 49 , 7 + 49 , 7 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { 
 
 private static final int ONLINE _ TIMEOUT = 5 * 60 * 1000 ; 
 
 - private static final String TAG = " PresenceActor " ; 
 + / / private static final String TAG = " PresenceActor " ; 
 
 private HashMap < Integer , Long > lastUidState = new HashMap < > ( ) ; 
 private HashMap < Integer , Long > lastGidState = new HashMap < > ( ) ; 
 @ @ - 74 , 13 + 74 , 13 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { 
 
 @ Verified 
 private void onUserOnline ( int uid , long updateDate ) { 
 - Log . d ( TAG , " onUserOnline # " + uid + " at " + updateDate ) ; 
 + / / Log . d ( TAG , " onUserOnline # " + uid + " at " + updateDate ) ; 
 if ( lastUidState . containsKey ( uid ) & & lastUidState . get ( uid ) > = updateDate ) { 
 - Log . d ( TAG , " onUserOnline : ignored - too old " ) ; 
 + / / Log . d ( TAG , " onUserOnline : ignored - too old " ) ; 
 return ; 
 } 
 lastUidState . put ( uid , updateDate ) ; 
 - Log . d ( TAG , " onUserOnline : updated " ) ; 
 + / / Log . d ( TAG , " onUserOnline : updated " ) ; 
 
 UserVM vm = getUserVM ( uid ) ; 
 if ( vm ! = null ) { 
 @ @ - 97 , 13 + 97 , 13 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { 
 
 @ Verified 
 private void onUserOffline ( int uid , long updateDate ) { 
 - Log . d ( TAG , " onUserOffline # " + uid + " at " + updateDate ) ; 
 + / / Log . d ( TAG , " onUserOffline # " + uid + " at " + updateDate ) ; 
 if ( lastUidState . containsKey ( uid ) & & lastUidState . get ( uid ) > = updateDate ) { 
 - Log . d ( TAG , " onUserOffline : ignored - too old " ) ; 
 + / / Log . d ( TAG , " onUserOffline : ignored - too old " ) ; 
 return ; 
 } 
 lastUidState . put ( uid , updateDate ) ; 
 - Log . d ( TAG , " onUserOffline : updated " ) ; 
 + / / Log . d ( TAG , " onUserOffline : updated " ) ; 
 
 UserVM vm = getUserVM ( uid ) ; 
 if ( vm ! = null ) { 
 @ @ - 118 , 13 + 118 , 13 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { 
 
 @ Verified 
 private void onUserLastSeen ( int uid , int date , long updateDate ) { 
 - Log . d ( TAG , " onUserLastSeen # " + uid + " at " + date + " at " + updateDate ) ; 
 + / / Log . d ( TAG , " onUserLastSeen # " + uid + " at " + date + " at " + updateDate ) ; 
 if ( lastUidState . containsKey ( uid ) & & lastUidState . get ( uid ) > = updateDate ) { 
 - Log . d ( TAG , " onUserLastSeen : ignored - too old " ) ; 
 + / / Log . d ( TAG , " onUserLastSeen : ignored - too old " ) ; 
 return ; 
 } 
 lastUidState . put ( uid , updateDate ) ; 
 - Log . d ( TAG , " onUserLastSeen : updated " ) ; 
 + / / Log . d ( TAG , " onUserLastSeen : updated " ) ; 
 
 UserVM vm = getUserVM ( uid ) ; 
 if ( vm ! = null ) { 
 @ @ - 138 , 13 + 138 , 13 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { 
 } 
 
 private void onUserGoesOffline ( int uid , int date , long updateDate ) { 
 - Log . d ( TAG , " onUserGoesOffline # " + uid + " at " + date + " at " + updateDate ) ; 
 + / / Log . d ( TAG , " onUserGoesOffline # " + uid + " at " + date + " at " + updateDate ) ; 
 if ( lastUidState . containsKey ( uid ) & & lastUidState . get ( uid ) > = updateDate ) { 
 - Log . d ( TAG , " onUserGoesOffline : ignored - too old " ) ; 
 + / / Log . d ( TAG , " onUserGoesOffline : ignored - too old " ) ; 
 return ; 
 } 
 lastUidState . put ( uid , updateDate ) ; 
 - Log . d ( TAG , " onUserGoesOffline : updated " ) ; 
 + / / Log . d ( TAG , " onUserGoesOffline : updated " ) ; 
 
 UserVM vm = getUserVM ( uid ) ; 
 if ( vm ! = null ) { 
 @ @ - 159 , 13 + 159 , 13 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { 
 
 @ Verified 
 private void onGroupOnline ( int gid , int count , long updateDate ) { 
 - Log . d ( TAG , " onGroupOnline # " + gid + " " + count + " at " + updateDate ) ; 
 + / / Log . d ( TAG , " onGroupOnline # " + gid + " " + count + " at " + updateDate ) ; 
 if ( lastGidState . containsKey ( gid ) & & lastGidState . get ( gid ) > = updateDate ) { 
 - Log . d ( TAG , " onGroupOnline : ignored - too old " ) ; 
 + / / Log . d ( TAG , " onGroupOnline : ignored - too old " ) ; 
 return ; 
 } 
 lastGidState . put ( gid , updateDate ) ; 
 - Log . d ( TAG , " onGroupOnline : updated " ) ; 
 + / / Log . d ( TAG , " onGroupOnline : updated " ) ; 
 
 GroupVM vm = getGroupVM ( gid ) ; 
 if ( vm ! = null ) { 
 @ @ - 176 , 7 + 176 , 7 @ @ public class PresenceActor extends ModuleActor implements BusSubscriber { 
 @ Verified 
 private void subscribe ( Peer peer ) { 
 
 - Log . d ( TAG , " subscribe : " + peer ) ; 
 + / / Log . d ( TAG , " subscribe : " + peer ) ; 
 
 if ( peer . getPeerType ( ) = = PeerType . PRIVATE ) { 
 / / Already subscribed

NEAREST DIFF:
diff - - git a / actor - apps / core / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java b / actor - apps / core / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java 
 index 0b40095 . . 8103280 100644 
 - - - a / actor - apps / core / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java 
 + + + b / actor - apps / core / src / main / java / im / actor / core / modules / internal / presence / PresenceActor . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import im . actor . core . modules . utils . ModuleActor ; 
 import im . actor . core . viewmodel . GroupVM ; 
 import im . actor . core . viewmodel . UserPresence ; 
 import im . actor . core . viewmodel . UserVM ; 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . actors . ActorSystem ; 
 @ @ - 59 , 6 + 60 , 8 @ @ public class PresenceActor extends ModuleActor { 
 
 private static final int ONLINE _ TIMEOUT = 5 * 60 * 1000 ; 
 
 + private static final String TAG = " PresenceActor " ; 
 + 
 private HashMap < Integer , Long > lastUidState = new HashMap < Integer , Long > ( ) ; 
 private HashMap < Integer , Long > lastGidState = new HashMap < Integer , Long > ( ) ; 
 private HashSet < Integer > uids = new HashSet < Integer > ( ) ; 
 @ @ - 70 , 10 + 73 , 13 @ @ public class PresenceActor extends ModuleActor { 
 
 @ Verified 
 private void onUserOnline ( int uid , long updateDate ) { 
 + Log . d ( TAG , " onUserOnline # " + uid + " at " + updateDate ) ; 
 if ( lastUidState . containsKey ( uid ) & & lastUidState . get ( uid ) > = updateDate ) { 
 + Log . d ( TAG , " onUserOnline : ignored - too old " ) ; 
 return ; 
 } 
 lastUidState . put ( uid , updateDate ) ; 
 + Log . d ( TAG , " onUserOnline : updated " ) ; 
 
 UserVM vm = getUserVM ( uid ) ; 
 if ( vm ! = null ) { 
 @ @ - 85 , 10 + 91 , 13 @ @ public class PresenceActor extends ModuleActor { 
 
 @ Verified 
 private void onUserOffline ( int uid , long updateDate ) { 
 + Log . d ( TAG , " onUserOffline # " + uid + " at " + updateDate ) ; 
 if ( lastUidState . containsKey ( uid ) & & lastUidState . get ( uid ) > = updateDate ) { 
 + Log . d ( TAG , " onUserOffline : ignored - too old " ) ; 
 return ; 
 } 
 lastUidState . put ( uid , updateDate ) ; 
 + Log . d ( TAG , " onUserOffline : updated " ) ; 
 
 UserVM vm = getUserVM ( uid ) ; 
 if ( vm ! = null ) { 
 @ @ - 98 , 10 + 107 , 13 @ @ public class PresenceActor extends ModuleActor { 
 
 @ Verified 
 private void onUserLastSeen ( int uid , long date , long updateDate ) { 
 + Log . d ( TAG , " onUserLastSeen # " + uid + " at " + date + " at " + updateDate ) ; 
 if ( lastUidState . containsKey ( uid ) & & lastUidState . get ( uid ) > = updateDate ) { 
 + Log . d ( TAG , " onUserLastSeen : ignored - too old " ) ; 
 return ; 
 } 
 lastUidState . put ( uid , updateDate ) ; 
 + Log . d ( TAG , " onUserLastSeen : updated " ) ; 
 
 UserVM vm = getUserVM ( uid ) ; 
 if ( vm ! = null ) { 
 @ @ - 111 , 10 + 123 , 13 @ @ public class PresenceActor extends ModuleActor { 
 
 @ Verified 
 private void onGroupOnline ( int gid , int count , long updateDate ) { 
 + Log . d ( TAG , " onGroupOnline # " + gid + " " + count + " at " + updateDate ) ; 
 if ( lastGidState . containsKey ( gid ) & & lastGidState . get ( gid ) > = updateDate ) { 
 + Log . d ( TAG , " onGroupOnline : ignored - too old " ) ; 
 return ; 
 } 
 lastGidState . put ( gid , updateDate ) ; 
 + Log . d ( TAG , " onGroupOnline : updated " ) ; 
 
 GroupVM vm = getGroupVM ( gid ) ; 
 if ( vm ! = null ) {
