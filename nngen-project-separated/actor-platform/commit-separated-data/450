BLEU SCORE: 0.345720784641941

TEST MSG: style ( android ) : set default dialogsActionColor
GENERATED MSG: wip ( android ) : Commenting code

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > index 5c374a8 . . ee7151f 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > @ @ - 4 , 6 + 4 , 7 @ @ import android . app . Activity ; < nl > import android . app . AlarmManager ; < nl > import android . app . Application ; < nl > import android . app . PendingIntent ; < nl > + import android . content . ComponentName ; < nl > import android . content . Context ; < nl > import android . content . Intent ; < nl > import android . os . Build ; < nl > @ @ - 174 , 6 + 175 , 7 @ @ public class ActorSDK { < nl > * Call enabled < nl > * / < nl > private boolean callsEnabled = false ; < nl > + private ComponentName componentName ; < nl > < nl > private ActorSDK ( ) { < nl > endpoints = new String [ ] { < nl > @ @ - 946 , 6 + 948 , 14 @ @ public class ActorSDK { < nl > } < nl > } < nl > < nl > + public void setComponentName ( ComponentName componentName ) { < nl > + this . componentName = componentName ; < nl > + } < nl > + < nl > + public ComponentName getComponentName ( ) { < nl > + return componentName ; < nl > + } < nl > + < nl > / * * < nl > * Used for handling delegated ViewHolders < nl > * / < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java < nl > index 55aba69 . . 61eb46c 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . sdk ; < nl > < nl > import android . app . ActivityManager ; < nl > import android . app . Application ; < nl > + import android . content . ComponentName ; < nl > < nl > / * * < nl > * Implementation of Application object that handles everything required for creating and < nl > @ @ - 26 , 6 + 27 , 7 @ @ public class ActorSDKApplication extends Application { < nl > if ( ! myProcessName . endsWith ( " : actor _ push " ) ) { < nl > onConfigureActorSDK ( ) ; < nl > ActorSDK . sharedActor ( ) . createActor ( this ) ; < nl > + ActorSDK . sharedActor ( ) . setComponentName ( getPackageManager ( ) . getLaunchIntentForPackage ( getPackageName ( ) ) . getComponent ( ) ) ; < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java < nl > index 571fc3b . . c3f2d2f 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java < nl > @ @ - 58 , 7 + 58 , 7 @ @ public class ActorStyle { < nl > private int dialogsTitleColor = 0 ; < nl > private int dialogsTextColor = 0 ; < nl > private int dialogsTypingColor = 0 ; < nl > - private int dialogsActionColor = 0 ; < nl > + private int dialogsActionColor = 0xff5882ac ; < nl > < nl > private int primaryAltColor = Color . parseColor ( " # 4ca665 " ) ; < nl > private int primaryAltHoveredColor = Color . parseColor ( " # ff3d8652 " ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - android / src / main / java / me / leolin / shortcutbadger / ShortcutBadger . java b / actor - sdk / sdk - core / core / core - android / src / main / java / me / leolin / shortcutbadger / ShortcutBadger . java < nl > index ec38ba1 . . 5491931 100755 < nl > - - - a / actor - sdk / sdk - core / core / core - android / src / main / java / me / leolin / shortcutbadger / ShortcutBadger . java < nl > + + + b / actor - sdk / sdk - core / core / core - android / src / main / java / me / leolin / shortcutbadger / ShortcutBadger . java < nl > @ @ - 7 , 6 + 7 , 8 @ @ import android . content . pm . PackageManager ; < nl > import android . content . pm . ResolveInfo ; < nl > import android . os . Build ; < nl > import android . util . Log ; < nl > + < nl > + import im . actor . sdk . ActorSDK ; < nl > import me . leolin . shortcutbadger . impl . * ; < nl > < nl > import java . lang . reflect . Constructor ; < nl > @ @ - 65 , 10 + 67 , 7 @ @ public abstract class ShortcutBadger { < nl > ResolveInfo resolveInfo = context . getPackageManager ( ) . resolveActivity ( intent , PackageManager . MATCH _ DEFAULT _ ONLY ) ; < nl > String currentHomePackage = resolveInfo . activityInfo . packageName ; < nl > < nl > - if ( Build . MANUFACTURER . equalsIgnoreCase ( " Xiaomi " ) ) { < nl > - mShortcutBadger = new XiaomiHomeBadger ( context ) ; < nl > - return mShortcutBadger ; < nl > - } < nl > + < nl > < nl > for ( Class < ? extends ShortcutBadger > badger : BADGERS ) { < nl > Constructor < ? extends ShortcutBadger > constructor = badger . getConstructor ( Context . class ) ; < nl > @ @ - 78 , 6 + 77 , 10 @ @ public abstract class ShortcutBadger { < nl > break ; < nl > } < nl > } < nl > + < nl > + if ( mShortcutBadger = = null & & Build . MANUFACTURER . equalsIgnoreCase ( " Xiaomi " ) ) { < nl > + mShortcutBadger = new XiaomiHomeBadger ( context ) ; < nl > + } < nl > } catch ( Exception e ) { < nl > Log . e ( LOG _ TAG , e . getMessage ( ) , e ) ; < nl > } < nl > @ @ - 105 , 8 + 108 , 7 @ @ public abstract class ShortcutBadger { < nl > protected abstract List < String > getSupportLaunchers ( ) ; < nl > < nl > protected String getEntryActivityName ( ) { < nl > - ComponentName componentName = mContext . getPackageManager ( ) . getLaunchIntentForPackage ( mContext . getPackageName ( ) ) . getComponent ( ) ; < nl > - return componentName . getClassName ( ) ; < nl > + return ActorSDK . sharedActor ( ) . getComponentName ( ) . getClassName ( ) ; < nl > } < nl > < nl > protected String getContextPackageName ( ) {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > index 8674ea8 . . dcd2ef1 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > @ @ - 10 , 6 + 10 , 9 @ @ import android . os . Build ; < nl > < nl > import com . facebook . drawee . backends . pipeline . Fresco ; < nl > < nl > + import org . jetbrains . annotations . NotNull ; < nl > + import org . jetbrains . annotations . Nullable ; < nl > + < nl > import java . util . ArrayList ; < nl > import java . util . List ; < nl > import java . util . Locale ; < nl > @ @ - 85 , 6 + 88 , 7 @ @ public class ActorSDK { < nl > / * * < nl > * Delegate < nl > * / < nl > + @ NotNull < nl > private ActorSDKDelegate delegate = new BaseActorSDKDelegate ( ) ; < nl > / * * < nl > * ActivityManager < nl > @ @ - 175 , 15 + 179 , 9 @ @ public class ActorSDK { < nl > if ( pushId ! = 0 ) { < nl > pushManager . registerPush ( application ) ; < nl > } < nl > - } catch ( ClassNotFoundException e ) { < nl > - e . printStackTrace ( ) ; < nl > - } catch ( InstantiationException e ) { < nl > - e . printStackTrace ( ) ; < nl > - } catch ( IllegalAccessException e ) { < nl > + } catch ( Exception e ) { < nl > e . printStackTrace ( ) ; < nl > } < nl > - < nl > - < nl > } < nl > < nl > public void startMessagingApp ( Activity context ) { < nl > @ @ - 323 , 14 + 321 , 26 @ @ public class ActorSDK { < nl > this . pushId = pushId ; < nl > } < nl > < nl > + / * * < nl > + * Getting Application Delegate . < nl > + * < nl > + * @ return Application Delegate < nl > + * / < nl > + @ NotNull < nl > public ActorSDKDelegate getDelegate ( ) { < nl > return delegate ; < nl > } < nl > < nl > - public void setDelegate ( ActorSDKDelegate delegate ) { < nl > + / * * < nl > + * Setting Application Delegate . Useful for hacking various parts of SDK < nl > + * < nl > + * @ param delegate Application Delegate < nl > + * / < nl > + public void setDelegate ( @ NotNull ActorSDKDelegate delegate ) { < nl > this . delegate = delegate ; < nl > } < nl > < nl > + @ Deprecated < nl > public ActivityManager getActivityManager ( ) { < nl > return activityManager ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java < nl > index 0ddb728 . . f404f54 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java < nl > @ @ - 2 , 6 + 2 , 10 @ @ package im . actor . sdk ; < nl > < nl > import android . app . Application ; < nl > < nl > + / * * < nl > + * Implementation of Application object that handles everything required for creating and < nl > + * managing Actor SDK < nl > + * / < nl > public class ActorSDKApplication extends Application { < nl > < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java < nl > index 9c2321e . . 2488fa2 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java < nl > @ @ - 2 , 6 + 2 , 9 @ @ package im . actor . sdk ; < nl > < nl > import android . graphics . Color ; < nl > < nl > + / * * < nl > + * Actor Styling class < nl > + * / < nl > public class ActorStyle { < nl > private int toolBarColor = 0 ; < nl > private int fabColor = 0 ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java < nl > index de2e346 . . 68ec210 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java < nl > @ @ - 9 , 33 + 9 , 62 @ @ import im . actor . sdk . controllers . fragment . auth . SignPhoneFragment ; < nl > import im . actor . sdk . controllers . fragment . settings . ActorSettingsCategory ; < nl > import im . actor . sdk . intents . ActorIntent ; < nl > < nl > + / * * < nl > + * Base Implementation of Actor SDK Delegate . This class is recommended to subclass instead < nl > + * of implementing ActorSDKDelegate < nl > + * / < nl > public class BaseActorSDKDelegate implements ActorSDKDelegate { < nl > - < nl > + < nl > + / / < nl > + / / Authentication Activity < nl > + / / < nl > + < nl > + @ Deprecated < nl > @ Override < nl > - public ActorIntent getAuthStartIntent ( ) { < nl > - return null ; < nl > + public AuthState getAuthStartState ( ) { < nl > + return AuthState . AUTH _ START ; < nl > } < nl > < nl > @ Override < nl > - public ActorIntent getStartAfterLoginIntent ( ) { < nl > - return null ; < nl > + public BaseAuthFragment getSignFragment ( ) { < nl > + return new SignPhoneFragment ( ) ; < nl > } < nl > < nl > @ Override < nl > - public ActorIntent getStartIntent ( ) { < nl > + public ActorIntent getAuthStartIntent ( ) { < nl > return null ; < nl > } < nl > < nl > + / / < nl > + / / Starting Activity < nl > + / / < nl > + < nl > + / * * < nl > + * Return non - null to open specific Activity after user ' s successful log in . < nl > + * If null is specified , result of getStartIntent is used . < nl > + * < nl > + * @ return ActorIntent for activity after login < nl > + * / < nl > @ Override < nl > - public AuthState getAuthStartState ( ) { < nl > - return AuthState . AUTH _ START ; < nl > + public ActorIntent getStartAfterLoginIntent ( ) { < nl > + return null ; < nl > } < nl > < nl > + / * * < nl > + * Return non - null to open specific Activity when user is logged in . If null , SDK will launch < nl > + * standard Messaging activity with contacts and recent list < nl > + * < nl > + * @ return ActorIntent for start activity < nl > + * / < nl > @ Override < nl > - public BaseAuthFragment getSignFragment ( ) { < nl > - return new SignPhoneFragment ( ) ; < nl > + public ActorIntent getStartIntent ( ) { < nl > + return null ; < nl > } < nl > < nl > + / / < nl > + / / Hacking settings activity < nl > + / / < nl > + < nl > @ Override < nl > public View getBeforeNickSettingsView ( Context context ) { < nl > return null ; < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / intents / ActivityManager . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / intents / ActivityManager . java < nl > index dd19ba4 . . 64c5706 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / intents / ActivityManager . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / intents / ActivityManager . java < nl > @ @ - 9 , 12 + 9 , 9 @ @ import im . actor . sdk . ActorSDKDelegate ; < nl > import im . actor . sdk . controllers . activity . ActorMainActivity ; < nl > import im . actor . sdk . controllers . fragment . auth . AuthActivity ; < nl > < nl > - / * * < nl > - * Created by root on 10 / 20 / 15 . < nl > - * / < nl > + @ Deprecated < nl > public class ActivityManager { < nl > < nl > - < nl > public void startAuthActivity ( Context context ) { < nl > startAuthActivity ( context , null ) ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 index 5c374a8 . . ee7151f 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import android . app . Activity ; 
 import android . app . AlarmManager ; 
 import android . app . Application ; 
 import android . app . PendingIntent ; 
 + import android . content . ComponentName ; 
 import android . content . Context ; 
 import android . content . Intent ; 
 import android . os . Build ; 
 @ @ - 174 , 6 + 175 , 7 @ @ public class ActorSDK { 
 * Call enabled 
 * / 
 private boolean callsEnabled = false ; 
 + private ComponentName componentName ; 
 
 private ActorSDK ( ) { 
 endpoints = new String [ ] { 
 @ @ - 946 , 6 + 948 , 14 @ @ public class ActorSDK { 
 } 
 } 
 
 + public void setComponentName ( ComponentName componentName ) { 
 + this . componentName = componentName ; 
 + } 
 + 
 + public ComponentName getComponentName ( ) { 
 + return componentName ; 
 + } 
 + 
 / * * 
 * Used for handling delegated ViewHolders 
 * / 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java 
 index 55aba69 . . 61eb46c 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . sdk ; 
 
 import android . app . ActivityManager ; 
 import android . app . Application ; 
 + import android . content . ComponentName ; 
 
 / * * 
 * Implementation of Application object that handles everything required for creating and 
 @ @ - 26 , 6 + 27 , 7 @ @ public class ActorSDKApplication extends Application { 
 if ( ! myProcessName . endsWith ( " : actor _ push " ) ) { 
 onConfigureActorSDK ( ) ; 
 ActorSDK . sharedActor ( ) . createActor ( this ) ; 
 + ActorSDK . sharedActor ( ) . setComponentName ( getPackageManager ( ) . getLaunchIntentForPackage ( getPackageName ( ) ) . getComponent ( ) ) ; 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java 
 index 571fc3b . . c3f2d2f 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java 
 @ @ - 58 , 7 + 58 , 7 @ @ public class ActorStyle { 
 private int dialogsTitleColor = 0 ; 
 private int dialogsTextColor = 0 ; 
 private int dialogsTypingColor = 0 ; 
 - private int dialogsActionColor = 0 ; 
 + private int dialogsActionColor = 0xff5882ac ; 
 
 private int primaryAltColor = Color . parseColor ( " # 4ca665 " ) ; 
 private int primaryAltHoveredColor = Color . parseColor ( " # ff3d8652 " ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - android / src / main / java / me / leolin / shortcutbadger / ShortcutBadger . java b / actor - sdk / sdk - core / core / core - android / src / main / java / me / leolin / shortcutbadger / ShortcutBadger . java 
 index ec38ba1 . . 5491931 100755 
 - - - a / actor - sdk / sdk - core / core / core - android / src / main / java / me / leolin / shortcutbadger / ShortcutBadger . java 
 + + + b / actor - sdk / sdk - core / core / core - android / src / main / java / me / leolin / shortcutbadger / ShortcutBadger . java 
 @ @ - 7 , 6 + 7 , 8 @ @ import android . content . pm . PackageManager ; 
 import android . content . pm . ResolveInfo ; 
 import android . os . Build ; 
 import android . util . Log ; 
 + 
 + import im . actor . sdk . ActorSDK ; 
 import me . leolin . shortcutbadger . impl . * ; 
 
 import java . lang . reflect . Constructor ; 
 @ @ - 65 , 10 + 67 , 7 @ @ public abstract class ShortcutBadger { 
 ResolveInfo resolveInfo = context . getPackageManager ( ) . resolveActivity ( intent , PackageManager . MATCH _ DEFAULT _ ONLY ) ; 
 String currentHomePackage = resolveInfo . activityInfo . packageName ; 
 
 - if ( Build . MANUFACTURER . equalsIgnoreCase ( " Xiaomi " ) ) { 
 - mShortcutBadger = new XiaomiHomeBadger ( context ) ; 
 - return mShortcutBadger ; 
 - } 
 + 
 
 for ( Class < ? extends ShortcutBadger > badger : BADGERS ) { 
 Constructor < ? extends ShortcutBadger > constructor = badger . getConstructor ( Context . class ) ; 
 @ @ - 78 , 6 + 77 , 10 @ @ public abstract class ShortcutBadger { 
 break ; 
 } 
 } 
 + 
 + if ( mShortcutBadger = = null & & Build . MANUFACTURER . equalsIgnoreCase ( " Xiaomi " ) ) { 
 + mShortcutBadger = new XiaomiHomeBadger ( context ) ; 
 + } 
 } catch ( Exception e ) { 
 Log . e ( LOG _ TAG , e . getMessage ( ) , e ) ; 
 } 
 @ @ - 105 , 8 + 108 , 7 @ @ public abstract class ShortcutBadger { 
 protected abstract List < String > getSupportLaunchers ( ) ; 
 
 protected String getEntryActivityName ( ) { 
 - ComponentName componentName = mContext . getPackageManager ( ) . getLaunchIntentForPackage ( mContext . getPackageName ( ) ) . getComponent ( ) ; 
 - return componentName . getClassName ( ) ; 
 + return ActorSDK . sharedActor ( ) . getComponentName ( ) . getClassName ( ) ; 
 } 
 
 protected String getContextPackageName ( ) {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 index 8674ea8 . . dcd2ef1 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 @ @ - 10 , 6 + 10 , 9 @ @ import android . os . Build ; 
 
 import com . facebook . drawee . backends . pipeline . Fresco ; 
 
 + import org . jetbrains . annotations . NotNull ; 
 + import org . jetbrains . annotations . Nullable ; 
 + 
 import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . Locale ; 
 @ @ - 85 , 6 + 88 , 7 @ @ public class ActorSDK { 
 / * * 
 * Delegate 
 * / 
 + @ NotNull 
 private ActorSDKDelegate delegate = new BaseActorSDKDelegate ( ) ; 
 / * * 
 * ActivityManager 
 @ @ - 175 , 15 + 179 , 9 @ @ public class ActorSDK { 
 if ( pushId ! = 0 ) { 
 pushManager . registerPush ( application ) ; 
 } 
 - } catch ( ClassNotFoundException e ) { 
 - e . printStackTrace ( ) ; 
 - } catch ( InstantiationException e ) { 
 - e . printStackTrace ( ) ; 
 - } catch ( IllegalAccessException e ) { 
 + } catch ( Exception e ) { 
 e . printStackTrace ( ) ; 
 } 
 - 
 - 
 } 
 
 public void startMessagingApp ( Activity context ) { 
 @ @ - 323 , 14 + 321 , 26 @ @ public class ActorSDK { 
 this . pushId = pushId ; 
 } 
 
 + / * * 
 + * Getting Application Delegate . 
 + * 
 + * @ return Application Delegate 
 + * / 
 + @ NotNull 
 public ActorSDKDelegate getDelegate ( ) { 
 return delegate ; 
 } 
 
 - public void setDelegate ( ActorSDKDelegate delegate ) { 
 + / * * 
 + * Setting Application Delegate . Useful for hacking various parts of SDK 
 + * 
 + * @ param delegate Application Delegate 
 + * / 
 + public void setDelegate ( @ NotNull ActorSDKDelegate delegate ) { 
 this . delegate = delegate ; 
 } 
 
 + @ Deprecated 
 public ActivityManager getActivityManager ( ) { 
 return activityManager ; 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java 
 index 0ddb728 . . f404f54 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDKApplication . java 
 @ @ - 2 , 6 + 2 , 10 @ @ package im . actor . sdk ; 
 
 import android . app . Application ; 
 
 + / * * 
 + * Implementation of Application object that handles everything required for creating and 
 + * managing Actor SDK 
 + * / 
 public class ActorSDKApplication extends Application { 
 
 @ Override 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java 
 index 9c2321e . . 2488fa2 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorStyle . java 
 @ @ - 2 , 6 + 2 , 9 @ @ package im . actor . sdk ; 
 
 import android . graphics . Color ; 
 
 + / * * 
 + * Actor Styling class 
 + * / 
 public class ActorStyle { 
 private int toolBarColor = 0 ; 
 private int fabColor = 0 ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java 
 index de2e346 . . 68ec210 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / BaseActorSDKDelegate . java 
 @ @ - 9 , 33 + 9 , 62 @ @ import im . actor . sdk . controllers . fragment . auth . SignPhoneFragment ; 
 import im . actor . sdk . controllers . fragment . settings . ActorSettingsCategory ; 
 import im . actor . sdk . intents . ActorIntent ; 
 
 + / * * 
 + * Base Implementation of Actor SDK Delegate . This class is recommended to subclass instead 
 + * of implementing ActorSDKDelegate 
 + * / 
 public class BaseActorSDKDelegate implements ActorSDKDelegate { 
 - 
 + 
 + / / 
 + / / Authentication Activity 
 + / / 
 + 
 + @ Deprecated 
 @ Override 
 - public ActorIntent getAuthStartIntent ( ) { 
 - return null ; 
 + public AuthState getAuthStartState ( ) { 
 + return AuthState . AUTH _ START ; 
 } 
 
 @ Override 
 - public ActorIntent getStartAfterLoginIntent ( ) { 
 - return null ; 
 + public BaseAuthFragment getSignFragment ( ) { 
 + return new SignPhoneFragment ( ) ; 
 } 
 
 @ Override 
 - public ActorIntent getStartIntent ( ) { 
 + public ActorIntent getAuthStartIntent ( ) { 
 return null ; 
 } 
 
 + / / 
 + / / Starting Activity 
 + / / 
 + 
 + / * * 
 + * Return non - null to open specific Activity after user ' s successful log in . 
 + * If null is specified , result of getStartIntent is used . 
 + * 
 + * @ return ActorIntent for activity after login 
 + * / 
 @ Override 
 - public AuthState getAuthStartState ( ) { 
 - return AuthState . AUTH _ START ; 
 + public ActorIntent getStartAfterLoginIntent ( ) { 
 + return null ; 
 } 
 
 + / * * 
 + * Return non - null to open specific Activity when user is logged in . If null , SDK will launch 
 + * standard Messaging activity with contacts and recent list 
 + * 
 + * @ return ActorIntent for start activity 
 + * / 
 @ Override 
 - public BaseAuthFragment getSignFragment ( ) { 
 - return new SignPhoneFragment ( ) ; 
 + public ActorIntent getStartIntent ( ) { 
 + return null ; 
 } 
 
 + / / 
 + / / Hacking settings activity 
 + / / 
 + 
 @ Override 
 public View getBeforeNickSettingsView ( Context context ) { 
 return null ; 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / intents / ActivityManager . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / intents / ActivityManager . java 
 index dd19ba4 . . 64c5706 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / intents / ActivityManager . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / intents / ActivityManager . java 
 @ @ - 9 , 12 + 9 , 9 @ @ import im . actor . sdk . ActorSDKDelegate ; 
 import im . actor . sdk . controllers . activity . ActorMainActivity ; 
 import im . actor . sdk . controllers . fragment . auth . AuthActivity ; 
 
 - / * * 
 - * Created by root on 10 / 20 / 15 . 
 - * / 
 + @ Deprecated 
 public class ActivityManager { 
 
 - 
 public void startAuthActivity ( Context context ) { 
 startAuthActivity ( context , null ) ; 
 }
