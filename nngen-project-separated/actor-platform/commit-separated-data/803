BLEU SCORE: 0.009690650671856618

TEST MSG: Merge commit ' 3de23a7da141b6419630c1e149e65d32c73180c1 '
GENERATED MSG: fix ( server : webrtc ) : send missed call message if conversation hasn ' t started

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index d707bbc . . 13a2a4a 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import akka . http . scaladsl . util . FastFuture < nl > import akka . pattern . pipe < nl > import com . relayrides . pushy . apns . util . { ApnsPayloadBuilder , SimpleApnsPushNotification } < nl > import im . actor . api . rpc . _ < nl > - import im . actor . api . rpc . messaging . { ApiServiceExPhoneCall , ApiServiceMessage } < nl > + import im . actor . api . rpc . messaging . { ApiServiceExPhoneCall , ApiServiceExPhoneMissed , ApiServiceMessage } < nl > import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > import im . actor . api . rpc . webrtc . _ < nl > import im . actor . concurrent . { ActorStashing , FutureExt } < nl > @ @ - 147 , 7 + 147 , 10 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > def end ( ) : Unit = { < nl > val duration = ( ( System . currentTimeMillis ( ) - startTime ) / 1000 ) . toInt < nl > val randomId = ThreadLocalRandom . current ( ) . nextLong ( ) < nl > - val smsg = ApiServiceMessage ( " Call ended " , Some ( ApiServiceExPhoneCall ( duration ) ) ) < nl > + < nl > + val smsg = < nl > + if ( isConversationStarted ) ApiServiceMessage ( " Call ended " , Some ( ApiServiceExPhoneCall ( duration ) ) ) < nl > + else ApiServiceMessage ( " Missed call " , Some ( ApiServiceExPhoneMissed ) ) < nl > < nl > ( for { < nl > _ ← if ( peer . ` type ` . isPrivate ) FutureExt . ftraverse ( participants . keySet . toSeq ) ( userId ⇒ dialogExt . sendMessage (
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index d707bbc . . 13a2a4a 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import akka . http . scaladsl . util . FastFuture < nl > import akka . pattern . pipe < nl > import com . relayrides . pushy . apns . util . { ApnsPayloadBuilder , SimpleApnsPushNotification } < nl > import im . actor . api . rpc . _ < nl > - import im . actor . api . rpc . messaging . { ApiServiceExPhoneCall , ApiServiceMessage } < nl > + import im . actor . api . rpc . messaging . { ApiServiceExPhoneCall , ApiServiceExPhoneMissed , ApiServiceMessage } < nl > import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > import im . actor . api . rpc . webrtc . _ < nl > import im . actor . concurrent . { ActorStashing , FutureExt } < nl > @ @ - 147 , 7 + 147 , 10 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > def end ( ) : Unit = { < nl > val duration = ( ( System . currentTimeMillis ( ) - startTime ) / 1000 ) . toInt < nl > val randomId = ThreadLocalRandom . current ( ) . nextLong ( ) < nl > - val smsg = ApiServiceMessage ( " Call ended " , Some ( ApiServiceExPhoneCall ( duration ) ) ) < nl > + < nl > + val smsg = < nl > + if ( isConversationStarted ) ApiServiceMessage ( " Call ended " , Some ( ApiServiceExPhoneCall ( duration ) ) ) < nl > + else ApiServiceMessage ( " Missed call " , Some ( ApiServiceExPhoneMissed ) ) < nl > < nl > ( for { < nl > _ ← if ( peer . ` type ` . isPrivate ) FutureExt . ftraverse ( participants . keySet . toSeq ) ( userId ⇒ dialogExt . sendMessage (

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index d707bbc . . 13a2a4a 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import akka . http . scaladsl . util . FastFuture 
 import akka . pattern . pipe 
 import com . relayrides . pushy . apns . util . { ApnsPayloadBuilder , SimpleApnsPushNotification } 
 import im . actor . api . rpc . _ 
 - import im . actor . api . rpc . messaging . { ApiServiceExPhoneCall , ApiServiceMessage } 
 + import im . actor . api . rpc . messaging . { ApiServiceExPhoneCall , ApiServiceExPhoneMissed , ApiServiceMessage } 
 import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 import im . actor . api . rpc . webrtc . _ 
 import im . actor . concurrent . { ActorStashing , FutureExt } 
 @ @ - 147 , 7 + 147 , 10 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 def end ( ) : Unit = { 
 val duration = ( ( System . currentTimeMillis ( ) - startTime ) / 1000 ) . toInt 
 val randomId = ThreadLocalRandom . current ( ) . nextLong ( ) 
 - val smsg = ApiServiceMessage ( " Call ended " , Some ( ApiServiceExPhoneCall ( duration ) ) ) 
 + 
 + val smsg = 
 + if ( isConversationStarted ) ApiServiceMessage ( " Call ended " , Some ( ApiServiceExPhoneCall ( duration ) ) ) 
 + else ApiServiceMessage ( " Missed call " , Some ( ApiServiceExPhoneMissed ) ) 
 
 ( for { 
 _ ← if ( peer . ` type ` . isPrivate ) FutureExt . ftraverse ( participants . keySet . toSeq ) ( userId ⇒ dialogExt . sendMessage (

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index d707bbc . . 13a2a4a 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import akka . http . scaladsl . util . FastFuture 
 import akka . pattern . pipe 
 import com . relayrides . pushy . apns . util . { ApnsPayloadBuilder , SimpleApnsPushNotification } 
 import im . actor . api . rpc . _ 
 - import im . actor . api . rpc . messaging . { ApiServiceExPhoneCall , ApiServiceMessage } 
 + import im . actor . api . rpc . messaging . { ApiServiceExPhoneCall , ApiServiceExPhoneMissed , ApiServiceMessage } 
 import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 import im . actor . api . rpc . webrtc . _ 
 import im . actor . concurrent . { ActorStashing , FutureExt } 
 @ @ - 147 , 7 + 147 , 10 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 def end ( ) : Unit = { 
 val duration = ( ( System . currentTimeMillis ( ) - startTime ) / 1000 ) . toInt 
 val randomId = ThreadLocalRandom . current ( ) . nextLong ( ) 
 - val smsg = ApiServiceMessage ( " Call ended " , Some ( ApiServiceExPhoneCall ( duration ) ) ) 
 + 
 + val smsg = 
 + if ( isConversationStarted ) ApiServiceMessage ( " Call ended " , Some ( ApiServiceExPhoneCall ( duration ) ) ) 
 + else ApiServiceMessage ( " Missed call " , Some ( ApiServiceExPhoneMissed ) ) 
 
 ( for { 
 _ ← if ( peer . ` type ` . isPrivate ) FutureExt . ftraverse ( participants . keySet . toSeq ) ( userId ⇒ dialogExt . sendMessage (
