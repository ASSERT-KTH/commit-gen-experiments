BLEU SCORE: 0.13485078167116288

TEST MSG: feat ( server : groups ) : implement join group by peer method
GENERATED MSG: fix ( server : utils ) : new groups struct , llectro ad method stubs

TEST DIFF (one line): diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala < nl > index ecf61be . . e668f74 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala < nl > @ @ - 19 , 6 + 19 , 7 @ @ object GroupRpcErrors { < nl > val InvalidInviteGroup = RpcError ( 403 , " INVALID _ INVITE _ GROUP " , " Invalid group name provided ! " , false , None ) < nl > val GroupNotPublic = RpcError ( 400 , " GROUP _ IS _ NOT _ PUBLIC " , " The group is not public . " , false , None ) < nl > val CantLeaveGroup = RpcError ( 403 , " CANT _ LEAVE _ GROUP " , " You can ' t leave this group ! " , false , None ) < nl > + val CantJoinGroup = RpcError ( 403 , " CANT _ JOIN _ GROUP " , " You can ' t join this group ! " , false , None ) < nl > val InvalidShortName = RpcError ( 400 , " GROUP _ SHORT _ NAME _ INVALID " , < nl > " Invalid group short name . Valid short name should contain from 5 to 32 characters , and may consist of latin characters , numbers and underscores " , false , None ) < nl > val ShortNameTaken = RpcError ( 400 , " GROUP _ SHORT _ NAME _ TAKEN " , " This short name already belongs to other user or group , we are sorry ! " , false , None ) < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > index 88cbae7 . . c6876f8 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala < nl > @ @ - 413 , 6 + 413 , 28 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act < nl > action . value < nl > } < nl > < nl > + override def doHandleJoinGroupByPeer ( groupPeer : ApiGroupOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = < nl > + authorized ( clientData ) { implicit client ⇒ < nl > + withGroupOutPeer ( groupPeer ) { < nl > + val action = for { < nl > + apiGroup ← fromFuture ( groupExt . getApiStruct ( groupPeer . groupId , client . userId ) ) < nl > + _ ← fromBoolean ( GroupRpcErrors . CantJoinGroup ) ( canJoin ( apiGroup . permissions ) ) < nl > + joinResp ← fromFuture ( groupExt . joinGroup ( < nl > + groupId = groupPeer . groupId , < nl > + joiningUserId = client . userId , < nl > + joiningUserAuthId = client . authId , < nl > + invitingUserId = None < nl > + ) ) < nl > + SeqStateDate ( seq , state , _ ) = joinResp . _ 1 < nl > + } yield ResponseSeq ( seq , state . toByteArray ) < nl > + < nl > + action . value < nl > + } < nl > + } < nl > + < nl > + private def canJoin ( permissions : Option [ Long ] ) = < nl > + permissions exists ( p ⇒ ( p & ( 1 < < 4 ) ) ! = 0 ) / / TODO : make wrapper around permissions < nl > + < nl > override def doHandleRevokeInviteUrl ( groupPeer : ApiGroupOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseInviteUrl ] ] = < nl > authorized ( clientData ) { implicit client ⇒ < nl > withGroupOutPeer ( groupPeer ) {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / llectro / LlectroServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / llectro / LlectroServiceImpl . scala < nl > index 9012e60 . . 4ccbb7a 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / llectro / LlectroServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / llectro / LlectroServiceImpl . scala < nl > @ @ - 35 , 9 + 35 , 11 @ @ class LlectroServiceImpl ( llectro : Llectro ) ( implicit db : Database , actorSystem : A < nl > db . run ( toDBIOAction ( action ) ) < nl > } < nl > < nl > - override def jhandleNotifyAdView ( bannerId : Int , viewDuration : Int , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { < nl > + override def jhandleNotifyBannerClick ( bannerId : Int , clientData : im . actor . api . rpc . ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = < nl > + Future . successful ( Error ( CommonErrors . UnsupportedRequest ) ) < nl > + < nl > + override def jhandleNotifyBannerView ( bannerId : Int , viewDuration : Int , clientData : im . actor . api . rpc . ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = < nl > Future . successful ( Error ( CommonErrors . UnsupportedRequest ) ) < nl > - } < nl > < nl > override def jhandleDisableInterests ( interests : Vector [ Int ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { < nl > val action = < nl > diff - - git a / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala b / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala < nl > index a754459 . . 2d56258 100644 < nl > - - - a / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala < nl > + + + b / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala < nl > @ @ - 40 , 8 + 40 , 22 @ @ object GroupUtils { < nl > ( userIdsAcc : + groupUser . userId , membersAcc : + member ) < nl > } < nl > } else ( Vector . empty [ Int ] , Vector . empty [ Member ] ) < nl > - < nl > - Group ( group . id , group . accessHash , group . title , groupAvatarModelOpt map getAvatar , isMember , group . creatorUserId , members , group . createdAt . getMillis ) < nl > + Group ( < nl > + group . id , < nl > + accessHash = group . accessHash , < nl > + title = group . title , < nl > + avatar = groupAvatarModelOpt map getAvatar , < nl > + isMember = isMember , < nl > + creatorUserId = group . creatorUserId , < nl > + members = members , < nl > + createDate = group . createdAt . getMillis , < nl > + disableEdit = None , < nl > + disableInviteView = None , < nl > + disableInviteRevoke = None , < nl > + disableIntegrationView = None , < nl > + disableIntegrationsRevoke = None , < nl > + isAdmin = None < nl > + ) < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala 
 index ecf61be . . e668f74 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupRpcErrors . scala 
 @ @ - 19 , 6 + 19 , 7 @ @ object GroupRpcErrors { 
 val InvalidInviteGroup = RpcError ( 403 , " INVALID _ INVITE _ GROUP " , " Invalid group name provided ! " , false , None ) 
 val GroupNotPublic = RpcError ( 400 , " GROUP _ IS _ NOT _ PUBLIC " , " The group is not public . " , false , None ) 
 val CantLeaveGroup = RpcError ( 403 , " CANT _ LEAVE _ GROUP " , " You can ' t leave this group ! " , false , None ) 
 + val CantJoinGroup = RpcError ( 403 , " CANT _ JOIN _ GROUP " , " You can ' t join this group ! " , false , None ) 
 val InvalidShortName = RpcError ( 400 , " GROUP _ SHORT _ NAME _ INVALID " , 
 " Invalid group short name . Valid short name should contain from 5 to 32 characters , and may consist of latin characters , numbers and underscores " , false , None ) 
 val ShortNameTaken = RpcError ( 400 , " GROUP _ SHORT _ NAME _ TAKEN " , " This short name already belongs to other user or group , we are sorry ! " , false , None ) 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 index 88cbae7 . . c6876f8 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / groups / GroupsServiceImpl . scala 
 @ @ - 413 , 6 + 413 , 28 @ @ final class GroupsServiceImpl ( groupInviteConfig : GroupInviteConfig ) ( implicit act 
 action . value 
 } 
 
 + override def doHandleJoinGroupByPeer ( groupPeer : ApiGroupOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseSeq ] ] = 
 + authorized ( clientData ) { implicit client ⇒ 
 + withGroupOutPeer ( groupPeer ) { 
 + val action = for { 
 + apiGroup ← fromFuture ( groupExt . getApiStruct ( groupPeer . groupId , client . userId ) ) 
 + _ ← fromBoolean ( GroupRpcErrors . CantJoinGroup ) ( canJoin ( apiGroup . permissions ) ) 
 + joinResp ← fromFuture ( groupExt . joinGroup ( 
 + groupId = groupPeer . groupId , 
 + joiningUserId = client . userId , 
 + joiningUserAuthId = client . authId , 
 + invitingUserId = None 
 + ) ) 
 + SeqStateDate ( seq , state , _ ) = joinResp . _ 1 
 + } yield ResponseSeq ( seq , state . toByteArray ) 
 + 
 + action . value 
 + } 
 + } 
 + 
 + private def canJoin ( permissions : Option [ Long ] ) = 
 + permissions exists ( p ⇒ ( p & ( 1 < < 4 ) ) ! = 0 ) / / TODO : make wrapper around permissions 
 + 
 override def doHandleRevokeInviteUrl ( groupPeer : ApiGroupOutPeer , clientData : ClientData ) : Future [ HandlerResult [ ResponseInviteUrl ] ] = 
 authorized ( clientData ) { implicit client ⇒ 
 withGroupOutPeer ( groupPeer ) {

NEAREST DIFF:
diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / llectro / LlectroServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / llectro / LlectroServiceImpl . scala 
 index 9012e60 . . 4ccbb7a 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / llectro / LlectroServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / llectro / LlectroServiceImpl . scala 
 @ @ - 35 , 9 + 35 , 11 @ @ class LlectroServiceImpl ( llectro : Llectro ) ( implicit db : Database , actorSystem : A 
 db . run ( toDBIOAction ( action ) ) 
 } 
 
 - override def jhandleNotifyAdView ( bannerId : Int , viewDuration : Int , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { 
 + override def jhandleNotifyBannerClick ( bannerId : Int , clientData : im . actor . api . rpc . ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = 
 + Future . successful ( Error ( CommonErrors . UnsupportedRequest ) ) 
 + 
 + override def jhandleNotifyBannerView ( bannerId : Int , viewDuration : Int , clientData : im . actor . api . rpc . ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = 
 Future . successful ( Error ( CommonErrors . UnsupportedRequest ) ) 
 - } 
 
 override def jhandleDisableInterests ( interests : Vector [ Int ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { 
 val action = 
 diff - - git a / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala b / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala 
 index a754459 . . 2d56258 100644 
 - - - a / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala 
 + + + b / actor - server / actor - utils / src / main / scala / im / actor / server / util / GroupUtils . scala 
 @ @ - 40 , 8 + 40 , 22 @ @ object GroupUtils { 
 ( userIdsAcc : + groupUser . userId , membersAcc : + member ) 
 } 
 } else ( Vector . empty [ Int ] , Vector . empty [ Member ] ) 
 - 
 - Group ( group . id , group . accessHash , group . title , groupAvatarModelOpt map getAvatar , isMember , group . creatorUserId , members , group . createdAt . getMillis ) 
 + Group ( 
 + group . id , 
 + accessHash = group . accessHash , 
 + title = group . title , 
 + avatar = groupAvatarModelOpt map getAvatar , 
 + isMember = isMember , 
 + creatorUserId = group . creatorUserId , 
 + members = members , 
 + createDate = group . createdAt . getMillis , 
 + disableEdit = None , 
 + disableInviteView = None , 
 + disableInviteRevoke = None , 
 + disableIntegrationView = None , 
 + disableIntegrationsRevoke = None , 
 + isAdmin = None 
 + ) 
 } 
 }
