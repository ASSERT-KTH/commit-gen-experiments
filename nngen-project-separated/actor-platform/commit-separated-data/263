BLEU SCORE: 0.051366639095059514

TEST MSG: feat , fix ( ios + android + core ) : Fixing media state changes , updated webrtc runtime for iOS
GENERATED MSG: perf ( core + ios ) : iOS Loading performance , Download Manager performance

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > index 2cd5e59 . . 4d86af2 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java < nl > @ @ - 657 , 59 + 657 , 49 @ @ public class CallFragment extends BaseFragment { < nl > / / < nl > / / Bind Their Stream < nl > / / < nl > - / / ACTIVITY _ BINDER . bind ( call . getMediaStreams ( ) , ( theirStream , streamModel ) - > { < nl > - / / boolean isNeedUnbind = true ; < nl > - / / if ( theirStream ! = null ) { < nl > - / / for ( CallMediaSource mediaSource : theirStream ) { < nl > - / / MediaStream stream = ( ( AndroidMediaStream ) mediaSource . getStream ( ) ) . getStream ( ) ; < nl > - / / if ( stream . videoTracks . size ( ) > 0 | | stream . preservedVideoTracks . size ( ) > 0 ) { < nl > - / / < nl > - / / if ( ! isRemoteViewConfigured ) { < nl > - / / remoteVideoView . init ( eglContext . getEglBaseContext ( ) , null ) ; < nl > - / / isRemoteViewConfigured = true ; < nl > - / / } < nl > - / / < nl > - / / VideoTrack videoTrack ; < nl > - / / if ( stream . videoTracks . size ( ) > 0 ) { < nl > - / / videoTrack = stream . videoTracks . get ( 0 ) ; < nl > - / / } else if ( stream . preservedVideoTracks . size ( ) > 0 ) { < nl > - / / videoTrack = stream . preservedVideoTracks . get ( 0 ) ; < nl > - / / } else { < nl > - / / throw new RuntimeException ( " Impossible " ) ; < nl > - / / } < nl > - / / < nl > - / / if ( videoTrack ! = remoteTrack ) { < nl > - / / if ( remoteTrack ! = null ) { < nl > - / / remoteTrack . removeRenderer ( remoteRender ) ; < nl > - / / } < nl > - / / < nl > - / / remoteTrack = videoTrack ; < nl > - / / remoteTrack . addRenderer ( remoteRender ) ; < nl > - / / remoteVideoView . setVisibility ( View . VISIBLE ) ; < nl > - / / avatarView . setVisibility ( View . INVISIBLE ) ; < nl > - / / nameTV . setVisibility ( View . INVISIBLE ) ; < nl > - / / } < nl > - / / isNeedUnbind = false ; < nl > - / / break ; < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / } < nl > - / / < nl > - / / if ( isNeedUnbind ) { < nl > - / / if ( remoteTrack ! = null ) { < nl > - / / remoteTrack . removeRenderer ( remoteRender ) ; < nl > - / / remoteTrack = null ; < nl > - / / } < nl > - / / if ( isRemoteViewConfigured ) { < nl > - / / remoteVideoView . release ( ) ; < nl > - / / isRemoteViewConfigured = false ; < nl > - / / } < nl > - / / remoteVideoView . setVisibility ( View . INVISIBLE ) ; < nl > - / / avatarView . setVisibility ( View . VISIBLE ) ; < nl > - / / nameTV . setVisibility ( View . VISIBLE ) ; < nl > - / / } < nl > - / / } ) ; < nl > + < nl > + ACTIVITY _ BINDER . bind ( call . getTheirVideoTracks ( ) , ( videoTracks , valueModel ) - > { < nl > + boolean isNeedUnbind = true ; < nl > + < nl > + if ( videoTracks . size ( ) > 0 ) { < nl > + < nl > + if ( ! isRemoteViewConfigured ) { < nl > + remoteVideoView . init ( eglContext . getEglBaseContext ( ) , null ) ; < nl > + isRemoteViewConfigured = true ; < nl > + } < nl > + < nl > + VideoTrack videoTrack = ( ( AndroidVideoTrack ) videoTracks . get ( 0 ) ) . getVideoTrack ( ) ; < nl > + < nl > + if ( videoTrack ! = remoteTrack ) { < nl > + if ( remoteTrack ! = null ) { < nl > + remoteTrack . removeRenderer ( remoteRender ) ; < nl > + } < nl > + < nl > + remoteTrack = videoTrack ; < nl > + remoteTrack . addRenderer ( remoteRender ) ; < nl > + remoteVideoView . setVisibility ( View . VISIBLE ) ; < nl > + avatarView . setVisibility ( View . INVISIBLE ) ; < nl > + nameTV . setVisibility ( View . INVISIBLE ) ; < nl > + } < nl > + isNeedUnbind = false ; < nl > + < nl > + } < nl > + < nl > + if ( isNeedUnbind ) { < nl > + if ( remoteTrack ! = null ) { < nl > + remoteTrack . removeRenderer ( remoteRender ) ; < nl > + remoteTrack = null ; < nl > + } < nl > + if ( isRemoteViewConfigured ) { < nl > + remoteVideoView . release ( ) ; < nl > + isRemoteViewConfigured = false ; < nl > + } < nl > + remoteVideoView . setVisibility ( View . INVISIBLE ) ; < nl > + avatarView . setVisibility ( View . VISIBLE ) ; < nl > + nameTV . setVisibility ( View . VISIBLE ) ; < nl > + } < nl > + } ) ; < nl > + < nl > } else { < nl > videoTv . setTextColor ( getResources ( ) . getColor ( R . color . picker _ grey ) ) ; < nl > videoIcon . setTint ( getResources ( ) . getColor ( R . color . picker _ grey ) ) ; < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > index c0b8d92 . . f03c37f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift < nl > @ @ - 85 , 9 + 85 , 39 @ @ class CocoaWebRTCRuntime : NSObject , ARWebRTCRuntime { < nl > @ objc class MediaStream : NSObject , ARWebRTCMediaStream { < nl > < nl > let stream : RTCMediaStream < nl > + let audioTracks : IOSObjectArray < nl > + let videoTracks : IOSObjectArray < nl > + let allTracks : IOSObjectArray < nl > < nl > init ( stream : RTCMediaStream ) { < nl > self . stream = stream < nl > + < nl > + self . audioTracks = IOSObjectArray ( length : UInt ( stream . audioTracks . count ) , type : ARWebRTCMediaTrack _ class _ ( ) ) < nl > + self . videoTracks = IOSObjectArray ( length : UInt ( stream . videoTracks . count ) , type : ARWebRTCMediaTrack _ class _ ( ) ) < nl > + self . allTracks = IOSObjectArray ( length : UInt ( stream . audioTracks . count + stream . videoTracks . count ) , type : ARWebRTCMediaTrack _ class _ ( ) ) < nl > + < nl > + for i in 0 . . < stream . audioTracks . count { < nl > + let track = CocoaAudioTrack ( audioTrack : stream . audioTracks [ i ] as ! RTCAudioTrack ) < nl > + audioTracks . replaceObjectAtIndex ( UInt ( i ) , withObject : track ) < nl > + allTracks . replaceObjectAtIndex ( UInt ( i ) , withObject : track ) < nl > + } < nl > + for i in 0 . . < stream . videoTracks . count { < nl > + let track = CocoaVideoTrack ( videoTrack : stream . videoTracks [ i ] as ! RTCVideoTrack ) < nl > + videoTracks . replaceObjectAtIndex ( UInt ( i ) , withObject : track ) < nl > + allTracks . replaceObjectAtIndex ( UInt ( i + audioTracks . length ( ) ) , withObject : track ) < nl > + } < nl > + } < nl > + < nl > + func getAudioTracks ( ) - > IOSObjectArray ! { < nl > + return audioTracks < nl > + } < nl > + < nl > + func getVideoTracks ( ) - > IOSObjectArray ! { < nl > + return videoTracks < nl > + } < nl > + < nl > + func getTracks ( ) - > IOSObjectArray ! { < nl > + return allTracks < nl > } < nl > < nl > func close ( ) { < nl > @ @ - 102 , 6 + 132 , 48 @ @ class CocoaWebRTCRuntime : NSObject , ARWebRTCRuntime { < nl > } < nl > } < nl > < nl > + public class CocoaAudioTrack : NSObject , ARWebRTCMediaTrack { < nl > + < nl > + public let audioTrack : RTCAudioTrack < nl > + < nl > + public init ( let audioTrack : RTCAudioTrack ) { < nl > + self . audioTrack = audioTrack < nl > + } < nl > + < nl > + public func getTrackType ( ) - > jint { < nl > + return ARWebRTCTrackType _ AUDIO < nl > + } < nl > + < nl > + public func setEnabledWithBoolean ( isEnabled : jboolean ) { < nl > + audioTrack . setEnabled ( isEnabled ) < nl > + } < nl > + < nl > + public func isEnabled ( ) - > jboolean { < nl > + return audioTrack . isEnabled ( ) < nl > + } < nl > + } < nl > + < nl > + public class CocoaVideoTrack : NSObject , ARWebRTCMediaTrack { < nl > + < nl > + public let videoTrack : RTCVideoTrack < nl > + < nl > + public init ( let videoTrack : RTCVideoTrack ) { < nl > + self . videoTrack = videoTrack < nl > + } < nl > + < nl > + public func getTrackType ( ) - > jint { < nl > + return ARWebRTCTrackType _ VIDEO < nl > + } < nl > + < nl > + public func setEnabledWithBoolean ( isEnabled : jboolean ) { < nl > + videoTrack . setEnabled ( isEnabled ) < nl > + } < nl > + < nl > + public func isEnabled ( ) - > jboolean { < nl > + return videoTrack . isEnabled ( ) < nl > + } < nl > + } < nl > + < nl > class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnectionDelegate { < nl > < nl > private var peerConnection : RTCPeerConnection ! < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > index 81f4afb . . 3c07df7 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > @ @ - 204 , 8 + 204 , 8 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { < nl > / / Binding State < nl > / / < nl > < nl > - binder . bind ( call . isMuted ) { ( value : JavaLangBoolean ! ) - > ( ) in < nl > - self . muteButton . filled = value . booleanValue ( ) < nl > + binder . bind ( call . isAudioEnabled ) { ( value : JavaLangBoolean ! ) - > ( ) in < nl > + self . muteButton . filled = ! value . booleanValue ( ) < nl > } < nl > < nl > binder . bind ( call . state ) { ( value : ACCallState ! ) - > ( ) in < nl > @ @ - 321 , 23 + 321 , 47 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { < nl > } < nl > < nl > / / Local Video can be only one , so we can just keep active track reference and handle changes < nl > - binder . bind ( call . ownMediaStream , valueModel2 : call . isVideoEnabled ) { ( stream : MediaStream ! , value2 : JavaLangBoolean ! ) in < nl > + / / binder . bind ( call . ownMediaStream , valueModel2 : call . isVideoEnabled ) { ( stream : MediaStream ! , value2 : JavaLangBoolean ! ) in < nl > + / / var needUnbind = true < nl > + / / if value2 . booleanValue ( ) { < nl > + / / if let s = stream { < nl > + / / if s . stream . videoTracks . count > 0 { < nl > + / / let t = s . stream . videoTracks [ 0 ] as ! RTCVideoTrack < nl > + / / if self . localVideoTrack ! = t { < nl > + / / if self . localVideoTrack ! = nil { < nl > + / / self . localVideoTrack . removeRenderer ( self . localView ) < nl > + / / } < nl > + / / self . localVideoTrack = t < nl > + / / self . localView . showViewAnimated ( ) < nl > + / / t . addRenderer ( self . localView ) < nl > + / / } < nl > + / / needUnbind = false < nl > + / / } < nl > + / / } < nl > + / / } < nl > + / / if needUnbind { < nl > + / / if self . localVideoTrack ! = nil { < nl > + / / self . localVideoTrack . removeRenderer ( self . localView ) < nl > + / / self . localVideoTrack = nil < nl > + / / } < nl > + / / self . localView . hideViewAnimated ( ) < nl > + / / } < nl > + / / } < nl > + < nl > + binder . bind ( call . ownVideoTracks , closure : { ( videoTracks : ACArrayListMediaTrack ! ) in < nl > var needUnbind = true < nl > - if value2 . booleanValue ( ) { < nl > - if let s = stream { < nl > - if s . stream . videoTracks . count > 0 { < nl > - let t = s . stream . videoTracks [ 0 ] as ! RTCVideoTrack < nl > - if self . localVideoTrack ! = t { < nl > - if self . localVideoTrack ! = nil { < nl > - self . localVideoTrack . removeRenderer ( self . localView ) < nl > - } < nl > - self . localVideoTrack = t < nl > - self . localView . showViewAnimated ( ) < nl > - t . addRenderer ( self . localView ) < nl > - } < nl > - needUnbind = false < nl > + if videoTracks . size ( ) > 0 { < nl > + < nl > + let track = ( videoTracks . getWithInt ( 0 ) as ! CocoaVideoTrack ) . videoTrack < nl > + if self . localVideoTrack ! = track { < nl > + if self . localVideoTrack ! = nil { < nl > + self . localVideoTrack . removeRenderer ( self . localView ) < nl > } < nl > + self . localVideoTrack = track < nl > + self . localView . showViewAnimated ( ) < nl > + track . addRenderer ( self . localView ) < nl > } < nl > + needUnbind = false < nl > } < nl > if needUnbind { < nl > if self . localVideoTrack ! = nil { < nl > @ @ - 346 , 28 + 370 , 25 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { < nl > } < nl > self . localView . hideViewAnimated ( ) < nl > } < nl > - } < nl > - < nl > + } ) < nl > + < nl > / / In Private Calls we can have only one video stream from other side < nl > / / We will assume only one active peer connection < nl > - binder . bind ( call . mediaStreams ) { ( value : JavaUtilArrayList ! ) - > ( ) in < nl > + < nl > + binder . bind ( call . theirVideoTracks , closure : { ( videoTracks : ACArrayListMediaTrack ! ) in < nl > var needUnbind = true < nl > - for source in value ! { < nl > - let casted = source as ! ACCallMediaSource < nl > - let stream = ( casted . stream as ! MediaStream ) . stream < nl > - if / * casted . isVideoEnabled & & * / stream . videoTracks . count > 0 { < nl > - let t = stream . videoTracks [ 0 ] as ! RTCVideoTrack < nl > - if self . remoteVideoTrack ! = t { < nl > - if self . remoteVideoTrack ! = nil { < nl > - self . remoteVideoTrack . removeRenderer ( self . remoteView ) < nl > - } < nl > - self . remoteVideoTrack = t < nl > - self . remoteView . showViewAnimated ( ) < nl > - t . addRenderer ( self . remoteView ) < nl > + if videoTracks . size ( ) > 0 { < nl > + < nl > + let track = ( videoTracks . getWithInt ( 0 ) as ! CocoaVideoTrack ) . videoTrack < nl > + if self . remoteVideoTrack ! = track { < nl > + if self . remoteVideoTrack ! = nil { < nl > + self . remoteVideoTrack . removeRenderer ( self . remoteView ) < nl > } < nl > - needUnbind = false < nl > - break < nl > + self . remoteVideoTrack = track < nl > + self . remoteView . showViewAnimated ( ) < nl > + track . addRenderer ( self . remoteView ) < nl > } < nl > + needUnbind = false < nl > } < nl > if needUnbind { < nl > if self . remoteVideoTrack ! = nil { < nl > @ @ - 376 , 7 + 397 , 36 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { < nl > } < nl > self . remoteView . hideViewAnimated ( ) < nl > } < nl > - } < nl > + } ) < nl > + < nl > + < nl > + / / binder . bind ( call . mediaStreams ) { ( value : JavaUtilArrayList ! ) - > ( ) in < nl > + / / var needUnbind = true < nl > + / / for source in value ! { < nl > + / / let casted = source as ! ACCallMediaSource < nl > + / / let stream = ( casted . stream as ! MediaStream ) . stream < nl > + / / if / * casted . isVideoEnabled & & * / stream . videoTracks . count > 0 { < nl > + / / let t = stream . videoTracks [ 0 ] as ! RTCVideoTrack < nl > + / / if self . remoteVideoTrack ! = t { < nl > + / / if self . remoteVideoTrack ! = nil { < nl > + / / self . remoteVideoTrack . removeRenderer ( self . remoteView ) < nl > + / / } < nl > + / / self . remoteVideoTrack = t < nl > + / / self . remoteView . showViewAnimated ( ) < nl > + / / t . addRenderer ( self . remoteView ) < nl > + / / } < nl > + / / needUnbind = false < nl > + / / break < nl > + / / } < nl > + / / } < nl > + / / if needUnbind { < nl > + / / if self . remoteVideoTrack ! = nil { < nl > + / / self . remoteVideoTrack . removeRenderer ( self . remoteView ) < nl > + / / self . remoteVideoTrack = nil < nl > + / / } < nl > + / / self . remoteView . hideViewAnimated ( ) < nl > + / / } < nl > + / / } < nl > } else { < nl > self . videoButton . filled = false < nl > self . videoButton . enabled = false < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index a3ec1a2 . . 8f374e2 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 17 , 6 + 17 , 7 @ @ import im . actor . core . viewmodel . CallMediaSource ; < nl > import im . actor . core . viewmodel . CallState ; < nl > import im . actor . core . viewmodel . CallVM ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > + import im . actor . core . viewmodel . generics . ArrayListMediaTrack ; < nl > import im . actor . runtime . Log ; < nl > import im . actor . runtime . Runtime ; < nl > import im . actor . runtime . actors . messages . PoisonPill ; < nl > @ @ - 154 , 11 + 155 , 11 @ @ public class CallActor extends AbsCallActor { < nl > @ Override < nl > public void onTrackAdded ( long deviceId , WebRTCMediaTrack track ) { < nl > if ( track . getTrackType ( ) = = WebRTCTrackType . AUDIO ) { < nl > - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getTheirAudioTracks ( ) . get ( ) ) ; < nl > + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getTheirAudioTracks ( ) . get ( ) ) ; < nl > tracks . add ( track ) ; < nl > callVM . getTheirAudioTracks ( ) . change ( tracks ) ; < nl > } else if ( track . getTrackType ( ) = = WebRTCTrackType . VIDEO ) { < nl > - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getTheirVideoTracks ( ) . get ( ) ) ; < nl > + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getTheirVideoTracks ( ) . get ( ) ) ; < nl > tracks . add ( track ) ; < nl > callVM . getTheirVideoTracks ( ) . change ( tracks ) ; < nl > } else { < nl > @ @ - 169 , 11 + 170 , 11 @ @ public class CallActor extends AbsCallActor { < nl > @ Override < nl > public void onTrackRemoved ( long deviceId , WebRTCMediaTrack track ) { < nl > if ( track . getTrackType ( ) = = WebRTCTrackType . AUDIO ) { < nl > - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getTheirAudioTracks ( ) . get ( ) ) ; < nl > + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getTheirAudioTracks ( ) . get ( ) ) ; < nl > tracks . remove ( track ) ; < nl > callVM . getTheirAudioTracks ( ) . change ( tracks ) ; < nl > } else if ( track . getTrackType ( ) = = WebRTCTrackType . VIDEO ) { < nl > - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getTheirVideoTracks ( ) . get ( ) ) ; < nl > + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getTheirVideoTracks ( ) . get ( ) ) ; < nl > tracks . remove ( track ) ; < nl > callVM . getTheirVideoTracks ( ) . change ( tracks ) ; < nl > } else { < nl > @ @ - 184 , 11 + 185 , 11 @ @ public class CallActor extends AbsCallActor { < nl > @ Override < nl > public void onOwnTrackAdded ( WebRTCMediaTrack track ) { < nl > if ( track . getTrackType ( ) = = WebRTCTrackType . AUDIO ) { < nl > - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getOwnAudioTracks ( ) . get ( ) ) ; < nl > + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getOwnAudioTracks ( ) . get ( ) ) ; < nl > tracks . add ( track ) ; < nl > callVM . getOwnAudioTracks ( ) . change ( tracks ) ; < nl > } else if ( track . getTrackType ( ) = = WebRTCTrackType . VIDEO ) { < nl > - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getOwnVideoTracks ( ) . get ( ) ) ; < nl > + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getOwnVideoTracks ( ) . get ( ) ) ; < nl > tracks . add ( track ) ; < nl > callVM . getOwnVideoTracks ( ) . change ( tracks ) ; < nl > } else { < nl > @ @ - 199 , 11 + 200 , 11 @ @ public class CallActor extends AbsCallActor { < nl > @ Override < nl > public void onOwnTrackRemoved ( WebRTCMediaTrack track ) { < nl > if ( track . getTrackType ( ) = = WebRTCTrackType . AUDIO ) { < nl > - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getOwnAudioTracks ( ) . get ( ) ) ; < nl > + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getOwnAudioTracks ( ) . get ( ) ) ; < nl > tracks . remove ( track ) ; < nl > callVM . getOwnAudioTracks ( ) . change ( tracks ) ; < nl > } else if ( track . getTrackType ( ) = = WebRTCTrackType . VIDEO ) { < nl > - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getOwnVideoTracks ( ) . get ( ) ) ; < nl > + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getOwnVideoTracks ( ) . get ( ) ) ; < nl > tracks . remove ( track ) ; < nl > callVM . getOwnVideoTracks ( ) . change ( tracks ) ; < nl > } else { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > index c57505c . . f126ede 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java < nl > @ @ - 11 , 6 + 11 , 7 @ @ import im . actor . core . modules . calls . peers . messages . RTCAnswer ; < nl > import im . actor . core . modules . calls . peers . messages . RTCCandidate ; < nl > import im . actor . core . modules . calls . peers . messages . RTCCloseSession ; < nl > import im . actor . core . modules . calls . peers . messages . RTCMasterAdvertised ; < nl > + import im . actor . core . modules . calls . peers . messages . RTCMediaStateUpdated ; < nl > import im . actor . core . modules . calls . peers . messages . RTCNeedOffer ; < nl > import im . actor . core . modules . calls . peers . messages . RTCOffer ; < nl > import im . actor . core . modules . calls . peers . messages . RTCStart ; < nl > @ @ - 303 , 6 + 304 , 39 @ @ public class PeerNodeActor extends ModuleActor implements PeerConnectionCallback < nl > } < nl > } < nl > < nl > + public void onStreamStateChanged ( boolean isAudioEnabled , boolean isVideoEnabled ) { < nl > + if ( this . isAudioEnabled ! = isAudioEnabled ) { < nl > + this . isAudioEnabled = isAudioEnabled ; < nl > + if ( isStarted ) { < nl > + for ( WebRTCMediaStream streams : theirMediaStreams ) { < nl > + for ( WebRTCMediaTrack track : streams . getAudioTracks ( ) ) { < nl > + track . setEnabled ( isAudioEnabled ) ; < nl > + if ( isAudioEnabled ) { < nl > + callback . onTrackAdded ( deviceId , track ) ; < nl > + } else { < nl > + callback . onTrackRemoved ( deviceId , track ) ; < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } < nl > + if ( this . isVideoEnabled ! = isVideoEnabled ) { < nl > + this . isVideoEnabled = isVideoEnabled ; < nl > + if ( isStarted ) { < nl > + for ( WebRTCMediaStream streams : theirMediaStreams ) { < nl > + for ( WebRTCMediaTrack track : streams . getVideoTracks ( ) ) { < nl > + track . setEnabled ( isVideoEnabled ) ; < nl > + if ( isVideoEnabled ) { < nl > + callback . onTrackAdded ( deviceId , track ) ; < nl > + } else { < nl > + callback . onTrackRemoved ( deviceId , track ) ; < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } < nl > + < nl > public void onCloseSession ( long sessionId ) { < nl > if ( ! closedSessions . contains ( sessionId ) ) { < nl > closedSessions . add ( sessionId ) ; < nl > @ @ - 417 , 6 + 451 , 9 @ @ public class PeerNodeActor extends ModuleActor implements PeerConnectionCallback < nl > } else { < nl > stash ( ) ; < nl > } < nl > + } else if ( message instanceof RTCMediaStateUpdated ) { < nl > + RTCMediaStateUpdated stateUpdated = ( RTCMediaStateUpdated ) message ; < nl > + onStreamStateChanged ( stateUpdated . isAudioEnabled ( ) , stateUpdated . isVideoEnabled ( ) ) ; < nl > } else { < nl > super . onReceive ( message ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java < nl > index 45aa7df . . ffb16e9 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java < nl > @ @ - 5 , 6 + 5 , 7 @ @ import com . google . j2objc . annotations . Property ; < nl > import java . util . ArrayList ; < nl > < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . core . viewmodel . generics . ArrayListMediaTrack ; < nl > import im . actor . core . viewmodel . generics . BooleanValueModel ; < nl > import im . actor . runtime . mvvm . ValueModel ; < nl > import im . actor . runtime . webrtc . WebRTCMediaStream ; < nl > @ @ - 23 , 14 + 24 , 14 @ @ public class CallVM { < nl > / / Own Stream < nl > < nl > @ Property ( " nonatomic , readonly " ) < nl > - private final ValueModel < ArrayList < WebRTCMediaTrack > > ownVideoTracks ; < nl > + private final ValueModel < ArrayListMediaTrack > ownVideoTracks ; < nl > @ Property ( " nonatomic , readonly " ) < nl > - private final ValueModel < ArrayList < WebRTCMediaTrack > > ownAudioTracks ; < nl > + private final ValueModel < ArrayListMediaTrack > ownAudioTracks ; < nl > < nl > @ Property ( " nonatomic , readonly " ) < nl > - private final ValueModel < ArrayList < WebRTCMediaTrack > > theirVideoTracks ; < nl > + private final ValueModel < ArrayListMediaTrack > theirVideoTracks ; < nl > @ Property ( " nonatomic , readonly " ) < nl > - private final ValueModel < ArrayList < WebRTCMediaTrack > > theirAudioTracks ; < nl > + private final ValueModel < ArrayListMediaTrack > theirAudioTracks ; < nl > < nl > < nl > @ Property ( " nonatomic , readonly " ) < nl > @ @ - 52 , 10 + 53 , 10 @ @ public class CallVM { < nl > this . peer = peer ; < nl > this . isOutgoing = isOutgoing ; < nl > this . state = new ValueModel < > ( " calls . " + callId + " . state " , state ) ; < nl > - this . ownVideoTracks = new ValueModel < > ( " calls . " + callId + " . own _ video " , new ArrayList < > ( ) ) ; < nl > - this . ownAudioTracks = new ValueModel < > ( " calls . " + callId + " . own _ audio " , new ArrayList < > ( ) ) ; < nl > - this . theirVideoTracks = new ValueModel < > ( " calls . " + callId + " . their _ video " , new ArrayList < > ( ) ) ; < nl > - this . theirAudioTracks = new ValueModel < > ( " calls . " + callId + " . their _ audio " , new ArrayList < > ( ) ) ; < nl > + this . ownVideoTracks = new ValueModel < > ( " calls . " + callId + " . own _ video " , new ArrayListMediaTrack ( ) ) ; < nl > + this . ownAudioTracks = new ValueModel < > ( " calls . " + callId + " . own _ audio " , new ArrayListMediaTrack ( ) ) ; < nl > + this . theirVideoTracks = new ValueModel < > ( " calls . " + callId + " . their _ video " , new ArrayListMediaTrack ( ) ) ; < nl > + this . theirAudioTracks = new ValueModel < > ( " calls . " + callId + " . their _ audio " , new ArrayListMediaTrack ( ) ) ; < nl > this . members = new ValueModel < > ( " calls . " + callId + " . members " , new ArrayList < > ( initialMembers ) ) ; < nl > this . isAudioEnabled = new BooleanValueModel ( " calls . " + callId + " . audio _ enabled " , true ) ; < nl > this . isVideoEnabled = new BooleanValueModel ( " calls . " + callId + " . video _ enabled " , isVideoEnabled ) ; < nl > @ @ - 106 , 19 + 107 , 19 @ @ public class CallVM { < nl > this . callEnd = callEnd ; < nl > } < nl > < nl > - public ValueModel < ArrayList < WebRTCMediaTrack > > getOwnVideoTracks ( ) { < nl > + public ValueModel < ArrayListMediaTrack > getOwnVideoTracks ( ) { < nl > return ownVideoTracks ; < nl > } < nl > < nl > - public ValueModel < ArrayList < WebRTCMediaTrack > > getOwnAudioTracks ( ) { < nl > + public ValueModel < ArrayListMediaTrack > getOwnAudioTracks ( ) { < nl > return ownAudioTracks ; < nl > } < nl > < nl > - public ValueModel < ArrayList < WebRTCMediaTrack > > getTheirVideoTracks ( ) { < nl > + public ValueModel < ArrayListMediaTrack > getTheirVideoTracks ( ) { < nl > return theirVideoTracks ; < nl > } < nl > < nl > - public ValueModel < ArrayList < WebRTCMediaTrack > > getTheirAudioTracks ( ) { < nl > + public ValueModel < ArrayListMediaTrack > getTheirAudioTracks ( ) { < nl > return theirAudioTracks ; < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListMediaTrack . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListMediaTrack . java < nl > new file mode 100644 < nl > index 0000000 . . b5ab6cc < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListMediaTrack . java < nl > @ @ - 0 , 0 + 1 , 25 @ @ < nl > + package im . actor . core . viewmodel . generics ; < nl > + < nl > + import java . util . ArrayList ; < nl > + import java . util . Collection ; < nl > + < nl > + import im . actor . runtime . webrtc . WebRTCMediaTrack ; < nl > + < nl > + public class ArrayListMediaTrack extends ArrayList < WebRTCMediaTrack > { < nl > + < nl > + public ArrayListMediaTrack ( int capacity ) { < nl > + super ( capacity ) ; < nl > + } < nl > + < nl > + public ArrayListMediaTrack ( ) { < nl > + } < nl > + < nl > + public ArrayListMediaTrack ( Collection < ? extends WebRTCMediaTrack > collection ) { < nl > + super ( collection ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public WebRTCMediaTrack get ( int index ) { < nl > + return super . get ( index ) ; < nl > + } < nl > + }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift < nl > index 717cf7d . . 6560c65 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift < nl > @ @ - 32 , 27 + 32 , 41 @ @ class CocoaFiles { < nl > func commitTempFile ( sourceFile : ARFileSystemReference ! , withFileId fileId : jlong , withFileName fileName : String ! ) - > ARFileSystemReference ! { < nl > < nl > / / Finding file available name < nl > - var index = 0 ; < nl > - while ( manager . fileExistsAtPath ( " \ ( documentsFolder ) / Documents / \ ( fileId ) _ \ ( index ) _ \ ( fileName ) " ) ) { < nl > - index = index + 1 < nl > - } < nl > - let resultPath = " / Documents / \ ( fileId ) _ \ ( index ) _ \ ( fileName ) " < nl > + < nl > + / / let path = " \ ( documentsFolder ) / Documents / \ ( fileId ) _ \ ( fileName ) " < nl > + let descriptor = " / Documents / \ ( fileId ) _ \ ( fileName ) " < nl > + / / < nl > + / / if manager . fileExistsAtPath ( " \ ( documentsFolder ) / Documents / \ ( fileId ) _ \ ( fileName ) " ) { < nl > + / / do { < nl > + / / try manager . removeItemAtPath ( path ) < nl > + / / } catch _ { < nl > + / / return nil < nl > + / / } < nl > + / / } < nl > + < nl > + let srcUrl = NSURL ( fileURLWithPath : documentsFolder + sourceFile . getDescriptor ( ) ! ) < nl > + let destUrl = NSURL ( fileURLWithPath : documentsFolder + descriptor ) < nl > + < nl > + / / manager . replaceItemAtURL ( srcUrl , withItemAtURL : destUrl , backupItemName : nil , options : 0 , resultingItemURL : nil ) < nl > < nl > / / Moving file to new place < nl > + < nl > do { < nl > - try manager . moveItemAtPath ( documentsFolder + sourceFile . getDescriptor ( ) ! , toPath : documentsFolder + resultPath ) < nl > - return CocoaFile ( path : resultPath ) < nl > + try manager . replaceItemAtURL ( destUrl , withItemAtURL : srcUrl , backupItemName : nil , options : NSFileManagerItemReplacementOptions ( rawValue : 0 ) , resultingItemURL : nil ) < nl > + < nl > + / / try manager . moveItemAtPath ( documentsFolder + sourceFile . getDescriptor ( ) ! , toPath : path ) < nl > + return CocoaFile ( path : descriptor ) < nl > } catch _ { < nl > return nil < nl > } < nl > } < nl > < nl > func fileFromDescriptor ( descriptor : String ! ) - > ARFileSystemReference ! { < nl > - return CocoaFile ( path : descriptor ) ; < nl > + return CocoaFile ( path : descriptor ) < nl > } < nl > < nl > func isFsPersistent ( ) - > Bool { < nl > - return true ; < nl > + return true < nl > } < nl > } < nl > < nl > @ @ - 85 , 7 + 99 , 7 @ @ class CocoaFile : NSObject , ARFileSystemReference { < nl > < nl > func openWriteWithSize ( size : jint ) - > AROutputFile ! { < nl > < nl > - let fileHandle = NSFileHandle ( forWritingAtPath : realPath ) ; < nl > + let fileHandle = NSFileHandle ( forWritingAtPath : realPath ) < nl > < nl > if ( fileHandle = = nil ) { < nl > return nil < nl > @ @ - 94 , 77 + 108 , 70 @ @ class CocoaFile : NSObject , ARFileSystemReference { < nl > fileHandle ! . seekToFileOffset ( UInt64 ( size ) ) < nl > fileHandle ! . seekToFileOffset ( 0 ) < nl > < nl > - return CocoaOutputFile ( fileHandle : fileHandle ! ) ; < nl > + return CocoaOutputFile ( fileHandle : fileHandle ! ) < nl > } < nl > < nl > func openRead ( ) - > ARInputFile ! { < nl > < nl > - let fileHandle = NSFileHandle ( forReadingAtPath : realPath ) ; < nl > + let fileHandle = NSFileHandle ( forReadingAtPath : realPath ) < nl > < nl > if ( fileHandle = = nil ) { < nl > return nil < nl > } < nl > < nl > - return CocoaInputFile ( fileHandle : fileHandle ! ) ; < nl > + return CocoaInputFile ( fileHandle : fileHandle ! ) < nl > } < nl > } < nl > < nl > class CocoaOutputFile : NSObject , AROutputFile { < nl > < nl > - let fileHandle : NSFileHandle ; < nl > + let fileHandle : NSFileHandle < nl > < nl > - init ( fileHandle : NSFileHandle ) { < nl > - self . fileHandle = fileHandle ; < nl > + init ( fileHandle : NSFileHandle ) { < nl > + self . fileHandle = fileHandle < nl > } < nl > < nl > func writeWithOffset ( fileOffset : jint , withData data : IOSByteArray ! , withDataOffset dataOffset : jint , withLength dataLen : jint ) - > Bool { < nl > - let toWrite = NSMutableData ( length : Int ( dataLen ) ) ! ; < nl > - var srcBuffer = UnsafeMutablePointer < UInt8 > ( data . buffer ( ) ) ; < nl > - < nl > - var destBuffer = UnsafeMutablePointer < UInt8 > ( toWrite . bytes ) ; < nl > - for _ in 0 . . < dataLen { < nl > - destBuffer . memory = srcBuffer . memory ; < nl > - destBuffer + + ; < nl > - srcBuffer + + ; < nl > - } < nl > < nl > - / / NSLog ( " Write to file \ ( fileOffset ) " ) < nl > - fileHandle . seekToFileOffset ( UInt64 ( fileOffset ) ) ; < nl > - fileHandle . writeData ( toWrite ) < nl > - / / NSLog ( " Write to file \ ( fileOffset ) : end " ) < nl > + let pointer = data . buffer ( ) . advancedBy ( Int ( dataOffset ) ) < nl > + let srcData = NSData ( bytesNoCopy : pointer , length : Int ( dataLen ) , freeWhenDone : false ) < nl > + < nl > + fileHandle . seekToFileOffset ( UInt64 ( fileOffset ) ) < nl > + fileHandle . writeData ( srcData ) < nl > + < nl > return true ; < nl > } < nl > < nl > func close ( ) - > Bool { < nl > - / / NSLog ( " Close file " ) < nl > self . fileHandle . synchronizeFile ( ) < nl > self . fileHandle . closeFile ( ) < nl > - / / NSLog ( " Close file end " ) < nl > return true ; < nl > } < nl > } < nl > < nl > class CocoaInputFile : NSObject , ARInputFile { < nl > < nl > - let fileHandle : NSFileHandle ; < nl > + let fileHandle : NSFileHandle < nl > < nl > - init ( fileHandle : NSFileHandle ) { < nl > - self . fileHandle = fileHandle ; < nl > + init ( fileHandle : NSFileHandle ) { < nl > + self . fileHandle = fileHandle < nl > } < nl > < nl > func readWithOffset ( fileOffset : jint , withData data : IOSByteArray ! , withDataOffset offset : jint , withLength len : jint , withCallback callback : ARFileReadCallback ! ) { < nl > < nl > dispatchBackground { < nl > - self . fileHandle . seekToFileOffset ( UInt64 ( fileOffset ) ) ; < nl > - let readed : NSData = self . fileHandle . readDataOfLength ( Int ( len ) ) ; < nl > < nl > - var srcBuffer = UnsafeMutablePointer < UInt8 > ( readed . bytes ) ; < nl > - var destBuffer = UnsafeMutablePointer < UInt8 > ( data . buffer ( ) ) ; < nl > - let len = min ( Int ( len ) , Int ( readed . length ) ) ; < nl > + self . fileHandle . seekToFileOffset ( UInt64 ( fileOffset ) ) < nl > + < nl > + let readed : NSData = self . fileHandle . readDataOfLength ( Int ( len ) ) < nl > + < nl > + var srcBuffer = UnsafeMutablePointer < UInt8 > ( readed . bytes ) < nl > + var destBuffer = UnsafeMutablePointer < UInt8 > ( data . buffer ( ) ) < nl > + let len = min ( Int ( len ) , Int ( readed . length ) ) < nl > for _ in offset . . < offset + len { < nl > - destBuffer . memory = srcBuffer . memory ; < nl > - destBuffer + + ; < nl > - srcBuffer + + ; < nl > + destBuffer . memory = srcBuffer . memory < nl > + destBuffer + + < nl > + srcBuffer + + < nl > } < nl > < nl > callback . onFileReadWithOffset ( fileOffset , withData : data , withDataOffset : offset , withLength : jint ( len ) ) < nl > @ @ - 173 , 7 + 180 , 6 @ @ class CocoaInputFile : NSObject , ARInputFile { < nl > < nl > func close ( ) - > Bool { < nl > self . fileHandle . closeFile ( ) < nl > - return true ; < nl > - < nl > + return true < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSPhoneBookProvider . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSPhoneBookProvider . swift < nl > index c3d5419 . . 989aa64 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSPhoneBookProvider . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSPhoneBookProvider . swift < nl > @ @ - 9 , 7 + 9 , 7 @ @ class PhoneBookProvider : NSObject , ACPhoneBookProvider { < nl > < nl > func loadPhoneBookWithCallback ( callback : ACPhoneBookProvider _ Callback ! ) { < nl > < nl > - dispatchBackground { < nl > + dispatchBackgroundDelayed ( 5 . 0 ) { < nl > < nl > let rawBook = ABAddressBookCreateWithOptions ( nil , nil ) ; < nl > if ( rawBook = = nil ) { < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift < nl > index 52bcf04 . . dd0946f 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 < nl > @ @ - 144 , 30 + 144 , 30 @ @ public class AADialogCell : AATableViewCell , AABindedCell { < nl > / / < nl > / / Message State < nl > / / < nl > - / / let messageState = item . status . ordinal ( ) < nl > - / / if ( messageState = = ACMessageState . PENDING ( ) . ordinal ( ) ) { < nl > - / / self . statusView . tintColor = dialogStatusSending < nl > - / / self . statusView . image = chatIconClock < nl > - / / self . statusView . hidden = false < nl > - / / } else if ( messageState = = ACMessageState . READ ( ) . ordinal ( ) ) { < nl > - / / self . statusView . tintColor = dialogStatusRead < nl > - / / self . statusView . image = chatIconCheck2 < nl > - / / self . statusView . hidden = false < nl > - / / } else if ( messageState = = ACMessageState . RECEIVED ( ) . ordinal ( ) ) { < nl > - / / self . statusView . tintColor = dialogStatusReceived < nl > - / / self . statusView . image = chatIconCheck2 < nl > - / / self . statusView . hidden = false < nl > - / / } else if ( messageState = = ACMessageState . SENT ( ) . ordinal ( ) ) { < nl > - / / self . statusView . tintColor = dialogStatusSent < nl > - / / self . statusView . image = chatIconCheck1 < nl > - / / self . statusView . hidden = false < nl > - / / } else if ( messageState = = ACMessageState . ERROR ( ) . ordinal ( ) ) { < nl > - / / self . statusView . tintColor = dialogStatusError < nl > - / / self . statusView . image = chatIconError < nl > - / / self . statusView . hidden = false < nl > - / / } else { < nl > - / / self . statusView . hidden = true < nl > - / / } < nl > + let messageState = item . status . ordinal ( ) < nl > + if ( messageState = = ACMessageState . PENDING ( ) . ordinal ( ) ) { < nl > + self . statusView . tintColor = dialogStatusSending < nl > + self . statusView . image = chatIconClock < nl > + self . statusView . hidden = false < nl > + } else if ( messageState = = ACMessageState . READ ( ) . ordinal ( ) ) { < nl > + self . statusView . tintColor = dialogStatusRead < nl > + self . statusView . image = chatIconCheck2 < nl > + self . statusView . hidden = false < nl > + } else if ( messageState = = ACMessageState . RECEIVED ( ) . ordinal ( ) ) { < nl > + self . statusView . tintColor = dialogStatusReceived < nl > + self . statusView . image = chatIconCheck2 < nl > + self . statusView . hidden = false < nl > + } else if ( messageState = = ACMessageState . SENT ( ) . ordinal ( ) ) { < nl > + self . statusView . tintColor = dialogStatusSent < nl > + self . statusView . image = chatIconCheck1 < nl > + self . statusView . hidden = false < nl > + } else if ( messageState = = ACMessageState . ERROR ( ) . ordinal ( ) ) { < nl > + self . statusView . tintColor = dialogStatusError < nl > + self . statusView . image = chatIconError < nl > + self . statusView . hidden = false < nl > + } else { < nl > + self . statusView . hidden = true < nl > + } < nl > < nl > / / Cancelling Renderer and forcing layouting to start new rendering < nl > cellRenderer . cancelRender ( ) < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Dispatch . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Dispatch . swift < nl > index a39f462 . . f98ad80 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Dispatch . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Dispatch . swift < nl > @ @ - 12 , 7 + 12 , 7 @ @ public func dispatchOnUi ( closure : ( ) - > Void ) { < nl > } ) < nl > } < nl > < nl > - public func dispatchAfterOnUi ( delay : Double , closure : ( ) - > Void ) { < nl > + public func dispatchAfterOnUi ( delay : Double , closure : ( ) - > Void ) { < nl > dispatch _ after ( dispatch _ time ( DISPATCH _ TIME _ NOW , Int64 ( delay * Double ( NSEC _ PER _ SEC ) ) ) , dispatch _ get _ main _ queue ( ) ) { ( ) - > Void in < nl > closure ( ) < nl > } < nl > @ @ - 23 , 3 + 23 , 10 @ @ public func dispatchBackground ( closure : ( ) - > Void ) { < nl > closure ( ) < nl > } < nl > } < nl > + < nl > + < nl > + public func dispatchBackgroundDelayed ( delay : Double , closure : ( ) - > Void ) { < nl > + dispatch _ after ( dispatch _ time ( DISPATCH _ TIME _ NOW , Int64 ( delay * Double ( NSEC _ PER _ SEC ) ) ) , backgroundQueue ) { < nl > + closure ( ) < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift < nl > index 72c10b5 . . c1d16dc 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift < nl > @ @ - 109 , 7 + 109 , 7 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { < nl > let fileRef = avatar ! . smallImage . fileReference ! < nl > self . fileId = fileRef . getFileId ( ) < nl > self . showPlaceholder = false < nl > - / / Actor . startDownloadingWithReference ( fileRef ) < nl > + Actor . startDownloadingWithReference ( fileRef ) < nl > } else { < nl > self . fileId = nil < nl > self . showPlaceholder = true < nl > @ @ - 249 , 9 + 249 , 7 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { < nl > } < nl > } else if let fp = filePath { < nl > < nl > - / / TODO : Load Image < nl > - < nl > - let image : UIImage ? = nil / / UIImage ( contentsOfFile : fp ) < nl > + let image : UIImage ? = UIImage ( contentsOfFile : fp ) < nl > < nl > if isCancelled ( ) { < nl > return < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java < nl > index eb6553a . . 23ee3a1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java < nl > @ @ - 10 , 6 + 10 , 8 @ @ import im . actor . core . entity . FileReference ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . internal . file . DownloadManager ; < nl > + import im . actor . core . modules . internal . file . FileUrlInt ; < nl > + import im . actor . core . modules . internal . file . FileUrlLoader ; < nl > import im . actor . core . modules . internal . file . UploadManager ; < nl > import im . actor . core . modules . internal . file . entity . Downloaded ; < nl > import im . actor . core . util . BaseKeyValueEngine ; < nl > @ @ - 17 , 6 + 19 , 7 @ @ import im . actor . core . viewmodel . FileCallback ; < nl > import im . actor . core . viewmodel . FileEventCallback ; < nl > import im . actor . core . viewmodel . UploadFileCallback ; < nl > import im . actor . runtime . * ; < nl > + import im . actor . runtime . actors . Actor ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . actors . Props ; < nl > @ @ - 30 , 6 + 33 , 7 @ @ public class FilesModule extends AbsModule { < nl > private KeyValueEngine < Downloaded > downloadedEngine ; < nl > private ActorRef downloadManager ; < nl > private ActorRef uploadManager ; < nl > + private FileUrlInt fileUrlInt ; < nl > < nl > public FilesModule ( final ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 53 , 6 + 57 , 12 @ @ public class FilesModule extends AbsModule { < nl > } < nl > < nl > public void run ( ) { < nl > + fileUrlInt = new FileUrlInt ( system ( ) . actorOf ( " actor / download / urls " , new ActorCreator ( ) { < nl > + @ Override < nl > + public Actor create ( ) { < nl > + return new FileUrlLoader ( context ( ) ) ; < nl > + } < nl > + } ) ) ; < nl > downloadManager = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { < nl > @ Override < nl > public DownloadManager create ( ) { < nl > @ @ - 71 , 6 + 81 , 10 @ @ public class FilesModule extends AbsModule { < nl > return downloadedEngine ; < nl > } < nl > < nl > + public FileUrlInt getFileUrlInt ( ) { < nl > + return fileUrlInt ; < nl > + } < nl > + < nl > public void subscribe ( FileEventCallback callback ) { < nl > downloadManager . send ( new DownloadManager . SubscribeToDownloads ( callback ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java < nl > index 5f8926c . . 897eb6b 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java < nl > @ @ - 56 , 10 + 56 , 9 @ @ public class DownloadManager extends ModuleActor { < nl > < nl > Downloaded downloaded1 = downloaded . getValue ( fileId ) ; < nl > if ( downloaded1 ! = null ) { < nl > - / / FileSystemProvider provider = modules ( ) . getConfiguration ( ) . getFileSystemProvider ( ) ; < nl > FileSystemReference reference = Storage . fileFromDescriptor ( downloaded1 . getDescriptor ( ) ) ; < nl > - boolean isExist = true ; / / reference . isExist ( ) ; < nl > - int fileSize = downloaded1 . getFileSize ( ) ; / / reference . getSize ( ) ; < nl > + boolean isExist = reference . isExist ( ) ; < nl > + int fileSize = reference . getSize ( ) ; < nl > if ( isExist & & fileSize = = downloaded1 . getFileSize ( ) ) { < nl > if ( LOG ) { < nl > Log . d ( TAG , " - Downloaded " ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java < nl > index 8ec0a07 . . 0243f17 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java < nl > @ @ - 19 , 6 + 19 , 7 @ @ import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . actors . Cancellable ; < nl > import im . actor . runtime . files . FileSystemReference ; < nl > import im . actor . runtime . files . OutputFile ; < nl > + import im . actor . runtime . function . Consumer ; < nl > import im . actor . runtime . http . FileDownloadCallback ; < nl > < nl > public class DownloadTask extends ModuleActor { < nl > @ @ - 98 , 25 + 99 , 26 @ @ public class DownloadTask extends ModuleActor { < nl > if ( LOG ) { < nl > Log . d ( TAG , " Loading url . . . " ) ; < nl > } < nl > - request ( new RequestGetFileUrl ( new ApiFileLocation ( fileReference . getFileId ( ) , < nl > - fileReference . getAccessHash ( ) ) ) , new RpcCallback < ResponseGetFileUrl > ( ) { < nl > + < nl > + context ( ) . getFilesModule ( ) . getFileUrlInt ( ) . askForUrl ( fileReference . getFileId ( ) , < nl > + fileReference . getAccessHash ( ) ) . then ( new Consumer < String > ( ) { < nl > @ Override < nl > - public void onResult ( ResponseGetFileUrl response ) { < nl > - fileUrl = response . getUrl ( ) ; < nl > + public void apply ( String url ) { < nl > + fileUrl = url ; < nl > if ( LOG ) { < nl > Log . d ( TAG , " Loaded file url : " + fileUrl ) ; < nl > } < nl > startDownload ( ) ; < nl > } < nl > - < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > @ Override < nl > - public void onError ( RpcException e ) { < nl > + public void apply ( Exception e ) { < nl > if ( LOG ) { < nl > Log . d ( TAG , " Unable to load file url " ) ; < nl > } < nl > reportError ( ) ; < nl > } < nl > - } ) ; < nl > + } ) . done ( self ( ) ) ; < nl > } < nl > < nl > private void startDownload ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / FileUrlInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / FileUrlInt . java < nl > new file mode 100644 < nl > index 0000000 . . 6eb86b4 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / FileUrlInt . java < nl > @ @ - 0 , 0 + 1 , 18 @ @ < nl > + package im . actor . core . modules . internal . file ; < nl > + < nl > + import org . jetbrains . annotations . NotNull ; < nl > + < nl > + import im . actor . runtime . actors . ActorInterface ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + import im . actor . runtime . promise . Promise ; < nl > + < nl > + public class FileUrlInt extends ActorInterface { < nl > + < nl > + public FileUrlInt ( @ NotNull ActorRef dest ) { < nl > + super ( dest ) ; < nl > + } < nl > + < nl > + public Promise < String > askForUrl ( long fileId , long accessHash ) { < nl > + return ask ( new FileUrlLoader . AskUrl ( fileId , accessHash ) ) ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / FileUrlLoader . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / FileUrlLoader . java < nl > new file mode 100644 < nl > index 0000000 . . 3c1abd2 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / FileUrlLoader . java < nl > @ @ - 0 , 0 + 1 , 178 @ @ < nl > + package im . actor . core . modules . internal . file ; < nl > + < nl > + import org . jetbrains . annotations . NotNull ; < nl > + < nl > + import java . util . ArrayList ; < nl > + import java . util . HashMap ; < nl > + < nl > + import im . actor . core . api . ApiFileLocation ; < nl > + import im . actor . core . api . ApiFileUrlDescription ; < nl > + import im . actor . core . api . rpc . RequestGetFileUrls ; < nl > + import im . actor . core . api . rpc . ResponseGetFileUrls ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . util . ModuleActor ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . Cancellable ; < nl > + import im . actor . runtime . actors . ask . AskMessage ; < nl > + import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . promise . Promise ; < nl > + import im . actor . runtime . promise . PromiseFunc ; < nl > + import im . actor . runtime . promise . PromiseResolver ; < nl > + < nl > + public class FileUrlLoader extends ModuleActor { < nl > + < nl > + private HashMap < Long , Promise < String > > requestedFiles = new HashMap < > ( ) ; < nl > + < nl > + private ArrayList < RequestedFile > pendingFiles = new ArrayList < > ( ) ; < nl > + private boolean isExecuting = false ; < nl > + private Cancellable checkCancellable ; < nl > + < nl > + public FileUrlLoader ( ModuleContext context ) { < nl > + super ( context ) ; < nl > + } < nl > + < nl > + public void checkQueue ( ) { < nl > + if ( isExecuting ) { < nl > + return ; < nl > + } < nl > + < nl > + if ( pendingFiles . size ( ) = = 0 ) { < nl > + return ; < nl > + } < nl > + < nl > + final ArrayList < RequestedFile > destFiles = new ArrayList < > ( pendingFiles ) ; < nl > + pendingFiles . clear ( ) ; < nl > + < nl > + isExecuting = true ; < nl > + ArrayList < ApiFileLocation > locations = new ArrayList < > ( ) ; < nl > + for ( RequestedFile f : destFiles ) { < nl > + Log . d ( " FileUrlLoader " , " api : " + f . getFileId ( ) ) ; < nl > + locations . add ( new ApiFileLocation ( f . getFileId ( ) , f . getAccessHash ( ) ) ) ; < nl > + } < nl > + api ( new RequestGetFileUrls ( locations ) ) . then ( new Consumer < ResponseGetFileUrls > ( ) { < nl > + @ Override < nl > + public void apply ( ResponseGetFileUrls responseGetFileUrls ) { < nl > + < nl > + outer : < nl > + for ( RequestedFile f : destFiles ) { < nl > + for ( ApiFileUrlDescription urlDescription : responseGetFileUrls . getFileUrls ( ) ) { < nl > + if ( f . getFileId ( ) = = urlDescription . getFileId ( ) ) { < nl > + Log . d ( " FileUrlLoader " , " resp : " + f . getFileId ( ) ) ; < nl > + / / TODO : Implement Timeouts < nl > + f . getResolver ( ) . result ( urlDescription . getUrl ( ) ) ; < nl > + < nl > + continue outer ; < nl > + } < nl > + } < nl > + } < nl > + isExecuting = false ; < nl > + scheduleCheck ( ) ; < nl > + } < nl > + } ) . failure ( new Consumer < Exception > ( ) { < nl > + @ Override < nl > + public void apply ( Exception e ) { < nl > + for ( RequestedFile f : destFiles ) { < nl > + f . getResolver ( ) . error ( e ) ; < nl > + } < nl > + isExecuting = false ; < nl > + scheduleCheck ( ) ; < nl > + } < nl > + } ) . done ( self ( ) ) ; < nl > + } < nl > + < nl > + public Promise < String > askUrl ( final long fileId , final long accessHash ) { < nl > + Log . d ( " FileUrlLoader " , " request : " + fileId ) ; < nl > + if ( requestedFiles . containsKey ( fileId ) ) { < nl > + return requestedFiles . get ( fileId ) ; < nl > + } < nl > + final Promise < String > res = new Promise < > ( new PromiseFunc < String > ( ) { < nl > + @ Override < nl > + public void exec ( @ NotNull PromiseResolver < String > resolver ) { < nl > + pendingFiles . add ( new RequestedFile ( fileId , accessHash , resolver ) ) ; < nl > + scheduleCheck ( ) ; < nl > + } < nl > + } ) ; < nl > + requestedFiles . put ( fileId , res ) ; < nl > + return res ; < nl > + } < nl > + < nl > + private void scheduleCheck ( ) { < nl > + if ( checkCancellable ! = null ) { < nl > + checkCancellable . cancel ( ) ; < nl > + < nl > + } < nl > + checkCancellable = schedule ( new CheckQueue ( ) , 500 ) ; < nl > + } < nl > + < nl > + < nl > + / / < nl > + / / Messages < nl > + / / < nl > + < nl > + @ Override < nl > + public Promise onAsk ( Object message ) throws Exception { < nl > + if ( message instanceof AskUrl ) { < nl > + AskUrl askUrl = ( AskUrl ) message ; < nl > + return askUrl ( askUrl . getFileId ( ) , askUrl . getAccessHash ( ) ) ; < nl > + } else { < nl > + return super . onAsk ( message ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof CheckQueue ) { < nl > + checkQueue ( ) ; < nl > + } else { < nl > + super . onReceive ( message ) ; < nl > + } < nl > + } < nl > + < nl > + private static class RequestedFile { < nl > + < nl > + private final long fileId ; < nl > + private final long accessHash ; < nl > + private final PromiseResolver < String > resolver ; < nl > + < nl > + public RequestedFile ( long fileId , long accessHash , PromiseResolver < String > resolver ) { < nl > + this . fileId = fileId ; < nl > + this . accessHash = accessHash ; < nl > + this . resolver = resolver ; < nl > + } < nl > + < nl > + public long getFileId ( ) { < nl > + return fileId ; < nl > + } < nl > + < nl > + public long getAccessHash ( ) { < nl > + return accessHash ; < nl > + } < nl > + < nl > + public PromiseResolver < String > getResolver ( ) { < nl > + return resolver ; < nl > + } < nl > + } < nl > + < nl > + public static class AskUrl implements AskMessage < String > { < nl > + < nl > + private long fileId ; < nl > + private long accessHash ; < nl > + < nl > + public AskUrl ( long fileId , long accessHash ) { < nl > + this . fileId = fileId ; < nl > + this . accessHash = accessHash ; < nl > + } < nl > + < nl > + public long getFileId ( ) { < nl > + return fileId ; < nl > + } < nl > + < nl > + public long getAccessHash ( ) { < nl > + return accessHash ; < nl > + } < nl > + } < nl > + < nl > + private static class CheckQueue { < nl > + < nl > + } < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java < nl > index 3607672 . . 3a2ba49 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java < nl > @ @ - 187 , 7 + 187 , 8 @ @ public class Promise < T > { < nl > @ ObjectiveCName ( " done : " ) < nl > public Promise < T > done ( PromiseDispatcher dispatcher ) { < nl > if ( isStarted ) { < nl > - throw new RuntimeException ( " Promise already started ! " ) ; < nl > + / / throw new RuntimeException ( " Promise already started ! " ) ; < nl > + return this ; < nl > } < nl > isStarted = true ; < nl > dispatchActor = dispatcher ;

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 index 2cd5e59 . . 4d86af2 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / calls / CallFragment . java 
 @ @ - 657 , 59 + 657 , 49 @ @ public class CallFragment extends BaseFragment { 
 / / 
 / / Bind Their Stream 
 / / 
 - / / ACTIVITY _ BINDER . bind ( call . getMediaStreams ( ) , ( theirStream , streamModel ) - > { 
 - / / boolean isNeedUnbind = true ; 
 - / / if ( theirStream ! = null ) { 
 - / / for ( CallMediaSource mediaSource : theirStream ) { 
 - / / MediaStream stream = ( ( AndroidMediaStream ) mediaSource . getStream ( ) ) . getStream ( ) ; 
 - / / if ( stream . videoTracks . size ( ) > 0 | | stream . preservedVideoTracks . size ( ) > 0 ) { 
 - / / 
 - / / if ( ! isRemoteViewConfigured ) { 
 - / / remoteVideoView . init ( eglContext . getEglBaseContext ( ) , null ) ; 
 - / / isRemoteViewConfigured = true ; 
 - / / } 
 - / / 
 - / / VideoTrack videoTrack ; 
 - / / if ( stream . videoTracks . size ( ) > 0 ) { 
 - / / videoTrack = stream . videoTracks . get ( 0 ) ; 
 - / / } else if ( stream . preservedVideoTracks . size ( ) > 0 ) { 
 - / / videoTrack = stream . preservedVideoTracks . get ( 0 ) ; 
 - / / } else { 
 - / / throw new RuntimeException ( " Impossible " ) ; 
 - / / } 
 - / / 
 - / / if ( videoTrack ! = remoteTrack ) { 
 - / / if ( remoteTrack ! = null ) { 
 - / / remoteTrack . removeRenderer ( remoteRender ) ; 
 - / / } 
 - / / 
 - / / remoteTrack = videoTrack ; 
 - / / remoteTrack . addRenderer ( remoteRender ) ; 
 - / / remoteVideoView . setVisibility ( View . VISIBLE ) ; 
 - / / avatarView . setVisibility ( View . INVISIBLE ) ; 
 - / / nameTV . setVisibility ( View . INVISIBLE ) ; 
 - / / } 
 - / / isNeedUnbind = false ; 
 - / / break ; 
 - / / } 
 - / / } 
 - / / 
 - / / } 
 - / / 
 - / / if ( isNeedUnbind ) { 
 - / / if ( remoteTrack ! = null ) { 
 - / / remoteTrack . removeRenderer ( remoteRender ) ; 
 - / / remoteTrack = null ; 
 - / / } 
 - / / if ( isRemoteViewConfigured ) { 
 - / / remoteVideoView . release ( ) ; 
 - / / isRemoteViewConfigured = false ; 
 - / / } 
 - / / remoteVideoView . setVisibility ( View . INVISIBLE ) ; 
 - / / avatarView . setVisibility ( View . VISIBLE ) ; 
 - / / nameTV . setVisibility ( View . VISIBLE ) ; 
 - / / } 
 - / / } ) ; 
 + 
 + ACTIVITY _ BINDER . bind ( call . getTheirVideoTracks ( ) , ( videoTracks , valueModel ) - > { 
 + boolean isNeedUnbind = true ; 
 + 
 + if ( videoTracks . size ( ) > 0 ) { 
 + 
 + if ( ! isRemoteViewConfigured ) { 
 + remoteVideoView . init ( eglContext . getEglBaseContext ( ) , null ) ; 
 + isRemoteViewConfigured = true ; 
 + } 
 + 
 + VideoTrack videoTrack = ( ( AndroidVideoTrack ) videoTracks . get ( 0 ) ) . getVideoTrack ( ) ; 
 + 
 + if ( videoTrack ! = remoteTrack ) { 
 + if ( remoteTrack ! = null ) { 
 + remoteTrack . removeRenderer ( remoteRender ) ; 
 + } 
 + 
 + remoteTrack = videoTrack ; 
 + remoteTrack . addRenderer ( remoteRender ) ; 
 + remoteVideoView . setVisibility ( View . VISIBLE ) ; 
 + avatarView . setVisibility ( View . INVISIBLE ) ; 
 + nameTV . setVisibility ( View . INVISIBLE ) ; 
 + } 
 + isNeedUnbind = false ; 
 + 
 + } 
 + 
 + if ( isNeedUnbind ) { 
 + if ( remoteTrack ! = null ) { 
 + remoteTrack . removeRenderer ( remoteRender ) ; 
 + remoteTrack = null ; 
 + } 
 + if ( isRemoteViewConfigured ) { 
 + remoteVideoView . release ( ) ; 
 + isRemoteViewConfigured = false ; 
 + } 
 + remoteVideoView . setVisibility ( View . INVISIBLE ) ; 
 + avatarView . setVisibility ( View . VISIBLE ) ; 
 + nameTV . setVisibility ( View . VISIBLE ) ; 
 + } 
 + } ) ; 
 + 
 } else { 
 videoTv . setTextColor ( getResources ( ) . getColor ( R . color . picker _ grey ) ) ; 
 videoIcon . setTint ( getResources ( ) . getColor ( R . color . picker _ grey ) ) ; 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 index c0b8d92 . . f03c37f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaWebRTCRuntime . swift 
 @ @ - 85 , 9 + 85 , 39 @ @ class CocoaWebRTCRuntime : NSObject , ARWebRTCRuntime { 
 @ objc class MediaStream : NSObject , ARWebRTCMediaStream { 
 
 let stream : RTCMediaStream 
 + let audioTracks : IOSObjectArray 
 + let videoTracks : IOSObjectArray 
 + let allTracks : IOSObjectArray 
 
 init ( stream : RTCMediaStream ) { 
 self . stream = stream 
 + 
 + self . audioTracks = IOSObjectArray ( length : UInt ( stream . audioTracks . count ) , type : ARWebRTCMediaTrack _ class _ ( ) ) 
 + self . videoTracks = IOSObjectArray ( length : UInt ( stream . videoTracks . count ) , type : ARWebRTCMediaTrack _ class _ ( ) ) 
 + self . allTracks = IOSObjectArray ( length : UInt ( stream . audioTracks . count + stream . videoTracks . count ) , type : ARWebRTCMediaTrack _ class _ ( ) ) 
 + 
 + for i in 0 . . < stream . audioTracks . count { 
 + let track = CocoaAudioTrack ( audioTrack : stream . audioTracks [ i ] as ! RTCAudioTrack ) 
 + audioTracks . replaceObjectAtIndex ( UInt ( i ) , withObject : track ) 
 + allTracks . replaceObjectAtIndex ( UInt ( i ) , withObject : track ) 
 + } 
 + for i in 0 . . < stream . videoTracks . count { 
 + let track = CocoaVideoTrack ( videoTrack : stream . videoTracks [ i ] as ! RTCVideoTrack ) 
 + videoTracks . replaceObjectAtIndex ( UInt ( i ) , withObject : track ) 
 + allTracks . replaceObjectAtIndex ( UInt ( i + audioTracks . length ( ) ) , withObject : track ) 
 + } 
 + } 
 + 
 + func getAudioTracks ( ) - > IOSObjectArray ! { 
 + return audioTracks 
 + } 
 + 
 + func getVideoTracks ( ) - > IOSObjectArray ! { 
 + return videoTracks 
 + } 
 + 
 + func getTracks ( ) - > IOSObjectArray ! { 
 + return allTracks 
 } 
 
 func close ( ) { 
 @ @ - 102 , 6 + 132 , 48 @ @ class CocoaWebRTCRuntime : NSObject , ARWebRTCRuntime { 
 } 
 } 
 
 + public class CocoaAudioTrack : NSObject , ARWebRTCMediaTrack { 
 + 
 + public let audioTrack : RTCAudioTrack 
 + 
 + public init ( let audioTrack : RTCAudioTrack ) { 
 + self . audioTrack = audioTrack 
 + } 
 + 
 + public func getTrackType ( ) - > jint { 
 + return ARWebRTCTrackType _ AUDIO 
 + } 
 + 
 + public func setEnabledWithBoolean ( isEnabled : jboolean ) { 
 + audioTrack . setEnabled ( isEnabled ) 
 + } 
 + 
 + public func isEnabled ( ) - > jboolean { 
 + return audioTrack . isEnabled ( ) 
 + } 
 + } 
 + 
 + public class CocoaVideoTrack : NSObject , ARWebRTCMediaTrack { 
 + 
 + public let videoTrack : RTCVideoTrack 
 + 
 + public init ( let videoTrack : RTCVideoTrack ) { 
 + self . videoTrack = videoTrack 
 + } 
 + 
 + public func getTrackType ( ) - > jint { 
 + return ARWebRTCTrackType _ VIDEO 
 + } 
 + 
 + public func setEnabledWithBoolean ( isEnabled : jboolean ) { 
 + videoTrack . setEnabled ( isEnabled ) 
 + } 
 + 
 + public func isEnabled ( ) - > jboolean { 
 + return videoTrack . isEnabled ( ) 
 + } 
 + } 
 + 
 class CocoaWebRTCPeerConnection : NSObject , ARWebRTCPeerConnection , RTCPeerConnectionDelegate { 
 
 private var peerConnection : RTCPeerConnection ! 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 index 81f4afb . . 3c07df7 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 @ @ - 204 , 8 + 204 , 8 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { 
 / / Binding State 
 / / 
 
 - binder . bind ( call . isMuted ) { ( value : JavaLangBoolean ! ) - > ( ) in 
 - self . muteButton . filled = value . booleanValue ( ) 
 + binder . bind ( call . isAudioEnabled ) { ( value : JavaLangBoolean ! ) - > ( ) in 
 + self . muteButton . filled = ! value . booleanValue ( ) 
 } 
 
 binder . bind ( call . state ) { ( value : ACCallState ! ) - > ( ) in 
 @ @ - 321 , 23 + 321 , 47 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { 
 } 
 
 / / Local Video can be only one , so we can just keep active track reference and handle changes 
 - binder . bind ( call . ownMediaStream , valueModel2 : call . isVideoEnabled ) { ( stream : MediaStream ! , value2 : JavaLangBoolean ! ) in 
 + / / binder . bind ( call . ownMediaStream , valueModel2 : call . isVideoEnabled ) { ( stream : MediaStream ! , value2 : JavaLangBoolean ! ) in 
 + / / var needUnbind = true 
 + / / if value2 . booleanValue ( ) { 
 + / / if let s = stream { 
 + / / if s . stream . videoTracks . count > 0 { 
 + / / let t = s . stream . videoTracks [ 0 ] as ! RTCVideoTrack 
 + / / if self . localVideoTrack ! = t { 
 + / / if self . localVideoTrack ! = nil { 
 + / / self . localVideoTrack . removeRenderer ( self . localView ) 
 + / / } 
 + / / self . localVideoTrack = t 
 + / / self . localView . showViewAnimated ( ) 
 + / / t . addRenderer ( self . localView ) 
 + / / } 
 + / / needUnbind = false 
 + / / } 
 + / / } 
 + / / } 
 + / / if needUnbind { 
 + / / if self . localVideoTrack ! = nil { 
 + / / self . localVideoTrack . removeRenderer ( self . localView ) 
 + / / self . localVideoTrack = nil 
 + / / } 
 + / / self . localView . hideViewAnimated ( ) 
 + / / } 
 + / / } 
 + 
 + binder . bind ( call . ownVideoTracks , closure : { ( videoTracks : ACArrayListMediaTrack ! ) in 
 var needUnbind = true 
 - if value2 . booleanValue ( ) { 
 - if let s = stream { 
 - if s . stream . videoTracks . count > 0 { 
 - let t = s . stream . videoTracks [ 0 ] as ! RTCVideoTrack 
 - if self . localVideoTrack ! = t { 
 - if self . localVideoTrack ! = nil { 
 - self . localVideoTrack . removeRenderer ( self . localView ) 
 - } 
 - self . localVideoTrack = t 
 - self . localView . showViewAnimated ( ) 
 - t . addRenderer ( self . localView ) 
 - } 
 - needUnbind = false 
 + if videoTracks . size ( ) > 0 { 
 + 
 + let track = ( videoTracks . getWithInt ( 0 ) as ! CocoaVideoTrack ) . videoTrack 
 + if self . localVideoTrack ! = track { 
 + if self . localVideoTrack ! = nil { 
 + self . localVideoTrack . removeRenderer ( self . localView ) 
 } 
 + self . localVideoTrack = track 
 + self . localView . showViewAnimated ( ) 
 + track . addRenderer ( self . localView ) 
 } 
 + needUnbind = false 
 } 
 if needUnbind { 
 if self . localVideoTrack ! = nil { 
 @ @ - 346 , 28 + 370 , 25 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { 
 } 
 self . localView . hideViewAnimated ( ) 
 } 
 - } 
 - 
 + } ) 
 + 
 / / In Private Calls we can have only one video stream from other side 
 / / We will assume only one active peer connection 
 - binder . bind ( call . mediaStreams ) { ( value : JavaUtilArrayList ! ) - > ( ) in 
 + 
 + binder . bind ( call . theirVideoTracks , closure : { ( videoTracks : ACArrayListMediaTrack ! ) in 
 var needUnbind = true 
 - for source in value ! { 
 - let casted = source as ! ACCallMediaSource 
 - let stream = ( casted . stream as ! MediaStream ) . stream 
 - if / * casted . isVideoEnabled & & * / stream . videoTracks . count > 0 { 
 - let t = stream . videoTracks [ 0 ] as ! RTCVideoTrack 
 - if self . remoteVideoTrack ! = t { 
 - if self . remoteVideoTrack ! = nil { 
 - self . remoteVideoTrack . removeRenderer ( self . remoteView ) 
 - } 
 - self . remoteVideoTrack = t 
 - self . remoteView . showViewAnimated ( ) 
 - t . addRenderer ( self . remoteView ) 
 + if videoTracks . size ( ) > 0 { 
 + 
 + let track = ( videoTracks . getWithInt ( 0 ) as ! CocoaVideoTrack ) . videoTrack 
 + if self . remoteVideoTrack ! = track { 
 + if self . remoteVideoTrack ! = nil { 
 + self . remoteVideoTrack . removeRenderer ( self . remoteView ) 
 } 
 - needUnbind = false 
 - break 
 + self . remoteVideoTrack = track 
 + self . remoteView . showViewAnimated ( ) 
 + track . addRenderer ( self . remoteView ) 
 } 
 + needUnbind = false 
 } 
 if needUnbind { 
 if self . remoteVideoTrack ! = nil { 
 @ @ - 376 , 7 + 397 , 36 @ @ public class AACallViewController : AAViewController , RTCEAGLVideoViewDelegate { 
 } 
 self . remoteView . hideViewAnimated ( ) 
 } 
 - } 
 + } ) 
 + 
 + 
 + / / binder . bind ( call . mediaStreams ) { ( value : JavaUtilArrayList ! ) - > ( ) in 
 + / / var needUnbind = true 
 + / / for source in value ! { 
 + / / let casted = source as ! ACCallMediaSource 
 + / / let stream = ( casted . stream as ! MediaStream ) . stream 
 + / / if / * casted . isVideoEnabled & & * / stream . videoTracks . count > 0 { 
 + / / let t = stream . videoTracks [ 0 ] as ! RTCVideoTrack 
 + / / if self . remoteVideoTrack ! = t { 
 + / / if self . remoteVideoTrack ! = nil { 
 + / / self . remoteVideoTrack . removeRenderer ( self . remoteView ) 
 + / / } 
 + / / self . remoteVideoTrack = t 
 + / / self . remoteView . showViewAnimated ( ) 
 + / / t . addRenderer ( self . remoteView ) 
 + / / } 
 + / / needUnbind = false 
 + / / break 
 + / / } 
 + / / } 
 + / / if needUnbind { 
 + / / if self . remoteVideoTrack ! = nil { 
 + / / self . remoteVideoTrack . removeRenderer ( self . remoteView ) 
 + / / self . remoteVideoTrack = nil 
 + / / } 
 + / / self . remoteView . hideViewAnimated ( ) 
 + / / } 
 + / / } 
 } else { 
 self . videoButton . filled = false 
 self . videoButton . enabled = false 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index a3ec1a2 . . 8f374e2 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 17 , 6 + 17 , 7 @ @ import im . actor . core . viewmodel . CallMediaSource ; 
 import im . actor . core . viewmodel . CallState ; 
 import im . actor . core . viewmodel . CallVM ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 + import im . actor . core . viewmodel . generics . ArrayListMediaTrack ; 
 import im . actor . runtime . Log ; 
 import im . actor . runtime . Runtime ; 
 import im . actor . runtime . actors . messages . PoisonPill ; 
 @ @ - 154 , 11 + 155 , 11 @ @ public class CallActor extends AbsCallActor { 
 @ Override 
 public void onTrackAdded ( long deviceId , WebRTCMediaTrack track ) { 
 if ( track . getTrackType ( ) = = WebRTCTrackType . AUDIO ) { 
 - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getTheirAudioTracks ( ) . get ( ) ) ; 
 + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getTheirAudioTracks ( ) . get ( ) ) ; 
 tracks . add ( track ) ; 
 callVM . getTheirAudioTracks ( ) . change ( tracks ) ; 
 } else if ( track . getTrackType ( ) = = WebRTCTrackType . VIDEO ) { 
 - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getTheirVideoTracks ( ) . get ( ) ) ; 
 + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getTheirVideoTracks ( ) . get ( ) ) ; 
 tracks . add ( track ) ; 
 callVM . getTheirVideoTracks ( ) . change ( tracks ) ; 
 } else { 
 @ @ - 169 , 11 + 170 , 11 @ @ public class CallActor extends AbsCallActor { 
 @ Override 
 public void onTrackRemoved ( long deviceId , WebRTCMediaTrack track ) { 
 if ( track . getTrackType ( ) = = WebRTCTrackType . AUDIO ) { 
 - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getTheirAudioTracks ( ) . get ( ) ) ; 
 + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getTheirAudioTracks ( ) . get ( ) ) ; 
 tracks . remove ( track ) ; 
 callVM . getTheirAudioTracks ( ) . change ( tracks ) ; 
 } else if ( track . getTrackType ( ) = = WebRTCTrackType . VIDEO ) { 
 - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getTheirVideoTracks ( ) . get ( ) ) ; 
 + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getTheirVideoTracks ( ) . get ( ) ) ; 
 tracks . remove ( track ) ; 
 callVM . getTheirVideoTracks ( ) . change ( tracks ) ; 
 } else { 
 @ @ - 184 , 11 + 185 , 11 @ @ public class CallActor extends AbsCallActor { 
 @ Override 
 public void onOwnTrackAdded ( WebRTCMediaTrack track ) { 
 if ( track . getTrackType ( ) = = WebRTCTrackType . AUDIO ) { 
 - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getOwnAudioTracks ( ) . get ( ) ) ; 
 + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getOwnAudioTracks ( ) . get ( ) ) ; 
 tracks . add ( track ) ; 
 callVM . getOwnAudioTracks ( ) . change ( tracks ) ; 
 } else if ( track . getTrackType ( ) = = WebRTCTrackType . VIDEO ) { 
 - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getOwnVideoTracks ( ) . get ( ) ) ; 
 + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getOwnVideoTracks ( ) . get ( ) ) ; 
 tracks . add ( track ) ; 
 callVM . getOwnVideoTracks ( ) . change ( tracks ) ; 
 } else { 
 @ @ - 199 , 11 + 200 , 11 @ @ public class CallActor extends AbsCallActor { 
 @ Override 
 public void onOwnTrackRemoved ( WebRTCMediaTrack track ) { 
 if ( track . getTrackType ( ) = = WebRTCTrackType . AUDIO ) { 
 - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getOwnAudioTracks ( ) . get ( ) ) ; 
 + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getOwnAudioTracks ( ) . get ( ) ) ; 
 tracks . remove ( track ) ; 
 callVM . getOwnAudioTracks ( ) . change ( tracks ) ; 
 } else if ( track . getTrackType ( ) = = WebRTCTrackType . VIDEO ) { 
 - ArrayList < WebRTCMediaTrack > tracks = new ArrayList < > ( callVM . getOwnVideoTracks ( ) . get ( ) ) ; 
 + ArrayListMediaTrack tracks = new ArrayListMediaTrack ( callVM . getOwnVideoTracks ( ) . get ( ) ) ; 
 tracks . remove ( track ) ; 
 callVM . getOwnVideoTracks ( ) . change ( tracks ) ; 
 } else { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 index c57505c . . f126ede 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerNodeActor . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import im . actor . core . modules . calls . peers . messages . RTCAnswer ; 
 import im . actor . core . modules . calls . peers . messages . RTCCandidate ; 
 import im . actor . core . modules . calls . peers . messages . RTCCloseSession ; 
 import im . actor . core . modules . calls . peers . messages . RTCMasterAdvertised ; 
 + import im . actor . core . modules . calls . peers . messages . RTCMediaStateUpdated ; 
 import im . actor . core . modules . calls . peers . messages . RTCNeedOffer ; 
 import im . actor . core . modules . calls . peers . messages . RTCOffer ; 
 import im . actor . core . modules . calls . peers . messages . RTCStart ; 
 @ @ - 303 , 6 + 304 , 39 @ @ public class PeerNodeActor extends ModuleActor implements PeerConnectionCallback 
 } 
 } 
 
 + public void onStreamStateChanged ( boolean isAudioEnabled , boolean isVideoEnabled ) { 
 + if ( this . isAudioEnabled ! = isAudioEnabled ) { 
 + this . isAudioEnabled = isAudioEnabled ; 
 + if ( isStarted ) { 
 + for ( WebRTCMediaStream streams : theirMediaStreams ) { 
 + for ( WebRTCMediaTrack track : streams . getAudioTracks ( ) ) { 
 + track . setEnabled ( isAudioEnabled ) ; 
 + if ( isAudioEnabled ) { 
 + callback . onTrackAdded ( deviceId , track ) ; 
 + } else { 
 + callback . onTrackRemoved ( deviceId , track ) ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( this . isVideoEnabled ! = isVideoEnabled ) { 
 + this . isVideoEnabled = isVideoEnabled ; 
 + if ( isStarted ) { 
 + for ( WebRTCMediaStream streams : theirMediaStreams ) { 
 + for ( WebRTCMediaTrack track : streams . getVideoTracks ( ) ) { 
 + track . setEnabled ( isVideoEnabled ) ; 
 + if ( isVideoEnabled ) { 
 + callback . onTrackAdded ( deviceId , track ) ; 
 + } else { 
 + callback . onTrackRemoved ( deviceId , track ) ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + 
 public void onCloseSession ( long sessionId ) { 
 if ( ! closedSessions . contains ( sessionId ) ) { 
 closedSessions . add ( sessionId ) ; 
 @ @ - 417 , 6 + 451 , 9 @ @ public class PeerNodeActor extends ModuleActor implements PeerConnectionCallback 
 } else { 
 stash ( ) ; 
 } 
 + } else if ( message instanceof RTCMediaStateUpdated ) { 
 + RTCMediaStateUpdated stateUpdated = ( RTCMediaStateUpdated ) message ; 
 + onStreamStateChanged ( stateUpdated . isAudioEnabled ( ) , stateUpdated . isVideoEnabled ( ) ) ; 
 } else { 
 super . onReceive ( message ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java 
 index 45aa7df . . ffb16e9 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import com . google . j2objc . annotations . Property ; 
 import java . util . ArrayList ; 
 
 import im . actor . core . entity . Peer ; 
 + import im . actor . core . viewmodel . generics . ArrayListMediaTrack ; 
 import im . actor . core . viewmodel . generics . BooleanValueModel ; 
 import im . actor . runtime . mvvm . ValueModel ; 
 import im . actor . runtime . webrtc . WebRTCMediaStream ; 
 @ @ - 23 , 14 + 24 , 14 @ @ public class CallVM { 
 / / Own Stream 
 
 @ Property ( " nonatomic , readonly " ) 
 - private final ValueModel < ArrayList < WebRTCMediaTrack > > ownVideoTracks ; 
 + private final ValueModel < ArrayListMediaTrack > ownVideoTracks ; 
 @ Property ( " nonatomic , readonly " ) 
 - private final ValueModel < ArrayList < WebRTCMediaTrack > > ownAudioTracks ; 
 + private final ValueModel < ArrayListMediaTrack > ownAudioTracks ; 
 
 @ Property ( " nonatomic , readonly " ) 
 - private final ValueModel < ArrayList < WebRTCMediaTrack > > theirVideoTracks ; 
 + private final ValueModel < ArrayListMediaTrack > theirVideoTracks ; 
 @ Property ( " nonatomic , readonly " ) 
 - private final ValueModel < ArrayList < WebRTCMediaTrack > > theirAudioTracks ; 
 + private final ValueModel < ArrayListMediaTrack > theirAudioTracks ; 
 
 
 @ Property ( " nonatomic , readonly " ) 
 @ @ - 52 , 10 + 53 , 10 @ @ public class CallVM { 
 this . peer = peer ; 
 this . isOutgoing = isOutgoing ; 
 this . state = new ValueModel < > ( " calls . " + callId + " . state " , state ) ; 
 - this . ownVideoTracks = new ValueModel < > ( " calls . " + callId + " . own _ video " , new ArrayList < > ( ) ) ; 
 - this . ownAudioTracks = new ValueModel < > ( " calls . " + callId + " . own _ audio " , new ArrayList < > ( ) ) ; 
 - this . theirVideoTracks = new ValueModel < > ( " calls . " + callId + " . their _ video " , new ArrayList < > ( ) ) ; 
 - this . theirAudioTracks = new ValueModel < > ( " calls . " + callId + " . their _ audio " , new ArrayList < > ( ) ) ; 
 + this . ownVideoTracks = new ValueModel < > ( " calls . " + callId + " . own _ video " , new ArrayListMediaTrack ( ) ) ; 
 + this . ownAudioTracks = new ValueModel < > ( " calls . " + callId + " . own _ audio " , new ArrayListMediaTrack ( ) ) ; 
 + this . theirVideoTracks = new ValueModel < > ( " calls . " + callId + " . their _ video " , new ArrayListMediaTrack ( ) ) ; 
 + this . theirAudioTracks = new ValueModel < > ( " calls . " + callId + " . their _ audio " , new ArrayListMediaTrack ( ) ) ; 
 this . members = new ValueModel < > ( " calls . " + callId + " . members " , new ArrayList < > ( initialMembers ) ) ; 
 this . isAudioEnabled = new BooleanValueModel ( " calls . " + callId + " . audio _ enabled " , true ) ; 
 this . isVideoEnabled = new BooleanValueModel ( " calls . " + callId + " . video _ enabled " , isVideoEnabled ) ; 
 @ @ - 106 , 19 + 107 , 19 @ @ public class CallVM { 
 this . callEnd = callEnd ; 
 } 
 
 - public ValueModel < ArrayList < WebRTCMediaTrack > > getOwnVideoTracks ( ) { 
 + public ValueModel < ArrayListMediaTrack > getOwnVideoTracks ( ) { 
 return ownVideoTracks ; 
 } 
 
 - public ValueModel < ArrayList < WebRTCMediaTrack > > getOwnAudioTracks ( ) { 
 + public ValueModel < ArrayListMediaTrack > getOwnAudioTracks ( ) { 
 return ownAudioTracks ; 
 } 
 
 - public ValueModel < ArrayList < WebRTCMediaTrack > > getTheirVideoTracks ( ) { 
 + public ValueModel < ArrayListMediaTrack > getTheirVideoTracks ( ) { 
 return theirVideoTracks ; 
 } 
 
 - public ValueModel < ArrayList < WebRTCMediaTrack > > getTheirAudioTracks ( ) { 
 + public ValueModel < ArrayListMediaTrack > getTheirAudioTracks ( ) { 
 return theirAudioTracks ; 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListMediaTrack . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListMediaTrack . java 
 new file mode 100644 
 index 0000000 . . b5ab6cc 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / generics / ArrayListMediaTrack . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package im . actor . core . viewmodel . generics ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Collection ; 
 + 
 + import im . actor . runtime . webrtc . WebRTCMediaTrack ; 
 + 
 + public class ArrayListMediaTrack extends ArrayList < WebRTCMediaTrack > { 
 + 
 + public ArrayListMediaTrack ( int capacity ) { 
 + super ( capacity ) ; 
 + } 
 + 
 + public ArrayListMediaTrack ( ) { 
 + } 
 + 
 + public ArrayListMediaTrack ( Collection < ? extends WebRTCMediaTrack > collection ) { 
 + super ( collection ) ; 
 + } 
 + 
 + @ Override 
 + public WebRTCMediaTrack get ( int index ) { 
 + return super . get ( index ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift 
 index 717cf7d . . 6560c65 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / CocoaFileSystemRuntime . swift 
 @ @ - 32 , 27 + 32 , 41 @ @ class CocoaFiles { 
 func commitTempFile ( sourceFile : ARFileSystemReference ! , withFileId fileId : jlong , withFileName fileName : String ! ) - > ARFileSystemReference ! { 
 
 / / Finding file available name 
 - var index = 0 ; 
 - while ( manager . fileExistsAtPath ( " \ ( documentsFolder ) / Documents / \ ( fileId ) _ \ ( index ) _ \ ( fileName ) " ) ) { 
 - index = index + 1 
 - } 
 - let resultPath = " / Documents / \ ( fileId ) _ \ ( index ) _ \ ( fileName ) " 
 + 
 + / / let path = " \ ( documentsFolder ) / Documents / \ ( fileId ) _ \ ( fileName ) " 
 + let descriptor = " / Documents / \ ( fileId ) _ \ ( fileName ) " 
 + / / 
 + / / if manager . fileExistsAtPath ( " \ ( documentsFolder ) / Documents / \ ( fileId ) _ \ ( fileName ) " ) { 
 + / / do { 
 + / / try manager . removeItemAtPath ( path ) 
 + / / } catch _ { 
 + / / return nil 
 + / / } 
 + / / } 
 + 
 + let srcUrl = NSURL ( fileURLWithPath : documentsFolder + sourceFile . getDescriptor ( ) ! ) 
 + let destUrl = NSURL ( fileURLWithPath : documentsFolder + descriptor ) 
 + 
 + / / manager . replaceItemAtURL ( srcUrl , withItemAtURL : destUrl , backupItemName : nil , options : 0 , resultingItemURL : nil ) 
 
 / / Moving file to new place 
 + 
 do { 
 - try manager . moveItemAtPath ( documentsFolder + sourceFile . getDescriptor ( ) ! , toPath : documentsFolder + resultPath ) 
 - return CocoaFile ( path : resultPath ) 
 + try manager . replaceItemAtURL ( destUrl , withItemAtURL : srcUrl , backupItemName : nil , options : NSFileManagerItemReplacementOptions ( rawValue : 0 ) , resultingItemURL : nil ) 
 + 
 + / / try manager . moveItemAtPath ( documentsFolder + sourceFile . getDescriptor ( ) ! , toPath : path ) 
 + return CocoaFile ( path : descriptor ) 
 } catch _ { 
 return nil 
 } 
 } 
 
 func fileFromDescriptor ( descriptor : String ! ) - > ARFileSystemReference ! { 
 - return CocoaFile ( path : descriptor ) ; 
 + return CocoaFile ( path : descriptor ) 
 } 
 
 func isFsPersistent ( ) - > Bool { 
 - return true ; 
 + return true 
 } 
 } 
 
 @ @ - 85 , 7 + 99 , 7 @ @ class CocoaFile : NSObject , ARFileSystemReference { 
 
 func openWriteWithSize ( size : jint ) - > AROutputFile ! { 
 
 - let fileHandle = NSFileHandle ( forWritingAtPath : realPath ) ; 
 + let fileHandle = NSFileHandle ( forWritingAtPath : realPath ) 
 
 if ( fileHandle = = nil ) { 
 return nil 
 @ @ - 94 , 77 + 108 , 70 @ @ class CocoaFile : NSObject , ARFileSystemReference { 
 fileHandle ! . seekToFileOffset ( UInt64 ( size ) ) 
 fileHandle ! . seekToFileOffset ( 0 ) 
 
 - return CocoaOutputFile ( fileHandle : fileHandle ! ) ; 
 + return CocoaOutputFile ( fileHandle : fileHandle ! ) 
 } 
 
 func openRead ( ) - > ARInputFile ! { 
 
 - let fileHandle = NSFileHandle ( forReadingAtPath : realPath ) ; 
 + let fileHandle = NSFileHandle ( forReadingAtPath : realPath ) 
 
 if ( fileHandle = = nil ) { 
 return nil 
 } 
 
 - return CocoaInputFile ( fileHandle : fileHandle ! ) ; 
 + return CocoaInputFile ( fileHandle : fileHandle ! ) 
 } 
 } 
 
 class CocoaOutputFile : NSObject , AROutputFile { 
 
 - let fileHandle : NSFileHandle ; 
 + let fileHandle : NSFileHandle 
 
 - init ( fileHandle : NSFileHandle ) { 
 - self . fileHandle = fileHandle ; 
 + init ( fileHandle : NSFileHandle ) { 
 + self . fileHandle = fileHandle 
 } 
 
 func writeWithOffset ( fileOffset : jint , withData data : IOSByteArray ! , withDataOffset dataOffset : jint , withLength dataLen : jint ) - > Bool { 
 - let toWrite = NSMutableData ( length : Int ( dataLen ) ) ! ; 
 - var srcBuffer = UnsafeMutablePointer < UInt8 > ( data . buffer ( ) ) ; 
 - 
 - var destBuffer = UnsafeMutablePointer < UInt8 > ( toWrite . bytes ) ; 
 - for _ in 0 . . < dataLen { 
 - destBuffer . memory = srcBuffer . memory ; 
 - destBuffer + + ; 
 - srcBuffer + + ; 
 - } 
 
 - / / NSLog ( " Write to file \ ( fileOffset ) " ) 
 - fileHandle . seekToFileOffset ( UInt64 ( fileOffset ) ) ; 
 - fileHandle . writeData ( toWrite ) 
 - / / NSLog ( " Write to file \ ( fileOffset ) : end " ) 
 + let pointer = data . buffer ( ) . advancedBy ( Int ( dataOffset ) ) 
 + let srcData = NSData ( bytesNoCopy : pointer , length : Int ( dataLen ) , freeWhenDone : false ) 
 + 
 + fileHandle . seekToFileOffset ( UInt64 ( fileOffset ) ) 
 + fileHandle . writeData ( srcData ) 
 + 
 return true ; 
 } 
 
 func close ( ) - > Bool { 
 - / / NSLog ( " Close file " ) 
 self . fileHandle . synchronizeFile ( ) 
 self . fileHandle . closeFile ( ) 
 - / / NSLog ( " Close file end " ) 
 return true ; 
 } 
 } 
 
 class CocoaInputFile : NSObject , ARInputFile { 
 
 - let fileHandle : NSFileHandle ; 
 + let fileHandle : NSFileHandle 
 
 - init ( fileHandle : NSFileHandle ) { 
 - self . fileHandle = fileHandle ; 
 + init ( fileHandle : NSFileHandle ) { 
 + self . fileHandle = fileHandle 
 } 
 
 func readWithOffset ( fileOffset : jint , withData data : IOSByteArray ! , withDataOffset offset : jint , withLength len : jint , withCallback callback : ARFileReadCallback ! ) { 
 
 dispatchBackground { 
 - self . fileHandle . seekToFileOffset ( UInt64 ( fileOffset ) ) ; 
 - let readed : NSData = self . fileHandle . readDataOfLength ( Int ( len ) ) ; 
 
 - var srcBuffer = UnsafeMutablePointer < UInt8 > ( readed . bytes ) ; 
 - var destBuffer = UnsafeMutablePointer < UInt8 > ( data . buffer ( ) ) ; 
 - let len = min ( Int ( len ) , Int ( readed . length ) ) ; 
 + self . fileHandle . seekToFileOffset ( UInt64 ( fileOffset ) ) 
 + 
 + let readed : NSData = self . fileHandle . readDataOfLength ( Int ( len ) ) 
 + 
 + var srcBuffer = UnsafeMutablePointer < UInt8 > ( readed . bytes ) 
 + var destBuffer = UnsafeMutablePointer < UInt8 > ( data . buffer ( ) ) 
 + let len = min ( Int ( len ) , Int ( readed . length ) ) 
 for _ in offset . . < offset + len { 
 - destBuffer . memory = srcBuffer . memory ; 
 - destBuffer + + ; 
 - srcBuffer + + ; 
 + destBuffer . memory = srcBuffer . memory 
 + destBuffer + + 
 + srcBuffer + + 
 } 
 
 callback . onFileReadWithOffset ( fileOffset , withData : data , withDataOffset : offset , withLength : jint ( len ) ) 
 @ @ - 173 , 7 + 180 , 6 @ @ class CocoaInputFile : NSObject , ARInputFile { 
 
 func close ( ) - > Bool { 
 self . fileHandle . closeFile ( ) 
 - return true ; 
 - 
 + return true 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSPhoneBookProvider . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSPhoneBookProvider . swift 
 index c3d5419 . . 989aa64 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSPhoneBookProvider . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorCore / Providers / iOSPhoneBookProvider . swift 
 @ @ - 9 , 7 + 9 , 7 @ @ class PhoneBookProvider : NSObject , ACPhoneBookProvider { 
 
 func loadPhoneBookWithCallback ( callback : ACPhoneBookProvider _ Callback ! ) { 
 
 - dispatchBackground { 
 + dispatchBackgroundDelayed ( 5 . 0 ) { 
 
 let rawBook = ABAddressBookCreateWithOptions ( nil , nil ) ; 
 if ( rawBook = = nil ) { 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 
 index 52bcf04 . . dd0946f 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Content / Dialogs List / Cells / AADialogCell . swift 	 
 @ @ - 144 , 30 + 144 , 30 @ @ public class AADialogCell : AATableViewCell , AABindedCell { 
 / / 
 / / Message State 
 / / 
 - / / let messageState = item . status . ordinal ( ) 
 - / / if ( messageState = = ACMessageState . PENDING ( ) . ordinal ( ) ) { 
 - / / self . statusView . tintColor = dialogStatusSending 
 - / / self . statusView . image = chatIconClock 
 - / / self . statusView . hidden = false 
 - / / } else if ( messageState = = ACMessageState . READ ( ) . ordinal ( ) ) { 
 - / / self . statusView . tintColor = dialogStatusRead 
 - / / self . statusView . image = chatIconCheck2 
 - / / self . statusView . hidden = false 
 - / / } else if ( messageState = = ACMessageState . RECEIVED ( ) . ordinal ( ) ) { 
 - / / self . statusView . tintColor = dialogStatusReceived 
 - / / self . statusView . image = chatIconCheck2 
 - / / self . statusView . hidden = false 
 - / / } else if ( messageState = = ACMessageState . SENT ( ) . ordinal ( ) ) { 
 - / / self . statusView . tintColor = dialogStatusSent 
 - / / self . statusView . image = chatIconCheck1 
 - / / self . statusView . hidden = false 
 - / / } else if ( messageState = = ACMessageState . ERROR ( ) . ordinal ( ) ) { 
 - / / self . statusView . tintColor = dialogStatusError 
 - / / self . statusView . image = chatIconError 
 - / / self . statusView . hidden = false 
 - / / } else { 
 - / / self . statusView . hidden = true 
 - / / } 
 + let messageState = item . status . ordinal ( ) 
 + if ( messageState = = ACMessageState . PENDING ( ) . ordinal ( ) ) { 
 + self . statusView . tintColor = dialogStatusSending 
 + self . statusView . image = chatIconClock 
 + self . statusView . hidden = false 
 + } else if ( messageState = = ACMessageState . READ ( ) . ordinal ( ) ) { 
 + self . statusView . tintColor = dialogStatusRead 
 + self . statusView . image = chatIconCheck2 
 + self . statusView . hidden = false 
 + } else if ( messageState = = ACMessageState . RECEIVED ( ) . ordinal ( ) ) { 
 + self . statusView . tintColor = dialogStatusReceived 
 + self . statusView . image = chatIconCheck2 
 + self . statusView . hidden = false 
 + } else if ( messageState = = ACMessageState . SENT ( ) . ordinal ( ) ) { 
 + self . statusView . tintColor = dialogStatusSent 
 + self . statusView . image = chatIconCheck1 
 + self . statusView . hidden = false 
 + } else if ( messageState = = ACMessageState . ERROR ( ) . ordinal ( ) ) { 
 + self . statusView . tintColor = dialogStatusError 
 + self . statusView . image = chatIconError 
 + self . statusView . hidden = false 
 + } else { 
 + self . statusView . hidden = true 
 + } 
 
 / / Cancelling Renderer and forcing layouting to start new rendering 
 cellRenderer . cancelRender ( ) 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Dispatch . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Dispatch . swift 
 index a39f462 . . f98ad80 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Dispatch . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / SwiftExtensions / Dispatch . swift 
 @ @ - 12 , 7 + 12 , 7 @ @ public func dispatchOnUi ( closure : ( ) - > Void ) { 
 } ) 
 } 
 
 - public func dispatchAfterOnUi ( delay : Double , closure : ( ) - > Void ) { 
 + public func dispatchAfterOnUi ( delay : Double , closure : ( ) - > Void ) { 
 dispatch _ after ( dispatch _ time ( DISPATCH _ TIME _ NOW , Int64 ( delay * Double ( NSEC _ PER _ SEC ) ) ) , dispatch _ get _ main _ queue ( ) ) { ( ) - > Void in 
 closure ( ) 
 } 
 @ @ - 23 , 3 + 23 , 10 @ @ public func dispatchBackground ( closure : ( ) - > Void ) { 
 closure ( ) 
 } 
 } 
 + 
 + 
 + public func dispatchBackgroundDelayed ( delay : Double , closure : ( ) - > Void ) { 
 + dispatch _ after ( dispatch _ time ( DISPATCH _ TIME _ NOW , Int64 ( delay * Double ( NSEC _ PER _ SEC ) ) ) , backgroundQueue ) { 
 + closure ( ) 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift 
 index 72c10b5 . . c1d16dc 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Views / AAAvatarView . swift 
 @ @ - 109 , 7 + 109 , 7 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { 
 let fileRef = avatar ! . smallImage . fileReference ! 
 self . fileId = fileRef . getFileId ( ) 
 self . showPlaceholder = false 
 - / / Actor . startDownloadingWithReference ( fileRef ) 
 + Actor . startDownloadingWithReference ( fileRef ) 
 } else { 
 self . fileId = nil 
 self . showPlaceholder = true 
 @ @ - 249 , 9 + 249 , 7 @ @ public class AAAvatarView : UIView , YYAsyncLayerDelegate , ACFileEventCallback { 
 } 
 } else if let fp = filePath { 
 
 - / / TODO : Load Image 
 - 
 - let image : UIImage ? = nil / / UIImage ( contentsOfFile : fp ) 
 + let image : UIImage ? = UIImage ( contentsOfFile : fp ) 
 
 if isCancelled ( ) { 
 return 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java 
 index eb6553a . . 23ee3a1 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / FilesModule . java 
 @ @ - 10 , 6 + 10 , 8 @ @ import im . actor . core . entity . FileReference ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . internal . file . DownloadManager ; 
 + import im . actor . core . modules . internal . file . FileUrlInt ; 
 + import im . actor . core . modules . internal . file . FileUrlLoader ; 
 import im . actor . core . modules . internal . file . UploadManager ; 
 import im . actor . core . modules . internal . file . entity . Downloaded ; 
 import im . actor . core . util . BaseKeyValueEngine ; 
 @ @ - 17 , 6 + 19 , 7 @ @ import im . actor . core . viewmodel . FileCallback ; 
 import im . actor . core . viewmodel . FileEventCallback ; 
 import im . actor . core . viewmodel . UploadFileCallback ; 
 import im . actor . runtime . * ; 
 + import im . actor . runtime . actors . Actor ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . actors . Props ; 
 @ @ - 30 , 6 + 33 , 7 @ @ public class FilesModule extends AbsModule { 
 private KeyValueEngine < Downloaded > downloadedEngine ; 
 private ActorRef downloadManager ; 
 private ActorRef uploadManager ; 
 + private FileUrlInt fileUrlInt ; 
 
 public FilesModule ( final ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 53 , 6 + 57 , 12 @ @ public class FilesModule extends AbsModule { 
 } 
 
 public void run ( ) { 
 + fileUrlInt = new FileUrlInt ( system ( ) . actorOf ( " actor / download / urls " , new ActorCreator ( ) { 
 + @ Override 
 + public Actor create ( ) { 
 + return new FileUrlLoader ( context ( ) ) ; 
 + } 
 + } ) ) ; 
 downloadManager = system ( ) . actorOf ( Props . create ( new ActorCreator ( ) { 
 @ Override 
 public DownloadManager create ( ) { 
 @ @ - 71 , 6 + 81 , 10 @ @ public class FilesModule extends AbsModule { 
 return downloadedEngine ; 
 } 
 
 + public FileUrlInt getFileUrlInt ( ) { 
 + return fileUrlInt ; 
 + } 
 + 
 public void subscribe ( FileEventCallback callback ) { 
 downloadManager . send ( new DownloadManager . SubscribeToDownloads ( callback ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java 
 index 5f8926c . . 897eb6b 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadManager . java 
 @ @ - 56 , 10 + 56 , 9 @ @ public class DownloadManager extends ModuleActor { 
 
 Downloaded downloaded1 = downloaded . getValue ( fileId ) ; 
 if ( downloaded1 ! = null ) { 
 - / / FileSystemProvider provider = modules ( ) . getConfiguration ( ) . getFileSystemProvider ( ) ; 
 FileSystemReference reference = Storage . fileFromDescriptor ( downloaded1 . getDescriptor ( ) ) ; 
 - boolean isExist = true ; / / reference . isExist ( ) ; 
 - int fileSize = downloaded1 . getFileSize ( ) ; / / reference . getSize ( ) ; 
 + boolean isExist = reference . isExist ( ) ; 
 + int fileSize = reference . getSize ( ) ; 
 if ( isExist & & fileSize = = downloaded1 . getFileSize ( ) ) { 
 if ( LOG ) { 
 Log . d ( TAG , " - Downloaded " ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java 
 index 8ec0a07 . . 0243f17 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / DownloadTask . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . actors . Cancellable ; 
 import im . actor . runtime . files . FileSystemReference ; 
 import im . actor . runtime . files . OutputFile ; 
 + import im . actor . runtime . function . Consumer ; 
 import im . actor . runtime . http . FileDownloadCallback ; 
 
 public class DownloadTask extends ModuleActor { 
 @ @ - 98 , 25 + 99 , 26 @ @ public class DownloadTask extends ModuleActor { 
 if ( LOG ) { 
 Log . d ( TAG , " Loading url . . . " ) ; 
 } 
 - request ( new RequestGetFileUrl ( new ApiFileLocation ( fileReference . getFileId ( ) , 
 - fileReference . getAccessHash ( ) ) ) , new RpcCallback < ResponseGetFileUrl > ( ) { 
 + 
 + context ( ) . getFilesModule ( ) . getFileUrlInt ( ) . askForUrl ( fileReference . getFileId ( ) , 
 + fileReference . getAccessHash ( ) ) . then ( new Consumer < String > ( ) { 
 @ Override 
 - public void onResult ( ResponseGetFileUrl response ) { 
 - fileUrl = response . getUrl ( ) ; 
 + public void apply ( String url ) { 
 + fileUrl = url ; 
 if ( LOG ) { 
 Log . d ( TAG , " Loaded file url : " + fileUrl ) ; 
 } 
 startDownload ( ) ; 
 } 
 - 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 @ Override 
 - public void onError ( RpcException e ) { 
 + public void apply ( Exception e ) { 
 if ( LOG ) { 
 Log . d ( TAG , " Unable to load file url " ) ; 
 } 
 reportError ( ) ; 
 } 
 - } ) ; 
 + } ) . done ( self ( ) ) ; 
 } 
 
 private void startDownload ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / FileUrlInt . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / FileUrlInt . java 
 new file mode 100644 
 index 0000000 . . 6eb86b4 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / FileUrlInt . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package im . actor . core . modules . internal . file ; 
 + 
 + import org . jetbrains . annotations . NotNull ; 
 + 
 + import im . actor . runtime . actors . ActorInterface ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + import im . actor . runtime . promise . Promise ; 
 + 
 + public class FileUrlInt extends ActorInterface { 
 + 
 + public FileUrlInt ( @ NotNull ActorRef dest ) { 
 + super ( dest ) ; 
 + } 
 + 
 + public Promise < String > askForUrl ( long fileId , long accessHash ) { 
 + return ask ( new FileUrlLoader . AskUrl ( fileId , accessHash ) ) ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / FileUrlLoader . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / FileUrlLoader . java 
 new file mode 100644 
 index 0000000 . . 3c1abd2 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / file / FileUrlLoader . java 
 @ @ - 0 , 0 + 1 , 178 @ @ 
 + package im . actor . core . modules . internal . file ; 
 + 
 + import org . jetbrains . annotations . NotNull ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + 
 + import im . actor . core . api . ApiFileLocation ; 
 + import im . actor . core . api . ApiFileUrlDescription ; 
 + import im . actor . core . api . rpc . RequestGetFileUrls ; 
 + import im . actor . core . api . rpc . ResponseGetFileUrls ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . util . ModuleActor ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . Cancellable ; 
 + import im . actor . runtime . actors . ask . AskMessage ; 
 + import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . promise . Promise ; 
 + import im . actor . runtime . promise . PromiseFunc ; 
 + import im . actor . runtime . promise . PromiseResolver ; 
 + 
 + public class FileUrlLoader extends ModuleActor { 
 + 
 + private HashMap < Long , Promise < String > > requestedFiles = new HashMap < > ( ) ; 
 + 
 + private ArrayList < RequestedFile > pendingFiles = new ArrayList < > ( ) ; 
 + private boolean isExecuting = false ; 
 + private Cancellable checkCancellable ; 
 + 
 + public FileUrlLoader ( ModuleContext context ) { 
 + super ( context ) ; 
 + } 
 + 
 + public void checkQueue ( ) { 
 + if ( isExecuting ) { 
 + return ; 
 + } 
 + 
 + if ( pendingFiles . size ( ) = = 0 ) { 
 + return ; 
 + } 
 + 
 + final ArrayList < RequestedFile > destFiles = new ArrayList < > ( pendingFiles ) ; 
 + pendingFiles . clear ( ) ; 
 + 
 + isExecuting = true ; 
 + ArrayList < ApiFileLocation > locations = new ArrayList < > ( ) ; 
 + for ( RequestedFile f : destFiles ) { 
 + Log . d ( " FileUrlLoader " , " api : " + f . getFileId ( ) ) ; 
 + locations . add ( new ApiFileLocation ( f . getFileId ( ) , f . getAccessHash ( ) ) ) ; 
 + } 
 + api ( new RequestGetFileUrls ( locations ) ) . then ( new Consumer < ResponseGetFileUrls > ( ) { 
 + @ Override 
 + public void apply ( ResponseGetFileUrls responseGetFileUrls ) { 
 + 
 + outer : 
 + for ( RequestedFile f : destFiles ) { 
 + for ( ApiFileUrlDescription urlDescription : responseGetFileUrls . getFileUrls ( ) ) { 
 + if ( f . getFileId ( ) = = urlDescription . getFileId ( ) ) { 
 + Log . d ( " FileUrlLoader " , " resp : " + f . getFileId ( ) ) ; 
 + / / TODO : Implement Timeouts 
 + f . getResolver ( ) . result ( urlDescription . getUrl ( ) ) ; 
 + 
 + continue outer ; 
 + } 
 + } 
 + } 
 + isExecuting = false ; 
 + scheduleCheck ( ) ; 
 + } 
 + } ) . failure ( new Consumer < Exception > ( ) { 
 + @ Override 
 + public void apply ( Exception e ) { 
 + for ( RequestedFile f : destFiles ) { 
 + f . getResolver ( ) . error ( e ) ; 
 + } 
 + isExecuting = false ; 
 + scheduleCheck ( ) ; 
 + } 
 + } ) . done ( self ( ) ) ; 
 + } 
 + 
 + public Promise < String > askUrl ( final long fileId , final long accessHash ) { 
 + Log . d ( " FileUrlLoader " , " request : " + fileId ) ; 
 + if ( requestedFiles . containsKey ( fileId ) ) { 
 + return requestedFiles . get ( fileId ) ; 
 + } 
 + final Promise < String > res = new Promise < > ( new PromiseFunc < String > ( ) { 
 + @ Override 
 + public void exec ( @ NotNull PromiseResolver < String > resolver ) { 
 + pendingFiles . add ( new RequestedFile ( fileId , accessHash , resolver ) ) ; 
 + scheduleCheck ( ) ; 
 + } 
 + } ) ; 
 + requestedFiles . put ( fileId , res ) ; 
 + return res ; 
 + } 
 + 
 + private void scheduleCheck ( ) { 
 + if ( checkCancellable ! = null ) { 
 + checkCancellable . cancel ( ) ; 
 + 
 + } 
 + checkCancellable = schedule ( new CheckQueue ( ) , 500 ) ; 
 + } 
 + 
 + 
 + / / 
 + / / Messages 
 + / / 
 + 
 + @ Override 
 + public Promise onAsk ( Object message ) throws Exception { 
 + if ( message instanceof AskUrl ) { 
 + AskUrl askUrl = ( AskUrl ) message ; 
 + return askUrl ( askUrl . getFileId ( ) , askUrl . getAccessHash ( ) ) ; 
 + } else { 
 + return super . onAsk ( message ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof CheckQueue ) { 
 + checkQueue ( ) ; 
 + } else { 
 + super . onReceive ( message ) ; 
 + } 
 + } 
 + 
 + private static class RequestedFile { 
 + 
 + private final long fileId ; 
 + private final long accessHash ; 
 + private final PromiseResolver < String > resolver ; 
 + 
 + public RequestedFile ( long fileId , long accessHash , PromiseResolver < String > resolver ) { 
 + this . fileId = fileId ; 
 + this . accessHash = accessHash ; 
 + this . resolver = resolver ; 
 + } 
 + 
 + public long getFileId ( ) { 
 + return fileId ; 
 + } 
 + 
 + public long getAccessHash ( ) { 
 + return accessHash ; 
 + } 
 + 
 + public PromiseResolver < String > getResolver ( ) { 
 + return resolver ; 
 + } 
 + } 
 + 
 + public static class AskUrl implements AskMessage < String > { 
 + 
 + private long fileId ; 
 + private long accessHash ; 
 + 
 + public AskUrl ( long fileId , long accessHash ) { 
 + this . fileId = fileId ; 
 + this . accessHash = accessHash ; 
 + } 
 + 
 + public long getFileId ( ) { 
 + return fileId ; 
 + } 
 + 
 + public long getAccessHash ( ) { 
 + return accessHash ; 
 + } 
 + } 
 + 
 + private static class CheckQueue { 
 + 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java 
 index 3607672 . . 3a2ba49 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / promise / Promise . java 
 @ @ - 187 , 7 + 187 , 8 @ @ public class Promise < T > { 
 @ ObjectiveCName ( " done : " ) 
 public Promise < T > done ( PromiseDispatcher dispatcher ) { 
 if ( isStarted ) { 
 - throw new RuntimeException ( " Promise already started ! " ) ; 
 + / / throw new RuntimeException ( " Promise already started ! " ) ; 
 + return this ; 
 } 
 isStarted = true ; 
 dispatchActor = dispatcher ;
