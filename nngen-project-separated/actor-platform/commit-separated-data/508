BLEU SCORE: 0.07687847996206941

TEST MSG: feat ( js ) : Ability to disable runtime
GENERATED MSG: fix ( runtime ) : Fixing incorrect reference from runtime to core classes

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java < nl > index ac5427b . . bbe58fb 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java < nl > @ @ - 23 , 6 + 23 , 8 @ @ import im . actor . runtime . threading . WeakReferenceCompat ; < nl > < nl > public class JsThreadingProvider implements ThreadingRuntime { < nl > < nl > + public static boolean ALLOW _ WEB _ WORKER _ SCHEDULER = true ; < nl > + < nl > @ Override < nl > public long getActorTime ( ) { < nl > / / TODO : Better approach < nl > @ @ - 71 , 6 + 73 , 6 @ @ public class JsThreadingProvider implements ThreadingRuntime { < nl > < nl > @ Override < nl > public ImmediateDispatcher createImmediateDispatcher ( String name , ThreadPriority priority ) { < nl > - return new JsImmediateDispatcher ( name ) ; < nl > + return new JsImmediateDispatcher ( ALLOW _ WEB _ WORKER _ SCHEDULER , name ) ; < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsImmediateDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsImmediateDispatcher . java < nl > index e3db59a . . 722e6eb 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsImmediateDispatcher . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsImmediateDispatcher . java < nl > @ @ - 13 , 9 + 13 , 9 @ @ public class JsImmediateDispatcher implements ImmediateDispatcher { < nl > private final LinkedList < Runnable > queue = new LinkedList < > ( ) ; < nl > private boolean isInvalidated = false ; < nl > < nl > - public JsImmediateDispatcher ( String name ) { < nl > + public JsImmediateDispatcher ( boolean allowWebWorker , String name ) { < nl > this . name = name ; < nl > - this . secureInterval = JsSecureInterval . create ( new Runnable ( ) { < nl > + this . secureInterval = JsSecureInterval . create ( allowWebWorker , new Runnable ( ) { < nl > @ Override < nl > public void run ( ) { < nl > isInvalidated = true ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsSecureInterval . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsSecureInterval . java < nl > index 4beb2dc . . 1774a8e 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsSecureInterval . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsSecureInterval . java < nl > @ @ - 12 , 10 + 12 , 10 @ @ import com . google . gwt . core . client . JavaScriptObject ; < nl > * / < nl > public class JsSecureInterval extends JavaScriptObject { < nl > < nl > - public static native JsSecureInterval create ( Runnable runnable ) / * - { < nl > - console . warn ( " Create jsSecureInverval " ) < nl > + public static native JsSecureInterval create ( boolean allowWorkers , Runnable runnable ) / * - { < nl > + console . warn ( " Create jsSecureInterval " ) < nl > try { < nl > - if ( typeof ( Worker ) ! = = " undefined " ) { < nl > + if ( allowWorkers & & typeof ( Worker ) ! = = " undefined " ) { < nl > < nl > var code = " var timerId ; \ n " + < nl > " \ n " +
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java < nl > deleted file mode 100644 < nl > index b2fb2aa . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java < nl > + + + / dev / null < nl > @ @ - 1 , 21 + 0 , 0 @ @ < nl > - package im . actor . core . js . modules ; < nl > - < nl > - import im . actor . runtime . actors . Actor ; < nl > - import im . actor . runtime . actors . ActorCreator ; < nl > - import im . actor . runtime . actors . ActorRef ; < nl > - < nl > - import static im . actor . runtime . actors . ActorSystem . system ; < nl > - < nl > - public class JsScheduller { < nl > - < nl > - private static final ActorRef SCHEDULLER = system ( ) . actorOf ( " js / scheduller " , new ActorCreator ( ) { < nl > - @ Override < nl > - public Actor create ( ) { < nl > - return new Actor ( ) ; < nl > - } < nl > - } ) ; < nl > - < nl > - public static ActorRef scheduller ( ) { < nl > - return SCHEDULLER ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java < nl > index fb0b712 . . 9c84672 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java < nl > @ @ - 4 , 9 + 4 , 9 @ @ import com . google . gwt . core . client . JsArray ; < nl > < nl > import org . jetbrains . annotations . NotNull ; < nl > < nl > - import im . actor . core . js . modules . JsScheduller ; < nl > import im . actor . runtime . WebRTCRuntime ; < nl > import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . js . threading . JsScheduller ; < nl > import im . actor . runtime . js . webrtc . JsIceServer ; < nl > import im . actor . runtime . js . webrtc . JsMediaStream ; < nl > import im . actor . runtime . js . webrtc . JsPeerConnection ; < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsScheduller . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsScheduller . java < nl > new file mode 100644 < nl > index 0000000 . . d6519c0 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsScheduller . java < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + package im . actor . runtime . js . threading ; < nl > + < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . ActorRef ; < nl > + < nl > + import static im . actor . runtime . actors . ActorSystem . system ; < nl > + < nl > + public class JsScheduller { < nl > + < nl > + private static final ActorRef SCHEDULLER = system ( ) . actorOf ( " js / scheduller " , new ActorCreator ( ) { < nl > + @ Override < nl > + public Actor create ( ) { < nl > + return new Actor ( ) ; < nl > + } < nl > + } ) ; < nl > + < nl > + public static ActorRef scheduller ( ) { < nl > + return SCHEDULLER ; < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java 
 index ac5427b . . bbe58fb 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsThreadingProvider . java 
 @ @ - 23 , 6 + 23 , 8 @ @ import im . actor . runtime . threading . WeakReferenceCompat ; 
 
 public class JsThreadingProvider implements ThreadingRuntime { 
 
 + public static boolean ALLOW _ WEB _ WORKER _ SCHEDULER = true ; 
 + 
 @ Override 
 public long getActorTime ( ) { 
 / / TODO : Better approach 
 @ @ - 71 , 6 + 73 , 6 @ @ public class JsThreadingProvider implements ThreadingRuntime { 
 
 @ Override 
 public ImmediateDispatcher createImmediateDispatcher ( String name , ThreadPriority priority ) { 
 - return new JsImmediateDispatcher ( name ) ; 
 + return new JsImmediateDispatcher ( ALLOW _ WEB _ WORKER _ SCHEDULER , name ) ; 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsImmediateDispatcher . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsImmediateDispatcher . java 
 index e3db59a . . 722e6eb 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsImmediateDispatcher . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsImmediateDispatcher . java 
 @ @ - 13 , 9 + 13 , 9 @ @ public class JsImmediateDispatcher implements ImmediateDispatcher { 
 private final LinkedList < Runnable > queue = new LinkedList < > ( ) ; 
 private boolean isInvalidated = false ; 
 
 - public JsImmediateDispatcher ( String name ) { 
 + public JsImmediateDispatcher ( boolean allowWebWorker , String name ) { 
 this . name = name ; 
 - this . secureInterval = JsSecureInterval . create ( new Runnable ( ) { 
 + this . secureInterval = JsSecureInterval . create ( allowWebWorker , new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 isInvalidated = true ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsSecureInterval . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsSecureInterval . java 
 index 4beb2dc . . 1774a8e 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsSecureInterval . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsSecureInterval . java 
 @ @ - 12 , 10 + 12 , 10 @ @ import com . google . gwt . core . client . JavaScriptObject ; 
 * / 
 public class JsSecureInterval extends JavaScriptObject { 
 
 - public static native JsSecureInterval create ( Runnable runnable ) / * - { 
 - console . warn ( " Create jsSecureInverval " ) 
 + public static native JsSecureInterval create ( boolean allowWorkers , Runnable runnable ) / * - { 
 + console . warn ( " Create jsSecureInterval " ) 
 try { 
 - if ( typeof ( Worker ) ! = = " undefined " ) { 
 + if ( allowWorkers & & typeof ( Worker ) ! = = " undefined " ) { 
 
 var code = " var timerId ; \ n " + 
 " \ n " +

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java 
 deleted file mode 100644 
 index b2fb2aa . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsScheduller . java 
 + + + / dev / null 
 @ @ - 1 , 21 + 0 , 0 @ @ 
 - package im . actor . core . js . modules ; 
 - 
 - import im . actor . runtime . actors . Actor ; 
 - import im . actor . runtime . actors . ActorCreator ; 
 - import im . actor . runtime . actors . ActorRef ; 
 - 
 - import static im . actor . runtime . actors . ActorSystem . system ; 
 - 
 - public class JsScheduller { 
 - 
 - private static final ActorRef SCHEDULLER = system ( ) . actorOf ( " js / scheduller " , new ActorCreator ( ) { 
 - @ Override 
 - public Actor create ( ) { 
 - return new Actor ( ) ; 
 - } 
 - } ) ; 
 - 
 - public static ActorRef scheduller ( ) { 
 - return SCHEDULLER ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java 
 index fb0b712 . . 9c84672 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / JsWebRTCProvider . java 
 @ @ - 4 , 9 + 4 , 9 @ @ import com . google . gwt . core . client . JsArray ; 
 
 import org . jetbrains . annotations . NotNull ; 
 
 - import im . actor . core . js . modules . JsScheduller ; 
 import im . actor . runtime . WebRTCRuntime ; 
 import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . js . threading . JsScheduller ; 
 import im . actor . runtime . js . webrtc . JsIceServer ; 
 import im . actor . runtime . js . webrtc . JsMediaStream ; 
 import im . actor . runtime . js . webrtc . JsPeerConnection ; 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsScheduller . java b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsScheduller . java 
 new file mode 100644 
 index 0000000 . . d6519c0 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / runtime / runtime - js / src / main / java / im / actor / runtime / js / threading / JsScheduller . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package im . actor . runtime . js . threading ; 
 + 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . ActorRef ; 
 + 
 + import static im . actor . runtime . actors . ActorSystem . system ; 
 + 
 + public class JsScheduller { 
 + 
 + private static final ActorRef SCHEDULLER = system ( ) . actorOf ( " js / scheduller " , new ActorCreator ( ) { 
 + @ Override 
 + public Actor create ( ) { 
 + return new Actor ( ) ; 
 + } 
 + } ) ; 
 + 
 + public static ActorRef scheduller ( ) { 
 + return SCHEDULLER ; 
 + } 
 + }
