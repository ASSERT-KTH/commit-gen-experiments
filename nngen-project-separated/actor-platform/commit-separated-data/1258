BLEU SCORE: 0.3155984539112945

TEST MSG: wip ( js ) : New small avatar binding
GENERATED MSG: feat ( js ) : Added grouped dialogs binding

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > index ea6587c . . 6a5ed00 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > @ @ - 367 , 7 + 367 , 7 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > / / < nl > / / Dialogs List < nl > / / < nl > - < nl > + < nl > if ( dialogsList ! = null ) { < nl > dialogsList . startReconverting ( ) ; < nl > for ( Dialog dialog : dialogsList . getRawItems ( ) ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsSmallAvatarFileCache . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsSmallAvatarFileCache . java < nl > new file mode 100644 < nl > index 0000000 . . 726f348 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsSmallAvatarFileCache . java < nl > @ @ - 0 , 0 + 1 , 79 @ @ < nl > + package im . actor . core . js . modules ; < nl > + < nl > + import com . google . gwt . typedarrays . shared . TypedArrays ; < nl > + import com . google . gwt . typedarrays . shared . Uint8Array ; < nl > + < nl > + import java . util . HashMap ; < nl > + import java . util . HashSet ; < nl > + < nl > + import im . actor . core . api . ApiFileLocation ; < nl > + import im . actor . core . api . rpc . RequestGetFileUrl ; < nl > + import im . actor . core . api . rpc . ResponseGetFileUrl ; < nl > + import im . actor . core . modules . AbsModule ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . network . RpcCallback ; < nl > + import im . actor . core . network . RpcException ; < nl > + import im . actor . runtime . js . fs . JsBlob ; < nl > + import im . actor . runtime . js . http . JsHttpRequest ; < nl > + import im . actor . runtime . js . http . JsHttpRequestHandler ; < nl > + < nl > + public class JsSmallAvatarFileCache extends AbsModule { < nl > + < nl > + private HashMap < Long , String > cachedImages = new HashMap < Long , String > ( ) ; < nl > + private HashSet < Long > requested = new HashSet < Long > ( ) ; < nl > + < nl > + public JsSmallAvatarFileCache ( ModuleContext context ) { < nl > + super ( context ) ; < nl > + } < nl > + < nl > + public String getSmallAvatar ( long id , long accessHash ) { < nl > + if ( cachedImages . containsKey ( id ) ) { < nl > + / / Support returning nulls intentionally < nl > + return cachedImages . get ( id ) ; < nl > + } < nl > + loadAvatar ( id , accessHash ) ; < nl > + return null ; < nl > + } < nl > + < nl > + private void loadAvatar ( final long id , long accessHash ) { < nl > + if ( requested . contains ( id ) ) { < nl > + return ; < nl > + } < nl > + request ( new RequestGetFileUrl ( new ApiFileLocation ( id , accessHash ) ) , < nl > + new RpcCallback < ResponseGetFileUrl > ( ) { < nl > + @ Override < nl > + public void onResult ( ResponseGetFileUrl response ) { < nl > + onAvatarUrlLoaded ( id , response . getUrl ( ) ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( RpcException e ) { < nl > + cachedImages . put ( id , null ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + private void onAvatarUrlLoaded ( final long id , String url ) { < nl > + JsHttpRequest request = JsHttpRequest . create ( ) ; < nl > + request . open ( " GET " , url ) ; < nl > + request . setOnLoadHandler ( new JsHttpRequestHandler ( ) { < nl > + @ Override < nl > + public void onStateChanged ( JsHttpRequest request ) { < nl > + if ( request . getReadyState ( ) = = 4 ) { < nl > + if ( request . getStatus ( ) = = 200 ) { < nl > + JsBlob blob = request . getResponseBlob ( ) ; < nl > + onAvatarDownloaded ( id , blob ) ; < nl > + } else { < nl > + / / TODO : Implement better < nl > + cachedImages . put ( id , null ) ; < nl > + } < nl > + } < nl > + } < nl > + } ) ; < nl > + request . send ( ) ; < nl > + } < nl > + < nl > + private void onAvatarDownloaded ( long id , JsBlob blob ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / entity / CachedFileUrl . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / entity / CachedFileUrl . java < nl > index 4158010 . . 7d5f271 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / entity / CachedFileUrl . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / entity / CachedFileUrl . java < nl > @ @ - 12 , 9 + 12 , 6 @ @ import im . actor . runtime . bser . BserValues ; < nl > import im . actor . runtime . bser . BserWriter ; < nl > import im . actor . runtime . storage . KeyValueItem ; < nl > < nl > - / * * < nl > - * Created by ex3ndr on 01 . 05 . 15 . < nl > - * / < nl > public class CachedFileUrl extends BserObject implements KeyValueItem { < nl > < nl > public static CachedFileUrl fromBytes ( byte [ ] data ) throws IOException {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 044cc31 . . 11228e1 100644 < nl > - - - a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 6 , 6 + 6 , 7 @ @ package im . actor . core . js ; < nl > < nl > import com . google . gwt . core . client . JsArray ; < nl > import com . google . gwt . user . client . Event ; < nl > + < nl > import im . actor . core . * ; < nl > import im . actor . core . api . ApiAuthSession ; < nl > import im . actor . core . entity . MentionFilterResult ; < nl > @ @ - 28 , 6 + 29 , 7 @ @ import im . actor . runtime . js . mvvm . JsDisplayListCallback ; < nl > import im . actor . runtime . js . utils . JsPromise ; < nl > import im . actor . runtime . js . utils . JsPromiseExecutor ; < nl > import im . actor . runtime . markdown . MarkdownParser ; < nl > + < nl > import org . timepedia . exporter . client . Export ; < nl > import org . timepedia . exporter . client . ExportPackage ; < nl > import org . timepedia . exporter . client . Exportable ; < nl > @ @ - 297 , 6 + 299 , 22 @ @ public class JsFacade implements Exportable { < nl > messenger . getSharedDialogList ( ) . unsubscribe ( callback ) ; < nl > } < nl > < nl > + public void bindGroupDialogs ( JsBindedValueCallback callback ) { < nl > + if ( callback = = null ) { < nl > + return ; < nl > + } < nl > + < nl > + messenger . getDialogsGroupedList ( ) . subscribe ( callback ) ; < nl > + } < nl > + < nl > + public void unbindGroupDialogs ( JsBindedValueCallback callback ) { < nl > + if ( callback = = null ) { < nl > + return ; < nl > + } < nl > + < nl > + messenger . getDialogsGroupedList ( ) . unsubscribe ( callback ) ; < nl > + } < nl > + < nl > / / Contacts < nl > < nl > public void bindContacts ( JsDisplayListCallback < JsContact > callback ) { < nl > diff - - git a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsMessenger . java < nl > index efe7aad . . 706ce22 100644 < nl > - - - a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsMessenger . java < nl > @ @ - 4 , 7 + 4 , 9 @ @ < nl > < nl > package im . actor . core . js ; < nl > < nl > + import com . google . gwt . core . client . JsArray ; < nl > import com . google . gwt . user . client . Event ; < nl > + < nl > import im . actor . core . Configuration ; < nl > import im . actor . core . Messenger ; < nl > import im . actor . core . entity . Avatar ; < nl > @ @ - 16 , 6 + 18 , 7 @ @ import im . actor . core . entity . Peer ; < nl > import im . actor . core . entity . PeerType ; < nl > import im . actor . core . entity . content . FastThumb ; < nl > import im . actor . core . js . entity . JsCounter ; < nl > + import im . actor . core . js . entity . JsDialogGroup ; < nl > import im . actor . core . js . modules . JsFilesModule ; < nl > import im . actor . core . js . modules . JsBindingModule ; < nl > import im . actor . core . js . modules . JsBindedValue ; < nl > @ @ - 207 , 6 + 210 , 10 @ @ public class JsMessenger extends Messenger { < nl > return jsBindingModule . getSharedMessageList ( peer ) ; < nl > } < nl > < nl > + public JsBindedValue < JsArray < JsDialogGroup > > getDialogsGroupedList ( ) { < nl > + return jsBindingModule . getDialogsGroupedList ( ) ; < nl > + } < nl > + < nl > private String getSmallAvatarUrl ( Avatar avatar ) { < nl > if ( avatar ! = null & & avatar . getSmallImage ( ) ! = null ) { < nl > return getFileUrl ( avatar . getSmallImage ( ) . getFileReference ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / entity / JsDialogGroup . java b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / entity / JsDialogGroup . java < nl > new file mode 100644 < nl > index 0000000 . . 61ebce5 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / entity / JsDialogGroup . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + import com . google . gwt . core . client . JsArray ; < nl > + < nl > + public class JsDialogGroup extends JavaScriptObject { < nl > + < nl > + public static native JsDialogGroup create ( String title , String key , JsArray < JsDialogShort > shorts ) / * - { < nl > + return { title : title , key : key , shorts : shorts } ; < nl > + } - * / ; < nl > + < nl > + protected JsDialogGroup ( ) { < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / entity / JsDialogShort . java b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / entity / JsDialogShort . java < nl > new file mode 100644 < nl > index 0000000 . . 925d49a < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / entity / JsDialogShort . java < nl > @ @ - 0 , 0 + 1 , 14 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsDialogShort extends JavaScriptObject { < nl > + < nl > + public static native JsDialogShort create ( JsPeerInfo peer , int counter ) / * - { < nl > + return { peer : peer , counter : counter } ; < nl > + } - * / ; < nl > + < nl > + protected JsDialogShort ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > index ad32788 . . 4d4d454 100644 < nl > - - - a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > + + + b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > @ @ - 4 , 6 + 4 , 9 @ @ < nl > < nl > package im . actor . core . js . modules ; < nl > < nl > + import com . google . gwt . core . client . JsArray ; < nl > + < nl > + import java . util . ArrayList ; < nl > import java . util . HashMap ; < nl > < nl > import im . actor . core . entity . Avatar ; < nl > @ @ - 18 , 13 + 21 , 18 @ @ import im . actor . core . js . JsMessenger ; < nl > import im . actor . core . js . entity . JsContact ; < nl > import im . actor . core . js . entity . JsCounter ; < nl > import im . actor . core . js . entity . JsDialog ; < nl > + import im . actor . core . js . entity . JsDialogGroup ; < nl > + import im . actor . core . js . entity . JsDialogShort ; < nl > import im . actor . core . js . entity . JsGroup ; < nl > import im . actor . core . js . entity . JsMessage ; < nl > + import im . actor . core . js . entity . JsPeerInfo ; < nl > import im . actor . core . js . entity . JsTyping ; < nl > import im . actor . core . js . entity . JsUser ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . Modules ; < nl > import im . actor . core . viewmodel . AppStateVM ; < nl > + import im . actor . core . viewmodel . DialogGroup ; < nl > + import im . actor . core . viewmodel . DialogSmall ; < nl > import im . actor . core . viewmodel . GroupTypingVM ; < nl > import im . actor . core . viewmodel . GroupVM ; < nl > import im . actor . core . viewmodel . UserPresence ; < nl > @ @ - 52 , 6 + 60 , 8 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > private JsBindedValue < JsCounter > globalCounter ; < nl > private JsBindedValue < JsCounter > tempGlobalCounter ; < nl > < nl > + private JsBindedValue < JsArray < JsDialogGroup > > dialogsGroupedList ; < nl > + < nl > public JsBindingModule ( JsMessenger messenger , JsFilesModule filesModule , Modules modules ) { < nl > super ( modules ) ; < nl > < nl > @ @ - 60 , 6 + 70 , 34 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > this . filesModule . registerListener ( this ) ; < nl > } < nl > < nl > + public JsBindedValue < JsArray < JsDialogGroup > > getDialogsGroupedList ( ) { < nl > + if ( dialogsGroupedList = = null ) { < nl > + ValueModel < ArrayList < DialogGroup > > dialogGroups = < nl > + context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) ; < nl > + dialogsGroupedList = new JsBindedValue < JsArray < JsDialogGroup > > ( ) ; < nl > + dialogGroups . subscribe ( new ValueChangedListener < ArrayList < DialogGroup > > ( ) { < nl > + @ Override < nl > + public void onChanged ( ArrayList < DialogGroup > val , Value < ArrayList < DialogGroup > > valueModel ) { < nl > + if ( val = = null ) { < nl > + dialogsGroupedList . changeValue ( JsArray . createArray ( ) . < JsArray < JsDialogGroup > > cast ( ) ) ; < nl > + } else { < nl > + JsArray < JsDialogGroup > res = JsArray . createArray ( ) . cast ( ) ; < nl > + for ( DialogGroup g : val ) { < nl > + JsArray < JsDialogShort > resd = JsArray . createArray ( ) . cast ( ) ; < nl > + for ( DialogSmall ds : g . getDialogs ( ) ) { < nl > + resd . push ( JsDialogShort . create ( messenger . buildPeerInfo ( ds . getPeer ( ) ) , ds . getCounter ( ) ) ) ; < nl > + } < nl > + res . push ( JsDialogGroup . create ( g . getTitle ( ) , g . getKey ( ) , resd ) ) ; < nl > + } < nl > + dialogsGroupedList . changeValue ( res ) ; < nl > + } < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + return dialogsGroupedList ; < nl > + } < nl > + < nl > public JsBindedValue < String > getOnlineStatus ( ) { < nl > if ( onlineState = = null ) {

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 index ea6587c . . 6a5ed00 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 @ @ - 367 , 7 + 367 , 7 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 / / 
 / / Dialogs List 
 / / 
 - 
 + 
 if ( dialogsList ! = null ) { 
 dialogsList . startReconverting ( ) ; 
 for ( Dialog dialog : dialogsList . getRawItems ( ) ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsSmallAvatarFileCache . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsSmallAvatarFileCache . java 
 new file mode 100644 
 index 0000000 . . 726f348 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsSmallAvatarFileCache . java 
 @ @ - 0 , 0 + 1 , 79 @ @ 
 + package im . actor . core . js . modules ; 
 + 
 + import com . google . gwt . typedarrays . shared . TypedArrays ; 
 + import com . google . gwt . typedarrays . shared . Uint8Array ; 
 + 
 + import java . util . HashMap ; 
 + import java . util . HashSet ; 
 + 
 + import im . actor . core . api . ApiFileLocation ; 
 + import im . actor . core . api . rpc . RequestGetFileUrl ; 
 + import im . actor . core . api . rpc . ResponseGetFileUrl ; 
 + import im . actor . core . modules . AbsModule ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . network . RpcCallback ; 
 + import im . actor . core . network . RpcException ; 
 + import im . actor . runtime . js . fs . JsBlob ; 
 + import im . actor . runtime . js . http . JsHttpRequest ; 
 + import im . actor . runtime . js . http . JsHttpRequestHandler ; 
 + 
 + public class JsSmallAvatarFileCache extends AbsModule { 
 + 
 + private HashMap < Long , String > cachedImages = new HashMap < Long , String > ( ) ; 
 + private HashSet < Long > requested = new HashSet < Long > ( ) ; 
 + 
 + public JsSmallAvatarFileCache ( ModuleContext context ) { 
 + super ( context ) ; 
 + } 
 + 
 + public String getSmallAvatar ( long id , long accessHash ) { 
 + if ( cachedImages . containsKey ( id ) ) { 
 + / / Support returning nulls intentionally 
 + return cachedImages . get ( id ) ; 
 + } 
 + loadAvatar ( id , accessHash ) ; 
 + return null ; 
 + } 
 + 
 + private void loadAvatar ( final long id , long accessHash ) { 
 + if ( requested . contains ( id ) ) { 
 + return ; 
 + } 
 + request ( new RequestGetFileUrl ( new ApiFileLocation ( id , accessHash ) ) , 
 + new RpcCallback < ResponseGetFileUrl > ( ) { 
 + @ Override 
 + public void onResult ( ResponseGetFileUrl response ) { 
 + onAvatarUrlLoaded ( id , response . getUrl ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( RpcException e ) { 
 + cachedImages . put ( id , null ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + private void onAvatarUrlLoaded ( final long id , String url ) { 
 + JsHttpRequest request = JsHttpRequest . create ( ) ; 
 + request . open ( " GET " , url ) ; 
 + request . setOnLoadHandler ( new JsHttpRequestHandler ( ) { 
 + @ Override 
 + public void onStateChanged ( JsHttpRequest request ) { 
 + if ( request . getReadyState ( ) = = 4 ) { 
 + if ( request . getStatus ( ) = = 200 ) { 
 + JsBlob blob = request . getResponseBlob ( ) ; 
 + onAvatarDownloaded ( id , blob ) ; 
 + } else { 
 + / / TODO : Implement better 
 + cachedImages . put ( id , null ) ; 
 + } 
 + } 
 + } 
 + } ) ; 
 + request . send ( ) ; 
 + } 
 + 
 + private void onAvatarDownloaded ( long id , JsBlob blob ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / entity / CachedFileUrl . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / entity / CachedFileUrl . java 
 index 4158010 . . 7d5f271 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / entity / CachedFileUrl . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / entity / CachedFileUrl . java 
 @ @ - 12 , 9 + 12 , 6 @ @ import im . actor . runtime . bser . BserValues ; 
 import im . actor . runtime . bser . BserWriter ; 
 import im . actor . runtime . storage . KeyValueItem ; 
 
 - / * * 
 - * Created by ex3ndr on 01 . 05 . 15 . 
 - * / 
 public class CachedFileUrl extends BserObject implements KeyValueItem { 
 
 public static CachedFileUrl fromBytes ( byte [ ] data ) throws IOException {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsFacade . java 
 index 044cc31 . . 11228e1 100644 
 - - - a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 6 , 6 + 6 , 7 @ @ package im . actor . core . js ; 
 
 import com . google . gwt . core . client . JsArray ; 
 import com . google . gwt . user . client . Event ; 
 + 
 import im . actor . core . * ; 
 import im . actor . core . api . ApiAuthSession ; 
 import im . actor . core . entity . MentionFilterResult ; 
 @ @ - 28 , 6 + 29 , 7 @ @ import im . actor . runtime . js . mvvm . JsDisplayListCallback ; 
 import im . actor . runtime . js . utils . JsPromise ; 
 import im . actor . runtime . js . utils . JsPromiseExecutor ; 
 import im . actor . runtime . markdown . MarkdownParser ; 
 + 
 import org . timepedia . exporter . client . Export ; 
 import org . timepedia . exporter . client . ExportPackage ; 
 import org . timepedia . exporter . client . Exportable ; 
 @ @ - 297 , 6 + 299 , 22 @ @ public class JsFacade implements Exportable { 
 messenger . getSharedDialogList ( ) . unsubscribe ( callback ) ; 
 } 
 
 + public void bindGroupDialogs ( JsBindedValueCallback callback ) { 
 + if ( callback = = null ) { 
 + return ; 
 + } 
 + 
 + messenger . getDialogsGroupedList ( ) . subscribe ( callback ) ; 
 + } 
 + 
 + public void unbindGroupDialogs ( JsBindedValueCallback callback ) { 
 + if ( callback = = null ) { 
 + return ; 
 + } 
 + 
 + messenger . getDialogsGroupedList ( ) . unsubscribe ( callback ) ; 
 + } 
 + 
 / / Contacts 
 
 public void bindContacts ( JsDisplayListCallback < JsContact > callback ) { 
 diff - - git a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsMessenger . java 
 index efe7aad . . 706ce22 100644 
 - - - a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsMessenger . java 
 + + + b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / JsMessenger . java 
 @ @ - 4 , 7 + 4 , 9 @ @ 
 
 package im . actor . core . js ; 
 
 + import com . google . gwt . core . client . JsArray ; 
 import com . google . gwt . user . client . Event ; 
 + 
 import im . actor . core . Configuration ; 
 import im . actor . core . Messenger ; 
 import im . actor . core . entity . Avatar ; 
 @ @ - 16 , 6 + 18 , 7 @ @ import im . actor . core . entity . Peer ; 
 import im . actor . core . entity . PeerType ; 
 import im . actor . core . entity . content . FastThumb ; 
 import im . actor . core . js . entity . JsCounter ; 
 + import im . actor . core . js . entity . JsDialogGroup ; 
 import im . actor . core . js . modules . JsFilesModule ; 
 import im . actor . core . js . modules . JsBindingModule ; 
 import im . actor . core . js . modules . JsBindedValue ; 
 @ @ - 207 , 6 + 210 , 10 @ @ public class JsMessenger extends Messenger { 
 return jsBindingModule . getSharedMessageList ( peer ) ; 
 } 
 
 + public JsBindedValue < JsArray < JsDialogGroup > > getDialogsGroupedList ( ) { 
 + return jsBindingModule . getDialogsGroupedList ( ) ; 
 + } 
 + 
 private String getSmallAvatarUrl ( Avatar avatar ) { 
 if ( avatar ! = null & & avatar . getSmallImage ( ) ! = null ) { 
 return getFileUrl ( avatar . getSmallImage ( ) . getFileReference ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / entity / JsDialogGroup . java b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / entity / JsDialogGroup . java 
 new file mode 100644 
 index 0000000 . . 61ebce5 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / entity / JsDialogGroup . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + import com . google . gwt . core . client . JsArray ; 
 + 
 + public class JsDialogGroup extends JavaScriptObject { 
 + 
 + public static native JsDialogGroup create ( String title , String key , JsArray < JsDialogShort > shorts ) / * - { 
 + return { title : title , key : key , shorts : shorts } ; 
 + } - * / ; 
 + 
 + protected JsDialogGroup ( ) { 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / entity / JsDialogShort . java b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / entity / JsDialogShort . java 
 new file mode 100644 
 index 0000000 . . 925d49a 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / entity / JsDialogShort . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsDialogShort extends JavaScriptObject { 
 + 
 + public static native JsDialogShort create ( JsPeerInfo peer , int counter ) / * - { 
 + return { peer : peer , counter : counter } ; 
 + } - * / ; 
 + 
 + protected JsDialogShort ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 index ad32788 . . 4d4d454 100644 
 - - - a / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 + + + b / actor - sdk / sdk - core / core / js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 @ @ - 4 , 6 + 4 , 9 @ @ 
 
 package im . actor . core . js . modules ; 
 
 + import com . google . gwt . core . client . JsArray ; 
 + 
 + import java . util . ArrayList ; 
 import java . util . HashMap ; 
 
 import im . actor . core . entity . Avatar ; 
 @ @ - 18 , 13 + 21 , 18 @ @ import im . actor . core . js . JsMessenger ; 
 import im . actor . core . js . entity . JsContact ; 
 import im . actor . core . js . entity . JsCounter ; 
 import im . actor . core . js . entity . JsDialog ; 
 + import im . actor . core . js . entity . JsDialogGroup ; 
 + import im . actor . core . js . entity . JsDialogShort ; 
 import im . actor . core . js . entity . JsGroup ; 
 import im . actor . core . js . entity . JsMessage ; 
 + import im . actor . core . js . entity . JsPeerInfo ; 
 import im . actor . core . js . entity . JsTyping ; 
 import im . actor . core . js . entity . JsUser ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . Modules ; 
 import im . actor . core . viewmodel . AppStateVM ; 
 + import im . actor . core . viewmodel . DialogGroup ; 
 + import im . actor . core . viewmodel . DialogSmall ; 
 import im . actor . core . viewmodel . GroupTypingVM ; 
 import im . actor . core . viewmodel . GroupVM ; 
 import im . actor . core . viewmodel . UserPresence ; 
 @ @ - 52 , 6 + 60 , 8 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 private JsBindedValue < JsCounter > globalCounter ; 
 private JsBindedValue < JsCounter > tempGlobalCounter ; 
 
 + private JsBindedValue < JsArray < JsDialogGroup > > dialogsGroupedList ; 
 + 
 public JsBindingModule ( JsMessenger messenger , JsFilesModule filesModule , Modules modules ) { 
 super ( modules ) ; 
 
 @ @ - 60 , 6 + 70 , 34 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 this . filesModule . registerListener ( this ) ; 
 } 
 
 + public JsBindedValue < JsArray < JsDialogGroup > > getDialogsGroupedList ( ) { 
 + if ( dialogsGroupedList = = null ) { 
 + ValueModel < ArrayList < DialogGroup > > dialogGroups = 
 + context ( ) . getMessagesModule ( ) . getDialogGroupsVM ( ) . getGroupsValueModel ( ) ; 
 + dialogsGroupedList = new JsBindedValue < JsArray < JsDialogGroup > > ( ) ; 
 + dialogGroups . subscribe ( new ValueChangedListener < ArrayList < DialogGroup > > ( ) { 
 + @ Override 
 + public void onChanged ( ArrayList < DialogGroup > val , Value < ArrayList < DialogGroup > > valueModel ) { 
 + if ( val = = null ) { 
 + dialogsGroupedList . changeValue ( JsArray . createArray ( ) . < JsArray < JsDialogGroup > > cast ( ) ) ; 
 + } else { 
 + JsArray < JsDialogGroup > res = JsArray . createArray ( ) . cast ( ) ; 
 + for ( DialogGroup g : val ) { 
 + JsArray < JsDialogShort > resd = JsArray . createArray ( ) . cast ( ) ; 
 + for ( DialogSmall ds : g . getDialogs ( ) ) { 
 + resd . push ( JsDialogShort . create ( messenger . buildPeerInfo ( ds . getPeer ( ) ) , ds . getCounter ( ) ) ) ; 
 + } 
 + res . push ( JsDialogGroup . create ( g . getTitle ( ) , g . getKey ( ) , resd ) ) ; 
 + } 
 + dialogsGroupedList . changeValue ( res ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + 
 + return dialogsGroupedList ; 
 + } 
 + 
 public JsBindedValue < String > getOnlineStatus ( ) { 
 if ( onlineState = = null ) {
