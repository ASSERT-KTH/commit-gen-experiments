BLEU SCORE: 0.14308697402617038

TEST MSG: fix ( server : webrtc ) : fixed renegotiation
GENERATED MSG: test + style ( server : messaging ) : spec on hidden groups

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > index 8e00bc5 . . 4db9bdf 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala < nl > @ @ - 9 , 7 + 9 , 6 @ @ import im . actor . api . rpc . messaging . { ApiServiceExPhoneCall , ApiServiceMessage } < nl > import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } < nl > import im . actor . api . rpc . webrtc . _ < nl > import im . actor . concurrent . { ActorStashing , FutureExt } < nl > - import im . actor . server . db . DbExtension < nl > import im . actor . server . dialog . DialogExtension < nl > import im . actor . server . eventbus . { EventBus , EventBusExtension } < nl > import im . actor . server . group . GroupExtension < nl > @ @ - 262 , 11 + 261 , 12 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > / / TODO : # perf remove sessions . find and sessions . filterNot < nl > for { < nl > deviceId ← ebMessage . deviceId < nl > - ( pair , sessionId ) ← sessions find ( _ = = msg . sessionId ) < nl > + ( pair , sessionId ) ← sessions find ( _ . _ 2 = = msg . sessionId ) < nl > leftDevice ← devices get pair . left < nl > rightDevice ← devices get pair . right < nl > } yield { < nl > - if ( pair = = Pair ( deviceId , msg . device ) ) { < nl > + val chkPair = Pair ( deviceId , msg . device ) < nl > + if ( pair . left = = chkPair . left & & pair . right = = chkPair . right ) { < nl > sessions = sessions filterNot ( _ = = sessionId ) < nl > eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( pair . left ) , ApiCloseSession ( pair . right , sessionId ) . toByteArray ) < nl > eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( pair . right ) , ApiCloseSession ( pair . left , sessionId ) . toByteArray ) < nl > @ @ - 301 , 7 + 301 , 8 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { < nl > participants + = userId → state < nl > } else log . error ( " Attempt to change participant state to the same value { } " , state ) < nl > case None ⇒ < nl > - log . error ( " Attempt to change state of a non - participant { } " , userId ) < nl > + log . debug ( " Adding participant { } with state { } " , userId , state ) < nl > + participants + = userId - > state < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / version . sbt b / actor - server / version . sbt < nl > index 87b0a39 . . 23c9f02 100644 < nl > - - - a / actor - server / version . sbt < nl > + + + b / actor - server / version . sbt < nl > @ @ - 1 + 1 @ @ < nl > - version in ThisBuild : = " 1 . 0 . 152 " < nl > \ No newline at end of file < nl > + version in ThisBuild : = " 1 . 0 . 152 - SNAPSHOT " < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala < nl > index cc0b9b7 . . fc6cbed 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala < nl > @ @ - 1 , 17 + 1 , 17 @ @ < nl > package im . actor . server . migrations < nl > < nl > - import akka . actor . { ActorLogging , ActorSystem , PoisonPill , Props } < nl > - import akka . persistence . { PersistentActor , RecoveryCompleted } < nl > + import akka . actor . { ActorLogging , ActorSystem , PoisonPill , Props } < nl > + import akka . persistence . { PersistentActor , RecoveryCompleted } < nl > import im . actor . concurrent . FutureExt . _ < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . event . TSEvent < nl > import im . actor . server . group . GroupOffice < nl > - import im . actor . server . { persist = > p } < nl > + import im . actor . server . { persist ⇒ p } < nl > import slick . driver . PostgresDriver < nl > < nl > import scala . concurrent . duration . _ < nl > - import scala . concurrent . { ExecutionContext , Future , Promise } < nl > - import scala . util . { Failure , Success } < nl > + import scala . concurrent . { ExecutionContext , Future , Promise } < nl > + import scala . util . { Failure , Success } < nl > < nl > object HiddenGroupMigrator extends Migration { < nl > < nl > @ @ - 32 , 7 + 32 , 7 @ @ object HiddenGroupMigrator extends Migration { < nl > val promise = Promise [ Unit ] ( ) < nl > system . actorOf ( Props ( new HiddenGroupMigrator ( promise , id ) ) , s " hidden _ group _ migrator _ $ id " ) < nl > promise . future onFailure { < nl > - case e = > system . log . error ( e , s " Failed to migrate $ id " ) < nl > + case e ⇒ system . log . error ( e , s " Failed to migrate $ id " ) < nl > } < nl > promise . future < nl > } < nl > @ @ - 53 , 10 + 53 , 10 @ @ private final class HiddenGroupMigrator ( promise : Promise [ Unit ] , groupId : Int ) ex < nl > private def migrate ( ) : Unit = { < nl > if ( isHidden ) { < nl > db . run ( p . Group . makeHidden ( groupId ) ) onComplete { < nl > - case Failure ( e ) = > < nl > + case Failure ( e ) ⇒ < nl > promise . failure ( e ) < nl > self ! PoisonPill < nl > - case Success ( _ ) = > < nl > + case Success ( _ ) ⇒ < nl > promise . success ( ( ) ) < nl > self ! PoisonPill < nl > } < nl > @ @ - 67 , 14 + 67 , 14 @ @ private final class HiddenGroupMigrator ( promise : Promise [ Unit ] , groupId : Int ) ex < nl > } < nl > < nl > def receiveCommand = { < nl > - case Migrate = > < nl > + case Migrate ⇒ < nl > migrate ( ) < nl > } < nl > < nl > def receiveRecover = { < nl > - case TSEvent ( _ , e : Created ) = > < nl > + case TSEvent ( _ , e : Created ) ⇒ < nl > isHidden = e . isHidden . getOrElse ( false ) < nl > - case RecoveryCompleted = > < nl > + case RecoveryCompleted ⇒ < nl > self ! Migrate < nl > } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala < nl > index b9c75e6 . . 83798fe 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala < nl > @ @ - 127 , 8 + 127 , 7 @ @ object HistoryMessage { < nl > < nl > private val unreadTotalC = Compiled ( unreadTotal _ ) < nl > < nl > - def getUnreadTotal ( userId : Int ) : DBIO [ Int ] = < nl > - unreadTotalC ( userId ) . result < nl > + def getUnreadTotal ( userId : Int ) : DBIO [ Int ] = unreadTotalC ( userId ) . result < nl > < nl > def haveMessagesBetween ( userId : Int , peer : models . Peer , minDate : DateTime , maxDate : DateTime ) = < nl > notDeletedMessages < nl > diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > index 6e409e6 . . f0b7273 100644 < nl > - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > @ @ - 33 , 7 + 33 , 7 @ @ import im . actor . server . dialog . { DialogExtension , DialogProcessor } < nl > import im . actor . server . email . { EmailConfig , EmailSender } < nl > import im . actor . server . enrich . { RichMessageConfig , RichMessageWorker } < nl > import im . actor . server . group . _ < nl > - import im . actor . server . migrations . { HiddenGroupMigrator , GroupCreatorMemberMigrator , IntegrationTokenMigrator , LocalNamesMigrator } < nl > + import im . actor . server . migrations . { HiddenGroupMigrator , GroupCreatorMemberMigrator , IntegrationTokenMigrator , LocalNamesMigrator } < nl > import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } < nl > import im . actor . server . presences . { GroupPresenceExtension , PresenceExtension } < nl > import im . actor . server . sequence . _ < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / HiddenGroupsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / HiddenGroupsSpec . scala < nl > new file mode 100644 < nl > index 0000000 . . 5acd514 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / HiddenGroupsSpec . scala < nl > @ @ - 0 , 0 + 1 , 40 @ @ < nl > + package im . actor . server . api . rpc . service < nl > + < nl > + import im . actor . api . rpc . _ < nl > + import im . actor . api . rpc . messaging . { ApiTextMessage , ResponseLoadDialogs } < nl > + import im . actor . api . rpc . peers . { ApiPeerType , ApiOutPeer } < nl > + import im . actor . server . { ImplicitSessionRegionProxy , ImplicitAuthService , BaseAppSuite } < nl > + import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl < nl > + import im . actor . server . group . { GroupType , GroupExtension } < nl > + import org . scalatest . Inside . _ < nl > + import im . actor . server . persist < nl > + < nl > + import scala . util . Random < nl > + < nl > + final class HiddenGroupsSpec extends BaseAppSuite with ImplicitAuthService with ImplicitSessionRegionProxy { < nl > + " LoadDialogs " should " not load hidden groups " in loadHidden < nl > + < nl > + private val groupExt = GroupExtension ( system ) < nl > + private val service = MessagingServiceImpl ( ) < nl > + < nl > + def loadHidden ( ) = { < nl > + val ( user , authId , _ ) = createUser ( ) < nl > + implicit val clientData = ClientData ( authId , 1 , Some ( user . id ) ) < nl > + < nl > + val groupId = 1 < nl > + < nl > + whenReady ( for { < nl > + group ← groupExt . createInternal ( groupId , GroupType . General , user . id , " hidden " , Set . empty , isHidden = true , isHistoryShared = true ) < nl > + _ ← service . handleSendMessage ( ApiOutPeer ( ApiPeerType . Group , groupId , group . accessHash ) , Random . nextLong , ApiTextMessage ( " Hi there " , Vector . empty , None ) ) < nl > + } yield ( ) ) { _ ⇒ < nl > + whenReady ( service . handleLoadDialogs ( 0 , Int . MaxValue ) ) { resp ⇒ < nl > + inside ( resp ) { < nl > + case Ok ( ResponseLoadDialogs ( dialogs , _ , _ ) ) ⇒ < nl > + dialogs . length shouldBe ( 0 ) < nl > + < nl > + db . run ( persist . HistoryMessage . getUnreadTotal ( user . id ) ) < nl > + } < nl > + } < nl > + } < nl > + } < nl > + } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 index 8e00bc5 . . 4db9bdf 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / webrtc / WebrtcCallActor . scala 
 @ @ - 9 , 7 + 9 , 6 @ @ import im . actor . api . rpc . messaging . { ApiServiceExPhoneCall , ApiServiceMessage } 
 import im . actor . api . rpc . peers . { ApiPeer , ApiPeerType } 
 import im . actor . api . rpc . webrtc . _ 
 import im . actor . concurrent . { ActorStashing , FutureExt } 
 - import im . actor . server . db . DbExtension 
 import im . actor . server . dialog . DialogExtension 
 import im . actor . server . eventbus . { EventBus , EventBusExtension } 
 import im . actor . server . group . GroupExtension 
 @ @ - 262 , 11 + 261 , 12 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 / / TODO : # perf remove sessions . find and sessions . filterNot 
 for { 
 deviceId ← ebMessage . deviceId 
 - ( pair , sessionId ) ← sessions find ( _ = = msg . sessionId ) 
 + ( pair , sessionId ) ← sessions find ( _ . _ 2 = = msg . sessionId ) 
 leftDevice ← devices get pair . left 
 rightDevice ← devices get pair . right 
 } yield { 
 - if ( pair = = Pair ( deviceId , msg . device ) ) { 
 + val chkPair = Pair ( deviceId , msg . device ) 
 + if ( pair . left = = chkPair . left & & pair . right = = chkPair . right ) { 
 sessions = sessions filterNot ( _ = = sessionId ) 
 eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( pair . left ) , ApiCloseSession ( pair . right , sessionId ) . toByteArray ) 
 eventBusExt . post ( EventBus . InternalClient ( self ) , eventBusId , Seq ( pair . right ) , ApiCloseSession ( pair . left , sessionId ) . toByteArray ) 
 @ @ - 301 , 7 + 301 , 8 @ @ private final class WebrtcCallActor extends ActorStashing with ActorLogging { 
 participants + = userId → state 
 } else log . error ( " Attempt to change participant state to the same value { } " , state ) 
 case None ⇒ 
 - log . error ( " Attempt to change state of a non - participant { } " , userId ) 
 + log . debug ( " Adding participant { } with state { } " , userId , state ) 
 + participants + = userId - > state 
 } 
 } 
 
 diff - - git a / actor - server / version . sbt b / actor - server / version . sbt 
 index 87b0a39 . . 23c9f02 100644 
 - - - a / actor - server / version . sbt 
 + + + b / actor - server / version . sbt 
 @ @ - 1 + 1 @ @ 
 - version in ThisBuild : = " 1 . 0 . 152 " 
 \ No newline at end of file 
 + version in ThisBuild : = " 1 . 0 . 152 - SNAPSHOT " 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala 
 index cc0b9b7 . . fc6cbed 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / migrations / HiddenGroupMigrator . scala 
 @ @ - 1 , 17 + 1 , 17 @ @ 
 package im . actor . server . migrations 
 
 - import akka . actor . { ActorLogging , ActorSystem , PoisonPill , Props } 
 - import akka . persistence . { PersistentActor , RecoveryCompleted } 
 + import akka . actor . { ActorLogging , ActorSystem , PoisonPill , Props } 
 + import akka . persistence . { PersistentActor , RecoveryCompleted } 
 import im . actor . concurrent . FutureExt . _ 
 import im . actor . server . db . DbExtension 
 import im . actor . server . event . TSEvent 
 import im . actor . server . group . GroupOffice 
 - import im . actor . server . { persist = > p } 
 + import im . actor . server . { persist ⇒ p } 
 import slick . driver . PostgresDriver 
 
 import scala . concurrent . duration . _ 
 - import scala . concurrent . { ExecutionContext , Future , Promise } 
 - import scala . util . { Failure , Success } 
 + import scala . concurrent . { ExecutionContext , Future , Promise } 
 + import scala . util . { Failure , Success } 
 
 object HiddenGroupMigrator extends Migration { 
 
 @ @ - 32 , 7 + 32 , 7 @ @ object HiddenGroupMigrator extends Migration { 
 val promise = Promise [ Unit ] ( ) 
 system . actorOf ( Props ( new HiddenGroupMigrator ( promise , id ) ) , s " hidden _ group _ migrator _ $ id " ) 
 promise . future onFailure { 
 - case e = > system . log . error ( e , s " Failed to migrate $ id " ) 
 + case e ⇒ system . log . error ( e , s " Failed to migrate $ id " ) 
 } 
 promise . future 
 } 
 @ @ - 53 , 10 + 53 , 10 @ @ private final class HiddenGroupMigrator ( promise : Promise [ Unit ] , groupId : Int ) ex 
 private def migrate ( ) : Unit = { 
 if ( isHidden ) { 
 db . run ( p . Group . makeHidden ( groupId ) ) onComplete { 
 - case Failure ( e ) = > 
 + case Failure ( e ) ⇒ 
 promise . failure ( e ) 
 self ! PoisonPill 
 - case Success ( _ ) = > 
 + case Success ( _ ) ⇒ 
 promise . success ( ( ) ) 
 self ! PoisonPill 
 } 
 @ @ - 67 , 14 + 67 , 14 @ @ private final class HiddenGroupMigrator ( promise : Promise [ Unit ] , groupId : Int ) ex 
 } 
 
 def receiveCommand = { 
 - case Migrate = > 
 + case Migrate ⇒ 
 migrate ( ) 
 } 
 
 def receiveRecover = { 
 - case TSEvent ( _ , e : Created ) = > 
 + case TSEvent ( _ , e : Created ) ⇒ 
 isHidden = e . isHidden . getOrElse ( false ) 
 - case RecoveryCompleted = > 
 + case RecoveryCompleted ⇒ 
 self ! Migrate 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala 
 index b9c75e6 . . 83798fe 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / HistoryMessage . scala 
 @ @ - 127 , 8 + 127 , 7 @ @ object HistoryMessage { 
 
 private val unreadTotalC = Compiled ( unreadTotal _ ) 
 
 - def getUnreadTotal ( userId : Int ) : DBIO [ Int ] = 
 - unreadTotalC ( userId ) . result 
 + def getUnreadTotal ( userId : Int ) : DBIO [ Int ] = unreadTotalC ( userId ) . result 
 
 def haveMessagesBetween ( userId : Int , peer : models . Peer , minDate : DateTime , maxDate : DateTime ) = 
 notDeletedMessages 
 diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 index 6e409e6 . . f0b7273 100644 
 - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 @ @ - 33 , 7 + 33 , 7 @ @ import im . actor . server . dialog . { DialogExtension , DialogProcessor } 
 import im . actor . server . email . { EmailConfig , EmailSender } 
 import im . actor . server . enrich . { RichMessageConfig , RichMessageWorker } 
 import im . actor . server . group . _ 
 - import im . actor . server . migrations . { HiddenGroupMigrator , GroupCreatorMemberMigrator , IntegrationTokenMigrator , LocalNamesMigrator } 
 + import im . actor . server . migrations . { HiddenGroupMigrator , GroupCreatorMemberMigrator , IntegrationTokenMigrator , LocalNamesMigrator } 
 import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } 
 import im . actor . server . presences . { GroupPresenceExtension , PresenceExtension } 
 import im . actor . server . sequence . _ 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / HiddenGroupsSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / HiddenGroupsSpec . scala 
 new file mode 100644 
 index 0000000 . . 5acd514 
 - - - / dev / null 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / HiddenGroupsSpec . scala 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package im . actor . server . api . rpc . service 
 + 
 + import im . actor . api . rpc . _ 
 + import im . actor . api . rpc . messaging . { ApiTextMessage , ResponseLoadDialogs } 
 + import im . actor . api . rpc . peers . { ApiPeerType , ApiOutPeer } 
 + import im . actor . server . { ImplicitSessionRegionProxy , ImplicitAuthService , BaseAppSuite } 
 + import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl 
 + import im . actor . server . group . { GroupType , GroupExtension } 
 + import org . scalatest . Inside . _ 
 + import im . actor . server . persist 
 + 
 + import scala . util . Random 
 + 
 + final class HiddenGroupsSpec extends BaseAppSuite with ImplicitAuthService with ImplicitSessionRegionProxy { 
 + " LoadDialogs " should " not load hidden groups " in loadHidden 
 + 
 + private val groupExt = GroupExtension ( system ) 
 + private val service = MessagingServiceImpl ( ) 
 + 
 + def loadHidden ( ) = { 
 + val ( user , authId , _ ) = createUser ( ) 
 + implicit val clientData = ClientData ( authId , 1 , Some ( user . id ) ) 
 + 
 + val groupId = 1 
 + 
 + whenReady ( for { 
 + group ← groupExt . createInternal ( groupId , GroupType . General , user . id , " hidden " , Set . empty , isHidden = true , isHistoryShared = true ) 
 + _ ← service . handleSendMessage ( ApiOutPeer ( ApiPeerType . Group , groupId , group . accessHash ) , Random . nextLong , ApiTextMessage ( " Hi there " , Vector . empty , None ) ) 
 + } yield ( ) ) { _ ⇒ 
 + whenReady ( service . handleLoadDialogs ( 0 , Int . MaxValue ) ) { resp ⇒ 
 + inside ( resp ) { 
 + case Ok ( ResponseLoadDialogs ( dialogs , _ , _ ) ) ⇒ 
 + dialogs . length shouldBe ( 0 ) 
 + 
 + db . run ( persist . HistoryMessage . getUnreadTotal ( user . id ) ) 
 + } 
 + } 
 + } 
 + } 
 + } 
 \ No newline at end of file
