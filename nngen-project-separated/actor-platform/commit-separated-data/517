BLEU SCORE: 0.13292417883329388

TEST MSG: fix ( server : push ) : leightweight apple push for new certificate type
GENERATED MSG: fix ( server ) : fixed compilation error

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala < nl > index 203eff5 . . e3142fb 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala < nl > @ @ - 5 , 7 + 5 , 6 @ @ import java . util . concurrent . { ExecutionException , TimeUnit , TimeoutException } < nl > < nl > import akka . actor . { ActorSystem , ExtendedActorSystem , Extension , ExtensionId , ExtensionIdProvider } < nl > import akka . event . Logging < nl > - import com . google . protobuf . wrappers . { Int32Value , StringValue } < nl > import com . relayrides . pushy . apns . ApnsClient < nl > import com . relayrides . pushy . apns . util . SimpleApnsPushNotification < nl > import im . actor . server . db . DbExtension < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala < nl > index 0dd770a . . 2595647 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala < nl > @ @ - 18 , 17 + 18 , 22 @ @ private [ sequence ] final class ApplePushProvider ( userId : Int ) ( implicit system : Ac < nl > < nl > def deliverInvisible ( seq : Int , creds : ApplePushCredentials ) : Unit = { < nl > withClient ( creds ) { implicit client ⇒ < nl > - log . debug ( " Delivering invisible ( seq : { } ) to apnsKey : { } " , seq , creds . apnsKey ) < nl > - db . run ( HistoryMessageRepo . getUnreadTotal ( userId ) ) foreach { unreadTotal ⇒ < nl > - val payload = < nl > - new ApnsPayloadBuilder ( ) < nl > - . addCustomProperty ( " seq " , seq ) < nl > - . setContentAvailable ( true ) < nl > - . setSoundFileName ( " " ) < nl > - . setBadgeNumber ( unreadTotal ) < nl > - . buildWithDefaultMaximumLength ( ) < nl > + if ( isLegacyCreds ( creds ) ) { < nl > + log . debug ( " Delivering invisible ( seq : { } ) to apnsKey : { } " , seq , creds . apnsKey ) < nl > + db . run ( HistoryMessageRepo . getUnreadTotal ( userId ) ) foreach { unreadTotal ⇒ < nl > + val payload = < nl > + new ApnsPayloadBuilder ( ) < nl > + . addCustomProperty ( " seq " , seq ) < nl > + . setContentAvailable ( true ) < nl > + . setSoundFileName ( " " ) < nl > + . setBadgeNumber ( unreadTotal ) < nl > + . buildWithDefaultMaximumLength ( ) < nl > < nl > - sendNotification ( payload , creds , userId ) < nl > + sendNotification ( payload , creds , userId ) < nl > + } < nl > + } else { < nl > + log . debug ( " Delivering invisible ( seq : { } ) to bundleId : { } " , seq , creds . bundleId ) < nl > + sendNotification ( payload = seqOnly ( seq ) , creds , userId ) < nl > } < nl > } < nl > } < nl > @ @ - 42 , 25 + 47 , 35 @ @ private [ sequence ] final class ApplePushProvider ( userId : Int ) ( implicit system : Ac < nl > isVibrationEnabled : Boolean < nl > ) : Unit = { < nl > withClient ( creds ) { implicit client ⇒ < nl > - val builder = < nl > - new ApnsPayloadBuilder ( ) < nl > - . addCustomProperty ( " seq " , seq ) < nl > - . setContentAvailable ( true ) < nl > - < nl > - if ( data . text . nonEmpty & & isTextEnabled ) < nl > - builder . setAlertBody ( data . text ) < nl > - else if ( data . censoredText . nonEmpty ) < nl > - builder . setAlertBody ( data . censoredText ) < nl > + if ( isLegacyCreds ( creds ) ) { < nl > + val builder = < nl > + new ApnsPayloadBuilder ( ) < nl > + . addCustomProperty ( " seq " , seq ) < nl > + . setContentAvailable ( true ) < nl > < nl > - if ( isSoundEnabled ) < nl > - builder . setSoundFileName ( " iapetus . caf " ) < nl > + if ( data . text . nonEmpty & & isTextEnabled ) < nl > + builder . setAlertBody ( data . text ) < nl > + else if ( data . censoredText . nonEmpty ) < nl > + builder . setAlertBody ( data . censoredText ) < nl > < nl > - val payload = builder . buildWithDefaultMaximumLength ( ) < nl > + if ( isSoundEnabled ) < nl > + builder . setSoundFileName ( " iapetus . caf " ) < nl > < nl > - sendNotification ( payload , creds , userId ) < nl > + val payload = builder . buildWithDefaultMaximumLength ( ) < nl > + sendNotification ( payload , creds , userId ) < nl > + } else { < nl > + sendNotification ( payload = seqOnly ( seq ) , creds , userId ) < nl > + } < nl > } < nl > } < nl > < nl > + private def seqOnly ( seq : Int ) : String = < nl > + new ApnsPayloadBuilder ( ) < nl > + . addCustomProperty ( " seq " , seq ) < nl > + . buildWithDefaultMaximumLength ( ) < nl > + < nl > + private def isLegacyCreds ( creds : ApplePushCredentials ) = creds . bundleId . isEmpty < nl > + < nl > private def withClient [ A ] ( creds : ApplePushCredentials ) ( f : ApnsClient [ SimpleApnsPushNotification ] ⇒ A ) : Unit = { < nl > val credsKey = extractCredsId ( creds ) < nl > applePushExt . client ( credsKey ) match {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala < nl > index 6ee639d . . e114d7a 100644 < nl > - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala < nl > + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala < nl > @ @ - 1 , 7 + 1 , 6 @ @ < nl > package im . actor . server . user < nl > < nl > import akka . actor . { ActorRef , ActorSystem , Props } < nl > - import akka . contrib . pattern . { ClusterSharding , ShardRegion } < nl > < nl > object UserViewRegion { < nl > private def start ( props : Option [ Props ] ) ( implicit system : ActorSystem ) : UserViewRegion = < nl > @ @ - 19 , 7 + 18 , 7 @ @ object UserViewRegion { < nl > implicit < nl > system : ActorSystem < nl > ) : UserViewRegion = < nl > - start ( Some ( UserView . props ) ) < nl > + start ( None ) < nl > < nl > def startProxy ( ) ( implicit system : ActorSystem ) : UserViewRegion = < nl > start ( None )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala 
 index 203eff5 . . e3142fb 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushExtension . scala 
 @ @ - 5 , 7 + 5 , 6 @ @ import java . util . concurrent . { ExecutionException , TimeUnit , TimeoutException } 
 
 import akka . actor . { ActorSystem , ExtendedActorSystem , Extension , ExtensionId , ExtensionIdProvider } 
 import akka . event . Logging 
 - import com . google . protobuf . wrappers . { Int32Value , StringValue } 
 import com . relayrides . pushy . apns . ApnsClient 
 import com . relayrides . pushy . apns . util . SimpleApnsPushNotification 
 import im . actor . server . db . DbExtension 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala 
 index 0dd770a . . 2595647 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / ApplePushProvider . scala 
 @ @ - 18 , 17 + 18 , 22 @ @ private [ sequence ] final class ApplePushProvider ( userId : Int ) ( implicit system : Ac 
 
 def deliverInvisible ( seq : Int , creds : ApplePushCredentials ) : Unit = { 
 withClient ( creds ) { implicit client ⇒ 
 - log . debug ( " Delivering invisible ( seq : { } ) to apnsKey : { } " , seq , creds . apnsKey ) 
 - db . run ( HistoryMessageRepo . getUnreadTotal ( userId ) ) foreach { unreadTotal ⇒ 
 - val payload = 
 - new ApnsPayloadBuilder ( ) 
 - . addCustomProperty ( " seq " , seq ) 
 - . setContentAvailable ( true ) 
 - . setSoundFileName ( " " ) 
 - . setBadgeNumber ( unreadTotal ) 
 - . buildWithDefaultMaximumLength ( ) 
 + if ( isLegacyCreds ( creds ) ) { 
 + log . debug ( " Delivering invisible ( seq : { } ) to apnsKey : { } " , seq , creds . apnsKey ) 
 + db . run ( HistoryMessageRepo . getUnreadTotal ( userId ) ) foreach { unreadTotal ⇒ 
 + val payload = 
 + new ApnsPayloadBuilder ( ) 
 + . addCustomProperty ( " seq " , seq ) 
 + . setContentAvailable ( true ) 
 + . setSoundFileName ( " " ) 
 + . setBadgeNumber ( unreadTotal ) 
 + . buildWithDefaultMaximumLength ( ) 
 
 - sendNotification ( payload , creds , userId ) 
 + sendNotification ( payload , creds , userId ) 
 + } 
 + } else { 
 + log . debug ( " Delivering invisible ( seq : { } ) to bundleId : { } " , seq , creds . bundleId ) 
 + sendNotification ( payload = seqOnly ( seq ) , creds , userId ) 
 } 
 } 
 } 
 @ @ - 42 , 25 + 47 , 35 @ @ private [ sequence ] final class ApplePushProvider ( userId : Int ) ( implicit system : Ac 
 isVibrationEnabled : Boolean 
 ) : Unit = { 
 withClient ( creds ) { implicit client ⇒ 
 - val builder = 
 - new ApnsPayloadBuilder ( ) 
 - . addCustomProperty ( " seq " , seq ) 
 - . setContentAvailable ( true ) 
 - 
 - if ( data . text . nonEmpty & & isTextEnabled ) 
 - builder . setAlertBody ( data . text ) 
 - else if ( data . censoredText . nonEmpty ) 
 - builder . setAlertBody ( data . censoredText ) 
 + if ( isLegacyCreds ( creds ) ) { 
 + val builder = 
 + new ApnsPayloadBuilder ( ) 
 + . addCustomProperty ( " seq " , seq ) 
 + . setContentAvailable ( true ) 
 
 - if ( isSoundEnabled ) 
 - builder . setSoundFileName ( " iapetus . caf " ) 
 + if ( data . text . nonEmpty & & isTextEnabled ) 
 + builder . setAlertBody ( data . text ) 
 + else if ( data . censoredText . nonEmpty ) 
 + builder . setAlertBody ( data . censoredText ) 
 
 - val payload = builder . buildWithDefaultMaximumLength ( ) 
 + if ( isSoundEnabled ) 
 + builder . setSoundFileName ( " iapetus . caf " ) 
 
 - sendNotification ( payload , creds , userId ) 
 + val payload = builder . buildWithDefaultMaximumLength ( ) 
 + sendNotification ( payload , creds , userId ) 
 + } else { 
 + sendNotification ( payload = seqOnly ( seq ) , creds , userId ) 
 + } 
 } 
 } 
 
 + private def seqOnly ( seq : Int ) : String = 
 + new ApnsPayloadBuilder ( ) 
 + . addCustomProperty ( " seq " , seq ) 
 + . buildWithDefaultMaximumLength ( ) 
 + 
 + private def isLegacyCreds ( creds : ApplePushCredentials ) = creds . bundleId . isEmpty 
 + 
 private def withClient [ A ] ( creds : ApplePushCredentials ) ( f : ApnsClient [ SimpleApnsPushNotification ] ⇒ A ) : Unit = { 
 val credsKey = extractCredsId ( creds ) 
 applePushExt . client ( credsKey ) match {

NEAREST DIFF:
diff - - git a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala 
 index 6ee639d . . e114d7a 100644 
 - - - a / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala 
 + + + b / actor - server / actor - peer - managers / src / main / scala / im / actor / server / user / UserViewRegion . scala 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package im . actor . server . user 
 
 import akka . actor . { ActorRef , ActorSystem , Props } 
 - import akka . contrib . pattern . { ClusterSharding , ShardRegion } 
 
 object UserViewRegion { 
 private def start ( props : Option [ Props ] ) ( implicit system : ActorSystem ) : UserViewRegion = 
 @ @ - 19 , 7 + 18 , 7 @ @ object UserViewRegion { 
 implicit 
 system : ActorSystem 
 ) : UserViewRegion = 
 - start ( Some ( UserView . props ) ) 
 + start ( None ) 
 
 def startProxy ( ) ( implicit system : ActorSystem ) : UserViewRegion = 
 start ( None )
