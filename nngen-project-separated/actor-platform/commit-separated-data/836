BLEU SCORE: 0.11208466750961142

TEST MSG: refactor ( server ) : add EmailExtension ; fix test config
GENERATED MSG: fix ( server : testkit ) : remove unused implicits

TEST DIFF (one line): diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailExtension . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailExtension . scala < nl > new file mode 100644 < nl > index 0000000 . . 79e07fa < nl > - - - / dev / null < nl > + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailExtension . scala < nl > @ @ - 0 , 0 + 1 , 17 @ @ < nl > + package im . actor . server . email < nl > + < nl > + import akka . actor . _ < nl > + < nl > + sealed trait EmailExtension extends Extension < nl > + < nl > + final class EmailExtensionImpl ( system : ActorSystem ) extends EmailExtension { < nl > + import system . dispatcher < nl > + private val config = EmailConfig . load . get < nl > + val emailSender = new SmtpEmailSender ( config ) < nl > + } < nl > + < nl > + object EmailExtension extends ExtensionId [ EmailExtensionImpl ] with ExtensionIdProvider { < nl > + override def lookup = EmailExtension < nl > + < nl > + override def createExtension ( system : ExtendedActorSystem ) = new EmailExtensionImpl ( system ) < nl > + } < nl > diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > index 6002d1e . . b708712 100644 < nl > - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala < nl > @ @ - 26 , 7 + 26 , 7 @ @ trait EmailSender { < nl > def send ( message : Message ) : Future [ Unit ] < nl > } < nl > < nl > - final class DummyEmailSender extends EmailSender { < nl > + object DummyEmailSender extends EmailSender { < nl > override def send ( message : Message ) : Future [ Unit ] = Future . successful ( ( ) ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala < nl > index 803f78e . . 791d160 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala < nl > @ @ - 5 , 6 + 5 , 7 @ @ import java . time . { ZoneOffset , LocalDateTime } < nl > import im . actor . server . db . ActorPostgresDriver . api . _ < nl > import im . actor . server . model . { Sex , UserState , User } < nl > import im . actor . util . misc . PhoneNumberUtils < nl > + import slick . lifted . ColumnOrdered < nl > < nl > import scala . concurrent . ExecutionContext < nl > < nl > @ @ - 137 , 12 + 138 , 15 @ @ object UserRepo { < nl > < nl > def activeUsersIds = activeHumanUsers . map ( _ . id ) . result < nl > < nl > - def page ( number : Int , size : Int ) = { < nl > - val offset = ( number - 1 ) * size < nl > - activeHumanUsers . < nl > - sortBy ( _ . name ) . < nl > - drop ( offset ) . < nl > - take ( size ) < nl > + def fetchPagedNewest ( pageNumber : Int , pageSize : Int ) : DBIO [ Seq [ User ] ] = < nl > + paged ( pageNumber , pageSize , { ut ⇒ ut . createdAt . desc } ) . result < nl > + < nl > + def paged [ A ] ( pageNumber : Int , pageSize : Int , sorting : UserTable ⇒ ColumnOrdered [ A ] ) : Query [ UserTable , User , Seq ] = { < nl > + val offset = ( pageNumber - 1 ) * pageSize < nl > + activeHumanUsers < nl > + . sortBy ( sorting ) < nl > + . drop ( offset ) < nl > + . take ( pageSize ) < nl > } < nl > < nl > def isDeleted ( userId : Int ) : DBIO [ Boolean ] = < nl > diff - - git a / actor - server / actor - testkit / src / main / resources / reference . conf b / actor - server / actor - testkit / src / main / resources / reference . conf < nl > index 474b2dc . . 64ddf04 100644 < nl > - - - a / actor - server / actor - testkit / src / main / resources / reference . conf < nl > + + + b / actor - server / actor - testkit / src / main / resources / reference . conf < nl > @ @ - 1 , 3 + 1 , 4 @ @ < nl > + debug - mode : true < nl > secret = " Kah [ na < re1Nae9ohngieYieb . a2Rae ( phee4xeim + eequohyahX9bai2aeju5ae0ter9ae1ieThee ' kahs ~ e0eejepasae ? b % iGh " < nl > < nl > akka { < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / PasswordAuthSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / PasswordAuthSpec . scala < nl > index 94128f1 . . c3e4022 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / PasswordAuthSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / PasswordAuthSpec . scala < nl > @ @ - 4 , 7 + 4 , 6 @ @ import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . auth . { ResponseAuth , ResponseStartUsernameAuth } < nl > import im . actor . server . acl . ACLUtils < nl > import im . actor . server . activation . common . ActivationConfig < nl > - import im . actor . server . email . DummyEmailSender < nl > import im . actor . server . oauth . GoogleProvider < nl > import im . actor . server . persist . UserPasswordRepo < nl > import im . actor . server . user . UserExtension < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index a266276 . . 7e3a2ff 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 217 , 7 + 217 , 7 @ @ object Dependencies { < nl > < nl > val sdk = Seq ( aspectj ) < nl > < nl > - val runtime = shared + + Seq ( akkaActor , actorConcurrent , akkaHttp , akkaStream , akkaPersistenceJdbc , caffeine , cats , concmap , jodaConvert , jodaTime , icu4j , libPhoneNumber , scalapbSer , scalazCore , akkaTestkit % " test " , scalatest % " test " ) < nl > + val runtime = shared + + Seq ( akkaActor , actorConcurrent , akkaHttp , akkaSlf4j , akkaStream , akkaPersistenceJdbc , caffeine , cats , concmap , jodaConvert , jodaTime , icu4j , libPhoneNumber , scalapbSer , scalazCore , akkaTestkit % " test " , scalatest % " test " ) < nl > < nl > val voximplant = shared + + Seq ( akkaActor , dispatch , playJson )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > index 46ae652 . . 77a66e4 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala < nl > @ @ - 85 , 12 + 85 , 7 @ @ object ImageUtils { < nl > def scaleAvatar ( < nl > fullFileId : Long , < nl > rng : ThreadLocalRandom < nl > - ) ( < nl > - implicit < nl > - fsAdapter : FileStorageAdapter , < nl > - ec : ExecutionContext , < nl > - system : ActorSystem < nl > - ) : DBIO [ Either [ Throwable , Avatar ] ] = < nl > + ) ( implicit system : ActorSystem ) : DBIO [ Either [ Throwable , Avatar ] ] = < nl > scaleAvatar ( < nl > fullFileId , < nl > rng , < nl > @ @ - 103 , 12 + 98 , 9 @ @ object ImageUtils { < nl > rng : ThreadLocalRandom , < nl > smallDesc : ThumbDescriptor , < nl > largeDesc : ThumbDescriptor < nl > - ) ( < nl > - implicit < nl > - fsAdapter : FileStorageAdapter , < nl > - ec : ExecutionContext , < nl > - system : ActorSystem < nl > - ) : DBIO [ Either [ Throwable , Avatar ] ] = { < nl > + ) ( implicit system : ActorSystem ) : DBIO [ Either [ Throwable , Avatar ] ] = { < nl > + implicit val ec : ExecutionContext = system . dispatcher < nl > + val fsAdapter = FileStorageExtension ( system ) . fsAdapter < nl > persist . FileRepo . find ( fullFileId ) flatMap { < nl > case Some ( fullFileModel ) ⇒ < nl > fsAdapter . downloadFile ( fullFileId ) flatMap { < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ImplicitFileStorageAdapter . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ImplicitFileStorageAdapter . scala < nl > deleted file mode 100644 < nl > index 0bc8b62 . . 0000000 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ImplicitFileStorageAdapter . scala < nl > + + + / dev / null < nl > @ @ - 1 , 14 + 0 , 0 @ @ < nl > - package im . actor . server < nl > - < nl > - import akka . actor . ActorSystem < nl > - import com . amazonaws . auth . EnvironmentVariableCredentialsProvider < nl > - import im . actor . server . file . s3 . { S3StorageAdapter , S3StorageAdapterConfig } < nl > - import im . actor . server . file . FileStorageAdapter < nl > - < nl > - trait ImplicitFileStorageAdapter { < nl > - protected implicit val system : ActorSystem < nl > - < nl > - protected implicit lazy val awsCredentials = new EnvironmentVariableCredentialsProvider ( ) < nl > - protected implicit lazy val fsAdapterS3 : S3StorageAdapter = new S3StorageAdapter ( system ) < nl > - protected implicit lazy val fsAdapter : FileStorageAdapter = fsAdapterS3 < nl > - } < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / Implicits . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / Implicits . scala < nl > deleted file mode 100644 < nl > index 4299b9f . . 0000000 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / Implicits . scala < nl > + + + / dev / null < nl > @ @ - 1 , 9 + 0 , 0 @ @ < nl > - package im . actor . server < nl > - < nl > - trait ImplicitRegions < nl > - extends ImplicitSeqUpdatesManagerRegion < nl > - with ImplicitSessionRegion < nl > - with ImplicitSocialManagerRegion < nl > - < nl > - trait ImplicitServiceDependencies extends ImplicitFileStorageAdapter < nl > - < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > index aed25c8 . . f9f8356 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server < nl > < nl > import java . net . InetSocketAddress < nl > < nl > + import com . amazonaws . auth . EnvironmentVariableCredentialsProvider < nl > import com . amazonaws . services . s3 . transfer . TransferManager < nl > import com . typesafe . config . ConfigFactory < nl > import im . actor . api . rpc . auth . _ < nl > @ @ - 32 , 7 + 33 , 7 @ @ class SimpleServerE2eSpec extends ActorSuite ( < nl > | } < nl > " " " . stripMargin < nl > ) ) < nl > - ) with ImplicitFileStorageAdapter with ActorSerializerPrepare { < nl > + ) with ActorSerializerPrepare { < nl > behavior of " Server " < nl > < nl > it should " connect and Handshake " in Server . e1 < nl > @ @ - 58 , 6 + 59 , 7 @ @ class SimpleServerE2eSpec extends ActorSuite ( < nl > Session . startRegion ( Session . props ) < nl > implicit val sessionRegion = Session . startRegionProxy ( ) < nl > < nl > + private val awsCredentials = new EnvironmentVariableCredentialsProvider ( ) < nl > implicit val transferManager = new TransferManager ( awsCredentials ) < nl > implicit val ec : ExecutionContext = system . dispatcher < nl > implicit val oauth2Service = new GoogleProvider ( oauthGoogleConfig ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > index f3d1576 . . 066e29b 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala < nl > @ @ - 11 , 7 + 11 , 6 @ @ import im . actor . server . _ < nl > < nl > class FilesServiceSpec < nl > extends BaseAppSuite < nl > - with ImplicitFileStorageAdapter < nl > with ImplicitSessionRegion < nl > with ImplicitAuthService { < nl > behavior of " FilesService " < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > index 1fdfbad . . 985adf6 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala < nl > @ @ - 17 , 7 + 17 , 6 @ @ import scala . concurrent . Future < nl > import scala . util . Random < nl > < nl > final class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceHelpers < nl > - with ImplicitFileStorageAdapter < nl > with ImplicitSessionRegion < nl > with ImplicitAuthService < nl > with ImplicitSequenceService < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > index aa44dff . . 81e2188 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala < nl > @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . api . rpc . service < nl > < nl > import java . nio . file . { Files , Paths } < nl > < nl > - import im . actor . server . file . ImageUtils < nl > + import im . actor . server . file . { FileStorageExtension , ImageUtils } < nl > < nl > import scala . concurrent . Await < nl > import scala . concurrent . duration . _ < nl > @ @ - 19 , 7 + 19 , 6 @ @ import im . actor . server . api . rpc . service . profile . { ProfileErrors , ProfileServiceIm < nl > < nl > final class ProfileServiceSpec < nl > extends BaseAppSuite < nl > - with ImplicitFileStorageAdapter < nl > with ImplicitSessionRegion < nl > with ImplicitAuthService { < nl > behavior of " Profile Service " < nl > @ @ - 43 , 6 + 42 , 8 @ @ final class ProfileServiceSpec < nl > implicit lazy val service = new ProfileServiceImpl < nl > implicit lazy val filesService = new FilesServiceImpl < nl > < nl > + private val fsAdapter = FileStorageExtension ( system ) . fsAdapter < nl > + < nl > private val invalidImageFile = Paths . get ( getClass . getResource ( " / invalid - avatar . jpg " ) . toURI ) . toFile < nl > private val tooLargeImageFile = Paths . get ( getClass . getResource ( " / too - large - avatar . jpg " ) . toURI ) . toFile < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > index 9ae40e9 . . be0c086 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala < nl > @ @ - 20 , 7 + 20 , 7 @ @ import im . actor . server . api . http . webhooks . OutgoingHooksErrors < nl > import im . actor . server . api . http . { HttpApiConfig , HttpApiFrontend } < nl > import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } < nl > import im . actor . server . api . rpc . service . messaging < nl > - import im . actor . server . file . ImageUtils < nl > + import im . actor . server . file . { FileStorageExtension , ImageUtils } < nl > import play . api . libs . json . _ < nl > < nl > import scala . concurrent . forkjoin . ThreadLocalRandom < nl > @ @ - 28 , 7 + 28 , 6 @ @ import scala . concurrent . forkjoin . ThreadLocalRandom < nl > final class HttpApiFrontendSpec < nl > extends BaseAppSuite < nl > with GroupsServiceHelpers < nl > - with ImplicitFileStorageAdapter < nl > with ImplicitSessionRegion < nl > with ImplicitAuthService < nl > with PlayJsonSupport { < nl > @ @ - 79 , 6 + 78 , 8 @ @ final class HttpApiFrontendSpec < nl > implicit lazy val service = messaging . MessagingServiceImpl ( ) < nl > implicit lazy val groupsService = new GroupsServiceImpl ( groupInviteConfig ) < nl > < nl > + private val fsAdapter = FileStorageExtension ( system ) . fsAdapter < nl > + < nl > implicit val reverseHookResponseUnmarshaller : FromEntityUnmarshaller [ ReverseHookResponse ] = Unmarshaller { implicit ec ⇒ entity ⇒ < nl > Unmarshal ( entity ) . to [ String ] . map { body ⇒ < nl > Json . parse ( body ) . as [ ReverseHookResponse ]

TEST DIFF:
diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailExtension . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailExtension . scala 
 new file mode 100644 
 index 0000000 . . 79e07fa 
 - - - / dev / null 
 + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailExtension . scala 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + package im . actor . server . email 
 + 
 + import akka . actor . _ 
 + 
 + sealed trait EmailExtension extends Extension 
 + 
 + final class EmailExtensionImpl ( system : ActorSystem ) extends EmailExtension { 
 + import system . dispatcher 
 + private val config = EmailConfig . load . get 
 + val emailSender = new SmtpEmailSender ( config ) 
 + } 
 + 
 + object EmailExtension extends ExtensionId [ EmailExtensionImpl ] with ExtensionIdProvider { 
 + override def lookup = EmailExtension 
 + 
 + override def createExtension ( system : ExtendedActorSystem ) = new EmailExtensionImpl ( system ) 
 + } 
 diff - - git a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 index 6002d1e . . b708712 100644 
 - - - a / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 + + + b / actor - server / actor - email / src / main / scala / im / actor / server / email / EmailSender . scala 
 @ @ - 26 , 7 + 26 , 7 @ @ trait EmailSender { 
 def send ( message : Message ) : Future [ Unit ] 
 } 
 
 - final class DummyEmailSender extends EmailSender { 
 + object DummyEmailSender extends EmailSender { 
 override def send ( message : Message ) : Future [ Unit ] = Future . successful ( ( ) ) 
 } 
 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala 
 index 803f78e . . 791d160 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / UserRepo . scala 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . time . { ZoneOffset , LocalDateTime } 
 import im . actor . server . db . ActorPostgresDriver . api . _ 
 import im . actor . server . model . { Sex , UserState , User } 
 import im . actor . util . misc . PhoneNumberUtils 
 + import slick . lifted . ColumnOrdered 
 
 import scala . concurrent . ExecutionContext 
 
 @ @ - 137 , 12 + 138 , 15 @ @ object UserRepo { 
 
 def activeUsersIds = activeHumanUsers . map ( _ . id ) . result 
 
 - def page ( number : Int , size : Int ) = { 
 - val offset = ( number - 1 ) * size 
 - activeHumanUsers . 
 - sortBy ( _ . name ) . 
 - drop ( offset ) . 
 - take ( size ) 
 + def fetchPagedNewest ( pageNumber : Int , pageSize : Int ) : DBIO [ Seq [ User ] ] = 
 + paged ( pageNumber , pageSize , { ut ⇒ ut . createdAt . desc } ) . result 
 + 
 + def paged [ A ] ( pageNumber : Int , pageSize : Int , sorting : UserTable ⇒ ColumnOrdered [ A ] ) : Query [ UserTable , User , Seq ] = { 
 + val offset = ( pageNumber - 1 ) * pageSize 
 + activeHumanUsers 
 + . sortBy ( sorting ) 
 + . drop ( offset ) 
 + . take ( pageSize ) 
 } 
 
 def isDeleted ( userId : Int ) : DBIO [ Boolean ] = 
 diff - - git a / actor - server / actor - testkit / src / main / resources / reference . conf b / actor - server / actor - testkit / src / main / resources / reference . conf 
 index 474b2dc . . 64ddf04 100644 
 - - - a / actor - server / actor - testkit / src / main / resources / reference . conf 
 + + + b / actor - server / actor - testkit / src / main / resources / reference . conf 
 @ @ - 1 , 3 + 1 , 4 @ @ 
 + debug - mode : true 
 secret = " Kah [ na < re1Nae9ohngieYieb . a2Rae ( phee4xeim + eequohyahX9bai2aeju5ae0ter9ae1ieThee ' kahs ~ e0eejepasae ? b % iGh " 
 
 akka { 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / PasswordAuthSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / PasswordAuthSpec . scala 
 index 94128f1 . . c3e4022 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / PasswordAuthSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / PasswordAuthSpec . scala 
 @ @ - 4 , 7 + 4 , 6 @ @ import im . actor . api . rpc . _ 
 import im . actor . api . rpc . auth . { ResponseAuth , ResponseStartUsernameAuth } 
 import im . actor . server . acl . ACLUtils 
 import im . actor . server . activation . common . ActivationConfig 
 - import im . actor . server . email . DummyEmailSender 
 import im . actor . server . oauth . GoogleProvider 
 import im . actor . server . persist . UserPasswordRepo 
 import im . actor . server . user . UserExtension 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index a266276 . . 7e3a2ff 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 217 , 7 + 217 , 7 @ @ object Dependencies { 
 
 val sdk = Seq ( aspectj ) 
 
 - val runtime = shared + + Seq ( akkaActor , actorConcurrent , akkaHttp , akkaStream , akkaPersistenceJdbc , caffeine , cats , concmap , jodaConvert , jodaTime , icu4j , libPhoneNumber , scalapbSer , scalazCore , akkaTestkit % " test " , scalatest % " test " ) 
 + val runtime = shared + + Seq ( akkaActor , actorConcurrent , akkaHttp , akkaSlf4j , akkaStream , akkaPersistenceJdbc , caffeine , cats , concmap , jodaConvert , jodaTime , icu4j , libPhoneNumber , scalapbSer , scalazCore , akkaTestkit % " test " , scalatest % " test " ) 
 
 val voximplant = shared + + Seq ( akkaActor , dispatch , playJson )

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 index 46ae652 . . 77a66e4 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / file / ImageUtils . scala 
 @ @ - 85 , 12 + 85 , 7 @ @ object ImageUtils { 
 def scaleAvatar ( 
 fullFileId : Long , 
 rng : ThreadLocalRandom 
 - ) ( 
 - implicit 
 - fsAdapter : FileStorageAdapter , 
 - ec : ExecutionContext , 
 - system : ActorSystem 
 - ) : DBIO [ Either [ Throwable , Avatar ] ] = 
 + ) ( implicit system : ActorSystem ) : DBIO [ Either [ Throwable , Avatar ] ] = 
 scaleAvatar ( 
 fullFileId , 
 rng , 
 @ @ - 103 , 12 + 98 , 9 @ @ object ImageUtils { 
 rng : ThreadLocalRandom , 
 smallDesc : ThumbDescriptor , 
 largeDesc : ThumbDescriptor 
 - ) ( 
 - implicit 
 - fsAdapter : FileStorageAdapter , 
 - ec : ExecutionContext , 
 - system : ActorSystem 
 - ) : DBIO [ Either [ Throwable , Avatar ] ] = { 
 + ) ( implicit system : ActorSystem ) : DBIO [ Either [ Throwable , Avatar ] ] = { 
 + implicit val ec : ExecutionContext = system . dispatcher 
 + val fsAdapter = FileStorageExtension ( system ) . fsAdapter 
 persist . FileRepo . find ( fullFileId ) flatMap { 
 case Some ( fullFileModel ) ⇒ 
 fsAdapter . downloadFile ( fullFileId ) flatMap { 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ImplicitFileStorageAdapter . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ImplicitFileStorageAdapter . scala 
 deleted file mode 100644 
 index 0bc8b62 . . 0000000 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ImplicitFileStorageAdapter . scala 
 + + + / dev / null 
 @ @ - 1 , 14 + 0 , 0 @ @ 
 - package im . actor . server 
 - 
 - import akka . actor . ActorSystem 
 - import com . amazonaws . auth . EnvironmentVariableCredentialsProvider 
 - import im . actor . server . file . s3 . { S3StorageAdapter , S3StorageAdapterConfig } 
 - import im . actor . server . file . FileStorageAdapter 
 - 
 - trait ImplicitFileStorageAdapter { 
 - protected implicit val system : ActorSystem 
 - 
 - protected implicit lazy val awsCredentials = new EnvironmentVariableCredentialsProvider ( ) 
 - protected implicit lazy val fsAdapterS3 : S3StorageAdapter = new S3StorageAdapter ( system ) 
 - protected implicit lazy val fsAdapter : FileStorageAdapter = fsAdapterS3 
 - } 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / Implicits . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / Implicits . scala 
 deleted file mode 100644 
 index 4299b9f . . 0000000 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / Implicits . scala 
 + + + / dev / null 
 @ @ - 1 , 9 + 0 , 0 @ @ 
 - package im . actor . server 
 - 
 - trait ImplicitRegions 
 - extends ImplicitSeqUpdatesManagerRegion 
 - with ImplicitSessionRegion 
 - with ImplicitSocialManagerRegion 
 - 
 - trait ImplicitServiceDependencies extends ImplicitFileStorageAdapter 
 - 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 index aed25c8 . . f9f8356 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 @ @ - 2 , 6 + 2 , 7 @ @ package im . actor . server 
 
 import java . net . InetSocketAddress 
 
 + import com . amazonaws . auth . EnvironmentVariableCredentialsProvider 
 import com . amazonaws . services . s3 . transfer . TransferManager 
 import com . typesafe . config . ConfigFactory 
 import im . actor . api . rpc . auth . _ 
 @ @ - 32 , 7 + 33 , 7 @ @ class SimpleServerE2eSpec extends ActorSuite ( 
 | } 
 " " " . stripMargin 
 ) ) 
 - ) with ImplicitFileStorageAdapter with ActorSerializerPrepare { 
 + ) with ActorSerializerPrepare { 
 behavior of " Server " 
 
 it should " connect and Handshake " in Server . e1 
 @ @ - 58 , 6 + 59 , 7 @ @ class SimpleServerE2eSpec extends ActorSuite ( 
 Session . startRegion ( Session . props ) 
 implicit val sessionRegion = Session . startRegionProxy ( ) 
 
 + private val awsCredentials = new EnvironmentVariableCredentialsProvider ( ) 
 implicit val transferManager = new TransferManager ( awsCredentials ) 
 implicit val ec : ExecutionContext = system . dispatcher 
 implicit val oauth2Service = new GoogleProvider ( oauthGoogleConfig ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 index f3d1576 . . 066e29b 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / FilesServiceSpec . scala 
 @ @ - 11 , 7 + 11 , 6 @ @ import im . actor . server . _ 
 
 class FilesServiceSpec 
 extends BaseAppSuite 
 - with ImplicitFileStorageAdapter 
 with ImplicitSessionRegion 
 with ImplicitAuthService { 
 behavior of " FilesService " 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 index 1fdfbad . . 985adf6 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / MessagingServiceHistorySpec . scala 
 @ @ - 17 , 7 + 17 , 6 @ @ import scala . concurrent . Future 
 import scala . util . Random 
 
 final class MessagingServiceHistorySpec extends BaseAppSuite with GroupsServiceHelpers 
 - with ImplicitFileStorageAdapter 
 with ImplicitSessionRegion 
 with ImplicitAuthService 
 with ImplicitSequenceService 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 index aa44dff . . 81e2188 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / ProfileServiceSpec . scala 
 @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . api . rpc . service 
 
 import java . nio . file . { Files , Paths } 
 
 - import im . actor . server . file . ImageUtils 
 + import im . actor . server . file . { FileStorageExtension , ImageUtils } 
 
 import scala . concurrent . Await 
 import scala . concurrent . duration . _ 
 @ @ - 19 , 7 + 19 , 6 @ @ import im . actor . server . api . rpc . service . profile . { ProfileErrors , ProfileServiceIm 
 
 final class ProfileServiceSpec 
 extends BaseAppSuite 
 - with ImplicitFileStorageAdapter 
 with ImplicitSessionRegion 
 with ImplicitAuthService { 
 behavior of " Profile Service " 
 @ @ - 43 , 6 + 42 , 8 @ @ final class ProfileServiceSpec 
 implicit lazy val service = new ProfileServiceImpl 
 implicit lazy val filesService = new FilesServiceImpl 
 
 + private val fsAdapter = FileStorageExtension ( system ) . fsAdapter 
 + 
 private val invalidImageFile = Paths . get ( getClass . getResource ( " / invalid - avatar . jpg " ) . toURI ) . toFile 
 private val tooLargeImageFile = Paths . get ( getClass . getResource ( " / too - large - avatar . jpg " ) . toURI ) . toFile 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 index 9ae40e9 . . be0c086 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / http / HttpApiFrontendSpec . scala 
 @ @ - 20 , 7 + 20 , 7 @ @ import im . actor . server . api . http . webhooks . OutgoingHooksErrors 
 import im . actor . server . api . http . { HttpApiConfig , HttpApiFrontend } 
 import im . actor . server . api . rpc . service . groups . { GroupInviteConfig , GroupsServiceImpl } 
 import im . actor . server . api . rpc . service . messaging 
 - import im . actor . server . file . ImageUtils 
 + import im . actor . server . file . { FileStorageExtension , ImageUtils } 
 import play . api . libs . json . _ 
 
 import scala . concurrent . forkjoin . ThreadLocalRandom 
 @ @ - 28 , 7 + 28 , 6 @ @ import scala . concurrent . forkjoin . ThreadLocalRandom 
 final class HttpApiFrontendSpec 
 extends BaseAppSuite 
 with GroupsServiceHelpers 
 - with ImplicitFileStorageAdapter 
 with ImplicitSessionRegion 
 with ImplicitAuthService 
 with PlayJsonSupport { 
 @ @ - 79 , 6 + 78 , 8 @ @ final class HttpApiFrontendSpec 
 implicit lazy val service = messaging . MessagingServiceImpl ( ) 
 implicit lazy val groupsService = new GroupsServiceImpl ( groupInviteConfig ) 
 
 + private val fsAdapter = FileStorageExtension ( system ) . fsAdapter 
 + 
 implicit val reverseHookResponseUnmarshaller : FromEntityUnmarshaller [ ReverseHookResponse ] = Unmarshaller { implicit ec ⇒ entity ⇒ 
 Unmarshal ( entity ) . to [ String ] . map { body ⇒ 
 Json . parse ( body ) . as [ ReverseHookResponse ]
