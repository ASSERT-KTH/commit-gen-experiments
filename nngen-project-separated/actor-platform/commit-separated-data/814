BLEU SCORE: 0.39803049244579564

TEST MSG: feat ( server : push ) : voip token registration
GENERATED MSG: fix ( server : push ) : delete old push credentials by token

TEST DIFF (one line): diff - - git a / actor - server / actor - models / src / main / protobuf / model / push . proto b / actor - server / actor - models / src / main / protobuf / model / push . proto < nl > index 357fe9c . . 7ba6991 100644 < nl > - - - a / actor - server / actor - models / src / main / protobuf / model / push . proto < nl > + + + b / actor - server / actor - models / src / main / protobuf / model / push . proto < nl > @ @ - 18 , 6 + 18 , 7 @ @ message ApplePushCredentials { < nl > int64 auth _ id = 1 ; < nl > int32 apns _ key = 2 ; < nl > bytes token = 3 ; < nl > + bool is _ voip = 4 ; < nl > } < nl > < nl > message ActorPushCredentials { < nl > diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20160228174726 _ _ AddIsVoipToAppleCreds . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20160228174726 _ _ AddIsVoipToAppleCreds . sql < nl > new file mode 100644 < nl > index 0000000 . . fbce5be < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20160228174726 _ _ AddIsVoipToAppleCreds . sql < nl > @ @ - 0 , 0 + 1 @ @ < nl > + ALTER TABLE apple _ push _ credentials ADD COLUMN is _ voip BOOL NOT NULL DEFAULT FALSE ; < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala < nl > index f94e586 . . 6eab3b6 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala < nl > @ @ - 15 , 7 + 15 , 9 @ @ final class ApplePushCredentialsTable ( tag : Tag ) extends Table [ ApplePushCredentia < nl > < nl > def token = column [ ByteString ] ( " token " ) < nl > < nl > - def * = ( authId , apnsKey , token ) < > ( ( ApplePushCredentials . apply _ ) . tupled , ApplePushCredentials . unapply ) < nl > + def isVoip = column [ Boolean ] ( " is _ voip " ) < nl > + < nl > + def * = ( authId , apnsKey , token , isVoip ) < > ( ( ApplePushCredentials . apply _ ) . tupled , ApplePushCredentials . unapply ) < nl > } < nl > < nl > object ApplePushCredentialsRepo { < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala < nl > index 7ed9503 . . 7ee05af 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala < nl > @ @ - 16 , 6 + 16 , 10 @ @ import slick . driver . PostgresDriver . api . _ < nl > < nl > import scala . concurrent . { ExecutionContext , Future } < nl > < nl > + object PushRpcErrors { < nl > + val WrongToken = RpcError ( 400 , " WRONG _ TOKEN " , " Wrong APNS Token " , false , None ) < nl > + } < nl > + < nl > final class PushServiceImpl ( < nl > implicit < nl > actorSystem : ActorSystem < nl > @ @ - 46 , 7 + 50 , 7 @ @ final class PushServiceImpl ( < nl > BitVector . fromHex ( token ) match { < nl > case Some ( tokenBits ) ⇒ < nl > val tokenBytes = tokenBits . toByteArray < nl > - val creds = ApplePushCredentials ( clientData . authId , apnsKey , ByteString . copyFrom ( tokenBytes ) ) < nl > + val creds = ApplePushCredentials ( clientData . authId , apnsKey , ByteString . copyFrom ( tokenBytes ) , isVoip = false ) < nl > val action : DBIO [ HandlerResult [ ResponseVoid ] ] = for { < nl > _ ← ApplePushCredentialsRepo . deleteByToken ( tokenBytes ) < nl > _ ← ApplePushCredentialsRepo . createOrUpdate ( creds ) < nl > @ @ - 54 , 7 + 58 , 7 @ @ final class PushServiceImpl ( < nl > } yield Ok ( ResponseVoid ) < nl > db . run ( action ) < nl > case None ⇒ < nl > - Future . successful ( Error ( RpcError ( 400 , " WRONG _ TOKEN " , " Wrong APNS Token " , false , None ) ) ) < nl > + Future . successful ( Error ( PushRpcErrors . WrongToken ) ) < nl > } < nl > } < nl > < nl > @ @ - 82 , 5 + 86 , 16 @ @ final class PushServiceImpl ( < nl > apnsKey : Int , < nl > token : String , < nl > clientData : ClientData < nl > - ) : Future [ HandlerResult [ ResponseVoid ] ] = FastFuture . failed ( new RuntimeException ( " Not implemented " ) ) < nl > + ) : Future [ HandlerResult [ ResponseVoid ] ] = < nl > + BitVector . fromHex ( token ) match { < nl > + case Some ( tokenBits ) ⇒ < nl > + val tokenBytes = tokenBits . toByteArray < nl > + val creds = ApplePushCredentials ( clientData . authId , apnsKey , ByteString . copyFrom ( tokenBytes ) , isVoip = true ) < nl > + val action : DBIO [ HandlerResult [ ResponseVoid ] ] = for { < nl > + _ ← ApplePushCredentialsRepo . deleteByToken ( tokenBytes ) < nl > + _ ← ApplePushCredentialsRepo . createOrUpdate ( creds ) < nl > + } yield Ok ( ResponseVoid ) < nl > + db . run ( action ) < nl > + case None ⇒ Future . successful ( Error ( PushRpcErrors . WrongToken ) ) < nl > + } < nl > } < nl > \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20150727191745 _ _ AddAppleTokenIndex . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20150727191745 _ _ AddAppleTokenIndex . sql < nl > new file mode 100644 < nl > index 0000000 . . 1ea6555 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20150727191745 _ _ AddAppleTokenIndex . sql < nl > @ @ - 0 , 0 + 1 @ @ < nl > + CREATE INDEX idx _ apple _ push _ credentials _ token on apple _ push _ credentials ( token ) ; < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentials . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentials . scala < nl > index 8bfec9d . . 106b7d3 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentials . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentials . scala < nl > @ @ - 34 , 4 + 34 , 7 @ @ object ApplePushCredentials { < nl > < nl > def delete ( authId : Long ) = < nl > creds . filter ( _ . authId = = = authId ) . delete < nl > + < nl > + def deleteByToken ( token : Array [ Byte ] ) = < nl > + creds . filter ( _ . token = = = token ) . delete < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / GooglePushCredentials . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / GooglePushCredentials . scala < nl > index 2a5cb2d . . 22294d2 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / GooglePushCredentials . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / GooglePushCredentials . scala < nl > @ @ - 34 , 4 + 34 , 7 @ @ object GooglePushCredentials { < nl > < nl > def delete ( authId : Long ) = < nl > creds . filter ( _ . authId = = = authId ) . delete < nl > + < nl > + def deleteByToken ( token : String ) = < nl > + creds . filter ( _ . regId = = = token ) . delete < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > index 73221d1 . . 79a6261 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > @ @ - 143 , 7 + 143 , 7 @ @ trait AuthHelpers extends Helpers { < nl > } < nl > < nl > / * * < nl > - * Terminate all sessions associated with given ` deviceHash ` for user with id ` userId ` < nl > + * Terminate all sessions associated with given ` deviceHash ` < nl > * and create new session < nl > * / < nl > protected def refreshAuthSession ( deviceHash : Array [ Byte ] , newSession : models . AuthSession ) : DBIO [ Unit ] = < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala < nl > index 8991e3d . . 86d2927 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala < nl > @ @ - 4 , 8 + 4 , 8 @ @ import akka . actor . ActorSystem < nl > import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . misc . ResponseVoid < nl > import im . actor . api . rpc . push . PushService < nl > - import im . actor . server . models < nl > import im . actor . server . push . { SeqUpdatesManager , SeqUpdatesManagerRegion } < nl > + import im . actor . server . { models , persist } < nl > import scodec . bits . BitVector < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > @ @ - 26 , 16 + 26 , 23 @ @ class PushServiceImpl ( < nl > < nl > override def jhandleRegisterGooglePush ( projectId : Long , token : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { < nl > val creds = models . push . GooglePushCredentials ( clientData . authId , projectId , token ) < nl > - SeqUpdatesManager . setPushCredentials ( clientData . authId , creds ) < nl > - Future . successful ( Ok ( ResponseVoid ) ) < nl > + val action : DBIO [ HandlerResult [ ResponseVoid ] ] = for { < nl > + _ ← persist . push . GooglePushCredentials . deleteByToken ( token ) < nl > + _ ← DBIO . successful ( SeqUpdatesManager . setPushCredentials ( clientData . authId , creds ) ) < nl > + } yield Ok ( ResponseVoid ) < nl > + db . run ( action ) < nl > } < nl > < nl > override def jhandleRegisterApplePush ( apnsKey : Int , token : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { < nl > BitVector . fromHex ( token ) match { < nl > case Some ( tokenBits ) ⇒ < nl > - val creds = models . push . ApplePushCredentials ( clientData . authId , apnsKey , tokenBits . toByteArray ) < nl > - SeqUpdatesManager . setPushCredentials ( clientData . authId , creds ) < nl > - Future . successful ( Ok ( ResponseVoid ) ) < nl > + val tokenBytes = tokenBits . toByteArray < nl > + val creds = models . push . ApplePushCredentials ( clientData . authId , apnsKey , tokenBytes ) < nl > + val action : DBIO [ HandlerResult [ ResponseVoid ] ] = for { < nl > + _ ← persist . push . ApplePushCredentials . deleteByToken ( tokenBytes ) < nl > + _ ← DBIO . successful ( SeqUpdatesManager . setPushCredentials ( clientData . authId , creds ) ) < nl > + } yield Ok ( ResponseVoid ) < nl > + db . run ( action ) < nl > case None ⇒ < nl > Future . successful ( Error ( RpcError ( 400 , " WRONG _ TOKEN " , " Wrong APNS Token " , false , None ) ) ) < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - models / src / main / protobuf / model / push . proto b / actor - server / actor - models / src / main / protobuf / model / push . proto 
 index 357fe9c . . 7ba6991 100644 
 - - - a / actor - server / actor - models / src / main / protobuf / model / push . proto 
 + + + b / actor - server / actor - models / src / main / protobuf / model / push . proto 
 @ @ - 18 , 6 + 18 , 7 @ @ message ApplePushCredentials { 
 int64 auth _ id = 1 ; 
 int32 apns _ key = 2 ; 
 bytes token = 3 ; 
 + bool is _ voip = 4 ; 
 } 
 
 message ActorPushCredentials { 
 diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20160228174726 _ _ AddIsVoipToAppleCreds . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20160228174726 _ _ AddIsVoipToAppleCreds . sql 
 new file mode 100644 
 index 0000000 . . fbce5be 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20160228174726 _ _ AddIsVoipToAppleCreds . sql 
 @ @ - 0 , 0 + 1 @ @ 
 + ALTER TABLE apple _ push _ credentials ADD COLUMN is _ voip BOOL NOT NULL DEFAULT FALSE ; 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala 
 index f94e586 . . 6eab3b6 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentialsRepo . scala 
 @ @ - 15 , 7 + 15 , 9 @ @ final class ApplePushCredentialsTable ( tag : Tag ) extends Table [ ApplePushCredentia 
 
 def token = column [ ByteString ] ( " token " ) 
 
 - def * = ( authId , apnsKey , token ) < > ( ( ApplePushCredentials . apply _ ) . tupled , ApplePushCredentials . unapply ) 
 + def isVoip = column [ Boolean ] ( " is _ voip " ) 
 + 
 + def * = ( authId , apnsKey , token , isVoip ) < > ( ( ApplePushCredentials . apply _ ) . tupled , ApplePushCredentials . unapply ) 
 } 
 
 object ApplePushCredentialsRepo { 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala 
 index 7ed9503 . . 7ee05af 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala 
 @ @ - 16 , 6 + 16 , 10 @ @ import slick . driver . PostgresDriver . api . _ 
 
 import scala . concurrent . { ExecutionContext , Future } 
 
 + object PushRpcErrors { 
 + val WrongToken = RpcError ( 400 , " WRONG _ TOKEN " , " Wrong APNS Token " , false , None ) 
 + } 
 + 
 final class PushServiceImpl ( 
 implicit 
 actorSystem : ActorSystem 
 @ @ - 46 , 7 + 50 , 7 @ @ final class PushServiceImpl ( 
 BitVector . fromHex ( token ) match { 
 case Some ( tokenBits ) ⇒ 
 val tokenBytes = tokenBits . toByteArray 
 - val creds = ApplePushCredentials ( clientData . authId , apnsKey , ByteString . copyFrom ( tokenBytes ) ) 
 + val creds = ApplePushCredentials ( clientData . authId , apnsKey , ByteString . copyFrom ( tokenBytes ) , isVoip = false ) 
 val action : DBIO [ HandlerResult [ ResponseVoid ] ] = for { 
 _ ← ApplePushCredentialsRepo . deleteByToken ( tokenBytes ) 
 _ ← ApplePushCredentialsRepo . createOrUpdate ( creds ) 
 @ @ - 54 , 7 + 58 , 7 @ @ final class PushServiceImpl ( 
 } yield Ok ( ResponseVoid ) 
 db . run ( action ) 
 case None ⇒ 
 - Future . successful ( Error ( RpcError ( 400 , " WRONG _ TOKEN " , " Wrong APNS Token " , false , None ) ) ) 
 + Future . successful ( Error ( PushRpcErrors . WrongToken ) ) 
 } 
 } 
 
 @ @ - 82 , 5 + 86 , 16 @ @ final class PushServiceImpl ( 
 apnsKey : Int , 
 token : String , 
 clientData : ClientData 
 - ) : Future [ HandlerResult [ ResponseVoid ] ] = FastFuture . failed ( new RuntimeException ( " Not implemented " ) ) 
 + ) : Future [ HandlerResult [ ResponseVoid ] ] = 
 + BitVector . fromHex ( token ) match { 
 + case Some ( tokenBits ) ⇒ 
 + val tokenBytes = tokenBits . toByteArray 
 + val creds = ApplePushCredentials ( clientData . authId , apnsKey , ByteString . copyFrom ( tokenBytes ) , isVoip = true ) 
 + val action : DBIO [ HandlerResult [ ResponseVoid ] ] = for { 
 + _ ← ApplePushCredentialsRepo . deleteByToken ( tokenBytes ) 
 + _ ← ApplePushCredentialsRepo . createOrUpdate ( creds ) 
 + } yield Ok ( ResponseVoid ) 
 + db . run ( action ) 
 + case None ⇒ Future . successful ( Error ( PushRpcErrors . WrongToken ) ) 
 + } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / actor - server / actor - persist / src / main / resources / sql / migration / V20150727191745 _ _ AddAppleTokenIndex . sql b / actor - server / actor - persist / src / main / resources / sql / migration / V20150727191745 _ _ AddAppleTokenIndex . sql 
 new file mode 100644 
 index 0000000 . . 1ea6555 
 - - - / dev / null 
 + + + b / actor - server / actor - persist / src / main / resources / sql / migration / V20150727191745 _ _ AddAppleTokenIndex . sql 
 @ @ - 0 , 0 + 1 @ @ 
 + CREATE INDEX idx _ apple _ push _ credentials _ token on apple _ push _ credentials ( token ) ; 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentials . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentials . scala 
 index 8bfec9d . . 106b7d3 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentials . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / ApplePushCredentials . scala 
 @ @ - 34 , 4 + 34 , 7 @ @ object ApplePushCredentials { 
 
 def delete ( authId : Long ) = 
 creds . filter ( _ . authId = = = authId ) . delete 
 + 
 + def deleteByToken ( token : Array [ Byte ] ) = 
 + creds . filter ( _ . token = = = token ) . delete 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / GooglePushCredentials . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / GooglePushCredentials . scala 
 index 2a5cb2d . . 22294d2 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / GooglePushCredentials . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / push / GooglePushCredentials . scala 
 @ @ - 34 , 4 + 34 , 7 @ @ object GooglePushCredentials { 
 
 def delete ( authId : Long ) = 
 creds . filter ( _ . authId = = = authId ) . delete 
 + 
 + def deleteByToken ( token : String ) = 
 + creds . filter ( _ . regId = = = token ) . delete 
 } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 index 73221d1 . . 79a6261 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 @ @ - 143 , 7 + 143 , 7 @ @ trait AuthHelpers extends Helpers { 
 } 
 
 / * * 
 - * Terminate all sessions associated with given ` deviceHash ` for user with id ` userId ` 
 + * Terminate all sessions associated with given ` deviceHash ` 
 * and create new session 
 * / 
 protected def refreshAuthSession ( deviceHash : Array [ Byte ] , newSession : models . AuthSession ) : DBIO [ Unit ] = 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala 
 index 8991e3d . . 86d2927 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / push / PushServiceImpl . scala 
 @ @ - 4 , 8 + 4 , 8 @ @ import akka . actor . ActorSystem 
 import im . actor . api . rpc . _ 
 import im . actor . api . rpc . misc . ResponseVoid 
 import im . actor . api . rpc . push . PushService 
 - import im . actor . server . models 
 import im . actor . server . push . { SeqUpdatesManager , SeqUpdatesManagerRegion } 
 + import im . actor . server . { models , persist } 
 import scodec . bits . BitVector 
 import slick . driver . PostgresDriver . api . _ 
 
 @ @ - 26 , 16 + 26 , 23 @ @ class PushServiceImpl ( 
 
 override def jhandleRegisterGooglePush ( projectId : Long , token : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { 
 val creds = models . push . GooglePushCredentials ( clientData . authId , projectId , token ) 
 - SeqUpdatesManager . setPushCredentials ( clientData . authId , creds ) 
 - Future . successful ( Ok ( ResponseVoid ) ) 
 + val action : DBIO [ HandlerResult [ ResponseVoid ] ] = for { 
 + _ ← persist . push . GooglePushCredentials . deleteByToken ( token ) 
 + _ ← DBIO . successful ( SeqUpdatesManager . setPushCredentials ( clientData . authId , creds ) ) 
 + } yield Ok ( ResponseVoid ) 
 + db . run ( action ) 
 } 
 
 override def jhandleRegisterApplePush ( apnsKey : Int , token : String , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { 
 BitVector . fromHex ( token ) match { 
 case Some ( tokenBits ) ⇒ 
 - val creds = models . push . ApplePushCredentials ( clientData . authId , apnsKey , tokenBits . toByteArray ) 
 - SeqUpdatesManager . setPushCredentials ( clientData . authId , creds ) 
 - Future . successful ( Ok ( ResponseVoid ) ) 
 + val tokenBytes = tokenBits . toByteArray 
 + val creds = models . push . ApplePushCredentials ( clientData . authId , apnsKey , tokenBytes ) 
 + val action : DBIO [ HandlerResult [ ResponseVoid ] ] = for { 
 + _ ← persist . push . ApplePushCredentials . deleteByToken ( tokenBytes ) 
 + _ ← DBIO . successful ( SeqUpdatesManager . setPushCredentials ( clientData . authId , creds ) ) 
 + } yield Ok ( ResponseVoid ) 
 + db . run ( action ) 
 case None ⇒ 
 Future . successful ( Error ( RpcError ( 400 , " WRONG _ TOKEN " , " Wrong APNS Token " , false , None ) ) ) 
 }
