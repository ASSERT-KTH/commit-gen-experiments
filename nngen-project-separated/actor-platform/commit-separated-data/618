BLEU SCORE: 0.10704546329879021

TEST MSG: refactor ( server : session ) : moved rhc handling in RpcHandler , got rid of RpcApiService
GENERATED MSG: feat ( server : rpc ) : ability to register services on - the - fly

TEST DIFF (one line): diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiExtension . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiExtension . scala < nl > index b02211f . . 0937ea2 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiExtension . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiExtension . scala < nl > @ @ - 2 , 12 + 2 , 14 @ @ package im . actor . server . api . rpc < nl > < nl > import akka . actor . _ < nl > import im . actor . api . rpc . Service < nl > - import im . actor . server . api . rpc . RpcApiService . RefreshChain < nl > < nl > final class RpcApiExtension ( system : ExtendedActorSystem ) extends Extension { < nl > - val serviceRef = system . actorOf ( RpcApiService . props ( Seq . empty ) , " rpc - api - service " ) < nl > + private var _ services = Seq . empty [ Service ] < nl > + private var _ chain = buildChain < nl > < nl > - private [ rpc ] var services = Seq . empty [ Service ] < nl > + def services = _ services < nl > + < nl > + def chain = _ chain < nl > < nl > def register ( clazz : Class [ _ < : Service ] ) : Unit = { < nl > val service = system . dynamicAccess . createInstanceFor [ Service ] ( clazz , List ( classOf [ ActorSystem ] → system ) ) . get < nl > @ @ - 16 , 21 + 18 , 22 @ @ final class RpcApiExtension ( system : ExtendedActorSystem ) extends Extension { < nl > < nl > def register ( service : Service ) : Unit = { < nl > synchronized { < nl > - services = services : + service < nl > + _ services = _ services : + service < nl > + _ chain = buildChain < nl > } < nl > - < nl > - serviceRef ! RefreshChain < nl > } < nl > < nl > def register ( services : Seq [ Service ] ) : Unit = { < nl > synchronized { < nl > - this . services = this . services + + services < nl > + this . _ services = this . _ services + + services < nl > + _ chain = buildChain < nl > } < nl > - < nl > - serviceRef ! RefreshChain < nl > } < nl > < nl > - private [ rpc ] def getChain = services . map ( _ . handleRequestPartial ) . reduce ( _ orElse _ ) < nl > + private def buildChain = < nl > + if ( _ services . nonEmpty ) < nl > + _ services . map ( _ . handleRequestPartial ) . reduce ( _ orElse _ ) < nl > + else PartialFunction . empty < nl > } < nl > < nl > object RpcApiExtension extends ExtensionId [ RpcApiExtension ] with ExtensionIdProvider { < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiService . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiService . scala < nl > deleted file mode 100644 < nl > index 7bb9e7c . . 0000000 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiService . scala < nl > + + + / dev / null < nl > @ @ - 1 , 82 + 0 , 0 @ @ < nl > - package im . actor . server . api . rpc < nl > - < nl > - import akka . actor . _ < nl > - import akka . pattern . pipe < nl > - import cats . data . Xor < nl > - import im . actor . api . rpc . _ < nl > - import im . actor . api . rpc . codecs . _ < nl > - import scodec . bits . _ < nl > - < nl > - import scala . concurrent . _ < nl > - < nl > - object RpcApiService { < nl > - < nl > - @ SerialVersionUID ( 1L ) < nl > - final case class HandleRpcRequest ( messageId : Long , requestBytes : BitVector , clientData : ClientData ) < nl > - < nl > - @ SerialVersionUID ( 1L ) < nl > - final case class RpcResponse ( messageId : Long , result : RpcResult ) < nl > - < nl > - @ SerialVersionUID ( 1L ) < nl > - private [ rpc ] case object RefreshChain < nl > - < nl > - private [ rpc ] def props ( services : Seq [ Service ] ) = Props ( classOf [ RpcApiService ] , services ) < nl > - } < nl > - < nl > - private [ rpc ] final class RpcApiService ( services : Seq [ Service ] ) extends Actor with ActorLogging { < nl > - < nl > - import RpcApiService . _ < nl > - < nl > - private type Chain = PartialFunction [ RpcRequest , ClientData ⇒ Future [ RpcError Xor RpcOk ] ] < nl > - < nl > - / / TODO : configurable < nl > - private val DefaultErrorDelay = 5 < nl > - < nl > - private implicit val ec : ExecutionContext = context . dispatcher < nl > - < nl > - private val rpcApiExt = RpcApiExtension ( context . system ) < nl > - private var chain : Chain = PartialFunction . empty < nl > - < nl > - def receive = { < nl > - case RefreshChain ⇒ < nl > - chain = rpcApiExt . getChain < nl > - case msg @ HandleRpcRequest ( messageId , requestBytes , clientData ) ⇒ < nl > - val replyTo = sender ( ) < nl > - < nl > - try { < nl > - RequestCodec . decode ( requestBytes ) . require map { < nl > - case Request ( rpcRequest ) ⇒ < nl > - log . debug ( " Request : { } , MessageId : { } , Client : { } " , rpcRequest , messageId , clientData ) < nl > - < nl > - val result = < nl > - if ( chain . isDefinedAt ( rpcRequest ) ) { < nl > - chain ( rpcRequest ) ( clientData ) < nl > - } else { < nl > - log . error ( " Unsupported request { } " , rpcRequest ) < nl > - Future . successful ( Error ( CommonRpcErrors . UnsupportedRequest ) ) < nl > - } < nl > - < nl > - result < nl > - . map { res ⇒ < nl > - log . debug ( " Response : { } , Client : { } " , res , clientData ) < nl > - res . fold ( err ⇒ err , ok ⇒ ok ) < nl > - } < nl > - . recover { < nl > - case e : Throwable ⇒ < nl > - log . error ( e , " Failed to handle messageId : { } rpcRequest : { } " , messageId , rpcRequest ) < nl > - RpcInternalError ( true , DefaultErrorDelay ) < nl > - } < nl > - . map ( result ⇒ RpcResponse ( messageId , result ) ) < nl > - . pipeTo ( replyTo ) < nl > - case _ ⇒ < nl > - Future . successful ( CommonRpcErrors . UnsupportedRequest ) < nl > - } < nl > - } catch { < nl > - case e : Exception ⇒ < nl > - log . error ( e , " Failure in RpcApiService while handling messageId : { } " , messageId ) < nl > - replyTo ! RpcResponse ( messageId , RpcInternalError ( true , DefaultErrorDelay ) ) / / TODO : configurable delay < nl > - case e : Throwable ⇒ < nl > - log . error ( e , " Failed to handle { } " , msg ) < nl > - } < nl > - } < nl > - } < nl > diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > index ef474f5 . . d48e08f 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > @ @ - 2 , 21 + 2 , 22 @ @ package im . actor . server . session < nl > < nl > import akka . actor . _ < nl > import akka . event . Logging . MDC < nl > + import akka . http . scaladsl . util . FastFuture < nl > import akka . pattern . pipe < nl > import akka . stream . actor . _ < nl > import com . github . kxbmap . configs . Bytes < nl > - import im . actor . api . rpc . { ClientData , RpcError , RpcInternalError , RpcOk , RpcResult } < nl > - import im . actor . server . api . rpc . RpcApiService . RpcResponse < nl > - import im . actor . server . api . rpc . { RpcApiExtension , RpcApiService } < nl > + import im . actor . api . rpc . codecs . RequestCodec < nl > + import im . actor . api . rpc . { ClientData , Error , Ok , RpcError , RpcInternalError , RpcOk , RpcResult } < nl > + import im . actor . concurrent . _ < nl > + import im . actor . server . api . rpc . RpcApiExtension < nl > import im . actor . util . cache . CacheHelpers . _ < nl > + import scodec . { Attempt , DecodeResult } < nl > < nl > import scala . annotation . tailrec < nl > import scala . collection . immutable < nl > + import scala . concurrent . Future < nl > import scala . concurrent . duration . _ < nl > - import scala . concurrent . { Future , Promise } < nl > import scala . language . postfixOps < nl > - import scala . util . control . NoStackTrace < nl > - import scala . util . { Failure , Success , Try } < nl > < nl > private [ session ] object RpcHandler { < nl > private [ session ] val MaxCacheSize = 100L < nl > @ @ - 24 , 59 + 25 , 35 @ @ private [ session ] object RpcHandler { < nl > < nl > private [ session ] def props ( authId : Long , sessionId : Long , config : RpcConfig ) = Props ( classOf [ RpcHandler ] , authId , sessionId , config ) < nl > < nl > - private case class CachedResponse ( rsp : RpcApiService . RpcResponse ) < nl > - private case class Ack ( messageId : Long ) < nl > - < nl > - type AckOrResult = Either [ Long , RpcResult ] < nl > - } < nl > + private case class CachedResponse ( messageId : Long , rsp : RpcResult , clientData : ClientData ) < nl > < nl > - private [ session ] case class RpcConfig ( maxCachedResults : Long , maxCachedResultSize : Bytes , ackDelay : FiniteDuration ) < nl > + private case class Response ( messageId : Long , rsp : RpcResult , clientData : ClientData ) < nl > < nl > - private [ session ] object RequestHandler { < nl > - private [ session ] def props ( promise : Promise [ RpcApiService . RpcResponse ] , service : ActorRef , request : RpcApiService . HandleRpcRequest ) = < nl > - Props ( classOf [ RequestHandler ] , promise , service , request ) < nl > - } < nl > + private case class ResponseFailure ( messageId : Long , request : im . actor . api . rpc . Request , failure : Throwable , clientData : ClientData ) < nl > < nl > - private [ session ] class RequestHandler ( < nl > - promise : Promise [ RpcApiService . RpcResponse ] , < nl > - service : ActorRef , < nl > - request : RpcApiService . HandleRpcRequest < nl > - ) extends Actor with ActorLogging { < nl > + private case class Ack ( messageId : Long ) < nl > < nl > - context . setReceiveTimeout ( RpcHandler . RequestTimeOut ) < nl > + type AckOrResult = Either [ Long , RpcResult ] < nl > < nl > - override def preStart ( ) : Unit = { < nl > - super . preStart ( ) < nl > - service ! request < nl > - } < nl > + private val DefaultErrorDelay = 5 < nl > < nl > - def receive = { < nl > - case rsp : RpcApiService . RpcResponse ⇒ complete ( Success ( rsp ) ) < nl > - case ReceiveTimeout ⇒ < nl > - log . error ( " Request timed out " ) < nl > - val rsp = RpcResponse ( request . messageId , RpcInternalError ( true , 1 ) ) < nl > - complete ( Success ( rsp ) ) < nl > - case unexpected ⇒ < nl > - log . error ( " Unexpected message { } " , unexpected ) < nl > - complete ( Failure ( new Exception ( " Got unexpected message " ) with NoStackTrace ) ) < nl > + object RpcErrors { < nl > + val InternalError = RpcInternalError ( canTryAgain = true , tryAgainDelay = DefaultErrorDelay ) < nl > + val RequestNotSupported = RpcError ( 400 , " REQUEST _ NOT _ SUPPORTED " , " Request is not supported . " , canTryAgain = true , data = None ) < nl > } < nl > < nl > - private def complete ( result : Try [ RpcApiService . RpcResponse ] ) = { < nl > - promise . complete ( result ) < nl > - context . stop ( self ) < nl > - } < nl > } < nl > < nl > - private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConfig ) extends ActorSubscriber with ActorPublisher [ ( Option [ RpcResult ] , Long ) ] with DiagnosticActorLogging { < nl > + private [ session ] case class RpcConfig ( maxCachedResults : Long , maxCachedResultSize : Bytes , ackDelay : FiniteDuration ) < nl > + < nl > + private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConfig ) extends ActorSubscriber with ActorPublisher [ ( Option [ RpcResult ] , Long ) ] with ImActorLogging { < nl > < nl > import ActorPublisherMessage . _ < nl > import ActorSubscriberMessage . _ < nl > import RpcHandler . _ < nl > import SessionStreamMessage . _ < nl > < nl > - private implicit val ec = context . dispatcher < nl > - < nl > - private [ this ] val rpcApiService = RpcApiExtension ( context . system ) . serviceRef < nl > + import context . _ < nl > < nl > def receive = subscriber orElse publisher orElse { < nl > case unmatched ⇒ < nl > @ @ - 90 , 7 + 67 , 7 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf < nl > private [ this ] var protoMessageQueue = immutable . Queue . empty [ ( Option [ RpcResult ] , Long ) ] < nl > < nl > / / FIXME : invalidate on incoming ack < nl > - private [ this ] val responseCache = createCache [ java . lang . Long , Future [ RpcApiService . RpcResponse ] ] ( config . maxCachedResults ) < nl > + private [ this ] val responseCache = createCache [ java . lang . Long , Future [ RpcResult ] ] ( config . maxCachedResults ) < nl > < nl > def subscriber : Receive = { < nl > case OnNext ( HandleRpcRequest ( messageId , requestBytes , clientData ) ) ⇒ < nl > @ @ - 99 , 7 + 76 , 7 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf < nl > Option ( responseCache . getIfPresent ( messageId ) ) match { < nl > case Some ( rspFuture ) ⇒ < nl > log . debug ( " Publishing cached RpcResponse for messageId : { } " , messageId ) < nl > - rspFuture map CachedResponse pipeTo self < nl > + rspFuture map ( CachedResponse ( messageId , _ , clientData ) ) pipeTo self < nl > case None ⇒ < nl > val scheduledAck = context . system . scheduler . scheduleOnce ( config . ackDelay , self , Ack ( messageId ) ) < nl > requestQueue + = ( messageId → scheduledAck ) < nl > @ @ - 107 , 19 + 84 , 22 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf < nl > < nl > log . debug ( " Making an rpc request for messageId { } " , messageId ) < nl > < nl > - val responsePromise = Promise [ RpcApiService . RpcResponse ] ( ) < nl > - context . actorOf ( < nl > - RequestHandler . props ( < nl > - responsePromise , < nl > - rpcApiService , < nl > - RpcApiService . HandleRpcRequest ( messageId , requestBytes , clientData ) < nl > - ) , < nl > - s " handler - $ messageId " < nl > - ) < nl > - < nl > - responseCache . put ( messageId , responsePromise . future ) < nl > - < nl > - responsePromise . future pipeTo self < nl > + val responseFuture = < nl > + RequestCodec . decode ( requestBytes ) match { < nl > + case Attempt . Successful ( DecodeResult ( request , _ ) ) ⇒ < nl > + val resultFuture = handleRequest ( request , clientData ) < nl > + responseCache . put ( messageId , resultFuture ) < nl > + < nl > + resultFuture . map ( Response ( messageId , _ , clientData ) ) < nl > + . recover { < nl > + case e : Throwable ⇒ ResponseFailure ( messageId , request , e , clientData ) < nl > + } < nl > + case Attempt . Failure ( err ) ⇒ < nl > + log . warning ( " Failed to decode request : { } " , err . messageWithContext ) < nl > + FastFuture . successful ( Response ( messageId , RpcErrors . RequestNotSupported , clientData ) ) < nl > + } < nl > + < nl > + responseFuture . pipeTo ( self ) < nl > } < nl > case OnComplete ⇒ < nl > context . stop ( self ) < nl > @ @ - 132 , 23 + 112 , 34 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf < nl > } < nl > < nl > def publisher : Receive = { < nl > - case RpcApiService . RpcResponse ( messageId , result ) ⇒ < nl > - log . debug ( " Received RpcResponse for messageId { } : { } " , messageId , result ) < nl > + case Response ( messageId , rsp , clientData ) ⇒ < nl > + log . debug ( " Got RpcResponse for messageId { } : { } " , messageId , rsp ) < nl > < nl > - if ( ! canCache ( result ) ) < nl > + if ( ! canCache ( rsp ) ) < nl > responseCache . invalidate ( messageId ) < nl > < nl > - requestQueue . get ( messageId ) foreach ( _ . cancel ( ) ) < nl > - requestQueue - = messageId < nl > - enqueue ( Some ( result ) , messageId ) < nl > - case CachedResponse ( rsp ) ⇒ < nl > - log . debug ( " Got cached RpcResponse for messageId : { } , { } " , rsp . messageId , rsp . result ) < nl > - enqueue ( Some ( rsp . result ) , rsp . messageId ) < nl > + removeFromQueue ( messageId ) < nl > + enqueue ( Some ( rsp ) , messageId ) < nl > + case CachedResponse ( messageId , rsp , clientData ) ⇒ < nl > + log . debug ( " Got cached RpcResponse for messageId { } : { } " , messageId , rsp ) < nl > + enqueue ( Some ( rsp ) , messageId ) < nl > + case ResponseFailure ( messageId , request , failure , clientData ) ⇒ < nl > + markFailure { < nl > + log . error ( failure , " Failed to process request : { } " , request ) < nl > + responseCache . invalidate ( messageId ) < nl > + removeFromQueue ( messageId ) < nl > + enqueue ( Some ( RpcErrors . InternalError ) , messageId ) < nl > + } < nl > case Ack ( messageId ) ⇒ enqueueAck ( messageId ) < nl > case Request ( _ ) ⇒ deliverBuf ( ) < nl > case Cancel ⇒ context . stop ( self ) < nl > } < nl > < nl > + private def removeFromQueue ( messageId : Long ) : Unit = { < nl > + requestQueue . get ( messageId ) foreach ( _ . cancel ( ) ) < nl > + requestQueue - = messageId < nl > + } < nl > + < nl > private def canCache ( result : RpcResult ) : Boolean = { < nl > val size = result match { < nl > case RpcOk ( res ) ⇒ res . getSerializedSize < nl > @ @ - 190 , 6 + 181 , 19 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf < nl > this . userIdOpt = clientData . optUserId < nl > } < nl > < nl > + private def handleRequest ( request : im . actor . api . rpc . Request , clientData : ClientData ) = { < nl > + val resultFuture = < nl > + RpcApiExtension ( context . system ) . chain . lift . apply ( request . body ) match { < nl > + case Some ( handler ) ⇒ handler ( clientData ) < nl > + case None ⇒ FastFuture . successful ( Error ( RpcErrors . RequestNotSupported ) ) < nl > + } < nl > + < nl > + resultFuture . withTimeout ( 20 . seconds ) . map { < nl > + case Ok ( result : RpcOk ) ⇒ result < nl > + case Error ( error ) ⇒ error < nl > + } < nl > + } < nl > + < nl > override def mdc ( currentMessage : Any ) : MDC = { < nl > val base : MDC = Map ( " authId " → authId , " sessionId " → sessionId ) < nl > userIdOpt . fold ( base ) ( userId ⇒ base + ( " userId " → userId ) ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala < nl > index 8f5261a . . c4db3d3 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala < nl > @ @ - 13 , 7 + 13 , 6 @ @ import im . actor . api . rpc . users . { ApiContactRecord , ApiContactType , ApiSex } < nl > import im . actor . concurrent . FutureExt < nl > import im . actor . server . _ < nl > import im . actor . server . activation . common . ActivationConfig < nl > - import im . actor . server . api . rpc . RpcApiService < nl > import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl < nl > import im . actor . server . model . contact . UserContact < nl > import im . actor . server . mtproto . codecs . protocol . MessageBoxCodec < nl > @ @ - 116 , 7 + 115 , 6 @ @ final class AuthServiceSpec < nl > implicit val oauth2Service = new GoogleProvider ( oauthGoogleConfig ) < nl > val activationConfig = ActivationConfig . load . get < nl > implicit val service = new AuthServiceImpl < nl > - implicit val rpcApiService = system . actorOf ( RpcApiService . props ( Seq ( service ) ) ) < nl > implicit val contactService = new ContactsServiceImpl < nl > < nl > val correctUri = " https : / / actor . im / registration " < nl > diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala < nl > index 3f27077 . . dafcf4b 100644 < nl > - - - a / actor - server / project / Dependencies . scala < nl > + + + b / actor - server / project / Dependencies . scala < nl > @ @ - 4 , 7 + 4 , 7 @ @ import sbt . _ < nl > < nl > object Dependencies { < nl > object V { < nl > - val actorCommons = " 0 . 0 . 14 " < nl > + val actorCommons = " 0 . 0 . 15 " < nl > val actorBotkit = " 1 . 0 . 88 " < nl > val akka = " 2 . 4 . 2 " < nl > val akkaHttpJson = " 1 . 5 . 0 "
NEAREST DIFF (one line): diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiExtension . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiExtension . scala < nl > new file mode 100644 < nl > index 0000000 . . ddacf44 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiExtension . scala < nl > @ @ - 0 , 0 + 1 , 35 @ @ < nl > + package im . actor . server . api . rpc < nl > + < nl > + import akka . actor . _ < nl > + import im . actor . api . rpc . Service < nl > + import im . actor . server . api . rpc . RpcApiService . RefreshChain < nl > + < nl > + final class RpcApiExtension ( system : ActorSystem ) extends Extension { < nl > + val serviceRef = system . actorOf ( RpcApiService . props ( Seq . empty ) , " rpc - api - service " ) < nl > + < nl > + private [ rpc ] var services = Seq . empty [ Service ] < nl > + < nl > + def register ( service : Service ) : Unit = { < nl > + synchronized { < nl > + services = services : + service < nl > + } < nl > + < nl > + serviceRef ! RefreshChain < nl > + } < nl > + < nl > + def register ( services : Seq [ Service ] ) : Unit = { < nl > + synchronized { < nl > + this . services = this . services + + services < nl > + } < nl > + < nl > + serviceRef ! RefreshChain < nl > + } < nl > + < nl > + private [ rpc ] def getChain = services . map ( _ . handleRequestPartial ) . reduce ( _ orElse _ ) < nl > + } < nl > + < nl > + object RpcApiExtension extends ExtensionId [ RpcApiExtension ] with ExtensionIdProvider { < nl > + override def createExtension ( system : ExtendedActorSystem ) : RpcApiExtension = new RpcApiExtension ( system ) < nl > + < nl > + override def lookup ( ) : ExtensionId [ _ < : Extension ] = RpcApiExtension < nl > + } < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiService . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiService . scala < nl > index 515d798 . . 6be4684 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiService . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiService . scala < nl > @ @ - 1 , 27 + 1 , 29 @ @ < nl > package im . actor . server . api . rpc < nl > < nl > - import scala . concurrent . _ < nl > - import scalaz . _ < nl > - < nl > import akka . actor . _ < nl > import akka . pattern . pipe < nl > - import scodec . bits . _ < nl > - < nl > import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . codecs . _ < nl > + import scodec . bits . _ < nl > + < nl > + import scala . concurrent . _ < nl > + import scalaz . _ < nl > < nl > object RpcApiService { < nl > < nl > @ SerialVersionUID ( 1L ) < nl > - case class HandleRpcRequest ( messageId : Long , requestBytes : BitVector , clientData : ClientData ) < nl > + final case class HandleRpcRequest ( messageId : Long , requestBytes : BitVector , clientData : ClientData ) < nl > + < nl > + @ SerialVersionUID ( 1L ) < nl > + final case class RpcResponse ( messageId : Long , responseBytes : BitVector ) < nl > < nl > @ SerialVersionUID ( 1L ) < nl > - case class RpcResponse ( messageId : Long , responseBytes : BitVector ) < nl > + private [ rpc ] case object RefreshChain < nl > < nl > - def props ( services : Seq [ Service ] ) = Props ( classOf [ RpcApiService ] , services ) < nl > + private [ rpc ] def props ( services : Seq [ Service ] ) = Props ( classOf [ RpcApiService ] , services ) < nl > } < nl > < nl > - final class RpcApiService ( services : Seq [ Service ] ) extends Actor with ActorLogging { < nl > + private [ rpc ] final class RpcApiService ( services : Seq [ Service ] ) extends Actor with ActorLogging { < nl > < nl > import RpcApiService . _ < nl > < nl > @ @ - 32 , 57 + 34 , 49 @ @ final class RpcApiService ( services : Seq [ Service ] ) extends Actor with ActorLoggin < nl > < nl > private implicit val ec : ExecutionContext = context . dispatcher < nl > < nl > - def receive : Receive = { < nl > - log . debug ( " Services list changed : { } " , services ) < nl > - < nl > - val chain : Chain = < nl > - if ( services . isEmpty ) { < nl > - PartialFunction . empty < nl > - } else { < nl > - services . map ( _ . handleRequestPartial ) . reduce { ( a , b ) ⇒ < nl > - a . orElse ( b ) < nl > + private val rpcApiExt = RpcApiExtension ( context . system ) < nl > + private var chain : Chain = PartialFunction . empty < nl > + < nl > + def receive = { < nl > + case RefreshChain ⇒ < nl > + chain = rpcApiExt . getChain < nl > + case msg @ HandleRpcRequest ( messageId , requestBytes , clientData ) ⇒ < nl > + val replyTo = sender ( ) < nl > + < nl > + try { < nl > + RequestCodec . decode ( requestBytes ) . require map { < nl > + case Request ( rpcRequest ) ⇒ < nl > + log . debug ( " Request : { } , MessageId : { } , Client : { } " , rpcRequest , messageId , clientData ) < nl > + < nl > + val result = < nl > + if ( chain . isDefinedAt ( rpcRequest ) ) { < nl > + chain ( rpcRequest ) ( clientData ) < nl > + } else { < nl > + log . error ( " Unsupported request { } " , rpcRequest ) < nl > + Future . successful ( Error ( CommonErrors . UnsupportedRequest ) ) < nl > + } < nl > + < nl > + result < nl > + . map { res ⇒ < nl > + log . debug ( " Response : { } , Client : { } " , res , clientData ) < nl > + res . fold ( err ⇒ err , ok ⇒ ok ) < nl > + } < nl > + . recover { < nl > + case e : Throwable ⇒ < nl > + log . error ( e , " Failed to handle messageId : { } rpcRequest : { } " , messageId , rpcRequest ) < nl > + RpcInternalError ( true , DefaultErrorDelay ) < nl > + } < nl > + . map ( result ⇒ RpcResponse ( messageId , RpcResultCodec . encode ( result ) . require ) ) < nl > + . pipeTo ( replyTo ) < nl > + case _ ⇒ < nl > + Future . successful ( CommonErrors . UnsupportedRequest ) < nl > } < nl > + } catch { < nl > + case e : Exception ⇒ < nl > + log . error ( e , " Failure in RpcApiService while handling messageId : { } " , messageId ) < nl > + replyTo ! RpcResponse ( messageId , RpcResultCodec . encode ( RpcInternalError ( true , DefaultErrorDelay ) ) . require ) / / TODO : configurable delay < nl > + case e : Throwable ⇒ < nl > + log . error ( e , " Failed to handle { } " , msg ) < nl > } < nl > - < nl > - { < nl > - case msg @ HandleRpcRequest ( messageId , requestBytes , clientData ) ⇒ < nl > - val replyTo = sender ( ) < nl > - < nl > - try { < nl > - RequestCodec . decode ( requestBytes ) . require map { < nl > - case Request ( rpcRequest ) ⇒ < nl > - log . debug ( " Request : { } , MessageId : { } , Client : { } " , rpcRequest , messageId , clientData ) < nl > - < nl > - val result = < nl > - if ( chain . isDefinedAt ( rpcRequest ) ) { < nl > - chain ( rpcRequest ) ( clientData ) < nl > - } else { < nl > - log . error ( " Unsupported request { } " , rpcRequest ) < nl > - Future . successful ( Error ( CommonErrors . UnsupportedRequest ) ) < nl > - } < nl > - < nl > - result < nl > - . map { res ⇒ < nl > - log . debug ( " Response : { } , Client : { } " , res , clientData ) < nl > - res . fold ( err ⇒ err , ok ⇒ ok ) < nl > - } < nl > - . recover { < nl > - case e : Throwable ⇒ < nl > - log . error ( e , " Failed to handle messageId : { } rpcRequest : { } " , messageId , rpcRequest ) < nl > - RpcInternalError ( true , DefaultErrorDelay ) < nl > - } < nl > - . map ( result ⇒ RpcResponse ( messageId , RpcResultCodec . encode ( result ) . require ) ) < nl > - . pipeTo ( replyTo ) < nl > - case _ ⇒ < nl > - Future . successful ( CommonErrors . UnsupportedRequest ) < nl > - } < nl > - } catch { < nl > - case e : Exception ⇒ < nl > - log . error ( e , " Failure in RpcApiService while handling messageId : { } " , messageId ) < nl > - replyTo ! RpcResponse ( messageId , RpcResultCodec . encode ( RpcInternalError ( true , DefaultErrorDelay ) ) . require ) / / TODO : configurable delay < nl > - case e : Throwable ⇒ < nl > - log . error ( e , " Failed to handle { } " , msg ) < nl > - } < nl > - } < nl > } < nl > } < nl > diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > index 10ff637 . . f99f838 100644 < nl > - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala < nl > @ @ - 11 , 7 + 11 , 7 @ @ import im . actor . server . activation . gate . { GateCodeActivation , GateConfig } < nl > import im . actor . server . activation . internal . { ActivationConfig , InternalCodeActivation } < nl > import im . actor . server . api . frontend . Frontend < nl > import im . actor . server . api . http . { HttpApiConfig , HttpApiFrontend } < nl > - import im . actor . server . api . rpc . RpcApiService < nl > + import im . actor . server . api . rpc . { RpcApiExtension , RpcApiService } < nl > import im . actor . server . api . rpc . service . SearchServiceImpl < nl > import im . actor . server . api . rpc . service . auth . AuthServiceImpl < nl > import im . actor . server . api . rpc . service . configs . ConfigsServiceImpl < nl > @ @ - 111 , 7 + 111 , 7 @ @ object Main extends App { < nl > InternalCodeActivation . newContext ( < nl > activationConfig , < nl > new TelesignSmsEngine ( telesignClient ) , < nl > - new TelesignCallEngine ( ( telesignClient ) ) , < nl > + new TelesignCallEngine ( telesignClient ) , < nl > new SmtpEmailSender ( emailConfig ) < nl > ) < nl > case " actor - activation " ⇒ new GateCodeActivation ( gateConfig ) < nl > @ @ - 147 , 7 + 147 , 7 @ @ object Main extends App { < nl > system . log . warning ( " Starting ActorBot " ) < nl > ActorBot . start ( ) < nl > < nl > - system . actorOf ( RpcApiService . props ( services ) , " rpcApiService " ) < nl > + RpcApiExtension ( system ) . register ( services ) < nl > < nl > ActorCliService . start ( system ) < nl > < nl > diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > index 9e8a2f0 . . d0d2eaf 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > @ @ - 5 , 7 + 5 , 7 @ @ import akka . pattern . pipe < nl > import akka . stream . actor . _ < nl > import im . actor . api . rpc . RpcInternalError < nl > import im . actor . server . api . rpc . RpcApiService . RpcResponse < nl > - import im . actor . server . api . rpc . { RpcApiService , RpcResultCodec } < nl > + import im . actor . server . api . rpc . { RpcApiExtension , RpcApiService , RpcResultCodec } < nl > import im . actor . server . mtproto . protocol . { ProtoMessage , RpcResponseBox } < nl > import im . actor . util . cache . CacheHelpers . _ < nl > import scodec . bits . _ < nl > @ @ - 29 , 13 + 29 , 13 @ @ private [ session ] object RpcHandler { < nl > } < nl > < nl > private [ session ] object RequestHandler { < nl > - private [ session ] def props ( promise : Promise [ RpcApiService . RpcResponse ] , service : ActorSelection , request : RpcApiService . HandleRpcRequest ) = < nl > + private [ session ] def props ( promise : Promise [ RpcApiService . RpcResponse ] , service : ActorRef , request : RpcApiService . HandleRpcRequest ) = < nl > Props ( classOf [ RequestHandler ] , promise , service , request ) < nl > } < nl > < nl > private [ session ] class RequestHandler ( < nl > promise : Promise [ RpcApiService . RpcResponse ] , < nl > - service : ActorSelection , < nl > + service : ActorRef , < nl > request : RpcApiService . HandleRpcRequest < nl > ) < nl > extends Actor with ActorLogging { < nl > @ @ - 73 , 7 + 73 , 7 @ @ private [ session ] class RpcHandler extends ActorSubscriber with ActorPublisher [ Pr < nl > < nl > private implicit val ec = context . dispatcher < nl > < nl > - private [ this ] val rpcApiService : ActorSelection = context . actorSelection ( " / user / rpcApiService " ) < nl > + private [ this ] val rpcApiService = RpcApiExtension ( context . system ) . serviceRef < nl > < nl > def receive = subscriber . orElse ( publisher ) . orElse { < nl > case unmatched ⇒ < nl > diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > index df29648 . . ed20a15 100644 < nl > - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala < nl > @ @ - 4 , 9 + 4 , 11 @ @ import akka . actor . { ActorRef , ActorSystem } < nl > import akka . stream . Materializer < nl > import akka . util . Timeout < nl > import eu . codearte . jfairy . Fairy < nl > + import im . actor . api . rpc . ClientData < nl > + import im . actor . api . rpc . auth . { ResponseSendAuthCodeObsolete , AuthService } < nl > import im . actor . api . rpc . peers . { ApiOutPeer , ApiPeerType } < nl > - import im . actor . api . { rpc ⇒ rpcapi } < nl > - import im . actor . server . api . rpc . RpcApiService < nl > + import im . actor . api . rpc . users . ApiUser < nl > + import im . actor . server . api . rpc . { RpcApiExtension , RpcApiService } < nl > import im . actor . server . api . rpc . service . auth . AuthServiceImpl < nl > import im . actor . server . oauth . GoogleProvider < nl > import im . actor . server . session . { Session , SessionConfig , SessionRegion } < nl > @ @ - 26 , 7 + 28 , 7 @ @ trait PersistenceHelpers { < nl > } < nl > < nl > trait UserStructExtensions { < nl > - implicit class ExtUser ( user : rpcapi . users . ApiUser ) { < nl > + implicit class ExtUser ( user : ApiUser ) { < nl > def asModel ( ) ( implicit db : Database ) : models . User = < nl > Await . result ( db . run ( persist . UserRepo . find ( user . id ) . head ) , 3 . seconds ) < nl > } < nl > @ @ - 55 , 7 + 57 , 7 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi < nl > authId < nl > } < nl > < nl > - def createAuthId ( userId : Int ) ( implicit ec : ExecutionContext , system : ActorSystem , db : Database , service : rpcapi . auth . AuthService ) : Long = { < nl > + def createAuthId ( userId : Int ) ( implicit ec : ExecutionContext , system : ActorSystem , db : Database , service : AuthService ) : Long = { < nl > val authId = scala . util . Random . nextLong ( ) < nl > Await . result ( db . run ( persist . AuthIdRepo . create ( authId , None , None ) ) , 1 . second ) < nl > < nl > @ @ - 73 , 7 + 75 , 7 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi < nl > appId = 42 , < nl > appKey = " appKey " , < nl > isSilent = false < nl > - ) ( rpcapi . ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 5 . seconds ) < nl > + ) ( ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 5 . seconds ) < nl > < nl > res match { < nl > case \ / - ( rsp ) ⇒ rsp < nl > @ @ - 86 , 27 + 88 , 27 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi < nl > def createSessionId ( ) : Long = < nl > scala . util . Random . nextLong ( ) < nl > < nl > - def getSmsHash ( authId : Long , phoneNumber : Long ) ( implicit service : rpcapi . auth . AuthService , system : ActorSystem ) : String = withoutLogs { < nl > - val rpcapi . auth . ResponseSendAuthCodeObsolete ( smsHash , _ ) = < nl > - Await . result ( service . handleSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ( rpcapi . ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 1 . second ) . toOption . get < nl > + def getSmsHash ( authId : Long , phoneNumber : Long ) ( implicit service : AuthService , system : ActorSystem ) : String = withoutLogs { < nl > + val ResponseSendAuthCodeObsolete ( smsHash , _ ) = < nl > + Await . result ( service . handleSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ( ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 1 . second ) . toOption . get < nl > < nl > smsHash < nl > } < nl > < nl > - def getSmsCode ( authId : Long , phoneNumber : Long ) ( implicit service : rpcapi . auth . AuthService , system : ActorSystem , db : Database ) : models . AuthSmsCodeObsolete = withoutLogs { < nl > - val res = Await . result ( service . handleSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ( rpcapi . ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 1 . second ) < nl > + def getSmsCode ( authId : Long , phoneNumber : Long ) ( implicit service : AuthService , system : ActorSystem , db : Database ) : models . AuthSmsCodeObsolete = withoutLogs { < nl > + val res = Await . result ( service . handleSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ( ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 1 . second ) < nl > res . toOption . get < nl > < nl > Await . result ( db . run ( persist . AuthSmsCodeObsoleteRepo . findByPhoneNumber ( phoneNumber ) . head ) , 5 . seconds ) < nl > } < nl > < nl > - def createUser ( ) ( implicit service : rpcapi . auth . AuthService , db : Database , system : ActorSystem ) : ( rpcapi . users . ApiUser , Long , Long ) = { < nl > + def createUser ( ) ( implicit service : AuthService , db : Database , system : ActorSystem ) : ( ApiUser , Long , Long ) = { < nl > val authId = createAuthId ( ) < nl > val phoneNumber = buildPhone ( ) < nl > ( createUser ( authId , phoneNumber ) , authId , phoneNumber ) < nl > } < nl > < nl > - def createUser ( phoneNumber : Long ) ( implicit service : rpcapi . auth . AuthService , system : ActorSystem , db : Database ) : rpcapi . users . ApiUser = < nl > + def createUser ( phoneNumber : Long ) ( implicit service : AuthService , system : ActorSystem , db : Database ) : ApiUser = < nl > createUser ( createAuthId ( ) , phoneNumber ) < nl > < nl > def getOutPeer ( userId : Int , clientAuthId : Long ) : ApiOutPeer = { < nl > @ @ - 115 , 7 + 117 , 7 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi < nl > } < nl > < nl > / / TODO : make same method to work with email < nl > - def createUser ( authId : Long , phoneNumber : Long ) ( implicit service : rpcapi . auth . AuthService , system : ActorSystem , db : Database ) : rpcapi . users . ApiUser = < nl > + def createUser ( authId : Long , phoneNumber : Long ) ( implicit service : AuthService , system : ActorSystem , db : Database ) : ApiUser = < nl > withoutLogs { < nl > val smsCode = getSmsCode ( authId , phoneNumber ) < nl > < nl > @ @ - 129 , 7 + 131 , 7 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi < nl > appId = 42 , < nl > appKey = " appKey " , < nl > isSilent = false < nl > - ) ( rpcapi . ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 10 . seconds ) < nl > + ) ( ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 10 . seconds ) < nl > < nl > res match { < nl > case \ / - ( rsp ) ⇒ rsp . user < nl > @ @ - 138 , 7 + 140 , 7 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi < nl > } < nl > < nl > def buildRpcApiService ( services : Seq [ im . actor . api . rpc . Service ] ) ( implicit system : ActorSystem , db : Database ) = < nl > - system . actorOf ( RpcApiService . props ( services ) , " rpcApiService " ) < nl > + RpcApiExtension ( system ) . register ( services ) < nl > < nl > def buildSessionRegion ( rpcApiService : ActorRef ) ( implicit system : ActorSystem , materializer : Materializer ) = { < nl > implicit val sessionConfig = SessionConfig . load ( system . settings . config . getConfig ( " session " ) ) < nl > @ @ - 157 , 7 + 159 , 7 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi < nl > protected def withoutLogs [ A ] ( f : ⇒ A ) ( implicit system : ActorSystem ) : A = { < nl > val logger = org . slf4j . LoggerFactory . getLogger ( org . slf4j . Logger . ROOT _ LOGGER _ NAME ) . asInstanceOf [ ch . qos . logback . classic . Logger ] < nl > < nl > - val logLevel = logger . getLevel ( ) < nl > + val logLevel = logger . getLevel < nl > val esLogLevel = system . eventStream . logLevel < nl > < nl > logger . setLevel ( ch . qos . logback . classic . Level . WARN ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > index 7a14fa4 . . 39b8a9a 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > @ @ - 13 , 7 + 13 , 7 @ @ import im . actor . server . api . rpc . service . auth . AuthServiceImpl < nl > import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl < nl > import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl < nl > import im . actor . server . api . rpc . service . sequence . { SequenceServiceConfig , SequenceServiceImpl } < nl > - import im . actor . server . api . rpc . { RpcApiService , RpcResultCodec } < nl > + import im . actor . server . api . rpc . { RpcApiExtension , RpcResultCodec } < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . mtproto . codecs . protocol . _ < nl > import im . actor . server . mtproto . protocol . _ < nl > @ @ - 69 , 7 + 69 , 7 @ @ class SimpleServerE2eSpec extends ActorSuite ( < nl > new SequenceServiceImpl ( sequenceConfig ) < nl > ) < nl > < nl > - system . actorOf ( RpcApiService . props ( services ) , " rpcApiService " ) < nl > + RpcApiExtension ( system ) . register ( services ) < nl > < nl > TcpFrontend . start ( " 127 . 0 . 0 . 1 " , 9070 , None ) < nl > < nl > @ @ - 337 , 4 + 337 , 5 @ @ class SimpleServerE2eSpec extends ActorSuite ( < nl > mb . body should = = = ( expectedNewSession ) < nl > } < nl > } < nl > + < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala < nl > index 3728479 . . 3711c9b 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala < nl > @ @ - 2 , 16 + 2 , 15 @ @ package im . actor . server . session < nl > < nl > import akka . actor . _ < nl > import akka . testkit . TestProbe < nl > - import akka . util . Timeout < nl > import com . google . protobuf . ByteString < nl > - import im . actor . api . rpc . { Request , RpcRequest , RpcResult } < nl > import im . actor . api . rpc . codecs . _ < nl > import im . actor . api . rpc . sequence . { SeqUpdate , WeakUpdate } < nl > + import im . actor . api . rpc . { Request , RpcRequest , RpcResult } < nl > import im . actor . server < nl > import im . actor . server . _ < nl > import im . actor . server . api . rpc . service . auth . AuthServiceImpl < nl > import im . actor . server . api . rpc . service . sequence . { SequenceServiceConfig , SequenceServiceImpl } < nl > - import im . actor . server . api . rpc . { RpcApiService , RpcResultCodec } < nl > + import im . actor . server . api . rpc . { RpcApiExtension , RpcResultCodec } < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . mtproto . codecs . protocol . MessageBoxCodec < nl > import im . actor . server . mtproto . protocol . _ < nl > @ @ - 58 , 7 + 57 , 7 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { < nl > protected val sequenceConfig = SequenceServiceConfig . load . toOption . get < nl > protected val sequenceService = new SequenceServiceImpl ( sequenceConfig ) < nl > < nl > - system . actorOf ( RpcApiService . props ( Seq ( authService , sequenceService ) ) , " rpcApiService " ) < nl > + RpcApiExtension ( system ) . register ( Seq ( authService , sequenceService ) ) < nl > < nl > protected def createAuthId ( ) : Long = { < nl > val authId = Random . nextLong ( )

TEST DIFF:
diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiExtension . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiExtension . scala 
 index b02211f . . 0937ea2 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiExtension . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiExtension . scala 
 @ @ - 2 , 12 + 2 , 14 @ @ package im . actor . server . api . rpc 
 
 import akka . actor . _ 
 import im . actor . api . rpc . Service 
 - import im . actor . server . api . rpc . RpcApiService . RefreshChain 
 
 final class RpcApiExtension ( system : ExtendedActorSystem ) extends Extension { 
 - val serviceRef = system . actorOf ( RpcApiService . props ( Seq . empty ) , " rpc - api - service " ) 
 + private var _ services = Seq . empty [ Service ] 
 + private var _ chain = buildChain 
 
 - private [ rpc ] var services = Seq . empty [ Service ] 
 + def services = _ services 
 + 
 + def chain = _ chain 
 
 def register ( clazz : Class [ _ < : Service ] ) : Unit = { 
 val service = system . dynamicAccess . createInstanceFor [ Service ] ( clazz , List ( classOf [ ActorSystem ] → system ) ) . get 
 @ @ - 16 , 21 + 18 , 22 @ @ final class RpcApiExtension ( system : ExtendedActorSystem ) extends Extension { 
 
 def register ( service : Service ) : Unit = { 
 synchronized { 
 - services = services : + service 
 + _ services = _ services : + service 
 + _ chain = buildChain 
 } 
 - 
 - serviceRef ! RefreshChain 
 } 
 
 def register ( services : Seq [ Service ] ) : Unit = { 
 synchronized { 
 - this . services = this . services + + services 
 + this . _ services = this . _ services + + services 
 + _ chain = buildChain 
 } 
 - 
 - serviceRef ! RefreshChain 
 } 
 
 - private [ rpc ] def getChain = services . map ( _ . handleRequestPartial ) . reduce ( _ orElse _ ) 
 + private def buildChain = 
 + if ( _ services . nonEmpty ) 
 + _ services . map ( _ . handleRequestPartial ) . reduce ( _ orElse _ ) 
 + else PartialFunction . empty 
 } 
 
 object RpcApiExtension extends ExtensionId [ RpcApiExtension ] with ExtensionIdProvider { 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiService . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiService . scala 
 deleted file mode 100644 
 index 7bb9e7c . . 0000000 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiService . scala 
 + + + / dev / null 
 @ @ - 1 , 82 + 0 , 0 @ @ 
 - package im . actor . server . api . rpc 
 - 
 - import akka . actor . _ 
 - import akka . pattern . pipe 
 - import cats . data . Xor 
 - import im . actor . api . rpc . _ 
 - import im . actor . api . rpc . codecs . _ 
 - import scodec . bits . _ 
 - 
 - import scala . concurrent . _ 
 - 
 - object RpcApiService { 
 - 
 - @ SerialVersionUID ( 1L ) 
 - final case class HandleRpcRequest ( messageId : Long , requestBytes : BitVector , clientData : ClientData ) 
 - 
 - @ SerialVersionUID ( 1L ) 
 - final case class RpcResponse ( messageId : Long , result : RpcResult ) 
 - 
 - @ SerialVersionUID ( 1L ) 
 - private [ rpc ] case object RefreshChain 
 - 
 - private [ rpc ] def props ( services : Seq [ Service ] ) = Props ( classOf [ RpcApiService ] , services ) 
 - } 
 - 
 - private [ rpc ] final class RpcApiService ( services : Seq [ Service ] ) extends Actor with ActorLogging { 
 - 
 - import RpcApiService . _ 
 - 
 - private type Chain = PartialFunction [ RpcRequest , ClientData ⇒ Future [ RpcError Xor RpcOk ] ] 
 - 
 - / / TODO : configurable 
 - private val DefaultErrorDelay = 5 
 - 
 - private implicit val ec : ExecutionContext = context . dispatcher 
 - 
 - private val rpcApiExt = RpcApiExtension ( context . system ) 
 - private var chain : Chain = PartialFunction . empty 
 - 
 - def receive = { 
 - case RefreshChain ⇒ 
 - chain = rpcApiExt . getChain 
 - case msg @ HandleRpcRequest ( messageId , requestBytes , clientData ) ⇒ 
 - val replyTo = sender ( ) 
 - 
 - try { 
 - RequestCodec . decode ( requestBytes ) . require map { 
 - case Request ( rpcRequest ) ⇒ 
 - log . debug ( " Request : { } , MessageId : { } , Client : { } " , rpcRequest , messageId , clientData ) 
 - 
 - val result = 
 - if ( chain . isDefinedAt ( rpcRequest ) ) { 
 - chain ( rpcRequest ) ( clientData ) 
 - } else { 
 - log . error ( " Unsupported request { } " , rpcRequest ) 
 - Future . successful ( Error ( CommonRpcErrors . UnsupportedRequest ) ) 
 - } 
 - 
 - result 
 - . map { res ⇒ 
 - log . debug ( " Response : { } , Client : { } " , res , clientData ) 
 - res . fold ( err ⇒ err , ok ⇒ ok ) 
 - } 
 - . recover { 
 - case e : Throwable ⇒ 
 - log . error ( e , " Failed to handle messageId : { } rpcRequest : { } " , messageId , rpcRequest ) 
 - RpcInternalError ( true , DefaultErrorDelay ) 
 - } 
 - . map ( result ⇒ RpcResponse ( messageId , result ) ) 
 - . pipeTo ( replyTo ) 
 - case _ ⇒ 
 - Future . successful ( CommonRpcErrors . UnsupportedRequest ) 
 - } 
 - } catch { 
 - case e : Exception ⇒ 
 - log . error ( e , " Failure in RpcApiService while handling messageId : { } " , messageId ) 
 - replyTo ! RpcResponse ( messageId , RpcInternalError ( true , DefaultErrorDelay ) ) / / TODO : configurable delay 
 - case e : Throwable ⇒ 
 - log . error ( e , " Failed to handle { } " , msg ) 
 - } 
 - } 
 - } 
 diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 index ef474f5 . . d48e08f 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 @ @ - 2 , 21 + 2 , 22 @ @ package im . actor . server . session 
 
 import akka . actor . _ 
 import akka . event . Logging . MDC 
 + import akka . http . scaladsl . util . FastFuture 
 import akka . pattern . pipe 
 import akka . stream . actor . _ 
 import com . github . kxbmap . configs . Bytes 
 - import im . actor . api . rpc . { ClientData , RpcError , RpcInternalError , RpcOk , RpcResult } 
 - import im . actor . server . api . rpc . RpcApiService . RpcResponse 
 - import im . actor . server . api . rpc . { RpcApiExtension , RpcApiService } 
 + import im . actor . api . rpc . codecs . RequestCodec 
 + import im . actor . api . rpc . { ClientData , Error , Ok , RpcError , RpcInternalError , RpcOk , RpcResult } 
 + import im . actor . concurrent . _ 
 + import im . actor . server . api . rpc . RpcApiExtension 
 import im . actor . util . cache . CacheHelpers . _ 
 + import scodec . { Attempt , DecodeResult } 
 
 import scala . annotation . tailrec 
 import scala . collection . immutable 
 + import scala . concurrent . Future 
 import scala . concurrent . duration . _ 
 - import scala . concurrent . { Future , Promise } 
 import scala . language . postfixOps 
 - import scala . util . control . NoStackTrace 
 - import scala . util . { Failure , Success , Try } 
 
 private [ session ] object RpcHandler { 
 private [ session ] val MaxCacheSize = 100L 
 @ @ - 24 , 59 + 25 , 35 @ @ private [ session ] object RpcHandler { 
 
 private [ session ] def props ( authId : Long , sessionId : Long , config : RpcConfig ) = Props ( classOf [ RpcHandler ] , authId , sessionId , config ) 
 
 - private case class CachedResponse ( rsp : RpcApiService . RpcResponse ) 
 - private case class Ack ( messageId : Long ) 
 - 
 - type AckOrResult = Either [ Long , RpcResult ] 
 - } 
 + private case class CachedResponse ( messageId : Long , rsp : RpcResult , clientData : ClientData ) 
 
 - private [ session ] case class RpcConfig ( maxCachedResults : Long , maxCachedResultSize : Bytes , ackDelay : FiniteDuration ) 
 + private case class Response ( messageId : Long , rsp : RpcResult , clientData : ClientData ) 
 
 - private [ session ] object RequestHandler { 
 - private [ session ] def props ( promise : Promise [ RpcApiService . RpcResponse ] , service : ActorRef , request : RpcApiService . HandleRpcRequest ) = 
 - Props ( classOf [ RequestHandler ] , promise , service , request ) 
 - } 
 + private case class ResponseFailure ( messageId : Long , request : im . actor . api . rpc . Request , failure : Throwable , clientData : ClientData ) 
 
 - private [ session ] class RequestHandler ( 
 - promise : Promise [ RpcApiService . RpcResponse ] , 
 - service : ActorRef , 
 - request : RpcApiService . HandleRpcRequest 
 - ) extends Actor with ActorLogging { 
 + private case class Ack ( messageId : Long ) 
 
 - context . setReceiveTimeout ( RpcHandler . RequestTimeOut ) 
 + type AckOrResult = Either [ Long , RpcResult ] 
 
 - override def preStart ( ) : Unit = { 
 - super . preStart ( ) 
 - service ! request 
 - } 
 + private val DefaultErrorDelay = 5 
 
 - def receive = { 
 - case rsp : RpcApiService . RpcResponse ⇒ complete ( Success ( rsp ) ) 
 - case ReceiveTimeout ⇒ 
 - log . error ( " Request timed out " ) 
 - val rsp = RpcResponse ( request . messageId , RpcInternalError ( true , 1 ) ) 
 - complete ( Success ( rsp ) ) 
 - case unexpected ⇒ 
 - log . error ( " Unexpected message { } " , unexpected ) 
 - complete ( Failure ( new Exception ( " Got unexpected message " ) with NoStackTrace ) ) 
 + object RpcErrors { 
 + val InternalError = RpcInternalError ( canTryAgain = true , tryAgainDelay = DefaultErrorDelay ) 
 + val RequestNotSupported = RpcError ( 400 , " REQUEST _ NOT _ SUPPORTED " , " Request is not supported . " , canTryAgain = true , data = None ) 
 } 
 
 - private def complete ( result : Try [ RpcApiService . RpcResponse ] ) = { 
 - promise . complete ( result ) 
 - context . stop ( self ) 
 - } 
 } 
 
 - private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConfig ) extends ActorSubscriber with ActorPublisher [ ( Option [ RpcResult ] , Long ) ] with DiagnosticActorLogging { 
 + private [ session ] case class RpcConfig ( maxCachedResults : Long , maxCachedResultSize : Bytes , ackDelay : FiniteDuration ) 
 + 
 + private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConfig ) extends ActorSubscriber with ActorPublisher [ ( Option [ RpcResult ] , Long ) ] with ImActorLogging { 
 
 import ActorPublisherMessage . _ 
 import ActorSubscriberMessage . _ 
 import RpcHandler . _ 
 import SessionStreamMessage . _ 
 
 - private implicit val ec = context . dispatcher 
 - 
 - private [ this ] val rpcApiService = RpcApiExtension ( context . system ) . serviceRef 
 + import context . _ 
 
 def receive = subscriber orElse publisher orElse { 
 case unmatched ⇒ 
 @ @ - 90 , 7 + 67 , 7 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf 
 private [ this ] var protoMessageQueue = immutable . Queue . empty [ ( Option [ RpcResult ] , Long ) ] 
 
 / / FIXME : invalidate on incoming ack 
 - private [ this ] val responseCache = createCache [ java . lang . Long , Future [ RpcApiService . RpcResponse ] ] ( config . maxCachedResults ) 
 + private [ this ] val responseCache = createCache [ java . lang . Long , Future [ RpcResult ] ] ( config . maxCachedResults ) 
 
 def subscriber : Receive = { 
 case OnNext ( HandleRpcRequest ( messageId , requestBytes , clientData ) ) ⇒ 
 @ @ - 99 , 7 + 76 , 7 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf 
 Option ( responseCache . getIfPresent ( messageId ) ) match { 
 case Some ( rspFuture ) ⇒ 
 log . debug ( " Publishing cached RpcResponse for messageId : { } " , messageId ) 
 - rspFuture map CachedResponse pipeTo self 
 + rspFuture map ( CachedResponse ( messageId , _ , clientData ) ) pipeTo self 
 case None ⇒ 
 val scheduledAck = context . system . scheduler . scheduleOnce ( config . ackDelay , self , Ack ( messageId ) ) 
 requestQueue + = ( messageId → scheduledAck ) 
 @ @ - 107 , 19 + 84 , 22 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf 
 
 log . debug ( " Making an rpc request for messageId { } " , messageId ) 
 
 - val responsePromise = Promise [ RpcApiService . RpcResponse ] ( ) 
 - context . actorOf ( 
 - RequestHandler . props ( 
 - responsePromise , 
 - rpcApiService , 
 - RpcApiService . HandleRpcRequest ( messageId , requestBytes , clientData ) 
 - ) , 
 - s " handler - $ messageId " 
 - ) 
 - 
 - responseCache . put ( messageId , responsePromise . future ) 
 - 
 - responsePromise . future pipeTo self 
 + val responseFuture = 
 + RequestCodec . decode ( requestBytes ) match { 
 + case Attempt . Successful ( DecodeResult ( request , _ ) ) ⇒ 
 + val resultFuture = handleRequest ( request , clientData ) 
 + responseCache . put ( messageId , resultFuture ) 
 + 
 + resultFuture . map ( Response ( messageId , _ , clientData ) ) 
 + . recover { 
 + case e : Throwable ⇒ ResponseFailure ( messageId , request , e , clientData ) 
 + } 
 + case Attempt . Failure ( err ) ⇒ 
 + log . warning ( " Failed to decode request : { } " , err . messageWithContext ) 
 + FastFuture . successful ( Response ( messageId , RpcErrors . RequestNotSupported , clientData ) ) 
 + } 
 + 
 + responseFuture . pipeTo ( self ) 
 } 
 case OnComplete ⇒ 
 context . stop ( self ) 
 @ @ - 132 , 23 + 112 , 34 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf 
 } 
 
 def publisher : Receive = { 
 - case RpcApiService . RpcResponse ( messageId , result ) ⇒ 
 - log . debug ( " Received RpcResponse for messageId { } : { } " , messageId , result ) 
 + case Response ( messageId , rsp , clientData ) ⇒ 
 + log . debug ( " Got RpcResponse for messageId { } : { } " , messageId , rsp ) 
 
 - if ( ! canCache ( result ) ) 
 + if ( ! canCache ( rsp ) ) 
 responseCache . invalidate ( messageId ) 
 
 - requestQueue . get ( messageId ) foreach ( _ . cancel ( ) ) 
 - requestQueue - = messageId 
 - enqueue ( Some ( result ) , messageId ) 
 - case CachedResponse ( rsp ) ⇒ 
 - log . debug ( " Got cached RpcResponse for messageId : { } , { } " , rsp . messageId , rsp . result ) 
 - enqueue ( Some ( rsp . result ) , rsp . messageId ) 
 + removeFromQueue ( messageId ) 
 + enqueue ( Some ( rsp ) , messageId ) 
 + case CachedResponse ( messageId , rsp , clientData ) ⇒ 
 + log . debug ( " Got cached RpcResponse for messageId { } : { } " , messageId , rsp ) 
 + enqueue ( Some ( rsp ) , messageId ) 
 + case ResponseFailure ( messageId , request , failure , clientData ) ⇒ 
 + markFailure { 
 + log . error ( failure , " Failed to process request : { } " , request ) 
 + responseCache . invalidate ( messageId ) 
 + removeFromQueue ( messageId ) 
 + enqueue ( Some ( RpcErrors . InternalError ) , messageId ) 
 + } 
 case Ack ( messageId ) ⇒ enqueueAck ( messageId ) 
 case Request ( _ ) ⇒ deliverBuf ( ) 
 case Cancel ⇒ context . stop ( self ) 
 } 
 
 + private def removeFromQueue ( messageId : Long ) : Unit = { 
 + requestQueue . get ( messageId ) foreach ( _ . cancel ( ) ) 
 + requestQueue - = messageId 
 + } 
 + 
 private def canCache ( result : RpcResult ) : Boolean = { 
 val size = result match { 
 case RpcOk ( res ) ⇒ res . getSerializedSize 
 @ @ - 190 , 6 + 181 , 19 @ @ private [ session ] class RpcHandler ( authId : Long , sessionId : Long , config : RpcConf 
 this . userIdOpt = clientData . optUserId 
 } 
 
 + private def handleRequest ( request : im . actor . api . rpc . Request , clientData : ClientData ) = { 
 + val resultFuture = 
 + RpcApiExtension ( context . system ) . chain . lift . apply ( request . body ) match { 
 + case Some ( handler ) ⇒ handler ( clientData ) 
 + case None ⇒ FastFuture . successful ( Error ( RpcErrors . RequestNotSupported ) ) 
 + } 
 + 
 + resultFuture . withTimeout ( 20 . seconds ) . map { 
 + case Ok ( result : RpcOk ) ⇒ result 
 + case Error ( error ) ⇒ error 
 + } 
 + } 
 + 
 override def mdc ( currentMessage : Any ) : MDC = { 
 val base : MDC = Map ( " authId " → authId , " sessionId " → sessionId ) 
 userIdOpt . fold ( base ) ( userId ⇒ base + ( " userId " → userId ) ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala 
 index 8f5261a . . c4db3d3 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / auth / AuthServiceSpec . scala 
 @ @ - 13 , 7 + 13 , 6 @ @ import im . actor . api . rpc . users . { ApiContactRecord , ApiContactType , ApiSex } 
 import im . actor . concurrent . FutureExt 
 import im . actor . server . _ 
 import im . actor . server . activation . common . ActivationConfig 
 - import im . actor . server . api . rpc . RpcApiService 
 import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl 
 import im . actor . server . model . contact . UserContact 
 import im . actor . server . mtproto . codecs . protocol . MessageBoxCodec 
 @ @ - 116 , 7 + 115 , 6 @ @ final class AuthServiceSpec 
 implicit val oauth2Service = new GoogleProvider ( oauthGoogleConfig ) 
 val activationConfig = ActivationConfig . load . get 
 implicit val service = new AuthServiceImpl 
 - implicit val rpcApiService = system . actorOf ( RpcApiService . props ( Seq ( service ) ) ) 
 implicit val contactService = new ContactsServiceImpl 
 
 val correctUri = " https : / / actor . im / registration " 
 diff - - git a / actor - server / project / Dependencies . scala b / actor - server / project / Dependencies . scala 
 index 3f27077 . . dafcf4b 100644 
 - - - a / actor - server / project / Dependencies . scala 
 + + + b / actor - server / project / Dependencies . scala 
 @ @ - 4 , 7 + 4 , 7 @ @ import sbt . _ 
 
 object Dependencies { 
 object V { 
 - val actorCommons = " 0 . 0 . 14 " 
 + val actorCommons = " 0 . 0 . 15 " 
 val actorBotkit = " 1 . 0 . 88 " 
 val akka = " 2 . 4 . 2 " 
 val akkaHttpJson = " 1 . 5 . 0 "

NEAREST DIFF:
diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiExtension . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiExtension . scala 
 new file mode 100644 
 index 0000000 . . ddacf44 
 - - - / dev / null 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiExtension . scala 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + package im . actor . server . api . rpc 
 + 
 + import akka . actor . _ 
 + import im . actor . api . rpc . Service 
 + import im . actor . server . api . rpc . RpcApiService . RefreshChain 
 + 
 + final class RpcApiExtension ( system : ActorSystem ) extends Extension { 
 + val serviceRef = system . actorOf ( RpcApiService . props ( Seq . empty ) , " rpc - api - service " ) 
 + 
 + private [ rpc ] var services = Seq . empty [ Service ] 
 + 
 + def register ( service : Service ) : Unit = { 
 + synchronized { 
 + services = services : + service 
 + } 
 + 
 + serviceRef ! RefreshChain 
 + } 
 + 
 + def register ( services : Seq [ Service ] ) : Unit = { 
 + synchronized { 
 + this . services = this . services + + services 
 + } 
 + 
 + serviceRef ! RefreshChain 
 + } 
 + 
 + private [ rpc ] def getChain = services . map ( _ . handleRequestPartial ) . reduce ( _ orElse _ ) 
 + } 
 + 
 + object RpcApiExtension extends ExtensionId [ RpcApiExtension ] with ExtensionIdProvider { 
 + override def createExtension ( system : ExtendedActorSystem ) : RpcApiExtension = new RpcApiExtension ( system ) 
 + 
 + override def lookup ( ) : ExtensionId [ _ < : Extension ] = RpcApiExtension 
 + } 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiService . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiService . scala 
 index 515d798 . . 6be4684 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiService . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / RpcApiService . scala 
 @ @ - 1 , 27 + 1 , 29 @ @ 
 package im . actor . server . api . rpc 
 
 - import scala . concurrent . _ 
 - import scalaz . _ 
 - 
 import akka . actor . _ 
 import akka . pattern . pipe 
 - import scodec . bits . _ 
 - 
 import im . actor . api . rpc . _ 
 import im . actor . api . rpc . codecs . _ 
 + import scodec . bits . _ 
 + 
 + import scala . concurrent . _ 
 + import scalaz . _ 
 
 object RpcApiService { 
 
 @ SerialVersionUID ( 1L ) 
 - case class HandleRpcRequest ( messageId : Long , requestBytes : BitVector , clientData : ClientData ) 
 + final case class HandleRpcRequest ( messageId : Long , requestBytes : BitVector , clientData : ClientData ) 
 + 
 + @ SerialVersionUID ( 1L ) 
 + final case class RpcResponse ( messageId : Long , responseBytes : BitVector ) 
 
 @ SerialVersionUID ( 1L ) 
 - case class RpcResponse ( messageId : Long , responseBytes : BitVector ) 
 + private [ rpc ] case object RefreshChain 
 
 - def props ( services : Seq [ Service ] ) = Props ( classOf [ RpcApiService ] , services ) 
 + private [ rpc ] def props ( services : Seq [ Service ] ) = Props ( classOf [ RpcApiService ] , services ) 
 } 
 
 - final class RpcApiService ( services : Seq [ Service ] ) extends Actor with ActorLogging { 
 + private [ rpc ] final class RpcApiService ( services : Seq [ Service ] ) extends Actor with ActorLogging { 
 
 import RpcApiService . _ 
 
 @ @ - 32 , 57 + 34 , 49 @ @ final class RpcApiService ( services : Seq [ Service ] ) extends Actor with ActorLoggin 
 
 private implicit val ec : ExecutionContext = context . dispatcher 
 
 - def receive : Receive = { 
 - log . debug ( " Services list changed : { } " , services ) 
 - 
 - val chain : Chain = 
 - if ( services . isEmpty ) { 
 - PartialFunction . empty 
 - } else { 
 - services . map ( _ . handleRequestPartial ) . reduce { ( a , b ) ⇒ 
 - a . orElse ( b ) 
 + private val rpcApiExt = RpcApiExtension ( context . system ) 
 + private var chain : Chain = PartialFunction . empty 
 + 
 + def receive = { 
 + case RefreshChain ⇒ 
 + chain = rpcApiExt . getChain 
 + case msg @ HandleRpcRequest ( messageId , requestBytes , clientData ) ⇒ 
 + val replyTo = sender ( ) 
 + 
 + try { 
 + RequestCodec . decode ( requestBytes ) . require map { 
 + case Request ( rpcRequest ) ⇒ 
 + log . debug ( " Request : { } , MessageId : { } , Client : { } " , rpcRequest , messageId , clientData ) 
 + 
 + val result = 
 + if ( chain . isDefinedAt ( rpcRequest ) ) { 
 + chain ( rpcRequest ) ( clientData ) 
 + } else { 
 + log . error ( " Unsupported request { } " , rpcRequest ) 
 + Future . successful ( Error ( CommonErrors . UnsupportedRequest ) ) 
 + } 
 + 
 + result 
 + . map { res ⇒ 
 + log . debug ( " Response : { } , Client : { } " , res , clientData ) 
 + res . fold ( err ⇒ err , ok ⇒ ok ) 
 + } 
 + . recover { 
 + case e : Throwable ⇒ 
 + log . error ( e , " Failed to handle messageId : { } rpcRequest : { } " , messageId , rpcRequest ) 
 + RpcInternalError ( true , DefaultErrorDelay ) 
 + } 
 + . map ( result ⇒ RpcResponse ( messageId , RpcResultCodec . encode ( result ) . require ) ) 
 + . pipeTo ( replyTo ) 
 + case _ ⇒ 
 + Future . successful ( CommonErrors . UnsupportedRequest ) 
 } 
 + } catch { 
 + case e : Exception ⇒ 
 + log . error ( e , " Failure in RpcApiService while handling messageId : { } " , messageId ) 
 + replyTo ! RpcResponse ( messageId , RpcResultCodec . encode ( RpcInternalError ( true , DefaultErrorDelay ) ) . require ) / / TODO : configurable delay 
 + case e : Throwable ⇒ 
 + log . error ( e , " Failed to handle { } " , msg ) 
 } 
 - 
 - { 
 - case msg @ HandleRpcRequest ( messageId , requestBytes , clientData ) ⇒ 
 - val replyTo = sender ( ) 
 - 
 - try { 
 - RequestCodec . decode ( requestBytes ) . require map { 
 - case Request ( rpcRequest ) ⇒ 
 - log . debug ( " Request : { } , MessageId : { } , Client : { } " , rpcRequest , messageId , clientData ) 
 - 
 - val result = 
 - if ( chain . isDefinedAt ( rpcRequest ) ) { 
 - chain ( rpcRequest ) ( clientData ) 
 - } else { 
 - log . error ( " Unsupported request { } " , rpcRequest ) 
 - Future . successful ( Error ( CommonErrors . UnsupportedRequest ) ) 
 - } 
 - 
 - result 
 - . map { res ⇒ 
 - log . debug ( " Response : { } , Client : { } " , res , clientData ) 
 - res . fold ( err ⇒ err , ok ⇒ ok ) 
 - } 
 - . recover { 
 - case e : Throwable ⇒ 
 - log . error ( e , " Failed to handle messageId : { } rpcRequest : { } " , messageId , rpcRequest ) 
 - RpcInternalError ( true , DefaultErrorDelay ) 
 - } 
 - . map ( result ⇒ RpcResponse ( messageId , RpcResultCodec . encode ( result ) . require ) ) 
 - . pipeTo ( replyTo ) 
 - case _ ⇒ 
 - Future . successful ( CommonErrors . UnsupportedRequest ) 
 - } 
 - } catch { 
 - case e : Exception ⇒ 
 - log . error ( e , " Failure in RpcApiService while handling messageId : { } " , messageId ) 
 - replyTo ! RpcResponse ( messageId , RpcResultCodec . encode ( RpcInternalError ( true , DefaultErrorDelay ) ) . require ) / / TODO : configurable delay 
 - case e : Throwable ⇒ 
 - log . error ( e , " Failed to handle { } " , msg ) 
 - } 
 - } 
 } 
 } 
 diff - - git a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 index 10ff637 . . f99f838 100644 
 - - - a / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 + + + b / actor - server / actor - runner / src / main / scala / im / actor / server / Main . scala 
 @ @ - 11 , 7 + 11 , 7 @ @ import im . actor . server . activation . gate . { GateCodeActivation , GateConfig } 
 import im . actor . server . activation . internal . { ActivationConfig , InternalCodeActivation } 
 import im . actor . server . api . frontend . Frontend 
 import im . actor . server . api . http . { HttpApiConfig , HttpApiFrontend } 
 - import im . actor . server . api . rpc . RpcApiService 
 + import im . actor . server . api . rpc . { RpcApiExtension , RpcApiService } 
 import im . actor . server . api . rpc . service . SearchServiceImpl 
 import im . actor . server . api . rpc . service . auth . AuthServiceImpl 
 import im . actor . server . api . rpc . service . configs . ConfigsServiceImpl 
 @ @ - 111 , 7 + 111 , 7 @ @ object Main extends App { 
 InternalCodeActivation . newContext ( 
 activationConfig , 
 new TelesignSmsEngine ( telesignClient ) , 
 - new TelesignCallEngine ( ( telesignClient ) ) , 
 + new TelesignCallEngine ( telesignClient ) , 
 new SmtpEmailSender ( emailConfig ) 
 ) 
 case " actor - activation " ⇒ new GateCodeActivation ( gateConfig ) 
 @ @ - 147 , 7 + 147 , 7 @ @ object Main extends App { 
 system . log . warning ( " Starting ActorBot " ) 
 ActorBot . start ( ) 
 
 - system . actorOf ( RpcApiService . props ( services ) , " rpcApiService " ) 
 + RpcApiExtension ( system ) . register ( services ) 
 
 ActorCliService . start ( system ) 
 
 diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 index 9e8a2f0 . . d0d2eaf 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 @ @ - 5 , 7 + 5 , 7 @ @ import akka . pattern . pipe 
 import akka . stream . actor . _ 
 import im . actor . api . rpc . RpcInternalError 
 import im . actor . server . api . rpc . RpcApiService . RpcResponse 
 - import im . actor . server . api . rpc . { RpcApiService , RpcResultCodec } 
 + import im . actor . server . api . rpc . { RpcApiExtension , RpcApiService , RpcResultCodec } 
 import im . actor . server . mtproto . protocol . { ProtoMessage , RpcResponseBox } 
 import im . actor . util . cache . CacheHelpers . _ 
 import scodec . bits . _ 
 @ @ - 29 , 13 + 29 , 13 @ @ private [ session ] object RpcHandler { 
 } 
 
 private [ session ] object RequestHandler { 
 - private [ session ] def props ( promise : Promise [ RpcApiService . RpcResponse ] , service : ActorSelection , request : RpcApiService . HandleRpcRequest ) = 
 + private [ session ] def props ( promise : Promise [ RpcApiService . RpcResponse ] , service : ActorRef , request : RpcApiService . HandleRpcRequest ) = 
 Props ( classOf [ RequestHandler ] , promise , service , request ) 
 } 
 
 private [ session ] class RequestHandler ( 
 promise : Promise [ RpcApiService . RpcResponse ] , 
 - service : ActorSelection , 
 + service : ActorRef , 
 request : RpcApiService . HandleRpcRequest 
 ) 
 extends Actor with ActorLogging { 
 @ @ - 73 , 7 + 73 , 7 @ @ private [ session ] class RpcHandler extends ActorSubscriber with ActorPublisher [ Pr 
 
 private implicit val ec = context . dispatcher 
 
 - private [ this ] val rpcApiService : ActorSelection = context . actorSelection ( " / user / rpcApiService " ) 
 + private [ this ] val rpcApiService = RpcApiExtension ( context . system ) . serviceRef 
 
 def receive = subscriber . orElse ( publisher ) . orElse { 
 case unmatched ⇒ 
 diff - - git a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 index df29648 . . ed20a15 100644 
 - - - a / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 + + + b / actor - server / actor - testkit / src / main / scala / im / actor / server / ServiceSpecHelpers . scala 
 @ @ - 4 , 9 + 4 , 11 @ @ import akka . actor . { ActorRef , ActorSystem } 
 import akka . stream . Materializer 
 import akka . util . Timeout 
 import eu . codearte . jfairy . Fairy 
 + import im . actor . api . rpc . ClientData 
 + import im . actor . api . rpc . auth . { ResponseSendAuthCodeObsolete , AuthService } 
 import im . actor . api . rpc . peers . { ApiOutPeer , ApiPeerType } 
 - import im . actor . api . { rpc ⇒ rpcapi } 
 - import im . actor . server . api . rpc . RpcApiService 
 + import im . actor . api . rpc . users . ApiUser 
 + import im . actor . server . api . rpc . { RpcApiExtension , RpcApiService } 
 import im . actor . server . api . rpc . service . auth . AuthServiceImpl 
 import im . actor . server . oauth . GoogleProvider 
 import im . actor . server . session . { Session , SessionConfig , SessionRegion } 
 @ @ - 26 , 7 + 28 , 7 @ @ trait PersistenceHelpers { 
 } 
 
 trait UserStructExtensions { 
 - implicit class ExtUser ( user : rpcapi . users . ApiUser ) { 
 + implicit class ExtUser ( user : ApiUser ) { 
 def asModel ( ) ( implicit db : Database ) : models . User = 
 Await . result ( db . run ( persist . UserRepo . find ( user . id ) . head ) , 3 . seconds ) 
 } 
 @ @ - 55 , 7 + 57 , 7 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi 
 authId 
 } 
 
 - def createAuthId ( userId : Int ) ( implicit ec : ExecutionContext , system : ActorSystem , db : Database , service : rpcapi . auth . AuthService ) : Long = { 
 + def createAuthId ( userId : Int ) ( implicit ec : ExecutionContext , system : ActorSystem , db : Database , service : AuthService ) : Long = { 
 val authId = scala . util . Random . nextLong ( ) 
 Await . result ( db . run ( persist . AuthIdRepo . create ( authId , None , None ) ) , 1 . second ) 
 
 @ @ - 73 , 7 + 75 , 7 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi 
 appId = 42 , 
 appKey = " appKey " , 
 isSilent = false 
 - ) ( rpcapi . ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 5 . seconds ) 
 + ) ( ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 5 . seconds ) 
 
 res match { 
 case \ / - ( rsp ) ⇒ rsp 
 @ @ - 86 , 27 + 88 , 27 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi 
 def createSessionId ( ) : Long = 
 scala . util . Random . nextLong ( ) 
 
 - def getSmsHash ( authId : Long , phoneNumber : Long ) ( implicit service : rpcapi . auth . AuthService , system : ActorSystem ) : String = withoutLogs { 
 - val rpcapi . auth . ResponseSendAuthCodeObsolete ( smsHash , _ ) = 
 - Await . result ( service . handleSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ( rpcapi . ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 1 . second ) . toOption . get 
 + def getSmsHash ( authId : Long , phoneNumber : Long ) ( implicit service : AuthService , system : ActorSystem ) : String = withoutLogs { 
 + val ResponseSendAuthCodeObsolete ( smsHash , _ ) = 
 + Await . result ( service . handleSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ( ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 1 . second ) . toOption . get 
 
 smsHash 
 } 
 
 - def getSmsCode ( authId : Long , phoneNumber : Long ) ( implicit service : rpcapi . auth . AuthService , system : ActorSystem , db : Database ) : models . AuthSmsCodeObsolete = withoutLogs { 
 - val res = Await . result ( service . handleSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ( rpcapi . ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 1 . second ) 
 + def getSmsCode ( authId : Long , phoneNumber : Long ) ( implicit service : AuthService , system : ActorSystem , db : Database ) : models . AuthSmsCodeObsolete = withoutLogs { 
 + val res = Await . result ( service . handleSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ( ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 1 . second ) 
 res . toOption . get 
 
 Await . result ( db . run ( persist . AuthSmsCodeObsoleteRepo . findByPhoneNumber ( phoneNumber ) . head ) , 5 . seconds ) 
 } 
 
 - def createUser ( ) ( implicit service : rpcapi . auth . AuthService , db : Database , system : ActorSystem ) : ( rpcapi . users . ApiUser , Long , Long ) = { 
 + def createUser ( ) ( implicit service : AuthService , db : Database , system : ActorSystem ) : ( ApiUser , Long , Long ) = { 
 val authId = createAuthId ( ) 
 val phoneNumber = buildPhone ( ) 
 ( createUser ( authId , phoneNumber ) , authId , phoneNumber ) 
 } 
 
 - def createUser ( phoneNumber : Long ) ( implicit service : rpcapi . auth . AuthService , system : ActorSystem , db : Database ) : rpcapi . users . ApiUser = 
 + def createUser ( phoneNumber : Long ) ( implicit service : AuthService , system : ActorSystem , db : Database ) : ApiUser = 
 createUser ( createAuthId ( ) , phoneNumber ) 
 
 def getOutPeer ( userId : Int , clientAuthId : Long ) : ApiOutPeer = { 
 @ @ - 115 , 7 + 117 , 7 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi 
 } 
 
 / / TODO : make same method to work with email 
 - def createUser ( authId : Long , phoneNumber : Long ) ( implicit service : rpcapi . auth . AuthService , system : ActorSystem , db : Database ) : rpcapi . users . ApiUser = 
 + def createUser ( authId : Long , phoneNumber : Long ) ( implicit service : AuthService , system : ActorSystem , db : Database ) : ApiUser = 
 withoutLogs { 
 val smsCode = getSmsCode ( authId , phoneNumber ) 
 
 @ @ - 129 , 7 + 131 , 7 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi 
 appId = 42 , 
 appKey = " appKey " , 
 isSilent = false 
 - ) ( rpcapi . ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 10 . seconds ) 
 + ) ( ClientData ( authId , scala . util . Random . nextLong ( ) , None ) ) , 10 . seconds ) 
 
 res match { 
 case \ / - ( rsp ) ⇒ rsp . user 
 @ @ - 138 , 7 + 140 , 7 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi 
 } 
 
 def buildRpcApiService ( services : Seq [ im . actor . api . rpc . Service ] ) ( implicit system : ActorSystem , db : Database ) = 
 - system . actorOf ( RpcApiService . props ( services ) , " rpcApiService " ) 
 + RpcApiExtension ( system ) . register ( services ) 
 
 def buildSessionRegion ( rpcApiService : ActorRef ) ( implicit system : ActorSystem , materializer : Materializer ) = { 
 implicit val sessionConfig = SessionConfig . load ( system . settings . config . getConfig ( " session " ) ) 
 @ @ - 157 , 7 + 159 , 7 @ @ trait ServiceSpecHelpers extends PersistenceHelpers with UserStructExtensions wi 
 protected def withoutLogs [ A ] ( f : ⇒ A ) ( implicit system : ActorSystem ) : A = { 
 val logger = org . slf4j . LoggerFactory . getLogger ( org . slf4j . Logger . ROOT _ LOGGER _ NAME ) . asInstanceOf [ ch . qos . logback . classic . Logger ] 
 
 - val logLevel = logger . getLevel ( ) 
 + val logLevel = logger . getLevel 
 val esLogLevel = system . eventStream . logLevel 
 
 logger . setLevel ( ch . qos . logback . classic . Level . WARN ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 index 7a14fa4 . . 39b8a9a 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 @ @ - 13 , 7 + 13 , 7 @ @ import im . actor . server . api . rpc . service . auth . AuthServiceImpl 
 import im . actor . server . api . rpc . service . contacts . ContactsServiceImpl 
 import im . actor . server . api . rpc . service . messaging . MessagingServiceImpl 
 import im . actor . server . api . rpc . service . sequence . { SequenceServiceConfig , SequenceServiceImpl } 
 - import im . actor . server . api . rpc . { RpcApiService , RpcResultCodec } 
 + import im . actor . server . api . rpc . { RpcApiExtension , RpcResultCodec } 
 import im . actor . server . db . DbExtension 
 import im . actor . server . mtproto . codecs . protocol . _ 
 import im . actor . server . mtproto . protocol . _ 
 @ @ - 69 , 7 + 69 , 7 @ @ class SimpleServerE2eSpec extends ActorSuite ( 
 new SequenceServiceImpl ( sequenceConfig ) 
 ) 
 
 - system . actorOf ( RpcApiService . props ( services ) , " rpcApiService " ) 
 + RpcApiExtension ( system ) . register ( services ) 
 
 TcpFrontend . start ( " 127 . 0 . 0 . 1 " , 9070 , None ) 
 
 @ @ - 337 , 4 + 337 , 5 @ @ class SimpleServerE2eSpec extends ActorSuite ( 
 mb . body should = = = ( expectedNewSession ) 
 } 
 } 
 + 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala 
 index 3728479 . . 3711c9b 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala 
 @ @ - 2 , 16 + 2 , 15 @ @ package im . actor . server . session 
 
 import akka . actor . _ 
 import akka . testkit . TestProbe 
 - import akka . util . Timeout 
 import com . google . protobuf . ByteString 
 - import im . actor . api . rpc . { Request , RpcRequest , RpcResult } 
 import im . actor . api . rpc . codecs . _ 
 import im . actor . api . rpc . sequence . { SeqUpdate , WeakUpdate } 
 + import im . actor . api . rpc . { Request , RpcRequest , RpcResult } 
 import im . actor . server 
 import im . actor . server . _ 
 import im . actor . server . api . rpc . service . auth . AuthServiceImpl 
 import im . actor . server . api . rpc . service . sequence . { SequenceServiceConfig , SequenceServiceImpl } 
 - import im . actor . server . api . rpc . { RpcApiService , RpcResultCodec } 
 + import im . actor . server . api . rpc . { RpcApiExtension , RpcResultCodec } 
 import im . actor . server . db . DbExtension 
 import im . actor . server . mtproto . codecs . protocol . MessageBoxCodec 
 import im . actor . server . mtproto . protocol . _ 
 @ @ - 58 , 7 + 57 , 7 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { 
 protected val sequenceConfig = SequenceServiceConfig . load . toOption . get 
 protected val sequenceService = new SequenceServiceImpl ( sequenceConfig ) 
 
 - system . actorOf ( RpcApiService . props ( Seq ( authService , sequenceService ) ) , " rpcApiService " ) 
 + RpcApiExtension ( system ) . register ( Seq ( authService , sequenceService ) ) 
 
 protected def createAuthId ( ) : Long = { 
 val authId = Random . nextLong ( )
