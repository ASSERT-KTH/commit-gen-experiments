BLEU SCORE: 0.10600313379512592

TEST MSG: perf ( server : frontend ) : use thread local SecureRandom
GENERATED MSG: style ( server ) : autoformat

TEST DIFF (one line): diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala < nl > index bd2bf61 . . a28ca53 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala < nl > @ @ - 22 , 6 + 22 , 7 @ @ import im . actor . server . mtproto . transport . Drop < nl > import im . actor . server . mtproto . { transport ⇒ T } < nl > import im . actor . server . persist . { AuthIdRepo , MasterKeyRepo } < nl > import im . actor . server . session . { HandleMessageBox , SessionEnvelope , SessionRegion } < nl > + import im . actor . util . ThreadLocalSecureRandom < nl > import scodec . { DecodeResult , Attempt } < nl > import scodec . bits . BitVector < nl > import slick . dbio . DBIO < nl > @ @ - 46 , 7 + 47 , 7 @ @ private [ frontend ] object SessionClient { < nl > } < nl > < nl > final class CryptoHelper ( protoKeys : ActorProtoKey ) { < nl > - private val random = new SecureRandom < nl > + private def random = ThreadLocalSecureRandom . current ( ) < nl > < nl > private object CbcHmac { < nl > object Server {
NEAREST DIFF (one line): diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala < nl > index 5c94b7e . . 829b63b 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala < nl > @ @ - 193 , 7 + 193 , 7 @ @ private [ frontend ] final class SessionClient ( sessionRegion : SessionRegion ) < nl > case Status . Failure ( e ) ⇒ < nl > log . error ( e , " Failed to check authId " ) < nl > onErrorThenStop ( e ) < nl > - case other = > stash ( ) < nl > + case other ⇒ stash ( ) < nl > } < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala 
 index bd2bf61 . . a28ca53 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala 
 @ @ - 22 , 6 + 22 , 7 @ @ import im . actor . server . mtproto . transport . Drop 
 import im . actor . server . mtproto . { transport ⇒ T } 
 import im . actor . server . persist . { AuthIdRepo , MasterKeyRepo } 
 import im . actor . server . session . { HandleMessageBox , SessionEnvelope , SessionRegion } 
 + import im . actor . util . ThreadLocalSecureRandom 
 import scodec . { DecodeResult , Attempt } 
 import scodec . bits . BitVector 
 import slick . dbio . DBIO 
 @ @ - 46 , 7 + 47 , 7 @ @ private [ frontend ] object SessionClient { 
 } 
 
 final class CryptoHelper ( protoKeys : ActorProtoKey ) { 
 - private val random = new SecureRandom 
 + private def random = ThreadLocalSecureRandom . current ( ) 
 
 private object CbcHmac { 
 object Server {

NEAREST DIFF:
diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala 
 index 5c94b7e . . 829b63b 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / frontend / SessionClient . scala 
 @ @ - 193 , 7 + 193 , 7 @ @ private [ frontend ] final class SessionClient ( sessionRegion : SessionRegion ) 
 case Status . Failure ( e ) ⇒ 
 log . error ( e , " Failed to check authId " ) 
 onErrorThenStop ( e ) 
 - case other = > stash ( ) 
 + case other ⇒ stash ( ) 
 } 
 }
