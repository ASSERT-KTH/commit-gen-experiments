BLEU SCORE: 0.1472821272412462

TEST MSG: fix ( android ) : fix loosing input bar on emoji tabs slide + workaround for " keyboard hide ofter orientation change " bug
GENERATED MSG: fix ( android ) : recover push

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / KeyboardLayout . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / KeyboardLayout . java < nl > index 860b37f . . 98744ee 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / KeyboardLayout . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / KeyboardLayout . java < nl > @ @ - 9 , 6 + 9 , 7 @ @ import im . actor . sdk . R ; < nl > < nl > public class KeyboardLayout extends FrameLayout { < nl > boolean showInternal = false ; < nl > + boolean sync = false ; < nl > private RelativeLayout container ; < nl > private int keyboardHeight ; < nl > < nl > @ @ - 35 , 6 + 36 , 7 @ @ public class KeyboardLayout extends FrameLayout { < nl > if ( container . getPaddingBottom ( ) ! = 0 ) { < nl > container . setPadding ( 0 , 0 , 0 , 0 ) ; < nl > } < nl > + sync = showInternal ; < nl > } < nl > } < nl > < nl > @ @ - 45 , 8 + 47 , 10 @ @ public class KeyboardLayout extends FrameLayout { < nl > if ( container . getPaddingBottom ( ) ! = keyboardHeight ) { < nl > container . setPadding ( 0 , 0 , 0 , keyboardHeight ) ; < nl > } < nl > + sync = showInternal ; < nl > } < nl > } < nl > + < nl > } < nl > < nl > @ Override < nl > @ @ - 60 , 10 + 64 , 16 @ @ public class KeyboardLayout extends FrameLayout { < nl > public void showInternal ( int keyboardHeight ) { < nl > showInternal = true ; < nl > this . keyboardHeight = keyboardHeight ; < nl > + sync = false ; < nl > } < nl > < nl > public void dismissInternal ( ) { < nl > showInternal = false ; < nl > + sync = true ; < nl > + } < nl > + < nl > + public boolean isSync ( ) { < nl > + return sync = = showInternal ; < nl > } < nl > < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / keyboard / BaseKeyboard . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / keyboard / BaseKeyboard . java < nl > index 1ba03c2 . . 05f65d5 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / keyboard / BaseKeyboard . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / keyboard / BaseKeyboard . java < nl > @ @ - 144 , 14 + 144 , 21 @ @ public class BaseKeyboard implements < nl > dismissInternally ( false ) ; < nl > } < nl > < nl > - public void dismiss ( boolean all ) { < nl > - dismissInternally ( all ) ; < nl > + public void dismiss ( boolean dismissAll ) { < nl > + dismissInternally ( dismissAll ) ; < nl > } < nl > < nl > private void dismissInternally ( boolean dismissAll ) { < nl > showing = false ; < nl > if ( messageBody ! = null ) { < nl > - keyboardHelper . setImeVisibility ( messageBody , ! dismissAll ) ; < nl > + if ( dismissAll ) { < nl > + keyboardHelper . setImeVisibility ( messageBody , false ) ; < nl > + } else if ( ! softwareKeyboardShowing ) { < nl > + keyboardHelper . setImeVisibility ( messageBody , true ) ; < nl > + } < nl > + } < nl > + if ( root ! = null ) { < nl > + root . dismissInternal ( ) ; < nl > } < nl > if ( emojiKeyboardView ! = null & & root ! = null & & keyboardHelper ! = null ) { < nl > final View emojiKeyboardViewCopy = emojiKeyboardView ; < nl > @ @ - 181 , 10 + 188 , 6 @ @ public class BaseKeyboard implements < nl > } < nl > onDismiss ( ) ; < nl > } < nl > - < nl > - if ( root ! = null ) { < nl > - root . dismissInternal ( ) ; < nl > - } < nl > } < nl > < nl > < nl > @ @ - 251 , 6 + 254 , 9 @ @ public class BaseKeyboard implements < nl > } < nl > } < nl > < nl > + boolean changed = softwareKeyboardShowing ; < nl > + < nl > + < nl > if ( heightDifference > 100 ) { < nl > < nl > softwareKeyboardShowing = true ; < nl > @ @ - 259 , 21 + 265 , 17 @ @ public class BaseKeyboard implements < nl > < nl > keyboardHeight = heightDifference ; < nl > < nl > - if ( ! showRequested ) { < nl > - Log . d ( TAG , " onGlobalLayout : " + " showing " ) ; < nl > + dismiss ( ) ; < nl > < nl > - if ( showing ) { < nl > - dismiss ( ) ; < nl > - } < nl > - } < nl > < nl > } else { < nl > < nl > softwareKeyboardShowing = false ; < nl > < nl > if ( showRequested ) { < nl > + root . showInternal ( keyboardHeight ) ; < nl > showInternal ( ) ; < nl > - } else { < nl > + } else if ( changed ) { < nl > if ( root ! = null ) { < nl > root . dismissInternal ( ) ; < nl > } < nl > @ @ - 287 , 6 + 289 , 21 @ @ public class BaseKeyboard implements < nl > / / dismissInternally ( ) ; < nl > } < nl > < nl > + changed = changed ! = softwareKeyboardShowing ; < nl > + Log . d ( TAG , " keyboard state change : " + changed ) ; < nl > + < nl > + / / FIXME verify root view applied new padding after keyboard state change < nl > + / / workaround for [ some of android versions ] bug , when keyboard closing not causing relayout , or causing it with delay < nl > + if ( changed & & root ! = null ) { < nl > + < nl > + root . postDelayed ( ( ) - > { < nl > + if ( ! root . isSync ( ) ) { < nl > + root . requestLayout ( ) ; < nl > + } < nl > + } , 30 ) ; < nl > + } < nl > + < nl > + < nl > < nl > } < nl > < nl > @ @ - 312 , 8 + 329 , 8 @ @ public class BaseKeyboard implements < nl > } < nl > < nl > public void onConfigurationChange ( ) { < nl > - dismiss ( true ) ; < nl > - softwareKeyboardShowing = false ; < nl > + / / dismiss ( true ) ; < nl > + / / softwareKeyboardShowing = false ; < nl > } < nl > < nl > public boolean onBackPressed ( ) {
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > index 71da5ab . . 8045a74 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java < nl > @ @ - 1 , 11 + 1 , 7 @ @ < nl > package im . actor ; < nl > < nl > - import java . util . ArrayList ; < nl > - < nl > - import im . actor . auth . SignEmailFragment ; < nl > import im . actor . sdk . ActorSDK ; < nl > import im . actor . sdk . BaseActorSDKDelegate ; < nl > - import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; < nl > < nl > / * * < nl > * Created by badgr on 16 . 10 . 2015 . < nl > @ @ - 15 , 13 + 11 , 11 @ @ public class Application extends android . app . Application { < nl > public void onCreate ( ) { < nl > super . onCreate ( ) ; < nl > ActorSDK . sharedActor ( ) . setDelegate ( new ActorSDKDelegate ( ) ) ; < nl > + ActorSDK . sharedActor ( ) . setPushId ( 209133700967L ) ; < nl > ActorSDK . sharedActor ( ) . createActor ( this ) ; < nl > } < nl > < nl > private class ActorSDKDelegate extends BaseActorSDKDelegate { < nl > - @ Override < nl > - public BaseAuthFragment getSignFragment ( ) { < nl > - return new SignEmailFragment ( ) ; < nl > - } < nl > + < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java < nl > deleted file mode 100644 < nl > index 37ce216 . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java < nl > + + + / dev / null < nl > @ @ - 1 , 137 + 0 , 0 @ @ < nl > - package im . actor . auth ; < nl > - < nl > - import android . app . AlertDialog ; < nl > - import android . os . Bundle ; < nl > - import android . telephony . PhoneNumberFormattingTextWatcher ; < nl > - import android . text . Editable ; < nl > - import android . text . TextWatcher ; < nl > - import android . view . KeyEvent ; < nl > - import android . view . LayoutInflater ; < nl > - import android . view . View ; < nl > - import android . view . ViewGroup ; < nl > - import android . view . inputmethod . EditorInfo ; < nl > - import android . widget . EditText ; < nl > - import android . widget . TextView ; < nl > - < nl > - import im . actor . sdk . ActorSDK ; < nl > - import im . actor . sdk . R ; < nl > - import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; < nl > - import im . actor . sdk . util . Fonts ; < nl > - import im . actor . sdk . util . KeyboardHelper ; < nl > - < nl > - import static im . actor . sdk . util . ActorSDKMessenger . messenger ; < nl > - < nl > - public class SignEmailFragment extends BaseAuthFragment { < nl > - < nl > - private EditText emailEditText ; < nl > - private KeyboardHelper keyboardHelper ; < nl > - < nl > - @ Override < nl > - public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { < nl > - View v = inflater . inflate ( R . layout . fragment _ sign _ email , container , false ) ; < nl > - < nl > - ( ( TextView ) v . findViewById ( R . id . button _ continue _ text ) ) . setTypeface ( Fonts . medium ( ) ) ; < nl > - < nl > - keyboardHelper = new KeyboardHelper ( getActivity ( ) ) ; < nl > - < nl > - initView ( v ) ; < nl > - < nl > - return v ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onResume ( ) { < nl > - super . onResume ( ) ; < nl > - < nl > - / / TODO track email auth open < nl > - / / messenger ( ) . trackAuthPhoneOpen ( ) ; < nl > - < nl > - setTitle ( R . string . auth _ email _ title ) ; < nl > - < nl > - focusEmail ( ) ; < nl > - < nl > - keyboardHelper . setImeVisibility ( emailEditText , true ) ; < nl > - } < nl > - < nl > - private void initView ( View v ) { < nl > - < nl > - emailEditText = ( EditText ) v . findViewById ( R . id . tv _ email ) ; < nl > - emailEditText . addTextChangedListener ( new PhoneNumberFormattingTextWatcher ( ) ) ; < nl > - String email = messenger ( ) . getAuthEmail ( ) ; < nl > - if ( email ! = null & & ! email . isEmpty ( ) ) { < nl > - emailEditText . setText ( email ) ; < nl > - } < nl > - emailEditText . setOnEditorActionListener ( new TextView . OnEditorActionListener ( ) { < nl > - @ Override < nl > - public boolean onEditorAction ( TextView textView , int id , KeyEvent keyEvent ) { < nl > - if ( id = = EditorInfo . IME _ ACTION _ GO ) { < nl > - requestCode ( ) ; < nl > - return true ; < nl > - } < nl > - return false ; < nl > - } < nl > - } ) ; < nl > - emailEditText . addTextChangedListener ( new TextWatcher ( ) { < nl > - @ Override < nl > - public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void onTextChanged ( CharSequence s , int start , int before , int count ) { < nl > - < nl > - } < nl > - < nl > - @ Override < nl > - public void afterTextChanged ( Editable s ) { < nl > - / / TODO trackAuthEmailType < nl > - / / messenger ( ) . trackAuthPhoneType ( emailEditText . getText ( ) . toString ( ) ) ; < nl > - } < nl > - } ) ; < nl > - < nl > - onClick ( v , R . id . button _ continue , new View . OnClickListener ( ) { < nl > - @ Override < nl > - public void onClick ( View view ) { < nl > - requestCode ( ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > - private void requestCode ( ) { < nl > - final String ACTION = " Request code email " ; < nl > - < nl > - < nl > - if ( emailEditText . getText ( ) . toString ( ) . trim ( ) . length ( ) = = 0 ) { < nl > - String message = getString ( R . string . auth _ error _ empty _ email ) ; < nl > - new AlertDialog . Builder ( getActivity ( ) ) < nl > - . setMessage ( R . string . auth _ error _ empty _ email ) < nl > - . setPositiveButton ( R . string . dialog _ ok , null ) < nl > - . show ( ) ; < nl > - return ; < nl > - } < nl > - < nl > - String rawEmail = emailEditText . getText ( ) . toString ( ) ; < nl > - < nl > - if ( rawEmail . length ( ) = = 0 ) { < nl > - String message = getString ( R . string . auth _ error _ empty _ email ) ; < nl > - new AlertDialog . Builder ( getActivity ( ) ) < nl > - . setMessage ( R . string . auth _ error _ empty _ email ) < nl > - . setPositiveButton ( R . string . dialog _ ok , null ) < nl > - . show ( ) ; < nl > - return ; < nl > - } < nl > - < nl > - setAuthId ( rawEmail ) ; < nl > - < nl > - executeAuth ( ActorSDK . sharedActor ( ) . getMessenger ( ) . requestStartEmailAuth ( rawEmail ) , ACTION ) ; < nl > - } < nl > - < nl > - private void focusEmail ( ) { < nl > - focus ( emailEditText ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public String getHintText ( ) { < nl > - return getString ( R . string . auth _ code _ email _ hint ) . replace ( " { 0 } " , " < b > " + getAuthId ( ) + " < / b > " ) ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java b / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java < nl > deleted file mode 100644 < nl > index c74e30f . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java < nl > + + + / dev / null < nl > @ @ - 1 , 100 + 0 , 0 @ @ < nl > - package im . actor . core ; < nl > - < nl > - import android . content . Context ; < nl > - < nl > - import com . google . android . gms . gcm . GoogleCloudMessaging ; < nl > - < nl > - import java . io . IOException ; < nl > - < nl > - import im . actor . messenger . app . core . ActorSDK ; < nl > - import im . actor . runtime . Log ; < nl > - import im . actor . runtime . actors . Actor ; < nl > - < nl > - / * * < nl > - * GCM push implementation for Actor push registration . < nl > - * This actor is used for load GCM token and register it on server . < nl > - * / < nl > - public class AndroidPushActor extends Actor { < nl > - < nl > - private static final String TAG = " im . actor . core . AndroidPushActor " ; < nl > - < nl > - private final AndroidMessenger messenger ; < nl > - private final Context context ; < nl > - private boolean isRegistered ; < nl > - < nl > - public AndroidPushActor ( Context context , AndroidMessenger messenger ) { < nl > - this . messenger = messenger ; < nl > - this . context = context ; < nl > - } < nl > - < nl > - @ Override < nl > - public void preStart ( ) { < nl > - super . preStart ( ) ; < nl > - < nl > - isRegistered = messenger . getPreferences ( ) . getBool ( " push _ registered " , false ) ; < nl > - < nl > - if ( ! isRegistered ) { < nl > - Log . d ( TAG , " Requesting push token . . . " ) ; < nl > - < nl > - / / TODO : Add backoff < nl > - new Thread ( ) { < nl > - @ Override < nl > - public void run ( ) { < nl > - while ( true ) { < nl > - GoogleCloudMessaging cloudMessaging = GoogleCloudMessaging . getInstance ( context ) ; < nl > - try { < nl > - Log . d ( TAG , " Requesting push token iteration . . . " ) ; < nl > - String regId = cloudMessaging . register ( " " + ActorSDK . sharedActor ( ) . getGcmProjectId ( ) ) ; < nl > - if ( regId ! = null ) { < nl > - Log . d ( TAG , " Token loaded " ) ; < nl > - self ( ) . send ( new PushRegistered ( regId ) ) ; < nl > - return ; < nl > - } else { < nl > - Log . d ( TAG , " Unable to load Token " ) ; < nl > - } < nl > - } catch ( IOException e ) { < nl > - e . printStackTrace ( ) ; < nl > - } < nl > - Log . d ( TAG , " Waiting for next attempt " ) ; < nl > - try { < nl > - Thread . sleep ( 1000 ) ; < nl > - } catch ( InterruptedException e1 ) { < nl > - e1 . printStackTrace ( ) ; < nl > - return ; < nl > - } < nl > - } < nl > - } < nl > - } . start ( ) ; < nl > - } else { < nl > - Log . d ( TAG , " Already registered token " ) ; < nl > - } < nl > - } < nl > - < nl > - private void onPushRegistered ( String token ) { < nl > - isRegistered = true ; < nl > - messenger . getPreferences ( ) . putBool ( " push _ registered " , true ) ; < nl > - messenger . registerGooglePush ( ActorSDK . sharedActor ( ) . getGcmProjectId ( ) , token ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onReceive ( Object message ) { < nl > - if ( message instanceof PushRegistered ) { < nl > - PushRegistered pushRegistered = ( PushRegistered ) message ; < nl > - onPushRegistered ( pushRegistered . getToken ( ) ) ; < nl > - } else { < nl > - drop ( message ) ; < nl > - } < nl > - } < nl > - < nl > - public static class PushRegistered { < nl > - private String token ; < nl > - < nl > - public PushRegistered ( String token ) { < nl > - this . token = token ; < nl > - } < nl > - < nl > - public String getToken ( ) { < nl > - return token ; < nl > - } < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java b / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java < nl > deleted file mode 100644 < nl > index 8dbd762 . . 0000000 < nl > - - - a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java < nl > + + + / dev / null < nl > @ @ - 1 , 37 + 0 , 0 @ @ < nl > - package im . actor . messenger ; < nl > - < nl > - import android . app . Activity ; < nl > - import android . content . Context ; < nl > - import android . content . Intent ; < nl > - import android . os . Bundle ; < nl > - import android . support . v4 . content . WakefulBroadcastReceiver ; < nl > - < nl > - import com . google . android . gms . gcm . GoogleCloudMessaging ; < nl > - < nl > - import im . actor . runtime . Log ; < nl > - < nl > - < nl > - import static im . actor . messenger . app . core . ActorSDK . messenger ; < nl > - < nl > - public class PushReceiver extends WakefulBroadcastReceiver { < nl > - < nl > - private static final String TAG = " PushReceiver " ; < nl > - < nl > - @ Override < nl > - public void onReceive ( Context context , Intent intent ) { < nl > - GoogleCloudMessaging gcm = GoogleCloudMessaging . getInstance ( context ) ; < nl > - Bundle extras = intent . getExtras ( ) ; < nl > - String messageType = gcm . getMessageType ( intent ) ; < nl > - if ( ! extras . isEmpty ( ) ) { < nl > - if ( GoogleCloudMessaging . MESSAGE _ TYPE _ MESSAGE . equals ( messageType ) ) { < nl > - if ( extras . containsKey ( " seq " ) ) { < nl > - int seq = Integer . parseInt ( extras . getString ( " seq " ) ) ; < nl > - messenger ( ) . onPushReceived ( seq ) ; < nl > - setResultCode ( Activity . RESULT _ OK ) ; < nl > - Log . d ( TAG , " Push received " ) ; < nl > - } < nl > - } < nl > - } < nl > - completeWakefulIntent ( intent ) ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / build . gradle b / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > index 5153388 . . 8c04484 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / build . gradle < nl > @ @ - 75 , 6 + 75 , 10 @ @ dependencies { < nl > compile ' com . android . support : palette - v7 : 23 . 1 . 0 ' < nl > compile ' com . android . support : recyclerview - v7 : 23 . 1 . 0 ' < nl > compile ' com . android . support : design : 23 . 1 . 0 ' < nl > + < nl > + / / GCM < nl > + compile ' com . google . android . gms : play - services - gcm : 7 . 5 . 0 ' < nl > + < nl > } < nl > < nl > / / < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > index 1492015 . . ef17a74 100644 < nl > - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java < nl > @ @ - 18 , 14 + 18 , 20 @ @ import im . actor . core . ApiConfiguration ; < nl > import im . actor . core . ConfigurationBuilder ; < nl > import im . actor . core . DeviceCategory ; < nl > import im . actor . core . PlatformType ; < nl > + import im . actor . runtime . actors . ActorCreator ; < nl > + import im . actor . runtime . actors . Props ; < nl > import im . actor . sdk . core . AndroidNotifications ; < nl > import im . actor . sdk . core . AndroidPhoneBook ; < nl > + import im . actor . sdk . core . AndroidPushActor ; < nl > import im . actor . sdk . intents . ActivityManager ; < nl > import im . actor . sdk . services . KeepAliveService ; < nl > import im . actor . sdk . util . Devices ; < nl > import im . actor . sdk . view . emoji . SmileProcessor ; < nl > import im . actor . runtime . android . AndroidContext ; < nl > < nl > + import static im . actor . runtime . actors . ActorSystem . system ; < nl > + < nl > + < nl > public class ActorSDK { < nl > < nl > < nl > @ @ - 61 , 6 + 67 , 11 @ @ public class ActorSDK { < nl > * / < nl > private String apiAppKey = " 4295f9666fad3faf2d04277fe7a0c40ff39a85d313de5348ad8ffa650ad71855 " ; < nl > / * * < nl > + * Push Registration Id < nl > + * / < nl > + private long pushId = 0 ; < nl > + < nl > + / * * < nl > * Is Keeping app alive enabled < nl > * / < nl > private boolean isKeepAliveEnabled = false ; < nl > @ @ - 71 , 7 + 82 , 8 @ @ public class ActorSDK { < nl > / * * < nl > * ActivityManager < nl > * / < nl > - private ActivityManager activityManager = new ActivityManager ( ) ; < nl > + private ActivityManager activityManager = new ActivityManager ( ) ; < nl > + < nl > private ActorSDK ( ) { < nl > endpoints . add ( " tls : / / front1 - mtproto - api - rev2 . actor . im " ) ; < nl > endpoints . add ( " tls : / / front2 - mtproto - api - rev2 . actor . im " ) ; < nl > @ @ - 91 , 7 + 103 , 7 @ @ public class ActorSDK { < nl > / / SDK Initialization < nl > / / < nl > < nl > - public void createActor ( Application application ) { < nl > + public void createActor ( final Application application ) { < nl > < nl > this . application = application ; < nl > < nl > @ @ - 135 , 6 + 147 , 19 @ @ public class ActorSDK { < nl > AlarmManager alarm = ( AlarmManager ) application . getSystemService ( Context . ALARM _ SERVICE ) ; < nl > alarm . setRepeating ( AlarmManager . RTC , System . currentTimeMillis ( ) , 30 * 1000 , pendingIntent ) ; < nl > } < nl > + < nl > + / / < nl > + / / GCM < nl > + / / < nl > + if ( pushId ! = 0 ) { < nl > + system ( ) . actorOf ( Props . create ( AndroidPushActor . class , new ActorCreator < AndroidPushActor > ( ) { < nl > + @ Override < nl > + public AndroidPushActor create ( ) { < nl > + return new AndroidPushActor ( application , messenger ) ; < nl > + } < nl > + } ) , " actor / android / push " ) ; < nl > + } < nl > + < nl > } < nl > < nl > public void startMessagingApp ( Activity context ) { < nl > @ @ - 240 , 6 + 265 , 22 @ @ public class ActorSDK { < nl > this . isKeepAliveEnabled = isKeepAliveEnabled ; < nl > } < nl > < nl > + / * * < nl > + * Getting Push Registration Id < nl > + * < nl > + * @ return pushId < nl > + * / < nl > + public long getPushId ( ) { < nl > + return pushId ; < nl > + } < nl > + < nl > + / * * < nl > + * Setting Push Registration Id < nl > + * / < nl > + public void setPushId ( long pushId ) { < nl > + this . pushId = pushId ; < nl > + } < nl > + < nl > public ActorSDKDelegate getDelegate ( ) { < nl > return delegate ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java < nl > new file mode 100644 < nl > index 0000000 . . d65a7a8 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java < nl > @ @ - 0 , 0 + 1 , 101 @ @ < nl > + package im . actor . sdk . core ; < nl > + < nl > + import android . content . Context ; < nl > + < nl > + import com . google . android . gms . gcm . GoogleCloudMessaging ; < nl > + < nl > + import java . io . IOException ; < nl > + < nl > + import im . actor . core . AndroidMessenger ; < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . runtime . actors . Actor ; < nl > + import im . actor . sdk . ActorSDK ; < nl > + < nl > + / * * < nl > + * GCM push implementation for Actor push registration . < nl > + * This actor is used for load GCM token and register it on server . < nl > + * / < nl > + public class AndroidPushActor extends Actor { < nl > + < nl > + private static final String TAG = " im . actor . core . AndroidPushActor " ; < nl > + < nl > + private final AndroidMessenger messenger ; < nl > + private final Context context ; < nl > + private boolean isRegistered ; < nl > + < nl > + public AndroidPushActor ( Context context , AndroidMessenger messenger ) { < nl > + this . messenger = messenger ; < nl > + this . context = context ; < nl > + } < nl > + < nl > + @ Override < nl > + public void preStart ( ) { < nl > + super . preStart ( ) ; < nl > + < nl > + isRegistered = messenger . getPreferences ( ) . getBool ( " push _ registered " , false ) ; < nl > + < nl > + if ( ! isRegistered ) { < nl > + Log . d ( TAG , " Requesting push token . . . " ) ; < nl > + < nl > + / / TODO : Add backoff < nl > + new Thread ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + while ( true ) { < nl > + GoogleCloudMessaging cloudMessaging = GoogleCloudMessaging . getInstance ( context ) ; < nl > + try { < nl > + Log . d ( TAG , " Requesting push token iteration . . . " ) ; < nl > + String regId = cloudMessaging . register ( " " + ActorSDK . sharedActor ( ) . getPushId ( ) ) ; < nl > + if ( regId ! = null ) { < nl > + Log . d ( TAG , " Token loaded " ) ; < nl > + self ( ) . send ( new PushRegistered ( regId ) ) ; < nl > + return ; < nl > + } else { < nl > + Log . d ( TAG , " Unable to load Token " ) ; < nl > + } < nl > + } catch ( IOException e ) { < nl > + e . printStackTrace ( ) ; < nl > + } < nl > + Log . d ( TAG , " Waiting for next attempt " ) ; < nl > + try { < nl > + Thread . sleep ( 1000 ) ; < nl > + } catch ( InterruptedException e1 ) { < nl > + e1 . printStackTrace ( ) ; < nl > + return ; < nl > + } < nl > + } < nl > + } < nl > + } . start ( ) ; < nl > + } else { < nl > + Log . d ( TAG , " Already registered token " ) ; < nl > + } < nl > + } < nl > + < nl > + private void onPushRegistered ( String token ) { < nl > + isRegistered = true ; < nl > + messenger . getPreferences ( ) . putBool ( " push _ registered " , true ) ; < nl > + messenger . registerGooglePush ( ActorSDK . sharedActor ( ) . getPushId ( ) , token ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onReceive ( Object message ) { < nl > + if ( message instanceof PushRegistered ) { < nl > + PushRegistered pushRegistered = ( PushRegistered ) message ; < nl > + onPushRegistered ( pushRegistered . getToken ( ) ) ; < nl > + } else { < nl > + drop ( message ) ; < nl > + } < nl > + } < nl > + < nl > + public static class PushRegistered { < nl > + private String token ; < nl > + < nl > + public PushRegistered ( String token ) { < nl > + this . token = token ; < nl > + } < nl > + < nl > + public String getToken ( ) { < nl > + return token ; < nl > + } < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java < nl > new file mode 100644 < nl > index 0000000 . . 425cfb1 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java < nl > @ @ - 0 , 0 + 1 , 35 @ @ < nl > + package im . actor . sdk . core ; < nl > + < nl > + import android . app . Activity ; < nl > + import android . content . Context ; < nl > + import android . content . Intent ; < nl > + import android . os . Bundle ; < nl > + import android . support . v4 . content . WakefulBroadcastReceiver ; < nl > + < nl > + import com . google . android . gms . gcm . GoogleCloudMessaging ; < nl > + < nl > + import im . actor . runtime . Log ; < nl > + import im . actor . sdk . ActorSDK ; < nl > + < nl > + public class PushReceiver extends WakefulBroadcastReceiver { < nl > + < nl > + private static final String TAG = " PushReceiver " ; < nl > + < nl > + @ Override < nl > + public void onReceive ( Context context , Intent intent ) { < nl > + GoogleCloudMessaging gcm = GoogleCloudMessaging . getInstance ( context ) ; < nl > + Bundle extras = intent . getExtras ( ) ; < nl > + String messageType = gcm . getMessageType ( intent ) ; < nl > + if ( ! extras . isEmpty ( ) ) { < nl > + if ( GoogleCloudMessaging . MESSAGE _ TYPE _ MESSAGE . equals ( messageType ) ) { < nl > + if ( extras . containsKey ( " seq " ) ) { < nl > + int seq = Integer . parseInt ( extras . getString ( " seq " ) ) ; < nl > + ActorSDK . sharedActor ( ) . getMessenger ( ) . onPushReceived ( seq ) ; < nl > + setResultCode ( Activity . RESULT _ OK ) ; < nl > + Log . d ( TAG , " Push received " ) ; < nl > + } < nl > + } < nl > + } < nl > + completeWakefulIntent ( intent ) ; < nl > + } < nl > + }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / KeyboardLayout . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / KeyboardLayout . java 
 index 860b37f . . 98744ee 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / KeyboardLayout . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / controllers / conversation / KeyboardLayout . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import im . actor . sdk . R ; 
 
 public class KeyboardLayout extends FrameLayout { 
 boolean showInternal = false ; 
 + boolean sync = false ; 
 private RelativeLayout container ; 
 private int keyboardHeight ; 
 
 @ @ - 35 , 6 + 36 , 7 @ @ public class KeyboardLayout extends FrameLayout { 
 if ( container . getPaddingBottom ( ) ! = 0 ) { 
 container . setPadding ( 0 , 0 , 0 , 0 ) ; 
 } 
 + sync = showInternal ; 
 } 
 } 
 
 @ @ - 45 , 8 + 47 , 10 @ @ public class KeyboardLayout extends FrameLayout { 
 if ( container . getPaddingBottom ( ) ! = keyboardHeight ) { 
 container . setPadding ( 0 , 0 , 0 , keyboardHeight ) ; 
 } 
 + sync = showInternal ; 
 } 
 } 
 + 
 } 
 
 @ Override 
 @ @ - 60 , 10 + 64 , 16 @ @ public class KeyboardLayout extends FrameLayout { 
 public void showInternal ( int keyboardHeight ) { 
 showInternal = true ; 
 this . keyboardHeight = keyboardHeight ; 
 + sync = false ; 
 } 
 
 public void dismissInternal ( ) { 
 showInternal = false ; 
 + sync = true ; 
 + } 
 + 
 + public boolean isSync ( ) { 
 + return sync = = showInternal ; 
 } 
 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / keyboard / BaseKeyboard . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / keyboard / BaseKeyboard . java 
 index 1ba03c2 . . 05f65d5 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / keyboard / BaseKeyboard . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / view / emoji / keyboard / BaseKeyboard . java 
 @ @ - 144 , 14 + 144 , 21 @ @ public class BaseKeyboard implements 
 dismissInternally ( false ) ; 
 } 
 
 - public void dismiss ( boolean all ) { 
 - dismissInternally ( all ) ; 
 + public void dismiss ( boolean dismissAll ) { 
 + dismissInternally ( dismissAll ) ; 
 } 
 
 private void dismissInternally ( boolean dismissAll ) { 
 showing = false ; 
 if ( messageBody ! = null ) { 
 - keyboardHelper . setImeVisibility ( messageBody , ! dismissAll ) ; 
 + if ( dismissAll ) { 
 + keyboardHelper . setImeVisibility ( messageBody , false ) ; 
 + } else if ( ! softwareKeyboardShowing ) { 
 + keyboardHelper . setImeVisibility ( messageBody , true ) ; 
 + } 
 + } 
 + if ( root ! = null ) { 
 + root . dismissInternal ( ) ; 
 } 
 if ( emojiKeyboardView ! = null & & root ! = null & & keyboardHelper ! = null ) { 
 final View emojiKeyboardViewCopy = emojiKeyboardView ; 
 @ @ - 181 , 10 + 188 , 6 @ @ public class BaseKeyboard implements 
 } 
 onDismiss ( ) ; 
 } 
 - 
 - if ( root ! = null ) { 
 - root . dismissInternal ( ) ; 
 - } 
 } 
 
 
 @ @ - 251 , 6 + 254 , 9 @ @ public class BaseKeyboard implements 
 } 
 } 
 
 + boolean changed = softwareKeyboardShowing ; 
 + 
 + 
 if ( heightDifference > 100 ) { 
 
 softwareKeyboardShowing = true ; 
 @ @ - 259 , 21 + 265 , 17 @ @ public class BaseKeyboard implements 
 
 keyboardHeight = heightDifference ; 
 
 - if ( ! showRequested ) { 
 - Log . d ( TAG , " onGlobalLayout : " + " showing " ) ; 
 + dismiss ( ) ; 
 
 - if ( showing ) { 
 - dismiss ( ) ; 
 - } 
 - } 
 
 } else { 
 
 softwareKeyboardShowing = false ; 
 
 if ( showRequested ) { 
 + root . showInternal ( keyboardHeight ) ; 
 showInternal ( ) ; 
 - } else { 
 + } else if ( changed ) { 
 if ( root ! = null ) { 
 root . dismissInternal ( ) ; 
 } 
 @ @ - 287 , 6 + 289 , 21 @ @ public class BaseKeyboard implements 
 / / dismissInternally ( ) ; 
 } 
 
 + changed = changed ! = softwareKeyboardShowing ; 
 + Log . d ( TAG , " keyboard state change : " + changed ) ; 
 + 
 + / / FIXME verify root view applied new padding after keyboard state change 
 + / / workaround for [ some of android versions ] bug , when keyboard closing not causing relayout , or causing it with delay 
 + if ( changed & & root ! = null ) { 
 + 
 + root . postDelayed ( ( ) - > { 
 + if ( ! root . isSync ( ) ) { 
 + root . requestLayout ( ) ; 
 + } 
 + } , 30 ) ; 
 + } 
 + 
 + 
 
 } 
 
 @ @ - 312 , 8 + 329 , 8 @ @ public class BaseKeyboard implements 
 } 
 
 public void onConfigurationChange ( ) { 
 - dismiss ( true ) ; 
 - softwareKeyboardShowing = false ; 
 + / / dismiss ( true ) ; 
 + / / softwareKeyboardShowing = false ; 
 } 
 
 public boolean onBackPressed ( ) {

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 index 71da5ab . . 8045a74 100644 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 + + + b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / Application . java 
 @ @ - 1 , 11 + 1 , 7 @ @ 
 package im . actor ; 
 
 - import java . util . ArrayList ; 
 - 
 - import im . actor . auth . SignEmailFragment ; 
 import im . actor . sdk . ActorSDK ; 
 import im . actor . sdk . BaseActorSDKDelegate ; 
 - import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; 
 
 / * * 
 * Created by badgr on 16 . 10 . 2015 . 
 @ @ - 15 , 13 + 11 , 11 @ @ public class Application extends android . app . Application { 
 public void onCreate ( ) { 
 super . onCreate ( ) ; 
 ActorSDK . sharedActor ( ) . setDelegate ( new ActorSDKDelegate ( ) ) ; 
 + ActorSDK . sharedActor ( ) . setPushId ( 209133700967L ) ; 
 ActorSDK . sharedActor ( ) . createActor ( this ) ; 
 } 
 
 private class ActorSDKDelegate extends BaseActorSDKDelegate { 
 - @ Override 
 - public BaseAuthFragment getSignFragment ( ) { 
 - return new SignEmailFragment ( ) ; 
 - } 
 + 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java b / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java 
 deleted file mode 100644 
 index 37ce216 . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - app / src / main / java / im / actor / auth / SignEmailFragment . java 
 + + + / dev / null 
 @ @ - 1 , 137 + 0 , 0 @ @ 
 - package im . actor . auth ; 
 - 
 - import android . app . AlertDialog ; 
 - import android . os . Bundle ; 
 - import android . telephony . PhoneNumberFormattingTextWatcher ; 
 - import android . text . Editable ; 
 - import android . text . TextWatcher ; 
 - import android . view . KeyEvent ; 
 - import android . view . LayoutInflater ; 
 - import android . view . View ; 
 - import android . view . ViewGroup ; 
 - import android . view . inputmethod . EditorInfo ; 
 - import android . widget . EditText ; 
 - import android . widget . TextView ; 
 - 
 - import im . actor . sdk . ActorSDK ; 
 - import im . actor . sdk . R ; 
 - import im . actor . sdk . controllers . fragment . auth . BaseAuthFragment ; 
 - import im . actor . sdk . util . Fonts ; 
 - import im . actor . sdk . util . KeyboardHelper ; 
 - 
 - import static im . actor . sdk . util . ActorSDKMessenger . messenger ; 
 - 
 - public class SignEmailFragment extends BaseAuthFragment { 
 - 
 - private EditText emailEditText ; 
 - private KeyboardHelper keyboardHelper ; 
 - 
 - @ Override 
 - public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { 
 - View v = inflater . inflate ( R . layout . fragment _ sign _ email , container , false ) ; 
 - 
 - ( ( TextView ) v . findViewById ( R . id . button _ continue _ text ) ) . setTypeface ( Fonts . medium ( ) ) ; 
 - 
 - keyboardHelper = new KeyboardHelper ( getActivity ( ) ) ; 
 - 
 - initView ( v ) ; 
 - 
 - return v ; 
 - } 
 - 
 - @ Override 
 - public void onResume ( ) { 
 - super . onResume ( ) ; 
 - 
 - / / TODO track email auth open 
 - / / messenger ( ) . trackAuthPhoneOpen ( ) ; 
 - 
 - setTitle ( R . string . auth _ email _ title ) ; 
 - 
 - focusEmail ( ) ; 
 - 
 - keyboardHelper . setImeVisibility ( emailEditText , true ) ; 
 - } 
 - 
 - private void initView ( View v ) { 
 - 
 - emailEditText = ( EditText ) v . findViewById ( R . id . tv _ email ) ; 
 - emailEditText . addTextChangedListener ( new PhoneNumberFormattingTextWatcher ( ) ) ; 
 - String email = messenger ( ) . getAuthEmail ( ) ; 
 - if ( email ! = null & & ! email . isEmpty ( ) ) { 
 - emailEditText . setText ( email ) ; 
 - } 
 - emailEditText . setOnEditorActionListener ( new TextView . OnEditorActionListener ( ) { 
 - @ Override 
 - public boolean onEditorAction ( TextView textView , int id , KeyEvent keyEvent ) { 
 - if ( id = = EditorInfo . IME _ ACTION _ GO ) { 
 - requestCode ( ) ; 
 - return true ; 
 - } 
 - return false ; 
 - } 
 - } ) ; 
 - emailEditText . addTextChangedListener ( new TextWatcher ( ) { 
 - @ Override 
 - public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { 
 - 
 - } 
 - 
 - @ Override 
 - public void onTextChanged ( CharSequence s , int start , int before , int count ) { 
 - 
 - } 
 - 
 - @ Override 
 - public void afterTextChanged ( Editable s ) { 
 - / / TODO trackAuthEmailType 
 - / / messenger ( ) . trackAuthPhoneType ( emailEditText . getText ( ) . toString ( ) ) ; 
 - } 
 - } ) ; 
 - 
 - onClick ( v , R . id . button _ continue , new View . OnClickListener ( ) { 
 - @ Override 
 - public void onClick ( View view ) { 
 - requestCode ( ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - private void requestCode ( ) { 
 - final String ACTION = " Request code email " ; 
 - 
 - 
 - if ( emailEditText . getText ( ) . toString ( ) . trim ( ) . length ( ) = = 0 ) { 
 - String message = getString ( R . string . auth _ error _ empty _ email ) ; 
 - new AlertDialog . Builder ( getActivity ( ) ) 
 - . setMessage ( R . string . auth _ error _ empty _ email ) 
 - . setPositiveButton ( R . string . dialog _ ok , null ) 
 - . show ( ) ; 
 - return ; 
 - } 
 - 
 - String rawEmail = emailEditText . getText ( ) . toString ( ) ; 
 - 
 - if ( rawEmail . length ( ) = = 0 ) { 
 - String message = getString ( R . string . auth _ error _ empty _ email ) ; 
 - new AlertDialog . Builder ( getActivity ( ) ) 
 - . setMessage ( R . string . auth _ error _ empty _ email ) 
 - . setPositiveButton ( R . string . dialog _ ok , null ) 
 - . show ( ) ; 
 - return ; 
 - } 
 - 
 - setAuthId ( rawEmail ) ; 
 - 
 - executeAuth ( ActorSDK . sharedActor ( ) . getMessenger ( ) . requestStartEmailAuth ( rawEmail ) , ACTION ) ; 
 - } 
 - 
 - private void focusEmail ( ) { 
 - focus ( emailEditText ) ; 
 - } 
 - 
 - @ Override 
 - public String getHintText ( ) { 
 - return getString ( R . string . auth _ code _ email _ hint ) . replace ( " { 0 } " , " < b > " + getAuthId ( ) + " < / b > " ) ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java b / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java 
 deleted file mode 100644 
 index c74e30f . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / core / AndroidPushActor . java 
 + + + / dev / null 
 @ @ - 1 , 100 + 0 , 0 @ @ 
 - package im . actor . core ; 
 - 
 - import android . content . Context ; 
 - 
 - import com . google . android . gms . gcm . GoogleCloudMessaging ; 
 - 
 - import java . io . IOException ; 
 - 
 - import im . actor . messenger . app . core . ActorSDK ; 
 - import im . actor . runtime . Log ; 
 - import im . actor . runtime . actors . Actor ; 
 - 
 - / * * 
 - * GCM push implementation for Actor push registration . 
 - * This actor is used for load GCM token and register it on server . 
 - * / 
 - public class AndroidPushActor extends Actor { 
 - 
 - private static final String TAG = " im . actor . core . AndroidPushActor " ; 
 - 
 - private final AndroidMessenger messenger ; 
 - private final Context context ; 
 - private boolean isRegistered ; 
 - 
 - public AndroidPushActor ( Context context , AndroidMessenger messenger ) { 
 - this . messenger = messenger ; 
 - this . context = context ; 
 - } 
 - 
 - @ Override 
 - public void preStart ( ) { 
 - super . preStart ( ) ; 
 - 
 - isRegistered = messenger . getPreferences ( ) . getBool ( " push _ registered " , false ) ; 
 - 
 - if ( ! isRegistered ) { 
 - Log . d ( TAG , " Requesting push token . . . " ) ; 
 - 
 - / / TODO : Add backoff 
 - new Thread ( ) { 
 - @ Override 
 - public void run ( ) { 
 - while ( true ) { 
 - GoogleCloudMessaging cloudMessaging = GoogleCloudMessaging . getInstance ( context ) ; 
 - try { 
 - Log . d ( TAG , " Requesting push token iteration . . . " ) ; 
 - String regId = cloudMessaging . register ( " " + ActorSDK . sharedActor ( ) . getGcmProjectId ( ) ) ; 
 - if ( regId ! = null ) { 
 - Log . d ( TAG , " Token loaded " ) ; 
 - self ( ) . send ( new PushRegistered ( regId ) ) ; 
 - return ; 
 - } else { 
 - Log . d ( TAG , " Unable to load Token " ) ; 
 - } 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - Log . d ( TAG , " Waiting for next attempt " ) ; 
 - try { 
 - Thread . sleep ( 1000 ) ; 
 - } catch ( InterruptedException e1 ) { 
 - e1 . printStackTrace ( ) ; 
 - return ; 
 - } 
 - } 
 - } 
 - } . start ( ) ; 
 - } else { 
 - Log . d ( TAG , " Already registered token " ) ; 
 - } 
 - } 
 - 
 - private void onPushRegistered ( String token ) { 
 - isRegistered = true ; 
 - messenger . getPreferences ( ) . putBool ( " push _ registered " , true ) ; 
 - messenger . registerGooglePush ( ActorSDK . sharedActor ( ) . getGcmProjectId ( ) , token ) ; 
 - } 
 - 
 - @ Override 
 - public void onReceive ( Object message ) { 
 - if ( message instanceof PushRegistered ) { 
 - PushRegistered pushRegistered = ( PushRegistered ) message ; 
 - onPushRegistered ( pushRegistered . getToken ( ) ) ; 
 - } else { 
 - drop ( message ) ; 
 - } 
 - } 
 - 
 - public static class PushRegistered { 
 - private String token ; 
 - 
 - public PushRegistered ( String token ) { 
 - this . token = token ; 
 - } 
 - 
 - public String getToken ( ) { 
 - return token ; 
 - } 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java b / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java 
 deleted file mode 100644 
 index 8dbd762 . . 0000000 
 - - - a / actor - sdk / sdk - core - android / android - push - google / src / main / java / im / actor / messenger / PushReceiver . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - package im . actor . messenger ; 
 - 
 - import android . app . Activity ; 
 - import android . content . Context ; 
 - import android . content . Intent ; 
 - import android . os . Bundle ; 
 - import android . support . v4 . content . WakefulBroadcastReceiver ; 
 - 
 - import com . google . android . gms . gcm . GoogleCloudMessaging ; 
 - 
 - import im . actor . runtime . Log ; 
 - 
 - 
 - import static im . actor . messenger . app . core . ActorSDK . messenger ; 
 - 
 - public class PushReceiver extends WakefulBroadcastReceiver { 
 - 
 - private static final String TAG = " PushReceiver " ; 
 - 
 - @ Override 
 - public void onReceive ( Context context , Intent intent ) { 
 - GoogleCloudMessaging gcm = GoogleCloudMessaging . getInstance ( context ) ; 
 - Bundle extras = intent . getExtras ( ) ; 
 - String messageType = gcm . getMessageType ( intent ) ; 
 - if ( ! extras . isEmpty ( ) ) { 
 - if ( GoogleCloudMessaging . MESSAGE _ TYPE _ MESSAGE . equals ( messageType ) ) { 
 - if ( extras . containsKey ( " seq " ) ) { 
 - int seq = Integer . parseInt ( extras . getString ( " seq " ) ) ; 
 - messenger ( ) . onPushReceived ( seq ) ; 
 - setResultCode ( Activity . RESULT _ OK ) ; 
 - Log . d ( TAG , " Push received " ) ; 
 - } 
 - } 
 - } 
 - completeWakefulIntent ( intent ) ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / build . gradle b / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 index 5153388 . . 8c04484 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 + + + b / actor - sdk / sdk - core - android / android - sdk / build . gradle 
 @ @ - 75 , 6 + 75 , 10 @ @ dependencies { 
 compile ' com . android . support : palette - v7 : 23 . 1 . 0 ' 
 compile ' com . android . support : recyclerview - v7 : 23 . 1 . 0 ' 
 compile ' com . android . support : design : 23 . 1 . 0 ' 
 + 
 + / / GCM 
 + compile ' com . google . android . gms : play - services - gcm : 7 . 5 . 0 ' 
 + 
 } 
 
 / / 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 index 1492015 . . ef17a74 100644 
 - - - a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / ActorSDK . java 
 @ @ - 18 , 14 + 18 , 20 @ @ import im . actor . core . ApiConfiguration ; 
 import im . actor . core . ConfigurationBuilder ; 
 import im . actor . core . DeviceCategory ; 
 import im . actor . core . PlatformType ; 
 + import im . actor . runtime . actors . ActorCreator ; 
 + import im . actor . runtime . actors . Props ; 
 import im . actor . sdk . core . AndroidNotifications ; 
 import im . actor . sdk . core . AndroidPhoneBook ; 
 + import im . actor . sdk . core . AndroidPushActor ; 
 import im . actor . sdk . intents . ActivityManager ; 
 import im . actor . sdk . services . KeepAliveService ; 
 import im . actor . sdk . util . Devices ; 
 import im . actor . sdk . view . emoji . SmileProcessor ; 
 import im . actor . runtime . android . AndroidContext ; 
 
 + import static im . actor . runtime . actors . ActorSystem . system ; 
 + 
 + 
 public class ActorSDK { 
 
 
 @ @ - 61 , 6 + 67 , 11 @ @ public class ActorSDK { 
 * / 
 private String apiAppKey = " 4295f9666fad3faf2d04277fe7a0c40ff39a85d313de5348ad8ffa650ad71855 " ; 
 / * * 
 + * Push Registration Id 
 + * / 
 + private long pushId = 0 ; 
 + 
 + / * * 
 * Is Keeping app alive enabled 
 * / 
 private boolean isKeepAliveEnabled = false ; 
 @ @ - 71 , 7 + 82 , 8 @ @ public class ActorSDK { 
 / * * 
 * ActivityManager 
 * / 
 - private ActivityManager activityManager = new ActivityManager ( ) ; 
 + private ActivityManager activityManager = new ActivityManager ( ) ; 
 + 
 private ActorSDK ( ) { 
 endpoints . add ( " tls : / / front1 - mtproto - api - rev2 . actor . im " ) ; 
 endpoints . add ( " tls : / / front2 - mtproto - api - rev2 . actor . im " ) ; 
 @ @ - 91 , 7 + 103 , 7 @ @ public class ActorSDK { 
 / / SDK Initialization 
 / / 
 
 - public void createActor ( Application application ) { 
 + public void createActor ( final Application application ) { 
 
 this . application = application ; 
 
 @ @ - 135 , 6 + 147 , 19 @ @ public class ActorSDK { 
 AlarmManager alarm = ( AlarmManager ) application . getSystemService ( Context . ALARM _ SERVICE ) ; 
 alarm . setRepeating ( AlarmManager . RTC , System . currentTimeMillis ( ) , 30 * 1000 , pendingIntent ) ; 
 } 
 + 
 + / / 
 + / / GCM 
 + / / 
 + if ( pushId ! = 0 ) { 
 + system ( ) . actorOf ( Props . create ( AndroidPushActor . class , new ActorCreator < AndroidPushActor > ( ) { 
 + @ Override 
 + public AndroidPushActor create ( ) { 
 + return new AndroidPushActor ( application , messenger ) ; 
 + } 
 + } ) , " actor / android / push " ) ; 
 + } 
 + 
 } 
 
 public void startMessagingApp ( Activity context ) { 
 @ @ - 240 , 6 + 265 , 22 @ @ public class ActorSDK { 
 this . isKeepAliveEnabled = isKeepAliveEnabled ; 
 } 
 
 + / * * 
 + * Getting Push Registration Id 
 + * 
 + * @ return pushId 
 + * / 
 + public long getPushId ( ) { 
 + return pushId ; 
 + } 
 + 
 + / * * 
 + * Setting Push Registration Id 
 + * / 
 + public void setPushId ( long pushId ) { 
 + this . pushId = pushId ; 
 + } 
 + 
 public ActorSDKDelegate getDelegate ( ) { 
 return delegate ; 
 } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java 
 new file mode 100644 
 index 0000000 . . d65a7a8 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / AndroidPushActor . java 
 @ @ - 0 , 0 + 1 , 101 @ @ 
 + package im . actor . sdk . core ; 
 + 
 + import android . content . Context ; 
 + 
 + import com . google . android . gms . gcm . GoogleCloudMessaging ; 
 + 
 + import java . io . IOException ; 
 + 
 + import im . actor . core . AndroidMessenger ; 
 + import im . actor . runtime . Log ; 
 + import im . actor . runtime . actors . Actor ; 
 + import im . actor . sdk . ActorSDK ; 
 + 
 + / * * 
 + * GCM push implementation for Actor push registration . 
 + * This actor is used for load GCM token and register it on server . 
 + * / 
 + public class AndroidPushActor extends Actor { 
 + 
 + private static final String TAG = " im . actor . core . AndroidPushActor " ; 
 + 
 + private final AndroidMessenger messenger ; 
 + private final Context context ; 
 + private boolean isRegistered ; 
 + 
 + public AndroidPushActor ( Context context , AndroidMessenger messenger ) { 
 + this . messenger = messenger ; 
 + this . context = context ; 
 + } 
 + 
 + @ Override 
 + public void preStart ( ) { 
 + super . preStart ( ) ; 
 + 
 + isRegistered = messenger . getPreferences ( ) . getBool ( " push _ registered " , false ) ; 
 + 
 + if ( ! isRegistered ) { 
 + Log . d ( TAG , " Requesting push token . . . " ) ; 
 + 
 + / / TODO : Add backoff 
 + new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + while ( true ) { 
 + GoogleCloudMessaging cloudMessaging = GoogleCloudMessaging . getInstance ( context ) ; 
 + try { 
 + Log . d ( TAG , " Requesting push token iteration . . . " ) ; 
 + String regId = cloudMessaging . register ( " " + ActorSDK . sharedActor ( ) . getPushId ( ) ) ; 
 + if ( regId ! = null ) { 
 + Log . d ( TAG , " Token loaded " ) ; 
 + self ( ) . send ( new PushRegistered ( regId ) ) ; 
 + return ; 
 + } else { 
 + Log . d ( TAG , " Unable to load Token " ) ; 
 + } 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + Log . d ( TAG , " Waiting for next attempt " ) ; 
 + try { 
 + Thread . sleep ( 1000 ) ; 
 + } catch ( InterruptedException e1 ) { 
 + e1 . printStackTrace ( ) ; 
 + return ; 
 + } 
 + } 
 + } 
 + } . start ( ) ; 
 + } else { 
 + Log . d ( TAG , " Already registered token " ) ; 
 + } 
 + } 
 + 
 + private void onPushRegistered ( String token ) { 
 + isRegistered = true ; 
 + messenger . getPreferences ( ) . putBool ( " push _ registered " , true ) ; 
 + messenger . registerGooglePush ( ActorSDK . sharedActor ( ) . getPushId ( ) , token ) ; 
 + } 
 + 
 + @ Override 
 + public void onReceive ( Object message ) { 
 + if ( message instanceof PushRegistered ) { 
 + PushRegistered pushRegistered = ( PushRegistered ) message ; 
 + onPushRegistered ( pushRegistered . getToken ( ) ) ; 
 + } else { 
 + drop ( message ) ; 
 + } 
 + } 
 + 
 + public static class PushRegistered { 
 + private String token ; 
 + 
 + public PushRegistered ( String token ) { 
 + this . token = token ; 
 + } 
 + 
 + public String getToken ( ) { 
 + return token ; 
 + } 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java 
 new file mode 100644 
 index 0000000 . . 425cfb1 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core - android / android - sdk / src / main / java / im / actor / sdk / core / PushReceiver . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + package im . actor . sdk . core ; 
 + 
 + import android . app . Activity ; 
 + import android . content . Context ; 
 + import android . content . Intent ; 
 + import android . os . Bundle ; 
 + import android . support . v4 . content . WakefulBroadcastReceiver ; 
 + 
 + import com . google . android . gms . gcm . GoogleCloudMessaging ; 
 + 
 + import im . actor . runtime . Log ; 
 + import im . actor . sdk . ActorSDK ; 
 + 
 + public class PushReceiver extends WakefulBroadcastReceiver { 
 + 
 + private static final String TAG = " PushReceiver " ; 
 + 
 + @ Override 
 + public void onReceive ( Context context , Intent intent ) { 
 + GoogleCloudMessaging gcm = GoogleCloudMessaging . getInstance ( context ) ; 
 + Bundle extras = intent . getExtras ( ) ; 
 + String messageType = gcm . getMessageType ( intent ) ; 
 + if ( ! extras . isEmpty ( ) ) { 
 + if ( GoogleCloudMessaging . MESSAGE _ TYPE _ MESSAGE . equals ( messageType ) ) { 
 + if ( extras . containsKey ( " seq " ) ) { 
 + int seq = Integer . parseInt ( extras . getString ( " seq " ) ) ; 
 + ActorSDK . sharedActor ( ) . getMessenger ( ) . onPushReceived ( seq ) ; 
 + setResultCode ( Activity . RESULT _ OK ) ; 
 + Log . d ( TAG , " Push received " ) ; 
 + } 
 + } 
 + } 
 + completeWakefulIntent ( intent ) ; 
 + } 
 + }
