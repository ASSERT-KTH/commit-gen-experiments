BLEU SCORE: 0.2521193618434983

TEST MSG: fix ( server : rpc ) : use FastFuture for auth failure
GENERATED MSG: fix ( server : bots ) : exception on bot creation

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala < nl > index 432f9af . . 66cb42f 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala < nl > @ @ - 1 , 5 + 1 , 6 @ @ < nl > package im . actor . api < nl > < nl > + import akka . http . scaladsl . util . FastFuture < nl > import cats . data . Xor < nl > import im . actor . server . CommonErrors < nl > import im . actor . server . group . GroupErrors . GroupNotFound < nl > @ @ - 68 , 7 + 69 , 7 @ @ package object rpc extends PeersImplicits with HistoryImplicits with DialogConve < nl > } < nl > < nl > private def toResult [ R ] ( authorizedFuture : MaybeAuthorized [ Future [ RpcError Xor R ] ] ) ( implicit ec : ExecutionContext ) : Future [ RpcError Xor R ] = < nl > - recover ( authorizedFuture . getOrElse ( Future . successful ( Error ( CommonRpcErrors . UserNotAuthorized ) ) ) ) < nl > + recover ( authorizedFuture . getOrElse ( FastFuture . successful ( Error ( CommonRpcErrors . UserNotAuthorized ) ) ) ) < nl > < nl > private def recover [ A ] ( f : Future [ RpcError Xor A ] ) ( implicit ec : ExecutionContext ) : Future [ RpcError Xor A ] = f recover ( recoverCommon andThen { e ⇒ Error ( e ) } )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > index cce6d63 . . 44e8d36 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala < nl > @ @ - 103 , 7 + 103 , 7 @ @ private [ bot ] final class BotExtension ( _ system : ActorSystem ) extends Extension { < nl > * / < nl > def exists ( userId : UserId ) : Future [ Boolean ] = { < nl > userExt . getApiStruct ( userId , 0 , 0 ) map ( _ ⇒ true ) recover { < nl > - case EntityNotFound ⇒ false < nl > + case _ : EntityNotFound ⇒ false < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > index fc63f1b . . e527519 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala < nl > @ @ - 35 , 6 + 35 , 7 @ @ abstract class InternalBot ( userId : Int , nickname : String , name : String , isAdmin : < nl > < nl > def receive = { < nl > case Initialized ( authId , authSid ) ⇒ < nl > + log . warning ( " Initialized bot { } { } { } " , userId , nickname , name ) < nl > val bp = new BotServerBlueprint ( userId , authId , authSid , system ) < nl > < nl > val rqSource = < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala b / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala < nl > index dd596b4 . . ccef562 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala < nl > @ @ - 1 , 7 + 1 , 7 @ @ < nl > package im . actor . api < nl > < nl > import im . actor . server . group . GroupErrors . GroupNotFound < nl > - import im . actor . server . office . EntityNotFound < nl > + import im . actor . server . office . EntityNotFoundError < nl > import im . actor . server . user . UserErrors . UserNotFound < nl > import slick . dbio . { DBIO , DBIOAction } < nl > import slick . driver . PostgresDriver . api . _ < nl > @ @ - 79 , 9 + 79 , 9 @ @ package object rpc extends { < nl > < nl > def recover [ A ] ( f : Future [ \ / [ RpcError , A ] ] ) ( implicit ec : ExecutionContext ) : Future [ \ / [ RpcError , A ] ] = f recover recoverPF < nl > def recoverPF [ A ] : PartialFunction [ Throwable , \ / [ RpcError , A ] ] = { < nl > - case UserNotFound ( _ ) ⇒ Error ( CommonErrors . UserNotFound ) < nl > - case GroupNotFound ( _ ) ⇒ Error ( CommonErrors . GroupNotFound ) < nl > - case EntityNotFound ⇒ Error ( CommonErrors . EntityNotFound ) < nl > + case UserNotFound ( _ ) ⇒ Error ( CommonErrors . UserNotFound ) < nl > + case GroupNotFound ( _ ) ⇒ Error ( CommonErrors . GroupNotFound ) < nl > + case EntityNotFoundError ⇒ Error ( CommonErrors . EntityNotFound ) < nl > } < nl > < nl > def authorized [ R ] ( clientData : ClientData ) ( fa : AuthorizedClientData ⇒ Future [ RpcError \ / R ] ) ( implicit ec : ExecutionContext ) : Future [ RpcError \ / R ] = < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > index 909cef7 . . fba1336 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > @ @ - 18 , 7 + 18 , 7 @ @ import scala . util . control . NoStackTrace < nl > import scala . util . { Failure , Success } < nl > < nl > abstract class EntityNotFound ( msg : String = " " ) extends RuntimeException ( msg ) with NoStackTrace < nl > - case object EntityNotFound extends EntityNotFound ( " Entity not found " ) < nl > + case object EntityNotFoundError extends EntityNotFound ( " Entity not found " ) < nl > case object StopOffice < nl > < nl > trait ProcessorState < nl > @ @ - 34 , 7 + 34 , 7 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFuture < nl > < nl > protected def updatedState ( evt : Event , state : State ) : State < nl > < nl > - protected val notFoundError : EntityNotFound = EntityNotFound < nl > + protected val notFoundError : EntityNotFound = EntityNotFoundError < nl > < nl > protected def workWith ( es : immutable . Seq [ Event ] , state : State ) : State = { < nl > val newState = es . foldLeft ( state ) {

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala 
 index 432f9af . . 66cb42f 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / api / rpc . scala 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package im . actor . api 
 
 + import akka . http . scaladsl . util . FastFuture 
 import cats . data . Xor 
 import im . actor . server . CommonErrors 
 import im . actor . server . group . GroupErrors . GroupNotFound 
 @ @ - 68 , 7 + 69 , 7 @ @ package object rpc extends PeersImplicits with HistoryImplicits with DialogConve 
 } 
 
 private def toResult [ R ] ( authorizedFuture : MaybeAuthorized [ Future [ RpcError Xor R ] ] ) ( implicit ec : ExecutionContext ) : Future [ RpcError Xor R ] = 
 - recover ( authorizedFuture . getOrElse ( Future . successful ( Error ( CommonRpcErrors . UserNotAuthorized ) ) ) ) 
 + recover ( authorizedFuture . getOrElse ( FastFuture . successful ( Error ( CommonRpcErrors . UserNotAuthorized ) ) ) ) 
 
 private def recover [ A ] ( f : Future [ RpcError Xor A ] ) ( implicit ec : ExecutionContext ) : Future [ RpcError Xor A ] = f recover ( recoverCommon andThen { e ⇒ Error ( e ) } )

NEAREST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 index cce6d63 . . 44e8d36 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / BotExtension . scala 
 @ @ - 103 , 7 + 103 , 7 @ @ private [ bot ] final class BotExtension ( _ system : ActorSystem ) extends Extension { 
 * / 
 def exists ( userId : UserId ) : Future [ Boolean ] = { 
 userExt . getApiStruct ( userId , 0 , 0 ) map ( _ ⇒ true ) recover { 
 - case EntityNotFound ⇒ false 
 + case _ : EntityNotFound ⇒ false 
 } 
 } 
 
 diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 index fc63f1b . . e527519 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / InternalBot . scala 
 @ @ - 35 , 6 + 35 , 7 @ @ abstract class InternalBot ( userId : Int , nickname : String , name : String , isAdmin : 
 
 def receive = { 
 case Initialized ( authId , authSid ) ⇒ 
 + log . warning ( " Initialized bot { } { } { } " , userId , nickname , name ) 
 val bp = new BotServerBlueprint ( userId , authId , authSid , system ) 
 
 val rqSource = 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala b / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala 
 index dd596b4 . . ccef562 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 package im . actor . api 
 
 import im . actor . server . group . GroupErrors . GroupNotFound 
 - import im . actor . server . office . EntityNotFound 
 + import im . actor . server . office . EntityNotFoundError 
 import im . actor . server . user . UserErrors . UserNotFound 
 import slick . dbio . { DBIO , DBIOAction } 
 import slick . driver . PostgresDriver . api . _ 
 @ @ - 79 , 9 + 79 , 9 @ @ package object rpc extends { 
 
 def recover [ A ] ( f : Future [ \ / [ RpcError , A ] ] ) ( implicit ec : ExecutionContext ) : Future [ \ / [ RpcError , A ] ] = f recover recoverPF 
 def recoverPF [ A ] : PartialFunction [ Throwable , \ / [ RpcError , A ] ] = { 
 - case UserNotFound ( _ ) ⇒ Error ( CommonErrors . UserNotFound ) 
 - case GroupNotFound ( _ ) ⇒ Error ( CommonErrors . GroupNotFound ) 
 - case EntityNotFound ⇒ Error ( CommonErrors . EntityNotFound ) 
 + case UserNotFound ( _ ) ⇒ Error ( CommonErrors . UserNotFound ) 
 + case GroupNotFound ( _ ) ⇒ Error ( CommonErrors . GroupNotFound ) 
 + case EntityNotFoundError ⇒ Error ( CommonErrors . EntityNotFound ) 
 } 
 
 def authorized [ R ] ( clientData : ClientData ) ( fa : AuthorizedClientData ⇒ Future [ RpcError \ / R ] ) ( implicit ec : ExecutionContext ) : Future [ RpcError \ / R ] = 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 index 909cef7 . . fba1336 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 @ @ - 18 , 7 + 18 , 7 @ @ import scala . util . control . NoStackTrace 
 import scala . util . { Failure , Success } 
 
 abstract class EntityNotFound ( msg : String = " " ) extends RuntimeException ( msg ) with NoStackTrace 
 - case object EntityNotFound extends EntityNotFound ( " Entity not found " ) 
 + case object EntityNotFoundError extends EntityNotFound ( " Entity not found " ) 
 case object StopOffice 
 
 trait ProcessorState 
 @ @ - 34 , 7 + 34 , 7 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFuture 
 
 protected def updatedState ( evt : Event , state : State ) : State 
 
 - protected val notFoundError : EntityNotFound = EntityNotFound 
 + protected val notFoundError : EntityNotFound = EntityNotFoundError 
 
 protected def workWith ( es : immutable . Seq [ Event ] , state : State ) : State = { 
 val newState = es . foldLeft ( state ) {
