BLEU SCORE: 0.06195408628269127

TEST MSG: fix ( core ) : Separate AppState and GlobalState
GENERATED MSG: feat ( core + iOS ) : Fixing call state machine , better Call VM states

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > index 62448a1 . . f46a17e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > @ @ - 96 , 6 + 96 , 16 @ @ public class AndroidMessenger extends im . actor . core . Messenger { < nl > } < nl > } ) ; < nl > < nl > + / / Counters < nl > + modules . getAppStateModule ( ) . getGlobalStateVM ( ) . getGlobalCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { < nl > + @ Override < nl > + public void onChanged ( Integer val , Value < Integer > valueModel ) { < nl > + if ( val ! = null ) { < nl > + ShortcutBadger . with ( AndroidContext . getContext ( ) ) . count ( val ) ; < nl > + } < nl > + } < nl > + } ) ; < nl > + < nl > / / Catch network change < nl > context . registerReceiver ( new BroadcastReceiver ( ) { < nl > @ Override < nl > @ @ - 150 , 18 + 160 , 6 @ @ public class AndroidMessenger extends im . actor . core . Messenger { < nl > } < nl > } < nl > < nl > - @ Override < nl > - public void onLoggedIn ( ) { < nl > - modules . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { < nl > - @ Override < nl > - public void onChanged ( Integer val , Value < Integer > valueModel ) { < nl > - if ( val ! = null ) { < nl > - ShortcutBadger . with ( AndroidContext . getContext ( ) ) . count ( val ) ; < nl > - } < nl > - } < nl > - } ) ; < nl > - } < nl > - < nl > public Context getContext ( ) { < nl > return context ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > index 042066b . . 7c78673 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java < nl > @ @ - 100 , 7 + 100 , 7 @ @ public class JsMessenger extends Messenger { < nl > } < nl > < nl > if ( isElectron ) { < nl > - getAppState ( ) . getGlobalTempCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { < nl > + getGlobalState ( ) . getGlobalTempCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { < nl > @ Override < nl > public void onChanged ( Integer val , Value < Integer > valueModel ) { < nl > if ( val = = null | | val = = 0 ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > index 4840b8f . . 4234238 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java < nl > @ @ - 47 , 6 + 47 , 7 @ @ import im . actor . core . viewmodel . CallState ; < nl > import im . actor . core . viewmodel . CallVM ; < nl > import im . actor . core . viewmodel . DialogGroup ; < nl > import im . actor . core . viewmodel . DialogSmall ; < nl > + import im . actor . core . viewmodel . GlobalStateVM ; < nl > import im . actor . core . viewmodel . GroupTypingVM ; < nl > import im . actor . core . viewmodel . GroupVM ; < nl > import im . actor . core . viewmodel . UserPresence ; < nl > @ @ - 160 , 7 + 161 , 7 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > public JsBindedValue < String > getOnlineStatus ( ) { < nl > if ( onlineState = = null ) { < nl > < nl > - final AppStateVM vm = context ( ) . getAppStateModule ( ) . getAppStateVM ( ) ; < nl > + final GlobalStateVM vm = context ( ) . getAppStateModule ( ) . getGlobalStateVM ( ) ; < nl > onlineState = new JsBindedValue < > ( " online " ) ; < nl > < nl > vm . getIsConnecting ( ) . subscribe ( new ValueChangedListener < Boolean > ( ) { < nl > @ @ - 392 , 7 + 393 , 7 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > < nl > public JsBindedValue < JsCounter > getGlobalCounter ( ) { < nl > if ( globalCounter = = null ) { < nl > - ValueModel < Integer > counter = context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalCounter ( ) ; < nl > + ValueModel < Integer > counter = context ( ) . getAppStateModule ( ) . getGlobalStateVM ( ) . getGlobalCounter ( ) ; < nl > globalCounter = new JsBindedValue < > ( JsCounter . create ( counter . get ( ) ) ) ; < nl > counter . subscribe ( new ValueChangedListener < Integer > ( ) { < nl > @ Override < nl > @ @ - 406 , 7 + 407 , 7 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { < nl > < nl > public JsBindedValue < JsCounter > getTempGlobalCounter ( ) { < nl > if ( tempGlobalCounter = = null ) { < nl > - ValueModel < Integer > counter = context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalTempCounter ( ) ; < nl > + ValueModel < Integer > counter = context ( ) . getAppStateModule ( ) . getGlobalStateVM ( ) . getGlobalTempCounter ( ) ; < nl > tempGlobalCounter = new JsBindedValue < > ( JsCounter . create ( counter . get ( ) ) ) ; < nl > counter . subscribe ( new ValueChangedListener < Integer > ( ) { < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index cd999ce . . 5e97ea9 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 59 , 6 + 59 , 7 @ @ import im . actor . core . viewmodel . FileCallback ; < nl > import im . actor . core . viewmodel . FileEventCallback ; < nl > import im . actor . core . viewmodel . FileVM ; < nl > import im . actor . core . viewmodel . FileVMCallback ; < nl > + import im . actor . core . viewmodel . GlobalStateVM ; < nl > import im . actor . core . viewmodel . GroupAvatarVM ; < nl > import im . actor . core . viewmodel . GroupVM ; < nl > import im . actor . core . viewmodel . OwnAvatarVM ; < nl > @ @ - 391 , 6 + 392 , 17 @ @ public class Messenger { < nl > } < nl > < nl > / * * < nl > + * Get ViewModel of global application state < nl > + * < nl > + * @ return view model of application state < nl > + * / < nl > + @ NotNull < nl > + @ ObjectiveCName ( " getGlobalState " ) < nl > + public GlobalStateVM getGlobalState ( ) { < nl > + return modules . getAppStateModule ( ) . getGlobalStateVM ( ) ; < nl > + } < nl > + < nl > + / * * < nl > * Get authenticated User Id < nl > * < nl > * @ return current User Id < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java < nl > index 59830f1 . . d45ab71 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java < nl > @ @ - 101 , 6 + 101 , 9 @ @ public class Modules implements ModuleContext { < nl > timing . section ( " Events " ) ; < nl > this . events = new EventBus ( ) ; < nl > < nl > + timing . section ( " App State " ) ; < nl > + appStateModule = new AppStateModule ( this ) ; < nl > + < nl > timing . section ( " API " ) ; < nl > this . api = new ApiModule ( this ) ; < nl > < nl > @ @ - 131 , 7 + 134 , 7 @ @ public class Modules implements ModuleContext { < nl > timing . section ( " Groups " ) ; < nl > groups = new GroupsModule ( this ) ; < nl > timing . section ( " App State " ) ; < nl > - appStateModule = new AppStateModule ( this ) ; < nl > + appStateModule . run ( ) ; < nl > timing . section ( " Stickers " ) ; < nl > stickers = new StickersModule ( this ) ; < nl > timing . section ( " Calls " ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / AppStateModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / AppStateModule . java < nl > index 414e3e3 . . 98ffdac 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / AppStateModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / AppStateModule . java < nl > @ @ - 8 , 21 + 8 , 26 @ @ import im . actor . core . api . ApiAppCounters ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . viewmodel . AppStateVM ; < nl > + import im . actor . core . viewmodel . GlobalStateVM ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > < nl > import static im . actor . runtime . actors . ActorSystem . system ; < nl > < nl > public class AppStateModule extends AbsModule { < nl > + < nl > private AppStateVM appStateVM ; < nl > + private GlobalStateVM globalStateVM ; < nl > private ActorRef listStatesActor ; < nl > < nl > public AppStateModule ( ModuleContext context ) { < nl > super ( context ) ; < nl > - this . appStateVM = new AppStateVM ( context ) ; < nl > + < nl > + globalStateVM = new GlobalStateVM ( context ) ; < nl > } < nl > < nl > public void run ( ) { < nl > + this . appStateVM = new AppStateVM ( context ( ) ) ; < nl > listStatesActor = system ( ) . actorOf ( " actor / app / state " , new ActorCreator ( ) { < nl > @ Override < nl > public ListsStatesActor create ( ) { < nl > @ @ - 51 , 14 + 56 , 14 @ @ public class AppStateModule extends AbsModule { < nl > listStatesActor . send ( new ListsStatesActor . OnDialogsLoaded ( ) ) ; < nl > } < nl > < nl > - public void onCountersChanged ( ApiAppCounters counters ) { < nl > - listStatesActor . send ( new ListsStatesActor . OnAppCounterChanged ( counters ) ) ; < nl > - } < nl > - < nl > public AppStateVM getAppStateVM ( ) { < nl > return appStateVM ; < nl > } < nl > < nl > + public GlobalStateVM getGlobalStateVM ( ) { < nl > + return globalStateVM ; < nl > + } < nl > + < nl > public void resetModule ( ) { < nl > / / TODO : Implement < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / ListsStatesActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / ListsStatesActor . java < nl > index 5bf3088 . . b035323 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / ListsStatesActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / ListsStatesActor . java < nl > @ @ - 4 , 57 + 4 , 15 @ @ < nl > < nl > package im . actor . core . modules . misc ; < nl > < nl > - import java . io . IOException ; < nl > - < nl > - import im . actor . core . api . ApiAppCounters ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . ModuleActor ; < nl > - import im . actor . runtime . bser . BserParser ; < nl > - import im . actor . runtime . bser . BserValues ; < nl > - import im . actor . runtime . bser . DataInput ; < nl > < nl > public class ListsStatesActor extends ModuleActor { < nl > < nl > - private ApiAppCounters counters ; < nl > - < nl > public ListsStatesActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > } < nl > < nl > - @ Override < nl > - public void preStart ( ) { < nl > - super . preStart ( ) ; < nl > - < nl > - counters = new ApiAppCounters ( ) ; < nl > - byte [ ] data = preferences ( ) . getBytes ( " app . counter _ raw " ) ; < nl > - if ( data ! = null ) { < nl > - try { < nl > - ApiAppCounters nCounters = new ApiAppCounters ( ) ; < nl > - nCounters . parse ( new BserValues ( BserParser . deserialize ( new DataInput ( data ) ) ) ) ; < nl > - counters = nCounters ; < nl > - } catch ( IOException e ) { < nl > - e . printStackTrace ( ) ; < nl > - } < nl > - } < nl > - < nl > - Integer counter = counters . getGlobalCounter ( ) ; < nl > - if ( counter ! = null ) { < nl > - context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . onGlobalCounterChanged ( counter ) ; < nl > - } else { < nl > - context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . onGlobalCounterChanged ( 0 ) ; < nl > - } < nl > - } < nl > - < nl > - public void onCounterChanged ( ApiAppCounters counters ) { < nl > - preferences ( ) . putBytes ( " app . counter _ raw " , counters . toByteArray ( ) ) ; < nl > - Integer counter = counters . getGlobalCounter ( ) ; < nl > - if ( counter ! = null ) { < nl > - context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . onGlobalCounterChanged ( counter ) ; < nl > - } else { < nl > - context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . onGlobalCounterChanged ( 0 ) ; < nl > - } < nl > - } < nl > - < nl > public void onDialogsChanged ( boolean isEmpty ) { < nl > context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . onDialogsChanged ( isEmpty ) ; < nl > } < nl > @ @ - 87 , 25 + 45 , 11 @ @ public class ListsStatesActor extends ModuleActor { < nl > onContactsLoaded ( ) ; < nl > } else if ( message instanceof OnDialogsLoaded ) { < nl > onDialogsLoaded ( ) ; < nl > - } else if ( message instanceof OnAppCounterChanged ) { < nl > - onCounterChanged ( ( ( OnAppCounterChanged ) message ) . getCounters ( ) ) ; < nl > } else { < nl > drop ( message ) ; < nl > } < nl > } < nl > < nl > - public static class OnAppCounterChanged { < nl > - private ApiAppCounters counters ; < nl > - < nl > - public OnAppCounterChanged ( ApiAppCounters counters ) { < nl > - this . counters = counters ; < nl > - } < nl > - < nl > - public ApiAppCounters getCounters ( ) { < nl > - return counters ; < nl > - } < nl > - } < nl > - < nl > public static class OnBookImported { < nl > < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / AppStateVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / AppStateVM . java < nl > index 3343e5d . . 2442b06 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / AppStateVM . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / AppStateVM . java < nl > @ @ - 21 , 8 + 21 , 6 @ @ public class AppStateVM { < nl > @ Property ( " nonatomic , readonly " ) < nl > private ModuleContext context ; < nl > @ Property ( " nonatomic , readonly " ) < nl > - private BooleanValueModel isAppVisible ; < nl > - @ Property ( " nonatomic , readonly " ) < nl > private BooleanValueModel isDialogsEmpty ; < nl > @ Property ( " nonatomic , readonly " ) < nl > private BooleanValueModel isContactsEmpty ; < nl > @ @ - 30 , 14 + 28 , 6 @ @ public class AppStateVM { < nl > private BooleanValueModel isAppEmpty ; < nl > @ Property ( " nonatomic , readonly " ) < nl > private BooleanValueModel isAppLoaded ; < nl > - @ Property ( " nonatomic , readonly " ) < nl > - private BooleanValueModel isConnecting ; < nl > - @ Property ( " nonatomic , readonly " ) < nl > - private BooleanValueModel isSyncing ; < nl > - @ Property ( " nonatomic , readonly " ) < nl > - private IntValueModel globalCounter ; < nl > - @ Property ( " nonatomic , readonly " ) < nl > - private IntValueModel globalTempCounter ; < nl > < nl > private boolean isBookImported ; < nl > private boolean isDialogsLoaded ; < nl > @ @ - 53 , 38 + 43 , 12 @ @ public class AppStateVM { < nl > this . isDialogsEmpty = new BooleanValueModel ( " app . dialogs . empty " , context . getPreferences ( ) . getBool ( " app . dialogs . empty " , true ) ) ; < nl > this . isContactsEmpty = new BooleanValueModel ( " app . contacts . empty " , context . getPreferences ( ) . getBool ( " app . contacts . empty " , true ) ) ; < nl > this . isAppEmpty = new BooleanValueModel ( " app . empty " , context . getPreferences ( ) . getBool ( " app . empty " , true ) ) ; < nl > - this . globalCounter = new IntValueModel ( " app . counter " , null ) ; < nl > - this . globalTempCounter = new IntValueModel ( " app . temp _ counter " , 0 ) ; < nl > - this . isConnecting = new BooleanValueModel ( " app . connecting " , false ) ; < nl > - this . isSyncing = new BooleanValueModel ( " app . syncing " , false ) ; < nl > - this . isAppVisible = new BooleanValueModel ( " app . visible " , false ) ; < nl > < nl > this . isBookImported = context . getPreferences ( ) . getBool ( " app . contacts . imported " , false ) ; < nl > this . isDialogsLoaded = context . getPreferences ( ) . getBool ( " app . dialogs . loaded " , false ) ; < nl > this . isContactsLoaded = context . getPreferences ( ) . getBool ( " app . contacts . loaded " , false ) ; < nl > < nl > this . isAppLoaded = new BooleanValueModel ( " app . loaded " , isBookImported & & isDialogsLoaded & & isContactsLoaded ) ; < nl > - < nl > - context . getEvents ( ) . subscribe ( new BusSubscriber ( ) { < nl > - @ Override < nl > - public void onBusEvent ( Event event ) { < nl > - if ( event instanceof AppVisibleChanged ) { < nl > - if ( ( ( AppVisibleChanged ) event ) . isVisible ( ) ) { < nl > - isAppVisible . change ( true ) ; < nl > - globalTempCounter . change ( 0 ) ; < nl > - } else { < nl > - isAppVisible . change ( false ) ; < nl > - } < nl > - } < nl > - } < nl > - } , AppVisibleChanged . EVENT ) ; < nl > - < nl > - context . getEvents ( ) . subscribe ( new BusSubscriber ( ) { < nl > - @ Override < nl > - public void onBusEvent ( Event event ) { < nl > - isConnecting . change ( ( ( ConnectingStateChanged ) event ) . isConnecting ( ) ) ; < nl > - } < nl > - } , ConnectingStateChanged . EVENT ) ; < nl > } < nl > < nl > private void updateLoaded ( ) { < nl > @ @ - 94 , 17 + 58 , 6 @ @ public class AppStateVM { < nl > } < nl > } < nl > < nl > - / * * < nl > - * Notify from Modules about global counters changed < nl > - * < nl > - * @ param value current value of global counter < nl > - * / < nl > - public synchronized void onGlobalCounterChanged ( int value ) { < nl > - globalCounter . change ( value ) ; < nl > - if ( ! isAppVisible . get ( ) ) { < nl > - globalTempCounter . change ( value ) ; < nl > - } < nl > - } < nl > < nl > / * * < nl > * Notify from Modules about dialogs state changed < nl > @ @ - 211 , 49 + 164 , 4 @ @ public class AppStateVM { < nl > return isAppEmpty ; < nl > } < nl > < nl > - / * * < nl > - * Is syncing in progress < nl > - * < nl > - * @ return View Model of Boolean < nl > - * / < nl > - public BooleanValueModel getIsSyncing ( ) { < nl > - return isSyncing ; < nl > - } < nl > - < nl > - / * * < nl > - * Is Connecting in progress < nl > - * < nl > - * @ return View Model of Boolean < nl > - * / < nl > - public BooleanValueModel getIsConnecting ( ) { < nl > - return isConnecting ; < nl > - } < nl > - < nl > - < nl > - / * * < nl > - * Gettting global unread counter < nl > - * < nl > - * @ return View Model of Integer < nl > - * / < nl > - public IntValueModel getGlobalCounter ( ) { < nl > - return globalCounter ; < nl > - } < nl > - < nl > - / * * < nl > - * Getting global unread counter that hiddes when app is opened < nl > - * < nl > - * @ return View Model of Integer < nl > - * / < nl > - public IntValueModel getGlobalTempCounter ( ) { < nl > - return globalTempCounter ; < nl > - } < nl > - < nl > - / * * < nl > - * Is App visible state < nl > - * < nl > - * @ return View Model of Boolean < nl > - * / < nl > - public BooleanValueModel getIsAppVisible ( ) { < nl > - return isAppVisible ; < nl > - } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / GlobalStateVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / GlobalStateVM . java < nl > new file mode 100644 < nl > index 0000000 . . 55a2e5b < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / GlobalStateVM . java < nl > @ @ - 0 , 0 + 1 , 113 @ @ < nl > + package im . actor . core . viewmodel ; < nl > + < nl > + import com . google . j2objc . annotations . Property ; < nl > + < nl > + import im . actor . core . events . AppVisibleChanged ; < nl > + import im . actor . core . events . ConnectingStateChanged ; < nl > + import im . actor . core . modules . ModuleContext ; < nl > + import im . actor . core . viewmodel . generics . BooleanValueModel ; < nl > + import im . actor . core . viewmodel . generics . IntValueModel ; < nl > + import im . actor . runtime . eventbus . BusSubscriber ; < nl > + import im . actor . runtime . eventbus . Event ; < nl > + < nl > + public class GlobalStateVM { < nl > + < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private BooleanValueModel isAppVisible ; < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private BooleanValueModel isConnecting ; < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private BooleanValueModel isSyncing ; < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private IntValueModel globalCounter ; < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private IntValueModel globalTempCounter ; < nl > + < nl > + public GlobalStateVM ( ModuleContext context ) { < nl > + this . isAppVisible = new BooleanValueModel ( " app . visible " , false ) ; < nl > + this . globalCounter = new IntValueModel ( " app . counter " , null ) ; < nl > + this . globalTempCounter = new IntValueModel ( " app . temp _ counter " , 0 ) ; < nl > + this . isConnecting = new BooleanValueModel ( " app . connecting " , false ) ; < nl > + this . isSyncing = new BooleanValueModel ( " app . syncing " , false ) ; < nl > + < nl > + context . getEvents ( ) . subscribe ( new BusSubscriber ( ) { < nl > + @ Override < nl > + public void onBusEvent ( Event event ) { < nl > + if ( event instanceof AppVisibleChanged ) { < nl > + if ( ( ( AppVisibleChanged ) event ) . isVisible ( ) ) { < nl > + isAppVisible . change ( true ) ; < nl > + globalTempCounter . change ( 0 ) ; < nl > + } else { < nl > + isAppVisible . change ( false ) ; < nl > + } < nl > + } < nl > + } < nl > + } , AppVisibleChanged . EVENT ) ; < nl > + < nl > + context . getEvents ( ) . subscribe ( new BusSubscriber ( ) { < nl > + @ Override < nl > + public void onBusEvent ( Event event ) { < nl > + isConnecting . change ( ( ( ConnectingStateChanged ) event ) . isConnecting ( ) ) ; < nl > + } < nl > + } , ConnectingStateChanged . EVENT ) ; < nl > + } < nl > + < nl > + < nl > + / * * < nl > + * Notify from Modules about global counters changed < nl > + * < nl > + * @ param value current value of global counter < nl > + * / < nl > + public synchronized void onGlobalCounterChanged ( int value ) { < nl > + globalCounter . change ( value ) ; < nl > + if ( ! isAppVisible . get ( ) ) { < nl > + globalTempCounter . change ( value ) ; < nl > + } < nl > + } < nl > + < nl > + / * * < nl > + * Is syncing in progress < nl > + * < nl > + * @ return View Model of Boolean < nl > + * / < nl > + public BooleanValueModel getIsSyncing ( ) { < nl > + return isSyncing ; < nl > + } < nl > + < nl > + / * * < nl > + * Is Connecting in progress < nl > + * < nl > + * @ return View Model of Boolean < nl > + * / < nl > + public BooleanValueModel getIsConnecting ( ) { < nl > + return isConnecting ; < nl > + } < nl > + < nl > + < nl > + / * * < nl > + * Gettting global unread counter < nl > + * < nl > + * @ return View Model of Integer < nl > + * / < nl > + public IntValueModel getGlobalCounter ( ) { < nl > + return globalCounter ; < nl > + } < nl > + < nl > + / * * < nl > + * Getting global unread counter that resets when app is opened < nl > + * < nl > + * @ return View Model of Integer < nl > + * / < nl > + public IntValueModel getGlobalTempCounter ( ) { < nl > + return globalTempCounter ; < nl > + } < nl > + < nl > + / * * < nl > + * Is App visible state < nl > + * < nl > + * @ return View Model of Boolean < nl > + * / < nl > + public BooleanValueModel getIsAppVisible ( ) { < nl > + return isAppVisible ; < nl > + } < nl > + }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > index 3bc6444 . . d6c14d7 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift < nl > @ @ - 24 , 6 + 24 , 7 @ @ public class AACallViewController : AAViewController { < nl > public let videoButton = AACircleButton ( size : 72 ) < nl > < nl > var isScheduledDispose = false < nl > + var timer : NSTimer ? < nl > < nl > public init ( callId : jlong ) { < nl > self . callId = callId < nl > @ @ - 172 , 10 + 173 , 10 @ @ public class AACallViewController : AAViewController { < nl > self . answerCallButtonText . hidden = true < nl > self . declineCallButton . hidden = false < nl > self . declineCallButtonText . hidden = true < nl > - self . callState . text = " 0 : 00 " < nl > + self . startTimer ( ) < nl > self . layoutButtons ( ) < nl > } else if ( ACCallState _ Enum . ENDED = = value . toNSEnum ( ) ) { < nl > - self . callState . text = " Call Ended " < nl > + self . stopTimer ( ) < nl > self . muteButton . hidden = true < nl > self . speakerButton . hidden = true < nl > self . videoButton . hidden = true < nl > @ @ - 230 , 6 + 231 , 33 @ @ public class AACallViewController : AAViewController { < nl > UIDevice . currentDevice ( ) . proximityMonitoringEnabled = true < nl > } < nl > < nl > + func startTimer ( ) { < nl > + timer ? . invalidate ( ) < nl > + timer = NSTimer . scheduledTimerWithTimeInterval ( 1 . 0 , target : self , selector : " updateTimer " , userInfo : nil , repeats : true ) < nl > + updateTimer ( ) < nl > + } < nl > + < nl > + func updateTimer ( ) { < nl > + if call . callStart > 0 { < nl > + let end = call . callEnd > 0 ? call . callEnd : jlong ( NSDate ( ) . timeIntervalSince1970 * 1000 ) < nl > + let secs = Int ( ( end - call . callStart ) / 1000 ) < nl > + < nl > + let seconds = secs % 60 < nl > + let minutes = secs / 60 < nl > + < nl > + self . callState . text = NSString ( format : " % 0 . 2d : % 0 . 2d " , minutes , seconds ) as String < nl > + } else { < nl > + self . callState . text = " 0 : 00 " < nl > + } < nl > + } < nl > + < nl > + func stopTimer ( ) { < nl > + timer ? . invalidate ( ) < nl > + timer = nil < nl > + updateTimer ( ) < nl > + / / self . callState . text = " Call Ended " < nl > + } < nl > + < nl > public override func viewWillDisappear ( animated : Bool ) { < nl > super . viewWillDisappear ( animated ) < nl > UIDevice . currentDevice ( ) . proximityMonitoringEnabled = false < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index 5ff7abf . . b60d213 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 25 , 7 + 25 , 7 @ @ public class CallActor extends AbsCallActor { < nl > private CallVM callVM ; < nl > private CommandCallback < Long > callback ; < nl > < nl > - private boolean isConnected ; < nl > + private boolean isActive ; < nl > private boolean isAnswered ; < nl > private boolean isRejected ; < nl > < nl > @ @ - 34 , 7 + 34 , 7 @ @ public class CallActor extends AbsCallActor { < nl > this . isMaster = false ; < nl > this . callId = callId ; < nl > this . isAnswered = false ; < nl > - this . isConnected = false ; < nl > + this . isActive = false ; < nl > } < nl > < nl > public CallActor ( Peer peer , CommandCallback < Long > callback , ModuleContext context ) { < nl > @ @ - 43 , 7 + 43 , 7 @ @ public class CallActor extends AbsCallActor { < nl > this . callback = callback ; < nl > this . peer = peer ; < nl > this . isAnswered = true ; < nl > - this . isConnected = false ; < nl > + this . isActive = false ; < nl > } < nl > < nl > @ Override < nl > @ @ - 92 , 6 + 92 , 25 @ @ public class CallActor extends AbsCallActor { < nl > } < nl > } < nl > < nl > + @ Override < nl > + public void onCallConnected ( ) { < nl > + / / callVM . getState ( ) . change ( ) < nl > + } < nl > + < nl > + @ Override < nl > + public void onCallEnabled ( ) { < nl > + isActive = true ; < nl > + if ( isAnswered ) { < nl > + callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; < nl > + callVM . setCallStart ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onBusStopped ( ) { < nl > + self ( ) . send ( PoisonPill . INSTANCE ) ; < nl > + } < nl > + < nl > < nl > @ Override < nl > public void onMuteChanged ( boolean isMuted ) { < nl > @ @ - 103 , 8 + 122 , 10 @ @ public class CallActor extends AbsCallActor { < nl > if ( ! isAnswered & & ! isRejected ) { < nl > isAnswered = true ; < nl > request ( new RequestJoinCall ( callId ) ) ; < nl > - if ( isConnected ) { < nl > + < nl > + if ( isActive ) { < nl > callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; < nl > + callVM . setCallStart ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; < nl > } else { < nl > callVM . getState ( ) . change ( CallState . CONNECTING ) ; < nl > } < nl > @ @ - 123 , 8 + 144 , 12 @ @ public class CallActor extends AbsCallActor { < nl > super . postStop ( ) ; < nl > if ( callVM ! = null ) { < nl > callVM . getState ( ) . change ( CallState . ENDED ) ; < nl > + callVM . setCallEnd ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; < nl > } < nl > callBus . kill ( ) ; < nl > + if ( callId ! = 0 ) { < nl > + callManager . send ( new CallManagerActor . OnCallEnded ( callId ) , self ( ) ) ; < nl > + } < nl > } < nl > < nl > / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java < nl > index af1c090 . . ed9d3a8 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java < nl > @ @ - 75 , 5 + 75 , 35 @ @ public abstract class AbsCallActor extends ModuleActor implements CallBusCallbac < nl > } < nl > } ) ; < nl > } < nl > + < nl > + @ Override < nl > + public void onCallConnected ( ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + AbsCallActor . this . onCallConnected ( ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onCallEnabled ( ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + AbsCallActor . this . onCallEnabled ( ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onBusStopped ( ) { < nl > + self ( ) . send ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + AbsCallActor . this . onBusStopped ( ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java < nl > index a80879d . . 025cf33 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java < nl > @ @ - 33 , 6 + 33 , 8 @ @ public class CallBusActor extends EventBusActor implements PeerCallCallback { < nl > private boolean isMasterReady ; < nl > private long masterDeviceId ; < nl > private PeerCallInt peerCall ; < nl > + private boolean isConnected = false ; < nl > + private boolean isEnabled = false ; < nl > < nl > public CallBusActor ( final CallBusCallback callBusCallback , PeerSettings selfSettings , ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 93 , 7 + 95 , 14 @ @ public class CallBusActor extends EventBusActor implements PeerCallCallback { < nl > < nl > @ Override < nl > public void onPeerStateChanged ( long deviceId , PeerState state ) { < nl > - < nl > + if ( state = = PeerState . CONNECTED & & ! isConnected & & ! isEnabled ) { < nl > + isConnected = true ; < nl > + callBusCallback . onCallConnected ( ) ; < nl > + } < nl > + if ( state = = PeerState . ACTIVE & & ! isEnabled ) { < nl > + isEnabled = true ; < nl > + callBusCallback . onCallEnabled ( ) ; < nl > + } < nl > } < nl > < nl > @ Override < nl > @ @ - 199 , 6 + 208 , 16 @ @ public class CallBusActor extends EventBusActor implements PeerCallCallback { < nl > } < nl > < nl > @ Override < nl > + public void postStop ( ) { < nl > + super . postStop ( ) ; < nl > + if ( peerCall ! = null ) { < nl > + peerCall . kill ( ) ; < nl > + peerCall = null ; < nl > + } < nl > + callBusCallback . onBusStopped ( ) ; < nl > + } < nl > + < nl > + @ Override < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof JoinBus ) { < nl > joinBus ( ( ( JoinBus ) message ) . getBusId ( ) ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java < nl > index 13c8489 . . e26bff1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java < nl > @ @ - 1 , 6 + 1 , 12 @ @ < nl > package im . actor . core . modules . calls . peers ; < nl > < nl > public interface CallBusCallback { < nl > - < nl > + < nl > void onBusStarted ( String busId ) ; < nl > + < nl > + void onCallConnected ( ) ; < nl > + < nl > + void onCallEnabled ( ) ; < nl > + < nl > + void onBusStopped ( ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > index 3100d73 . . 090d9df 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java < nl > @ @ - 121 , 6 + 121 , 10 @ @ public class PeerCallActor extends ModuleActor { < nl > d . kill ( ) ; < nl > } < nl > refs . clear ( ) ; < nl > + if ( webRTCMediaStream ! = null ) { < nl > + webRTCMediaStream . setEnabled ( false ) ; < nl > + webRTCMediaStream . close ( ) ; < nl > + } < nl > } < nl > < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java < nl > index d2d7a44 . . 6b6cd76 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java < nl > @ @ - 47 , 7 + 47 , 6 @ @ public class PeerConnectionActor extends ModuleActor { < nl > < nl > @ NotNull < nl > private WebRTCPeerConnection peerConnection ; < nl > - private SDPOptimizer sdpOptimizer ; < nl > private boolean isReady = false ; < nl > private boolean isReadyForCandidates = false ; < nl > @ NotNull < nl > @ @ - 62 , 7 + 61 , 6 @ @ public class PeerConnectionActor extends ModuleActor { < nl > this . TAG = " PeerConnection " ; < nl > this . callback = callback ; < nl > this . stream = mediaStream ; < nl > - this . sdpOptimizer = new SDPOptimizer ( selfSettings , theirSettings ) ; < nl > } < nl > < nl > @ Override < nl > @ @ - 136 , 7 + 134 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > / / < nl > < nl > isReady = false ; < nl > - peerConnection . createOffer ( ) . map ( OPTIMIZE _ OWN _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > + peerConnection . createOffer ( ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > @ Override < nl > public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > return peerConnection . setLocalDescription ( description ) ; < nl > @ @ - 178 , 7 + 176 , 7 @ @ public class PeerConnectionActor extends ModuleActor { < nl > public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > return peerConnection . createAnswer ( ) ; < nl > } < nl > - } ) . map ( OPTIMIZE _ OWN _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > + } ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { < nl > @ Override < nl > public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { < nl > return peerConnection . setLocalDescription ( description ) ; < nl > @ @ - 265 , 28 + 263 , 6 @ @ public class PeerConnectionActor extends ModuleActor { < nl > } < nl > < nl > / / < nl > - / / Configuration < nl > - / / < nl > - < nl > - private Function < WebRTCSessionDescription , WebRTCSessionDescription > OPTIMIZE _ OWN _ SDP < nl > - = new Function < WebRTCSessionDescription , WebRTCSessionDescription > ( ) { < nl > - @ Override < nl > - public WebRTCSessionDescription apply ( WebRTCSessionDescription description ) { < nl > - return new WebRTCSessionDescription ( description . getType ( ) , < nl > - sdpOptimizer . optimizeOwnSDP ( description . getSdp ( ) ) ) ; < nl > - } < nl > - } ; < nl > - < nl > - private Function < WebRTCSessionDescription , WebRTCSessionDescription > OPTIMIZE _ THEIR _ SDP < nl > - = new Function < WebRTCSessionDescription , WebRTCSessionDescription > ( ) { < nl > - @ Override < nl > - public WebRTCSessionDescription apply ( WebRTCSessionDescription description ) { < nl > - return new WebRTCSessionDescription ( description . getType ( ) , < nl > - sdpOptimizer . optimizeTheirSDP ( description . getSdp ( ) ) ) ; < nl > - } < nl > - } ; < nl > - < nl > - / / < nl > / / Messages < nl > / / < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / SDPOptimizer . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / SDPOptimizer . java < nl > deleted file mode 100644 < nl > index 38280f4 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / SDPOptimizer . java < nl > + + + / dev / null < nl > @ @ - 1 , 42 + 0 , 0 @ @ < nl > - package im . actor . core . modules . calls . peers ; < nl > - < nl > - public class SDPOptimizer { < nl > - < nl > - private final PeerSettings ownSettings ; < nl > - private final PeerSettings theirSettings ; < nl > - < nl > - public SDPOptimizer ( PeerSettings ownSettings , PeerSettings theirSettings ) { < nl > - this . ownSettings = ownSettings ; < nl > - this . theirSettings = theirSettings ; < nl > - } < nl > - < nl > - public String optimizeOwnSDP ( String sdp ) { < nl > - / / SDPScheme sdpScheme = SDP . parse ( description . getSdp ( ) ) ; < nl > - / / < nl > - / / for ( SDPMedia m : sdpScheme . getMediaLevel ( ) ) { < nl > - / / < nl > - / / / / Disabling media streams < nl > - / / / / m . setMode ( SDPMediaMode . INACTIVE ) ; < nl > - / / < nl > - / / / / Optimizing opus < nl > - / / if ( " audio " . equals ( m . getType ( ) ) ) { < nl > - / / for ( SDPCodec codec : m . getCodecs ( ) ) { < nl > - / / if ( " opus " . equals ( codec . getName ( ) ) ) { < nl > - / / codec . getFormat ( ) . put ( " maxcodedaudiobandwidth " , " 16000 " ) ; < nl > - / / codec . getFormat ( ) . put ( " maxaveragebitrate " , " 20000 " ) ; < nl > - / / codec . getFormat ( ) . put ( " stereo " , " 0 " ) ; < nl > - / / codec . getFormat ( ) . put ( " useinbandfec " , " 1 " ) ; < nl > - / / codec . getFormat ( ) . put ( " usedtx " , " 1 " ) ; < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / } < nl > - / / < nl > - / / return new WebRTCSessionDescription ( description . getType ( ) , sdpScheme . toSDP ( ) ) ; < nl > - return sdp ; < nl > - } < nl > - < nl > - public String optimizeTheirSDP ( String sdp ) { < nl > - return sdp ; < nl > - } < nl > - } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java < nl > index 39d1bb1 . . 1d52dec 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java < nl > @ @ - 6 , 7 + 6 , 11 @ @ import java . util . ArrayList ; < nl > < nl > import im . actor . core . entity . Peer ; < nl > import im . actor . core . viewmodel . generics . BooleanValueModel ; < nl > + import im . actor . core . viewmodel . generics . IntValueModel ; < nl > + import im . actor . runtime . * ; < nl > + import im . actor . runtime . actors . ActorTime ; < nl > import im . actor . runtime . mvvm . ValueModel ; < nl > + import im . actor . runtime . threading . CommonTimer ; < nl > < nl > public class CallVM { < nl > < nl > @ @ - 21 , 8 + 25 , 14 @ @ public class CallVM { < nl > @ Property ( " nonatomic , readonly " ) < nl > private final BooleanValueModel isMuted ; < nl > @ Property ( " nonatomic , readonly " ) < nl > + private long callStart ; < nl > + @ Property ( " nonatomic , readonly " ) < nl > + private long callEnd ; < nl > + @ Property ( " nonatomic , readonly " ) < nl > private final boolean isOutgoing ; < nl > < nl > + private CommonTimer presenceTimer ; < nl > + < nl > public CallVM ( long callId , Peer peer , boolean isOutgoing , ArrayList < CallMember > initialMembers , CallState state ) { < nl > this . callId = callId ; < nl > this . peer = peer ; < nl > @ @ - 30 , 6 + 40 , 7 @ @ public class CallVM { < nl > this . state = new ValueModel < > ( " calls . " + callId + " . state " , state ) ; < nl > this . members = new ValueModel < > ( " calls . " + callId + " . members " , new ArrayList < > ( initialMembers ) ) ; < nl > this . isMuted = new BooleanValueModel ( " calls . " + callId + " . state " , false ) ; < nl > + this . callStart = 0 ; < nl > } < nl > < nl > public boolean isOutgoing ( ) { < nl > @ @ - 55 , 4 + 66 , 20 @ @ public class CallVM { < nl > public ValueModel < ArrayList < CallMember > > getMembers ( ) { < nl > return members ; < nl > } < nl > + < nl > + public void setCallStart ( long callStart ) { < nl > + this . callStart = callStart ; < nl > + } < nl > + < nl > + public long getCallStart ( ) { < nl > + return callStart ; < nl > + } < nl > + < nl > + public long getCallEnd ( ) { < nl > + return callEnd ; < nl > + } < nl > + < nl > + public void setCallEnd ( long callEnd ) { < nl > + this . callEnd = callEnd ; < nl > + } < nl > } < nl > \ No newline at end of file < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java < nl > index d76d8fe . . ac273fe 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java < nl > @ @ - 16 , 16 + 16 , 21 @ @ public class CommonTimer { < nl > return new Actor ( ) ; < nl > } < nl > } ) ; < nl > - private static final Scheduler COMMON _ SCHEDULER = new Scheduler ( COMMON _ TIMER _ ACTOR ) ; < nl > + private static final Scheduler COMMON _ SCHEDULER = new Scheduler ( COMMON _ TIMER _ ACTOR ) ; < nl > < nl > private final Runnable runnable ; < nl > private Cancellable lastSchedule ; < nl > + private boolean isDisposed ; < nl > < nl > public CommonTimer ( Runnable runnable ) { < nl > this . runnable = runnable ; < nl > } < nl > < nl > public void schedule ( long time ) { < nl > + if ( isDisposed ) { < nl > + return ; < nl > + } < nl > + < nl > if ( lastSchedule ! = null ) { < nl > lastSchedule . cancel ( ) ; < nl > } < nl > @ @ - 38 , 4 + 43 , 9 @ @ public class CommonTimer { < nl > lastSchedule . cancel ( ) ; < nl > } < nl > } < nl > + < nl > + public void dispose ( ) { < nl > + isDisposed = true ; < nl > + cancel ( ) ; < nl > + } < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 index 62448a1 . . f46a17e 100644 
 - - - a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 @ @ - 96 , 6 + 96 , 16 @ @ public class AndroidMessenger extends im . actor . core . Messenger { 
 } 
 } ) ; 
 
 + / / Counters 
 + modules . getAppStateModule ( ) . getGlobalStateVM ( ) . getGlobalCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { 
 + @ Override 
 + public void onChanged ( Integer val , Value < Integer > valueModel ) { 
 + if ( val ! = null ) { 
 + ShortcutBadger . with ( AndroidContext . getContext ( ) ) . count ( val ) ; 
 + } 
 + } 
 + } ) ; 
 + 
 / / Catch network change 
 context . registerReceiver ( new BroadcastReceiver ( ) { 
 @ Override 
 @ @ - 150 , 18 + 160 , 6 @ @ public class AndroidMessenger extends im . actor . core . Messenger { 
 } 
 } 
 
 - @ Override 
 - public void onLoggedIn ( ) { 
 - modules . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { 
 - @ Override 
 - public void onChanged ( Integer val , Value < Integer > valueModel ) { 
 - if ( val ! = null ) { 
 - ShortcutBadger . with ( AndroidContext . getContext ( ) ) . count ( val ) ; 
 - } 
 - } 
 - } ) ; 
 - } 
 - 
 public Context getContext ( ) { 
 return context ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 index 042066b . . 7c78673 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsMessenger . java 
 @ @ - 100 , 7 + 100 , 7 @ @ public class JsMessenger extends Messenger { 
 } 
 
 if ( isElectron ) { 
 - getAppState ( ) . getGlobalTempCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { 
 + getGlobalState ( ) . getGlobalTempCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { 
 @ Override 
 public void onChanged ( Integer val , Value < Integer > valueModel ) { 
 if ( val = = null | | val = = 0 ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 index 4840b8f . . 4234238 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / modules / JsBindingModule . java 
 @ @ - 47 , 6 + 47 , 7 @ @ import im . actor . core . viewmodel . CallState ; 
 import im . actor . core . viewmodel . CallVM ; 
 import im . actor . core . viewmodel . DialogGroup ; 
 import im . actor . core . viewmodel . DialogSmall ; 
 + import im . actor . core . viewmodel . GlobalStateVM ; 
 import im . actor . core . viewmodel . GroupTypingVM ; 
 import im . actor . core . viewmodel . GroupVM ; 
 import im . actor . core . viewmodel . UserPresence ; 
 @ @ - 160 , 7 + 161 , 7 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 public JsBindedValue < String > getOnlineStatus ( ) { 
 if ( onlineState = = null ) { 
 
 - final AppStateVM vm = context ( ) . getAppStateModule ( ) . getAppStateVM ( ) ; 
 + final GlobalStateVM vm = context ( ) . getAppStateModule ( ) . getGlobalStateVM ( ) ; 
 onlineState = new JsBindedValue < > ( " online " ) ; 
 
 vm . getIsConnecting ( ) . subscribe ( new ValueChangedListener < Boolean > ( ) { 
 @ @ - 392 , 7 + 393 , 7 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 
 public JsBindedValue < JsCounter > getGlobalCounter ( ) { 
 if ( globalCounter = = null ) { 
 - ValueModel < Integer > counter = context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalCounter ( ) ; 
 + ValueModel < Integer > counter = context ( ) . getAppStateModule ( ) . getGlobalStateVM ( ) . getGlobalCounter ( ) ; 
 globalCounter = new JsBindedValue < > ( JsCounter . create ( counter . get ( ) ) ) ; 
 counter . subscribe ( new ValueChangedListener < Integer > ( ) { 
 @ Override 
 @ @ - 406 , 7 + 407 , 7 @ @ public class JsBindingModule extends AbsModule implements JsFileLoadedListener { 
 
 public JsBindedValue < JsCounter > getTempGlobalCounter ( ) { 
 if ( tempGlobalCounter = = null ) { 
 - ValueModel < Integer > counter = context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalTempCounter ( ) ; 
 + ValueModel < Integer > counter = context ( ) . getAppStateModule ( ) . getGlobalStateVM ( ) . getGlobalTempCounter ( ) ; 
 tempGlobalCounter = new JsBindedValue < > ( JsCounter . create ( counter . get ( ) ) ) ; 
 counter . subscribe ( new ValueChangedListener < Integer > ( ) { 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index cd999ce . . 5e97ea9 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 59 , 6 + 59 , 7 @ @ import im . actor . core . viewmodel . FileCallback ; 
 import im . actor . core . viewmodel . FileEventCallback ; 
 import im . actor . core . viewmodel . FileVM ; 
 import im . actor . core . viewmodel . FileVMCallback ; 
 + import im . actor . core . viewmodel . GlobalStateVM ; 
 import im . actor . core . viewmodel . GroupAvatarVM ; 
 import im . actor . core . viewmodel . GroupVM ; 
 import im . actor . core . viewmodel . OwnAvatarVM ; 
 @ @ - 391 , 6 + 392 , 17 @ @ public class Messenger { 
 } 
 
 / * * 
 + * Get ViewModel of global application state 
 + * 
 + * @ return view model of application state 
 + * / 
 + @ NotNull 
 + @ ObjectiveCName ( " getGlobalState " ) 
 + public GlobalStateVM getGlobalState ( ) { 
 + return modules . getAppStateModule ( ) . getGlobalStateVM ( ) ; 
 + } 
 + 
 + / * * 
 * Get authenticated User Id 
 * 
 * @ return current User Id 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java 
 index 59830f1 . . d45ab71 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java 
 @ @ - 101 , 6 + 101 , 9 @ @ public class Modules implements ModuleContext { 
 timing . section ( " Events " ) ; 
 this . events = new EventBus ( ) ; 
 
 + timing . section ( " App State " ) ; 
 + appStateModule = new AppStateModule ( this ) ; 
 + 
 timing . section ( " API " ) ; 
 this . api = new ApiModule ( this ) ; 
 
 @ @ - 131 , 7 + 134 , 7 @ @ public class Modules implements ModuleContext { 
 timing . section ( " Groups " ) ; 
 groups = new GroupsModule ( this ) ; 
 timing . section ( " App State " ) ; 
 - appStateModule = new AppStateModule ( this ) ; 
 + appStateModule . run ( ) ; 
 timing . section ( " Stickers " ) ; 
 stickers = new StickersModule ( this ) ; 
 timing . section ( " Calls " ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / AppStateModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / AppStateModule . java 
 index 414e3e3 . . 98ffdac 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / AppStateModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / AppStateModule . java 
 @ @ - 8 , 21 + 8 , 26 @ @ import im . actor . core . api . ApiAppCounters ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . viewmodel . AppStateVM ; 
 + import im . actor . core . viewmodel . GlobalStateVM ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 
 import static im . actor . runtime . actors . ActorSystem . system ; 
 
 public class AppStateModule extends AbsModule { 
 + 
 private AppStateVM appStateVM ; 
 + private GlobalStateVM globalStateVM ; 
 private ActorRef listStatesActor ; 
 
 public AppStateModule ( ModuleContext context ) { 
 super ( context ) ; 
 - this . appStateVM = new AppStateVM ( context ) ; 
 + 
 + globalStateVM = new GlobalStateVM ( context ) ; 
 } 
 
 public void run ( ) { 
 + this . appStateVM = new AppStateVM ( context ( ) ) ; 
 listStatesActor = system ( ) . actorOf ( " actor / app / state " , new ActorCreator ( ) { 
 @ Override 
 public ListsStatesActor create ( ) { 
 @ @ - 51 , 14 + 56 , 14 @ @ public class AppStateModule extends AbsModule { 
 listStatesActor . send ( new ListsStatesActor . OnDialogsLoaded ( ) ) ; 
 } 
 
 - public void onCountersChanged ( ApiAppCounters counters ) { 
 - listStatesActor . send ( new ListsStatesActor . OnAppCounterChanged ( counters ) ) ; 
 - } 
 - 
 public AppStateVM getAppStateVM ( ) { 
 return appStateVM ; 
 } 
 
 + public GlobalStateVM getGlobalStateVM ( ) { 
 + return globalStateVM ; 
 + } 
 + 
 public void resetModule ( ) { 
 / / TODO : Implement 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / ListsStatesActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / ListsStatesActor . java 
 index 5bf3088 . . b035323 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / ListsStatesActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / misc / ListsStatesActor . java 
 @ @ - 4 , 57 + 4 , 15 @ @ 
 
 package im . actor . core . modules . misc ; 
 
 - import java . io . IOException ; 
 - 
 - import im . actor . core . api . ApiAppCounters ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . ModuleActor ; 
 - import im . actor . runtime . bser . BserParser ; 
 - import im . actor . runtime . bser . BserValues ; 
 - import im . actor . runtime . bser . DataInput ; 
 
 public class ListsStatesActor extends ModuleActor { 
 
 - private ApiAppCounters counters ; 
 - 
 public ListsStatesActor ( ModuleContext context ) { 
 super ( context ) ; 
 } 
 
 - @ Override 
 - public void preStart ( ) { 
 - super . preStart ( ) ; 
 - 
 - counters = new ApiAppCounters ( ) ; 
 - byte [ ] data = preferences ( ) . getBytes ( " app . counter _ raw " ) ; 
 - if ( data ! = null ) { 
 - try { 
 - ApiAppCounters nCounters = new ApiAppCounters ( ) ; 
 - nCounters . parse ( new BserValues ( BserParser . deserialize ( new DataInput ( data ) ) ) ) ; 
 - counters = nCounters ; 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - } 
 - 
 - Integer counter = counters . getGlobalCounter ( ) ; 
 - if ( counter ! = null ) { 
 - context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . onGlobalCounterChanged ( counter ) ; 
 - } else { 
 - context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . onGlobalCounterChanged ( 0 ) ; 
 - } 
 - } 
 - 
 - public void onCounterChanged ( ApiAppCounters counters ) { 
 - preferences ( ) . putBytes ( " app . counter _ raw " , counters . toByteArray ( ) ) ; 
 - Integer counter = counters . getGlobalCounter ( ) ; 
 - if ( counter ! = null ) { 
 - context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . onGlobalCounterChanged ( counter ) ; 
 - } else { 
 - context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . onGlobalCounterChanged ( 0 ) ; 
 - } 
 - } 
 - 
 public void onDialogsChanged ( boolean isEmpty ) { 
 context ( ) . getAppStateModule ( ) . getAppStateVM ( ) . onDialogsChanged ( isEmpty ) ; 
 } 
 @ @ - 87 , 25 + 45 , 11 @ @ public class ListsStatesActor extends ModuleActor { 
 onContactsLoaded ( ) ; 
 } else if ( message instanceof OnDialogsLoaded ) { 
 onDialogsLoaded ( ) ; 
 - } else if ( message instanceof OnAppCounterChanged ) { 
 - onCounterChanged ( ( ( OnAppCounterChanged ) message ) . getCounters ( ) ) ; 
 } else { 
 drop ( message ) ; 
 } 
 } 
 
 - public static class OnAppCounterChanged { 
 - private ApiAppCounters counters ; 
 - 
 - public OnAppCounterChanged ( ApiAppCounters counters ) { 
 - this . counters = counters ; 
 - } 
 - 
 - public ApiAppCounters getCounters ( ) { 
 - return counters ; 
 - } 
 - } 
 - 
 public static class OnBookImported { 
 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / AppStateVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / AppStateVM . java 
 index 3343e5d . . 2442b06 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / AppStateVM . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / AppStateVM . java 
 @ @ - 21 , 8 + 21 , 6 @ @ public class AppStateVM { 
 @ Property ( " nonatomic , readonly " ) 
 private ModuleContext context ; 
 @ Property ( " nonatomic , readonly " ) 
 - private BooleanValueModel isAppVisible ; 
 - @ Property ( " nonatomic , readonly " ) 
 private BooleanValueModel isDialogsEmpty ; 
 @ Property ( " nonatomic , readonly " ) 
 private BooleanValueModel isContactsEmpty ; 
 @ @ - 30 , 14 + 28 , 6 @ @ public class AppStateVM { 
 private BooleanValueModel isAppEmpty ; 
 @ Property ( " nonatomic , readonly " ) 
 private BooleanValueModel isAppLoaded ; 
 - @ Property ( " nonatomic , readonly " ) 
 - private BooleanValueModel isConnecting ; 
 - @ Property ( " nonatomic , readonly " ) 
 - private BooleanValueModel isSyncing ; 
 - @ Property ( " nonatomic , readonly " ) 
 - private IntValueModel globalCounter ; 
 - @ Property ( " nonatomic , readonly " ) 
 - private IntValueModel globalTempCounter ; 
 
 private boolean isBookImported ; 
 private boolean isDialogsLoaded ; 
 @ @ - 53 , 38 + 43 , 12 @ @ public class AppStateVM { 
 this . isDialogsEmpty = new BooleanValueModel ( " app . dialogs . empty " , context . getPreferences ( ) . getBool ( " app . dialogs . empty " , true ) ) ; 
 this . isContactsEmpty = new BooleanValueModel ( " app . contacts . empty " , context . getPreferences ( ) . getBool ( " app . contacts . empty " , true ) ) ; 
 this . isAppEmpty = new BooleanValueModel ( " app . empty " , context . getPreferences ( ) . getBool ( " app . empty " , true ) ) ; 
 - this . globalCounter = new IntValueModel ( " app . counter " , null ) ; 
 - this . globalTempCounter = new IntValueModel ( " app . temp _ counter " , 0 ) ; 
 - this . isConnecting = new BooleanValueModel ( " app . connecting " , false ) ; 
 - this . isSyncing = new BooleanValueModel ( " app . syncing " , false ) ; 
 - this . isAppVisible = new BooleanValueModel ( " app . visible " , false ) ; 
 
 this . isBookImported = context . getPreferences ( ) . getBool ( " app . contacts . imported " , false ) ; 
 this . isDialogsLoaded = context . getPreferences ( ) . getBool ( " app . dialogs . loaded " , false ) ; 
 this . isContactsLoaded = context . getPreferences ( ) . getBool ( " app . contacts . loaded " , false ) ; 
 
 this . isAppLoaded = new BooleanValueModel ( " app . loaded " , isBookImported & & isDialogsLoaded & & isContactsLoaded ) ; 
 - 
 - context . getEvents ( ) . subscribe ( new BusSubscriber ( ) { 
 - @ Override 
 - public void onBusEvent ( Event event ) { 
 - if ( event instanceof AppVisibleChanged ) { 
 - if ( ( ( AppVisibleChanged ) event ) . isVisible ( ) ) { 
 - isAppVisible . change ( true ) ; 
 - globalTempCounter . change ( 0 ) ; 
 - } else { 
 - isAppVisible . change ( false ) ; 
 - } 
 - } 
 - } 
 - } , AppVisibleChanged . EVENT ) ; 
 - 
 - context . getEvents ( ) . subscribe ( new BusSubscriber ( ) { 
 - @ Override 
 - public void onBusEvent ( Event event ) { 
 - isConnecting . change ( ( ( ConnectingStateChanged ) event ) . isConnecting ( ) ) ; 
 - } 
 - } , ConnectingStateChanged . EVENT ) ; 
 } 
 
 private void updateLoaded ( ) { 
 @ @ - 94 , 17 + 58 , 6 @ @ public class AppStateVM { 
 } 
 } 
 
 - / * * 
 - * Notify from Modules about global counters changed 
 - * 
 - * @ param value current value of global counter 
 - * / 
 - public synchronized void onGlobalCounterChanged ( int value ) { 
 - globalCounter . change ( value ) ; 
 - if ( ! isAppVisible . get ( ) ) { 
 - globalTempCounter . change ( value ) ; 
 - } 
 - } 
 
 / * * 
 * Notify from Modules about dialogs state changed 
 @ @ - 211 , 49 + 164 , 4 @ @ public class AppStateVM { 
 return isAppEmpty ; 
 } 
 
 - / * * 
 - * Is syncing in progress 
 - * 
 - * @ return View Model of Boolean 
 - * / 
 - public BooleanValueModel getIsSyncing ( ) { 
 - return isSyncing ; 
 - } 
 - 
 - / * * 
 - * Is Connecting in progress 
 - * 
 - * @ return View Model of Boolean 
 - * / 
 - public BooleanValueModel getIsConnecting ( ) { 
 - return isConnecting ; 
 - } 
 - 
 - 
 - / * * 
 - * Gettting global unread counter 
 - * 
 - * @ return View Model of Integer 
 - * / 
 - public IntValueModel getGlobalCounter ( ) { 
 - return globalCounter ; 
 - } 
 - 
 - / * * 
 - * Getting global unread counter that hiddes when app is opened 
 - * 
 - * @ return View Model of Integer 
 - * / 
 - public IntValueModel getGlobalTempCounter ( ) { 
 - return globalTempCounter ; 
 - } 
 - 
 - / * * 
 - * Is App visible state 
 - * 
 - * @ return View Model of Boolean 
 - * / 
 - public BooleanValueModel getIsAppVisible ( ) { 
 - return isAppVisible ; 
 - } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / GlobalStateVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / GlobalStateVM . java 
 new file mode 100644 
 index 0000000 . . 55a2e5b 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / GlobalStateVM . java 
 @ @ - 0 , 0 + 1 , 113 @ @ 
 + package im . actor . core . viewmodel ; 
 + 
 + import com . google . j2objc . annotations . Property ; 
 + 
 + import im . actor . core . events . AppVisibleChanged ; 
 + import im . actor . core . events . ConnectingStateChanged ; 
 + import im . actor . core . modules . ModuleContext ; 
 + import im . actor . core . viewmodel . generics . BooleanValueModel ; 
 + import im . actor . core . viewmodel . generics . IntValueModel ; 
 + import im . actor . runtime . eventbus . BusSubscriber ; 
 + import im . actor . runtime . eventbus . Event ; 
 + 
 + public class GlobalStateVM { 
 + 
 + @ Property ( " nonatomic , readonly " ) 
 + private BooleanValueModel isAppVisible ; 
 + @ Property ( " nonatomic , readonly " ) 
 + private BooleanValueModel isConnecting ; 
 + @ Property ( " nonatomic , readonly " ) 
 + private BooleanValueModel isSyncing ; 
 + @ Property ( " nonatomic , readonly " ) 
 + private IntValueModel globalCounter ; 
 + @ Property ( " nonatomic , readonly " ) 
 + private IntValueModel globalTempCounter ; 
 + 
 + public GlobalStateVM ( ModuleContext context ) { 
 + this . isAppVisible = new BooleanValueModel ( " app . visible " , false ) ; 
 + this . globalCounter = new IntValueModel ( " app . counter " , null ) ; 
 + this . globalTempCounter = new IntValueModel ( " app . temp _ counter " , 0 ) ; 
 + this . isConnecting = new BooleanValueModel ( " app . connecting " , false ) ; 
 + this . isSyncing = new BooleanValueModel ( " app . syncing " , false ) ; 
 + 
 + context . getEvents ( ) . subscribe ( new BusSubscriber ( ) { 
 + @ Override 
 + public void onBusEvent ( Event event ) { 
 + if ( event instanceof AppVisibleChanged ) { 
 + if ( ( ( AppVisibleChanged ) event ) . isVisible ( ) ) { 
 + isAppVisible . change ( true ) ; 
 + globalTempCounter . change ( 0 ) ; 
 + } else { 
 + isAppVisible . change ( false ) ; 
 + } 
 + } 
 + } 
 + } , AppVisibleChanged . EVENT ) ; 
 + 
 + context . getEvents ( ) . subscribe ( new BusSubscriber ( ) { 
 + @ Override 
 + public void onBusEvent ( Event event ) { 
 + isConnecting . change ( ( ( ConnectingStateChanged ) event ) . isConnecting ( ) ) ; 
 + } 
 + } , ConnectingStateChanged . EVENT ) ; 
 + } 
 + 
 + 
 + / * * 
 + * Notify from Modules about global counters changed 
 + * 
 + * @ param value current value of global counter 
 + * / 
 + public synchronized void onGlobalCounterChanged ( int value ) { 
 + globalCounter . change ( value ) ; 
 + if ( ! isAppVisible . get ( ) ) { 
 + globalTempCounter . change ( value ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Is syncing in progress 
 + * 
 + * @ return View Model of Boolean 
 + * / 
 + public BooleanValueModel getIsSyncing ( ) { 
 + return isSyncing ; 
 + } 
 + 
 + / * * 
 + * Is Connecting in progress 
 + * 
 + * @ return View Model of Boolean 
 + * / 
 + public BooleanValueModel getIsConnecting ( ) { 
 + return isConnecting ; 
 + } 
 + 
 + 
 + / * * 
 + * Gettting global unread counter 
 + * 
 + * @ return View Model of Integer 
 + * / 
 + public IntValueModel getGlobalCounter ( ) { 
 + return globalCounter ; 
 + } 
 + 
 + / * * 
 + * Getting global unread counter that resets when app is opened 
 + * 
 + * @ return View Model of Integer 
 + * / 
 + public IntValueModel getGlobalTempCounter ( ) { 
 + return globalTempCounter ; 
 + } 
 + 
 + / * * 
 + * Is App visible state 
 + * 
 + * @ return View Model of Boolean 
 + * / 
 + public BooleanValueModel getIsAppVisible ( ) { 
 + return isAppVisible ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 index 3bc6444 . . d6c14d7 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / Controllers / Calls / AACallViewController . swift 
 @ @ - 24 , 6 + 24 , 7 @ @ public class AACallViewController : AAViewController { 
 public let videoButton = AACircleButton ( size : 72 ) 
 
 var isScheduledDispose = false 
 + var timer : NSTimer ? 
 
 public init ( callId : jlong ) { 
 self . callId = callId 
 @ @ - 172 , 10 + 173 , 10 @ @ public class AACallViewController : AAViewController { 
 self . answerCallButtonText . hidden = true 
 self . declineCallButton . hidden = false 
 self . declineCallButtonText . hidden = true 
 - self . callState . text = " 0 : 00 " 
 + self . startTimer ( ) 
 self . layoutButtons ( ) 
 } else if ( ACCallState _ Enum . ENDED = = value . toNSEnum ( ) ) { 
 - self . callState . text = " Call Ended " 
 + self . stopTimer ( ) 
 self . muteButton . hidden = true 
 self . speakerButton . hidden = true 
 self . videoButton . hidden = true 
 @ @ - 230 , 6 + 231 , 33 @ @ public class AACallViewController : AAViewController { 
 UIDevice . currentDevice ( ) . proximityMonitoringEnabled = true 
 } 
 
 + func startTimer ( ) { 
 + timer ? . invalidate ( ) 
 + timer = NSTimer . scheduledTimerWithTimeInterval ( 1 . 0 , target : self , selector : " updateTimer " , userInfo : nil , repeats : true ) 
 + updateTimer ( ) 
 + } 
 + 
 + func updateTimer ( ) { 
 + if call . callStart > 0 { 
 + let end = call . callEnd > 0 ? call . callEnd : jlong ( NSDate ( ) . timeIntervalSince1970 * 1000 ) 
 + let secs = Int ( ( end - call . callStart ) / 1000 ) 
 + 
 + let seconds = secs % 60 
 + let minutes = secs / 60 
 + 
 + self . callState . text = NSString ( format : " % 0 . 2d : % 0 . 2d " , minutes , seconds ) as String 
 + } else { 
 + self . callState . text = " 0 : 00 " 
 + } 
 + } 
 + 
 + func stopTimer ( ) { 
 + timer ? . invalidate ( ) 
 + timer = nil 
 + updateTimer ( ) 
 + / / self . callState . text = " Call Ended " 
 + } 
 + 
 public override func viewWillDisappear ( animated : Bool ) { 
 super . viewWillDisappear ( animated ) 
 UIDevice . currentDevice ( ) . proximityMonitoringEnabled = false 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index 5ff7abf . . b60d213 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 25 , 7 + 25 , 7 @ @ public class CallActor extends AbsCallActor { 
 private CallVM callVM ; 
 private CommandCallback < Long > callback ; 
 
 - private boolean isConnected ; 
 + private boolean isActive ; 
 private boolean isAnswered ; 
 private boolean isRejected ; 
 
 @ @ - 34 , 7 + 34 , 7 @ @ public class CallActor extends AbsCallActor { 
 this . isMaster = false ; 
 this . callId = callId ; 
 this . isAnswered = false ; 
 - this . isConnected = false ; 
 + this . isActive = false ; 
 } 
 
 public CallActor ( Peer peer , CommandCallback < Long > callback , ModuleContext context ) { 
 @ @ - 43 , 7 + 43 , 7 @ @ public class CallActor extends AbsCallActor { 
 this . callback = callback ; 
 this . peer = peer ; 
 this . isAnswered = true ; 
 - this . isConnected = false ; 
 + this . isActive = false ; 
 } 
 
 @ Override 
 @ @ - 92 , 6 + 92 , 25 @ @ public class CallActor extends AbsCallActor { 
 } 
 } 
 
 + @ Override 
 + public void onCallConnected ( ) { 
 + / / callVM . getState ( ) . change ( ) 
 + } 
 + 
 + @ Override 
 + public void onCallEnabled ( ) { 
 + isActive = true ; 
 + if ( isAnswered ) { 
 + callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; 
 + callVM . setCallStart ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void onBusStopped ( ) { 
 + self ( ) . send ( PoisonPill . INSTANCE ) ; 
 + } 
 + 
 
 @ Override 
 public void onMuteChanged ( boolean isMuted ) { 
 @ @ - 103 , 8 + 122 , 10 @ @ public class CallActor extends AbsCallActor { 
 if ( ! isAnswered & & ! isRejected ) { 
 isAnswered = true ; 
 request ( new RequestJoinCall ( callId ) ) ; 
 - if ( isConnected ) { 
 + 
 + if ( isActive ) { 
 callVM . getState ( ) . change ( CallState . IN _ PROGRESS ) ; 
 + callVM . setCallStart ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; 
 } else { 
 callVM . getState ( ) . change ( CallState . CONNECTING ) ; 
 } 
 @ @ - 123 , 8 + 144 , 12 @ @ public class CallActor extends AbsCallActor { 
 super . postStop ( ) ; 
 if ( callVM ! = null ) { 
 callVM . getState ( ) . change ( CallState . ENDED ) ; 
 + callVM . setCallEnd ( im . actor . runtime . Runtime . getCurrentTime ( ) ) ; 
 } 
 callBus . kill ( ) ; 
 + if ( callId ! = 0 ) { 
 + callManager . send ( new CallManagerActor . OnCallEnded ( callId ) , self ( ) ) ; 
 + } 
 } 
 
 / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java 
 index af1c090 . . ed9d3a8 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / AbsCallActor . java 
 @ @ - 75 , 5 + 75 , 35 @ @ public abstract class AbsCallActor extends ModuleActor implements CallBusCallbac 
 } 
 } ) ; 
 } 
 + 
 + @ Override 
 + public void onCallConnected ( ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + AbsCallActor . this . onCallConnected ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onCallEnabled ( ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + AbsCallActor . this . onCallEnabled ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onBusStopped ( ) { 
 + self ( ) . send ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + AbsCallActor . this . onBusStopped ( ) ; 
 + } 
 + } ) ; 
 + } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java 
 index a80879d . . 025cf33 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusActor . java 
 @ @ - 33 , 6 + 33 , 8 @ @ public class CallBusActor extends EventBusActor implements PeerCallCallback { 
 private boolean isMasterReady ; 
 private long masterDeviceId ; 
 private PeerCallInt peerCall ; 
 + private boolean isConnected = false ; 
 + private boolean isEnabled = false ; 
 
 public CallBusActor ( final CallBusCallback callBusCallback , PeerSettings selfSettings , ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 93 , 7 + 95 , 14 @ @ public class CallBusActor extends EventBusActor implements PeerCallCallback { 
 
 @ Override 
 public void onPeerStateChanged ( long deviceId , PeerState state ) { 
 - 
 + if ( state = = PeerState . CONNECTED & & ! isConnected & & ! isEnabled ) { 
 + isConnected = true ; 
 + callBusCallback . onCallConnected ( ) ; 
 + } 
 + if ( state = = PeerState . ACTIVE & & ! isEnabled ) { 
 + isEnabled = true ; 
 + callBusCallback . onCallEnabled ( ) ; 
 + } 
 } 
 
 @ Override 
 @ @ - 199 , 6 + 208 , 16 @ @ public class CallBusActor extends EventBusActor implements PeerCallCallback { 
 } 
 
 @ Override 
 + public void postStop ( ) { 
 + super . postStop ( ) ; 
 + if ( peerCall ! = null ) { 
 + peerCall . kill ( ) ; 
 + peerCall = null ; 
 + } 
 + callBusCallback . onBusStopped ( ) ; 
 + } 
 + 
 + @ Override 
 public void onReceive ( Object message ) { 
 if ( message instanceof JoinBus ) { 
 joinBus ( ( ( JoinBus ) message ) . getBusId ( ) ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java 
 index 13c8489 . . e26bff1 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / CallBusCallback . java 
 @ @ - 1 , 6 + 1 , 12 @ @ 
 package im . actor . core . modules . calls . peers ; 
 
 public interface CallBusCallback { 
 - 
 + 
 void onBusStarted ( String busId ) ; 
 + 
 + void onCallConnected ( ) ; 
 + 
 + void onCallEnabled ( ) ; 
 + 
 + void onBusStopped ( ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 index 3100d73 . . 090d9df 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerCallActor . java 
 @ @ - 121 , 6 + 121 , 10 @ @ public class PeerCallActor extends ModuleActor { 
 d . kill ( ) ; 
 } 
 refs . clear ( ) ; 
 + if ( webRTCMediaStream ! = null ) { 
 + webRTCMediaStream . setEnabled ( false ) ; 
 + webRTCMediaStream . close ( ) ; 
 + } 
 } 
 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java 
 index d2d7a44 . . 6b6cd76 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / PeerConnectionActor . java 
 @ @ - 47 , 7 + 47 , 6 @ @ public class PeerConnectionActor extends ModuleActor { 
 
 @ NotNull 
 private WebRTCPeerConnection peerConnection ; 
 - private SDPOptimizer sdpOptimizer ; 
 private boolean isReady = false ; 
 private boolean isReadyForCandidates = false ; 
 @ NotNull 
 @ @ - 62 , 7 + 61 , 6 @ @ public class PeerConnectionActor extends ModuleActor { 
 this . TAG = " PeerConnection " ; 
 this . callback = callback ; 
 this . stream = mediaStream ; 
 - this . sdpOptimizer = new SDPOptimizer ( selfSettings , theirSettings ) ; 
 } 
 
 @ Override 
 @ @ - 136 , 7 + 134 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 / / 
 
 isReady = false ; 
 - peerConnection . createOffer ( ) . map ( OPTIMIZE _ OWN _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 + peerConnection . createOffer ( ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 @ Override 
 public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 return peerConnection . setLocalDescription ( description ) ; 
 @ @ - 178 , 7 + 176 , 7 @ @ public class PeerConnectionActor extends ModuleActor { 
 public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 return peerConnection . createAnswer ( ) ; 
 } 
 - } ) . map ( OPTIMIZE _ OWN _ SDP ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 + } ) . mapPromise ( new Function < WebRTCSessionDescription , Promise < WebRTCSessionDescription > > ( ) { 
 @ Override 
 public Promise < WebRTCSessionDescription > apply ( WebRTCSessionDescription description ) { 
 return peerConnection . setLocalDescription ( description ) ; 
 @ @ - 265 , 28 + 263 , 6 @ @ public class PeerConnectionActor extends ModuleActor { 
 } 
 
 / / 
 - / / Configuration 
 - / / 
 - 
 - private Function < WebRTCSessionDescription , WebRTCSessionDescription > OPTIMIZE _ OWN _ SDP 
 - = new Function < WebRTCSessionDescription , WebRTCSessionDescription > ( ) { 
 - @ Override 
 - public WebRTCSessionDescription apply ( WebRTCSessionDescription description ) { 
 - return new WebRTCSessionDescription ( description . getType ( ) , 
 - sdpOptimizer . optimizeOwnSDP ( description . getSdp ( ) ) ) ; 
 - } 
 - } ; 
 - 
 - private Function < WebRTCSessionDescription , WebRTCSessionDescription > OPTIMIZE _ THEIR _ SDP 
 - = new Function < WebRTCSessionDescription , WebRTCSessionDescription > ( ) { 
 - @ Override 
 - public WebRTCSessionDescription apply ( WebRTCSessionDescription description ) { 
 - return new WebRTCSessionDescription ( description . getType ( ) , 
 - sdpOptimizer . optimizeTheirSDP ( description . getSdp ( ) ) ) ; 
 - } 
 - } ; 
 - 
 - / / 
 / / Messages 
 / / 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / SDPOptimizer . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / SDPOptimizer . java 
 deleted file mode 100644 
 index 38280f4 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / peers / SDPOptimizer . java 
 + + + / dev / null 
 @ @ - 1 , 42 + 0 , 0 @ @ 
 - package im . actor . core . modules . calls . peers ; 
 - 
 - public class SDPOptimizer { 
 - 
 - private final PeerSettings ownSettings ; 
 - private final PeerSettings theirSettings ; 
 - 
 - public SDPOptimizer ( PeerSettings ownSettings , PeerSettings theirSettings ) { 
 - this . ownSettings = ownSettings ; 
 - this . theirSettings = theirSettings ; 
 - } 
 - 
 - public String optimizeOwnSDP ( String sdp ) { 
 - / / SDPScheme sdpScheme = SDP . parse ( description . getSdp ( ) ) ; 
 - / / 
 - / / for ( SDPMedia m : sdpScheme . getMediaLevel ( ) ) { 
 - / / 
 - / / / / Disabling media streams 
 - / / / / m . setMode ( SDPMediaMode . INACTIVE ) ; 
 - / / 
 - / / / / Optimizing opus 
 - / / if ( " audio " . equals ( m . getType ( ) ) ) { 
 - / / for ( SDPCodec codec : m . getCodecs ( ) ) { 
 - / / if ( " opus " . equals ( codec . getName ( ) ) ) { 
 - / / codec . getFormat ( ) . put ( " maxcodedaudiobandwidth " , " 16000 " ) ; 
 - / / codec . getFormat ( ) . put ( " maxaveragebitrate " , " 20000 " ) ; 
 - / / codec . getFormat ( ) . put ( " stereo " , " 0 " ) ; 
 - / / codec . getFormat ( ) . put ( " useinbandfec " , " 1 " ) ; 
 - / / codec . getFormat ( ) . put ( " usedtx " , " 1 " ) ; 
 - / / } 
 - / / } 
 - / / } 
 - / / } 
 - / / 
 - / / return new WebRTCSessionDescription ( description . getType ( ) , sdpScheme . toSDP ( ) ) ; 
 - return sdp ; 
 - } 
 - 
 - public String optimizeTheirSDP ( String sdp ) { 
 - return sdp ; 
 - } 
 - } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java 
 index 39d1bb1 . . 1d52dec 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / viewmodel / CallVM . java 
 @ @ - 6 , 7 + 6 , 11 @ @ import java . util . ArrayList ; 
 
 import im . actor . core . entity . Peer ; 
 import im . actor . core . viewmodel . generics . BooleanValueModel ; 
 + import im . actor . core . viewmodel . generics . IntValueModel ; 
 + import im . actor . runtime . * ; 
 + import im . actor . runtime . actors . ActorTime ; 
 import im . actor . runtime . mvvm . ValueModel ; 
 + import im . actor . runtime . threading . CommonTimer ; 
 
 public class CallVM { 
 
 @ @ - 21 , 8 + 25 , 14 @ @ public class CallVM { 
 @ Property ( " nonatomic , readonly " ) 
 private final BooleanValueModel isMuted ; 
 @ Property ( " nonatomic , readonly " ) 
 + private long callStart ; 
 + @ Property ( " nonatomic , readonly " ) 
 + private long callEnd ; 
 + @ Property ( " nonatomic , readonly " ) 
 private final boolean isOutgoing ; 
 
 + private CommonTimer presenceTimer ; 
 + 
 public CallVM ( long callId , Peer peer , boolean isOutgoing , ArrayList < CallMember > initialMembers , CallState state ) { 
 this . callId = callId ; 
 this . peer = peer ; 
 @ @ - 30 , 6 + 40 , 7 @ @ public class CallVM { 
 this . state = new ValueModel < > ( " calls . " + callId + " . state " , state ) ; 
 this . members = new ValueModel < > ( " calls . " + callId + " . members " , new ArrayList < > ( initialMembers ) ) ; 
 this . isMuted = new BooleanValueModel ( " calls . " + callId + " . state " , false ) ; 
 + this . callStart = 0 ; 
 } 
 
 public boolean isOutgoing ( ) { 
 @ @ - 55 , 4 + 66 , 20 @ @ public class CallVM { 
 public ValueModel < ArrayList < CallMember > > getMembers ( ) { 
 return members ; 
 } 
 + 
 + public void setCallStart ( long callStart ) { 
 + this . callStart = callStart ; 
 + } 
 + 
 + public long getCallStart ( ) { 
 + return callStart ; 
 + } 
 + 
 + public long getCallEnd ( ) { 
 + return callEnd ; 
 + } 
 + 
 + public void setCallEnd ( long callEnd ) { 
 + this . callEnd = callEnd ; 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java 
 index d76d8fe . . ac273fe 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / threading / CommonTimer . java 
 @ @ - 16 , 16 + 16 , 21 @ @ public class CommonTimer { 
 return new Actor ( ) ; 
 } 
 } ) ; 
 - private static final Scheduler COMMON _ SCHEDULER = new Scheduler ( COMMON _ TIMER _ ACTOR ) ; 
 + private static final Scheduler COMMON _ SCHEDULER = new Scheduler ( COMMON _ TIMER _ ACTOR ) ; 
 
 private final Runnable runnable ; 
 private Cancellable lastSchedule ; 
 + private boolean isDisposed ; 
 
 public CommonTimer ( Runnable runnable ) { 
 this . runnable = runnable ; 
 } 
 
 public void schedule ( long time ) { 
 + if ( isDisposed ) { 
 + return ; 
 + } 
 + 
 if ( lastSchedule ! = null ) { 
 lastSchedule . cancel ( ) ; 
 } 
 @ @ - 38 , 4 + 43 , 9 @ @ public class CommonTimer { 
 lastSchedule . cancel ( ) ; 
 } 
 } 
 + 
 + public void dispose ( ) { 
 + isDisposed = true ; 
 + cancel ( ) ; 
 + } 
 }
