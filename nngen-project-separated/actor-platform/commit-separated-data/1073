BLEU SCORE: 0.23462350320528

TEST MSG: refactor ( server ) : rename proto entities according to docs
GENERATED MSG: feat ( server ) : protobuf - serializable session messages

TEST DIFF (one line): diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / UpdatesSource . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / UpdatesSource . scala < nl > index d9d01c4 . . 661d9c3 100644 < nl > - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / UpdatesSource . scala < nl > + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / UpdatesSource . scala < nl > @ @ - 1 , 16 + 1 , 13 @ @ < nl > package im . actor . server . bot < nl > < nl > import akka . actor . { ActorLogging , Props , Stash } < nl > - import akka . pattern . pipe < nl > import akka . stream . actor . ActorPublisher < nl > import akka . stream . scaladsl . Source < nl > import im . actor . api . rpc . Update < nl > import im . actor . api . rpc . codecs . _ < nl > import im . actor . api . rpc . messaging . UpdateMessage < nl > import im . actor . api . rpc . sequence . { UpdateRawUpdate , FatSeqUpdate , SeqUpdate } < nl > - import im . actor . server . db . DbExtension < nl > - import im . actor . server . mtproto . protocol . UpdateBox < nl > - import im . actor . server . persist < nl > + import im . actor . server . mtproto . protocol . ProtoPush < nl > import im . actor . server . sequence . { UpdatesConsumerMessage , UpdatesConsumer } < nl > < nl > import scala . annotation . tailrec < nl > @ @ - 35 , 7 + 32 , 7 @ @ private class UpdatesSource ( userId : Int , authId : Long , authSid : Int ) extends Act < nl > private var buf = Vector . empty [ ( Int , Update ) ] < nl > < nl > def receive : Receive = { < nl > - case NewUpdate ( UpdateBox ( bodyBytes ) , _ ) ⇒ < nl > + case NewUpdate ( ProtoPush ( bodyBytes ) , _ ) ⇒ < nl > ( UpdateBoxCodec . decode ( bodyBytes ) . require . value match { < nl > case SeqUpdate ( seq , _ , header , body ) ⇒ Some ( ( seq , header , body ) ) < nl > case FatSeqUpdate ( seq , _ , header , body , _ , _ ) ⇒ Some ( ( seq , header , body ) ) < nl > diff - - git a / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / MessageBoxCodec . scala b / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / MessageBoxCodec . scala < nl > index 00c5370 . . 4a0b3a8 100644 < nl > - - - a / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / MessageBoxCodec . scala < nl > + + + b / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / MessageBoxCodec . scala < nl > @ @ - 25 , 11 + 25 , 11 @ @ object MessageBoxCodec extends Codec [ MessageBox ] { < nl > . \ ( RequestDH . header ) { case r : RequestDH ⇒ r } ( RequestDHCodec ) < nl > . \ ( ResponseDoDH . header ) { case r : ResponseDoDH ⇒ r } ( ResponseDoDHCodec ) < nl > . \ ( RequestResend . header ) { case r : RequestResend ⇒ r } ( RequestResendCodec ) < nl > - . \ ( RpcRequestBox . header ) { case r : RpcRequestBox ⇒ r } ( RpcRequestBoxCodec ) < nl > - . \ ( RpcResponseBox . header ) { case r : RpcResponseBox ⇒ r } ( RpcResponseBoxCodec ) < nl > + . \ ( ProtoRpcRequest . header ) { case r : ProtoRpcRequest ⇒ r } ( ProtoRpcRequestCodec ) < nl > + . \ ( ProtoRpcResponse . header ) { case r : ProtoRpcResponse ⇒ r } ( ProtoRpcResponseCodec ) < nl > . \ ( UnsentMessage . header ) { case r : UnsentMessage ⇒ r } ( UnsentMessageCodec ) < nl > . \ ( UnsentResponse . header ) { case r : UnsentResponse ⇒ r } ( UnsentResponseCodec ) < nl > - . \ ( UpdateBox . header ) { case r : UpdateBox ⇒ r } ( UpdateBoxCodec ) < nl > + . \ ( ProtoPush . header ) { case r : ProtoPush ⇒ r } ( ProtoPushCodec ) < nl > . \ ( 0 , _ ⇒ true ) { case a ⇒ a } ( DiscriminatedErrorCodec ( " MessageBox " ) ) < nl > < nl > private val codec = ( int64 : : PayloadCodec ( protoMessageCodec ) ) . as [ MessageBox ] < nl > diff - - git a / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala b / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala < nl > index 0bd71cc . . 918ade6 100644 < nl > - - - a / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala < nl > + + + b / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala < nl > @ @ - 21 , 9 + 21 , 9 @ @ package object protocol { < nl > val ResponseGetServerKeyCodec = ( int64 : : bytes ) . as [ ResponseGetServerKey ] < nl > val RequestDHCodec = ( int64 : : int64 : : bytes : : bytes ) . as [ RequestDH ] < nl > val ResponseDoDHCodec = ( int64 : : bytes : : bytes ) . as [ ResponseDoDH ] < nl > - val RpcRequestBoxCodec = bytes . as [ RpcRequestBox ] < nl > - val RpcResponseBoxCodec = ( int64 : : bytes ) . as [ RpcResponseBox ] < nl > + val ProtoRpcRequestCodec = bytes . as [ ProtoRpcRequest ] < nl > + val ProtoRpcResponseCodec = ( int64 : : bytes ) . as [ ProtoRpcResponse ] < nl > val UnsentMessageCodec = ( int64 : : int32 ) . as [ UnsentMessage ] < nl > val UnsentResponseCodec = ( int64 : : int64 : : int32 ) . as [ UnsentResponse ] < nl > - val UpdateBoxCodec = bytes . as [ UpdateBox ] < nl > + val ProtoPushCodec = bytes . as [ ProtoPush ] < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala < nl > index 4895957 . . bcf18b7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala < nl > @ @ - 13 , 7 + 13 , 7 @ @ import im . actor . api . rpc . { Update , UpdateBox ⇒ ProtoUpdateBox } < nl > import im . actor . server . db . DbExtension < nl > import im . actor . server . group . GroupExtension < nl > import im . actor . server . model . configs . Parameter < nl > - import im . actor . server . mtproto . protocol . UpdateBox < nl > + import im . actor . server . mtproto . protocol . ProtoPush < nl > import im . actor . server . persist . configs . ParameterRepo < nl > import im . actor . server . persist . contact . UserContactRepo < nl > import im . actor . server . presences . _ < nl > @ @ - 24 , 7 + 24 , 7 @ @ import slick . dbio . DBIO < nl > import scala . concurrent . _ < nl > import scala . concurrent . duration . _ < nl > < nl > - final case class NewUpdate ( ub : UpdateBox , reduceKey : Option [ String ] ) < nl > + final case class NewUpdate ( ub : ProtoPush , reduceKey : Option [ String ] ) < nl > < nl > sealed trait UpdatesConsumerMessage < nl > < nl > @ @ - 238 , 7 + 238 , 7 @ @ private [ sequence ] class UpdatesConsumer ( userId : Int , authId : Long , authSid : Int , < nl > } < nl > < nl > private def sendUpdateBox ( updateBox : ProtoUpdateBox , reduceKey : Option [ String ] ) : Unit = < nl > - subscriber ! NewUpdate ( UpdateBox ( UpdateBoxCodec . encode ( updateBox ) . require ) , reduceKey ) < nl > + subscriber ! NewUpdate ( ProtoPush ( UpdateBoxCodec . encode ( updateBox ) . require ) , reduceKey ) < nl > < nl > private def getFatData ( < nl > userId : Int , < nl > diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala b / actor - server / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala < nl > index 77bee4d . . fe15444 100644 < nl > - - - a / actor - server / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala < nl > + + + b / actor - server / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala < nl > @ @ - 156 , 22 + 156 , 22 @ @ object ResponseAuthId { < nl > } < nl > < nl > @ SerialVersionUID ( 1L ) < nl > - final case class RpcRequestBox ( bodyBytes : BitVector ) extends ProtoMessage { < nl > - val header = RpcRequestBox . header < nl > + final case class ProtoRpcRequest ( bodyBytes : BitVector ) extends ProtoMessage { < nl > + val header = ProtoRpcRequest . header < nl > } < nl > < nl > - object RpcRequestBox { < nl > + object ProtoRpcRequest { < nl > val header = 0x03 < nl > } < nl > < nl > @ SerialVersionUID ( 1L ) < nl > - final case class RpcResponseBox ( messageId : Long , bodyBytes : BitVector ) extends ProtoMessage with OutgoingProtoMessage with ResendableProtoMessage { < nl > - val header = RpcResponseBox . header < nl > + final case class ProtoRpcResponse ( messageId : Long , bodyBytes : BitVector ) extends ProtoMessage with OutgoingProtoMessage with ResendableProtoMessage { < nl > + val header = ProtoRpcResponse . header < nl > < nl > override val bodySize = bodyBytes . bytes . size < nl > } < nl > < nl > - object RpcResponseBox { < nl > + object ProtoRpcResponse { < nl > val header = 0x04 < nl > } < nl > < nl > @ @ - 194 , 12 + 194 , 12 @ @ object UnsentResponse { < nl > } < nl > < nl > @ SerialVersionUID ( 1L ) < nl > - final case class UpdateBox ( bodyBytes : BitVector ) extends ProtoMessage with OutgoingProtoMessage with ResendableProtoMessage { < nl > - val header = UpdateBox . header < nl > + final case class ProtoPush ( bodyBytes : BitVector ) extends ProtoMessage with OutgoingProtoMessage with ResendableProtoMessage { < nl > + val header = ProtoPush . header < nl > < nl > override val bodySize = bodyBytes . bytes . size < nl > } < nl > < nl > - object UpdateBox { < nl > + object ProtoPush { < nl > val header = 0x05 < nl > } < nl > diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / MessageBoxHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / MessageBoxHandler . scala < nl > index fe2df4e . . 2e1999e 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / MessageBoxHandler . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / MessageBoxHandler . scala < nl > @ @ - 2 , 14 + 2 , 14 @ @ package im . actor . server . session < nl > < nl > import akka . actor . _ < nl > import akka . stream . actor . _ < nl > - import im . actor . server . mtproto . protocol . RpcRequestBox < nl > + import im . actor . server . mtproto . protocol . ProtoRpcRequest < nl > < nl > class RpcRequestBoxHandler ( rpcApiHandler : ActorRef ) extends ActorSubscriber { < nl > import ActorSubscriberMessage . _ < nl > < nl > val MaxQueueSize = 10 / / TODO : configurable < nl > < nl > - val queue = Map . empty [ Int , RpcRequestBox ] < nl > + val queue = Map . empty [ Int , ProtoRpcRequest ] < nl > < nl > override val requestStrategy = new MaxInFlightRequestStrategy ( max = MaxQueueSize ) { < nl > override def inFlightInternally : Int = queue . size < nl > diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > index 022b8af . . 3fa6961 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala < nl > @ @ - 135 , 14 + 135 , 14 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : < nl > resendBufferSize - = message . bodySize < nl > < nl > message match { < nl > - case rspBox @ RpcResponseBox ( requestMessageId , bodyBytes ) ⇒ < nl > + case rspBox @ ProtoRpcResponse ( requestMessageId , bodyBytes ) ⇒ < nl > if ( message . bodySize < = MaxResendSize ) { < nl > enqueueProtoMessageWithResend ( messageId , rspBox , reduceKey ) < nl > } else { < nl > scheduleResend ( messageId , rspBox , reduceKey ) < nl > enqueueProtoMessage ( nextMessageId ( ) , UnsentResponse ( messageId , requestMessageId , message . bodySize ) ) < nl > } < nl > - case ub @ UpdateBox ( bodyBytes ) ⇒ < nl > + case ub @ ProtoPush ( bodyBytes ) ⇒ < nl > if ( message . bodySize < = MaxResendSize ) { < nl > enqueueProtoMessageWithResend ( messageId , ub , reduceKey ) < nl > } else { < nl > diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > index d0d2eaf . . 30979c4 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ import akka . stream . actor . _ < nl > import im . actor . api . rpc . RpcInternalError < nl > import im . actor . server . api . rpc . RpcApiService . RpcResponse < nl > import im . actor . server . api . rpc . { RpcApiExtension , RpcApiService , RpcResultCodec } < nl > - import im . actor . server . mtproto . protocol . { ProtoMessage , RpcResponseBox } < nl > + import im . actor . server . mtproto . protocol . { ProtoMessage , ProtoRpcResponse } < nl > import im . actor . util . cache . CacheHelpers . _ < nl > import scodec . bits . _ < nl > < nl > @ @ - 128 , 11 + 128 , 11 @ @ private [ session ] class RpcHandler extends ActorSubscriber with ActorPublisher [ Pr < nl > log . debug ( " Received RpcResponse for messageId : { } , publishing " , messageId ) < nl > < nl > requestQueue - = messageId < nl > - enqueueProtoMessage ( RpcResponseBox ( messageId , responseBytes ) ) < nl > + enqueueProtoMessage ( ProtoRpcResponse ( messageId , responseBytes ) ) < nl > case CachedResponse ( rsp ) ⇒ < nl > log . debug ( " Got cached RpcResponse for messageId : { } , publishing " , rsp . messageId ) < nl > < nl > - enqueueProtoMessage ( RpcResponseBox ( rsp . messageId , rsp . responseBytes ) ) < nl > + enqueueProtoMessage ( ProtoRpcResponse ( rsp . messageId , rsp . responseBytes ) ) < nl > case Request ( _ ) ⇒ < nl > deliverBuf ( ) < nl > case Cancel ⇒ < nl > diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / SessionMessageDiscriminator . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / SessionMessageDiscriminator . scala < nl > index 0471cc4 . . 8e5f4a1 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / SessionMessageDiscriminator . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / SessionMessageDiscriminator . scala < nl > @ @ - 39 , 7 + 39 , 7 @ @ private [ session ] final class SessionMessageDiscriminator extends GraphStage [ Sess < nl > val msg = grab ( in ) < nl > < nl > msg match { < nl > - case SessionStreamMessage . HandleMessageBox ( MessageBox ( messageId , RpcRequestBox ( bodyBytes ) ) , clientData ) ⇒ < nl > + case SessionStreamMessage . HandleMessageBox ( MessageBox ( messageId , ProtoRpcRequest ( bodyBytes ) ) , clientData ) ⇒ < nl > emit ( outRpc , HandleRpcRequest ( messageId , bodyBytes , clientData ) , pullIn ) < nl > case SessionStreamMessage . HandleMessageBox ( MessageBox ( messageId , m : MessageAck ) , clientData ) ⇒ < nl > emit ( outIncomingAck , m , pullIn ) < nl > diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala < nl > index 4947740 . . c7ce5ac 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala < nl > @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . session < nl > < nl > import akka . actor . { Stash , ActorRef , ActorLogging , Props } < nl > import akka . stream . actor . _ < nl > - import im . actor . server . mtproto . protocol . UpdateBox < nl > + import im . actor . server . mtproto . protocol . ProtoPush < nl > import im . actor . server . sequence . _ < nl > < nl > import scala . annotation . tailrec < nl > @ @ - 16 , 7 + 16 , 7 @ @ private [ session ] object UpdatesHandler { < nl > } < nl > < nl > private [ session ] class UpdatesHandler ( authId : Long ) < nl > - extends ActorSubscriber with ActorPublisher [ ( UpdateBox , Option [ String ] ) ] with ActorLogging with Stash { < nl > + extends ActorSubscriber with ActorPublisher [ ( ProtoPush , Option [ String ] ) ] with ActorLogging with Stash { < nl > < nl > import ActorPublisherMessage . _ < nl > import ActorSubscriberMessage . _ < nl > @ @ - 63 , 7 + 63 , 7 @ @ private [ session ] class UpdatesHandler ( authId : Long ) < nl > override val requestStrategy = WatermarkRequestStrategy ( 10 ) / / TODO : configurable < nl > < nl > / / Publisher - related < nl > - private [ this ] var messageQueue = immutable . Queue . empty [ ( UpdateBox , Option [ String ] ) ] < nl > + private [ this ] var messageQueue = immutable . Queue . empty [ ( ProtoPush , Option [ String ] ) ] < nl > < nl > def publisher : Receive = { < nl > case NewUpdate ( ub , reduceKey ) ⇒ enqueueProtoMessage ( ub , reduceKey ) < nl > @ @ - 71 , 7 + 71 , 7 @ @ private [ session ] class UpdatesHandler ( authId : Long ) < nl > case Cancel ⇒ context . stop ( self ) < nl > } < nl > < nl > - private def enqueueProtoMessage ( message : UpdateBox , reduceKey : Option [ String ] ) : Unit = { < nl > + private def enqueueProtoMessage ( message : ProtoPush , reduceKey : Option [ String ] ) : Unit = { < nl > if ( messageQueue . isEmpty & & totalDemand > 0 ) { < nl > onNext ( message → reduceKey ) < nl > } else { < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > index e4d48cb . . 5815768 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala < nl > @ @ - 105 , 7 + 105 , 7 @ @ final class SimpleServerE2eSpec extends ActorSuite ( < nl > val messageId = Random . nextLong ( ) < nl > < nl > val requestBytes = RequestCodec . encode ( Request ( RequestGetDifference ( 999 , Array ( ) ) ) ) . require < nl > - val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , RpcRequestBox ( requestBytes ) ) ) . require < nl > + val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , ProtoRpcRequest ( requestBytes ) ) ) . require < nl > val mtPackage = MTPackage ( authId , sessionId , mbBytes ) < nl > < nl > client . send ( mtPackage ) < nl > @ @ - 132 , 7 + 132 , 7 @ @ final class SimpleServerE2eSpec extends ActorSuite ( < nl > val messageId = Random . nextLong ( ) < nl > < nl > val requestBytes = RequestCodec . encode ( Request ( RequestEditParameter ( s " very l $ { " o " * 100 } ng key " , Some ( s " very lo $ { " n " * 100 } g value " ) ) ) ) . require < nl > - val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , RpcRequestBox ( requestBytes ) ) ) . require < nl > + val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , ProtoRpcRequest ( requestBytes ) ) ) . require < nl > val mtPackage = MTPackage ( authId , sessionId , mbBytes ) < nl > < nl > client . send ( mtPackage , slowly = true ) < nl > @ @ - 213 , 7 + 213 , 7 @ @ final class SimpleServerE2eSpec extends ActorSuite ( < nl > implicit val client = client2 < nl > signUp ( authId2 , sessionId2 , phoneNumber ) < nl > val requestBits = RequestCodec . encode ( Request ( RequestTerminateAllSessions ) ) . require < nl > - client . send ( MTPackage ( authId2 , Random . nextLong ( ) , MessageBoxCodec . encode ( MessageBox ( Random . nextLong , RpcRequestBox ( requestBits ) ) ) . require ) ) < nl > + client . send ( MTPackage ( authId2 , Random . nextLong ( ) , MessageBoxCodec . encode ( MessageBox ( Random . nextLong , ProtoRpcRequest ( requestBits ) ) ) . require ) ) < nl > } < nl > < nl > { < nl > @ @ - 244 , 7 + 244 , 7 @ @ final class SimpleServerE2eSpec extends ActorSuite ( < nl > val messageId = Random . nextLong ( ) < nl > < nl > val requestBytes = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ) ) . require < nl > - val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , RpcRequestBox ( requestBytes ) ) ) . require < nl > + val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , ProtoRpcRequest ( requestBytes ) ) ) . require < nl > val mtPackage = MTPackage ( authId , sessionId , mbBytes ) < nl > < nl > client . send ( mtPackage ) < nl > @ @ - 273 , 7 + 273 , 7 @ @ final class SimpleServerE2eSpec extends ActorSuite ( < nl > appKey = " appKey " , < nl > isSilent = false < nl > ) ) ) . require < nl > - val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , RpcRequestBox ( requestBytes ) ) ) . require < nl > + val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , ProtoRpcRequest ( requestBytes ) ) ) . require < nl > val mtPackage = MTPackage ( authId , sessionId , mbBytes ) < nl > < nl > client . send ( mtPackage ) < nl > @ @ - 333 , 9 + 333 , 9 @ @ final class SimpleServerE2eSpec extends ActorSuite ( < nl > < nl > private def receiveRpcResult ( messageId : Long ) ( implicit client : MTProtoClient ) : RpcResult = { < nl > val mb = receiveMessageBox ( ) < nl > - mb . body shouldBe an [ RpcResponseBox ] < nl > + mb . body shouldBe an [ ProtoRpcResponse ] < nl > < nl > - val rspBox = mb . body . asInstanceOf [ RpcResponseBox ] < nl > + val rspBox = mb . body . asInstanceOf [ ProtoRpcResponse ] < nl > rspBox . messageId should = = = ( messageId ) < nl > < nl > RpcResultCodec . decode ( rspBox . bodyBytes ) . require . value < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala < nl > index 22bae1d . . 73e4873 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala < nl > @ @ - 82 , 7 + 82 , 7 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { < nl > protected def expectUpdateBox [ T < : im . actor . api . rpc . UpdateBox ] ( clazz : Class [ T ] , authId : Long , sessionId : Long , sendAckAt : Option [ Duration ] ) ( implicit probe : TestProbe , m : Manifest [ T ] ) : T = { < nl > val mb = expectMessageBox ( ) < nl > < nl > - val update = UpdateBoxCodec . decode ( mb . body . asInstanceOf [ UpdateBox ] . bodyBytes ) . require . value < nl > + val update = UpdateBoxCodec . decode ( mb . body . asInstanceOf [ ProtoPush ] . bodyBytes ) . require . value < nl > < nl > sendAckAt map { delay ⇒ < nl > Future { < nl > @ @ - 117 , 7 + 117 , 7 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { < nl > ackIds shouldEqual expectAckFor < nl > < nl > rest match { < nl > - case Vector ( ( messageId , RpcResponseBox ( _ , rpcResultBytes ) ) ) ⇒ < nl > + case Vector ( ( messageId , ProtoRpcResponse ( _ , rpcResultBytes ) ) ) ⇒ < nl > sendAckAt map { delay ⇒ < nl > Future { < nl > blocking { < nl > @ @ - 204 , 7 + 204 , 7 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { < nl > } < nl > < nl > protected def sendRequest ( authId : Long , sessionId : Long , session : ActorRef , messageId : Long , request : RpcRequest ) ( implicit probe : TestProbe ) : Unit = { < nl > - val rqBox = RpcRequestBox ( RequestCodec . encode ( Request ( request ) ) . require ) < nl > + val rqBox = ProtoRpcRequest ( RequestCodec . encode ( Request ( request ) ) . require ) < nl > sendMessageBox ( authId , sessionId , session , messageId , rqBox ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendLargeSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendLargeSpec . scala < nl > index 62e56a9 . . 046af3c 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendLargeSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendLargeSpec . scala < nl > @ @ - 6 , 7 + 6 , 7 @ @ import im . actor . api . rpc . _ < nl > import im . actor . api . rpc . auth . { RequestSendAuthCodeObsolete , ResponseSendAuthCodeObsolete } < nl > import im . actor . api . rpc . codecs . RequestCodec < nl > import im . actor . server . ActorSpecification < nl > - import im . actor . server . mtproto . protocol . { RequestResend , RpcRequestBox , UnsentResponse } < nl > + import im . actor . server . mtproto . protocol . { RequestResend , ProtoRpcRequest $ , UnsentResponse } < nl > < nl > import scala . concurrent . duration . _ < nl > import scala . util . Random < nl > @ @ - 38 , 7 + 38 , 7 @ @ final class SessionResendLargeSpec extends BaseSessionSpec ( < nl > val requestMessageId = Random . nextLong ( ) < nl > < nl > val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333333L , 1 , " apiKey " ) ) ) . require < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , requestMessageId , RpcRequestBox ( encodedRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , requestMessageId , ProtoRpcRequest ( encodedRequest ) ) < nl > < nl > expectNewSession ( authId , sessionId , requestMessageId ) < nl > expectMessageAck ( requestMessageId ) < nl > @ @ - 76 , 7 + 76 , 7 @ @ final class SessionResendLargeSpec extends BaseSessionSpec ( < nl > val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333333L , 1 , " apiKey " ) ) ) . require < nl > < nl > for ( _ ← 1 to 100 ) < nl > - TestProbe ( ) . send ( session , handleMessageBox ( Random . nextLong ( ) , RpcRequestBox ( encodedRequest ) ) ) < nl > + TestProbe ( ) . send ( session , handleMessageBox ( Random . nextLong ( ) , ProtoRpcRequest ( encodedRequest ) ) ) < nl > < nl > watchProbe . expectTerminated ( session ) < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > index 3deff79 . . a0a5c26 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala < nl > @ @ - 49 , 7 + 49 , 7 @ @ final class SessionResendSpec extends BaseSessionSpec ( < nl > val messageId = Random . nextLong ( ) < nl > < nl > val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333333L , 1 , " apiKey " ) ) ) . require < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedRequest ) ) < nl > < nl > ignoreNewSession ( ) < nl > expectMessageAck ( messageId ) < nl > @ @ - 91 , 7 + 91 , 7 @ @ final class SessionResendSpec extends BaseSessionSpec ( < nl > implicit val probe = TestProbe ( ) < nl > < nl > val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333333L , 1 , " apiKey " ) ) ) . require < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedRequest ) ) < nl > < nl > expectNewSession ( authId , sessionId , messageId ) < nl > < nl > @ @ - 133 , 7 + 133 , 7 @ @ final class SessionResendSpec extends BaseSessionSpec ( < nl > { < nl > val messageId = Random . nextLong ( ) < nl > val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333333L , 1 , " apiKey " ) ) ) . require < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedRequest ) ) < nl > expectMessageAck ( messageId ) < nl > val mb = expectMessageBox ( ) < nl > sendMessageBox ( authId , sessionId , sessionRegion . ref , Random . nextLong ( ) , MessageAck ( Vector ( mb . messageId ) ) ) < nl > @ @ - 144 , 7 + 144 , 7 @ @ final class SessionResendSpec extends BaseSessionSpec ( < nl > { < nl > val messageId = Random . nextLong ( ) < nl > val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333333L , 1 , " apiKey " ) ) ) . require < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedRequest ) ) < nl > expectMessageAck ( messageId ) < nl > val mb = expectMessageBox ( ) < nl > < nl > @ @ - 283 , 7 + 283 , 7 @ @ final class SessionResendSpec extends BaseSessionSpec ( < nl > val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ) ) . require < nl > < nl > val getSeqMessageId = Random . nextLong ( ) < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , getSeqMessageId , RpcRequestBox ( encodedGetSeqRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , getSeqMessageId , ProtoRpcRequest ( encodedGetSeqRequest ) ) < nl > expectMessageAck ( getSeqMessageId ) < nl > expectRpcResult ( authId , sessionId ) should matchPattern { < nl > case RpcOk ( ResponseSeq ( _ , _ ) ) ⇒ < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > index 7947409 . . 369beba 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > @ @ - 61 , 7 + 61 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > val messageId = Random . nextLong ( ) < nl > < nl > val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333333L , 1 , " apiKey " ) ) ) . require < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedRequest ) ) < nl > < nl > expectNewSession ( authId , sessionId , messageId ) < nl > probe . receiveOne ( 1 . second ) < nl > @ @ - 75 , 7 + 75 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > val messageId = Random . nextLong ( ) < nl > < nl > val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333334L , 1 , " apiKey " ) ) ) . require < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedRequest ) ) < nl > < nl > expectNewSession ( authId , sessionId , messageId ) < nl > expectMessageAck ( messageId ) < nl > @ @ - 93 , 7 + 93 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > val phoneNumber = 75550000000L < nl > < nl > val encodedCodeRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ) ) . require < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , RpcRequestBox ( encodedCodeRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , ProtoRpcRequest ( encodedCodeRequest ) ) < nl > < nl > expectNewSession ( authId , sessionId , firstMessageId ) < nl > expectMessageAck ( firstMessageId ) < nl > @ @ - 113 , 7 + 113 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > ) ) ) . require < nl > < nl > val secondMessageId = Random . nextLong ( ) < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , secondMessageId , RpcRequestBox ( encodedSignUpRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , secondMessageId , ProtoRpcRequest ( encodedSignUpRequest ) ) < nl > expectMessageAck ( secondMessageId ) < nl > < nl > expectRpcResult ( authId , sessionId ) should matchPattern { < nl > @ @ - 123 , 7 + 123 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > val encodedSignOutRequest = RequestCodec . encode ( Request ( RequestSignOut ) ) . require < nl > < nl > val thirdMessageId = Random . nextLong ( ) < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , RpcRequestBox ( encodedSignOutRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , ProtoRpcRequest ( encodedSignOutRequest ) ) < nl > < nl > expectMessageAck ( thirdMessageId ) < nl > expectRpcResult ( authId , sessionId ) should matchPattern { < nl > @ @ - 139 , 7 + 139 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > val phoneNumber = 75550000000L < nl > < nl > val encodedCodeRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ) ) . require < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , RpcRequestBox ( encodedCodeRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , ProtoRpcRequest ( encodedCodeRequest ) ) < nl > < nl > expectNewSession ( authId , sessionId , firstMessageId ) < nl > expectMessageAck ( firstMessageId ) < nl > @ @ - 159 , 7 + 159 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > ) ) ) . require < nl > < nl > val secondMessageId = Random . nextLong ( ) < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , secondMessageId , RpcRequestBox ( encodedSignUpRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , secondMessageId , ProtoRpcRequest ( encodedSignUpRequest ) ) < nl > < nl > expectMessageAck ( secondMessageId ) < nl > < nl > @ @ - 174 , 7 + 174 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ) ) . require < nl > < nl > val thirdMessageId = Random . nextLong ( ) < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , RpcRequestBox ( encodedGetSeqRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , ProtoRpcRequest ( encodedGetSeqRequest ) ) < nl > < nl > expectMessageAck ( thirdMessageId ) < nl > expectRpcResult ( authId , sessionId ) should matchPattern { < nl > @ @ - 196 , 7 + 196 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ) ) . require < nl > < nl > val thirdMessageId = Random . nextLong ( ) < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , RpcRequestBox ( encodedGetSeqRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , ProtoRpcRequest ( encodedGetSeqRequest ) ) < nl > < nl > ignoreNewSession ( ) < nl > expectMessageAck ( thirdMessageId ) < nl > @ @ - 222 , 7 + 222 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > val phoneNumber = 75550000000L < nl > < nl > val encodedCodeRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ) ) . require < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , RpcRequestBox ( encodedCodeRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , ProtoRpcRequest ( encodedCodeRequest ) ) < nl > < nl > expectNewSession ( authId , sessionId , firstMessageId ) < nl > expectMessageAck ( firstMessageId ) < nl > @ @ - 242 , 7 + 242 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > ) ) ) . require < nl > < nl > val secondMessageId = Random . nextLong ( ) < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , secondMessageId , RpcRequestBox ( encodedSignUpRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , secondMessageId , ProtoRpcRequest ( encodedSignUpRequest ) ) < nl > < nl > expectMessageAck ( secondMessageId ) < nl > < nl > @ @ - 267 , 7 + 267 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > val phoneNumber = 75550000000L < nl > < nl > val encodedCodeRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ) ) . require < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , RpcRequestBox ( encodedCodeRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , ProtoRpcRequest ( encodedCodeRequest ) ) < nl > < nl > expectNewSession ( authId , sessionId , firstMessageId ) < nl > expectMessageAck ( firstMessageId ) < nl > @ @ - 288 , 7 + 288 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > ) ) ) . require < nl > < nl > val messageId = Random . nextLong ( ) < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedSignUpRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedSignUpRequest ) ) < nl > < nl > expectMessageAck ( messageId ) < nl > < nl > @ @ - 305 , 7 + 305 , 7 @ @ final class SessionSpec extends BaseSessionSpec { < nl > val encodedSubscribeRequest = RequestCodec . encode ( Request ( RequestSubscribeToOnline ( Vector ( ApiUserOutPeer ( userForSubscribe , 0L ) ) ) ) ) . require < nl > < nl > val messageId = Random . nextLong ( ) < nl > - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedSubscribeRequest ) ) < nl > + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedSubscribeRequest ) ) < nl > < nl > expectMessageAck ( messageId )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / api / frontend / SessionClient . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / api / frontend / SessionClient . scala < nl > index a993d97 . . 8bbe960 100644 < nl > - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / api / frontend / SessionClient . scala < nl > + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / api / frontend / SessionClient . scala < nl > @ @ - 6 , 14 + 6 , 16 @ @ import scala . collection . immutable < nl > import akka . actor . _ < nl > import akka . stream . actor . ActorPublisher < nl > import akka . stream . actor . ActorPublisherMessage . { Cancel , Request } < nl > + import com . google . protobuf . ByteString < nl > import scodec . bits . BitVector < nl > < nl > import im . actor . server . mtproto . codecs . protocol . MessageBoxCodec < nl > - import im . actor . server . mtproto . protocol . { SessionLost , MessageBox } < nl > + import im . actor . server . mtproto . protocol . { MessageBox , SessionLost } < nl > import im . actor . server . mtproto . { transport ⇒ T } < nl > - import im . actor . server . session . { SessionMessage , SessionRegion } < nl > + import im . actor . server . session . { HandleMessageBox , SessionEnvelope , SessionRegion } < nl > < nl > private [ frontend ] object SessionClient { < nl > + < nl > @ SerialVersionUID ( 1L ) < nl > case class SendToSession ( p : T . MTPackage ) < nl > < nl > @ @ - 21 , 6 + 23 , 7 @ @ private [ frontend ] object SessionClient { < nl > } < nl > < nl > private [ frontend ] class SessionClient ( sessionRegion : SessionRegion ) extends Actor with ActorLogging with ActorPublisher [ T . MTProto ] { < nl > + < nl > import SessionClient . SendToSession < nl > < nl > private [ this ] var packageQueue = immutable . Queue . empty [ T . MTProto ] < nl > @ @ - 29 , 7 + 32 , 7 @ @ private [ frontend ] class SessionClient ( sessionRegion : SessionRegion ) extends Acto < nl > < nl > def watchForSession : Receive = publisher orElse { < nl > case SendToSession ( T . MTPackage ( authId , sessionId , messageBytes ) ) ⇒ < nl > - sessionRegion . ref ! SessionMessage . envelope ( authId , sessionId , SessionMessage . HandleMessageBox ( messageBytes . toByteArray ) ) < nl > + sessionRegion . ref ! SessionEnvelope ( authId , sessionId ) . withHandleMessageBox ( HandleMessageBox ( ByteString . copyFrom ( messageBytes . toByteBuffer ) ) ) < nl > case p : T . MTPackage ⇒ < nl > context . watch ( sender ( ) ) < nl > enqueuePackage ( p ) < nl > @ @ - 38 , 7 + 41 , 7 @ @ private [ frontend ] class SessionClient ( sessionRegion : SessionRegion ) extends Acto < nl > < nl > def working ( authId : Long , sessionId : Long ) : Receive = publisher orElse { < nl > case SendToSession ( T . MTPackage ( authId , sessionId , messageBytes ) ) ⇒ < nl > - sessionRegion . ref ! SessionMessage . envelope ( authId , sessionId , SessionMessage . HandleMessageBox ( messageBytes . toByteArray ) ) < nl > + sessionRegion . ref ! SessionEnvelope ( authId , sessionId ) . withHandleMessageBox ( HandleMessageBox ( ByteString . copyFrom ( messageBytes . toByteBuffer ) ) ) < nl > case p @ T . MTPackage ( authId , sessionId , mbBits : BitVector ) ⇒ < nl > enqueuePackage ( p ) < nl > case Terminated ( sessionRef ) ⇒ < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > index 8daa465 . . 9c9823a 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala < nl > @ @ - 25 , 8 + 25 , 7 @ @ import im . actor . server . models . { AuthEmailTransaction , AuthPhoneTransaction , User < nl > import im . actor . server . persist . auth . AuthTransaction < nl > import im . actor . server . push . SeqUpdatesManager . _ < nl > import im . actor . server . push . SeqUpdatesManagerRegion < nl > - import im . actor . server . session . SessionMessage . AuthorizeUserAck < nl > - import im . actor . server . session . { SessionMessage , SessionRegion } < nl > + import im . actor . server . session . _ < nl > import im . actor . server . social . SocialManager . _ < nl > import im . actor . server . user . { UserOfficeRegion , UserOffice } < nl > import im . actor . server . util . IdUtils . _ < nl > @ @ - 162 , 8 + 161 , 8 @ @ trait AuthHelpers extends Helpers { < nl > for { < nl > _ ← UserOffice . auth ( userId , clientData . authId ) < nl > ack ← sessionRegion . ref < nl > - . ask ( SessionMessage . envelope ( SessionMessage . AuthorizeUser ( userId ) ) ( clientData ) ) < nl > - . mapTo [ SessionMessage . AuthorizeUserAck ] < nl > + . ask ( SessionEnvelope ( clientData . authId , clientData . sessionId ) . withAuthorizeUser ( AuthorizeUser ( userId ) ) ) < nl > + . mapTo [ AuthorizeUserAck ] < nl > } yield ack < nl > } < nl > < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > index 4f52c2b . . 75424c6 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala < nl > @ @ - 520 , 8 + 520 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation , mediator : ActorRef ) < nl > result match { < nl > case Ok ( r : ResponseAuth ) ⇒ < nl > UserOffice . auth ( r . user . id , clientData . authId ) < nl > - sessionRegion . ref ! SessionMessage . envelope ( SessionMessage . AuthorizeUser ( r . user . id ) ) ( clientData ) < nl > - < nl > + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) . withAuthorizeUser ( AuthorizeUser ( r . user . id ) ) < nl > case _ ⇒ < nl > } < nl > < nl > diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > index 8288608 . . d1df1e8 100644 < nl > - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala < nl > @ @ - 15 , 7 + 15 , 7 @ @ import im . actor . api . rpc . sequence . { DifferenceUpdate , ResponseGetDifference , Sequ < nl > import im . actor . server . models < nl > import im . actor . server . models . sequence . SeqUpdate < nl > import im . actor . server . push . { SeqUpdatesManager , SeqUpdatesManagerRegion } < nl > - import im . actor . server . session . { SessionMessage , SessionRegion } < nl > + import im . actor . server . session . _ < nl > import im . actor . server . util . { AnyRefLogSource , GroupUtils , UserUtils } < nl > < nl > class SequenceServiceImpl ( config : SequenceServiceConfig ) ( < nl > @ @ - 86 , 11 + 86 , 8 @ @ class SequenceServiceImpl ( config : SequenceServiceConfig ) ( < nl > / / FIXME : # security check access hashes < nl > val userIds = users . map ( _ . userId ) . toSet < nl > < nl > - sessionRegion . ref ! SessionMessage . envelope ( < nl > - clientData . authId , < nl > - clientData . sessionId , < nl > - SessionMessage . SubscribeToOnline ( userIds ) < nl > - ) < nl > + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) < nl > + . withSubscribeToOnline ( ( SubscribeToOnline ( userIds . toSeq ) ) ) < nl > } < nl > } < nl > < nl > @ @ - 104 , 27 + 101 , 26 @ @ class SequenceServiceImpl ( config : SequenceServiceConfig ) ( < nl > / / FIXME : # security check access hashes < nl > val userIds = users . map ( _ . userId ) . toSet < nl > < nl > - sessionRegion . ref ! SessionMessage . envelope ( < nl > - clientData . authId , < nl > - clientData . sessionId , < nl > - SessionMessage . SubscribeFromOnline ( userIds ) < nl > - ) < nl > + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) < nl > + . withSubscribeFromOnline ( SubscribeFromOnline ( userIds . toSeq ) ) < nl > } < nl > } < nl > < nl > - override def jhandleSubscribeFromGroupOnline ( groups : Vector [ GroupOutPeer ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { < nl > + override def jhandleSubscribeToGroupOnline ( groups : Vector [ GroupOutPeer ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { < nl > Future . successful ( Ok ( ResponseVoid ) ) andThen { < nl > case _ ⇒ < nl > / / FIXME : # security check access hashes < nl > - sessionRegion . ref ! SessionMessage . envelope ( clientData . authId , clientData . sessionId , SessionMessage . SubscribeFromGroupOnline ( groups . map ( _ . groupId ) . toSet ) ) < nl > + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) < nl > + . withSubscribeToGroupOnline ( SubscribeToGroupOnline ( groups . map ( _ . groupId ) ) ) < nl > } < nl > } < nl > < nl > - override def jhandleSubscribeToGroupOnline ( groups : Vector [ GroupOutPeer ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { < nl > + override def jhandleSubscribeFromGroupOnline ( groups : Vector [ GroupOutPeer ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { < nl > Future . successful ( Ok ( ResponseVoid ) ) andThen { < nl > case _ ⇒ < nl > / / FIXME : # security check access hashes < nl > - sessionRegion . ref ! SessionMessage . envelope ( clientData . authId , clientData . sessionId , SessionMessage . SubscribeToGroupOnline ( groups . map ( _ . groupId ) . toSet ) ) < nl > + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) < nl > + . withSubscribeFromGroupOnline ( SubscribeFromGroupOnline ( groups . map ( _ . groupId ) ) ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - session - messages / src / main / protobuf / session . proto b / actor - server / actor - session - messages / src / main / protobuf / session . proto < nl > new file mode 100644 < nl > index 0000000 . . d0f2a79 < nl > - - - / dev / null < nl > + + + b / actor - server / actor - session - messages / src / main / protobuf / session . proto < nl > @ @ - 0 , 0 + 1 , 58 @ @ < nl > + syntax = " proto2 " ; < nl > + < nl > + package im . actor . server ; < nl > + < nl > + option ( scalapb . options ) = { < nl > + import : " im . actor . server . api . TypeMappers . _ " < nl > + import : " scala . collection . JavaConversions . _ " < nl > + } ; < nl > + < nl > + import " scalapb / scalapb . proto " ; < nl > + < nl > + message SessionEnvelope { < nl > + required int64 auth _ id = 1 ; < nl > + required int64 session _ id = 2 ; < nl > + < nl > + oneof payload { < nl > + HandleMessageBox handle _ message _ box = 3 ; < nl > + AuthorizeUser authorize _ user = 4 ; < nl > + SubscribeToOnline subscribe _ to _ online = 5 ; < nl > + SubscribeFromOnline subscribe _ from _ online = 6 ; < nl > + SubscribeToGroupOnline subscribe _ to _ group _ online = 7 ; < nl > + SubscribeFromGroupOnline subscribe _ from _ group _ online = 8 ; < nl > + } < nl > + } < nl > + < nl > + message HandleMessageBox { < nl > + option ( scalapb . message ) . extends = " im . actor . server . session . SessionMessage " ; < nl > + required bytes message _ box _ bytes = 1 ; < nl > + } < nl > + < nl > + message AuthorizeUser { < nl > + option ( scalapb . message ) . extends = " im . actor . server . session . SessionMessage " ; < nl > + required int32 user _ id = 1 ; < nl > + } < nl > + < nl > + message AuthorizeUserAck { < nl > + option ( scalapb . message ) . extends = " im . actor . server . session . SessionResponse " ; < nl > + } < nl > + < nl > + message SubscribeToOnline { < nl > + option ( scalapb . message ) . extends = " im . actor . server . session . SubscribeCommand " ; < nl > + repeated int32 user _ ids = 1 ; < nl > + } < nl > + < nl > + message SubscribeFromOnline { < nl > + option ( scalapb . message ) . extends = " im . actor . server . session . SubscribeCommand " ; < nl > + repeated int32 user _ ids = 1 ; < nl > + } < nl > + < nl > + message SubscribeToGroupOnline { < nl > + option ( scalapb . message ) . extends = " im . actor . server . session . SubscribeCommand " ; < nl > + repeated int32 group _ ids = 1 ; < nl > + } < nl > + < nl > + message SubscribeFromGroupOnline { < nl > + option ( scalapb . message ) . extends = " im . actor . server . session . SubscribeCommand " ; < nl > + repeated int32 group _ ids = 1 ; < nl > + } < nl > \ No newline at end of file < nl > diff - - git a / actor - server / actor - session - messages / src / main / scala / im / actor / server / session / SessionMessage . scala b / actor - server / actor - session - messages / src / main / scala / im / actor / server / session / SessionMessage . scala < nl > index c170424 . . 1feec36 100644 < nl > - - - a / actor - server / actor - session - messages / src / main / scala / im / actor / server / session / SessionMessage . scala < nl > + + + b / actor - server / actor - session - messages / src / main / scala / im / actor / server / session / SessionMessage . scala < nl > @ @ - 2 , 43 + 2 , 23 @ @ package im . actor . server . session < nl > < nl > import akka . actor . ActorRef < nl > < nl > - import im . actor . api . rpc . BaseClientData < nl > - import im . actor . server . mtproto . protocol . ProtoMessage < nl > + import im . actor . server . commons . serialization . ActorSerializer < nl > < nl > case class SessionRegion ( ref : ActorRef ) < nl > < nl > - sealed trait SessionMessage < nl > - sealed trait SubscribeCommand extends SessionMessage < nl > - sealed trait SessionResponse < nl > - < nl > object SessionMessage { < nl > - @ SerialVersionUID ( 1L ) < nl > - private [ session ] case class Envelope ( authId : Long , sessionId : Long , message : SessionMessage ) < nl > - < nl > - @ SerialVersionUID ( 1L ) < nl > - case class HandleMessageBox ( messageBoxBytes : Array [ Byte ] ) extends SessionMessage < nl > - < nl > - @ SerialVersionUID ( 1L ) < nl > - case class AuthorizeUser ( userId : Int ) extends SessionMessage < nl > - < nl > - @ SerialVersionUID ( 1L ) < nl > - case class SubscribeToOnline ( userIds : Set [ Int ] ) extends SubscribeCommand < nl > - < nl > - @ SerialVersionUID ( 1L ) < nl > - case class SubscribeFromOnline ( userIds : Set [ Int ] ) extends SubscribeCommand < nl > - < nl > - @ SerialVersionUID ( 1L ) < nl > - case class SubscribeToGroupOnline ( groupIds : Set [ Int ] ) extends SubscribeCommand < nl > - < nl > - @ SerialVersionUID ( 1L ) < nl > - case class SubscribeFromGroupOnline ( groupIds : Set [ Int ] ) extends SubscribeCommand < nl > + def register ( ) : Unit = { < nl > + ActorSerializer . register ( 100 , classOf [ SessionEnvelope ] ) < nl > + ActorSerializer . register ( 101 , classOf [ SubscribeToOnline ] ) < nl > + ActorSerializer . register ( 102 , classOf [ SubscribeFromOnline ] ) < nl > + ActorSerializer . register ( 103 , classOf [ SubscribeToGroupOnline ] ) < nl > + ActorSerializer . register ( 104 , classOf [ SubscribeFromGroupOnline ] ) < nl > + ActorSerializer . register ( 105 , classOf [ AuthorizeUserAck ] ) < nl > + } < nl > + } < nl > < nl > - @ SerialVersionUID ( 1L ) < nl > - case class AuthorizeUserAck ( userId : Int ) extends SessionResponse < nl > + trait SessionMessage < nl > < nl > - def envelope ( authId : Long , sessionId : Long , message : SessionMessage ) : Envelope = < nl > - Envelope ( authId , sessionId , message ) < nl > + trait SubscribeCommand extends SessionMessage < nl > < nl > - def envelope ( message : SessionMessage ) ( implicit clientData : BaseClientData ) : Envelope = < nl > - envelope ( clientData . authId , clientData . sessionId , message ) < nl > - } < nl > \ No newline at end of file < nl > + trait SessionResponse < nl > diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala < nl > index f0a0e6f . . 1eee63a 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala < nl > @ @ - 2 , 16 + 2 , 14 @ @ package im . actor . server . session < nl > < nl > import java . util . concurrent . TimeUnit < nl > < nl > - import im . actor . server . api . rpc . service . auth . { AuthEvents , AuthService } < nl > - < nl > import scala . collection . immutable < nl > import scala . concurrent . ExecutionContext < nl > import scala . concurrent . duration . _ < nl > < nl > - import akka . pattern . pipe < nl > import akka . actor . _ < nl > import akka . contrib . pattern . ShardRegion . Passivate < nl > - import akka . contrib . pattern . { DistributedPubSubMediator , ClusterSharding , ShardRegion } < nl > + import akka . contrib . pattern . { ClusterSharding , DistributedPubSubMediator , ShardRegion } < nl > + import akka . pattern . pipe < nl > import akka . stream . Materializer < nl > import akka . stream . actor . _ < nl > import akka . stream . scaladsl . _ < nl > @ @ - 21 , 6 + 19 , 7 @ @ import scodec . bits . BitVector < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > import im . actor . api . rpc . ClientData < nl > + import im . actor . server . api . rpc . service . auth . { AuthEvents , AuthService } < nl > import im . actor . server . mtproto . codecs . protocol . MessageBoxCodec < nl > import im . actor . server . mtproto . protocol . _ < nl > import im . actor . server . mtproto . transport . { Drop , MTPackage } < nl > @ @ - 41 , 14 + 40 , 14 @ @ object SessionConfig { < nl > < nl > object Session { < nl > < nl > - import SessionMessage . _ < nl > + SessionMessage . register ( ) < nl > < nl > private [ this ] val idExtractor : ShardRegion . IdExtractor = { < nl > - case env @ Envelope ( authId , sessionId , payload ) ⇒ ( authId . toString + " - " + sessionId . toString , env ) < nl > + case env @ SessionEnvelope ( authId , sessionId , payload ) ⇒ ( authId . toString + " - " + sessionId . toString , env ) < nl > } < nl > < nl > private [ this ] val shardResolver : ShardRegion . ShardResolver = msg ⇒ msg match { < nl > - case Envelope ( authId , sessionId , _ ) ⇒ ( authId % 32 ) . toString / / TODO : configurable < nl > + case SessionEnvelope ( authId , sessionId , _ ) ⇒ ( authId % 32 ) . toString / / TODO : configurable < nl > } < nl > < nl > def startRegion ( props : Option [ Props ] ) ( implicit system : ActorSystem ) : SessionRegion = < nl > @ @ - 98 , 7 + 97 , 7 @ @ class Session ( mediator : ActorRef ) ( < nl > ) < nl > extends Actor with ActorLogging with MessageIdHelper with Stash { < nl > < nl > - import SessionMessage . _ < nl > + import SessionEnvelope . Payload < nl > < nl > implicit val ec : ExecutionContext = context . dispatcher < nl > < nl > @ @ - 116 , 7 + 115 , 7 @ @ class Session ( mediator : ActorRef ) ( < nl > def receive = waitingForEnvelope < nl > < nl > def waitingForEnvelope : Receive = { < nl > - case env @ Envelope ( authId , sessionId , _ ) ⇒ < nl > + case env @ SessionEnvelope ( authId , sessionId , _ ) ⇒ < nl > val replyTo = sender ( ) < nl > stash ( ) < nl > < nl > @ @ - 173 , 10 + 172 , 10 @ @ class Session ( mediator : ActorRef ) ( < nl > } < nl > < nl > def anonymous ( authId : Long , sessionId : Long ) : Receive = { < nl > - case env @ Envelope ( authId , sessionId , HandleMessageBox ( messageBoxBytes ) ) ⇒ < nl > + case env @ SessionEnvelope ( authId , sessionId , Payload . HandleMessageBox ( HandleMessageBox ( messageBoxBytes ) ) ) ⇒ < nl > val client = sender ( ) < nl > < nl > - withValidMessageBox ( client , messageBoxBytes ) { mb ⇒ < nl > + withValidMessageBox ( client , messageBoxBytes . toByteArray ) { mb ⇒ < nl > val sessionMessagePublisher = context . actorOf ( SessionMessagePublisher . props ( ) , " messagePublisher " ) < nl > val rpcHandler = context . actorOf ( RpcHandler . props , " rpcHandler " ) < nl > val updatesHandler = context . actorOf ( UpdatesHandler . props ( authId ) , " updatesHandler " ) < nl > @ @ - 193 , 8 + 192 , 8 @ @ class Session ( mediator : ActorRef ) ( < nl > < nl > / / format : OFF < nl > < nl > - source ~ > g ~ > bcast ~ > sink < nl > - bcast ~ > Sink . onComplete { _ ⇒ log . warning ( " Dying due to stream completion " ) ; self ! PoisonPill } < nl > + source ~ > g ~ > bcast ~ > sink < nl > + bcast ~ > Sink . onComplete { _ ⇒ log . warning ( " Dying due to stream completion " ) ; self ! PoisonPill } < nl > < nl > / / format : ON < nl > } < nl > @ @ - 212 , 7 + 211 , 7 @ @ class Session ( mediator : ActorRef ) ( < nl > } < nl > < nl > def resolved ( authId : Long , sessionId : Long , publisher : ActorRef , reSender : ActorRef ) : Receive = { < nl > - case env @ Envelope ( eauthId , esessionId , msg ) ⇒ < nl > + case env @ SessionEnvelope ( eauthId , esessionId , ( msg ) ) ⇒ < nl > val client = sender ( ) < nl > < nl > if ( authId ! = eauthId | | sessionId ! = esessionId ) / / Should never happen < nl > @ @ - 235 , 25 + 234 , 34 @ @ class Session ( mediator : ActorRef ) ( < nl > authId : Long , < nl > sessionId : Long , < nl > client : ActorRef , < nl > - message : SessionMessage , < nl > + message : Payload , < nl > publisher : ActorRef , < nl > reSender : ActorRef < nl > ) : Unit = { < nl > message match { < nl > - case HandleMessageBox ( messageBoxBytes ) ⇒ < nl > - withValidMessageBox ( client , messageBoxBytes ) { mb ⇒ < nl > + case Payload . HandleMessageBox ( HandleMessageBox ( messageBoxBytes ) ) ⇒ < nl > + withValidMessageBox ( client , messageBoxBytes . toByteArray ) { mb ⇒ < nl > recordClient ( client , reSender ) < nl > publisher ! Tuple2 ( mb , ClientData ( authId , sessionId , optUserId ) ) < nl > } < nl > - case cmd : SubscribeCommand ⇒ < nl > + case _ : Payload . SubscribeToOnline | _ : Payload . SubscribeFromOnline | _ : Payload . SubscribeToGroupOnline | _ : Payload . SubscribeFromGroupOnline ⇒ < nl > + val cmd : SubscribeCommand = < nl > + message . subscribeToOnline < nl > + . orElse ( message . subscribeFromOnline ) < nl > + . orElse ( message . subscribeToGroupOnline ) < nl > + . orElse ( message . subscribeFromGroupOnline ) < nl > + . get < nl > + < nl > publisher ! cmd < nl > - case AuthorizeUser ( userId ) ⇒ < nl > + case Payload . AuthorizeUser ( AuthorizeUser ( userId ) ) ⇒ < nl > log . debug ( " User { } authorized session { } " , userId , sessionId ) < nl > < nl > this . optUserId = Some ( userId ) < nl > < nl > / / TODO : handle errors < nl > - db . run ( persist . SessionInfo . updateUserId ( authId , sessionId , this . optUserId ) . map ( _ ⇒ AuthorizeUserAck ( userId ) ) ) pipeTo sender ( ) < nl > + db . run ( persist . SessionInfo . updateUserId ( authId , sessionId , this . optUserId ) . map ( _ ⇒ AuthorizeUserAck ( ) ) ) pipeTo sender ( ) < nl > + case unmatched ⇒ < nl > + log . error ( " Unmatched session message { } " , unmatched ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala < nl > index 0a213d7 . . 97dbc24 100644 < nl > - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala < nl > + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala < nl > @ @ - 9 , 7 + 9 , 6 @ @ import akka . stream . actor . _ < nl > import im . actor . server . mtproto . protocol . { ProtoMessage , UpdateBox } < nl > import im . actor . server . presences . { GroupPresenceManagerRegion , PresenceManagerRegion } < nl > import im . actor . server . push . _ < nl > - import im . actor . server . session . SessionMessage . _ < nl > < nl > private [ session ] object UpdatesHandler { < nl > def props ( authId : Long ) ( < nl > @ @ - 45 , 13 + 44 , 13 @ @ private [ session ] class UpdatesHandler ( authId : Long ) ( < nl > case OnNext ( cmd : SubscribeCommand ) ⇒ < nl > cmd match { < nl > case SubscribeToOnline ( userIds ) ⇒ < nl > - updatesConsumer ! SubscribeToUserPresences ( userIds ) < nl > + updatesConsumer ! SubscribeToUserPresences ( userIds . toSet ) < nl > case SubscribeFromOnline ( userIds ) ⇒ < nl > - updatesConsumer ! UnsubscribeFromUserPresences ( userIds ) < nl > + updatesConsumer ! UnsubscribeFromUserPresences ( userIds . toSet ) < nl > case SubscribeToGroupOnline ( groupIds ) ⇒ < nl > - updatesConsumer ! SubscribeToGroupPresences ( groupIds ) < nl > + updatesConsumer ! SubscribeToGroupPresences ( groupIds . toSet ) < nl > case SubscribeFromGroupOnline ( groupIds ) ⇒ < nl > - updatesConsumer ! UnsubscribeFromGroupPresences ( groupIds ) < nl > + updatesConsumer ! UnsubscribeFromGroupPresences ( groupIds . toSet ) < nl > } < nl > case OnComplete ⇒ < nl > context . stop ( self ) < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala < nl > index f2ea4c9 . . 60c2a24 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala < nl > @ @ - 11 , 7 + 11 , 7 @ @ import scala . util . Random < nl > import scalaz . \ / < nl > < nl > import akka . contrib . pattern . DistributedPubSubExtension < nl > - import com . google . protobuf . CodedInputStream < nl > + import com . google . protobuf . { ByteString , CodedInputStream } < nl > import org . scalatest . Inside . _ < nl > import im . actor . server . models < nl > < nl > @ @ - 29 , 9 + 29 , 8 @ @ import im . actor . server . mtproto . protocol . { MessageBox , SessionHello } < nl > import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } < nl > import im . actor . server . persist . auth . AuthTransaction < nl > import im . actor . server . presences . { GroupPresenceManager , PresenceManager } < nl > - import im . actor . server . push . { SeqUpdatesManager , WeakUpdatesManager } < nl > - import im . actor . server . session . SessionMessage . _ < nl > - import im . actor . server . session . { Session , SessionConfig } < nl > + import im . actor . server . push . WeakUpdatesManager < nl > + import im . actor . server . session . { SessionEnvelope , HandleMessageBox , Session , SessionConfig } < nl > import im . actor . server . sms . AuthSmsEngine < nl > import im . actor . server . social . SocialManager < nl > import im . actor . server . user . { UserOfficeRegion , UserOffice } < nl > @ @ - 862 , 8 + 861 , 8 @ @ class AuthServiceSpec extends BaseAppSuite { < nl > } < nl > < nl > private def sendSessionHello ( authId : Long , sessionId : Long ) : Unit = { < nl > - val message = HandleMessageBox ( MessageBoxCodec . encode ( MessageBox ( Random . nextLong ( ) , SessionHello ) ) . require . toByteArray ) < nl > - sessionRegion . ref ! envelope ( authId , sessionId , message ) < nl > + val message = HandleMessageBox ( ByteString . copyFrom ( MessageBoxCodec . encode ( MessageBox ( Random . nextLong ( ) , SessionHello ) ) . require . toByteBuffer ) ) < nl > + sessionRegion . ref ! SessionEnvelope ( authId , sessionId ) . withHandleMessageBox ( message ) < nl > } < nl > } < nl > < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala < nl > index d5208e3 . . e803fdd 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala < nl > @ @ - 1 , 21 + 1 , 21 @ @ < nl > package im . actor . server . session < nl > < nl > - import akka . contrib . pattern . DistributedPubSubExtension < nl > - import im . actor . server < nl > - < nl > - import scala . concurrent . { Promise , Future , Await , blocking } < nl > import scala . concurrent . duration . _ < nl > - import scala . util . { Success , Random } < nl > + import scala . concurrent . { Await , Future , blocking } < nl > + import scala . util . Random < nl > < nl > import akka . actor . _ < nl > + import akka . contrib . pattern . DistributedPubSubExtension < nl > import akka . stream . ActorMaterializer < nl > import akka . testkit . TestProbe < nl > + import com . google . protobuf . ByteString < nl > import org . scalatest . concurrent . ScalaFutures < nl > import org . scalatest . { FlatSpecLike , Matchers } < nl > < nl > import im . actor . api . rpc . RpcResult < nl > import im . actor . api . rpc . codecs . _ < nl > import im . actor . api . rpc . sequence . { SeqUpdate , WeakUpdate } < nl > + import im . actor . server < nl > import im . actor . server . activation . internal . DummyCodeActivation < nl > import im . actor . server . api . ActorSpecHelpers < nl > import im . actor . server . api . rpc . service . auth . AuthServiceImpl < nl > @ @ - 27 , 15 + 27 , 16 @ @ import im . actor . server . mtproto . transport . MTPackage < nl > import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } < nl > import im . actor . server . presences . { GroupPresenceManager , PresenceManager } < nl > import im . actor . server . push . WeakUpdatesManager < nl > + import im . actor . server . session . SessionEnvelope . Payload < nl > import im . actor . server . social . SocialManager < nl > - import im . actor . server . user . { UserOfficeRegion , UserOffice } < nl > - import im . actor . server . { KafkaSpec , SqlSpecHelpers , persist } < nl > + import im . actor . server . user . UserOfficeRegion < nl > + import im . actor . server . { SqlSpecHelpers , persist } < nl > < nl > - abstract class BaseSessionSpec ( _ system : ActorSystem = { server . ActorSpecification . createSystem ( ) } ) < nl > + abstract class BaseSessionSpec ( _ system : ActorSystem = { < nl > + server . ActorSpecification . createSystem ( ) < nl > + } ) < nl > extends server . ActorSuite ( _ system ) with FlatSpecLike with ScalaFutures with Matchers with SqlSpecHelpers with ActorSpecHelpers { < nl > < nl > - import SessionMessage . _ < nl > - < nl > implicit val materializer = ActorMaterializer ( ) < nl > implicit val ( ds , db ) = migrateAndInitDb ( ) < nl > implicit val ec = system . dispatcher < nl > @ @ - 180 , 15 + 181 , 14 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { server . ActorSpecificatio < nl > } < nl > < nl > protected def sendMessageBox ( authId : Long , sessionId : Long , session : ActorRef , messageId : Long , body : ProtoMessage ) ( implicit probe : TestProbe ) = < nl > - sendEnvelope ( authId , sessionId , session , HandleMessageBox ( MessageBoxCodec . encode ( MessageBox ( messageId , body ) ) . require . toByteArray ) ) < nl > + sendEnvelope ( authId , sessionId , session , Payload . HandleMessageBox ( HandleMessageBox ( ByteString . copyFrom ( MessageBoxCodec . encode ( MessageBox ( messageId , body ) ) . require . toByteBuffer ) ) ) ) < nl > < nl > - protected def sendEnvelope ( authId : Long , sessionId : Long , session : ActorRef , msg : SessionMessage ) ( implicit probe : TestProbe ) = { < nl > + protected def sendEnvelope ( authId : Long , sessionId : Long , session : ActorRef , payload : Payload ) ( implicit probe : TestProbe ) = { < nl > session . tell ( < nl > - Envelope ( < nl > + SessionEnvelope ( < nl > authId , < nl > - sessionId , < nl > - msg < nl > - ) , < nl > + sessionId < nl > + ) . withPayload ( payload ) , < nl > probe . ref < nl > ) < nl > } < nl > diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > index 021b46d . . 5c92caf 100644 < nl > - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala < nl > @ @ - 5 , 6 + 5 , 7 @ @ import scala . concurrent . duration . _ < nl > import scala . util . Random < nl > < nl > import akka . testkit . TestProbe < nl > + import com . google . protobuf . ByteString < nl > import scodec . bits . _ < nl > < nl > import im . actor . api . rpc . auth . _ < nl > @ @ - 18 , 6 + 19 , 7 @ @ import im . actor . api . rpc . { AuthorizedClientData , Request , RpcOk } < nl > import im . actor . server . mtproto . protocol . _ < nl > import im . actor . server . mtproto . transport . _ < nl > import im . actor . server . push . { SeqUpdatesManager , WeakUpdatesManager } < nl > + import im . actor . server . session . SessionEnvelope . Payload < nl > < nl > class SessionSpec extends BaseSessionSpec { < nl > behavior of " Session actor " < nl > @ @ - 33 , 8 + 35 , 6 @ @ class SessionSpec extends BaseSessionSpec { < nl > < nl > case class sessions ( ) { < nl > < nl > - import SessionMessage . _ < nl > - < nl > implicit val probe = TestProbe ( ) < nl > < nl > def e1 ( ) = { < nl > @ @ - 42 , 7 + 42 , 7 @ @ class SessionSpec extends BaseSessionSpec { < nl > val sessionId = Random . nextLong ( ) < nl > val session = system . actorOf ( Session . props ( mediator ) ) < nl > < nl > - sendEnvelope ( authId , sessionId , session , HandleMessageBox ( BitVector . empty . toByteArray ) ) < nl > + sendEnvelope ( authId , sessionId , session , Payload . HandleMessageBox ( HandleMessageBox ( ByteString . copyFrom ( BitVector . empty . toByteBuffer ) ) ) ) < nl > < nl > probe watch session < nl > < nl > diff - - git a / actor - server / project / Build . scala b / actor - server / project / Build . scala < nl > index 9327f8a . . 46fda7b 100644 < nl > - - - a / actor - server / project / Build . scala < nl > + + + b / actor - server / project / Build . scala < nl > @ @ - 218 , 7 + 218 , 7 @ @ object Build extends sbt . Build { < nl > id = " actor - session - messages " , < nl > base = file ( " actor - session - messages " ) , < nl > settings = defaultSettings + + Seq ( libraryDependencies + + = Dependencies . sessionMessages ) < nl > - ) . dependsOn ( actorCommonsApi ) < nl > + ) . dependsOn ( actorCommonsBase , actorCommonsApi ) < nl > < nl > lazy val actorPush = Project ( < nl > id = " actor - push " ,

TEST DIFF:
diff - - git a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / UpdatesSource . scala b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / UpdatesSource . scala 
 index d9d01c4 . . 661d9c3 100644 
 - - - a / actor - server / actor - bots / src / main / scala / im / actor / server / bot / UpdatesSource . scala 
 + + + b / actor - server / actor - bots / src / main / scala / im / actor / server / bot / UpdatesSource . scala 
 @ @ - 1 , 16 + 1 , 13 @ @ 
 package im . actor . server . bot 
 
 import akka . actor . { ActorLogging , Props , Stash } 
 - import akka . pattern . pipe 
 import akka . stream . actor . ActorPublisher 
 import akka . stream . scaladsl . Source 
 import im . actor . api . rpc . Update 
 import im . actor . api . rpc . codecs . _ 
 import im . actor . api . rpc . messaging . UpdateMessage 
 import im . actor . api . rpc . sequence . { UpdateRawUpdate , FatSeqUpdate , SeqUpdate } 
 - import im . actor . server . db . DbExtension 
 - import im . actor . server . mtproto . protocol . UpdateBox 
 - import im . actor . server . persist 
 + import im . actor . server . mtproto . protocol . ProtoPush 
 import im . actor . server . sequence . { UpdatesConsumerMessage , UpdatesConsumer } 
 
 import scala . annotation . tailrec 
 @ @ - 35 , 7 + 32 , 7 @ @ private class UpdatesSource ( userId : Int , authId : Long , authSid : Int ) extends Act 
 private var buf = Vector . empty [ ( Int , Update ) ] 
 
 def receive : Receive = { 
 - case NewUpdate ( UpdateBox ( bodyBytes ) , _ ) ⇒ 
 + case NewUpdate ( ProtoPush ( bodyBytes ) , _ ) ⇒ 
 ( UpdateBoxCodec . decode ( bodyBytes ) . require . value match { 
 case SeqUpdate ( seq , _ , header , body ) ⇒ Some ( ( seq , header , body ) ) 
 case FatSeqUpdate ( seq , _ , header , body , _ , _ ) ⇒ Some ( ( seq , header , body ) ) 
 diff - - git a / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / MessageBoxCodec . scala b / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / MessageBoxCodec . scala 
 index 00c5370 . . 4a0b3a8 100644 
 - - - a / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / MessageBoxCodec . scala 
 + + + b / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / MessageBoxCodec . scala 
 @ @ - 25 , 11 + 25 , 11 @ @ object MessageBoxCodec extends Codec [ MessageBox ] { 
 . \ ( RequestDH . header ) { case r : RequestDH ⇒ r } ( RequestDHCodec ) 
 . \ ( ResponseDoDH . header ) { case r : ResponseDoDH ⇒ r } ( ResponseDoDHCodec ) 
 . \ ( RequestResend . header ) { case r : RequestResend ⇒ r } ( RequestResendCodec ) 
 - . \ ( RpcRequestBox . header ) { case r : RpcRequestBox ⇒ r } ( RpcRequestBoxCodec ) 
 - . \ ( RpcResponseBox . header ) { case r : RpcResponseBox ⇒ r } ( RpcResponseBoxCodec ) 
 + . \ ( ProtoRpcRequest . header ) { case r : ProtoRpcRequest ⇒ r } ( ProtoRpcRequestCodec ) 
 + . \ ( ProtoRpcResponse . header ) { case r : ProtoRpcResponse ⇒ r } ( ProtoRpcResponseCodec ) 
 . \ ( UnsentMessage . header ) { case r : UnsentMessage ⇒ r } ( UnsentMessageCodec ) 
 . \ ( UnsentResponse . header ) { case r : UnsentResponse ⇒ r } ( UnsentResponseCodec ) 
 - . \ ( UpdateBox . header ) { case r : UpdateBox ⇒ r } ( UpdateBoxCodec ) 
 + . \ ( ProtoPush . header ) { case r : ProtoPush ⇒ r } ( ProtoPushCodec ) 
 . \ ( 0 , _ ⇒ true ) { case a ⇒ a } ( DiscriminatedErrorCodec ( " MessageBox " ) ) 
 
 private val codec = ( int64 : : PayloadCodec ( protoMessageCodec ) ) . as [ MessageBox ] 
 diff - - git a / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala b / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala 
 index 0bd71cc . . 918ade6 100644 
 - - - a / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala 
 + + + b / actor - server / actor - codecs / src / main / scala / im / actor / server / mtproto / codecs / protocol / package . scala 
 @ @ - 21 , 9 + 21 , 9 @ @ package object protocol { 
 val ResponseGetServerKeyCodec = ( int64 : : bytes ) . as [ ResponseGetServerKey ] 
 val RequestDHCodec = ( int64 : : int64 : : bytes : : bytes ) . as [ RequestDH ] 
 val ResponseDoDHCodec = ( int64 : : bytes : : bytes ) . as [ ResponseDoDH ] 
 - val RpcRequestBoxCodec = bytes . as [ RpcRequestBox ] 
 - val RpcResponseBoxCodec = ( int64 : : bytes ) . as [ RpcResponseBox ] 
 + val ProtoRpcRequestCodec = bytes . as [ ProtoRpcRequest ] 
 + val ProtoRpcResponseCodec = ( int64 : : bytes ) . as [ ProtoRpcResponse ] 
 val UnsentMessageCodec = ( int64 : : int32 ) . as [ UnsentMessage ] 
 val UnsentResponseCodec = ( int64 : : int64 : : int32 ) . as [ UnsentResponse ] 
 - val UpdateBoxCodec = bytes . as [ UpdateBox ] 
 + val ProtoPushCodec = bytes . as [ ProtoPush ] 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala 
 index 4895957 . . bcf18b7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / UpdatesConsumer . scala 
 @ @ - 13 , 7 + 13 , 7 @ @ import im . actor . api . rpc . { Update , UpdateBox ⇒ ProtoUpdateBox } 
 import im . actor . server . db . DbExtension 
 import im . actor . server . group . GroupExtension 
 import im . actor . server . model . configs . Parameter 
 - import im . actor . server . mtproto . protocol . UpdateBox 
 + import im . actor . server . mtproto . protocol . ProtoPush 
 import im . actor . server . persist . configs . ParameterRepo 
 import im . actor . server . persist . contact . UserContactRepo 
 import im . actor . server . presences . _ 
 @ @ - 24 , 7 + 24 , 7 @ @ import slick . dbio . DBIO 
 import scala . concurrent . _ 
 import scala . concurrent . duration . _ 
 
 - final case class NewUpdate ( ub : UpdateBox , reduceKey : Option [ String ] ) 
 + final case class NewUpdate ( ub : ProtoPush , reduceKey : Option [ String ] ) 
 
 sealed trait UpdatesConsumerMessage 
 
 @ @ - 238 , 7 + 238 , 7 @ @ private [ sequence ] class UpdatesConsumer ( userId : Int , authId : Long , authSid : Int , 
 } 
 
 private def sendUpdateBox ( updateBox : ProtoUpdateBox , reduceKey : Option [ String ] ) : Unit = 
 - subscriber ! NewUpdate ( UpdateBox ( UpdateBoxCodec . encode ( updateBox ) . require ) , reduceKey ) 
 + subscriber ! NewUpdate ( ProtoPush ( UpdateBoxCodec . encode ( updateBox ) . require ) , reduceKey ) 
 
 private def getFatData ( 
 userId : Int , 
 diff - - git a / actor - server / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala b / actor - server / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala 
 index 77bee4d . . fe15444 100644 
 - - - a / actor - server / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala 
 + + + b / actor - server / actor - models / src / main / scala / im / actor / server / mtproto / protocol / ProtoMessage . scala 
 @ @ - 156 , 22 + 156 , 22 @ @ object ResponseAuthId { 
 } 
 
 @ SerialVersionUID ( 1L ) 
 - final case class RpcRequestBox ( bodyBytes : BitVector ) extends ProtoMessage { 
 - val header = RpcRequestBox . header 
 + final case class ProtoRpcRequest ( bodyBytes : BitVector ) extends ProtoMessage { 
 + val header = ProtoRpcRequest . header 
 } 
 
 - object RpcRequestBox { 
 + object ProtoRpcRequest { 
 val header = 0x03 
 } 
 
 @ SerialVersionUID ( 1L ) 
 - final case class RpcResponseBox ( messageId : Long , bodyBytes : BitVector ) extends ProtoMessage with OutgoingProtoMessage with ResendableProtoMessage { 
 - val header = RpcResponseBox . header 
 + final case class ProtoRpcResponse ( messageId : Long , bodyBytes : BitVector ) extends ProtoMessage with OutgoingProtoMessage with ResendableProtoMessage { 
 + val header = ProtoRpcResponse . header 
 
 override val bodySize = bodyBytes . bytes . size 
 } 
 
 - object RpcResponseBox { 
 + object ProtoRpcResponse { 
 val header = 0x04 
 } 
 
 @ @ - 194 , 12 + 194 , 12 @ @ object UnsentResponse { 
 } 
 
 @ SerialVersionUID ( 1L ) 
 - final case class UpdateBox ( bodyBytes : BitVector ) extends ProtoMessage with OutgoingProtoMessage with ResendableProtoMessage { 
 - val header = UpdateBox . header 
 + final case class ProtoPush ( bodyBytes : BitVector ) extends ProtoMessage with OutgoingProtoMessage with ResendableProtoMessage { 
 + val header = ProtoPush . header 
 
 override val bodySize = bodyBytes . bytes . size 
 } 
 
 - object UpdateBox { 
 + object ProtoPush { 
 val header = 0x05 
 } 
 diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / MessageBoxHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / MessageBoxHandler . scala 
 index fe2df4e . . 2e1999e 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / MessageBoxHandler . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / MessageBoxHandler . scala 
 @ @ - 2 , 14 + 2 , 14 @ @ package im . actor . server . session 
 
 import akka . actor . _ 
 import akka . stream . actor . _ 
 - import im . actor . server . mtproto . protocol . RpcRequestBox 
 + import im . actor . server . mtproto . protocol . ProtoRpcRequest 
 
 class RpcRequestBoxHandler ( rpcApiHandler : ActorRef ) extends ActorSubscriber { 
 import ActorSubscriberMessage . _ 
 
 val MaxQueueSize = 10 / / TODO : configurable 
 
 - val queue = Map . empty [ Int , RpcRequestBox ] 
 + val queue = Map . empty [ Int , ProtoRpcRequest ] 
 
 override val requestStrategy = new MaxInFlightRequestStrategy ( max = MaxQueueSize ) { 
 override def inFlightInternally : Int = queue . size 
 diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 index 022b8af . . 3fa6961 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Resender . scala 
 @ @ - 135 , 14 + 135 , 14 @ @ private [ session ] class ReSender ( authId : Long , sessionId : Long ) ( implicit config : 
 resendBufferSize - = message . bodySize 
 
 message match { 
 - case rspBox @ RpcResponseBox ( requestMessageId , bodyBytes ) ⇒ 
 + case rspBox @ ProtoRpcResponse ( requestMessageId , bodyBytes ) ⇒ 
 if ( message . bodySize < = MaxResendSize ) { 
 enqueueProtoMessageWithResend ( messageId , rspBox , reduceKey ) 
 } else { 
 scheduleResend ( messageId , rspBox , reduceKey ) 
 enqueueProtoMessage ( nextMessageId ( ) , UnsentResponse ( messageId , requestMessageId , message . bodySize ) ) 
 } 
 - case ub @ UpdateBox ( bodyBytes ) ⇒ 
 + case ub @ ProtoPush ( bodyBytes ) ⇒ 
 if ( message . bodySize < = MaxResendSize ) { 
 enqueueProtoMessageWithResend ( messageId , ub , reduceKey ) 
 } else { 
 diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 index d0d2eaf . . 30979c4 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / RpcHandler . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ import akka . stream . actor . _ 
 import im . actor . api . rpc . RpcInternalError 
 import im . actor . server . api . rpc . RpcApiService . RpcResponse 
 import im . actor . server . api . rpc . { RpcApiExtension , RpcApiService , RpcResultCodec } 
 - import im . actor . server . mtproto . protocol . { ProtoMessage , RpcResponseBox } 
 + import im . actor . server . mtproto . protocol . { ProtoMessage , ProtoRpcResponse } 
 import im . actor . util . cache . CacheHelpers . _ 
 import scodec . bits . _ 
 
 @ @ - 128 , 11 + 128 , 11 @ @ private [ session ] class RpcHandler extends ActorSubscriber with ActorPublisher [ Pr 
 log . debug ( " Received RpcResponse for messageId : { } , publishing " , messageId ) 
 
 requestQueue - = messageId 
 - enqueueProtoMessage ( RpcResponseBox ( messageId , responseBytes ) ) 
 + enqueueProtoMessage ( ProtoRpcResponse ( messageId , responseBytes ) ) 
 case CachedResponse ( rsp ) ⇒ 
 log . debug ( " Got cached RpcResponse for messageId : { } , publishing " , rsp . messageId ) 
 
 - enqueueProtoMessage ( RpcResponseBox ( rsp . messageId , rsp . responseBytes ) ) 
 + enqueueProtoMessage ( ProtoRpcResponse ( rsp . messageId , rsp . responseBytes ) ) 
 case Request ( _ ) ⇒ 
 deliverBuf ( ) 
 case Cancel ⇒ 
 diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / SessionMessageDiscriminator . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / SessionMessageDiscriminator . scala 
 index 0471cc4 . . 8e5f4a1 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / SessionMessageDiscriminator . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / SessionMessageDiscriminator . scala 
 @ @ - 39 , 7 + 39 , 7 @ @ private [ session ] final class SessionMessageDiscriminator extends GraphStage [ Sess 
 val msg = grab ( in ) 
 
 msg match { 
 - case SessionStreamMessage . HandleMessageBox ( MessageBox ( messageId , RpcRequestBox ( bodyBytes ) ) , clientData ) ⇒ 
 + case SessionStreamMessage . HandleMessageBox ( MessageBox ( messageId , ProtoRpcRequest ( bodyBytes ) ) , clientData ) ⇒ 
 emit ( outRpc , HandleRpcRequest ( messageId , bodyBytes , clientData ) , pullIn ) 
 case SessionStreamMessage . HandleMessageBox ( MessageBox ( messageId , m : MessageAck ) , clientData ) ⇒ 
 emit ( outIncomingAck , m , pullIn ) 
 diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala 
 index 4947740 . . c7ce5ac 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala 
 @ @ - 2 , 7 + 2 , 7 @ @ package im . actor . server . session 
 
 import akka . actor . { Stash , ActorRef , ActorLogging , Props } 
 import akka . stream . actor . _ 
 - import im . actor . server . mtproto . protocol . UpdateBox 
 + import im . actor . server . mtproto . protocol . ProtoPush 
 import im . actor . server . sequence . _ 
 
 import scala . annotation . tailrec 
 @ @ - 16 , 7 + 16 , 7 @ @ private [ session ] object UpdatesHandler { 
 } 
 
 private [ session ] class UpdatesHandler ( authId : Long ) 
 - extends ActorSubscriber with ActorPublisher [ ( UpdateBox , Option [ String ] ) ] with ActorLogging with Stash { 
 + extends ActorSubscriber with ActorPublisher [ ( ProtoPush , Option [ String ] ) ] with ActorLogging with Stash { 
 
 import ActorPublisherMessage . _ 
 import ActorSubscriberMessage . _ 
 @ @ - 63 , 7 + 63 , 7 @ @ private [ session ] class UpdatesHandler ( authId : Long ) 
 override val requestStrategy = WatermarkRequestStrategy ( 10 ) / / TODO : configurable 
 
 / / Publisher - related 
 - private [ this ] var messageQueue = immutable . Queue . empty [ ( UpdateBox , Option [ String ] ) ] 
 + private [ this ] var messageQueue = immutable . Queue . empty [ ( ProtoPush , Option [ String ] ) ] 
 
 def publisher : Receive = { 
 case NewUpdate ( ub , reduceKey ) ⇒ enqueueProtoMessage ( ub , reduceKey ) 
 @ @ - 71 , 7 + 71 , 7 @ @ private [ session ] class UpdatesHandler ( authId : Long ) 
 case Cancel ⇒ context . stop ( self ) 
 } 
 
 - private def enqueueProtoMessage ( message : UpdateBox , reduceKey : Option [ String ] ) : Unit = { 
 + private def enqueueProtoMessage ( message : ProtoPush , reduceKey : Option [ String ] ) : Unit = { 
 if ( messageQueue . isEmpty & & totalDemand > 0 ) { 
 onNext ( message → reduceKey ) 
 } else { 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 index e4d48cb . . 5815768 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / SimpleServerE2eSpec . scala 
 @ @ - 105 , 7 + 105 , 7 @ @ final class SimpleServerE2eSpec extends ActorSuite ( 
 val messageId = Random . nextLong ( ) 
 
 val requestBytes = RequestCodec . encode ( Request ( RequestGetDifference ( 999 , Array ( ) ) ) ) . require 
 - val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , RpcRequestBox ( requestBytes ) ) ) . require 
 + val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , ProtoRpcRequest ( requestBytes ) ) ) . require 
 val mtPackage = MTPackage ( authId , sessionId , mbBytes ) 
 
 client . send ( mtPackage ) 
 @ @ - 132 , 7 + 132 , 7 @ @ final class SimpleServerE2eSpec extends ActorSuite ( 
 val messageId = Random . nextLong ( ) 
 
 val requestBytes = RequestCodec . encode ( Request ( RequestEditParameter ( s " very l $ { " o " * 100 } ng key " , Some ( s " very lo $ { " n " * 100 } g value " ) ) ) ) . require 
 - val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , RpcRequestBox ( requestBytes ) ) ) . require 
 + val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , ProtoRpcRequest ( requestBytes ) ) ) . require 
 val mtPackage = MTPackage ( authId , sessionId , mbBytes ) 
 
 client . send ( mtPackage , slowly = true ) 
 @ @ - 213 , 7 + 213 , 7 @ @ final class SimpleServerE2eSpec extends ActorSuite ( 
 implicit val client = client2 
 signUp ( authId2 , sessionId2 , phoneNumber ) 
 val requestBits = RequestCodec . encode ( Request ( RequestTerminateAllSessions ) ) . require 
 - client . send ( MTPackage ( authId2 , Random . nextLong ( ) , MessageBoxCodec . encode ( MessageBox ( Random . nextLong , RpcRequestBox ( requestBits ) ) ) . require ) ) 
 + client . send ( MTPackage ( authId2 , Random . nextLong ( ) , MessageBoxCodec . encode ( MessageBox ( Random . nextLong , ProtoRpcRequest ( requestBits ) ) ) . require ) ) 
 } 
 
 { 
 @ @ - 244 , 7 + 244 , 7 @ @ final class SimpleServerE2eSpec extends ActorSuite ( 
 val messageId = Random . nextLong ( ) 
 
 val requestBytes = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ) ) . require 
 - val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , RpcRequestBox ( requestBytes ) ) ) . require 
 + val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , ProtoRpcRequest ( requestBytes ) ) ) . require 
 val mtPackage = MTPackage ( authId , sessionId , mbBytes ) 
 
 client . send ( mtPackage ) 
 @ @ - 273 , 7 + 273 , 7 @ @ final class SimpleServerE2eSpec extends ActorSuite ( 
 appKey = " appKey " , 
 isSilent = false 
 ) ) ) . require 
 - val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , RpcRequestBox ( requestBytes ) ) ) . require 
 + val mbBytes = MessageBoxCodec . encode ( MessageBox ( messageId , ProtoRpcRequest ( requestBytes ) ) ) . require 
 val mtPackage = MTPackage ( authId , sessionId , mbBytes ) 
 
 client . send ( mtPackage ) 
 @ @ - 333 , 9 + 333 , 9 @ @ final class SimpleServerE2eSpec extends ActorSuite ( 
 
 private def receiveRpcResult ( messageId : Long ) ( implicit client : MTProtoClient ) : RpcResult = { 
 val mb = receiveMessageBox ( ) 
 - mb . body shouldBe an [ RpcResponseBox ] 
 + mb . body shouldBe an [ ProtoRpcResponse ] 
 
 - val rspBox = mb . body . asInstanceOf [ RpcResponseBox ] 
 + val rspBox = mb . body . asInstanceOf [ ProtoRpcResponse ] 
 rspBox . messageId should = = = ( messageId ) 
 
 RpcResultCodec . decode ( rspBox . bodyBytes ) . require . value 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala 
 index 22bae1d . . 73e4873 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala 
 @ @ - 82 , 7 + 82 , 7 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { 
 protected def expectUpdateBox [ T < : im . actor . api . rpc . UpdateBox ] ( clazz : Class [ T ] , authId : Long , sessionId : Long , sendAckAt : Option [ Duration ] ) ( implicit probe : TestProbe , m : Manifest [ T ] ) : T = { 
 val mb = expectMessageBox ( ) 
 
 - val update = UpdateBoxCodec . decode ( mb . body . asInstanceOf [ UpdateBox ] . bodyBytes ) . require . value 
 + val update = UpdateBoxCodec . decode ( mb . body . asInstanceOf [ ProtoPush ] . bodyBytes ) . require . value 
 
 sendAckAt map { delay ⇒ 
 Future { 
 @ @ - 117 , 7 + 117 , 7 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { 
 ackIds shouldEqual expectAckFor 
 
 rest match { 
 - case Vector ( ( messageId , RpcResponseBox ( _ , rpcResultBytes ) ) ) ⇒ 
 + case Vector ( ( messageId , ProtoRpcResponse ( _ , rpcResultBytes ) ) ) ⇒ 
 sendAckAt map { delay ⇒ 
 Future { 
 blocking { 
 @ @ - 204 , 7 + 204 , 7 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { 
 } 
 
 protected def sendRequest ( authId : Long , sessionId : Long , session : ActorRef , messageId : Long , request : RpcRequest ) ( implicit probe : TestProbe ) : Unit = { 
 - val rqBox = RpcRequestBox ( RequestCodec . encode ( Request ( request ) ) . require ) 
 + val rqBox = ProtoRpcRequest ( RequestCodec . encode ( Request ( request ) ) . require ) 
 sendMessageBox ( authId , sessionId , session , messageId , rqBox ) 
 } 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendLargeSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendLargeSpec . scala 
 index 62e56a9 . . 046af3c 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendLargeSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendLargeSpec . scala 
 @ @ - 6 , 7 + 6 , 7 @ @ import im . actor . api . rpc . _ 
 import im . actor . api . rpc . auth . { RequestSendAuthCodeObsolete , ResponseSendAuthCodeObsolete } 
 import im . actor . api . rpc . codecs . RequestCodec 
 import im . actor . server . ActorSpecification 
 - import im . actor . server . mtproto . protocol . { RequestResend , RpcRequestBox , UnsentResponse } 
 + import im . actor . server . mtproto . protocol . { RequestResend , ProtoRpcRequest $ , UnsentResponse } 
 
 import scala . concurrent . duration . _ 
 import scala . util . Random 
 @ @ - 38 , 7 + 38 , 7 @ @ final class SessionResendLargeSpec extends BaseSessionSpec ( 
 val requestMessageId = Random . nextLong ( ) 
 
 val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333333L , 1 , " apiKey " ) ) ) . require 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , requestMessageId , RpcRequestBox ( encodedRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , requestMessageId , ProtoRpcRequest ( encodedRequest ) ) 
 
 expectNewSession ( authId , sessionId , requestMessageId ) 
 expectMessageAck ( requestMessageId ) 
 @ @ - 76 , 7 + 76 , 7 @ @ final class SessionResendLargeSpec extends BaseSessionSpec ( 
 val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333333L , 1 , " apiKey " ) ) ) . require 
 
 for ( _ ← 1 to 100 ) 
 - TestProbe ( ) . send ( session , handleMessageBox ( Random . nextLong ( ) , RpcRequestBox ( encodedRequest ) ) ) 
 + TestProbe ( ) . send ( session , handleMessageBox ( Random . nextLong ( ) , ProtoRpcRequest ( encodedRequest ) ) ) 
 
 watchProbe . expectTerminated ( session ) 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 index 3deff79 . . a0a5c26 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionResendSpec . scala 
 @ @ - 49 , 7 + 49 , 7 @ @ final class SessionResendSpec extends BaseSessionSpec ( 
 val messageId = Random . nextLong ( ) 
 
 val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333333L , 1 , " apiKey " ) ) ) . require 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedRequest ) ) 
 
 ignoreNewSession ( ) 
 expectMessageAck ( messageId ) 
 @ @ - 91 , 7 + 91 , 7 @ @ final class SessionResendSpec extends BaseSessionSpec ( 
 implicit val probe = TestProbe ( ) 
 
 val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333333L , 1 , " apiKey " ) ) ) . require 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedRequest ) ) 
 
 expectNewSession ( authId , sessionId , messageId ) 
 
 @ @ - 133 , 7 + 133 , 7 @ @ final class SessionResendSpec extends BaseSessionSpec ( 
 { 
 val messageId = Random . nextLong ( ) 
 val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333333L , 1 , " apiKey " ) ) ) . require 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedRequest ) ) 
 expectMessageAck ( messageId ) 
 val mb = expectMessageBox ( ) 
 sendMessageBox ( authId , sessionId , sessionRegion . ref , Random . nextLong ( ) , MessageAck ( Vector ( mb . messageId ) ) ) 
 @ @ - 144 , 7 + 144 , 7 @ @ final class SessionResendSpec extends BaseSessionSpec ( 
 { 
 val messageId = Random . nextLong ( ) 
 val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333333L , 1 , " apiKey " ) ) ) . require 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedRequest ) ) 
 expectMessageAck ( messageId ) 
 val mb = expectMessageBox ( ) 
 
 @ @ - 283 , 7 + 283 , 7 @ @ final class SessionResendSpec extends BaseSessionSpec ( 
 val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ) ) . require 
 
 val getSeqMessageId = Random . nextLong ( ) 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , getSeqMessageId , RpcRequestBox ( encodedGetSeqRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , getSeqMessageId , ProtoRpcRequest ( encodedGetSeqRequest ) ) 
 expectMessageAck ( getSeqMessageId ) 
 expectRpcResult ( authId , sessionId ) should matchPattern { 
 case RpcOk ( ResponseSeq ( _ , _ ) ) ⇒ 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 index 7947409 . . 369beba 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 @ @ - 61 , 7 + 61 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 val messageId = Random . nextLong ( ) 
 
 val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333333L , 1 , " apiKey " ) ) ) . require 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedRequest ) ) 
 
 expectNewSession ( authId , sessionId , messageId ) 
 probe . receiveOne ( 1 . second ) 
 @ @ - 75 , 7 + 75 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 val messageId = Random . nextLong ( ) 
 
 val encodedRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( 75553333334L , 1 , " apiKey " ) ) ) . require 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedRequest ) ) 
 
 expectNewSession ( authId , sessionId , messageId ) 
 expectMessageAck ( messageId ) 
 @ @ - 93 , 7 + 93 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 val phoneNumber = 75550000000L 
 
 val encodedCodeRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ) ) . require 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , RpcRequestBox ( encodedCodeRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , ProtoRpcRequest ( encodedCodeRequest ) ) 
 
 expectNewSession ( authId , sessionId , firstMessageId ) 
 expectMessageAck ( firstMessageId ) 
 @ @ - 113 , 7 + 113 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 ) ) ) . require 
 
 val secondMessageId = Random . nextLong ( ) 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , secondMessageId , RpcRequestBox ( encodedSignUpRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , secondMessageId , ProtoRpcRequest ( encodedSignUpRequest ) ) 
 expectMessageAck ( secondMessageId ) 
 
 expectRpcResult ( authId , sessionId ) should matchPattern { 
 @ @ - 123 , 7 + 123 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 val encodedSignOutRequest = RequestCodec . encode ( Request ( RequestSignOut ) ) . require 
 
 val thirdMessageId = Random . nextLong ( ) 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , RpcRequestBox ( encodedSignOutRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , ProtoRpcRequest ( encodedSignOutRequest ) ) 
 
 expectMessageAck ( thirdMessageId ) 
 expectRpcResult ( authId , sessionId ) should matchPattern { 
 @ @ - 139 , 7 + 139 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 val phoneNumber = 75550000000L 
 
 val encodedCodeRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ) ) . require 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , RpcRequestBox ( encodedCodeRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , ProtoRpcRequest ( encodedCodeRequest ) ) 
 
 expectNewSession ( authId , sessionId , firstMessageId ) 
 expectMessageAck ( firstMessageId ) 
 @ @ - 159 , 7 + 159 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 ) ) ) . require 
 
 val secondMessageId = Random . nextLong ( ) 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , secondMessageId , RpcRequestBox ( encodedSignUpRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , secondMessageId , ProtoRpcRequest ( encodedSignUpRequest ) ) 
 
 expectMessageAck ( secondMessageId ) 
 
 @ @ - 174 , 7 + 174 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ) ) . require 
 
 val thirdMessageId = Random . nextLong ( ) 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , RpcRequestBox ( encodedGetSeqRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , ProtoRpcRequest ( encodedGetSeqRequest ) ) 
 
 expectMessageAck ( thirdMessageId ) 
 expectRpcResult ( authId , sessionId ) should matchPattern { 
 @ @ - 196 , 7 + 196 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 val encodedGetSeqRequest = RequestCodec . encode ( Request ( RequestGetState ) ) . require 
 
 val thirdMessageId = Random . nextLong ( ) 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , RpcRequestBox ( encodedGetSeqRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , thirdMessageId , ProtoRpcRequest ( encodedGetSeqRequest ) ) 
 
 ignoreNewSession ( ) 
 expectMessageAck ( thirdMessageId ) 
 @ @ - 222 , 7 + 222 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 val phoneNumber = 75550000000L 
 
 val encodedCodeRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ) ) . require 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , RpcRequestBox ( encodedCodeRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , ProtoRpcRequest ( encodedCodeRequest ) ) 
 
 expectNewSession ( authId , sessionId , firstMessageId ) 
 expectMessageAck ( firstMessageId ) 
 @ @ - 242 , 7 + 242 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 ) ) ) . require 
 
 val secondMessageId = Random . nextLong ( ) 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , secondMessageId , RpcRequestBox ( encodedSignUpRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , secondMessageId , ProtoRpcRequest ( encodedSignUpRequest ) ) 
 
 expectMessageAck ( secondMessageId ) 
 
 @ @ - 267 , 7 + 267 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 val phoneNumber = 75550000000L 
 
 val encodedCodeRequest = RequestCodec . encode ( Request ( RequestSendAuthCodeObsolete ( phoneNumber , 1 , " apiKey " ) ) ) . require 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , RpcRequestBox ( encodedCodeRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , firstMessageId , ProtoRpcRequest ( encodedCodeRequest ) ) 
 
 expectNewSession ( authId , sessionId , firstMessageId ) 
 expectMessageAck ( firstMessageId ) 
 @ @ - 288 , 7 + 288 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 ) ) ) . require 
 
 val messageId = Random . nextLong ( ) 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedSignUpRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedSignUpRequest ) ) 
 
 expectMessageAck ( messageId ) 
 
 @ @ - 305 , 7 + 305 , 7 @ @ final class SessionSpec extends BaseSessionSpec { 
 val encodedSubscribeRequest = RequestCodec . encode ( Request ( RequestSubscribeToOnline ( Vector ( ApiUserOutPeer ( userForSubscribe , 0L ) ) ) ) ) . require 
 
 val messageId = Random . nextLong ( ) 
 - sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , RpcRequestBox ( encodedSubscribeRequest ) ) 
 + sendMessageBox ( authId , sessionId , sessionRegion . ref , messageId , ProtoRpcRequest ( encodedSubscribeRequest ) ) 
 
 expectMessageAck ( messageId )

NEAREST DIFF:
diff - - git a / actor - server / actor - frontend / src / main / scala / im / actor / server / api / frontend / SessionClient . scala b / actor - server / actor - frontend / src / main / scala / im / actor / server / api / frontend / SessionClient . scala 
 index a993d97 . . 8bbe960 100644 
 - - - a / actor - server / actor - frontend / src / main / scala / im / actor / server / api / frontend / SessionClient . scala 
 + + + b / actor - server / actor - frontend / src / main / scala / im / actor / server / api / frontend / SessionClient . scala 
 @ @ - 6 , 14 + 6 , 16 @ @ import scala . collection . immutable 
 import akka . actor . _ 
 import akka . stream . actor . ActorPublisher 
 import akka . stream . actor . ActorPublisherMessage . { Cancel , Request } 
 + import com . google . protobuf . ByteString 
 import scodec . bits . BitVector 
 
 import im . actor . server . mtproto . codecs . protocol . MessageBoxCodec 
 - import im . actor . server . mtproto . protocol . { SessionLost , MessageBox } 
 + import im . actor . server . mtproto . protocol . { MessageBox , SessionLost } 
 import im . actor . server . mtproto . { transport ⇒ T } 
 - import im . actor . server . session . { SessionMessage , SessionRegion } 
 + import im . actor . server . session . { HandleMessageBox , SessionEnvelope , SessionRegion } 
 
 private [ frontend ] object SessionClient { 
 + 
 @ SerialVersionUID ( 1L ) 
 case class SendToSession ( p : T . MTPackage ) 
 
 @ @ - 21 , 6 + 23 , 7 @ @ private [ frontend ] object SessionClient { 
 } 
 
 private [ frontend ] class SessionClient ( sessionRegion : SessionRegion ) extends Actor with ActorLogging with ActorPublisher [ T . MTProto ] { 
 + 
 import SessionClient . SendToSession 
 
 private [ this ] var packageQueue = immutable . Queue . empty [ T . MTProto ] 
 @ @ - 29 , 7 + 32 , 7 @ @ private [ frontend ] class SessionClient ( sessionRegion : SessionRegion ) extends Acto 
 
 def watchForSession : Receive = publisher orElse { 
 case SendToSession ( T . MTPackage ( authId , sessionId , messageBytes ) ) ⇒ 
 - sessionRegion . ref ! SessionMessage . envelope ( authId , sessionId , SessionMessage . HandleMessageBox ( messageBytes . toByteArray ) ) 
 + sessionRegion . ref ! SessionEnvelope ( authId , sessionId ) . withHandleMessageBox ( HandleMessageBox ( ByteString . copyFrom ( messageBytes . toByteBuffer ) ) ) 
 case p : T . MTPackage ⇒ 
 context . watch ( sender ( ) ) 
 enqueuePackage ( p ) 
 @ @ - 38 , 7 + 41 , 7 @ @ private [ frontend ] class SessionClient ( sessionRegion : SessionRegion ) extends Acto 
 
 def working ( authId : Long , sessionId : Long ) : Receive = publisher orElse { 
 case SendToSession ( T . MTPackage ( authId , sessionId , messageBytes ) ) ⇒ 
 - sessionRegion . ref ! SessionMessage . envelope ( authId , sessionId , SessionMessage . HandleMessageBox ( messageBytes . toByteArray ) ) 
 + sessionRegion . ref ! SessionEnvelope ( authId , sessionId ) . withHandleMessageBox ( HandleMessageBox ( ByteString . copyFrom ( messageBytes . toByteBuffer ) ) ) 
 case p @ T . MTPackage ( authId , sessionId , mbBits : BitVector ) ⇒ 
 enqueuePackage ( p ) 
 case Terminated ( sessionRef ) ⇒ 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 index 8daa465 . . 9c9823a 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthHelpers . scala 
 @ @ - 25 , 8 + 25 , 7 @ @ import im . actor . server . models . { AuthEmailTransaction , AuthPhoneTransaction , User 
 import im . actor . server . persist . auth . AuthTransaction 
 import im . actor . server . push . SeqUpdatesManager . _ 
 import im . actor . server . push . SeqUpdatesManagerRegion 
 - import im . actor . server . session . SessionMessage . AuthorizeUserAck 
 - import im . actor . server . session . { SessionMessage , SessionRegion } 
 + import im . actor . server . session . _ 
 import im . actor . server . social . SocialManager . _ 
 import im . actor . server . user . { UserOfficeRegion , UserOffice } 
 import im . actor . server . util . IdUtils . _ 
 @ @ - 162 , 8 + 161 , 8 @ @ trait AuthHelpers extends Helpers { 
 for { 
 _ ← UserOffice . auth ( userId , clientData . authId ) 
 ack ← sessionRegion . ref 
 - . ask ( SessionMessage . envelope ( SessionMessage . AuthorizeUser ( userId ) ) ( clientData ) ) 
 - . mapTo [ SessionMessage . AuthorizeUserAck ] 
 + . ask ( SessionEnvelope ( clientData . authId , clientData . sessionId ) . withAuthorizeUser ( AuthorizeUser ( userId ) ) ) 
 + . mapTo [ AuthorizeUserAck ] 
 } yield ack 
 } 
 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 index 4f52c2b . . 75424c6 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / auth / AuthServiceImpl . scala 
 @ @ - 520 , 8 + 520 , 7 @ @ class AuthServiceImpl ( val activationContext : CodeActivation , mediator : ActorRef ) 
 result match { 
 case Ok ( r : ResponseAuth ) ⇒ 
 UserOffice . auth ( r . user . id , clientData . authId ) 
 - sessionRegion . ref ! SessionMessage . envelope ( SessionMessage . AuthorizeUser ( r . user . id ) ) ( clientData ) 
 - 
 + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) . withAuthorizeUser ( AuthorizeUser ( r . user . id ) ) 
 case _ ⇒ 
 } 
 
 diff - - git a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 index 8288608 . . d1df1e8 100644 
 - - - a / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 + + + b / actor - server / actor - rpc - api / src / main / scala / im / actor / server / api / rpc / service / sequence / SequenceServiceImpl . scala 
 @ @ - 15 , 7 + 15 , 7 @ @ import im . actor . api . rpc . sequence . { DifferenceUpdate , ResponseGetDifference , Sequ 
 import im . actor . server . models 
 import im . actor . server . models . sequence . SeqUpdate 
 import im . actor . server . push . { SeqUpdatesManager , SeqUpdatesManagerRegion } 
 - import im . actor . server . session . { SessionMessage , SessionRegion } 
 + import im . actor . server . session . _ 
 import im . actor . server . util . { AnyRefLogSource , GroupUtils , UserUtils } 
 
 class SequenceServiceImpl ( config : SequenceServiceConfig ) ( 
 @ @ - 86 , 11 + 86 , 8 @ @ class SequenceServiceImpl ( config : SequenceServiceConfig ) ( 
 / / FIXME : # security check access hashes 
 val userIds = users . map ( _ . userId ) . toSet 
 
 - sessionRegion . ref ! SessionMessage . envelope ( 
 - clientData . authId , 
 - clientData . sessionId , 
 - SessionMessage . SubscribeToOnline ( userIds ) 
 - ) 
 + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) 
 + . withSubscribeToOnline ( ( SubscribeToOnline ( userIds . toSeq ) ) ) 
 } 
 } 
 
 @ @ - 104 , 27 + 101 , 26 @ @ class SequenceServiceImpl ( config : SequenceServiceConfig ) ( 
 / / FIXME : # security check access hashes 
 val userIds = users . map ( _ . userId ) . toSet 
 
 - sessionRegion . ref ! SessionMessage . envelope ( 
 - clientData . authId , 
 - clientData . sessionId , 
 - SessionMessage . SubscribeFromOnline ( userIds ) 
 - ) 
 + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) 
 + . withSubscribeFromOnline ( SubscribeFromOnline ( userIds . toSeq ) ) 
 } 
 } 
 
 - override def jhandleSubscribeFromGroupOnline ( groups : Vector [ GroupOutPeer ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { 
 + override def jhandleSubscribeToGroupOnline ( groups : Vector [ GroupOutPeer ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { 
 Future . successful ( Ok ( ResponseVoid ) ) andThen { 
 case _ ⇒ 
 / / FIXME : # security check access hashes 
 - sessionRegion . ref ! SessionMessage . envelope ( clientData . authId , clientData . sessionId , SessionMessage . SubscribeFromGroupOnline ( groups . map ( _ . groupId ) . toSet ) ) 
 + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) 
 + . withSubscribeToGroupOnline ( SubscribeToGroupOnline ( groups . map ( _ . groupId ) ) ) 
 } 
 } 
 
 - override def jhandleSubscribeToGroupOnline ( groups : Vector [ GroupOutPeer ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { 
 + override def jhandleSubscribeFromGroupOnline ( groups : Vector [ GroupOutPeer ] , clientData : ClientData ) : Future [ HandlerResult [ ResponseVoid ] ] = { 
 Future . successful ( Ok ( ResponseVoid ) ) andThen { 
 case _ ⇒ 
 / / FIXME : # security check access hashes 
 - sessionRegion . ref ! SessionMessage . envelope ( clientData . authId , clientData . sessionId , SessionMessage . SubscribeToGroupOnline ( groups . map ( _ . groupId ) . toSet ) ) 
 + sessionRegion . ref ! SessionEnvelope ( clientData . authId , clientData . sessionId ) 
 + . withSubscribeFromGroupOnline ( SubscribeFromGroupOnline ( groups . map ( _ . groupId ) ) ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - session - messages / src / main / protobuf / session . proto b / actor - server / actor - session - messages / src / main / protobuf / session . proto 
 new file mode 100644 
 index 0000000 . . d0f2a79 
 - - - / dev / null 
 + + + b / actor - server / actor - session - messages / src / main / protobuf / session . proto 
 @ @ - 0 , 0 + 1 , 58 @ @ 
 + syntax = " proto2 " ; 
 + 
 + package im . actor . server ; 
 + 
 + option ( scalapb . options ) = { 
 + import : " im . actor . server . api . TypeMappers . _ " 
 + import : " scala . collection . JavaConversions . _ " 
 + } ; 
 + 
 + import " scalapb / scalapb . proto " ; 
 + 
 + message SessionEnvelope { 
 + required int64 auth _ id = 1 ; 
 + required int64 session _ id = 2 ; 
 + 
 + oneof payload { 
 + HandleMessageBox handle _ message _ box = 3 ; 
 + AuthorizeUser authorize _ user = 4 ; 
 + SubscribeToOnline subscribe _ to _ online = 5 ; 
 + SubscribeFromOnline subscribe _ from _ online = 6 ; 
 + SubscribeToGroupOnline subscribe _ to _ group _ online = 7 ; 
 + SubscribeFromGroupOnline subscribe _ from _ group _ online = 8 ; 
 + } 
 + } 
 + 
 + message HandleMessageBox { 
 + option ( scalapb . message ) . extends = " im . actor . server . session . SessionMessage " ; 
 + required bytes message _ box _ bytes = 1 ; 
 + } 
 + 
 + message AuthorizeUser { 
 + option ( scalapb . message ) . extends = " im . actor . server . session . SessionMessage " ; 
 + required int32 user _ id = 1 ; 
 + } 
 + 
 + message AuthorizeUserAck { 
 + option ( scalapb . message ) . extends = " im . actor . server . session . SessionResponse " ; 
 + } 
 + 
 + message SubscribeToOnline { 
 + option ( scalapb . message ) . extends = " im . actor . server . session . SubscribeCommand " ; 
 + repeated int32 user _ ids = 1 ; 
 + } 
 + 
 + message SubscribeFromOnline { 
 + option ( scalapb . message ) . extends = " im . actor . server . session . SubscribeCommand " ; 
 + repeated int32 user _ ids = 1 ; 
 + } 
 + 
 + message SubscribeToGroupOnline { 
 + option ( scalapb . message ) . extends = " im . actor . server . session . SubscribeCommand " ; 
 + repeated int32 group _ ids = 1 ; 
 + } 
 + 
 + message SubscribeFromGroupOnline { 
 + option ( scalapb . message ) . extends = " im . actor . server . session . SubscribeCommand " ; 
 + repeated int32 group _ ids = 1 ; 
 + } 
 \ No newline at end of file 
 diff - - git a / actor - server / actor - session - messages / src / main / scala / im / actor / server / session / SessionMessage . scala b / actor - server / actor - session - messages / src / main / scala / im / actor / server / session / SessionMessage . scala 
 index c170424 . . 1feec36 100644 
 - - - a / actor - server / actor - session - messages / src / main / scala / im / actor / server / session / SessionMessage . scala 
 + + + b / actor - server / actor - session - messages / src / main / scala / im / actor / server / session / SessionMessage . scala 
 @ @ - 2 , 43 + 2 , 23 @ @ package im . actor . server . session 
 
 import akka . actor . ActorRef 
 
 - import im . actor . api . rpc . BaseClientData 
 - import im . actor . server . mtproto . protocol . ProtoMessage 
 + import im . actor . server . commons . serialization . ActorSerializer 
 
 case class SessionRegion ( ref : ActorRef ) 
 
 - sealed trait SessionMessage 
 - sealed trait SubscribeCommand extends SessionMessage 
 - sealed trait SessionResponse 
 - 
 object SessionMessage { 
 - @ SerialVersionUID ( 1L ) 
 - private [ session ] case class Envelope ( authId : Long , sessionId : Long , message : SessionMessage ) 
 - 
 - @ SerialVersionUID ( 1L ) 
 - case class HandleMessageBox ( messageBoxBytes : Array [ Byte ] ) extends SessionMessage 
 - 
 - @ SerialVersionUID ( 1L ) 
 - case class AuthorizeUser ( userId : Int ) extends SessionMessage 
 - 
 - @ SerialVersionUID ( 1L ) 
 - case class SubscribeToOnline ( userIds : Set [ Int ] ) extends SubscribeCommand 
 - 
 - @ SerialVersionUID ( 1L ) 
 - case class SubscribeFromOnline ( userIds : Set [ Int ] ) extends SubscribeCommand 
 - 
 - @ SerialVersionUID ( 1L ) 
 - case class SubscribeToGroupOnline ( groupIds : Set [ Int ] ) extends SubscribeCommand 
 - 
 - @ SerialVersionUID ( 1L ) 
 - case class SubscribeFromGroupOnline ( groupIds : Set [ Int ] ) extends SubscribeCommand 
 + def register ( ) : Unit = { 
 + ActorSerializer . register ( 100 , classOf [ SessionEnvelope ] ) 
 + ActorSerializer . register ( 101 , classOf [ SubscribeToOnline ] ) 
 + ActorSerializer . register ( 102 , classOf [ SubscribeFromOnline ] ) 
 + ActorSerializer . register ( 103 , classOf [ SubscribeToGroupOnline ] ) 
 + ActorSerializer . register ( 104 , classOf [ SubscribeFromGroupOnline ] ) 
 + ActorSerializer . register ( 105 , classOf [ AuthorizeUserAck ] ) 
 + } 
 + } 
 
 - @ SerialVersionUID ( 1L ) 
 - case class AuthorizeUserAck ( userId : Int ) extends SessionResponse 
 + trait SessionMessage 
 
 - def envelope ( authId : Long , sessionId : Long , message : SessionMessage ) : Envelope = 
 - Envelope ( authId , sessionId , message ) 
 + trait SubscribeCommand extends SessionMessage 
 
 - def envelope ( message : SessionMessage ) ( implicit clientData : BaseClientData ) : Envelope = 
 - envelope ( clientData . authId , clientData . sessionId , message ) 
 - } 
 \ No newline at end of file 
 + trait SessionResponse 
 diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala 
 index f0a0e6f . . 1eee63a 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / Session . scala 
 @ @ - 2 , 16 + 2 , 14 @ @ package im . actor . server . session 
 
 import java . util . concurrent . TimeUnit 
 
 - import im . actor . server . api . rpc . service . auth . { AuthEvents , AuthService } 
 - 
 import scala . collection . immutable 
 import scala . concurrent . ExecutionContext 
 import scala . concurrent . duration . _ 
 
 - import akka . pattern . pipe 
 import akka . actor . _ 
 import akka . contrib . pattern . ShardRegion . Passivate 
 - import akka . contrib . pattern . { DistributedPubSubMediator , ClusterSharding , ShardRegion } 
 + import akka . contrib . pattern . { ClusterSharding , DistributedPubSubMediator , ShardRegion } 
 + import akka . pattern . pipe 
 import akka . stream . Materializer 
 import akka . stream . actor . _ 
 import akka . stream . scaladsl . _ 
 @ @ - 21 , 6 + 19 , 7 @ @ import scodec . bits . BitVector 
 import slick . driver . PostgresDriver . api . _ 
 
 import im . actor . api . rpc . ClientData 
 + import im . actor . server . api . rpc . service . auth . { AuthEvents , AuthService } 
 import im . actor . server . mtproto . codecs . protocol . MessageBoxCodec 
 import im . actor . server . mtproto . protocol . _ 
 import im . actor . server . mtproto . transport . { Drop , MTPackage } 
 @ @ - 41 , 14 + 40 , 14 @ @ object SessionConfig { 
 
 object Session { 
 
 - import SessionMessage . _ 
 + SessionMessage . register ( ) 
 
 private [ this ] val idExtractor : ShardRegion . IdExtractor = { 
 - case env @ Envelope ( authId , sessionId , payload ) ⇒ ( authId . toString + " - " + sessionId . toString , env ) 
 + case env @ SessionEnvelope ( authId , sessionId , payload ) ⇒ ( authId . toString + " - " + sessionId . toString , env ) 
 } 
 
 private [ this ] val shardResolver : ShardRegion . ShardResolver = msg ⇒ msg match { 
 - case Envelope ( authId , sessionId , _ ) ⇒ ( authId % 32 ) . toString / / TODO : configurable 
 + case SessionEnvelope ( authId , sessionId , _ ) ⇒ ( authId % 32 ) . toString / / TODO : configurable 
 } 
 
 def startRegion ( props : Option [ Props ] ) ( implicit system : ActorSystem ) : SessionRegion = 
 @ @ - 98 , 7 + 97 , 7 @ @ class Session ( mediator : ActorRef ) ( 
 ) 
 extends Actor with ActorLogging with MessageIdHelper with Stash { 
 
 - import SessionMessage . _ 
 + import SessionEnvelope . Payload 
 
 implicit val ec : ExecutionContext = context . dispatcher 
 
 @ @ - 116 , 7 + 115 , 7 @ @ class Session ( mediator : ActorRef ) ( 
 def receive = waitingForEnvelope 
 
 def waitingForEnvelope : Receive = { 
 - case env @ Envelope ( authId , sessionId , _ ) ⇒ 
 + case env @ SessionEnvelope ( authId , sessionId , _ ) ⇒ 
 val replyTo = sender ( ) 
 stash ( ) 
 
 @ @ - 173 , 10 + 172 , 10 @ @ class Session ( mediator : ActorRef ) ( 
 } 
 
 def anonymous ( authId : Long , sessionId : Long ) : Receive = { 
 - case env @ Envelope ( authId , sessionId , HandleMessageBox ( messageBoxBytes ) ) ⇒ 
 + case env @ SessionEnvelope ( authId , sessionId , Payload . HandleMessageBox ( HandleMessageBox ( messageBoxBytes ) ) ) ⇒ 
 val client = sender ( ) 
 
 - withValidMessageBox ( client , messageBoxBytes ) { mb ⇒ 
 + withValidMessageBox ( client , messageBoxBytes . toByteArray ) { mb ⇒ 
 val sessionMessagePublisher = context . actorOf ( SessionMessagePublisher . props ( ) , " messagePublisher " ) 
 val rpcHandler = context . actorOf ( RpcHandler . props , " rpcHandler " ) 
 val updatesHandler = context . actorOf ( UpdatesHandler . props ( authId ) , " updatesHandler " ) 
 @ @ - 193 , 8 + 192 , 8 @ @ class Session ( mediator : ActorRef ) ( 
 
 / / format : OFF 
 
 - source ~ > g ~ > bcast ~ > sink 
 - bcast ~ > Sink . onComplete { _ ⇒ log . warning ( " Dying due to stream completion " ) ; self ! PoisonPill } 
 + source ~ > g ~ > bcast ~ > sink 
 + bcast ~ > Sink . onComplete { _ ⇒ log . warning ( " Dying due to stream completion " ) ; self ! PoisonPill } 
 
 / / format : ON 
 } 
 @ @ - 212 , 7 + 211 , 7 @ @ class Session ( mediator : ActorRef ) ( 
 } 
 
 def resolved ( authId : Long , sessionId : Long , publisher : ActorRef , reSender : ActorRef ) : Receive = { 
 - case env @ Envelope ( eauthId , esessionId , msg ) ⇒ 
 + case env @ SessionEnvelope ( eauthId , esessionId , ( msg ) ) ⇒ 
 val client = sender ( ) 
 
 if ( authId ! = eauthId | | sessionId ! = esessionId ) / / Should never happen 
 @ @ - 235 , 25 + 234 , 34 @ @ class Session ( mediator : ActorRef ) ( 
 authId : Long , 
 sessionId : Long , 
 client : ActorRef , 
 - message : SessionMessage , 
 + message : Payload , 
 publisher : ActorRef , 
 reSender : ActorRef 
 ) : Unit = { 
 message match { 
 - case HandleMessageBox ( messageBoxBytes ) ⇒ 
 - withValidMessageBox ( client , messageBoxBytes ) { mb ⇒ 
 + case Payload . HandleMessageBox ( HandleMessageBox ( messageBoxBytes ) ) ⇒ 
 + withValidMessageBox ( client , messageBoxBytes . toByteArray ) { mb ⇒ 
 recordClient ( client , reSender ) 
 publisher ! Tuple2 ( mb , ClientData ( authId , sessionId , optUserId ) ) 
 } 
 - case cmd : SubscribeCommand ⇒ 
 + case _ : Payload . SubscribeToOnline | _ : Payload . SubscribeFromOnline | _ : Payload . SubscribeToGroupOnline | _ : Payload . SubscribeFromGroupOnline ⇒ 
 + val cmd : SubscribeCommand = 
 + message . subscribeToOnline 
 + . orElse ( message . subscribeFromOnline ) 
 + . orElse ( message . subscribeToGroupOnline ) 
 + . orElse ( message . subscribeFromGroupOnline ) 
 + . get 
 + 
 publisher ! cmd 
 - case AuthorizeUser ( userId ) ⇒ 
 + case Payload . AuthorizeUser ( AuthorizeUser ( userId ) ) ⇒ 
 log . debug ( " User { } authorized session { } " , userId , sessionId ) 
 
 this . optUserId = Some ( userId ) 
 
 / / TODO : handle errors 
 - db . run ( persist . SessionInfo . updateUserId ( authId , sessionId , this . optUserId ) . map ( _ ⇒ AuthorizeUserAck ( userId ) ) ) pipeTo sender ( ) 
 + db . run ( persist . SessionInfo . updateUserId ( authId , sessionId , this . optUserId ) . map ( _ ⇒ AuthorizeUserAck ( ) ) ) pipeTo sender ( ) 
 + case unmatched ⇒ 
 + log . error ( " Unmatched session message { } " , unmatched ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala b / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala 
 index 0a213d7 . . 97dbc24 100644 
 - - - a / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala 
 + + + b / actor - server / actor - session / src / main / scala / im / actor / server / session / UpdatesHandler . scala 
 @ @ - 9 , 7 + 9 , 6 @ @ import akka . stream . actor . _ 
 import im . actor . server . mtproto . protocol . { ProtoMessage , UpdateBox } 
 import im . actor . server . presences . { GroupPresenceManagerRegion , PresenceManagerRegion } 
 import im . actor . server . push . _ 
 - import im . actor . server . session . SessionMessage . _ 
 
 private [ session ] object UpdatesHandler { 
 def props ( authId : Long ) ( 
 @ @ - 45 , 13 + 44 , 13 @ @ private [ session ] class UpdatesHandler ( authId : Long ) ( 
 case OnNext ( cmd : SubscribeCommand ) ⇒ 
 cmd match { 
 case SubscribeToOnline ( userIds ) ⇒ 
 - updatesConsumer ! SubscribeToUserPresences ( userIds ) 
 + updatesConsumer ! SubscribeToUserPresences ( userIds . toSet ) 
 case SubscribeFromOnline ( userIds ) ⇒ 
 - updatesConsumer ! UnsubscribeFromUserPresences ( userIds ) 
 + updatesConsumer ! UnsubscribeFromUserPresences ( userIds . toSet ) 
 case SubscribeToGroupOnline ( groupIds ) ⇒ 
 - updatesConsumer ! SubscribeToGroupPresences ( groupIds ) 
 + updatesConsumer ! SubscribeToGroupPresences ( groupIds . toSet ) 
 case SubscribeFromGroupOnline ( groupIds ) ⇒ 
 - updatesConsumer ! UnsubscribeFromGroupPresences ( groupIds ) 
 + updatesConsumer ! UnsubscribeFromGroupPresences ( groupIds . toSet ) 
 } 
 case OnComplete ⇒ 
 context . stop ( self ) 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala 
 index f2ea4c9 . . 60c2a24 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / api / rpc / service / AuthServiceSpec . scala 
 @ @ - 11 , 7 + 11 , 7 @ @ import scala . util . Random 
 import scalaz . \ / 
 
 import akka . contrib . pattern . DistributedPubSubExtension 
 - import com . google . protobuf . CodedInputStream 
 + import com . google . protobuf . { ByteString , CodedInputStream } 
 import org . scalatest . Inside . _ 
 import im . actor . server . models 
 
 @ @ - 29 , 9 + 29 , 8 @ @ import im . actor . server . mtproto . protocol . { MessageBox , SessionHello } 
 import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } 
 import im . actor . server . persist . auth . AuthTransaction 
 import im . actor . server . presences . { GroupPresenceManager , PresenceManager } 
 - import im . actor . server . push . { SeqUpdatesManager , WeakUpdatesManager } 
 - import im . actor . server . session . SessionMessage . _ 
 - import im . actor . server . session . { Session , SessionConfig } 
 + import im . actor . server . push . WeakUpdatesManager 
 + import im . actor . server . session . { SessionEnvelope , HandleMessageBox , Session , SessionConfig } 
 import im . actor . server . sms . AuthSmsEngine 
 import im . actor . server . social . SocialManager 
 import im . actor . server . user . { UserOfficeRegion , UserOffice } 
 @ @ - 862 , 8 + 861 , 8 @ @ class AuthServiceSpec extends BaseAppSuite { 
 } 
 
 private def sendSessionHello ( authId : Long , sessionId : Long ) : Unit = { 
 - val message = HandleMessageBox ( MessageBoxCodec . encode ( MessageBox ( Random . nextLong ( ) , SessionHello ) ) . require . toByteArray ) 
 - sessionRegion . ref ! envelope ( authId , sessionId , message ) 
 + val message = HandleMessageBox ( ByteString . copyFrom ( MessageBoxCodec . encode ( MessageBox ( Random . nextLong ( ) , SessionHello ) ) . require . toByteBuffer ) ) 
 + sessionRegion . ref ! SessionEnvelope ( authId , sessionId ) . withHandleMessageBox ( message ) 
 } 
 } 
 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala 
 index d5208e3 . . e803fdd 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / BaseSessionSpec . scala 
 @ @ - 1 , 21 + 1 , 21 @ @ 
 package im . actor . server . session 
 
 - import akka . contrib . pattern . DistributedPubSubExtension 
 - import im . actor . server 
 - 
 - import scala . concurrent . { Promise , Future , Await , blocking } 
 import scala . concurrent . duration . _ 
 - import scala . util . { Success , Random } 
 + import scala . concurrent . { Await , Future , blocking } 
 + import scala . util . Random 
 
 import akka . actor . _ 
 + import akka . contrib . pattern . DistributedPubSubExtension 
 import akka . stream . ActorMaterializer 
 import akka . testkit . TestProbe 
 + import com . google . protobuf . ByteString 
 import org . scalatest . concurrent . ScalaFutures 
 import org . scalatest . { FlatSpecLike , Matchers } 
 
 import im . actor . api . rpc . RpcResult 
 import im . actor . api . rpc . codecs . _ 
 import im . actor . api . rpc . sequence . { SeqUpdate , WeakUpdate } 
 + import im . actor . server 
 import im . actor . server . activation . internal . DummyCodeActivation 
 import im . actor . server . api . ActorSpecHelpers 
 import im . actor . server . api . rpc . service . auth . AuthServiceImpl 
 @ @ - 27 , 15 + 27 , 16 @ @ import im . actor . server . mtproto . transport . MTPackage 
 import im . actor . server . oauth . { GoogleProvider , OAuth2GoogleConfig } 
 import im . actor . server . presences . { GroupPresenceManager , PresenceManager } 
 import im . actor . server . push . WeakUpdatesManager 
 + import im . actor . server . session . SessionEnvelope . Payload 
 import im . actor . server . social . SocialManager 
 - import im . actor . server . user . { UserOfficeRegion , UserOffice } 
 - import im . actor . server . { KafkaSpec , SqlSpecHelpers , persist } 
 + import im . actor . server . user . UserOfficeRegion 
 + import im . actor . server . { SqlSpecHelpers , persist } 
 
 - abstract class BaseSessionSpec ( _ system : ActorSystem = { server . ActorSpecification . createSystem ( ) } ) 
 + abstract class BaseSessionSpec ( _ system : ActorSystem = { 
 + server . ActorSpecification . createSystem ( ) 
 + } ) 
 extends server . ActorSuite ( _ system ) with FlatSpecLike with ScalaFutures with Matchers with SqlSpecHelpers with ActorSpecHelpers { 
 
 - import SessionMessage . _ 
 - 
 implicit val materializer = ActorMaterializer ( ) 
 implicit val ( ds , db ) = migrateAndInitDb ( ) 
 implicit val ec = system . dispatcher 
 @ @ - 180 , 15 + 181 , 14 @ @ abstract class BaseSessionSpec ( _ system : ActorSystem = { server . ActorSpecificatio 
 } 
 
 protected def sendMessageBox ( authId : Long , sessionId : Long , session : ActorRef , messageId : Long , body : ProtoMessage ) ( implicit probe : TestProbe ) = 
 - sendEnvelope ( authId , sessionId , session , HandleMessageBox ( MessageBoxCodec . encode ( MessageBox ( messageId , body ) ) . require . toByteArray ) ) 
 + sendEnvelope ( authId , sessionId , session , Payload . HandleMessageBox ( HandleMessageBox ( ByteString . copyFrom ( MessageBoxCodec . encode ( MessageBox ( messageId , body ) ) . require . toByteBuffer ) ) ) ) 
 
 - protected def sendEnvelope ( authId : Long , sessionId : Long , session : ActorRef , msg : SessionMessage ) ( implicit probe : TestProbe ) = { 
 + protected def sendEnvelope ( authId : Long , sessionId : Long , session : ActorRef , payload : Payload ) ( implicit probe : TestProbe ) = { 
 session . tell ( 
 - Envelope ( 
 + SessionEnvelope ( 
 authId , 
 - sessionId , 
 - msg 
 - ) , 
 + sessionId 
 + ) . withPayload ( payload ) , 
 probe . ref 
 ) 
 } 
 diff - - git a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 index 021b46d . . 5c92caf 100644 
 - - - a / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 + + + b / actor - server / actor - tests / src / test / scala / im / actor / server / session / SessionSpec . scala 
 @ @ - 5 , 6 + 5 , 7 @ @ import scala . concurrent . duration . _ 
 import scala . util . Random 
 
 import akka . testkit . TestProbe 
 + import com . google . protobuf . ByteString 
 import scodec . bits . _ 
 
 import im . actor . api . rpc . auth . _ 
 @ @ - 18 , 6 + 19 , 7 @ @ import im . actor . api . rpc . { AuthorizedClientData , Request , RpcOk } 
 import im . actor . server . mtproto . protocol . _ 
 import im . actor . server . mtproto . transport . _ 
 import im . actor . server . push . { SeqUpdatesManager , WeakUpdatesManager } 
 + import im . actor . server . session . SessionEnvelope . Payload 
 
 class SessionSpec extends BaseSessionSpec { 
 behavior of " Session actor " 
 @ @ - 33 , 8 + 35 , 6 @ @ class SessionSpec extends BaseSessionSpec { 
 
 case class sessions ( ) { 
 
 - import SessionMessage . _ 
 - 
 implicit val probe = TestProbe ( ) 
 
 def e1 ( ) = { 
 @ @ - 42 , 7 + 42 , 7 @ @ class SessionSpec extends BaseSessionSpec { 
 val sessionId = Random . nextLong ( ) 
 val session = system . actorOf ( Session . props ( mediator ) ) 
 
 - sendEnvelope ( authId , sessionId , session , HandleMessageBox ( BitVector . empty . toByteArray ) ) 
 + sendEnvelope ( authId , sessionId , session , Payload . HandleMessageBox ( HandleMessageBox ( ByteString . copyFrom ( BitVector . empty . toByteBuffer ) ) ) ) 
 
 probe watch session 
 
 diff - - git a / actor - server / project / Build . scala b / actor - server / project / Build . scala 
 index 9327f8a . . 46fda7b 100644 
 - - - a / actor - server / project / Build . scala 
 + + + b / actor - server / project / Build . scala 
 @ @ - 218 , 7 + 218 , 7 @ @ object Build extends sbt . Build { 
 id = " actor - session - messages " , 
 base = file ( " actor - session - messages " ) , 
 settings = defaultSettings + + Seq ( libraryDependencies + + = Dependencies . sessionMessages ) 
 - ) . dependsOn ( actorCommonsApi ) 
 + ) . dependsOn ( actorCommonsBase , actorCommonsApi ) 
 
 lazy val actorPush = Project ( 
 id = " actor - push " ,
