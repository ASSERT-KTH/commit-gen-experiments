BLEU SCORE: 0.06328773820616561

TEST MSG: fix ( core ) : Fixing storage upgrade
GENERATED MSG: feat ( ios + core ) : Integrated Wake Locks , passing call id from PuskKit to core

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > index ec47e65 . . a4ac5ad 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java < nl > @ @ - 39 , 6 + 39 , 7 @ @ import im . actor . core . utils . ImageHelper ; < nl > import im . actor . core . viewmodel . Command ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . core . viewmodel . GalleryVM ; < nl > + import im . actor . runtime . Runtime ; < nl > import im . actor . runtime . actors . Actor ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > @ @ - 147 , 19 + 148 , 16 @ @ public class AndroidMessenger extends im . actor . core . Messenger { < nl > } else { < nl > appStateActor . send ( new AppStateActor . OnScreenOff ( ) ) ; < nl > } < nl > + } < nl > < nl > + @ Override < nl > + public void onLoggedIn ( ) { < nl > modules . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { < nl > @ Override < nl > public void onChanged ( Integer val , Value < Integer > valueModel ) { < nl > ShortcutBadger . with ( AndroidContext . getContext ( ) ) . count ( val ) ; < nl > } < nl > } ) ; < nl > - / / modules . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { < nl > - / / @ Override < nl > - / / public void onChanged ( Integer val , ValueModel < Integer > valueModel ) { < nl > - / / ShortcutBadger . with ( AndroidContext . getContext ( ) ) . count ( val ) ; < nl > - / / } < nl > - / / } ) ; < nl > } < nl > < nl > public Context getContext ( ) { < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 7824f8f . . cd999ce 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 106 , 6 + 106 , 9 @ @ public class Messenger { < nl > timing . section ( " Modules : Create " ) ; < nl > this . modules = new Modules ( this , configuration ) ; < nl > < nl > + timing . section ( " Modules : Run " ) ; < nl > + this . modules . run ( ) ; < nl > + < nl > timing . end ( ) ; < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java < nl > index 0bd10cc . . bc1b76d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java < nl > @ @ - 45 , 6 + 45 , 8 @ @ public interface ModuleContext { < nl > < nl > StorageModule getStorageModule ( ) ; < nl > < nl > + void afterStorageReset ( ) ; < nl > + < nl > / / Preferences < nl > PreferencesStorage getPreferences ( ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java < nl > index 06bad71 . . 1c44651 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java < nl > @ @ - 35 , 6 + 35 , 7 @ @ import im . actor . core . modules . typing . TypingModule ; < nl > import im . actor . core . modules . users . UsersModule ; < nl > import im . actor . core . network . ActorApi ; < nl > import im . actor . core . util . Timing ; < nl > + import im . actor . runtime . Runtime ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . eventbus . EventBus ; < nl > import im . actor . runtime . storage . PreferencesStorage ; < nl > @ @ - 55 , 7 + 56 , 6 @ @ public class Modules implements ModuleContext { < nl > private final ApiModule api ; < nl > < nl > / / Modules required before authentication < nl > - private final AppStateModule appStateModule ; < nl > private final ExternalModule external ; < nl > private final Authentication authentication ; < nl > < nl > @ @ - 63 , 6 + 63 , 7 @ @ public class Modules implements ModuleContext { < nl > private volatile Updates updates ; < nl > private volatile UsersModule users ; < nl > private volatile GroupsModule groups ; < nl > + private volatile AppStateModule appStateModule ; < nl > private volatile StickersModule stickers ; < nl > private volatile CallsModule calls ; < nl > private volatile MessagesModule messages ; < nl > @ @ - 103 , 9 + 104 , 6 @ @ public class Modules implements ModuleContext { < nl > timing . section ( " API " ) ; < nl > this . api = new ApiModule ( this ) ; < nl > < nl > - timing . section ( " App State " ) ; < nl > - this . appStateModule = new AppStateModule ( this ) ; < nl > - < nl > timing . section ( " External " ) ; < nl > this . external = new ExternalModule ( this ) ; < nl > < nl > @ @ - 114 , 16 + 112 , 26 @ @ public class Modules implements ModuleContext { < nl > < nl > timing . section ( " Auth " ) ; < nl > this . authentication = new Authentication ( this ) ; < nl > + timing . end ( ) ; < nl > + } < nl > + < nl > + public void run ( ) { < nl > + Timing timing = new Timing ( " RUN " ) ; < nl > + timing . section ( " Auth " ) ; < nl > this . authentication . run ( ) ; < nl > timing . end ( ) ; < nl > } < nl > < nl > - public void onLoggedIn ( ) { < nl > + public void onLoggedIn ( boolean first ) { < nl > Timing timing = new Timing ( " ACCOUNT _ CREATE " ) ; < nl > timing . section ( " Users " ) ; < nl > users = new UsersModule ( this ) ; < nl > + timing . section ( " Storage " ) ; < nl > + storageModule . applyStorage ( first ) ; < nl > timing . section ( " Groups " ) ; < nl > groups = new GroupsModule ( this ) ; < nl > + timing . section ( " App State " ) ; < nl > + appStateModule = new AppStateModule ( this ) ; < nl > timing . section ( " Stickers " ) ; < nl > stickers = new StickersModule ( this ) ; < nl > timing . section ( " Calls " ) ; < nl > @ @ - 160 , 8 + 168 , 6 @ @ public class Modules implements ModuleContext { < nl > deviceInfoModule = new DeviceInfoModule ( this ) ; < nl > timing . section ( " EventBus " ) ; < nl > eventBusModule = new EventBusModule ( this ) ; < nl > - timing . section ( " Storage " ) ; < nl > - storageModule . applyStorage ( ) ; < nl > timing . end ( ) ; < nl > < nl > < nl > @ @ - 194 , 7 + 200 , 22 @ @ public class Modules implements ModuleContext { < nl > stickers . run ( ) ; < nl > timing . end ( ) ; < nl > < nl > - messenger . onLoggedIn ( ) ; < nl > + if ( Runtime . isMainThread ( ) ) { < nl > + messenger . onLoggedIn ( ) ; < nl > + } else { < nl > + Runtime . postToMainThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + messenger . onLoggedIn ( ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void afterStorageReset ( ) { < nl > + / / Recreation of Users Module to pick fresh database < nl > + users = new UsersModule ( this ) ; < nl > } < nl > < nl > public void onLoggedOut ( ) { < nl > @ @ - 279 , 6 + 300 , 7 @ @ public class Modules implements ModuleContext { < nl > return storageModule ; < nl > } < nl > < nl > + < nl > @ Override < nl > public I18nEngine getI18nModule ( ) { < nl > return i18nEngine ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / auth / Authentication . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / auth / Authentication . java < nl > index 99b9e05 . . 7cdf8f5 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / auth / Authentication . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / auth / Authentication . java < nl > @ @ - 112 , 7 + 112 , 7 @ @ public class Authentication { < nl > public void run ( ) { < nl > if ( modules . getPreferences ( ) . getBool ( KEY _ AUTH , false ) ) { < nl > state = AuthState . LOGGED _ IN ; < nl > - modules . onLoggedIn ( ) ; < nl > + modules . onLoggedIn ( false ) ; < nl > } else { < nl > state = AuthState . AUTH _ START ; < nl > } < nl > @ @ - 120 , 7 + 120 , 7 @ @ public class Authentication { < nl > < nl > public AuthenticationBackupData performBackup ( ) { < nl > if ( ! isLoggedIn ( ) ) { < nl > - throw new RuntimeException ( " Nothing to backup ! " ) ; < nl > + return null ; < nl > } < nl > < nl > byte [ ] userData = modules . getUsersModule ( ) . getUsersStorage ( ) . getValue ( myUid ) . toByteArray ( ) ; < nl > @ @ - 298 , 12 + 298 , 14 @ @ public class Authentication { < nl > resolver . error ( e ) ; < nl > return ; < nl > } < nl > + < nl > state = AuthState . LOGGED _ IN ; < nl > myUid = auth . getUser ( ) . getId ( ) ; < nl > + modules . onLoggedIn ( true ) ; < nl > + modules . getUsersModule ( ) . getUsersStorage ( ) . addOrUpdateItem ( new User ( auth . getUser ( ) ) ) ; < nl > modules . getPreferences ( ) . putBool ( KEY _ AUTH , true ) ; < nl > modules . getPreferences ( ) . putInt ( KEY _ AUTH _ UID , myUid ) ; < nl > - modules . onLoggedIn ( ) ; < nl > - modules . getUsersModule ( ) . getUsersStorage ( ) . addOrUpdateItem ( new User ( auth . getUser ( ) ) ) ; < nl > + < nl > modules . getUpdatesModule ( ) . onUpdateReceived ( new LoggedIn ( auth , new Runnable ( ) { < nl > @ Override < nl > public void run ( ) { < nl > @ @ - 757 , 7 + 759 , 7 @ @ public class Authentication { < nl > myUid = response . getUser ( ) . getId ( ) ; < nl > modules . getPreferences ( ) . putBool ( KEY _ AUTH , true ) ; < nl > modules . getPreferences ( ) . putInt ( KEY _ AUTH _ UID , myUid ) ; < nl > - modules . onLoggedIn ( ) ; < nl > + modules . onLoggedIn ( true ) ; < nl > modules . getUsersModule ( ) . getUsersStorage ( ) . addOrUpdateItem ( new User ( response . getUser ( ) ) ) ; < nl > modules . getUpdatesModule ( ) . onUpdateReceived ( new LoggedIn ( response , new Runnable ( ) { < nl > @ Override < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / storage / StorageModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / storage / StorageModule . java < nl > index 56f070f . . 473d899 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / storage / StorageModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / storage / StorageModule . java < nl > @ @ - 4 , 52 + 4 , 65 @ @ import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . modules . auth . AuthenticationBackupData ; < nl > import im . actor . core . network . AuthKeyStorage ; < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . Storage ; < nl > < nl > public class StorageModule extends AbsModule { < nl > < nl > - private static final int STORAGE _ SCHEME _ VERSION = 1 ; < nl > + private static String TAG = " StorageModule " ; < nl > + < nl > + private static final int STORAGE _ SCHEME _ VERSION = 12 ; < nl > private static final String STORAGE _ SCHEME _ VERSION _ KEY = " storage _ sheme _ version " ; < nl > < nl > public StorageModule ( ModuleContext context ) { < nl > super ( context ) ; < nl > } < nl > < nl > - public void applyStorage ( ) { < nl > + public void applyStorage ( boolean isFirst ) { < nl > int version = preferences ( ) . getInt ( STORAGE _ SCHEME _ VERSION _ KEY , 0 ) ; < nl > if ( version ! = STORAGE _ SCHEME _ VERSION ) { < nl > - performUpgrade ( ) ; < nl > + Log . w ( TAG , " Upgrading scheme from " + version + " to " + STORAGE _ SCHEME _ VERSION ) ; < nl > + performUpgrade ( isFirst ) ; < nl > preferences ( ) . putInt ( STORAGE _ SCHEME _ VERSION _ KEY , STORAGE _ SCHEME _ VERSION ) ; < nl > } < nl > } < nl > < nl > - private void performUpgrade ( ) { < nl > + private void performUpgrade ( boolean isFirst ) { < nl > < nl > / / < nl > - / / Backing Up sensitive information < nl > + / / Backing Up sensitive data < nl > / / < nl > - < nl > + Log . w ( TAG , " Backing up sensitive data " ) ; < nl > AuthKeyStorage storage = context ( ) . getActorApi ( ) . getKeyStorage ( ) ; < nl > - < nl > long authKey = storage . getAuthKey ( ) ; < nl > byte [ ] masterKey = storage . getAuthMasterKey ( ) ; < nl > - < nl > - AuthenticationBackupData authenticationBackupData = context ( ) . getAuthModule ( ) . performBackup ( ) ; < nl > + AuthenticationBackupData authenticationBackupData = null ; < nl > + if ( ! isFirst ) { < nl > + authenticationBackupData = context ( ) . getAuthModule ( ) . performBackup ( ) ; < nl > + } < nl > < nl > / / < nl > / / Clear Storage < nl > / / < nl > - < nl > + Log . w ( TAG , " Resetting storage " ) ; < nl > Storage . resetStorage ( ) ; < nl > < nl > / / < nl > - / / Restore Data < nl > + / / Notify Modules < nl > / / < nl > + Log . w ( TAG , " Resetting modules " ) ; < nl > + context ( ) . afterStorageReset ( ) ; < nl > < nl > + / / < nl > + / / Restore Data < nl > + / / < nl > + Log . w ( TAG , " Restoring data " ) ; < nl > storage . saveAuthKey ( authKey ) ; < nl > if ( masterKey ! = null ) { < nl > storage . saveMasterKey ( masterKey ) ; < nl > } < nl > - context ( ) . getAuthModule ( ) . restoreBackup ( authenticationBackupData ) ; < nl > + if ( authenticationBackupData ! = null ) { < nl > + context ( ) . getAuthModule ( ) . restoreBackup ( authenticationBackupData ) ; < nl > + } < nl > } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidStorageProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidStorageProvider . java < nl > index 6fe294a . . e654792 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidStorageProvider . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidStorageProvider . java < nl > @ @ - 4 , 8 + 4 , 12 @ @ < nl > < nl > package im . actor . runtime . android ; < nl > < nl > + import android . database . Cursor ; < nl > import android . database . sqlite . SQLiteDatabase ; < nl > < nl > + import java . util . ArrayList ; < nl > + < nl > + import im . actor . runtime . Log ; < nl > import im . actor . runtime . StorageRuntime ; < nl > import im . actor . runtime . android . storage . AndroidProperties ; < nl > import im . actor . runtime . android . storage . NoOpOpenHelper ; < nl > @ @ - 51 , 7 + 55 , 18 @ @ public class AndroidStorageProvider implements StorageRuntime { < nl > @ Override < nl > public void resetStorage ( ) { < nl > properties . clear ( ) ; < nl > - database . rawQuery ( " select ' drop table ' | | name | | ' ; ' from sqlite _ master where type = ' table ' ; " , null ) ; < nl > + ArrayList < String > tables = new ArrayList < > ( ) ; < nl > + Cursor cursor = database . rawQuery ( " SELECT name FROM sqlite _ master WHERE type = ' table ' ; " , null ) ; < nl > + try { < nl > + while ( cursor . moveToNext ( ) ) { < nl > + tables . add ( cursor . getString ( 0 ) ) ; < nl > + } < nl > + } finally { < nl > + cursor . close ( ) ; < nl > + } < nl > + for ( String s : tables ) { < nl > + getDatabase ( ) . execSQL ( " drop table " + s + " ; " ) ; < nl > + } < nl > } < nl > < nl > private synchronized SQLiteDatabase getDatabase ( ) { < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / storage / SQLiteIndexStorage . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / storage / SQLiteIndexStorage . java < nl > index f749e50 . . 6444048 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / storage / SQLiteIndexStorage . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / storage / SQLiteIndexStorage . java < nl > @ @ - 171 , 4 + 171 , 8 @ @ public class SQLiteIndexStorage implements IndexStorage { < nl > db . endTransaction ( ) ; < nl > } < nl > } < nl > + < nl > + public void onDrop ( ) { < nl > + isSqliteChecked = false ; < nl > + } < nl > } < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > index a72b1ac . . 32d3501 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > @ @ - 80 , 6 + 80 , 10 @ @ public class Runtime { < nl > } < nl > } < nl > < nl > + public static boolean isMainThread ( ) { < nl > + return mainThreadRuntime . isSingleThread ( ) | | mainThreadRuntime . isMainThread ( ) ; < nl > + } < nl > + < nl > @ AutoreleasePool < nl > public static void postToMainThread ( Runnable runnable ) { < nl > mainThreadRuntime . postToMainThread ( runnable ) ;
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > index 58a48b5 . . 7b136d7 100644 < nl > - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift < nl > @ @ - 342 , 7 + 342 , 6 @ @ import PushKit < nl > @ objc public func pushRegistry ( registry : PKPushRegistry ! , didUpdatePushCredentials credentials : PKPushCredentials ! , forType type : String ! ) { < nl > if ( type = = PKPushTypeVoIP ) { < nl > let tokenString = " \ ( credentials . token ) " . replace ( " " , dest : " " ) . replace ( " < " , dest : " " ) . replace ( " > " , dest : " " ) < nl > - print ( " PushKit : \ ( tokenString ) " ) < nl > pushRegisterKitToken ( tokenString ) < nl > } < nl > } < nl > @ @ - 355 , 7 + 354 , 10 @ @ import PushKit < nl > < nl > @ objc public func pushRegistry ( registry : PKPushRegistry ! , didReceiveIncomingPushWithPayload payload : PKPushPayload ! , forType type : String ! ) { < nl > if ( type = = PKPushTypeVoIP ) { < nl > - print ( " PushKit Payload : \ ( payload ) " ) < nl > + let aps = payload . dictionaryPayload [ " aps " ] as ! [ NSString : AnyObject ] < nl > + if let callId = aps [ " callId " ] as ? String { < nl > + Actor . checkCall ( jlong ( callId ) ! ) < nl > + } < nl > } < nl > } < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 53a7cd1 . . d868238 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 1072 , 6 + 1072 , 18 @ @ public class Messenger { < nl > } < nl > } < nl > < nl > + / * * < nl > + * Checking incoming call from push notification < nl > + * < nl > + * @ param callId Call Id < nl > + * / < nl > + @ ObjectiveCName ( " checkCall : " ) < nl > + public void checkCall ( long callId ) { < nl > + if ( modules . getCallsModule ( ) ! = null ) { < nl > + modules . getCallsModule ( ) . checkCall ( callId ) ; < nl > + } < nl > + } < nl > + < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Peer operations < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > index 59a2d11 . . f544d1d 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java < nl > @ @ - 14 , 12 + 14 , 14 @ @ import im . actor . core . viewmodel . CallVM ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . runtime . actors . messages . PoisonPill ; < nl > import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . power . WakeLock ; < nl > < nl > import static im . actor . core . modules . internal . messages . entity . EntityConverter . convert ; < nl > < nl > public class CallActor extends AbsCallActor { < nl > < nl > private final boolean isMaster ; < nl > + private final WakeLock wakeLock ; < nl > private long callId ; < nl > private Peer peer ; < nl > private CallVM callVM ; < nl > @ @ - 29 , 16 + 31 , 18 @ @ public class CallActor extends AbsCallActor { < nl > private boolean isAnswered ; < nl > private boolean isRejected ; < nl > < nl > - public CallActor ( long callId , ModuleContext context ) { < nl > + public CallActor ( long callId , WakeLock wakeLock , ModuleContext context ) { < nl > super ( context ) ; < nl > + this . wakeLock = wakeLock ; < nl > this . isMaster = false ; < nl > this . callId = callId ; < nl > this . isAnswered = false ; < nl > this . isActive = false ; < nl > } < nl > < nl > - public CallActor ( Peer peer , CommandCallback < Long > callback , ModuleContext context ) { < nl > + public CallActor ( Peer peer , CommandCallback < Long > callback , WakeLock wakeLock , ModuleContext context ) { < nl > super ( context ) ; < nl > + this . wakeLock = wakeLock ; < nl > this . isMaster = true ; < nl > this . callback = callback ; < nl > this . peer = peer ; < nl > @ @ - 154 , 6 + 158 , 7 @ @ public class CallActor extends AbsCallActor { < nl > if ( callId ! = 0 ) { < nl > callManager . send ( new CallManagerActor . OnCallEnded ( callId ) , self ( ) ) ; < nl > } < nl > + wakeLock . releaseLock ( ) ; < nl > } < nl > < nl > / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > index 525b26a . . 0194b2a 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java < nl > @ @ - 11 , 11 + 11 , 13 @ @ import im . actor . core . providers . CallsProvider ; < nl > import im . actor . core . util . RandomUtils ; < nl > import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . runtime . * ; < nl > + import im . actor . runtime . Runtime ; < nl > import im . actor . runtime . actors . Actor ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . actors . messages . PoisonPill ; < nl > import im . actor . runtime . function . Constructor ; < nl > + import im . actor . runtime . power . WakeLock ; < nl > < nl > public class CallManagerActor extends ModuleActor { < nl > < nl > @ @ - 70 , 10 + 72 , 11 @ @ public class CallManagerActor extends ModuleActor { < nl > / / < nl > / / Spawning new Actor for call < nl > / / < nl > + final WakeLock wakeLock = Runtime . makeWakeLock ( ) ; < nl > system ( ) . actorOf ( " actor / master / " + RandomUtils . nextRid ( ) , new ActorCreator ( ) { < nl > @ Override < nl > public Actor create ( ) { < nl > - return new CallActor ( peer , callback , context ( ) ) ; < nl > + return new CallActor ( peer , callback , wakeLock , context ( ) ) ; < nl > } < nl > } ) ; < nl > } < nl > @ @ - 118 , 24 + 121 , 31 @ @ public class CallManagerActor extends ModuleActor { < nl > / / Incoming call < nl > / / < nl > < nl > - private void onIncomingCall ( final long callId ) { < nl > + private void onIncomingCall ( final long callId , WakeLock wakeLock ) { < nl > Log . d ( TAG , " onIncomingCall ( " + callId + " ) " ) ; < nl > < nl > / / < nl > / / Filter double updates about incoming call < nl > / / < nl > if ( handledCalls . contains ( callId ) ) { < nl > + if ( wakeLock ! = null ) { < nl > + wakeLock . releaseLock ( ) ; < nl > + } < nl > return ; < nl > } < nl > handledCalls . add ( callId ) ; < nl > + if ( wakeLock = = null ) { < nl > + wakeLock = Runtime . makeWakeLock ( ) ; < nl > + } < nl > < nl > / / < nl > / / Spawning new Actor for call < nl > / / < nl > - system ( ) . actorOf ( " actor / slave / " + RandomUtils . nextRid ( ) , new ActorCreator ( ) { < nl > + final WakeLock finalWakeLock = wakeLock ; < nl > + system ( ) . actorOf ( " actor / call " + RandomUtils . nextRid ( ) , new ActorCreator ( ) { < nl > @ Override < nl > public Actor create ( ) { < nl > - return new CallActor ( callId , context ( ) ) ; < nl > + return new CallActor ( callId , finalWakeLock , context ( ) ) ; < nl > } < nl > } ) ; < nl > } < nl > @ @ - 306 , 7 + 316 , 10 @ @ public class CallManagerActor extends ModuleActor { < nl > public void onReceive ( Object message ) { < nl > if ( message instanceof OnIncomingCall ) { < nl > OnIncomingCall call = ( OnIncomingCall ) message ; < nl > - onIncomingCall ( call . getCallId ( ) ) ; < nl > + onIncomingCall ( call . getCallId ( ) , null ) ; < nl > + } else if ( message instanceof OnIncomingCallLocked ) { < nl > + OnIncomingCallLocked locked = ( OnIncomingCallLocked ) message ; < nl > + onIncomingCall ( locked . getCallId ( ) , locked . getWakeLock ( ) ) ; < nl > } else if ( message instanceof OnIncomingCallHandled ) { < nl > OnIncomingCallHandled incomingCallHandled = ( OnIncomingCallHandled ) message ; < nl > onIncomingCallHandled ( incomingCallHandled . getCallId ( ) ) ; < nl > @ @ - 352 , 6 + 365 , 25 @ @ public class CallManagerActor extends ModuleActor { < nl > } < nl > } < nl > < nl > + public static class OnIncomingCallLocked { < nl > + < nl > + private long callId ; < nl > + private WakeLock wakeLock ; < nl > + < nl > + public OnIncomingCallLocked ( long callId , WakeLock wakeLock ) { < nl > + this . callId = callId ; < nl > + this . wakeLock = wakeLock ; < nl > + } < nl > + < nl > + public long getCallId ( ) { < nl > + return callId ; < nl > + } < nl > + < nl > + public WakeLock getWakeLock ( ) { < nl > + return wakeLock ; < nl > + } < nl > + } < nl > + < nl > public static class OnIncomingCallHandled { < nl > < nl > private long callId ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > index fb0d93d . . 745d76f 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java < nl > @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . core . providers . CallsProvider ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . ModuleContext ; < nl > import im . actor . core . viewmodel . Command ; < nl > + import im . actor . runtime . * ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > < nl > import static im . actor . runtime . actors . ActorSystem . system ; < nl > @ @ - 44 , 6 + 45 , 10 @ @ public class CallsModule extends AbsModule { < nl > return callManager ; < nl > } < nl > < nl > + public void checkCall ( long callId ) { < nl > + callManager . send ( new CallManagerActor . OnIncomingCallLocked ( callId , im . actor . runtime . Runtime . makeWakeLock ( ) ) ) ; < nl > + } < nl > + < nl > public void probablyEndCall ( ) { < nl > callManager . send ( new CallManagerActor . ProbablyEndCall ( ) ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > index 4f9f421 . . 94e71f1 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java < nl > @ @ - 9 , 6 + 9 , 7 @ @ import org . jetbrains . annotations . Nullable ; < nl > < nl > import java . io . IOException ; < nl > import java . util . ArrayList ; < nl > + import java . util . HashMap ; < nl > import java . util . List ; < nl > < nl > import im . actor . core . api . ApiDocumentExVoice ; < nl > @ @ - 59 , 8 + 60 , 10 @ @ import im . actor . core . util . ModuleActor ; < nl > import im . actor . core . util . RandomUtils ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > - import im . actor . runtime . Storage ; < nl > + import im . actor . runtime . * ; < nl > + import im . actor . runtime . Runtime ; < nl > import im . actor . runtime . actors . ask . AskCallback ; < nl > + import im . actor . runtime . power . WakeLock ; < nl > < nl > public class SenderActor extends ModuleActor { < nl > < nl > @ @ - 69 , 6 + 72 , 7 @ @ public class SenderActor extends ModuleActor { < nl > private PendingMessagesStorage pendingMessages ; < nl > < nl > private long lastSendDate = 0 ; < nl > + private HashMap < Long , WakeLock > fileUplaodingWakeLocks = new HashMap < > ( ) ; < nl > < nl > public SenderActor ( ModuleContext context ) { < nl > super ( context ) ; < nl > @ @ - 321 , 6 + 325 , 7 @ @ public class SenderActor extends ModuleActor { < nl > } < nl > < nl > private void performUploadFile ( long rid , String descriptor , String fileName ) { < nl > + fileUplaodingWakeLocks . put ( rid , Runtime . makeWakeLock ( ) ) ; < nl > context ( ) . getFilesModule ( ) . requestUpload ( rid , descriptor , fileName , self ( ) ) ; < nl > } < nl > < nl > @ @ - 354 , 8 + 359 , 8 @ @ public class SenderActor extends ModuleActor { < nl > < nl > pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( msg . getPeer ( ) , msg . getRid ( ) , nContent ) ) ; < nl > context ( ) . getMessagesModule ( ) . getConversationActor ( msg . getPeer ( ) ) . send ( new ConversationActor . MessageContentUpdated ( msg . getRid ( ) , nContent ) ) ; < nl > - < nl > performSendContent ( msg . getPeer ( ) , rid , nContent ) ; < nl > + fileUplaodingWakeLocks . remove ( rid ) . releaseLock ( ) ; < nl > } < nl > < nl > private void onFileUploadError ( long rid ) { < nl > @ @ - 365 , 11 + 370 , 13 @ @ public class SenderActor extends ModuleActor { < nl > } < nl > < nl > self ( ) . send ( new MessageError ( msg . getPeer ( ) , msg . getRid ( ) ) ) ; < nl > + fileUplaodingWakeLocks . remove ( rid ) . releaseLock ( ) ; < nl > } < nl > < nl > / / Sending content < nl > < nl > private void performSendContent ( final Peer peer , final long rid , AbsContent content ) { < nl > + WakeLock wakeLock = im . actor . runtime . Runtime . makeWakeLock ( ) ; < nl > < nl > ApiMessage message ; < nl > if ( content instanceof TextContent ) { < nl > @ @ - 420 , 10 + 427 , 10 @ @ public class SenderActor extends ModuleActor { < nl > return ; < nl > } < nl > < nl > - performSendApiContent ( peer , rid , message ) ; < nl > + performSendApiContent ( peer , rid , message , wakeLock ) ; < nl > } < nl > < nl > - private void performSendApiContent ( final Peer peer , final long rid , ApiMessage message ) { < nl > + private void performSendApiContent ( final Peer peer , final long rid , ApiMessage message , final WakeLock wakeLock ) { < nl > final ApiOutPeer outPeer = buidOutPeer ( peer ) ; < nl > final ApiPeer apiPeer = buildApiPeer ( peer ) ; < nl > if ( outPeer = = null | | apiPeer = = null ) { < nl > @ @ - 438 , 11 + 445 , 13 @ @ public class SenderActor extends ModuleActor { < nl > response . getState ( ) , < nl > UpdateMessageSent . HEADER , < nl > new UpdateMessageSent ( apiPeer , rid , response . getDate ( ) ) . toByteArray ( ) ) ) ; < nl > + wakeLock . releaseLock ( ) ; < nl > } < nl > < nl > @ Override < nl > public void onError ( RpcException e ) { < nl > self ( ) . send ( new MessageError ( peer , rid ) ) ; < nl > + wakeLock . releaseLock ( ) ; < nl > } < nl > } ) ; < nl > } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java < nl > index ef9026d . . 3cf9d18 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java < nl > @ @ - 22 , 10 + 22 , 12 @ @ import im . actor . core . modules . updates . internal . ExecuteAfter ; < nl > import im . actor . core . network . RpcCallback ; < nl > import im . actor . core . network . RpcException ; < nl > import im . actor . core . util . ModuleActor ; < nl > - import im . actor . runtime . Log ; < nl > + import im . actor . runtime . * ; < nl > + import im . actor . runtime . Runtime ; < nl > import im . actor . runtime . actors . Cancellable ; < nl > import im . actor . runtime . function . Constructor ; < nl > import im . actor . runtime . function . Consumer ; < nl > + import im . actor . runtime . power . WakeLock ; < nl > < nl > public class SequenceActor extends ModuleActor { < nl > < nl > @ @ - 59 , 6 + 61 , 8 @ @ public class SequenceActor extends ModuleActor { < nl > < nl > private SequenceHandlerInt handler ; < nl > < nl > + private WakeLock currentWakeLock ; < nl > + < nl > public SequenceActor ( ModuleContext modules ) { < nl > super ( modules ) ; < nl > } < nl > @ @ - 71 , 6 + 75 , 8 @ @ public class SequenceActor extends ModuleActor { < nl > < nl > handler = context ( ) . getUpdatesModule ( ) . getUpdateHandler ( ) ; < nl > < nl > + currentWakeLock = im . actor . runtime . Runtime . makeWakeLock ( ) ; < nl > + < nl > self ( ) . send ( new Invalidate ( ) ) ; < nl > } < nl > < nl > @ @ - 127 , 6 + 133 , 7 @ @ public class SequenceActor extends ModuleActor { < nl > } < nl > < nl > Log . d ( TAG , " Handling update # " + seq ) ; < nl > + startWakeLock ( ) ; < nl > handler . onSeqUpdate ( type , body , users , groups ) . then ( new Consumer < SequenceHandlerActor . UpdateProcessed > ( ) { < nl > @ Override < nl > public void apply ( SequenceHandlerActor . UpdateProcessed updateProcessed ) { < nl > @ @ - 157 , 6 + 164 , 8 @ @ public class SequenceActor extends ModuleActor { < nl > } < nl > isValidated = false ; < nl > < nl > + startWakeLock ( ) ; < nl > + < nl > if ( seq < 0 ) { < nl > Log . d ( TAG , " Loading fresh state . . . " ) ; < nl > ArrayList < ApiUpdateOptimization > optimizations = new ArrayList < > ( ) ; < nl > @ @ - 173 , 6 + 182 , 9 @ @ public class SequenceActor extends ModuleActor { < nl > seq = response . getSeq ( ) ; < nl > state = response . getState ( ) ; < nl > persistState ( seq , state ) ; < nl > + < nl > + stopWakeLock ( ) ; < nl > + < nl > onBecomeValid ( response . getSeq ( ) , response . getState ( ) ) ; < nl > } < nl > < nl > @ @ - 237 , 6 + 249 , 7 @ @ public class SequenceActor extends ModuleActor { < nl > persistState ( seq , state ) ; < nl > if ( this . seq = = seq ) { < nl > Log . d ( TAG , " All updates applied { seq : " + seq + " } " ) ; < nl > + stopWakeLock ( ) ; < nl > } else { < nl > Log . d ( TAG , " Updates applied { seq : " + seq + " , finishedSeq : " + finishedSeq + " } " ) ; < nl > } < nl > @ @ - 314 , 6 + 327 , 27 @ @ public class SequenceActor extends ModuleActor { < nl > isTimerStarted = false ; < nl > } < nl > < nl > + < nl > + / / < nl > + / / Weak Locks < nl > + / / < nl > + < nl > + private void startWakeLock ( ) { < nl > + if ( currentWakeLock = = null ) { < nl > + currentWakeLock = Runtime . makeWakeLock ( ) ; < nl > + Log . w ( TAG , " Starting Wake Lock " ) ; < nl > + } < nl > + } < nl > + < nl > + private void stopWakeLock ( ) { < nl > + if ( currentWakeLock ! = null ) { < nl > + currentWakeLock . releaseLock ( ) ; < nl > + currentWakeLock = null ; < nl > + Log . w ( TAG , " Released Wake Lock " ) ; < nl > + } < nl > + } < nl > + < nl > + < nl > / / < nl > / / Messages < nl > / / < nl > diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > index a9a88b1 . . 7e624bd 100644 < nl > - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java < nl > @ @ - 1 , 6 + 1 , 7 @ @ < nl > package im . actor . runtime ; < nl > < nl > import im . actor . runtime . actors . ThreadPriority ; < nl > + import im . actor . runtime . power . WakeLock ; < nl > import im . actor . runtime . threading . Dispatcher ; < nl > import im . actor . runtime . threading . AtomicIntegerCompat ; < nl > import im . actor . runtime . threading . AtomicLongCompat ; < nl > @ @ - 79 , 4 + 80 , 8 @ @ public class Runtime { < nl > public static void killApp ( ) { < nl > lifecycleRuntime . killApp ( ) ; < nl > } < nl > + < nl > + public static WakeLock makeWakeLock ( ) { < nl > + return lifecycleRuntime . makeWakeLock ( ) ; < nl > + } < nl > } < nl > \ No newline at end of file

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 index ec47e65 . . a4ac5ad 100644 
 - - - a / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 + + + b / actor - sdk / sdk - core / core / core - android / src / main / java / im / actor / core / AndroidMessenger . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import im . actor . core . utils . ImageHelper ; 
 import im . actor . core . viewmodel . Command ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . core . viewmodel . GalleryVM ; 
 + import im . actor . runtime . Runtime ; 
 import im . actor . runtime . actors . Actor ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 @ @ - 147 , 19 + 148 , 16 @ @ public class AndroidMessenger extends im . actor . core . Messenger { 
 } else { 
 appStateActor . send ( new AppStateActor . OnScreenOff ( ) ) ; 
 } 
 + } 
 
 + @ Override 
 + public void onLoggedIn ( ) { 
 modules . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { 
 @ Override 
 public void onChanged ( Integer val , Value < Integer > valueModel ) { 
 ShortcutBadger . with ( AndroidContext . getContext ( ) ) . count ( val ) ; 
 } 
 } ) ; 
 - / / modules . getAppStateModule ( ) . getAppStateVM ( ) . getGlobalCounter ( ) . subscribe ( new ValueChangedListener < Integer > ( ) { 
 - / / @ Override 
 - / / public void onChanged ( Integer val , ValueModel < Integer > valueModel ) { 
 - / / ShortcutBadger . with ( AndroidContext . getContext ( ) ) . count ( val ) ; 
 - / / } 
 - / / } ) ; 
 } 
 
 public Context getContext ( ) { 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 7824f8f . . cd999ce 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 106 , 6 + 106 , 9 @ @ public class Messenger { 
 timing . section ( " Modules : Create " ) ; 
 this . modules = new Modules ( this , configuration ) ; 
 
 + timing . section ( " Modules : Run " ) ; 
 + this . modules . run ( ) ; 
 + 
 timing . end ( ) ; 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java 
 index 0bd10cc . . bc1b76d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / ModuleContext . java 
 @ @ - 45 , 6 + 45 , 8 @ @ public interface ModuleContext { 
 
 StorageModule getStorageModule ( ) ; 
 
 + void afterStorageReset ( ) ; 
 + 
 / / Preferences 
 PreferencesStorage getPreferences ( ) ; 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java 
 index 06bad71 . . 1c44651 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / Modules . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import im . actor . core . modules . typing . TypingModule ; 
 import im . actor . core . modules . users . UsersModule ; 
 import im . actor . core . network . ActorApi ; 
 import im . actor . core . util . Timing ; 
 + import im . actor . runtime . Runtime ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . eventbus . EventBus ; 
 import im . actor . runtime . storage . PreferencesStorage ; 
 @ @ - 55 , 7 + 56 , 6 @ @ public class Modules implements ModuleContext { 
 private final ApiModule api ; 
 
 / / Modules required before authentication 
 - private final AppStateModule appStateModule ; 
 private final ExternalModule external ; 
 private final Authentication authentication ; 
 
 @ @ - 63 , 6 + 63 , 7 @ @ public class Modules implements ModuleContext { 
 private volatile Updates updates ; 
 private volatile UsersModule users ; 
 private volatile GroupsModule groups ; 
 + private volatile AppStateModule appStateModule ; 
 private volatile StickersModule stickers ; 
 private volatile CallsModule calls ; 
 private volatile MessagesModule messages ; 
 @ @ - 103 , 9 + 104 , 6 @ @ public class Modules implements ModuleContext { 
 timing . section ( " API " ) ; 
 this . api = new ApiModule ( this ) ; 
 
 - timing . section ( " App State " ) ; 
 - this . appStateModule = new AppStateModule ( this ) ; 
 - 
 timing . section ( " External " ) ; 
 this . external = new ExternalModule ( this ) ; 
 
 @ @ - 114 , 16 + 112 , 26 @ @ public class Modules implements ModuleContext { 
 
 timing . section ( " Auth " ) ; 
 this . authentication = new Authentication ( this ) ; 
 + timing . end ( ) ; 
 + } 
 + 
 + public void run ( ) { 
 + Timing timing = new Timing ( " RUN " ) ; 
 + timing . section ( " Auth " ) ; 
 this . authentication . run ( ) ; 
 timing . end ( ) ; 
 } 
 
 - public void onLoggedIn ( ) { 
 + public void onLoggedIn ( boolean first ) { 
 Timing timing = new Timing ( " ACCOUNT _ CREATE " ) ; 
 timing . section ( " Users " ) ; 
 users = new UsersModule ( this ) ; 
 + timing . section ( " Storage " ) ; 
 + storageModule . applyStorage ( first ) ; 
 timing . section ( " Groups " ) ; 
 groups = new GroupsModule ( this ) ; 
 + timing . section ( " App State " ) ; 
 + appStateModule = new AppStateModule ( this ) ; 
 timing . section ( " Stickers " ) ; 
 stickers = new StickersModule ( this ) ; 
 timing . section ( " Calls " ) ; 
 @ @ - 160 , 8 + 168 , 6 @ @ public class Modules implements ModuleContext { 
 deviceInfoModule = new DeviceInfoModule ( this ) ; 
 timing . section ( " EventBus " ) ; 
 eventBusModule = new EventBusModule ( this ) ; 
 - timing . section ( " Storage " ) ; 
 - storageModule . applyStorage ( ) ; 
 timing . end ( ) ; 
 
 
 @ @ - 194 , 7 + 200 , 22 @ @ public class Modules implements ModuleContext { 
 stickers . run ( ) ; 
 timing . end ( ) ; 
 
 - messenger . onLoggedIn ( ) ; 
 + if ( Runtime . isMainThread ( ) ) { 
 + messenger . onLoggedIn ( ) ; 
 + } else { 
 + Runtime . postToMainThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + messenger . onLoggedIn ( ) ; 
 + } 
 + } ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void afterStorageReset ( ) { 
 + / / Recreation of Users Module to pick fresh database 
 + users = new UsersModule ( this ) ; 
 } 
 
 public void onLoggedOut ( ) { 
 @ @ - 279 , 6 + 300 , 7 @ @ public class Modules implements ModuleContext { 
 return storageModule ; 
 } 
 
 + 
 @ Override 
 public I18nEngine getI18nModule ( ) { 
 return i18nEngine ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / auth / Authentication . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / auth / Authentication . java 
 index 99b9e05 . . 7cdf8f5 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / auth / Authentication . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / auth / Authentication . java 
 @ @ - 112 , 7 + 112 , 7 @ @ public class Authentication { 
 public void run ( ) { 
 if ( modules . getPreferences ( ) . getBool ( KEY _ AUTH , false ) ) { 
 state = AuthState . LOGGED _ IN ; 
 - modules . onLoggedIn ( ) ; 
 + modules . onLoggedIn ( false ) ; 
 } else { 
 state = AuthState . AUTH _ START ; 
 } 
 @ @ - 120 , 7 + 120 , 7 @ @ public class Authentication { 
 
 public AuthenticationBackupData performBackup ( ) { 
 if ( ! isLoggedIn ( ) ) { 
 - throw new RuntimeException ( " Nothing to backup ! " ) ; 
 + return null ; 
 } 
 
 byte [ ] userData = modules . getUsersModule ( ) . getUsersStorage ( ) . getValue ( myUid ) . toByteArray ( ) ; 
 @ @ - 298 , 12 + 298 , 14 @ @ public class Authentication { 
 resolver . error ( e ) ; 
 return ; 
 } 
 + 
 state = AuthState . LOGGED _ IN ; 
 myUid = auth . getUser ( ) . getId ( ) ; 
 + modules . onLoggedIn ( true ) ; 
 + modules . getUsersModule ( ) . getUsersStorage ( ) . addOrUpdateItem ( new User ( auth . getUser ( ) ) ) ; 
 modules . getPreferences ( ) . putBool ( KEY _ AUTH , true ) ; 
 modules . getPreferences ( ) . putInt ( KEY _ AUTH _ UID , myUid ) ; 
 - modules . onLoggedIn ( ) ; 
 - modules . getUsersModule ( ) . getUsersStorage ( ) . addOrUpdateItem ( new User ( auth . getUser ( ) ) ) ; 
 + 
 modules . getUpdatesModule ( ) . onUpdateReceived ( new LoggedIn ( auth , new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 @ @ - 757 , 7 + 759 , 7 @ @ public class Authentication { 
 myUid = response . getUser ( ) . getId ( ) ; 
 modules . getPreferences ( ) . putBool ( KEY _ AUTH , true ) ; 
 modules . getPreferences ( ) . putInt ( KEY _ AUTH _ UID , myUid ) ; 
 - modules . onLoggedIn ( ) ; 
 + modules . onLoggedIn ( true ) ; 
 modules . getUsersModule ( ) . getUsersStorage ( ) . addOrUpdateItem ( new User ( response . getUser ( ) ) ) ; 
 modules . getUpdatesModule ( ) . onUpdateReceived ( new LoggedIn ( response , new Runnable ( ) { 
 @ Override 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / storage / StorageModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / storage / StorageModule . java 
 index 56f070f . . 473d899 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / storage / StorageModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / storage / StorageModule . java 
 @ @ - 4 , 52 + 4 , 65 @ @ import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . modules . auth . AuthenticationBackupData ; 
 import im . actor . core . network . AuthKeyStorage ; 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . Storage ; 
 
 public class StorageModule extends AbsModule { 
 
 - private static final int STORAGE _ SCHEME _ VERSION = 1 ; 
 + private static String TAG = " StorageModule " ; 
 + 
 + private static final int STORAGE _ SCHEME _ VERSION = 12 ; 
 private static final String STORAGE _ SCHEME _ VERSION _ KEY = " storage _ sheme _ version " ; 
 
 public StorageModule ( ModuleContext context ) { 
 super ( context ) ; 
 } 
 
 - public void applyStorage ( ) { 
 + public void applyStorage ( boolean isFirst ) { 
 int version = preferences ( ) . getInt ( STORAGE _ SCHEME _ VERSION _ KEY , 0 ) ; 
 if ( version ! = STORAGE _ SCHEME _ VERSION ) { 
 - performUpgrade ( ) ; 
 + Log . w ( TAG , " Upgrading scheme from " + version + " to " + STORAGE _ SCHEME _ VERSION ) ; 
 + performUpgrade ( isFirst ) ; 
 preferences ( ) . putInt ( STORAGE _ SCHEME _ VERSION _ KEY , STORAGE _ SCHEME _ VERSION ) ; 
 } 
 } 
 
 - private void performUpgrade ( ) { 
 + private void performUpgrade ( boolean isFirst ) { 
 
 / / 
 - / / Backing Up sensitive information 
 + / / Backing Up sensitive data 
 / / 
 - 
 + Log . w ( TAG , " Backing up sensitive data " ) ; 
 AuthKeyStorage storage = context ( ) . getActorApi ( ) . getKeyStorage ( ) ; 
 - 
 long authKey = storage . getAuthKey ( ) ; 
 byte [ ] masterKey = storage . getAuthMasterKey ( ) ; 
 - 
 - AuthenticationBackupData authenticationBackupData = context ( ) . getAuthModule ( ) . performBackup ( ) ; 
 + AuthenticationBackupData authenticationBackupData = null ; 
 + if ( ! isFirst ) { 
 + authenticationBackupData = context ( ) . getAuthModule ( ) . performBackup ( ) ; 
 + } 
 
 / / 
 / / Clear Storage 
 / / 
 - 
 + Log . w ( TAG , " Resetting storage " ) ; 
 Storage . resetStorage ( ) ; 
 
 / / 
 - / / Restore Data 
 + / / Notify Modules 
 / / 
 + Log . w ( TAG , " Resetting modules " ) ; 
 + context ( ) . afterStorageReset ( ) ; 
 
 + / / 
 + / / Restore Data 
 + / / 
 + Log . w ( TAG , " Restoring data " ) ; 
 storage . saveAuthKey ( authKey ) ; 
 if ( masterKey ! = null ) { 
 storage . saveMasterKey ( masterKey ) ; 
 } 
 - context ( ) . getAuthModule ( ) . restoreBackup ( authenticationBackupData ) ; 
 + if ( authenticationBackupData ! = null ) { 
 + context ( ) . getAuthModule ( ) . restoreBackup ( authenticationBackupData ) ; 
 + } 
 } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidStorageProvider . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidStorageProvider . java 
 index 6fe294a . . e654792 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidStorageProvider . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / AndroidStorageProvider . java 
 @ @ - 4 , 8 + 4 , 12 @ @ 
 
 package im . actor . runtime . android ; 
 
 + import android . database . Cursor ; 
 import android . database . sqlite . SQLiteDatabase ; 
 
 + import java . util . ArrayList ; 
 + 
 + import im . actor . runtime . Log ; 
 import im . actor . runtime . StorageRuntime ; 
 import im . actor . runtime . android . storage . AndroidProperties ; 
 import im . actor . runtime . android . storage . NoOpOpenHelper ; 
 @ @ - 51 , 7 + 55 , 18 @ @ public class AndroidStorageProvider implements StorageRuntime { 
 @ Override 
 public void resetStorage ( ) { 
 properties . clear ( ) ; 
 - database . rawQuery ( " select ' drop table ' | | name | | ' ; ' from sqlite _ master where type = ' table ' ; " , null ) ; 
 + ArrayList < String > tables = new ArrayList < > ( ) ; 
 + Cursor cursor = database . rawQuery ( " SELECT name FROM sqlite _ master WHERE type = ' table ' ; " , null ) ; 
 + try { 
 + while ( cursor . moveToNext ( ) ) { 
 + tables . add ( cursor . getString ( 0 ) ) ; 
 + } 
 + } finally { 
 + cursor . close ( ) ; 
 + } 
 + for ( String s : tables ) { 
 + getDatabase ( ) . execSQL ( " drop table " + s + " ; " ) ; 
 + } 
 } 
 
 private synchronized SQLiteDatabase getDatabase ( ) { 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / storage / SQLiteIndexStorage . java b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / storage / SQLiteIndexStorage . java 
 index f749e50 . . 6444048 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / storage / SQLiteIndexStorage . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - android / src / main / java / im / actor / runtime / android / storage / SQLiteIndexStorage . java 
 @ @ - 171 , 4 + 171 , 8 @ @ public class SQLiteIndexStorage implements IndexStorage { 
 db . endTransaction ( ) ; 
 } 
 } 
 + 
 + public void onDrop ( ) { 
 + isSqliteChecked = false ; 
 + } 
 } 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 index a72b1ac . . 32d3501 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 @ @ - 80 , 6 + 80 , 10 @ @ public class Runtime { 
 } 
 } 
 
 + public static boolean isMainThread ( ) { 
 + return mainThreadRuntime . isSingleThread ( ) | | mainThreadRuntime . isMainThread ( ) ; 
 + } 
 + 
 @ AutoreleasePool 
 public static void postToMainThread ( Runnable runnable ) { 
 mainThreadRuntime . postToMainThread ( runnable ) ;

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 index 58a48b5 . . 7b136d7 100644 
 - - - a / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 + + + b / actor - sdk / sdk - core - ios / ActorSDK / Sources / ActorSDK . swift 
 @ @ - 342 , 7 + 342 , 6 @ @ import PushKit 
 @ objc public func pushRegistry ( registry : PKPushRegistry ! , didUpdatePushCredentials credentials : PKPushCredentials ! , forType type : String ! ) { 
 if ( type = = PKPushTypeVoIP ) { 
 let tokenString = " \ ( credentials . token ) " . replace ( " " , dest : " " ) . replace ( " < " , dest : " " ) . replace ( " > " , dest : " " ) 
 - print ( " PushKit : \ ( tokenString ) " ) 
 pushRegisterKitToken ( tokenString ) 
 } 
 } 
 @ @ - 355 , 7 + 354 , 10 @ @ import PushKit 
 
 @ objc public func pushRegistry ( registry : PKPushRegistry ! , didReceiveIncomingPushWithPayload payload : PKPushPayload ! , forType type : String ! ) { 
 if ( type = = PKPushTypeVoIP ) { 
 - print ( " PushKit Payload : \ ( payload ) " ) 
 + let aps = payload . dictionaryPayload [ " aps " ] as ! [ NSString : AnyObject ] 
 + if let callId = aps [ " callId " ] as ? String { 
 + Actor . checkCall ( jlong ( callId ) ! ) 
 + } 
 } 
 } 
 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 53a7cd1 . . d868238 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 1072 , 6 + 1072 , 18 @ @ public class Messenger { 
 } 
 } 
 
 + / * * 
 + * Checking incoming call from push notification 
 + * 
 + * @ param callId Call Id 
 + * / 
 + @ ObjectiveCName ( " checkCall : " ) 
 + public void checkCall ( long callId ) { 
 + if ( modules . getCallsModule ( ) ! = null ) { 
 + modules . getCallsModule ( ) . checkCall ( callId ) ; 
 + } 
 + } 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Peer operations 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 index 59a2d11 . . f544d1d 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallActor . java 
 @ @ - 14 , 12 + 14 , 14 @ @ import im . actor . core . viewmodel . CallVM ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . runtime . actors . messages . PoisonPill ; 
 import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . power . WakeLock ; 
 
 import static im . actor . core . modules . internal . messages . entity . EntityConverter . convert ; 
 
 public class CallActor extends AbsCallActor { 
 
 private final boolean isMaster ; 
 + private final WakeLock wakeLock ; 
 private long callId ; 
 private Peer peer ; 
 private CallVM callVM ; 
 @ @ - 29 , 16 + 31 , 18 @ @ public class CallActor extends AbsCallActor { 
 private boolean isAnswered ; 
 private boolean isRejected ; 
 
 - public CallActor ( long callId , ModuleContext context ) { 
 + public CallActor ( long callId , WakeLock wakeLock , ModuleContext context ) { 
 super ( context ) ; 
 + this . wakeLock = wakeLock ; 
 this . isMaster = false ; 
 this . callId = callId ; 
 this . isAnswered = false ; 
 this . isActive = false ; 
 } 
 
 - public CallActor ( Peer peer , CommandCallback < Long > callback , ModuleContext context ) { 
 + public CallActor ( Peer peer , CommandCallback < Long > callback , WakeLock wakeLock , ModuleContext context ) { 
 super ( context ) ; 
 + this . wakeLock = wakeLock ; 
 this . isMaster = true ; 
 this . callback = callback ; 
 this . peer = peer ; 
 @ @ - 154 , 6 + 158 , 7 @ @ public class CallActor extends AbsCallActor { 
 if ( callId ! = 0 ) { 
 callManager . send ( new CallManagerActor . OnCallEnded ( callId ) , self ( ) ) ; 
 } 
 + wakeLock . releaseLock ( ) ; 
 } 
 
 / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 index 525b26a . . 0194b2a 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallManagerActor . java 
 @ @ - 11 , 11 + 11 , 13 @ @ import im . actor . core . providers . CallsProvider ; 
 import im . actor . core . util . RandomUtils ; 
 import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . runtime . * ; 
 + import im . actor . runtime . Runtime ; 
 import im . actor . runtime . actors . Actor ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . actors . messages . PoisonPill ; 
 import im . actor . runtime . function . Constructor ; 
 + import im . actor . runtime . power . WakeLock ; 
 
 public class CallManagerActor extends ModuleActor { 
 
 @ @ - 70 , 10 + 72 , 11 @ @ public class CallManagerActor extends ModuleActor { 
 / / 
 / / Spawning new Actor for call 
 / / 
 + final WakeLock wakeLock = Runtime . makeWakeLock ( ) ; 
 system ( ) . actorOf ( " actor / master / " + RandomUtils . nextRid ( ) , new ActorCreator ( ) { 
 @ Override 
 public Actor create ( ) { 
 - return new CallActor ( peer , callback , context ( ) ) ; 
 + return new CallActor ( peer , callback , wakeLock , context ( ) ) ; 
 } 
 } ) ; 
 } 
 @ @ - 118 , 24 + 121 , 31 @ @ public class CallManagerActor extends ModuleActor { 
 / / Incoming call 
 / / 
 
 - private void onIncomingCall ( final long callId ) { 
 + private void onIncomingCall ( final long callId , WakeLock wakeLock ) { 
 Log . d ( TAG , " onIncomingCall ( " + callId + " ) " ) ; 
 
 / / 
 / / Filter double updates about incoming call 
 / / 
 if ( handledCalls . contains ( callId ) ) { 
 + if ( wakeLock ! = null ) { 
 + wakeLock . releaseLock ( ) ; 
 + } 
 return ; 
 } 
 handledCalls . add ( callId ) ; 
 + if ( wakeLock = = null ) { 
 + wakeLock = Runtime . makeWakeLock ( ) ; 
 + } 
 
 / / 
 / / Spawning new Actor for call 
 / / 
 - system ( ) . actorOf ( " actor / slave / " + RandomUtils . nextRid ( ) , new ActorCreator ( ) { 
 + final WakeLock finalWakeLock = wakeLock ; 
 + system ( ) . actorOf ( " actor / call " + RandomUtils . nextRid ( ) , new ActorCreator ( ) { 
 @ Override 
 public Actor create ( ) { 
 - return new CallActor ( callId , context ( ) ) ; 
 + return new CallActor ( callId , finalWakeLock , context ( ) ) ; 
 } 
 } ) ; 
 } 
 @ @ - 306 , 7 + 316 , 10 @ @ public class CallManagerActor extends ModuleActor { 
 public void onReceive ( Object message ) { 
 if ( message instanceof OnIncomingCall ) { 
 OnIncomingCall call = ( OnIncomingCall ) message ; 
 - onIncomingCall ( call . getCallId ( ) ) ; 
 + onIncomingCall ( call . getCallId ( ) , null ) ; 
 + } else if ( message instanceof OnIncomingCallLocked ) { 
 + OnIncomingCallLocked locked = ( OnIncomingCallLocked ) message ; 
 + onIncomingCall ( locked . getCallId ( ) , locked . getWakeLock ( ) ) ; 
 } else if ( message instanceof OnIncomingCallHandled ) { 
 OnIncomingCallHandled incomingCallHandled = ( OnIncomingCallHandled ) message ; 
 onIncomingCallHandled ( incomingCallHandled . getCallId ( ) ) ; 
 @ @ - 352 , 6 + 365 , 25 @ @ public class CallManagerActor extends ModuleActor { 
 } 
 } 
 
 + public static class OnIncomingCallLocked { 
 + 
 + private long callId ; 
 + private WakeLock wakeLock ; 
 + 
 + public OnIncomingCallLocked ( long callId , WakeLock wakeLock ) { 
 + this . callId = callId ; 
 + this . wakeLock = wakeLock ; 
 + } 
 + 
 + public long getCallId ( ) { 
 + return callId ; 
 + } 
 + 
 + public WakeLock getWakeLock ( ) { 
 + return wakeLock ; 
 + } 
 + } 
 + 
 public static class OnIncomingCallHandled { 
 
 private long callId ; 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 index fb0d93d . . 745d76f 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / calls / CallsModule . java 
 @ @ - 7 , 6 + 7 , 7 @ @ import im . actor . core . providers . CallsProvider ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . ModuleContext ; 
 import im . actor . core . viewmodel . Command ; 
 + import im . actor . runtime . * ; 
 import im . actor . runtime . actors . ActorRef ; 
 
 import static im . actor . runtime . actors . ActorSystem . system ; 
 @ @ - 44 , 6 + 45 , 10 @ @ public class CallsModule extends AbsModule { 
 return callManager ; 
 } 
 
 + public void checkCall ( long callId ) { 
 + callManager . send ( new CallManagerActor . OnIncomingCallLocked ( callId , im . actor . runtime . Runtime . makeWakeLock ( ) ) ) ; 
 + } 
 + 
 public void probablyEndCall ( ) { 
 callManager . send ( new CallManagerActor . ProbablyEndCall ( ) ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 index 4f9f421 . . 94e71f1 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / messages / SenderActor . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import org . jetbrains . annotations . Nullable ; 
 
 import java . io . IOException ; 
 import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 import java . util . List ; 
 
 import im . actor . core . api . ApiDocumentExVoice ; 
 @ @ - 59 , 8 + 60 , 10 @ @ import im . actor . core . util . ModuleActor ; 
 import im . actor . core . util . RandomUtils ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 - import im . actor . runtime . Storage ; 
 + import im . actor . runtime . * ; 
 + import im . actor . runtime . Runtime ; 
 import im . actor . runtime . actors . ask . AskCallback ; 
 + import im . actor . runtime . power . WakeLock ; 
 
 public class SenderActor extends ModuleActor { 
 
 @ @ - 69 , 6 + 72 , 7 @ @ public class SenderActor extends ModuleActor { 
 private PendingMessagesStorage pendingMessages ; 
 
 private long lastSendDate = 0 ; 
 + private HashMap < Long , WakeLock > fileUplaodingWakeLocks = new HashMap < > ( ) ; 
 
 public SenderActor ( ModuleContext context ) { 
 super ( context ) ; 
 @ @ - 321 , 6 + 325 , 7 @ @ public class SenderActor extends ModuleActor { 
 } 
 
 private void performUploadFile ( long rid , String descriptor , String fileName ) { 
 + fileUplaodingWakeLocks . put ( rid , Runtime . makeWakeLock ( ) ) ; 
 context ( ) . getFilesModule ( ) . requestUpload ( rid , descriptor , fileName , self ( ) ) ; 
 } 
 
 @ @ - 354 , 8 + 359 , 8 @ @ public class SenderActor extends ModuleActor { 
 
 pendingMessages . getPendingMessages ( ) . add ( new PendingMessage ( msg . getPeer ( ) , msg . getRid ( ) , nContent ) ) ; 
 context ( ) . getMessagesModule ( ) . getConversationActor ( msg . getPeer ( ) ) . send ( new ConversationActor . MessageContentUpdated ( msg . getRid ( ) , nContent ) ) ; 
 - 
 performSendContent ( msg . getPeer ( ) , rid , nContent ) ; 
 + fileUplaodingWakeLocks . remove ( rid ) . releaseLock ( ) ; 
 } 
 
 private void onFileUploadError ( long rid ) { 
 @ @ - 365 , 11 + 370 , 13 @ @ public class SenderActor extends ModuleActor { 
 } 
 
 self ( ) . send ( new MessageError ( msg . getPeer ( ) , msg . getRid ( ) ) ) ; 
 + fileUplaodingWakeLocks . remove ( rid ) . releaseLock ( ) ; 
 } 
 
 / / Sending content 
 
 private void performSendContent ( final Peer peer , final long rid , AbsContent content ) { 
 + WakeLock wakeLock = im . actor . runtime . Runtime . makeWakeLock ( ) ; 
 
 ApiMessage message ; 
 if ( content instanceof TextContent ) { 
 @ @ - 420 , 10 + 427 , 10 @ @ public class SenderActor extends ModuleActor { 
 return ; 
 } 
 
 - performSendApiContent ( peer , rid , message ) ; 
 + performSendApiContent ( peer , rid , message , wakeLock ) ; 
 } 
 
 - private void performSendApiContent ( final Peer peer , final long rid , ApiMessage message ) { 
 + private void performSendApiContent ( final Peer peer , final long rid , ApiMessage message , final WakeLock wakeLock ) { 
 final ApiOutPeer outPeer = buidOutPeer ( peer ) ; 
 final ApiPeer apiPeer = buildApiPeer ( peer ) ; 
 if ( outPeer = = null | | apiPeer = = null ) { 
 @ @ - 438 , 11 + 445 , 13 @ @ public class SenderActor extends ModuleActor { 
 response . getState ( ) , 
 UpdateMessageSent . HEADER , 
 new UpdateMessageSent ( apiPeer , rid , response . getDate ( ) ) . toByteArray ( ) ) ) ; 
 + wakeLock . releaseLock ( ) ; 
 } 
 
 @ Override 
 public void onError ( RpcException e ) { 
 self ( ) . send ( new MessageError ( peer , rid ) ) ; 
 + wakeLock . releaseLock ( ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java 
 index ef9026d . . 3cf9d18 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / sequence / SequenceActor . java 
 @ @ - 22 , 10 + 22 , 12 @ @ import im . actor . core . modules . updates . internal . ExecuteAfter ; 
 import im . actor . core . network . RpcCallback ; 
 import im . actor . core . network . RpcException ; 
 import im . actor . core . util . ModuleActor ; 
 - import im . actor . runtime . Log ; 
 + import im . actor . runtime . * ; 
 + import im . actor . runtime . Runtime ; 
 import im . actor . runtime . actors . Cancellable ; 
 import im . actor . runtime . function . Constructor ; 
 import im . actor . runtime . function . Consumer ; 
 + import im . actor . runtime . power . WakeLock ; 
 
 public class SequenceActor extends ModuleActor { 
 
 @ @ - 59 , 6 + 61 , 8 @ @ public class SequenceActor extends ModuleActor { 
 
 private SequenceHandlerInt handler ; 
 
 + private WakeLock currentWakeLock ; 
 + 
 public SequenceActor ( ModuleContext modules ) { 
 super ( modules ) ; 
 } 
 @ @ - 71 , 6 + 75 , 8 @ @ public class SequenceActor extends ModuleActor { 
 
 handler = context ( ) . getUpdatesModule ( ) . getUpdateHandler ( ) ; 
 
 + currentWakeLock = im . actor . runtime . Runtime . makeWakeLock ( ) ; 
 + 
 self ( ) . send ( new Invalidate ( ) ) ; 
 } 
 
 @ @ - 127 , 6 + 133 , 7 @ @ public class SequenceActor extends ModuleActor { 
 } 
 
 Log . d ( TAG , " Handling update # " + seq ) ; 
 + startWakeLock ( ) ; 
 handler . onSeqUpdate ( type , body , users , groups ) . then ( new Consumer < SequenceHandlerActor . UpdateProcessed > ( ) { 
 @ Override 
 public void apply ( SequenceHandlerActor . UpdateProcessed updateProcessed ) { 
 @ @ - 157 , 6 + 164 , 8 @ @ public class SequenceActor extends ModuleActor { 
 } 
 isValidated = false ; 
 
 + startWakeLock ( ) ; 
 + 
 if ( seq < 0 ) { 
 Log . d ( TAG , " Loading fresh state . . . " ) ; 
 ArrayList < ApiUpdateOptimization > optimizations = new ArrayList < > ( ) ; 
 @ @ - 173 , 6 + 182 , 9 @ @ public class SequenceActor extends ModuleActor { 
 seq = response . getSeq ( ) ; 
 state = response . getState ( ) ; 
 persistState ( seq , state ) ; 
 + 
 + stopWakeLock ( ) ; 
 + 
 onBecomeValid ( response . getSeq ( ) , response . getState ( ) ) ; 
 } 
 
 @ @ - 237 , 6 + 249 , 7 @ @ public class SequenceActor extends ModuleActor { 
 persistState ( seq , state ) ; 
 if ( this . seq = = seq ) { 
 Log . d ( TAG , " All updates applied { seq : " + seq + " } " ) ; 
 + stopWakeLock ( ) ; 
 } else { 
 Log . d ( TAG , " Updates applied { seq : " + seq + " , finishedSeq : " + finishedSeq + " } " ) ; 
 } 
 @ @ - 314 , 6 + 327 , 27 @ @ public class SequenceActor extends ModuleActor { 
 isTimerStarted = false ; 
 } 
 
 + 
 + / / 
 + / / Weak Locks 
 + / / 
 + 
 + private void startWakeLock ( ) { 
 + if ( currentWakeLock = = null ) { 
 + currentWakeLock = Runtime . makeWakeLock ( ) ; 
 + Log . w ( TAG , " Starting Wake Lock " ) ; 
 + } 
 + } 
 + 
 + private void stopWakeLock ( ) { 
 + if ( currentWakeLock ! = null ) { 
 + currentWakeLock . releaseLock ( ) ; 
 + currentWakeLock = null ; 
 + Log . w ( TAG , " Released Wake Lock " ) ; 
 + } 
 + } 
 + 
 + 
 / / 
 / / Messages 
 / / 
 diff - - git a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 index a9a88b1 . . 7e624bd 100644 
 - - - a / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 + + + b / actor - sdk / sdk - core / runtime / runtime - shared / src / main / java / im / actor / runtime / Runtime . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package im . actor . runtime ; 
 
 import im . actor . runtime . actors . ThreadPriority ; 
 + import im . actor . runtime . power . WakeLock ; 
 import im . actor . runtime . threading . Dispatcher ; 
 import im . actor . runtime . threading . AtomicIntegerCompat ; 
 import im . actor . runtime . threading . AtomicLongCompat ; 
 @ @ - 79 , 4 + 80 , 8 @ @ public class Runtime { 
 public static void killApp ( ) { 
 lifecycleRuntime . killApp ( ) ; 
 } 
 + 
 + public static WakeLock makeWakeLock ( ) { 
 + return lifecycleRuntime . makeWakeLock ( ) ; 
 + } 
 } 
 \ No newline at end of file
