BLEU SCORE: 0.27812698504759853

TEST MSG: debug ( server : push ) : additional apple push logging
GENERATED MSG: fix ( server : push ) : use token instead of apns key to store push listeners

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala < nl > index b8c8d03 . . dac84ba 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala < nl > @ @ - 25 , 7 + 25 , 7 @ @ trait APNSSend { < nl > system . log . warning ( " Wrong creds format on sending notification . Creds : { } " , creds ) < nl > null < nl > } < nl > - system . log . debug ( " Sending APNS , token : { } , key : { } , isVoip : { } , topic : { } " , token , creds . apnsKey , creds . isVoip , topic ) < nl > + system . log . debug ( s " Sending APNS , token : { } , key : { } , isVoip : { } , topic : { } , payload : $ payload " , token , creds . apnsKey , creds . isVoip , topic ) < nl > val notification = new SimpleApnsPushNotification ( TokenUtil . sanitizeTokenString ( token ) , topic , payload ) < nl > val listener = listeners . getOrElseUpdate ( token , new PushFutureListener ( userId , creds , extractCredsId ( creds ) ) ( system ) ) < nl > client . sendNotification ( notification ) . addListener ( listener )
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala < nl > index 3792953 . . 35360af 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala < nl > @ @ - 9 , 7 + 9 , 7 @ @ import scala . collection . concurrent . TrieMap < nl > < nl > trait APNSSend { < nl > < nl > - private val listeners = TrieMap . empty [ Int , PushFutureListener ] < nl > + private val listeners = TrieMap . empty [ String , PushFutureListener ] < nl > < nl > protected def sendNotification ( payload : String , creds : ApplePushCredentials , userId : Int ) ( implicit client : ApplePushExtension # Client , system : ActorSystem ) = { < nl > / / when topic is null , it will be taken from APNs certificate < nl > @ @ - 17 , 7 + 17 , 7 @ @ trait APNSSend { < nl > val token = BitVector ( creds . token . toByteArray ) . toHex < nl > system . log . debug ( " Sending APNS , token : { } " , token ) < nl > val notification = new SimpleApnsPushNotification ( TokenUtil . sanitizeTokenString ( token ) , null , payload ) < nl > - val listener = listeners . getOrElseUpdate ( creds . apnsKey , new PushFutureListener ( userId , creds . token ) ( system ) ) < nl > + val listener = listeners . getOrElseUpdate ( token , new PushFutureListener ( userId , creds . token ) ( system ) ) < nl > client . sendNotification ( notification ) . addListener ( listener ) < nl > }

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala 
 index b8c8d03 . . dac84ba 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala 
 @ @ - 25 , 7 + 25 , 7 @ @ trait APNSSend { 
 system . log . warning ( " Wrong creds format on sending notification . Creds : { } " , creds ) 
 null 
 } 
 - system . log . debug ( " Sending APNS , token : { } , key : { } , isVoip : { } , topic : { } " , token , creds . apnsKey , creds . isVoip , topic ) 
 + system . log . debug ( s " Sending APNS , token : { } , key : { } , isVoip : { } , topic : { } , payload : $ payload " , token , creds . apnsKey , creds . isVoip , topic ) 
 val notification = new SimpleApnsPushNotification ( TokenUtil . sanitizeTokenString ( token ) , topic , payload ) 
 val listener = listeners . getOrElseUpdate ( token , new PushFutureListener ( userId , creds , extractCredsId ( creds ) ) ( system ) ) 
 client . sendNotification ( notification ) . addListener ( listener )

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala 
 index 3792953 . . 35360af 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / sequence / APNSSend . scala 
 @ @ - 9 , 7 + 9 , 7 @ @ import scala . collection . concurrent . TrieMap 
 
 trait APNSSend { 
 
 - private val listeners = TrieMap . empty [ Int , PushFutureListener ] 
 + private val listeners = TrieMap . empty [ String , PushFutureListener ] 
 
 protected def sendNotification ( payload : String , creds : ApplePushCredentials , userId : Int ) ( implicit client : ApplePushExtension # Client , system : ActorSystem ) = { 
 / / when topic is null , it will be taken from APNs certificate 
 @ @ - 17 , 7 + 17 , 7 @ @ trait APNSSend { 
 val token = BitVector ( creds . token . toByteArray ) . toHex 
 system . log . debug ( " Sending APNS , token : { } " , token ) 
 val notification = new SimpleApnsPushNotification ( TokenUtil . sanitizeTokenString ( token ) , null , payload ) 
 - val listener = listeners . getOrElseUpdate ( creds . apnsKey , new PushFutureListener ( userId , creds . token ) ( system ) ) 
 + val listener = listeners . getOrElseUpdate ( token , new PushFutureListener ( userId , creds . token ) ( system ) ) 
 client . sendNotification ( notification ) . addListener ( listener ) 
 }
