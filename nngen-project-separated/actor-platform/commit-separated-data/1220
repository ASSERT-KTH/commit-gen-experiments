BLEU SCORE: 0.19304869754804482

TEST MSG: Create getting - started . md
GENERATED MSG: Create key - creation . md

TEST DIFF (one line): diff - - git a / docs / e2e / getting - started . md b / docs / e2e / getting - started . md < nl > new file mode 100644 < nl > index 0000000 . . 300616c < nl > - - - / dev / null < nl > + + + b / docs / e2e / getting - started . md < nl > @ @ - 0 , 0 + 1 , 28 @ @ < nl > + # End - To - End encryption < nl > + < nl > + Next version of Actor will enable end - to - end encryption by default for everyone . Actor uses Axolotl Ratchet with Curve25519 for key exchange and mix of AES and Kuznechik encryption as block cipher . < nl > + < nl > + # # Definitions < nl > + < nl > + * * Key * - Encryption key < nl > + * * Key Pair * - Pair of Public and Private encryption keys for asymmetric encryption < nl > + * * Symmetric Key * - Secret Key for symmetric encrytpion < nl > + * * Key Group * - Group of Key Pairs and Symmetric Keys . Key Group can have optional name . < nl > + * * Public Key Group * - Public Keys of specific Key Group < nl > + * * Device * - End - user device with Actor installed < nl > + * * Account * - User ' s Actor account < nl > + < nl > + # # Device , Accounts , Keys and Key Groups < nl > + < nl > + Each * Account * can have unlimited amount of devices . < nl > + Each * Device * by default create new Key Group and uploads Public Key Group to server . < nl > + * Devices * can exchange key groups between each other . Eventually there must be only one shared * Key Group * for all * Devices * . < nl > + * Devices * can delete key groups that are no longer in use . < nl > + < nl > + # # Sending a private message from one account to another < nl > + < nl > + For sending message to account , you need to encrypt message with every Key Group with public or symmetric keys ( if available ) and with every Key Group of recepient . < nl > + < nl > + # # Group Messages < nl > + < nl > + Groups in Actor have one symmetric key for encryption on every members change encrytpion key of a group and client apps need to explictly change and broadcast new key to every member of a group .
NEAREST DIFF (one line): diff - - git a / docs / protocol / key - creation . md b / docs / protocol / key - creation . md < nl > new file mode 100644 < nl > index 0000000 . . cdd1f1f < nl > - - - / dev / null < nl > + + + b / docs / protocol / key - creation . md < nl > @ @ - 0 , 0 + 1 , 57 @ @ < nl > + # Authentication Key < nl > + < nl > + In rev3 of protocol MTProto v2 introduces a better way of authentication of requests . In previous versions server tell authKey explictly and client apps need to pass it to every request for authentication . This is not a problem as TLS is required and everything is encrypted by default already . < nl > + But we think that can be a problem in some cases on the server side as this key flaws around the server and can occasionaly appear in server ' s logs . On the other side application might need to have some shared secret for performing various security related tasks , for example , sigining voice call requests . < nl > + < nl > + Eventually , in rev4 of MTProto we will eliminate using of TLS for better speed and security . < nl > + < nl > + # Changes in Transport ' s Package < nl > + < nl > + Adding new ` ` ` signature ` ` ` field for signing each package . Depends on authId server will use signature or not . < nl > + ` ` ` < nl > + Package { < nl > + / / unique identifier that is constant thru all application lifetime < nl > + authId : long < nl > + / / random identifier of current session < nl > + sessionId : long < nl > + / / message < nl > + message : Message < nl > + / / signature < nl > + signature : bytes < nl > + } < nl > + ` ` ` < nl > + < nl > + # New Requesting Authentication Key < nl > + Old method of AuthId creation will continue to work , but rev3 introduces new way of more secure way to get AuthId and AuthKey . < nl > + < nl > + First app need to request starting of Auth Key creation : < nl > + ` ` ` < nl > + RequestStartAuthKey { < nl > + HEADER = 0xE0 < nl > + } < nl > + ` ` ` < nl > + < nl > + Server will return truncated to 8 bytes of SHA - 256 of available keys < nl > + ` ` ` < nl > + ResponseStartAuthKey { < nl > + HEADER = 0xE1 < nl > + availableKeys : longs < nl > + } < nl > + ` ` ` < nl > + < nl > + Client requests required key : < nl > + ` ` ` < nl > + ResponseGetServerKey { < nl > + HEADER = 0xE2 < nl > + keyId : long < nl > + } < nl > + ` ` ` < nl > + < nl > + Server return raw key data . Client MUST to check received key by comparing FULL hash that is hardcoded inside application . Again , DON ' T compare truncated hashes - this is insecure . Client can skip downloading keys if it have built - in keys installed . < nl > + ` ` ` < nl > + ResponseGetServerKey { < nl > + HEADER = 0xE3 < nl > + keyId : long < nl > + key : bytes < nl > + } < nl > + ` ` `

TEST DIFF:
diff - - git a / docs / e2e / getting - started . md b / docs / e2e / getting - started . md 
 new file mode 100644 
 index 0000000 . . 300616c 
 - - - / dev / null 
 + + + b / docs / e2e / getting - started . md 
 @ @ - 0 , 0 + 1 , 28 @ @ 
 + # End - To - End encryption 
 + 
 + Next version of Actor will enable end - to - end encryption by default for everyone . Actor uses Axolotl Ratchet with Curve25519 for key exchange and mix of AES and Kuznechik encryption as block cipher . 
 + 
 + # # Definitions 
 + 
 + * * Key * - Encryption key 
 + * * Key Pair * - Pair of Public and Private encryption keys for asymmetric encryption 
 + * * Symmetric Key * - Secret Key for symmetric encrytpion 
 + * * Key Group * - Group of Key Pairs and Symmetric Keys . Key Group can have optional name . 
 + * * Public Key Group * - Public Keys of specific Key Group 
 + * * Device * - End - user device with Actor installed 
 + * * Account * - User ' s Actor account 
 + 
 + # # Device , Accounts , Keys and Key Groups 
 + 
 + Each * Account * can have unlimited amount of devices . 
 + Each * Device * by default create new Key Group and uploads Public Key Group to server . 
 + * Devices * can exchange key groups between each other . Eventually there must be only one shared * Key Group * for all * Devices * . 
 + * Devices * can delete key groups that are no longer in use . 
 + 
 + # # Sending a private message from one account to another 
 + 
 + For sending message to account , you need to encrypt message with every Key Group with public or symmetric keys ( if available ) and with every Key Group of recepient . 
 + 
 + # # Group Messages 
 + 
 + Groups in Actor have one symmetric key for encryption on every members change encrytpion key of a group and client apps need to explictly change and broadcast new key to every member of a group .

NEAREST DIFF:
diff - - git a / docs / protocol / key - creation . md b / docs / protocol / key - creation . md 
 new file mode 100644 
 index 0000000 . . cdd1f1f 
 - - - / dev / null 
 + + + b / docs / protocol / key - creation . md 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + # Authentication Key 
 + 
 + In rev3 of protocol MTProto v2 introduces a better way of authentication of requests . In previous versions server tell authKey explictly and client apps need to pass it to every request for authentication . This is not a problem as TLS is required and everything is encrypted by default already . 
 + But we think that can be a problem in some cases on the server side as this key flaws around the server and can occasionaly appear in server ' s logs . On the other side application might need to have some shared secret for performing various security related tasks , for example , sigining voice call requests . 
 + 
 + Eventually , in rev4 of MTProto we will eliminate using of TLS for better speed and security . 
 + 
 + # Changes in Transport ' s Package 
 + 
 + Adding new ` ` ` signature ` ` ` field for signing each package . Depends on authId server will use signature or not . 
 + ` ` ` 
 + Package { 
 + / / unique identifier that is constant thru all application lifetime 
 + authId : long 
 + / / random identifier of current session 
 + sessionId : long 
 + / / message 
 + message : Message 
 + / / signature 
 + signature : bytes 
 + } 
 + ` ` ` 
 + 
 + # New Requesting Authentication Key 
 + Old method of AuthId creation will continue to work , but rev3 introduces new way of more secure way to get AuthId and AuthKey . 
 + 
 + First app need to request starting of Auth Key creation : 
 + ` ` ` 
 + RequestStartAuthKey { 
 + HEADER = 0xE0 
 + } 
 + ` ` ` 
 + 
 + Server will return truncated to 8 bytes of SHA - 256 of available keys 
 + ` ` ` 
 + ResponseStartAuthKey { 
 + HEADER = 0xE1 
 + availableKeys : longs 
 + } 
 + ` ` ` 
 + 
 + Client requests required key : 
 + ` ` ` 
 + ResponseGetServerKey { 
 + HEADER = 0xE2 
 + keyId : long 
 + } 
 + ` ` ` 
 + 
 + Server return raw key data . Client MUST to check received key by comparing FULL hash that is hardcoded inside application . Again , DON ' T compare truncated hashes - this is insecure . Client can skip downloading keys if it have built - in keys installed . 
 + ` ` ` 
 + ResponseGetServerKey { 
 + HEADER = 0xE3 
 + keyId : long 
 + key : bytes 
 + } 
 + ` ` `
