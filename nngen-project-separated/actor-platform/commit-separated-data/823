BLEU SCORE: 1.0

TEST MSG: Update level - transport . md
GENERATED MSG: Update level - transport . md

TEST DIFF (one line): diff - - git a / docs / protocol / level - transport . md b / docs / protocol / level - transport . md < nl > index db2f408 . . ce94d40 100644 < nl > - - - a / docs / protocol / level - transport . md < nl > + + + b / docs / protocol / level - transport . md < nl > @ @ - 53 , 18 + 53 , 11 @ @ Drop { < nl > HEADER = 0x03 < nl > / / Message Id of message that causes Drop . May be zero if not available < nl > messageId : long < nl > - / / Error Message < nl > - errorMessage : String < nl > - } < nl > - < nl > - / / Drop because of auth id invalid < nl > - AuthIdInvalid { < nl > - HEADER = 0x04 < nl > + / / Error Tag < nl > + errorTag : String < nl > } < nl > ` ` ` < nl > < nl > - < nl > - < nl > # # Requesting Auth Id < nl > < nl > Before sending and receiving packages it is required to perform ` ` ` authId ` ` ` calculation . In current revision ` ` ` authId ` ` ` is requested by simple special API request . In future version ` ` ` authId ` ` ` will be calculated by performing Diffie - Hellman key exchange . We assume that getting ` ` ` authId ` ` ` is implemented separately and is not part of main MTProto implementation .
NEAREST DIFF (one line): diff - - git a / docs / protocol / level - transport . md b / docs / protocol / level - transport . md < nl > index 87da2a5 . . db2f408 100644 < nl > - - - a / docs / protocol / level - transport . md < nl > + + + b / docs / protocol / level - transport . md < nl > @ @ - 18 , 24 + 18 , 53 @ @ In reference protocol implementation only single active connection is used . This < nl > Each transport level package is a structure < nl > < nl > ` ` ` javascript < nl > - / / Message Container < nl > - Message { < nl > - / / message identifier < nl > - messageId : long < nl > - / / message body < nl > - message : byte < nl > - } < nl > < nl > Package { < nl > / / unique identifier that is constant thru all application lifetime < nl > authId : long < nl > / / random identifier of current session < nl > sessionId : long < nl > - / / message < nl > - message : Message < nl > + / / message header < nl > + messageHeader : int < nl > + / / message contents < nl > + message : PlainTextMessage / EncryptedMessage / Drop / AuthIdInvalid < nl > + } < nl > + < nl > + / / Plain Text message Container < nl > + PlainTextMessage { < nl > + HEADER = 0x01 < nl > + / / message identifier < nl > + messageId : long < nl > + / / message body < nl > + message : byte < nl > + } < nl > + < nl > + / / Encrypted message container < nl > + EncryptedMessage { < nl > + HEADER = 0x02 < nl > + / / Sequence number starting from zero for each direction < nl > + seqNumber : long < nl > + / / First encryption level < nl > + encryptedPackage : bytes < nl > + } < nl > + < nl > + / / Drop Container < nl > + Drop { < nl > + HEADER = 0x03 < nl > + / / Message Id of message that causes Drop . May be zero if not available < nl > + messageId : long < nl > + / / Error Message < nl > + errorMessage : String < nl > + } < nl > + < nl > + / / Drop because of auth id invalid < nl > + AuthIdInvalid { < nl > + HEADER = 0x04 < nl > } < nl > ` ` ` < nl > < nl > + < nl > + < nl > # # Requesting Auth Id < nl > < nl > Before sending and receiving packages it is required to perform ` ` ` authId ` ` ` calculation . In current revision ` ` ` authId ` ` ` is requested by simple special API request . In future version ` ` ` authId ` ` ` will be calculated by performing Diffie - Hellman key exchange . We assume that getting ` ` ` authId ` ` ` is implemented separately and is not part of main MTProto implementation . < nl > @ @ - 172 , 28 + 201 , 6 @ @ SessionLost { < nl > } < nl > ` ` ` < nl > < nl > - # # # AuthIdInvalid < nl > - < nl > - Client ' s AuthId dies and connection is closed after sending this message < nl > - < nl > - ` ` ` javascript < nl > - AuthIdInvalid { < nl > - HEADER = 0x11 < nl > - } < nl > - ` ` ` < nl > - < nl > - # # # Drop < nl > - Drop is a package for notification about some problem with processing package . After sending Drop server close connection . < nl > - ` ` ` javascript < nl > - Drop { < nl > - HEADER = 0x0D < nl > - / / Message Id of message that causes Drop . May be zero if not available < nl > - messageId : long < nl > - / / Error Message < nl > - errorMessage : String < nl > - } < nl > - ` ` ` < nl > - < nl > # # # Container < nl > < nl > For grouping messages into containers protocol uses Container package

TEST DIFF:
diff - - git a / docs / protocol / level - transport . md b / docs / protocol / level - transport . md 
 index db2f408 . . ce94d40 100644 
 - - - a / docs / protocol / level - transport . md 
 + + + b / docs / protocol / level - transport . md 
 @ @ - 53 , 18 + 53 , 11 @ @ Drop { 
 HEADER = 0x03 
 / / Message Id of message that causes Drop . May be zero if not available 
 messageId : long 
 - / / Error Message 
 - errorMessage : String 
 - } 
 - 
 - / / Drop because of auth id invalid 
 - AuthIdInvalid { 
 - HEADER = 0x04 
 + / / Error Tag 
 + errorTag : String 
 } 
 ` ` ` 
 
 - 
 - 
 # # Requesting Auth Id 
 
 Before sending and receiving packages it is required to perform ` ` ` authId ` ` ` calculation . In current revision ` ` ` authId ` ` ` is requested by simple special API request . In future version ` ` ` authId ` ` ` will be calculated by performing Diffie - Hellman key exchange . We assume that getting ` ` ` authId ` ` ` is implemented separately and is not part of main MTProto implementation .

NEAREST DIFF:
diff - - git a / docs / protocol / level - transport . md b / docs / protocol / level - transport . md 
 index 87da2a5 . . db2f408 100644 
 - - - a / docs / protocol / level - transport . md 
 + + + b / docs / protocol / level - transport . md 
 @ @ - 18 , 24 + 18 , 53 @ @ In reference protocol implementation only single active connection is used . This 
 Each transport level package is a structure 
 
 ` ` ` javascript 
 - / / Message Container 
 - Message { 
 - / / message identifier 
 - messageId : long 
 - / / message body 
 - message : byte 
 - } 
 
 Package { 
 / / unique identifier that is constant thru all application lifetime 
 authId : long 
 / / random identifier of current session 
 sessionId : long 
 - / / message 
 - message : Message 
 + / / message header 
 + messageHeader : int 
 + / / message contents 
 + message : PlainTextMessage / EncryptedMessage / Drop / AuthIdInvalid 
 + } 
 + 
 + / / Plain Text message Container 
 + PlainTextMessage { 
 + HEADER = 0x01 
 + / / message identifier 
 + messageId : long 
 + / / message body 
 + message : byte 
 + } 
 + 
 + / / Encrypted message container 
 + EncryptedMessage { 
 + HEADER = 0x02 
 + / / Sequence number starting from zero for each direction 
 + seqNumber : long 
 + / / First encryption level 
 + encryptedPackage : bytes 
 + } 
 + 
 + / / Drop Container 
 + Drop { 
 + HEADER = 0x03 
 + / / Message Id of message that causes Drop . May be zero if not available 
 + messageId : long 
 + / / Error Message 
 + errorMessage : String 
 + } 
 + 
 + / / Drop because of auth id invalid 
 + AuthIdInvalid { 
 + HEADER = 0x04 
 } 
 ` ` ` 
 
 + 
 + 
 # # Requesting Auth Id 
 
 Before sending and receiving packages it is required to perform ` ` ` authId ` ` ` calculation . In current revision ` ` ` authId ` ` ` is requested by simple special API request . In future version ` ` ` authId ` ` ` will be calculated by performing Diffie - Hellman key exchange . We assume that getting ` ` ` authId ` ` ` is implemented separately and is not part of main MTProto implementation . 
 @ @ - 172 , 28 + 201 , 6 @ @ SessionLost { 
 } 
 ` ` ` 
 
 - # # # AuthIdInvalid 
 - 
 - Client ' s AuthId dies and connection is closed after sending this message 
 - 
 - ` ` ` javascript 
 - AuthIdInvalid { 
 - HEADER = 0x11 
 - } 
 - ` ` ` 
 - 
 - # # # Drop 
 - Drop is a package for notification about some problem with processing package . After sending Drop server close connection . 
 - ` ` ` javascript 
 - Drop { 
 - HEADER = 0x0D 
 - / / Message Id of message that causes Drop . May be zero if not available 
 - messageId : long 
 - / / Error Message 
 - errorMessage : String 
 - } 
 - ` ` ` 
 - 
 # # # Container 
 
 For grouping messages into containers protocol uses Container package
