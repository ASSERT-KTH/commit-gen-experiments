BLEU SCORE: 0.45622720708659226

TEST MSG: fix ( server ) : dialog extensions adjustments
GENERATED MSG: fix ( server ) : return RpcError on EntityNotFound

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala < nl > index 5433dd0 . . f58eaaa 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala < nl > @ @ - 12 , 8 + 12 , 8 @ @ import im . actor . server . user . UserExtension < nl > import scala . concurrent . { ExecutionContext , Future } < nl > < nl > / / default extension < nl > - final class ActorDelivery ( ) ( implicit val system : ActorSystem ) < nl > - extends DeliveryExtension < nl > + final class ActorDelivery ( val system : ActorSystem ) < nl > + extends DeliveryExtension ( system , Array . emptyByteArray ) < nl > with PushText < nl > with PeersImplicits { < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala < nl > index 3d48b59 . . 2c0d842 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala < nl > @ @ - 1 , 12 + 1 , 13 @ @ < nl > package im . actor . server . dialog < nl > < nl > + import akka . actor . ActorSystem < nl > import im . actor . api . rpc . messaging . ApiMessage < nl > import im . actor . server . sequence . SeqState < nl > import im . actor . server . model . Peer < nl > < nl > import scala . concurrent . Future < nl > < nl > - trait DeliveryExtension { < nl > + abstract class DeliveryExtension ( system : ActorSystem , extData : Array [ Byte ] ) { < nl > < nl > def receiverDelivery ( < nl > receiverUserId : Int , < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > index 7cc3885 . . 4a06fcf 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala < nl > @ @ - 305 , 8 + 305 , 8 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit < nl > extensions match { < nl > case Seq ( ) ⇒ < nl > log . debug ( " No delivery extensions , using default one " ) < nl > - new ActorDelivery ( ) < nl > - case ext + : tail ⇒ < nl > + new ActorDelivery ( system ) < nl > + case ext + : _ ⇒ < nl > log . debug ( " Got extensions : { } " , extensions ) < nl > val idToName = InternalExtensions . extensions ( InternalDialogExtensions ) < nl > idToName . get ( ext . id ) flatMap { className ⇒ < nl > diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / extension / InternalExtensions . scala b / actor - server / actor - runtime / src / main / scala / im / actor / extension / InternalExtensions . scala < nl > index 0eec015 . . c0ad8b8 100644 < nl > - - - a / actor - server / actor - runtime / src / main / scala / im / actor / extension / InternalExtensions . scala < nl > + + + b / actor - server / actor - runtime / src / main / scala / im / actor / extension / InternalExtensions . scala < nl > @ @ - 10 , 10 + 10 , 6 @ @ trait InternalExtension < nl > < nl > object InternalExtensions { < nl > < nl > - def getId ( path : String , name : String ) = { < nl > - ActorConfig . load ( ) . getInt ( s " $ path . $ name . id " ) < nl > - } < nl > - < nl > def extensions ( path : String ) : Map [ Int , String ] = { < nl > val extConfig = ActorConfig . load ( ) . getConfig ( path ) < nl > val extensionsKeys = extConfig . root . keys < nl > @ @ - 26 , 4 + 22 , 4 @ @ object InternalExtensions { < nl > val constructor = Class . forName ( extensionFQN ) . getConstructors ( ) ( 0 ) < nl > constructor . newInstance ( system , data ) . asInstanceOf [ T ] < nl > } < nl > - } < nl > \ No newline at end of file < nl > + }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / rpc / FutureResultRpc . scala b / actor - server / actor - core / src / main / scala / im / actor / rpc / FutureResultRpc . scala < nl > index 74f583d . . a8c4775 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / rpc / FutureResultRpc . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / rpc / FutureResultRpc . scala < nl > @ @ - 6 , 6 + 6 , 7 @ @ import scalaz . _ < nl > < nl > object FutureResultRpc { < nl > type Result [ A ] = EitherT [ Future , RpcError , A ] < nl > + < nl > def Result [ A ] = EitherT . apply [ Future , RpcError , A ] _ < nl > < nl > implicit def futureFunctor ( implicit ec : ExecutionContext ) = new Functor [ Future ] { < nl > @ @ - 20 , 6 + 21 , 7 @ @ object FutureResultRpc { < nl > < nl > implicit def rpcErrorMonoid = new Monoid [ RpcError ] { < nl > override def zero : RpcError = throw new Exception ( ) < nl > + < nl > override def append ( f1 : RpcError , f2 : ⇒ RpcError ) : RpcError = throw new Exception ( ) < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala b / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala < nl > index 070721a . . 33326de 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala < nl > @ @ - 1 , 5 + 1 , 8 @ @ < nl > package im . actor . api < nl > < nl > + import im . actor . server . group . GroupErrors . GroupNotFound < nl > + import im . actor . server . office . EntityNotFound < nl > + import im . actor . server . user . UserErrors . UserNotFound < nl > import slick . dbio . { DBIO , DBIOAction } < nl > import slick . driver . PostgresDriver . api . _ < nl > < nl > @ @ - 21 , 6 + 24 , 7 @ @ package object rpc extends { < nl > val UserNotAuthorized = RpcError ( 403 , " USER _ NOT _ AUTHORIZED " , " " , false , None ) < nl > val UserNotFound = RpcError ( 404 , " USER _ NOT _ FOUND " , " " , false , None ) < nl > val UserPhoneNotFound = RpcError ( 404 , " USER _ PHONE _ NOT _ FOUND " , " " , false , None ) < nl > + val EntityNotFound = RpcError ( 404 , " ENTITY _ NOT _ FOUND " , " " , false , None ) < nl > < nl > def forbidden ( userMessage : String ) = RpcError ( 403 , " FORBIDDEN " , userMessage , false , None ) < nl > } < nl > @ @ - 49 , 9 + 53 , 9 @ @ package object rpc extends { < nl > } < nl > } < nl > < nl > - def authorizedAction [ R ] ( clientData : ClientData ) ( f : AuthorizedClientData ⇒ DBIOAction [ RpcError \ / R , NoStream , Nothing ] ) ( implicit db : Database ) : Future [ RpcError \ / R ] = { < nl > + def authorizedAction [ R ] ( clientData : ClientData ) ( f : AuthorizedClientData ⇒ DBIOAction [ RpcError \ / R , NoStream , Nothing ] ) ( implicit db : Database , ec : ExecutionContext ) : Future [ RpcError \ / R ] = { < nl > val authorizedAction = requireAuth ( clientData ) . map ( f ) < nl > - db . run ( toDBIOAction ( authorizedAction ) ) < nl > + recover ( db . run ( toDBIOAction ( authorizedAction ) ) ) < nl > } < nl > < nl > def requireAuth ( implicit clientData : ClientData ) : MaybeAuthorized [ AuthorizedClientData ] = < nl > @ @ - 70 , 10 + 74 , 17 @ @ package object rpc extends { < nl > authorizedAction . getOrElse ( DBIO . successful ( Result . UserNotAuthorized ) ) < nl > } < nl > < nl > - def toResult [ R ] ( authorizedFuture : MaybeAuthorized [ Future [ RpcError \ / R ] ] ) : Future [ RpcError \ / R ] = < nl > - authorizedFuture . getOrElse ( Future . successful ( Result . UserNotAuthorized ) ) < nl > + def toResult [ R ] ( authorizedFuture : MaybeAuthorized [ Future [ RpcError \ / R ] ] ) ( implicit ec : ExecutionContext ) : Future [ RpcError \ / R ] = < nl > + recover ( authorizedFuture . getOrElse ( Future . successful ( Result . UserNotAuthorized ) ) ) < nl > < nl > - def authorized [ R ] ( clientData : ClientData ) ( fa : AuthorizedClientData ⇒ Future [ RpcError \ / R ] ) : Future [ RpcError \ / R ] = < nl > + def recover [ A ] ( f : Future [ \ / [ RpcError , A ] ] ) ( implicit ec : ExecutionContext ) : Future [ \ / [ RpcError , A ] ] = f recover recoverPF < nl > + def recoverPF [ A ] : PartialFunction [ Throwable , \ / [ RpcError , A ] ] = { < nl > + case UserNotFound ( _ ) ⇒ Error ( CommonErrors . UserNotFound ) < nl > + case GroupNotFound ( _ ) ⇒ Error ( CommonErrors . GroupNotFound ) < nl > + case EntityNotFound ⇒ Error ( CommonErrors . EntityNotFound ) < nl > + } < nl > + < nl > + def authorized [ R ] ( clientData : ClientData ) ( fa : AuthorizedClientData ⇒ Future [ RpcError \ / R ] ) ( implicit ec : ExecutionContext ) : Future [ RpcError \ / R ] = < nl > toResult ( requireAuth ( clientData ) map fa ) < nl > < nl > def authorizedClient ( clientData : ClientData ) : Result [ AuthorizedClientData ] = < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialog . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialog . scala < nl > index ac8b917 . . dd9447b 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialog . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialog . scala < nl > @ @ - 12 , 7 + 12 , 7 @ @ import im . actor . server . dialog . _ < nl > import im . actor . server . dialog . group . GroupDialogEvents . GroupDialogEvent < nl > import im . actor . server . group . GroupExtension < nl > import im . actor . server . models . { Peer , PeerType , Dialog } < nl > - import im . actor . server . office . ProcessorState < nl > + import im . actor . server . office . { EntityNotFound , ProcessorState } < nl > import im . actor . server . persist . DialogRepo < nl > import im . actor . server . sequence . { SeqStateDate , SeqUpdatesExtension } < nl > import im . actor . server . user . UserExtension < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala < nl > index 119c0d5 . . fd7169c 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala < nl > @ @ - 12 , 7 + 12 , 7 @ @ import im . actor . server . db . DbExtension < nl > import im . actor . server . dialog . _ < nl > import im . actor . server . event . TSEvent < nl > import im . actor . server . models . { Dialog , Peer , PeerType } < nl > - import im . actor . server . office . { EntityNotFound , ProcessorState } < nl > + import im . actor . server . office . { EntityNotFound , ProcessorState } < nl > import im . actor . server . persist . DialogRepo < nl > import im . actor . server . sequence . SeqStateDate < nl > import im . actor . server . social . SocialExtension < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOffice . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOffice . scala < nl > index 24ada4c . . 37c0f88 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOffice . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOffice . scala < nl > @ @ - 1 , 10 + 1 , 13 @ @ < nl > package im . actor . server . group < nl > < nl > + import im . actor . server . office . EntityNotFound < nl > + < nl > import scala . util . control . NoStackTrace < nl > < nl > object GroupErrors { < nl > + final case class GroupNotFound ( id : Int ) extends EntityNotFound ( s " Group $ id not found " ) < nl > < nl > - final object NotAMember extends Exception ( " Not a group member " ) with NoStackTrace < nl > + object NotAMember extends Exception ( " Not a group member " ) with NoStackTrace < nl > < nl > case object UserAlreadyJoined extends Exception with NoStackTrace < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index bfc8bb5 . . 8d15137 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 143 , 6 + 143 , 7 @ @ private [ group ] final class GroupProcessor < nl > protected val integrationTokensKv = ShardakkaExtension ( system ) . simpleKeyValue [ Int ] ( KeyValueMappings . IntegrationTokens , IntCodec ) < nl > < nl > protected val groupId = self . path . name . toInt < nl > + override protected val notFoundError = GroupErrors . GroupNotFound ( groupId ) < nl > < nl > override def persistenceId = GroupOffice . persistenceIdFor ( groupId ) < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > index 3f61fcb . . 909cef7 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala < nl > @ @ - 17 , 7 + 17 , 8 @ @ import scala . language . postfixOps < nl > import scala . util . control . NoStackTrace < nl > import scala . util . { Failure , Success } < nl > < nl > - case object EntityNotFound extends RuntimeException with NoStackTrace < nl > + abstract class EntityNotFound ( msg : String = " " ) extends RuntimeException ( msg ) with NoStackTrace < nl > + case object EntityNotFound extends EntityNotFound ( " Entity not found " ) < nl > case object StopOffice < nl > < nl > trait ProcessorState < nl > @ @ - 33 , 6 + 34 , 8 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFuture < nl > < nl > protected def updatedState ( evt : Event , state : State ) : State < nl > < nl > + protected val notFoundError : EntityNotFound = EntityNotFound < nl > + < nl > protected def workWith ( es : immutable . Seq [ Event ] , state : State ) : State = { < nl > val newState = es . foldLeft ( state ) { < nl > case ( s , e ) ⇒ < nl > @ @ - 66 , 7 + 69 , 7 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFuture < nl > protected final def initializing : Receive = handleInitCommand orElse unstashing orElse { < nl > case msg ⇒ < nl > log . debug ( " Entity not found while processing { } " , msg ) < nl > - sender ( ) ! Status . Failure ( EntityNotFound ) < nl > + sender ( ) ! Status . Failure ( notFoundError ) < nl > } < nl > < nl > protected final def working ( state : State ) : Receive = handleCommand ( state ) orElse handleQuery ( state ) orElse { < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > index 5c40a5f . . 8b6a644 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala < nl > @ @ - 17 , 6 + 17 , 7 @ @ import im . actor . server . acl . ACLUtils < nl > import im . actor . server . event . TSEvent < nl > import im . actor . server . file . { Avatar , ImageUtils } < nl > import im . actor . server . models . contact . { UserContact , UserEmailContact , UserPhoneContact } < nl > + import im . actor . server . office . EntityNotFound < nl > import im . actor . server . persist . contact . { UserContactRepo , UserEmailContactRepo , UserPhoneContactRepo } < nl > import im . actor . server . persist . { AuthSessionRepo , UserRepo } < nl > import im . actor . server . sequence . { SeqUpdatesManager , SequenceErrors } < nl > @ @ - 35 , 6 + 36 , 8 @ @ abstract class UserError ( message : String ) extends RuntimeException ( message ) with < nl > < nl > object UserErrors { < nl > < nl > + final case class UserNotFound ( id : Int ) extends EntityNotFound ( s " User $ { id } not found " ) < nl > + < nl > case object NicknameTaken extends UserError ( " Nickname taken " ) < nl > < nl > final case class InvalidTimeZone ( tz : String ) extends UserError ( s " Invalid time zone : $ tz " ) < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > index 38b170e . . 490056d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala < nl > @ @ - 149 , 6 + 149 , 7 @ @ private [ user ] final class UserProcessor < nl > protected implicit val timeout : Timeout = Timeout ( 10 . seconds ) < nl > < nl > protected val userId = self . path . name . toInt < nl > + override protected val notFoundError = UserErrors . UserNotFound ( userId ) < nl > < nl > override def persistenceId = UserOffice . persistenceIdFor ( userId )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala 
 index 5433dd0 . . f58eaaa 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / ActorDelivery . scala 
 @ @ - 12 , 8 + 12 , 8 @ @ import im . actor . server . user . UserExtension 
 import scala . concurrent . { ExecutionContext , Future } 
 
 / / default extension 
 - final class ActorDelivery ( ) ( implicit val system : ActorSystem ) 
 - extends DeliveryExtension 
 + final class ActorDelivery ( val system : ActorSystem ) 
 + extends DeliveryExtension ( system , Array . emptyByteArray ) 
 with PushText 
 with PeersImplicits { 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala 
 index 3d48b59 . . 2c0d842 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DeliveryExtension . scala 
 @ @ - 1 , 12 + 1 , 13 @ @ 
 package im . actor . server . dialog 
 
 + import akka . actor . ActorSystem 
 import im . actor . api . rpc . messaging . ApiMessage 
 import im . actor . server . sequence . SeqState 
 import im . actor . server . model . Peer 
 
 import scala . concurrent . Future 
 
 - trait DeliveryExtension { 
 + abstract class DeliveryExtension ( system : ActorSystem , extData : Array [ Byte ] ) { 
 
 def receiverDelivery ( 
 receiverUserId : Int , 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 index 7cc3885 . . 4a06fcf 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / DialogExtension . scala 
 @ @ - 305 , 8 + 305 , 8 @ @ final class DialogExtensionImpl ( system : ActorSystem ) extends DialogExtension wit 
 extensions match { 
 case Seq ( ) ⇒ 
 log . debug ( " No delivery extensions , using default one " ) 
 - new ActorDelivery ( ) 
 - case ext + : tail ⇒ 
 + new ActorDelivery ( system ) 
 + case ext + : _ ⇒ 
 log . debug ( " Got extensions : { } " , extensions ) 
 val idToName = InternalExtensions . extensions ( InternalDialogExtensions ) 
 idToName . get ( ext . id ) flatMap { className ⇒ 
 diff - - git a / actor - server / actor - runtime / src / main / scala / im / actor / extension / InternalExtensions . scala b / actor - server / actor - runtime / src / main / scala / im / actor / extension / InternalExtensions . scala 
 index 0eec015 . . c0ad8b8 100644 
 - - - a / actor - server / actor - runtime / src / main / scala / im / actor / extension / InternalExtensions . scala 
 + + + b / actor - server / actor - runtime / src / main / scala / im / actor / extension / InternalExtensions . scala 
 @ @ - 10 , 10 + 10 , 6 @ @ trait InternalExtension 
 
 object InternalExtensions { 
 
 - def getId ( path : String , name : String ) = { 
 - ActorConfig . load ( ) . getInt ( s " $ path . $ name . id " ) 
 - } 
 - 
 def extensions ( path : String ) : Map [ Int , String ] = { 
 val extConfig = ActorConfig . load ( ) . getConfig ( path ) 
 val extensionsKeys = extConfig . root . keys 
 @ @ - 26 , 4 + 22 , 4 @ @ object InternalExtensions { 
 val constructor = Class . forName ( extensionFQN ) . getConstructors ( ) ( 0 ) 
 constructor . newInstance ( system , data ) . asInstanceOf [ T ] 
 } 
 - } 
 \ No newline at end of file 
 + }

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / rpc / FutureResultRpc . scala b / actor - server / actor - core / src / main / scala / im / actor / rpc / FutureResultRpc . scala 
 index 74f583d . . a8c4775 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / rpc / FutureResultRpc . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / rpc / FutureResultRpc . scala 
 @ @ - 6 , 6 + 6 , 7 @ @ import scalaz . _ 
 
 object FutureResultRpc { 
 type Result [ A ] = EitherT [ Future , RpcError , A ] 
 + 
 def Result [ A ] = EitherT . apply [ Future , RpcError , A ] _ 
 
 implicit def futureFunctor ( implicit ec : ExecutionContext ) = new Functor [ Future ] { 
 @ @ - 20 , 6 + 21 , 7 @ @ object FutureResultRpc { 
 
 implicit def rpcErrorMonoid = new Monoid [ RpcError ] { 
 override def zero : RpcError = throw new Exception ( ) 
 + 
 override def append ( f1 : RpcError , f2 : ⇒ RpcError ) : RpcError = throw new Exception ( ) 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala b / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala 
 index 070721a . . 33326de 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / rpc / package . scala 
 @ @ - 1 , 5 + 1 , 8 @ @ 
 package im . actor . api 
 
 + import im . actor . server . group . GroupErrors . GroupNotFound 
 + import im . actor . server . office . EntityNotFound 
 + import im . actor . server . user . UserErrors . UserNotFound 
 import slick . dbio . { DBIO , DBIOAction } 
 import slick . driver . PostgresDriver . api . _ 
 
 @ @ - 21 , 6 + 24 , 7 @ @ package object rpc extends { 
 val UserNotAuthorized = RpcError ( 403 , " USER _ NOT _ AUTHORIZED " , " " , false , None ) 
 val UserNotFound = RpcError ( 404 , " USER _ NOT _ FOUND " , " " , false , None ) 
 val UserPhoneNotFound = RpcError ( 404 , " USER _ PHONE _ NOT _ FOUND " , " " , false , None ) 
 + val EntityNotFound = RpcError ( 404 , " ENTITY _ NOT _ FOUND " , " " , false , None ) 
 
 def forbidden ( userMessage : String ) = RpcError ( 403 , " FORBIDDEN " , userMessage , false , None ) 
 } 
 @ @ - 49 , 9 + 53 , 9 @ @ package object rpc extends { 
 } 
 } 
 
 - def authorizedAction [ R ] ( clientData : ClientData ) ( f : AuthorizedClientData ⇒ DBIOAction [ RpcError \ / R , NoStream , Nothing ] ) ( implicit db : Database ) : Future [ RpcError \ / R ] = { 
 + def authorizedAction [ R ] ( clientData : ClientData ) ( f : AuthorizedClientData ⇒ DBIOAction [ RpcError \ / R , NoStream , Nothing ] ) ( implicit db : Database , ec : ExecutionContext ) : Future [ RpcError \ / R ] = { 
 val authorizedAction = requireAuth ( clientData ) . map ( f ) 
 - db . run ( toDBIOAction ( authorizedAction ) ) 
 + recover ( db . run ( toDBIOAction ( authorizedAction ) ) ) 
 } 
 
 def requireAuth ( implicit clientData : ClientData ) : MaybeAuthorized [ AuthorizedClientData ] = 
 @ @ - 70 , 10 + 74 , 17 @ @ package object rpc extends { 
 authorizedAction . getOrElse ( DBIO . successful ( Result . UserNotAuthorized ) ) 
 } 
 
 - def toResult [ R ] ( authorizedFuture : MaybeAuthorized [ Future [ RpcError \ / R ] ] ) : Future [ RpcError \ / R ] = 
 - authorizedFuture . getOrElse ( Future . successful ( Result . UserNotAuthorized ) ) 
 + def toResult [ R ] ( authorizedFuture : MaybeAuthorized [ Future [ RpcError \ / R ] ] ) ( implicit ec : ExecutionContext ) : Future [ RpcError \ / R ] = 
 + recover ( authorizedFuture . getOrElse ( Future . successful ( Result . UserNotAuthorized ) ) ) 
 
 - def authorized [ R ] ( clientData : ClientData ) ( fa : AuthorizedClientData ⇒ Future [ RpcError \ / R ] ) : Future [ RpcError \ / R ] = 
 + def recover [ A ] ( f : Future [ \ / [ RpcError , A ] ] ) ( implicit ec : ExecutionContext ) : Future [ \ / [ RpcError , A ] ] = f recover recoverPF 
 + def recoverPF [ A ] : PartialFunction [ Throwable , \ / [ RpcError , A ] ] = { 
 + case UserNotFound ( _ ) ⇒ Error ( CommonErrors . UserNotFound ) 
 + case GroupNotFound ( _ ) ⇒ Error ( CommonErrors . GroupNotFound ) 
 + case EntityNotFound ⇒ Error ( CommonErrors . EntityNotFound ) 
 + } 
 + 
 + def authorized [ R ] ( clientData : ClientData ) ( fa : AuthorizedClientData ⇒ Future [ RpcError \ / R ] ) ( implicit ec : ExecutionContext ) : Future [ RpcError \ / R ] = 
 toResult ( requireAuth ( clientData ) map fa ) 
 
 def authorizedClient ( clientData : ClientData ) : Result [ AuthorizedClientData ] = 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialog . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialog . scala 
 index ac8b917 . . dd9447b 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialog . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / group / GroupDialog . scala 
 @ @ - 12 , 7 + 12 , 7 @ @ import im . actor . server . dialog . _ 
 import im . actor . server . dialog . group . GroupDialogEvents . GroupDialogEvent 
 import im . actor . server . group . GroupExtension 
 import im . actor . server . models . { Peer , PeerType , Dialog } 
 - import im . actor . server . office . ProcessorState 
 + import im . actor . server . office . { EntityNotFound , ProcessorState } 
 import im . actor . server . persist . DialogRepo 
 import im . actor . server . sequence . { SeqStateDate , SeqUpdatesExtension } 
 import im . actor . server . user . UserExtension 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala 
 index 119c0d5 . . fd7169c 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / dialog / privat / PrivateDialog . scala 
 @ @ - 12 , 7 + 12 , 7 @ @ import im . actor . server . db . DbExtension 
 import im . actor . server . dialog . _ 
 import im . actor . server . event . TSEvent 
 import im . actor . server . models . { Dialog , Peer , PeerType } 
 - import im . actor . server . office . { EntityNotFound , ProcessorState } 
 + import im . actor . server . office . { EntityNotFound , ProcessorState } 
 import im . actor . server . persist . DialogRepo 
 import im . actor . server . sequence . SeqStateDate 
 import im . actor . server . social . SocialExtension 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOffice . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOffice . scala 
 index 24ada4c . . 37c0f88 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOffice . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOffice . scala 
 @ @ - 1 , 10 + 1 , 13 @ @ 
 package im . actor . server . group 
 
 + import im . actor . server . office . EntityNotFound 
 + 
 import scala . util . control . NoStackTrace 
 
 object GroupErrors { 
 + final case class GroupNotFound ( id : Int ) extends EntityNotFound ( s " Group $ id not found " ) 
 
 - final object NotAMember extends Exception ( " Not a group member " ) with NoStackTrace 
 + object NotAMember extends Exception ( " Not a group member " ) with NoStackTrace 
 
 case object UserAlreadyJoined extends Exception with NoStackTrace 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index bfc8bb5 . . 8d15137 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 143 , 6 + 143 , 7 @ @ private [ group ] final class GroupProcessor 
 protected val integrationTokensKv = ShardakkaExtension ( system ) . simpleKeyValue [ Int ] ( KeyValueMappings . IntegrationTokens , IntCodec ) 
 
 protected val groupId = self . path . name . toInt 
 + override protected val notFoundError = GroupErrors . GroupNotFound ( groupId ) 
 
 override def persistenceId = GroupOffice . persistenceIdFor ( groupId ) 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 index 3f61fcb . . 909cef7 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / office / Processor . scala 
 @ @ - 17 , 7 + 17 , 8 @ @ import scala . language . postfixOps 
 import scala . util . control . NoStackTrace 
 import scala . util . { Failure , Success } 
 
 - case object EntityNotFound extends RuntimeException with NoStackTrace 
 + abstract class EntityNotFound ( msg : String = " " ) extends RuntimeException ( msg ) with NoStackTrace 
 + case object EntityNotFound extends EntityNotFound ( " Entity not found " ) 
 case object StopOffice 
 
 trait ProcessorState 
 @ @ - 33 , 6 + 34 , 8 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFuture 
 
 protected def updatedState ( evt : Event , state : State ) : State 
 
 + protected val notFoundError : EntityNotFound = EntityNotFound 
 + 
 protected def workWith ( es : immutable . Seq [ Event ] , state : State ) : State = { 
 val newState = es . foldLeft ( state ) { 
 case ( s , e ) ⇒ 
 @ @ - 66 , 7 + 69 , 7 @ @ trait Processor [ State , Event < : AnyRef ] extends PersistentActor with ActorFuture 
 protected final def initializing : Receive = handleInitCommand orElse unstashing orElse { 
 case msg ⇒ 
 log . debug ( " Entity not found while processing { } " , msg ) 
 - sender ( ) ! Status . Failure ( EntityNotFound ) 
 + sender ( ) ! Status . Failure ( notFoundError ) 
 } 
 
 protected final def working ( state : State ) : Receive = handleCommand ( state ) orElse handleQuery ( state ) orElse { 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 index 5c40a5f . . 8b6a644 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserCommandHandlers . scala 
 @ @ - 17 , 6 + 17 , 7 @ @ import im . actor . server . acl . ACLUtils 
 import im . actor . server . event . TSEvent 
 import im . actor . server . file . { Avatar , ImageUtils } 
 import im . actor . server . models . contact . { UserContact , UserEmailContact , UserPhoneContact } 
 + import im . actor . server . office . EntityNotFound 
 import im . actor . server . persist . contact . { UserContactRepo , UserEmailContactRepo , UserPhoneContactRepo } 
 import im . actor . server . persist . { AuthSessionRepo , UserRepo } 
 import im . actor . server . sequence . { SeqUpdatesManager , SequenceErrors } 
 @ @ - 35 , 6 + 36 , 8 @ @ abstract class UserError ( message : String ) extends RuntimeException ( message ) with 
 
 object UserErrors { 
 
 + final case class UserNotFound ( id : Int ) extends EntityNotFound ( s " User $ { id } not found " ) 
 + 
 case object NicknameTaken extends UserError ( " Nickname taken " ) 
 
 final case class InvalidTimeZone ( tz : String ) extends UserError ( s " Invalid time zone : $ tz " ) 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 index 38b170e . . 490056d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / user / UserProcessor . scala 
 @ @ - 149 , 6 + 149 , 7 @ @ private [ user ] final class UserProcessor 
 protected implicit val timeout : Timeout = Timeout ( 10 . seconds ) 
 
 protected val userId = self . path . name . toInt 
 + override protected val notFoundError = UserErrors . UserNotFound ( userId ) 
 
 override def persistenceId = UserOffice . persistenceIdFor ( userId )
