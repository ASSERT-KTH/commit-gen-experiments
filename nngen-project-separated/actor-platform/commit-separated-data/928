BLEU SCORE: 0.1395873430390535

TEST MSG: feat ( js ) : PeerConnection bindings
GENERATED MSG: feat ( core ) : Implemented peer search methods

TEST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 381220a . . 56efe78 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 25 , 8 + 25 , 9 @ @ import im . actor . core . js . providers . JsNotificationsProvider ; < nl > import im . actor . core . js . providers . JsPhoneBookProvider ; < nl > import im . actor . core . js . providers . JsWebRTCProvider ; < nl > import im . actor . core . js . providers . electron . JsElectronApp ; < nl > - import im . actor . core . js . providers . webrtc . JsUserMediaStream ; < nl > - import im . actor . core . js . providers . webrtc . JsWebRTC ; < nl > + import im . actor . core . js . providers . webrtc . JsSessionDescription ; < nl > + import im . actor . core . js . providers . webrtc . JsPeerConnection ; < nl > + import im . actor . core . js . providers . webrtc . JsPeerConnectionListener ; < nl > import im . actor . core . js . utils . HtmlMarkdownUtils ; < nl > import im . actor . core . js . utils . IdentityUtils ; < nl > import im . actor . core . network . RpcException ; < nl > @ @ - 134 , 15 + 135 , 22 @ @ public class JsFacade implements Exportable { < nl > < nl > messenger = new JsMessenger ( configuration . build ( ) ) ; < nl > < nl > - JsWebRTC . getAudioMedia ( ) . then ( new Consumer < JsUserMediaStream > ( ) { < nl > + JsPeerConnection peerConnection = JsPeerConnection . create ( null ) ; < nl > + peerConnection . setListener ( new JsPeerConnectionListener ( ) { < nl > @ Override < nl > - public void apply ( JsUserMediaStream mediaStream ) { < nl > - Log . d ( TAG , " Audio received " ) ; < nl > + public void onIceCandidate ( String candidate ) { < nl > + Log . d ( TAG , " OnCandidate : " + candidate ) ; < nl > + } < nl > + } ) ; < nl > + peerConnection . createOffer ( ) . then ( new Consumer < JsSessionDescription > ( ) { < nl > + @ Override < nl > + public void apply ( JsSessionDescription offer ) { < nl > + Log . d ( TAG , " Offer Ok : " + offer ) ; < nl > } < nl > } ) . failure ( new Consumer < Exception > ( ) { < nl > @ Override < nl > public void apply ( Exception e ) { < nl > - Log . w ( TAG , " Audio Error " ) ; < nl > + Log . d ( TAG , " Offer failure " ) ; < nl > } < nl > } ) ; < nl > < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsIceServer . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsIceServer . java < nl > new file mode 100644 < nl > index 0000000 . . 49eef38 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsIceServer . java < nl > @ @ - 0 , 0 + 1 , 18 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsIceServer extends JavaScriptObject { < nl > + < nl > + public static native JsIceServer create ( String url ) / * - { < nl > + return { url : url } ; < nl > + } - * / ; < nl > + < nl > + public static native JsIceServer create ( String url , String userName , String credential ) / * - { < nl > + return { url : url , username : userName , credential : credential } ; < nl > + } - * / ; < nl > + < nl > + protected JsIceServer ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java < nl > new file mode 100644 < nl > index 0000000 . . ccee846 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java < nl > @ @ - 0 , 0 + 1 , 60 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + import im . actor . core . js . modules . JsScheduller ; < nl > + import im . actor . runtime . promise . Promise ; < nl > + import im . actor . runtime . promise . PromiseFunc ; < nl > + import im . actor . runtime . promise . PromiseResolver ; < nl > + < nl > + public class JsPeerConnection extends JavaScriptObject { < nl > + < nl > + public static native JsPeerConnection create ( JsPeerConnectionConfig config ) / * - { < nl > + return { peerConnection : new webkitRTCPeerConnection ( config ) } ; < nl > + } - * / ; < nl > + < nl > + protected JsPeerConnection ( ) { < nl > + < nl > + } < nl > + < nl > + public final native void setListener ( JsPeerConnectionListener listener ) / * - { < nl > + this . peerConnection . onicecandidate = function ( candidate ) { < nl > + callback . @ im . actor . core . js . providers . webrtc . JsPeerConnectionListener : : onIceCandidate ( * ) ( candidate ) ; < nl > + } ; < nl > + } - * / ; < nl > + < nl > + public final native void setLocalDescription ( JsSessionDescription description ) / * - { < nl > + this . peerConnection . setLocalDescription ( description ) ; < nl > + } - * / ; < nl > + < nl > + public final native void setRemoteDescription ( JsSessionDescription description ) / * - { < nl > + this . peerConnection . setRemoteDescription ( description ) ; < nl > + } - * / ; < nl > + < nl > + public final Promise < JsSessionDescription > createOffer ( ) { < nl > + return new Promise < > ( new PromiseFunc < JsSessionDescription > ( ) { < nl > + @ Override < nl > + public void exec ( final PromiseResolver < JsSessionDescription > resolver ) { < nl > + createOffer ( new JsSessionDescriptionCallback ( ) { < nl > + @ Override < nl > + public void onOfferCreated ( JsSessionDescription offer ) { < nl > + resolver . result ( offer ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onOfferFailure ( ) { < nl > + resolver . error ( new RuntimeException ( " Offer failure " ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) . done ( JsScheduller . scheduller ( ) ) ; < nl > + } < nl > + < nl > + private final native void createOffer ( JsSessionDescriptionCallback callback ) / * - { < nl > + this . peerConnection . createOffer ( function ( offer ) { < nl > + callback . @ im . actor . core . js . providers . webrtc . JsSessionDescriptionCallback : : onOfferCreated ( * ) ( offer ) ; < nl > + } , function ( error ) { < nl > + callback . @ im . actor . core . js . providers . webrtc . JsSessionDescriptionCallback : : onOfferFailure ( * ) ( ) ; < nl > + } ) ; < nl > + } - * / ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionConfig . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionConfig . java < nl > new file mode 100644 < nl > index 0000000 . . 2e8ed2c < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionConfig . java < nl > @ @ - 0 , 0 + 1 , 15 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + import com . google . gwt . core . client . JsArray ; < nl > + < nl > + public class JsPeerConnectionConfig extends JavaScriptObject { < nl > + < nl > + public static native JsPeerConnectionConfig create ( JsArray < JsIceServer > iceServers ) / * - { < nl > + return { iceServers : iceServers } ; < nl > + } - * / ; < nl > + < nl > + protected JsPeerConnectionConfig ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java < nl > new file mode 100644 < nl > index 0000000 . . 8bdb242 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java < nl > @ @ - 0 , 0 + 1 , 5 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + public interface JsPeerConnectionListener { < nl > + void onIceCandidate ( String candidate ) ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java < nl > new file mode 100644 < nl > index 0000000 . . 4154488 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java < nl > @ @ - 0 , 0 + 1 , 18 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsSessionDescription extends JavaScriptObject { < nl > + < nl > + protected JsSessionDescription ( ) { < nl > + < nl > + } < nl > + < nl > + public final native String getSDP ( ) / * - { < nl > + return this . sdp ; < nl > + } - * / ; < nl > + < nl > + public final native String getType ( ) / * - { < nl > + return this . type ; < nl > + } - * / ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescriptionCallback . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescriptionCallback . java < nl > new file mode 100644 < nl > index 0000000 . . cba6fd0 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescriptionCallback . java < nl > @ @ - 0 , 0 + 1 , 7 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + public interface JsSessionDescriptionCallback { < nl > + void onOfferCreated ( JsSessionDescription offer ) ; < nl > + < nl > + void onOfferFailure ( ) ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsStreaming . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsStreaming . java < nl > new file mode 100644 < nl > index 0000000 . . 5f70b80 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsStreaming . java < nl > @ @ - 0 , 0 + 1 , 48 @ @ < nl > + package im . actor . core . js . providers . webrtc ; < nl > + < nl > + import im . actor . core . js . modules . JsScheduller ; < nl > + import im . actor . runtime . promise . Promise ; < nl > + import im . actor . runtime . promise . PromiseFunc ; < nl > + import im . actor . runtime . promise . PromiseResolver ; < nl > + < nl > + public class JsStreaming { < nl > + < nl > + public static Promise < JsUserMediaStream > getUserAudio ( ) { < nl > + return getUserMedia ( JsUserMediaConstraint . audioOnly ( ) ) ; < nl > + } < nl > + < nl > + public static Promise < JsUserMediaStream > getUserVideo ( ) { < nl > + return getUserMedia ( JsUserMediaConstraint . videoOnly ( ) ) ; < nl > + } < nl > + < nl > + public static Promise < JsUserMediaStream > getUserAudioVideo ( ) { < nl > + return getUserMedia ( JsUserMediaConstraint . audioVideo ( ) ) ; < nl > + } < nl > + < nl > + public static Promise < JsUserMediaStream > getUserMedia ( final JsUserMediaConstraint constraint ) { < nl > + return new Promise < > ( new PromiseFunc < JsUserMediaStream > ( ) { < nl > + @ Override < nl > + public void exec ( final PromiseResolver < JsUserMediaStream > resolver ) { < nl > + getUserMediaJs ( constraint , new JsMediaCallback ( ) { < nl > + @ Override < nl > + public void onCreated ( JsUserMediaStream mediaStream ) { < nl > + resolver . result ( mediaStream ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( JsUserMediaError error ) { < nl > + resolver . error ( new MediaException ( error ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) . done ( JsScheduller . scheduller ( ) ) ; < nl > + } < nl > + < nl > + protected static native void getUserMediaJs ( JsUserMediaConstraint constraint , JsMediaCallback callback ) / * - { < nl > + $ wnd . navigator . getUserMedia ( constraint , function ( stream ) { < nl > + callback . @ im . actor . core . js . providers . webrtc . JsMediaCallback : : onCreated ( * ) ( stream ) ; < nl > + } , function ( error ) { < nl > + callback . @ im . actor . core . js . providers . webrtc . JsMediaCallback : : onError ( * ) ( error ) ; < nl > + } ) ; < nl > + } - * / ; < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsWebRTC . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsWebRTC . java < nl > deleted file mode 100644 < nl > index 12adf49 . . 0000000 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsWebRTC . java < nl > + + + / dev / null < nl > @ @ - 1 , 48 + 0 , 0 @ @ < nl > - package im . actor . core . js . providers . webrtc ; < nl > - < nl > - import im . actor . core . js . modules . JsScheduller ; < nl > - import im . actor . runtime . promise . Promise ; < nl > - import im . actor . runtime . promise . PromiseFunc ; < nl > - import im . actor . runtime . promise . PromiseResolver ; < nl > - < nl > - public class JsWebRTC { < nl > - < nl > - public static Promise < JsUserMediaStream > getUserAudio ( ) { < nl > - return getUserMedia ( JsUserMediaConstraint . audioOnly ( ) ) ; < nl > - } < nl > - < nl > - public static Promise < JsUserMediaStream > getUserVideo ( ) { < nl > - return getUserMedia ( JsUserMediaConstraint . videoOnly ( ) ) ; < nl > - } < nl > - < nl > - public static Promise < JsUserMediaStream > getUserAudioVideo ( ) { < nl > - return getUserMedia ( JsUserMediaConstraint . audioVideo ( ) ) ; < nl > - } < nl > - < nl > - public static Promise < JsUserMediaStream > getUserMedia ( final JsUserMediaConstraint constraint ) { < nl > - return new Promise < > ( new PromiseFunc < JsUserMediaStream > ( ) { < nl > - @ Override < nl > - public void exec ( final PromiseResolver < JsUserMediaStream > resolver ) { < nl > - getUserMediaJs ( constraint , new JsMediaCallback ( ) { < nl > - @ Override < nl > - public void onCreated ( JsUserMediaStream mediaStream ) { < nl > - resolver . result ( mediaStream ) ; < nl > - } < nl > - < nl > - @ Override < nl > - public void onError ( JsUserMediaError error ) { < nl > - resolver . error ( new MediaException ( error ) ) ; < nl > - } < nl > - } ) ; < nl > - } < nl > - } ) . done ( JsScheduller . scheduller ( ) ) ; < nl > - } < nl > - < nl > - protected static native void getUserMediaJs ( JsUserMediaConstraint constraint , JsMediaCallback callback ) / * - { < nl > - $ wnd . navigator . getUserMedia ( constraint , function ( stream ) { < nl > - callback . @ im . actor . core . js . providers . webrtc . JsMediaCallback : : onCreated ( * ) ( stream ) ; < nl > - } , function ( error ) { < nl > - callback . @ im . actor . core . js . providers . webrtc . JsMediaCallback : : onError ( * ) ( error ) ; < nl > - } ) ; < nl > - } - * / ; < nl > - }
NEAREST DIFF (one line): diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > index 4583c31 . . 174a996 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java < nl > @ @ - 14 , 6 + 14 , 9 @ @ import im . actor . core . * ; < nl > import im . actor . core . api . ApiAuthSession ; < nl > import im . actor . core . entity . MentionFilterResult ; < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerSearchEntity ; < nl > + import im . actor . core . entity . PeerSearchType ; < nl > + import im . actor . core . entity . PeerType ; < nl > import im . actor . core . js . entity . * ; < nl > import im . actor . core . js . modules . JsBindedValueCallback ; < nl > import im . actor . core . js . providers . JsNotificationsProvider ; < nl > @ @ - 710 , 6 + 713 , 38 @ @ public class JsFacade implements Exportable { < nl > } ) ; < nl > } < nl > < nl > + public JsPromise findGroups ( ) { < nl > + return JsPromise . create ( new JsPromiseExecutor ( ) { < nl > + @ Override < nl > + public void execute ( ) { < nl > + messenger . findPeers ( PeerSearchType . GROUPS ) . start ( new CommandCallback < List < PeerSearchEntity > > ( ) { < nl > + @ Override < nl > + public void onResult ( List < PeerSearchEntity > res ) { < nl > + Log . d ( TAG , " findGroups : result " ) ; < nl > + JsArray < JsPeerSearchResult > jsRes = JsArray . createArray ( ) . cast ( ) ; < nl > + for ( PeerSearchEntity s : res ) { < nl > + if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP ) { < nl > + jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) , < nl > + s . getDescription ( ) , s . getMembersCount ( ) , ( int ) ( s . getDate ( ) / 1000L ) , < nl > + messenger . buildPeerInfo ( Peer . user ( s . getCreatorUid ( ) ) ) , s . isPublic ( ) , < nl > + s . isJoined ( ) ) ) ; < nl > + } else if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . PRIVATE ) { < nl > + jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) ) ) ; < nl > + } < nl > + / / jsRes . push ( ) ; < nl > + } < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( Exception e ) { < nl > + Log . d ( TAG , " findGroups : error " ) ; < nl > + reject ( e . getMessage ( ) ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > public void changeMyAvatar ( final JsFile file ) { < nl > String descriptor = provider . registerUploadFile ( file ) ; < nl > messenger . changeMyAvatar ( descriptor ) ; < nl > diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java < nl > new file mode 100644 < nl > index 0000000 . . d88fe40 < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java < nl > @ @ - 0 , 0 + 1 , 21 @ @ < nl > + package im . actor . core . js . entity ; < nl > + < nl > + import com . google . gwt . core . client . JavaScriptObject ; < nl > + < nl > + public class JsPeerSearchResult extends JavaScriptObject { < nl > + < nl > + public native static JsPeerSearchResult create ( JsPeerInfo peerInfo , String description , < nl > + int membersCount , int created , JsPeerInfo creator , < nl > + boolean isPublic , boolean isJoined ) / * - { < nl > + return { peerInfo : peerInfo , description : description , membersCount : membersCount , created : created , < nl > + isPublic : isPublic , isJoined : isJoined } ; < nl > + } - * / ; < nl > + < nl > + public native static JsPeerSearchResult create ( JsPeerInfo peerInfo ) / * - { < nl > + return { peerInfo : peerInfo } ; < nl > + } - * / ; < nl > + < nl > + protected JsPeerSearchResult ( ) { < nl > + < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > index 63dbbc4 . . b59506e 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java < nl > @ @ - 18 , 6 + 18 , 8 @ @ import im . actor . core . entity . FileReference ; < nl > import im . actor . core . entity . Group ; < nl > import im . actor . core . entity . MentionFilterResult ; < nl > import im . actor . core . entity . Peer ; < nl > + import im . actor . core . entity . PeerSearchEntity ; < nl > + import im . actor . core . entity . PeerSearchType ; < nl > import im . actor . core . entity . PublicGroup ; < nl > import im . actor . core . entity . Sex ; < nl > import im . actor . core . entity . User ; < nl > @ @ - 746 , 6 + 748 , 17 @ @ public class Messenger { < nl > return modules . getMentions ( ) . findMentions ( gid , query ) ; < nl > } < nl > < nl > + / * * < nl > + * Finding peers by type < nl > + * < nl > + * @ param type type of peer < nl > + * @ return found peers < nl > + * / < nl > + @ ObjectiveCName ( " findPeersWithType : " ) < nl > + public Command < List < PeerSearchEntity > > findPeers ( PeerSearchType type ) { < nl > + return modules . getSearchModule ( ) . findPeers ( type ) ; < nl > + } < nl > + < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > / / Peer operations < nl > / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java < nl > new file mode 100644 < nl > index 0000000 . . 53e6fed < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java < nl > @ @ - 0 , 0 + 1 , 57 @ @ < nl > + package im . actor . core . entity ; < nl > + < nl > + public class PeerSearchEntity { < nl > + < nl > + private Peer peer ; < nl > + private String title ; < nl > + private String description ; < nl > + private Integer membersCount ; < nl > + private Long date ; < nl > + private Integer creatorUid ; < nl > + private Boolean isPublic ; < nl > + private Boolean isJoined ; < nl > + < nl > + public PeerSearchEntity ( Peer peer , String title , String description , Integer membersCount , < nl > + Long date , Integer creatorUid , Boolean isPublic , Boolean isJoined ) { < nl > + this . peer = peer ; < nl > + this . title = title ; < nl > + this . description = description ; < nl > + this . membersCount = membersCount ; < nl > + this . date = date ; < nl > + this . creatorUid = creatorUid ; < nl > + this . isPublic = isPublic ; < nl > + this . isJoined = isJoined ; < nl > + } < nl > + < nl > + public Peer getPeer ( ) { < nl > + return peer ; < nl > + } < nl > + < nl > + public String getTitle ( ) { < nl > + return title ; < nl > + } < nl > + < nl > + public String getDescription ( ) { < nl > + return description ; < nl > + } < nl > + < nl > + public Integer getMembersCount ( ) { < nl > + return membersCount ; < nl > + } < nl > + < nl > + public Long getDate ( ) { < nl > + return date ; < nl > + } < nl > + < nl > + public Integer getCreatorUid ( ) { < nl > + return creatorUid ; < nl > + } < nl > + < nl > + public Boolean isPublic ( ) { < nl > + return isPublic ; < nl > + } < nl > + < nl > + public Boolean isJoined ( ) { < nl > + return isJoined ; < nl > + } < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java < nl > new file mode 100644 < nl > index 0000000 . . 14b4f2b < nl > - - - / dev / null < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java < nl > @ @ - 0 , 0 + 1 , 5 @ @ < nl > + package im . actor . core . entity ; < nl > + < nl > + public enum PeerSearchType { < nl > + CONTACTS , GROUPS , PUBLIC < nl > + } < nl > diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java < nl > index 42c9383 . . 6b74816 100644 < nl > - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java < nl > + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java < nl > @ @ - 4 , 19 + 4 , 33 @ @ < nl > < nl > package im . actor . core . modules . internal ; < nl > < nl > + import java . util . ArrayList ; < nl > import java . util . List ; < nl > < nl > + import im . actor . core . api . ApiPeerSearchResult ; < nl > + import im . actor . core . api . ApiSearchCondition ; < nl > + import im . actor . core . api . ApiSearchPeerType ; < nl > + import im . actor . core . api . ApiSearchPeerTypeCondition ; < nl > + import im . actor . core . api . rpc . RequestPeerSearch ; < nl > + import im . actor . core . api . rpc . ResponsePeerSearch ; < nl > import im . actor . core . entity . Dialog ; < nl > + import im . actor . core . entity . PeerSearchEntity ; < nl > + import im . actor . core . entity . PeerSearchType ; < nl > import im . actor . core . entity . SearchEntity ; < nl > import im . actor . core . modules . AbsModule ; < nl > import im . actor . core . modules . Modules ; < nl > import im . actor . core . modules . internal . search . SearchActor ; < nl > + import im . actor . core . network . RpcCallback ; < nl > + import im . actor . core . network . RpcException ; < nl > + import im . actor . core . viewmodel . Command ; < nl > + import im . actor . core . viewmodel . CommandCallback ; < nl > import im . actor . runtime . Storage ; < nl > import im . actor . runtime . actors . ActorCreator ; < nl > import im . actor . runtime . actors . ActorRef ; < nl > import im . actor . runtime . actors . Props ; < nl > import im . actor . runtime . storage . ListEngine ; < nl > < nl > + import static im . actor . core . modules . internal . messages . entity . EntityConverter . convert ; < nl > import static im . actor . runtime . actors . ActorSystem . system ; < nl > < nl > public class SearchModule extends AbsModule { < nl > @ @ - 55 , 6 + 69 , 57 @ @ public class SearchModule extends AbsModule { < nl > actorRef . send ( new SearchActor . OnContactsUpdated ( res ) ) ; < nl > } < nl > < nl > + public Command < List < PeerSearchEntity > > findPeers ( final PeerSearchType type ) { < nl > + final ApiSearchPeerType apiType ; < nl > + if ( type = = PeerSearchType . GROUPS ) { < nl > + apiType = ApiSearchPeerType . GROUPS ; < nl > + } else if ( type = = PeerSearchType . PUBLIC ) { < nl > + apiType = ApiSearchPeerType . PUBLIC ; < nl > + } else { < nl > + apiType = ApiSearchPeerType . CONTACTS ; < nl > + } < nl > + return new Command < List < PeerSearchEntity > > ( ) { < nl > + @ Override < nl > + public void start ( final CommandCallback < List < PeerSearchEntity > > callback ) { < nl > + ArrayList < ApiSearchCondition > conditions = new ArrayList < ApiSearchCondition > ( ) ; < nl > + conditions . add ( new ApiSearchPeerTypeCondition ( apiType ) ) ; < nl > + request ( new RequestPeerSearch ( conditions ) , new RpcCallback < ResponsePeerSearch > ( ) { < nl > + @ Override < nl > + public void onResult ( final ResponsePeerSearch response ) { < nl > + updates ( ) . executeRelatedResponse ( response . getUsers ( ) , < nl > + response . getGroups ( ) , new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + final ArrayList < PeerSearchEntity > res = new ArrayList < PeerSearchEntity > ( ) ; < nl > + for ( ApiPeerSearchResult r : response . getSearchResults ( ) ) { < nl > + res . add ( new PeerSearchEntity ( convert ( r . getPeer ( ) ) , r . getTitle ( ) , < nl > + r . getDescription ( ) , r . getMembersCount ( ) , r . getDateCreated ( ) , < nl > + r . getCreator ( ) , r . isPublic ( ) , r . isJoined ( ) ) ) ; < nl > + } < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onResult ( res ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + < nl > + @ Override < nl > + public void onError ( final RpcException e ) { < nl > + runOnUiThread ( new Runnable ( ) { < nl > + @ Override < nl > + public void run ( ) { < nl > + callback . onError ( e ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ) ; < nl > + } < nl > + } ; < nl > + } < nl > + < nl > public void resetModule ( ) { < nl > actorRef . send ( new SearchActor . Clear ( ) ) ; < nl > }

TEST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 381220a . . 56efe78 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 25 , 8 + 25 , 9 @ @ import im . actor . core . js . providers . JsNotificationsProvider ; 
 import im . actor . core . js . providers . JsPhoneBookProvider ; 
 import im . actor . core . js . providers . JsWebRTCProvider ; 
 import im . actor . core . js . providers . electron . JsElectronApp ; 
 - import im . actor . core . js . providers . webrtc . JsUserMediaStream ; 
 - import im . actor . core . js . providers . webrtc . JsWebRTC ; 
 + import im . actor . core . js . providers . webrtc . JsSessionDescription ; 
 + import im . actor . core . js . providers . webrtc . JsPeerConnection ; 
 + import im . actor . core . js . providers . webrtc . JsPeerConnectionListener ; 
 import im . actor . core . js . utils . HtmlMarkdownUtils ; 
 import im . actor . core . js . utils . IdentityUtils ; 
 import im . actor . core . network . RpcException ; 
 @ @ - 134 , 15 + 135 , 22 @ @ public class JsFacade implements Exportable { 
 
 messenger = new JsMessenger ( configuration . build ( ) ) ; 
 
 - JsWebRTC . getAudioMedia ( ) . then ( new Consumer < JsUserMediaStream > ( ) { 
 + JsPeerConnection peerConnection = JsPeerConnection . create ( null ) ; 
 + peerConnection . setListener ( new JsPeerConnectionListener ( ) { 
 @ Override 
 - public void apply ( JsUserMediaStream mediaStream ) { 
 - Log . d ( TAG , " Audio received " ) ; 
 + public void onIceCandidate ( String candidate ) { 
 + Log . d ( TAG , " OnCandidate : " + candidate ) ; 
 + } 
 + } ) ; 
 + peerConnection . createOffer ( ) . then ( new Consumer < JsSessionDescription > ( ) { 
 + @ Override 
 + public void apply ( JsSessionDescription offer ) { 
 + Log . d ( TAG , " Offer Ok : " + offer ) ; 
 } 
 } ) . failure ( new Consumer < Exception > ( ) { 
 @ Override 
 public void apply ( Exception e ) { 
 - Log . w ( TAG , " Audio Error " ) ; 
 + Log . d ( TAG , " Offer failure " ) ; 
 } 
 } ) ; 
 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsIceServer . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsIceServer . java 
 new file mode 100644 
 index 0000000 . . 49eef38 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsIceServer . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsIceServer extends JavaScriptObject { 
 + 
 + public static native JsIceServer create ( String url ) / * - { 
 + return { url : url } ; 
 + } - * / ; 
 + 
 + public static native JsIceServer create ( String url , String userName , String credential ) / * - { 
 + return { url : url , username : userName , credential : credential } ; 
 + } - * / ; 
 + 
 + protected JsIceServer ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java 
 new file mode 100644 
 index 0000000 . . ccee846 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnection . java 
 @ @ - 0 , 0 + 1 , 60 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + import im . actor . core . js . modules . JsScheduller ; 
 + import im . actor . runtime . promise . Promise ; 
 + import im . actor . runtime . promise . PromiseFunc ; 
 + import im . actor . runtime . promise . PromiseResolver ; 
 + 
 + public class JsPeerConnection extends JavaScriptObject { 
 + 
 + public static native JsPeerConnection create ( JsPeerConnectionConfig config ) / * - { 
 + return { peerConnection : new webkitRTCPeerConnection ( config ) } ; 
 + } - * / ; 
 + 
 + protected JsPeerConnection ( ) { 
 + 
 + } 
 + 
 + public final native void setListener ( JsPeerConnectionListener listener ) / * - { 
 + this . peerConnection . onicecandidate = function ( candidate ) { 
 + callback . @ im . actor . core . js . providers . webrtc . JsPeerConnectionListener : : onIceCandidate ( * ) ( candidate ) ; 
 + } ; 
 + } - * / ; 
 + 
 + public final native void setLocalDescription ( JsSessionDescription description ) / * - { 
 + this . peerConnection . setLocalDescription ( description ) ; 
 + } - * / ; 
 + 
 + public final native void setRemoteDescription ( JsSessionDescription description ) / * - { 
 + this . peerConnection . setRemoteDescription ( description ) ; 
 + } - * / ; 
 + 
 + public final Promise < JsSessionDescription > createOffer ( ) { 
 + return new Promise < > ( new PromiseFunc < JsSessionDescription > ( ) { 
 + @ Override 
 + public void exec ( final PromiseResolver < JsSessionDescription > resolver ) { 
 + createOffer ( new JsSessionDescriptionCallback ( ) { 
 + @ Override 
 + public void onOfferCreated ( JsSessionDescription offer ) { 
 + resolver . result ( offer ) ; 
 + } 
 + 
 + @ Override 
 + public void onOfferFailure ( ) { 
 + resolver . error ( new RuntimeException ( " Offer failure " ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) . done ( JsScheduller . scheduller ( ) ) ; 
 + } 
 + 
 + private final native void createOffer ( JsSessionDescriptionCallback callback ) / * - { 
 + this . peerConnection . createOffer ( function ( offer ) { 
 + callback . @ im . actor . core . js . providers . webrtc . JsSessionDescriptionCallback : : onOfferCreated ( * ) ( offer ) ; 
 + } , function ( error ) { 
 + callback . @ im . actor . core . js . providers . webrtc . JsSessionDescriptionCallback : : onOfferFailure ( * ) ( ) ; 
 + } ) ; 
 + } - * / ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionConfig . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionConfig . java 
 new file mode 100644 
 index 0000000 . . 2e8ed2c 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionConfig . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + import com . google . gwt . core . client . JsArray ; 
 + 
 + public class JsPeerConnectionConfig extends JavaScriptObject { 
 + 
 + public static native JsPeerConnectionConfig create ( JsArray < JsIceServer > iceServers ) / * - { 
 + return { iceServers : iceServers } ; 
 + } - * / ; 
 + 
 + protected JsPeerConnectionConfig ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java 
 new file mode 100644 
 index 0000000 . . 8bdb242 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsPeerConnectionListener . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + public interface JsPeerConnectionListener { 
 + void onIceCandidate ( String candidate ) ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java 
 new file mode 100644 
 index 0000000 . . 4154488 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescription . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsSessionDescription extends JavaScriptObject { 
 + 
 + protected JsSessionDescription ( ) { 
 + 
 + } 
 + 
 + public final native String getSDP ( ) / * - { 
 + return this . sdp ; 
 + } - * / ; 
 + 
 + public final native String getType ( ) / * - { 
 + return this . type ; 
 + } - * / ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescriptionCallback . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescriptionCallback . java 
 new file mode 100644 
 index 0000000 . . cba6fd0 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsSessionDescriptionCallback . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + public interface JsSessionDescriptionCallback { 
 + void onOfferCreated ( JsSessionDescription offer ) ; 
 + 
 + void onOfferFailure ( ) ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsStreaming . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsStreaming . java 
 new file mode 100644 
 index 0000000 . . 5f70b80 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsStreaming . java 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + package im . actor . core . js . providers . webrtc ; 
 + 
 + import im . actor . core . js . modules . JsScheduller ; 
 + import im . actor . runtime . promise . Promise ; 
 + import im . actor . runtime . promise . PromiseFunc ; 
 + import im . actor . runtime . promise . PromiseResolver ; 
 + 
 + public class JsStreaming { 
 + 
 + public static Promise < JsUserMediaStream > getUserAudio ( ) { 
 + return getUserMedia ( JsUserMediaConstraint . audioOnly ( ) ) ; 
 + } 
 + 
 + public static Promise < JsUserMediaStream > getUserVideo ( ) { 
 + return getUserMedia ( JsUserMediaConstraint . videoOnly ( ) ) ; 
 + } 
 + 
 + public static Promise < JsUserMediaStream > getUserAudioVideo ( ) { 
 + return getUserMedia ( JsUserMediaConstraint . audioVideo ( ) ) ; 
 + } 
 + 
 + public static Promise < JsUserMediaStream > getUserMedia ( final JsUserMediaConstraint constraint ) { 
 + return new Promise < > ( new PromiseFunc < JsUserMediaStream > ( ) { 
 + @ Override 
 + public void exec ( final PromiseResolver < JsUserMediaStream > resolver ) { 
 + getUserMediaJs ( constraint , new JsMediaCallback ( ) { 
 + @ Override 
 + public void onCreated ( JsUserMediaStream mediaStream ) { 
 + resolver . result ( mediaStream ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( JsUserMediaError error ) { 
 + resolver . error ( new MediaException ( error ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) . done ( JsScheduller . scheduller ( ) ) ; 
 + } 
 + 
 + protected static native void getUserMediaJs ( JsUserMediaConstraint constraint , JsMediaCallback callback ) / * - { 
 + $ wnd . navigator . getUserMedia ( constraint , function ( stream ) { 
 + callback . @ im . actor . core . js . providers . webrtc . JsMediaCallback : : onCreated ( * ) ( stream ) ; 
 + } , function ( error ) { 
 + callback . @ im . actor . core . js . providers . webrtc . JsMediaCallback : : onError ( * ) ( error ) ; 
 + } ) ; 
 + } - * / ; 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsWebRTC . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsWebRTC . java 
 deleted file mode 100644 
 index 12adf49 . . 0000000 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / providers / webrtc / JsWebRTC . java 
 + + + / dev / null 
 @ @ - 1 , 48 + 0 , 0 @ @ 
 - package im . actor . core . js . providers . webrtc ; 
 - 
 - import im . actor . core . js . modules . JsScheduller ; 
 - import im . actor . runtime . promise . Promise ; 
 - import im . actor . runtime . promise . PromiseFunc ; 
 - import im . actor . runtime . promise . PromiseResolver ; 
 - 
 - public class JsWebRTC { 
 - 
 - public static Promise < JsUserMediaStream > getUserAudio ( ) { 
 - return getUserMedia ( JsUserMediaConstraint . audioOnly ( ) ) ; 
 - } 
 - 
 - public static Promise < JsUserMediaStream > getUserVideo ( ) { 
 - return getUserMedia ( JsUserMediaConstraint . videoOnly ( ) ) ; 
 - } 
 - 
 - public static Promise < JsUserMediaStream > getUserAudioVideo ( ) { 
 - return getUserMedia ( JsUserMediaConstraint . audioVideo ( ) ) ; 
 - } 
 - 
 - public static Promise < JsUserMediaStream > getUserMedia ( final JsUserMediaConstraint constraint ) { 
 - return new Promise < > ( new PromiseFunc < JsUserMediaStream > ( ) { 
 - @ Override 
 - public void exec ( final PromiseResolver < JsUserMediaStream > resolver ) { 
 - getUserMediaJs ( constraint , new JsMediaCallback ( ) { 
 - @ Override 
 - public void onCreated ( JsUserMediaStream mediaStream ) { 
 - resolver . result ( mediaStream ) ; 
 - } 
 - 
 - @ Override 
 - public void onError ( JsUserMediaError error ) { 
 - resolver . error ( new MediaException ( error ) ) ; 
 - } 
 - } ) ; 
 - } 
 - } ) . done ( JsScheduller . scheduller ( ) ) ; 
 - } 
 - 
 - protected static native void getUserMediaJs ( JsUserMediaConstraint constraint , JsMediaCallback callback ) / * - { 
 - $ wnd . navigator . getUserMedia ( constraint , function ( stream ) { 
 - callback . @ im . actor . core . js . providers . webrtc . JsMediaCallback : : onCreated ( * ) ( stream ) ; 
 - } , function ( error ) { 
 - callback . @ im . actor . core . js . providers . webrtc . JsMediaCallback : : onError ( * ) ( error ) ; 
 - } ) ; 
 - } - * / ; 
 - }

NEAREST DIFF:
diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 index 4583c31 . . 174a996 100644 
 - - - a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / JsFacade . java 
 @ @ - 14 , 6 + 14 , 9 @ @ import im . actor . core . * ; 
 import im . actor . core . api . ApiAuthSession ; 
 import im . actor . core . entity . MentionFilterResult ; 
 import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerSearchEntity ; 
 + import im . actor . core . entity . PeerSearchType ; 
 + import im . actor . core . entity . PeerType ; 
 import im . actor . core . js . entity . * ; 
 import im . actor . core . js . modules . JsBindedValueCallback ; 
 import im . actor . core . js . providers . JsNotificationsProvider ; 
 @ @ - 710 , 6 + 713 , 38 @ @ public class JsFacade implements Exportable { 
 } ) ; 
 } 
 
 + public JsPromise findGroups ( ) { 
 + return JsPromise . create ( new JsPromiseExecutor ( ) { 
 + @ Override 
 + public void execute ( ) { 
 + messenger . findPeers ( PeerSearchType . GROUPS ) . start ( new CommandCallback < List < PeerSearchEntity > > ( ) { 
 + @ Override 
 + public void onResult ( List < PeerSearchEntity > res ) { 
 + Log . d ( TAG , " findGroups : result " ) ; 
 + JsArray < JsPeerSearchResult > jsRes = JsArray . createArray ( ) . cast ( ) ; 
 + for ( PeerSearchEntity s : res ) { 
 + if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . GROUP ) { 
 + jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) , 
 + s . getDescription ( ) , s . getMembersCount ( ) , ( int ) ( s . getDate ( ) / 1000L ) , 
 + messenger . buildPeerInfo ( Peer . user ( s . getCreatorUid ( ) ) ) , s . isPublic ( ) , 
 + s . isJoined ( ) ) ) ; 
 + } else if ( s . getPeer ( ) . getPeerType ( ) = = PeerType . PRIVATE ) { 
 + jsRes . push ( JsPeerSearchResult . create ( messenger . buildPeerInfo ( s . getPeer ( ) ) ) ) ; 
 + } 
 + / / jsRes . push ( ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void onError ( Exception e ) { 
 + Log . d ( TAG , " findGroups : error " ) ; 
 + reject ( e . getMessage ( ) ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 public void changeMyAvatar ( final JsFile file ) { 
 String descriptor = provider . registerUploadFile ( file ) ; 
 messenger . changeMyAvatar ( descriptor ) ; 
 diff - - git a / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java 
 new file mode 100644 
 index 0000000 . . d88fe40 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - js / src / main / java / im / actor / core / js / entity / JsPeerSearchResult . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package im . actor . core . js . entity ; 
 + 
 + import com . google . gwt . core . client . JavaScriptObject ; 
 + 
 + public class JsPeerSearchResult extends JavaScriptObject { 
 + 
 + public native static JsPeerSearchResult create ( JsPeerInfo peerInfo , String description , 
 + int membersCount , int created , JsPeerInfo creator , 
 + boolean isPublic , boolean isJoined ) / * - { 
 + return { peerInfo : peerInfo , description : description , membersCount : membersCount , created : created , 
 + isPublic : isPublic , isJoined : isJoined } ; 
 + } - * / ; 
 + 
 + public native static JsPeerSearchResult create ( JsPeerInfo peerInfo ) / * - { 
 + return { peerInfo : peerInfo } ; 
 + } - * / ; 
 + 
 + protected JsPeerSearchResult ( ) { 
 + 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 index 63dbbc4 . . b59506e 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / Messenger . java 
 @ @ - 18 , 6 + 18 , 8 @ @ import im . actor . core . entity . FileReference ; 
 import im . actor . core . entity . Group ; 
 import im . actor . core . entity . MentionFilterResult ; 
 import im . actor . core . entity . Peer ; 
 + import im . actor . core . entity . PeerSearchEntity ; 
 + import im . actor . core . entity . PeerSearchType ; 
 import im . actor . core . entity . PublicGroup ; 
 import im . actor . core . entity . Sex ; 
 import im . actor . core . entity . User ; 
 @ @ - 746 , 6 + 748 , 17 @ @ public class Messenger { 
 return modules . getMentions ( ) . findMentions ( gid , query ) ; 
 } 
 
 + / * * 
 + * Finding peers by type 
 + * 
 + * @ param type type of peer 
 + * @ return found peers 
 + * / 
 + @ ObjectiveCName ( " findPeersWithType : " ) 
 + public Command < List < PeerSearchEntity > > findPeers ( PeerSearchType type ) { 
 + return modules . getSearchModule ( ) . findPeers ( type ) ; 
 + } 
 + 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 / / Peer operations 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java 
 new file mode 100644 
 index 0000000 . . 53e6fed 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchEntity . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + package im . actor . core . entity ; 
 + 
 + public class PeerSearchEntity { 
 + 
 + private Peer peer ; 
 + private String title ; 
 + private String description ; 
 + private Integer membersCount ; 
 + private Long date ; 
 + private Integer creatorUid ; 
 + private Boolean isPublic ; 
 + private Boolean isJoined ; 
 + 
 + public PeerSearchEntity ( Peer peer , String title , String description , Integer membersCount , 
 + Long date , Integer creatorUid , Boolean isPublic , Boolean isJoined ) { 
 + this . peer = peer ; 
 + this . title = title ; 
 + this . description = description ; 
 + this . membersCount = membersCount ; 
 + this . date = date ; 
 + this . creatorUid = creatorUid ; 
 + this . isPublic = isPublic ; 
 + this . isJoined = isJoined ; 
 + } 
 + 
 + public Peer getPeer ( ) { 
 + return peer ; 
 + } 
 + 
 + public String getTitle ( ) { 
 + return title ; 
 + } 
 + 
 + public String getDescription ( ) { 
 + return description ; 
 + } 
 + 
 + public Integer getMembersCount ( ) { 
 + return membersCount ; 
 + } 
 + 
 + public Long getDate ( ) { 
 + return date ; 
 + } 
 + 
 + public Integer getCreatorUid ( ) { 
 + return creatorUid ; 
 + } 
 + 
 + public Boolean isPublic ( ) { 
 + return isPublic ; 
 + } 
 + 
 + public Boolean isJoined ( ) { 
 + return isJoined ; 
 + } 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java 
 new file mode 100644 
 index 0000000 . . 14b4f2b 
 - - - / dev / null 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / entity / PeerSearchType . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package im . actor . core . entity ; 
 + 
 + public enum PeerSearchType { 
 + CONTACTS , GROUPS , PUBLIC 
 + } 
 diff - - git a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java 
 index 42c9383 . . 6b74816 100644 
 - - - a / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java 
 + + + b / actor - sdk / sdk - core / core / core - shared / src / main / java / im / actor / core / modules / internal / SearchModule . java 
 @ @ - 4 , 19 + 4 , 33 @ @ 
 
 package im . actor . core . modules . internal ; 
 
 + import java . util . ArrayList ; 
 import java . util . List ; 
 
 + import im . actor . core . api . ApiPeerSearchResult ; 
 + import im . actor . core . api . ApiSearchCondition ; 
 + import im . actor . core . api . ApiSearchPeerType ; 
 + import im . actor . core . api . ApiSearchPeerTypeCondition ; 
 + import im . actor . core . api . rpc . RequestPeerSearch ; 
 + import im . actor . core . api . rpc . ResponsePeerSearch ; 
 import im . actor . core . entity . Dialog ; 
 + import im . actor . core . entity . PeerSearchEntity ; 
 + import im . actor . core . entity . PeerSearchType ; 
 import im . actor . core . entity . SearchEntity ; 
 import im . actor . core . modules . AbsModule ; 
 import im . actor . core . modules . Modules ; 
 import im . actor . core . modules . internal . search . SearchActor ; 
 + import im . actor . core . network . RpcCallback ; 
 + import im . actor . core . network . RpcException ; 
 + import im . actor . core . viewmodel . Command ; 
 + import im . actor . core . viewmodel . CommandCallback ; 
 import im . actor . runtime . Storage ; 
 import im . actor . runtime . actors . ActorCreator ; 
 import im . actor . runtime . actors . ActorRef ; 
 import im . actor . runtime . actors . Props ; 
 import im . actor . runtime . storage . ListEngine ; 
 
 + import static im . actor . core . modules . internal . messages . entity . EntityConverter . convert ; 
 import static im . actor . runtime . actors . ActorSystem . system ; 
 
 public class SearchModule extends AbsModule { 
 @ @ - 55 , 6 + 69 , 57 @ @ public class SearchModule extends AbsModule { 
 actorRef . send ( new SearchActor . OnContactsUpdated ( res ) ) ; 
 } 
 
 + public Command < List < PeerSearchEntity > > findPeers ( final PeerSearchType type ) { 
 + final ApiSearchPeerType apiType ; 
 + if ( type = = PeerSearchType . GROUPS ) { 
 + apiType = ApiSearchPeerType . GROUPS ; 
 + } else if ( type = = PeerSearchType . PUBLIC ) { 
 + apiType = ApiSearchPeerType . PUBLIC ; 
 + } else { 
 + apiType = ApiSearchPeerType . CONTACTS ; 
 + } 
 + return new Command < List < PeerSearchEntity > > ( ) { 
 + @ Override 
 + public void start ( final CommandCallback < List < PeerSearchEntity > > callback ) { 
 + ArrayList < ApiSearchCondition > conditions = new ArrayList < ApiSearchCondition > ( ) ; 
 + conditions . add ( new ApiSearchPeerTypeCondition ( apiType ) ) ; 
 + request ( new RequestPeerSearch ( conditions ) , new RpcCallback < ResponsePeerSearch > ( ) { 
 + @ Override 
 + public void onResult ( final ResponsePeerSearch response ) { 
 + updates ( ) . executeRelatedResponse ( response . getUsers ( ) , 
 + response . getGroups ( ) , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + final ArrayList < PeerSearchEntity > res = new ArrayList < PeerSearchEntity > ( ) ; 
 + for ( ApiPeerSearchResult r : response . getSearchResults ( ) ) { 
 + res . add ( new PeerSearchEntity ( convert ( r . getPeer ( ) ) , r . getTitle ( ) , 
 + r . getDescription ( ) , r . getMembersCount ( ) , r . getDateCreated ( ) , 
 + r . getCreator ( ) , r . isPublic ( ) , r . isJoined ( ) ) ) ; 
 + } 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onResult ( res ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void onError ( final RpcException e ) { 
 + runOnUiThread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + callback . onError ( e ) ; 
 + } 
 + } ) ; 
 + } 
 + } ) ; 
 + } 
 + } ; 
 + } 
 + 
 public void resetModule ( ) { 
 actorRef . send ( new SearchActor . Clear ( ) ) ; 
 }
