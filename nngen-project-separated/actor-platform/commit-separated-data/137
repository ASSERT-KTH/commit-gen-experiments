BLEU SCORE: 0.09578464408619825

TEST MSG: fix ( server ) : make history shared in channels by default
GENERATED MSG: feat ( server : core ) : hidden groups

TEST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 9794afa . . ab0dc2d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 62 , 16 + 62 , 19 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { < nl > integrationStorage = new IntegrationTokensKeyValueStorage < nl > < nl > / / Group creation < nl > + val groupType = GroupType . fromValue ( cmd . typ ) / / FIXME : make it normal enum < nl > + val isHistoryShared = groupType . isChannel < nl > + < nl > persist ( Created ( < nl > ts = createdAt , < nl > groupId , < nl > - typ = Some ( GroupType . fromValue ( cmd . typ ) ) , / / FIXME : make it normal enum < nl > + typ = Some ( groupType ) , < nl > creatorUserId = cmd . creatorUserId , < nl > accessHash = accessHash , < nl > title = cmd . title , < nl > userIds = Seq ( cmd . creatorUserId ) , / / only creator user becomes group member . all other users are invited via Invite message < nl > isHidden = Some ( false ) , < nl > - isHistoryShared = Some ( false ) , < nl > + isHistoryShared = Some ( isHistoryShared ) , < nl > extensions = Seq . empty < nl > ) ) { evt ⇒ < nl > val newState = commit ( evt ) < nl > diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > index 25eec0a . . 6d46810 100644 < nl > - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala < nl > @ @ - 93 , 7 + 93 , 7 @ @ object GroupRepo { < nl > ) < nl > } < nl > < nl > - / / ? ? ? < nl > + @ deprecated ( " Public groups are deprecated in Group V2 API " , " 2016 - 06 - 05 " ) < nl > def findPublic = < nl > groups . filter ( _ . isPublic = = = true ) . map ( _ . asGroup ) . result < nl > < nl > @ @ - 122 , 9 + 122 , 6 @ @ object GroupRepo { < nl > def updateAbout ( id : Int , about : Option [ String ] ) = < nl > byIdC . applied ( id ) . map ( _ . about ) . update ( about ) < nl > < nl > - / / ? ? ? < nl > - def makePublic ( id : Int ) = byIdC . applied ( id ) . map ( _ . isPublic ) . update ( true ) < nl > - < nl > @ deprecated ( " Migrations only " , " 2016 - 06 - 05 " ) < nl > def makeHidden ( id : Int ) = byIdC . applied ( id ) . map ( _ . isHidden ) . update ( true ) < nl > }
NEAREST DIFF (one line): diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto < nl > index 6355d52 . . 36269ae 100644 < nl > - - - a / actor - server / actor - core / src / main / protobuf / group . proto < nl > + + + b / actor - server / actor - core / src / main / protobuf / group . proto < nl > @ @ - 43 , 6 + 43 , 7 @ @ message GroupCommands { < nl > required int32 creator _ user _ id = 3 ; < nl > required string title = 4 ; < nl > repeated int32 user _ ids = 5 ; < nl > + optional bool is _ hidden = 7 ; < nl > repeated bytes extensions = 6 [ ( scalapb . field ) . type = " im . actor . api . rpc . misc . Extension " ] ; < nl > } < nl > < nl > @ @ - 254 , 6 + 255 , 7 @ @ message GroupEvents { < nl > required int64 access _ hash = 3 ; < nl > required string title = 4 ; < nl > repeated int32 user _ ids = 6 ; < nl > + optional bool is _ hidden = 8 ; < nl > repeated bytes extensions = 7 [ ( scalapb . field ) . type = " im . actor . api . rpc . misc . Extension " ] ; < nl > } < nl > < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > index 6f398a5 . . cae2c8f 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala < nl > @ @ - 10 , 7 + 10 , 6 @ @ import im . actor . api . rpc . groups . _ < nl > import im . actor . api . rpc . messaging . ServiceMessage < nl > import im . actor . api . rpc . misc . Extension < nl > import im . actor . api . rpc . users . Sex < nl > - import im . actor . server . { persist ⇒ p , models } < nl > import im . actor . server . ApiConversions . _ < nl > import im . actor . server . acl . ACLUtils < nl > import im . actor . server . history . HistoryUtils < nl > @ @ - 38 , 11 + 37 , 11 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > import GroupCommands . _ < nl > import GroupEvents . _ < nl > < nl > - protected def createInternal ( typ : GroupType , creatorUserId : Int , title : String , userIds : Seq [ Int ] , extensions : Seq [ Extension ] = Seq . empty ) : Unit = { < nl > + protected def createInternal ( typ : GroupType , creatorUserId : Int , title : String , userIds : Seq [ Int ] , isHidden : Option [ Boolean ] , extensions : Seq [ Extension ] = Seq . empty ) : Unit = { < nl > val accessHash = genAccessHash ( ) < nl > < nl > val date = now ( ) < nl > - val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , ( userIds . toSet + creatorUserId ) . toSeq , extensions ) < nl > + val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , ( userIds . toSet + creatorUserId ) . toSeq , isHidden , extensions ) < nl > val state = initState ( date , created ) < nl > < nl > persist ( TSEvent ( date , created ) ) { _ ⇒ < nl > @ @ - 76 , 7 + 75 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm < nl > < nl > val date = now ( ) < nl > < nl > - val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , Seq ( creatorUserId ) ) < nl > + val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , Seq ( creatorUserId ) , isHidden = Some ( false ) ) < nl > val state = initState ( date , created ) < nl > < nl > persist ( TSEvent ( date , created ) ) { _ ⇒ < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > index bcaeb7d . . 571d9d5 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala < nl > @ @ - 30 , 13 + 30 , 13 @ @ private [ group ] sealed trait Commands { < nl > ) : Future [ CreateAck ] = < nl > ( peerManagerRegion . ref ? Create ( groupId , typ , clientUserId , clientAuthId , title , randomId , userIds . toSeq ) ) . mapTo [ CreateAck ] < nl > < nl > - def createInternal ( groupId : Int , typ : GroupType . ValueType , creatorUserId : Int , title : String , userIds : Set [ Int ] ) ( < nl > + def createInternal ( groupId : Int , typ : GroupType . ValueType , creatorUserId : Int , title : String , userIds : Set [ Int ] , isHidden : Boolean ) ( < nl > implicit < nl > region : GroupProcessorRegion , < nl > timeout : Timeout , < nl > ec : ExecutionContext < nl > ) : Future [ CreateInternalAck ] = < nl > - ( region . ref ? CreateInternal ( groupId , typ , creatorUserId , title , userIds . toSeq ) ) . mapTo [ CreateInternalAck ] < nl > + ( region . ref ? CreateInternal ( groupId , typ , creatorUserId , title , userIds . toSeq , isHidden = Some ( isHidden ) ) ) . mapTo [ CreateInternalAck ] < nl > < nl > def makePublic ( groupId : Int , description : String ) ( < nl > implicit < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > index 163949e . . 7c0312d 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala < nl > @ @ - 48 , 6 + 48 , 7 @ @ private [ group ] case class Group ( < nl > bot : Option [ Bot ] , < nl > avatar : Option [ Avatar ] , < nl > topic : Option [ String ] , < nl > + isHidden : Boolean , < nl > extensions : Seq [ Extension ] < nl > ) extends ProcessorState < nl > < nl > @ @ - 199 , 8 + 200 , 8 @ @ private [ group ] final class GroupProcessor < nl > override def handleInitCommand : Receive = { < nl > case Create ( _ , typ , creatorUserId , creatorAuthId , title , randomId , userIds ) ⇒ < nl > create ( groupId , typ , creatorUserId , creatorAuthId , title , randomId , userIds . toSet ) < nl > - case CreateInternal ( _ , typ , creatorUserId , title , userIds , extensions ) ⇒ < nl > - createInternal ( typ , creatorUserId , title , userIds , extensions ) < nl > + case CreateInternal ( _ , typ , creatorUserId , title , userIds , isHidden , extensions ) ⇒ < nl > + createInternal ( typ , creatorUserId , title , userIds , isHidden , extensions ) < nl > } < nl > < nl > override def handleCommand ( state : Group ) : Receive = { < nl > @ @ - 277 , 6 + 278 , 7 @ @ private [ group ] final class GroupProcessor < nl > invitedUserIds = evt . userIds . filterNot ( _ = = evt . creatorUserId ) . toSet , < nl > avatar = None , < nl > topic = None , < nl > + isHidden = evt . isHidden . getOrElse ( false ) , < nl > extensions = evt . extensions < nl > ) < nl > } < nl > diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > index 19b120d . . a2cc6b8 100644 < nl > - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala < nl > @ @ - 2 , 7 + 2 , 6 @ @ package im . actor . server . group < nl > < nl > import im . actor . server . ApiConversions . _ < nl > import im . actor . api . rpc . groups . { Group ⇒ ApiGroup , Member ⇒ ApiMember } < nl > - import im . actor . api . rpc . misc . { Extension ⇒ ApiExtension } < nl > < nl > private [ group ] trait GroupQueryHandlers extends GroupCommandHelpers { < nl > this : GroupProcessor ⇒ < nl > @ @ - 42 , 7 + 41 , 7 @ @ private [ group ] trait GroupQueryHandlers extends GroupCommandHelpers { < nl > isAdmin = Some ( isAdmin ( group , clientUserId ) ) , < nl > theme = group . topic , < nl > about = group . about , < nl > - isHidden = Some ( false ) , < nl > + isHidden = Some ( group . isHidden ) , < nl > extensions = group . extensions . toVector < nl > )

TEST DIFF:
diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 9794afa . . ab0dc2d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 62 , 16 + 62 , 19 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with UserAcl { 
 integrationStorage = new IntegrationTokensKeyValueStorage 
 
 / / Group creation 
 + val groupType = GroupType . fromValue ( cmd . typ ) / / FIXME : make it normal enum 
 + val isHistoryShared = groupType . isChannel 
 + 
 persist ( Created ( 
 ts = createdAt , 
 groupId , 
 - typ = Some ( GroupType . fromValue ( cmd . typ ) ) , / / FIXME : make it normal enum 
 + typ = Some ( groupType ) , 
 creatorUserId = cmd . creatorUserId , 
 accessHash = accessHash , 
 title = cmd . title , 
 userIds = Seq ( cmd . creatorUserId ) , / / only creator user becomes group member . all other users are invited via Invite message 
 isHidden = Some ( false ) , 
 - isHistoryShared = Some ( false ) , 
 + isHistoryShared = Some ( isHistoryShared ) , 
 extensions = Seq . empty 
 ) ) { evt ⇒ 
 val newState = commit ( evt ) 
 diff - - git a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 index 25eec0a . . 6d46810 100644 
 - - - a / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 + + + b / actor - server / actor - persist / src / main / scala / im / actor / server / persist / Group . scala 
 @ @ - 93 , 7 + 93 , 7 @ @ object GroupRepo { 
 ) 
 } 
 
 - / / ? ? ? 
 + @ deprecated ( " Public groups are deprecated in Group V2 API " , " 2016 - 06 - 05 " ) 
 def findPublic = 
 groups . filter ( _ . isPublic = = = true ) . map ( _ . asGroup ) . result 
 
 @ @ - 122 , 9 + 122 , 6 @ @ object GroupRepo { 
 def updateAbout ( id : Int , about : Option [ String ] ) = 
 byIdC . applied ( id ) . map ( _ . about ) . update ( about ) 
 
 - / / ? ? ? 
 - def makePublic ( id : Int ) = byIdC . applied ( id ) . map ( _ . isPublic ) . update ( true ) 
 - 
 @ deprecated ( " Migrations only " , " 2016 - 06 - 05 " ) 
 def makeHidden ( id : Int ) = byIdC . applied ( id ) . map ( _ . isHidden ) . update ( true ) 
 }

NEAREST DIFF:
diff - - git a / actor - server / actor - core / src / main / protobuf / group . proto b / actor - server / actor - core / src / main / protobuf / group . proto 
 index 6355d52 . . 36269ae 100644 
 - - - a / actor - server / actor - core / src / main / protobuf / group . proto 
 + + + b / actor - server / actor - core / src / main / protobuf / group . proto 
 @ @ - 43 , 6 + 43 , 7 @ @ message GroupCommands { 
 required int32 creator _ user _ id = 3 ; 
 required string title = 4 ; 
 repeated int32 user _ ids = 5 ; 
 + optional bool is _ hidden = 7 ; 
 repeated bytes extensions = 6 [ ( scalapb . field ) . type = " im . actor . api . rpc . misc . Extension " ] ; 
 } 
 
 @ @ - 254 , 6 + 255 , 7 @ @ message GroupEvents { 
 required int64 access _ hash = 3 ; 
 required string title = 4 ; 
 repeated int32 user _ ids = 6 ; 
 + optional bool is _ hidden = 8 ; 
 repeated bytes extensions = 7 [ ( scalapb . field ) . type = " im . actor . api . rpc . misc . Extension " ] ; 
 } 
 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 index 6f398a5 . . cae2c8f 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupCommandHandlers . scala 
 @ @ - 10 , 7 + 10 , 6 @ @ import im . actor . api . rpc . groups . _ 
 import im . actor . api . rpc . messaging . ServiceMessage 
 import im . actor . api . rpc . misc . Extension 
 import im . actor . api . rpc . users . Sex 
 - import im . actor . server . { persist ⇒ p , models } 
 import im . actor . server . ApiConversions . _ 
 import im . actor . server . acl . ACLUtils 
 import im . actor . server . history . HistoryUtils 
 @ @ - 38 , 11 + 37 , 11 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 import GroupCommands . _ 
 import GroupEvents . _ 
 
 - protected def createInternal ( typ : GroupType , creatorUserId : Int , title : String , userIds : Seq [ Int ] , extensions : Seq [ Extension ] = Seq . empty ) : Unit = { 
 + protected def createInternal ( typ : GroupType , creatorUserId : Int , title : String , userIds : Seq [ Int ] , isHidden : Option [ Boolean ] , extensions : Seq [ Extension ] = Seq . empty ) : Unit = { 
 val accessHash = genAccessHash ( ) 
 
 val date = now ( ) 
 - val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , ( userIds . toSet + creatorUserId ) . toSeq , extensions ) 
 + val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , ( userIds . toSet + creatorUserId ) . toSeq , isHidden , extensions ) 
 val state = initState ( date , created ) 
 
 persist ( TSEvent ( date , created ) ) { _ ⇒ 
 @ @ - 76 , 7 + 75 , 7 @ @ private [ group ] trait GroupCommandHandlers extends GroupsImplicits with GroupComm 
 
 val date = now ( ) 
 
 - val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , Seq ( creatorUserId ) ) 
 + val created = GroupEvents . Created ( groupId , Some ( typ ) , creatorUserId , accessHash , title , Seq ( creatorUserId ) , isHidden = Some ( false ) ) 
 val state = initState ( date , created ) 
 
 persist ( TSEvent ( date , created ) ) { _ ⇒ 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 index bcaeb7d . . 571d9d5 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupOperations . scala 
 @ @ - 30 , 13 + 30 , 13 @ @ private [ group ] sealed trait Commands { 
 ) : Future [ CreateAck ] = 
 ( peerManagerRegion . ref ? Create ( groupId , typ , clientUserId , clientAuthId , title , randomId , userIds . toSeq ) ) . mapTo [ CreateAck ] 
 
 - def createInternal ( groupId : Int , typ : GroupType . ValueType , creatorUserId : Int , title : String , userIds : Set [ Int ] ) ( 
 + def createInternal ( groupId : Int , typ : GroupType . ValueType , creatorUserId : Int , title : String , userIds : Set [ Int ] , isHidden : Boolean ) ( 
 implicit 
 region : GroupProcessorRegion , 
 timeout : Timeout , 
 ec : ExecutionContext 
 ) : Future [ CreateInternalAck ] = 
 - ( region . ref ? CreateInternal ( groupId , typ , creatorUserId , title , userIds . toSeq ) ) . mapTo [ CreateInternalAck ] 
 + ( region . ref ? CreateInternal ( groupId , typ , creatorUserId , title , userIds . toSeq , isHidden = Some ( isHidden ) ) ) . mapTo [ CreateInternalAck ] 
 
 def makePublic ( groupId : Int , description : String ) ( 
 implicit 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 index 163949e . . 7c0312d 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupProcessor . scala 
 @ @ - 48 , 6 + 48 , 7 @ @ private [ group ] case class Group ( 
 bot : Option [ Bot ] , 
 avatar : Option [ Avatar ] , 
 topic : Option [ String ] , 
 + isHidden : Boolean , 
 extensions : Seq [ Extension ] 
 ) extends ProcessorState 
 
 @ @ - 199 , 8 + 200 , 8 @ @ private [ group ] final class GroupProcessor 
 override def handleInitCommand : Receive = { 
 case Create ( _ , typ , creatorUserId , creatorAuthId , title , randomId , userIds ) ⇒ 
 create ( groupId , typ , creatorUserId , creatorAuthId , title , randomId , userIds . toSet ) 
 - case CreateInternal ( _ , typ , creatorUserId , title , userIds , extensions ) ⇒ 
 - createInternal ( typ , creatorUserId , title , userIds , extensions ) 
 + case CreateInternal ( _ , typ , creatorUserId , title , userIds , isHidden , extensions ) ⇒ 
 + createInternal ( typ , creatorUserId , title , userIds , isHidden , extensions ) 
 } 
 
 override def handleCommand ( state : Group ) : Receive = { 
 @ @ - 277 , 6 + 278 , 7 @ @ private [ group ] final class GroupProcessor 
 invitedUserIds = evt . userIds . filterNot ( _ = = evt . creatorUserId ) . toSet , 
 avatar = None , 
 topic = None , 
 + isHidden = evt . isHidden . getOrElse ( false ) , 
 extensions = evt . extensions 
 ) 
 } 
 diff - - git a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 index 19b120d . . a2cc6b8 100644 
 - - - a / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 + + + b / actor - server / actor - core / src / main / scala / im / actor / server / group / GroupQueryHandlers . scala 
 @ @ - 2 , 7 + 2 , 6 @ @ package im . actor . server . group 
 
 import im . actor . server . ApiConversions . _ 
 import im . actor . api . rpc . groups . { Group ⇒ ApiGroup , Member ⇒ ApiMember } 
 - import im . actor . api . rpc . misc . { Extension ⇒ ApiExtension } 
 
 private [ group ] trait GroupQueryHandlers extends GroupCommandHelpers { 
 this : GroupProcessor ⇒ 
 @ @ - 42 , 7 + 41 , 7 @ @ private [ group ] trait GroupQueryHandlers extends GroupCommandHelpers { 
 isAdmin = Some ( isAdmin ( group , clientUserId ) ) , 
 theme = group . topic , 
 about = group . about , 
 - isHidden = Some ( false ) , 
 + isHidden = Some ( group . isHidden ) , 
 extensions = group . extensions . toVector 
 )
