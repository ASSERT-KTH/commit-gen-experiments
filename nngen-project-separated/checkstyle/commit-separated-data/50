BLEU SCORE: 0.06285596338261261

TEST MSG: Issue # 6485 : added tabWidth to Checker and populated it to all checks
GENERATED MSG: Added file extensions property to Checker & TreeWalker , issue # 25

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 75622fc . . b28a709 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2864 , 6 + 2864 , 7 @ @ <nl> < / targetClasses > <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . api . * < / param > <nl> + < param > com . puppycrawl . tools . checkstyle . TreeWalkerTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . grammar . comments . CommentsTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . filefilters . * < / param > <nl> < param > com . puppycrawl . tools . checkstyle . filters . * < / param > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> index 3e346b0 . . bc44d1e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 131 , 6 + 131 , 9 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod <nl> / * * Controls whether exceptions should halt execution or not . * / <nl> private boolean haltOnException = true ; <nl> <nl> + / * * The tab width for column reporting . * / <nl> + private int tabWidth = CommonUtil . DEFAULT _ TAB _ WIDTH ; <nl> + <nl> / * * <nl> * Creates a new { @ code Checker } instance . <nl> * The instance needs to be contextualized and configured . <nl> @ @ - 446 , 6 + 449 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod <nl> context . add ( " moduleFactory " , moduleFactory ) ; <nl> context . add ( " severity " , severity . getName ( ) ) ; <nl> context . add ( " basedir " , basedir ) ; <nl> + context . add ( " tabWidth " , String . valueOf ( tabWidth ) ) ; <nl> childContext = context ; <nl> } <nl> <nl> @ @ - 625 , 6 + 629 , 14 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod <nl> } <nl> <nl> / * * <nl> + * Set the tab width to report errors with . <nl> + * @ param tabWidth an { @ code int } value <nl> + * / <nl> + public final void setTabWidth ( int tabWidth ) { <nl> + this . tabWidth = tabWidth ; <nl> + } <nl> + <nl> + / * * <nl> * Clears the cache . <nl> * / <nl> public void clearCache ( ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index f5eda40 . . 0b38336 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 581 , 9 + 581 , 6 @ @ public final class Main { <nl> / * * The default number of threads to use for checker and the tree walker . * / <nl> private static final int DEFAULT _ THREAD _ COUNT = 1 ; <nl> <nl> - / * * Default distance between tab stops . * / <nl> - private static final int DEFAULT _ TAB _ WIDTH = 8 ; <nl> - <nl> / * * Name for the moduleConfig attribute ' tabWidth ' . * / <nl> private static final String ATTRIB _ TAB _ WIDTH _ NAME = " tabWidth " ; <nl> <nl> @ @ - 622 , 7 + 619 , 7 @ @ public final class Main { <nl> * / <nl> @ Option ( names = " - - tabWidth " , description = " Sets the length of the tab character . " <nl> + " Used only with \ " - s \ " option . Default value is $ { DEFAULT - VALUE } " ) <nl> - private int tabWidth = DEFAULT _ TAB _ WIDTH ; <nl> + private int tabWidth = CommonUtil . DEFAULT _ TAB _ WIDTH ; <nl> <nl> / * * Switch whether to generate suppressions file or not . * / <nl> @ Option ( names = { " - g " , " - - generate - xpath - suppression " } , <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index ac734c0 . . e91ffea 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 51 , 9 + 51 , 6 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; <nl> @ FileStatefulCheck <nl> public final class TreeWalker extends AbstractFileSetCheck implements ExternalResourceHolder { <nl> <nl> - / * * Default distance between tab stops . * / <nl> - private static final int DEFAULT _ TAB _ WIDTH = 8 ; <nl> - <nl> / * * Maps from token name to ordinary checks . * / <nl> private final Map < String , Set < AbstractCheck > > tokenToOrdinaryChecks = <nl> new HashMap < > ( ) ; <nl> @ @ - 74 , 9 + 71 , 6 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> / * * The sorted set of messages . * / <nl> private final SortedSet < LocalizedMessage > messages = new TreeSet < > ( ) ; <nl> <nl> - / * * The distance between tab stops . * / <nl> - private int tabWidth = DEFAULT _ TAB _ WIDTH ; <nl> - <nl> / * * Class loader to resolve classes with . * * / <nl> private ClassLoader classLoader ; <nl> <nl> @ @ - 94 , 14 + 88 , 6 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> } <nl> <nl> / * * <nl> - * Sets tab width . <nl> - * @ param tabWidth the distance between tab stops <nl> - * / <nl> - public void setTabWidth ( int tabWidth ) { <nl> - this . tabWidth = tabWidth ; <nl> - } <nl> - <nl> - / * * <nl> * Sets cache file . <nl> * @ deprecated Use { @ link Checker # setCacheFile } instead . It does not do anything now . We just <nl> * keep the setter for transition period to the same option in Checker . The <nl> @ @ - 135 , 7 + 121 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> final DefaultContext checkContext = new DefaultContext ( ) ; <nl> checkContext . add ( " classLoader " , classLoader ) ; <nl> checkContext . add ( " severity " , getSeverity ( ) ) ; <nl> - checkContext . add ( " tabWidth " , String . valueOf ( tabWidth ) ) ; <nl> + checkContext . add ( " tabWidth " , String . valueOf ( getTabWidth ( ) ) ) ; <nl> <nl> childContext = checkContext ; <nl> } <nl> @ @ - 183 , 7 + 169 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { <nl> / / check if already checked and passed the file <nl> if ( ! ordinaryChecks . isEmpty ( ) | | ! commentChecks . isEmpty ( ) ) { <nl> - final FileContents contents = new FileContents ( fileText ) ; <nl> + final FileContents contents = getFileContents ( ) ; <nl> final DetailAST rootAST = JavaParser . parse ( contents ) ; <nl> if ( ! ordinaryChecks . isEmpty ( ) ) { <nl> walk ( rootAST , contents , AstState . ORDINARY ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java <nl> index b2d44a9 . . 17a4bea 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java <nl> @ @ - 36 , 9 + 36 , 6 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> * / <nl> public abstract class AbstractCheck extends AbstractViolationReporter { <nl> <nl> - / * * Default tab width for column reporting . * / <nl> - private static final int DEFAULT _ TAB _ WIDTH = 8 ; <nl> - <nl> / * * <nl> * The check context . <nl> * @ noinspection ThreadLocalNotStaticFinal <nl> @ @ - 49 , 7 + 46 , 7 @ @ public abstract class AbstractCheck extends AbstractViolationReporter { <nl> private final Set < String > tokens = new HashSet < > ( ) ; <nl> <nl> / * * The tab width for column reporting . * / <nl> - private int tabWidth = DEFAULT _ TAB _ WIDTH ; <nl> + private int tabWidth = CommonUtil . DEFAULT _ TAB _ WIDTH ; <nl> <nl> / * * <nl> * The class loader to load external classes . Not initialized as this must <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> index 61fe348 . . 6e73001 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> @ @ - 36 , 10 + 36 , 10 @ @ public abstract class AbstractFileSetCheck <nl> implements FileSetCheck { <nl> <nl> / * * <nl> - * Collects the error messages . <nl> + * The check context . <nl> + * @ noinspection ThreadLocalNotStaticFinal <nl> * / <nl> - private static final ThreadLocal < SortedSet < LocalizedMessage > > MESSAGE _ COLLECTOR = <nl> - ThreadLocal . withInitial ( TreeSet : : new ) ; <nl> + private final ThreadLocal < FileContext > context = ThreadLocal . withInitial ( FileContext : : new ) ; <nl> <nl> / * * The dispatcher errors are fired to . * / <nl> private MessageDispatcher messageDispatcher ; <nl> @ @ - 47 , 6 + 47 , 9 @ @ public abstract class AbstractFileSetCheck <nl> / * * The file extensions that are accepted by this filter . * / <nl> private String [ ] fileExtensions = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> <nl> + / * * The tab width for column reporting . * / <nl> + private int tabWidth = CommonUtil . DEFAULT _ TAB _ WIDTH ; <nl> + <nl> / * * <nl> * Called to process a file that matches the specified file extensions . <nl> * @ param file the file to be processed <nl> @ @ - 74 , 7 + 77 , 8 @ @ public abstract class AbstractFileSetCheck <nl> @ Override <nl> public final SortedSet < LocalizedMessage > process ( File file , FileText fileText ) <nl> throws CheckstyleException { <nl> - final SortedSet < LocalizedMessage > messages = MESSAGE _ COLLECTOR . get ( ) ; <nl> + final SortedSet < LocalizedMessage > messages = context . get ( ) . messages ; <nl> + context . get ( ) . fileContents = new FileContents ( fileText ) ; <nl> messages . clear ( ) ; <nl> / / Process only what interested in <nl> if ( CommonUtil . matchesFileExtension ( file , fileExtensions ) ) { <nl> @ @ - 106 , 6 + 110 , 30 @ @ public abstract class AbstractFileSetCheck <nl> } <nl> <nl> / * * <nl> + * Returns the sorted set of { @ link LocalizedMessage } . <nl> + * @ return the sorted set of { @ link LocalizedMessage } . <nl> + * / <nl> + public SortedSet < LocalizedMessage > getMessages ( ) { <nl> + return new TreeSet < > ( context . get ( ) . messages ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the file contents associated with the tree . <nl> + * @ param contents the manager <nl> + * / <nl> + public final void setFileContents ( FileContents contents ) { <nl> + context . get ( ) . fileContents = contents ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the file contents associated with the file . <nl> + * @ return the file contents <nl> + * / <nl> + protected final FileContents getFileContents ( ) { <nl> + return context . get ( ) . fileContents ; <nl> + } <nl> + <nl> + / * * <nl> * Makes copy of file extensions and returns them . <nl> * @ return file extensions that identify the files that pass the <nl> * filter of this FileSetCheck . <nl> @ @ - 139 , 24 + 167 , 50 @ @ public abstract class AbstractFileSetCheck <nl> } <nl> <nl> / * * <nl> + * Get tab width to report errors with . <nl> + * @ return the tab width to report errors with <nl> + * / <nl> + protected final int getTabWidth ( ) { <nl> + return tabWidth ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the tab width to report errors with . <nl> + * @ param tabWidth an { @ code int } value <nl> + * / <nl> + public final void setTabWidth ( int tabWidth ) { <nl> + this . tabWidth = tabWidth ; <nl> + } <nl> + <nl> + / * * <nl> * Adds the sorted set of { @ link LocalizedMessage } to the message collector . <nl> * @ param messages the sorted set of { @ link LocalizedMessage } . <nl> * / <nl> - protected static void addMessages ( SortedSet < LocalizedMessage > messages ) { <nl> - MESSAGE _ COLLECTOR . get ( ) . addAll ( messages ) ; <nl> + protected void addMessages ( SortedSet < LocalizedMessage > messages ) { <nl> + context . get ( ) . messages . addAll ( messages ) ; <nl> } <nl> <nl> @ Override <nl> public final void log ( int line , String key , Object . . . args ) { <nl> - log ( line , 0 , key , args ) ; <nl> + context . get ( ) . messages . add ( <nl> + new LocalizedMessage ( line , <nl> + getMessageBundle ( ) , <nl> + key , <nl> + args , <nl> + getSeverityLevel ( ) , <nl> + getId ( ) , <nl> + getClass ( ) , <nl> + getCustomMessages ( ) . get ( key ) ) ) ; <nl> } <nl> <nl> @ Override <nl> public final void log ( int lineNo , int colNo , String key , <nl> Object . . . args ) { <nl> - MESSAGE _ COLLECTOR . get ( ) . add ( <nl> + final int col = 1 + CommonUtil . lengthExpandedTabs ( <nl> + context . get ( ) . fileContents . getLine ( lineNo - 1 ) , colNo , tabWidth ) ; <nl> + context . get ( ) . messages . add ( <nl> new LocalizedMessage ( lineNo , <nl> - colNo , <nl> + col , <nl> getMessageBundle ( ) , <nl> key , <nl> args , <nl> @ @ - 173 , 9 + 227 , 22 @ @ public abstract class AbstractFileSetCheck <nl> * @ param fileName the audited file <nl> * / <nl> protected final void fireErrors ( String fileName ) { <nl> - final SortedSet < LocalizedMessage > errors = new TreeSet < > ( MESSAGE _ COLLECTOR . get ( ) ) ; <nl> - MESSAGE _ COLLECTOR . get ( ) . clear ( ) ; <nl> + final SortedSet < LocalizedMessage > errors = new TreeSet < > ( context . get ( ) . messages ) ; <nl> + context . get ( ) . messages . clear ( ) ; <nl> messageDispatcher . fireErrors ( fileName , errors ) ; <nl> } <nl> <nl> + / * * <nl> + * The actual context holder . <nl> + * / <nl> + private static class FileContext { <nl> + <nl> + / * * The sorted set for collecting messages . * / <nl> + private final SortedSet < LocalizedMessage > messages = new TreeSet < > ( ) ; <nl> + <nl> + / * * The current file contents . * / <nl> + private FileContents fileContents ; <nl> + <nl> + } <nl> + <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java <nl> index 6bff9a0 . . 91cdeec 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java <nl> @ @ - 55 , 10 + 55 , 10 @ @ public class FileTabCharacterCheck extends AbstractFileSetCheck { <nl> final int tabPosition = line . indexOf ( ' \ t ' ) ; <nl> if ( tabPosition ! = - 1 ) { <nl> if ( eachLine ) { <nl> - log ( lineNum , tabPosition + 1 , MSG _ CONTAINS _ TAB ) ; <nl> + log ( lineNum , tabPosition , MSG _ CONTAINS _ TAB ) ; <nl> } <nl> else { <nl> - log ( lineNum , tabPosition + 1 , MSG _ FILE _ CONTAINS _ TAB ) ; <nl> + log ( lineNum , tabPosition , MSG _ FILE _ CONTAINS _ TAB ) ; <nl> break ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtil . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtil . java <nl> index ca31bbf . . 71e8755 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtil . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtil . java <nl> @ @ - 49 , 6 + 49 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * / <nl> public final class CommonUtil { <nl> <nl> + / * * Default tab width for column reporting . * / <nl> + public static final int DEFAULT _ TAB _ WIDTH = 8 ; <nl> + <nl> / * * Copied from org . apache . commons . lang3 . ArrayUtils . * / <nl> public static final String [ ] EMPTY _ STRING _ ARRAY = new String [ 0 ] ; <nl> / * * Copied from org . apache . commons . lang3 . ArrayUtils . * / <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 637064f . . da0e35f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 1203 , 6 + 1203 , 32 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testTabViolationDefault ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( VerifyPositionAfterTabFileSet . class ) ; <nl> + final String [ ] expected = { <nl> + " 2 : 9 : violation " , <nl> + " 3 : 17 : violation " , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputCheckerTabCharacter . txt " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTabViolation ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( VerifyPositionAfterTabFileSet . class ) ; <nl> + final DefaultConfiguration checkerConfig = createRootConfig ( checkConfig ) ; <nl> + checkerConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> + final String [ ] expected = { <nl> + " 2 : 5 : violation " , <nl> + " 3 : 9 : violation " , <nl> + } ; <nl> + verify ( checkerConfig , getPath ( " InputCheckerTabCharacter . txt " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testCheckerProcessCallAllNeededMethodsOfFileSets ( ) throws Exception { <nl> final DummyFileSet fileSet = new DummyFileSet ( ) ; <nl> final Checker checker = new Checker ( ) ; <nl> @ @ - 1645 , 4 + 1671 , 21 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> <nl> } <nl> <nl> + private static class VerifyPositionAfterTabFileSet extends AbstractFileSetCheck { <nl> + <nl> + @ Override <nl> + protected void processFiltered ( File file , FileText fileText ) { <nl> + int lineNumber = 0 ; <nl> + for ( String line : getFileContents ( ) . getLines ( ) ) { <nl> + final int position = line . lastIndexOf ( ' \ t ' ) ; <nl> + lineNumber + + ; <nl> + <nl> + if ( position ! = - 1 ) { <nl> + log ( lineNumber , position + 1 , " violation " ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index 02f1925 . . 38195b4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 46 , 6 + 46 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . api . Context ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck ; <nl> @ @ - 215 , 6 + 216 , 7 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> new ArrayList < > ( Arrays . asList ( " package com . puppycrawl . tools . checkstyle ; " , " " , <nl> " error public class InputTreeWalkerFileWithViolation { } " ) ) ; <nl> final FileText fileText = new FileText ( file , lines ) ; <nl> + treeWalker . setFileContents ( new FileContents ( fileText ) ) ; <nl> try { <nl> treeWalker . processFiltered ( file , fileText ) ; <nl> fail ( " Exception expected " ) ; <nl> @ @ - 263 , 6 + 265 , 7 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> lines . add ( " classD a { } " ) ; <nl> final FileText fileText = new FileText ( file , lines ) ; <nl> + treeWalker . setFileContents ( new FileContents ( fileText ) ) ; <nl> try { <nl> treeWalker . processFiltered ( file , fileText ) ; <nl> fail ( " Exception is expected " ) ; <nl> @ @ - 286 , 6 + 289 , 7 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> lines . add ( " class a % $ # { } " ) ; <nl> final FileText fileText = new FileText ( file , lines ) ; <nl> + treeWalker . setFileContents ( new FileContents ( fileText ) ) ; <nl> try { <nl> treeWalker . processFiltered ( file , fileText ) ; <nl> fail ( " Exception is expected " ) ; <nl> @ @ - 356 , 6 + 360 , 7 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> lines . add ( " class a % $ # { } " ) ; <nl> final FileText fileText = new FileText ( file , lines ) ; <nl> + treeWalker . setFileContents ( new FileContents ( fileText ) ) ; <nl> <nl> try { <nl> treeWalker . processFiltered ( file , fileText ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java <nl> index 9240b42 . . be486b9 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import java . io . File ; <nl> - import java . lang . reflect . Field ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> @ @ - 50 , 11 + 49 , 8 @ @ public class AbstractFileSetCheckTest { <nl> assertEquals ( " Invalid message " , " File should not be empty . " , <nl> firstFileMessages . first ( ) . getMessage ( ) ) ; <nl> <nl> - final Field field = AbstractFileSetCheck . class . getDeclaredField ( " MESSAGE _ COLLECTOR " ) ; <nl> - field . setAccessible ( true ) ; <nl> - @ SuppressWarnings ( " unchecked " ) <nl> final SortedSet < LocalizedMessage > internalMessages = <nl> - ( ( ThreadLocal < SortedSet < LocalizedMessage > > ) field . get ( null ) ) . get ( ) ; <nl> + check . getMessages ( ) ; <nl> assertTrue ( " Internal message should be empty , but was not " , internalMessages . isEmpty ( ) ) ; <nl> <nl> final File secondFile = new File ( " inputAbstractFileSetCheck . txt " ) ; <nl> @ @ - 81 , 11 + 77 , 8 @ @ public class AbstractFileSetCheckTest { <nl> assertEquals ( " Invalid exception message " , " Test " , ex . getMessage ( ) ) ; <nl> } <nl> <nl> - final Field field = AbstractFileSetCheck . class . getDeclaredField ( " MESSAGE _ COLLECTOR " ) ; <nl> - field . setAccessible ( true ) ; <nl> - @ SuppressWarnings ( " unchecked " ) <nl> final SortedSet < LocalizedMessage > internalMessages = <nl> - ( ( ThreadLocal < SortedSet < LocalizedMessage > > ) field . get ( null ) ) . get ( ) ; <nl> + check . getMessages ( ) ; <nl> assertEquals ( " Internal message should only have 1 " , 1 , internalMessages . size ( ) ) ; <nl> <nl> / / again to prove only 1 violation exists <nl> @ @ - 99 , 9 + 92 , 8 @ @ public class AbstractFileSetCheckTest { <nl> assertEquals ( " Invalid exception message " , " Test " , ex . getMessage ( ) ) ; <nl> } <nl> <nl> - @ SuppressWarnings ( " unchecked " ) <nl> final SortedSet < LocalizedMessage > internalMessages2 = <nl> - ( ( ThreadLocal < SortedSet < LocalizedMessage > > ) field . get ( null ) ) . get ( ) ; <nl> + check . getMessages ( ) ; <nl> assertEquals ( " Internal message should only have 1 again " , 1 , internalMessages2 . size ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java <nl> index f181615 . . 4fac401 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import java . io . File ; <nl> + import java . util . Collections ; <nl> import java . util . regex . Pattern ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 32 , 6 + 33 , 7 @ @ import org . junit . Test ; <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> <nl> public class RegexpOnFilenameCheckTest extends AbstractModuleTestSupport { <nl> @ @ - 243 , 7 + 245 , 7 @ @ public class RegexpOnFilenameCheckTest extends AbstractModuleTestSupport { <nl> try { <nl> final RegexpOnFilenameCheck check = new RegexpOnFilenameCheck ( ) ; <nl> check . setFileNamePattern ( Pattern . compile ( " BAD " ) ) ; <nl> - check . process ( file , null ) ; <nl> + check . process ( file , new FileText ( file , Collections . emptyList ( ) ) ) ; <nl> fail ( " CheckstyleException expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / TreeWalkerPowerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / TreeWalkerPowerTest . java <nl> index e231b21 . . ecd3265 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / TreeWalkerPowerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / TreeWalkerPowerTest . java <nl> @ @ - 71 , 7 + 71 , 9 @ @ public class TreeWalkerPowerTest extends AbstractModuleTestSupport { <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> lines . add ( " class Test { } " ) ; <nl> - Whitebox . invokeMethod ( treeWalkerSpy , " processFiltered " , file , new FileText ( file , lines ) ) ; <nl> + final FileText fileText = new FileText ( file , lines ) ; <nl> + treeWalkerSpy . setFileContents ( new FileContents ( fileText ) ) ; <nl> + Whitebox . invokeMethod ( treeWalkerSpy , " processFiltered " , file , fileText ) ; <nl> verifyPrivate ( treeWalkerSpy , times ( 1 ) ) . invoke ( " walk " , <nl> any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; <nl> verifyPrivate ( treeWalkerSpy , times ( 0 ) ) . invoke ( " getFilteredMessages " , <nl> @ @ - 91 , 7 + 93 , 9 @ @ public class TreeWalkerPowerTest extends AbstractModuleTestSupport { <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> lines . add ( " class Test { } " ) ; <nl> - Whitebox . invokeMethod ( treeWalkerSpy , " processFiltered " , file , new FileText ( file , lines ) ) ; <nl> + final FileText fileText = new FileText ( file , lines ) ; <nl> + treeWalkerSpy . setFileContents ( new FileContents ( fileText ) ) ; <nl> + Whitebox . invokeMethod ( treeWalkerSpy , " processFiltered " , file , fileText ) ; <nl> verifyPrivate ( treeWalkerSpy , times ( 1 ) ) . invoke ( " walk " , <nl> any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; <nl> verifyPrivate ( treeWalkerSpy , times ( 0 ) ) . invoke ( " getFilteredMessages " , <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checker / InputCheckerTabCharacter . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / checker / InputCheckerTabCharacter . txt <nl> new file mode 100644 <nl> index 0000000 . . d82aa3d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checker / InputCheckerTabCharacter . txt <nl> @ @ - 0 , 0 + 1 , 3 @ @ <nl> + / / has no tabs <nl> + 	 / / has tab <nl> + 	 	 / / has 2 tabs <nl> diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml <nl> index 167a5d0 . . c4b01be 100644 <nl> - - - a / src / xdocs / config . xml <nl> + + + b / src / xdocs / config . xml <nl> @ @ - 361 , 6 + 361 , 14 @ @ <nl> < td > < code > true < / code > < / td > <nl> < td > 7 . 4 < / td > <nl> < / tr > <nl> + < tr > <nl> + < td > tabWidth < / td > <nl> + < td > number of expanded spaces for a tab character ( < code > ' \ t ' < / code > ) ; used in <nl> + messages and Checks that print violations on files with tabs < / td > <nl> + < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > <nl> + < td > < code > 8 < / code > < / td > <nl> + < td > 8 . 19 < / td > <nl> + < / tr > <nl> < / table > <nl> < / subsection > <nl> <nl> @ @ - 512 , 15 + 520 , 6 @ @ <nl> < th > since < / th > <nl> < / tr > <nl> < tr > <nl> - < td > tabWidth < / td > <nl> - < td > number of expanded spaces for a tab character ( < code > ' \ t ' < / code > ) ; used in <nl> - messages and Checks that require a tab width , such as < a <nl> - href = " config _ sizes . html # LineLength " > < code > LineLength < / code > < / a > < / td > <nl> - < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > <nl> - < td > < code > 8 < / code > < / td > <nl> - < td > 3 . 0 < / td > <nl> - < / tr > <nl> - < tr > <nl> < td > fileExtensions < / td > <nl> < td > file type extension to identify Java files . Setting this <nl> property is typically only required if your Java source code
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> index a81ac42 . . 798a11f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . AnnotationUtility ; <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 28 , 6 + 29 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * Checks the number of parameters that a method or constructor has . <nl> * The default allowable number of parameters is 7 . <nl> * To change the number of allowable parameters , set property max . <nl> + * Allows to ignore number of parameters for methods with <nl> + * & # 064 ; { @ link java . lang . Override } annotation . <nl> * < / p > <nl> * < p > <nl> * An example of how to configure the check is : <nl> @ @ - 36 , 26 + 39 , 48 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * & lt ; module name = " ParameterNumber " / & gt ; <nl> * < / pre > <nl> * < p > <nl> - * An example of how to configure the check to allow 10 parameters is : <nl> + * An example of how to configure the check to allow 10 parameters <nl> + * and ignoring parameters for methods with & # 064 ; { @ link java . lang . Override } <nl> + * annotation is : <nl> * < / p > <nl> * < pre > <nl> * & lt ; module name = " ParameterNumber " & gt ; <nl> * & lt ; property name = " max " value = " 10 " / & gt ; <nl> + * & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> - <nl> + * Java code that will be ignored : <nl> + * < pre > <nl> + * < code > <nl> + * <nl> + * & # 064 ; Override <nl> + * public void needsLotsOfParameters ( int a , <nl> + * int b , int c , int d , int e , int f , int g , int h ) { <nl> + * . . . <nl> + * } <nl> + * < / code > <nl> + * < / pre > <nl> * @ author Oliver Burn <nl> * @ version 1 . 0 <nl> * / <nl> public class ParameterNumberCheck <nl> extends Check <nl> { <nl> + / * * { @ link Override Override } annotation name * / <nl> + private static final String OVERRIDE = " Override " ; <nl> + <nl> + / * * fully - qualified { @ link Override Override } annotation name * / <nl> + private static final String FQ _ OVERRIDE = " java . lang . " + OVERRIDE ; <nl> + <nl> / * * default maximum number of allowed parameters * / <nl> private static final int DEFAULT _ MAX _ PARAMETERS = 7 ; <nl> <nl> / * * the maximum number of allowed parameters * / <nl> private int mMax = DEFAULT _ MAX _ PARAMETERS ; <nl> <nl> + / * * ignore overridden methods * / <nl> + private boolean mIgnoreOverriddenMethods ; <nl> + <nl> / * * <nl> * Sets the maximum number of allowed parameters . <nl> * @ param aMax the max allowed parameters <nl> @ @ - 65 , 6 + 90 , 16 @ @ public class ParameterNumberCheck <nl> mMax = aMax ; <nl> } <nl> <nl> + / * * <nl> + * Ignore number of parameters for methods with <nl> + * & # 064 ; { @ link java . lang . Override } annotation . <nl> + * @ param aIgnoreOverriddenMethods set ignore overridden methods <nl> + * / <nl> + public void setIgnoreOverriddenMethods ( boolean aIgnoreOverriddenMethods ) <nl> + { <nl> + mIgnoreOverriddenMethods = aIgnoreOverriddenMethods ; <nl> + } <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) <nl> { <nl> @ @ - 76 , 9 + 111 , 23 @ @ public class ParameterNumberCheck <nl> { <nl> final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> final int count = params . getChildCount ( TokenTypes . PARAMETER _ DEF ) ; <nl> - if ( count > mMax ) { <nl> + if ( count > mMax & & ! ignoreNumberOfParameters ( aAST ) ) { <nl> final DetailAST name = aAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> log ( name . getLineNo ( ) , name . getColumnNo ( ) , " maxParam " , mMax , count ) ; <nl> } <nl> } <nl> + <nl> + / * * Determine whether to ignore number of parameters for the method . <nl> + * <nl> + * @ param aAST the token to process <nl> + * @ return true if this is overridden method and number of parameters should be ignored <nl> + * false otherwise <nl> + * / <nl> + private boolean ignoreNumberOfParameters ( DetailAST aAST ) <nl> + { <nl> + / / if you override a method , you have no power over the number of parameters <nl> + return mIgnoreOverriddenMethods <nl> + & & ( AnnotationUtility . containsAnnotation ( aAST , OVERRIDE ) <nl> + | | AnnotationUtility . containsAnnotation ( aAST , FQ _ OVERRIDE ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> index 7d293f2 . . 674b2b5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java <nl> @ @ - 63 , 4 + 63 , 17 @ @ public class ParameterNumberCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void shouldIgnoreMethodsWithOverrideAnnotation ( ) <nl> + throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( ParameterNumberCheck . class ) ; <nl> + checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 6 : 10 : More than 7 parameters ( found 8 ) . " , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputParameterNumberCheck . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java <nl> new file mode 100644 <nl> index 0000000 . . e90969d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + class InputParameterNumberCheckBase <nl> + { <nl> + / / method with many parameters <nl> + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + public class InputParameterNumberCheck extends InputParameterNumberCheckBase <nl> + { <nl> + @ Override <nl> + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ sizes . xml b / src / xdocs / config _ sizes . xml <nl> index 5ece323 . . d75c39e 100644 <nl> - - - a / src / xdocs / config _ sizes . xml <nl> + + + b / src / xdocs / config _ sizes . xml <nl> @ @ - 411 , 6 + 411 , 12 @ @ <nl> < td > 7 < / td > <nl> < / tr > <nl> < tr > <nl> + < td > ignoreOverriddenMethods < / td > <nl> + < td > Ignore number of parameters for methods with @ Override annotation < / td > <nl> + < td > < a href = " property _ types . html # boolean " > boolean < / a > < / td > <nl> + < td > false < / td > <nl> + < / tr > <nl> + < tr > <nl> < td > tokens < / td > <nl> < td > declarations to check < / td > <nl> <nl> @ @ - 448 , 6 + 454 , 28 @ @ <nl> & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> + < p > <nl> + To configure the check to ignore number of parameters for methods with @ Override or @ java . lang . Override annotation . <nl> + < / p > <nl> + < p > <nl> + Rationale : developer may need to override method with many parameters from 3 - rd party library . <nl> + In this case developer has no control over number of parameters . <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = " ParameterNumber " & gt ; <nl> + & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; <nl> + & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + < p > <nl> + Java code example <nl> + < / p > <nl> + < source > <nl> + @ Override <nl> + public void needsLotsOfParameters ( int a , int b , int c , int d , int e , int f , int g , int h ) { <nl> + . . . <nl> + } <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Package " >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 75622fc . . b28a709 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2864 , 6 + 2864 , 7 @ @ 
 < / targetClasses > 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . api . * < / param > 
 + < param > com . puppycrawl . tools . checkstyle . TreeWalkerTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . grammar . comments . CommentsTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . filefilters . * < / param > 
 < param > com . puppycrawl . tools . checkstyle . filters . * < / param > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 index 3e346b0 . . bc44d1e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 131 , 6 + 131 , 9 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod 
 / * * Controls whether exceptions should halt execution or not . * / 
 private boolean haltOnException = true ; 
 
 + / * * The tab width for column reporting . * / 
 + private int tabWidth = CommonUtil . DEFAULT _ TAB _ WIDTH ; 
 + 
 / * * 
 * Creates a new { @ code Checker } instance . 
 * The instance needs to be contextualized and configured . 
 @ @ - 446 , 6 + 449 , 7 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod 
 context . add ( " moduleFactory " , moduleFactory ) ; 
 context . add ( " severity " , severity . getName ( ) ) ; 
 context . add ( " basedir " , basedir ) ; 
 + context . add ( " tabWidth " , String . valueOf ( tabWidth ) ) ; 
 childContext = context ; 
 } 
 
 @ @ - 625 , 6 + 629 , 14 @ @ public class Checker extends AutomaticBean implements MessageDispatcher , RootMod 
 } 
 
 / * * 
 + * Set the tab width to report errors with . 
 + * @ param tabWidth an { @ code int } value 
 + * / 
 + public final void setTabWidth ( int tabWidth ) { 
 + this . tabWidth = tabWidth ; 
 + } 
 + 
 + / * * 
 * Clears the cache . 
 * / 
 public void clearCache ( ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index f5eda40 . . 0b38336 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 581 , 9 + 581 , 6 @ @ public final class Main { 
 / * * The default number of threads to use for checker and the tree walker . * / 
 private static final int DEFAULT _ THREAD _ COUNT = 1 ; 
 
 - / * * Default distance between tab stops . * / 
 - private static final int DEFAULT _ TAB _ WIDTH = 8 ; 
 - 
 / * * Name for the moduleConfig attribute ' tabWidth ' . * / 
 private static final String ATTRIB _ TAB _ WIDTH _ NAME = " tabWidth " ; 
 
 @ @ - 622 , 7 + 619 , 7 @ @ public final class Main { 
 * / 
 @ Option ( names = " - - tabWidth " , description = " Sets the length of the tab character . " 
 + " Used only with \ " - s \ " option . Default value is $ { DEFAULT - VALUE } " ) 
 - private int tabWidth = DEFAULT _ TAB _ WIDTH ; 
 + private int tabWidth = CommonUtil . DEFAULT _ TAB _ WIDTH ; 
 
 / * * Switch whether to generate suppressions file or not . * / 
 @ Option ( names = { " - g " , " - - generate - xpath - suppression " } , 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index ac734c0 . . e91ffea 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 51 , 9 + 51 , 6 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; 
 @ FileStatefulCheck 
 public final class TreeWalker extends AbstractFileSetCheck implements ExternalResourceHolder { 
 
 - / * * Default distance between tab stops . * / 
 - private static final int DEFAULT _ TAB _ WIDTH = 8 ; 
 - 
 / * * Maps from token name to ordinary checks . * / 
 private final Map < String , Set < AbstractCheck > > tokenToOrdinaryChecks = 
 new HashMap < > ( ) ; 
 @ @ - 74 , 9 + 71 , 6 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 / * * The sorted set of messages . * / 
 private final SortedSet < LocalizedMessage > messages = new TreeSet < > ( ) ; 
 
 - / * * The distance between tab stops . * / 
 - private int tabWidth = DEFAULT _ TAB _ WIDTH ; 
 - 
 / * * Class loader to resolve classes with . * * / 
 private ClassLoader classLoader ; 
 
 @ @ - 94 , 14 + 88 , 6 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 } 
 
 / * * 
 - * Sets tab width . 
 - * @ param tabWidth the distance between tab stops 
 - * / 
 - public void setTabWidth ( int tabWidth ) { 
 - this . tabWidth = tabWidth ; 
 - } 
 - 
 - / * * 
 * Sets cache file . 
 * @ deprecated Use { @ link Checker # setCacheFile } instead . It does not do anything now . We just 
 * keep the setter for transition period to the same option in Checker . The 
 @ @ - 135 , 7 + 121 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 final DefaultContext checkContext = new DefaultContext ( ) ; 
 checkContext . add ( " classLoader " , classLoader ) ; 
 checkContext . add ( " severity " , getSeverity ( ) ) ; 
 - checkContext . add ( " tabWidth " , String . valueOf ( tabWidth ) ) ; 
 + checkContext . add ( " tabWidth " , String . valueOf ( getTabWidth ( ) ) ) ; 
 
 childContext = checkContext ; 
 } 
 @ @ - 183 , 7 + 169 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { 
 / / check if already checked and passed the file 
 if ( ! ordinaryChecks . isEmpty ( ) | | ! commentChecks . isEmpty ( ) ) { 
 - final FileContents contents = new FileContents ( fileText ) ; 
 + final FileContents contents = getFileContents ( ) ; 
 final DetailAST rootAST = JavaParser . parse ( contents ) ; 
 if ( ! ordinaryChecks . isEmpty ( ) ) { 
 walk ( rootAST , contents , AstState . ORDINARY ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java 
 index b2d44a9 . . 17a4bea 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractCheck . java 
 @ @ - 36 , 9 + 36 , 6 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 * / 
 public abstract class AbstractCheck extends AbstractViolationReporter { 
 
 - / * * Default tab width for column reporting . * / 
 - private static final int DEFAULT _ TAB _ WIDTH = 8 ; 
 - 
 / * * 
 * The check context . 
 * @ noinspection ThreadLocalNotStaticFinal 
 @ @ - 49 , 7 + 46 , 7 @ @ public abstract class AbstractCheck extends AbstractViolationReporter { 
 private final Set < String > tokens = new HashSet < > ( ) ; 
 
 / * * The tab width for column reporting . * / 
 - private int tabWidth = DEFAULT _ TAB _ WIDTH ; 
 + private int tabWidth = CommonUtil . DEFAULT _ TAB _ WIDTH ; 
 
 / * * 
 * The class loader to load external classes . Not initialized as this must 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 index 61fe348 . . 6e73001 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 @ @ - 36 , 10 + 36 , 10 @ @ public abstract class AbstractFileSetCheck 
 implements FileSetCheck { 
 
 / * * 
 - * Collects the error messages . 
 + * The check context . 
 + * @ noinspection ThreadLocalNotStaticFinal 
 * / 
 - private static final ThreadLocal < SortedSet < LocalizedMessage > > MESSAGE _ COLLECTOR = 
 - ThreadLocal . withInitial ( TreeSet : : new ) ; 
 + private final ThreadLocal < FileContext > context = ThreadLocal . withInitial ( FileContext : : new ) ; 
 
 / * * The dispatcher errors are fired to . * / 
 private MessageDispatcher messageDispatcher ; 
 @ @ - 47 , 6 + 47 , 9 @ @ public abstract class AbstractFileSetCheck 
 / * * The file extensions that are accepted by this filter . * / 
 private String [ ] fileExtensions = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 
 + / * * The tab width for column reporting . * / 
 + private int tabWidth = CommonUtil . DEFAULT _ TAB _ WIDTH ; 
 + 
 / * * 
 * Called to process a file that matches the specified file extensions . 
 * @ param file the file to be processed 
 @ @ - 74 , 7 + 77 , 8 @ @ public abstract class AbstractFileSetCheck 
 @ Override 
 public final SortedSet < LocalizedMessage > process ( File file , FileText fileText ) 
 throws CheckstyleException { 
 - final SortedSet < LocalizedMessage > messages = MESSAGE _ COLLECTOR . get ( ) ; 
 + final SortedSet < LocalizedMessage > messages = context . get ( ) . messages ; 
 + context . get ( ) . fileContents = new FileContents ( fileText ) ; 
 messages . clear ( ) ; 
 / / Process only what interested in 
 if ( CommonUtil . matchesFileExtension ( file , fileExtensions ) ) { 
 @ @ - 106 , 6 + 110 , 30 @ @ public abstract class AbstractFileSetCheck 
 } 
 
 / * * 
 + * Returns the sorted set of { @ link LocalizedMessage } . 
 + * @ return the sorted set of { @ link LocalizedMessage } . 
 + * / 
 + public SortedSet < LocalizedMessage > getMessages ( ) { 
 + return new TreeSet < > ( context . get ( ) . messages ) ; 
 + } 
 + 
 + / * * 
 + * Set the file contents associated with the tree . 
 + * @ param contents the manager 
 + * / 
 + public final void setFileContents ( FileContents contents ) { 
 + context . get ( ) . fileContents = contents ; 
 + } 
 + 
 + / * * 
 + * Returns the file contents associated with the file . 
 + * @ return the file contents 
 + * / 
 + protected final FileContents getFileContents ( ) { 
 + return context . get ( ) . fileContents ; 
 + } 
 + 
 + / * * 
 * Makes copy of file extensions and returns them . 
 * @ return file extensions that identify the files that pass the 
 * filter of this FileSetCheck . 
 @ @ - 139 , 24 + 167 , 50 @ @ public abstract class AbstractFileSetCheck 
 } 
 
 / * * 
 + * Get tab width to report errors with . 
 + * @ return the tab width to report errors with 
 + * / 
 + protected final int getTabWidth ( ) { 
 + return tabWidth ; 
 + } 
 + 
 + / * * 
 + * Set the tab width to report errors with . 
 + * @ param tabWidth an { @ code int } value 
 + * / 
 + public final void setTabWidth ( int tabWidth ) { 
 + this . tabWidth = tabWidth ; 
 + } 
 + 
 + / * * 
 * Adds the sorted set of { @ link LocalizedMessage } to the message collector . 
 * @ param messages the sorted set of { @ link LocalizedMessage } . 
 * / 
 - protected static void addMessages ( SortedSet < LocalizedMessage > messages ) { 
 - MESSAGE _ COLLECTOR . get ( ) . addAll ( messages ) ; 
 + protected void addMessages ( SortedSet < LocalizedMessage > messages ) { 
 + context . get ( ) . messages . addAll ( messages ) ; 
 } 
 
 @ Override 
 public final void log ( int line , String key , Object . . . args ) { 
 - log ( line , 0 , key , args ) ; 
 + context . get ( ) . messages . add ( 
 + new LocalizedMessage ( line , 
 + getMessageBundle ( ) , 
 + key , 
 + args , 
 + getSeverityLevel ( ) , 
 + getId ( ) , 
 + getClass ( ) , 
 + getCustomMessages ( ) . get ( key ) ) ) ; 
 } 
 
 @ Override 
 public final void log ( int lineNo , int colNo , String key , 
 Object . . . args ) { 
 - MESSAGE _ COLLECTOR . get ( ) . add ( 
 + final int col = 1 + CommonUtil . lengthExpandedTabs ( 
 + context . get ( ) . fileContents . getLine ( lineNo - 1 ) , colNo , tabWidth ) ; 
 + context . get ( ) . messages . add ( 
 new LocalizedMessage ( lineNo , 
 - colNo , 
 + col , 
 getMessageBundle ( ) , 
 key , 
 args , 
 @ @ - 173 , 9 + 227 , 22 @ @ public abstract class AbstractFileSetCheck 
 * @ param fileName the audited file 
 * / 
 protected final void fireErrors ( String fileName ) { 
 - final SortedSet < LocalizedMessage > errors = new TreeSet < > ( MESSAGE _ COLLECTOR . get ( ) ) ; 
 - MESSAGE _ COLLECTOR . get ( ) . clear ( ) ; 
 + final SortedSet < LocalizedMessage > errors = new TreeSet < > ( context . get ( ) . messages ) ; 
 + context . get ( ) . messages . clear ( ) ; 
 messageDispatcher . fireErrors ( fileName , errors ) ; 
 } 
 
 + / * * 
 + * The actual context holder . 
 + * / 
 + private static class FileContext { 
 + 
 + / * * The sorted set for collecting messages . * / 
 + private final SortedSet < LocalizedMessage > messages = new TreeSet < > ( ) ; 
 + 
 + / * * The current file contents . * / 
 + private FileContents fileContents ; 
 + 
 + } 
 + 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java 
 index 6bff9a0 . . 91cdeec 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheck . java 
 @ @ - 55 , 10 + 55 , 10 @ @ public class FileTabCharacterCheck extends AbstractFileSetCheck { 
 final int tabPosition = line . indexOf ( ' \ t ' ) ; 
 if ( tabPosition ! = - 1 ) { 
 if ( eachLine ) { 
 - log ( lineNum , tabPosition + 1 , MSG _ CONTAINS _ TAB ) ; 
 + log ( lineNum , tabPosition , MSG _ CONTAINS _ TAB ) ; 
 } 
 else { 
 - log ( lineNum , tabPosition + 1 , MSG _ FILE _ CONTAINS _ TAB ) ; 
 + log ( lineNum , tabPosition , MSG _ FILE _ CONTAINS _ TAB ) ; 
 break ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtil . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtil . java 
 index ca31bbf . . 71e8755 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtil . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtil . java 
 @ @ - 49 , 6 + 49 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * / 
 public final class CommonUtil { 
 
 + / * * Default tab width for column reporting . * / 
 + public static final int DEFAULT _ TAB _ WIDTH = 8 ; 
 + 
 / * * Copied from org . apache . commons . lang3 . ArrayUtils . * / 
 public static final String [ ] EMPTY _ STRING _ ARRAY = new String [ 0 ] ; 
 / * * Copied from org . apache . commons . lang3 . ArrayUtils . * / 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 637064f . . da0e35f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 1203 , 6 + 1203 , 32 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testTabViolationDefault ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( VerifyPositionAfterTabFileSet . class ) ; 
 + final String [ ] expected = { 
 + " 2 : 9 : violation " , 
 + " 3 : 17 : violation " , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputCheckerTabCharacter . txt " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testTabViolation ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( VerifyPositionAfterTabFileSet . class ) ; 
 + final DefaultConfiguration checkerConfig = createRootConfig ( checkConfig ) ; 
 + checkerConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 + final String [ ] expected = { 
 + " 2 : 5 : violation " , 
 + " 3 : 9 : violation " , 
 + } ; 
 + verify ( checkerConfig , getPath ( " InputCheckerTabCharacter . txt " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 public void testCheckerProcessCallAllNeededMethodsOfFileSets ( ) throws Exception { 
 final DummyFileSet fileSet = new DummyFileSet ( ) ; 
 final Checker checker = new Checker ( ) ; 
 @ @ - 1645 , 4 + 1671 , 21 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 
 } 
 
 + private static class VerifyPositionAfterTabFileSet extends AbstractFileSetCheck { 
 + 
 + @ Override 
 + protected void processFiltered ( File file , FileText fileText ) { 
 + int lineNumber = 0 ; 
 + for ( String line : getFileContents ( ) . getLines ( ) ) { 
 + final int position = line . lastIndexOf ( ' \ t ' ) ; 
 + lineNumber + + ; 
 + 
 + if ( position ! = - 1 ) { 
 + log ( lineNumber , position + 1 , " violation " ) ; 
 + } 
 + } 
 + } 
 + 
 + } 
 + 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index 02f1925 . . 38195b4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 46 , 6 + 46 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . api . Context ; 
 + import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck ; 
 @ @ - 215 , 6 + 216 , 7 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 new ArrayList < > ( Arrays . asList ( " package com . puppycrawl . tools . checkstyle ; " , " " , 
 " error public class InputTreeWalkerFileWithViolation { } " ) ) ; 
 final FileText fileText = new FileText ( file , lines ) ; 
 + treeWalker . setFileContents ( new FileContents ( fileText ) ) ; 
 try { 
 treeWalker . processFiltered ( file , fileText ) ; 
 fail ( " Exception expected " ) ; 
 @ @ - 263 , 6 + 265 , 7 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 final List < String > lines = new ArrayList < > ( ) ; 
 lines . add ( " classD a { } " ) ; 
 final FileText fileText = new FileText ( file , lines ) ; 
 + treeWalker . setFileContents ( new FileContents ( fileText ) ) ; 
 try { 
 treeWalker . processFiltered ( file , fileText ) ; 
 fail ( " Exception is expected " ) ; 
 @ @ - 286 , 6 + 289 , 7 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 final List < String > lines = new ArrayList < > ( ) ; 
 lines . add ( " class a % $ # { } " ) ; 
 final FileText fileText = new FileText ( file , lines ) ; 
 + treeWalker . setFileContents ( new FileContents ( fileText ) ) ; 
 try { 
 treeWalker . processFiltered ( file , fileText ) ; 
 fail ( " Exception is expected " ) ; 
 @ @ - 356 , 6 + 360 , 7 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 final List < String > lines = new ArrayList < > ( ) ; 
 lines . add ( " class a % $ # { } " ) ; 
 final FileText fileText = new FileText ( file , lines ) ; 
 + treeWalker . setFileContents ( new FileContents ( fileText ) ) ; 
 
 try { 
 treeWalker . processFiltered ( file , fileText ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java 
 index 9240b42 . . be486b9 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheckTest . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 import java . io . File ; 
 - import java . lang . reflect . Field ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . List ; 
 @ @ - 50 , 11 + 49 , 8 @ @ public class AbstractFileSetCheckTest { 
 assertEquals ( " Invalid message " , " File should not be empty . " , 
 firstFileMessages . first ( ) . getMessage ( ) ) ; 
 
 - final Field field = AbstractFileSetCheck . class . getDeclaredField ( " MESSAGE _ COLLECTOR " ) ; 
 - field . setAccessible ( true ) ; 
 - @ SuppressWarnings ( " unchecked " ) 
 final SortedSet < LocalizedMessage > internalMessages = 
 - ( ( ThreadLocal < SortedSet < LocalizedMessage > > ) field . get ( null ) ) . get ( ) ; 
 + check . getMessages ( ) ; 
 assertTrue ( " Internal message should be empty , but was not " , internalMessages . isEmpty ( ) ) ; 
 
 final File secondFile = new File ( " inputAbstractFileSetCheck . txt " ) ; 
 @ @ - 81 , 11 + 77 , 8 @ @ public class AbstractFileSetCheckTest { 
 assertEquals ( " Invalid exception message " , " Test " , ex . getMessage ( ) ) ; 
 } 
 
 - final Field field = AbstractFileSetCheck . class . getDeclaredField ( " MESSAGE _ COLLECTOR " ) ; 
 - field . setAccessible ( true ) ; 
 - @ SuppressWarnings ( " unchecked " ) 
 final SortedSet < LocalizedMessage > internalMessages = 
 - ( ( ThreadLocal < SortedSet < LocalizedMessage > > ) field . get ( null ) ) . get ( ) ; 
 + check . getMessages ( ) ; 
 assertEquals ( " Internal message should only have 1 " , 1 , internalMessages . size ( ) ) ; 
 
 / / again to prove only 1 violation exists 
 @ @ - 99 , 9 + 92 , 8 @ @ public class AbstractFileSetCheckTest { 
 assertEquals ( " Invalid exception message " , " Test " , ex . getMessage ( ) ) ; 
 } 
 
 - @ SuppressWarnings ( " unchecked " ) 
 final SortedSet < LocalizedMessage > internalMessages2 = 
 - ( ( ThreadLocal < SortedSet < LocalizedMessage > > ) field . get ( null ) ) . get ( ) ; 
 + check . getMessages ( ) ; 
 assertEquals ( " Internal message should only have 1 again " , 1 , internalMessages2 . size ( ) ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java 
 index f181615 . . 4fac401 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpOnFilenameCheckTest . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 
 import java . io . File ; 
 + import java . util . Collections ; 
 import java . util . regex . Pattern ; 
 
 import org . junit . Test ; 
 @ @ - 32 , 6 + 33 , 7 @ @ import org . junit . Test ; 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 
 public class RegexpOnFilenameCheckTest extends AbstractModuleTestSupport { 
 @ @ - 243 , 7 + 245 , 7 @ @ public class RegexpOnFilenameCheckTest extends AbstractModuleTestSupport { 
 try { 
 final RegexpOnFilenameCheck check = new RegexpOnFilenameCheck ( ) ; 
 check . setFileNamePattern ( Pattern . compile ( " BAD " ) ) ; 
 - check . process ( file , null ) ; 
 + check . process ( file , new FileText ( file , Collections . emptyList ( ) ) ) ; 
 fail ( " CheckstyleException expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / TreeWalkerPowerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / TreeWalkerPowerTest . java 
 index e231b21 . . ecd3265 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / TreeWalkerPowerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / powermock / TreeWalkerPowerTest . java 
 @ @ - 71 , 7 + 71 , 9 @ @ public class TreeWalkerPowerTest extends AbstractModuleTestSupport { 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 final List < String > lines = new ArrayList < > ( ) ; 
 lines . add ( " class Test { } " ) ; 
 - Whitebox . invokeMethod ( treeWalkerSpy , " processFiltered " , file , new FileText ( file , lines ) ) ; 
 + final FileText fileText = new FileText ( file , lines ) ; 
 + treeWalkerSpy . setFileContents ( new FileContents ( fileText ) ) ; 
 + Whitebox . invokeMethod ( treeWalkerSpy , " processFiltered " , file , fileText ) ; 
 verifyPrivate ( treeWalkerSpy , times ( 1 ) ) . invoke ( " walk " , 
 any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; 
 verifyPrivate ( treeWalkerSpy , times ( 0 ) ) . invoke ( " getFilteredMessages " , 
 @ @ - 91 , 7 + 93 , 9 @ @ public class TreeWalkerPowerTest extends AbstractModuleTestSupport { 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 final List < String > lines = new ArrayList < > ( ) ; 
 lines . add ( " class Test { } " ) ; 
 - Whitebox . invokeMethod ( treeWalkerSpy , " processFiltered " , file , new FileText ( file , lines ) ) ; 
 + final FileText fileText = new FileText ( file , lines ) ; 
 + treeWalkerSpy . setFileContents ( new FileContents ( fileText ) ) ; 
 + Whitebox . invokeMethod ( treeWalkerSpy , " processFiltered " , file , fileText ) ; 
 verifyPrivate ( treeWalkerSpy , times ( 1 ) ) . invoke ( " walk " , 
 any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; 
 verifyPrivate ( treeWalkerSpy , times ( 0 ) ) . invoke ( " getFilteredMessages " , 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checker / InputCheckerTabCharacter . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / checker / InputCheckerTabCharacter . txt 
 new file mode 100644 
 index 0000000 . . d82aa3d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checker / InputCheckerTabCharacter . txt 
 @ @ - 0 , 0 + 1 , 3 @ @ 
 + / / has no tabs 
 + 	 / / has tab 
 + 	 	 / / has 2 tabs 
 diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml 
 index 167a5d0 . . c4b01be 100644 
 - - - a / src / xdocs / config . xml 
 + + + b / src / xdocs / config . xml 
 @ @ - 361 , 6 + 361 , 14 @ @ 
 < td > < code > true < / code > < / td > 
 < td > 7 . 4 < / td > 
 < / tr > 
 + < tr > 
 + < td > tabWidth < / td > 
 + < td > number of expanded spaces for a tab character ( < code > ' \ t ' < / code > ) ; used in 
 + messages and Checks that print violations on files with tabs < / td > 
 + < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > 
 + < td > < code > 8 < / code > < / td > 
 + < td > 8 . 19 < / td > 
 + < / tr > 
 < / table > 
 < / subsection > 
 
 @ @ - 512 , 15 + 520 , 6 @ @ 
 < th > since < / th > 
 < / tr > 
 < tr > 
 - < td > tabWidth < / td > 
 - < td > number of expanded spaces for a tab character ( < code > ' \ t ' < / code > ) ; used in 
 - messages and Checks that require a tab width , such as < a 
 - href = " config _ sizes . html # LineLength " > < code > LineLength < / code > < / a > < / td > 
 - < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > 
 - < td > < code > 8 < / code > < / td > 
 - < td > 3 . 0 < / td > 
 - < / tr > 
 - < tr > 
 < td > fileExtensions < / td > 
 < td > file type extension to identify Java files . Setting this 
 property is typically only required if your Java source code

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 index a81ac42 . . 798a11f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 
 + import com . puppycrawl . tools . checkstyle . api . AnnotationUtility ; 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 28 , 6 + 29 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * Checks the number of parameters that a method or constructor has . 
 * The default allowable number of parameters is 7 . 
 * To change the number of allowable parameters , set property max . 
 + * Allows to ignore number of parameters for methods with 
 + * & # 064 ; { @ link java . lang . Override } annotation . 
 * < / p > 
 * < p > 
 * An example of how to configure the check is : 
 @ @ - 36 , 26 + 39 , 48 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * & lt ; module name = " ParameterNumber " / & gt ; 
 * < / pre > 
 * < p > 
 - * An example of how to configure the check to allow 10 parameters is : 
 + * An example of how to configure the check to allow 10 parameters 
 + * and ignoring parameters for methods with & # 064 ; { @ link java . lang . Override } 
 + * annotation is : 
 * < / p > 
 * < pre > 
 * & lt ; module name = " ParameterNumber " & gt ; 
 * & lt ; property name = " max " value = " 10 " / & gt ; 
 + * & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 - 
 + * Java code that will be ignored : 
 + * < pre > 
 + * < code > 
 + * 
 + * & # 064 ; Override 
 + * public void needsLotsOfParameters ( int a , 
 + * int b , int c , int d , int e , int f , int g , int h ) { 
 + * . . . 
 + * } 
 + * < / code > 
 + * < / pre > 
 * @ author Oliver Burn 
 * @ version 1 . 0 
 * / 
 public class ParameterNumberCheck 
 extends Check 
 { 
 + / * * { @ link Override Override } annotation name * / 
 + private static final String OVERRIDE = " Override " ; 
 + 
 + / * * fully - qualified { @ link Override Override } annotation name * / 
 + private static final String FQ _ OVERRIDE = " java . lang . " + OVERRIDE ; 
 + 
 / * * default maximum number of allowed parameters * / 
 private static final int DEFAULT _ MAX _ PARAMETERS = 7 ; 
 
 / * * the maximum number of allowed parameters * / 
 private int mMax = DEFAULT _ MAX _ PARAMETERS ; 
 
 + / * * ignore overridden methods * / 
 + private boolean mIgnoreOverriddenMethods ; 
 + 
 / * * 
 * Sets the maximum number of allowed parameters . 
 * @ param aMax the max allowed parameters 
 @ @ - 65 , 6 + 90 , 16 @ @ public class ParameterNumberCheck 
 mMax = aMax ; 
 } 
 
 + / * * 
 + * Ignore number of parameters for methods with 
 + * & # 064 ; { @ link java . lang . Override } annotation . 
 + * @ param aIgnoreOverriddenMethods set ignore overridden methods 
 + * / 
 + public void setIgnoreOverriddenMethods ( boolean aIgnoreOverriddenMethods ) 
 + { 
 + mIgnoreOverriddenMethods = aIgnoreOverriddenMethods ; 
 + } 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) 
 { 
 @ @ - 76 , 9 + 111 , 23 @ @ public class ParameterNumberCheck 
 { 
 final DetailAST params = aAST . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 final int count = params . getChildCount ( TokenTypes . PARAMETER _ DEF ) ; 
 - if ( count > mMax ) { 
 + if ( count > mMax & & ! ignoreNumberOfParameters ( aAST ) ) { 
 final DetailAST name = aAST . findFirstToken ( TokenTypes . IDENT ) ; 
 log ( name . getLineNo ( ) , name . getColumnNo ( ) , " maxParam " , mMax , count ) ; 
 } 
 } 
 + 
 + / * * Determine whether to ignore number of parameters for the method . 
 + * 
 + * @ param aAST the token to process 
 + * @ return true if this is overridden method and number of parameters should be ignored 
 + * false otherwise 
 + * / 
 + private boolean ignoreNumberOfParameters ( DetailAST aAST ) 
 + { 
 + / / if you override a method , you have no power over the number of parameters 
 + return mIgnoreOverriddenMethods 
 + & & ( AnnotationUtility . containsAnnotation ( aAST , OVERRIDE ) 
 + | | AnnotationUtility . containsAnnotation ( aAST , FQ _ OVERRIDE ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 index 7d293f2 . . 674b2b5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheckTest . java 
 @ @ - 63 , 4 + 63 , 17 @ @ public class ParameterNumberCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputSimple . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void shouldIgnoreMethodsWithOverrideAnnotation ( ) 
 + throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( ParameterNumberCheck . class ) ; 
 + checkConfig . addAttribute ( " ignoreOverriddenMethods " , " true " ) ; 
 + final String [ ] expected = { 
 + " 6 : 10 : More than 7 parameters ( found 8 ) . " , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputParameterNumberCheck . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java 
 new file mode 100644 
 index 0000000 . . e90969d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputParameterNumberCheck . java 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + class InputParameterNumberCheckBase 
 + { 
 + / / method with many parameters 
 + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + 
 + } 
 + } 
 + 
 + public class InputParameterNumberCheck extends InputParameterNumberCheckBase 
 + { 
 + @ Override 
 + void myMethod ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ sizes . xml b / src / xdocs / config _ sizes . xml 
 index 5ece323 . . d75c39e 100644 
 - - - a / src / xdocs / config _ sizes . xml 
 + + + b / src / xdocs / config _ sizes . xml 
 @ @ - 411 , 6 + 411 , 12 @ @ 
 < td > 7 < / td > 
 < / tr > 
 < tr > 
 + < td > ignoreOverriddenMethods < / td > 
 + < td > Ignore number of parameters for methods with @ Override annotation < / td > 
 + < td > < a href = " property _ types . html # boolean " > boolean < / a > < / td > 
 + < td > false < / td > 
 + < / tr > 
 + < tr > 
 < td > tokens < / td > 
 < td > declarations to check < / td > 
 
 @ @ - 448 , 6 + 454 , 28 @ @ 
 & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 + < p > 
 + To configure the check to ignore number of parameters for methods with @ Override or @ java . lang . Override annotation . 
 + < / p > 
 + < p > 
 + Rationale : developer may need to override method with many parameters from 3 - rd party library . 
 + In this case developer has no control over number of parameters . 
 + < / p > 
 + < source > 
 + & lt ; module name = " ParameterNumber " & gt ; 
 + & lt ; property name = " ignoreOverriddenMethods " value = " true " / & gt ; 
 + & lt ; property name = " tokens " value = " METHOD _ DEF " / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + < p > 
 + Java code example 
 + < / p > 
 + < source > 
 + @ Override 
 + public void needsLotsOfParameters ( int a , int b , int c , int d , int e , int f , int g , int h ) { 
 + . . . 
 + } 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Package " >
