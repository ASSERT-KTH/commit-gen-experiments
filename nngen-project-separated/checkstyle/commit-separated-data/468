BLEU SCORE: 0.10552670315936319

TEST MSG: Issue # 5008 : increased pitest of coding package
GENERATED MSG: Issue # 2080 : Fix typos in code

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 2c920b7 . . 9c54911 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1784 , 7 + 1784 , 7 @ @ <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . checks . coding . * < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 97 < / mutationThreshold > <nl> + < mutationThreshold > 98 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> index 75b1284 . . 6ab4a98 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> @ @ - 116 , 7 + 116 , 6 @ @ public class IllegalInstantiationCheck <nl> <nl> @ Override <nl> public void beginTree ( DetailAST rootAST ) { <nl> - super . beginTree ( rootAST ) ; <nl> pkgName = null ; <nl> imports . clear ( ) ; <nl> instantiations . clear ( ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> index edcb1a0 . . ab45bd2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> @ @ - 98 , 8 + 98 , 6 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> * / <nl> public static final String MSG _ KEY = " illegal . type " ; <nl> <nl> - / * * Abstract classes legal by default . * / <nl> - private static final String [ ] DEFAULT _ LEGAL _ ABSTRACT _ NAMES = { } ; <nl> / * * Types illegal by default . * / <nl> private static final String [ ] DEFAULT _ ILLEGAL _ TYPES = { <nl> " HashSet " , <nl> @ @ - 144 , 7 + 142 , 6 @ @ public final class IllegalTypeCheck extends AbstractCheck { <nl> / * * Creates new instance of the check . * / <nl> public IllegalTypeCheck ( ) { <nl> setIllegalClassNames ( DEFAULT _ ILLEGAL _ TYPES ) ; <nl> - setLegalAbstractClassNames ( DEFAULT _ LEGAL _ ABSTRACT _ NAMES ) ; <nl> setIgnoredMethodNames ( DEFAULT _ IGNORED _ METHOD _ NAMES ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java <nl> index a18cfb6 . . 6898432 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalTokenTextChec <nl> <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> + import java . util . regex . Pattern ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 30 , 6 + 31 , 7 @ @ import org . junit . Test ; <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . internal . utils . TestUtil ; <nl> import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> <nl> public class IllegalTokenTextCheckTest <nl> @ @ - 123 , 6 + 125 , 19 @ @ public class IllegalTokenTextCheckTest <nl> } <nl> <nl> @ Test <nl> + public void testOrderOfProperties ( ) throws Exception { <nl> + / / pure class must be used as configuration doesn ' t guarantee order of <nl> + / / attributes <nl> + final IllegalTokenTextCheck check = new IllegalTokenTextCheck ( ) ; <nl> + check . setFormat ( " test " ) ; <nl> + check . setIgnoreCase ( true ) ; <nl> + final Pattern actual = ( Pattern ) TestUtil . getClassDeclaredField ( <nl> + IllegalTokenTextCheck . class , " regexp " ) . get ( check ) ; <nl> + Assert . assertEquals ( " should match " , Pattern . CASE _ INSENSITIVE , actual . flags ( ) ) ; <nl> + Assert . assertEquals ( " should match " , " test " , actual . pattern ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testAcceptableTokensMakeSense ( ) { <nl> final int expectedTokenTypesTotalNumber = 169 ; <nl> Assert . assertEquals ( " Total number of TokenTypes has changed , acceptable tokens in " <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> index ee10c28 . . 59fa281 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> @ @ - 82 , 6 + 82 , 7 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { <nl> " com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . " <nl> + " InputIllegalType . AbstractClass " ) , <nl> " 16 : 13 : " + getCheckMessage ( MSG _ KEY , " java . util . TreeSet " ) , <nl> + " 25 : 36 : " + getCheckMessage ( MSG _ KEY , " java . util . TreeSet " ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputIllegalType . java " ) , expected ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java <nl> index 5ca5221 . . f91a49f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java <nl> @ @ - 56 , 6 + 56 , 7 @ @ public class NestedForDepthCheckTest extends AbstractModuleTestSupport { <nl> final String [ ] expected = { <nl> " 43 : 11 : " + getCheckMessage ( MSG _ KEY , 3 , 2 ) , <nl> " 44 : 13 : " + getCheckMessage ( MSG _ KEY , 4 , 2 ) , <nl> + " 47 : 13 : " + getCheckMessage ( MSG _ KEY , 4 , 2 ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputNestedForDepth . java " ) , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> index 07de217 . . 038eaf2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> @ @ - 95 , 6 + 95 , 8 @ @ public class UnnecessaryParenthesesCheckTest extends AbstractModuleTestSupport { <nl> " 81 : 11 : " + getCheckMessage ( MSG _ ASSIGN ) , <nl> " 81 : 16 : " + getCheckMessage ( MSG _ LITERAL , " 3 " ) , <nl> " 82 : 39 : " + getCheckMessage ( MSG _ ASSIGN ) , <nl> + " 93 : 11 : " + getCheckMessage ( MSG _ ASSIGN ) , <nl> + " 93 : 14 : " + getCheckMessage ( MSG _ STRING , " \ " 12345678901234567890123 \ " " ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputUnnecessaryParenthesesOperatorsAndCasts . java " ) , expected ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / TestUtil . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / TestUtil . java <nl> index 1c5d8cc . . 1a60a40 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / TestUtil . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / TestUtil . java <nl> @ @ - 72 , 6 + 72 , 29 @ @ public final class TestUtil { <nl> } <nl> <nl> / * * <nl> + * Retrieves the specified field by it ' s name in the class or it ' s direct super . <nl> + * <nl> + * @ param clss The class to retrieve the field for . <nl> + * @ param fieldName The name of the field to retrieve . <nl> + * @ return The class ' field . <nl> + * @ throws NoSuchFieldException if the requested field cannot be found in the class . <nl> + * / <nl> + public static Field getClassDeclaredField ( Class < ? > clss , String fieldName ) <nl> + throws NoSuchFieldException { <nl> + final Optional < Field > classField = Arrays . stream ( clss . getDeclaredFields ( ) ) <nl> + . filter ( field - > fieldName . equals ( field . getName ( ) ) ) . findFirst ( ) ; <nl> + final Field resultField ; <nl> + if ( classField . isPresent ( ) ) { <nl> + resultField = classField . get ( ) ; <nl> + } <nl> + else { <nl> + resultField = clss . getSuperclass ( ) . getDeclaredField ( fieldName ) ; <nl> + } <nl> + resultField . setAccessible ( true ) ; <nl> + return resultField ; <nl> + } <nl> + <nl> + / * * <nl> * Checks if stateful field is cleared during { @ link AbstractCheck # beginTree } in check . <nl> * <nl> * @ param check check object which field is to be verified <nl> @ @ - 91 , 16 + 114 , 7 @ @ public final class TestUtil { <nl> check . beginTree ( astToVisit ) ; <nl> check . visitToken ( astToVisit ) ; <nl> check . beginTree ( null ) ; <nl> - final Optional < Field > classField = Arrays . stream ( check . getClass ( ) . getDeclaredFields ( ) ) <nl> - . filter ( field - > fieldName . equals ( field . getName ( ) ) ) . findFirst ( ) ; <nl> - final Field resultField ; <nl> - if ( classField . isPresent ( ) ) { <nl> - resultField = classField . get ( ) ; <nl> - } <nl> - else { <nl> - resultField = check . getClass ( ) . getSuperclass ( ) . getDeclaredField ( fieldName ) ; <nl> - } <nl> - resultField . setAccessible ( true ) ; <nl> + final Field resultField = getClassDeclaredField ( check . getClass ( ) , fieldName ) ; <nl> return isClear . test ( resultField . get ( check ) ) ; <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalType . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalType . java <nl> index dfce5fd . . 2efc892 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalType . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalType . java <nl> @ @ - 21 , 4 + 21 , 6 @ @ public class InputIllegalType { <nl> <nl> InputIllegalType ( Integer i ) { } <nl> private void table2 ( Integer i ) { } <nl> + <nl> + private void getInitialContext ( java . util . TreeSet v ) { } / / ignore method by default <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nestedfordepth / InputNestedForDepth . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nestedfordepth / InputNestedForDepth . java <nl> index dfa0eb6 . . cfa8356 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nestedfordepth / InputNestedForDepth . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nestedfordepth / InputNestedForDepth . java <nl> @ @ - 44 , 6 + 44 , 9 @ @ public class InputNestedForDepth { <nl> for ( i5 = 0 ; i5 < 10 ; i5 + + ) { <nl> i + = 1 ; <nl> } <nl> + for ( int i5a = 0 ; i5a < 10 ; i5a + + ) { <nl> + i + = 1 ; <nl> + } <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineSingleLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineSingleLine . java <nl> index 185b7b7 . . 4a20cb7 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineSingleLine . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineSingleLine . java <nl> @ @ - 238 , 4 + 238 , 11 @ @ public class InputOneStatementPerLineSingleLine { <nl> * / <nl> for ( ; ; ) { one = 5 ; } <nl> } <nl> + <nl> + public void foo6 ( ) { <nl> + bar ( ( ) - > { <nl> + return ; } , ( ) - > { return ; } ) ; <nl> + } <nl> + <nl> + void bar ( Runnable r1 , Runnable r2 ) { } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / parameterassignment / InputParameterAssignmentWithUnchecked . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / parameterassignment / InputParameterAssignmentWithUnchecked . java <nl> index 60f8eed . . fbfc6e7 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / parameterassignment / InputParameterAssignmentWithUnchecked . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / parameterassignment / InputParameterAssignmentWithUnchecked . java <nl> @ @ - 19 , 4 + 19 , 17 @ @ public class InputParameterAssignmentWithUnchecked { <nl> void foo3 ( String field , int field1 ) { <nl> this . field = ( field1 + = field . length ( ) ) ; <nl> } <nl> + <nl> + void foo4 ( ) { <nl> + String hidden = " " ; <nl> + new NestedClass ( ) { <nl> + public void test ( String hidden ) { <nl> + } <nl> + } ; <nl> + hidden + = " test " ; <nl> + } <nl> + <nl> + public static abstract class NestedClass { <nl> + public abstract void test ( String hidden ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesOperatorsAndCasts . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesOperatorsAndCasts . java <nl> index 777f4b1 . . 33246c1 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesOperatorsAndCasts . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesOperatorsAndCasts . java <nl> @ @ - 87 , 6 + 87 , 14 @ @ public class InputUnnecessaryParenthesesOperatorsAndCasts { <nl> System . identityHashCode ( " arg = " + arg ) ; <nl> } <nl> <nl> + private int f7 ( ) { <nl> + String f ; <nl> + <nl> + f = ( " 12345678901234567890123 " ) ; <nl> + <nl> + return 0 ; <nl> + } <nl> + <nl> static class TypeParameterized < T > { } <nl> static class TypeA extends TypeParameterized < String > { } <nl> static class TypeB extends TypeA { }
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index ae4ec79 . . 089ed64 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 346 , 6 + 346 , 7 @ @ <nl> < module name = " SingleLineJavadoc " / > <nl> < module name = " JavadocTagContinuationIndentation " / > <nl> < module name = " JavadocParagraph " / > <nl> + < module name = " WriteTag " / > <nl> <nl> < ! - - <nl> All Checks bellow are our futute plan to enforce over our code . <nl> @ @ - 356 , 9 + 357 , 6 @ @ <nl> < module name = " SummaryJavadoc " > <nl> < property name = " severity " value = " ignore " / > <nl> < / module > <nl> - < module name = " WriteTag " > <nl> - < property name = " severity " value = " ignore " / > <nl> - < / module > <nl> <nl> < module name = " MissingCtor " > <nl> < ! - - <nl> diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 2c7cee0 . . cd8d97c 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 38 , 6 + 38 , 7 @ @ <nl> < suppress checks = " MethodCount " files = " [ \ \ / ] IndentationCheckTest . java $ " / > <nl> < suppress checks = " MethodCount " files = " [ \ \ / ] MainTest . java $ " / > <nl> < suppress checks = " EqualsAvoidNull " files = " [ \ \ / ] Int . * FilterTest . java $ " / > <nl> + < suppress checks = " WriteTag " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > <nl> <nl> < ! - - suppressions to remove over time - - > <nl> < suppress checks = " FinalLocalVariable " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java <nl> index b6055a3 . . df92965 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java <nl> @ @ - 248 , 6 + 248 , 9 @ @ class FileDrop { <nl> void filesDropped ( File . . . files ) ; <nl> } <nl> <nl> + / * * <nl> + * Listener and handler for file drop target events . <nl> + * / <nl> private class FileDropTargetListener extends DropTargetAdapter { <nl> / * * Target component to drop to . * / <nl> private final Component component ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java <nl> index 8e76bdb . . 224933c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java <nl> @ @ - 259 , 6 + 259 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Filter for Java files . <nl> + * / <nl> private static class JavaFileFilter extends FileFilter { <nl> @ Override <nl> public boolean accept ( File file ) { <nl> @ @ - 274 , 6 + 277 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Handler for file selection action events . <nl> + * / <nl> private class FileSelectionAction extends AbstractAction { <nl> / * * <nl> * Serial ID . <nl> @ @ - 300 , 6 + 306 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Handler for reload action events . <nl> + * / <nl> private class ReloadAction extends AbstractAction { <nl> / * * <nl> * Serial UID . <nl> @ @ - 320 , 6 + 329 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Listener and handler for file dropped events . <nl> + * / <nl> private class FileDropListener implements FileDrop . Listener { <nl> / * * Scroll pane . * / <nl> private final JScrollPane scrollPane ;

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 2c920b7 . . 9c54911 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1784 , 7 + 1784 , 7 @ @ 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . checks . coding . * < / param > 
 < / targetTests > 
 - < mutationThreshold > 97 < / mutationThreshold > 
 + < mutationThreshold > 98 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 index 75b1284 . . 6ab4a98 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 @ @ - 116 , 7 + 116 , 6 @ @ public class IllegalInstantiationCheck 
 
 @ Override 
 public void beginTree ( DetailAST rootAST ) { 
 - super . beginTree ( rootAST ) ; 
 pkgName = null ; 
 imports . clear ( ) ; 
 instantiations . clear ( ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 index edcb1a0 . . ab45bd2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 @ @ - 98 , 8 + 98 , 6 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 * / 
 public static final String MSG _ KEY = " illegal . type " ; 
 
 - / * * Abstract classes legal by default . * / 
 - private static final String [ ] DEFAULT _ LEGAL _ ABSTRACT _ NAMES = { } ; 
 / * * Types illegal by default . * / 
 private static final String [ ] DEFAULT _ ILLEGAL _ TYPES = { 
 " HashSet " , 
 @ @ - 144 , 7 + 142 , 6 @ @ public final class IllegalTypeCheck extends AbstractCheck { 
 / * * Creates new instance of the check . * / 
 public IllegalTypeCheck ( ) { 
 setIllegalClassNames ( DEFAULT _ ILLEGAL _ TYPES ) ; 
 - setLegalAbstractClassNames ( DEFAULT _ LEGAL _ ABSTRACT _ NAMES ) ; 
 setIgnoredMethodNames ( DEFAULT _ IGNORED _ METHOD _ NAMES ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java 
 index a18cfb6 . . 6898432 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalTokenTextChec 
 
 import java . util . Arrays ; 
 import java . util . List ; 
 + import java . util . regex . Pattern ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 30 , 6 + 31 , 7 @ @ import org . junit . Test ; 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . internal . utils . TestUtil ; 
 import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 
 public class IllegalTokenTextCheckTest 
 @ @ - 123 , 6 + 125 , 19 @ @ public class IllegalTokenTextCheckTest 
 } 
 
 @ Test 
 + public void testOrderOfProperties ( ) throws Exception { 
 + / / pure class must be used as configuration doesn ' t guarantee order of 
 + / / attributes 
 + final IllegalTokenTextCheck check = new IllegalTokenTextCheck ( ) ; 
 + check . setFormat ( " test " ) ; 
 + check . setIgnoreCase ( true ) ; 
 + final Pattern actual = ( Pattern ) TestUtil . getClassDeclaredField ( 
 + IllegalTokenTextCheck . class , " regexp " ) . get ( check ) ; 
 + Assert . assertEquals ( " should match " , Pattern . CASE _ INSENSITIVE , actual . flags ( ) ) ; 
 + Assert . assertEquals ( " should match " , " test " , actual . pattern ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testAcceptableTokensMakeSense ( ) { 
 final int expectedTokenTypesTotalNumber = 169 ; 
 Assert . assertEquals ( " Total number of TokenTypes has changed , acceptable tokens in " 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 index ee10c28 . . 59fa281 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 @ @ - 82 , 6 + 82 , 7 @ @ public class IllegalTypeCheckTest extends AbstractModuleTestSupport { 
 " com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . " 
 + " InputIllegalType . AbstractClass " ) , 
 " 16 : 13 : " + getCheckMessage ( MSG _ KEY , " java . util . TreeSet " ) , 
 + " 25 : 36 : " + getCheckMessage ( MSG _ KEY , " java . util . TreeSet " ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputIllegalType . java " ) , expected ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java 
 index 5ca5221 . . f91a49f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java 
 @ @ - 56 , 6 + 56 , 7 @ @ public class NestedForDepthCheckTest extends AbstractModuleTestSupport { 
 final String [ ] expected = { 
 " 43 : 11 : " + getCheckMessage ( MSG _ KEY , 3 , 2 ) , 
 " 44 : 13 : " + getCheckMessage ( MSG _ KEY , 4 , 2 ) , 
 + " 47 : 13 : " + getCheckMessage ( MSG _ KEY , 4 , 2 ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputNestedForDepth . java " ) , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 index 07de217 . . 038eaf2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 @ @ - 95 , 6 + 95 , 8 @ @ public class UnnecessaryParenthesesCheckTest extends AbstractModuleTestSupport { 
 " 81 : 11 : " + getCheckMessage ( MSG _ ASSIGN ) , 
 " 81 : 16 : " + getCheckMessage ( MSG _ LITERAL , " 3 " ) , 
 " 82 : 39 : " + getCheckMessage ( MSG _ ASSIGN ) , 
 + " 93 : 11 : " + getCheckMessage ( MSG _ ASSIGN ) , 
 + " 93 : 14 : " + getCheckMessage ( MSG _ STRING , " \ " 12345678901234567890123 \ " " ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputUnnecessaryParenthesesOperatorsAndCasts . java " ) , expected ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / TestUtil . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / TestUtil . java 
 index 1c5d8cc . . 1a60a40 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / TestUtil . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / utils / TestUtil . java 
 @ @ - 72 , 6 + 72 , 29 @ @ public final class TestUtil { 
 } 
 
 / * * 
 + * Retrieves the specified field by it ' s name in the class or it ' s direct super . 
 + * 
 + * @ param clss The class to retrieve the field for . 
 + * @ param fieldName The name of the field to retrieve . 
 + * @ return The class ' field . 
 + * @ throws NoSuchFieldException if the requested field cannot be found in the class . 
 + * / 
 + public static Field getClassDeclaredField ( Class < ? > clss , String fieldName ) 
 + throws NoSuchFieldException { 
 + final Optional < Field > classField = Arrays . stream ( clss . getDeclaredFields ( ) ) 
 + . filter ( field - > fieldName . equals ( field . getName ( ) ) ) . findFirst ( ) ; 
 + final Field resultField ; 
 + if ( classField . isPresent ( ) ) { 
 + resultField = classField . get ( ) ; 
 + } 
 + else { 
 + resultField = clss . getSuperclass ( ) . getDeclaredField ( fieldName ) ; 
 + } 
 + resultField . setAccessible ( true ) ; 
 + return resultField ; 
 + } 
 + 
 + / * * 
 * Checks if stateful field is cleared during { @ link AbstractCheck # beginTree } in check . 
 * 
 * @ param check check object which field is to be verified 
 @ @ - 91 , 16 + 114 , 7 @ @ public final class TestUtil { 
 check . beginTree ( astToVisit ) ; 
 check . visitToken ( astToVisit ) ; 
 check . beginTree ( null ) ; 
 - final Optional < Field > classField = Arrays . stream ( check . getClass ( ) . getDeclaredFields ( ) ) 
 - . filter ( field - > fieldName . equals ( field . getName ( ) ) ) . findFirst ( ) ; 
 - final Field resultField ; 
 - if ( classField . isPresent ( ) ) { 
 - resultField = classField . get ( ) ; 
 - } 
 - else { 
 - resultField = check . getClass ( ) . getSuperclass ( ) . getDeclaredField ( fieldName ) ; 
 - } 
 - resultField . setAccessible ( true ) ; 
 + final Field resultField = getClassDeclaredField ( check . getClass ( ) , fieldName ) ; 
 return isClear . test ( resultField . get ( check ) ) ; 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalType . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalType . java 
 index dfce5fd . . 2efc892 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalType . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalType . java 
 @ @ - 21 , 4 + 21 , 6 @ @ public class InputIllegalType { 
 
 InputIllegalType ( Integer i ) { } 
 private void table2 ( Integer i ) { } 
 + 
 + private void getInitialContext ( java . util . TreeSet v ) { } / / ignore method by default 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nestedfordepth / InputNestedForDepth . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nestedfordepth / InputNestedForDepth . java 
 index dfa0eb6 . . cfa8356 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nestedfordepth / InputNestedForDepth . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nestedfordepth / InputNestedForDepth . java 
 @ @ - 44 , 6 + 44 , 9 @ @ public class InputNestedForDepth { 
 for ( i5 = 0 ; i5 < 10 ; i5 + + ) { 
 i + = 1 ; 
 } 
 + for ( int i5a = 0 ; i5a < 10 ; i5a + + ) { 
 + i + = 1 ; 
 + } 
 } 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineSingleLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineSingleLine . java 
 index 185b7b7 . . 4a20cb7 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineSingleLine . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLineSingleLine . java 
 @ @ - 238 , 4 + 238 , 11 @ @ public class InputOneStatementPerLineSingleLine { 
 * / 
 for ( ; ; ) { one = 5 ; } 
 } 
 + 
 + public void foo6 ( ) { 
 + bar ( ( ) - > { 
 + return ; } , ( ) - > { return ; } ) ; 
 + } 
 + 
 + void bar ( Runnable r1 , Runnable r2 ) { } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / parameterassignment / InputParameterAssignmentWithUnchecked . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / parameterassignment / InputParameterAssignmentWithUnchecked . java 
 index 60f8eed . . fbfc6e7 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / parameterassignment / InputParameterAssignmentWithUnchecked . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / parameterassignment / InputParameterAssignmentWithUnchecked . java 
 @ @ - 19 , 4 + 19 , 17 @ @ public class InputParameterAssignmentWithUnchecked { 
 void foo3 ( String field , int field1 ) { 
 this . field = ( field1 + = field . length ( ) ) ; 
 } 
 + 
 + void foo4 ( ) { 
 + String hidden = " " ; 
 + new NestedClass ( ) { 
 + public void test ( String hidden ) { 
 + } 
 + } ; 
 + hidden + = " test " ; 
 + } 
 + 
 + public static abstract class NestedClass { 
 + public abstract void test ( String hidden ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesOperatorsAndCasts . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesOperatorsAndCasts . java 
 index 777f4b1 . . 33246c1 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesOperatorsAndCasts . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / unnecessaryparentheses / InputUnnecessaryParenthesesOperatorsAndCasts . java 
 @ @ - 87 , 6 + 87 , 14 @ @ public class InputUnnecessaryParenthesesOperatorsAndCasts { 
 System . identityHashCode ( " arg = " + arg ) ; 
 } 
 
 + private int f7 ( ) { 
 + String f ; 
 + 
 + f = ( " 12345678901234567890123 " ) ; 
 + 
 + return 0 ; 
 + } 
 + 
 static class TypeParameterized < T > { } 
 static class TypeA extends TypeParameterized < String > { } 
 static class TypeB extends TypeA { }

NEAREST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index ae4ec79 . . 089ed64 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 346 , 6 + 346 , 7 @ @ 
 < module name = " SingleLineJavadoc " / > 
 < module name = " JavadocTagContinuationIndentation " / > 
 < module name = " JavadocParagraph " / > 
 + < module name = " WriteTag " / > 
 
 < ! - - 
 All Checks bellow are our futute plan to enforce over our code . 
 @ @ - 356 , 9 + 357 , 6 @ @ 
 < module name = " SummaryJavadoc " > 
 < property name = " severity " value = " ignore " / > 
 < / module > 
 - < module name = " WriteTag " > 
 - < property name = " severity " value = " ignore " / > 
 - < / module > 
 
 < module name = " MissingCtor " > 
 < ! - - 
 diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 2c7cee0 . . cd8d97c 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 38 , 6 + 38 , 7 @ @ 
 < suppress checks = " MethodCount " files = " [ \ \ / ] IndentationCheckTest . java $ " / > 
 < suppress checks = " MethodCount " files = " [ \ \ / ] MainTest . java $ " / > 
 < suppress checks = " EqualsAvoidNull " files = " [ \ \ / ] Int . * FilterTest . java $ " / > 
 + < suppress checks = " WriteTag " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > 
 
 < ! - - suppressions to remove over time - - > 
 < suppress checks = " FinalLocalVariable " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java 
 index b6055a3 . . df92965 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java 
 @ @ - 248 , 6 + 248 , 9 @ @ class FileDrop { 
 void filesDropped ( File . . . files ) ; 
 } 
 
 + / * * 
 + * Listener and handler for file drop target events . 
 + * / 
 private class FileDropTargetListener extends DropTargetAdapter { 
 / * * Target component to drop to . * / 
 private final Component component ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java 
 index 8e76bdb . . 224933c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / ParseTreeInfoPanel . java 
 @ @ - 259 , 6 + 259 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { 
 } 
 } 
 
 + / * * 
 + * Filter for Java files . 
 + * / 
 private static class JavaFileFilter extends FileFilter { 
 @ Override 
 public boolean accept ( File file ) { 
 @ @ - 274 , 6 + 277 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { 
 } 
 } 
 
 + / * * 
 + * Handler for file selection action events . 
 + * / 
 private class FileSelectionAction extends AbstractAction { 
 / * * 
 * Serial ID . 
 @ @ - 300 , 6 + 306 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { 
 } 
 } 
 
 + / * * 
 + * Handler for reload action events . 
 + * / 
 private class ReloadAction extends AbstractAction { 
 / * * 
 * Serial UID . 
 @ @ - 320 , 6 + 329 , 9 @ @ public class ParseTreeInfoPanel extends JPanel { 
 } 
 } 
 
 + / * * 
 + * Listener and handler for file dropped events . 
 + * / 
 private class FileDropListener implements FileDrop . Listener { 
 / * * Scroll pane . * / 
 private final JScrollPane scrollPane ;
