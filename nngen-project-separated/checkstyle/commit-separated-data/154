BLEU SCORE: 0.031157290929555895

TEST MSG: Issue # 6028 : TreeWalker should be creating absolute paths for events
GENERATED MSG: # 284 fixed . Default modifier has been added to modifier list .

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index 4bb6154 . . 0ac7861 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 191 , 7 + 191 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> } <nl> else { <nl> final SortedSet < LocalizedMessage > filteredMessages = <nl> - getFilteredMessages ( file . getPath ( ) , contents , rootAST ) ; <nl> + getFilteredMessages ( file . getAbsolutePath ( ) , contents , rootAST ) ; <nl> addMessages ( filteredMessages ) ; <nl> } <nl> messages . clear ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index e0204ae . . 41905cf 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 48 , 6 + 48 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . api . Context ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . indentation . CommentsIndentationCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocPackageCheck ; <nl> @ @ - 516 , 6 + 517 , 27 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> " InputTreeWalkerSuppressionXpathFilter . xml " ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testTreeWalkerFilterAbsolutePath ( ) throws Exception { <nl> + final DefaultConfiguration filterConfig = createModuleConfig ( SuppressionXpathFilter . class ) ; <nl> + filterConfig . addAttribute ( " file " , <nl> + getPath ( " InputTreeWalkerSuppressionXpathFilterAbsolute . xml " ) ) ; <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( LeftCurlyCheck . class ) ; <nl> + <nl> + final DefaultConfiguration treeWalkerConfig = createModuleConfig ( TreeWalker . class ) ; <nl> + treeWalkerConfig . addChild ( filterConfig ) ; <nl> + treeWalkerConfig . addChild ( checkConfig ) ; <nl> + <nl> + final DefaultConfiguration checkerConfig = createRootConfig ( treeWalkerConfig ) ; <nl> + <nl> + / / test is only valid when relative paths are given <nl> + final String filePath = " src / test / resources / " + getPackageLocation ( ) <nl> + + " / InputTreeWalkerSuppressionXpathFilterAbsolute . java " ; <nl> + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkerConfig , filePath , expected ) ; <nl> + } <nl> + <nl> private static class BadJavaDocCheck extends AbstractCheck { <nl> <nl> @ Override <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / treewalker / InputTreeWalkerSuppressionXpathFilterAbsolute . java b / src / test / resources / com / puppycrawl / tools / checkstyle / treewalker / InputTreeWalkerSuppressionXpathFilterAbsolute . java <nl> new file mode 100644 <nl> index 0000000 . . 6f23f2e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / treewalker / InputTreeWalkerSuppressionXpathFilterAbsolute . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package com . puppycrawl . tools . checkstyle . treewalker ; <nl> + <nl> + public class InputTreeWalkerSuppressionXpathFilterAbsolute { <nl> + public void test ( ) <nl> + { <nl> + int a = 1 ; <nl> + int b = 2 ; <nl> + int c = a + b ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / treewalker / InputTreeWalkerSuppressionXpathFilterAbsolute . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / treewalker / InputTreeWalkerSuppressionXpathFilterAbsolute . xml <nl> new file mode 100644 <nl> index 0000000 . . cdb6bc5 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / treewalker / InputTreeWalkerSuppressionXpathFilterAbsolute . xml <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> + < ! DOCTYPE suppressions PUBLIC <nl> + " - / / Checkstyle / / DTD SuppressionXpathFilter Experimental Configuration 1 . 2 / / EN " <nl> + " https : / / checkstyle . org / dtds / suppressions _ 1 _ 2 _ xpath _ experimental . dtd " > <nl> + < suppressions > <nl> + < suppress - xpath files = " [ \ \ / ] src " checks = " LeftCurlyCheck " <nl> + query = " / CLASS _ DEF [ @ text = ' InputTreeWalkerSuppressionXpathFilterAbsolute ' ] / <nl> + OBJBLOCK / METHOD _ DEF [ @ text = ' test ' ] / SLIST " / > <nl> + < / suppressions >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java <nl> index 0732c13 . . 85d8dd3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java <nl> @ @ - 72 , 7 + 72 , 7 @ @ public class MemberNameCheck <nl> final boolean isStatic = ( modifiersAST ! = null ) <nl> & & modifiersAST . branchContains ( TokenTypes . LITERAL _ STATIC ) ; <nl> <nl> - return ( ! isStatic & & ! ScopeUtils . inInterfaceOrAnnotationBlock ( aAST ) <nl> + return ( ! isStatic & & ! ScopeUtils . inAnnotationBlock ( aAST ) <nl> & & ! ScopeUtils . isLocalVariableDef ( aAST ) ) <nl> & & shouldCheckInScope ( modifiersAST ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java <nl> index 53d3fc1 . . 68a9122 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java <nl> @ @ - 169 , 5 + 169 , 57 @ @ public class MemberNameCheckTest <nl> expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void memberNameExtended ( ) throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " ) ; <nl> + final String [ ] expected = { <nl> + " 8 : 16 : Name ' mPublic ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 9 : 19 : Name ' mProtected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 10 : 9 : Name ' mPackage ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 11 : 17 : Name ' mPrivate ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 13 : 16 : Name ' _ public ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 14 : 19 : Name ' _ protected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 15 : 9 : Name ' _ package ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 16 : 17 : Name ' _ private ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 19 : 20 : Name ' mPublic ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 20 : 23 : Name ' mProtected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 21 : 13 : Name ' mPackage ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 22 : 21 : Name ' mPrivate ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 24 : 20 : Name ' _ public ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 25 : 23 : Name ' _ protected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 26 : 13 : Name ' _ package ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 27 : 21 : Name ' _ private ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 31 : 20 : Name ' mPublic ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 32 : 23 : Name ' mProtected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 33 : 13 : Name ' mPackage ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 34 : 21 : Name ' mPrivate ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 36 : 20 : Name ' _ public ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 37 : 23 : Name ' _ protected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 38 : 13 : Name ' _ package ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 39 : 21 : Name ' _ private ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 45 : 16 : Name ' mPublic ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 46 : 9 : Name ' mProtected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 47 : 9 : Name ' mPackage ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 48 : 9 : Name ' mPrivate ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 50 : 16 : Name ' _ public ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 51 : 9 : Name ' _ protected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 52 : 9 : Name ' _ package ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 53 : 9 : Name ' _ private ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 63 : 16 : Name ' mPublic ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 64 : 9 : Name ' mProtected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 65 : 9 : Name ' mPackage ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 66 : 9 : Name ' mPrivate ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 68 : 16 : Name ' _ public ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 69 : 9 : Name ' _ protected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 70 : 9 : Name ' _ package ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + " 71 : 9 : Name ' _ private ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , <nl> + } ; <nl> + verify ( checkConfig , <nl> + getPath ( " naming " + File . separator + " InputMemberNameExtended . java " ) , <nl> + expected ) ; <nl> + } <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputMemberNameExtended . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputMemberNameExtended . java <nl> new file mode 100644 <nl> index 0000000 . . 6989e4a <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputMemberNameExtended . java <nl> @ @ - 0 , 0 + 1 , 84 @ @ <nl> + package com . puppycrawl . tools . checkstyle . naming ; <nl> + <nl> + import test . Direction ; <nl> + import test . InputMemberName . Inner ; <nl> + <nl> + public class InputMemberName <nl> + { <nl> + public int mPublic ; <nl> + protected int mProtected ; <nl> + int mPackage ; <nl> + private int mPrivate ; <nl> + <nl> + public int _ public ; <nl> + protected int _ protected ; <nl> + int _ package ; <nl> + private int _ private ; <nl> + <nl> + class Inner { <nl> + public int mPublic ; <nl> + protected int mProtected ; <nl> + int mPackage ; <nl> + private int mPrivate ; <nl> + <nl> + public int _ public ; <nl> + protected int _ protected ; <nl> + int _ package ; <nl> + private int _ private ; <nl> + } <nl> + <nl> + Inner anon = new Inner ( ) { <nl> + public int mPublic ; <nl> + protected int mProtected ; <nl> + int mPackage ; <nl> + private int mPrivate ; <nl> + <nl> + public int _ public ; <nl> + protected int _ protected ; <nl> + int _ package ; <nl> + private int _ private ; <nl> + } ; <nl> + } <nl> + <nl> + interface In <nl> + { <nl> + public int mPublic = 0 ; <nl> + int mProtected = 0 ; <nl> + int mPackage = 0 ; <nl> + int mPrivate = 0 ; <nl> + <nl> + public int _ public = 0 ; <nl> + int _ protected = 0 ; <nl> + int _ package = 0 ; <nl> + int _ private = 0 ; <nl> + } <nl> + <nl> + enum Direction { <nl> + <nl> + NORTH ( 1 ) , <nl> + SOUTH ( - 1 ) , <nl> + EAST ( - 2 ) , <nl> + WEST ( 2 ) ; <nl> + <nl> + public int mPublic = 0 ; <nl> + int mProtected = 0 ; <nl> + int mPackage = 0 ; <nl> + int mPrivate = 0 ; <nl> + <nl> + public int _ public = 0 ; <nl> + int _ protected = 0 ; <nl> + int _ package = 0 ; <nl> + int _ private = 0 ; <nl> + <nl> + Direction ( int code ) { <nl> + this . code = code ; <nl> + } <nl> + protected int code ; <nl> + public int getCode ( ) { <nl> + return this . code ; <nl> + } <nl> + static Direction getOppositeDirection ( Direction d ) { <nl> + return null ; <nl> + } <nl> + } <nl> +

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index 4bb6154 . . 0ac7861 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 191 , 7 + 191 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 } 
 else { 
 final SortedSet < LocalizedMessage > filteredMessages = 
 - getFilteredMessages ( file . getPath ( ) , contents , rootAST ) ; 
 + getFilteredMessages ( file . getAbsolutePath ( ) , contents , rootAST ) ; 
 addMessages ( filteredMessages ) ; 
 } 
 messages . clear ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index e0204ae . . 41905cf 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 48 , 6 + 48 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . api . Context ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . indentation . CommentsIndentationCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocPackageCheck ; 
 @ @ - 516 , 6 + 517 , 27 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 " InputTreeWalkerSuppressionXpathFilter . xml " ) ) ; 
 } 
 
 + @ Test 
 + public void testTreeWalkerFilterAbsolutePath ( ) throws Exception { 
 + final DefaultConfiguration filterConfig = createModuleConfig ( SuppressionXpathFilter . class ) ; 
 + filterConfig . addAttribute ( " file " , 
 + getPath ( " InputTreeWalkerSuppressionXpathFilterAbsolute . xml " ) ) ; 
 + final DefaultConfiguration checkConfig = createModuleConfig ( LeftCurlyCheck . class ) ; 
 + 
 + final DefaultConfiguration treeWalkerConfig = createModuleConfig ( TreeWalker . class ) ; 
 + treeWalkerConfig . addChild ( filterConfig ) ; 
 + treeWalkerConfig . addChild ( checkConfig ) ; 
 + 
 + final DefaultConfiguration checkerConfig = createRootConfig ( treeWalkerConfig ) ; 
 + 
 + / / test is only valid when relative paths are given 
 + final String filePath = " src / test / resources / " + getPackageLocation ( ) 
 + + " / InputTreeWalkerSuppressionXpathFilterAbsolute . java " ; 
 + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkerConfig , filePath , expected ) ; 
 + } 
 + 
 private static class BadJavaDocCheck extends AbstractCheck { 
 
 @ Override 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / treewalker / InputTreeWalkerSuppressionXpathFilterAbsolute . java b / src / test / resources / com / puppycrawl / tools / checkstyle / treewalker / InputTreeWalkerSuppressionXpathFilterAbsolute . java 
 new file mode 100644 
 index 0000000 . . 6f23f2e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / treewalker / InputTreeWalkerSuppressionXpathFilterAbsolute . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package com . puppycrawl . tools . checkstyle . treewalker ; 
 + 
 + public class InputTreeWalkerSuppressionXpathFilterAbsolute { 
 + public void test ( ) 
 + { 
 + int a = 1 ; 
 + int b = 2 ; 
 + int c = a + b ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / treewalker / InputTreeWalkerSuppressionXpathFilterAbsolute . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / treewalker / InputTreeWalkerSuppressionXpathFilterAbsolute . xml 
 new file mode 100644 
 index 0000000 . . cdb6bc5 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / treewalker / InputTreeWalkerSuppressionXpathFilterAbsolute . xml 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 + < ! DOCTYPE suppressions PUBLIC 
 + " - / / Checkstyle / / DTD SuppressionXpathFilter Experimental Configuration 1 . 2 / / EN " 
 + " https : / / checkstyle . org / dtds / suppressions _ 1 _ 2 _ xpath _ experimental . dtd " > 
 + < suppressions > 
 + < suppress - xpath files = " [ \ \ / ] src " checks = " LeftCurlyCheck " 
 + query = " / CLASS _ DEF [ @ text = ' InputTreeWalkerSuppressionXpathFilterAbsolute ' ] / 
 + OBJBLOCK / METHOD _ DEF [ @ text = ' test ' ] / SLIST " / > 
 + < / suppressions >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java 
 index 0732c13 . . 85d8dd3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheck . java 
 @ @ - 72 , 7 + 72 , 7 @ @ public class MemberNameCheck 
 final boolean isStatic = ( modifiersAST ! = null ) 
 & & modifiersAST . branchContains ( TokenTypes . LITERAL _ STATIC ) ; 
 
 - return ( ! isStatic & & ! ScopeUtils . inInterfaceOrAnnotationBlock ( aAST ) 
 + return ( ! isStatic & & ! ScopeUtils . inAnnotationBlock ( aAST ) 
 & & ! ScopeUtils . isLocalVariableDef ( aAST ) ) 
 & & shouldCheckInScope ( modifiersAST ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java 
 index 53d3fc1 . . 68a9122 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / MemberNameCheckTest . java 
 @ @ - 169 , 5 + 169 , 57 @ @ public class MemberNameCheckTest 
 expected ) ; 
 } 
 
 + @ Test 
 + public void memberNameExtended ( ) throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , " ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ " ) ; 
 + final String [ ] expected = { 
 + " 8 : 16 : Name ' mPublic ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 9 : 19 : Name ' mProtected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 10 : 9 : Name ' mPackage ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 11 : 17 : Name ' mPrivate ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 13 : 16 : Name ' _ public ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 14 : 19 : Name ' _ protected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 15 : 9 : Name ' _ package ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 16 : 17 : Name ' _ private ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 19 : 20 : Name ' mPublic ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 20 : 23 : Name ' mProtected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 21 : 13 : Name ' mPackage ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 22 : 21 : Name ' mPrivate ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 24 : 20 : Name ' _ public ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 25 : 23 : Name ' _ protected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 26 : 13 : Name ' _ package ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 27 : 21 : Name ' _ private ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 31 : 20 : Name ' mPublic ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 32 : 23 : Name ' mProtected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 33 : 13 : Name ' mPackage ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 34 : 21 : Name ' mPrivate ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 36 : 20 : Name ' _ public ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 37 : 23 : Name ' _ protected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 38 : 13 : Name ' _ package ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 39 : 21 : Name ' _ private ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 45 : 16 : Name ' mPublic ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 46 : 9 : Name ' mProtected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 47 : 9 : Name ' mPackage ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 48 : 9 : Name ' mPrivate ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 50 : 16 : Name ' _ public ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 51 : 9 : Name ' _ protected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 52 : 9 : Name ' _ package ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 53 : 9 : Name ' _ private ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 63 : 16 : Name ' mPublic ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 64 : 9 : Name ' mProtected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 65 : 9 : Name ' mPackage ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 66 : 9 : Name ' mPrivate ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 68 : 16 : Name ' _ public ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 69 : 9 : Name ' _ protected ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 70 : 9 : Name ' _ package ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + " 71 : 9 : Name ' _ private ' must match pattern ' ^ [ a - z ] [ a - z0 - 9 ] [ a - zA - Z0 - 9 ] * $ ' . " , 
 + } ; 
 + verify ( checkConfig , 
 + getPath ( " naming " + File . separator + " InputMemberNameExtended . java " ) , 
 + expected ) ; 
 + } 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputMemberNameExtended . java b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputMemberNameExtended . java 
 new file mode 100644 
 index 0000000 . . 6989e4a 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / naming / InputMemberNameExtended . java 
 @ @ - 0 , 0 + 1 , 84 @ @ 
 + package com . puppycrawl . tools . checkstyle . naming ; 
 + 
 + import test . Direction ; 
 + import test . InputMemberName . Inner ; 
 + 
 + public class InputMemberName 
 + { 
 + public int mPublic ; 
 + protected int mProtected ; 
 + int mPackage ; 
 + private int mPrivate ; 
 + 
 + public int _ public ; 
 + protected int _ protected ; 
 + int _ package ; 
 + private int _ private ; 
 + 
 + class Inner { 
 + public int mPublic ; 
 + protected int mProtected ; 
 + int mPackage ; 
 + private int mPrivate ; 
 + 
 + public int _ public ; 
 + protected int _ protected ; 
 + int _ package ; 
 + private int _ private ; 
 + } 
 + 
 + Inner anon = new Inner ( ) { 
 + public int mPublic ; 
 + protected int mProtected ; 
 + int mPackage ; 
 + private int mPrivate ; 
 + 
 + public int _ public ; 
 + protected int _ protected ; 
 + int _ package ; 
 + private int _ private ; 
 + } ; 
 + } 
 + 
 + interface In 
 + { 
 + public int mPublic = 0 ; 
 + int mProtected = 0 ; 
 + int mPackage = 0 ; 
 + int mPrivate = 0 ; 
 + 
 + public int _ public = 0 ; 
 + int _ protected = 0 ; 
 + int _ package = 0 ; 
 + int _ private = 0 ; 
 + } 
 + 
 + enum Direction { 
 + 
 + NORTH ( 1 ) , 
 + SOUTH ( - 1 ) , 
 + EAST ( - 2 ) , 
 + WEST ( 2 ) ; 
 + 
 + public int mPublic = 0 ; 
 + int mProtected = 0 ; 
 + int mPackage = 0 ; 
 + int mPrivate = 0 ; 
 + 
 + public int _ public = 0 ; 
 + int _ protected = 0 ; 
 + int _ package = 0 ; 
 + int _ private = 0 ; 
 + 
 + Direction ( int code ) { 
 + this . code = code ; 
 + } 
 + protected int code ; 
 + public int getCode ( ) { 
 + return this . code ; 
 + } 
 + static Direction getOppositeDirection ( Direction d ) { 
 + return null ; 
 + } 
 + } 
 +
