BLEU SCORE: 0.09080027618567452

TEST MSG: Issue # 5970 : udpate documentation for rcurly property
GENERATED MSG: Issue # 1900 : Extended javadoc / xdoc for RightCurlyCheck .

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java <nl> index 059bb81 . . 9285429 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java <nl> @ @ - 27 , 49 + 27 , 54 @ @ package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> public enum RightCurlyOption { <nl> <nl> / * * <nl> - * Represents the policy that the brace must be alone on the line , <nl> - * yet allows single - line format of block . <nl> + * Represents the policy that the brace must be alone on the line . <nl> * For example : <nl> * <nl> * < pre > <nl> - * / / Brace is alone on the line <nl> * try { <nl> * . . . <nl> * < b > } < / b > <nl> * finally { <nl> * . . . <nl> * < b > } < / b > <nl> - * <nl> - * / / Single - line format of block <nl> - * public long getId ( ) { return id ; < b > } < / b > <nl> * < / pre > <nl> * * / <nl> - ALONE _ OR _ SINGLELINE , <nl> + ALONE , <nl> <nl> / * * <nl> - * Represents the policy that the brace must be alone on the line . <nl> + * Represents the policy that the brace must be alone on the line , <nl> + * yet allows single - line format of block . <nl> * For example : <nl> * <nl> * < pre > <nl> + * / / Brace is alone on the line <nl> * try { <nl> * . . . <nl> * < b > } < / b > <nl> * finally { <nl> * . . . <nl> * < b > } < / b > <nl> + * <nl> + * / / Single - line format of block <nl> + * public long getId ( ) { return id ; < b > } < / b > <nl> * < / pre > <nl> * * / <nl> - ALONE , <nl> + ALONE _ OR _ SINGLELINE , <nl> <nl> / * * <nl> - * Represents the policy that the brace should be on the same line as the <nl> - * the next part of a multi - block statement ( one that directly contains <nl> - * multiple blocks : if / else - if / else or try / catch / finally ) . It also allows <nl> - * single - line format of multi - block statements . <nl> + * Represents the policy that the brace should follow <nl> + * { @ link RightCurlyOption # ALONE _ OR _ SINGLELINE } policy <nl> + * but the brace should be on the same line as the next part of a multi - block statement <nl> + * ( one that directly contains <nl> + * multiple blocks : if / else - if / else or try / catch / finally ) . <nl> + * If no next part of a multi - block statement present , brace must be alone on line . <nl> + * It also allows single - line format of multi - block statements . <nl> * <nl> * < p > Examples : < / p > <nl> * <nl> * < pre > <nl> + * public long getId ( ) { return id ; < b > } < / b > / / this is OK , it is single line <nl> + * <nl> * / / try - catch - finally blocks <nl> * try { <nl> * . . . <nl> @ @ - 105 , 19 + 110 , 14 @ @ public enum RightCurlyOption { <nl> * <nl> * if ( a & # 62 ; 0 ) { <nl> * . . . <nl> - * < b > } < / b > int i = 5 ; / / this is NOT OK , next part of a multi - block statement is absent <nl> - * <nl> - * / / Single line blocks will rise violations , because right curly <nl> - * / / brace is not on the same line as the next part of a multi - block <nl> - * / / statement , it just ends the line . <nl> - * public long getId ( ) { return id ; < b > } < / b > / / this is NOT OK <nl> + * < b > } < / b > int i = 5 ; / / NOT OK , no next part of a multi - block statement , so should be alone <nl> * <nl> * Thread t = new Thread ( new Runnable ( ) { <nl> * & # 64 ; Override <nl> * public void run ( ) { <nl> * . . . <nl> - * < b > } < / b > / / this is NOT OK , not on the same line as the next part of a multi - block statement <nl> - * < b > } < / b > ) ; / / this is OK , allowed for better code readability <nl> + * < b > } < / b > / / this is OK , should be alone as next part of a multi - block statement is absent <nl> + * < b > } < / b > ) ; / / this case is out of scope of RightCurly Check ( see issue # 5945 ) <nl> * <nl> * if ( a & # 62 ; 0 ) { . . . < b > } < / b > / / OK , single - line multi - block statement <nl> * if ( a & # 62 ; 0 ) { . . . } else { . . . < b > } < / b > / / OK , single - line multi - block statement <nl> diff - - git a / src / xdocs / property _ types . xml b / src / xdocs / property _ types . xml <nl> index 202bc9a . . 0b9e57b 100644 <nl> - - - a / src / xdocs / property _ types . xml <nl> + + + b / src / xdocs / property _ types . xml <nl> @ @ - 326 , 15 + 326 , 55 @ @ <nl> < / tr > <nl> <nl> < tr > <nl> + < td > < code > alone < / code > < / td > <nl> + < td > <nl> + The brace must be alone on the line . For example : <nl> + < pre > <nl> + try { <nl> + . . . <nl> + < b > } < / b > <nl> + finally { <nl> + . . . <nl> + < b > } < / b > <nl> + < / pre > <nl> + < / td > <nl> + < / tr > <nl> + <nl> + < tr > <nl> + < td > < code > alone _ or _ singleline < / code > < / td > <nl> + < td > <nl> + The brace must be alone on the line , yet <nl> + single - line format of block is allowed . <nl> + For example : <nl> + < pre > <nl> + / / Brace is alone on the line <nl> + try { <nl> + . . . <nl> + < b > } < / b > <nl> + finally { <nl> + . . . <nl> + < b > } < / b > <nl> + <nl> + / / Single - line format of block <nl> + public long getId ( ) { return id ; < b > } < / b > <nl> + < / pre > <nl> + < / td > <nl> + < / tr > <nl> + <nl> + < tr > <nl> < td > < code > same < / code > < / td > <nl> < td > <nl> - The brace should be on the same line as the next part of a multi - block statement <nl> + Works like < code > alone _ or _ singleline < / code > but the brace should be on the same line <nl> + as the next part of a multi - block statement <nl> ( one that directly contains multiple blocks : if / else - if / else or try / catch / finally ) . <nl> + If no next part of a multi - block statement present , brace must be alone on line . <nl> It also allows single - line format of multi - block statements . <nl> <nl> < p > Examples : < / p > <nl> <nl> < pre > <nl> + public long getId ( ) { return id ; < b > } < / b > / / this is OK , it is single line <nl> + <nl> / / try - catch - finally blocks <nl> try { <nl> . . . <nl> @ @ - 368 , 22 + 408 , 16 @ @ <nl> . . . <nl> } <nl> <nl> - if ( a > 0 ) { <nl> + if ( a & # 62 ; 0 ) { <nl> . . . <nl> - < b > } < / b > int i = 5 ; / / this is NOT OK , next part of a multi - block statement is absent <nl> - <nl> - / / Single line blocks will rise violations , because right curly <nl> - / / brace is not on the same line as the next part of a multi - block <nl> - / / statement , it just ends the line . <nl> - public long getId ( ) { return id ; < b > } < / b > / / this is NOT OK <nl> + < b > } < / b > int i = 5 ; / / NOT OK , no next part of a multi - block statement , so should be alone <nl> <nl> Thread t = new Thread ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> . . . <nl> - < b > } < / b > / / this is NOT OK , brace is not on the same line as the next part <nl> - / / of a multi - block statement <nl> - < b > } < / b > ) ; / / this is OK , allowed for better code readability <nl> + < b > } < / b > / / this is OK , should be alone as next part of a multi - block statement is absent <nl> + < b > } < / b > ) ; / / this case is out of scope of RightCurly Check ( see issue # 5945 ) <nl> <nl> if ( a & # 62 ; 0 ) { . . . < b > } < / b > / / OK , single - line multi - block statement <nl> if ( a & # 62 ; 0 ) { . . . } else { . . . < b > } < / b > / / OK , single - line multi - block statement <nl> @ @ - 394 , 41 + 428 , 6 @ @ <nl> < / td > <nl> < / tr > <nl> <nl> - < tr > <nl> - < td > < code > alone < / code > < / td > <nl> - < td > <nl> - The brace must be alone on the line . For example : <nl> - < pre > <nl> - try { <nl> - . . . <nl> - < b > } < / b > <nl> - finally { <nl> - . . . <nl> - < b > } < / b > <nl> - < / pre > <nl> - < / td > <nl> - < / tr > <nl> - <nl> - < tr > <nl> - < td > < code > alone _ or _ singleline < / code > < / td > <nl> - < td > <nl> - The brace must be alone on the line , yet <nl> - single - line format of block is allowed . <nl> - For example : <nl> - < pre > <nl> - / / Brace is alone on the line <nl> - try { <nl> - . . . <nl> - < b > } < / b > <nl> - finally { <nl> - . . . <nl> - < b > } < / b > <nl> - <nl> - / / Single - line format of block <nl> - public long getId ( ) { return id ; < b > } < / b > <nl> - < / pre > <nl> - < / td > <nl> - < / tr > <nl> < / table > <nl> < / section > <nl>
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> index 320f6a6 . . fe74d30 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java <nl> @ @ - 152 , 35 + 152 , 38 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { <nl> protected void setupChild ( Configuration childConf ) <nl> throws CheckstyleException { <nl> final String name = childConf . getName ( ) ; <nl> + final Object child ; <nl> + <nl> try { <nl> - final Object child = moduleFactory . createModule ( name ) ; <nl> + child = moduleFactory . createModule ( name ) ; <nl> + <nl> if ( child instanceof AutomaticBean ) { <nl> final AutomaticBean bean = ( AutomaticBean ) child ; <nl> bean . contextualize ( childContext ) ; <nl> bean . configure ( childConf ) ; <nl> } <nl> - if ( child instanceof FileSetCheck ) { <nl> - final FileSetCheck fsc = ( FileSetCheck ) child ; <nl> - fsc . init ( ) ; <nl> - addFileSetCheck ( fsc ) ; <nl> - } <nl> - else if ( child instanceof Filter ) { <nl> - final Filter filter = ( Filter ) child ; <nl> - addFilter ( filter ) ; <nl> - } <nl> - else if ( child instanceof AuditListener ) { <nl> - final AuditListener listener = ( AuditListener ) child ; <nl> - addListener ( listener ) ; <nl> - } <nl> - else { <nl> - throw new CheckstyleException ( name <nl> - + " is not allowed as a child in Checker " ) ; <nl> - } <nl> } <nl> - catch ( final Exception ex ) { <nl> + catch ( final CheckstyleException ex ) { <nl> throw new CheckstyleException ( " cannot initialize module " + name <nl> + " - " + ex . getMessage ( ) , ex ) ; <nl> } <nl> + if ( child instanceof FileSetCheck ) { <nl> + final FileSetCheck fsc = ( FileSetCheck ) child ; <nl> + fsc . init ( ) ; <nl> + addFileSetCheck ( fsc ) ; <nl> + } <nl> + else if ( child instanceof Filter ) { <nl> + final Filter filter = ( Filter ) child ; <nl> + addFilter ( filter ) ; <nl> + } <nl> + else if ( child instanceof AuditListener ) { <nl> + final AuditListener listener = ( AuditListener ) child ; <nl> + addListener ( listener ) ; <nl> + } <nl> + else { <nl> + throw new CheckstyleException ( name <nl> + + " is not allowed as a child in Checker " ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 5c23124 . . ab72a7e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 256 , 8 + 256 , 7 @ @ public class CheckerTest { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertEquals ( " cannot initialize module java . lang . String " <nl> - + " - java . lang . String is not allowed as a child in Checker " , ex . getMessage ( ) ) ; <nl> + assertEquals ( " java . lang . String is not allowed as a child in Checker " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java 
 index 059bb81 . . 9285429 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyOption . java 
 @ @ - 27 , 49 + 27 , 54 @ @ package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 public enum RightCurlyOption { 
 
 / * * 
 - * Represents the policy that the brace must be alone on the line , 
 - * yet allows single - line format of block . 
 + * Represents the policy that the brace must be alone on the line . 
 * For example : 
 * 
 * < pre > 
 - * / / Brace is alone on the line 
 * try { 
 * . . . 
 * < b > } < / b > 
 * finally { 
 * . . . 
 * < b > } < / b > 
 - * 
 - * / / Single - line format of block 
 - * public long getId ( ) { return id ; < b > } < / b > 
 * < / pre > 
 * * / 
 - ALONE _ OR _ SINGLELINE , 
 + ALONE , 
 
 / * * 
 - * Represents the policy that the brace must be alone on the line . 
 + * Represents the policy that the brace must be alone on the line , 
 + * yet allows single - line format of block . 
 * For example : 
 * 
 * < pre > 
 + * / / Brace is alone on the line 
 * try { 
 * . . . 
 * < b > } < / b > 
 * finally { 
 * . . . 
 * < b > } < / b > 
 + * 
 + * / / Single - line format of block 
 + * public long getId ( ) { return id ; < b > } < / b > 
 * < / pre > 
 * * / 
 - ALONE , 
 + ALONE _ OR _ SINGLELINE , 
 
 / * * 
 - * Represents the policy that the brace should be on the same line as the 
 - * the next part of a multi - block statement ( one that directly contains 
 - * multiple blocks : if / else - if / else or try / catch / finally ) . It also allows 
 - * single - line format of multi - block statements . 
 + * Represents the policy that the brace should follow 
 + * { @ link RightCurlyOption # ALONE _ OR _ SINGLELINE } policy 
 + * but the brace should be on the same line as the next part of a multi - block statement 
 + * ( one that directly contains 
 + * multiple blocks : if / else - if / else or try / catch / finally ) . 
 + * If no next part of a multi - block statement present , brace must be alone on line . 
 + * It also allows single - line format of multi - block statements . 
 * 
 * < p > Examples : < / p > 
 * 
 * < pre > 
 + * public long getId ( ) { return id ; < b > } < / b > / / this is OK , it is single line 
 + * 
 * / / try - catch - finally blocks 
 * try { 
 * . . . 
 @ @ - 105 , 19 + 110 , 14 @ @ public enum RightCurlyOption { 
 * 
 * if ( a & # 62 ; 0 ) { 
 * . . . 
 - * < b > } < / b > int i = 5 ; / / this is NOT OK , next part of a multi - block statement is absent 
 - * 
 - * / / Single line blocks will rise violations , because right curly 
 - * / / brace is not on the same line as the next part of a multi - block 
 - * / / statement , it just ends the line . 
 - * public long getId ( ) { return id ; < b > } < / b > / / this is NOT OK 
 + * < b > } < / b > int i = 5 ; / / NOT OK , no next part of a multi - block statement , so should be alone 
 * 
 * Thread t = new Thread ( new Runnable ( ) { 
 * & # 64 ; Override 
 * public void run ( ) { 
 * . . . 
 - * < b > } < / b > / / this is NOT OK , not on the same line as the next part of a multi - block statement 
 - * < b > } < / b > ) ; / / this is OK , allowed for better code readability 
 + * < b > } < / b > / / this is OK , should be alone as next part of a multi - block statement is absent 
 + * < b > } < / b > ) ; / / this case is out of scope of RightCurly Check ( see issue # 5945 ) 
 * 
 * if ( a & # 62 ; 0 ) { . . . < b > } < / b > / / OK , single - line multi - block statement 
 * if ( a & # 62 ; 0 ) { . . . } else { . . . < b > } < / b > / / OK , single - line multi - block statement 
 diff - - git a / src / xdocs / property _ types . xml b / src / xdocs / property _ types . xml 
 index 202bc9a . . 0b9e57b 100644 
 - - - a / src / xdocs / property _ types . xml 
 + + + b / src / xdocs / property _ types . xml 
 @ @ - 326 , 15 + 326 , 55 @ @ 
 < / tr > 
 
 < tr > 
 + < td > < code > alone < / code > < / td > 
 + < td > 
 + The brace must be alone on the line . For example : 
 + < pre > 
 + try { 
 + . . . 
 + < b > } < / b > 
 + finally { 
 + . . . 
 + < b > } < / b > 
 + < / pre > 
 + < / td > 
 + < / tr > 
 + 
 + < tr > 
 + < td > < code > alone _ or _ singleline < / code > < / td > 
 + < td > 
 + The brace must be alone on the line , yet 
 + single - line format of block is allowed . 
 + For example : 
 + < pre > 
 + / / Brace is alone on the line 
 + try { 
 + . . . 
 + < b > } < / b > 
 + finally { 
 + . . . 
 + < b > } < / b > 
 + 
 + / / Single - line format of block 
 + public long getId ( ) { return id ; < b > } < / b > 
 + < / pre > 
 + < / td > 
 + < / tr > 
 + 
 + < tr > 
 < td > < code > same < / code > < / td > 
 < td > 
 - The brace should be on the same line as the next part of a multi - block statement 
 + Works like < code > alone _ or _ singleline < / code > but the brace should be on the same line 
 + as the next part of a multi - block statement 
 ( one that directly contains multiple blocks : if / else - if / else or try / catch / finally ) . 
 + If no next part of a multi - block statement present , brace must be alone on line . 
 It also allows single - line format of multi - block statements . 
 
 < p > Examples : < / p > 
 
 < pre > 
 + public long getId ( ) { return id ; < b > } < / b > / / this is OK , it is single line 
 + 
 / / try - catch - finally blocks 
 try { 
 . . . 
 @ @ - 368 , 22 + 408 , 16 @ @ 
 . . . 
 } 
 
 - if ( a > 0 ) { 
 + if ( a & # 62 ; 0 ) { 
 . . . 
 - < b > } < / b > int i = 5 ; / / this is NOT OK , next part of a multi - block statement is absent 
 - 
 - / / Single line blocks will rise violations , because right curly 
 - / / brace is not on the same line as the next part of a multi - block 
 - / / statement , it just ends the line . 
 - public long getId ( ) { return id ; < b > } < / b > / / this is NOT OK 
 + < b > } < / b > int i = 5 ; / / NOT OK , no next part of a multi - block statement , so should be alone 
 
 Thread t = new Thread ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 . . . 
 - < b > } < / b > / / this is NOT OK , brace is not on the same line as the next part 
 - / / of a multi - block statement 
 - < b > } < / b > ) ; / / this is OK , allowed for better code readability 
 + < b > } < / b > / / this is OK , should be alone as next part of a multi - block statement is absent 
 + < b > } < / b > ) ; / / this case is out of scope of RightCurly Check ( see issue # 5945 ) 
 
 if ( a & # 62 ; 0 ) { . . . < b > } < / b > / / OK , single - line multi - block statement 
 if ( a & # 62 ; 0 ) { . . . } else { . . . < b > } < / b > / / OK , single - line multi - block statement 
 @ @ - 394 , 41 + 428 , 6 @ @ 
 < / td > 
 < / tr > 
 
 - < tr > 
 - < td > < code > alone < / code > < / td > 
 - < td > 
 - The brace must be alone on the line . For example : 
 - < pre > 
 - try { 
 - . . . 
 - < b > } < / b > 
 - finally { 
 - . . . 
 - < b > } < / b > 
 - < / pre > 
 - < / td > 
 - < / tr > 
 - 
 - < tr > 
 - < td > < code > alone _ or _ singleline < / code > < / td > 
 - < td > 
 - The brace must be alone on the line , yet 
 - single - line format of block is allowed . 
 - For example : 
 - < pre > 
 - / / Brace is alone on the line 
 - try { 
 - . . . 
 - < b > } < / b > 
 - finally { 
 - . . . 
 - < b > } < / b > 
 - 
 - / / Single - line format of block 
 - public long getId ( ) { return id ; < b > } < / b > 
 - < / pre > 
 - < / td > 
 - < / tr > 
 < / table > 
 < / section > 


NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 index 320f6a6 . . fe74d30 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Checker . java 
 @ @ - 152 , 35 + 152 , 38 @ @ public class Checker extends AutomaticBean implements MessageDispatcher { 
 protected void setupChild ( Configuration childConf ) 
 throws CheckstyleException { 
 final String name = childConf . getName ( ) ; 
 + final Object child ; 
 + 
 try { 
 - final Object child = moduleFactory . createModule ( name ) ; 
 + child = moduleFactory . createModule ( name ) ; 
 + 
 if ( child instanceof AutomaticBean ) { 
 final AutomaticBean bean = ( AutomaticBean ) child ; 
 bean . contextualize ( childContext ) ; 
 bean . configure ( childConf ) ; 
 } 
 - if ( child instanceof FileSetCheck ) { 
 - final FileSetCheck fsc = ( FileSetCheck ) child ; 
 - fsc . init ( ) ; 
 - addFileSetCheck ( fsc ) ; 
 - } 
 - else if ( child instanceof Filter ) { 
 - final Filter filter = ( Filter ) child ; 
 - addFilter ( filter ) ; 
 - } 
 - else if ( child instanceof AuditListener ) { 
 - final AuditListener listener = ( AuditListener ) child ; 
 - addListener ( listener ) ; 
 - } 
 - else { 
 - throw new CheckstyleException ( name 
 - + " is not allowed as a child in Checker " ) ; 
 - } 
 } 
 - catch ( final Exception ex ) { 
 + catch ( final CheckstyleException ex ) { 
 throw new CheckstyleException ( " cannot initialize module " + name 
 + " - " + ex . getMessage ( ) , ex ) ; 
 } 
 + if ( child instanceof FileSetCheck ) { 
 + final FileSetCheck fsc = ( FileSetCheck ) child ; 
 + fsc . init ( ) ; 
 + addFileSetCheck ( fsc ) ; 
 + } 
 + else if ( child instanceof Filter ) { 
 + final Filter filter = ( Filter ) child ; 
 + addFilter ( filter ) ; 
 + } 
 + else if ( child instanceof AuditListener ) { 
 + final AuditListener listener = ( AuditListener ) child ; 
 + addListener ( listener ) ; 
 + } 
 + else { 
 + throw new CheckstyleException ( name 
 + + " is not allowed as a child in Checker " ) ; 
 + } 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 5c23124 . . ab72a7e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 256 , 8 + 256 , 7 @ @ public class CheckerTest { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertEquals ( " cannot initialize module java . lang . String " 
 - + " - java . lang . String is not allowed as a child in Checker " , ex . getMessage ( ) ) ; 
 + assertEquals ( " java . lang . String is not allowed as a child in Checker " , ex . getMessage ( ) ) ; 
 } 
 } 

