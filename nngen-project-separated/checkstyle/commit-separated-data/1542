BLEU SCORE: 0.05653041175801491

TEST MSG: Issue # 1217 : goal ' testCheck ' was activated in ' forbiddenapis ' plugin , violations fixed
GENERATED MSG: Issue # 1243 : ' Local variable is not used ' fixed

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 1d35c5c . . fdbff94 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 891 , 12 + 891 , 35 @ @ <nl> < exclude > * * / GeneratedJavaLexer . class < / exclude > <nl> < exclude > * * / JavadocParser . class < / exclude > <nl> < exclude > * * / Main . class < / exclude > <nl> + < ! - - Tests related - - > <nl> + < exclude > * * / Input * < / exclude > <nl> + < exclude > * * / * Input . class < / exclude > <nl> + < exclude > * * / New * < / exclude > <nl> + < exclude > * * / CompareTreesWithComments . class < / exclude > <nl> + < exclude > * * / UpdateClass . class < / exclude > <nl> + < exclude > * * / bug * < / exclude > <nl> + < exclude > * * / oneMoreClass . class < / exclude > <nl> + < exclude > * * / RightCurlyInput _ Other . class < / exclude > <nl> + < exclude > * * / JavaNCSSCheckTestInput $ 1 . class < / exclude > <nl> + < exclude > * * / test _ * < / exclude > <nl> + < exclude > * * / WithInner $ Inner . class < / exclude > <nl> + < exclude > * * / Foo * < / exclude > <nl> + < exclude > * * / WithAnon $ 1 . class < / exclude > <nl> + < exclude > * * / UncommentedMainTest * < / exclude > <nl> + < exclude > * * / Temp * < / exclude > <nl> + < exclude > * * / Issue * < / exclude > <nl> + < exclude > * * / ParenPadWithSpace . class < / exclude > <nl> + < exclude > * * / Main1 . class < / exclude > <nl> + < exclude > * * / ConfigurationBuilder . class < / exclude > <nl> + < exclude > * * / WithAnonymousClass $ 1 . class < / exclude > <nl> + < exclude > * * / Test . class < / exclude > <nl> < / excludes > <nl> < / configuration > <nl> < executions > <nl> < execution > <nl> < goals > <nl> < goal > check < / goal > <nl> + < goal > testCheck < / goal > <nl> < / goals > <nl> < / execution > <nl> < / executions > <nl> diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> index 09fc5b0 . . a9cd406 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> @ @ - 1 , 6 + 1 , 5 @ @ <nl> package com . google . checkstyle . test . base ; <nl> <nl> - import static java . text . MessageFormat . format ; <nl> import static org . junit . Assert . assertEquals ; <nl> <nl> import java . io . ByteArrayInputStream ; <nl> @ @ - 10 , 6 + 9 , 7 @ @ import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> import java . io . LineNumberReader ; <nl> import java . nio . charset . StandardCharsets ; <nl> + import java . text . MessageFormat ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> @ @ - 163 , 7 + 163 , 9 @ @ public abstract class BaseCheckTestSupport <nl> * / <nl> protected String getCheckMessage ( Class < ? extends AbstractViolationReporter > aClass , <nl> String messageKey , Object . . . arguments ) { <nl> - return format ( getCheckMessage ( aClass , messageKey ) , arguments ) ; <nl> + final MessageFormat formatter = new MessageFormat ( getCheckMessage ( aClass , messageKey ) , <nl> + Locale . ROOT ) ; <nl> + return formatter . format ( arguments ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 175 , 7 + 177 , 8 @ @ public abstract class BaseCheckTestSupport <nl> { <nl> for ( Map . Entry < String , String > entry : messages . entrySet ( ) ) { <nl> if ( messageKey . equals ( entry . getKey ( ) ) ) { <nl> - return format ( entry . getValue ( ) , arguments ) ; <nl> + final MessageFormat formatter = new MessageFormat ( entry . getValue ( ) , Locale . ROOT ) ; <nl> + return formatter . format ( arguments ) ; <nl> } <nl> } <nl> return null ; <nl> diff - - git a / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java b / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java <nl> index 2fb6ef4 . . 36d845e 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import java . nio . charset . StandardCharsets ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> + import java . util . Locale ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> <nl> @ @ - 61 , 7 + 62 , 7 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder <nl> final int actualIndent = getLineStart ( line , tabWidth ) ; <nl> <nl> if ( actualIndent ! = indentInComment ) { <nl> - throw new IllegalStateException ( String . format ( <nl> + throw new IllegalStateException ( String . format ( Locale . ROOT , <nl> " File \ " % 1 $ s \ " has incorrect indentation in comment . " <nl> + " Line % 2 $ d : comment : % 3 $ d , actual : % 4 $ d . " , <nl> aFileName , <nl> @ @ - 75 , 14 + 76 , 14 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder <nl> } <nl> <nl> if ( ! isCommentConsistent ( comment ) ) { <nl> - throw new IllegalStateException ( String . format ( <nl> + throw new IllegalStateException ( String . format ( Locale . ROOT , <nl> " File \ " % 1 $ s \ " has inconsistent comment on line % 2 $ d " , <nl> aFileName , <nl> lineNumber ) ) ; <nl> } <nl> } <nl> else if ( NONEMPTY _ LINE _ REGEX . matcher ( line ) . matches ( ) ) { <nl> - throw new IllegalStateException ( String . format ( <nl> + throw new IllegalStateException ( String . format ( Locale . ROOT , <nl> " File \ " % 1 $ s \ " has no indentation comment or its format " <nl> + " malformed . Error on line : % 2 $ d ( % 3 $ s ) " , <nl> aFileName , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksPresentOnAvailableChecksPageTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksPresentOnAvailableChecksPageTest . java <nl> index a1d6ed6 . . 9b2d3af 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksPresentOnAvailableChecksPageTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksPresentOnAvailableChecksPageTest . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> + import java . util . Locale ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 76 , 7 + 77 , 7 @ @ public class AllChecksPresentOnAvailableChecksPageTest { <nl> } <nl> <nl> private static boolean isPresent ( String availableChecks , String checkName ) { <nl> - final String linkPattern = String . format ( LINK _ TEMPLATE , checkName ) ; <nl> + final String linkPattern = String . format ( Locale . ROOT , LINK _ TEMPLATE , checkName ) ; <nl> return availableChecks . matches ( linkPattern ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> index cf05125 . . 84aa467 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . nio . file . Path ; <nl> import java . nio . file . Paths ; <nl> import java . util . Arrays ; <nl> import java . util . HashSet ; <nl> + import java . util . Locale ; <nl> import java . util . Set ; <nl> <nl> import javax . xml . parsers . DocumentBuilder ; <nl> @ @ - 100 , 8 + 101 , 9 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> final int [ ] acceptableTokens = testedCheck . getAcceptableTokens ( ) ; <nl> <nl> if ( ! isSubset ( defaultTokens , acceptableTokens ) ) { <nl> - String errorMessage = String . format ( " % s ' s default tokens must be a subset " <nl> - + " of acceptable tokens . " , check . getName ( ) ) ; <nl> + String errorMessage = String . format ( Locale . ROOT , <nl> + " % s ' s default tokens must be a subset " <nl> + + " of acceptable tokens . " , check . getName ( ) ) ; <nl> Assert . fail ( errorMessage ) ; <nl> } <nl> } <nl> @ @ - 119 , 8 + 121 , 9 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> final int [ ] acceptableTokens = testedCheck . getAcceptableTokens ( ) ; <nl> <nl> if ( ! isSubset ( requiredTokens , acceptableTokens ) ) { <nl> - String errorMessage = String . format ( " % s ' s required tokens must be a subset " <nl> - + " of acceptable tokens . " , check . getName ( ) ) ; <nl> + String errorMessage = String . format ( Locale . ROOT , <nl> + " % s ' s required tokens must be a subset " <nl> + + " of acceptable tokens . " , check . getName ( ) ) ; <nl> Assert . fail ( errorMessage ) ; <nl> } <nl> } <nl> @ @ - 138 , 8 + 141 , 9 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> final int [ ] requiredTokens = testedCheck . getRequiredTokens ( ) ; <nl> <nl> if ( ! isSubset ( requiredTokens , defaultTokens ) ) { <nl> - String errorMessage = String . format ( " % s ' s required tokens must be a subset " <nl> - + " of default tokens . " , check . getName ( ) ) ; <nl> + String errorMessage = String . format ( Locale . ROOT , <nl> + " % s ' s required tokens must be a subset " <nl> + + " of default tokens . " , check . getName ( ) ) ; <nl> Assert . fail ( errorMessage ) ; <nl> } <nl> } <nl> @ @ - 155 , 7 + 159 , 8 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> <nl> for ( String check : checksNames ) { <nl> if ( ! checksReferencedInConfig . contains ( check ) ) { <nl> - String errorMessage = String . format ( " % s is not referenced in checkstyle _ checks . xml " , check ) ; <nl> + String errorMessage = String . format ( Locale . ROOT , <nl> + " % s is not referenced in checkstyle _ checks . xml " , check ) ; <nl> Assert . fail ( errorMessage ) ; <nl> } <nl> } <nl> @ @ - 172 , 7 + 177 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> <nl> for ( String moduleName : checkstyleModulesNames ) { <nl> if ( ! modulesNamesWhichHaveXdocs . contains ( moduleName ) ) { <nl> - final String missingModuleMessage = String . format ( <nl> + final String missingModuleMessage = String . format ( Locale . ROOT , <nl> " Module % s does not have xdoc documentation . " , <nl> moduleName ) ; <nl> Assert . fail ( missingModuleMessage ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> index d51792f . . 4ef0ea6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> @ @ - 1 , 6 + 1 , 5 @ @ <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> - import static java . text . MessageFormat . format ; <nl> import static org . junit . Assert . assertEquals ; <nl> <nl> import java . io . ByteArrayInputStream ; <nl> @ @ - 11 , 6 + 10 , 7 @ @ import java . io . InputStreamReader ; <nl> import java . io . LineNumberReader ; <nl> import java . io . OutputStream ; <nl> import java . nio . charset . StandardCharsets ; <nl> + import java . text . MessageFormat ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . Locale ; <nl> @ @ - 172 , 6 + 172 , 8 @ @ public class BaseCheckTestSupport { <nl> } catch ( IOException e ) { <nl> return null ; <nl> } <nl> - return format ( pr . getProperty ( messageKey ) , arguments ) ; <nl> + final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , <nl> + Locale . ROOT ) ; <nl> + return formatter . format ( arguments ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 46f0cc4 . . 2659ec8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 82 , 7 + 82 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) { <nl> - String usage = String . format ( " Unrecognized option : - w % n " <nl> + String usage = String . format ( Locale . ROOT , " Unrecognized option : - w % n " <nl> + " usage : java com . puppycrawl . tools . checkstyle . Main [ options ] - c < config . xml > % n " <nl> + " file . . . % n " <nl> + " - c < arg > Sets the check configuration file to use . % n " <nl> @ @ - 135 , 8 + 135 , 8 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) { <nl> - assertEquals ( <nl> - String . format ( " Unable to find : src / main / resources / non _ existing _ config . xml % n " <nl> + assertEquals ( String . format ( Locale . ROOT , <nl> + " Unable to find : src / main / resources / non _ existing _ config . xml % n " <nl> + " Checkstyle ends with 1 errors . % n " ) , <nl> systemOut . getLog ( ) ) ; <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> @ @ - 152 , 7 + 152 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) { <nl> - assertEquals ( String . format ( " Invalid output format . " <nl> + assertEquals ( String . format ( Locale . ROOT , " Invalid output format . " <nl> + " Found ' xmlp ' but expected ' plain ' or ' xml ' . % n " ) , systemOut . getLog ( ) ) ; <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> @ @ - 187 , 7 + 187 , 7 @ @ public class MainTest { <nl> + " how to configure short name usage http : / / checkstyle . sourceforge . net / config . html # Packages . " <nl> + " Please also recheck that provided ClassLoader to Checker is configured correctly . " ; <nl> final String expectedExceptionMessage = <nl> - String . format ( " cannot initialize module TreeWalker - % 1 $ s % n " <nl> + String . format ( Locale . ROOT , " cannot initialize module TreeWalker - % 1 $ s % n " <nl> + " Cause : com . puppycrawl . tools . checkstyle . api . CheckstyleException : % 1 $ s % n " <nl> + " Checkstyle ends with 1 errors . % n " , cause ) ; <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ @ - 208 , 7 + 208 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) { <nl> - assertEquals ( String . format ( " Starting audit . . . % n " <nl> + assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " Audit done . % n " ) , systemOut . getLog ( ) ) ; <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> @ @ - 230 , 7 + 230 , 8 @ @ public class MainTest { <nl> final ResourceBundle compilationProperties = <nl> ResourceBundle . getBundle ( " checkstylecompilation " ) ; <nl> String version = compilationProperties . getString ( " checkstyle . compile . version " ) ; <nl> - assertEquals ( String . format ( " < ? xml version = \ " 1 . 0 \ " encoding = \ " UTF - 8 \ " ? > % n " <nl> + assertEquals ( String . format ( Locale . ROOT , <nl> + " < ? xml version = \ " 1 . 0 \ " encoding = \ " UTF - 8 \ " ? > % n " <nl> + " < checkstyle version = \ " % s \ " > % n " <nl> + " < file name = \ " % s \ " > % n " <nl> + " < / file > % n " <nl> @ @ - 249 , 7 + 250 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) { <nl> - assertEquals ( String . format ( " Starting audit . . . % n " <nl> + assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " Audit done . % n " ) , systemOut . getLog ( ) ) ; <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> @ @ - 269 , 7 + 270 , 7 @ @ public class MainTest { <nl> String expectedPath = currentPath <nl> + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> . replace ( " / " , File . separator ) ; <nl> - assertEquals ( String . format ( " Starting audit . . . % n " <nl> + assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " % 1 $ s : 3 : 14 : " <nl> + " warning : Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> + " % 1 $ s : 5 : 7 : " <nl> @ @ - 294 , 7 + 295 , 7 @ @ public class MainTest { <nl> String expectedPath = currentPath <nl> + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> . replace ( " / " , File . separator ) ; <nl> - assertEquals ( String . format ( " Starting audit . . . % n " <nl> + assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " % 1 $ s : 3 : 14 : error : " <nl> + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> + " % 1 $ s : 5 : 7 : error : " <nl> @ @ - 396 , 7 + 397 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) { <nl> - assertEquals ( String . format ( " Starting audit . . . % n " <nl> + assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " Audit done . % n " ) , systemOut . getLog ( ) ) ; <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> @ @ - 432 , 10 + 433 , 10 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) { <nl> - assertTrue ( systemOut . getLog ( ) . startsWith ( String . format ( <nl> + assertTrue ( systemOut . getLog ( ) . startsWith ( String . format ( Locale . ROOT , <nl> " unable to parse configuration stream - Content is not allowed in prolog . : 7 : 1 % n " <nl> + " Cause : org . xml . sax . SAXParseException ; systemId : file : " ) ) ) ; <nl> - assertTrue ( systemOut . getLog ( ) . endsWith ( String . format ( <nl> + assertTrue ( systemOut . getLog ( ) . endsWith ( String . format ( Locale . ROOT , <nl> " com / puppycrawl / tools / checkstyle / config - Incorrect . xml ; lineNumber : 7 ; columnNumber : 1 ; " <nl> + " Content is not allowed in prolog . % n " <nl> + " Checkstyle ends with 1 errors . % n " ) ) ) ; <nl> @ @ - 529 , 7 + 530 , 7 @ @ public class MainTest { <nl> sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 80 ) . " ; <nl> for ( String [ ] outputValue : outputValues ) { <nl> - String line = String . format ( format , <nl> + String line = String . format ( Locale . ROOT , format , <nl> expectedPath + outputValue [ 0 ] , outputValue [ 1 ] , <nl> outputValue [ 2 ] ) ; <nl> sb . append ( line ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> index e2be50d . . e7fa673 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import static org . junit . Assert . assertNull ; <nl> import java . io . File ; <nl> import java . io . FileFilter ; <nl> import java . text . MessageFormat ; <nl> + import java . util . Locale ; <nl> <nl> import org . junit . Test ; <nl> <nl> @ @ - 147 , 13 + 148 , 13 @ @ public class DetailASTTest { <nl> Object [ ] params = { <nl> node , parent , prev , filename , root , <nl> } ; <nl> - String badParentMsg = MessageFormat . format ( <nl> - " Bad parent node = { 0 } parent = { 1 } filename = { 3 } root = { 4 } " , <nl> - params ) ; <nl> + MessageFormat badParentFormatter = new MessageFormat ( <nl> + " Bad parent node = { 0 } parent = { 1 } filename = { 3 } root = { 4 } " , Locale . ROOT ) ; <nl> + String badParentMsg = badParentFormatter . format ( params ) ; <nl> assertEquals ( badParentMsg , parent , node . getParent ( ) ) ; <nl> - String badPrevMsg = MessageFormat . format ( <nl> - " Bad prev node = { 0 } prev = { 2 } parent = { 1 } filename = { 3 } root = { 4 } " , <nl> - params ) ; <nl> + MessageFormat badPrevFormatter = new MessageFormat ( <nl> + " Bad prev node = { 0 } prev = { 2 } parent = { 1 } filename = { 3 } root = { 4 } " , Locale . ROOT ) ; <nl> + String badPrevMsg = badPrevFormatter . format ( params ) ; <nl> assertEquals ( badPrevMsg , prev , node . getPreviousSibling ( ) ) ; <nl> <nl> if ( node . getFirstChild ( ) ! = null ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java <nl> index 3984b1c . . 726dfae 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java <nl> @ @ - 21 , 8 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalTokenTextCheck . MSG _ KEY ; <nl> <nl> - import java . text . MessageFormat ; <nl> - <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 71 , 7 + 69 , 7 @ @ public class IllegalTokenTextCheckTest <nl> String customMessage = " My custom message " ; <nl> checkConfig . addAttribute ( " message " , customMessage ) ; <nl> final String [ ] expected = { <nl> - " 24 : 28 : " + MessageFormat . format ( customMessage , " a href " ) , <nl> + " 24 : 28 : " + customMessage , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java <nl> index 1e8cb0c . . e2a0d88 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import static org . junit . Assert . fail ; <nl> <nl> import java . io . File ; <nl> import java . net . URI ; <nl> + import java . util . Locale ; <nl> <nl> import org . apache . commons . beanutils . ConversionException ; <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> @ @ - 85 , 7 + 86 , 8 @ @ public class RegexpHeaderCheckTest extends BaseFileSetCheckTestSupport { <nl> try { <nl> String header = " ^ / * * \ \ n * Licensed to the Apache Software Foundation ( ASF ) " ; <nl> instance . setHeader ( header ) ; <nl> - fail ( String . format ( " % s should have been thrown " , ConversionException . class ) ) ; <nl> + fail ( String . format ( Locale . ROOT , " % s should have been thrown " , <nl> + ConversionException . class ) ) ; <nl> } <nl> catch ( ConversionException ex ) { <nl> / / expected <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> index f49bed4 . . f880d6c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import java . nio . charset . StandardCharsets ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> + import java . util . Locale ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> <nl> @ @ - 86 , 7 + 87 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> final int actualIndent = getLineStart ( line , tabWidth ) ; <nl> <nl> if ( actualIndent ! = indentInComment ) { <nl> - throw new IllegalStateException ( String . format ( <nl> + throw new IllegalStateException ( String . format ( Locale . ROOT , <nl> " File \ " % 1 $ s \ " has incorrect indentation in comment . " <nl> + " Line % 2 $ d : comment : % 3 $ d , actual : % 4 $ d . " , <nl> aFileName , <nl> @ @ - 100 , 14 + 101 , 14 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> if ( ! isCommentConsistent ( comment ) ) { <nl> - throw new IllegalStateException ( String . format ( <nl> + throw new IllegalStateException ( String . format ( Locale . ROOT , <nl> " File \ " % 1 $ s \ " has inconsistent comment on line % 2 $ d " , <nl> aFileName , <nl> lineNumber ) ) ; <nl> } <nl> } <nl> else if ( NONEMPTY _ LINE _ REGEX . matcher ( line ) . matches ( ) ) { <nl> - throw new IllegalStateException ( String . format ( <nl> + throw new IllegalStateException ( String . format ( Locale . ROOT , <nl> " File \ " % 1 $ s \ " has no indentation comment or its format " <nl> + " malformed . Error on line : % 2 $ d " , <nl> aFileName ,
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> index c7f88d5 . . 5a94092 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> @ @ - 118 , 7 + 118 , 7 @ @ public class DefaultLogger <nl> sb . append ( " : warning " ) ; <nl> } <nl> sb . append ( " : " ) . append ( message ) ; <nl> - errorWriter . println ( sb . toString ( ) ) ; <nl> + errorWriter . println ( sb ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> index 577d24a . . 4be6ff0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> @ @ - 201 , 7 + 201 , 7 @ @ public final class ModifiedControlVariableCheck extends Check { <nl> checkIdent ( ast ) ; <nl> break ; <nl> default : <nl> - throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast . toString ( ) ) ; <nl> + throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast ) ; <nl> } <nl> } <nl> <nl> @ @ - 244 , 7 + 244 , 7 @ @ public final class ModifiedControlVariableCheck extends Check { <nl> / / we need that Tokens only at visitToken ( ) <nl> break ; <nl> default : <nl> - throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast . toString ( ) ) ; <nl> + throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> index 30b8a4c . . a7b7945 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> @ @ - 375 , 7 + 375 , 7 @ @ public class ImportOrderCheck <nl> } <nl> else { <nl> throw new IllegalStateException ( <nl> - " Unexpected option for static imports : " + abstractOption . toString ( ) ) ; <nl> + " Unexpected option for static imports : " + abstractOption ) ; <nl> } <nl> <nl> lastImportLine = ast . findFirstToken ( TokenTypes . SEMI ) . getLineNo ( ) ;

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 1d35c5c . . fdbff94 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 891 , 12 + 891 , 35 @ @ 
 < exclude > * * / GeneratedJavaLexer . class < / exclude > 
 < exclude > * * / JavadocParser . class < / exclude > 
 < exclude > * * / Main . class < / exclude > 
 + < ! - - Tests related - - > 
 + < exclude > * * / Input * < / exclude > 
 + < exclude > * * / * Input . class < / exclude > 
 + < exclude > * * / New * < / exclude > 
 + < exclude > * * / CompareTreesWithComments . class < / exclude > 
 + < exclude > * * / UpdateClass . class < / exclude > 
 + < exclude > * * / bug * < / exclude > 
 + < exclude > * * / oneMoreClass . class < / exclude > 
 + < exclude > * * / RightCurlyInput _ Other . class < / exclude > 
 + < exclude > * * / JavaNCSSCheckTestInput $ 1 . class < / exclude > 
 + < exclude > * * / test _ * < / exclude > 
 + < exclude > * * / WithInner $ Inner . class < / exclude > 
 + < exclude > * * / Foo * < / exclude > 
 + < exclude > * * / WithAnon $ 1 . class < / exclude > 
 + < exclude > * * / UncommentedMainTest * < / exclude > 
 + < exclude > * * / Temp * < / exclude > 
 + < exclude > * * / Issue * < / exclude > 
 + < exclude > * * / ParenPadWithSpace . class < / exclude > 
 + < exclude > * * / Main1 . class < / exclude > 
 + < exclude > * * / ConfigurationBuilder . class < / exclude > 
 + < exclude > * * / WithAnonymousClass $ 1 . class < / exclude > 
 + < exclude > * * / Test . class < / exclude > 
 < / excludes > 
 < / configuration > 
 < executions > 
 < execution > 
 < goals > 
 < goal > check < / goal > 
 + < goal > testCheck < / goal > 
 < / goals > 
 < / execution > 
 < / executions > 
 diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 index 09fc5b0 . . a9cd406 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 @ @ - 1 , 6 + 1 , 5 @ @ 
 package com . google . checkstyle . test . base ; 
 
 - import static java . text . MessageFormat . format ; 
 import static org . junit . Assert . assertEquals ; 
 
 import java . io . ByteArrayInputStream ; 
 @ @ - 10 , 6 + 9 , 7 @ @ import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 import java . io . LineNumberReader ; 
 import java . nio . charset . StandardCharsets ; 
 + import java . text . MessageFormat ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . List ; 
 @ @ - 163 , 7 + 163 , 9 @ @ public abstract class BaseCheckTestSupport 
 * / 
 protected String getCheckMessage ( Class < ? extends AbstractViolationReporter > aClass , 
 String messageKey , Object . . . arguments ) { 
 - return format ( getCheckMessage ( aClass , messageKey ) , arguments ) ; 
 + final MessageFormat formatter = new MessageFormat ( getCheckMessage ( aClass , messageKey ) , 
 + Locale . ROOT ) ; 
 + return formatter . format ( arguments ) ; 
 } 
 
 / * * 
 @ @ - 175 , 7 + 177 , 8 @ @ public abstract class BaseCheckTestSupport 
 { 
 for ( Map . Entry < String , String > entry : messages . entrySet ( ) ) { 
 if ( messageKey . equals ( entry . getKey ( ) ) ) { 
 - return format ( entry . getValue ( ) , arguments ) ; 
 + final MessageFormat formatter = new MessageFormat ( entry . getValue ( ) , Locale . ROOT ) ; 
 + return formatter . format ( arguments ) ; 
 } 
 } 
 return null ; 
 diff - - git a / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java b / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java 
 index 2fb6ef4 . . 36d845e 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / IndentationConfigurationBuilder . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import java . nio . charset . StandardCharsets ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 + import java . util . Locale ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 
 @ @ - 61 , 7 + 62 , 7 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder 
 final int actualIndent = getLineStart ( line , tabWidth ) ; 
 
 if ( actualIndent ! = indentInComment ) { 
 - throw new IllegalStateException ( String . format ( 
 + throw new IllegalStateException ( String . format ( Locale . ROOT , 
 " File \ " % 1 $ s \ " has incorrect indentation in comment . " 
 + " Line % 2 $ d : comment : % 3 $ d , actual : % 4 $ d . " , 
 aFileName , 
 @ @ - 75 , 14 + 76 , 14 @ @ public class IndentationConfigurationBuilder extends ConfigurationBuilder 
 } 
 
 if ( ! isCommentConsistent ( comment ) ) { 
 - throw new IllegalStateException ( String . format ( 
 + throw new IllegalStateException ( String . format ( Locale . ROOT , 
 " File \ " % 1 $ s \ " has inconsistent comment on line % 2 $ d " , 
 aFileName , 
 lineNumber ) ) ; 
 } 
 } 
 else if ( NONEMPTY _ LINE _ REGEX . matcher ( line ) . matches ( ) ) { 
 - throw new IllegalStateException ( String . format ( 
 + throw new IllegalStateException ( String . format ( Locale . ROOT , 
 " File \ " % 1 $ s \ " has no indentation comment or its format " 
 + " malformed . Error on line : % 2 $ d ( % 3 $ s ) " , 
 aFileName , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksPresentOnAvailableChecksPageTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksPresentOnAvailableChecksPageTest . java 
 index a1d6ed6 . . 9b2d3af 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksPresentOnAvailableChecksPageTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksPresentOnAvailableChecksPageTest . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . io . File ; 
 import java . io . IOException ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 + import java . util . Locale ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 76 , 7 + 77 , 7 @ @ public class AllChecksPresentOnAvailableChecksPageTest { 
 } 
 
 private static boolean isPresent ( String availableChecks , String checkName ) { 
 - final String linkPattern = String . format ( LINK _ TEMPLATE , checkName ) ; 
 + final String linkPattern = String . format ( Locale . ROOT , LINK _ TEMPLATE , checkName ) ; 
 return availableChecks . matches ( linkPattern ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 index cf05125 . . 84aa467 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . nio . file . Path ; 
 import java . nio . file . Paths ; 
 import java . util . Arrays ; 
 import java . util . HashSet ; 
 + import java . util . Locale ; 
 import java . util . Set ; 
 
 import javax . xml . parsers . DocumentBuilder ; 
 @ @ - 100 , 8 + 101 , 9 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 final int [ ] acceptableTokens = testedCheck . getAcceptableTokens ( ) ; 
 
 if ( ! isSubset ( defaultTokens , acceptableTokens ) ) { 
 - String errorMessage = String . format ( " % s ' s default tokens must be a subset " 
 - + " of acceptable tokens . " , check . getName ( ) ) ; 
 + String errorMessage = String . format ( Locale . ROOT , 
 + " % s ' s default tokens must be a subset " 
 + + " of acceptable tokens . " , check . getName ( ) ) ; 
 Assert . fail ( errorMessage ) ; 
 } 
 } 
 @ @ - 119 , 8 + 121 , 9 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 final int [ ] acceptableTokens = testedCheck . getAcceptableTokens ( ) ; 
 
 if ( ! isSubset ( requiredTokens , acceptableTokens ) ) { 
 - String errorMessage = String . format ( " % s ' s required tokens must be a subset " 
 - + " of acceptable tokens . " , check . getName ( ) ) ; 
 + String errorMessage = String . format ( Locale . ROOT , 
 + " % s ' s required tokens must be a subset " 
 + + " of acceptable tokens . " , check . getName ( ) ) ; 
 Assert . fail ( errorMessage ) ; 
 } 
 } 
 @ @ - 138 , 8 + 141 , 9 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 final int [ ] requiredTokens = testedCheck . getRequiredTokens ( ) ; 
 
 if ( ! isSubset ( requiredTokens , defaultTokens ) ) { 
 - String errorMessage = String . format ( " % s ' s required tokens must be a subset " 
 - + " of default tokens . " , check . getName ( ) ) ; 
 + String errorMessage = String . format ( Locale . ROOT , 
 + " % s ' s required tokens must be a subset " 
 + + " of default tokens . " , check . getName ( ) ) ; 
 Assert . fail ( errorMessage ) ; 
 } 
 } 
 @ @ - 155 , 7 + 159 , 8 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 
 for ( String check : checksNames ) { 
 if ( ! checksReferencedInConfig . contains ( check ) ) { 
 - String errorMessage = String . format ( " % s is not referenced in checkstyle _ checks . xml " , check ) ; 
 + String errorMessage = String . format ( Locale . ROOT , 
 + " % s is not referenced in checkstyle _ checks . xml " , check ) ; 
 Assert . fail ( errorMessage ) ; 
 } 
 } 
 @ @ - 172 , 7 + 177 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 
 for ( String moduleName : checkstyleModulesNames ) { 
 if ( ! modulesNamesWhichHaveXdocs . contains ( moduleName ) ) { 
 - final String missingModuleMessage = String . format ( 
 + final String missingModuleMessage = String . format ( Locale . ROOT , 
 " Module % s does not have xdoc documentation . " , 
 moduleName ) ; 
 Assert . fail ( missingModuleMessage ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 index d51792f . . 4ef0ea6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 @ @ - 1 , 6 + 1 , 5 @ @ 
 package com . puppycrawl . tools . checkstyle ; 
 
 - import static java . text . MessageFormat . format ; 
 import static org . junit . Assert . assertEquals ; 
 
 import java . io . ByteArrayInputStream ; 
 @ @ - 11 , 6 + 10 , 7 @ @ import java . io . InputStreamReader ; 
 import java . io . LineNumberReader ; 
 import java . io . OutputStream ; 
 import java . nio . charset . StandardCharsets ; 
 + import java . text . MessageFormat ; 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . Locale ; 
 @ @ - 172 , 6 + 172 , 8 @ @ public class BaseCheckTestSupport { 
 } catch ( IOException e ) { 
 return null ; 
 } 
 - return format ( pr . getProperty ( messageKey ) , arguments ) ; 
 + final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , 
 + Locale . ROOT ) ; 
 + return formatter . format ( arguments ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 46f0cc4 . . 2659ec8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 82 , 7 + 82 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) { 
 - String usage = String . format ( " Unrecognized option : - w % n " 
 + String usage = String . format ( Locale . ROOT , " Unrecognized option : - w % n " 
 + " usage : java com . puppycrawl . tools . checkstyle . Main [ options ] - c < config . xml > % n " 
 + " file . . . % n " 
 + " - c < arg > Sets the check configuration file to use . % n " 
 @ @ - 135 , 8 + 135 , 8 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) { 
 - assertEquals ( 
 - String . format ( " Unable to find : src / main / resources / non _ existing _ config . xml % n " 
 + assertEquals ( String . format ( Locale . ROOT , 
 + " Unable to find : src / main / resources / non _ existing _ config . xml % n " 
 + " Checkstyle ends with 1 errors . % n " ) , 
 systemOut . getLog ( ) ) ; 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 @ @ - 152 , 7 + 152 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) { 
 - assertEquals ( String . format ( " Invalid output format . " 
 + assertEquals ( String . format ( Locale . ROOT , " Invalid output format . " 
 + " Found ' xmlp ' but expected ' plain ' or ' xml ' . % n " ) , systemOut . getLog ( ) ) ; 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 @ @ - 187 , 7 + 187 , 7 @ @ public class MainTest { 
 + " how to configure short name usage http : / / checkstyle . sourceforge . net / config . html # Packages . " 
 + " Please also recheck that provided ClassLoader to Checker is configured correctly . " ; 
 final String expectedExceptionMessage = 
 - String . format ( " cannot initialize module TreeWalker - % 1 $ s % n " 
 + String . format ( Locale . ROOT , " cannot initialize module TreeWalker - % 1 $ s % n " 
 + " Cause : com . puppycrawl . tools . checkstyle . api . CheckstyleException : % 1 $ s % n " 
 + " Checkstyle ends with 1 errors . % n " , cause ) ; 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ @ - 208 , 7 + 208 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) { 
 - assertEquals ( String . format ( " Starting audit . . . % n " 
 + assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " Audit done . % n " ) , systemOut . getLog ( ) ) ; 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 @ @ - 230 , 7 + 230 , 8 @ @ public class MainTest { 
 final ResourceBundle compilationProperties = 
 ResourceBundle . getBundle ( " checkstylecompilation " ) ; 
 String version = compilationProperties . getString ( " checkstyle . compile . version " ) ; 
 - assertEquals ( String . format ( " < ? xml version = \ " 1 . 0 \ " encoding = \ " UTF - 8 \ " ? > % n " 
 + assertEquals ( String . format ( Locale . ROOT , 
 + " < ? xml version = \ " 1 . 0 \ " encoding = \ " UTF - 8 \ " ? > % n " 
 + " < checkstyle version = \ " % s \ " > % n " 
 + " < file name = \ " % s \ " > % n " 
 + " < / file > % n " 
 @ @ - 249 , 7 + 250 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) { 
 - assertEquals ( String . format ( " Starting audit . . . % n " 
 + assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " Audit done . % n " ) , systemOut . getLog ( ) ) ; 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 @ @ - 269 , 7 + 270 , 7 @ @ public class MainTest { 
 String expectedPath = currentPath 
 + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 . replace ( " / " , File . separator ) ; 
 - assertEquals ( String . format ( " Starting audit . . . % n " 
 + assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " % 1 $ s : 3 : 14 : " 
 + " warning : Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 + " % 1 $ s : 5 : 7 : " 
 @ @ - 294 , 7 + 295 , 7 @ @ public class MainTest { 
 String expectedPath = currentPath 
 + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 . replace ( " / " , File . separator ) ; 
 - assertEquals ( String . format ( " Starting audit . . . % n " 
 + assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " % 1 $ s : 3 : 14 : error : " 
 + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 + " % 1 $ s : 5 : 7 : error : " 
 @ @ - 396 , 7 + 397 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) { 
 - assertEquals ( String . format ( " Starting audit . . . % n " 
 + assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " Audit done . % n " ) , systemOut . getLog ( ) ) ; 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 @ @ - 432 , 10 + 433 , 10 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) { 
 - assertTrue ( systemOut . getLog ( ) . startsWith ( String . format ( 
 + assertTrue ( systemOut . getLog ( ) . startsWith ( String . format ( Locale . ROOT , 
 " unable to parse configuration stream - Content is not allowed in prolog . : 7 : 1 % n " 
 + " Cause : org . xml . sax . SAXParseException ; systemId : file : " ) ) ) ; 
 - assertTrue ( systemOut . getLog ( ) . endsWith ( String . format ( 
 + assertTrue ( systemOut . getLog ( ) . endsWith ( String . format ( Locale . ROOT , 
 " com / puppycrawl / tools / checkstyle / config - Incorrect . xml ; lineNumber : 7 ; columnNumber : 1 ; " 
 + " Content is not allowed in prolog . % n " 
 + " Checkstyle ends with 1 errors . % n " ) ) ) ; 
 @ @ - 529 , 7 + 530 , 7 @ @ public class MainTest { 
 sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; 
 String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 80 ) . " ; 
 for ( String [ ] outputValue : outputValues ) { 
 - String line = String . format ( format , 
 + String line = String . format ( Locale . ROOT , format , 
 expectedPath + outputValue [ 0 ] , outputValue [ 1 ] , 
 outputValue [ 2 ] ) ; 
 sb . append ( line ) . append ( System . getProperty ( " line . separator " ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 index e2be50d . . e7fa673 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import static org . junit . Assert . assertNull ; 
 import java . io . File ; 
 import java . io . FileFilter ; 
 import java . text . MessageFormat ; 
 + import java . util . Locale ; 
 
 import org . junit . Test ; 
 
 @ @ - 147 , 13 + 148 , 13 @ @ public class DetailASTTest { 
 Object [ ] params = { 
 node , parent , prev , filename , root , 
 } ; 
 - String badParentMsg = MessageFormat . format ( 
 - " Bad parent node = { 0 } parent = { 1 } filename = { 3 } root = { 4 } " , 
 - params ) ; 
 + MessageFormat badParentFormatter = new MessageFormat ( 
 + " Bad parent node = { 0 } parent = { 1 } filename = { 3 } root = { 4 } " , Locale . ROOT ) ; 
 + String badParentMsg = badParentFormatter . format ( params ) ; 
 assertEquals ( badParentMsg , parent , node . getParent ( ) ) ; 
 - String badPrevMsg = MessageFormat . format ( 
 - " Bad prev node = { 0 } prev = { 2 } parent = { 1 } filename = { 3 } root = { 4 } " , 
 - params ) ; 
 + MessageFormat badPrevFormatter = new MessageFormat ( 
 + " Bad prev node = { 0 } prev = { 2 } parent = { 1 } filename = { 3 } root = { 4 } " , Locale . ROOT ) ; 
 + String badPrevMsg = badPrevFormatter . format ( params ) ; 
 assertEquals ( badPrevMsg , prev , node . getPreviousSibling ( ) ) ; 
 
 if ( node . getFirstChild ( ) ! = null ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java 
 index 3984b1c . . 726dfae 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTokenTextCheckTest . java 
 @ @ - 21 , 8 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalTokenTextCheck . MSG _ KEY ; 
 
 - import java . text . MessageFormat ; 
 - 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 @ @ - 71 , 7 + 69 , 7 @ @ public class IllegalTokenTextCheckTest 
 String customMessage = " My custom message " ; 
 checkConfig . addAttribute ( " message " , customMessage ) ; 
 final String [ ] expected = { 
 - " 24 : 28 : " + MessageFormat . format ( customMessage , " a href " ) , 
 + " 24 : 28 : " + customMessage , 
 } ; 
 verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java 
 index 1e8cb0c . . e2a0d88 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import static org . junit . Assert . fail ; 
 
 import java . io . File ; 
 import java . net . URI ; 
 + import java . util . Locale ; 
 
 import org . apache . commons . beanutils . ConversionException ; 
 import org . apache . commons . lang3 . ArrayUtils ; 
 @ @ - 85 , 7 + 86 , 8 @ @ public class RegexpHeaderCheckTest extends BaseFileSetCheckTestSupport { 
 try { 
 String header = " ^ / * * \ \ n * Licensed to the Apache Software Foundation ( ASF ) " ; 
 instance . setHeader ( header ) ; 
 - fail ( String . format ( " % s should have been thrown " , ConversionException . class ) ) ; 
 + fail ( String . format ( Locale . ROOT , " % s should have been thrown " , 
 + ConversionException . class ) ) ; 
 } 
 catch ( ConversionException ex ) { 
 / / expected 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 index f49bed4 . . f880d6c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import java . nio . charset . StandardCharsets ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 + import java . util . Locale ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 
 @ @ - 86 , 7 + 87 , 7 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 final int actualIndent = getLineStart ( line , tabWidth ) ; 
 
 if ( actualIndent ! = indentInComment ) { 
 - throw new IllegalStateException ( String . format ( 
 + throw new IllegalStateException ( String . format ( Locale . ROOT , 
 " File \ " % 1 $ s \ " has incorrect indentation in comment . " 
 + " Line % 2 $ d : comment : % 3 $ d , actual : % 4 $ d . " , 
 aFileName , 
 @ @ - 100 , 14 + 101 , 14 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 } 
 
 if ( ! isCommentConsistent ( comment ) ) { 
 - throw new IllegalStateException ( String . format ( 
 + throw new IllegalStateException ( String . format ( Locale . ROOT , 
 " File \ " % 1 $ s \ " has inconsistent comment on line % 2 $ d " , 
 aFileName , 
 lineNumber ) ) ; 
 } 
 } 
 else if ( NONEMPTY _ LINE _ REGEX . matcher ( line ) . matches ( ) ) { 
 - throw new IllegalStateException ( String . format ( 
 + throw new IllegalStateException ( String . format ( Locale . ROOT , 
 " File \ " % 1 $ s \ " has no indentation comment or its format " 
 + " malformed . Error on line : % 2 $ d " , 
 aFileName ,

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 index c7f88d5 . . 5a94092 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 @ @ - 118 , 7 + 118 , 7 @ @ public class DefaultLogger 
 sb . append ( " : warning " ) ; 
 } 
 sb . append ( " : " ) . append ( message ) ; 
 - errorWriter . println ( sb . toString ( ) ) ; 
 + errorWriter . println ( sb ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 index 577d24a . . 4be6ff0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 @ @ - 201 , 7 + 201 , 7 @ @ public final class ModifiedControlVariableCheck extends Check { 
 checkIdent ( ast ) ; 
 break ; 
 default : 
 - throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast . toString ( ) ) ; 
 + throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast ) ; 
 } 
 } 
 
 @ @ - 244 , 7 + 244 , 7 @ @ public final class ModifiedControlVariableCheck extends Check { 
 / / we need that Tokens only at visitToken ( ) 
 break ; 
 default : 
 - throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast . toString ( ) ) ; 
 + throw new IllegalStateException ( ILLEGAL _ TYPE _ OF _ TOKEN + ast ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 index 30b8a4c . . a7b7945 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 @ @ - 375 , 7 + 375 , 7 @ @ public class ImportOrderCheck 
 } 
 else { 
 throw new IllegalStateException ( 
 - " Unexpected option for static imports : " + abstractOption . toString ( ) ) ; 
 + " Unexpected option for static imports : " + abstractOption ) ; 
 } 
 
 lastImportLine = ast . findFirstToken ( TokenTypes . SEMI ) . getLineNo ( ) ;
