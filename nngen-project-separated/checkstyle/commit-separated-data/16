BLEU SCORE: 0.020980574531482755

TEST MSG: Issue # 6586 : aligned javadoc / xdoc for FallThrough
GENERATED MSG: Applied patch 1348873 which implements rfe 1345691

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> index 7b4c289 . . 8ff8053 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> @ @ - 29 , 14 + 29 , 42 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> <nl> / * * <nl> - * Checks for fall through in switch statements <nl> - * Finds locations where a case < b > contains < / b > Java code - <nl> - * but lacks a break , return , throw or continue statement . <nl> + * < p > <nl> + * Checks for fall - through in { @ code switch } statements . <nl> + * Finds locations where a { @ code case } < b > contains < / b > Java code but lacks a <nl> + * { @ code break } , { @ code return } , { @ code throw } or { @ code continue } statement . <nl> + * < / p > <nl> + * < p > <nl> + * The check honors special comments to suppress the warning . <nl> + * By default the text " fallthru " , " fall through " , " fallthrough " , <nl> + * " falls through " and " fallsthrough " are recognized ( case sensitive ) . <nl> + * The comment containing these words must be all on one line , <nl> + * and must be on the last non - empty line before the { @ code case } triggering <nl> + * the warning or on the same line before the { @ code case } ( ugly , but possible ) . <nl> + * < / p > <nl> + * < pre > <nl> + * switch ( i ) { <nl> + * case 0 : <nl> + * i + + ; / / fall through <nl> * <nl> + * case 1 : <nl> + * i + + ; <nl> + * / / falls through <nl> + * case 2 : <nl> + * case 3 : <nl> + * case 4 : { <nl> + * i + + ; <nl> + * } <nl> + * / / fallthrough <nl> + * case 5 : <nl> + * i + + ; <nl> + * & # 47 ; * fallthru * & # 47 ; case 6 : <nl> + * i + + <nl> + * break ; <nl> + * } <nl> + * < / pre > <nl> * < p > <nl> - * The check honors special comments to suppress warnings about <nl> - * the fall through . By default the comments " fallthru " , <nl> - * " fall through " , " falls through " and " fallthrough " are recognized . <nl> + * Note : The check assumes that there is no unreachable code in the { @ code case } . <nl> * < / p > <nl> * < p > <nl> * The following fragment of code will NOT trigger the check , <nl> @ @ - 52 , 21 + 80 , 33 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> * case 6 : <nl> * break ; <nl> * < / pre > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code checkLastCaseGroup } - Control whether the last case group must be checked . <nl> + * Default value is { @ code false } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code reliefPattern } - Define the RegExp to match the relief comment that suppresses <nl> + * the warning about a fall through . <nl> + * Default value is { @ code " fallthru | falls ? ? through " } . <nl> + * < / li > <nl> + * < / ul > <nl> * < p > <nl> - * The recognized relief comment can be configured with the property <nl> - * { @ code reliefPattern } . Default value of this regular expression <nl> - * is " fallthru | fall through | fallthrough | falls through " . <nl> + * To configure the check : <nl> * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; FallThrough & quot ; / & gt ; <nl> + * < / pre > <nl> * < p > <nl> - * An example of how to configure the check is : <nl> + * or <nl> * < / p > <nl> * < pre > <nl> - * & lt ; module name = " FallThrough " & gt ; <nl> - * & lt ; property name = & quot ; reliefPattern & quot ; <nl> - * value = & quot ; Fall Through & quot ; / & gt ; <nl> + * & lt ; module name = & quot ; FallThrough & quot ; & gt ; <nl> + * & lt ; property name = & quot ; reliefPattern & quot ; value = & quot ; continue in next case & quot ; / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> * <nl> + * @ since 3 . 4 <nl> * / <nl> @ StatelessCheck <nl> public class FallThroughCheck extends AbstractCheck { <nl> @ @ - 83 , 10 + 123 , 13 @ @ public class FallThroughCheck extends AbstractCheck { <nl> * / <nl> public static final String MSG _ FALL _ THROUGH _ LAST = " fall . through . last " ; <nl> <nl> - / * * Do we need to check last case group . * / <nl> + / * * Control whether the last case group must be checked . * / <nl> private boolean checkLastCaseGroup ; <nl> <nl> - / * * Relief regexp to allow fall through to the next case branch . * / <nl> + / * * <nl> + * Define the RegExp to match the relief comment that suppresses <nl> + * the warning about a fall through . <nl> + * / <nl> private Pattern reliefPattern = Pattern . compile ( " fallthru | falls ? ? through " ) ; <nl> <nl> @ Override <nl> @ @ - 105 , 7 + 148 , 8 @ @ public class FallThroughCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Set the relief pattern . <nl> + * Setter to define the RegExp to match the relief comment that suppresses <nl> + * the warning about a fall through . <nl> * <nl> * @ param pattern <nl> * The regular expression pattern . <nl> @ @ - 115 , 7 + 159 , 7 @ @ public class FallThroughCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Configures whether we need to check last case group or not . <nl> + * Setter to control whether the last case group must be checked . <nl> * @ param value new value of the property . <nl> * / <nl> public void setCheckLastCaseGroup ( boolean value ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 52b23ec . . 4900147 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 90 , 6 + 90 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " EmptyStatement " , <nl> " EqualsAvoidNull " , <nl> " EqualsHashCode " , <nl> + " FallThrough " , <nl> " FinalLocalVariable " , <nl> " IllegalInstantiation " , <nl> " IllegalTokenText " , <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index a1e840c . . 27a28fc 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 996 , 8 + 996 , 8 @ @ public class Test { <nl> < / section > <nl> <nl> < section name = " FallThrough " > <nl> + < p > Since Checkstyle 3 . 4 < / p > <nl> < subsection name = " Description " id = " FallThrough _ Description " > <nl> - < p > Since Checkstyle 3 . 4 < / p > <nl> < p > <nl> Checks for fall - through in < code > switch < / code > <nl> statements . Finds locations where a < code > case < / code > <nl> @ @ - 1016 , 7 + 1016 , 7 @ @ public class Test { <nl> ( ugly , but possible ) . <nl> < / p > <nl> < source > <nl> - switch ( i ) { <nl> + switch ( i ) { <nl> case 0 : <nl> i + + ; / / fall through <nl> <nl> @ @ - 1040 , 6 + 1040 , 20 @ @ case 5 : <nl> Note : The check assumes that there is no unreachable <nl> code in the < code > case < / code > . <nl> < / p > <nl> + < p > <nl> + The following fragment of code will NOT trigger the check , <nl> + because of the comment " fallthru " and absence of any Java code <nl> + in case 5 . <nl> + < / p > <nl> + < pre > <nl> + case 3 : <nl> + x = 2 ; <nl> + / / fallthru <nl> + case 4 : <nl> + case 5 : <nl> + case 6 : <nl> + break ; <nl> + < / pre > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " id = " FallThrough _ Properties " > <nl> @ @ - 1054 , 7 + 1068 , 7 @ @ case 5 : <nl> < tr > <nl> < td > checkLastCaseGroup < / td > <nl> < td > <nl> - Whether the last case group must be checked . <nl> + Control whether the last case group must be checked . <nl> < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > < code > false < / code > < / td > <nl> @ @ - 1063 , 7 + 1077 , 7 @ @ case 5 : <nl> < tr > <nl> < td > reliefPattern < / td > <nl> < td > <nl> - Regular expression to match the relief comment that suppresses <nl> + Define the RegExp to match the relief comment that suppresses <nl> the warning about a fall through . <nl> < / td > <nl> < td > < a href = " property _ types . html # regexp " > Regular Expression < / a > < / td >
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index c3d569e . . c3b0dc8 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 48 , 6 + 48 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> import com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaRecognizer ; <nl> import com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaLexer ; <nl> <nl> + import org . apache . commons . logging . Log ; <nl> + import org . apache . commons . logging . LogFactory ; <nl> + <nl> / * * <nl> * Responsible for walking an abstract syntax tree and notifying interested <nl> * checks at each each node . <nl> @ @ - 125 , 11 + 128 , 15 @ @ public final class TreeWalker <nl> / * * a factory for creating submodules ( i . e . the Checks ) * / <nl> private ModuleFactory mModuleFactory ; <nl> <nl> - / * * contrals whether we should use recursive or iterative <nl> + / * * controls whether we should use recursive or iterative <nl> * algorithm for tree processing . <nl> * / <nl> private final boolean mRecursive ; <nl> <nl> + / * * logger for debug purpose * / <nl> + private static Log sLog = <nl> + LogFactory . getLog ( " com . puppycrawl . tools . checkstyle . TreeWalker " ) ; <nl> + <nl> / * * <nl> * Creates a new < code > TreeWalker < / code > instance . <nl> * / <nl> @ @ - 143 , 12 + 150 , 10 @ @ public final class TreeWalker <nl> System . getProperty ( " checkstyle . use . recursive . algorithm " , " true " ) ; <nl> mRecursive = " true " . equals ( recursive ) ; <nl> if ( mRecursive ) { <nl> - Utils . getExceptionLogger ( ) <nl> - . debug ( " TreeWalker uses recursive algorithm " ) ; <nl> + sLog . debug ( " TreeWalker uses recursive algorithm " ) ; <nl> } <nl> else { <nl> - Utils . getExceptionLogger ( ) <nl> - . debug ( " TreeWalker uses iterative algorithm " ) ; <nl> + sLog . debug ( " TreeWalker uses iterative algorithm " ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> index cf9f3c0 . . 701dd25 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> @ @ - 25 , 7 + 25 , 10 @ @ import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> import java . util . HashSet ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> import java . util . Set ; <nl> + import java . util . Vector ; <nl> <nl> / * * <nl> * Abstract class that endeavours to maintain type information for the Java <nl> @ @ - 35 , 8 + 38 , 7 @ @ import java . util . Set ; <nl> * @ author Oliver Burn <nl> * @ version 1 . 0 <nl> * / <nl> - public abstract class AbstractTypeAwareCheck <nl> - extends Check <nl> + public abstract class AbstractTypeAwareCheck extends Check <nl> { <nl> / * * imports details * * / <nl> private Set mImports = new HashSet ( ) ; <nl> @ @ - 50 , 6 + 52 , 9 @ @ public abstract class AbstractTypeAwareCheck <nl> / * * < code > ClassResolver < / code > instance for current tree . * / <nl> private ClassResolver mClassResolver ; <nl> <nl> + / * * Stack of maps for type params . * / <nl> + private Vector mTypeParams = new Vector ( ) ; <nl> + <nl> / * * <nl> * Called to process an AST when visiting it . <nl> * @ param aAST the AST to process . Guaranteed to not be PACKAGE _ DEF or <nl> @ @ - 58 , 6 + 63 , 17 @ @ public abstract class AbstractTypeAwareCheck <nl> protected abstract void processAST ( DetailAST aAST ) ; <nl> <nl> / * * @ see com . puppycrawl . tools . checkstyle . api . Check * / <nl> + public final int [ ] getRequiredTokens ( ) <nl> + { <nl> + return new int [ ] { <nl> + TokenTypes . PACKAGE _ DEF , <nl> + TokenTypes . IMPORT , <nl> + TokenTypes . CLASS _ DEF , <nl> + TokenTypes . ENUM _ DEF , <nl> + } ; <nl> + } <nl> + <nl> + / * * @ see com . puppycrawl . tools . checkstyle . api . Check * / <nl> public void beginTree ( DetailAST aRootAST ) <nl> { <nl> mPackageFullIdent = FullIdent . createFullIdent ( null ) ; <nl> @ @ - 66 , 6 + 82 , 7 @ @ public abstract class AbstractTypeAwareCheck <nl> mImports . add ( " java . lang . * " ) ; <nl> mClassResolver = null ; <nl> mCurrentClass = " " ; <nl> + mTypeParams . clear ( ) ; <nl> } <nl> <nl> / * * @ see com . puppycrawl . tools . checkstyle . api . Check * / <nl> @ @ - 83 , 6 + 100 , 9 @ @ public abstract class AbstractTypeAwareCheck <nl> processClass ( aAST ) ; <nl> } <nl> else { <nl> + if ( aAST . getType ( ) = = TokenTypes . METHOD _ DEF ) { <nl> + processTypeParams ( aAST ) ; <nl> + } <nl> processAST ( aAST ) ; <nl> } <nl> } <nl> @ @ - 106 , 6 + 126 , 10 @ @ public abstract class AbstractTypeAwareCheck <nl> else { <nl> mCurrentClass = mCurrentClass . substring ( 0 , dotIdx ) ; <nl> } <nl> + mTypeParams . remove ( mTypeParams . size ( ) - 1 ) ; <nl> + } <nl> + else if ( aAST . getType ( ) = = TokenTypes . METHOD _ DEF ) { <nl> + mTypeParams . remove ( mTypeParams . size ( ) - 1 ) ; <nl> } <nl> else if ( aAST . getType ( ) ! = TokenTypes . PACKAGE _ DEF <nl> & & aAST . getType ( ) ! = TokenTypes . IMPORT ) <nl> @ @ - 241 , 8 + 265 , 7 @ @ public abstract class AbstractTypeAwareCheck <nl> * @ param aCurrentClass name of surrounding class . <nl> * @ return < code > Class < / code > for a ident . <nl> * / <nl> - protected final Class tryLoadClass ( FullIdent aIdent , <nl> - String aCurrentClass ) <nl> + protected final Class tryLoadClass ( Token aIdent , String aCurrentClass ) <nl> { <nl> final Class clazz = resolveClass ( aIdent . getText ( ) , aCurrentClass ) ; <nl> if ( clazz = = null ) { <nl> @ @ - 256 , 7 + 279 , 7 @ @ public abstract class AbstractTypeAwareCheck <nl> * Abstract , should be overrided in subclasses . <nl> * @ param aIdent class name for which we can no load class . <nl> * / <nl> - protected abstract void logLoadError ( FullIdent aIdent ) ; <nl> + protected abstract void logLoadError ( Token aIdent ) ; <nl> <nl> / * * <nl> * Common implementation for logLoadError ( ) method . <nl> @ @ - 301 , 14 + 324 , 51 @ @ public abstract class AbstractTypeAwareCheck <nl> } <nl> <nl> / * * <nl> + * Process type params ( if any ) for given class , enum or method . <nl> + * @ param aAST class , enum or method to process . <nl> + * / <nl> + private void processTypeParams ( DetailAST aAST ) <nl> + { <nl> + final DetailAST typeParams = <nl> + aAST . findFirstToken ( TokenTypes . TYPE _ PARAMETERS ) ; <nl> + <nl> + Map paramsMap = new HashMap ( ) ; <nl> + mTypeParams . add ( paramsMap ) ; <nl> + <nl> + if ( typeParams = = null ) { <nl> + return ; <nl> + } <nl> + <nl> + for ( DetailAST child = ( DetailAST ) typeParams . getFirstChild ( ) ; <nl> + child ! = null ; <nl> + child = ( DetailAST ) child . getNextSibling ( ) ) <nl> + { <nl> + if ( child . getType ( ) = = TokenTypes . TYPE _ PARAMETER ) { <nl> + DetailAST param = child ; <nl> + String alias = param . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> + DetailAST bounds = <nl> + param . findFirstToken ( TokenTypes . TYPE _ UPPER _ BOUNDS ) ; <nl> + if ( bounds ! = null ) { <nl> + FullIdent name = FullIdent . createFullIdentBelow ( bounds ) ; <nl> + ClassInfo ci = <nl> + createClassInfo ( new Token ( name ) , getCurrentClassName ( ) ) ; <nl> + paramsMap . put ( alias , ci ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Processes class definition . <nl> - * @ param aAST class defition to process . <nl> + * @ param aAST class definition to process . <nl> * / <nl> private void processClass ( DetailAST aAST ) <nl> { <nl> final DetailAST ident = aAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> mCurrentClass + = ( " " . equals ( mCurrentClass ) ? " " : " $ " ) <nl> + ident . getText ( ) ; <nl> + <nl> + processTypeParams ( aAST ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 321 , 54 + 381 , 107 @ @ public abstract class AbstractTypeAwareCheck <nl> } <nl> <nl> / * * <nl> - * Contains class ' s < code > FullIdent < / code > <nl> - * and < code > Class < / code > object if we can load it . <nl> + * Creates class info for given name . <nl> + * @ param aName name of type . <nl> + * @ param aSurroundingClass name of surrounding class . <nl> + * @ return class infor for given name . <nl> + * / <nl> + protected final ClassInfo createClassInfo ( final Token aName , <nl> + final String aSurroundingClass ) <nl> + { <nl> + ClassInfo ci = findClassAlias ( aName . getText ( ) ) ; <nl> + if ( ci ! = null ) { <nl> + return new ClassAlias ( aName , ci ) ; <nl> + } <nl> + return new RegularClass ( aName , aSurroundingClass , this ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Looking if a given name is alias . <nl> + * @ param aName given name <nl> + * @ return ClassInfo for alias if it exists , null otherwise <nl> * / <nl> - protected class ClassInfo <nl> + protected final ClassInfo findClassAlias ( final String aName ) <nl> + { <nl> + ClassInfo ci = null ; <nl> + for ( int i = mTypeParams . size ( ) - 1 ; i > = 0 ; i - - ) { <nl> + Map paramMap = ( Map ) mTypeParams . get ( i ) ; <nl> + ci = ( ClassInfo ) paramMap . get ( aName ) ; <nl> + if ( ci ! = null ) { <nl> + break ; <nl> + } <nl> + } <nl> + return ci ; <nl> + } <nl> + <nl> + / * * <nl> + * Contains class ' s < code > Token < / code > . <nl> + * / <nl> + protected abstract static class ClassInfo <nl> { <nl> / * * < code > FullIdent < / code > associated with this class . * / <nl> - private FullIdent mName ; <nl> - / * * < code > Class < / code > object of this class if it ' s loadable . * / <nl> - private Class mClass ; <nl> - / * * name of surrounding class . * / <nl> - private String mSurroundingClass ; <nl> - / * * is class loadable . * / <nl> - private boolean mIsLoadable ; <nl> + private final Token mName ; <nl> + <nl> + / * * @ return class name * / <nl> + public final Token getName ( ) <nl> + { <nl> + return mName ; <nl> + } <nl> + <nl> + / * * @ return < code > Class < / code > associated with an object . * / <nl> + public abstract Class getClazz ( ) ; <nl> <nl> / * * <nl> - * Creates new instance of of class information object . <nl> - * @ param aName < code > FullIdent < / code > associated with new object . <nl> - * @ param aSurroundingClass name of current surrounding class . <nl> + * Creates new instance of class inforamtion object . <nl> + * @ param aName token which represents class name . <nl> * / <nl> - public ClassInfo ( final FullIdent aName , final String aSurroundingClass ) <nl> + protected ClassInfo ( final Token aName ) <nl> { <nl> if ( aName = = null ) { <nl> throw new NullPointerException ( <nl> " ClassInfo ' s name should be non - null " ) ; <nl> } <nl> mName = aName ; <nl> - mSurroundingClass = aSurroundingClass ; <nl> - mIsLoadable = true ; <nl> } <nl> + } <nl> <nl> - / * * @ return class name * / <nl> - public final FullIdent getName ( ) <nl> + / * * Represents regular classes / enumes . * / <nl> + private static final class RegularClass extends ClassInfo <nl> + { <nl> + / * * name of surrounding class . * / <nl> + private String mSurroundingClass ; <nl> + / * * is class loadable . * / <nl> + private boolean mIsLoadable = true ; <nl> + / * * < code > Class < / code > object of this class if it ' s loadable . * / <nl> + private Class mClass ; <nl> + / * * the check we use to resolve classes . * / <nl> + private final AbstractTypeAwareCheck mCheck ; <nl> + <nl> + / * * <nl> + * Creates new instance of of class information object . <nl> + * @ param aName < code > FullIdent < / code > associated with new object . <nl> + * @ param aSurroundingClass name of current surrounding class . <nl> + * @ param aCheck the check we use to load class . <nl> + * / <nl> + private RegularClass ( final Token aName , <nl> + final String aSurroundingClass , <nl> + final AbstractTypeAwareCheck aCheck ) <nl> { <nl> - return mName ; <nl> + super ( aName ) ; <nl> + mSurroundingClass = aSurroundingClass ; <nl> + mCheck = aCheck ; <nl> } <nl> - <nl> / * * @ return if class is loadable ot not . * / <nl> - public final boolean isLoadable ( ) <nl> + private boolean isLoadable ( ) <nl> { <nl> return mIsLoadable ; <nl> } <nl> <nl> / * * @ return < code > Class < / code > associated with an object . * / <nl> - public final Class getClazz ( ) <nl> + public Class getClazz ( ) <nl> { <nl> if ( isLoadable ( ) & & mClass = = null ) { <nl> - setClazz ( AbstractTypeAwareCheck . this . <nl> - tryLoadClass ( getName ( ) , mSurroundingClass ) ) ; <nl> + setClazz ( mCheck . tryLoadClass ( getName ( ) , mSurroundingClass ) ) ; <nl> } <nl> return mClass ; <nl> } <nl> @ @ - 377 , 10 + 490 , 98 @ @ public abstract class AbstractTypeAwareCheck <nl> * Associates < code > Class < / code > with an object . <nl> * @ param aClass < code > Class < / code > to associate with . <nl> * / <nl> - public final void setClazz ( Class aClass ) <nl> + private void setClazz ( Class aClass ) <nl> { <nl> mClass = aClass ; <nl> mIsLoadable = ( mClass ! = null ) ; <nl> } <nl> + <nl> + / * * { @ inheritDoc } * / <nl> + public String toString ( ) <nl> + { <nl> + return " RegularClass [ name = " + getName ( ) <nl> + + " , in class = " + mSurroundingClass <nl> + + " , loadable = " + mIsLoadable <nl> + + " , class = " + mClass + " ] " ; <nl> + } <nl> + } <nl> + <nl> + / * * Represents type param which is " alias " for real type . * / <nl> + private static class ClassAlias extends ClassInfo <nl> + { <nl> + / * * Class information associated with the alias . * / <nl> + private final ClassInfo mClassInfo ; <nl> + <nl> + / * * <nl> + * Creates nnew instance of the class . <nl> + * @ param aName token which represents name of class alias . <nl> + * @ param aClassInfo class information associated with the alias . <nl> + * / <nl> + ClassAlias ( final Token aName , ClassInfo aClassInfo ) <nl> + { <nl> + super ( aName ) ; <nl> + mClassInfo = aClassInfo ; <nl> + } <nl> + <nl> + / * * { @ inheritDoc } * / <nl> + public final Class getClazz ( ) <nl> + { <nl> + return mClassInfo . getClazz ( ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Represents text element with location in the text . <nl> + * / <nl> + protected static class Token <nl> + { <nl> + / * * token ' s column number . * / <nl> + private final int mColumn ; <nl> + / * * token ' s line number . * / <nl> + private final int mLine ; <nl> + / * * token ' s text . * / <nl> + private final String mText ; <nl> + <nl> + / * * <nl> + * Creates token . <nl> + * @ param aText token ' s text <nl> + * @ param aLine token ' s line number <nl> + * @ param aColumn token ' s column number <nl> + * / <nl> + public Token ( String aText , int aLine , int aColumn ) <nl> + { <nl> + mText = aText ; <nl> + mLine = aLine ; <nl> + mColumn = aColumn ; <nl> + } <nl> + <nl> + / * * <nl> + * Converts FullIdent to Token . <nl> + * @ param aFullIdent full ident to convert . <nl> + * / <nl> + public Token ( FullIdent aFullIdent ) <nl> + { <nl> + mText = aFullIdent . getText ( ) ; <nl> + mLine = aFullIdent . getLineNo ( ) ; <nl> + mColumn = aFullIdent . getColumnNo ( ) ; <nl> + } <nl> + <nl> + / * * @ return line number of the token * / <nl> + public int getLineNo ( ) <nl> + { <nl> + return mLine ; <nl> + } <nl> + <nl> + / * * @ return column number of the token * / <nl> + public int getColumnNo ( ) <nl> + { <nl> + return mColumn ; <nl> + } <nl> + <nl> + / * * @ return text of the token * / <nl> + public String getText ( ) <nl> + { <nl> + return mText ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> index 602e23f . . a396ceb 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> @ @ - 116 , 10 + 116 , 9 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck <nl> * Logs error if unable to load class information . <nl> * @ param aIdent class name for which we can no load class . <nl> * / <nl> - protected final void logLoadError ( FullIdent aIdent ) <nl> + protected final void logLoadError ( Token aIdent ) <nl> { <nl> - logLoadErrorImpl ( aIdent . getLineNo ( ) , <nl> - aIdent . getColumnNo ( ) , <nl> + logLoadErrorImpl ( aIdent . getLineNo ( ) , aIdent . getColumnNo ( ) , <nl> " redundant . throws . classInfo " , <nl> new Object [ ] { aIdent . getText ( ) } ) ; <nl> } <nl> @ @ - 140 , 7 + 139 , 7 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck <nl> { <nl> / / Let ' s try to load class . <nl> final ClassInfo newClassInfo = <nl> - new ClassInfo ( aExc , getCurrentClassName ( ) ) ; <nl> + createClassInfo ( new Token ( aExc ) , getCurrentClassName ( ) ) ; <nl> <nl> if ( ! mAllowUnchecked ) { <nl> if ( isUnchecked ( newClassInfo . getClazz ( ) ) ) { <nl> @ @ - 152 , 7 + 151 , 7 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck <nl> boolean shouldAdd = true ; <nl> for ( Iterator known = aKnownExcs . iterator ( ) ; known . hasNext ( ) ; ) { <nl> final ClassInfo ci = ( ClassInfo ) known . next ( ) ; <nl> - final FullIdent fi = ci . getName ( ) ; <nl> + final Token fi = ci . getName ( ) ; <nl> <nl> if ( isSameType ( fi . getText ( ) , aExc . getText ( ) ) ) { <nl> shouldAdd = false ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> index a6dfdc3 . . d6a8c34 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> @ @ - 267 , 14 + 267 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> TokenTypes . ANNOTATION _ FIELD _ DEF , } ; <nl> } <nl> <nl> - / * * @ see com . puppycrawl . tools . checkstyle . api . Check * / <nl> - public int [ ] getRequiredTokens ( ) <nl> - { <nl> - return new int [ ] { <nl> - TokenTypes . PACKAGE _ DEF , TokenTypes . IMPORT , <nl> - TokenTypes . CLASS _ DEF , TokenTypes . ENUM _ DEF , } ; <nl> - } <nl> - <nl> / * * <nl> * Checks Javadoc comments for a method or constructor . <nl> * <nl> @ @ - 305 , 7 + 297 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> * <nl> * @ param aIdent class name for which we can no load class . <nl> * / <nl> - protected final void logLoadError ( FullIdent aIdent ) <nl> + protected final void logLoadError ( Token aIdent ) <nl> { <nl> logLoadErrorImpl ( aIdent . getLineNo ( ) , aIdent . getColumnNo ( ) , <nl> " javadoc . classInfo " , <nl> @ @ - 400 , 21 + 392 , 37 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> Matcher noargMultilineStart = <nl> MATCH _ JAVADOC _ NOARG _ MULTILINE _ START . matcher ( lines [ i ] ) ; <nl> if ( javadocArgMatcher . find ( ) ) { <nl> - tags . add ( new JavadocTag ( currentLine , <nl> + int col = javadocArgMatcher . start ( 1 ) - 1 ; <nl> + if ( i = = 0 ) { <nl> + col + = aComment . getStartColNo ( ) ; <nl> + } <nl> + tags . add ( new JavadocTag ( currentLine , col , <nl> javadocArgMatcher . group ( 1 ) , <nl> javadocArgMatcher . group ( 2 ) ) ) ; <nl> } <nl> else if ( javadocNoargMatcher . find ( ) ) { <nl> - tags . add ( new JavadocTag ( currentLine , <nl> + int col = javadocNoargMatcher . start ( 1 ) - 1 ; <nl> + if ( i = = 0 ) { <nl> + col + = aComment . getStartColNo ( ) ; <nl> + } <nl> + tags . add ( new JavadocTag ( currentLine , col , <nl> javadocNoargMatcher . group ( 1 ) ) ) ; <nl> } <nl> else if ( noargCurlyMatcher . find ( ) ) { <nl> - tags . add ( new JavadocTag ( currentLine , <nl> + int col = noargCurlyMatcher . start ( 1 ) - 1 ; <nl> + if ( i = = 0 ) { <nl> + col + = aComment . getStartColNo ( ) ; <nl> + } <nl> + tags . add ( new JavadocTag ( currentLine , col , <nl> noargCurlyMatcher . group ( 1 ) ) ) ; <nl> } <nl> else if ( argMultilineStart . find ( ) ) { <nl> final String p1 = argMultilineStart . group ( 1 ) ; <nl> final String p2 = argMultilineStart . group ( 2 ) ; <nl> + int col = argMultilineStart . start ( 1 ) - 1 ; <nl> + if ( i = = 0 ) { <nl> + col + = aComment . getStartColNo ( ) ; <nl> + } <nl> <nl> / / Look for the rest of the comment if all we saw was <nl> / / the tag and the name . Stop when we see ' * / ' ( end of <nl> @ @ - 429 , 7 + 437 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> String lFin = multilineCont . group ( 1 ) ; <nl> if ( ! lFin . equals ( NEXT _ TAG ) & & ! lFin . equals ( END _ JAVADOC ) ) <nl> { <nl> - tags . add ( new JavadocTag ( currentLine , p1 , p2 ) ) ; <nl> + tags . add ( new JavadocTag ( currentLine , col , p1 , p2 ) ) ; <nl> } <nl> } <nl> remIndex + + ; <nl> @ @ - 437 , 6 + 445 , 10 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> } <nl> else if ( noargMultilineStart . find ( ) ) { <nl> final String p1 = noargMultilineStart . group ( 1 ) ; <nl> + int col = noargMultilineStart . start ( 1 ) - 1 ; <nl> + if ( i = = 0 ) { <nl> + col + = aComment . getStartColNo ( ) ; <nl> + } <nl> <nl> / / Look for the rest of the comment if all we saw was <nl> / / the tag and the name . Stop when we see ' * / ' ( end of <nl> @ @ - 451 , 7 + 463 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> String lFin = multilineCont . group ( 1 ) ; <nl> if ( ! lFin . equals ( NEXT _ TAG ) & & ! lFin . equals ( END _ JAVADOC ) ) <nl> { <nl> - tags . add ( new JavadocTag ( currentLine , p1 ) ) ; <nl> + tags . add ( new JavadocTag ( currentLine , col , p1 ) ) ; <nl> } <nl> } <nl> remIndex + + ; <nl> @ @ - 500 , 9 + 512 , 9 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> if ( ( child . getType ( ) = = TokenTypes . IDENT ) <nl> | | ( child . getType ( ) = = TokenTypes . DOT ) ) <nl> { <nl> + FullIdent fi = FullIdent . createFullIdent ( child ) ; <nl> final ExceptionInfo ei = <nl> - new ExceptionInfo ( FullIdent . createFullIdent ( child ) , <nl> - getCurrentClassName ( ) ) ; <nl> + new ExceptionInfo ( new Token ( fi ) , getCurrentClassName ( ) ) ; <nl> retVal . add ( ei ) ; <nl> } <nl> child = ( DetailAST ) child . getNextSibling ( ) ; <nl> @ @ - 568 , 8 + 580 , 8 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> <nl> / / Handle extra JavadocTag <nl> if ( ! found ) { <nl> - log ( tag . getLineNo ( ) , " javadoc . unusedTag " , " @ param " , tag <nl> - . getArg1 ( ) ) ; <nl> + log ( tag . getLineNo ( ) , tag . getColumnNo ( ) , <nl> + " javadoc . unusedTag " , " @ param " , tag . getArg1 ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 633 , 7 + 645 , 8 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> final JavadocTag jt = ( JavadocTag ) it . next ( ) ; <nl> if ( jt . isReturnTag ( ) ) { <nl> if ( found ) { <nl> - log ( jt . getLineNo ( ) , " javadoc . return . duplicate " ) ; <nl> + log ( jt . getLineNo ( ) , jt . getColumnNo ( ) , <nl> + " javadoc . return . duplicate " ) ; <nl> } <nl> found = true ; <nl> it . remove ( ) ; <nl> @ @ - 672 , 14 + 685 , 16 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> <nl> / / Loop looking for matching throw <nl> final String documentedEx = tag . getArg1 ( ) ; <nl> + Token token = new Token ( tag . getArg1 ( ) , tag . getLineNo ( ) , <nl> + tag . getColumnNo ( ) ) ; <nl> + ClassInfo documentedCI = <nl> + createClassInfo ( token , getCurrentClassName ( ) ) ; <nl> boolean found = foundThrows . contains ( documentedEx ) ; <nl> - Class documentedClass = null ; <nl> - boolean classLoaded = false ; <nl> <nl> final ListIterator throwIt = aThrows . listIterator ( ) ; <nl> while ( ! found & & throwIt . hasNext ( ) ) { <nl> final ExceptionInfo ei = ( ExceptionInfo ) throwIt . next ( ) ; <nl> - final FullIdent fi = ei . getName ( ) ; <nl> + final Token fi = ei . getName ( ) ; <nl> final String declaredEx = fi . getText ( ) ; <nl> <nl> if ( isSameType ( declaredEx , documentedEx ) ) { <nl> @ @ - 688 , 11 + 703 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> foundThrows . add ( documentedEx ) ; <nl> } <nl> else if ( mAllowThrowsTagsForSubclasses ) { <nl> - if ( ! classLoaded ) { <nl> - documentedClass = loadClassForTag ( tag ) ; <nl> - classLoaded = true ; <nl> - } <nl> - found = isSubclass ( documentedClass , ei . getClazz ( ) ) ; <nl> + found = isSubclass ( documentedCI . getClazz ( ) , ei . getClazz ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 700 , 16 + 711 , 13 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> if ( ! found ) { <nl> boolean reqd = true ; <nl> if ( mAllowUndeclaredRTE ) { <nl> - if ( ! classLoaded ) { <nl> - documentedClass = loadClassForTag ( tag ) ; <nl> - classLoaded = true ; <nl> - } <nl> - reqd = ! isUnchecked ( documentedClass ) ; <nl> + reqd = ! isUnchecked ( documentedCI . getClazz ( ) ) ; <nl> } <nl> <nl> if ( reqd ) { <nl> - log ( tag . getLineNo ( ) , " javadoc . unusedTag " , " @ throws " , tag <nl> - . getArg1 ( ) ) ; <nl> + log ( tag . getLineNo ( ) , tag . getColumnNo ( ) , <nl> + " javadoc . unusedTag " , " @ throws " , tag . getArg1 ( ) ) ; <nl> + <nl> } <nl> } <nl> } <nl> @ @ - 721 , 7 + 729 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> while ( throwIt . hasNext ( ) ) { <nl> final ExceptionInfo ei = ( ExceptionInfo ) throwIt . next ( ) ; <nl> if ( ! ei . isFound ( ) ) { <nl> - final FullIdent fi = ei . getName ( ) ; <nl> + final Token fi = ei . getName ( ) ; <nl> log ( fi . getLineNo ( ) , fi . getColumnNo ( ) , <nl> " javadoc . expectedTag " , " @ throws " , fi . getText ( ) ) ; <nl> } <nl> @ @ - 730 , 22 + 738 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> } <nl> <nl> / * * <nl> - * Tries to load class for throws tag . Logs error if unable . <nl> - * <nl> - * @ param aTag name of class which we try to load . <nl> - * @ return < code > Class < / code > for the tag . <nl> - * / <nl> - private Class loadClassForTag ( JavadocTag aTag ) <nl> - { <nl> - Class clazz = resolveClass ( aTag . getArg1 ( ) , getCurrentClassName ( ) ) ; <nl> - if ( clazz = = null ) { <nl> - log ( aTag . getLineNo ( ) , " javadoc . classInfo " , " @ throws " , aTag <nl> - . getArg1 ( ) ) ; <nl> - } <nl> - return clazz ; <nl> - } <nl> - <nl> - / * * <nl> * Returns whether an AST represents a setter method . <nl> * @ param aAST the AST to check with <nl> * @ return whether the AST represents a setter method <nl> @ @ - 858 , 20 + 850 , 22 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> } <nl> <nl> / * * Stores useful information about declared exception . * / <nl> - class ExceptionInfo extends ClassInfo <nl> + private class ExceptionInfo <nl> { <nl> / * * does the exception have throws tag associated with . * / <nl> private boolean mFound ; <nl> + / * * class information associated with this exception . * / <nl> + private ClassInfo mClassInfo ; <nl> <nl> / * * <nl> * Creates new instance for < code > FullIdent < / code > . <nl> * <nl> - * @ param aIdent < code > FullIdent < / code > of the exception <nl> + * @ param aIdent the exception <nl> * @ param aCurrentClass name of current class . <nl> * / <nl> - ExceptionInfo ( FullIdent aIdent , String aCurrentClass ) <nl> + ExceptionInfo ( Token aIdent , String aCurrentClass ) <nl> { <nl> - super ( aIdent , aCurrentClass ) ; <nl> + mClassInfo = createClassInfo ( aIdent , aCurrentClass ) ; <nl> } <nl> <nl> / * * Mark that the exception has associated throws tag * / <nl> @ @ - 885 , 5 + 879 , 17 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> { <nl> return mFound ; <nl> } <nl> + <nl> + / * * @ return exception ' s name * / <nl> + final Token getName ( ) <nl> + { <nl> + return mClassInfo . getName ( ) ; <nl> + } <nl> + <nl> + / * * @ return class for this exception * / <nl> + final Class getClazz ( ) <nl> + { <nl> + return mClassInfo . getClazz ( ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java <nl> index 6d8d3df . . ce60eff 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java <nl> @ @ - 26 , 6 + 26 , 8 @ @ class JavadocTag <nl> { <nl> / * * the line number of the tag * * / <nl> private final int mLineNo ; <nl> + / * * the column number of the tag * * / <nl> + private int mColumnNo ; <nl> / * * the tag string * * / <nl> private final String mTag ; <nl> / * * an optional first argument . For example the parameter name . * * / <nl> @ @ - 34 , 12 + 36 , 14 @ @ class JavadocTag <nl> / * * <nl> * Constructs the object . <nl> * @ param aLine the line number of the tag <nl> + * @ param aColumn the column number of the tag <nl> * @ param aTag the tag string <nl> * @ param aArg1 the tag argument <nl> * * / <nl> - JavadocTag ( int aLine , String aTag , String aArg1 ) <nl> + JavadocTag ( int aLine , int aColumn , String aTag , String aArg1 ) <nl> { <nl> mLineNo = aLine ; <nl> + mColumnNo = aColumn ; <nl> mTag = aTag ; <nl> mArg1 = aArg1 ; <nl> } <nl> @ @ - 47 , 11 + 51 , 12 @ @ class JavadocTag <nl> / * * <nl> * Constructs the object . <nl> * @ param aLine the line number of the tag <nl> + * @ param aColumn the column number of the tag <nl> * @ param aTag the tag string <nl> * * / <nl> - JavadocTag ( int aLine , String aTag ) <nl> + JavadocTag ( int aLine , int aColumn , String aTag ) <nl> { <nl> - this ( aLine , aTag , null ) ; <nl> + this ( aLine , aColumn , aTag , null ) ; <nl> } <nl> <nl> / * * @ return the tag string * * / <nl> @ @ - 72 , 11 + 77 , 17 @ @ class JavadocTag <nl> return mLineNo ; <nl> } <nl> <nl> + / * * @ return the column number * / <nl> + int getColumnNo ( ) <nl> + { <nl> + return mColumnNo ; <nl> + } <nl> + <nl> / * * @ return a string representation of the object * * / <nl> public String toString ( ) <nl> { <nl> return " { Tag = ' " + getTag ( ) + " ' , lineNo = " + getLineNo ( ) <nl> - + " , Arg1 = ' " + getArg1 ( ) + " ' } " ; <nl> + + " , columnNo = " + mColumnNo + " , Arg1 = ' " + getArg1 ( ) + " ' } " ; <nl> } <nl> <nl> / * * @ return whether the tag is an ' author ' tag * * / <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> index 0332f2d . . 778332b 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> @ @ - 214 , 9 + 214 , 12 @ @ public class JavadocTypeCheck <nl> if ( content . endsWith ( " * / " ) ) { <nl> content = content . substring ( 0 , content . length ( ) - 2 ) ; <nl> } <nl> - tags . add ( new JavadocTag ( aCmt . getStartLineNo ( ) + i , <nl> - tagName , <nl> - content . trim ( ) ) ) ; <nl> + int col = tagMatcher . start ( 1 ) - 1 ; <nl> + if ( i = = 0 ) { <nl> + col + = aCmt . getStartColNo ( ) ; <nl> + } <nl> + tags . add ( new JavadocTag ( aCmt . getStartLineNo ( ) + i , col , <nl> + tagName , content . trim ( ) ) ) ; <nl> } <nl> tagPattern = Utils . getPattern ( " ^ \ \ s * \ \ * * \ \ s * @ ( \ \ p { Alpha } + ) \ \ s " ) ; <nl> } <nl> @ @ - 300 , 16 + 303 , 19 @ @ public class JavadocTypeCheck <nl> if ( matcher . matches ( ) ) { <nl> typeParamName = matcher . group ( 1 ) . trim ( ) ; <nl> if ( ! aTypeParamNames . contains ( typeParamName ) ) { <nl> - log ( tag . getLineNo ( ) , " javadoc . unusedTag " , <nl> + log ( tag . getLineNo ( ) , tag . getColumnNo ( ) , <nl> + " javadoc . unusedTag " , <nl> " @ param " , " < " + typeParamName + " > " ) ; <nl> } <nl> } <nl> else { <nl> - log ( tag . getLineNo ( ) , " javadoc . unusedTagGeneral " ) ; <nl> + log ( tag . getLineNo ( ) , tag . getColumnNo ( ) , <nl> + " javadoc . unusedTagGeneral " ) ; <nl> } <nl> } <nl> else { <nl> - log ( tag . getLineNo ( ) , " javadoc . unusedTagGeneral " ) ; <nl> + log ( tag . getLineNo ( ) , tag . getColumnNo ( ) , <nl> + " javadoc . unusedTagGeneral " ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java b / src / testinputs / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java <nl> new file mode 100644 <nl> index 0000000 . . 06f7ba0 <nl> - - - / dev / null <nl> + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java <nl> @ @ - 0 , 0 + 1 , 46 @ @ <nl> + public class TestGenerics < E extends java . lang . Exception , <nl> + RE extends RuntimeException & java . io . Serializable > <nl> + { <nl> + / * * <nl> + * @ throws E in some cases <nl> + * @ throws RE in some cases <nl> + * / <nl> + public void method1 ( ) throws E <nl> + { <nl> + } <nl> + <nl> + / * * <nl> + * RuntimeException is not declared . <nl> + * / <nl> + public void method2 ( ) throws RE <nl> + { <nl> + } <nl> + <nl> + / * * <nl> + * @ throws E in some cases <nl> + * @ throws RE in other cases <nl> + * / <nl> + public void method3 ( ) throws E , RE <nl> + { <nl> + } <nl> + <nl> + / * * <nl> + * @ throws RE in some cases <nl> + * @ throws NPE in some other cases <nl> + * / <nl> + public < NPE extends NullPointerException > void method4 ( ) throws NPE , RE <nl> + { <nl> + } <nl> + <nl> + public class InnerClass < RuntimeException extends ClassCastException > <nl> + { <nl> + / * * <nl> + * @ throws E in some case <nl> + * @ throws RE in some other cases <nl> + * / <nl> + public void method1 ( ) throws RuntimeException , RE , <nl> + java . lang . RuntimeException <nl> + { <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java <nl> index 4b6de58 . . 1f14f1d 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java <nl> @ @ - 92 , 4 + 92 , 24 @ @ public class RedundantThrowsCheckTest <nl> final String [ ] expected = { } ; <nl> verify ( checkConfig , getPath ( " javadoc / BadCls . java " ) , expected ) ; <nl> } <nl> + <nl> + public void test _ generics _ params ( ) throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( RedundantThrowsCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 15 : 34 : Redundant throws : ' RE ' is unchecked exception . " , <nl> + " 23 : 37 : Redundant throws : ' RE ' is subclass of ' E ' . " , <nl> + " 23 : 37 : Redundant throws : ' RE ' is unchecked exception . " , <nl> + " 31 : 69 : Redundant throws : ' NPE ' is subclass of ' RE ' . " , <nl> + " 31 : 69 : Redundant throws : ' NPE ' is unchecked exception . " , <nl> + " 31 : 74 : Redundant throws : ' RE ' is unchecked exception . " , <nl> + " 41 : 38 : Redundant throws : ' RuntimeException ' is subclass of ' RE ' . " , <nl> + " 41 : 38 : Redundant throws : ' RuntimeException ' is unchecked exception . " , <nl> + " 41 : 56 : Redundant throws : ' RE ' is subclass of ' java . lang . RuntimeException ' . " , <nl> + " 41 : 56 : Redundant throws : ' RE ' is unchecked exception . " , <nl> + " 42 : 13 : Redundant throws : ' java . lang . RuntimeException ' is unchecked exception . " , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java <nl> index 5c2a732 . . 3ec5d32 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java <nl> @ @ - 14 , 32 + 14 , 35 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> createCheckConfig ( JavadocMethodCheck . class ) ; <nl> final String [ ] expected = { <nl> " 14 : 5 : Missing a Javadoc comment . " , <nl> - " 18 : Unused @ param tag for ' unused ' . " , <nl> - " 24 : Expected an @ return tag . " , " 33 : Expected an @ return tag . " , <nl> + " 18 : 9 : Unused @ param tag for ' unused ' . " , <nl> + " 24 : Expected an @ return tag . " , <nl> + " 33 : Expected an @ return tag . " , <nl> " 40 : 16 : Expected @ throws tag for ' Exception ' . " , <nl> " 49 : 16 : Expected @ throws tag for ' Exception ' . " , <nl> - " 53 : Unused @ throws tag for ' WrongException ' . " , <nl> + " 53 : 9 : Unused @ throws tag for ' WrongException ' . " , <nl> " 55 : 16 : Expected @ throws tag for ' Exception ' . " , <nl> " 55 : 27 : Expected @ throws tag for ' NullPointerException ' . " , <nl> " 60 : 22 : Expected @ param tag for ' aOne ' . " , <nl> " 68 : 22 : Expected @ param tag for ' aOne ' . " , <nl> - " 72 : Unused @ param tag for ' WrongParam ' . " , <nl> + " 72 : 9 : Unused @ param tag for ' WrongParam ' . " , <nl> " 73 : 23 : Expected @ param tag for ' aOne ' . " , <nl> " 73 : 33 : Expected @ param tag for ' aTwo ' . " , <nl> - " 78 : Unused @ param tag for ' Unneeded ' . " , <nl> - " 79 : Unused Javadoc tag . " , " 87 : Duplicate @ return tag . " , <nl> + " 78 : 8 : Unused @ param tag for ' Unneeded ' . " , <nl> + " 79 : Unused Javadoc tag . " , <nl> + " 87 : 8 : Duplicate @ return tag . " , <nl> " 109 : 23 : Expected @ param tag for ' aOne ' . " , <nl> " 109 : 55 : Expected @ param tag for ' aFour ' . " , <nl> " 109 : 66 : Expected @ param tag for ' aFive ' . " , <nl> - " 178 : Unused @ throws tag for ' ThreadDeath ' . " , <nl> - " 179 : Unused @ throws tag for ' ArrayStoreException ' . " , <nl> - " 236 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , <nl> - " 254 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , <nl> + " 178 : 8 : Unused @ throws tag for ' ThreadDeath ' . " , <nl> + " 179 : 8 : Unused @ throws tag for ' ArrayStoreException ' . " , <nl> + " 236 : 8 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , <nl> + " 254 : 8 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , <nl> " 256 : 28 : Expected @ throws tag for ' IOException ' . " , <nl> - " 262 : Unused @ param tag for ' aParam ' . " , <nl> + " 262 : 8 : Unused @ param tag for ' aParam ' . " , <nl> " 320 : 9 : Missing a Javadoc comment . " , <nl> " 329 : 5 : Missing a Javadoc comment . " , <nl> - " 333 : Unused Javadoc tag . " , } ; <nl> + " 333 : Unused Javadoc tag . " , <nl> + } ; <nl> <nl> verify ( checkConfig , getPath ( " InputTags . java " ) , expected ) ; <nl> } <nl> @ @ - 51 , 7 + 54 , 7 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> checkConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; <nl> final String [ ] expected = { <nl> " 14 : 5 : Missing a Javadoc comment . " , <nl> - " 18 : Unused @ param tag for ' unused ' . " , <nl> + " 18 : 9 : Unused @ param tag for ' unused ' . " , <nl> " 24 : Expected an @ return tag . " , <nl> " 33 : Expected an @ return tag . " , <nl> " 40 : 16 : Expected @ throws tag for ' Exception ' . " , <nl> @ @ - 60 , 18 + 63 , 19 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> " 55 : 27 : Expected @ throws tag for ' NullPointerException ' . " , <nl> " 60 : 22 : Expected @ param tag for ' aOne ' . " , <nl> " 68 : 22 : Expected @ param tag for ' aOne ' . " , <nl> - " 72 : Unused @ param tag for ' WrongParam ' . " , <nl> + " 72 : 9 : Unused @ param tag for ' WrongParam ' . " , <nl> " 73 : 23 : Expected @ param tag for ' aOne ' . " , <nl> " 73 : 33 : Expected @ param tag for ' aTwo ' . " , <nl> - " 78 : Unused @ param tag for ' Unneeded ' . " , <nl> - " 79 : Unused Javadoc tag . " , " 87 : Duplicate @ return tag . " , <nl> + " 78 : 8 : Unused @ param tag for ' Unneeded ' . " , <nl> + " 79 : Unused Javadoc tag . " , <nl> + " 87 : 8 : Duplicate @ return tag . " , <nl> " 109 : 23 : Expected @ param tag for ' aOne ' . " , <nl> " 109 : 55 : Expected @ param tag for ' aFour ' . " , <nl> " 109 : 66 : Expected @ param tag for ' aFive ' . " , <nl> - " 236 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , <nl> - " 254 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , <nl> + " 236 : 8 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , <nl> + " 254 : 8 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , <nl> " 256 : 28 : Expected @ throws tag for ' IOException ' . " , <nl> - " 262 : Unused @ param tag for ' aParam ' . " , <nl> + " 262 : 8 : Unused @ param tag for ' aParam ' . " , <nl> " 320 : 9 : Missing a Javadoc comment . " , <nl> " 329 : 5 : Missing a Javadoc comment . " , <nl> " 333 : Unused Javadoc tag . " , } ; <nl> @ @ - 171 , 7 + 175 , 7 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> checkConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; <nl> final String [ ] expected = { <nl> " 14 : 5 : Missing a Javadoc comment . " , <nl> - " 18 : Unused @ param tag for ' unused ' . " , <nl> + " 18 : 9 : Unused @ param tag for ' unused ' . " , <nl> " 24 : Expected an @ return tag . " , <nl> " 33 : Expected an @ return tag . " , <nl> " 40 : 16 : Expected @ throws tag for ' Exception ' . " , <nl> @ @ - 180 , 18 + 184 , 19 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> " 55 : 27 : Expected @ throws tag for ' NullPointerException ' . " , <nl> " 60 : 22 : Expected @ param tag for ' aOne ' . " , <nl> " 68 : 22 : Expected @ param tag for ' aOne ' . " , <nl> - " 72 : Unused @ param tag for ' WrongParam ' . " , <nl> + " 72 : 9 : Unused @ param tag for ' WrongParam ' . " , <nl> " 73 : 23 : Expected @ param tag for ' aOne ' . " , <nl> " 73 : 33 : Expected @ param tag for ' aTwo ' . " , <nl> - " 78 : Unused @ param tag for ' Unneeded ' . " , <nl> - " 79 : Unused Javadoc tag . " , " 87 : Duplicate @ return tag . " , <nl> + " 78 : 8 : Unused @ param tag for ' Unneeded ' . " , <nl> + " 79 : Unused Javadoc tag . " , <nl> + " 87 : 8 : Duplicate @ return tag . " , <nl> " 109 : 23 : Expected @ param tag for ' aOne ' . " , <nl> " 109 : 55 : Expected @ param tag for ' aFour ' . " , <nl> " 109 : 66 : Expected @ param tag for ' aFive ' . " , <nl> - " 178 : Unused @ throws tag for ' ThreadDeath ' . " , <nl> - " 179 : Unused @ throws tag for ' ArrayStoreException ' . " , <nl> + " 178 : 8 : Unused @ throws tag for ' ThreadDeath ' . " , <nl> + " 179 : 8 : Unused @ throws tag for ' ArrayStoreException ' . " , <nl> " 256 : 28 : Expected @ throws tag for ' IOException ' . " , <nl> - " 262 : Unused @ param tag for ' aParam ' . " , <nl> + " 262 : 8 : Unused @ param tag for ' aParam ' . " , <nl> " 320 : 9 : Missing a Javadoc comment . " , <nl> " 329 : 5 : Missing a Javadoc comment . " , <nl> " 333 : Unused Javadoc tag . " , } ; <nl> @ @ - 349 , 7 + 354 , 7 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( JavadocMethodCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 26 : Unused @ param tag for ' < BB > ' . " , <nl> + " 26 : 8 : Unused @ param tag for ' < BB > ' . " , <nl> " 28 : 13 : Expected @ param tag for ' < Z > ' . " , } ; <nl> verify ( checkConfig , getPath ( " InputTypeParamsTags . java " ) , expected ) ; <nl> } <nl> @ @ - 379 , 4 + 384 , 52 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase <nl> final String [ ] expected = { } ; <nl> verify ( checkConfig , getPath ( " javadoc / Test3 . java " ) , expected ) ; <nl> } <nl> + <nl> + public void test _ generics _ 1 ( ) throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( JavadocMethodCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; <nl> + checkConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 15 : 34 : Expected @ throws tag for ' RE ' . " , <nl> + " 23 : 37 : Expected @ throws tag for ' RE ' . " , <nl> + " 31 : 13 : Expected @ param tag for ' < NPE > ' . " , <nl> + " 38 : 12 : Unused @ throws tag for ' E ' . " , <nl> + " 41 : 38 : Expected @ throws tag for ' RuntimeException ' . " , <nl> + " 42 : 13 : Expected @ throws tag for ' java . lang . RuntimeException ' . " , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; <nl> + } <nl> + <nl> + public void test _ generics _ 2 ( ) throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( JavadocMethodCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 15 : 34 : Expected @ throws tag for ' RE ' . " , <nl> + " 23 : 37 : Expected @ throws tag for ' RE ' . " , <nl> + " 31 : 13 : Expected @ param tag for ' < NPE > ' . " , <nl> + " 38 : 12 : Unused @ throws tag for ' E ' . " , <nl> + " 41 : 38 : Expected @ throws tag for ' RuntimeException ' . " , <nl> + " 42 : 13 : Expected @ throws tag for ' java . lang . RuntimeException ' . " , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; <nl> + } <nl> + <nl> + public void test _ generics _ 3 ( ) throws Exception <nl> + { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( JavadocMethodCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 6 : 8 : Unused @ throws tag for ' RE ' . " , <nl> + " 15 : 34 : Expected @ throws tag for ' RE ' . " , <nl> + " 31 : 13 : Expected @ param tag for ' < NPE > ' . " , <nl> + " 38 : 12 : Unused @ throws tag for ' E ' . " , <nl> + " 41 : 38 : Expected @ throws tag for ' RuntimeException ' . " , <nl> + " 42 : 13 : Expected @ throws tag for ' java . lang . RuntimeException ' . " , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java <nl> index 8119cac . . 129752d 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java <nl> @ @ - 280 , 7 + 280 , 7 @ @ public class JavadocTypeCheckTest extends BaseCheckTestCase <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( JavadocTypeCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 7 : Unused @ param tag for ' < D > ' . " , <nl> + " 7 : 4 : Unused @ param tag for ' < D > ' . " , <nl> " 11 : Type Javadoc comment is missing an @ param < C > tag . " , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputTypeParamsTags . java " ) , expected ) ; <nl> @ @ - 291 , 7 + 291 , 7 @ @ public class JavadocTypeCheckTest extends BaseCheckTestCase <nl> createCheckConfig ( JavadocTypeCheck . class ) ; <nl> checkConfig . addAttribute ( " allowMissingParamTags " , " true " ) ; <nl> final String [ ] expected = { <nl> - " 7 : Unused @ param tag for ' < D > ' . " , <nl> + " 7 : 4 : Unused @ param tag for ' < D > ' . " , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputTypeParamsTags . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml <nl> index c8ea7c6 . . cd428b6 100755 <nl> - - - a / src / xdocs / releasenotes . xml <nl> + + + b / src / xdocs / releasenotes . xml <nl> @ @ - 73 , 6 + 73 , 9 @ @ <nl> < li > Fixed implementation of DetailAST so getPreviousSibling ( ) <nl> works for all nodes in AST tree ( bug 1244994 ) < / li > <nl> <nl> + < li > Now type - aware check know more about generics ( bug 1249707 , <nl> + modules : RedundantThrows and JavadocMethodCheck ) < / li > <nl> + <nl> < / ul > <nl> <nl> < p > Other improvements : < / p > <nl> diff - - git a / suppressions . xml b / suppressions . xml <nl> index e6dacb2 . . d6bc0de 100755 <nl> - - - a / suppressions . xml <nl> + + + b / suppressions . xml <nl> @ @ - 13 , 7 + 13 , 7 @ @ <nl> lines = " 176 " / > <nl> < suppress checks = " MagicNumber " <nl> files = " JavadocMethodCheck . java " <nl> - lines = " 759 , 791 , 816 " / > <nl> + lines = " 751 , 783 , 808 " / > <nl> < suppress checks = " ImportControl " <nl> files = " NewlineAtEndOfFileCheck . java " <nl> lines = " 26 " / >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 index 7b4c289 . . 8ff8053 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 @ @ - 29 , 14 + 29 , 42 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 
 / * * 
 - * Checks for fall through in switch statements 
 - * Finds locations where a case < b > contains < / b > Java code - 
 - * but lacks a break , return , throw or continue statement . 
 + * < p > 
 + * Checks for fall - through in { @ code switch } statements . 
 + * Finds locations where a { @ code case } < b > contains < / b > Java code but lacks a 
 + * { @ code break } , { @ code return } , { @ code throw } or { @ code continue } statement . 
 + * < / p > 
 + * < p > 
 + * The check honors special comments to suppress the warning . 
 + * By default the text " fallthru " , " fall through " , " fallthrough " , 
 + * " falls through " and " fallsthrough " are recognized ( case sensitive ) . 
 + * The comment containing these words must be all on one line , 
 + * and must be on the last non - empty line before the { @ code case } triggering 
 + * the warning or on the same line before the { @ code case } ( ugly , but possible ) . 
 + * < / p > 
 + * < pre > 
 + * switch ( i ) { 
 + * case 0 : 
 + * i + + ; / / fall through 
 * 
 + * case 1 : 
 + * i + + ; 
 + * / / falls through 
 + * case 2 : 
 + * case 3 : 
 + * case 4 : { 
 + * i + + ; 
 + * } 
 + * / / fallthrough 
 + * case 5 : 
 + * i + + ; 
 + * & # 47 ; * fallthru * & # 47 ; case 6 : 
 + * i + + 
 + * break ; 
 + * } 
 + * < / pre > 
 * < p > 
 - * The check honors special comments to suppress warnings about 
 - * the fall through . By default the comments " fallthru " , 
 - * " fall through " , " falls through " and " fallthrough " are recognized . 
 + * Note : The check assumes that there is no unreachable code in the { @ code case } . 
 * < / p > 
 * < p > 
 * The following fragment of code will NOT trigger the check , 
 @ @ - 52 , 21 + 80 , 33 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 * case 6 : 
 * break ; 
 * < / pre > 
 + * < ul > 
 + * < li > 
 + * Property { @ code checkLastCaseGroup } - Control whether the last case group must be checked . 
 + * Default value is { @ code false } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code reliefPattern } - Define the RegExp to match the relief comment that suppresses 
 + * the warning about a fall through . 
 + * Default value is { @ code " fallthru | falls ? ? through " } . 
 + * < / li > 
 + * < / ul > 
 * < p > 
 - * The recognized relief comment can be configured with the property 
 - * { @ code reliefPattern } . Default value of this regular expression 
 - * is " fallthru | fall through | fallthrough | falls through " . 
 + * To configure the check : 
 * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; FallThrough & quot ; / & gt ; 
 + * < / pre > 
 * < p > 
 - * An example of how to configure the check is : 
 + * or 
 * < / p > 
 * < pre > 
 - * & lt ; module name = " FallThrough " & gt ; 
 - * & lt ; property name = & quot ; reliefPattern & quot ; 
 - * value = & quot ; Fall Through & quot ; / & gt ; 
 + * & lt ; module name = & quot ; FallThrough & quot ; & gt ; 
 + * & lt ; property name = & quot ; reliefPattern & quot ; value = & quot ; continue in next case & quot ; / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 * 
 + * @ since 3 . 4 
 * / 
 @ StatelessCheck 
 public class FallThroughCheck extends AbstractCheck { 
 @ @ - 83 , 10 + 123 , 13 @ @ public class FallThroughCheck extends AbstractCheck { 
 * / 
 public static final String MSG _ FALL _ THROUGH _ LAST = " fall . through . last " ; 
 
 - / * * Do we need to check last case group . * / 
 + / * * Control whether the last case group must be checked . * / 
 private boolean checkLastCaseGroup ; 
 
 - / * * Relief regexp to allow fall through to the next case branch . * / 
 + / * * 
 + * Define the RegExp to match the relief comment that suppresses 
 + * the warning about a fall through . 
 + * / 
 private Pattern reliefPattern = Pattern . compile ( " fallthru | falls ? ? through " ) ; 
 
 @ Override 
 @ @ - 105 , 7 + 148 , 8 @ @ public class FallThroughCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Set the relief pattern . 
 + * Setter to define the RegExp to match the relief comment that suppresses 
 + * the warning about a fall through . 
 * 
 * @ param pattern 
 * The regular expression pattern . 
 @ @ - 115 , 7 + 159 , 7 @ @ public class FallThroughCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Configures whether we need to check last case group or not . 
 + * Setter to control whether the last case group must be checked . 
 * @ param value new value of the property . 
 * / 
 public void setCheckLastCaseGroup ( boolean value ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 52b23ec . . 4900147 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 90 , 6 + 90 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " EmptyStatement " , 
 " EqualsAvoidNull " , 
 " EqualsHashCode " , 
 + " FallThrough " , 
 " FinalLocalVariable " , 
 " IllegalInstantiation " , 
 " IllegalTokenText " , 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index a1e840c . . 27a28fc 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 996 , 8 + 996 , 8 @ @ public class Test { 
 < / section > 
 
 < section name = " FallThrough " > 
 + < p > Since Checkstyle 3 . 4 < / p > 
 < subsection name = " Description " id = " FallThrough _ Description " > 
 - < p > Since Checkstyle 3 . 4 < / p > 
 < p > 
 Checks for fall - through in < code > switch < / code > 
 statements . Finds locations where a < code > case < / code > 
 @ @ - 1016 , 7 + 1016 , 7 @ @ public class Test { 
 ( ugly , but possible ) . 
 < / p > 
 < source > 
 - switch ( i ) { 
 + switch ( i ) { 
 case 0 : 
 i + + ; / / fall through 
 
 @ @ - 1040 , 6 + 1040 , 20 @ @ case 5 : 
 Note : The check assumes that there is no unreachable 
 code in the < code > case < / code > . 
 < / p > 
 + < p > 
 + The following fragment of code will NOT trigger the check , 
 + because of the comment " fallthru " and absence of any Java code 
 + in case 5 . 
 + < / p > 
 + < pre > 
 + case 3 : 
 + x = 2 ; 
 + / / fallthru 
 + case 4 : 
 + case 5 : 
 + case 6 : 
 + break ; 
 + < / pre > 
 < / subsection > 
 
 < subsection name = " Properties " id = " FallThrough _ Properties " > 
 @ @ - 1054 , 7 + 1068 , 7 @ @ case 5 : 
 < tr > 
 < td > checkLastCaseGroup < / td > 
 < td > 
 - Whether the last case group must be checked . 
 + Control whether the last case group must be checked . 
 < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > < code > false < / code > < / td > 
 @ @ - 1063 , 7 + 1077 , 7 @ @ case 5 : 
 < tr > 
 < td > reliefPattern < / td > 
 < td > 
 - Regular expression to match the relief comment that suppresses 
 + Define the RegExp to match the relief comment that suppresses 
 the warning about a fall through . 
 < / td > 
 < td > < a href = " property _ types . html # regexp " > Regular Expression < / a > < / td >

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index c3d569e . . c3b0dc8 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 48 , 6 + 48 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . Utils ; 
 import com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaRecognizer ; 
 import com . puppycrawl . tools . checkstyle . grammars . GeneratedJavaLexer ; 
 
 + import org . apache . commons . logging . Log ; 
 + import org . apache . commons . logging . LogFactory ; 
 + 
 / * * 
 * Responsible for walking an abstract syntax tree and notifying interested 
 * checks at each each node . 
 @ @ - 125 , 11 + 128 , 15 @ @ public final class TreeWalker 
 / * * a factory for creating submodules ( i . e . the Checks ) * / 
 private ModuleFactory mModuleFactory ; 
 
 - / * * contrals whether we should use recursive or iterative 
 + / * * controls whether we should use recursive or iterative 
 * algorithm for tree processing . 
 * / 
 private final boolean mRecursive ; 
 
 + / * * logger for debug purpose * / 
 + private static Log sLog = 
 + LogFactory . getLog ( " com . puppycrawl . tools . checkstyle . TreeWalker " ) ; 
 + 
 / * * 
 * Creates a new < code > TreeWalker < / code > instance . 
 * / 
 @ @ - 143 , 12 + 150 , 10 @ @ public final class TreeWalker 
 System . getProperty ( " checkstyle . use . recursive . algorithm " , " true " ) ; 
 mRecursive = " true " . equals ( recursive ) ; 
 if ( mRecursive ) { 
 - Utils . getExceptionLogger ( ) 
 - . debug ( " TreeWalker uses recursive algorithm " ) ; 
 + sLog . debug ( " TreeWalker uses recursive algorithm " ) ; 
 } 
 else { 
 - Utils . getExceptionLogger ( ) 
 - . debug ( " TreeWalker uses iterative algorithm " ) ; 
 + sLog . debug ( " TreeWalker uses iterative algorithm " ) ; 
 } 
 } 
 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 index cf9f3c0 . . 701dd25 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 @ @ - 25 , 7 + 25 , 10 @ @ import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . api . Utils ; 
 import java . util . HashSet ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 import java . util . Set ; 
 + import java . util . Vector ; 
 
 / * * 
 * Abstract class that endeavours to maintain type information for the Java 
 @ @ - 35 , 8 + 38 , 7 @ @ import java . util . Set ; 
 * @ author Oliver Burn 
 * @ version 1 . 0 
 * / 
 - public abstract class AbstractTypeAwareCheck 
 - extends Check 
 + public abstract class AbstractTypeAwareCheck extends Check 
 { 
 / * * imports details * * / 
 private Set mImports = new HashSet ( ) ; 
 @ @ - 50 , 6 + 52 , 9 @ @ public abstract class AbstractTypeAwareCheck 
 / * * < code > ClassResolver < / code > instance for current tree . * / 
 private ClassResolver mClassResolver ; 
 
 + / * * Stack of maps for type params . * / 
 + private Vector mTypeParams = new Vector ( ) ; 
 + 
 / * * 
 * Called to process an AST when visiting it . 
 * @ param aAST the AST to process . Guaranteed to not be PACKAGE _ DEF or 
 @ @ - 58 , 6 + 63 , 17 @ @ public abstract class AbstractTypeAwareCheck 
 protected abstract void processAST ( DetailAST aAST ) ; 
 
 / * * @ see com . puppycrawl . tools . checkstyle . api . Check * / 
 + public final int [ ] getRequiredTokens ( ) 
 + { 
 + return new int [ ] { 
 + TokenTypes . PACKAGE _ DEF , 
 + TokenTypes . IMPORT , 
 + TokenTypes . CLASS _ DEF , 
 + TokenTypes . ENUM _ DEF , 
 + } ; 
 + } 
 + 
 + / * * @ see com . puppycrawl . tools . checkstyle . api . Check * / 
 public void beginTree ( DetailAST aRootAST ) 
 { 
 mPackageFullIdent = FullIdent . createFullIdent ( null ) ; 
 @ @ - 66 , 6 + 82 , 7 @ @ public abstract class AbstractTypeAwareCheck 
 mImports . add ( " java . lang . * " ) ; 
 mClassResolver = null ; 
 mCurrentClass = " " ; 
 + mTypeParams . clear ( ) ; 
 } 
 
 / * * @ see com . puppycrawl . tools . checkstyle . api . Check * / 
 @ @ - 83 , 6 + 100 , 9 @ @ public abstract class AbstractTypeAwareCheck 
 processClass ( aAST ) ; 
 } 
 else { 
 + if ( aAST . getType ( ) = = TokenTypes . METHOD _ DEF ) { 
 + processTypeParams ( aAST ) ; 
 + } 
 processAST ( aAST ) ; 
 } 
 } 
 @ @ - 106 , 6 + 126 , 10 @ @ public abstract class AbstractTypeAwareCheck 
 else { 
 mCurrentClass = mCurrentClass . substring ( 0 , dotIdx ) ; 
 } 
 + mTypeParams . remove ( mTypeParams . size ( ) - 1 ) ; 
 + } 
 + else if ( aAST . getType ( ) = = TokenTypes . METHOD _ DEF ) { 
 + mTypeParams . remove ( mTypeParams . size ( ) - 1 ) ; 
 } 
 else if ( aAST . getType ( ) ! = TokenTypes . PACKAGE _ DEF 
 & & aAST . getType ( ) ! = TokenTypes . IMPORT ) 
 @ @ - 241 , 8 + 265 , 7 @ @ public abstract class AbstractTypeAwareCheck 
 * @ param aCurrentClass name of surrounding class . 
 * @ return < code > Class < / code > for a ident . 
 * / 
 - protected final Class tryLoadClass ( FullIdent aIdent , 
 - String aCurrentClass ) 
 + protected final Class tryLoadClass ( Token aIdent , String aCurrentClass ) 
 { 
 final Class clazz = resolveClass ( aIdent . getText ( ) , aCurrentClass ) ; 
 if ( clazz = = null ) { 
 @ @ - 256 , 7 + 279 , 7 @ @ public abstract class AbstractTypeAwareCheck 
 * Abstract , should be overrided in subclasses . 
 * @ param aIdent class name for which we can no load class . 
 * / 
 - protected abstract void logLoadError ( FullIdent aIdent ) ; 
 + protected abstract void logLoadError ( Token aIdent ) ; 
 
 / * * 
 * Common implementation for logLoadError ( ) method . 
 @ @ - 301 , 14 + 324 , 51 @ @ public abstract class AbstractTypeAwareCheck 
 } 
 
 / * * 
 + * Process type params ( if any ) for given class , enum or method . 
 + * @ param aAST class , enum or method to process . 
 + * / 
 + private void processTypeParams ( DetailAST aAST ) 
 + { 
 + final DetailAST typeParams = 
 + aAST . findFirstToken ( TokenTypes . TYPE _ PARAMETERS ) ; 
 + 
 + Map paramsMap = new HashMap ( ) ; 
 + mTypeParams . add ( paramsMap ) ; 
 + 
 + if ( typeParams = = null ) { 
 + return ; 
 + } 
 + 
 + for ( DetailAST child = ( DetailAST ) typeParams . getFirstChild ( ) ; 
 + child ! = null ; 
 + child = ( DetailAST ) child . getNextSibling ( ) ) 
 + { 
 + if ( child . getType ( ) = = TokenTypes . TYPE _ PARAMETER ) { 
 + DetailAST param = child ; 
 + String alias = param . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 + DetailAST bounds = 
 + param . findFirstToken ( TokenTypes . TYPE _ UPPER _ BOUNDS ) ; 
 + if ( bounds ! = null ) { 
 + FullIdent name = FullIdent . createFullIdentBelow ( bounds ) ; 
 + ClassInfo ci = 
 + createClassInfo ( new Token ( name ) , getCurrentClassName ( ) ) ; 
 + paramsMap . put ( alias , ci ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + / * * 
 * Processes class definition . 
 - * @ param aAST class defition to process . 
 + * @ param aAST class definition to process . 
 * / 
 private void processClass ( DetailAST aAST ) 
 { 
 final DetailAST ident = aAST . findFirstToken ( TokenTypes . IDENT ) ; 
 mCurrentClass + = ( " " . equals ( mCurrentClass ) ? " " : " $ " ) 
 + ident . getText ( ) ; 
 + 
 + processTypeParams ( aAST ) ; 
 } 
 
 / * * 
 @ @ - 321 , 54 + 381 , 107 @ @ public abstract class AbstractTypeAwareCheck 
 } 
 
 / * * 
 - * Contains class ' s < code > FullIdent < / code > 
 - * and < code > Class < / code > object if we can load it . 
 + * Creates class info for given name . 
 + * @ param aName name of type . 
 + * @ param aSurroundingClass name of surrounding class . 
 + * @ return class infor for given name . 
 + * / 
 + protected final ClassInfo createClassInfo ( final Token aName , 
 + final String aSurroundingClass ) 
 + { 
 + ClassInfo ci = findClassAlias ( aName . getText ( ) ) ; 
 + if ( ci ! = null ) { 
 + return new ClassAlias ( aName , ci ) ; 
 + } 
 + return new RegularClass ( aName , aSurroundingClass , this ) ; 
 + } 
 + 
 + / * * 
 + * Looking if a given name is alias . 
 + * @ param aName given name 
 + * @ return ClassInfo for alias if it exists , null otherwise 
 * / 
 - protected class ClassInfo 
 + protected final ClassInfo findClassAlias ( final String aName ) 
 + { 
 + ClassInfo ci = null ; 
 + for ( int i = mTypeParams . size ( ) - 1 ; i > = 0 ; i - - ) { 
 + Map paramMap = ( Map ) mTypeParams . get ( i ) ; 
 + ci = ( ClassInfo ) paramMap . get ( aName ) ; 
 + if ( ci ! = null ) { 
 + break ; 
 + } 
 + } 
 + return ci ; 
 + } 
 + 
 + / * * 
 + * Contains class ' s < code > Token < / code > . 
 + * / 
 + protected abstract static class ClassInfo 
 { 
 / * * < code > FullIdent < / code > associated with this class . * / 
 - private FullIdent mName ; 
 - / * * < code > Class < / code > object of this class if it ' s loadable . * / 
 - private Class mClass ; 
 - / * * name of surrounding class . * / 
 - private String mSurroundingClass ; 
 - / * * is class loadable . * / 
 - private boolean mIsLoadable ; 
 + private final Token mName ; 
 + 
 + / * * @ return class name * / 
 + public final Token getName ( ) 
 + { 
 + return mName ; 
 + } 
 + 
 + / * * @ return < code > Class < / code > associated with an object . * / 
 + public abstract Class getClazz ( ) ; 
 
 / * * 
 - * Creates new instance of of class information object . 
 - * @ param aName < code > FullIdent < / code > associated with new object . 
 - * @ param aSurroundingClass name of current surrounding class . 
 + * Creates new instance of class inforamtion object . 
 + * @ param aName token which represents class name . 
 * / 
 - public ClassInfo ( final FullIdent aName , final String aSurroundingClass ) 
 + protected ClassInfo ( final Token aName ) 
 { 
 if ( aName = = null ) { 
 throw new NullPointerException ( 
 " ClassInfo ' s name should be non - null " ) ; 
 } 
 mName = aName ; 
 - mSurroundingClass = aSurroundingClass ; 
 - mIsLoadable = true ; 
 } 
 + } 
 
 - / * * @ return class name * / 
 - public final FullIdent getName ( ) 
 + / * * Represents regular classes / enumes . * / 
 + private static final class RegularClass extends ClassInfo 
 + { 
 + / * * name of surrounding class . * / 
 + private String mSurroundingClass ; 
 + / * * is class loadable . * / 
 + private boolean mIsLoadable = true ; 
 + / * * < code > Class < / code > object of this class if it ' s loadable . * / 
 + private Class mClass ; 
 + / * * the check we use to resolve classes . * / 
 + private final AbstractTypeAwareCheck mCheck ; 
 + 
 + / * * 
 + * Creates new instance of of class information object . 
 + * @ param aName < code > FullIdent < / code > associated with new object . 
 + * @ param aSurroundingClass name of current surrounding class . 
 + * @ param aCheck the check we use to load class . 
 + * / 
 + private RegularClass ( final Token aName , 
 + final String aSurroundingClass , 
 + final AbstractTypeAwareCheck aCheck ) 
 { 
 - return mName ; 
 + super ( aName ) ; 
 + mSurroundingClass = aSurroundingClass ; 
 + mCheck = aCheck ; 
 } 
 - 
 / * * @ return if class is loadable ot not . * / 
 - public final boolean isLoadable ( ) 
 + private boolean isLoadable ( ) 
 { 
 return mIsLoadable ; 
 } 
 
 / * * @ return < code > Class < / code > associated with an object . * / 
 - public final Class getClazz ( ) 
 + public Class getClazz ( ) 
 { 
 if ( isLoadable ( ) & & mClass = = null ) { 
 - setClazz ( AbstractTypeAwareCheck . this . 
 - tryLoadClass ( getName ( ) , mSurroundingClass ) ) ; 
 + setClazz ( mCheck . tryLoadClass ( getName ( ) , mSurroundingClass ) ) ; 
 } 
 return mClass ; 
 } 
 @ @ - 377 , 10 + 490 , 98 @ @ public abstract class AbstractTypeAwareCheck 
 * Associates < code > Class < / code > with an object . 
 * @ param aClass < code > Class < / code > to associate with . 
 * / 
 - public final void setClazz ( Class aClass ) 
 + private void setClazz ( Class aClass ) 
 { 
 mClass = aClass ; 
 mIsLoadable = ( mClass ! = null ) ; 
 } 
 + 
 + / * * { @ inheritDoc } * / 
 + public String toString ( ) 
 + { 
 + return " RegularClass [ name = " + getName ( ) 
 + + " , in class = " + mSurroundingClass 
 + + " , loadable = " + mIsLoadable 
 + + " , class = " + mClass + " ] " ; 
 + } 
 + } 
 + 
 + / * * Represents type param which is " alias " for real type . * / 
 + private static class ClassAlias extends ClassInfo 
 + { 
 + / * * Class information associated with the alias . * / 
 + private final ClassInfo mClassInfo ; 
 + 
 + / * * 
 + * Creates nnew instance of the class . 
 + * @ param aName token which represents name of class alias . 
 + * @ param aClassInfo class information associated with the alias . 
 + * / 
 + ClassAlias ( final Token aName , ClassInfo aClassInfo ) 
 + { 
 + super ( aName ) ; 
 + mClassInfo = aClassInfo ; 
 + } 
 + 
 + / * * { @ inheritDoc } * / 
 + public final Class getClazz ( ) 
 + { 
 + return mClassInfo . getClazz ( ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Represents text element with location in the text . 
 + * / 
 + protected static class Token 
 + { 
 + / * * token ' s column number . * / 
 + private final int mColumn ; 
 + / * * token ' s line number . * / 
 + private final int mLine ; 
 + / * * token ' s text . * / 
 + private final String mText ; 
 + 
 + / * * 
 + * Creates token . 
 + * @ param aText token ' s text 
 + * @ param aLine token ' s line number 
 + * @ param aColumn token ' s column number 
 + * / 
 + public Token ( String aText , int aLine , int aColumn ) 
 + { 
 + mText = aText ; 
 + mLine = aLine ; 
 + mColumn = aColumn ; 
 + } 
 + 
 + / * * 
 + * Converts FullIdent to Token . 
 + * @ param aFullIdent full ident to convert . 
 + * / 
 + public Token ( FullIdent aFullIdent ) 
 + { 
 + mText = aFullIdent . getText ( ) ; 
 + mLine = aFullIdent . getLineNo ( ) ; 
 + mColumn = aFullIdent . getColumnNo ( ) ; 
 + } 
 + 
 + / * * @ return line number of the token * / 
 + public int getLineNo ( ) 
 + { 
 + return mLine ; 
 + } 
 + 
 + / * * @ return column number of the token * / 
 + public int getColumnNo ( ) 
 + { 
 + return mColumn ; 
 + } 
 + 
 + / * * @ return text of the token * / 
 + public String getText ( ) 
 + { 
 + return mText ; 
 + } 
 } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 index 602e23f . . a396ceb 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 @ @ - 116 , 10 + 116 , 9 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck 
 * Logs error if unable to load class information . 
 * @ param aIdent class name for which we can no load class . 
 * / 
 - protected final void logLoadError ( FullIdent aIdent ) 
 + protected final void logLoadError ( Token aIdent ) 
 { 
 - logLoadErrorImpl ( aIdent . getLineNo ( ) , 
 - aIdent . getColumnNo ( ) , 
 + logLoadErrorImpl ( aIdent . getLineNo ( ) , aIdent . getColumnNo ( ) , 
 " redundant . throws . classInfo " , 
 new Object [ ] { aIdent . getText ( ) } ) ; 
 } 
 @ @ - 140 , 7 + 139 , 7 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck 
 { 
 / / Let ' s try to load class . 
 final ClassInfo newClassInfo = 
 - new ClassInfo ( aExc , getCurrentClassName ( ) ) ; 
 + createClassInfo ( new Token ( aExc ) , getCurrentClassName ( ) ) ; 
 
 if ( ! mAllowUnchecked ) { 
 if ( isUnchecked ( newClassInfo . getClazz ( ) ) ) { 
 @ @ - 152 , 7 + 151 , 7 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck 
 boolean shouldAdd = true ; 
 for ( Iterator known = aKnownExcs . iterator ( ) ; known . hasNext ( ) ; ) { 
 final ClassInfo ci = ( ClassInfo ) known . next ( ) ; 
 - final FullIdent fi = ci . getName ( ) ; 
 + final Token fi = ci . getName ( ) ; 
 
 if ( isSameType ( fi . getText ( ) , aExc . getText ( ) ) ) { 
 shouldAdd = false ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 index a6dfdc3 . . d6a8c34 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 @ @ - 267 , 14 + 267 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 TokenTypes . ANNOTATION _ FIELD _ DEF , } ; 
 } 
 
 - / * * @ see com . puppycrawl . tools . checkstyle . api . Check * / 
 - public int [ ] getRequiredTokens ( ) 
 - { 
 - return new int [ ] { 
 - TokenTypes . PACKAGE _ DEF , TokenTypes . IMPORT , 
 - TokenTypes . CLASS _ DEF , TokenTypes . ENUM _ DEF , } ; 
 - } 
 - 
 / * * 
 * Checks Javadoc comments for a method or constructor . 
 * 
 @ @ - 305 , 7 + 297 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 * 
 * @ param aIdent class name for which we can no load class . 
 * / 
 - protected final void logLoadError ( FullIdent aIdent ) 
 + protected final void logLoadError ( Token aIdent ) 
 { 
 logLoadErrorImpl ( aIdent . getLineNo ( ) , aIdent . getColumnNo ( ) , 
 " javadoc . classInfo " , 
 @ @ - 400 , 21 + 392 , 37 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 Matcher noargMultilineStart = 
 MATCH _ JAVADOC _ NOARG _ MULTILINE _ START . matcher ( lines [ i ] ) ; 
 if ( javadocArgMatcher . find ( ) ) { 
 - tags . add ( new JavadocTag ( currentLine , 
 + int col = javadocArgMatcher . start ( 1 ) - 1 ; 
 + if ( i = = 0 ) { 
 + col + = aComment . getStartColNo ( ) ; 
 + } 
 + tags . add ( new JavadocTag ( currentLine , col , 
 javadocArgMatcher . group ( 1 ) , 
 javadocArgMatcher . group ( 2 ) ) ) ; 
 } 
 else if ( javadocNoargMatcher . find ( ) ) { 
 - tags . add ( new JavadocTag ( currentLine , 
 + int col = javadocNoargMatcher . start ( 1 ) - 1 ; 
 + if ( i = = 0 ) { 
 + col + = aComment . getStartColNo ( ) ; 
 + } 
 + tags . add ( new JavadocTag ( currentLine , col , 
 javadocNoargMatcher . group ( 1 ) ) ) ; 
 } 
 else if ( noargCurlyMatcher . find ( ) ) { 
 - tags . add ( new JavadocTag ( currentLine , 
 + int col = noargCurlyMatcher . start ( 1 ) - 1 ; 
 + if ( i = = 0 ) { 
 + col + = aComment . getStartColNo ( ) ; 
 + } 
 + tags . add ( new JavadocTag ( currentLine , col , 
 noargCurlyMatcher . group ( 1 ) ) ) ; 
 } 
 else if ( argMultilineStart . find ( ) ) { 
 final String p1 = argMultilineStart . group ( 1 ) ; 
 final String p2 = argMultilineStart . group ( 2 ) ; 
 + int col = argMultilineStart . start ( 1 ) - 1 ; 
 + if ( i = = 0 ) { 
 + col + = aComment . getStartColNo ( ) ; 
 + } 
 
 / / Look for the rest of the comment if all we saw was 
 / / the tag and the name . Stop when we see ' * / ' ( end of 
 @ @ - 429 , 7 + 437 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 String lFin = multilineCont . group ( 1 ) ; 
 if ( ! lFin . equals ( NEXT _ TAG ) & & ! lFin . equals ( END _ JAVADOC ) ) 
 { 
 - tags . add ( new JavadocTag ( currentLine , p1 , p2 ) ) ; 
 + tags . add ( new JavadocTag ( currentLine , col , p1 , p2 ) ) ; 
 } 
 } 
 remIndex + + ; 
 @ @ - 437 , 6 + 445 , 10 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 } 
 else if ( noargMultilineStart . find ( ) ) { 
 final String p1 = noargMultilineStart . group ( 1 ) ; 
 + int col = noargMultilineStart . start ( 1 ) - 1 ; 
 + if ( i = = 0 ) { 
 + col + = aComment . getStartColNo ( ) ; 
 + } 
 
 / / Look for the rest of the comment if all we saw was 
 / / the tag and the name . Stop when we see ' * / ' ( end of 
 @ @ - 451 , 7 + 463 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 String lFin = multilineCont . group ( 1 ) ; 
 if ( ! lFin . equals ( NEXT _ TAG ) & & ! lFin . equals ( END _ JAVADOC ) ) 
 { 
 - tags . add ( new JavadocTag ( currentLine , p1 ) ) ; 
 + tags . add ( new JavadocTag ( currentLine , col , p1 ) ) ; 
 } 
 } 
 remIndex + + ; 
 @ @ - 500 , 9 + 512 , 9 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 if ( ( child . getType ( ) = = TokenTypes . IDENT ) 
 | | ( child . getType ( ) = = TokenTypes . DOT ) ) 
 { 
 + FullIdent fi = FullIdent . createFullIdent ( child ) ; 
 final ExceptionInfo ei = 
 - new ExceptionInfo ( FullIdent . createFullIdent ( child ) , 
 - getCurrentClassName ( ) ) ; 
 + new ExceptionInfo ( new Token ( fi ) , getCurrentClassName ( ) ) ; 
 retVal . add ( ei ) ; 
 } 
 child = ( DetailAST ) child . getNextSibling ( ) ; 
 @ @ - 568 , 8 + 580 , 8 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 
 / / Handle extra JavadocTag 
 if ( ! found ) { 
 - log ( tag . getLineNo ( ) , " javadoc . unusedTag " , " @ param " , tag 
 - . getArg1 ( ) ) ; 
 + log ( tag . getLineNo ( ) , tag . getColumnNo ( ) , 
 + " javadoc . unusedTag " , " @ param " , tag . getArg1 ( ) ) ; 
 } 
 } 
 
 @ @ - 633 , 7 + 645 , 8 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 final JavadocTag jt = ( JavadocTag ) it . next ( ) ; 
 if ( jt . isReturnTag ( ) ) { 
 if ( found ) { 
 - log ( jt . getLineNo ( ) , " javadoc . return . duplicate " ) ; 
 + log ( jt . getLineNo ( ) , jt . getColumnNo ( ) , 
 + " javadoc . return . duplicate " ) ; 
 } 
 found = true ; 
 it . remove ( ) ; 
 @ @ - 672 , 14 + 685 , 16 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 
 / / Loop looking for matching throw 
 final String documentedEx = tag . getArg1 ( ) ; 
 + Token token = new Token ( tag . getArg1 ( ) , tag . getLineNo ( ) , 
 + tag . getColumnNo ( ) ) ; 
 + ClassInfo documentedCI = 
 + createClassInfo ( token , getCurrentClassName ( ) ) ; 
 boolean found = foundThrows . contains ( documentedEx ) ; 
 - Class documentedClass = null ; 
 - boolean classLoaded = false ; 
 
 final ListIterator throwIt = aThrows . listIterator ( ) ; 
 while ( ! found & & throwIt . hasNext ( ) ) { 
 final ExceptionInfo ei = ( ExceptionInfo ) throwIt . next ( ) ; 
 - final FullIdent fi = ei . getName ( ) ; 
 + final Token fi = ei . getName ( ) ; 
 final String declaredEx = fi . getText ( ) ; 
 
 if ( isSameType ( declaredEx , documentedEx ) ) { 
 @ @ - 688 , 11 + 703 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 foundThrows . add ( documentedEx ) ; 
 } 
 else if ( mAllowThrowsTagsForSubclasses ) { 
 - if ( ! classLoaded ) { 
 - documentedClass = loadClassForTag ( tag ) ; 
 - classLoaded = true ; 
 - } 
 - found = isSubclass ( documentedClass , ei . getClazz ( ) ) ; 
 + found = isSubclass ( documentedCI . getClazz ( ) , ei . getClazz ( ) ) ; 
 } 
 } 
 
 @ @ - 700 , 16 + 711 , 13 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 if ( ! found ) { 
 boolean reqd = true ; 
 if ( mAllowUndeclaredRTE ) { 
 - if ( ! classLoaded ) { 
 - documentedClass = loadClassForTag ( tag ) ; 
 - classLoaded = true ; 
 - } 
 - reqd = ! isUnchecked ( documentedClass ) ; 
 + reqd = ! isUnchecked ( documentedCI . getClazz ( ) ) ; 
 } 
 
 if ( reqd ) { 
 - log ( tag . getLineNo ( ) , " javadoc . unusedTag " , " @ throws " , tag 
 - . getArg1 ( ) ) ; 
 + log ( tag . getLineNo ( ) , tag . getColumnNo ( ) , 
 + " javadoc . unusedTag " , " @ throws " , tag . getArg1 ( ) ) ; 
 + 
 } 
 } 
 } 
 @ @ - 721 , 7 + 729 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 while ( throwIt . hasNext ( ) ) { 
 final ExceptionInfo ei = ( ExceptionInfo ) throwIt . next ( ) ; 
 if ( ! ei . isFound ( ) ) { 
 - final FullIdent fi = ei . getName ( ) ; 
 + final Token fi = ei . getName ( ) ; 
 log ( fi . getLineNo ( ) , fi . getColumnNo ( ) , 
 " javadoc . expectedTag " , " @ throws " , fi . getText ( ) ) ; 
 } 
 @ @ - 730 , 22 + 738 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 } 
 
 / * * 
 - * Tries to load class for throws tag . Logs error if unable . 
 - * 
 - * @ param aTag name of class which we try to load . 
 - * @ return < code > Class < / code > for the tag . 
 - * / 
 - private Class loadClassForTag ( JavadocTag aTag ) 
 - { 
 - Class clazz = resolveClass ( aTag . getArg1 ( ) , getCurrentClassName ( ) ) ; 
 - if ( clazz = = null ) { 
 - log ( aTag . getLineNo ( ) , " javadoc . classInfo " , " @ throws " , aTag 
 - . getArg1 ( ) ) ; 
 - } 
 - return clazz ; 
 - } 
 - 
 - / * * 
 * Returns whether an AST represents a setter method . 
 * @ param aAST the AST to check with 
 * @ return whether the AST represents a setter method 
 @ @ - 858 , 20 + 850 , 22 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 } 
 
 / * * Stores useful information about declared exception . * / 
 - class ExceptionInfo extends ClassInfo 
 + private class ExceptionInfo 
 { 
 / * * does the exception have throws tag associated with . * / 
 private boolean mFound ; 
 + / * * class information associated with this exception . * / 
 + private ClassInfo mClassInfo ; 
 
 / * * 
 * Creates new instance for < code > FullIdent < / code > . 
 * 
 - * @ param aIdent < code > FullIdent < / code > of the exception 
 + * @ param aIdent the exception 
 * @ param aCurrentClass name of current class . 
 * / 
 - ExceptionInfo ( FullIdent aIdent , String aCurrentClass ) 
 + ExceptionInfo ( Token aIdent , String aCurrentClass ) 
 { 
 - super ( aIdent , aCurrentClass ) ; 
 + mClassInfo = createClassInfo ( aIdent , aCurrentClass ) ; 
 } 
 
 / * * Mark that the exception has associated throws tag * / 
 @ @ - 885 , 5 + 879 , 17 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 { 
 return mFound ; 
 } 
 + 
 + / * * @ return exception ' s name * / 
 + final Token getName ( ) 
 + { 
 + return mClassInfo . getName ( ) ; 
 + } 
 + 
 + / * * @ return class for this exception * / 
 + final Class getClazz ( ) 
 + { 
 + return mClassInfo . getClazz ( ) ; 
 + } 
 } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java 
 index 6d8d3df . . ce60eff 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTag . java 
 @ @ - 26 , 6 + 26 , 8 @ @ class JavadocTag 
 { 
 / * * the line number of the tag * * / 
 private final int mLineNo ; 
 + / * * the column number of the tag * * / 
 + private int mColumnNo ; 
 / * * the tag string * * / 
 private final String mTag ; 
 / * * an optional first argument . For example the parameter name . * * / 
 @ @ - 34 , 12 + 36 , 14 @ @ class JavadocTag 
 / * * 
 * Constructs the object . 
 * @ param aLine the line number of the tag 
 + * @ param aColumn the column number of the tag 
 * @ param aTag the tag string 
 * @ param aArg1 the tag argument 
 * * / 
 - JavadocTag ( int aLine , String aTag , String aArg1 ) 
 + JavadocTag ( int aLine , int aColumn , String aTag , String aArg1 ) 
 { 
 mLineNo = aLine ; 
 + mColumnNo = aColumn ; 
 mTag = aTag ; 
 mArg1 = aArg1 ; 
 } 
 @ @ - 47 , 11 + 51 , 12 @ @ class JavadocTag 
 / * * 
 * Constructs the object . 
 * @ param aLine the line number of the tag 
 + * @ param aColumn the column number of the tag 
 * @ param aTag the tag string 
 * * / 
 - JavadocTag ( int aLine , String aTag ) 
 + JavadocTag ( int aLine , int aColumn , String aTag ) 
 { 
 - this ( aLine , aTag , null ) ; 
 + this ( aLine , aColumn , aTag , null ) ; 
 } 
 
 / * * @ return the tag string * * / 
 @ @ - 72 , 11 + 77 , 17 @ @ class JavadocTag 
 return mLineNo ; 
 } 
 
 + / * * @ return the column number * / 
 + int getColumnNo ( ) 
 + { 
 + return mColumnNo ; 
 + } 
 + 
 / * * @ return a string representation of the object * * / 
 public String toString ( ) 
 { 
 return " { Tag = ' " + getTag ( ) + " ' , lineNo = " + getLineNo ( ) 
 - + " , Arg1 = ' " + getArg1 ( ) + " ' } " ; 
 + + " , columnNo = " + mColumnNo + " , Arg1 = ' " + getArg1 ( ) + " ' } " ; 
 } 
 
 / * * @ return whether the tag is an ' author ' tag * * / 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 index 0332f2d . . 778332b 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 @ @ - 214 , 9 + 214 , 12 @ @ public class JavadocTypeCheck 
 if ( content . endsWith ( " * / " ) ) { 
 content = content . substring ( 0 , content . length ( ) - 2 ) ; 
 } 
 - tags . add ( new JavadocTag ( aCmt . getStartLineNo ( ) + i , 
 - tagName , 
 - content . trim ( ) ) ) ; 
 + int col = tagMatcher . start ( 1 ) - 1 ; 
 + if ( i = = 0 ) { 
 + col + = aCmt . getStartColNo ( ) ; 
 + } 
 + tags . add ( new JavadocTag ( aCmt . getStartLineNo ( ) + i , col , 
 + tagName , content . trim ( ) ) ) ; 
 } 
 tagPattern = Utils . getPattern ( " ^ \ \ s * \ \ * * \ \ s * @ ( \ \ p { Alpha } + ) \ \ s " ) ; 
 } 
 @ @ - 300 , 16 + 303 , 19 @ @ public class JavadocTypeCheck 
 if ( matcher . matches ( ) ) { 
 typeParamName = matcher . group ( 1 ) . trim ( ) ; 
 if ( ! aTypeParamNames . contains ( typeParamName ) ) { 
 - log ( tag . getLineNo ( ) , " javadoc . unusedTag " , 
 + log ( tag . getLineNo ( ) , tag . getColumnNo ( ) , 
 + " javadoc . unusedTag " , 
 " @ param " , " < " + typeParamName + " > " ) ; 
 } 
 } 
 else { 
 - log ( tag . getLineNo ( ) , " javadoc . unusedTagGeneral " ) ; 
 + log ( tag . getLineNo ( ) , tag . getColumnNo ( ) , 
 + " javadoc . unusedTagGeneral " ) ; 
 } 
 } 
 else { 
 - log ( tag . getLineNo ( ) , " javadoc . unusedTagGeneral " ) ; 
 + log ( tag . getLineNo ( ) , tag . getColumnNo ( ) , 
 + " javadoc . unusedTagGeneral " ) ; 
 } 
 } 
 } 
 diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java b / src / testinputs / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java 
 new file mode 100644 
 index 0000000 . . 06f7ba0 
 - - - / dev / null 
 + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java 
 @ @ - 0 , 0 + 1 , 46 @ @ 
 + public class TestGenerics < E extends java . lang . Exception , 
 + RE extends RuntimeException & java . io . Serializable > 
 + { 
 + / * * 
 + * @ throws E in some cases 
 + * @ throws RE in some cases 
 + * / 
 + public void method1 ( ) throws E 
 + { 
 + } 
 + 
 + / * * 
 + * RuntimeException is not declared . 
 + * / 
 + public void method2 ( ) throws RE 
 + { 
 + } 
 + 
 + / * * 
 + * @ throws E in some cases 
 + * @ throws RE in other cases 
 + * / 
 + public void method3 ( ) throws E , RE 
 + { 
 + } 
 + 
 + / * * 
 + * @ throws RE in some cases 
 + * @ throws NPE in some other cases 
 + * / 
 + public < NPE extends NullPointerException > void method4 ( ) throws NPE , RE 
 + { 
 + } 
 + 
 + public class InnerClass < RuntimeException extends ClassCastException > 
 + { 
 + / * * 
 + * @ throws E in some case 
 + * @ throws RE in some other cases 
 + * / 
 + public void method1 ( ) throws RuntimeException , RE , 
 + java . lang . RuntimeException 
 + { 
 + } 
 + } 
 + } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java 
 index 4b6de58 . . 1f14f1d 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheckTest . java 
 @ @ - 92 , 4 + 92 , 24 @ @ public class RedundantThrowsCheckTest 
 final String [ ] expected = { } ; 
 verify ( checkConfig , getPath ( " javadoc / BadCls . java " ) , expected ) ; 
 } 
 + 
 + public void test _ generics _ params ( ) throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( RedundantThrowsCheck . class ) ; 
 + final String [ ] expected = { 
 + " 15 : 34 : Redundant throws : ' RE ' is unchecked exception . " , 
 + " 23 : 37 : Redundant throws : ' RE ' is subclass of ' E ' . " , 
 + " 23 : 37 : Redundant throws : ' RE ' is unchecked exception . " , 
 + " 31 : 69 : Redundant throws : ' NPE ' is subclass of ' RE ' . " , 
 + " 31 : 69 : Redundant throws : ' NPE ' is unchecked exception . " , 
 + " 31 : 74 : Redundant throws : ' RE ' is unchecked exception . " , 
 + " 41 : 38 : Redundant throws : ' RuntimeException ' is subclass of ' RE ' . " , 
 + " 41 : 38 : Redundant throws : ' RuntimeException ' is unchecked exception . " , 
 + " 41 : 56 : Redundant throws : ' RE ' is subclass of ' java . lang . RuntimeException ' . " , 
 + " 41 : 56 : Redundant throws : ' RE ' is unchecked exception . " , 
 + " 42 : 13 : Redundant throws : ' java . lang . RuntimeException ' is unchecked exception . " , 
 + } ; 
 + verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java 
 index 5c2a732 . . 3ec5d32 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheckTest . java 
 @ @ - 14 , 32 + 14 , 35 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 createCheckConfig ( JavadocMethodCheck . class ) ; 
 final String [ ] expected = { 
 " 14 : 5 : Missing a Javadoc comment . " , 
 - " 18 : Unused @ param tag for ' unused ' . " , 
 - " 24 : Expected an @ return tag . " , " 33 : Expected an @ return tag . " , 
 + " 18 : 9 : Unused @ param tag for ' unused ' . " , 
 + " 24 : Expected an @ return tag . " , 
 + " 33 : Expected an @ return tag . " , 
 " 40 : 16 : Expected @ throws tag for ' Exception ' . " , 
 " 49 : 16 : Expected @ throws tag for ' Exception ' . " , 
 - " 53 : Unused @ throws tag for ' WrongException ' . " , 
 + " 53 : 9 : Unused @ throws tag for ' WrongException ' . " , 
 " 55 : 16 : Expected @ throws tag for ' Exception ' . " , 
 " 55 : 27 : Expected @ throws tag for ' NullPointerException ' . " , 
 " 60 : 22 : Expected @ param tag for ' aOne ' . " , 
 " 68 : 22 : Expected @ param tag for ' aOne ' . " , 
 - " 72 : Unused @ param tag for ' WrongParam ' . " , 
 + " 72 : 9 : Unused @ param tag for ' WrongParam ' . " , 
 " 73 : 23 : Expected @ param tag for ' aOne ' . " , 
 " 73 : 33 : Expected @ param tag for ' aTwo ' . " , 
 - " 78 : Unused @ param tag for ' Unneeded ' . " , 
 - " 79 : Unused Javadoc tag . " , " 87 : Duplicate @ return tag . " , 
 + " 78 : 8 : Unused @ param tag for ' Unneeded ' . " , 
 + " 79 : Unused Javadoc tag . " , 
 + " 87 : 8 : Duplicate @ return tag . " , 
 " 109 : 23 : Expected @ param tag for ' aOne ' . " , 
 " 109 : 55 : Expected @ param tag for ' aFour ' . " , 
 " 109 : 66 : Expected @ param tag for ' aFive ' . " , 
 - " 178 : Unused @ throws tag for ' ThreadDeath ' . " , 
 - " 179 : Unused @ throws tag for ' ArrayStoreException ' . " , 
 - " 236 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , 
 - " 254 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , 
 + " 178 : 8 : Unused @ throws tag for ' ThreadDeath ' . " , 
 + " 179 : 8 : Unused @ throws tag for ' ArrayStoreException ' . " , 
 + " 236 : 8 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , 
 + " 254 : 8 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , 
 " 256 : 28 : Expected @ throws tag for ' IOException ' . " , 
 - " 262 : Unused @ param tag for ' aParam ' . " , 
 + " 262 : 8 : Unused @ param tag for ' aParam ' . " , 
 " 320 : 9 : Missing a Javadoc comment . " , 
 " 329 : 5 : Missing a Javadoc comment . " , 
 - " 333 : Unused Javadoc tag . " , } ; 
 + " 333 : Unused Javadoc tag . " , 
 + } ; 
 
 verify ( checkConfig , getPath ( " InputTags . java " ) , expected ) ; 
 } 
 @ @ - 51 , 7 + 54 , 7 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 checkConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; 
 final String [ ] expected = { 
 " 14 : 5 : Missing a Javadoc comment . " , 
 - " 18 : Unused @ param tag for ' unused ' . " , 
 + " 18 : 9 : Unused @ param tag for ' unused ' . " , 
 " 24 : Expected an @ return tag . " , 
 " 33 : Expected an @ return tag . " , 
 " 40 : 16 : Expected @ throws tag for ' Exception ' . " , 
 @ @ - 60 , 18 + 63 , 19 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 " 55 : 27 : Expected @ throws tag for ' NullPointerException ' . " , 
 " 60 : 22 : Expected @ param tag for ' aOne ' . " , 
 " 68 : 22 : Expected @ param tag for ' aOne ' . " , 
 - " 72 : Unused @ param tag for ' WrongParam ' . " , 
 + " 72 : 9 : Unused @ param tag for ' WrongParam ' . " , 
 " 73 : 23 : Expected @ param tag for ' aOne ' . " , 
 " 73 : 33 : Expected @ param tag for ' aTwo ' . " , 
 - " 78 : Unused @ param tag for ' Unneeded ' . " , 
 - " 79 : Unused Javadoc tag . " , " 87 : Duplicate @ return tag . " , 
 + " 78 : 8 : Unused @ param tag for ' Unneeded ' . " , 
 + " 79 : Unused Javadoc tag . " , 
 + " 87 : 8 : Duplicate @ return tag . " , 
 " 109 : 23 : Expected @ param tag for ' aOne ' . " , 
 " 109 : 55 : Expected @ param tag for ' aFour ' . " , 
 " 109 : 66 : Expected @ param tag for ' aFive ' . " , 
 - " 236 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , 
 - " 254 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , 
 + " 236 : 8 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , 
 + " 254 : 8 : Unused @ throws tag for ' java . io . FileNotFoundException ' . " , 
 " 256 : 28 : Expected @ throws tag for ' IOException ' . " , 
 - " 262 : Unused @ param tag for ' aParam ' . " , 
 + " 262 : 8 : Unused @ param tag for ' aParam ' . " , 
 " 320 : 9 : Missing a Javadoc comment . " , 
 " 329 : 5 : Missing a Javadoc comment . " , 
 " 333 : Unused Javadoc tag . " , } ; 
 @ @ - 171 , 7 + 175 , 7 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 checkConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; 
 final String [ ] expected = { 
 " 14 : 5 : Missing a Javadoc comment . " , 
 - " 18 : Unused @ param tag for ' unused ' . " , 
 + " 18 : 9 : Unused @ param tag for ' unused ' . " , 
 " 24 : Expected an @ return tag . " , 
 " 33 : Expected an @ return tag . " , 
 " 40 : 16 : Expected @ throws tag for ' Exception ' . " , 
 @ @ - 180 , 18 + 184 , 19 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 " 55 : 27 : Expected @ throws tag for ' NullPointerException ' . " , 
 " 60 : 22 : Expected @ param tag for ' aOne ' . " , 
 " 68 : 22 : Expected @ param tag for ' aOne ' . " , 
 - " 72 : Unused @ param tag for ' WrongParam ' . " , 
 + " 72 : 9 : Unused @ param tag for ' WrongParam ' . " , 
 " 73 : 23 : Expected @ param tag for ' aOne ' . " , 
 " 73 : 33 : Expected @ param tag for ' aTwo ' . " , 
 - " 78 : Unused @ param tag for ' Unneeded ' . " , 
 - " 79 : Unused Javadoc tag . " , " 87 : Duplicate @ return tag . " , 
 + " 78 : 8 : Unused @ param tag for ' Unneeded ' . " , 
 + " 79 : Unused Javadoc tag . " , 
 + " 87 : 8 : Duplicate @ return tag . " , 
 " 109 : 23 : Expected @ param tag for ' aOne ' . " , 
 " 109 : 55 : Expected @ param tag for ' aFour ' . " , 
 " 109 : 66 : Expected @ param tag for ' aFive ' . " , 
 - " 178 : Unused @ throws tag for ' ThreadDeath ' . " , 
 - " 179 : Unused @ throws tag for ' ArrayStoreException ' . " , 
 + " 178 : 8 : Unused @ throws tag for ' ThreadDeath ' . " , 
 + " 179 : 8 : Unused @ throws tag for ' ArrayStoreException ' . " , 
 " 256 : 28 : Expected @ throws tag for ' IOException ' . " , 
 - " 262 : Unused @ param tag for ' aParam ' . " , 
 + " 262 : 8 : Unused @ param tag for ' aParam ' . " , 
 " 320 : 9 : Missing a Javadoc comment . " , 
 " 329 : 5 : Missing a Javadoc comment . " , 
 " 333 : Unused Javadoc tag . " , } ; 
 @ @ - 349 , 7 + 354 , 7 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( JavadocMethodCheck . class ) ; 
 final String [ ] expected = { 
 - " 26 : Unused @ param tag for ' < BB > ' . " , 
 + " 26 : 8 : Unused @ param tag for ' < BB > ' . " , 
 " 28 : 13 : Expected @ param tag for ' < Z > ' . " , } ; 
 verify ( checkConfig , getPath ( " InputTypeParamsTags . java " ) , expected ) ; 
 } 
 @ @ - 379 , 4 + 384 , 52 @ @ public class JavadocMethodCheckTest extends BaseCheckTestCase 
 final String [ ] expected = { } ; 
 verify ( checkConfig , getPath ( " javadoc / Test3 . java " ) , expected ) ; 
 } 
 + 
 + public void test _ generics _ 1 ( ) throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( JavadocMethodCheck . class ) ; 
 + checkConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; 
 + checkConfig . addAttribute ( " allowUndeclaredRTE " , " true " ) ; 
 + final String [ ] expected = { 
 + " 15 : 34 : Expected @ throws tag for ' RE ' . " , 
 + " 23 : 37 : Expected @ throws tag for ' RE ' . " , 
 + " 31 : 13 : Expected @ param tag for ' < NPE > ' . " , 
 + " 38 : 12 : Unused @ throws tag for ' E ' . " , 
 + " 41 : 38 : Expected @ throws tag for ' RuntimeException ' . " , 
 + " 42 : 13 : Expected @ throws tag for ' java . lang . RuntimeException ' . " , 
 + } ; 
 + verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; 
 + } 
 + 
 + public void test _ generics _ 2 ( ) throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( JavadocMethodCheck . class ) ; 
 + checkConfig . addAttribute ( " allowThrowsTagsForSubclasses " , " true " ) ; 
 + final String [ ] expected = { 
 + " 15 : 34 : Expected @ throws tag for ' RE ' . " , 
 + " 23 : 37 : Expected @ throws tag for ' RE ' . " , 
 + " 31 : 13 : Expected @ param tag for ' < NPE > ' . " , 
 + " 38 : 12 : Unused @ throws tag for ' E ' . " , 
 + " 41 : 38 : Expected @ throws tag for ' RuntimeException ' . " , 
 + " 42 : 13 : Expected @ throws tag for ' java . lang . RuntimeException ' . " , 
 + } ; 
 + verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; 
 + } 
 + 
 + public void test _ generics _ 3 ( ) throws Exception 
 + { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( JavadocMethodCheck . class ) ; 
 + final String [ ] expected = { 
 + " 6 : 8 : Unused @ throws tag for ' RE ' . " , 
 + " 15 : 34 : Expected @ throws tag for ' RE ' . " , 
 + " 31 : 13 : Expected @ param tag for ' < NPE > ' . " , 
 + " 38 : 12 : Unused @ throws tag for ' E ' . " , 
 + " 41 : 38 : Expected @ throws tag for ' RuntimeException ' . " , 
 + " 42 : 13 : Expected @ throws tag for ' java . lang . RuntimeException ' . " , 
 + } ; 
 + verify ( checkConfig , getPath ( " javadoc / TestGenerics . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java 
 index 8119cac . . 129752d 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java 
 @ @ - 280 , 7 + 280 , 7 @ @ public class JavadocTypeCheckTest extends BaseCheckTestCase 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( JavadocTypeCheck . class ) ; 
 final String [ ] expected = { 
 - " 7 : Unused @ param tag for ' < D > ' . " , 
 + " 7 : 4 : Unused @ param tag for ' < D > ' . " , 
 " 11 : Type Javadoc comment is missing an @ param < C > tag . " , 
 } ; 
 verify ( checkConfig , getPath ( " InputTypeParamsTags . java " ) , expected ) ; 
 @ @ - 291 , 7 + 291 , 7 @ @ public class JavadocTypeCheckTest extends BaseCheckTestCase 
 createCheckConfig ( JavadocTypeCheck . class ) ; 
 checkConfig . addAttribute ( " allowMissingParamTags " , " true " ) ; 
 final String [ ] expected = { 
 - " 7 : Unused @ param tag for ' < D > ' . " , 
 + " 7 : 4 : Unused @ param tag for ' < D > ' . " , 
 } ; 
 verify ( checkConfig , getPath ( " InputTypeParamsTags . java " ) , expected ) ; 
 } 
 diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml 
 index c8ea7c6 . . cd428b6 100755 
 - - - a / src / xdocs / releasenotes . xml 
 + + + b / src / xdocs / releasenotes . xml 
 @ @ - 73 , 6 + 73 , 9 @ @ 
 < li > Fixed implementation of DetailAST so getPreviousSibling ( ) 
 works for all nodes in AST tree ( bug 1244994 ) < / li > 
 
 + < li > Now type - aware check know more about generics ( bug 1249707 , 
 + modules : RedundantThrows and JavadocMethodCheck ) < / li > 
 + 
 < / ul > 
 
 < p > Other improvements : < / p > 
 diff - - git a / suppressions . xml b / suppressions . xml 
 index e6dacb2 . . d6bc0de 100755 
 - - - a / suppressions . xml 
 + + + b / suppressions . xml 
 @ @ - 13 , 7 + 13 , 7 @ @ 
 lines = " 176 " / > 
 < suppress checks = " MagicNumber " 
 files = " JavadocMethodCheck . java " 
 - lines = " 759 , 791 , 816 " / > 
 + lines = " 751 , 783 , 808 " / > 
 < suppress checks = " ImportControl " 
 files = " NewlineAtEndOfFileCheck . java " 
 lines = " 26 " / >
