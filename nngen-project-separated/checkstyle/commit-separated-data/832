BLEU SCORE: 0.04753622060013115

TEST MSG: Issue # 4165 : Split and Organize Checkstyle inputs by Test for checks in coding package : NestedForDepth
GENERATED MSG: Issue # 2161 : unify test input locations

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java <nl> index ebf0440 . . f85dfd8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java <nl> @ @ - 39 , 7 + 39 , 9 @ @ public class NestedForDepthCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator <nl> + + " nestedfordepth " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputNestedForDepth . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputNestedForDepth . java <nl> deleted file mode 100644 <nl> index 4699a50 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputNestedForDepth . java <nl> + + + / dev / null <nl> @ @ - 1 , 52 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2004 Oliver Burn <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - / * * <nl> - * This Class contains no logic , but serves as test - input for the unit tests for the <nl> - * < code > NestedForDepthCheck < / code > - checkstyle enhancement . <nl> - * @ author Alexander Jesse <nl> - * @ see com . puppycrawl . tools . checkstyle . checks . coding . NestedForDepthCheck <nl> - * / <nl> - public class InputNestedForDepth { <nl> - <nl> - / * * <nl> - * Dummy method containing 5 layers of for - statements . <nl> - * / <nl> - public void nestedForFiveLevel ( ) { <nl> - int i = 0 ; <nl> - int i1 = 0 ; <nl> - int i2 = 0 ; <nl> - int i3 = 0 ; <nl> - int i4 = 0 ; <nl> - int i5 = 0 ; <nl> - <nl> - for ( i1 = 0 ; i1 < 10 ; i1 + + ) { <nl> - for ( i2 = 0 ; i2 < 10 ; i2 + + ) { <nl> - for ( i3 = 0 ; i3 < 10 ; i3 + + ) { <nl> - for ( i4 = 0 ; i4 < 10 ; i4 + + ) { <nl> - for ( i5 = 0 ; i5 < 10 ; i5 + + ) { <nl> - i + = 1 ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nestedfordepth / InputNestedForDepth . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nestedfordepth / InputNestedForDepth . java <nl> new file mode 100644 <nl> index 0000000 . . dfa0eb6 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nestedfordepth / InputNestedForDepth . java <nl> @ @ - 0 , 0 + 1 , 52 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2004 Oliver Burn <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . nestedfordepth ; <nl> + <nl> + / * * <nl> + * This Class contains no logic , but serves as test - input for the unit tests for the <nl> + * < code > NestedForDepthCheck < / code > - checkstyle enhancement . <nl> + * @ author Alexander Jesse <nl> + * @ see com . puppycrawl . tools . checkstyle . checks . coding . NestedForDepthCheck <nl> + * / <nl> + public class InputNestedForDepth { <nl> + <nl> + / * * <nl> + * Dummy method containing 5 layers of for - statements . <nl> + * / <nl> + public void nestedForFiveLevel ( ) { <nl> + int i = 0 ; <nl> + int i1 = 0 ; <nl> + int i2 = 0 ; <nl> + int i3 = 0 ; <nl> + int i4 = 0 ; <nl> + int i5 = 0 ; <nl> + <nl> + for ( i1 = 0 ; i1 < 10 ; i1 + + ) { <nl> + for ( i2 = 0 ; i2 < 10 ; i2 + + ) { <nl> + for ( i3 = 0 ; i3 < 10 ; i3 + + ) { <nl> + for ( i4 = 0 ; i4 < 10 ; i4 + + ) { <nl> + for ( i5 = 0 ; i5 < 10 ; i5 + + ) { <nl> + i + = 1 ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> index 9af22a9 . . 2cdac81 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { <nl> } <nl> <nl> private static List < RevCommit > getCommitsToCheck ( ) throws Exception { <nl> - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; <nl> - <nl> - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> List < RevCommit > commits ; <nl> - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> - } <nl> - else { <nl> - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { <nl> + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> + else { <nl> + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> } <nl> return commits ; <nl> } <nl> @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { <nl> <nl> private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { <nl> RevCommitsPair revCommitIteratorPair ; <nl> - try { <nl> + <nl> + try ( RevWalk revWalk = new RevWalk ( repo ) ) { <nl> Iterator < RevCommit > first ; <nl> Iterator < RevCommit > second ; <nl> - <nl> - RevWalk revWalk = new RevWalk ( repo ) ; <nl> - <nl> ObjectId headId = repo . resolve ( Constants . HEAD ) ; <nl> RevCommit headCommit = revWalk . parseCommit ( headId ) ; <nl> <nl> @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { <nl> RevCommit firstParent = headCommit . getParent ( 0 ) ; <nl> RevCommit secondParent = headCommit . getParent ( 1 ) ; <nl> <nl> - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + } <nl> } <nl> else { <nl> - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . call ( ) . iterator ( ) ; <nl> + } <nl> second = Collections . emptyIterator ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java 
 index ebf0440 . . f85dfd8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / NestedForDepthCheckTest . java 
 @ @ - 39 , 7 + 39 , 9 @ @ public class NestedForDepthCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator 
 + + " nestedfordepth " + File . separator 
 + + filename ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputNestedForDepth . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputNestedForDepth . java 
 deleted file mode 100644 
 index 4699a50 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputNestedForDepth . java 
 + + + / dev / null 
 @ @ - 1 , 52 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2004 Oliver Burn 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - / * * 
 - * This Class contains no logic , but serves as test - input for the unit tests for the 
 - * < code > NestedForDepthCheck < / code > - checkstyle enhancement . 
 - * @ author Alexander Jesse 
 - * @ see com . puppycrawl . tools . checkstyle . checks . coding . NestedForDepthCheck 
 - * / 
 - public class InputNestedForDepth { 
 - 
 - / * * 
 - * Dummy method containing 5 layers of for - statements . 
 - * / 
 - public void nestedForFiveLevel ( ) { 
 - int i = 0 ; 
 - int i1 = 0 ; 
 - int i2 = 0 ; 
 - int i3 = 0 ; 
 - int i4 = 0 ; 
 - int i5 = 0 ; 
 - 
 - for ( i1 = 0 ; i1 < 10 ; i1 + + ) { 
 - for ( i2 = 0 ; i2 < 10 ; i2 + + ) { 
 - for ( i3 = 0 ; i3 < 10 ; i3 + + ) { 
 - for ( i4 = 0 ; i4 < 10 ; i4 + + ) { 
 - for ( i5 = 0 ; i5 < 10 ; i5 + + ) { 
 - i + = 1 ; 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nestedfordepth / InputNestedForDepth . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nestedfordepth / InputNestedForDepth . java 
 new file mode 100644 
 index 0000000 . . dfa0eb6 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / nestedfordepth / InputNestedForDepth . java 
 @ @ - 0 , 0 + 1 , 52 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2004 Oliver Burn 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . coding . nestedfordepth ; 
 + 
 + / * * 
 + * This Class contains no logic , but serves as test - input for the unit tests for the 
 + * < code > NestedForDepthCheck < / code > - checkstyle enhancement . 
 + * @ author Alexander Jesse 
 + * @ see com . puppycrawl . tools . checkstyle . checks . coding . NestedForDepthCheck 
 + * / 
 + public class InputNestedForDepth { 
 + 
 + / * * 
 + * Dummy method containing 5 layers of for - statements . 
 + * / 
 + public void nestedForFiveLevel ( ) { 
 + int i = 0 ; 
 + int i1 = 0 ; 
 + int i2 = 0 ; 
 + int i3 = 0 ; 
 + int i4 = 0 ; 
 + int i5 = 0 ; 
 + 
 + for ( i1 = 0 ; i1 < 10 ; i1 + + ) { 
 + for ( i2 = 0 ; i2 < 10 ; i2 + + ) { 
 + for ( i3 = 0 ; i3 < 10 ; i3 + + ) { 
 + for ( i4 = 0 ; i4 < 10 ; i4 + + ) { 
 + for ( i5 = 0 ; i5 < 10 ; i5 + + ) { 
 + i + = 1 ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 index 9af22a9 . . 2cdac81 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { 
 } 
 
 private static List < RevCommit > getCommitsToCheck ( ) throws Exception { 
 - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; 
 - 
 - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 List < RevCommit > commits ; 
 - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 - } 
 - else { 
 - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { 
 + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 + else { 
 + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 } 
 return commits ; 
 } 
 @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { 
 
 private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { 
 RevCommitsPair revCommitIteratorPair ; 
 - try { 
 + 
 + try ( RevWalk revWalk = new RevWalk ( repo ) ) { 
 Iterator < RevCommit > first ; 
 Iterator < RevCommit > second ; 
 - 
 - RevWalk revWalk = new RevWalk ( repo ) ; 
 - 
 ObjectId headId = repo . resolve ( Constants . HEAD ) ; 
 RevCommit headCommit = revWalk . parseCommit ( headId ) ; 
 
 @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { 
 RevCommit firstParent = headCommit . getParent ( 0 ) ; 
 RevCommit secondParent = headCommit . getParent ( 1 ) ; 
 
 - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + } 
 } 
 else { 
 - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . call ( ) . iterator ( ) ; 
 + } 
 second = Collections . emptyIterator ( ) ; 
 } 

