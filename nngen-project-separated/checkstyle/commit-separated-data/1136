BLEU SCORE: 0.05341087579952926

TEST MSG: doc : Fix JavaDoc comments
GENERATED MSG: Javadoc correction

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> index cadbfd2 . . fcc101f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> @ @ - 73 , 7 + 73 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < pre > <nl> * & lt ; module name = " Translation " & gt ; <nl> * & lt ; property name = " baseName " value = " ^ ButtonLabels . * $ " / & gt ; <nl> - * & lt ; module / & gt ; <nl> + * & lt ; / module & gt ; <nl> * < / pre > <nl> * < p > To configure the check to check only files which have ' . properties ' and ' . translations ' <nl> * extensions : <nl> @ @ - 81 , 7 + 81 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < pre > <nl> * & lt ; module name = " Translation " & gt ; <nl> * & lt ; property name = " fileExtensions " value = " properties , translations " / & gt ; <nl> - * & lt ; module / & gt ; <nl> + * & lt ; / module & gt ; <nl> * < / pre > <nl> * <nl> * < p > < b > requiredTranslations < / b > which allows to specify language codes of required translations
NEAREST DIFF (one line): diff - - git a / docs / config . html b / docs / config . html <nl> index 906cf35 . . 26adc0c 100644 <nl> - - - a / docs / config . html <nl> + + + b / docs / config . html <nl> @ @ - 35 , 9 + 35 , 6 @ @ <nl> < a href = " # treewalker " > TreeWalker Checks < / a > <nl> < / li > <nl> < li > <nl> - < a href = " # tokens " > Tokens < / a > <nl> - < / li > <nl> - < li > <nl> < a href = " # xml " > XML < / a > <nl> < / li > <nl> < / ul > <nl> @ @ - 199 , 15 + 196 , 71 @ @ <nl> & lt ; property name = & quot ; headerFile & quot ; value = & quot ; $ { checkstyle . header . file } & quot ; / & gt ; <nl> < / pre > <nl> < p class = " body " > <nl> - Thus , you can re - specify a module property value without changing the configuration document . <nl> + You can use property expansion to re - specify a module property value <nl> + without changing the configuration document . <nl> < / p > <nl> <nl> < a name = " treewalker " > < / a > < h2 > TreeWalker Checks < / h2 > <nl> < p class = " body " > <nl> - Lead - in paragraph . <nl> - < / p > <nl> + The < span class = " code " > TreeWalker < / span > module creates a syntax tree for a Java source file <nl> + and invokes its submodules , called < em > Checks < / em > , during a walk , or traversal , of the nodes <nl> + of the tree . <nl> + Every node of the syntax tree has a token . A visit to a node during the traversal <nl> + triggers all Checks that are configured for its token . <nl> + For example , if Check < span class = " code " > MethodLength < / span > has been configured as <nl> + a submodule of < span class = " code " > TreeWalker < / span > , then a visit to a node <nl> + with a method or a constructor definition <nl> + token triggers < span class = " code " > MethodLength < / span > to check the number of lines <nl> + of the node & apos ; s code block . <nl> + < / p > <nl> + < p class = " body " > <nl> + Some Checks , such as < span class = " code " > FileLength < / span > <nl> + and < span class = " code " > LineLength < / span > , apply directly to the source file and do not involve tokens <nl> + of the syntax tree . <nl> + Other Checks are associated with configurable sets of trigger tokens . <nl> + By default , each such Check has a set of < em > default tokens < / em > that trigger the Check . <nl> + For example , this element configures Check < span class = " code " > MethodLength < / span > : <nl> + < / p > <nl> + < pre class = " body " > <nl> + & lt ; module name = & quot ; MethodLength & quot ; / & gt ; <nl> + < / pre > <nl> + < p class = " body " > <nl> + The default token set for < span class = " code " > MethodLength < / span > is <nl> + < span class = " code " > { METHOD _ DEF , CTOR _ DEF } < / span > , method definition and constructor definition <nl> + tokens , so < span class = " code " > TreeWalker < / span > invokes <nl> + < span class = " code " > MethodLength < / span > whenever it visits a node with a <nl> + < span class = " code " > METHOD _ DEF < / span > or a < span class = " code " > CTOR _ DEF < / span > token . <nl> + < / p > <nl> + < p class = " body " > <nl> + You can specify the trigger tokens for a Check with property < span class = " code " > tokens < / span > . <nl> + The value of < span class = " code " > tokens < / span > is a list that denotes a subset of the Check & apos ; s <nl> + < em > acceptable tokens < / em > , as in the following element that configures Check <nl> + < span class = " code " > MethodLength < / span > to check the number of lines of methods only : <nl> + < / p > <nl> + < pre class = " body " > <nl> + & lt ; module name = & quot ; MethodLength & quot ; & gt ; <nl> + & lt ; property name = & quot ; tokens & quot ; value = & quot ; { METHOD _ DEF } & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / pre > <nl> + < p class = " body " > <nl> + To apply particular properties to different subsets of acceptable tokens for a Check , repeat the Check . <nl> + For example , to check that the length of each method is at most 150 lines ( the default value <nl> + of < span class = " code " > MethodLength < / span > property < span class = " code " > max < / span > ) and the <nl> + length of each constructor is at most 60 lines , include the following in the <nl> + < span class = " code " > TreeWalker < / span > configuration : <nl> + < / p > <nl> + < pre class = " body " > <nl> + & lt ; module name = & quot ; MethodLength & quot ; & gt ; <nl> + & lt ; property name = & quot ; tokens & quot ; value = & quot ; { METHOD _ DEF } & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + <nl> + & lt ; module name = & quot ; MethodLength & quot ; & gt ; <nl> + & lt ; property name = & quot ; tokens & quot ; value = & quot ; { CTOR _ DEF } & quot ; / & gt ; <nl> + & lt ; property name = & quot ; max & quot ; value = & quot ; 60 & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / pre > <nl> < p class = " body " > <nl> - Configuration of the checks are specified in the following pages : <nl> + Configurations of the Checks are specified in the following pages : <nl> < / p > <nl> <nl> < ul class = " body " > <nl> @ @ - 239 , 11 + 292 , 6 @ @ <nl> < a href = " config _ misc . html " > Miscellaneous Checks < / a > <nl> < / li > <nl> < / ul > <nl> - < a name = " tokens " > < / a > < h2 > Tokens < / h2 > <nl> - < p class = " body " > <nl> - What is a token ? Default tokens . Acceptable tokens . <nl> - Repeated modules with different tokens / properties . <nl> - < / p > <nl> < a name = " xml " > < / a > < h2 > XML < / h2 > <nl> < p class = " body " > <nl> DTD . DOCTYPE .

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 index cadbfd2 . . fcc101f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 @ @ - 73 , 7 + 73 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < pre > 
 * & lt ; module name = " Translation " & gt ; 
 * & lt ; property name = " baseName " value = " ^ ButtonLabels . * $ " / & gt ; 
 - * & lt ; module / & gt ; 
 + * & lt ; / module & gt ; 
 * < / pre > 
 * < p > To configure the check to check only files which have ' . properties ' and ' . translations ' 
 * extensions : 
 @ @ - 81 , 7 + 81 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < pre > 
 * & lt ; module name = " Translation " & gt ; 
 * & lt ; property name = " fileExtensions " value = " properties , translations " / & gt ; 
 - * & lt ; module / & gt ; 
 + * & lt ; / module & gt ; 
 * < / pre > 
 * 
 * < p > < b > requiredTranslations < / b > which allows to specify language codes of required translations

NEAREST DIFF:
diff - - git a / docs / config . html b / docs / config . html 
 index 906cf35 . . 26adc0c 100644 
 - - - a / docs / config . html 
 + + + b / docs / config . html 
 @ @ - 35 , 9 + 35 , 6 @ @ 
 < a href = " # treewalker " > TreeWalker Checks < / a > 
 < / li > 
 < li > 
 - < a href = " # tokens " > Tokens < / a > 
 - < / li > 
 - < li > 
 < a href = " # xml " > XML < / a > 
 < / li > 
 < / ul > 
 @ @ - 199 , 15 + 196 , 71 @ @ 
 & lt ; property name = & quot ; headerFile & quot ; value = & quot ; $ { checkstyle . header . file } & quot ; / & gt ; 
 < / pre > 
 < p class = " body " > 
 - Thus , you can re - specify a module property value without changing the configuration document . 
 + You can use property expansion to re - specify a module property value 
 + without changing the configuration document . 
 < / p > 
 
 < a name = " treewalker " > < / a > < h2 > TreeWalker Checks < / h2 > 
 < p class = " body " > 
 - Lead - in paragraph . 
 - < / p > 
 + The < span class = " code " > TreeWalker < / span > module creates a syntax tree for a Java source file 
 + and invokes its submodules , called < em > Checks < / em > , during a walk , or traversal , of the nodes 
 + of the tree . 
 + Every node of the syntax tree has a token . A visit to a node during the traversal 
 + triggers all Checks that are configured for its token . 
 + For example , if Check < span class = " code " > MethodLength < / span > has been configured as 
 + a submodule of < span class = " code " > TreeWalker < / span > , then a visit to a node 
 + with a method or a constructor definition 
 + token triggers < span class = " code " > MethodLength < / span > to check the number of lines 
 + of the node & apos ; s code block . 
 + < / p > 
 + < p class = " body " > 
 + Some Checks , such as < span class = " code " > FileLength < / span > 
 + and < span class = " code " > LineLength < / span > , apply directly to the source file and do not involve tokens 
 + of the syntax tree . 
 + Other Checks are associated with configurable sets of trigger tokens . 
 + By default , each such Check has a set of < em > default tokens < / em > that trigger the Check . 
 + For example , this element configures Check < span class = " code " > MethodLength < / span > : 
 + < / p > 
 + < pre class = " body " > 
 + & lt ; module name = & quot ; MethodLength & quot ; / & gt ; 
 + < / pre > 
 + < p class = " body " > 
 + The default token set for < span class = " code " > MethodLength < / span > is 
 + < span class = " code " > { METHOD _ DEF , CTOR _ DEF } < / span > , method definition and constructor definition 
 + tokens , so < span class = " code " > TreeWalker < / span > invokes 
 + < span class = " code " > MethodLength < / span > whenever it visits a node with a 
 + < span class = " code " > METHOD _ DEF < / span > or a < span class = " code " > CTOR _ DEF < / span > token . 
 + < / p > 
 + < p class = " body " > 
 + You can specify the trigger tokens for a Check with property < span class = " code " > tokens < / span > . 
 + The value of < span class = " code " > tokens < / span > is a list that denotes a subset of the Check & apos ; s 
 + < em > acceptable tokens < / em > , as in the following element that configures Check 
 + < span class = " code " > MethodLength < / span > to check the number of lines of methods only : 
 + < / p > 
 + < pre class = " body " > 
 + & lt ; module name = & quot ; MethodLength & quot ; & gt ; 
 + & lt ; property name = & quot ; tokens & quot ; value = & quot ; { METHOD _ DEF } & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + < / pre > 
 + < p class = " body " > 
 + To apply particular properties to different subsets of acceptable tokens for a Check , repeat the Check . 
 + For example , to check that the length of each method is at most 150 lines ( the default value 
 + of < span class = " code " > MethodLength < / span > property < span class = " code " > max < / span > ) and the 
 + length of each constructor is at most 60 lines , include the following in the 
 + < span class = " code " > TreeWalker < / span > configuration : 
 + < / p > 
 + < pre class = " body " > 
 + & lt ; module name = & quot ; MethodLength & quot ; & gt ; 
 + & lt ; property name = & quot ; tokens & quot ; value = & quot ; { METHOD _ DEF } & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + 
 + & lt ; module name = & quot ; MethodLength & quot ; & gt ; 
 + & lt ; property name = & quot ; tokens & quot ; value = & quot ; { CTOR _ DEF } & quot ; / & gt ; 
 + & lt ; property name = & quot ; max & quot ; value = & quot ; 60 & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + < / pre > 
 < p class = " body " > 
 - Configuration of the checks are specified in the following pages : 
 + Configurations of the Checks are specified in the following pages : 
 < / p > 
 
 < ul class = " body " > 
 @ @ - 239 , 11 + 292 , 6 @ @ 
 < a href = " config _ misc . html " > Miscellaneous Checks < / a > 
 < / li > 
 < / ul > 
 - < a name = " tokens " > < / a > < h2 > Tokens < / h2 > 
 - < p class = " body " > 
 - What is a token ? Default tokens . Acceptable tokens . 
 - Repeated modules with different tokens / properties . 
 - < / p > 
 < a name = " xml " > < / a > < h2 > XML < / h2 > 
 < p class = " body " > 
 DTD . DOCTYPE .
