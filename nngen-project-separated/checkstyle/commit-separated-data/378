BLEU SCORE: 0.0321858262703621

TEST MSG: Issue # 5489 : Fixed indentation in report _ issue . xml & writingcheckss . xml
GENERATED MSG: Hooray for correct documentation . . . bug # 2783451

TEST DIFF (one line): diff - - git a / src / xdocs / report _ issue . xml b / src / xdocs / report _ issue . xml <nl> index 94e77ac . . bcb176d 100644 <nl> - - - a / src / xdocs / report _ issue . xml <nl> + + + b / src / xdocs / report _ issue . xml <nl> @ @ - 82 , 11 + 82 , 11 @ @ private static final int SOMETHING = 1 ; <nl> " - / / Puppy Crawl / / DTD Check Configuration 1 . 3 / / EN " <nl> " http : / / checkstyle . sourceforge . net / dtds / configuration _ 1 _ 3 . dtd " > <nl> < module name = " Checker " > <nl> - < module name = " TreeWalker " > <nl> - < module name = " WhitespaceAround " > <nl> - < property name = " allowEmptyTypes " value = " true " / > <nl> - < / module > <nl> + < module name = " TreeWalker " > <nl> + < module name = " WhitespaceAround " > <nl> + < property name = " allowEmptyTypes " value = " true " / > <nl> < / module > <nl> + < / module > <nl> < / module > <nl> <nl> / var / tmp $ java - Duser . language = en - Duser . country = US - jar checkstyle - 6 . XX - all . jar - c config . xml Test . java <nl> diff - - git a / src / xdocs / writingchecks . xml b / src / xdocs / writingchecks . xml <nl> index 9cf7e0a . . c03024d 100644 <nl> - - - a / src / xdocs / writingchecks . xml <nl> + + + b / src / xdocs / writingchecks . xml <nl> @ @ - 327 , 31 + 327 , 31 @ @ import com . puppycrawl . tools . checkstyle . api . * ; <nl> <nl> public class MethodLimitCheck extends AbstractCheck <nl> { <nl> - private static final int DEFAULT _ MAX = 30 ; <nl> - private int max = DEFAULT _ MAX ; <nl> - <nl> - @ Override <nl> - public int [ ] getDefaultTokens ( ) <nl> - { <nl> - return new int [ ] { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; <nl> + private static final int DEFAULT _ MAX = 30 ; <nl> + private int max = DEFAULT _ MAX ; <nl> + <nl> + @ Override <nl> + public int [ ] getDefaultTokens ( ) <nl> + { <nl> + return new int [ ] { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; <nl> + } <nl> + <nl> + @ Override <nl> + public void visitToken ( DetailAST ast ) <nl> + { <nl> + / / find the OBJBLOCK node below the CLASS _ DEF / INTERFACE _ DEF <nl> + DetailAST objBlock = ast . findFirstToken ( TokenTypes . OBJBLOCK ) ; <nl> + <nl> + / / count the number of direct children of the OBJBLOCK <nl> + / / that are METHOD _ DEFS <nl> + int methodDefs = objBlock . getChildCount ( TokenTypes . METHOD _ DEF ) ; <nl> + <nl> + / / report error if limit is reached <nl> + if ( methodDefs > this . max ) { <nl> + String message = " too many methods , only " + this . max + " are allowed " ; <nl> + log ( ast . getLineNo ( ) , message ) ; <nl> } <nl> - <nl> - @ Override <nl> - public void visitToken ( DetailAST ast ) <nl> - { <nl> - / / find the OBJBLOCK node below the CLASS _ DEF / INTERFACE _ DEF <nl> - DetailAST objBlock = ast . findFirstToken ( TokenTypes . OBJBLOCK ) ; <nl> - <nl> - / / count the number of direct children of the OBJBLOCK <nl> - / / that are METHOD _ DEFS <nl> - int methodDefs = objBlock . getChildCount ( TokenTypes . METHOD _ DEF ) ; <nl> - <nl> - / / report error if limit is reached <nl> - if ( methodDefs > this . max ) { <nl> - String message = " too many methods , only " + this . max + " are allowed " ; <nl> - log ( ast . getLineNo ( ) , message ) ; <nl> - } <nl> - } <nl> + } <nl> } <nl> < / source > <nl> <nl> @ @ - 485 , 11 + 485 , 11 @ @ public class MethodLimitCheck extends AbstractCheck <nl> < source > <nl> public class MethodLimitCheck extends AbstractCheck <nl> { <nl> - / / code from above omitted for brevity <nl> - public void setMax ( int limit ) <nl> - { <nl> - max = limit ; <nl> - } <nl> + / / code from above omitted for brevity <nl> + public void setMax ( int limit ) <nl> + { <nl> + max = limit ; <nl> + } <nl> } <nl> < / source > <nl> <nl> @ @ - 686 , 35 + 686 , 35 @ @ import com . puppycrawl . tools . checkstyle . api . * ; <nl> <nl> public class LimitImplementationFiles extends AbstractFileSetCheck <nl> { <nl> - private static final int DEFAULT _ MAX = 100 ; <nl> - private int fileCount ; <nl> - private int max = DEFAULT _ MAX ; <nl> - public void setMax ( int aMax ) <nl> - { <nl> - this . max = aMax ; <nl> - } <nl> - <nl> - @ Override <nl> - public void beginProcessing ( String aCharset ) <nl> - { <nl> - super . beginProcessing ( aCharset ) ; <nl> - <nl> - / / reset the file count <nl> - this . fileCount = 0 ; <nl> - } <nl> - <nl> - @ Override <nl> - public void processFiltered ( File file , List & lt ; String & gt ; aLines ) <nl> - { <nl> - this . fileCount + + ; <nl> - <nl> - if ( this . fileCount > this . max ) { <nl> - / / log the message <nl> - log ( 0 , " max . files . exceeded " , Integer . valueOf ( this . max ) ) ; <nl> - / / you can call log ( ) multiple times to flag multiple <nl> - / / errors in the same file <nl> - } <nl> + private static final int DEFAULT _ MAX = 100 ; <nl> + private int fileCount ; <nl> + private int max = DEFAULT _ MAX ; <nl> + public void setMax ( int aMax ) <nl> + { <nl> + this . max = aMax ; <nl> + } <nl> + <nl> + @ Override <nl> + public void beginProcessing ( String aCharset ) <nl> + { <nl> + super . beginProcessing ( aCharset ) ; <nl> + <nl> + / / reset the file count <nl> + this . fileCount = 0 ; <nl> + } <nl> + <nl> + @ Override <nl> + public void processFiltered ( File file , List & lt ; String & gt ; aLines ) <nl> + { <nl> + this . fileCount + + ; <nl> + <nl> + if ( this . fileCount > this . max ) { <nl> + / / log the message <nl> + log ( 0 , " max . files . exceeded " , Integer . valueOf ( this . max ) ) ; <nl> + / / you can call log ( ) multiple times to flag multiple <nl> + / / errors in the same file <nl> } <nl> + } <nl> } <nl> < / source > <nl>
NEAREST DIFF (one line): diff - - git a / checkstyle _ checks . xml b / checkstyle _ checks . xml <nl> index 798d084 . . b363a32 100755 <nl> - - - a / checkstyle _ checks . xml <nl> + + + b / checkstyle _ checks . xml <nl> @ @ - 36 , 6 + 36 , 12 @ @ <nl> < property name = " fileExtensions " value = " java " / > <nl> < / module > <nl> <nl> + < module name = " Header " > <nl> + < property name = " headerFile " value = " $ { checkstyle . header . file } " / > <nl> + < property name = " fileExtensions " value = " java " / > <nl> + < property name = " id " value = " header " / > <nl> + < / module > <nl> + <nl> < module name = " TreeWalker " > <nl> <nl> < property name = " tabWidth " value = " 4 " / > <nl> @ @ - 52 , 9 + 58 , 6 @ @ <nl> < module name = " EmptyBlock " / > <nl> < module name = " EmptyForIteratorPad " / > <nl> < module name = " EqualsHashCode " / > <nl> - < module name = " Header " > <nl> - < property name = " headerFile " value = " $ { checkstyle . header . file } " / > <nl> - < / module > <nl> <nl> < ! - - module name = " IllegalCatch " / - - > <nl> < module name = " ImportControl " > <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> index 76b6272 . . c5af41f 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> @ @ - 16 , 20 + 16 , 20 @ @ <nl> / / License along with this library ; if not , write to the Free Software <nl> / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> package com . puppycrawl . tools . checkstyle . checks . header ; <nl> <nl> - import org . apache . commons . beanutils . ConversionException ; <nl> + import java . util . List ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . api . Check ; <nl> + import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import org . apache . commons . beanutils . ConversionException ; <nl> <nl> / * * <nl> * Abstract super class for header checks . <nl> * Provides support for headerFile property . <nl> * @ author o _ sukhosolsky <nl> * / <nl> - public abstract class AbstractHeaderCheck extends Check <nl> + public abstract class AbstractHeaderCheck extends AbstractFileSetCheck <nl> { <nl> / * * information about the expected header file . * / <nl> private HeaderInfo mHeaderInfo = createHeaderInfo ( ) ; <nl> @ @ - 38 , 7 + 38 , 7 @ @ public abstract class AbstractHeaderCheck extends Check <nl> * Return the header lines to check against . <nl> * @ return the header lines to check against . <nl> * / <nl> - protected String [ ] getHeaderLines ( ) <nl> + protected List < String > getHeaderLines ( ) <nl> { <nl> return mHeaderInfo . getHeaderLines ( ) ; <nl> } <nl> @ @ - 86 , 17 + 86 , 10 @ @ public abstract class AbstractHeaderCheck extends Check <nl> @ Override <nl> protected final void finishLocalSetup ( ) throws CheckstyleException <nl> { <nl> - if ( mHeaderInfo . getHeaderLines ( ) = = null ) { <nl> + if ( mHeaderInfo . getHeaderLines ( ) . isEmpty ( ) ) { <nl> throw new CheckstyleException ( <nl> " property ' headerFile ' is missing or invalid in module " <nl> + getConfiguration ( ) . getName ( ) ) ; <nl> } <nl> } <nl> - <nl> - @ Override <nl> - public final int [ ] getDefaultTokens ( ) <nl> - { <nl> - return new int [ 0 ] ; <nl> - } <nl> - <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheck . java <nl> index 16a429e . . f69b298 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheck . java <nl> @ @ - 126 , 7 + 126 , 6 @ @ public final class CrossLanguageRegexpHeaderCheck extends AbstractFileSetCheck <nl> @ Override <nl> protected void processFiltered ( File aFile , List < String > aLines ) <nl> { <nl> - mRegexpHeaderChecker . checkLines ( <nl> - aLines . toArray ( new String [ aLines . size ( ) ] ) ) ; <nl> + mRegexpHeaderChecker . checkLines ( aLines ) ; <nl> } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java <nl> index d37c018 . . ef8947b 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java <nl> @ @ - 16 , 12 + 16 , 11 @ @ <nl> / / License along with this library ; if not , write to the Free Software <nl> / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> package com . puppycrawl . tools . checkstyle . checks . header ; <nl> <nl> + import java . io . File ; <nl> import java . util . Arrays ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import java . util . List ; <nl> <nl> / * * <nl> * Checks the header of the source against a fixed header file . <nl> @ @ - 47 , 15 + 46 , 15 @ @ public class HeaderCheck extends AbstractHeaderCheck <nl> <nl> / * * <nl> * Checks if a code line matches the required header line . <nl> - * @ param aLineNumber the linenumber to check against the header <nl> + * @ param aLineNumber the line number to check against the header <nl> + * @ param aLine the line contents <nl> * @ return true if and only if the line matches the required header line <nl> * / <nl> - protected boolean isMatch ( int aLineNumber ) <nl> + protected boolean isMatch ( int aLineNumber , String aLine ) <nl> { <nl> - final String line = getLines ( ) [ aLineNumber ] ; <nl> / / skip lines we are meant to ignore <nl> return isIgnoreLine ( aLineNumber + 1 ) <nl> - | | getHeaderLines ( ) [ aLineNumber ] . equals ( line ) ; <nl> + | | getHeaderLines ( ) . get ( aLineNumber ) . equals ( aLine ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 75 , 15 + 74 , 15 @ @ public class HeaderCheck extends AbstractHeaderCheck <nl> } <nl> <nl> @ Override <nl> - public void beginTree ( DetailAST aRootAST ) <nl> + protected void processFiltered ( File aFile , List < String > aLines ) <nl> { <nl> - if ( getHeaderLines ( ) . length > getLines ( ) . length ) { <nl> + if ( getHeaderLines ( ) . size ( ) > aLines . size ( ) ) { <nl> log ( 1 , " header . missing " ) ; <nl> } <nl> else { <nl> - for ( int i = 0 ; i < getHeaderLines ( ) . length ; i + + ) { <nl> - if ( ! isMatch ( i ) ) { <nl> - log ( i + 1 , " header . mismatch " , getHeaderLines ( ) [ i ] ) ; <nl> + for ( int i = 0 ; i < getHeaderLines ( ) . size ( ) ; i + + ) { <nl> + if ( ! isMatch ( i , aLines . get ( i ) ) ) { <nl> + log ( i + 1 , " header . mismatch " , getHeaderLines ( ) . get ( i ) ) ; <nl> break ; / / stop checking <nl> } <nl> } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderInfo . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderInfo . java <nl> index f52ba1e . . 8939955 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderInfo . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderInfo . java <nl> @ @ - 19 , 15 + 19 , 15 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . header ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> - <nl> import com . google . common . collect . Lists ; <nl> + import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> import java . io . FileReader ; <nl> import java . io . IOException ; <nl> import java . io . LineNumberReader ; <nl> import java . io . Reader ; <nl> import java . io . StringReader ; <nl> - import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> import org . apache . commons . beanutils . ConversionException ; <nl> <nl> / * * <nl> @ @ - 39 , 7 + 39 , 7 @ @ import org . apache . commons . beanutils . ConversionException ; <nl> class HeaderInfo <nl> { <nl> / * * the lines of the header file . * / <nl> - private String [ ] mHeaderLines ; <nl> + private final List < String > mHeaderLines = Lists . newArrayList ( ) ; <nl> <nl> / * * Creates a new instance , without any header lines . * / <nl> HeaderInfo ( ) <nl> @ @ - 50 , 9 + 50 , 9 @ @ class HeaderInfo <nl> * Return the header lines to check against . <nl> * @ return the header lines to check against . <nl> * / <nl> - final String [ ] getHeaderLines ( ) <nl> + final List < String > getHeaderLines ( ) <nl> { <nl> - return mHeaderLines ; <nl> + return Collections . unmodifiableList ( mHeaderLines ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 119 , 7 + 119 , 7 @ @ class HeaderInfo <nl> * / <nl> private void checkHeaderNotInitialized ( ) <nl> { <nl> - if ( mHeaderLines ! = null ) { <nl> + if ( ! mHeaderLines . isEmpty ( ) ) { <nl> throw new ConversionException ( <nl> " header has already been set - " <nl> + " set either header or headerFile , not both " ) ; <nl> @ @ - 134 , 15 + 134 , 14 @ @ class HeaderInfo <nl> private void loadHeader ( final Reader aHeaderReader ) throws IOException <nl> { <nl> final LineNumberReader lnr = new LineNumberReader ( aHeaderReader ) ; <nl> - final ArrayList < String > lines = Lists . newArrayList ( ) ; <nl> + mHeaderLines . clear ( ) ; <nl> while ( true ) { <nl> final String l = lnr . readLine ( ) ; <nl> if ( l = = null ) { <nl> break ; <nl> } <nl> - lines . add ( l ) ; <nl> + mHeaderLines . add ( l ) ; <nl> } <nl> - mHeaderLines = lines . toArray ( new String [ lines . size ( ) ] ) ; <nl> postprocessHeaderLines ( ) ; <nl> } <nl> <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> index e9c686f . . 5aac04f 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> @ @ - 19 , 7 + 19 , 8 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . header ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import java . io . File ; <nl> + import java . util . List ; <nl> <nl> / * * <nl> * Checks the header of the source against a header file that contains a <nl> @ @ - 75 , 18 + 76 , 17 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck <nl> } <nl> <nl> @ Override <nl> - public void init ( ) <nl> + public void beginProcessing ( String aCharset ) <nl> { <nl> - super . init ( ) ; <nl> + super . beginProcessing ( aCharset ) ; <nl> mRegexpHeaderChecker = new RegexpHeaderChecker ( <nl> getRegexpHeaderInfo ( ) , new CheckViolationMonitor ( ) ) ; <nl> } <nl> <nl> @ Override <nl> - public void beginTree ( DetailAST aRootAST ) <nl> + protected void processFiltered ( File aFile , List < String > aLines ) <nl> { <nl> - final String [ ] lines = getLines ( ) ; <nl> - mRegexpHeaderChecker . checkLines ( lines ) ; <nl> + mRegexpHeaderChecker . checkLines ( aLines ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderChecker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderChecker . java <nl> index 77dafd4 . . 3068beb 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderChecker . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderChecker . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . header ; <nl> <nl> + import java . util . List ; <nl> + <nl> import java . util . Arrays ; <nl> import java . util . regex . Pattern ; <nl> <nl> @ @ - 33 , 10 + 35 , 10 @ @ import java . util . regex . Pattern ; <nl> class RegexpHeaderChecker <nl> { <nl> / * * the lines of the header file . * / <nl> - private final String [ ] mHeaderLines ; <nl> + private final List < String > mHeaderLines ; <nl> <nl> / * * the compiled regular expressions * / <nl> - private Pattern [ ] mHeaderRegexps ; <nl> + private List < Pattern > mHeaderRegexps ; <nl> <nl> / * * the header lines to repeat ( 0 or more ) in the check , sorted . * / <nl> private int [ ] mMultiLines ; <nl> @ @ - 66 , 10 + 68 , 10 @ @ class RegexpHeaderChecker <nl> * <nl> * @ param aLines the lines of an individual file <nl> * / <nl> - void checkLines ( final String [ ] aLines ) <nl> + void checkLines ( final List < String > aLines ) <nl> { <nl> - final int headerSize = mHeaderLines . length ; <nl> - final int fileSize = aLines . length ; <nl> + final int headerSize = mHeaderLines . size ( ) ; <nl> + final int fileSize = aLines . size ( ) ; <nl> <nl> if ( headerSize - mMultiLines . length > fileSize ) { <nl> mViolationObserver . reportHeaderMissing ( ) ; <nl> @ @ - 78 , 7 + 80 , 7 @ @ class RegexpHeaderChecker <nl> int headerLineNo = 0 ; <nl> int i ; <nl> for ( i = 0 ; ( headerLineNo < headerSize ) & & ( i < fileSize ) ; i + + ) { <nl> - final String line = aLines [ i ] ; <nl> + final String line = aLines . get ( i ) ; <nl> boolean isMatch = isMatch ( line , headerLineNo ) ; <nl> while ( ! isMatch & & isMultiLine ( headerLineNo ) ) { <nl> headerLineNo + + ; <nl> @ @ - 87 , 7 + 89 , 7 @ @ class RegexpHeaderChecker <nl> } <nl> if ( ! isMatch ) { <nl> mViolationObserver . reportHeaderMismatch ( <nl> - i + 1 , mHeaderLines [ headerLineNo ] ) ; <nl> + i + 1 , mHeaderLines . get ( headerLineNo ) ) ; <nl> break ; / / stop checking <nl> } <nl> if ( ! isMultiLine ( headerLineNo ) ) { <nl> @ @ - 115 , 7 + 117 , 7 @ @ class RegexpHeaderChecker <nl> * / <nl> private boolean isMatch ( String aLine , int aHeaderLineNo ) <nl> { <nl> - return mHeaderRegexps [ aHeaderLineNo ] . matcher ( aLine ) . find ( ) ; <nl> + return mHeaderRegexps . get ( aHeaderLineNo ) . matcher ( aLine ) . find ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java <nl> index ca602ac . . b281216 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java <nl> @ @ - 19 , 14 + 19 , 15 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . header ; <nl> <nl> + import com . google . common . collect . Lists ; <nl> + import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> import java . util . regex . Pattern ; <nl> import java . util . regex . PatternSyntaxException ; <nl> - <nl> import org . apache . commons . beanutils . ConversionException ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> - <nl> / * * <nl> * Header info for regexp based checks , <nl> * adds the multilines property and holds the compiled regexps . <nl> @ @ - 39 , 7 + 40 , 7 @ @ final class RegexpHeaderInfo extends HeaderInfo <nl> private static final int [ ] EMPTY _ INT _ ARRAY = new int [ 0 ] ; <nl> <nl> / * * the compiled regular expressions * / <nl> - private Pattern [ ] mHeaderRegexps ; <nl> + private final List < Pattern > mHeaderRegexps = Lists . newArrayList ( ) ; <nl> <nl> / * * the header lines to repeat ( 0 or more ) in the check , sorted . * / <nl> private int [ ] mMultiLines = EMPTY _ INT _ ARRAY ; <nl> @ @ - 73 , 32 + 74 , 30 @ @ final class RegexpHeaderInfo extends HeaderInfo <nl> / * * <nl> * Returns the compiled regexps from { @ link # getHeaderLines ( ) } . <nl> * <nl> - * @ return an array of non - null patterns , <nl> - * same legth as the result of { @ link # getHeaderLines ( ) } . <nl> + * @ return a list of non - null patterns , <nl> + * same length as the result of { @ link # getHeaderLines ( ) } . <nl> * / <nl> - Pattern [ ] geHeaderRegexps ( ) <nl> + List < Pattern > geHeaderRegexps ( ) <nl> { <nl> - return mHeaderRegexps ; <nl> + return Collections . unmodifiableList ( mHeaderRegexps ) ; <nl> } <nl> <nl> @ Override <nl> protected void postprocessHeaderLines ( ) <nl> { <nl> - final String [ ] headerLines = getHeaderLines ( ) ; <nl> - if ( headerLines ! = null ) { <nl> - mHeaderRegexps = new Pattern [ headerLines . length ] ; <nl> - for ( int i = 0 ; i < headerLines . length ; i + + ) { <nl> - try { <nl> - / / TODO : Not sure if cache in Utils is still necessary <nl> - mHeaderRegexps [ i ] = Utils . getPattern ( headerLines [ i ] ) ; <nl> - } <nl> - catch ( final PatternSyntaxException ex ) { <nl> - throw new ConversionException ( <nl> - " line " + ( i + 1 ) + " in header specification " <nl> - + " is not a regular expression " ) ; <nl> - } <nl> + final List < String > headerLines = getHeaderLines ( ) ; <nl> + mHeaderRegexps . clear ( ) ; <nl> + for ( String line : headerLines ) { <nl> + try { <nl> + / / TODO : Not sure if cache in Utils is still necessary <nl> + mHeaderRegexps . add ( Utils . getPattern ( line ) ) ; <nl> + } <nl> + catch ( final PatternSyntaxException ex ) { <nl> + throw new ConversionException ( " line " <nl> + + ( mHeaderRegexps . size ( ) + 1 ) <nl> + + " in header specification " <nl> + + " is not a regular expression " ) ; <nl> } <nl> } <nl> } <nl> - <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / BaseFileSetCheckTestSupport . java b / src / tests / com / puppycrawl / tools / checkstyle / BaseFileSetCheckTestSupport . java <nl> new file mode 100644 <nl> index 0000000 . . 520aa6e <nl> - - - / dev / null <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / BaseFileSetCheckTestSupport . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + <nl> + public class BaseFileSetCheckTestSupport extends BaseCheckTestSupport <nl> + { <nl> + @ Override <nl> + protected DefaultConfiguration createCheckerConfig ( <nl> + Configuration aCheckConfig ) <nl> + { <nl> + final DefaultConfiguration dc = new DefaultConfiguration ( " root " ) ; <nl> + dc . addChild ( aCheckConfig ) ; <nl> + return dc ; <nl> + } <nl> + } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheckTest . java <nl> index 74eda4a . . 6b77c27 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheckTest . java <nl> @ @ - 1 , 23 + 1 , 13 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . header ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> - import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import java . io . File ; <nl> import org . junit . Test ; <nl> <nl> public class CrossLanguageRegexpHeaderCheckTest <nl> - extends BaseCheckTestSupport <nl> + extends BaseFileSetCheckTestSupport <nl> { <nl> - @ Override <nl> - protected DefaultConfiguration createCheckerConfig ( <nl> - Configuration aCheckConfig ) <nl> - { <nl> - final DefaultConfiguration dc = new DefaultConfiguration ( " root " ) ; <nl> - dc . addChild ( aCheckConfig ) ; <nl> - return dc ; <nl> - } <nl> - <nl> @ Test <nl> public void testComplexHeaderConfigOnProperties ( ) <nl> throws Exception <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> index 9824915 . . 5d5854a 100644 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> @ @ - 1 , 12 + 1 , 13 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . header ; <nl> <nl> import static org . junit . Assert . fail ; <nl> - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import org . junit . Test ; <nl> <nl> - public class HeaderCheckTest extends BaseCheckTestSupport <nl> + public class HeaderCheckTest extends BaseFileSetCheckTestSupport <nl> { <nl> @ Test <nl> public void testStaticHeader ( )

TEST DIFF:
diff - - git a / src / xdocs / report _ issue . xml b / src / xdocs / report _ issue . xml 
 index 94e77ac . . bcb176d 100644 
 - - - a / src / xdocs / report _ issue . xml 
 + + + b / src / xdocs / report _ issue . xml 
 @ @ - 82 , 11 + 82 , 11 @ @ private static final int SOMETHING = 1 ; 
 " - / / Puppy Crawl / / DTD Check Configuration 1 . 3 / / EN " 
 " http : / / checkstyle . sourceforge . net / dtds / configuration _ 1 _ 3 . dtd " > 
 < module name = " Checker " > 
 - < module name = " TreeWalker " > 
 - < module name = " WhitespaceAround " > 
 - < property name = " allowEmptyTypes " value = " true " / > 
 - < / module > 
 + < module name = " TreeWalker " > 
 + < module name = " WhitespaceAround " > 
 + < property name = " allowEmptyTypes " value = " true " / > 
 < / module > 
 + < / module > 
 < / module > 
 
 / var / tmp $ java - Duser . language = en - Duser . country = US - jar checkstyle - 6 . XX - all . jar - c config . xml Test . java 
 diff - - git a / src / xdocs / writingchecks . xml b / src / xdocs / writingchecks . xml 
 index 9cf7e0a . . c03024d 100644 
 - - - a / src / xdocs / writingchecks . xml 
 + + + b / src / xdocs / writingchecks . xml 
 @ @ - 327 , 31 + 327 , 31 @ @ import com . puppycrawl . tools . checkstyle . api . * ; 
 
 public class MethodLimitCheck extends AbstractCheck 
 { 
 - private static final int DEFAULT _ MAX = 30 ; 
 - private int max = DEFAULT _ MAX ; 
 - 
 - @ Override 
 - public int [ ] getDefaultTokens ( ) 
 - { 
 - return new int [ ] { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; 
 + private static final int DEFAULT _ MAX = 30 ; 
 + private int max = DEFAULT _ MAX ; 
 + 
 + @ Override 
 + public int [ ] getDefaultTokens ( ) 
 + { 
 + return new int [ ] { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; 
 + } 
 + 
 + @ Override 
 + public void visitToken ( DetailAST ast ) 
 + { 
 + / / find the OBJBLOCK node below the CLASS _ DEF / INTERFACE _ DEF 
 + DetailAST objBlock = ast . findFirstToken ( TokenTypes . OBJBLOCK ) ; 
 + 
 + / / count the number of direct children of the OBJBLOCK 
 + / / that are METHOD _ DEFS 
 + int methodDefs = objBlock . getChildCount ( TokenTypes . METHOD _ DEF ) ; 
 + 
 + / / report error if limit is reached 
 + if ( methodDefs > this . max ) { 
 + String message = " too many methods , only " + this . max + " are allowed " ; 
 + log ( ast . getLineNo ( ) , message ) ; 
 } 
 - 
 - @ Override 
 - public void visitToken ( DetailAST ast ) 
 - { 
 - / / find the OBJBLOCK node below the CLASS _ DEF / INTERFACE _ DEF 
 - DetailAST objBlock = ast . findFirstToken ( TokenTypes . OBJBLOCK ) ; 
 - 
 - / / count the number of direct children of the OBJBLOCK 
 - / / that are METHOD _ DEFS 
 - int methodDefs = objBlock . getChildCount ( TokenTypes . METHOD _ DEF ) ; 
 - 
 - / / report error if limit is reached 
 - if ( methodDefs > this . max ) { 
 - String message = " too many methods , only " + this . max + " are allowed " ; 
 - log ( ast . getLineNo ( ) , message ) ; 
 - } 
 - } 
 + } 
 } 
 < / source > 
 
 @ @ - 485 , 11 + 485 , 11 @ @ public class MethodLimitCheck extends AbstractCheck 
 < source > 
 public class MethodLimitCheck extends AbstractCheck 
 { 
 - / / code from above omitted for brevity 
 - public void setMax ( int limit ) 
 - { 
 - max = limit ; 
 - } 
 + / / code from above omitted for brevity 
 + public void setMax ( int limit ) 
 + { 
 + max = limit ; 
 + } 
 } 
 < / source > 
 
 @ @ - 686 , 35 + 686 , 35 @ @ import com . puppycrawl . tools . checkstyle . api . * ; 
 
 public class LimitImplementationFiles extends AbstractFileSetCheck 
 { 
 - private static final int DEFAULT _ MAX = 100 ; 
 - private int fileCount ; 
 - private int max = DEFAULT _ MAX ; 
 - public void setMax ( int aMax ) 
 - { 
 - this . max = aMax ; 
 - } 
 - 
 - @ Override 
 - public void beginProcessing ( String aCharset ) 
 - { 
 - super . beginProcessing ( aCharset ) ; 
 - 
 - / / reset the file count 
 - this . fileCount = 0 ; 
 - } 
 - 
 - @ Override 
 - public void processFiltered ( File file , List & lt ; String & gt ; aLines ) 
 - { 
 - this . fileCount + + ; 
 - 
 - if ( this . fileCount > this . max ) { 
 - / / log the message 
 - log ( 0 , " max . files . exceeded " , Integer . valueOf ( this . max ) ) ; 
 - / / you can call log ( ) multiple times to flag multiple 
 - / / errors in the same file 
 - } 
 + private static final int DEFAULT _ MAX = 100 ; 
 + private int fileCount ; 
 + private int max = DEFAULT _ MAX ; 
 + public void setMax ( int aMax ) 
 + { 
 + this . max = aMax ; 
 + } 
 + 
 + @ Override 
 + public void beginProcessing ( String aCharset ) 
 + { 
 + super . beginProcessing ( aCharset ) ; 
 + 
 + / / reset the file count 
 + this . fileCount = 0 ; 
 + } 
 + 
 + @ Override 
 + public void processFiltered ( File file , List & lt ; String & gt ; aLines ) 
 + { 
 + this . fileCount + + ; 
 + 
 + if ( this . fileCount > this . max ) { 
 + / / log the message 
 + log ( 0 , " max . files . exceeded " , Integer . valueOf ( this . max ) ) ; 
 + / / you can call log ( ) multiple times to flag multiple 
 + / / errors in the same file 
 } 
 + } 
 } 
 < / source > 


NEAREST DIFF:
diff - - git a / checkstyle _ checks . xml b / checkstyle _ checks . xml 
 index 798d084 . . b363a32 100755 
 - - - a / checkstyle _ checks . xml 
 + + + b / checkstyle _ checks . xml 
 @ @ - 36 , 6 + 36 , 12 @ @ 
 < property name = " fileExtensions " value = " java " / > 
 < / module > 
 
 + < module name = " Header " > 
 + < property name = " headerFile " value = " $ { checkstyle . header . file } " / > 
 + < property name = " fileExtensions " value = " java " / > 
 + < property name = " id " value = " header " / > 
 + < / module > 
 + 
 < module name = " TreeWalker " > 
 
 < property name = " tabWidth " value = " 4 " / > 
 @ @ - 52 , 9 + 58 , 6 @ @ 
 < module name = " EmptyBlock " / > 
 < module name = " EmptyForIteratorPad " / > 
 < module name = " EqualsHashCode " / > 
 - < module name = " Header " > 
 - < property name = " headerFile " value = " $ { checkstyle . header . file } " / > 
 - < / module > 
 
 < ! - - module name = " IllegalCatch " / - - > 
 < module name = " ImportControl " > 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 index 76b6272 . . c5af41f 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 @ @ - 16 , 20 + 16 , 20 @ @ 
 / / License along with this library ; if not , write to the Free Software 
 / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 package com . puppycrawl . tools . checkstyle . checks . header ; 
 
 - import org . apache . commons . beanutils . ConversionException ; 
 + import java . util . List ; 
 
 - import com . puppycrawl . tools . checkstyle . api . Check ; 
 + import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import org . apache . commons . beanutils . ConversionException ; 
 
 / * * 
 * Abstract super class for header checks . 
 * Provides support for headerFile property . 
 * @ author o _ sukhosolsky 
 * / 
 - public abstract class AbstractHeaderCheck extends Check 
 + public abstract class AbstractHeaderCheck extends AbstractFileSetCheck 
 { 
 / * * information about the expected header file . * / 
 private HeaderInfo mHeaderInfo = createHeaderInfo ( ) ; 
 @ @ - 38 , 7 + 38 , 7 @ @ public abstract class AbstractHeaderCheck extends Check 
 * Return the header lines to check against . 
 * @ return the header lines to check against . 
 * / 
 - protected String [ ] getHeaderLines ( ) 
 + protected List < String > getHeaderLines ( ) 
 { 
 return mHeaderInfo . getHeaderLines ( ) ; 
 } 
 @ @ - 86 , 17 + 86 , 10 @ @ public abstract class AbstractHeaderCheck extends Check 
 @ Override 
 protected final void finishLocalSetup ( ) throws CheckstyleException 
 { 
 - if ( mHeaderInfo . getHeaderLines ( ) = = null ) { 
 + if ( mHeaderInfo . getHeaderLines ( ) . isEmpty ( ) ) { 
 throw new CheckstyleException ( 
 " property ' headerFile ' is missing or invalid in module " 
 + getConfiguration ( ) . getName ( ) ) ; 
 } 
 } 
 - 
 - @ Override 
 - public final int [ ] getDefaultTokens ( ) 
 - { 
 - return new int [ 0 ] ; 
 - } 
 - 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheck . java 
 index 16a429e . . f69b298 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheck . java 
 @ @ - 126 , 7 + 126 , 6 @ @ public final class CrossLanguageRegexpHeaderCheck extends AbstractFileSetCheck 
 @ Override 
 protected void processFiltered ( File aFile , List < String > aLines ) 
 { 
 - mRegexpHeaderChecker . checkLines ( 
 - aLines . toArray ( new String [ aLines . size ( ) ] ) ) ; 
 + mRegexpHeaderChecker . checkLines ( aLines ) ; 
 } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java 
 index d37c018 . . ef8947b 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java 
 @ @ - 16 , 12 + 16 , 11 @ @ 
 / / License along with this library ; if not , write to the Free Software 
 / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 package com . puppycrawl . tools . checkstyle . checks . header ; 
 
 + import java . io . File ; 
 import java . util . Arrays ; 
 - 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import java . util . List ; 
 
 / * * 
 * Checks the header of the source against a fixed header file . 
 @ @ - 47 , 15 + 46 , 15 @ @ public class HeaderCheck extends AbstractHeaderCheck 
 
 / * * 
 * Checks if a code line matches the required header line . 
 - * @ param aLineNumber the linenumber to check against the header 
 + * @ param aLineNumber the line number to check against the header 
 + * @ param aLine the line contents 
 * @ return true if and only if the line matches the required header line 
 * / 
 - protected boolean isMatch ( int aLineNumber ) 
 + protected boolean isMatch ( int aLineNumber , String aLine ) 
 { 
 - final String line = getLines ( ) [ aLineNumber ] ; 
 / / skip lines we are meant to ignore 
 return isIgnoreLine ( aLineNumber + 1 ) 
 - | | getHeaderLines ( ) [ aLineNumber ] . equals ( line ) ; 
 + | | getHeaderLines ( ) . get ( aLineNumber ) . equals ( aLine ) ; 
 } 
 
 / * * 
 @ @ - 75 , 15 + 74 , 15 @ @ public class HeaderCheck extends AbstractHeaderCheck 
 } 
 
 @ Override 
 - public void beginTree ( DetailAST aRootAST ) 
 + protected void processFiltered ( File aFile , List < String > aLines ) 
 { 
 - if ( getHeaderLines ( ) . length > getLines ( ) . length ) { 
 + if ( getHeaderLines ( ) . size ( ) > aLines . size ( ) ) { 
 log ( 1 , " header . missing " ) ; 
 } 
 else { 
 - for ( int i = 0 ; i < getHeaderLines ( ) . length ; i + + ) { 
 - if ( ! isMatch ( i ) ) { 
 - log ( i + 1 , " header . mismatch " , getHeaderLines ( ) [ i ] ) ; 
 + for ( int i = 0 ; i < getHeaderLines ( ) . size ( ) ; i + + ) { 
 + if ( ! isMatch ( i , aLines . get ( i ) ) ) { 
 + log ( i + 1 , " header . mismatch " , getHeaderLines ( ) . get ( i ) ) ; 
 break ; / / stop checking 
 } 
 } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderInfo . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderInfo . java 
 index f52ba1e . . 8939955 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderInfo . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / HeaderInfo . java 
 @ @ - 19 , 15 + 19 , 15 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . header ; 
 
 - import com . puppycrawl . tools . checkstyle . api . Utils ; 
 - 
 import com . google . common . collect . Lists ; 
 + import com . puppycrawl . tools . checkstyle . api . Utils ; 
 import java . io . FileReader ; 
 import java . io . IOException ; 
 import java . io . LineNumberReader ; 
 import java . io . Reader ; 
 import java . io . StringReader ; 
 - import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 import org . apache . commons . beanutils . ConversionException ; 
 
 / * * 
 @ @ - 39 , 7 + 39 , 7 @ @ import org . apache . commons . beanutils . ConversionException ; 
 class HeaderInfo 
 { 
 / * * the lines of the header file . * / 
 - private String [ ] mHeaderLines ; 
 + private final List < String > mHeaderLines = Lists . newArrayList ( ) ; 
 
 / * * Creates a new instance , without any header lines . * / 
 HeaderInfo ( ) 
 @ @ - 50 , 9 + 50 , 9 @ @ class HeaderInfo 
 * Return the header lines to check against . 
 * @ return the header lines to check against . 
 * / 
 - final String [ ] getHeaderLines ( ) 
 + final List < String > getHeaderLines ( ) 
 { 
 - return mHeaderLines ; 
 + return Collections . unmodifiableList ( mHeaderLines ) ; 
 } 
 
 / * * 
 @ @ - 119 , 7 + 119 , 7 @ @ class HeaderInfo 
 * / 
 private void checkHeaderNotInitialized ( ) 
 { 
 - if ( mHeaderLines ! = null ) { 
 + if ( ! mHeaderLines . isEmpty ( ) ) { 
 throw new ConversionException ( 
 " header has already been set - " 
 + " set either header or headerFile , not both " ) ; 
 @ @ - 134 , 15 + 134 , 14 @ @ class HeaderInfo 
 private void loadHeader ( final Reader aHeaderReader ) throws IOException 
 { 
 final LineNumberReader lnr = new LineNumberReader ( aHeaderReader ) ; 
 - final ArrayList < String > lines = Lists . newArrayList ( ) ; 
 + mHeaderLines . clear ( ) ; 
 while ( true ) { 
 final String l = lnr . readLine ( ) ; 
 if ( l = = null ) { 
 break ; 
 } 
 - lines . add ( l ) ; 
 + mHeaderLines . add ( l ) ; 
 } 
 - mHeaderLines = lines . toArray ( new String [ lines . size ( ) ] ) ; 
 postprocessHeaderLines ( ) ; 
 } 
 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 index e9c686f . . 5aac04f 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 @ @ - 19 , 7 + 19 , 8 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . header ; 
 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import java . io . File ; 
 + import java . util . List ; 
 
 / * * 
 * Checks the header of the source against a header file that contains a 
 @ @ - 75 , 18 + 76 , 17 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck 
 } 
 
 @ Override 
 - public void init ( ) 
 + public void beginProcessing ( String aCharset ) 
 { 
 - super . init ( ) ; 
 + super . beginProcessing ( aCharset ) ; 
 mRegexpHeaderChecker = new RegexpHeaderChecker ( 
 getRegexpHeaderInfo ( ) , new CheckViolationMonitor ( ) ) ; 
 } 
 
 @ Override 
 - public void beginTree ( DetailAST aRootAST ) 
 + protected void processFiltered ( File aFile , List < String > aLines ) 
 { 
 - final String [ ] lines = getLines ( ) ; 
 - mRegexpHeaderChecker . checkLines ( lines ) ; 
 + mRegexpHeaderChecker . checkLines ( aLines ) ; 
 } 
 
 @ Override 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderChecker . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderChecker . java 
 index 77dafd4 . . 3068beb 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderChecker . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderChecker . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . header ; 
 
 + import java . util . List ; 
 + 
 import java . util . Arrays ; 
 import java . util . regex . Pattern ; 
 
 @ @ - 33 , 10 + 35 , 10 @ @ import java . util . regex . Pattern ; 
 class RegexpHeaderChecker 
 { 
 / * * the lines of the header file . * / 
 - private final String [ ] mHeaderLines ; 
 + private final List < String > mHeaderLines ; 
 
 / * * the compiled regular expressions * / 
 - private Pattern [ ] mHeaderRegexps ; 
 + private List < Pattern > mHeaderRegexps ; 
 
 / * * the header lines to repeat ( 0 or more ) in the check , sorted . * / 
 private int [ ] mMultiLines ; 
 @ @ - 66 , 10 + 68 , 10 @ @ class RegexpHeaderChecker 
 * 
 * @ param aLines the lines of an individual file 
 * / 
 - void checkLines ( final String [ ] aLines ) 
 + void checkLines ( final List < String > aLines ) 
 { 
 - final int headerSize = mHeaderLines . length ; 
 - final int fileSize = aLines . length ; 
 + final int headerSize = mHeaderLines . size ( ) ; 
 + final int fileSize = aLines . size ( ) ; 
 
 if ( headerSize - mMultiLines . length > fileSize ) { 
 mViolationObserver . reportHeaderMissing ( ) ; 
 @ @ - 78 , 7 + 80 , 7 @ @ class RegexpHeaderChecker 
 int headerLineNo = 0 ; 
 int i ; 
 for ( i = 0 ; ( headerLineNo < headerSize ) & & ( i < fileSize ) ; i + + ) { 
 - final String line = aLines [ i ] ; 
 + final String line = aLines . get ( i ) ; 
 boolean isMatch = isMatch ( line , headerLineNo ) ; 
 while ( ! isMatch & & isMultiLine ( headerLineNo ) ) { 
 headerLineNo + + ; 
 @ @ - 87 , 7 + 89 , 7 @ @ class RegexpHeaderChecker 
 } 
 if ( ! isMatch ) { 
 mViolationObserver . reportHeaderMismatch ( 
 - i + 1 , mHeaderLines [ headerLineNo ] ) ; 
 + i + 1 , mHeaderLines . get ( headerLineNo ) ) ; 
 break ; / / stop checking 
 } 
 if ( ! isMultiLine ( headerLineNo ) ) { 
 @ @ - 115 , 7 + 117 , 7 @ @ class RegexpHeaderChecker 
 * / 
 private boolean isMatch ( String aLine , int aHeaderLineNo ) 
 { 
 - return mHeaderRegexps [ aHeaderLineNo ] . matcher ( aLine ) . find ( ) ; 
 + return mHeaderRegexps . get ( aHeaderLineNo ) . matcher ( aLine ) . find ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java 
 index ca602ac . . b281216 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderInfo . java 
 @ @ - 19 , 14 + 19 , 15 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . header ; 
 
 + import com . google . common . collect . Lists ; 
 + import com . puppycrawl . tools . checkstyle . api . Utils ; 
 import java . util . Arrays ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 import java . util . regex . Pattern ; 
 import java . util . regex . PatternSyntaxException ; 
 - 
 import org . apache . commons . beanutils . ConversionException ; 
 
 - import com . puppycrawl . tools . checkstyle . api . Utils ; 
 - 
 / * * 
 * Header info for regexp based checks , 
 * adds the multilines property and holds the compiled regexps . 
 @ @ - 39 , 7 + 40 , 7 @ @ final class RegexpHeaderInfo extends HeaderInfo 
 private static final int [ ] EMPTY _ INT _ ARRAY = new int [ 0 ] ; 
 
 / * * the compiled regular expressions * / 
 - private Pattern [ ] mHeaderRegexps ; 
 + private final List < Pattern > mHeaderRegexps = Lists . newArrayList ( ) ; 
 
 / * * the header lines to repeat ( 0 or more ) in the check , sorted . * / 
 private int [ ] mMultiLines = EMPTY _ INT _ ARRAY ; 
 @ @ - 73 , 32 + 74 , 30 @ @ final class RegexpHeaderInfo extends HeaderInfo 
 / * * 
 * Returns the compiled regexps from { @ link # getHeaderLines ( ) } . 
 * 
 - * @ return an array of non - null patterns , 
 - * same legth as the result of { @ link # getHeaderLines ( ) } . 
 + * @ return a list of non - null patterns , 
 + * same length as the result of { @ link # getHeaderLines ( ) } . 
 * / 
 - Pattern [ ] geHeaderRegexps ( ) 
 + List < Pattern > geHeaderRegexps ( ) 
 { 
 - return mHeaderRegexps ; 
 + return Collections . unmodifiableList ( mHeaderRegexps ) ; 
 } 
 
 @ Override 
 protected void postprocessHeaderLines ( ) 
 { 
 - final String [ ] headerLines = getHeaderLines ( ) ; 
 - if ( headerLines ! = null ) { 
 - mHeaderRegexps = new Pattern [ headerLines . length ] ; 
 - for ( int i = 0 ; i < headerLines . length ; i + + ) { 
 - try { 
 - / / TODO : Not sure if cache in Utils is still necessary 
 - mHeaderRegexps [ i ] = Utils . getPattern ( headerLines [ i ] ) ; 
 - } 
 - catch ( final PatternSyntaxException ex ) { 
 - throw new ConversionException ( 
 - " line " + ( i + 1 ) + " in header specification " 
 - + " is not a regular expression " ) ; 
 - } 
 + final List < String > headerLines = getHeaderLines ( ) ; 
 + mHeaderRegexps . clear ( ) ; 
 + for ( String line : headerLines ) { 
 + try { 
 + / / TODO : Not sure if cache in Utils is still necessary 
 + mHeaderRegexps . add ( Utils . getPattern ( line ) ) ; 
 + } 
 + catch ( final PatternSyntaxException ex ) { 
 + throw new ConversionException ( " line " 
 + + ( mHeaderRegexps . size ( ) + 1 ) 
 + + " in header specification " 
 + + " is not a regular expression " ) ; 
 } 
 } 
 } 
 - 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / BaseFileSetCheckTestSupport . java b / src / tests / com / puppycrawl / tools / checkstyle / BaseFileSetCheckTestSupport . java 
 new file mode 100644 
 index 0000000 . . 520aa6e 
 - - - / dev / null 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / BaseFileSetCheckTestSupport . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + 
 + public class BaseFileSetCheckTestSupport extends BaseCheckTestSupport 
 + { 
 + @ Override 
 + protected DefaultConfiguration createCheckerConfig ( 
 + Configuration aCheckConfig ) 
 + { 
 + final DefaultConfiguration dc = new DefaultConfiguration ( " root " ) ; 
 + dc . addChild ( aCheckConfig ) ; 
 + return dc ; 
 + } 
 + } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheckTest . java 
 index 74eda4a . . 6b77c27 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / header / CrossLanguageRegexpHeaderCheckTest . java 
 @ @ - 1 , 23 + 1 , 13 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . header ; 
 
 - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 - import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import java . io . File ; 
 import org . junit . Test ; 
 
 public class CrossLanguageRegexpHeaderCheckTest 
 - extends BaseCheckTestSupport 
 + extends BaseFileSetCheckTestSupport 
 { 
 - @ Override 
 - protected DefaultConfiguration createCheckerConfig ( 
 - Configuration aCheckConfig ) 
 - { 
 - final DefaultConfiguration dc = new DefaultConfiguration ( " root " ) ; 
 - dc . addChild ( aCheckConfig ) ; 
 - return dc ; 
 - } 
 - 
 @ Test 
 public void testComplexHeaderConfigOnProperties ( ) 
 throws Exception 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 index 9824915 . . 5d5854a 100644 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 @ @ - 1 , 12 + 1 , 13 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . header ; 
 
 import static org . junit . Assert . fail ; 
 - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + 
 + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import org . junit . Test ; 
 
 - public class HeaderCheckTest extends BaseCheckTestSupport 
 + public class HeaderCheckTest extends BaseFileSetCheckTestSupport 
 { 
 @ Test 
 public void testStaticHeader ( )
