BLEU SCORE: 0.017110488113633058

TEST MSG: Issue # 2161 : unify test input locations for sizes package
GENERATED MSG: Move to a better home . It is a better fit .

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheckTest . java <nl> index c3393fb . . b79ab58 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheckTest . java <nl> @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> import static com . puppycrawl . tools . checkstyle . checks . sizes . AnonInnerLengthCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> @ @ - 34 , 6 + 37 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * @ author Lars K Ã¼ hne <nl> * / <nl> public class AnonInnerLengthCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " sizes " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java <nl> index 046848e . . 2692c32 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java <nl> @ @ - 21 , 10 + 21 , 14 @ @ package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . sizes . ExecutableStatementCountCheck . MSG _ KEY ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> import antlr . CommonHiddenStreamToken ; <nl> + <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> @ @ - 32 , 6 + 36 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class ExecutableStatementCountCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " sizes " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testMaxZero ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckTest . java <nl> index e2bf6fb . . 5d52d50 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckTest . java <nl> @ @ - 26 , 6 + 26 , 9 @ @ import static com . puppycrawl . tools . checkstyle . checks . sizes . MethodCountCheck . MSG _ <nl> import static com . puppycrawl . tools . checkstyle . checks . sizes . MethodCountCheck . MSG _ PUBLIC _ METHODS ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 34 , 6 + 37 , 11 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class MethodCountCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " sizes " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> @ @ - 65 , 7 + 73 , 7 @ @ public class MethodCountCheckTest extends BaseCheckTestSupport { <nl> <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checkConfig , getPath ( " sizes / MethodCountCheckInput . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " MethodCountCheckInput . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 90 , 7 + 98 , 7 @ @ public class MethodCountCheckTest extends BaseCheckTestSupport { <nl> " 45 : " + getCheckMessage ( MSG _ MANY _ METHODS , 5 , 3 ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " sizes / MethodCountCheckInput . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " MethodCountCheckInput . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 105 , 7 + 113 , 7 @ @ public class MethodCountCheckTest extends BaseCheckTestSupport { <nl> " 9 : " + getCheckMessage ( MSG _ MANY _ METHODS , 3 , 2 ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " sizes / MethodCountCheckInput2 . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " MethodCountCheckInput2 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 118 , 6 + 126 , 6 @ @ public class MethodCountCheckTest extends BaseCheckTestSupport { <nl> " 3 : " + getCheckMessage ( MSG _ MANY _ METHODS , 5 , 2 ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " sizes / MethodCountCheckInput3 . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " MethodCountCheckInput3 . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ExecutableStatementCountInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ExecutableStatementCountInput . java <nl> deleted file mode 100644 <nl> index 9277929 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / ExecutableStatementCountInput . java <nl> + + + / dev / null <nl> @ @ - 1 , 89 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - public class ExecutableStatementCountInput { <nl> - public void foo ( ) { <nl> - while ( true ) { <nl> - Runnable runnable = new Runnable ( ) { <nl> - public void run ( ) { <nl> - while ( true ) { <nl> - } <nl> - } <nl> - } ; <nl> - <nl> - new Thread ( runnable ) . start ( ) ; <nl> - } <nl> - } <nl> - <nl> - public void bar ( ) { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - <nl> - if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - } <nl> - } <nl> - <nl> - public void simpleElseIf ( ) { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - public void stupidElseIf ( ) { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - } <nl> - <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } <nl> - } <nl> - } <nl> - <nl> - public ExecutableStatementCountInput ( ) <nl> - { <nl> - int i = 1 ; <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - / / STATIC _ INIT <nl> - static { <nl> - int i = 1 ; <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - / / INSTANCE _ INIT <nl> - { <nl> - int i = 1 ; <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - } else { <nl> - } <nl> - } <nl> - <nl> - / * * Inner * / <nl> - public ExecutableStatementCountInput ( int aParam ) <nl> - { <nl> - Runnable runnable = new Runnable ( ) { <nl> - public void run ( ) { <nl> - while ( true ) { <nl> - } <nl> - } <nl> - } ; <nl> - new Thread ( runnable ) . start ( ) ; <nl> - } <nl> - <nl> - / * * Empty constructor * / <nl> - public ExecutableStatementCountInput ( String someString ) { } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputAnonInnerLength . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputAnonInnerLength . java <nl> deleted file mode 100644 <nl> index b4aab65 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputAnonInnerLength . java <nl> + + + / dev / null <nl> @ @ - 1 , 123 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2002 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle ; <nl> - <nl> - import java . awt . event . MouseEvent ; <nl> - import java . awt . event . MouseAdapter ; <nl> - import javax . swing . JButton ; <nl> - <nl> - / * * <nl> - * Tests for length of anonymous inner types <nl> - * @ author Rob Worth <nl> - * @ author Lars K Ã¼ hne <nl> - * * / <nl> - public class InputAnonInnerLength <nl> - { <nl> - / * * <nl> - * Check that instantiations of normal classes work OK . <nl> - * / <nl> - private JButton mButton = new JButton ( ) ; <nl> - <nl> - private class MyInner <nl> - { <nl> - private MyInner ( int [ ] anArray ) <nl> - { <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * the AnonInnerLengthCheck works with ' new ' and RCURLY - check that <nl> - * it will not confuse constructors calls with array params with <nl> - * anon inners . <nl> - * / <nl> - private MyInner myInner = new MyInner ( new int [ ] { <nl> - / / make the array span multiple lines <nl> - 1 , <nl> - 2 , <nl> - 3 , <nl> - 4 , <nl> - 5 , <nl> - 6 , <nl> - 7 , <nl> - } <nl> - ) ; <nl> - <nl> - / * * <nl> - anon inner in member variable initialization which is 21 lines long <nl> - * / <nl> - private Runnable mRunnable1 = new Runnable ( ) { <nl> - public void run ( ) / / should not have to be documented , class is anon . <nl> - { <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - } <nl> - } ; <nl> - <nl> - / * * <nl> - anon inner in member variable initialization which is 20 lines long <nl> - * / <nl> - private Runnable mRunnable2 = new Runnable ( ) { <nl> - public void run ( ) / / should not have to be documented , class is anon . <nl> - { <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - System . out . println ( " running " ) ; <nl> - } <nl> - } ; <nl> - <nl> - / * * <nl> - anon inner in constructor . <nl> - * / <nl> - InputAnonInnerLength ( ) <nl> - { <nl> - mButton . addMouseListener ( new MouseAdapter ( ) <nl> - { <nl> - public void mouseClicked ( MouseEvent aEv ) <nl> - { <nl> - System . out . println ( " click " ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - / * * <nl> - anon inner in method <nl> - * / <nl> - public void addInputAnonInner ( ) <nl> - { <nl> - mButton . addMouseListener ( new MouseAdapter ( ) <nl> - { <nl> - public void mouseClicked ( MouseEvent aEv ) <nl> - { <nl> - System . out . println ( " click " ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountInput . java <nl> new file mode 100644 <nl> index 0000000 . . 2191bca <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountInput . java <nl> @ @ - 0 , 0 + 1 , 89 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> + <nl> + public class ExecutableStatementCountInput { <nl> + public void foo ( ) { <nl> + while ( true ) { <nl> + Runnable runnable = new Runnable ( ) { <nl> + public void run ( ) { <nl> + while ( true ) { <nl> + } <nl> + } <nl> + } ; <nl> + <nl> + new Thread ( runnable ) . start ( ) ; <nl> + } <nl> + } <nl> + <nl> + public void bar ( ) { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + <nl> + if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + public void simpleElseIf ( ) { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + public void stupidElseIf ( ) { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + } <nl> + <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + public ExecutableStatementCountInput ( ) <nl> + { <nl> + int i = 1 ; <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + / / STATIC _ INIT <nl> + static { <nl> + int i = 1 ; <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + / / INSTANCE _ INIT <nl> + { <nl> + int i = 1 ; <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + } else { <nl> + } <nl> + } <nl> + <nl> + / * * Inner * / <nl> + public ExecutableStatementCountInput ( int aParam ) <nl> + { <nl> + Runnable runnable = new Runnable ( ) { <nl> + public void run ( ) { <nl> + while ( true ) { <nl> + } <nl> + } <nl> + } ; <nl> + new Thread ( runnable ) . start ( ) ; <nl> + } <nl> + <nl> + / * * Empty constructor * / <nl> + public ExecutableStatementCountInput ( String someString ) { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputAnonInnerLength . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputAnonInnerLength . java <nl> new file mode 100644 <nl> index 0000000 . . 766a368 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputAnonInnerLength . java <nl> @ @ - 0 , 0 + 1 , 123 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2002 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> + <nl> + import java . awt . event . MouseEvent ; <nl> + import java . awt . event . MouseAdapter ; <nl> + import javax . swing . JButton ; <nl> + <nl> + / * * <nl> + * Tests for length of anonymous inner types <nl> + * @ author Rob Worth <nl> + * @ author Lars K Ã¼ hne <nl> + * * / <nl> + public class InputAnonInnerLength <nl> + { <nl> + / * * <nl> + * Check that instantiations of normal classes work OK . <nl> + * / <nl> + private JButton mButton = new JButton ( ) ; <nl> + <nl> + private class MyInner <nl> + { <nl> + private MyInner ( int [ ] anArray ) <nl> + { <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * the AnonInnerLengthCheck works with ' new ' and RCURLY - check that <nl> + * it will not confuse constructors calls with array params with <nl> + * anon inners . <nl> + * / <nl> + private MyInner myInner = new MyInner ( new int [ ] { <nl> + / / make the array span multiple lines <nl> + 1 , <nl> + 2 , <nl> + 3 , <nl> + 4 , <nl> + 5 , <nl> + 6 , <nl> + 7 , <nl> + } <nl> + ) ; <nl> + <nl> + / * * <nl> + anon inner in member variable initialization which is 21 lines long <nl> + * / <nl> + private Runnable mRunnable1 = new Runnable ( ) { <nl> + public void run ( ) / / should not have to be documented , class is anon . <nl> + { <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + anon inner in member variable initialization which is 20 lines long <nl> + * / <nl> + private Runnable mRunnable2 = new Runnable ( ) { <nl> + public void run ( ) / / should not have to be documented , class is anon . <nl> + { <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + System . out . println ( " running " ) ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + anon inner in constructor . <nl> + * / <nl> + InputAnonInnerLength ( ) <nl> + { <nl> + mButton . addMouseListener ( new MouseAdapter ( ) <nl> + { <nl> + public void mouseClicked ( MouseEvent aEv ) <nl> + { <nl> + System . out . println ( " click " ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + / * * <nl> + anon inner in method <nl> + * / <nl> + public void addInputAnonInner ( ) <nl> + { <nl> + mButton . addMouseListener ( new MouseAdapter ( ) <nl> + { <nl> + public void mouseClicked ( MouseEvent aEv ) <nl> + { <nl> + System . out . println ( " click " ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput . java <nl> new file mode 100644 <nl> index 0000000 . . 200f710 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput . java <nl> @ @ - 0 , 0 + 1 , 191 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> + <nl> + public class MethodCountCheckInput { <nl> + <nl> + / * * <nl> + * Dummy inner class to check that the inner - classes methods are not counted <nl> + * for the outer class . <nl> + * / <nl> + public class PublicMethodsInnerclassInnerclass { <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + public void doNothing50 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + public void doNothing51 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + public void doNothing52 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + public void doNothing53 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + public void doNothing54 ( ) { <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Dummy inner class to check that the inner - classes methods are not counted <nl> + * for the outer class . <nl> + * / <nl> + public interface PublicMethodsInnerInterface { <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + public void doNothing60 ( ) ; <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + public void doNothing61 ( ) ; <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + public abstract void doNothing62 ( ) ; <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + abstract void doNothing63 ( ) ; <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + void doNothing64 ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + public void doNothing00 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + public void doNothing01 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + public void doNothing02 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + public void doNothing03 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + public void doNothing04 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + protected void doNothing10 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + protected void doNothing11 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + protected void doNothing12 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + protected void doNothing13 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + protected void doNothing14 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + void doNothing20 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + void doNothing21 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + void doNothing22 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + void doNothing23 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + void doNothing24 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + private void doNothing30 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + private void doNothing31 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + private void doNothing32 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + private void doNothing33 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + private void doNothing34 ( ) { <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput2 . java <nl> new file mode 100644 <nl> index 0000000 . . 45e18ba <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput2 . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> + <nl> + public enum MethodCountCheckInput2 { <nl> + <nl> + RED { <nl> + @ Override void something ( ) { } ; <nl> + } , <nl> + <nl> + BLUE { <nl> + @ Override void something ( ) { } ; <nl> + protected void other1 ( ) { } ; <nl> + private void other2 ( ) { } ; <nl> + } ; <nl> + <nl> + @ Override public String toString ( ) { return " " ; } ; <nl> + <nl> + abstract void something ( ) ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput3 . java <nl> new file mode 100644 <nl> index 0000000 . . 4b1d6aa <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput3 . java <nl> @ @ - 0 , 0 + 1 , 38 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . sizes ; <nl> + <nl> + public class MethodCountCheckInput3 { <nl> + <nl> + / * * <nl> + * Dummy inner class to check that the inner - classes methods are not counted for the outer class . <nl> + * / <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + void doNothing50 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + void doNothing51 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + void doNothing52 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + void doNothing53 ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Dummy method doing nothing <nl> + * / <nl> + void doNothing54 ( ) { <nl> + } <nl> + <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput . java <nl> deleted file mode 100644 <nl> index b62384a . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput . java <nl> + + + / dev / null <nl> @ @ - 1 , 191 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . sizes ; <nl> - <nl> - public class MethodCountCheckInput { <nl> - <nl> - / * * <nl> - * Dummy inner class to check that the inner - classes methods are not counted <nl> - * for the outer class . <nl> - * / <nl> - public class PublicMethodsInnerclassInnerclass { <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - public void doNothing50 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - public void doNothing51 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - public void doNothing52 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - public void doNothing53 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - public void doNothing54 ( ) { <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Dummy inner class to check that the inner - classes methods are not counted <nl> - * for the outer class . <nl> - * / <nl> - public interface PublicMethodsInnerInterface { <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - public void doNothing60 ( ) ; <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - public void doNothing61 ( ) ; <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - public abstract void doNothing62 ( ) ; <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - abstract void doNothing63 ( ) ; <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - void doNothing64 ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - public void doNothing00 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - public void doNothing01 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - public void doNothing02 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - public void doNothing03 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - public void doNothing04 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - protected void doNothing10 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - protected void doNothing11 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - protected void doNothing12 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - protected void doNothing13 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - protected void doNothing14 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - void doNothing20 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - void doNothing21 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - void doNothing22 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - void doNothing23 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - void doNothing24 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - private void doNothing30 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - private void doNothing31 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - private void doNothing32 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - private void doNothing33 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - private void doNothing34 ( ) { <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput2 . java <nl> deleted file mode 100644 <nl> index 5c1edbb . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 18 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . sizes ; <nl> - <nl> - public enum MethodCountCheckInput2 { <nl> - <nl> - RED { <nl> - @ Override void something ( ) { } ; <nl> - } , <nl> - <nl> - BLUE { <nl> - @ Override void something ( ) { } ; <nl> - protected void other1 ( ) { } ; <nl> - private void other2 ( ) { } ; <nl> - } ; <nl> - <nl> - @ Override public String toString ( ) { return " " ; } ; <nl> - <nl> - abstract void something ( ) ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput3 . java <nl> deleted file mode 100644 <nl> index 2d744af . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput3 . java <nl> + + + / dev / null <nl> @ @ - 1 , 38 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . sizes ; <nl> - <nl> - public class MethodCountCheckInput3 { <nl> - <nl> - / * * <nl> - * Dummy inner class to check that the inner - classes methods are not counted for the outer class . <nl> - * / <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - void doNothing50 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - void doNothing51 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - void doNothing52 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - void doNothing53 ( ) { <nl> - } <nl> - <nl> - / * * <nl> - * Dummy method doing nothing <nl> - * / <nl> - void doNothing54 ( ) { <nl> - } <nl> - <nl> - } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 01fde84 <nl> - - - / dev / null <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheck . java <nl> @ @ - 0 , 0 + 1 , 76 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2010 Oliver Burn <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> + / * * <nl> + * < p > <nl> + * Check nested ( internal ) classes / interfaces are declared at the bottom of the <nl> + * class after all method and field declarations . <nl> + * < / p > <nl> + * <nl> + * @ author < a href = " mailto : ryly @ mail . ru " > Ruslan Dyachenko < / a > <nl> + * / <nl> + public class InnerTypeLastCheck extends Check <nl> + { <nl> + @ Override <nl> + public int [ ] getDefaultTokens ( ) <nl> + { <nl> + return new int [ ] { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; <nl> + } <nl> + <nl> + / * * Meet a root class . * / <nl> + private boolean mRootClass = true ; <nl> + <nl> + @ Override <nl> + public void visitToken ( DetailAST aAST ) <nl> + { <nl> + / * * First root class * / <nl> + if ( mRootClass ) { <nl> + mRootClass = false ; <nl> + } <nl> + else { <nl> + DetailAST nextSibling = aAST . getNextSibling ( ) ; <nl> + while ( null ! = nextSibling <nl> + & & ( ( nextSibling . getType ( ) ! = TokenTypes . CLASS _ DEF ) <nl> + | | ( nextSibling . getType ( ) ! = TokenTypes . INTERFACE _ DEF ) ) ) <nl> + { <nl> + if ( nextSibling . getType ( ) = = TokenTypes . VARIABLE _ DEF <nl> + | | nextSibling . getType ( ) = = TokenTypes . METHOD _ DEF ) <nl> + { <nl> + log ( nextSibling . getLineNo ( ) , nextSibling . getColumnNo ( ) , <nl> + " arrangement . members . before . inner " ) ; <nl> + } <nl> + nextSibling = nextSibling . getNextSibling ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void leaveToken ( DetailAST aAST ) <nl> + { <nl> + / * * Is this a root class * / <nl> + if ( null = = aAST . getParent ( ) ) { <nl> + mRootClass = true ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / design / messages . properties b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / design / messages . properties <nl> index 4549fc2 . . 0d26835 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / design / messages . properties <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / design / messages . properties <nl> @ @ - 1 , 3 + 1 , 4 @ @ <nl> + arrangement . members . before . inner = Fields and methods should be before inner classes . <nl> design . forExtension = Method ' ' { 0 } ' ' is not designed for extension - needs to be abstract , final or empty . <nl> final . class = Class { 0 } should be declared as final . <nl> interface . type = interfaces should describe a type and hence have methods . <nl> diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / design / InputInnerClassCheck . java b / src / testinputs / com / puppycrawl / tools / checkstyle / design / InputInnerClassCheck . java <nl> new file mode 100644 <nl> index 0000000 . . fdc92c7 <nl> - - - / dev / null <nl> + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / design / InputInnerClassCheck . java <nl> @ @ - 0 , 0 + 1 , 82 @ @ <nl> + package com . puppycrawl . tools . checkstyle . design ; <nl> + <nl> + public class InputInnerClassCheck { <nl> + 	 public int test1 = 100 ; <nl> + <nl> + 	 public void methodTestInner1 ( ) { <nl> + 	 	 double test2 = 200 ; <nl> + <nl> + 	 	 class InnerInMethod1 { <nl> + 	 	 	 void methodTest1 ( ) { <nl> + 	 	 	 	 System . out . println ( " test1 " ) ; <nl> + 	 	 	 } <nl> + 	 	 } <nl> + <nl> + 	 	 int test3 = 300 ; / / error <nl> + 	 } <nl> + <nl> + 	 public void methodTestInner2 ( ) { <nl> + 	 	 int test5 = 500 ; <nl> + <nl> + 	 	 class InnerInMethod2 { <nl> + 	 	 	 int test6 = 500 ; <nl> + 	 	 } <nl> + <nl> + 	 	 int test6 = 600 ; / / error <nl> + 	 	 int test8 = 800 ; / / error <nl> + 	 } <nl> + <nl> + 	 class Inner1 { <nl> + 	 	 int test4 = 400 ; <nl> + <nl> + 	 	 public void methodTestInner3 ( ) { <nl> + 	 	 	 int test9 = 500 ; <nl> + <nl> + 	 	 	 class InnerInMethod3 { <nl> + 	 	 	 	 int test10 = 500 ; <nl> + 	 	 	 } <nl> + <nl> + 	 	 	 int test11 = 600 ; / / error <nl> + 	 	 	 int test12 = 800 ; / / error <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 void methodTest2 ( ) { / / error <nl> + 	 	 System . out . println ( " test2 " ) ; <nl> + 	 } <nl> + } <nl> + <nl> + class Temp2 { <nl> + 	 class Inner1 { <nl> + 	 	 int test4 = 400 ; <nl> + <nl> + 	 	 public void methodTestInner3 ( ) { <nl> + 	 	 	 int test9 = 500 ; <nl> + <nl> + 	 	 	 class InnerInMethod3 { <nl> + 	 	 	 	 int test10 = 500 ; <nl> + 	 	 	 } <nl> + <nl> + 	 	 	 int test11 = 600 ; / / error <nl> + 	 	 	 int test12 = 800 ; / / error <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 void methodTest2 ( ) { / / error <nl> + 	 	 System . out . println ( " test2 " ) ; <nl> + 	 } <nl> + <nl> + 	 private int i = 0 ; / / error <nl> + } <nl> + <nl> + class Temp3 { <nl> + <nl> + class InnerCheck { <nl> + private int I = 0 ; <nl> + } <nl> + <nl> + public int [ ] getDefaultTokens ( ) <nl> + { <nl> + return new int [ ] { 1 , } ; <nl> + } <nl> + } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheckTest . java <nl> new file mode 100644 <nl> index 0000000 . . 87ce405 <nl> - - - / dev / null <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheckTest . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import java . io . File ; <nl> + import org . junit . Test ; <nl> + <nl> + public class InnerTypeLastCheckTest extends BaseCheckTestSupport <nl> + { <nl> + @ Test <nl> + public void testMembersBeforeInner ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( InnerTypeLastCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 15 : 17 : Fields and methods should be before inner classes . " , <nl> + " 25 : 17 : Fields and methods should be before inner classes . " , <nl> + " 26 : 17 : Fields and methods should be before inner classes . " , <nl> + " 39 : 25 : Fields and methods should be before inner classes . " , <nl> + " 40 : 25 : Fields and methods should be before inner classes . " , <nl> + " 44 : 9 : Fields and methods should be before inner classes . " , <nl> + " 60 : 25 : Fields and methods should be before inner classes . " , <nl> + " 61 : 25 : Fields and methods should be before inner classes . " , <nl> + " 65 : 9 : Fields and methods should be before inner classes . " , <nl> + " 69 : 9 : Fields and methods should be before inner classes . " , <nl> + " 78 : 5 : Fields and methods should be before inner classes . " , } ; <nl> + verify ( checkConfig , getPath ( " design " + File . separator <nl> + + " InputInnerClassCheck . java " ) , expected ) ; <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ design . xml b / src / xdocs / config _ design . xml <nl> index 5e432e6 . . 6edea04 100755 <nl> - - - a / src / xdocs / config _ design . xml <nl> + + + b / src / xdocs / config _ design . xml <nl> @ @ - 431 , 5 + 431 , 35 @ @ public class StringUtils / / not final to allow subclassing <nl> < / p > <nl> < / subsection > <nl> < / section > <nl> + <nl> + < section name = " InnerTypeLast " > <nl> + < subsection name = " Description " > <nl> + < p > <nl> + Check nested ( internal ) classes / interfaces are declared at the <nl> + bottom of the class after all method and field declarations . <nl> + < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Examples " > <nl> + < p > <nl> + To configure the check : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; InnerTypeLast & quot ; / & gt ; <nl> + < / source > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Package " > <nl> + < p > <nl> + com . puppycrawl . tools . checkstyle . checks . design <nl> + < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Parent Module " > <nl> + < p > <nl> + < a href = " config . html # treewalker " > TreeWalker < / a > <nl> + < / p > <nl> + < / subsection > <nl> + < / section > <nl> < / body > <nl> < / document > <nl> diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml <nl> index dfb1c57 . . 53cb157 100755 <nl> - - - a / src / xdocs / releasenotes . xml <nl> + + + b / src / xdocs / releasenotes . xml <nl> @ @ - 22 , 6 + 22 , 13 @ @ <nl> to support empty tags , and constructor declarations . <nl> Thanks to Rolf Wojtech for patch # 2724894 . <nl> < / li > <nl> + < li > <nl> + Added < a <nl> + href = " config _ design . html # InnerTypeLast " > InnerTypeLast < / a > to <nl> + check nested ( internal ) classes / interfaces are declared at the <nl> + bottom of the class after all method and field declarations . <nl> + Thanks to Ruslan Dyachenko for patch # 3027391 . <nl> + < / li > <nl> < / ul > <nl> < p > Bug fixes : < / p > <nl> < ul >

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheckTest . java 
 index c3393fb . . b79ab58 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheckTest . java 
 @ @ - 22 , 6 + 22 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 import static com . puppycrawl . tools . checkstyle . checks . sizes . AnonInnerLengthCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 @ @ - 34 , 6 + 37 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * @ author Lars K Ã¼ hne 
 * / 
 public class AnonInnerLengthCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " sizes " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java 
 index 046848e . . 2692c32 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheckTest . java 
 @ @ - 21 , 10 + 21 , 14 @ @ package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . sizes . ExecutableStatementCountCheck . MSG _ KEY ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 import antlr . CommonHiddenStreamToken ; 
 + 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 @ @ - 32 , 6 + 36 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class ExecutableStatementCountCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " sizes " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testMaxZero ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckTest . java 
 index e2bf6fb . . 5d52d50 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckTest . java 
 @ @ - 26 , 6 + 26 , 9 @ @ import static com . puppycrawl . tools . checkstyle . checks . sizes . MethodCountCheck . MSG _ 
 import static com . puppycrawl . tools . checkstyle . checks . sizes . MethodCountCheck . MSG _ PUBLIC _ METHODS ; 
 import static org . junit . Assert . assertArrayEquals ; 
 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Test ; 
 
 @ @ - 34 , 6 + 37 , 11 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class MethodCountCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " sizes " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 @ @ - 65 , 7 + 73 , 7 @ @ public class MethodCountCheckTest extends BaseCheckTestSupport { 
 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checkConfig , getPath ( " sizes / MethodCountCheckInput . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " MethodCountCheckInput . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 90 , 7 + 98 , 7 @ @ public class MethodCountCheckTest extends BaseCheckTestSupport { 
 " 45 : " + getCheckMessage ( MSG _ MANY _ METHODS , 5 , 3 ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " sizes / MethodCountCheckInput . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " MethodCountCheckInput . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 105 , 7 + 113 , 7 @ @ public class MethodCountCheckTest extends BaseCheckTestSupport { 
 " 9 : " + getCheckMessage ( MSG _ MANY _ METHODS , 3 , 2 ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " sizes / MethodCountCheckInput2 . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " MethodCountCheckInput2 . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 118 , 6 + 126 , 6 @ @ public class MethodCountCheckTest extends BaseCheckTestSupport { 
 " 3 : " + getCheckMessage ( MSG _ MANY _ METHODS , 5 , 2 ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " sizes / MethodCountCheckInput3 . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " MethodCountCheckInput3 . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / ExecutableStatementCountInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / ExecutableStatementCountInput . java 
 deleted file mode 100644 
 index 9277929 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / ExecutableStatementCountInput . java 
 + + + / dev / null 
 @ @ - 1 , 89 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - public class ExecutableStatementCountInput { 
 - public void foo ( ) { 
 - while ( true ) { 
 - Runnable runnable = new Runnable ( ) { 
 - public void run ( ) { 
 - while ( true ) { 
 - } 
 - } 
 - } ; 
 - 
 - new Thread ( runnable ) . start ( ) ; 
 - } 
 - } 
 - 
 - public void bar ( ) { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - 
 - if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - } 
 - } 
 - 
 - public void simpleElseIf ( ) { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - public void stupidElseIf ( ) { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - } 
 - 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } 
 - } 
 - } 
 - 
 - public ExecutableStatementCountInput ( ) 
 - { 
 - int i = 1 ; 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - / / STATIC _ INIT 
 - static { 
 - int i = 1 ; 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - / / INSTANCE _ INIT 
 - { 
 - int i = 1 ; 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 - } else { 
 - } 
 - } 
 - 
 - / * * Inner * / 
 - public ExecutableStatementCountInput ( int aParam ) 
 - { 
 - Runnable runnable = new Runnable ( ) { 
 - public void run ( ) { 
 - while ( true ) { 
 - } 
 - } 
 - } ; 
 - new Thread ( runnable ) . start ( ) ; 
 - } 
 - 
 - / * * Empty constructor * / 
 - public ExecutableStatementCountInput ( String someString ) { } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputAnonInnerLength . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputAnonInnerLength . java 
 deleted file mode 100644 
 index b4aab65 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputAnonInnerLength . java 
 + + + / dev / null 
 @ @ - 1 , 123 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2002 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle ; 
 - 
 - import java . awt . event . MouseEvent ; 
 - import java . awt . event . MouseAdapter ; 
 - import javax . swing . JButton ; 
 - 
 - / * * 
 - * Tests for length of anonymous inner types 
 - * @ author Rob Worth 
 - * @ author Lars K Ã¼ hne 
 - * * / 
 - public class InputAnonInnerLength 
 - { 
 - / * * 
 - * Check that instantiations of normal classes work OK . 
 - * / 
 - private JButton mButton = new JButton ( ) ; 
 - 
 - private class MyInner 
 - { 
 - private MyInner ( int [ ] anArray ) 
 - { 
 - } 
 - } 
 - 
 - / * * 
 - * the AnonInnerLengthCheck works with ' new ' and RCURLY - check that 
 - * it will not confuse constructors calls with array params with 
 - * anon inners . 
 - * / 
 - private MyInner myInner = new MyInner ( new int [ ] { 
 - / / make the array span multiple lines 
 - 1 , 
 - 2 , 
 - 3 , 
 - 4 , 
 - 5 , 
 - 6 , 
 - 7 , 
 - } 
 - ) ; 
 - 
 - / * * 
 - anon inner in member variable initialization which is 21 lines long 
 - * / 
 - private Runnable mRunnable1 = new Runnable ( ) { 
 - public void run ( ) / / should not have to be documented , class is anon . 
 - { 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - } 
 - } ; 
 - 
 - / * * 
 - anon inner in member variable initialization which is 20 lines long 
 - * / 
 - private Runnable mRunnable2 = new Runnable ( ) { 
 - public void run ( ) / / should not have to be documented , class is anon . 
 - { 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - System . out . println ( " running " ) ; 
 - } 
 - } ; 
 - 
 - / * * 
 - anon inner in constructor . 
 - * / 
 - InputAnonInnerLength ( ) 
 - { 
 - mButton . addMouseListener ( new MouseAdapter ( ) 
 - { 
 - public void mouseClicked ( MouseEvent aEv ) 
 - { 
 - System . out . println ( " click " ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - / * * 
 - anon inner in method 
 - * / 
 - public void addInputAnonInner ( ) 
 - { 
 - mButton . addMouseListener ( new MouseAdapter ( ) 
 - { 
 - public void mouseClicked ( MouseEvent aEv ) 
 - { 
 - System . out . println ( " click " ) ; 
 - } 
 - } ) ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountInput . java 
 new file mode 100644 
 index 0000000 . . 2191bca 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountInput . java 
 @ @ - 0 , 0 + 1 , 89 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 + 
 + public class ExecutableStatementCountInput { 
 + public void foo ( ) { 
 + while ( true ) { 
 + Runnable runnable = new Runnable ( ) { 
 + public void run ( ) { 
 + while ( true ) { 
 + } 
 + } 
 + } ; 
 + 
 + new Thread ( runnable ) . start ( ) ; 
 + } 
 + } 
 + 
 + public void bar ( ) { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + if ( System . currentTimeMillis ( ) = = 0 & & System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + 
 + if ( System . currentTimeMillis ( ) = = 0 | | System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + } 
 + } 
 + 
 + public void simpleElseIf ( ) { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + public void stupidElseIf ( ) { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + } 
 + 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } 
 + } 
 + } 
 + 
 + public ExecutableStatementCountInput ( ) 
 + { 
 + int i = 1 ; 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + / / STATIC _ INIT 
 + static { 
 + int i = 1 ; 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + / / INSTANCE _ INIT 
 + { 
 + int i = 1 ; 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else if ( System . currentTimeMillis ( ) = = 0 ) { 
 + } else { 
 + } 
 + } 
 + 
 + / * * Inner * / 
 + public ExecutableStatementCountInput ( int aParam ) 
 + { 
 + Runnable runnable = new Runnable ( ) { 
 + public void run ( ) { 
 + while ( true ) { 
 + } 
 + } 
 + } ; 
 + new Thread ( runnable ) . start ( ) ; 
 + } 
 + 
 + / * * Empty constructor * / 
 + public ExecutableStatementCountInput ( String someString ) { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputAnonInnerLength . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputAnonInnerLength . java 
 new file mode 100644 
 index 0000000 . . 766a368 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / InputAnonInnerLength . java 
 @ @ - 0 , 0 + 1 , 123 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2002 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 + 
 + import java . awt . event . MouseEvent ; 
 + import java . awt . event . MouseAdapter ; 
 + import javax . swing . JButton ; 
 + 
 + / * * 
 + * Tests for length of anonymous inner types 
 + * @ author Rob Worth 
 + * @ author Lars K Ã¼ hne 
 + * * / 
 + public class InputAnonInnerLength 
 + { 
 + / * * 
 + * Check that instantiations of normal classes work OK . 
 + * / 
 + private JButton mButton = new JButton ( ) ; 
 + 
 + private class MyInner 
 + { 
 + private MyInner ( int [ ] anArray ) 
 + { 
 + } 
 + } 
 + 
 + / * * 
 + * the AnonInnerLengthCheck works with ' new ' and RCURLY - check that 
 + * it will not confuse constructors calls with array params with 
 + * anon inners . 
 + * / 
 + private MyInner myInner = new MyInner ( new int [ ] { 
 + / / make the array span multiple lines 
 + 1 , 
 + 2 , 
 + 3 , 
 + 4 , 
 + 5 , 
 + 6 , 
 + 7 , 
 + } 
 + ) ; 
 + 
 + / * * 
 + anon inner in member variable initialization which is 21 lines long 
 + * / 
 + private Runnable mRunnable1 = new Runnable ( ) { 
 + public void run ( ) / / should not have to be documented , class is anon . 
 + { 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + } 
 + } ; 
 + 
 + / * * 
 + anon inner in member variable initialization which is 20 lines long 
 + * / 
 + private Runnable mRunnable2 = new Runnable ( ) { 
 + public void run ( ) / / should not have to be documented , class is anon . 
 + { 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + System . out . println ( " running " ) ; 
 + } 
 + } ; 
 + 
 + / * * 
 + anon inner in constructor . 
 + * / 
 + InputAnonInnerLength ( ) 
 + { 
 + mButton . addMouseListener ( new MouseAdapter ( ) 
 + { 
 + public void mouseClicked ( MouseEvent aEv ) 
 + { 
 + System . out . println ( " click " ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + / * * 
 + anon inner in method 
 + * / 
 + public void addInputAnonInner ( ) 
 + { 
 + mButton . addMouseListener ( new MouseAdapter ( ) 
 + { 
 + public void mouseClicked ( MouseEvent aEv ) 
 + { 
 + System . out . println ( " click " ) ; 
 + } 
 + } ) ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput . java 
 new file mode 100644 
 index 0000000 . . 200f710 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput . java 
 @ @ - 0 , 0 + 1 , 191 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 + 
 + public class MethodCountCheckInput { 
 + 
 + / * * 
 + * Dummy inner class to check that the inner - classes methods are not counted 
 + * for the outer class . 
 + * / 
 + public class PublicMethodsInnerclassInnerclass { 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + public void doNothing50 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + public void doNothing51 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + public void doNothing52 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + public void doNothing53 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + public void doNothing54 ( ) { 
 + } 
 + } 
 + 
 + / * * 
 + * Dummy inner class to check that the inner - classes methods are not counted 
 + * for the outer class . 
 + * / 
 + public interface PublicMethodsInnerInterface { 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + public void doNothing60 ( ) ; 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + public void doNothing61 ( ) ; 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + public abstract void doNothing62 ( ) ; 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + abstract void doNothing63 ( ) ; 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + void doNothing64 ( ) ; 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + public void doNothing00 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + public void doNothing01 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + public void doNothing02 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + public void doNothing03 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + public void doNothing04 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + protected void doNothing10 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + protected void doNothing11 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + protected void doNothing12 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + protected void doNothing13 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + protected void doNothing14 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + void doNothing20 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + void doNothing21 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + void doNothing22 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + void doNothing23 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + void doNothing24 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + private void doNothing30 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + private void doNothing31 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + private void doNothing32 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + private void doNothing33 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + private void doNothing34 ( ) { 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput2 . java 
 new file mode 100644 
 index 0000000 . . 45e18ba 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput2 . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 + 
 + public enum MethodCountCheckInput2 { 
 + 
 + RED { 
 + @ Override void something ( ) { } ; 
 + } , 
 + 
 + BLUE { 
 + @ Override void something ( ) { } ; 
 + protected void other1 ( ) { } ; 
 + private void other2 ( ) { } ; 
 + } ; 
 + 
 + @ Override public String toString ( ) { return " " ; } ; 
 + 
 + abstract void something ( ) ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput3 . java 
 new file mode 100644 
 index 0000000 . . 4b1d6aa 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / MethodCountCheckInput3 . java 
 @ @ - 0 , 0 + 1 , 38 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . sizes ; 
 + 
 + public class MethodCountCheckInput3 { 
 + 
 + / * * 
 + * Dummy inner class to check that the inner - classes methods are not counted for the outer class . 
 + * / 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + void doNothing50 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + void doNothing51 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + void doNothing52 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + void doNothing53 ( ) { 
 + } 
 + 
 + / * * 
 + * Dummy method doing nothing 
 + * / 
 + void doNothing54 ( ) { 
 + } 
 + 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput . java 
 deleted file mode 100644 
 index b62384a . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput . java 
 + + + / dev / null 
 @ @ - 1 , 191 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . sizes ; 
 - 
 - public class MethodCountCheckInput { 
 - 
 - / * * 
 - * Dummy inner class to check that the inner - classes methods are not counted 
 - * for the outer class . 
 - * / 
 - public class PublicMethodsInnerclassInnerclass { 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - public void doNothing50 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - public void doNothing51 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - public void doNothing52 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - public void doNothing53 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - public void doNothing54 ( ) { 
 - } 
 - } 
 - 
 - / * * 
 - * Dummy inner class to check that the inner - classes methods are not counted 
 - * for the outer class . 
 - * / 
 - public interface PublicMethodsInnerInterface { 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - public void doNothing60 ( ) ; 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - public void doNothing61 ( ) ; 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - public abstract void doNothing62 ( ) ; 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - abstract void doNothing63 ( ) ; 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - void doNothing64 ( ) ; 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - public void doNothing00 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - public void doNothing01 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - public void doNothing02 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - public void doNothing03 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - public void doNothing04 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - protected void doNothing10 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - protected void doNothing11 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - protected void doNothing12 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - protected void doNothing13 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - protected void doNothing14 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - void doNothing20 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - void doNothing21 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - void doNothing22 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - void doNothing23 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - void doNothing24 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - private void doNothing30 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - private void doNothing31 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - private void doNothing32 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - private void doNothing33 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - private void doNothing34 ( ) { 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput2 . java 
 deleted file mode 100644 
 index 5c1edbb . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput2 . java 
 + + + / dev / null 
 @ @ - 1 , 18 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . sizes ; 
 - 
 - public enum MethodCountCheckInput2 { 
 - 
 - RED { 
 - @ Override void something ( ) { } ; 
 - } , 
 - 
 - BLUE { 
 - @ Override void something ( ) { } ; 
 - protected void other1 ( ) { } ; 
 - private void other2 ( ) { } ; 
 - } ; 
 - 
 - @ Override public String toString ( ) { return " " ; } ; 
 - 
 - abstract void something ( ) ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput3 . java 
 deleted file mode 100644 
 index 2d744af . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / sizes / MethodCountCheckInput3 . java 
 + + + / dev / null 
 @ @ - 1 , 38 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . sizes ; 
 - 
 - public class MethodCountCheckInput3 { 
 - 
 - / * * 
 - * Dummy inner class to check that the inner - classes methods are not counted for the outer class . 
 - * / 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - void doNothing50 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - void doNothing51 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - void doNothing52 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - void doNothing53 ( ) { 
 - } 
 - 
 - / * * 
 - * Dummy method doing nothing 
 - * / 
 - void doNothing54 ( ) { 
 - } 
 - 
 - } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheck . java 
 new file mode 100644 
 index 0000000 . . 01fde84 
 - - - / dev / null 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheck . java 
 @ @ - 0 , 0 + 1 , 76 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2010 Oliver Burn 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 + / * * 
 + * < p > 
 + * Check nested ( internal ) classes / interfaces are declared at the bottom of the 
 + * class after all method and field declarations . 
 + * < / p > 
 + * 
 + * @ author < a href = " mailto : ryly @ mail . ru " > Ruslan Dyachenko < / a > 
 + * / 
 + public class InnerTypeLastCheck extends Check 
 + { 
 + @ Override 
 + public int [ ] getDefaultTokens ( ) 
 + { 
 + return new int [ ] { TokenTypes . CLASS _ DEF , TokenTypes . INTERFACE _ DEF } ; 
 + } 
 + 
 + / * * Meet a root class . * / 
 + private boolean mRootClass = true ; 
 + 
 + @ Override 
 + public void visitToken ( DetailAST aAST ) 
 + { 
 + / * * First root class * / 
 + if ( mRootClass ) { 
 + mRootClass = false ; 
 + } 
 + else { 
 + DetailAST nextSibling = aAST . getNextSibling ( ) ; 
 + while ( null ! = nextSibling 
 + & & ( ( nextSibling . getType ( ) ! = TokenTypes . CLASS _ DEF ) 
 + | | ( nextSibling . getType ( ) ! = TokenTypes . INTERFACE _ DEF ) ) ) 
 + { 
 + if ( nextSibling . getType ( ) = = TokenTypes . VARIABLE _ DEF 
 + | | nextSibling . getType ( ) = = TokenTypes . METHOD _ DEF ) 
 + { 
 + log ( nextSibling . getLineNo ( ) , nextSibling . getColumnNo ( ) , 
 + " arrangement . members . before . inner " ) ; 
 + } 
 + nextSibling = nextSibling . getNextSibling ( ) ; 
 + } 
 + } 
 + } 
 + 
 + @ Override 
 + public void leaveToken ( DetailAST aAST ) 
 + { 
 + / * * Is this a root class * / 
 + if ( null = = aAST . getParent ( ) ) { 
 + mRootClass = true ; 
 + } 
 + } 
 + } 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / design / messages . properties b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / design / messages . properties 
 index 4549fc2 . . 0d26835 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / design / messages . properties 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / design / messages . properties 
 @ @ - 1 , 3 + 1 , 4 @ @ 
 + arrangement . members . before . inner = Fields and methods should be before inner classes . 
 design . forExtension = Method ' ' { 0 } ' ' is not designed for extension - needs to be abstract , final or empty . 
 final . class = Class { 0 } should be declared as final . 
 interface . type = interfaces should describe a type and hence have methods . 
 diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / design / InputInnerClassCheck . java b / src / testinputs / com / puppycrawl / tools / checkstyle / design / InputInnerClassCheck . java 
 new file mode 100644 
 index 0000000 . . fdc92c7 
 - - - / dev / null 
 + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / design / InputInnerClassCheck . java 
 @ @ - 0 , 0 + 1 , 82 @ @ 
 + package com . puppycrawl . tools . checkstyle . design ; 
 + 
 + public class InputInnerClassCheck { 
 + 	 public int test1 = 100 ; 
 + 
 + 	 public void methodTestInner1 ( ) { 
 + 	 	 double test2 = 200 ; 
 + 
 + 	 	 class InnerInMethod1 { 
 + 	 	 	 void methodTest1 ( ) { 
 + 	 	 	 	 System . out . println ( " test1 " ) ; 
 + 	 	 	 } 
 + 	 	 } 
 + 
 + 	 	 int test3 = 300 ; / / error 
 + 	 } 
 + 
 + 	 public void methodTestInner2 ( ) { 
 + 	 	 int test5 = 500 ; 
 + 
 + 	 	 class InnerInMethod2 { 
 + 	 	 	 int test6 = 500 ; 
 + 	 	 } 
 + 
 + 	 	 int test6 = 600 ; / / error 
 + 	 	 int test8 = 800 ; / / error 
 + 	 } 
 + 
 + 	 class Inner1 { 
 + 	 	 int test4 = 400 ; 
 + 
 + 	 	 public void methodTestInner3 ( ) { 
 + 	 	 	 int test9 = 500 ; 
 + 
 + 	 	 	 class InnerInMethod3 { 
 + 	 	 	 	 int test10 = 500 ; 
 + 	 	 	 } 
 + 
 + 	 	 	 int test11 = 600 ; / / error 
 + 	 	 	 int test12 = 800 ; / / error 
 + 	 	 } 
 + 	 } 
 + 
 + 	 void methodTest2 ( ) { / / error 
 + 	 	 System . out . println ( " test2 " ) ; 
 + 	 } 
 + } 
 + 
 + class Temp2 { 
 + 	 class Inner1 { 
 + 	 	 int test4 = 400 ; 
 + 
 + 	 	 public void methodTestInner3 ( ) { 
 + 	 	 	 int test9 = 500 ; 
 + 
 + 	 	 	 class InnerInMethod3 { 
 + 	 	 	 	 int test10 = 500 ; 
 + 	 	 	 } 
 + 
 + 	 	 	 int test11 = 600 ; / / error 
 + 	 	 	 int test12 = 800 ; / / error 
 + 	 	 } 
 + 	 } 
 + 
 + 	 void methodTest2 ( ) { / / error 
 + 	 	 System . out . println ( " test2 " ) ; 
 + 	 } 
 + 
 + 	 private int i = 0 ; / / error 
 + } 
 + 
 + class Temp3 { 
 + 
 + class InnerCheck { 
 + private int I = 0 ; 
 + } 
 + 
 + public int [ ] getDefaultTokens ( ) 
 + { 
 + return new int [ ] { 1 , } ; 
 + } 
 + } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheckTest . java 
 new file mode 100644 
 index 0000000 . . 87ce405 
 - - - / dev / null 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheckTest . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import java . io . File ; 
 + import org . junit . Test ; 
 + 
 + public class InnerTypeLastCheckTest extends BaseCheckTestSupport 
 + { 
 + @ Test 
 + public void testMembersBeforeInner ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( InnerTypeLastCheck . class ) ; 
 + final String [ ] expected = { 
 + " 15 : 17 : Fields and methods should be before inner classes . " , 
 + " 25 : 17 : Fields and methods should be before inner classes . " , 
 + " 26 : 17 : Fields and methods should be before inner classes . " , 
 + " 39 : 25 : Fields and methods should be before inner classes . " , 
 + " 40 : 25 : Fields and methods should be before inner classes . " , 
 + " 44 : 9 : Fields and methods should be before inner classes . " , 
 + " 60 : 25 : Fields and methods should be before inner classes . " , 
 + " 61 : 25 : Fields and methods should be before inner classes . " , 
 + " 65 : 9 : Fields and methods should be before inner classes . " , 
 + " 69 : 9 : Fields and methods should be before inner classes . " , 
 + " 78 : 5 : Fields and methods should be before inner classes . " , } ; 
 + verify ( checkConfig , getPath ( " design " + File . separator 
 + + " InputInnerClassCheck . java " ) , expected ) ; 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ design . xml b / src / xdocs / config _ design . xml 
 index 5e432e6 . . 6edea04 100755 
 - - - a / src / xdocs / config _ design . xml 
 + + + b / src / xdocs / config _ design . xml 
 @ @ - 431 , 5 + 431 , 35 @ @ public class StringUtils / / not final to allow subclassing 
 < / p > 
 < / subsection > 
 < / section > 
 + 
 + < section name = " InnerTypeLast " > 
 + < subsection name = " Description " > 
 + < p > 
 + Check nested ( internal ) classes / interfaces are declared at the 
 + bottom of the class after all method and field declarations . 
 + < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Examples " > 
 + < p > 
 + To configure the check : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; InnerTypeLast & quot ; / & gt ; 
 + < / source > 
 + < / subsection > 
 + 
 + < subsection name = " Package " > 
 + < p > 
 + com . puppycrawl . tools . checkstyle . checks . design 
 + < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Parent Module " > 
 + < p > 
 + < a href = " config . html # treewalker " > TreeWalker < / a > 
 + < / p > 
 + < / subsection > 
 + < / section > 
 < / body > 
 < / document > 
 diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml 
 index dfb1c57 . . 53cb157 100755 
 - - - a / src / xdocs / releasenotes . xml 
 + + + b / src / xdocs / releasenotes . xml 
 @ @ - 22 , 6 + 22 , 13 @ @ 
 to support empty tags , and constructor declarations . 
 Thanks to Rolf Wojtech for patch # 2724894 . 
 < / li > 
 + < li > 
 + Added < a 
 + href = " config _ design . html # InnerTypeLast " > InnerTypeLast < / a > to 
 + check nested ( internal ) classes / interfaces are declared at the 
 + bottom of the class after all method and field declarations . 
 + Thanks to Ruslan Dyachenko for patch # 3027391 . 
 + < / li > 
 < / ul > 
 < p > Bug fixes : < / p > 
 < ul >
