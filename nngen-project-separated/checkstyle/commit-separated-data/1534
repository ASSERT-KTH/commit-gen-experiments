BLEU SCORE: 0.8070557274927982

TEST MSG: Issue # 2161 : unify test input locations for coding package
GENERATED MSG: Issue # 2161 : unify test input locations for naming package

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java <nl> index 1305e12 . . 933ce1e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java <nl> @ @ - 228 , 7 + 228 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " coding " + File . separator + " InputReturnFromCatchCheck . java " ) , <nl> + getPath ( " checks " + File . separator + " InputReturnFromCatchCheck . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 247 , 7 + 247 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " coding " + File . separator + " InputReturnFromFinallyCheck . java " ) , <nl> + getPath ( " checks " + File . separator + " InputReturnFromFinallyCheck . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 263 , 7 + 263 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { <nl> String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " coding " + File . separator + " InputReturnFromFinallyCheck . java " ) , <nl> + getPath ( " checks " + File . separator + " InputReturnFromFinallyCheck . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 285 , 7 + 285 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " coding " + File . separator + " InputReturnFromFinallyCheck . java " ) , <nl> + getPath ( " checks " + File . separator + " InputReturnFromFinallyCheck . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 306 , 7 + 306 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " coding " + File . separator + " InputReturnFromFinallyCheck . java " ) , <nl> + getPath ( " checks " + File . separator + " InputReturnFromFinallyCheck . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 329 , 7 + 329 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " coding " + File . separator + " InputReturnFromFinallyCheck . java " ) , <nl> + getPath ( " checks " + File . separator + " InputReturnFromFinallyCheck . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 353 , 7 + 353 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " coding " + File . separator + " InputReturnFromFinallyCheck . java " ) , <nl> + getPath ( " checks " + File . separator + " InputReturnFromFinallyCheck . java " ) , <nl> expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> index 1a065ab . . bc3ce5b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalInstantiationCheck . MSG _ KEY ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Assert ; <nl> @ @ - 37 , 6 + 38 , 18 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class IllegalInstantiationCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected String getNonCompilablePath ( String filename ) throws IOException { <nl> + return super . getNonCompilablePath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testIt ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> @ @ - 55 , 7 + 68 , 7 @ @ public class IllegalInstantiationCheckTest <nl> " 41 : 18 : " + getCheckMessage ( MSG _ KEY , " java . io . File " ) , <nl> " 44 : 21 : " + getCheckMessage ( MSG _ KEY , " java . awt . Color " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " checks / coding / InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 64 , 8 + 77 , 7 @ @ public class IllegalInstantiationCheckTest <nl> createCheckConfig ( IllegalInstantiationCheck . class ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , <nl> - new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " <nl> - + " coding / InputIllegalInstantiationCheckTest2 . java " ) . getCanonicalPath ( ) , <nl> + getNonCompilablePath ( " InputIllegalInstantiationCheckTest2 . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 80 , 8 + 92 , 7 @ @ public class IllegalInstantiationCheckTest <nl> " 3 : 19 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , <nl> } ; <nl> verify ( checkConfig , <nl> - new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " <nl> - + " coding / InputIllegalInstantiationCheckNoPackage . java " ) . getCanonicalPath ( ) , <nl> + getNonCompilablePath ( " InputIllegalInstantiationCheckNoPackage . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 97 , 8 + 108 , 7 @ @ public class IllegalInstantiationCheckTest <nl> " 11 : 20 : " + getCheckMessage ( MSG _ KEY , " java . lang . String " ) , <nl> } ; <nl> verify ( checkConfig , <nl> - new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " <nl> - + " coding / InputIllegalInstantiationCheckLang . java " ) . getCanonicalPath ( ) , <nl> + getNonCompilablePath ( " InputIllegalInstantiationCheckLang . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 111 , 8 + 121 , 7 @ @ public class IllegalInstantiationCheckTest <nl> " jjva . lang . Boolean , java . lang * Boolean " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , <nl> - new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " <nl> - + " coding / InputIllegalInstantiationCheckLang . java " ) . getCanonicalPath ( ) , <nl> + getNonCompilablePath ( " InputIllegalInstantiationCheckLang . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 146 , 8 + 155 , 7 @ @ public class IllegalInstantiationCheckTest <nl> elistAst . setNextSibling ( rparenAst ) ; <nl> <nl> IllegalInstantiationCheck check = new IllegalInstantiationCheck ( ) ; <nl> - File inputFile = new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " <nl> - + " coding / InputIllegalInstantiationCheckLang . java " ) ; <nl> + File inputFile = new File ( getNonCompilablePath ( " InputIllegalInstantiationCheckLang . java " ) ) ; <nl> check . setFileContents ( new FileContents ( new FileText ( inputFile , " UTF - 8 " ) ) ) ; <nl> check . configure ( createCheckConfig ( IllegalInstantiationCheck . class ) ) ; <nl> check . setMessages ( new LocalizedMessages ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> index 6b37849 . . 3cd5937 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . AbstractSuperCheck . MSG _ KEY ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 31 , 6 + 32 , 18 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class SuperCloneCheckTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected String getNonCompilablePath ( String filename ) throws IOException { <nl> + return super . getNonCompilablePath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testIt ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> @ @ - 40 , 7 + 53 , 7 @ @ public class SuperCloneCheckTest <nl> " 35 : 19 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , <nl> " 60 : 48 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " checks / coding / InputClone . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputClone . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 51 , 8 + 64 , 7 @ @ public class SuperCloneCheckTest <nl> " 13 : 8 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , <nl> " 19 : 8 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , <nl> } ; <nl> - verify ( checkConfig , new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / " <nl> - + " checkstyle / coding / InputSuperCloneCheck . java " ) . getCanonicalPath ( ) , expected ) ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputSuperCloneCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> index d27a184 . . 0764c59 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthes <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ STRING ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . junit . Assert ; <nl> @ @ - 41 , 8 + 42 , 11 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> * @ author Eric K . Roe <nl> * / <nl> public class UnnecessaryParenthesesCheckTest extends BaseCheckTestSupport { <nl> - private static final String TEST _ FILE = " coding " + File . separator <nl> - + " InputUnnecessaryParentheses . java " ; <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testDefault ( ) throws Exception { <nl> @ @ - 96 , 7 + 100 , 7 @ @ public class UnnecessaryParenthesesCheckTest extends BaseCheckTestSupport { <nl> " 82 : 39 : " + getCheckMessage ( MSG _ ASSIGN ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( TEST _ FILE ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputUnnecessaryParentheses . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckLang . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckLang . java <nl> new file mode 100644 <nl> index 0000000 . . d3f18b8 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckLang . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package java . lang ; <nl> + <nl> + class Input { <nl> + Boolean obj = new Boolean ( ) ; <nl> + Integer obj2 = new Integer ( ) ; <nl> + } <nl> + <nl> + class Boolean { } <nl> + <nl> + class Input2 { <nl> + 	 String a = new String ( ) ; <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckNoPackage . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckNoPackage . java <nl> new file mode 100644 <nl> index 0000000 . . c11e162 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckNoPackage . java <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + / / no package <nl> + class Input { <nl> + Boolean obj = new Boolean ( ) ; <nl> + Integer obj = new Integer ( ) ; <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckTest2 . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckTest2 . java <nl> new file mode 100644 <nl> index 0000000 . . daefc14 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckTest2 . java <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + / / Compilable with Java8 <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + import com . sun . corba . se . impl . protocol . giopmsgheaders . Message ; <nl> + <nl> + public class InputIllegalInstantiationCheckTest2 <nl> + { <nl> + <nl> + public static void main ( String [ ] args ) <nl> + { <nl> + <nl> + Supplier < InputMethodReferencesTest2 > supplier = InputMethodReferencesTest2 : : new ; <nl> + Supplier < InputMethodReferencesTest2 > suppl = InputMethodReferencesTest2 : : < Integer > new ; <nl> + Function < Integer , Message [ ] > messageArrayFactory = Message [ ] : : new ; <nl> + <nl> + } <nl> + <nl> + private class Bar < T > <nl> + { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperCloneCheck . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperCloneCheck . java <nl> new file mode 100644 <nl> index 0000000 . . c833584 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperCloneCheck . java <nl> @ @ - 0 , 0 + 1 , 30 @ @ <nl> + / / Requires Java8 <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + interface InputSuperCloneCheck { <nl> + void clone ( ) ; <nl> + } <nl> + <nl> + class A { <nl> + static { <nl> + Runnable a = ( ) - > super . clone ( ) ; <nl> + } <nl> + <nl> + void clone ( ) { <nl> + obj . super ( ) ; <nl> + } <nl> + } <nl> + <nl> + class B { <nl> + void clone ( ) { <nl> + ( super ) . clone ( ) ; <nl> + } <nl> + } <nl> + <nl> + class C { <nl> + void method ( ) { <nl> + super ( ) ; <nl> + super . clone ( asd , asd ) ; <nl> + super . clone ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckLang . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckLang . java <nl> deleted file mode 100644 <nl> index d3f18b8 . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckLang . java <nl> + + + / dev / null <nl> @ @ - 1 , 12 + 0 , 0 @ @ <nl> - package java . lang ; <nl> - <nl> - class Input { <nl> - Boolean obj = new Boolean ( ) ; <nl> - Integer obj2 = new Integer ( ) ; <nl> - } <nl> - <nl> - class Boolean { } <nl> - <nl> - class Input2 { <nl> - 	 String a = new String ( ) ; <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckNoPackage . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckNoPackage . java <nl> deleted file mode 100644 <nl> index c11e162 . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckNoPackage . java <nl> + + + / dev / null <nl> @ @ - 1 , 5 + 0 , 0 @ @ <nl> - / / no package <nl> - class Input { <nl> - Boolean obj = new Boolean ( ) ; <nl> - Integer obj = new Integer ( ) ; <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckTest2 . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckTest2 . java <nl> deleted file mode 100644 <nl> index 0d9fa7f . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckTest2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 22 + 0 , 0 @ @ <nl> - / / Compilable with Java8 <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - import com . sun . corba . se . impl . protocol . giopmsgheaders . Message ; <nl> - <nl> - public class InputIllegalInstantiationCheckTest2 <nl> - { <nl> - <nl> - public static void main ( String [ ] args ) <nl> - { <nl> - <nl> - Supplier < InputMethodReferencesTest2 > supplier = InputMethodReferencesTest2 : : new ; <nl> - Supplier < InputMethodReferencesTest2 > suppl = InputMethodReferencesTest2 : : < Integer > new ; <nl> - Function < Integer , Message [ ] > messageArrayFactory = Message [ ] : : new ; <nl> - <nl> - } <nl> - <nl> - private class Bar < T > <nl> - { <nl> - <nl> - } <nl> - } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputSuperCloneCheck . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputSuperCloneCheck . java <nl> deleted file mode 100644 <nl> index e46b7db . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputSuperCloneCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 30 + 0 , 0 @ @ <nl> - / / Requires Java8 <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - interface InputSuperCloneCheck { <nl> - void clone ( ) ; <nl> - } <nl> - <nl> - class A { <nl> - static { <nl> - Runnable a = ( ) - > super . clone ( ) ; <nl> - } <nl> - <nl> - void clone ( ) { <nl> - obj . super ( ) ; <nl> - } <nl> - } <nl> - <nl> - class B { <nl> - void clone ( ) { <nl> - ( super ) . clone ( ) ; <nl> - } <nl> - } <nl> - <nl> - class C { <nl> - void method ( ) { <nl> - super ( ) ; <nl> - super . clone ( asd , asd ) ; <nl> - super . clone ( ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputReturnFromCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputReturnFromCatchCheck . java <nl> new file mode 100644 <nl> index 0000000 . . b0149d8 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputReturnFromCatchCheck . java <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks ; <nl> + <nl> + public class InputReturnFromCatchCheck { <nl> + public void foo ( ) { <nl> + try { <nl> + System . currentTimeMillis ( ) ; <nl> + } catch ( Exception e ) { <nl> + return ; <nl> + } <nl> + } <nl> + <nl> + public void bar ( ) { <nl> + try { <nl> + System . currentTimeMillis ( ) ; <nl> + } catch ( Exception e ) { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + return ; / / return from if statement <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputReturnFromFinallyCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputReturnFromFinallyCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 085c060 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputReturnFromFinallyCheck . java <nl> @ @ - 0 , 0 + 1 , 26 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks ; <nl> + <nl> + public class InputReturnFromFinallyCheck { <nl> + public void foo ( ) { <nl> + try { <nl> + System . currentTimeMillis ( ) ; <nl> + } finally { <nl> + return ; <nl> + } <nl> + } <nl> + <nl> + public void bar ( ) { <nl> + try { <nl> + System . currentTimeMillis ( ) ; <nl> + } finally { <nl> + if ( System . currentTimeMillis ( ) = = 0 ) { <nl> + return ; / / return from if statement <nl> + } <nl> + } <nl> + } <nl> + public void thisNull ( ) { <nl> + boolean result = ( this = = null ) | | ( null = = this ) ; <nl> + boolean result2 = ( this ! = null ) & & ( null ! = this ) ; <nl> + boolean result3 = ( this . getClass ( ) . getName ( ) = = String . valueOf ( null = = System . getProperty ( " abc " ) ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputUnnecessaryParentheses . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputUnnecessaryParentheses . java <nl> new file mode 100644 <nl> index 0000000 . . af9d001 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputUnnecessaryParentheses . java <nl> @ @ - 0 , 0 + 1 , 94 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + public class InputUnnecessaryParentheses { <nl> + int f1 ( ) { <nl> + int x = 0 ; <nl> + for ( int i = ( 0 + 1 ) ; ( ( i ) < ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { <nl> + x + = ( i + 100 ) ; <nl> + ( x ) + = ( i + 100 / * * comment test * / ) ; <nl> + x = ( x + i + 100 ) ; <nl> + ( x ) = ( x + i + 100 ) ; <nl> + } <nl> + <nl> + for ( int i = ( 0 + 1 ) ; ( i ) < ( ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { <nl> + System . out . println ( " hi " ) ; <nl> + } <nl> + <nl> + return ( 0 ) ; <nl> + } <nl> + <nl> + private int f2 ( int arg1 , double arg2 ) { <nl> + int x , a , b , c , d ; <nl> + String e , f ; <nl> + <nl> + x = 0 ; <nl> + a = 0 ; <nl> + b = 0 ; <nl> + c = ( a + b ) ; <nl> + d = c - 1 ; <nl> + <nl> + int i = ( int ) arg2 ; <nl> + i = ( ( int ) arg2 ) ; <nl> + <nl> + x + = ( i + 100 + arg1 ) ; <nl> + a = ( a + b ) * ( c + d ) ; <nl> + b = ( ( ( ( a + b ) * ( c + d ) ) ) ) ; <nl> + c = ( ( ( a ) < = b ) ) ? 0 : 1 ; <nl> + d = ( a ) + ( b ) * ( 600 ) / ( int ) ( 12 . 5f ) + ( int ) ( arg2 ) ; <nl> + e = ( " this " ) + ( " that " ) + ( " is " + " other " ) ; <nl> + f = ( " this is a really , really long string that should be truncated . " ) ; <nl> + <nl> + return ( x + a + b + d ) ; <nl> + } <nl> + <nl> + private boolean f3 ( ) { <nl> + int x = f2 ( ( 1 ) , ( 13 . 5 ) ) ; <nl> + boolean b = ( true ) ; <nl> + return ( b ) ; <nl> + } <nl> + <nl> + public static int f4 ( int z , int a ) { <nl> + int r = ( z * a ) ; <nl> + r = ( a > z ) ? a : z ; <nl> + r = ( ( a > z ) ? a : z ) ; <nl> + r = ( a > z ) ? a : ( z + z ) ; <nl> + return ( r * r - 1 ) ; <nl> + } <nl> + <nl> + public void f5 ( ) { <nl> + int x , y ; <nl> + x = 0 ; <nl> + y = 0 ; <nl> + if ( x = = y ) { <nl> + print ( x ) ; <nl> + } <nl> + if ( ( x > y ) ) { <nl> + print ( y ) ; <nl> + } <nl> + <nl> + while ( ( x < 10 ) ) { <nl> + print ( x + + ) ; <nl> + } <nl> + <nl> + do { <nl> + print ( ( y + = 100 ) ) ; <nl> + } while ( y < ( 4000 ) ) ; <nl> + } <nl> + <nl> + private void f6 ( TypeA a ) { <nl> + TypeB b = ( TypeB ) a ; <nl> + TypeC c = ( ( TypeC ) a ) ; <nl> + int r = 12345 ; <nl> + r < < = ( 3 ) ; <nl> + TypeParameterized < String > d = ( ( TypeParameterized < String > ) a ) ; <nl> + } <nl> + <nl> + private void print ( int arg ) <nl> + { <nl> + System . out . println ( " arg = " + arg ) ; <nl> + } <nl> + <nl> + static class TypeParameterized < T > { } <nl> + static class TypeA extends TypeParameterized < String > { } <nl> + static class TypeB extends TypeA { } <nl> + static class TypeC extends TypeA { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputReturnFromCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputReturnFromCatchCheck . java <nl> deleted file mode 100644 <nl> index b3708ce . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputReturnFromCatchCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 21 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - public class InputReturnFromCatchCheck { <nl> - public void foo ( ) { <nl> - try { <nl> - System . currentTimeMillis ( ) ; <nl> - } catch ( Exception e ) { <nl> - return ; <nl> - } <nl> - } <nl> - <nl> - public void bar ( ) { <nl> - try { <nl> - System . currentTimeMillis ( ) ; <nl> - } catch ( Exception e ) { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - return ; / / return from if statement <nl> - } <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputReturnFromFinallyCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputReturnFromFinallyCheck . java <nl> deleted file mode 100644 <nl> index e5dd604 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputReturnFromFinallyCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 26 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - public class InputReturnFromFinallyCheck { <nl> - public void foo ( ) { <nl> - try { <nl> - System . currentTimeMillis ( ) ; <nl> - } finally { <nl> - return ; <nl> - } <nl> - } <nl> - <nl> - public void bar ( ) { <nl> - try { <nl> - System . currentTimeMillis ( ) ; <nl> - } finally { <nl> - if ( System . currentTimeMillis ( ) = = 0 ) { <nl> - return ; / / return from if statement <nl> - } <nl> - } <nl> - } <nl> - public void thisNull ( ) { <nl> - boolean result = ( this = = null ) | | ( null = = this ) ; <nl> - boolean result2 = ( this ! = null ) & & ( null ! = this ) ; <nl> - boolean result3 = ( this . getClass ( ) . getName ( ) = = String . valueOf ( null = = System . getProperty ( " abc " ) ) ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputUnnecessaryParentheses . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputUnnecessaryParentheses . java <nl> deleted file mode 100644 <nl> index 2431b50 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputUnnecessaryParentheses . java <nl> + + + / dev / null <nl> @ @ - 1 , 94 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - public class InputUnnecessaryParentheses { <nl> - int f1 ( ) { <nl> - int x = 0 ; <nl> - for ( int i = ( 0 + 1 ) ; ( ( i ) < ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { <nl> - x + = ( i + 100 ) ; <nl> - ( x ) + = ( i + 100 / * * comment test * / ) ; <nl> - x = ( x + i + 100 ) ; <nl> - ( x ) = ( x + i + 100 ) ; <nl> - } <nl> - <nl> - for ( int i = ( 0 + 1 ) ; ( i ) < ( ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { <nl> - System . out . println ( " hi " ) ; <nl> - } <nl> - <nl> - return ( 0 ) ; <nl> - } <nl> - <nl> - private int f2 ( int arg1 , double arg2 ) { <nl> - int x , a , b , c , d ; <nl> - String e , f ; <nl> - <nl> - x = 0 ; <nl> - a = 0 ; <nl> - b = 0 ; <nl> - c = ( a + b ) ; <nl> - d = c - 1 ; <nl> - <nl> - int i = ( int ) arg2 ; <nl> - i = ( ( int ) arg2 ) ; <nl> - <nl> - x + = ( i + 100 + arg1 ) ; <nl> - a = ( a + b ) * ( c + d ) ; <nl> - b = ( ( ( ( a + b ) * ( c + d ) ) ) ) ; <nl> - c = ( ( ( a ) < = b ) ) ? 0 : 1 ; <nl> - d = ( a ) + ( b ) * ( 600 ) / ( int ) ( 12 . 5f ) + ( int ) ( arg2 ) ; <nl> - e = ( " this " ) + ( " that " ) + ( " is " + " other " ) ; <nl> - f = ( " this is a really , really long string that should be truncated . " ) ; <nl> - <nl> - return ( x + a + b + d ) ; <nl> - } <nl> - <nl> - private boolean f3 ( ) { <nl> - int x = f2 ( ( 1 ) , ( 13 . 5 ) ) ; <nl> - boolean b = ( true ) ; <nl> - return ( b ) ; <nl> - } <nl> - <nl> - public static int f4 ( int z , int a ) { <nl> - int r = ( z * a ) ; <nl> - r = ( a > z ) ? a : z ; <nl> - r = ( ( a > z ) ? a : z ) ; <nl> - r = ( a > z ) ? a : ( z + z ) ; <nl> - return ( r * r - 1 ) ; <nl> - } <nl> - <nl> - public void f5 ( ) { <nl> - int x , y ; <nl> - x = 0 ; <nl> - y = 0 ; <nl> - if ( x = = y ) { <nl> - print ( x ) ; <nl> - } <nl> - if ( ( x > y ) ) { <nl> - print ( y ) ; <nl> - } <nl> - <nl> - while ( ( x < 10 ) ) { <nl> - print ( x + + ) ; <nl> - } <nl> - <nl> - do { <nl> - print ( ( y + = 100 ) ) ; <nl> - } while ( y < ( 4000 ) ) ; <nl> - } <nl> - <nl> - private void f6 ( TypeA a ) { <nl> - TypeB b = ( TypeB ) a ; <nl> - TypeC c = ( ( TypeC ) a ) ; <nl> - int r = 12345 ; <nl> - r < < = ( 3 ) ; <nl> - TypeParameterized < String > d = ( ( TypeParameterized < String > ) a ) ; <nl> - } <nl> - <nl> - private void print ( int arg ) <nl> - { <nl> - System . out . println ( " arg = " + arg ) ; <nl> - } <nl> - <nl> - static class TypeParameterized < T > { } <nl> - static class TypeA extends TypeParameterized < String > { } <nl> - static class TypeB extends TypeA { } <nl> - static class TypeC extends TypeA { } <nl> - }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> index 89a41fc . . 2a550da 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> @ @ - 539 , 7 + 539 , 7 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> createChecker ( checkConfig ) ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator <nl> + verify ( checkConfig , getPath ( " checks " + File . separator + " imports " + File . separator <nl> + " InputCustomImportOrder _ OverlappingPatterns . java " ) , expected ) ; <nl> } <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> new file mode 100644 <nl> index 0000000 . . 10b8399 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; <nl> + <nl> + / / every import from javadoc package has comment in brackets indicating presence of keywords <nl> + / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) <nl> + <nl> + / / STANDARD - keyword Check <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) <nl> + <nl> + / / SPECIAL _ IMPORTS - keyword Tag <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) <nl> + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) <nl> + <nl> + import com . puppycrawl . tools . * ; <nl> + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) <nl> + <nl> + public class InputCustomImportOrder _ OverlappingPatterns { <nl> + } <nl> + / * <nl> + test : testRulesOrder _ ThirdBeforeSame ( ) <nl> + configuration : <nl> + checkConfig . addAttribute ( " customImportOrderRules " , <nl> + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; <nl> + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> + * / <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> deleted file mode 100644 <nl> index 10b8399 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> + + + / dev / null <nl> @ @ - 1 , 37 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; <nl> - <nl> - / / every import from javadoc package has comment in brackets indicating presence of keywords <nl> - / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) <nl> - <nl> - / / STANDARD - keyword Check <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) <nl> - <nl> - / / SPECIAL _ IMPORTS - keyword Tag <nl> - <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) <nl> - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) <nl> - <nl> - import com . puppycrawl . tools . * ; <nl> - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) <nl> - import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) <nl> - <nl> - public class InputCustomImportOrder _ OverlappingPatterns { <nl> - } <nl> - / * <nl> - test : testRulesOrder _ ThirdBeforeSame ( ) <nl> - configuration : <nl> - checkConfig . addAttribute ( " customImportOrderRules " , <nl> - " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; <nl> - checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> - * /

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java 
 index 1305e12 . . 933ce1e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java 
 @ @ - 228 , 7 + 228 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " coding " + File . separator + " InputReturnFromCatchCheck . java " ) , 
 + getPath ( " checks " + File . separator + " InputReturnFromCatchCheck . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 247 , 7 + 247 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " coding " + File . separator + " InputReturnFromFinallyCheck . java " ) , 
 + getPath ( " checks " + File . separator + " InputReturnFromFinallyCheck . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 263 , 7 + 263 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { 
 String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 verify ( checkConfig , 
 - getPath ( " coding " + File . separator + " InputReturnFromFinallyCheck . java " ) , 
 + getPath ( " checks " + File . separator + " InputReturnFromFinallyCheck . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 285 , 7 + 285 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " coding " + File . separator + " InputReturnFromFinallyCheck . java " ) , 
 + getPath ( " checks " + File . separator + " InputReturnFromFinallyCheck . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 306 , 7 + 306 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " coding " + File . separator + " InputReturnFromFinallyCheck . java " ) , 
 + getPath ( " checks " + File . separator + " InputReturnFromFinallyCheck . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 329 , 7 + 329 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " coding " + File . separator + " InputReturnFromFinallyCheck . java " ) , 
 + getPath ( " checks " + File . separator + " InputReturnFromFinallyCheck . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 353 , 7 + 353 , 7 @ @ public class DescendantTokenCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " coding " + File . separator + " InputReturnFromFinallyCheck . java " ) , 
 + getPath ( " checks " + File . separator + " InputReturnFromFinallyCheck . java " ) , 
 expected ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 index 1a065ab . . bc3ce5b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalInstantiationCheck . MSG _ KEY ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Assert ; 
 @ @ - 37 , 6 + 38 , 18 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class IllegalInstantiationCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 + @ Override 
 + protected String getNonCompilablePath ( String filename ) throws IOException { 
 + return super . getNonCompilablePath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testIt ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 @ @ - 55 , 7 + 68 , 7 @ @ public class IllegalInstantiationCheckTest 
 " 41 : 18 : " + getCheckMessage ( MSG _ KEY , " java . io . File " ) , 
 " 44 : 21 : " + getCheckMessage ( MSG _ KEY , " java . awt . Color " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " checks / coding / InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 64 , 8 + 77 , 7 @ @ public class IllegalInstantiationCheckTest 
 createCheckConfig ( IllegalInstantiationCheck . class ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , 
 - new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " 
 - + " coding / InputIllegalInstantiationCheckTest2 . java " ) . getCanonicalPath ( ) , 
 + getNonCompilablePath ( " InputIllegalInstantiationCheckTest2 . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 80 , 8 + 92 , 7 @ @ public class IllegalInstantiationCheckTest 
 " 3 : 19 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , 
 } ; 
 verify ( checkConfig , 
 - new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " 
 - + " coding / InputIllegalInstantiationCheckNoPackage . java " ) . getCanonicalPath ( ) , 
 + getNonCompilablePath ( " InputIllegalInstantiationCheckNoPackage . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 97 , 8 + 108 , 7 @ @ public class IllegalInstantiationCheckTest 
 " 11 : 20 : " + getCheckMessage ( MSG _ KEY , " java . lang . String " ) , 
 } ; 
 verify ( checkConfig , 
 - new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " 
 - + " coding / InputIllegalInstantiationCheckLang . java " ) . getCanonicalPath ( ) , 
 + getNonCompilablePath ( " InputIllegalInstantiationCheckLang . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 111 , 8 + 121 , 7 @ @ public class IllegalInstantiationCheckTest 
 " jjva . lang . Boolean , java . lang * Boolean " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , 
 - new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " 
 - + " coding / InputIllegalInstantiationCheckLang . java " ) . getCanonicalPath ( ) , 
 + getNonCompilablePath ( " InputIllegalInstantiationCheckLang . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 146 , 8 + 155 , 7 @ @ public class IllegalInstantiationCheckTest 
 elistAst . setNextSibling ( rparenAst ) ; 
 
 IllegalInstantiationCheck check = new IllegalInstantiationCheck ( ) ; 
 - File inputFile = new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / " 
 - + " coding / InputIllegalInstantiationCheckLang . java " ) ; 
 + File inputFile = new File ( getNonCompilablePath ( " InputIllegalInstantiationCheckLang . java " ) ) ; 
 check . setFileContents ( new FileContents ( new FileText ( inputFile , " UTF - 8 " ) ) ) ; 
 check . configure ( createCheckConfig ( IllegalInstantiationCheck . class ) ) ; 
 check . setMessages ( new LocalizedMessages ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 index 6b37849 . . 3cd5937 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / SuperCloneCheckTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . AbstractSuperCheck . MSG _ KEY ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 31 , 6 + 32 , 18 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class SuperCloneCheckTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 + @ Override 
 + protected String getNonCompilablePath ( String filename ) throws IOException { 
 + return super . getNonCompilablePath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testIt ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 @ @ - 40 , 7 + 53 , 7 @ @ public class SuperCloneCheckTest 
 " 35 : 19 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , 
 " 60 : 48 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " checks / coding / InputClone . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputClone . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 51 , 8 + 64 , 7 @ @ public class SuperCloneCheckTest 
 " 13 : 8 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , 
 " 19 : 8 : " + getCheckMessage ( MSG _ KEY , " clone " , " super . clone " ) , 
 } ; 
 - verify ( checkConfig , new File ( " src / test / resources - noncompilable / com / puppycrawl / tools / " 
 - + " checkstyle / coding / InputSuperCloneCheck . java " ) . getCanonicalPath ( ) , expected ) ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputSuperCloneCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 index d27a184 . . 0764c59 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / UnnecessaryParenthesesCheckTest . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthes 
 import static com . puppycrawl . tools . checkstyle . checks . coding . UnnecessaryParenthesesCheck . MSG _ STRING ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . junit . Assert ; 
 @ @ - 41 , 8 + 42 , 11 @ @ import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 * @ author Eric K . Roe 
 * / 
 public class UnnecessaryParenthesesCheckTest extends BaseCheckTestSupport { 
 - private static final String TEST _ FILE = " coding " + File . separator 
 - + " InputUnnecessaryParentheses . java " ; 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testDefault ( ) throws Exception { 
 @ @ - 96 , 7 + 100 , 7 @ @ public class UnnecessaryParenthesesCheckTest extends BaseCheckTestSupport { 
 " 82 : 39 : " + getCheckMessage ( MSG _ ASSIGN ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( TEST _ FILE ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputUnnecessaryParentheses . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckLang . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckLang . java 
 new file mode 100644 
 index 0000000 . . d3f18b8 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckLang . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package java . lang ; 
 + 
 + class Input { 
 + Boolean obj = new Boolean ( ) ; 
 + Integer obj2 = new Integer ( ) ; 
 + } 
 + 
 + class Boolean { } 
 + 
 + class Input2 { 
 + 	 String a = new String ( ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckNoPackage . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckNoPackage . java 
 new file mode 100644 
 index 0000000 . . c11e162 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckNoPackage . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + / / no package 
 + class Input { 
 + Boolean obj = new Boolean ( ) ; 
 + Integer obj = new Integer ( ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckTest2 . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckTest2 . java 
 new file mode 100644 
 index 0000000 . . daefc14 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationCheckTest2 . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + / / Compilable with Java8 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + import com . sun . corba . se . impl . protocol . giopmsgheaders . Message ; 
 + 
 + public class InputIllegalInstantiationCheckTest2 
 + { 
 + 
 + public static void main ( String [ ] args ) 
 + { 
 + 
 + Supplier < InputMethodReferencesTest2 > supplier = InputMethodReferencesTest2 : : new ; 
 + Supplier < InputMethodReferencesTest2 > suppl = InputMethodReferencesTest2 : : < Integer > new ; 
 + Function < Integer , Message [ ] > messageArrayFactory = Message [ ] : : new ; 
 + 
 + } 
 + 
 + private class Bar < T > 
 + { 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperCloneCheck . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperCloneCheck . java 
 new file mode 100644 
 index 0000000 . . c833584 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputSuperCloneCheck . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + / / Requires Java8 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + interface InputSuperCloneCheck { 
 + void clone ( ) ; 
 + } 
 + 
 + class A { 
 + static { 
 + Runnable a = ( ) - > super . clone ( ) ; 
 + } 
 + 
 + void clone ( ) { 
 + obj . super ( ) ; 
 + } 
 + } 
 + 
 + class B { 
 + void clone ( ) { 
 + ( super ) . clone ( ) ; 
 + } 
 + } 
 + 
 + class C { 
 + void method ( ) { 
 + super ( ) ; 
 + super . clone ( asd , asd ) ; 
 + super . clone ( ) ; 
 + } 
 + } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckLang . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckLang . java 
 deleted file mode 100644 
 index d3f18b8 . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckLang . java 
 + + + / dev / null 
 @ @ - 1 , 12 + 0 , 0 @ @ 
 - package java . lang ; 
 - 
 - class Input { 
 - Boolean obj = new Boolean ( ) ; 
 - Integer obj2 = new Integer ( ) ; 
 - } 
 - 
 - class Boolean { } 
 - 
 - class Input2 { 
 - 	 String a = new String ( ) ; 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckNoPackage . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckNoPackage . java 
 deleted file mode 100644 
 index c11e162 . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckNoPackage . java 
 + + + / dev / null 
 @ @ - 1 , 5 + 0 , 0 @ @ 
 - / / no package 
 - class Input { 
 - Boolean obj = new Boolean ( ) ; 
 - Integer obj = new Integer ( ) ; 
 - } 
 \ No newline at end of file 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckTest2 . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckTest2 . java 
 deleted file mode 100644 
 index 0d9fa7f . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputIllegalInstantiationCheckTest2 . java 
 + + + / dev / null 
 @ @ - 1 , 22 + 0 , 0 @ @ 
 - / / Compilable with Java8 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - import com . sun . corba . se . impl . protocol . giopmsgheaders . Message ; 
 - 
 - public class InputIllegalInstantiationCheckTest2 
 - { 
 - 
 - public static void main ( String [ ] args ) 
 - { 
 - 
 - Supplier < InputMethodReferencesTest2 > supplier = InputMethodReferencesTest2 : : new ; 
 - Supplier < InputMethodReferencesTest2 > suppl = InputMethodReferencesTest2 : : < Integer > new ; 
 - Function < Integer , Message [ ] > messageArrayFactory = Message [ ] : : new ; 
 - 
 - } 
 - 
 - private class Bar < T > 
 - { 
 - 
 - } 
 - } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputSuperCloneCheck . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputSuperCloneCheck . java 
 deleted file mode 100644 
 index e46b7db . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputSuperCloneCheck . java 
 + + + / dev / null 
 @ @ - 1 , 30 + 0 , 0 @ @ 
 - / / Requires Java8 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - interface InputSuperCloneCheck { 
 - void clone ( ) ; 
 - } 
 - 
 - class A { 
 - static { 
 - Runnable a = ( ) - > super . clone ( ) ; 
 - } 
 - 
 - void clone ( ) { 
 - obj . super ( ) ; 
 - } 
 - } 
 - 
 - class B { 
 - void clone ( ) { 
 - ( super ) . clone ( ) ; 
 - } 
 - } 
 - 
 - class C { 
 - void method ( ) { 
 - super ( ) ; 
 - super . clone ( asd , asd ) ; 
 - super . clone ( ) ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputReturnFromCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputReturnFromCatchCheck . java 
 new file mode 100644 
 index 0000000 . . b0149d8 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputReturnFromCatchCheck . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks ; 
 + 
 + public class InputReturnFromCatchCheck { 
 + public void foo ( ) { 
 + try { 
 + System . currentTimeMillis ( ) ; 
 + } catch ( Exception e ) { 
 + return ; 
 + } 
 + } 
 + 
 + public void bar ( ) { 
 + try { 
 + System . currentTimeMillis ( ) ; 
 + } catch ( Exception e ) { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + return ; / / return from if statement 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputReturnFromFinallyCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputReturnFromFinallyCheck . java 
 new file mode 100644 
 index 0000000 . . 085c060 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputReturnFromFinallyCheck . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks ; 
 + 
 + public class InputReturnFromFinallyCheck { 
 + public void foo ( ) { 
 + try { 
 + System . currentTimeMillis ( ) ; 
 + } finally { 
 + return ; 
 + } 
 + } 
 + 
 + public void bar ( ) { 
 + try { 
 + System . currentTimeMillis ( ) ; 
 + } finally { 
 + if ( System . currentTimeMillis ( ) = = 0 ) { 
 + return ; / / return from if statement 
 + } 
 + } 
 + } 
 + public void thisNull ( ) { 
 + boolean result = ( this = = null ) | | ( null = = this ) ; 
 + boolean result2 = ( this ! = null ) & & ( null ! = this ) ; 
 + boolean result3 = ( this . getClass ( ) . getName ( ) = = String . valueOf ( null = = System . getProperty ( " abc " ) ) ) ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputUnnecessaryParentheses . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputUnnecessaryParentheses . java 
 new file mode 100644 
 index 0000000 . . af9d001 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputUnnecessaryParentheses . java 
 @ @ - 0 , 0 + 1 , 94 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + public class InputUnnecessaryParentheses { 
 + int f1 ( ) { 
 + int x = 0 ; 
 + for ( int i = ( 0 + 1 ) ; ( ( i ) < ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { 
 + x + = ( i + 100 ) ; 
 + ( x ) + = ( i + 100 / * * comment test * / ) ; 
 + x = ( x + i + 100 ) ; 
 + ( x ) = ( x + i + 100 ) ; 
 + } 
 + 
 + for ( int i = ( 0 + 1 ) ; ( i ) < ( ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { 
 + System . out . println ( " hi " ) ; 
 + } 
 + 
 + return ( 0 ) ; 
 + } 
 + 
 + private int f2 ( int arg1 , double arg2 ) { 
 + int x , a , b , c , d ; 
 + String e , f ; 
 + 
 + x = 0 ; 
 + a = 0 ; 
 + b = 0 ; 
 + c = ( a + b ) ; 
 + d = c - 1 ; 
 + 
 + int i = ( int ) arg2 ; 
 + i = ( ( int ) arg2 ) ; 
 + 
 + x + = ( i + 100 + arg1 ) ; 
 + a = ( a + b ) * ( c + d ) ; 
 + b = ( ( ( ( a + b ) * ( c + d ) ) ) ) ; 
 + c = ( ( ( a ) < = b ) ) ? 0 : 1 ; 
 + d = ( a ) + ( b ) * ( 600 ) / ( int ) ( 12 . 5f ) + ( int ) ( arg2 ) ; 
 + e = ( " this " ) + ( " that " ) + ( " is " + " other " ) ; 
 + f = ( " this is a really , really long string that should be truncated . " ) ; 
 + 
 + return ( x + a + b + d ) ; 
 + } 
 + 
 + private boolean f3 ( ) { 
 + int x = f2 ( ( 1 ) , ( 13 . 5 ) ) ; 
 + boolean b = ( true ) ; 
 + return ( b ) ; 
 + } 
 + 
 + public static int f4 ( int z , int a ) { 
 + int r = ( z * a ) ; 
 + r = ( a > z ) ? a : z ; 
 + r = ( ( a > z ) ? a : z ) ; 
 + r = ( a > z ) ? a : ( z + z ) ; 
 + return ( r * r - 1 ) ; 
 + } 
 + 
 + public void f5 ( ) { 
 + int x , y ; 
 + x = 0 ; 
 + y = 0 ; 
 + if ( x = = y ) { 
 + print ( x ) ; 
 + } 
 + if ( ( x > y ) ) { 
 + print ( y ) ; 
 + } 
 + 
 + while ( ( x < 10 ) ) { 
 + print ( x + + ) ; 
 + } 
 + 
 + do { 
 + print ( ( y + = 100 ) ) ; 
 + } while ( y < ( 4000 ) ) ; 
 + } 
 + 
 + private void f6 ( TypeA a ) { 
 + TypeB b = ( TypeB ) a ; 
 + TypeC c = ( ( TypeC ) a ) ; 
 + int r = 12345 ; 
 + r < < = ( 3 ) ; 
 + TypeParameterized < String > d = ( ( TypeParameterized < String > ) a ) ; 
 + } 
 + 
 + private void print ( int arg ) 
 + { 
 + System . out . println ( " arg = " + arg ) ; 
 + } 
 + 
 + static class TypeParameterized < T > { } 
 + static class TypeA extends TypeParameterized < String > { } 
 + static class TypeB extends TypeA { } 
 + static class TypeC extends TypeA { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputReturnFromCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputReturnFromCatchCheck . java 
 deleted file mode 100644 
 index b3708ce . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputReturnFromCatchCheck . java 
 + + + / dev / null 
 @ @ - 1 , 21 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - public class InputReturnFromCatchCheck { 
 - public void foo ( ) { 
 - try { 
 - System . currentTimeMillis ( ) ; 
 - } catch ( Exception e ) { 
 - return ; 
 - } 
 - } 
 - 
 - public void bar ( ) { 
 - try { 
 - System . currentTimeMillis ( ) ; 
 - } catch ( Exception e ) { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - return ; / / return from if statement 
 - } 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputReturnFromFinallyCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputReturnFromFinallyCheck . java 
 deleted file mode 100644 
 index e5dd604 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputReturnFromFinallyCheck . java 
 + + + / dev / null 
 @ @ - 1 , 26 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - public class InputReturnFromFinallyCheck { 
 - public void foo ( ) { 
 - try { 
 - System . currentTimeMillis ( ) ; 
 - } finally { 
 - return ; 
 - } 
 - } 
 - 
 - public void bar ( ) { 
 - try { 
 - System . currentTimeMillis ( ) ; 
 - } finally { 
 - if ( System . currentTimeMillis ( ) = = 0 ) { 
 - return ; / / return from if statement 
 - } 
 - } 
 - } 
 - public void thisNull ( ) { 
 - boolean result = ( this = = null ) | | ( null = = this ) ; 
 - boolean result2 = ( this ! = null ) & & ( null ! = this ) ; 
 - boolean result3 = ( this . getClass ( ) . getName ( ) = = String . valueOf ( null = = System . getProperty ( " abc " ) ) ) ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputUnnecessaryParentheses . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputUnnecessaryParentheses . java 
 deleted file mode 100644 
 index 2431b50 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputUnnecessaryParentheses . java 
 + + + / dev / null 
 @ @ - 1 , 94 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - public class InputUnnecessaryParentheses { 
 - int f1 ( ) { 
 - int x = 0 ; 
 - for ( int i = ( 0 + 1 ) ; ( ( i ) < ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { 
 - x + = ( i + 100 ) ; 
 - ( x ) + = ( i + 100 / * * comment test * / ) ; 
 - x = ( x + i + 100 ) ; 
 - ( x ) = ( x + i + 100 ) ; 
 - } 
 - 
 - for ( int i = ( 0 + 1 ) ; ( i ) < ( ( 6 + 6 ) ) ; i + = ( 1 + 0 ) ) { 
 - System . out . println ( " hi " ) ; 
 - } 
 - 
 - return ( 0 ) ; 
 - } 
 - 
 - private int f2 ( int arg1 , double arg2 ) { 
 - int x , a , b , c , d ; 
 - String e , f ; 
 - 
 - x = 0 ; 
 - a = 0 ; 
 - b = 0 ; 
 - c = ( a + b ) ; 
 - d = c - 1 ; 
 - 
 - int i = ( int ) arg2 ; 
 - i = ( ( int ) arg2 ) ; 
 - 
 - x + = ( i + 100 + arg1 ) ; 
 - a = ( a + b ) * ( c + d ) ; 
 - b = ( ( ( ( a + b ) * ( c + d ) ) ) ) ; 
 - c = ( ( ( a ) < = b ) ) ? 0 : 1 ; 
 - d = ( a ) + ( b ) * ( 600 ) / ( int ) ( 12 . 5f ) + ( int ) ( arg2 ) ; 
 - e = ( " this " ) + ( " that " ) + ( " is " + " other " ) ; 
 - f = ( " this is a really , really long string that should be truncated . " ) ; 
 - 
 - return ( x + a + b + d ) ; 
 - } 
 - 
 - private boolean f3 ( ) { 
 - int x = f2 ( ( 1 ) , ( 13 . 5 ) ) ; 
 - boolean b = ( true ) ; 
 - return ( b ) ; 
 - } 
 - 
 - public static int f4 ( int z , int a ) { 
 - int r = ( z * a ) ; 
 - r = ( a > z ) ? a : z ; 
 - r = ( ( a > z ) ? a : z ) ; 
 - r = ( a > z ) ? a : ( z + z ) ; 
 - return ( r * r - 1 ) ; 
 - } 
 - 
 - public void f5 ( ) { 
 - int x , y ; 
 - x = 0 ; 
 - y = 0 ; 
 - if ( x = = y ) { 
 - print ( x ) ; 
 - } 
 - if ( ( x > y ) ) { 
 - print ( y ) ; 
 - } 
 - 
 - while ( ( x < 10 ) ) { 
 - print ( x + + ) ; 
 - } 
 - 
 - do { 
 - print ( ( y + = 100 ) ) ; 
 - } while ( y < ( 4000 ) ) ; 
 - } 
 - 
 - private void f6 ( TypeA a ) { 
 - TypeB b = ( TypeB ) a ; 
 - TypeC c = ( ( TypeC ) a ) ; 
 - int r = 12345 ; 
 - r < < = ( 3 ) ; 
 - TypeParameterized < String > d = ( ( TypeParameterized < String > ) a ) ; 
 - } 
 - 
 - private void print ( int arg ) 
 - { 
 - System . out . println ( " arg = " + arg ) ; 
 - } 
 - 
 - static class TypeParameterized < T > { } 
 - static class TypeA extends TypeParameterized < String > { } 
 - static class TypeB extends TypeA { } 
 - static class TypeC extends TypeA { } 
 - }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 index 89a41fc . . 2a550da 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 @ @ - 539 , 7 + 539 , 7 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 createChecker ( checkConfig ) ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator 
 + verify ( checkConfig , getPath ( " checks " + File . separator + " imports " + File . separator 
 + " InputCustomImportOrder _ OverlappingPatterns . java " ) , expected ) ; 
 } 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 new file mode 100644 
 index 0000000 . . 10b8399 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; 
 + 
 + / / every import from javadoc package has comment in brackets indicating presence of keywords 
 + / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) 
 + 
 + / / STANDARD - keyword Check 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) 
 + 
 + / / SPECIAL _ IMPORTS - keyword Tag 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) 
 + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) 
 + 
 + import com . puppycrawl . tools . * ; 
 + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) 
 + 
 + public class InputCustomImportOrder _ OverlappingPatterns { 
 + } 
 + / * 
 + test : testRulesOrder _ ThirdBeforeSame ( ) 
 + configuration : 
 + checkConfig . addAttribute ( " customImportOrderRules " , 
 + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; 
 + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 + * / 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 deleted file mode 100644 
 index 10b8399 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . imports ; 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; 
 - 
 - / / every import from javadoc package has comment in brackets indicating presence of keywords 
 - / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) 
 - 
 - / / STANDARD - keyword Check 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) 
 - 
 - / / SPECIAL _ IMPORTS - keyword Tag 
 - 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) 
 - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) 
 - 
 - import com . puppycrawl . tools . * ; 
 - / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) 
 - import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) 
 - 
 - public class InputCustomImportOrder _ OverlappingPatterns { 
 - } 
 - / * 
 - test : testRulesOrder _ ThirdBeforeSame ( ) 
 - configuration : 
 - checkConfig . addAttribute ( " customImportOrderRules " , 
 - " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; 
 - checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 - * /
