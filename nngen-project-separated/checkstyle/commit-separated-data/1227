BLEU SCORE: 0.09442944296079735

TEST MSG: Issue # 2950 : rewrote LineWrappingHandler for easier use
GENERATED MSG: Issue # 2795 : fixed handling of tabs in LineWrapping

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> index 4ceed2a . . e9c3958 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> @ @ - 84 , 7 + 84 , 7 @ @ public class LineWrappingHandler { <nl> <nl> / / First node should be removed because it was already checked before . <nl> firstNodesOnLines . remove ( firstNodesOnLines . firstKey ( ) ) ; <nl> - final int firstNodeIndent = getFirstNodeIndent ( firstLineNode ) ; <nl> + final int firstNodeIndent = getLineStart ( firstLineNode ) ; <nl> final int currentIndent = firstNodeIndent + indentLevel ; <nl> <nl> for ( DetailAST node : firstNodesOnLines . values ( ) ) { <nl> @ @ - 100 , 35 + 100 , 6 @ @ public class LineWrappingHandler { <nl> } <nl> <nl> / * * <nl> - * Calculates indentation of first node . <nl> - * <nl> - * @ param node <nl> - * first node . <nl> - * @ return indentation of first node . <nl> - * / <nl> - private int getFirstNodeIndent ( DetailAST node ) { <nl> - final int result ; <nl> - <nl> - if ( node . getType ( ) = = TokenTypes . LITERAL _ IF <nl> - & & node . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ ELSE ) { <nl> - final DetailAST lcurly = node . getParent ( ) . getPreviousSibling ( ) ; <nl> - final DetailAST rcurly = lcurly . getLastChild ( ) ; <nl> - <nl> - if ( lcurly . getType ( ) = = TokenTypes . SLIST <nl> - & & rcurly . getLineNo ( ) = = node . getLineNo ( ) ) { <nl> - result = expandedTabsColumnNo ( rcurly ) ; <nl> - } <nl> - else { <nl> - result = expandedTabsColumnNo ( node . getParent ( ) ) ; <nl> - } <nl> - } <nl> - else { <nl> - result = expandedTabsColumnNo ( node ) ; <nl> - } <nl> - return result ; <nl> - } <nl> - <nl> - / * * <nl> * Finds first nodes on line and puts them into Map . <nl> * <nl> * @ param firstNode First node to start examining . <nl> @ @ - 190 , 7 + 161 , 7 @ @ public class LineWrappingHandler { <nl> * / <nl> private void checkAnnotationIndentation ( DetailAST atNode , <nl> NavigableMap < Integer , DetailAST > firstNodesOnLines , int indentLevel ) { <nl> - final int firstNodeIndent = expandedTabsColumnNo ( atNode ) ; <nl> + final int firstNodeIndent = getLineStart ( atNode ) ; <nl> final int currentIndent = firstNodeIndent + indentLevel ; <nl> final Collection < DetailAST > values = firstNodesOnLines . values ( ) ; <nl> final DetailAST lastAnnotationNode = getLastAnnotationNode ( atNode ) ; <nl> @ @ - 238 , 6 + 209 , 33 @ @ public class LineWrappingHandler { <nl> } <nl> <nl> / * * <nl> + * Get the start of the line for the given expression . <nl> + * <nl> + * @ param ast the expression to find the start of the line for <nl> + * <nl> + * @ return the start of the line for the given expression <nl> + * / <nl> + private int getLineStart ( DetailAST ast ) { <nl> + final String line = indentCheck . getLine ( ast . getLineNo ( ) - 1 ) ; <nl> + return getLineStart ( line ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Get the start of the specified line . <nl> + * <nl> + * @ param line the specified line number <nl> + * <nl> + * @ return the start of the specified line <nl> + * / <nl> + private int getLineStart ( String line ) { <nl> + int index = 0 ; <nl> + while ( Character . isWhitespace ( line . charAt ( index ) ) ) { <nl> + index + + ; <nl> + } <nl> + return CommonUtils . lengthExpandedTabs ( line , index , indentCheck . getIndentationTabWidth ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> * Finds and returns last annotation node . <nl> * @ param atNode first at - clause node . <nl> * @ return last annotation node . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> index 2a2bd8b . . fd91c08 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> @ @ - 1600 , 6 + 1600 , 16 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> verify ( checkConfig , fileName , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testTwoStatementsPerLine ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( IndentationCheck . class ) ; <nl> + checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> + checkConfig . addAttribute ( " basicOffset " , " 4 " ) ; <nl> + final String fileName = getPath ( " InputTwoStatementsPerLine . java " ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verifyWarns ( checkConfig , fileName , expected ) ; <nl> + } <nl> + <nl> private static final class IndentAudit implements AuditListener { <nl> private final IndentComment [ ] comments ; <nl> private int position ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputTwoStatementsPerLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputTwoStatementsPerLine . java <nl> new file mode 100644 <nl> index 0000000 . . 50f659d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputTwoStatementsPerLine . java <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . indentation ; / / indent : 0 exp : 0 <nl> + <nl> + public class InputTwoStatementsPerLine { / / indent : 0 exp : 0 <nl> + int var6 = 5 ; int var7 = 6 , / / indent : 4 exp : 4 <nl> + var8 = 5 ; / / indent : 8 exp : 8 <nl> + <nl> + public void method ( ) { / / indent : 4 exp : 4 <nl> + long _ lined _ label : if ( true / / indent : 8 exp : 8 <nl> + & & true ) { } / / indent : 12 exp : 12 <nl> + } / / indent : 4 exp : 4 <nl> + / * package - private * / static final void / / indent : 4 exp : 4 <nl> + method2 ( ) { } / / indent : 8 exp : 8 <nl> + } / / indent : 0 exp : 0
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 2f2455a . . ef6d8aa 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 200 , 7 + 200 , 7 @ @ <nl> < tools . jar . version > 1 . 7 . 0 < / tools . jar . version > <nl> < tools . jar . path > $ { java . home } / . . / lib / tools . jar < / tools . jar . path > <nl> < java . version > 1 . 7 < / java . version > <nl> - < checkstyle . version > 6 . 13 < / checkstyle . version > <nl> + < checkstyle . version > 6 . 14 . 1 < / checkstyle . version > <nl> < / properties > <nl> <nl> < ! - - that repositories are required for testing plugin ' s snapshot version - - >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 index 4ceed2a . . e9c3958 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 @ @ - 84 , 7 + 84 , 7 @ @ public class LineWrappingHandler { 
 
 / / First node should be removed because it was already checked before . 
 firstNodesOnLines . remove ( firstNodesOnLines . firstKey ( ) ) ; 
 - final int firstNodeIndent = getFirstNodeIndent ( firstLineNode ) ; 
 + final int firstNodeIndent = getLineStart ( firstLineNode ) ; 
 final int currentIndent = firstNodeIndent + indentLevel ; 
 
 for ( DetailAST node : firstNodesOnLines . values ( ) ) { 
 @ @ - 100 , 35 + 100 , 6 @ @ public class LineWrappingHandler { 
 } 
 
 / * * 
 - * Calculates indentation of first node . 
 - * 
 - * @ param node 
 - * first node . 
 - * @ return indentation of first node . 
 - * / 
 - private int getFirstNodeIndent ( DetailAST node ) { 
 - final int result ; 
 - 
 - if ( node . getType ( ) = = TokenTypes . LITERAL _ IF 
 - & & node . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ ELSE ) { 
 - final DetailAST lcurly = node . getParent ( ) . getPreviousSibling ( ) ; 
 - final DetailAST rcurly = lcurly . getLastChild ( ) ; 
 - 
 - if ( lcurly . getType ( ) = = TokenTypes . SLIST 
 - & & rcurly . getLineNo ( ) = = node . getLineNo ( ) ) { 
 - result = expandedTabsColumnNo ( rcurly ) ; 
 - } 
 - else { 
 - result = expandedTabsColumnNo ( node . getParent ( ) ) ; 
 - } 
 - } 
 - else { 
 - result = expandedTabsColumnNo ( node ) ; 
 - } 
 - return result ; 
 - } 
 - 
 - / * * 
 * Finds first nodes on line and puts them into Map . 
 * 
 * @ param firstNode First node to start examining . 
 @ @ - 190 , 7 + 161 , 7 @ @ public class LineWrappingHandler { 
 * / 
 private void checkAnnotationIndentation ( DetailAST atNode , 
 NavigableMap < Integer , DetailAST > firstNodesOnLines , int indentLevel ) { 
 - final int firstNodeIndent = expandedTabsColumnNo ( atNode ) ; 
 + final int firstNodeIndent = getLineStart ( atNode ) ; 
 final int currentIndent = firstNodeIndent + indentLevel ; 
 final Collection < DetailAST > values = firstNodesOnLines . values ( ) ; 
 final DetailAST lastAnnotationNode = getLastAnnotationNode ( atNode ) ; 
 @ @ - 238 , 6 + 209 , 33 @ @ public class LineWrappingHandler { 
 } 
 
 / * * 
 + * Get the start of the line for the given expression . 
 + * 
 + * @ param ast the expression to find the start of the line for 
 + * 
 + * @ return the start of the line for the given expression 
 + * / 
 + private int getLineStart ( DetailAST ast ) { 
 + final String line = indentCheck . getLine ( ast . getLineNo ( ) - 1 ) ; 
 + return getLineStart ( line ) ; 
 + } 
 + 
 + / * * 
 + * Get the start of the specified line . 
 + * 
 + * @ param line the specified line number 
 + * 
 + * @ return the start of the specified line 
 + * / 
 + private int getLineStart ( String line ) { 
 + int index = 0 ; 
 + while ( Character . isWhitespace ( line . charAt ( index ) ) ) { 
 + index + + ; 
 + } 
 + return CommonUtils . lengthExpandedTabs ( line , index , indentCheck . getIndentationTabWidth ( ) ) ; 
 + } 
 + 
 + / * * 
 * Finds and returns last annotation node . 
 * @ param atNode first at - clause node . 
 * @ return last annotation node . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 index 2a2bd8b . . fd91c08 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 @ @ - 1600 , 6 + 1600 , 16 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 verify ( checkConfig , fileName , expected ) ; 
 } 
 
 + @ Test 
 + public void testTwoStatementsPerLine ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( IndentationCheck . class ) ; 
 + checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 + checkConfig . addAttribute ( " basicOffset " , " 4 " ) ; 
 + final String fileName = getPath ( " InputTwoStatementsPerLine . java " ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verifyWarns ( checkConfig , fileName , expected ) ; 
 + } 
 + 
 private static final class IndentAudit implements AuditListener { 
 private final IndentComment [ ] comments ; 
 private int position ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputTwoStatementsPerLine . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputTwoStatementsPerLine . java 
 new file mode 100644 
 index 0000000 . . 50f659d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputTwoStatementsPerLine . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . indentation ; / / indent : 0 exp : 0 
 + 
 + public class InputTwoStatementsPerLine { / / indent : 0 exp : 0 
 + int var6 = 5 ; int var7 = 6 , / / indent : 4 exp : 4 
 + var8 = 5 ; / / indent : 8 exp : 8 
 + 
 + public void method ( ) { / / indent : 4 exp : 4 
 + long _ lined _ label : if ( true / / indent : 8 exp : 8 
 + & & true ) { } / / indent : 12 exp : 12 
 + } / / indent : 4 exp : 4 
 + / * package - private * / static final void / / indent : 4 exp : 4 
 + method2 ( ) { } / / indent : 8 exp : 8 
 + } / / indent : 0 exp : 0

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 2f2455a . . ef6d8aa 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 200 , 7 + 200 , 7 @ @ 
 < tools . jar . version > 1 . 7 . 0 < / tools . jar . version > 
 < tools . jar . path > $ { java . home } / . . / lib / tools . jar < / tools . jar . path > 
 < java . version > 1 . 7 < / java . version > 
 - < checkstyle . version > 6 . 13 < / checkstyle . version > 
 + < checkstyle . version > 6 . 14 . 1 < / checkstyle . version > 
 < / properties > 
 
 < ! - - that repositories are required for testing plugin ' s snapshot version - - >
