BLEU SCORE: 0.3161487584488943

TEST MSG: Issue # 3323 : fixed redundant modifier violations on try - with - resources
GENERATED MSG: Issue # 1555 : Use try - with - resources in test code

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> index 9788672 . . a939b07 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> @ @ - 129 , 7 + 129 , 7 @ @ public class BaseCheckTestSupport { <nl> / / process each of the lines <nl> final ByteArrayInputStream inputStream = <nl> new ByteArrayInputStream ( stream . toByteArray ( ) ) ; <nl> - try ( final LineNumberReader lnr = new LineNumberReader ( <nl> + try ( LineNumberReader lnr = new LineNumberReader ( <nl> new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ) ) { <nl> <nl> int previousLineNumber = 0 ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> index c3b3ebf . . 134feef 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java <nl> @ @ - 153 , 7 + 153 , 7 @ @ public class BaseCheckTestSupport { <nl> / / process each of the lines <nl> final ByteArrayInputStream inputStream = <nl> new ByteArrayInputStream ( stream . toByteArray ( ) ) ; <nl> - try ( final LineNumberReader lnr = new LineNumberReader ( <nl> + try ( LineNumberReader lnr = new LineNumberReader ( <nl> new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ) ) { <nl> <nl> for ( int i = 0 ; i < expected . length ; i + + ) { <nl> @ @ - 227 , 7 + 227 , 7 @ @ public class BaseCheckTestSupport { <nl> final ByteArrayInputStream inputStream = <nl> new ByteArrayInputStream ( stream . toByteArray ( ) ) ; <nl> <nl> - try ( final LineNumberReader lnr = new LineNumberReader ( <nl> + try ( LineNumberReader lnr = new LineNumberReader ( <nl> new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ) ) { <nl> <nl> final Map < String , List < String > > actualViolations = new HashMap < > ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index b587bd1 . . 1a33836 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 54 , 7 + 54 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( ConstantNameCheck . class ) ; <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> - try ( final Writer writer = new BufferedWriter ( <nl> + try ( Writer writer = new BufferedWriter ( <nl> new OutputStreamWriter ( new FileOutputStream ( file ) , StandardCharsets . UTF _ 8 ) ) ) { <nl> final String content = " public class Main { public static final int k = 5 + 4 ; } " ; <nl> writer . write ( content ) ; <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( ConstantNameCheck . class ) ; <nl> final File file = temporaryFolder . newFile ( " file . pdf " ) ; <nl> - try ( final BufferedWriter writer = new BufferedWriter ( <nl> + try ( BufferedWriter writer = new BufferedWriter ( <nl> new OutputStreamWriter ( new FileOutputStream ( file ) , StandardCharsets . UTF _ 8 ) ) ) { <nl> final String content = " public class Main { public static final int k = 5 + 4 ; } " ; <nl> writer . write ( content ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> index a27ff2c . . 63a3889 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> @ @ - 224 , 7 + 224 , 7 @ @ public class XMLLoggerTest { <nl> final ByteArrayInputStream inStream = <nl> new ByteArrayInputStream ( bytes ) ; <nl> final List < String > lineList = Lists . newArrayList ( ) ; <nl> - try ( final BufferedReader reader = new BufferedReader ( <nl> + try ( BufferedReader reader = new BufferedReader ( <nl> new InputStreamReader ( inStream , StandardCharsets . UTF _ 8 ) ) ) { <nl> while ( true ) { <nl> final String line = reader . readLine ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java <nl> index 3d00b7c . . 29cf659 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java <nl> @ @ - 215 , 7 + 215 , 7 @ @ public class WriteTagCheckTest extends BaseCheckTestSupport { <nl> / / process each of the lines <nl> final ByteArrayInputStream localStream = <nl> new ByteArrayInputStream ( stream . toByteArray ( ) ) ; <nl> - try ( final LineNumberReader lnr = new LineNumberReader ( <nl> + try ( LineNumberReader lnr = new LineNumberReader ( <nl> new InputStreamReader ( localStream , StandardCharsets . UTF _ 8 ) ) ) { <nl> <nl> for ( int i = 0 ; i < expected . length ; i + + ) {
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> index dd8ba69 . . b167699 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java <nl> @ @ - 73 , 6 + 73 , 10 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> * will be ok . <nl> * < / p > <nl> * < p > <nl> + * < b > validateAbstractClassNames < / b > - controls whether to validate abstract class names . <nl> + * Default value is < b > false < / b > <nl> + * < / p > <nl> + * < p > <nl> * < b > ignoredMethodNames < / b > - Methods that should not be checked . <nl> * < / p > <nl> * < p > <nl> @ @ - 139 , 6 + 143 , 11 @ @ public final class IllegalTypeCheck extends AbstractFormatCheck { <nl> / * * Check methods and fields with only corresponding modifiers . * / <nl> private List < Integer > memberModifiers ; <nl> <nl> + / * * <nl> + * Controls whether to validate abstract class names . <nl> + * / <nl> + private boolean validateAbstractClassNames ; <nl> + <nl> / * * Creates new instance of the check . * / <nl> public IllegalTypeCheck ( ) { <nl> super ( DEFAULT _ FORMAT ) ; <nl> @ @ - 147 , 6 + 156 , 14 @ @ public final class IllegalTypeCheck extends AbstractFormatCheck { <nl> setIgnoredMethodNames ( DEFAULT _ IGNORED _ METHOD _ NAMES ) ; <nl> } <nl> <nl> + / * * <nl> + * Sets whether to validate abstract class names . <nl> + * @ param validateAbstractClassNames whether abstract class names must be ignored . <nl> + * / <nl> + public void setValidateAbstractClassNames ( boolean validateAbstractClassNames ) { <nl> + this . validateAbstractClassNames = validateAbstractClassNames ; <nl> + } <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> return getAcceptableTokens ( ) ; <nl> @ @ - 305 , 7 + 322 , 8 @ @ public final class IllegalTypeCheck extends AbstractFormatCheck { <nl> final String shortName = className . substring ( className . lastIndexOf ( ' . ' ) + 1 ) ; <nl> return illegalClassNames . contains ( className ) <nl> | | illegalClassNames . contains ( shortName ) <nl> - | | ! legalAbstractClassNames . contains ( className ) <nl> + | | validateAbstractClassNames <nl> + & & ! legalAbstractClassNames . contains ( className ) <nl> & & getRegexp ( ) . matcher ( className ) . find ( ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> index 56e5e61 . . b140dc8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java <nl> @ @ - 41 , 10 + 41 , 29 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testValidateAbstractClassNamesSetToTrue ( ) throws Exception { <nl> + checkConfig . addAttribute ( " validateAbstractClassNames " , " true " ) ; <nl> + String [ ] expected = { <nl> + " 27 : 5 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , <nl> + " 29 : 37 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , <nl> + " 33 : 12 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalTypeAbstractClassNames . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testValidateAbstractClassNamesSetToFalse ( ) throws Exception { <nl> + checkConfig . addAttribute ( " validateAbstractClassNames " , " false " ) ; <nl> + String [ ] expected = { <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalTypeAbstractClassNames . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testDefaults ( ) throws Exception { <nl> String [ ] expected = { <nl> - " 6 : 13 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , <nl> - " 9 : 13 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . coding . InputIllegalType . AbstractClass " ) , <nl> " 16 : 13 : " + getCheckMessage ( MSG _ KEY , " java . util . TreeSet " ) , <nl> " 17 : 13 : " + getCheckMessage ( MSG _ KEY , " TreeSet " ) , <nl> } ; <nl> @ @ - 55 , 7 + 74 , 7 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testIgnoreMethodNames ( ) throws Exception { <nl> checkConfig . addAttribute ( " ignoredMethodNames " , " table2 " ) ; <nl> - <nl> + checkConfig . addAttribute ( " validateAbstractClassNames " , " true " ) ; <nl> String [ ] expected = { <nl> " 6 : 13 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , <nl> " 9 : 13 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . coding . InputIllegalType . AbstractClass " ) , <nl> @ @ - 79 , 6 + 98 , 7 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { <nl> <nl> @ Test <nl> public void testLegalAbstractClassNames ( ) throws Exception { <nl> + checkConfig . addAttribute ( " validateAbstractClassNames " , " true " ) ; <nl> checkConfig . addAttribute ( " legalAbstractClassNames " , " AbstractClass " ) ; <nl> <nl> String [ ] expected = { <nl> @ @ - 147 , 6 + 167 , 7 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { <nl> <nl> @ Test <nl> public void testMemberModifiers ( ) throws Exception { <nl> + checkConfig . addAttribute ( " validateAbstractClassNames " , " true " ) ; <nl> checkConfig . addAttribute ( " memberModifiers " , " LITERAL _ PRIVATE , LITERAL _ PROTECTED , " <nl> + " LITERAL _ STATIC " ) ; <nl> String [ ] expected = { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalTypeAbstractClassNames . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalTypeAbstractClassNames . java <nl> new file mode 100644 <nl> index 0000000 . . 8e907b4 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalTypeAbstractClassNames . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + package com . puppycrawl . tools . checkstyle . coding ; <nl> + <nl> + public class InputIllegalTypeAbstractClassNames { <nl> + <nl> + abstract class AbstractClass { <nl> + abstract String getClassInfo ( ) ; <nl> + abstract boolean isPerfectClass ( ) ; <nl> + } <nl> + <nl> + class MyNonAbstractClass extends AbstractClass { <nl> + <nl> + boolean perfect = true ; <nl> + <nl> + private MyNonAbstractClass ( ) { } <nl> + <nl> + @ Override <nl> + String getClassInfo ( ) { <nl> + return " This is my non abstract class . " ; <nl> + } <nl> + <nl> + @ Override <nl> + boolean isPerfectClass ( ) { <nl> + return perfect ; <nl> + } <nl> + } <nl> + <nl> + AbstractClass a = new MyNonAbstractClass ( ) ; <nl> + <nl> + public String getInnerClassInfo ( AbstractClass clazz ) { <nl> + return clazz . getClassInfo ( ) ; <nl> + } <nl> + <nl> + public AbstractClass newInnerClassInstance ( ) { <nl> + return new MyNonAbstractClass ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 6b370e8 . . 3792701 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 1963 , 6 + 1963 , 12 @ @ if ( & quot ; something & quot ; . equals ( x ) ) <nl> < / td > <nl> < / tr > <nl> < tr > <nl> + < td > validateAbstractClassNames < / td > <nl> + < td > Whether to validate abstract class names < / td > <nl> + < td > boolean < / td > <nl> + < td > false < / td > <nl> + < / tr > <nl> + < tr > <nl> < td > illegalClassNames < / td > <nl> < td > Classes that should not be used as types in variable <nl> declarations , return values or parameters < / td >

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 index 9788672 . . a939b07 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 @ @ - 129 , 7 + 129 , 7 @ @ public class BaseCheckTestSupport { 
 / / process each of the lines 
 final ByteArrayInputStream inputStream = 
 new ByteArrayInputStream ( stream . toByteArray ( ) ) ; 
 - try ( final LineNumberReader lnr = new LineNumberReader ( 
 + try ( LineNumberReader lnr = new LineNumberReader ( 
 new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ) ) { 
 
 int previousLineNumber = 0 ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 index c3b3ebf . . 134feef 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / BaseCheckTestSupport . java 
 @ @ - 153 , 7 + 153 , 7 @ @ public class BaseCheckTestSupport { 
 / / process each of the lines 
 final ByteArrayInputStream inputStream = 
 new ByteArrayInputStream ( stream . toByteArray ( ) ) ; 
 - try ( final LineNumberReader lnr = new LineNumberReader ( 
 + try ( LineNumberReader lnr = new LineNumberReader ( 
 new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ) ) { 
 
 for ( int i = 0 ; i < expected . length ; i + + ) { 
 @ @ - 227 , 7 + 227 , 7 @ @ public class BaseCheckTestSupport { 
 final ByteArrayInputStream inputStream = 
 new ByteArrayInputStream ( stream . toByteArray ( ) ) ; 
 
 - try ( final LineNumberReader lnr = new LineNumberReader ( 
 + try ( LineNumberReader lnr = new LineNumberReader ( 
 new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ) ) { 
 
 final Map < String , List < String > > actualViolations = new HashMap < > ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index b587bd1 . . 1a33836 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 54 , 7 + 54 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( ConstantNameCheck . class ) ; 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 - try ( final Writer writer = new BufferedWriter ( 
 + try ( Writer writer = new BufferedWriter ( 
 new OutputStreamWriter ( new FileOutputStream ( file ) , StandardCharsets . UTF _ 8 ) ) ) { 
 final String content = " public class Main { public static final int k = 5 + 4 ; } " ; 
 writer . write ( content ) ; 
 @ @ - 70 , 7 + 70 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( ConstantNameCheck . class ) ; 
 final File file = temporaryFolder . newFile ( " file . pdf " ) ; 
 - try ( final BufferedWriter writer = new BufferedWriter ( 
 + try ( BufferedWriter writer = new BufferedWriter ( 
 new OutputStreamWriter ( new FileOutputStream ( file ) , StandardCharsets . UTF _ 8 ) ) ) { 
 final String content = " public class Main { public static final int k = 5 + 4 ; } " ; 
 writer . write ( content ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 index a27ff2c . . 63a3889 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 @ @ - 224 , 7 + 224 , 7 @ @ public class XMLLoggerTest { 
 final ByteArrayInputStream inStream = 
 new ByteArrayInputStream ( bytes ) ; 
 final List < String > lineList = Lists . newArrayList ( ) ; 
 - try ( final BufferedReader reader = new BufferedReader ( 
 + try ( BufferedReader reader = new BufferedReader ( 
 new InputStreamReader ( inStream , StandardCharsets . UTF _ 8 ) ) ) { 
 while ( true ) { 
 final String line = reader . readLine ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java 
 index 3d00b7c . . 29cf659 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / WriteTagCheckTest . java 
 @ @ - 215 , 7 + 215 , 7 @ @ public class WriteTagCheckTest extends BaseCheckTestSupport { 
 / / process each of the lines 
 final ByteArrayInputStream localStream = 
 new ByteArrayInputStream ( stream . toByteArray ( ) ) ; 
 - try ( final LineNumberReader lnr = new LineNumberReader ( 
 + try ( LineNumberReader lnr = new LineNumberReader ( 
 new InputStreamReader ( localStream , StandardCharsets . UTF _ 8 ) ) ) { 
 
 for ( int i = 0 ; i < expected . length ; i + + ) {

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 index dd8ba69 . . b167699 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheck . java 
 @ @ - 73 , 6 + 73 , 10 @ @ import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 * will be ok . 
 * < / p > 
 * < p > 
 + * < b > validateAbstractClassNames < / b > - controls whether to validate abstract class names . 
 + * Default value is < b > false < / b > 
 + * < / p > 
 + * < p > 
 * < b > ignoredMethodNames < / b > - Methods that should not be checked . 
 * < / p > 
 * < p > 
 @ @ - 139 , 6 + 143 , 11 @ @ public final class IllegalTypeCheck extends AbstractFormatCheck { 
 / * * Check methods and fields with only corresponding modifiers . * / 
 private List < Integer > memberModifiers ; 
 
 + / * * 
 + * Controls whether to validate abstract class names . 
 + * / 
 + private boolean validateAbstractClassNames ; 
 + 
 / * * Creates new instance of the check . * / 
 public IllegalTypeCheck ( ) { 
 super ( DEFAULT _ FORMAT ) ; 
 @ @ - 147 , 6 + 156 , 14 @ @ public final class IllegalTypeCheck extends AbstractFormatCheck { 
 setIgnoredMethodNames ( DEFAULT _ IGNORED _ METHOD _ NAMES ) ; 
 } 
 
 + / * * 
 + * Sets whether to validate abstract class names . 
 + * @ param validateAbstractClassNames whether abstract class names must be ignored . 
 + * / 
 + public void setValidateAbstractClassNames ( boolean validateAbstractClassNames ) { 
 + this . validateAbstractClassNames = validateAbstractClassNames ; 
 + } 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 return getAcceptableTokens ( ) ; 
 @ @ - 305 , 7 + 322 , 8 @ @ public final class IllegalTypeCheck extends AbstractFormatCheck { 
 final String shortName = className . substring ( className . lastIndexOf ( ' . ' ) + 1 ) ; 
 return illegalClassNames . contains ( className ) 
 | | illegalClassNames . contains ( shortName ) 
 - | | ! legalAbstractClassNames . contains ( className ) 
 + | | validateAbstractClassNames 
 + & & ! legalAbstractClassNames . contains ( className ) 
 & & getRegexp ( ) . matcher ( className ) . find ( ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 index 56e5e61 . . b140dc8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalTypeCheckTest . java 
 @ @ - 41 , 10 + 41 , 29 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public void testValidateAbstractClassNamesSetToTrue ( ) throws Exception { 
 + checkConfig . addAttribute ( " validateAbstractClassNames " , " true " ) ; 
 + String [ ] expected = { 
 + " 27 : 5 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , 
 + " 29 : 37 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , 
 + " 33 : 12 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalTypeAbstractClassNames . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testValidateAbstractClassNamesSetToFalse ( ) throws Exception { 
 + checkConfig . addAttribute ( " validateAbstractClassNames " , " false " ) ; 
 + String [ ] expected = { 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalTypeAbstractClassNames . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testDefaults ( ) throws Exception { 
 String [ ] expected = { 
 - " 6 : 13 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , 
 - " 9 : 13 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . coding . InputIllegalType . AbstractClass " ) , 
 " 16 : 13 : " + getCheckMessage ( MSG _ KEY , " java . util . TreeSet " ) , 
 " 17 : 13 : " + getCheckMessage ( MSG _ KEY , " TreeSet " ) , 
 } ; 
 @ @ - 55 , 7 + 74 , 7 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { 
 @ Test 
 public void testIgnoreMethodNames ( ) throws Exception { 
 checkConfig . addAttribute ( " ignoredMethodNames " , " table2 " ) ; 
 - 
 + checkConfig . addAttribute ( " validateAbstractClassNames " , " true " ) ; 
 String [ ] expected = { 
 " 6 : 13 : " + getCheckMessage ( MSG _ KEY , " AbstractClass " ) , 
 " 9 : 13 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . coding . InputIllegalType . AbstractClass " ) , 
 @ @ - 79 , 6 + 98 , 7 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { 
 
 @ Test 
 public void testLegalAbstractClassNames ( ) throws Exception { 
 + checkConfig . addAttribute ( " validateAbstractClassNames " , " true " ) ; 
 checkConfig . addAttribute ( " legalAbstractClassNames " , " AbstractClass " ) ; 
 
 String [ ] expected = { 
 @ @ - 147 , 6 + 167 , 7 @ @ public class IllegalTypeCheckTest extends BaseCheckTestSupport { 
 
 @ Test 
 public void testMemberModifiers ( ) throws Exception { 
 + checkConfig . addAttribute ( " validateAbstractClassNames " , " true " ) ; 
 checkConfig . addAttribute ( " memberModifiers " , " LITERAL _ PRIVATE , LITERAL _ PROTECTED , " 
 + " LITERAL _ STATIC " ) ; 
 String [ ] expected = { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalTypeAbstractClassNames . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalTypeAbstractClassNames . java 
 new file mode 100644 
 index 0000000 . . 8e907b4 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalTypeAbstractClassNames . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + package com . puppycrawl . tools . checkstyle . coding ; 
 + 
 + public class InputIllegalTypeAbstractClassNames { 
 + 
 + abstract class AbstractClass { 
 + abstract String getClassInfo ( ) ; 
 + abstract boolean isPerfectClass ( ) ; 
 + } 
 + 
 + class MyNonAbstractClass extends AbstractClass { 
 + 
 + boolean perfect = true ; 
 + 
 + private MyNonAbstractClass ( ) { } 
 + 
 + @ Override 
 + String getClassInfo ( ) { 
 + return " This is my non abstract class . " ; 
 + } 
 + 
 + @ Override 
 + boolean isPerfectClass ( ) { 
 + return perfect ; 
 + } 
 + } 
 + 
 + AbstractClass a = new MyNonAbstractClass ( ) ; 
 + 
 + public String getInnerClassInfo ( AbstractClass clazz ) { 
 + return clazz . getClassInfo ( ) ; 
 + } 
 + 
 + public AbstractClass newInnerClassInstance ( ) { 
 + return new MyNonAbstractClass ( ) ; 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 6b370e8 . . 3792701 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 1963 , 6 + 1963 , 12 @ @ if ( & quot ; something & quot ; . equals ( x ) ) 
 < / td > 
 < / tr > 
 < tr > 
 + < td > validateAbstractClassNames < / td > 
 + < td > Whether to validate abstract class names < / td > 
 + < td > boolean < / td > 
 + < td > false < / td > 
 + < / tr > 
 + < tr > 
 < td > illegalClassNames < / td > 
 < td > Classes that should not be used as types in variable 
 declarations , return values or parameters < / td >
