BLEU SCORE: 0.4393983107600289

TEST MSG: [ maven - release - plugin ] prepare for next development iteration
GENERATED MSG: [ maven - release - plugin ] prepare release checkstyle - 7 . 8 . 2

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 30b1f3b . . 3a3934f 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 22 , 7 + 22 , 7 @ @ <nl> <nl> < groupId > com . puppycrawl . tools < / groupId > <nl> < artifactId > checkstyle < / artifactId > <nl> - < version > 7 . 8 . 2 < / version > <nl> + < version > 7 . 8 . 3 - SNAPSHOT < / version > <nl> < packaging > jar < / packaging > <nl> <nl> < name > checkstyle < / name >
NEAREST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java <nl> index eda011d . . 8ad8b7a 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java <nl> @ @ - 90 , 7 + 90 , 7 @ @ public class OneStatementPerLineTest extends BaseCheckTestSupport { <nl> <nl> final Configuration checkConfig = getCheckConfig ( " OneStatementPerLine " ) ; <nl> final String filePath = new File ( " src / test / resources - noncompilable / " <nl> - + " com / puppycrawl / tools / checkstyle / checks / coding / " <nl> + + " com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / " <nl> + " InputOneStatementPerLine . java " ) . getCanonicalPath ( ) ; <nl> <nl> final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> index e9bb121 . . 9f06100 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> @ @ - 42 , 7 + 42 , 9 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getNonCompilablePath ( String filename ) throws IOException { <nl> return super . getNonCompilablePath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator <nl> + + " onestatementperline " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java <nl> deleted file mode 100644 <nl> index 891bd2e . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java <nl> + + + / dev / null <nl> @ @ - 1 , 62 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - / * * <nl> - * This file contains test inputs for InputOneStatementPerLine <nl> - * which cause compilation problem in Eclipse 4 . 2 . 2 but still <nl> - * must be tested . <nl> - * / <nl> - <nl> - / * * <nl> - * Two import statements and one ' empty ' statement <nl> - * which are not on the same line are legal . <nl> - * / <nl> - import java . awt . event . ActionEvent ; <nl> - import java . lang . annotation . Annotation ; <nl> - ; / / non - compilable by eclipse <nl> - import java . lang . String ; <nl> - import java . lang . Integer ; <nl> - import java . util . LinkedList ; <nl> - import java . util . List ; <nl> - import java . util . concurrent . Callable ; <nl> - import java . util . stream . Collectors ; <nl> - <nl> - import javax . swing . JCheckBox ; <nl> - <nl> - public class InputOneStatementPerLine { <nl> - / * * <nl> - * According to java language specifications , <nl> - * statements end with ' ; ' . That is why ' ; ; ' <nl> - * may be considered as two empty statements on the same line <nl> - * and rises violation . <nl> - * / <nl> - ; ; / / warn <nl> - static { <nl> - new JCheckBox ( ) . addActionListener ( ( final ActionEvent e ) - > { good ( ) ; } ) ; <nl> - List < Integer > ints = new LinkedList < Integer > ( ) ; <nl> - ints . stream ( ) . map ( t - > { return t * 2 ; } ) . filter ( t - > { return false ; } ) ; <nl> - ints . stream ( ) . map ( t - > { int m = t * 2 ; return m ; } ) ; / / warn <nl> - ints . stream ( ) . map ( t - > { int m = t * 2 ; return m ; } ) ; int i = 3 ; / / warn <nl> - ints . stream ( ) . map ( t - > t * 2 ) ; int k = 4 ; / / warn <nl> - ints . stream ( ) . map ( t - > t * 2 ) ; <nl> - List < Integer > ints2 = new LinkedList < Integer > ( ) ; <nl> - ints . stream ( ) . map ( t - > { return ints2 . stream ( ) . map ( w - > { return w * 2 ; } ) ; } ) ; <nl> - ints . stream ( ) . map ( t - > { return ints2 . stream ( ) . map ( w - > { int m = w * 2 ; return m ; } ) ; } ) ; / / warn <nl> - ints . stream ( ) . map ( t - > { <nl> - return ints2 . stream ( ) . map ( <nl> - w - > { <nl> - int m = w * 2 ; <nl> - return m ; <nl> - } ) ; <nl> - } ) ; <nl> - ints . stream ( ) . map ( t - > { <nl> - int l = 0 ; <nl> - for ( int j = 0 ; j < 10 ; j + + ) { <nl> - l = j + l ; <nl> - } <nl> - return l ; <nl> - } ) ; <nl> - } <nl> - <nl> - private static void good ( ) { <nl> - } <nl> - } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLine . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLine . java <nl> new file mode 100644 <nl> index 0000000 . . 2ab9c78 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLine . java <nl> @ @ - 0 , 0 + 1 , 62 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . onestatementperline ; <nl> + <nl> + / * * <nl> + * This file contains test inputs for InputOneStatementPerLine <nl> + * which cause compilation problem in Eclipse 4 . 2 . 2 but still <nl> + * must be tested . <nl> + * / <nl> + <nl> + / * * <nl> + * Two import statements and one ' empty ' statement <nl> + * which are not on the same line are legal . <nl> + * / <nl> + import java . awt . event . ActionEvent ; <nl> + import java . lang . annotation . Annotation ; <nl> + ; / / non - compilable by eclipse <nl> + import java . lang . String ; <nl> + import java . lang . Integer ; <nl> + import java . util . LinkedList ; <nl> + import java . util . List ; <nl> + import java . util . concurrent . Callable ; <nl> + import java . util . stream . Collectors ; <nl> + <nl> + import javax . swing . JCheckBox ; <nl> + <nl> + public class InputOneStatementPerLine { <nl> + / * * <nl> + * According to java language specifications , <nl> + * statements end with ' ; ' . That is why ' ; ; ' <nl> + * may be considered as two empty statements on the same line <nl> + * and rises violation . <nl> + * / <nl> + ; ; / / warn <nl> + static { <nl> + new JCheckBox ( ) . addActionListener ( ( final ActionEvent e ) - > { good ( ) ; } ) ; <nl> + List < Integer > ints = new LinkedList < Integer > ( ) ; <nl> + ints . stream ( ) . map ( t - > { return t * 2 ; } ) . filter ( t - > { return false ; } ) ; <nl> + ints . stream ( ) . map ( t - > { int m = t * 2 ; return m ; } ) ; / / warn <nl> + ints . stream ( ) . map ( t - > { int m = t * 2 ; return m ; } ) ; int i = 3 ; / / warn <nl> + ints . stream ( ) . map ( t - > t * 2 ) ; int k = 4 ; / / warn <nl> + ints . stream ( ) . map ( t - > t * 2 ) ; <nl> + List < Integer > ints2 = new LinkedList < Integer > ( ) ; <nl> + ints . stream ( ) . map ( t - > { return ints2 . stream ( ) . map ( w - > { return w * 2 ; } ) ; } ) ; <nl> + ints . stream ( ) . map ( t - > { return ints2 . stream ( ) . map ( w - > { int m = w * 2 ; return m ; } ) ; } ) ; / / warn <nl> + ints . stream ( ) . map ( t - > { <nl> + return ints2 . stream ( ) . map ( <nl> + w - > { <nl> + int m = w * 2 ; <nl> + return m ; <nl> + } ) ; <nl> + } ) ; <nl> + ints . stream ( ) . map ( t - > { <nl> + int l = 0 ; <nl> + for ( int j = 0 ; j < 10 ; j + + ) { <nl> + l = j + l ; <nl> + } <nl> + return l ; <nl> + } ) ; <nl> + } <nl> + <nl> + private static void good ( ) { <nl> + } <nl> + }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 30b1f3b . . 3a3934f 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 22 , 7 + 22 , 7 @ @ 
 
 < groupId > com . puppycrawl . tools < / groupId > 
 < artifactId > checkstyle < / artifactId > 
 - < version > 7 . 8 . 2 < / version > 
 + < version > 7 . 8 . 3 - SNAPSHOT < / version > 
 < packaging > jar < / packaging > 
 
 < name > checkstyle < / name >

NEAREST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java 
 index eda011d . . 8ad8b7a 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java 
 @ @ - 90 , 7 + 90 , 7 @ @ public class OneStatementPerLineTest extends BaseCheckTestSupport { 
 
 final Configuration checkConfig = getCheckConfig ( " OneStatementPerLine " ) ; 
 final String filePath = new File ( " src / test / resources - noncompilable / " 
 - + " com / puppycrawl / tools / checkstyle / checks / coding / " 
 + + " com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / " 
 + " InputOneStatementPerLine . java " ) . getCanonicalPath ( ) ; 
 
 final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 index e9bb121 . . 9f06100 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 @ @ - 42 , 7 + 42 , 9 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getNonCompilablePath ( String filename ) throws IOException { 
 return super . getNonCompilablePath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator 
 + + " onestatementperline " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java 
 deleted file mode 100644 
 index 891bd2e . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java 
 + + + / dev / null 
 @ @ - 1 , 62 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - / * * 
 - * This file contains test inputs for InputOneStatementPerLine 
 - * which cause compilation problem in Eclipse 4 . 2 . 2 but still 
 - * must be tested . 
 - * / 
 - 
 - / * * 
 - * Two import statements and one ' empty ' statement 
 - * which are not on the same line are legal . 
 - * / 
 - import java . awt . event . ActionEvent ; 
 - import java . lang . annotation . Annotation ; 
 - ; / / non - compilable by eclipse 
 - import java . lang . String ; 
 - import java . lang . Integer ; 
 - import java . util . LinkedList ; 
 - import java . util . List ; 
 - import java . util . concurrent . Callable ; 
 - import java . util . stream . Collectors ; 
 - 
 - import javax . swing . JCheckBox ; 
 - 
 - public class InputOneStatementPerLine { 
 - / * * 
 - * According to java language specifications , 
 - * statements end with ' ; ' . That is why ' ; ; ' 
 - * may be considered as two empty statements on the same line 
 - * and rises violation . 
 - * / 
 - ; ; / / warn 
 - static { 
 - new JCheckBox ( ) . addActionListener ( ( final ActionEvent e ) - > { good ( ) ; } ) ; 
 - List < Integer > ints = new LinkedList < Integer > ( ) ; 
 - ints . stream ( ) . map ( t - > { return t * 2 ; } ) . filter ( t - > { return false ; } ) ; 
 - ints . stream ( ) . map ( t - > { int m = t * 2 ; return m ; } ) ; / / warn 
 - ints . stream ( ) . map ( t - > { int m = t * 2 ; return m ; } ) ; int i = 3 ; / / warn 
 - ints . stream ( ) . map ( t - > t * 2 ) ; int k = 4 ; / / warn 
 - ints . stream ( ) . map ( t - > t * 2 ) ; 
 - List < Integer > ints2 = new LinkedList < Integer > ( ) ; 
 - ints . stream ( ) . map ( t - > { return ints2 . stream ( ) . map ( w - > { return w * 2 ; } ) ; } ) ; 
 - ints . stream ( ) . map ( t - > { return ints2 . stream ( ) . map ( w - > { int m = w * 2 ; return m ; } ) ; } ) ; / / warn 
 - ints . stream ( ) . map ( t - > { 
 - return ints2 . stream ( ) . map ( 
 - w - > { 
 - int m = w * 2 ; 
 - return m ; 
 - } ) ; 
 - } ) ; 
 - ints . stream ( ) . map ( t - > { 
 - int l = 0 ; 
 - for ( int j = 0 ; j < 10 ; j + + ) { 
 - l = j + l ; 
 - } 
 - return l ; 
 - } ) ; 
 - } 
 - 
 - private static void good ( ) { 
 - } 
 - } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLine . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLine . java 
 new file mode 100644 
 index 0000000 . . 2ab9c78 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / onestatementperline / InputOneStatementPerLine . java 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . onestatementperline ; 
 + 
 + / * * 
 + * This file contains test inputs for InputOneStatementPerLine 
 + * which cause compilation problem in Eclipse 4 . 2 . 2 but still 
 + * must be tested . 
 + * / 
 + 
 + / * * 
 + * Two import statements and one ' empty ' statement 
 + * which are not on the same line are legal . 
 + * / 
 + import java . awt . event . ActionEvent ; 
 + import java . lang . annotation . Annotation ; 
 + ; / / non - compilable by eclipse 
 + import java . lang . String ; 
 + import java . lang . Integer ; 
 + import java . util . LinkedList ; 
 + import java . util . List ; 
 + import java . util . concurrent . Callable ; 
 + import java . util . stream . Collectors ; 
 + 
 + import javax . swing . JCheckBox ; 
 + 
 + public class InputOneStatementPerLine { 
 + / * * 
 + * According to java language specifications , 
 + * statements end with ' ; ' . That is why ' ; ; ' 
 + * may be considered as two empty statements on the same line 
 + * and rises violation . 
 + * / 
 + ; ; / / warn 
 + static { 
 + new JCheckBox ( ) . addActionListener ( ( final ActionEvent e ) - > { good ( ) ; } ) ; 
 + List < Integer > ints = new LinkedList < Integer > ( ) ; 
 + ints . stream ( ) . map ( t - > { return t * 2 ; } ) . filter ( t - > { return false ; } ) ; 
 + ints . stream ( ) . map ( t - > { int m = t * 2 ; return m ; } ) ; / / warn 
 + ints . stream ( ) . map ( t - > { int m = t * 2 ; return m ; } ) ; int i = 3 ; / / warn 
 + ints . stream ( ) . map ( t - > t * 2 ) ; int k = 4 ; / / warn 
 + ints . stream ( ) . map ( t - > t * 2 ) ; 
 + List < Integer > ints2 = new LinkedList < Integer > ( ) ; 
 + ints . stream ( ) . map ( t - > { return ints2 . stream ( ) . map ( w - > { return w * 2 ; } ) ; } ) ; 
 + ints . stream ( ) . map ( t - > { return ints2 . stream ( ) . map ( w - > { int m = w * 2 ; return m ; } ) ; } ) ; / / warn 
 + ints . stream ( ) . map ( t - > { 
 + return ints2 . stream ( ) . map ( 
 + w - > { 
 + int m = w * 2 ; 
 + return m ; 
 + } ) ; 
 + } ) ; 
 + ints . stream ( ) . map ( t - > { 
 + int l = 0 ; 
 + for ( int j = 0 ; j < 10 ; j + + ) { 
 + l = j + l ; 
 + } 
 + return l ; 
 + } ) ; 
 + } 
 + 
 + private static void good ( ) { 
 + } 
 + }
