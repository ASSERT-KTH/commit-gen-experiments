BLEU SCORE: 0.024455939372403628

TEST MSG: Issue # 4400 : increase coverage of pitest - checkstyle - common profile to 84 %
GENERATED MSG: Added removeListener ( ) and removeFilter ( ) to Checker ( bug 834367 )

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 73f20f7 . . d20f4a2 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1950 , 7 + 1950 , 11 @ @ <nl> < param > com . puppycrawl . tools . checkstyle . ant . * < / param > <nl> < param > com . puppycrawl . tools . checkstyle . doclets . * < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 78 < / mutationThreshold > <nl> + < excludedMethods > <nl> + < ! - - till https : / / github . com / hcoles / pitest / issues / 353 - - > <nl> + < param > fillShortToFullModuleNamesMap < / param > <nl> + < / excludedMethods > <nl> + < mutationThreshold > 84 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 6188d52 . . 9ab60b6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . Checker . EXCEPTION _ MSG ; <nl> import static org . hamcrest . CoreMatchers . instanceOf ; <nl> + import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotNull ; <nl> @ @ - 35 , 9 + 36 , 12 @ @ import java . io . FileInputStream ; <nl> import java . io . IOError ; <nl> import java . io . IOException ; <nl> import java . io . UnsupportedEncodingException ; <nl> + import java . lang . reflect . Field ; <nl> import java . lang . reflect . Method ; <nl> import java . nio . file . Files ; <nl> import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> import java . util . Locale ; <nl> @ @ - 49 , 6 + 53 , 7 @ @ import java . util . TreeSet ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . rules . TemporaryFolder ; <nl> + import org . mockito . internal . util . reflection . Whitebox ; <nl> import org . powermock . api . mockito . PowerMockito ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> @ @ - 56 , 10 + 61 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . api . Context ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . ExternalResourceHolder ; <nl> import com . puppycrawl . tools . checkstyle . api . Filter ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> + import com . puppycrawl . tools . checkstyle . api . MessageDispatcher ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . checks . TranslationCheck ; <nl> import com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck ; <nl> @ @ - 71 , 14 + 78 , 6 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> @ Rule <nl> public final TemporaryFolder temporaryFolder = new TemporaryFolder ( ) ; <nl> <nl> - private static Method getAcceptFileStarted ( ) throws NoSuchMethodException { <nl> - final Class < Checker > checkerClass = Checker . class ; <nl> - final Method acceptFileStarted = checkerClass . getDeclaredMethod ( " acceptFileStarted " , <nl> - String . class ) ; <nl> - acceptFileStarted . setAccessible ( true ) ; <nl> - return acceptFileStarted ; <nl> - } <nl> - <nl> private static Method getFireAuditFinished ( ) throws NoSuchMethodException { <nl> final Class < Checker > checkerClass = Checker . class ; <nl> final Method fireAuditFinished = checkerClass . getDeclaredMethod ( " fireAuditFinished " ) ; <nl> @ @ - 100 , 16 + 99 , 13 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> checker . addListener ( auditAdapter ) ; <nl> final DebugFilter filter = new DebugFilter ( ) ; <nl> checker . addFilter ( filter ) ; <nl> + final TestBeforeExecutionFileFilter fileFilter = new TestBeforeExecutionFileFilter ( ) ; <nl> + checker . addBeforeExecutionFileFilter ( fileFilter ) ; <nl> <nl> / / should remove al listeners and filters <nl> checker . destroy ( ) ; <nl> <nl> - / / Let ' s try fire some events <nl> - getFireAuditStartedMethod ( ) . invoke ( checker ) ; <nl> - getFireAuditFinished ( ) . invoke ( checker ) ; <nl> - checker . fireFileStarted ( " Some File Name " ) ; <nl> - checker . fireFileFinished ( " Some File Name " ) ; <nl> - <nl> + checker . process ( Collections . singletonList ( new File ( " Some File Name " ) ) ) ; <nl> final SortedSet < LocalizedMessage > messages = new TreeSet < > ( ) ; <nl> messages . add ( new LocalizedMessage ( 0 , 0 , " a Bundle " , " message . key " , <nl> new Object [ ] { " arg " } , null , getClass ( ) , null ) ) ; <nl> @ @ - 117 , 6 + 113 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> <nl> assertFalse ( " Checker . destroy ( ) doesn ' t remove listeners . " , auditAdapter . wasCalled ( ) ) ; <nl> assertFalse ( " Checker . destroy ( ) doesn ' t remove filters . " , filter . wasCalled ( ) ) ; <nl> + assertFalse ( " Checker . destroy ( ) doesn ' t remove file filters . " , fileFilter . wasCalled ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 200 , 7 + 197 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> checker . addBeforeExecutionFileFilter ( filter ) ; <nl> <nl> filter . resetFilter ( ) ; <nl> - getAcceptFileStarted ( ) . invoke ( checker , " Test . java " ) ; <nl> + checker . process ( Collections . singletonList ( new File ( " dummy . java " ) ) ) ; <nl> assertTrue ( " Checker . acceptFileStarted ( ) doesn ' t call filter " , filter . wasCalled ( ) ) ; <nl> } <nl> <nl> @ @ - 214 , 7 + 211 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> checker . removeBeforeExecutionFileFilter ( filter ) ; <nl> <nl> f2 . resetFilter ( ) ; <nl> - getAcceptFileStarted ( ) . invoke ( checker , " Test . java " ) ; <nl> + checker . process ( Collections . singletonList ( new File ( " dummy . java " ) ) ) ; <nl> assertTrue ( " Checker . acceptFileStarted ( ) doesn ' t call filter " , f2 . wasCalled ( ) ) ; <nl> assertFalse ( " Checker . acceptFileStarted ( ) does call removed filter " , filter . wasCalled ( ) ) ; <nl> } <nl> @ @ - 362 , 12 + 359 , 26 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testFinishLocalSetupFullyInitialized ( ) throws Exception { <nl> final Checker checker = new Checker ( ) ; <nl> - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + final ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; <nl> + checker . setModuleClassLoader ( contextClassLoader ) ; <nl> final PackageObjectFactory factory = new PackageObjectFactory ( <nl> - new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + new HashSet < > ( ) , contextClassLoader ) ; <nl> checker . setModuleFactory ( factory ) ; <nl> - <nl> + checker . setBasedir ( " testBaseDir " ) ; <nl> + checker . setLocaleLanguage ( " it " ) ; <nl> + checker . setLocaleCountry ( " IT " ) ; <nl> checker . finishLocalSetup ( ) ; <nl> + <nl> + final Context context = ( Context ) Whitebox . getInternalState ( checker , " childContext " ) ; <nl> + assertEquals ( System . getProperty ( " file . encoding " , " UTF - 8 " ) , context . get ( " charset " ) ) ; <nl> + assertEquals ( contextClassLoader , context . get ( " classLoader " ) ) ; <nl> + assertEquals ( " error " , context . get ( " severity " ) ) ; <nl> + assertEquals ( " testBaseDir " , context . get ( " basedir " ) ) ; <nl> + <nl> + final Field sLocale = LocalizedMessage . class . getDeclaredField ( " sLocale " ) ; <nl> + sLocale . setAccessible ( true ) ; <nl> + final Locale locale = ( Locale ) sLocale . get ( null ) ; <nl> + assertEquals ( Locale . ITALY , locale ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 543 , 7 + 554 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testClearCacheWhenCacheFileIsNotSet ( ) { <nl> / / The idea of the test is to check that when cache file is not set , <nl> - / / the invokation of clearCache method does not throw an exception . <nl> + / / the invocation of clearCache method does not throw an exception . <nl> final Checker checker = new Checker ( ) ; <nl> checker . clearCache ( ) ; <nl> } <nl> @ @ - 776 , 6 + 787 , 89 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> verify ( checker , filePath , filePath , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testCheckerProcessCallAllNeededMethodsOfFileSets ( ) throws Exception { <nl> + final DummyFileSet fileSet = new DummyFileSet ( ) ; <nl> + final Checker checker = new Checker ( ) ; <nl> + checker . addFileSetCheck ( fileSet ) ; <nl> + checker . process ( Collections . singletonList ( new File ( " dummy . java " ) ) ) ; <nl> + final List < String > expected = <nl> + Arrays . asList ( " beginProcessing " , " finishProcessing " , " destroy " ) ; <nl> + assertArrayEquals ( expected . toArray ( ) , fileSet . getMethodCalls ( ) . toArray ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSetFileSetCheckSetsMessageDispatcher ( ) throws Exception { <nl> + final DummyFileSet fileSet = new DummyFileSet ( ) ; <nl> + final Checker checker = new Checker ( ) ; <nl> + checker . addFileSetCheck ( fileSet ) ; <nl> + assertEquals ( checker , fileSet . getInternalMessageDispatcher ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAddAuditListenerAsChild ( ) throws Exception { <nl> + final Checker checker = new Checker ( ) ; <nl> + final DebugAuditAdapter auditAdapter = new DebugAuditAdapter ( ) ; <nl> + final PackageObjectFactory factory = new PackageObjectFactory ( <nl> + new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) { <nl> + @ Override <nl> + public Object createModule ( String name ) throws CheckstyleException { <nl> + Object adapter = auditAdapter ; <nl> + if ( ! name . equals ( DebugAuditAdapter . class . getName ( ) ) ) { <nl> + adapter = super . createModule ( name ) ; <nl> + } <nl> + return adapter ; <nl> + } <nl> + } ; <nl> + checker . setModuleFactory ( factory ) ; <nl> + checker . setupChild ( createCheckConfig ( DebugAuditAdapter . class ) ) ; <nl> + / / Let ' s try fire some events <nl> + checker . process ( Collections . singletonList ( new File ( " dummy . java " ) ) ) ; <nl> + assertTrue ( " Checker . fireAuditStarted ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAddBeforeExecutionFileFilterAsChild ( ) throws Exception { <nl> + final Checker checker = new Checker ( ) ; <nl> + final TestBeforeExecutionFileFilter fileFilter = new TestBeforeExecutionFileFilter ( ) ; <nl> + final PackageObjectFactory factory = new PackageObjectFactory ( <nl> + new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) { <nl> + @ Override <nl> + public Object createModule ( String name ) throws CheckstyleException { <nl> + Object filter = fileFilter ; <nl> + if ( ! name . equals ( TestBeforeExecutionFileFilter . class . getName ( ) ) ) { <nl> + filter = super . createModule ( name ) ; <nl> + } <nl> + return filter ; <nl> + } <nl> + } ; <nl> + checker . setModuleFactory ( factory ) ; <nl> + checker . setupChild ( createCheckConfig ( TestBeforeExecutionFileFilter . class ) ) ; <nl> + checker . process ( Collections . singletonList ( new File ( " dummy . java " ) ) ) ; <nl> + assertTrue ( " Checker . acceptFileStarted ( ) doesn ' t call listener " , fileFilter . wasCalled ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testFileSetCheckInitWhenAddedAsChild ( ) throws Exception { <nl> + final Checker checker = new Checker ( ) ; <nl> + final DummyFileSet fileSet = new DummyFileSet ( ) ; <nl> + final PackageObjectFactory factory = new PackageObjectFactory ( <nl> + new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) { <nl> + @ Override <nl> + public Object createModule ( String name ) throws CheckstyleException { <nl> + Object check = fileSet ; <nl> + if ( ! name . equals ( DummyFileSet . class . getName ( ) ) ) { <nl> + check = super . createModule ( name ) ; <nl> + } <nl> + return check ; <nl> + } <nl> + } ; <nl> + checker . setModuleFactory ( factory ) ; <nl> + checker . finishLocalSetup ( ) ; <nl> + checker . setupChild ( createCheckConfig ( DummyFileSet . class ) ) ; <nl> + assertTrue ( " FileSetCheck . init ( ) wasn ' t called " , fileSet . isInitCalled ( ) ) ; <nl> + } <nl> + <nl> private static class DummyFilter implements Filter { <nl> <nl> @ Override <nl> @ @ - 960 , 4 + 1054 , 52 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> throw new IndexOutOfBoundsException ( " test " ) ; <nl> } <nl> } <nl> + <nl> + private static class DummyFileSet extends AbstractFileSetCheck { <nl> + <nl> + private final List < String > methodCalls = new ArrayList < > ( ) ; <nl> + <nl> + private boolean initCalled ; <nl> + <nl> + @ Override <nl> + public void init ( ) { <nl> + super . init ( ) ; <nl> + initCalled = true ; <nl> + } <nl> + <nl> + @ Override <nl> + public void beginProcessing ( String charset ) { <nl> + methodCalls . add ( " beginProcessing " ) ; <nl> + super . beginProcessing ( charset ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void finishProcessing ( ) { <nl> + methodCalls . add ( " finishProcessing " ) ; <nl> + super . finishProcessing ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { <nl> + methodCalls . add ( " processFiltered " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void destroy ( ) { <nl> + methodCalls . add ( " destroy " ) ; <nl> + super . destroy ( ) ; <nl> + } <nl> + <nl> + public List < String > getMethodCalls ( ) { <nl> + return Collections . unmodifiableList ( methodCalls ) ; <nl> + } <nl> + <nl> + public boolean isInitCalled ( ) { <nl> + return initCalled ; <nl> + } <nl> + <nl> + public MessageDispatcher getInternalMessageDispatcher ( ) { <nl> + return getMessageDispatcher ( ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> index c3684fe . . db67504 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java <nl> @ @ - 241 , 39 + 241 , 7 @ @ public class CheckStyleTask <nl> / / Create the checker <nl> Checker c = null ; <nl> try { <nl> - try { <nl> - final Properties props = createOverridingProperties ( ) ; <nl> - final Configuration config = <nl> - ConfigurationLoader . loadConfiguration ( <nl> - mConfigLocation , new PropertiesExpander ( props ) ) ; <nl> - <nl> - final DefaultContext context = new DefaultContext ( ) ; <nl> - final ClassLoader loader = <nl> - new AntClassLoader ( getProject ( ) , mClasspath ) ; <nl> - context . add ( " classloader " , loader ) ; <nl> - <nl> - c = new Checker ( ) ; <nl> - <nl> - / / load the set of package names <nl> - if ( mPackageNamesFile ! = null ) { <nl> - final ModuleFactory moduleFactory = <nl> - PackageNamesLoader . loadModuleFactory ( <nl> - mPackageNamesFile . getAbsolutePath ( ) ) ; <nl> - c . setModuleFactory ( moduleFactory ) ; <nl> - } <nl> - c . contextualize ( context ) ; <nl> - c . configure ( config ) ; <nl> - <nl> - / / setup the listeners <nl> - final AuditListener [ ] listeners = getListeners ( ) ; <nl> - for ( int i = 0 ; i < listeners . length ; i + + ) { <nl> - c . addListener ( listeners [ i ] ) ; <nl> - } <nl> - } <nl> - catch ( Exception e ) { <nl> - throw new BuildException ( <nl> - " Unable to create a Checker : " + e . getMessage ( ) , e ) ; <nl> - } <nl> + c = createChecker ( ) ; <nl> <nl> / / Process the files <nl> final File [ ] files = scanFileSets ( ) ; <nl> @ @ - 297 , 6 + 265 , 49 @ @ public class CheckStyleTask <nl> } <nl> <nl> / * * <nl> + * Creates new instance of < code > Checker < / code > . <nl> + * @ return new instance of < code > Checker < / code > <nl> + * / <nl> + private Checker createChecker ( ) <nl> + { <nl> + Checker c = null ; <nl> + try { <nl> + final Properties props = createOverridingProperties ( ) ; <nl> + final Configuration config = <nl> + ConfigurationLoader . loadConfiguration ( <nl> + mConfigLocation , new PropertiesExpander ( props ) ) ; <nl> + <nl> + final DefaultContext context = new DefaultContext ( ) ; <nl> + final ClassLoader loader = <nl> + new AntClassLoader ( getProject ( ) , mClasspath ) ; <nl> + context . add ( " classloader " , loader ) ; <nl> + <nl> + c = new Checker ( ) ; <nl> + <nl> + / / load the set of package names <nl> + if ( mPackageNamesFile ! = null ) { <nl> + final ModuleFactory moduleFactory = <nl> + PackageNamesLoader . loadModuleFactory ( <nl> + mPackageNamesFile . getAbsolutePath ( ) ) ; <nl> + c . setModuleFactory ( moduleFactory ) ; <nl> + } <nl> + c . contextualize ( context ) ; <nl> + c . configure ( config ) ; <nl> + <nl> + / / setup the listeners <nl> + final AuditListener [ ] listeners = getListeners ( ) ; <nl> + for ( int i = 0 ; i < listeners . length ; i + + ) { <nl> + c . addListener ( listeners [ i ] ) ; <nl> + } <nl> + } <nl> + catch ( Exception e ) { <nl> + throw new BuildException ( <nl> + " Unable to create a Checker : " + e . getMessage ( ) , e ) ; <nl> + } <nl> + <nl> + return c ; <nl> + } <nl> + / * * <nl> * Create the Properties object based on the arguments specified <nl> * to the ANT task . <nl> * @ return the properties for property expansion expansion

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 73f20f7 . . d20f4a2 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1950 , 7 + 1950 , 11 @ @ 
 < param > com . puppycrawl . tools . checkstyle . ant . * < / param > 
 < param > com . puppycrawl . tools . checkstyle . doclets . * < / param > 
 < / targetTests > 
 - < mutationThreshold > 78 < / mutationThreshold > 
 + < excludedMethods > 
 + < ! - - till https : / / github . com / hcoles / pitest / issues / 353 - - > 
 + < param > fillShortToFullModuleNamesMap < / param > 
 + < / excludedMethods > 
 + < mutationThreshold > 84 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 6188d52 . . 9ab60b6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle ; 
 
 import static com . puppycrawl . tools . checkstyle . Checker . EXCEPTION _ MSG ; 
 import static org . hamcrest . CoreMatchers . instanceOf ; 
 + import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotNull ; 
 @ @ - 35 , 9 + 36 , 12 @ @ import java . io . FileInputStream ; 
 import java . io . IOError ; 
 import java . io . IOException ; 
 import java . io . UnsupportedEncodingException ; 
 + import java . lang . reflect . Field ; 
 import java . lang . reflect . Method ; 
 import java . nio . file . Files ; 
 import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 + import java . util . Collections ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 import java . util . Locale ; 
 @ @ - 49 , 6 + 53 , 7 @ @ import java . util . TreeSet ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . rules . TemporaryFolder ; 
 + import org . mockito . internal . util . reflection . Whitebox ; 
 import org . powermock . api . mockito . PowerMockito ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 @ @ - 56 , 10 + 61 , 12 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . api . Context ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . ExternalResourceHolder ; 
 import com . puppycrawl . tools . checkstyle . api . Filter ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 + import com . puppycrawl . tools . checkstyle . api . MessageDispatcher ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . checks . TranslationCheck ; 
 import com . puppycrawl . tools . checkstyle . checks . coding . HiddenFieldCheck ; 
 @ @ - 71 , 14 + 78 , 6 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 @ Rule 
 public final TemporaryFolder temporaryFolder = new TemporaryFolder ( ) ; 
 
 - private static Method getAcceptFileStarted ( ) throws NoSuchMethodException { 
 - final Class < Checker > checkerClass = Checker . class ; 
 - final Method acceptFileStarted = checkerClass . getDeclaredMethod ( " acceptFileStarted " , 
 - String . class ) ; 
 - acceptFileStarted . setAccessible ( true ) ; 
 - return acceptFileStarted ; 
 - } 
 - 
 private static Method getFireAuditFinished ( ) throws NoSuchMethodException { 
 final Class < Checker > checkerClass = Checker . class ; 
 final Method fireAuditFinished = checkerClass . getDeclaredMethod ( " fireAuditFinished " ) ; 
 @ @ - 100 , 16 + 99 , 13 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 checker . addListener ( auditAdapter ) ; 
 final DebugFilter filter = new DebugFilter ( ) ; 
 checker . addFilter ( filter ) ; 
 + final TestBeforeExecutionFileFilter fileFilter = new TestBeforeExecutionFileFilter ( ) ; 
 + checker . addBeforeExecutionFileFilter ( fileFilter ) ; 
 
 / / should remove al listeners and filters 
 checker . destroy ( ) ; 
 
 - / / Let ' s try fire some events 
 - getFireAuditStartedMethod ( ) . invoke ( checker ) ; 
 - getFireAuditFinished ( ) . invoke ( checker ) ; 
 - checker . fireFileStarted ( " Some File Name " ) ; 
 - checker . fireFileFinished ( " Some File Name " ) ; 
 - 
 + checker . process ( Collections . singletonList ( new File ( " Some File Name " ) ) ) ; 
 final SortedSet < LocalizedMessage > messages = new TreeSet < > ( ) ; 
 messages . add ( new LocalizedMessage ( 0 , 0 , " a Bundle " , " message . key " , 
 new Object [ ] { " arg " } , null , getClass ( ) , null ) ) ; 
 @ @ - 117 , 6 + 113 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 
 assertFalse ( " Checker . destroy ( ) doesn ' t remove listeners . " , auditAdapter . wasCalled ( ) ) ; 
 assertFalse ( " Checker . destroy ( ) doesn ' t remove filters . " , filter . wasCalled ( ) ) ; 
 + assertFalse ( " Checker . destroy ( ) doesn ' t remove file filters . " , fileFilter . wasCalled ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 200 , 7 + 197 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 checker . addBeforeExecutionFileFilter ( filter ) ; 
 
 filter . resetFilter ( ) ; 
 - getAcceptFileStarted ( ) . invoke ( checker , " Test . java " ) ; 
 + checker . process ( Collections . singletonList ( new File ( " dummy . java " ) ) ) ; 
 assertTrue ( " Checker . acceptFileStarted ( ) doesn ' t call filter " , filter . wasCalled ( ) ) ; 
 } 
 
 @ @ - 214 , 7 + 211 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 checker . removeBeforeExecutionFileFilter ( filter ) ; 
 
 f2 . resetFilter ( ) ; 
 - getAcceptFileStarted ( ) . invoke ( checker , " Test . java " ) ; 
 + checker . process ( Collections . singletonList ( new File ( " dummy . java " ) ) ) ; 
 assertTrue ( " Checker . acceptFileStarted ( ) doesn ' t call filter " , f2 . wasCalled ( ) ) ; 
 assertFalse ( " Checker . acceptFileStarted ( ) does call removed filter " , filter . wasCalled ( ) ) ; 
 } 
 @ @ - 362 , 12 + 359 , 26 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 @ Test 
 public void testFinishLocalSetupFullyInitialized ( ) throws Exception { 
 final Checker checker = new Checker ( ) ; 
 - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + final ClassLoader contextClassLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; 
 + checker . setModuleClassLoader ( contextClassLoader ) ; 
 final PackageObjectFactory factory = new PackageObjectFactory ( 
 - new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + new HashSet < > ( ) , contextClassLoader ) ; 
 checker . setModuleFactory ( factory ) ; 
 - 
 + checker . setBasedir ( " testBaseDir " ) ; 
 + checker . setLocaleLanguage ( " it " ) ; 
 + checker . setLocaleCountry ( " IT " ) ; 
 checker . finishLocalSetup ( ) ; 
 + 
 + final Context context = ( Context ) Whitebox . getInternalState ( checker , " childContext " ) ; 
 + assertEquals ( System . getProperty ( " file . encoding " , " UTF - 8 " ) , context . get ( " charset " ) ) ; 
 + assertEquals ( contextClassLoader , context . get ( " classLoader " ) ) ; 
 + assertEquals ( " error " , context . get ( " severity " ) ) ; 
 + assertEquals ( " testBaseDir " , context . get ( " basedir " ) ) ; 
 + 
 + final Field sLocale = LocalizedMessage . class . getDeclaredField ( " sLocale " ) ; 
 + sLocale . setAccessible ( true ) ; 
 + final Locale locale = ( Locale ) sLocale . get ( null ) ; 
 + assertEquals ( Locale . ITALY , locale ) ; 
 } 
 
 @ Test 
 @ @ - 543 , 7 + 554 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 @ Test 
 public void testClearCacheWhenCacheFileIsNotSet ( ) { 
 / / The idea of the test is to check that when cache file is not set , 
 - / / the invokation of clearCache method does not throw an exception . 
 + / / the invocation of clearCache method does not throw an exception . 
 final Checker checker = new Checker ( ) ; 
 checker . clearCache ( ) ; 
 } 
 @ @ - 776 , 6 + 787 , 89 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 verify ( checker , filePath , filePath , expected ) ; 
 } 
 
 + @ Test 
 + public void testCheckerProcessCallAllNeededMethodsOfFileSets ( ) throws Exception { 
 + final DummyFileSet fileSet = new DummyFileSet ( ) ; 
 + final Checker checker = new Checker ( ) ; 
 + checker . addFileSetCheck ( fileSet ) ; 
 + checker . process ( Collections . singletonList ( new File ( " dummy . java " ) ) ) ; 
 + final List < String > expected = 
 + Arrays . asList ( " beginProcessing " , " finishProcessing " , " destroy " ) ; 
 + assertArrayEquals ( expected . toArray ( ) , fileSet . getMethodCalls ( ) . toArray ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testSetFileSetCheckSetsMessageDispatcher ( ) throws Exception { 
 + final DummyFileSet fileSet = new DummyFileSet ( ) ; 
 + final Checker checker = new Checker ( ) ; 
 + checker . addFileSetCheck ( fileSet ) ; 
 + assertEquals ( checker , fileSet . getInternalMessageDispatcher ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testAddAuditListenerAsChild ( ) throws Exception { 
 + final Checker checker = new Checker ( ) ; 
 + final DebugAuditAdapter auditAdapter = new DebugAuditAdapter ( ) ; 
 + final PackageObjectFactory factory = new PackageObjectFactory ( 
 + new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) { 
 + @ Override 
 + public Object createModule ( String name ) throws CheckstyleException { 
 + Object adapter = auditAdapter ; 
 + if ( ! name . equals ( DebugAuditAdapter . class . getName ( ) ) ) { 
 + adapter = super . createModule ( name ) ; 
 + } 
 + return adapter ; 
 + } 
 + } ; 
 + checker . setModuleFactory ( factory ) ; 
 + checker . setupChild ( createCheckConfig ( DebugAuditAdapter . class ) ) ; 
 + / / Let ' s try fire some events 
 + checker . process ( Collections . singletonList ( new File ( " dummy . java " ) ) ) ; 
 + assertTrue ( " Checker . fireAuditStarted ( ) doesn ' t call listener " , auditAdapter . wasCalled ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testAddBeforeExecutionFileFilterAsChild ( ) throws Exception { 
 + final Checker checker = new Checker ( ) ; 
 + final TestBeforeExecutionFileFilter fileFilter = new TestBeforeExecutionFileFilter ( ) ; 
 + final PackageObjectFactory factory = new PackageObjectFactory ( 
 + new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) { 
 + @ Override 
 + public Object createModule ( String name ) throws CheckstyleException { 
 + Object filter = fileFilter ; 
 + if ( ! name . equals ( TestBeforeExecutionFileFilter . class . getName ( ) ) ) { 
 + filter = super . createModule ( name ) ; 
 + } 
 + return filter ; 
 + } 
 + } ; 
 + checker . setModuleFactory ( factory ) ; 
 + checker . setupChild ( createCheckConfig ( TestBeforeExecutionFileFilter . class ) ) ; 
 + checker . process ( Collections . singletonList ( new File ( " dummy . java " ) ) ) ; 
 + assertTrue ( " Checker . acceptFileStarted ( ) doesn ' t call listener " , fileFilter . wasCalled ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testFileSetCheckInitWhenAddedAsChild ( ) throws Exception { 
 + final Checker checker = new Checker ( ) ; 
 + final DummyFileSet fileSet = new DummyFileSet ( ) ; 
 + final PackageObjectFactory factory = new PackageObjectFactory ( 
 + new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) { 
 + @ Override 
 + public Object createModule ( String name ) throws CheckstyleException { 
 + Object check = fileSet ; 
 + if ( ! name . equals ( DummyFileSet . class . getName ( ) ) ) { 
 + check = super . createModule ( name ) ; 
 + } 
 + return check ; 
 + } 
 + } ; 
 + checker . setModuleFactory ( factory ) ; 
 + checker . finishLocalSetup ( ) ; 
 + checker . setupChild ( createCheckConfig ( DummyFileSet . class ) ) ; 
 + assertTrue ( " FileSetCheck . init ( ) wasn ' t called " , fileSet . isInitCalled ( ) ) ; 
 + } 
 + 
 private static class DummyFilter implements Filter { 
 
 @ Override 
 @ @ - 960 , 4 + 1054 , 52 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 throw new IndexOutOfBoundsException ( " test " ) ; 
 } 
 } 
 + 
 + private static class DummyFileSet extends AbstractFileSetCheck { 
 + 
 + private final List < String > methodCalls = new ArrayList < > ( ) ; 
 + 
 + private boolean initCalled ; 
 + 
 + @ Override 
 + public void init ( ) { 
 + super . init ( ) ; 
 + initCalled = true ; 
 + } 
 + 
 + @ Override 
 + public void beginProcessing ( String charset ) { 
 + methodCalls . add ( " beginProcessing " ) ; 
 + super . beginProcessing ( charset ) ; 
 + } 
 + 
 + @ Override 
 + public void finishProcessing ( ) { 
 + methodCalls . add ( " finishProcessing " ) ; 
 + super . finishProcessing ( ) ; 
 + } 
 + 
 + @ Override 
 + protected void processFiltered ( File file , List < String > lines ) throws CheckstyleException { 
 + methodCalls . add ( " processFiltered " ) ; 
 + } 
 + 
 + @ Override 
 + public void destroy ( ) { 
 + methodCalls . add ( " destroy " ) ; 
 + super . destroy ( ) ; 
 + } 
 + 
 + public List < String > getMethodCalls ( ) { 
 + return Collections . unmodifiableList ( methodCalls ) ; 
 + } 
 + 
 + public boolean isInitCalled ( ) { 
 + return initCalled ; 
 + } 
 + 
 + public MessageDispatcher getInternalMessageDispatcher ( ) { 
 + return getMessageDispatcher ( ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 index c3684fe . . db67504 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / CheckStyleTask . java 
 @ @ - 241 , 39 + 241 , 7 @ @ public class CheckStyleTask 
 / / Create the checker 
 Checker c = null ; 
 try { 
 - try { 
 - final Properties props = createOverridingProperties ( ) ; 
 - final Configuration config = 
 - ConfigurationLoader . loadConfiguration ( 
 - mConfigLocation , new PropertiesExpander ( props ) ) ; 
 - 
 - final DefaultContext context = new DefaultContext ( ) ; 
 - final ClassLoader loader = 
 - new AntClassLoader ( getProject ( ) , mClasspath ) ; 
 - context . add ( " classloader " , loader ) ; 
 - 
 - c = new Checker ( ) ; 
 - 
 - / / load the set of package names 
 - if ( mPackageNamesFile ! = null ) { 
 - final ModuleFactory moduleFactory = 
 - PackageNamesLoader . loadModuleFactory ( 
 - mPackageNamesFile . getAbsolutePath ( ) ) ; 
 - c . setModuleFactory ( moduleFactory ) ; 
 - } 
 - c . contextualize ( context ) ; 
 - c . configure ( config ) ; 
 - 
 - / / setup the listeners 
 - final AuditListener [ ] listeners = getListeners ( ) ; 
 - for ( int i = 0 ; i < listeners . length ; i + + ) { 
 - c . addListener ( listeners [ i ] ) ; 
 - } 
 - } 
 - catch ( Exception e ) { 
 - throw new BuildException ( 
 - " Unable to create a Checker : " + e . getMessage ( ) , e ) ; 
 - } 
 + c = createChecker ( ) ; 
 
 / / Process the files 
 final File [ ] files = scanFileSets ( ) ; 
 @ @ - 297 , 6 + 265 , 49 @ @ public class CheckStyleTask 
 } 
 
 / * * 
 + * Creates new instance of < code > Checker < / code > . 
 + * @ return new instance of < code > Checker < / code > 
 + * / 
 + private Checker createChecker ( ) 
 + { 
 + Checker c = null ; 
 + try { 
 + final Properties props = createOverridingProperties ( ) ; 
 + final Configuration config = 
 + ConfigurationLoader . loadConfiguration ( 
 + mConfigLocation , new PropertiesExpander ( props ) ) ; 
 + 
 + final DefaultContext context = new DefaultContext ( ) ; 
 + final ClassLoader loader = 
 + new AntClassLoader ( getProject ( ) , mClasspath ) ; 
 + context . add ( " classloader " , loader ) ; 
 + 
 + c = new Checker ( ) ; 
 + 
 + / / load the set of package names 
 + if ( mPackageNamesFile ! = null ) { 
 + final ModuleFactory moduleFactory = 
 + PackageNamesLoader . loadModuleFactory ( 
 + mPackageNamesFile . getAbsolutePath ( ) ) ; 
 + c . setModuleFactory ( moduleFactory ) ; 
 + } 
 + c . contextualize ( context ) ; 
 + c . configure ( config ) ; 
 + 
 + / / setup the listeners 
 + final AuditListener [ ] listeners = getListeners ( ) ; 
 + for ( int i = 0 ; i < listeners . length ; i + + ) { 
 + c . addListener ( listeners [ i ] ) ; 
 + } 
 + } 
 + catch ( Exception e ) { 
 + throw new BuildException ( 
 + " Unable to create a Checker : " + e . getMessage ( ) , e ) ; 
 + } 
 + 
 + return c ; 
 + } 
 + / * * 
 * Create the Properties object based on the arguments specified 
 * to the ANT task . 
 * @ return the properties for property expansion expansion
