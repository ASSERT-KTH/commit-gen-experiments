BLEU SCORE: 0.016701777430699286

TEST MSG: Issue # 4081 : Wrong message and several typos
GENERATED MSG: incorporated patch # 1892273 ( NoFinalizer check ) and added better unit tests , one bugfix , docs and i18n

TEST DIFF (one line): diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> index 7497c74 . . 6a101f0 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties <nl> @ @ - 3 , 10 + 3 , 10 @ @ assignment . inner . avoid = Innere Zuweisungen sollten vermieden werden . <nl> avoid . finalizer . method = Die Methode finalizer ( ) sollte vermieden werden . <nl> avoid . clone . method = Die Methode clone ( ) sollte vermieden werden . <nl> covariant . equals = Kovariante Definition von equals ( ) , ohne equals ( java . lang . Object ) zu 端 berschreiben . <nl> - declaration . order . constructor = Der Konstruktur steht an der falschen Stelle . <nl> - declaration . order . static = Die statischen Variable wird an der falschen Stelle deklariert . <nl> - declaration . order . instance = Die Instanz - Variable wird an der falscher Stelle deklariert . <nl> - declaration . order . access = Es wird auf eine Variable zugegriffen , bevor diese deklariert wurde . <nl> + declaration . order . constructor = Der Konstruktor steht an der falschen Stelle . <nl> + declaration . order . static = Die statische Variable wird an der falschen Stelle deklariert . <nl> + declaration . order . instance = Die Instanz - Variable wird an der falschen Stelle deklariert . <nl> + declaration . order . access = Fehlerhafte Deklarationsreihenfolge f 端 r diesen Scope . <nl> default . comes . last = Der Default - Fall sollte der letzte Fall der switch - Anweisung sein . <nl> empty . statement = Leere Anweisung . <nl> equals . avoid . null = Bei einem equals ( ) - Vergleich sollten String - Literale auf der linken Seite stehen . <nl> @ @ - 14 , 8 + 14 , 8 @ @ equalsIgnoreCase . avoid . null = Bei einem equalsIgnoreCase ( ) - Vergleich sollten Strin <nl> equals . noEquals = Wenn ' ' hashCode ( ) ' ' definiert wird , muss auch ' ' equals ( ) ' ' definiert werden . <nl> equals . noHashCode = Wenn ' ' equals ( ) ' ' definiert wird , muss auch ' ' hashCode ( ) ' ' definiert werden . <nl> explicit . init = Die Variable ' ' { 0 } ' ' wird explizit mit ' ' { 1 } ' ' initialisiert ( was dem Standardwert ihres Typs entspricht ) . <nl> - fall . through = Fallthrough vom vorherigen switch - Zweig ohne break / return / throw / continue - Anweisung oder Fallthrough - Kommentar hat . <nl> - fall . through . last = Fallthrough vom letzten switch - Zweig ohne break / return / throw / continue - Anweisung oder Fallthrough - Kommentar hat . <nl> + fall . through = Fall - through vom vorherigen switch - Zweig ohne break / return / throw / continue - Anweisung . <nl> + fall . through . last = Fall - through vom letzten switch - Zweig ohne break / return / throw / continue - Anweisung . <nl> final . variable = Die Variable ' ' { 0 } ' ' sollte als final deklariert werden . <nl> hidden . field = Die Variable ' ' { 0 } ' ' verbirgt ein Feld . <nl> illegal . catch = Die Exception ' ' { 0 } ' ' darf nicht abgefangen werden .
NEAREST DIFF (one line): 

TEST DIFF:
diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 index 7497c74 . . 6a101f0 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages _ de . properties 
 @ @ - 3 , 10 + 3 , 10 @ @ assignment . inner . avoid = Innere Zuweisungen sollten vermieden werden . 
 avoid . finalizer . method = Die Methode finalizer ( ) sollte vermieden werden . 
 avoid . clone . method = Die Methode clone ( ) sollte vermieden werden . 
 covariant . equals = Kovariante Definition von equals ( ) , ohne equals ( java . lang . Object ) zu 端 berschreiben . 
 - declaration . order . constructor = Der Konstruktur steht an der falschen Stelle . 
 - declaration . order . static = Die statischen Variable wird an der falschen Stelle deklariert . 
 - declaration . order . instance = Die Instanz - Variable wird an der falscher Stelle deklariert . 
 - declaration . order . access = Es wird auf eine Variable zugegriffen , bevor diese deklariert wurde . 
 + declaration . order . constructor = Der Konstruktor steht an der falschen Stelle . 
 + declaration . order . static = Die statische Variable wird an der falschen Stelle deklariert . 
 + declaration . order . instance = Die Instanz - Variable wird an der falschen Stelle deklariert . 
 + declaration . order . access = Fehlerhafte Deklarationsreihenfolge f 端 r diesen Scope . 
 default . comes . last = Der Default - Fall sollte der letzte Fall der switch - Anweisung sein . 
 empty . statement = Leere Anweisung . 
 equals . avoid . null = Bei einem equals ( ) - Vergleich sollten String - Literale auf der linken Seite stehen . 
 @ @ - 14 , 8 + 14 , 8 @ @ equalsIgnoreCase . avoid . null = Bei einem equalsIgnoreCase ( ) - Vergleich sollten Strin 
 equals . noEquals = Wenn ' ' hashCode ( ) ' ' definiert wird , muss auch ' ' equals ( ) ' ' definiert werden . 
 equals . noHashCode = Wenn ' ' equals ( ) ' ' definiert wird , muss auch ' ' hashCode ( ) ' ' definiert werden . 
 explicit . init = Die Variable ' ' { 0 } ' ' wird explizit mit ' ' { 1 } ' ' initialisiert ( was dem Standardwert ihres Typs entspricht ) . 
 - fall . through = Fallthrough vom vorherigen switch - Zweig ohne break / return / throw / continue - Anweisung oder Fallthrough - Kommentar hat . 
 - fall . through . last = Fallthrough vom letzten switch - Zweig ohne break / return / throw / continue - Anweisung oder Fallthrough - Kommentar hat . 
 + fall . through = Fall - through vom vorherigen switch - Zweig ohne break / return / throw / continue - Anweisung . 
 + fall . through . last = Fall - through vom letzten switch - Zweig ohne break / return / throw / continue - Anweisung . 
 final . variable = Die Variable ' ' { 0 } ' ' sollte als final deklariert werden . 
 hidden . field = Die Variable ' ' { 0 } ' ' verbirgt ein Feld . 
 illegal . catch = Die Exception ' ' { 0 } ' ' darf nicht abgefangen werden .

NEAREST DIFF:

