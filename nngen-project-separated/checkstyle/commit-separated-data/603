BLEU SCORE: 0.05090564127188442

TEST MSG: Issue # 4675 : increase coverage of pitest - checks - misc to 93 %
GENERATED MSG: Issue # 3989 : UTs should not use ROOT locale when they test violation / error message

TEST DIFF (one line): diff - - git a / config / checkstyle _ non _ main _ files _ suppressions . xml b / config / checkstyle _ non _ main _ files _ suppressions . xml <nl> index 4311d5e . . c7c46a2 100644 <nl> - - - a / config / checkstyle _ non _ main _ files _ suppressions . xml <nl> + + + b / config / checkstyle _ non _ main _ files _ suppressions . xml <nl> @ @ - 22 , 4 + 22 , 7 @ @ <nl> < ! - - Empty file cannot have any new line at the end . - - > <nl> < suppress checks = " NewlineAtEndOfFile " files = " [ \ \ / ] test [ \ \ / ] . * [ \ \ / ] checks [ \ \ / ] misc [ \ \ / ] newlineatendoffile [ \ \ / ] InputEmptyFile \ . txt " / > <nl> < suppress checks = " NewlineAtEndOfFile " files = " [ \ \ / ] test [ \ \ / ] . * [ \ \ / ] grammars [ \ \ / ] InputRegressionEmptyAst \ . txt " / > <nl> + <nl> + < ! - - For the testing purposes - - > <nl> + < suppress checks = " NewlineAtEndOfFile " files = " [ \ \ / ] test [ \ \ / ] . * [ \ \ / ] checks [ \ \ / ] misc [ \ \ / ] uniqueproperties [ \ \ / ] InputUniquePropertiesWithDuplicates \ . properties " / > <nl> < / suppressions > <nl> diff - - git a / pom . xml b / pom . xml <nl> index 5f7026b . . 57dad42 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1652 , 7 + 1652 , 7 @ @ <nl> < param > com . puppycrawl . tools . checkstyle . checks . UniquePropertiesCheckTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . checks . UpperEllCheckTest < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 90 < / mutationThreshold > <nl> + < mutationThreshold > 93 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> index ce915ab . . c1d7425 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public class ArrayTypeStyleCheck extends AbstractCheck { <nl> if ( variableAST ! = null ) { <nl> final boolean isJavaStyle = <nl> variableAST . getLineNo ( ) > ast . getLineNo ( ) <nl> - | | variableAST . getColumnNo ( ) > ast . getColumnNo ( ) ; <nl> + | | variableAST . getColumnNo ( ) - ast . getColumnNo ( ) > - 1 ; <nl> <nl> if ( isJavaStyle ! = javaStyle ) { <nl> log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java <nl> index 8a8c3fd . . a9d0f37 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java <nl> @ @ - 355 , 7 + 355 , 7 @ @ public class DescendantTokenCheck extends AbstractCheck { <nl> int maxToken = 0 ; <nl> for ( int i = 0 ; i < limitedTokensParam . length ; i + + ) { <nl> limitedTokens [ i ] = TokenUtils . getTokenId ( limitedTokensParam [ i ] ) ; <nl> - if ( limitedTokens [ i ] > maxToken ) { <nl> + if ( limitedTokens [ i ] > = maxToken + 1 ) { <nl> maxToken = limitedTokens [ i ] ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> index 218225c . . 6e7cbc7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java <nl> @ @ - 236 , 7 + 236 , 6 @ @ public class TranslationCheck extends AbstractFileSetCheck { <nl> <nl> @ Override <nl> public void beginProcessing ( String charset ) { <nl> - super . beginProcessing ( charset ) ; <nl> filesToProcess . clear ( ) ; <nl> } <nl> <nl> @ @ - 248 , 8 + 247 , 6 @ @ public class TranslationCheck extends AbstractFileSetCheck { <nl> <nl> @ Override <nl> public void finishProcessing ( ) { <nl> - super . finishProcessing ( ) ; <nl> - <nl> final Set < ResourceBundle > bundles = groupFilesIntoBundles ( filesToProcess , baseName ) ; <nl> for ( ResourceBundle currentBundle : bundles ) { <nl> checkExistenceOfDefaultTranslation ( currentBundle ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java <nl> index 72df156 . . afbd42f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java <nl> @ @ - 111 , 7 + 111 , 9 @ @ public class UniquePropertiesCheck extends AbstractFileSetCheck { <nl> } <nl> + + lineNumber ; <nl> } <nl> - if ( lineNumber > fileText . size ( ) ) { <nl> + / / - 1 as check seeks for the first duplicate occurance in file , <nl> + / / so it cannot be the last line . <nl> + if ( lineNumber > fileText . size ( ) - 1 ) { <nl> lineNumber = 0 ; <nl> } <nl> return lineNumber ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java <nl> index a72fb9d . . d92a5a8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java <nl> @ @ - 51 , 7 + 51 , 8 @ @ public class ArrayTypeStyleCheckTest <nl> createModuleConfig ( ArrayTypeStyleCheck . class ) ; <nl> final String [ ] expected = { <nl> " 14 : 23 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 20 : 44 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 15 : 18 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 21 : 44 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputArrayTypeStyle . java " ) , expected ) ; <nl> } <nl> @ @ - 64 , 9 + 65 , 9 @ @ public class ArrayTypeStyleCheckTest <nl> checkConfig . addAttribute ( " javaStyle " , " false " ) ; <nl> final String [ ] expected = { <nl> " 13 : 16 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 16 : 39 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 22 : 18 : " + getCheckMessage ( MSG _ KEY ) , <nl> - " 30 : 20 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 17 : 39 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 23 : 18 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 31 : 20 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputArrayTypeStyle . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> index b422899 . . 83e54d0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> @ @ - 21 , 11 + 21 , 15 @ @ package com . puppycrawl . tools . checkstyle . checks ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . AvoidEscapedUnicodeCharactersCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> + import static org . junit . Assert . assertEquals ; <nl> <nl> + import java . lang . reflect . Method ; <nl> import java . util . Arrays ; <nl> + import java . util . regex . Pattern ; <nl> import java . util . stream . IntStream ; <nl> <nl> import org . junit . Test ; <nl> + import org . powermock . reflect . Whitebox ; <nl> <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> @ @ - 352 , 6 + 356 , 26 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends AbstractModuleTestSu <nl> verify ( checkConfig , getPath ( " InputAllEscapedUnicodeCharacters . java " ) , expected ) ; <nl> } <nl> <nl> + / * * <nl> + * Method countMatches is used only inside isOnlyUnicodeValidChars method , and when <nl> + * pitest mutates 316 : 13 countMatches + + to countMatches - - it makes no difference for <nl> + * isOnlyUnicodeValidChars method as it applies countMatches to both cases in comparison . <nl> + * It is possible to kill mutation in countMatches method by changing code in <nl> + * isOnlyUnicodeValidChars , but it creates new uncoverable mutations and makes code harder <nl> + * to understand . <nl> + * <nl> + * @ throws Exception when code tested throws some exception <nl> + * / <nl> + @ Test <nl> + public void testCountMatches ( ) throws Exception { <nl> + final Method countMatches = Whitebox . getMethod ( AvoidEscapedUnicodeCharactersCheck . class , <nl> + " countMatches " , Pattern . class , String . class ) ; <nl> + final AvoidEscapedUnicodeCharactersCheck check = new AvoidEscapedUnicodeCharactersCheck ( ) ; <nl> + final int actual = ( int ) countMatches . invoke ( check , <nl> + Pattern . compile ( " \ \ \ \ u [ a - fA - F0 - 9 ] { 4 } " ) , " \ \ u1234 " ) ; <nl> + assertEquals ( " Unexpected matches count " , 1 , actual ) ; <nl> + } <nl> + <nl> private static boolean isControlCharacter ( final int character ) { <nl> return Arrays . binarySearch ( C0 _ CONTROL _ CHARACTER _ INDICES , character ) > = 0 <nl> | | Arrays . binarySearch ( C1 _ CONTROL _ CHARACTER _ INDICES , character ) > = 0 <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java <nl> index df38983 . . 7d8af46 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java <nl> @ @ - 346 , 4 + 346 , 34 @ @ public class DescendantTokenCheckTest extends AbstractModuleTestSupport { <nl> <nl> verify ( checkConfig , getPath ( " InputDescendantTokenReturnFromFinally . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testMaxTokenType ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( DescendantTokenCheck . class ) ; <nl> + checkConfig . addAttribute ( " tokens " , " OBJBLOCK " ) ; <nl> + checkConfig . addAttribute ( " limitedTokens " , " LCURLY , RCURLY " ) ; <nl> + checkConfig . addAttribute ( " maximumNumber " , " 0 " ) ; <nl> + checkConfig . addAttribute ( " maximumDepth " , " 2 " ) ; <nl> + final String [ ] expected = { <nl> + " 6 : 48 : " + getCheckMessage ( MSG _ KEY _ MAX , 1 , 0 , " OBJBLOCK " , " LCURLY " ) , <nl> + " 6 : 48 : " + getCheckMessage ( MSG _ KEY _ MAX , 1 , 0 , " OBJBLOCK " , " RCURLY " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputDescendantTokenLastTokenType . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMaxTokenTypeReverseOrder ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( DescendantTokenCheck . class ) ; <nl> + checkConfig . addAttribute ( " tokens " , " OBJBLOCK " ) ; <nl> + checkConfig . addAttribute ( " limitedTokens " , " RCURLY , LCURLY " ) ; <nl> + checkConfig . addAttribute ( " maximumNumber " , " 0 " ) ; <nl> + checkConfig . addAttribute ( " maximumDepth " , " 2 " ) ; <nl> + final String [ ] expected = { <nl> + " 6 : 48 : " + getCheckMessage ( MSG _ KEY _ MAX , 1 , 0 , " OBJBLOCK " , " LCURLY " ) , <nl> + " 6 : 48 : " + getCheckMessage ( MSG _ KEY _ MAX , 1 , 0 , " OBJBLOCK " , " RCURLY " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputDescendantTokenLastTokenType . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> index 6bfe34a . . 6c380c8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> @ @ - 25 , 7 + 25 , 13 @ @ import static java . util . Locale . ENGLISH ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> + import static org . mockito . Matchers . any ; <nl> + import static org . mockito . Matchers . anyBoolean ; <nl> + import static org . mockito . Mockito . times ; <nl> + import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> import static org . powermock . api . mockito . PowerMockito . mock ; <nl> + import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> + import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> import static org . powermock . api . mockito . PowerMockito . when ; <nl> <nl> import java . io . File ; <nl> @ @ - 39 , 7 + 45 , 11 @ @ import java . util . List ; <nl> import java . util . Set ; <nl> <nl> import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> + import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> + import com . google . common . io . Closeables ; <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> @ @ - 47 , 6 + 57 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> + @ RunWith ( PowerMockRunner . class ) <nl> + @ PrepareForTest ( Closeables . class ) <nl> public class NewlineAtEndOfFileCheckTest <nl> extends AbstractModuleTestSupport { <nl> @ Override <nl> @ @ - 66 , 6 + 78 , 31 @ @ public class NewlineAtEndOfFileCheckTest <nl> expected ) ; <nl> } <nl> <nl> + / * * <nl> + * Pitest requires all closes of streams and readers to be verified . Using PowerMock <nl> + * is almost only posibility to check it without rewriting production code . <nl> + * <nl> + * @ throws Exception when code tested throws some exception <nl> + * / <nl> + @ Test <nl> + public void testCloseRandomAccessFile ( ) throws Exception { <nl> + mockStatic ( Closeables . class ) ; <nl> + doNothing ( ) . when ( Closeables . class ) ; <nl> + Closeables . close ( any ( RandomAccessFile . class ) , anyBoolean ( ) ) ; <nl> + <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( NewlineAtEndOfFileCheck . class ) ; <nl> + checkConfig . addAttribute ( " lineSeparator " , LineSeparatorOption . LF . toString ( ) ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( <nl> + createChecker ( checkConfig ) , <nl> + getPath ( " InputNewlineLfAtEndOfFile . java " ) , <nl> + expected ) ; <nl> + <nl> + verifyStatic ( times ( 1 ) ) ; <nl> + Closeables . close ( any ( RandomAccessFile . class ) , anyBoolean ( ) ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testNewlineCrlfAtEndOfFile ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> @ @ - 172 , 6 + 209 , 18 @ @ public class NewlineAtEndOfFileCheckTest <nl> } <nl> <nl> @ Test <nl> + public void testFileWithEmptyLineOnly ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( NewlineAtEndOfFileCheck . class ) ; <nl> + checkConfig . addAttribute ( " lineSeparator " , LineSeparatorOption . LF . toString ( ) ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( <nl> + createChecker ( checkConfig ) , <nl> + getPath ( " InputNewlineAtTheEndOfTheEmptyFile . txt " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testWrongFile ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( NewlineAtEndOfFileCheck . class ) ; <nl> final NewlineAtEndOfFileCheck check = new NewlineAtEndOfFileCheck ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java <nl> index 736537e . . 549f71c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java <nl> @ @ - 93 , 6 + 93 , 13 @ @ public class OuterTypeFilenameCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testPublicClassIsNotFirst ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( OuterTypeFilenameCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputOuterTypeFilenameCheckPublic . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testFineDefault ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( OuterTypeFilenameCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> index 62d2c59 . . 46f5e43 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> @ @ - 86 , 6 + 86 , 16 @ @ public class UncommentedMainCheckTest <nl> } <nl> <nl> @ Test <nl> + public void testVisitPackage ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( UncommentedMainCheck . class ) ; <nl> + checkConfig . addAttribute ( " excludedClasses " , " uncommentedmain \ \ . InputUncommentedMain5 " ) ; <nl> + final String [ ] expected = { <nl> + " 14 : " + getCheckMessage ( MSG _ KEY ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputUncommentedMain5 . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testWrongName ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( UncommentedMainCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> index c80873a . . 0494500 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> @ @ - 22 , 6 + 22 , 11 @ @ package com . puppycrawl . tools . checkstyle . checks ; <nl> import static com . puppycrawl . tools . checkstyle . checks . UniquePropertiesCheck . MSG _ IO _ EXCEPTION _ KEY ; <nl> import static com . puppycrawl . tools . checkstyle . checks . UniquePropertiesCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . mockito . Matchers . any ; <nl> + import static org . mockito . Mockito . times ; <nl> + import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> + import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> + import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> <nl> import java . io . File ; <nl> import java . io . FileInputStream ; <nl> @ @ - 39 , 15 + 44 , 22 @ @ import java . util . SortedSet ; <nl> import org . junit . Assert ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> + import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> + import com . google . common . io . Closeables ; <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> * JUnit tests for Unique Properties check . <nl> * / <nl> + @ RunWith ( PowerMockRunner . class ) <nl> + @ PrepareForTest ( Closeables . class ) <nl> public class UniquePropertiesCheckTest extends AbstractModuleTestSupport { <nl> <nl> private DefaultConfiguration checkConfig ; <nl> @ @ - 89 , 6 + 101 , 25 @ @ public class UniquePropertiesCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> / * * <nl> + * Pitest requires all closes of streams and readers to be verified . Using PowerMock <nl> + * is almost only posibility to check it without rewriting production code . <nl> + * <nl> + * @ throws Exception when code tested throws some exception <nl> + * / <nl> + @ Test <nl> + public void testCloseInputStream ( ) throws Exception { <nl> + mockStatic ( Closeables . class ) ; <nl> + doNothing ( ) . when ( Closeables . class ) ; <nl> + Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; <nl> + <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputUniquePropertiesWithoutErrors . properties " ) , expected ) ; <nl> + <nl> + verifyStatic ( times ( 1 ) ) ; <nl> + Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; <nl> + } <nl> + <nl> + / * * <nl> * Tests the { @ link UniquePropertiesCheck # getLineNumber ( FileText , String ) } <nl> * method return value . <nl> * / <nl> @ @ - 109 , 6 + 140 , 20 @ @ public class UniquePropertiesCheckTest extends AbstractModuleTestSupport { <nl> assertEquals ( " Invalid line number " , 0 , lineNumber ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testDuplicatedProperty ( ) throws Exception { <nl> + final String [ ] expected = { <nl> + " 2 : " + getCheckMessage ( MSG _ KEY , " key " , 2 ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputUniquePropertiesWithDuplicates . properties " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testShouldNotProcessFilesWithWrongFileExtension ( ) throws Exception { <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputUniqueProperties . txt " ) , expected ) ; <nl> + } <nl> + <nl> / * * <nl> * Tests IO exception , that can occur during reading of properties file . <nl> * / <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / arraytypestyle / InputArrayTypeStyle . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / arraytypestyle / InputArrayTypeStyle . java <nl> index c64f637 . . 954f5bc 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / arraytypestyle / InputArrayTypeStyle . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / arraytypestyle / InputArrayTypeStyle . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ public class InputArrayTypeStyle <nl> { <nl> private int [ ] javaStyle = new int [ 0 ] ; <nl> private int cStyle [ ] = new int [ 0 ] ; <nl> + private int c [ ] = new int [ 0 ] ; <nl> <nl> public static void mainJava ( String [ ] aJavaStyle ) <nl> { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / descendanttoken / InputDescendantTokenLastTokenType . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / descendanttoken / InputDescendantTokenLastTokenType . java <nl> new file mode 100644 <nl> index 0000000 . . 34cdcd2 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / descendanttoken / InputDescendantTokenLastTokenType . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . misc . descendanttoken ; <nl> + <nl> + / * * <nl> + * Created by valeria on 8 / 19 / 17 . <nl> + * / <nl> + public class InputDescendantTokenLastTokenType { } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineAtTheEndOfTheEmptyFile . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineAtTheEndOfTheEmptyFile . txt <nl> new file mode 100644 <nl> index 0000000 . . 8b13789 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineAtTheEndOfTheEmptyFile . txt <nl> @ @ - 0 , 0 + 1 @ @ <nl> + <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / outertypefilename / InputOuterTypeFilenameCheckPublic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / outertypefilename / InputOuterTypeFilenameCheckPublic . java <nl> new file mode 100644 <nl> index 0000000 . . 76a2c4b <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / outertypefilename / InputOuterTypeFilenameCheckPublic . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + / / someexamples of 1 . 5 extensions <nl> + package com . puppycrawl . tools . checkstyle . checks . misc . outertypefilename ; <nl> + <nl> + class UnicClassName { <nl> + <nl> + } <nl> + <nl> + public class InputOuterTypeFilenameCheckPublic { <nl> + <nl> + <nl> + } <nl> + <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uncommentedmain / InputUncommentedMain5 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uncommentedmain / InputUncommentedMain5 . java <nl> new file mode 100644 <nl> index 0000000 . . 715faee <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uncommentedmain / InputUncommentedMain5 . java <nl> @ @ - 0 , 0 + 1 , 30 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . misc . uncommentedmain ; <nl> + <nl> + public class InputUncommentedMain5 <nl> + { <nl> + public static void main ( String [ ] args ) <nl> + { <nl> + System . identityHashCode ( " InputUncommentedMain . main ( ) " ) ; <nl> + } <nl> + } <nl> + <nl> + class PC { <nl> + <nl> + / / uncommented main with depth 2 <nl> + public static void main ( String [ ] args ) <nl> + { <nl> + System . identityHashCode ( " PC . main ( ) " ) ; <nl> + } <nl> + <nl> + / / lets go deeper <nl> + private class PC2 { <nl> + <nl> + / / uncommented main with depth 3 <nl> + public void main ( String [ ] args ) <nl> + { <nl> + System . identityHashCode ( " PC . main ( ) " ) ; <nl> + } <nl> + <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniqueProperties . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniqueProperties . txt <nl> new file mode 100644 <nl> index 0000000 . . 120bc85 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniqueProperties . txt <nl> @ @ - 0 , 0 + 1 , 2 @ @ <nl> + 1 = val <nl> + 1 = foo <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniquePropertiesWithDuplicates . properties b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniquePropertiesWithDuplicates . properties <nl> new file mode 100644 <nl> index 0000000 . . 36b0d84 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniquePropertiesWithDuplicates . properties <nl> @ @ - 0 , 0 + 1 , 3 @ @ <nl> + host = localhost <nl> + key = value1 <nl> + key = value2 <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniquePropertiesWithoutErrors . properties b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniquePropertiesWithoutErrors . properties <nl> new file mode 100644 <nl> index 0000000 . . 48580bf <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniquePropertiesWithoutErrors . properties <nl> @ @ - 0 , 0 + 1 , 2 @ @ <nl> + key1 = value1 <nl> + key2 = value2
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> index b74a614 . . 1ad746a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import java . util . Optional ; <nl> import java . util . Set ; <nl> import java . util . function . Predicate ; <nl> import java . util . stream . Collectors ; <nl> - import java . util . stream . Stream ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> @ @ - 102 , 8 + 101 , 8 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> / * * <nl> * A set of annotations which allow the check to skip the method from validation . <nl> * / <nl> - private Set < String > ignoredAnnotations = Stream . of ( " Test " , " Before " , " After " , " BeforeClass " , <nl> - " AfterClass " ) . collect ( Collectors . toSet ( ) ) ; <nl> + private Set < String > ignoredAnnotations = Arrays . stream ( new String [ ] { " Test " , " Before " , " After " , <nl> + " BeforeClass " , " AfterClass " , } ) . collect ( Collectors . toSet ( ) ) ; <nl> <nl> / * * <nl> * Sets annotations which allow the check to skip the method from validation . <nl> @ @ - 139 , 9 + 138 , 9 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> if ( ! hasJavadocComment ( ast ) <nl> + & & canBeOverridden ( ast ) <nl> & & ( isNativeMethod ( ast ) <nl> | | ! hasEmptyImplementation ( ast ) ) <nl> - & & canBeOverridden ( ast ) <nl> & & ! hasIgnoredAnnotation ( ast , ignoredAnnotations ) ) { <nl> <nl> final DetailAST classDef = getNearestClassOrEnumDefinition ( ast ) ; <nl> @ @ - 182 , 19 + 181 , 17 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> private static boolean hasEmptyImplementation ( DetailAST ast ) { <nl> boolean hasEmptyBody = true ; <nl> final DetailAST methodImplOpenBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> - if ( methodImplOpenBrace ! = null ) { <nl> - final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; <nl> - final Predicate < DetailAST > predicate = currentNode - > { <nl> - return currentNode ! = null <nl> - & & currentNode ! = methodImplCloseBrace <nl> - & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) <nl> - & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; <nl> - } ; <nl> - final Optional < DetailAST > methodBody = <nl> - TokenUtils . findFirstTokenByPredicate ( methodImplOpenBrace , predicate ) ; <nl> - if ( methodBody . isPresent ( ) ) { <nl> - hasEmptyBody = false ; <nl> - } <nl> + final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; <nl> + final Predicate < DetailAST > predicate = currentNode - > { <nl> + return currentNode ! = null <nl> + & & currentNode ! = methodImplCloseBrace <nl> + & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) <nl> + & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; <nl> + } ; <nl> + final Optional < DetailAST > methodBody = <nl> + TokenUtils . findFirstTokenByPredicate ( methodImplOpenBrace , predicate ) ; <nl> + if ( methodBody . isPresent ( ) ) { <nl> + hasEmptyBody = false ; <nl> } <nl> return hasEmptyBody ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java <nl> index afa1512 . . 8453755 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java <nl> @ @ - 218 , 4 + 218 , 8 @ @ public class InputDesignForExtensionOverridableMethods { <nl> <nl> protected final int foo4 ( int a , int b ) { return a + b ; } <nl> } <nl> + <nl> + public abstract class C { <nl> + public abstract void foo1 ( int a ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / config / checkstyle _ non _ main _ files _ suppressions . xml b / config / checkstyle _ non _ main _ files _ suppressions . xml 
 index 4311d5e . . c7c46a2 100644 
 - - - a / config / checkstyle _ non _ main _ files _ suppressions . xml 
 + + + b / config / checkstyle _ non _ main _ files _ suppressions . xml 
 @ @ - 22 , 4 + 22 , 7 @ @ 
 < ! - - Empty file cannot have any new line at the end . - - > 
 < suppress checks = " NewlineAtEndOfFile " files = " [ \ \ / ] test [ \ \ / ] . * [ \ \ / ] checks [ \ \ / ] misc [ \ \ / ] newlineatendoffile [ \ \ / ] InputEmptyFile \ . txt " / > 
 < suppress checks = " NewlineAtEndOfFile " files = " [ \ \ / ] test [ \ \ / ] . * [ \ \ / ] grammars [ \ \ / ] InputRegressionEmptyAst \ . txt " / > 
 + 
 + < ! - - For the testing purposes - - > 
 + < suppress checks = " NewlineAtEndOfFile " files = " [ \ \ / ] test [ \ \ / ] . * [ \ \ / ] checks [ \ \ / ] misc [ \ \ / ] uniqueproperties [ \ \ / ] InputUniquePropertiesWithDuplicates \ . properties " / > 
 < / suppressions > 
 diff - - git a / pom . xml b / pom . xml 
 index 5f7026b . . 57dad42 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1652 , 7 + 1652 , 7 @ @ 
 < param > com . puppycrawl . tools . checkstyle . checks . UniquePropertiesCheckTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . checks . UpperEllCheckTest < / param > 
 < / targetTests > 
 - < mutationThreshold > 90 < / mutationThreshold > 
 + < mutationThreshold > 93 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 index ce915ab . . c1d7425 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 @ @ - 67 , 7 + 67 , 7 @ @ public class ArrayTypeStyleCheck extends AbstractCheck { 
 if ( variableAST ! = null ) { 
 final boolean isJavaStyle = 
 variableAST . getLineNo ( ) > ast . getLineNo ( ) 
 - | | variableAST . getColumnNo ( ) > ast . getColumnNo ( ) ; 
 + | | variableAST . getColumnNo ( ) - ast . getColumnNo ( ) > - 1 ; 
 
 if ( isJavaStyle ! = javaStyle ) { 
 log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java 
 index 8a8c3fd . . a9d0f37 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java 
 @ @ - 355 , 7 + 355 , 7 @ @ public class DescendantTokenCheck extends AbstractCheck { 
 int maxToken = 0 ; 
 for ( int i = 0 ; i < limitedTokensParam . length ; i + + ) { 
 limitedTokens [ i ] = TokenUtils . getTokenId ( limitedTokensParam [ i ] ) ; 
 - if ( limitedTokens [ i ] > maxToken ) { 
 + if ( limitedTokens [ i ] > = maxToken + 1 ) { 
 maxToken = limitedTokens [ i ] ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 index 218225c . . 6e7cbc7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheck . java 
 @ @ - 236 , 7 + 236 , 6 @ @ public class TranslationCheck extends AbstractFileSetCheck { 
 
 @ Override 
 public void beginProcessing ( String charset ) { 
 - super . beginProcessing ( charset ) ; 
 filesToProcess . clear ( ) ; 
 } 
 
 @ @ - 248 , 8 + 247 , 6 @ @ public class TranslationCheck extends AbstractFileSetCheck { 
 
 @ Override 
 public void finishProcessing ( ) { 
 - super . finishProcessing ( ) ; 
 - 
 final Set < ResourceBundle > bundles = groupFilesIntoBundles ( filesToProcess , baseName ) ; 
 for ( ResourceBundle currentBundle : bundles ) { 
 checkExistenceOfDefaultTranslation ( currentBundle ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java 
 index 72df156 . . afbd42f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheck . java 
 @ @ - 111 , 7 + 111 , 9 @ @ public class UniquePropertiesCheck extends AbstractFileSetCheck { 
 } 
 + + lineNumber ; 
 } 
 - if ( lineNumber > fileText . size ( ) ) { 
 + / / - 1 as check seeks for the first duplicate occurance in file , 
 + / / so it cannot be the last line . 
 + if ( lineNumber > fileText . size ( ) - 1 ) { 
 lineNumber = 0 ; 
 } 
 return lineNumber ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java 
 index a72fb9d . . d92a5a8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java 
 @ @ - 51 , 7 + 51 , 8 @ @ public class ArrayTypeStyleCheckTest 
 createModuleConfig ( ArrayTypeStyleCheck . class ) ; 
 final String [ ] expected = { 
 " 14 : 23 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 20 : 44 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 15 : 18 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 21 : 44 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputArrayTypeStyle . java " ) , expected ) ; 
 } 
 @ @ - 64 , 9 + 65 , 9 @ @ public class ArrayTypeStyleCheckTest 
 checkConfig . addAttribute ( " javaStyle " , " false " ) ; 
 final String [ ] expected = { 
 " 13 : 16 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 16 : 39 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 22 : 18 : " + getCheckMessage ( MSG _ KEY ) , 
 - " 30 : 20 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 17 : 39 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 23 : 18 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 31 : 20 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputArrayTypeStyle . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 index b422899 . . 83e54d0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 @ @ - 21 , 11 + 21 , 15 @ @ package com . puppycrawl . tools . checkstyle . checks ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . AvoidEscapedUnicodeCharactersCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertArrayEquals ; 
 + import static org . junit . Assert . assertEquals ; 
 
 + import java . lang . reflect . Method ; 
 import java . util . Arrays ; 
 + import java . util . regex . Pattern ; 
 import java . util . stream . IntStream ; 
 
 import org . junit . Test ; 
 + import org . powermock . reflect . Whitebox ; 
 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 @ @ - 352 , 6 + 356 , 26 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends AbstractModuleTestSu 
 verify ( checkConfig , getPath ( " InputAllEscapedUnicodeCharacters . java " ) , expected ) ; 
 } 
 
 + / * * 
 + * Method countMatches is used only inside isOnlyUnicodeValidChars method , and when 
 + * pitest mutates 316 : 13 countMatches + + to countMatches - - it makes no difference for 
 + * isOnlyUnicodeValidChars method as it applies countMatches to both cases in comparison . 
 + * It is possible to kill mutation in countMatches method by changing code in 
 + * isOnlyUnicodeValidChars , but it creates new uncoverable mutations and makes code harder 
 + * to understand . 
 + * 
 + * @ throws Exception when code tested throws some exception 
 + * / 
 + @ Test 
 + public void testCountMatches ( ) throws Exception { 
 + final Method countMatches = Whitebox . getMethod ( AvoidEscapedUnicodeCharactersCheck . class , 
 + " countMatches " , Pattern . class , String . class ) ; 
 + final AvoidEscapedUnicodeCharactersCheck check = new AvoidEscapedUnicodeCharactersCheck ( ) ; 
 + final int actual = ( int ) countMatches . invoke ( check , 
 + Pattern . compile ( " \ \ \ \ u [ a - fA - F0 - 9 ] { 4 } " ) , " \ \ u1234 " ) ; 
 + assertEquals ( " Unexpected matches count " , 1 , actual ) ; 
 + } 
 + 
 private static boolean isControlCharacter ( final int character ) { 
 return Arrays . binarySearch ( C0 _ CONTROL _ CHARACTER _ INDICES , character ) > = 0 
 | | Arrays . binarySearch ( C1 _ CONTROL _ CHARACTER _ INDICES , character ) > = 0 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java 
 index df38983 . . 7d8af46 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheckTest . java 
 @ @ - 346 , 4 + 346 , 34 @ @ public class DescendantTokenCheckTest extends AbstractModuleTestSupport { 
 
 verify ( checkConfig , getPath ( " InputDescendantTokenReturnFromFinally . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testMaxTokenType ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( DescendantTokenCheck . class ) ; 
 + checkConfig . addAttribute ( " tokens " , " OBJBLOCK " ) ; 
 + checkConfig . addAttribute ( " limitedTokens " , " LCURLY , RCURLY " ) ; 
 + checkConfig . addAttribute ( " maximumNumber " , " 0 " ) ; 
 + checkConfig . addAttribute ( " maximumDepth " , " 2 " ) ; 
 + final String [ ] expected = { 
 + " 6 : 48 : " + getCheckMessage ( MSG _ KEY _ MAX , 1 , 0 , " OBJBLOCK " , " LCURLY " ) , 
 + " 6 : 48 : " + getCheckMessage ( MSG _ KEY _ MAX , 1 , 0 , " OBJBLOCK " , " RCURLY " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputDescendantTokenLastTokenType . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testMaxTokenTypeReverseOrder ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( DescendantTokenCheck . class ) ; 
 + checkConfig . addAttribute ( " tokens " , " OBJBLOCK " ) ; 
 + checkConfig . addAttribute ( " limitedTokens " , " RCURLY , LCURLY " ) ; 
 + checkConfig . addAttribute ( " maximumNumber " , " 0 " ) ; 
 + checkConfig . addAttribute ( " maximumDepth " , " 2 " ) ; 
 + final String [ ] expected = { 
 + " 6 : 48 : " + getCheckMessage ( MSG _ KEY _ MAX , 1 , 0 , " OBJBLOCK " , " LCURLY " ) , 
 + " 6 : 48 : " + getCheckMessage ( MSG _ KEY _ MAX , 1 , 0 , " OBJBLOCK " , " RCURLY " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputDescendantTokenLastTokenType . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 index 6bfe34a . . 6c380c8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 @ @ - 25 , 7 + 25 , 13 @ @ import static java . util . Locale . ENGLISH ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 + import static org . mockito . Matchers . any ; 
 + import static org . mockito . Matchers . anyBoolean ; 
 + import static org . mockito . Mockito . times ; 
 + import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 import static org . powermock . api . mockito . PowerMockito . mock ; 
 + import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 + import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 import static org . powermock . api . mockito . PowerMockito . when ; 
 
 import java . io . File ; 
 @ @ - 39 , 7 + 45 , 11 @ @ import java . util . List ; 
 import java . util . Set ; 
 
 import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + import org . powermock . core . classloader . annotations . PrepareForTest ; 
 + import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 + import com . google . common . io . Closeables ; 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 @ @ - 47 , 6 + 57 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 + @ RunWith ( PowerMockRunner . class ) 
 + @ PrepareForTest ( Closeables . class ) 
 public class NewlineAtEndOfFileCheckTest 
 extends AbstractModuleTestSupport { 
 @ Override 
 @ @ - 66 , 6 + 78 , 31 @ @ public class NewlineAtEndOfFileCheckTest 
 expected ) ; 
 } 
 
 + / * * 
 + * Pitest requires all closes of streams and readers to be verified . Using PowerMock 
 + * is almost only posibility to check it without rewriting production code . 
 + * 
 + * @ throws Exception when code tested throws some exception 
 + * / 
 + @ Test 
 + public void testCloseRandomAccessFile ( ) throws Exception { 
 + mockStatic ( Closeables . class ) ; 
 + doNothing ( ) . when ( Closeables . class ) ; 
 + Closeables . close ( any ( RandomAccessFile . class ) , anyBoolean ( ) ) ; 
 + 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( NewlineAtEndOfFileCheck . class ) ; 
 + checkConfig . addAttribute ( " lineSeparator " , LineSeparatorOption . LF . toString ( ) ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( 
 + createChecker ( checkConfig ) , 
 + getPath ( " InputNewlineLfAtEndOfFile . java " ) , 
 + expected ) ; 
 + 
 + verifyStatic ( times ( 1 ) ) ; 
 + Closeables . close ( any ( RandomAccessFile . class ) , anyBoolean ( ) ) ; 
 + } 
 + 
 @ Test 
 public void testNewlineCrlfAtEndOfFile ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 @ @ - 172 , 6 + 209 , 18 @ @ public class NewlineAtEndOfFileCheckTest 
 } 
 
 @ Test 
 + public void testFileWithEmptyLineOnly ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( NewlineAtEndOfFileCheck . class ) ; 
 + checkConfig . addAttribute ( " lineSeparator " , LineSeparatorOption . LF . toString ( ) ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( 
 + createChecker ( checkConfig ) , 
 + getPath ( " InputNewlineAtTheEndOfTheEmptyFile . txt " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 public void testWrongFile ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( NewlineAtEndOfFileCheck . class ) ; 
 final NewlineAtEndOfFileCheck check = new NewlineAtEndOfFileCheck ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java 
 index 736537e . . 549f71c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java 
 @ @ - 93 , 6 + 93 , 13 @ @ public class OuterTypeFilenameCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testPublicClassIsNotFirst ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( OuterTypeFilenameCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputOuterTypeFilenameCheckPublic . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testFineDefault ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( OuterTypeFilenameCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 index 62d2c59 . . 46f5e43 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 @ @ - 86 , 6 + 86 , 16 @ @ public class UncommentedMainCheckTest 
 } 
 
 @ Test 
 + public void testVisitPackage ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( UncommentedMainCheck . class ) ; 
 + checkConfig . addAttribute ( " excludedClasses " , " uncommentedmain \ \ . InputUncommentedMain5 " ) ; 
 + final String [ ] expected = { 
 + " 14 : " + getCheckMessage ( MSG _ KEY ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputUncommentedMain5 . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testWrongName ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( UncommentedMainCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 index c80873a . . 0494500 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 @ @ - 22 , 6 + 22 , 11 @ @ package com . puppycrawl . tools . checkstyle . checks ; 
 import static com . puppycrawl . tools . checkstyle . checks . UniquePropertiesCheck . MSG _ IO _ EXCEPTION _ KEY ; 
 import static com . puppycrawl . tools . checkstyle . checks . UniquePropertiesCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . mockito . Matchers . any ; 
 + import static org . mockito . Mockito . times ; 
 + import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 + import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 + import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 
 import java . io . File ; 
 import java . io . FileInputStream ; 
 @ @ - 39 , 15 + 44 , 22 @ @ import java . util . SortedSet ; 
 import org . junit . Assert ; 
 import org . junit . Before ; 
 import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + import org . powermock . core . classloader . annotations . PrepareForTest ; 
 + import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 + import com . google . common . io . Closeables ; 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 * JUnit tests for Unique Properties check . 
 * / 
 + @ RunWith ( PowerMockRunner . class ) 
 + @ PrepareForTest ( Closeables . class ) 
 public class UniquePropertiesCheckTest extends AbstractModuleTestSupport { 
 
 private DefaultConfiguration checkConfig ; 
 @ @ - 89 , 6 + 101 , 25 @ @ public class UniquePropertiesCheckTest extends AbstractModuleTestSupport { 
 } 
 
 / * * 
 + * Pitest requires all closes of streams and readers to be verified . Using PowerMock 
 + * is almost only posibility to check it without rewriting production code . 
 + * 
 + * @ throws Exception when code tested throws some exception 
 + * / 
 + @ Test 
 + public void testCloseInputStream ( ) throws Exception { 
 + mockStatic ( Closeables . class ) ; 
 + doNothing ( ) . when ( Closeables . class ) ; 
 + Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; 
 + 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputUniquePropertiesWithoutErrors . properties " ) , expected ) ; 
 + 
 + verifyStatic ( times ( 1 ) ) ; 
 + Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; 
 + } 
 + 
 + / * * 
 * Tests the { @ link UniquePropertiesCheck # getLineNumber ( FileText , String ) } 
 * method return value . 
 * / 
 @ @ - 109 , 6 + 140 , 20 @ @ public class UniquePropertiesCheckTest extends AbstractModuleTestSupport { 
 assertEquals ( " Invalid line number " , 0 , lineNumber ) ; 
 } 
 
 + @ Test 
 + public void testDuplicatedProperty ( ) throws Exception { 
 + final String [ ] expected = { 
 + " 2 : " + getCheckMessage ( MSG _ KEY , " key " , 2 ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputUniquePropertiesWithDuplicates . properties " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testShouldNotProcessFilesWithWrongFileExtension ( ) throws Exception { 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputUniqueProperties . txt " ) , expected ) ; 
 + } 
 + 
 / * * 
 * Tests IO exception , that can occur during reading of properties file . 
 * / 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / arraytypestyle / InputArrayTypeStyle . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / arraytypestyle / InputArrayTypeStyle . java 
 index c64f637 . . 954f5bc 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / arraytypestyle / InputArrayTypeStyle . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / arraytypestyle / InputArrayTypeStyle . java 
 @ @ - 12 , 6 + 12 , 7 @ @ public class InputArrayTypeStyle 
 { 
 private int [ ] javaStyle = new int [ 0 ] ; 
 private int cStyle [ ] = new int [ 0 ] ; 
 + private int c [ ] = new int [ 0 ] ; 
 
 public static void mainJava ( String [ ] aJavaStyle ) 
 { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / descendanttoken / InputDescendantTokenLastTokenType . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / descendanttoken / InputDescendantTokenLastTokenType . java 
 new file mode 100644 
 index 0000000 . . 34cdcd2 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / descendanttoken / InputDescendantTokenLastTokenType . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . misc . descendanttoken ; 
 + 
 + / * * 
 + * Created by valeria on 8 / 19 / 17 . 
 + * / 
 + public class InputDescendantTokenLastTokenType { } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineAtTheEndOfTheEmptyFile . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineAtTheEndOfTheEmptyFile . txt 
 new file mode 100644 
 index 0000000 . . 8b13789 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / newlineatendoffile / InputNewlineAtTheEndOfTheEmptyFile . txt 
 @ @ - 0 , 0 + 1 @ @ 
 + 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / outertypefilename / InputOuterTypeFilenameCheckPublic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / outertypefilename / InputOuterTypeFilenameCheckPublic . java 
 new file mode 100644 
 index 0000000 . . 76a2c4b 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / outertypefilename / InputOuterTypeFilenameCheckPublic . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + / / someexamples of 1 . 5 extensions 
 + package com . puppycrawl . tools . checkstyle . checks . misc . outertypefilename ; 
 + 
 + class UnicClassName { 
 + 
 + } 
 + 
 + public class InputOuterTypeFilenameCheckPublic { 
 + 
 + 
 + } 
 + 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uncommentedmain / InputUncommentedMain5 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uncommentedmain / InputUncommentedMain5 . java 
 new file mode 100644 
 index 0000000 . . 715faee 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uncommentedmain / InputUncommentedMain5 . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . misc . uncommentedmain ; 
 + 
 + public class InputUncommentedMain5 
 + { 
 + public static void main ( String [ ] args ) 
 + { 
 + System . identityHashCode ( " InputUncommentedMain . main ( ) " ) ; 
 + } 
 + } 
 + 
 + class PC { 
 + 
 + / / uncommented main with depth 2 
 + public static void main ( String [ ] args ) 
 + { 
 + System . identityHashCode ( " PC . main ( ) " ) ; 
 + } 
 + 
 + / / lets go deeper 
 + private class PC2 { 
 + 
 + / / uncommented main with depth 3 
 + public void main ( String [ ] args ) 
 + { 
 + System . identityHashCode ( " PC . main ( ) " ) ; 
 + } 
 + 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniqueProperties . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniqueProperties . txt 
 new file mode 100644 
 index 0000000 . . 120bc85 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniqueProperties . txt 
 @ @ - 0 , 0 + 1 , 2 @ @ 
 + 1 = val 
 + 1 = foo 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniquePropertiesWithDuplicates . properties b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniquePropertiesWithDuplicates . properties 
 new file mode 100644 
 index 0000000 . . 36b0d84 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniquePropertiesWithDuplicates . properties 
 @ @ - 0 , 0 + 1 , 3 @ @ 
 + host = localhost 
 + key = value1 
 + key = value2 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniquePropertiesWithoutErrors . properties b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniquePropertiesWithoutErrors . properties 
 new file mode 100644 
 index 0000000 . . 48580bf 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / uniqueproperties / InputUniquePropertiesWithoutErrors . properties 
 @ @ - 0 , 0 + 1 , 2 @ @ 
 + key1 = value1 
 + key2 = value2

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 index b74a614 . . 1ad746a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import java . util . Optional ; 
 import java . util . Set ; 
 import java . util . function . Predicate ; 
 import java . util . stream . Collectors ; 
 - import java . util . stream . Stream ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 @ @ - 102 , 8 + 101 , 8 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 / * * 
 * A set of annotations which allow the check to skip the method from validation . 
 * / 
 - private Set < String > ignoredAnnotations = Stream . of ( " Test " , " Before " , " After " , " BeforeClass " , 
 - " AfterClass " ) . collect ( Collectors . toSet ( ) ) ; 
 + private Set < String > ignoredAnnotations = Arrays . stream ( new String [ ] { " Test " , " Before " , " After " , 
 + " BeforeClass " , " AfterClass " , } ) . collect ( Collectors . toSet ( ) ) ; 
 
 / * * 
 * Sets annotations which allow the check to skip the method from validation . 
 @ @ - 139 , 9 + 138 , 9 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 if ( ! hasJavadocComment ( ast ) 
 + & & canBeOverridden ( ast ) 
 & & ( isNativeMethod ( ast ) 
 | | ! hasEmptyImplementation ( ast ) ) 
 - & & canBeOverridden ( ast ) 
 & & ! hasIgnoredAnnotation ( ast , ignoredAnnotations ) ) { 
 
 final DetailAST classDef = getNearestClassOrEnumDefinition ( ast ) ; 
 @ @ - 182 , 19 + 181 , 17 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 private static boolean hasEmptyImplementation ( DetailAST ast ) { 
 boolean hasEmptyBody = true ; 
 final DetailAST methodImplOpenBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 - if ( methodImplOpenBrace ! = null ) { 
 - final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; 
 - final Predicate < DetailAST > predicate = currentNode - > { 
 - return currentNode ! = null 
 - & & currentNode ! = methodImplCloseBrace 
 - & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) 
 - & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; 
 - } ; 
 - final Optional < DetailAST > methodBody = 
 - TokenUtils . findFirstTokenByPredicate ( methodImplOpenBrace , predicate ) ; 
 - if ( methodBody . isPresent ( ) ) { 
 - hasEmptyBody = false ; 
 - } 
 + final DetailAST methodImplCloseBrace = methodImplOpenBrace . getLastChild ( ) ; 
 + final Predicate < DetailAST > predicate = currentNode - > { 
 + return currentNode ! = null 
 + & & currentNode ! = methodImplCloseBrace 
 + & & currentNode . getLineNo ( ) < = methodImplCloseBrace . getLineNo ( ) 
 + & & ! TokenUtils . isCommentType ( currentNode . getType ( ) ) ; 
 + } ; 
 + final Optional < DetailAST > methodBody = 
 + TokenUtils . findFirstTokenByPredicate ( methodImplOpenBrace , predicate ) ; 
 + if ( methodBody . isPresent ( ) ) { 
 + hasEmptyBody = false ; 
 } 
 return hasEmptyBody ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java 
 index afa1512 . . 8453755 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputDesignForExtensionOverridableMethods . java 
 @ @ - 218 , 4 + 218 , 8 @ @ public class InputDesignForExtensionOverridableMethods { 
 
 protected final int foo4 ( int a , int b ) { return a + b ; } 
 } 
 + 
 + public abstract class C { 
 + public abstract void foo1 ( int a ) ; 
 + } 
 }
