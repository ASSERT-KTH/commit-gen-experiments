BLEU SCORE: 0.020980574531482755

TEST MSG: Issue # 6586 : aligned javadoc / xdoc for PackageDeclaration
GENERATED MSG: removing ignoreDirectoryName option from PackageDeclarationCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheck . java <nl> index 62c0f9f . . 6419f1c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheck . java <nl> @ @ - 28 , 15 + 28 , 62 @ @ import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> - * Ensures there is a package declaration . <nl> - * Optionally checks if directory structure matches package name . <nl> - * Rationale : Classes that live in the null package cannot be <nl> - * imported . Many novice developers are not aware of this . <nl> + * < p > <nl> + * Ensures that a class has a package declaration , and ( optionally ) whether <nl> + * the package name matches the directory name for the source file . <nl> + * < / p > <nl> + * < p > <nl> + * Rationale : Classes that live in the null package cannot be imported . <nl> + * Many novice developers are not aware of this . <nl> + * < / p > <nl> + * < p > <nl> * Packages provide logical namespace to classes and should be stored in <nl> * the form of directory levels to provide physical grouping to your classes . <nl> * These directories are added to the classpath so that your classes <nl> * are visible to JVM when it runs the code . <nl> + * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code matchDirectoryStructure } - Control whether to check for <nl> + * directory and package name match . <nl> + * Default value is { @ code true } . <nl> + * < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * To configure the check : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; PackageDeclaration & quot ; / & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * Let us consider the class AnnotationLocationCheck which is in the directory <nl> + * / com / puppycrawl / tools / checkstyle / checks / annotations / <nl> + * < / p > <nl> + * < pre > <nl> + * package com . puppycrawl . tools . checkstyle . checks ; / / Violation <nl> + * public class AnnotationLocationCheck extends AbstractCheck { <nl> + * / / . . . <nl> + * } <nl> + * < / pre > <nl> + * < p > <nl> + * Example of how the check works when matchDirectoryStructure option is set to false . <nl> + * Let us again consider the AnnotationLocationCheck class located at directory <nl> + * / com / puppycrawl / tools / checkstyle / checks / annotations / along with the following setup , <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; PackageDeclaration & quot ; & gt ; <nl> + * & lt ; property name = & quot ; matchDirectoryStructure & quot ; value = & quot ; false & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < pre > <nl> + * package com . puppycrawl . tools . checkstyle . checks ; / / No Violation <nl> * <nl> + * public class AnnotationLocationCheck extends AbstractCheck { <nl> + * / / . . . <nl> + * } <nl> + * < / pre > <nl> + * <nl> + * @ since 3 . 2 <nl> * / <nl> @ FileStatefulCheck <nl> public final class PackageDeclarationCheck extends AbstractCheck { <nl> @ @ - 59 , 11 + 106 , 11 @ @ public final class PackageDeclarationCheck extends AbstractCheck { <nl> / * * Is package defined . * / <nl> private boolean defined ; <nl> <nl> - / * * Whether to check for directory and package name match . * / <nl> + / * * Control whether to check for directory and package name match . * / <nl> private boolean matchDirectoryStructure = true ; <nl> <nl> / * * <nl> - * Set whether to check for directory and package name match . <nl> + * Setter to control whether to check for directory and package name match . <nl> * @ param matchDirectoryStructure the new value . <nl> * / <nl> public void setMatchDirectoryStructure ( boolean matchDirectoryStructure ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 830f148 . . 4d7d69d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 114 , 6 + 114 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " NeedBraces " , <nl> " NoClone " , <nl> " PackageAnnotation " , <nl> + " PackageDeclaration " , <nl> " PackageName " , <nl> " ParameterName " , <nl> " RequireThis " , <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 27a28fc . . 6e485d6 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 3663 , 8 + 3663 , 8 @ @ public void foo ( int i , String s ) { } <nl> < / section > <nl> <nl> < section name = " PackageDeclaration " > <nl> + < p > Since Checkstyle 3 . 2 < / p > <nl> < subsection name = " Description " id = " PackageDeclaration _ Description " > <nl> - < p > Since Checkstyle 3 . 2 < / p > <nl> < p > <nl> Ensures that a class has a package declaration , and ( optionally ) whether <nl> the package name matches the directory name for the source file . <nl> @ @ - 3692 , 7 + 3692 , 7 @ @ public void foo ( int i , String s ) { } <nl> < / tr > <nl> < tr > <nl> < td > matchDirectoryStructure < / td > <nl> - < td > Whether to check for directory and package name match . < / td > <nl> + < td > Control whether to check for directory and package name match . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > < code > true < / code > < / td > <nl> < td > 7 . 6 . 1 < / td >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index 1cef179 . . 1f8155f 100755 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 432 , 9 + 432 , 15 @ @ public final class TreeWalker <nl> final String tokenType = TokenTypes . getTokenName ( aAST . getType ( ) ) ; <nl> <nl> if ( aAstState = = AstState . WITH _ COMMENTS ) { <nl> + if ( ! mTokenToCommentChecks . containsKey ( tokenType ) ) { <nl> + return ; <nl> + } <nl> visitors = mTokenToCommentChecks . get ( tokenType ) ; <nl> } <nl> else { <nl> + if ( ! mTokenToOrdinaryChecks . containsKey ( tokenType ) ) { <nl> + return ; <nl> + } <nl> visitors = mTokenToOrdinaryChecks . get ( tokenType ) ; <nl> } <nl> <nl> @ @ - 455 , 9 + 461 , 15 @ @ public final class TreeWalker <nl> final String tokenType = TokenTypes . getTokenName ( aAST . getType ( ) ) ; <nl> <nl> if ( aAstState = = AstState . WITH _ COMMENTS ) { <nl> + if ( ! mTokenToCommentChecks . containsKey ( tokenType ) ) { <nl> + return ; <nl> + } <nl> visitors = mTokenToCommentChecks . get ( tokenType ) ; <nl> } <nl> else { <nl> + if ( ! mTokenToOrdinaryChecks . containsKey ( tokenType ) ) { <nl> + return ; <nl> + } <nl> visitors = mTokenToOrdinaryChecks . get ( tokenType ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheck . java 
 index 62c0f9f . . 6419f1c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheck . java 
 @ @ - 28 , 15 + 28 , 62 @ @ import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 - * Ensures there is a package declaration . 
 - * Optionally checks if directory structure matches package name . 
 - * Rationale : Classes that live in the null package cannot be 
 - * imported . Many novice developers are not aware of this . 
 + * < p > 
 + * Ensures that a class has a package declaration , and ( optionally ) whether 
 + * the package name matches the directory name for the source file . 
 + * < / p > 
 + * < p > 
 + * Rationale : Classes that live in the null package cannot be imported . 
 + * Many novice developers are not aware of this . 
 + * < / p > 
 + * < p > 
 * Packages provide logical namespace to classes and should be stored in 
 * the form of directory levels to provide physical grouping to your classes . 
 * These directories are added to the classpath so that your classes 
 * are visible to JVM when it runs the code . 
 + * < / p > 
 + * < ul > 
 + * < li > 
 + * Property { @ code matchDirectoryStructure } - Control whether to check for 
 + * directory and package name match . 
 + * Default value is { @ code true } . 
 + * < / li > 
 + * < / ul > 
 + * < p > 
 + * To configure the check : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; PackageDeclaration & quot ; / & gt ; 
 + * < / pre > 
 + * < p > 
 + * Let us consider the class AnnotationLocationCheck which is in the directory 
 + * / com / puppycrawl / tools / checkstyle / checks / annotations / 
 + * < / p > 
 + * < pre > 
 + * package com . puppycrawl . tools . checkstyle . checks ; / / Violation 
 + * public class AnnotationLocationCheck extends AbstractCheck { 
 + * / / . . . 
 + * } 
 + * < / pre > 
 + * < p > 
 + * Example of how the check works when matchDirectoryStructure option is set to false . 
 + * Let us again consider the AnnotationLocationCheck class located at directory 
 + * / com / puppycrawl / tools / checkstyle / checks / annotations / along with the following setup , 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; PackageDeclaration & quot ; & gt ; 
 + * & lt ; property name = & quot ; matchDirectoryStructure & quot ; value = & quot ; false & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < pre > 
 + * package com . puppycrawl . tools . checkstyle . checks ; / / No Violation 
 * 
 + * public class AnnotationLocationCheck extends AbstractCheck { 
 + * / / . . . 
 + * } 
 + * < / pre > 
 + * 
 + * @ since 3 . 2 
 * / 
 @ FileStatefulCheck 
 public final class PackageDeclarationCheck extends AbstractCheck { 
 @ @ - 59 , 11 + 106 , 11 @ @ public final class PackageDeclarationCheck extends AbstractCheck { 
 / * * Is package defined . * / 
 private boolean defined ; 
 
 - / * * Whether to check for directory and package name match . * / 
 + / * * Control whether to check for directory and package name match . * / 
 private boolean matchDirectoryStructure = true ; 
 
 / * * 
 - * Set whether to check for directory and package name match . 
 + * Setter to control whether to check for directory and package name match . 
 * @ param matchDirectoryStructure the new value . 
 * / 
 public void setMatchDirectoryStructure ( boolean matchDirectoryStructure ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 830f148 . . 4d7d69d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 114 , 6 + 114 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " NeedBraces " , 
 " NoClone " , 
 " PackageAnnotation " , 
 + " PackageDeclaration " , 
 " PackageName " , 
 " ParameterName " , 
 " RequireThis " , 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 27a28fc . . 6e485d6 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 3663 , 8 + 3663 , 8 @ @ public void foo ( int i , String s ) { } 
 < / section > 
 
 < section name = " PackageDeclaration " > 
 + < p > Since Checkstyle 3 . 2 < / p > 
 < subsection name = " Description " id = " PackageDeclaration _ Description " > 
 - < p > Since Checkstyle 3 . 2 < / p > 
 < p > 
 Ensures that a class has a package declaration , and ( optionally ) whether 
 the package name matches the directory name for the source file . 
 @ @ - 3692 , 7 + 3692 , 7 @ @ public void foo ( int i , String s ) { } 
 < / tr > 
 < tr > 
 < td > matchDirectoryStructure < / td > 
 - < td > Whether to check for directory and package name match . < / td > 
 + < td > Control whether to check for directory and package name match . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > < code > true < / code > < / td > 
 < td > 7 . 6 . 1 < / td >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index 1cef179 . . 1f8155f 100755 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 432 , 9 + 432 , 15 @ @ public final class TreeWalker 
 final String tokenType = TokenTypes . getTokenName ( aAST . getType ( ) ) ; 
 
 if ( aAstState = = AstState . WITH _ COMMENTS ) { 
 + if ( ! mTokenToCommentChecks . containsKey ( tokenType ) ) { 
 + return ; 
 + } 
 visitors = mTokenToCommentChecks . get ( tokenType ) ; 
 } 
 else { 
 + if ( ! mTokenToOrdinaryChecks . containsKey ( tokenType ) ) { 
 + return ; 
 + } 
 visitors = mTokenToOrdinaryChecks . get ( tokenType ) ; 
 } 
 
 @ @ - 455 , 9 + 461 , 15 @ @ public final class TreeWalker 
 final String tokenType = TokenTypes . getTokenName ( aAST . getType ( ) ) ; 
 
 if ( aAstState = = AstState . WITH _ COMMENTS ) { 
 + if ( ! mTokenToCommentChecks . containsKey ( tokenType ) ) { 
 + return ; 
 + } 
 visitors = mTokenToCommentChecks . get ( tokenType ) ; 
 } 
 else { 
 + if ( ! mTokenToOrdinaryChecks . containsKey ( tokenType ) ) { 
 + return ; 
 + } 
 visitors = mTokenToOrdinaryChecks . get ( tokenType ) ; 
 } 

