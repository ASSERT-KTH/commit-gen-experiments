BLEU SCORE: 0.06285596338261261

TEST MSG: Revert " config : fix wercker CI , see details at # 6218 "
GENERATED MSG: config : skip forbiddenapi and checkstyle on hibernate - search build in wercker

TEST DIFF (one line): diff - - git a / . ci / wercker . sh b / . ci / wercker . sh <nl> index 2ee06cd . . 19e4679 100755 <nl> - - - a / . ci / wercker . sh <nl> + + + b / . ci / wercker . sh <nl> @ @ - 94 , 7 + 94 , 6 @ @ no - error - hibernate - search ) <nl> echo CS _ version : $ { CS _ POM _ VERSION } <nl> checkout _ from https : / / github . com / hibernate / hibernate - search . git <nl> cd . ci - temp / hibernate - search <nl> - git checkout " af7ff2cb51a76c " " da62b0de22d " " cd4b824359247b8 " <nl> mvn - e clean install - DskipTests = true - Dtest . elasticsearch . host . provided = true \ <nl> - Dcheckstyle . skip = true - Dforbiddenapis . skip = true \ <nl> - Dpuppycrawl . checkstyle . version = $ { CS _ POM _ VERSION }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index bc39110 . . 1e34daf 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 146 , 12 + 146 , 12 @ @ public class RequireThisCheck extends AbstractCheck { <nl> TokenTypes . BXOR _ ASSIGN , <nl> } ) . collect ( Collectors . toSet ( ) ) ) ; <nl> <nl> + / * * Frame for the currently processed AST . * / <nl> + private final Deque < AbstractFrame > current = new ArrayDeque < > ( ) ; <nl> + <nl> / * * Tree of all the parsed frames . * / <nl> private Map < DetailAST , AbstractFrame > frames ; <nl> <nl> - / * * Frame for the currently processed AST . * / <nl> - private AbstractFrame current ; <nl> - <nl> / * * Whether we should check fields usage . * / <nl> private boolean checkFields = true ; <nl> / * * Whether we should check methods usage . * / <nl> @ @ - 210 , 7 + 210 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> @ Override <nl> public void beginTree ( DetailAST rootAST ) { <nl> frames = new HashMap < > ( ) ; <nl> - current = null ; <nl> + current . clear ( ) ; <nl> <nl> final Deque < AbstractFrame > frameStack = new LinkedList < > ( ) ; <nl> DetailAST curNode = rootAST ; <nl> @ @ - 241 , 7 + 241 , 24 @ @ public class RequireThisCheck extends AbstractCheck { <nl> case TokenTypes . SLIST : <nl> case TokenTypes . METHOD _ DEF : <nl> case TokenTypes . CTOR _ DEF : <nl> - current = frames . get ( ast ) ; <nl> + current . push ( frames . get ( ast ) ) ; <nl> + break ; <nl> + default : <nl> + / / do nothing <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void leaveToken ( DetailAST ast ) { <nl> + switch ( ast . getType ( ) ) { <nl> + case TokenTypes . CLASS _ DEF : <nl> + case TokenTypes . INTERFACE _ DEF : <nl> + case TokenTypes . ENUM _ DEF : <nl> + case TokenTypes . ANNOTATION _ DEF : <nl> + case TokenTypes . SLIST : <nl> + case TokenTypes . METHOD _ DEF : <nl> + case TokenTypes . CTOR _ DEF : <nl> + current . pop ( ) ; <nl> break ; <nl> default : <nl> / / do nothing <nl> @ @ - 843 , 7 + 860 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> * @ return AbstractFrame containing declaration or null . <nl> * / <nl> private AbstractFrame findClassFrame ( DetailAST name , boolean lookForMethod ) { <nl> - AbstractFrame frame = current ; <nl> + AbstractFrame frame = current . peek ( ) ; <nl> <nl> while ( true ) { <nl> frame = findFrame ( frame , name , lookForMethod ) ; <nl> @ @ - 865 , 7 + 882 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> * @ return AbstractFrame containing declaration or null . <nl> * / <nl> private AbstractFrame findFrame ( DetailAST name , boolean lookForMethod ) { <nl> - return findFrame ( current , name , lookForMethod ) ; <nl> + return findFrame ( current . peek ( ) , name , lookForMethod ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 912 , 7 + 929 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> * @ return the name of the nearest parent ClassFrame . <nl> * / <nl> private String getNearestClassFrameName ( ) { <nl> - AbstractFrame frame = current ; <nl> + AbstractFrame frame = current . peek ( ) ; <nl> while ( frame . getType ( ) ! = FrameType . CLASS _ FRAME ) { <nl> frame = frame . getParent ( ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index 4d70dc8 . . 512aaa8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 61 , 6 + 61 , 8 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { <nl> " 122 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " Issue2240 . " ) , <nl> " 134 : 9 : " + getCheckMessage ( MSG _ METHOD , " foo " , " " ) , <nl> " 142 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s " , " " ) , <nl> + " 167 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , <nl> + " 167 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputRequireThisEnumInnerClassesAndBugs . java " ) , <nl> @ @ - 99 , 6 + 101 , 8 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { <nl> " 114 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " " ) , <nl> " 122 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " Issue2240 . " ) , <nl> " 142 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s " , " " ) , <nl> + " 167 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , <nl> + " 167 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputRequireThisEnumInnerClassesAndBugs . java " ) , <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java <nl> index bf87c8a . . 872996d 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java <nl> @ @ - 150 , 3 + 150 , 20 @ @ class NestedRechange { <nl> } <nl> } <nl> } <nl> + class NestedFrames { <nl> + int a = 0 ; <nl> + <nl> + public int oneReturnInMethod2 ( ) { <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + int a = 1 ; <nl> + if ( a ! = 2 & & true ) { <nl> + if ( true | false ) { <nl> + if ( a - a ! = 0 ) { <nl> + a + = 1 ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + return a + a * a ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / . ci / wercker . sh b / . ci / wercker . sh 
 index 2ee06cd . . 19e4679 100755 
 - - - a / . ci / wercker . sh 
 + + + b / . ci / wercker . sh 
 @ @ - 94 , 7 + 94 , 6 @ @ no - error - hibernate - search ) 
 echo CS _ version : $ { CS _ POM _ VERSION } 
 checkout _ from https : / / github . com / hibernate / hibernate - search . git 
 cd . ci - temp / hibernate - search 
 - git checkout " af7ff2cb51a76c " " da62b0de22d " " cd4b824359247b8 " 
 mvn - e clean install - DskipTests = true - Dtest . elasticsearch . host . provided = true \ 
 - Dcheckstyle . skip = true - Dforbiddenapis . skip = true \ 
 - Dpuppycrawl . checkstyle . version = $ { CS _ POM _ VERSION }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index bc39110 . . 1e34daf 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 146 , 12 + 146 , 12 @ @ public class RequireThisCheck extends AbstractCheck { 
 TokenTypes . BXOR _ ASSIGN , 
 } ) . collect ( Collectors . toSet ( ) ) ) ; 
 
 + / * * Frame for the currently processed AST . * / 
 + private final Deque < AbstractFrame > current = new ArrayDeque < > ( ) ; 
 + 
 / * * Tree of all the parsed frames . * / 
 private Map < DetailAST , AbstractFrame > frames ; 
 
 - / * * Frame for the currently processed AST . * / 
 - private AbstractFrame current ; 
 - 
 / * * Whether we should check fields usage . * / 
 private boolean checkFields = true ; 
 / * * Whether we should check methods usage . * / 
 @ @ - 210 , 7 + 210 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 @ Override 
 public void beginTree ( DetailAST rootAST ) { 
 frames = new HashMap < > ( ) ; 
 - current = null ; 
 + current . clear ( ) ; 
 
 final Deque < AbstractFrame > frameStack = new LinkedList < > ( ) ; 
 DetailAST curNode = rootAST ; 
 @ @ - 241 , 7 + 241 , 24 @ @ public class RequireThisCheck extends AbstractCheck { 
 case TokenTypes . SLIST : 
 case TokenTypes . METHOD _ DEF : 
 case TokenTypes . CTOR _ DEF : 
 - current = frames . get ( ast ) ; 
 + current . push ( frames . get ( ast ) ) ; 
 + break ; 
 + default : 
 + / / do nothing 
 + } 
 + } 
 + 
 + @ Override 
 + public void leaveToken ( DetailAST ast ) { 
 + switch ( ast . getType ( ) ) { 
 + case TokenTypes . CLASS _ DEF : 
 + case TokenTypes . INTERFACE _ DEF : 
 + case TokenTypes . ENUM _ DEF : 
 + case TokenTypes . ANNOTATION _ DEF : 
 + case TokenTypes . SLIST : 
 + case TokenTypes . METHOD _ DEF : 
 + case TokenTypes . CTOR _ DEF : 
 + current . pop ( ) ; 
 break ; 
 default : 
 / / do nothing 
 @ @ - 843 , 7 + 860 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 * @ return AbstractFrame containing declaration or null . 
 * / 
 private AbstractFrame findClassFrame ( DetailAST name , boolean lookForMethod ) { 
 - AbstractFrame frame = current ; 
 + AbstractFrame frame = current . peek ( ) ; 
 
 while ( true ) { 
 frame = findFrame ( frame , name , lookForMethod ) ; 
 @ @ - 865 , 7 + 882 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 * @ return AbstractFrame containing declaration or null . 
 * / 
 private AbstractFrame findFrame ( DetailAST name , boolean lookForMethod ) { 
 - return findFrame ( current , name , lookForMethod ) ; 
 + return findFrame ( current . peek ( ) , name , lookForMethod ) ; 
 } 
 
 / * * 
 @ @ - 912 , 7 + 929 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 * @ return the name of the nearest parent ClassFrame . 
 * / 
 private String getNearestClassFrameName ( ) { 
 - AbstractFrame frame = current ; 
 + AbstractFrame frame = current . peek ( ) ; 
 while ( frame . getType ( ) ! = FrameType . CLASS _ FRAME ) { 
 frame = frame . getParent ( ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index 4d70dc8 . . 512aaa8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 61 , 6 + 61 , 8 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { 
 " 122 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " Issue2240 . " ) , 
 " 134 : 9 : " + getCheckMessage ( MSG _ METHOD , " foo " , " " ) , 
 " 142 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s " , " " ) , 
 + " 167 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , 
 + " 167 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputRequireThisEnumInnerClassesAndBugs . java " ) , 
 @ @ - 99 , 6 + 101 , 8 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { 
 " 114 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " " ) , 
 " 122 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " Issue2240 . " ) , 
 " 142 : 9 : " + getCheckMessage ( MSG _ VARIABLE , " s " , " " ) , 
 + " 167 : 16 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , 
 + " 167 : 20 : " + getCheckMessage ( MSG _ VARIABLE , " a " , " " ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputRequireThisEnumInnerClassesAndBugs . java " ) , 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java 
 index bf87c8a . . 872996d 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java 
 @ @ - 150 , 3 + 150 , 20 @ @ class NestedRechange { 
 } 
 } 
 } 
 + class NestedFrames { 
 + int a = 0 ; 
 + 
 + public int oneReturnInMethod2 ( ) { 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + int a = 1 ; 
 + if ( a ! = 2 & & true ) { 
 + if ( true | false ) { 
 + if ( a - a ! = 0 ) { 
 + a + = 1 ; 
 + } 
 + } 
 + } 
 + } 
 + return a + a * a ; 
 + } 
 + }
