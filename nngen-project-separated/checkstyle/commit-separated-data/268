BLEU SCORE: 0.7292571723872933

TEST MSG: config : bump system - rules to 1 . 18 . 0
GENERATED MSG: config : bump system - rules to 1 . 17 . 2

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 9c522e8 . . 3dd8011 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 281 , 7 + 281 , 7 @ @ <nl> < dependency > <nl> < groupId > com . github . stefanbirkner < / groupId > <nl> < artifactId > system - rules < / artifactId > <nl> - < version > 1 . 17 . 2 < / version > <nl> + < version > 1 . 18 . 0 < / version > <nl> < scope > test < / scope > <nl> < / dependency > <nl> < dependency >
NEAREST DIFF (one line): diff - - git a / config / pmd - main . xml b / config / pmd - main . xml <nl> index 2eac599 . . 4d19972 100644 <nl> - - - a / config / pmd - main . xml <nl> + + + b / config / pmd - main . xml <nl> @ @ - 11 , 10 + 11 , 10 @ @ <nl> < exclude - pattern > . * / src / test / . * < / exclude - pattern > <nl> < rule ref = " config / pmd . xml " / > <nl> <nl> - < rule ref = " rulesets / java / basic . xml / CollapsibleIfStatements " > <nl> + < rule ref = " category / java / design . xml / CollapsibleIfStatements " > <nl> < properties > <nl> - < ! - - till https : / / github . com / hcoles / pitest / issues / 377 - - > <nl> - < property name = " violationSuppressXPath " value = " / / MethodDeclaration [ @ Name = ' main ' and . . / . . / . . [ @ Image = ' Main ' ] ] " / > <nl> + < ! - - Till https : / / github . com / hcoles / pitest / issues / 377 - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' Main ' ] / / MethodDeclaration [ @ Name = ' main ' ] " / > <nl> < / properties > <nl> < / rule > <nl> <nl> diff - - git a / config / pmd - test . xml b / config / pmd - test . xml <nl> index 730cbad . . 2f0173c 100644 <nl> - - - a / config / pmd - test . xml <nl> + + + b / config / pmd - test . xml <nl> @ @ - 112 , 13 + 112 , 6 @ @ <nl> < / properties > <nl> < / rule > <nl> <nl> - < rule ref = " config / pmd . xml / ConfusingTernary " > <nl> - < properties > <nl> - < ! - - false positive : commit validation is a sequence of checks , if we shuffle them it would be broken - - > <nl> - < property name = " violationSuppressXPath " value = " / / MethodDeclaration [ @ Name = ' validateCommitMessage ' and . . / . . / . . [ @ Image = ' CommitValidationTest ' ] ] " / > <nl> - < / properties > <nl> - < / rule > <nl> - <nl> < rule ref = " category / java / bestpractices . xml / JUnit4TestShouldUseBeforeAnnotation " > <nl> < properties > <nl> < ! - - A false positive . - - > <nl> @ @ - 138 , 9 + 131 , 17 @ @ <nl> < / properties > <nl> < / rule > <nl> <nl> - < rule ref = " rulesets / java / naming . xml / ShortMethodName " > <nl> + < rule ref = " category / java / codestyle . xml / ConfusingTernary " > <nl> + < properties > <nl> + < ! - - A false positive : commit validation is a sequence of checks , if we shuffle them <nl> + it would be broken . - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' CommitValidationTest ' ] / / MethodDeclaration [ @ Name = ' validateCommitMessage ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> + <nl> + < rule ref = " category / java / codestyle . xml / ShortMethodName " > <nl> < properties > <nl> - < ! - - this inherited from GeneratedJavaLexer - - > <nl> + < ! - - This inherited from GeneratedJavaLexer . - - > <nl> < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AstRegressionTest ' ] <nl> | / / ClassOrInterfaceDeclaration [ @ Image = ' AssertGeneratedJavaLexer ' ] / / MethodDeclarator [ @ Image = ' LA ' ] " / > <nl> < / properties > <nl> diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 58c23cf . . 9050348 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 36 , 6 + 36 , 50 @ @ <nl> < / properties > <nl> < / rule > <nl> <nl> + < rule ref = " category / java / codestyle . xml " > <nl> + < ! - - Opposite to UnnecessaryConstructor . - - > <nl> + < exclude name = " AtLeastOneConstructor " / > <nl> + < ! - - Turning a local variable to the field may create design problems and extend the scope of <nl> + the variable . - - > <nl> + < exclude name = " AvoidFinalLocalVariable " / > <nl> + < ! - - Conflicts with names that does not mean in / out . - - > <nl> + < exclude name = " AvoidPrefixingMethodParameters " / > <nl> + < ! - - Calling super ( ) is completely pointless , no matter if class inherits anything or not ; <nl> + it is meaningful only if you do not call implicit constructor of the base class . - - > <nl> + < exclude name = " CallSuperInConstructor " / > <nl> + < ! - - Till https : / / github . com / checkstyle / checkstyle / issues / 5665 - - > <nl> + < exclude name = " CommentDefaultAccessModifier " / > <nl> + < ! - - Pollutes code with modifiers . - - > <nl> + < exclude name = " LocalVariableCouldBeFinal " / > <nl> + < ! - - Pollutes the code with modifiers . We use the ParameterAssignmentCheck to protect the <nl> + parameters . - - > <nl> + < exclude name = " MethodArgumentCouldBeFinal " / > <nl> + < ! - - It is possible only in functional languages and fanatically - pristine code , without <nl> + additional option that are done at ReturnCountExtendedCheck it is not a good rule . - - > <nl> + < exclude name = " OnlyOneReturn " / > <nl> + < ! - - We use CheckstyleCustomShortVariable , to control the length and skip Override methods . - - > <nl> + < exclude name = " ShortVariable " / > <nl> + < / rule > <nl> + < rule ref = " category / java / codestyle . xml / AbstractNaming " > <nl> + < properties > <nl> + < ! - - We can not brake compatibility with previous versions . - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractClassNameCheck ' or @ Image = ' AutomaticBean ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> + < rule ref = " category / java / codestyle . xml / LongVariable " > <nl> + < properties > <nl> + < ! - - Nothing bad with the long and descriptive variable names if only they fit the line , <nl> + but still keep it reasonable . - - > <nl> + < property name = " minimum " value = " 45 " / > <nl> + < / properties > <nl> + < / rule > <nl> + < rule ref = " category / java / codestyle . xml / ShortClassName " > <nl> + < properties > <nl> + < ! - - Main is a good name for the class containing the main method . <nl> + Tag as inner class name is fine . - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' Main ' or @ Image = ' Tag ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> < rule ref = " category / java / errorprone . xml " > <nl> < ! - - That rule is not practical , no options to allow some magic numbers , <nl> we will use our implementation . - - > <nl> @ @ - 69 , 7 + 113 , 6 @ @ <nl> < / rule > <nl> <nl> < rule ref = " rulesets / java / basic . xml " / > <nl> - < rule ref = " rulesets / java / braces . xml " / > <nl> <nl> < rule ref = " category / java / design . xml " > <nl> < ! - - Too much false - positives on the check classes . <nl> @ @ - 334 , 14 + 377 , 8 @ @ <nl> < / properties > <nl> < / rule > <nl> <nl> - < rule ref = " rulesets / java / imports . xml " / > <nl> - <nl> < rule ref = " rulesets / java / migrating . xml " / > <nl> <nl> - < rule ref = " rulesets / java / naming . xml " > <nl> - < ! - - we use CheckstyleCustomShortVariable , to control length ( will be fixed in PMD 5 . 4 ) and skip Override methods - - > <nl> - < exclude name = " ShortVariable " / > <nl> - < / rule > <nl> < rule name = " CheckstyleCustomShortVariable " <nl> message = " Avoid variables with short names that shorter than 2 symbols : { 0 } " <nl> language = " java " <nl> @ @ - 365 , 24 + 402 , 6 @ @ <nl> < / property > <nl> < / properties > <nl> < / rule > <nl> - < rule ref = " rulesets / java / naming . xml / AbstractNaming " > <nl> - < properties > <nl> - < ! - - We can not brake compatibility with previous versions - - > <nl> - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractClassNameCheck ' or @ Image = ' AutomaticBean ' ] " / > <nl> - < / properties > <nl> - < / rule > <nl> - < rule ref = " rulesets / java / naming . xml / LongVariable " > <nl> - < properties > <nl> - < ! - - nothing bad in long and descriptive variable names if only they fit line , but still keep it reasonable - - > <nl> - < property name = " minimum " value = " 45 " / > <nl> - < / properties > <nl> - < / rule > <nl> - < rule ref = " rulesets / java / naming . xml / ShortClassName " > <nl> - < properties > <nl> - < ! - - Main is good name for class containing main method , Tag as inner class name is also fine - - > <nl> - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' Main ' or @ Image = ' Tag ' ] " / > <nl> - < / properties > <nl> - < / rule > <nl> <nl> < rule ref = " rulesets / java / optimizations . xml " > <nl> < ! - - produces more false - positives than real problems - - > <nl> @ @ - 403 , 6 + 422 , 5 @ @ <nl> < property name = " skipAnnotations " value = " true " / > <nl> < / properties > <nl> < / rule > <nl> - < rule ref = " rulesets / java / unnecessary . xml " / > <nl> <nl> < / ruleset >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 9c522e8 . . 3dd8011 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 281 , 7 + 281 , 7 @ @ 
 < dependency > 
 < groupId > com . github . stefanbirkner < / groupId > 
 < artifactId > system - rules < / artifactId > 
 - < version > 1 . 17 . 2 < / version > 
 + < version > 1 . 18 . 0 < / version > 
 < scope > test < / scope > 
 < / dependency > 
 < dependency >

NEAREST DIFF:
diff - - git a / config / pmd - main . xml b / config / pmd - main . xml 
 index 2eac599 . . 4d19972 100644 
 - - - a / config / pmd - main . xml 
 + + + b / config / pmd - main . xml 
 @ @ - 11 , 10 + 11 , 10 @ @ 
 < exclude - pattern > . * / src / test / . * < / exclude - pattern > 
 < rule ref = " config / pmd . xml " / > 
 
 - < rule ref = " rulesets / java / basic . xml / CollapsibleIfStatements " > 
 + < rule ref = " category / java / design . xml / CollapsibleIfStatements " > 
 < properties > 
 - < ! - - till https : / / github . com / hcoles / pitest / issues / 377 - - > 
 - < property name = " violationSuppressXPath " value = " / / MethodDeclaration [ @ Name = ' main ' and . . / . . / . . [ @ Image = ' Main ' ] ] " / > 
 + < ! - - Till https : / / github . com / hcoles / pitest / issues / 377 - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' Main ' ] / / MethodDeclaration [ @ Name = ' main ' ] " / > 
 < / properties > 
 < / rule > 
 
 diff - - git a / config / pmd - test . xml b / config / pmd - test . xml 
 index 730cbad . . 2f0173c 100644 
 - - - a / config / pmd - test . xml 
 + + + b / config / pmd - test . xml 
 @ @ - 112 , 13 + 112 , 6 @ @ 
 < / properties > 
 < / rule > 
 
 - < rule ref = " config / pmd . xml / ConfusingTernary " > 
 - < properties > 
 - < ! - - false positive : commit validation is a sequence of checks , if we shuffle them it would be broken - - > 
 - < property name = " violationSuppressXPath " value = " / / MethodDeclaration [ @ Name = ' validateCommitMessage ' and . . / . . / . . [ @ Image = ' CommitValidationTest ' ] ] " / > 
 - < / properties > 
 - < / rule > 
 - 
 < rule ref = " category / java / bestpractices . xml / JUnit4TestShouldUseBeforeAnnotation " > 
 < properties > 
 < ! - - A false positive . - - > 
 @ @ - 138 , 9 + 131 , 17 @ @ 
 < / properties > 
 < / rule > 
 
 - < rule ref = " rulesets / java / naming . xml / ShortMethodName " > 
 + < rule ref = " category / java / codestyle . xml / ConfusingTernary " > 
 + < properties > 
 + < ! - - A false positive : commit validation is a sequence of checks , if we shuffle them 
 + it would be broken . - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' CommitValidationTest ' ] / / MethodDeclaration [ @ Name = ' validateCommitMessage ' ] " / > 
 + < / properties > 
 + < / rule > 
 + 
 + < rule ref = " category / java / codestyle . xml / ShortMethodName " > 
 < properties > 
 - < ! - - this inherited from GeneratedJavaLexer - - > 
 + < ! - - This inherited from GeneratedJavaLexer . - - > 
 < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AstRegressionTest ' ] 
 | / / ClassOrInterfaceDeclaration [ @ Image = ' AssertGeneratedJavaLexer ' ] / / MethodDeclarator [ @ Image = ' LA ' ] " / > 
 < / properties > 
 diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 58c23cf . . 9050348 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 36 , 6 + 36 , 50 @ @ 
 < / properties > 
 < / rule > 
 
 + < rule ref = " category / java / codestyle . xml " > 
 + < ! - - Opposite to UnnecessaryConstructor . - - > 
 + < exclude name = " AtLeastOneConstructor " / > 
 + < ! - - Turning a local variable to the field may create design problems and extend the scope of 
 + the variable . - - > 
 + < exclude name = " AvoidFinalLocalVariable " / > 
 + < ! - - Conflicts with names that does not mean in / out . - - > 
 + < exclude name = " AvoidPrefixingMethodParameters " / > 
 + < ! - - Calling super ( ) is completely pointless , no matter if class inherits anything or not ; 
 + it is meaningful only if you do not call implicit constructor of the base class . - - > 
 + < exclude name = " CallSuperInConstructor " / > 
 + < ! - - Till https : / / github . com / checkstyle / checkstyle / issues / 5665 - - > 
 + < exclude name = " CommentDefaultAccessModifier " / > 
 + < ! - - Pollutes code with modifiers . - - > 
 + < exclude name = " LocalVariableCouldBeFinal " / > 
 + < ! - - Pollutes the code with modifiers . We use the ParameterAssignmentCheck to protect the 
 + parameters . - - > 
 + < exclude name = " MethodArgumentCouldBeFinal " / > 
 + < ! - - It is possible only in functional languages and fanatically - pristine code , without 
 + additional option that are done at ReturnCountExtendedCheck it is not a good rule . - - > 
 + < exclude name = " OnlyOneReturn " / > 
 + < ! - - We use CheckstyleCustomShortVariable , to control the length and skip Override methods . - - > 
 + < exclude name = " ShortVariable " / > 
 + < / rule > 
 + < rule ref = " category / java / codestyle . xml / AbstractNaming " > 
 + < properties > 
 + < ! - - We can not brake compatibility with previous versions . - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractClassNameCheck ' or @ Image = ' AutomaticBean ' ] " / > 
 + < / properties > 
 + < / rule > 
 + < rule ref = " category / java / codestyle . xml / LongVariable " > 
 + < properties > 
 + < ! - - Nothing bad with the long and descriptive variable names if only they fit the line , 
 + but still keep it reasonable . - - > 
 + < property name = " minimum " value = " 45 " / > 
 + < / properties > 
 + < / rule > 
 + < rule ref = " category / java / codestyle . xml / ShortClassName " > 
 + < properties > 
 + < ! - - Main is a good name for the class containing the main method . 
 + Tag as inner class name is fine . - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' Main ' or @ Image = ' Tag ' ] " / > 
 + < / properties > 
 + < / rule > 
 < rule ref = " category / java / errorprone . xml " > 
 < ! - - That rule is not practical , no options to allow some magic numbers , 
 we will use our implementation . - - > 
 @ @ - 69 , 7 + 113 , 6 @ @ 
 < / rule > 
 
 < rule ref = " rulesets / java / basic . xml " / > 
 - < rule ref = " rulesets / java / braces . xml " / > 
 
 < rule ref = " category / java / design . xml " > 
 < ! - - Too much false - positives on the check classes . 
 @ @ - 334 , 14 + 377 , 8 @ @ 
 < / properties > 
 < / rule > 
 
 - < rule ref = " rulesets / java / imports . xml " / > 
 - 
 < rule ref = " rulesets / java / migrating . xml " / > 
 
 - < rule ref = " rulesets / java / naming . xml " > 
 - < ! - - we use CheckstyleCustomShortVariable , to control length ( will be fixed in PMD 5 . 4 ) and skip Override methods - - > 
 - < exclude name = " ShortVariable " / > 
 - < / rule > 
 < rule name = " CheckstyleCustomShortVariable " 
 message = " Avoid variables with short names that shorter than 2 symbols : { 0 } " 
 language = " java " 
 @ @ - 365 , 24 + 402 , 6 @ @ 
 < / property > 
 < / properties > 
 < / rule > 
 - < rule ref = " rulesets / java / naming . xml / AbstractNaming " > 
 - < properties > 
 - < ! - - We can not brake compatibility with previous versions - - > 
 - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractClassNameCheck ' or @ Image = ' AutomaticBean ' ] " / > 
 - < / properties > 
 - < / rule > 
 - < rule ref = " rulesets / java / naming . xml / LongVariable " > 
 - < properties > 
 - < ! - - nothing bad in long and descriptive variable names if only they fit line , but still keep it reasonable - - > 
 - < property name = " minimum " value = " 45 " / > 
 - < / properties > 
 - < / rule > 
 - < rule ref = " rulesets / java / naming . xml / ShortClassName " > 
 - < properties > 
 - < ! - - Main is good name for class containing main method , Tag as inner class name is also fine - - > 
 - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' Main ' or @ Image = ' Tag ' ] " / > 
 - < / properties > 
 - < / rule > 
 
 < rule ref = " rulesets / java / optimizations . xml " > 
 < ! - - produces more false - positives than real problems - - > 
 @ @ - 403 , 6 + 422 , 5 @ @ 
 < property name = " skipAnnotations " value = " true " / > 
 < / properties > 
 < / rule > 
 - < rule ref = " rulesets / java / unnecessary . xml " / > 
 
 < / ruleset >
