BLEU SCORE: 0.08493098745313143

TEST MSG: Issue # 5104 : added UT to ensure tests are named after production code
GENERATED MSG: Issue # 3891 : created a UT to organize test inputs

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllTestsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllTestsTest . java <nl> index 32b99c9 . . b7269b5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllTestsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllTestsTest . java <nl> @ @ - 55 , 6 + 55 , 23 @ @ public class AllTestsTest { <nl> } ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testAllTestsHaveProductionCode ( ) throws Exception { <nl> + final Map < String , List < String > > allTests = new HashMap < > ( ) ; <nl> + <nl> + Files . walk ( Paths . get ( " src / main / java " ) ) <nl> + . forEach ( filePath - > { <nl> + grabAllFiles ( allTests , filePath . toFile ( ) ) ; <nl> + } ) ; <nl> + <nl> + Assert . assertTrue ( " found tests " , ! allTests . keySet ( ) . isEmpty ( ) ) ; <nl> + <nl> + Files . walk ( Paths . get ( " src / test / java " ) ) <nl> + . forEach ( filePath - > { <nl> + verifyHasProductionFile ( allTests , filePath . toFile ( ) ) ; <nl> + } ) ; <nl> + } <nl> + <nl> private static void grabAllTests ( Map < String , List < String > > allTests , File file ) { <nl> if ( file . isFile ( ) & & file . getName ( ) . endsWith ( " Test . java " ) ) { <nl> String path ; <nl> @ @ - 87 , 6 + 104 , 32 @ @ public class AllTestsTest { <nl> } <nl> } <nl> <nl> + private static void grabAllFiles ( Map < String , List < String > > allTests , File file ) { <nl> + if ( file . isFile ( ) ) { <nl> + final String path ; <nl> + <nl> + try { <nl> + path = getSimplePath ( file . getCanonicalPath ( ) ) ; <nl> + } <nl> + catch ( IOException ex ) { <nl> + throw new IllegalStateException ( ex ) ; <nl> + } <nl> + <nl> + final int slash = path . lastIndexOf ( File . separatorChar ) ; <nl> + final String packge = path . substring ( 0 , slash ) ; <nl> + <nl> + List < String > classes = allTests . get ( packge ) ; <nl> + <nl> + if ( classes = = null ) { <nl> + classes = new ArrayList < > ( ) ; <nl> + <nl> + allTests . put ( packge , classes ) ; <nl> + } <nl> + <nl> + classes . add ( path . substring ( slash + 1 ) ) ; <nl> + } <nl> + } <nl> + <nl> private static void verifyInputFile ( Map < String , List < String > > allTests , File file ) { <nl> if ( file . isFile ( ) ) { <nl> final String path ; <nl> @ @ - 157 , 6 + 200 , 36 @ @ public class AllTestsTest { <nl> + " for test ' MyCustomCheckTest ' : " + path , found ) ; <nl> } <nl> <nl> + private static void verifyHasProductionFile ( Map < String , List < String > > allTests , File file ) { <nl> + if ( file . isFile ( ) ) { <nl> + final String fileName = file . getName ( ) . replace ( " Test . java " , " . java " ) ; <nl> + <nl> + if ( ! fileName . endsWith ( " TestSupport . java " ) <nl> + / / tests external utility XPathEvaluator <nl> + & & ! " XpathMapper . java " . equals ( fileName ) ) { <nl> + final String path ; <nl> + <nl> + try { <nl> + path = getSimplePath ( file . getCanonicalPath ( ) ) ; <nl> + } <nl> + catch ( IOException ex ) { <nl> + throw new IllegalStateException ( ex ) ; <nl> + } <nl> + <nl> + if ( ! path . contains ( File . separatorChar + " grammars " + File . separatorChar ) <nl> + & & ! path . contains ( File . separatorChar + " internal " + File . separatorChar ) ) { <nl> + final int slash = path . lastIndexOf ( File . separatorChar ) ; <nl> + final String packge = path . substring ( 0 , slash ) ; <nl> + final List < String > classes = allTests . get ( packge ) ; <nl> + <nl> + Assert . assertTrue ( " Test must be named after a production class " <nl> + + " and must be in the same package of the production class : " + path , <nl> + classes ! = null & & classes . contains ( fileName ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> private static boolean checkInputMatchCorrectFileStructure ( List < String > classes , <nl> String folderPath , boolean skipFileNaming , String fileName ) { <nl> boolean result = false ;
NEAREST DIFF (one line): diff - - git a / . ci / idea _ inspection . bat b / . ci / idea _ inspection . bat <nl> new file mode 100644 <nl> index 0000000 . . e9cd6ba <nl> - - - / dev / null <nl> + + + b / . ci / idea _ inspection . bat <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + @ echo off <nl> + <nl> + : : - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + : : IntelliJ IDEA inspections for checkstyle . <nl> + : : <nl> + : : Example : <nl> + : : SET IDEA _ PATH = C : \ Program Files \ JetBrains \ IntelliJ IDEA Community Edition 2017 . 2 . 1 \ bin \ idea . bat <nl> + : : . ci \ idea _ inspection . bat <nl> + : : - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + <nl> + SET PROJECT _ DIR = % CD % \ <nl> + SET INSPECTIONS _ PATH = % CD % \ config \ intellij - idea - inspections . xml <nl> + SET RESULTS _ DIR = % CD % \ target \ inspection - results <nl> + SET NOISE _ LVL = v1 <nl> + SET IDEA _ LOCATION = <nl> + SET IDEA _ PROPERTIES = % CD % \ config \ idea . properties <nl> + <nl> + : : Check IDEA _ PATH env variable <nl> + IF EXIST % IDEA _ PATH % SET ( <nl> + SET IDEA _ LOCATION = % IDEA _ PATH % <nl> + goto run <nl> + ) ELSE ( <nl> + echo IDEA _ PATH variable not found . <nl> + ) <nl> + <nl> + : : Try to search in path <nl> + FOR / f " delims = " % % i IN ( ' " where idea . bat " ' ) DO SET IDEA _ LOCATION = " % % i " <nl> + if [ % IDEA _ LOCATION % ] NEQ [ ] ( <nl> + goto run <nl> + ) ELSE ( <nl> + echo IntelliJ IDEA was not found in path . <nl> + exit / b <nl> + ) <nl> + <nl> + : run <nl> + mkdir . idea \ scopes <nl> + copy config \ intellij - idea - inspection - scope . xml . idea \ scopes <nl> + <nl> + " % IDEA _ LOCATION % " inspect % PROJECT _ DIR % % INSPECTIONS _ PATH % % RESULTS _ DIR % - % NOISE _ LVL % <nl> diff - - git a / . ci / idea _ inspection . sh b / . ci / idea _ inspection . sh <nl> new file mode 100755 <nl> index 0000000 . . 545c58a <nl> - - - / dev / null <nl> + + + b / . ci / idea _ inspection . sh <nl> @ @ - 0 , 0 + 1 , 53 @ @ <nl> + # ! / bin / bash - e <nl> + <nl> + # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <nl> + # IntelliJ IDEA inspections for checkstyle . <nl> + # <nl> + # Example Mac OS : <nl> + # export IDEA _ PATH = " / Applications / IntelliJ IDEA . app / Contents / MacOS / idea " <nl> + # bash . / . ci / idea _ inspection . sh <nl> + # <nl> + # Example Linux : <nl> + # export IDEA _ PATH = / opt / idea - IC - 171 . 4694 . 70 / bin / idea . sh <nl> + # export IDEA _ PROPERTIES = $ PWD / config / idea . properties <nl> + # . / . ci / idea _ inspection . sh <nl> + # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <nl> + <nl> + PROJECT _ DIR = $ PWD / <nl> + INSPECTIONS _ PATH = $ PWD / config / intellij - idea - inspections . xml <nl> + RESULTS _ DIR = $ PWD / target / inspection - results <nl> + NOISE _ LVL = v1 <nl> + IDEA _ LOCATION = <nl> + export IDEA _ PROPERTIES = $ PWD / config / idea . properties <nl> + <nl> + # Check IDEA _ PATH env variable <nl> + <nl> + if [ [ ! - z $ IDEA _ PATH ] ] ; then <nl> + IDEA _ LOCATION = $ IDEA _ PATH <nl> + else <nl> + echo " IDEA _ PATH variable not found . " <nl> + # Try to search in path <nl> + IDEA _ LOCATION = " $ ( which idea ) " <nl> + if [ - z $ IDEA _ LOCATION ] ; then <nl> + echo " IntelliJ IDEA was not found in path . " <nl> + exit - 1 <nl> + fi <nl> + fi <nl> + <nl> + mkdir - p $ RESULTS _ DIR <nl> + rm - rf $ RESULTS _ DIR / * <nl> + mkdir - p $ PWD / . idea / scopes <nl> + cp $ PWD / config / intellij - idea - inspection - scope . xml $ PWD / . idea / scopes <nl> + <nl> + echo " Validation is about to start . . . progress output will be flushed at end . Validation is in progress . . . " <nl> + IDEA _ OUTPUT = ` exec " $ IDEA _ LOCATION " inspect $ PROJECT _ DIR $ INSPECTIONS _ PATH $ RESULTS _ DIR - $ NOISE _ LVL ` <nl> + echo $ IDEA _ OUTPUT <nl> + <nl> + echo " Checking results . . . " <nl> + if [ [ $ ( grep " problems " $ RESULTS _ DIR / * - - exclude = " UnusedProperty . xml " - - exclude = " RedundantSuppression . xml " | cat | wc - l ) > 0 ] ] ; then <nl> + echo " There are inspection problems . Review results at $ RESULTS _ DIR folder . Files : " <nl> + grep - l " problems " $ RESULTS _ DIR / * - - exclude = " UnusedProperty . xml " - - exclude = " RedundantSuppression . xml " <nl> + exit 1 ; <nl> + else <nl> + echo " Inpection did not found any problems " <nl> + fi <nl> diff - - git a / config / idea . properties b / config / idea . properties <nl> new file mode 100644 <nl> index 0000000 . . b44eac4 <nl> - - - / dev / null <nl> + + + b / config / idea . properties <nl> @ @ - 0 , 0 + 1 @ @ <nl> + idea . exclude . patterns = src / test / resources / * * ; src / site / resources / js / google - analytics . js ; src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / ParseTreeBuilder . java ; src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / ParseTreeBuilder . java ;

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllTestsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllTestsTest . java 
 index 32b99c9 . . b7269b5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllTestsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllTestsTest . java 
 @ @ - 55 , 6 + 55 , 23 @ @ public class AllTestsTest { 
 } ) ; 
 } 
 
 + @ Test 
 + public void testAllTestsHaveProductionCode ( ) throws Exception { 
 + final Map < String , List < String > > allTests = new HashMap < > ( ) ; 
 + 
 + Files . walk ( Paths . get ( " src / main / java " ) ) 
 + . forEach ( filePath - > { 
 + grabAllFiles ( allTests , filePath . toFile ( ) ) ; 
 + } ) ; 
 + 
 + Assert . assertTrue ( " found tests " , ! allTests . keySet ( ) . isEmpty ( ) ) ; 
 + 
 + Files . walk ( Paths . get ( " src / test / java " ) ) 
 + . forEach ( filePath - > { 
 + verifyHasProductionFile ( allTests , filePath . toFile ( ) ) ; 
 + } ) ; 
 + } 
 + 
 private static void grabAllTests ( Map < String , List < String > > allTests , File file ) { 
 if ( file . isFile ( ) & & file . getName ( ) . endsWith ( " Test . java " ) ) { 
 String path ; 
 @ @ - 87 , 6 + 104 , 32 @ @ public class AllTestsTest { 
 } 
 } 
 
 + private static void grabAllFiles ( Map < String , List < String > > allTests , File file ) { 
 + if ( file . isFile ( ) ) { 
 + final String path ; 
 + 
 + try { 
 + path = getSimplePath ( file . getCanonicalPath ( ) ) ; 
 + } 
 + catch ( IOException ex ) { 
 + throw new IllegalStateException ( ex ) ; 
 + } 
 + 
 + final int slash = path . lastIndexOf ( File . separatorChar ) ; 
 + final String packge = path . substring ( 0 , slash ) ; 
 + 
 + List < String > classes = allTests . get ( packge ) ; 
 + 
 + if ( classes = = null ) { 
 + classes = new ArrayList < > ( ) ; 
 + 
 + allTests . put ( packge , classes ) ; 
 + } 
 + 
 + classes . add ( path . substring ( slash + 1 ) ) ; 
 + } 
 + } 
 + 
 private static void verifyInputFile ( Map < String , List < String > > allTests , File file ) { 
 if ( file . isFile ( ) ) { 
 final String path ; 
 @ @ - 157 , 6 + 200 , 36 @ @ public class AllTestsTest { 
 + " for test ' MyCustomCheckTest ' : " + path , found ) ; 
 } 
 
 + private static void verifyHasProductionFile ( Map < String , List < String > > allTests , File file ) { 
 + if ( file . isFile ( ) ) { 
 + final String fileName = file . getName ( ) . replace ( " Test . java " , " . java " ) ; 
 + 
 + if ( ! fileName . endsWith ( " TestSupport . java " ) 
 + / / tests external utility XPathEvaluator 
 + & & ! " XpathMapper . java " . equals ( fileName ) ) { 
 + final String path ; 
 + 
 + try { 
 + path = getSimplePath ( file . getCanonicalPath ( ) ) ; 
 + } 
 + catch ( IOException ex ) { 
 + throw new IllegalStateException ( ex ) ; 
 + } 
 + 
 + if ( ! path . contains ( File . separatorChar + " grammars " + File . separatorChar ) 
 + & & ! path . contains ( File . separatorChar + " internal " + File . separatorChar ) ) { 
 + final int slash = path . lastIndexOf ( File . separatorChar ) ; 
 + final String packge = path . substring ( 0 , slash ) ; 
 + final List < String > classes = allTests . get ( packge ) ; 
 + 
 + Assert . assertTrue ( " Test must be named after a production class " 
 + + " and must be in the same package of the production class : " + path , 
 + classes ! = null & & classes . contains ( fileName ) ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 private static boolean checkInputMatchCorrectFileStructure ( List < String > classes , 
 String folderPath , boolean skipFileNaming , String fileName ) { 
 boolean result = false ;

NEAREST DIFF:
diff - - git a / . ci / idea _ inspection . bat b / . ci / idea _ inspection . bat 
 new file mode 100644 
 index 0000000 . . e9cd6ba 
 - - - / dev / null 
 + + + b / . ci / idea _ inspection . bat 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + @ echo off 
 + 
 + : : - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + : : IntelliJ IDEA inspections for checkstyle . 
 + : : 
 + : : Example : 
 + : : SET IDEA _ PATH = C : \ Program Files \ JetBrains \ IntelliJ IDEA Community Edition 2017 . 2 . 1 \ bin \ idea . bat 
 + : : . ci \ idea _ inspection . bat 
 + : : - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + 
 + SET PROJECT _ DIR = % CD % \ 
 + SET INSPECTIONS _ PATH = % CD % \ config \ intellij - idea - inspections . xml 
 + SET RESULTS _ DIR = % CD % \ target \ inspection - results 
 + SET NOISE _ LVL = v1 
 + SET IDEA _ LOCATION = 
 + SET IDEA _ PROPERTIES = % CD % \ config \ idea . properties 
 + 
 + : : Check IDEA _ PATH env variable 
 + IF EXIST % IDEA _ PATH % SET ( 
 + SET IDEA _ LOCATION = % IDEA _ PATH % 
 + goto run 
 + ) ELSE ( 
 + echo IDEA _ PATH variable not found . 
 + ) 
 + 
 + : : Try to search in path 
 + FOR / f " delims = " % % i IN ( ' " where idea . bat " ' ) DO SET IDEA _ LOCATION = " % % i " 
 + if [ % IDEA _ LOCATION % ] NEQ [ ] ( 
 + goto run 
 + ) ELSE ( 
 + echo IntelliJ IDEA was not found in path . 
 + exit / b 
 + ) 
 + 
 + : run 
 + mkdir . idea \ scopes 
 + copy config \ intellij - idea - inspection - scope . xml . idea \ scopes 
 + 
 + " % IDEA _ LOCATION % " inspect % PROJECT _ DIR % % INSPECTIONS _ PATH % % RESULTS _ DIR % - % NOISE _ LVL % 
 diff - - git a / . ci / idea _ inspection . sh b / . ci / idea _ inspection . sh 
 new file mode 100755 
 index 0000000 . . 545c58a 
 - - - / dev / null 
 + + + b / . ci / idea _ inspection . sh 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + # ! / bin / bash - e 
 + 
 + # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
 + # IntelliJ IDEA inspections for checkstyle . 
 + # 
 + # Example Mac OS : 
 + # export IDEA _ PATH = " / Applications / IntelliJ IDEA . app / Contents / MacOS / idea " 
 + # bash . / . ci / idea _ inspection . sh 
 + # 
 + # Example Linux : 
 + # export IDEA _ PATH = / opt / idea - IC - 171 . 4694 . 70 / bin / idea . sh 
 + # export IDEA _ PROPERTIES = $ PWD / config / idea . properties 
 + # . / . ci / idea _ inspection . sh 
 + # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
 + 
 + PROJECT _ DIR = $ PWD / 
 + INSPECTIONS _ PATH = $ PWD / config / intellij - idea - inspections . xml 
 + RESULTS _ DIR = $ PWD / target / inspection - results 
 + NOISE _ LVL = v1 
 + IDEA _ LOCATION = 
 + export IDEA _ PROPERTIES = $ PWD / config / idea . properties 
 + 
 + # Check IDEA _ PATH env variable 
 + 
 + if [ [ ! - z $ IDEA _ PATH ] ] ; then 
 + IDEA _ LOCATION = $ IDEA _ PATH 
 + else 
 + echo " IDEA _ PATH variable not found . " 
 + # Try to search in path 
 + IDEA _ LOCATION = " $ ( which idea ) " 
 + if [ - z $ IDEA _ LOCATION ] ; then 
 + echo " IntelliJ IDEA was not found in path . " 
 + exit - 1 
 + fi 
 + fi 
 + 
 + mkdir - p $ RESULTS _ DIR 
 + rm - rf $ RESULTS _ DIR / * 
 + mkdir - p $ PWD / . idea / scopes 
 + cp $ PWD / config / intellij - idea - inspection - scope . xml $ PWD / . idea / scopes 
 + 
 + echo " Validation is about to start . . . progress output will be flushed at end . Validation is in progress . . . " 
 + IDEA _ OUTPUT = ` exec " $ IDEA _ LOCATION " inspect $ PROJECT _ DIR $ INSPECTIONS _ PATH $ RESULTS _ DIR - $ NOISE _ LVL ` 
 + echo $ IDEA _ OUTPUT 
 + 
 + echo " Checking results . . . " 
 + if [ [ $ ( grep " problems " $ RESULTS _ DIR / * - - exclude = " UnusedProperty . xml " - - exclude = " RedundantSuppression . xml " | cat | wc - l ) > 0 ] ] ; then 
 + echo " There are inspection problems . Review results at $ RESULTS _ DIR folder . Files : " 
 + grep - l " problems " $ RESULTS _ DIR / * - - exclude = " UnusedProperty . xml " - - exclude = " RedundantSuppression . xml " 
 + exit 1 ; 
 + else 
 + echo " Inpection did not found any problems " 
 + fi 
 diff - - git a / config / idea . properties b / config / idea . properties 
 new file mode 100644 
 index 0000000 . . b44eac4 
 - - - / dev / null 
 + + + b / config / idea . properties 
 @ @ - 0 , 0 + 1 @ @ 
 + idea . exclude . patterns = src / test / resources / * * ; src / site / resources / js / google - analytics . js ; src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / ParseTreeBuilder . java ; src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / ParseTreeBuilder . java ;
