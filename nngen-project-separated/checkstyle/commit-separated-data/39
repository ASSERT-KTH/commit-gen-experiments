BLEU SCORE: 0.020980574531482755

TEST MSG: Issue # 6586 : aligned javadoc / xdoc for CovariantEquals
GENERATED MSG: Fix double check locking

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java <nl> index e46b69f . . 86be34e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java <nl> @ @ - 30 , 17 + 30 , 82 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CheckUtil ; <nl> <nl> / * * <nl> - * < p > Checks that if a class defines a covariant method equals , <nl> - * then it defines method equals ( java . lang . Object ) . <nl> - * Inspired by findbugs , <nl> - * http : / / findbugs . sourceforge . net / bugDescriptions . html # EQ _ SELF _ NO _ OBJECT <nl> + * < p > <nl> + * Checks that classes which define a covariant { @ code equals ( ) } method <nl> + * also override method { @ code equals ( Object ) } . <nl> + * < / p > <nl> + * < p > <nl> + * Covariant { @ code equals ( ) } - method that is similar to { @ code equals ( Object ) } , <nl> + * but with a covariant parameter type ( any subtype of Object ) . <nl> + * < / p > <nl> + * < p > <nl> + * < strong > Notice < / strong > : the enums are also checked , <nl> + * even though they cannot override { @ code equals ( Object ) } . <nl> + * The reason is to point out that implementing { @ code equals ( ) } in enums <nl> + * is considered an awful practice : it may cause having two different enum values <nl> + * that are equal using covariant enum method , and not equal when compared normally . <nl> + * < / p > <nl> + * < p > <nl> + * Inspired by < a href = " https : / / cs . nyu . edu / ~ lharris / papers / findbugsPaper . pdf " > <nl> + * Finding Bugs is Easy , chapter ' 2 . 3 . 1 Bad Covariant Definition of Equals ( Eq ) ' < / a > : <nl> * < / p > <nl> * < p > <nl> - * An example of how to configure the check is : <nl> + * Java classes may override the { @ code equals ( Object ) } method to define <nl> + * a predicate for object equality . This method is used by many of the Java <nl> + * runtime library classes ; for example , to implement generic containers . <nl> + * < / p > <nl> + * < p > <nl> + * Programmers sometimes mistakenly use the type of their class { @ code Foo } <nl> + * as the type of the parameter to { @ code equals ( ) } : <nl> + * < / p > <nl> + * < pre > <nl> + * public boolean equals ( Foo obj ) { . . . } <nl> + * < / pre > <nl> + * < p > <nl> + * This covariant version of { @ code equals ( ) } does not override the version in <nl> + * the { @ code Object } class , and it may lead to unexpected behavior at runtime , <nl> + * especially if the class is used with one of the standard collection classes <nl> + * which expect that the standard { @ code equals ( Object ) } method is overridden . <nl> + * < / p > <nl> + * < p > <nl> + * This kind of bug is not obvious because it looks correct , and in circumstances <nl> + * where the class is accessed through the references of the class type ( rather <nl> + * than a supertype ) , it will work correctly . However , the first time it is used <nl> + * in a container , the behavior might be mysterious . For these reasons , this type <nl> + * of bug can elude testing and code inspections . <nl> + * < / p > <nl> + * < p > <nl> + * To configure the check : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; CovariantEquals & quot ; / & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * For example : <nl> + * < / p > <nl> + * < pre > <nl> + * class Test { <nl> + * public boolean equals ( Test i ) { / / violation <nl> + * return false ; <nl> + * } <nl> + * } <nl> + * < / pre > <nl> + * < p > <nl> + * The same class without violations : <nl> * < / p > <nl> * < pre > <nl> - * & lt ; module name = " CovariantEquals " / & gt ; <nl> + * class Test { <nl> + * public boolean equals ( Test i ) { / / no violation <nl> + * return false ; <nl> + * } <nl> + * <nl> + * public boolean equals ( Object i ) { <nl> + * return false ; <nl> + * } <nl> + * } <nl> * < / pre > <nl> + * <nl> + * @ since 3 . 2 <nl> * / <nl> @ FileStatefulCheck <nl> public class CovariantEqualsCheck extends AbstractCheck { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 681af18 . . c0e9776 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 79 , 6 + 79 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " ClassMemberImpliedModifier " , <nl> " ClassTypeParameterName " , <nl> " ConstantName " , <nl> + " CovariantEquals " , <nl> " CustomImportOrder " , <nl> " EmptyBlock " , <nl> " EmptyCatchBlock " , <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 445e1c3 . . b6baa89 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 235 , 13 + 235 , 17 @ @ String b = ( a = = null | | a . length & lt ; 1 ) ? null : a . substring ( 1 ) ; <nl> < / section > <nl> <nl> < section name = " CovariantEquals " > <nl> + < p > Since Checkstyle 3 . 2 < / p > <nl> < subsection name = " Description " id = " CovariantEquals _ Description " > <nl> - < p > Since Checkstyle 3 . 2 < / p > <nl> < p > <nl> Checks that classes which define a covariant < code > equals ( ) < / code > method <nl> - also override method < code > equals ( Object ) < / code > . < br / > <nl> + also override method < code > equals ( Object ) < / code > . <nl> + < / p > <nl> + < p > <nl> Covariant < code > equals ( ) < / code > - method that is similar to < code > equals ( Object ) < / code > , <nl> - but with a covariant parameter type ( any subtype of Object ) . < br / > <nl> + but with a covariant parameter type ( any subtype of Object ) . <nl> + < / p > <nl> + < p > <nl> < strong > Notice < / strong > : the enums are also checked , even <nl> though they cannot override < code > equals ( Object ) < / code > . The reason is <nl> to point out that implementing < code > equals ( ) < / code > in enums is considered an <nl> @ @ - 295 , 17 + 299 , 18 @ @ public boolean equals ( Foo obj ) { . . . } <nl> <nl> < p > <nl> For example : <nl> - < source > <nl> + < / p > <nl> + < source > <nl> class Test { <nl> public boolean equals ( Test i ) { / / violation <nl> return false ; <nl> } <nl> } <nl> - < / source > <nl> - < / p > <nl> + < / source > <nl> < p > <nl> The same class without violations : <nl> - < source > <nl> + < / p > <nl> + < source > <nl> class Test { <nl> public boolean equals ( Test i ) { / / no violation <nl> return false ; <nl> @ @ - 315 , 8 + 320 , 7 @ @ class Test { <nl> return false ; <nl> } <nl> } <nl> - < / source > <nl> - < / p > <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Example of Usage " id = " CovariantEquals _ Example _ of _ Usage " >
NEAREST DIFF (one line): diff - - git a / . hgignore b / . hgignore <nl> index fc33994 . . 22ff4c4 100644 <nl> - - - a / . hgignore <nl> + + + b / . hgignore <nl> @ @ - 5 , 3 + 5 , 5 @ @ syntax : glob <nl> nbactions . xml <nl> nb - configuration . xml <nl> target <nl> + glob : checkstyle . iml <nl> + glob : . idea <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> index ad607d4 . . b6f7435 100755 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java <nl> @ @ - 18 , 9 + 18 , 11 @ @ <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> + import com . google . common . collect . Sets ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import java . util . Set ; <nl> <nl> / * * <nl> * Throwing java . lang . Error or java . lang . RuntimeException <nl> @ @ - 29 , 6 + 31 , 15 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * / <nl> public final class IllegalThrowsCheck extends AbstractIllegalCheck <nl> { <nl> + <nl> + / * * Default ignored method names . * / <nl> + private static final String [ ] DEFAULT _ IGNORED _ METHOD _ NAMES = { <nl> + " finalize " , <nl> + } ; <nl> + <nl> + / * * methods which should be ignored . * / <nl> + private final Set < String > mIgnoredMethodNames = Sets . newHashSet ( ) ; <nl> + <nl> / * * Creates new instance of the check . * / <nl> public IllegalThrowsCheck ( ) <nl> { <nl> @ @ - 38 , 6 + 49 , 7 @ @ public final class IllegalThrowsCheck extends AbstractIllegalCheck <nl> " java . lang . RuntimeException " , <nl> " java . lang . Throwable " , <nl> } ) ; <nl> + setIgnoredMethodNames ( DEFAULT _ IGNORED _ METHOD _ NAMES ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 56 , 15 + 68 , 41 @ @ public final class IllegalThrowsCheck extends AbstractIllegalCheck <nl> public void visitToken ( DetailAST aDetailAST ) <nl> { <nl> DetailAST token = aDetailAST . getFirstChild ( ) ; <nl> - while ( token ! = null ) { <nl> - if ( token . getType ( ) ! = TokenTypes . COMMA ) { <nl> - final FullIdent ident = FullIdent . createFullIdent ( token ) ; <nl> - if ( isIllegalClassName ( ident . getText ( ) ) ) { <nl> - log ( token , " illegal . throw " , ident . getText ( ) ) ; <nl> + / / Check if the method with the given name should be ignored . <nl> + if ( ! ( shouldIgnoreMethod ( aDetailAST . getParent ( ) . findFirstToken ( <nl> + TokenTypes . IDENT ) . getText ( ) ) ) ) <nl> + { <nl> + while ( token ! = null ) { <nl> + if ( token . getType ( ) ! = TokenTypes . COMMA ) { <nl> + final FullIdent ident = FullIdent . createFullIdent ( token ) ; <nl> + if ( isIllegalClassName ( ident . getText ( ) ) ) { <nl> + log ( token , " illegal . throw " , ident . getText ( ) ) ; <nl> + } <nl> } <nl> + token = token . getNextSibling ( ) ; <nl> } <nl> + } <nl> + } <nl> <nl> - token = token . getNextSibling ( ) ; <nl> + / * * <nl> + * Check if the method is specified in the ignore method list <nl> + * @ param aName the name to check <nl> + * @ return whether the method with the passed name should be ignored <nl> + * / <nl> + private boolean shouldIgnoreMethod ( String aName ) <nl> + { <nl> + return mIgnoredMethodNames . contains ( aName ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the list of ignore method names . <nl> + * @ param aMethodNames array of ignored method names <nl> + * / <nl> + public void setIgnoredMethodNames ( String [ ] aMethodNames ) <nl> + { <nl> + mIgnoredMethodNames . clear ( ) ; <nl> + for ( String element : aMethodNames ) { <nl> + mIgnoredMethodNames . add ( element ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java <nl> index 902fae6 . . cc5cb13 100755 <nl> - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java <nl> + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java <nl> @ @ - 14 , 4 + 14 , 8 @ @ public class InputIllegalThrowsCheck { <nl> public void methodTwo ( ) throws java . lang . RuntimeException , java . lang . Error <nl> { <nl> } <nl> + <nl> + public void finalize ( ) throws Throwable { <nl> + <nl> + } <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java <nl> index ff4ebb5 . . f0ec813 100755 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java <nl> @ @ - 20 , 9 + 20 , 10 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> - import java . io . File ; <nl> import org . junit . Test ; <nl> <nl> + import java . io . File ; <nl> + <nl> public class IllegalThrowsCheckTest extends BaseCheckTestSupport <nl> { <nl> @ Test <nl> @ @ - 53 , 4 + 54 , 42 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport <nl> <nl> verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; <nl> } <nl> + <nl> + / * * <nl> + * Test to validate the IllegalThrowsCheck with ignoredMethodNames attribute <nl> + * @ throws Exception <nl> + * / <nl> + @ Test <nl> + public void testIgnoreMethodNames ( ) throws Exception <nl> + { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( IllegalThrowsCheck . class ) ; <nl> + checkConfig . addAttribute ( " ignoredMethodNames " , " methodTwo " ) ; <nl> + <nl> + String [ ] expected = { <nl> + " 9 : 51 : Throwing ' RuntimeException ' is not allowed . " , <nl> + " 18 : 35 : Throwing ' Throwable ' is not allowed . " , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Test to validate the IllegalThrowsCheck with both the attributes specified <nl> + * @ throws Exception <nl> + * / <nl> + @ Test <nl> + public void testIllegalClassNamesWithIgnoreMethodNames ( ) throws Exception <nl> + { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( IllegalThrowsCheck . class ) ; <nl> + checkConfig . addAttribute ( " illegalClassNames " , <nl> + " java . lang . Error , java . lang . Exception , NullPointerException , Throwable " ) ; <nl> + checkConfig . addAttribute ( " ignoredMethodNames " , " methodTwo " ) ; <nl> + <nl> + String [ ] expected = { <nl> + " 5 : 33 : Throwing ' NullPointerException ' is not allowed . " , <nl> + " 18 : 35 : Throwing ' Throwable ' is not allowed . " , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java <nl> index 95d4e60 . . ed70b6a 100755 <nl> - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java <nl> + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java <nl> @ @ - 50 , 6 + 50 , 6 @ @ public class NoFinalizerCheckTest <nl> createCheckConfig ( NoFinalizerCheck . class ) ; <nl> final String [ ] expected = { <nl> } ; <nl> - verify ( checkConfig , getPath ( " coding / InputIllegalThrowsCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " coding / InputFallThrough . java " ) , expected ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java 
 index e46b69f . . 86be34e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java 
 @ @ - 30 , 17 + 30 , 82 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CheckUtil ; 
 
 / * * 
 - * < p > Checks that if a class defines a covariant method equals , 
 - * then it defines method equals ( java . lang . Object ) . 
 - * Inspired by findbugs , 
 - * http : / / findbugs . sourceforge . net / bugDescriptions . html # EQ _ SELF _ NO _ OBJECT 
 + * < p > 
 + * Checks that classes which define a covariant { @ code equals ( ) } method 
 + * also override method { @ code equals ( Object ) } . 
 + * < / p > 
 + * < p > 
 + * Covariant { @ code equals ( ) } - method that is similar to { @ code equals ( Object ) } , 
 + * but with a covariant parameter type ( any subtype of Object ) . 
 + * < / p > 
 + * < p > 
 + * < strong > Notice < / strong > : the enums are also checked , 
 + * even though they cannot override { @ code equals ( Object ) } . 
 + * The reason is to point out that implementing { @ code equals ( ) } in enums 
 + * is considered an awful practice : it may cause having two different enum values 
 + * that are equal using covariant enum method , and not equal when compared normally . 
 + * < / p > 
 + * < p > 
 + * Inspired by < a href = " https : / / cs . nyu . edu / ~ lharris / papers / findbugsPaper . pdf " > 
 + * Finding Bugs is Easy , chapter ' 2 . 3 . 1 Bad Covariant Definition of Equals ( Eq ) ' < / a > : 
 * < / p > 
 * < p > 
 - * An example of how to configure the check is : 
 + * Java classes may override the { @ code equals ( Object ) } method to define 
 + * a predicate for object equality . This method is used by many of the Java 
 + * runtime library classes ; for example , to implement generic containers . 
 + * < / p > 
 + * < p > 
 + * Programmers sometimes mistakenly use the type of their class { @ code Foo } 
 + * as the type of the parameter to { @ code equals ( ) } : 
 + * < / p > 
 + * < pre > 
 + * public boolean equals ( Foo obj ) { . . . } 
 + * < / pre > 
 + * < p > 
 + * This covariant version of { @ code equals ( ) } does not override the version in 
 + * the { @ code Object } class , and it may lead to unexpected behavior at runtime , 
 + * especially if the class is used with one of the standard collection classes 
 + * which expect that the standard { @ code equals ( Object ) } method is overridden . 
 + * < / p > 
 + * < p > 
 + * This kind of bug is not obvious because it looks correct , and in circumstances 
 + * where the class is accessed through the references of the class type ( rather 
 + * than a supertype ) , it will work correctly . However , the first time it is used 
 + * in a container , the behavior might be mysterious . For these reasons , this type 
 + * of bug can elude testing and code inspections . 
 + * < / p > 
 + * < p > 
 + * To configure the check : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; CovariantEquals & quot ; / & gt ; 
 + * < / pre > 
 + * < p > 
 + * For example : 
 + * < / p > 
 + * < pre > 
 + * class Test { 
 + * public boolean equals ( Test i ) { / / violation 
 + * return false ; 
 + * } 
 + * } 
 + * < / pre > 
 + * < p > 
 + * The same class without violations : 
 * < / p > 
 * < pre > 
 - * & lt ; module name = " CovariantEquals " / & gt ; 
 + * class Test { 
 + * public boolean equals ( Test i ) { / / no violation 
 + * return false ; 
 + * } 
 + * 
 + * public boolean equals ( Object i ) { 
 + * return false ; 
 + * } 
 + * } 
 * < / pre > 
 + * 
 + * @ since 3 . 2 
 * / 
 @ FileStatefulCheck 
 public class CovariantEqualsCheck extends AbstractCheck { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 681af18 . . c0e9776 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 79 , 6 + 79 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " ClassMemberImpliedModifier " , 
 " ClassTypeParameterName " , 
 " ConstantName " , 
 + " CovariantEquals " , 
 " CustomImportOrder " , 
 " EmptyBlock " , 
 " EmptyCatchBlock " , 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 445e1c3 . . b6baa89 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 235 , 13 + 235 , 17 @ @ String b = ( a = = null | | a . length & lt ; 1 ) ? null : a . substring ( 1 ) ; 
 < / section > 
 
 < section name = " CovariantEquals " > 
 + < p > Since Checkstyle 3 . 2 < / p > 
 < subsection name = " Description " id = " CovariantEquals _ Description " > 
 - < p > Since Checkstyle 3 . 2 < / p > 
 < p > 
 Checks that classes which define a covariant < code > equals ( ) < / code > method 
 - also override method < code > equals ( Object ) < / code > . < br / > 
 + also override method < code > equals ( Object ) < / code > . 
 + < / p > 
 + < p > 
 Covariant < code > equals ( ) < / code > - method that is similar to < code > equals ( Object ) < / code > , 
 - but with a covariant parameter type ( any subtype of Object ) . < br / > 
 + but with a covariant parameter type ( any subtype of Object ) . 
 + < / p > 
 + < p > 
 < strong > Notice < / strong > : the enums are also checked , even 
 though they cannot override < code > equals ( Object ) < / code > . The reason is 
 to point out that implementing < code > equals ( ) < / code > in enums is considered an 
 @ @ - 295 , 17 + 299 , 18 @ @ public boolean equals ( Foo obj ) { . . . } 
 
 < p > 
 For example : 
 - < source > 
 + < / p > 
 + < source > 
 class Test { 
 public boolean equals ( Test i ) { / / violation 
 return false ; 
 } 
 } 
 - < / source > 
 - < / p > 
 + < / source > 
 < p > 
 The same class without violations : 
 - < source > 
 + < / p > 
 + < source > 
 class Test { 
 public boolean equals ( Test i ) { / / no violation 
 return false ; 
 @ @ - 315 , 8 + 320 , 7 @ @ class Test { 
 return false ; 
 } 
 } 
 - < / source > 
 - < / p > 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Example of Usage " id = " CovariantEquals _ Example _ of _ Usage " >

NEAREST DIFF:
diff - - git a / . hgignore b / . hgignore 
 index fc33994 . . 22ff4c4 100644 
 - - - a / . hgignore 
 + + + b / . hgignore 
 @ @ - 5 , 3 + 5 , 5 @ @ syntax : glob 
 nbactions . xml 
 nb - configuration . xml 
 target 
 + glob : checkstyle . iml 
 + glob : . idea 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 index ad607d4 . . b6f7435 100755 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheck . java 
 @ @ - 18 , 9 + 18 , 11 @ @ 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 + import com . google . common . collect . Sets ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import java . util . Set ; 
 
 / * * 
 * Throwing java . lang . Error or java . lang . RuntimeException 
 @ @ - 29 , 6 + 31 , 15 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * / 
 public final class IllegalThrowsCheck extends AbstractIllegalCheck 
 { 
 + 
 + / * * Default ignored method names . * / 
 + private static final String [ ] DEFAULT _ IGNORED _ METHOD _ NAMES = { 
 + " finalize " , 
 + } ; 
 + 
 + / * * methods which should be ignored . * / 
 + private final Set < String > mIgnoredMethodNames = Sets . newHashSet ( ) ; 
 + 
 / * * Creates new instance of the check . * / 
 public IllegalThrowsCheck ( ) 
 { 
 @ @ - 38 , 6 + 49 , 7 @ @ public final class IllegalThrowsCheck extends AbstractIllegalCheck 
 " java . lang . RuntimeException " , 
 " java . lang . Throwable " , 
 } ) ; 
 + setIgnoredMethodNames ( DEFAULT _ IGNORED _ METHOD _ NAMES ) ; 
 } 
 
 @ Override 
 @ @ - 56 , 15 + 68 , 41 @ @ public final class IllegalThrowsCheck extends AbstractIllegalCheck 
 public void visitToken ( DetailAST aDetailAST ) 
 { 
 DetailAST token = aDetailAST . getFirstChild ( ) ; 
 - while ( token ! = null ) { 
 - if ( token . getType ( ) ! = TokenTypes . COMMA ) { 
 - final FullIdent ident = FullIdent . createFullIdent ( token ) ; 
 - if ( isIllegalClassName ( ident . getText ( ) ) ) { 
 - log ( token , " illegal . throw " , ident . getText ( ) ) ; 
 + / / Check if the method with the given name should be ignored . 
 + if ( ! ( shouldIgnoreMethod ( aDetailAST . getParent ( ) . findFirstToken ( 
 + TokenTypes . IDENT ) . getText ( ) ) ) ) 
 + { 
 + while ( token ! = null ) { 
 + if ( token . getType ( ) ! = TokenTypes . COMMA ) { 
 + final FullIdent ident = FullIdent . createFullIdent ( token ) ; 
 + if ( isIllegalClassName ( ident . getText ( ) ) ) { 
 + log ( token , " illegal . throw " , ident . getText ( ) ) ; 
 + } 
 } 
 + token = token . getNextSibling ( ) ; 
 } 
 + } 
 + } 
 
 - token = token . getNextSibling ( ) ; 
 + / * * 
 + * Check if the method is specified in the ignore method list 
 + * @ param aName the name to check 
 + * @ return whether the method with the passed name should be ignored 
 + * / 
 + private boolean shouldIgnoreMethod ( String aName ) 
 + { 
 + return mIgnoredMethodNames . contains ( aName ) ; 
 + } 
 + 
 + / * * 
 + * Set the list of ignore method names . 
 + * @ param aMethodNames array of ignored method names 
 + * / 
 + public void setIgnoredMethodNames ( String [ ] aMethodNames ) 
 + { 
 + mIgnoredMethodNames . clear ( ) ; 
 + for ( String element : aMethodNames ) { 
 + mIgnoredMethodNames . add ( element ) ; 
 } 
 } 
 } 
 diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java 
 index 902fae6 . . cc5cb13 100755 
 - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java 
 + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / coding / InputIllegalThrowsCheck . java 
 @ @ - 14 , 4 + 14 , 8 @ @ public class InputIllegalThrowsCheck { 
 public void methodTwo ( ) throws java . lang . RuntimeException , java . lang . Error 
 { 
 } 
 + 
 + public void finalize ( ) throws Throwable { 
 + 
 + } 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java 
 index ff4ebb5 . . f0ec813 100755 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / IllegalThrowsCheckTest . java 
 @ @ - 20 , 9 + 20 , 10 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 - import java . io . File ; 
 import org . junit . Test ; 
 
 + import java . io . File ; 
 + 
 public class IllegalThrowsCheckTest extends BaseCheckTestSupport 
 { 
 @ Test 
 @ @ - 53 , 4 + 54 , 42 @ @ public class IllegalThrowsCheckTest extends BaseCheckTestSupport 
 
 verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; 
 } 
 + 
 + / * * 
 + * Test to validate the IllegalThrowsCheck with ignoredMethodNames attribute 
 + * @ throws Exception 
 + * / 
 + @ Test 
 + public void testIgnoreMethodNames ( ) throws Exception 
 + { 
 + DefaultConfiguration checkConfig = createCheckConfig ( IllegalThrowsCheck . class ) ; 
 + checkConfig . addAttribute ( " ignoredMethodNames " , " methodTwo " ) ; 
 + 
 + String [ ] expected = { 
 + " 9 : 51 : Throwing ' RuntimeException ' is not allowed . " , 
 + " 18 : 35 : Throwing ' Throwable ' is not allowed . " , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; 
 + } 
 + 
 + / * * 
 + * Test to validate the IllegalThrowsCheck with both the attributes specified 
 + * @ throws Exception 
 + * / 
 + @ Test 
 + public void testIllegalClassNamesWithIgnoreMethodNames ( ) throws Exception 
 + { 
 + DefaultConfiguration checkConfig = createCheckConfig ( IllegalThrowsCheck . class ) ; 
 + checkConfig . addAttribute ( " illegalClassNames " , 
 + " java . lang . Error , java . lang . Exception , NullPointerException , Throwable " ) ; 
 + checkConfig . addAttribute ( " ignoredMethodNames " , " methodTwo " ) ; 
 + 
 + String [ ] expected = { 
 + " 5 : 33 : Throwing ' NullPointerException ' is not allowed . " , 
 + " 18 : 35 : Throwing ' Throwable ' is not allowed . " , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalThrowsCheck . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java 
 index 95d4e60 . . ed70b6a 100755 
 - - - a / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java 
 + + + b / src / tests / com / puppycrawl / tools / checkstyle / checks / coding / NoFinalizerCheckTest . java 
 @ @ - 50 , 6 + 50 , 6 @ @ public class NoFinalizerCheckTest 
 createCheckConfig ( NoFinalizerCheck . class ) ; 
 final String [ ] expected = { 
 } ; 
 - verify ( checkConfig , getPath ( " coding / InputIllegalThrowsCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " coding / InputFallThrough . java " ) , expected ) ; 
 } 
 }
