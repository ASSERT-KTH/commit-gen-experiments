BLEU SCORE: 0.041961149062965476

TEST MSG: Issue # 5750 : aligned javadoc / xdoc for AbstractClassNameCheck
GENERATED MSG: New checks ClassTypeParameterName and MethodTypeParameterName for type name formats .

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java <nl> index aa018cc . . 48d2cb5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java <nl> @ @ - 28 , 17 + 28 , 41 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> * < p > <nl> - * Ensures that the names of abstract classes conforming to some <nl> - * regular expression and check that { @ code abstract } modifier exists . <nl> + * Ensures that the names of abstract classes conforming to some regular <nl> + * expression and check that { @ code abstract } modifier exists . <nl> * < / p > <nl> * < p > <nl> - * Rationale : Abstract classes are convenience base class <nl> - * implementations of interfaces , not types as such . As such <nl> - * they should be named to indicate this . Also if names of classes <nl> - * starts with ' Abstract ' it ' s very convenient that they will <nl> - * have abstract modifier . <nl> + * Rationale : Abstract classes are convenience base class implementations of <nl> + * interfaces , not types as such . As such they should be named to indicate this . <nl> + * Also if names of classes starts with ' Abstract ' it ' s very convenient that <nl> + * they will have abstract modifier . <nl> + * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code format } - Specify valid identifiers . Default value is <nl> + * { @ code " ^ Abstract . + $ " } . < / li > <nl> + * < li > <nl> + * Property { @ code ignoreModifier } - Control whether to ignore checking for the <nl> + * { @ code abstract } modifier on classes that match the name . Default value is <nl> + * { @ code false } . < / li > <nl> + * < li > <nl> + * Property { @ code ignoreName } - Control whether to ignore checking the name . <nl> + * Realistically only useful if using the check to identify that match name and <nl> + * do not have the { @ code abstract } modifier . Default value is <nl> + * { @ code false } . < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * The following example shows how to configure the { @ code AbstractClassName } to <nl> + * checks names , but ignore missing { @ code abstract } modifiers : <nl> * < / p > <nl> * <nl> + * < pre > <nl> + * & lt ; module name = " AbstractClassName " & gt ; <nl> + * & lt ; property name = " ignoreModifier " value = " true " / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * <nl> + * @ since 3 . 2 <nl> * / <nl> @ StatelessCheck <nl> public final class AbstractClassNameCheck extends AbstractCheck { <nl> @ @ - 55 , 17 + 79 , 25 @ @ public final class AbstractClassNameCheck extends AbstractCheck { <nl> * / <nl> public static final String MSG _ NO _ ABSTRACT _ CLASS _ MODIFIER = " no . abstract . class . modifier " ; <nl> <nl> - / * * Whether to ignore checking the modifier . * / <nl> + / * * <nl> + * Control whether to ignore checking for the { @ code abstract } modifier on <nl> + * classes that match the name . <nl> + * / <nl> private boolean ignoreModifier ; <nl> <nl> - / * * Whether to ignore checking the name . * / <nl> + / * * <nl> + * Control whether to ignore checking the name . Realistically only useful <nl> + * if using the check to identify that match name and do not have the <nl> + * { @ code abstract } modifier . <nl> + * / <nl> private boolean ignoreName ; <nl> <nl> - / * * The regexp to match against . * / <nl> + / * * Specify valid identifiers . * / <nl> private Pattern format = Pattern . compile ( " ^ Abstract . + $ " ) ; <nl> <nl> / * * <nl> - * Whether to ignore checking for the { @ code abstract } modifier . <nl> + * Setter to control whether to ignore checking for the { @ code abstract } modifier on <nl> + * classes that match the name . <nl> * @ param value new value <nl> * / <nl> public void setIgnoreModifier ( boolean value ) { <nl> @ @ - 73 , 7 + 105 , 8 @ @ public final class AbstractClassNameCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Whether to ignore checking the name . <nl> + * Setter to control whether to ignore checking the name . Realistically only useful if <nl> + * using the check to identify that match name and do not have the { @ code abstract } modifier . <nl> * @ param value new value . <nl> * / <nl> public void setIgnoreName ( boolean value ) { <nl> @ @ - 81 , 7 + 114 , 7 @ @ public final class AbstractClassNameCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Set the format for the specified regular expression . <nl> + * Setter to specify valid identifiers . <nl> * @ param pattern the new pattern <nl> * / <nl> public void setFormat ( Pattern pattern ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 773ba8e . . a8b3a49 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 103 , 7 + 103 , 9 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> <nl> if ( " Content " . equals ( sectionName ) | | " Overview " . equals ( sectionName ) <nl> / / suppression list <nl> - | | ! " AbbreviationAsWordInName " . equals ( sectionName ) ) { <nl> + | | ! " AbbreviationAsWordInName " . equals ( sectionName ) <nl> + & & ! " AbstractClassName " . equals ( sectionName ) <nl> + ) { <nl> continue ; <nl> } <nl> <nl> diff - - git a / src / xdocs / checks . xml b / src / xdocs / checks . xml <nl> index 0289c45 . . 1175d10 100644 <nl> - - - a / src / xdocs / checks . xml <nl> + + + b / src / xdocs / checks . xml <nl> @ @ - 39 , 8 + 39 , 8 @ @ <nl> < tr > <nl> < td > < a href = " config _ naming . html # AbstractClassName " > AbstractClassName < / a > < / td > <nl> < td > <nl> - Ensures that the names of abstract classes conforming to some <nl> - regular expression . <nl> + Ensures that the names of abstract classes conforming to some regular expression and <nl> + check that < code > abstract < / code > modifier exists . <nl> < / td > <nl> < / tr > <nl> < tr > <nl> diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml <nl> index e3c475d . . 9fc1b24 100644 <nl> - - - a / src / xdocs / config _ naming . xml <nl> + + + b / src / xdocs / config _ naming . xml <nl> @ @ - 191 , 9 + 191 , 18 @ @ <nl> < / section > <nl> <nl> < section name = " AbstractClassName " > <nl> + < p > Since Checkstyle 3 . 2 < / p > <nl> < subsection name = " Description " > <nl> - < p > Since Checkstyle 3 . 2 < / p > <nl> - < p > Validates identifiers for < code > abstract < / code > classes . < / p > <nl> + < p > <nl> + Ensures that the names of abstract classes conforming to some regular expression and <nl> + check that < code > abstract < / code > modifier exists . <nl> + < / p > <nl> + < p > <nl> + Rationale : Abstract classes are convenience base class implementations of <nl> + interfaces , not types as such . As such they should be named to indicate this . <nl> + Also if names of classes starts with ' Abstract ' it ' s very convenient that <nl> + they will have abstract modifier . <nl> + < / p > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " > <nl> @ @ - 207 , 7 + 216 , 7 @ @ <nl> < / tr > <nl> < tr > <nl> < td > format < / td > <nl> - < td > Specifies valid identifiers . < / td > <nl> + < td > Specify valid identifiers . < / td > <nl> < td > < a href = " property _ types . html # regexp " > Regular Expression < / a > < / td > <nl> < td > < code > " ^ Abstract . + $ " < / code > < / td > <nl> < td > 3 . 2 < / td > <nl> @ @ - 215 , 7 + 224 , 7 @ @ <nl> < tr > <nl> < td > ignoreModifier < / td > <nl> < td > <nl> - Controls whether to ignore checking for the <nl> + Control whether to ignore checking for the <nl> < code > abstract < / code > modifier on classes that match the <nl> name . <nl> < / td > <nl> @ @ - 226 , 9 + 235 , 9 @ @ <nl> < tr > <nl> < td > ignoreName < / td > <nl> < td > <nl> - Controls whether to ignore checking the name . Realistically <nl> + Control whether to ignore checking the name . Realistically <nl> only useful if using the check to identify that match name <nl> - and do not have the < code > abstract < / code > modifier . name . <nl> + and do not have the < code > abstract < / code > modifier . <nl> < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> < td > < code > false < / code > < / td >
NEAREST DIFF (one line): diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / InputPublicOnly . java b / src / testinputs / com / puppycrawl / tools / checkstyle / InputPublicOnly . java <nl> index da0361b . . 8d7ebb5 100644 <nl> - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / InputPublicOnly . java <nl> + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / InputPublicOnly . java <nl> @ @ - 108 , 4 + 108 , 10 @ @ public class InputPublicOnly / / ignore - need javadoc <nl> { <nl> return super . toString ( ) ; <nl> } <nl> + <nl> + @ Deprecated @ Override <nl> + public Class getClass ( ) <nl> + { <nl> + return super . getClass ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / xdocs / config _ javadoc . xml b / src / xdocs / config _ javadoc . xml <nl> index 0d6b21b . . 5468fb9 100755 <nl> - - - a / src / xdocs / config _ javadoc . xml <nl> + + + b / src / xdocs / config _ javadoc . xml <nl> @ @ - 229 , 6 + 229 , 29 @ @ <nl> < code > allowMissingReturnTag < / code > . <nl> < / p > <nl> <nl> + < p > <nl> + Javadoc is not required on a method that is tagged with the <nl> + < span class = " code " > @ Override < / span > annotation . However under <nl> + Java 5 it is not possible to mark a method required for an <nl> + interface ( this was < i > corrected < / i > under Java 6 ) . Hence <nl> + Checkstyle supports using the convention of using a single <nl> + < span class = " code " > { @ inheritDoc } < / span > tag instead of all the <nl> + other tags . For example , if the following method is <nl> + implementing a method required by an interface , then the <nl> + Javadoc could be done as : <nl> + < / p > <nl> + <nl> + < pre > <nl> + / * * { @ inheritDoc } * / <nl> + public int checkReturnTag ( final int aTagIndex , <nl> + JavadocTag [ ] aTags , <nl> + int aLineNo ) < / pre > <nl> + <nl> + < p > <nl> + The classpath may need to be configured to locate the class <nl> + information . The classpath configuration is dependent on the <nl> + mechanism used to invoke Checkstyle . <nl> + < / p > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " > <nl> @ @ - 414 , 36 + 437 , 6 @ @ public boolean isSomething ( ) <nl> < / source > <nl> < / subsection > <nl> <nl> - < subsection name = " Notes " > <nl> - < ul > <nl> - < li > <nl> - The classpath may need to be configured to locate the class <nl> - information . The classpath configuration is dependent on the <nl> - mechanism used to invoke Checkstyle . <nl> - < / li > <nl> - <nl> - < li > <nl> - It can be extremely painful writing or duplicating Javadoc <nl> - for a method required for an interface . Hence checkstyle <nl> - supports using the convention of using a single < span <nl> - class = " code " > { @ inheritDoc } < / span > tag instead of all the <nl> - other tags . For example , if the < a <nl> - href = " # checkReturnTag " > above method < / a > was implementing a <nl> - method required by the < span class = " code " > <nl> - com . puppycrawl . tools . checkstyle . Verifier < / span > interface , <nl> - then the Javadoc could be done as : <nl> - <nl> - < pre > <nl> - / * * { @ inheritDoc } * / <nl> - public int checkReturnTag ( final int aTagIndex , <nl> - JavadocTag [ ] aTags , <nl> - int aLineNo ) <nl> - < / pre > <nl> - <nl> - < / li > <nl> - < / ul > <nl> - < / subsection > <nl> - <nl> < subsection name = " Package " > <nl> < p > <nl> com . puppycrawl . tools . checkstyle . checks . javadoc <nl> diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml <nl> index d824d21 . . b9ae947 100755 <nl> - - - a / src / xdocs / releasenotes . xml <nl> + + + b / src / xdocs / releasenotes . xml <nl> @ @ - 32 , 6 + 32 , 12 @ @ <nl> comment . Replaces the check PackageHtml which has been <nl> removed . ( Bug 1228207 ) <nl> < / li > <nl> + < li > <nl> + Enhanced the < a <nl> + href = " config _ javadoc . html # JavadocMethod " > JavadocMethod < / a > <nl> + check to not require Javadoc if the method is tagged with the <nl> + < span class = " code " > @ Override < / span > annotation . <nl> + < / li > <nl> < / ul > <nl> <nl> < p > Fixed Bugs : < / p >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java 
 index aa018cc . . 48d2cb5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java 
 @ @ - 28 , 17 + 28 , 41 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 * < p > 
 - * Ensures that the names of abstract classes conforming to some 
 - * regular expression and check that { @ code abstract } modifier exists . 
 + * Ensures that the names of abstract classes conforming to some regular 
 + * expression and check that { @ code abstract } modifier exists . 
 * < / p > 
 * < p > 
 - * Rationale : Abstract classes are convenience base class 
 - * implementations of interfaces , not types as such . As such 
 - * they should be named to indicate this . Also if names of classes 
 - * starts with ' Abstract ' it ' s very convenient that they will 
 - * have abstract modifier . 
 + * Rationale : Abstract classes are convenience base class implementations of 
 + * interfaces , not types as such . As such they should be named to indicate this . 
 + * Also if names of classes starts with ' Abstract ' it ' s very convenient that 
 + * they will have abstract modifier . 
 + * < / p > 
 + * < ul > 
 + * < li > 
 + * Property { @ code format } - Specify valid identifiers . Default value is 
 + * { @ code " ^ Abstract . + $ " } . < / li > 
 + * < li > 
 + * Property { @ code ignoreModifier } - Control whether to ignore checking for the 
 + * { @ code abstract } modifier on classes that match the name . Default value is 
 + * { @ code false } . < / li > 
 + * < li > 
 + * Property { @ code ignoreName } - Control whether to ignore checking the name . 
 + * Realistically only useful if using the check to identify that match name and 
 + * do not have the { @ code abstract } modifier . Default value is 
 + * { @ code false } . < / li > 
 + * < / ul > 
 + * < p > 
 + * The following example shows how to configure the { @ code AbstractClassName } to 
 + * checks names , but ignore missing { @ code abstract } modifiers : 
 * < / p > 
 * 
 + * < pre > 
 + * & lt ; module name = " AbstractClassName " & gt ; 
 + * & lt ; property name = " ignoreModifier " value = " true " / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * 
 + * @ since 3 . 2 
 * / 
 @ StatelessCheck 
 public final class AbstractClassNameCheck extends AbstractCheck { 
 @ @ - 55 , 17 + 79 , 25 @ @ public final class AbstractClassNameCheck extends AbstractCheck { 
 * / 
 public static final String MSG _ NO _ ABSTRACT _ CLASS _ MODIFIER = " no . abstract . class . modifier " ; 
 
 - / * * Whether to ignore checking the modifier . * / 
 + / * * 
 + * Control whether to ignore checking for the { @ code abstract } modifier on 
 + * classes that match the name . 
 + * / 
 private boolean ignoreModifier ; 
 
 - / * * Whether to ignore checking the name . * / 
 + / * * 
 + * Control whether to ignore checking the name . Realistically only useful 
 + * if using the check to identify that match name and do not have the 
 + * { @ code abstract } modifier . 
 + * / 
 private boolean ignoreName ; 
 
 - / * * The regexp to match against . * / 
 + / * * Specify valid identifiers . * / 
 private Pattern format = Pattern . compile ( " ^ Abstract . + $ " ) ; 
 
 / * * 
 - * Whether to ignore checking for the { @ code abstract } modifier . 
 + * Setter to control whether to ignore checking for the { @ code abstract } modifier on 
 + * classes that match the name . 
 * @ param value new value 
 * / 
 public void setIgnoreModifier ( boolean value ) { 
 @ @ - 73 , 7 + 105 , 8 @ @ public final class AbstractClassNameCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Whether to ignore checking the name . 
 + * Setter to control whether to ignore checking the name . Realistically only useful if 
 + * using the check to identify that match name and do not have the { @ code abstract } modifier . 
 * @ param value new value . 
 * / 
 public void setIgnoreName ( boolean value ) { 
 @ @ - 81 , 7 + 114 , 7 @ @ public final class AbstractClassNameCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Set the format for the specified regular expression . 
 + * Setter to specify valid identifiers . 
 * @ param pattern the new pattern 
 * / 
 public void setFormat ( Pattern pattern ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 773ba8e . . a8b3a49 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 103 , 7 + 103 , 9 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 
 if ( " Content " . equals ( sectionName ) | | " Overview " . equals ( sectionName ) 
 / / suppression list 
 - | | ! " AbbreviationAsWordInName " . equals ( sectionName ) ) { 
 + | | ! " AbbreviationAsWordInName " . equals ( sectionName ) 
 + & & ! " AbstractClassName " . equals ( sectionName ) 
 + ) { 
 continue ; 
 } 
 
 diff - - git a / src / xdocs / checks . xml b / src / xdocs / checks . xml 
 index 0289c45 . . 1175d10 100644 
 - - - a / src / xdocs / checks . xml 
 + + + b / src / xdocs / checks . xml 
 @ @ - 39 , 8 + 39 , 8 @ @ 
 < tr > 
 < td > < a href = " config _ naming . html # AbstractClassName " > AbstractClassName < / a > < / td > 
 < td > 
 - Ensures that the names of abstract classes conforming to some 
 - regular expression . 
 + Ensures that the names of abstract classes conforming to some regular expression and 
 + check that < code > abstract < / code > modifier exists . 
 < / td > 
 < / tr > 
 < tr > 
 diff - - git a / src / xdocs / config _ naming . xml b / src / xdocs / config _ naming . xml 
 index e3c475d . . 9fc1b24 100644 
 - - - a / src / xdocs / config _ naming . xml 
 + + + b / src / xdocs / config _ naming . xml 
 @ @ - 191 , 9 + 191 , 18 @ @ 
 < / section > 
 
 < section name = " AbstractClassName " > 
 + < p > Since Checkstyle 3 . 2 < / p > 
 < subsection name = " Description " > 
 - < p > Since Checkstyle 3 . 2 < / p > 
 - < p > Validates identifiers for < code > abstract < / code > classes . < / p > 
 + < p > 
 + Ensures that the names of abstract classes conforming to some regular expression and 
 + check that < code > abstract < / code > modifier exists . 
 + < / p > 
 + < p > 
 + Rationale : Abstract classes are convenience base class implementations of 
 + interfaces , not types as such . As such they should be named to indicate this . 
 + Also if names of classes starts with ' Abstract ' it ' s very convenient that 
 + they will have abstract modifier . 
 + < / p > 
 < / subsection > 
 
 < subsection name = " Properties " > 
 @ @ - 207 , 7 + 216 , 7 @ @ 
 < / tr > 
 < tr > 
 < td > format < / td > 
 - < td > Specifies valid identifiers . < / td > 
 + < td > Specify valid identifiers . < / td > 
 < td > < a href = " property _ types . html # regexp " > Regular Expression < / a > < / td > 
 < td > < code > " ^ Abstract . + $ " < / code > < / td > 
 < td > 3 . 2 < / td > 
 @ @ - 215 , 7 + 224 , 7 @ @ 
 < tr > 
 < td > ignoreModifier < / td > 
 < td > 
 - Controls whether to ignore checking for the 
 + Control whether to ignore checking for the 
 < code > abstract < / code > modifier on classes that match the 
 name . 
 < / td > 
 @ @ - 226 , 9 + 235 , 9 @ @ 
 < tr > 
 < td > ignoreName < / td > 
 < td > 
 - Controls whether to ignore checking the name . Realistically 
 + Control whether to ignore checking the name . Realistically 
 only useful if using the check to identify that match name 
 - and do not have the < code > abstract < / code > modifier . name . 
 + and do not have the < code > abstract < / code > modifier . 
 < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 < td > < code > false < / code > < / td >

NEAREST DIFF:
diff - - git a / src / testinputs / com / puppycrawl / tools / checkstyle / InputPublicOnly . java b / src / testinputs / com / puppycrawl / tools / checkstyle / InputPublicOnly . java 
 index da0361b . . 8d7ebb5 100644 
 - - - a / src / testinputs / com / puppycrawl / tools / checkstyle / InputPublicOnly . java 
 + + + b / src / testinputs / com / puppycrawl / tools / checkstyle / InputPublicOnly . java 
 @ @ - 108 , 4 + 108 , 10 @ @ public class InputPublicOnly / / ignore - need javadoc 
 { 
 return super . toString ( ) ; 
 } 
 + 
 + @ Deprecated @ Override 
 + public Class getClass ( ) 
 + { 
 + return super . getClass ( ) ; 
 + } 
 } 
 diff - - git a / src / xdocs / config _ javadoc . xml b / src / xdocs / config _ javadoc . xml 
 index 0d6b21b . . 5468fb9 100755 
 - - - a / src / xdocs / config _ javadoc . xml 
 + + + b / src / xdocs / config _ javadoc . xml 
 @ @ - 229 , 6 + 229 , 29 @ @ 
 < code > allowMissingReturnTag < / code > . 
 < / p > 
 
 + < p > 
 + Javadoc is not required on a method that is tagged with the 
 + < span class = " code " > @ Override < / span > annotation . However under 
 + Java 5 it is not possible to mark a method required for an 
 + interface ( this was < i > corrected < / i > under Java 6 ) . Hence 
 + Checkstyle supports using the convention of using a single 
 + < span class = " code " > { @ inheritDoc } < / span > tag instead of all the 
 + other tags . For example , if the following method is 
 + implementing a method required by an interface , then the 
 + Javadoc could be done as : 
 + < / p > 
 + 
 + < pre > 
 + / * * { @ inheritDoc } * / 
 + public int checkReturnTag ( final int aTagIndex , 
 + JavadocTag [ ] aTags , 
 + int aLineNo ) < / pre > 
 + 
 + < p > 
 + The classpath may need to be configured to locate the class 
 + information . The classpath configuration is dependent on the 
 + mechanism used to invoke Checkstyle . 
 + < / p > 
 < / subsection > 
 
 < subsection name = " Properties " > 
 @ @ - 414 , 36 + 437 , 6 @ @ public boolean isSomething ( ) 
 < / source > 
 < / subsection > 
 
 - < subsection name = " Notes " > 
 - < ul > 
 - < li > 
 - The classpath may need to be configured to locate the class 
 - information . The classpath configuration is dependent on the 
 - mechanism used to invoke Checkstyle . 
 - < / li > 
 - 
 - < li > 
 - It can be extremely painful writing or duplicating Javadoc 
 - for a method required for an interface . Hence checkstyle 
 - supports using the convention of using a single < span 
 - class = " code " > { @ inheritDoc } < / span > tag instead of all the 
 - other tags . For example , if the < a 
 - href = " # checkReturnTag " > above method < / a > was implementing a 
 - method required by the < span class = " code " > 
 - com . puppycrawl . tools . checkstyle . Verifier < / span > interface , 
 - then the Javadoc could be done as : 
 - 
 - < pre > 
 - / * * { @ inheritDoc } * / 
 - public int checkReturnTag ( final int aTagIndex , 
 - JavadocTag [ ] aTags , 
 - int aLineNo ) 
 - < / pre > 
 - 
 - < / li > 
 - < / ul > 
 - < / subsection > 
 - 
 < subsection name = " Package " > 
 < p > 
 com . puppycrawl . tools . checkstyle . checks . javadoc 
 diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml 
 index d824d21 . . b9ae947 100755 
 - - - a / src / xdocs / releasenotes . xml 
 + + + b / src / xdocs / releasenotes . xml 
 @ @ - 32 , 6 + 32 , 12 @ @ 
 comment . Replaces the check PackageHtml which has been 
 removed . ( Bug 1228207 ) 
 < / li > 
 + < li > 
 + Enhanced the < a 
 + href = " config _ javadoc . html # JavadocMethod " > JavadocMethod < / a > 
 + check to not require Javadoc if the method is tagged with the 
 + < span class = " code " > @ Override < / span > annotation . 
 + < / li > 
 < / ul > 
 
 < p > Fixed Bugs : < / p >
