BLEU SCORE: 0.18325568129983202

TEST MSG: Issue # 5005 : increased pitest coverage for metrics package
GENERATED MSG: Issue # 5005 : increase coverage of pitest - checks - metrics to 97 %

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 0881813 . . 30bbc01 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1948 , 7 + 1948 , 7 @ @ <nl> < targetTests > <nl> < param > com . puppycrawl . tools . checkstyle . checks . metrics . * < / param > <nl> < / targetTests > <nl> - < mutationThreshold > 97 < / mutationThreshold > <nl> + < mutationThreshold > 98 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java <nl> index b960dd5 . . 8c41a8c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java <nl> @ @ - 59 , 14 + 59 , 7 @ @ public final class ClassDataAbstractionCouplingCheck <nl> <nl> @ Override <nl> public int [ ] getAcceptableTokens ( ) { <nl> - return new int [ ] { <nl> - TokenTypes . PACKAGE _ DEF , <nl> - TokenTypes . IMPORT , <nl> - TokenTypes . CLASS _ DEF , <nl> - TokenTypes . INTERFACE _ DEF , <nl> - TokenTypes . ENUM _ DEF , <nl> - TokenTypes . LITERAL _ NEW , <nl> - } ; <nl> + return getRequiredTokens ( ) ; <nl> } <nl> <nl> / / - @ cs [ SimpleAccessorNameNotation ] Overrides method from the base class . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java <nl> index a749d18 . . bd58329 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java <nl> @ @ - 45 , 9 + 45 , 10 @ @ public class BooleanExpressionComplexityCheckTest extends AbstractModuleTestSupp <nl> <nl> final String [ ] expected = { <nl> " 13 : 9 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , <nl> - " 32 : 9 : " + getCheckMessage ( MSG _ KEY , 6 , 3 ) , <nl> - " 38 : 34 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , <nl> - " 40 : 34 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , <nl> + " 29 : 99 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , <nl> + " 39 : 9 : " + getCheckMessage ( MSG _ KEY , 6 , 3 ) , <nl> + " 45 : 34 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , <nl> + " 47 : 34 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputBooleanExpressionComplexity . java " ) , expected ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> index e141d09 . . 0476374 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> @ @ - 20 , 7 + 20 , 9 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassDataAbstractionCouplingCheck . MSG _ KEY ; <nl> + import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ @ - 41 , 6 + 43 , 17 @ @ public class ClassDataAbstractionCouplingCheckTest extends AbstractModuleTestSup <nl> } <nl> <nl> @ Test <nl> + public void testTokens ( ) { <nl> + final ClassDataAbstractionCouplingCheck check = new ClassDataAbstractionCouplingCheck ( ) ; <nl> + assertNotNull ( " Required tokens should not be null " , check . getRequiredTokens ( ) ) ; <nl> + assertNotNull ( " Acceptable tokens should not be null " , check . getAcceptableTokens ( ) ) ; <nl> + assertArrayEquals ( " Invalid default tokens " , check . getDefaultTokens ( ) , <nl> + check . getAcceptableTokens ( ) ) ; <nl> + assertArrayEquals ( " Invalid acceptable tokens " , check . getDefaultTokens ( ) , <nl> + check . getRequiredTokens ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void test ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createModuleConfig ( ClassDataAbstractionCouplingCheck . class ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> index b72b3f6 . . a7cb8bd 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java <nl> @ @ - 21 , 7 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . metrics . NPathComplexityCheck . MSG _ KEY ; <nl> <nl> + import java . io . File ; <nl> import java . util . Collection ; <nl> + import java . util . Optional ; <nl> import java . util . SortedSet ; <nl> <nl> import org . junit . Assert ; <nl> @ @ - 139 , 6 + 141 , 35 @ @ public class NPathComplexityCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testStatefulFieldsClearedOnBeginTree3 ( ) throws Exception { <nl> + final NPathComplexityCheck check = new NPathComplexityCheck ( ) ; <nl> + final Optional < DetailAST > question = TestUtil . findTokenInAstByPredicate ( <nl> + TestUtil . parseFile ( new File ( getPath ( " InputNPathComplexity . java " ) ) ) , <nl> + ast - > ast . getType ( ) = = TokenTypes . QUESTION ) ; <nl> + <nl> + Assert . assertTrue ( " Ast should contain QUESTION " , question . isPresent ( ) ) ; <nl> + <nl> + Assert . assertTrue ( " State is not cleared on beginTree " , <nl> + TestUtil . isStatefulFieldClearedDuringBeginTree ( <nl> + check , <nl> + question . get ( ) , <nl> + " processingTokenEnd " , <nl> + processingTokenEnd - > { <nl> + try { <nl> + return ( Integer ) TestUtil . getClassDeclaredField ( <nl> + processingTokenEnd . getClass ( ) , " endLineNo " ) . get ( <nl> + processingTokenEnd ) = = 0 <nl> + & & ( Integer ) TestUtil . getClassDeclaredField ( <nl> + processingTokenEnd . getClass ( ) , " endColumnNo " ) . get ( <nl> + processingTokenEnd ) = = 0 ; <nl> + } <nl> + catch ( IllegalAccessException | NoSuchFieldException ex ) { <nl> + throw new IllegalStateException ( ex ) ; <nl> + } <nl> + } ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testDefaultConfiguration ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createModuleConfig ( NPathComplexityCheck . class ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexity . java <nl> index 8d5bd7a . . 1c8b481 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexity . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexity . java <nl> @ @ - 24 , 6 + 24 , 13 @ @ public class InputBooleanExpressionComplexity { <nl> } <nl> <nl> public boolean equals ( Object object ) { <nl> + new NestedClass ( ) { <nl> + public void method ( ) { <nl> + new Settings ( Settings . FALSE | | Settings . FALSE | | Settings . FALSE | | Settings . FALSE | | Settings . FALSE ) ; <nl> + } <nl> + public void method2 ( ) { <nl> + } <nl> + } ; <nl> return ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) | | ( _ a & & _ d ) ) ) ; <nl> } <nl> <nl> @ @ - 68 , 4 + 75 , 9 @ @ public class InputBooleanExpressionComplexity { <nl> { <nl> } <nl> } <nl> + <nl> + abstract class NestedClass { <nl> + public abstract void method ( ) ; <nl> + public abstract void method2 ( ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / . ci / eclipse - compiler - javac . sh b / . ci / eclipse - compiler - javac . sh <nl> index 5d1c037 . . a8e109e 100755 <nl> - - - a / . ci / eclipse - compiler - javac . sh <nl> + + + b / . ci / eclipse - compiler - javac . sh <nl> @ @ - 22 , 8 + 22 , 8 @ @ java - jar $ ECJ _ PATH - target 1 . 8 - source 1 . 8 - cp $ 1 \ <nl> - enableJavadoc src / main / java target / generated - sources / antlr - properties config / org . eclipse . jdt . core . prefs \ <nl> > $ RESULT _ FILE 2 > & 1 | true <nl> <nl> - echo " Checking for ERRORs in $ RESULT _ FILE . . . " <nl> - if [ [ $ ( grep ERROR $ RESULT _ FILE | cat | wc - l ) > 0 ] ] ; then <nl> + echo " Checking for ERROR | WARNING | INFO in $ RESULT _ FILE . . . " <nl> + if [ [ $ ( grep - E " ERROR | WARNING | INFO " $ RESULT _ FILE | cat | wc - l ) > 0 ] ] ; then <nl> cat $ RESULT _ FILE <nl> false <nl> fi <nl> diff - - git a / config / org . eclipse . jdt . core . prefs b / config / org . eclipse . jdt . core . prefs <nl> index 4edab5e . . 415ba57 100644 <nl> - - - a / config / org . eclipse . jdt . core . prefs <nl> + + + b / config / org . eclipse . jdt . core . prefs <nl> @ @ - 72 , 10 + 72 , 10 @ @ org . eclipse . jdt . core . compiler . annotation . missingNonNullByDefaultAnnotation = ignor <nl> org . eclipse . jdt . core . compiler . problem . autoboxing = ignore <nl> org . eclipse . jdt . core . compiler . problem . potentiallyUnclosedCloseable = ignore <nl> org . eclipse . jdt . core . compiler . problem . potentialNullReference = ignore <nl> - org . eclipse . jdt . core . compiler . problem . rawTypeReference = ignore <nl> + org . eclipse . jdt . core . compiler . problem . rawTypeReference = warning <nl> org . eclipse . jdt . core . compiler . problem . reportMethodCanBePotentiallyStatic = ignore <nl> org . eclipse . jdt . core . compiler . problem . syntheticAccessEmulation = ignore <nl> - org . eclipse . jdt . core . compiler . problem . uncheckedTypeOperation = ignore <nl> + org . eclipse . jdt . core . compiler . problem . uncheckedTypeOperation = warning <nl> org . eclipse . jdt . core . compiler . problem . unnecessaryElse = ignore <nl> org . eclipse . jdt . core . compiler . problem . unnecessaryTypeCheck = ignore <nl> org . eclipse . jdt . core . compiler . problem . unqualifiedFieldAccess = ignore <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> index 2a5661d . . 3fc3282 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> @ @ - 46 , 8 + 46 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> * @ author Oliver Burn <nl> * @ author Rick Giles <nl> * @ author o _ sukhodoslky <nl> + * <nl> + * @ noinspection deprecation <nl> * / <nl> - @ SuppressWarnings ( " deprecation " ) <nl> public class JavadocMethodCheck extends AbstractTypeAwareCheck { <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java b / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java <nl> index 3b1c072 . . 6a69971 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java <nl> @ @ - 146 , 7 + 146 , 7 @ @ public abstract class AbstractNode implements NodeInfo { <nl> * @ return namespace array <nl> * / <nl> @ Override <nl> - public final NamespaceBinding [ ] getDeclaredNamespaces ( NamespaceBinding . . . namespaceBindings ) { <nl> + public final NamespaceBinding [ ] getDeclaredNamespaces ( NamespaceBinding [ ] namespaceBindings ) { <nl> throw throwUnsupportedOperationException ( ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java <nl> index 253b16b . . 2ebea4d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java <nl> @ @ - 132 , 7 + 132 , 8 @ @ public class RootNodeTest extends AbstractPathTestSupport { <nl> @ Test <nl> public void testGetDeclaredNamespaces ( ) throws Exception { <nl> try { <nl> - rootNode . getDeclaredNamespaces ( new NamespaceBinding ( " prefix " , " uri " ) ) ; <nl> + rootNode . getDeclaredNamespaces ( <nl> + new NamespaceBinding [ ] { new NamespaceBinding ( " prefix " , " uri " ) } ) ; <nl> fail ( " Exception is excepted " ) ; <nl> } <nl> catch ( UnsupportedOperationException ex ) {

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 0881813 . . 30bbc01 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1948 , 7 + 1948 , 7 @ @ 
 < targetTests > 
 < param > com . puppycrawl . tools . checkstyle . checks . metrics . * < / param > 
 < / targetTests > 
 - < mutationThreshold > 97 < / mutationThreshold > 
 + < mutationThreshold > 98 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java 
 index b960dd5 . . 8c41a8c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheck . java 
 @ @ - 59 , 14 + 59 , 7 @ @ public final class ClassDataAbstractionCouplingCheck 
 
 @ Override 
 public int [ ] getAcceptableTokens ( ) { 
 - return new int [ ] { 
 - TokenTypes . PACKAGE _ DEF , 
 - TokenTypes . IMPORT , 
 - TokenTypes . CLASS _ DEF , 
 - TokenTypes . INTERFACE _ DEF , 
 - TokenTypes . ENUM _ DEF , 
 - TokenTypes . LITERAL _ NEW , 
 - } ; 
 + return getRequiredTokens ( ) ; 
 } 
 
 / / - @ cs [ SimpleAccessorNameNotation ] Overrides method from the base class . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java 
 index a749d18 . . bd58329 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java 
 @ @ - 45 , 9 + 45 , 10 @ @ public class BooleanExpressionComplexityCheckTest extends AbstractModuleTestSupp 
 
 final String [ ] expected = { 
 " 13 : 9 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , 
 - " 32 : 9 : " + getCheckMessage ( MSG _ KEY , 6 , 3 ) , 
 - " 38 : 34 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , 
 - " 40 : 34 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , 
 + " 29 : 99 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , 
 + " 39 : 9 : " + getCheckMessage ( MSG _ KEY , 6 , 3 ) , 
 + " 45 : 34 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , 
 + " 47 : 34 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputBooleanExpressionComplexity . java " ) , expected ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 index e141d09 . . 0476374 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 @ @ - 20 , 7 + 20 , 9 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassDataAbstractionCouplingCheck . MSG _ KEY ; 
 + import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 @ @ - 41 , 6 + 43 , 17 @ @ public class ClassDataAbstractionCouplingCheckTest extends AbstractModuleTestSup 
 } 
 
 @ Test 
 + public void testTokens ( ) { 
 + final ClassDataAbstractionCouplingCheck check = new ClassDataAbstractionCouplingCheck ( ) ; 
 + assertNotNull ( " Required tokens should not be null " , check . getRequiredTokens ( ) ) ; 
 + assertNotNull ( " Acceptable tokens should not be null " , check . getAcceptableTokens ( ) ) ; 
 + assertArrayEquals ( " Invalid default tokens " , check . getDefaultTokens ( ) , 
 + check . getAcceptableTokens ( ) ) ; 
 + assertArrayEquals ( " Invalid acceptable tokens " , check . getDefaultTokens ( ) , 
 + check . getRequiredTokens ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void test ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createModuleConfig ( ClassDataAbstractionCouplingCheck . class ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 index b72b3f6 . . a7cb8bd 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheckTest . java 
 @ @ - 21 , 7 + 21 , 9 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . metrics . NPathComplexityCheck . MSG _ KEY ; 
 
 + import java . io . File ; 
 import java . util . Collection ; 
 + import java . util . Optional ; 
 import java . util . SortedSet ; 
 
 import org . junit . Assert ; 
 @ @ - 139 , 6 + 141 , 35 @ @ public class NPathComplexityCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testStatefulFieldsClearedOnBeginTree3 ( ) throws Exception { 
 + final NPathComplexityCheck check = new NPathComplexityCheck ( ) ; 
 + final Optional < DetailAST > question = TestUtil . findTokenInAstByPredicate ( 
 + TestUtil . parseFile ( new File ( getPath ( " InputNPathComplexity . java " ) ) ) , 
 + ast - > ast . getType ( ) = = TokenTypes . QUESTION ) ; 
 + 
 + Assert . assertTrue ( " Ast should contain QUESTION " , question . isPresent ( ) ) ; 
 + 
 + Assert . assertTrue ( " State is not cleared on beginTree " , 
 + TestUtil . isStatefulFieldClearedDuringBeginTree ( 
 + check , 
 + question . get ( ) , 
 + " processingTokenEnd " , 
 + processingTokenEnd - > { 
 + try { 
 + return ( Integer ) TestUtil . getClassDeclaredField ( 
 + processingTokenEnd . getClass ( ) , " endLineNo " ) . get ( 
 + processingTokenEnd ) = = 0 
 + & & ( Integer ) TestUtil . getClassDeclaredField ( 
 + processingTokenEnd . getClass ( ) , " endColumnNo " ) . get ( 
 + processingTokenEnd ) = = 0 ; 
 + } 
 + catch ( IllegalAccessException | NoSuchFieldException ex ) { 
 + throw new IllegalStateException ( ex ) ; 
 + } 
 + } ) ) ; 
 + } 
 + 
 + @ Test 
 public void testDefaultConfiguration ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createModuleConfig ( NPathComplexityCheck . class ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexity . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexity . java 
 index 8d5bd7a . . 1c8b481 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexity . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / booleanexpressioncomplexity / InputBooleanExpressionComplexity . java 
 @ @ - 24 , 6 + 24 , 13 @ @ public class InputBooleanExpressionComplexity { 
 } 
 
 public boolean equals ( Object object ) { 
 + new NestedClass ( ) { 
 + public void method ( ) { 
 + new Settings ( Settings . FALSE | | Settings . FALSE | | Settings . FALSE | | Settings . FALSE | | Settings . FALSE ) ; 
 + } 
 + public void method2 ( ) { 
 + } 
 + } ; 
 return ( ( ( _ a & & ( _ b & _ c ) ) | | ( _ c ^ _ d ) | | ( _ a & & _ d ) ) ) ; 
 } 
 
 @ @ - 68 , 4 + 75 , 9 @ @ public class InputBooleanExpressionComplexity { 
 { 
 } 
 } 
 + 
 + abstract class NestedClass { 
 + public abstract void method ( ) ; 
 + public abstract void method2 ( ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / . ci / eclipse - compiler - javac . sh b / . ci / eclipse - compiler - javac . sh 
 index 5d1c037 . . a8e109e 100755 
 - - - a / . ci / eclipse - compiler - javac . sh 
 + + + b / . ci / eclipse - compiler - javac . sh 
 @ @ - 22 , 8 + 22 , 8 @ @ java - jar $ ECJ _ PATH - target 1 . 8 - source 1 . 8 - cp $ 1 \ 
 - enableJavadoc src / main / java target / generated - sources / antlr - properties config / org . eclipse . jdt . core . prefs \ 
 > $ RESULT _ FILE 2 > & 1 | true 
 
 - echo " Checking for ERRORs in $ RESULT _ FILE . . . " 
 - if [ [ $ ( grep ERROR $ RESULT _ FILE | cat | wc - l ) > 0 ] ] ; then 
 + echo " Checking for ERROR | WARNING | INFO in $ RESULT _ FILE . . . " 
 + if [ [ $ ( grep - E " ERROR | WARNING | INFO " $ RESULT _ FILE | cat | wc - l ) > 0 ] ] ; then 
 cat $ RESULT _ FILE 
 false 
 fi 
 diff - - git a / config / org . eclipse . jdt . core . prefs b / config / org . eclipse . jdt . core . prefs 
 index 4edab5e . . 415ba57 100644 
 - - - a / config / org . eclipse . jdt . core . prefs 
 + + + b / config / org . eclipse . jdt . core . prefs 
 @ @ - 72 , 10 + 72 , 10 @ @ org . eclipse . jdt . core . compiler . annotation . missingNonNullByDefaultAnnotation = ignor 
 org . eclipse . jdt . core . compiler . problem . autoboxing = ignore 
 org . eclipse . jdt . core . compiler . problem . potentiallyUnclosedCloseable = ignore 
 org . eclipse . jdt . core . compiler . problem . potentialNullReference = ignore 
 - org . eclipse . jdt . core . compiler . problem . rawTypeReference = ignore 
 + org . eclipse . jdt . core . compiler . problem . rawTypeReference = warning 
 org . eclipse . jdt . core . compiler . problem . reportMethodCanBePotentiallyStatic = ignore 
 org . eclipse . jdt . core . compiler . problem . syntheticAccessEmulation = ignore 
 - org . eclipse . jdt . core . compiler . problem . uncheckedTypeOperation = ignore 
 + org . eclipse . jdt . core . compiler . problem . uncheckedTypeOperation = warning 
 org . eclipse . jdt . core . compiler . problem . unnecessaryElse = ignore 
 org . eclipse . jdt . core . compiler . problem . unnecessaryTypeCheck = ignore 
 org . eclipse . jdt . core . compiler . problem . unqualifiedFieldAccess = ignore 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 index 2a5661d . . 3fc3282 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 @ @ - 46 , 8 + 46 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 * @ author Oliver Burn 
 * @ author Rick Giles 
 * @ author o _ sukhodoslky 
 + * 
 + * @ noinspection deprecation 
 * / 
 - @ SuppressWarnings ( " deprecation " ) 
 public class JavadocMethodCheck extends AbstractTypeAwareCheck { 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java b / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java 
 index 3b1c072 . . 6a69971 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / xpath / AbstractNode . java 
 @ @ - 146 , 7 + 146 , 7 @ @ public abstract class AbstractNode implements NodeInfo { 
 * @ return namespace array 
 * / 
 @ Override 
 - public final NamespaceBinding [ ] getDeclaredNamespaces ( NamespaceBinding . . . namespaceBindings ) { 
 + public final NamespaceBinding [ ] getDeclaredNamespaces ( NamespaceBinding [ ] namespaceBindings ) { 
 throw throwUnsupportedOperationException ( ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java 
 index 253b16b . . 2ebea4d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / xpath / RootNodeTest . java 
 @ @ - 132 , 7 + 132 , 8 @ @ public class RootNodeTest extends AbstractPathTestSupport { 
 @ Test 
 public void testGetDeclaredNamespaces ( ) throws Exception { 
 try { 
 - rootNode . getDeclaredNamespaces ( new NamespaceBinding ( " prefix " , " uri " ) ) ; 
 + rootNode . getDeclaredNamespaces ( 
 + new NamespaceBinding [ ] { new NamespaceBinding ( " prefix " , " uri " ) } ) ; 
 fail ( " Exception is excepted " ) ; 
 } 
 catch ( UnsupportedOperationException ex ) {
