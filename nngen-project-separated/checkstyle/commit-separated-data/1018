BLEU SCORE: 0.05439330544349821

TEST MSG: Issue # 3426 : remove warning on PACKAGE _ DEF preceded by javadoc not separated by line
GENERATED MSG: Issue # 2266 : Fixed blank line indentification for EmptyLineSeparator check

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> index caccf1c . . 33e419f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> + import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; <nl> <nl> / * * <nl> * Checks for empty line separators after header , package , all import declarations , <nl> @ @ - 251 , 6 + 252 , 11 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { <nl> } <nl> <nl> @ Override <nl> + public boolean isCommentNodesRequired ( ) { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> return getAcceptableTokens ( ) ; <nl> } <nl> @ @ - 285 , 7 + 291 , 10 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { <nl> processMultipleLinesInside ( ast ) ; <nl> } <nl> <nl> - final DetailAST nextToken = ast . getNextSibling ( ) ; <nl> + DetailAST nextToken = ast . getNextSibling ( ) ; <nl> + while ( nextToken ! = null & & isComment ( nextToken ) ) { <nl> + nextToken = nextToken . getNextSibling ( ) ; <nl> + } <nl> if ( nextToken ! = null ) { <nl> final int astType = ast . getType ( ) ; <nl> switch ( astType ) { <nl> @ @ - 405 , 7 + 414 , 14 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { <nl> * / <nl> private void processPackage ( DetailAST ast , DetailAST nextToken ) { <nl> if ( ast . getLineNo ( ) > 1 & & ! hasEmptyLineBefore ( ast ) ) { <nl> - log ( ast . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , ast . getText ( ) ) ; <nl> + if ( getFileContents ( ) . getFileName ( ) . endsWith ( " package - info . java " ) ) { <nl> + if ( ast . getFirstChild ( ) . getChildCount ( ) = = 0 & & ! isPrecededByJavadoc ( ast ) ) { <nl> + log ( ast . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , ast . getText ( ) ) ; <nl> + } <nl> + } <nl> + else { <nl> + log ( ast . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , ast . getText ( ) ) ; <nl> + } <nl> } <nl> if ( ! hasEmptyLineAfter ( ast ) ) { <nl> log ( nextToken . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , nextToken . getText ( ) ) ; <nl> @ @ - 487 , 8 + 503 , 12 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { <nl> if ( lastToken = = null ) { <nl> lastToken = token . getLastChild ( ) ; <nl> } <nl> + DetailAST nextToken = token . getNextSibling ( ) ; <nl> + if ( isComment ( nextToken ) ) { <nl> + nextToken = nextToken . getNextSibling ( ) ; <nl> + } <nl> / / Start of the next token <nl> - final int nextBegin = token . getNextSibling ( ) . getLineNo ( ) ; <nl> + final int nextBegin = nextToken . getLineNo ( ) ; <nl> / / End of current token . <nl> final int currentEnd = lastToken . getLineNo ( ) ; <nl> return hasEmptyLine ( currentEnd + 1 , nextBegin - 1 ) ; <nl> @ @ - 534 , 6 + 554 , 31 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> + * Check if token is preceded by javadoc comment . <nl> + * @ param token token for check . <nl> + * @ return true , if token is preceded by javadoc comment . <nl> + * / <nl> + private static boolean isPrecededByJavadoc ( DetailAST token ) { <nl> + boolean result = false ; <nl> + final DetailAST previous = token . getPreviousSibling ( ) ; <nl> + if ( previous . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN <nl> + & & JavadocUtils . isJavadocComment ( previous ) ) { <nl> + result = true ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> + * Check if token is a comment . <nl> + * @ param ast ast node <nl> + * @ return true , if given ast is comment . <nl> + * / <nl> + private static boolean isComment ( DetailAST ast ) { <nl> + return ast . getType ( ) = = TokenTypes . SINGLE _ LINE _ COMMENT <nl> + | | ast . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN ; <nl> + } <nl> + <nl> + / * * <nl> * If variable definition is a type field . <nl> * @ param variableDef variable definition . <nl> * @ return true variable definition is a type field . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> index e00cbff . . 27a4e67 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> @ @ - 55 , 14 + 55 , 14 @ @ public class EmptyLineSeparatorCheckTest <nl> <nl> final String [ ] expected = { <nl> " 21 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " import " ) , <nl> - " 35 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CLASS _ DEF " ) , <nl> - " 38 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " VARIABLE _ DEF " ) , <nl> - " 39 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " STATIC _ INIT " ) , <nl> - " 43 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INSTANCE _ INIT " ) , <nl> - " 57 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CTOR _ DEF " ) , <nl> - " 62 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , <nl> - " 79 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , <nl> - " 110 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INTERFACE _ DEF " ) , <nl> + " 38 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CLASS _ DEF " ) , <nl> + " 41 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " VARIABLE _ DEF " ) , <nl> + " 42 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " STATIC _ INIT " ) , <nl> + " 46 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INSTANCE _ INIT " ) , <nl> + " 60 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CTOR _ DEF " ) , <nl> + " 65 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , <nl> + " 82 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , <nl> + " 113 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INTERFACE _ DEF " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputEmptyLineSeparator . java " ) , expected ) ; <nl> } <nl> @ @ - 75 , 13 + 75 , 13 @ @ public class EmptyLineSeparatorCheckTest <nl> <nl> final String [ ] expected = { <nl> " 21 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " import " ) , <nl> - " 35 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CLASS _ DEF " ) , <nl> - " 39 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " STATIC _ INIT " ) , <nl> - " 43 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INSTANCE _ INIT " ) , <nl> - " 57 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CTOR _ DEF " ) , <nl> - " 62 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , <nl> - " 79 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , <nl> - " 110 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INTERFACE _ DEF " ) , <nl> + " 38 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CLASS _ DEF " ) , <nl> + " 42 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " STATIC _ INIT " ) , <nl> + " 46 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INSTANCE _ INIT " ) , <nl> + " 60 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CTOR _ DEF " ) , <nl> + " 65 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , <nl> + " 82 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , <nl> + " 113 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INTERFACE _ DEF " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputEmptyLineSeparator . java " ) , expected ) ; <nl> } <nl> @ @ - 191 , 4 + 191 , 44 @ @ public class EmptyLineSeparatorCheckTest <nl> getPath ( " InputEmptyLineSeparatorMultipleEmptyLinesInside . java " ) , <nl> expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testAllowPackageAnnotation ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( EmptyLineSeparatorCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , <nl> + getPath ( " package - info / test1 / package - info . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAllowJavadocBeforePackage ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( EmptyLineSeparatorCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , <nl> + getPath ( " package - info / test2 / package - info . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDisAllowBlockCommentBeforePackage ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( EmptyLineSeparatorCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 3 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " package " ) , <nl> + } ; <nl> + verify ( checkConfig , <nl> + getPath ( " package - info / test3 / package - info . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAllowSingleLineCommentPackage ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( EmptyLineSeparatorCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 3 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " package " ) , <nl> + } ; <nl> + verify ( checkConfig , <nl> + getPath ( " package - info / test4 / package - info . java " ) , <nl> + expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyLineSeparator . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyLineSeparator . java <nl> index 679fb65 . . 52157b8 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyLineSeparator . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyLineSeparator . java <nl> @ @ - 17 , 18 + 17 , 21 @ @ <nl> / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> <nl> - package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace ; / / no violation : trainling comment <nl> import java . io . Serializable ; <nl> - import java . util . ArrayList ; <nl> + import java . util . ArrayList ; / * no violation : trailing comment * / <nl> import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . concurrent . Callable ; <nl> import java . util . Collections ; <nl> + / * no violation : block comment after token * / <nl> <nl> import com . oracle . net . Sdp ; <nl> + / / no violation : single line comment after token <nl> <nl> - import javax . swing . AbstractAction ; <nl> + import javax . swing . AbstractAction ; / * no violation : no trailing comment <nl> + * / <nl> <nl> import org . apache . commons . beanutils . locale . converters . ByteLocaleConverter ; <nl> import org . apache . commons . beanutils . BasicDynaBean ; <nl> @ @ - 125 , 6 + 128 , 12 @ @ class InputEmptyLineSeparator <nl> / / empty <nl> } <nl> } <nl> + <nl> + <nl> + class SecondInnerClass { <nl> + <nl> + private int intVariable ; <nl> + } <nl> } <nl> <nl> class Class2 { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test1 / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test1 / package - info . java <nl> new file mode 100644 <nl> index 0000000 . . 717e51a <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test1 / package - info . java <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + / * OK : for test allowing to place annotation before PACKAGE _ DEF . * / <nl> + @ Deprecated <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . packageinfo . test1 ; <nl> + <nl> + import java . lang . Deprecated ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test2 / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test2 / package - info . java <nl> new file mode 100644 <nl> index 0000000 . . bb11990 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test2 / package - info . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + / * * OK : for test allowing to place javadoc before PACKAGE _ DEF . * / <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . packageinfo . test2 ; <nl> + <nl> + / / that import is for doing check of PACKAGE _ DEF , <nl> + / / because EmptyLineSeparatorCheck doesn ' t check last token <nl> + import java . lang . System ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test3 / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test3 / package - info . java <nl> new file mode 100644 <nl> index 0000000 . . 9551c29 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test3 / package - info . java <nl> @ @ - 0 , 0 + 1 , 7 @ @ <nl> + / * violation : for test that there ' s warning when block comment isn ' t <nl> + separated from PACKAGE _ DEF by line . * / <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . packageinfo . test3 ; <nl> + <nl> + / / that import is for doing check of PACKAGE _ DEF , <nl> + / / because EmptyLineSeparatorCheck doesn ' t check last token <nl> + import java . lang . System ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test4 / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test4 / package - info . java <nl> new file mode 100644 <nl> index 0000000 . . 0f4d20f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test4 / package - info . java <nl> @ @ - 0 , 0 + 1 , 7 @ @ <nl> + / / for test there ' s warning when single line comment isn ' t separated from PACKAGE _ DEF by line <nl> + / / violation is expected after this line <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . packageinfo . test4 ; <nl> + <nl> + / / that import is for doing check of PACKAGE _ DEF , <nl> + / / because EmptyLineSeparatorCheck doesn ' t check last token <nl> + import java . lang . System ;
NEAREST DIFF (one line): diff - - git a / . travis . yml b / . travis . yml <nl> index d3d6d05 . . d09aeb2 100644 <nl> - - - a / . travis . yml <nl> + + + b / . travis . yml <nl> @ @ - 9 , 7 + 9 , 7 @ @ matrix : <nl> include : <nl> # unit tests ( oraclejdk8 ) <nl> - jdk : oraclejdk8 <nl> - env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify " COVERAGE _ CMD = " " DEPLOY = " true " <nl> + env : DESC = " tests and deploy " CMD = " mvn clean integration - test failsafe : verify " COVERAGE _ CMD = " " DEPLOY = " true " <nl> <nl> # checkstyle ( oraclejdk8 ) <nl> - jdk : oraclejdk8 <nl> @ @ - 232 , 8 + 232 , 8 @ @ after _ success : <nl> & & $ DEPLOY = = ' true ' <nl> ] ] ; <nl> then <nl> - mvn - s config / deploy - settings . xml deploy <nl> - - DskipTests - DskipITs - Dpmd . skip = true - Dfindbugs . skip = true <nl> + mvn - s config / deploy - settings . xml deploy \ <nl> + - DskipTests - DskipITs - Dpmd . skip = true - Dfindbugs . skip = true \ <nl> - Dcobertura . skip = true - Dcheckstyle . ant . skip = true ; <nl> fi <nl>

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 index caccf1c . . 33e419f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 + import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; 
 
 / * * 
 * Checks for empty line separators after header , package , all import declarations , 
 @ @ - 251 , 6 + 252 , 11 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { 
 } 
 
 @ Override 
 + public boolean isCommentNodesRequired ( ) { 
 + return true ; 
 + } 
 + 
 + @ Override 
 public int [ ] getDefaultTokens ( ) { 
 return getAcceptableTokens ( ) ; 
 } 
 @ @ - 285 , 7 + 291 , 10 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { 
 processMultipleLinesInside ( ast ) ; 
 } 
 
 - final DetailAST nextToken = ast . getNextSibling ( ) ; 
 + DetailAST nextToken = ast . getNextSibling ( ) ; 
 + while ( nextToken ! = null & & isComment ( nextToken ) ) { 
 + nextToken = nextToken . getNextSibling ( ) ; 
 + } 
 if ( nextToken ! = null ) { 
 final int astType = ast . getType ( ) ; 
 switch ( astType ) { 
 @ @ - 405 , 7 + 414 , 14 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { 
 * / 
 private void processPackage ( DetailAST ast , DetailAST nextToken ) { 
 if ( ast . getLineNo ( ) > 1 & & ! hasEmptyLineBefore ( ast ) ) { 
 - log ( ast . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , ast . getText ( ) ) ; 
 + if ( getFileContents ( ) . getFileName ( ) . endsWith ( " package - info . java " ) ) { 
 + if ( ast . getFirstChild ( ) . getChildCount ( ) = = 0 & & ! isPrecededByJavadoc ( ast ) ) { 
 + log ( ast . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , ast . getText ( ) ) ; 
 + } 
 + } 
 + else { 
 + log ( ast . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , ast . getText ( ) ) ; 
 + } 
 } 
 if ( ! hasEmptyLineAfter ( ast ) ) { 
 log ( nextToken . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , nextToken . getText ( ) ) ; 
 @ @ - 487 , 8 + 503 , 12 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { 
 if ( lastToken = = null ) { 
 lastToken = token . getLastChild ( ) ; 
 } 
 + DetailAST nextToken = token . getNextSibling ( ) ; 
 + if ( isComment ( nextToken ) ) { 
 + nextToken = nextToken . getNextSibling ( ) ; 
 + } 
 / / Start of the next token 
 - final int nextBegin = token . getNextSibling ( ) . getLineNo ( ) ; 
 + final int nextBegin = nextToken . getLineNo ( ) ; 
 / / End of current token . 
 final int currentEnd = lastToken . getLineNo ( ) ; 
 return hasEmptyLine ( currentEnd + 1 , nextBegin - 1 ) ; 
 @ @ - 534 , 6 + 554 , 31 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { 
 } 
 
 / * * 
 + * Check if token is preceded by javadoc comment . 
 + * @ param token token for check . 
 + * @ return true , if token is preceded by javadoc comment . 
 + * / 
 + private static boolean isPrecededByJavadoc ( DetailAST token ) { 
 + boolean result = false ; 
 + final DetailAST previous = token . getPreviousSibling ( ) ; 
 + if ( previous . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN 
 + & & JavadocUtils . isJavadocComment ( previous ) ) { 
 + result = true ; 
 + } 
 + return result ; 
 + } 
 + 
 + / * * 
 + * Check if token is a comment . 
 + * @ param ast ast node 
 + * @ return true , if given ast is comment . 
 + * / 
 + private static boolean isComment ( DetailAST ast ) { 
 + return ast . getType ( ) = = TokenTypes . SINGLE _ LINE _ COMMENT 
 + | | ast . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN ; 
 + } 
 + 
 + / * * 
 * If variable definition is a type field . 
 * @ param variableDef variable definition . 
 * @ return true variable definition is a type field . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 index e00cbff . . 27a4e67 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 @ @ - 55 , 14 + 55 , 14 @ @ public class EmptyLineSeparatorCheckTest 
 
 final String [ ] expected = { 
 " 21 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " import " ) , 
 - " 35 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CLASS _ DEF " ) , 
 - " 38 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " VARIABLE _ DEF " ) , 
 - " 39 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " STATIC _ INIT " ) , 
 - " 43 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INSTANCE _ INIT " ) , 
 - " 57 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CTOR _ DEF " ) , 
 - " 62 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , 
 - " 79 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , 
 - " 110 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INTERFACE _ DEF " ) , 
 + " 38 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CLASS _ DEF " ) , 
 + " 41 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " VARIABLE _ DEF " ) , 
 + " 42 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " STATIC _ INIT " ) , 
 + " 46 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INSTANCE _ INIT " ) , 
 + " 60 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CTOR _ DEF " ) , 
 + " 65 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , 
 + " 82 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , 
 + " 113 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INTERFACE _ DEF " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputEmptyLineSeparator . java " ) , expected ) ; 
 } 
 @ @ - 75 , 13 + 75 , 13 @ @ public class EmptyLineSeparatorCheckTest 
 
 final String [ ] expected = { 
 " 21 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " import " ) , 
 - " 35 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CLASS _ DEF " ) , 
 - " 39 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " STATIC _ INIT " ) , 
 - " 43 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INSTANCE _ INIT " ) , 
 - " 57 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CTOR _ DEF " ) , 
 - " 62 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , 
 - " 79 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , 
 - " 110 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INTERFACE _ DEF " ) , 
 + " 38 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CLASS _ DEF " ) , 
 + " 42 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " STATIC _ INIT " ) , 
 + " 46 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INSTANCE _ INIT " ) , 
 + " 60 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " CTOR _ DEF " ) , 
 + " 65 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , 
 + " 82 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " METHOD _ DEF " ) , 
 + " 113 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " INTERFACE _ DEF " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputEmptyLineSeparator . java " ) , expected ) ; 
 } 
 @ @ - 191 , 4 + 191 , 44 @ @ public class EmptyLineSeparatorCheckTest 
 getPath ( " InputEmptyLineSeparatorMultipleEmptyLinesInside . java " ) , 
 expected ) ; 
 } 
 + 
 + @ Test 
 + public void testAllowPackageAnnotation ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( EmptyLineSeparatorCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , 
 + getPath ( " package - info / test1 / package - info . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testAllowJavadocBeforePackage ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( EmptyLineSeparatorCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , 
 + getPath ( " package - info / test2 / package - info . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testDisAllowBlockCommentBeforePackage ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( EmptyLineSeparatorCheck . class ) ; 
 + final String [ ] expected = { 
 + " 3 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " package " ) , 
 + } ; 
 + verify ( checkConfig , 
 + getPath ( " package - info / test3 / package - info . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testAllowSingleLineCommentPackage ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( EmptyLineSeparatorCheck . class ) ; 
 + final String [ ] expected = { 
 + " 3 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " package " ) , 
 + } ; 
 + verify ( checkConfig , 
 + getPath ( " package - info / test4 / package - info . java " ) , 
 + expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyLineSeparator . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyLineSeparator . java 
 index 679fb65 . . 52157b8 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyLineSeparator . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputEmptyLineSeparator . java 
 @ @ - 17 , 18 + 17 , 21 @ @ 
 / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 
 - package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace ; / / no violation : trainling comment 
 import java . io . Serializable ; 
 - import java . util . ArrayList ; 
 + import java . util . ArrayList ; / * no violation : trailing comment * / 
 import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . concurrent . Callable ; 
 import java . util . Collections ; 
 + / * no violation : block comment after token * / 
 
 import com . oracle . net . Sdp ; 
 + / / no violation : single line comment after token 
 
 - import javax . swing . AbstractAction ; 
 + import javax . swing . AbstractAction ; / * no violation : no trailing comment 
 + * / 
 
 import org . apache . commons . beanutils . locale . converters . ByteLocaleConverter ; 
 import org . apache . commons . beanutils . BasicDynaBean ; 
 @ @ - 125 , 6 + 128 , 12 @ @ class InputEmptyLineSeparator 
 / / empty 
 } 
 } 
 + 
 + 
 + class SecondInnerClass { 
 + 
 + private int intVariable ; 
 + } 
 } 
 
 class Class2 { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test1 / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test1 / package - info . java 
 new file mode 100644 
 index 0000000 . . 717e51a 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test1 / package - info . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + / * OK : for test allowing to place annotation before PACKAGE _ DEF . * / 
 + @ Deprecated 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . packageinfo . test1 ; 
 + 
 + import java . lang . Deprecated ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test2 / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test2 / package - info . java 
 new file mode 100644 
 index 0000000 . . bb11990 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test2 / package - info . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + / * * OK : for test allowing to place javadoc before PACKAGE _ DEF . * / 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . packageinfo . test2 ; 
 + 
 + / / that import is for doing check of PACKAGE _ DEF , 
 + / / because EmptyLineSeparatorCheck doesn ' t check last token 
 + import java . lang . System ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test3 / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test3 / package - info . java 
 new file mode 100644 
 index 0000000 . . 9551c29 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test3 / package - info . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + / * violation : for test that there ' s warning when block comment isn ' t 
 + separated from PACKAGE _ DEF by line . * / 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . packageinfo . test3 ; 
 + 
 + / / that import is for doing check of PACKAGE _ DEF , 
 + / / because EmptyLineSeparatorCheck doesn ' t check last token 
 + import java . lang . System ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test4 / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test4 / package - info . java 
 new file mode 100644 
 index 0000000 . . 0f4d20f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / package - info / test4 / package - info . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + / / for test there ' s warning when single line comment isn ' t separated from PACKAGE _ DEF by line 
 + / / violation is expected after this line 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . packageinfo . test4 ; 
 + 
 + / / that import is for doing check of PACKAGE _ DEF , 
 + / / because EmptyLineSeparatorCheck doesn ' t check last token 
 + import java . lang . System ;

NEAREST DIFF:
diff - - git a / . travis . yml b / . travis . yml 
 index d3d6d05 . . d09aeb2 100644 
 - - - a / . travis . yml 
 + + + b / . travis . yml 
 @ @ - 9 , 7 + 9 , 7 @ @ matrix : 
 include : 
 # unit tests ( oraclejdk8 ) 
 - jdk : oraclejdk8 
 - env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify " COVERAGE _ CMD = " " DEPLOY = " true " 
 + env : DESC = " tests and deploy " CMD = " mvn clean integration - test failsafe : verify " COVERAGE _ CMD = " " DEPLOY = " true " 
 
 # checkstyle ( oraclejdk8 ) 
 - jdk : oraclejdk8 
 @ @ - 232 , 8 + 232 , 8 @ @ after _ success : 
 & & $ DEPLOY = = ' true ' 
 ] ] ; 
 then 
 - mvn - s config / deploy - settings . xml deploy 
 - - DskipTests - DskipITs - Dpmd . skip = true - Dfindbugs . skip = true 
 + mvn - s config / deploy - settings . xml deploy \ 
 + - DskipTests - DskipITs - Dpmd . skip = true - Dfindbugs . skip = true \ 
 - Dcobertura . skip = true - Dcheckstyle . ant . skip = true ; 
 fi 

