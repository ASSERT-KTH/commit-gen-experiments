BLEU SCORE: 0.08295193507109855

TEST MSG: Issue # 5558 : Switch to powermock - api - mockito2
GENERATED MSG: Issue # 46 : blocks of code should not be duplicated

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 5d2214b . . 6415c68 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 214 , 6 + 214 , 7 @ @ <nl> < maven . pmd . plugin . version > 3 . 9 . 0 < / maven . pmd . plugin . version > <nl> < pmd . version > 6 . 1 . 0 < / pmd . version > <nl> < maven . jacoco . plugin . version > 0 . 8 . 0 < / maven . jacoco . plugin . version > <nl> + < powermock . version > 1 . 7 . 3 < / powermock . version > <nl> < saxon . version > 9 . 8 . 0 - 8 < / saxon . version > <nl> < maven . checkstyle . plugin . version > 3 . 0 . 0 < / maven . checkstyle . plugin . version > <nl> < maven . sevntu . checkstyle . plugin . version > 1 . 28 . 0 < / maven . sevntu . checkstyle . plugin . version > <nl> @ @ - 295 , 14 + 296 , 14 @ @ <nl> < / dependency > <nl> < dependency > <nl> < groupId > org . powermock < / groupId > <nl> - < artifactId > powermock - api - mockito < / artifactId > <nl> - < version > 1 . 7 . 3 < / version > <nl> + < artifactId > powermock - api - mockito2 < / artifactId > <nl> + < version > $ { powermock . version } < / version > <nl> < scope > test < / scope > <nl> < / dependency > <nl> < dependency > <nl> < groupId > org . powermock < / groupId > <nl> < artifactId > powermock - module - junit4 < / artifactId > <nl> - < version > 1 . 7 . 3 < / version > <nl> + < version > $ { powermock . version } < / version > <nl> < scope > test < / scope > <nl> < / dependency > <nl> < dependency > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 3e79f24 . . 960f8c5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 62 , 8 + 62 , 8 @ @ import java . util . stream . Collectors ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . rules . TemporaryFolder ; <nl> - import org . mockito . internal . util . reflection . Whitebox ; <nl> import org . powermock . api . mockito . PowerMockito ; <nl> + import org . powermock . reflect . Whitebox ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> @ @ - 299 , 8 + 299 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> <nl> / / comparing to 1 as there is only one legal file in input <nl> final int numLegalFiles = 1 ; <nl> - final PropertyCacheFile cache = <nl> - ( PropertyCacheFile ) Whitebox . getInternalState ( checker , " cacheFile " ) ; <nl> + final PropertyCacheFile cache = Whitebox . getInternalState ( checker , " cacheFile " ) ; <nl> assertEquals ( " There were more legal files than expected " , <nl> numLegalFiles , counter ) ; <nl> assertEquals ( " Audit was started on larger amount of files than expected " , <nl> @ @ - 389 , 7 + 388 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> <nl> checker . setModuleClassLoader ( classLoader ) ; <nl> checker . finishLocalSetup ( ) ; <nl> - final Context actualCtx = ( Context ) Whitebox . getInternalState ( checker , " childContext " ) ; <nl> + final Context actualCtx = Whitebox . getInternalState ( checker , " childContext " ) ; <nl> <nl> assertNotNull ( " Default module factory should be created when it is not specified " , <nl> actualCtx . get ( " moduleFactory " ) ) ; <nl> @ @ - 409 , 7 + 408 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> checker . setLocaleCountry ( " IT " ) ; <nl> checker . finishLocalSetup ( ) ; <nl> <nl> - final Context context = ( Context ) Whitebox . getInternalState ( checker , " childContext " ) ; <nl> + final Context context = Whitebox . getInternalState ( checker , " childContext " ) ; <nl> assertEquals ( " Charset was different than expected " , <nl> System . getProperty ( " file . encoding " , StandardCharsets . UTF _ 8 . name ( ) ) , <nl> context . get ( " charset " ) ) ; <nl> @ @ - 445 , 7 + 444 , 6 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public void testSetupChildListener ( ) throws Exception { <nl> final Checker checker = new Checker ( ) ; <nl> final PackageObjectFactory factory = new PackageObjectFactory ( <nl> @ @ - 456 , 8 + 454 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> DebugAuditAdapter . class . getCanonicalName ( ) ) ; <nl> checker . setupChild ( config ) ; <nl> <nl> - final List < AuditListener > listeners = <nl> - ( List < AuditListener > ) Whitebox . getInternalState ( checker , " listeners " ) ; <nl> + final List < AuditListener > listeners = Whitebox . getInternalState ( checker , " listeners " ) ; <nl> assertTrue ( " Invalid child listener class " , <nl> listeners . get ( listeners . size ( ) - 1 ) instanceof DebugAuditAdapter ) ; <nl> } <nl> @ @ - 615 , 8 + 612 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> checker . process ( Collections . singletonList ( new File ( " dummy . java " ) ) ) ; <nl> checker . clearCache ( ) ; <nl> / / invoke destroy to persist cache <nl> - final PropertyCacheFile cache = <nl> - ( PropertyCacheFile ) Whitebox . getInternalState ( checker , " cacheFile " ) ; <nl> + final PropertyCacheFile cache = Whitebox . getInternalState ( checker , " cacheFile " ) ; <nl> cache . persist ( ) ; <nl> <nl> final Properties cacheAfterClear = new Properties ( ) ; <nl> @ @ - 630 , 8 + 626 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> public void setFileExtension ( ) { <nl> final Checker checker = new Checker ( ) ; <nl> checker . setFileExtensions ( " . test1 " , " test2 " ) ; <nl> - final String [ ] actual = <nl> - ( String [ ] ) Whitebox . getInternalState ( checker , " fileExtensions " ) ; <nl> + final String [ ] actual = Whitebox . getInternalState ( checker , " fileExtensions " ) ; <nl> assertArrayEquals ( " Extensions are not expected " , <nl> new String [ ] { " . test1 " , " . test2 " } , actual ) ; <nl> } <nl> @ @ - 1015 , 8 + 1010 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> checker . configure ( root ) ; <nl> / / BriefUtLogger does not print the module name or id postfix , <nl> / / so we need to set logger manually <nl> - final ByteArrayOutputStream out = <nl> - ( ByteArrayOutputStream ) Whitebox . getInternalState ( this , " stream " ) ; <nl> + final ByteArrayOutputStream out = Whitebox . getInternalState ( this , " stream " ) ; <nl> final DefaultLogger logger = <nl> new DefaultLogger ( out , true , out , false , new AuditEventDefaultFormatter ( ) ) ; <nl> checker . addListener ( logger ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> index 6feb978 . . 0c95ed4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> @ @ - 620 , 12 + 620 , 6 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { <nl> 0 , children [ 0 ] . getChildren ( ) . length ) ; <nl> } <nl> <nl> - / * * <nl> - * This SuppressWarning ( " unchecked " ) required to suppress <nl> - * " Unchecked generics array creation for varargs parameter " during mock . <nl> - * @ throws Exception could happen from PowerMokito calls and getAttribute <nl> - * / <nl> - @ SuppressWarnings ( " unchecked " ) <nl> @ Test <nl> public void testConfigWithIgnoreExceptionalAttributes ( ) throws Exception { <nl> / / emulate exception from unrelated code , but that is same try - catch <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 2a08a09 . . 2735377 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> - import static org . mockito . Matchers . any ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> import static org . mockito . Mockito . times ; <nl> import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> import static org . powermock . api . mockito . PowerMockito . mock ; <nl> @ @ - 416 , 7 + 416 , 7 @ @ public class MainTest { <nl> " - p " , getPath ( " InputMainMycheckstyle . properties " ) , <nl> getPath ( " InputMain . java " ) ) ; <nl> <nl> - verifyStatic ( times ( 1 ) ) ; <nl> + verifyStatic ( Closeables . class , times ( 1 ) ) ; <nl> Closeables . closeQuietly ( any ( InputStream . class ) ) ; <nl> } <nl> <nl> @ @ - 571 , 7 + 571 , 7 @ @ public class MainTest { <nl> ex . getCause ( ) instanceof IllegalStateException ) ; <nl> } <nl> finally { <nl> - verifyStatic ( times ( 1 ) ) ; <nl> + verifyStatic ( CommonUtils . class , times ( 1 ) ) ; <nl> final ArgumentCaptor < OutputStream > out = <nl> ArgumentCaptor . forClass ( OutputStream . class ) ; <nl> CommonUtils . close ( out . capture ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> index 3e1f34e . . 3e6b881 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertNotEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> - import static org . mockito . Matchers . any ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> import static org . mockito . Mockito . times ; <nl> import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> import static org . powermock . api . mockito . PowerMockito . mock ; <nl> @ @ - 131 , 7 + 131 , 7 @ @ public class PackageNamesLoaderTest extends AbstractPathTestSupport { <nl> new HashSet < > ( Arrays . asList ( expectedPackageNames ) ) ; <nl> assertEquals ( " Invalid names set . " , checkstylePackagesSet , actualPackageNames ) ; <nl> <nl> - verifyStatic ( times ( 1 ) ) ; <nl> + verifyStatic ( Closeables . class , times ( 1 ) ) ; <nl> Closeables . closeQuietly ( any ( InputStream . class ) ) ; <nl> } <nl> <nl> @ @ - 206 , 7 + 206 , 6 @ @ public class PackageNamesLoaderTest extends AbstractPathTestSupport { <nl> } <nl> <nl> @ Test <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public void testPackagesWithIoExceptionGetResources ( ) throws Exception { <nl> final ClassLoader classLoader = mock ( ClassLoader . class ) ; <nl> when ( classLoader . getResources ( " checkstyle _ packages . xml " ) ) . thenThrow ( IOException . class ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> index 9325924 . . 86739c5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> - import static org . mockito . Matchers . any ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> import static org . mockito . Mockito . times ; <nl> import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> @ @ - 57 , 7 + 57 , 7 @ @ import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . rules . TemporaryFolder ; <nl> import org . junit . runner . RunWith ; <nl> - import org . mockito . Matchers ; <nl> + import org . mockito . ArgumentMatchers ; <nl> import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> @ @ - 132 , 20 + 132 , 20 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { <nl> public void testCloseAndFlushOutputStreamAfterCreatingHashCode ( ) throws IOException { <nl> mockStatic ( Closeables . class ) ; <nl> doNothing ( ) . when ( Closeables . class ) ; <nl> - Closeables . close ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> + Closeables . close ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> mockStatic ( Flushables . class ) ; <nl> doNothing ( ) . when ( Flushables . class ) ; <nl> - Flushables . flush ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> + Flushables . flush ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> <nl> final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> final PropertyCacheFile cache = new PropertyCacheFile ( config , " fileDoesNotExist . txt " ) ; <nl> cache . load ( ) ; <nl> <nl> - verifyStatic ( times ( 1 ) ) ; <nl> + verifyStatic ( Closeables . class , times ( 1 ) ) ; <nl> + Closeables . close ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> <nl> - Closeables . close ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> - verifyStatic ( times ( 1 ) ) ; <nl> - Flushables . flush ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> + verifyStatic ( Flushables . class , times ( 1 ) ) ; <nl> + Flushables . flush ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 170 , 7 + 170 , 7 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { <nl> assertNotNull ( " Config hash key should not be null " , <nl> cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; <nl> <nl> - verifyStatic ( times ( 2 ) ) ; <nl> + verifyStatic ( Closeables . class , times ( 2 ) ) ; <nl> Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; <nl> } <nl> <nl> @ @ - 248 , 7 + 248 , 6 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { <nl> * " Unchecked generics array creation for varargs parameter " during mock . <nl> * @ throws IOException when smth wrong with file creation or cache . load <nl> * / <nl> - @ SuppressWarnings ( " unchecked " ) <nl> @ Test <nl> public void testNonExistentResource ( ) throws IOException { <nl> final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> @ @ - 284 , 10 + 283 , 10 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { <nl> public void testFlushAndCloseCacheFileOutputStream ( ) throws IOException { <nl> mockStatic ( Closeables . class ) ; <nl> doNothing ( ) . when ( Closeables . class ) ; <nl> - Closeables . close ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> + Closeables . close ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> mockStatic ( Flushables . class ) ; <nl> doNothing ( ) . when ( Flushables . class ) ; <nl> - Flushables . flush ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> + Flushables . flush ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> <nl> final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> final PropertyCacheFile cache = new PropertyCacheFile ( config , <nl> @ @ - 296 , 10 + 295 , 10 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { <nl> cache . put ( " CheckedFileName . java " , System . currentTimeMillis ( ) ) ; <nl> cache . persist ( ) ; <nl> <nl> - verifyStatic ( times ( 1 ) ) ; <nl> - Closeables . close ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> - verifyStatic ( times ( 1 ) ) ; <nl> - Flushables . flush ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; <nl> + verifyStatic ( Closeables . class , times ( 1 ) ) ; <nl> + Closeables . close ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> + verifyStatic ( Flushables . class , times ( 1 ) ) ; <nl> + Flushables . flush ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 328 , 7 + 327 , 6 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { <nl> } <nl> <nl> @ Test <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public void testExceptionNoSuchAlgorithmException ( ) throws Exception { <nl> final Configuration config = new DefaultConfiguration ( " myName " ) ; <nl> final String filePath = temporaryFolder . newFile ( ) . getPath ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> index 0fb4d73 . . 09fd3ae 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> - import static org . mockito . Matchers . any ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> import static org . mockito . Mockito . times ; <nl> import static org . mockito . Mockito . when ; <nl> import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> @ @ - 53 , 10 + 53 , 10 @ @ import org . apache . tools . ant . types . Reference ; <nl> import org . apache . tools . ant . types . resources . FileResource ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> - import org . mockito . internal . util . reflection . Whitebox ; <nl> import org . powermock . api . mockito . PowerMockito ; <nl> import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> + import org . powermock . reflect . Whitebox ; <nl> <nl> import com . google . common . io . Closeables ; <nl> import com . puppycrawl . tools . checkstyle . AbstractPathTestSupport ; <nl> @ @ - 486 , 7 + 486 , 7 @ @ public class CheckstyleAntTaskTest extends AbstractPathTestSupport { <nl> <nl> assertEquals ( " Property is not set " , <nl> " ignore " , TestRootModuleChecker . getProperty ( ) ) ; <nl> - verifyStatic ( times ( 1 ) ) ; <nl> + verifyStatic ( Closeables . class , times ( 1 ) ) ; <nl> Closeables . closeQuietly ( any ( InputStream . class ) ) ; <nl> } <nl> <nl> @ @ - 652 , 7 + 652 , 7 @ @ public class CheckstyleAntTaskTest extends AbstractPathTestSupport { <nl> <nl> assertNotNull ( " Classpath should not be null " , <nl> Whitebox . getInternalState ( antTask , " classpath " ) ) ; <nl> - final Path classpath = ( Path ) Whitebox . getInternalState ( antTask , " classpath " ) ; <nl> + final Path classpath = Whitebox . getInternalState ( antTask , " classpath " ) ; <nl> assertTrue ( " Classpath contain provided path " , classpath . toString ( ) . contains ( path1 ) ) ; <nl> assertTrue ( " Classpath contain provided path " , classpath . toString ( ) . contains ( path2 ) ) ; <nl> } <nl> @ @ - 677 , 7 + 677 , 7 @ @ public class CheckstyleAntTaskTest extends AbstractPathTestSupport { <nl> try { <nl> assertNotNull ( " Classpath should not be null " , <nl> Whitebox . getInternalState ( antTask , " classpath " ) ) ; <nl> - final Path classpath = ( Path ) Whitebox . getInternalState ( antTask , " classpath " ) ; <nl> + final Path classpath = Whitebox . getInternalState ( antTask , " classpath " ) ; <nl> classpath . list ( ) ; <nl> fail ( " Exception is expected " ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> index fa963a6 . . db39664 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> - import static org . mockito . Matchers . any ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> import static org . mockito . Mockito . times ; <nl> import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> @ @ - 76 , 7 + 76 , 7 @ @ public class FileTextTest extends AbstractPathTestSupport { <nl> charsetName ) ; <nl> assertEquals ( " Invalid charset name " , charsetName , fileText . getCharset ( ) . name ( ) ) ; <nl> <nl> - verifyStatic ( times ( 2 ) ) ; <nl> + verifyStatic ( CommonUtils . class , times ( 2 ) ) ; <nl> CommonUtils . close ( any ( Reader . class ) ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java <nl> index f438d61 . . e64fcbb 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java <nl> @ @ - 24 , 8 + 24 , 8 @ @ import static com . puppycrawl . tools . checkstyle . utils . CommonUtils . EMPTY _ OBJECT _ ARR <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> - import static org . mockito . Matchers . anyInt ; <nl> - import static org . mockito . Matchers . anyObject ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> + import static org . mockito . ArgumentMatchers . anyInt ; <nl> import static org . mockito . Mockito . times ; <nl> import static org . mockito . Mockito . verify ; <nl> import static org . powermock . api . mockito . PowerMockito . mock ; <nl> @ @ - 98 , 7 + 98 , 7 @ @ public class LocalizedMessageTest { <nl> final InputStream inputStreamMock = mock ( InputStream . class ) ; <nl> when ( classloader . getResource ( resource ) ) . thenReturn ( url ) ; <nl> when ( mockUrlCon . getInputStream ( ) ) . thenReturn ( inputStreamMock ) ; <nl> - when ( inputStreamMock . read ( anyObject ( ) , anyInt ( ) , anyInt ( ) ) ) . thenReturn ( - 1 ) ; <nl> + when ( inputStreamMock . read ( any ( ) , anyInt ( ) , anyInt ( ) ) ) . thenReturn ( - 1 ) ; <nl> <nl> final LocalizedMessage . Utf8Control control = new LocalizedMessage . Utf8Control ( ) ; <nl> control . newBundle ( " com . puppycrawl . tools . checkstyle . checks . coding . messages " , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> index d547b9e . . a4e5571 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> @ @ - 25 , 8 + 25 , 8 @ @ import static java . util . Locale . ENGLISH ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> - import static org . mockito . Matchers . any ; <nl> - import static org . mockito . Matchers . anyBoolean ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> + import static org . mockito . ArgumentMatchers . anyBoolean ; <nl> import static org . mockito . Mockito . times ; <nl> import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> import static org . powermock . api . mockito . PowerMockito . mock ; <nl> @ @ - 100 , 7 + 100 , 7 @ @ public class NewlineAtEndOfFileCheckTest <nl> getPath ( " InputNewlineAtEndOfFileLf . java " ) , <nl> expected ) ; <nl> <nl> - verifyStatic ( times ( 1 ) ) ; <nl> + verifyStatic ( Closeables . class , times ( 1 ) ) ; <nl> Closeables . close ( any ( RandomAccessFile . class ) , anyBoolean ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> index c1e28b9 . . 8443d40 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> - import static org . mockito . Matchers . any ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> import static org . mockito . Mockito . mock ; <nl> import static org . mockito . Mockito . times ; <nl> import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> @ @ - 36 , 7 + 36 , 6 @ @ import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> <nl> import java . io . ByteArrayOutputStream ; <nl> import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . lang . reflect . Field ; <nl> @ @ - 409 , 8 + 408 , 8 @ @ public class TranslationCheckTest extends AbstractXmlTestSupport { <nl> propertyFiles , <nl> getPath ( " " ) , <nl> expected ) ; <nl> - verifyStatic ( times ( 2 ) ) ; <nl> - Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; <nl> + verifyStatic ( Closeables . class , times ( 2 ) ) ; <nl> + Closeables . closeQuietly ( any ( InputStream . class ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> index f98f211 . . 938185e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks ; <nl> import static com . puppycrawl . tools . checkstyle . checks . UniquePropertiesCheck . MSG _ IO _ EXCEPTION _ KEY ; <nl> import static com . puppycrawl . tools . checkstyle . checks . UniquePropertiesCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertEquals ; <nl> - import static org . mockito . Matchers . any ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> import static org . mockito . Mockito . times ; <nl> import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> @ @ - 106 , 7 + 106 , 7 @ @ public class UniquePropertiesCheckTest extends AbstractModuleTestSupport { <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , getPath ( " InputUniquePropertiesWithoutErrors . properties " ) , expected ) ; <nl> <nl> - verifyStatic ( times ( 1 ) ) ; <nl> + verifyStatic ( Closeables . class , times ( 1 ) ) ; <nl> Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> index 6d540c1 . . ebe4471 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck . MSG _ MISS <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> - import static org . mockito . Matchers . anyObject ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> @ @ - 199 , 7 + 199 , 7 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { <nl> public void testIoExceptionWhenLoadingHeader ( ) throws Exception { <nl> final HeaderCheck check = PowerMockito . spy ( new HeaderCheck ( ) ) ; <nl> PowerMockito . doThrow ( new IOException ( " expected exception " ) ) . when ( check , " loadHeader " , <nl> - anyObject ( ) ) ; <nl> + any ( ) ) ; <nl> <nl> try { <nl> check . setHeader ( " header " ) ; <nl> @ @ - 215 , 7 + 215 , 7 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { <nl> public void testIoExceptionWhenLoadingHeaderFile ( ) throws Exception { <nl> final HeaderCheck check = PowerMockito . spy ( new HeaderCheck ( ) ) ; <nl> PowerMockito . doThrow ( new IOException ( " expected exception " ) ) . when ( check , " loadHeader " , <nl> - anyObject ( ) ) ; <nl> + any ( ) ) ; <nl> <nl> check . setHeaderFile ( CommonUtils . getUriByFilename ( getPath ( " InputHeaderRegexp . java " ) ) ) ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java <nl> index e16fe75 . . 6f544b0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java <nl> @ @ - 24 , 13 + 24 , 12 @ @ import static com . puppycrawl . tools . checkstyle . checks . header . RegexpHeaderCheck . MS <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> - import static org . mockito . Matchers . any ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> import static org . mockito . Mockito . times ; <nl> import static org . powermock . api . mockito . PowerMockito . doNothing ; <nl> import static org . powermock . api . mockito . PowerMockito . mockStatic ; <nl> import static org . powermock . api . mockito . PowerMockito . verifyStatic ; <nl> <nl> - import java . io . InputStreamReader ; <nl> import java . io . Reader ; <nl> import java . util . List ; <nl> import java . util . Locale ; <nl> @ @ - 38 , 9 + 37 , 9 @ @ import java . util . regex . Pattern ; <nl> <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> - import org . mockito . internal . util . reflection . Whitebox ; <nl> import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> + import org . powermock . reflect . Whitebox ; <nl> <nl> import com . google . common . io . Closeables ; <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> @ @ - 65 , 15 + 64 , 13 @ @ public class RegexpHeaderCheckTest extends AbstractModuleTestSupport { <nl> * Test of setHeader method , of class RegexpHeaderCheck . <nl> * / <nl> @ Test <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public void testSetHeaderNull ( ) { <nl> / / check null passes <nl> final RegexpHeaderCheck instance = new RegexpHeaderCheck ( ) ; <nl> / / recreate for each test because multiple invocations fail <nl> final String header = null ; <nl> instance . setHeader ( header ) ; <nl> - final List < Pattern > headerRegexps = <nl> - ( List < Pattern > ) Whitebox . getInternalState ( instance , " headerRegexps " ) ; <nl> + final List < Pattern > headerRegexps = Whitebox . getInternalState ( instance , " headerRegexps " ) ; <nl> <nl> assertTrue ( " When header is null regexps should not be set " , headerRegexps . isEmpty ( ) ) ; <nl> } <nl> @ @ - 82 , 15 + 79 , 13 @ @ public class RegexpHeaderCheckTest extends AbstractModuleTestSupport { <nl> * Test of setHeader method , of class RegexpHeaderCheck . <nl> * / <nl> @ Test <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public void testSetHeaderEmpty ( ) { <nl> / / check null passes <nl> final RegexpHeaderCheck instance = new RegexpHeaderCheck ( ) ; <nl> / / check empty string passes <nl> final String header = " " ; <nl> instance . setHeader ( header ) ; <nl> - final List < Pattern > headerRegexps = <nl> - ( List < Pattern > ) Whitebox . getInternalState ( instance , " headerRegexps " ) ; <nl> + final List < Pattern > headerRegexps = Whitebox . getInternalState ( instance , " headerRegexps " ) ; <nl> <nl> assertTrue ( " When header is empty regexps should not be set " , headerRegexps . isEmpty ( ) ) ; <nl> } <nl> @ @ - 110 , 7 + 105 , 7 @ @ public class RegexpHeaderCheckTest extends AbstractModuleTestSupport { <nl> final String header = " abc . * " ; <nl> instance . setHeader ( header ) ; <nl> <nl> - verifyStatic ( times ( 2 ) ) ; <nl> + verifyStatic ( Closeables . class , times ( 2 ) ) ; <nl> Closeables . closeQuietly ( any ( Reader . class ) ) ; <nl> } <nl> <nl> @ @ - 383 , 15 + 378 , 15 @ @ public class RegexpHeaderCheckTest extends AbstractModuleTestSupport { <nl> public void testReaderClosedAfterHeaderRead ( ) throws Exception { <nl> mockStatic ( Closeables . class ) ; <nl> doNothing ( ) . when ( Closeables . class ) ; <nl> - Closeables . closeQuietly ( any ( InputStreamReader . class ) ) ; <nl> + Closeables . closeQuietly ( any ( Reader . class ) ) ; <nl> <nl> final DefaultConfiguration checkConfig = createModuleConfig ( RegexpHeaderCheck . class ) ; <nl> checkConfig . addAttribute ( " headerFile " , getPath ( " InputRegexpHeader . header " ) ) ; <nl> createChecker ( checkConfig ) ; <nl> <nl> / / check if reader finally closed <nl> - verifyStatic ( times ( 2 ) ) ; <nl> - Closeables . closeQuietly ( any ( InputStreamReader . class ) ) ; <nl> + verifyStatic ( Closeables . class , times ( 2 ) ) ; <nl> + Closeables . closeQuietly ( any ( Reader . class ) ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> index 56fd9e2 . . f4a2d00 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> @ @ - 28 , 10 + 28 , 10 @ @ import static org . junit . Assert . fail ; <nl> <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> - import org . mockito . internal . util . reflection . Whitebox ; <nl> import org . powermock . api . mockito . PowerMockito ; <nl> import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> + import org . powermock . reflect . Whitebox ; <nl> <nl> import antlr . CommonHiddenStreamToken ; <nl> import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / ClassResolverTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / ClassResolverTest . java <nl> index 3081cb2 . . 7f574db 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / ClassResolverTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / ClassResolverTest . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> - import static org . mockito . Matchers . anyObject ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> <nl> import java . util . HashSet ; <nl> import java . util . Set ; <nl> @ @ - 139 , 8 + 139 , 8 @ @ public class ClassResolverTest { <nl> . currentThread ( ) . getContextClassLoader ( ) , " " , imports ) ) ; <nl> <nl> PowerMockito . doThrow ( new ClassNotFoundException ( " expected exception " ) ) <nl> - . when ( classResolver , " safeLoad " , anyObject ( ) ) ; <nl> - PowerMockito . doReturn ( true ) . when ( classResolver , " isLoadable " , anyObject ( ) ) ; <nl> + . when ( classResolver , " safeLoad " , any ( ) ) ; <nl> + PowerMockito . doReturn ( true ) . when ( classResolver , " isLoadable " , any ( ) ) ; <nl> <nl> try { <nl> classResolver . resolve ( " someClass " , " " ) ; <nl> @ @ - 172 , 7 + 172 , 7 @ @ public class ClassResolverTest { <nl> . currentThread ( ) . getContextClassLoader ( ) , " " , imports ) ) ; <nl> <nl> PowerMockito . doThrow ( new NoClassDefFoundError ( " expected exception " ) ) <nl> - . when ( classResolver , " safeLoad " , anyObject ( ) ) ; <nl> + . when ( classResolver , " safeLoad " , any ( ) ) ; <nl> <nl> final boolean result = classResolver . isLoadable ( " someClass " ) ; <nl> assertFalse ( " result should be false " , result ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> index 6da4071 . . b5fb52c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> @ @ - 430 , 7 + 430 , 6 @ @ public class CommonUtilsTest { <nl> <nl> @ Test <nl> @ PrepareForTest ( { CommonUtils . class , CommonUtilsTest . class } ) <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public void testLoadSuppressionsUriSyntaxException ( ) throws Exception { <nl> final URL configUrl = mock ( URL . class ) ; <nl>
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> index c080b8c . . 6564d8f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> @ @ - 155 , 7 + 155 , 7 @ @ public final class MutableExceptionCheck extends AbstractFormatCheck { <nl> final DetailAST extendsClause = ast . findFirstToken ( TokenTypes . EXTENDS _ CLAUSE ) ; <nl> if ( extendsClause ! = null ) { <nl> DetailAST currentNode = extendsClause ; <nl> - while ( currentNode . getType ( ) ! = TokenTypes . IDENT ) { <nl> + while ( currentNode . getLastChild ( ) ! = null ) { <nl> currentNode = currentNode . getLastChild ( ) ; <nl> } <nl> final String extendedClassName = currentNode . getText ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> index af627a3 . . 3f44f53 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java <nl> @ @ - 35 , 6 + 35 , 18 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class MutableExceptionCheckTest extends BaseCheckTestSupport { <nl> + <nl> + @ Test <nl> + public void testClassExtendsGenericClass ( ) throws Exception { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( MutableExceptionCheck . class ) ; <nl> + <nl> + String [ ] expected = { <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " design " + File . separator <nl> + + " InputMutableExceptionClassExtendsGenericClass . java " ) , expected ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testDefault ( ) throws Exception { <nl> DefaultConfiguration checkConfig = createCheckConfig ( MutableExceptionCheck . class ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java <nl> new file mode 100644 <nl> index 0000000 . . 931128e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . design ; <nl> + <nl> + import java . util . concurrent . atomic . AtomicReference ; <nl> + <nl> + / * * <nl> + * Convenience class for holding an { @ link Exception } in a thread - safe way <nl> + * / <nl> + public class InputMutableExceptionClassExtendsGenericClass extends AtomicReference < Exception > { / / NPE is not expected <nl> + <nl> + private static final long serialVersionUID = 1L ; <nl> + <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 5d2214b . . 6415c68 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 214 , 6 + 214 , 7 @ @ 
 < maven . pmd . plugin . version > 3 . 9 . 0 < / maven . pmd . plugin . version > 
 < pmd . version > 6 . 1 . 0 < / pmd . version > 
 < maven . jacoco . plugin . version > 0 . 8 . 0 < / maven . jacoco . plugin . version > 
 + < powermock . version > 1 . 7 . 3 < / powermock . version > 
 < saxon . version > 9 . 8 . 0 - 8 < / saxon . version > 
 < maven . checkstyle . plugin . version > 3 . 0 . 0 < / maven . checkstyle . plugin . version > 
 < maven . sevntu . checkstyle . plugin . version > 1 . 28 . 0 < / maven . sevntu . checkstyle . plugin . version > 
 @ @ - 295 , 14 + 296 , 14 @ @ 
 < / dependency > 
 < dependency > 
 < groupId > org . powermock < / groupId > 
 - < artifactId > powermock - api - mockito < / artifactId > 
 - < version > 1 . 7 . 3 < / version > 
 + < artifactId > powermock - api - mockito2 < / artifactId > 
 + < version > $ { powermock . version } < / version > 
 < scope > test < / scope > 
 < / dependency > 
 < dependency > 
 < groupId > org . powermock < / groupId > 
 < artifactId > powermock - module - junit4 < / artifactId > 
 - < version > 1 . 7 . 3 < / version > 
 + < version > $ { powermock . version } < / version > 
 < scope > test < / scope > 
 < / dependency > 
 < dependency > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 3e79f24 . . 960f8c5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 62 , 8 + 62 , 8 @ @ import java . util . stream . Collectors ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . rules . TemporaryFolder ; 
 - import org . mockito . internal . util . reflection . Whitebox ; 
 import org . powermock . api . mockito . PowerMockito ; 
 + import org . powermock . reflect . Whitebox ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 @ @ - 299 , 8 + 299 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 
 / / comparing to 1 as there is only one legal file in input 
 final int numLegalFiles = 1 ; 
 - final PropertyCacheFile cache = 
 - ( PropertyCacheFile ) Whitebox . getInternalState ( checker , " cacheFile " ) ; 
 + final PropertyCacheFile cache = Whitebox . getInternalState ( checker , " cacheFile " ) ; 
 assertEquals ( " There were more legal files than expected " , 
 numLegalFiles , counter ) ; 
 assertEquals ( " Audit was started on larger amount of files than expected " , 
 @ @ - 389 , 7 + 388 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 
 checker . setModuleClassLoader ( classLoader ) ; 
 checker . finishLocalSetup ( ) ; 
 - final Context actualCtx = ( Context ) Whitebox . getInternalState ( checker , " childContext " ) ; 
 + final Context actualCtx = Whitebox . getInternalState ( checker , " childContext " ) ; 
 
 assertNotNull ( " Default module factory should be created when it is not specified " , 
 actualCtx . get ( " moduleFactory " ) ) ; 
 @ @ - 409 , 7 + 408 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 checker . setLocaleCountry ( " IT " ) ; 
 checker . finishLocalSetup ( ) ; 
 
 - final Context context = ( Context ) Whitebox . getInternalState ( checker , " childContext " ) ; 
 + final Context context = Whitebox . getInternalState ( checker , " childContext " ) ; 
 assertEquals ( " Charset was different than expected " , 
 System . getProperty ( " file . encoding " , StandardCharsets . UTF _ 8 . name ( ) ) , 
 context . get ( " charset " ) ) ; 
 @ @ - 445 , 7 + 444 , 6 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 - @ SuppressWarnings ( " unchecked " ) 
 public void testSetupChildListener ( ) throws Exception { 
 final Checker checker = new Checker ( ) ; 
 final PackageObjectFactory factory = new PackageObjectFactory ( 
 @ @ - 456 , 8 + 454 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 DebugAuditAdapter . class . getCanonicalName ( ) ) ; 
 checker . setupChild ( config ) ; 
 
 - final List < AuditListener > listeners = 
 - ( List < AuditListener > ) Whitebox . getInternalState ( checker , " listeners " ) ; 
 + final List < AuditListener > listeners = Whitebox . getInternalState ( checker , " listeners " ) ; 
 assertTrue ( " Invalid child listener class " , 
 listeners . get ( listeners . size ( ) - 1 ) instanceof DebugAuditAdapter ) ; 
 } 
 @ @ - 615 , 8 + 612 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 checker . process ( Collections . singletonList ( new File ( " dummy . java " ) ) ) ; 
 checker . clearCache ( ) ; 
 / / invoke destroy to persist cache 
 - final PropertyCacheFile cache = 
 - ( PropertyCacheFile ) Whitebox . getInternalState ( checker , " cacheFile " ) ; 
 + final PropertyCacheFile cache = Whitebox . getInternalState ( checker , " cacheFile " ) ; 
 cache . persist ( ) ; 
 
 final Properties cacheAfterClear = new Properties ( ) ; 
 @ @ - 630 , 8 + 626 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 public void setFileExtension ( ) { 
 final Checker checker = new Checker ( ) ; 
 checker . setFileExtensions ( " . test1 " , " test2 " ) ; 
 - final String [ ] actual = 
 - ( String [ ] ) Whitebox . getInternalState ( checker , " fileExtensions " ) ; 
 + final String [ ] actual = Whitebox . getInternalState ( checker , " fileExtensions " ) ; 
 assertArrayEquals ( " Extensions are not expected " , 
 new String [ ] { " . test1 " , " . test2 " } , actual ) ; 
 } 
 @ @ - 1015 , 8 + 1010 , 7 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 checker . configure ( root ) ; 
 / / BriefUtLogger does not print the module name or id postfix , 
 / / so we need to set logger manually 
 - final ByteArrayOutputStream out = 
 - ( ByteArrayOutputStream ) Whitebox . getInternalState ( this , " stream " ) ; 
 + final ByteArrayOutputStream out = Whitebox . getInternalState ( this , " stream " ) ; 
 final DefaultLogger logger = 
 new DefaultLogger ( out , true , out , false , new AuditEventDefaultFormatter ( ) ) ; 
 checker . addListener ( logger ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 index 6feb978 . . 0c95ed4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 @ @ - 620 , 12 + 620 , 6 @ @ public class ConfigurationLoaderTest extends AbstractPathTestSupport { 
 0 , children [ 0 ] . getChildren ( ) . length ) ; 
 } 
 
 - / * * 
 - * This SuppressWarning ( " unchecked " ) required to suppress 
 - * " Unchecked generics array creation for varargs parameter " during mock . 
 - * @ throws Exception could happen from PowerMokito calls and getAttribute 
 - * / 
 - @ SuppressWarnings ( " unchecked " ) 
 @ Test 
 public void testConfigWithIgnoreExceptionalAttributes ( ) throws Exception { 
 / / emulate exception from unrelated code , but that is same try - catch 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 2a08a09 . . 2735377 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 25 , 7 + 25 , 7 @ @ import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotEquals ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 - import static org . mockito . Matchers . any ; 
 + import static org . mockito . ArgumentMatchers . any ; 
 import static org . mockito . Mockito . times ; 
 import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 import static org . powermock . api . mockito . PowerMockito . mock ; 
 @ @ - 416 , 7 + 416 , 7 @ @ public class MainTest { 
 " - p " , getPath ( " InputMainMycheckstyle . properties " ) , 
 getPath ( " InputMain . java " ) ) ; 
 
 - verifyStatic ( times ( 1 ) ) ; 
 + verifyStatic ( Closeables . class , times ( 1 ) ) ; 
 Closeables . closeQuietly ( any ( InputStream . class ) ) ; 
 } 
 
 @ @ - 571 , 7 + 571 , 7 @ @ public class MainTest { 
 ex . getCause ( ) instanceof IllegalStateException ) ; 
 } 
 finally { 
 - verifyStatic ( times ( 1 ) ) ; 
 + verifyStatic ( CommonUtils . class , times ( 1 ) ) ; 
 final ArgumentCaptor < OutputStream > out = 
 ArgumentCaptor . forClass ( OutputStream . class ) ; 
 CommonUtils . close ( out . capture ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 index 3e1f34e . . 3e6b881 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PackageNamesLoaderTest . java 
 @ @ - 24 , 7 + 24 , 7 @ @ import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertNotEquals ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 - import static org . mockito . Matchers . any ; 
 + import static org . mockito . ArgumentMatchers . any ; 
 import static org . mockito . Mockito . times ; 
 import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 import static org . powermock . api . mockito . PowerMockito . mock ; 
 @ @ - 131 , 7 + 131 , 7 @ @ public class PackageNamesLoaderTest extends AbstractPathTestSupport { 
 new HashSet < > ( Arrays . asList ( expectedPackageNames ) ) ; 
 assertEquals ( " Invalid names set . " , checkstylePackagesSet , actualPackageNames ) ; 
 
 - verifyStatic ( times ( 1 ) ) ; 
 + verifyStatic ( Closeables . class , times ( 1 ) ) ; 
 Closeables . closeQuietly ( any ( InputStream . class ) ) ; 
 } 
 
 @ @ - 206 , 7 + 206 , 6 @ @ public class PackageNamesLoaderTest extends AbstractPathTestSupport { 
 } 
 
 @ Test 
 - @ SuppressWarnings ( " unchecked " ) 
 public void testPackagesWithIoExceptionGetResources ( ) throws Exception { 
 final ClassLoader classLoader = mock ( ClassLoader . class ) ; 
 when ( classLoader . getResources ( " checkstyle _ packages . xml " ) ) . thenThrow ( IOException . class ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 index 9325924 . . 86739c5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / PropertyCacheFileTest . java 
 @ @ - 26 , 7 + 26 , 7 @ @ import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 - import static org . mockito . Matchers . any ; 
 + import static org . mockito . ArgumentMatchers . any ; 
 import static org . mockito . Mockito . times ; 
 import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 @ @ - 57 , 7 + 57 , 7 @ @ import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . rules . TemporaryFolder ; 
 import org . junit . runner . RunWith ; 
 - import org . mockito . Matchers ; 
 + import org . mockito . ArgumentMatchers ; 
 import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 @ @ - 132 , 20 + 132 , 20 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { 
 public void testCloseAndFlushOutputStreamAfterCreatingHashCode ( ) throws IOException { 
 mockStatic ( Closeables . class ) ; 
 doNothing ( ) . when ( Closeables . class ) ; 
 - Closeables . close ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; 
 + Closeables . close ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 mockStatic ( Flushables . class ) ; 
 doNothing ( ) . when ( Flushables . class ) ; 
 - Flushables . flush ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; 
 + Flushables . flush ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 
 final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 final PropertyCacheFile cache = new PropertyCacheFile ( config , " fileDoesNotExist . txt " ) ; 
 cache . load ( ) ; 
 
 - verifyStatic ( times ( 1 ) ) ; 
 + verifyStatic ( Closeables . class , times ( 1 ) ) ; 
 + Closeables . close ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 
 - Closeables . close ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; 
 - verifyStatic ( times ( 1 ) ) ; 
 - Flushables . flush ( any ( ObjectOutputStream . class ) , Matchers . eq ( false ) ) ; 
 + verifyStatic ( Flushables . class , times ( 1 ) ) ; 
 + Flushables . flush ( any ( ObjectOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 } 
 
 @ Test 
 @ @ - 170 , 7 + 170 , 7 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { 
 assertNotNull ( " Config hash key should not be null " , 
 cache . get ( PropertyCacheFile . CONFIG _ HASH _ KEY ) ) ; 
 
 - verifyStatic ( times ( 2 ) ) ; 
 + verifyStatic ( Closeables . class , times ( 2 ) ) ; 
 Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; 
 } 
 
 @ @ - 248 , 7 + 248 , 6 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { 
 * " Unchecked generics array creation for varargs parameter " during mock . 
 * @ throws IOException when smth wrong with file creation or cache . load 
 * / 
 - @ SuppressWarnings ( " unchecked " ) 
 @ Test 
 public void testNonExistentResource ( ) throws IOException { 
 final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 @ @ - 284 , 10 + 283 , 10 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { 
 public void testFlushAndCloseCacheFileOutputStream ( ) throws IOException { 
 mockStatic ( Closeables . class ) ; 
 doNothing ( ) . when ( Closeables . class ) ; 
 - Closeables . close ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; 
 + Closeables . close ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 mockStatic ( Flushables . class ) ; 
 doNothing ( ) . when ( Flushables . class ) ; 
 - Flushables . flush ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; 
 + Flushables . flush ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 
 final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 final PropertyCacheFile cache = new PropertyCacheFile ( config , 
 @ @ - 296 , 10 + 295 , 10 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { 
 cache . put ( " CheckedFileName . java " , System . currentTimeMillis ( ) ) ; 
 cache . persist ( ) ; 
 
 - verifyStatic ( times ( 1 ) ) ; 
 - Closeables . close ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; 
 - verifyStatic ( times ( 1 ) ) ; 
 - Flushables . flush ( any ( FileOutputStream . class ) , Matchers . eq ( false ) ) ; 
 + verifyStatic ( Closeables . class , times ( 1 ) ) ; 
 + Closeables . close ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 + verifyStatic ( Flushables . class , times ( 1 ) ) ; 
 + Flushables . flush ( any ( FileOutputStream . class ) , ArgumentMatchers . eq ( false ) ) ; 
 } 
 
 @ Test 
 @ @ - 328 , 7 + 327 , 6 @ @ public class PropertyCacheFileTest extends AbstractPathTestSupport { 
 } 
 
 @ Test 
 - @ SuppressWarnings ( " unchecked " ) 
 public void testExceptionNoSuchAlgorithmException ( ) throws Exception { 
 final Configuration config = new DefaultConfiguration ( " myName " ) ; 
 final String filePath = temporaryFolder . newFile ( ) . getPath ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 index 0fb4d73 . . 09fd3ae 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 @ @ - 25 , 7 + 25 , 7 @ @ import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 - import static org . mockito . Matchers . any ; 
 + import static org . mockito . ArgumentMatchers . any ; 
 import static org . mockito . Mockito . times ; 
 import static org . mockito . Mockito . when ; 
 import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 @ @ - 53 , 10 + 53 , 10 @ @ import org . apache . tools . ant . types . Reference ; 
 import org . apache . tools . ant . types . resources . FileResource ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 - import org . mockito . internal . util . reflection . Whitebox ; 
 import org . powermock . api . mockito . PowerMockito ; 
 import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 + import org . powermock . reflect . Whitebox ; 
 
 import com . google . common . io . Closeables ; 
 import com . puppycrawl . tools . checkstyle . AbstractPathTestSupport ; 
 @ @ - 486 , 7 + 486 , 7 @ @ public class CheckstyleAntTaskTest extends AbstractPathTestSupport { 
 
 assertEquals ( " Property is not set " , 
 " ignore " , TestRootModuleChecker . getProperty ( ) ) ; 
 - verifyStatic ( times ( 1 ) ) ; 
 + verifyStatic ( Closeables . class , times ( 1 ) ) ; 
 Closeables . closeQuietly ( any ( InputStream . class ) ) ; 
 } 
 
 @ @ - 652 , 7 + 652 , 7 @ @ public class CheckstyleAntTaskTest extends AbstractPathTestSupport { 
 
 assertNotNull ( " Classpath should not be null " , 
 Whitebox . getInternalState ( antTask , " classpath " ) ) ; 
 - final Path classpath = ( Path ) Whitebox . getInternalState ( antTask , " classpath " ) ; 
 + final Path classpath = Whitebox . getInternalState ( antTask , " classpath " ) ; 
 assertTrue ( " Classpath contain provided path " , classpath . toString ( ) . contains ( path1 ) ) ; 
 assertTrue ( " Classpath contain provided path " , classpath . toString ( ) . contains ( path2 ) ) ; 
 } 
 @ @ - 677 , 7 + 677 , 7 @ @ public class CheckstyleAntTaskTest extends AbstractPathTestSupport { 
 try { 
 assertNotNull ( " Classpath should not be null " , 
 Whitebox . getInternalState ( antTask , " classpath " ) ) ; 
 - final Path classpath = ( Path ) Whitebox . getInternalState ( antTask , " classpath " ) ; 
 + final Path classpath = Whitebox . getInternalState ( antTask , " classpath " ) ; 
 classpath . list ( ) ; 
 fail ( " Exception is expected " ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 index fa963a6 . . db39664 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . api ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 - import static org . mockito . Matchers . any ; 
 + import static org . mockito . ArgumentMatchers . any ; 
 import static org . mockito . Mockito . times ; 
 import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 @ @ - 76 , 7 + 76 , 7 @ @ public class FileTextTest extends AbstractPathTestSupport { 
 charsetName ) ; 
 assertEquals ( " Invalid charset name " , charsetName , fileText . getCharset ( ) . name ( ) ) ; 
 
 - verifyStatic ( times ( 2 ) ) ; 
 + verifyStatic ( CommonUtils . class , times ( 2 ) ) ; 
 CommonUtils . close ( any ( Reader . class ) ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java 
 index f438d61 . . e64fcbb 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java 
 @ @ - 24 , 8 + 24 , 8 @ @ import static com . puppycrawl . tools . checkstyle . utils . CommonUtils . EMPTY _ OBJECT _ ARR 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 - import static org . mockito . Matchers . anyInt ; 
 - import static org . mockito . Matchers . anyObject ; 
 + import static org . mockito . ArgumentMatchers . any ; 
 + import static org . mockito . ArgumentMatchers . anyInt ; 
 import static org . mockito . Mockito . times ; 
 import static org . mockito . Mockito . verify ; 
 import static org . powermock . api . mockito . PowerMockito . mock ; 
 @ @ - 98 , 7 + 98 , 7 @ @ public class LocalizedMessageTest { 
 final InputStream inputStreamMock = mock ( InputStream . class ) ; 
 when ( classloader . getResource ( resource ) ) . thenReturn ( url ) ; 
 when ( mockUrlCon . getInputStream ( ) ) . thenReturn ( inputStreamMock ) ; 
 - when ( inputStreamMock . read ( anyObject ( ) , anyInt ( ) , anyInt ( ) ) ) . thenReturn ( - 1 ) ; 
 + when ( inputStreamMock . read ( any ( ) , anyInt ( ) , anyInt ( ) ) ) . thenReturn ( - 1 ) ; 
 
 final LocalizedMessage . Utf8Control control = new LocalizedMessage . Utf8Control ( ) ; 
 control . newBundle ( " com . puppycrawl . tools . checkstyle . checks . coding . messages " , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 index d547b9e . . a4e5571 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 @ @ - 25 , 8 + 25 , 8 @ @ import static java . util . Locale . ENGLISH ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 - import static org . mockito . Matchers . any ; 
 - import static org . mockito . Matchers . anyBoolean ; 
 + import static org . mockito . ArgumentMatchers . any ; 
 + import static org . mockito . ArgumentMatchers . anyBoolean ; 
 import static org . mockito . Mockito . times ; 
 import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 import static org . powermock . api . mockito . PowerMockito . mock ; 
 @ @ - 100 , 7 + 100 , 7 @ @ public class NewlineAtEndOfFileCheckTest 
 getPath ( " InputNewlineAtEndOfFileLf . java " ) , 
 expected ) ; 
 
 - verifyStatic ( times ( 1 ) ) ; 
 + verifyStatic ( Closeables . class , times ( 1 ) ) ; 
 Closeables . close ( any ( RandomAccessFile . class ) , anyBoolean ( ) ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 index c1e28b9 . . 8443d40 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 @ @ - 27 , 7 + 27 , 7 @ @ import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 - import static org . mockito . Matchers . any ; 
 + import static org . mockito . ArgumentMatchers . any ; 
 import static org . mockito . Mockito . mock ; 
 import static org . mockito . Mockito . times ; 
 import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 @ @ - 36 , 7 + 36 , 6 @ @ import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 
 import java . io . ByteArrayOutputStream ; 
 import java . io . File ; 
 - import java . io . FileInputStream ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . lang . reflect . Field ; 
 @ @ - 409 , 8 + 408 , 8 @ @ public class TranslationCheckTest extends AbstractXmlTestSupport { 
 propertyFiles , 
 getPath ( " " ) , 
 expected ) ; 
 - verifyStatic ( times ( 2 ) ) ; 
 - Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; 
 + verifyStatic ( Closeables . class , times ( 2 ) ) ; 
 + Closeables . closeQuietly ( any ( InputStream . class ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 index f98f211 . . 938185e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UniquePropertiesCheckTest . java 
 @ @ - 22 , 7 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks ; 
 import static com . puppycrawl . tools . checkstyle . checks . UniquePropertiesCheck . MSG _ IO _ EXCEPTION _ KEY ; 
 import static com . puppycrawl . tools . checkstyle . checks . UniquePropertiesCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertEquals ; 
 - import static org . mockito . Matchers . any ; 
 + import static org . mockito . ArgumentMatchers . any ; 
 import static org . mockito . Mockito . times ; 
 import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 @ @ - 106 , 7 + 106 , 7 @ @ public class UniquePropertiesCheckTest extends AbstractModuleTestSupport { 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , getPath ( " InputUniquePropertiesWithoutErrors . properties " ) , expected ) ; 
 
 - verifyStatic ( times ( 1 ) ) ; 
 + verifyStatic ( Closeables . class , times ( 1 ) ) ; 
 Closeables . closeQuietly ( any ( FileInputStream . class ) ) ; 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 index 6d540c1 . . ebe4471 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 @ @ - 24 , 7 + 24 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck . MSG _ MISS 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 - import static org . mockito . Matchers . anyObject ; 
 + import static org . mockito . ArgumentMatchers . any ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 @ @ - 199 , 7 + 199 , 7 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { 
 public void testIoExceptionWhenLoadingHeader ( ) throws Exception { 
 final HeaderCheck check = PowerMockito . spy ( new HeaderCheck ( ) ) ; 
 PowerMockito . doThrow ( new IOException ( " expected exception " ) ) . when ( check , " loadHeader " , 
 - anyObject ( ) ) ; 
 + any ( ) ) ; 
 
 try { 
 check . setHeader ( " header " ) ; 
 @ @ - 215 , 7 + 215 , 7 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { 
 public void testIoExceptionWhenLoadingHeaderFile ( ) throws Exception { 
 final HeaderCheck check = PowerMockito . spy ( new HeaderCheck ( ) ) ; 
 PowerMockito . doThrow ( new IOException ( " expected exception " ) ) . when ( check , " loadHeader " , 
 - anyObject ( ) ) ; 
 + any ( ) ) ; 
 
 check . setHeaderFile ( CommonUtils . getUriByFilename ( getPath ( " InputHeaderRegexp . java " ) ) ) ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java 
 index e16fe75 . . 6f544b0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java 
 @ @ - 24 , 13 + 24 , 12 @ @ import static com . puppycrawl . tools . checkstyle . checks . header . RegexpHeaderCheck . MS 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 - import static org . mockito . Matchers . any ; 
 + import static org . mockito . ArgumentMatchers . any ; 
 import static org . mockito . Mockito . times ; 
 import static org . powermock . api . mockito . PowerMockito . doNothing ; 
 import static org . powermock . api . mockito . PowerMockito . mockStatic ; 
 import static org . powermock . api . mockito . PowerMockito . verifyStatic ; 
 
 - import java . io . InputStreamReader ; 
 import java . io . Reader ; 
 import java . util . List ; 
 import java . util . Locale ; 
 @ @ - 38 , 9 + 37 , 9 @ @ import java . util . regex . Pattern ; 
 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 - import org . mockito . internal . util . reflection . Whitebox ; 
 import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 + import org . powermock . reflect . Whitebox ; 
 
 import com . google . common . io . Closeables ; 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 @ @ - 65 , 15 + 64 , 13 @ @ public class RegexpHeaderCheckTest extends AbstractModuleTestSupport { 
 * Test of setHeader method , of class RegexpHeaderCheck . 
 * / 
 @ Test 
 - @ SuppressWarnings ( " unchecked " ) 
 public void testSetHeaderNull ( ) { 
 / / check null passes 
 final RegexpHeaderCheck instance = new RegexpHeaderCheck ( ) ; 
 / / recreate for each test because multiple invocations fail 
 final String header = null ; 
 instance . setHeader ( header ) ; 
 - final List < Pattern > headerRegexps = 
 - ( List < Pattern > ) Whitebox . getInternalState ( instance , " headerRegexps " ) ; 
 + final List < Pattern > headerRegexps = Whitebox . getInternalState ( instance , " headerRegexps " ) ; 
 
 assertTrue ( " When header is null regexps should not be set " , headerRegexps . isEmpty ( ) ) ; 
 } 
 @ @ - 82 , 15 + 79 , 13 @ @ public class RegexpHeaderCheckTest extends AbstractModuleTestSupport { 
 * Test of setHeader method , of class RegexpHeaderCheck . 
 * / 
 @ Test 
 - @ SuppressWarnings ( " unchecked " ) 
 public void testSetHeaderEmpty ( ) { 
 / / check null passes 
 final RegexpHeaderCheck instance = new RegexpHeaderCheck ( ) ; 
 / / check empty string passes 
 final String header = " " ; 
 instance . setHeader ( header ) ; 
 - final List < Pattern > headerRegexps = 
 - ( List < Pattern > ) Whitebox . getInternalState ( instance , " headerRegexps " ) ; 
 + final List < Pattern > headerRegexps = Whitebox . getInternalState ( instance , " headerRegexps " ) ; 
 
 assertTrue ( " When header is empty regexps should not be set " , headerRegexps . isEmpty ( ) ) ; 
 } 
 @ @ - 110 , 7 + 105 , 7 @ @ public class RegexpHeaderCheckTest extends AbstractModuleTestSupport { 
 final String header = " abc . * " ; 
 instance . setHeader ( header ) ; 
 
 - verifyStatic ( times ( 2 ) ) ; 
 + verifyStatic ( Closeables . class , times ( 2 ) ) ; 
 Closeables . closeQuietly ( any ( Reader . class ) ) ; 
 } 
 
 @ @ - 383 , 15 + 378 , 15 @ @ public class RegexpHeaderCheckTest extends AbstractModuleTestSupport { 
 public void testReaderClosedAfterHeaderRead ( ) throws Exception { 
 mockStatic ( Closeables . class ) ; 
 doNothing ( ) . when ( Closeables . class ) ; 
 - Closeables . closeQuietly ( any ( InputStreamReader . class ) ) ; 
 + Closeables . closeQuietly ( any ( Reader . class ) ) ; 
 
 final DefaultConfiguration checkConfig = createModuleConfig ( RegexpHeaderCheck . class ) ; 
 checkConfig . addAttribute ( " headerFile " , getPath ( " InputRegexpHeader . header " ) ) ; 
 createChecker ( checkConfig ) ; 
 
 / / check if reader finally closed 
 - verifyStatic ( times ( 2 ) ) ; 
 - Closeables . closeQuietly ( any ( InputStreamReader . class ) ) ; 
 + verifyStatic ( Closeables . class , times ( 2 ) ) ; 
 + Closeables . closeQuietly ( any ( Reader . class ) ) ; 
 } 
 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 index 56fd9e2 . . f4a2d00 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 @ @ - 28 , 10 + 28 , 10 @ @ import static org . junit . Assert . fail ; 
 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 - import org . mockito . internal . util . reflection . Whitebox ; 
 import org . powermock . api . mockito . PowerMockito ; 
 import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 + import org . powermock . reflect . Whitebox ; 
 
 import antlr . CommonHiddenStreamToken ; 
 import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / ClassResolverTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / ClassResolverTest . java 
 index 3081cb2 . . 7f574db 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / ClassResolverTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / ClassResolverTest . java 
 @ @ - 24 , 7 + 24 , 7 @ @ import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 - import static org . mockito . Matchers . anyObject ; 
 + import static org . mockito . ArgumentMatchers . any ; 
 
 import java . util . HashSet ; 
 import java . util . Set ; 
 @ @ - 139 , 8 + 139 , 8 @ @ public class ClassResolverTest { 
 . currentThread ( ) . getContextClassLoader ( ) , " " , imports ) ) ; 
 
 PowerMockito . doThrow ( new ClassNotFoundException ( " expected exception " ) ) 
 - . when ( classResolver , " safeLoad " , anyObject ( ) ) ; 
 - PowerMockito . doReturn ( true ) . when ( classResolver , " isLoadable " , anyObject ( ) ) ; 
 + . when ( classResolver , " safeLoad " , any ( ) ) ; 
 + PowerMockito . doReturn ( true ) . when ( classResolver , " isLoadable " , any ( ) ) ; 
 
 try { 
 classResolver . resolve ( " someClass " , " " ) ; 
 @ @ - 172 , 7 + 172 , 7 @ @ public class ClassResolverTest { 
 . currentThread ( ) . getContextClassLoader ( ) , " " , imports ) ) ; 
 
 PowerMockito . doThrow ( new NoClassDefFoundError ( " expected exception " ) ) 
 - . when ( classResolver , " safeLoad " , anyObject ( ) ) ; 
 + . when ( classResolver , " safeLoad " , any ( ) ) ; 
 
 final boolean result = classResolver . isLoadable ( " someClass " ) ; 
 assertFalse ( " result should be false " , result ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 index 6da4071 . . b5fb52c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 @ @ - 430 , 7 + 430 , 6 @ @ public class CommonUtilsTest { 
 
 @ Test 
 @ PrepareForTest ( { CommonUtils . class , CommonUtilsTest . class } ) 
 - @ SuppressWarnings ( " unchecked " ) 
 public void testLoadSuppressionsUriSyntaxException ( ) throws Exception { 
 final URL configUrl = mock ( URL . class ) ; 


NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 index c080b8c . . 6564d8f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 @ @ - 155 , 7 + 155 , 7 @ @ public final class MutableExceptionCheck extends AbstractFormatCheck { 
 final DetailAST extendsClause = ast . findFirstToken ( TokenTypes . EXTENDS _ CLAUSE ) ; 
 if ( extendsClause ! = null ) { 
 DetailAST currentNode = extendsClause ; 
 - while ( currentNode . getType ( ) ! = TokenTypes . IDENT ) { 
 + while ( currentNode . getLastChild ( ) ! = null ) { 
 currentNode = currentNode . getLastChild ( ) ; 
 } 
 final String extendedClassName = currentNode . getText ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 index af627a3 . . 3f44f53 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheckTest . java 
 @ @ - 35 , 6 + 35 , 18 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class MutableExceptionCheckTest extends BaseCheckTestSupport { 
 + 
 + @ Test 
 + public void testClassExtendsGenericClass ( ) throws Exception { 
 + DefaultConfiguration checkConfig = createCheckConfig ( MutableExceptionCheck . class ) ; 
 + 
 + String [ ] expected = { 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " design " + File . separator 
 + + " InputMutableExceptionClassExtendsGenericClass . java " ) , expected ) ; 
 + } 
 + 
 @ Test 
 public void testDefault ( ) throws Exception { 
 DefaultConfiguration checkConfig = createCheckConfig ( MutableExceptionCheck . class ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java 
 new file mode 100644 
 index 0000000 . . 931128e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / design / InputMutableExceptionClassExtendsGenericClass . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . design ; 
 + 
 + import java . util . concurrent . atomic . AtomicReference ; 
 + 
 + / * * 
 + * Convenience class for holding an { @ link Exception } in a thread - safe way 
 + * / 
 + public class InputMutableExceptionClassExtendsGenericClass extends AtomicReference < Exception > { / / NPE is not expected 
 + 
 + private static final long serialVersionUID = 1L ; 
 + 
 + } 
 \ No newline at end of file
