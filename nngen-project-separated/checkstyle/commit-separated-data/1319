BLEU SCORE: 0.08295193507109855

TEST MSG: Issue # 2811 : Makes JavadocTypeCheck recognise param names without brackets
GENERATED MSG: Issue # 1566 : MemberName and MethodName violations fixed

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> index 303f9f1 . . a5b929e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java <nl> @ @ - 90 , 6 + 90 , 14 @ @ public class JavadocTypeCheck <nl> / * * Close angle bracket literal . * / <nl> private static final String CLOSE _ ANGLE _ BRACKET = " > " ; <nl> <nl> + / * * Pattern to match type name within angle brackets in javadoc param tag . * / <nl> + private static final Pattern TYPE _ NAME _ IN _ JAVADOC _ TAG = <nl> + Pattern . compile ( " \ \ s * < ( [ ^ > ] + ) > . * " ) ; <nl> + <nl> + / * * Pattern to split type name field in javadoc param tag . * / <nl> + private static final Pattern TYPE _ NAME _ IN _ JAVADOC _ TAG _ SPLITTER = <nl> + Pattern . compile ( " \ \ s + " ) ; <nl> + <nl> / * * The scope to check for . * / <nl> private Scope scope = Scope . PRIVATE ; <nl> / * * The visibility scope where Javadoc comments shouldn ' t be checked . * * / <nl> @ @ - 322 , 22 + 330 , 37 @ @ public class JavadocTypeCheck <nl> private void checkUnusedTypeParamTags ( <nl> final List < JavadocTag > tags , <nl> final List < String > typeParamNames ) { <nl> - final Pattern pattern = Pattern . compile ( " \ \ s * < ( [ ^ > ] + ) > . * " ) ; <nl> for ( int i = tags . size ( ) - 1 ; i > = 0 ; i - - ) { <nl> final JavadocTag tag = tags . get ( i ) ; <nl> if ( tag . isParamTag ( ) ) { <nl> <nl> - final Matcher matcher = pattern . matcher ( tag . getFirstArg ( ) ) ; <nl> - if ( matcher . find ( ) ) { <nl> - final String typeParamName = matcher . group ( 1 ) . trim ( ) ; <nl> - if ( ! typeParamNames . contains ( typeParamName ) ) { <nl> - log ( tag . getLineNo ( ) , tag . getColumnNo ( ) , <nl> + final String typeParamName = extractTypeParamNameFromTag ( tag ) ; <nl> + <nl> + if ( ! typeParamNames . contains ( typeParamName ) ) { <nl> + log ( tag . getLineNo ( ) , tag . getColumnNo ( ) , <nl> MSG _ UNUSED _ TAG , <nl> JavadocTagInfo . PARAM . getText ( ) , <nl> OPEN _ ANGLE _ BRACKET + typeParamName + CLOSE _ ANGLE _ BRACKET ) ; <nl> - } <nl> } <nl> } <nl> } <nl> } <nl> + <nl> + / * * <nl> + * Extracts type parameter name from tag . <nl> + * @ param tag javadoc tag to extract parameter name <nl> + * @ return extracts type parameter name from tag <nl> + * / <nl> + private static String extractTypeParamNameFromTag ( JavadocTag tag ) { <nl> + final String typeParamName ; <nl> + final Matcher matchInAngleBrackets = <nl> + TYPE _ NAME _ IN _ JAVADOC _ TAG . matcher ( tag . getFirstArg ( ) ) ; <nl> + if ( matchInAngleBrackets . find ( ) ) { <nl> + typeParamName = matchInAngleBrackets . group ( 1 ) . trim ( ) ; <nl> + } <nl> + else { <nl> + typeParamName = TYPE _ NAME _ IN _ JAVADOC _ TAG _ SPLITTER . split ( tag . getFirstArg ( ) ) [ 0 ] ; <nl> + } <nl> + return typeParamName ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java <nl> index 0f5f3c5 . . 1d8b9a5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java <nl> @ @ - 340 , 6 + 340 , 7 @ @ public class JavadocTypeCheckTest extends BaseCheckTestSupport { <nl> " 11 : " + getCheckMessage ( MSG _ MISSING _ TAG , " @ param < C456 > " ) , <nl> " 44 : 8 : " + getCheckMessage ( MSG _ UNUSED _ TAG , " @ param " , " < C > " ) , <nl> " 47 : " + getCheckMessage ( MSG _ MISSING _ TAG , " @ param < B > " ) , <nl> + " 60 : 5 : " + getCheckMessage ( MSG _ UNUSED _ TAG , " @ param " , " < x > " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputTypeParamsTags . java " ) , expected ) ; <nl> } <nl> @ @ - 352 , 11 + 353 , 25 @ @ public class JavadocTypeCheckTest extends BaseCheckTestSupport { <nl> final String [ ] expected = { <nl> " 7 : 4 : " + getCheckMessage ( MSG _ UNUSED _ TAG , " @ param " , " < D123 > " ) , <nl> " 44 : 8 : " + getCheckMessage ( MSG _ UNUSED _ TAG , " @ param " , " < C > " ) , <nl> + " 60 : 5 : " + getCheckMessage ( MSG _ UNUSED _ TAG , " @ param " , " < x > " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputTypeParamsTags . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> + public void testDontAllowUnusedParameterTag ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( JavadocTypeCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 6 : 4 : " + getCheckMessage ( MSG _ UNUSED _ TAG , " @ param " , " < BAD > " ) , <nl> + " 7 : 4 : " + getCheckMessage ( MSG _ UNUSED _ TAG , " @ param " , " < BAD > " ) , <nl> + } ; <nl> + verify ( checkConfig , <nl> + getPath ( " InputUnusedParamInJavadocForClass . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testBadTag ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( JavadocTypeCheck . class ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputUnusedParamInJavadocForClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputUnusedParamInJavadocForClass . java <nl> new file mode 100644 <nl> index 0000000 . . 7448400 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputUnusedParamInJavadocForClass . java <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . javadoc ; <nl> + <nl> + / * * <nl> + * InputUnusedParamInJavadocForClass . <nl> + * <nl> + * @ param BAD This is bad . <nl> + * @ param < BAD > This doesn ' t exist . <nl> + * @ param <nl> + * / <nl> + public class InputUnusedParamInJavadocForClass { <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> index 775c1cb . . 3781606 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java <nl> @ @ - 37 , 7 + 37 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * < p > <nl> * To configure the Check : <nl> * < / p > <nl> - * < p > <nl> + * <nl> * < pre > <nl> * < code > <nl> * & lt ; module name = & quot ; CommentsIndentation & quot ; / module & gt ; <nl> @ @ - 59 , 7 + 59 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * String str1 = " " ; <nl> * < / code > <nl> * < / pre > <nl> - * < / p > <nl> + * <nl> * <nl> * @ author < a href = " mailto : nesterenko - aleksey @ list . ru " > Aleksey Nesterenko < / a > <nl> * @ author < a href = " mailto : andreyselkin @ gmail . com " > Andrei Selkin < / a >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 index 303f9f1 . . a5b929e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheck . java 
 @ @ - 90 , 6 + 90 , 14 @ @ public class JavadocTypeCheck 
 / * * Close angle bracket literal . * / 
 private static final String CLOSE _ ANGLE _ BRACKET = " > " ; 
 
 + / * * Pattern to match type name within angle brackets in javadoc param tag . * / 
 + private static final Pattern TYPE _ NAME _ IN _ JAVADOC _ TAG = 
 + Pattern . compile ( " \ \ s * < ( [ ^ > ] + ) > . * " ) ; 
 + 
 + / * * Pattern to split type name field in javadoc param tag . * / 
 + private static final Pattern TYPE _ NAME _ IN _ JAVADOC _ TAG _ SPLITTER = 
 + Pattern . compile ( " \ \ s + " ) ; 
 + 
 / * * The scope to check for . * / 
 private Scope scope = Scope . PRIVATE ; 
 / * * The visibility scope where Javadoc comments shouldn ' t be checked . * * / 
 @ @ - 322 , 22 + 330 , 37 @ @ public class JavadocTypeCheck 
 private void checkUnusedTypeParamTags ( 
 final List < JavadocTag > tags , 
 final List < String > typeParamNames ) { 
 - final Pattern pattern = Pattern . compile ( " \ \ s * < ( [ ^ > ] + ) > . * " ) ; 
 for ( int i = tags . size ( ) - 1 ; i > = 0 ; i - - ) { 
 final JavadocTag tag = tags . get ( i ) ; 
 if ( tag . isParamTag ( ) ) { 
 
 - final Matcher matcher = pattern . matcher ( tag . getFirstArg ( ) ) ; 
 - if ( matcher . find ( ) ) { 
 - final String typeParamName = matcher . group ( 1 ) . trim ( ) ; 
 - if ( ! typeParamNames . contains ( typeParamName ) ) { 
 - log ( tag . getLineNo ( ) , tag . getColumnNo ( ) , 
 + final String typeParamName = extractTypeParamNameFromTag ( tag ) ; 
 + 
 + if ( ! typeParamNames . contains ( typeParamName ) ) { 
 + log ( tag . getLineNo ( ) , tag . getColumnNo ( ) , 
 MSG _ UNUSED _ TAG , 
 JavadocTagInfo . PARAM . getText ( ) , 
 OPEN _ ANGLE _ BRACKET + typeParamName + CLOSE _ ANGLE _ BRACKET ) ; 
 - } 
 } 
 } 
 } 
 } 
 + 
 + / * * 
 + * Extracts type parameter name from tag . 
 + * @ param tag javadoc tag to extract parameter name 
 + * @ return extracts type parameter name from tag 
 + * / 
 + private static String extractTypeParamNameFromTag ( JavadocTag tag ) { 
 + final String typeParamName ; 
 + final Matcher matchInAngleBrackets = 
 + TYPE _ NAME _ IN _ JAVADOC _ TAG . matcher ( tag . getFirstArg ( ) ) ; 
 + if ( matchInAngleBrackets . find ( ) ) { 
 + typeParamName = matchInAngleBrackets . group ( 1 ) . trim ( ) ; 
 + } 
 + else { 
 + typeParamName = TYPE _ NAME _ IN _ JAVADOC _ TAG _ SPLITTER . split ( tag . getFirstArg ( ) ) [ 0 ] ; 
 + } 
 + return typeParamName ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java 
 index 0f5f3c5 . . 1d8b9a5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTypeCheckTest . java 
 @ @ - 340 , 6 + 340 , 7 @ @ public class JavadocTypeCheckTest extends BaseCheckTestSupport { 
 " 11 : " + getCheckMessage ( MSG _ MISSING _ TAG , " @ param < C456 > " ) , 
 " 44 : 8 : " + getCheckMessage ( MSG _ UNUSED _ TAG , " @ param " , " < C > " ) , 
 " 47 : " + getCheckMessage ( MSG _ MISSING _ TAG , " @ param < B > " ) , 
 + " 60 : 5 : " + getCheckMessage ( MSG _ UNUSED _ TAG , " @ param " , " < x > " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputTypeParamsTags . java " ) , expected ) ; 
 } 
 @ @ - 352 , 11 + 353 , 25 @ @ public class JavadocTypeCheckTest extends BaseCheckTestSupport { 
 final String [ ] expected = { 
 " 7 : 4 : " + getCheckMessage ( MSG _ UNUSED _ TAG , " @ param " , " < D123 > " ) , 
 " 44 : 8 : " + getCheckMessage ( MSG _ UNUSED _ TAG , " @ param " , " < C > " ) , 
 + " 60 : 5 : " + getCheckMessage ( MSG _ UNUSED _ TAG , " @ param " , " < x > " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputTypeParamsTags . java " ) , expected ) ; 
 } 
 
 @ Test 
 + public void testDontAllowUnusedParameterTag ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( JavadocTypeCheck . class ) ; 
 + final String [ ] expected = { 
 + " 6 : 4 : " + getCheckMessage ( MSG _ UNUSED _ TAG , " @ param " , " < BAD > " ) , 
 + " 7 : 4 : " + getCheckMessage ( MSG _ UNUSED _ TAG , " @ param " , " < BAD > " ) , 
 + } ; 
 + verify ( checkConfig , 
 + getPath ( " InputUnusedParamInJavadocForClass . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 public void testBadTag ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( JavadocTypeCheck . class ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputUnusedParamInJavadocForClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputUnusedParamInJavadocForClass . java 
 new file mode 100644 
 index 0000000 . . 7448400 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / InputUnusedParamInJavadocForClass . java 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . javadoc ; 
 + 
 + / * * 
 + * InputUnusedParamInJavadocForClass . 
 + * 
 + * @ param BAD This is bad . 
 + * @ param < BAD > This doesn ' t exist . 
 + * @ param 
 + * / 
 + public class InputUnusedParamInJavadocForClass { 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 index 775c1cb . . 3781606 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / CommentsIndentationCheck . java 
 @ @ - 37 , 7 + 37 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * < p > 
 * To configure the Check : 
 * < / p > 
 - * < p > 
 + * 
 * < pre > 
 * < code > 
 * & lt ; module name = & quot ; CommentsIndentation & quot ; / module & gt ; 
 @ @ - 59 , 7 + 59 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * String str1 = " " ; 
 * < / code > 
 * < / pre > 
 - * < / p > 
 + * 
 * 
 * @ author < a href = " mailto : nesterenko - aleksey @ list . ru " > Aleksey Nesterenko < / a > 
 * @ author < a href = " mailto : andreyselkin @ gmail . com " > Andrei Selkin < / a >
