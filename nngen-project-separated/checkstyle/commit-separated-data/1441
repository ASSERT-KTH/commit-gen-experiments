BLEU SCORE: 0.8633400213704505

TEST MSG: Issue # 2451 : removed excess hierarchy from NPathComplexityCheck
GENERATED MSG: Issue # 2451 : removed excess hierarchy from CyclomaticComplexityCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java <nl> index aff3585 . . 808a7ae 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java <nl> @ @ - 20 , 7 + 20 , 10 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> <nl> import java . math . BigInteger ; <nl> + import java . util . ArrayDeque ; <nl> + import java . util . Deque ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> @ @ - 34 , 7 + 37 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > <nl> * @ author o _ sukhodolsky <nl> * / <nl> - public final class NPathComplexityCheck extends AbstractComplexityCheck { <nl> + public final class NPathComplexityCheck extends Check { <nl> <nl> / * * <nl> * A key is pointing to the warning message text in " messages . properties " <nl> @ @ - 45 , 9 + 48 , 25 @ @ public final class NPathComplexityCheck extends AbstractComplexityCheck { <nl> / * * Default allowed complexity . * / <nl> private static final int DEFAULT _ MAX = 200 ; <nl> <nl> - / * * Creates new instance of the check . * / <nl> - public NPathComplexityCheck ( ) { <nl> - super ( DEFAULT _ MAX ) ; <nl> + / * * The initial current value . * / <nl> + private static final BigInteger INITIAL _ VALUE = BigInteger . ONE ; <nl> + <nl> + / * * Stack of values - all but the current value . * / <nl> + private final Deque < BigInteger > valueStack = new ArrayDeque < > ( ) ; <nl> + <nl> + / * * The current value . * / <nl> + private BigInteger currentValue = INITIAL _ VALUE ; <nl> + <nl> + / * * Threshold to report error for . * / <nl> + private int max = DEFAULT _ MAX ; <nl> + <nl> + / * * <nl> + * Set the maximum threshold allowed . <nl> + * <nl> + * @ param max the maximum threshold <nl> + * / <nl> + public void setMax ( int max ) { <nl> + this . max = max ; <nl> } <nl> <nl> @ Override <nl> @ @ - 91 , 6 + 110 , 16 @ @ public final class NPathComplexityCheck extends AbstractComplexityCheck { <nl> } <nl> <nl> @ Override <nl> + public int [ ] getRequiredTokens ( ) { <nl> + return new int [ ] { <nl> + TokenTypes . CTOR _ DEF , <nl> + TokenTypes . METHOD _ DEF , <nl> + TokenTypes . INSTANCE _ INIT , <nl> + TokenTypes . STATIC _ INIT , <nl> + } ; <nl> + } <nl> + <nl> + @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> switch ( ast . getType ( ) ) { <nl> case TokenTypes . LITERAL _ WHILE : <nl> @ @ - 107 , 8 + 136 , 14 @ @ public final class NPathComplexityCheck extends AbstractComplexityCheck { <nl> case TokenTypes . LITERAL _ CASE : <nl> visitAddingConditional ( ) ; <nl> break ; <nl> + case TokenTypes . CTOR _ DEF : <nl> + case TokenTypes . METHOD _ DEF : <nl> + case TokenTypes . INSTANCE _ INIT : <nl> + case TokenTypes . STATIC _ INIT : <nl> + visitMethodDef ( ) ; <nl> + break ; <nl> default : <nl> - super . visitToken ( ast ) ; <nl> + break ; <nl> } <nl> } <nl> <nl> @ @ - 129 , 16 + 164 , 17 @ @ public final class NPathComplexityCheck extends AbstractComplexityCheck { <nl> case TokenTypes . LITERAL _ CASE : <nl> leaveAddingConditional ( ) ; <nl> break ; <nl> + case TokenTypes . CTOR _ DEF : <nl> + case TokenTypes . METHOD _ DEF : <nl> + case TokenTypes . INSTANCE _ INIT : <nl> + case TokenTypes . STATIC _ INIT : <nl> + leaveMethodDef ( ast ) ; <nl> + break ; <nl> default : <nl> - super . leaveToken ( ast ) ; <nl> + break ; <nl> } <nl> } <nl> <nl> - @ Override <nl> - protected String getMessageID ( ) { <nl> - return MSG _ KEY ; <nl> - } <nl> - <nl> / * * Visits else , catch or case . * / <nl> private void visitAddingConditional ( ) { <nl> pushValue ( ) ; <nl> @ @ - 146 , 8 + 182 , 7 @ @ public final class NPathComplexityCheck extends AbstractComplexityCheck { <nl> <nl> / * * Leaves else , catch or case . * / <nl> private void leaveAddingConditional ( ) { <nl> - setCurrentValue ( <nl> - getCurrentValue ( ) . subtract ( BigInteger . ONE ) . add ( popValue ( ) ) ) ; <nl> + currentValue = currentValue . subtract ( BigInteger . ONE ) . add ( popValue ( ) ) ; <nl> } <nl> <nl> / * * Visits while , do , for , if , try , ? ( in ? : : ) or switch . * / <nl> @ @ - 157 , 17 + 192 , 39 @ @ public final class NPathComplexityCheck extends AbstractComplexityCheck { <nl> <nl> / * * Leaves while , do , for , if , try , ? ( in ? : : ) or switch . * / <nl> private void leaveMultiplyingConditional ( ) { <nl> - setCurrentValue ( <nl> - getCurrentValue ( ) . add ( BigInteger . ONE ) . multiply ( popValue ( ) ) ) ; <nl> + currentValue = currentValue . add ( BigInteger . ONE ) . multiply ( popValue ( ) ) ; <nl> } <nl> <nl> - @ Override <nl> - protected void visitTokenHook ( DetailAST ast ) { <nl> - / / no code <nl> + / * * Push the current value on the stack . * / <nl> + private void pushValue ( ) { <nl> + valueStack . push ( currentValue ) ; <nl> + currentValue = INITIAL _ VALUE ; <nl> } <nl> <nl> - @ Override <nl> - protected void leaveTokenHook ( DetailAST ast ) { <nl> - / / no code <nl> + / * * <nl> + * Pops a value off the stack and makes it the current value . <nl> + * @ return pop a value off the stack and make it the current value <nl> + * / <nl> + private BigInteger popValue ( ) { <nl> + currentValue = valueStack . pop ( ) ; <nl> + return currentValue ; <nl> + } <nl> + <nl> + / * * Process the start of the method definition . * / <nl> + private void visitMethodDef ( ) { <nl> + pushValue ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Process the end of a method definition . <nl> + * <nl> + * @ param ast the token representing the method definition <nl> + * / <nl> + private void leaveMethodDef ( DetailAST ast ) { <nl> + final BigInteger bigIntegerMax = BigInteger . valueOf ( max ) ; <nl> + if ( currentValue . compareTo ( bigIntegerMax ) > 0 ) { <nl> + log ( ast , MSG _ KEY , currentValue , bigIntegerMax ) ; <nl> + } <nl> + popValue ( ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index 405f100 . . 3e92d5b 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 329 , 7 + 329 , 8 @ @ <nl> < module name = " MethodTypeParameterName " / > <nl> < module name = " PackageName " / > <nl> < module name = " ParameterName " > <nl> - < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " / > <nl> + < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] + $ " / > <nl> + < property name = " ignoreOverridden " value = " true " / > <nl> < / module > <nl> < module name = " StaticVariableName " > <nl> < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " / >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java 
 index aff3585 . . 808a7ae 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java 
 @ @ - 20 , 7 + 20 , 10 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 
 import java . math . BigInteger ; 
 + import java . util . ArrayDeque ; 
 + import java . util . Deque ; 
 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 @ @ - 34 , 7 + 37 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > 
 * @ author o _ sukhodolsky 
 * / 
 - public final class NPathComplexityCheck extends AbstractComplexityCheck { 
 + public final class NPathComplexityCheck extends Check { 
 
 / * * 
 * A key is pointing to the warning message text in " messages . properties " 
 @ @ - 45 , 9 + 48 , 25 @ @ public final class NPathComplexityCheck extends AbstractComplexityCheck { 
 / * * Default allowed complexity . * / 
 private static final int DEFAULT _ MAX = 200 ; 
 
 - / * * Creates new instance of the check . * / 
 - public NPathComplexityCheck ( ) { 
 - super ( DEFAULT _ MAX ) ; 
 + / * * The initial current value . * / 
 + private static final BigInteger INITIAL _ VALUE = BigInteger . ONE ; 
 + 
 + / * * Stack of values - all but the current value . * / 
 + private final Deque < BigInteger > valueStack = new ArrayDeque < > ( ) ; 
 + 
 + / * * The current value . * / 
 + private BigInteger currentValue = INITIAL _ VALUE ; 
 + 
 + / * * Threshold to report error for . * / 
 + private int max = DEFAULT _ MAX ; 
 + 
 + / * * 
 + * Set the maximum threshold allowed . 
 + * 
 + * @ param max the maximum threshold 
 + * / 
 + public void setMax ( int max ) { 
 + this . max = max ; 
 } 
 
 @ Override 
 @ @ - 91 , 6 + 110 , 16 @ @ public final class NPathComplexityCheck extends AbstractComplexityCheck { 
 } 
 
 @ Override 
 + public int [ ] getRequiredTokens ( ) { 
 + return new int [ ] { 
 + TokenTypes . CTOR _ DEF , 
 + TokenTypes . METHOD _ DEF , 
 + TokenTypes . INSTANCE _ INIT , 
 + TokenTypes . STATIC _ INIT , 
 + } ; 
 + } 
 + 
 + @ Override 
 public void visitToken ( DetailAST ast ) { 
 switch ( ast . getType ( ) ) { 
 case TokenTypes . LITERAL _ WHILE : 
 @ @ - 107 , 8 + 136 , 14 @ @ public final class NPathComplexityCheck extends AbstractComplexityCheck { 
 case TokenTypes . LITERAL _ CASE : 
 visitAddingConditional ( ) ; 
 break ; 
 + case TokenTypes . CTOR _ DEF : 
 + case TokenTypes . METHOD _ DEF : 
 + case TokenTypes . INSTANCE _ INIT : 
 + case TokenTypes . STATIC _ INIT : 
 + visitMethodDef ( ) ; 
 + break ; 
 default : 
 - super . visitToken ( ast ) ; 
 + break ; 
 } 
 } 
 
 @ @ - 129 , 16 + 164 , 17 @ @ public final class NPathComplexityCheck extends AbstractComplexityCheck { 
 case TokenTypes . LITERAL _ CASE : 
 leaveAddingConditional ( ) ; 
 break ; 
 + case TokenTypes . CTOR _ DEF : 
 + case TokenTypes . METHOD _ DEF : 
 + case TokenTypes . INSTANCE _ INIT : 
 + case TokenTypes . STATIC _ INIT : 
 + leaveMethodDef ( ast ) ; 
 + break ; 
 default : 
 - super . leaveToken ( ast ) ; 
 + break ; 
 } 
 } 
 
 - @ Override 
 - protected String getMessageID ( ) { 
 - return MSG _ KEY ; 
 - } 
 - 
 / * * Visits else , catch or case . * / 
 private void visitAddingConditional ( ) { 
 pushValue ( ) ; 
 @ @ - 146 , 8 + 182 , 7 @ @ public final class NPathComplexityCheck extends AbstractComplexityCheck { 
 
 / * * Leaves else , catch or case . * / 
 private void leaveAddingConditional ( ) { 
 - setCurrentValue ( 
 - getCurrentValue ( ) . subtract ( BigInteger . ONE ) . add ( popValue ( ) ) ) ; 
 + currentValue = currentValue . subtract ( BigInteger . ONE ) . add ( popValue ( ) ) ; 
 } 
 
 / * * Visits while , do , for , if , try , ? ( in ? : : ) or switch . * / 
 @ @ - 157 , 17 + 192 , 39 @ @ public final class NPathComplexityCheck extends AbstractComplexityCheck { 
 
 / * * Leaves while , do , for , if , try , ? ( in ? : : ) or switch . * / 
 private void leaveMultiplyingConditional ( ) { 
 - setCurrentValue ( 
 - getCurrentValue ( ) . add ( BigInteger . ONE ) . multiply ( popValue ( ) ) ) ; 
 + currentValue = currentValue . add ( BigInteger . ONE ) . multiply ( popValue ( ) ) ; 
 } 
 
 - @ Override 
 - protected void visitTokenHook ( DetailAST ast ) { 
 - / / no code 
 + / * * Push the current value on the stack . * / 
 + private void pushValue ( ) { 
 + valueStack . push ( currentValue ) ; 
 + currentValue = INITIAL _ VALUE ; 
 } 
 
 - @ Override 
 - protected void leaveTokenHook ( DetailAST ast ) { 
 - / / no code 
 + / * * 
 + * Pops a value off the stack and makes it the current value . 
 + * @ return pop a value off the stack and make it the current value 
 + * / 
 + private BigInteger popValue ( ) { 
 + currentValue = valueStack . pop ( ) ; 
 + return currentValue ; 
 + } 
 + 
 + / * * Process the start of the method definition . * / 
 + private void visitMethodDef ( ) { 
 + pushValue ( ) ; 
 + } 
 + 
 + / * * 
 + * Process the end of a method definition . 
 + * 
 + * @ param ast the token representing the method definition 
 + * / 
 + private void leaveMethodDef ( DetailAST ast ) { 
 + final BigInteger bigIntegerMax = BigInteger . valueOf ( max ) ; 
 + if ( currentValue . compareTo ( bigIntegerMax ) > 0 ) { 
 + log ( ast , MSG _ KEY , currentValue , bigIntegerMax ) ; 
 + } 
 + popValue ( ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index 405f100 . . 3e92d5b 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 329 , 7 + 329 , 8 @ @ 
 < module name = " MethodTypeParameterName " / > 
 < module name = " PackageName " / > 
 < module name = " ParameterName " > 
 - < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " / > 
 + < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] + $ " / > 
 + < property name = " ignoreOverridden " value = " true " / > 
 < / module > 
 < module name = " StaticVariableName " > 
 < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " / >
