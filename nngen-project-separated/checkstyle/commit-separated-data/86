BLEU SCORE: 0.10489671869455933

TEST MSG: Issue # 6377 : FinalLocalVariable : IllegalStateException
GENERATED MSG: Issue # 2405 : FinalLocalVariable false - positive in SWITCH solved

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> index eabec1c . . fd4f8d3 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> @ @ - 151 , 6 + 151 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> TokenTypes . SLIST , <nl> TokenTypes . OBJBLOCK , <nl> TokenTypes . LITERAL _ BREAK , <nl> + TokenTypes . LITERAL _ FOR , <nl> } ; <nl> } <nl> <nl> @ @ - 163 , 6 + 164 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> TokenTypes . SLIST , <nl> TokenTypes . OBJBLOCK , <nl> TokenTypes . LITERAL _ BREAK , <nl> + TokenTypes . LITERAL _ FOR , <nl> TokenTypes . VARIABLE _ DEF , <nl> } ; <nl> } <nl> @ @ - 176 , 6 + 178 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> TokenTypes . SLIST , <nl> TokenTypes . OBJBLOCK , <nl> TokenTypes . LITERAL _ BREAK , <nl> + TokenTypes . LITERAL _ FOR , <nl> TokenTypes . VARIABLE _ DEF , <nl> TokenTypes . PARAMETER _ DEF , <nl> } ; <nl> @ @ - 189 , 6 + 192 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> case TokenTypes . OBJBLOCK : <nl> case TokenTypes . METHOD _ DEF : <nl> case TokenTypes . CTOR _ DEF : <nl> + case TokenTypes . LITERAL _ FOR : <nl> scopeStack . push ( new ScopeData ( ) ) ; <nl> break ; <nl> case TokenTypes . SLIST : <nl> @ @ - 246 , 6 + 250 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> case TokenTypes . OBJBLOCK : <nl> case TokenTypes . CTOR _ DEF : <nl> case TokenTypes . METHOD _ DEF : <nl> + case TokenTypes . LITERAL _ FOR : <nl> scope = scopeStack . pop ( ) . scope ; <nl> break ; <nl> case TokenTypes . SLIST : <nl> @ @ - 376 , 6 + 381 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> final Iterator < DetailAST > iterator = currentScopeAssignedVariables . peek ( ) . iterator ( ) ; <nl> while ( iterator . hasNext ( ) ) { <nl> final DetailAST assignedVariable = iterator . next ( ) ; <nl> + boolean shouldRemove = false ; <nl> for ( DetailAST variable : scopeUninitializedVariableData ) { <nl> for ( ScopeData scopeData : scopeStack ) { <nl> final FinalVariableCandidate candidate = <nl> @ @ - 388 , 10 + 394 , 13 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> & & isSameVariables ( storedVariable , variable ) <nl> & & isSameVariables ( assignedVariable , variable ) ) { <nl> scopeData . uninitializedVariables . push ( variable ) ; <nl> - iterator . remove ( ) ; <nl> + shouldRemove = true ; <nl> } <nl> } <nl> } <nl> + if ( shouldRemove ) { <nl> + iterator . remove ( ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 474 , 7 + 483 , 10 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> private void insertVariable ( DetailAST ast ) { <nl> final Map < String , FinalVariableCandidate > scope = scopeStack . peek ( ) . scope ; <nl> final DetailAST astNode = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> - scope . put ( astNode . getText ( ) , new FinalVariableCandidate ( astNode ) ) ; <nl> + final FinalVariableCandidate candidate = new FinalVariableCandidate ( astNode ) ; <nl> + / / for - each variables are implicitly assigned <nl> + candidate . assigned = ast . getParent ( ) . getType ( ) = = TokenTypes . FOR _ EACH _ CLAUSE ; <nl> + scope . put ( astNode . getText ( ) , candidate ) ; <nl> if ( ! isInitialized ( astNode ) ) { <nl> scopeStack . peek ( ) . uninitializedVariables . add ( astNode ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> index 41ddef0 . . 606fca0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> @ @ - 132 , 7 + 132 , 8 @ @ public class FinalLocalVariableCheckTest <nl> " 21 : 66 : " + getCheckMessage ( MSG _ KEY , " snippets " ) , <nl> " 22 : 32 : " + getCheckMessage ( MSG _ KEY , " filteredSnippets " ) , <nl> " 23 : 21 : " + getCheckMessage ( MSG _ KEY , " snippet " ) , <nl> - " 27 : 20 : " + getCheckMessage ( MSG _ KEY , " snippet " ) , <nl> + " 38 : 20 : " + getCheckMessage ( MSG _ KEY , " a " ) , <nl> + " 41 : 16 : " + getCheckMessage ( MSG _ KEY , " a " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputFinalLocalVariableEnhancedForLoopVariable . java " ) , <nl> expected ) ; <nl> @ @ - 147 , 6 + 148 , 7 @ @ public class FinalLocalVariableCheckTest <nl> " 15 : 13 : " + getCheckMessage ( MSG _ KEY , " x " ) , <nl> " 21 : 66 : " + getCheckMessage ( MSG _ KEY , " snippets " ) , <nl> " 22 : 32 : " + getCheckMessage ( MSG _ KEY , " filteredSnippets " ) , <nl> + " 41 : 16 : " + getCheckMessage ( MSG _ KEY , " a " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputFinalLocalVariableEnhancedForLoopVariable . java " ) , <nl> expected ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java <nl> index 3731044 . . 5cf0580 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java <nl> @ @ - 30 , 4 + 30 , 27 @ @ public class InputFinalLocalVariableEnhancedForLoopVariable { <nl> } <nl> return filteredSnippets ; <nl> } <nl> + <nl> + public void method4 ( ) <nl> + { <nl> + final java . util . List < Object > list = new java . util . ArrayList < > ( ) ; <nl> + <nl> + for ( Object a : list ) { <nl> + } <nl> + <nl> + Object a ; <nl> + if ( list . isEmpty ( ) ) <nl> + { <nl> + a = new String ( " empty " ) ; <nl> + } <nl> + else <nl> + { <nl> + a = new String ( " not empty " ) ; <nl> + } <nl> + <nl> + for ( Object b : list ) { <nl> + b = new String ( " b " ) ; <nl> + } <nl> + } <nl> + <nl> }
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml <nl> index 2d2d6dd . . 8fd085c 100644 <nl> - - - a / config / checkstyle _ sevntu _ checks . xml <nl> + + + b / config / checkstyle _ sevntu _ checks . xml <nl> @ @ - 13 , 5 + 13 , 6 @ @ <nl> < module name = " NameConventionForJunit4TestClassesCheck " / > <nl> < module name = " EmptyPublicCtorInClassCheck " / > <nl> < module name = " TernaryPerExpressionCount " / > <nl> + < module name = " ReturnNullInsteadOfBoolean " / > <nl> < / module > <nl> < / module >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 index eabec1c . . fd4f8d3 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 @ @ - 151 , 6 + 151 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 TokenTypes . SLIST , 
 TokenTypes . OBJBLOCK , 
 TokenTypes . LITERAL _ BREAK , 
 + TokenTypes . LITERAL _ FOR , 
 } ; 
 } 
 
 @ @ - 163 , 6 + 164 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 TokenTypes . SLIST , 
 TokenTypes . OBJBLOCK , 
 TokenTypes . LITERAL _ BREAK , 
 + TokenTypes . LITERAL _ FOR , 
 TokenTypes . VARIABLE _ DEF , 
 } ; 
 } 
 @ @ - 176 , 6 + 178 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 TokenTypes . SLIST , 
 TokenTypes . OBJBLOCK , 
 TokenTypes . LITERAL _ BREAK , 
 + TokenTypes . LITERAL _ FOR , 
 TokenTypes . VARIABLE _ DEF , 
 TokenTypes . PARAMETER _ DEF , 
 } ; 
 @ @ - 189 , 6 + 192 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 case TokenTypes . OBJBLOCK : 
 case TokenTypes . METHOD _ DEF : 
 case TokenTypes . CTOR _ DEF : 
 + case TokenTypes . LITERAL _ FOR : 
 scopeStack . push ( new ScopeData ( ) ) ; 
 break ; 
 case TokenTypes . SLIST : 
 @ @ - 246 , 6 + 250 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 case TokenTypes . OBJBLOCK : 
 case TokenTypes . CTOR _ DEF : 
 case TokenTypes . METHOD _ DEF : 
 + case TokenTypes . LITERAL _ FOR : 
 scope = scopeStack . pop ( ) . scope ; 
 break ; 
 case TokenTypes . SLIST : 
 @ @ - 376 , 6 + 381 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 final Iterator < DetailAST > iterator = currentScopeAssignedVariables . peek ( ) . iterator ( ) ; 
 while ( iterator . hasNext ( ) ) { 
 final DetailAST assignedVariable = iterator . next ( ) ; 
 + boolean shouldRemove = false ; 
 for ( DetailAST variable : scopeUninitializedVariableData ) { 
 for ( ScopeData scopeData : scopeStack ) { 
 final FinalVariableCandidate candidate = 
 @ @ - 388 , 10 + 394 , 13 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 & & isSameVariables ( storedVariable , variable ) 
 & & isSameVariables ( assignedVariable , variable ) ) { 
 scopeData . uninitializedVariables . push ( variable ) ; 
 - iterator . remove ( ) ; 
 + shouldRemove = true ; 
 } 
 } 
 } 
 + if ( shouldRemove ) { 
 + iterator . remove ( ) ; 
 + } 
 } 
 } 
 
 @ @ - 474 , 7 + 483 , 10 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 private void insertVariable ( DetailAST ast ) { 
 final Map < String , FinalVariableCandidate > scope = scopeStack . peek ( ) . scope ; 
 final DetailAST astNode = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 - scope . put ( astNode . getText ( ) , new FinalVariableCandidate ( astNode ) ) ; 
 + final FinalVariableCandidate candidate = new FinalVariableCandidate ( astNode ) ; 
 + / / for - each variables are implicitly assigned 
 + candidate . assigned = ast . getParent ( ) . getType ( ) = = TokenTypes . FOR _ EACH _ CLAUSE ; 
 + scope . put ( astNode . getText ( ) , candidate ) ; 
 if ( ! isInitialized ( astNode ) ) { 
 scopeStack . peek ( ) . uninitializedVariables . add ( astNode ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 index 41ddef0 . . 606fca0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 @ @ - 132 , 7 + 132 , 8 @ @ public class FinalLocalVariableCheckTest 
 " 21 : 66 : " + getCheckMessage ( MSG _ KEY , " snippets " ) , 
 " 22 : 32 : " + getCheckMessage ( MSG _ KEY , " filteredSnippets " ) , 
 " 23 : 21 : " + getCheckMessage ( MSG _ KEY , " snippet " ) , 
 - " 27 : 20 : " + getCheckMessage ( MSG _ KEY , " snippet " ) , 
 + " 38 : 20 : " + getCheckMessage ( MSG _ KEY , " a " ) , 
 + " 41 : 16 : " + getCheckMessage ( MSG _ KEY , " a " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputFinalLocalVariableEnhancedForLoopVariable . java " ) , 
 expected ) ; 
 @ @ - 147 , 6 + 148 , 7 @ @ public class FinalLocalVariableCheckTest 
 " 15 : 13 : " + getCheckMessage ( MSG _ KEY , " x " ) , 
 " 21 : 66 : " + getCheckMessage ( MSG _ KEY , " snippets " ) , 
 " 22 : 32 : " + getCheckMessage ( MSG _ KEY , " filteredSnippets " ) , 
 + " 41 : 16 : " + getCheckMessage ( MSG _ KEY , " a " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputFinalLocalVariableEnhancedForLoopVariable . java " ) , 
 expected ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java 
 index 3731044 . . 5cf0580 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java 
 @ @ - 30 , 4 + 30 , 27 @ @ public class InputFinalLocalVariableEnhancedForLoopVariable { 
 } 
 return filteredSnippets ; 
 } 
 + 
 + public void method4 ( ) 
 + { 
 + final java . util . List < Object > list = new java . util . ArrayList < > ( ) ; 
 + 
 + for ( Object a : list ) { 
 + } 
 + 
 + Object a ; 
 + if ( list . isEmpty ( ) ) 
 + { 
 + a = new String ( " empty " ) ; 
 + } 
 + else 
 + { 
 + a = new String ( " not empty " ) ; 
 + } 
 + 
 + for ( Object b : list ) { 
 + b = new String ( " b " ) ; 
 + } 
 + } 
 + 
 }

NEAREST DIFF:
diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml 
 index 2d2d6dd . . 8fd085c 100644 
 - - - a / config / checkstyle _ sevntu _ checks . xml 
 + + + b / config / checkstyle _ sevntu _ checks . xml 
 @ @ - 13 , 5 + 13 , 6 @ @ 
 < module name = " NameConventionForJunit4TestClassesCheck " / > 
 < module name = " EmptyPublicCtorInClassCheck " / > 
 < module name = " TernaryPerExpressionCount " / > 
 + < module name = " ReturnNullInsteadOfBoolean " / > 
 < / module > 
 < / module >
