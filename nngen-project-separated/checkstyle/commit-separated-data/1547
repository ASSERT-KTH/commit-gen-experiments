BLEU SCORE: 1.0

TEST MSG: Issue # 2161 : unify test input locations
GENERATED MSG: Issue # 2161 : unify test input locations

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java <nl> index 7be367c . . c5aa2b3 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . imports . AvoidStaticImportCh <nl> import static org . junit . Assert . assertArrayEquals ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . Test ; <nl> <nl> @ @ - 32 , 6 + 33 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class AvoidStaticImportTest <nl> extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " imports " + File . separator + filename ) ; <nl> + } <nl> <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> @ @ - 55 , 7 + 61 , 7 @ @ public class AvoidStaticImportTest <nl> " 30 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass . one " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAvoidStaticImportCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 71 , 7 + 77 , 7 @ @ public class AvoidStaticImportTest <nl> " 29 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass " ) , <nl> " 30 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass . one " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAvoidStaticImportCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 89 , 7 + 95 , 7 @ @ public class AvoidStaticImportTest <nl> " 29 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass " ) , <nl> " 30 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass . one " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAvoidStaticImportCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 112 , 7 + 118 , 7 @ @ public class AvoidStaticImportTest <nl> " 29 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass " ) , <nl> " 30 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass . one " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAvoidStaticImportCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 133 , 7 + 139 , 7 @ @ public class AvoidStaticImportTest <nl> " 28 : " + getCheckMessage ( MSG _ KEY , " java . io . File . pathSeparator " ) , <nl> " 29 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputAvoidStaticImportCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 145 , 5 + 151 , 4 @ @ public class AvoidStaticImportTest <nl> <nl> assertArrayEquals ( expected , actual ) ; <nl> } <nl> - <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputAvoidStaticImportCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputAvoidStaticImportCheck . java <nl> new file mode 100644 <nl> index 0000000 . . c2a5fee <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputAvoidStaticImportCheck . java <nl> @ @ - 0 , 0 + 1 , 113 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . imports . * ; <nl> + <nl> + import java . io . * ; <nl> + import java . lang . * ; <nl> + import java . sql . Connection ; <nl> + import java . util . List ; <nl> + import java . util . List ; <nl> + import java . lang . * ; <nl> + import java . util . Iterator ; <nl> + import java . util . Enumeration ; <nl> + import java . util . Arrays ; <nl> + <nl> + import javax . swing . JToolBar ; <nl> + import javax . swing . JToggleButton ; <nl> + import javax . swing . ScrollPaneLayout ; <nl> + import javax . swing . BorderFactory ; <nl> + import static java . io . File . listRoots ; <nl> + <nl> + import static javax . swing . WindowConstants . * ; <nl> + import static javax . swing . WindowConstants . * ; <nl> + import static java . io . File . createTempFile ; <nl> + import static java . io . File . pathSeparator ; <nl> + import static com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass ; <nl> + import static com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass . one ; <nl> + <nl> + import java . awt . Component ; <nl> + import java . awt . Graphics2D ; <nl> + import java . awt . HeadlessException ; <nl> + import java . awt . Label ; <nl> + import java . util . Date ; <nl> + import java . util . Calendar ; <nl> + import java . util . BitSet ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . Checker ; <nl> + import com . puppycrawl . tools . checkstyle . CheckerTest ; <nl> + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . Definitions ; <nl> + import com . puppycrawl . tools . checkstyle . Input15Extensions ; <nl> + import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; <nl> + import com . puppycrawl . tools . checkstyle . PackageNamesLoader ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> + <nl> + / * * <nl> + * Test case for imports <nl> + * Here ' s an import used only by javadoc : { @ link Date } . <nl> + * @ author Oliver Burn <nl> + * @ author lkuehne <nl> + * @ author Michael Studman <nl> + * @ see Calendar Should avoid unused import for Calendar <nl> + * * / <nl> + class InputAvoidStaticImportCheck <nl> + { <nl> + / * * ignore * * / <nl> + private Class mUse1 = Connection . class ; <nl> + / * * ignore * * / <nl> + private Class mUse2 = java . io . File . class ; <nl> + / * * ignore * * / <nl> + private Class mUse3 = Iterator [ ] . class ; <nl> + / * * ignore * * / <nl> + private Class mUse4 = java . util . Enumeration [ ] . class ; <nl> + / * * usage of illegal import * * / <nl> + private String ftpClient = null ; <nl> + <nl> + / * * usage via static method , both normal and fully qualified * / <nl> + { <nl> + int [ ] x = { } ; <nl> + Arrays . sort ( x ) ; <nl> + Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; <nl> + File [ ] files = listRoots ( ) ; <nl> + } <nl> + <nl> + / * * usage of inner class as type * / <nl> + private JToolBar . Separator mSep = null ; <nl> + <nl> + / * * usage of inner class in Constructor * / <nl> + private Object mUse5 = new Object ( ) ; <nl> + <nl> + / * * usage of inner class in constructor , fully qualified * / <nl> + private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; <nl> + <nl> + / * * we use class name as member ' s name . <nl> + * also an inline JavaDoc - only import { @ link Vector linkText } * / <nl> + private int Component ; <nl> + <nl> + / * * <nl> + * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } <nl> + * / <nl> + public void Label ( ) { } <nl> + <nl> + / * * <nl> + * Renders to a { @ linkplain Graphics2D graphics context } . <nl> + * @ throws HeadlessException if no graphis environment can be found . <nl> + * @ exception HeadlessException if no graphis environment can be found . <nl> + * / <nl> + public void render ( ) { } <nl> + <nl> + / * * <nl> + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . <nl> + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . <nl> + * <nl> + * @ param param1 with a link { @ link TestClass6 } <nl> + * @ throws TestClass7 when broken <nl> + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } <nl> + * / <nl> + public void aMethodWithManyLinks ( ) { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputAvoidStaticImportCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputAvoidStaticImportCheck . java <nl> deleted file mode 100644 <nl> index 209a3ff . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputAvoidStaticImportCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 113 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . imports ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . imports . * ; <nl> - <nl> - import java . io . * ; <nl> - import java . lang . * ; <nl> - import java . sql . Connection ; <nl> - import java . util . List ; <nl> - import java . util . List ; <nl> - import java . lang . * ; <nl> - import java . util . Iterator ; <nl> - import java . util . Enumeration ; <nl> - import java . util . Arrays ; <nl> - <nl> - import javax . swing . JToolBar ; <nl> - import javax . swing . JToggleButton ; <nl> - import javax . swing . ScrollPaneLayout ; <nl> - import javax . swing . BorderFactory ; <nl> - import static java . io . File . listRoots ; <nl> - <nl> - import static javax . swing . WindowConstants . * ; <nl> - import static javax . swing . WindowConstants . * ; <nl> - import static java . io . File . createTempFile ; <nl> - import static java . io . File . pathSeparator ; <nl> - import static com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass ; <nl> - import static com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass . one ; <nl> - <nl> - import java . awt . Component ; <nl> - import java . awt . Graphics2D ; <nl> - import java . awt . HeadlessException ; <nl> - import java . awt . Label ; <nl> - import java . util . Date ; <nl> - import java . util . Calendar ; <nl> - import java . util . BitSet ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . Checker ; <nl> - import com . puppycrawl . tools . checkstyle . CheckerTest ; <nl> - import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; <nl> - import com . puppycrawl . tools . checkstyle . Definitions ; <nl> - import com . puppycrawl . tools . checkstyle . Input15Extensions ; <nl> - import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; <nl> - import com . puppycrawl . tools . checkstyle . PackageNamesLoader ; <nl> - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> - import com . puppycrawl . tools . checkstyle . DefaultLogger ; <nl> - <nl> - / * * <nl> - * Test case for imports <nl> - * Here ' s an import used only by javadoc : { @ link Date } . <nl> - * @ author Oliver Burn <nl> - * @ author lkuehne <nl> - * @ author Michael Studman <nl> - * @ see Calendar Should avoid unused import for Calendar <nl> - * * / <nl> - class InputAvoidStaticImportCheck <nl> - { <nl> - / * * ignore * * / <nl> - private Class mUse1 = Connection . class ; <nl> - / * * ignore * * / <nl> - private Class mUse2 = java . io . File . class ; <nl> - / * * ignore * * / <nl> - private Class mUse3 = Iterator [ ] . class ; <nl> - / * * ignore * * / <nl> - private Class mUse4 = java . util . Enumeration [ ] . class ; <nl> - / * * usage of illegal import * * / <nl> - private String ftpClient = null ; <nl> - <nl> - / * * usage via static method , both normal and fully qualified * / <nl> - { <nl> - int [ ] x = { } ; <nl> - Arrays . sort ( x ) ; <nl> - Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; <nl> - File [ ] files = listRoots ( ) ; <nl> - } <nl> - <nl> - / * * usage of inner class as type * / <nl> - private JToolBar . Separator mSep = null ; <nl> - <nl> - / * * usage of inner class in Constructor * / <nl> - private Object mUse5 = new Object ( ) ; <nl> - <nl> - / * * usage of inner class in constructor , fully qualified * / <nl> - private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; <nl> - <nl> - / * * we use class name as member ' s name . <nl> - * also an inline JavaDoc - only import { @ link Vector linkText } * / <nl> - private int Component ; <nl> - <nl> - / * * <nl> - * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } <nl> - * / <nl> - public void Label ( ) { } <nl> - <nl> - / * * <nl> - * Renders to a { @ linkplain Graphics2D graphics context } . <nl> - * @ throws HeadlessException if no graphis environment can be found . <nl> - * @ exception HeadlessException if no graphis environment can be found . <nl> - * / <nl> - public void render ( ) { } <nl> - <nl> - / * * <nl> - * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . <nl> - * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . <nl> - * <nl> - * @ param param1 with a link { @ link TestClass6 } <nl> - * @ throws TestClass7 when broken <nl> - * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } <nl> - * / <nl> - public void aMethodWithManyLinks ( ) { } <nl> - }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> index 9af22a9 . . 2cdac81 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { <nl> } <nl> <nl> private static List < RevCommit > getCommitsToCheck ( ) throws Exception { <nl> - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; <nl> - <nl> - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> List < RevCommit > commits ; <nl> - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> - } <nl> - else { <nl> - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { <nl> + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> + else { <nl> + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> } <nl> return commits ; <nl> } <nl> @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { <nl> <nl> private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { <nl> RevCommitsPair revCommitIteratorPair ; <nl> - try { <nl> + <nl> + try ( RevWalk revWalk = new RevWalk ( repo ) ) { <nl> Iterator < RevCommit > first ; <nl> Iterator < RevCommit > second ; <nl> - <nl> - RevWalk revWalk = new RevWalk ( repo ) ; <nl> - <nl> ObjectId headId = repo . resolve ( Constants . HEAD ) ; <nl> RevCommit headCommit = revWalk . parseCommit ( headId ) ; <nl> <nl> @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { <nl> RevCommit firstParent = headCommit . getParent ( 0 ) ; <nl> RevCommit secondParent = headCommit . getParent ( 1 ) ; <nl> <nl> - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + } <nl> } <nl> else { <nl> - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . call ( ) . iterator ( ) ; <nl> + } <nl> second = Collections . emptyIterator ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java 
 index 7be367c . . c5aa2b3 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / AvoidStaticImportTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . imports . AvoidStaticImportCh 
 import static org . junit . Assert . assertArrayEquals ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . Test ; 
 
 @ @ - 32 , 6 + 33 , 11 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class AvoidStaticImportTest 
 extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " imports " + File . separator + filename ) ; 
 + } 
 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 @ @ - 55 , 7 + 61 , 7 @ @ public class AvoidStaticImportTest 
 " 30 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass . one " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAvoidStaticImportCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 71 , 7 + 77 , 7 @ @ public class AvoidStaticImportTest 
 " 29 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass " ) , 
 " 30 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass . one " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAvoidStaticImportCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 89 , 7 + 95 , 7 @ @ public class AvoidStaticImportTest 
 " 29 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass " ) , 
 " 30 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass . one " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAvoidStaticImportCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 112 , 7 + 118 , 7 @ @ public class AvoidStaticImportTest 
 " 29 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass " ) , 
 " 30 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass . one " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAvoidStaticImportCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 133 , 7 + 139 , 7 @ @ public class AvoidStaticImportTest 
 " 28 : " + getCheckMessage ( MSG _ KEY , " java . io . File . pathSeparator " ) , 
 " 29 : " + getCheckMessage ( MSG _ KEY , " com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " imports " + File . separator + " InputAvoidStaticImportCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputAvoidStaticImportCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 145 , 5 + 151 , 4 @ @ public class AvoidStaticImportTest 
 
 assertArrayEquals ( expected , actual ) ; 
 } 
 - 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputAvoidStaticImportCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputAvoidStaticImportCheck . java 
 new file mode 100644 
 index 0000000 . . c2a5fee 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / InputAvoidStaticImportCheck . java 
 @ @ - 0 , 0 + 1 , 113 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . imports ; 
 + 
 + import com . puppycrawl . tools . checkstyle . imports . * ; 
 + 
 + import java . io . * ; 
 + import java . lang . * ; 
 + import java . sql . Connection ; 
 + import java . util . List ; 
 + import java . util . List ; 
 + import java . lang . * ; 
 + import java . util . Iterator ; 
 + import java . util . Enumeration ; 
 + import java . util . Arrays ; 
 + 
 + import javax . swing . JToolBar ; 
 + import javax . swing . JToggleButton ; 
 + import javax . swing . ScrollPaneLayout ; 
 + import javax . swing . BorderFactory ; 
 + import static java . io . File . listRoots ; 
 + 
 + import static javax . swing . WindowConstants . * ; 
 + import static javax . swing . WindowConstants . * ; 
 + import static java . io . File . createTempFile ; 
 + import static java . io . File . pathSeparator ; 
 + import static com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass ; 
 + import static com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass . one ; 
 + 
 + import java . awt . Component ; 
 + import java . awt . Graphics2D ; 
 + import java . awt . HeadlessException ; 
 + import java . awt . Label ; 
 + import java . util . Date ; 
 + import java . util . Calendar ; 
 + import java . util . BitSet ; 
 + 
 + import com . puppycrawl . tools . checkstyle . Checker ; 
 + import com . puppycrawl . tools . checkstyle . CheckerTest ; 
 + import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . Definitions ; 
 + import com . puppycrawl . tools . checkstyle . Input15Extensions ; 
 + import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; 
 + import com . puppycrawl . tools . checkstyle . PackageNamesLoader ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 + 
 + / * * 
 + * Test case for imports 
 + * Here ' s an import used only by javadoc : { @ link Date } . 
 + * @ author Oliver Burn 
 + * @ author lkuehne 
 + * @ author Michael Studman 
 + * @ see Calendar Should avoid unused import for Calendar 
 + * * / 
 + class InputAvoidStaticImportCheck 
 + { 
 + / * * ignore * * / 
 + private Class mUse1 = Connection . class ; 
 + / * * ignore * * / 
 + private Class mUse2 = java . io . File . class ; 
 + / * * ignore * * / 
 + private Class mUse3 = Iterator [ ] . class ; 
 + / * * ignore * * / 
 + private Class mUse4 = java . util . Enumeration [ ] . class ; 
 + / * * usage of illegal import * * / 
 + private String ftpClient = null ; 
 + 
 + / * * usage via static method , both normal and fully qualified * / 
 + { 
 + int [ ] x = { } ; 
 + Arrays . sort ( x ) ; 
 + Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; 
 + File [ ] files = listRoots ( ) ; 
 + } 
 + 
 + / * * usage of inner class as type * / 
 + private JToolBar . Separator mSep = null ; 
 + 
 + / * * usage of inner class in Constructor * / 
 + private Object mUse5 = new Object ( ) ; 
 + 
 + / * * usage of inner class in constructor , fully qualified * / 
 + private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; 
 + 
 + / * * we use class name as member ' s name . 
 + * also an inline JavaDoc - only import { @ link Vector linkText } * / 
 + private int Component ; 
 + 
 + / * * 
 + * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } 
 + * / 
 + public void Label ( ) { } 
 + 
 + / * * 
 + * Renders to a { @ linkplain Graphics2D graphics context } . 
 + * @ throws HeadlessException if no graphis environment can be found . 
 + * @ exception HeadlessException if no graphis environment can be found . 
 + * / 
 + public void render ( ) { } 
 + 
 + / * * 
 + * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . 
 + * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . 
 + * 
 + * @ param param1 with a link { @ link TestClass6 } 
 + * @ throws TestClass7 when broken 
 + * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } 
 + * / 
 + public void aMethodWithManyLinks ( ) { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputAvoidStaticImportCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputAvoidStaticImportCheck . java 
 deleted file mode 100644 
 index 209a3ff . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputAvoidStaticImportCheck . java 
 + + + / dev / null 
 @ @ - 1 , 113 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . imports ; 
 - 
 - import com . puppycrawl . tools . checkstyle . imports . * ; 
 - 
 - import java . io . * ; 
 - import java . lang . * ; 
 - import java . sql . Connection ; 
 - import java . util . List ; 
 - import java . util . List ; 
 - import java . lang . * ; 
 - import java . util . Iterator ; 
 - import java . util . Enumeration ; 
 - import java . util . Arrays ; 
 - 
 - import javax . swing . JToolBar ; 
 - import javax . swing . JToggleButton ; 
 - import javax . swing . ScrollPaneLayout ; 
 - import javax . swing . BorderFactory ; 
 - import static java . io . File . listRoots ; 
 - 
 - import static javax . swing . WindowConstants . * ; 
 - import static javax . swing . WindowConstants . * ; 
 - import static java . io . File . createTempFile ; 
 - import static java . io . File . pathSeparator ; 
 - import static com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass ; 
 - import static com . puppycrawl . tools . checkstyle . imports . InputAvoidStaticImportNestedClass . InnerClass . one ; 
 - 
 - import java . awt . Component ; 
 - import java . awt . Graphics2D ; 
 - import java . awt . HeadlessException ; 
 - import java . awt . Label ; 
 - import java . util . Date ; 
 - import java . util . Calendar ; 
 - import java . util . BitSet ; 
 - 
 - import com . puppycrawl . tools . checkstyle . Checker ; 
 - import com . puppycrawl . tools . checkstyle . CheckerTest ; 
 - import com . puppycrawl . tools . checkstyle . BaseFileSetCheckTestSupport ; 
 - import com . puppycrawl . tools . checkstyle . Definitions ; 
 - import com . puppycrawl . tools . checkstyle . Input15Extensions ; 
 - import com . puppycrawl . tools . checkstyle . ConfigurationLoaderTest ; 
 - import com . puppycrawl . tools . checkstyle . PackageNamesLoader ; 
 - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 - import com . puppycrawl . tools . checkstyle . DefaultLogger ; 
 - 
 - / * * 
 - * Test case for imports 
 - * Here ' s an import used only by javadoc : { @ link Date } . 
 - * @ author Oliver Burn 
 - * @ author lkuehne 
 - * @ author Michael Studman 
 - * @ see Calendar Should avoid unused import for Calendar 
 - * * / 
 - class InputAvoidStaticImportCheck 
 - { 
 - / * * ignore * * / 
 - private Class mUse1 = Connection . class ; 
 - / * * ignore * * / 
 - private Class mUse2 = java . io . File . class ; 
 - / * * ignore * * / 
 - private Class mUse3 = Iterator [ ] . class ; 
 - / * * ignore * * / 
 - private Class mUse4 = java . util . Enumeration [ ] . class ; 
 - / * * usage of illegal import * * / 
 - private String ftpClient = null ; 
 - 
 - / * * usage via static method , both normal and fully qualified * / 
 - { 
 - int [ ] x = { } ; 
 - Arrays . sort ( x ) ; 
 - Object obj = javax . swing . BorderFactory . createEmptyBorder ( ) ; 
 - File [ ] files = listRoots ( ) ; 
 - } 
 - 
 - / * * usage of inner class as type * / 
 - private JToolBar . Separator mSep = null ; 
 - 
 - / * * usage of inner class in Constructor * / 
 - private Object mUse5 = new Object ( ) ; 
 - 
 - / * * usage of inner class in constructor , fully qualified * / 
 - private Object mUse6 = new javax . swing . JToggleButton . ToggleButtonModel ( ) ; 
 - 
 - / * * we use class name as member ' s name . 
 - * also an inline JavaDoc - only import { @ link Vector linkText } * / 
 - private int Component ; 
 - 
 - / * * 
 - * method comment with JavaDoc - only import { @ link BitSet # aMethod ( ) } 
 - * / 
 - public void Label ( ) { } 
 - 
 - / * * 
 - * Renders to a { @ linkplain Graphics2D graphics context } . 
 - * @ throws HeadlessException if no graphis environment can be found . 
 - * @ exception HeadlessException if no graphis environment can be found . 
 - * / 
 - public void render ( ) { } 
 - 
 - / * * 
 - * First is a class with a method with arguments { @ link TestClass1 # method1 ( TestClass2 ) } . 
 - * Next is a class with typed method { @ link TestClass3 # method2 ( TestClass4 , TestClass5 ) } . 
 - * 
 - * @ param param1 with a link { @ link TestClass6 } 
 - * @ throws TestClass7 when broken 
 - * @ deprecated in 1 for removal in 2 . Use { @ link TestClass8 } 
 - * / 
 - public void aMethodWithManyLinks ( ) { } 
 - }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 index 9af22a9 . . 2cdac81 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { 
 } 
 
 private static List < RevCommit > getCommitsToCheck ( ) throws Exception { 
 - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; 
 - 
 - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 List < RevCommit > commits ; 
 - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 - } 
 - else { 
 - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { 
 + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 + else { 
 + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 } 
 return commits ; 
 } 
 @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { 
 
 private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { 
 RevCommitsPair revCommitIteratorPair ; 
 - try { 
 + 
 + try ( RevWalk revWalk = new RevWalk ( repo ) ) { 
 Iterator < RevCommit > first ; 
 Iterator < RevCommit > second ; 
 - 
 - RevWalk revWalk = new RevWalk ( repo ) ; 
 - 
 ObjectId headId = repo . resolve ( Constants . HEAD ) ; 
 RevCommit headCommit = revWalk . parseCommit ( headId ) ; 
 
 @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { 
 RevCommit firstParent = headCommit . getParent ( 0 ) ; 
 RevCommit secondParent = headCommit . getParent ( 1 ) ; 
 
 - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + } 
 } 
 else { 
 - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . call ( ) . iterator ( ) ; 
 + } 
 second = Collections . emptyIterator ( ) ; 
 } 

