BLEU SCORE: 0.06754312828675708

TEST MSG: config : change groupId for sevntu - checkstyle 1 . 24 . 0 version
GENERATED MSG: config : checkstyle dependency was removed checkstyle - maven - plugin

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index e47f2fe . . 718799c 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 460 , 7 + 460 , 7 @ @ <nl> < version > $ { maven . checkstyle . plugin . version } < / version > <nl> < dependencies > <nl> < dependency > <nl> - < groupId > com . github . sevntu . checkstyle < / groupId > <nl> + < groupId > com . github . sevntu - checkstyle < / groupId > <nl> < artifactId > sevntu - checkstyle - maven - plugin < / artifactId > <nl> < version > $ { maven . sevntu . checkstyle . plugin . version } < / version > <nl> < / dependency >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java <nl> index fa9628a . . 9c01cf8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java <nl> @ @ - 215 , 8 + 215 , 18 @ @ public abstract class AbstractExpressionHandler { <nl> * @ return the start of the line for the given expression <nl> * / <nl> protected final int getLineStart ( DetailAST ast ) { <nl> - final String line = indentCheck . getLine ( ast . getLineNo ( ) - 1 ) ; <nl> - return getLineStart ( line ) ; <nl> + return getLineStart ( ast . getLineNo ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Get the start of the line for the given line number . <nl> + * <nl> + * @ param lineNo the line number to find the start for <nl> + * <nl> + * @ return the start of the line for the given expression <nl> + * / <nl> + protected final int getLineStart ( int lineNo ) { <nl> + return getLineStart ( indentCheck . getLine ( lineNo - 1 ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 370 , 6 + 380 , 22 @ @ public abstract class AbstractExpressionHandler { <nl> } <nl> <nl> / * * <nl> + * Checks indentation on wrapped lines between and including <nl> + * { @ code firstNode } and { @ code lastNode } . <nl> + * <nl> + * @ param firstNode First node to start examining . <nl> + * @ param lastNode Last node to examine inclusively . <nl> + * @ param wrappedIndentLevel Indentation all wrapped lines should use . <nl> + * @ param startIndent Indentation first line before wrapped lines used . <nl> + * @ param ignoreFirstLine Test if first line ' s indentation should be checked or not . <nl> + * / <nl> + protected void checkWrappingIndentation ( DetailAST firstNode , DetailAST lastNode , <nl> + int wrappedIndentLevel , int startIndent , boolean ignoreFirstLine ) { <nl> + indentCheck . getLineWrappingHandler ( ) . checkIndentation ( firstNode , lastNode , <nl> + wrappedIndentLevel , startIndent , ignoreFirstLine ) ; <nl> + } <nl> + <nl> + / * * <nl> * Check the indent level of the children of the specified parent <nl> * expression . <nl> * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> index e9c3958 . . 7e1ff94 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> @ @ - 74 , 6 + 74 , 20 @ @ public class LineWrappingHandler { <nl> * @ param indentLevel Indentation all wrapped lines should use . <nl> * / <nl> public void checkIndentation ( DetailAST firstNode , DetailAST lastNode , int indentLevel ) { <nl> + checkIndentation ( firstNode , lastNode , indentLevel , - 1 , true ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks line wrapping into expressions and definitions . <nl> + * <nl> + * @ param firstNode First node to start examining . <nl> + * @ param lastNode Last node to examine inclusively . <nl> + * @ param indentLevel Indentation all wrapped lines should use . <nl> + * @ param startIndent Indentation first line before wrapped lines used . <nl> + * @ param ignoreFirstLine Test if first line ' s indentation should be checked or not . <nl> + * / <nl> + public void checkIndentation ( DetailAST firstNode , DetailAST lastNode , int indentLevel , <nl> + int startIndent , boolean ignoreFirstLine ) { <nl> final NavigableMap < Integer , DetailAST > firstNodesOnLines = collectFirstNodes ( firstNode , <nl> lastNode ) ; <nl> <nl> @ @ - 82 , 9 + 96 , 18 @ @ public class LineWrappingHandler { <nl> checkAnnotationIndentation ( firstLineNode , firstNodesOnLines , indentLevel ) ; <nl> } <nl> <nl> - / / First node should be removed because it was already checked before . <nl> - firstNodesOnLines . remove ( firstNodesOnLines . firstKey ( ) ) ; <nl> - final int firstNodeIndent = getLineStart ( firstLineNode ) ; <nl> + if ( ignoreFirstLine ) { <nl> + / / First node should be removed because it was already checked before . <nl> + firstNodesOnLines . remove ( firstNodesOnLines . firstKey ( ) ) ; <nl> + } <nl> + <nl> + final int firstNodeIndent ; <nl> + if ( startIndent = = - 1 ) { <nl> + firstNodeIndent = getLineStart ( firstLineNode ) ; <nl> + } <nl> + else { <nl> + firstNodeIndent = startIndent ; <nl> + } <nl> final int currentIndent = firstNodeIndent + indentLevel ; <nl> <nl> for ( DetailAST node : firstNodesOnLines . values ( ) ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java <nl> index 185f2fb . . 666e4b9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java <nl> @ @ - 57 , 9 + 57 , 59 @ @ public class MethodDefHandler extends BlockParentHandler { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Check the indentation level of the throws clause . <nl> + * / <nl> + private void checkThrows ( ) { <nl> + final DetailAST throwsAst = getMainAst ( ) . findFirstToken ( TokenTypes . LITERAL _ THROWS ) ; <nl> + <nl> + if ( throwsAst ! = null ) { <nl> + checkWrappingIndentation ( throwsAst , throwsAst . getNextSibling ( ) , getIndentCheck ( ) <nl> + . getThrowsIndent ( ) , getLineStart ( getMethodDefLineStart ( getMainAst ( ) ) ) , <nl> + ! isOnStartOfLine ( throwsAst ) ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Gets the start line of the method , excluding any annotations . This is required because the <nl> + * current { @ link TokenTypes # METHOD _ DEF } may not always be the start as seen in <nl> + * https : / / github . com / checkstyle / checkstyle / issues / 3145 . <nl> + * <nl> + * @ param mainAst <nl> + * The method definition ast . <nl> + * @ return The start column position of the method . <nl> + * / <nl> + private int getMethodDefLineStart ( DetailAST mainAst ) { <nl> + / / get first type position <nl> + int lineStart = mainAst . findFirstToken ( TokenTypes . IDENT ) . getLineNo ( ) ; <nl> + <nl> + / / check if there is a type before the indent <nl> + final DetailAST typeNode = mainAst . findFirstToken ( TokenTypes . TYPE ) ; <nl> + if ( typeNode ! = null ) { <nl> + lineStart = getFirstLine ( lineStart , typeNode ) ; <nl> + } <nl> + <nl> + / / check if there is a modifier before the type <nl> + for ( DetailAST node = mainAst . findFirstToken ( TokenTypes . MODIFIERS ) . getFirstChild ( ) ; <nl> + node ! = null ; <nl> + node = node . getNextSibling ( ) ) { <nl> + / / skip annotations as we check them else where as outside the method <nl> + if ( node . getType ( ) = = TokenTypes . ANNOTATION ) { <nl> + continue ; <nl> + } <nl> + <nl> + if ( node . getLineNo ( ) < lineStart ) { <nl> + lineStart = node . getLineNo ( ) ; <nl> + } <nl> + } <nl> + <nl> + return lineStart ; <nl> + } <nl> + <nl> @ Override <nl> public void checkIndentation ( ) { <nl> checkModifiers ( ) ; <nl> + checkThrows ( ) ; <nl> <nl> checkWrappingIndentation ( getMainAst ( ) , getMethodDefParamRightParen ( getMainAst ( ) ) ) ; <nl> if ( getLCurly ( ) = = null ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> index 1a70e8a . . 995b611 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> @ @ - 1378 , 6 + 1378 , 33 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testThrowsIndentationLevel2 ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( IndentationCheck . class ) ; <nl> + <nl> + checkConfig . addAttribute ( " basicOffset " , " 1 " ) ; <nl> + checkConfig . addAttribute ( " forceStrictCondition " , " true " ) ; <nl> + checkConfig . addAttribute ( " lineWrappingIndentation " , " 3 " ) ; <nl> + checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; <nl> + checkConfig . addAttribute ( " throwsIndent " , " 5 " ) ; <nl> + final String [ ] expected = { <nl> + " 7 : " + getCheckMessage ( MSG _ ERROR , " Exception " , 0 , 6 ) , <nl> + " 10 : " + getCheckMessage ( MSG _ ERROR , " NullPointerException " , 0 , 6 ) , <nl> + " 13 : " + getCheckMessage ( MSG _ ERROR , " throws " , 0 , 6 ) , <nl> + " 16 : " + getCheckMessage ( MSG _ ERROR , " throws " , 0 , 6 ) , <nl> + " 18 : " + getCheckMessage ( MSG _ ERROR , " throws " , 0 , 6 ) , <nl> + " 19 : " + getCheckMessage ( MSG _ ERROR , " Exception " , 0 , 6 ) , <nl> + " 22 : " + getCheckMessage ( MSG _ ERROR , " throws " , 0 , 6 ) , <nl> + " 23 : " + getCheckMessage ( MSG _ ERROR , " Exception " , 0 , 6 ) , <nl> + " 24 : " + getCheckMessage ( MSG _ ERROR , " NullPointerException " , 0 , 6 ) , <nl> + " 27 : " + getCheckMessage ( MSG _ ERROR , " throws " , 0 , 6 ) , <nl> + " 28 : " + getCheckMessage ( MSG _ ERROR , " Exception " , 0 , 6 ) , <nl> + " 31 : " + getCheckMessage ( MSG _ ERROR , " throws " , 0 , 6 ) , <nl> + " 37 : " + getCheckMessage ( MSG _ ERROR , " throws " , 0 , 6 ) , <nl> + } ; <nl> + verifyWarns ( checkConfig , getPath ( " InputInvalidThrowsIndent2 . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testCaseLevel ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( IndentationCheck . class ) ; <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidMethodIndent . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidMethodIndent . java <nl> index 724329e . . ec707eb 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidMethodIndent . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidMethodIndent . java <nl> @ @ - 161 , 7 + 161 , 7 @ @ public class InputInvalidMethodIndent { / / indent : 0 exp : 0 <nl> } / / indent : 4 exp : 4 <nl> <nl> private void myFunc ( ) / / indent : 4 exp : 4 <nl> - throws Exception / / indent : 6 exp : 6 <nl> + throws Exception / / indent : 8 exp : 8 <nl> { / / indent : 4 exp : 4 <nl> } / / indent : 4 exp : 4 <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidThrowsIndent . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidThrowsIndent . java <nl> index 33dd601 . . ad814a5 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidThrowsIndent . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidThrowsIndent . java <nl> @ @ - 22 , 14 + 22 , 25 @ @ public class InputInvalidThrowsIndent { / / indent : 0 exp : 0 <nl> <nl> / / This should pass for our reconfigured throwsIndent test . / / indent : 4 exp : 4 <nl> private void myFunc ( ) / / indent : 4 exp : 4 <nl> - throws Exception / / indent : 12 exp : 12 <nl> + throws Exception / / indent : 12 exp : > = 12 <nl> { / / indent : 4 exp : 4 <nl> } / / indent : 4 exp : 4 <nl> <nl> / / This is the out of the box default configuration , but should fail / / indent : 4 exp : 4 <nl> / / for our reconfigured test . / / indent : 4 exp : 4 <nl> private void myFunc2 ( ) / / indent : 4 exp : 4 <nl> - throws Exception / / indent : 8 exp : 8 <nl> + throws Exception / / indent : 12 exp : > = 12 <nl> + { / / indent : 4 exp : 4 <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + private void myFunc3 ( ) / / indent : 4 exp : 4 <nl> + throws / / indent : 12 exp : > = 12 <nl> + Exception / / indent : 12 exp : > = 12 <nl> + { / / indent : 4 exp : 4 <nl> + } / / indent : 4 exp : 4 <nl> + <nl> + private void myFunc4 ( ) throws / / indent : 4 exp : 4 <nl> + Exception / / indent : 16 exp : > = 12 <nl> { / / indent : 4 exp : 4 <nl> } / / indent : 4 exp : 4 <nl> } / / indent : 0 exp : 0 <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidThrowsIndent2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidThrowsIndent2 . java <nl> new file mode 100644 <nl> index 0000000 . . c4b4fda <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidThrowsIndent2 . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . indentation ; / / indent : 0 exp : 0 <nl> + <nl> + public abstract class InputInvalidThrowsIndent2 { / / indent : 0 exp : 0 <nl> + public void m1 ( ) throws Exception { / / indent : 1 exp : 1 <nl> + } / / indent : 1 exp : 1 <nl> + public void m2 ( ) throws / / indent : 1 exp : 1 <nl> + Exception { / / indent : 0 exp : 6 warn <nl> + } / / indent : 1 exp : 1 <nl> + public void m3 ( ) throws Exception , / / indent : 1 exp : 1 <nl> + NullPointerException { / / indent : 0 exp : 6 warn <nl> + } / / indent : 1 exp : 1 <nl> + public void m4 ( ) / / indent : 1 exp : 1 <nl> + throws Exception { / / indent : 0 exp : 6 warn <nl> + } / / indent : 1 exp : 1 <nl> + public abstract void m5 ( ) / / indent : 1 exp : 1 <nl> + throws Exception ; / / indent : 0 exp : 6 warn <nl> + public void m6 ( ) / / indent : 1 exp : 1 <nl> + throws / / indent : 0 exp : 6 warn <nl> + Exception { / / indent : 0 exp : 6 warn <nl> + } / / indent : 1 exp : 1 <nl> + public void m7 ( ) / / indent : 1 exp : 1 <nl> + throws / / indent : 0 exp : 6 warn <nl> + Exception , / / indent : 0 exp : 6 warn <nl> + NullPointerException { / / indent : 0 exp : 6 warn <nl> + } / / indent : 1 exp : 1 <nl> + double [ ] m8 ( ) / / indent : 1 exp : 1 <nl> + throws / / indent : 0 exp : 6 warn <nl> + Exception { return null ; / / indent : 0 exp : 6 warn <nl> + } / / indent : 1 exp : 1 <nl> + public InputInvalidThrowsIndent2 ( ) / / indent : 1 exp : 1 <nl> + throws Exception { / / indent : 0 exp : 6 warn <nl> + } / / indent : 1 exp : 1 <nl> + @ TestAnnotation / / indent : 1 exp : 1 <nl> + public / / indent : 1 exp : 1 <nl> + static / / indent : 4 exp : 4 <nl> + void m9 ( ) / / indent : 4 exp : 4 <nl> + throws Exception { } / / indent : 0 exp : 6 warn <nl> + } / / indent : 0 exp : 0 <nl> + <nl> + @ interface TestAnnotation { } / / indent : 0 exp : 0 <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index e47f2fe . . 718799c 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 460 , 7 + 460 , 7 @ @ 
 < version > $ { maven . checkstyle . plugin . version } < / version > 
 < dependencies > 
 < dependency > 
 - < groupId > com . github . sevntu . checkstyle < / groupId > 
 + < groupId > com . github . sevntu - checkstyle < / groupId > 
 < artifactId > sevntu - checkstyle - maven - plugin < / artifactId > 
 < version > $ { maven . sevntu . checkstyle . plugin . version } < / version > 
 < / dependency >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java 
 index fa9628a . . 9c01cf8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / AbstractExpressionHandler . java 
 @ @ - 215 , 8 + 215 , 18 @ @ public abstract class AbstractExpressionHandler { 
 * @ return the start of the line for the given expression 
 * / 
 protected final int getLineStart ( DetailAST ast ) { 
 - final String line = indentCheck . getLine ( ast . getLineNo ( ) - 1 ) ; 
 - return getLineStart ( line ) ; 
 + return getLineStart ( ast . getLineNo ( ) ) ; 
 + } 
 + 
 + / * * 
 + * Get the start of the line for the given line number . 
 + * 
 + * @ param lineNo the line number to find the start for 
 + * 
 + * @ return the start of the line for the given expression 
 + * / 
 + protected final int getLineStart ( int lineNo ) { 
 + return getLineStart ( indentCheck . getLine ( lineNo - 1 ) ) ; 
 } 
 
 / * * 
 @ @ - 370 , 6 + 380 , 22 @ @ public abstract class AbstractExpressionHandler { 
 } 
 
 / * * 
 + * Checks indentation on wrapped lines between and including 
 + * { @ code firstNode } and { @ code lastNode } . 
 + * 
 + * @ param firstNode First node to start examining . 
 + * @ param lastNode Last node to examine inclusively . 
 + * @ param wrappedIndentLevel Indentation all wrapped lines should use . 
 + * @ param startIndent Indentation first line before wrapped lines used . 
 + * @ param ignoreFirstLine Test if first line ' s indentation should be checked or not . 
 + * / 
 + protected void checkWrappingIndentation ( DetailAST firstNode , DetailAST lastNode , 
 + int wrappedIndentLevel , int startIndent , boolean ignoreFirstLine ) { 
 + indentCheck . getLineWrappingHandler ( ) . checkIndentation ( firstNode , lastNode , 
 + wrappedIndentLevel , startIndent , ignoreFirstLine ) ; 
 + } 
 + 
 + / * * 
 * Check the indent level of the children of the specified parent 
 * expression . 
 * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 index e9c3958 . . 7e1ff94 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 @ @ - 74 , 6 + 74 , 20 @ @ public class LineWrappingHandler { 
 * @ param indentLevel Indentation all wrapped lines should use . 
 * / 
 public void checkIndentation ( DetailAST firstNode , DetailAST lastNode , int indentLevel ) { 
 + checkIndentation ( firstNode , lastNode , indentLevel , - 1 , true ) ; 
 + } 
 + 
 + / * * 
 + * Checks line wrapping into expressions and definitions . 
 + * 
 + * @ param firstNode First node to start examining . 
 + * @ param lastNode Last node to examine inclusively . 
 + * @ param indentLevel Indentation all wrapped lines should use . 
 + * @ param startIndent Indentation first line before wrapped lines used . 
 + * @ param ignoreFirstLine Test if first line ' s indentation should be checked or not . 
 + * / 
 + public void checkIndentation ( DetailAST firstNode , DetailAST lastNode , int indentLevel , 
 + int startIndent , boolean ignoreFirstLine ) { 
 final NavigableMap < Integer , DetailAST > firstNodesOnLines = collectFirstNodes ( firstNode , 
 lastNode ) ; 
 
 @ @ - 82 , 9 + 96 , 18 @ @ public class LineWrappingHandler { 
 checkAnnotationIndentation ( firstLineNode , firstNodesOnLines , indentLevel ) ; 
 } 
 
 - / / First node should be removed because it was already checked before . 
 - firstNodesOnLines . remove ( firstNodesOnLines . firstKey ( ) ) ; 
 - final int firstNodeIndent = getLineStart ( firstLineNode ) ; 
 + if ( ignoreFirstLine ) { 
 + / / First node should be removed because it was already checked before . 
 + firstNodesOnLines . remove ( firstNodesOnLines . firstKey ( ) ) ; 
 + } 
 + 
 + final int firstNodeIndent ; 
 + if ( startIndent = = - 1 ) { 
 + firstNodeIndent = getLineStart ( firstLineNode ) ; 
 + } 
 + else { 
 + firstNodeIndent = startIndent ; 
 + } 
 final int currentIndent = firstNodeIndent + indentLevel ; 
 
 for ( DetailAST node : firstNodesOnLines . values ( ) ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java 
 index 185f2fb . . 666e4b9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / MethodDefHandler . java 
 @ @ - 57 , 9 + 57 , 59 @ @ public class MethodDefHandler extends BlockParentHandler { 
 } 
 } 
 
 + / * * 
 + * Check the indentation level of the throws clause . 
 + * / 
 + private void checkThrows ( ) { 
 + final DetailAST throwsAst = getMainAst ( ) . findFirstToken ( TokenTypes . LITERAL _ THROWS ) ; 
 + 
 + if ( throwsAst ! = null ) { 
 + checkWrappingIndentation ( throwsAst , throwsAst . getNextSibling ( ) , getIndentCheck ( ) 
 + . getThrowsIndent ( ) , getLineStart ( getMethodDefLineStart ( getMainAst ( ) ) ) , 
 + ! isOnStartOfLine ( throwsAst ) ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Gets the start line of the method , excluding any annotations . This is required because the 
 + * current { @ link TokenTypes # METHOD _ DEF } may not always be the start as seen in 
 + * https : / / github . com / checkstyle / checkstyle / issues / 3145 . 
 + * 
 + * @ param mainAst 
 + * The method definition ast . 
 + * @ return The start column position of the method . 
 + * / 
 + private int getMethodDefLineStart ( DetailAST mainAst ) { 
 + / / get first type position 
 + int lineStart = mainAst . findFirstToken ( TokenTypes . IDENT ) . getLineNo ( ) ; 
 + 
 + / / check if there is a type before the indent 
 + final DetailAST typeNode = mainAst . findFirstToken ( TokenTypes . TYPE ) ; 
 + if ( typeNode ! = null ) { 
 + lineStart = getFirstLine ( lineStart , typeNode ) ; 
 + } 
 + 
 + / / check if there is a modifier before the type 
 + for ( DetailAST node = mainAst . findFirstToken ( TokenTypes . MODIFIERS ) . getFirstChild ( ) ; 
 + node ! = null ; 
 + node = node . getNextSibling ( ) ) { 
 + / / skip annotations as we check them else where as outside the method 
 + if ( node . getType ( ) = = TokenTypes . ANNOTATION ) { 
 + continue ; 
 + } 
 + 
 + if ( node . getLineNo ( ) < lineStart ) { 
 + lineStart = node . getLineNo ( ) ; 
 + } 
 + } 
 + 
 + return lineStart ; 
 + } 
 + 
 @ Override 
 public void checkIndentation ( ) { 
 checkModifiers ( ) ; 
 + checkThrows ( ) ; 
 
 checkWrappingIndentation ( getMainAst ( ) , getMethodDefParamRightParen ( getMainAst ( ) ) ) ; 
 if ( getLCurly ( ) = = null ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 index 1a70e8a . . 995b611 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 @ @ - 1378 , 6 + 1378 , 33 @ @ public class IndentationCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public void testThrowsIndentationLevel2 ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( IndentationCheck . class ) ; 
 + 
 + checkConfig . addAttribute ( " basicOffset " , " 1 " ) ; 
 + checkConfig . addAttribute ( " forceStrictCondition " , " true " ) ; 
 + checkConfig . addAttribute ( " lineWrappingIndentation " , " 3 " ) ; 
 + checkConfig . addAttribute ( " tabWidth " , " 4 " ) ; 
 + checkConfig . addAttribute ( " throwsIndent " , " 5 " ) ; 
 + final String [ ] expected = { 
 + " 7 : " + getCheckMessage ( MSG _ ERROR , " Exception " , 0 , 6 ) , 
 + " 10 : " + getCheckMessage ( MSG _ ERROR , " NullPointerException " , 0 , 6 ) , 
 + " 13 : " + getCheckMessage ( MSG _ ERROR , " throws " , 0 , 6 ) , 
 + " 16 : " + getCheckMessage ( MSG _ ERROR , " throws " , 0 , 6 ) , 
 + " 18 : " + getCheckMessage ( MSG _ ERROR , " throws " , 0 , 6 ) , 
 + " 19 : " + getCheckMessage ( MSG _ ERROR , " Exception " , 0 , 6 ) , 
 + " 22 : " + getCheckMessage ( MSG _ ERROR , " throws " , 0 , 6 ) , 
 + " 23 : " + getCheckMessage ( MSG _ ERROR , " Exception " , 0 , 6 ) , 
 + " 24 : " + getCheckMessage ( MSG _ ERROR , " NullPointerException " , 0 , 6 ) , 
 + " 27 : " + getCheckMessage ( MSG _ ERROR , " throws " , 0 , 6 ) , 
 + " 28 : " + getCheckMessage ( MSG _ ERROR , " Exception " , 0 , 6 ) , 
 + " 31 : " + getCheckMessage ( MSG _ ERROR , " throws " , 0 , 6 ) , 
 + " 37 : " + getCheckMessage ( MSG _ ERROR , " throws " , 0 , 6 ) , 
 + } ; 
 + verifyWarns ( checkConfig , getPath ( " InputInvalidThrowsIndent2 . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testCaseLevel ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( IndentationCheck . class ) ; 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidMethodIndent . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidMethodIndent . java 
 index 724329e . . ec707eb 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidMethodIndent . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidMethodIndent . java 
 @ @ - 161 , 7 + 161 , 7 @ @ public class InputInvalidMethodIndent { / / indent : 0 exp : 0 
 } / / indent : 4 exp : 4 
 
 private void myFunc ( ) / / indent : 4 exp : 4 
 - throws Exception / / indent : 6 exp : 6 
 + throws Exception / / indent : 8 exp : 8 
 { / / indent : 4 exp : 4 
 } / / indent : 4 exp : 4 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidThrowsIndent . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidThrowsIndent . java 
 index 33dd601 . . ad814a5 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidThrowsIndent . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidThrowsIndent . java 
 @ @ - 22 , 14 + 22 , 25 @ @ public class InputInvalidThrowsIndent { / / indent : 0 exp : 0 
 
 / / This should pass for our reconfigured throwsIndent test . / / indent : 4 exp : 4 
 private void myFunc ( ) / / indent : 4 exp : 4 
 - throws Exception / / indent : 12 exp : 12 
 + throws Exception / / indent : 12 exp : > = 12 
 { / / indent : 4 exp : 4 
 } / / indent : 4 exp : 4 
 
 / / This is the out of the box default configuration , but should fail / / indent : 4 exp : 4 
 / / for our reconfigured test . / / indent : 4 exp : 4 
 private void myFunc2 ( ) / / indent : 4 exp : 4 
 - throws Exception / / indent : 8 exp : 8 
 + throws Exception / / indent : 12 exp : > = 12 
 + { / / indent : 4 exp : 4 
 + } / / indent : 4 exp : 4 
 + 
 + private void myFunc3 ( ) / / indent : 4 exp : 4 
 + throws / / indent : 12 exp : > = 12 
 + Exception / / indent : 12 exp : > = 12 
 + { / / indent : 4 exp : 4 
 + } / / indent : 4 exp : 4 
 + 
 + private void myFunc4 ( ) throws / / indent : 4 exp : 4 
 + Exception / / indent : 16 exp : > = 12 
 { / / indent : 4 exp : 4 
 } / / indent : 4 exp : 4 
 } / / indent : 0 exp : 0 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidThrowsIndent2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidThrowsIndent2 . java 
 new file mode 100644 
 index 0000000 . . c4b4fda 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / InputInvalidThrowsIndent2 . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . indentation ; / / indent : 0 exp : 0 
 + 
 + public abstract class InputInvalidThrowsIndent2 { / / indent : 0 exp : 0 
 + public void m1 ( ) throws Exception { / / indent : 1 exp : 1 
 + } / / indent : 1 exp : 1 
 + public void m2 ( ) throws / / indent : 1 exp : 1 
 + Exception { / / indent : 0 exp : 6 warn 
 + } / / indent : 1 exp : 1 
 + public void m3 ( ) throws Exception , / / indent : 1 exp : 1 
 + NullPointerException { / / indent : 0 exp : 6 warn 
 + } / / indent : 1 exp : 1 
 + public void m4 ( ) / / indent : 1 exp : 1 
 + throws Exception { / / indent : 0 exp : 6 warn 
 + } / / indent : 1 exp : 1 
 + public abstract void m5 ( ) / / indent : 1 exp : 1 
 + throws Exception ; / / indent : 0 exp : 6 warn 
 + public void m6 ( ) / / indent : 1 exp : 1 
 + throws / / indent : 0 exp : 6 warn 
 + Exception { / / indent : 0 exp : 6 warn 
 + } / / indent : 1 exp : 1 
 + public void m7 ( ) / / indent : 1 exp : 1 
 + throws / / indent : 0 exp : 6 warn 
 + Exception , / / indent : 0 exp : 6 warn 
 + NullPointerException { / / indent : 0 exp : 6 warn 
 + } / / indent : 1 exp : 1 
 + double [ ] m8 ( ) / / indent : 1 exp : 1 
 + throws / / indent : 0 exp : 6 warn 
 + Exception { return null ; / / indent : 0 exp : 6 warn 
 + } / / indent : 1 exp : 1 
 + public InputInvalidThrowsIndent2 ( ) / / indent : 1 exp : 1 
 + throws Exception { / / indent : 0 exp : 6 warn 
 + } / / indent : 1 exp : 1 
 + @ TestAnnotation / / indent : 1 exp : 1 
 + public / / indent : 1 exp : 1 
 + static / / indent : 4 exp : 4 
 + void m9 ( ) / / indent : 4 exp : 4 
 + throws Exception { } / / indent : 0 exp : 6 warn 
 + } / / indent : 0 exp : 0 
 + 
 + @ interface TestAnnotation { } / / indent : 0 exp : 0 
 \ No newline at end of file
