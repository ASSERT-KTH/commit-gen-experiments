BLEU SCORE: 0.037954847898457066

TEST MSG: Issue # 4940 : fix MultipleReturnPointsPerMethod idea violation
GENERATED MSG: Update Maven PMD Plugin to 3 . 5 . # 1300

TEST DIFF (one line): diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index 87304f2 . . bbade63 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 1484 , 9 + 1484 , 9 @ @ isolated classes and we cannot put them to separate package as it will affect us <nl> < inspection _ tool class = " MultipleInjectedConstructorsForClass " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " MultipleMethodDesignatorsInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " MultipleRepositoryUrls " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> - < inspection _ tool class = " MultipleReturnPointsPerMethod " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > <nl> - < option name = " ignoreGuardClauses " value = " false " / > <nl> - < option name = " ignoreEqualsMethod " value = " false " / > <nl> + < inspection _ tool class = " MultipleReturnPointsPerMethod " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > <nl> + < option name = " ignoreGuardClauses " value = " true " / > <nl> + < option name = " ignoreEqualsMethod " value = " true " / > <nl> < option name = " m _ limit " value = " 1 " / > <nl> < / inspection _ tool > <nl> < inspection _ tool class = " MultipleTopLevelClassesInFile " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> @ @ - 2145 , 6 + 2145 , 8 @ @ isolated classes and we cannot put them to separate package as it will affect us <nl> < option value = " UseOfPropertiesAsHashtable " / > <nl> < ! - - till # 4861 , # 4862 , # 4863 , # 4864 , # 4866 - - > <nl> < option value = " ThisEscapedInObjectConstruction " / > <nl> + < ! - - it will makes code too complicated in some cases - - > <nl> + < option value = " MultipleReturnPointsPerMethod " / > <nl> < / list > <nl> < / option > <nl> < / inspection _ tool > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> index 34f2f33 . . de84f2d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> @ @ - 487 , 7 + 487 , 8 @ @ public final class ConfigurationLoader { <nl> fragment = props . resolve ( propertyName ) ; <nl> if ( fragment = = null ) { <nl> if ( defaultValue ! = null ) { <nl> - return defaultValue ; <nl> + sb . replace ( 0 , sb . length ( ) , defaultValue ) ; <nl> + break ; <nl> } <nl> throw new CheckstyleException ( <nl> " Property $ { " + propertyName + " } has not been set " ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> index e6390b0 . . 61468a2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> @ @ - 154 , 11 + 154 , 7 @ @ public abstract class AbstractSuperCheck <nl> & & sibling . getType ( ) = = TokenTypes . TYPE _ ARGUMENTS ) { <nl> sibling = sibling . getNextSibling ( ) ; <nl> } <nl> - if ( sibling = = null ) { <nl> - return true ; <nl> - } <nl> - final String name = sibling . getText ( ) ; <nl> - return ! getMethodName ( ) . equals ( name ) ; <nl> + return sibling = = null | | ! getMethodName ( ) . equals ( sibling . getText ( ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> index beb5622 . . ed7ec25 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> @ @ - 605 , 12 + 605 , 14 @ @ public class EqualsAvoidNullCheck extends AbstractCheck { <nl> * @ return true if this FieldFrame contains instance field field . <nl> * / <nl> public DetailAST findField ( String name ) { <nl> + DetailAST resultField = null ; <nl> for ( DetailAST field : fields ) { <nl> if ( getFieldName ( field ) . equals ( name ) ) { <nl> - return field ; <nl> + resultField = field ; <nl> + break ; <nl> } <nl> } <nl> - return null ; <nl> + return resultField ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> index 2f46c31 . . db3ced8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java <nl> @ @ - 192 , 16 + 192 , 18 @ @ public class ExplicitInitializationCheck extends AbstractCheck { <nl> * / <nl> private static boolean isZero ( DetailAST expr ) { <nl> final int type = expr . getType ( ) ; <nl> + final boolean isZero ; <nl> switch ( type ) { <nl> case TokenTypes . NUM _ FLOAT : <nl> case TokenTypes . NUM _ DOUBLE : <nl> case TokenTypes . NUM _ INT : <nl> case TokenTypes . NUM _ LONG : <nl> final String text = expr . getText ( ) ; <nl> - return Double . compare ( <nl> - CheckUtils . parseDouble ( text , type ) , 0 . 0 ) = = 0 ; <nl> + isZero = Double . compare ( CheckUtils . parseDouble ( text , type ) , 0 . 0 ) = = 0 ; <nl> + break ; <nl> default : <nl> - return false ; <nl> + isZero = false ; <nl> } <nl> + return isZero ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> index 0a4236c . . 9064c03 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> @ @ - 371 , 19 + 371 , 15 @ @ public class FallThroughCheck extends AbstractCheck { <nl> * @ param lineNo The line number in the file . <nl> * @ return True if a match was found inside a comment . <nl> * / <nl> - private boolean matchesComment ( Pattern pattern , String line , int lineNo <nl> - ) { <nl> + private boolean matchesComment ( Pattern pattern , String line , int lineNo ) { <nl> final Matcher matcher = pattern . matcher ( line ) ; <nl> + boolean matches = false ; <nl> <nl> - final boolean hit = matcher . find ( ) ; <nl> - <nl> - if ( hit ) { <nl> - final int startMatch = matcher . start ( ) ; <nl> + if ( matcher . find ( ) ) { <nl> / / - 1 because it returns the char position beyond the match <nl> - final int endMatch = matcher . end ( ) - 1 ; <nl> - return getFileContents ( ) . hasIntersectionWithComment ( lineNo , <nl> - startMatch , lineNo , endMatch ) ; <nl> + matches = getFileContents ( ) . hasIntersectionWithComment ( lineNo , matcher . start ( ) , <nl> + lineNo , matcher . end ( ) - 1 ) ; <nl> } <nl> - return false ; <nl> + return matches ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> index c07eabc . . e41d7ba 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> @ @ - 402 , 16 + 402 , 17 @ @ public class HiddenFieldCheck <nl> * ignoreSetter is true and ast is the parameter of a setter method . <nl> * / <nl> private boolean isIgnoredSetterParam ( DetailAST ast , String name ) { <nl> + boolean isIgnoredSetterParam = false ; <nl> if ( ignoreSetter & & ast . getType ( ) = = TokenTypes . PARAMETER _ DEF ) { <nl> final DetailAST parametersAST = ast . getParent ( ) ; <nl> final DetailAST methodAST = parametersAST . getParent ( ) ; <nl> if ( parametersAST . getChildCount ( ) = = 1 <nl> & & methodAST . getType ( ) = = TokenTypes . METHOD _ DEF <nl> & & isSetterMethod ( methodAST , name ) ) { <nl> - return true ; <nl> + isIgnoredSetterParam = true ; <nl> } <nl> } <nl> - return false ; <nl> + return isIgnoredSetterParam ; <nl> } <nl> <nl> / * * <nl> @ @ - 653 , 13 + 654 , 15 @ @ public class HiddenFieldCheck <nl> * / <nl> private boolean isEmbeddedIn ( String classOrEnumName ) { <nl> FieldFrame currentFrame = this ; <nl> + boolean isEmbeddedIn = false ; <nl> while ( currentFrame ! = null ) { <nl> if ( Objects . equals ( currentFrame . frameName , classOrEnumName ) ) { <nl> - return true ; <nl> + isEmbeddedIn = true ; <nl> + break ; <nl> } <nl> currentFrame = currentFrame . parent ; <nl> } <nl> - return false ; <nl> + return isEmbeddedIn ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> index f809edb . . b6cbcc7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java <nl> @ @ - 326 , 6 + 326 , 7 @ @ public class IllegalInstantiationCheck <nl> * @ return true if type is standard <nl> * / <nl> private boolean isStandardClass ( String className , String illegal ) { <nl> + boolean isStandardCalss = false ; <nl> / / class from java . lang <nl> if ( illegal . length ( ) - JAVA _ LANG . length ( ) = = className . length ( ) <nl> & & illegal . endsWith ( className ) <nl> @ @ - 340 , 10 + 341 , 10 @ @ public class IllegalInstantiationCheck <nl> final boolean isSamePackage = isSamePackage ( className ) ; <nl> <nl> if ( ! isSameFile & & ! isSamePackage ) { <nl> - return true ; <nl> + isStandardCalss = true ; <nl> } <nl> } <nl> - return false ; <nl> + return isStandardCalss ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> index 3004816 . . 6812b37 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> @ @ - 152 , 15 + 152 , 17 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { <nl> * token type in { @ link # ignoreOccurrenceContext } . <nl> * / <nl> private boolean isInIgnoreOccurrenceContext ( DetailAST ast ) { <nl> + boolean isInIgnoreOccurrenceContext = false ; <nl> for ( DetailAST token = ast ; <nl> token . getParent ( ) ! = null ; <nl> token = token . getParent ( ) ) { <nl> final int type = token . getType ( ) ; <nl> if ( ignoreOccurrenceContext . get ( type ) ) { <nl> - return true ; <nl> + isInIgnoreOccurrenceContext = true ; <nl> + break ; <nl> } <nl> } <nl> - return false ; <nl> + return isInIgnoreOccurrenceContext ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / ArrayInitHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / ArrayInitHandler . java <nl> index 23c55bc . . e21d510 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / ArrayInitHandler . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / ArrayInitHandler . java <nl> @ @ - 45 , 14 + 45 , 16 @ @ public class ArrayInitHandler extends BlockParentHandler { <nl> protected IndentLevel getIndentImpl ( ) { <nl> final DetailAST parentAST = getMainAst ( ) . getParent ( ) ; <nl> final int type = parentAST . getType ( ) ; <nl> + final IndentLevel indentLevel ; <nl> if ( type = = TokenTypes . LITERAL _ NEW | | type = = TokenTypes . ASSIGN ) { <nl> / / note : assumes new or assignment is line to align with <nl> - return new IndentLevel ( getLineStart ( parentAST ) ) ; <nl> + indentLevel = new IndentLevel ( getLineStart ( parentAST ) ) ; <nl> } <nl> else { <nl> / / at this point getParent ( ) is instance of BlockParentHandler <nl> - return ( ( BlockParentHandler ) getParent ( ) ) . getChildrenExpectedIndent ( ) ; <nl> + indentLevel = ( ( BlockParentHandler ) getParent ( ) ) . getChildrenExpectedIndent ( ) ; <nl> } <nl> + return indentLevel ; <nl> } <nl> <nl> @ Override <nl> @ @ - 126 , 11 + 128 , 9 @ @ public class ArrayInitHandler extends BlockParentHandler { <nl> } <nl> <nl> if ( realColumnNo = = lineLength ) { <nl> - return - 1 ; <nl> - } <nl> - else { <nl> - return realColumnNo ; <nl> + realColumnNo = - 1 ; <nl> } <nl> + return realColumnNo ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> index 1b891aa . . f8af0a7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> @ @ - 59 , 12 + 59 , 11 @ @ public class LineWrappingHandler { <nl> * @ noinspection BooleanParameter <nl> * / <nl> public static LineWrappingOptions ofBoolean ( boolean val ) { <nl> + LineWrappingOptions option = NONE ; <nl> if ( val ) { <nl> - return IGNORE _ FIRST _ LINE ; <nl> - } <nl> - else { <nl> - return NONE ; <nl> + option = IGNORE _ FIRST _ LINE ; <nl> } <nl> + return option ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> index 58a6697 . . 0da1de8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java <nl> @ @ - 342 , 6 + 342 , 7 @ @ public class JavadocStyleCheck <nl> * @ param ast the node with the Javadoc <nl> * @ param comment the { @ code TextBlock } which represents <nl> * the Javadoc comment . <nl> + * @ noinspection MethodWithMultipleReturnPoints <nl> * / <nl> / / - @ cs [ ReturnCount ] Too complex to break apart . <nl> private void checkHtmlTags ( final DetailAST ast , final TextBlock comment ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> index 110a929 . . e019fda 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java <nl> @ @ - 136 , 12 + 136 , 14 @ @ public class IndentationCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> private static int getLineStart ( String line , final int tabWidth ) { <nl> + int lineStart = 0 ; <nl> for ( int index = 0 ; index < line . length ( ) ; + + index ) { <nl> if ( ! Character . isWhitespace ( line . charAt ( index ) ) ) { <nl> - return CommonUtils . lengthExpandedTabs ( line , index , tabWidth ) ; <nl> + lineStart = CommonUtils . lengthExpandedTabs ( line , index , tabWidth ) ; <nl> + break ; <nl> } <nl> } <nl> - return 0 ; <nl> + return lineStart ; <nl> } <nl> <nl> private void verifyWarns ( Configuration config , String filePath ,
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 23c8d67 . . b1e3c91 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 22 , 7 + 22 , 7 @ @ <nl> <nl> < groupId > com . puppycrawl . tools < / groupId > <nl> < artifactId > checkstyle < / artifactId > <nl> - < version > 6 . 8 - SNAPSHOT < / version > <nl> + < version > 6 . 8 < / version > <nl> < packaging > jar < / packaging > <nl> <nl> < name > checkstyle < / name >

TEST DIFF:
diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index 87304f2 . . bbade63 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 1484 , 9 + 1484 , 9 @ @ isolated classes and we cannot put them to separate package as it will affect us 
 < inspection _ tool class = " MultipleInjectedConstructorsForClass " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " MultipleMethodDesignatorsInspection " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " MultipleRepositoryUrls " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 - < inspection _ tool class = " MultipleReturnPointsPerMethod " enabled = " false " level = " ERROR " enabled _ by _ default = " false " > 
 - < option name = " ignoreGuardClauses " value = " false " / > 
 - < option name = " ignoreEqualsMethod " value = " false " / > 
 + < inspection _ tool class = " MultipleReturnPointsPerMethod " enabled = " true " level = " ERROR " enabled _ by _ default = " true " > 
 + < option name = " ignoreGuardClauses " value = " true " / > 
 + < option name = " ignoreEqualsMethod " value = " true " / > 
 < option name = " m _ limit " value = " 1 " / > 
 < / inspection _ tool > 
 < inspection _ tool class = " MultipleTopLevelClassesInFile " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 @ @ - 2145 , 6 + 2145 , 8 @ @ isolated classes and we cannot put them to separate package as it will affect us 
 < option value = " UseOfPropertiesAsHashtable " / > 
 < ! - - till # 4861 , # 4862 , # 4863 , # 4864 , # 4866 - - > 
 < option value = " ThisEscapedInObjectConstruction " / > 
 + < ! - - it will makes code too complicated in some cases - - > 
 + < option value = " MultipleReturnPointsPerMethod " / > 
 < / list > 
 < / option > 
 < / inspection _ tool > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 index 34f2f33 . . de84f2d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 @ @ - 487 , 7 + 487 , 8 @ @ public final class ConfigurationLoader { 
 fragment = props . resolve ( propertyName ) ; 
 if ( fragment = = null ) { 
 if ( defaultValue ! = null ) { 
 - return defaultValue ; 
 + sb . replace ( 0 , sb . length ( ) , defaultValue ) ; 
 + break ; 
 } 
 throw new CheckstyleException ( 
 " Property $ { " + propertyName + " } has not been set " ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 index e6390b0 . . 61468a2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 @ @ - 154 , 11 + 154 , 7 @ @ public abstract class AbstractSuperCheck 
 & & sibling . getType ( ) = = TokenTypes . TYPE _ ARGUMENTS ) { 
 sibling = sibling . getNextSibling ( ) ; 
 } 
 - if ( sibling = = null ) { 
 - return true ; 
 - } 
 - final String name = sibling . getText ( ) ; 
 - return ! getMethodName ( ) . equals ( name ) ; 
 + return sibling = = null | | ! getMethodName ( ) . equals ( sibling . getText ( ) ) ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 index beb5622 . . ed7ec25 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 @ @ - 605 , 12 + 605 , 14 @ @ public class EqualsAvoidNullCheck extends AbstractCheck { 
 * @ return true if this FieldFrame contains instance field field . 
 * / 
 public DetailAST findField ( String name ) { 
 + DetailAST resultField = null ; 
 for ( DetailAST field : fields ) { 
 if ( getFieldName ( field ) . equals ( name ) ) { 
 - return field ; 
 + resultField = field ; 
 + break ; 
 } 
 } 
 - return null ; 
 + return resultField ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 index 2f46c31 . . db3ced8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheck . java 
 @ @ - 192 , 16 + 192 , 18 @ @ public class ExplicitInitializationCheck extends AbstractCheck { 
 * / 
 private static boolean isZero ( DetailAST expr ) { 
 final int type = expr . getType ( ) ; 
 + final boolean isZero ; 
 switch ( type ) { 
 case TokenTypes . NUM _ FLOAT : 
 case TokenTypes . NUM _ DOUBLE : 
 case TokenTypes . NUM _ INT : 
 case TokenTypes . NUM _ LONG : 
 final String text = expr . getText ( ) ; 
 - return Double . compare ( 
 - CheckUtils . parseDouble ( text , type ) , 0 . 0 ) = = 0 ; 
 + isZero = Double . compare ( CheckUtils . parseDouble ( text , type ) , 0 . 0 ) = = 0 ; 
 + break ; 
 default : 
 - return false ; 
 + isZero = false ; 
 } 
 + return isZero ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 index 0a4236c . . 9064c03 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 @ @ - 371 , 19 + 371 , 15 @ @ public class FallThroughCheck extends AbstractCheck { 
 * @ param lineNo The line number in the file . 
 * @ return True if a match was found inside a comment . 
 * / 
 - private boolean matchesComment ( Pattern pattern , String line , int lineNo 
 - ) { 
 + private boolean matchesComment ( Pattern pattern , String line , int lineNo ) { 
 final Matcher matcher = pattern . matcher ( line ) ; 
 + boolean matches = false ; 
 
 - final boolean hit = matcher . find ( ) ; 
 - 
 - if ( hit ) { 
 - final int startMatch = matcher . start ( ) ; 
 + if ( matcher . find ( ) ) { 
 / / - 1 because it returns the char position beyond the match 
 - final int endMatch = matcher . end ( ) - 1 ; 
 - return getFileContents ( ) . hasIntersectionWithComment ( lineNo , 
 - startMatch , lineNo , endMatch ) ; 
 + matches = getFileContents ( ) . hasIntersectionWithComment ( lineNo , matcher . start ( ) , 
 + lineNo , matcher . end ( ) - 1 ) ; 
 } 
 - return false ; 
 + return matches ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 index c07eabc . . e41d7ba 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 @ @ - 402 , 16 + 402 , 17 @ @ public class HiddenFieldCheck 
 * ignoreSetter is true and ast is the parameter of a setter method . 
 * / 
 private boolean isIgnoredSetterParam ( DetailAST ast , String name ) { 
 + boolean isIgnoredSetterParam = false ; 
 if ( ignoreSetter & & ast . getType ( ) = = TokenTypes . PARAMETER _ DEF ) { 
 final DetailAST parametersAST = ast . getParent ( ) ; 
 final DetailAST methodAST = parametersAST . getParent ( ) ; 
 if ( parametersAST . getChildCount ( ) = = 1 
 & & methodAST . getType ( ) = = TokenTypes . METHOD _ DEF 
 & & isSetterMethod ( methodAST , name ) ) { 
 - return true ; 
 + isIgnoredSetterParam = true ; 
 } 
 } 
 - return false ; 
 + return isIgnoredSetterParam ; 
 } 
 
 / * * 
 @ @ - 653 , 13 + 654 , 15 @ @ public class HiddenFieldCheck 
 * / 
 private boolean isEmbeddedIn ( String classOrEnumName ) { 
 FieldFrame currentFrame = this ; 
 + boolean isEmbeddedIn = false ; 
 while ( currentFrame ! = null ) { 
 if ( Objects . equals ( currentFrame . frameName , classOrEnumName ) ) { 
 - return true ; 
 + isEmbeddedIn = true ; 
 + break ; 
 } 
 currentFrame = currentFrame . parent ; 
 } 
 - return false ; 
 + return isEmbeddedIn ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 index f809edb . . b6cbcc7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheck . java 
 @ @ - 326 , 6 + 326 , 7 @ @ public class IllegalInstantiationCheck 
 * @ return true if type is standard 
 * / 
 private boolean isStandardClass ( String className , String illegal ) { 
 + boolean isStandardCalss = false ; 
 / / class from java . lang 
 if ( illegal . length ( ) - JAVA _ LANG . length ( ) = = className . length ( ) 
 & & illegal . endsWith ( className ) 
 @ @ - 340 , 10 + 341 , 10 @ @ public class IllegalInstantiationCheck 
 final boolean isSamePackage = isSamePackage ( className ) ; 
 
 if ( ! isSameFile & & ! isSamePackage ) { 
 - return true ; 
 + isStandardCalss = true ; 
 } 
 } 
 - return false ; 
 + return isStandardCalss ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 index 3004816 . . 6812b37 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 @ @ - 152 , 15 + 152 , 17 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { 
 * token type in { @ link # ignoreOccurrenceContext } . 
 * / 
 private boolean isInIgnoreOccurrenceContext ( DetailAST ast ) { 
 + boolean isInIgnoreOccurrenceContext = false ; 
 for ( DetailAST token = ast ; 
 token . getParent ( ) ! = null ; 
 token = token . getParent ( ) ) { 
 final int type = token . getType ( ) ; 
 if ( ignoreOccurrenceContext . get ( type ) ) { 
 - return true ; 
 + isInIgnoreOccurrenceContext = true ; 
 + break ; 
 } 
 } 
 - return false ; 
 + return isInIgnoreOccurrenceContext ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / ArrayInitHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / ArrayInitHandler . java 
 index 23c55bc . . e21d510 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / ArrayInitHandler . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / ArrayInitHandler . java 
 @ @ - 45 , 14 + 45 , 16 @ @ public class ArrayInitHandler extends BlockParentHandler { 
 protected IndentLevel getIndentImpl ( ) { 
 final DetailAST parentAST = getMainAst ( ) . getParent ( ) ; 
 final int type = parentAST . getType ( ) ; 
 + final IndentLevel indentLevel ; 
 if ( type = = TokenTypes . LITERAL _ NEW | | type = = TokenTypes . ASSIGN ) { 
 / / note : assumes new or assignment is line to align with 
 - return new IndentLevel ( getLineStart ( parentAST ) ) ; 
 + indentLevel = new IndentLevel ( getLineStart ( parentAST ) ) ; 
 } 
 else { 
 / / at this point getParent ( ) is instance of BlockParentHandler 
 - return ( ( BlockParentHandler ) getParent ( ) ) . getChildrenExpectedIndent ( ) ; 
 + indentLevel = ( ( BlockParentHandler ) getParent ( ) ) . getChildrenExpectedIndent ( ) ; 
 } 
 + return indentLevel ; 
 } 
 
 @ Override 
 @ @ - 126 , 11 + 128 , 9 @ @ public class ArrayInitHandler extends BlockParentHandler { 
 } 
 
 if ( realColumnNo = = lineLength ) { 
 - return - 1 ; 
 - } 
 - else { 
 - return realColumnNo ; 
 + realColumnNo = - 1 ; 
 } 
 + return realColumnNo ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 index 1b891aa . . f8af0a7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 @ @ - 59 , 12 + 59 , 11 @ @ public class LineWrappingHandler { 
 * @ noinspection BooleanParameter 
 * / 
 public static LineWrappingOptions ofBoolean ( boolean val ) { 
 + LineWrappingOptions option = NONE ; 
 if ( val ) { 
 - return IGNORE _ FIRST _ LINE ; 
 - } 
 - else { 
 - return NONE ; 
 + option = IGNORE _ FIRST _ LINE ; 
 } 
 + return option ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 index 58a6697 . . 0da1de8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocStyleCheck . java 
 @ @ - 342 , 6 + 342 , 7 @ @ public class JavadocStyleCheck 
 * @ param ast the node with the Javadoc 
 * @ param comment the { @ code TextBlock } which represents 
 * the Javadoc comment . 
 + * @ noinspection MethodWithMultipleReturnPoints 
 * / 
 / / - @ cs [ ReturnCount ] Too complex to break apart . 
 private void checkHtmlTags ( final DetailAST ast , final TextBlock comment ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 index 110a929 . . e019fda 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheckTest . java 
 @ @ - 136 , 12 + 136 , 14 @ @ public class IndentationCheckTest extends AbstractModuleTestSupport { 
 } 
 
 private static int getLineStart ( String line , final int tabWidth ) { 
 + int lineStart = 0 ; 
 for ( int index = 0 ; index < line . length ( ) ; + + index ) { 
 if ( ! Character . isWhitespace ( line . charAt ( index ) ) ) { 
 - return CommonUtils . lengthExpandedTabs ( line , index , tabWidth ) ; 
 + lineStart = CommonUtils . lengthExpandedTabs ( line , index , tabWidth ) ; 
 + break ; 
 } 
 } 
 - return 0 ; 
 + return lineStart ; 
 } 
 
 private void verifyWarns ( Configuration config , String filePath ,

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 23c8d67 . . b1e3c91 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 22 , 7 + 22 , 7 @ @ 
 
 < groupId > com . puppycrawl . tools < / groupId > 
 < artifactId > checkstyle < / artifactId > 
 - < version > 6 . 8 - SNAPSHOT < / version > 
 + < version > 6 . 8 < / version > 
 < packaging > jar < / packaging > 
 
 < name > checkstyle < / name >
