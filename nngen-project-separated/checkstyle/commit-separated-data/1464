BLEU SCORE: 0.041961149062965476

TEST MSG: Issue # 2557 : made tests only cover one subject
GENERATED MSG: Refactored UTs , checks package , issue # 537

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / LeftCurlyRightCurlyTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / LeftCurlyRightCurlyTest . java <nl> deleted file mode 100644 <nl> index 5358532 . . 0000000 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / LeftCurlyRightCurlyTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 145 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . google . checkstyle . test . chapter4formatting . rule412nonemptyblocks ; <nl> - <nl> - import static com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck . MSG _ KEY _ LINE _ PREVIOUS ; <nl> - import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ ALONE ; <nl> - import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ NEW ; <nl> - <nl> - import java . io . File ; <nl> - <nl> - import org . apache . commons . lang3 . ArrayUtils ; <nl> - import org . junit . BeforeClass ; <nl> - import org . junit . Test ; <nl> - <nl> - import com . google . checkstyle . test . base . BaseCheckTestSupport ; <nl> - import com . google . checkstyle . test . base . ConfigurationBuilder ; <nl> - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> - import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> - import com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyOption ; <nl> - <nl> - public class LeftCurlyRightCurlyTest extends BaseCheckTestSupport { <nl> - <nl> - private static ConfigurationBuilder builder ; <nl> - <nl> - @ BeforeClass <nl> - public static void setConfigurationBuilder ( ) { <nl> - builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void leftCurlyBracesTest ( ) throws Exception { <nl> - <nl> - final String [ ] expected = { <nl> - " 4 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , <nl> - " 7 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 13 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 26 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 43 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 61 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 97 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - } ; <nl> - <nl> - final Configuration checkConfig = builder . getCheckConfig ( " LeftCurly " ) ; <nl> - final String filePath = builder . getFilePath ( " InputLeftCurlyBraces " ) ; <nl> - <nl> - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> - verify ( checkConfig , filePath , expected , warnList ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void leftCurlyAnnotationsTest ( ) throws Exception { <nl> - <nl> - final String [ ] expected = { <nl> - " 10 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , <nl> - " 14 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 21 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 27 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 50 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - } ; <nl> - <nl> - final Configuration checkConfig = builder . getCheckConfig ( " LeftCurly " ) ; <nl> - final String filePath = builder . getFilePath ( " InputLeftCurlyAnnotations " ) ; <nl> - <nl> - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> - verify ( checkConfig , filePath , expected , warnList ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void leftCurlyMethodsTest ( ) throws Exception { <nl> - <nl> - final String [ ] expected = { <nl> - " 4 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , <nl> - " 9 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 16 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 19 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 23 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 31 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , <nl> - " 33 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 38 : 9 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 9 ) , <nl> - " 41 : 9 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 9 ) , <nl> - " 45 : 9 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 9 ) , <nl> - " 57 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 61 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 69 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 72 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - " 76 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> - } ; <nl> - <nl> - final Configuration checkConfig = builder . getCheckConfig ( " LeftCurly " ) ; <nl> - final String filePath = builder . getFilePath ( " InputLeftCurlyMethod " ) ; <nl> - <nl> - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> - verify ( checkConfig , filePath , expected , warnList ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void rightCurlyTestAlone ( ) throws Exception { <nl> - final DefaultConfiguration newCheckConfig = createCheckConfig ( RightCurlyCheck . class ) ; <nl> - newCheckConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; <nl> - newCheckConfig . addAttribute ( " tokens " , " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF " ) ; <nl> - <nl> - final String [ ] expected = { <nl> - " 97 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> - " 97 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> - " 108 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> - " 108 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> - " 122 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> - } ; <nl> - <nl> - final String filePath = builder . getFilePath ( " InputRightCurlyOther " ) ; <nl> - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> - verify ( newCheckConfig , filePath , expected , warnList ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void rightCurlyTestSame ( ) throws Exception { <nl> - final DefaultConfiguration newCheckConfig = createCheckConfig ( RightCurlyCheck . class ) ; <nl> - newCheckConfig . addAttribute ( " option " , RightCurlyOption . SAME . toString ( ) ) ; <nl> - <nl> - final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> - <nl> - final String filePath = builder . getFilePath ( " InputRightCurlySame " ) ; <nl> - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> - verify ( newCheckConfig , filePath , expected , warnList ) ; <nl> - } <nl> - } <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / LeftCurlyTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / LeftCurlyTest . java <nl> new file mode 100644 <nl> index 0000000 . . b6d56c2 <nl> - - - / dev / null <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / LeftCurlyTest . java <nl> @ @ - 0 , 0 + 1 , 108 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . google . checkstyle . test . chapter4formatting . rule412nonemptyblocks ; <nl> + <nl> + import static com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck . MSG _ KEY _ LINE _ PREVIOUS ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . google . checkstyle . test . base . BaseCheckTestSupport ; <nl> + import com . google . checkstyle . test . base . ConfigurationBuilder ; <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck ; <nl> + <nl> + public class LeftCurlyTest extends BaseCheckTestSupport { <nl> + <nl> + private static ConfigurationBuilder builder ; <nl> + <nl> + @ BeforeClass <nl> + public static void setConfigurationBuilder ( ) { <nl> + builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void leftCurlyBracesTest ( ) throws Exception { <nl> + <nl> + final String [ ] expected = { <nl> + " 4 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , <nl> + " 7 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 13 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 26 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 43 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 61 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 97 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + } ; <nl> + <nl> + final Configuration checkConfig = builder . getCheckConfig ( " LeftCurly " ) ; <nl> + final String filePath = builder . getFilePath ( " InputLeftCurlyBraces " ) ; <nl> + <nl> + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void leftCurlyAnnotationsTest ( ) throws Exception { <nl> + <nl> + final String [ ] expected = { <nl> + " 10 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , <nl> + " 14 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 21 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 27 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 50 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + } ; <nl> + <nl> + final Configuration checkConfig = builder . getCheckConfig ( " LeftCurly " ) ; <nl> + final String filePath = builder . getFilePath ( " InputLeftCurlyAnnotations " ) ; <nl> + <nl> + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void leftCurlyMethodsTest ( ) throws Exception { <nl> + <nl> + final String [ ] expected = { <nl> + " 4 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , <nl> + " 9 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 16 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 19 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 23 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 31 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , <nl> + " 33 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 38 : 9 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 9 ) , <nl> + " 41 : 9 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 9 ) , <nl> + " 45 : 9 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 9 ) , <nl> + " 57 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 61 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 69 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 72 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + " 76 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , <nl> + } ; <nl> + <nl> + final Configuration checkConfig = builder . getCheckConfig ( " LeftCurly " ) ; <nl> + final String filePath = builder . getFilePath ( " InputLeftCurlyMethod " ) ; <nl> + <nl> + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + } <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java <nl> new file mode 100644 <nl> index 0000000 . . aa69311 <nl> - - - / dev / null <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java <nl> @ @ - 0 , 0 + 1 , 76 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . google . checkstyle . test . chapter4formatting . rule412nonemptyblocks ; <nl> + <nl> + import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ ALONE ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ NEW ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import org . apache . commons . lang3 . ArrayUtils ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . google . checkstyle . test . base . BaseCheckTestSupport ; <nl> + import com . google . checkstyle . test . base . ConfigurationBuilder ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyOption ; <nl> + <nl> + public class RightCurlyTest extends BaseCheckTestSupport { <nl> + <nl> + private static ConfigurationBuilder builder ; <nl> + <nl> + @ BeforeClass <nl> + public static void setConfigurationBuilder ( ) { <nl> + builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void rightCurlyTestAlone ( ) throws Exception { <nl> + final DefaultConfiguration newCheckConfig = createCheckConfig ( RightCurlyCheck . class ) ; <nl> + newCheckConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; <nl> + newCheckConfig . addAttribute ( " tokens " , " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 97 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> + " 97 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> + " 108 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> + " 108 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> + " 122 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> + } ; <nl> + <nl> + final String filePath = builder . getFilePath ( " InputRightCurlyOther " ) ; <nl> + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> + verify ( newCheckConfig , filePath , expected , warnList ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void rightCurlyTestSame ( ) throws Exception { <nl> + final DefaultConfiguration newCheckConfig = createCheckConfig ( RightCurlyCheck . class ) ; <nl> + newCheckConfig . addAttribute ( " option " , RightCurlyOption . SAME . toString ( ) ) ; <nl> + <nl> + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + final String filePath = builder . getFilePath ( " InputRightCurlySame " ) ; <nl> + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> + verify ( newCheckConfig , filePath , expected , warnList ) ; <nl> + } <nl> + } <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 9b6b9da <nl> - - - / dev / null <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java <nl> @ @ - 0 , 0 + 1 , 114 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . google . checkstyle . test . chapter4formatting . rule462horizontalwhitespace ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . google . checkstyle . test . base . BaseCheckTestSupport ; <nl> + import com . google . checkstyle . test . base . ConfigurationBuilder ; <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + <nl> + public class GenericWhitespaceTest extends BaseCheckTestSupport { <nl> + <nl> + private static ConfigurationBuilder builder ; <nl> + <nl> + @ BeforeClass <nl> + public static void setConfigurationBuilder ( ) { <nl> + builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void whitespaceAroundGenericsTest ( ) throws Exception { <nl> + <nl> + final String msgPreceded = " ws . preceded " ; <nl> + final String msgFollowed = " ws . followed " ; <nl> + final Configuration checkConfig = builder . getCheckConfig ( " GenericWhitespace " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 12 : 16 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> + " 12 : 18 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> + " 12 : 36 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> + " 12 : 38 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> + " 12 : 47 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> + " 12 : 49 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , <nl> + " 12 : 49 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> + " 14 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> + " 14 : 34 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> + " 14 : 45 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> + " 15 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> + " 15 : 34 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> + " 15 : 45 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> + " 20 : 38 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> + " 20 : 40 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> + " 20 : 61 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> + } ; <nl> + <nl> + final String filePath = builder . getFilePath ( " WhitespaceAroundInput _ Generics " ) ; <nl> + <nl> + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void genericWhitespaceTest ( ) throws Exception { <nl> + final String msgPreceded = " ws . preceded " ; <nl> + final String msgFollowed = " ws . followed " ; <nl> + final String msgNotPreceded = " ws . notPreceded " ; <nl> + final String msgIllegalFollow = " ws . illegalFollow " ; <nl> + final Configuration checkConfig = builder . getCheckConfig ( " GenericWhitespace " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 16 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> + " 16 : 15 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> + " 16 : 23 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> + " 16 : 43 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> + " 16 : 45 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> + " 16 : 53 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> + " 17 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> + " 17 : 15 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> + " 17 : 20 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> + " 17 : 22 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> + " 17 : 30 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> + " 17 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , <nl> + " 17 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> + " 17 : 52 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> + " 17 : 54 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> + " 17 : 59 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> + " 17 : 61 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> + " 17 : 69 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> + " 17 : 71 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , <nl> + " 17 : 71 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> + " 30 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgNotPreceded , " < " ) , <nl> + " 30 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgIllegalFollow , " > " ) , <nl> + " 42 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> + " 42 : 30 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , <nl> + " 60 : 60 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgNotPreceded , " & " ) , <nl> + " 63 : 60 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , <nl> + } ; <nl> + <nl> + final String filePath = builder . getFilePath ( " GenericWhitespaceInput " ) ; <nl> + <nl> + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + } <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java <nl> index ca18d69 . . ff8b226 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java <nl> @ @ - 75 , 38 + 75 , 6 @ @ public class WhitespaceAroundTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> - public void whitespaceAroundGenericsTest ( ) throws Exception { <nl> - <nl> - final String msgPreceded = " ws . preceded " ; <nl> - final String msgFollowed = " ws . followed " ; <nl> - final Configuration checkConfig = builder . getCheckConfig ( " GenericWhitespace " ) ; <nl> - <nl> - final String [ ] expected = { <nl> - " 12 : 16 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> - " 12 : 18 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> - " 12 : 36 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> - " 12 : 38 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> - " 12 : 47 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> - " 12 : 49 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , <nl> - " 12 : 49 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> - " 14 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> - " 14 : 34 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> - " 14 : 45 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> - " 15 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> - " 15 : 34 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> - " 15 : 45 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> - " 20 : 38 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> - " 20 : 40 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> - " 20 : 61 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> - } ; <nl> - <nl> - final String filePath = builder . getFilePath ( " WhitespaceAroundInput _ Generics " ) ; <nl> - <nl> - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> - verify ( checkConfig , filePath , expected , warnList ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void whitespaceAroundEmptyTypesCyclesTest ( ) throws Exception { <nl> <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> @ @ - 117 , 47 + 85 , 4 @ @ public class WhitespaceAroundTest extends BaseCheckTestSupport { <nl> final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> verify ( checkConfig , filePath , expected , warnList ) ; <nl> } <nl> - <nl> - @ Test <nl> - public void genericWhitespaceTest ( ) throws Exception { <nl> - final String msgPreceded = " ws . preceded " ; <nl> - final String msgFollowed = " ws . followed " ; <nl> - final String msgNotPreceded = " ws . notPreceded " ; <nl> - final String msgIllegalFollow = " ws . illegalFollow " ; <nl> - final Configuration checkConfig = builder . getCheckConfig ( " GenericWhitespace " ) ; <nl> - <nl> - final String [ ] expected = { <nl> - " 16 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> - " 16 : 15 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> - " 16 : 23 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> - " 16 : 43 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> - " 16 : 45 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> - " 16 : 53 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> - " 17 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> - " 17 : 15 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> - " 17 : 20 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> - " 17 : 22 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> - " 17 : 30 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> - " 17 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , <nl> - " 17 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> - " 17 : 52 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> - " 17 : 54 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> - " 17 : 59 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> - " 17 : 61 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , <nl> - " 17 : 69 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> - " 17 : 71 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , <nl> - " 17 : 71 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , <nl> - " 30 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgNotPreceded , " < " ) , <nl> - " 30 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgIllegalFollow , " > " ) , <nl> - " 42 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , <nl> - " 42 : 30 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , <nl> - " 60 : 60 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgNotPreceded , " & " ) , <nl> - " 63 : 60 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , <nl> - } ; <nl> - <nl> - final String filePath = builder . getFilePath ( " GenericWhitespaceInput " ) ; <nl> - <nl> - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> - verify ( checkConfig , filePath , expected , warnList ) ; <nl> - } <nl> } <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / ClassMethodTypeParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / ClassMethodTypeParameterNameTest . java <nl> deleted file mode 100644 <nl> index 185e150 . . 0000000 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / ClassMethodTypeParameterNameTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 80 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . google . checkstyle . test . chapter5naming . rule528typevariablenames ; <nl> - <nl> - import java . io . File ; <nl> - <nl> - import org . junit . BeforeClass ; <nl> - import org . junit . Test ; <nl> - <nl> - import com . google . checkstyle . test . base . BaseCheckTestSupport ; <nl> - import com . google . checkstyle . test . base . ConfigurationBuilder ; <nl> - import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> - import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> - <nl> - public class ClassMethodTypeParameterNameTest extends BaseCheckTestSupport { <nl> - <nl> - private static final String MSG _ KEY = " name . invalidPattern " ; <nl> - private static ConfigurationBuilder builder ; <nl> - private static Configuration configuration ; <nl> - private static String format ; <nl> - <nl> - @ BeforeClass <nl> - public static void setConfigurationBuilder ( ) throws CheckstyleException { <nl> - builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; <nl> - configuration = builder . getCheckConfig ( " ClassTypeParameterName " ) ; <nl> - format = configuration . getAttribute ( " format " ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testClassDefault ( ) throws Exception { <nl> - <nl> - final String [ ] expected = { <nl> - " 5 : 31 : " + getCheckMessage ( configuration . getMessages ( ) , MSG _ KEY , " t " , format ) , <nl> - " 13 : 14 : " + getCheckMessage ( configuration . getMessages ( ) , MSG _ KEY , " foo " , format ) , <nl> - " 27 : 24 : " + getCheckMessage ( configuration . getMessages ( ) , MSG _ KEY , " $ foo " , format ) , <nl> - } ; <nl> - <nl> - final String filePath = builder . getFilePath ( " ClassTypeParameterNameInput " ) ; <nl> - <nl> - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> - verify ( configuration , filePath , expected , warnList ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testMethodDefault ( ) throws Exception { <nl> - <nl> - final Configuration checkConfig = builder . getCheckConfig ( " MethodTypeParameterName " ) ; <nl> - <nl> - final String [ ] expected = { <nl> - " 9 : 6 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " e _ e " , format ) , <nl> - " 19 : 6 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " Tfo $ o2T " , format ) , <nl> - " 23 : 6 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " foo _ " , format ) , <nl> - " 28 : 10 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " _ abc " , format ) , <nl> - " 37 : 14 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " T $ " , format ) , <nl> - " 42 : 14 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " EE " , format ) , <nl> - } ; <nl> - <nl> - final String filePath = builder . getFilePath ( " MethodTypeParameterNameInput " ) ; <nl> - <nl> - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> - verify ( checkConfig , filePath , expected , warnList ) ; <nl> - } <nl> - } <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / ClassTypeParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / ClassTypeParameterNameTest . java <nl> new file mode 100644 <nl> index 0000000 . . 401111d <nl> - - - / dev / null <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / ClassTypeParameterNameTest . java <nl> @ @ - 0 , 0 + 1 , 60 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . google . checkstyle . test . chapter5naming . rule528typevariablenames ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . google . checkstyle . test . base . BaseCheckTestSupport ; <nl> + import com . google . checkstyle . test . base . ConfigurationBuilder ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + <nl> + public class ClassTypeParameterNameTest extends BaseCheckTestSupport { <nl> + <nl> + private static final String MSG _ KEY = " name . invalidPattern " ; <nl> + private static ConfigurationBuilder builder ; <nl> + private static Configuration configuration ; <nl> + private static String format ; <nl> + <nl> + @ BeforeClass <nl> + public static void setConfigurationBuilder ( ) throws CheckstyleException { <nl> + builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; <nl> + configuration = builder . getCheckConfig ( " ClassTypeParameterName " ) ; <nl> + format = configuration . getAttribute ( " format " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testClassDefault ( ) throws Exception { <nl> + <nl> + final String [ ] expected = { <nl> + " 5 : 31 : " + getCheckMessage ( configuration . getMessages ( ) , MSG _ KEY , " t " , format ) , <nl> + " 13 : 14 : " + getCheckMessage ( configuration . getMessages ( ) , MSG _ KEY , " foo " , format ) , <nl> + " 27 : 24 : " + getCheckMessage ( configuration . getMessages ( ) , MSG _ KEY , " $ foo " , format ) , <nl> + } ; <nl> + <nl> + final String filePath = builder . getFilePath ( " ClassTypeParameterNameInput " ) ; <nl> + <nl> + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> + verify ( configuration , filePath , expected , warnList ) ; <nl> + } <nl> + } <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / MethodTypeParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / MethodTypeParameterNameTest . java <nl> new file mode 100644 <nl> index 0000000 . . d000116 <nl> - - - / dev / null <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / MethodTypeParameterNameTest . java <nl> @ @ - 0 , 0 + 1 , 65 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2015 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . google . checkstyle . test . chapter5naming . rule528typevariablenames ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . google . checkstyle . test . base . BaseCheckTestSupport ; <nl> + import com . google . checkstyle . test . base . ConfigurationBuilder ; <nl> + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + <nl> + public class MethodTypeParameterNameTest extends BaseCheckTestSupport { <nl> + <nl> + private static final String MSG _ KEY = " name . invalidPattern " ; <nl> + private static ConfigurationBuilder builder ; <nl> + private static Configuration configuration ; <nl> + private static String format ; <nl> + <nl> + @ BeforeClass <nl> + public static void setConfigurationBuilder ( ) throws CheckstyleException { <nl> + builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; <nl> + configuration = builder . getCheckConfig ( " ClassTypeParameterName " ) ; <nl> + format = configuration . getAttribute ( " format " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMethodDefault ( ) throws Exception { <nl> + <nl> + final Configuration checkConfig = builder . getCheckConfig ( " MethodTypeParameterName " ) ; <nl> + <nl> + final String [ ] expected = { <nl> + " 9 : 6 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " e _ e " , format ) , <nl> + " 19 : 6 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " Tfo $ o2T " , format ) , <nl> + " 23 : 6 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " foo _ " , format ) , <nl> + " 28 : 10 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " _ abc " , format ) , <nl> + " 37 : 14 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " T $ " , format ) , <nl> + " 42 : 14 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " EE " , format ) , <nl> + } ; <nl> + <nl> + final String filePath = builder . getFilePath ( " MethodTypeParameterNameInput " ) ; <nl> + <nl> + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / checkstyle _ checks . xml b / checkstyle _ checks . xml <nl> index 5612ed1 . . 76934e4 100644 <nl> - - - a / checkstyle _ checks . xml <nl> + + + b / checkstyle _ checks . xml <nl> @ @ - 188 , 7 + 188 , 7 @ @ <nl> < module name = " Indentation " > <nl> < property name = " basicOffset " value = " 4 " / > <nl> < property name = " braceAdjustment " value = " 0 " / > <nl> - < property name = " caseIndent " value = " 0 " / > <nl> + < property name = " caseIndent " value = " 4 " / > <nl> < / module > <nl> < module name = " ArrayTrailingComma " / > <nl> < module name = " FinalLocalVariable " / >

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / LeftCurlyRightCurlyTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / LeftCurlyRightCurlyTest . java 
 deleted file mode 100644 
 index 5358532 . . 0000000 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / LeftCurlyRightCurlyTest . java 
 + + + / dev / null 
 @ @ - 1 , 145 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . google . checkstyle . test . chapter4formatting . rule412nonemptyblocks ; 
 - 
 - import static com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck . MSG _ KEY _ LINE _ PREVIOUS ; 
 - import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ ALONE ; 
 - import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ NEW ; 
 - 
 - import java . io . File ; 
 - 
 - import org . apache . commons . lang3 . ArrayUtils ; 
 - import org . junit . BeforeClass ; 
 - import org . junit . Test ; 
 - 
 - import com . google . checkstyle . test . base . BaseCheckTestSupport ; 
 - import com . google . checkstyle . test . base . ConfigurationBuilder ; 
 - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 - import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 - import com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyOption ; 
 - 
 - public class LeftCurlyRightCurlyTest extends BaseCheckTestSupport { 
 - 
 - private static ConfigurationBuilder builder ; 
 - 
 - @ BeforeClass 
 - public static void setConfigurationBuilder ( ) { 
 - builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void leftCurlyBracesTest ( ) throws Exception { 
 - 
 - final String [ ] expected = { 
 - " 4 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , 
 - " 7 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 13 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 26 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 43 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 61 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 97 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - } ; 
 - 
 - final Configuration checkConfig = builder . getCheckConfig ( " LeftCurly " ) ; 
 - final String filePath = builder . getFilePath ( " InputLeftCurlyBraces " ) ; 
 - 
 - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 - verify ( checkConfig , filePath , expected , warnList ) ; 
 - } 
 - 
 - @ Test 
 - public void leftCurlyAnnotationsTest ( ) throws Exception { 
 - 
 - final String [ ] expected = { 
 - " 10 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , 
 - " 14 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 21 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 27 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 50 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - } ; 
 - 
 - final Configuration checkConfig = builder . getCheckConfig ( " LeftCurly " ) ; 
 - final String filePath = builder . getFilePath ( " InputLeftCurlyAnnotations " ) ; 
 - 
 - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 - verify ( checkConfig , filePath , expected , warnList ) ; 
 - } 
 - 
 - @ Test 
 - public void leftCurlyMethodsTest ( ) throws Exception { 
 - 
 - final String [ ] expected = { 
 - " 4 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , 
 - " 9 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 16 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 19 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 23 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 31 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , 
 - " 33 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 38 : 9 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 9 ) , 
 - " 41 : 9 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 9 ) , 
 - " 45 : 9 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 9 ) , 
 - " 57 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 61 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 69 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 72 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - " 76 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 - } ; 
 - 
 - final Configuration checkConfig = builder . getCheckConfig ( " LeftCurly " ) ; 
 - final String filePath = builder . getFilePath ( " InputLeftCurlyMethod " ) ; 
 - 
 - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 - verify ( checkConfig , filePath , expected , warnList ) ; 
 - } 
 - 
 - @ Test 
 - public void rightCurlyTestAlone ( ) throws Exception { 
 - final DefaultConfiguration newCheckConfig = createCheckConfig ( RightCurlyCheck . class ) ; 
 - newCheckConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; 
 - newCheckConfig . addAttribute ( " tokens " , " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF " ) ; 
 - 
 - final String [ ] expected = { 
 - " 97 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 - " 97 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 - " 108 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 - " 108 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 - " 122 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 - } ; 
 - 
 - final String filePath = builder . getFilePath ( " InputRightCurlyOther " ) ; 
 - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 - verify ( newCheckConfig , filePath , expected , warnList ) ; 
 - } 
 - 
 - @ Test 
 - public void rightCurlyTestSame ( ) throws Exception { 
 - final DefaultConfiguration newCheckConfig = createCheckConfig ( RightCurlyCheck . class ) ; 
 - newCheckConfig . addAttribute ( " option " , RightCurlyOption . SAME . toString ( ) ) ; 
 - 
 - final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 - 
 - final String filePath = builder . getFilePath ( " InputRightCurlySame " ) ; 
 - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 - verify ( newCheckConfig , filePath , expected , warnList ) ; 
 - } 
 - } 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / LeftCurlyTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / LeftCurlyTest . java 
 new file mode 100644 
 index 0000000 . . b6d56c2 
 - - - / dev / null 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / LeftCurlyTest . java 
 @ @ - 0 , 0 + 1 , 108 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . google . checkstyle . test . chapter4formatting . rule412nonemptyblocks ; 
 + 
 + import static com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck . MSG _ KEY _ LINE _ PREVIOUS ; 
 + 
 + import java . io . File ; 
 + 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import com . google . checkstyle . test . base . BaseCheckTestSupport ; 
 + import com . google . checkstyle . test . base . ConfigurationBuilder ; 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck ; 
 + 
 + public class LeftCurlyTest extends BaseCheckTestSupport { 
 + 
 + private static ConfigurationBuilder builder ; 
 + 
 + @ BeforeClass 
 + public static void setConfigurationBuilder ( ) { 
 + builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void leftCurlyBracesTest ( ) throws Exception { 
 + 
 + final String [ ] expected = { 
 + " 4 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , 
 + " 7 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 13 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 26 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 43 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 61 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 97 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + } ; 
 + 
 + final Configuration checkConfig = builder . getCheckConfig ( " LeftCurly " ) ; 
 + final String filePath = builder . getFilePath ( " InputLeftCurlyBraces " ) ; 
 + 
 + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + 
 + @ Test 
 + public void leftCurlyAnnotationsTest ( ) throws Exception { 
 + 
 + final String [ ] expected = { 
 + " 10 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , 
 + " 14 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 21 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 27 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 50 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + } ; 
 + 
 + final Configuration checkConfig = builder . getCheckConfig ( " LeftCurly " ) ; 
 + final String filePath = builder . getFilePath ( " InputLeftCurlyAnnotations " ) ; 
 + 
 + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + 
 + @ Test 
 + public void leftCurlyMethodsTest ( ) throws Exception { 
 + 
 + final String [ ] expected = { 
 + " 4 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , 
 + " 9 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 16 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 19 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 23 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 31 : 1 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 1 ) , 
 + " 33 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 38 : 9 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 9 ) , 
 + " 41 : 9 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 9 ) , 
 + " 45 : 9 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 9 ) , 
 + " 57 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 61 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 69 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 72 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + " 76 : 5 : " + getCheckMessage ( LeftCurlyCheck . class , MSG _ KEY _ LINE _ PREVIOUS , " { " , 5 ) , 
 + } ; 
 + 
 + final Configuration checkConfig = builder . getCheckConfig ( " LeftCurly " ) ; 
 + final String filePath = builder . getFilePath ( " InputLeftCurlyMethod " ) ; 
 + 
 + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + } 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java 
 new file mode 100644 
 index 0000000 . . aa69311 
 - - - / dev / null 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java 
 @ @ - 0 , 0 + 1 , 76 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . google . checkstyle . test . chapter4formatting . rule412nonemptyblocks ; 
 + 
 + import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ ALONE ; 
 + import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ NEW ; 
 + 
 + import java . io . File ; 
 + 
 + import org . apache . commons . lang3 . ArrayUtils ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import com . google . checkstyle . test . base . BaseCheckTestSupport ; 
 + import com . google . checkstyle . test . base . ConfigurationBuilder ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyOption ; 
 + 
 + public class RightCurlyTest extends BaseCheckTestSupport { 
 + 
 + private static ConfigurationBuilder builder ; 
 + 
 + @ BeforeClass 
 + public static void setConfigurationBuilder ( ) { 
 + builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void rightCurlyTestAlone ( ) throws Exception { 
 + final DefaultConfiguration newCheckConfig = createCheckConfig ( RightCurlyCheck . class ) ; 
 + newCheckConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; 
 + newCheckConfig . addAttribute ( " tokens " , " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF " ) ; 
 + 
 + final String [ ] expected = { 
 + " 97 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 + " 97 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 + " 108 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 + " 108 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 + " 122 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 + } ; 
 + 
 + final String filePath = builder . getFilePath ( " InputRightCurlyOther " ) ; 
 + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 + verify ( newCheckConfig , filePath , expected , warnList ) ; 
 + } 
 + 
 + @ Test 
 + public void rightCurlyTestSame ( ) throws Exception { 
 + final DefaultConfiguration newCheckConfig = createCheckConfig ( RightCurlyCheck . class ) ; 
 + newCheckConfig . addAttribute ( " option " , RightCurlyOption . SAME . toString ( ) ) ; 
 + 
 + final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + final String filePath = builder . getFilePath ( " InputRightCurlySame " ) ; 
 + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 + verify ( newCheckConfig , filePath , expected , warnList ) ; 
 + } 
 + } 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java 
 new file mode 100644 
 index 0000000 . . 9b6b9da 
 - - - / dev / null 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java 
 @ @ - 0 , 0 + 1 , 114 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . google . checkstyle . test . chapter4formatting . rule462horizontalwhitespace ; 
 + 
 + import java . io . File ; 
 + 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import com . google . checkstyle . test . base . BaseCheckTestSupport ; 
 + import com . google . checkstyle . test . base . ConfigurationBuilder ; 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + 
 + public class GenericWhitespaceTest extends BaseCheckTestSupport { 
 + 
 + private static ConfigurationBuilder builder ; 
 + 
 + @ BeforeClass 
 + public static void setConfigurationBuilder ( ) { 
 + builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void whitespaceAroundGenericsTest ( ) throws Exception { 
 + 
 + final String msgPreceded = " ws . preceded " ; 
 + final String msgFollowed = " ws . followed " ; 
 + final Configuration checkConfig = builder . getCheckConfig ( " GenericWhitespace " ) ; 
 + 
 + final String [ ] expected = { 
 + " 12 : 16 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 + " 12 : 18 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 + " 12 : 36 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 + " 12 : 38 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 + " 12 : 47 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 + " 12 : 49 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , 
 + " 12 : 49 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 + " 14 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 + " 14 : 34 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 + " 14 : 45 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 + " 15 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 + " 15 : 34 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 + " 15 : 45 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 + " 20 : 38 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 + " 20 : 40 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 + " 20 : 61 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 + } ; 
 + 
 + final String filePath = builder . getFilePath ( " WhitespaceAroundInput _ Generics " ) ; 
 + 
 + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + 
 + @ Test 
 + public void genericWhitespaceTest ( ) throws Exception { 
 + final String msgPreceded = " ws . preceded " ; 
 + final String msgFollowed = " ws . followed " ; 
 + final String msgNotPreceded = " ws . notPreceded " ; 
 + final String msgIllegalFollow = " ws . illegalFollow " ; 
 + final Configuration checkConfig = builder . getCheckConfig ( " GenericWhitespace " ) ; 
 + 
 + final String [ ] expected = { 
 + " 16 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 + " 16 : 15 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 + " 16 : 23 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 + " 16 : 43 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 + " 16 : 45 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 + " 16 : 53 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 + " 17 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 + " 17 : 15 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 + " 17 : 20 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 + " 17 : 22 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 + " 17 : 30 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 + " 17 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , 
 + " 17 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 + " 17 : 52 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 + " 17 : 54 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 + " 17 : 59 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 + " 17 : 61 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 + " 17 : 69 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 + " 17 : 71 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , 
 + " 17 : 71 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 + " 30 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgNotPreceded , " < " ) , 
 + " 30 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgIllegalFollow , " > " ) , 
 + " 42 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 + " 42 : 30 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , 
 + " 60 : 60 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgNotPreceded , " & " ) , 
 + " 63 : 60 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , 
 + } ; 
 + 
 + final String filePath = builder . getFilePath ( " GenericWhitespaceInput " ) ; 
 + 
 + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + } 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java 
 index ca18d69 . . ff8b226 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / WhitespaceAroundTest . java 
 @ @ - 75 , 38 + 75 , 6 @ @ public class WhitespaceAroundTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 - public void whitespaceAroundGenericsTest ( ) throws Exception { 
 - 
 - final String msgPreceded = " ws . preceded " ; 
 - final String msgFollowed = " ws . followed " ; 
 - final Configuration checkConfig = builder . getCheckConfig ( " GenericWhitespace " ) ; 
 - 
 - final String [ ] expected = { 
 - " 12 : 16 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 - " 12 : 18 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 - " 12 : 36 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 - " 12 : 38 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 - " 12 : 47 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 - " 12 : 49 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , 
 - " 12 : 49 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 - " 14 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 - " 14 : 34 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 - " 14 : 45 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 - " 15 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 - " 15 : 34 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 - " 15 : 45 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 - " 20 : 38 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 - " 20 : 40 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 - " 20 : 61 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 - } ; 
 - 
 - final String filePath = builder . getFilePath ( " WhitespaceAroundInput _ Generics " ) ; 
 - 
 - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 - verify ( checkConfig , filePath , expected , warnList ) ; 
 - } 
 - 
 - @ Test 
 public void whitespaceAroundEmptyTypesCyclesTest ( ) throws Exception { 
 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 @ @ - 117 , 47 + 85 , 4 @ @ public class WhitespaceAroundTest extends BaseCheckTestSupport { 
 final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 verify ( checkConfig , filePath , expected , warnList ) ; 
 } 
 - 
 - @ Test 
 - public void genericWhitespaceTest ( ) throws Exception { 
 - final String msgPreceded = " ws . preceded " ; 
 - final String msgFollowed = " ws . followed " ; 
 - final String msgNotPreceded = " ws . notPreceded " ; 
 - final String msgIllegalFollow = " ws . illegalFollow " ; 
 - final Configuration checkConfig = builder . getCheckConfig ( " GenericWhitespace " ) ; 
 - 
 - final String [ ] expected = { 
 - " 16 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 - " 16 : 15 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 - " 16 : 23 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 - " 16 : 43 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 - " 16 : 45 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 - " 16 : 53 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 - " 17 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 - " 17 : 15 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 - " 17 : 20 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 - " 17 : 22 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 - " 17 : 30 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 - " 17 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , 
 - " 17 : 32 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 - " 17 : 52 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 - " 17 : 54 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 - " 17 : 59 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 - " 17 : 61 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " < " ) , 
 - " 17 : 69 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 - " 17 : 71 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , 
 - " 17 : 71 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " > " ) , 
 - " 30 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgNotPreceded , " < " ) , 
 - " 30 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgIllegalFollow , " > " ) , 
 - " 42 : 21 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgPreceded , " < " ) , 
 - " 42 : 30 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , 
 - " 60 : 60 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgNotPreceded , " & " ) , 
 - " 63 : 60 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgFollowed , " > " ) , 
 - } ; 
 - 
 - final String filePath = builder . getFilePath ( " GenericWhitespaceInput " ) ; 
 - 
 - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 - verify ( checkConfig , filePath , expected , warnList ) ; 
 - } 
 } 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / ClassMethodTypeParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / ClassMethodTypeParameterNameTest . java 
 deleted file mode 100644 
 index 185e150 . . 0000000 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / ClassMethodTypeParameterNameTest . java 
 + + + / dev / null 
 @ @ - 1 , 80 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . google . checkstyle . test . chapter5naming . rule528typevariablenames ; 
 - 
 - import java . io . File ; 
 - 
 - import org . junit . BeforeClass ; 
 - import org . junit . Test ; 
 - 
 - import com . google . checkstyle . test . base . BaseCheckTestSupport ; 
 - import com . google . checkstyle . test . base . ConfigurationBuilder ; 
 - import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 - import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 - 
 - public class ClassMethodTypeParameterNameTest extends BaseCheckTestSupport { 
 - 
 - private static final String MSG _ KEY = " name . invalidPattern " ; 
 - private static ConfigurationBuilder builder ; 
 - private static Configuration configuration ; 
 - private static String format ; 
 - 
 - @ BeforeClass 
 - public static void setConfigurationBuilder ( ) throws CheckstyleException { 
 - builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; 
 - configuration = builder . getCheckConfig ( " ClassTypeParameterName " ) ; 
 - format = configuration . getAttribute ( " format " ) ; 
 - } 
 - 
 - @ Test 
 - public void testClassDefault ( ) throws Exception { 
 - 
 - final String [ ] expected = { 
 - " 5 : 31 : " + getCheckMessage ( configuration . getMessages ( ) , MSG _ KEY , " t " , format ) , 
 - " 13 : 14 : " + getCheckMessage ( configuration . getMessages ( ) , MSG _ KEY , " foo " , format ) , 
 - " 27 : 24 : " + getCheckMessage ( configuration . getMessages ( ) , MSG _ KEY , " $ foo " , format ) , 
 - } ; 
 - 
 - final String filePath = builder . getFilePath ( " ClassTypeParameterNameInput " ) ; 
 - 
 - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 - verify ( configuration , filePath , expected , warnList ) ; 
 - } 
 - 
 - @ Test 
 - public void testMethodDefault ( ) throws Exception { 
 - 
 - final Configuration checkConfig = builder . getCheckConfig ( " MethodTypeParameterName " ) ; 
 - 
 - final String [ ] expected = { 
 - " 9 : 6 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " e _ e " , format ) , 
 - " 19 : 6 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " Tfo $ o2T " , format ) , 
 - " 23 : 6 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " foo _ " , format ) , 
 - " 28 : 10 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " _ abc " , format ) , 
 - " 37 : 14 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " T $ " , format ) , 
 - " 42 : 14 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " EE " , format ) , 
 - } ; 
 - 
 - final String filePath = builder . getFilePath ( " MethodTypeParameterNameInput " ) ; 
 - 
 - final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 - verify ( checkConfig , filePath , expected , warnList ) ; 
 - } 
 - } 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / ClassTypeParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / ClassTypeParameterNameTest . java 
 new file mode 100644 
 index 0000000 . . 401111d 
 - - - / dev / null 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / ClassTypeParameterNameTest . java 
 @ @ - 0 , 0 + 1 , 60 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . google . checkstyle . test . chapter5naming . rule528typevariablenames ; 
 + 
 + import java . io . File ; 
 + 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import com . google . checkstyle . test . base . BaseCheckTestSupport ; 
 + import com . google . checkstyle . test . base . ConfigurationBuilder ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + 
 + public class ClassTypeParameterNameTest extends BaseCheckTestSupport { 
 + 
 + private static final String MSG _ KEY = " name . invalidPattern " ; 
 + private static ConfigurationBuilder builder ; 
 + private static Configuration configuration ; 
 + private static String format ; 
 + 
 + @ BeforeClass 
 + public static void setConfigurationBuilder ( ) throws CheckstyleException { 
 + builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; 
 + configuration = builder . getCheckConfig ( " ClassTypeParameterName " ) ; 
 + format = configuration . getAttribute ( " format " ) ; 
 + } 
 + 
 + @ Test 
 + public void testClassDefault ( ) throws Exception { 
 + 
 + final String [ ] expected = { 
 + " 5 : 31 : " + getCheckMessage ( configuration . getMessages ( ) , MSG _ KEY , " t " , format ) , 
 + " 13 : 14 : " + getCheckMessage ( configuration . getMessages ( ) , MSG _ KEY , " foo " , format ) , 
 + " 27 : 24 : " + getCheckMessage ( configuration . getMessages ( ) , MSG _ KEY , " $ foo " , format ) , 
 + } ; 
 + 
 + final String filePath = builder . getFilePath ( " ClassTypeParameterNameInput " ) ; 
 + 
 + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 + verify ( configuration , filePath , expected , warnList ) ; 
 + } 
 + } 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / MethodTypeParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / MethodTypeParameterNameTest . java 
 new file mode 100644 
 index 0000000 . . d000116 
 - - - / dev / null 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule528typevariablenames / MethodTypeParameterNameTest . java 
 @ @ - 0 , 0 + 1 , 65 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2015 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . google . checkstyle . test . chapter5naming . rule528typevariablenames ; 
 + 
 + import java . io . File ; 
 + 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import com . google . checkstyle . test . base . BaseCheckTestSupport ; 
 + import com . google . checkstyle . test . base . ConfigurationBuilder ; 
 + import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + 
 + public class MethodTypeParameterNameTest extends BaseCheckTestSupport { 
 + 
 + private static final String MSG _ KEY = " name . invalidPattern " ; 
 + private static ConfigurationBuilder builder ; 
 + private static Configuration configuration ; 
 + private static String format ; 
 + 
 + @ BeforeClass 
 + public static void setConfigurationBuilder ( ) throws CheckstyleException { 
 + builder = new ConfigurationBuilder ( new File ( " src / it / " ) ) ; 
 + configuration = builder . getCheckConfig ( " ClassTypeParameterName " ) ; 
 + format = configuration . getAttribute ( " format " ) ; 
 + } 
 + 
 + @ Test 
 + public void testMethodDefault ( ) throws Exception { 
 + 
 + final Configuration checkConfig = builder . getCheckConfig ( " MethodTypeParameterName " ) ; 
 + 
 + final String [ ] expected = { 
 + " 9 : 6 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " e _ e " , format ) , 
 + " 19 : 6 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " Tfo $ o2T " , format ) , 
 + " 23 : 6 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " foo _ " , format ) , 
 + " 28 : 10 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " _ abc " , format ) , 
 + " 37 : 14 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " T $ " , format ) , 
 + " 42 : 14 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " EE " , format ) , 
 + } ; 
 + 
 + final String filePath = builder . getFilePath ( " MethodTypeParameterNameInput " ) ; 
 + 
 + final Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / checkstyle _ checks . xml b / checkstyle _ checks . xml 
 index 5612ed1 . . 76934e4 100644 
 - - - a / checkstyle _ checks . xml 
 + + + b / checkstyle _ checks . xml 
 @ @ - 188 , 7 + 188 , 7 @ @ 
 < module name = " Indentation " > 
 < property name = " basicOffset " value = " 4 " / > 
 < property name = " braceAdjustment " value = " 0 " / > 
 - < property name = " caseIndent " value = " 0 " / > 
 + < property name = " caseIndent " value = " 4 " / > 
 < / module > 
 < module name = " ArrayTrailingComma " / > 
 < module name = " FinalLocalVariable " / >
