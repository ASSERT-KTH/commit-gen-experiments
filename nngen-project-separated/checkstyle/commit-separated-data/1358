BLEU SCORE: 0.10786826322527471

TEST MSG: Issue # 2688 : Fix OneStatementPerLine lambda validation
GENERATED MSG: Issue # 2451 : removed excess hierarchy from CyclomaticComplexityCheck

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java <nl> index 4d7b8f6 . . 17e45dd 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java <nl> @ @ - 80 , 7 + 80 , 12 @ @ public class OneStatementPerLineTest extends BaseCheckTestSupport { <nl> " multiple . statements . line " ) ; <nl> <nl> final String [ ] expected = { <nl> - " 24 : 6 : " + msg , <nl> + " 31 : 6 : " + msg , <nl> + " 36 : 58 : " + msg , <nl> + " 37 : 58 : " + msg , <nl> + " 37 : 74 : " + msg , <nl> + " 38 : 50 : " + msg , <nl> + " 42 : 91 : " + msg , <nl> } ; <nl> <nl> final Configuration checkConfig = getCheckConfig ( " OneStatementPerLine " ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java <nl> index acb3f1d . . 3c6d761 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java <nl> @ @ - 19 , 6 + 19 , 9 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> + import java . util . ArrayDeque ; <nl> + import java . util . Deque ; <nl> + <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 73 , 6 + 76 , 11 @ @ public final class OneStatementPerLineCheck extends Check { <nl> public static final String MSG _ KEY = " multiple . statements . line " ; <nl> <nl> / * * <nl> + * Counts number of semicolons in nested lambdas . <nl> + * / <nl> + private final Deque < Integer > countOfSemiInLambda = new ArrayDeque < > ( ) ; <nl> + <nl> + / * * <nl> * Hold the line - number where the last statement ended . <nl> * / <nl> private int lastStatementEnd = - 1 ; <nl> @ @ - 87 , 6 + 95 , 16 @ @ public final class OneStatementPerLineCheck extends Check { <nl> * / <nl> private boolean inForHeader ; <nl> <nl> + / * * <nl> + * Holds if current token is inside lambda . <nl> + * / <nl> + private boolean isInLambda ; <nl> + <nl> + / * * <nl> + * Hold the line - number where the last lambda statement ended . <nl> + * / <nl> + private int lambdaStatementEnd = - 1 ; <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) { <nl> return getAcceptableTokens ( ) ; <nl> @ @ - 95 , 8 + 113 , 10 @ @ public final class OneStatementPerLineCheck extends Check { <nl> @ Override <nl> public int [ ] getAcceptableTokens ( ) { <nl> return new int [ ] { <nl> - TokenTypes . SEMI , TokenTypes . FOR _ INIT , <nl> + TokenTypes . SEMI , <nl> + TokenTypes . FOR _ INIT , <nl> TokenTypes . FOR _ ITERATOR , <nl> + TokenTypes . LAMBDA , <nl> } ; <nl> } <nl> <nl> @ @ - 110 , 27 + 130 , 22 @ @ public final class OneStatementPerLineCheck extends Check { <nl> inForHeader = false ; <nl> lastStatementEnd = - 1 ; <nl> forStatementEnd = - 1 ; <nl> + isInLambda = false ; <nl> } <nl> <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> switch ( ast . getType ( ) ) { <nl> case TokenTypes . SEMI : <nl> - DetailAST currentStatement = ast ; <nl> - final boolean hasResourcesPrevSibling = <nl> - currentStatement . getPreviousSibling ( ) ! = null <nl> - & & currentStatement . getPreviousSibling ( ) . getType ( ) = = TokenTypes . RESOURCES ; <nl> - if ( ! hasResourcesPrevSibling & & isMultilineStatement ( currentStatement ) ) { <nl> - currentStatement = ast . getPreviousSibling ( ) ; <nl> - } <nl> - if ( ! inForHeader <nl> - & & isOnTheSameLine ( currentStatement , lastStatementEnd , forStatementEnd ) ) { <nl> - log ( ast , MSG _ KEY ) ; <nl> - } <nl> + checkIfSemicolonIsInDifferentLineThanPrevious ( ast ) ; <nl> break ; <nl> case TokenTypes . FOR _ ITERATOR : <nl> forStatementEnd = ast . getLineNo ( ) ; <nl> break ; <nl> + case TokenTypes . LAMBDA : <nl> + isInLambda = true ; <nl> + countOfSemiInLambda . push ( 0 ) ; <nl> + break ; <nl> default : <nl> inForHeader = true ; <nl> break ; <nl> @ @ - 143 , 26 + 158 , 66 @ @ public final class OneStatementPerLineCheck extends Check { <nl> case TokenTypes . SEMI : <nl> lastStatementEnd = ast . getLineNo ( ) ; <nl> forStatementEnd = - 1 ; <nl> + lambdaStatementEnd = - 1 ; <nl> break ; <nl> case TokenTypes . FOR _ ITERATOR : <nl> inForHeader = false ; <nl> break ; <nl> + case TokenTypes . LAMBDA : <nl> + countOfSemiInLambda . pop ( ) ; <nl> + if ( countOfSemiInLambda . isEmpty ( ) ) { <nl> + isInLambda = false ; <nl> + } <nl> + lambdaStatementEnd = ast . getLineNo ( ) ; <nl> + break ; <nl> default : <nl> break ; <nl> } <nl> } <nl> <nl> / * * <nl> + * Checks if given semicolon is in different line than previous . <nl> + * @ param ast semicolon to check <nl> + * / <nl> + private void checkIfSemicolonIsInDifferentLineThanPrevious ( DetailAST ast ) { <nl> + DetailAST currentStatement = ast ; <nl> + final boolean hasResourcesPrevSibling = <nl> + currentStatement . getPreviousSibling ( ) ! = null <nl> + & & currentStatement . getPreviousSibling ( ) . getType ( ) = = TokenTypes . RESOURCES ; <nl> + if ( ! hasResourcesPrevSibling & & isMultilineStatement ( currentStatement ) ) { <nl> + currentStatement = ast . getPreviousSibling ( ) ; <nl> + } <nl> + if ( isInLambda ) { <nl> + int countOfSemiInCurrentLambda = countOfSemiInLambda . pop ( ) ; <nl> + countOfSemiInCurrentLambda + + ; <nl> + countOfSemiInLambda . push ( countOfSemiInCurrentLambda ) ; <nl> + if ( ! inForHeader & & countOfSemiInCurrentLambda > 1 <nl> + & & isOnTheSameLine ( currentStatement , <nl> + lastStatementEnd , forStatementEnd , <nl> + lambdaStatementEnd ) ) { <nl> + log ( ast , MSG _ KEY ) ; <nl> + } <nl> + } <nl> + else if ( ! inForHeader & & isOnTheSameLine ( currentStatement , lastStatementEnd , <nl> + forStatementEnd , lambdaStatementEnd ) ) { <nl> + log ( ast , MSG _ KEY ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Checks whether two statements are on the same line . <nl> * @ param ast token for the current statement . <nl> * @ param lastStatementEnd the line - number where the last statement ended . <nl> * @ param forStatementEnd the line - number where the last ' for - loop ' <nl> * statement ended . <nl> + * @ param lambdaStatementEnd the line - number where the last lambda <nl> + * statement ended . <nl> * @ return true if two statements are on the same line . <nl> * / <nl> private static boolean isOnTheSameLine ( DetailAST ast , int lastStatementEnd , <nl> - int forStatementEnd ) { <nl> - return lastStatementEnd = = ast . getLineNo ( ) & & forStatementEnd ! = ast . getLineNo ( ) ; <nl> + int forStatementEnd , int lambdaStatementEnd ) { <nl> + return lastStatementEnd = = ast . getLineNo ( ) & & forStatementEnd ! = ast . getLineNo ( ) <nl> + & & lambdaStatementEnd ! = ast . getLineNo ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> index b742885 . . 3f2d4a1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> @ @ - 92 , 7 + 92 , 12 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { <nl> public void oneStatementNonCompilableInputTest ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( OneStatementPerLineCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 24 : 6 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 31 : 6 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 36 : 58 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 37 : 58 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 37 : 74 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 38 : 50 : " + getCheckMessage ( MSG _ KEY ) , <nl> + " 42 : 91 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> <nl> verify ( checkConfig , getNonCompilablePath ( " InputOneStatementPerLine . java " ) , expected ) ; <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java <nl> index 65b8a2b . . 0da4ae7 100644 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java <nl> @ @ - 10 , 9 + 10 , 16 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> * Two import statements and one ' empty ' statement <nl> * which are not on the same line are legal . <nl> * / <nl> + import java . awt . event . ActionEvent ; <nl> import java . lang . annotation . Annotation ; <nl> ; <nl> import java . lang . String ; <nl> + import java . util . LinkedList ; <nl> + import java . util . List ; <nl> + import java . util . concurrent . Callable ; <nl> + import java . util . stream . Collectors ; <nl> + <nl> + import javax . swing . JCheckBox ; <nl> <nl> public class InputOneStatementPerLine { <nl> / * * <nl> @ @ - 22 , 4 + 29 , 33 @ @ public class InputOneStatementPerLine { <nl> * and rises violation . <nl> * / <nl> ; ; / / warn <nl> + static { <nl> + new JCheckBox ( ) . addActionListener ( ( final ActionEvent e ) - > { good ( ) ; } ) ; <nl> + List < Integer > ints = new LinkedList < Integer > ( ) ; <nl> + ints . stream ( ) . map ( t - > { return t * 2 ; } ) . filter ( t - > { return false ; } ) ; <nl> + ints . stream ( ) . map ( t - > { int m = t * 2 ; return m ; } ) ; / / warn <nl> + ints . stream ( ) . map ( t - > { int m = t * 2 ; return m ; } ) ; int i = 3 ; / / warn <nl> + ints . stream ( ) . map ( t - > t * 2 ) ; int k = 4 ; / / warn <nl> + ints . stream ( ) . map ( t - > t * 2 ) ; <nl> + List < Integer > ints2 = new LinkedList < Integer > ( ) ; <nl> + ints . stream ( ) . map ( t - > { return ints2 . stream ( ) . map ( w - > { return w * 2 ; } ) ; } ) ; <nl> + ints . stream ( ) . map ( t - > { return ints2 . stream ( ) . map ( w - > { int m = w * 2 ; return m ; } ) ; } ) ; / / warn <nl> + ints . stream ( ) . map ( t - > { <nl> + return ints2 . stream ( ) . map ( <nl> + w - > { <nl> + int m = w * 2 ; <nl> + return m ; <nl> + } ) ; <nl> + } ) ; <nl> + ints . stream ( ) . map ( t - > { <nl> + int k = 0 ; <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + k = i + k ; <nl> + } <nl> + return k ; <nl> + } ) ; <nl> + } <nl> + <nl> + private static void good ( ) { <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index 405f100 . . 3e92d5b 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 329 , 7 + 329 , 8 @ @ <nl> < module name = " MethodTypeParameterName " / > <nl> < module name = " PackageName " / > <nl> < module name = " ParameterName " > <nl> - < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " / > <nl> + < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] + $ " / > <nl> + < property name = " ignoreOverridden " value = " true " / > <nl> < / module > <nl> < module name = " StaticVariableName " > <nl> < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " / >

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java 
 index 4d7b8f6 . . 17e45dd 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java 
 @ @ - 80 , 7 + 80 , 12 @ @ public class OneStatementPerLineTest extends BaseCheckTestSupport { 
 " multiple . statements . line " ) ; 
 
 final String [ ] expected = { 
 - " 24 : 6 : " + msg , 
 + " 31 : 6 : " + msg , 
 + " 36 : 58 : " + msg , 
 + " 37 : 58 : " + msg , 
 + " 37 : 74 : " + msg , 
 + " 38 : 50 : " + msg , 
 + " 42 : 91 : " + msg , 
 } ; 
 
 final Configuration checkConfig = getCheckConfig ( " OneStatementPerLine " ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java 
 index acb3f1d . . 3c6d761 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheck . java 
 @ @ - 19 , 6 + 19 , 9 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 + import java . util . ArrayDeque ; 
 + import java . util . Deque ; 
 + 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 73 , 6 + 76 , 11 @ @ public final class OneStatementPerLineCheck extends Check { 
 public static final String MSG _ KEY = " multiple . statements . line " ; 
 
 / * * 
 + * Counts number of semicolons in nested lambdas . 
 + * / 
 + private final Deque < Integer > countOfSemiInLambda = new ArrayDeque < > ( ) ; 
 + 
 + / * * 
 * Hold the line - number where the last statement ended . 
 * / 
 private int lastStatementEnd = - 1 ; 
 @ @ - 87 , 6 + 95 , 16 @ @ public final class OneStatementPerLineCheck extends Check { 
 * / 
 private boolean inForHeader ; 
 
 + / * * 
 + * Holds if current token is inside lambda . 
 + * / 
 + private boolean isInLambda ; 
 + 
 + / * * 
 + * Hold the line - number where the last lambda statement ended . 
 + * / 
 + private int lambdaStatementEnd = - 1 ; 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) { 
 return getAcceptableTokens ( ) ; 
 @ @ - 95 , 8 + 113 , 10 @ @ public final class OneStatementPerLineCheck extends Check { 
 @ Override 
 public int [ ] getAcceptableTokens ( ) { 
 return new int [ ] { 
 - TokenTypes . SEMI , TokenTypes . FOR _ INIT , 
 + TokenTypes . SEMI , 
 + TokenTypes . FOR _ INIT , 
 TokenTypes . FOR _ ITERATOR , 
 + TokenTypes . LAMBDA , 
 } ; 
 } 
 
 @ @ - 110 , 27 + 130 , 22 @ @ public final class OneStatementPerLineCheck extends Check { 
 inForHeader = false ; 
 lastStatementEnd = - 1 ; 
 forStatementEnd = - 1 ; 
 + isInLambda = false ; 
 } 
 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 switch ( ast . getType ( ) ) { 
 case TokenTypes . SEMI : 
 - DetailAST currentStatement = ast ; 
 - final boolean hasResourcesPrevSibling = 
 - currentStatement . getPreviousSibling ( ) ! = null 
 - & & currentStatement . getPreviousSibling ( ) . getType ( ) = = TokenTypes . RESOURCES ; 
 - if ( ! hasResourcesPrevSibling & & isMultilineStatement ( currentStatement ) ) { 
 - currentStatement = ast . getPreviousSibling ( ) ; 
 - } 
 - if ( ! inForHeader 
 - & & isOnTheSameLine ( currentStatement , lastStatementEnd , forStatementEnd ) ) { 
 - log ( ast , MSG _ KEY ) ; 
 - } 
 + checkIfSemicolonIsInDifferentLineThanPrevious ( ast ) ; 
 break ; 
 case TokenTypes . FOR _ ITERATOR : 
 forStatementEnd = ast . getLineNo ( ) ; 
 break ; 
 + case TokenTypes . LAMBDA : 
 + isInLambda = true ; 
 + countOfSemiInLambda . push ( 0 ) ; 
 + break ; 
 default : 
 inForHeader = true ; 
 break ; 
 @ @ - 143 , 26 + 158 , 66 @ @ public final class OneStatementPerLineCheck extends Check { 
 case TokenTypes . SEMI : 
 lastStatementEnd = ast . getLineNo ( ) ; 
 forStatementEnd = - 1 ; 
 + lambdaStatementEnd = - 1 ; 
 break ; 
 case TokenTypes . FOR _ ITERATOR : 
 inForHeader = false ; 
 break ; 
 + case TokenTypes . LAMBDA : 
 + countOfSemiInLambda . pop ( ) ; 
 + if ( countOfSemiInLambda . isEmpty ( ) ) { 
 + isInLambda = false ; 
 + } 
 + lambdaStatementEnd = ast . getLineNo ( ) ; 
 + break ; 
 default : 
 break ; 
 } 
 } 
 
 / * * 
 + * Checks if given semicolon is in different line than previous . 
 + * @ param ast semicolon to check 
 + * / 
 + private void checkIfSemicolonIsInDifferentLineThanPrevious ( DetailAST ast ) { 
 + DetailAST currentStatement = ast ; 
 + final boolean hasResourcesPrevSibling = 
 + currentStatement . getPreviousSibling ( ) ! = null 
 + & & currentStatement . getPreviousSibling ( ) . getType ( ) = = TokenTypes . RESOURCES ; 
 + if ( ! hasResourcesPrevSibling & & isMultilineStatement ( currentStatement ) ) { 
 + currentStatement = ast . getPreviousSibling ( ) ; 
 + } 
 + if ( isInLambda ) { 
 + int countOfSemiInCurrentLambda = countOfSemiInLambda . pop ( ) ; 
 + countOfSemiInCurrentLambda + + ; 
 + countOfSemiInLambda . push ( countOfSemiInCurrentLambda ) ; 
 + if ( ! inForHeader & & countOfSemiInCurrentLambda > 1 
 + & & isOnTheSameLine ( currentStatement , 
 + lastStatementEnd , forStatementEnd , 
 + lambdaStatementEnd ) ) { 
 + log ( ast , MSG _ KEY ) ; 
 + } 
 + } 
 + else if ( ! inForHeader & & isOnTheSameLine ( currentStatement , lastStatementEnd , 
 + forStatementEnd , lambdaStatementEnd ) ) { 
 + log ( ast , MSG _ KEY ) ; 
 + } 
 + } 
 + 
 + / * * 
 * Checks whether two statements are on the same line . 
 * @ param ast token for the current statement . 
 * @ param lastStatementEnd the line - number where the last statement ended . 
 * @ param forStatementEnd the line - number where the last ' for - loop ' 
 * statement ended . 
 + * @ param lambdaStatementEnd the line - number where the last lambda 
 + * statement ended . 
 * @ return true if two statements are on the same line . 
 * / 
 private static boolean isOnTheSameLine ( DetailAST ast , int lastStatementEnd , 
 - int forStatementEnd ) { 
 - return lastStatementEnd = = ast . getLineNo ( ) & & forStatementEnd ! = ast . getLineNo ( ) ; 
 + int forStatementEnd , int lambdaStatementEnd ) { 
 + return lastStatementEnd = = ast . getLineNo ( ) & & forStatementEnd ! = ast . getLineNo ( ) 
 + & & lambdaStatementEnd ! = ast . getLineNo ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 index b742885 . . 3f2d4a1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 @ @ - 92 , 7 + 92 , 12 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { 
 public void oneStatementNonCompilableInputTest ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createCheckConfig ( OneStatementPerLineCheck . class ) ; 
 final String [ ] expected = { 
 - " 24 : 6 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 31 : 6 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 36 : 58 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 37 : 58 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 37 : 74 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 38 : 50 : " + getCheckMessage ( MSG _ KEY ) , 
 + " 42 : 91 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 
 verify ( checkConfig , getNonCompilablePath ( " InputOneStatementPerLine . java " ) , expected ) ; 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java 
 index 65b8a2b . . 0da4ae7 100644 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLine . java 
 @ @ - 10 , 9 + 10 , 16 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 * Two import statements and one ' empty ' statement 
 * which are not on the same line are legal . 
 * / 
 + import java . awt . event . ActionEvent ; 
 import java . lang . annotation . Annotation ; 
 ; 
 import java . lang . String ; 
 + import java . util . LinkedList ; 
 + import java . util . List ; 
 + import java . util . concurrent . Callable ; 
 + import java . util . stream . Collectors ; 
 + 
 + import javax . swing . JCheckBox ; 
 
 public class InputOneStatementPerLine { 
 / * * 
 @ @ - 22 , 4 + 29 , 33 @ @ public class InputOneStatementPerLine { 
 * and rises violation . 
 * / 
 ; ; / / warn 
 + static { 
 + new JCheckBox ( ) . addActionListener ( ( final ActionEvent e ) - > { good ( ) ; } ) ; 
 + List < Integer > ints = new LinkedList < Integer > ( ) ; 
 + ints . stream ( ) . map ( t - > { return t * 2 ; } ) . filter ( t - > { return false ; } ) ; 
 + ints . stream ( ) . map ( t - > { int m = t * 2 ; return m ; } ) ; / / warn 
 + ints . stream ( ) . map ( t - > { int m = t * 2 ; return m ; } ) ; int i = 3 ; / / warn 
 + ints . stream ( ) . map ( t - > t * 2 ) ; int k = 4 ; / / warn 
 + ints . stream ( ) . map ( t - > t * 2 ) ; 
 + List < Integer > ints2 = new LinkedList < Integer > ( ) ; 
 + ints . stream ( ) . map ( t - > { return ints2 . stream ( ) . map ( w - > { return w * 2 ; } ) ; } ) ; 
 + ints . stream ( ) . map ( t - > { return ints2 . stream ( ) . map ( w - > { int m = w * 2 ; return m ; } ) ; } ) ; / / warn 
 + ints . stream ( ) . map ( t - > { 
 + return ints2 . stream ( ) . map ( 
 + w - > { 
 + int m = w * 2 ; 
 + return m ; 
 + } ) ; 
 + } ) ; 
 + ints . stream ( ) . map ( t - > { 
 + int k = 0 ; 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + k = i + k ; 
 + } 
 + return k ; 
 + } ) ; 
 + } 
 + 
 + private static void good ( ) { 
 + } 
 }

NEAREST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index 405f100 . . 3e92d5b 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 329 , 7 + 329 , 8 @ @ 
 < module name = " MethodTypeParameterName " / > 
 < module name = " PackageName " / > 
 < module name = " ParameterName " > 
 - < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " / > 
 + < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] + $ " / > 
 + < property name = " ignoreOverridden " value = " true " / > 
 < / module > 
 < module name = " StaticVariableName " > 
 < property name = " format " value = " ^ [ a - z ] [ a - zA - Z0 - 9 ] * $ " / >
