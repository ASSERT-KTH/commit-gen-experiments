BLEU SCORE: 0.0254507234234606

TEST MSG: Issue # 3065 : expanded message test to all locales
GENERATED MSG: Fixed bug ( 594469 ) where unit tests would fail under different locales . Also

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> index 65b6352 . . ea7eed5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java <nl> @ @ - 38 , 6 + 38 , 18 @ @ import com . puppycrawl . tools . checkstyle . checks . imports . ImportControlCheck ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class AllChecksTest extends BaseCheckTestSupport { <nl> + private static final Locale [ ] ALL _ LOCALES = { <nl> + Locale . GERMAN , <nl> + new Locale ( " es " ) , <nl> + new Locale ( " fi " ) , <nl> + Locale . FRENCH , <nl> + Locale . JAPANESE , <nl> + new Locale ( " pt " ) , <nl> + new Locale ( " tr " ) , <nl> + Locale . CHINESE , <nl> + Locale . ENGLISH , <nl> + } ; <nl> + <nl> @ Test <nl> public void testAllChecksWithDefaultConfiguration ( ) throws Exception { <nl> final String inputFilePath = getPath ( " InputDefaultConfig . java " ) ; <nl> @ @ - 190 , 17 + 202 , 33 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> message . setAccessible ( true ) ; <nl> } <nl> <nl> - final String result = CheckUtil . getCheckMessage ( module , message . get ( null ) <nl> - . toString ( ) ) ; <nl> - <nl> - Assert . assertNotNull ( module . getSimpleName ( ) + " should have text for the message ' " <nl> - + message . getName ( ) + " ' " , result ) ; <nl> - Assert . assertFalse ( <nl> - module . getSimpleName ( ) + " should have non - empty text for the message ' " <nl> - + message . getName ( ) + " ' " , result . trim ( ) . isEmpty ( ) ) ; <nl> - Assert . assertFalse ( module . getSimpleName ( ) <nl> - + " should have non - TODO text for the message ' " + message . getName ( ) + " ' " , <nl> - result . trim ( ) . startsWith ( " TODO " ) ) ; <nl> + for ( Locale locale : ALL _ LOCALES ) { <nl> + final String messageString = message . get ( null ) . toString ( ) ; <nl> + String result = null ; <nl> + <nl> + try { <nl> + result = CheckUtil . getCheckMessage ( module , locale , messageString ) ; <nl> + } <nl> + catch ( IllegalArgumentException ex ) { <nl> + Assert . fail ( module . getSimpleName ( ) + " with the message ' " + messageString <nl> + + " ' in locale ' " + locale . getLanguage ( ) + " ' failed with : " <nl> + + ex . getClass ( ) . getSimpleName ( ) + " - " + ex . getMessage ( ) ) ; <nl> + } <nl> + <nl> + Assert . assertNotNull ( <nl> + module . getSimpleName ( ) + " should have text for the message ' " <nl> + + messageString + " ' in locale " + locale . getLanguage ( ) + " ' " , <nl> + result ) ; <nl> + Assert . assertFalse ( <nl> + module . getSimpleName ( ) + " should have non - empty text for the message ' " <nl> + + messageString + " ' in locale ' " + locale . getLanguage ( ) + " ' " , <nl> + result . trim ( ) . isEmpty ( ) ) ; <nl> + Assert . assertFalse ( <nl> + module . getSimpleName ( ) + " should have non - TODO text for the message ' " <nl> + + messageString + " ' in locale " + locale . getLanguage ( ) + " ' " , <nl> + ! " todo . match " . equals ( messageString ) <nl> + & & result . trim ( ) . startsWith ( " TODO " ) ) ; <nl> + } <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java <nl> index e0f688b . . 08a3fbb 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java <nl> @ @ - 253 , 19 + 253 , 27 @ @ public final class CheckUtil { <nl> * Gets the check message ' as is ' from appropriate ' messages . properties ' <nl> * file . <nl> * <nl> - * @ param messageKey the key of message in ' messages . properties ' file . <nl> - * @ param arguments the arguments of message in ' messages . properties ' file . <nl> + * @ param locale the locale to get the message for . <nl> + * @ param messageKey the key of message in ' messages * . properties ' file . <nl> + * @ param arguments the arguments of message in ' messages * . properties ' file . <nl> * @ return the check ' s formatted message . <nl> * / <nl> - public static String getCheckMessage ( Class < ? > module , String messageKey , Object . . . arguments ) { <nl> + public static String getCheckMessage ( Class < ? > module , Locale locale , String messageKey , <nl> + Object . . . arguments ) { <nl> final Properties pr = new Properties ( ) ; <nl> try { <nl> - pr . load ( module . getResourceAsStream ( " messages . properties " ) ) ; <nl> + if ( locale = = Locale . ENGLISH ) { <nl> + pr . load ( module . getResourceAsStream ( " messages . properties " ) ) ; <nl> + } <nl> + else { <nl> + pr . load ( module <nl> + . getResourceAsStream ( " messages _ " + locale . getLanguage ( ) + " . properties " ) ) ; <nl> + } <nl> } <nl> catch ( IOException ex ) { <nl> return null ; <nl> } <nl> - final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , Locale . ROOT ) ; <nl> + final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , locale ) ; <nl> return formatter . format ( arguments ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / docs / anttask . html b / docs / anttask . html <nl> index b9e11f8 . . c68121f 100644 <nl> - - - a / docs / anttask . html <nl> + + + b / docs / anttask . html <nl> @ @ - 151 , 6 + 151 , 12 @ @ This task is included in the checkstyle distribution . < / p > <nl> < / tr > <nl> <nl> < tr > <nl> + < td valign = " top " > maxParameters < / td > <nl> + < td valign = " top " > Specifies the maximum number of parameters . Default value is defined < a href = " engine . html # numParams " > here < / a > . < / td > <nl> + < td align = " center " valign = " top " > No < / td > <nl> + < / tr > <nl> + <nl> + < tr > <nl> < td valign = " top " > todoPattern < / td > <nl> < td valign = " top " > Specifies the regular expression to match for to - do comments . Default value is defined < a href = " engine . html # todo " > here < / a > . < / td > <nl> < td align = " center " valign = " top " > No < / td > <nl> diff - - git a / docs / cmdline . html b / docs / cmdline . html <nl> index 71385a5 . . 70aecdc 100644 <nl> - - - a / docs / cmdline . html <nl> + + + b / docs / cmdline . html <nl> @ @ - 129 , 10 + 129 , 17 @ @ This command line tool is included in the checkstyle distribution . < / p > <nl> < td valign = " top " > checkstyle . maxfilelen < / td > <nl> < td valign = " top " > Specifies the maximum file length . Default value is defined < a href = " engine . html # fileLength " > here < / a > . < / td > <nl> < / tr > <nl> + <nl> + < tr > <nl> + < td valign = " top " > checkstyle . maxparameters < / td > <nl> + < td valign = " top " > Specifies the maximum number of parameters . Default value is defined < a href = " engine . html # numParams " > here < / a > . < / td > <nl> + < / tr > <nl> + <nl> < tr > <nl> < td valign = " top " > checkstyle . pattern . todo < / td > <nl> < td valign = " top " > Specifies the regular expression to match for to - do comments . Default value is defined < a href = " engine . html # todo " > here < / a > . < / td > <nl> < / tr > <nl> + <nl> < tr > <nl> < td valign = " top " > checkstyle . pattern . member < / td > <nl> < td valign = " top " > Specifies the regular expression to match against member variables . Default value is defined < a href = " engine . html # varformat " > here < / a > . < / td > <nl> diff - - git a / docs / engine . html b / docs / engine . html <nl> index 1b5f965 . . 4900a74 100644 <nl> - - - a / docs / engine . html <nl> + + + b / docs / engine . html <nl> @ @ - 205 , 6 + 205 , 9 @ @ <nl> < h3 > Tab characters < / h3 > <nl> < p > Checks for lines that contain tab ( < code > ' \ t ' < / code > ) characters . This can be turned off . < / p > <nl> <nl> + < h3 > < a name = " numParams " > Number of parameters < / a > < / h3 > <nl> + < p > Checks for the number of parameters in a declaration being greater than a specified amount . The default is < span class = " default " > & quot ; 7 & quot ; < / span > . < / p > <nl> + <nl> < h3 > < a name = " todo " > To - do comments < / a > < / h3 > <nl> < p > Checks for comments that contain a specified regular expression . The default is < span class = " default " > & quot ; TODO : & quot ; < / span > . < / p > <nl> <nl> diff - - git a / docs / releasenotes . html b / docs / releasenotes . html <nl> index 218600b . . d0be92b 100644 <nl> - - - a / docs / releasenotes . html <nl> + + + b / docs / releasenotes . html <nl> @ @ - 42 , 6 + 42 , 7 @ @ <nl> < p class = " body " > <nl> New features : <nl> < ul > <nl> + < li class = " body " > Detect the number of parameters in a declaration exceeding a specified amount ( request 582144 ) . < / li > <nl> < li class = " body " > Inspired by patch 580410 from Shinya Ohnuma , now the error message are localised . < / li > <nl> < li class = " body " > Support checking to determine if an unused < span class = " code " > @ throws < / span > exception is a subclass of < span class = " code " > java . lang . Error < / span > ( request 583719 ) . < / li > <nl> < li class = " body " > Incorporate patch 590931 from Vijay Aravamudhan to improve documentation of the build . xml file . < / li > <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / AuditEvent . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / AuditEvent . java <nl> index 75b6067 . . af8cf2f 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / AuditEvent . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / AuditEvent . java <nl> @ @ - 40 , 6 + 40 , 7 @ @ public class AuditEvent <nl> { <nl> / * * filename event associated with * * / <nl> private final String mFileName ; <nl> + / * * message associated with the event * * / <nl> private final LocalizedMessage mMessage ; <nl> <nl> / * * <nl> @ @ - 109 , 6 + 110 , 7 @ @ public class AuditEvent <nl> return mMessage . getColumnNo ( ) ; <nl> } <nl> <nl> + / * * @ return the localized message * * / <nl> public LocalizedMessage getLocalizedMessage ( ) <nl> { <nl> return mMessage ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java <nl> index c804c23 . . 4e7e26b 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java <nl> @ @ - 257 , 7 + 257 , 6 @ @ class Verifier <nl> checkModOrder ( aSig . getModSet ( ) ) ; <nl> <nl> / / Check for to many parameters <nl> - / / TODO : Add documentation and a test <nl> if ( aSig . getParams ( ) . size ( ) > mConfig . getMaxParameters ( ) ) { <nl> log ( aSig . getFirstLineNo ( ) , <nl> aSig . getFirstColNo ( ) ,

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 index 65b6352 . . ea7eed5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / AllChecksTest . java 
 @ @ - 38 , 6 + 38 , 18 @ @ import com . puppycrawl . tools . checkstyle . checks . imports . ImportControlCheck ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class AllChecksTest extends BaseCheckTestSupport { 
 + private static final Locale [ ] ALL _ LOCALES = { 
 + Locale . GERMAN , 
 + new Locale ( " es " ) , 
 + new Locale ( " fi " ) , 
 + Locale . FRENCH , 
 + Locale . JAPANESE , 
 + new Locale ( " pt " ) , 
 + new Locale ( " tr " ) , 
 + Locale . CHINESE , 
 + Locale . ENGLISH , 
 + } ; 
 + 
 @ Test 
 public void testAllChecksWithDefaultConfiguration ( ) throws Exception { 
 final String inputFilePath = getPath ( " InputDefaultConfig . java " ) ; 
 @ @ - 190 , 17 + 202 , 33 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 message . setAccessible ( true ) ; 
 } 
 
 - final String result = CheckUtil . getCheckMessage ( module , message . get ( null ) 
 - . toString ( ) ) ; 
 - 
 - Assert . assertNotNull ( module . getSimpleName ( ) + " should have text for the message ' " 
 - + message . getName ( ) + " ' " , result ) ; 
 - Assert . assertFalse ( 
 - module . getSimpleName ( ) + " should have non - empty text for the message ' " 
 - + message . getName ( ) + " ' " , result . trim ( ) . isEmpty ( ) ) ; 
 - Assert . assertFalse ( module . getSimpleName ( ) 
 - + " should have non - TODO text for the message ' " + message . getName ( ) + " ' " , 
 - result . trim ( ) . startsWith ( " TODO " ) ) ; 
 + for ( Locale locale : ALL _ LOCALES ) { 
 + final String messageString = message . get ( null ) . toString ( ) ; 
 + String result = null ; 
 + 
 + try { 
 + result = CheckUtil . getCheckMessage ( module , locale , messageString ) ; 
 + } 
 + catch ( IllegalArgumentException ex ) { 
 + Assert . fail ( module . getSimpleName ( ) + " with the message ' " + messageString 
 + + " ' in locale ' " + locale . getLanguage ( ) + " ' failed with : " 
 + + ex . getClass ( ) . getSimpleName ( ) + " - " + ex . getMessage ( ) ) ; 
 + } 
 + 
 + Assert . assertNotNull ( 
 + module . getSimpleName ( ) + " should have text for the message ' " 
 + + messageString + " ' in locale " + locale . getLanguage ( ) + " ' " , 
 + result ) ; 
 + Assert . assertFalse ( 
 + module . getSimpleName ( ) + " should have non - empty text for the message ' " 
 + + messageString + " ' in locale ' " + locale . getLanguage ( ) + " ' " , 
 + result . trim ( ) . isEmpty ( ) ) ; 
 + Assert . assertFalse ( 
 + module . getSimpleName ( ) + " should have non - TODO text for the message ' " 
 + + messageString + " ' in locale " + locale . getLanguage ( ) + " ' " , 
 + ! " todo . match " . equals ( messageString ) 
 + & & result . trim ( ) . startsWith ( " TODO " ) ) ; 
 + } 
 } 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java 
 index e0f688b . . 08a3fbb 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / CheckUtil . java 
 @ @ - 253 , 19 + 253 , 27 @ @ public final class CheckUtil { 
 * Gets the check message ' as is ' from appropriate ' messages . properties ' 
 * file . 
 * 
 - * @ param messageKey the key of message in ' messages . properties ' file . 
 - * @ param arguments the arguments of message in ' messages . properties ' file . 
 + * @ param locale the locale to get the message for . 
 + * @ param messageKey the key of message in ' messages * . properties ' file . 
 + * @ param arguments the arguments of message in ' messages * . properties ' file . 
 * @ return the check ' s formatted message . 
 * / 
 - public static String getCheckMessage ( Class < ? > module , String messageKey , Object . . . arguments ) { 
 + public static String getCheckMessage ( Class < ? > module , Locale locale , String messageKey , 
 + Object . . . arguments ) { 
 final Properties pr = new Properties ( ) ; 
 try { 
 - pr . load ( module . getResourceAsStream ( " messages . properties " ) ) ; 
 + if ( locale = = Locale . ENGLISH ) { 
 + pr . load ( module . getResourceAsStream ( " messages . properties " ) ) ; 
 + } 
 + else { 
 + pr . load ( module 
 + . getResourceAsStream ( " messages _ " + locale . getLanguage ( ) + " . properties " ) ) ; 
 + } 
 } 
 catch ( IOException ex ) { 
 return null ; 
 } 
 - final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , Locale . ROOT ) ; 
 + final MessageFormat formatter = new MessageFormat ( pr . getProperty ( messageKey ) , locale ) ; 
 return formatter . format ( arguments ) ; 
 } 


NEAREST DIFF:
diff - - git a / docs / anttask . html b / docs / anttask . html 
 index b9e11f8 . . c68121f 100644 
 - - - a / docs / anttask . html 
 + + + b / docs / anttask . html 
 @ @ - 151 , 6 + 151 , 12 @ @ This task is included in the checkstyle distribution . < / p > 
 < / tr > 
 
 < tr > 
 + < td valign = " top " > maxParameters < / td > 
 + < td valign = " top " > Specifies the maximum number of parameters . Default value is defined < a href = " engine . html # numParams " > here < / a > . < / td > 
 + < td align = " center " valign = " top " > No < / td > 
 + < / tr > 
 + 
 + < tr > 
 < td valign = " top " > todoPattern < / td > 
 < td valign = " top " > Specifies the regular expression to match for to - do comments . Default value is defined < a href = " engine . html # todo " > here < / a > . < / td > 
 < td align = " center " valign = " top " > No < / td > 
 diff - - git a / docs / cmdline . html b / docs / cmdline . html 
 index 71385a5 . . 70aecdc 100644 
 - - - a / docs / cmdline . html 
 + + + b / docs / cmdline . html 
 @ @ - 129 , 10 + 129 , 17 @ @ This command line tool is included in the checkstyle distribution . < / p > 
 < td valign = " top " > checkstyle . maxfilelen < / td > 
 < td valign = " top " > Specifies the maximum file length . Default value is defined < a href = " engine . html # fileLength " > here < / a > . < / td > 
 < / tr > 
 + 
 + < tr > 
 + < td valign = " top " > checkstyle . maxparameters < / td > 
 + < td valign = " top " > Specifies the maximum number of parameters . Default value is defined < a href = " engine . html # numParams " > here < / a > . < / td > 
 + < / tr > 
 + 
 < tr > 
 < td valign = " top " > checkstyle . pattern . todo < / td > 
 < td valign = " top " > Specifies the regular expression to match for to - do comments . Default value is defined < a href = " engine . html # todo " > here < / a > . < / td > 
 < / tr > 
 + 
 < tr > 
 < td valign = " top " > checkstyle . pattern . member < / td > 
 < td valign = " top " > Specifies the regular expression to match against member variables . Default value is defined < a href = " engine . html # varformat " > here < / a > . < / td > 
 diff - - git a / docs / engine . html b / docs / engine . html 
 index 1b5f965 . . 4900a74 100644 
 - - - a / docs / engine . html 
 + + + b / docs / engine . html 
 @ @ - 205 , 6 + 205 , 9 @ @ 
 < h3 > Tab characters < / h3 > 
 < p > Checks for lines that contain tab ( < code > ' \ t ' < / code > ) characters . This can be turned off . < / p > 
 
 + < h3 > < a name = " numParams " > Number of parameters < / a > < / h3 > 
 + < p > Checks for the number of parameters in a declaration being greater than a specified amount . The default is < span class = " default " > & quot ; 7 & quot ; < / span > . < / p > 
 + 
 < h3 > < a name = " todo " > To - do comments < / a > < / h3 > 
 < p > Checks for comments that contain a specified regular expression . The default is < span class = " default " > & quot ; TODO : & quot ; < / span > . < / p > 
 
 diff - - git a / docs / releasenotes . html b / docs / releasenotes . html 
 index 218600b . . d0be92b 100644 
 - - - a / docs / releasenotes . html 
 + + + b / docs / releasenotes . html 
 @ @ - 42 , 6 + 42 , 7 @ @ 
 < p class = " body " > 
 New features : 
 < ul > 
 + < li class = " body " > Detect the number of parameters in a declaration exceeding a specified amount ( request 582144 ) . < / li > 
 < li class = " body " > Inspired by patch 580410 from Shinya Ohnuma , now the error message are localised . < / li > 
 < li class = " body " > Support checking to determine if an unused < span class = " code " > @ throws < / span > exception is a subclass of < span class = " code " > java . lang . Error < / span > ( request 583719 ) . < / li > 
 < li class = " body " > Incorporate patch 590931 from Vijay Aravamudhan to improve documentation of the build . xml file . < / li > 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / AuditEvent . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / AuditEvent . java 
 index 75b6067 . . af8cf2f 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / AuditEvent . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / AuditEvent . java 
 @ @ - 40 , 6 + 40 , 7 @ @ public class AuditEvent 
 { 
 / * * filename event associated with * * / 
 private final String mFileName ; 
 + / * * message associated with the event * * / 
 private final LocalizedMessage mMessage ; 
 
 / * * 
 @ @ - 109 , 6 + 110 , 7 @ @ public class AuditEvent 
 return mMessage . getColumnNo ( ) ; 
 } 
 
 + / * * @ return the localized message * * / 
 public LocalizedMessage getLocalizedMessage ( ) 
 { 
 return mMessage ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java 
 index c804c23 . . 4e7e26b 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / Verifier . java 
 @ @ - 257 , 7 + 257 , 6 @ @ class Verifier 
 checkModOrder ( aSig . getModSet ( ) ) ; 
 
 / / Check for to many parameters 
 - / / TODO : Add documentation and a test 
 if ( aSig . getParams ( ) . size ( ) > mConfig . getMaxParameters ( ) ) { 
 log ( aSig . getFirstLineNo ( ) , 
 aSig . getFirstColNo ( ) ,
