BLEU SCORE: 0.018738883683389617

TEST MSG: Issue # 6320 : added REMOVE _ CONDITIONALS mutator for treewalker
GENERATED MSG: Made TreeWalker a FileSetCheck and moved the

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 7311d69 . . 6efa053 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2743 , 6 + 2743 , 7 @ @ <nl> < mutator > INVERT _ NEGS < / mutator > <nl> < mutator > MATH < / mutator > <nl> < mutator > NEGATE _ CONDITIONALS < / mutator > <nl> + < mutator > REMOVE _ CONDITIONALS < / mutator > <nl> < mutator > RETURN _ VALS < / mutator > <nl> < mutator > TRUE _ RETURNS < / mutator > <nl> < mutator > VOID _ METHOD _ CALLS < / mutator > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java <nl> index 2af4a29 . . ba637fb 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java <nl> @ @ - 221 , 21 + 221 , 20 @ @ public class JavadocDetailNodeParser { <nl> <nl> ParseTree nextParseTreeSibling = getNextSibling ( parseTreeParent ) ; <nl> <nl> - if ( nextJavadocSibling = = null ) { <nl> - JavadocNodeImpl tempJavadocParent = <nl> + while ( nextJavadocSibling = = null ) { <nl> + currentJavadocParent = <nl> ( JavadocNodeImpl ) currentJavadocParent . getParent ( ) ; <nl> <nl> - ParseTree tempParseTreeParent = parseTreeParent . getParent ( ) ; <nl> + parseTreeParent = parseTreeParent . getParent ( ) ; <nl> <nl> - while ( nextJavadocSibling = = null & & tempJavadocParent ! = null ) { <nl> - nextJavadocSibling = ( JavadocNodeImpl ) JavadocUtil <nl> - . getNextSibling ( tempJavadocParent ) ; <nl> + if ( currentJavadocParent = = null ) { <nl> + break ; <nl> + } <nl> <nl> - nextParseTreeSibling = getNextSibling ( tempParseTreeParent ) ; <nl> + nextJavadocSibling = ( JavadocNodeImpl ) JavadocUtil <nl> + . getNextSibling ( currentJavadocParent ) ; <nl> <nl> - tempJavadocParent = ( JavadocNodeImpl ) tempJavadocParent . getParent ( ) ; <nl> - tempParseTreeParent = tempParseTreeParent . getParent ( ) ; <nl> - } <nl> + nextParseTreeSibling = getNextSibling ( parseTreeParent ) ; <nl> } <nl> currentJavadocParent = nextJavadocSibling ; <nl> parseTreeParent = nextParseTreeSibling ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index 0ac7861 . . 6be44a9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 41 , 7 + 41 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . ExternalResourceHolder ; <nl> import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> - import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; <nl> <nl> / * * <nl> @ @ - 175 , 8 + 174 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> @ Override <nl> protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { <nl> / / check if already checked and passed the file <nl> - if ( CommonUtil . matchesFileExtension ( file , getFileExtensions ( ) ) <nl> - & & ( ! ordinaryChecks . isEmpty ( ) | | ! commentChecks . isEmpty ( ) ) ) { <nl> + if ( ! ordinaryChecks . isEmpty ( ) | | ! commentChecks . isEmpty ( ) ) { <nl> final FileContents contents = new FileContents ( fileText ) ; <nl> final DetailAST rootAST = JavaParser . parse ( contents ) ; <nl> if ( ! ordinaryChecks . isEmpty ( ) ) { <nl> @ @ - 301 , 16 + 299 , 14 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> * @ throws CheckstyleException when validation of default tokens fails <nl> * / <nl> private static void validateDefaultTokens ( AbstractCheck check ) throws CheckstyleException { <nl> - if ( check . getRequiredTokens ( ) . length ! = 0 ) { <nl> - final int [ ] defaultTokens = check . getDefaultTokens ( ) ; <nl> - Arrays . sort ( defaultTokens ) ; <nl> - for ( final int token : check . getRequiredTokens ( ) ) { <nl> - if ( Arrays . binarySearch ( defaultTokens , token ) < 0 ) { <nl> - final String message = String . format ( Locale . ROOT , " Token \ " % s \ " from required " <nl> - + " tokens was not found in default tokens list in check % s " , <nl> - token , check . getClass ( ) . getName ( ) ) ; <nl> - throw new CheckstyleException ( message ) ; <nl> - } <nl> + final int [ ] defaultTokens = check . getDefaultTokens ( ) ; <nl> + Arrays . sort ( defaultTokens ) ; <nl> + for ( final int token : check . getRequiredTokens ( ) ) { <nl> + if ( Arrays . binarySearch ( defaultTokens , token ) < 0 ) { <nl> + final String message = String . format ( Locale . ROOT , " Token \ " % s \ " from required " <nl> + + " tokens was not found in default tokens list in check % s " , <nl> + token , check . getClass ( ) . getName ( ) ) ; <nl> + throw new CheckstyleException ( message ) ; <nl> } <nl> } <nl> } <nl> @ @ - 324 , 11 + 320 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> private void walk ( DetailAST ast , FileContents contents , <nl> AstState astState ) { <nl> notifyBegin ( ast , contents , astState ) ; <nl> - <nl> - / / empty files are not flagged by javac , will yield ast = = null <nl> - if ( ast ! = null ) { <nl> - processIter ( ast , astState ) ; <nl> - } <nl> + processIter ( ast , astState ) ; <nl> notifyEnd ( ast , astState ) ; <nl> } <nl> <nl> @ @ - 418 , 18 + 410 , 14 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> * @ return list of visitors <nl> * / <nl> private Collection < AbstractCheck > getListOfChecks ( DetailAST ast , AstState astState ) { <nl> - Collection < AbstractCheck > visitors = null ; <nl> + final Collection < AbstractCheck > visitors ; <nl> final String tokenType = TokenUtil . getTokenName ( ast . getType ( ) ) ; <nl> <nl> if ( astState = = AstState . WITH _ COMMENTS ) { <nl> - if ( tokenToCommentChecks . containsKey ( tokenType ) ) { <nl> - visitors = tokenToCommentChecks . get ( tokenType ) ; <nl> - } <nl> + visitors = tokenToCommentChecks . get ( tokenType ) ; <nl> } <nl> else { <nl> - if ( tokenToOrdinaryChecks . containsKey ( tokenType ) ) { <nl> - visitors = tokenToOrdinaryChecks . get ( tokenType ) ; <nl> - } <nl> + visitors = tokenToOrdinaryChecks . get ( tokenType ) ; <nl> } <nl> return visitors ; <nl> } <nl> @ @ - 503 , 9 + 491 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> while ( curNode ! = null & & toVisit = = null ) { <nl> notifyLeave ( curNode , astState ) ; <nl> toVisit = curNode . getNextSibling ( ) ; <nl> - if ( toVisit = = null ) { <nl> - curNode = curNode . getParent ( ) ; <nl> - } <nl> + curNode = curNode . getParent ( ) ; <nl> } <nl> curNode = toVisit ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index 9de99a1 . . d0cc622 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 23 , 6 + 23 , 10 @ @ import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MS <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> + import static org . mockito . Mockito . times ; <nl> + import static org . powermock . api . mockito . PowerMockito . spy ; <nl> + import static org . powermock . api . mockito . PowerMockito . verifyPrivate ; <nl> <nl> import java . io . File ; <nl> import java . io . Writer ; <nl> @ @ - 39 , 13 + 43 , 18 @ @ import java . util . regex . Pattern ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . rules . TemporaryFolder ; <nl> + import org . junit . runner . RunWith ; <nl> import org . mockito . internal . util . Checks ; <nl> + import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> + import org . powermock . modules . junit4 . PowerMockRunner ; <nl> import org . powermock . reflect . Whitebox ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . api . Context ; <nl> + import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck ; <nl> @ @ - 62 , 6 + 71 , 8 @ @ import com . puppycrawl . tools . checkstyle . filters . SuppressionCommentFilter ; <nl> import com . puppycrawl . tools . checkstyle . filters . SuppressionXpathFilter ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> <nl> + @ RunWith ( PowerMockRunner . class ) <nl> + @ PrepareForTest ( TreeWalker . class ) <nl> public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> <nl> @ Rule <nl> @ @ - 344 , 52 + 355 , 42 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> <nl> @ Test <nl> public void testBehaviourWithOnlyOrdinaryChecks ( ) throws Exception { <nl> - final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> - treeWalker . configure ( createModuleConfig ( TypeNameCheck . class ) ) ; <nl> + final TreeWalker treeWalkerSpy = spy ( new TreeWalker ( ) ) ; <nl> + final Class < ? > classAstState = <nl> + Class . forName ( " com . puppycrawl . tools . checkstyle . TreeWalker $ AstState " ) ; <nl> final PackageObjectFactory factory = new PackageObjectFactory ( <nl> new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - treeWalker . setModuleFactory ( factory ) ; <nl> - treeWalker . setupChild ( createModuleConfig ( TypeNameCheck . class ) ) ; <nl> + treeWalkerSpy . configure ( createModuleConfig ( TypeNameCheck . class ) ) ; <nl> + treeWalkerSpy . setModuleFactory ( factory ) ; <nl> + treeWalkerSpy . setupChild ( createModuleConfig ( TypeNameCheck . class ) ) ; <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> - lines . add ( " class a % $ # { } " ) ; <nl> - final FileText fileText = new FileText ( file , lines ) ; <nl> - <nl> - try { <nl> - treeWalker . processFiltered ( file , fileText ) ; <nl> - fail ( " file is not compilable , exception is expected " ) ; <nl> - } <nl> - catch ( CheckstyleException exception ) { <nl> - final String message = <nl> - " TokenStreamRecognitionException occurred while parsing file " ; <nl> - assertTrue ( " Error message is unexpected " , <nl> - exception . getMessage ( ) . contains ( message ) ) ; <nl> - } <nl> + lines . add ( " class Test { } " ) ; <nl> + treeWalkerSpy . processFiltered ( file , new FileText ( file , lines ) ) ; <nl> + verifyPrivate ( treeWalkerSpy , times ( 1 ) ) . invoke ( " walk " , <nl> + any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; <nl> + verifyPrivate ( treeWalkerSpy , times ( 0 ) ) . invoke ( " getFilteredMessages " , <nl> + any ( String . class ) , any ( FileContents . class ) , any ( DetailAST . class ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testBehaviourWithOnlyCommentChecks ( ) throws Exception { <nl> - final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> - treeWalker . configure ( createModuleConfig ( CommentsIndentationCheck . class ) ) ; <nl> + final TreeWalker treeWalkerSpy = spy ( new TreeWalker ( ) ) ; <nl> + final Class < ? > classAstState = <nl> + Class . forName ( " com . puppycrawl . tools . checkstyle . TreeWalker $ AstState " ) ; <nl> final PackageObjectFactory factory = new PackageObjectFactory ( <nl> new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - treeWalker . setModuleFactory ( factory ) ; <nl> - treeWalker . setupChild ( createModuleConfig ( CommentsIndentationCheck . class ) ) ; <nl> + treeWalkerSpy . configure ( createModuleConfig ( CommentsIndentationCheck . class ) ) ; <nl> + treeWalkerSpy . setModuleFactory ( factory ) ; <nl> + treeWalkerSpy . setupChild ( createModuleConfig ( CommentsIndentationCheck . class ) ) ; <nl> final File file = temporaryFolder . newFile ( " file . java " ) ; <nl> final List < String > lines = new ArrayList < > ( ) ; <nl> - lines . add ( " class a % $ # { } " ) ; <nl> - final FileText fileText = new FileText ( file , lines ) ; <nl> - <nl> - try { <nl> - treeWalker . processFiltered ( file , fileText ) ; <nl> - fail ( " file is not compilable , exception is expected " ) ; <nl> - } <nl> - catch ( CheckstyleException exception ) { <nl> - final String message = <nl> - " TokenStreamRecognitionException occurred while parsing file " ; <nl> - assertTrue ( " Error message is unexpected " , <nl> - exception . getMessage ( ) . contains ( message ) ) ; <nl> - } <nl> + lines . add ( " class Test { } " ) ; <nl> + treeWalkerSpy . processFiltered ( file , new FileText ( file , lines ) ) ; <nl> + verifyPrivate ( treeWalkerSpy , times ( 1 ) ) . invoke ( " walk " , <nl> + any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; <nl> + verifyPrivate ( treeWalkerSpy , times ( 0 ) ) . invoke ( " getFilteredMessages " , <nl> + any ( String . class ) , any ( FileContents . class ) , any ( DetailAST . class ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 559 , 6 + 560 , 11 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> verify ( checkerConfig , filePath , expected ) ; <nl> } <nl> <nl> + / * * <nl> + * Non meaningful javadoc just to contain " noinspection " tag . <nl> + * Till https : / / youtrack . jetbrains . com / issue / IDEA - 187210 <nl> + * @ noinspection JUnitTestCaseWithNoTests <nl> + * / <nl> private static class BadJavaDocCheck extends AbstractCheck { <nl> <nl> @ Override <nl> @ @ - 578 , 6 + 584 , 11 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> <nl> } <nl> <nl> + / * * <nl> + * Non meaningful javadoc just to contain " noinspection " tag . <nl> + * Till https : / / youtrack . jetbrains . com / issue / IDEA - 187210 <nl> + * @ noinspection JUnitTestCaseWithNoTests <nl> + * / <nl> private static class VerifyInitCheck extends AbstractCheck { <nl> <nl> private static boolean initWasCalled ; <nl> @ @ - 609 , 6 + 620 , 11 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> <nl> } <nl> <nl> + / * * <nl> + * Non meaningful javadoc just to contain " noinspection " tag . <nl> + * Till https : / / youtrack . jetbrains . com / issue / IDEA - 187210 <nl> + * @ noinspection JUnitTestCaseWithNoTests <nl> + * / <nl> private static class VerifyDestroyCheck extends AbstractCheck { <nl> <nl> private static boolean destroyWasCalled ; <nl> @ @ - 644 , 6 + 660 , 11 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> <nl> } <nl> <nl> + / * * <nl> + * Non meaningful javadoc just to contain " noinspection " tag . <nl> + * Till https : / / youtrack . jetbrains . com / issue / IDEA - 187210 <nl> + * @ noinspection JUnitTestCaseWithNoTests <nl> + * / <nl> private static class VerifyDestroyCommentCheck extends VerifyDestroyCheck { <nl> <nl> @ Override <nl> @ @ - 653 , 6 + 674 , 11 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> <nl> } <nl> <nl> + / * * <nl> + * Non meaningful javadoc just to contain " noinspection " tag . <nl> + * Till https : / / youtrack . jetbrains . com / issue / IDEA - 187210 <nl> + * @ noinspection JUnitTestCaseWithNoTests <nl> + * / <nl> private static class RequiredTokenIsNotInDefaultsCheck extends AbstractCheck { <nl> <nl> @ Override <nl> @ @ - 672 , 6 + 698 , 11 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { <nl> <nl> } <nl> <nl> + / * * <nl> + * Non meaningful javadoc just to contain " noinspection " tag . <nl> + * Till https : / / youtrack . jetbrains . com / issue / IDEA - 187210 <nl> + * @ noinspection JUnitTestCaseWithNoTests <nl> + * / <nl> private static class RequiredTokenIsEmptyIntArray extends AbstractCheck { <nl> <nl> @ Override
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalFinalVariableNameCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalFinalVariableNameCheck . java <nl> index 9b689a5 . . 2343260 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalFinalVariableNameCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalFinalVariableNameCheck . java <nl> @ @ - 43 , 7 + 43 , 7 @ @ public class LocalFinalVariableNameCheck <nl> return new int [ ] { TokenTypes . VARIABLE _ DEF } ; <nl> } <nl> <nl> - / * * @ see com . puppycrawl . tools . checkstyle . check . AbstractNameCheck * / <nl> + / * * @ see com . puppycrawl . tools . checkstyle . checks . AbstractNameCheck * / <nl> protected final boolean mustCheckName ( DetailAST aAST ) <nl> { <nl> final DetailAST modifiersAST = <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalVariableNameCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalVariableNameCheck . java <nl> index b5e35d2 . . ebda74f 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalVariableNameCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalVariableNameCheck . java <nl> @ @ - 43 , 7 + 43 , 7 @ @ public class LocalVariableNameCheck <nl> return new int [ ] { TokenTypes . VARIABLE _ DEF } ; <nl> } <nl> <nl> - / * * @ see com . puppycrawl . tools . checkstyle . check . AbstractNameCheck * / <nl> + / * * @ see com . puppycrawl . tools . checkstyle . checks . AbstractNameCheck * / <nl> protected final boolean mustCheckName ( DetailAST aAST ) <nl> { <nl> final DetailAST modifiersAST = <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MemberNameCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MemberNameCheck . java <nl> index 14b6ae0 . . 4f468bf 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MemberNameCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MemberNameCheck . java <nl> @ @ - 43 , 7 + 43 , 7 @ @ public class MemberNameCheck <nl> return new int [ ] { TokenTypes . VARIABLE _ DEF } ; <nl> } <nl> <nl> - / * * @ see com . puppycrawl . tools . checkstyle . check . AbstractNameCheck * / <nl> + / * * @ see com . puppycrawl . tools . checkstyle . checks . AbstractNameCheck * / <nl> protected final boolean mustCheckName ( DetailAST aAST ) <nl> { <nl> DetailAST modifiersAST = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / PublicMemberNameCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / PublicMemberNameCheck . java <nl> index 2fa014d . . cbcb345 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / PublicMemberNameCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / PublicMemberNameCheck . java <nl> @ @ - 43 , 7 + 43 , 7 @ @ public class PublicMemberNameCheck <nl> return new int [ ] { TokenTypes . VARIABLE _ DEF } ; <nl> } <nl> <nl> - / * * @ see com . puppycrawl . tools . checkstyle . check . AbstractNameCheck * / <nl> + / * * @ see com . puppycrawl . tools . checkstyle . checks . AbstractNameCheck * / <nl> protected final boolean mustCheckName ( DetailAST aAST ) <nl> { <nl> DetailAST modifiersAST = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / StaticVariableNameCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / StaticVariableNameCheck . java <nl> index 5a38d07 . . 4b164bc 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / StaticVariableNameCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / StaticVariableNameCheck . java <nl> @ @ - 43 , 7 + 43 , 7 @ @ public class StaticVariableNameCheck <nl> return new int [ ] { TokenTypes . VARIABLE _ DEF } ; <nl> } <nl> <nl> - / * * @ see com . puppycrawl . tools . checkstyle . check . AbstractNameCheck * / <nl> + / * * @ see com . puppycrawl . tools . checkstyle . checks . AbstractNameCheck * / <nl> protected final boolean mustCheckName ( DetailAST aAST ) <nl> { <nl> DetailAST modifiersAST = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / TypeLeftCurlyCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / TypeLeftCurlyCheck . java <nl> index 31f357f . . cbf2e88 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / TypeLeftCurlyCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / TypeLeftCurlyCheck . java <nl> @ @ - 31 , 14 + 31 , 14 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> public class TypeLeftCurlyCheck <nl> extends LeftCurlyCheck <nl> { <nl> - / * * @ see Check * / <nl> + / * * @ see com . puppycrawl . tools . checkstyle . api . Check * / <nl> public int [ ] getDefaultTokens ( ) <nl> { <nl> return new int [ ] { TokenTypes . INTERFACE _ DEF , <nl> TokenTypes . CLASS _ DEF } ; <nl> } <nl> <nl> - / * * @ see Check * / <nl> + / * * @ see com . puppycrawl . tools . checkstyle . api . Check * / <nl> public void visitToken ( DetailAST aAST ) <nl> { <nl> final DetailAST brace =

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 7311d69 . . 6efa053 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2743 , 6 + 2743 , 7 @ @ 
 < mutator > INVERT _ NEGS < / mutator > 
 < mutator > MATH < / mutator > 
 < mutator > NEGATE _ CONDITIONALS < / mutator > 
 + < mutator > REMOVE _ CONDITIONALS < / mutator > 
 < mutator > RETURN _ VALS < / mutator > 
 < mutator > TRUE _ RETURNS < / mutator > 
 < mutator > VOID _ METHOD _ CALLS < / mutator > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java 
 index 2af4a29 . . ba637fb 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocDetailNodeParser . java 
 @ @ - 221 , 21 + 221 , 20 @ @ public class JavadocDetailNodeParser { 
 
 ParseTree nextParseTreeSibling = getNextSibling ( parseTreeParent ) ; 
 
 - if ( nextJavadocSibling = = null ) { 
 - JavadocNodeImpl tempJavadocParent = 
 + while ( nextJavadocSibling = = null ) { 
 + currentJavadocParent = 
 ( JavadocNodeImpl ) currentJavadocParent . getParent ( ) ; 
 
 - ParseTree tempParseTreeParent = parseTreeParent . getParent ( ) ; 
 + parseTreeParent = parseTreeParent . getParent ( ) ; 
 
 - while ( nextJavadocSibling = = null & & tempJavadocParent ! = null ) { 
 - nextJavadocSibling = ( JavadocNodeImpl ) JavadocUtil 
 - . getNextSibling ( tempJavadocParent ) ; 
 + if ( currentJavadocParent = = null ) { 
 + break ; 
 + } 
 
 - nextParseTreeSibling = getNextSibling ( tempParseTreeParent ) ; 
 + nextJavadocSibling = ( JavadocNodeImpl ) JavadocUtil 
 + . getNextSibling ( currentJavadocParent ) ; 
 
 - tempJavadocParent = ( JavadocNodeImpl ) tempJavadocParent . getParent ( ) ; 
 - tempParseTreeParent = tempParseTreeParent . getParent ( ) ; 
 - } 
 + nextParseTreeSibling = getNextSibling ( parseTreeParent ) ; 
 } 
 currentJavadocParent = nextJavadocSibling ; 
 parseTreeParent = nextParseTreeSibling ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index 0ac7861 . . 6be44a9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 41 , 7 + 41 , 6 @ @ import com . puppycrawl . tools . checkstyle . api . ExternalResourceHolder ; 
 import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 - import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; 
 
 / * * 
 @ @ - 175 , 8 + 174 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 @ Override 
 protected void processFiltered ( File file , FileText fileText ) throws CheckstyleException { 
 / / check if already checked and passed the file 
 - if ( CommonUtil . matchesFileExtension ( file , getFileExtensions ( ) ) 
 - & & ( ! ordinaryChecks . isEmpty ( ) | | ! commentChecks . isEmpty ( ) ) ) { 
 + if ( ! ordinaryChecks . isEmpty ( ) | | ! commentChecks . isEmpty ( ) ) { 
 final FileContents contents = new FileContents ( fileText ) ; 
 final DetailAST rootAST = JavaParser . parse ( contents ) ; 
 if ( ! ordinaryChecks . isEmpty ( ) ) { 
 @ @ - 301 , 16 + 299 , 14 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 * @ throws CheckstyleException when validation of default tokens fails 
 * / 
 private static void validateDefaultTokens ( AbstractCheck check ) throws CheckstyleException { 
 - if ( check . getRequiredTokens ( ) . length ! = 0 ) { 
 - final int [ ] defaultTokens = check . getDefaultTokens ( ) ; 
 - Arrays . sort ( defaultTokens ) ; 
 - for ( final int token : check . getRequiredTokens ( ) ) { 
 - if ( Arrays . binarySearch ( defaultTokens , token ) < 0 ) { 
 - final String message = String . format ( Locale . ROOT , " Token \ " % s \ " from required " 
 - + " tokens was not found in default tokens list in check % s " , 
 - token , check . getClass ( ) . getName ( ) ) ; 
 - throw new CheckstyleException ( message ) ; 
 - } 
 + final int [ ] defaultTokens = check . getDefaultTokens ( ) ; 
 + Arrays . sort ( defaultTokens ) ; 
 + for ( final int token : check . getRequiredTokens ( ) ) { 
 + if ( Arrays . binarySearch ( defaultTokens , token ) < 0 ) { 
 + final String message = String . format ( Locale . ROOT , " Token \ " % s \ " from required " 
 + + " tokens was not found in default tokens list in check % s " , 
 + token , check . getClass ( ) . getName ( ) ) ; 
 + throw new CheckstyleException ( message ) ; 
 } 
 } 
 } 
 @ @ - 324 , 11 + 320 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 private void walk ( DetailAST ast , FileContents contents , 
 AstState astState ) { 
 notifyBegin ( ast , contents , astState ) ; 
 - 
 - / / empty files are not flagged by javac , will yield ast = = null 
 - if ( ast ! = null ) { 
 - processIter ( ast , astState ) ; 
 - } 
 + processIter ( ast , astState ) ; 
 notifyEnd ( ast , astState ) ; 
 } 
 
 @ @ - 418 , 18 + 410 , 14 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 * @ return list of visitors 
 * / 
 private Collection < AbstractCheck > getListOfChecks ( DetailAST ast , AstState astState ) { 
 - Collection < AbstractCheck > visitors = null ; 
 + final Collection < AbstractCheck > visitors ; 
 final String tokenType = TokenUtil . getTokenName ( ast . getType ( ) ) ; 
 
 if ( astState = = AstState . WITH _ COMMENTS ) { 
 - if ( tokenToCommentChecks . containsKey ( tokenType ) ) { 
 - visitors = tokenToCommentChecks . get ( tokenType ) ; 
 - } 
 + visitors = tokenToCommentChecks . get ( tokenType ) ; 
 } 
 else { 
 - if ( tokenToOrdinaryChecks . containsKey ( tokenType ) ) { 
 - visitors = tokenToOrdinaryChecks . get ( tokenType ) ; 
 - } 
 + visitors = tokenToOrdinaryChecks . get ( tokenType ) ; 
 } 
 return visitors ; 
 } 
 @ @ - 503 , 9 + 491 , 7 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 while ( curNode ! = null & & toVisit = = null ) { 
 notifyLeave ( curNode , astState ) ; 
 toVisit = curNode . getNextSibling ( ) ; 
 - if ( toVisit = = null ) { 
 - curNode = curNode . getParent ( ) ; 
 - } 
 + curNode = curNode . getParent ( ) ; 
 } 
 curNode = toVisit ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index 9de99a1 . . d0cc622 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 23 , 6 + 23 , 10 @ @ import static com . puppycrawl . tools . checkstyle . checks . naming . AbstractNameCheck . MS 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 + import static org . mockito . ArgumentMatchers . any ; 
 + import static org . mockito . Mockito . times ; 
 + import static org . powermock . api . mockito . PowerMockito . spy ; 
 + import static org . powermock . api . mockito . PowerMockito . verifyPrivate ; 
 
 import java . io . File ; 
 import java . io . Writer ; 
 @ @ - 39 , 13 + 43 , 18 @ @ import java . util . regex . Pattern ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . rules . TemporaryFolder ; 
 + import org . junit . runner . RunWith ; 
 import org . mockito . internal . util . Checks ; 
 + import org . powermock . core . classloader . annotations . PrepareForTest ; 
 + import org . powermock . modules . junit4 . PowerMockRunner ; 
 import org . powermock . reflect . Whitebox ; 
 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . api . Context ; 
 + import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck ; 
 @ @ - 62 , 6 + 71 , 8 @ @ import com . puppycrawl . tools . checkstyle . filters . SuppressionCommentFilter ; 
 import com . puppycrawl . tools . checkstyle . filters . SuppressionXpathFilter ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 
 + @ RunWith ( PowerMockRunner . class ) 
 + @ PrepareForTest ( TreeWalker . class ) 
 public class TreeWalkerTest extends AbstractModuleTestSupport { 
 
 @ Rule 
 @ @ - 344 , 52 + 355 , 42 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 
 @ Test 
 public void testBehaviourWithOnlyOrdinaryChecks ( ) throws Exception { 
 - final TreeWalker treeWalker = new TreeWalker ( ) ; 
 - treeWalker . configure ( createModuleConfig ( TypeNameCheck . class ) ) ; 
 + final TreeWalker treeWalkerSpy = spy ( new TreeWalker ( ) ) ; 
 + final Class < ? > classAstState = 
 + Class . forName ( " com . puppycrawl . tools . checkstyle . TreeWalker $ AstState " ) ; 
 final PackageObjectFactory factory = new PackageObjectFactory ( 
 new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - treeWalker . setModuleFactory ( factory ) ; 
 - treeWalker . setupChild ( createModuleConfig ( TypeNameCheck . class ) ) ; 
 + treeWalkerSpy . configure ( createModuleConfig ( TypeNameCheck . class ) ) ; 
 + treeWalkerSpy . setModuleFactory ( factory ) ; 
 + treeWalkerSpy . setupChild ( createModuleConfig ( TypeNameCheck . class ) ) ; 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 final List < String > lines = new ArrayList < > ( ) ; 
 - lines . add ( " class a % $ # { } " ) ; 
 - final FileText fileText = new FileText ( file , lines ) ; 
 - 
 - try { 
 - treeWalker . processFiltered ( file , fileText ) ; 
 - fail ( " file is not compilable , exception is expected " ) ; 
 - } 
 - catch ( CheckstyleException exception ) { 
 - final String message = 
 - " TokenStreamRecognitionException occurred while parsing file " ; 
 - assertTrue ( " Error message is unexpected " , 
 - exception . getMessage ( ) . contains ( message ) ) ; 
 - } 
 + lines . add ( " class Test { } " ) ; 
 + treeWalkerSpy . processFiltered ( file , new FileText ( file , lines ) ) ; 
 + verifyPrivate ( treeWalkerSpy , times ( 1 ) ) . invoke ( " walk " , 
 + any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; 
 + verifyPrivate ( treeWalkerSpy , times ( 0 ) ) . invoke ( " getFilteredMessages " , 
 + any ( String . class ) , any ( FileContents . class ) , any ( DetailAST . class ) ) ; 
 } 
 
 @ Test 
 public void testBehaviourWithOnlyCommentChecks ( ) throws Exception { 
 - final TreeWalker treeWalker = new TreeWalker ( ) ; 
 - treeWalker . configure ( createModuleConfig ( CommentsIndentationCheck . class ) ) ; 
 + final TreeWalker treeWalkerSpy = spy ( new TreeWalker ( ) ) ; 
 + final Class < ? > classAstState = 
 + Class . forName ( " com . puppycrawl . tools . checkstyle . TreeWalker $ AstState " ) ; 
 final PackageObjectFactory factory = new PackageObjectFactory ( 
 new HashSet < > ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - treeWalker . setModuleFactory ( factory ) ; 
 - treeWalker . setupChild ( createModuleConfig ( CommentsIndentationCheck . class ) ) ; 
 + treeWalkerSpy . configure ( createModuleConfig ( CommentsIndentationCheck . class ) ) ; 
 + treeWalkerSpy . setModuleFactory ( factory ) ; 
 + treeWalkerSpy . setupChild ( createModuleConfig ( CommentsIndentationCheck . class ) ) ; 
 final File file = temporaryFolder . newFile ( " file . java " ) ; 
 final List < String > lines = new ArrayList < > ( ) ; 
 - lines . add ( " class a % $ # { } " ) ; 
 - final FileText fileText = new FileText ( file , lines ) ; 
 - 
 - try { 
 - treeWalker . processFiltered ( file , fileText ) ; 
 - fail ( " file is not compilable , exception is expected " ) ; 
 - } 
 - catch ( CheckstyleException exception ) { 
 - final String message = 
 - " TokenStreamRecognitionException occurred while parsing file " ; 
 - assertTrue ( " Error message is unexpected " , 
 - exception . getMessage ( ) . contains ( message ) ) ; 
 - } 
 + lines . add ( " class Test { } " ) ; 
 + treeWalkerSpy . processFiltered ( file , new FileText ( file , lines ) ) ; 
 + verifyPrivate ( treeWalkerSpy , times ( 1 ) ) . invoke ( " walk " , 
 + any ( DetailAST . class ) , any ( FileContents . class ) , any ( classAstState ) ) ; 
 + verifyPrivate ( treeWalkerSpy , times ( 0 ) ) . invoke ( " getFilteredMessages " , 
 + any ( String . class ) , any ( FileContents . class ) , any ( DetailAST . class ) ) ; 
 } 
 
 @ Test 
 @ @ - 559 , 6 + 560 , 11 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 verify ( checkerConfig , filePath , expected ) ; 
 } 
 
 + / * * 
 + * Non meaningful javadoc just to contain " noinspection " tag . 
 + * Till https : / / youtrack . jetbrains . com / issue / IDEA - 187210 
 + * @ noinspection JUnitTestCaseWithNoTests 
 + * / 
 private static class BadJavaDocCheck extends AbstractCheck { 
 
 @ Override 
 @ @ - 578 , 6 + 584 , 11 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 
 } 
 
 + / * * 
 + * Non meaningful javadoc just to contain " noinspection " tag . 
 + * Till https : / / youtrack . jetbrains . com / issue / IDEA - 187210 
 + * @ noinspection JUnitTestCaseWithNoTests 
 + * / 
 private static class VerifyInitCheck extends AbstractCheck { 
 
 private static boolean initWasCalled ; 
 @ @ - 609 , 6 + 620 , 11 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 
 } 
 
 + / * * 
 + * Non meaningful javadoc just to contain " noinspection " tag . 
 + * Till https : / / youtrack . jetbrains . com / issue / IDEA - 187210 
 + * @ noinspection JUnitTestCaseWithNoTests 
 + * / 
 private static class VerifyDestroyCheck extends AbstractCheck { 
 
 private static boolean destroyWasCalled ; 
 @ @ - 644 , 6 + 660 , 11 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 
 } 
 
 + / * * 
 + * Non meaningful javadoc just to contain " noinspection " tag . 
 + * Till https : / / youtrack . jetbrains . com / issue / IDEA - 187210 
 + * @ noinspection JUnitTestCaseWithNoTests 
 + * / 
 private static class VerifyDestroyCommentCheck extends VerifyDestroyCheck { 
 
 @ Override 
 @ @ - 653 , 6 + 674 , 11 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 
 } 
 
 + / * * 
 + * Non meaningful javadoc just to contain " noinspection " tag . 
 + * Till https : / / youtrack . jetbrains . com / issue / IDEA - 187210 
 + * @ noinspection JUnitTestCaseWithNoTests 
 + * / 
 private static class RequiredTokenIsNotInDefaultsCheck extends AbstractCheck { 
 
 @ Override 
 @ @ - 672 , 6 + 698 , 11 @ @ public class TreeWalkerTest extends AbstractModuleTestSupport { 
 
 } 
 
 + / * * 
 + * Non meaningful javadoc just to contain " noinspection " tag . 
 + * Till https : / / youtrack . jetbrains . com / issue / IDEA - 187210 
 + * @ noinspection JUnitTestCaseWithNoTests 
 + * / 
 private static class RequiredTokenIsEmptyIntArray extends AbstractCheck { 
 
 @ Override

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalFinalVariableNameCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalFinalVariableNameCheck . java 
 index 9b689a5 . . 2343260 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalFinalVariableNameCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalFinalVariableNameCheck . java 
 @ @ - 43 , 7 + 43 , 7 @ @ public class LocalFinalVariableNameCheck 
 return new int [ ] { TokenTypes . VARIABLE _ DEF } ; 
 } 
 
 - / * * @ see com . puppycrawl . tools . checkstyle . check . AbstractNameCheck * / 
 + / * * @ see com . puppycrawl . tools . checkstyle . checks . AbstractNameCheck * / 
 protected final boolean mustCheckName ( DetailAST aAST ) 
 { 
 final DetailAST modifiersAST = 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalVariableNameCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalVariableNameCheck . java 
 index b5e35d2 . . ebda74f 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalVariableNameCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / LocalVariableNameCheck . java 
 @ @ - 43 , 7 + 43 , 7 @ @ public class LocalVariableNameCheck 
 return new int [ ] { TokenTypes . VARIABLE _ DEF } ; 
 } 
 
 - / * * @ see com . puppycrawl . tools . checkstyle . check . AbstractNameCheck * / 
 + / * * @ see com . puppycrawl . tools . checkstyle . checks . AbstractNameCheck * / 
 protected final boolean mustCheckName ( DetailAST aAST ) 
 { 
 final DetailAST modifiersAST = 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MemberNameCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MemberNameCheck . java 
 index 14b6ae0 . . 4f468bf 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MemberNameCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / MemberNameCheck . java 
 @ @ - 43 , 7 + 43 , 7 @ @ public class MemberNameCheck 
 return new int [ ] { TokenTypes . VARIABLE _ DEF } ; 
 } 
 
 - / * * @ see com . puppycrawl . tools . checkstyle . check . AbstractNameCheck * / 
 + / * * @ see com . puppycrawl . tools . checkstyle . checks . AbstractNameCheck * / 
 protected final boolean mustCheckName ( DetailAST aAST ) 
 { 
 DetailAST modifiersAST = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / PublicMemberNameCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / PublicMemberNameCheck . java 
 index 2fa014d . . cbcb345 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / PublicMemberNameCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / PublicMemberNameCheck . java 
 @ @ - 43 , 7 + 43 , 7 @ @ public class PublicMemberNameCheck 
 return new int [ ] { TokenTypes . VARIABLE _ DEF } ; 
 } 
 
 - / * * @ see com . puppycrawl . tools . checkstyle . check . AbstractNameCheck * / 
 + / * * @ see com . puppycrawl . tools . checkstyle . checks . AbstractNameCheck * / 
 protected final boolean mustCheckName ( DetailAST aAST ) 
 { 
 DetailAST modifiersAST = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / StaticVariableNameCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / StaticVariableNameCheck . java 
 index 5a38d07 . . 4b164bc 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / StaticVariableNameCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / StaticVariableNameCheck . java 
 @ @ - 43 , 7 + 43 , 7 @ @ public class StaticVariableNameCheck 
 return new int [ ] { TokenTypes . VARIABLE _ DEF } ; 
 } 
 
 - / * * @ see com . puppycrawl . tools . checkstyle . check . AbstractNameCheck * / 
 + / * * @ see com . puppycrawl . tools . checkstyle . checks . AbstractNameCheck * / 
 protected final boolean mustCheckName ( DetailAST aAST ) 
 { 
 DetailAST modifiersAST = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / TypeLeftCurlyCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / TypeLeftCurlyCheck . java 
 index 31f357f . . cbf2e88 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / TypeLeftCurlyCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / TypeLeftCurlyCheck . java 
 @ @ - 31 , 14 + 31 , 14 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 public class TypeLeftCurlyCheck 
 extends LeftCurlyCheck 
 { 
 - / * * @ see Check * / 
 + / * * @ see com . puppycrawl . tools . checkstyle . api . Check * / 
 public int [ ] getDefaultTokens ( ) 
 { 
 return new int [ ] { TokenTypes . INTERFACE _ DEF , 
 TokenTypes . CLASS _ DEF } ; 
 } 
 
 - / * * @ see Check * / 
 + / * * @ see com . puppycrawl . tools . checkstyle . api . Check * / 
 public void visitToken ( DetailAST aAST ) 
 { 
 final DetailAST brace =
