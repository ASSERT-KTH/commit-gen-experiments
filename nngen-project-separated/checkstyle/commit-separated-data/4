BLEU SCORE: 0.005529132673596237

TEST MSG: Issue # 6586 : aligned javadoc / xdoc for MultipleStringLiterals
GENERATED MSG: fix for bug 1560940 : MultipleStringLiteralCheck now ignores annotations by default . It is possible to retain the old behaviour by setting the new check property ignoreOccurrenceContext to an empty value .

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> index 7273e70 . . f08c188 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java <nl> @ @ - 33 , 9 + 33 , 64 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; <nl> <nl> / * * <nl> - * Checks for multiple occurrences of the same string literal within a <nl> - * single file . <nl> + * < p > <nl> + * Checks for multiple occurrences of the same string literal within a single file . <nl> + * < / p > <nl> + * < p > <nl> + * Rationale : Code duplication makes maintenance more difficult , so it can be better <nl> + * to replace the multiple occurrences with a constant . <nl> + * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code allowedDuplicates } - Specify the maximum number of occurrences <nl> + * to allow without generating a warning . <nl> + * Default value is { @ code 1 } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code ignoreStringsRegexp } - Specify RegExp for ignored strings ( with quotation marks ) . <nl> + * Default value is { @ code " ^ " " $ " } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code ignoreOccurrenceContext } - Specify token type names where duplicate <nl> + * strings are ignored even if they don ' t match ignoredStringsRegexp . This allows you to <nl> + * exclude syntactical contexts like annotations or static initializers from the check . <nl> + * Default value is { @ code ANNOTATION } . <nl> + * < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * To configure the check : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; MultipleStringLiterals & quot ; / & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check so that it allows two occurrences of each string : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; MultipleStringLiterals & quot ; & gt ; <nl> + * & lt ; property name = & quot ; allowedDuplicates & quot ; value = & quot ; 2 & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check so that it ignores " , " and empty strings : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; MultipleStringLiterals & quot ; & gt ; <nl> + * & lt ; property name = & quot ; ignoreStringsRegexp & quot ; <nl> + * value = ' ^ ( ( & quot ; & quot ; ) | ( & quot ; , & quot ; ) ) $ ' / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * To configure the check so that it flags duplicate strings in all syntactical contexts , <nl> + * even in annotations like { @ code @ SuppressWarnings ( " unchecked " ) } : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; MultipleStringLiterals & quot ; & gt ; <nl> + * & lt ; property name = & quot ; ignoreOccurrenceContext & quot ; value = & quot ; & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> * <nl> + * @ since 3 . 5 <nl> * / <nl> @ FileStatefulCheck <nl> public class MultipleStringLiteralsCheck extends AbstractCheck { <nl> @ @ - 52 , 18 + 107 , 19 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { <nl> private final Map < String , List < DetailAST > > stringMap = new HashMap < > ( ) ; <nl> <nl> / * * <nl> - * Marks the TokenTypes where duplicate strings should be ignored . <nl> + * Specify token type names where duplicate strings are ignored even if they <nl> + * don ' t match ignoredStringsRegexp . This allows you to exclude syntactical <nl> + * contexts like annotations or static initializers from the check . <nl> * / <nl> private final BitSet ignoreOccurrenceContext = new BitSet ( ) ; <nl> <nl> / * * <nl> - * The allowed number of string duplicates in a file before an error is <nl> - * generated . <nl> + * Specify the maximum number of occurrences to allow without generating a warning . <nl> * / <nl> private int allowedDuplicates = 1 ; <nl> <nl> / * * <nl> - * Pattern for matching ignored strings . <nl> + * Specify RegExp for ignored strings ( with quotation marks ) . <nl> * / <nl> private Pattern ignoreStringsRegexp ; <nl> <nl> @ @ - 76 , 7 + 132 , 7 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Sets the maximum allowed duplicates of a string . <nl> + * Setter to specify the maximum number of occurrences to allow without generating a warning . <nl> * @ param allowedDuplicates The maximum number of duplicates . <nl> * / <nl> public void setAllowedDuplicates ( int allowedDuplicates ) { <nl> @ @ - 84 , 7 + 140 , 7 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Sets regular expression pattern for ignored strings . <nl> + * Setter to specify RegExp for ignored strings ( with quotation marks ) . <nl> * @ param ignoreStringsRegexp <nl> * regular expression pattern for ignored strings <nl> * @ noinspection WeakerAccess <nl> @ @ - 99 , 7 + 155 , 9 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Adds a set of tokens the check is interested in . <nl> + * Setter to specify token type names where duplicate strings are ignored even <nl> + * if they don ' t match ignoredStringsRegexp . This allows you to exclude <nl> + * syntactical contexts like annotations or static initializers from the check . <nl> * @ param strRep the string representation of the tokens interested in <nl> * / <nl> public final void setIgnoreOccurrenceContext ( String . . . strRep ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 57cc9a5 . . b0edba7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 115 , 6 + 115 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " MissingJavadocType " , <nl> " MissingOverride " , <nl> " MissingSwitchDefault " , <nl> + " MultipleStringLiterals " , <nl> " MultipleVariableDeclarations " , <nl> " NeedBraces " , <nl> " NestedIfDepth " , <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index 19e1bca . . 8948271 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 2895 , 8 + 2895 , 8 @ @ for ( String line : lines ) { <nl> < / section > <nl> <nl> < section name = " MultipleStringLiterals " > <nl> + < p > Since Checkstyle 3 . 5 < / p > <nl> < subsection name = " Description " id = " MultipleStringLiterals _ Description " > <nl> - < p > Since Checkstyle 3 . 5 < / p > <nl> < p > <nl> Checks for multiple occurrences of the same string literal within a <nl> single file . <nl> @ @ - 2920 , 17 + 2920 , 17 @ @ for ( String line : lines ) { <nl> < tr > <nl> < td > allowedDuplicates < / td > <nl> < td > <nl> - The maximum number of occurrences to allow without generating a <nl> - warning <nl> + Specify the maximum number of occurrences to allow without generating a <nl> + warning . <nl> < / td > <nl> < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > <nl> - < td > 1 < / td > <nl> + < td > < code > 1 < / code > < / td > <nl> < td > 3 . 5 < / td > <nl> < / tr > <nl> < tr > <nl> < td > ignoreStringsRegexp < / td > <nl> < td > <nl> - Regular expression pattern for ignored strings ( with quotation marks ) <nl> + Specify RegExp for ignored strings ( with quotation marks ) . <nl> < / td > <nl> < td > < a href = " property _ types . html # regexp " > Regular Expression < / a > < / td > <nl> < td > < code > " ^ " " $ " < / code > < / td > <nl> @ @ - 2939 , 7 + 2939 , 7 @ @ for ( String line : lines ) { <nl> < tr > <nl> < td > ignoreOccurrenceContext < / td > <nl> < td > <nl> - Token type names where duplicate strings are ignored even if they don ' t match <nl> + Specify token type names where duplicate strings are ignored even if they don ' t match <nl> ignoredStringsRegexp . This allows you to exclude syntactical contexts like <nl> annotations or static initializers from the check . <nl> < / td > <nl> @ @ - 2978 , 7 + 2978 , 8 @ @ for ( String line : lines ) { <nl> < / p > <nl> < source > <nl> & lt ; module name = & quot ; MultipleStringLiterals & quot ; & gt ; <nl> - & lt ; property name = & quot ; ignoreStringsRegexp & quot ; value = ' ^ ( ( & quot ; & quot ; ) | ( & quot ; , & quot ; ) ) $ ' / & gt ; <nl> + & lt ; property name = & quot ; ignoreStringsRegexp & quot ; <nl> + value = ' ^ ( ( & quot ; & quot ; ) | ( & quot ; , & quot ; ) ) $ ' / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl>
NEAREST DIFF (one line): diff - - git a / src / xdocs / config _ javadoc . xml b / src / xdocs / config _ javadoc . xml <nl> index 919179f . . 70c83e1 100755 <nl> - - - a / src / xdocs / config _ javadoc . xml <nl> + + + b / src / xdocs / config _ javadoc . xml <nl> @ @ - 686 , 12 + 686 , 13 @ @ public int checkReturnTag ( final int aTagIndex , <nl> < section name = " WriteTag " > <nl> < subsection name = " Description " > <nl> < p > <nl> - Outputs a JavaDoc tag as information . Can be used e . g . with the stylesheets <nl> - that sort the report by author name . <nl> - To define the format for a tag , set property tagFormat to a regular expression . <nl> - This check uses two different severity levels . The normal one is used for <nl> - reporting when the tag is missing . The additional one ( tagSeverity ) is used <nl> - for the level of reporting when the tag exists . <nl> + Outputs a JavaDoc tag as information . Can be used e . g . with the <nl> + stylesheets that sort the report by author name . To define the <nl> + format for a tag , set property tagFormat to a regular <nl> + expression . This check uses two different severity levels . The <nl> + normal one is used for reporting when the tag is missing . The <nl> + additional one ( tagSeverity ) is used for the level of reporting <nl> + when the tag exists . <nl> < / p > <nl> < / subsection > <nl> <nl> @ @ - 730 , 10 + 731 , 10 @ @ public int checkReturnTag ( final int aTagIndex , <nl> < / p > <nl> <nl> < source > <nl> - & lt ; module name = " WriteTag " & gt ; <nl> - & lt ; property name = " tag " value = " @ author " / & gt ; <nl> - & lt ; property name = " tagFormat " value = " \ S " / & gt ; <nl> - & lt ; / module & gt ; <nl> + & lt ; module name = " WriteTag " & gt ; <nl> + & lt ; property name = " tag " value = " @ author " / & gt ; <nl> + & lt ; property name = " tagFormat " value = " \ S " / & gt ; <nl> + & lt ; / module & gt ; <nl> < / source > <nl> <nl> < p > <nl> @ @ - 742 , 34 + 743 , 11 @ @ public int checkReturnTag ( final int aTagIndex , <nl> < / p > <nl> <nl> < source > <nl> - & lt ; module name = " WriteTag " & gt ; <nl> - & lt ; property name = " tag " value = " @ incomplete " / & gt ; <nl> - & lt ; property name = " tagFormat " value = " \ S " / & gt ; <nl> - & lt ; property name = " severity " value = " ignore " / & gt ; <nl> - & lt ; property name = " tagSeverity " value = " warning " / & gt ; <nl> - & lt ; / module & gt ; <nl> - < / source > <nl> - <nl> - < p > <nl> - To configure the check for javadoc which is in < span <nl> - class = " default " > private < / span > , but not in < span <nl> - class = " default " > package < / span > scope : <nl> - < / p > <nl> - <nl> - < source > <nl> - & lt ; module name = " JavadocStyle " & gt ; <nl> - & lt ; property name = " scope " value = " private " / & gt ; <nl> - & lt ; property name = " excludeScope " value = " package " / & gt ; <nl> - & lt ; / module & gt ; <nl> - < / source > <nl> - <nl> - < p > <nl> - To configure the check to turn off first sentence checking : <nl> - < / p > <nl> - <nl> - < source > <nl> - & lt ; module name = " JavadocStyle " & gt ; <nl> - & lt ; property name = " checkFirstSentence " value = " false " / & gt ; <nl> + & lt ; module name = " WriteTag " & gt ; <nl> + & lt ; property name = " tag " value = " @ incomplete " / & gt ; <nl> + & lt ; property name = " tagFormat " value = " \ S " / & gt ; <nl> + & lt ; property name = " severity " value = " ignore " / & gt ; <nl> + & lt ; property name = " tagSeverity " value = " warning " / & gt ; <nl> & lt ; / module & gt ; <nl> < / source > <nl> < / subsection >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 index 7273e70 . . f08c188 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleStringLiteralsCheck . java 
 @ @ - 33 , 9 + 33 , 64 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . TokenUtil ; 
 
 / * * 
 - * Checks for multiple occurrences of the same string literal within a 
 - * single file . 
 + * < p > 
 + * Checks for multiple occurrences of the same string literal within a single file . 
 + * < / p > 
 + * < p > 
 + * Rationale : Code duplication makes maintenance more difficult , so it can be better 
 + * to replace the multiple occurrences with a constant . 
 + * < / p > 
 + * < ul > 
 + * < li > 
 + * Property { @ code allowedDuplicates } - Specify the maximum number of occurrences 
 + * to allow without generating a warning . 
 + * Default value is { @ code 1 } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code ignoreStringsRegexp } - Specify RegExp for ignored strings ( with quotation marks ) . 
 + * Default value is { @ code " ^ " " $ " } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code ignoreOccurrenceContext } - Specify token type names where duplicate 
 + * strings are ignored even if they don ' t match ignoredStringsRegexp . This allows you to 
 + * exclude syntactical contexts like annotations or static initializers from the check . 
 + * Default value is { @ code ANNOTATION } . 
 + * < / li > 
 + * < / ul > 
 + * < p > 
 + * To configure the check : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; MultipleStringLiterals & quot ; / & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check so that it allows two occurrences of each string : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; MultipleStringLiterals & quot ; & gt ; 
 + * & lt ; property name = & quot ; allowedDuplicates & quot ; value = & quot ; 2 & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check so that it ignores " , " and empty strings : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; MultipleStringLiterals & quot ; & gt ; 
 + * & lt ; property name = & quot ; ignoreStringsRegexp & quot ; 
 + * value = ' ^ ( ( & quot ; & quot ; ) | ( & quot ; , & quot ; ) ) $ ' / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * To configure the check so that it flags duplicate strings in all syntactical contexts , 
 + * even in annotations like { @ code @ SuppressWarnings ( " unchecked " ) } : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; MultipleStringLiterals & quot ; & gt ; 
 + * & lt ; property name = & quot ; ignoreOccurrenceContext & quot ; value = & quot ; & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 * 
 + * @ since 3 . 5 
 * / 
 @ FileStatefulCheck 
 public class MultipleStringLiteralsCheck extends AbstractCheck { 
 @ @ - 52 , 18 + 107 , 19 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { 
 private final Map < String , List < DetailAST > > stringMap = new HashMap < > ( ) ; 
 
 / * * 
 - * Marks the TokenTypes where duplicate strings should be ignored . 
 + * Specify token type names where duplicate strings are ignored even if they 
 + * don ' t match ignoredStringsRegexp . This allows you to exclude syntactical 
 + * contexts like annotations or static initializers from the check . 
 * / 
 private final BitSet ignoreOccurrenceContext = new BitSet ( ) ; 
 
 / * * 
 - * The allowed number of string duplicates in a file before an error is 
 - * generated . 
 + * Specify the maximum number of occurrences to allow without generating a warning . 
 * / 
 private int allowedDuplicates = 1 ; 
 
 / * * 
 - * Pattern for matching ignored strings . 
 + * Specify RegExp for ignored strings ( with quotation marks ) . 
 * / 
 private Pattern ignoreStringsRegexp ; 
 
 @ @ - 76 , 7 + 132 , 7 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Sets the maximum allowed duplicates of a string . 
 + * Setter to specify the maximum number of occurrences to allow without generating a warning . 
 * @ param allowedDuplicates The maximum number of duplicates . 
 * / 
 public void setAllowedDuplicates ( int allowedDuplicates ) { 
 @ @ - 84 , 7 + 140 , 7 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Sets regular expression pattern for ignored strings . 
 + * Setter to specify RegExp for ignored strings ( with quotation marks ) . 
 * @ param ignoreStringsRegexp 
 * regular expression pattern for ignored strings 
 * @ noinspection WeakerAccess 
 @ @ - 99 , 7 + 155 , 9 @ @ public class MultipleStringLiteralsCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Adds a set of tokens the check is interested in . 
 + * Setter to specify token type names where duplicate strings are ignored even 
 + * if they don ' t match ignoredStringsRegexp . This allows you to exclude 
 + * syntactical contexts like annotations or static initializers from the check . 
 * @ param strRep the string representation of the tokens interested in 
 * / 
 public final void setIgnoreOccurrenceContext ( String . . . strRep ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 57cc9a5 . . b0edba7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 115 , 6 + 115 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " MissingJavadocType " , 
 " MissingOverride " , 
 " MissingSwitchDefault " , 
 + " MultipleStringLiterals " , 
 " MultipleVariableDeclarations " , 
 " NeedBraces " , 
 " NestedIfDepth " , 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index 19e1bca . . 8948271 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 2895 , 8 + 2895 , 8 @ @ for ( String line : lines ) { 
 < / section > 
 
 < section name = " MultipleStringLiterals " > 
 + < p > Since Checkstyle 3 . 5 < / p > 
 < subsection name = " Description " id = " MultipleStringLiterals _ Description " > 
 - < p > Since Checkstyle 3 . 5 < / p > 
 < p > 
 Checks for multiple occurrences of the same string literal within a 
 single file . 
 @ @ - 2920 , 17 + 2920 , 17 @ @ for ( String line : lines ) { 
 < tr > 
 < td > allowedDuplicates < / td > 
 < td > 
 - The maximum number of occurrences to allow without generating a 
 - warning 
 + Specify the maximum number of occurrences to allow without generating a 
 + warning . 
 < / td > 
 < td > < a href = " property _ types . html # integer " > Integer < / a > < / td > 
 - < td > 1 < / td > 
 + < td > < code > 1 < / code > < / td > 
 < td > 3 . 5 < / td > 
 < / tr > 
 < tr > 
 < td > ignoreStringsRegexp < / td > 
 < td > 
 - Regular expression pattern for ignored strings ( with quotation marks ) 
 + Specify RegExp for ignored strings ( with quotation marks ) . 
 < / td > 
 < td > < a href = " property _ types . html # regexp " > Regular Expression < / a > < / td > 
 < td > < code > " ^ " " $ " < / code > < / td > 
 @ @ - 2939 , 7 + 2939 , 7 @ @ for ( String line : lines ) { 
 < tr > 
 < td > ignoreOccurrenceContext < / td > 
 < td > 
 - Token type names where duplicate strings are ignored even if they don ' t match 
 + Specify token type names where duplicate strings are ignored even if they don ' t match 
 ignoredStringsRegexp . This allows you to exclude syntactical contexts like 
 annotations or static initializers from the check . 
 < / td > 
 @ @ - 2978 , 7 + 2978 , 8 @ @ for ( String line : lines ) { 
 < / p > 
 < source > 
 & lt ; module name = & quot ; MultipleStringLiterals & quot ; & gt ; 
 - & lt ; property name = & quot ; ignoreStringsRegexp & quot ; value = ' ^ ( ( & quot ; & quot ; ) | ( & quot ; , & quot ; ) ) $ ' / & gt ; 
 + & lt ; property name = & quot ; ignoreStringsRegexp & quot ; 
 + value = ' ^ ( ( & quot ; & quot ; ) | ( & quot ; , & quot ; ) ) $ ' / & gt ; 
 & lt ; / module & gt ; 
 < / source > 


NEAREST DIFF:
diff - - git a / src / xdocs / config _ javadoc . xml b / src / xdocs / config _ javadoc . xml 
 index 919179f . . 70c83e1 100755 
 - - - a / src / xdocs / config _ javadoc . xml 
 + + + b / src / xdocs / config _ javadoc . xml 
 @ @ - 686 , 12 + 686 , 13 @ @ public int checkReturnTag ( final int aTagIndex , 
 < section name = " WriteTag " > 
 < subsection name = " Description " > 
 < p > 
 - Outputs a JavaDoc tag as information . Can be used e . g . with the stylesheets 
 - that sort the report by author name . 
 - To define the format for a tag , set property tagFormat to a regular expression . 
 - This check uses two different severity levels . The normal one is used for 
 - reporting when the tag is missing . The additional one ( tagSeverity ) is used 
 - for the level of reporting when the tag exists . 
 + Outputs a JavaDoc tag as information . Can be used e . g . with the 
 + stylesheets that sort the report by author name . To define the 
 + format for a tag , set property tagFormat to a regular 
 + expression . This check uses two different severity levels . The 
 + normal one is used for reporting when the tag is missing . The 
 + additional one ( tagSeverity ) is used for the level of reporting 
 + when the tag exists . 
 < / p > 
 < / subsection > 
 
 @ @ - 730 , 10 + 731 , 10 @ @ public int checkReturnTag ( final int aTagIndex , 
 < / p > 
 
 < source > 
 - & lt ; module name = " WriteTag " & gt ; 
 - & lt ; property name = " tag " value = " @ author " / & gt ; 
 - & lt ; property name = " tagFormat " value = " \ S " / & gt ; 
 - & lt ; / module & gt ; 
 + & lt ; module name = " WriteTag " & gt ; 
 + & lt ; property name = " tag " value = " @ author " / & gt ; 
 + & lt ; property name = " tagFormat " value = " \ S " / & gt ; 
 + & lt ; / module & gt ; 
 < / source > 
 
 < p > 
 @ @ - 742 , 34 + 743 , 11 @ @ public int checkReturnTag ( final int aTagIndex , 
 < / p > 
 
 < source > 
 - & lt ; module name = " WriteTag " & gt ; 
 - & lt ; property name = " tag " value = " @ incomplete " / & gt ; 
 - & lt ; property name = " tagFormat " value = " \ S " / & gt ; 
 - & lt ; property name = " severity " value = " ignore " / & gt ; 
 - & lt ; property name = " tagSeverity " value = " warning " / & gt ; 
 - & lt ; / module & gt ; 
 - < / source > 
 - 
 - < p > 
 - To configure the check for javadoc which is in < span 
 - class = " default " > private < / span > , but not in < span 
 - class = " default " > package < / span > scope : 
 - < / p > 
 - 
 - < source > 
 - & lt ; module name = " JavadocStyle " & gt ; 
 - & lt ; property name = " scope " value = " private " / & gt ; 
 - & lt ; property name = " excludeScope " value = " package " / & gt ; 
 - & lt ; / module & gt ; 
 - < / source > 
 - 
 - < p > 
 - To configure the check to turn off first sentence checking : 
 - < / p > 
 - 
 - < source > 
 - & lt ; module name = " JavadocStyle " & gt ; 
 - & lt ; property name = " checkFirstSentence " value = " false " / & gt ; 
 + & lt ; module name = " WriteTag " & gt ; 
 + & lt ; property name = " tag " value = " @ incomplete " / & gt ; 
 + & lt ; property name = " tagFormat " value = " \ S " / & gt ; 
 + & lt ; property name = " severity " value = " ignore " / & gt ; 
 + & lt ; property name = " tagSeverity " value = " warning " / & gt ; 
 & lt ; / module & gt ; 
 < / source > 
 < / subsection >
