BLEU SCORE: 0.011510389467571911

TEST MSG: Issue # 56 : fix MainTest input files
GENERATED MSG: Use BigInteger in complexity metrics checks to avoid integer overflow ( bug 1654769 ) .

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 5069f04 . . 19e0ba3 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 519 , 7 + 519 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - final String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; <nl> + final String expectedPath = getFilePath ( " main / " ) + File . separator ; <nl> final StringBuilder sb = new StringBuilder ( ) ; <nl> sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> final String format = " [ WARN ] % s . java : % s : % s [ FileLength ] " ; <nl> @ @ - 538 , 7 + 538 , 7 @ @ public class MainTest { <nl> } ) ; <nl> <nl> Main . main ( " - c " , getPath ( " config - filelength . xml " ) , <nl> - getPath ( " checks / metrics " ) ) ; <nl> + getPath ( " main / " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / main / Input15Extensions . java b / src / test / resources / com / puppycrawl / tools / checkstyle / main / Input15Extensions . java <nl> new file mode 100644 <nl> index 0000000 . . 8589b1b <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / main / Input15Extensions . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + / / someexamples of 1 . 5 extensions <nl> + package com . puppycrawl . tools . checkstyle . main ; <nl> + <nl> + @ interface MyAnnotation1 { <nl> + String name ( ) ; <nl> + int version ( ) ; <nl> + } <nl> + <nl> + @ MyAnnotation1 ( name = " ABC " , version = 1 ) <nl> + public class Input15Extensions <nl> + { <nl> + <nl> + } <nl> + <nl> + enum Enum1 <nl> + { <nl> + A , B , C ; <nl> + Enum1 ( ) { } <nl> + public String toString ( ) { <nl> + return " " ; / / some custom implementation <nl> + } <nl> + } <nl> + <nl> + interface TestRequireThisEnum <nl> + { <nl> + enum DAY _ OF _ WEEK <nl> + { <nl> + SUNDAY , <nl> + MONDAY , <nl> + TUESDAY , <nl> + WEDNESDAY , <nl> + THURSDAY , <nl> + FRIDAY , <nl> + SATURDAY <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputComplexityOverflow . java b / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputComplexityOverflow . java <nl> new file mode 100644 <nl> index 0000000 . . 1129e3f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputComplexityOverflow . java <nl> @ @ - 0 , 0 + 1 , 172 @ @ <nl> + package com . puppycrawl . tools . checkstyle . main ; <nl> + <nl> + / * * <nl> + * This class has methods that have an NPath complexity larger than MAXINT . <nl> + * Test case for bug 1654769 . <nl> + * / <nl> + public class InputComplexityOverflow { <nl> + <nl> + public void provokeNpathIntegerOverflow ( ) <nl> + { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + if ( true ) { <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputComplexitySwitchBlocks . java b / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputComplexitySwitchBlocks . java <nl> new file mode 100644 <nl> index 0000000 . . 8540772 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputComplexitySwitchBlocks . java <nl> @ @ - 0 , 0 + 1 , 20 @ @ <nl> + package com . puppycrawl . tools . checkstyle . main ; <nl> + <nl> + public class InputComplexitySwitchBlocks { <nl> + public void foo2 ( ) { <nl> + String programmingLanguage = " Java " ; <nl> + switch ( programmingLanguage ) { <nl> + case " Java " : <nl> + case " C # " : <nl> + case " C + + " : <nl> + String . CASE _ INSENSITIVE _ ORDER . equals ( programmingLanguage + " is an object oriented programming language . " ) ; <nl> + break ; <nl> + case " C " : <nl> + String . CASE _ INSENSITIVE _ ORDER . equals ( programmingLanguage + " is not an object oriented programming language . " ) ; <nl> + break ; <nl> + default : <nl> + String . CASE _ INSENSITIVE _ ORDER . equals ( programmingLanguage + " is unknown language . " ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputJavaNCSS . java b / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputJavaNCSS . java <nl> new file mode 100644 <nl> index 0000000 . . a6fd16c <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputJavaNCSS . java <nl> @ @ - 0 , 0 + 1 , 84 @ @ <nl> + / / should give an ncss of 35 <nl> + package com . puppycrawl . tools . checkstyle . main ; <nl> + <nl> + import java . awt . event . ItemEvent ; <nl> + import java . awt . event . ItemListener ; <nl> + <nl> + <nl> + / / should give an ncss of 22 <nl> + public class InputJavaNCSS { <nl> + <nl> + private Object mObject ; <nl> + <nl> + / / should count as 2 <nl> + private void testMethod1 ( ) { <nl> + <nl> + / / should count as 1 <nl> + int x = 1 , y = 2 ; <nl> + } <nl> + <nl> + / / should count as 4 <nl> + private void testMethod2 ( ) { <nl> + <nl> + int abc = 0 ; <nl> + <nl> + / / should count as 2 <nl> + testLabel : abc = 1 ; <nl> + } <nl> + <nl> + / / should give an ncss of 12 <nl> + private void testMethod3 ( ) { <nl> + <nl> + int a = 0 ; <nl> + switch ( a ) { <nl> + case 1 : / / falls through <nl> + case 2 : System . identityHashCode ( " Hello " ) ; break ; <nl> + default : break ; <nl> + } <nl> + <nl> + ItemListener lis = new ItemListener ( ) { <nl> + <nl> + / / should give an ncss of 2 <nl> + public void itemStateChanged ( ItemEvent e ) { <nl> + System . identityHashCode ( " Hello " ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + / / should give an ncss of 2 <nl> + private class TestInnerClass { <nl> + <nl> + private Object test ; <nl> + } <nl> + } <nl> + <nl> + / / should give an ncss of 10 <nl> + class TestTopLevelNestedClass { <nl> + <nl> + private Object mObject ; <nl> + <nl> + / / should give an ncss of 8 <nl> + private void testMethod ( ) { <nl> + <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + <nl> + if ( i = = 0 ) { <nl> + <nl> + / / should count as 1 <nl> + int x = 1 , y = 2 ; <nl> + } <nl> + else { <nl> + int abc = 0 ; <nl> + <nl> + / / should count as 2 <nl> + testLabel : abc = 1 ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + class Input0 { <nl> + static { } <nl> + { } <nl> + public Input0 ( ) { } <nl> + }
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index d9d5d09 . . 21a03f4 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 92 , 8 + 92 , 7 @ @ <nl> < target name = " clean " description = " Cleans any directories and generated files " > <nl> < delete > <nl> < fileset dir = " src / checkstyle " > <nl> - < include name = " * * / Generated * . java " / > <nl> - < include name = " * * / Generated * . txt " / > <nl> + < include name = " * * / Generated * " / > <nl> < include name = " * * / expandedjava * . g " / > <nl> < / fileset > <nl> < / delete > <nl> @ @ - 551 , 8 + 550 , 7 @ @ For users of JDK 1 . 5 at least version 1 . 6 . 2 of Ant is required . <nl> < mkdir dir = " $ { dist . dir } / checkstyle - src - $ { version } " / > <nl> < copy todir = " $ { dist . dir } / checkstyle - src - $ { version } " > <nl> < fileset dir = " . " > <nl> - < exclude name = " src / checkstyle / * * / Generated * . java " / > <nl> - < exclude name = " src / checkstyle / * * / Generated * . txt " / > <nl> + < exclude name = " src / checkstyle / * * / Generated * " / > <nl> < include name = " * . xml " / > <nl> < include name = " LICENSE * " / > <nl> < include name = " README " / > <nl> @ @ - 601 , 15 + 599 , 10 @ @ For users of JDK 1 . 5 at least version 1 . 6 . 2 of Ant is required . <nl> offline = " yes " <nl> href = " http : / / www . antlr . org / javadoc / " / > <nl> < fileset dir = " src / checkstyle " > <nl> + < include name = " * * / * . java " / > <nl> < exclude name = " * * / Generated * . java " / > <nl> - < exclude name = " * * / Generated * . txt " / > <nl> < exclude name = " * * / gui / * . java " / > <nl> < exclude name = " * * / checks / * * " / > <nl> - < exclude name = " * * / * . properties " / > <nl> - < exclude name = " * * / * . g " / > <nl> - < exclude name = " * * / * . dtd " / > <nl> - < exclude name = " * * / * . xml " / > <nl> - < exclude name = " * * / * . html " / > <nl> < / fileset > <nl> < / javadoc > <nl> < / target > <nl> diff - - git a / lib / antlr . jar b / lib / antlr . jar <nl> index 8850fc6 . . 3702b64 100644 <nl> Binary files a / lib / antlr . jar and b / lib / antlr . jar differ <nl> diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml <nl> index d596b53 . . f3868f4 100755 <nl> - - - a / src / xdocs / releasenotes . xml <nl> + + + b / src / xdocs / releasenotes . xml <nl> @ @ - 45 , 6 + 45 , 10 @ @ <nl> Added the style sheet checkstyle - frames . xsl , thanks to Paul <nl> King . ( Bug 1385095 ) . <nl> < / li > <nl> + <nl> + 	 < li > <nl> + 	 Upgraded to ANTLR 2 . 7 . 6 . <nl> + 	 < / li > <nl> < / ul > <nl> <nl> < p > Fixed Bugs : < / p >

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 5069f04 . . 19e0ba3 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 519 , 7 + 519 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - final String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; 
 + final String expectedPath = getFilePath ( " main / " ) + File . separator ; 
 final StringBuilder sb = new StringBuilder ( ) ; 
 sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; 
 final String format = " [ WARN ] % s . java : % s : % s [ FileLength ] " ; 
 @ @ - 538 , 7 + 538 , 7 @ @ public class MainTest { 
 } ) ; 
 
 Main . main ( " - c " , getPath ( " config - filelength . xml " ) , 
 - getPath ( " checks / metrics " ) ) ; 
 + getPath ( " main / " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / main / Input15Extensions . java b / src / test / resources / com / puppycrawl / tools / checkstyle / main / Input15Extensions . java 
 new file mode 100644 
 index 0000000 . . 8589b1b 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / main / Input15Extensions . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + / / someexamples of 1 . 5 extensions 
 + package com . puppycrawl . tools . checkstyle . main ; 
 + 
 + @ interface MyAnnotation1 { 
 + String name ( ) ; 
 + int version ( ) ; 
 + } 
 + 
 + @ MyAnnotation1 ( name = " ABC " , version = 1 ) 
 + public class Input15Extensions 
 + { 
 + 
 + } 
 + 
 + enum Enum1 
 + { 
 + A , B , C ; 
 + Enum1 ( ) { } 
 + public String toString ( ) { 
 + return " " ; / / some custom implementation 
 + } 
 + } 
 + 
 + interface TestRequireThisEnum 
 + { 
 + enum DAY _ OF _ WEEK 
 + { 
 + SUNDAY , 
 + MONDAY , 
 + TUESDAY , 
 + WEDNESDAY , 
 + THURSDAY , 
 + FRIDAY , 
 + SATURDAY 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputComplexityOverflow . java b / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputComplexityOverflow . java 
 new file mode 100644 
 index 0000000 . . 1129e3f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputComplexityOverflow . java 
 @ @ - 0 , 0 + 1 , 172 @ @ 
 + package com . puppycrawl . tools . checkstyle . main ; 
 + 
 + / * * 
 + * This class has methods that have an NPath complexity larger than MAXINT . 
 + * Test case for bug 1654769 . 
 + * / 
 + public class InputComplexityOverflow { 
 + 
 + public void provokeNpathIntegerOverflow ( ) 
 + { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + if ( true ) { 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputComplexitySwitchBlocks . java b / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputComplexitySwitchBlocks . java 
 new file mode 100644 
 index 0000000 . . 8540772 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputComplexitySwitchBlocks . java 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + package com . puppycrawl . tools . checkstyle . main ; 
 + 
 + public class InputComplexitySwitchBlocks { 
 + public void foo2 ( ) { 
 + String programmingLanguage = " Java " ; 
 + switch ( programmingLanguage ) { 
 + case " Java " : 
 + case " C # " : 
 + case " C + + " : 
 + String . CASE _ INSENSITIVE _ ORDER . equals ( programmingLanguage + " is an object oriented programming language . " ) ; 
 + break ; 
 + case " C " : 
 + String . CASE _ INSENSITIVE _ ORDER . equals ( programmingLanguage + " is not an object oriented programming language . " ) ; 
 + break ; 
 + default : 
 + String . CASE _ INSENSITIVE _ ORDER . equals ( programmingLanguage + " is unknown language . " ) ; 
 + break ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputJavaNCSS . java b / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputJavaNCSS . java 
 new file mode 100644 
 index 0000000 . . a6fd16c 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / main / InputJavaNCSS . java 
 @ @ - 0 , 0 + 1 , 84 @ @ 
 + / / should give an ncss of 35 
 + package com . puppycrawl . tools . checkstyle . main ; 
 + 
 + import java . awt . event . ItemEvent ; 
 + import java . awt . event . ItemListener ; 
 + 
 + 
 + / / should give an ncss of 22 
 + public class InputJavaNCSS { 
 + 
 + private Object mObject ; 
 + 
 + / / should count as 2 
 + private void testMethod1 ( ) { 
 + 
 + / / should count as 1 
 + int x = 1 , y = 2 ; 
 + } 
 + 
 + / / should count as 4 
 + private void testMethod2 ( ) { 
 + 
 + int abc = 0 ; 
 + 
 + / / should count as 2 
 + testLabel : abc = 1 ; 
 + } 
 + 
 + / / should give an ncss of 12 
 + private void testMethod3 ( ) { 
 + 
 + int a = 0 ; 
 + switch ( a ) { 
 + case 1 : / / falls through 
 + case 2 : System . identityHashCode ( " Hello " ) ; break ; 
 + default : break ; 
 + } 
 + 
 + ItemListener lis = new ItemListener ( ) { 
 + 
 + / / should give an ncss of 2 
 + public void itemStateChanged ( ItemEvent e ) { 
 + System . identityHashCode ( " Hello " ) ; 
 + } 
 + } ; 
 + } 
 + 
 + / / should give an ncss of 2 
 + private class TestInnerClass { 
 + 
 + private Object test ; 
 + } 
 + } 
 + 
 + / / should give an ncss of 10 
 + class TestTopLevelNestedClass { 
 + 
 + private Object mObject ; 
 + 
 + / / should give an ncss of 8 
 + private void testMethod ( ) { 
 + 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + 
 + if ( i = = 0 ) { 
 + 
 + / / should count as 1 
 + int x = 1 , y = 2 ; 
 + } 
 + else { 
 + int abc = 0 ; 
 + 
 + / / should count as 2 
 + testLabel : abc = 1 ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + class Input0 { 
 + static { } 
 + { } 
 + public Input0 ( ) { } 
 + }

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index d9d5d09 . . 21a03f4 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 92 , 8 + 92 , 7 @ @ 
 < target name = " clean " description = " Cleans any directories and generated files " > 
 < delete > 
 < fileset dir = " src / checkstyle " > 
 - < include name = " * * / Generated * . java " / > 
 - < include name = " * * / Generated * . txt " / > 
 + < include name = " * * / Generated * " / > 
 < include name = " * * / expandedjava * . g " / > 
 < / fileset > 
 < / delete > 
 @ @ - 551 , 8 + 550 , 7 @ @ For users of JDK 1 . 5 at least version 1 . 6 . 2 of Ant is required . 
 < mkdir dir = " $ { dist . dir } / checkstyle - src - $ { version } " / > 
 < copy todir = " $ { dist . dir } / checkstyle - src - $ { version } " > 
 < fileset dir = " . " > 
 - < exclude name = " src / checkstyle / * * / Generated * . java " / > 
 - < exclude name = " src / checkstyle / * * / Generated * . txt " / > 
 + < exclude name = " src / checkstyle / * * / Generated * " / > 
 < include name = " * . xml " / > 
 < include name = " LICENSE * " / > 
 < include name = " README " / > 
 @ @ - 601 , 15 + 599 , 10 @ @ For users of JDK 1 . 5 at least version 1 . 6 . 2 of Ant is required . 
 offline = " yes " 
 href = " http : / / www . antlr . org / javadoc / " / > 
 < fileset dir = " src / checkstyle " > 
 + < include name = " * * / * . java " / > 
 < exclude name = " * * / Generated * . java " / > 
 - < exclude name = " * * / Generated * . txt " / > 
 < exclude name = " * * / gui / * . java " / > 
 < exclude name = " * * / checks / * * " / > 
 - < exclude name = " * * / * . properties " / > 
 - < exclude name = " * * / * . g " / > 
 - < exclude name = " * * / * . dtd " / > 
 - < exclude name = " * * / * . xml " / > 
 - < exclude name = " * * / * . html " / > 
 < / fileset > 
 < / javadoc > 
 < / target > 
 diff - - git a / lib / antlr . jar b / lib / antlr . jar 
 index 8850fc6 . . 3702b64 100644 
 Binary files a / lib / antlr . jar and b / lib / antlr . jar differ 
 diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml 
 index d596b53 . . f3868f4 100755 
 - - - a / src / xdocs / releasenotes . xml 
 + + + b / src / xdocs / releasenotes . xml 
 @ @ - 45 , 6 + 45 , 10 @ @ 
 Added the style sheet checkstyle - frames . xsl , thanks to Paul 
 King . ( Bug 1385095 ) . 
 < / li > 
 + 
 + 	 < li > 
 + 	 Upgraded to ANTLR 2 . 7 . 6 . 
 + 	 < / li > 
 < / ul > 
 
 < p > Fixed Bugs : < / p >
