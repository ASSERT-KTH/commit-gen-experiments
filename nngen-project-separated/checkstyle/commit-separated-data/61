BLEU SCORE: 0.020980574531482755

TEST MSG: Issue # 5750 : aligned javadoc / xdoc for EmptyBlock
GENERATED MSG: Migrated blocks documentation to Doclet format .

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> index 310de05 . . e4735d2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> @ @ - 28 , 40 + 28 , 91 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> <nl> / * * <nl> + * < p > <nl> * Checks for empty blocks . This check does not validate sequential blocks . <nl> - * The policy to verify is specified using the { @ link <nl> - * BlockOption } class and defaults to { @ link BlockOption # STATEMENT } . <nl> - * <nl> - * < p > By default the check will check the following blocks : <nl> - * { @ link TokenTypes # LITERAL _ WHILE LITERAL _ WHILE } , <nl> - * { @ link TokenTypes # LITERAL _ TRY LITERAL _ TRY } , <nl> - * { @ link TokenTypes # LITERAL _ FINALLY LITERAL _ FINALLY } , <nl> - * { @ link TokenTypes # LITERAL _ DO LITERAL _ DO } , <nl> - * { @ link TokenTypes # LITERAL _ IF LITERAL _ IF } , <nl> - * { @ link TokenTypes # LITERAL _ ELSE LITERAL _ ELSE } , <nl> - * { @ link TokenTypes # LITERAL _ FOR LITERAL _ FOR } , <nl> - * { @ link TokenTypes # STATIC _ INIT STATIC _ INIT } , <nl> - * { @ link TokenTypes # LITERAL _ SWITCH LITERAL _ SWITCH } . <nl> - * { @ link TokenTypes # LITERAL _ SYNCHRONIZED LITERAL _ SYNCHRONIZED } . <nl> * < / p > <nl> - * <nl> - * < p > An example of how to configure the check is : <nl> + * < p > <nl> + * Sequential blocks won ' t be checked . Also , no violations for fallthrough : <nl> + * < / p > <nl> + * < pre > <nl> + * switch ( a ) { <nl> + * case 1 : / / no violation <nl> + * case 2 : / / no violation <nl> + * case 3 : someMethod ( ) ; { } / / no violation <nl> + * default : break ; <nl> + * } <nl> + * < / pre > <nl> + * < p > <nl> + * This check processes LITERAL _ CASE and LITERAL _ DEFAULT separately . <nl> + * So , if tokens = LITERAL _ DEFAULT , following code will not trigger any violation , <nl> + * as the empty block belongs to LITERAL _ CASE : <nl> + * < / p > <nl> + * < p > <nl> + * Configuration : <nl> + * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; EmptyBlock & quot ; & gt ; <nl> + * & lt ; property name = & quot ; tokens & quot ; value = & quot ; LITERAL _ DEFAULT & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * < p > <nl> + * Result : <nl> + * < / p > <nl> + * < pre > <nl> + * switch ( a ) { <nl> + * default : / / no violation for " default : " as empty block belong to " case 1 : " <nl> + * case 1 : { } <nl> + * } <nl> + * < / pre > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code option } - specify the policy on block contents . <nl> + * Default value is { @ code statement } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code tokens } - tokens to check <nl> + * Default value is : <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ WHILE " > <nl> + * LITERAL _ WHILE < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ TRY " > <nl> + * LITERAL _ TRY < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ FINALLY " > <nl> + * LITERAL _ FINALLY < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ DO " > <nl> + * LITERAL _ DO < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ IF " > <nl> + * LITERAL _ IF < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ ELSE " > <nl> + * LITERAL _ ELSE < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ FOR " > <nl> + * LITERAL _ FOR < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INSTANCE _ INIT " > <nl> + * INSTANCE _ INIT < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STATIC _ INIT " > <nl> + * STATIC _ INIT < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ SWITCH " > <nl> + * LITERAL _ SWITCH < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ SYNCHRONIZED " > <nl> + * LITERAL _ SYNCHRONIZED < / a > . <nl> + * < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * To configure the check : <nl> * < / p > <nl> * < pre > <nl> * & lt ; module name = " EmptyBlock " / & gt ; <nl> * < / pre > <nl> - * <nl> - * < p > An example of how to configure the check for the { @ link <nl> - * BlockOption # TEXT } policy and only try blocks is : <nl> + * < p > <nl> + * To configure the check for the { @ code text } policy and only { @ code try } blocks : <nl> * < / p > <nl> - * <nl> * < pre > <nl> - * & lt ; module name = " EmptyBlock " & gt ; <nl> - * & lt ; property name = " tokens " value = " LITERAL _ TRY " / & gt ; <nl> - * & lt ; property name = " option " value = " text " / & gt ; <nl> + * & lt ; module name = & quot ; EmptyBlock & quot ; & gt ; <nl> + * & lt ; property name = & quot ; option & quot ; value = & quot ; text & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; tokens & quot ; value = & quot ; LITERAL _ TRY & quot ; / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> * <nl> + * @ since 3 . 0 <nl> * / <nl> @ StatelessCheck <nl> public class EmptyBlockCheck <nl> @ @ - 79 , 11 + 130 , 11 @ @ public class EmptyBlockCheck <nl> * / <nl> public static final String MSG _ KEY _ BLOCK _ EMPTY = " block . empty " ; <nl> <nl> - / * * The policy to enforce . * / <nl> + / * * Specify the policy on block contents . * / <nl> private BlockOption option = BlockOption . STATEMENT ; <nl> <nl> / * * <nl> - * Set the option to enforce . <nl> + * Setter to specify the policy on block contents . <nl> * @ param optionStr string to decode option from <nl> * @ throws IllegalArgumentException if unable to decode <nl> * / <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index 118f756 . . 88453a3 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 76 , 6 + 76 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " ClassTypeParameterName " , <nl> " ConstantName " , <nl> " CustomImportOrder " , <nl> + " EmptyBlock " , <nl> " ImportOrder " , <nl> " InterfaceMemberImpliedModifier " , <nl> " InterfaceTypeParameterName " , <nl> diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml <nl> index 1c51f95 . . a5470cd 100644 <nl> - - - a / src / xdocs / config _ blocks . xml <nl> + + + b / src / xdocs / config _ blocks . xml <nl> @ @ - 152 , 8 + 152 , 8 @ @ switch ( a ) <nl> < / section > <nl> <nl> < section name = " EmptyBlock " > <nl> + < p > Since Checkstyle 3 . 0 < / p > <nl> < subsection name = " Description " id = " EmptyBlock _ Description " > <nl> - < p > Since Checkstyle 3 . 0 < / p > <nl> < p > Checks for empty blocks . This check does not validate sequential blocks . < / p > <nl> <nl> < p > Sequential blocks won ' t be checked . Also , no violations for fallthrough : < / p > <nl> @ @ - 197 , 7 + 197 , 7 @ @ switch ( a ) { <nl> < / tr > <nl> < tr > <nl> < td > option < / td > <nl> - < td > policy on block contents < / td > <nl> + < td > specify the policy on block contents . < / td > <nl> < td > < a href = " property _ types . html # block " > Block Policy < / a > < / td > <nl> < td > < code > statement < / code > < / td > <nl> < td > 3 . 0 < / td > <nl> @ @ - 205 , 7 + 205 , 6 @ @ switch ( a ) { <nl> < tr > <nl> < td > tokens < / td > <nl> < td > tokens to check < / td > <nl> - <nl> < td > <nl> subset of tokens <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ WHILE " >
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / ScopeUtils . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / ScopeUtils . java <nl> index e409996 . . 491983c 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / ScopeUtils . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / ScopeUtils . java <nl> @ @ - 115 , 8 + 115 , 11 @ @ public final class ScopeUtils <nl> token = token . getParent ( ) ) <nl> { <nl> final int type = token . getType ( ) ; <nl> - if ( type = = TokenTypes . CLASS _ DEF ) { <nl> - break ; / / in a class <nl> + if ( type = = TokenTypes . CLASS _ DEF <nl> + | | type = = TokenTypes . ENUM _ DEF <nl> + | | type = = TokenTypes . ANNOTATION _ DEF ) <nl> + { <nl> + break ; / / in a class , enum or annotation <nl> } <nl> else if ( type = = TokenTypes . LITERAL _ NEW ) { <nl> break ; / / inner implementation <nl> @ @ - 147 , 8 + 150 , 11 @ @ public final class ScopeUtils <nl> token = token . getParent ( ) ) <nl> { <nl> final int type = token . getType ( ) ; <nl> - if ( type = = TokenTypes . CLASS _ DEF ) { <nl> - break ; / / in a class <nl> + if ( type = = TokenTypes . CLASS _ DEF <nl> + | | type = = TokenTypes . ENUM _ DEF <nl> + | | type = = TokenTypes . INTERFACE _ DEF ) <nl> + { <nl> + break ; / / in a class , enum or interface <nl> } <nl> else if ( type = = TokenTypes . LITERAL _ NEW ) { <nl> break ; / / inner implementation

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 index 310de05 . . e4735d2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 @ @ - 28 , 40 + 28 , 91 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 
 / * * 
 + * < p > 
 * Checks for empty blocks . This check does not validate sequential blocks . 
 - * The policy to verify is specified using the { @ link 
 - * BlockOption } class and defaults to { @ link BlockOption # STATEMENT } . 
 - * 
 - * < p > By default the check will check the following blocks : 
 - * { @ link TokenTypes # LITERAL _ WHILE LITERAL _ WHILE } , 
 - * { @ link TokenTypes # LITERAL _ TRY LITERAL _ TRY } , 
 - * { @ link TokenTypes # LITERAL _ FINALLY LITERAL _ FINALLY } , 
 - * { @ link TokenTypes # LITERAL _ DO LITERAL _ DO } , 
 - * { @ link TokenTypes # LITERAL _ IF LITERAL _ IF } , 
 - * { @ link TokenTypes # LITERAL _ ELSE LITERAL _ ELSE } , 
 - * { @ link TokenTypes # LITERAL _ FOR LITERAL _ FOR } , 
 - * { @ link TokenTypes # STATIC _ INIT STATIC _ INIT } , 
 - * { @ link TokenTypes # LITERAL _ SWITCH LITERAL _ SWITCH } . 
 - * { @ link TokenTypes # LITERAL _ SYNCHRONIZED LITERAL _ SYNCHRONIZED } . 
 * < / p > 
 - * 
 - * < p > An example of how to configure the check is : 
 + * < p > 
 + * Sequential blocks won ' t be checked . Also , no violations for fallthrough : 
 + * < / p > 
 + * < pre > 
 + * switch ( a ) { 
 + * case 1 : / / no violation 
 + * case 2 : / / no violation 
 + * case 3 : someMethod ( ) ; { } / / no violation 
 + * default : break ; 
 + * } 
 + * < / pre > 
 + * < p > 
 + * This check processes LITERAL _ CASE and LITERAL _ DEFAULT separately . 
 + * So , if tokens = LITERAL _ DEFAULT , following code will not trigger any violation , 
 + * as the empty block belongs to LITERAL _ CASE : 
 + * < / p > 
 + * < p > 
 + * Configuration : 
 + * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; EmptyBlock & quot ; & gt ; 
 + * & lt ; property name = & quot ; tokens & quot ; value = & quot ; LITERAL _ DEFAULT & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * < p > 
 + * Result : 
 + * < / p > 
 + * < pre > 
 + * switch ( a ) { 
 + * default : / / no violation for " default : " as empty block belong to " case 1 : " 
 + * case 1 : { } 
 + * } 
 + * < / pre > 
 + * < ul > 
 + * < li > 
 + * Property { @ code option } - specify the policy on block contents . 
 + * Default value is { @ code statement } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code tokens } - tokens to check 
 + * Default value is : 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ WHILE " > 
 + * LITERAL _ WHILE < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ TRY " > 
 + * LITERAL _ TRY < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ FINALLY " > 
 + * LITERAL _ FINALLY < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ DO " > 
 + * LITERAL _ DO < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ IF " > 
 + * LITERAL _ IF < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ ELSE " > 
 + * LITERAL _ ELSE < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ FOR " > 
 + * LITERAL _ FOR < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INSTANCE _ INIT " > 
 + * INSTANCE _ INIT < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STATIC _ INIT " > 
 + * STATIC _ INIT < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ SWITCH " > 
 + * LITERAL _ SWITCH < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ SYNCHRONIZED " > 
 + * LITERAL _ SYNCHRONIZED < / a > . 
 + * < / li > 
 + * < / ul > 
 + * < p > 
 + * To configure the check : 
 * < / p > 
 * < pre > 
 * & lt ; module name = " EmptyBlock " / & gt ; 
 * < / pre > 
 - * 
 - * < p > An example of how to configure the check for the { @ link 
 - * BlockOption # TEXT } policy and only try blocks is : 
 + * < p > 
 + * To configure the check for the { @ code text } policy and only { @ code try } blocks : 
 * < / p > 
 - * 
 * < pre > 
 - * & lt ; module name = " EmptyBlock " & gt ; 
 - * & lt ; property name = " tokens " value = " LITERAL _ TRY " / & gt ; 
 - * & lt ; property name = " option " value = " text " / & gt ; 
 + * & lt ; module name = & quot ; EmptyBlock & quot ; & gt ; 
 + * & lt ; property name = & quot ; option & quot ; value = & quot ; text & quot ; / & gt ; 
 + * & lt ; property name = & quot ; tokens & quot ; value = & quot ; LITERAL _ TRY & quot ; / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 * 
 + * @ since 3 . 0 
 * / 
 @ StatelessCheck 
 public class EmptyBlockCheck 
 @ @ - 79 , 11 + 130 , 11 @ @ public class EmptyBlockCheck 
 * / 
 public static final String MSG _ KEY _ BLOCK _ EMPTY = " block . empty " ; 
 
 - / * * The policy to enforce . * / 
 + / * * Specify the policy on block contents . * / 
 private BlockOption option = BlockOption . STATEMENT ; 
 
 / * * 
 - * Set the option to enforce . 
 + * Setter to specify the policy on block contents . 
 * @ param optionStr string to decode option from 
 * @ throws IllegalArgumentException if unable to decode 
 * / 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index 118f756 . . 88453a3 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 76 , 6 + 76 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " ClassTypeParameterName " , 
 " ConstantName " , 
 " CustomImportOrder " , 
 + " EmptyBlock " , 
 " ImportOrder " , 
 " InterfaceMemberImpliedModifier " , 
 " InterfaceTypeParameterName " , 
 diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml 
 index 1c51f95 . . a5470cd 100644 
 - - - a / src / xdocs / config _ blocks . xml 
 + + + b / src / xdocs / config _ blocks . xml 
 @ @ - 152 , 8 + 152 , 8 @ @ switch ( a ) 
 < / section > 
 
 < section name = " EmptyBlock " > 
 + < p > Since Checkstyle 3 . 0 < / p > 
 < subsection name = " Description " id = " EmptyBlock _ Description " > 
 - < p > Since Checkstyle 3 . 0 < / p > 
 < p > Checks for empty blocks . This check does not validate sequential blocks . < / p > 
 
 < p > Sequential blocks won ' t be checked . Also , no violations for fallthrough : < / p > 
 @ @ - 197 , 7 + 197 , 7 @ @ switch ( a ) { 
 < / tr > 
 < tr > 
 < td > option < / td > 
 - < td > policy on block contents < / td > 
 + < td > specify the policy on block contents . < / td > 
 < td > < a href = " property _ types . html # block " > Block Policy < / a > < / td > 
 < td > < code > statement < / code > < / td > 
 < td > 3 . 0 < / td > 
 @ @ - 205 , 7 + 205 , 6 @ @ switch ( a ) { 
 < tr > 
 < td > tokens < / td > 
 < td > tokens to check < / td > 
 - 
 < td > 
 subset of tokens 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ WHILE " >

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / ScopeUtils . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / ScopeUtils . java 
 index e409996 . . 491983c 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / api / ScopeUtils . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / api / ScopeUtils . java 
 @ @ - 115 , 8 + 115 , 11 @ @ public final class ScopeUtils 
 token = token . getParent ( ) ) 
 { 
 final int type = token . getType ( ) ; 
 - if ( type = = TokenTypes . CLASS _ DEF ) { 
 - break ; / / in a class 
 + if ( type = = TokenTypes . CLASS _ DEF 
 + | | type = = TokenTypes . ENUM _ DEF 
 + | | type = = TokenTypes . ANNOTATION _ DEF ) 
 + { 
 + break ; / / in a class , enum or annotation 
 } 
 else if ( type = = TokenTypes . LITERAL _ NEW ) { 
 break ; / / inner implementation 
 @ @ - 147 , 8 + 150 , 11 @ @ public final class ScopeUtils 
 token = token . getParent ( ) ) 
 { 
 final int type = token . getType ( ) ; 
 - if ( type = = TokenTypes . CLASS _ DEF ) { 
 - break ; / / in a class 
 + if ( type = = TokenTypes . CLASS _ DEF 
 + | | type = = TokenTypes . ENUM _ DEF 
 + | | type = = TokenTypes . INTERFACE _ DEF ) 
 + { 
 + break ; / / in a class , enum or interface 
 } 
 else if ( type = = TokenTypes . LITERAL _ NEW ) { 
 break ; / / inner implementation
