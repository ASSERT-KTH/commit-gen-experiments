BLEU SCORE: 0.05439330544349821

TEST MSG: Issue # 4431 : Modified RedundantModifierCheckTest . java and moved its input files to the redundantmodifier subdirectory
GENERATED MSG: Issue # 2161 : unify test input locations for coding package

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java <nl> index fd37209 . . 65e3c95 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java <nl> @ @ - 37 , 13 + 37 , 13 @ @ public class RedundantModifierCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " modifier " + File . separator + filename ) ; <nl> + + " modifier " + File . separator + " redundantmodifier " + File . separator + filename ) ; <nl> } <nl> <nl> @ Override <nl> protected String getNonCompilablePath ( String filename ) throws IOException { <nl> return super . getNonCompilablePath ( " checks " + File . separator <nl> - + " modifier " + File . separator + filename ) ; <nl> + + " modifier " + File . separator + " redundantmodifier " + File . separator + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 56 , 7 + 56 , 8 @ @ public class RedundantModifierCheckTest <nl> " 20 : 5 : " + getCheckMessage ( MSG _ KEY , " public " ) , <nl> " 26 : 5 : " + getCheckMessage ( MSG _ KEY , " static " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputModifierClassesInsideOfInterfaces . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRedundantModifierClassesInsideOfInterfaces . java " ) , <nl> + expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 79 , 7 + 80 , 7 @ @ public class RedundantModifierCheckTest <nl> " 120 : 5 : " + getCheckMessage ( MSG _ KEY , " public " ) , <nl> " 121 : 5 : " + getCheckMessage ( MSG _ KEY , " abstract " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputModifier . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRedundantModifierIt . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 88 , 7 + 89 , 8 @ @ public class RedundantModifierCheckTest <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( RedundantModifierCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputStaticModifierInInterface . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRedundantModifierStaticMethodInInterface . java " ) , <nl> + expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 99 , 7 + 101 , 7 @ @ public class RedundantModifierCheckTest <nl> final String [ ] expected = { <nl> " 5 : 9 : " + getCheckMessage ( MSG _ KEY , " final " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputFinalInDefaultMethods . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRedundantModifierFinalInInterface . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 109 , 7 + 111 , 7 @ @ public class RedundantModifierCheckTest <nl> final String [ ] expected = { <nl> " 10 : 5 : " + getCheckMessage ( MSG _ KEY , " private " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputRedundantConstructorModifier . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRedundantModifierConstructorModifier . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 120 , 7 + 122 , 7 @ @ public class RedundantModifierCheckTest <nl> " 8 : 5 : " + getCheckMessage ( MSG _ KEY , " static " ) , <nl> " 12 : 5 : " + getCheckMessage ( MSG _ KEY , " static " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputRedundantStaticModifierInInnerTypeOfInterface . java " ) , <nl> + verify ( checkConfig , getPath ( " InputRedundantModifierStaticInInnerTypeOfInterface . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 132 , 7 + 134 , 8 @ @ public class RedundantModifierCheckTest <nl> final String [ ] expected = { <nl> " 18 : 5 : " + getCheckMessage ( MSG _ KEY , " public " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputRedundantPublicModifierInNotPublicClass . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRedundantModifierPublicModifierInNotPublicClass . java " ) , <nl> + expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 148 , 8 + 151 , 8 @ @ public class RedundantModifierCheckTest <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " InputNestedClassInPublicInterfaceRedundantModifiers . java " ) , <nl> - expected ) ; <nl> + getPath ( " InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers . java " ) , <nl> + expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 186 , 7 + 189 , 8 @ @ public class RedundantModifierCheckTest <nl> " 8 : 9 : " + getCheckMessage ( MSG _ KEY , " static " ) , <nl> " 12 : 9 : " + getCheckMessage ( MSG _ KEY , " static " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputRedundantStaticModifierInNestedEnum . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRedundantModifierStaticModifierInNestedEnum . java " ) , <nl> + expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 197 , 7 + 201 , 8 @ @ public class RedundantModifierCheckTest <nl> final String [ ] expected = { <nl> " 14 : 20 : " + getCheckMessage ( MSG _ KEY , " final " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputFinalInAnonymousClass . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRedundantModifierFinalInAnonymousClass . java " ) , <nl> + expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 208 , 7 + 213 , 8 @ @ public class RedundantModifierCheckTest <nl> " 27 : 14 : " + getCheckMessage ( MSG _ KEY , " final " ) , <nl> " 28 : 17 : " + getCheckMessage ( MSG _ KEY , " final " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputFinalInTryWithResource . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRedundantModifierFinalInTryWithResource . java " ) , <nl> + expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 221 , 7 + 227 , 8 @ @ public class RedundantModifierCheckTest <nl> " 16 : 24 : " + getCheckMessage ( MSG _ KEY , " final " ) , <nl> " 25 : 33 : " + getCheckMessage ( MSG _ KEY , " final " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputFinalInAbstractMethods . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRedundantModifierFinalInAbstractMethods . java " ) , <nl> + expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 231 , 6 + 238 , 6 @ @ public class RedundantModifierCheckTest <nl> " 7 : 16 : " + getCheckMessage ( MSG _ KEY , " final " ) , <nl> " 22 : 16 : " + getCheckMessage ( MSG _ KEY , " final " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputFinalInEnumMethods . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRedundantModifierFinalInEnumMethods . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAbstractMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAbstractMethods . java <nl> deleted file mode 100644 <nl> index 00c1018 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAbstractMethods . java <nl> + + + / dev / null <nl> @ @ - 1 , 26 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> - <nl> - public abstract class InputFinalInAbstractMethods { <nl> - public abstract void method ( final String param ) ; / / violation <nl> - <nl> - public abstract void method2 ( String param ) ; <nl> - <nl> - public abstract void method3 ( String param1 , final String param2 ) ; / / violation <nl> - } <nl> - interface IWhatever { <nl> - void method ( final String param ) ; / / violation <nl> - <nl> - void method2 ( String param ) ; <nl> - } <nl> - class CWhatever { <nl> - native void method ( final String param ) ; / / violation <nl> - <nl> - native void method2 ( String param ) ; <nl> - } <nl> - enum EWhatever { <nl> - TEST ( ) { <nl> - public void method ( String s ) { } ; <nl> - } ; <nl> - <nl> - public abstract void method ( final String s ) ; / / violation <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAnonymousClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAnonymousClass . java <nl> deleted file mode 100644 <nl> index a1678d8 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAnonymousClass . java <nl> + + + / dev / null <nl> @ @ - 1 , 18 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> - <nl> - public class InputFinalInAnonymousClass { <nl> - public static abstract class Example { <nl> - public abstract void innerTest ( ) ; <nl> - <nl> - public final void test ( ) { <nl> - } <nl> - } <nl> - <nl> - public static void test ( ) { <nl> - new Example ( ) { <nl> - @ Override <nl> - public final void innerTest ( ) { / / violation <nl> - } <nl> - } ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInDefaultMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInDefaultMethods . java <nl> deleted file mode 100644 <nl> index b1b4e7e . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInDefaultMethods . java <nl> + + + / dev / null <nl> @ @ - 1 , 17 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> - <nl> - <nl> - public interface InputFinalInDefaultMethods { <nl> - 	 final int k = 5 ; / / violation <nl> - 	 <nl> - default int defaultMethod ( final int x ) { <nl> - 	 if ( k = = 5 ) { <nl> - 	 	 final int t = 24 ; / / No violation here ! <nl> - 	 	 for ( ; ; ) { <nl> - 	 	 	 final String s = " some " ; / / No violation here ! <nl> - 	 	 } <nl> - 	 } <nl> - final int square = x * x ; / / No violation here ! <nl> - return square ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInEnumMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInEnumMethods . java <nl> deleted file mode 100644 <nl> index 3dae26e . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInEnumMethods . java <nl> + + + / dev / null <nl> @ @ - 1 , 32 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> - <nl> - public enum InputFinalInEnumMethods { <nl> - E1 , <nl> - E2 { <nl> - @ Override <nl> - public final void v ( ) { <nl> - } <nl> - } ; <nl> - <nl> - public void v ( ) { <nl> - } <nl> - <nl> - / / not redundant since field can override this method if ' final ' is removed <nl> - / / and that may not be desirable <nl> - public final void v2 ( ) { <nl> - } <nl> - } <nl> - enum InputFinalInEnumMethods2 { <nl> - E1 { <nl> - @ Override <nl> - public final void v ( ) { <nl> - } <nl> - } , <nl> - E2 { <nl> - @ Override <nl> - public void v ( ) { <nl> - } <nl> - } ; <nl> - <nl> - public abstract void v ( ) ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInTryWithResource . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInTryWithResource . java <nl> deleted file mode 100644 <nl> index 996d68d . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInTryWithResource . java <nl> + + + / dev / null <nl> @ @ - 1 , 37 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> - <nl> - import java . io . BufferedReader ; <nl> - import java . io . FileReader ; <nl> - import java . io . IOException ; <nl> - import java . io . InputStreamReader ; <nl> - import java . lang . annotation . ElementType ; <nl> - import java . lang . annotation . Target ; <nl> - <nl> - public class InputFinalInTryWithResource { <nl> - public static void test ( ) { <nl> - try { <nl> - } <nl> - catch ( RuntimeException e ) { <nl> - } <nl> - <nl> - try ( @ NotNull BufferedReader br = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ) { <nl> - } <nl> - catch ( IOException e ) { <nl> - } <nl> - <nl> - try ( final BufferedReader br = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ) { <nl> - } <nl> - catch ( IOException e ) { <nl> - } <nl> - <nl> - try ( final BufferedReader br = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ; <nl> - final BufferedReader br2 = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ) { <nl> - } <nl> - catch ( IOException e ) { <nl> - } <nl> - } <nl> - } <nl> - <nl> - @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER , ElementType . LOCAL _ VARIABLE } ) <nl> - @ interface NotNull { <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifierClassesInsideOfInterfaces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifierClassesInsideOfInterfaces . java <nl> deleted file mode 100644 <nl> index a7c1833 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifierClassesInsideOfInterfaces . java <nl> + + + / dev / null <nl> @ @ - 1 , 31 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> - <nl> - public interface InputModifierClassesInsideOfInterfaces { <nl> - <nl> - / / Class inside of interface can be abstract and non abstract , but always public static . <nl> - abstract class A { } <nl> - <nl> - class B { } <nl> - <nl> - / / All classes inside interfaces are public static classes , and static modifier is redundant . <nl> - static class C { / / violation <nl> - public static boolean verifyState ( A a ) { <nl> - return true ; <nl> - } <nl> - } <nl> - <nl> - public class E { } / / violation <nl> - <nl> - / / Enums are static implicit subclasses of Enum class . <nl> - public enum Role1 { / / violation <nl> - ADMIN , <nl> - EDITOR , <nl> - VANILLA ; <nl> - } <nl> - <nl> - static enum Role2 { / / violation <nl> - ADMIN , <nl> - EDITOR , <nl> - VANILLA ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputNestedClassInPublicInterfaceRedundantModifiers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputNestedClassInPublicInterfaceRedundantModifiers . java <nl> deleted file mode 100644 <nl> index e6bb28d . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputNestedClassInPublicInterfaceRedundantModifiers . java <nl> + + + / dev / null <nl> @ @ - 1 , 50 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2015 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> - <nl> - public interface InputNestedClassInPublicInterfaceRedundantModifiers { <nl> - interface PublicInnerInterface { <nl> - interface PublicInnerInnerInterface { <nl> - class PublicInnerClassInNestedPublicInterfaces { <nl> - public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class <nl> - } <nl> - } <nl> - } <nl> - class PublicClassInsideInterface { <nl> - private interface PrivateNestedInterface { <nl> - class ClassInPrivateNestedInterface { <nl> - public ClassInPrivateNestedInterface ( ) { } / / Redundant in not public class <nl> - } <nl> - public interface PrivateNestedInterfaceWithPublicModifier { <nl> - class ClassInPrivateNestedInterface { <nl> - public ClassInPrivateNestedInterface ( ) { } / / Redundant in non public scope <nl> - } <nl> - } <nl> - } <nl> - public interface PublicInnerInnerPublicInterface { <nl> - class PublicInnerClassInNestedPublicInterfaces { <nl> - public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class <nl> - } <nl> - } <nl> - protected interface PublicInnerInnerProtectedInterface { <nl> - class PublicInnerClassInNestedProtectedInterfaces { <nl> - public PublicInnerClassInNestedProtectedInterfaces ( ) { } / / Redundant in non public scope <nl> - } <nl> - } <nl> - } <nl> - class PublicNestedClassInInterfaceWithPublicConstructor { <nl> - public PublicNestedClassInInterfaceWithPublicConstructor ( ) { } / / OK in public class <nl> - private class PrivateClassInPublicNestedClass { <nl> - public class PublicInPrivateClass { <nl> - public PublicInPrivateClass ( ) { } / / Redundant in non public class <nl> - } <nl> - } <nl> - } <nl> - final class FinalNestedClassInInterface { <nl> - interface InnerInterface { <nl> - final class FinalNestedClassInNestedInterface { } <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantConstructorModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantConstructorModifier . java <nl> deleted file mode 100644 <nl> index 1c1b5be . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantConstructorModifier . java <nl> + + + / dev / null <nl> @ @ - 1 , 19 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2015 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> - <nl> - public enum InputRedundantConstructorModifier { <nl> - VAL1 , VAL2 ; <nl> - <nl> - private InputRedundantConstructorModifier ( ) { } / / violation <nl> - <nl> - InputRedundantConstructorModifier ( int i ) { } <nl> - <nl> - InputRedundantConstructorModifier ( char c ) { } <nl> - } <nl> - <nl> - class ProperPrivateConstructor { <nl> - private ProperPrivateConstructor ( ) { } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantPublicModifierInNotPublicClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantPublicModifierInNotPublicClass . java <nl> deleted file mode 100644 <nl> index 46a55d9 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantPublicModifierInNotPublicClass . java <nl> + + + / dev / null <nl> @ @ - 1 , 24 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2015 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> - <nl> - public class InputRedundantPublicModifierInNotPublicClass { <nl> - public InputRedundantPublicModifierInNotPublicClass ( ) { } <nl> - protected class ProtectedClass { <nl> - public ProtectedClass ( ) { } <nl> - } <nl> - public class PublicInnerClass { <nl> - public PublicInnerClass ( ) { } / / OK for class accessible from public scope <nl> - } <nl> - } <nl> - <nl> - class PackagePrivateClass { <nl> - public PackagePrivateClass ( ) { } / / violation expected <nl> - } <nl> - <nl> - class PackagePrivateClassWithNotRedundantConstructor { <nl> - PackagePrivateClassWithNotRedundantConstructor ( ) { } <nl> - <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInInnerTypeOfInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInInnerTypeOfInterface . java <nl> deleted file mode 100644 <nl> index 06a3332 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInInnerTypeOfInterface . java <nl> + + + / dev / null <nl> @ @ - 1 , 15 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2015 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> - <nl> - public interface InputRedundantStaticModifierInInnerTypeOfInterface { <nl> - static class MyInnerClass { } / / violation <nl> - <nl> - class MyInnerClass2 { } <nl> - <nl> - static enum MyInnerEnum { } / / violation <nl> - <nl> - enum MyInnerEnum2 { } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInNestedEnum . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInNestedEnum . java <nl> deleted file mode 100644 <nl> index a1ed223 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInNestedEnum . java <nl> + + + / dev / null <nl> @ @ - 1 , 14 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> - <nl> - public class InputRedundantStaticModifierInNestedEnum { <nl> - static enum NestedEnumWithRedundantStatic { } / / violation <nl> - <nl> - enum CorrectNestedEnum { <nl> - VAL ; <nl> - static enum NestedEnumWithRedundantStatic { } / / violation <nl> - } <nl> - <nl> - interface NestedInterface { <nl> - static enum NestedEnumWithRedundantStatic { } / / violation <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputStaticModifierInInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputStaticModifierInInterface . java <nl> deleted file mode 100644 <nl> index f32ded6 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputStaticModifierInInterface . java <nl> + + + / dev / null <nl> @ @ - 1 , 11 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> - <nl> - <nl> - public interface InputStaticModifierInInterface <nl> - { <nl> - static int f ( ) <nl> - { <nl> - int someName = 5 ; <nl> - return someName ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierClassesInsideOfInterfaces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierClassesInsideOfInterfaces . java <nl> new file mode 100644 <nl> index 0000000 . . aa9bb45 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierClassesInsideOfInterfaces . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; <nl> + <nl> + public interface InputRedundantModifierClassesInsideOfInterfaces { <nl> + <nl> + / / Class inside of interface can be abstract and non abstract , but always public static . <nl> + abstract class A { } <nl> + <nl> + class B { } <nl> + <nl> + / / All classes inside interfaces are public static classes , and static modifier is redundant . <nl> + static class C { / / violation <nl> + public static boolean verifyState ( A a ) { <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> + public class E { } / / violation <nl> + <nl> + / / Enums are static implicit subclasses of Enum class . <nl> + public enum Role1 { / / violation <nl> + ADMIN , <nl> + EDITOR , <nl> + VANILLA ; <nl> + } <nl> + <nl> + static enum Role2 { / / violation <nl> + ADMIN , <nl> + EDITOR , <nl> + VANILLA ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierConstructorModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierConstructorModifier . java <nl> new file mode 100644 <nl> index 0000000 . . bc80beb <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierConstructorModifier . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2015 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; <nl> + <nl> + public enum InputRedundantModifierConstructorModifier { <nl> + VAL1 , VAL2 ; <nl> + <nl> + private InputRedundantModifierConstructorModifier ( ) { } / / violation <nl> + <nl> + InputRedundantModifierConstructorModifier ( int i ) { } <nl> + <nl> + InputRedundantModifierConstructorModifier ( char c ) { } <nl> + } <nl> + <nl> + class ProperPrivateConstructor { <nl> + private ProperPrivateConstructor ( ) { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInAbstractMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInAbstractMethods . java <nl> new file mode 100644 <nl> index 0000000 . . 52fd015 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInAbstractMethods . java <nl> @ @ - 0 , 0 + 1 , 26 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; <nl> + <nl> + public abstract class InputRedundantModifierFinalInAbstractMethods { <nl> + public abstract void method ( final String param ) ; / / violation <nl> + <nl> + public abstract void method2 ( String param ) ; <nl> + <nl> + public abstract void method3 ( String param1 , final String param2 ) ; / / violation <nl> + } <nl> + interface IWhatever { <nl> + void method ( final String param ) ; / / violation <nl> + <nl> + void method2 ( String param ) ; <nl> + } <nl> + class CWhatever { <nl> + native void method ( final String param ) ; / / violation <nl> + <nl> + native void method2 ( String param ) ; <nl> + } <nl> + enum EWhatever { <nl> + TEST ( ) { <nl> + public void method ( String s ) { } ; <nl> + } ; <nl> + <nl> + public abstract void method ( final String s ) ; / / violation <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInAnonymousClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInAnonymousClass . java <nl> new file mode 100644 <nl> index 0000000 . . a7d1b8d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInAnonymousClass . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; <nl> + <nl> + public class InputRedundantModifierFinalInAnonymousClass { <nl> + public static abstract class Example { <nl> + public abstract void innerTest ( ) ; <nl> + <nl> + public final void test ( ) { <nl> + } <nl> + } <nl> + <nl> + public static void test ( ) { <nl> + new Example ( ) { <nl> + @ Override <nl> + public final void innerTest ( ) { / / violation <nl> + } <nl> + } ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInEnumMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInEnumMethods . java <nl> new file mode 100644 <nl> index 0000000 . . 29582cd <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInEnumMethods . java <nl> @ @ - 0 , 0 + 1 , 32 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; <nl> + <nl> + public enum InputRedundantModifierFinalInEnumMethods { <nl> + E1 , <nl> + E2 { <nl> + @ Override <nl> + public final void v ( ) { <nl> + } <nl> + } ; <nl> + <nl> + public void v ( ) { <nl> + } <nl> + <nl> + / / not redundant since field can override this method if ' final ' is removed <nl> + / / and that may not be desirable <nl> + public final void v2 ( ) { <nl> + } <nl> + } <nl> + enum InputRedundantModifierFinalInEnumMethods2 { <nl> + E1 { <nl> + @ Override <nl> + public final void v ( ) { <nl> + } <nl> + } , <nl> + E2 { <nl> + @ Override <nl> + public void v ( ) { <nl> + } <nl> + } ; <nl> + <nl> + public abstract void v ( ) ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInInterface . java <nl> new file mode 100644 <nl> index 0000000 . . 49ff05e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInInterface . java <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; <nl> + <nl> + <nl> + public interface InputRedundantModifierFinalInInterface { <nl> + 	 final int k = 5 ; / / violation <nl> + 	 <nl> + default int defaultMethod ( final int x ) { <nl> + 	 if ( k = = 5 ) { <nl> + 	 	 final int t = 24 ; / / No violation here ! <nl> + 	 	 for ( ; ; ) { <nl> + 	 	 	 final String s = " some " ; / / No violation here ! <nl> + 	 	 } <nl> + 	 } <nl> + final int square = x * x ; / / No violation here ! <nl> + return square ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInTryWithResource . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInTryWithResource . java <nl> new file mode 100644 <nl> index 0000000 . . 4af12c9 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInTryWithResource . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; <nl> + <nl> + import java . io . BufferedReader ; <nl> + import java . io . FileReader ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStreamReader ; <nl> + import java . lang . annotation . ElementType ; <nl> + import java . lang . annotation . Target ; <nl> + <nl> + public class InputRedundantModifierFinalInTryWithResource { <nl> + public static void test ( ) { <nl> + try { <nl> + } <nl> + catch ( RuntimeException e ) { <nl> + } <nl> + <nl> + try ( @ NotNull BufferedReader br = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ) { <nl> + } <nl> + catch ( IOException e ) { <nl> + } <nl> + <nl> + try ( final BufferedReader br = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ) { <nl> + } <nl> + catch ( IOException e ) { <nl> + } <nl> + <nl> + try ( final BufferedReader br = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ; <nl> + final BufferedReader br2 = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ) { <nl> + } <nl> + catch ( IOException e ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER , ElementType . LOCAL _ VARIABLE } ) <nl> + @ interface NotNull { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierIt . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierIt . java <nl> new file mode 100644 <nl> index 0000000 . . da82048 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierIt . java <nl> @ @ - 0 , 0 + 1 , 160 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; <nl> + <nl> + / * * <nl> + * Test case for Modifier checks : <nl> + * - order of modifiers <nl> + * - use of ' public ' in interface definition <nl> + * @ author lkuehne <nl> + * / <nl> + strictfp final class InputRedundantModifierIt / / illegal order of modifiers for class <nl> + { <nl> + <nl> + / * * Illegal order of modifiers for variables * / <nl> + static private boolean sModifierOrderVar = false ; <nl> + <nl> + / * * <nl> + * Illegal order of modifiers for methods . Make sure that the <nl> + * first and last modifier from the JLS sequence is used . <nl> + * / <nl> + strictfp private void doStuff ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Single annotation without other modifiers * / <nl> + @ MyAnnotation2 void someMethod ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Illegal order of annotation - must come first * / <nl> + private @ MyAnnotation2 void someMethod2 ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Annotation in middle of other modifiers otherwise in correct order * / <nl> + private @ MyAnnotation2 strictfp void someMethod3 ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Correct order * / <nl> + @ MyAnnotation2 private strictfp void someMethod4 ( ) <nl> + { <nl> + } <nl> + <nl> + / * * Annotation in middle of other modifiers otherwise in correct order * / <nl> + @ MyAnnotation2 private static @ MyAnnotation4 strictfp void someMethod5 ( ) <nl> + { <nl> + } <nl> + <nl> + / * * holder for redundant ' public ' modifier check . * / <nl> + public static interface InputRedundantPublicModifier / / violation <nl> + { <nl> + / * * redundant ' public ' modifier * / <nl> + public void a ( ) ; / / violation <nl> + <nl> + / * * all OK * / <nl> + void b ( ) ; <nl> + <nl> + / * * redundant abstract modifier * / <nl> + abstract void c ( ) ; / / violation <nl> + <nl> + / * * redundant ' public ' modifier * / <nl> + public float PI _ PUBLIC = ( float ) 3 . 14 ; / / violation <nl> + <nl> + / * * redundant ' abstract ' modifier ( field can not be abstract ) * / <nl> + / / abstract float PI _ ABSTRACT = ( float ) 3 . 14 ; <nl> + <nl> + / * * redundant ' final ' modifier * / <nl> + final float PI _ FINAL = ( float ) 3 . 14 ; / / violation <nl> + <nl> + / * * all OK * / <nl> + float PI _ OK = ( float ) 3 . 14 ; <nl> + } <nl> + <nl> + / * * redundant ' final ' modifier * / <nl> + private final void method ( ) / / violation <nl> + { <nl> + } <nl> + } <nl> + <nl> + / * * Holder for redundant ' final ' check . * / <nl> + final class RedundantFinalClass <nl> + { <nl> + / * * redundant ' final ' modifier * / <nl> + public final void finalMethod ( ) / / violation <nl> + { <nl> + } <nl> + <nl> + / * * OK * / <nl> + public void method ( ) <nl> + { <nl> + } <nl> + } <nl> + <nl> + / * * Holder for redundant modifiers of inner implementation * / <nl> + abstract interface InnerImplementation / / violation <nl> + { <nl> + InnerImplementation inner = <nl> + new InnerImplementation ( ) <nl> + { <nl> + / * * compiler requires ' public ' modifier * / <nl> + public void method ( ) <nl> + { <nl> + } <nl> + } ; <nl> + <nl> + void method ( ) ; <nl> + } <nl> + <nl> + / * * Holder for redundant modifiers of annotation fields / variables * / <nl> + @ interface Annotation <nl> + { <nl> + public String s1 = " " ; / / violation <nl> + final String s2 = " " ; / / violation <nl> + static String s3 = " " ; / / violation <nl> + String s4 = " " ; <nl> + public String blah ( ) ; / / violation <nl> + abstract String blah2 ( ) ; / / violation <nl> + } <nl> + <nl> + @ interface MyAnnotation2 { <nl> + } <nl> + <nl> + @ interface MyAnnotation4 { <nl> + } <nl> + <nl> + class SafeVarargsUsage { <nl> + @ Deprecated <nl> + @ SafeVarargs <nl> + private final void foo ( int . . . k ) { } <nl> + <nl> + @ Deprecated <nl> + @ SafeVarargs <nl> + @ SuppressWarnings ( " " ) <nl> + private final void foo1 ( Object . . . obj ) { } <nl> + } <nl> + <nl> + enum TestEnum { <nl> + ; <nl> + <nl> + public void method ( ) { <nl> + } <nl> + } <nl> + <nl> + / * * holder for interface specific modifier check . * / <nl> + interface InputDefaultPublicModifier <nl> + { <nl> + / * * correct order * / <nl> + default strictfp void a ( ) <nl> + { <nl> + } <nl> + <nl> + / * * wrong order * / <nl> + strictfp default void b ( ) / / violation <nl> + { <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers . java <nl> new file mode 100644 <nl> index 0000000 . . 09e5f5e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers . java <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2015 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; <nl> + <nl> + public interface InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers { <nl> + interface PublicInnerInterface { <nl> + interface PublicInnerInnerInterface { <nl> + class PublicInnerClassInNestedPublicInterfaces { <nl> + public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class <nl> + } <nl> + } <nl> + } <nl> + class PublicClassInsideInterface { <nl> + private interface PrivateNestedInterface { <nl> + class ClassInPrivateNestedInterface { <nl> + public ClassInPrivateNestedInterface ( ) { } / / Redundant in not public class <nl> + } <nl> + public interface PrivateNestedInterfaceWithPublicModifier { <nl> + class ClassInPrivateNestedInterface { <nl> + public ClassInPrivateNestedInterface ( ) { } / / Redundant in non public scope <nl> + } <nl> + } <nl> + } <nl> + public interface PublicInnerInnerPublicInterface { <nl> + class PublicInnerClassInNestedPublicInterfaces { <nl> + public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class <nl> + } <nl> + } <nl> + protected interface PublicInnerInnerProtectedInterface { <nl> + class PublicInnerClassInNestedProtectedInterfaces { <nl> + public PublicInnerClassInNestedProtectedInterfaces ( ) { } / / Redundant in non public scope <nl> + } <nl> + } <nl> + } <nl> + class PublicNestedClassInInterfaceWithPublicConstructor { <nl> + public PublicNestedClassInInterfaceWithPublicConstructor ( ) { } / / OK in public class <nl> + private class PrivateClassInPublicNestedClass { <nl> + public class PublicInPrivateClass { <nl> + public PublicInPrivateClass ( ) { } / / Redundant in non public class <nl> + } <nl> + } <nl> + } <nl> + final class FinalNestedClassInInterface { <nl> + interface InnerInterface { <nl> + final class FinalNestedClassInNestedInterface { } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierPublicModifierInNotPublicClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierPublicModifierInNotPublicClass . java <nl> new file mode 100644 <nl> index 0000000 . . 84fdb71 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierPublicModifierInNotPublicClass . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2015 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; <nl> + <nl> + public class InputRedundantModifierPublicModifierInNotPublicClass { <nl> + public InputRedundantModifierPublicModifierInNotPublicClass ( ) { } <nl> + protected class ProtectedClass { <nl> + public ProtectedClass ( ) { } <nl> + } <nl> + public class PublicInnerClass { <nl> + public PublicInnerClass ( ) { } / / OK for class accessible from public scope <nl> + } <nl> + } <nl> + <nl> + class PackagePrivateClass { <nl> + public PackagePrivateClass ( ) { } / / violation expected <nl> + } <nl> + <nl> + class PackagePrivateClassWithNotRedundantConstructor { <nl> + PackagePrivateClassWithNotRedundantConstructor ( ) { } <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticInInnerTypeOfInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticInInnerTypeOfInterface . java <nl> new file mode 100644 <nl> index 0000000 . . 5bf09cd <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticInInnerTypeOfInterface . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2015 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; <nl> + <nl> + public interface InputRedundantModifierStaticInInnerTypeOfInterface { <nl> + static class MyInnerClass { } / / violation <nl> + <nl> + class MyInnerClass2 { } <nl> + <nl> + static enum MyInnerEnum { } / / violation <nl> + <nl> + enum MyInnerEnum2 { } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticMethodInInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticMethodInInterface . java <nl> new file mode 100644 <nl> index 0000000 . . 0281ccf <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticMethodInInterface . java <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; <nl> + <nl> + <nl> + public interface InputRedundantModifierStaticMethodInInterface <nl> + { <nl> + static int f ( ) <nl> + { <nl> + int someName = 5 ; <nl> + return someName ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticModifierInNestedEnum . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticModifierInNestedEnum . java <nl> new file mode 100644 <nl> index 0000000 . . 58eeccc <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticModifierInNestedEnum . java <nl> @ @ - 0 , 0 + 1 , 14 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; <nl> + <nl> + public class InputRedundantModifierStaticModifierInNestedEnum { <nl> + static enum NestedEnumWithRedundantStatic { } / / violation <nl> + <nl> + enum CorrectNestedEnum { <nl> + VAL ; <nl> + static enum NestedEnumWithRedundantStatic { } / / violation <nl> + } <nl> + <nl> + interface NestedInterface { <nl> + static enum NestedEnumWithRedundantStatic { } / / violation <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm <nl> index 5e68020 . . b48ccdb 100644 <nl> - - - a / src / xdocs / index . xml . vm <nl> + + + b / src / xdocs / index . xml . vm <nl> @ @ - 116 , 202 + 116 , 206 @ @ <nl> many improvements since then . The known plug - ins are : <nl> < / p > <nl> <nl> - < table > <nl> - < tr > <nl> - < th > IDE / Build tool < / th > <nl> - < th > Main / Initial Author < / th > <nl> - < th > Available from < / th > <nl> - < th > Remarks < / th > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " https : / / www . scm - manager . org / " > SCM - Manager < / a > < / td > <nl> - < td / > <nl> - < td > < a href = " http : / / plugins . scm - manager . org / scm - plugin - backend / page / index . html " > SCM - Manager Plugin Page < / a > < / td > <nl> - < td / > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / www . jgrasp . org / " > jGRASP < / a > < / td > <nl> - < td > Larry Barowski < / td > <nl> - < td > < a href = " http : / / www . jgrasp . org / " > jGRASP Home Page < / a > < / td > <nl> - < td / > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / www . sonarqube . org / " > SonarQube < / a > < / td > <nl> - < td > Freddy Mallet ( initial author ) < / td > <nl> - < td > < a href = " http : / / www . sonarqube . org / " > SonarQube Home Page < / a > < / td > <nl> - < td > < a href = " http : / / nemo . sonarqube . org / " > Demo site < / a > < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> - < td > David Schneider < / td > <nl> - < td > <nl> - < a href = " http : / / eclipse - cs . sourceforge . net / " > Eclipse - CS Home <nl> - Page < / a > <nl> - < / td > <nl> - < td > <nl> - In 2007 was awarded <nl> - < a href = " http : / / www . eclipse . org / org / press - release / 20070306eclipsecommunityawards . php " > <nl> - Best Open Source Eclipse - based Developer tool <nl> - < / a > . <nl> - < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> - < td > Roman Ivanov < / td > <nl> - < td > <nl> - < a href = " https : / / github . com / sevntu - checkstyle " > Project Page < / a > <nl> - < / td > <nl> - < td > <nl> - Extension for Eclipse - CS plugin and also an incubator for <nl> - Checkstyle checks that are not present in main stream of <nl> - Checkstyle . See the <nl> - < a href = " https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / wiki " > Wiki < / a > <nl> - and <nl> - < a href = " http : / / sevntu - checkstyle . github . io / sevntu . checkstyle / " > Blog < / a > <nl> - . <nl> - < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> - < td > Marco van Meegen < / td > <nl> - < td > <nl> - < a <nl> - href = " http : / / www . mvmsoft . de / content / plugins / checkclipse / checkclipse . htm " > Checklipse <nl> - Home Page < / a > <nl> - < / td > <nl> - < td / > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / www . jetbrains . com / idea / " > IntelliJ IDEA < / a > < / td > <nl> - < td > Jakub Slawinski < / td > <nl> - < td > <nl> - < a href = " http : / / qaplug . com / " > QAPlug < / a > <nl> - < / td > <nl> - < td > Provides quality assurance features . < / td > <nl> - < / tr > <nl> + < subsection name = " Active Tools " > <nl> + < table > <nl> + < tr > <nl> + < th > IDE / Build tool < / th > <nl> + < th > Main / Initial Author < / th > <nl> + < th > Available from < / th > <nl> + < th > Remarks < / th > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> + < td > David Schneider < / td > <nl> + < td > <nl> + < a href = " http : / / eclipse - cs . sourceforge . net / " > Eclipse - CS Home Page < / a > <nl> + < / td > <nl> + < td > <nl> + In 2007 was awarded <nl> + < a href = " http : / / www . eclipse . org / org / press - release / 20070306eclipsecommunityawards . php " > <nl> + Best Open Source Eclipse - based Developer tool <nl> + < / a > . <nl> + < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / gradle . org / " > Gradle < / a > < / td > <nl> + < td > Hans Dockter ( initial author ) < / td > <nl> + < td > Checkstyle supported out of the box < / td > <nl> + < td > < a href = " https : / / docs . gradle . org / current / userguide / checkstyle _ plugin . html " > Gradle Checkstyle docs < / a > < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / www . jetbrains . com / idea / " > IntelliJ IDEA < / a > < / td > <nl> + < td > James Shiell < / td > <nl> + < td > <nl> + < a href = " https : / / github . com / jshiell / checkstyle - idea " > Checkstyle - idea Project Page < / a > <nl> + < / td > <nl> + < td > Provides real - time and on - demand scanning . < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / www . jgrasp . org / " > jGRASP < / a > < / td > <nl> + < td > Larry Barowski < / td > <nl> + < td > < a href = " http : / / www . jgrasp . org / " > jGRASP Home Page < / a > < / td > <nl> + < td / > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> + < td > Roman Ivanov < / td > <nl> + < td > <nl> + < a href = " https : / / github . com / sevntu - checkstyle " > Project Page < / a > <nl> + < / td > <nl> + < td > <nl> + Extension for Eclipse - CS plugin and also an incubator for <nl> + Checkstyle checks that are not present in main stream of <nl> + Checkstyle . See the <nl> + < a href = " https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / wiki " > Wiki < / a > <nl> + and <nl> + < a href = " http : / / sevntu - checkstyle . github . io / sevntu . checkstyle / " > Blog < / a > <nl> + . <nl> + < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " https : / / bitbucket . org / atlassian / bamboo - checkstyle - plugin " > Bamboo Checkstyle plug - in < / a > < / td > <nl> + < td > Atlassian ( formerly by Ross Rowe and Stephan Paulicke ) < / td > <nl> + < td > < a href = " https : / / marketplace . atlassian . com / archive / com . atlassian . bamboo . plugins . bamboo - checkstyle - plugin " > Bamboo Checkstyle plug - in Atlassian Marketplace page < / a > < / td > <nl> + < td > An add - on that will parse and record CheckStyle reports and report your style violations over time . < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " https : / / wiki . jenkins - ci . org / display / JENKINS / Checkstyle + Plugin " > Jenkins Checkstyle plug - in < / a > < / td > <nl> + < td / > <nl> + < td > < a href = " https : / / wiki . jenkins - ci . org / display / JENKINS / Checkstyle + Plugin " > Jenkins Checkstyle plug - in Home Page < / a > < / td > <nl> + < td > This plug - in is supported by the Static Analysis Collector plug - in that collects different analysis results and shows the results in aggregated trend graphs . < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / maven . apache . org / " > Maven < / a > < / td > <nl> + < td > Vincent Massol < / td > <nl> + < td > Checkstyle supported out of the box < / td > <nl> + < td > < a href = " http : / / maven . apache . org / plugins / maven - checkstyle - plugin / checkstyle . html " > example report < / a > < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " https : / / netbeans . org / " > NetBeans < / a > < / td > <nl> + < td > Petr Hejl < / td > <nl> + < td > <nl> + < a href = " http : / / www . sickboy . cz / checkstyle / " > Checkstyle Beans < / a > <nl> + < / td > <nl> + < td > <nl> + Problems with source code are displayed as annotations of <nl> + the source <nl> + < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " https : / / netbeans . org / " > NetBeans < / a > < / td > <nl> + < td / > <nl> + < td > <nl> + < a href = " https : / / java . net / projects / sqe / " > Software Quality Environment ( SQE ) < / a > <nl> + < / td > <nl> + < td / > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / www . sonarqube . org / " > SonarQube < / a > < / td > <nl> + < td > Freddy Mallet ( initial author ) < / td > <nl> + < td > < a href = " http : / / www . sonarqube . org / " > SonarQube Home Page < / a > < / td > <nl> + < td > < a href = " http : / / nemo . sonarqube . org / " > Demo site < / a > < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / www . jedit . org / " > jEdit < / a > < / td > <nl> + < td > Todd Papaioannou < / td > <nl> + < td > < a <nl> + href = " http : / / plugins . jedit . org / plugins / ? CheckStylePlugin " > JEdit CheckStylePlugin < / a > < / td > <nl> + < td / > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " https : / / www . scm - manager . org / " > SCM - Manager < / a > < / td > <nl> + < td / > <nl> + < td > < a href = " http : / / plugins . scm - manager . org / scm - plugin - backend / page / index . html " > SCM - Manager Plugin Page < / a > < / td > <nl> + < td / > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / www . jetbrains . com / idea / " > IntelliJ IDEA < / a > < / td > <nl> + < td > Jakub Slawinski < / td > <nl> + < td > <nl> + < a href = " http : / / qaplug . com / " > QAPlug < / a > <nl> + < / td > <nl> + < td > Provides quality assurance features . < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td / > <nl> + < td > < a href = " http : / / jcoderz . github . io / " > jCoderZ < / a > < / td > <nl> + < td > <nl> + < a href = " http : / / jcoderz . github . io / " > fawkeZ < / a > <nl> + < / td > <nl> + < td > Combines multiple tools ( CheckStyle , findbugs , PMD , Cobertura , etc . ) < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / tide . olympe . in / " > tIDE < / a > < / td > <nl> + < td / > <nl> + < td > Built in < / td > <nl> + < td / > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / www . jarchitect . com / " > JArchitect < / a > < / td > <nl> + < td / > <nl> + < td > < a href = " http : / / www . jarchitect . com / " > JArchitect Home Page < / a > < / td > <nl> + < td > Imports XML result files from CheckStyle . < / td > <nl> + < / tr > <nl> + < / table > <nl> + < / subsection > <nl> <nl> - < tr > <nl> - < td > < a href = " http : / / www . jetbrains . com / idea / " > IntelliJ IDEA < / a > < / td > <nl> - < td > James Shiell < / td > <nl> - < td > <nl> - < a href = " https : / / github . com / jshiell / checkstyle - idea " > Checkstyle - idea Project Page < / a > <nl> - < / td > <nl> - < td > Provides real - time and on - demand scanning . < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / www . jetbrains . com / idea / " > IntelliJ IDEA < / a > < / td > <nl> - < td > Mark Lussier < / td > <nl> - < td > <nl> - < a href = " http : / / jetstyle . sourceforge . net / " > JetStyle <nl> - Project Page < / a > <nl> - < / td > <nl> - < td / > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " https : / / netbeans . org / " > NetBeans < / a > < / td > <nl> - < td > Petr Hejl < / td > <nl> - < td > <nl> - < a href = " http : / / www . sickboy . cz / checkstyle / " > Checkstyle Beans < / a > <nl> - < / td > <nl> - < td > <nl> - Problems with source code are displayed as annotations of <nl> - the source <nl> - < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " https : / / netbeans . org / " > NetBeans < / a > < / td > <nl> - < td > Paul Goulbourn < / td > <nl> - < td > <nl> - < a href = " http : / / nbcheckstyle . sourceforge . net " > nbCheckStyle < / a > <nl> - < / td > <nl> - < td / > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " https : / / netbeans . org / " > NetBeans < / a > < / td > <nl> - < td / > <nl> - < td > <nl> - < a href = " https : / / java . net / projects / sqe / " > Software Quality Environment ( SQE ) < / a > <nl> - < / td > <nl> - < td / > <nl> - < / tr > <nl> - < tr > <nl> - < td / > <nl> - < td > < a href = " http : / / jcoderz . github . io / " > jCoderZ < / a > < / td > <nl> - < td > <nl> - < a href = " http : / / jcoderz . github . io / " > fawkeZ < / a > <nl> - < / td > <nl> - < td > Combines multiple tools ( CheckStyle , findbugs , PMD , Cobertura , etc . ) < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / www . bluej . org " > BlueJ < / a > < / td > <nl> - < td > Rick Giles < / td > <nl> - < td > < a href = " http : / / bluejcheckstyle . sourceforge . net / " > bluejcheckstyle <nl> - home page < / a > < / td > <nl> - < td / > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / tide . olympe . in / " > tIDE < / a > < / td > <nl> - < td / > <nl> - < td > Built in < / td > <nl> - < td / > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / jdee . sourceforge . net / " > Emacs JDE < / a > < / td > <nl> - < td > Markus Mohnen < / td > <nl> - < td > Part of the standard JDEE distribution < / td > <nl> - < td / > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / www . jedit . org / " > jEdit < / a > < / td > <nl> - < td > Todd Papaioannou < / td > <nl> - < td > < a <nl> - href = " http : / / plugins . jedit . org / plugins / ? CheckStylePlugin " > JEdit CheckStylePlugin < / a > < / td > <nl> - < td / > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / www . vim . org " > Vim editor < / a > < / td > <nl> - < td > Xandy Johnson < / td > <nl> - < td > < a <nl> - href = " http : / / vim . sourceforge . net / scripts / script . php ? script _ id = 448 " > Plugin Homepage < / a > < / td > <nl> - < td > Vim file - type plug - in < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / maven . apache . org / " > Maven < / a > < / td > <nl> - < td > Vincent Massol < / td > <nl> - < td > Checkstyle supported out of the box < / td > <nl> - < td > < a href = " http : / / maven . apache . org / plugins / maven - checkstyle - plugin / checkstyle . html " > example report < / a > < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / gradle . org / " > Gradle < / a > < / td > <nl> - < td > Hans Dockter ( initial author ) < / td > <nl> - < td > Checkstyle supported out of the box < / td > <nl> - < td > < a href = " https : / / docs . gradle . org / current / userguide / checkstyle _ plugin . html " > Gradle Checkstyle docs < / a > < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / qalab . sourceforge . net / " > QALab < / a > < / td > <nl> - < td > Benoit Xhenseval < / td > <nl> - < td > < a href = " http : / / qalab . sourceforge . net / " > QALab Home Page < / a > < / td > <nl> - < td > Supports tracking Checkstyle statistics over time . < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " http : / / www . jarchitect . com / " > JArchitect < / a > < / td > <nl> - < td / > <nl> - < td > < a href = " http : / / www . jarchitect . com / " > JArchitect Home Page < / a > < / td > <nl> - < td > Imports XML result files from CheckStyle . < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " https : / / wiki . jenkins - ci . org / display / JENKINS / Checkstyle + Plugin " > Jenkins Checkstyle plug - in < / a > < / td > <nl> - < td / > <nl> - < td > < a href = " https : / / wiki . jenkins - ci . org / display / JENKINS / Checkstyle + Plugin " > Jenkins Checkstyle plug - in Home Page < / a > < / td > <nl> - < td > This plug - in is supported by the Static Analysis Collector plug - in that collects different analysis results and shows the results in aggregated trend graphs . < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > < a href = " https : / / bitbucket . org / atlassian / bamboo - checkstyle - plugin " > Bamboo Checkstyle plug - in < / a > < / td > <nl> - < td > Atlassian ( formerly by Ross Rowe and Stephan Paulicke ) < / td > <nl> - < td > < a href = " https : / / marketplace . atlassian . com / archive / com . atlassian . bamboo . plugins . bamboo - checkstyle - plugin " > Bamboo Checkstyle plug - in Atlassian Marketplace page < / a > < / td > <nl> - < td > An add - on that will parse and record CheckStyle reports and report your style violations over time . < / td > <nl> - < / tr > <nl> - < / table > <nl> + < subsection name = " Inactive / Old Tools " > <nl> + < table > <nl> + < tr > <nl> + < th > IDE / Build tool < / th > <nl> + < th > Main / Initial Author < / th > <nl> + < th > Available from < / th > <nl> + < th > Remarks < / th > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / www . jetbrains . com / idea / " > IntelliJ IDEA < / a > < / td > <nl> + < td > Mark Lussier < / td > <nl> + < td > <nl> + < a href = " http : / / jetstyle . sourceforge . net / " > JetStyle Project Page < / a > <nl> + < / td > <nl> + < td / > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / www . bluej . org " > BlueJ < / a > < / td > <nl> + < td > Rick Giles < / td > <nl> + < td > < a href = " http : / / bluejcheckstyle . sourceforge . net / " > bluejcheckstyle home page < / a > < / td > <nl> + < td / > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > <nl> + < td > Marco van Meegen < / td > <nl> + < td > <nl> + < a href = " http : / / www . mvmsoft . de / content / plugins / checkclipse / checkclipse . htm " > Checklipse Home Page < / a > <nl> + < / td > <nl> + < td / > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / qalab . sourceforge . net / " > QALab < / a > < / td > <nl> + < td > Benoit Xhenseval < / td > <nl> + < td > < a href = " http : / / qalab . sourceforge . net / " > QALab Home Page < / a > < / td > <nl> + < td > Supports tracking Checkstyle statistics over time . < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " https : / / netbeans . org / " > NetBeans < / a > < / td > <nl> + < td > Paul Goulbourn < / td > <nl> + < td > < a href = " http : / / nbcheckstyle . sourceforge . net " > nbCheckStyle < / a > < / td > <nl> + < td / > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / jdee . sourceforge . net / " > Emacs JDE < / a > < / td > <nl> + < td > Markus Mohnen < / td > <nl> + < td > Part of the standard JDEE distribution < / td > <nl> + < td / > <nl> + < / tr > <nl> + < tr > <nl> + < td > < a href = " http : / / www . vim . org " > Vim editor < / a > < / td > <nl> + < td > Xandy Johnson < / td > <nl> + < td > < a href = " http : / / vim . sourceforge . net / scripts / script . php ? script _ id = 448 " > Plugin Homepage < / a > < / td > <nl> + < td > Vim file - type plug - in < / td > <nl> + < / tr > <nl> + < / table > <nl> + < / subsection > <nl> <nl> < p > <nl> If you have written a plugin for other IDEs , please let us know , so we

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java 
 index fd37209 . . 65e3c95 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java 
 @ @ - 37 , 13 + 37 , 13 @ @ public class RedundantModifierCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " modifier " + File . separator + filename ) ; 
 + + " modifier " + File . separator + " redundantmodifier " + File . separator + filename ) ; 
 } 
 
 @ Override 
 protected String getNonCompilablePath ( String filename ) throws IOException { 
 return super . getNonCompilablePath ( " checks " + File . separator 
 - + " modifier " + File . separator + filename ) ; 
 + + " modifier " + File . separator + " redundantmodifier " + File . separator + filename ) ; 
 } 
 
 @ Test 
 @ @ - 56 , 7 + 56 , 8 @ @ public class RedundantModifierCheckTest 
 " 20 : 5 : " + getCheckMessage ( MSG _ KEY , " public " ) , 
 " 26 : 5 : " + getCheckMessage ( MSG _ KEY , " static " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputModifierClassesInsideOfInterfaces . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRedundantModifierClassesInsideOfInterfaces . java " ) , 
 + expected ) ; 
 } 
 
 @ Test 
 @ @ - 79 , 7 + 80 , 7 @ @ public class RedundantModifierCheckTest 
 " 120 : 5 : " + getCheckMessage ( MSG _ KEY , " public " ) , 
 " 121 : 5 : " + getCheckMessage ( MSG _ KEY , " abstract " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputModifier . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRedundantModifierIt . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 88 , 7 + 89 , 8 @ @ public class RedundantModifierCheckTest 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( RedundantModifierCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputStaticModifierInInterface . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRedundantModifierStaticMethodInInterface . java " ) , 
 + expected ) ; 
 } 
 
 @ Test 
 @ @ - 99 , 7 + 101 , 7 @ @ public class RedundantModifierCheckTest 
 final String [ ] expected = { 
 " 5 : 9 : " + getCheckMessage ( MSG _ KEY , " final " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputFinalInDefaultMethods . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRedundantModifierFinalInInterface . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 109 , 7 + 111 , 7 @ @ public class RedundantModifierCheckTest 
 final String [ ] expected = { 
 " 10 : 5 : " + getCheckMessage ( MSG _ KEY , " private " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputRedundantConstructorModifier . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRedundantModifierConstructorModifier . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 120 , 7 + 122 , 7 @ @ public class RedundantModifierCheckTest 
 " 8 : 5 : " + getCheckMessage ( MSG _ KEY , " static " ) , 
 " 12 : 5 : " + getCheckMessage ( MSG _ KEY , " static " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputRedundantStaticModifierInInnerTypeOfInterface . java " ) , 
 + verify ( checkConfig , getPath ( " InputRedundantModifierStaticInInnerTypeOfInterface . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 132 , 7 + 134 , 8 @ @ public class RedundantModifierCheckTest 
 final String [ ] expected = { 
 " 18 : 5 : " + getCheckMessage ( MSG _ KEY , " public " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputRedundantPublicModifierInNotPublicClass . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRedundantModifierPublicModifierInNotPublicClass . java " ) , 
 + expected ) ; 
 } 
 
 @ Test 
 @ @ - 148 , 8 + 151 , 8 @ @ public class RedundantModifierCheckTest 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " InputNestedClassInPublicInterfaceRedundantModifiers . java " ) , 
 - expected ) ; 
 + getPath ( " InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers . java " ) , 
 + expected ) ; 
 } 
 
 @ Test 
 @ @ - 186 , 7 + 189 , 8 @ @ public class RedundantModifierCheckTest 
 " 8 : 9 : " + getCheckMessage ( MSG _ KEY , " static " ) , 
 " 12 : 9 : " + getCheckMessage ( MSG _ KEY , " static " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputRedundantStaticModifierInNestedEnum . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRedundantModifierStaticModifierInNestedEnum . java " ) , 
 + expected ) ; 
 } 
 
 @ Test 
 @ @ - 197 , 7 + 201 , 8 @ @ public class RedundantModifierCheckTest 
 final String [ ] expected = { 
 " 14 : 20 : " + getCheckMessage ( MSG _ KEY , " final " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputFinalInAnonymousClass . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRedundantModifierFinalInAnonymousClass . java " ) , 
 + expected ) ; 
 } 
 
 @ Test 
 @ @ - 208 , 7 + 213 , 8 @ @ public class RedundantModifierCheckTest 
 " 27 : 14 : " + getCheckMessage ( MSG _ KEY , " final " ) , 
 " 28 : 17 : " + getCheckMessage ( MSG _ KEY , " final " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputFinalInTryWithResource . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRedundantModifierFinalInTryWithResource . java " ) , 
 + expected ) ; 
 } 
 
 @ Test 
 @ @ - 221 , 7 + 227 , 8 @ @ public class RedundantModifierCheckTest 
 " 16 : 24 : " + getCheckMessage ( MSG _ KEY , " final " ) , 
 " 25 : 33 : " + getCheckMessage ( MSG _ KEY , " final " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputFinalInAbstractMethods . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRedundantModifierFinalInAbstractMethods . java " ) , 
 + expected ) ; 
 } 
 
 @ Test 
 @ @ - 231 , 6 + 238 , 6 @ @ public class RedundantModifierCheckTest 
 " 7 : 16 : " + getCheckMessage ( MSG _ KEY , " final " ) , 
 " 22 : 16 : " + getCheckMessage ( MSG _ KEY , " final " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputFinalInEnumMethods . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRedundantModifierFinalInEnumMethods . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAbstractMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAbstractMethods . java 
 deleted file mode 100644 
 index 00c1018 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAbstractMethods . java 
 + + + / dev / null 
 @ @ - 1 , 26 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 - 
 - public abstract class InputFinalInAbstractMethods { 
 - public abstract void method ( final String param ) ; / / violation 
 - 
 - public abstract void method2 ( String param ) ; 
 - 
 - public abstract void method3 ( String param1 , final String param2 ) ; / / violation 
 - } 
 - interface IWhatever { 
 - void method ( final String param ) ; / / violation 
 - 
 - void method2 ( String param ) ; 
 - } 
 - class CWhatever { 
 - native void method ( final String param ) ; / / violation 
 - 
 - native void method2 ( String param ) ; 
 - } 
 - enum EWhatever { 
 - TEST ( ) { 
 - public void method ( String s ) { } ; 
 - } ; 
 - 
 - public abstract void method ( final String s ) ; / / violation 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAnonymousClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAnonymousClass . java 
 deleted file mode 100644 
 index a1678d8 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAnonymousClass . java 
 + + + / dev / null 
 @ @ - 1 , 18 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 - 
 - public class InputFinalInAnonymousClass { 
 - public static abstract class Example { 
 - public abstract void innerTest ( ) ; 
 - 
 - public final void test ( ) { 
 - } 
 - } 
 - 
 - public static void test ( ) { 
 - new Example ( ) { 
 - @ Override 
 - public final void innerTest ( ) { / / violation 
 - } 
 - } ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInDefaultMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInDefaultMethods . java 
 deleted file mode 100644 
 index b1b4e7e . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInDefaultMethods . java 
 + + + / dev / null 
 @ @ - 1 , 17 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 - 
 - 
 - public interface InputFinalInDefaultMethods { 
 - 	 final int k = 5 ; / / violation 
 - 	 
 - default int defaultMethod ( final int x ) { 
 - 	 if ( k = = 5 ) { 
 - 	 	 final int t = 24 ; / / No violation here ! 
 - 	 	 for ( ; ; ) { 
 - 	 	 	 final String s = " some " ; / / No violation here ! 
 - 	 	 } 
 - 	 } 
 - final int square = x * x ; / / No violation here ! 
 - return square ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInEnumMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInEnumMethods . java 
 deleted file mode 100644 
 index 3dae26e . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInEnumMethods . java 
 + + + / dev / null 
 @ @ - 1 , 32 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 - 
 - public enum InputFinalInEnumMethods { 
 - E1 , 
 - E2 { 
 - @ Override 
 - public final void v ( ) { 
 - } 
 - } ; 
 - 
 - public void v ( ) { 
 - } 
 - 
 - / / not redundant since field can override this method if ' final ' is removed 
 - / / and that may not be desirable 
 - public final void v2 ( ) { 
 - } 
 - } 
 - enum InputFinalInEnumMethods2 { 
 - E1 { 
 - @ Override 
 - public final void v ( ) { 
 - } 
 - } , 
 - E2 { 
 - @ Override 
 - public void v ( ) { 
 - } 
 - } ; 
 - 
 - public abstract void v ( ) ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInTryWithResource . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInTryWithResource . java 
 deleted file mode 100644 
 index 996d68d . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInTryWithResource . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 - 
 - import java . io . BufferedReader ; 
 - import java . io . FileReader ; 
 - import java . io . IOException ; 
 - import java . io . InputStreamReader ; 
 - import java . lang . annotation . ElementType ; 
 - import java . lang . annotation . Target ; 
 - 
 - public class InputFinalInTryWithResource { 
 - public static void test ( ) { 
 - try { 
 - } 
 - catch ( RuntimeException e ) { 
 - } 
 - 
 - try ( @ NotNull BufferedReader br = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ) { 
 - } 
 - catch ( IOException e ) { 
 - } 
 - 
 - try ( final BufferedReader br = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ) { 
 - } 
 - catch ( IOException e ) { 
 - } 
 - 
 - try ( final BufferedReader br = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ; 
 - final BufferedReader br2 = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ) { 
 - } 
 - catch ( IOException e ) { 
 - } 
 - } 
 - } 
 - 
 - @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER , ElementType . LOCAL _ VARIABLE } ) 
 - @ interface NotNull { 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifierClassesInsideOfInterfaces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifierClassesInsideOfInterfaces . java 
 deleted file mode 100644 
 index a7c1833 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputModifierClassesInsideOfInterfaces . java 
 + + + / dev / null 
 @ @ - 1 , 31 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 - 
 - public interface InputModifierClassesInsideOfInterfaces { 
 - 
 - / / Class inside of interface can be abstract and non abstract , but always public static . 
 - abstract class A { } 
 - 
 - class B { } 
 - 
 - / / All classes inside interfaces are public static classes , and static modifier is redundant . 
 - static class C { / / violation 
 - public static boolean verifyState ( A a ) { 
 - return true ; 
 - } 
 - } 
 - 
 - public class E { } / / violation 
 - 
 - / / Enums are static implicit subclasses of Enum class . 
 - public enum Role1 { / / violation 
 - ADMIN , 
 - EDITOR , 
 - VANILLA ; 
 - } 
 - 
 - static enum Role2 { / / violation 
 - ADMIN , 
 - EDITOR , 
 - VANILLA ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputNestedClassInPublicInterfaceRedundantModifiers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputNestedClassInPublicInterfaceRedundantModifiers . java 
 deleted file mode 100644 
 index e6bb28d . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputNestedClassInPublicInterfaceRedundantModifiers . java 
 + + + / dev / null 
 @ @ - 1 , 50 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2015 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 - 
 - public interface InputNestedClassInPublicInterfaceRedundantModifiers { 
 - interface PublicInnerInterface { 
 - interface PublicInnerInnerInterface { 
 - class PublicInnerClassInNestedPublicInterfaces { 
 - public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class 
 - } 
 - } 
 - } 
 - class PublicClassInsideInterface { 
 - private interface PrivateNestedInterface { 
 - class ClassInPrivateNestedInterface { 
 - public ClassInPrivateNestedInterface ( ) { } / / Redundant in not public class 
 - } 
 - public interface PrivateNestedInterfaceWithPublicModifier { 
 - class ClassInPrivateNestedInterface { 
 - public ClassInPrivateNestedInterface ( ) { } / / Redundant in non public scope 
 - } 
 - } 
 - } 
 - public interface PublicInnerInnerPublicInterface { 
 - class PublicInnerClassInNestedPublicInterfaces { 
 - public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class 
 - } 
 - } 
 - protected interface PublicInnerInnerProtectedInterface { 
 - class PublicInnerClassInNestedProtectedInterfaces { 
 - public PublicInnerClassInNestedProtectedInterfaces ( ) { } / / Redundant in non public scope 
 - } 
 - } 
 - } 
 - class PublicNestedClassInInterfaceWithPublicConstructor { 
 - public PublicNestedClassInInterfaceWithPublicConstructor ( ) { } / / OK in public class 
 - private class PrivateClassInPublicNestedClass { 
 - public class PublicInPrivateClass { 
 - public PublicInPrivateClass ( ) { } / / Redundant in non public class 
 - } 
 - } 
 - } 
 - final class FinalNestedClassInInterface { 
 - interface InnerInterface { 
 - final class FinalNestedClassInNestedInterface { } 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantConstructorModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantConstructorModifier . java 
 deleted file mode 100644 
 index 1c1b5be . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantConstructorModifier . java 
 + + + / dev / null 
 @ @ - 1 , 19 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2015 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 - 
 - public enum InputRedundantConstructorModifier { 
 - VAL1 , VAL2 ; 
 - 
 - private InputRedundantConstructorModifier ( ) { } / / violation 
 - 
 - InputRedundantConstructorModifier ( int i ) { } 
 - 
 - InputRedundantConstructorModifier ( char c ) { } 
 - } 
 - 
 - class ProperPrivateConstructor { 
 - private ProperPrivateConstructor ( ) { } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantPublicModifierInNotPublicClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantPublicModifierInNotPublicClass . java 
 deleted file mode 100644 
 index 46a55d9 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantPublicModifierInNotPublicClass . java 
 + + + / dev / null 
 @ @ - 1 , 24 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2015 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 - 
 - public class InputRedundantPublicModifierInNotPublicClass { 
 - public InputRedundantPublicModifierInNotPublicClass ( ) { } 
 - protected class ProtectedClass { 
 - public ProtectedClass ( ) { } 
 - } 
 - public class PublicInnerClass { 
 - public PublicInnerClass ( ) { } / / OK for class accessible from public scope 
 - } 
 - } 
 - 
 - class PackagePrivateClass { 
 - public PackagePrivateClass ( ) { } / / violation expected 
 - } 
 - 
 - class PackagePrivateClassWithNotRedundantConstructor { 
 - PackagePrivateClassWithNotRedundantConstructor ( ) { } 
 - 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInInnerTypeOfInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInInnerTypeOfInterface . java 
 deleted file mode 100644 
 index 06a3332 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInInnerTypeOfInterface . java 
 + + + / dev / null 
 @ @ - 1 , 15 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2015 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 - 
 - public interface InputRedundantStaticModifierInInnerTypeOfInterface { 
 - static class MyInnerClass { } / / violation 
 - 
 - class MyInnerClass2 { } 
 - 
 - static enum MyInnerEnum { } / / violation 
 - 
 - enum MyInnerEnum2 { } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInNestedEnum . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInNestedEnum . java 
 deleted file mode 100644 
 index a1ed223 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputRedundantStaticModifierInNestedEnum . java 
 + + + / dev / null 
 @ @ - 1 , 14 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 - 
 - public class InputRedundantStaticModifierInNestedEnum { 
 - static enum NestedEnumWithRedundantStatic { } / / violation 
 - 
 - enum CorrectNestedEnum { 
 - VAL ; 
 - static enum NestedEnumWithRedundantStatic { } / / violation 
 - } 
 - 
 - interface NestedInterface { 
 - static enum NestedEnumWithRedundantStatic { } / / violation 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputStaticModifierInInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputStaticModifierInInterface . java 
 deleted file mode 100644 
 index f32ded6 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputStaticModifierInInterface . java 
 + + + / dev / null 
 @ @ - 1 , 11 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 - 
 - 
 - public interface InputStaticModifierInInterface 
 - { 
 - static int f ( ) 
 - { 
 - int someName = 5 ; 
 - return someName ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierClassesInsideOfInterfaces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierClassesInsideOfInterfaces . java 
 new file mode 100644 
 index 0000000 . . aa9bb45 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierClassesInsideOfInterfaces . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; 
 + 
 + public interface InputRedundantModifierClassesInsideOfInterfaces { 
 + 
 + / / Class inside of interface can be abstract and non abstract , but always public static . 
 + abstract class A { } 
 + 
 + class B { } 
 + 
 + / / All classes inside interfaces are public static classes , and static modifier is redundant . 
 + static class C { / / violation 
 + public static boolean verifyState ( A a ) { 
 + return true ; 
 + } 
 + } 
 + 
 + public class E { } / / violation 
 + 
 + / / Enums are static implicit subclasses of Enum class . 
 + public enum Role1 { / / violation 
 + ADMIN , 
 + EDITOR , 
 + VANILLA ; 
 + } 
 + 
 + static enum Role2 { / / violation 
 + ADMIN , 
 + EDITOR , 
 + VANILLA ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierConstructorModifier . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierConstructorModifier . java 
 new file mode 100644 
 index 0000000 . . bc80beb 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierConstructorModifier . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2015 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; 
 + 
 + public enum InputRedundantModifierConstructorModifier { 
 + VAL1 , VAL2 ; 
 + 
 + private InputRedundantModifierConstructorModifier ( ) { } / / violation 
 + 
 + InputRedundantModifierConstructorModifier ( int i ) { } 
 + 
 + InputRedundantModifierConstructorModifier ( char c ) { } 
 + } 
 + 
 + class ProperPrivateConstructor { 
 + private ProperPrivateConstructor ( ) { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInAbstractMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInAbstractMethods . java 
 new file mode 100644 
 index 0000000 . . 52fd015 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInAbstractMethods . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; 
 + 
 + public abstract class InputRedundantModifierFinalInAbstractMethods { 
 + public abstract void method ( final String param ) ; / / violation 
 + 
 + public abstract void method2 ( String param ) ; 
 + 
 + public abstract void method3 ( String param1 , final String param2 ) ; / / violation 
 + } 
 + interface IWhatever { 
 + void method ( final String param ) ; / / violation 
 + 
 + void method2 ( String param ) ; 
 + } 
 + class CWhatever { 
 + native void method ( final String param ) ; / / violation 
 + 
 + native void method2 ( String param ) ; 
 + } 
 + enum EWhatever { 
 + TEST ( ) { 
 + public void method ( String s ) { } ; 
 + } ; 
 + 
 + public abstract void method ( final String s ) ; / / violation 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInAnonymousClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInAnonymousClass . java 
 new file mode 100644 
 index 0000000 . . a7d1b8d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInAnonymousClass . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; 
 + 
 + public class InputRedundantModifierFinalInAnonymousClass { 
 + public static abstract class Example { 
 + public abstract void innerTest ( ) ; 
 + 
 + public final void test ( ) { 
 + } 
 + } 
 + 
 + public static void test ( ) { 
 + new Example ( ) { 
 + @ Override 
 + public final void innerTest ( ) { / / violation 
 + } 
 + } ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInEnumMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInEnumMethods . java 
 new file mode 100644 
 index 0000000 . . 29582cd 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInEnumMethods . java 
 @ @ - 0 , 0 + 1 , 32 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; 
 + 
 + public enum InputRedundantModifierFinalInEnumMethods { 
 + E1 , 
 + E2 { 
 + @ Override 
 + public final void v ( ) { 
 + } 
 + } ; 
 + 
 + public void v ( ) { 
 + } 
 + 
 + / / not redundant since field can override this method if ' final ' is removed 
 + / / and that may not be desirable 
 + public final void v2 ( ) { 
 + } 
 + } 
 + enum InputRedundantModifierFinalInEnumMethods2 { 
 + E1 { 
 + @ Override 
 + public final void v ( ) { 
 + } 
 + } , 
 + E2 { 
 + @ Override 
 + public void v ( ) { 
 + } 
 + } ; 
 + 
 + public abstract void v ( ) ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInInterface . java 
 new file mode 100644 
 index 0000000 . . 49ff05e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInInterface . java 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; 
 + 
 + 
 + public interface InputRedundantModifierFinalInInterface { 
 + 	 final int k = 5 ; / / violation 
 + 	 
 + default int defaultMethod ( final int x ) { 
 + 	 if ( k = = 5 ) { 
 + 	 	 final int t = 24 ; / / No violation here ! 
 + 	 	 for ( ; ; ) { 
 + 	 	 	 final String s = " some " ; / / No violation here ! 
 + 	 	 } 
 + 	 } 
 + final int square = x * x ; / / No violation here ! 
 + return square ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInTryWithResource . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInTryWithResource . java 
 new file mode 100644 
 index 0000000 . . 4af12c9 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierFinalInTryWithResource . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; 
 + 
 + import java . io . BufferedReader ; 
 + import java . io . FileReader ; 
 + import java . io . IOException ; 
 + import java . io . InputStreamReader ; 
 + import java . lang . annotation . ElementType ; 
 + import java . lang . annotation . Target ; 
 + 
 + public class InputRedundantModifierFinalInTryWithResource { 
 + public static void test ( ) { 
 + try { 
 + } 
 + catch ( RuntimeException e ) { 
 + } 
 + 
 + try ( @ NotNull BufferedReader br = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ) { 
 + } 
 + catch ( IOException e ) { 
 + } 
 + 
 + try ( final BufferedReader br = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ) { 
 + } 
 + catch ( IOException e ) { 
 + } 
 + 
 + try ( final BufferedReader br = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ; 
 + final BufferedReader br2 = new BufferedReader ( new InputStreamReader ( null , " utf - 8 " ) ) ) { 
 + } 
 + catch ( IOException e ) { 
 + } 
 + } 
 + } 
 + 
 + @ Target ( { ElementType . FIELD , ElementType . METHOD , ElementType . PARAMETER , ElementType . LOCAL _ VARIABLE } ) 
 + @ interface NotNull { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierIt . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierIt . java 
 new file mode 100644 
 index 0000000 . . da82048 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierIt . java 
 @ @ - 0 , 0 + 1 , 160 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; 
 + 
 + / * * 
 + * Test case for Modifier checks : 
 + * - order of modifiers 
 + * - use of ' public ' in interface definition 
 + * @ author lkuehne 
 + * / 
 + strictfp final class InputRedundantModifierIt / / illegal order of modifiers for class 
 + { 
 + 
 + / * * Illegal order of modifiers for variables * / 
 + static private boolean sModifierOrderVar = false ; 
 + 
 + / * * 
 + * Illegal order of modifiers for methods . Make sure that the 
 + * first and last modifier from the JLS sequence is used . 
 + * / 
 + strictfp private void doStuff ( ) 
 + { 
 + } 
 + 
 + / * * Single annotation without other modifiers * / 
 + @ MyAnnotation2 void someMethod ( ) 
 + { 
 + } 
 + 
 + / * * Illegal order of annotation - must come first * / 
 + private @ MyAnnotation2 void someMethod2 ( ) 
 + { 
 + } 
 + 
 + / * * Annotation in middle of other modifiers otherwise in correct order * / 
 + private @ MyAnnotation2 strictfp void someMethod3 ( ) 
 + { 
 + } 
 + 
 + / * * Correct order * / 
 + @ MyAnnotation2 private strictfp void someMethod4 ( ) 
 + { 
 + } 
 + 
 + / * * Annotation in middle of other modifiers otherwise in correct order * / 
 + @ MyAnnotation2 private static @ MyAnnotation4 strictfp void someMethod5 ( ) 
 + { 
 + } 
 + 
 + / * * holder for redundant ' public ' modifier check . * / 
 + public static interface InputRedundantPublicModifier / / violation 
 + { 
 + / * * redundant ' public ' modifier * / 
 + public void a ( ) ; / / violation 
 + 
 + / * * all OK * / 
 + void b ( ) ; 
 + 
 + / * * redundant abstract modifier * / 
 + abstract void c ( ) ; / / violation 
 + 
 + / * * redundant ' public ' modifier * / 
 + public float PI _ PUBLIC = ( float ) 3 . 14 ; / / violation 
 + 
 + / * * redundant ' abstract ' modifier ( field can not be abstract ) * / 
 + / / abstract float PI _ ABSTRACT = ( float ) 3 . 14 ; 
 + 
 + / * * redundant ' final ' modifier * / 
 + final float PI _ FINAL = ( float ) 3 . 14 ; / / violation 
 + 
 + / * * all OK * / 
 + float PI _ OK = ( float ) 3 . 14 ; 
 + } 
 + 
 + / * * redundant ' final ' modifier * / 
 + private final void method ( ) / / violation 
 + { 
 + } 
 + } 
 + 
 + / * * Holder for redundant ' final ' check . * / 
 + final class RedundantFinalClass 
 + { 
 + / * * redundant ' final ' modifier * / 
 + public final void finalMethod ( ) / / violation 
 + { 
 + } 
 + 
 + / * * OK * / 
 + public void method ( ) 
 + { 
 + } 
 + } 
 + 
 + / * * Holder for redundant modifiers of inner implementation * / 
 + abstract interface InnerImplementation / / violation 
 + { 
 + InnerImplementation inner = 
 + new InnerImplementation ( ) 
 + { 
 + / * * compiler requires ' public ' modifier * / 
 + public void method ( ) 
 + { 
 + } 
 + } ; 
 + 
 + void method ( ) ; 
 + } 
 + 
 + / * * Holder for redundant modifiers of annotation fields / variables * / 
 + @ interface Annotation 
 + { 
 + public String s1 = " " ; / / violation 
 + final String s2 = " " ; / / violation 
 + static String s3 = " " ; / / violation 
 + String s4 = " " ; 
 + public String blah ( ) ; / / violation 
 + abstract String blah2 ( ) ; / / violation 
 + } 
 + 
 + @ interface MyAnnotation2 { 
 + } 
 + 
 + @ interface MyAnnotation4 { 
 + } 
 + 
 + class SafeVarargsUsage { 
 + @ Deprecated 
 + @ SafeVarargs 
 + private final void foo ( int . . . k ) { } 
 + 
 + @ Deprecated 
 + @ SafeVarargs 
 + @ SuppressWarnings ( " " ) 
 + private final void foo1 ( Object . . . obj ) { } 
 + } 
 + 
 + enum TestEnum { 
 + ; 
 + 
 + public void method ( ) { 
 + } 
 + } 
 + 
 + / * * holder for interface specific modifier check . * / 
 + interface InputDefaultPublicModifier 
 + { 
 + / * * correct order * / 
 + default strictfp void a ( ) 
 + { 
 + } 
 + 
 + / * * wrong order * / 
 + strictfp default void b ( ) / / violation 
 + { 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers . java 
 new file mode 100644 
 index 0000000 . . 09e5f5e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2015 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; 
 + 
 + public interface InputRedundantModifierNestedClassInPublicInterfaceRedundantModifiers { 
 + interface PublicInnerInterface { 
 + interface PublicInnerInnerInterface { 
 + class PublicInnerClassInNestedPublicInterfaces { 
 + public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class 
 + } 
 + } 
 + } 
 + class PublicClassInsideInterface { 
 + private interface PrivateNestedInterface { 
 + class ClassInPrivateNestedInterface { 
 + public ClassInPrivateNestedInterface ( ) { } / / Redundant in not public class 
 + } 
 + public interface PrivateNestedInterfaceWithPublicModifier { 
 + class ClassInPrivateNestedInterface { 
 + public ClassInPrivateNestedInterface ( ) { } / / Redundant in non public scope 
 + } 
 + } 
 + } 
 + public interface PublicInnerInnerPublicInterface { 
 + class PublicInnerClassInNestedPublicInterfaces { 
 + public PublicInnerClassInNestedPublicInterfaces ( ) { } / / OK in public class 
 + } 
 + } 
 + protected interface PublicInnerInnerProtectedInterface { 
 + class PublicInnerClassInNestedProtectedInterfaces { 
 + public PublicInnerClassInNestedProtectedInterfaces ( ) { } / / Redundant in non public scope 
 + } 
 + } 
 + } 
 + class PublicNestedClassInInterfaceWithPublicConstructor { 
 + public PublicNestedClassInInterfaceWithPublicConstructor ( ) { } / / OK in public class 
 + private class PrivateClassInPublicNestedClass { 
 + public class PublicInPrivateClass { 
 + public PublicInPrivateClass ( ) { } / / Redundant in non public class 
 + } 
 + } 
 + } 
 + final class FinalNestedClassInInterface { 
 + interface InnerInterface { 
 + final class FinalNestedClassInNestedInterface { } 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierPublicModifierInNotPublicClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierPublicModifierInNotPublicClass . java 
 new file mode 100644 
 index 0000000 . . 84fdb71 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierPublicModifierInNotPublicClass . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2015 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; 
 + 
 + public class InputRedundantModifierPublicModifierInNotPublicClass { 
 + public InputRedundantModifierPublicModifierInNotPublicClass ( ) { } 
 + protected class ProtectedClass { 
 + public ProtectedClass ( ) { } 
 + } 
 + public class PublicInnerClass { 
 + public PublicInnerClass ( ) { } / / OK for class accessible from public scope 
 + } 
 + } 
 + 
 + class PackagePrivateClass { 
 + public PackagePrivateClass ( ) { } / / violation expected 
 + } 
 + 
 + class PackagePrivateClassWithNotRedundantConstructor { 
 + PackagePrivateClassWithNotRedundantConstructor ( ) { } 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticInInnerTypeOfInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticInInnerTypeOfInterface . java 
 new file mode 100644 
 index 0000000 . . 5bf09cd 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticInInnerTypeOfInterface . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2015 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; 
 + 
 + public interface InputRedundantModifierStaticInInnerTypeOfInterface { 
 + static class MyInnerClass { } / / violation 
 + 
 + class MyInnerClass2 { } 
 + 
 + static enum MyInnerEnum { } / / violation 
 + 
 + enum MyInnerEnum2 { } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticMethodInInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticMethodInInterface . java 
 new file mode 100644 
 index 0000000 . . 0281ccf 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticMethodInInterface . java 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; 
 + 
 + 
 + public interface InputRedundantModifierStaticMethodInInterface 
 + { 
 + static int f ( ) 
 + { 
 + int someName = 5 ; 
 + return someName ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticModifierInNestedEnum . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticModifierInNestedEnum . java 
 new file mode 100644 
 index 0000000 . . 58eeccc 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / redundantmodifier / InputRedundantModifierStaticModifierInNestedEnum . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . modifier . redundantmodifier ; 
 + 
 + public class InputRedundantModifierStaticModifierInNestedEnum { 
 + static enum NestedEnumWithRedundantStatic { } / / violation 
 + 
 + enum CorrectNestedEnum { 
 + VAL ; 
 + static enum NestedEnumWithRedundantStatic { } / / violation 
 + } 
 + 
 + interface NestedInterface { 
 + static enum NestedEnumWithRedundantStatic { } / / violation 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / xdocs / index . xml . vm b / src / xdocs / index . xml . vm 
 index 5e68020 . . b48ccdb 100644 
 - - - a / src / xdocs / index . xml . vm 
 + + + b / src / xdocs / index . xml . vm 
 @ @ - 116 , 202 + 116 , 206 @ @ 
 many improvements since then . The known plug - ins are : 
 < / p > 
 
 - < table > 
 - < tr > 
 - < th > IDE / Build tool < / th > 
 - < th > Main / Initial Author < / th > 
 - < th > Available from < / th > 
 - < th > Remarks < / th > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " https : / / www . scm - manager . org / " > SCM - Manager < / a > < / td > 
 - < td / > 
 - < td > < a href = " http : / / plugins . scm - manager . org / scm - plugin - backend / page / index . html " > SCM - Manager Plugin Page < / a > < / td > 
 - < td / > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / www . jgrasp . org / " > jGRASP < / a > < / td > 
 - < td > Larry Barowski < / td > 
 - < td > < a href = " http : / / www . jgrasp . org / " > jGRASP Home Page < / a > < / td > 
 - < td / > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / www . sonarqube . org / " > SonarQube < / a > < / td > 
 - < td > Freddy Mallet ( initial author ) < / td > 
 - < td > < a href = " http : / / www . sonarqube . org / " > SonarQube Home Page < / a > < / td > 
 - < td > < a href = " http : / / nemo . sonarqube . org / " > Demo site < / a > < / td > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 - < td > David Schneider < / td > 
 - < td > 
 - < a href = " http : / / eclipse - cs . sourceforge . net / " > Eclipse - CS Home 
 - Page < / a > 
 - < / td > 
 - < td > 
 - In 2007 was awarded 
 - < a href = " http : / / www . eclipse . org / org / press - release / 20070306eclipsecommunityawards . php " > 
 - Best Open Source Eclipse - based Developer tool 
 - < / a > . 
 - < / td > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 - < td > Roman Ivanov < / td > 
 - < td > 
 - < a href = " https : / / github . com / sevntu - checkstyle " > Project Page < / a > 
 - < / td > 
 - < td > 
 - Extension for Eclipse - CS plugin and also an incubator for 
 - Checkstyle checks that are not present in main stream of 
 - Checkstyle . See the 
 - < a href = " https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / wiki " > Wiki < / a > 
 - and 
 - < a href = " http : / / sevntu - checkstyle . github . io / sevntu . checkstyle / " > Blog < / a > 
 - . 
 - < / td > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 - < td > Marco van Meegen < / td > 
 - < td > 
 - < a 
 - href = " http : / / www . mvmsoft . de / content / plugins / checkclipse / checkclipse . htm " > Checklipse 
 - Home Page < / a > 
 - < / td > 
 - < td / > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / www . jetbrains . com / idea / " > IntelliJ IDEA < / a > < / td > 
 - < td > Jakub Slawinski < / td > 
 - < td > 
 - < a href = " http : / / qaplug . com / " > QAPlug < / a > 
 - < / td > 
 - < td > Provides quality assurance features . < / td > 
 - < / tr > 
 + < subsection name = " Active Tools " > 
 + < table > 
 + < tr > 
 + < th > IDE / Build tool < / th > 
 + < th > Main / Initial Author < / th > 
 + < th > Available from < / th > 
 + < th > Remarks < / th > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 + < td > David Schneider < / td > 
 + < td > 
 + < a href = " http : / / eclipse - cs . sourceforge . net / " > Eclipse - CS Home Page < / a > 
 + < / td > 
 + < td > 
 + In 2007 was awarded 
 + < a href = " http : / / www . eclipse . org / org / press - release / 20070306eclipsecommunityawards . php " > 
 + Best Open Source Eclipse - based Developer tool 
 + < / a > . 
 + < / td > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / gradle . org / " > Gradle < / a > < / td > 
 + < td > Hans Dockter ( initial author ) < / td > 
 + < td > Checkstyle supported out of the box < / td > 
 + < td > < a href = " https : / / docs . gradle . org / current / userguide / checkstyle _ plugin . html " > Gradle Checkstyle docs < / a > < / td > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / www . jetbrains . com / idea / " > IntelliJ IDEA < / a > < / td > 
 + < td > James Shiell < / td > 
 + < td > 
 + < a href = " https : / / github . com / jshiell / checkstyle - idea " > Checkstyle - idea Project Page < / a > 
 + < / td > 
 + < td > Provides real - time and on - demand scanning . < / td > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / www . jgrasp . org / " > jGRASP < / a > < / td > 
 + < td > Larry Barowski < / td > 
 + < td > < a href = " http : / / www . jgrasp . org / " > jGRASP Home Page < / a > < / td > 
 + < td / > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 + < td > Roman Ivanov < / td > 
 + < td > 
 + < a href = " https : / / github . com / sevntu - checkstyle " > Project Page < / a > 
 + < / td > 
 + < td > 
 + Extension for Eclipse - CS plugin and also an incubator for 
 + Checkstyle checks that are not present in main stream of 
 + Checkstyle . See the 
 + < a href = " https : / / github . com / sevntu - checkstyle / sevntu . checkstyle / wiki " > Wiki < / a > 
 + and 
 + < a href = " http : / / sevntu - checkstyle . github . io / sevntu . checkstyle / " > Blog < / a > 
 + . 
 + < / td > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " https : / / bitbucket . org / atlassian / bamboo - checkstyle - plugin " > Bamboo Checkstyle plug - in < / a > < / td > 
 + < td > Atlassian ( formerly by Ross Rowe and Stephan Paulicke ) < / td > 
 + < td > < a href = " https : / / marketplace . atlassian . com / archive / com . atlassian . bamboo . plugins . bamboo - checkstyle - plugin " > Bamboo Checkstyle plug - in Atlassian Marketplace page < / a > < / td > 
 + < td > An add - on that will parse and record CheckStyle reports and report your style violations over time . < / td > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " https : / / wiki . jenkins - ci . org / display / JENKINS / Checkstyle + Plugin " > Jenkins Checkstyle plug - in < / a > < / td > 
 + < td / > 
 + < td > < a href = " https : / / wiki . jenkins - ci . org / display / JENKINS / Checkstyle + Plugin " > Jenkins Checkstyle plug - in Home Page < / a > < / td > 
 + < td > This plug - in is supported by the Static Analysis Collector plug - in that collects different analysis results and shows the results in aggregated trend graphs . < / td > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / maven . apache . org / " > Maven < / a > < / td > 
 + < td > Vincent Massol < / td > 
 + < td > Checkstyle supported out of the box < / td > 
 + < td > < a href = " http : / / maven . apache . org / plugins / maven - checkstyle - plugin / checkstyle . html " > example report < / a > < / td > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " https : / / netbeans . org / " > NetBeans < / a > < / td > 
 + < td > Petr Hejl < / td > 
 + < td > 
 + < a href = " http : / / www . sickboy . cz / checkstyle / " > Checkstyle Beans < / a > 
 + < / td > 
 + < td > 
 + Problems with source code are displayed as annotations of 
 + the source 
 + < / td > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " https : / / netbeans . org / " > NetBeans < / a > < / td > 
 + < td / > 
 + < td > 
 + < a href = " https : / / java . net / projects / sqe / " > Software Quality Environment ( SQE ) < / a > 
 + < / td > 
 + < td / > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / www . sonarqube . org / " > SonarQube < / a > < / td > 
 + < td > Freddy Mallet ( initial author ) < / td > 
 + < td > < a href = " http : / / www . sonarqube . org / " > SonarQube Home Page < / a > < / td > 
 + < td > < a href = " http : / / nemo . sonarqube . org / " > Demo site < / a > < / td > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / www . jedit . org / " > jEdit < / a > < / td > 
 + < td > Todd Papaioannou < / td > 
 + < td > < a 
 + href = " http : / / plugins . jedit . org / plugins / ? CheckStylePlugin " > JEdit CheckStylePlugin < / a > < / td > 
 + < td / > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " https : / / www . scm - manager . org / " > SCM - Manager < / a > < / td > 
 + < td / > 
 + < td > < a href = " http : / / plugins . scm - manager . org / scm - plugin - backend / page / index . html " > SCM - Manager Plugin Page < / a > < / td > 
 + < td / > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / www . jetbrains . com / idea / " > IntelliJ IDEA < / a > < / td > 
 + < td > Jakub Slawinski < / td > 
 + < td > 
 + < a href = " http : / / qaplug . com / " > QAPlug < / a > 
 + < / td > 
 + < td > Provides quality assurance features . < / td > 
 + < / tr > 
 + < tr > 
 + < td / > 
 + < td > < a href = " http : / / jcoderz . github . io / " > jCoderZ < / a > < / td > 
 + < td > 
 + < a href = " http : / / jcoderz . github . io / " > fawkeZ < / a > 
 + < / td > 
 + < td > Combines multiple tools ( CheckStyle , findbugs , PMD , Cobertura , etc . ) < / td > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / tide . olympe . in / " > tIDE < / a > < / td > 
 + < td / > 
 + < td > Built in < / td > 
 + < td / > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / www . jarchitect . com / " > JArchitect < / a > < / td > 
 + < td / > 
 + < td > < a href = " http : / / www . jarchitect . com / " > JArchitect Home Page < / a > < / td > 
 + < td > Imports XML result files from CheckStyle . < / td > 
 + < / tr > 
 + < / table > 
 + < / subsection > 
 
 - < tr > 
 - < td > < a href = " http : / / www . jetbrains . com / idea / " > IntelliJ IDEA < / a > < / td > 
 - < td > James Shiell < / td > 
 - < td > 
 - < a href = " https : / / github . com / jshiell / checkstyle - idea " > Checkstyle - idea Project Page < / a > 
 - < / td > 
 - < td > Provides real - time and on - demand scanning . < / td > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / www . jetbrains . com / idea / " > IntelliJ IDEA < / a > < / td > 
 - < td > Mark Lussier < / td > 
 - < td > 
 - < a href = " http : / / jetstyle . sourceforge . net / " > JetStyle 
 - Project Page < / a > 
 - < / td > 
 - < td / > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " https : / / netbeans . org / " > NetBeans < / a > < / td > 
 - < td > Petr Hejl < / td > 
 - < td > 
 - < a href = " http : / / www . sickboy . cz / checkstyle / " > Checkstyle Beans < / a > 
 - < / td > 
 - < td > 
 - Problems with source code are displayed as annotations of 
 - the source 
 - < / td > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " https : / / netbeans . org / " > NetBeans < / a > < / td > 
 - < td > Paul Goulbourn < / td > 
 - < td > 
 - < a href = " http : / / nbcheckstyle . sourceforge . net " > nbCheckStyle < / a > 
 - < / td > 
 - < td / > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " https : / / netbeans . org / " > NetBeans < / a > < / td > 
 - < td / > 
 - < td > 
 - < a href = " https : / / java . net / projects / sqe / " > Software Quality Environment ( SQE ) < / a > 
 - < / td > 
 - < td / > 
 - < / tr > 
 - < tr > 
 - < td / > 
 - < td > < a href = " http : / / jcoderz . github . io / " > jCoderZ < / a > < / td > 
 - < td > 
 - < a href = " http : / / jcoderz . github . io / " > fawkeZ < / a > 
 - < / td > 
 - < td > Combines multiple tools ( CheckStyle , findbugs , PMD , Cobertura , etc . ) < / td > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / www . bluej . org " > BlueJ < / a > < / td > 
 - < td > Rick Giles < / td > 
 - < td > < a href = " http : / / bluejcheckstyle . sourceforge . net / " > bluejcheckstyle 
 - home page < / a > < / td > 
 - < td / > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / tide . olympe . in / " > tIDE < / a > < / td > 
 - < td / > 
 - < td > Built in < / td > 
 - < td / > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / jdee . sourceforge . net / " > Emacs JDE < / a > < / td > 
 - < td > Markus Mohnen < / td > 
 - < td > Part of the standard JDEE distribution < / td > 
 - < td / > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / www . jedit . org / " > jEdit < / a > < / td > 
 - < td > Todd Papaioannou < / td > 
 - < td > < a 
 - href = " http : / / plugins . jedit . org / plugins / ? CheckStylePlugin " > JEdit CheckStylePlugin < / a > < / td > 
 - < td / > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / www . vim . org " > Vim editor < / a > < / td > 
 - < td > Xandy Johnson < / td > 
 - < td > < a 
 - href = " http : / / vim . sourceforge . net / scripts / script . php ? script _ id = 448 " > Plugin Homepage < / a > < / td > 
 - < td > Vim file - type plug - in < / td > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / maven . apache . org / " > Maven < / a > < / td > 
 - < td > Vincent Massol < / td > 
 - < td > Checkstyle supported out of the box < / td > 
 - < td > < a href = " http : / / maven . apache . org / plugins / maven - checkstyle - plugin / checkstyle . html " > example report < / a > < / td > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / gradle . org / " > Gradle < / a > < / td > 
 - < td > Hans Dockter ( initial author ) < / td > 
 - < td > Checkstyle supported out of the box < / td > 
 - < td > < a href = " https : / / docs . gradle . org / current / userguide / checkstyle _ plugin . html " > Gradle Checkstyle docs < / a > < / td > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / qalab . sourceforge . net / " > QALab < / a > < / td > 
 - < td > Benoit Xhenseval < / td > 
 - < td > < a href = " http : / / qalab . sourceforge . net / " > QALab Home Page < / a > < / td > 
 - < td > Supports tracking Checkstyle statistics over time . < / td > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " http : / / www . jarchitect . com / " > JArchitect < / a > < / td > 
 - < td / > 
 - < td > < a href = " http : / / www . jarchitect . com / " > JArchitect Home Page < / a > < / td > 
 - < td > Imports XML result files from CheckStyle . < / td > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " https : / / wiki . jenkins - ci . org / display / JENKINS / Checkstyle + Plugin " > Jenkins Checkstyle plug - in < / a > < / td > 
 - < td / > 
 - < td > < a href = " https : / / wiki . jenkins - ci . org / display / JENKINS / Checkstyle + Plugin " > Jenkins Checkstyle plug - in Home Page < / a > < / td > 
 - < td > This plug - in is supported by the Static Analysis Collector plug - in that collects different analysis results and shows the results in aggregated trend graphs . < / td > 
 - < / tr > 
 - < tr > 
 - < td > < a href = " https : / / bitbucket . org / atlassian / bamboo - checkstyle - plugin " > Bamboo Checkstyle plug - in < / a > < / td > 
 - < td > Atlassian ( formerly by Ross Rowe and Stephan Paulicke ) < / td > 
 - < td > < a href = " https : / / marketplace . atlassian . com / archive / com . atlassian . bamboo . plugins . bamboo - checkstyle - plugin " > Bamboo Checkstyle plug - in Atlassian Marketplace page < / a > < / td > 
 - < td > An add - on that will parse and record CheckStyle reports and report your style violations over time . < / td > 
 - < / tr > 
 - < / table > 
 + < subsection name = " Inactive / Old Tools " > 
 + < table > 
 + < tr > 
 + < th > IDE / Build tool < / th > 
 + < th > Main / Initial Author < / th > 
 + < th > Available from < / th > 
 + < th > Remarks < / th > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / www . jetbrains . com / idea / " > IntelliJ IDEA < / a > < / td > 
 + < td > Mark Lussier < / td > 
 + < td > 
 + < a href = " http : / / jetstyle . sourceforge . net / " > JetStyle Project Page < / a > 
 + < / td > 
 + < td / > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / www . bluej . org " > BlueJ < / a > < / td > 
 + < td > Rick Giles < / td > 
 + < td > < a href = " http : / / bluejcheckstyle . sourceforge . net / " > bluejcheckstyle home page < / a > < / td > 
 + < td / > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / www . eclipse . org " > Eclipse / RAD / RDz < / a > < / td > 
 + < td > Marco van Meegen < / td > 
 + < td > 
 + < a href = " http : / / www . mvmsoft . de / content / plugins / checkclipse / checkclipse . htm " > Checklipse Home Page < / a > 
 + < / td > 
 + < td / > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / qalab . sourceforge . net / " > QALab < / a > < / td > 
 + < td > Benoit Xhenseval < / td > 
 + < td > < a href = " http : / / qalab . sourceforge . net / " > QALab Home Page < / a > < / td > 
 + < td > Supports tracking Checkstyle statistics over time . < / td > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " https : / / netbeans . org / " > NetBeans < / a > < / td > 
 + < td > Paul Goulbourn < / td > 
 + < td > < a href = " http : / / nbcheckstyle . sourceforge . net " > nbCheckStyle < / a > < / td > 
 + < td / > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / jdee . sourceforge . net / " > Emacs JDE < / a > < / td > 
 + < td > Markus Mohnen < / td > 
 + < td > Part of the standard JDEE distribution < / td > 
 + < td / > 
 + < / tr > 
 + < tr > 
 + < td > < a href = " http : / / www . vim . org " > Vim editor < / a > < / td > 
 + < td > Xandy Johnson < / td > 
 + < td > < a href = " http : / / vim . sourceforge . net / scripts / script . php ? script _ id = 448 " > Plugin Homepage < / a > < / td > 
 + < td > Vim file - type plug - in < / td > 
 + < / tr > 
 + < / table > 
 + < / subsection > 
 
 < p > 
 If you have written a plugin for other IDEs , please let us know , so we
