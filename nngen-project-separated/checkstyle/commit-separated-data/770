BLEU SCORE: 0.02786973068084291

TEST MSG: minor : Added a javadoc parsing UT
GENERATED MSG: Fixes # 612 . Added support of Windows line separator . Fixed UTs

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java <nl> index 1fee601 . . 4e37b35 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java <nl> @ @ - 294 , 6 + 294 , 14 @ @ public class JavadocParseTreeTest { <nl> compareTrees ( expectedTree , generatedTree ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testLeadingAsterisksExtended ( ) throws IOException { <nl> + final String filename = getPath ( " InputLeadingAsterisksExtended . txt " ) ; <nl> + final ParseTree generatedTree = parseJavadoc ( getFileContent ( new File ( filename ) ) ) ; <nl> + final ParseTree expectedTree = ParseTreeBuilder . treeLeadingAsterisksExtended ( ) ; <nl> + compareTrees ( expectedTree , generatedTree ) ; <nl> + } <nl> + <nl> private void compareTrees ( ParseTree first , ParseTree second ) { <nl> Assert . assertEquals ( first . toStringTree ( parser ) , second . toStringTree ( parser ) ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / ParseTreeBuilder . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / ParseTreeBuilder . java <nl> index 699b858 . . 8c9592e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / ParseTreeBuilder . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / ParseTreeBuilder . java <nl> @ @ - 5794 , 4 + 5794 , 495 @ @ final class ParseTreeBuilder { <nl> javadocContext0 . addChild ( eof0 ) ; <nl> return javadocContext0 ; <nl> } <nl> + <nl> + public static ParseTree treeLeadingAsterisksExtended ( ) { <nl> + JavadocContext javadocContext0 = new JavadocContext ( null , 0 ) ; <nl> + TextContext textContext0 = new TextContext ( javadocContext0 , 0 ) ; <nl> + CommonToken ws0 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext0 . addChild ( ws0 ) ; <nl> + javadocContext0 . addChild ( textContext0 ) ; <nl> + CommonToken newline0 = new CommonToken ( JavadocTokenTypes . NEWLINE , LINE _ SEPARATOR ) ; <nl> + javadocContext0 . addChild ( newline0 ) ; <nl> + CommonToken leadingAsterisk0 = new CommonToken ( JavadocTokenTypes . LEADING _ ASTERISK , " * " ) ; <nl> + javadocContext0 . addChild ( leadingAsterisk0 ) ; <nl> + TextContext textContext1 = new TextContext ( javadocContext0 , 0 ) ; <nl> + CommonToken ws1 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext1 . addChild ( ws1 ) ; <nl> + CommonToken char0 = new CommonToken ( JavadocTokenTypes . CHAR , " C " ) ; <nl> + textContext1 . addChild ( char0 ) ; <nl> + CommonToken char1 = new CommonToken ( JavadocTokenTypes . CHAR , " h " ) ; <nl> + textContext1 . addChild ( char1 ) ; <nl> + CommonToken char2 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext1 . addChild ( char2 ) ; <nl> + CommonToken char3 = new CommonToken ( JavadocTokenTypes . CHAR , " c " ) ; <nl> + textContext1 . addChild ( char3 ) ; <nl> + CommonToken char4 = new CommonToken ( JavadocTokenTypes . CHAR , " k " ) ; <nl> + textContext1 . addChild ( char4 ) ; <nl> + CommonToken char5 = new CommonToken ( JavadocTokenTypes . CHAR , " s " ) ; <nl> + textContext1 . addChild ( char5 ) ; <nl> + CommonToken ws2 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext1 . addChild ( ws2 ) ; <nl> + CommonToken char6 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext1 . addChild ( char6 ) ; <nl> + CommonToken char7 = new CommonToken ( JavadocTokenTypes . CHAR , " h " ) ; <nl> + textContext1 . addChild ( char7 ) ; <nl> + CommonToken char8 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; <nl> + textContext1 . addChild ( char8 ) ; <nl> + CommonToken char9 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext1 . addChild ( char9 ) ; <nl> + CommonToken ws3 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext1 . addChild ( ws3 ) ; <nl> + CommonToken char10 = new CommonToken ( JavadocTokenTypes . CHAR , " c " ) ; <nl> + textContext1 . addChild ( char10 ) ; <nl> + CommonToken char11 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; <nl> + textContext1 . addChild ( char11 ) ; <nl> + CommonToken char12 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; <nl> + textContext1 . addChild ( char12 ) ; <nl> + CommonToken char13 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; <nl> + textContext1 . addChild ( char13 ) ; <nl> + CommonToken char14 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext1 . addChild ( char14 ) ; <nl> + CommonToken char15 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext1 . addChild ( char15 ) ; <nl> + CommonToken char16 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext1 . addChild ( char16 ) ; <nl> + CommonToken char17 = new CommonToken ( JavadocTokenTypes . CHAR , " C " ) ; <nl> + textContext1 . addChild ( char17 ) ; <nl> + CommonToken char18 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; <nl> + textContext1 . addChild ( char18 ) ; <nl> + CommonToken char19 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext1 . addChild ( char19 ) ; <nl> + CommonToken char20 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext1 . addChild ( char20 ) ; <nl> + CommonToken char21 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext1 . addChild ( char21 ) ; <nl> + CommonToken char22 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext1 . addChild ( char22 ) ; <nl> + CommonToken char23 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext1 . addChild ( char23 ) ; <nl> + CommonToken ws4 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext1 . addChild ( ws4 ) ; <nl> + CommonToken char24 = new CommonToken ( JavadocTokenTypes . CHAR , " s " ) ; <nl> + textContext1 . addChild ( char24 ) ; <nl> + CommonToken char25 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext1 . addChild ( char25 ) ; <nl> + CommonToken char26 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; <nl> + textContext1 . addChild ( char26 ) ; <nl> + CommonToken char27 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; <nl> + textContext1 . addChild ( char27 ) ; <nl> + CommonToken char28 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext1 . addChild ( char28 ) ; <nl> + CommonToken char29 = new CommonToken ( JavadocTokenTypes . CHAR , " s " ) ; <nl> + textContext1 . addChild ( char29 ) ; <nl> + CommonToken ws5 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext1 . addChild ( ws5 ) ; <nl> + CommonToken char30 = new CommonToken ( JavadocTokenTypes . CHAR , " w " ) ; <nl> + textContext1 . addChild ( char30 ) ; <nl> + CommonToken char31 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; <nl> + textContext1 . addChild ( char31 ) ; <nl> + CommonToken char32 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext1 . addChild ( char32 ) ; <nl> + CommonToken char33 = new CommonToken ( JavadocTokenTypes . CHAR , " h " ) ; <nl> + textContext1 . addChild ( char33 ) ; <nl> + CommonToken ws6 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext1 . addChild ( ws6 ) ; <nl> + CommonToken char34 = new CommonToken ( JavadocTokenTypes . CHAR , " ' " ) ; <nl> + textContext1 . addChild ( char34 ) ; <nl> + CommonToken char35 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; <nl> + textContext1 . addChild ( char35 ) ; <nl> + CommonToken char36 = new CommonToken ( JavadocTokenTypes . CHAR , " ' " ) ; <nl> + textContext1 . addChild ( char36 ) ; <nl> + CommonToken ws7 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext1 . addChild ( ws7 ) ; <nl> + CommonToken char37 = new CommonToken ( JavadocTokenTypes . CHAR , " j " ) ; <nl> + textContext1 . addChild ( char37 ) ; <nl> + CommonToken char38 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; <nl> + textContext1 . addChild ( char38 ) ; <nl> + CommonToken char39 = new CommonToken ( JavadocTokenTypes . CHAR , " v " ) ; <nl> + textContext1 . addChild ( char39 ) ; <nl> + CommonToken char40 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; <nl> + textContext1 . addChild ( char40 ) ; <nl> + CommonToken char41 = new CommonToken ( JavadocTokenTypes . CHAR , " d " ) ; <nl> + textContext1 . addChild ( char41 ) ; <nl> + CommonToken char42 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; <nl> + textContext1 . addChild ( char42 ) ; <nl> + CommonToken char43 = new CommonToken ( JavadocTokenTypes . CHAR , " c " ) ; <nl> + textContext1 . addChild ( char43 ) ; <nl> + CommonToken ws8 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext1 . addChild ( ws8 ) ; <nl> + CommonToken char44 = new CommonToken ( JavadocTokenTypes . CHAR , " c " ) ; <nl> + textContext1 . addChild ( char44 ) ; <nl> + CommonToken char45 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; <nl> + textContext1 . addChild ( char45 ) ; <nl> + CommonToken char46 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; <nl> + textContext1 . addChild ( char46 ) ; <nl> + CommonToken char47 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; <nl> + textContext1 . addChild ( char47 ) ; <nl> + CommonToken char48 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext1 . addChild ( char48 ) ; <nl> + CommonToken char49 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext1 . addChild ( char49 ) ; <nl> + CommonToken char50 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext1 . addChild ( char50 ) ; <nl> + CommonToken ws9 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext1 . addChild ( ws9 ) ; <nl> + CommonToken char51 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; <nl> + textContext1 . addChild ( char51 ) ; <nl> + CommonToken char52 = new CommonToken ( JavadocTokenTypes . CHAR , " d " ) ; <nl> + textContext1 . addChild ( char52 ) ; <nl> + CommonToken char53 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext1 . addChild ( char53 ) ; <nl> + CommonToken char54 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext1 . addChild ( char54 ) ; <nl> + CommonToken char55 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext1 . addChild ( char55 ) ; <nl> + CommonToken char56 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; <nl> + textContext1 . addChild ( char56 ) ; <nl> + CommonToken char57 = new CommonToken ( JavadocTokenTypes . CHAR , " f " ) ; <nl> + textContext1 . addChild ( char57 ) ; <nl> + CommonToken char58 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; <nl> + textContext1 . addChild ( char58 ) ; <nl> + CommonToken char59 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext1 . addChild ( char59 ) ; <nl> + CommonToken char60 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; <nl> + textContext1 . addChild ( char60 ) ; <nl> + CommonToken char61 = new CommonToken ( JavadocTokenTypes . CHAR , " . " ) ; <nl> + textContext1 . addChild ( char61 ) ; <nl> + javadocContext0 . addChild ( textContext1 ) ; <nl> + CommonToken newline1 = new CommonToken ( JavadocTokenTypes . NEWLINE , LINE _ SEPARATOR ) ; <nl> + javadocContext0 . addChild ( newline1 ) ; <nl> + CommonToken leadingAsterisk1 = new CommonToken ( JavadocTokenTypes . LEADING _ ASTERISK , " * " ) ; <nl> + javadocContext0 . addChild ( leadingAsterisk1 ) ; <nl> + TextContext textContext2 = new TextContext ( javadocContext0 , 0 ) ; <nl> + CommonToken char62 = new CommonToken ( JavadocTokenTypes . CHAR , " & " ) ; <nl> + textContext2 . addChild ( char62 ) ; <nl> + CommonToken char63 = new CommonToken ( JavadocTokenTypes . CHAR , " l " ) ; <nl> + textContext2 . addChild ( char63 ) ; <nl> + CommonToken char64 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext2 . addChild ( char64 ) ; <nl> + CommonToken char65 = new CommonToken ( JavadocTokenTypes . CHAR , " ; " ) ; <nl> + textContext2 . addChild ( char65 ) ; <nl> + CommonToken char66 = new CommonToken ( JavadocTokenTypes . CHAR , " p " ) ; <nl> + textContext2 . addChild ( char66 ) ; <nl> + CommonToken char67 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; <nl> + textContext2 . addChild ( char67 ) ; <nl> + CommonToken char68 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; <nl> + textContext2 . addChild ( char68 ) ; <nl> + CommonToken char69 = new CommonToken ( JavadocTokenTypes . CHAR , " p " ) ; <nl> + textContext2 . addChild ( char69 ) ; <nl> + CommonToken char70 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext2 . addChild ( char70 ) ; <nl> + CommonToken char71 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; <nl> + textContext2 . addChild ( char71 ) ; <nl> + CommonToken char72 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext2 . addChild ( char72 ) ; <nl> + CommonToken char73 = new CommonToken ( JavadocTokenTypes . CHAR , " y " ) ; <nl> + textContext2 . addChild ( char73 ) ; <nl> + CommonToken ws10 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext2 . addChild ( ws10 ) ; <nl> + CommonToken char74 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext2 . addChild ( char74 ) ; <nl> + CommonToken char75 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; <nl> + textContext2 . addChild ( char75 ) ; <nl> + CommonToken char76 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; <nl> + textContext2 . addChild ( char76 ) ; <nl> + CommonToken char77 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext2 . addChild ( char77 ) ; <nl> + CommonToken char78 = new CommonToken ( JavadocTokenTypes . CHAR , " = " ) ; <nl> + textContext2 . addChild ( char78 ) ; <nl> + CommonToken char79 = new CommonToken ( JavadocTokenTypes . CHAR , " \ " " ) ; <nl> + textContext2 . addChild ( char79 ) ; <nl> + CommonToken char80 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; <nl> + textContext2 . addChild ( char80 ) ; <nl> + CommonToken char81 = new CommonToken ( JavadocTokenTypes . CHAR , " g " ) ; <nl> + textContext2 . addChild ( char81 ) ; <nl> + CommonToken char82 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext2 . addChild ( char82 ) ; <nl> + CommonToken char83 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; <nl> + textContext2 . addChild ( char83 ) ; <nl> + CommonToken char84 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; <nl> + textContext2 . addChild ( char84 ) ; <nl> + CommonToken char85 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext2 . addChild ( char85 ) ; <nl> + CommonToken char86 = new CommonToken ( JavadocTokenTypes . CHAR , " P " ) ; <nl> + textContext2 . addChild ( char86 ) ; <nl> + CommonToken char87 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; <nl> + textContext2 . addChild ( char87 ) ; <nl> + CommonToken char88 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext2 . addChild ( char88 ) ; <nl> + CommonToken char89 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext2 . addChild ( char89 ) ; <nl> + CommonToken char90 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext2 . addChild ( char90 ) ; <nl> + CommonToken char91 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; <nl> + textContext2 . addChild ( char91 ) ; <nl> + CommonToken char92 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext2 . addChild ( char92 ) ; <nl> + CommonToken char93 = new CommonToken ( JavadocTokenTypes . CHAR , " \ " " ) ; <nl> + textContext2 . addChild ( char93 ) ; <nl> + CommonToken ws11 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext2 . addChild ( ws11 ) ; <nl> + CommonToken char94 = new CommonToken ( JavadocTokenTypes . CHAR , " v " ) ; <nl> + textContext2 . addChild ( char94 ) ; <nl> + CommonToken char95 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; <nl> + textContext2 . addChild ( char95 ) ; <nl> + CommonToken char96 = new CommonToken ( JavadocTokenTypes . CHAR , " l " ) ; <nl> + textContext2 . addChild ( char96 ) ; <nl> + CommonToken char97 = new CommonToken ( JavadocTokenTypes . CHAR , " u " ) ; <nl> + textContext2 . addChild ( char97 ) ; <nl> + CommonToken char98 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext2 . addChild ( char98 ) ; <nl> + CommonToken char99 = new CommonToken ( JavadocTokenTypes . CHAR , " = " ) ; <nl> + textContext2 . addChild ( char99 ) ; <nl> + CommonToken char100 = new CommonToken ( JavadocTokenTypes . CHAR , " \ " " ) ; <nl> + textContext2 . addChild ( char100 ) ; <nl> + CommonToken char101 = new CommonToken ( JavadocTokenTypes . CHAR , " ^ " ) ; <nl> + textContext2 . addChild ( char101 ) ; <nl> + CommonToken ws12 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext2 . addChild ( ws12 ) ; <nl> + CommonToken char102 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; <nl> + textContext2 . addChild ( char102 ) ; <nl> + CommonToken char103 = new CommonToken ( JavadocTokenTypes . CHAR , " \ \ " ) ; <nl> + textContext2 . addChild ( char103 ) ; <nl> + CommonToken char104 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; <nl> + textContext2 . addChild ( char104 ) ; <nl> + CommonToken ws13 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext2 . addChild ( ws13 ) ; <nl> + CommonToken char105 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; <nl> + textContext2 . addChild ( char105 ) ; <nl> + CommonToken char106 = new CommonToken ( JavadocTokenTypes . CHAR , " [ " ) ; <nl> + textContext2 . addChild ( char106 ) ; <nl> + CommonToken char107 = new CommonToken ( JavadocTokenTypes . CHAR , " ^ " ) ; <nl> + textContext2 . addChild ( char107 ) ; <nl> + CommonToken ws14 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext2 . addChild ( ws14 ) ; <nl> + CommonToken char108 = new CommonToken ( JavadocTokenTypes . CHAR , " ] " ) ; <nl> + textContext2 . addChild ( char108 ) ; <nl> + CommonToken char109 = new CommonToken ( JavadocTokenTypes . CHAR , " + " ) ; <nl> + textContext2 . addChild ( char109 ) ; <nl> + CommonToken char110 = new CommonToken ( JavadocTokenTypes . CHAR , " $ " ) ; <nl> + textContext2 . addChild ( char110 ) ; <nl> + CommonToken char111 = new CommonToken ( JavadocTokenTypes . CHAR , " \ " " ) ; <nl> + textContext2 . addChild ( char111 ) ; <nl> + CommonToken char112 = new CommonToken ( JavadocTokenTypes . CHAR , " / " ) ; <nl> + textContext2 . addChild ( char112 ) ; <nl> + CommonToken char113 = new CommonToken ( JavadocTokenTypes . CHAR , " & " ) ; <nl> + textContext2 . addChild ( char113 ) ; <nl> + CommonToken char114 = new CommonToken ( JavadocTokenTypes . CHAR , " g " ) ; <nl> + textContext2 . addChild ( char114 ) ; <nl> + CommonToken char115 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext2 . addChild ( char115 ) ; <nl> + CommonToken char116 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; <nl> + textContext2 . addChild ( char116 ) ; <nl> + javadocContext0 . addChild ( textContext2 ) ; <nl> + CommonToken newline2 = new CommonToken ( JavadocTokenTypes . NEWLINE , LINE _ SEPARATOR ) ; <nl> + javadocContext0 . addChild ( newline2 ) ; <nl> + CommonToken leadingAsterisk2 = new CommonToken ( JavadocTokenTypes . LEADING _ ASTERISK , " \ \ t * " ) ; <nl> + javadocContext0 . addChild ( leadingAsterisk2 ) ; <nl> + TextContext textContext3 = new TextContext ( javadocContext0 , 0 ) ; <nl> + CommonToken ws15 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext3 . addChild ( ws15 ) ; <nl> + CommonToken char117 = new CommonToken ( JavadocTokenTypes . CHAR , " T " ) ; <nl> + textContext3 . addChild ( char117 ) ; <nl> + CommonToken char118 = new CommonToken ( JavadocTokenTypes . CHAR , " h " ) ; <nl> + textContext3 . addChild ( char118 ) ; <nl> + CommonToken char119 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; <nl> + textContext3 . addChild ( char119 ) ; <nl> + CommonToken char120 = new CommonToken ( JavadocTokenTypes . CHAR , " s " ) ; <nl> + textContext3 . addChild ( char120 ) ; <nl> + CommonToken ws16 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext3 . addChild ( ws16 ) ; <nl> + CommonToken char121 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; <nl> + textContext3 . addChild ( char121 ) ; <nl> + CommonToken ws17 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext3 . addChild ( ws17 ) ; <nl> + CommonToken char122 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; <nl> + textContext3 . addChild ( char122 ) ; <nl> + CommonToken char123 = new CommonToken ( JavadocTokenTypes . CHAR , " s " ) ; <nl> + textContext3 . addChild ( char123 ) ; <nl> + CommonToken ws18 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext3 . addChild ( ws18 ) ; <nl> + CommonToken char124 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext3 . addChild ( char124 ) ; <nl> + CommonToken char125 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; <nl> + textContext3 . addChild ( char125 ) ; <nl> + CommonToken char126 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext3 . addChild ( char126 ) ; <nl> + CommonToken ws19 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext3 . addChild ( ws19 ) ; <nl> + CommonToken char127 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; <nl> + textContext3 . addChild ( char127 ) ; <nl> + CommonToken ws20 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext3 . addChild ( ws20 ) ; <nl> + CommonToken char128 = new CommonToken ( JavadocTokenTypes . CHAR , " l " ) ; <nl> + textContext3 . addChild ( char128 ) ; <nl> + CommonToken char129 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext3 . addChild ( char129 ) ; <nl> + CommonToken char130 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; <nl> + textContext3 . addChild ( char130 ) ; <nl> + CommonToken char131 = new CommonToken ( JavadocTokenTypes . CHAR , " d " ) ; <nl> + textContext3 . addChild ( char131 ) ; <nl> + CommonToken char132 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; <nl> + textContext3 . addChild ( char132 ) ; <nl> + CommonToken char133 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext3 . addChild ( char133 ) ; <nl> + CommonToken char134 = new CommonToken ( JavadocTokenTypes . CHAR , " g " ) ; <nl> + textContext3 . addChild ( char134 ) ; <nl> + CommonToken ws21 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext3 . addChild ( ws21 ) ; <nl> + CommonToken char135 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; <nl> + textContext3 . addChild ( char135 ) ; <nl> + javadocContext0 . addChild ( textContext3 ) ; <nl> + CommonToken newline3 = new CommonToken ( JavadocTokenTypes . NEWLINE , LINE _ SEPARATOR ) ; <nl> + javadocContext0 . addChild ( newline3 ) ; <nl> + CommonToken leadingAsterisk3 = new CommonToken ( JavadocTokenTypes . LEADING _ ASTERISK , " * " ) ; <nl> + javadocContext0 . addChild ( leadingAsterisk3 ) ; <nl> + CommonToken ws22 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + javadocContext0 . addChild ( ws22 ) ; <nl> + JavadocTagContext javadocTagContext0 = new JavadocTagContext ( javadocContext0 , 0 ) ; <nl> + CommonToken returnLiteral0 = new CommonToken ( JavadocTokenTypes . RETURN _ LITERAL , " @ return " ) ; <nl> + javadocTagContext0 . addChild ( returnLiteral0 ) ; <nl> + CommonToken ws23 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + javadocTagContext0 . addChild ( ws23 ) ; <nl> + DescriptionContext descriptionContext0 = new DescriptionContext ( javadocTagContext0 , 0 ) ; <nl> + TextContext textContext4 = new TextContext ( descriptionContext0 , 0 ) ; <nl> + CommonToken char136 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext4 . addChild ( char136 ) ; <nl> + CommonToken char137 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; <nl> + textContext4 . addChild ( char137 ) ; <nl> + CommonToken char138 = new CommonToken ( JavadocTokenTypes . CHAR , " u " ) ; <nl> + textContext4 . addChild ( char138 ) ; <nl> + CommonToken char139 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext4 . addChild ( char139 ) ; <nl> + CommonToken ws24 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext4 . addChild ( ws24 ) ; <nl> + CommonToken char140 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; <nl> + textContext4 . addChild ( char140 ) ; <nl> + CommonToken char141 = new CommonToken ( JavadocTokenTypes . CHAR , " f " ) ; <nl> + textContext4 . addChild ( char141 ) ; <nl> + CommonToken ws25 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext4 . addChild ( ws25 ) ; <nl> + CommonToken char142 = new CommonToken ( JavadocTokenTypes . CHAR , " c " ) ; <nl> + textContext4 . addChild ( char142 ) ; <nl> + CommonToken char143 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; <nl> + textContext4 . addChild ( char143 ) ; <nl> + CommonToken char144 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; <nl> + textContext4 . addChild ( char144 ) ; <nl> + CommonToken char145 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; <nl> + textContext4 . addChild ( char145 ) ; <nl> + CommonToken char146 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext4 . addChild ( char146 ) ; <nl> + CommonToken char147 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext4 . addChild ( char147 ) ; <nl> + CommonToken char148 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext4 . addChild ( char148 ) ; <nl> + CommonToken char149 = new CommonToken ( JavadocTokenTypes . CHAR , " C " ) ; <nl> + textContext4 . addChild ( char149 ) ; <nl> + CommonToken char150 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; <nl> + textContext4 . addChild ( char150 ) ; <nl> + CommonToken char151 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext4 . addChild ( char151 ) ; <nl> + CommonToken char152 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext4 . addChild ( char152 ) ; <nl> + CommonToken char153 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext4 . addChild ( char153 ) ; <nl> + CommonToken char154 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext4 . addChild ( char154 ) ; <nl> + CommonToken char155 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext4 . addChild ( char155 ) ; <nl> + CommonToken ws26 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext4 . addChild ( ws26 ) ; <nl> + CommonToken char156 = new CommonToken ( JavadocTokenTypes . CHAR , " s " ) ; <nl> + textContext4 . addChild ( char156 ) ; <nl> + CommonToken char157 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext4 . addChild ( char157 ) ; <nl> + CommonToken char158 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; <nl> + textContext4 . addChild ( char158 ) ; <nl> + CommonToken char159 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; <nl> + textContext4 . addChild ( char159 ) ; <nl> + CommonToken char160 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext4 . addChild ( char160 ) ; <nl> + CommonToken char161 = new CommonToken ( JavadocTokenTypes . CHAR , " s " ) ; <nl> + textContext4 . addChild ( char161 ) ; <nl> + CommonToken ws27 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext4 . addChild ( ws27 ) ; <nl> + CommonToken char162 = new CommonToken ( JavadocTokenTypes . CHAR , " w " ) ; <nl> + textContext4 . addChild ( char162 ) ; <nl> + CommonToken char163 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; <nl> + textContext4 . addChild ( char163 ) ; <nl> + CommonToken char164 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext4 . addChild ( char164 ) ; <nl> + CommonToken char165 = new CommonToken ( JavadocTokenTypes . CHAR , " h " ) ; <nl> + textContext4 . addChild ( char165 ) ; <nl> + CommonToken ws28 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext4 . addChild ( ws28 ) ; <nl> + CommonToken char166 = new CommonToken ( JavadocTokenTypes . CHAR , " ' " ) ; <nl> + textContext4 . addChild ( char166 ) ; <nl> + CommonToken char167 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; <nl> + textContext4 . addChild ( char167 ) ; <nl> + CommonToken char168 = new CommonToken ( JavadocTokenTypes . CHAR , " ' " ) ; <nl> + textContext4 . addChild ( char168 ) ; <nl> + CommonToken ws29 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext4 . addChild ( ws29 ) ; <nl> + CommonToken char169 = new CommonToken ( JavadocTokenTypes . CHAR , " j " ) ; <nl> + textContext4 . addChild ( char169 ) ; <nl> + CommonToken char170 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; <nl> + textContext4 . addChild ( char170 ) ; <nl> + CommonToken char171 = new CommonToken ( JavadocTokenTypes . CHAR , " v " ) ; <nl> + textContext4 . addChild ( char171 ) ; <nl> + CommonToken char172 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; <nl> + textContext4 . addChild ( char172 ) ; <nl> + CommonToken char173 = new CommonToken ( JavadocTokenTypes . CHAR , " d " ) ; <nl> + textContext4 . addChild ( char173 ) ; <nl> + CommonToken char174 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; <nl> + textContext4 . addChild ( char174 ) ; <nl> + CommonToken char175 = new CommonToken ( JavadocTokenTypes . CHAR , " c " ) ; <nl> + textContext4 . addChild ( char175 ) ; <nl> + CommonToken ws30 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext4 . addChild ( ws30 ) ; <nl> + CommonToken char176 = new CommonToken ( JavadocTokenTypes . CHAR , " c " ) ; <nl> + textContext4 . addChild ( char176 ) ; <nl> + CommonToken char177 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; <nl> + textContext4 . addChild ( char177 ) ; <nl> + CommonToken char178 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; <nl> + textContext4 . addChild ( char178 ) ; <nl> + CommonToken char179 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; <nl> + textContext4 . addChild ( char179 ) ; <nl> + CommonToken char180 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext4 . addChild ( char180 ) ; <nl> + CommonToken char181 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext4 . addChild ( char181 ) ; <nl> + CommonToken char182 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext4 . addChild ( char182 ) ; <nl> + CommonToken ws31 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; <nl> + textContext4 . addChild ( ws31 ) ; <nl> + CommonToken char183 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; <nl> + textContext4 . addChild ( char183 ) ; <nl> + CommonToken char184 = new CommonToken ( JavadocTokenTypes . CHAR , " d " ) ; <nl> + textContext4 . addChild ( char184 ) ; <nl> + CommonToken char185 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext4 . addChild ( char185 ) ; <nl> + CommonToken char186 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; <nl> + textContext4 . addChild ( char186 ) ; <nl> + CommonToken char187 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; <nl> + textContext4 . addChild ( char187 ) ; <nl> + CommonToken char188 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; <nl> + textContext4 . addChild ( char188 ) ; <nl> + CommonToken char189 = new CommonToken ( JavadocTokenTypes . CHAR , " f " ) ; <nl> + textContext4 . addChild ( char189 ) ; <nl> + CommonToken char190 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; <nl> + textContext4 . addChild ( char190 ) ; <nl> + CommonToken char191 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; <nl> + textContext4 . addChild ( char191 ) ; <nl> + CommonToken char192 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; <nl> + textContext4 . addChild ( char192 ) ; <nl> + descriptionContext0 . addChild ( textContext4 ) ; <nl> + CommonToken newline4 = new CommonToken ( JavadocTokenTypes . NEWLINE , LINE _ SEPARATOR ) ; <nl> + descriptionContext0 . addChild ( newline4 ) ; <nl> + javadocTagContext0 . addChild ( descriptionContext0 ) ; <nl> + javadocContext0 . addChild ( javadocTagContext0 ) ; <nl> + CommonToken eof0 = new CommonToken ( JavadocTokenTypes . EOF , " < EOF > " ) ; <nl> + javadocContext0 . addChild ( eof0 ) ; <nl> + return javadocContext0 ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / javadoc / InputLeadingAsterisksExtended . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / javadoc / InputLeadingAsterisksExtended . txt <nl> new file mode 100644 <nl> index 0000000 . . 1b7eeee <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / javadoc / InputLeadingAsterisksExtended . txt <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + <nl> + * Checks that commentContent starts with ' * ' javadoc comment identifier . <nl> + * & lt ; property name = " ignorePattern " value = " ^ * \ * * [ ^ ] + $ " / & gt * <nl> + 	 * This * is not a leading * <nl> + * @ return true if commentContent starts with ' * ' javadoc comment identifier
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java <nl> index b829df5 . . 16646cc 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java <nl> @ @ - 42 , 17 + 42 , 17 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * Check have following options : <nl> * < / p > <nl> * < ul > <nl> - * < li > mAllowSamelineMultipleAnnotations - to allow annotation to be located on <nl> + * < li > allowSamelineMultipleAnnotations - to allow annotation to be located on <nl> * the same line as target element . Default value is false . <nl> * < / li > <nl> * <nl> * < li > <nl> - * mAllowSamelineSingleParameterlessAnnotation - to allow single parameterless <nl> + * allowSamelineSingleParameterlessAnnotation - to allow single parameterless <nl> * annotation to be located on the same line as target element . Default value is false . <nl> * < / li > <nl> * <nl> * < li > <nl> - * mAllowSamelineParametrizedAnnotation - to allow parameterized annotation <nl> + * allowSamelineParametrizedAnnotation - to allow parameterized annotation <nl> * to be located on the same line as target element . Default value is false . <nl> * < / li > <nl> * < / ul > <nl> @ @ - 127 , 43 + 127 , 43 @ @ public class AnnotationLocationCheck extends Check <nl> / * * <nl> * Some javadoc . <nl> * / <nl> - private boolean mAllowSamelineSingleParameterlessAnnotation = true ; <nl> + private boolean allowSamelineSingleParameterlessAnnotation = true ; <nl> <nl> / * * <nl> * Some javadoc . <nl> * / <nl> - private boolean mAllowSamelineParametrizedAnnotation ; <nl> + private boolean allowSamelineParametrizedAnnotation ; <nl> <nl> / * * <nl> * Some javadoc . <nl> * / <nl> - private boolean mAllowSamelineMultipleAnnotations ; <nl> + private boolean allowSamelineMultipleAnnotations ; <nl> <nl> / * * <nl> * Some javadoc . <nl> - * @ param aAllow Some javadoc . <nl> + * @ param allow Some javadoc . <nl> * / <nl> - public final void setAllowSamelineSingleParameterlessAnnotation ( boolean aAllow ) <nl> + public final void setAllowSamelineSingleParameterlessAnnotation ( boolean allow ) <nl> { <nl> - mAllowSamelineSingleParameterlessAnnotation = aAllow ; <nl> + allowSamelineSingleParameterlessAnnotation = allow ; <nl> } <nl> <nl> / * * <nl> * Some javadoc . <nl> - * @ param aAllow Some javadoc . <nl> + * @ param allow Some javadoc . <nl> * / <nl> - public final void setAllowSamelineParametrizedAnnotation ( boolean aAllow ) <nl> + public final void setAllowSamelineParametrizedAnnotation ( boolean allow ) <nl> { <nl> - mAllowSamelineParametrizedAnnotation = aAllow ; <nl> + allowSamelineParametrizedAnnotation = allow ; <nl> } <nl> <nl> / * * <nl> * Some javadoc . <nl> - * @ param aAllow Some javadoc . <nl> + * @ param allow Some javadoc . <nl> * / <nl> - public final void setAllowSamelineMultipleAnnotations ( boolean aAllow ) <nl> + public final void setAllowSamelineMultipleAnnotations ( boolean allow ) <nl> { <nl> - mAllowSamelineMultipleAnnotations = aAllow ; <nl> + allowSamelineMultipleAnnotations = allow ; <nl> } <nl> <nl> @ Override <nl> @ @ - 180 , 9 + 180 , 9 @ @ public class AnnotationLocationCheck extends Check <nl> } <nl> <nl> @ Override <nl> - public void visitToken ( DetailAST aAST ) <nl> + public void visitToken ( DetailAST ast ) <nl> { <nl> - final DetailAST modifiersNode = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + final DetailAST modifiersNode = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> <nl> if ( hasAnnotations ( modifiersNode ) ) { <nl> checkAnnotations ( modifiersNode , getAnnotationLevel ( modifiersNode ) ) ; <nl> @ @ - 191 , 12 + 191 , 12 @ @ public class AnnotationLocationCheck extends Check <nl> <nl> / * * <nl> * Some javadoc . <nl> - * @ param aModifierNode Some javadoc . <nl> - * @ param aCorrectLevel Some javadoc . <nl> + * @ param modifierNode Some javadoc . <nl> + * @ param correctLevel Some javadoc . <nl> * / <nl> - private void checkAnnotations ( DetailAST aModifierNode , int aCorrectLevel ) <nl> + private void checkAnnotations ( DetailAST modifierNode , int correctLevel ) <nl> { <nl> - DetailAST annotation = aModifierNode . getFirstChild ( ) ; <nl> + DetailAST annotation = modifierNode . getFirstChild ( ) ; <nl> <nl> while ( annotation ! = null & & annotation . getType ( ) = = TokenTypes . ANNOTATION ) { <nl> final boolean hasParameters = isParameterized ( annotation ) ; <nl> @ @ - 205 , 9 + 205 , 9 @ @ public class AnnotationLocationCheck extends Check <nl> log ( annotation . getLineNo ( ) , <nl> MSG _ KEY _ ANNOTATION _ LOCATION _ ALONE , getAnnotationName ( annotation ) ) ; <nl> } <nl> - else if ( annotation . getColumnNo ( ) ! = aCorrectLevel & & ! hasNodeBefore ( annotation ) ) { <nl> + else if ( annotation . getColumnNo ( ) ! = correctLevel & & ! hasNodeBefore ( annotation ) ) { <nl> log ( annotation . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ LOCATION , <nl> - getAnnotationName ( annotation ) , annotation . getColumnNo ( ) , aCorrectLevel ) ; <nl> + getAnnotationName ( annotation ) , annotation . getColumnNo ( ) , correctLevel ) ; <nl> } <nl> annotation = annotation . getNextSibling ( ) ; <nl> } <nl> @ @ - 215 , 45 + 215 , 45 @ @ public class AnnotationLocationCheck extends Check <nl> <nl> / * * <nl> * Some javadoc . <nl> - * @ param aAnnotation Some javadoc . <nl> - * @ param aHasParams Some javadoc . <nl> + * @ param annotation Some javadoc . <nl> + * @ param hasParams Some javadoc . <nl> * @ return Some javadoc . <nl> * / <nl> - private boolean isCorrectLocation ( DetailAST aAnnotation , boolean aHasParams ) <nl> + private boolean isCorrectLocation ( DetailAST annotation , boolean hasParams ) <nl> { <nl> - final boolean allowingCondition = aHasParams ? mAllowSamelineParametrizedAnnotation <nl> - : mAllowSamelineSingleParameterlessAnnotation ; <nl> - return allowingCondition & & ! hasNodeBefore ( aAnnotation ) <nl> - | | ! allowingCondition & & ! hasNodeBeside ( aAnnotation ) <nl> - | | mAllowSamelineMultipleAnnotations ; <nl> + final boolean allowingCondition = hasParams ? allowSamelineParametrizedAnnotation <nl> + : allowSamelineSingleParameterlessAnnotation ; <nl> + return allowingCondition & & ! hasNodeBefore ( annotation ) <nl> + | | ! allowingCondition & & ! hasNodeBeside ( annotation ) <nl> + | | allowSamelineMultipleAnnotations ; <nl> } <nl> <nl> / * * <nl> * Some javadoc . <nl> - * @ param aAnnotation Some javadoc . <nl> + * @ param annotation Some javadoc . <nl> * @ return Some javadoc . <nl> * / <nl> - private static String getAnnotationName ( DetailAST aAnnotation ) <nl> + private static String getAnnotationName ( DetailAST annotation ) <nl> { <nl> - DetailAST idenNode = aAnnotation . findFirstToken ( TokenTypes . IDENT ) ; <nl> + DetailAST idenNode = annotation . findFirstToken ( TokenTypes . IDENT ) ; <nl> if ( idenNode = = null ) { <nl> - idenNode = aAnnotation . findFirstToken ( TokenTypes . DOT ) . findFirstToken ( TokenTypes . IDENT ) ; <nl> + idenNode = annotation . findFirstToken ( TokenTypes . DOT ) . findFirstToken ( TokenTypes . IDENT ) ; <nl> } <nl> return idenNode . getText ( ) ; <nl> } <nl> <nl> / * * <nl> * Some javadoc . <nl> - * @ param aAnnotation Some javadoc . <nl> + * @ param annotation Some javadoc . <nl> * @ return Some javadoc . <nl> * / <nl> - private static boolean hasNodeAfter ( DetailAST aAnnotation ) <nl> + private static boolean hasNodeAfter ( DetailAST annotation ) <nl> { <nl> - final int annotationLineNo = aAnnotation . getLineNo ( ) ; <nl> - DetailAST nextNode = aAnnotation . getNextSibling ( ) ; <nl> + final int annotationLineNo = annotation . getLineNo ( ) ; <nl> + DetailAST nextNode = annotation . getNextSibling ( ) ; <nl> <nl> if ( nextNode = = null ) { <nl> - nextNode = aAnnotation . getParent ( ) . getNextSibling ( ) ; <nl> + nextNode = annotation . getParent ( ) . getNextSibling ( ) ; <nl> } <nl> <nl> return nextNode ! = null & & annotationLineNo = = nextNode . getLineNo ( ) ; <nl> @ @ - 261 , 54 + 261 , 54 @ @ public class AnnotationLocationCheck extends Check <nl> <nl> / * * <nl> * Some javadoc . <nl> - * @ param aAnnotation Some javadoc . <nl> + * @ param annotation Some javadoc . <nl> * @ return Some javadoc . <nl> * / <nl> - private static boolean hasNodeBefore ( DetailAST aAnnotation ) <nl> + private static boolean hasNodeBefore ( DetailAST annotation ) <nl> { <nl> - final int annotationLineNo = aAnnotation . getLineNo ( ) ; <nl> - final DetailAST previousNode = aAnnotation . getPreviousSibling ( ) ; <nl> + final int annotationLineNo = annotation . getLineNo ( ) ; <nl> + final DetailAST previousNode = annotation . getPreviousSibling ( ) ; <nl> <nl> return previousNode ! = null & & annotationLineNo = = previousNode . getLineNo ( ) ; <nl> } <nl> <nl> / * * <nl> * Some javadoc . <nl> - * @ param aAnnotation Some javadoc . <nl> + * @ param annotation Some javadoc . <nl> * @ return Some javadoc . <nl> * / <nl> - private static boolean hasNodeBeside ( DetailAST aAnnotation ) <nl> + private static boolean hasNodeBeside ( DetailAST annotation ) <nl> { <nl> - return hasNodeBefore ( aAnnotation ) | | hasNodeAfter ( aAnnotation ) ; <nl> + return hasNodeBefore ( annotation ) | | hasNodeAfter ( annotation ) ; <nl> } <nl> <nl> / * * <nl> * Some javadoc . <nl> - * @ param aModifierNode Some javadoc . <nl> + * @ param modifierNode Some javadoc . <nl> * @ return Some javadoc . <nl> * / <nl> - private static int getAnnotationLevel ( DetailAST aModifierNode ) <nl> + private static int getAnnotationLevel ( DetailAST modifierNode ) <nl> { <nl> - return aModifierNode . getParent ( ) . getColumnNo ( ) ; <nl> + return modifierNode . getParent ( ) . getColumnNo ( ) ; <nl> } <nl> <nl> / * * <nl> * Some javadoc . <nl> - * @ param aAnnotation Some javadoc . <nl> + * @ param annotation Some javadoc . <nl> * @ return Some javadoc . <nl> * / <nl> - private static boolean isParameterized ( DetailAST aAnnotation ) <nl> + private static boolean isParameterized ( DetailAST annotation ) <nl> { <nl> - return aAnnotation . findFirstToken ( TokenTypes . EXPR ) ! = null ; <nl> + return annotation . findFirstToken ( TokenTypes . EXPR ) ! = null ; <nl> } <nl> <nl> / * * <nl> * Some javadoc . <nl> - * @ param aModifierNode Some javadoc . <nl> + * @ param modifierNode Some javadoc . <nl> * @ return Some javadoc . <nl> * / <nl> - private static boolean hasAnnotations ( DetailAST aModifierNode ) <nl> + private static boolean hasAnnotations ( DetailAST modifierNode ) <nl> { <nl> - return aModifierNode . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ; <nl> + return modifierNode . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> index 4d54bf6 . . edcfea2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java <nl> @ @ - 164 , 63 + 164 , 63 @ @ public final class AnnotationUseStyleCheck extends Check <nl> / / has more than one option type . <nl> <nl> / * * @ see # setElementStyle ( String ) * / <nl> - private ElementStyle mStyle = ElementStyle . COMPACT _ NO _ ARRAY ; <nl> + private ElementStyle style = ElementStyle . COMPACT _ NO _ ARRAY ; <nl> <nl> / / defaulting to NEVER because of the strange compiler behavior <nl> / * * @ see # setTrailingArrayComma ( String ) * / <nl> - private TrailingArrayComma mComma = TrailingArrayComma . NEVER ; <nl> + private TrailingArrayComma comma = TrailingArrayComma . NEVER ; <nl> <nl> / * * @ see # setClosingParens ( String ) * / <nl> - private ClosingParens mParens = ClosingParens . NEVER ; <nl> + private ClosingParens parens = ClosingParens . NEVER ; <nl> <nl> / * * <nl> * Sets the ElementStyle from a string . <nl> * <nl> - * @ param aStyle string representation <nl> + * @ param style string representation <nl> * @ throws ConversionException if cannot convert string . <nl> * / <nl> - public void setElementStyle ( final String aStyle ) <nl> + public void setElementStyle ( final String style ) <nl> { <nl> - this . mStyle = this . getOption ( ElementStyle . class , aStyle ) ; <nl> + this . style = this . getOption ( ElementStyle . class , style ) ; <nl> } <nl> <nl> / * * <nl> * Sets the TrailingArrayComma from a string . <nl> * <nl> - * @ param aComma string representation <nl> + * @ param comma string representation <nl> * @ throws ConversionException if cannot convert string . <nl> * / <nl> - public void setTrailingArrayComma ( final String aComma ) <nl> + public void setTrailingArrayComma ( final String comma ) <nl> { <nl> - this . mComma = this . getOption ( TrailingArrayComma . class , aComma ) ; <nl> + this . comma = this . getOption ( TrailingArrayComma . class , comma ) ; <nl> } <nl> <nl> / * * <nl> * Sets the ClosingParens from a string . <nl> * <nl> - * @ param aParens string representation <nl> + * @ param parens string representation <nl> * @ throws ConversionException if cannot convert string . <nl> * / <nl> - public void setClosingParens ( final String aParens ) <nl> + public void setClosingParens ( final String parens ) <nl> { <nl> - this . mParens = this . getOption ( ClosingParens . class , aParens ) ; <nl> + this . parens = this . getOption ( ClosingParens . class , parens ) ; <nl> } <nl> <nl> / * * <nl> * Retrieves an { @ link Enum Enum } type from a @ { link String String } . <nl> * @ param < T > the enum type <nl> - * @ param aEnumClass the enum class <nl> - * @ param aString the string representing the enum <nl> + * @ param enuclass the enum class <nl> + * @ param string the string representing the enum <nl> * @ return the enum type <nl> * / <nl> - private < T extends Enum < T > > T getOption ( final Class < T > aEnumClass , <nl> - final String aString ) <nl> + private < T extends Enum < T > > T getOption ( final Class < T > enuclass , <nl> + final String string ) <nl> { <nl> try { <nl> - return Enum . valueOf ( aEnumClass , aString . trim ( ) . toUpperCase ( ) ) ; <nl> + return Enum . valueOf ( enuclass , string . trim ( ) . toUpperCase ( ) ) ; <nl> } <nl> catch ( final IllegalArgumentException iae ) { <nl> - throw new ConversionException ( " unable to parse " + aString , iae ) ; <nl> + throw new ConversionException ( " unable to parse " + string , iae ) ; <nl> } <nl> } <nl> <nl> @ @ - 249 , 11 + 249 , 11 @ @ public final class AnnotationUseStyleCheck extends Check <nl> <nl> / * * { @ inheritDoc } * / <nl> @ Override <nl> - public void visitToken ( final DetailAST aAST ) <nl> + public void visitToken ( final DetailAST ast ) <nl> { <nl> - this . checkStyleType ( aAST ) ; <nl> - this . checkCheckClosingParens ( aAST ) ; <nl> - this . checkTrailingComma ( aAST ) ; <nl> + this . checkStyleType ( ast ) ; <nl> + this . checkCheckClosingParens ( ast ) ; <nl> + this . checkTrailingComma ( ast ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 261 , 41 + 261 , 41 @ @ public final class AnnotationUseStyleCheck extends Check <nl> * { @ link ElementStyle AnnotationElementStyle } <nl> * is correct . <nl> * <nl> - * @ param aAnnotation the annotation token <nl> + * @ param annotation the annotation token <nl> * / <nl> - private void checkStyleType ( final DetailAST aAnnotation ) <nl> + private void checkStyleType ( final DetailAST annotation ) <nl> { <nl> - if ( ElementStyle . IGNORE . equals ( this . mStyle ) <nl> - | | this . mStyle = = null ) <nl> + if ( ElementStyle . IGNORE . equals ( this . style ) <nl> + | | this . style = = null ) <nl> { <nl> return ; <nl> } <nl> <nl> - if ( ElementStyle . COMPACT _ NO _ ARRAY . equals ( this . mStyle ) ) { <nl> - this . checkCompactNoArrayStyle ( aAnnotation ) ; <nl> + if ( ElementStyle . COMPACT _ NO _ ARRAY . equals ( this . style ) ) { <nl> + this . checkCompactNoArrayStyle ( annotation ) ; <nl> } <nl> - else if ( ElementStyle . COMPACT . equals ( this . mStyle ) ) { <nl> - this . checkCompactStyle ( aAnnotation ) ; <nl> + else if ( ElementStyle . COMPACT . equals ( this . style ) ) { <nl> + this . checkCompactStyle ( annotation ) ; <nl> } <nl> - else if ( ElementStyle . EXPANDED . equals ( this . mStyle ) ) { <nl> - this . checkExpandedStyle ( aAnnotation ) ; <nl> + else if ( ElementStyle . EXPANDED . equals ( this . style ) ) { <nl> + this . checkExpandedStyle ( annotation ) ; <nl> } <nl> } <nl> <nl> / * * <nl> * Checks for expanded style type violations . <nl> * <nl> - * @ param aAnnotation the annotation token <nl> + * @ param annotation the annotation token <nl> * / <nl> - private void checkExpandedStyle ( final DetailAST aAnnotation ) <nl> + private void checkExpandedStyle ( final DetailAST annotation ) <nl> { <nl> final int valuePairCount = <nl> - aAnnotation . getChildCount ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; <nl> + annotation . getChildCount ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; <nl> <nl> if ( valuePairCount = = 0 <nl> - & & aAnnotation . branchContains ( TokenTypes . EXPR ) ) <nl> + & & annotation . branchContains ( TokenTypes . EXPR ) ) <nl> { <nl> - this . log ( aAnnotation . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ INCORRECT _ STYLE , <nl> + this . log ( annotation . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ INCORRECT _ STYLE , <nl> ElementStyle . EXPANDED ) ; <nl> } <nl> } <nl> @ @ - 303 , 23 + 303 , 23 @ @ public final class AnnotationUseStyleCheck extends Check <nl> / * * <nl> * Checks for compact style type violations . <nl> * <nl> - * @ param aAnnotation the annotation token <nl> + * @ param annotation the annotation token <nl> * / <nl> - private void checkCompactStyle ( final DetailAST aAnnotation ) <nl> + private void checkCompactStyle ( final DetailAST annotation ) <nl> { <nl> final int valuePairCount = <nl> - aAnnotation . getChildCount ( <nl> + annotation . getChildCount ( <nl> TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; <nl> <nl> final DetailAST valuePair = <nl> - aAnnotation . findFirstToken ( <nl> + annotation . findFirstToken ( <nl> TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; <nl> <nl> if ( valuePairCount = = 1 <nl> & & AnnotationUseStyleCheck . ANNOTATION _ ELEMENT _ SINGLE _ NAME . equals ( <nl> valuePair . getFirstChild ( ) . getText ( ) ) ) <nl> { <nl> - this . log ( aAnnotation . getLineNo ( ) , " annotation . incorrect . style " , <nl> + this . log ( annotation . getLineNo ( ) , " annotation . incorrect . style " , <nl> ElementStyle . COMPACT ) ; <nl> } <nl> } <nl> @ @ - 327 , 24 + 327 , 24 @ @ public final class AnnotationUseStyleCheck extends Check <nl> / * * <nl> * Checks for compact no array style type violations . <nl> * <nl> - * @ param aAnnotation the annotation token <nl> + * @ param annotation the annotation token <nl> * / <nl> - private void checkCompactNoArrayStyle ( final DetailAST aAnnotation ) <nl> + private void checkCompactNoArrayStyle ( final DetailAST annotation ) <nl> { <nl> final DetailAST arrayInit = <nl> - aAnnotation . findFirstToken ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) ; <nl> + annotation . findFirstToken ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) ; <nl> <nl> final int valuePairCount = <nl> - aAnnotation . getChildCount ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; <nl> + annotation . getChildCount ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; <nl> <nl> final DetailAST valuePair = <nl> - aAnnotation . findFirstToken ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; <nl> + annotation . findFirstToken ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; <nl> <nl> / / in compact style with one value <nl> if ( arrayInit ! = null <nl> & & arrayInit . getChildCount ( TokenTypes . EXPR ) = = 1 ) <nl> { <nl> - this . log ( aAnnotation . getLineNo ( ) , " annotation . incorrect . style " , <nl> + this . log ( annotation . getLineNo ( ) , " annotation . incorrect . style " , <nl> ElementStyle . COMPACT _ NO _ ARRAY ) ; <nl> } <nl> / / in expanded style with one value and the correct element name <nl> @ @ - 358 , 7 + 358 , 7 @ @ public final class AnnotationUseStyleCheck extends Check <nl> valuePair . getFirstChild ( ) . getText ( ) ) <nl> & & nestedArrayInit . getChildCount ( TokenTypes . EXPR ) = = 1 ) <nl> { <nl> - this . log ( aAnnotation . getLineNo ( ) , " annotation . incorrect . style " , <nl> + this . log ( annotation . getLineNo ( ) , " annotation . incorrect . style " , <nl> ElementStyle . COMPACT _ NO _ ARRAY ) ; <nl> } <nl> } <nl> @ @ - 368 , 17 + 368 , 17 @ @ public final class AnnotationUseStyleCheck extends Check <nl> * Checks to see if the trailing comma is present if required or <nl> * prohibited . <nl> * <nl> - * @ param aAnnotation the annotation token <nl> + * @ param annotation the annotation token <nl> * / <nl> - private void checkTrailingComma ( final DetailAST aAnnotation ) <nl> + private void checkTrailingComma ( final DetailAST annotation ) <nl> { <nl> - if ( TrailingArrayComma . IGNORE . equals ( this . mComma ) <nl> - | | this . mComma = = null ) <nl> + if ( TrailingArrayComma . IGNORE . equals ( this . comma ) <nl> + | | this . comma = = null ) <nl> { <nl> return ; <nl> } <nl> <nl> - DetailAST child = aAnnotation . getFirstChild ( ) ; <nl> + DetailAST child = annotation . getFirstChild ( ) ; <nl> <nl> while ( child ! = null ) { <nl> DetailAST arrayInit = null ; <nl> @ @ - 403 , 23 + 403 , 23 @ @ public final class AnnotationUseStyleCheck extends Check <nl> / * * <nl> * logs a trailing array comma violation if one exists . <nl> * <nl> - * @ param aAST the array init <nl> + * @ param ast the array init <nl> * { @ link TokenTypes # ANNOTATION _ ARRAY _ INIT ANNOTATION _ ARRAY _ INIT } . <nl> * / <nl> - private void logCommaViolation ( final DetailAST aAST ) <nl> + private void logCommaViolation ( final DetailAST ast ) <nl> { <nl> - final DetailAST rCurly = aAST . findFirstToken ( TokenTypes . RCURLY ) ; <nl> + final DetailAST rCurly = ast . findFirstToken ( TokenTypes . RCURLY ) ; <nl> <nl> / / comma can be null if array is empty <nl> final DetailAST comma = rCurly . getPreviousSibling ( ) ; <nl> <nl> - if ( TrailingArrayComma . ALWAYS . equals ( this . mComma ) <nl> + if ( TrailingArrayComma . ALWAYS . equals ( this . comma ) <nl> & & ( comma = = null | | comma . getType ( ) ! = TokenTypes . COMMA ) ) <nl> { <nl> this . log ( rCurly . getLineNo ( ) , <nl> rCurly . getColumnNo ( ) , MSG _ KEY _ ANNOTATION _ TRAILING _ COMMA _ MISSING ) ; <nl> } <nl> - else if ( TrailingArrayComma . NEVER . equals ( this . mComma ) <nl> + else if ( TrailingArrayComma . NEVER . equals ( this . comma ) <nl> & & comma ! = null & & comma . getType ( ) = = TokenTypes . COMMA ) <nl> { <nl> this . log ( comma . getLineNo ( ) , <nl> @ @ - 431 , 31 + 431 , 31 @ @ public final class AnnotationUseStyleCheck extends Check <nl> * Checks to see if the closing parenthesis are present if required or <nl> * prohibited . <nl> * <nl> - * @ param aAST the annotation token <nl> + * @ param ast the annotation token <nl> * / <nl> - private void checkCheckClosingParens ( final DetailAST aAST ) <nl> + private void checkCheckClosingParens ( final DetailAST ast ) <nl> { <nl> - if ( ClosingParens . IGNORE . equals ( this . mParens ) <nl> - | | this . mParens = = null ) <nl> + if ( ClosingParens . IGNORE . equals ( this . parens ) <nl> + | | this . parens = = null ) <nl> { <nl> return ; <nl> } <nl> <nl> - final DetailAST paren = aAST . getLastChild ( ) ; <nl> + final DetailAST paren = ast . getLastChild ( ) ; <nl> final boolean parenExists = paren . getType ( ) = = TokenTypes . RPAREN ; <nl> <nl> - if ( ClosingParens . ALWAYS . equals ( this . mParens ) <nl> + if ( ClosingParens . ALWAYS . equals ( this . parens ) <nl> & & ! parenExists ) <nl> { <nl> - this . log ( aAST . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ PARENS _ MISSING ) ; <nl> + this . log ( ast . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ PARENS _ MISSING ) ; <nl> } <nl> - else if ( ClosingParens . NEVER . equals ( this . mParens ) <nl> - & & ! aAST . branchContains ( TokenTypes . EXPR ) <nl> - & & ! aAST . branchContains ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) <nl> - & & ! aAST . branchContains ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) <nl> + else if ( ClosingParens . NEVER . equals ( this . parens ) <nl> + & & ! ast . branchContains ( TokenTypes . EXPR ) <nl> + & & ! ast . branchContains ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) <nl> + & & ! ast . branchContains ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) <nl> & & parenExists ) <nl> { <nl> - this . log ( aAST . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) ; <nl> + this . log ( ast . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java <nl> index ee8be2c . . 2fa8e2e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java <nl> @ @ - 142 , 39 + 142 , 39 @ @ public final class MissingDeprecatedCheck extends Check <nl> <nl> / * * { @ inheritDoc } * / <nl> @ Override <nl> - public void visitToken ( final DetailAST aAST ) <nl> + public void visitToken ( final DetailAST ast ) <nl> { <nl> final TextBlock javadoc = <nl> - this . getFileContents ( ) . getJavadocBefore ( aAST . getLineNo ( ) ) ; <nl> + this . getFileContents ( ) . getJavadocBefore ( ast . getLineNo ( ) ) ; <nl> <nl> final boolean containsAnnotation = <nl> - AnnotationUtility . containsAnnotation ( aAST , DEPRECATED ) <nl> - | | AnnotationUtility . containsAnnotation ( aAST , FQ _ DEPRECATED ) ; <nl> + AnnotationUtility . containsAnnotation ( ast , DEPRECATED ) <nl> + | | AnnotationUtility . containsAnnotation ( ast , FQ _ DEPRECATED ) ; <nl> <nl> final boolean containsJavadocTag = this . containsJavadocTag ( javadoc ) ; <nl> <nl> if ( containsAnnotation ^ containsJavadocTag ) { <nl> - this . log ( aAST . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ MISSING _ DEPRECATED ) ; <nl> + this . log ( ast . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ MISSING _ DEPRECATED ) ; <nl> } <nl> } <nl> <nl> / * * <nl> * Checks to see if the text block contains a deprecated tag . <nl> * <nl> - * @ param aJavadoc the javadoc of the AST <nl> + * @ param javadoc the javadoc of the AST <nl> * @ return true if contains the tag <nl> * / <nl> - private boolean containsJavadocTag ( final TextBlock aJavadoc ) <nl> + private boolean containsJavadocTag ( final TextBlock javadoc ) <nl> { <nl> - if ( aJavadoc = = null ) { <nl> + if ( javadoc = = null ) { <nl> return false ; <nl> } <nl> <nl> - final String [ ] lines = aJavadoc . getText ( ) ; <nl> + final String [ ] lines = javadoc . getText ( ) ; <nl> <nl> boolean found = false ; <nl> <nl> - int currentLine = aJavadoc . getStartLineNo ( ) - 1 ; <nl> + int currentLine = javadoc . getStartLineNo ( ) - 1 ; <nl> <nl> for ( int i = 0 ; i < lines . length ; i + + ) { <nl> currentLine + + ; <nl> @ @ - 199 , 15 + 199 , 15 @ @ public final class MissingDeprecatedCheck extends Check <nl> / / Javadoc ) , ' @ ' ( start of next tag ) , or anything that ' s <nl> / / not whitespace or ' * ' characters . <nl> <nl> - for ( int remIndex = i + 1 ; <nl> - remIndex < lines . length ; remIndex + + ) <nl> + for ( int reindex = i + 1 ; <nl> + reindex < lines . length ; reindex + + ) <nl> { <nl> final Matcher multilineCont = <nl> MissingDeprecatedCheck . MATCH _ DEPRECATED _ MULTILINE _ CONT <nl> - . matcher ( lines [ remIndex ] ) ; <nl> + . matcher ( lines [ reindex ] ) ; <nl> <nl> if ( multilineCont . find ( ) ) { <nl> - remIndex = lines . length ; <nl> + reindex = lines . length ; <nl> final String lFin = multilineCont . group ( 1 ) ; <nl> if ( ! lFin . equals ( MissingDeprecatedCheck . NEXT _ TAG ) <nl> & & ! lFin . equals ( MissingDeprecatedCheck . END _ JAVADOC ) ) <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java <nl> index 2d3a4ac . . 310e815 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java <nl> @ @ - 100 , 7 + 100 , 7 @ @ public final class MissingOverrideCheck extends Check <nl> " annotation . missing . override " ; <nl> <nl> / * * @ see # setJavaFiveCompatibility ( boolean ) * / <nl> - private boolean mJavaFiveCompatibility ; <nl> + private boolean javaFiveCompatibility ; <nl> <nl> / * * <nl> * Sets Java 5 compatibility mode . <nl> @ @ - 116 , 11 + 116 , 11 @ @ public final class MissingOverrideCheck extends Check <nl> * false to turn off Java 5 compatibility mode . <nl> * < / p > <nl> * <nl> - * @ param aCompatibility compatibility or not <nl> + * @ param compatibility compatibility or not <nl> * / <nl> - public void setJavaFiveCompatibility ( final boolean aCompatibility ) <nl> + public void setJavaFiveCompatibility ( final boolean compatibility ) <nl> { <nl> - this . mJavaFiveCompatibility = aCompatibility ; <nl> + this . javaFiveCompatibility = compatibility ; <nl> } <nl> <nl> / * * { @ inheritDoc } * / <nl> @ @ - 147 , 21 + 147 , 21 @ @ public final class MissingOverrideCheck extends Check <nl> <nl> / * * { @ inheritDoc } * / <nl> @ Override <nl> - public void visitToken ( final DetailAST aAST ) <nl> + public void visitToken ( final DetailAST ast ) <nl> { <nl> final TextBlock javadoc = <nl> - this . getFileContents ( ) . getJavadocBefore ( aAST . getLineNo ( ) ) ; <nl> + this . getFileContents ( ) . getJavadocBefore ( ast . getLineNo ( ) ) ; <nl> <nl> <nl> - final boolean containsTag = this . containsJavadocTag ( javadoc ) ; <nl> - if ( containsTag & & ! JavadocTagInfo . INHERIT _ DOC . isValidOn ( aAST ) ) { <nl> - this . log ( aAST . getLineNo ( ) , MSG _ KEY _ TAG _ NOT _ VALID _ ON , <nl> + final boolean containastag = this . containsJavadocTag ( javadoc ) ; <nl> + if ( containastag & & ! JavadocTagInfo . INHERIT _ DOC . isValidOn ( ast ) ) { <nl> + this . log ( ast . getLineNo ( ) , MSG _ KEY _ TAG _ NOT _ VALID _ ON , <nl> JavadocTagInfo . INHERIT _ DOC . getText ( ) ) ; <nl> return ; <nl> } <nl> <nl> - if ( this . mJavaFiveCompatibility ) { <nl> - final DetailAST defOrNew = aAST . getParent ( ) . getParent ( ) ; <nl> + if ( this . javaFiveCompatibility ) { <nl> + final DetailAST defOrNew = ast . getParent ( ) . getParent ( ) ; <nl> <nl> if ( defOrNew . branchContains ( TokenTypes . EXTENDS _ CLAUSE ) <nl> | | defOrNew . branchContains ( TokenTypes . IMPLEMENTS _ CLAUSE ) <nl> @ @ - 171 , 27 + 171 , 27 @ @ public final class MissingOverrideCheck extends Check <nl> } <nl> } <nl> <nl> - if ( containsTag <nl> - & & ( ! AnnotationUtility . containsAnnotation ( aAST , OVERRIDE ) <nl> - & & ! AnnotationUtility . containsAnnotation ( aAST , FQ _ OVERRIDE ) ) ) <nl> + if ( containastag <nl> + & & ( ! AnnotationUtility . containsAnnotation ( ast , OVERRIDE ) <nl> + & & ! AnnotationUtility . containsAnnotation ( ast , FQ _ OVERRIDE ) ) ) <nl> { <nl> - this . log ( aAST . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ MISSING _ OVERRIDE ) ; <nl> + this . log ( ast . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ MISSING _ OVERRIDE ) ; <nl> } <nl> } <nl> <nl> / * * <nl> * Checks to see if the text block contains a inheritDoc tag . <nl> * <nl> - * @ param aJavadoc the javadoc of the AST <nl> + * @ param javadoc the javadoc of the AST <nl> * @ return true if contains the tag <nl> * / <nl> - private boolean containsJavadocTag ( final TextBlock aJavadoc ) <nl> + private boolean containsJavadocTag ( final TextBlock javadoc ) <nl> { <nl> - if ( aJavadoc = = null ) { <nl> + if ( javadoc = = null ) { <nl> return false ; <nl> } <nl> <nl> - final String [ ] lines = aJavadoc . getText ( ) ; <nl> + final String [ ] lines = javadoc . getText ( ) ; <nl> <nl> for ( final String line : lines ) { <nl> final Matcher matchInheritDoc = <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java <nl> index 7ba420c . . 87a94eb 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java <nl> @ @ - 71 , 15 + 71 , 15 @ @ public class PackageAnnotationCheck extends Check <nl> <nl> / * * { @ inheritDoc } * / <nl> @ Override <nl> - public void visitToken ( final DetailAST aAST ) <nl> + public void visitToken ( final DetailAST ast ) <nl> { <nl> final boolean containsAnnotation = <nl> - AnnotationUtility . containsAnnotation ( aAST ) ; <nl> + AnnotationUtility . containsAnnotation ( ast ) ; <nl> final boolean inPackageInfo = <nl> this . getFileContents ( ) . inPackageInfo ( ) ; <nl> <nl> if ( containsAnnotation & & ! inPackageInfo ) { <nl> - this . log ( aAST . getLine ( ) , " annotation . package . location " ) ; <nl> + this . log ( ast . getLine ( ) , " annotation . package . location " ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> index a4d7c4f . . c77e481 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> @ @ - 139 , 9 + 139 , 9 @ @ public class SuppressWarningsCheck extends AbstractFormatCheck <nl> <nl> / * * { @ inheritDoc } * / <nl> @ Override <nl> - public void visitToken ( final DetailAST aAST ) <nl> + public void visitToken ( final DetailAST ast ) <nl> { <nl> - final DetailAST annotation = this . getSuppressWarnings ( aAST ) ; <nl> + final DetailAST annotation = this . getSuppressWarnings ( ast ) ; <nl> <nl> if ( annotation = = null ) { <nl> return ; <nl> @ @ - 196 , 47 + 196 , 47 @ @ public class SuppressWarningsCheck extends AbstractFormatCheck <nl> * that is annotating the AST . If the annotation does not exist <nl> * this method will return { @ code null } . <nl> * <nl> - * @ param aAST the AST <nl> + * @ param ast the AST <nl> * @ return the { @ link SuppressWarnings SuppressWarnings } annotation <nl> * / <nl> - private DetailAST getSuppressWarnings ( DetailAST aAST ) <nl> + private DetailAST getSuppressWarnings ( DetailAST ast ) <nl> { <nl> final DetailAST annotation = AnnotationUtility . getAnnotation ( <nl> - aAST , SuppressWarningsCheck . SUPPRESS _ WARNINGS ) ; <nl> + ast , SuppressWarningsCheck . SUPPRESS _ WARNINGS ) ; <nl> <nl> return ( annotation ! = null ) ? annotation <nl> : AnnotationUtility . getAnnotation ( <nl> - aAST , SuppressWarningsCheck . FQ _ SUPPRESS _ WARNINGS ) ; <nl> + ast , SuppressWarningsCheck . FQ _ SUPPRESS _ WARNINGS ) ; <nl> } <nl> <nl> / * * <nl> * This method looks for a warning that matches a configured expression . <nl> * If found it logs a violation at the given line and column number . <nl> * <nl> - * @ param aLineNo the line number <nl> - * @ param aColNum the column number <nl> - * @ param aWarningText the warning . <nl> + * @ param lineNo the line number <nl> + * @ param colNum the column number <nl> + * @ param warningText the warning . <nl> * / <nl> - private void logMatch ( final int aLineNo , <nl> - final int aColNum , final String aWarningText ) <nl> + private void logMatch ( final int lineNo , <nl> + final int colNum , final String warningText ) <nl> { <nl> - final Matcher matcher = this . getRegexp ( ) . matcher ( aWarningText ) ; <nl> + final Matcher matcher = this . getRegexp ( ) . matcher ( warningText ) ; <nl> if ( matcher . matches ( ) ) { <nl> - this . log ( aLineNo , aColNum , <nl> - MSG _ KEY _ SUPPRESSED _ WARNING _ NOT _ ALLOWED , aWarningText ) ; <nl> + this . log ( lineNo , colNum , <nl> + MSG _ KEY _ SUPPRESSED _ WARNING _ NOT _ ALLOWED , warningText ) ; <nl> } <nl> } <nl> <nl> / * * <nl> * Find the parent ( holder ) of the of the warnings ( Expr ) . <nl> * <nl> - * @ param aAnnotation the annotation <nl> + * @ param annotation the annotation <nl> * @ return a Token representing the expr . <nl> * / <nl> - private DetailAST findWarningsHolder ( final DetailAST aAnnotation ) <nl> + private DetailAST findWarningsHolder ( final DetailAST annotation ) <nl> { <nl> final DetailAST annValuePair = <nl> - aAnnotation . findFirstToken ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; <nl> + annotation . findFirstToken ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; <nl> final DetailAST annArrayInit ; <nl> <nl> if ( annValuePair ! = null ) { <nl> @ @ - 245 , 14 + 245 , 14 @ @ public class SuppressWarningsCheck extends AbstractFormatCheck <nl> } <nl> else { <nl> annArrayInit = <nl> - aAnnotation . findFirstToken ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) ; <nl> + annotation . findFirstToken ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) ; <nl> } <nl> <nl> if ( annArrayInit ! = null ) { <nl> return annArrayInit ; <nl> } <nl> <nl> - return aAnnotation ; <nl> + return annotation ; <nl> } <nl> <nl> / * * <nl> @ @ - 264 , 16 + 264 , 16 @ @ public class SuppressWarningsCheck extends AbstractFormatCheck <nl> * < br / > <nl> * Output String = unchecked <nl> * <nl> - * @ param aWarning the warning string <nl> + * @ param warning the warning string <nl> * @ return the string without two quotes <nl> * / <nl> - private String removeQuotes ( final String aWarning ) <nl> + private String removeQuotes ( final String warning ) <nl> { <nl> - assert aWarning ! = null : " the aWarning was null " ; <nl> - assert aWarning . charAt ( 0 ) = = ' " ' ; <nl> - assert aWarning . charAt ( aWarning . length ( ) - 1 ) = = ' " ' ; <nl> + assert warning ! = null : " the warning was null " ; <nl> + assert warning . charAt ( 0 ) = = ' " ' ; <nl> + assert warning . charAt ( warning . length ( ) - 1 ) = = ' " ' ; <nl> <nl> - return aWarning . substring ( 1 , aWarning . length ( ) - 1 ) ; <nl> + return warning . substring ( 1 , warning . length ( ) - 1 ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 281 , 47 + 281 , 47 @ @ public class SuppressWarningsCheck extends AbstractFormatCheck <nl> * and right sides , checking for matches and <nl> * logging violations . <nl> * <nl> - * @ param aCond a Conditional type <nl> + * @ param cond a Conditional type <nl> * { @ link TokenTypes # QUESTION QUESTION } <nl> * / <nl> - private void walkConditional ( final DetailAST aCond ) <nl> + private void walkConditional ( final DetailAST cond ) <nl> { <nl> - if ( aCond . getType ( ) ! = TokenTypes . QUESTION ) { <nl> + if ( cond . getType ( ) ! = TokenTypes . QUESTION ) { <nl> final String warningText = <nl> - this . removeQuotes ( aCond . getText ( ) ) ; <nl> - this . logMatch ( aCond . getLineNo ( ) , aCond . getColumnNo ( ) , warningText ) ; <nl> + this . removeQuotes ( cond . getText ( ) ) ; <nl> + this . logMatch ( cond . getLineNo ( ) , cond . getColumnNo ( ) , warningText ) ; <nl> return ; <nl> } <nl> <nl> - this . walkConditional ( this . getCondLeft ( aCond ) ) ; <nl> - this . walkConditional ( this . getCondRight ( aCond ) ) ; <nl> + this . walkConditional ( this . getCondLeft ( cond ) ) ; <nl> + this . walkConditional ( this . getCondRight ( cond ) ) ; <nl> } <nl> <nl> / * * <nl> * Retrieves the left side of a conditional . <nl> * <nl> - * @ param aCond aCond a conditional type <nl> + * @ param cond cond a conditional type <nl> * { @ link TokenTypes # QUESTION QUESTION } <nl> * @ return either the value <nl> * or another conditional <nl> * / <nl> - private DetailAST getCondLeft ( final DetailAST aCond ) <nl> + private DetailAST getCondLeft ( final DetailAST cond ) <nl> { <nl> - final DetailAST colon = aCond . findFirstToken ( TokenTypes . COLON ) ; <nl> + final DetailAST colon = cond . findFirstToken ( TokenTypes . COLON ) ; <nl> return colon . getPreviousSibling ( ) ; <nl> } <nl> <nl> / * * <nl> * Retrieves the right side of a conditional . <nl> * <nl> - * @ param aCond a conditional type <nl> + * @ param cond a conditional type <nl> * { @ link TokenTypes # QUESTION QUESTION } <nl> * @ return either the value <nl> * or another conditional <nl> * / <nl> - private DetailAST getCondRight ( final DetailAST aCond ) <nl> + private DetailAST getCondRight ( final DetailAST cond ) <nl> { <nl> - final DetailAST colon = aCond . findFirstToken ( TokenTypes . COLON ) ; <nl> + final DetailAST colon = cond . findFirstToken ( TokenTypes . COLON ) ; <nl> return colon . getNextSibling ( ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java 
 index 1fee601 . . 4e37b35 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / JavadocParseTreeTest . java 
 @ @ - 294 , 6 + 294 , 14 @ @ public class JavadocParseTreeTest { 
 compareTrees ( expectedTree , generatedTree ) ; 
 } 
 
 + @ Test 
 + public void testLeadingAsterisksExtended ( ) throws IOException { 
 + final String filename = getPath ( " InputLeadingAsterisksExtended . txt " ) ; 
 + final ParseTree generatedTree = parseJavadoc ( getFileContent ( new File ( filename ) ) ) ; 
 + final ParseTree expectedTree = ParseTreeBuilder . treeLeadingAsterisksExtended ( ) ; 
 + compareTrees ( expectedTree , generatedTree ) ; 
 + } 
 + 
 private void compareTrees ( ParseTree first , ParseTree second ) { 
 Assert . assertEquals ( first . toStringTree ( parser ) , second . toStringTree ( parser ) ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / ParseTreeBuilder . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / ParseTreeBuilder . java 
 index 699b858 . . 8c9592e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / ParseTreeBuilder . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / javadoc / ParseTreeBuilder . java 
 @ @ - 5794 , 4 + 5794 , 495 @ @ final class ParseTreeBuilder { 
 javadocContext0 . addChild ( eof0 ) ; 
 return javadocContext0 ; 
 } 
 + 
 + public static ParseTree treeLeadingAsterisksExtended ( ) { 
 + JavadocContext javadocContext0 = new JavadocContext ( null , 0 ) ; 
 + TextContext textContext0 = new TextContext ( javadocContext0 , 0 ) ; 
 + CommonToken ws0 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext0 . addChild ( ws0 ) ; 
 + javadocContext0 . addChild ( textContext0 ) ; 
 + CommonToken newline0 = new CommonToken ( JavadocTokenTypes . NEWLINE , LINE _ SEPARATOR ) ; 
 + javadocContext0 . addChild ( newline0 ) ; 
 + CommonToken leadingAsterisk0 = new CommonToken ( JavadocTokenTypes . LEADING _ ASTERISK , " * " ) ; 
 + javadocContext0 . addChild ( leadingAsterisk0 ) ; 
 + TextContext textContext1 = new TextContext ( javadocContext0 , 0 ) ; 
 + CommonToken ws1 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext1 . addChild ( ws1 ) ; 
 + CommonToken char0 = new CommonToken ( JavadocTokenTypes . CHAR , " C " ) ; 
 + textContext1 . addChild ( char0 ) ; 
 + CommonToken char1 = new CommonToken ( JavadocTokenTypes . CHAR , " h " ) ; 
 + textContext1 . addChild ( char1 ) ; 
 + CommonToken char2 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext1 . addChild ( char2 ) ; 
 + CommonToken char3 = new CommonToken ( JavadocTokenTypes . CHAR , " c " ) ; 
 + textContext1 . addChild ( char3 ) ; 
 + CommonToken char4 = new CommonToken ( JavadocTokenTypes . CHAR , " k " ) ; 
 + textContext1 . addChild ( char4 ) ; 
 + CommonToken char5 = new CommonToken ( JavadocTokenTypes . CHAR , " s " ) ; 
 + textContext1 . addChild ( char5 ) ; 
 + CommonToken ws2 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext1 . addChild ( ws2 ) ; 
 + CommonToken char6 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext1 . addChild ( char6 ) ; 
 + CommonToken char7 = new CommonToken ( JavadocTokenTypes . CHAR , " h " ) ; 
 + textContext1 . addChild ( char7 ) ; 
 + CommonToken char8 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; 
 + textContext1 . addChild ( char8 ) ; 
 + CommonToken char9 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext1 . addChild ( char9 ) ; 
 + CommonToken ws3 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext1 . addChild ( ws3 ) ; 
 + CommonToken char10 = new CommonToken ( JavadocTokenTypes . CHAR , " c " ) ; 
 + textContext1 . addChild ( char10 ) ; 
 + CommonToken char11 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; 
 + textContext1 . addChild ( char11 ) ; 
 + CommonToken char12 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; 
 + textContext1 . addChild ( char12 ) ; 
 + CommonToken char13 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; 
 + textContext1 . addChild ( char13 ) ; 
 + CommonToken char14 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext1 . addChild ( char14 ) ; 
 + CommonToken char15 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext1 . addChild ( char15 ) ; 
 + CommonToken char16 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext1 . addChild ( char16 ) ; 
 + CommonToken char17 = new CommonToken ( JavadocTokenTypes . CHAR , " C " ) ; 
 + textContext1 . addChild ( char17 ) ; 
 + CommonToken char18 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; 
 + textContext1 . addChild ( char18 ) ; 
 + CommonToken char19 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext1 . addChild ( char19 ) ; 
 + CommonToken char20 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext1 . addChild ( char20 ) ; 
 + CommonToken char21 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext1 . addChild ( char21 ) ; 
 + CommonToken char22 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext1 . addChild ( char22 ) ; 
 + CommonToken char23 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext1 . addChild ( char23 ) ; 
 + CommonToken ws4 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext1 . addChild ( ws4 ) ; 
 + CommonToken char24 = new CommonToken ( JavadocTokenTypes . CHAR , " s " ) ; 
 + textContext1 . addChild ( char24 ) ; 
 + CommonToken char25 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext1 . addChild ( char25 ) ; 
 + CommonToken char26 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; 
 + textContext1 . addChild ( char26 ) ; 
 + CommonToken char27 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; 
 + textContext1 . addChild ( char27 ) ; 
 + CommonToken char28 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext1 . addChild ( char28 ) ; 
 + CommonToken char29 = new CommonToken ( JavadocTokenTypes . CHAR , " s " ) ; 
 + textContext1 . addChild ( char29 ) ; 
 + CommonToken ws5 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext1 . addChild ( ws5 ) ; 
 + CommonToken char30 = new CommonToken ( JavadocTokenTypes . CHAR , " w " ) ; 
 + textContext1 . addChild ( char30 ) ; 
 + CommonToken char31 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; 
 + textContext1 . addChild ( char31 ) ; 
 + CommonToken char32 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext1 . addChild ( char32 ) ; 
 + CommonToken char33 = new CommonToken ( JavadocTokenTypes . CHAR , " h " ) ; 
 + textContext1 . addChild ( char33 ) ; 
 + CommonToken ws6 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext1 . addChild ( ws6 ) ; 
 + CommonToken char34 = new CommonToken ( JavadocTokenTypes . CHAR , " ' " ) ; 
 + textContext1 . addChild ( char34 ) ; 
 + CommonToken char35 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; 
 + textContext1 . addChild ( char35 ) ; 
 + CommonToken char36 = new CommonToken ( JavadocTokenTypes . CHAR , " ' " ) ; 
 + textContext1 . addChild ( char36 ) ; 
 + CommonToken ws7 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext1 . addChild ( ws7 ) ; 
 + CommonToken char37 = new CommonToken ( JavadocTokenTypes . CHAR , " j " ) ; 
 + textContext1 . addChild ( char37 ) ; 
 + CommonToken char38 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; 
 + textContext1 . addChild ( char38 ) ; 
 + CommonToken char39 = new CommonToken ( JavadocTokenTypes . CHAR , " v " ) ; 
 + textContext1 . addChild ( char39 ) ; 
 + CommonToken char40 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; 
 + textContext1 . addChild ( char40 ) ; 
 + CommonToken char41 = new CommonToken ( JavadocTokenTypes . CHAR , " d " ) ; 
 + textContext1 . addChild ( char41 ) ; 
 + CommonToken char42 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; 
 + textContext1 . addChild ( char42 ) ; 
 + CommonToken char43 = new CommonToken ( JavadocTokenTypes . CHAR , " c " ) ; 
 + textContext1 . addChild ( char43 ) ; 
 + CommonToken ws8 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext1 . addChild ( ws8 ) ; 
 + CommonToken char44 = new CommonToken ( JavadocTokenTypes . CHAR , " c " ) ; 
 + textContext1 . addChild ( char44 ) ; 
 + CommonToken char45 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; 
 + textContext1 . addChild ( char45 ) ; 
 + CommonToken char46 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; 
 + textContext1 . addChild ( char46 ) ; 
 + CommonToken char47 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; 
 + textContext1 . addChild ( char47 ) ; 
 + CommonToken char48 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext1 . addChild ( char48 ) ; 
 + CommonToken char49 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext1 . addChild ( char49 ) ; 
 + CommonToken char50 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext1 . addChild ( char50 ) ; 
 + CommonToken ws9 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext1 . addChild ( ws9 ) ; 
 + CommonToken char51 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; 
 + textContext1 . addChild ( char51 ) ; 
 + CommonToken char52 = new CommonToken ( JavadocTokenTypes . CHAR , " d " ) ; 
 + textContext1 . addChild ( char52 ) ; 
 + CommonToken char53 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext1 . addChild ( char53 ) ; 
 + CommonToken char54 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext1 . addChild ( char54 ) ; 
 + CommonToken char55 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext1 . addChild ( char55 ) ; 
 + CommonToken char56 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; 
 + textContext1 . addChild ( char56 ) ; 
 + CommonToken char57 = new CommonToken ( JavadocTokenTypes . CHAR , " f " ) ; 
 + textContext1 . addChild ( char57 ) ; 
 + CommonToken char58 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; 
 + textContext1 . addChild ( char58 ) ; 
 + CommonToken char59 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext1 . addChild ( char59 ) ; 
 + CommonToken char60 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; 
 + textContext1 . addChild ( char60 ) ; 
 + CommonToken char61 = new CommonToken ( JavadocTokenTypes . CHAR , " . " ) ; 
 + textContext1 . addChild ( char61 ) ; 
 + javadocContext0 . addChild ( textContext1 ) ; 
 + CommonToken newline1 = new CommonToken ( JavadocTokenTypes . NEWLINE , LINE _ SEPARATOR ) ; 
 + javadocContext0 . addChild ( newline1 ) ; 
 + CommonToken leadingAsterisk1 = new CommonToken ( JavadocTokenTypes . LEADING _ ASTERISK , " * " ) ; 
 + javadocContext0 . addChild ( leadingAsterisk1 ) ; 
 + TextContext textContext2 = new TextContext ( javadocContext0 , 0 ) ; 
 + CommonToken char62 = new CommonToken ( JavadocTokenTypes . CHAR , " & " ) ; 
 + textContext2 . addChild ( char62 ) ; 
 + CommonToken char63 = new CommonToken ( JavadocTokenTypes . CHAR , " l " ) ; 
 + textContext2 . addChild ( char63 ) ; 
 + CommonToken char64 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext2 . addChild ( char64 ) ; 
 + CommonToken char65 = new CommonToken ( JavadocTokenTypes . CHAR , " ; " ) ; 
 + textContext2 . addChild ( char65 ) ; 
 + CommonToken char66 = new CommonToken ( JavadocTokenTypes . CHAR , " p " ) ; 
 + textContext2 . addChild ( char66 ) ; 
 + CommonToken char67 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; 
 + textContext2 . addChild ( char67 ) ; 
 + CommonToken char68 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; 
 + textContext2 . addChild ( char68 ) ; 
 + CommonToken char69 = new CommonToken ( JavadocTokenTypes . CHAR , " p " ) ; 
 + textContext2 . addChild ( char69 ) ; 
 + CommonToken char70 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext2 . addChild ( char70 ) ; 
 + CommonToken char71 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; 
 + textContext2 . addChild ( char71 ) ; 
 + CommonToken char72 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext2 . addChild ( char72 ) ; 
 + CommonToken char73 = new CommonToken ( JavadocTokenTypes . CHAR , " y " ) ; 
 + textContext2 . addChild ( char73 ) ; 
 + CommonToken ws10 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext2 . addChild ( ws10 ) ; 
 + CommonToken char74 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext2 . addChild ( char74 ) ; 
 + CommonToken char75 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; 
 + textContext2 . addChild ( char75 ) ; 
 + CommonToken char76 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; 
 + textContext2 . addChild ( char76 ) ; 
 + CommonToken char77 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext2 . addChild ( char77 ) ; 
 + CommonToken char78 = new CommonToken ( JavadocTokenTypes . CHAR , " = " ) ; 
 + textContext2 . addChild ( char78 ) ; 
 + CommonToken char79 = new CommonToken ( JavadocTokenTypes . CHAR , " \ " " ) ; 
 + textContext2 . addChild ( char79 ) ; 
 + CommonToken char80 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; 
 + textContext2 . addChild ( char80 ) ; 
 + CommonToken char81 = new CommonToken ( JavadocTokenTypes . CHAR , " g " ) ; 
 + textContext2 . addChild ( char81 ) ; 
 + CommonToken char82 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext2 . addChild ( char82 ) ; 
 + CommonToken char83 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; 
 + textContext2 . addChild ( char83 ) ; 
 + CommonToken char84 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; 
 + textContext2 . addChild ( char84 ) ; 
 + CommonToken char85 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext2 . addChild ( char85 ) ; 
 + CommonToken char86 = new CommonToken ( JavadocTokenTypes . CHAR , " P " ) ; 
 + textContext2 . addChild ( char86 ) ; 
 + CommonToken char87 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; 
 + textContext2 . addChild ( char87 ) ; 
 + CommonToken char88 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext2 . addChild ( char88 ) ; 
 + CommonToken char89 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext2 . addChild ( char89 ) ; 
 + CommonToken char90 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext2 . addChild ( char90 ) ; 
 + CommonToken char91 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; 
 + textContext2 . addChild ( char91 ) ; 
 + CommonToken char92 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext2 . addChild ( char92 ) ; 
 + CommonToken char93 = new CommonToken ( JavadocTokenTypes . CHAR , " \ " " ) ; 
 + textContext2 . addChild ( char93 ) ; 
 + CommonToken ws11 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext2 . addChild ( ws11 ) ; 
 + CommonToken char94 = new CommonToken ( JavadocTokenTypes . CHAR , " v " ) ; 
 + textContext2 . addChild ( char94 ) ; 
 + CommonToken char95 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; 
 + textContext2 . addChild ( char95 ) ; 
 + CommonToken char96 = new CommonToken ( JavadocTokenTypes . CHAR , " l " ) ; 
 + textContext2 . addChild ( char96 ) ; 
 + CommonToken char97 = new CommonToken ( JavadocTokenTypes . CHAR , " u " ) ; 
 + textContext2 . addChild ( char97 ) ; 
 + CommonToken char98 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext2 . addChild ( char98 ) ; 
 + CommonToken char99 = new CommonToken ( JavadocTokenTypes . CHAR , " = " ) ; 
 + textContext2 . addChild ( char99 ) ; 
 + CommonToken char100 = new CommonToken ( JavadocTokenTypes . CHAR , " \ " " ) ; 
 + textContext2 . addChild ( char100 ) ; 
 + CommonToken char101 = new CommonToken ( JavadocTokenTypes . CHAR , " ^ " ) ; 
 + textContext2 . addChild ( char101 ) ; 
 + CommonToken ws12 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext2 . addChild ( ws12 ) ; 
 + CommonToken char102 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; 
 + textContext2 . addChild ( char102 ) ; 
 + CommonToken char103 = new CommonToken ( JavadocTokenTypes . CHAR , " \ \ " ) ; 
 + textContext2 . addChild ( char103 ) ; 
 + CommonToken char104 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; 
 + textContext2 . addChild ( char104 ) ; 
 + CommonToken ws13 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext2 . addChild ( ws13 ) ; 
 + CommonToken char105 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; 
 + textContext2 . addChild ( char105 ) ; 
 + CommonToken char106 = new CommonToken ( JavadocTokenTypes . CHAR , " [ " ) ; 
 + textContext2 . addChild ( char106 ) ; 
 + CommonToken char107 = new CommonToken ( JavadocTokenTypes . CHAR , " ^ " ) ; 
 + textContext2 . addChild ( char107 ) ; 
 + CommonToken ws14 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext2 . addChild ( ws14 ) ; 
 + CommonToken char108 = new CommonToken ( JavadocTokenTypes . CHAR , " ] " ) ; 
 + textContext2 . addChild ( char108 ) ; 
 + CommonToken char109 = new CommonToken ( JavadocTokenTypes . CHAR , " + " ) ; 
 + textContext2 . addChild ( char109 ) ; 
 + CommonToken char110 = new CommonToken ( JavadocTokenTypes . CHAR , " $ " ) ; 
 + textContext2 . addChild ( char110 ) ; 
 + CommonToken char111 = new CommonToken ( JavadocTokenTypes . CHAR , " \ " " ) ; 
 + textContext2 . addChild ( char111 ) ; 
 + CommonToken char112 = new CommonToken ( JavadocTokenTypes . CHAR , " / " ) ; 
 + textContext2 . addChild ( char112 ) ; 
 + CommonToken char113 = new CommonToken ( JavadocTokenTypes . CHAR , " & " ) ; 
 + textContext2 . addChild ( char113 ) ; 
 + CommonToken char114 = new CommonToken ( JavadocTokenTypes . CHAR , " g " ) ; 
 + textContext2 . addChild ( char114 ) ; 
 + CommonToken char115 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext2 . addChild ( char115 ) ; 
 + CommonToken char116 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; 
 + textContext2 . addChild ( char116 ) ; 
 + javadocContext0 . addChild ( textContext2 ) ; 
 + CommonToken newline2 = new CommonToken ( JavadocTokenTypes . NEWLINE , LINE _ SEPARATOR ) ; 
 + javadocContext0 . addChild ( newline2 ) ; 
 + CommonToken leadingAsterisk2 = new CommonToken ( JavadocTokenTypes . LEADING _ ASTERISK , " \ \ t * " ) ; 
 + javadocContext0 . addChild ( leadingAsterisk2 ) ; 
 + TextContext textContext3 = new TextContext ( javadocContext0 , 0 ) ; 
 + CommonToken ws15 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext3 . addChild ( ws15 ) ; 
 + CommonToken char117 = new CommonToken ( JavadocTokenTypes . CHAR , " T " ) ; 
 + textContext3 . addChild ( char117 ) ; 
 + CommonToken char118 = new CommonToken ( JavadocTokenTypes . CHAR , " h " ) ; 
 + textContext3 . addChild ( char118 ) ; 
 + CommonToken char119 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; 
 + textContext3 . addChild ( char119 ) ; 
 + CommonToken char120 = new CommonToken ( JavadocTokenTypes . CHAR , " s " ) ; 
 + textContext3 . addChild ( char120 ) ; 
 + CommonToken ws16 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext3 . addChild ( ws16 ) ; 
 + CommonToken char121 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; 
 + textContext3 . addChild ( char121 ) ; 
 + CommonToken ws17 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext3 . addChild ( ws17 ) ; 
 + CommonToken char122 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; 
 + textContext3 . addChild ( char122 ) ; 
 + CommonToken char123 = new CommonToken ( JavadocTokenTypes . CHAR , " s " ) ; 
 + textContext3 . addChild ( char123 ) ; 
 + CommonToken ws18 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext3 . addChild ( ws18 ) ; 
 + CommonToken char124 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext3 . addChild ( char124 ) ; 
 + CommonToken char125 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; 
 + textContext3 . addChild ( char125 ) ; 
 + CommonToken char126 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext3 . addChild ( char126 ) ; 
 + CommonToken ws19 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext3 . addChild ( ws19 ) ; 
 + CommonToken char127 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; 
 + textContext3 . addChild ( char127 ) ; 
 + CommonToken ws20 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext3 . addChild ( ws20 ) ; 
 + CommonToken char128 = new CommonToken ( JavadocTokenTypes . CHAR , " l " ) ; 
 + textContext3 . addChild ( char128 ) ; 
 + CommonToken char129 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext3 . addChild ( char129 ) ; 
 + CommonToken char130 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; 
 + textContext3 . addChild ( char130 ) ; 
 + CommonToken char131 = new CommonToken ( JavadocTokenTypes . CHAR , " d " ) ; 
 + textContext3 . addChild ( char131 ) ; 
 + CommonToken char132 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; 
 + textContext3 . addChild ( char132 ) ; 
 + CommonToken char133 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext3 . addChild ( char133 ) ; 
 + CommonToken char134 = new CommonToken ( JavadocTokenTypes . CHAR , " g " ) ; 
 + textContext3 . addChild ( char134 ) ; 
 + CommonToken ws21 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext3 . addChild ( ws21 ) ; 
 + CommonToken char135 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; 
 + textContext3 . addChild ( char135 ) ; 
 + javadocContext0 . addChild ( textContext3 ) ; 
 + CommonToken newline3 = new CommonToken ( JavadocTokenTypes . NEWLINE , LINE _ SEPARATOR ) ; 
 + javadocContext0 . addChild ( newline3 ) ; 
 + CommonToken leadingAsterisk3 = new CommonToken ( JavadocTokenTypes . LEADING _ ASTERISK , " * " ) ; 
 + javadocContext0 . addChild ( leadingAsterisk3 ) ; 
 + CommonToken ws22 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + javadocContext0 . addChild ( ws22 ) ; 
 + JavadocTagContext javadocTagContext0 = new JavadocTagContext ( javadocContext0 , 0 ) ; 
 + CommonToken returnLiteral0 = new CommonToken ( JavadocTokenTypes . RETURN _ LITERAL , " @ return " ) ; 
 + javadocTagContext0 . addChild ( returnLiteral0 ) ; 
 + CommonToken ws23 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + javadocTagContext0 . addChild ( ws23 ) ; 
 + DescriptionContext descriptionContext0 = new DescriptionContext ( javadocTagContext0 , 0 ) ; 
 + TextContext textContext4 = new TextContext ( descriptionContext0 , 0 ) ; 
 + CommonToken char136 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext4 . addChild ( char136 ) ; 
 + CommonToken char137 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; 
 + textContext4 . addChild ( char137 ) ; 
 + CommonToken char138 = new CommonToken ( JavadocTokenTypes . CHAR , " u " ) ; 
 + textContext4 . addChild ( char138 ) ; 
 + CommonToken char139 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext4 . addChild ( char139 ) ; 
 + CommonToken ws24 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext4 . addChild ( ws24 ) ; 
 + CommonToken char140 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; 
 + textContext4 . addChild ( char140 ) ; 
 + CommonToken char141 = new CommonToken ( JavadocTokenTypes . CHAR , " f " ) ; 
 + textContext4 . addChild ( char141 ) ; 
 + CommonToken ws25 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext4 . addChild ( ws25 ) ; 
 + CommonToken char142 = new CommonToken ( JavadocTokenTypes . CHAR , " c " ) ; 
 + textContext4 . addChild ( char142 ) ; 
 + CommonToken char143 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; 
 + textContext4 . addChild ( char143 ) ; 
 + CommonToken char144 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; 
 + textContext4 . addChild ( char144 ) ; 
 + CommonToken char145 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; 
 + textContext4 . addChild ( char145 ) ; 
 + CommonToken char146 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext4 . addChild ( char146 ) ; 
 + CommonToken char147 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext4 . addChild ( char147 ) ; 
 + CommonToken char148 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext4 . addChild ( char148 ) ; 
 + CommonToken char149 = new CommonToken ( JavadocTokenTypes . CHAR , " C " ) ; 
 + textContext4 . addChild ( char149 ) ; 
 + CommonToken char150 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; 
 + textContext4 . addChild ( char150 ) ; 
 + CommonToken char151 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext4 . addChild ( char151 ) ; 
 + CommonToken char152 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext4 . addChild ( char152 ) ; 
 + CommonToken char153 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext4 . addChild ( char153 ) ; 
 + CommonToken char154 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext4 . addChild ( char154 ) ; 
 + CommonToken char155 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext4 . addChild ( char155 ) ; 
 + CommonToken ws26 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext4 . addChild ( ws26 ) ; 
 + CommonToken char156 = new CommonToken ( JavadocTokenTypes . CHAR , " s " ) ; 
 + textContext4 . addChild ( char156 ) ; 
 + CommonToken char157 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext4 . addChild ( char157 ) ; 
 + CommonToken char158 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; 
 + textContext4 . addChild ( char158 ) ; 
 + CommonToken char159 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; 
 + textContext4 . addChild ( char159 ) ; 
 + CommonToken char160 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext4 . addChild ( char160 ) ; 
 + CommonToken char161 = new CommonToken ( JavadocTokenTypes . CHAR , " s " ) ; 
 + textContext4 . addChild ( char161 ) ; 
 + CommonToken ws27 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext4 . addChild ( ws27 ) ; 
 + CommonToken char162 = new CommonToken ( JavadocTokenTypes . CHAR , " w " ) ; 
 + textContext4 . addChild ( char162 ) ; 
 + CommonToken char163 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; 
 + textContext4 . addChild ( char163 ) ; 
 + CommonToken char164 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext4 . addChild ( char164 ) ; 
 + CommonToken char165 = new CommonToken ( JavadocTokenTypes . CHAR , " h " ) ; 
 + textContext4 . addChild ( char165 ) ; 
 + CommonToken ws28 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext4 . addChild ( ws28 ) ; 
 + CommonToken char166 = new CommonToken ( JavadocTokenTypes . CHAR , " ' " ) ; 
 + textContext4 . addChild ( char166 ) ; 
 + CommonToken char167 = new CommonToken ( JavadocTokenTypes . CHAR , " * " ) ; 
 + textContext4 . addChild ( char167 ) ; 
 + CommonToken char168 = new CommonToken ( JavadocTokenTypes . CHAR , " ' " ) ; 
 + textContext4 . addChild ( char168 ) ; 
 + CommonToken ws29 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext4 . addChild ( ws29 ) ; 
 + CommonToken char169 = new CommonToken ( JavadocTokenTypes . CHAR , " j " ) ; 
 + textContext4 . addChild ( char169 ) ; 
 + CommonToken char170 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; 
 + textContext4 . addChild ( char170 ) ; 
 + CommonToken char171 = new CommonToken ( JavadocTokenTypes . CHAR , " v " ) ; 
 + textContext4 . addChild ( char171 ) ; 
 + CommonToken char172 = new CommonToken ( JavadocTokenTypes . CHAR , " a " ) ; 
 + textContext4 . addChild ( char172 ) ; 
 + CommonToken char173 = new CommonToken ( JavadocTokenTypes . CHAR , " d " ) ; 
 + textContext4 . addChild ( char173 ) ; 
 + CommonToken char174 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; 
 + textContext4 . addChild ( char174 ) ; 
 + CommonToken char175 = new CommonToken ( JavadocTokenTypes . CHAR , " c " ) ; 
 + textContext4 . addChild ( char175 ) ; 
 + CommonToken ws30 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext4 . addChild ( ws30 ) ; 
 + CommonToken char176 = new CommonToken ( JavadocTokenTypes . CHAR , " c " ) ; 
 + textContext4 . addChild ( char176 ) ; 
 + CommonToken char177 = new CommonToken ( JavadocTokenTypes . CHAR , " o " ) ; 
 + textContext4 . addChild ( char177 ) ; 
 + CommonToken char178 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; 
 + textContext4 . addChild ( char178 ) ; 
 + CommonToken char179 = new CommonToken ( JavadocTokenTypes . CHAR , " m " ) ; 
 + textContext4 . addChild ( char179 ) ; 
 + CommonToken char180 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext4 . addChild ( char180 ) ; 
 + CommonToken char181 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext4 . addChild ( char181 ) ; 
 + CommonToken char182 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext4 . addChild ( char182 ) ; 
 + CommonToken ws31 = new CommonToken ( JavadocTokenTypes . WS , " " ) ; 
 + textContext4 . addChild ( ws31 ) ; 
 + CommonToken char183 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; 
 + textContext4 . addChild ( char183 ) ; 
 + CommonToken char184 = new CommonToken ( JavadocTokenTypes . CHAR , " d " ) ; 
 + textContext4 . addChild ( char184 ) ; 
 + CommonToken char185 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext4 . addChild ( char185 ) ; 
 + CommonToken char186 = new CommonToken ( JavadocTokenTypes . CHAR , " n " ) ; 
 + textContext4 . addChild ( char186 ) ; 
 + CommonToken char187 = new CommonToken ( JavadocTokenTypes . CHAR , " t " ) ; 
 + textContext4 . addChild ( char187 ) ; 
 + CommonToken char188 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; 
 + textContext4 . addChild ( char188 ) ; 
 + CommonToken char189 = new CommonToken ( JavadocTokenTypes . CHAR , " f " ) ; 
 + textContext4 . addChild ( char189 ) ; 
 + CommonToken char190 = new CommonToken ( JavadocTokenTypes . CHAR , " i " ) ; 
 + textContext4 . addChild ( char190 ) ; 
 + CommonToken char191 = new CommonToken ( JavadocTokenTypes . CHAR , " e " ) ; 
 + textContext4 . addChild ( char191 ) ; 
 + CommonToken char192 = new CommonToken ( JavadocTokenTypes . CHAR , " r " ) ; 
 + textContext4 . addChild ( char192 ) ; 
 + descriptionContext0 . addChild ( textContext4 ) ; 
 + CommonToken newline4 = new CommonToken ( JavadocTokenTypes . NEWLINE , LINE _ SEPARATOR ) ; 
 + descriptionContext0 . addChild ( newline4 ) ; 
 + javadocTagContext0 . addChild ( descriptionContext0 ) ; 
 + javadocContext0 . addChild ( javadocTagContext0 ) ; 
 + CommonToken eof0 = new CommonToken ( JavadocTokenTypes . EOF , " < EOF > " ) ; 
 + javadocContext0 . addChild ( eof0 ) ; 
 + return javadocContext0 ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / javadoc / InputLeadingAsterisksExtended . txt b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / javadoc / InputLeadingAsterisksExtended . txt 
 new file mode 100644 
 index 0000000 . . 1b7eeee 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / grammars / javadoc / InputLeadingAsterisksExtended . txt 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + 
 + * Checks that commentContent starts with ' * ' javadoc comment identifier . 
 + * & lt ; property name = " ignorePattern " value = " ^ * \ * * [ ^ ] + $ " / & gt * 
 + 	 * This * is not a leading * 
 + * @ return true if commentContent starts with ' * ' javadoc comment identifier

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java 
 index b829df5 . . 16646cc 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java 
 @ @ - 42 , 17 + 42 , 17 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * Check have following options : 
 * < / p > 
 * < ul > 
 - * < li > mAllowSamelineMultipleAnnotations - to allow annotation to be located on 
 + * < li > allowSamelineMultipleAnnotations - to allow annotation to be located on 
 * the same line as target element . Default value is false . 
 * < / li > 
 * 
 * < li > 
 - * mAllowSamelineSingleParameterlessAnnotation - to allow single parameterless 
 + * allowSamelineSingleParameterlessAnnotation - to allow single parameterless 
 * annotation to be located on the same line as target element . Default value is false . 
 * < / li > 
 * 
 * < li > 
 - * mAllowSamelineParametrizedAnnotation - to allow parameterized annotation 
 + * allowSamelineParametrizedAnnotation - to allow parameterized annotation 
 * to be located on the same line as target element . Default value is false . 
 * < / li > 
 * < / ul > 
 @ @ - 127 , 43 + 127 , 43 @ @ public class AnnotationLocationCheck extends Check 
 / * * 
 * Some javadoc . 
 * / 
 - private boolean mAllowSamelineSingleParameterlessAnnotation = true ; 
 + private boolean allowSamelineSingleParameterlessAnnotation = true ; 
 
 / * * 
 * Some javadoc . 
 * / 
 - private boolean mAllowSamelineParametrizedAnnotation ; 
 + private boolean allowSamelineParametrizedAnnotation ; 
 
 / * * 
 * Some javadoc . 
 * / 
 - private boolean mAllowSamelineMultipleAnnotations ; 
 + private boolean allowSamelineMultipleAnnotations ; 
 
 / * * 
 * Some javadoc . 
 - * @ param aAllow Some javadoc . 
 + * @ param allow Some javadoc . 
 * / 
 - public final void setAllowSamelineSingleParameterlessAnnotation ( boolean aAllow ) 
 + public final void setAllowSamelineSingleParameterlessAnnotation ( boolean allow ) 
 { 
 - mAllowSamelineSingleParameterlessAnnotation = aAllow ; 
 + allowSamelineSingleParameterlessAnnotation = allow ; 
 } 
 
 / * * 
 * Some javadoc . 
 - * @ param aAllow Some javadoc . 
 + * @ param allow Some javadoc . 
 * / 
 - public final void setAllowSamelineParametrizedAnnotation ( boolean aAllow ) 
 + public final void setAllowSamelineParametrizedAnnotation ( boolean allow ) 
 { 
 - mAllowSamelineParametrizedAnnotation = aAllow ; 
 + allowSamelineParametrizedAnnotation = allow ; 
 } 
 
 / * * 
 * Some javadoc . 
 - * @ param aAllow Some javadoc . 
 + * @ param allow Some javadoc . 
 * / 
 - public final void setAllowSamelineMultipleAnnotations ( boolean aAllow ) 
 + public final void setAllowSamelineMultipleAnnotations ( boolean allow ) 
 { 
 - mAllowSamelineMultipleAnnotations = aAllow ; 
 + allowSamelineMultipleAnnotations = allow ; 
 } 
 
 @ Override 
 @ @ - 180 , 9 + 180 , 9 @ @ public class AnnotationLocationCheck extends Check 
 } 
 
 @ Override 
 - public void visitToken ( DetailAST aAST ) 
 + public void visitToken ( DetailAST ast ) 
 { 
 - final DetailAST modifiersNode = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + final DetailAST modifiersNode = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 
 if ( hasAnnotations ( modifiersNode ) ) { 
 checkAnnotations ( modifiersNode , getAnnotationLevel ( modifiersNode ) ) ; 
 @ @ - 191 , 12 + 191 , 12 @ @ public class AnnotationLocationCheck extends Check 
 
 / * * 
 * Some javadoc . 
 - * @ param aModifierNode Some javadoc . 
 - * @ param aCorrectLevel Some javadoc . 
 + * @ param modifierNode Some javadoc . 
 + * @ param correctLevel Some javadoc . 
 * / 
 - private void checkAnnotations ( DetailAST aModifierNode , int aCorrectLevel ) 
 + private void checkAnnotations ( DetailAST modifierNode , int correctLevel ) 
 { 
 - DetailAST annotation = aModifierNode . getFirstChild ( ) ; 
 + DetailAST annotation = modifierNode . getFirstChild ( ) ; 
 
 while ( annotation ! = null & & annotation . getType ( ) = = TokenTypes . ANNOTATION ) { 
 final boolean hasParameters = isParameterized ( annotation ) ; 
 @ @ - 205 , 9 + 205 , 9 @ @ public class AnnotationLocationCheck extends Check 
 log ( annotation . getLineNo ( ) , 
 MSG _ KEY _ ANNOTATION _ LOCATION _ ALONE , getAnnotationName ( annotation ) ) ; 
 } 
 - else if ( annotation . getColumnNo ( ) ! = aCorrectLevel & & ! hasNodeBefore ( annotation ) ) { 
 + else if ( annotation . getColumnNo ( ) ! = correctLevel & & ! hasNodeBefore ( annotation ) ) { 
 log ( annotation . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ LOCATION , 
 - getAnnotationName ( annotation ) , annotation . getColumnNo ( ) , aCorrectLevel ) ; 
 + getAnnotationName ( annotation ) , annotation . getColumnNo ( ) , correctLevel ) ; 
 } 
 annotation = annotation . getNextSibling ( ) ; 
 } 
 @ @ - 215 , 45 + 215 , 45 @ @ public class AnnotationLocationCheck extends Check 
 
 / * * 
 * Some javadoc . 
 - * @ param aAnnotation Some javadoc . 
 - * @ param aHasParams Some javadoc . 
 + * @ param annotation Some javadoc . 
 + * @ param hasParams Some javadoc . 
 * @ return Some javadoc . 
 * / 
 - private boolean isCorrectLocation ( DetailAST aAnnotation , boolean aHasParams ) 
 + private boolean isCorrectLocation ( DetailAST annotation , boolean hasParams ) 
 { 
 - final boolean allowingCondition = aHasParams ? mAllowSamelineParametrizedAnnotation 
 - : mAllowSamelineSingleParameterlessAnnotation ; 
 - return allowingCondition & & ! hasNodeBefore ( aAnnotation ) 
 - | | ! allowingCondition & & ! hasNodeBeside ( aAnnotation ) 
 - | | mAllowSamelineMultipleAnnotations ; 
 + final boolean allowingCondition = hasParams ? allowSamelineParametrizedAnnotation 
 + : allowSamelineSingleParameterlessAnnotation ; 
 + return allowingCondition & & ! hasNodeBefore ( annotation ) 
 + | | ! allowingCondition & & ! hasNodeBeside ( annotation ) 
 + | | allowSamelineMultipleAnnotations ; 
 } 
 
 / * * 
 * Some javadoc . 
 - * @ param aAnnotation Some javadoc . 
 + * @ param annotation Some javadoc . 
 * @ return Some javadoc . 
 * / 
 - private static String getAnnotationName ( DetailAST aAnnotation ) 
 + private static String getAnnotationName ( DetailAST annotation ) 
 { 
 - DetailAST idenNode = aAnnotation . findFirstToken ( TokenTypes . IDENT ) ; 
 + DetailAST idenNode = annotation . findFirstToken ( TokenTypes . IDENT ) ; 
 if ( idenNode = = null ) { 
 - idenNode = aAnnotation . findFirstToken ( TokenTypes . DOT ) . findFirstToken ( TokenTypes . IDENT ) ; 
 + idenNode = annotation . findFirstToken ( TokenTypes . DOT ) . findFirstToken ( TokenTypes . IDENT ) ; 
 } 
 return idenNode . getText ( ) ; 
 } 
 
 / * * 
 * Some javadoc . 
 - * @ param aAnnotation Some javadoc . 
 + * @ param annotation Some javadoc . 
 * @ return Some javadoc . 
 * / 
 - private static boolean hasNodeAfter ( DetailAST aAnnotation ) 
 + private static boolean hasNodeAfter ( DetailAST annotation ) 
 { 
 - final int annotationLineNo = aAnnotation . getLineNo ( ) ; 
 - DetailAST nextNode = aAnnotation . getNextSibling ( ) ; 
 + final int annotationLineNo = annotation . getLineNo ( ) ; 
 + DetailAST nextNode = annotation . getNextSibling ( ) ; 
 
 if ( nextNode = = null ) { 
 - nextNode = aAnnotation . getParent ( ) . getNextSibling ( ) ; 
 + nextNode = annotation . getParent ( ) . getNextSibling ( ) ; 
 } 
 
 return nextNode ! = null & & annotationLineNo = = nextNode . getLineNo ( ) ; 
 @ @ - 261 , 54 + 261 , 54 @ @ public class AnnotationLocationCheck extends Check 
 
 / * * 
 * Some javadoc . 
 - * @ param aAnnotation Some javadoc . 
 + * @ param annotation Some javadoc . 
 * @ return Some javadoc . 
 * / 
 - private static boolean hasNodeBefore ( DetailAST aAnnotation ) 
 + private static boolean hasNodeBefore ( DetailAST annotation ) 
 { 
 - final int annotationLineNo = aAnnotation . getLineNo ( ) ; 
 - final DetailAST previousNode = aAnnotation . getPreviousSibling ( ) ; 
 + final int annotationLineNo = annotation . getLineNo ( ) ; 
 + final DetailAST previousNode = annotation . getPreviousSibling ( ) ; 
 
 return previousNode ! = null & & annotationLineNo = = previousNode . getLineNo ( ) ; 
 } 
 
 / * * 
 * Some javadoc . 
 - * @ param aAnnotation Some javadoc . 
 + * @ param annotation Some javadoc . 
 * @ return Some javadoc . 
 * / 
 - private static boolean hasNodeBeside ( DetailAST aAnnotation ) 
 + private static boolean hasNodeBeside ( DetailAST annotation ) 
 { 
 - return hasNodeBefore ( aAnnotation ) | | hasNodeAfter ( aAnnotation ) ; 
 + return hasNodeBefore ( annotation ) | | hasNodeAfter ( annotation ) ; 
 } 
 
 / * * 
 * Some javadoc . 
 - * @ param aModifierNode Some javadoc . 
 + * @ param modifierNode Some javadoc . 
 * @ return Some javadoc . 
 * / 
 - private static int getAnnotationLevel ( DetailAST aModifierNode ) 
 + private static int getAnnotationLevel ( DetailAST modifierNode ) 
 { 
 - return aModifierNode . getParent ( ) . getColumnNo ( ) ; 
 + return modifierNode . getParent ( ) . getColumnNo ( ) ; 
 } 
 
 / * * 
 * Some javadoc . 
 - * @ param aAnnotation Some javadoc . 
 + * @ param annotation Some javadoc . 
 * @ return Some javadoc . 
 * / 
 - private static boolean isParameterized ( DetailAST aAnnotation ) 
 + private static boolean isParameterized ( DetailAST annotation ) 
 { 
 - return aAnnotation . findFirstToken ( TokenTypes . EXPR ) ! = null ; 
 + return annotation . findFirstToken ( TokenTypes . EXPR ) ! = null ; 
 } 
 
 / * * 
 * Some javadoc . 
 - * @ param aModifierNode Some javadoc . 
 + * @ param modifierNode Some javadoc . 
 * @ return Some javadoc . 
 * / 
 - private static boolean hasAnnotations ( DetailAST aModifierNode ) 
 + private static boolean hasAnnotations ( DetailAST modifierNode ) 
 { 
 - return aModifierNode . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ; 
 + return modifierNode . findFirstToken ( TokenTypes . ANNOTATION ) ! = null ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 index 4d54bf6 . . edcfea2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationUseStyleCheck . java 
 @ @ - 164 , 63 + 164 , 63 @ @ public final class AnnotationUseStyleCheck extends Check 
 / / has more than one option type . 
 
 / * * @ see # setElementStyle ( String ) * / 
 - private ElementStyle mStyle = ElementStyle . COMPACT _ NO _ ARRAY ; 
 + private ElementStyle style = ElementStyle . COMPACT _ NO _ ARRAY ; 
 
 / / defaulting to NEVER because of the strange compiler behavior 
 / * * @ see # setTrailingArrayComma ( String ) * / 
 - private TrailingArrayComma mComma = TrailingArrayComma . NEVER ; 
 + private TrailingArrayComma comma = TrailingArrayComma . NEVER ; 
 
 / * * @ see # setClosingParens ( String ) * / 
 - private ClosingParens mParens = ClosingParens . NEVER ; 
 + private ClosingParens parens = ClosingParens . NEVER ; 
 
 / * * 
 * Sets the ElementStyle from a string . 
 * 
 - * @ param aStyle string representation 
 + * @ param style string representation 
 * @ throws ConversionException if cannot convert string . 
 * / 
 - public void setElementStyle ( final String aStyle ) 
 + public void setElementStyle ( final String style ) 
 { 
 - this . mStyle = this . getOption ( ElementStyle . class , aStyle ) ; 
 + this . style = this . getOption ( ElementStyle . class , style ) ; 
 } 
 
 / * * 
 * Sets the TrailingArrayComma from a string . 
 * 
 - * @ param aComma string representation 
 + * @ param comma string representation 
 * @ throws ConversionException if cannot convert string . 
 * / 
 - public void setTrailingArrayComma ( final String aComma ) 
 + public void setTrailingArrayComma ( final String comma ) 
 { 
 - this . mComma = this . getOption ( TrailingArrayComma . class , aComma ) ; 
 + this . comma = this . getOption ( TrailingArrayComma . class , comma ) ; 
 } 
 
 / * * 
 * Sets the ClosingParens from a string . 
 * 
 - * @ param aParens string representation 
 + * @ param parens string representation 
 * @ throws ConversionException if cannot convert string . 
 * / 
 - public void setClosingParens ( final String aParens ) 
 + public void setClosingParens ( final String parens ) 
 { 
 - this . mParens = this . getOption ( ClosingParens . class , aParens ) ; 
 + this . parens = this . getOption ( ClosingParens . class , parens ) ; 
 } 
 
 / * * 
 * Retrieves an { @ link Enum Enum } type from a @ { link String String } . 
 * @ param < T > the enum type 
 - * @ param aEnumClass the enum class 
 - * @ param aString the string representing the enum 
 + * @ param enuclass the enum class 
 + * @ param string the string representing the enum 
 * @ return the enum type 
 * / 
 - private < T extends Enum < T > > T getOption ( final Class < T > aEnumClass , 
 - final String aString ) 
 + private < T extends Enum < T > > T getOption ( final Class < T > enuclass , 
 + final String string ) 
 { 
 try { 
 - return Enum . valueOf ( aEnumClass , aString . trim ( ) . toUpperCase ( ) ) ; 
 + return Enum . valueOf ( enuclass , string . trim ( ) . toUpperCase ( ) ) ; 
 } 
 catch ( final IllegalArgumentException iae ) { 
 - throw new ConversionException ( " unable to parse " + aString , iae ) ; 
 + throw new ConversionException ( " unable to parse " + string , iae ) ; 
 } 
 } 
 
 @ @ - 249 , 11 + 249 , 11 @ @ public final class AnnotationUseStyleCheck extends Check 
 
 / * * { @ inheritDoc } * / 
 @ Override 
 - public void visitToken ( final DetailAST aAST ) 
 + public void visitToken ( final DetailAST ast ) 
 { 
 - this . checkStyleType ( aAST ) ; 
 - this . checkCheckClosingParens ( aAST ) ; 
 - this . checkTrailingComma ( aAST ) ; 
 + this . checkStyleType ( ast ) ; 
 + this . checkCheckClosingParens ( ast ) ; 
 + this . checkTrailingComma ( ast ) ; 
 } 
 
 / * * 
 @ @ - 261 , 41 + 261 , 41 @ @ public final class AnnotationUseStyleCheck extends Check 
 * { @ link ElementStyle AnnotationElementStyle } 
 * is correct . 
 * 
 - * @ param aAnnotation the annotation token 
 + * @ param annotation the annotation token 
 * / 
 - private void checkStyleType ( final DetailAST aAnnotation ) 
 + private void checkStyleType ( final DetailAST annotation ) 
 { 
 - if ( ElementStyle . IGNORE . equals ( this . mStyle ) 
 - | | this . mStyle = = null ) 
 + if ( ElementStyle . IGNORE . equals ( this . style ) 
 + | | this . style = = null ) 
 { 
 return ; 
 } 
 
 - if ( ElementStyle . COMPACT _ NO _ ARRAY . equals ( this . mStyle ) ) { 
 - this . checkCompactNoArrayStyle ( aAnnotation ) ; 
 + if ( ElementStyle . COMPACT _ NO _ ARRAY . equals ( this . style ) ) { 
 + this . checkCompactNoArrayStyle ( annotation ) ; 
 } 
 - else if ( ElementStyle . COMPACT . equals ( this . mStyle ) ) { 
 - this . checkCompactStyle ( aAnnotation ) ; 
 + else if ( ElementStyle . COMPACT . equals ( this . style ) ) { 
 + this . checkCompactStyle ( annotation ) ; 
 } 
 - else if ( ElementStyle . EXPANDED . equals ( this . mStyle ) ) { 
 - this . checkExpandedStyle ( aAnnotation ) ; 
 + else if ( ElementStyle . EXPANDED . equals ( this . style ) ) { 
 + this . checkExpandedStyle ( annotation ) ; 
 } 
 } 
 
 / * * 
 * Checks for expanded style type violations . 
 * 
 - * @ param aAnnotation the annotation token 
 + * @ param annotation the annotation token 
 * / 
 - private void checkExpandedStyle ( final DetailAST aAnnotation ) 
 + private void checkExpandedStyle ( final DetailAST annotation ) 
 { 
 final int valuePairCount = 
 - aAnnotation . getChildCount ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; 
 + annotation . getChildCount ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; 
 
 if ( valuePairCount = = 0 
 - & & aAnnotation . branchContains ( TokenTypes . EXPR ) ) 
 + & & annotation . branchContains ( TokenTypes . EXPR ) ) 
 { 
 - this . log ( aAnnotation . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ INCORRECT _ STYLE , 
 + this . log ( annotation . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ INCORRECT _ STYLE , 
 ElementStyle . EXPANDED ) ; 
 } 
 } 
 @ @ - 303 , 23 + 303 , 23 @ @ public final class AnnotationUseStyleCheck extends Check 
 / * * 
 * Checks for compact style type violations . 
 * 
 - * @ param aAnnotation the annotation token 
 + * @ param annotation the annotation token 
 * / 
 - private void checkCompactStyle ( final DetailAST aAnnotation ) 
 + private void checkCompactStyle ( final DetailAST annotation ) 
 { 
 final int valuePairCount = 
 - aAnnotation . getChildCount ( 
 + annotation . getChildCount ( 
 TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; 
 
 final DetailAST valuePair = 
 - aAnnotation . findFirstToken ( 
 + annotation . findFirstToken ( 
 TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; 
 
 if ( valuePairCount = = 1 
 & & AnnotationUseStyleCheck . ANNOTATION _ ELEMENT _ SINGLE _ NAME . equals ( 
 valuePair . getFirstChild ( ) . getText ( ) ) ) 
 { 
 - this . log ( aAnnotation . getLineNo ( ) , " annotation . incorrect . style " , 
 + this . log ( annotation . getLineNo ( ) , " annotation . incorrect . style " , 
 ElementStyle . COMPACT ) ; 
 } 
 } 
 @ @ - 327 , 24 + 327 , 24 @ @ public final class AnnotationUseStyleCheck extends Check 
 / * * 
 * Checks for compact no array style type violations . 
 * 
 - * @ param aAnnotation the annotation token 
 + * @ param annotation the annotation token 
 * / 
 - private void checkCompactNoArrayStyle ( final DetailAST aAnnotation ) 
 + private void checkCompactNoArrayStyle ( final DetailAST annotation ) 
 { 
 final DetailAST arrayInit = 
 - aAnnotation . findFirstToken ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) ; 
 + annotation . findFirstToken ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) ; 
 
 final int valuePairCount = 
 - aAnnotation . getChildCount ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; 
 + annotation . getChildCount ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; 
 
 final DetailAST valuePair = 
 - aAnnotation . findFirstToken ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; 
 + annotation . findFirstToken ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; 
 
 / / in compact style with one value 
 if ( arrayInit ! = null 
 & & arrayInit . getChildCount ( TokenTypes . EXPR ) = = 1 ) 
 { 
 - this . log ( aAnnotation . getLineNo ( ) , " annotation . incorrect . style " , 
 + this . log ( annotation . getLineNo ( ) , " annotation . incorrect . style " , 
 ElementStyle . COMPACT _ NO _ ARRAY ) ; 
 } 
 / / in expanded style with one value and the correct element name 
 @ @ - 358 , 7 + 358 , 7 @ @ public final class AnnotationUseStyleCheck extends Check 
 valuePair . getFirstChild ( ) . getText ( ) ) 
 & & nestedArrayInit . getChildCount ( TokenTypes . EXPR ) = = 1 ) 
 { 
 - this . log ( aAnnotation . getLineNo ( ) , " annotation . incorrect . style " , 
 + this . log ( annotation . getLineNo ( ) , " annotation . incorrect . style " , 
 ElementStyle . COMPACT _ NO _ ARRAY ) ; 
 } 
 } 
 @ @ - 368 , 17 + 368 , 17 @ @ public final class AnnotationUseStyleCheck extends Check 
 * Checks to see if the trailing comma is present if required or 
 * prohibited . 
 * 
 - * @ param aAnnotation the annotation token 
 + * @ param annotation the annotation token 
 * / 
 - private void checkTrailingComma ( final DetailAST aAnnotation ) 
 + private void checkTrailingComma ( final DetailAST annotation ) 
 { 
 - if ( TrailingArrayComma . IGNORE . equals ( this . mComma ) 
 - | | this . mComma = = null ) 
 + if ( TrailingArrayComma . IGNORE . equals ( this . comma ) 
 + | | this . comma = = null ) 
 { 
 return ; 
 } 
 
 - DetailAST child = aAnnotation . getFirstChild ( ) ; 
 + DetailAST child = annotation . getFirstChild ( ) ; 
 
 while ( child ! = null ) { 
 DetailAST arrayInit = null ; 
 @ @ - 403 , 23 + 403 , 23 @ @ public final class AnnotationUseStyleCheck extends Check 
 / * * 
 * logs a trailing array comma violation if one exists . 
 * 
 - * @ param aAST the array init 
 + * @ param ast the array init 
 * { @ link TokenTypes # ANNOTATION _ ARRAY _ INIT ANNOTATION _ ARRAY _ INIT } . 
 * / 
 - private void logCommaViolation ( final DetailAST aAST ) 
 + private void logCommaViolation ( final DetailAST ast ) 
 { 
 - final DetailAST rCurly = aAST . findFirstToken ( TokenTypes . RCURLY ) ; 
 + final DetailAST rCurly = ast . findFirstToken ( TokenTypes . RCURLY ) ; 
 
 / / comma can be null if array is empty 
 final DetailAST comma = rCurly . getPreviousSibling ( ) ; 
 
 - if ( TrailingArrayComma . ALWAYS . equals ( this . mComma ) 
 + if ( TrailingArrayComma . ALWAYS . equals ( this . comma ) 
 & & ( comma = = null | | comma . getType ( ) ! = TokenTypes . COMMA ) ) 
 { 
 this . log ( rCurly . getLineNo ( ) , 
 rCurly . getColumnNo ( ) , MSG _ KEY _ ANNOTATION _ TRAILING _ COMMA _ MISSING ) ; 
 } 
 - else if ( TrailingArrayComma . NEVER . equals ( this . mComma ) 
 + else if ( TrailingArrayComma . NEVER . equals ( this . comma ) 
 & & comma ! = null & & comma . getType ( ) = = TokenTypes . COMMA ) 
 { 
 this . log ( comma . getLineNo ( ) , 
 @ @ - 431 , 31 + 431 , 31 @ @ public final class AnnotationUseStyleCheck extends Check 
 * Checks to see if the closing parenthesis are present if required or 
 * prohibited . 
 * 
 - * @ param aAST the annotation token 
 + * @ param ast the annotation token 
 * / 
 - private void checkCheckClosingParens ( final DetailAST aAST ) 
 + private void checkCheckClosingParens ( final DetailAST ast ) 
 { 
 - if ( ClosingParens . IGNORE . equals ( this . mParens ) 
 - | | this . mParens = = null ) 
 + if ( ClosingParens . IGNORE . equals ( this . parens ) 
 + | | this . parens = = null ) 
 { 
 return ; 
 } 
 
 - final DetailAST paren = aAST . getLastChild ( ) ; 
 + final DetailAST paren = ast . getLastChild ( ) ; 
 final boolean parenExists = paren . getType ( ) = = TokenTypes . RPAREN ; 
 
 - if ( ClosingParens . ALWAYS . equals ( this . mParens ) 
 + if ( ClosingParens . ALWAYS . equals ( this . parens ) 
 & & ! parenExists ) 
 { 
 - this . log ( aAST . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ PARENS _ MISSING ) ; 
 + this . log ( ast . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ PARENS _ MISSING ) ; 
 } 
 - else if ( ClosingParens . NEVER . equals ( this . mParens ) 
 - & & ! aAST . branchContains ( TokenTypes . EXPR ) 
 - & & ! aAST . branchContains ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) 
 - & & ! aAST . branchContains ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) 
 + else if ( ClosingParens . NEVER . equals ( this . parens ) 
 + & & ! ast . branchContains ( TokenTypes . EXPR ) 
 + & & ! ast . branchContains ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) 
 + & & ! ast . branchContains ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) 
 & & parenExists ) 
 { 
 - this . log ( aAST . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) ; 
 + this . log ( ast . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ PARENS _ PRESENT ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java 
 index ee8be2c . . 2fa8e2e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingDeprecatedCheck . java 
 @ @ - 142 , 39 + 142 , 39 @ @ public final class MissingDeprecatedCheck extends Check 
 
 / * * { @ inheritDoc } * / 
 @ Override 
 - public void visitToken ( final DetailAST aAST ) 
 + public void visitToken ( final DetailAST ast ) 
 { 
 final TextBlock javadoc = 
 - this . getFileContents ( ) . getJavadocBefore ( aAST . getLineNo ( ) ) ; 
 + this . getFileContents ( ) . getJavadocBefore ( ast . getLineNo ( ) ) ; 
 
 final boolean containsAnnotation = 
 - AnnotationUtility . containsAnnotation ( aAST , DEPRECATED ) 
 - | | AnnotationUtility . containsAnnotation ( aAST , FQ _ DEPRECATED ) ; 
 + AnnotationUtility . containsAnnotation ( ast , DEPRECATED ) 
 + | | AnnotationUtility . containsAnnotation ( ast , FQ _ DEPRECATED ) ; 
 
 final boolean containsJavadocTag = this . containsJavadocTag ( javadoc ) ; 
 
 if ( containsAnnotation ^ containsJavadocTag ) { 
 - this . log ( aAST . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ MISSING _ DEPRECATED ) ; 
 + this . log ( ast . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ MISSING _ DEPRECATED ) ; 
 } 
 } 
 
 / * * 
 * Checks to see if the text block contains a deprecated tag . 
 * 
 - * @ param aJavadoc the javadoc of the AST 
 + * @ param javadoc the javadoc of the AST 
 * @ return true if contains the tag 
 * / 
 - private boolean containsJavadocTag ( final TextBlock aJavadoc ) 
 + private boolean containsJavadocTag ( final TextBlock javadoc ) 
 { 
 - if ( aJavadoc = = null ) { 
 + if ( javadoc = = null ) { 
 return false ; 
 } 
 
 - final String [ ] lines = aJavadoc . getText ( ) ; 
 + final String [ ] lines = javadoc . getText ( ) ; 
 
 boolean found = false ; 
 
 - int currentLine = aJavadoc . getStartLineNo ( ) - 1 ; 
 + int currentLine = javadoc . getStartLineNo ( ) - 1 ; 
 
 for ( int i = 0 ; i < lines . length ; i + + ) { 
 currentLine + + ; 
 @ @ - 199 , 15 + 199 , 15 @ @ public final class MissingDeprecatedCheck extends Check 
 / / Javadoc ) , ' @ ' ( start of next tag ) , or anything that ' s 
 / / not whitespace or ' * ' characters . 
 
 - for ( int remIndex = i + 1 ; 
 - remIndex < lines . length ; remIndex + + ) 
 + for ( int reindex = i + 1 ; 
 + reindex < lines . length ; reindex + + ) 
 { 
 final Matcher multilineCont = 
 MissingDeprecatedCheck . MATCH _ DEPRECATED _ MULTILINE _ CONT 
 - . matcher ( lines [ remIndex ] ) ; 
 + . matcher ( lines [ reindex ] ) ; 
 
 if ( multilineCont . find ( ) ) { 
 - remIndex = lines . length ; 
 + reindex = lines . length ; 
 final String lFin = multilineCont . group ( 1 ) ; 
 if ( ! lFin . equals ( MissingDeprecatedCheck . NEXT _ TAG ) 
 & & ! lFin . equals ( MissingDeprecatedCheck . END _ JAVADOC ) ) 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java 
 index 2d3a4ac . . 310e815 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / MissingOverrideCheck . java 
 @ @ - 100 , 7 + 100 , 7 @ @ public final class MissingOverrideCheck extends Check 
 " annotation . missing . override " ; 
 
 / * * @ see # setJavaFiveCompatibility ( boolean ) * / 
 - private boolean mJavaFiveCompatibility ; 
 + private boolean javaFiveCompatibility ; 
 
 / * * 
 * Sets Java 5 compatibility mode . 
 @ @ - 116 , 11 + 116 , 11 @ @ public final class MissingOverrideCheck extends Check 
 * false to turn off Java 5 compatibility mode . 
 * < / p > 
 * 
 - * @ param aCompatibility compatibility or not 
 + * @ param compatibility compatibility or not 
 * / 
 - public void setJavaFiveCompatibility ( final boolean aCompatibility ) 
 + public void setJavaFiveCompatibility ( final boolean compatibility ) 
 { 
 - this . mJavaFiveCompatibility = aCompatibility ; 
 + this . javaFiveCompatibility = compatibility ; 
 } 
 
 / * * { @ inheritDoc } * / 
 @ @ - 147 , 21 + 147 , 21 @ @ public final class MissingOverrideCheck extends Check 
 
 / * * { @ inheritDoc } * / 
 @ Override 
 - public void visitToken ( final DetailAST aAST ) 
 + public void visitToken ( final DetailAST ast ) 
 { 
 final TextBlock javadoc = 
 - this . getFileContents ( ) . getJavadocBefore ( aAST . getLineNo ( ) ) ; 
 + this . getFileContents ( ) . getJavadocBefore ( ast . getLineNo ( ) ) ; 
 
 
 - final boolean containsTag = this . containsJavadocTag ( javadoc ) ; 
 - if ( containsTag & & ! JavadocTagInfo . INHERIT _ DOC . isValidOn ( aAST ) ) { 
 - this . log ( aAST . getLineNo ( ) , MSG _ KEY _ TAG _ NOT _ VALID _ ON , 
 + final boolean containastag = this . containsJavadocTag ( javadoc ) ; 
 + if ( containastag & & ! JavadocTagInfo . INHERIT _ DOC . isValidOn ( ast ) ) { 
 + this . log ( ast . getLineNo ( ) , MSG _ KEY _ TAG _ NOT _ VALID _ ON , 
 JavadocTagInfo . INHERIT _ DOC . getText ( ) ) ; 
 return ; 
 } 
 
 - if ( this . mJavaFiveCompatibility ) { 
 - final DetailAST defOrNew = aAST . getParent ( ) . getParent ( ) ; 
 + if ( this . javaFiveCompatibility ) { 
 + final DetailAST defOrNew = ast . getParent ( ) . getParent ( ) ; 
 
 if ( defOrNew . branchContains ( TokenTypes . EXTENDS _ CLAUSE ) 
 | | defOrNew . branchContains ( TokenTypes . IMPLEMENTS _ CLAUSE ) 
 @ @ - 171 , 27 + 171 , 27 @ @ public final class MissingOverrideCheck extends Check 
 } 
 } 
 
 - if ( containsTag 
 - & & ( ! AnnotationUtility . containsAnnotation ( aAST , OVERRIDE ) 
 - & & ! AnnotationUtility . containsAnnotation ( aAST , FQ _ OVERRIDE ) ) ) 
 + if ( containastag 
 + & & ( ! AnnotationUtility . containsAnnotation ( ast , OVERRIDE ) 
 + & & ! AnnotationUtility . containsAnnotation ( ast , FQ _ OVERRIDE ) ) ) 
 { 
 - this . log ( aAST . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ MISSING _ OVERRIDE ) ; 
 + this . log ( ast . getLineNo ( ) , MSG _ KEY _ ANNOTATION _ MISSING _ OVERRIDE ) ; 
 } 
 } 
 
 / * * 
 * Checks to see if the text block contains a inheritDoc tag . 
 * 
 - * @ param aJavadoc the javadoc of the AST 
 + * @ param javadoc the javadoc of the AST 
 * @ return true if contains the tag 
 * / 
 - private boolean containsJavadocTag ( final TextBlock aJavadoc ) 
 + private boolean containsJavadocTag ( final TextBlock javadoc ) 
 { 
 - if ( aJavadoc = = null ) { 
 + if ( javadoc = = null ) { 
 return false ; 
 } 
 
 - final String [ ] lines = aJavadoc . getText ( ) ; 
 + final String [ ] lines = javadoc . getText ( ) ; 
 
 for ( final String line : lines ) { 
 final Matcher matchInheritDoc = 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java 
 index 7ba420c . . 87a94eb 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / PackageAnnotationCheck . java 
 @ @ - 71 , 15 + 71 , 15 @ @ public class PackageAnnotationCheck extends Check 
 
 / * * { @ inheritDoc } * / 
 @ Override 
 - public void visitToken ( final DetailAST aAST ) 
 + public void visitToken ( final DetailAST ast ) 
 { 
 final boolean containsAnnotation = 
 - AnnotationUtility . containsAnnotation ( aAST ) ; 
 + AnnotationUtility . containsAnnotation ( ast ) ; 
 final boolean inPackageInfo = 
 this . getFileContents ( ) . inPackageInfo ( ) ; 
 
 if ( containsAnnotation & & ! inPackageInfo ) { 
 - this . log ( aAST . getLine ( ) , " annotation . package . location " ) ; 
 + this . log ( ast . getLine ( ) , " annotation . package . location " ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 index a4d7c4f . . c77e481 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 @ @ - 139 , 9 + 139 , 9 @ @ public class SuppressWarningsCheck extends AbstractFormatCheck 
 
 / * * { @ inheritDoc } * / 
 @ Override 
 - public void visitToken ( final DetailAST aAST ) 
 + public void visitToken ( final DetailAST ast ) 
 { 
 - final DetailAST annotation = this . getSuppressWarnings ( aAST ) ; 
 + final DetailAST annotation = this . getSuppressWarnings ( ast ) ; 
 
 if ( annotation = = null ) { 
 return ; 
 @ @ - 196 , 47 + 196 , 47 @ @ public class SuppressWarningsCheck extends AbstractFormatCheck 
 * that is annotating the AST . If the annotation does not exist 
 * this method will return { @ code null } . 
 * 
 - * @ param aAST the AST 
 + * @ param ast the AST 
 * @ return the { @ link SuppressWarnings SuppressWarnings } annotation 
 * / 
 - private DetailAST getSuppressWarnings ( DetailAST aAST ) 
 + private DetailAST getSuppressWarnings ( DetailAST ast ) 
 { 
 final DetailAST annotation = AnnotationUtility . getAnnotation ( 
 - aAST , SuppressWarningsCheck . SUPPRESS _ WARNINGS ) ; 
 + ast , SuppressWarningsCheck . SUPPRESS _ WARNINGS ) ; 
 
 return ( annotation ! = null ) ? annotation 
 : AnnotationUtility . getAnnotation ( 
 - aAST , SuppressWarningsCheck . FQ _ SUPPRESS _ WARNINGS ) ; 
 + ast , SuppressWarningsCheck . FQ _ SUPPRESS _ WARNINGS ) ; 
 } 
 
 / * * 
 * This method looks for a warning that matches a configured expression . 
 * If found it logs a violation at the given line and column number . 
 * 
 - * @ param aLineNo the line number 
 - * @ param aColNum the column number 
 - * @ param aWarningText the warning . 
 + * @ param lineNo the line number 
 + * @ param colNum the column number 
 + * @ param warningText the warning . 
 * / 
 - private void logMatch ( final int aLineNo , 
 - final int aColNum , final String aWarningText ) 
 + private void logMatch ( final int lineNo , 
 + final int colNum , final String warningText ) 
 { 
 - final Matcher matcher = this . getRegexp ( ) . matcher ( aWarningText ) ; 
 + final Matcher matcher = this . getRegexp ( ) . matcher ( warningText ) ; 
 if ( matcher . matches ( ) ) { 
 - this . log ( aLineNo , aColNum , 
 - MSG _ KEY _ SUPPRESSED _ WARNING _ NOT _ ALLOWED , aWarningText ) ; 
 + this . log ( lineNo , colNum , 
 + MSG _ KEY _ SUPPRESSED _ WARNING _ NOT _ ALLOWED , warningText ) ; 
 } 
 } 
 
 / * * 
 * Find the parent ( holder ) of the of the warnings ( Expr ) . 
 * 
 - * @ param aAnnotation the annotation 
 + * @ param annotation the annotation 
 * @ return a Token representing the expr . 
 * / 
 - private DetailAST findWarningsHolder ( final DetailAST aAnnotation ) 
 + private DetailAST findWarningsHolder ( final DetailAST annotation ) 
 { 
 final DetailAST annValuePair = 
 - aAnnotation . findFirstToken ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; 
 + annotation . findFirstToken ( TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR ) ; 
 final DetailAST annArrayInit ; 
 
 if ( annValuePair ! = null ) { 
 @ @ - 245 , 14 + 245 , 14 @ @ public class SuppressWarningsCheck extends AbstractFormatCheck 
 } 
 else { 
 annArrayInit = 
 - aAnnotation . findFirstToken ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) ; 
 + annotation . findFirstToken ( TokenTypes . ANNOTATION _ ARRAY _ INIT ) ; 
 } 
 
 if ( annArrayInit ! = null ) { 
 return annArrayInit ; 
 } 
 
 - return aAnnotation ; 
 + return annotation ; 
 } 
 
 / * * 
 @ @ - 264 , 16 + 264 , 16 @ @ public class SuppressWarningsCheck extends AbstractFormatCheck 
 * < br / > 
 * Output String = unchecked 
 * 
 - * @ param aWarning the warning string 
 + * @ param warning the warning string 
 * @ return the string without two quotes 
 * / 
 - private String removeQuotes ( final String aWarning ) 
 + private String removeQuotes ( final String warning ) 
 { 
 - assert aWarning ! = null : " the aWarning was null " ; 
 - assert aWarning . charAt ( 0 ) = = ' " ' ; 
 - assert aWarning . charAt ( aWarning . length ( ) - 1 ) = = ' " ' ; 
 + assert warning ! = null : " the warning was null " ; 
 + assert warning . charAt ( 0 ) = = ' " ' ; 
 + assert warning . charAt ( warning . length ( ) - 1 ) = = ' " ' ; 
 
 - return aWarning . substring ( 1 , aWarning . length ( ) - 1 ) ; 
 + return warning . substring ( 1 , warning . length ( ) - 1 ) ; 
 } 
 
 / * * 
 @ @ - 281 , 47 + 281 , 47 @ @ public class SuppressWarningsCheck extends AbstractFormatCheck 
 * and right sides , checking for matches and 
 * logging violations . 
 * 
 - * @ param aCond a Conditional type 
 + * @ param cond a Conditional type 
 * { @ link TokenTypes # QUESTION QUESTION } 
 * / 
 - private void walkConditional ( final DetailAST aCond ) 
 + private void walkConditional ( final DetailAST cond ) 
 { 
 - if ( aCond . getType ( ) ! = TokenTypes . QUESTION ) { 
 + if ( cond . getType ( ) ! = TokenTypes . QUESTION ) { 
 final String warningText = 
 - this . removeQuotes ( aCond . getText ( ) ) ; 
 - this . logMatch ( aCond . getLineNo ( ) , aCond . getColumnNo ( ) , warningText ) ; 
 + this . removeQuotes ( cond . getText ( ) ) ; 
 + this . logMatch ( cond . getLineNo ( ) , cond . getColumnNo ( ) , warningText ) ; 
 return ; 
 } 
 
 - this . walkConditional ( this . getCondLeft ( aCond ) ) ; 
 - this . walkConditional ( this . getCondRight ( aCond ) ) ; 
 + this . walkConditional ( this . getCondLeft ( cond ) ) ; 
 + this . walkConditional ( this . getCondRight ( cond ) ) ; 
 } 
 
 / * * 
 * Retrieves the left side of a conditional . 
 * 
 - * @ param aCond aCond a conditional type 
 + * @ param cond cond a conditional type 
 * { @ link TokenTypes # QUESTION QUESTION } 
 * @ return either the value 
 * or another conditional 
 * / 
 - private DetailAST getCondLeft ( final DetailAST aCond ) 
 + private DetailAST getCondLeft ( final DetailAST cond ) 
 { 
 - final DetailAST colon = aCond . findFirstToken ( TokenTypes . COLON ) ; 
 + final DetailAST colon = cond . findFirstToken ( TokenTypes . COLON ) ; 
 return colon . getPreviousSibling ( ) ; 
 } 
 
 / * * 
 * Retrieves the right side of a conditional . 
 * 
 - * @ param aCond a conditional type 
 + * @ param cond a conditional type 
 * { @ link TokenTypes # QUESTION QUESTION } 
 * @ return either the value 
 * or another conditional 
 * / 
 - private DetailAST getCondRight ( final DetailAST aCond ) 
 + private DetailAST getCondRight ( final DetailAST cond ) 
 { 
 - final DetailAST colon = aCond . findFirstToken ( TokenTypes . COLON ) ; 
 + final DetailAST colon = cond . findFirstToken ( TokenTypes . COLON ) ; 
 return colon . getNextSibling ( ) ; 
 } 
 }
