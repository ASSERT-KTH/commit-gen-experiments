BLEU SCORE: 0.010545665719646581

TEST MSG: Issue # 2838 : Make WhitespaceAround allow double - brace initialization .
GENERATED MSG: Added option in ModifiedControlVariable Check to ignore validation of variables defined in for which are not change in for iterator part , fix issue # 286

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> index 1dae34e . . adf8d5d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> @ @ - 93 , 7 + 93 , 18 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * < pre > <nl> * & lt ; module name = " WhitespaceAround " & gt ; <nl> * & lt ; property name = " tokens " <nl> - * value = " ASSIGN , DIV _ ASSIGN , PLUS _ ASSIGN , MINUS _ ASSIGN , STAR _ ASSIGN , MOD _ ASSIGN , SR _ ASSIGN , BSR _ ASSIGN , SL _ ASSIGN , BXOR _ ASSIGN , BOR _ ASSIGN , BAND _ ASSIGN " / & gt ; <nl> + * value = " ASSIGN , DIV _ ASSIGN , PLUS _ ASSIGN , MINUS _ ASSIGN , STAR _ ASSIGN , <nl> + * MOD _ ASSIGN , SR _ ASSIGN , BSR _ ASSIGN , SL _ ASSIGN , BXOR _ ASSIGN , <nl> + * BOR _ ASSIGN , BAND _ ASSIGN " / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> + * <nl> + * < p > An example of how to configure the check for whitespace only around <nl> + * curly braces is : <nl> + * < pre > <nl> + * & lt ; module name = " WhitespaceAround " & gt ; <nl> + * & lt ; property name = " tokens " <nl> + * value = " LCURLY , RCURLY " / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> * <nl> @ @ - 115 , 6 + 126 , 13 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> * public @ interface Beta { } / / empty annotation type <nl> * } < / pre > <nl> * <nl> + * < p > This check does not flag as violation double brace initialization like : < / p > <nl> + * < pre > <nl> + * new Properties ( ) { { <nl> + * setProperty ( " key " , " value " ) ; <nl> + * } } ; <nl> + * < / pre > <nl> + * <nl> * < p > To configure the check to allow empty method blocks use <nl> * <nl> * < pre > & lt ; property name = " allowEmptyMethods " value = " true " / & gt ; < / pre > <nl> @ @ - 353 , 39 + 371 , 23 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> final int before = ast . getColumnNo ( ) - 1 ; <nl> final int after = ast . getColumnNo ( ) + ast . getText ( ) . length ( ) ; <nl> <nl> - if ( before > = 0 & & ! Character . isWhitespace ( line . charAt ( before ) ) ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> - MSG _ WS _ NOT _ PRECEDED , ast . getText ( ) ) ; <nl> + if ( before > = 0 ) { <nl> + final char prevChar = line . charAt ( before ) ; <nl> + if ( shouldCheckSeparationFromPreviousToken ( ast ) <nl> + & & ! Character . isWhitespace ( prevChar ) ) { <nl> + log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> + MSG _ WS _ NOT _ PRECEDED , ast . getText ( ) ) ; <nl> + } <nl> } <nl> <nl> - if ( after > = line . length ( ) ) { <nl> - return ; <nl> + if ( after < line . length ( ) ) { <nl> + final char nextChar = line . charAt ( after ) ; <nl> + if ( shouldCheckSeparationFromNextToken ( ast , nextChar ) <nl> + & & ! Character . isWhitespace ( nextChar ) ) { <nl> + log ( ast . getLineNo ( ) , ast . getColumnNo ( ) + ast . getText ( ) . length ( ) , <nl> + MSG _ WS _ NOT _ FOLLOWED , ast . getText ( ) ) ; <nl> + } <nl> } <nl> - <nl> - final char nextChar = line . charAt ( after ) ; <nl> - if ( ! Character . isWhitespace ( nextChar ) <nl> - / / Check for " return ; " <nl> - & & ! ( currentType = = TokenTypes . LITERAL _ RETURN <nl> - & & ast . getFirstChild ( ) . getType ( ) = = TokenTypes . SEMI ) <nl> - & & ! isAnonymousInnerClassEnd ( currentType , nextChar ) ) { <nl> - <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) + ast . getText ( ) . length ( ) , <nl> - MSG _ WS _ NOT _ FOLLOWED , ast . getText ( ) ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Check for " } ) " or " } ; " or " } , " . Happens with anon - inners <nl> - * @ param currentType token <nl> - * @ param nextChar next symbol <nl> - * @ return true is that is end of anon inner class <nl> - * / <nl> - private static boolean isAnonymousInnerClassEnd ( int currentType , char nextChar ) { <nl> - return currentType = = TokenTypes . RCURLY <nl> - & & ( nextChar = = ' ) ' <nl> - | | nextChar = = ' ; ' <nl> - | | nextChar = = ' , ' <nl> - | | nextChar = = ' . ' ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 404 , 9 + 406 , 10 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> final boolean starImportOrSlistInsideCaseGroup = starImport | | slistInsideCaseGroup ; <nl> final boolean colonOfCaseOrDefaultOrForEach = <nl> isColonOfCaseOrDefault ( currentType , parentType ) <nl> - | | isColonOfForEach ( currentType , parentType ) ; <nl> - final boolean emptyBlockOrType = isEmptyBlock ( ast , parentType ) <nl> - | | allowEmptyTypes & & isEmptyType ( ast ) ; <nl> + | | isColonOfForEach ( currentType , parentType ) ; <nl> + final boolean emptyBlockOrType = <nl> + isEmptyBlock ( ast , parentType ) <nl> + | | allowEmptyTypes & & isEmptyType ( ast ) ; <nl> <nl> return starImportOrSlistInsideCaseGroup <nl> | | colonOfCaseOrDefaultOrForEach <nl> @ @ - 415 , 6 + 418 , 56 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> + * Check if it should be checked if previous token is separated from current by <nl> + * whitespace . <nl> + * This function is needed to recognise double brace initialization as valid , <nl> + * unfortunately its not possible to implement this functionality <nl> + * in isNotRelevantSituation method , because in this method when we return <nl> + * true ( is not relevant ) ast is later doesnt check at all . For example : <nl> + * new Properties ( ) { { setProperty ( " double curly braces " , " are not a style error " ) ; <nl> + * } } ; <nl> + * For second left curly brace in first line when we would return true from <nl> + * isNotRelevantSituation it wouldn ' t later check that the next token ( setProperty ) <nl> + * is not separated from previous token . <nl> + * @ param ast current AST . <nl> + * @ return true if it should be checked if previous token is separated by whitespace , <nl> + * false otherwise . <nl> + * / <nl> + private static boolean shouldCheckSeparationFromPreviousToken ( DetailAST ast ) { <nl> + return ! isPartOfDoubleBraceInitializerForPreviousToken ( ast ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Check if it should be checked if next token is separated from current by <nl> + * whitespace . Explanation why this method is needed is identical to one <nl> + * included in shouldCheckSeparationFromPreviousToken method . <nl> + * @ param ast current AST . <nl> + * @ param nextChar next character . <nl> + * @ return true if it should be checked if next token is separated by whitespace , <nl> + * false otherwise . <nl> + * / <nl> + private static boolean shouldCheckSeparationFromNextToken ( DetailAST ast , char nextChar ) { <nl> + return ! ( ast . getType ( ) = = TokenTypes . LITERAL _ RETURN <nl> + & & ast . getFirstChild ( ) . getType ( ) = = TokenTypes . SEMI ) <nl> + & & ! isAnonymousInnerClassEnd ( ast . getType ( ) , nextChar ) <nl> + & & ! isPartOfDoubleBraceInitializerForNextToken ( ast ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Check for " } ) " or " } ; " or " } , " . Happens with anon - inners <nl> + * @ param currentType token <nl> + * @ param nextChar next symbol <nl> + * @ return true is that is end of anon inner class <nl> + * / <nl> + private static boolean isAnonymousInnerClassEnd ( int currentType , char nextChar ) { <nl> + return currentType = = TokenTypes . RCURLY <nl> + & & ( nextChar = = ' ) ' <nl> + | | nextChar = = ' ; ' <nl> + | | nextChar = = ' , ' <nl> + | | nextChar = = ' . ' ) ; <nl> + } <nl> + <nl> + / * * <nl> * Is empty block . <nl> * @ param ast ast <nl> * @ param parentType parent <nl> @ @ - 448 , 13 + 501 , 13 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> final DetailAST parent = ast . getParent ( ) ; <nl> final DetailAST grandParent = ast . getParent ( ) . getParent ( ) ; <nl> return parentType = = TokenTypes . SLIST <nl> - & & parent . getFirstChild ( ) . getType ( ) = = TokenTypes . RCURLY <nl> - & & grandParent . getType ( ) = = match ; <nl> + & & parent . getFirstChild ( ) . getType ( ) = = TokenTypes . RCURLY <nl> + & & grandParent . getType ( ) = = match ; <nl> } <nl> <nl> return type = = TokenTypes . SLIST <nl> - & & parentType = = match <nl> - & & ast . getFirstChild ( ) . getType ( ) = = TokenTypes . RCURLY ; <nl> + & & parentType = = match <nl> + & & ast . getFirstChild ( ) . getType ( ) = = TokenTypes . RCURLY ; <nl> } <nl> <nl> / * * <nl> @ @ - 466 , 7 + 519 , 7 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> private static boolean isColonOfCaseOrDefault ( int currentType , int parentType ) { <nl> return currentType = = TokenTypes . COLON <nl> & & ( parentType = = TokenTypes . LITERAL _ DEFAULT <nl> - | | parentType = = TokenTypes . LITERAL _ CASE ) ; <nl> + | | parentType = = TokenTypes . LITERAL _ CASE ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 477 , 8 + 530 , 8 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> * / <nl> private boolean isColonOfForEach ( int currentType , int parentType ) { <nl> return currentType = = TokenTypes . COLON <nl> - & & parentType = = TokenTypes . FOR _ EACH _ CLAUSE <nl> - & & ignoreEnhancedForColon ; <nl> + & & parentType = = TokenTypes . FOR _ EACH _ CLAUSE <nl> + & & ignoreEnhancedForColon ; <nl> } <nl> <nl> / * * <nl> @ @ - 488 , 10 + 541 , 9 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> * @ return true is current token inside array initialization <nl> * / <nl> private static boolean isArrayInitialization ( int currentType , int parentType ) { <nl> - return ( currentType = = TokenTypes . RCURLY <nl> - | | currentType = = TokenTypes . LCURLY ) <nl> - & & ( parentType = = TokenTypes . ARRAY _ INIT <nl> - | | parentType = = TokenTypes . ANNOTATION _ ARRAY _ INIT ) ; <nl> + return ( currentType = = TokenTypes . RCURLY | | currentType = = TokenTypes . LCURLY ) <nl> + & & ( parentType = = TokenTypes . ARRAY _ INIT <nl> + | | parentType = = TokenTypes . ANNOTATION _ ARRAY _ INIT ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 504 , 7 + 556 , 7 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> * / <nl> private boolean isEmptyMethodBlock ( DetailAST ast , int parentType ) { <nl> return allowEmptyMethods <nl> - & & isEmptyBlock ( ast , parentType , TokenTypes . METHOD _ DEF ) ; <nl> + & & isEmptyBlock ( ast , parentType , TokenTypes . METHOD _ DEF ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 517 , 7 + 569 , 7 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> * / <nl> private boolean isEmptyCtorBlock ( DetailAST ast , int parentType ) { <nl> return allowEmptyConstructors <nl> - & & isEmptyBlock ( ast , parentType , TokenTypes . CTOR _ DEF ) ; <nl> + & & isEmptyBlock ( ast , parentType , TokenTypes . CTOR _ DEF ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 529 , 11 + 581 , 9 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> * / <nl> private boolean isEmptyLoop ( DetailAST ast , int parentType ) { <nl> return allowEmptyLoops <nl> - & & ( isEmptyBlock ( ast , parentType , TokenTypes . LITERAL _ FOR ) <nl> - | | isEmptyBlock ( ast , <nl> - parentType , TokenTypes . LITERAL _ WHILE ) <nl> - | | isEmptyBlock ( ast , <nl> - parentType , TokenTypes . LITERAL _ DO ) ) ; <nl> + & & ( isEmptyBlock ( ast , parentType , TokenTypes . LITERAL _ FOR ) <nl> + | | isEmptyBlock ( ast , parentType , TokenTypes . LITERAL _ WHILE ) <nl> + | | isEmptyBlock ( ast , parentType , TokenTypes . LITERAL _ DO ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 565 , 9 + 615 , 42 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> final DetailAST nextSibling = ast . getNextSibling ( ) ; <nl> final DetailAST previousSibling = ast . getPreviousSibling ( ) ; <nl> return type = = TokenTypes . LCURLY <nl> - & & nextSibling . getType ( ) = = TokenTypes . RCURLY <nl> - | | type = = TokenTypes . RCURLY <nl> - & & previousSibling ! = null <nl> - & & previousSibling . getType ( ) = = TokenTypes . LCURLY ; <nl> + & & nextSibling . getType ( ) = = TokenTypes . RCURLY <nl> + | | type = = TokenTypes . RCURLY <nl> + & & previousSibling ! = null <nl> + & & previousSibling . getType ( ) = = TokenTypes . LCURLY ; <nl> + } <nl> + <nl> + / * * <nl> + * Check if given ast is part of double brace initializer and if it <nl> + * should omit checking if previous token is separated by whitespace . <nl> + * @ param ast ast to check <nl> + * @ return true if it should omit checking for previous token , false otherwise <nl> + * / <nl> + private static boolean isPartOfDoubleBraceInitializerForPreviousToken ( DetailAST ast ) { <nl> + final boolean initializerBeginsAfterClassBegins = ast . getType ( ) = = TokenTypes . SLIST <nl> + & & ast . getParent ( ) . getType ( ) = = TokenTypes . INSTANCE _ INIT ; <nl> + final boolean classEndsAfterInitializerEnds = ast . getType ( ) = = TokenTypes . RCURLY <nl> + & & ast . getPreviousSibling ( ) ! = null <nl> + & & ast . getPreviousSibling ( ) . getType ( ) = = TokenTypes . INSTANCE _ INIT ; <nl> + return initializerBeginsAfterClassBegins | | classEndsAfterInitializerEnds ; <nl> + } <nl> + <nl> + / * * <nl> + * Check if given ast is part of double brace initializer and if it <nl> + * should omit checking if next token is separated by whitespace . <nl> + * See < a href = " https : / / github . com / checkstyle / checkstyle / pull / 2845 " > <nl> + * PR # 2845 < / a > for more information why this function was needed . <nl> + * @ param ast ast to check <nl> + * @ return true if it should omit checking for next token , false otherwise <nl> + * / <nl> + private static boolean isPartOfDoubleBraceInitializerForNextToken ( DetailAST ast ) { <nl> + final boolean classBeginBeforeInitializerBegin = ast . getType ( ) = = TokenTypes . LCURLY <nl> + & & ast . getNextSibling ( ) . getType ( ) = = TokenTypes . INSTANCE _ INIT ; <nl> + final boolean initalizerEndsBeforeClassEnds = ast . getType ( ) = = TokenTypes . RCURLY <nl> + & & ast . getParent ( ) . getType ( ) = = TokenTypes . SLIST <nl> + & & ast . getParent ( ) . getParent ( ) . getType ( ) = = TokenTypes . INSTANCE _ INIT <nl> + & & ast . getParent ( ) . getParent ( ) . getNextSibling ( ) . getType ( ) = = TokenTypes . RCURLY ; <nl> + return classBeginBeforeInitializerBegin | | initalizerEndsBeforeClassEnds ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java <nl> index d570cea . . 0891c6b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java <nl> @ @ - 165 , 6 + 165 , 20 @ @ public class WhitespaceAroundCheckTest <nl> } <nl> <nl> @ Test <nl> + public void testAllowDoubleBraceInitialization ( ) throws Exception { <nl> + final String [ ] expected = { <nl> + " 11 : 73 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " } " ) , <nl> + " 12 : 28 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " { " ) , <nl> + " 14 : 28 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " { " ) , <nl> + " 14 : 88 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " } " ) , <nl> + " 17 : 10 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " } " ) , <nl> + " 17 : 24 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " } " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputDoubleBraceInitialization . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testIgnoreEnhancedForColon ( ) throws Exception { <nl> checkConfig . addAttribute ( " ignoreEnhancedForColon " , " false " ) ; <nl> final String [ ] expected = { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputDoubleBraceInitialization . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputDoubleBraceInitialization . java <nl> new file mode 100644 <nl> index 0000000 . . 5c24aec <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputDoubleBraceInitialization . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> + <nl> + import java . util . Properties ; <nl> + <nl> + public class InputDoubleBraceInitialization { <nl> + public InputDoubleBraceInitialization ( ) { <nl> + new Properties ( ) { { <nl> + setProperty ( " double curly braces " , " are not a style error " ) ; <nl> + } } ; <nl> + new Properties ( ) { { <nl> + setProperty ( " double curly braces " , " are not a style error " ) ; } } ; <nl> + new Properties ( ) { { setProperty ( " double curly braces " , " are not a style error " ) ; <nl> + } } ; <nl> + new Properties ( ) { { setProperty ( " double curly braces " , " are not a style error " ) ; } } ; <nl> + new Properties ( ) { { <nl> + setProperty ( " double curly braces " , " are not a style error " ) ; <nl> + } private int i ; } ; <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml <nl> index 1fd7671 . . 54e4c3c 100644 <nl> - - - a / src / xdocs / config _ whitespace . xml <nl> + + + b / src / xdocs / config _ whitespace . xml <nl> @ @ - 1833 , 6 + 1833 , 12 @ @ public @ interface Beta { } / / empty annotation type <nl> < / code > , < code > allowEmptyTypes < / code > , < code > allowEmptyLoops < / code > and <nl> < code > allowEmptyLambdas < / code > properties . <nl> < / p > <nl> + < p > This check does not flag as violation double brace initialization like : < / p > <nl> + < pre > < code > <nl> + new Properties ( ) { { <nl> + setProperty ( " key " , " value " ) ; <nl> + } } ; <nl> + < / code > < / pre > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> index 132d707 . . f5f776a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java <nl> @ @ - 487 , 7 + 487 , 7 @ @ public final class TokenTypes <nl> * initialization block . < / p > <nl> * <nl> * @ see < a <nl> - * href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 10 . htm " > Java <nl> + * href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 10 . html " > Java <nl> * Language Specification & sect ; 10 < / a > <nl> * @ see # TYPE <nl> * @ see # ARRAY _ INIT

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 index 1dae34e . . adf8d5d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 @ @ - 93 , 7 + 93 , 18 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * < pre > 
 * & lt ; module name = " WhitespaceAround " & gt ; 
 * & lt ; property name = " tokens " 
 - * value = " ASSIGN , DIV _ ASSIGN , PLUS _ ASSIGN , MINUS _ ASSIGN , STAR _ ASSIGN , MOD _ ASSIGN , SR _ ASSIGN , BSR _ ASSIGN , SL _ ASSIGN , BXOR _ ASSIGN , BOR _ ASSIGN , BAND _ ASSIGN " / & gt ; 
 + * value = " ASSIGN , DIV _ ASSIGN , PLUS _ ASSIGN , MINUS _ ASSIGN , STAR _ ASSIGN , 
 + * MOD _ ASSIGN , SR _ ASSIGN , BSR _ ASSIGN , SL _ ASSIGN , BXOR _ ASSIGN , 
 + * BOR _ ASSIGN , BAND _ ASSIGN " / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 + * 
 + * < p > An example of how to configure the check for whitespace only around 
 + * curly braces is : 
 + * < pre > 
 + * & lt ; module name = " WhitespaceAround " & gt ; 
 + * & lt ; property name = " tokens " 
 + * value = " LCURLY , RCURLY " / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 * 
 @ @ - 115 , 6 + 126 , 13 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 * public @ interface Beta { } / / empty annotation type 
 * } < / pre > 
 * 
 + * < p > This check does not flag as violation double brace initialization like : < / p > 
 + * < pre > 
 + * new Properties ( ) { { 
 + * setProperty ( " key " , " value " ) ; 
 + * } } ; 
 + * < / pre > 
 + * 
 * < p > To configure the check to allow empty method blocks use 
 * 
 * < pre > & lt ; property name = " allowEmptyMethods " value = " true " / & gt ; < / pre > 
 @ @ - 353 , 39 + 371 , 23 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 final int before = ast . getColumnNo ( ) - 1 ; 
 final int after = ast . getColumnNo ( ) + ast . getText ( ) . length ( ) ; 
 
 - if ( before > = 0 & & ! Character . isWhitespace ( line . charAt ( before ) ) ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 - MSG _ WS _ NOT _ PRECEDED , ast . getText ( ) ) ; 
 + if ( before > = 0 ) { 
 + final char prevChar = line . charAt ( before ) ; 
 + if ( shouldCheckSeparationFromPreviousToken ( ast ) 
 + & & ! Character . isWhitespace ( prevChar ) ) { 
 + log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 + MSG _ WS _ NOT _ PRECEDED , ast . getText ( ) ) ; 
 + } 
 } 
 
 - if ( after > = line . length ( ) ) { 
 - return ; 
 + if ( after < line . length ( ) ) { 
 + final char nextChar = line . charAt ( after ) ; 
 + if ( shouldCheckSeparationFromNextToken ( ast , nextChar ) 
 + & & ! Character . isWhitespace ( nextChar ) ) { 
 + log ( ast . getLineNo ( ) , ast . getColumnNo ( ) + ast . getText ( ) . length ( ) , 
 + MSG _ WS _ NOT _ FOLLOWED , ast . getText ( ) ) ; 
 + } 
 } 
 - 
 - final char nextChar = line . charAt ( after ) ; 
 - if ( ! Character . isWhitespace ( nextChar ) 
 - / / Check for " return ; " 
 - & & ! ( currentType = = TokenTypes . LITERAL _ RETURN 
 - & & ast . getFirstChild ( ) . getType ( ) = = TokenTypes . SEMI ) 
 - & & ! isAnonymousInnerClassEnd ( currentType , nextChar ) ) { 
 - 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) + ast . getText ( ) . length ( ) , 
 - MSG _ WS _ NOT _ FOLLOWED , ast . getText ( ) ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * Check for " } ) " or " } ; " or " } , " . Happens with anon - inners 
 - * @ param currentType token 
 - * @ param nextChar next symbol 
 - * @ return true is that is end of anon inner class 
 - * / 
 - private static boolean isAnonymousInnerClassEnd ( int currentType , char nextChar ) { 
 - return currentType = = TokenTypes . RCURLY 
 - & & ( nextChar = = ' ) ' 
 - | | nextChar = = ' ; ' 
 - | | nextChar = = ' , ' 
 - | | nextChar = = ' . ' ) ; 
 } 
 
 / * * 
 @ @ - 404 , 9 + 406 , 10 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 final boolean starImportOrSlistInsideCaseGroup = starImport | | slistInsideCaseGroup ; 
 final boolean colonOfCaseOrDefaultOrForEach = 
 isColonOfCaseOrDefault ( currentType , parentType ) 
 - | | isColonOfForEach ( currentType , parentType ) ; 
 - final boolean emptyBlockOrType = isEmptyBlock ( ast , parentType ) 
 - | | allowEmptyTypes & & isEmptyType ( ast ) ; 
 + | | isColonOfForEach ( currentType , parentType ) ; 
 + final boolean emptyBlockOrType = 
 + isEmptyBlock ( ast , parentType ) 
 + | | allowEmptyTypes & & isEmptyType ( ast ) ; 
 
 return starImportOrSlistInsideCaseGroup 
 | | colonOfCaseOrDefaultOrForEach 
 @ @ - 415 , 6 + 418 , 56 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 } 
 
 / * * 
 + * Check if it should be checked if previous token is separated from current by 
 + * whitespace . 
 + * This function is needed to recognise double brace initialization as valid , 
 + * unfortunately its not possible to implement this functionality 
 + * in isNotRelevantSituation method , because in this method when we return 
 + * true ( is not relevant ) ast is later doesnt check at all . For example : 
 + * new Properties ( ) { { setProperty ( " double curly braces " , " are not a style error " ) ; 
 + * } } ; 
 + * For second left curly brace in first line when we would return true from 
 + * isNotRelevantSituation it wouldn ' t later check that the next token ( setProperty ) 
 + * is not separated from previous token . 
 + * @ param ast current AST . 
 + * @ return true if it should be checked if previous token is separated by whitespace , 
 + * false otherwise . 
 + * / 
 + private static boolean shouldCheckSeparationFromPreviousToken ( DetailAST ast ) { 
 + return ! isPartOfDoubleBraceInitializerForPreviousToken ( ast ) ; 
 + } 
 + 
 + / * * 
 + * Check if it should be checked if next token is separated from current by 
 + * whitespace . Explanation why this method is needed is identical to one 
 + * included in shouldCheckSeparationFromPreviousToken method . 
 + * @ param ast current AST . 
 + * @ param nextChar next character . 
 + * @ return true if it should be checked if next token is separated by whitespace , 
 + * false otherwise . 
 + * / 
 + private static boolean shouldCheckSeparationFromNextToken ( DetailAST ast , char nextChar ) { 
 + return ! ( ast . getType ( ) = = TokenTypes . LITERAL _ RETURN 
 + & & ast . getFirstChild ( ) . getType ( ) = = TokenTypes . SEMI ) 
 + & & ! isAnonymousInnerClassEnd ( ast . getType ( ) , nextChar ) 
 + & & ! isPartOfDoubleBraceInitializerForNextToken ( ast ) ; 
 + } 
 + 
 + / * * 
 + * Check for " } ) " or " } ; " or " } , " . Happens with anon - inners 
 + * @ param currentType token 
 + * @ param nextChar next symbol 
 + * @ return true is that is end of anon inner class 
 + * / 
 + private static boolean isAnonymousInnerClassEnd ( int currentType , char nextChar ) { 
 + return currentType = = TokenTypes . RCURLY 
 + & & ( nextChar = = ' ) ' 
 + | | nextChar = = ' ; ' 
 + | | nextChar = = ' , ' 
 + | | nextChar = = ' . ' ) ; 
 + } 
 + 
 + / * * 
 * Is empty block . 
 * @ param ast ast 
 * @ param parentType parent 
 @ @ - 448 , 13 + 501 , 13 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 final DetailAST parent = ast . getParent ( ) ; 
 final DetailAST grandParent = ast . getParent ( ) . getParent ( ) ; 
 return parentType = = TokenTypes . SLIST 
 - & & parent . getFirstChild ( ) . getType ( ) = = TokenTypes . RCURLY 
 - & & grandParent . getType ( ) = = match ; 
 + & & parent . getFirstChild ( ) . getType ( ) = = TokenTypes . RCURLY 
 + & & grandParent . getType ( ) = = match ; 
 } 
 
 return type = = TokenTypes . SLIST 
 - & & parentType = = match 
 - & & ast . getFirstChild ( ) . getType ( ) = = TokenTypes . RCURLY ; 
 + & & parentType = = match 
 + & & ast . getFirstChild ( ) . getType ( ) = = TokenTypes . RCURLY ; 
 } 
 
 / * * 
 @ @ - 466 , 7 + 519 , 7 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 private static boolean isColonOfCaseOrDefault ( int currentType , int parentType ) { 
 return currentType = = TokenTypes . COLON 
 & & ( parentType = = TokenTypes . LITERAL _ DEFAULT 
 - | | parentType = = TokenTypes . LITERAL _ CASE ) ; 
 + | | parentType = = TokenTypes . LITERAL _ CASE ) ; 
 } 
 
 / * * 
 @ @ - 477 , 8 + 530 , 8 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 * / 
 private boolean isColonOfForEach ( int currentType , int parentType ) { 
 return currentType = = TokenTypes . COLON 
 - & & parentType = = TokenTypes . FOR _ EACH _ CLAUSE 
 - & & ignoreEnhancedForColon ; 
 + & & parentType = = TokenTypes . FOR _ EACH _ CLAUSE 
 + & & ignoreEnhancedForColon ; 
 } 
 
 / * * 
 @ @ - 488 , 10 + 541 , 9 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 * @ return true is current token inside array initialization 
 * / 
 private static boolean isArrayInitialization ( int currentType , int parentType ) { 
 - return ( currentType = = TokenTypes . RCURLY 
 - | | currentType = = TokenTypes . LCURLY ) 
 - & & ( parentType = = TokenTypes . ARRAY _ INIT 
 - | | parentType = = TokenTypes . ANNOTATION _ ARRAY _ INIT ) ; 
 + return ( currentType = = TokenTypes . RCURLY | | currentType = = TokenTypes . LCURLY ) 
 + & & ( parentType = = TokenTypes . ARRAY _ INIT 
 + | | parentType = = TokenTypes . ANNOTATION _ ARRAY _ INIT ) ; 
 } 
 
 / * * 
 @ @ - 504 , 7 + 556 , 7 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 * / 
 private boolean isEmptyMethodBlock ( DetailAST ast , int parentType ) { 
 return allowEmptyMethods 
 - & & isEmptyBlock ( ast , parentType , TokenTypes . METHOD _ DEF ) ; 
 + & & isEmptyBlock ( ast , parentType , TokenTypes . METHOD _ DEF ) ; 
 } 
 
 / * * 
 @ @ - 517 , 7 + 569 , 7 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 * / 
 private boolean isEmptyCtorBlock ( DetailAST ast , int parentType ) { 
 return allowEmptyConstructors 
 - & & isEmptyBlock ( ast , parentType , TokenTypes . CTOR _ DEF ) ; 
 + & & isEmptyBlock ( ast , parentType , TokenTypes . CTOR _ DEF ) ; 
 } 
 
 / * * 
 @ @ - 529 , 11 + 581 , 9 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 * / 
 private boolean isEmptyLoop ( DetailAST ast , int parentType ) { 
 return allowEmptyLoops 
 - & & ( isEmptyBlock ( ast , parentType , TokenTypes . LITERAL _ FOR ) 
 - | | isEmptyBlock ( ast , 
 - parentType , TokenTypes . LITERAL _ WHILE ) 
 - | | isEmptyBlock ( ast , 
 - parentType , TokenTypes . LITERAL _ DO ) ) ; 
 + & & ( isEmptyBlock ( ast , parentType , TokenTypes . LITERAL _ FOR ) 
 + | | isEmptyBlock ( ast , parentType , TokenTypes . LITERAL _ WHILE ) 
 + | | isEmptyBlock ( ast , parentType , TokenTypes . LITERAL _ DO ) ) ; 
 } 
 
 / * * 
 @ @ - 565 , 9 + 615 , 42 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 final DetailAST nextSibling = ast . getNextSibling ( ) ; 
 final DetailAST previousSibling = ast . getPreviousSibling ( ) ; 
 return type = = TokenTypes . LCURLY 
 - & & nextSibling . getType ( ) = = TokenTypes . RCURLY 
 - | | type = = TokenTypes . RCURLY 
 - & & previousSibling ! = null 
 - & & previousSibling . getType ( ) = = TokenTypes . LCURLY ; 
 + & & nextSibling . getType ( ) = = TokenTypes . RCURLY 
 + | | type = = TokenTypes . RCURLY 
 + & & previousSibling ! = null 
 + & & previousSibling . getType ( ) = = TokenTypes . LCURLY ; 
 + } 
 + 
 + / * * 
 + * Check if given ast is part of double brace initializer and if it 
 + * should omit checking if previous token is separated by whitespace . 
 + * @ param ast ast to check 
 + * @ return true if it should omit checking for previous token , false otherwise 
 + * / 
 + private static boolean isPartOfDoubleBraceInitializerForPreviousToken ( DetailAST ast ) { 
 + final boolean initializerBeginsAfterClassBegins = ast . getType ( ) = = TokenTypes . SLIST 
 + & & ast . getParent ( ) . getType ( ) = = TokenTypes . INSTANCE _ INIT ; 
 + final boolean classEndsAfterInitializerEnds = ast . getType ( ) = = TokenTypes . RCURLY 
 + & & ast . getPreviousSibling ( ) ! = null 
 + & & ast . getPreviousSibling ( ) . getType ( ) = = TokenTypes . INSTANCE _ INIT ; 
 + return initializerBeginsAfterClassBegins | | classEndsAfterInitializerEnds ; 
 + } 
 + 
 + / * * 
 + * Check if given ast is part of double brace initializer and if it 
 + * should omit checking if next token is separated by whitespace . 
 + * See < a href = " https : / / github . com / checkstyle / checkstyle / pull / 2845 " > 
 + * PR # 2845 < / a > for more information why this function was needed . 
 + * @ param ast ast to check 
 + * @ return true if it should omit checking for next token , false otherwise 
 + * / 
 + private static boolean isPartOfDoubleBraceInitializerForNextToken ( DetailAST ast ) { 
 + final boolean classBeginBeforeInitializerBegin = ast . getType ( ) = = TokenTypes . LCURLY 
 + & & ast . getNextSibling ( ) . getType ( ) = = TokenTypes . INSTANCE _ INIT ; 
 + final boolean initalizerEndsBeforeClassEnds = ast . getType ( ) = = TokenTypes . RCURLY 
 + & & ast . getParent ( ) . getType ( ) = = TokenTypes . SLIST 
 + & & ast . getParent ( ) . getParent ( ) . getType ( ) = = TokenTypes . INSTANCE _ INIT 
 + & & ast . getParent ( ) . getParent ( ) . getNextSibling ( ) . getType ( ) = = TokenTypes . RCURLY ; 
 + return classBeginBeforeInitializerBegin | | initalizerEndsBeforeClassEnds ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java 
 index d570cea . . 0891c6b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheckTest . java 
 @ @ - 165 , 6 + 165 , 20 @ @ public class WhitespaceAroundCheckTest 
 } 
 
 @ Test 
 + public void testAllowDoubleBraceInitialization ( ) throws Exception { 
 + final String [ ] expected = { 
 + " 11 : 73 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " } " ) , 
 + " 12 : 28 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " { " ) , 
 + " 14 : 28 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " { " ) , 
 + " 14 : 88 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " } " ) , 
 + " 17 : 10 : " + getCheckMessage ( MSG _ WS _ NOT _ FOLLOWED , " } " ) , 
 + " 17 : 24 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " } " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputDoubleBraceInitialization . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 public void testIgnoreEnhancedForColon ( ) throws Exception { 
 checkConfig . addAttribute ( " ignoreEnhancedForColon " , " false " ) ; 
 final String [ ] expected = { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputDoubleBraceInitialization . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputDoubleBraceInitialization . java 
 new file mode 100644 
 index 0000000 . . 5c24aec 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputDoubleBraceInitialization . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 + 
 + import java . util . Properties ; 
 + 
 + public class InputDoubleBraceInitialization { 
 + public InputDoubleBraceInitialization ( ) { 
 + new Properties ( ) { { 
 + setProperty ( " double curly braces " , " are not a style error " ) ; 
 + } } ; 
 + new Properties ( ) { { 
 + setProperty ( " double curly braces " , " are not a style error " ) ; } } ; 
 + new Properties ( ) { { setProperty ( " double curly braces " , " are not a style error " ) ; 
 + } } ; 
 + new Properties ( ) { { setProperty ( " double curly braces " , " are not a style error " ) ; } } ; 
 + new Properties ( ) { { 
 + setProperty ( " double curly braces " , " are not a style error " ) ; 
 + } private int i ; } ; 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml 
 index 1fd7671 . . 54e4c3c 100644 
 - - - a / src / xdocs / config _ whitespace . xml 
 + + + b / src / xdocs / config _ whitespace . xml 
 @ @ - 1833 , 6 + 1833 , 12 @ @ public @ interface Beta { } / / empty annotation type 
 < / code > , < code > allowEmptyTypes < / code > , < code > allowEmptyLoops < / code > and 
 < code > allowEmptyLambdas < / code > properties . 
 < / p > 
 + < p > This check does not flag as violation double brace initialization like : < / p > 
 + < pre > < code > 
 + new Properties ( ) { { 
 + setProperty ( " key " , " value " ) ; 
 + } } ; 
 + < / code > < / pre > 
 < / subsection > 
 
 < subsection name = " Properties " >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 index 132d707 . . f5f776a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / TokenTypes . java 
 @ @ - 487 , 7 + 487 , 7 @ @ public final class TokenTypes 
 * initialization block . < / p > 
 * 
 * @ see < a 
 - * href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 10 . htm " > Java 
 + * href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 10 . html " > Java 
 * Language Specification & sect ; 10 < / a > 
 * @ see # TYPE 
 * @ see # ARRAY _ INIT
