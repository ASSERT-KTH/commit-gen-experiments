BLEU SCORE: 0.02637407736896916

TEST MSG: Issue # 3219 : CLI Javadoc tree printer can print parse errors
GENERATED MSG: Apply parts of patch # 1952556 fixing some FindBugs bugs . Thanks to Travis Schneeberger

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java <nl> index c1b5de6 . . dc3c88c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java <nl> @ @ - 114 , 8 + 114 , 7 @ @ public final class AstTreeStringPrinter { <nl> * @ return string javadoc tree <nl> * / <nl> private static String parseAndPrintJavadocTree ( DetailAST node ) { <nl> - final JavadocDetailNodeParser parser = new JavadocDetailNodeParser ( ) ; <nl> - final DetailNode tree = parser . parseJavadocAsDetailNode ( node ) . getTree ( ) ; <nl> + final DetailNode tree = DetailNodeTreeStringPrinter . parseJavadocAsDetailNode ( node ) ; <nl> <nl> final String rootPrefix = getIndentation ( node ) ; <nl> final String prefix = rootPrefix . substring ( 0 , rootPrefix . length ( ) - 2 ) + " " ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java <nl> index 18ef30f . . e3f6066 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java <nl> @ @ - 22 , 10 + 22 , 13 @ @ package com . puppycrawl . tools . checkstyle ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . JavadocDetailNodeParser . ParseErrorMessage ; <nl> + import com . puppycrawl . tools . checkstyle . JavadocDetailNodeParser . ParseStatus ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; <nl> <nl> @ @ - 54 , 14 + 57 , 44 @ @ public final class DetailNodeTreeStringPrinter { <nl> } <nl> <nl> / * * <nl> + * Parse block comment DetailAST as Javadoc DetailNode tree . <nl> + * @ param blockComment DetailAST <nl> + * @ return DetailNode tree <nl> + * / <nl> + public static DetailNode parseJavadocAsDetailNode ( DetailAST blockComment ) { <nl> + final JavadocDetailNodeParser parser = new JavadocDetailNodeParser ( ) ; <nl> + final ParseStatus status = parser . parseJavadocAsDetailNode ( blockComment ) ; <nl> + if ( status . getParseErrorMessage ( ) ! = null ) { <nl> + throw new IllegalArgumentException ( getParseErrorMessage ( status . getParseErrorMessage ( ) ) ) ; <nl> + } <nl> + return status . getTree ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Parse javadoc comment to DetailNode tree . <nl> * @ param javadocComment javadoc comment content <nl> * @ return tree <nl> * / <nl> private static DetailNode parseJavadocAsDetailNode ( String javadocComment ) { <nl> - final JavadocDetailNodeParser parser = new JavadocDetailNodeParser ( ) ; <nl> - return parser . parseJavadocAsDetailNode ( createFakeBlockComment ( javadocComment ) ) <nl> - . getTree ( ) ; <nl> + final DetailAST blockComment = createFakeBlockComment ( javadocComment ) ; <nl> + return parseJavadocAsDetailNode ( blockComment ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Builds error message base on ParseErrorMessage ' s message key , its arguments , etc . <nl> + * @ param parseErrorMessage ParseErrorMessage <nl> + * @ return error message <nl> + * / <nl> + private static String getParseErrorMessage ( ParseErrorMessage parseErrorMessage ) { <nl> + final LocalizedMessage lmessage = new LocalizedMessage ( <nl> + parseErrorMessage . getLineNumber ( ) , <nl> + " com . puppycrawl . tools . checkstyle . checks . javadoc . messages " , <nl> + parseErrorMessage . getMessageKey ( ) , <nl> + parseErrorMessage . getMessageArguments ( ) , <nl> + " " , <nl> + DetailNodeTreeStringPrinter . class , <nl> + null ) ; <nl> + return " [ ERROR : " + parseErrorMessage . getLineNumber ( ) + " ] " + lmessage . getMessage ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java <nl> index a3db237 . . 6b4af67 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java <nl> @ @ - 51 , 4 + 51 , 19 @ @ public class DetailNodeTreeStringPrinterTest { <nl> Assert . assertEquals ( expected , actual ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testParseFileWithError ( ) throws Exception { <nl> + try { <nl> + DetailNodeTreeStringPrinter . printFileAst ( <nl> + new File ( getPath ( " InputJavadocWithError . javadoc " ) ) ) ; <nl> + Assert . fail ( " Javadoc parser didn ' t failed on missing end tag " ) ; <nl> + } <nl> + catch ( IllegalArgumentException ex ) { <nl> + final String expected = " [ ERROR : 0 ] Javadoc comment at column 1 has parse error . " <nl> + + " Missed HTML close tag ' qwe ' . Sometimes it means that close tag missed " <nl> + + " for one of previous tags . " ; <nl> + Assert . assertEquals ( expected , ex . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / astprinter / InputJavadocWithError . javadoc b / src / test / resources / com / puppycrawl / tools / checkstyle / astprinter / InputJavadocWithError . javadoc <nl> new file mode 100644 <nl> index 0000000 . . f531913 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / astprinter / InputJavadocWithError . javadoc <nl> @ @ - 0 , 0 + 1 @ @ <nl> + < qwe > <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> index 43f4652 . . d1ac18d 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> @ @ - 228 , 7 + 228 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> mAllowMissingPropertyJavadoc = aFlag ; <nl> } <nl> <nl> - / * * { @ inheritDoc } * / <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) <nl> { <nl> @ @ - 239 , 7 + 238 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> } ; <nl> } <nl> <nl> - / * * { @ inheritDoc } * / <nl> @ Override <nl> public int [ ] getAcceptableTokens ( ) <nl> { <nl> @ @ - 248 , 11 + 246 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> } ; <nl> } <nl> <nl> - / * * <nl> - * Checks Javadoc comments for a method or constructor . <nl> - * <nl> - * @ param aAST the tree node for the method or constructor . <nl> - * / <nl> @ Override <nl> protected final void processAST ( DetailAST aAST ) <nl> { <nl> @ @ - 272 , 11 + 265 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> } <nl> } <nl> <nl> - / * * <nl> - * Logs error if unable to load class information . <nl> - * <nl> - * @ param aIdent class name for which we can no load class . <nl> - * / <nl> @ Override <nl> protected final void logLoadError ( Token aIdent ) <nl> { <nl> @ @ - 297 , 7 + 285 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> * / <nl> protected boolean isMissingJavadocAllowed ( final DetailAST aAST ) <nl> { <nl> - return mAllowMissingJavadoc <nl> + return mAllowMissingJavadoc | | isOverrideMethod ( aAST ) <nl> | | ( mAllowMissingPropertyJavadoc <nl> & & ( isSetterMethod ( aAST ) | | isGetterMethod ( aAST ) ) ) ; <nl> } <nl> @ @ - 881 , 6 + 869 , 38 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> return true ; <nl> } <nl> <nl> + / * * <nl> + * Returns is a method has the " @ Override " annotation . <nl> + * @ param aAST the AST to check with <nl> + * @ return whether the AST represents a method that has the annotation . <nl> + * / <nl> + private boolean isOverrideMethod ( DetailAST aAST ) <nl> + { <nl> + / / Need it to be a method , cannot have an override on anything else . <nl> + / / Must also have MODIFIERS token to hold the @ Override <nl> + if ( ( TokenTypes . METHOD _ DEF ! = aAST . getType ( ) ) <nl> + | | ( TokenTypes . MODIFIERS ! = aAST . getFirstChild ( ) . getType ( ) ) ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + / / Now loop over all nodes while they are annotations looking for <nl> + / / an " @ Override " . <nl> + DetailAST node = ( DetailAST ) aAST . getFirstChild ( ) . getFirstChild ( ) ; <nl> + while ( ( null ! = node ) & & ( TokenTypes . ANNOTATION = = node . getType ( ) ) ) { <nl> + if ( ( node . getFirstChild ( ) . getType ( ) = = TokenTypes . AT ) <nl> + & & ( node . getFirstChild ( ) . getNextSibling ( ) . getType ( ) <nl> + = = TokenTypes . IDENT ) <nl> + & & ( " Override " . equals ( <nl> + node . getFirstChild ( ) . getNextSibling ( ) . getText ( ) ) ) ) <nl> + { <nl> + return true ; <nl> + } <nl> + node = ( DetailAST ) node . getNextSibling ( ) ; <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> / * * Stores useful information about declared exception . * / <nl> private class ExceptionInfo <nl> {

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java 
 index c1b5de6 . . dc3c88c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / AstTreeStringPrinter . java 
 @ @ - 114 , 8 + 114 , 7 @ @ public final class AstTreeStringPrinter { 
 * @ return string javadoc tree 
 * / 
 private static String parseAndPrintJavadocTree ( DetailAST node ) { 
 - final JavadocDetailNodeParser parser = new JavadocDetailNodeParser ( ) ; 
 - final DetailNode tree = parser . parseJavadocAsDetailNode ( node ) . getTree ( ) ; 
 + final DetailNode tree = DetailNodeTreeStringPrinter . parseJavadocAsDetailNode ( node ) ; 
 
 final String rootPrefix = getIndentation ( node ) ; 
 final String prefix = rootPrefix . substring ( 0 , rootPrefix . length ( ) - 2 ) + " " ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java 
 index 18ef30f . . e3f6066 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinter . java 
 @ @ - 22 , 10 + 22 , 13 @ @ package com . puppycrawl . tools . checkstyle ; 
 import java . io . File ; 
 import java . io . IOException ; 
 
 + import com . puppycrawl . tools . checkstyle . JavadocDetailNodeParser . ParseErrorMessage ; 
 + import com . puppycrawl . tools . checkstyle . JavadocDetailNodeParser . ParseStatus ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . FileText ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; 
 
 @ @ - 54 , 14 + 57 , 44 @ @ public final class DetailNodeTreeStringPrinter { 
 } 
 
 / * * 
 + * Parse block comment DetailAST as Javadoc DetailNode tree . 
 + * @ param blockComment DetailAST 
 + * @ return DetailNode tree 
 + * / 
 + public static DetailNode parseJavadocAsDetailNode ( DetailAST blockComment ) { 
 + final JavadocDetailNodeParser parser = new JavadocDetailNodeParser ( ) ; 
 + final ParseStatus status = parser . parseJavadocAsDetailNode ( blockComment ) ; 
 + if ( status . getParseErrorMessage ( ) ! = null ) { 
 + throw new IllegalArgumentException ( getParseErrorMessage ( status . getParseErrorMessage ( ) ) ) ; 
 + } 
 + return status . getTree ( ) ; 
 + } 
 + 
 + / * * 
 * Parse javadoc comment to DetailNode tree . 
 * @ param javadocComment javadoc comment content 
 * @ return tree 
 * / 
 private static DetailNode parseJavadocAsDetailNode ( String javadocComment ) { 
 - final JavadocDetailNodeParser parser = new JavadocDetailNodeParser ( ) ; 
 - return parser . parseJavadocAsDetailNode ( createFakeBlockComment ( javadocComment ) ) 
 - . getTree ( ) ; 
 + final DetailAST blockComment = createFakeBlockComment ( javadocComment ) ; 
 + return parseJavadocAsDetailNode ( blockComment ) ; 
 + } 
 + 
 + / * * 
 + * Builds error message base on ParseErrorMessage ' s message key , its arguments , etc . 
 + * @ param parseErrorMessage ParseErrorMessage 
 + * @ return error message 
 + * / 
 + private static String getParseErrorMessage ( ParseErrorMessage parseErrorMessage ) { 
 + final LocalizedMessage lmessage = new LocalizedMessage ( 
 + parseErrorMessage . getLineNumber ( ) , 
 + " com . puppycrawl . tools . checkstyle . checks . javadoc . messages " , 
 + parseErrorMessage . getMessageKey ( ) , 
 + parseErrorMessage . getMessageArguments ( ) , 
 + " " , 
 + DetailNodeTreeStringPrinter . class , 
 + null ) ; 
 + return " [ ERROR : " + parseErrorMessage . getLineNumber ( ) + " ] " + lmessage . getMessage ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java 
 index a3db237 . . 6b4af67 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / DetailNodeTreeStringPrinterTest . java 
 @ @ - 51 , 4 + 51 , 19 @ @ public class DetailNodeTreeStringPrinterTest { 
 Assert . assertEquals ( expected , actual ) ; 
 } 
 
 + @ Test 
 + public void testParseFileWithError ( ) throws Exception { 
 + try { 
 + DetailNodeTreeStringPrinter . printFileAst ( 
 + new File ( getPath ( " InputJavadocWithError . javadoc " ) ) ) ; 
 + Assert . fail ( " Javadoc parser didn ' t failed on missing end tag " ) ; 
 + } 
 + catch ( IllegalArgumentException ex ) { 
 + final String expected = " [ ERROR : 0 ] Javadoc comment at column 1 has parse error . " 
 + + " Missed HTML close tag ' qwe ' . Sometimes it means that close tag missed " 
 + + " for one of previous tags . " ; 
 + Assert . assertEquals ( expected , ex . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / astprinter / InputJavadocWithError . javadoc b / src / test / resources / com / puppycrawl / tools / checkstyle / astprinter / InputJavadocWithError . javadoc 
 new file mode 100644 
 index 0000000 . . f531913 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / astprinter / InputJavadocWithError . javadoc 
 @ @ - 0 , 0 + 1 @ @ 
 + < qwe > 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 index 43f4652 . . d1ac18d 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 @ @ - 228 , 7 + 228 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 mAllowMissingPropertyJavadoc = aFlag ; 
 } 
 
 - / * * { @ inheritDoc } * / 
 @ Override 
 public int [ ] getDefaultTokens ( ) 
 { 
 @ @ - 239 , 7 + 238 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 } ; 
 } 
 
 - / * * { @ inheritDoc } * / 
 @ Override 
 public int [ ] getAcceptableTokens ( ) 
 { 
 @ @ - 248 , 11 + 246 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 } ; 
 } 
 
 - / * * 
 - * Checks Javadoc comments for a method or constructor . 
 - * 
 - * @ param aAST the tree node for the method or constructor . 
 - * / 
 @ Override 
 protected final void processAST ( DetailAST aAST ) 
 { 
 @ @ - 272 , 11 + 265 , 6 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 } 
 } 
 
 - / * * 
 - * Logs error if unable to load class information . 
 - * 
 - * @ param aIdent class name for which we can no load class . 
 - * / 
 @ Override 
 protected final void logLoadError ( Token aIdent ) 
 { 
 @ @ - 297 , 7 + 285 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 * / 
 protected boolean isMissingJavadocAllowed ( final DetailAST aAST ) 
 { 
 - return mAllowMissingJavadoc 
 + return mAllowMissingJavadoc | | isOverrideMethod ( aAST ) 
 | | ( mAllowMissingPropertyJavadoc 
 & & ( isSetterMethod ( aAST ) | | isGetterMethod ( aAST ) ) ) ; 
 } 
 @ @ - 881 , 6 + 869 , 38 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 return true ; 
 } 
 
 + / * * 
 + * Returns is a method has the " @ Override " annotation . 
 + * @ param aAST the AST to check with 
 + * @ return whether the AST represents a method that has the annotation . 
 + * / 
 + private boolean isOverrideMethod ( DetailAST aAST ) 
 + { 
 + / / Need it to be a method , cannot have an override on anything else . 
 + / / Must also have MODIFIERS token to hold the @ Override 
 + if ( ( TokenTypes . METHOD _ DEF ! = aAST . getType ( ) ) 
 + | | ( TokenTypes . MODIFIERS ! = aAST . getFirstChild ( ) . getType ( ) ) ) 
 + { 
 + return false ; 
 + } 
 + 
 + / / Now loop over all nodes while they are annotations looking for 
 + / / an " @ Override " . 
 + DetailAST node = ( DetailAST ) aAST . getFirstChild ( ) . getFirstChild ( ) ; 
 + while ( ( null ! = node ) & & ( TokenTypes . ANNOTATION = = node . getType ( ) ) ) { 
 + if ( ( node . getFirstChild ( ) . getType ( ) = = TokenTypes . AT ) 
 + & & ( node . getFirstChild ( ) . getNextSibling ( ) . getType ( ) 
 + = = TokenTypes . IDENT ) 
 + & & ( " Override " . equals ( 
 + node . getFirstChild ( ) . getNextSibling ( ) . getText ( ) ) ) ) 
 + { 
 + return true ; 
 + } 
 + node = ( DetailAST ) node . getNextSibling ( ) ; 
 + } 
 + return false ; 
 + } 
 + 
 / * * Stores useful information about declared exception . * / 
 private class ExceptionInfo 
 {
