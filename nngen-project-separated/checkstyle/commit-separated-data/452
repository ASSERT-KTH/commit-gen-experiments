BLEU SCORE: 0.07393439482604361

TEST MSG: Pull # 5361 : fixed RequireThisCheck and enum constants handling
GENERATED MSG: Issue # 4856 : fixed NPE in RequireThisCheck for methods from base class

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index cc2bed1 . . fe671bb 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 367 , 6 + 367 , 10 @ @ public class RequireThisCheck extends AbstractCheck { <nl> final DetailAST ctorFrameNameIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> frameStack . addFirst ( new ConstructorFrame ( frame , ctorFrameNameIdent ) ) ; <nl> break ; <nl> + case TokenTypes . ENUM _ CONSTANT _ DEF : <nl> + final DetailAST ident = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> + ( ( ClassFrame ) frame ) . addStaticMember ( ident ) ; <nl> + break ; <nl> case TokenTypes . LITERAL _ CATCH : <nl> final AbstractFrame catchFrame = new CatchFrame ( frame , ast ) ; <nl> catchFrame . addIdent ( ast . findFirstToken ( TokenTypes . PARAMETER _ DEF ) . findFirstToken ( <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index c2289d0 . . 38ca351 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 308 , 6 + 308 , 14 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testEnumConstant ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; <nl> + checkConfig . addAttribute ( " validateOnlyOverlapping " , " false " ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputRequireThisEnumConstant . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void test ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumConstant . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumConstant . java <nl> new file mode 100644 <nl> index 0000000 . . 4cfc3b3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumConstant . java <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . requirethis ; <nl> + <nl> + public class InputRequireThisEnumConstant { <nl> + private final String TEST = " " ; <nl> + <nl> + public enum TestEnum { <nl> + TEST ; <nl> + <nl> + public TestEnum method ( ) { <nl> + return TEST ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java <nl> index 3955a49 . . ede0545 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java <nl> @ @ - 43 , 7 + 43 , 9 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " regexp " + File . separator + filename ) ; <nl> + + " regexp " + File . separator <nl> + + " regexpsingleline " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 53 , 7 + 55 , 7 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { <nl> final String [ ] expected = { <nl> " 69 : " + getCheckMessage ( MSG _ REGEXP _ EXCEEDED , illegal ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 66 , 7 + 68 , 7 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { <nl> final String [ ] expected = { <nl> " 69 : " + message , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 79 , 7 + 81 , 7 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { <nl> final String [ ] expected = { <nl> " 69 : " + getCheckMessage ( MSG _ REGEXP _ EXCEEDED , illegal ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 88 , 7 + 90 , 7 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { <nl> checkConfig . addAttribute ( " format " , illegal ) ; <nl> checkConfig . addAttribute ( " ignoreCase " , " false " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 100 , 7 + 102 , 7 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { <nl> " 0 : " + getCheckMessage ( MSG _ REGEXP _ MINIMUM , " 500 " , illegal ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 113 , 6 + 115 , 6 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { <nl> " 0 : someMessage " , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexpsingleline / InputRegexpSinglelineSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexpsingleline / InputRegexpSinglelineSemantic . java <nl> new file mode 100644 <nl> index 0000000 . . 2ac5d3a <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexpsingleline / InputRegexpSinglelineSemantic . java <nl> @ @ - 0 , 0 + 1 , 222 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . regexp . regexpsingleline ; <nl> + <nl> + import java . awt . * ; <nl> + import java . io . ByteArrayOutputStream ; <nl> + import java . io . File ; <nl> + <nl> + / * * <nl> + * Test case for detecting simple semantic errors . <nl> + * @ author Lars K Ã¼ hne <nl> + * * / <nl> + class InputRegexpSinglelineSemantic <nl> + { <nl> + / * Boolean instantiation in a static initializer * / <nl> + static { <nl> + Boolean x = new Boolean ( true ) ; <nl> + } <nl> + <nl> + / * Boolean instantiation in a non - static initializer * / <nl> + { <nl> + Boolean x = new Boolean ( true ) ; <nl> + Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; <nl> + } <nl> + <nl> + / * * fully qualified Boolean instantiation in a method . * * / <nl> + Boolean getBoolean ( ) <nl> + { <nl> + return new Boolean ( true ) ; <nl> + } <nl> + <nl> + void otherInstantiations ( ) <nl> + { <nl> + / / instantiation of classes in the same package <nl> + Object o1 = new InputBraces ( ) ; <nl> + Object o2 = new InputModifier ( ) ; <nl> + / / classes in another package with . * import <nl> + ByteArrayOutputStream s = new ByteArrayOutputStream ( ) ; <nl> + File f = new File ( " / tmp " ) ; <nl> + / / classes in another package with explicit import <nl> + Dimension dim = new Dimension ( ) ; <nl> + Color col = new Color ( 0 , 0 , 0 ) ; <nl> + } <nl> + <nl> + void exHandlerTest ( ) <nl> + { <nl> + try { <nl> + ; / / do stuff and don ' t handle exceptions in some cases <nl> + } <nl> + catch ( IllegalStateException emptyCatchIsAlwaysAnError ) { <nl> + } <nl> + catch ( NullPointerException ex ) { <nl> + / / can never happen , but only commentig this is currently an error <nl> + / / Possible future enhancement : allowEmptyCatch = " commented " <nl> + } <nl> + catch ( ArrayIndexOutOfBoundsException ex ) { <nl> + ; <nl> + / / can never happen , semicolon makes checkstyle happy <nl> + / / this is a workaround for above problem <nl> + } <nl> + catch ( NegativeArraySizeException ex ) { <nl> + { <nl> + } <nl> + / / can never happen , empty compound statement is another workaround <nl> + } <nl> + catch ( UnsupportedOperationException handledException ) { <nl> + System . out . println ( handledException . getMessage ( ) ) ; <nl> + } <nl> + catch ( SecurityException ex ) { / * hello * / } <nl> + catch ( StringIndexOutOfBoundsException ex ) { } <nl> + catch ( IllegalArgumentException ex ) { } <nl> + <nl> + try { <nl> + } <nl> + finally { <nl> + } <nl> + try { <nl> + / / something <nl> + } <nl> + finally { <nl> + / / something <nl> + } <nl> + try { <nl> + ; / / something <nl> + } <nl> + finally { <nl> + ; / / statement <nl> + } <nl> + } <nl> + <nl> + / * * test * * / <nl> + private static final long IGNORE = 666l + 666L ; <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + <nl> + public class EqualsVsHashCode1 <nl> + { <nl> + public boolean equals ( int a ) / / wrong arg type , don ' t flag <nl> + { <nl> + return a = = 1 ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode2 <nl> + { <nl> + public boolean equals ( String a ) / / flag <nl> + { <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode3 <nl> + { <nl> + public boolean equals ( Object a ) / / don ' t flag <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + public int hashCode ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode4 <nl> + { <nl> + / / in anon inner class <nl> + ByteArrayOutputStream bos1 = new ByteArrayOutputStream ( ) <nl> + { <nl> + public boolean equals ( Object a ) / / don ' t flag <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + public int hashCode ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + } ; <nl> + <nl> + ByteArrayOutputStream bos2 = new ByteArrayOutputStream ( ) <nl> + { <nl> + public boolean equals ( Object a ) / / flag <nl> + { <nl> + return true ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + public void triggerEmptyBlockWithoutBlock ( ) <nl> + { <nl> + / / an if statement without a block to increase test coverage <nl> + if ( true ) <nl> + return ; <nl> + } <nl> + <nl> + / / empty instance initializer <nl> + { <nl> + } <nl> + <nl> + public class EqualsVsHashCode5 <nl> + { <nl> + public < A > boolean equals ( int a ) / / wrong arg type , don ' t flag even with generics <nl> + { <nl> + return a = = 1 ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode6 <nl> + { <nl> + public < A > boolean equals ( Comparable < A > a ) / / flag , weven with generics <nl> + { <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> + private class InputBraces { <nl> + <nl> + } <nl> + <nl> + private class InputModifier { <nl> + <nl> + } <nl> + <nl> + synchronized void foo ( ) { <nl> + synchronized ( this ) { } / / not OK <nl> + synchronized ( Class . class ) { / / OK <nl> + synchronized ( new Object ( ) ) { <nl> + / / not OK if checking statements <nl> + } <nl> + } <nl> + } <nl> + <nl> + <nl> + static { <nl> + <nl> + int a = 0 ; } <nl> + <nl> + static { <nl> + <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index cc2bed1 . . fe671bb 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 367 , 6 + 367 , 10 @ @ public class RequireThisCheck extends AbstractCheck { 
 final DetailAST ctorFrameNameIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 frameStack . addFirst ( new ConstructorFrame ( frame , ctorFrameNameIdent ) ) ; 
 break ; 
 + case TokenTypes . ENUM _ CONSTANT _ DEF : 
 + final DetailAST ident = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 + ( ( ClassFrame ) frame ) . addStaticMember ( ident ) ; 
 + break ; 
 case TokenTypes . LITERAL _ CATCH : 
 final AbstractFrame catchFrame = new CatchFrame ( frame , ast ) ; 
 catchFrame . addIdent ( ast . findFirstToken ( TokenTypes . PARAMETER _ DEF ) . findFirstToken ( 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index c2289d0 . . 38ca351 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 308 , 6 + 308 , 14 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testEnumConstant ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; 
 + checkConfig . addAttribute ( " validateOnlyOverlapping " , " false " ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputRequireThisEnumConstant . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void test ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumConstant . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumConstant . java 
 new file mode 100644 
 index 0000000 . . 4cfc3b3 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumConstant . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . requirethis ; 
 + 
 + public class InputRequireThisEnumConstant { 
 + private final String TEST = " " ; 
 + 
 + public enum TestEnum { 
 + TEST ; 
 + 
 + public TestEnum method ( ) { 
 + return TEST ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java 
 index 3955a49 . . ede0545 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheckTest . java 
 @ @ - 43 , 7 + 43 , 9 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " regexp " + File . separator + filename ) ; 
 + + " regexp " + File . separator 
 + + " regexpsingleline " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 @ @ - 53 , 7 + 55 , 7 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { 
 final String [ ] expected = { 
 " 69 : " + getCheckMessage ( MSG _ REGEXP _ EXCEEDED , illegal ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 66 , 7 + 68 , 7 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { 
 final String [ ] expected = { 
 " 69 : " + message , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 79 , 7 + 81 , 7 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { 
 final String [ ] expected = { 
 " 69 : " + getCheckMessage ( MSG _ REGEXP _ EXCEEDED , illegal ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 88 , 7 + 90 , 7 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { 
 checkConfig . addAttribute ( " format " , illegal ) ; 
 checkConfig . addAttribute ( " ignoreCase " , " false " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 100 , 7 + 102 , 7 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { 
 " 0 : " + getCheckMessage ( MSG _ REGEXP _ MINIMUM , " 500 " , illegal ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 113 , 6 + 115 , 6 @ @ public class RegexpSinglelineCheckTest extends BaseFileSetCheckTestSupport { 
 " 0 : someMessage " , 
 } ; 
 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputRegexpSinglelineSemantic . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexpsingleline / InputRegexpSinglelineSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexpsingleline / InputRegexpSinglelineSemantic . java 
 new file mode 100644 
 index 0000000 . . 2ac5d3a 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / regexp / regexpsingleline / InputRegexpSinglelineSemantic . java 
 @ @ - 0 , 0 + 1 , 222 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . regexp . regexpsingleline ; 
 + 
 + import java . awt . * ; 
 + import java . io . ByteArrayOutputStream ; 
 + import java . io . File ; 
 + 
 + / * * 
 + * Test case for detecting simple semantic errors . 
 + * @ author Lars K Ã¼ hne 
 + * * / 
 + class InputRegexpSinglelineSemantic 
 + { 
 + / * Boolean instantiation in a static initializer * / 
 + static { 
 + Boolean x = new Boolean ( true ) ; 
 + } 
 + 
 + / * Boolean instantiation in a non - static initializer * / 
 + { 
 + Boolean x = new Boolean ( true ) ; 
 + Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; 
 + } 
 + 
 + / * * fully qualified Boolean instantiation in a method . * * / 
 + Boolean getBoolean ( ) 
 + { 
 + return new Boolean ( true ) ; 
 + } 
 + 
 + void otherInstantiations ( ) 
 + { 
 + / / instantiation of classes in the same package 
 + Object o1 = new InputBraces ( ) ; 
 + Object o2 = new InputModifier ( ) ; 
 + / / classes in another package with . * import 
 + ByteArrayOutputStream s = new ByteArrayOutputStream ( ) ; 
 + File f = new File ( " / tmp " ) ; 
 + / / classes in another package with explicit import 
 + Dimension dim = new Dimension ( ) ; 
 + Color col = new Color ( 0 , 0 , 0 ) ; 
 + } 
 + 
 + void exHandlerTest ( ) 
 + { 
 + try { 
 + ; / / do stuff and don ' t handle exceptions in some cases 
 + } 
 + catch ( IllegalStateException emptyCatchIsAlwaysAnError ) { 
 + } 
 + catch ( NullPointerException ex ) { 
 + / / can never happen , but only commentig this is currently an error 
 + / / Possible future enhancement : allowEmptyCatch = " commented " 
 + } 
 + catch ( ArrayIndexOutOfBoundsException ex ) { 
 + ; 
 + / / can never happen , semicolon makes checkstyle happy 
 + / / this is a workaround for above problem 
 + } 
 + catch ( NegativeArraySizeException ex ) { 
 + { 
 + } 
 + / / can never happen , empty compound statement is another workaround 
 + } 
 + catch ( UnsupportedOperationException handledException ) { 
 + System . out . println ( handledException . getMessage ( ) ) ; 
 + } 
 + catch ( SecurityException ex ) { / * hello * / } 
 + catch ( StringIndexOutOfBoundsException ex ) { } 
 + catch ( IllegalArgumentException ex ) { } 
 + 
 + try { 
 + } 
 + finally { 
 + } 
 + try { 
 + / / something 
 + } 
 + finally { 
 + / / something 
 + } 
 + try { 
 + ; / / something 
 + } 
 + finally { 
 + ; / / statement 
 + } 
 + } 
 + 
 + / * * test * * / 
 + private static final long IGNORE = 666l + 666L ; 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + 
 + public class EqualsVsHashCode1 
 + { 
 + public boolean equals ( int a ) / / wrong arg type , don ' t flag 
 + { 
 + return a = = 1 ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode2 
 + { 
 + public boolean equals ( String a ) / / flag 
 + { 
 + return true ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode3 
 + { 
 + public boolean equals ( Object a ) / / don ' t flag 
 + { 
 + return true ; 
 + } 
 + 
 + public int hashCode ( ) 
 + { 
 + return 0 ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode4 
 + { 
 + / / in anon inner class 
 + ByteArrayOutputStream bos1 = new ByteArrayOutputStream ( ) 
 + { 
 + public boolean equals ( Object a ) / / don ' t flag 
 + { 
 + return true ; 
 + } 
 + 
 + public int hashCode ( ) 
 + { 
 + return 0 ; 
 + } 
 + } ; 
 + 
 + ByteArrayOutputStream bos2 = new ByteArrayOutputStream ( ) 
 + { 
 + public boolean equals ( Object a ) / / flag 
 + { 
 + return true ; 
 + } 
 + } ; 
 + } 
 + 
 + public void triggerEmptyBlockWithoutBlock ( ) 
 + { 
 + / / an if statement without a block to increase test coverage 
 + if ( true ) 
 + return ; 
 + } 
 + 
 + / / empty instance initializer 
 + { 
 + } 
 + 
 + public class EqualsVsHashCode5 
 + { 
 + public < A > boolean equals ( int a ) / / wrong arg type , don ' t flag even with generics 
 + { 
 + return a = = 1 ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode6 
 + { 
 + public < A > boolean equals ( Comparable < A > a ) / / flag , weven with generics 
 + { 
 + return true ; 
 + } 
 + } 
 + 
 + private class InputBraces { 
 + 
 + } 
 + 
 + private class InputModifier { 
 + 
 + } 
 + 
 + synchronized void foo ( ) { 
 + synchronized ( this ) { } / / not OK 
 + synchronized ( Class . class ) { / / OK 
 + synchronized ( new Object ( ) ) { 
 + / / not OK if checking statements 
 + } 
 + } 
 + } 
 + 
 + 
 + static { 
 + 
 + int a = 0 ; } 
 + 
 + static { 
 + 
 + } 
 + }
