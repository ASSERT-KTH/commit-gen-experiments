BLEU SCORE: 0.30648392779474315

TEST MSG: Issue # 5759 : Update GenericWhitespaceCheck to log DetailAST
GENERATED MSG: Issue # 5759 : Update EmptyFor { Initializer , Iterator } PadCheck to log DetailAST

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java <nl> index 432fbb0 . . 6fa95be 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java <nl> @ @ - 42 , 22 + 42 , 22 @ @ public class GenericWhitespaceTest extends AbstractModuleTestSupport { <nl> final Map < String , String > messages = checkConfig . getMessages ( ) ; <nl> <nl> final String [ ] expected = { <nl> - " 12 : 16 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> - " 12 : 18 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> - " 12 : 36 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> - " 12 : 38 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> - " 12 : 47 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> - " 12 : 49 : " + getCheckMessage ( messages , msgFollowed , " > " ) , <nl> - " 12 : 49 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> - " 14 : 32 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> - " 14 : 34 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> - " 14 : 45 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> - " 15 : 32 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> - " 15 : 34 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> - " 15 : 45 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> - " 20 : 38 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> - " 20 : 40 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> - " 20 : 61 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> + " 12 : 17 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> + " 12 : 17 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> + " 12 : 37 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> + " 12 : 37 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> + " 12 : 48 : " + getCheckMessage ( messages , msgFollowed , " > " ) , <nl> + " 12 : 48 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> + " 12 : 50 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> + " 14 : 33 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> + " 14 : 33 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> + " 14 : 46 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> + " 15 : 33 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> + " 15 : 33 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> + " 15 : 46 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> + " 20 : 39 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> + " 20 : 39 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> + " 20 : 62 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> } ; <nl> <nl> final String filePath = getPath ( " InputWhitespaceAroundGenerics . java " ) ; <nl> @ @ - 76 , 32 + 76 , 32 @ @ public class GenericWhitespaceTest extends AbstractModuleTestSupport { <nl> final Map < String , String > messages = checkConfig . getMessages ( ) ; <nl> <nl> final String [ ] expected = { <nl> - " 16 : 13 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> - " 16 : 15 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> - " 16 : 23 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> - " 16 : 43 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> - " 16 : 45 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> - " 16 : 53 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> - " 17 : 13 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> - " 17 : 15 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> - " 17 : 20 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> - " 17 : 22 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> - " 17 : 30 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> - " 17 : 32 : " + getCheckMessage ( messages , msgFollowed , " > " ) , <nl> - " 17 : 32 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> - " 17 : 52 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> - " 17 : 54 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> - " 17 : 59 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> - " 17 : 61 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> - " 17 : 69 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> - " 17 : 71 : " + getCheckMessage ( messages , msgFollowed , " > " ) , <nl> - " 17 : 71 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> - " 30 : 17 : " + getCheckMessage ( messages , msgNotPreceded , " < " ) , <nl> - " 30 : 21 : " + getCheckMessage ( messages , msgIllegalFollow , " > " ) , <nl> - " 42 : 21 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> - " 42 : 30 : " + getCheckMessage ( messages , msgFollowed , " > " ) , <nl> - " 60 : 60 : " + getCheckMessage ( messages , msgNotPreceded , " & " ) , <nl> - " 63 : 60 : " + getCheckMessage ( messages , msgFollowed , " > " ) , <nl> + " 16 : 14 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> + " 16 : 14 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> + " 16 : 24 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> + " 16 : 44 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> + " 16 : 44 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> + " 16 : 54 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> + " 17 : 14 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> + " 17 : 14 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> + " 17 : 21 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> + " 17 : 21 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> + " 17 : 31 : " + getCheckMessage ( messages , msgFollowed , " > " ) , <nl> + " 17 : 31 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> + " 17 : 33 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> + " 17 : 53 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> + " 17 : 53 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> + " 17 : 60 : " + getCheckMessage ( messages , msgFollowed , " < " ) , <nl> + " 17 : 60 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> + " 17 : 70 : " + getCheckMessage ( messages , msgFollowed , " > " ) , <nl> + " 17 : 70 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> + " 17 : 72 : " + getCheckMessage ( messages , msgPreceded , " > " ) , <nl> + " 30 : 18 : " + getCheckMessage ( messages , msgNotPreceded , " < " ) , <nl> + " 30 : 20 : " + getCheckMessage ( messages , msgIllegalFollow , " > " ) , <nl> + " 42 : 22 : " + getCheckMessage ( messages , msgPreceded , " < " ) , <nl> + " 42 : 29 : " + getCheckMessage ( messages , msgFollowed , " > " ) , <nl> + " 60 : 59 : " + getCheckMessage ( messages , msgNotPreceded , " & " ) , <nl> + " 63 : 59 : " + getCheckMessage ( messages , msgFollowed , " > " ) , <nl> } ; <nl> <nl> final String filePath = getPath ( " InputGenericWhitespace . java " ) ; <nl> diff - - git a / src / it / java / org / checkstyle / suppressionxpathfilter / XpathRegressionGenericWhitespaceTest . java b / src / it / java / org / checkstyle / suppressionxpathfilter / XpathRegressionGenericWhitespaceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 22c983d <nl> - - - / dev / null <nl> + + + b / src / it / java / org / checkstyle / suppressionxpathfilter / XpathRegressionGenericWhitespaceTest . java <nl> @ @ - 0 , 0 + 1 , 255 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2018 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package org . checkstyle . suppressionxpathfilter ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . checks . whitespace . GenericWhitespaceCheck ; <nl> + <nl> + public class XpathRegressionGenericWhitespaceTest extends AbstractXpathTestSupport { <nl> + <nl> + private final String checkName = GenericWhitespaceCheck . class . getSimpleName ( ) ; <nl> + <nl> + @ Override <nl> + protected String getCheckName ( ) { <nl> + return checkName ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testProcessEnd ( ) throws Exception { <nl> + final File fileToProcess = <nl> + new File ( getPath ( " SuppressionXpathRegressionProcessEnd . java " ) ) ; <nl> + <nl> + final DefaultConfiguration moduleConfig = <nl> + createModuleConfig ( GenericWhitespaceCheck . class ) ; <nl> + <nl> + final String [ ] expectedViolation = { <nl> + " 6 : 22 : " + getCheckMessage ( GenericWhitespaceCheck . class , <nl> + GenericWhitespaceCheck . MSG _ WS _ PRECEDED , " > " ) , <nl> + } ; <nl> + <nl> + final List < String > expectedXpathQueries = Arrays . asList ( <nl> + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessEnd ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' bad ' ] / PARAMETERS / PARAMETER _ DEF [ @ text = ' cls ' ] " <nl> + + " / TYPE [ @ text = ' Class ' ] / TYPE _ ARGUMENTS / GENERIC _ END " <nl> + ) ; <nl> + <nl> + runVerifications ( moduleConfig , fileToProcess , expectedViolation , <nl> + expectedXpathQueries ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testProcessNestedGenericsOne ( ) throws Exception { <nl> + final File fileToProcess = <nl> + new File ( getPath ( " SuppressionXpathRegressionProcessNestedGenericsOne . java " ) ) ; <nl> + <nl> + final DefaultConfiguration moduleConfig = <nl> + createModuleConfig ( GenericWhitespaceCheck . class ) ; <nl> + <nl> + final String [ ] expectedViolation = { <nl> + " 6 : 22 : " + getCheckMessage ( GenericWhitespaceCheck . class , <nl> + GenericWhitespaceCheck . MSG _ WS _ NOT _ PRECEDED , " & " ) , <nl> + } ; <nl> + <nl> + final List < String > expectedXpathQueries = Arrays . asList ( <nl> + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessNestedGenericsOne ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS / TYPE _ PARAMETER [ @ text = ' E ' ] " <nl> + + " / TYPE _ UPPER _ BOUNDS [ @ text = ' Enum ' ] / TYPE _ ARGUMENTS / GENERIC _ END " <nl> + ) ; <nl> + <nl> + runVerifications ( moduleConfig , fileToProcess , expectedViolation , <nl> + expectedXpathQueries ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testProcessNestedGenericsTwo ( ) throws Exception { <nl> + final File fileToProcess = <nl> + new File ( getPath ( " SuppressionXpathRegressionProcessNestedGenericsTwo . java " ) ) ; <nl> + <nl> + final DefaultConfiguration moduleConfig = <nl> + createModuleConfig ( GenericWhitespaceCheck . class ) ; <nl> + <nl> + final String [ ] expectedViolation = { <nl> + " 6 : 22 : " + getCheckMessage ( GenericWhitespaceCheck . class , <nl> + GenericWhitespaceCheck . MSG _ WS _ FOLLOWED , " > " ) , <nl> + } ; <nl> + <nl> + final List < String > expectedXpathQueries = Arrays . asList ( <nl> + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessNestedGenericsTwo ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS / TYPE _ PARAMETER [ @ text = ' E ' ] " <nl> + + " / TYPE _ UPPER _ BOUNDS [ @ text = ' Enum ' ] / TYPE _ ARGUMENTS / GENERIC _ END " <nl> + ) ; <nl> + <nl> + runVerifications ( moduleConfig , fileToProcess , expectedViolation , <nl> + expectedXpathQueries ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testProcessNestedGenericsThree ( ) throws Exception { <nl> + final File fileToProcess = <nl> + new File ( getPath ( " SuppressionXpathRegressionProcessNestedGenericsThree . java " ) ) ; <nl> + <nl> + final DefaultConfiguration moduleConfig = <nl> + createModuleConfig ( GenericWhitespaceCheck . class ) ; <nl> + <nl> + final String [ ] expectedViolation = { <nl> + " 6 : 22 : " + getCheckMessage ( GenericWhitespaceCheck . class , <nl> + GenericWhitespaceCheck . MSG _ WS _ FOLLOWED , " > " ) , <nl> + } ; <nl> + <nl> + final List < String > expectedXpathQueries = Arrays . asList ( <nl> + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessNestedGenericsThree ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS / TYPE _ PARAMETER [ @ text = ' E ' ] " <nl> + + " / TYPE _ UPPER _ BOUNDS [ @ text = ' Enum ' ] / TYPE _ ARGUMENTS / GENERIC _ END " <nl> + ) ; <nl> + <nl> + runVerifications ( moduleConfig , fileToProcess , expectedViolation , <nl> + expectedXpathQueries ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testProcessSingleGenericOne ( ) throws Exception { <nl> + final File fileToProcess = <nl> + new File ( getPath ( " SuppressionXpathRegressionProcessSingleGenericOne . java " ) ) ; <nl> + <nl> + final DefaultConfiguration moduleConfig = <nl> + createModuleConfig ( GenericWhitespaceCheck . class ) ; <nl> + <nl> + final String [ ] expectedViolation = { <nl> + " 6 : 37 : " + getCheckMessage ( GenericWhitespaceCheck . class , <nl> + GenericWhitespaceCheck . MSG _ WS _ FOLLOWED , " > " ) , <nl> + } ; <nl> + <nl> + final List < String > expectedXpathQueries = Arrays . asList ( <nl> + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessSingleGenericOne ' ] / OBJBLOCK " <nl> + + " / VARIABLE _ DEF [ @ text = ' bad ' ] / ASSIGN / EXPR / METHOD _ CALL / DOT [ @ text = ' Collections ' ] " <nl> + + " / TYPE _ ARGUMENTS / GENERIC _ END " <nl> + ) ; <nl> + <nl> + runVerifications ( moduleConfig , fileToProcess , expectedViolation , <nl> + expectedXpathQueries ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testProcessSingleGenericTwo ( ) throws Exception { <nl> + final File fileToProcess = <nl> + new File ( getPath ( " SuppressionXpathRegressionProcessSingleGenericTwo . java " ) ) ; <nl> + <nl> + final DefaultConfiguration moduleConfig = <nl> + createModuleConfig ( GenericWhitespaceCheck . class ) ; <nl> + <nl> + final String [ ] expectedViolation = { <nl> + " 6 : 7 : " + getCheckMessage ( GenericWhitespaceCheck . class , <nl> + GenericWhitespaceCheck . MSG _ WS _ ILLEGAL _ FOLLOW , " > " ) , <nl> + } ; <nl> + <nl> + final List < String > expectedXpathQueries = Arrays . asList ( <nl> + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessSingleGenericTwo ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS / GENERIC _ END " <nl> + ) ; <nl> + <nl> + runVerifications ( moduleConfig , fileToProcess , expectedViolation , <nl> + expectedXpathQueries ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testProcessStartOne ( ) throws Exception { <nl> + final File fileToProcess = <nl> + new File ( getPath ( " SuppressionXpathRegressionProcessStartOne . java " ) ) ; <nl> + <nl> + final DefaultConfiguration moduleConfig = <nl> + createModuleConfig ( GenericWhitespaceCheck . class ) ; <nl> + <nl> + final String [ ] expectedViolation = { <nl> + " 6 : 11 : " + getCheckMessage ( GenericWhitespaceCheck . class , <nl> + GenericWhitespaceCheck . MSG _ WS _ NOT _ PRECEDED , " < " ) , <nl> + } ; <nl> + <nl> + final List < String > expectedXpathQueries = Arrays . asList ( <nl> + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartOne ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS " , <nl> + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartOne ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS / GENERIC _ START " <nl> + ) ; <nl> + <nl> + runVerifications ( moduleConfig , fileToProcess , expectedViolation , <nl> + expectedXpathQueries ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testProcessStartTwo ( ) throws Exception { <nl> + final File fileToProcess = <nl> + new File ( getPath ( " SuppressionXpathRegressionProcessStartTwo . java " ) ) ; <nl> + <nl> + final DefaultConfiguration moduleConfig = <nl> + createModuleConfig ( GenericWhitespaceCheck . class ) ; <nl> + <nl> + final String [ ] expectedViolation = { <nl> + " 6 : 34 : " + getCheckMessage ( GenericWhitespaceCheck . class , <nl> + GenericWhitespaceCheck . MSG _ WS _ PRECEDED , " < " ) , <nl> + } ; <nl> + <nl> + final List < String > expectedXpathQueries = Arrays . asList ( <nl> + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartTwo ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' bad ' ] / PARAMETERS / PARAMETER _ DEF [ @ text = ' consumer ' ] " <nl> + + " / TYPE [ @ text = ' Consumer ' ] / TYPE _ ARGUMENTS " , <nl> + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartTwo ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' bad ' ] / PARAMETERS / PARAMETER _ DEF [ @ text = ' consumer ' ] " <nl> + + " / TYPE [ @ text = ' Consumer ' ] / TYPE _ ARGUMENTS / GENERIC _ START " <nl> + ) ; <nl> + <nl> + runVerifications ( moduleConfig , fileToProcess , expectedViolation , <nl> + expectedXpathQueries ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testProcessStartThree ( ) throws Exception { <nl> + final File fileToProcess = <nl> + new File ( getPath ( " SuppressionXpathRegressionProcessStartThree . java " ) ) ; <nl> + <nl> + final DefaultConfiguration moduleConfig = <nl> + createModuleConfig ( GenericWhitespaceCheck . class ) ; <nl> + <nl> + final String [ ] expectedViolation = { <nl> + " 6 : 5 : " + getCheckMessage ( GenericWhitespaceCheck . class , <nl> + GenericWhitespaceCheck . MSG _ WS _ FOLLOWED , " < " ) , <nl> + } ; <nl> + <nl> + final List < String > expectedXpathQueries = Arrays . asList ( <nl> + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartThree ' ] / OBJBLOCK " <nl> + + " / METHOD _ DEF [ @ text = ' bad ' ] " , <nl> + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartThree ' ] / OBJBLOCK / " <nl> + + " METHOD _ DEF [ @ text = ' bad ' ] / MODIFIERS " , <nl> + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartThree ' ] / OBJBLOCK / " <nl> + + " METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS " , <nl> + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartThree ' ] / OBJBLOCK / " <nl> + + " METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS / GENERIC _ START " <nl> + ) ; <nl> + <nl> + runVerifications ( moduleConfig , fileToProcess , expectedViolation , <nl> + expectedXpathQueries ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessEnd . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessEnd . java <nl> new file mode 100644 <nl> index 0000000 . . 8c7053f <nl> - - - / dev / null <nl> + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessEnd . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; <nl> + <nl> + import java . util . Collections ; <nl> + <nl> + public class SuppressionXpathRegressionProcessEnd { <nl> + void bad ( Class < ? > cls ) { / / warn <nl> + } <nl> + void good ( Class < ? > cls ) { <nl> + } <nl> + } <nl> diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsOne . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsOne . java <nl> new file mode 100644 <nl> index 0000000 . . ea4bc33 <nl> - - - / dev / null <nl> + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsOne . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; <nl> + <nl> + import java . io . Serializable ; <nl> + <nl> + public class SuppressionXpathRegressionProcessNestedGenericsOne { <nl> + < E extends Enum < E > & Serializable > void bad ( ) { / / warn <nl> + } <nl> + < E extends Enum < E > & Serializable > void good ( ) { <nl> + } <nl> + } <nl> diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsThree . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsThree . java <nl> new file mode 100644 <nl> index 0000000 . . 8b951e1 <nl> - - - / dev / null <nl> + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsThree . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; <nl> + <nl> + import java . io . Serializable ; <nl> + <nl> + public class SuppressionXpathRegressionProcessNestedGenericsThree { <nl> + < E extends Enum < E > , X > void bad ( ) { / / warn <nl> + } <nl> + < E extends Enum < E > , X > void good ( ) { <nl> + } <nl> + } <nl> diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsTwo . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsTwo . java <nl> new file mode 100644 <nl> index 0000000 . . 9c7e752 <nl> - - - / dev / null <nl> + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsTwo . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; <nl> + <nl> + import java . io . Serializable ; <nl> + <nl> + public class SuppressionXpathRegressionProcessNestedGenericsTwo { <nl> + < E extends Enum < E > & Serializable > void bad ( ) { / / warn <nl> + } <nl> + < E extends Enum < E > & Serializable > void good ( ) { <nl> + } <nl> + } <nl> diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessSingleGenericOne . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessSingleGenericOne . java <nl> new file mode 100644 <nl> index 0000000 . . 4f75663 <nl> - - - / dev / null <nl> + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessSingleGenericOne . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; <nl> + <nl> + import java . util . Collections ; <nl> + <nl> + public class SuppressionXpathRegressionProcessSingleGenericOne { <nl> + Object bad = Collections . < Object > emptySet ( ) ; / / warn <nl> + Object good = Collections . < Object > emptySet ( ) ; <nl> + } <nl> diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessSingleGenericTwo . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessSingleGenericTwo . java <nl> new file mode 100644 <nl> index 0000000 . . 162e5e4 <nl> - - - / dev / null <nl> + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessSingleGenericTwo . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; <nl> + <nl> + import java . io . Serializable ; <nl> + <nl> + public class SuppressionXpathRegressionProcessSingleGenericTwo { <nl> + < E > void bad ( ) { / / warn <nl> + } <nl> + < E > void good ( ) { <nl> + } <nl> + } <nl> diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartOne . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartOne . java <nl> new file mode 100644 <nl> index 0000000 . . 01ba2e0 <nl> - - - / dev / null <nl> + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartOne . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; <nl> + <nl> + import java . util . Collections ; <nl> + <nl> + public class SuppressionXpathRegressionProcessStartOne { <nl> + public < E > void bad ( ) { / / warn <nl> + } <nl> + public < E > void good ( ) { <nl> + } <nl> + } <nl> diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartThree . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartThree . java <nl> new file mode 100644 <nl> index 0000000 . . 03cdb11 <nl> - - - / dev / null <nl> + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartThree . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; <nl> + <nl> + import java . util . Collections ; <nl> + <nl> + public class SuppressionXpathRegressionProcessStartThree { <nl> + < E > void bad ( ) { / / warn <nl> + } <nl> + < E > void good ( ) { <nl> + } <nl> + } <nl> diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartTwo . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartTwo . java <nl> new file mode 100644 <nl> index 0000000 . . 46f93c7 <nl> - - - / dev / null <nl> + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartTwo . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; <nl> + <nl> + import java . util . function . Consumer ; <nl> + <nl> + public class SuppressionXpathRegressionProcessStartTwo { <nl> + public < E > void bad ( Consumer < E > consumer ) { / / warn <nl> + } <nl> + public < E > void good ( Consumer < E > consumer ) { <nl> + } <nl> + } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> index 0ce3142 . . 3e1e02a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> @ @ - 152 , 7 + 152 , 7 @ @ public class GenericWhitespaceCheck extends AbstractCheck { <nl> <nl> if ( before > = 0 & & Character . isWhitespace ( line . charAt ( before ) ) <nl> & & ! containsWhitespaceBefore ( before , line ) ) { <nl> - log ( ast . getLineNo ( ) , before , MSG _ WS _ PRECEDED , CLOSE _ ANGLE _ BRACKET ) ; <nl> + log ( ast , MSG _ WS _ PRECEDED , CLOSE _ ANGLE _ BRACKET ) ; <nl> } <nl> <nl> if ( after < line . length ( ) ) { <nl> @ @ - 186 , 14 + 186 , 14 @ @ public class GenericWhitespaceCheck extends AbstractCheck { <nl> if ( indexOfAmp > = 1 <nl> & & containsWhitespaceBetween ( after , indexOfAmp , line ) ) { <nl> if ( indexOfAmp - after = = 0 ) { <nl> - log ( ast . getLineNo ( ) , after , MSG _ WS _ NOT _ PRECEDED , " & " ) ; <nl> + log ( ast , MSG _ WS _ NOT _ PRECEDED , " & " ) ; <nl> } <nl> else if ( indexOfAmp - after ! = 1 ) { <nl> - log ( ast . getLineNo ( ) , after , MSG _ WS _ FOLLOWED , CLOSE _ ANGLE _ BRACKET ) ; <nl> + log ( ast , MSG _ WS _ FOLLOWED , CLOSE _ ANGLE _ BRACKET ) ; <nl> } <nl> } <nl> else if ( line . charAt ( after ) = = ' ' ) { <nl> - log ( ast . getLineNo ( ) , after , MSG _ WS _ FOLLOWED , CLOSE _ ANGLE _ BRACKET ) ; <nl> + log ( ast , MSG _ WS _ FOLLOWED , CLOSE _ ANGLE _ BRACKET ) ; <nl> } <nl> } <nl> <nl> @ @ - 212 , 11 + 212 , 11 @ @ public class GenericWhitespaceCheck extends AbstractCheck { <nl> / / + - - - whitespace not allowed <nl> if ( isGenericBeforeMethod ( ast ) ) { <nl> if ( Character . isWhitespace ( charAfter ) ) { <nl> - log ( ast . getLineNo ( ) , after , MSG _ WS _ FOLLOWED , CLOSE _ ANGLE _ BRACKET ) ; <nl> + log ( ast , MSG _ WS _ FOLLOWED , CLOSE _ ANGLE _ BRACKET ) ; <nl> } <nl> } <nl> else if ( ! isCharacterValidAfterGenericEnd ( charAfter ) ) { <nl> - log ( ast . getLineNo ( ) , after , MSG _ WS _ ILLEGAL _ FOLLOW , CLOSE _ ANGLE _ BRACKET ) ; <nl> + log ( ast , MSG _ WS _ ILLEGAL _ FOLLOW , CLOSE _ ANGLE _ BRACKET ) ; <nl> } <nl> } <nl> <nl> @ @ - 266 , 19 + 266 , 19 @ @ public class GenericWhitespaceCheck extends AbstractCheck { <nl> | | grandparent . getType ( ) = = TokenTypes . METHOD _ DEF ) ) { <nl> / / Require whitespace <nl> if ( ! Character . isWhitespace ( line . charAt ( before ) ) ) { <nl> - log ( ast . getLineNo ( ) , before , MSG _ WS _ NOT _ PRECEDED , OPEN _ ANGLE _ BRACKET ) ; <nl> + log ( ast , MSG _ WS _ NOT _ PRECEDED , OPEN _ ANGLE _ BRACKET ) ; <nl> } <nl> } <nl> / / Whitespace not required <nl> else if ( Character . isWhitespace ( line . charAt ( before ) ) <nl> & & ! containsWhitespaceBefore ( before , line ) ) { <nl> - log ( ast . getLineNo ( ) , before , MSG _ WS _ PRECEDED , OPEN _ ANGLE _ BRACKET ) ; <nl> + log ( ast , MSG _ WS _ PRECEDED , OPEN _ ANGLE _ BRACKET ) ; <nl> } <nl> } <nl> <nl> if ( after < line . length ( ) <nl> & & Character . isWhitespace ( line . charAt ( after ) ) ) { <nl> - log ( ast . getLineNo ( ) , after , MSG _ WS _ FOLLOWED , OPEN _ ANGLE _ BRACKET ) ; <nl> + log ( ast , MSG _ WS _ FOLLOWED , OPEN _ ANGLE _ BRACKET ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> index db0fcb1 . . 999591a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java <nl> @ @ - 59 , 32 + 59 , 32 @ @ public class GenericWhitespaceCheckTest <nl> public void testDefault ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( GenericWhitespaceCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 16 : 13 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> - " 16 : 15 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , <nl> - " 16 : 23 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> - " 16 : 43 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> - " 16 : 45 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , <nl> - " 16 : 53 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> - " 17 : 13 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> - " 17 : 15 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , <nl> - " 17 : 20 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> - " 17 : 22 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , <nl> - " 17 : 30 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> - " 17 : 32 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , <nl> - " 17 : 32 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> - " 17 : 52 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> - " 17 : 54 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , <nl> - " 17 : 59 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> - " 17 : 61 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , <nl> - " 17 : 69 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> - " 17 : 71 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , <nl> - " 17 : 71 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> - " 30 : 17 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " < " ) , <nl> - " 30 : 21 : " + getCheckMessage ( MSG _ WS _ ILLEGAL _ FOLLOW , " > " ) , <nl> - " 42 : 21 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> - " 42 : 30 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , <nl> - " 60 : 60 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " & " ) , <nl> - " 63 : 60 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , <nl> + " 16 : 14 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> + " 16 : 14 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , <nl> + " 16 : 24 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> + " 16 : 44 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> + " 16 : 44 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , <nl> + " 16 : 54 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> + " 17 : 14 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> + " 17 : 14 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , <nl> + " 17 : 21 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> + " 17 : 21 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , <nl> + " 17 : 31 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> + " 17 : 31 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , <nl> + " 17 : 33 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> + " 17 : 53 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> + " 17 : 53 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , <nl> + " 17 : 60 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> + " 17 : 60 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , <nl> + " 17 : 70 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> + " 17 : 70 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , <nl> + " 17 : 72 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> + " 30 : 18 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " < " ) , <nl> + " 30 : 20 : " + getCheckMessage ( MSG _ WS _ ILLEGAL _ FOLLOW , " > " ) , <nl> + " 42 : 22 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> + " 42 : 29 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , <nl> + " 60 : 59 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " & " ) , <nl> + " 63 : 59 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputGenericWhitespaceDefault . java " ) , expected ) ; <nl> } <nl> @ @ - 93 , 8 + 93 , 8 @ @ public class GenericWhitespaceCheckTest <nl> public void testAtTheStartOfTheLine ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( GenericWhitespaceCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 10 : 1 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> - " 12 : 1 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> + " 10 : 2 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , <nl> + " 12 : 2 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputGenericWhitespaceAtStartOfTheLine . java " ) , expected ) ; <nl> } <nl> @ @ - 103 , 7 + 103 , 7 @ @ public class GenericWhitespaceCheckTest <nl> public void testNestedGeneric ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( GenericWhitespaceCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 11 : 2 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " & " ) , <nl> + " 11 : 1 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " & " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputGenericWhitespaceNested . java " ) , expected ) ; <nl> } <nl> @ @ - 133 , 7 + 133 , 7 @ @ public class GenericWhitespaceCheckTest <nl> public void testMethodReferences2 ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( GenericWhitespaceCheck . class ) ; <nl> final String [ ] expected = { <nl> - " 10 : 70 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , <nl> + " 10 : 69 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputGenericWhitespaceMethodRef2 . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / xdocs / config _ filters . xml b / src / xdocs / config _ filters . xml <nl> index 43133cb . . 8b06ef0 100644 <nl> - - - a / src / xdocs / config _ filters . xml <nl> + + + b / src / xdocs / config _ filters . xml <nl> @ @ - 693 , 6 + 693 , 7 @ @ public class UserService { <nl> < li > FallThrough < / li > <nl> < li > FinalLocalVariable < / li > <nl> < li > FinalParameters < / li > <nl> + < li > GenericWhitespace < / li > <nl> < li > HiddenField < / li > <nl> < li > HideUtilityClassConstructor < / li > <nl> < li > IllegalInstantiation < / li >
NEAREST DIFF (one line): diff - - git a / . ci / wercker . sh b / . ci / wercker . sh <nl> index c371efc . . 19e4679 100755 <nl> - - - a / . ci / wercker . sh <nl> + + + b / . ci / wercker . sh <nl> @ @ - 77 , 6 + 77 , 17 @ @ no - error - apex - core ) <nl> rm - rf incubator - apex - core <nl> ; ; <nl> <nl> + no - error - equalsverifier ) <nl> + CS _ POM _ VERSION = $ ( mvn - e - q - Dexec . executable = ' echo ' - Dexec . args = ' $ { project . version } ' \ <nl> + - - non - recursive org . codehaus . mojo : exec - maven - plugin : 1 . 3 . 1 : exec ) <nl> + echo CS _ version : $ { CS _ POM _ VERSION } <nl> + checkout _ from https : / / github . com / jqno / equalsverifier . git <nl> + cd . ci - temp / equalsverifier <nl> + mvn - e compile checkstyle : check - Dcheckstyle . version = $ { CS _ POM _ VERSION } <nl> + cd . . / <nl> + rm - rf equalsverifier <nl> + ; ; <nl> + <nl> no - error - hibernate - search ) <nl> CS _ POM _ VERSION = $ ( mvn - e - q - Dexec . executable = ' echo ' - Dexec . args = ' $ { project . version } ' \ <nl> - - non - recursive org . codehaus . mojo : exec - maven - plugin : 1 . 3 . 1 : exec ) <nl> diff - - git a / wercker . yml b / wercker . yml <nl> index 56cddb0 . . 03f4eea 100644 <nl> - - - a / wercker . yml <nl> + + + b / wercker . yml <nl> @ @ - 99 , 6 + 99 , 16 @ @ build : <nl> echo " build is skipped . . . " <nl> fi <nl> <nl> + - script : <nl> + name : NoErrorTest - EqualsVerifier <nl> + code : | <nl> + if [ [ $ SKIP _ CI = = ' false ' ] ] ; then <nl> + echo " Command : . / . ci / wercker . sh no - error - equalsverifier " <nl> + . / . ci / wercker . sh no - error - equalsverifier <nl> + else <nl> + echo " build is skipped . . . " <nl> + fi <nl> + <nl> # Disabled as it result in " svn : E175002 : Unexpected HTTP status 429 ' Too Many Requests ' " <nl> # even for " svn checkout - r 14923 . . . . " <nl> # - script :

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java 
 index 432fbb0 . . 6fa95be 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule462horizontalwhitespace / GenericWhitespaceTest . java 
 @ @ - 42 , 22 + 42 , 22 @ @ public class GenericWhitespaceTest extends AbstractModuleTestSupport { 
 final Map < String , String > messages = checkConfig . getMessages ( ) ; 
 
 final String [ ] expected = { 
 - " 12 : 16 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 - " 12 : 18 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 - " 12 : 36 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 - " 12 : 38 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 - " 12 : 47 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 - " 12 : 49 : " + getCheckMessage ( messages , msgFollowed , " > " ) , 
 - " 12 : 49 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 - " 14 : 32 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 - " 14 : 34 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 - " 14 : 45 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 - " 15 : 32 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 - " 15 : 34 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 - " 15 : 45 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 - " 20 : 38 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 - " 20 : 40 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 - " 20 : 61 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 + " 12 : 17 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 + " 12 : 17 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 + " 12 : 37 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 + " 12 : 37 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 + " 12 : 48 : " + getCheckMessage ( messages , msgFollowed , " > " ) , 
 + " 12 : 48 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 + " 12 : 50 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 + " 14 : 33 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 + " 14 : 33 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 + " 14 : 46 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 + " 15 : 33 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 + " 15 : 33 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 + " 15 : 46 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 + " 20 : 39 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 + " 20 : 39 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 + " 20 : 62 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 } ; 
 
 final String filePath = getPath ( " InputWhitespaceAroundGenerics . java " ) ; 
 @ @ - 76 , 32 + 76 , 32 @ @ public class GenericWhitespaceTest extends AbstractModuleTestSupport { 
 final Map < String , String > messages = checkConfig . getMessages ( ) ; 
 
 final String [ ] expected = { 
 - " 16 : 13 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 - " 16 : 15 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 - " 16 : 23 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 - " 16 : 43 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 - " 16 : 45 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 - " 16 : 53 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 - " 17 : 13 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 - " 17 : 15 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 - " 17 : 20 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 - " 17 : 22 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 - " 17 : 30 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 - " 17 : 32 : " + getCheckMessage ( messages , msgFollowed , " > " ) , 
 - " 17 : 32 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 - " 17 : 52 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 - " 17 : 54 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 - " 17 : 59 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 - " 17 : 61 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 - " 17 : 69 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 - " 17 : 71 : " + getCheckMessage ( messages , msgFollowed , " > " ) , 
 - " 17 : 71 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 - " 30 : 17 : " + getCheckMessage ( messages , msgNotPreceded , " < " ) , 
 - " 30 : 21 : " + getCheckMessage ( messages , msgIllegalFollow , " > " ) , 
 - " 42 : 21 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 - " 42 : 30 : " + getCheckMessage ( messages , msgFollowed , " > " ) , 
 - " 60 : 60 : " + getCheckMessage ( messages , msgNotPreceded , " & " ) , 
 - " 63 : 60 : " + getCheckMessage ( messages , msgFollowed , " > " ) , 
 + " 16 : 14 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 + " 16 : 14 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 + " 16 : 24 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 + " 16 : 44 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 + " 16 : 44 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 + " 16 : 54 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 + " 17 : 14 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 + " 17 : 14 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 + " 17 : 21 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 + " 17 : 21 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 + " 17 : 31 : " + getCheckMessage ( messages , msgFollowed , " > " ) , 
 + " 17 : 31 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 + " 17 : 33 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 + " 17 : 53 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 + " 17 : 53 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 + " 17 : 60 : " + getCheckMessage ( messages , msgFollowed , " < " ) , 
 + " 17 : 60 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 + " 17 : 70 : " + getCheckMessage ( messages , msgFollowed , " > " ) , 
 + " 17 : 70 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 + " 17 : 72 : " + getCheckMessage ( messages , msgPreceded , " > " ) , 
 + " 30 : 18 : " + getCheckMessage ( messages , msgNotPreceded , " < " ) , 
 + " 30 : 20 : " + getCheckMessage ( messages , msgIllegalFollow , " > " ) , 
 + " 42 : 22 : " + getCheckMessage ( messages , msgPreceded , " < " ) , 
 + " 42 : 29 : " + getCheckMessage ( messages , msgFollowed , " > " ) , 
 + " 60 : 59 : " + getCheckMessage ( messages , msgNotPreceded , " & " ) , 
 + " 63 : 59 : " + getCheckMessage ( messages , msgFollowed , " > " ) , 
 } ; 
 
 final String filePath = getPath ( " InputGenericWhitespace . java " ) ; 
 diff - - git a / src / it / java / org / checkstyle / suppressionxpathfilter / XpathRegressionGenericWhitespaceTest . java b / src / it / java / org / checkstyle / suppressionxpathfilter / XpathRegressionGenericWhitespaceTest . java 
 new file mode 100644 
 index 0000000 . . 22c983d 
 - - - / dev / null 
 + + + b / src / it / java / org / checkstyle / suppressionxpathfilter / XpathRegressionGenericWhitespaceTest . java 
 @ @ - 0 , 0 + 1 , 255 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2018 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package org . checkstyle . suppressionxpathfilter ; 
 + 
 + import java . io . File ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . checks . whitespace . GenericWhitespaceCheck ; 
 + 
 + public class XpathRegressionGenericWhitespaceTest extends AbstractXpathTestSupport { 
 + 
 + private final String checkName = GenericWhitespaceCheck . class . getSimpleName ( ) ; 
 + 
 + @ Override 
 + protected String getCheckName ( ) { 
 + return checkName ; 
 + } 
 + 
 + @ Test 
 + public void testProcessEnd ( ) throws Exception { 
 + final File fileToProcess = 
 + new File ( getPath ( " SuppressionXpathRegressionProcessEnd . java " ) ) ; 
 + 
 + final DefaultConfiguration moduleConfig = 
 + createModuleConfig ( GenericWhitespaceCheck . class ) ; 
 + 
 + final String [ ] expectedViolation = { 
 + " 6 : 22 : " + getCheckMessage ( GenericWhitespaceCheck . class , 
 + GenericWhitespaceCheck . MSG _ WS _ PRECEDED , " > " ) , 
 + } ; 
 + 
 + final List < String > expectedXpathQueries = Arrays . asList ( 
 + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessEnd ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' bad ' ] / PARAMETERS / PARAMETER _ DEF [ @ text = ' cls ' ] " 
 + + " / TYPE [ @ text = ' Class ' ] / TYPE _ ARGUMENTS / GENERIC _ END " 
 + ) ; 
 + 
 + runVerifications ( moduleConfig , fileToProcess , expectedViolation , 
 + expectedXpathQueries ) ; 
 + } 
 + 
 + @ Test 
 + public void testProcessNestedGenericsOne ( ) throws Exception { 
 + final File fileToProcess = 
 + new File ( getPath ( " SuppressionXpathRegressionProcessNestedGenericsOne . java " ) ) ; 
 + 
 + final DefaultConfiguration moduleConfig = 
 + createModuleConfig ( GenericWhitespaceCheck . class ) ; 
 + 
 + final String [ ] expectedViolation = { 
 + " 6 : 22 : " + getCheckMessage ( GenericWhitespaceCheck . class , 
 + GenericWhitespaceCheck . MSG _ WS _ NOT _ PRECEDED , " & " ) , 
 + } ; 
 + 
 + final List < String > expectedXpathQueries = Arrays . asList ( 
 + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessNestedGenericsOne ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS / TYPE _ PARAMETER [ @ text = ' E ' ] " 
 + + " / TYPE _ UPPER _ BOUNDS [ @ text = ' Enum ' ] / TYPE _ ARGUMENTS / GENERIC _ END " 
 + ) ; 
 + 
 + runVerifications ( moduleConfig , fileToProcess , expectedViolation , 
 + expectedXpathQueries ) ; 
 + } 
 + 
 + @ Test 
 + public void testProcessNestedGenericsTwo ( ) throws Exception { 
 + final File fileToProcess = 
 + new File ( getPath ( " SuppressionXpathRegressionProcessNestedGenericsTwo . java " ) ) ; 
 + 
 + final DefaultConfiguration moduleConfig = 
 + createModuleConfig ( GenericWhitespaceCheck . class ) ; 
 + 
 + final String [ ] expectedViolation = { 
 + " 6 : 22 : " + getCheckMessage ( GenericWhitespaceCheck . class , 
 + GenericWhitespaceCheck . MSG _ WS _ FOLLOWED , " > " ) , 
 + } ; 
 + 
 + final List < String > expectedXpathQueries = Arrays . asList ( 
 + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessNestedGenericsTwo ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS / TYPE _ PARAMETER [ @ text = ' E ' ] " 
 + + " / TYPE _ UPPER _ BOUNDS [ @ text = ' Enum ' ] / TYPE _ ARGUMENTS / GENERIC _ END " 
 + ) ; 
 + 
 + runVerifications ( moduleConfig , fileToProcess , expectedViolation , 
 + expectedXpathQueries ) ; 
 + } 
 + 
 + @ Test 
 + public void testProcessNestedGenericsThree ( ) throws Exception { 
 + final File fileToProcess = 
 + new File ( getPath ( " SuppressionXpathRegressionProcessNestedGenericsThree . java " ) ) ; 
 + 
 + final DefaultConfiguration moduleConfig = 
 + createModuleConfig ( GenericWhitespaceCheck . class ) ; 
 + 
 + final String [ ] expectedViolation = { 
 + " 6 : 22 : " + getCheckMessage ( GenericWhitespaceCheck . class , 
 + GenericWhitespaceCheck . MSG _ WS _ FOLLOWED , " > " ) , 
 + } ; 
 + 
 + final List < String > expectedXpathQueries = Arrays . asList ( 
 + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessNestedGenericsThree ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS / TYPE _ PARAMETER [ @ text = ' E ' ] " 
 + + " / TYPE _ UPPER _ BOUNDS [ @ text = ' Enum ' ] / TYPE _ ARGUMENTS / GENERIC _ END " 
 + ) ; 
 + 
 + runVerifications ( moduleConfig , fileToProcess , expectedViolation , 
 + expectedXpathQueries ) ; 
 + } 
 + 
 + @ Test 
 + public void testProcessSingleGenericOne ( ) throws Exception { 
 + final File fileToProcess = 
 + new File ( getPath ( " SuppressionXpathRegressionProcessSingleGenericOne . java " ) ) ; 
 + 
 + final DefaultConfiguration moduleConfig = 
 + createModuleConfig ( GenericWhitespaceCheck . class ) ; 
 + 
 + final String [ ] expectedViolation = { 
 + " 6 : 37 : " + getCheckMessage ( GenericWhitespaceCheck . class , 
 + GenericWhitespaceCheck . MSG _ WS _ FOLLOWED , " > " ) , 
 + } ; 
 + 
 + final List < String > expectedXpathQueries = Arrays . asList ( 
 + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessSingleGenericOne ' ] / OBJBLOCK " 
 + + " / VARIABLE _ DEF [ @ text = ' bad ' ] / ASSIGN / EXPR / METHOD _ CALL / DOT [ @ text = ' Collections ' ] " 
 + + " / TYPE _ ARGUMENTS / GENERIC _ END " 
 + ) ; 
 + 
 + runVerifications ( moduleConfig , fileToProcess , expectedViolation , 
 + expectedXpathQueries ) ; 
 + } 
 + 
 + @ Test 
 + public void testProcessSingleGenericTwo ( ) throws Exception { 
 + final File fileToProcess = 
 + new File ( getPath ( " SuppressionXpathRegressionProcessSingleGenericTwo . java " ) ) ; 
 + 
 + final DefaultConfiguration moduleConfig = 
 + createModuleConfig ( GenericWhitespaceCheck . class ) ; 
 + 
 + final String [ ] expectedViolation = { 
 + " 6 : 7 : " + getCheckMessage ( GenericWhitespaceCheck . class , 
 + GenericWhitespaceCheck . MSG _ WS _ ILLEGAL _ FOLLOW , " > " ) , 
 + } ; 
 + 
 + final List < String > expectedXpathQueries = Arrays . asList ( 
 + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessSingleGenericTwo ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS / GENERIC _ END " 
 + ) ; 
 + 
 + runVerifications ( moduleConfig , fileToProcess , expectedViolation , 
 + expectedXpathQueries ) ; 
 + } 
 + 
 + @ Test 
 + public void testProcessStartOne ( ) throws Exception { 
 + final File fileToProcess = 
 + new File ( getPath ( " SuppressionXpathRegressionProcessStartOne . java " ) ) ; 
 + 
 + final DefaultConfiguration moduleConfig = 
 + createModuleConfig ( GenericWhitespaceCheck . class ) ; 
 + 
 + final String [ ] expectedViolation = { 
 + " 6 : 11 : " + getCheckMessage ( GenericWhitespaceCheck . class , 
 + GenericWhitespaceCheck . MSG _ WS _ NOT _ PRECEDED , " < " ) , 
 + } ; 
 + 
 + final List < String > expectedXpathQueries = Arrays . asList ( 
 + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartOne ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS " , 
 + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartOne ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS / GENERIC _ START " 
 + ) ; 
 + 
 + runVerifications ( moduleConfig , fileToProcess , expectedViolation , 
 + expectedXpathQueries ) ; 
 + } 
 + 
 + @ Test 
 + public void testProcessStartTwo ( ) throws Exception { 
 + final File fileToProcess = 
 + new File ( getPath ( " SuppressionXpathRegressionProcessStartTwo . java " ) ) ; 
 + 
 + final DefaultConfiguration moduleConfig = 
 + createModuleConfig ( GenericWhitespaceCheck . class ) ; 
 + 
 + final String [ ] expectedViolation = { 
 + " 6 : 34 : " + getCheckMessage ( GenericWhitespaceCheck . class , 
 + GenericWhitespaceCheck . MSG _ WS _ PRECEDED , " < " ) , 
 + } ; 
 + 
 + final List < String > expectedXpathQueries = Arrays . asList ( 
 + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartTwo ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' bad ' ] / PARAMETERS / PARAMETER _ DEF [ @ text = ' consumer ' ] " 
 + + " / TYPE [ @ text = ' Consumer ' ] / TYPE _ ARGUMENTS " , 
 + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartTwo ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' bad ' ] / PARAMETERS / PARAMETER _ DEF [ @ text = ' consumer ' ] " 
 + + " / TYPE [ @ text = ' Consumer ' ] / TYPE _ ARGUMENTS / GENERIC _ START " 
 + ) ; 
 + 
 + runVerifications ( moduleConfig , fileToProcess , expectedViolation , 
 + expectedXpathQueries ) ; 
 + } 
 + 
 + @ Test 
 + public void testProcessStartThree ( ) throws Exception { 
 + final File fileToProcess = 
 + new File ( getPath ( " SuppressionXpathRegressionProcessStartThree . java " ) ) ; 
 + 
 + final DefaultConfiguration moduleConfig = 
 + createModuleConfig ( GenericWhitespaceCheck . class ) ; 
 + 
 + final String [ ] expectedViolation = { 
 + " 6 : 5 : " + getCheckMessage ( GenericWhitespaceCheck . class , 
 + GenericWhitespaceCheck . MSG _ WS _ FOLLOWED , " < " ) , 
 + } ; 
 + 
 + final List < String > expectedXpathQueries = Arrays . asList ( 
 + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartThree ' ] / OBJBLOCK " 
 + + " / METHOD _ DEF [ @ text = ' bad ' ] " , 
 + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartThree ' ] / OBJBLOCK / " 
 + + " METHOD _ DEF [ @ text = ' bad ' ] / MODIFIERS " , 
 + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartThree ' ] / OBJBLOCK / " 
 + + " METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS " , 
 + " / CLASS _ DEF [ @ text = ' SuppressionXpathRegressionProcessStartThree ' ] / OBJBLOCK / " 
 + + " METHOD _ DEF [ @ text = ' bad ' ] / TYPE _ PARAMETERS / GENERIC _ START " 
 + ) ; 
 + 
 + runVerifications ( moduleConfig , fileToProcess , expectedViolation , 
 + expectedXpathQueries ) ; 
 + } 
 + 
 + } 
 diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessEnd . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessEnd . java 
 new file mode 100644 
 index 0000000 . . 8c7053f 
 - - - / dev / null 
 + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessEnd . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; 
 + 
 + import java . util . Collections ; 
 + 
 + public class SuppressionXpathRegressionProcessEnd { 
 + void bad ( Class < ? > cls ) { / / warn 
 + } 
 + void good ( Class < ? > cls ) { 
 + } 
 + } 
 diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsOne . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsOne . java 
 new file mode 100644 
 index 0000000 . . ea4bc33 
 - - - / dev / null 
 + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsOne . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; 
 + 
 + import java . io . Serializable ; 
 + 
 + public class SuppressionXpathRegressionProcessNestedGenericsOne { 
 + < E extends Enum < E > & Serializable > void bad ( ) { / / warn 
 + } 
 + < E extends Enum < E > & Serializable > void good ( ) { 
 + } 
 + } 
 diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsThree . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsThree . java 
 new file mode 100644 
 index 0000000 . . 8b951e1 
 - - - / dev / null 
 + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsThree . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; 
 + 
 + import java . io . Serializable ; 
 + 
 + public class SuppressionXpathRegressionProcessNestedGenericsThree { 
 + < E extends Enum < E > , X > void bad ( ) { / / warn 
 + } 
 + < E extends Enum < E > , X > void good ( ) { 
 + } 
 + } 
 diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsTwo . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsTwo . java 
 new file mode 100644 
 index 0000000 . . 9c7e752 
 - - - / dev / null 
 + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessNestedGenericsTwo . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; 
 + 
 + import java . io . Serializable ; 
 + 
 + public class SuppressionXpathRegressionProcessNestedGenericsTwo { 
 + < E extends Enum < E > & Serializable > void bad ( ) { / / warn 
 + } 
 + < E extends Enum < E > & Serializable > void good ( ) { 
 + } 
 + } 
 diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessSingleGenericOne . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessSingleGenericOne . java 
 new file mode 100644 
 index 0000000 . . 4f75663 
 - - - / dev / null 
 + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessSingleGenericOne . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; 
 + 
 + import java . util . Collections ; 
 + 
 + public class SuppressionXpathRegressionProcessSingleGenericOne { 
 + Object bad = Collections . < Object > emptySet ( ) ; / / warn 
 + Object good = Collections . < Object > emptySet ( ) ; 
 + } 
 diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessSingleGenericTwo . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessSingleGenericTwo . java 
 new file mode 100644 
 index 0000000 . . 162e5e4 
 - - - / dev / null 
 + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessSingleGenericTwo . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; 
 + 
 + import java . io . Serializable ; 
 + 
 + public class SuppressionXpathRegressionProcessSingleGenericTwo { 
 + < E > void bad ( ) { / / warn 
 + } 
 + < E > void good ( ) { 
 + } 
 + } 
 diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartOne . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartOne . java 
 new file mode 100644 
 index 0000000 . . 01ba2e0 
 - - - / dev / null 
 + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartOne . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; 
 + 
 + import java . util . Collections ; 
 + 
 + public class SuppressionXpathRegressionProcessStartOne { 
 + public < E > void bad ( ) { / / warn 
 + } 
 + public < E > void good ( ) { 
 + } 
 + } 
 diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartThree . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartThree . java 
 new file mode 100644 
 index 0000000 . . 03cdb11 
 - - - / dev / null 
 + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartThree . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; 
 + 
 + import java . util . Collections ; 
 + 
 + public class SuppressionXpathRegressionProcessStartThree { 
 + < E > void bad ( ) { / / warn 
 + } 
 + < E > void good ( ) { 
 + } 
 + } 
 diff - - git a / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartTwo . java b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartTwo . java 
 new file mode 100644 
 index 0000000 . . 46f93c7 
 - - - / dev / null 
 + + + b / src / it / resources / org / checkstyle / suppressionxpathfilter / genericwhitespace / SuppressionXpathRegressionProcessStartTwo . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package org . checkstyle . suppressionxpathfilter . genericwhitespace ; 
 + 
 + import java . util . function . Consumer ; 
 + 
 + public class SuppressionXpathRegressionProcessStartTwo { 
 + public < E > void bad ( Consumer < E > consumer ) { / / warn 
 + } 
 + public < E > void good ( Consumer < E > consumer ) { 
 + } 
 + } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 index 0ce3142 . . 3e1e02a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 @ @ - 152 , 7 + 152 , 7 @ @ public class GenericWhitespaceCheck extends AbstractCheck { 
 
 if ( before > = 0 & & Character . isWhitespace ( line . charAt ( before ) ) 
 & & ! containsWhitespaceBefore ( before , line ) ) { 
 - log ( ast . getLineNo ( ) , before , MSG _ WS _ PRECEDED , CLOSE _ ANGLE _ BRACKET ) ; 
 + log ( ast , MSG _ WS _ PRECEDED , CLOSE _ ANGLE _ BRACKET ) ; 
 } 
 
 if ( after < line . length ( ) ) { 
 @ @ - 186 , 14 + 186 , 14 @ @ public class GenericWhitespaceCheck extends AbstractCheck { 
 if ( indexOfAmp > = 1 
 & & containsWhitespaceBetween ( after , indexOfAmp , line ) ) { 
 if ( indexOfAmp - after = = 0 ) { 
 - log ( ast . getLineNo ( ) , after , MSG _ WS _ NOT _ PRECEDED , " & " ) ; 
 + log ( ast , MSG _ WS _ NOT _ PRECEDED , " & " ) ; 
 } 
 else if ( indexOfAmp - after ! = 1 ) { 
 - log ( ast . getLineNo ( ) , after , MSG _ WS _ FOLLOWED , CLOSE _ ANGLE _ BRACKET ) ; 
 + log ( ast , MSG _ WS _ FOLLOWED , CLOSE _ ANGLE _ BRACKET ) ; 
 } 
 } 
 else if ( line . charAt ( after ) = = ' ' ) { 
 - log ( ast . getLineNo ( ) , after , MSG _ WS _ FOLLOWED , CLOSE _ ANGLE _ BRACKET ) ; 
 + log ( ast , MSG _ WS _ FOLLOWED , CLOSE _ ANGLE _ BRACKET ) ; 
 } 
 } 
 
 @ @ - 212 , 11 + 212 , 11 @ @ public class GenericWhitespaceCheck extends AbstractCheck { 
 / / + - - - whitespace not allowed 
 if ( isGenericBeforeMethod ( ast ) ) { 
 if ( Character . isWhitespace ( charAfter ) ) { 
 - log ( ast . getLineNo ( ) , after , MSG _ WS _ FOLLOWED , CLOSE _ ANGLE _ BRACKET ) ; 
 + log ( ast , MSG _ WS _ FOLLOWED , CLOSE _ ANGLE _ BRACKET ) ; 
 } 
 } 
 else if ( ! isCharacterValidAfterGenericEnd ( charAfter ) ) { 
 - log ( ast . getLineNo ( ) , after , MSG _ WS _ ILLEGAL _ FOLLOW , CLOSE _ ANGLE _ BRACKET ) ; 
 + log ( ast , MSG _ WS _ ILLEGAL _ FOLLOW , CLOSE _ ANGLE _ BRACKET ) ; 
 } 
 } 
 
 @ @ - 266 , 19 + 266 , 19 @ @ public class GenericWhitespaceCheck extends AbstractCheck { 
 | | grandparent . getType ( ) = = TokenTypes . METHOD _ DEF ) ) { 
 / / Require whitespace 
 if ( ! Character . isWhitespace ( line . charAt ( before ) ) ) { 
 - log ( ast . getLineNo ( ) , before , MSG _ WS _ NOT _ PRECEDED , OPEN _ ANGLE _ BRACKET ) ; 
 + log ( ast , MSG _ WS _ NOT _ PRECEDED , OPEN _ ANGLE _ BRACKET ) ; 
 } 
 } 
 / / Whitespace not required 
 else if ( Character . isWhitespace ( line . charAt ( before ) ) 
 & & ! containsWhitespaceBefore ( before , line ) ) { 
 - log ( ast . getLineNo ( ) , before , MSG _ WS _ PRECEDED , OPEN _ ANGLE _ BRACKET ) ; 
 + log ( ast , MSG _ WS _ PRECEDED , OPEN _ ANGLE _ BRACKET ) ; 
 } 
 } 
 
 if ( after < line . length ( ) 
 & & Character . isWhitespace ( line . charAt ( after ) ) ) { 
 - log ( ast . getLineNo ( ) , after , MSG _ WS _ FOLLOWED , OPEN _ ANGLE _ BRACKET ) ; 
 + log ( ast , MSG _ WS _ FOLLOWED , OPEN _ ANGLE _ BRACKET ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 index db0fcb1 . . 999591a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheckTest . java 
 @ @ - 59 , 32 + 59 , 32 @ @ public class GenericWhitespaceCheckTest 
 public void testDefault ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( GenericWhitespaceCheck . class ) ; 
 final String [ ] expected = { 
 - " 16 : 13 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 - " 16 : 15 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , 
 - " 16 : 23 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 - " 16 : 43 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 - " 16 : 45 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , 
 - " 16 : 53 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 - " 17 : 13 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 - " 17 : 15 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , 
 - " 17 : 20 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 - " 17 : 22 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , 
 - " 17 : 30 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 - " 17 : 32 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , 
 - " 17 : 32 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 - " 17 : 52 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 - " 17 : 54 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , 
 - " 17 : 59 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 - " 17 : 61 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , 
 - " 17 : 69 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 - " 17 : 71 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , 
 - " 17 : 71 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 - " 30 : 17 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " < " ) , 
 - " 30 : 21 : " + getCheckMessage ( MSG _ WS _ ILLEGAL _ FOLLOW , " > " ) , 
 - " 42 : 21 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 - " 42 : 30 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , 
 - " 60 : 60 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " & " ) , 
 - " 63 : 60 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , 
 + " 16 : 14 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 + " 16 : 14 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , 
 + " 16 : 24 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 + " 16 : 44 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 + " 16 : 44 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , 
 + " 16 : 54 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 + " 17 : 14 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 + " 17 : 14 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , 
 + " 17 : 21 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 + " 17 : 21 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , 
 + " 17 : 31 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 + " 17 : 31 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , 
 + " 17 : 33 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 + " 17 : 53 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 + " 17 : 53 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , 
 + " 17 : 60 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 + " 17 : 60 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " < " ) , 
 + " 17 : 70 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 + " 17 : 70 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , 
 + " 17 : 72 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 + " 30 : 18 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " < " ) , 
 + " 30 : 20 : " + getCheckMessage ( MSG _ WS _ ILLEGAL _ FOLLOW , " > " ) , 
 + " 42 : 22 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 + " 42 : 29 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , 
 + " 60 : 59 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " & " ) , 
 + " 63 : 59 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputGenericWhitespaceDefault . java " ) , expected ) ; 
 } 
 @ @ - 93 , 8 + 93 , 8 @ @ public class GenericWhitespaceCheckTest 
 public void testAtTheStartOfTheLine ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( GenericWhitespaceCheck . class ) ; 
 final String [ ] expected = { 
 - " 10 : 1 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 - " 12 : 1 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 + " 10 : 2 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " > " ) , 
 + " 12 : 2 : " + getCheckMessage ( MSG _ WS _ PRECEDED , " < " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputGenericWhitespaceAtStartOfTheLine . java " ) , expected ) ; 
 } 
 @ @ - 103 , 7 + 103 , 7 @ @ public class GenericWhitespaceCheckTest 
 public void testNestedGeneric ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( GenericWhitespaceCheck . class ) ; 
 final String [ ] expected = { 
 - " 11 : 2 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " & " ) , 
 + " 11 : 1 : " + getCheckMessage ( MSG _ WS _ NOT _ PRECEDED , " & " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputGenericWhitespaceNested . java " ) , expected ) ; 
 } 
 @ @ - 133 , 7 + 133 , 7 @ @ public class GenericWhitespaceCheckTest 
 public void testMethodReferences2 ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( GenericWhitespaceCheck . class ) ; 
 final String [ ] expected = { 
 - " 10 : 70 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , 
 + " 10 : 69 : " + getCheckMessage ( MSG _ WS _ FOLLOWED , " > " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputGenericWhitespaceMethodRef2 . java " ) , expected ) ; 
 } 
 diff - - git a / src / xdocs / config _ filters . xml b / src / xdocs / config _ filters . xml 
 index 43133cb . . 8b06ef0 100644 
 - - - a / src / xdocs / config _ filters . xml 
 + + + b / src / xdocs / config _ filters . xml 
 @ @ - 693 , 6 + 693 , 7 @ @ public class UserService { 
 < li > FallThrough < / li > 
 < li > FinalLocalVariable < / li > 
 < li > FinalParameters < / li > 
 + < li > GenericWhitespace < / li > 
 < li > HiddenField < / li > 
 < li > HideUtilityClassConstructor < / li > 
 < li > IllegalInstantiation < / li >

NEAREST DIFF:
diff - - git a / . ci / wercker . sh b / . ci / wercker . sh 
 index c371efc . . 19e4679 100755 
 - - - a / . ci / wercker . sh 
 + + + b / . ci / wercker . sh 
 @ @ - 77 , 6 + 77 , 17 @ @ no - error - apex - core ) 
 rm - rf incubator - apex - core 
 ; ; 
 
 + no - error - equalsverifier ) 
 + CS _ POM _ VERSION = $ ( mvn - e - q - Dexec . executable = ' echo ' - Dexec . args = ' $ { project . version } ' \ 
 + - - non - recursive org . codehaus . mojo : exec - maven - plugin : 1 . 3 . 1 : exec ) 
 + echo CS _ version : $ { CS _ POM _ VERSION } 
 + checkout _ from https : / / github . com / jqno / equalsverifier . git 
 + cd . ci - temp / equalsverifier 
 + mvn - e compile checkstyle : check - Dcheckstyle . version = $ { CS _ POM _ VERSION } 
 + cd . . / 
 + rm - rf equalsverifier 
 + ; ; 
 + 
 no - error - hibernate - search ) 
 CS _ POM _ VERSION = $ ( mvn - e - q - Dexec . executable = ' echo ' - Dexec . args = ' $ { project . version } ' \ 
 - - non - recursive org . codehaus . mojo : exec - maven - plugin : 1 . 3 . 1 : exec ) 
 diff - - git a / wercker . yml b / wercker . yml 
 index 56cddb0 . . 03f4eea 100644 
 - - - a / wercker . yml 
 + + + b / wercker . yml 
 @ @ - 99 , 6 + 99 , 16 @ @ build : 
 echo " build is skipped . . . " 
 fi 
 
 + - script : 
 + name : NoErrorTest - EqualsVerifier 
 + code : | 
 + if [ [ $ SKIP _ CI = = ' false ' ] ] ; then 
 + echo " Command : . / . ci / wercker . sh no - error - equalsverifier " 
 + . / . ci / wercker . sh no - error - equalsverifier 
 + else 
 + echo " build is skipped . . . " 
 + fi 
 + 
 # Disabled as it result in " svn : E175002 : Unexpected HTTP status 429 ' Too Many Requests ' " 
 # even for " svn checkout - r 14923 . . . . " 
 # - script :
