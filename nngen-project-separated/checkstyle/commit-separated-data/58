BLEU SCORE: 0.09980099403873663

TEST MSG: Issue # 6532 : aligned javadoc / xdoc for NeedBraces
GENERATED MSG: Issue # 2436 : NeedBraces : allow no body loops

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> index 7b21572 . . 306ecc2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java <nl> @ @ - 29 , 107 + 29 , 98 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; <nl> * < p > <nl> * Checks for braces around code blocks . <nl> * < / p > <nl> - * < p > By default the check will check the following blocks : <nl> - * { @ link TokenTypes # LITERAL _ DO LITERAL _ DO } , <nl> - * { @ link TokenTypes # LITERAL _ ELSE LITERAL _ ELSE } , <nl> - * { @ link TokenTypes # LITERAL _ FOR LITERAL _ FOR } , <nl> - * { @ link TokenTypes # LITERAL _ IF LITERAL _ IF } , <nl> - * { @ link TokenTypes # LITERAL _ WHILE LITERAL _ WHILE } . <nl> - * < / p > <nl> + * < ul > <nl> + * < li > <nl> + * Property { @ code allowSingleLineStatement } - allow single - line statements without braces . <nl> + * Default value is { @ code false } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code allowEmptyLoopBody } - allow loops with empty bodies . <nl> + * Default value is { @ code false } . <nl> + * < / li > <nl> + * < li > <nl> + * Property { @ code tokens } - tokens to check <nl> + * Default value is : <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ DO " > <nl> + * LITERAL _ DO < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ ELSE " > <nl> + * LITERAL _ ELSE < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ FOR " > <nl> + * LITERAL _ FOR < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ IF " > <nl> + * LITERAL _ IF < / a > , <nl> + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ WHILE " > <nl> + * LITERAL _ WHILE < / a > . <nl> + * < / li > <nl> + * < / ul > <nl> * < p > <nl> - * An example of how to configure the check is : <nl> + * To configure the check : <nl> * < / p > <nl> * < pre > <nl> * & lt ; module name = " NeedBraces " / & gt ; <nl> * < / pre > <nl> - * < p > An example of how to configure the check for { @ code if } and <nl> - * { @ code else } blocks is : <nl> + * < p > <nl> + * To configure the check for { @ code if } and { @ code else } blocks : <nl> * < / p > <nl> * < pre > <nl> - * & lt ; module name = " NeedBraces " & gt ; <nl> - * & lt ; property name = " tokens " value = " LITERAL _ IF , LITERAL _ ELSE " / & gt ; <nl> + * & lt ; module name = & quot ; NeedBraces & quot ; & gt ; <nl> + * & lt ; property name = & quot ; tokens & quot ; value = & quot ; LITERAL _ IF , LITERAL _ ELSE & quot ; / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> - * Check has the following options : <nl> - * < p > < b > allowSingleLineStatement < / b > which allows single - line statements without braces , e . g . : < / p > <nl> - * < p > <nl> - * { @ code <nl> - * if ( obj . isValid ( ) ) return true ; <nl> - * } <nl> - * < / p > <nl> - * < p > <nl> - * { @ code <nl> - * while ( obj . isValid ( ) ) return true ; <nl> - * } <nl> - * < / p > <nl> - * < p > <nl> - * { @ code <nl> - * do this . notify ( ) ; while ( o ! = null ) ; <nl> - * } <nl> - * < / p > <nl> * < p > <nl> - * { @ code <nl> - * for ( int i = 0 ; ; ) this . notify ( ) ; <nl> - * } <nl> - * < / p > <nl> - * < p > < b > allowEmptyLoopBody < / b > which allows loops with empty bodies , e . g . : < / p > <nl> - * < p > <nl> - * { @ code <nl> - * while ( value . incrementValue ( ) < 5 ) ; <nl> - * } <nl> + * To configure the check to allow single - line statements <nl> + * ( { @ code if , while , do - while , for } ) without braces : <nl> * < / p > <nl> + * < pre > <nl> + * & lt ; module name = & quot ; NeedBraces & quot ; & gt ; <nl> + * & lt ; property name = & quot ; allowSingleLineStatement & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; / module & gt ; <nl> + * < / pre > <nl> * < p > <nl> - * { @ code <nl> - * for ( int i = 0 ; i < 10 ; value . incrementValue ( ) ) ; <nl> - * } <nl> + * Next statements won ' t be violated by check : <nl> * < / p > <nl> - * < p > Default value for allowEmptyLoopBody option is < b > false < / b > . < / p > <nl> + * < pre > <nl> + * if ( obj . isValid ( ) ) return true ; / / OK <nl> + * while ( obj . isValid ( ) ) return true ; / / OK <nl> + * do this . notify ( ) ; while ( o ! = null ) ; / / OK <nl> + * for ( int i = 0 ; ; ) this . notify ( ) ; / / OK <nl> + * < / pre > <nl> * < p > <nl> - * To configure the Check to allow { @ code case , default } single - line statements <nl> - * without braces : <nl> + * To configure the check to allow { @ code case , default } single - line statements without braces : <nl> * < / p > <nl> - * <nl> * < pre > <nl> * & lt ; module name = & quot ; NeedBraces & quot ; & gt ; <nl> - * & lt ; property name = & quot ; tokens & quot ; value = & quot ; LITERAL _ CASE , LITERAL _ DEFAULT & quot ; / & gt ; <nl> - * & lt ; property name = & quot ; allowSingleLineStatement & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; tokens & quot ; value = & quot ; LITERAL _ CASE , LITERAL _ DEFAULT & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; allowSingleLineStatement & quot ; value = & quot ; true & quot ; / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> - * <nl> * < p > <nl> - * Such statements would be allowed : <nl> + * Next statements won ' t be violated by check : <nl> * < / p > <nl> - * <nl> * < pre > <nl> - * { @ code <nl> * switch ( num ) { <nl> - * case 1 : counter + + ; break ; / / OK <nl> - * case 6 : counter + = 10 ; break ; / / OK <nl> - * default : counter = 100 ; break ; / / OK <nl> - * } <nl> + * case 1 : counter + + ; break ; / / OK <nl> + * case 6 : counter + = 10 ; break ; / / OK <nl> + * default : counter = 100 ; break ; / / OK <nl> * } <nl> * < / pre > <nl> * < p > <nl> - * To configure the Check to allow { @ code while , for } loops with empty bodies : <nl> + * To configure the check to allow loops ( { @ code while , for } ) with empty bodies : <nl> * < / p > <nl> - * <nl> * < pre > <nl> * & lt ; module name = & quot ; NeedBraces & quot ; & gt ; <nl> - * & lt ; property name = & quot ; allowEmptyLoopBody & quot ; value = & quot ; true & quot ; / & gt ; <nl> + * & lt ; property name = & quot ; allowEmptyLoopBody & quot ; value = & quot ; true & quot ; / & gt ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> - * <nl> * < p > <nl> - * Such statements would be allowed : <nl> + * Next statements won ' t be violated by check : <nl> * < / p > <nl> - * <nl> * < pre > <nl> - * { @ code <nl> * while ( value . incrementValue ( ) & lt ; 5 ) ; / / OK <nl> * for ( int i = 0 ; i & lt ; 10 ; value . incrementValue ( ) ) ; / / OK <nl> - * } <nl> * < / pre > <nl> * <nl> + * @ since 3 . 0 <nl> * / <nl> @ StatelessCheck <nl> public class NeedBracesCheck extends AbstractCheck { <nl> @ @ - 141 , 17 + 132 , 17 @ @ public class NeedBracesCheck extends AbstractCheck { <nl> public static final String MSG _ KEY _ NEED _ BRACES = " needBraces " ; <nl> <nl> / * * <nl> - * Check ' s option for skipping single - line statements . <nl> + * Allow single - line statements without braces . <nl> * / <nl> private boolean allowSingleLineStatement ; <nl> <nl> / * * <nl> - * Check ' s option for allowing loops with empty body . <nl> + * Allow loops with empty bodies . <nl> * / <nl> private boolean allowEmptyLoopBody ; <nl> <nl> / * * <nl> - * Setter . <nl> + * Setter to allow single - line statements without braces . <nl> * @ param allowSingleLineStatement Check ' s option for skipping single - line statements <nl> * / <nl> public void setAllowSingleLineStatement ( boolean allowSingleLineStatement ) { <nl> @ @ - 159 , 7 + 150 , 7 @ @ public class NeedBracesCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> - * Sets whether to allow empty loop body . <nl> + * Setter to allow loops with empty bodies . <nl> * @ param allowEmptyLoopBody Check ' s option for allowing loops with empty body . <nl> * / <nl> public void setAllowEmptyLoopBody ( boolean allowEmptyLoopBody ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> index a528390 . . 461bea1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java <nl> @ @ - 90 , 6 + 90 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { <nl> " MethodTypeParameterName " , <nl> " MissingDeprecated " , <nl> " MissingOverride " , <nl> + " NeedBraces " , <nl> " PackageName " , <nl> " ParameterName " , <nl> " StaticVariableName " , <nl> diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml <nl> index eae7de0 . . 7b55670 100644 <nl> - - - a / src / xdocs / config _ blocks . xml <nl> + + + b / src / xdocs / config _ blocks . xml <nl> @ @ - 721 , 8 + 721 , 8 @ @ try { <nl> < / section > <nl> <nl> < section name = " NeedBraces " > <nl> + < p > Since Checkstyle 3 . 0 < / p > <nl> < subsection name = " Description " id = " NeedBraces _ Description " > <nl> - < p > Since Checkstyle 3 . 0 < / p > <nl> < p > Checks for braces around code blocks . < / p > <nl> < / subsection > <nl> <nl> @ @ - 737 , 22 + 737 , 21 @ @ try { <nl> < / tr > <nl> < tr > <nl> < td > allowSingleLineStatement < / td > <nl> - < td > allows single - line statements without braces < / td > <nl> + < td > allow single - line statements without braces . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> - < td > false < / td > <nl> + < td > < code > false < / code > < / td > <nl> < td > 6 . 5 < / td > <nl> < / tr > <nl> < tr > <nl> < td > allowEmptyLoopBody < / td > <nl> - < td > allows loops with empty bodies < / td > <nl> + < td > allow loops with empty bodies . < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> - < td > false < / td > <nl> + < td > < code > false < / code > < / td > <nl> < td > 6 . 12 . 1 < / td > <nl> < / tr > <nl> < tr > <nl> < td > tokens < / td > <nl> < td > tokens to check < / td > <nl> - <nl> < td > subset of tokens <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ DO " > <nl> LITERAL _ DO < / a > , <nl> @ @ - 816 , 7 + 815 , 7 @ @ try { <nl> < / source > <nl> <nl> < p > <nl> - Next statements won ' t be violated by Check : <nl> + Next statements won ' t be violated by check : <nl> < / p > <nl> < source > <nl> if ( obj . isValid ( ) ) return true ; / / OK <nl> @ @ - 826 , 7 + 825 , 7 @ @ for ( int i = 0 ; ; ) this . notify ( ) ; / / OK <nl> < / source > <nl> <nl> < p > <nl> - To configure the Check to allow < code > case , default < / code > single - line statements <nl> + To configure the check to allow < code > case , default < / code > single - line statements <nl> without braces : <nl> < / p > <nl> < source > <nl> @ @ - 837 , 7 + 836 , 7 @ @ for ( int i = 0 ; ; ) this . notify ( ) ; / / OK <nl> < / source > <nl> <nl> < p > <nl> - Next statements won ' t be violated by Check : <nl> + Next statements won ' t be violated by check : <nl> < / p > <nl> < source > <nl> switch ( num ) { <nl> @ @ - 856 , 7 + 855 , 7 @ @ switch ( num ) { <nl> < / source > <nl> <nl> < p > <nl> - Next statements won ' t be violated by Check : <nl> + Next statements won ' t be violated by check : <nl> < / p > <nl> < source > <nl> while ( value . incrementValue ( ) & lt ; 5 ) ; / / OK
NEAREST DIFF (one line): diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml <nl> index 5a3852f . . 5c24667 100644 <nl> - - - a / src / xdocs / config _ blocks . xml <nl> + + + b / src / xdocs / config _ blocks . xml <nl> @ @ - 314 , 7 + 314 , 8 @ @ try { <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ TRY " > LITERAL _ TRY < / a > , <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ WHILE " > LITERAL _ WHILE < / a > , <nl> < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > METHOD _ DEF < / a > , <nl> - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STATIC _ INIT " > STATIC _ INIT < / a > . <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STATIC _ INIT " > STATIC _ INIT < / a > , <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # OBJBLOCK " > OBJBLOCK < / a > . <nl> < / td > <nl> <nl> < td >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 index 7b21572 . . 306ecc2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / NeedBracesCheck . java 
 @ @ - 29 , 107 + 29 , 98 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtil ; 
 * < p > 
 * Checks for braces around code blocks . 
 * < / p > 
 - * < p > By default the check will check the following blocks : 
 - * { @ link TokenTypes # LITERAL _ DO LITERAL _ DO } , 
 - * { @ link TokenTypes # LITERAL _ ELSE LITERAL _ ELSE } , 
 - * { @ link TokenTypes # LITERAL _ FOR LITERAL _ FOR } , 
 - * { @ link TokenTypes # LITERAL _ IF LITERAL _ IF } , 
 - * { @ link TokenTypes # LITERAL _ WHILE LITERAL _ WHILE } . 
 - * < / p > 
 + * < ul > 
 + * < li > 
 + * Property { @ code allowSingleLineStatement } - allow single - line statements without braces . 
 + * Default value is { @ code false } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code allowEmptyLoopBody } - allow loops with empty bodies . 
 + * Default value is { @ code false } . 
 + * < / li > 
 + * < li > 
 + * Property { @ code tokens } - tokens to check 
 + * Default value is : 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ DO " > 
 + * LITERAL _ DO < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ ELSE " > 
 + * LITERAL _ ELSE < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ FOR " > 
 + * LITERAL _ FOR < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ IF " > 
 + * LITERAL _ IF < / a > , 
 + * < a href = " https : / / checkstyle . org / apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ WHILE " > 
 + * LITERAL _ WHILE < / a > . 
 + * < / li > 
 + * < / ul > 
 * < p > 
 - * An example of how to configure the check is : 
 + * To configure the check : 
 * < / p > 
 * < pre > 
 * & lt ; module name = " NeedBraces " / & gt ; 
 * < / pre > 
 - * < p > An example of how to configure the check for { @ code if } and 
 - * { @ code else } blocks is : 
 + * < p > 
 + * To configure the check for { @ code if } and { @ code else } blocks : 
 * < / p > 
 * < pre > 
 - * & lt ; module name = " NeedBraces " & gt ; 
 - * & lt ; property name = " tokens " value = " LITERAL _ IF , LITERAL _ ELSE " / & gt ; 
 + * & lt ; module name = & quot ; NeedBraces & quot ; & gt ; 
 + * & lt ; property name = & quot ; tokens & quot ; value = & quot ; LITERAL _ IF , LITERAL _ ELSE & quot ; / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 - * Check has the following options : 
 - * < p > < b > allowSingleLineStatement < / b > which allows single - line statements without braces , e . g . : < / p > 
 - * < p > 
 - * { @ code 
 - * if ( obj . isValid ( ) ) return true ; 
 - * } 
 - * < / p > 
 - * < p > 
 - * { @ code 
 - * while ( obj . isValid ( ) ) return true ; 
 - * } 
 - * < / p > 
 - * < p > 
 - * { @ code 
 - * do this . notify ( ) ; while ( o ! = null ) ; 
 - * } 
 - * < / p > 
 * < p > 
 - * { @ code 
 - * for ( int i = 0 ; ; ) this . notify ( ) ; 
 - * } 
 - * < / p > 
 - * < p > < b > allowEmptyLoopBody < / b > which allows loops with empty bodies , e . g . : < / p > 
 - * < p > 
 - * { @ code 
 - * while ( value . incrementValue ( ) < 5 ) ; 
 - * } 
 + * To configure the check to allow single - line statements 
 + * ( { @ code if , while , do - while , for } ) without braces : 
 * < / p > 
 + * < pre > 
 + * & lt ; module name = & quot ; NeedBraces & quot ; & gt ; 
 + * & lt ; property name = & quot ; allowSingleLineStatement & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; / module & gt ; 
 + * < / pre > 
 * < p > 
 - * { @ code 
 - * for ( int i = 0 ; i < 10 ; value . incrementValue ( ) ) ; 
 - * } 
 + * Next statements won ' t be violated by check : 
 * < / p > 
 - * < p > Default value for allowEmptyLoopBody option is < b > false < / b > . < / p > 
 + * < pre > 
 + * if ( obj . isValid ( ) ) return true ; / / OK 
 + * while ( obj . isValid ( ) ) return true ; / / OK 
 + * do this . notify ( ) ; while ( o ! = null ) ; / / OK 
 + * for ( int i = 0 ; ; ) this . notify ( ) ; / / OK 
 + * < / pre > 
 * < p > 
 - * To configure the Check to allow { @ code case , default } single - line statements 
 - * without braces : 
 + * To configure the check to allow { @ code case , default } single - line statements without braces : 
 * < / p > 
 - * 
 * < pre > 
 * & lt ; module name = & quot ; NeedBraces & quot ; & gt ; 
 - * & lt ; property name = & quot ; tokens & quot ; value = & quot ; LITERAL _ CASE , LITERAL _ DEFAULT & quot ; / & gt ; 
 - * & lt ; property name = & quot ; allowSingleLineStatement & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; property name = & quot ; tokens & quot ; value = & quot ; LITERAL _ CASE , LITERAL _ DEFAULT & quot ; / & gt ; 
 + * & lt ; property name = & quot ; allowSingleLineStatement & quot ; value = & quot ; true & quot ; / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 - * 
 * < p > 
 - * Such statements would be allowed : 
 + * Next statements won ' t be violated by check : 
 * < / p > 
 - * 
 * < pre > 
 - * { @ code 
 * switch ( num ) { 
 - * case 1 : counter + + ; break ; / / OK 
 - * case 6 : counter + = 10 ; break ; / / OK 
 - * default : counter = 100 ; break ; / / OK 
 - * } 
 + * case 1 : counter + + ; break ; / / OK 
 + * case 6 : counter + = 10 ; break ; / / OK 
 + * default : counter = 100 ; break ; / / OK 
 * } 
 * < / pre > 
 * < p > 
 - * To configure the Check to allow { @ code while , for } loops with empty bodies : 
 + * To configure the check to allow loops ( { @ code while , for } ) with empty bodies : 
 * < / p > 
 - * 
 * < pre > 
 * & lt ; module name = & quot ; NeedBraces & quot ; & gt ; 
 - * & lt ; property name = & quot ; allowEmptyLoopBody & quot ; value = & quot ; true & quot ; / & gt ; 
 + * & lt ; property name = & quot ; allowEmptyLoopBody & quot ; value = & quot ; true & quot ; / & gt ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 - * 
 * < p > 
 - * Such statements would be allowed : 
 + * Next statements won ' t be violated by check : 
 * < / p > 
 - * 
 * < pre > 
 - * { @ code 
 * while ( value . incrementValue ( ) & lt ; 5 ) ; / / OK 
 * for ( int i = 0 ; i & lt ; 10 ; value . incrementValue ( ) ) ; / / OK 
 - * } 
 * < / pre > 
 * 
 + * @ since 3 . 0 
 * / 
 @ StatelessCheck 
 public class NeedBracesCheck extends AbstractCheck { 
 @ @ - 141 , 17 + 132 , 17 @ @ public class NeedBracesCheck extends AbstractCheck { 
 public static final String MSG _ KEY _ NEED _ BRACES = " needBraces " ; 
 
 / * * 
 - * Check ' s option for skipping single - line statements . 
 + * Allow single - line statements without braces . 
 * / 
 private boolean allowSingleLineStatement ; 
 
 / * * 
 - * Check ' s option for allowing loops with empty body . 
 + * Allow loops with empty bodies . 
 * / 
 private boolean allowEmptyLoopBody ; 
 
 / * * 
 - * Setter . 
 + * Setter to allow single - line statements without braces . 
 * @ param allowSingleLineStatement Check ' s option for skipping single - line statements 
 * / 
 public void setAllowSingleLineStatement ( boolean allowSingleLineStatement ) { 
 @ @ - 159 , 7 + 150 , 7 @ @ public class NeedBracesCheck extends AbstractCheck { 
 } 
 
 / * * 
 - * Sets whether to allow empty loop body . 
 + * Setter to allow loops with empty bodies . 
 * @ param allowEmptyLoopBody Check ' s option for allowing loops with empty body . 
 * / 
 public void setAllowEmptyLoopBody ( boolean allowEmptyLoopBody ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 index a528390 . . 461bea1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsJavaDocsTest . java 
 @ @ - 90 , 6 + 90 , 7 @ @ public class XdocsJavaDocsTest extends AbstractModuleTestSupport { 
 " MethodTypeParameterName " , 
 " MissingDeprecated " , 
 " MissingOverride " , 
 + " NeedBraces " , 
 " PackageName " , 
 " ParameterName " , 
 " StaticVariableName " , 
 diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml 
 index eae7de0 . . 7b55670 100644 
 - - - a / src / xdocs / config _ blocks . xml 
 + + + b / src / xdocs / config _ blocks . xml 
 @ @ - 721 , 8 + 721 , 8 @ @ try { 
 < / section > 
 
 < section name = " NeedBraces " > 
 + < p > Since Checkstyle 3 . 0 < / p > 
 < subsection name = " Description " id = " NeedBraces _ Description " > 
 - < p > Since Checkstyle 3 . 0 < / p > 
 < p > Checks for braces around code blocks . < / p > 
 < / subsection > 
 
 @ @ - 737 , 22 + 737 , 21 @ @ try { 
 < / tr > 
 < tr > 
 < td > allowSingleLineStatement < / td > 
 - < td > allows single - line statements without braces < / td > 
 + < td > allow single - line statements without braces . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 - < td > false < / td > 
 + < td > < code > false < / code > < / td > 
 < td > 6 . 5 < / td > 
 < / tr > 
 < tr > 
 < td > allowEmptyLoopBody < / td > 
 - < td > allows loops with empty bodies < / td > 
 + < td > allow loops with empty bodies . < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 - < td > false < / td > 
 + < td > < code > false < / code > < / td > 
 < td > 6 . 12 . 1 < / td > 
 < / tr > 
 < tr > 
 < td > tokens < / td > 
 < td > tokens to check < / td > 
 - 
 < td > subset of tokens 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ DO " > 
 LITERAL _ DO < / a > , 
 @ @ - 816 , 7 + 815 , 7 @ @ try { 
 < / source > 
 
 < p > 
 - Next statements won ' t be violated by Check : 
 + Next statements won ' t be violated by check : 
 < / p > 
 < source > 
 if ( obj . isValid ( ) ) return true ; / / OK 
 @ @ - 826 , 7 + 825 , 7 @ @ for ( int i = 0 ; ; ) this . notify ( ) ; / / OK 
 < / source > 
 
 < p > 
 - To configure the Check to allow < code > case , default < / code > single - line statements 
 + To configure the check to allow < code > case , default < / code > single - line statements 
 without braces : 
 < / p > 
 < source > 
 @ @ - 837 , 7 + 836 , 7 @ @ for ( int i = 0 ; ; ) this . notify ( ) ; / / OK 
 < / source > 
 
 < p > 
 - Next statements won ' t be violated by Check : 
 + Next statements won ' t be violated by check : 
 < / p > 
 < source > 
 switch ( num ) { 
 @ @ - 856 , 7 + 855 , 7 @ @ switch ( num ) { 
 < / source > 
 
 < p > 
 - Next statements won ' t be violated by Check : 
 + Next statements won ' t be violated by check : 
 < / p > 
 < source > 
 while ( value . incrementValue ( ) & lt ; 5 ) ; / / OK

NEAREST DIFF:
diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml 
 index 5a3852f . . 5c24667 100644 
 - - - a / src / xdocs / config _ blocks . xml 
 + + + b / src / xdocs / config _ blocks . xml 
 @ @ - 314 , 7 + 314 , 8 @ @ try { 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ TRY " > LITERAL _ TRY < / a > , 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ WHILE " > LITERAL _ WHILE < / a > , 
 < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # METHOD _ DEF " > METHOD _ DEF < / a > , 
 - < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STATIC _ INIT " > STATIC _ INIT < / a > . 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STATIC _ INIT " > STATIC _ INIT < / a > , 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # OBJBLOCK " > OBJBLOCK < / a > . 
 < / td > 
 
 < td >
