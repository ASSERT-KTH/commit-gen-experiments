BLEU SCORE: 0.033864985683445356

TEST MSG: Issue # 4516 : fix second bunch of pmd violations for JUnitAssertionsShouldIncludeMessage
GENERATED MSG: Simplify JUnit assertions . # 1555

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index 3955efa . . bf35517 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 147 , 7 + 147 , 8 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> fail ( " CheckstyleException is expected " ) ; <nl> } <nl> catch ( CheckstyleException exception ) { <nl> - assertTrue ( exception . getMessage ( ) . contains ( " TreeWalker is not allowed as a parent of " ) ) ; <nl> + assertTrue ( " Error message is unexpected " , <nl> + exception . getMessage ( ) . contains ( " TreeWalker is not allowed as a parent of " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 169 , 7 + 170 , 8 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> verify ( checkConfig , pathToEmptyFile , expected ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertTrue ( ex . getMessage ( ) . contains ( " isCommentNodesRequired " ) ) ; <nl> + assertTrue ( " Error message is unexpected " , <nl> + ex . getMessage ( ) . contains ( " isCommentNodesRequired " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 212 , 7 + 214 , 8 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> treeWalker . processFiltered ( file , lines ) ; <nl> } <nl> catch ( CheckstyleException exception ) { <nl> - assertTrue ( exception . getMessage ( ) . contains ( <nl> + assertTrue ( " Error message is unexpected " , <nl> + exception . getMessage ( ) . contains ( <nl> " occurred during the analysis of file " ) ) ; <nl> } <nl> } <nl> @ @ - 233 , 7 + 236 , 8 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> treeWalker . processFiltered ( file , lines ) ; <nl> } <nl> catch ( CheckstyleException exception ) { <nl> - assertTrue ( exception . getMessage ( ) . contains ( <nl> + assertTrue ( " Error message is unexpected " , <nl> + exception . getMessage ( ) . contains ( <nl> " TokenStreamRecognitionException occurred during the analysis of file " ) ) ; <nl> } <nl> } <nl> @ @ - 250 , 7 + 254 , 8 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> fail ( " CheckstyleException is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertTrue ( ex . getMessage ( ) . startsWith ( " cannot initialize module " <nl> + assertTrue ( " Error message is unexpected " , <nl> + ex . getMessage ( ) . startsWith ( " cannot initialize module " <nl> + " com . puppycrawl . tools . checkstyle . TreeWalker - Token \ " " <nl> + TokenTypes . ASSIGN + " \ " from required " <nl> + " tokens was not found in default tokens list in check " ) ) ; <nl> @ @ - 364 , 9 + 369 , 12 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> treeWalker . finishLocalSetup ( ) ; <nl> <nl> final Context context = ( Context ) Whitebox . getInternalState ( treeWalker , " childContext " ) ; <nl> - assertEquals ( contextClassLoader , context . get ( " classLoader " ) ) ; <nl> - assertEquals ( " error " , context . get ( " severity " ) ) ; <nl> - assertEquals ( String . valueOf ( 100 ) , context . get ( " tabWidth " ) ) ; <nl> + assertEquals ( " Classloader object differs from expected " , <nl> + contextClassLoader , context . get ( " classLoader " ) ) ; <nl> + assertEquals ( " Severity differs from expected " , <nl> + " error " , context . get ( " severity " ) ) ; <nl> + assertEquals ( " Tab width differs from expected " , <nl> + String . valueOf ( 100 ) , context . get ( " tabWidth " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 376 , 7 + 384 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> final File file = temporaryFolder . newFile ( " file . pdf " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , file . getPath ( ) , expected ) ; <nl> - assertTrue ( VerifyInitCheck . isInitWasCalled ( ) ) ; <nl> + assertTrue ( " Init was not called " , VerifyInitCheck . isInitWasCalled ( ) ) ; <nl> } <nl> <nl> private static class BadJavaDocCheck extends AbstractCheck { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java <nl> index 5f9c5d4 . . c12400c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java <nl> @ @ - 50 , 20 + 50 , 22 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport { <nl> <nl> @ Test <nl> public void testGetMessageBundleWithPackage ( ) throws Exception { <nl> - assertEquals ( " com . mycompany . checks . messages " , <nl> + assertEquals ( " Message bundle differs from expected " , <nl> + " com . mycompany . checks . messages " , <nl> getGetMessageBundleMethod ( ) . invoke ( null , " com . mycompany . checks . MyCoolCheck " ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testGetMessageBundleWithoutPackage ( ) throws Exception { <nl> - assertEquals ( " messages " , <nl> + assertEquals ( " Message bundle differs from expected " , <nl> + " messages " , <nl> getGetMessageBundleMethod ( ) . invoke ( null , " MyCoolCheck " ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testCustomId ( ) { <nl> emptyCheck . setId ( " MyId " ) ; <nl> - assertEquals ( " MyId " , emptyCheck . getId ( ) ) ; <nl> + assertEquals ( " Id differs from expected " , " MyId " , emptyCheck . getId ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 78 , 8 + 80 , 10 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport { <nl> emptyCheck . log ( 0 , " msgKey " ) ; <nl> <nl> final SortedSet < LocalizedMessage > messages = collector . getMessages ( ) ; <nl> - assertEquals ( 1 , messages . size ( ) ) ; <nl> - assertEquals ( " This is a custom message . " , messages . first ( ) <nl> + assertEquals ( " Amount of messages differs from expected " , <nl> + 1 , messages . size ( ) ) ; <nl> + assertEquals ( " Message differs from expected " , <nl> + " This is a custom message . " , messages . first ( ) <nl> . getMessage ( ) ) ; <nl> } <nl> <nl> @ @ - 95 , 9 + 99 , 11 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport { <nl> emptyCheck . log ( 0 , " msgKey " , " TestParam " ) ; <nl> <nl> final SortedSet < LocalizedMessage > messages = collector . getMessages ( ) ; <nl> - assertEquals ( 1 , messages . size ( ) ) ; <nl> + assertEquals ( " Amount of messages differs from expected " , <nl> + 1 , messages . size ( ) ) ; <nl> <nl> - assertEquals ( " This is a custom message with TestParam . " , <nl> + assertEquals ( " Message differs from expected " , <nl> + " This is a custom message with TestParam . " , <nl> messages . first ( ) . getMessage ( ) ) ; <nl> } <nl> <nl> @ @ - 115 , 7 + 121 , 8 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport { <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> - assertEquals ( " Unmatched braces in the pattern . " , ex . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + " Unmatched braces in the pattern . " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java <nl> index 7bed040 . . 0e92608 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java <nl> @ @ - 43 , 7 + 43 , 8 @ @ public class ArrayTypeStyleCheckTest <nl> public void testGetRequiredTokens ( ) { <nl> final ArrayTypeStyleCheck checkObj = new ArrayTypeStyleCheck ( ) ; <nl> final int [ ] expected = { TokenTypes . ARRAY _ DECLARATOR } ; <nl> - assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; <nl> + assertArrayEquals ( " Required tokens differs from expected " , <nl> + expected , checkObj . getRequiredTokens ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 78 , 7 + 79 , 9 @ @ public class ArrayTypeStyleCheckTest <nl> final int [ ] expected = { TokenTypes . ARRAY _ DECLARATOR } ; <nl> final ArrayTypeStyleCheck check = new ArrayTypeStyleCheck ( ) ; <nl> final int [ ] actual = check . getAcceptableTokens ( ) ; <nl> - assertEquals ( 1 , actual . length ) ; <nl> - assertArrayEquals ( expected , actual ) ; <nl> + assertEquals ( " Amount of acceptable tokens differs from expected " , <nl> + 1 , actual . length ) ; <nl> + assertArrayEquals ( " Acceptable tokens differs from expected " , <nl> + expected , actual ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> index 74a696b . . 0902c9c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java <nl> @ @ - 156 , 7 + 156 , 8 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport <nl> TokenTypes . STRING _ LITERAL , <nl> TokenTypes . CHAR _ LITERAL , <nl> } ; <nl> - assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; <nl> + assertArrayEquals ( " Required tokens differ from expected " , <nl> + expected , checkObj . getRequiredTokens ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 333 , 7 + 334 , 8 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport <nl> final AvoidEscapedUnicodeCharactersCheck check = new AvoidEscapedUnicodeCharactersCheck ( ) ; <nl> final int [ ] actual = check . getAcceptableTokens ( ) ; <nl> final int [ ] expected = { TokenTypes . STRING _ LITERAL , TokenTypes . CHAR _ LITERAL } ; <nl> - assertArrayEquals ( expected , actual ) ; <nl> + assertArrayEquals ( " Acceptable tokens differ from expected " , <nl> + expected , actual ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> index 57c6b91 . . c7604b1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> @ @ - 57 , 7 + 57 , 8 @ @ public class FileSetCheckLifecycleTest <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> final FileContentsHolder checkObj = new FileContentsHolder ( ) ; <nl> - assertArrayEquals ( CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getRequiredTokens ( ) ) ; <nl> + assertArrayEquals ( " Required tokens array is not empty " , <nl> + CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getRequiredTokens ( ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> index 48aa653 . . 986cea6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> @ @ - 157 , 7 + 157 , 8 @ @ public class NewlineAtEndOfFileCheckTest <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertTrue ( ex . getMessage ( ) . startsWith ( <nl> + assertTrue ( " Error message is unexpected " , <nl> + ex . getMessage ( ) . startsWith ( <nl> " cannot initialize module com . puppycrawl . tools . checkstyle . " <nl> + " checks . NewlineAtEndOfFileCheck - " <nl> + " Cannot set property ' lineSeparator ' to ' ct ' in module " ) ) ; <nl> @ @ - 187 , 9 + 188 , 11 @ @ public class NewlineAtEndOfFileCheckTest <nl> lines . add ( " txt " ) ; <nl> final File impossibleFile = new File ( " " ) ; <nl> final Set < LocalizedMessage > messages = check . process ( impossibleFile , lines ) ; <nl> - assertEquals ( 1 , messages . size ( ) ) ; <nl> + assertEquals ( " Ammount of messages is unexpected " , <nl> + 1 , messages . size ( ) ) ; <nl> final Iterator < LocalizedMessage > iterator = messages . iterator ( ) ; <nl> - assertEquals ( getCheckMessage ( MSG _ KEY _ UNABLE _ OPEN , " " ) , iterator . next ( ) . getMessage ( ) ) ; <nl> + assertEquals ( " Violation message differs from expected " , <nl> + getCheckMessage ( MSG _ KEY _ UNABLE _ OPEN , " " ) , iterator . next ( ) . getMessage ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 207 , 12 + 210 , 15 @ @ public class NewlineAtEndOfFileCheckTest <nl> method . invoke ( new NewlineAtEndOfFileCheck ( ) , file ) ; <nl> } <nl> catch ( InvocationTargetException ex ) { <nl> - assertTrue ( ex . getCause ( ) instanceof IOException ) ; <nl> + assertTrue ( " Error type is unexpected " , <nl> + ex . getCause ( ) instanceof IOException ) ; <nl> if ( System . getProperty ( " os . name " ) . toLowerCase ( ENGLISH ) . startsWith ( " windows " ) ) { <nl> - assertEquals ( " Unable to read 2 bytes , got 0 " , ex . getCause ( ) . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + " Unable to read 2 bytes , got 0 " , ex . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> else { <nl> - assertEquals ( " Unable to read 1 bytes , got 0 " , ex . getCause ( ) . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + " Unable to read 1 bytes , got 0 " , ex . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java <nl> index b4e451d . . 6dd3dae 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java <nl> @ @ - 52 , 7 + 52 , 8 @ @ public class OuterTypeFilenameCheckTest extends BaseCheckTestSupport { <nl> TokenTypes . ENUM _ DEF , <nl> TokenTypes . ANNOTATION _ DEF , <nl> } ; <nl> - assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; <nl> + assertArrayEquals ( " Required tokens array differs from expected " , <nl> + expected , checkObj . getRequiredTokens ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 81 , 7 + 82 , 8 @ @ public class OuterTypeFilenameCheckTest extends BaseCheckTestSupport { <nl> TokenTypes . ENUM _ DEF , <nl> TokenTypes . ANNOTATION _ DEF , <nl> } ; <nl> - assertArrayEquals ( expected , actual ) ; <nl> + assertArrayEquals ( " Acceptable tokens array differs from expected " , <nl> + expected , actual ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java <nl> index 37e02fd . . a1c01c8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java <nl> @ @ - 68 , 7 + 68 , 8 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { <nl> public void testGetRequiredTokens ( ) { <nl> final SuppressWarningsHolder checkObj = new SuppressWarningsHolder ( ) ; <nl> final int [ ] expected = { TokenTypes . ANNOTATION } ; <nl> - assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; <nl> + assertArrayEquals ( " Required token array differs from expected " , <nl> + expected , checkObj . getRequiredTokens ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 91 , 8 + 92 , 10 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { <nl> <nl> @ Test <nl> public void testGetDefaultAlias ( ) { <nl> - assertEquals ( " somename " , SuppressWarningsHolder . getDefaultAlias ( " SomeName " ) ) ; <nl> - assertEquals ( " somename " , SuppressWarningsHolder . getDefaultAlias ( " SomeNameCheck " ) ) ; <nl> + assertEquals ( " Diffault alias differs from expected " , <nl> + " somename " , SuppressWarningsHolder . getDefaultAlias ( " SomeName " ) ) ; <nl> + assertEquals ( " Diffault alias differs from expected " , <nl> + " somename " , SuppressWarningsHolder . getDefaultAlias ( " SomeNameCheck " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 105 , 7 + 108 , 8 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { <nl> public void testSetAliasListCorrect ( ) { <nl> final SuppressWarningsHolder holder = new SuppressWarningsHolder ( ) ; <nl> holder . setAliasList ( " alias = value " ) ; <nl> - assertEquals ( " value " , SuppressWarningsHolder . getAlias ( " alias " ) ) ; <nl> + assertEquals ( " Alias differs from expected " , <nl> + " value " , SuppressWarningsHolder . getAlias ( " alias " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 117 , 7 + 121 , 8 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { <nl> fail ( " Exception expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> - assertEquals ( " ' = ' expected in alias list item : SomeAlias " , ex . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + " ' = ' expected in alias list item : SomeAlias " , ex . getMessage ( ) ) ; <nl> } <nl> <nl> } <nl> @ @ - 148 , 7 + 153 , 7 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { <nl> new LocalizedMessage ( 100 , 10 , null , null , null , " id " , MemberNameCheck . class , " message " ) ; <nl> final AuditEvent event = new AuditEvent ( source , " fileName " , message ) ; <nl> <nl> - assertFalse ( SuppressWarningsHolder . isSuppressed ( event ) ) ; <nl> + assertFalse ( " Event is not suppressed " , SuppressWarningsHolder . isSuppressed ( event ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 177 , 19 + 182 , 22 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { <nl> new LocalizedMessage ( 100 , 10 , null , null , null , " id " , MemberNameCheck . class , " msg " ) ; <nl> final AuditEvent firstEventForTest = <nl> new AuditEvent ( source , " fileName " , firstMessageForTest ) ; <nl> - assertFalse ( SuppressWarningsHolder . isSuppressed ( firstEventForTest ) ) ; <nl> + assertFalse ( " Event is suppressed " , <nl> + SuppressWarningsHolder . isSuppressed ( firstEventForTest ) ) ; <nl> <nl> final LocalizedMessage secondMessageForTest = <nl> new LocalizedMessage ( 100 , 150 , null , null , null , " id " , MemberNameCheck . class , " msg " ) ; <nl> final AuditEvent secondEventForTest = <nl> new AuditEvent ( source , " fileName " , secondMessageForTest ) ; <nl> - assertTrue ( SuppressWarningsHolder . isSuppressed ( secondEventForTest ) ) ; <nl> + assertTrue ( " Event is not suppressed " , <nl> + SuppressWarningsHolder . isSuppressed ( secondEventForTest ) ) ; <nl> <nl> final LocalizedMessage thirdMessageForTest = <nl> new LocalizedMessage ( 200 , 1 , null , null , null , " id " , MemberNameCheck . class , " msg " ) ; <nl> final AuditEvent thirdEventForTest = <nl> new AuditEvent ( source , " fileName " , thirdMessageForTest ) ; <nl> - assertTrue ( SuppressWarningsHolder . isSuppressed ( thirdEventForTest ) ) ; <nl> + assertTrue ( " Event is not suppressed " , <nl> + SuppressWarningsHolder . isSuppressed ( thirdEventForTest ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 237 , 8 + 245 , 10 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { <nl> fail ( " Exception expected " ) ; <nl> } <nl> catch ( InvocationTargetException ex ) { <nl> - assertTrue ( ex . getCause ( ) instanceof IllegalArgumentException ) ; <nl> - assertEquals ( " Unexpected AST : Method Def [ 0x0 ] " , ex . getCause ( ) . getMessage ( ) ) ; <nl> + assertTrue ( " Error type is unexpected " , <nl> + ex . getCause ( ) instanceof IllegalArgumentException ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + " Unexpected AST : Method Def [ 0x0 ] " , ex . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 260 , 8 + 270 , 10 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { <nl> fail ( " Exception expected " ) ; <nl> } <nl> catch ( InvocationTargetException ex ) { <nl> - assertTrue ( ex . getCause ( ) instanceof IllegalArgumentException ) ; <nl> - assertEquals ( " Expression or annotation array " <nl> + assertTrue ( " Error type is unexpected " , <nl> + ex . getCause ( ) instanceof IllegalArgumentException ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + " Expression or annotation array " <nl> + " initializer AST expected : Method Def [ 0x0 ] " , ex . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> @ @ - 289 , 8 + 301 , 10 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { <nl> fail ( " Exception expected " ) ; <nl> } <nl> catch ( InvocationTargetException ex ) { <nl> - assertTrue ( ex . getCause ( ) instanceof IllegalArgumentException ) ; <nl> - assertEquals ( " Unexpected container AST : Parent ast [ 0x0 ] " , ex . getCause ( ) . getMessage ( ) ) ; <nl> + assertTrue ( " Error type is unexpected " , <nl> + ex . getCause ( ) instanceof IllegalArgumentException ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + " Unexpected container AST : Parent ast [ 0x0 ] " , ex . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 305 , 7 + 319 , 8 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { <nl> fail ( " Exception expected " ) ; <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> - assertEquals ( " Identifier AST expected , but get null . " , ex . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + " Identifier AST expected , but get null . " , ex . getMessage ( ) ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheckTest . java <nl> index b2050a8 . . 95e6293 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheckTest . java <nl> @ @ - 43 , 7 + 43 , 8 @ @ public class TodoCommentCheckTest <nl> public void testGetRequiredTokens ( ) { <nl> final TodoCommentCheck checkObj = new TodoCommentCheck ( ) ; <nl> final int [ ] expected = { TokenTypes . COMMENT _ CONTENT } ; <nl> - assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; <nl> + assertArrayEquals ( " Required tokens differs from expected " , <nl> + expected , checkObj . getRequiredTokens ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 65 , 7 + 66 , 9 @ @ public class TodoCommentCheckTest <nl> final int [ ] expected = { TokenTypes . COMMENT _ CONTENT } ; <nl> final TodoCommentCheck check = new TodoCommentCheck ( ) ; <nl> final int [ ] actual = check . getAcceptableTokens ( ) ; <nl> - assertEquals ( 1 , actual . length ) ; <nl> - assertArrayEquals ( expected , actual ) ; <nl> + assertEquals ( " Amount of acceptable tokens differs from expected " , <nl> + 1 , actual . length ) ; <nl> + assertArrayEquals ( " Acceptable tokens differs from expected " , <nl> + expected , actual ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java <nl> index 9ebcb6c . . d3b610d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java <nl> @ @ - 51 , 13 + 51 , 15 @ @ public class TrailingCommentCheckTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> final TrailingCommentCheck checkObj = new TrailingCommentCheck ( ) ; <nl> - assertArrayEquals ( CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getRequiredTokens ( ) ) ; <nl> + assertArrayEquals ( " Required tokens array is not empty " , <nl> + CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getRequiredTokens ( ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testGetAcceptableTokens ( ) { <nl> final TrailingCommentCheck checkObj = new TrailingCommentCheck ( ) ; <nl> - assertArrayEquals ( CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getAcceptableTokens ( ) ) ; <nl> + assertArrayEquals ( " Acceptable tokens array is not empty " , <nl> + CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getAcceptableTokens ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 94 , 7 + 96 , 8 @ @ public class TrailingCommentCheckTest extends BaseCheckTestSupport { <nl> Assert . fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> - assertEquals ( " visitToken ( ) shouldn ' t be called . " , ex . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + " visitToken ( ) shouldn ' t be called . " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> index fd2c339 . . 5069b4d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> @ @ - 411 , 8 + 411 , 10 @ @ public class TranslationCheckTest extends BaseCheckTestSupport { <nl> } <nl> catch ( IllegalArgumentException ex ) { <nl> final String exceptionMessage = ex . getMessage ( ) ; <nl> - assertThat ( exceptionMessage , containsString ( " 11 " ) ) ; <nl> - assertThat ( exceptionMessage , endsWith ( " [ TranslationCheck ] " ) ) ; <nl> + assertThat ( " Error message is unexpected " , <nl> + exceptionMessage , containsString ( " 11 " ) ) ; <nl> + assertThat ( " Error message is unexpected " , <nl> + exceptionMessage , endsWith ( " [ TranslationCheck ] " ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> index 0902fb7 . . ec12d25 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java <nl> @ @ - 110 , 7 + 110 , 8 @ @ public class UncommentedMainCheckTest <nl> Assert . fail ( " IllegalStateException is expected " ) ; <nl> } <nl> catch ( IllegalStateException ex ) { <nl> - assertEquals ( ast . toString ( ) , ex . getMessage ( ) ) ; <nl> + assertEquals ( " Error message is unexpected " , <nl> + ast . toString ( ) , ex . getMessage ( ) ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> index 575af9a . . dc24472 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java <nl> @ @ - 52 , 7 + 52 , 8 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testGetRequiredTokens ( ) { <nl> final OneTopLevelClassCheck checkObj = new OneTopLevelClassCheck ( ) ; <nl> - assertArrayEquals ( CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getRequiredTokens ( ) ) ; <nl> + assertArrayEquals ( " Required tokens array is not empty " , <nl> + CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getRequiredTokens ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 61 , 7 + 62 , 8 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport { <nl> check . getAcceptableTokens ( ) ; <nl> / / ZERO tokens as Check do Traverse of Tree himself , he does not need to subscribed to <nl> / / Tokens <nl> - Assert . assertEquals ( 0 , check . getAcceptableTokens ( ) . length ) ; <nl> + Assert . assertEquals ( " Acceptable tokens array size larger than 0 " , <nl> + 0 , check . getAcceptableTokens ( ) . length ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml <nl> index 9cb39c4 . . 12c15b0 100644 <nl> - - - a / config / checkstyle _ checks . xml <nl> + + + b / config / checkstyle _ checks . xml <nl> @ @ - 299 , 9 + 299 , 10 @ @ <nl> < module name = " CommentsIndentation " / > <nl> < module name = " HiddenField " > <nl> < property name = " ignoreConstructorParameter " value = " true " / > <nl> - 	 	 < property name = " ignoreSetter " value = " true " / > <nl> + < property name = " ignoreSetter " value = " true " / > <nl> < property name = " setterCanReturnItsClass " value = " true " / > <nl> < / module > <nl> + < module name = " InnerTypeLast " / > <nl> <nl> < module name = " ModifiedControlVariable " / > <nl> <nl> @ @ - 314 , 7 + 315 , 6 @ @ <nl> < module name = " FinalParameters " / > <nl> < module name = " IllegalToken " / > <nl> < module name = " IllegalType " / > <nl> - < module name = " InnerTypeLast " / > <nl> < module name = " JavadocParagraph " / > <nl> < module name = " JavadocTagContinuationIndentation " / > <nl> < module name = " JavaNCSS " / > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index c43b976 . . 6564dad 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 237 , 13 + 237 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> verify ( checkConfig , pathToEmptyFile , expected ) ; <nl> } <nl> <nl> - public static class BadJavaDocCheck extends Check { <nl> - @ Override <nl> - public int [ ] getDefaultTokens ( ) { <nl> - return new int [ ] { TokenTypes . SINGLE _ LINE _ COMMENT } ; <nl> - } <nl> - } <nl> - <nl> @ Test <nl> public void testProcessNonJavaFiles ( ) throws Exception { <nl> final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> @ @ - 300 , 4 + 293 , 11 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> <nl> treeWalker . processFiltered ( file , lines ) ; <nl> } <nl> + <nl> + public static class BadJavaDocCheck extends Check { <nl> + @ Override <nl> + public int [ ] getDefaultTokens ( ) { <nl> + return new int [ ] { TokenTypes . SINGLE _ LINE _ COMMENT } ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> index 0a02db4 . . c04062f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> @ @ - 33 , 39 + 33 , 6 @ @ import com . puppycrawl . tools . checkstyle . DefaultContext ; <nl> <nl> public class AutomaticBeanTest { <nl> <nl> - public class TestBean extends AutomaticBean { <nl> - <nl> - private String privateField ; <nl> - <nl> - private String wrong ; <nl> - <nl> - private int val ; <nl> - <nl> - public void setWrong ( String wrong ) { <nl> - this . wrong = wrong ; <nl> - } <nl> - <nl> - public void setVal ( int val ) { <nl> - this . val = val ; <nl> - } <nl> - <nl> - public void setExceptionalMethod ( String value ) { <nl> - throw new IllegalStateException ( " for UT " ) ; <nl> - } <nl> - <nl> - public void setName ( String name ) { <nl> - } <nl> - <nl> - / * * <nl> - * just for code coverage <nl> - * @ param childConf a child of this component ' s Configuration <nl> - * / <nl> - @ Override <nl> - protected void setupChild ( Configuration childConf ) throws CheckstyleException { <nl> - super . setupChild ( childConf ) ; <nl> - } <nl> - } <nl> - <nl> @ Test <nl> public void testConfigure _ NoSuchAttribute ( ) { <nl> final TestBean testBean = new TestBean ( ) ; <nl> @ @ - 130 , 4 + 97 , 36 @ @ public class AutomaticBeanTest { <nl> } <nl> } <nl> <nl> + public class TestBean extends AutomaticBean { <nl> + <nl> + private String privateField ; <nl> + <nl> + private String wrong ; <nl> + <nl> + private int val ; <nl> + <nl> + public void setWrong ( String wrong ) { <nl> + this . wrong = wrong ; <nl> + } <nl> + <nl> + public void setVal ( int val ) { <nl> + this . val = val ; <nl> + } <nl> + <nl> + public void setExceptionalMethod ( String value ) { <nl> + throw new IllegalStateException ( " for UT " ) ; <nl> + } <nl> + <nl> + public void setName ( String name ) { <nl> + } <nl> + <nl> + / * * <nl> + * just for code coverage <nl> + * @ param childConf a child of this component ' s Configuration <nl> + * / <nl> + @ Override <nl> + protected void setupChild ( Configuration childConf ) throws CheckstyleException { <nl> + super . setupChild ( childConf ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> index 168528b . . 2ac7f53 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> @ @ - 45 , 33 + 45 , 6 @ @ public class FileSetCheckLifecycleTest <nl> return dc ; <nl> } <nl> <nl> - public static class TestFileSetCheck extends AbstractFileSetCheck { <nl> - private static boolean destroyed ; <nl> - private static boolean fileContentAvailable ; <nl> - <nl> - @ Override <nl> - public void destroy ( ) { <nl> - destroyed = true ; <nl> - } <nl> - <nl> - public static boolean isDestroyed ( ) { <nl> - return destroyed ; <nl> - } <nl> - <nl> - public static boolean isFileContentAvailable ( ) { <nl> - return fileContentAvailable ; <nl> - } <nl> - <nl> - @ Override <nl> - protected void processFiltered ( File file , List < String > lines ) { <nl> - } <nl> - <nl> - @ Override <nl> - public void finishProcessing ( ) { <nl> - fileContentAvailable = FileContentsHolder . getContents ( ) ! = null ; <nl> - } <nl> - } <nl> - <nl> @ Test <nl> public void testTranslation ( ) throws Exception { <nl> final Configuration checkConfig = <nl> @ @ - 111 , 4 + 84 , 31 @ @ public class FileSetCheckLifecycleTest <nl> assertTrue ( " FileContent should be available during finishProcessing ( ) call " , <nl> TestFileSetCheck . isFileContentAvailable ( ) ) ; <nl> } <nl> + <nl> + public static class TestFileSetCheck extends AbstractFileSetCheck { <nl> + private static boolean destroyed ; <nl> + private static boolean fileContentAvailable ; <nl> + <nl> + @ Override <nl> + public void destroy ( ) { <nl> + destroyed = true ; <nl> + } <nl> + <nl> + public static boolean isDestroyed ( ) { <nl> + return destroyed ; <nl> + } <nl> + <nl> + public static boolean isFileContentAvailable ( ) { <nl> + return fileContentAvailable ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void processFiltered ( File file , List < String > lines ) { <nl> + } <nl> + <nl> + @ Override <nl> + public void finishProcessing ( ) { <nl> + fileContentAvailable = FileContentsHolder . getContents ( ) ! = null ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> index a02d6a3 . . 5be3c7f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java <nl> @ @ - 33 , 19 + 33 , 6 @ @ import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> <nl> public class AbstractJavadocCheckTest extends BaseCheckTestSupport { <nl> - public static class TempCheck extends AbstractJavadocCheck { <nl> - <nl> - @ Override <nl> - public int [ ] getDefaultJavadocTokens ( ) { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public void visitJavadocToken ( DetailNode ast ) { <nl> - / / do nothing <nl> - } <nl> - <nl> - } <nl> <nl> @ Test <nl> public void testNumberFormatException ( ) throws Exception { <nl> @ @ - 92 , 4 + 79 , 17 @ @ public class AbstractJavadocCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> verify ( checker , getPath ( " javadoc / InputCorrectJavaDocParagraphCheck . java " ) , expected ) ; <nl> } <nl> + <nl> + public static class TempCheck extends AbstractJavadocCheck { <nl> + <nl> + @ Override <nl> + public int [ ] getDefaultJavadocTokens ( ) { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public void visitJavadocToken ( DetailNode ast ) { <nl> + / / do nothing <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java <nl> index 59149dd . . cea443a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java <nl> @ @ - 38 , 6 + 38 , 15 @ @ public class AllBlockCommentsTest extends BaseCheckTestSupport { <nl> <nl> private static final String LINE _ SEPARATOR = System . getProperty ( " line . separator " ) ; <nl> <nl> + @ Test <nl> + public void testAllBlockComments ( ) throws Exception { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( BlockCommentListenerCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " comments " + File . separator <nl> + + " InputFullOfBlockComments . java " ) , expected ) ; <nl> + Assert . assertTrue ( allComments . isEmpty ( ) ) ; <nl> + } <nl> + <nl> public static class BlockCommentListenerCheck extends Check { <nl> @ Override <nl> public boolean isCommentNodesRequired ( ) { <nl> @ @ - 74 , 15 + 83 , 5 @ @ public class AllBlockCommentsTest extends BaseCheckTestSupport { <nl> Assert . fail ( " Unexpected comment : " + commentContent ) ; <nl> } <nl> } <nl> - <nl> - } <nl> - <nl> - @ Test <nl> - public void testAllBlockComments ( ) throws Exception { <nl> - DefaultConfiguration checkConfig = createCheckConfig ( BlockCommentListenerCheck . class ) ; <nl> - final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " comments " + File . separator <nl> - + " InputFullOfBlockComments . java " ) , expected ) ; <nl> - Assert . assertTrue ( allComments . isEmpty ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java <nl> index becdd12 . . e9b6023 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java <nl> @ @ - 37 , 6 + 37 , 15 @ @ public class AllSinglelineCommentsTest extends BaseCheckTestSupport { <nl> <nl> private static final String LINE _ SEPARATOR = System . getProperty ( " line . separator " ) ; <nl> <nl> + @ Test <nl> + public void testAllBlockComments ( ) throws Exception { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( SinglelineCommentListenerCheck . class ) ; <nl> + final String [ ] expected = { } ; <nl> + verify ( checkConfig , getPath ( " comments " + File . separator <nl> + + " InputFullOfSinglelineComments . java " ) , expected ) ; <nl> + Assert . assertTrue ( allComments . isEmpty ( ) ) ; <nl> + } <nl> + <nl> public static class SinglelineCommentListenerCheck extends Check { <nl> @ Override <nl> public boolean isCommentNodesRequired ( ) { <nl> @ @ - 69 , 15 + 78 , 5 @ @ public class AllSinglelineCommentsTest extends BaseCheckTestSupport { <nl> Assert . fail ( " Unexpected comment : " + commentContent ) ; <nl> } <nl> } <nl> - <nl> - } <nl> - <nl> - @ Test <nl> - public void testAllBlockComments ( ) throws Exception { <nl> - DefaultConfiguration checkConfig = createCheckConfig ( SinglelineCommentListenerCheck . class ) ; <nl> - final String [ ] expected = { } ; <nl> - verify ( checkConfig , getPath ( " comments " + File . separator <nl> - + " InputFullOfSinglelineComments . java " ) , expected ) ; <nl> - Assert . assertTrue ( allComments . isEmpty ( ) ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index 3955efa . . bf35517 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 147 , 7 + 147 , 8 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 fail ( " CheckstyleException is expected " ) ; 
 } 
 catch ( CheckstyleException exception ) { 
 - assertTrue ( exception . getMessage ( ) . contains ( " TreeWalker is not allowed as a parent of " ) ) ; 
 + assertTrue ( " Error message is unexpected " , 
 + exception . getMessage ( ) . contains ( " TreeWalker is not allowed as a parent of " ) ) ; 
 } 
 } 
 
 @ @ - 169 , 7 + 170 , 8 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 verify ( checkConfig , pathToEmptyFile , expected ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertTrue ( ex . getMessage ( ) . contains ( " isCommentNodesRequired " ) ) ; 
 + assertTrue ( " Error message is unexpected " , 
 + ex . getMessage ( ) . contains ( " isCommentNodesRequired " ) ) ; 
 } 
 } 
 
 @ @ - 212 , 7 + 214 , 8 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 treeWalker . processFiltered ( file , lines ) ; 
 } 
 catch ( CheckstyleException exception ) { 
 - assertTrue ( exception . getMessage ( ) . contains ( 
 + assertTrue ( " Error message is unexpected " , 
 + exception . getMessage ( ) . contains ( 
 " occurred during the analysis of file " ) ) ; 
 } 
 } 
 @ @ - 233 , 7 + 236 , 8 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 treeWalker . processFiltered ( file , lines ) ; 
 } 
 catch ( CheckstyleException exception ) { 
 - assertTrue ( exception . getMessage ( ) . contains ( 
 + assertTrue ( " Error message is unexpected " , 
 + exception . getMessage ( ) . contains ( 
 " TokenStreamRecognitionException occurred during the analysis of file " ) ) ; 
 } 
 } 
 @ @ - 250 , 7 + 254 , 8 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 fail ( " CheckstyleException is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertTrue ( ex . getMessage ( ) . startsWith ( " cannot initialize module " 
 + assertTrue ( " Error message is unexpected " , 
 + ex . getMessage ( ) . startsWith ( " cannot initialize module " 
 + " com . puppycrawl . tools . checkstyle . TreeWalker - Token \ " " 
 + TokenTypes . ASSIGN + " \ " from required " 
 + " tokens was not found in default tokens list in check " ) ) ; 
 @ @ - 364 , 9 + 369 , 12 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 treeWalker . finishLocalSetup ( ) ; 
 
 final Context context = ( Context ) Whitebox . getInternalState ( treeWalker , " childContext " ) ; 
 - assertEquals ( contextClassLoader , context . get ( " classLoader " ) ) ; 
 - assertEquals ( " error " , context . get ( " severity " ) ) ; 
 - assertEquals ( String . valueOf ( 100 ) , context . get ( " tabWidth " ) ) ; 
 + assertEquals ( " Classloader object differs from expected " , 
 + contextClassLoader , context . get ( " classLoader " ) ) ; 
 + assertEquals ( " Severity differs from expected " , 
 + " error " , context . get ( " severity " ) ) ; 
 + assertEquals ( " Tab width differs from expected " , 
 + String . valueOf ( 100 ) , context . get ( " tabWidth " ) ) ; 
 } 
 
 @ Test 
 @ @ - 376 , 7 + 384 , 7 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 final File file = temporaryFolder . newFile ( " file . pdf " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , file . getPath ( ) , expected ) ; 
 - assertTrue ( VerifyInitCheck . isInitWasCalled ( ) ) ; 
 + assertTrue ( " Init was not called " , VerifyInitCheck . isInitWasCalled ( ) ) ; 
 } 
 
 private static class BadJavaDocCheck extends AbstractCheck { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java 
 index 5f9c5d4 . . c12400c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AbstractViolationReporterTest . java 
 @ @ - 50 , 20 + 50 , 22 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport { 
 
 @ Test 
 public void testGetMessageBundleWithPackage ( ) throws Exception { 
 - assertEquals ( " com . mycompany . checks . messages " , 
 + assertEquals ( " Message bundle differs from expected " , 
 + " com . mycompany . checks . messages " , 
 getGetMessageBundleMethod ( ) . invoke ( null , " com . mycompany . checks . MyCoolCheck " ) ) ; 
 } 
 
 @ Test 
 public void testGetMessageBundleWithoutPackage ( ) throws Exception { 
 - assertEquals ( " messages " , 
 + assertEquals ( " Message bundle differs from expected " , 
 + " messages " , 
 getGetMessageBundleMethod ( ) . invoke ( null , " MyCoolCheck " ) ) ; 
 } 
 
 @ Test 
 public void testCustomId ( ) { 
 emptyCheck . setId ( " MyId " ) ; 
 - assertEquals ( " MyId " , emptyCheck . getId ( ) ) ; 
 + assertEquals ( " Id differs from expected " , " MyId " , emptyCheck . getId ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 78 , 8 + 80 , 10 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport { 
 emptyCheck . log ( 0 , " msgKey " ) ; 
 
 final SortedSet < LocalizedMessage > messages = collector . getMessages ( ) ; 
 - assertEquals ( 1 , messages . size ( ) ) ; 
 - assertEquals ( " This is a custom message . " , messages . first ( ) 
 + assertEquals ( " Amount of messages differs from expected " , 
 + 1 , messages . size ( ) ) ; 
 + assertEquals ( " Message differs from expected " , 
 + " This is a custom message . " , messages . first ( ) 
 . getMessage ( ) ) ; 
 } 
 
 @ @ - 95 , 9 + 99 , 11 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport { 
 emptyCheck . log ( 0 , " msgKey " , " TestParam " ) ; 
 
 final SortedSet < LocalizedMessage > messages = collector . getMessages ( ) ; 
 - assertEquals ( 1 , messages . size ( ) ) ; 
 + assertEquals ( " Amount of messages differs from expected " , 
 + 1 , messages . size ( ) ) ; 
 
 - assertEquals ( " This is a custom message with TestParam . " , 
 + assertEquals ( " Message differs from expected " , 
 + " This is a custom message with TestParam . " , 
 messages . first ( ) . getMessage ( ) ) ; 
 } 
 
 @ @ - 115 , 7 + 121 , 8 @ @ public class AbstractViolationReporterTest extends BaseCheckTestSupport { 
 fail ( " exception expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 - assertEquals ( " Unmatched braces in the pattern . " , ex . getMessage ( ) ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + " Unmatched braces in the pattern . " , ex . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java 
 index 7bed040 . . 0e92608 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheckTest . java 
 @ @ - 43 , 7 + 43 , 8 @ @ public class ArrayTypeStyleCheckTest 
 public void testGetRequiredTokens ( ) { 
 final ArrayTypeStyleCheck checkObj = new ArrayTypeStyleCheck ( ) ; 
 final int [ ] expected = { TokenTypes . ARRAY _ DECLARATOR } ; 
 - assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; 
 + assertArrayEquals ( " Required tokens differs from expected " , 
 + expected , checkObj . getRequiredTokens ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 78 , 7 + 79 , 9 @ @ public class ArrayTypeStyleCheckTest 
 final int [ ] expected = { TokenTypes . ARRAY _ DECLARATOR } ; 
 final ArrayTypeStyleCheck check = new ArrayTypeStyleCheck ( ) ; 
 final int [ ] actual = check . getAcceptableTokens ( ) ; 
 - assertEquals ( 1 , actual . length ) ; 
 - assertArrayEquals ( expected , actual ) ; 
 + assertEquals ( " Amount of acceptable tokens differs from expected " , 
 + 1 , actual . length ) ; 
 + assertArrayEquals ( " Acceptable tokens differs from expected " , 
 + expected , actual ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 index 74a696b . . 0902c9c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheckTest . java 
 @ @ - 156 , 7 + 156 , 8 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport 
 TokenTypes . STRING _ LITERAL , 
 TokenTypes . CHAR _ LITERAL , 
 } ; 
 - assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; 
 + assertArrayEquals ( " Required tokens differ from expected " , 
 + expected , checkObj . getRequiredTokens ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 333 , 7 + 334 , 8 @ @ public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport 
 final AvoidEscapedUnicodeCharactersCheck check = new AvoidEscapedUnicodeCharactersCheck ( ) ; 
 final int [ ] actual = check . getAcceptableTokens ( ) ; 
 final int [ ] expected = { TokenTypes . STRING _ LITERAL , TokenTypes . CHAR _ LITERAL } ; 
 - assertArrayEquals ( expected , actual ) ; 
 + assertArrayEquals ( " Acceptable tokens differ from expected " , 
 + expected , actual ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 index 57c6b91 . . c7604b1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 @ @ - 57 , 7 + 57 , 8 @ @ public class FileSetCheckLifecycleTest 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 final FileContentsHolder checkObj = new FileContentsHolder ( ) ; 
 - assertArrayEquals ( CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getRequiredTokens ( ) ) ; 
 + assertArrayEquals ( " Required tokens array is not empty " , 
 + CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getRequiredTokens ( ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 index 48aa653 . . 986cea6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 @ @ - 157 , 7 + 157 , 8 @ @ public class NewlineAtEndOfFileCheckTest 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertTrue ( ex . getMessage ( ) . startsWith ( 
 + assertTrue ( " Error message is unexpected " , 
 + ex . getMessage ( ) . startsWith ( 
 " cannot initialize module com . puppycrawl . tools . checkstyle . " 
 + " checks . NewlineAtEndOfFileCheck - " 
 + " Cannot set property ' lineSeparator ' to ' ct ' in module " ) ) ; 
 @ @ - 187 , 9 + 188 , 11 @ @ public class NewlineAtEndOfFileCheckTest 
 lines . add ( " txt " ) ; 
 final File impossibleFile = new File ( " " ) ; 
 final Set < LocalizedMessage > messages = check . process ( impossibleFile , lines ) ; 
 - assertEquals ( 1 , messages . size ( ) ) ; 
 + assertEquals ( " Ammount of messages is unexpected " , 
 + 1 , messages . size ( ) ) ; 
 final Iterator < LocalizedMessage > iterator = messages . iterator ( ) ; 
 - assertEquals ( getCheckMessage ( MSG _ KEY _ UNABLE _ OPEN , " " ) , iterator . next ( ) . getMessage ( ) ) ; 
 + assertEquals ( " Violation message differs from expected " , 
 + getCheckMessage ( MSG _ KEY _ UNABLE _ OPEN , " " ) , iterator . next ( ) . getMessage ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 207 , 12 + 210 , 15 @ @ public class NewlineAtEndOfFileCheckTest 
 method . invoke ( new NewlineAtEndOfFileCheck ( ) , file ) ; 
 } 
 catch ( InvocationTargetException ex ) { 
 - assertTrue ( ex . getCause ( ) instanceof IOException ) ; 
 + assertTrue ( " Error type is unexpected " , 
 + ex . getCause ( ) instanceof IOException ) ; 
 if ( System . getProperty ( " os . name " ) . toLowerCase ( ENGLISH ) . startsWith ( " windows " ) ) { 
 - assertEquals ( " Unable to read 2 bytes , got 0 " , ex . getCause ( ) . getMessage ( ) ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + " Unable to read 2 bytes , got 0 " , ex . getCause ( ) . getMessage ( ) ) ; 
 } 
 else { 
 - assertEquals ( " Unable to read 1 bytes , got 0 " , ex . getCause ( ) . getMessage ( ) ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + " Unable to read 1 bytes , got 0 " , ex . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java 
 index b4e451d . . 6dd3dae 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java 
 @ @ - 52 , 7 + 52 , 8 @ @ public class OuterTypeFilenameCheckTest extends BaseCheckTestSupport { 
 TokenTypes . ENUM _ DEF , 
 TokenTypes . ANNOTATION _ DEF , 
 } ; 
 - assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; 
 + assertArrayEquals ( " Required tokens array differs from expected " , 
 + expected , checkObj . getRequiredTokens ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 81 , 7 + 82 , 8 @ @ public class OuterTypeFilenameCheckTest extends BaseCheckTestSupport { 
 TokenTypes . ENUM _ DEF , 
 TokenTypes . ANNOTATION _ DEF , 
 } ; 
 - assertArrayEquals ( expected , actual ) ; 
 + assertArrayEquals ( " Acceptable tokens array differs from expected " , 
 + expected , actual ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java 
 index 37e02fd . . a1c01c8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java 
 @ @ - 68 , 7 + 68 , 8 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { 
 public void testGetRequiredTokens ( ) { 
 final SuppressWarningsHolder checkObj = new SuppressWarningsHolder ( ) ; 
 final int [ ] expected = { TokenTypes . ANNOTATION } ; 
 - assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; 
 + assertArrayEquals ( " Required token array differs from expected " , 
 + expected , checkObj . getRequiredTokens ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 91 , 8 + 92 , 10 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { 
 
 @ Test 
 public void testGetDefaultAlias ( ) { 
 - assertEquals ( " somename " , SuppressWarningsHolder . getDefaultAlias ( " SomeName " ) ) ; 
 - assertEquals ( " somename " , SuppressWarningsHolder . getDefaultAlias ( " SomeNameCheck " ) ) ; 
 + assertEquals ( " Diffault alias differs from expected " , 
 + " somename " , SuppressWarningsHolder . getDefaultAlias ( " SomeName " ) ) ; 
 + assertEquals ( " Diffault alias differs from expected " , 
 + " somename " , SuppressWarningsHolder . getDefaultAlias ( " SomeNameCheck " ) ) ; 
 } 
 
 @ Test 
 @ @ - 105 , 7 + 108 , 8 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { 
 public void testSetAliasListCorrect ( ) { 
 final SuppressWarningsHolder holder = new SuppressWarningsHolder ( ) ; 
 holder . setAliasList ( " alias = value " ) ; 
 - assertEquals ( " value " , SuppressWarningsHolder . getAlias ( " alias " ) ) ; 
 + assertEquals ( " Alias differs from expected " , 
 + " value " , SuppressWarningsHolder . getAlias ( " alias " ) ) ; 
 } 
 
 @ Test 
 @ @ - 117 , 7 + 121 , 8 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { 
 fail ( " Exception expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 - assertEquals ( " ' = ' expected in alias list item : SomeAlias " , ex . getMessage ( ) ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + " ' = ' expected in alias list item : SomeAlias " , ex . getMessage ( ) ) ; 
 } 
 
 } 
 @ @ - 148 , 7 + 153 , 7 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { 
 new LocalizedMessage ( 100 , 10 , null , null , null , " id " , MemberNameCheck . class , " message " ) ; 
 final AuditEvent event = new AuditEvent ( source , " fileName " , message ) ; 
 
 - assertFalse ( SuppressWarningsHolder . isSuppressed ( event ) ) ; 
 + assertFalse ( " Event is not suppressed " , SuppressWarningsHolder . isSuppressed ( event ) ) ; 
 } 
 
 @ Test 
 @ @ - 177 , 19 + 182 , 22 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { 
 new LocalizedMessage ( 100 , 10 , null , null , null , " id " , MemberNameCheck . class , " msg " ) ; 
 final AuditEvent firstEventForTest = 
 new AuditEvent ( source , " fileName " , firstMessageForTest ) ; 
 - assertFalse ( SuppressWarningsHolder . isSuppressed ( firstEventForTest ) ) ; 
 + assertFalse ( " Event is suppressed " , 
 + SuppressWarningsHolder . isSuppressed ( firstEventForTest ) ) ; 
 
 final LocalizedMessage secondMessageForTest = 
 new LocalizedMessage ( 100 , 150 , null , null , null , " id " , MemberNameCheck . class , " msg " ) ; 
 final AuditEvent secondEventForTest = 
 new AuditEvent ( source , " fileName " , secondMessageForTest ) ; 
 - assertTrue ( SuppressWarningsHolder . isSuppressed ( secondEventForTest ) ) ; 
 + assertTrue ( " Event is not suppressed " , 
 + SuppressWarningsHolder . isSuppressed ( secondEventForTest ) ) ; 
 
 final LocalizedMessage thirdMessageForTest = 
 new LocalizedMessage ( 200 , 1 , null , null , null , " id " , MemberNameCheck . class , " msg " ) ; 
 final AuditEvent thirdEventForTest = 
 new AuditEvent ( source , " fileName " , thirdMessageForTest ) ; 
 - assertTrue ( SuppressWarningsHolder . isSuppressed ( thirdEventForTest ) ) ; 
 + assertTrue ( " Event is not suppressed " , 
 + SuppressWarningsHolder . isSuppressed ( thirdEventForTest ) ) ; 
 } 
 
 @ Test 
 @ @ - 237 , 8 + 245 , 10 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { 
 fail ( " Exception expected " ) ; 
 } 
 catch ( InvocationTargetException ex ) { 
 - assertTrue ( ex . getCause ( ) instanceof IllegalArgumentException ) ; 
 - assertEquals ( " Unexpected AST : Method Def [ 0x0 ] " , ex . getCause ( ) . getMessage ( ) ) ; 
 + assertTrue ( " Error type is unexpected " , 
 + ex . getCause ( ) instanceof IllegalArgumentException ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + " Unexpected AST : Method Def [ 0x0 ] " , ex . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 260 , 8 + 270 , 10 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { 
 fail ( " Exception expected " ) ; 
 } 
 catch ( InvocationTargetException ex ) { 
 - assertTrue ( ex . getCause ( ) instanceof IllegalArgumentException ) ; 
 - assertEquals ( " Expression or annotation array " 
 + assertTrue ( " Error type is unexpected " , 
 + ex . getCause ( ) instanceof IllegalArgumentException ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + " Expression or annotation array " 
 + " initializer AST expected : Method Def [ 0x0 ] " , ex . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 @ @ - 289 , 8 + 301 , 10 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { 
 fail ( " Exception expected " ) ; 
 } 
 catch ( InvocationTargetException ex ) { 
 - assertTrue ( ex . getCause ( ) instanceof IllegalArgumentException ) ; 
 - assertEquals ( " Unexpected container AST : Parent ast [ 0x0 ] " , ex . getCause ( ) . getMessage ( ) ) ; 
 + assertTrue ( " Error type is unexpected " , 
 + ex . getCause ( ) instanceof IllegalArgumentException ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + " Unexpected container AST : Parent ast [ 0x0 ] " , ex . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 305 , 7 + 319 , 8 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { 
 fail ( " Exception expected " ) ; 
 } 
 catch ( IllegalArgumentException ex ) { 
 - assertEquals ( " Identifier AST expected , but get null . " , ex . getMessage ( ) ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + " Identifier AST expected , but get null . " , ex . getMessage ( ) ) ; 
 } 
 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheckTest . java 
 index b2050a8 . . 95e6293 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TodoCommentCheckTest . java 
 @ @ - 43 , 7 + 43 , 8 @ @ public class TodoCommentCheckTest 
 public void testGetRequiredTokens ( ) { 
 final TodoCommentCheck checkObj = new TodoCommentCheck ( ) ; 
 final int [ ] expected = { TokenTypes . COMMENT _ CONTENT } ; 
 - assertArrayEquals ( expected , checkObj . getRequiredTokens ( ) ) ; 
 + assertArrayEquals ( " Required tokens differs from expected " , 
 + expected , checkObj . getRequiredTokens ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 65 , 7 + 66 , 9 @ @ public class TodoCommentCheckTest 
 final int [ ] expected = { TokenTypes . COMMENT _ CONTENT } ; 
 final TodoCommentCheck check = new TodoCommentCheck ( ) ; 
 final int [ ] actual = check . getAcceptableTokens ( ) ; 
 - assertEquals ( 1 , actual . length ) ; 
 - assertArrayEquals ( expected , actual ) ; 
 + assertEquals ( " Amount of acceptable tokens differs from expected " , 
 + 1 , actual . length ) ; 
 + assertArrayEquals ( " Acceptable tokens differs from expected " , 
 + expected , actual ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java 
 index 9ebcb6c . . d3b610d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheckTest . java 
 @ @ - 51 , 13 + 51 , 15 @ @ public class TrailingCommentCheckTest extends BaseCheckTestSupport { 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 final TrailingCommentCheck checkObj = new TrailingCommentCheck ( ) ; 
 - assertArrayEquals ( CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getRequiredTokens ( ) ) ; 
 + assertArrayEquals ( " Required tokens array is not empty " , 
 + CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getRequiredTokens ( ) ) ; 
 } 
 
 @ Test 
 public void testGetAcceptableTokens ( ) { 
 final TrailingCommentCheck checkObj = new TrailingCommentCheck ( ) ; 
 - assertArrayEquals ( CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getAcceptableTokens ( ) ) ; 
 + assertArrayEquals ( " Acceptable tokens array is not empty " , 
 + CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getAcceptableTokens ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 94 , 7 + 96 , 8 @ @ public class TrailingCommentCheckTest extends BaseCheckTestSupport { 
 Assert . fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 - assertEquals ( " visitToken ( ) shouldn ' t be called . " , ex . getMessage ( ) ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + " visitToken ( ) shouldn ' t be called . " , ex . getMessage ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 index fd2c339 . . 5069b4d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 @ @ - 411 , 8 + 411 , 10 @ @ public class TranslationCheckTest extends BaseCheckTestSupport { 
 } 
 catch ( IllegalArgumentException ex ) { 
 final String exceptionMessage = ex . getMessage ( ) ; 
 - assertThat ( exceptionMessage , containsString ( " 11 " ) ) ; 
 - assertThat ( exceptionMessage , endsWith ( " [ TranslationCheck ] " ) ) ; 
 + assertThat ( " Error message is unexpected " , 
 + exceptionMessage , containsString ( " 11 " ) ) ; 
 + assertThat ( " Error message is unexpected " , 
 + exceptionMessage , endsWith ( " [ TranslationCheck ] " ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 index 0902fb7 . . ec12d25 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / UncommentedMainCheckTest . java 
 @ @ - 110 , 7 + 110 , 8 @ @ public class UncommentedMainCheckTest 
 Assert . fail ( " IllegalStateException is expected " ) ; 
 } 
 catch ( IllegalStateException ex ) { 
 - assertEquals ( ast . toString ( ) , ex . getMessage ( ) ) ; 
 + assertEquals ( " Error message is unexpected " , 
 + ast . toString ( ) , ex . getMessage ( ) ) ; 
 } 
 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 index 575af9a . . dc24472 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / OneTopLevelClassCheckTest . java 
 @ @ - 52 , 7 + 52 , 8 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport { 
 @ Test 
 public void testGetRequiredTokens ( ) { 
 final OneTopLevelClassCheck checkObj = new OneTopLevelClassCheck ( ) ; 
 - assertArrayEquals ( CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getRequiredTokens ( ) ) ; 
 + assertArrayEquals ( " Required tokens array is not empty " , 
 + CommonUtils . EMPTY _ INT _ ARRAY , checkObj . getRequiredTokens ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 61 , 7 + 62 , 8 @ @ public class OneTopLevelClassCheckTest extends BaseCheckTestSupport { 
 check . getAcceptableTokens ( ) ; 
 / / ZERO tokens as Check do Traverse of Tree himself , he does not need to subscribed to 
 / / Tokens 
 - Assert . assertEquals ( 0 , check . getAcceptableTokens ( ) . length ) ; 
 + Assert . assertEquals ( " Acceptable tokens array size larger than 0 " , 
 + 0 , check . getAcceptableTokens ( ) . length ) ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / config / checkstyle _ checks . xml b / config / checkstyle _ checks . xml 
 index 9cb39c4 . . 12c15b0 100644 
 - - - a / config / checkstyle _ checks . xml 
 + + + b / config / checkstyle _ checks . xml 
 @ @ - 299 , 9 + 299 , 10 @ @ 
 < module name = " CommentsIndentation " / > 
 < module name = " HiddenField " > 
 < property name = " ignoreConstructorParameter " value = " true " / > 
 - 	 	 < property name = " ignoreSetter " value = " true " / > 
 + < property name = " ignoreSetter " value = " true " / > 
 < property name = " setterCanReturnItsClass " value = " true " / > 
 < / module > 
 + < module name = " InnerTypeLast " / > 
 
 < module name = " ModifiedControlVariable " / > 
 
 @ @ - 314 , 7 + 315 , 6 @ @ 
 < module name = " FinalParameters " / > 
 < module name = " IllegalToken " / > 
 < module name = " IllegalType " / > 
 - < module name = " InnerTypeLast " / > 
 < module name = " JavadocParagraph " / > 
 < module name = " JavadocTagContinuationIndentation " / > 
 < module name = " JavaNCSS " / > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index c43b976 . . 6564dad 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 237 , 13 + 237 , 6 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 verify ( checkConfig , pathToEmptyFile , expected ) ; 
 } 
 
 - public static class BadJavaDocCheck extends Check { 
 - @ Override 
 - public int [ ] getDefaultTokens ( ) { 
 - return new int [ ] { TokenTypes . SINGLE _ LINE _ COMMENT } ; 
 - } 
 - } 
 - 
 @ Test 
 public void testProcessNonJavaFiles ( ) throws Exception { 
 final TreeWalker treeWalker = new TreeWalker ( ) ; 
 @ @ - 300 , 4 + 293 , 11 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 
 treeWalker . processFiltered ( file , lines ) ; 
 } 
 + 
 + public static class BadJavaDocCheck extends Check { 
 + @ Override 
 + public int [ ] getDefaultTokens ( ) { 
 + return new int [ ] { TokenTypes . SINGLE _ LINE _ COMMENT } ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 index 0a02db4 . . c04062f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 @ @ - 33 , 39 + 33 , 6 @ @ import com . puppycrawl . tools . checkstyle . DefaultContext ; 
 
 public class AutomaticBeanTest { 
 
 - public class TestBean extends AutomaticBean { 
 - 
 - private String privateField ; 
 - 
 - private String wrong ; 
 - 
 - private int val ; 
 - 
 - public void setWrong ( String wrong ) { 
 - this . wrong = wrong ; 
 - } 
 - 
 - public void setVal ( int val ) { 
 - this . val = val ; 
 - } 
 - 
 - public void setExceptionalMethod ( String value ) { 
 - throw new IllegalStateException ( " for UT " ) ; 
 - } 
 - 
 - public void setName ( String name ) { 
 - } 
 - 
 - / * * 
 - * just for code coverage 
 - * @ param childConf a child of this component ' s Configuration 
 - * / 
 - @ Override 
 - protected void setupChild ( Configuration childConf ) throws CheckstyleException { 
 - super . setupChild ( childConf ) ; 
 - } 
 - } 
 - 
 @ Test 
 public void testConfigure _ NoSuchAttribute ( ) { 
 final TestBean testBean = new TestBean ( ) ; 
 @ @ - 130 , 4 + 97 , 36 @ @ public class AutomaticBeanTest { 
 } 
 } 
 
 + public class TestBean extends AutomaticBean { 
 + 
 + private String privateField ; 
 + 
 + private String wrong ; 
 + 
 + private int val ; 
 + 
 + public void setWrong ( String wrong ) { 
 + this . wrong = wrong ; 
 + } 
 + 
 + public void setVal ( int val ) { 
 + this . val = val ; 
 + } 
 + 
 + public void setExceptionalMethod ( String value ) { 
 + throw new IllegalStateException ( " for UT " ) ; 
 + } 
 + 
 + public void setName ( String name ) { 
 + } 
 + 
 + / * * 
 + * just for code coverage 
 + * @ param childConf a child of this component ' s Configuration 
 + * / 
 + @ Override 
 + protected void setupChild ( Configuration childConf ) throws CheckstyleException { 
 + super . setupChild ( childConf ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 index 168528b . . 2ac7f53 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 @ @ - 45 , 33 + 45 , 6 @ @ public class FileSetCheckLifecycleTest 
 return dc ; 
 } 
 
 - public static class TestFileSetCheck extends AbstractFileSetCheck { 
 - private static boolean destroyed ; 
 - private static boolean fileContentAvailable ; 
 - 
 - @ Override 
 - public void destroy ( ) { 
 - destroyed = true ; 
 - } 
 - 
 - public static boolean isDestroyed ( ) { 
 - return destroyed ; 
 - } 
 - 
 - public static boolean isFileContentAvailable ( ) { 
 - return fileContentAvailable ; 
 - } 
 - 
 - @ Override 
 - protected void processFiltered ( File file , List < String > lines ) { 
 - } 
 - 
 - @ Override 
 - public void finishProcessing ( ) { 
 - fileContentAvailable = FileContentsHolder . getContents ( ) ! = null ; 
 - } 
 - } 
 - 
 @ Test 
 public void testTranslation ( ) throws Exception { 
 final Configuration checkConfig = 
 @ @ - 111 , 4 + 84 , 31 @ @ public class FileSetCheckLifecycleTest 
 assertTrue ( " FileContent should be available during finishProcessing ( ) call " , 
 TestFileSetCheck . isFileContentAvailable ( ) ) ; 
 } 
 + 
 + public static class TestFileSetCheck extends AbstractFileSetCheck { 
 + private static boolean destroyed ; 
 + private static boolean fileContentAvailable ; 
 + 
 + @ Override 
 + public void destroy ( ) { 
 + destroyed = true ; 
 + } 
 + 
 + public static boolean isDestroyed ( ) { 
 + return destroyed ; 
 + } 
 + 
 + public static boolean isFileContentAvailable ( ) { 
 + return fileContentAvailable ; 
 + } 
 + 
 + @ Override 
 + protected void processFiltered ( File file , List < String > lines ) { 
 + } 
 + 
 + @ Override 
 + public void finishProcessing ( ) { 
 + fileContentAvailable = FileContentsHolder . getContents ( ) ! = null ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 index a02d6a3 . . 5be3c7f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AbstractJavadocCheckTest . java 
 @ @ - 33 , 19 + 33 , 6 @ @ import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 
 public class AbstractJavadocCheckTest extends BaseCheckTestSupport { 
 - public static class TempCheck extends AbstractJavadocCheck { 
 - 
 - @ Override 
 - public int [ ] getDefaultJavadocTokens ( ) { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public void visitJavadocToken ( DetailNode ast ) { 
 - / / do nothing 
 - } 
 - 
 - } 
 
 @ Test 
 public void testNumberFormatException ( ) throws Exception { 
 @ @ - 92 , 4 + 79 , 17 @ @ public class AbstractJavadocCheckTest extends BaseCheckTestSupport { 
 } ; 
 verify ( checker , getPath ( " javadoc / InputCorrectJavaDocParagraphCheck . java " ) , expected ) ; 
 } 
 + 
 + public static class TempCheck extends AbstractJavadocCheck { 
 + 
 + @ Override 
 + public int [ ] getDefaultJavadocTokens ( ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public void visitJavadocToken ( DetailNode ast ) { 
 + / / do nothing 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java 
 index 59149dd . . cea443a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllBlockCommentsTest . java 
 @ @ - 38 , 6 + 38 , 15 @ @ public class AllBlockCommentsTest extends BaseCheckTestSupport { 
 
 private static final String LINE _ SEPARATOR = System . getProperty ( " line . separator " ) ; 
 
 + @ Test 
 + public void testAllBlockComments ( ) throws Exception { 
 + DefaultConfiguration checkConfig = createCheckConfig ( BlockCommentListenerCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " comments " + File . separator 
 + + " InputFullOfBlockComments . java " ) , expected ) ; 
 + Assert . assertTrue ( allComments . isEmpty ( ) ) ; 
 + } 
 + 
 public static class BlockCommentListenerCheck extends Check { 
 @ Override 
 public boolean isCommentNodesRequired ( ) { 
 @ @ - 74 , 15 + 83 , 5 @ @ public class AllBlockCommentsTest extends BaseCheckTestSupport { 
 Assert . fail ( " Unexpected comment : " + commentContent ) ; 
 } 
 } 
 - 
 - } 
 - 
 - @ Test 
 - public void testAllBlockComments ( ) throws Exception { 
 - DefaultConfiguration checkConfig = createCheckConfig ( BlockCommentListenerCheck . class ) ; 
 - final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " comments " + File . separator 
 - + " InputFullOfBlockComments . java " ) , expected ) ; 
 - Assert . assertTrue ( allComments . isEmpty ( ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java 
 index becdd12 . . e9b6023 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / comments / AllSinglelineCommentsTest . java 
 @ @ - 37 , 6 + 37 , 15 @ @ public class AllSinglelineCommentsTest extends BaseCheckTestSupport { 
 
 private static final String LINE _ SEPARATOR = System . getProperty ( " line . separator " ) ; 
 
 + @ Test 
 + public void testAllBlockComments ( ) throws Exception { 
 + DefaultConfiguration checkConfig = createCheckConfig ( SinglelineCommentListenerCheck . class ) ; 
 + final String [ ] expected = { } ; 
 + verify ( checkConfig , getPath ( " comments " + File . separator 
 + + " InputFullOfSinglelineComments . java " ) , expected ) ; 
 + Assert . assertTrue ( allComments . isEmpty ( ) ) ; 
 + } 
 + 
 public static class SinglelineCommentListenerCheck extends Check { 
 @ Override 
 public boolean isCommentNodesRequired ( ) { 
 @ @ - 69 , 15 + 78 , 5 @ @ public class AllSinglelineCommentsTest extends BaseCheckTestSupport { 
 Assert . fail ( " Unexpected comment : " + commentContent ) ; 
 } 
 } 
 - 
 - } 
 - 
 - @ Test 
 - public void testAllBlockComments ( ) throws Exception { 
 - DefaultConfiguration checkConfig = createCheckConfig ( SinglelineCommentListenerCheck . class ) ; 
 - final String [ ] expected = { } ; 
 - verify ( checkConfig , getPath ( " comments " + File . separator 
 - + " InputFullOfSinglelineComments . java " ) , expected ) ; 
 - Assert . assertTrue ( allComments . isEmpty ( ) ) ; 
 } 
 }
