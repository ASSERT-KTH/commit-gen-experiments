BLEU SCORE: 0.0370865905565703

TEST MSG: Issue # 4342 : Applied requested changes
GENERATED MSG: issue969 : Fix upper / lower case conversation , enhance tests

TEST DIFF (one line): diff - - git a / config / import - control . xml b / config / import - control . xml <nl> index 53eef91 . . d4556a7 100644 <nl> - - - a / config / import - control . xml <nl> + + + b / config / import - control . xml <nl> @ @ - 57 , 7 + 57 , 6 @ @ <nl> < allow pkg = " java . nio " local - only = " true " / > <nl> <nl> < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > <nl> - < allow class = " com . google . common . base . CharMatcher " local - only = " true " / > <nl> < allow class = " com . google . common . collect . ImmutableMap " local - only = " true " / > <nl> < / subpackage > <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> index 976048c . . 099ff51 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import java . util . regex . Pattern ; <nl> <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . puppycrawl . tools . checkstyle . grammars . CommentListener ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> * Represents the contents of a file . <nl> @ @ - 322 , 8 + 323 , 7 @ @ public final class FileContents implements CommentListener { <nl> * @ return if the specified line consists only of tabs and spaces . <nl> * * / <nl> public boolean lineIsBlank ( int lineNo ) { <nl> - / / possible improvement : avoid garbage creation in trim ( ) <nl> - return line ( lineNo ) . trim ( ) . isEmpty ( ) ; <nl> + return CommonUtils . isBlank ( line ( lineNo ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> index 2d7f844 . . 38f2d37 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TextBlock ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 299 , 7 + 300 , 7 @ @ public class AvoidEscapedUnicodeCharactersCheck <nl> * / <nl> private static boolean isTrailingBlockComment ( TextBlock comment , String line ) { <nl> return comment . getText ( ) . length ! = 1 <nl> - | | line . substring ( comment . getEndColNo ( ) + 1 ) . trim ( ) . isEmpty ( ) ; <nl> + | | CommonUtils . isBlank ( line . substring ( comment . getEndColNo ( ) + 1 ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> index 4448f67 . . 1f9962b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java <nl> @ @ - 172 , 7 + 172 , 8 @ @ public class TrailingCommentCheck extends AbstractCheck { <nl> <nl> / / do not check comment which doesn ' t end line <nl> if ( comment . getText ( ) . length = = 1 <nl> - & & ! line . substring ( comment . getEndColNo ( ) + 1 ) . trim ( ) . isEmpty ( ) ) { <nl> + & & ! CommonUtils . isBlank ( line <nl> + . substring ( comment . getEndColNo ( ) + 1 ) ) ) { <nl> continue ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> index 22bf555 . . 4c8bcb7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java <nl> @ @ - 194 , 9 + 194 , 10 @ @ public class EmptyBlockCheck <nl> } <nl> } <nl> else { <nl> - / / check only whitespace of first & last lines <nl> - if ( lines [ slistLineNo - 1 ] . substring ( slistColNo + 1 ) . trim ( ) . isEmpty ( ) <nl> - & & lines [ rcurlyLineNo - 1 ] . substring ( 0 , rcurlyColNo ) . trim ( ) . isEmpty ( ) ) { <nl> + final String firstLine = lines [ slistLineNo - 1 ] . substring ( slistColNo + 1 ) ; <nl> + final String lastLine = lines [ rcurlyLineNo - 1 ] . substring ( 0 , rcurlyColNo ) ; <nl> + if ( CommonUtils . isBlank ( firstLine ) <nl> + & & CommonUtils . isBlank ( lastLine ) ) { <nl> / / check if all lines are also only whitespace <nl> returnValue = ! checkIsAllLinesAreWhitespace ( lines , slistLineNo , rcurlyLineNo ) ; <nl> } <nl> @ @ - 221 , 7 + 222 , 7 @ @ public class EmptyBlockCheck <nl> private static boolean checkIsAllLinesAreWhitespace ( String [ ] lines , int lineFrom , int lineTo ) { <nl> boolean result = true ; <nl> for ( int i = lineFrom ; i < lineTo - 1 ; i + + ) { <nl> - if ( ! lines [ i ] . trim ( ) . isEmpty ( ) ) { <nl> + if ( ! CommonUtils . isBlank ( lines [ i ] ) ) { <nl> result = false ; <nl> break ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> index d7244f1 . . 0a4236c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . regex . Pattern ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> * Checks for fall through in switch statements <nl> @ @ - 353 , 7 + 354 , 7 @ @ public class FallThroughCheck extends AbstractCheck { <nl> / / } <nl> final int startLineNo = currentCase . getLineNo ( ) ; <nl> for ( int i = endLineNo - 2 ; i > startLineNo - 1 ; i - - ) { <nl> - if ( ! lines [ i ] . trim ( ) . isEmpty ( ) ) { <nl> + if ( ! CommonUtils . isBlank ( lines [ i ] ) ) { <nl> allThroughComment = matchesComment ( reliefPattern , lines [ i ] , i + 1 ) ; <nl> break ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java <nl> index 54a0b72 . . 05ee9fe 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 711 , 7 + 712 , 8 @ @ public class CustomImportOrderCheck extends AbstractCheck { <nl> / / [ lineNo - 2 ] is the number of the previous line <nl> / / because the numbering starts from zero . <nl> int lineBeforeIndex = lineNo - 2 ; <nl> - while ( lineBeforeIndex > = 0 & & lines [ lineBeforeIndex ] . trim ( ) . isEmpty ( ) ) { <nl> + while ( lineBeforeIndex > = 0 <nl> + & & CommonUtils . isBlank ( lines [ lineBeforeIndex ] ) ) { <nl> lineBeforeIndex - - ; <nl> result + + ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java <nl> index 2de211f . . 619627e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java <nl> @ @ - 152 , 7 + 152 , 7 @ @ public class JavadocParagraphCheck extends AbstractJavadocCheck { <nl> private void checkEmptyLine ( DetailNode newline ) { <nl> final DetailNode nearestToken = getNearestNode ( newline ) ; <nl> if ( ! isLastEmptyLine ( newline ) & & nearestToken . getType ( ) = = JavadocTokenTypes . TEXT <nl> - & & ! nearestToken . getText ( ) . trim ( ) . isEmpty ( ) ) { <nl> + & & ! CommonUtils . isBlank ( nearestToken . getText ( ) ) ) { <nl> log ( newline . getLineNumber ( ) , MSG _ TAG _ AFTER ) ; <nl> } <nl> } <nl> @ @ - 199 , 7 + 199 , 7 @ @ public class JavadocParagraphCheck extends AbstractJavadocCheck { <nl> if ( previousSibling ! = null <nl> & & previousSibling . getParent ( ) . getType ( ) = = JavadocTokenTypes . JAVADOC ) { <nl> if ( previousSibling . getType ( ) = = JavadocTokenTypes . TEXT <nl> - & & previousSibling . getText ( ) . trim ( ) . isEmpty ( ) ) { <nl> + & & CommonUtils . isBlank ( previousSibling . getText ( ) ) ) { <nl> previousSibling = JavadocUtils . getPreviousSibling ( previousSibling ) ; <nl> } <nl> result = previousSibling ! = null <nl> @ @ - 218 , 7 + 218 , 7 @ @ public class JavadocParagraphCheck extends AbstractJavadocCheck { <nl> DetailNode previousNode = JavadocUtils . getPreviousSibling ( paragraphTag ) ; <nl> while ( previousNode ! = null ) { <nl> if ( previousNode . getType ( ) = = JavadocTokenTypes . TEXT <nl> - & & ! previousNode . getText ( ) . trim ( ) . isEmpty ( ) <nl> + & & ! CommonUtils . isBlank ( previousNode . getText ( ) ) <nl> | | previousNode . getType ( ) ! = JavadocTokenTypes . LEADING _ ASTERISK <nl> & & previousNode . getType ( ) ! = JavadocTokenTypes . NEWLINE <nl> & & previousNode . getType ( ) ! = JavadocTokenTypes . TEXT ) { <nl> @ @ - 257 , 7 + 257 , 7 @ @ public class JavadocParagraphCheck extends AbstractJavadocCheck { <nl> DetailNode nextNode = JavadocUtils . getNextSibling ( newLine ) ; <nl> while ( nextNode ! = null & & nextNode . getType ( ) ! = JavadocTokenTypes . JAVADOC _ TAG ) { <nl> if ( nextNode . getType ( ) = = JavadocTokenTypes . TEXT <nl> - & & ! nextNode . getText ( ) . trim ( ) . isEmpty ( ) <nl> + & & ! CommonUtils . isBlank ( nextNode . getText ( ) ) <nl> | | nextNode . getType ( ) = = JavadocTokenTypes . HTML _ ELEMENT ) { <nl> result = false ; <nl> break ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java <nl> index 4c55ba3 . . ebfc3c2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . List ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailNode ; <nl> import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; <nl> <nl> / * * <nl> @ @ - 96 , 7 + 97 , 7 @ @ public class JavadocTagContinuationIndentationCheck extends AbstractJavadocCheck <nl> . getNextSibling ( newlineNode ) ) ; <nl> if ( textNode ! = null & & textNode . getType ( ) = = JavadocTokenTypes . TEXT ) { <nl> final String text = textNode . getText ( ) ; <nl> - if ( ! text . trim ( ) . isEmpty ( ) <nl> + if ( ! CommonUtils . isBlank ( text . trim ( ) ) <nl> & & ( text . length ( ) < = offset <nl> | | ! text . substring ( 1 , offset + 1 ) . trim ( ) . isEmpty ( ) ) ) { <nl> log ( textNode . getLineNumber ( ) , MSG _ KEY , offset ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java <nl> index 8e331d1 . . 5046477 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java <nl> @ @ - 168 , 7 + 168 , 7 @ @ public class SummaryJavadocCheck extends AbstractJavadocCheck { <nl> boolean containsInheritDoc = false ; <nl> for ( DetailNode child : ast . getChildren ( ) ) { <nl> if ( child . getType ( ) = = JavadocTokenTypes . TEXT ) { <nl> - if ( ! child . getText ( ) . trim ( ) . isEmpty ( ) ) { <nl> + if ( ! CommonUtils . isBlank ( child . getText ( ) ) ) { <nl> extraTextFound = true ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> index 016dd56 . . bfd1bbc 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> @ @ - 488 , 7 + 488 , 7 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { <nl> final int number = 3 ; <nl> if ( lineNo > = number ) { <nl> final String prePreviousLine = getLines ( ) [ lineNo - number ] ; <nl> - result = prePreviousLine . trim ( ) . isEmpty ( ) ; <nl> + result = CommonUtils . isBlank ( prePreviousLine ) ; <nl> } <nl> return result ; <nl> } <nl> @ @ - 549 , 7 + 549 , 7 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { <nl> if ( lineNo ! = 1 ) { <nl> / / [ lineNo - 2 ] is the number of the previous line as the numbering starts from zero . <nl> final String lineBefore = getLines ( ) [ lineNo - 2 ] ; <nl> - result = lineBefore . trim ( ) . isEmpty ( ) ; <nl> + result = CommonUtils . isBlank ( lineBefore ) ; <nl> } <nl> return result ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java <nl> index 3763322 . . bf285d5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java <nl> @ @ - 229 , 7 + 229 , 7 @ @ public class SingleSpaceSeparatorCheck extends AbstractCheck { <nl> * text on the { @ code line } . <nl> * / <nl> private static boolean isFirstInLine ( String line , int columnNo ) { <nl> - return line . substring ( 0 , columnNo + 1 ) . trim ( ) . isEmpty ( ) ; <nl> + return CommonUtils . isBlank ( line . substring ( 0 , columnNo + 1 ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java <nl> index c87567c . . 72c99c8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . utils ; <nl> <nl> - import com . google . common . base . CharMatcher ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . FullIdent ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> @ @ - 146 , 7 + 145 , 7 @ @ public final class AnnotationUtility { <nl> throw new IllegalArgumentException ( " the annotation is null " ) ; <nl> } <nl> <nl> - if ( CharMatcher . WHITESPACE . matchesAllOf ( annotation ) ) { <nl> + if ( CommonUtils . isBlank ( annotation ) ) { <nl> throw new IllegalArgumentException ( <nl> " the annotation is empty or spaces " ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> index 98a208a . . 82ac3d2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java <nl> @ @ - 36 , 7 + 36 , 6 @ @ import java . util . regex . PatternSyntaxException ; <nl> <nl> import org . apache . commons . beanutils . ConversionException ; <nl> <nl> - import com . google . common . base . CharMatcher ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> <nl> / * * <nl> @ @ - 425 , 17 + 424 , 6 @ @ public final class CommonUtils { <nl> } <nl> <nl> / * * <nl> - * Check if a string is blank . <nl> - * A string is considered blank if it is null , empty or contains only whitespace characters , <nl> - * as determined by { @ link CharMatcher # WHITESPACE } . <nl> - * @ param str the string to check <nl> - * @ return true if str is either null , empty or whitespace - only . <nl> - * / <nl> - public static boolean isBlank ( String str ) { <nl> - return str = = null | | CharMatcher . WHITESPACE . matchesAllOf ( str ) ; <nl> - } <nl> - <nl> - / * * <nl> * Returns file name without extension . <nl> * We do not use the method from Guava library to reduce Checkstyle ' s dependencies <nl> * on external libraries . <nl> @ @ - 512 , 4 + 500 , 23 @ @ public final class CommonUtils { <nl> <nl> return isName ; <nl> } <nl> + <nl> + / * * <nl> + * Checks if the value arg is blank by either being null , <nl> + * empty , or contains only whitespace characters . <nl> + * @ param value A string to check . <nl> + * @ return true if the arg is blank . <nl> + * / <nl> + public static boolean isBlank ( String value ) { <nl> + boolean result = true ; <nl> + if ( value ! = null & & ! value . isEmpty ( ) ) { <nl> + for ( int i = 0 ; i < value . length ( ) ; i + + ) { <nl> + if ( ! Character . isWhitespace ( value . charAt ( i ) ) ) { <nl> + result = false ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + return result ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> index 73b4f01 . . 449ef4f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java <nl> @ @ - 278 , 6 + 278 , 46 @ @ public class CommonUtilsTest { <nl> } <nl> <nl> @ Test <nl> + public void testIsBlank ( ) throws Exception { <nl> + assertFalse ( CommonUtils . isBlank ( " string " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsBlankAheadWhitespace ( ) throws Exception { <nl> + assertFalse ( CommonUtils . isBlank ( " string " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsBlankBehindWhitespace ( ) throws Exception { <nl> + assertFalse ( CommonUtils . isBlank ( " string " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsBlankWithWhitespacesAround ( ) throws Exception { <nl> + assertFalse ( CommonUtils . isBlank ( " string " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsBlankWhitespaceInside ( ) throws Exception { <nl> + assertFalse ( CommonUtils . isBlank ( " str ing " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsBlankNullString ( ) throws Exception { <nl> + assertTrue ( CommonUtils . isBlank ( null ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsBlankWithEmptyString ( ) throws Exception { <nl> + assertTrue ( CommonUtils . isBlank ( " " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsBlankWithWhitespacesOnly ( ) throws Exception { <nl> + assertTrue ( CommonUtils . isBlank ( " " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> @ PrepareForTest ( { CommonUtils . class , CommonUtilsTest . class } ) <nl> @ SuppressWarnings ( " unchecked " ) <nl> public void testLoadSuppressionsUriSyntaxException ( ) throws Exception {
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 62ec752 . . c1fa102 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 230 , 7 + 230 , 7 @ @ <nl> < ! - - < includeTests > true < / includeTests > - - > <nl> < rulesets > <nl> < ruleset > rulesets / java / basic . xml < / ruleset > <nl> - < ! - - < ruleset > rulesets / java / braces . xml < / ruleset > - - > <nl> + < ruleset > rulesets / java / braces . xml < / ruleset > <nl> < ruleset > rulesets / java / clone . xml < / ruleset > <nl> < ! - - < ruleset > rulesets / java / codesize . xml < / ruleset > - - > <nl> < ! - - < ruleset > rulesets / java / comments . xml < / ruleset > - - > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java <nl> index 86c7227 . . d41db3c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java <nl> @ @ - 164 , 8 + 164 , 9 @ @ class FileDrop <nl> if ( recursive & & c instanceof Container ) { <nl> final Container cont = ( Container ) c ; <nl> final Component [ ] comps = cont . getComponents ( ) ; <nl> - for ( Component element : comps ) <nl> + for ( Component element : comps ) { <nl> makeDropTarget ( element , recursive ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 179 , 8 + 180 , 9 @ @ class FileDrop <nl> / / See if any of the flavors are a file list <nl> int i = 0 ; <nl> while ( ! ok & & i < flavors . length ) { / / Is the flavor a file list ? <nl> - if ( flavors [ i ] . equals ( DataFlavor . javaFileListFlavor ) ) <nl> + if ( flavors [ i ] . equals ( DataFlavor . javaFileListFlavor ) ) { <nl> ok = true ; <nl> + } <nl> i + + ; <nl> } <nl>

TEST DIFF:
diff - - git a / config / import - control . xml b / config / import - control . xml 
 index 53eef91 . . d4556a7 100644 
 - - - a / config / import - control . xml 
 + + + b / config / import - control . xml 
 @ @ - 57 , 7 + 57 , 6 @ @ 
 < allow pkg = " java . nio " local - only = " true " / > 
 
 < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > 
 - < allow class = " com . google . common . base . CharMatcher " local - only = " true " / > 
 < allow class = " com . google . common . collect . ImmutableMap " local - only = " true " / > 
 < / subpackage > 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 index 976048c . . 099ff51 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / FileContents . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import java . util . regex . Pattern ; 
 
 import com . google . common . collect . ImmutableMap ; 
 import com . puppycrawl . tools . checkstyle . grammars . CommentListener ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 * Represents the contents of a file . 
 @ @ - 322 , 8 + 323 , 7 @ @ public final class FileContents implements CommentListener { 
 * @ return if the specified line consists only of tabs and spaces . 
 * * / 
 public boolean lineIsBlank ( int lineNo ) { 
 - / / possible improvement : avoid garbage creation in trim ( ) 
 - return line ( lineNo ) . trim ( ) . isEmpty ( ) ; 
 + return CommonUtils . isBlank ( line ( lineNo ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 index 2d7f844 . . 38f2d37 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AvoidEscapedUnicodeCharactersCheck . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TextBlock ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 * < p > 
 @ @ - 299 , 7 + 300 , 7 @ @ public class AvoidEscapedUnicodeCharactersCheck 
 * / 
 private static boolean isTrailingBlockComment ( TextBlock comment , String line ) { 
 return comment . getText ( ) . length ! = 1 
 - | | line . substring ( comment . getEndColNo ( ) + 1 ) . trim ( ) . isEmpty ( ) ; 
 + | | CommonUtils . isBlank ( line . substring ( comment . getEndColNo ( ) + 1 ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 index 4448f67 . . 1f9962b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / TrailingCommentCheck . java 
 @ @ - 172 , 7 + 172 , 8 @ @ public class TrailingCommentCheck extends AbstractCheck { 
 
 / / do not check comment which doesn ' t end line 
 if ( comment . getText ( ) . length = = 1 
 - & & ! line . substring ( comment . getEndColNo ( ) + 1 ) . trim ( ) . isEmpty ( ) ) { 
 + & & ! CommonUtils . isBlank ( line 
 + . substring ( comment . getEndColNo ( ) + 1 ) ) ) { 
 continue ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 index 22bf555 . . 4c8bcb7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheck . java 
 @ @ - 194 , 9 + 194 , 10 @ @ public class EmptyBlockCheck 
 } 
 } 
 else { 
 - / / check only whitespace of first & last lines 
 - if ( lines [ slistLineNo - 1 ] . substring ( slistColNo + 1 ) . trim ( ) . isEmpty ( ) 
 - & & lines [ rcurlyLineNo - 1 ] . substring ( 0 , rcurlyColNo ) . trim ( ) . isEmpty ( ) ) { 
 + final String firstLine = lines [ slistLineNo - 1 ] . substring ( slistColNo + 1 ) ; 
 + final String lastLine = lines [ rcurlyLineNo - 1 ] . substring ( 0 , rcurlyColNo ) ; 
 + if ( CommonUtils . isBlank ( firstLine ) 
 + & & CommonUtils . isBlank ( lastLine ) ) { 
 / / check if all lines are also only whitespace 
 returnValue = ! checkIsAllLinesAreWhitespace ( lines , slistLineNo , rcurlyLineNo ) ; 
 } 
 @ @ - 221 , 7 + 222 , 7 @ @ public class EmptyBlockCheck 
 private static boolean checkIsAllLinesAreWhitespace ( String [ ] lines , int lineFrom , int lineTo ) { 
 boolean result = true ; 
 for ( int i = lineFrom ; i < lineTo - 1 ; i + + ) { 
 - if ( ! lines [ i ] . trim ( ) . isEmpty ( ) ) { 
 + if ( ! CommonUtils . isBlank ( lines [ i ] ) ) { 
 result = false ; 
 break ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 index d7244f1 . . 0a4236c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FallThroughCheck . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . regex . Pattern ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 * Checks for fall through in switch statements 
 @ @ - 353 , 7 + 354 , 7 @ @ public class FallThroughCheck extends AbstractCheck { 
 / / } 
 final int startLineNo = currentCase . getLineNo ( ) ; 
 for ( int i = endLineNo - 2 ; i > startLineNo - 1 ; i - - ) { 
 - if ( ! lines [ i ] . trim ( ) . isEmpty ( ) ) { 
 + if ( ! CommonUtils . isBlank ( lines [ i ] ) ) { 
 allThroughComment = matchesComment ( reliefPattern , lines [ i ] , i + 1 ) ; 
 break ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java 
 index 54a0b72 . . 05ee9fe 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 * < p > 
 @ @ - 711 , 7 + 712 , 8 @ @ public class CustomImportOrderCheck extends AbstractCheck { 
 / / [ lineNo - 2 ] is the number of the previous line 
 / / because the numbering starts from zero . 
 int lineBeforeIndex = lineNo - 2 ; 
 - while ( lineBeforeIndex > = 0 & & lines [ lineBeforeIndex ] . trim ( ) . isEmpty ( ) ) { 
 + while ( lineBeforeIndex > = 0 
 + & & CommonUtils . isBlank ( lines [ lineBeforeIndex ] ) ) { 
 lineBeforeIndex - - ; 
 result + + ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java 
 index 2de211f . . 619627e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocParagraphCheck . java 
 @ @ - 152 , 7 + 152 , 7 @ @ public class JavadocParagraphCheck extends AbstractJavadocCheck { 
 private void checkEmptyLine ( DetailNode newline ) { 
 final DetailNode nearestToken = getNearestNode ( newline ) ; 
 if ( ! isLastEmptyLine ( newline ) & & nearestToken . getType ( ) = = JavadocTokenTypes . TEXT 
 - & & ! nearestToken . getText ( ) . trim ( ) . isEmpty ( ) ) { 
 + & & ! CommonUtils . isBlank ( nearestToken . getText ( ) ) ) { 
 log ( newline . getLineNumber ( ) , MSG _ TAG _ AFTER ) ; 
 } 
 } 
 @ @ - 199 , 7 + 199 , 7 @ @ public class JavadocParagraphCheck extends AbstractJavadocCheck { 
 if ( previousSibling ! = null 
 & & previousSibling . getParent ( ) . getType ( ) = = JavadocTokenTypes . JAVADOC ) { 
 if ( previousSibling . getType ( ) = = JavadocTokenTypes . TEXT 
 - & & previousSibling . getText ( ) . trim ( ) . isEmpty ( ) ) { 
 + & & CommonUtils . isBlank ( previousSibling . getText ( ) ) ) { 
 previousSibling = JavadocUtils . getPreviousSibling ( previousSibling ) ; 
 } 
 result = previousSibling ! = null 
 @ @ - 218 , 7 + 218 , 7 @ @ public class JavadocParagraphCheck extends AbstractJavadocCheck { 
 DetailNode previousNode = JavadocUtils . getPreviousSibling ( paragraphTag ) ; 
 while ( previousNode ! = null ) { 
 if ( previousNode . getType ( ) = = JavadocTokenTypes . TEXT 
 - & & ! previousNode . getText ( ) . trim ( ) . isEmpty ( ) 
 + & & ! CommonUtils . isBlank ( previousNode . getText ( ) ) 
 | | previousNode . getType ( ) ! = JavadocTokenTypes . LEADING _ ASTERISK 
 & & previousNode . getType ( ) ! = JavadocTokenTypes . NEWLINE 
 & & previousNode . getType ( ) ! = JavadocTokenTypes . TEXT ) { 
 @ @ - 257 , 7 + 257 , 7 @ @ public class JavadocParagraphCheck extends AbstractJavadocCheck { 
 DetailNode nextNode = JavadocUtils . getNextSibling ( newLine ) ; 
 while ( nextNode ! = null & & nextNode . getType ( ) ! = JavadocTokenTypes . JAVADOC _ TAG ) { 
 if ( nextNode . getType ( ) = = JavadocTokenTypes . TEXT 
 - & & ! nextNode . getText ( ) . trim ( ) . isEmpty ( ) 
 + & & ! CommonUtils . isBlank ( nextNode . getText ( ) ) 
 | | nextNode . getType ( ) = = JavadocTokenTypes . HTML _ ELEMENT ) { 
 result = false ; 
 break ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java 
 index 4c55ba3 . . ebfc3c2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocTagContinuationIndentationCheck . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . List ; 
 import com . puppycrawl . tools . checkstyle . api . DetailNode ; 
 import com . puppycrawl . tools . checkstyle . api . JavadocTokenTypes ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . JavadocUtils ; 
 
 / * * 
 @ @ - 96 , 7 + 97 , 7 @ @ public class JavadocTagContinuationIndentationCheck extends AbstractJavadocCheck 
 . getNextSibling ( newlineNode ) ) ; 
 if ( textNode ! = null & & textNode . getType ( ) = = JavadocTokenTypes . TEXT ) { 
 final String text = textNode . getText ( ) ; 
 - if ( ! text . trim ( ) . isEmpty ( ) 
 + if ( ! CommonUtils . isBlank ( text . trim ( ) ) 
 & & ( text . length ( ) < = offset 
 | | ! text . substring ( 1 , offset + 1 ) . trim ( ) . isEmpty ( ) ) ) { 
 log ( textNode . getLineNumber ( ) , MSG _ KEY , offset ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java 
 index 8e331d1 . . 5046477 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheck . java 
 @ @ - 168 , 7 + 168 , 7 @ @ public class SummaryJavadocCheck extends AbstractJavadocCheck { 
 boolean containsInheritDoc = false ; 
 for ( DetailNode child : ast . getChildren ( ) ) { 
 if ( child . getType ( ) = = JavadocTokenTypes . TEXT ) { 
 - if ( ! child . getText ( ) . trim ( ) . isEmpty ( ) ) { 
 + if ( ! CommonUtils . isBlank ( child . getText ( ) ) ) { 
 extraTextFound = true ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 index 016dd56 . . bfd1bbc 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 @ @ - 488 , 7 + 488 , 7 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { 
 final int number = 3 ; 
 if ( lineNo > = number ) { 
 final String prePreviousLine = getLines ( ) [ lineNo - number ] ; 
 - result = prePreviousLine . trim ( ) . isEmpty ( ) ; 
 + result = CommonUtils . isBlank ( prePreviousLine ) ; 
 } 
 return result ; 
 } 
 @ @ - 549 , 7 + 549 , 7 @ @ public class EmptyLineSeparatorCheck extends AbstractCheck { 
 if ( lineNo ! = 1 ) { 
 / / [ lineNo - 2 ] is the number of the previous line as the numbering starts from zero . 
 final String lineBefore = getLines ( ) [ lineNo - 2 ] ; 
 - result = lineBefore . trim ( ) . isEmpty ( ) ; 
 + result = CommonUtils . isBlank ( lineBefore ) ; 
 } 
 return result ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java 
 index 3763322 . . bf285d5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SingleSpaceSeparatorCheck . java 
 @ @ - 229 , 7 + 229 , 7 @ @ public class SingleSpaceSeparatorCheck extends AbstractCheck { 
 * text on the { @ code line } . 
 * / 
 private static boolean isFirstInLine ( String line , int columnNo ) { 
 - return line . substring ( 0 , columnNo + 1 ) . trim ( ) . isEmpty ( ) ; 
 + return CommonUtils . isBlank ( line . substring ( 0 , columnNo + 1 ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java 
 index c87567c . . 72c99c8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / AnnotationUtility . java 
 @ @ - 19 , 7 + 19 , 6 @ @ 
 
 package com . puppycrawl . tools . checkstyle . utils ; 
 
 - import com . google . common . base . CharMatcher ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . FullIdent ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 @ @ - 146 , 7 + 145 , 7 @ @ public final class AnnotationUtility { 
 throw new IllegalArgumentException ( " the annotation is null " ) ; 
 } 
 
 - if ( CharMatcher . WHITESPACE . matchesAllOf ( annotation ) ) { 
 + if ( CommonUtils . isBlank ( annotation ) ) { 
 throw new IllegalArgumentException ( 
 " the annotation is empty or spaces " ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 index 98a208a . . 82ac3d2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CommonUtils . java 
 @ @ - 36 , 7 + 36 , 6 @ @ import java . util . regex . PatternSyntaxException ; 
 
 import org . apache . commons . beanutils . ConversionException ; 
 
 - import com . google . common . base . CharMatcher ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 
 / * * 
 @ @ - 425 , 17 + 424 , 6 @ @ public final class CommonUtils { 
 } 
 
 / * * 
 - * Check if a string is blank . 
 - * A string is considered blank if it is null , empty or contains only whitespace characters , 
 - * as determined by { @ link CharMatcher # WHITESPACE } . 
 - * @ param str the string to check 
 - * @ return true if str is either null , empty or whitespace - only . 
 - * / 
 - public static boolean isBlank ( String str ) { 
 - return str = = null | | CharMatcher . WHITESPACE . matchesAllOf ( str ) ; 
 - } 
 - 
 - / * * 
 * Returns file name without extension . 
 * We do not use the method from Guava library to reduce Checkstyle ' s dependencies 
 * on external libraries . 
 @ @ - 512 , 4 + 500 , 23 @ @ public final class CommonUtils { 
 
 return isName ; 
 } 
 + 
 + / * * 
 + * Checks if the value arg is blank by either being null , 
 + * empty , or contains only whitespace characters . 
 + * @ param value A string to check . 
 + * @ return true if the arg is blank . 
 + * / 
 + public static boolean isBlank ( String value ) { 
 + boolean result = true ; 
 + if ( value ! = null & & ! value . isEmpty ( ) ) { 
 + for ( int i = 0 ; i < value . length ( ) ; i + + ) { 
 + if ( ! Character . isWhitespace ( value . charAt ( i ) ) ) { 
 + result = false ; 
 + break ; 
 + } 
 + } 
 + } 
 + return result ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 index 73b4f01 . . 449ef4f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / utils / CommonUtilsTest . java 
 @ @ - 278 , 6 + 278 , 46 @ @ public class CommonUtilsTest { 
 } 
 
 @ Test 
 + public void testIsBlank ( ) throws Exception { 
 + assertFalse ( CommonUtils . isBlank ( " string " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsBlankAheadWhitespace ( ) throws Exception { 
 + assertFalse ( CommonUtils . isBlank ( " string " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsBlankBehindWhitespace ( ) throws Exception { 
 + assertFalse ( CommonUtils . isBlank ( " string " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsBlankWithWhitespacesAround ( ) throws Exception { 
 + assertFalse ( CommonUtils . isBlank ( " string " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsBlankWhitespaceInside ( ) throws Exception { 
 + assertFalse ( CommonUtils . isBlank ( " str ing " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsBlankNullString ( ) throws Exception { 
 + assertTrue ( CommonUtils . isBlank ( null ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsBlankWithEmptyString ( ) throws Exception { 
 + assertTrue ( CommonUtils . isBlank ( " " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testIsBlankWithWhitespacesOnly ( ) throws Exception { 
 + assertTrue ( CommonUtils . isBlank ( " " ) ) ; 
 + } 
 + 
 + @ Test 
 @ PrepareForTest ( { CommonUtils . class , CommonUtilsTest . class } ) 
 @ SuppressWarnings ( " unchecked " ) 
 public void testLoadSuppressionsUriSyntaxException ( ) throws Exception {

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 62ec752 . . c1fa102 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 230 , 7 + 230 , 7 @ @ 
 < ! - - < includeTests > true < / includeTests > - - > 
 < rulesets > 
 < ruleset > rulesets / java / basic . xml < / ruleset > 
 - < ! - - < ruleset > rulesets / java / braces . xml < / ruleset > - - > 
 + < ruleset > rulesets / java / braces . xml < / ruleset > 
 < ruleset > rulesets / java / clone . xml < / ruleset > 
 < ! - - < ruleset > rulesets / java / codesize . xml < / ruleset > - - > 
 < ! - - < ruleset > rulesets / java / comments . xml < / ruleset > - - > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java 
 index 86c7227 . . d41db3c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / FileDrop . java 
 @ @ - 164 , 8 + 164 , 9 @ @ class FileDrop 
 if ( recursive & & c instanceof Container ) { 
 final Container cont = ( Container ) c ; 
 final Component [ ] comps = cont . getComponents ( ) ; 
 - for ( Component element : comps ) 
 + for ( Component element : comps ) { 
 makeDropTarget ( element , recursive ) ; 
 + } 
 } 
 } 
 
 @ @ - 179 , 8 + 180 , 9 @ @ class FileDrop 
 / / See if any of the flavors are a file list 
 int i = 0 ; 
 while ( ! ok & & i < flavors . length ) { / / Is the flavor a file list ? 
 - if ( flavors [ i ] . equals ( DataFlavor . javaFileListFlavor ) ) 
 + if ( flavors [ i ] . equals ( DataFlavor . javaFileListFlavor ) ) { 
 ok = true ; 
 + } 
 i + + ; 
 } 

