BLEU SCORE: 0.0734705312597788

TEST MSG: Issue # 6320 : added new tests to kill mutations for multiple packages
GENERATED MSG: Issue # 5916 : add missed package to Inputs

TEST DIFF (one line): diff - - git a / . ci / pitest . sh b / . ci / pitest . sh <nl> index 46cf742 . . 6e077fd 100755 <nl> - - - a / . ci / pitest . sh <nl> + + + b / . ci / pitest . sh <nl> @ @ - 72 , 7 + 72 , 6 @ @ pitest - regexp ) <nl> pitest - header ) <nl> mvn - e - P $ 1 clean test org . pitest : pitest - maven : mutationCoverage ; <nl> declare - a ignoredItems = ( <nl> - " AbstractHeaderCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( headerFile = = null ) { < / span > < / pre > < / td > < / tr > " <nl> " HeaderCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( list . length = = 0 ) { < / span > < / pre > < / td > < / tr > " <nl> " RegexpHeaderCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( list . length = = 0 ) { < / span > < / pre > < / td > < / tr > " <nl> " RegexpHeaderCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > isMatch = headerLineNo = = headerSize < / span > < / pre > < / td > < / tr > " <nl> @ @ - 112 , 19 + 111 , 13 @ @ pitest - filters ) <nl> pitest - api ) <nl> mvn - e - P $ 1 clean test org . pitest : pitest - maven : mutationCoverage ; <nl> declare - a ignoredItems = ( <nl> - " DetailAST . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > else if ( parent ! = null ) { < / span > < / pre > < / td > < / tr > " <nl> - " DetailAST . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( ast ! = null & # 38 ; & # 38 ; parent ! = null ) { < / span > < / pre > < / td > < / tr > " <nl> - " DetailAST . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( branchTokenTypes = = null ) { < / span > < / pre > < / td > < / tr > " <nl> - " DetailAST . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( childCount = = NOT _ INITIALIZED ) { < / span > < / pre > < / td > < / tr > " <nl> " DetailAST . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( nextSibling ! = null ) { < / span > < / pre > < / td > < / tr > " <nl> " DetailAST . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( TokenUtil . isCommentType ( node . getType ( ) ) ) { < / span > < / pre > < / td > < / tr > " <nl> " FileContents . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( firstLine . contains ( & # 34 ; / * * & # 34 ; ) & # 38 ; & # 38 ; ! firstLine . contains ( & # 34 ; / * * / & # 34 ; ) ) { < / span > < / pre > < / td > < / tr > " <nl> " FileContents . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( hasIntersection ) { < / span > < / pre > < / td > < / tr > " <nl> - " FileText . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( fileText . lineBreaks = = null ) { < / span > < / pre > < / td > < / tr > " <nl> " FileText . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( lineBreaks = = null ) { < / span > < / pre > < / td > < / tr > " <nl> " FileText . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( lineNo & # 60 ; lineBreakPositions . length ) { < / span > < / pre > < / td > < / tr > " <nl> " LocalizedMessage . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > connection . setUseCaches ( ! reload ) ; < / span > < / pre > < / td > < / tr > " <nl> - " LocalizedMessage . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( columnNo = = other . columnNo ) { < / span > < / pre > < / td > < / tr > " <nl> ) ; <nl> checkPitestReport " $ { ignoredItems [ @ ] } " <nl> ; ; <nl> @ @ - 186 , 7 + 179 , 6 @ @ pitest - common ) <nl> " PackageObjectFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( instance = = null < / span > < / pre > < / td > < / tr > " <nl> " PackageObjectFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( ! name . contains ( PACKAGE _ SEPARATOR ) ) { < / span > < / pre > < / td > < / tr > " <nl> " PackageObjectFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( thirdPartyNameToFullModuleNames = = null ) { < / span > < / pre > < / td > < / tr > " <nl> - " XMLLogger . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( ent . charAt ( 0 ) ! = & # 39 ; & # 38 ; & # 39 ; | | ! CommonUtil . endsWithChar ( ent , & # 39 ; ; & # 39 ; ) ) { < / span > < / pre > < / td > < / tr > " <nl> ) ; <nl> checkPitestReport " $ { ignoredItems [ @ ] } " <nl> ; ; <nl> diff - - git a / pom . xml b / pom . xml <nl> index db297e6 . . 8bc5709 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2053 , 7 + 2053 , 7 @ @ <nl> < param > * . Input * < / param > <nl> < / excludedTestClasses > <nl> < coverageThreshold > 100 < / coverageThreshold > <nl> - < mutationThreshold > 97 < / mutationThreshold > <nl> + < mutationThreshold > 98 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> @ @ - 2098 , 7 + 2098 , 7 @ @ <nl> < param > * . Input * < / param > <nl> < / excludedTestClasses > <nl> < coverageThreshold > 100 < / coverageThreshold > <nl> - < mutationThreshold > 96 < / mutationThreshold > <nl> + < mutationThreshold > 97 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> @ @ - 2878 , 7 + 2878 , 7 @ @ <nl> < param > * . Input * < / param > <nl> < / excludedTestClasses > <nl> < coverageThreshold > 99 < / coverageThreshold > <nl> - < mutationThreshold > 98 < / mutationThreshold > <nl> + < mutationThreshold > 99 < / mutationThreshold > <nl> < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > <nl> < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > <nl> < threads > $ { pitest . plugin . threads } < / threads > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> index d22c32b . . 30cb380 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> @ @ - 108 , 6 + 108 , 7 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { <nl> " & # X0 ; " , <nl> " & # x ; " , <nl> " & # xg ; " , <nl> + " ramp ; " , <nl> " ref " , <nl> } ; <nl> for ( String noReference : noReferences ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> index 5ab0e6d . . 63f60f7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java <nl> @ @ - 116 , 6 + 116 , 17 @ @ public class DetailASTTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testAddPreviousSiblingNullParent ( ) { <nl> + final DetailAST child = new DetailAST ( ) ; <nl> + final DetailAST newSibling = new DetailAST ( ) ; <nl> + <nl> + child . addPreviousSibling ( newSibling ) ; <nl> + <nl> + assertEquals ( " Invalid child token " , child , newSibling . getNextSibling ( ) ) ; <nl> + assertEquals ( " Invalid child token " , newSibling , child . getPreviousSibling ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testInsertSiblingBetween ( ) throws Exception { <nl> final DetailAST root = new DetailAST ( ) ; <nl> final DetailAST firstLevelA = new DetailAST ( ) ; <nl> @ @ - 194 , 6 + 205 , 16 @ @ public class DetailASTTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testCacheBranchTokenTypes ( ) { <nl> + final DetailAST root = new DetailAST ( ) ; <nl> + final BitSet bitSet = new BitSet ( ) ; <nl> + bitSet . set ( 999 ) ; <nl> + <nl> + Whitebox . setInternalState ( root , " branchTokenTypes " , bitSet ) ; <nl> + assertTrue ( " Branch tokens has changed " , root . branchContains ( 999 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testClearChildCountCache ( ) { <nl> final DetailAST parent = new DetailAST ( ) ; <nl> final DetailAST child = new DetailAST ( ) ; <nl> @ @ - 223 , 6 + 244 , 14 @ @ public class DetailASTTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testCacheGetChildCount ( ) { <nl> + final DetailAST root = new DetailAST ( ) ; <nl> + <nl> + Whitebox . setInternalState ( root , " childCount " , 999 ) ; <nl> + assertEquals ( " Child count has changed " , 999 , root . getChildCount ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testAddNextSibling ( ) { <nl> final DetailAST parent = new DetailAST ( ) ; <nl> final DetailAST child = new DetailAST ( ) ; <nl> @ @ - 238 , 6 + 267 , 19 @ @ public class DetailASTTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testAddNextSiblingNullParent ( ) { <nl> + final DetailAST child = new DetailAST ( ) ; <nl> + final DetailAST newSibling = new DetailAST ( ) ; <nl> + final DetailAST oldParent = new DetailAST ( ) ; <nl> + oldParent . addChild ( newSibling ) ; <nl> + child . addNextSibling ( newSibling ) ; <nl> + <nl> + assertEquals ( " Invalid parent " , oldParent , newSibling . getParent ( ) ) ; <nl> + assertNull ( " Invalid next sibling " , newSibling . getNextSibling ( ) ) ; <nl> + assertEquals ( " Invalid child " , newSibling , child . getNextSibling ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testManyComments ( ) throws Exception { <nl> final File file = temporaryFolder . newFile ( " InputDetailASTManyComments . java " ) ; <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> index fb4ab16 . . 48c7d2b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> @ @ - 20 , 6 + 20 , 8 @ @ <nl> package com . puppycrawl . tools . checkstyle . api ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import java . io . File ; <nl> @ @ - 28 , 6 + 30 , 7 @ @ import java . nio . charset . StandardCharsets ; <nl> import java . util . Locale ; <nl> <nl> import org . junit . Test ; <nl> + import org . powermock . reflect . Whitebox ; <nl> <nl> import com . puppycrawl . tools . checkstyle . AbstractPathTestSupport ; <nl> <nl> @ @ - 67 , 6 + 70 , 7 @ @ public class FileTextTest extends AbstractPathTestSupport { <nl> charsetName ) ; <nl> final LineColumn lineColumn = fileText . lineColumn ( 100 ) ; <nl> final FileText copy = new FileText ( fileText ) ; <nl> + assertNotNull ( " LineBreaks not copied " , Whitebox . getInternalState ( copy , " lineBreaks " ) ) ; <nl> assertEquals ( " Invalid linecolumn " , lineColumn , copy . lineColumn ( 100 ) ) ; <nl> } <nl> <nl> @ @ - 76 , 6 + 80 , 7 @ @ public class FileTextTest extends AbstractPathTestSupport { <nl> final FileText fileText = new FileText ( new File ( getPath ( " InputFileTextImportControl . xml " ) ) , <nl> charsetName ) ; <nl> final FileText copy = new FileText ( fileText ) ; <nl> + assertNull ( " LineBreaks not null " , Whitebox . getInternalState ( copy , " lineBreaks " ) ) ; <nl> final LineColumn lineColumn = copy . lineColumn ( 100 ) ; <nl> assertEquals ( " Invalid line " , 3 , lineColumn . getLine ( ) ) ; <nl> if ( System . getProperty ( " os . name " ) . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java <nl> index d7ca20c . . 632e824 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java <nl> @ @ - 222 , 6 + 222 , 17 @ @ public class LocalizedMessageTest { <nl> assertTrue ( " Invalid comparing result " , message1 . compareTo ( message2 ) < 0 ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testCompareToWithDifferentColumns ( ) { <nl> + final LocalizedMessage message1 = createSampleLocalizedMessageWithColumn ( 1 ) ; <nl> + final LocalizedMessage message1a = createSampleLocalizedMessageWithColumn ( 1 ) ; <nl> + final LocalizedMessage message2 = createSampleLocalizedMessageWithColumn ( 2 ) ; <nl> + <nl> + assertTrue ( " Invalid comparing result " , message1 . compareTo ( message2 ) < 0 ) ; <nl> + assertTrue ( " Invalid comparing result " , message2 . compareTo ( message1 ) > 0 ) ; <nl> + assertEquals ( " Invalid comparing result " , 0 , message1 . compareTo ( message1a ) ) ; <nl> + } <nl> + <nl> private static LocalizedMessage createSampleLocalizedMessage ( ) { <nl> return createSampleLocalizedMessageWithId ( " module " ) ; <nl> } <nl> @ @ - 231 , 6 + 242 , 12 @ @ public class LocalizedMessageTest { <nl> " empty . statement " , EMPTY _ OBJECT _ ARRAY , id , LocalizedMessage . class , null ) ; <nl> } <nl> <nl> + private static LocalizedMessage createSampleLocalizedMessageWithColumn ( int column ) { <nl> + return new LocalizedMessage ( 1 , column , <nl> + " com . puppycrawl . tools . checkstyle . checks . coding . messages " , " empty . statement " , <nl> + EMPTY _ OBJECT _ ARRAY , " module " , LocalizedMessage . class , null ) ; <nl> + } <nl> + <nl> @ After <nl> public void tearDown ( ) { <nl> Locale . setDefault ( DEFAULT _ LOCALE ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> index 4c4bd7f . . b2b2b62 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java <nl> @ @ - 185 , 11 + 185 , 21 @ @ public class DeclarationOrderCheckTest <nl> " 17 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 23 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> " 41 : 5 : " + getCheckMessage ( MSG _ STATIC ) , <nl> + " 61 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputDeclarationOrderForwardReference . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> + public void testVariableAccess ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( DeclarationOrderCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 15 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputDeclarationOrderVariableAccess . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testAvoidDuplicatesForStaticFinalFields ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( DeclarationOrderCheck . class ) ; <nl> final String [ ] expected = { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java <nl> index 294e121 . . 04e12bd 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java <nl> @ @ - 96 , 6 + 96 , 7 @ @ public class EqualsAvoidNullCheckTest extends AbstractModuleTestSupport { <nl> " 415 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> " 416 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> " 417 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> + " 421 : 22 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputEqualsAvoidNull . java " ) , expected ) ; <nl> } <nl> @ @ - 149 , 6 + 150 , 7 @ @ public class EqualsAvoidNullCheckTest extends AbstractModuleTestSupport { <nl> " 415 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> " 416 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> " 417 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> + " 421 : 22 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputEqualsAvoidNull . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java <nl> index 2dce634 . . b4cebd5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java <nl> @ @ - 115 , 6 + 115 , 7 @ @ public class EqualsHashCodeCheckTest <nl> " 68 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , <nl> " 75 : 9 : " + getCheckMessage ( MSG _ KEY _ EQUALS ) , <nl> " 82 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , <nl> + " 97 : 9 : " + getCheckMessage ( MSG _ KEY _ EQUALS ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputEqualsHashCodeEqualsParameter . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheckTest . java <nl> index e776ecc . . 7365e4d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheckTest . java <nl> @ @ - 58 , 6 + 58 , 8 @ @ public class ExplicitInitializationCheckTest extends AbstractModuleTestSupport { <nl> " 52 : 17 : " + getCheckMessage ( MSG _ KEY , " x " , 0 ) , <nl> " 53 : 25 : " + getCheckMessage ( MSG _ KEY , " bar " , " null " ) , <nl> " 54 : 27 : " + getCheckMessage ( MSG _ KEY , " barArray " , " null " ) , <nl> + " 89 : 19 : " + getCheckMessage ( MSG _ KEY , " shortVariable " , " 0 " ) , <nl> + " 90 : 18 : " + getCheckMessage ( MSG _ KEY , " bite " , " 0 " ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputExplicitInitialization . java " ) , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> index 51b7ce0 . . 41ddef0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java <nl> @ @ - 81 , 6 + 81 , 7 @ @ public class FinalLocalVariableCheckTest <nl> " 386 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , <nl> " 418 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , <nl> " 421 : 21 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , <nl> + " 441 : 33 : " + getCheckMessage ( MSG _ KEY , " table " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputFinalLocalVariable . java " ) , expected ) ; <nl> } <nl> @ @ - 128 , 6 + 129 , 10 @ @ public class FinalLocalVariableCheckTest <nl> final String [ ] expected = { <nl> " 8 : 20 : " + getCheckMessage ( MSG _ KEY , " a " ) , <nl> " 15 : 13 : " + getCheckMessage ( MSG _ KEY , " x " ) , <nl> + " 21 : 66 : " + getCheckMessage ( MSG _ KEY , " snippets " ) , <nl> + " 22 : 32 : " + getCheckMessage ( MSG _ KEY , " filteredSnippets " ) , <nl> + " 23 : 21 : " + getCheckMessage ( MSG _ KEY , " snippet " ) , <nl> + " 27 : 20 : " + getCheckMessage ( MSG _ KEY , " snippet " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputFinalLocalVariableEnhancedForLoopVariable . java " ) , <nl> expected ) ; <nl> @ @ - 140 , 6 + 145 , 8 @ @ public class FinalLocalVariableCheckTest <nl> checkConfig . addAttribute ( " tokens " , " VARIABLE _ DEF , PARAMETER _ DEF " ) ; <nl> final String [ ] expected = { <nl> " 15 : 13 : " + getCheckMessage ( MSG _ KEY , " x " ) , <nl> + " 21 : 66 : " + getCheckMessage ( MSG _ KEY , " snippets " ) , <nl> + " 22 : 32 : " + getCheckMessage ( MSG _ KEY , " filteredSnippets " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputFinalLocalVariableEnhancedForLoopVariable . java " ) , <nl> expected ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java <nl> index e5328a4 . . 846a400 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java <nl> @ @ - 138 , 6 + 138 , 18 @ @ public class PackageDeclarationCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testNoPackage ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( PackageDeclarationCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 2 : " + getCheckMessage ( MSG _ KEY _ MISSING ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , <nl> + getNonCompilablePath ( " InputPackageDeclarationNoPackage . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testTokensNotNull ( ) { <nl> final PackageDeclarationCheck check = new PackageDeclarationCheck ( ) ; <nl> Assert . assertNotNull ( " Acceptable tokens should not be null " , check . getAcceptableTokens ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java <nl> index 5caadf1 . . 212e93b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java <nl> @ @ - 81 , 6 + 81 , 7 @ @ public class VariableDeclarationUsageDistanceCheckTest extends <nl> " 978 : " + getCheckMessage ( MSG _ KEY , " a " , 2 , 1 ) , <nl> " 989 : " + getCheckMessage ( MSG _ KEY , " a " , 3 , 1 ) , <nl> " 1024 : " + getCheckMessage ( MSG _ KEY , " c " , 3 , 1 ) , <nl> + " 1054 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 1 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputVariableDeclarationUsageDistance . java " ) , expected ) ; <nl> } <nl> @ @ - 102 , 6 + 103 , 7 @ @ public class VariableDeclarationUsageDistanceCheckTest extends <nl> " 891 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 3 ) , <nl> " 901 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 3 ) , <nl> " 967 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 3 ) , <nl> + " 1054 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 3 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputVariableDeclarationUsageDistance . java " ) , expected ) ; <nl> } <nl> @ @ - 177 , 6 + 179 , 7 @ @ public class VariableDeclarationUsageDistanceCheckTest extends <nl> " 542 : " + getCheckMessage ( MSG _ KEY , " parentId " , 4 , 1 ) , <nl> " 978 : " + getCheckMessage ( MSG _ KEY , " a " , 2 , 1 ) , <nl> " 1024 : " + getCheckMessage ( MSG _ KEY , " c " , 4 , 1 ) , <nl> + " 1054 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 1 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputVariableDeclarationUsageDistance . java " ) , expected ) ; <nl> } <nl> @ @ - 223 , 6 + 226 , 7 @ @ public class VariableDeclarationUsageDistanceCheckTest extends <nl> " 967 : " + getCheckMessage ( MSG _ KEY _ EXT , " a " , 4 , 1 ) , <nl> " 989 : " + getCheckMessage ( MSG _ KEY _ EXT , " a " , 3 , 1 ) , <nl> " 1024 : " + getCheckMessage ( MSG _ KEY _ EXT , " c " , 3 , 1 ) , <nl> + " 1054 : " + getCheckMessage ( MSG _ KEY _ EXT , " a " , 4 , 1 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputVariableDeclarationUsageDistance . java " ) , expected ) ; <nl> } <nl> @ @ - 247 , 6 + 251 , 7 @ @ public class VariableDeclarationUsageDistanceCheckTest extends <nl> " 491 : " + getCheckMessage ( MSG _ KEY _ EXT , " myOption " , 6 , 3 ) , <nl> " 542 : " + getCheckMessage ( MSG _ KEY _ EXT , " parentId " , 4 , 3 ) , <nl> " 1024 : " + getCheckMessage ( MSG _ KEY _ EXT , " c " , 4 , 3 ) , <nl> + " 1054 : " + getCheckMessage ( MSG _ KEY _ EXT , " a " , 4 , 3 ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " InputVariableDeclarationUsageDistance . java " ) , expected ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> index 0e6b431 . . ebd6d5c 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> @ @ - 30 , 6 + 30 , 8 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> + import java . net . URI ; <nl> + import java . util . Set ; <nl> <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> @ @ - 308 , 4 + 310 , 14 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { <nl> checkConfig . addAttribute ( " headerFile " , getPath ( " InputHeaderjava . blank - lines2 . header " ) ) ; <nl> verify ( checkConfig , getPath ( " InputHeaderBlankLines2 . java " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testExternalResource ( ) throws Exception { <nl> + final HeaderCheck check = new HeaderCheck ( ) ; <nl> + final URI uri = CommonUtil . getUriByFilename ( getPath ( " InputHeaderjava . header " ) ) ; <nl> + check . setHeaderFile ( uri ) ; <nl> + final Set < String > results = check . getExternalResourceLocations ( ) ; <nl> + assertEquals ( " Invalid result size " , 1 , results . size ( ) ) ; <nl> + assertEquals ( " Invalid resource location " , uri . toString ( ) , results . iterator ( ) . next ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java <nl> index e8f598d . . 3c39ccf 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java <nl> @ @ - 174 , 6 + 174 , 20 @ @ public class RegexpCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testMessagePropertyBad2 ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( RegexpCheck . class ) ; <nl> + checkConfig . addAttribute ( " format " , " System \ \ . ( out ) | ( err ) \ \ . print ( ln ) ? \ \ ( " ) ; <nl> + checkConfig . addAttribute ( " illegalPattern " , " true " ) ; <nl> + checkConfig . addAttribute ( " message " , " " ) ; <nl> + final String [ ] expected = { <nl> + " 69 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , " System \ \ . ( out ) | ( err ) \ \ . print ( ln ) ? \ \ ( " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testIgnoreCaseTrue ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createModuleConfig ( RegexpCheck . class ) ; <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java <nl> new file mode 100644 <nl> index 0000000 . . 73da455 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java <nl> @ @ - 0 , 0 + 1 , 3 @ @ <nl> + / / comment <nl> + class InputPackageDeclarationNoPackage { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java <nl> index 36e796f . . 988ea2b 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java <nl> @ @ - 45 , 3 + 45 , 18 @ @ public class InputDeclarationOrderForwardReference { <nl> int i = 5 ; <nl> } <nl> } <nl> + class InputDeclarationOrderFieldAnonymousClass { <nl> + <nl> + private static final String [ ] REQUIRED _ WORKDS = new String [ ] { " copyright " } ; <nl> + <nl> + enum RequiredHeaderPlacement { <nl> + TEMP ; <nl> + <nl> + public static String [ ] labels ( ) { <nl> + String [ ] labels = new String [ values ( ) . length ] ; <nl> + return labels ; <nl> + } <nl> + } <nl> + <nl> + public static final String [ ] HEADER _ PLACEMENT _ DESCRIPTOR = RequiredHeaderPlacement . labels ( ) ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderVariableAccess . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderVariableAccess . java <nl> new file mode 100644 <nl> index 0000000 . . 79544aa <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderVariableAccess . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . declarationorder ; <nl> + <nl> + import java . io . InputStream ; <nl> + import java . io . IOException ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + <nl> + public class InputDeclarationOrderVariableAccess { <nl> + <nl> + public static final String TYPE = new String ( " significant _ terms " ) ; <nl> + <nl> + private static final Map < String , String > BUCKETS _ MAP = Collections . emptyMap ( ) ; <nl> + <nl> + public static final InputDeclarationOrderVariableAccess . Stream STREAM = <nl> + new InputDeclarationOrderVariableAccess . Stream ( ) { <nl> + @ Override <nl> + public InputDeclarationOrderVariableAccess readResult ( InputStream in ) throws IOException { <nl> + InputDeclarationOrderVariableAccess buckets = new InputDeclarationOrderVariableAccess ( ) ; <nl> + buckets . readFrom ( in ) ; <nl> + return buckets ; <nl> + } <nl> + } ; <nl> + <nl> + InputDeclarationOrderVariableAccess ( ) { } <nl> + <nl> + public void readFrom ( InputStream in ) throws IOException { <nl> + } <nl> + <nl> + static class Stream { <nl> + public InputDeclarationOrderVariableAccess readResult ( InputStream in ) throws IOException { <nl> + return null ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalsavoidnull / InputEqualsAvoidNull . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalsavoidnull / InputEqualsAvoidNull . java <nl> index 83e3c79 . . 86d3637 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalsavoidnull / InputEqualsAvoidNull . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalsavoidnull / InputEqualsAvoidNull . java <nl> @ @ - 416 , 6 + 416 , 10 @ @ class TestConcatenations { <nl> s . equals ( " a " + " b " ) ; <nl> s . equals ( getInt ( ) + s ) ; <nl> s . equals ( getInt ( ) + getInt ( ) ) ; <nl> + s . endsWith ( " a " ) ; <nl> + String s = " " ; <nl> + if ( ! s . equals ( " Hello [ EOL ] " + System . getProperty ( " line . separator " ) ) ) <nl> + foo ( ) ; <nl> } <nl> <nl> int getInt ( ) { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalshashcode / InputEqualsHashCodeEqualsParameter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalshashcode / InputEqualsHashCodeEqualsParameter . java <nl> index b03796f . . a163097 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalshashcode / InputEqualsHashCodeEqualsParameter . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalshashcode / InputEqualsHashCodeEqualsParameter . java <nl> @ @ - 93 , 4 + 93 , 12 @ @ public class InputEqualsHashCodeEqualsParameter { <nl> public interface TestClass16 { / / no violation <nl> public int hashCode ( ) ; <nl> } <nl> + public class TestClass17 { <nl> + public int hashCode ( ) { <nl> + return 1 ; <nl> + } <nl> + public int hashCode ( int val ) { <nl> + return 1 ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java <nl> index 8212b94 . . c8ca84c 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java <nl> @ @ - 53 , 6 + 53 , 7 @ @ enum InputExplicitInit3 { <nl> private Bar < String > bar = null ; <nl> private Bar < String > [ ] barArray = null ; <nl> private int y = 1 ; <nl> + private Boolean booleanAtt = false ; <nl> } <nl> <nl> @ interface annotation1 { <nl> @ @ - 85 , 4 + 86 , 6 @ @ class Chars { <nl> class Doubles { <nl> final double subZero = - 0 . 0 ; <nl> final double nan = Double . NaN ; <nl> + private short shortVariable = 0 ; <nl> + private byte bite = 0 ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariable . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariable . java <nl> index 8b89ff0 . . 2230bac 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariable . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariable . java <nl> @ @ - 431 , 5 + 431 , 20 @ @ class class5 { <nl> } <nl> } <nl> } <nl> + <nl> + abstract class Bar2 { <nl> + abstract void method ( String param ) ; <nl> + } <nl> + } <nl> + <nl> + public void test5 ( ) { <nl> + InputFinalLocalVariable table = new InputFinalLocalVariable ( ) ; <nl> + new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + InputFinalLocalVariable table = null ; <nl> + table = new InputFinalLocalVariable ( ) ; <nl> + } <nl> + } ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java <nl> index 29e7af4 . . 3731044 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java <nl> @ @ - 17 , 5 + 17 , 17 @ @ public class InputFinalLocalVariableEnhancedForLoopVariable { <nl> } <nl> <nl> } <nl> - <nl> + <nl> + public java . util . List < String > method3 ( java . util . List < String > snippets ) { <nl> + java . util . List < String > filteredSnippets = new java . util . ArrayList < > ( ) ; <nl> + for ( String snippet : snippets ) { <nl> + filteredSnippets . add ( snippet ) ; <nl> + } <nl> + if ( filteredSnippets . size ( ) = = 0 ) { <nl> + String snippet = snippets . get ( 0 ) ; <nl> + snippet = new String ( snippet ) ; <nl> + filteredSnippets . add ( snippet ) ; <nl> + } <nl> + return filteredSnippets ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenField . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenField . java <nl> index 5add195 . . 770dc06 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenField . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenField . java <nl> @ @ - 291 , 4 + 291 , 16 @ @ class OneLetterField <nl> { <nl> this . i = i ; <nl> } <nl> + enum Inner { } <nl> + } <nl> + class DuplicateFieldFromPreviousClass <nl> + { <nl> + public void method ( ) { <nl> + int i = 0 ; <nl> + } <nl> + } <nl> + class NestedEnum { <nl> + enum Test { A , B , C ; int i ; } <nl> + <nl> + void method ( int i ) { } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldLambdas . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldLambdas . java <nl> index 33710d3 . . 63526a0 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldLambdas . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldLambdas . java <nl> @ @ - 227 , 4 + 227 , 9 @ @ public class InputHiddenFieldLambdas { <nl> FunctionWithOneParameter otherObjectToString = someObject - > { / / 1 violation <nl> return someObject . toString ( ) ; <nl> } ; <nl> + <nl> + private final String l = " " ; <nl> + private interface NestedInterface { <nl> + void print ( String l ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java <nl> index 9d59859 . . a215152 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java <nl> @ @ - 80 , 6 + 80 , 13 @ @ class InputModifiedControlVariableBothForLoops <nl> for ( int i = 0 ; i < 10 ; i + = 1 ) { <nl> for ( i = 7 ; i < 10 ; i + = 1 ) { } <nl> } <nl> + for ( String name : new String [ ] { } ) { <nl> + } <nl> + <nl> + for ( i = 0 ; i < 10 ; i + + ) { <nl> + String name ; <nl> + name = " " ; <nl> + } <nl> } <nl> private int i ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java <nl> index d178fbf . . c1bba74 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java <nl> @ @ - 33 , 5 + 33 , 6 @ @ public class InputMultipleVariableDeclarations <nl> <nl> void method3 ( ) { <nl> java . lang . Object obj ; Object obj1 ; Object obj2 ; Object obj3 ; <nl> + for ( String s : new String [ ] { } ) { } <nl> } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java <nl> index 526e849 . . ffda0ca 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java <nl> @ @ - 173 , 4 + 173 , 5 @ @ class NestedFrames { <nl> } <nl> return b + b * b ; <nl> } <nl> + final NestedFrames NestedFrames = new NestedFrames ( ) ; <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java <nl> index cdff75f . . 853340b 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java <nl> @ @ - 1048 , 4 + 1048 , 15 @ @ class New { <nl> result = true ; <nl> } <nl> <nl> + static int field ; <nl> + <nl> + private void n ( ) { <nl> + long a = 0 ; <nl> + <nl> + New . field = 1 ; <nl> + New . field = 2 ; <nl> + New . field = 3 ; <nl> + New . field = ( int ) a ; <nl> + } <nl> + <nl> }
NEAREST DIFF (one line): diff - - git a / README . md b / README . md <nl> index 27a8aa3 . . 7be7f9c 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 1 , 14 + 1 , 14 @ @ <nl> [ ! [ ] [ travis img ] ] [ travis ] <nl> [ ! [ ] [ appveyor img ] ] [ appveyor ] <nl> [ ! [ ] [ teamcity img ] ] [ teamcity ] <nl> - [ ! [ ] [ codeship img ] ] [ codeship ] <nl> [ ! [ ] [ circleci img ] ] [ circleci ] <nl> [ ! [ ] [ wercker img ] ] [ wercker ] <nl> [ ! [ ] [ shippable img ] ] [ shippable ] <nl> - [ ! [ ] [ buddy img ] ] [ buddy ] <nl> [ ! [ ] [ coverage img ] ] [ coverage ] <nl> [ ! [ ] [ snyk img ] ] [ snyk ] <nl> <nl> + [ ! [ ] [ codeship img ] ] [ codeship ] <nl> + [ ! [ ] [ buddy img ] ] [ buddy ] <nl> <nl> [ ! [ ] [ mavenbadge img ] ] [ mavenbadge ] <nl> [ ! [ ] [ sonar img ] ] [ sonar ]

TEST DIFF:
diff - - git a / . ci / pitest . sh b / . ci / pitest . sh 
 index 46cf742 . . 6e077fd 100755 
 - - - a / . ci / pitest . sh 
 + + + b / . ci / pitest . sh 
 @ @ - 72 , 7 + 72 , 6 @ @ pitest - regexp ) 
 pitest - header ) 
 mvn - e - P $ 1 clean test org . pitest : pitest - maven : mutationCoverage ; 
 declare - a ignoredItems = ( 
 - " AbstractHeaderCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( headerFile = = null ) { < / span > < / pre > < / td > < / tr > " 
 " HeaderCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( list . length = = 0 ) { < / span > < / pre > < / td > < / tr > " 
 " RegexpHeaderCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( list . length = = 0 ) { < / span > < / pre > < / td > < / tr > " 
 " RegexpHeaderCheck . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > isMatch = headerLineNo = = headerSize < / span > < / pre > < / td > < / tr > " 
 @ @ - 112 , 19 + 111 , 13 @ @ pitest - filters ) 
 pitest - api ) 
 mvn - e - P $ 1 clean test org . pitest : pitest - maven : mutationCoverage ; 
 declare - a ignoredItems = ( 
 - " DetailAST . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > else if ( parent ! = null ) { < / span > < / pre > < / td > < / tr > " 
 - " DetailAST . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( ast ! = null & # 38 ; & # 38 ; parent ! = null ) { < / span > < / pre > < / td > < / tr > " 
 - " DetailAST . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( branchTokenTypes = = null ) { < / span > < / pre > < / td > < / tr > " 
 - " DetailAST . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( childCount = = NOT _ INITIALIZED ) { < / span > < / pre > < / td > < / tr > " 
 " DetailAST . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( nextSibling ! = null ) { < / span > < / pre > < / td > < / tr > " 
 " DetailAST . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( TokenUtil . isCommentType ( node . getType ( ) ) ) { < / span > < / pre > < / td > < / tr > " 
 " FileContents . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( firstLine . contains ( & # 34 ; / * * & # 34 ; ) & # 38 ; & # 38 ; ! firstLine . contains ( & # 34 ; / * * / & # 34 ; ) ) { < / span > < / pre > < / td > < / tr > " 
 " FileContents . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( hasIntersection ) { < / span > < / pre > < / td > < / tr > " 
 - " FileText . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( fileText . lineBreaks = = null ) { < / span > < / pre > < / td > < / tr > " 
 " FileText . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( lineBreaks = = null ) { < / span > < / pre > < / td > < / tr > " 
 " FileText . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( lineNo & # 60 ; lineBreakPositions . length ) { < / span > < / pre > < / td > < / tr > " 
 " LocalizedMessage . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > connection . setUseCaches ( ! reload ) ; < / span > < / pre > < / td > < / tr > " 
 - " LocalizedMessage . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( columnNo = = other . columnNo ) { < / span > < / pre > < / td > < / tr > " 
 ) ; 
 checkPitestReport " $ { ignoredItems [ @ ] } " 
 ; ; 
 @ @ - 186 , 7 + 179 , 6 @ @ pitest - common ) 
 " PackageObjectFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( instance = = null < / span > < / pre > < / td > < / tr > " 
 " PackageObjectFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( ! name . contains ( PACKAGE _ SEPARATOR ) ) { < / span > < / pre > < / td > < / tr > " 
 " PackageObjectFactory . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( thirdPartyNameToFullModuleNames = = null ) { < / span > < / pre > < / td > < / tr > " 
 - " XMLLogger . java . html : < td class = ' covered ' > < pre > < span class = ' survived ' > if ( ent . charAt ( 0 ) ! = & # 39 ; & # 38 ; & # 39 ; | | ! CommonUtil . endsWithChar ( ent , & # 39 ; ; & # 39 ; ) ) { < / span > < / pre > < / td > < / tr > " 
 ) ; 
 checkPitestReport " $ { ignoredItems [ @ ] } " 
 ; ; 
 diff - - git a / pom . xml b / pom . xml 
 index db297e6 . . 8bc5709 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2053 , 7 + 2053 , 7 @ @ 
 < param > * . Input * < / param > 
 < / excludedTestClasses > 
 < coverageThreshold > 100 < / coverageThreshold > 
 - < mutationThreshold > 97 < / mutationThreshold > 
 + < mutationThreshold > 98 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 @ @ - 2098 , 7 + 2098 , 7 @ @ 
 < param > * . Input * < / param > 
 < / excludedTestClasses > 
 < coverageThreshold > 100 < / coverageThreshold > 
 - < mutationThreshold > 96 < / mutationThreshold > 
 + < mutationThreshold > 97 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 @ @ - 2878 , 7 + 2878 , 7 @ @ 
 < param > * . Input * < / param > 
 < / excludedTestClasses > 
 < coverageThreshold > 99 < / coverageThreshold > 
 - < mutationThreshold > 98 < / mutationThreshold > 
 + < mutationThreshold > 99 < / mutationThreshold > 
 < timeoutFactor > $ { pitest . plugin . timeout . factor } < / timeoutFactor > 
 < timeoutConstant > $ { pitest . plugin . timeout . constant } < / timeoutConstant > 
 < threads > $ { pitest . plugin . threads } < / threads > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 index d22c32b . . 30cb380 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 @ @ - 108 , 6 + 108 , 7 @ @ public class XMLLoggerTest extends AbstractXmlTestSupport { 
 " & # X0 ; " , 
 " & # x ; " , 
 " & # xg ; " , 
 + " ramp ; " , 
 " ref " , 
 } ; 
 for ( String noReference : noReferences ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 index 5ab0e6d . . 63f60f7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / DetailASTTest . java 
 @ @ - 116 , 6 + 116 , 17 @ @ public class DetailASTTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testAddPreviousSiblingNullParent ( ) { 
 + final DetailAST child = new DetailAST ( ) ; 
 + final DetailAST newSibling = new DetailAST ( ) ; 
 + 
 + child . addPreviousSibling ( newSibling ) ; 
 + 
 + assertEquals ( " Invalid child token " , child , newSibling . getNextSibling ( ) ) ; 
 + assertEquals ( " Invalid child token " , newSibling , child . getPreviousSibling ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testInsertSiblingBetween ( ) throws Exception { 
 final DetailAST root = new DetailAST ( ) ; 
 final DetailAST firstLevelA = new DetailAST ( ) ; 
 @ @ - 194 , 6 + 205 , 16 @ @ public class DetailASTTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testCacheBranchTokenTypes ( ) { 
 + final DetailAST root = new DetailAST ( ) ; 
 + final BitSet bitSet = new BitSet ( ) ; 
 + bitSet . set ( 999 ) ; 
 + 
 + Whitebox . setInternalState ( root , " branchTokenTypes " , bitSet ) ; 
 + assertTrue ( " Branch tokens has changed " , root . branchContains ( 999 ) ) ; 
 + } 
 + 
 + @ Test 
 public void testClearChildCountCache ( ) { 
 final DetailAST parent = new DetailAST ( ) ; 
 final DetailAST child = new DetailAST ( ) ; 
 @ @ - 223 , 6 + 244 , 14 @ @ public class DetailASTTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testCacheGetChildCount ( ) { 
 + final DetailAST root = new DetailAST ( ) ; 
 + 
 + Whitebox . setInternalState ( root , " childCount " , 999 ) ; 
 + assertEquals ( " Child count has changed " , 999 , root . getChildCount ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testAddNextSibling ( ) { 
 final DetailAST parent = new DetailAST ( ) ; 
 final DetailAST child = new DetailAST ( ) ; 
 @ @ - 238 , 6 + 267 , 19 @ @ public class DetailASTTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testAddNextSiblingNullParent ( ) { 
 + final DetailAST child = new DetailAST ( ) ; 
 + final DetailAST newSibling = new DetailAST ( ) ; 
 + final DetailAST oldParent = new DetailAST ( ) ; 
 + oldParent . addChild ( newSibling ) ; 
 + child . addNextSibling ( newSibling ) ; 
 + 
 + assertEquals ( " Invalid parent " , oldParent , newSibling . getParent ( ) ) ; 
 + assertNull ( " Invalid next sibling " , newSibling . getNextSibling ( ) ) ; 
 + assertEquals ( " Invalid child " , newSibling , child . getNextSibling ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testManyComments ( ) throws Exception { 
 final File file = temporaryFolder . newFile ( " InputDetailASTManyComments . java " ) ; 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 index fb4ab16 . . 48c7d2b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 @ @ - 20 , 6 + 20 , 8 @ @ 
 package com . puppycrawl . tools . checkstyle . api ; 
 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . fail ; 
 
 import java . io . File ; 
 @ @ - 28 , 6 + 30 , 7 @ @ import java . nio . charset . StandardCharsets ; 
 import java . util . Locale ; 
 
 import org . junit . Test ; 
 + import org . powermock . reflect . Whitebox ; 
 
 import com . puppycrawl . tools . checkstyle . AbstractPathTestSupport ; 
 
 @ @ - 67 , 6 + 70 , 7 @ @ public class FileTextTest extends AbstractPathTestSupport { 
 charsetName ) ; 
 final LineColumn lineColumn = fileText . lineColumn ( 100 ) ; 
 final FileText copy = new FileText ( fileText ) ; 
 + assertNotNull ( " LineBreaks not copied " , Whitebox . getInternalState ( copy , " lineBreaks " ) ) ; 
 assertEquals ( " Invalid linecolumn " , lineColumn , copy . lineColumn ( 100 ) ) ; 
 } 
 
 @ @ - 76 , 6 + 80 , 7 @ @ public class FileTextTest extends AbstractPathTestSupport { 
 final FileText fileText = new FileText ( new File ( getPath ( " InputFileTextImportControl . xml " ) ) , 
 charsetName ) ; 
 final FileText copy = new FileText ( fileText ) ; 
 + assertNull ( " LineBreaks not null " , Whitebox . getInternalState ( copy , " lineBreaks " ) ) ; 
 final LineColumn lineColumn = copy . lineColumn ( 100 ) ; 
 assertEquals ( " Invalid line " , 3 , lineColumn . getLine ( ) ) ; 
 if ( System . getProperty ( " os . name " ) . toLowerCase ( Locale . ENGLISH ) . startsWith ( " windows " ) ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java 
 index d7ca20c . . 632e824 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / LocalizedMessageTest . java 
 @ @ - 222 , 6 + 222 , 17 @ @ public class LocalizedMessageTest { 
 assertTrue ( " Invalid comparing result " , message1 . compareTo ( message2 ) < 0 ) ; 
 } 
 
 + @ Test 
 + public void testCompareToWithDifferentColumns ( ) { 
 + final LocalizedMessage message1 = createSampleLocalizedMessageWithColumn ( 1 ) ; 
 + final LocalizedMessage message1a = createSampleLocalizedMessageWithColumn ( 1 ) ; 
 + final LocalizedMessage message2 = createSampleLocalizedMessageWithColumn ( 2 ) ; 
 + 
 + assertTrue ( " Invalid comparing result " , message1 . compareTo ( message2 ) < 0 ) ; 
 + assertTrue ( " Invalid comparing result " , message2 . compareTo ( message1 ) > 0 ) ; 
 + assertEquals ( " Invalid comparing result " , 0 , message1 . compareTo ( message1a ) ) ; 
 + } 
 + 
 private static LocalizedMessage createSampleLocalizedMessage ( ) { 
 return createSampleLocalizedMessageWithId ( " module " ) ; 
 } 
 @ @ - 231 , 6 + 242 , 12 @ @ public class LocalizedMessageTest { 
 " empty . statement " , EMPTY _ OBJECT _ ARRAY , id , LocalizedMessage . class , null ) ; 
 } 
 
 + private static LocalizedMessage createSampleLocalizedMessageWithColumn ( int column ) { 
 + return new LocalizedMessage ( 1 , column , 
 + " com . puppycrawl . tools . checkstyle . checks . coding . messages " , " empty . statement " , 
 + EMPTY _ OBJECT _ ARRAY , " module " , LocalizedMessage . class , null ) ; 
 + } 
 + 
 @ After 
 public void tearDown ( ) { 
 Locale . setDefault ( DEFAULT _ LOCALE ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 index 4c4bd7f . . b2b2b62 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / DeclarationOrderCheckTest . java 
 @ @ - 185 , 11 + 185 , 21 @ @ public class DeclarationOrderCheckTest 
 " 17 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 23 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 " 41 : 5 : " + getCheckMessage ( MSG _ STATIC ) , 
 + " 61 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputDeclarationOrderForwardReference . java " ) , expected ) ; 
 } 
 
 @ Test 
 + public void testVariableAccess ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( DeclarationOrderCheck . class ) ; 
 + final String [ ] expected = { 
 + " 15 : 5 : " + getCheckMessage ( MSG _ ACCESS ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputDeclarationOrderVariableAccess . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testAvoidDuplicatesForStaticFinalFields ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( DeclarationOrderCheck . class ) ; 
 final String [ ] expected = { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java 
 index 294e121 . . 04e12bd 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheckTest . java 
 @ @ - 96 , 6 + 96 , 7 @ @ public class EqualsAvoidNullCheckTest extends AbstractModuleTestSupport { 
 " 415 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 " 416 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 " 417 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 + " 421 : 22 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputEqualsAvoidNull . java " ) , expected ) ; 
 } 
 @ @ - 149 , 6 + 150 , 7 @ @ public class EqualsAvoidNullCheckTest extends AbstractModuleTestSupport { 
 " 415 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 " 416 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 " 417 : 17 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 + " 421 : 22 : " + getCheckMessage ( MSG _ EQUALS _ AVOID _ NULL ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputEqualsAvoidNull . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java 
 index 2dce634 . . b4cebd5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheckTest . java 
 @ @ - 115 , 6 + 115 , 7 @ @ public class EqualsHashCodeCheckTest 
 " 68 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , 
 " 75 : 9 : " + getCheckMessage ( MSG _ KEY _ EQUALS ) , 
 " 82 : 9 : " + getCheckMessage ( MSG _ KEY _ HASHCODE ) , 
 + " 97 : 9 : " + getCheckMessage ( MSG _ KEY _ EQUALS ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputEqualsHashCodeEqualsParameter . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheckTest . java 
 index e776ecc . . 7365e4d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ExplicitInitializationCheckTest . java 
 @ @ - 58 , 6 + 58 , 8 @ @ public class ExplicitInitializationCheckTest extends AbstractModuleTestSupport { 
 " 52 : 17 : " + getCheckMessage ( MSG _ KEY , " x " , 0 ) , 
 " 53 : 25 : " + getCheckMessage ( MSG _ KEY , " bar " , " null " ) , 
 " 54 : 27 : " + getCheckMessage ( MSG _ KEY , " barArray " , " null " ) , 
 + " 89 : 19 : " + getCheckMessage ( MSG _ KEY , " shortVariable " , " 0 " ) , 
 + " 90 : 18 : " + getCheckMessage ( MSG _ KEY , " bite " , " 0 " ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputExplicitInitialization . java " ) , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 index 51b7ce0 . . 41ddef0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheckTest . java 
 @ @ - 81 , 6 + 81 , 7 @ @ public class FinalLocalVariableCheckTest 
 " 386 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , 
 " 418 : 13 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , 
 " 421 : 21 : " + getCheckMessage ( MSG _ KEY , " shouldBeFinal " ) , 
 + " 441 : 33 : " + getCheckMessage ( MSG _ KEY , " table " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputFinalLocalVariable . java " ) , expected ) ; 
 } 
 @ @ - 128 , 6 + 129 , 10 @ @ public class FinalLocalVariableCheckTest 
 final String [ ] expected = { 
 " 8 : 20 : " + getCheckMessage ( MSG _ KEY , " a " ) , 
 " 15 : 13 : " + getCheckMessage ( MSG _ KEY , " x " ) , 
 + " 21 : 66 : " + getCheckMessage ( MSG _ KEY , " snippets " ) , 
 + " 22 : 32 : " + getCheckMessage ( MSG _ KEY , " filteredSnippets " ) , 
 + " 23 : 21 : " + getCheckMessage ( MSG _ KEY , " snippet " ) , 
 + " 27 : 20 : " + getCheckMessage ( MSG _ KEY , " snippet " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputFinalLocalVariableEnhancedForLoopVariable . java " ) , 
 expected ) ; 
 @ @ - 140 , 6 + 145 , 8 @ @ public class FinalLocalVariableCheckTest 
 checkConfig . addAttribute ( " tokens " , " VARIABLE _ DEF , PARAMETER _ DEF " ) ; 
 final String [ ] expected = { 
 " 15 : 13 : " + getCheckMessage ( MSG _ KEY , " x " ) , 
 + " 21 : 66 : " + getCheckMessage ( MSG _ KEY , " snippets " ) , 
 + " 22 : 32 : " + getCheckMessage ( MSG _ KEY , " filteredSnippets " ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputFinalLocalVariableEnhancedForLoopVariable . java " ) , 
 expected ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java 
 index e5328a4 . . 846a400 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / PackageDeclarationCheckTest . java 
 @ @ - 138 , 6 + 138 , 18 @ @ public class PackageDeclarationCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testNoPackage ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( PackageDeclarationCheck . class ) ; 
 + final String [ ] expected = { 
 + " 2 : " + getCheckMessage ( MSG _ KEY _ MISSING ) , 
 + } ; 
 + 
 + verify ( checkConfig , 
 + getNonCompilablePath ( " InputPackageDeclarationNoPackage . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 public void testTokensNotNull ( ) { 
 final PackageDeclarationCheck check = new PackageDeclarationCheck ( ) ; 
 Assert . assertNotNull ( " Acceptable tokens should not be null " , check . getAcceptableTokens ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java 
 index 5caadf1 . . 212e93b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java 
 @ @ - 81 , 6 + 81 , 7 @ @ public class VariableDeclarationUsageDistanceCheckTest extends 
 " 978 : " + getCheckMessage ( MSG _ KEY , " a " , 2 , 1 ) , 
 " 989 : " + getCheckMessage ( MSG _ KEY , " a " , 3 , 1 ) , 
 " 1024 : " + getCheckMessage ( MSG _ KEY , " c " , 3 , 1 ) , 
 + " 1054 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 1 ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputVariableDeclarationUsageDistance . java " ) , expected ) ; 
 } 
 @ @ - 102 , 6 + 103 , 7 @ @ public class VariableDeclarationUsageDistanceCheckTest extends 
 " 891 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 3 ) , 
 " 901 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 3 ) , 
 " 967 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 3 ) , 
 + " 1054 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 3 ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputVariableDeclarationUsageDistance . java " ) , expected ) ; 
 } 
 @ @ - 177 , 6 + 179 , 7 @ @ public class VariableDeclarationUsageDistanceCheckTest extends 
 " 542 : " + getCheckMessage ( MSG _ KEY , " parentId " , 4 , 1 ) , 
 " 978 : " + getCheckMessage ( MSG _ KEY , " a " , 2 , 1 ) , 
 " 1024 : " + getCheckMessage ( MSG _ KEY , " c " , 4 , 1 ) , 
 + " 1054 : " + getCheckMessage ( MSG _ KEY , " a " , 4 , 1 ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputVariableDeclarationUsageDistance . java " ) , expected ) ; 
 } 
 @ @ - 223 , 6 + 226 , 7 @ @ public class VariableDeclarationUsageDistanceCheckTest extends 
 " 967 : " + getCheckMessage ( MSG _ KEY _ EXT , " a " , 4 , 1 ) , 
 " 989 : " + getCheckMessage ( MSG _ KEY _ EXT , " a " , 3 , 1 ) , 
 " 1024 : " + getCheckMessage ( MSG _ KEY _ EXT , " c " , 3 , 1 ) , 
 + " 1054 : " + getCheckMessage ( MSG _ KEY _ EXT , " a " , 4 , 1 ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputVariableDeclarationUsageDistance . java " ) , expected ) ; 
 } 
 @ @ - 247 , 6 + 251 , 7 @ @ public class VariableDeclarationUsageDistanceCheckTest extends 
 " 491 : " + getCheckMessage ( MSG _ KEY _ EXT , " myOption " , 6 , 3 ) , 
 " 542 : " + getCheckMessage ( MSG _ KEY _ EXT , " parentId " , 4 , 3 ) , 
 " 1024 : " + getCheckMessage ( MSG _ KEY _ EXT , " c " , 4 , 3 ) , 
 + " 1054 : " + getCheckMessage ( MSG _ KEY _ EXT , " a " , 4 , 3 ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " InputVariableDeclarationUsageDistance . java " ) , expected ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 index 0e6b431 . . ebd6d5c 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 @ @ - 30 , 6 + 30 , 8 @ @ import java . io . File ; 
 import java . io . IOException ; 
 import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 + import java . net . URI ; 
 + import java . util . Set ; 
 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 @ @ - 308 , 4 + 310 , 14 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { 
 checkConfig . addAttribute ( " headerFile " , getPath ( " InputHeaderjava . blank - lines2 . header " ) ) ; 
 verify ( checkConfig , getPath ( " InputHeaderBlankLines2 . java " ) ) ; 
 } 
 + 
 + @ Test 
 + public void testExternalResource ( ) throws Exception { 
 + final HeaderCheck check = new HeaderCheck ( ) ; 
 + final URI uri = CommonUtil . getUriByFilename ( getPath ( " InputHeaderjava . header " ) ) ; 
 + check . setHeaderFile ( uri ) ; 
 + final Set < String > results = check . getExternalResourceLocations ( ) ; 
 + assertEquals ( " Invalid result size " , 1 , results . size ( ) ) ; 
 + assertEquals ( " Invalid resource location " , uri . toString ( ) , results . iterator ( ) . next ( ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java 
 index e8f598d . . 3c39ccf 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpCheckTest . java 
 @ @ - 174 , 6 + 174 , 20 @ @ public class RegexpCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testMessagePropertyBad2 ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( RegexpCheck . class ) ; 
 + checkConfig . addAttribute ( " format " , " System \ \ . ( out ) | ( err ) \ \ . print ( ln ) ? \ \ ( " ) ; 
 + checkConfig . addAttribute ( " illegalPattern " , " true " ) ; 
 + checkConfig . addAttribute ( " message " , " " ) ; 
 + final String [ ] expected = { 
 + " 69 : " + getCheckMessage ( MSG _ ILLEGAL _ REGEXP , " System \ \ . ( out ) | ( err ) \ \ . print ( ln ) ? \ \ ( " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputRegexpSemantic . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testIgnoreCaseTrue ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createModuleConfig ( RegexpCheck . class ) ; 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java 
 new file mode 100644 
 index 0000000 . . 73da455 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / packagedeclaration / InputPackageDeclarationNoPackage . java 
 @ @ - 0 , 0 + 1 , 3 @ @ 
 + / / comment 
 + class InputPackageDeclarationNoPackage { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java 
 index 36e796f . . 988ea2b 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderForwardReference . java 
 @ @ - 45 , 3 + 45 , 18 @ @ public class InputDeclarationOrderForwardReference { 
 int i = 5 ; 
 } 
 } 
 + class InputDeclarationOrderFieldAnonymousClass { 
 + 
 + private static final String [ ] REQUIRED _ WORKDS = new String [ ] { " copyright " } ; 
 + 
 + enum RequiredHeaderPlacement { 
 + TEMP ; 
 + 
 + public static String [ ] labels ( ) { 
 + String [ ] labels = new String [ values ( ) . length ] ; 
 + return labels ; 
 + } 
 + } 
 + 
 + public static final String [ ] HEADER _ PLACEMENT _ DESCRIPTOR = RequiredHeaderPlacement . labels ( ) ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderVariableAccess . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderVariableAccess . java 
 new file mode 100644 
 index 0000000 . . 79544aa 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / declarationorder / InputDeclarationOrderVariableAccess . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . declarationorder ; 
 + 
 + import java . io . InputStream ; 
 + import java . io . IOException ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + 
 + public class InputDeclarationOrderVariableAccess { 
 + 
 + public static final String TYPE = new String ( " significant _ terms " ) ; 
 + 
 + private static final Map < String , String > BUCKETS _ MAP = Collections . emptyMap ( ) ; 
 + 
 + public static final InputDeclarationOrderVariableAccess . Stream STREAM = 
 + new InputDeclarationOrderVariableAccess . Stream ( ) { 
 + @ Override 
 + public InputDeclarationOrderVariableAccess readResult ( InputStream in ) throws IOException { 
 + InputDeclarationOrderVariableAccess buckets = new InputDeclarationOrderVariableAccess ( ) ; 
 + buckets . readFrom ( in ) ; 
 + return buckets ; 
 + } 
 + } ; 
 + 
 + InputDeclarationOrderVariableAccess ( ) { } 
 + 
 + public void readFrom ( InputStream in ) throws IOException { 
 + } 
 + 
 + static class Stream { 
 + public InputDeclarationOrderVariableAccess readResult ( InputStream in ) throws IOException { 
 + return null ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalsavoidnull / InputEqualsAvoidNull . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalsavoidnull / InputEqualsAvoidNull . java 
 index 83e3c79 . . 86d3637 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalsavoidnull / InputEqualsAvoidNull . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalsavoidnull / InputEqualsAvoidNull . java 
 @ @ - 416 , 6 + 416 , 10 @ @ class TestConcatenations { 
 s . equals ( " a " + " b " ) ; 
 s . equals ( getInt ( ) + s ) ; 
 s . equals ( getInt ( ) + getInt ( ) ) ; 
 + s . endsWith ( " a " ) ; 
 + String s = " " ; 
 + if ( ! s . equals ( " Hello [ EOL ] " + System . getProperty ( " line . separator " ) ) ) 
 + foo ( ) ; 
 } 
 
 int getInt ( ) { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalshashcode / InputEqualsHashCodeEqualsParameter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalshashcode / InputEqualsHashCodeEqualsParameter . java 
 index b03796f . . a163097 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalshashcode / InputEqualsHashCodeEqualsParameter . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / equalshashcode / InputEqualsHashCodeEqualsParameter . java 
 @ @ - 93 , 4 + 93 , 12 @ @ public class InputEqualsHashCodeEqualsParameter { 
 public interface TestClass16 { / / no violation 
 public int hashCode ( ) ; 
 } 
 + public class TestClass17 { 
 + public int hashCode ( ) { 
 + return 1 ; 
 + } 
 + public int hashCode ( int val ) { 
 + return 1 ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java 
 index 8212b94 . . c8ca84c 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / explicitinitialization / InputExplicitInitialization . java 
 @ @ - 53 , 6 + 53 , 7 @ @ enum InputExplicitInit3 { 
 private Bar < String > bar = null ; 
 private Bar < String > [ ] barArray = null ; 
 private int y = 1 ; 
 + private Boolean booleanAtt = false ; 
 } 
 
 @ interface annotation1 { 
 @ @ - 85 , 4 + 86 , 6 @ @ class Chars { 
 class Doubles { 
 final double subZero = - 0 . 0 ; 
 final double nan = Double . NaN ; 
 + private short shortVariable = 0 ; 
 + private byte bite = 0 ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariable . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariable . java 
 index 8b89ff0 . . 2230bac 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariable . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariable . java 
 @ @ - 431 , 5 + 431 , 20 @ @ class class5 { 
 } 
 } 
 } 
 + 
 + abstract class Bar2 { 
 + abstract void method ( String param ) ; 
 + } 
 + } 
 + 
 + public void test5 ( ) { 
 + InputFinalLocalVariable table = new InputFinalLocalVariable ( ) ; 
 + new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + InputFinalLocalVariable table = null ; 
 + table = new InputFinalLocalVariable ( ) ; 
 + } 
 + } ; 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java 
 index 29e7af4 . . 3731044 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / finallocalvariable / InputFinalLocalVariableEnhancedForLoopVariable . java 
 @ @ - 17 , 5 + 17 , 17 @ @ public class InputFinalLocalVariableEnhancedForLoopVariable { 
 } 
 
 } 
 - 
 + 
 + public java . util . List < String > method3 ( java . util . List < String > snippets ) { 
 + java . util . List < String > filteredSnippets = new java . util . ArrayList < > ( ) ; 
 + for ( String snippet : snippets ) { 
 + filteredSnippets . add ( snippet ) ; 
 + } 
 + if ( filteredSnippets . size ( ) = = 0 ) { 
 + String snippet = snippets . get ( 0 ) ; 
 + snippet = new String ( snippet ) ; 
 + filteredSnippets . add ( snippet ) ; 
 + } 
 + return filteredSnippets ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenField . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenField . java 
 index 5add195 . . 770dc06 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenField . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenField . java 
 @ @ - 291 , 4 + 291 , 16 @ @ class OneLetterField 
 { 
 this . i = i ; 
 } 
 + enum Inner { } 
 + } 
 + class DuplicateFieldFromPreviousClass 
 + { 
 + public void method ( ) { 
 + int i = 0 ; 
 + } 
 + } 
 + class NestedEnum { 
 + enum Test { A , B , C ; int i ; } 
 + 
 + void method ( int i ) { } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldLambdas . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldLambdas . java 
 index 33710d3 . . 63526a0 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldLambdas . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / hiddenfield / InputHiddenFieldLambdas . java 
 @ @ - 227 , 4 + 227 , 9 @ @ public class InputHiddenFieldLambdas { 
 FunctionWithOneParameter otherObjectToString = someObject - > { / / 1 violation 
 return someObject . toString ( ) ; 
 } ; 
 + 
 + private final String l = " " ; 
 + private interface NestedInterface { 
 + void print ( String l ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java 
 index 9d59859 . . a215152 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / modifiedcontrolvariable / InputModifiedControlVariableBothForLoops . java 
 @ @ - 80 , 6 + 80 , 13 @ @ class InputModifiedControlVariableBothForLoops 
 for ( int i = 0 ; i < 10 ; i + = 1 ) { 
 for ( i = 7 ; i < 10 ; i + = 1 ) { } 
 } 
 + for ( String name : new String [ ] { } ) { 
 + } 
 + 
 + for ( i = 0 ; i < 10 ; i + + ) { 
 + String name ; 
 + name = " " ; 
 + } 
 } 
 private int i ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java 
 index d178fbf . . c1bba74 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / multiplevariabledeclarations / InputMultipleVariableDeclarations . java 
 @ @ - 33 , 5 + 33 , 6 @ @ public class InputMultipleVariableDeclarations 
 
 void method3 ( ) { 
 java . lang . Object obj ; Object obj1 ; Object obj2 ; Object obj3 ; 
 + for ( String s : new String [ ] { } ) { } 
 } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java 
 index 526e849 . . ffda0ca 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisEnumInnerClassesAndBugs . java 
 @ @ - 173 , 4 + 173 , 5 @ @ class NestedFrames { 
 } 
 return b + b * b ; 
 } 
 + final NestedFrames NestedFrames = new NestedFrames ( ) ; 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java 
 index cdff75f . . 853340b 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / variabledeclarationusagedistance / InputVariableDeclarationUsageDistance . java 
 @ @ - 1048 , 4 + 1048 , 15 @ @ class New { 
 result = true ; 
 } 
 
 + static int field ; 
 + 
 + private void n ( ) { 
 + long a = 0 ; 
 + 
 + New . field = 1 ; 
 + New . field = 2 ; 
 + New . field = 3 ; 
 + New . field = ( int ) a ; 
 + } 
 + 
 }

NEAREST DIFF:
diff - - git a / README . md b / README . md 
 index 27a8aa3 . . 7be7f9c 100644 
 - - - a / README . md 
 + + + b / README . md 
 @ @ - 1 , 14 + 1 , 14 @ @ 
 [ ! [ ] [ travis img ] ] [ travis ] 
 [ ! [ ] [ appveyor img ] ] [ appveyor ] 
 [ ! [ ] [ teamcity img ] ] [ teamcity ] 
 - [ ! [ ] [ codeship img ] ] [ codeship ] 
 [ ! [ ] [ circleci img ] ] [ circleci ] 
 [ ! [ ] [ wercker img ] ] [ wercker ] 
 [ ! [ ] [ shippable img ] ] [ shippable ] 
 - [ ! [ ] [ buddy img ] ] [ buddy ] 
 [ ! [ ] [ coverage img ] ] [ coverage ] 
 [ ! [ ] [ snyk img ] ] [ snyk ] 
 
 + [ ! [ ] [ codeship img ] ] [ codeship ] 
 + [ ! [ ] [ buddy img ] ] [ buddy ] 
 
 [ ! [ ] [ mavenbadge img ] ] [ mavenbadge ] 
 [ ! [ ] [ sonar img ] ] [ sonar ]
