BLEU SCORE: 0.028403891990720458

TEST MSG: Issue # 3177 : Remove validation of rw access for output file in Main # validateCli
GENERATED MSG: Revert " Checking existance of config file before processing target file . " , due to # 1267

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index dfd24e5 . . 3f96908 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 253 , 13 + 253 , 6 @ @ public final class Main { <nl> result . add ( String . format ( " Could not find file ' % s ' . " , propertiesLocation ) ) ; <nl> } <nl> } <nl> - if ( cmdLine . hasOption ( OPTION _ O _ NAME ) ) { <nl> - final String outputLocation = cmdLine . getOptionValue ( OPTION _ O _ NAME ) ; <nl> - final File file = new File ( outputLocation ) ; <nl> - if ( file . exists ( ) & & ! file . canWrite ( ) ) { <nl> - result . add ( String . format ( " Permission denied : ' % s ' . " , outputLocation ) ) ; <nl> - } <nl> - } <nl> } <nl> else { <nl> result . add ( " Must specify a config XML file . " ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index dcd3814 . . 97411cd 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> @ @ - 384 , 49 + 385 , 14 @ @ public class MainTest { <nl> } <nl> <nl> @ Test <nl> - public void testExistingTargetFilePlainOutputToFileWithoutRwPermissions ( ) <nl> - throws Exception { <nl> - final File file = temporaryFolder . newFile ( " file . output " ) ; <nl> - assertTrue ( file . setReadable ( true , true ) ) ; <nl> - assertTrue ( file . setWritable ( false , false ) ) ; <nl> - exit . expectSystemExitWithStatus ( - 1 ) ; <nl> - exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> - @ Override <nl> - public void checkAssertion ( ) throws IOException { <nl> - assertEquals ( " Permission denied : ' " + file . getCanonicalPath ( ) + " ' . " <nl> - + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; <nl> - assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> - } <nl> - } ) ; <nl> - Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> - " - f " , " plain " , <nl> - " - o " , file . getCanonicalPath ( ) , <nl> - getPath ( " InputMain . java " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testExistingFilePlainOutputToFileWithoutReadAndRwPermissions ( ) <nl> - throws Exception { <nl> - final File file = temporaryFolder . newFile ( " file . output " ) ; <nl> - / / That works fine on Linux / Unix , but . . . . <nl> - / / It ' s not possible to make a file unreadable in Windows NTFS for owner . <nl> - / / http : / / stackoverflow . com / a / 4354686 <nl> - / / https : / / github . com / google / google - oauth - java - client / issues / 55 # issuecomment - 69403681 <nl> - / / assertTrue ( file . setReadable ( false , false ) ) ; <nl> - assertTrue ( file . setWritable ( false , false ) ) ; <nl> - exit . expectSystemExitWithStatus ( - 1 ) ; <nl> - exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> - @ Override <nl> - public void checkAssertion ( ) throws IOException { <nl> - assertEquals ( " Permission denied : ' " + file . getCanonicalPath ( ) + " ' . " <nl> - + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; <nl> - assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> - } <nl> - } ) ; <nl> + public void testCreateNonExistingOutputFile ( ) throws Exception { <nl> + final String outputFile = temporaryFolder . getRoot ( ) . getCanonicalPath ( ) + " nonexisting . out " ; <nl> + assertFalse ( new File ( outputFile ) . exists ( ) ) ; <nl> Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> - " - o " , file . getCanonicalPath ( ) , <nl> + " - o " , outputFile , <nl> getPath ( " InputMain . java " ) ) ; <nl> + assertTrue ( new File ( outputFile ) . exists ( ) ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / src / xdocs / extending . xml b / src / xdocs / extending . xml <nl> index ad5ecd2 . . 797516b 100644 <nl> - - - a / src / xdocs / extending . xml <nl> + + + b / src / xdocs / extending . xml <nl> @ @ - 24 , 6 + 24 , 12 @ @ <nl> This section covers the ways that Checkstyle ' s behaviour can be <nl> extended , including writing your own checks . <nl> < / p > <nl> + <nl> + < ul > <nl> + < li > < a href = " writingchecks . html " > Writing checks < / a > ; < / li > <nl> + < li > < a href = " writingfilters . html " > Writing filters < / a > ; < / li > <nl> + < li > < a href = " writinglisteners . html " > Writing listeners < / a > . < / li > <nl> + < / ul > <nl> < / section > <nl> < / body > <nl> < / document > <nl> diff - - git a / src / xdocs / style _ configs . xml b / src / xdocs / style _ configs . xml <nl> index 9ed7536 . . fc08b08 100644 <nl> - - - a / src / xdocs / style _ configs . xml <nl> + + + b / src / xdocs / style _ configs . xml <nl> @ @ - 23 , 6 + 23 , 11 @ @ <nl> < p > <nl> This section contains tables to display coverage Java styles by Checkstyle . <nl> < / p > <nl> + <nl> + < ul > <nl> + < li > < a href = " google _ style . html " > Google ' s style < / a > ; < / li > <nl> + < li > < a href = " sun _ style . html " > Sun ' s style < / a > . < / li > <nl> + < / ul > <nl> < / section > <nl> < / body > <nl> < / document >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index dfd24e5 . . 3f96908 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 253 , 13 + 253 , 6 @ @ public final class Main { 
 result . add ( String . format ( " Could not find file ' % s ' . " , propertiesLocation ) ) ; 
 } 
 } 
 - if ( cmdLine . hasOption ( OPTION _ O _ NAME ) ) { 
 - final String outputLocation = cmdLine . getOptionValue ( OPTION _ O _ NAME ) ; 
 - final File file = new File ( outputLocation ) ; 
 - if ( file . exists ( ) & & ! file . canWrite ( ) ) { 
 - result . add ( String . format ( " Permission denied : ' % s ' . " , outputLocation ) ) ; 
 - } 
 - } 
 } 
 else { 
 result . add ( " Must specify a config XML file . " ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index dcd3814 . . 97411cd 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle ; 
 
 import static com . puppycrawl . tools . checkstyle . internal . TestUtils . assertUtilsClassHasPrivateConstructor ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotEquals ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 @ @ - 384 , 49 + 385 , 14 @ @ public class MainTest { 
 } 
 
 @ Test 
 - public void testExistingTargetFilePlainOutputToFileWithoutRwPermissions ( ) 
 - throws Exception { 
 - final File file = temporaryFolder . newFile ( " file . output " ) ; 
 - assertTrue ( file . setReadable ( true , true ) ) ; 
 - assertTrue ( file . setWritable ( false , false ) ) ; 
 - exit . expectSystemExitWithStatus ( - 1 ) ; 
 - exit . checkAssertionAfterwards ( new Assertion ( ) { 
 - @ Override 
 - public void checkAssertion ( ) throws IOException { 
 - assertEquals ( " Permission denied : ' " + file . getCanonicalPath ( ) + " ' . " 
 - + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; 
 - assertEquals ( " " , systemErr . getLog ( ) ) ; 
 - } 
 - } ) ; 
 - Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 - " - f " , " plain " , 
 - " - o " , file . getCanonicalPath ( ) , 
 - getPath ( " InputMain . java " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testExistingFilePlainOutputToFileWithoutReadAndRwPermissions ( ) 
 - throws Exception { 
 - final File file = temporaryFolder . newFile ( " file . output " ) ; 
 - / / That works fine on Linux / Unix , but . . . . 
 - / / It ' s not possible to make a file unreadable in Windows NTFS for owner . 
 - / / http : / / stackoverflow . com / a / 4354686 
 - / / https : / / github . com / google / google - oauth - java - client / issues / 55 # issuecomment - 69403681 
 - / / assertTrue ( file . setReadable ( false , false ) ) ; 
 - assertTrue ( file . setWritable ( false , false ) ) ; 
 - exit . expectSystemExitWithStatus ( - 1 ) ; 
 - exit . checkAssertionAfterwards ( new Assertion ( ) { 
 - @ Override 
 - public void checkAssertion ( ) throws IOException { 
 - assertEquals ( " Permission denied : ' " + file . getCanonicalPath ( ) + " ' . " 
 - + System . lineSeparator ( ) , systemOut . getLog ( ) ) ; 
 - assertEquals ( " " , systemErr . getLog ( ) ) ; 
 - } 
 - } ) ; 
 + public void testCreateNonExistingOutputFile ( ) throws Exception { 
 + final String outputFile = temporaryFolder . getRoot ( ) . getCanonicalPath ( ) + " nonexisting . out " ; 
 + assertFalse ( new File ( outputFile ) . exists ( ) ) ; 
 Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 - " - o " , file . getCanonicalPath ( ) , 
 + " - o " , outputFile , 
 getPath ( " InputMain . java " ) ) ; 
 + assertTrue ( new File ( outputFile ) . exists ( ) ) ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / src / xdocs / extending . xml b / src / xdocs / extending . xml 
 index ad5ecd2 . . 797516b 100644 
 - - - a / src / xdocs / extending . xml 
 + + + b / src / xdocs / extending . xml 
 @ @ - 24 , 6 + 24 , 12 @ @ 
 This section covers the ways that Checkstyle ' s behaviour can be 
 extended , including writing your own checks . 
 < / p > 
 + 
 + < ul > 
 + < li > < a href = " writingchecks . html " > Writing checks < / a > ; < / li > 
 + < li > < a href = " writingfilters . html " > Writing filters < / a > ; < / li > 
 + < li > < a href = " writinglisteners . html " > Writing listeners < / a > . < / li > 
 + < / ul > 
 < / section > 
 < / body > 
 < / document > 
 diff - - git a / src / xdocs / style _ configs . xml b / src / xdocs / style _ configs . xml 
 index 9ed7536 . . fc08b08 100644 
 - - - a / src / xdocs / style _ configs . xml 
 + + + b / src / xdocs / style _ configs . xml 
 @ @ - 23 , 6 + 23 , 11 @ @ 
 < p > 
 This section contains tables to display coverage Java styles by Checkstyle . 
 < / p > 
 + 
 + < ul > 
 + < li > < a href = " google _ style . html " > Google ' s style < / a > ; < / li > 
 + < li > < a href = " sun _ style . html " > Sun ' s style < / a > . < / li > 
 + < / ul > 
 < / section > 
 < / body > 
 < / document >
