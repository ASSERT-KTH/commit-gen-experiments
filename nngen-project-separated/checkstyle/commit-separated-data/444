BLEU SCORE: 0.03600104948631532

TEST MSG: Pull # 5363 : added missing annotation token definition
GENERATED MSG: Issue # 3334 : fixed RequireThis when can ' t find end block token

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index fe671bb . . bc39110 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 113 , 6 + 113 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> TokenTypes . METHOD _ DEF , <nl> TokenTypes . CLASS _ DEF , <nl> TokenTypes . ENUM _ DEF , <nl> + TokenTypes . ANNOTATION _ DEF , <nl> TokenTypes . INTERFACE _ DEF , <nl> TokenTypes . PARAMETER _ DEF , <nl> TokenTypes . TYPE _ ARGUMENT , <nl> @ @ - 193 , 6 + 194 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> TokenTypes . CLASS _ DEF , <nl> TokenTypes . INTERFACE _ DEF , <nl> TokenTypes . ENUM _ DEF , <nl> + TokenTypes . ANNOTATION _ DEF , <nl> TokenTypes . CTOR _ DEF , <nl> TokenTypes . METHOD _ DEF , <nl> TokenTypes . SLIST , <nl> @ @ - 252 , 7 + 254 , 12 @ @ public class RequireThisCheck extends AbstractCheck { <nl> * @ param ast IDENT to check . <nl> * / <nl> private void processIdent ( DetailAST ast ) { <nl> - final int parentType = ast . getParent ( ) . getType ( ) ; <nl> + int parentType = ast . getParent ( ) . getType ( ) ; <nl> + if ( parentType = = TokenTypes . EXPR <nl> + & & ast . getParent ( ) . getParent ( ) . getParent ( ) . getType ( ) <nl> + = = TokenTypes . ANNOTATION _ FIELD _ DEF ) { <nl> + parentType = TokenTypes . ANNOTATION _ FIELD _ DEF ; <nl> + } <nl> switch ( parentType ) { <nl> case TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR : <nl> case TokenTypes . ANNOTATION : <nl> @ @ - 870 , 14 + 877 , 7 @ @ public class RequireThisCheck extends AbstractCheck { <nl> * / <nl> private static AbstractFrame findFrame ( AbstractFrame frame , DetailAST name , <nl> boolean lookForMethod ) { <nl> - final AbstractFrame result ; <nl> - if ( frame = = null ) { <nl> - result = null ; <nl> - } <nl> - else { <nl> - result = frame . getIfContains ( name , lookForMethod ) ; <nl> - } <nl> - return result ; <nl> + return frame . getIfContains ( name , lookForMethod ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index 38ca351 . . f1deaf1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 316 , 6 + 316 , 14 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testAnnotationInterface ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; <nl> + checkConfig . addAttribute ( " validateOnlyOverlapping " , " false " ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputRequireThisAnnotationInterface . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void test ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisAnnotationInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisAnnotationInterface . java <nl> new file mode 100644 <nl> index 0000000 . . b7b3549 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisAnnotationInterface . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . requirethis ; <nl> + <nl> + public @ interface InputRequireThisAnnotationInterface { <nl> + String DEFAULT _ VALUE = " DEFAULT _ VALUE " ; <nl> + <nl> + String value ( ) default DEFAULT _ VALUE ; <nl> + <nl> + String [ ] results ( ) default { } ; <nl> + }
NEAREST DIFF (one line): diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm <nl> index e43ddcd . . 293fd84 100644 <nl> - - - a / src / xdocs / writingjavadocchecks . xml . vm <nl> + + + b / src / xdocs / writingjavadocchecks . xml . vm <nl> @ @ - 287 , 6 + 287 , 13 @ @ class MyCheck extends AbstractJavadocCheck { <nl> Void HTML elements : & lt ; AREA & gt ; , & lt ; BASE & gt ; , & lt ; BASEFONT & gt ; , & lt ; BR & gt ; , & lt ; COL & gt ; , & lt ; FRAME & gt ; , <nl> & lt ; HR & gt ; , & lt ; IMG & gt ; , & lt ; INPUT & gt ; , & lt ; ISINDEX & gt ; , & lt ; LINK & gt ; , & lt ; META & gt ; , & lt ; PARAM & gt ; . <nl> < / p > <nl> + <nl> + < p > <nl> + To make Checkstyle support HTML5 tags whose end tag is optional and HTML5 void elements we should update Javadoc Parser <nl> + bacause each element that breaks < a href = " # XHTML - style _ rules " > XHTML - style rules < / a > have to be defined in Javadoc grammar . <nl> + In future we should update Javadoc grammar if those tag lists extend ( new tags , new HTML standard , etc . ) . <nl> + < / p > <nl> + <nl> < p > <nl> If Checkstyle meets unknown tag ( for example HTML5 tag ) <nl> it doesn ' t fail and parses this tag as < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # HTML _ TAG " > HTML _ TAG < / a > Javadoc token type .

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index fe671bb . . bc39110 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 113 , 6 + 113 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 TokenTypes . METHOD _ DEF , 
 TokenTypes . CLASS _ DEF , 
 TokenTypes . ENUM _ DEF , 
 + TokenTypes . ANNOTATION _ DEF , 
 TokenTypes . INTERFACE _ DEF , 
 TokenTypes . PARAMETER _ DEF , 
 TokenTypes . TYPE _ ARGUMENT , 
 @ @ - 193 , 6 + 194 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 TokenTypes . CLASS _ DEF , 
 TokenTypes . INTERFACE _ DEF , 
 TokenTypes . ENUM _ DEF , 
 + TokenTypes . ANNOTATION _ DEF , 
 TokenTypes . CTOR _ DEF , 
 TokenTypes . METHOD _ DEF , 
 TokenTypes . SLIST , 
 @ @ - 252 , 7 + 254 , 12 @ @ public class RequireThisCheck extends AbstractCheck { 
 * @ param ast IDENT to check . 
 * / 
 private void processIdent ( DetailAST ast ) { 
 - final int parentType = ast . getParent ( ) . getType ( ) ; 
 + int parentType = ast . getParent ( ) . getType ( ) ; 
 + if ( parentType = = TokenTypes . EXPR 
 + & & ast . getParent ( ) . getParent ( ) . getParent ( ) . getType ( ) 
 + = = TokenTypes . ANNOTATION _ FIELD _ DEF ) { 
 + parentType = TokenTypes . ANNOTATION _ FIELD _ DEF ; 
 + } 
 switch ( parentType ) { 
 case TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR : 
 case TokenTypes . ANNOTATION : 
 @ @ - 870 , 14 + 877 , 7 @ @ public class RequireThisCheck extends AbstractCheck { 
 * / 
 private static AbstractFrame findFrame ( AbstractFrame frame , DetailAST name , 
 boolean lookForMethod ) { 
 - final AbstractFrame result ; 
 - if ( frame = = null ) { 
 - result = null ; 
 - } 
 - else { 
 - result = frame . getIfContains ( name , lookForMethod ) ; 
 - } 
 - return result ; 
 + return frame . getIfContains ( name , lookForMethod ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index 38ca351 . . f1deaf1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 316 , 6 + 316 , 14 @ @ public class RequireThisCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testAnnotationInterface ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; 
 + checkConfig . addAttribute ( " validateOnlyOverlapping " , " false " ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputRequireThisAnnotationInterface . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void test ( ) throws Exception { 
 final DefaultConfiguration checkConfig = createModuleConfig ( RequireThisCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisAnnotationInterface . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisAnnotationInterface . java 
 new file mode 100644 
 index 0000000 . . b7b3549 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / requirethis / InputRequireThisAnnotationInterface . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . requirethis ; 
 + 
 + public @ interface InputRequireThisAnnotationInterface { 
 + String DEFAULT _ VALUE = " DEFAULT _ VALUE " ; 
 + 
 + String value ( ) default DEFAULT _ VALUE ; 
 + 
 + String [ ] results ( ) default { } ; 
 + }

NEAREST DIFF:
diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm 
 index e43ddcd . . 293fd84 100644 
 - - - a / src / xdocs / writingjavadocchecks . xml . vm 
 + + + b / src / xdocs / writingjavadocchecks . xml . vm 
 @ @ - 287 , 6 + 287 , 13 @ @ class MyCheck extends AbstractJavadocCheck { 
 Void HTML elements : & lt ; AREA & gt ; , & lt ; BASE & gt ; , & lt ; BASEFONT & gt ; , & lt ; BR & gt ; , & lt ; COL & gt ; , & lt ; FRAME & gt ; , 
 & lt ; HR & gt ; , & lt ; IMG & gt ; , & lt ; INPUT & gt ; , & lt ; ISINDEX & gt ; , & lt ; LINK & gt ; , & lt ; META & gt ; , & lt ; PARAM & gt ; . 
 < / p > 
 + 
 + < p > 
 + To make Checkstyle support HTML5 tags whose end tag is optional and HTML5 void elements we should update Javadoc Parser 
 + bacause each element that breaks < a href = " # XHTML - style _ rules " > XHTML - style rules < / a > have to be defined in Javadoc grammar . 
 + In future we should update Javadoc grammar if those tag lists extend ( new tags , new HTML standard , etc . ) . 
 + < / p > 
 + 
 < p > 
 If Checkstyle meets unknown tag ( for example HTML5 tag ) 
 it doesn ' t fail and parses this tag as < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # HTML _ TAG " > HTML _ TAG < / a > Javadoc token type .
