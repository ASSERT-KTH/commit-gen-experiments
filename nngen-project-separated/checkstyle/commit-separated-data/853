BLEU SCORE: 0.05401123513017143

TEST MSG: Issue # 3931 : Split and Organize Checkstyle inputs by Test for NoWhitespaceAfter
GENERATED MSG: Issue # 3930 : Modified NoWhitespaceBeforeCheckTest . java and moved its input files to a nowhitespacebefore subdirectory

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java <nl> index 34407fe . . cf8398b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java <nl> @ @ - 42 , 7 + 42 , 9 @ @ public class NoWhitespaceAfterCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " whitespace " + File . separator + filename ) ; <nl> + + " whitespace " + File . separator <nl> + + " nowhitespaceafter " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 73 , 7 + 75 , 7 @ @ public class NoWhitespaceAfterCheckTest <nl> " 136 : 12 : " + getCheckMessage ( MSG _ KEY , " . " ) , <nl> " 264 : 2 : " + getCheckMessage ( MSG _ KEY , " . " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputWhitespace . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNoWhitespaceAfter . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 84 , 7 + 86 , 7 @ @ public class NoWhitespaceAfterCheckTest <nl> " 129 : 24 : " + getCheckMessage ( MSG _ KEY , " . " ) , <nl> " 136 : 12 : " + getCheckMessage ( MSG _ KEY , " . " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputWhitespace . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNoWhitespaceAfter . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 95 , 7 + 97 , 7 @ @ public class NoWhitespaceAfterCheckTest <nl> " 89 : 23 : " + getCheckMessage ( MSG _ KEY , " ) " ) , <nl> " 241 : 22 : " + getCheckMessage ( MSG _ KEY , " ) " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputWhitespace . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputNoWhitespaceAfter . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 184 , 7 + 186 , 7 @ @ public class NoWhitespaceAfterCheckTest <nl> <nl> @ Test <nl> public void testNpe ( ) throws Exception { <nl> - verify ( checkConfig , getPath ( " InputNoWhiteSpaceAfterFormerNpe . java " ) ) ; <nl> + verify ( checkConfig , getPath ( " InputNoWhitespaceAfterFormerNpe . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhiteSpaceAfterFormerNpe . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhiteSpaceAfterFormerNpe . java <nl> deleted file mode 100644 <nl> index 722aab8 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhiteSpaceAfterFormerNpe . java <nl> + + + / dev / null <nl> @ @ - 1 , 8 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> - <nl> - public class InputNoWhiteSpaceAfterFormerNpe <nl> - { <nl> - private int [ ] getSome ( ) { <nl> - return new int [ 4 ] ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations . java <nl> deleted file mode 100644 <nl> index a4942ff . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations . java <nl> + + + / dev / null <nl> @ @ - 1 , 46 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> - <nl> - public class InputNoWhitespaceAfterArrayDeclarations <nl> - { <nl> - Object [ ] someStuff = { } ; / / Correct <nl> - Object [ ] someStuff1 = { } ; / / Incorrect <nl> - Object someStuff2 [ ] = { } ; / / Correct <nl> - Object someStuff3 [ ] = { } ; / / Incorrect <nl> - int [ ] a = { } ; / / Incorrect <nl> - String s [ ] = { } ; / / Incorrect <nl> - double d [ ] = { } ; / / Incorrect <nl> - char [ ] c = { } ; / / Correct <nl> - short sh [ ] = { } ; / / Correct <nl> - long [ ] l = { } ; / / Correct <nl> - byte b [ ] = { } ; / / Correct <nl> - int get ( ) [ ] { / / Incorrect <nl> - return a ; } <nl> - int [ ] receive ( ) { return a ; } / / Incorrect <nl> - int get1 ( int k , int c , int b ) [ ] { / / Incorrect <nl> - return null ; <nl> - } <nl> - private String [ ] getLines ( ) { / / Correct <nl> - return new String [ ] { / / Correct <nl> - " s " <nl> - } ; <nl> - } <nl> - String aOptions [ ] [ ] ; / / Correct <nl> - int [ ] [ ] [ ] abc ; / / Incorrect <nl> - int cba [ ] [ ] [ ] ; / / Incorrect <nl> - private String [ ] [ ] [ ] getSeveralLines ( ) { / / Correct <nl> - return new String [ ] [ ] [ ] { / / Incorrect <nl> - new String [ ] [ ] { / / Incorrect <nl> - new String [ ] { / / Correct <nl> - " s " <nl> - } <nl> - } <nl> - } ; <nl> - } <nl> - int ar [ ] = new int [ ] { 1 , 2 } ; / / Incorrect ( 2 warnings ) <nl> - private int [ ] [ ] [ ] getMultArray ( ) { / / Incorrect <nl> - return null ; <nl> - } <nl> - private long getLongMultArray ( int someParam , String value ) [ ] [ ] [ ] { / / Incorrect <nl> - return null ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations2 . java <nl> deleted file mode 100644 <nl> index 21dfb26 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 108 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> - <nl> - import java . util . List ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - <nl> - public class InputNoWhitespaceAfterArrayDeclarations2 <nl> - { <nl> - <nl> - public class A { <nl> - public int [ ] [ ] create ( int i , int j ) { <nl> - return new int [ 3 ] [ 3 ] ; / / incorrect , 12 : 30 <nl> - } <nl> - } <nl> - <nl> - public class B { <nl> - public int create ( int i , int j ) [ ] [ ] { / / incorrect , 17 : 40 <nl> - return new int [ 3 ] [ i + j ] ; / / incorrect , 18 : 27 <nl> - } <nl> - } <nl> - <nl> - public class C { <nl> - public int [ ] [ ] create ( int i , int j ) { <nl> - return new int [ i + j ] [ i + j ] ; / / correct <nl> - } <nl> - } <nl> - <nl> - public class D { <nl> - public int [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 29 : 23 <nl> - return new int [ i + j ] [ i + j ] [ 0 ] ; / / incorrect 30 : 27 , 38 , 51 <nl> - } <nl> - } <nl> - <nl> - public class E { <nl> - public int create ( int i , int j , int [ ] [ ] k ) [ ] [ ] [ ] { / / incorrect , 35 : 44 , 56 <nl> - int e [ ] [ ] [ ] = new int [ i + j ] [ 2 ] [ i + j ] ; / / incorrect , 36 : 18 , 23 , 43 <nl> - e [ 0 ] [ 1 ] [ 2 ] = 0 ; e [ 1 ] [ 1 ] [ 1 ] = 0 ; / / incorrect , 37 : 14 , 18 <nl> - return e ; <nl> - } <nl> - } <nl> - public static class F { <nl> - public static Integer [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 42 : 23 <nl> - int [ ] [ ] [ ] f = new int [ 0 ] [ 1 ] [ 2 ] ; <nl> - return new Integer [ i + j ] [ i + j ] [ 0 ] ; <nl> - } <nl> - } <nl> - public class G { <nl> - public List < String > [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 48 : 28 , 31 , 34 <nl> - / / cannot build with this check - generic array creation error , but whitespaces still catched <nl> - / / List < String > g [ ] [ ] [ ] = new List < String > [ 0 ] [ 1 ] [ 2 ] ; / / incorrect 49 : 33 , 55 <nl> - / / return new List < String > [ i + j ] [ i + j ] [ 0 ] ; / / correct <nl> - int g [ ] [ ] [ ] = new int [ 0 ] [ 1 ] [ 2 ] ; <nl> - g [ 0 ] [ 0 ] [ 0 ] = 0 ; <nl> - g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 54 : 14 <nl> - g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 55 : 17 <nl> - g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 56 : 14 , 18 , 22 <nl> - return null ; <nl> - } <nl> - <nl> - } <nl> - public class H { <nl> - public List < Integer > create ( int i , int j ) [ ] [ ] [ ] { / / incorrect , 62 : 46 , 53 <nl> - return null ; <nl> - } <nl> - } <nl> - <nl> - Object someStuff4 = boolean [ ] . class ; / / incorrect , 67 : 32 <nl> - String [ ] [ ] someStuff5 = new String [ 4 ] [ 9 ] ; <nl> - String [ ] [ ] someStuff6 = ( java . lang . String [ ] [ ] ) someStuff5 ; / / incorrect , 69 : 46 , 50 <nl> - String [ ] [ ] someStuff7 = ( String [ ] [ ] ) someStuff5 ; / / incorrect , 70 : 36 <nl> - <nl> - / / this is legal until allowLineBreaks is set to false <nl> - int someStuff8 <nl> - [ ] ; <nl> - <nl> - / / this is legal until allowLineBreaks is set to false <nl> - int [ ] <nl> - someStuff81 ; <nl> - <nl> - / / incorrect 81 : 40 <nl> - Integer someStuff9 [ ] [ ] [ ] = ( Integer [ ] [ ] [ ] ) InputNoWhitespaceAfterArrayDeclarations2 . F . create ( 1 , 2 ) ; <nl> - <nl> - / / type arguments <nl> - List < char [ ] > someStuff10 ; / / correct <nl> - List < char [ ] [ ] > someStuff11 ; / / incorrect 85 : 14 <nl> - List < InputNoWhitespaceAfterArrayDeclarations2 . A [ ] > someStuff12 ; / / incorrect 86 : 52 <nl> - public void foo ( java . util . List < ? extends String [ ] > bar , Comparable < ? super Object [ ] > baz ) { } / / incorrect 87 : 86 <nl> - <nl> - Integer someStuff13 = F . create ( 1 , 1 ) [ 0 ] [ 0 ] [ 0 ] ; <nl> - Integer someStuff131 = F . create ( 1 , 1 ) [ 0 ] [ 0 ] [ 0 ] ; / / incorrect 90 : 41 , 49 <nl> - Object [ ] someStuff14 = ( Object [ ] ) null ; <nl> - Object [ ] someStuff15 = ( Object [ ] ) null ; / / incorrect 92 : 35 <nl> - <nl> - byte someStuff16 = ( ( byte [ ] ) someStuff4 ) [ 0 ] ; / / incorrect 94 : 45 <nl> - <nl> - public void bar ( ) { <nl> - if ( someStuff15 instanceof Object [ ] ) { / / incorrect 97 : 41 <nl> - <nl> - } <nl> - if ( someStuff15 instanceof Object [ ] [ ] ) { / / incorrect 100 : 43 <nl> - <nl> - } <nl> - if ( someStuff15 instanceof Object [ ] [ ] ) { <nl> - <nl> - } <nl> - } <nl> - <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterMethodRef . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterMethodRef . java <nl> deleted file mode 100644 <nl> index c0e0b75 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterMethodRef . java <nl> + + + / dev / null <nl> @ @ - 1 , 11 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> - <nl> - import java . util . function . Function ; <nl> - import java . util . function . IntFunction ; <nl> - <nl> - <nl> - public class InputNoWhitespaceAfterMethodRef <nl> - { <nl> - IntFunction < int [ ] > arrayMaker = int [ ] : : new ; / / incorrect 10 : 40 <nl> - Function < Integer , String [ ] > messageArrayFactory = String [ ] : : new ; / / incorrect 11 : 63 <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterSynchronized . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterSynchronized . java <nl> deleted file mode 100644 <nl> index 953b948 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterSynchronized . java <nl> + + + / dev / null <nl> @ @ - 1 , 16 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> - <nl> - class InputNoWhitespaceAfterSynchronized { <nl> - void method2 ( ) <nl> - { <nl> - synchronized ( this ) { <nl> - } <nl> - } <nl> - <nl> - public void synchronzed ( ) { <nl> - synchronized ( this ) { } <nl> - synchronized <nl> - ( this ) { } <nl> - synchronized ( this ) { } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfter . java <nl> new file mode 100644 <nl> index 0000000 . . ac31e2e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfter . java <nl> @ @ - 0 , 0 + 1 , 289 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl <nl> + . tools . <nl> + checkstyle . checks . whitespace . nowhitespaceafter ; <nl> + <nl> + / * * <nl> + * Class for testing whitespace issues . <nl> + * error missing author tag <nl> + * * / <nl> + class InputNoWhitespaceAfter <nl> + { <nl> + / * * ignore assignment * * / <nl> + private int mVar1 = 1 ; <nl> + / * * ignore assignment * * / <nl> + private int mVar2 = 1 ; <nl> + / * * Should be ok * * / <nl> + private int mVar3 = 1 ; <nl> + <nl> + / * * method * * / <nl> + void method1 ( ) <nl> + { <nl> + final int a = 1 ; <nl> + int b = 1 ; / / Ignore 1 <nl> + b = 1 ; / / Ignore 1 <nl> + b + = 1 ; / / Ignore 1 <nl> + b - = - 1 + ( + b ) ; / / Ignore 2 <nl> + b = b + + + b - - ; / / Ignore 1 <nl> + b = + + b - - - b ; / / Ignore 1 <nl> + } <nl> + <nl> + / * * method * * / <nl> + void method2 ( ) <nl> + { <nl> + synchronized ( this ) { <nl> + } <nl> + try { <nl> + } <nl> + catch ( RuntimeException e ) { <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + skip blank lines between comment and code , <nl> + should be ok <nl> + * * / <nl> + <nl> + <nl> + private int mVar4 = 1 ; <nl> + <nl> + <nl> + / * * test WS after void return * / <nl> + private void fastExit ( ) <nl> + { <nl> + boolean complicatedStuffNeeded = true ; <nl> + if ( ! complicatedStuffNeeded ) <nl> + { <nl> + return ; / / should not complain about missing WS after return <nl> + } <nl> + else <nl> + { <nl> + / / do complicated stuff <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * test WS after non void return <nl> + @ return 2 <nl> + * / <nl> + private int nonVoid ( ) <nl> + { <nl> + if ( true ) <nl> + { <nl> + return ( 2 ) ; / / should complain about missing WS after return <nl> + } <nl> + else <nl> + { <nl> + return 2 ; / / this is ok <nl> + } <nl> + } <nl> + <nl> + / * * test casts * * / <nl> + private void testCasts ( ) <nl> + { <nl> + Object o = ( Object ) new Object ( ) ; / / ok <nl> + o = ( Object ) o ; / / error <nl> + o = ( Object ) o ; / / ok <nl> + o = ( Object ) <nl> + o ; / / ok <nl> + } <nl> + <nl> + / * * test questions * * / <nl> + private void testQuestions ( ) <nl> + { <nl> + boolean b = ( 1 = = 2 ) ? true : false ; <nl> + b = ( 1 = = 2 ) ? false : true ; <nl> + } <nl> + <nl> + / * * star test * * / <nl> + private void starTest ( ) <nl> + { <nl> + int x = 2 * 3 * 4 ; <nl> + } <nl> + <nl> + / * * boolean test * * / <nl> + private void boolTest ( ) <nl> + { <nl> + boolean a = true ; <nl> + boolean x = ! a ; <nl> + int z = ~ 1 + ~ 2 ; <nl> + } <nl> + <nl> + / * * division test * * / <nl> + private void divTest ( ) <nl> + { <nl> + int a = 4 % 2 ; <nl> + int b = 4 % 2 ; <nl> + int c = 4 % 2 ; <nl> + int d = 4 % 2 ; <nl> + int e = 4 / 2 ; <nl> + int f = 4 / 2 ; <nl> + int g = 4 / 2 ; <nl> + int h = 4 / 2 ; <nl> + } <nl> + <nl> + / * * @ return dot test * * / <nl> + private java . lang . String dotTest ( ) <nl> + { <nl> + Object o = new java . lang . Object ( ) ; <nl> + o . <nl> + toString ( ) ; <nl> + o <nl> + . toString ( ) ; <nl> + o . toString ( ) ; <nl> + return o . toString ( ) ; <nl> + } <nl> + <nl> + / * * assert statement test * / <nl> + public void assertTest ( ) <nl> + { <nl> + / / OK <nl> + assert true ; <nl> + <nl> + / / OK <nl> + assert true : " Whups " ; <nl> + <nl> + / / evil colons , should be OK <nl> + assert " OK " . equals ( null ) ? false : true : " Whups " ; <nl> + <nl> + / / missing WS around assert <nl> + assert ( true ) ; <nl> + <nl> + / / missing WS around colon <nl> + assert true : " Whups " ; <nl> + } <nl> + <nl> + / * * another check * / <nl> + void donBradman ( Runnable aRun ) <nl> + { <nl> + donBradman ( new Runnable ( ) { <nl> + public void run ( ) { <nl> + } <nl> + } ) ; <nl> + <nl> + final Runnable r = new Runnable ( ) { <nl> + public void run ( ) { <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + / * * rfe 521323 , detect whitespace before ' ; ' * / <nl> + void rfe521323 ( ) <nl> + { <nl> + doStuff ( ) ; <nl> + / / ^ whitespace <nl> + for ( int i = 0 ; i < 5 ; i + + ) { <nl> + / / ^ whitespace <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * bug 806243 ( NoWhitespaceBeforeCheck error for anonymous inner class ) * / <nl> + private int i ; <nl> + / / ^ whitespace <nl> + private int i1 , i2 , i3 ; <nl> + / / ^ whitespace <nl> + private int i4 , i5 , i6 ; <nl> + <nl> + / * * bug 806243 ( NoWhitespaceBeforeCheck error for anonymous inner class ) * / <nl> + void bug806243 ( ) <nl> + { <nl> + Object o = new InputNoWhitespaceAfter ( ) { <nl> + private int j ; <nl> + / / ^ whitespace <nl> + } ; <nl> + } <nl> + <nl> + void doStuff ( ) { <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Bug 806242 ( NoWhitespaceBeforeCheck error with an interface ) . <nl> + * @ author o _ sukhodolsky <nl> + * @ version 1 . 0 <nl> + * / <nl> + interface IFoo <nl> + { <nl> + void foo ( ) ; <nl> + / / ^ whitespace <nl> + } <nl> + <nl> + / * * <nl> + * Avoid Whitespace errors in for loop . <nl> + * @ author lkuehne <nl> + * @ version 1 . 0 <nl> + * / <nl> + class SpecialCasesInForLoop <nl> + { <nl> + void forIterator ( ) <nl> + { <nl> + / / avoid conflict between WhiteSpaceAfter ' ; ' and ParenPad ( nospace ) <nl> + for ( int i = 0 ; i + + < 5 ; ) { <nl> + 	 / / ^ no whitespace <nl> + 	 } <nl> + <nl> + / / bug 895072 <nl> + 	 / / avoid confilct between ParenPad ( space ) and NoWhiteSpace before ' ; ' <nl> + 	 int i = 0 ; <nl> + 	 for ( ; i < 5 ; i + + ) { <nl> + 	 / / ^ whitespace <nl> + 	 } <nl> + for ( int anInt : getSomeInts ( ) ) { <nl> + / / Should be ignored <nl> + } <nl> + } <nl> + <nl> + int [ ] getSomeInts ( ) { <nl> + int i = ( int ) ( 2 / 3 ) ; <nl> + return null ; <nl> + } <nl> + <nl> + public void myMethod ( ) { <nl> + new Thread ( ) { <nl> + public void run ( ) { <nl> + } <nl> + } . start ( ) ; <nl> + } <nl> + <nl> + public void foo ( java . util . List < ? extends String [ ] > bar , Comparable < ? super Object [ ] > baz ) { } <nl> + <nl> + public void mySuperMethod ( ) { <nl> + Runnable [ ] runs = new Runnable [ ] { new Runnable ( ) { <nl> + public void run ( ) { <nl> + } <nl> + } , <nl> + new Runnable ( ) { <nl> + public void run ( ) { <nl> + } <nl> + } } ; <nl> + runs [ 0 ] <nl> + . <nl> + run ( ) <nl> + ; <nl> + } <nl> + <nl> + public void testNullSemi ( ) { <nl> + return ; <nl> + } <nl> + <nl> + public void register ( Object obj ) { } <nl> + <nl> + public void doSomething ( String args [ ] ) { <nl> + register ( boolean [ ] . class ) ; <nl> + register ( args ) ; <nl> + } <nl> + <nl> + public void parentheses ( ) { <nl> + testNullSemi <nl> + ( <nl> + ) <nl> + ; <nl> + } <nl> + <nl> + public static void testNoWhitespaceBeforeEllipses ( String . . . args ) { <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations . java <nl> new file mode 100644 <nl> index 0000000 . . e1fdeef <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations . java <nl> @ @ - 0 , 0 + 1 , 46 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespaceafter ; <nl> + <nl> + public class InputNoWhitespaceAfterArrayDeclarations <nl> + { <nl> + Object [ ] someStuff = { } ; / / Correct <nl> + Object [ ] someStuff1 = { } ; / / Incorrect <nl> + Object someStuff2 [ ] = { } ; / / Correct <nl> + Object someStuff3 [ ] = { } ; / / Incorrect <nl> + int [ ] a = { } ; / / Incorrect <nl> + String s [ ] = { } ; / / Incorrect <nl> + double d [ ] = { } ; / / Incorrect <nl> + char [ ] c = { } ; / / Correct <nl> + short sh [ ] = { } ; / / Correct <nl> + long [ ] l = { } ; / / Correct <nl> + byte b [ ] = { } ; / / Correct <nl> + int get ( ) [ ] { / / Incorrect <nl> + return a ; } <nl> + int [ ] receive ( ) { return a ; } / / Incorrect <nl> + int get1 ( int k , int c , int b ) [ ] { / / Incorrect <nl> + return null ; <nl> + } <nl> + private String [ ] getLines ( ) { / / Correct <nl> + return new String [ ] { / / Correct <nl> + " s " <nl> + } ; <nl> + } <nl> + String aOptions [ ] [ ] ; / / Correct <nl> + int [ ] [ ] [ ] abc ; / / Incorrect <nl> + int cba [ ] [ ] [ ] ; / / Incorrect <nl> + private String [ ] [ ] [ ] getSeveralLines ( ) { / / Correct <nl> + return new String [ ] [ ] [ ] { / / Incorrect <nl> + new String [ ] [ ] { / / Incorrect <nl> + new String [ ] { / / Correct <nl> + " s " <nl> + } <nl> + } <nl> + } ; <nl> + } <nl> + int ar [ ] = new int [ ] { 1 , 2 } ; / / Incorrect ( 2 warnings ) <nl> + private int [ ] [ ] [ ] getMultArray ( ) { / / Incorrect <nl> + return null ; <nl> + } <nl> + private long getLongMultArray ( int someParam , String value ) [ ] [ ] [ ] { / / Incorrect <nl> + return null ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations2 . java <nl> new file mode 100644 <nl> index 0000000 . . f632316 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations2 . java <nl> @ @ - 0 , 0 + 1 , 108 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespaceafter ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + <nl> + public class InputNoWhitespaceAfterArrayDeclarations2 <nl> + { <nl> + <nl> + public class A { <nl> + public int [ ] [ ] create ( int i , int j ) { <nl> + return new int [ 3 ] [ 3 ] ; / / incorrect , 12 : 30 <nl> + } <nl> + } <nl> + <nl> + public class B { <nl> + public int create ( int i , int j ) [ ] [ ] { / / incorrect , 17 : 40 <nl> + return new int [ 3 ] [ i + j ] ; / / incorrect , 18 : 27 <nl> + } <nl> + } <nl> + <nl> + public class C { <nl> + public int [ ] [ ] create ( int i , int j ) { <nl> + return new int [ i + j ] [ i + j ] ; / / correct <nl> + } <nl> + } <nl> + <nl> + public class D { <nl> + public int [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 29 : 23 <nl> + return new int [ i + j ] [ i + j ] [ 0 ] ; / / incorrect 30 : 27 , 38 , 51 <nl> + } <nl> + } <nl> + <nl> + public class E { <nl> + public int create ( int i , int j , int [ ] [ ] k ) [ ] [ ] [ ] { / / incorrect , 35 : 44 , 56 <nl> + int e [ ] [ ] [ ] = new int [ i + j ] [ 2 ] [ i + j ] ; / / incorrect , 36 : 18 , 23 , 43 <nl> + e [ 0 ] [ 1 ] [ 2 ] = 0 ; e [ 1 ] [ 1 ] [ 1 ] = 0 ; / / incorrect , 37 : 14 , 18 <nl> + return e ; <nl> + } <nl> + } <nl> + public static class F { <nl> + public static Integer [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 42 : 23 <nl> + int [ ] [ ] [ ] f = new int [ 0 ] [ 1 ] [ 2 ] ; <nl> + return new Integer [ i + j ] [ i + j ] [ 0 ] ; <nl> + } <nl> + } <nl> + public class G { <nl> + public List < String > [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 48 : 28 , 31 , 34 <nl> + / / cannot build with this check - generic array creation error , but whitespaces still catched <nl> + / / List < String > g [ ] [ ] [ ] = new List < String > [ 0 ] [ 1 ] [ 2 ] ; / / incorrect 49 : 33 , 55 <nl> + / / return new List < String > [ i + j ] [ i + j ] [ 0 ] ; / / correct <nl> + int g [ ] [ ] [ ] = new int [ 0 ] [ 1 ] [ 2 ] ; <nl> + g [ 0 ] [ 0 ] [ 0 ] = 0 ; <nl> + g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 54 : 14 <nl> + g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 55 : 17 <nl> + g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 56 : 14 , 18 , 22 <nl> + return null ; <nl> + } <nl> + <nl> + } <nl> + public class H { <nl> + public List < Integer > create ( int i , int j ) [ ] [ ] [ ] { / / incorrect , 62 : 46 , 53 <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + Object someStuff4 = boolean [ ] . class ; / / incorrect , 67 : 32 <nl> + String [ ] [ ] someStuff5 = new String [ 4 ] [ 9 ] ; <nl> + String [ ] [ ] someStuff6 = ( java . lang . String [ ] [ ] ) someStuff5 ; / / incorrect , 69 : 46 , 50 <nl> + String [ ] [ ] someStuff7 = ( String [ ] [ ] ) someStuff5 ; / / incorrect , 70 : 36 <nl> + <nl> + / / this is legal until allowLineBreaks is set to false <nl> + int someStuff8 <nl> + [ ] ; <nl> + <nl> + / / this is legal until allowLineBreaks is set to false <nl> + int [ ] <nl> + someStuff81 ; <nl> + <nl> + / / incorrect 81 : 40 <nl> + Integer someStuff9 [ ] [ ] [ ] = ( Integer [ ] [ ] [ ] ) InputNoWhitespaceAfterArrayDeclarations2 . F . create ( 1 , 2 ) ; <nl> + <nl> + / / type arguments <nl> + List < char [ ] > someStuff10 ; / / correct <nl> + List < char [ ] [ ] > someStuff11 ; / / incorrect 85 : 14 <nl> + List < InputNoWhitespaceAfterArrayDeclarations2 . A [ ] > someStuff12 ; / / incorrect 86 : 52 <nl> + public void foo ( java . util . List < ? extends String [ ] > bar , Comparable < ? super Object [ ] > baz ) { } / / incorrect 87 : 86 <nl> + <nl> + Integer someStuff13 = F . create ( 1 , 1 ) [ 0 ] [ 0 ] [ 0 ] ; <nl> + Integer someStuff131 = F . create ( 1 , 1 ) [ 0 ] [ 0 ] [ 0 ] ; / / incorrect 90 : 41 , 49 <nl> + Object [ ] someStuff14 = ( Object [ ] ) null ; <nl> + Object [ ] someStuff15 = ( Object [ ] ) null ; / / incorrect 92 : 35 <nl> + <nl> + byte someStuff16 = ( ( byte [ ] ) someStuff4 ) [ 0 ] ; / / incorrect 94 : 45 <nl> + <nl> + public void bar ( ) { <nl> + if ( someStuff15 instanceof Object [ ] ) { / / incorrect 97 : 41 <nl> + <nl> + } <nl> + if ( someStuff15 instanceof Object [ ] [ ] ) { / / incorrect 100 : 43 <nl> + <nl> + } <nl> + if ( someStuff15 instanceof Object [ ] [ ] ) { <nl> + <nl> + } <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterFormerNpe . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterFormerNpe . java <nl> new file mode 100644 <nl> index 0000000 . . f470440 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterFormerNpe . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespaceafter ; <nl> + <nl> + public class InputNoWhitespaceAfterFormerNpe <nl> + { <nl> + private int [ ] getSome ( ) { <nl> + return new int [ 4 ] ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterMethodRef . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterMethodRef . java <nl> new file mode 100644 <nl> index 0000000 . . 2840e93 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterMethodRef . java <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespaceafter ; <nl> + <nl> + import java . util . function . Function ; <nl> + import java . util . function . IntFunction ; <nl> + <nl> + <nl> + public class InputNoWhitespaceAfterMethodRef <nl> + { <nl> + IntFunction < int [ ] > arrayMaker = int [ ] : : new ; / / incorrect 10 : 40 <nl> + Function < Integer , String [ ] > messageArrayFactory = String [ ] : : new ; / / incorrect 11 : 63 <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterSynchronized . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterSynchronized . java <nl> new file mode 100644 <nl> index 0000000 . . f2bd37e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterSynchronized . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespaceafter ; <nl> + <nl> + class InputNoWhitespaceAfterSynchronized { <nl> + void method2 ( ) <nl> + { <nl> + synchronized ( this ) { <nl> + } <nl> + } <nl> + <nl> + public void synchronzed ( ) { <nl> + synchronized ( this ) { } <nl> + synchronized <nl> + ( this ) { } <nl> + synchronized ( this ) { } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / xdocs / config _ metrics . xml b / src / xdocs / config _ metrics . xml <nl> index 7d21735 . . b1aa84d 100644 <nl> - - - a / src / xdocs / config _ metrics . xml <nl> + + + b / src / xdocs / config _ metrics . xml <nl> @ @ - 725 , 8 + 725 , 8 @ @ class SwitchExample { <nl> <nl> < table > <nl> < thead > < tr > < th > Structure < / th > < th > Complexity expression < / th > < / tr > < / thead > <nl> - < tr > < td > if ( [ expr ] ) { [ if - range ] } < / td > < td > NP ( if - range ) + NP ( expr ) + 1 < / td > < / tr > <nl> - < tr > < td > if [ expr ] { [ if - range ] } esle { [ else - range ] } < / td > < td > NP ( if - range ) + NP ( expr ) + NP ( else - range ) < / td > < / tr > <nl> + < tr > < td > if ( [ expr ] ) { [ if - range ] } < / td > < td > NP ( if - range ) + 1 + NP ( expr ) < / td > < / tr > <nl> + < tr > < td > if [ expr ] { [ if - range ] } esle { [ else - range ] } < / td > < td > NP ( if - range ) + NP ( else - range ) + NP ( expr ) < / td > < / tr > <nl> < tr > < td > while ( [ expr ] ) { [ while - range ] } < / td > < td > NP ( while - range ) + NP ( expr ) + 1 < / td > < / tr > <nl> < tr > < td > do { [ do - range ] } while ( [ expr ] ) < / td > < td > NP ( do - range ) + NP ( expr ) + 1 < / td > < / tr > <nl> < tr > < td > for ( [ expr1 ] ; [ expr2 ] ; [ expr3 ] ) { [ for - range ] } < / td > < td > NP ( for - range ) + NP ( expr1 ) + NP ( expr2 ) + NP ( expr3 ) + 1 < / td > < / tr >

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java 
 index 34407fe . . cf8398b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / NoWhitespaceAfterCheckTest . java 
 @ @ - 42 , 7 + 42 , 9 @ @ public class NoWhitespaceAfterCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " whitespace " + File . separator + filename ) ; 
 + + " whitespace " + File . separator 
 + + " nowhitespaceafter " + File . separator 
 + + filename ) ; 
 } 
 
 @ Override 
 @ @ - 73 , 7 + 75 , 7 @ @ public class NoWhitespaceAfterCheckTest 
 " 136 : 12 : " + getCheckMessage ( MSG _ KEY , " . " ) , 
 " 264 : 2 : " + getCheckMessage ( MSG _ KEY , " . " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputWhitespace . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNoWhitespaceAfter . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 84 , 7 + 86 , 7 @ @ public class NoWhitespaceAfterCheckTest 
 " 129 : 24 : " + getCheckMessage ( MSG _ KEY , " . " ) , 
 " 136 : 12 : " + getCheckMessage ( MSG _ KEY , " . " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputWhitespace . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNoWhitespaceAfter . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 95 , 7 + 97 , 7 @ @ public class NoWhitespaceAfterCheckTest 
 " 89 : 23 : " + getCheckMessage ( MSG _ KEY , " ) " ) , 
 " 241 : 22 : " + getCheckMessage ( MSG _ KEY , " ) " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputWhitespace . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputNoWhitespaceAfter . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 184 , 7 + 186 , 7 @ @ public class NoWhitespaceAfterCheckTest 
 
 @ Test 
 public void testNpe ( ) throws Exception { 
 - verify ( checkConfig , getPath ( " InputNoWhiteSpaceAfterFormerNpe . java " ) ) ; 
 + verify ( checkConfig , getPath ( " InputNoWhitespaceAfterFormerNpe . java " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhiteSpaceAfterFormerNpe . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhiteSpaceAfterFormerNpe . java 
 deleted file mode 100644 
 index 722aab8 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhiteSpaceAfterFormerNpe . java 
 + + + / dev / null 
 @ @ - 1 , 8 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 - 
 - public class InputNoWhiteSpaceAfterFormerNpe 
 - { 
 - private int [ ] getSome ( ) { 
 - return new int [ 4 ] ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations . java 
 deleted file mode 100644 
 index a4942ff . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations . java 
 + + + / dev / null 
 @ @ - 1 , 46 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 - 
 - public class InputNoWhitespaceAfterArrayDeclarations 
 - { 
 - Object [ ] someStuff = { } ; / / Correct 
 - Object [ ] someStuff1 = { } ; / / Incorrect 
 - Object someStuff2 [ ] = { } ; / / Correct 
 - Object someStuff3 [ ] = { } ; / / Incorrect 
 - int [ ] a = { } ; / / Incorrect 
 - String s [ ] = { } ; / / Incorrect 
 - double d [ ] = { } ; / / Incorrect 
 - char [ ] c = { } ; / / Correct 
 - short sh [ ] = { } ; / / Correct 
 - long [ ] l = { } ; / / Correct 
 - byte b [ ] = { } ; / / Correct 
 - int get ( ) [ ] { / / Incorrect 
 - return a ; } 
 - int [ ] receive ( ) { return a ; } / / Incorrect 
 - int get1 ( int k , int c , int b ) [ ] { / / Incorrect 
 - return null ; 
 - } 
 - private String [ ] getLines ( ) { / / Correct 
 - return new String [ ] { / / Correct 
 - " s " 
 - } ; 
 - } 
 - String aOptions [ ] [ ] ; / / Correct 
 - int [ ] [ ] [ ] abc ; / / Incorrect 
 - int cba [ ] [ ] [ ] ; / / Incorrect 
 - private String [ ] [ ] [ ] getSeveralLines ( ) { / / Correct 
 - return new String [ ] [ ] [ ] { / / Incorrect 
 - new String [ ] [ ] { / / Incorrect 
 - new String [ ] { / / Correct 
 - " s " 
 - } 
 - } 
 - } ; 
 - } 
 - int ar [ ] = new int [ ] { 1 , 2 } ; / / Incorrect ( 2 warnings ) 
 - private int [ ] [ ] [ ] getMultArray ( ) { / / Incorrect 
 - return null ; 
 - } 
 - private long getLongMultArray ( int someParam , String value ) [ ] [ ] [ ] { / / Incorrect 
 - return null ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations2 . java 
 deleted file mode 100644 
 index 21dfb26 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterArrayDeclarations2 . java 
 + + + / dev / null 
 @ @ - 1 , 108 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 - 
 - import java . util . List ; 
 - 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - 
 - public class InputNoWhitespaceAfterArrayDeclarations2 
 - { 
 - 
 - public class A { 
 - public int [ ] [ ] create ( int i , int j ) { 
 - return new int [ 3 ] [ 3 ] ; / / incorrect , 12 : 30 
 - } 
 - } 
 - 
 - public class B { 
 - public int create ( int i , int j ) [ ] [ ] { / / incorrect , 17 : 40 
 - return new int [ 3 ] [ i + j ] ; / / incorrect , 18 : 27 
 - } 
 - } 
 - 
 - public class C { 
 - public int [ ] [ ] create ( int i , int j ) { 
 - return new int [ i + j ] [ i + j ] ; / / correct 
 - } 
 - } 
 - 
 - public class D { 
 - public int [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 29 : 23 
 - return new int [ i + j ] [ i + j ] [ 0 ] ; / / incorrect 30 : 27 , 38 , 51 
 - } 
 - } 
 - 
 - public class E { 
 - public int create ( int i , int j , int [ ] [ ] k ) [ ] [ ] [ ] { / / incorrect , 35 : 44 , 56 
 - int e [ ] [ ] [ ] = new int [ i + j ] [ 2 ] [ i + j ] ; / / incorrect , 36 : 18 , 23 , 43 
 - e [ 0 ] [ 1 ] [ 2 ] = 0 ; e [ 1 ] [ 1 ] [ 1 ] = 0 ; / / incorrect , 37 : 14 , 18 
 - return e ; 
 - } 
 - } 
 - public static class F { 
 - public static Integer [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 42 : 23 
 - int [ ] [ ] [ ] f = new int [ 0 ] [ 1 ] [ 2 ] ; 
 - return new Integer [ i + j ] [ i + j ] [ 0 ] ; 
 - } 
 - } 
 - public class G { 
 - public List < String > [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 48 : 28 , 31 , 34 
 - / / cannot build with this check - generic array creation error , but whitespaces still catched 
 - / / List < String > g [ ] [ ] [ ] = new List < String > [ 0 ] [ 1 ] [ 2 ] ; / / incorrect 49 : 33 , 55 
 - / / return new List < String > [ i + j ] [ i + j ] [ 0 ] ; / / correct 
 - int g [ ] [ ] [ ] = new int [ 0 ] [ 1 ] [ 2 ] ; 
 - g [ 0 ] [ 0 ] [ 0 ] = 0 ; 
 - g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 54 : 14 
 - g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 55 : 17 
 - g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 56 : 14 , 18 , 22 
 - return null ; 
 - } 
 - 
 - } 
 - public class H { 
 - public List < Integer > create ( int i , int j ) [ ] [ ] [ ] { / / incorrect , 62 : 46 , 53 
 - return null ; 
 - } 
 - } 
 - 
 - Object someStuff4 = boolean [ ] . class ; / / incorrect , 67 : 32 
 - String [ ] [ ] someStuff5 = new String [ 4 ] [ 9 ] ; 
 - String [ ] [ ] someStuff6 = ( java . lang . String [ ] [ ] ) someStuff5 ; / / incorrect , 69 : 46 , 50 
 - String [ ] [ ] someStuff7 = ( String [ ] [ ] ) someStuff5 ; / / incorrect , 70 : 36 
 - 
 - / / this is legal until allowLineBreaks is set to false 
 - int someStuff8 
 - [ ] ; 
 - 
 - / / this is legal until allowLineBreaks is set to false 
 - int [ ] 
 - someStuff81 ; 
 - 
 - / / incorrect 81 : 40 
 - Integer someStuff9 [ ] [ ] [ ] = ( Integer [ ] [ ] [ ] ) InputNoWhitespaceAfterArrayDeclarations2 . F . create ( 1 , 2 ) ; 
 - 
 - / / type arguments 
 - List < char [ ] > someStuff10 ; / / correct 
 - List < char [ ] [ ] > someStuff11 ; / / incorrect 85 : 14 
 - List < InputNoWhitespaceAfterArrayDeclarations2 . A [ ] > someStuff12 ; / / incorrect 86 : 52 
 - public void foo ( java . util . List < ? extends String [ ] > bar , Comparable < ? super Object [ ] > baz ) { } / / incorrect 87 : 86 
 - 
 - Integer someStuff13 = F . create ( 1 , 1 ) [ 0 ] [ 0 ] [ 0 ] ; 
 - Integer someStuff131 = F . create ( 1 , 1 ) [ 0 ] [ 0 ] [ 0 ] ; / / incorrect 90 : 41 , 49 
 - Object [ ] someStuff14 = ( Object [ ] ) null ; 
 - Object [ ] someStuff15 = ( Object [ ] ) null ; / / incorrect 92 : 35 
 - 
 - byte someStuff16 = ( ( byte [ ] ) someStuff4 ) [ 0 ] ; / / incorrect 94 : 45 
 - 
 - public void bar ( ) { 
 - if ( someStuff15 instanceof Object [ ] ) { / / incorrect 97 : 41 
 - 
 - } 
 - if ( someStuff15 instanceof Object [ ] [ ] ) { / / incorrect 100 : 43 
 - 
 - } 
 - if ( someStuff15 instanceof Object [ ] [ ] ) { 
 - 
 - } 
 - } 
 - 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterMethodRef . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterMethodRef . java 
 deleted file mode 100644 
 index c0e0b75 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterMethodRef . java 
 + + + / dev / null 
 @ @ - 1 , 11 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 - 
 - import java . util . function . Function ; 
 - import java . util . function . IntFunction ; 
 - 
 - 
 - public class InputNoWhitespaceAfterMethodRef 
 - { 
 - IntFunction < int [ ] > arrayMaker = int [ ] : : new ; / / incorrect 10 : 40 
 - Function < Integer , String [ ] > messageArrayFactory = String [ ] : : new ; / / incorrect 11 : 63 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterSynchronized . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterSynchronized . java 
 deleted file mode 100644 
 index 953b948 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputNoWhitespaceAfterSynchronized . java 
 + + + / dev / null 
 @ @ - 1 , 16 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 - 
 - class InputNoWhitespaceAfterSynchronized { 
 - void method2 ( ) 
 - { 
 - synchronized ( this ) { 
 - } 
 - } 
 - 
 - public void synchronzed ( ) { 
 - synchronized ( this ) { } 
 - synchronized 
 - ( this ) { } 
 - synchronized ( this ) { } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfter . java 
 new file mode 100644 
 index 0000000 . . ac31e2e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfter . java 
 @ @ - 0 , 0 + 1 , 289 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl 
 + . tools . 
 + checkstyle . checks . whitespace . nowhitespaceafter ; 
 + 
 + / * * 
 + * Class for testing whitespace issues . 
 + * error missing author tag 
 + * * / 
 + class InputNoWhitespaceAfter 
 + { 
 + / * * ignore assignment * * / 
 + private int mVar1 = 1 ; 
 + / * * ignore assignment * * / 
 + private int mVar2 = 1 ; 
 + / * * Should be ok * * / 
 + private int mVar3 = 1 ; 
 + 
 + / * * method * * / 
 + void method1 ( ) 
 + { 
 + final int a = 1 ; 
 + int b = 1 ; / / Ignore 1 
 + b = 1 ; / / Ignore 1 
 + b + = 1 ; / / Ignore 1 
 + b - = - 1 + ( + b ) ; / / Ignore 2 
 + b = b + + + b - - ; / / Ignore 1 
 + b = + + b - - - b ; / / Ignore 1 
 + } 
 + 
 + / * * method * * / 
 + void method2 ( ) 
 + { 
 + synchronized ( this ) { 
 + } 
 + try { 
 + } 
 + catch ( RuntimeException e ) { 
 + } 
 + } 
 + 
 + / * * 
 + skip blank lines between comment and code , 
 + should be ok 
 + * * / 
 + 
 + 
 + private int mVar4 = 1 ; 
 + 
 + 
 + / * * test WS after void return * / 
 + private void fastExit ( ) 
 + { 
 + boolean complicatedStuffNeeded = true ; 
 + if ( ! complicatedStuffNeeded ) 
 + { 
 + return ; / / should not complain about missing WS after return 
 + } 
 + else 
 + { 
 + / / do complicated stuff 
 + } 
 + } 
 + 
 + 
 + / * * test WS after non void return 
 + @ return 2 
 + * / 
 + private int nonVoid ( ) 
 + { 
 + if ( true ) 
 + { 
 + return ( 2 ) ; / / should complain about missing WS after return 
 + } 
 + else 
 + { 
 + return 2 ; / / this is ok 
 + } 
 + } 
 + 
 + / * * test casts * * / 
 + private void testCasts ( ) 
 + { 
 + Object o = ( Object ) new Object ( ) ; / / ok 
 + o = ( Object ) o ; / / error 
 + o = ( Object ) o ; / / ok 
 + o = ( Object ) 
 + o ; / / ok 
 + } 
 + 
 + / * * test questions * * / 
 + private void testQuestions ( ) 
 + { 
 + boolean b = ( 1 = = 2 ) ? true : false ; 
 + b = ( 1 = = 2 ) ? false : true ; 
 + } 
 + 
 + / * * star test * * / 
 + private void starTest ( ) 
 + { 
 + int x = 2 * 3 * 4 ; 
 + } 
 + 
 + / * * boolean test * * / 
 + private void boolTest ( ) 
 + { 
 + boolean a = true ; 
 + boolean x = ! a ; 
 + int z = ~ 1 + ~ 2 ; 
 + } 
 + 
 + / * * division test * * / 
 + private void divTest ( ) 
 + { 
 + int a = 4 % 2 ; 
 + int b = 4 % 2 ; 
 + int c = 4 % 2 ; 
 + int d = 4 % 2 ; 
 + int e = 4 / 2 ; 
 + int f = 4 / 2 ; 
 + int g = 4 / 2 ; 
 + int h = 4 / 2 ; 
 + } 
 + 
 + / * * @ return dot test * * / 
 + private java . lang . String dotTest ( ) 
 + { 
 + Object o = new java . lang . Object ( ) ; 
 + o . 
 + toString ( ) ; 
 + o 
 + . toString ( ) ; 
 + o . toString ( ) ; 
 + return o . toString ( ) ; 
 + } 
 + 
 + / * * assert statement test * / 
 + public void assertTest ( ) 
 + { 
 + / / OK 
 + assert true ; 
 + 
 + / / OK 
 + assert true : " Whups " ; 
 + 
 + / / evil colons , should be OK 
 + assert " OK " . equals ( null ) ? false : true : " Whups " ; 
 + 
 + / / missing WS around assert 
 + assert ( true ) ; 
 + 
 + / / missing WS around colon 
 + assert true : " Whups " ; 
 + } 
 + 
 + / * * another check * / 
 + void donBradman ( Runnable aRun ) 
 + { 
 + donBradman ( new Runnable ( ) { 
 + public void run ( ) { 
 + } 
 + } ) ; 
 + 
 + final Runnable r = new Runnable ( ) { 
 + public void run ( ) { 
 + } 
 + } ; 
 + } 
 + 
 + / * * rfe 521323 , detect whitespace before ' ; ' * / 
 + void rfe521323 ( ) 
 + { 
 + doStuff ( ) ; 
 + / / ^ whitespace 
 + for ( int i = 0 ; i < 5 ; i + + ) { 
 + / / ^ whitespace 
 + } 
 + } 
 + 
 + 
 + / * * bug 806243 ( NoWhitespaceBeforeCheck error for anonymous inner class ) * / 
 + private int i ; 
 + / / ^ whitespace 
 + private int i1 , i2 , i3 ; 
 + / / ^ whitespace 
 + private int i4 , i5 , i6 ; 
 + 
 + / * * bug 806243 ( NoWhitespaceBeforeCheck error for anonymous inner class ) * / 
 + void bug806243 ( ) 
 + { 
 + Object o = new InputNoWhitespaceAfter ( ) { 
 + private int j ; 
 + / / ^ whitespace 
 + } ; 
 + } 
 + 
 + void doStuff ( ) { 
 + } 
 + } 
 + 
 + / * * 
 + * Bug 806242 ( NoWhitespaceBeforeCheck error with an interface ) . 
 + * @ author o _ sukhodolsky 
 + * @ version 1 . 0 
 + * / 
 + interface IFoo 
 + { 
 + void foo ( ) ; 
 + / / ^ whitespace 
 + } 
 + 
 + / * * 
 + * Avoid Whitespace errors in for loop . 
 + * @ author lkuehne 
 + * @ version 1 . 0 
 + * / 
 + class SpecialCasesInForLoop 
 + { 
 + void forIterator ( ) 
 + { 
 + / / avoid conflict between WhiteSpaceAfter ' ; ' and ParenPad ( nospace ) 
 + for ( int i = 0 ; i + + < 5 ; ) { 
 + 	 / / ^ no whitespace 
 + 	 } 
 + 
 + / / bug 895072 
 + 	 / / avoid confilct between ParenPad ( space ) and NoWhiteSpace before ' ; ' 
 + 	 int i = 0 ; 
 + 	 for ( ; i < 5 ; i + + ) { 
 + 	 / / ^ whitespace 
 + 	 } 
 + for ( int anInt : getSomeInts ( ) ) { 
 + / / Should be ignored 
 + } 
 + } 
 + 
 + int [ ] getSomeInts ( ) { 
 + int i = ( int ) ( 2 / 3 ) ; 
 + return null ; 
 + } 
 + 
 + public void myMethod ( ) { 
 + new Thread ( ) { 
 + public void run ( ) { 
 + } 
 + } . start ( ) ; 
 + } 
 + 
 + public void foo ( java . util . List < ? extends String [ ] > bar , Comparable < ? super Object [ ] > baz ) { } 
 + 
 + public void mySuperMethod ( ) { 
 + Runnable [ ] runs = new Runnable [ ] { new Runnable ( ) { 
 + public void run ( ) { 
 + } 
 + } , 
 + new Runnable ( ) { 
 + public void run ( ) { 
 + } 
 + } } ; 
 + runs [ 0 ] 
 + . 
 + run ( ) 
 + ; 
 + } 
 + 
 + public void testNullSemi ( ) { 
 + return ; 
 + } 
 + 
 + public void register ( Object obj ) { } 
 + 
 + public void doSomething ( String args [ ] ) { 
 + register ( boolean [ ] . class ) ; 
 + register ( args ) ; 
 + } 
 + 
 + public void parentheses ( ) { 
 + testNullSemi 
 + ( 
 + ) 
 + ; 
 + } 
 + 
 + public static void testNoWhitespaceBeforeEllipses ( String . . . args ) { 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations . java 
 new file mode 100644 
 index 0000000 . . e1fdeef 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations . java 
 @ @ - 0 , 0 + 1 , 46 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespaceafter ; 
 + 
 + public class InputNoWhitespaceAfterArrayDeclarations 
 + { 
 + Object [ ] someStuff = { } ; / / Correct 
 + Object [ ] someStuff1 = { } ; / / Incorrect 
 + Object someStuff2 [ ] = { } ; / / Correct 
 + Object someStuff3 [ ] = { } ; / / Incorrect 
 + int [ ] a = { } ; / / Incorrect 
 + String s [ ] = { } ; / / Incorrect 
 + double d [ ] = { } ; / / Incorrect 
 + char [ ] c = { } ; / / Correct 
 + short sh [ ] = { } ; / / Correct 
 + long [ ] l = { } ; / / Correct 
 + byte b [ ] = { } ; / / Correct 
 + int get ( ) [ ] { / / Incorrect 
 + return a ; } 
 + int [ ] receive ( ) { return a ; } / / Incorrect 
 + int get1 ( int k , int c , int b ) [ ] { / / Incorrect 
 + return null ; 
 + } 
 + private String [ ] getLines ( ) { / / Correct 
 + return new String [ ] { / / Correct 
 + " s " 
 + } ; 
 + } 
 + String aOptions [ ] [ ] ; / / Correct 
 + int [ ] [ ] [ ] abc ; / / Incorrect 
 + int cba [ ] [ ] [ ] ; / / Incorrect 
 + private String [ ] [ ] [ ] getSeveralLines ( ) { / / Correct 
 + return new String [ ] [ ] [ ] { / / Incorrect 
 + new String [ ] [ ] { / / Incorrect 
 + new String [ ] { / / Correct 
 + " s " 
 + } 
 + } 
 + } ; 
 + } 
 + int ar [ ] = new int [ ] { 1 , 2 } ; / / Incorrect ( 2 warnings ) 
 + private int [ ] [ ] [ ] getMultArray ( ) { / / Incorrect 
 + return null ; 
 + } 
 + private long getLongMultArray ( int someParam , String value ) [ ] [ ] [ ] { / / Incorrect 
 + return null ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations2 . java 
 new file mode 100644 
 index 0000000 . . f632316 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterArrayDeclarations2 . java 
 @ @ - 0 , 0 + 1 , 108 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespaceafter ; 
 + 
 + import java . util . List ; 
 + 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + 
 + public class InputNoWhitespaceAfterArrayDeclarations2 
 + { 
 + 
 + public class A { 
 + public int [ ] [ ] create ( int i , int j ) { 
 + return new int [ 3 ] [ 3 ] ; / / incorrect , 12 : 30 
 + } 
 + } 
 + 
 + public class B { 
 + public int create ( int i , int j ) [ ] [ ] { / / incorrect , 17 : 40 
 + return new int [ 3 ] [ i + j ] ; / / incorrect , 18 : 27 
 + } 
 + } 
 + 
 + public class C { 
 + public int [ ] [ ] create ( int i , int j ) { 
 + return new int [ i + j ] [ i + j ] ; / / correct 
 + } 
 + } 
 + 
 + public class D { 
 + public int [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 29 : 23 
 + return new int [ i + j ] [ i + j ] [ 0 ] ; / / incorrect 30 : 27 , 38 , 51 
 + } 
 + } 
 + 
 + public class E { 
 + public int create ( int i , int j , int [ ] [ ] k ) [ ] [ ] [ ] { / / incorrect , 35 : 44 , 56 
 + int e [ ] [ ] [ ] = new int [ i + j ] [ 2 ] [ i + j ] ; / / incorrect , 36 : 18 , 23 , 43 
 + e [ 0 ] [ 1 ] [ 2 ] = 0 ; e [ 1 ] [ 1 ] [ 1 ] = 0 ; / / incorrect , 37 : 14 , 18 
 + return e ; 
 + } 
 + } 
 + public static class F { 
 + public static Integer [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 42 : 23 
 + int [ ] [ ] [ ] f = new int [ 0 ] [ 1 ] [ 2 ] ; 
 + return new Integer [ i + j ] [ i + j ] [ 0 ] ; 
 + } 
 + } 
 + public class G { 
 + public List < String > [ ] [ ] [ ] create ( int i , int j ) { / / incorrect , 48 : 28 , 31 , 34 
 + / / cannot build with this check - generic array creation error , but whitespaces still catched 
 + / / List < String > g [ ] [ ] [ ] = new List < String > [ 0 ] [ 1 ] [ 2 ] ; / / incorrect 49 : 33 , 55 
 + / / return new List < String > [ i + j ] [ i + j ] [ 0 ] ; / / correct 
 + int g [ ] [ ] [ ] = new int [ 0 ] [ 1 ] [ 2 ] ; 
 + g [ 0 ] [ 0 ] [ 0 ] = 0 ; 
 + g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 54 : 14 
 + g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 55 : 17 
 + g [ 0 ] [ 0 ] [ 0 ] = 0 ; / / incorrect 56 : 14 , 18 , 22 
 + return null ; 
 + } 
 + 
 + } 
 + public class H { 
 + public List < Integer > create ( int i , int j ) [ ] [ ] [ ] { / / incorrect , 62 : 46 , 53 
 + return null ; 
 + } 
 + } 
 + 
 + Object someStuff4 = boolean [ ] . class ; / / incorrect , 67 : 32 
 + String [ ] [ ] someStuff5 = new String [ 4 ] [ 9 ] ; 
 + String [ ] [ ] someStuff6 = ( java . lang . String [ ] [ ] ) someStuff5 ; / / incorrect , 69 : 46 , 50 
 + String [ ] [ ] someStuff7 = ( String [ ] [ ] ) someStuff5 ; / / incorrect , 70 : 36 
 + 
 + / / this is legal until allowLineBreaks is set to false 
 + int someStuff8 
 + [ ] ; 
 + 
 + / / this is legal until allowLineBreaks is set to false 
 + int [ ] 
 + someStuff81 ; 
 + 
 + / / incorrect 81 : 40 
 + Integer someStuff9 [ ] [ ] [ ] = ( Integer [ ] [ ] [ ] ) InputNoWhitespaceAfterArrayDeclarations2 . F . create ( 1 , 2 ) ; 
 + 
 + / / type arguments 
 + List < char [ ] > someStuff10 ; / / correct 
 + List < char [ ] [ ] > someStuff11 ; / / incorrect 85 : 14 
 + List < InputNoWhitespaceAfterArrayDeclarations2 . A [ ] > someStuff12 ; / / incorrect 86 : 52 
 + public void foo ( java . util . List < ? extends String [ ] > bar , Comparable < ? super Object [ ] > baz ) { } / / incorrect 87 : 86 
 + 
 + Integer someStuff13 = F . create ( 1 , 1 ) [ 0 ] [ 0 ] [ 0 ] ; 
 + Integer someStuff131 = F . create ( 1 , 1 ) [ 0 ] [ 0 ] [ 0 ] ; / / incorrect 90 : 41 , 49 
 + Object [ ] someStuff14 = ( Object [ ] ) null ; 
 + Object [ ] someStuff15 = ( Object [ ] ) null ; / / incorrect 92 : 35 
 + 
 + byte someStuff16 = ( ( byte [ ] ) someStuff4 ) [ 0 ] ; / / incorrect 94 : 45 
 + 
 + public void bar ( ) { 
 + if ( someStuff15 instanceof Object [ ] ) { / / incorrect 97 : 41 
 + 
 + } 
 + if ( someStuff15 instanceof Object [ ] [ ] ) { / / incorrect 100 : 43 
 + 
 + } 
 + if ( someStuff15 instanceof Object [ ] [ ] ) { 
 + 
 + } 
 + } 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterFormerNpe . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterFormerNpe . java 
 new file mode 100644 
 index 0000000 . . f470440 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterFormerNpe . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespaceafter ; 
 + 
 + public class InputNoWhitespaceAfterFormerNpe 
 + { 
 + private int [ ] getSome ( ) { 
 + return new int [ 4 ] ; 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterMethodRef . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterMethodRef . java 
 new file mode 100644 
 index 0000000 . . 2840e93 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterMethodRef . java 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespaceafter ; 
 + 
 + import java . util . function . Function ; 
 + import java . util . function . IntFunction ; 
 + 
 + 
 + public class InputNoWhitespaceAfterMethodRef 
 + { 
 + IntFunction < int [ ] > arrayMaker = int [ ] : : new ; / / incorrect 10 : 40 
 + Function < Integer , String [ ] > messageArrayFactory = String [ ] : : new ; / / incorrect 11 : 63 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterSynchronized . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterSynchronized . java 
 new file mode 100644 
 index 0000000 . . f2bd37e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / nowhitespaceafter / InputNoWhitespaceAfterSynchronized . java 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . nowhitespaceafter ; 
 + 
 + class InputNoWhitespaceAfterSynchronized { 
 + void method2 ( ) 
 + { 
 + synchronized ( this ) { 
 + } 
 + } 
 + 
 + public void synchronzed ( ) { 
 + synchronized ( this ) { } 
 + synchronized 
 + ( this ) { } 
 + synchronized ( this ) { } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / xdocs / config _ metrics . xml b / src / xdocs / config _ metrics . xml 
 index 7d21735 . . b1aa84d 100644 
 - - - a / src / xdocs / config _ metrics . xml 
 + + + b / src / xdocs / config _ metrics . xml 
 @ @ - 725 , 8 + 725 , 8 @ @ class SwitchExample { 
 
 < table > 
 < thead > < tr > < th > Structure < / th > < th > Complexity expression < / th > < / tr > < / thead > 
 - < tr > < td > if ( [ expr ] ) { [ if - range ] } < / td > < td > NP ( if - range ) + NP ( expr ) + 1 < / td > < / tr > 
 - < tr > < td > if [ expr ] { [ if - range ] } esle { [ else - range ] } < / td > < td > NP ( if - range ) + NP ( expr ) + NP ( else - range ) < / td > < / tr > 
 + < tr > < td > if ( [ expr ] ) { [ if - range ] } < / td > < td > NP ( if - range ) + 1 + NP ( expr ) < / td > < / tr > 
 + < tr > < td > if [ expr ] { [ if - range ] } esle { [ else - range ] } < / td > < td > NP ( if - range ) + NP ( else - range ) + NP ( expr ) < / td > < / tr > 
 < tr > < td > while ( [ expr ] ) { [ while - range ] } < / td > < td > NP ( while - range ) + NP ( expr ) + 1 < / td > < / tr > 
 < tr > < td > do { [ do - range ] } while ( [ expr ] ) < / td > < td > NP ( do - range ) + NP ( expr ) + 1 < / td > < / tr > 
 < tr > < td > for ( [ expr1 ] ; [ expr2 ] ; [ expr3 ] ) { [ for - range ] } < / td > < td > NP ( for - range ) + NP ( expr1 ) + NP ( expr2 ) + NP ( expr3 ) + 1 < / td > < / tr >
