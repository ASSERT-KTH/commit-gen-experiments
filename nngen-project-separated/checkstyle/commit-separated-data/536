BLEU SCORE: 0.5706745777055999

TEST MSG: Issue # 4917 : Remove thread - unsafe context from the AbstractFileSetCheck
GENERATED MSG: Issue # 4908 : Remove thread - unsafe context from AbstractCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> index 54541f0 . . 57b9cca 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java <nl> @ @ - 37 , 8 + 37 , 11 @ @ public abstract class AbstractFileSetCheck <nl> extends AbstractViolationReporter <nl> implements FileSetCheck { <nl> <nl> - / * * Collects the error messages . * / <nl> - private final SortedSet < LocalizedMessage > messageCollector = new TreeSet < > ( ) ; <nl> + / * * <nl> + * Collects the error messages . <nl> + * / <nl> + private static final ThreadLocal < SortedSet < LocalizedMessage > > MESSAGE _ COLLECTOR = <nl> + ThreadLocal . withInitial ( TreeSet : : new ) ; <nl> <nl> / * * The dispatcher errors are fired to . * / <nl> private MessageDispatcher messageDispatcher ; <nl> @ @ - 73 , 12 + 76 , 12 @ @ public abstract class AbstractFileSetCheck <nl> @ Override <nl> public final SortedSet < LocalizedMessage > process ( File file , FileText fileText ) <nl> throws CheckstyleException { <nl> - messageCollector . clear ( ) ; <nl> + MESSAGE _ COLLECTOR . get ( ) . clear ( ) ; <nl> / / Process only what interested in <nl> if ( CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { <nl> processFiltered ( file , fileText ) ; <nl> } <nl> - return new TreeSet < > ( messageCollector ) ; <nl> + return new TreeSet < > ( MESSAGE _ COLLECTOR . get ( ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 138 , 8 + 141 , 8 @ @ public abstract class AbstractFileSetCheck <nl> * Adds the sorted set of { @ link LocalizedMessage } to the message collector . <nl> * @ param messages the sorted set of { @ link LocalizedMessage } . <nl> * / <nl> - protected final void addMessages ( SortedSet < LocalizedMessage > messages ) { <nl> - messageCollector . addAll ( messages ) ; <nl> + protected static void addMessages ( SortedSet < LocalizedMessage > messages ) { <nl> + MESSAGE _ COLLECTOR . get ( ) . addAll ( messages ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 150 , 7 + 153 , 7 @ @ public abstract class AbstractFileSetCheck <nl> @ Override <nl> public final void log ( int lineNo , int colNo , String key , <nl> Object . . . args ) { <nl> - messageCollector . add ( <nl> + MESSAGE _ COLLECTOR . get ( ) . add ( <nl> new LocalizedMessage ( lineNo , <nl> colNo , <nl> getMessageBundle ( ) , <nl> @ @ - 169 , 8 + 172 , 8 @ @ public abstract class AbstractFileSetCheck <nl> * @ param fileName the audited file <nl> * / <nl> protected final void fireErrors ( String fileName ) { <nl> - final SortedSet < LocalizedMessage > errors = new TreeSet < > ( messageCollector ) ; <nl> - messageCollector . clear ( ) ; <nl> + final SortedSet < LocalizedMessage > errors = new TreeSet < > ( MESSAGE _ COLLECTOR . get ( ) ) ; <nl> + MESSAGE _ COLLECTOR . get ( ) . clear ( ) ; <nl> messageDispatcher . fireErrors ( fileName , errors ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> index 5a7e823 . . 5f58acf 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java <nl> @ @ - 24 , 8 + 24 , 13 @ @ import java . io . OutputStreamWriter ; <nl> import java . io . PrintWriter ; <nl> import java . io . StringWriter ; <nl> import java . nio . charset . StandardCharsets ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> import java . util . Locale ; <nl> + import java . util . Map ; <nl> import java . util . ResourceBundle ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditListener ; <nl> @ @ - 59 , 7 + 64 , 16 @ @ public class XMLLogger <nl> / * * Close output stream in auditFinished . * / <nl> private final boolean closeStream ; <nl> <nl> - / * * Helper writer that allows easy encoding and printing . * / <nl> + / * * The writer lock object . * / <nl> + private final Object writerLock = new Object ( ) ; <nl> + <nl> + / * * Holds all messages for the given file . * / <nl> + private final Map < String , FileMessages > fileMessages = <nl> + new ConcurrentHashMap < > ( ) ; <nl> + <nl> + / * * <nl> + * Helper writer that allows easy encoding and printing . <nl> + * / <nl> private PrintWriter writer ; <nl> <nl> / * * <nl> @ @ - 110 , 6 + 124 , 9 @ @ public class XMLLogger <nl> <nl> @ Override <nl> public void auditFinished ( AuditEvent event ) { <nl> + fileMessages . forEach ( this : : writeFileMessages ) ; <nl> + fileMessages . clear ( ) ; <nl> + <nl> writer . println ( " < / checkstyle > " ) ; <nl> if ( closeStream ) { <nl> writer . close ( ) ; <nl> @ @ - 121 , 40 + 138 , 116 @ @ public class XMLLogger <nl> <nl> @ Override <nl> public void fileStarted ( AuditEvent event ) { <nl> - writer . println ( " < file name = \ " " + encode ( event . getFileName ( ) ) + " \ " > " ) ; <nl> + fileMessages . put ( event . getFileName ( ) , new FileMessages ( ) ) ; <nl> } <nl> <nl> @ Override <nl> public void fileFinished ( AuditEvent event ) { <nl> + final String fileName = event . getFileName ( ) ; <nl> + final FileMessages messages = fileMessages . get ( fileName ) ; <nl> + <nl> + synchronized ( writerLock ) { <nl> + writeFileMessages ( fileName , messages ) ; <nl> + } <nl> + <nl> + fileMessages . remove ( fileName ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Prints the file section with all file errors and exceptions . <nl> + * @ param fileName The file name , as should be printed in the opening file tag . <nl> + * @ param messages The file messages . <nl> + * / <nl> + private void writeFileMessages ( String fileName , FileMessages messages ) { <nl> + writeFileOpeningTag ( fileName ) ; <nl> + if ( messages ! = null ) { <nl> + for ( AuditEvent errorEvent : messages . getErrors ( ) ) { <nl> + writeFileError ( errorEvent ) ; <nl> + } <nl> + for ( Throwable exception : messages . getExceptions ( ) ) { <nl> + writeException ( exception ) ; <nl> + } <nl> + } <nl> + writeFileClosingTag ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Prints the " file " opening tag with the given filename . <nl> + * @ param fileName The filename to output . <nl> + * / <nl> + private void writeFileOpeningTag ( String fileName ) { <nl> + writer . println ( " < file name = \ " " + encode ( fileName ) + " \ " > " ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Prints the " file " closing tag . <nl> + * / <nl> + private void writeFileClosingTag ( ) { <nl> writer . println ( " < / file > " ) ; <nl> } <nl> <nl> @ Override <nl> public void addError ( AuditEvent event ) { <nl> if ( event . getSeverityLevel ( ) ! = SeverityLevel . IGNORE ) { <nl> - writer . print ( " < error " + " line = \ " " + event . getLine ( ) + " \ " " ) ; <nl> - if ( event . getColumn ( ) > 0 ) { <nl> - writer . print ( " column = \ " " + event . getColumn ( ) + " \ " " ) ; <nl> + final String fileName = event . getFileName ( ) ; <nl> + if ( fileName = = null ) { <nl> + synchronized ( writerLock ) { <nl> + writeFileError ( event ) ; <nl> + } <nl> + } <nl> + else { <nl> + final FileMessages messages = fileMessages . computeIfAbsent ( <nl> + fileName , name - > new FileMessages ( ) ) ; <nl> + messages . addError ( event ) ; <nl> } <nl> - writer . print ( " severity = \ " " <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Outputs the given envet to the writer . <nl> + * @ param event An event to print . <nl> + * / <nl> + private void writeFileError ( AuditEvent event ) { <nl> + writer . print ( " < error " + " line = \ " " + event . getLine ( ) + " \ " " ) ; <nl> + if ( event . getColumn ( ) > 0 ) { <nl> + writer . print ( " column = \ " " + event . getColumn ( ) + " \ " " ) ; <nl> + } <nl> + writer . print ( " severity = \ " " <nl> + event . getSeverityLevel ( ) . getName ( ) <nl> + " \ " " ) ; <nl> - writer . print ( " message = \ " " <nl> + writer . print ( " message = \ " " <nl> + encode ( event . getMessage ( ) ) <nl> + " \ " " ) ; <nl> - writer . print ( " source = \ " " ) ; <nl> - if ( event . getModuleId ( ) = = null ) { <nl> - writer . print ( encode ( event . getSourceName ( ) ) ) ; <nl> - } <nl> - else { <nl> - writer . print ( encode ( event . getModuleId ( ) ) ) ; <nl> - } <nl> - writer . println ( " \ " / > " ) ; <nl> + writer . print ( " source = \ " " ) ; <nl> + if ( event . getModuleId ( ) = = null ) { <nl> + writer . print ( encode ( event . getSourceName ( ) ) ) ; <nl> + } <nl> + else { <nl> + writer . print ( encode ( event . getModuleId ( ) ) ) ; <nl> } <nl> + writer . println ( " \ " / > " ) ; <nl> } <nl> <nl> @ Override <nl> public void addException ( AuditEvent event , Throwable throwable ) { <nl> + final String fileName = event . getFileName ( ) ; <nl> + if ( fileName = = null ) { <nl> + synchronized ( writerLock ) { <nl> + writeException ( throwable ) ; <nl> + } <nl> + } <nl> + else { <nl> + final FileMessages messages = fileMessages . computeIfAbsent ( <nl> + fileName , name - > new FileMessages ( ) ) ; <nl> + messages . addException ( throwable ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Writes the exception event to the print writer . <nl> + * @ param throwable The <nl> + * / <nl> + private void writeException ( Throwable throwable ) { <nl> final StringWriter stringWriter = new StringWriter ( ) ; <nl> final PrintWriter printer = new PrintWriter ( stringWriter ) ; <nl> printer . println ( " < exception > " ) ; <nl> @ @ - 262 , 4 + 355 , 47 @ @ public class XMLLogger <nl> } <nl> return result ; <nl> } <nl> + <nl> + / * * <nl> + * The registered file messages . <nl> + * / <nl> + private static class FileMessages { <nl> + / * * The file error events . * / <nl> + private final List < AuditEvent > errors = Collections . synchronizedList ( new ArrayList < > ( ) ) ; <nl> + <nl> + / * * The file exceptions . * / <nl> + private final List < Throwable > exceptions = Collections . synchronizedList ( new ArrayList < > ( ) ) ; <nl> + <nl> + / * * <nl> + * Returns the file error events . <nl> + * @ return the file error events . <nl> + * / <nl> + public List < AuditEvent > getErrors ( ) { <nl> + return Collections . unmodifiableList ( errors ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds the given error event to the messages . <nl> + * @ param event the error event . <nl> + * / <nl> + public void addError ( AuditEvent event ) { <nl> + errors . add ( event ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the file exceptions . <nl> + * @ return the file exceptions . <nl> + * / <nl> + public List < Throwable > getExceptions ( ) { <nl> + return Collections . unmodifiableList ( exceptions ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds the given exception to the messages . <nl> + * @ param throwable the file exception <nl> + * / <nl> + public void addException ( Throwable throwable ) { <nl> + exceptions . add ( throwable ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> index 8612210 . . 4d54fdb 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java <nl> @ @ - 140 , 7 + 140 , 10 @ @ public class XMLLoggerTest { <nl> final AuditEvent ev = new AuditEvent ( this , " Test . java " ) ; <nl> logger . fileStarted ( ev ) ; <nl> logger . auditFinished ( null ) ; <nl> - final String [ ] expectedLines = { " < file name = \ " Test . java \ " > " } ; <nl> + final String [ ] expectedLines = { <nl> + " < file name = \ " Test . java \ " > " , <nl> + " < / file > " , <nl> + } ; <nl> verifyLines ( expectedLines ) ; <nl> } <nl> <nl> @ @ - 152 , 7 + 155 , 10 @ @ public class XMLLoggerTest { <nl> final AuditEvent ev = new AuditEvent ( this , " Test . java " ) ; <nl> logger . fileFinished ( ev ) ; <nl> logger . auditFinished ( null ) ; <nl> - final String [ ] expectedLines = { " < / file > " } ; <nl> + final String [ ] expectedLines = { <nl> + " < file name = \ " Test . java \ " > " , <nl> + " < / file > " , <nl> + } ; <nl> verifyLines ( expectedLines ) ; <nl> } <nl> <nl> @ @ - 168 , 6 + 174 , 26 @ @ public class XMLLoggerTest { <nl> logger . addError ( ev ) ; <nl> logger . auditFinished ( null ) ; <nl> final String [ ] expectedLines = { <nl> + " < file name = \ " Test . java \ " > " , <nl> + " < error line = \ " 1 \ " column = \ " 1 \ " severity = \ " error \ " message = \ " key \ " " <nl> + + " source = \ " com . puppycrawl . tools . checkstyle . XMLLoggerTest \ " / > " , <nl> + " < / file > " , <nl> + } ; <nl> + verifyLines ( expectedLines ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAddErrorWithNullFileName ( ) throws IOException { <nl> + final XMLLogger logger = new XMLLogger ( outStream , true ) ; <nl> + logger . auditStarted ( null ) ; <nl> + final LocalizedMessage message = <nl> + new LocalizedMessage ( 1 , 1 , <nl> + " messages . properties " , " key " , null , SeverityLevel . ERROR , null , <nl> + getClass ( ) , null ) ; <nl> + final AuditEvent ev = new AuditEvent ( this , null , message ) ; <nl> + logger . addError ( ev ) ; <nl> + logger . auditFinished ( null ) ; <nl> + final String [ ] expectedLines = { <nl> " < error line = \ " 1 \ " column = \ " 1 \ " severity = \ " error \ " message = \ " key \ " " <nl> + " source = \ " com . puppycrawl . tools . checkstyle . XMLLoggerTest \ " / > " , <nl> } ; <nl> @ @ - 186 , 8 + 212 , 10 @ @ public class XMLLoggerTest { <nl> logger . addError ( ev ) ; <nl> logger . auditFinished ( null ) ; <nl> final String [ ] expectedLines = { <nl> + " < file name = \ " Test . java \ " > " , <nl> " < error line = \ " 1 \ " column = \ " 1 \ " severity = \ " error \ " message = \ " key \ " " <nl> + " source = \ " module \ " / > " , <nl> + " < / file > " , <nl> } ; <nl> verifyLines ( expectedLines ) ; <nl> } <nl> @ @ - 204 , 8 + 232 , 10 @ @ public class XMLLoggerTest { <nl> logger . addError ( ev ) ; <nl> logger . auditFinished ( null ) ; <nl> final String [ ] expectedLines = { <nl> + " < file name = \ " Test . java \ " > " , <nl> " < error line = \ " 1 \ " severity = \ " error \ " message = \ " key \ " " <nl> + " source = \ " com . puppycrawl . tools . checkstyle . XMLLoggerTest \ " / > " , <nl> + " < / file > " , <nl> } ; <nl> verifyLines ( expectedLines ) ; <nl> } <nl> @ @ - 237 , 6 + 267 , 28 @ @ public class XMLLoggerTest { <nl> logger . addException ( ev , new TestException ( " msg " , new RuntimeException ( " msg " ) ) ) ; <nl> logger . auditFinished ( null ) ; <nl> final String [ ] expectedLines = { <nl> + " < file name = \ " Test . java \ " > " , <nl> + " & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; " <nl> + + " & # 10 ; & lt ; / exception & gt ; & # 10 ; " , <nl> + " < / file > " , <nl> + } ; <nl> + <nl> + verifyLines ( expectedLines ) ; <nl> + assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAddExceptionWithNullFileName ( ) <nl> + throws IOException { <nl> + final XMLLogger logger = new XMLLogger ( outStream , true ) ; <nl> + logger . auditStarted ( null ) ; <nl> + final LocalizedMessage message = <nl> + new LocalizedMessage ( 1 , 1 , <nl> + " messages . properties " , null , null , null , getClass ( ) , null ) ; <nl> + final AuditEvent ev = new AuditEvent ( this , null , message ) ; <nl> + logger . addException ( ev , new TestException ( " msg " , new RuntimeException ( " msg " ) ) ) ; <nl> + logger . auditFinished ( null ) ; <nl> + final String [ ] expectedLines = { <nl> " & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; " <nl> + " & # 10 ; & lt ; / exception & gt ; & # 10 ; " , <nl> } ; <nl> @ @ - 245 , 6 + 297 , 107 @ @ public class XMLLoggerTest { <nl> assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testAddExceptionAfterFileStarted ( ) <nl> + throws IOException { <nl> + final XMLLogger logger = new XMLLogger ( outStream , true ) ; <nl> + logger . auditStarted ( null ) ; <nl> + <nl> + final AuditEvent fileStartedEvent = new AuditEvent ( this , " Test . java " ) ; <nl> + logger . fileStarted ( fileStartedEvent ) ; <nl> + <nl> + final LocalizedMessage message = <nl> + new LocalizedMessage ( 1 , 1 , <nl> + " messages . properties " , null , null , null , getClass ( ) , null ) ; <nl> + final AuditEvent ev = new AuditEvent ( this , " Test . java " , message ) ; <nl> + logger . addException ( ev , new TestException ( " msg " , new RuntimeException ( " msg " ) ) ) ; <nl> + <nl> + logger . auditFinished ( null ) ; <nl> + final String [ ] expectedLines = { <nl> + " < file name = \ " Test . java \ " > " , <nl> + " & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; " <nl> + + " & # 10 ; & lt ; / exception & gt ; & # 10 ; " , <nl> + " < / file > " , <nl> + } ; <nl> + <nl> + verifyLines ( expectedLines ) ; <nl> + assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAddExceptionBeforeFileFinished ( ) <nl> + throws IOException { <nl> + final XMLLogger logger = new XMLLogger ( outStream , true ) ; <nl> + logger . auditStarted ( null ) ; <nl> + final LocalizedMessage message = <nl> + new LocalizedMessage ( 1 , 1 , <nl> + " messages . properties " , null , null , null , getClass ( ) , null ) ; <nl> + final AuditEvent ev = new AuditEvent ( this , " Test . java " , message ) ; <nl> + logger . addException ( ev , new TestException ( " msg " , new RuntimeException ( " msg " ) ) ) ; <nl> + final AuditEvent fileFinishedEvent = new AuditEvent ( this , " Test . java " ) ; <nl> + logger . fileFinished ( fileFinishedEvent ) ; <nl> + logger . auditFinished ( null ) ; <nl> + final String [ ] expectedLines = { <nl> + " < file name = \ " Test . java \ " > " , <nl> + " & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; " <nl> + + " & # 10 ; & lt ; / exception & gt ; & # 10 ; " , <nl> + " < / file > " , <nl> + } ; <nl> + <nl> + verifyLines ( expectedLines ) ; <nl> + assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAddExceptionBetweenFileStartedAndFinished ( ) <nl> + throws IOException { <nl> + final XMLLogger logger = new XMLLogger ( outStream , true ) ; <nl> + logger . auditStarted ( null ) ; <nl> + final LocalizedMessage message = <nl> + new LocalizedMessage ( 1 , 1 , <nl> + " messages . properties " , null , null , null , getClass ( ) , null ) ; <nl> + final AuditEvent fileStartedEvent = new AuditEvent ( this , " Test . java " ) ; <nl> + logger . fileStarted ( fileStartedEvent ) ; <nl> + final AuditEvent ev = new AuditEvent ( this , " Test . java " , message ) ; <nl> + logger . addException ( ev , new TestException ( " msg " , new RuntimeException ( " msg " ) ) ) ; <nl> + final AuditEvent fileFinishedEvent = new AuditEvent ( this , " Test . java " ) ; <nl> + logger . fileFinished ( fileFinishedEvent ) ; <nl> + logger . auditFinished ( null ) ; <nl> + final String [ ] expectedLines = { <nl> + " < file name = \ " Test . java \ " > " , <nl> + " & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; " <nl> + + " & # 10 ; & lt ; / exception & gt ; & # 10 ; " , <nl> + " < / file > " , <nl> + } ; <nl> + <nl> + verifyLines ( expectedLines ) ; <nl> + assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAuditFinishedWithoutFileFinished ( ) throws IOException { <nl> + final XMLLogger logger = new XMLLogger ( outStream , true ) ; <nl> + logger . auditStarted ( null ) ; <nl> + final AuditEvent fileStartedEvent = new AuditEvent ( this , " Test . java " ) ; <nl> + logger . fileStarted ( fileStartedEvent ) ; <nl> + <nl> + final LocalizedMessage message = <nl> + new LocalizedMessage ( 1 , 1 , <nl> + " messages . properties " , " key " , null , SeverityLevel . ERROR , null , <nl> + getClass ( ) , null ) ; <nl> + final AuditEvent errorEvent = new AuditEvent ( this , " Test . java " , message ) ; <nl> + logger . addError ( errorEvent ) ; <nl> + <nl> + logger . auditFinished ( null ) ; <nl> + final String [ ] expectedLines = { <nl> + " < file name = \ " Test . java \ " > " , <nl> + " < error line = \ " 1 \ " column = \ " 1 \ " severity = \ " error \ " message = \ " key \ " " <nl> + + " source = \ " com . puppycrawl . tools . checkstyle . XMLLoggerTest \ " / > " , <nl> + " < / file > " , <nl> + } ; <nl> + verifyLines ( expectedLines ) ; <nl> + } <nl> + <nl> private String [ ] getOutStreamLines ( ) <nl> throws IOException { <nl> final byte [ ] bytes = outStream . toByteArray ( ) ;

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 index 54541f0 . . 57b9cca 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AbstractFileSetCheck . java 
 @ @ - 37 , 8 + 37 , 11 @ @ public abstract class AbstractFileSetCheck 
 extends AbstractViolationReporter 
 implements FileSetCheck { 
 
 - / * * Collects the error messages . * / 
 - private final SortedSet < LocalizedMessage > messageCollector = new TreeSet < > ( ) ; 
 + / * * 
 + * Collects the error messages . 
 + * / 
 + private static final ThreadLocal < SortedSet < LocalizedMessage > > MESSAGE _ COLLECTOR = 
 + ThreadLocal . withInitial ( TreeSet : : new ) ; 
 
 / * * The dispatcher errors are fired to . * / 
 private MessageDispatcher messageDispatcher ; 
 @ @ - 73 , 12 + 76 , 12 @ @ public abstract class AbstractFileSetCheck 
 @ Override 
 public final SortedSet < LocalizedMessage > process ( File file , FileText fileText ) 
 throws CheckstyleException { 
 - messageCollector . clear ( ) ; 
 + MESSAGE _ COLLECTOR . get ( ) . clear ( ) ; 
 / / Process only what interested in 
 if ( CommonUtils . matchesFileExtension ( file , fileExtensions ) ) { 
 processFiltered ( file , fileText ) ; 
 } 
 - return new TreeSet < > ( messageCollector ) ; 
 + return new TreeSet < > ( MESSAGE _ COLLECTOR . get ( ) ) ; 
 } 
 
 @ Override 
 @ @ - 138 , 8 + 141 , 8 @ @ public abstract class AbstractFileSetCheck 
 * Adds the sorted set of { @ link LocalizedMessage } to the message collector . 
 * @ param messages the sorted set of { @ link LocalizedMessage } . 
 * / 
 - protected final void addMessages ( SortedSet < LocalizedMessage > messages ) { 
 - messageCollector . addAll ( messages ) ; 
 + protected static void addMessages ( SortedSet < LocalizedMessage > messages ) { 
 + MESSAGE _ COLLECTOR . get ( ) . addAll ( messages ) ; 
 } 
 
 @ Override 
 @ @ - 150 , 7 + 153 , 7 @ @ public abstract class AbstractFileSetCheck 
 @ Override 
 public final void log ( int lineNo , int colNo , String key , 
 Object . . . args ) { 
 - messageCollector . add ( 
 + MESSAGE _ COLLECTOR . get ( ) . add ( 
 new LocalizedMessage ( lineNo , 
 colNo , 
 getMessageBundle ( ) , 
 @ @ - 169 , 8 + 172 , 8 @ @ public abstract class AbstractFileSetCheck 
 * @ param fileName the audited file 
 * / 
 protected final void fireErrors ( String fileName ) { 
 - final SortedSet < LocalizedMessage > errors = new TreeSet < > ( messageCollector ) ; 
 - messageCollector . clear ( ) ; 
 + final SortedSet < LocalizedMessage > errors = new TreeSet < > ( MESSAGE _ COLLECTOR . get ( ) ) ; 
 + MESSAGE _ COLLECTOR . get ( ) . clear ( ) ; 
 messageDispatcher . fireErrors ( fileName , errors ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 index 5a7e823 . . 5f58acf 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / XMLLogger . java 
 @ @ - 24 , 8 + 24 , 13 @ @ import java . io . OutputStreamWriter ; 
 import java . io . PrintWriter ; 
 import java . io . StringWriter ; 
 import java . nio . charset . StandardCharsets ; 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 import java . util . Locale ; 
 + import java . util . Map ; 
 import java . util . ResourceBundle ; 
 + import java . util . concurrent . ConcurrentHashMap ; 
 
 import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 import com . puppycrawl . tools . checkstyle . api . AuditListener ; 
 @ @ - 59 , 7 + 64 , 16 @ @ public class XMLLogger 
 / * * Close output stream in auditFinished . * / 
 private final boolean closeStream ; 
 
 - / * * Helper writer that allows easy encoding and printing . * / 
 + / * * The writer lock object . * / 
 + private final Object writerLock = new Object ( ) ; 
 + 
 + / * * Holds all messages for the given file . * / 
 + private final Map < String , FileMessages > fileMessages = 
 + new ConcurrentHashMap < > ( ) ; 
 + 
 + / * * 
 + * Helper writer that allows easy encoding and printing . 
 + * / 
 private PrintWriter writer ; 
 
 / * * 
 @ @ - 110 , 6 + 124 , 9 @ @ public class XMLLogger 
 
 @ Override 
 public void auditFinished ( AuditEvent event ) { 
 + fileMessages . forEach ( this : : writeFileMessages ) ; 
 + fileMessages . clear ( ) ; 
 + 
 writer . println ( " < / checkstyle > " ) ; 
 if ( closeStream ) { 
 writer . close ( ) ; 
 @ @ - 121 , 40 + 138 , 116 @ @ public class XMLLogger 
 
 @ Override 
 public void fileStarted ( AuditEvent event ) { 
 - writer . println ( " < file name = \ " " + encode ( event . getFileName ( ) ) + " \ " > " ) ; 
 + fileMessages . put ( event . getFileName ( ) , new FileMessages ( ) ) ; 
 } 
 
 @ Override 
 public void fileFinished ( AuditEvent event ) { 
 + final String fileName = event . getFileName ( ) ; 
 + final FileMessages messages = fileMessages . get ( fileName ) ; 
 + 
 + synchronized ( writerLock ) { 
 + writeFileMessages ( fileName , messages ) ; 
 + } 
 + 
 + fileMessages . remove ( fileName ) ; 
 + } 
 + 
 + / * * 
 + * Prints the file section with all file errors and exceptions . 
 + * @ param fileName The file name , as should be printed in the opening file tag . 
 + * @ param messages The file messages . 
 + * / 
 + private void writeFileMessages ( String fileName , FileMessages messages ) { 
 + writeFileOpeningTag ( fileName ) ; 
 + if ( messages ! = null ) { 
 + for ( AuditEvent errorEvent : messages . getErrors ( ) ) { 
 + writeFileError ( errorEvent ) ; 
 + } 
 + for ( Throwable exception : messages . getExceptions ( ) ) { 
 + writeException ( exception ) ; 
 + } 
 + } 
 + writeFileClosingTag ( ) ; 
 + } 
 + 
 + / * * 
 + * Prints the " file " opening tag with the given filename . 
 + * @ param fileName The filename to output . 
 + * / 
 + private void writeFileOpeningTag ( String fileName ) { 
 + writer . println ( " < file name = \ " " + encode ( fileName ) + " \ " > " ) ; 
 + } 
 + 
 + / * * 
 + * Prints the " file " closing tag . 
 + * / 
 + private void writeFileClosingTag ( ) { 
 writer . println ( " < / file > " ) ; 
 } 
 
 @ Override 
 public void addError ( AuditEvent event ) { 
 if ( event . getSeverityLevel ( ) ! = SeverityLevel . IGNORE ) { 
 - writer . print ( " < error " + " line = \ " " + event . getLine ( ) + " \ " " ) ; 
 - if ( event . getColumn ( ) > 0 ) { 
 - writer . print ( " column = \ " " + event . getColumn ( ) + " \ " " ) ; 
 + final String fileName = event . getFileName ( ) ; 
 + if ( fileName = = null ) { 
 + synchronized ( writerLock ) { 
 + writeFileError ( event ) ; 
 + } 
 + } 
 + else { 
 + final FileMessages messages = fileMessages . computeIfAbsent ( 
 + fileName , name - > new FileMessages ( ) ) ; 
 + messages . addError ( event ) ; 
 } 
 - writer . print ( " severity = \ " " 
 + } 
 + } 
 + 
 + / * * 
 + * Outputs the given envet to the writer . 
 + * @ param event An event to print . 
 + * / 
 + private void writeFileError ( AuditEvent event ) { 
 + writer . print ( " < error " + " line = \ " " + event . getLine ( ) + " \ " " ) ; 
 + if ( event . getColumn ( ) > 0 ) { 
 + writer . print ( " column = \ " " + event . getColumn ( ) + " \ " " ) ; 
 + } 
 + writer . print ( " severity = \ " " 
 + event . getSeverityLevel ( ) . getName ( ) 
 + " \ " " ) ; 
 - writer . print ( " message = \ " " 
 + writer . print ( " message = \ " " 
 + encode ( event . getMessage ( ) ) 
 + " \ " " ) ; 
 - writer . print ( " source = \ " " ) ; 
 - if ( event . getModuleId ( ) = = null ) { 
 - writer . print ( encode ( event . getSourceName ( ) ) ) ; 
 - } 
 - else { 
 - writer . print ( encode ( event . getModuleId ( ) ) ) ; 
 - } 
 - writer . println ( " \ " / > " ) ; 
 + writer . print ( " source = \ " " ) ; 
 + if ( event . getModuleId ( ) = = null ) { 
 + writer . print ( encode ( event . getSourceName ( ) ) ) ; 
 + } 
 + else { 
 + writer . print ( encode ( event . getModuleId ( ) ) ) ; 
 } 
 + writer . println ( " \ " / > " ) ; 
 } 
 
 @ Override 
 public void addException ( AuditEvent event , Throwable throwable ) { 
 + final String fileName = event . getFileName ( ) ; 
 + if ( fileName = = null ) { 
 + synchronized ( writerLock ) { 
 + writeException ( throwable ) ; 
 + } 
 + } 
 + else { 
 + final FileMessages messages = fileMessages . computeIfAbsent ( 
 + fileName , name - > new FileMessages ( ) ) ; 
 + messages . addException ( throwable ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Writes the exception event to the print writer . 
 + * @ param throwable The 
 + * / 
 + private void writeException ( Throwable throwable ) { 
 final StringWriter stringWriter = new StringWriter ( ) ; 
 final PrintWriter printer = new PrintWriter ( stringWriter ) ; 
 printer . println ( " < exception > " ) ; 
 @ @ - 262 , 4 + 355 , 47 @ @ public class XMLLogger 
 } 
 return result ; 
 } 
 + 
 + / * * 
 + * The registered file messages . 
 + * / 
 + private static class FileMessages { 
 + / * * The file error events . * / 
 + private final List < AuditEvent > errors = Collections . synchronizedList ( new ArrayList < > ( ) ) ; 
 + 
 + / * * The file exceptions . * / 
 + private final List < Throwable > exceptions = Collections . synchronizedList ( new ArrayList < > ( ) ) ; 
 + 
 + / * * 
 + * Returns the file error events . 
 + * @ return the file error events . 
 + * / 
 + public List < AuditEvent > getErrors ( ) { 
 + return Collections . unmodifiableList ( errors ) ; 
 + } 
 + 
 + / * * 
 + * Adds the given error event to the messages . 
 + * @ param event the error event . 
 + * / 
 + public void addError ( AuditEvent event ) { 
 + errors . add ( event ) ; 
 + } 
 + 
 + / * * 
 + * Returns the file exceptions . 
 + * @ return the file exceptions . 
 + * / 
 + public List < Throwable > getExceptions ( ) { 
 + return Collections . unmodifiableList ( exceptions ) ; 
 + } 
 + 
 + / * * 
 + * Adds the given exception to the messages . 
 + * @ param throwable the file exception 
 + * / 
 + public void addException ( Throwable throwable ) { 
 + exceptions . add ( throwable ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 index 8612210 . . 4d54fdb 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XMLLoggerTest . java 
 @ @ - 140 , 7 + 140 , 10 @ @ public class XMLLoggerTest { 
 final AuditEvent ev = new AuditEvent ( this , " Test . java " ) ; 
 logger . fileStarted ( ev ) ; 
 logger . auditFinished ( null ) ; 
 - final String [ ] expectedLines = { " < file name = \ " Test . java \ " > " } ; 
 + final String [ ] expectedLines = { 
 + " < file name = \ " Test . java \ " > " , 
 + " < / file > " , 
 + } ; 
 verifyLines ( expectedLines ) ; 
 } 
 
 @ @ - 152 , 7 + 155 , 10 @ @ public class XMLLoggerTest { 
 final AuditEvent ev = new AuditEvent ( this , " Test . java " ) ; 
 logger . fileFinished ( ev ) ; 
 logger . auditFinished ( null ) ; 
 - final String [ ] expectedLines = { " < / file > " } ; 
 + final String [ ] expectedLines = { 
 + " < file name = \ " Test . java \ " > " , 
 + " < / file > " , 
 + } ; 
 verifyLines ( expectedLines ) ; 
 } 
 
 @ @ - 168 , 6 + 174 , 26 @ @ public class XMLLoggerTest { 
 logger . addError ( ev ) ; 
 logger . auditFinished ( null ) ; 
 final String [ ] expectedLines = { 
 + " < file name = \ " Test . java \ " > " , 
 + " < error line = \ " 1 \ " column = \ " 1 \ " severity = \ " error \ " message = \ " key \ " " 
 + + " source = \ " com . puppycrawl . tools . checkstyle . XMLLoggerTest \ " / > " , 
 + " < / file > " , 
 + } ; 
 + verifyLines ( expectedLines ) ; 
 + } 
 + 
 + @ Test 
 + public void testAddErrorWithNullFileName ( ) throws IOException { 
 + final XMLLogger logger = new XMLLogger ( outStream , true ) ; 
 + logger . auditStarted ( null ) ; 
 + final LocalizedMessage message = 
 + new LocalizedMessage ( 1 , 1 , 
 + " messages . properties " , " key " , null , SeverityLevel . ERROR , null , 
 + getClass ( ) , null ) ; 
 + final AuditEvent ev = new AuditEvent ( this , null , message ) ; 
 + logger . addError ( ev ) ; 
 + logger . auditFinished ( null ) ; 
 + final String [ ] expectedLines = { 
 " < error line = \ " 1 \ " column = \ " 1 \ " severity = \ " error \ " message = \ " key \ " " 
 + " source = \ " com . puppycrawl . tools . checkstyle . XMLLoggerTest \ " / > " , 
 } ; 
 @ @ - 186 , 8 + 212 , 10 @ @ public class XMLLoggerTest { 
 logger . addError ( ev ) ; 
 logger . auditFinished ( null ) ; 
 final String [ ] expectedLines = { 
 + " < file name = \ " Test . java \ " > " , 
 " < error line = \ " 1 \ " column = \ " 1 \ " severity = \ " error \ " message = \ " key \ " " 
 + " source = \ " module \ " / > " , 
 + " < / file > " , 
 } ; 
 verifyLines ( expectedLines ) ; 
 } 
 @ @ - 204 , 8 + 232 , 10 @ @ public class XMLLoggerTest { 
 logger . addError ( ev ) ; 
 logger . auditFinished ( null ) ; 
 final String [ ] expectedLines = { 
 + " < file name = \ " Test . java \ " > " , 
 " < error line = \ " 1 \ " severity = \ " error \ " message = \ " key \ " " 
 + " source = \ " com . puppycrawl . tools . checkstyle . XMLLoggerTest \ " / > " , 
 + " < / file > " , 
 } ; 
 verifyLines ( expectedLines ) ; 
 } 
 @ @ - 237 , 6 + 267 , 28 @ @ public class XMLLoggerTest { 
 logger . addException ( ev , new TestException ( " msg " , new RuntimeException ( " msg " ) ) ) ; 
 logger . auditFinished ( null ) ; 
 final String [ ] expectedLines = { 
 + " < file name = \ " Test . java \ " > " , 
 + " & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; " 
 + + " & # 10 ; & lt ; / exception & gt ; & # 10 ; " , 
 + " < / file > " , 
 + } ; 
 + 
 + verifyLines ( expectedLines ) ; 
 + assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testAddExceptionWithNullFileName ( ) 
 + throws IOException { 
 + final XMLLogger logger = new XMLLogger ( outStream , true ) ; 
 + logger . auditStarted ( null ) ; 
 + final LocalizedMessage message = 
 + new LocalizedMessage ( 1 , 1 , 
 + " messages . properties " , null , null , null , getClass ( ) , null ) ; 
 + final AuditEvent ev = new AuditEvent ( this , null , message ) ; 
 + logger . addException ( ev , new TestException ( " msg " , new RuntimeException ( " msg " ) ) ) ; 
 + logger . auditFinished ( null ) ; 
 + final String [ ] expectedLines = { 
 " & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; " 
 + " & # 10 ; & lt ; / exception & gt ; & # 10 ; " , 
 } ; 
 @ @ - 245 , 6 + 297 , 107 @ @ public class XMLLoggerTest { 
 assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; 
 } 
 
 + @ Test 
 + public void testAddExceptionAfterFileStarted ( ) 
 + throws IOException { 
 + final XMLLogger logger = new XMLLogger ( outStream , true ) ; 
 + logger . auditStarted ( null ) ; 
 + 
 + final AuditEvent fileStartedEvent = new AuditEvent ( this , " Test . java " ) ; 
 + logger . fileStarted ( fileStartedEvent ) ; 
 + 
 + final LocalizedMessage message = 
 + new LocalizedMessage ( 1 , 1 , 
 + " messages . properties " , null , null , null , getClass ( ) , null ) ; 
 + final AuditEvent ev = new AuditEvent ( this , " Test . java " , message ) ; 
 + logger . addException ( ev , new TestException ( " msg " , new RuntimeException ( " msg " ) ) ) ; 
 + 
 + logger . auditFinished ( null ) ; 
 + final String [ ] expectedLines = { 
 + " < file name = \ " Test . java \ " > " , 
 + " & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; " 
 + + " & # 10 ; & lt ; / exception & gt ; & # 10 ; " , 
 + " < / file > " , 
 + } ; 
 + 
 + verifyLines ( expectedLines ) ; 
 + assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testAddExceptionBeforeFileFinished ( ) 
 + throws IOException { 
 + final XMLLogger logger = new XMLLogger ( outStream , true ) ; 
 + logger . auditStarted ( null ) ; 
 + final LocalizedMessage message = 
 + new LocalizedMessage ( 1 , 1 , 
 + " messages . properties " , null , null , null , getClass ( ) , null ) ; 
 + final AuditEvent ev = new AuditEvent ( this , " Test . java " , message ) ; 
 + logger . addException ( ev , new TestException ( " msg " , new RuntimeException ( " msg " ) ) ) ; 
 + final AuditEvent fileFinishedEvent = new AuditEvent ( this , " Test . java " ) ; 
 + logger . fileFinished ( fileFinishedEvent ) ; 
 + logger . auditFinished ( null ) ; 
 + final String [ ] expectedLines = { 
 + " < file name = \ " Test . java \ " > " , 
 + " & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; " 
 + + " & # 10 ; & lt ; / exception & gt ; & # 10 ; " , 
 + " < / file > " , 
 + } ; 
 + 
 + verifyLines ( expectedLines ) ; 
 + assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testAddExceptionBetweenFileStartedAndFinished ( ) 
 + throws IOException { 
 + final XMLLogger logger = new XMLLogger ( outStream , true ) ; 
 + logger . auditStarted ( null ) ; 
 + final LocalizedMessage message = 
 + new LocalizedMessage ( 1 , 1 , 
 + " messages . properties " , null , null , null , getClass ( ) , null ) ; 
 + final AuditEvent fileStartedEvent = new AuditEvent ( this , " Test . java " ) ; 
 + logger . fileStarted ( fileStartedEvent ) ; 
 + final AuditEvent ev = new AuditEvent ( this , " Test . java " , message ) ; 
 + logger . addException ( ev , new TestException ( " msg " , new RuntimeException ( " msg " ) ) ) ; 
 + final AuditEvent fileFinishedEvent = new AuditEvent ( this , " Test . java " ) ; 
 + logger . fileFinished ( fileFinishedEvent ) ; 
 + logger . auditFinished ( null ) ; 
 + final String [ ] expectedLines = { 
 + " < file name = \ " Test . java \ " > " , 
 + " & lt ; exception & gt ; & # 10 ; & lt ; ! [ CDATA [ & # 10 ; stackTrace & # 10 ; example ] ] & gt ; " 
 + + " & # 10 ; & lt ; / exception & gt ; & # 10 ; " , 
 + " < / file > " , 
 + } ; 
 + 
 + verifyLines ( expectedLines ) ; 
 + assertEquals ( " Invalid close count " , 1 , outStream . getCloseCount ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testAuditFinishedWithoutFileFinished ( ) throws IOException { 
 + final XMLLogger logger = new XMLLogger ( outStream , true ) ; 
 + logger . auditStarted ( null ) ; 
 + final AuditEvent fileStartedEvent = new AuditEvent ( this , " Test . java " ) ; 
 + logger . fileStarted ( fileStartedEvent ) ; 
 + 
 + final LocalizedMessage message = 
 + new LocalizedMessage ( 1 , 1 , 
 + " messages . properties " , " key " , null , SeverityLevel . ERROR , null , 
 + getClass ( ) , null ) ; 
 + final AuditEvent errorEvent = new AuditEvent ( this , " Test . java " , message ) ; 
 + logger . addError ( errorEvent ) ; 
 + 
 + logger . auditFinished ( null ) ; 
 + final String [ ] expectedLines = { 
 + " < file name = \ " Test . java \ " > " , 
 + " < error line = \ " 1 \ " column = \ " 1 \ " severity = \ " error \ " message = \ " key \ " " 
 + + " source = \ " com . puppycrawl . tools . checkstyle . XMLLoggerTest \ " / > " , 
 + " < / file > " , 
 + } ; 
 + verifyLines ( expectedLines ) ; 
 + } 
 + 
 private String [ ] getOutStreamLines ( ) 
 throws IOException { 
 final byte [ ] bytes = outStream . toByteArray ( ) ;
