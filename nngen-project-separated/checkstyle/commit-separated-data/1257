BLEU SCORE: 0.02383853510228548

TEST MSG: Issue # 2968 : adding more method references examples
GENERATED MSG: Issue10 . Annotations finished

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java <nl> index 63c079f . . 5a06491 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java <nl> @ @ - 90 , 6 + 90 , 15 @ @ public class MethodReferencesTest extends BaseCheckTestSupport { <nl> final DefaultConfiguration checkConfig = createCheckConfig ( MemberNameCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , getNonCompilablePath ( " InputMethodReferences6 . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMethodReferences7 ( ) <nl> + throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( MemberNameCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputMethodReferences7 . java " ) , expected ) ; <nl> <nl> } <nl> } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferences7 . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferences7 . java <nl> new file mode 100644 <nl> index 0000000 . . 5998d25 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferences7 . java <nl> @ @ - 0 , 0 + 1 , 53 @ @ <nl> + / / Compilable with Java8 <nl> + package com . puppycrawl . tools . checkstyle . grammars . java8 ; <nl> + <nl> + import java . lang . annotation . ElementType ; <nl> + import java . lang . annotation . Target ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + import java . util . function . Function ; <nl> + import java . util . function . Supplier ; <nl> + <nl> + public class InputMethodReferences7 { <nl> + interface LambdaInt { <nl> + < S , T > void m ( S p1 , T p2 ) ; <nl> + } <nl> + <nl> + interface MyFunctionalInterface { <nl> + void invokeMethodReference ( ) ; <nl> + } <nl> + <nl> + static class LambdaImpl implements LambdaInt { <nl> + < S , T > LambdaImpl ( S p1 , T p2 ) { <nl> + } <nl> + <nl> + public < S , T > void m ( S p1 , T p2 ) { <nl> + } <nl> + } <nl> + <nl> + public void m ( ) { <nl> + } <nl> + <nl> + public void main ( String [ ] args ) { <nl> + MyFunctionalInterface fi = new InputMethodReferences7 ( ) : : < Integer , String , Long > m ; <nl> + LambdaInt li = LambdaImpl : : < @ TA Object , @ TB Object > new ; <nl> + Supplier s = Bar : : < String > m ; <nl> + li = li : : < @ TA Object , @ TB Object > m ; <nl> + s = Bar : : < List < String > > m ; <nl> + s = Bar : : < List < List < ? > > > m ; <nl> + } <nl> + } <nl> + <nl> + class Bar < T > { <nl> + static Object m ( ) { <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + @ Target ( { ElementType . TYPE _ USE , ElementType . TYPE _ PARAMETER } ) <nl> + @ interface TA { <nl> + } <nl> + <nl> + @ Target ( { ElementType . TYPE _ USE , ElementType . TYPE _ PARAMETER } ) <nl> + @ interface TB { <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> index 9655dd9 . . fbae952 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java <nl> @ @ - 173 , 6 + 173 , 11 @ @ public class VariableDeclarationUsageDistanceCheck extends Check <nl> public static final String MSG _ KEY = " variable . declaration . usage . distance " ; <nl> <nl> / * * <nl> + * Warning message key . <nl> + * / <nl> + public static final String MSG _ KEY _ EXT = " variable . declaration . usage . distance . extend " ; <nl> + <nl> + / * * <nl> * Default value of distance between declaration of variable and its first <nl> * usage . <nl> * / <nl> @ @ - 275 , 8 + 280 , 14 @ @ public class VariableDeclarationUsageDistanceCheck extends Check <nl> if ( dist > mAllowedDistance <nl> & & ! isInitializationSequence ( variableUsageAst , variable . getText ( ) ) ) <nl> { <nl> - log ( variable . getLineNo ( ) , <nl> - MSG _ KEY , variable . getText ( ) , dist , mAllowedDistance ) ; <nl> + if ( mIgnoreFinal ) { <nl> + log ( variable . getLineNo ( ) , <nl> + MSG _ KEY _ EXT , variable . getText ( ) , dist , mAllowedDistance ) ; <nl> + } <nl> + else { <nl> + log ( variable . getLineNo ( ) , <nl> + MSG _ KEY , variable . getText ( ) , dist , mAllowedDistance ) ; <nl> + } <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> index 1abd0aa . . b9047f1 100644 <nl> - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties <nl> @ @ - 64 , 4 + 64 , 5 @ @ unnecessary . paren . return = Unnecessary parentheses around return value . <nl> unnecessary . paren . string = Unnecessary parentheses around string { 0 } . <nl> package . dir . mismatch = Package declaration does not match directory ' ' { 0 } ' ' . <nl> variable . declaration . usage . distance = Distance between variable ' ' { 0 } ' ' declaration and its first usage is { 1 } , but allowed { 2 } . <nl> + variable . declaration . usage . distance . extend = Distance between variable ' ' { 0 } ' ' declaration and its first usage is { 1 } , but allowed { 2 } . Consider to make that variable as final if you still need to store its value in advance ( before method calls that might do side effect on original value ) . <nl> overload . methods . declaration = Overload methods should not be split . Previous overloaded method located at line ' ' { 0 } ' ' . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java <nl> index b7b41f5 . . a9db2be 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . VariableDeclarationUsageDistanceCheck . MSG _ KEY ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . coding . VariableDeclarationUsageDistanceCheck . MSG _ KEY _ EXT ; <nl> + <nl> import static java . text . MessageFormat . format ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 171 , 34 + 173 , 34 @ @ public class VariableDeclarationUsageDistanceCheckTest extends <nl> checkConfig . addAttribute ( " validateBetweenScopes " , " true " ) ; <nl> checkConfig . addAttribute ( " ignoreFinal " , " true " ) ; <nl> final String [ ] expected = { <nl> - " 30 : " + getCheckMessage ( MSG _ KEY , " a " , 2 , 1 ) , <nl> - " 38 : " + getCheckMessage ( MSG _ KEY , " temp " , 2 , 1 ) , <nl> - " 44 : " + getCheckMessage ( MSG _ KEY , " temp " , 2 , 1 ) , <nl> - " 57 : " + getCheckMessage ( MSG _ KEY , " count " , 2 , 1 ) , <nl> - " 71 : " + getCheckMessage ( MSG _ KEY , " count " , 4 , 1 ) , <nl> - " 96 : " + getCheckMessage ( MSG _ KEY , " arg " , 2 , 1 ) , <nl> - " 144 : " + getCheckMessage ( MSG _ KEY , " m " , 3 , 1 ) , <nl> - " 145 : " + getCheckMessage ( MSG _ KEY , " n " , 2 , 1 ) , <nl> - " 184 : " + getCheckMessage ( MSG _ KEY , " result " , 2 , 1 ) , <nl> - " 219 : " + getCheckMessage ( MSG _ KEY , " t " , 5 , 1 ) , <nl> - " 222 : " + getCheckMessage ( MSG _ KEY , " c " , 3 , 1 ) , <nl> - " 223 : " + getCheckMessage ( MSG _ KEY , " d2 " , 3 , 1 ) , <nl> - " 260 : " + getCheckMessage ( MSG _ KEY , " selected " , 2 , 1 ) , <nl> - " 261 : " + getCheckMessage ( MSG _ KEY , " model " , 2 , 1 ) , <nl> - " 287 : " + getCheckMessage ( MSG _ KEY , " sw " , 2 , 1 ) , <nl> - " 300 : " + getCheckMessage ( MSG _ KEY , " wh " , 2 , 1 ) , <nl> - " 343 : " + getCheckMessage ( MSG _ KEY , " green " , 2 , 1 ) , <nl> - " 344 : " + getCheckMessage ( MSG _ KEY , " blue " , 3 , 1 ) , <nl> - " 454 : " + getCheckMessage ( MSG _ KEY , " aOpt " , 3 , 1 ) , <nl> - " 455 : " + getCheckMessage ( MSG _ KEY , " bOpt " , 2 , 1 ) , <nl> - " 471 : " + getCheckMessage ( MSG _ KEY , " l1 " , 3 , 1 ) , <nl> - " 471 : " + getCheckMessage ( MSG _ KEY , " l2 " , 2 , 1 ) , <nl> - " 479 : " + getCheckMessage ( MSG _ KEY , " myOption " , 7 , 1 ) , <nl> - " 491 : " + getCheckMessage ( MSG _ KEY , " myOption " , 6 , 1 ) , <nl> - " 504 : " + getCheckMessage ( MSG _ KEY , " count " , 4 , 1 ) , <nl> - " 505 : " + getCheckMessage ( MSG _ KEY , " files " , 2 , 1 ) , <nl> - " 540 : " + getCheckMessage ( MSG _ KEY , " id " , 2 , 1 ) , <nl> - " 542 : " + getCheckMessage ( MSG _ KEY , " parentId " , 3 , 1 ) , <nl> + " 30 : " + getCheckMessage ( MSG _ KEY _ EXT , " a " , 2 , 1 ) , <nl> + " 38 : " + getCheckMessage ( MSG _ KEY _ EXT , " temp " , 2 , 1 ) , <nl> + " 44 : " + getCheckMessage ( MSG _ KEY _ EXT , " temp " , 2 , 1 ) , <nl> + " 57 : " + getCheckMessage ( MSG _ KEY _ EXT , " count " , 2 , 1 ) , <nl> + " 71 : " + getCheckMessage ( MSG _ KEY _ EXT , " count " , 4 , 1 ) , <nl> + " 96 : " + getCheckMessage ( MSG _ KEY _ EXT , " arg " , 2 , 1 ) , <nl> + " 144 : " + getCheckMessage ( MSG _ KEY _ EXT , " m " , 3 , 1 ) , <nl> + " 145 : " + getCheckMessage ( MSG _ KEY _ EXT , " n " , 2 , 1 ) , <nl> + " 184 : " + getCheckMessage ( MSG _ KEY _ EXT , " result " , 2 , 1 ) , <nl> + " 219 : " + getCheckMessage ( MSG _ KEY _ EXT , " t " , 5 , 1 ) , <nl> + " 222 : " + getCheckMessage ( MSG _ KEY _ EXT , " c " , 3 , 1 ) , <nl> + " 223 : " + getCheckMessage ( MSG _ KEY _ EXT , " d2 " , 3 , 1 ) , <nl> + " 260 : " + getCheckMessage ( MSG _ KEY _ EXT , " selected " , 2 , 1 ) , <nl> + " 261 : " + getCheckMessage ( MSG _ KEY _ EXT , " model " , 2 , 1 ) , <nl> + " 287 : " + getCheckMessage ( MSG _ KEY _ EXT , " sw " , 2 , 1 ) , <nl> + " 300 : " + getCheckMessage ( MSG _ KEY _ EXT , " wh " , 2 , 1 ) , <nl> + " 343 : " + getCheckMessage ( MSG _ KEY _ EXT , " green " , 2 , 1 ) , <nl> + " 344 : " + getCheckMessage ( MSG _ KEY _ EXT , " blue " , 3 , 1 ) , <nl> + " 454 : " + getCheckMessage ( MSG _ KEY _ EXT , " aOpt " , 3 , 1 ) , <nl> + " 455 : " + getCheckMessage ( MSG _ KEY _ EXT , " bOpt " , 2 , 1 ) , <nl> + " 471 : " + getCheckMessage ( MSG _ KEY _ EXT , " l1 " , 3 , 1 ) , <nl> + " 471 : " + getCheckMessage ( MSG _ KEY _ EXT , " l2 " , 2 , 1 ) , <nl> + " 479 : " + getCheckMessage ( MSG _ KEY _ EXT , " myOption " , 7 , 1 ) , <nl> + " 491 : " + getCheckMessage ( MSG _ KEY _ EXT , " myOption " , 6 , 1 ) , <nl> + " 504 : " + getCheckMessage ( MSG _ KEY _ EXT , " count " , 4 , 1 ) , <nl> + " 505 : " + getCheckMessage ( MSG _ KEY _ EXT , " files " , 2 , 1 ) , <nl> + " 540 : " + getCheckMessage ( MSG _ KEY _ EXT , " id " , 2 , 1 ) , <nl> + " 542 : " + getCheckMessage ( MSG _ KEY _ EXT , " parentId " , 3 , 1 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " coding / InputVariableDeclarationUsageDistanceCheck . java " ) , expected ) ; <nl> }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java 
 index 63c079f . . 5a06491 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / java8 / MethodReferencesTest . java 
 @ @ - 90 , 6 + 90 , 15 @ @ public class MethodReferencesTest extends BaseCheckTestSupport { 
 final DefaultConfiguration checkConfig = createCheckConfig ( MemberNameCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , getNonCompilablePath ( " InputMethodReferences6 . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testMethodReferences7 ( ) 
 + throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( MemberNameCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputMethodReferences7 . java " ) , expected ) ; 
 
 } 
 } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferences7 . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferences7 . java 
 new file mode 100644 
 index 0000000 . . 5998d25 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / grammars / java8 / InputMethodReferences7 . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + / / Compilable with Java8 
 + package com . puppycrawl . tools . checkstyle . grammars . java8 ; 
 + 
 + import java . lang . annotation . ElementType ; 
 + import java . lang . annotation . Target ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + import java . util . function . Function ; 
 + import java . util . function . Supplier ; 
 + 
 + public class InputMethodReferences7 { 
 + interface LambdaInt { 
 + < S , T > void m ( S p1 , T p2 ) ; 
 + } 
 + 
 + interface MyFunctionalInterface { 
 + void invokeMethodReference ( ) ; 
 + } 
 + 
 + static class LambdaImpl implements LambdaInt { 
 + < S , T > LambdaImpl ( S p1 , T p2 ) { 
 + } 
 + 
 + public < S , T > void m ( S p1 , T p2 ) { 
 + } 
 + } 
 + 
 + public void m ( ) { 
 + } 
 + 
 + public void main ( String [ ] args ) { 
 + MyFunctionalInterface fi = new InputMethodReferences7 ( ) : : < Integer , String , Long > m ; 
 + LambdaInt li = LambdaImpl : : < @ TA Object , @ TB Object > new ; 
 + Supplier s = Bar : : < String > m ; 
 + li = li : : < @ TA Object , @ TB Object > m ; 
 + s = Bar : : < List < String > > m ; 
 + s = Bar : : < List < List < ? > > > m ; 
 + } 
 + } 
 + 
 + class Bar < T > { 
 + static Object m ( ) { 
 + return null ; 
 + } 
 + } 
 + 
 + @ Target ( { ElementType . TYPE _ USE , ElementType . TYPE _ PARAMETER } ) 
 + @ interface TA { 
 + } 
 + 
 + @ Target ( { ElementType . TYPE _ USE , ElementType . TYPE _ PARAMETER } ) 
 + @ interface TB { 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 index 9655dd9 . . fbae952 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheck . java 
 @ @ - 173 , 6 + 173 , 11 @ @ public class VariableDeclarationUsageDistanceCheck extends Check 
 public static final String MSG _ KEY = " variable . declaration . usage . distance " ; 
 
 / * * 
 + * Warning message key . 
 + * / 
 + public static final String MSG _ KEY _ EXT = " variable . declaration . usage . distance . extend " ; 
 + 
 + / * * 
 * Default value of distance between declaration of variable and its first 
 * usage . 
 * / 
 @ @ - 275 , 8 + 280 , 14 @ @ public class VariableDeclarationUsageDistanceCheck extends Check 
 if ( dist > mAllowedDistance 
 & & ! isInitializationSequence ( variableUsageAst , variable . getText ( ) ) ) 
 { 
 - log ( variable . getLineNo ( ) , 
 - MSG _ KEY , variable . getText ( ) , dist , mAllowedDistance ) ; 
 + if ( mIgnoreFinal ) { 
 + log ( variable . getLineNo ( ) , 
 + MSG _ KEY _ EXT , variable . getText ( ) , dist , mAllowedDistance ) ; 
 + } 
 + else { 
 + log ( variable . getLineNo ( ) , 
 + MSG _ KEY , variable . getText ( ) , dist , mAllowedDistance ) ; 
 + } 
 } 
 } 
 } 
 diff - - git a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 index 1abd0aa . . b9047f1 100644 
 - - - a / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 + + + b / src / main / resources / com / puppycrawl / tools / checkstyle / checks / coding / messages . properties 
 @ @ - 64 , 4 + 64 , 5 @ @ unnecessary . paren . return = Unnecessary parentheses around return value . 
 unnecessary . paren . string = Unnecessary parentheses around string { 0 } . 
 package . dir . mismatch = Package declaration does not match directory ' ' { 0 } ' ' . 
 variable . declaration . usage . distance = Distance between variable ' ' { 0 } ' ' declaration and its first usage is { 1 } , but allowed { 2 } . 
 + variable . declaration . usage . distance . extend = Distance between variable ' ' { 0 } ' ' declaration and its first usage is { 1 } , but allowed { 2 } . Consider to make that variable as final if you still need to store its value in advance ( before method calls that might do side effect on original value ) . 
 overload . methods . declaration = Overload methods should not be split . Previous overloaded method located at line ' ' { 0 } ' ' . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java 
 index b7b41f5 . . a9db2be 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / VariableDeclarationUsageDistanceCheckTest . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . coding ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . coding . VariableDeclarationUsageDistanceCheck . MSG _ KEY ; 
 + import static com . puppycrawl . tools . checkstyle . checks . coding . VariableDeclarationUsageDistanceCheck . MSG _ KEY _ EXT ; 
 + 
 import static java . text . MessageFormat . format ; 
 
 import org . junit . Test ; 
 @ @ - 171 , 34 + 173 , 34 @ @ public class VariableDeclarationUsageDistanceCheckTest extends 
 checkConfig . addAttribute ( " validateBetweenScopes " , " true " ) ; 
 checkConfig . addAttribute ( " ignoreFinal " , " true " ) ; 
 final String [ ] expected = { 
 - " 30 : " + getCheckMessage ( MSG _ KEY , " a " , 2 , 1 ) , 
 - " 38 : " + getCheckMessage ( MSG _ KEY , " temp " , 2 , 1 ) , 
 - " 44 : " + getCheckMessage ( MSG _ KEY , " temp " , 2 , 1 ) , 
 - " 57 : " + getCheckMessage ( MSG _ KEY , " count " , 2 , 1 ) , 
 - " 71 : " + getCheckMessage ( MSG _ KEY , " count " , 4 , 1 ) , 
 - " 96 : " + getCheckMessage ( MSG _ KEY , " arg " , 2 , 1 ) , 
 - " 144 : " + getCheckMessage ( MSG _ KEY , " m " , 3 , 1 ) , 
 - " 145 : " + getCheckMessage ( MSG _ KEY , " n " , 2 , 1 ) , 
 - " 184 : " + getCheckMessage ( MSG _ KEY , " result " , 2 , 1 ) , 
 - " 219 : " + getCheckMessage ( MSG _ KEY , " t " , 5 , 1 ) , 
 - " 222 : " + getCheckMessage ( MSG _ KEY , " c " , 3 , 1 ) , 
 - " 223 : " + getCheckMessage ( MSG _ KEY , " d2 " , 3 , 1 ) , 
 - " 260 : " + getCheckMessage ( MSG _ KEY , " selected " , 2 , 1 ) , 
 - " 261 : " + getCheckMessage ( MSG _ KEY , " model " , 2 , 1 ) , 
 - " 287 : " + getCheckMessage ( MSG _ KEY , " sw " , 2 , 1 ) , 
 - " 300 : " + getCheckMessage ( MSG _ KEY , " wh " , 2 , 1 ) , 
 - " 343 : " + getCheckMessage ( MSG _ KEY , " green " , 2 , 1 ) , 
 - " 344 : " + getCheckMessage ( MSG _ KEY , " blue " , 3 , 1 ) , 
 - " 454 : " + getCheckMessage ( MSG _ KEY , " aOpt " , 3 , 1 ) , 
 - " 455 : " + getCheckMessage ( MSG _ KEY , " bOpt " , 2 , 1 ) , 
 - " 471 : " + getCheckMessage ( MSG _ KEY , " l1 " , 3 , 1 ) , 
 - " 471 : " + getCheckMessage ( MSG _ KEY , " l2 " , 2 , 1 ) , 
 - " 479 : " + getCheckMessage ( MSG _ KEY , " myOption " , 7 , 1 ) , 
 - " 491 : " + getCheckMessage ( MSG _ KEY , " myOption " , 6 , 1 ) , 
 - " 504 : " + getCheckMessage ( MSG _ KEY , " count " , 4 , 1 ) , 
 - " 505 : " + getCheckMessage ( MSG _ KEY , " files " , 2 , 1 ) , 
 - " 540 : " + getCheckMessage ( MSG _ KEY , " id " , 2 , 1 ) , 
 - " 542 : " + getCheckMessage ( MSG _ KEY , " parentId " , 3 , 1 ) , 
 + " 30 : " + getCheckMessage ( MSG _ KEY _ EXT , " a " , 2 , 1 ) , 
 + " 38 : " + getCheckMessage ( MSG _ KEY _ EXT , " temp " , 2 , 1 ) , 
 + " 44 : " + getCheckMessage ( MSG _ KEY _ EXT , " temp " , 2 , 1 ) , 
 + " 57 : " + getCheckMessage ( MSG _ KEY _ EXT , " count " , 2 , 1 ) , 
 + " 71 : " + getCheckMessage ( MSG _ KEY _ EXT , " count " , 4 , 1 ) , 
 + " 96 : " + getCheckMessage ( MSG _ KEY _ EXT , " arg " , 2 , 1 ) , 
 + " 144 : " + getCheckMessage ( MSG _ KEY _ EXT , " m " , 3 , 1 ) , 
 + " 145 : " + getCheckMessage ( MSG _ KEY _ EXT , " n " , 2 , 1 ) , 
 + " 184 : " + getCheckMessage ( MSG _ KEY _ EXT , " result " , 2 , 1 ) , 
 + " 219 : " + getCheckMessage ( MSG _ KEY _ EXT , " t " , 5 , 1 ) , 
 + " 222 : " + getCheckMessage ( MSG _ KEY _ EXT , " c " , 3 , 1 ) , 
 + " 223 : " + getCheckMessage ( MSG _ KEY _ EXT , " d2 " , 3 , 1 ) , 
 + " 260 : " + getCheckMessage ( MSG _ KEY _ EXT , " selected " , 2 , 1 ) , 
 + " 261 : " + getCheckMessage ( MSG _ KEY _ EXT , " model " , 2 , 1 ) , 
 + " 287 : " + getCheckMessage ( MSG _ KEY _ EXT , " sw " , 2 , 1 ) , 
 + " 300 : " + getCheckMessage ( MSG _ KEY _ EXT , " wh " , 2 , 1 ) , 
 + " 343 : " + getCheckMessage ( MSG _ KEY _ EXT , " green " , 2 , 1 ) , 
 + " 344 : " + getCheckMessage ( MSG _ KEY _ EXT , " blue " , 3 , 1 ) , 
 + " 454 : " + getCheckMessage ( MSG _ KEY _ EXT , " aOpt " , 3 , 1 ) , 
 + " 455 : " + getCheckMessage ( MSG _ KEY _ EXT , " bOpt " , 2 , 1 ) , 
 + " 471 : " + getCheckMessage ( MSG _ KEY _ EXT , " l1 " , 3 , 1 ) , 
 + " 471 : " + getCheckMessage ( MSG _ KEY _ EXT , " l2 " , 2 , 1 ) , 
 + " 479 : " + getCheckMessage ( MSG _ KEY _ EXT , " myOption " , 7 , 1 ) , 
 + " 491 : " + getCheckMessage ( MSG _ KEY _ EXT , " myOption " , 6 , 1 ) , 
 + " 504 : " + getCheckMessage ( MSG _ KEY _ EXT , " count " , 4 , 1 ) , 
 + " 505 : " + getCheckMessage ( MSG _ KEY _ EXT , " files " , 2 , 1 ) , 
 + " 540 : " + getCheckMessage ( MSG _ KEY _ EXT , " id " , 2 , 1 ) , 
 + " 542 : " + getCheckMessage ( MSG _ KEY _ EXT , " parentId " , 3 , 1 ) , 
 } ; 
 verify ( checkConfig , getPath ( " coding / InputVariableDeclarationUsageDistanceCheck . java " ) , expected ) ; 
 }
