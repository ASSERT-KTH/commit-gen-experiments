BLEU SCORE: 0.02407485903547034

TEST MSG: Issue # 4981 : ImportOrder with order = bottom should disallow non - static import after a static import
GENERATED MSG: ImportOrderCheck . Fix separation for static imports # 1398

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> index a6f08bf . . f769c75 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> @ @ - 392 , 6 + 392 , 10 @ @ public class ImportOrderCheck <nl> } <nl> doVisitToken ( ident , isStatic , isStaticAndNotLastImport ) ; <nl> <nl> + if ( isStaticAndNotLastImport & & ! beforeFirstImport ) { <nl> + log ( ident . getLineNo ( ) , MSG _ ORDERING , ident . getText ( ) ) ; <nl> + } <nl> + <nl> } <nl> else if ( option = = ImportOrderOption . BOTTOM ) { <nl> <nl> @ @ - 401 , 6 + 405 , 10 @ @ public class ImportOrderCheck <nl> } <nl> doVisitToken ( ident , isStatic , isLastImportAndNonStatic ) ; <nl> <nl> + if ( isLastImportAndNonStatic ) { <nl> + log ( ident . getLineNo ( ) , MSG _ ORDERING , ident . getText ( ) ) ; <nl> + } <nl> + <nl> } <nl> else if ( option = = ImportOrderOption . ABOVE ) { <nl> / / previous non - static but current is static <nl> @ @ - 440 , 14 + 448 , 15 @ @ public class ImportOrderCheck <nl> final int groupIdx = getGroupNumber ( name ) ; <nl> final int line = ident . getLineNo ( ) ; <nl> <nl> - if ( isInSameGroup ( groupIdx , isStatic ) ) { <nl> - doVisitTokenInSameGroup ( isStatic , previous , name , line ) ; <nl> - } <nl> - else if ( groupIdx > lastGroup ) { <nl> - if ( ! beforeFirstImport & & separated & & line - lastImportLine < 2 ) { <nl> + if ( groupIdx > lastGroup ) { <nl> + if ( ! beforeFirstImport & & separated & & line - lastImportLine < 2 <nl> + & & ! isInSameGroup ( groupIdx , isStatic ) ) { <nl> log ( line , MSG _ SEPARATION , name ) ; <nl> } <nl> } <nl> + else if ( isInSameGroup ( groupIdx , isStatic ) ) { <nl> + doVisitTokenInSameGroup ( isStatic , previous , name , line ) ; <nl> + } <nl> else { <nl> log ( line , MSG _ ORDERING , name ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> index 0910437 . . 7d33222 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> @ @ - 409 , 6 + 409 , 57 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testStaticGroupsAlphabeticalOrderBottomNegative ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " option " , " bottom " ) ; <nl> + checkConfig . addAttribute ( " groups " , " org , java " ) ; <nl> + checkConfig . addAttribute ( " separated " , " true " ) ; <nl> + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 8 : " + getCheckMessage ( MSG _ ORDERING , " java . util . Set " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputImportOrderStaticGroupOrderBottom _ Negative . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + / * * Tests that a non - static import after a static import correctly gives an <nl> + * error if order = bottom . * / <nl> + <nl> + @ Test <nl> + public void testStaticGroupsAlphabeticalOrderTopNegative ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " option " , " top " ) ; <nl> + checkConfig . addAttribute ( " groups " , " org , java " ) ; <nl> + checkConfig . addAttribute ( " separated " , " true " ) ; <nl> + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 5 : " + getCheckMessage ( MSG _ ORDERING , " java . lang . Math . PI " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputImportOrderStaticGroupOrderBottom _ Negative . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + / * * Tests that a non - static import before a static import correctly gives an <nl> + * error if order = top . * / <nl> + <nl> + @ Test <nl> + public void testStaticGroupsAlphabeticalOrderBottomNegative2 ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createModuleConfig ( ImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " option " , " bottom " ) ; <nl> + checkConfig . addAttribute ( " groups " , " org , java " ) ; <nl> + checkConfig . addAttribute ( " separated " , " true " ) ; <nl> + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 8 : " + getCheckMessage ( MSG _ ORDERING , " java . util . Set " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputImportOrderStaticGroupOrderBottom _ Negative2 . java " ) , <nl> + expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testStaticGroupsOrderBottom ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createModuleConfig ( ImportOrderCheck . class ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupOrderBottom _ Negative . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupOrderBottom _ Negative . java <nl> new file mode 100644 <nl> index 0000000 . . e093b04 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupOrderBottom _ Negative . java <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; <nl> + <nl> + import org . * ; <nl> + <nl> + import static java . lang . Math . PI ; <nl> + import static org . antlr . v4 . runtime . Recognizer . EOF ; <nl> + <nl> + import java . util . Set ; <nl> + <nl> + public class InputImportOrderStaticGroupOrderBottom _ Negative <nl> + { <nl> + <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupOrderBottom _ Negative2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupOrderBottom _ Negative2 . java <nl> new file mode 100644 <nl> index 0000000 . . 61277ad <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupOrderBottom _ Negative2 . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; <nl> + <nl> + import org . * ; <nl> + <nl> + import static java . lang . Math . PI ; <nl> + import static org . antlr . v4 . runtime . Recognizer . EOF ; <nl> + <nl> + import java . util . Set ; <nl> + <nl> + import static java . util . Set . * ; <nl> + <nl> + public class InputImportOrderStaticGroupOrderBottom _ Negative2 <nl> + { <nl> + <nl> + }
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 9cb423d . . df04cee 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1202 , 7 + 1202 , 6 @ @ <nl> <nl> < regex > < pattern > . * . checks . whitespace . AbstractParenPadCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . whitespace . EmptyForInitializerPadCheck < / pattern > < branchRate > 91 < / branchRate > < lineRate > 93 < / lineRate > < / regex > <nl> - < regex > < pattern > . * . checks . whitespace . EmptyLineSeparatorCheck < / pattern > < branchRate > 95 < / branchRate > < lineRate > 98 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . whitespace . GenericWhitespaceCheck < / pattern > < branchRate > 86 < / branchRate > < lineRate > 96 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . whitespace . NoWhitespaceAfterCheck < / pattern > < branchRate > 94 < / branchRate > < lineRate > 98 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . whitespace . NoWhitespaceBeforeCheck < / pattern > < branchRate > 90 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> index 9602f05 . . a8cb768 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java <nl> @ @ - 265 , 9 + 265 , 7 @ @ public class EmptyLineSeparatorCheck extends Check { <nl> * @ param astType token Type <nl> * / <nl> private void processImport ( DetailAST ast , DetailAST nextToken , int astType ) { <nl> - if ( astType ! = nextToken . getType ( ) & & ! hasEmptyLineAfter ( ast ) <nl> - | | ast . getLineNo ( ) > 1 & & ! hasEmptyLineBefore ( ast ) <nl> - & & ast . getPreviousSibling ( ) = = null ) { <nl> + if ( astType ! = nextToken . getType ( ) & & ! hasEmptyLineAfter ( ast ) ) { <nl> log ( nextToken . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , nextToken . getText ( ) ) ; <nl> } <nl> if ( hasNotAllowedTwoEmptyLinesBefore ( ast ) ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> index 84e9767 . . d584db1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java <nl> @ @ - 19 , 14 + 19 , 15 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyLineSeparatorCheck . MSG _ MULTIPLE _ LINES ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyLineSeparatorCheck . MSG _ SHOULD _ BE _ SEPARATED ; <nl> + <nl> + import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> - import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyLineSeparatorCheck <nl> - . MSG _ MULTIPLE _ LINES ; <nl> - import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyLineSeparatorCheck <nl> - . MSG _ SHOULD _ BE _ SEPARATED ; <nl> + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> public class EmptyLineSeparatorCheckTest <nl> extends BaseCheckTestSupport { <nl> @ @ - 109 , 9 + 110 , 38 @ @ public class EmptyLineSeparatorCheckTest <nl> DefaultConfiguration checkConfig = createCheckConfig ( EmptyLineSeparatorCheck . class ) ; <nl> checkConfig . addAttribute ( " allowMultipleEmptyLines " , " false " ) ; <nl> final String [ ] expected = { <nl> - <nl> + " 1 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " import " ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " whitespace / InputEmptyLineSeparatorMultipleImportEmptyClass . java " ) , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testGetAcceptableTokens ( ) { <nl> + EmptyLineSeparatorCheck emptyLineSeparatorCheckObj = new EmptyLineSeparatorCheck ( ) ; <nl> + int [ ] actual = emptyLineSeparatorCheckObj . getAcceptableTokens ( ) ; <nl> + int [ ] expected = new int [ ] { <nl> + TokenTypes . PACKAGE _ DEF , <nl> + TokenTypes . IMPORT , <nl> + TokenTypes . CLASS _ DEF , <nl> + TokenTypes . INTERFACE _ DEF , <nl> + TokenTypes . ENUM _ DEF , <nl> + TokenTypes . STATIC _ INIT , <nl> + TokenTypes . INSTANCE _ INIT , <nl> + TokenTypes . METHOD _ DEF , <nl> + TokenTypes . CTOR _ DEF , <nl> + TokenTypes . VARIABLE _ DEF , <nl> + } ; <nl> + Assert . assertNotNull ( actual ) ; <nl> + Assert . assertArrayEquals ( expected , actual ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testPrePreviousLineEmpiness ( ) throws Exception { <nl> + DefaultConfiguration checkConfig = createCheckConfig ( EmptyLineSeparatorCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowMultipleEmptyLines " , " false " ) ; <nl> + final String [ ] expected = { <nl> + <nl> + } ; <nl> + verify ( checkConfig , getPath ( " whitespace / InputPrePreviousLineEmptiness . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorMultipleImportEmptyClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorMultipleImportEmptyClass . java <nl> index c61bf3d . . 68b8304 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorMultipleImportEmptyClass . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorMultipleImportEmptyClass . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - package com . puppycrawl . tools . checkstyle . whitespace ; <nl> + package com . puppycrawl . tools . checkstyle . whitespace ; import java . util . List ; <nl> <nl> import java . util . Calendar ; <nl> import java . util . Date ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputPrePreviousLineEmptiness . java b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputPrePreviousLineEmptiness . java <nl> new file mode 100644 <nl> index 0000000 . . c0536f3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputPrePreviousLineEmptiness . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + <nl> + package com . puppycrawl . tools . checkstyle . whitespace ; <nl> + <nl> + public class InputPrePreviousLineEmptiness { <nl> + <nl> + }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 index a6f08bf . . f769c75 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 @ @ - 392 , 6 + 392 , 10 @ @ public class ImportOrderCheck 
 } 
 doVisitToken ( ident , isStatic , isStaticAndNotLastImport ) ; 
 
 + if ( isStaticAndNotLastImport & & ! beforeFirstImport ) { 
 + log ( ident . getLineNo ( ) , MSG _ ORDERING , ident . getText ( ) ) ; 
 + } 
 + 
 } 
 else if ( option = = ImportOrderOption . BOTTOM ) { 
 
 @ @ - 401 , 6 + 405 , 10 @ @ public class ImportOrderCheck 
 } 
 doVisitToken ( ident , isStatic , isLastImportAndNonStatic ) ; 
 
 + if ( isLastImportAndNonStatic ) { 
 + log ( ident . getLineNo ( ) , MSG _ ORDERING , ident . getText ( ) ) ; 
 + } 
 + 
 } 
 else if ( option = = ImportOrderOption . ABOVE ) { 
 / / previous non - static but current is static 
 @ @ - 440 , 14 + 448 , 15 @ @ public class ImportOrderCheck 
 final int groupIdx = getGroupNumber ( name ) ; 
 final int line = ident . getLineNo ( ) ; 
 
 - if ( isInSameGroup ( groupIdx , isStatic ) ) { 
 - doVisitTokenInSameGroup ( isStatic , previous , name , line ) ; 
 - } 
 - else if ( groupIdx > lastGroup ) { 
 - if ( ! beforeFirstImport & & separated & & line - lastImportLine < 2 ) { 
 + if ( groupIdx > lastGroup ) { 
 + if ( ! beforeFirstImport & & separated & & line - lastImportLine < 2 
 + & & ! isInSameGroup ( groupIdx , isStatic ) ) { 
 log ( line , MSG _ SEPARATION , name ) ; 
 } 
 } 
 + else if ( isInSameGroup ( groupIdx , isStatic ) ) { 
 + doVisitTokenInSameGroup ( isStatic , previous , name , line ) ; 
 + } 
 else { 
 log ( line , MSG _ ORDERING , name ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 index 0910437 . . 7d33222 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 @ @ - 409 , 6 + 409 , 57 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testStaticGroupsAlphabeticalOrderBottomNegative ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " option " , " bottom " ) ; 
 + checkConfig . addAttribute ( " groups " , " org , java " ) ; 
 + checkConfig . addAttribute ( " separated " , " true " ) ; 
 + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; 
 + final String [ ] expected = { 
 + " 8 : " + getCheckMessage ( MSG _ ORDERING , " java . util . Set " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputImportOrderStaticGroupOrderBottom _ Negative . java " ) , 
 + expected ) ; 
 + } 
 + 
 + / * * Tests that a non - static import after a static import correctly gives an 
 + * error if order = bottom . * / 
 + 
 + @ Test 
 + public void testStaticGroupsAlphabeticalOrderTopNegative ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " option " , " top " ) ; 
 + checkConfig . addAttribute ( " groups " , " org , java " ) ; 
 + checkConfig . addAttribute ( " separated " , " true " ) ; 
 + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; 
 + final String [ ] expected = { 
 + " 5 : " + getCheckMessage ( MSG _ ORDERING , " java . lang . Math . PI " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputImportOrderStaticGroupOrderBottom _ Negative . java " ) , 
 + expected ) ; 
 + } 
 + 
 + / * * Tests that a non - static import before a static import correctly gives an 
 + * error if order = top . * / 
 + 
 + @ Test 
 + public void testStaticGroupsAlphabeticalOrderBottomNegative2 ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createModuleConfig ( ImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " option " , " bottom " ) ; 
 + checkConfig . addAttribute ( " groups " , " org , java " ) ; 
 + checkConfig . addAttribute ( " separated " , " true " ) ; 
 + checkConfig . addAttribute ( " sortStaticImportsAlphabetically " , " true " ) ; 
 + final String [ ] expected = { 
 + " 8 : " + getCheckMessage ( MSG _ ORDERING , " java . util . Set " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputImportOrderStaticGroupOrderBottom _ Negative2 . java " ) , 
 + expected ) ; 
 + } 
 + 
 + @ Test 
 public void testStaticGroupsOrderBottom ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createModuleConfig ( ImportOrderCheck . class ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupOrderBottom _ Negative . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupOrderBottom _ Negative . java 
 new file mode 100644 
 index 0000000 . . e093b04 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupOrderBottom _ Negative . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; 
 + 
 + import org . * ; 
 + 
 + import static java . lang . Math . PI ; 
 + import static org . antlr . v4 . runtime . Recognizer . EOF ; 
 + 
 + import java . util . Set ; 
 + 
 + public class InputImportOrderStaticGroupOrderBottom _ Negative 
 + { 
 + 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupOrderBottom _ Negative2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupOrderBottom _ Negative2 . java 
 new file mode 100644 
 index 0000000 . . 61277ad 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrderStaticGroupOrderBottom _ Negative2 . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; 
 + 
 + import org . * ; 
 + 
 + import static java . lang . Math . PI ; 
 + import static org . antlr . v4 . runtime . Recognizer . EOF ; 
 + 
 + import java . util . Set ; 
 + 
 + import static java . util . Set . * ; 
 + 
 + public class InputImportOrderStaticGroupOrderBottom _ Negative2 
 + { 
 + 
 + }

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 9cb423d . . df04cee 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1202 , 7 + 1202 , 6 @ @ 
 
 < regex > < pattern > . * . checks . whitespace . AbstractParenPadCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . whitespace . EmptyForInitializerPadCheck < / pattern > < branchRate > 91 < / branchRate > < lineRate > 93 < / lineRate > < / regex > 
 - < regex > < pattern > . * . checks . whitespace . EmptyLineSeparatorCheck < / pattern > < branchRate > 95 < / branchRate > < lineRate > 98 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . whitespace . GenericWhitespaceCheck < / pattern > < branchRate > 86 < / branchRate > < lineRate > 96 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . whitespace . NoWhitespaceAfterCheck < / pattern > < branchRate > 94 < / branchRate > < lineRate > 98 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . whitespace . NoWhitespaceBeforeCheck < / pattern > < branchRate > 90 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 index 9602f05 . . a8cb768 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheck . java 
 @ @ - 265 , 9 + 265 , 7 @ @ public class EmptyLineSeparatorCheck extends Check { 
 * @ param astType token Type 
 * / 
 private void processImport ( DetailAST ast , DetailAST nextToken , int astType ) { 
 - if ( astType ! = nextToken . getType ( ) & & ! hasEmptyLineAfter ( ast ) 
 - | | ast . getLineNo ( ) > 1 & & ! hasEmptyLineBefore ( ast ) 
 - & & ast . getPreviousSibling ( ) = = null ) { 
 + if ( astType ! = nextToken . getType ( ) & & ! hasEmptyLineAfter ( ast ) ) { 
 log ( nextToken . getLineNo ( ) , MSG _ SHOULD _ BE _ SEPARATED , nextToken . getText ( ) ) ; 
 } 
 if ( hasNotAllowedTwoEmptyLinesBefore ( ast ) ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 index 84e9767 . . d584db1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyLineSeparatorCheckTest . java 
 @ @ - 19 , 14 + 19 , 15 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 
 - import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyLineSeparatorCheck . MSG _ MULTIPLE _ LINES ; 
 + import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyLineSeparatorCheck . MSG _ SHOULD _ BE _ SEPARATED ; 
 + 
 + import org . junit . Assert ; 
 import org . junit . Test ; 
 
 - import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyLineSeparatorCheck 
 - . MSG _ MULTIPLE _ LINES ; 
 - import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyLineSeparatorCheck 
 - . MSG _ SHOULD _ BE _ SEPARATED ; 
 + import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 public class EmptyLineSeparatorCheckTest 
 extends BaseCheckTestSupport { 
 @ @ - 109 , 9 + 110 , 38 @ @ public class EmptyLineSeparatorCheckTest 
 DefaultConfiguration checkConfig = createCheckConfig ( EmptyLineSeparatorCheck . class ) ; 
 checkConfig . addAttribute ( " allowMultipleEmptyLines " , " false " ) ; 
 final String [ ] expected = { 
 - 
 + " 1 : " + getCheckMessage ( MSG _ SHOULD _ BE _ SEPARATED , " import " ) , 
 } ; 
 verify ( checkConfig , getPath ( " whitespace / InputEmptyLineSeparatorMultipleImportEmptyClass . java " ) , expected ) ; 
 } 
 
 + @ Test 
 + public void testGetAcceptableTokens ( ) { 
 + EmptyLineSeparatorCheck emptyLineSeparatorCheckObj = new EmptyLineSeparatorCheck ( ) ; 
 + int [ ] actual = emptyLineSeparatorCheckObj . getAcceptableTokens ( ) ; 
 + int [ ] expected = new int [ ] { 
 + TokenTypes . PACKAGE _ DEF , 
 + TokenTypes . IMPORT , 
 + TokenTypes . CLASS _ DEF , 
 + TokenTypes . INTERFACE _ DEF , 
 + TokenTypes . ENUM _ DEF , 
 + TokenTypes . STATIC _ INIT , 
 + TokenTypes . INSTANCE _ INIT , 
 + TokenTypes . METHOD _ DEF , 
 + TokenTypes . CTOR _ DEF , 
 + TokenTypes . VARIABLE _ DEF , 
 + } ; 
 + Assert . assertNotNull ( actual ) ; 
 + Assert . assertArrayEquals ( expected , actual ) ; 
 + } 
 + 
 + @ Test 
 + public void testPrePreviousLineEmpiness ( ) throws Exception { 
 + DefaultConfiguration checkConfig = createCheckConfig ( EmptyLineSeparatorCheck . class ) ; 
 + checkConfig . addAttribute ( " allowMultipleEmptyLines " , " false " ) ; 
 + final String [ ] expected = { 
 + 
 + } ; 
 + verify ( checkConfig , getPath ( " whitespace / InputPrePreviousLineEmptiness . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorMultipleImportEmptyClass . java b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorMultipleImportEmptyClass . java 
 index c61bf3d . . 68b8304 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorMultipleImportEmptyClass . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputEmptyLineSeparatorMultipleImportEmptyClass . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - package com . puppycrawl . tools . checkstyle . whitespace ; 
 + package com . puppycrawl . tools . checkstyle . whitespace ; import java . util . List ; 
 
 import java . util . Calendar ; 
 import java . util . Date ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputPrePreviousLineEmptiness . java b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputPrePreviousLineEmptiness . java 
 new file mode 100644 
 index 0000000 . . c0536f3 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / whitespace / InputPrePreviousLineEmptiness . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + 
 + package com . puppycrawl . tools . checkstyle . whitespace ; 
 + 
 + public class InputPrePreviousLineEmptiness { 
 + 
 + }
