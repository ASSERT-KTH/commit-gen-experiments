BLEU SCORE: 0.09080027618567452

TEST MSG: Issue # 4931 : removed powermock tests for AuditEventDefaultFormatter
GENERATED MSG: Issue # 2780 : Fix StringIndexOutOfBoundsException in getCheckShortName method of AuditEventDefaultFormatter

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AuditEventDefaultFormatterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AuditEventDefaultFormatterTest . java <nl> index 3acd8f2 . . bad0df2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AuditEventDefaultFormatterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AuditEventDefaultFormatterTest . java <nl> @ @ - 41 , 34 + 41 , 28 @ @ public class AuditEventDefaultFormatterTest { <nl> <nl> @ Test <nl> public void testFormatFullyQualifiedModuleNameContainsCheckSuffix ( ) { <nl> - final AuditEvent mock = PowerMockito . mock ( AuditEvent . class ) ; <nl> - when ( mock . getSourceName ( ) ) . thenReturn ( " com . test . package . TestModuleCheck " ) ; <nl> - when ( mock . getSeverityLevel ( ) ) . thenReturn ( SeverityLevel . WARNING ) ; <nl> - when ( mock . getLine ( ) ) . thenReturn ( 1 ) ; <nl> - when ( mock . getColumn ( ) ) . thenReturn ( 1 ) ; <nl> - when ( mock . getMessage ( ) ) . thenReturn ( " Mocked message . " ) ; <nl> - when ( mock . getFileName ( ) ) . thenReturn ( " InputMockFile . java " ) ; <nl> + final LocalizedMessage message = new LocalizedMessage ( 1 , 1 , null , null , null , <nl> + SeverityLevel . WARNING , null , TestModuleCheck . class , " Mocked message . " ) ; <nl> + final AuditEvent event = new AuditEvent ( " " , " InputMockFile . java " , message ) ; <nl> final AuditEventFormatter formatter = new AuditEventDefaultFormatter ( ) ; <nl> <nl> - final String expected = " [ WARN ] InputMockFile . java : 1 : 1 : Mocked message . [ TestModule ] " ; <nl> + final String expected = " [ WARN ] InputMockFile . java : 1 : 1 : Mocked message . " <nl> + + " [ AuditEventDefaultFormatterTest $ TestModule ] " ; <nl> <nl> - assertEquals ( " Invalid format " , expected , formatter . format ( mock ) ) ; <nl> + assertEquals ( " Invalid format " , expected , formatter . format ( event ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testFormatFullyQualifiedModuleNameDoesNotContainCheckSuffix ( ) { <nl> - final AuditEvent mock = PowerMockito . mock ( AuditEvent . class ) ; <nl> - when ( mock . getSourceName ( ) ) . thenReturn ( " com . test . package . TestModule " ) ; <nl> - when ( mock . getSeverityLevel ( ) ) . thenReturn ( SeverityLevel . WARNING ) ; <nl> - when ( mock . getLine ( ) ) . thenReturn ( 1 ) ; <nl> - when ( mock . getColumn ( ) ) . thenReturn ( 1 ) ; <nl> - when ( mock . getMessage ( ) ) . thenReturn ( " Mocked message . " ) ; <nl> - when ( mock . getFileName ( ) ) . thenReturn ( " InputMockFile . java " ) ; <nl> + final LocalizedMessage message = new LocalizedMessage ( 1 , 1 , null , null , null , <nl> + SeverityLevel . WARNING , null , TestModule . class , " Mocked message . " ) ; <nl> + final AuditEvent event = new AuditEvent ( " " , " InputMockFile . java " , message ) ; <nl> final AuditEventFormatter formatter = new AuditEventDefaultFormatter ( ) ; <nl> <nl> - final String expected = " [ WARN ] InputMockFile . java : 1 : 1 : Mocked message . [ TestModule ] " ; <nl> + final String expected = " [ WARN ] InputMockFile . java : 1 : 1 : Mocked message . " <nl> + + " [ AuditEventDefaultFormatterTest $ TestModule ] " ; <nl> <nl> - assertEquals ( " Invalid format " , expected , formatter . format ( mock ) ) ; <nl> + assertEquals ( " Invalid format " , expected , formatter . format ( event ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 105 , 19 + 99 , 14 @ @ public class AuditEventDefaultFormatterTest { <nl> <nl> @ Test <nl> public void testFormatModuleWithModuleId ( ) { <nl> - final AuditEvent mock = PowerMockito . mock ( AuditEvent . class ) ; <nl> - when ( mock . getSourceName ( ) ) . thenReturn ( " TestModule " ) ; <nl> - when ( mock . getSeverityLevel ( ) ) . thenReturn ( SeverityLevel . WARNING ) ; <nl> - when ( mock . getLine ( ) ) . thenReturn ( 1 ) ; <nl> - when ( mock . getColumn ( ) ) . thenReturn ( 1 ) ; <nl> - when ( mock . getMessage ( ) ) . thenReturn ( " Mocked message . " ) ; <nl> - when ( mock . getFileName ( ) ) . thenReturn ( " InputMockFile . java " ) ; <nl> - when ( mock . getModuleId ( ) ) . thenReturn ( " ModuleId " ) ; <nl> + final LocalizedMessage message = new LocalizedMessage ( 1 , 1 , null , null , null , <nl> + SeverityLevel . WARNING , " ModuleId " , TestModule . class , " Mocked message . " ) ; <nl> + final AuditEvent event = new AuditEvent ( " " , " InputMockFile . java " , message ) ; <nl> final AuditEventFormatter formatter = new AuditEventDefaultFormatter ( ) ; <nl> <nl> final String expected = " [ WARN ] InputMockFile . java : 1 : 1 : Mocked message . [ ModuleId ] " ; <nl> <nl> - assertEquals ( " Invalid format " , expected , formatter . format ( mock ) ) ; <nl> + assertEquals ( " Invalid format " , expected , formatter . format ( event ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 134 , 4 + 123 , 12 @ @ public class AuditEventDefaultFormatterTest { <nl> <nl> assertEquals ( " Buffer length is not expected " , 54 , result ) ; <nl> } <nl> + <nl> + private static class TestModuleCheck { <nl> + / / no code <nl> + } <nl> + <nl> + private static class TestModule { <nl> + / / no code <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml <nl> index 21beec8 . . 7e71b44 100644 <nl> - - - a / config / checkstyle _ sevntu _ checks . xml <nl> + + + b / config / checkstyle _ sevntu _ checks . xml <nl> @ @ - 19 , 5 + 19 , 6 @ @ <nl> < module name = " NoNullForCollectionReturnCheck " / > <nl> < module name = " NoMainMethodInAbstractClass " / > <nl> < module name = " InterfaceTypeParameterNameCheck " / > <nl> + < module name = " ForbidThrowAnonymousExceptionsCheck " / > <nl> < / module > <nl> < / module >

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AuditEventDefaultFormatterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AuditEventDefaultFormatterTest . java 
 index 3acd8f2 . . bad0df2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AuditEventDefaultFormatterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AuditEventDefaultFormatterTest . java 
 @ @ - 41 , 34 + 41 , 28 @ @ public class AuditEventDefaultFormatterTest { 
 
 @ Test 
 public void testFormatFullyQualifiedModuleNameContainsCheckSuffix ( ) { 
 - final AuditEvent mock = PowerMockito . mock ( AuditEvent . class ) ; 
 - when ( mock . getSourceName ( ) ) . thenReturn ( " com . test . package . TestModuleCheck " ) ; 
 - when ( mock . getSeverityLevel ( ) ) . thenReturn ( SeverityLevel . WARNING ) ; 
 - when ( mock . getLine ( ) ) . thenReturn ( 1 ) ; 
 - when ( mock . getColumn ( ) ) . thenReturn ( 1 ) ; 
 - when ( mock . getMessage ( ) ) . thenReturn ( " Mocked message . " ) ; 
 - when ( mock . getFileName ( ) ) . thenReturn ( " InputMockFile . java " ) ; 
 + final LocalizedMessage message = new LocalizedMessage ( 1 , 1 , null , null , null , 
 + SeverityLevel . WARNING , null , TestModuleCheck . class , " Mocked message . " ) ; 
 + final AuditEvent event = new AuditEvent ( " " , " InputMockFile . java " , message ) ; 
 final AuditEventFormatter formatter = new AuditEventDefaultFormatter ( ) ; 
 
 - final String expected = " [ WARN ] InputMockFile . java : 1 : 1 : Mocked message . [ TestModule ] " ; 
 + final String expected = " [ WARN ] InputMockFile . java : 1 : 1 : Mocked message . " 
 + + " [ AuditEventDefaultFormatterTest $ TestModule ] " ; 
 
 - assertEquals ( " Invalid format " , expected , formatter . format ( mock ) ) ; 
 + assertEquals ( " Invalid format " , expected , formatter . format ( event ) ) ; 
 } 
 
 @ Test 
 public void testFormatFullyQualifiedModuleNameDoesNotContainCheckSuffix ( ) { 
 - final AuditEvent mock = PowerMockito . mock ( AuditEvent . class ) ; 
 - when ( mock . getSourceName ( ) ) . thenReturn ( " com . test . package . TestModule " ) ; 
 - when ( mock . getSeverityLevel ( ) ) . thenReturn ( SeverityLevel . WARNING ) ; 
 - when ( mock . getLine ( ) ) . thenReturn ( 1 ) ; 
 - when ( mock . getColumn ( ) ) . thenReturn ( 1 ) ; 
 - when ( mock . getMessage ( ) ) . thenReturn ( " Mocked message . " ) ; 
 - when ( mock . getFileName ( ) ) . thenReturn ( " InputMockFile . java " ) ; 
 + final LocalizedMessage message = new LocalizedMessage ( 1 , 1 , null , null , null , 
 + SeverityLevel . WARNING , null , TestModule . class , " Mocked message . " ) ; 
 + final AuditEvent event = new AuditEvent ( " " , " InputMockFile . java " , message ) ; 
 final AuditEventFormatter formatter = new AuditEventDefaultFormatter ( ) ; 
 
 - final String expected = " [ WARN ] InputMockFile . java : 1 : 1 : Mocked message . [ TestModule ] " ; 
 + final String expected = " [ WARN ] InputMockFile . java : 1 : 1 : Mocked message . " 
 + + " [ AuditEventDefaultFormatterTest $ TestModule ] " ; 
 
 - assertEquals ( " Invalid format " , expected , formatter . format ( mock ) ) ; 
 + assertEquals ( " Invalid format " , expected , formatter . format ( event ) ) ; 
 } 
 
 @ Test 
 @ @ - 105 , 19 + 99 , 14 @ @ public class AuditEventDefaultFormatterTest { 
 
 @ Test 
 public void testFormatModuleWithModuleId ( ) { 
 - final AuditEvent mock = PowerMockito . mock ( AuditEvent . class ) ; 
 - when ( mock . getSourceName ( ) ) . thenReturn ( " TestModule " ) ; 
 - when ( mock . getSeverityLevel ( ) ) . thenReturn ( SeverityLevel . WARNING ) ; 
 - when ( mock . getLine ( ) ) . thenReturn ( 1 ) ; 
 - when ( mock . getColumn ( ) ) . thenReturn ( 1 ) ; 
 - when ( mock . getMessage ( ) ) . thenReturn ( " Mocked message . " ) ; 
 - when ( mock . getFileName ( ) ) . thenReturn ( " InputMockFile . java " ) ; 
 - when ( mock . getModuleId ( ) ) . thenReturn ( " ModuleId " ) ; 
 + final LocalizedMessage message = new LocalizedMessage ( 1 , 1 , null , null , null , 
 + SeverityLevel . WARNING , " ModuleId " , TestModule . class , " Mocked message . " ) ; 
 + final AuditEvent event = new AuditEvent ( " " , " InputMockFile . java " , message ) ; 
 final AuditEventFormatter formatter = new AuditEventDefaultFormatter ( ) ; 
 
 final String expected = " [ WARN ] InputMockFile . java : 1 : 1 : Mocked message . [ ModuleId ] " ; 
 
 - assertEquals ( " Invalid format " , expected , formatter . format ( mock ) ) ; 
 + assertEquals ( " Invalid format " , expected , formatter . format ( event ) ) ; 
 } 
 
 @ Test 
 @ @ - 134 , 4 + 123 , 12 @ @ public class AuditEventDefaultFormatterTest { 
 
 assertEquals ( " Buffer length is not expected " , 54 , result ) ; 
 } 
 + 
 + private static class TestModuleCheck { 
 + / / no code 
 + } 
 + 
 + private static class TestModule { 
 + / / no code 
 + } 
 }

NEAREST DIFF:
diff - - git a / config / checkstyle _ sevntu _ checks . xml b / config / checkstyle _ sevntu _ checks . xml 
 index 21beec8 . . 7e71b44 100644 
 - - - a / config / checkstyle _ sevntu _ checks . xml 
 + + + b / config / checkstyle _ sevntu _ checks . xml 
 @ @ - 19 , 5 + 19 , 6 @ @ 
 < module name = " NoNullForCollectionReturnCheck " / > 
 < module name = " NoMainMethodInAbstractClass " / > 
 < module name = " InterfaceTypeParameterNameCheck " / > 
 + < module name = " ForbidThrowAnonymousExceptionsCheck " / > 
 < / module > 
 < / module >
