BLEU SCORE: 0.03168150598551599

TEST MSG: Issue # 410 : WritingJavadocChecks wiki - page . Link to github issue
GENERATED MSG: Issue # 2258 : Add GENERIC _ START and GENERIC _ END into list of acceptable tokens in xdocs of NoWhiteSpaceAfter and WhiteSpaceAround

TEST DIFF (one line): diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm <nl> index 11597ba . . 585c143 100644 <nl> - - - a / src / xdocs / writingjavadocchecks . xml . vm <nl> + + + b / src / xdocs / writingjavadocchecks . xml . vm <nl> @ @ - 75 , 8 + 75 , 14 @ @ public class MyClass { <nl> < / ul > <nl> <nl> < p > <nl> - In Javadoc comment every whitespace matters , so parse tree contains whitespace nodes ( < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # WS " > WS < / a > javadoc token type ) . <nl> - So do < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # CHAR " > CHAR < / a > javadoc token that presents single character . The only redundancy Javadoc tree has because of this is that < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # TEXT " > TEXT < / a > node consists of < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # CHAR " > CHAR < / a > and < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # WS " > WS < / a > nodes which is useless , but it is implementation nuance . ( In future we will try to resolve this ) . <nl> + In Javadoc comment every whitespace matters , so parse tree contains whitespace nodes <nl> + ( < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # WS " > WS < / a > javadoc token type ) . <nl> + So do < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # CHAR " > CHAR < / a > javadoc token that presents single character . <nl> + The only redundancy Javadoc tree has because of this is that <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # TEXT " > TEXT < / a > node consists of <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # CHAR " > CHAR < / a > and <nl> + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # WS " > WS < / a > nodes which is useless , but it is implementation nuance . <nl> + ( In future we will try to resolve this . See < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3170 " > Github Issue # 3170 < / a > ) . <nl> < / p > <nl> < / section > <nl>
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java <nl> index a11ea4a . . cbc1edc 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> import java . util . StringTokenizer ; <nl> + import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . Check ; <nl> @ @ - 38 , 30 + 39 , 30 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < / p > <nl> * The rule consists of : <nl> * <nl> - * < pre > <nl> - * STATIC group . This group sets the ordering of static imports . <nl> - * < / pre > <nl> + * < p > <nl> + * 1 . STATIC group . This group sets the ordering of static imports . <nl> + * < / p > <nl> * <nl> * < p > <nl> - * SAME _ PACKAGE ( n ) group . This group sets the ordering of the same package imports . <nl> + * 2 . SAME _ PACKAGE ( n ) group . This group sets the ordering of the same package imports . <nl> * Imports are considered on SAME _ PACKAGE group if < b > n < / b > first domains in package name <nl> * and import name are identical . <nl> * < / p > <nl> * <nl> * < pre > <nl> - * { @ code <nl> - * package java . util . concurrent . locks ; <nl> + * { @ code <nl> + * package java . util . concurrent . locks ; <nl> * <nl> - * import java . io . File ; <nl> - * import java . util . * ; / / # 1 <nl> - * import java . util . List ; / / # 2 <nl> - * import java . util . StringTokenizer ; / / # 3 <nl> - * import java . util . concurrent . * ; / / # 4 <nl> - * import java . util . concurrent . AbstractExecutorService ; / / # 5 <nl> - * import java . util . concurrent . locks . LockSupport ; / / # 6 <nl> - * import java . util . regex . Pattern ; / / # 7 <nl> - * import java . util . regex . Matcher ; / / # 8 <nl> - * } <nl> + * import java . io . File ; <nl> + * import java . util . * ; / / # 1 <nl> + * import java . util . List ; / / # 2 <nl> + * import java . util . StringTokenizer ; / / # 3 <nl> + * import java . util . concurrent . * ; / / # 4 <nl> + * import java . util . concurrent . AbstractExecutorService ; / / # 5 <nl> + * import java . util . concurrent . locks . LockSupport ; / / # 6 <nl> + * import java . util . regex . Pattern ; / / # 7 <nl> + * import java . util . regex . Matcher ; / / # 8 <nl> + * } <nl> * < / pre > <nl> * <nl> * < p > <nl> @ @ - 74 , 19 + 75 , 20 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < / p > <nl> * <nl> * < p > <nl> - * THIRD _ PARTY _ PACKAGE group . This group sets ordering of third party imports . <nl> + * 3 . THIRD _ PARTY _ PACKAGE group . This group sets ordering of third party imports . <nl> * Third party imports are all imports except STATIC , <nl> * SAME _ PACKAGE ( n ) , STANDARD _ JAVA _ PACKAGE and SPECIAL _ IMPORTS . <nl> * < / p > <nl> * <nl> - * < pre > <nl> - * STANDARD _ JAVA _ PACKAGE group . This group sets ordering of standard java / javax imports . <nl> - * < / pre > <nl> + * < p > <nl> + * 4 . STANDARD _ JAVA _ PACKAGE group . By default this group sets ordering of standard java / javax <nl> + * imports . <nl> + * < / p > <nl> * <nl> - * < pre > <nl> - * SPECIAL _ IMPORTS group . This group may contains some imports <nl> + * < p > <nl> + * 5 . SPECIAL _ IMPORTS group . This group may contains some imports <nl> * that have particular meaning for the user . <nl> - * < / pre > <nl> + * < / p > <nl> * <nl> * < p > <nl> * NOTE ! <nl> @ @ - 95 , 12 + 97 , 60 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * Use the separator ' # # # ' between rules . <nl> * < / p > <nl> * < p > <nl> - * To set Regexps for THIRD _ PARTY _ PACKAGE and STANDARD _ JAVA _ PACKAGE groups use <nl> + * To set RegExps for THIRD _ PARTY _ PACKAGE and STANDARD _ JAVA _ PACKAGE groups use <nl> * thirdPartyPackageRegExp and standardPackageRegExp options . <nl> * < / p > <nl> + * < p > <nl> + * Pretty often one import can match more than one group . For example , static import from standard <nl> + * package or regular expressions are configured to allow one import match multiple groups . <nl> + * In this case , group will be assigned according to priorities : <nl> + * < / p > <nl> + * < ol > <nl> + * < li > <nl> + * STATIC has top priority <nl> + * < / li > <nl> + * < li > <nl> + * SAME _ PACKAGE has second priority <nl> + * < / li > <nl> + * < li > <nl> + * STANDARD _ JAVA _ PACKAGE and SPECIAL _ IMPORTS will compete using " best match " rule : longer <nl> + * matching substring wins ; in case of the same length , lower position of matching substring <nl> + * wins ; if position is the same , order of rules in configuration solves the puzzle . <nl> + * < / li > <nl> + * < li > <nl> + * THIRD _ PARTY has the least priority <nl> + * < / li > <nl> + * < / ol > <nl> + * < p > <nl> + * Few examples to illustrate " best match " : <nl> + * < / p > <nl> + * < p > <nl> + * 1 . patterns STANDARD _ JAVA _ PACKAGE = " Check " , SPECIAL _ IMPORTS = " ImportOrderCheck " and input <nl> + * file : <nl> + * < / p > <nl> + * < pre > <nl> + * { @ code <nl> + * import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> + * import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; } <nl> + * < / pre > <nl> + * < p > <nl> + * Result : imports will be assigned to SPECIAL _ IMPORTS , because matching substring length is 16 . <nl> + * Matching substring for STANDARD _ JAVA _ PACKAGE is 5 . <nl> + * < / p > <nl> + * < p > <nl> + * 2 . patterns STANDARD _ JAVA _ PACKAGE = " Check " , SPECIAL _ IMPORTS = " Avoid " and file : <nl> + * < / p > <nl> + * < pre > <nl> + * { @ code <nl> + * import com . puppycrawl . tools . checkstyle . checks . imports . AvoidStarImportCheck ; } <nl> + * < / pre > <nl> + * < p > <nl> + * Result : import will be assigned to SPECIAL _ IMPORTS . Matching substring length is 5 for both <nl> + * patterns . However , " Avoid " position is lower then " Check " position . <nl> + * < / p > <nl> * <nl> * < pre > <nl> - * Properties : <nl> + * Properties : <nl> * < / pre > <nl> * < table summary = " Properties " border = " 1 " > <nl> * < tr > < th > name < / th > < th > Description < / th > < th > type < / th > < th > default value < / th > < / tr > <nl> @ @ - 120 , 9 + 170 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * in ASCII sort order . < / td > < td > boolean < / td > < td > false < / td > < / tr > <nl> * < / table > <nl> * <nl> - * < pre > <nl> + * < p > <nl> * For example : <nl> - * < / pre > <nl> + * < / p > <nl> * < p > To configure the check so that it matches default Eclipse formatter configuration <nl> * ( tested on Kepler , Luna and Mars ) : < / p > <nl> * < ul > <nl> @ @ - 133 , 7 + 183 , 6 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < li > groups are separated by , at least , one blank line < / li > <nl> * < / ul > <nl> * < pre > <nl> - * { @ code <nl> * & lt ; module name = & quot ; CustomImportOrder & quot ; & gt ; <nl> * & lt ; property name = & quot ; customImportOrderRules & quot ; <nl> * value = & quot ; STATIC # # # STANDARD _ JAVA _ PACKAGE # # # SPECIAL _ IMPORTS & quot ; / & gt ; <nl> @ @ - 141 , 7 + 190 , 6 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * & lt ; property name = & quot ; sortImportsInGroupAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; <nl> * & lt ; property name = & quot ; separateLineBetweenGroups & quot ; value = & quot ; true & quot ; / & gt ; <nl> * & lt ; / module & gt ; <nl> - * } <nl> * < / pre > <nl> * <nl> * < p > To configure the check so that it matches default IntelliJ IDEA formatter <nl> @ @ - 161 , 7 + 209 , 6 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < / p > <nl> * <nl> * < pre > <nl> - * { @ code <nl> * & lt ; module name = & quot ; CustomImportOrder & quot ; & gt ; <nl> * & lt ; property name = & quot ; customImportOrderRules & quot ; <nl> * value = & quot ; THIRD _ PARTY _ PACKAGE # # # SPECIAL _ IMPORTS # # # STANDARD _ JAVA _ PACKAGE <nl> @ @ - 171 , 7 + 218 , 6 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * & lt ; property name = & quot ; sortImportsInGroupAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; <nl> * & lt ; property name = & quot ; separateLineBetweenGroups & quot ; value = & quot ; false & quot ; / & gt ; <nl> * & lt ; / module & gt ; <nl> - * } <nl> * < / pre > <nl> * <nl> * < p > To configure the check so that it matches default NetBeans formatter <nl> @ @ - 182 , 20 + 228 , 18 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < li > static imports are not separated , they will be sorted along with other imports < / li > <nl> * < / ul > <nl> * <nl> - * { @ code <nl> + * < pre > <nl> * & lt ; module name = & quot ; CustomImportOrder & quot ; / & gt ; <nl> - * } <nl> - * < p > To set Regexps for THIRD _ PARTY _ PACKAGE and STANDARD _ JAVA _ PACKAGE groups use <nl> + * < / pre > <nl> + * < p > To set RegExps for THIRD _ PARTY _ PACKAGE and STANDARD _ JAVA _ PACKAGE groups use <nl> * thirdPartyPackageRegExp and standardPackageRegExp options . < / p > <nl> * < pre > <nl> - * { @ code <nl> * & lt ; module name = & quot ; CustomImportOrder & quot ; & gt ; <nl> * & lt ; property name = & quot ; customImportOrderRules & quot ; <nl> * value = & quot ; STATIC # # # SAME _ PACKAGE ( 3 ) # # # THIRD _ PARTY _ PACKAGE # # # STANDARD _ JAVA _ PACKAGE & quot ; / & gt ; <nl> * & lt ; property name = & quot ; thirdPartyPackageRegExp & quot ; value = & quot ; com | org & quot ; / & gt ; <nl> * & lt ; property name = & quot ; standardPackageRegExp & quot ; value = & quot ; ^ ( java | javax ) \ . & quot ; / & gt ; <nl> * & lt ; / module & gt ; <nl> - * } <nl> * < / pre > <nl> * < p > <nl> * Also , this check can be configured to force empty line separator between <nl> @ @ - 203 , 11 + 247 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < / p > <nl> * <nl> * < pre > <nl> - * { @ code <nl> * & lt ; module name = & quot ; CustomImportOrder & quot ; & gt ; <nl> * & lt ; property name = & quot ; separateLineBetweenGroups & quot ; value = & quot ; true & quot ; / & gt ; <nl> * & lt ; / module & gt ; <nl> - * } <nl> * < / pre > <nl> * < p > <nl> * It is possible to enforce <nl> @ @ - 215 , 20 + 257 , 20 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * of imports in groups using the following configuration : <nl> * < / p > <nl> * < pre > <nl> - * { @ code & lt ; module name = & quot ; CustomImportOrder & quot ; & gt ; <nl> + * & lt ; module name = & quot ; CustomImportOrder & quot ; & gt ; <nl> * & lt ; property name = & quot ; sortImportsInGroupAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; <nl> * & lt ; / module & gt ; <nl> - * } <nl> * < / pre > <nl> * < p > <nl> * Example of ASCII order : <nl> * < / p > <nl> * < pre > <nl> - * { @ code import java . awt . Dialog ; <nl> - * import java . awt . Window ; <nl> - * import java . awt . color . ColorSpace ; <nl> - * import java . awt . Frame ; / / violation here - in ASCII order ' F ' should go before ' c ' , <nl> - * / / as all uppercase come before lowercase letters } <nl> + * { @ code <nl> + * import java . awt . Dialog ; <nl> + * import java . awt . Window ; <nl> + * import java . awt . color . ColorSpace ; <nl> + * import java . awt . Frame ; / / violation here - in ASCII order ' F ' should go before ' c ' , <nl> + * / / as all uppercase come before lowercase letters } <nl> * < / pre > <nl> * < p > <nl> * To force checking imports sequence such as : <nl> @ @ - 252 , 12 + 294 , 11 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * < / pre > <nl> * configure as follows : <nl> * < pre > <nl> - * { @ code <nl> * & lt ; module name = & quot ; CustomImportOrder & quot ; & gt ; <nl> * & lt ; property name = & quot ; customImportOrderRules & quot ; <nl> * value = & quot ; SAME _ PACKAGE ( 3 ) # # # THIRD _ PARTY _ PACKAGE # # # STATIC # # # SPECIAL _ IMPORTS & quot ; / & gt ; <nl> * & lt ; property name = & quot ; specialImportsRegExp & quot ; value = & quot ; android . * & quot ; / & gt ; <nl> - * & lt ; / module & gt ; } <nl> + * & lt ; / module & gt ; <nl> * < / pre > <nl> * <nl> * @ author maxvetrenko <nl> @ @ - 572 , 110 + 613 , 65 @ @ public class CustomImportOrderCheck extends Check { <nl> * @ return import valid group . <nl> * / <nl> private String getImportGroup ( boolean isStatic , String importPath ) { <nl> - for ( String group : customImportOrderRules ) { <nl> - if ( matchesImportGroup ( isStatic , importPath , group ) ) { <nl> - return group ; <nl> + RuleMatchForImport bestMatch = new RuleMatchForImport ( NON _ GROUP _ RULE _ GROUP , 0 , 0 ) ; <nl> + if ( isStatic & & customImportOrderRules . contains ( STATIC _ RULE _ GROUP ) ) { <nl> + bestMatch . group = STATIC _ RULE _ GROUP ; <nl> + bestMatch . matchLength = importPath . length ( ) ; <nl> + } <nl> + else if ( customImportOrderRules . contains ( SAME _ PACKAGE _ RULE _ GROUP ) ) { <nl> + final String importPathTrimmedToSamePackageDepth = <nl> + getFirstNDomainsFromIdent ( samePackageMatchingDepth , importPath ) ; <nl> + if ( samePackageDomainsRegExp . equals ( importPathTrimmedToSamePackageDepth ) ) { <nl> + bestMatch . group = SAME _ PACKAGE _ RULE _ GROUP ; <nl> + bestMatch . matchLength = importPath . length ( ) ; <nl> } <nl> } <nl> - return NON _ GROUP _ RULE _ GROUP ; <nl> + if ( bestMatch . group . equals ( NON _ GROUP _ RULE _ GROUP ) ) { <nl> + for ( String group : customImportOrderRules ) { <nl> + if ( STANDARD _ JAVA _ PACKAGE _ RULE _ GROUP . equals ( group ) ) { <nl> + bestMatch = findBetterPatternMatch ( importPath , <nl> + STANDARD _ JAVA _ PACKAGE _ RULE _ GROUP , standardPackageRegExp , bestMatch ) ; <nl> + } <nl> + if ( SPECIAL _ IMPORTS _ RULE _ GROUP . equals ( group ) ) { <nl> + bestMatch = findBetterPatternMatch ( importPath , <nl> + SPECIAL _ IMPORTS _ RULE _ GROUP , specialImportsRegExp , bestMatch ) ; <nl> + } <nl> + } <nl> + } <nl> + if ( bestMatch . group . equals ( NON _ GROUP _ RULE _ GROUP ) <nl> + & & customImportOrderRules . contains ( THIRD _ PARTY _ PACKAGE _ RULE _ GROUP ) <nl> + & & thirdPartyPackageRegExp . matcher ( importPath ) . find ( ) ) { <nl> + bestMatch . group = THIRD _ PARTY _ PACKAGE _ RULE _ GROUP ; <nl> + } <nl> + return bestMatch . group ; <nl> } <nl> <nl> - / * * <nl> - * Checks if the import is placed in the correct group . <nl> - * @ param isStatic <nl> - * if import is static . <nl> + / * * Tries to find better matching regular expression : <nl> + * longer matching substring wins ; in case of the same length , <nl> + * lower position of matching substring wins . <nl> * @ param importPath <nl> - * import full path . <nl> - * @ param currentGroup <nl> - * current group . <nl> - * @ return true , if import placed in the correct group . <nl> - * / <nl> - private boolean matchesImportGroup ( boolean isStatic , String importPath , String currentGroup ) { <nl> - return matchesStaticImportGroup ( isStatic , currentGroup ) <nl> - | | matchesSamePackageImportGroup ( isStatic , importPath , currentGroup ) <nl> - | | matchesSpecialImportsGroup ( isStatic , importPath , currentGroup ) <nl> - | | matchesStandardImportGroup ( isStatic , importPath , currentGroup ) <nl> - | | matchesThirdPartyImportGroup ( isStatic , importPath , currentGroup ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Checks if the import is placed in the STATIC group . <nl> - * @ param isStatic <nl> - * is static import . <nl> - * @ param currentGroup <nl> - * current group . <nl> - * @ return true , if the import is placed in the static group . <nl> - * / <nl> - private static boolean matchesStaticImportGroup ( boolean isStatic , String currentGroup ) { <nl> - return isStatic & & STATIC _ RULE _ GROUP . equals ( currentGroup ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Checks if the import is placed in the correct group . <nl> - * @ param isStatic <nl> - * if import is static . <nl> - * @ param importFullPath <nl> - * import full path . <nl> - * @ param currentGroup <nl> - * current group . <nl> - * @ return true , if the import is placed in the same package group . <nl> + * Full import identifier <nl> + * @ param group <nl> + * Import group we are trying to assign the import <nl> + * @ param regExp <nl> + * Regular expression for import group <nl> + * @ param currentBestMatch <nl> + * object with currently best match <nl> + * @ return better match ( if found ) or the same ( currentBestMatch ) <nl> * / <nl> - private boolean matchesSamePackageImportGroup ( boolean isStatic , <nl> - String importFullPath , String currentGroup ) { <nl> - final String importPathTrimmedToSamePackageDepth = <nl> - getFirstNDomainsFromIdent ( samePackageMatchingDepth , importFullPath ) ; <nl> - return ! isStatic & & SAME _ PACKAGE _ RULE _ GROUP . equals ( currentGroup ) <nl> - & & samePackageDomainsRegExp . equals ( importPathTrimmedToSamePackageDepth ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Checks if the import is placed in the correct group . <nl> - * @ param isStatic <nl> - * if import is static . <nl> - * @ param currentImport <nl> - * import full path . <nl> - * @ param currentGroup <nl> - * current group . <nl> - * @ return true , if the import is placed in the standard group . <nl> - * / <nl> - private boolean matchesStandardImportGroup ( boolean isStatic , <nl> - String currentImport , String currentGroup ) { <nl> - return ! isStatic & & STANDARD _ JAVA _ PACKAGE _ RULE _ GROUP . equals ( currentGroup ) <nl> - & & standardPackageRegExp . matcher ( currentImport ) . find ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Checks if the import is placed in the correct group . <nl> - * @ param isStatic <nl> - * if import is static . <nl> - * @ param currentImport <nl> - * import full path . <nl> - * @ param currentGroup <nl> - * current group . <nl> - * @ return true , if the import is placed in the special group . <nl> - * / <nl> - private boolean matchesSpecialImportsGroup ( boolean isStatic , <nl> - String currentImport , String currentGroup ) { <nl> - return ! isStatic & & SPECIAL _ IMPORTS _ RULE _ GROUP . equals ( currentGroup ) <nl> - & & specialImportsRegExp . matcher ( currentImport ) . find ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Checks if the import is placed in the correct group . <nl> - * @ param isStatic <nl> - * if import is static . <nl> - * @ param currentImport <nl> - * import full path . <nl> - * @ param currentGroup <nl> - * current group . <nl> - * @ return true , if the import is placed in the third party group . <nl> - * / <nl> - private boolean matchesThirdPartyImportGroup ( boolean isStatic , <nl> - String currentImport , String currentGroup ) { <nl> - return ! isStatic & & THIRD _ PARTY _ PACKAGE _ RULE _ GROUP . equals ( currentGroup ) <nl> - & & thirdPartyPackageRegExp . matcher ( currentImport ) . find ( ) <nl> - & & ! standardPackageRegExp . matcher ( currentImport ) . find ( ) <nl> - & & ! specialImportsRegExp . matcher ( currentImport ) . find ( ) ; <nl> + private static RuleMatchForImport findBetterPatternMatch ( String importPath , String group , <nl> + Pattern regExp , RuleMatchForImport currentBestMatch ) { <nl> + RuleMatchForImport betterMatchCandidate = currentBestMatch ; <nl> + final Matcher matcher = regExp . matcher ( importPath ) ; <nl> + while ( matcher . find ( ) ) { <nl> + final int length = matcher . end ( ) - matcher . start ( ) ; <nl> + if ( length > betterMatchCandidate . matchLength <nl> + | | length = = betterMatchCandidate . matchLength <nl> + & & matcher . start ( ) < betterMatchCandidate . matchPosition ) { <nl> + betterMatchCandidate = new RuleMatchForImport ( group , length , matcher . start ( ) ) ; <nl> + } <nl> + } <nl> + return betterMatchCandidate ; <nl> } <nl> <nl> / * * <nl> @ @ - 866 , 4 + 862 , 32 @ @ public class CustomImportOrderCheck extends Check { <nl> return staticImport ; <nl> } <nl> } <nl> + <nl> + / * * <nl> + * Contains matching attributes assisting in definition of " best matching " <nl> + * group for import . <nl> + * @ author ivanov - alex <nl> + * / <nl> + private static class RuleMatchForImport { <nl> + / * * Import group for current best match . * / <nl> + private String group ; <nl> + / * * Length of matching string for current best match . * / <nl> + private int matchLength ; <nl> + / * * Position of matching string for current best match . * / <nl> + private final int matchPosition ; <nl> + <nl> + / * * Constructor to initialize the fields . <nl> + * @ param group <nl> + * Matched group . <nl> + * @ param length <nl> + * Matching length . <nl> + * @ param position <nl> + * Matching position . <nl> + * / <nl> + RuleMatchForImport ( String group , int length , int position ) { <nl> + this . group = group ; <nl> + matchLength = length ; <nl> + matchPosition = position ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> index 5638496 . . 89a41fc 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> @ @ - 153 , 14 + 153 , 13 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> final String [ ] expected = { <nl> " 4 : " + getCheckMessage ( MSG _ LEX , " java . awt . Button . ABORT " , " java . io . File . createTempFile " ) , <nl> - " 7 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " java . util . List " ) , <nl> - " 8 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " java . util . StringTokenizer " ) , <nl> - " 9 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " java . util . * " ) , <nl> - " 10 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " java . util . concurrent . AbstractExecutorService " ) , <nl> - " 11 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " java . util . concurrent . * " ) , <nl> - " 13 : " + getCheckMessage ( MSG _ LEX , " com . puppycrawl . tools . * " , " javax . swing . WindowConstants . * " ) , <nl> - " 14 : " + getCheckMessage ( MSG _ LEX , " com . * " , " javax . swing . WindowConstants . * " ) , <nl> - " 16 : " + getCheckMessage ( MSG _ LEX , " com . google . common . base . * " , " javax . swing . WindowConstants . * " ) , <nl> + " 7 : " + getCheckMessage ( MSG _ LEX , " java . util . List " , " javax . swing . WindowConstants . * " ) , <nl> + " 8 : " + getCheckMessage ( MSG _ LEX , " java . util . StringTokenizer " , " javax . swing . WindowConstants . * " ) , <nl> + " 9 : " + getCheckMessage ( MSG _ LEX , " java . util . * " , " javax . swing . WindowConstants . * " ) , <nl> + " 10 : " + getCheckMessage ( MSG _ LEX , " java . util . concurrent . AbstractExecutorService " , " javax . swing . WindowConstants . * " ) , <nl> + " 11 : " + getCheckMessage ( MSG _ LEX , " java . util . concurrent . * " , " javax . swing . WindowConstants . * " ) , <nl> + " 14 : " + getCheckMessage ( MSG _ LEX , " com . * " , " com . puppycrawl . tools . * " ) , <nl> + " 16 : " + getCheckMessage ( MSG _ LEX , " com . google . common . base . * " , " com . puppycrawl . tools . * " ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " imports " + File . separator <nl> @ @ - 479 , 7 + 478 , 6 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { <nl> public void testUnsupportedRule ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( CustomImportOrderCheck . class ) ; <nl> - <nl> / / # AAA # # BBBB # # # CCCC # # # # DDDD <nl> checkConfig . addAttribute ( " customImportOrderRules " , " SAME _ PACKAGE ( 3 ) # # # UNSUPPORTED _ RULE " ) ; <nl> checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> @ @ - 508 , 9 + 506 , 8 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { <nl> checkConfig . addAttribute ( " customImportOrderRules " , " SAME _ PACKAGE ( 3 ) " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> - verify ( checkConfig , new File ( " src / test / resources / com / puppycrawl / tools / " <nl> - + " checkstyle / imports / " <nl> - + " InputCustomImportOrder _ NoImports . java " ) . getCanonicalPath ( ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " imports " + File . separator <nl> + + " InputCustomImportOrder _ NoImports . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 524 , 4 + 521 , 70 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { <nl> + " InputCustomImportOrder . java " ) , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testRulesWithOverlappingPatterns ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( CustomImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " customImportOrderRules " , <nl> + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 6 ) # # # STANDARD _ JAVA _ PACKAGE # # # SPECIAL _ IMPORTS " ) ; <nl> + checkConfig . addAttribute ( " standardPackageRegExp " , " com . puppycrawl . tools . * Check $ " ) ; <nl> + checkConfig . addAttribute ( " specialImportsRegExp " , " com . puppycrawl . tools . * Tag * " ) ; <nl> + checkConfig . addAttribute ( " thirdPartyPackageRegExp " , " com . puppycrawl . tools . checkstyle . checks . javadoc . * Javadoc * " ) ; <nl> + final String [ ] expected = { <nl> + " 9 : " + getCheckMessage ( MSG _ ORDER , THIRD , STD , " com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl " ) , <nl> + " 21 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck " ) , <nl> + " 25 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , SPECIAL , " com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag " ) , <nl> + " 26 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck " ) , <nl> + " 27 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck " ) , <nl> + } ; <nl> + <nl> + createChecker ( checkConfig ) ; <nl> + verify ( checkConfig , getPath ( " imports " + File . separator <nl> + + " InputCustomImportOrder _ OverlappingPatterns . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMultiplePatternMatchesSecondPatternIsLonger ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( CustomImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " customImportOrderRules " , <nl> + " SPECIAL _ IMPORTS # # # STANDARD _ JAVA _ PACKAGE " ) ; <nl> + checkConfig . addAttribute ( " specialImportsRegExp " , " org " ) ; <nl> + checkConfig . addAttribute ( " standardPackageRegExp " , " junit " ) ; <nl> + String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + createChecker ( checkConfig ) ; <nl> + verify ( checkConfig , getPath ( " imports " + File . separator <nl> + + " InputCustomImportOrder _ MultiplePatternMatches . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMultiplePatternMatchesFirstPatternHasLaterPosition ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( CustomImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " customImportOrderRules " , <nl> + " SPECIAL _ IMPORTS # # # STANDARD _ JAVA _ PACKAGE " ) ; <nl> + checkConfig . addAttribute ( " specialImportsRegExp " , " Test " ) ; <nl> + checkConfig . addAttribute ( " standardPackageRegExp " , " unit " ) ; <nl> + String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + createChecker ( checkConfig ) ; <nl> + verify ( checkConfig , getPath ( " imports " + File . separator <nl> + + " InputCustomImportOrder _ MultiplePatternMatches . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMultiplePatternMatchesFirstPatternHasEarlierPosition ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( CustomImportOrderCheck . class ) ; <nl> + checkConfig . addAttribute ( " customImportOrderRules " , <nl> + " SPECIAL _ IMPORTS # # # STANDARD _ JAVA _ PACKAGE " ) ; <nl> + checkConfig . addAttribute ( " specialImportsRegExp " , " unit " ) ; <nl> + checkConfig . addAttribute ( " standardPackageRegExp " , " Test " ) ; <nl> + String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + createChecker ( checkConfig ) ; <nl> + verify ( checkConfig , getPath ( " imports " + File . separator <nl> + + " InputCustomImportOrder _ MultiplePatternMatches . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder2 . java <nl> index 3cb591d . . a87c97e 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder2 . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder2 . java <nl> @ @ - 1 , 20 + 1 , 28 @ @ <nl> package com . puppycrawl . tools . checkstyle . imports ; <nl> <nl> import static java . io . File . createTempFile ; <nl> - import static java . awt . Button . ABORT ; <nl> + import static java . awt . Button . ABORT ; / / warn , LEXIC , should be before java . io . File . createTempFile <nl> import static javax . swing . WindowConstants . * ; <nl> <nl> - import java . util . List ; <nl> - import java . util . StringTokenizer ; <nl> - import java . util . * ; <nl> - import java . util . concurrent . AbstractExecutorService ; <nl> - import java . util . concurrent . * ; <nl> + import java . util . List ; / / warn , LEXIC , should be before javax . swing . WindowConstants . * <nl> + import java . util . StringTokenizer ; / / warn , LEXIC , should be before javax . swing . WindowConstants . * <nl> + import java . util . * ; / / warn , LEXIC , should be before javax . swing . WindowConstants . * <nl> + import java . util . concurrent . AbstractExecutorService ; / / warn , LEXIC , should be before javax . swing . WindowConstants . * <nl> + import java . util . concurrent . * ; / / warn , LEXIC , should be before javax . swing . WindowConstants . * <nl> <nl> import com . puppycrawl . tools . * ; <nl> - import com . * ; <nl> + import com . * ; / / warn , LEXIC , should be before com . puppycrawl . tools . * <nl> <nl> - import com . google . common . base . * ; <nl> + import com . google . common . base . * ; / / warn , LEXIC , should be before com . puppycrawl . tools . * <nl> import org . junit . * ; <nl> <nl> public class InputCustomImportOrder2 { <nl> } <nl> + / * <nl> + test : testOrderRuleWithOneGroup ( ) <nl> + configuration : <nl> + checkConfig . addAttribute ( " thirdPartyPackageRegExp " , " org . " ) ; <nl> + checkConfig . addAttribute ( " customImportOrderRules " , <nl> + " STANDARD _ JAVA _ PACKAGE " ) ; <nl> + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> + * / <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ MultiplePatternMatches . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ MultiplePatternMatches . java <nl> new file mode 100644 <nl> index 0000000 . . 1002ece <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ MultiplePatternMatches . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + package com . puppycrawl . tools . checkstyle . imports ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + public class InputCustomImportOrder _ MultiplePatternMatches { <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> new file mode 100644 <nl> index 0000000 . . 10b8399 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . imports ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; <nl> + <nl> + / / every import from javadoc package has comment in brackets indicating presence of keywords <nl> + / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) <nl> + <nl> + / / STANDARD - keyword Check <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) <nl> + <nl> + / / SPECIAL _ IMPORTS - keyword Tag <nl> + <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) <nl> + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) <nl> + <nl> + import com . puppycrawl . tools . * ; <nl> + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) <nl> + import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) <nl> + <nl> + public class InputCustomImportOrder _ OverlappingPatterns { <nl> + } <nl> + / * <nl> + test : testRulesOrder _ ThirdBeforeSame ( ) <nl> + configuration : <nl> + checkConfig . addAttribute ( " customImportOrderRules " , <nl> + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; <nl> + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; <nl> + * / <nl> diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml <nl> index 06db91e . . a891f75 100644 <nl> - - - a / src / xdocs / config _ imports . xml <nl> + + + b / src / xdocs / config _ imports . xml <nl> @ @ - 825 , 7 + 825 , 49 @ @ import java . util . regex . Matcher ; / / # 8 <nl> < p > <nl> Use the separator ' # # # ' between rules . <nl> < / p > <nl> - < / subsection > <nl> + < p > <nl> + To set RegExps for THIRD _ PARTY _ PACKAGE and STANDARD _ JAVA _ PACKAGE groups use <nl> + thirdPartyPackageRegExp and standardPackageRegExp options . <nl> + < / p > <nl> + < p > <nl> + Pretty often one import can match more than one group . For example , static import from standard <nl> + package or regular expressions are configured to allow one import match multiple groups . <nl> + In this case , group will be assigned according to priorities : <nl> + < / p > <nl> + < ol > <nl> + < li > STATIC has top priority < / li > <nl> + < li > SAME _ PACKAGE has second priority < / li > <nl> + < li > STANDARD _ JAVA _ PACKAGE and SPECIAL _ IMPORTS will compete using " best match " rule : longer <nl> + matching substring wins ; in case of the same length , lower position of matching substring <nl> + wins ; if position is the same , order of rules in configuration solves the puzzle . < / li > <nl> + < li > THIRD _ PARTY has the least priority < / li > <nl> + < / ol > <nl> + < p > <nl> + Few examples to illustrate " best match " : <nl> + < / p > <nl> + < p > <nl> + 1 . patterns STANDARD _ JAVA _ PACKAGE = " Check " , SPECIAL _ IMPORTS = " ImportOrderCheck " and input file : <nl> + < / p > <nl> + < source > <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; <nl> + < / source > <nl> + < p > <nl> + Result : imports will be assigned to SPECIAL _ IMPORTS , because matching substring length is 16 . Matching <nl> + substring for STANDARD _ JAVA _ PACKAGE is 5 . <nl> + < / p > <nl> + < p > <nl> + 2 . patterns STANDARD _ JAVA _ PACKAGE = " Check " , SPECIAL _ IMPORTS = " Avoid " and file : <nl> + < / p > <nl> + < source > <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . AvoidStarImportCheck ; <nl> + < / source > <nl> + < p > <nl> + Result : import will be assigned to SPECIAL _ IMPORTS . Matching substring length is 5 for both <nl> + patterns . However , " Avoid " position is lower then " Check " position . <nl> + < / p > <nl> + <nl> + < / subsection > <nl> <nl> < subsection name = " Properties " > <nl> < table >

TEST DIFF:
diff - - git a / src / xdocs / writingjavadocchecks . xml . vm b / src / xdocs / writingjavadocchecks . xml . vm 
 index 11597ba . . 585c143 100644 
 - - - a / src / xdocs / writingjavadocchecks . xml . vm 
 + + + b / src / xdocs / writingjavadocchecks . xml . vm 
 @ @ - 75 , 8 + 75 , 14 @ @ public class MyClass { 
 < / ul > 
 
 < p > 
 - In Javadoc comment every whitespace matters , so parse tree contains whitespace nodes ( < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # WS " > WS < / a > javadoc token type ) . 
 - So do < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # CHAR " > CHAR < / a > javadoc token that presents single character . The only redundancy Javadoc tree has because of this is that < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # TEXT " > TEXT < / a > node consists of < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # CHAR " > CHAR < / a > and < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # WS " > WS < / a > nodes which is useless , but it is implementation nuance . ( In future we will try to resolve this ) . 
 + In Javadoc comment every whitespace matters , so parse tree contains whitespace nodes 
 + ( < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # WS " > WS < / a > javadoc token type ) . 
 + So do < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # CHAR " > CHAR < / a > javadoc token that presents single character . 
 + The only redundancy Javadoc tree has because of this is that 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # TEXT " > TEXT < / a > node consists of 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # CHAR " > CHAR < / a > and 
 + < a href = " apidocs / com / puppycrawl / tools / checkstyle / api / JavadocTokenTypes . html # WS " > WS < / a > nodes which is useless , but it is implementation nuance . 
 + ( In future we will try to resolve this . See < a href = " https : / / github . com / checkstyle / checkstyle / issues / 3170 " > Github Issue # 3170 < / a > ) . 
 < / p > 
 < / section > 


NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java 
 index a11ea4a . . cbc1edc 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheck . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . imports ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . StringTokenizer ; 
 + import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 
 import com . puppycrawl . tools . checkstyle . api . Check ; 
 @ @ - 38 , 30 + 39 , 30 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < / p > 
 * The rule consists of : 
 * 
 - * < pre > 
 - * STATIC group . This group sets the ordering of static imports . 
 - * < / pre > 
 + * < p > 
 + * 1 . STATIC group . This group sets the ordering of static imports . 
 + * < / p > 
 * 
 * < p > 
 - * SAME _ PACKAGE ( n ) group . This group sets the ordering of the same package imports . 
 + * 2 . SAME _ PACKAGE ( n ) group . This group sets the ordering of the same package imports . 
 * Imports are considered on SAME _ PACKAGE group if < b > n < / b > first domains in package name 
 * and import name are identical . 
 * < / p > 
 * 
 * < pre > 
 - * { @ code 
 - * package java . util . concurrent . locks ; 
 + * { @ code 
 + * package java . util . concurrent . locks ; 
 * 
 - * import java . io . File ; 
 - * import java . util . * ; / / # 1 
 - * import java . util . List ; / / # 2 
 - * import java . util . StringTokenizer ; / / # 3 
 - * import java . util . concurrent . * ; / / # 4 
 - * import java . util . concurrent . AbstractExecutorService ; / / # 5 
 - * import java . util . concurrent . locks . LockSupport ; / / # 6 
 - * import java . util . regex . Pattern ; / / # 7 
 - * import java . util . regex . Matcher ; / / # 8 
 - * } 
 + * import java . io . File ; 
 + * import java . util . * ; / / # 1 
 + * import java . util . List ; / / # 2 
 + * import java . util . StringTokenizer ; / / # 3 
 + * import java . util . concurrent . * ; / / # 4 
 + * import java . util . concurrent . AbstractExecutorService ; / / # 5 
 + * import java . util . concurrent . locks . LockSupport ; / / # 6 
 + * import java . util . regex . Pattern ; / / # 7 
 + * import java . util . regex . Matcher ; / / # 8 
 + * } 
 * < / pre > 
 * 
 * < p > 
 @ @ - 74 , 19 + 75 , 20 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < / p > 
 * 
 * < p > 
 - * THIRD _ PARTY _ PACKAGE group . This group sets ordering of third party imports . 
 + * 3 . THIRD _ PARTY _ PACKAGE group . This group sets ordering of third party imports . 
 * Third party imports are all imports except STATIC , 
 * SAME _ PACKAGE ( n ) , STANDARD _ JAVA _ PACKAGE and SPECIAL _ IMPORTS . 
 * < / p > 
 * 
 - * < pre > 
 - * STANDARD _ JAVA _ PACKAGE group . This group sets ordering of standard java / javax imports . 
 - * < / pre > 
 + * < p > 
 + * 4 . STANDARD _ JAVA _ PACKAGE group . By default this group sets ordering of standard java / javax 
 + * imports . 
 + * < / p > 
 * 
 - * < pre > 
 - * SPECIAL _ IMPORTS group . This group may contains some imports 
 + * < p > 
 + * 5 . SPECIAL _ IMPORTS group . This group may contains some imports 
 * that have particular meaning for the user . 
 - * < / pre > 
 + * < / p > 
 * 
 * < p > 
 * NOTE ! 
 @ @ - 95 , 12 + 97 , 60 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * Use the separator ' # # # ' between rules . 
 * < / p > 
 * < p > 
 - * To set Regexps for THIRD _ PARTY _ PACKAGE and STANDARD _ JAVA _ PACKAGE groups use 
 + * To set RegExps for THIRD _ PARTY _ PACKAGE and STANDARD _ JAVA _ PACKAGE groups use 
 * thirdPartyPackageRegExp and standardPackageRegExp options . 
 * < / p > 
 + * < p > 
 + * Pretty often one import can match more than one group . For example , static import from standard 
 + * package or regular expressions are configured to allow one import match multiple groups . 
 + * In this case , group will be assigned according to priorities : 
 + * < / p > 
 + * < ol > 
 + * < li > 
 + * STATIC has top priority 
 + * < / li > 
 + * < li > 
 + * SAME _ PACKAGE has second priority 
 + * < / li > 
 + * < li > 
 + * STANDARD _ JAVA _ PACKAGE and SPECIAL _ IMPORTS will compete using " best match " rule : longer 
 + * matching substring wins ; in case of the same length , lower position of matching substring 
 + * wins ; if position is the same , order of rules in configuration solves the puzzle . 
 + * < / li > 
 + * < li > 
 + * THIRD _ PARTY has the least priority 
 + * < / li > 
 + * < / ol > 
 + * < p > 
 + * Few examples to illustrate " best match " : 
 + * < / p > 
 + * < p > 
 + * 1 . patterns STANDARD _ JAVA _ PACKAGE = " Check " , SPECIAL _ IMPORTS = " ImportOrderCheck " and input 
 + * file : 
 + * < / p > 
 + * < pre > 
 + * { @ code 
 + * import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 + * import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; } 
 + * < / pre > 
 + * < p > 
 + * Result : imports will be assigned to SPECIAL _ IMPORTS , because matching substring length is 16 . 
 + * Matching substring for STANDARD _ JAVA _ PACKAGE is 5 . 
 + * < / p > 
 + * < p > 
 + * 2 . patterns STANDARD _ JAVA _ PACKAGE = " Check " , SPECIAL _ IMPORTS = " Avoid " and file : 
 + * < / p > 
 + * < pre > 
 + * { @ code 
 + * import com . puppycrawl . tools . checkstyle . checks . imports . AvoidStarImportCheck ; } 
 + * < / pre > 
 + * < p > 
 + * Result : import will be assigned to SPECIAL _ IMPORTS . Matching substring length is 5 for both 
 + * patterns . However , " Avoid " position is lower then " Check " position . 
 + * < / p > 
 * 
 * < pre > 
 - * Properties : 
 + * Properties : 
 * < / pre > 
 * < table summary = " Properties " border = " 1 " > 
 * < tr > < th > name < / th > < th > Description < / th > < th > type < / th > < th > default value < / th > < / tr > 
 @ @ - 120 , 9 + 170 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * in ASCII sort order . < / td > < td > boolean < / td > < td > false < / td > < / tr > 
 * < / table > 
 * 
 - * < pre > 
 + * < p > 
 * For example : 
 - * < / pre > 
 + * < / p > 
 * < p > To configure the check so that it matches default Eclipse formatter configuration 
 * ( tested on Kepler , Luna and Mars ) : < / p > 
 * < ul > 
 @ @ - 133 , 7 + 183 , 6 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < li > groups are separated by , at least , one blank line < / li > 
 * < / ul > 
 * < pre > 
 - * { @ code 
 * & lt ; module name = & quot ; CustomImportOrder & quot ; & gt ; 
 * & lt ; property name = & quot ; customImportOrderRules & quot ; 
 * value = & quot ; STATIC # # # STANDARD _ JAVA _ PACKAGE # # # SPECIAL _ IMPORTS & quot ; / & gt ; 
 @ @ - 141 , 7 + 190 , 6 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * & lt ; property name = & quot ; sortImportsInGroupAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; 
 * & lt ; property name = & quot ; separateLineBetweenGroups & quot ; value = & quot ; true & quot ; / & gt ; 
 * & lt ; / module & gt ; 
 - * } 
 * < / pre > 
 * 
 * < p > To configure the check so that it matches default IntelliJ IDEA formatter 
 @ @ - 161 , 7 + 209 , 6 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < / p > 
 * 
 * < pre > 
 - * { @ code 
 * & lt ; module name = & quot ; CustomImportOrder & quot ; & gt ; 
 * & lt ; property name = & quot ; customImportOrderRules & quot ; 
 * value = & quot ; THIRD _ PARTY _ PACKAGE # # # SPECIAL _ IMPORTS # # # STANDARD _ JAVA _ PACKAGE 
 @ @ - 171 , 7 + 218 , 6 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * & lt ; property name = & quot ; sortImportsInGroupAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; 
 * & lt ; property name = & quot ; separateLineBetweenGroups & quot ; value = & quot ; false & quot ; / & gt ; 
 * & lt ; / module & gt ; 
 - * } 
 * < / pre > 
 * 
 * < p > To configure the check so that it matches default NetBeans formatter 
 @ @ - 182 , 20 + 228 , 18 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < li > static imports are not separated , they will be sorted along with other imports < / li > 
 * < / ul > 
 * 
 - * { @ code 
 + * < pre > 
 * & lt ; module name = & quot ; CustomImportOrder & quot ; / & gt ; 
 - * } 
 - * < p > To set Regexps for THIRD _ PARTY _ PACKAGE and STANDARD _ JAVA _ PACKAGE groups use 
 + * < / pre > 
 + * < p > To set RegExps for THIRD _ PARTY _ PACKAGE and STANDARD _ JAVA _ PACKAGE groups use 
 * thirdPartyPackageRegExp and standardPackageRegExp options . < / p > 
 * < pre > 
 - * { @ code 
 * & lt ; module name = & quot ; CustomImportOrder & quot ; & gt ; 
 * & lt ; property name = & quot ; customImportOrderRules & quot ; 
 * value = & quot ; STATIC # # # SAME _ PACKAGE ( 3 ) # # # THIRD _ PARTY _ PACKAGE # # # STANDARD _ JAVA _ PACKAGE & quot ; / & gt ; 
 * & lt ; property name = & quot ; thirdPartyPackageRegExp & quot ; value = & quot ; com | org & quot ; / & gt ; 
 * & lt ; property name = & quot ; standardPackageRegExp & quot ; value = & quot ; ^ ( java | javax ) \ . & quot ; / & gt ; 
 * & lt ; / module & gt ; 
 - * } 
 * < / pre > 
 * < p > 
 * Also , this check can be configured to force empty line separator between 
 @ @ - 203 , 11 + 247 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < / p > 
 * 
 * < pre > 
 - * { @ code 
 * & lt ; module name = & quot ; CustomImportOrder & quot ; & gt ; 
 * & lt ; property name = & quot ; separateLineBetweenGroups & quot ; value = & quot ; true & quot ; / & gt ; 
 * & lt ; / module & gt ; 
 - * } 
 * < / pre > 
 * < p > 
 * It is possible to enforce 
 @ @ - 215 , 20 + 257 , 20 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * of imports in groups using the following configuration : 
 * < / p > 
 * < pre > 
 - * { @ code & lt ; module name = & quot ; CustomImportOrder & quot ; & gt ; 
 + * & lt ; module name = & quot ; CustomImportOrder & quot ; & gt ; 
 * & lt ; property name = & quot ; sortImportsInGroupAlphabetically & quot ; value = & quot ; true & quot ; / & gt ; 
 * & lt ; / module & gt ; 
 - * } 
 * < / pre > 
 * < p > 
 * Example of ASCII order : 
 * < / p > 
 * < pre > 
 - * { @ code import java . awt . Dialog ; 
 - * import java . awt . Window ; 
 - * import java . awt . color . ColorSpace ; 
 - * import java . awt . Frame ; / / violation here - in ASCII order ' F ' should go before ' c ' , 
 - * / / as all uppercase come before lowercase letters } 
 + * { @ code 
 + * import java . awt . Dialog ; 
 + * import java . awt . Window ; 
 + * import java . awt . color . ColorSpace ; 
 + * import java . awt . Frame ; / / violation here - in ASCII order ' F ' should go before ' c ' , 
 + * / / as all uppercase come before lowercase letters } 
 * < / pre > 
 * < p > 
 * To force checking imports sequence such as : 
 @ @ - 252 , 12 + 294 , 11 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * < / pre > 
 * configure as follows : 
 * < pre > 
 - * { @ code 
 * & lt ; module name = & quot ; CustomImportOrder & quot ; & gt ; 
 * & lt ; property name = & quot ; customImportOrderRules & quot ; 
 * value = & quot ; SAME _ PACKAGE ( 3 ) # # # THIRD _ PARTY _ PACKAGE # # # STATIC # # # SPECIAL _ IMPORTS & quot ; / & gt ; 
 * & lt ; property name = & quot ; specialImportsRegExp & quot ; value = & quot ; android . * & quot ; / & gt ; 
 - * & lt ; / module & gt ; } 
 + * & lt ; / module & gt ; 
 * < / pre > 
 * 
 * @ author maxvetrenko 
 @ @ - 572 , 110 + 613 , 65 @ @ public class CustomImportOrderCheck extends Check { 
 * @ return import valid group . 
 * / 
 private String getImportGroup ( boolean isStatic , String importPath ) { 
 - for ( String group : customImportOrderRules ) { 
 - if ( matchesImportGroup ( isStatic , importPath , group ) ) { 
 - return group ; 
 + RuleMatchForImport bestMatch = new RuleMatchForImport ( NON _ GROUP _ RULE _ GROUP , 0 , 0 ) ; 
 + if ( isStatic & & customImportOrderRules . contains ( STATIC _ RULE _ GROUP ) ) { 
 + bestMatch . group = STATIC _ RULE _ GROUP ; 
 + bestMatch . matchLength = importPath . length ( ) ; 
 + } 
 + else if ( customImportOrderRules . contains ( SAME _ PACKAGE _ RULE _ GROUP ) ) { 
 + final String importPathTrimmedToSamePackageDepth = 
 + getFirstNDomainsFromIdent ( samePackageMatchingDepth , importPath ) ; 
 + if ( samePackageDomainsRegExp . equals ( importPathTrimmedToSamePackageDepth ) ) { 
 + bestMatch . group = SAME _ PACKAGE _ RULE _ GROUP ; 
 + bestMatch . matchLength = importPath . length ( ) ; 
 } 
 } 
 - return NON _ GROUP _ RULE _ GROUP ; 
 + if ( bestMatch . group . equals ( NON _ GROUP _ RULE _ GROUP ) ) { 
 + for ( String group : customImportOrderRules ) { 
 + if ( STANDARD _ JAVA _ PACKAGE _ RULE _ GROUP . equals ( group ) ) { 
 + bestMatch = findBetterPatternMatch ( importPath , 
 + STANDARD _ JAVA _ PACKAGE _ RULE _ GROUP , standardPackageRegExp , bestMatch ) ; 
 + } 
 + if ( SPECIAL _ IMPORTS _ RULE _ GROUP . equals ( group ) ) { 
 + bestMatch = findBetterPatternMatch ( importPath , 
 + SPECIAL _ IMPORTS _ RULE _ GROUP , specialImportsRegExp , bestMatch ) ; 
 + } 
 + } 
 + } 
 + if ( bestMatch . group . equals ( NON _ GROUP _ RULE _ GROUP ) 
 + & & customImportOrderRules . contains ( THIRD _ PARTY _ PACKAGE _ RULE _ GROUP ) 
 + & & thirdPartyPackageRegExp . matcher ( importPath ) . find ( ) ) { 
 + bestMatch . group = THIRD _ PARTY _ PACKAGE _ RULE _ GROUP ; 
 + } 
 + return bestMatch . group ; 
 } 
 
 - / * * 
 - * Checks if the import is placed in the correct group . 
 - * @ param isStatic 
 - * if import is static . 
 + / * * Tries to find better matching regular expression : 
 + * longer matching substring wins ; in case of the same length , 
 + * lower position of matching substring wins . 
 * @ param importPath 
 - * import full path . 
 - * @ param currentGroup 
 - * current group . 
 - * @ return true , if import placed in the correct group . 
 - * / 
 - private boolean matchesImportGroup ( boolean isStatic , String importPath , String currentGroup ) { 
 - return matchesStaticImportGroup ( isStatic , currentGroup ) 
 - | | matchesSamePackageImportGroup ( isStatic , importPath , currentGroup ) 
 - | | matchesSpecialImportsGroup ( isStatic , importPath , currentGroup ) 
 - | | matchesStandardImportGroup ( isStatic , importPath , currentGroup ) 
 - | | matchesThirdPartyImportGroup ( isStatic , importPath , currentGroup ) ; 
 - } 
 - 
 - / * * 
 - * Checks if the import is placed in the STATIC group . 
 - * @ param isStatic 
 - * is static import . 
 - * @ param currentGroup 
 - * current group . 
 - * @ return true , if the import is placed in the static group . 
 - * / 
 - private static boolean matchesStaticImportGroup ( boolean isStatic , String currentGroup ) { 
 - return isStatic & & STATIC _ RULE _ GROUP . equals ( currentGroup ) ; 
 - } 
 - 
 - / * * 
 - * Checks if the import is placed in the correct group . 
 - * @ param isStatic 
 - * if import is static . 
 - * @ param importFullPath 
 - * import full path . 
 - * @ param currentGroup 
 - * current group . 
 - * @ return true , if the import is placed in the same package group . 
 + * Full import identifier 
 + * @ param group 
 + * Import group we are trying to assign the import 
 + * @ param regExp 
 + * Regular expression for import group 
 + * @ param currentBestMatch 
 + * object with currently best match 
 + * @ return better match ( if found ) or the same ( currentBestMatch ) 
 * / 
 - private boolean matchesSamePackageImportGroup ( boolean isStatic , 
 - String importFullPath , String currentGroup ) { 
 - final String importPathTrimmedToSamePackageDepth = 
 - getFirstNDomainsFromIdent ( samePackageMatchingDepth , importFullPath ) ; 
 - return ! isStatic & & SAME _ PACKAGE _ RULE _ GROUP . equals ( currentGroup ) 
 - & & samePackageDomainsRegExp . equals ( importPathTrimmedToSamePackageDepth ) ; 
 - } 
 - 
 - / * * 
 - * Checks if the import is placed in the correct group . 
 - * @ param isStatic 
 - * if import is static . 
 - * @ param currentImport 
 - * import full path . 
 - * @ param currentGroup 
 - * current group . 
 - * @ return true , if the import is placed in the standard group . 
 - * / 
 - private boolean matchesStandardImportGroup ( boolean isStatic , 
 - String currentImport , String currentGroup ) { 
 - return ! isStatic & & STANDARD _ JAVA _ PACKAGE _ RULE _ GROUP . equals ( currentGroup ) 
 - & & standardPackageRegExp . matcher ( currentImport ) . find ( ) ; 
 - } 
 - 
 - / * * 
 - * Checks if the import is placed in the correct group . 
 - * @ param isStatic 
 - * if import is static . 
 - * @ param currentImport 
 - * import full path . 
 - * @ param currentGroup 
 - * current group . 
 - * @ return true , if the import is placed in the special group . 
 - * / 
 - private boolean matchesSpecialImportsGroup ( boolean isStatic , 
 - String currentImport , String currentGroup ) { 
 - return ! isStatic & & SPECIAL _ IMPORTS _ RULE _ GROUP . equals ( currentGroup ) 
 - & & specialImportsRegExp . matcher ( currentImport ) . find ( ) ; 
 - } 
 - 
 - / * * 
 - * Checks if the import is placed in the correct group . 
 - * @ param isStatic 
 - * if import is static . 
 - * @ param currentImport 
 - * import full path . 
 - * @ param currentGroup 
 - * current group . 
 - * @ return true , if the import is placed in the third party group . 
 - * / 
 - private boolean matchesThirdPartyImportGroup ( boolean isStatic , 
 - String currentImport , String currentGroup ) { 
 - return ! isStatic & & THIRD _ PARTY _ PACKAGE _ RULE _ GROUP . equals ( currentGroup ) 
 - & & thirdPartyPackageRegExp . matcher ( currentImport ) . find ( ) 
 - & & ! standardPackageRegExp . matcher ( currentImport ) . find ( ) 
 - & & ! specialImportsRegExp . matcher ( currentImport ) . find ( ) ; 
 + private static RuleMatchForImport findBetterPatternMatch ( String importPath , String group , 
 + Pattern regExp , RuleMatchForImport currentBestMatch ) { 
 + RuleMatchForImport betterMatchCandidate = currentBestMatch ; 
 + final Matcher matcher = regExp . matcher ( importPath ) ; 
 + while ( matcher . find ( ) ) { 
 + final int length = matcher . end ( ) - matcher . start ( ) ; 
 + if ( length > betterMatchCandidate . matchLength 
 + | | length = = betterMatchCandidate . matchLength 
 + & & matcher . start ( ) < betterMatchCandidate . matchPosition ) { 
 + betterMatchCandidate = new RuleMatchForImport ( group , length , matcher . start ( ) ) ; 
 + } 
 + } 
 + return betterMatchCandidate ; 
 } 
 
 / * * 
 @ @ - 866 , 4 + 862 , 32 @ @ public class CustomImportOrderCheck extends Check { 
 return staticImport ; 
 } 
 } 
 + 
 + / * * 
 + * Contains matching attributes assisting in definition of " best matching " 
 + * group for import . 
 + * @ author ivanov - alex 
 + * / 
 + private static class RuleMatchForImport { 
 + / * * Import group for current best match . * / 
 + private String group ; 
 + / * * Length of matching string for current best match . * / 
 + private int matchLength ; 
 + / * * Position of matching string for current best match . * / 
 + private final int matchPosition ; 
 + 
 + / * * Constructor to initialize the fields . 
 + * @ param group 
 + * Matched group . 
 + * @ param length 
 + * Matching length . 
 + * @ param position 
 + * Matching position . 
 + * / 
 + RuleMatchForImport ( String group , int length , int position ) { 
 + this . group = group ; 
 + matchLength = length ; 
 + matchPosition = position ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 index 5638496 . . 89a41fc 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 @ @ - 153 , 14 + 153 , 13 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 final String [ ] expected = { 
 " 4 : " + getCheckMessage ( MSG _ LEX , " java . awt . Button . ABORT " , " java . io . File . createTempFile " ) , 
 - " 7 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " java . util . List " ) , 
 - " 8 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " java . util . StringTokenizer " ) , 
 - " 9 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " java . util . * " ) , 
 - " 10 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " java . util . concurrent . AbstractExecutorService " ) , 
 - " 11 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " java . util . concurrent . * " ) , 
 - " 13 : " + getCheckMessage ( MSG _ LEX , " com . puppycrawl . tools . * " , " javax . swing . WindowConstants . * " ) , 
 - " 14 : " + getCheckMessage ( MSG _ LEX , " com . * " , " javax . swing . WindowConstants . * " ) , 
 - " 16 : " + getCheckMessage ( MSG _ LEX , " com . google . common . base . * " , " javax . swing . WindowConstants . * " ) , 
 + " 7 : " + getCheckMessage ( MSG _ LEX , " java . util . List " , " javax . swing . WindowConstants . * " ) , 
 + " 8 : " + getCheckMessage ( MSG _ LEX , " java . util . StringTokenizer " , " javax . swing . WindowConstants . * " ) , 
 + " 9 : " + getCheckMessage ( MSG _ LEX , " java . util . * " , " javax . swing . WindowConstants . * " ) , 
 + " 10 : " + getCheckMessage ( MSG _ LEX , " java . util . concurrent . AbstractExecutorService " , " javax . swing . WindowConstants . * " ) , 
 + " 11 : " + getCheckMessage ( MSG _ LEX , " java . util . concurrent . * " , " javax . swing . WindowConstants . * " ) , 
 + " 14 : " + getCheckMessage ( MSG _ LEX , " com . * " , " com . puppycrawl . tools . * " ) , 
 + " 16 : " + getCheckMessage ( MSG _ LEX , " com . google . common . base . * " , " com . puppycrawl . tools . * " ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " imports " + File . separator 
 @ @ - 479 , 7 + 478 , 6 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { 
 public void testUnsupportedRule ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( CustomImportOrderCheck . class ) ; 
 - 
 / / # AAA # # BBBB # # # CCCC # # # # DDDD 
 checkConfig . addAttribute ( " customImportOrderRules " , " SAME _ PACKAGE ( 3 ) # # # UNSUPPORTED _ RULE " ) ; 
 checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 @ @ - 508 , 9 + 506 , 8 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { 
 checkConfig . addAttribute ( " customImportOrderRules " , " SAME _ PACKAGE ( 3 ) " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 - verify ( checkConfig , new File ( " src / test / resources / com / puppycrawl / tools / " 
 - + " checkstyle / imports / " 
 - + " InputCustomImportOrder _ NoImports . java " ) . getCanonicalPath ( ) , expected ) ; 
 + verify ( checkConfig , getPath ( " imports " + File . separator 
 + + " InputCustomImportOrder _ NoImports . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 524 , 4 + 521 , 70 @ @ public class CustomImportOrderCheckTest extends BaseCheckTestSupport { 
 + " InputCustomImportOrder . java " ) , expected ) ; 
 } 
 
 + @ Test 
 + public void testRulesWithOverlappingPatterns ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( CustomImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " customImportOrderRules " , 
 + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 6 ) # # # STANDARD _ JAVA _ PACKAGE # # # SPECIAL _ IMPORTS " ) ; 
 + checkConfig . addAttribute ( " standardPackageRegExp " , " com . puppycrawl . tools . * Check $ " ) ; 
 + checkConfig . addAttribute ( " specialImportsRegExp " , " com . puppycrawl . tools . * Tag * " ) ; 
 + checkConfig . addAttribute ( " thirdPartyPackageRegExp " , " com . puppycrawl . tools . checkstyle . checks . javadoc . * Javadoc * " ) ; 
 + final String [ ] expected = { 
 + " 9 : " + getCheckMessage ( MSG _ ORDER , THIRD , STD , " com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl " ) , 
 + " 21 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck " ) , 
 + " 25 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , SPECIAL , " com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag " ) , 
 + " 26 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck " ) , 
 + " 27 : " + getCheckMessage ( MSG _ NONGROUP _ EXPECTED , STD , " com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck " ) , 
 + } ; 
 + 
 + createChecker ( checkConfig ) ; 
 + verify ( checkConfig , getPath ( " imports " + File . separator 
 + + " InputCustomImportOrder _ OverlappingPatterns . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testMultiplePatternMatchesSecondPatternIsLonger ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( CustomImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " customImportOrderRules " , 
 + " SPECIAL _ IMPORTS # # # STANDARD _ JAVA _ PACKAGE " ) ; 
 + checkConfig . addAttribute ( " specialImportsRegExp " , " org " ) ; 
 + checkConfig . addAttribute ( " standardPackageRegExp " , " junit " ) ; 
 + String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + createChecker ( checkConfig ) ; 
 + verify ( checkConfig , getPath ( " imports " + File . separator 
 + + " InputCustomImportOrder _ MultiplePatternMatches . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testMultiplePatternMatchesFirstPatternHasLaterPosition ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( CustomImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " customImportOrderRules " , 
 + " SPECIAL _ IMPORTS # # # STANDARD _ JAVA _ PACKAGE " ) ; 
 + checkConfig . addAttribute ( " specialImportsRegExp " , " Test " ) ; 
 + checkConfig . addAttribute ( " standardPackageRegExp " , " unit " ) ; 
 + String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + createChecker ( checkConfig ) ; 
 + verify ( checkConfig , getPath ( " imports " + File . separator 
 + + " InputCustomImportOrder _ MultiplePatternMatches . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testMultiplePatternMatchesFirstPatternHasEarlierPosition ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( CustomImportOrderCheck . class ) ; 
 + checkConfig . addAttribute ( " customImportOrderRules " , 
 + " SPECIAL _ IMPORTS # # # STANDARD _ JAVA _ PACKAGE " ) ; 
 + checkConfig . addAttribute ( " specialImportsRegExp " , " unit " ) ; 
 + checkConfig . addAttribute ( " standardPackageRegExp " , " Test " ) ; 
 + String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + createChecker ( checkConfig ) ; 
 + verify ( checkConfig , getPath ( " imports " + File . separator 
 + + " InputCustomImportOrder _ MultiplePatternMatches . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder2 . java 
 index 3cb591d . . a87c97e 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder2 . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder2 . java 
 @ @ - 1 , 20 + 1 , 28 @ @ 
 package com . puppycrawl . tools . checkstyle . imports ; 
 
 import static java . io . File . createTempFile ; 
 - import static java . awt . Button . ABORT ; 
 + import static java . awt . Button . ABORT ; / / warn , LEXIC , should be before java . io . File . createTempFile 
 import static javax . swing . WindowConstants . * ; 
 
 - import java . util . List ; 
 - import java . util . StringTokenizer ; 
 - import java . util . * ; 
 - import java . util . concurrent . AbstractExecutorService ; 
 - import java . util . concurrent . * ; 
 + import java . util . List ; / / warn , LEXIC , should be before javax . swing . WindowConstants . * 
 + import java . util . StringTokenizer ; / / warn , LEXIC , should be before javax . swing . WindowConstants . * 
 + import java . util . * ; / / warn , LEXIC , should be before javax . swing . WindowConstants . * 
 + import java . util . concurrent . AbstractExecutorService ; / / warn , LEXIC , should be before javax . swing . WindowConstants . * 
 + import java . util . concurrent . * ; / / warn , LEXIC , should be before javax . swing . WindowConstants . * 
 
 import com . puppycrawl . tools . * ; 
 - import com . * ; 
 + import com . * ; / / warn , LEXIC , should be before com . puppycrawl . tools . * 
 
 - import com . google . common . base . * ; 
 + import com . google . common . base . * ; / / warn , LEXIC , should be before com . puppycrawl . tools . * 
 import org . junit . * ; 
 
 public class InputCustomImportOrder2 { 
 } 
 + / * 
 + test : testOrderRuleWithOneGroup ( ) 
 + configuration : 
 + checkConfig . addAttribute ( " thirdPartyPackageRegExp " , " org . " ) ; 
 + checkConfig . addAttribute ( " customImportOrderRules " , 
 + " STANDARD _ JAVA _ PACKAGE " ) ; 
 + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 + * / 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ MultiplePatternMatches . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ MultiplePatternMatches . java 
 new file mode 100644 
 index 0000000 . . 1002ece 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ MultiplePatternMatches . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package com . puppycrawl . tools . checkstyle . imports ; 
 + 
 + import org . junit . Test ; 
 + 
 + public class InputCustomImportOrder _ MultiplePatternMatches { 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 new file mode 100644 
 index 0000000 . . 10b8399 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / imports / InputCustomImportOrder _ OverlappingPatterns . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . imports ; 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderOption ; 
 + 
 + / / every import from javadoc package has comment in brackets indicating presence of keywords 
 + / / Javadoc , Check , Tag . For example J _ T = Javadoc , no Check , Tag 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocNodeImpl ; / / warn , should be on THIRD - PARTY ( J _ _ ) 
 + 
 + / / STANDARD - keyword Check 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . AbstractJavadocCheck ; / / ( JC _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . AtclauseOrderCheck ; / / ( _ C _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTagContinuationIndentationCheck ; / / ( JCT ) 
 + 
 + / / SPECIAL _ IMPORTS - keyword Tag 
 + 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . InvalidJavadocTag ; / / ( J _ T ) 
 + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . TagParser ; / / ( _ _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . WriteTagCheck ; / / warn , should be on STANDARD ( _ CT ) 
 + 
 + import com . puppycrawl . tools . * ; 
 + / / import com . puppycrawl . tools . checkstyle . checks . javadoc . HtmlTag ; / / warn , should be on SPECIAL ( _ _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocTag ; / / warn , should be on SPECIAL ( J _ T ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . JavadocMethodCheck ; / / warn , should be on STANDARD ( JC _ ) 
 + import com . puppycrawl . tools . checkstyle . checks . javadoc . NonEmptyAtclauseDescriptionCheck ; / / warn , should be on STANDARD ( _ C _ ) 
 + 
 + public class InputCustomImportOrder _ OverlappingPatterns { 
 + } 
 + / * 
 + test : testRulesOrder _ ThirdBeforeSame ( ) 
 + configuration : 
 + checkConfig . addAttribute ( " customImportOrderRules " , 
 + " THIRD _ PARTY _ PACKAGE # # # SAME _ PACKAGE ( 3 ) # # # SPECIAL _ IMPORTS " ) ; 
 + checkConfig . addAttribute ( " sortImportsInGroupAlphabetically " , " true " ) ; 
 + * / 
 diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml 
 index 06db91e . . a891f75 100644 
 - - - a / src / xdocs / config _ imports . xml 
 + + + b / src / xdocs / config _ imports . xml 
 @ @ - 825 , 7 + 825 , 49 @ @ import java . util . regex . Matcher ; / / # 8 
 < p > 
 Use the separator ' # # # ' between rules . 
 < / p > 
 - < / subsection > 
 + < p > 
 + To set RegExps for THIRD _ PARTY _ PACKAGE and STANDARD _ JAVA _ PACKAGE groups use 
 + thirdPartyPackageRegExp and standardPackageRegExp options . 
 + < / p > 
 + < p > 
 + Pretty often one import can match more than one group . For example , static import from standard 
 + package or regular expressions are configured to allow one import match multiple groups . 
 + In this case , group will be assigned according to priorities : 
 + < / p > 
 + < ol > 
 + < li > STATIC has top priority < / li > 
 + < li > SAME _ PACKAGE has second priority < / li > 
 + < li > STANDARD _ JAVA _ PACKAGE and SPECIAL _ IMPORTS will compete using " best match " rule : longer 
 + matching substring wins ; in case of the same length , lower position of matching substring 
 + wins ; if position is the same , order of rules in configuration solves the puzzle . < / li > 
 + < li > THIRD _ PARTY has the least priority < / li > 
 + < / ol > 
 + < p > 
 + Few examples to illustrate " best match " : 
 + < / p > 
 + < p > 
 + 1 . patterns STANDARD _ JAVA _ PACKAGE = " Check " , SPECIAL _ IMPORTS = " ImportOrderCheck " and input file : 
 + < / p > 
 + < source > 
 + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck ; 
 + < / source > 
 + < p > 
 + Result : imports will be assigned to SPECIAL _ IMPORTS , because matching substring length is 16 . Matching 
 + substring for STANDARD _ JAVA _ PACKAGE is 5 . 
 + < / p > 
 + < p > 
 + 2 . patterns STANDARD _ JAVA _ PACKAGE = " Check " , SPECIAL _ IMPORTS = " Avoid " and file : 
 + < / p > 
 + < source > 
 + import com . puppycrawl . tools . checkstyle . checks . imports . AvoidStarImportCheck ; 
 + < / source > 
 + < p > 
 + Result : import will be assigned to SPECIAL _ IMPORTS . Matching substring length is 5 for both 
 + patterns . However , " Avoid " position is lower then " Check " position . 
 + < / p > 
 + 
 + < / subsection > 
 
 < subsection name = " Properties " > 
 < table >
