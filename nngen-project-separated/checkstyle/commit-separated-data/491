BLEU SCORE: 0.08295193507109855

TEST MSG: Issue # 5228 : fixed violations in it for test makeup
GENERATED MSG: Issue # 1243 : Useless Class variables

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java <nl> index 812a15e . . f8088a4 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java <nl> @ @ - 19 , 31 + 19 , 22 @ @ <nl> <nl> package com . google . checkstyle . test . chapter5naming . rule51identifiernames ; <nl> <nl> - import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> import com . google . checkstyle . test . base . AbstractModuleTestSupport ; <nl> - import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> <nl> public class CatchParameterNameTest extends AbstractModuleTestSupport { <nl> - private static Configuration checkConfig ; <nl> - private static String format ; <nl> - <nl> @ Override <nl> protected String getPackageLocation ( ) { <nl> return " com / google / checkstyle / test / chapter5naming / rule51identifiernames " ; <nl> } <nl> <nl> - @ BeforeClass <nl> - public static void setConfigurationBuilder ( ) throws CheckstyleException { <nl> - checkConfig = getModuleConfig ( " CatchParameterName " ) ; <nl> - format = checkConfig . getAttribute ( " format " ) ; <nl> - } <nl> - <nl> @ Test <nl> public void testCatchParameterName ( ) throws Exception { <nl> final String msgKey = " name . invalidPattern " ; <nl> + final Configuration checkConfig = getModuleConfig ( " CatchParameterName " ) ; <nl> + final String format = checkConfig . getAttribute ( " format " ) ; <nl> <nl> final String [ ] expected = { <nl> " 47 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " iException " , format ) , <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java <nl> index 72ec64d . . 56f5d2f 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java <nl> @ @ - 22 , 19 + 22 , 15 @ @ package com . google . checkstyle . test . chapter5naming . rule521packagenames ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> - import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> import com . google . checkstyle . test . base . AbstractModuleTestSupport ; <nl> - import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class PackageNameTest extends AbstractModuleTestSupport { <nl> <nl> private static final String MSG _ KEY = " name . invalidPattern " ; <nl> - private static Configuration checkConfig ; <nl> - private static String format ; <nl> <nl> @ Override <nl> protected String getPackageLocation ( ) { <nl> @ @ - 45 , 15 + 41 , 10 @ @ public class PackageNameTest extends AbstractModuleTestSupport { <nl> return getPath ( " rule521 " + packageName + File . separator + fileName ) ; <nl> } <nl> <nl> - @ BeforeClass <nl> - public static void setConfigurationBuilder ( ) throws CheckstyleException { <nl> - checkConfig = getModuleConfig ( " PackageName " ) ; <nl> - format = checkConfig . getAttribute ( " format " ) ; <nl> - } <nl> - <nl> @ Test <nl> public void testGoodPackageName ( ) throws Exception { <nl> <nl> + final Configuration checkConfig = getModuleConfig ( " PackageName " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> final String filePath = getPath ( " packagenames " , " InputPackageNameGood . java " ) ; <nl> @ @ - 67 , 6 + 58 , 8 @ @ public class PackageNameTest extends AbstractModuleTestSupport { <nl> <nl> final String packagePath = <nl> " com . google . checkstyle . test . chapter5naming . rule521packageNamesCamelCase " ; <nl> + final Configuration checkConfig = getModuleConfig ( " PackageName " ) ; <nl> + final String format = checkConfig . getAttribute ( " format " ) ; <nl> final String msg = getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , packagePath , format ) ; <nl> <nl> final String [ ] expected = { <nl> @ @ - 83 , 6 + 76 , 8 @ @ public class PackageNameTest extends AbstractModuleTestSupport { <nl> public void testBadPackageName2 ( ) throws Exception { <nl> <nl> final String packagePath = " com . google . checkstyle . test . chapter5naming . rule521 _ packagenames " ; <nl> + final Configuration checkConfig = getModuleConfig ( " PackageName " ) ; <nl> + final String format = checkConfig . getAttribute ( " format " ) ; <nl> final String msg = getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , packagePath , format ) ; <nl> <nl> final String [ ] expected = { <nl> @ @ - 99 , 6 + 94 , 8 @ @ public class PackageNameTest extends AbstractModuleTestSupport { <nl> public void testBadPackageName3 ( ) throws Exception { <nl> <nl> final String packagePath = " com . google . checkstyle . test . chapter5naming . rule521 $ packagenames " ; <nl> + final Configuration checkConfig = getModuleConfig ( " PackageName " ) ; <nl> + final String format = checkConfig . getAttribute ( " format " ) ; <nl> final String msg = getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , packagePath , format ) ; <nl> <nl> final String [ ] expected = { <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule525nonconstantfieldnames / MemberNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule525nonconstantfieldnames / MemberNameTest . java <nl> index 0b88a44 . . 0ad3fb6 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule525nonconstantfieldnames / MemberNameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule525nonconstantfieldnames / MemberNameTest . java <nl> @ @ - 19 , 33 + 19 , 25 @ @ <nl> <nl> package com . google . checkstyle . test . chapter5naming . rule525nonconstantfieldnames ; <nl> <nl> - import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> import com . google . checkstyle . test . base . AbstractModuleTestSupport ; <nl> - import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> <nl> public class MemberNameTest extends AbstractModuleTestSupport { <nl> <nl> private static final String MSG _ KEY = " name . invalidPattern " ; <nl> - private static Configuration checkConfig ; <nl> - private static String format ; <nl> <nl> @ Override <nl> protected String getPackageLocation ( ) { <nl> return " com / google / checkstyle / test / chapter5naming / rule525nonconstantfieldnames " ; <nl> } <nl> <nl> - @ BeforeClass <nl> - public static void setConfigurationBuilder ( ) throws CheckstyleException { <nl> - checkConfig = getModuleConfig ( " MemberName " ) ; <nl> - format = checkConfig . getAttribute ( " format " ) ; <nl> - } <nl> - <nl> @ Test <nl> public void testMemberName ( ) throws Exception { <nl> <nl> + final Configuration checkConfig = getModuleConfig ( " MemberName " ) ; <nl> + final String format = checkConfig . getAttribute ( " format " ) ; <nl> final String [ ] expected = { <nl> " 5 : 16 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " mPublic " , format ) , <nl> " 6 : 19 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " mProtected " , format ) , <nl> @ @ - 71 , 6 + 63 , 8 @ @ public class MemberNameTest extends AbstractModuleTestSupport { <nl> @ Test <nl> public void testSimple ( ) throws Exception { <nl> <nl> + final Configuration checkConfig = getModuleConfig ( " MemberName " ) ; <nl> + final String format = checkConfig . getAttribute ( " format " ) ; <nl> final String [ ] expected = { <nl> " 12 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " bad $ Static " , format ) , <nl> " 17 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " bad _ Member " , format ) , <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java <nl> index 39fae05 . . 1c499a1 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java <nl> @ @ - 19 , 40 + 19 , 25 @ @ <nl> <nl> package com . google . checkstyle . test . chapter5naming . rule526parameternames ; <nl> <nl> - import java . util . List ; <nl> - <nl> - import org . junit . Assert ; <nl> - import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> import com . google . checkstyle . test . base . AbstractModuleTestSupport ; <nl> - import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> <nl> public class ParameterNameTest extends AbstractModuleTestSupport { <nl> <nl> private static final String MSG _ KEY = " name . invalidPattern " ; <nl> - private static String format ; <nl> - private static Configuration config ; <nl> <nl> @ Override <nl> protected String getPackageLocation ( ) { <nl> return " com / google / checkstyle / test / chapter5naming / rule526parameternames " ; <nl> } <nl> <nl> - @ BeforeClass <nl> - public static void setConfigurationBuilder ( ) throws CheckstyleException { <nl> - final List < Configuration > configs = getModuleConfigs ( " ParameterName " ) ; <nl> - <nl> - Assert . assertEquals ( " Invalid configs size " , 1 , configs . size ( ) ) ; <nl> - <nl> - config = configs . get ( 0 ) ; <nl> - format = config . getAttribute ( " format " ) ; <nl> - } <nl> - <nl> @ Test <nl> public void testGeneralParameterName ( ) throws Exception { <nl> <nl> + final Configuration config = getModuleConfig ( " ParameterName " ) ; <nl> + final String format = config . getAttribute ( " format " ) ; <nl> final String [ ] expected = { <nl> " 10 : 21 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " bB " , format ) , <nl> " 33 : 22 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " llll _ llll " , format ) , <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java <nl> index 4278e86 . . d7da851 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java <nl> @ @ - 19 , 33 + 19 , 25 @ @ <nl> <nl> package com . google . checkstyle . test . chapter5naming . rule527localvariablenames ; <nl> <nl> - import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> import com . google . checkstyle . test . base . AbstractModuleTestSupport ; <nl> - import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> <nl> public class LocalVariableNameTest extends AbstractModuleTestSupport { <nl> <nl> private static final String MSG _ KEY = " name . invalidPattern " ; <nl> - private static Configuration checkConfig ; <nl> - private static String format ; <nl> <nl> @ Override <nl> protected String getPackageLocation ( ) { <nl> return " com / google / checkstyle / test / chapter5naming / rule527localvariablenames " ; <nl> } <nl> <nl> - @ BeforeClass <nl> - public static void setConfigurationBuilder ( ) throws CheckstyleException { <nl> - checkConfig = getModuleConfig ( " LocalVariableName " ) ; <nl> - format = checkConfig . getAttribute ( " format " ) ; <nl> - } <nl> - <nl> @ Test <nl> public void testLocalVariableName ( ) throws Exception { <nl> <nl> + final Configuration checkConfig = getModuleConfig ( " LocalVariableName " ) ; <nl> + final String format = checkConfig . getAttribute ( " format " ) ; <nl> final String [ ] expected = { <nl> " 27 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " aA " , format ) , <nl> " 28 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " a1 _ a " , format ) , <nl> @ @ - 68 , 6 + 60 , 8 @ @ public class LocalVariableNameTest extends AbstractModuleTestSupport { <nl> @ Test <nl> public void testOneChar ( ) throws Exception { <nl> <nl> + final Configuration checkConfig = getModuleConfig ( " LocalVariableName " ) ; <nl> + final String format = checkConfig . getAttribute ( " format " ) ; <nl> final String [ ] expected = { <nl> " 21 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " I _ ndex " , format ) , <nl> " 45 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " i _ ndex " , format ) ,
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / JTreeTable . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / JTreeTable . java <nl> index 6bd5537 . . 1744aff 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / JTreeTable . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / JTreeTable . java <nl> @ @ - 249 , 10 + 249 , 8 @ @ public class JTreeTable extends JTable { <nl> / / exception to be thrown if the border selection color is <nl> / / null . <nl> / / dtcr . setBorderSelectionColor ( null ) ; <nl> - dtcr . setTextSelectionColor ( UIManager . getColor <nl> - ( " Table . selectionForeground " ) ) ; <nl> - dtcr . setBackgroundSelectionColor ( UIManager . getColor <nl> - ( " Table . selectionBackground " ) ) ; <nl> + dtcr . setTextSelectionColor ( UIManager . getColor ( " Table . selectionForeground " ) ) ; <nl> + dtcr . setBackgroundSelectionColor ( UIManager . getColor ( " Table . selectionBackground " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 383 , 8 + 381 , 7 @ @ public class JTreeTable extends JTable { <nl> <nl> public ListToTreeSelectionModelWrapper ( ) { <nl> super ( ) ; <nl> - getListSelectionModel ( ) . addListSelectionListener <nl> - ( createListSelectionListener ( ) ) ; <nl> + getListSelectionModel ( ) . addListSelectionListener ( createListSelectionListener ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 448 , 8 + 445 , 7 @ @ public class JTreeTable extends JTable { <nl> if ( min ! = - 1 & & max ! = - 1 ) { <nl> for ( int counter = min ; counter < = max ; counter + + ) { <nl> if ( listSelectionModel . isSelectedIndex ( counter ) ) { <nl> - final TreePath selPath = tree . getPathForRow <nl> - ( counter ) ; <nl> + final TreePath selPath = tree . getPathForRow ( counter ) ; <nl> <nl> if ( selPath ! = null ) { <nl> addSelectionPath ( selPath ) ;

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java 
 index 812a15e . . f8088a4 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule51identifiernames / CatchParameterNameTest . java 
 @ @ - 19 , 31 + 19 , 22 @ @ 
 
 package com . google . checkstyle . test . chapter5naming . rule51identifiernames ; 
 
 - import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 import com . google . checkstyle . test . base . AbstractModuleTestSupport ; 
 - import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 
 public class CatchParameterNameTest extends AbstractModuleTestSupport { 
 - private static Configuration checkConfig ; 
 - private static String format ; 
 - 
 @ Override 
 protected String getPackageLocation ( ) { 
 return " com / google / checkstyle / test / chapter5naming / rule51identifiernames " ; 
 } 
 
 - @ BeforeClass 
 - public static void setConfigurationBuilder ( ) throws CheckstyleException { 
 - checkConfig = getModuleConfig ( " CatchParameterName " ) ; 
 - format = checkConfig . getAttribute ( " format " ) ; 
 - } 
 - 
 @ Test 
 public void testCatchParameterName ( ) throws Exception { 
 final String msgKey = " name . invalidPattern " ; 
 + final Configuration checkConfig = getModuleConfig ( " CatchParameterName " ) ; 
 + final String format = checkConfig . getAttribute ( " format " ) ; 
 
 final String [ ] expected = { 
 " 47 : 28 : " + getCheckMessage ( checkConfig . getMessages ( ) , msgKey , " iException " , format ) , 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java 
 index 72ec64d . . 56f5d2f 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule521packagenames / PackageNameTest . java 
 @ @ - 22 , 19 + 22 , 15 @ @ package com . google . checkstyle . test . chapter5naming . rule521packagenames ; 
 import java . io . File ; 
 import java . io . IOException ; 
 
 - import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 import com . google . checkstyle . test . base . AbstractModuleTestSupport ; 
 - import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class PackageNameTest extends AbstractModuleTestSupport { 
 
 private static final String MSG _ KEY = " name . invalidPattern " ; 
 - private static Configuration checkConfig ; 
 - private static String format ; 
 
 @ Override 
 protected String getPackageLocation ( ) { 
 @ @ - 45 , 15 + 41 , 10 @ @ public class PackageNameTest extends AbstractModuleTestSupport { 
 return getPath ( " rule521 " + packageName + File . separator + fileName ) ; 
 } 
 
 - @ BeforeClass 
 - public static void setConfigurationBuilder ( ) throws CheckstyleException { 
 - checkConfig = getModuleConfig ( " PackageName " ) ; 
 - format = checkConfig . getAttribute ( " format " ) ; 
 - } 
 - 
 @ Test 
 public void testGoodPackageName ( ) throws Exception { 
 
 + final Configuration checkConfig = getModuleConfig ( " PackageName " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 
 final String filePath = getPath ( " packagenames " , " InputPackageNameGood . java " ) ; 
 @ @ - 67 , 6 + 58 , 8 @ @ public class PackageNameTest extends AbstractModuleTestSupport { 
 
 final String packagePath = 
 " com . google . checkstyle . test . chapter5naming . rule521packageNamesCamelCase " ; 
 + final Configuration checkConfig = getModuleConfig ( " PackageName " ) ; 
 + final String format = checkConfig . getAttribute ( " format " ) ; 
 final String msg = getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , packagePath , format ) ; 
 
 final String [ ] expected = { 
 @ @ - 83 , 6 + 76 , 8 @ @ public class PackageNameTest extends AbstractModuleTestSupport { 
 public void testBadPackageName2 ( ) throws Exception { 
 
 final String packagePath = " com . google . checkstyle . test . chapter5naming . rule521 _ packagenames " ; 
 + final Configuration checkConfig = getModuleConfig ( " PackageName " ) ; 
 + final String format = checkConfig . getAttribute ( " format " ) ; 
 final String msg = getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , packagePath , format ) ; 
 
 final String [ ] expected = { 
 @ @ - 99 , 6 + 94 , 8 @ @ public class PackageNameTest extends AbstractModuleTestSupport { 
 public void testBadPackageName3 ( ) throws Exception { 
 
 final String packagePath = " com . google . checkstyle . test . chapter5naming . rule521 $ packagenames " ; 
 + final Configuration checkConfig = getModuleConfig ( " PackageName " ) ; 
 + final String format = checkConfig . getAttribute ( " format " ) ; 
 final String msg = getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , packagePath , format ) ; 
 
 final String [ ] expected = { 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule525nonconstantfieldnames / MemberNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule525nonconstantfieldnames / MemberNameTest . java 
 index 0b88a44 . . 0ad3fb6 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule525nonconstantfieldnames / MemberNameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule525nonconstantfieldnames / MemberNameTest . java 
 @ @ - 19 , 33 + 19 , 25 @ @ 
 
 package com . google . checkstyle . test . chapter5naming . rule525nonconstantfieldnames ; 
 
 - import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 import com . google . checkstyle . test . base . AbstractModuleTestSupport ; 
 - import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 
 public class MemberNameTest extends AbstractModuleTestSupport { 
 
 private static final String MSG _ KEY = " name . invalidPattern " ; 
 - private static Configuration checkConfig ; 
 - private static String format ; 
 
 @ Override 
 protected String getPackageLocation ( ) { 
 return " com / google / checkstyle / test / chapter5naming / rule525nonconstantfieldnames " ; 
 } 
 
 - @ BeforeClass 
 - public static void setConfigurationBuilder ( ) throws CheckstyleException { 
 - checkConfig = getModuleConfig ( " MemberName " ) ; 
 - format = checkConfig . getAttribute ( " format " ) ; 
 - } 
 - 
 @ Test 
 public void testMemberName ( ) throws Exception { 
 
 + final Configuration checkConfig = getModuleConfig ( " MemberName " ) ; 
 + final String format = checkConfig . getAttribute ( " format " ) ; 
 final String [ ] expected = { 
 " 5 : 16 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " mPublic " , format ) , 
 " 6 : 19 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " mProtected " , format ) , 
 @ @ - 71 , 6 + 63 , 8 @ @ public class MemberNameTest extends AbstractModuleTestSupport { 
 @ Test 
 public void testSimple ( ) throws Exception { 
 
 + final Configuration checkConfig = getModuleConfig ( " MemberName " ) ; 
 + final String format = checkConfig . getAttribute ( " format " ) ; 
 final String [ ] expected = { 
 " 12 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " bad $ Static " , format ) , 
 " 17 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " bad _ Member " , format ) , 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java 
 index 39fae05 . . 1c499a1 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule526parameternames / ParameterNameTest . java 
 @ @ - 19 , 40 + 19 , 25 @ @ 
 
 package com . google . checkstyle . test . chapter5naming . rule526parameternames ; 
 
 - import java . util . List ; 
 - 
 - import org . junit . Assert ; 
 - import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 import com . google . checkstyle . test . base . AbstractModuleTestSupport ; 
 - import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 
 public class ParameterNameTest extends AbstractModuleTestSupport { 
 
 private static final String MSG _ KEY = " name . invalidPattern " ; 
 - private static String format ; 
 - private static Configuration config ; 
 
 @ Override 
 protected String getPackageLocation ( ) { 
 return " com / google / checkstyle / test / chapter5naming / rule526parameternames " ; 
 } 
 
 - @ BeforeClass 
 - public static void setConfigurationBuilder ( ) throws CheckstyleException { 
 - final List < Configuration > configs = getModuleConfigs ( " ParameterName " ) ; 
 - 
 - Assert . assertEquals ( " Invalid configs size " , 1 , configs . size ( ) ) ; 
 - 
 - config = configs . get ( 0 ) ; 
 - format = config . getAttribute ( " format " ) ; 
 - } 
 - 
 @ Test 
 public void testGeneralParameterName ( ) throws Exception { 
 
 + final Configuration config = getModuleConfig ( " ParameterName " ) ; 
 + final String format = config . getAttribute ( " format " ) ; 
 final String [ ] expected = { 
 " 10 : 21 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " bB " , format ) , 
 " 33 : 22 : " + getCheckMessage ( config . getMessages ( ) , MSG _ KEY , " llll _ llll " , format ) , 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java b / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java 
 index 4278e86 . . d7da851 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter5naming / rule527localvariablenames / LocalVariableNameTest . java 
 @ @ - 19 , 33 + 19 , 25 @ @ 
 
 package com . google . checkstyle . test . chapter5naming . rule527localvariablenames ; 
 
 - import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 import com . google . checkstyle . test . base . AbstractModuleTestSupport ; 
 - import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 
 public class LocalVariableNameTest extends AbstractModuleTestSupport { 
 
 private static final String MSG _ KEY = " name . invalidPattern " ; 
 - private static Configuration checkConfig ; 
 - private static String format ; 
 
 @ Override 
 protected String getPackageLocation ( ) { 
 return " com / google / checkstyle / test / chapter5naming / rule527localvariablenames " ; 
 } 
 
 - @ BeforeClass 
 - public static void setConfigurationBuilder ( ) throws CheckstyleException { 
 - checkConfig = getModuleConfig ( " LocalVariableName " ) ; 
 - format = checkConfig . getAttribute ( " format " ) ; 
 - } 
 - 
 @ Test 
 public void testLocalVariableName ( ) throws Exception { 
 
 + final Configuration checkConfig = getModuleConfig ( " LocalVariableName " ) ; 
 + final String format = checkConfig . getAttribute ( " format " ) ; 
 final String [ ] expected = { 
 " 27 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " aA " , format ) , 
 " 28 : 13 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " a1 _ a " , format ) , 
 @ @ - 68 , 6 + 60 , 8 @ @ public class LocalVariableNameTest extends AbstractModuleTestSupport { 
 @ Test 
 public void testOneChar ( ) throws Exception { 
 
 + final Configuration checkConfig = getModuleConfig ( " LocalVariableName " ) ; 
 + final String format = checkConfig . getAttribute ( " format " ) ; 
 final String [ ] expected = { 
 " 21 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " I _ ndex " , format ) , 
 " 45 : 17 : " + getCheckMessage ( checkConfig . getMessages ( ) , MSG _ KEY , " i _ ndex " , format ) ,

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / gui / JTreeTable . java b / src / main / java / com / puppycrawl / tools / checkstyle / gui / JTreeTable . java 
 index 6bd5537 . . 1744aff 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / gui / JTreeTable . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / gui / JTreeTable . java 
 @ @ - 249 , 10 + 249 , 8 @ @ public class JTreeTable extends JTable { 
 / / exception to be thrown if the border selection color is 
 / / null . 
 / / dtcr . setBorderSelectionColor ( null ) ; 
 - dtcr . setTextSelectionColor ( UIManager . getColor 
 - ( " Table . selectionForeground " ) ) ; 
 - dtcr . setBackgroundSelectionColor ( UIManager . getColor 
 - ( " Table . selectionBackground " ) ) ; 
 + dtcr . setTextSelectionColor ( UIManager . getColor ( " Table . selectionForeground " ) ) ; 
 + dtcr . setBackgroundSelectionColor ( UIManager . getColor ( " Table . selectionBackground " ) ) ; 
 } 
 } 
 
 @ @ - 383 , 8 + 381 , 7 @ @ public class JTreeTable extends JTable { 
 
 public ListToTreeSelectionModelWrapper ( ) { 
 super ( ) ; 
 - getListSelectionModel ( ) . addListSelectionListener 
 - ( createListSelectionListener ( ) ) ; 
 + getListSelectionModel ( ) . addListSelectionListener ( createListSelectionListener ( ) ) ; 
 } 
 
 / * * 
 @ @ - 448 , 8 + 445 , 7 @ @ public class JTreeTable extends JTable { 
 if ( min ! = - 1 & & max ! = - 1 ) { 
 for ( int counter = min ; counter < = max ; counter + + ) { 
 if ( listSelectionModel . isSelectedIndex ( counter ) ) { 
 - final TreePath selPath = tree . getPathForRow 
 - ( counter ) ; 
 + final TreePath selPath = tree . getPathForRow ( counter ) ; 
 
 if ( selPath ! = null ) { 
 addSelectionPath ( selPath ) ;
