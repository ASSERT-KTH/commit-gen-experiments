BLEU SCORE: 0.10127993013562818

TEST MSG: Issue # 2539 : Fix RequireThis check false - positive on methods
GENERATED MSG: Issue # 2240 : Fix false negative in RequireThisCheck

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index 3da0db3 . . 06323e9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 38 , 7 + 38 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> * That is references to instance variables and methods of the present <nl> * object are explicitly of the form & quot ; this . varName & quot ; or <nl> * & quot ; this . methodName ( args ) & quot ; . <nl> - * < / p > <nl> + * < / p > <nl> + * <nl> + * < p > Warning : the Check is very controversial and not that actual nowadays . < / p > <nl> * <nl> * < p > Examples of use : <nl> * < pre > <nl> @ @ - 53 , 6 + 55 , 19 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> * & lt ; / module & gt ; <nl> * < / pre > <nl> * <nl> + * < p > Rationale : < / p > <nl> + * < ol > <nl> + * < li > <nl> + * The same notation / habit for C + + and Java ( C + + have global methods , so having <nl> + * & quot ; this . & quot ; do make sense in it to distinguish call of method of class <nl> + * instead of global ) . <nl> + * < / li > <nl> + * < li > <nl> + * Non - IDE development ( ease of refactoring , some clearness to distinguish <nl> + * static and non - static methods ) . <nl> + * < / li > <nl> + * < / ol > <nl> + * <nl> * < p > Limitations : Nothing is currently done about static variables <nl> * or catch - blocks . Static methods invoked on a class name seem to be OK ; <nl> * both the class name and the method name have a DOT parent . <nl> @ @ - 374 , 7 + 389 , 8 @ @ public class RequireThisCheck extends Check { <nl> private AbstractFrame checkMethod ( DetailAST ast ) { <nl> final AbstractFrame frame = findFrame ( ast , true ) ; <nl> if ( frame ! = null <nl> - & & ( ( ClassFrame ) frame ) . hasInstanceMethod ( ast ) ) { <nl> + & & ( ( ClassFrame ) frame ) . hasInstanceMethod ( ast ) <nl> + & & ! ( ( ClassFrame ) frame ) . hasStaticMethod ( ast ) ) { <nl> return frame ; <nl> } <nl> return null ; <nl> @ @ - 478 , 12 + 494 , 12 @ @ public class RequireThisCheck extends Check { <nl> return frameName ; <nl> } <nl> <nl> - / * * Check whether the frame contains a given name . <nl> + / * * Check whether the frame contains a field or a variable with the given name . <nl> * @ param nameToFind the IDENT ast of the name we ' re looking for <nl> * @ return whether it was found <nl> * / <nl> - boolean contains ( DetailAST nameToFind ) { <nl> - return containsName ( varIdents , nameToFind ) ; <nl> + boolean containsFieldOrVariable ( DetailAST nameToFind ) { <nl> + return containsFieldOrVariableDef ( varIdents , nameToFind ) ; <nl> } <nl> <nl> / * * Check whether the frame contains a given name . <nl> @ @ - 495 , 7 + 511 , 7 @ @ public class RequireThisCheck extends Check { <nl> AbstractFrame frame ; <nl> <nl> if ( ! lookForMethod <nl> - & & contains ( nameToFind ) ) { <nl> + & & containsFieldOrVariable ( nameToFind ) ) { <nl> frame = this ; <nl> } <nl> else { <nl> @ @ - 512 , 7 + 528 , 7 @ @ public class RequireThisCheck extends Check { <nl> * @ return true if the set contains a declaration with the text of the specified <nl> * IDENT ast and it is declared in a proper position . <nl> * / <nl> - protected boolean containsName ( Set < DetailAST > set , DetailAST ident ) { <nl> + protected boolean containsFieldOrVariableDef ( Set < DetailAST > set , DetailAST ident ) { <nl> boolean result = false ; <nl> for ( DetailAST ast : set ) { <nl> if ( isProperDefinition ( ident , ast ) ) { <nl> @ @ - 642 , 25 + 658 , 33 @ @ public class RequireThisCheck extends Check { <nl> * instance member of the class <nl> * / <nl> public boolean hasInstanceMember ( final DetailAST ident ) { <nl> - return containsName ( instanceMembers , ident ) ; <nl> + return containsFieldOrVariableDef ( instanceMembers , ident ) ; <nl> } <nl> <nl> / * * <nl> * Checks if a given name is a known instance method of the class . <nl> - * @ param ident the IDENT ast of the name to check <nl> - * @ return true is the given name is a name of a known <nl> + * @ param ident the IDENT ast of the method call to check <nl> + * @ return true if the given ast is correspondent to a known <nl> * instance method of the class <nl> * / <nl> public boolean hasInstanceMethod ( final DetailAST ident ) { <nl> - return containsName ( instanceMethods , ident ) ; <nl> + return containsMethodDef ( instanceMethods , ident ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if a given name is a known static method of the class . <nl> + * @ param ident the IDENT ast of the method call to check <nl> + * @ return true is the given ast is correspondent to a known <nl> + * instance method of the class <nl> + * / <nl> + public boolean hasStaticMethod ( final DetailAST ident ) { <nl> + return containsMethodDef ( staticMethods , ident ) ; <nl> } <nl> <nl> @ Override <nl> - boolean contains ( DetailAST nameToFind ) { <nl> - return containsName ( instanceMembers , nameToFind ) <nl> - | | containsName ( instanceMethods , nameToFind ) <nl> - | | containsName ( staticMembers , nameToFind ) <nl> - | | containsName ( staticMethods , nameToFind ) ; <nl> + boolean containsFieldOrVariable ( DetailAST nameToFind ) { <nl> + return containsFieldOrVariableDef ( instanceMembers , nameToFind ) <nl> + | | containsFieldOrVariableDef ( staticMembers , nameToFind ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 673 , 7 + 697 , 8 @ @ public class RequireThisCheck extends Check { <nl> protected AbstractFrame getIfContains ( DetailAST nameToFind , boolean lookForMethod ) { <nl> AbstractFrame frame = null ; <nl> <nl> - if ( contains ( nameToFind ) ) { <nl> + if ( lookForMethod & & containsMethod ( nameToFind ) <nl> + | | containsFieldOrVariable ( nameToFind ) ) { <nl> frame = this ; <nl> } <nl> else if ( getParent ( ) ! = null ) { <nl> @ @ - 681 , 6 + 706 , 54 @ @ public class RequireThisCheck extends Check { <nl> } <nl> return frame ; <nl> } <nl> + <nl> + / * * <nl> + * Check whether the frame contains a given method . <nl> + * @ param methodToFind the AST of the method to find . <nl> + * @ return true , if a method with the same name and number of parameters is found . <nl> + * / <nl> + private boolean containsMethod ( DetailAST methodToFind ) { <nl> + return containsMethodDef ( instanceMethods , methodToFind ) <nl> + | | containsMethodDef ( staticMethods , methodToFind ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Whether the set contains a method definition with the <nl> + * same name and number of parameters . <nl> + * @ param set the set of definitions . <nl> + * @ param ident the specified method call IDENT ast . <nl> + * @ return true if the set contains a definition with the <nl> + * same name and number of parameters . <nl> + * / <nl> + private boolean containsMethodDef ( Set < DetailAST > set , DetailAST ident ) { <nl> + boolean result = false ; <nl> + for ( DetailAST ast : set ) { <nl> + if ( isSimilarSignature ( ident , ast ) ) { <nl> + result = true ; <nl> + break ; <nl> + } <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> + * Whether the method definition has the same name and number of parameters . <nl> + * @ param ident the specified method call IDENT ast . <nl> + * @ param ast the ast of a method definition to compare with . <nl> + * @ return true if a method definition has the same name and number of parameters <nl> + * as the method call . <nl> + * / <nl> + private boolean isSimilarSignature ( DetailAST ident , DetailAST ast ) { <nl> + boolean result = false ; <nl> + if ( ident . getText ( ) . equals ( ast . getText ( ) ) ) { <nl> + final int paramsNumber = ast . getParent ( ) . findFirstToken ( TokenTypes . PARAMETERS ) <nl> + . getChildCount ( ) ; <nl> + final int argsNumber = ident . getParent ( ) . findFirstToken ( TokenTypes . ELIST ) <nl> + . getChildCount ( ) ; <nl> + result = paramsNumber = = argsNumber ; <nl> + } <nl> + return result ; <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index c27d4b4 . . 4576fb0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 58 , 6 + 58 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> " 115 : 9 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " " ) , <nl> " 121 : 13 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " Issue2240 . " ) , <nl> " 122 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " Issue2240 . " ) , <nl> + " 134 : 9 : " + getCheckMessage ( MSG _ METHOD , " foo " , " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputRequireThis . java " ) , <nl> @ @ - 73 , 6 + 74 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> " 17 : 9 : " + getCheckMessage ( MSG _ METHOD , " method1 " , " " ) , <nl> " 115 : 9 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " " ) , <nl> " 121 : 13 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " Issue2240 . " ) , <nl> + " 134 : 9 : " + getCheckMessage ( MSG _ METHOD , " foo " , " " ) , <nl> } ; <nl> verify ( checkConfig , <nl> getPath ( " InputRequireThis . java " ) , <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java <nl> index 0fa0b8a . . 0c6d455 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java <nl> @ @ - 123 , 3 + 123 , 14 @ @ class Issue2240 { <nl> } <nl> } <nl> } <nl> + <nl> + class Issue2539 { <nl> + void foo ( int i ) { } <nl> + static void foo ( double i ) { } <nl> + void foo ( ) { } <nl> + <nl> + void bar ( ) { <nl> + foo ( 1 ) ; <nl> + foo ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml <nl> index df4254a . . d04c76c 100644 <nl> - - - a / src / xdocs / config _ coding . xml <nl> + + + b / src / xdocs / config _ coding . xml <nl> @ @ - 2773 , 6 + 2773 , 25 @ @ public void foo ( int i , String s ) { } <nl> & quot ; this . methodName ( args ) & quot ; and that those references don ' t <nl> rely on the default behavior when & quot ; this . & quot ; is absent . <nl> < / p > <nl> + <nl> + < p > <nl> + Warning : the Check is very controversial and not that actual nowadays . <nl> + < / p > <nl> + <nl> + < p > <nl> + Rationale : <nl> + < / p > <nl> + < ol > <nl> + < li > <nl> + The same notation / habit for C + + and Java ( C + + have global methods , so having <nl> + & quot ; this . & quot ; do make sense in it to distinguish call of method of class <nl> + instead of global ) . <nl> + < / li > <nl> + < li > <nl> + Non - IDE development ( ease of refactoring , some clearness to distinguish <nl> + static and non - static methods ) . <nl> + < / li > <nl> + < / ol > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 3e6a88a . . aa97571 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 22 , 7 + 22 , 7 @ @ <nl> <nl> < groupId > com . puppycrawl . tools < / groupId > <nl> < artifactId > checkstyle < / artifactId > <nl> - < version > 6 . 12 . 1 < / version > <nl> + < version > 6 . 12 . 2 - SNAPSHOT < / version > <nl> < packaging > jar < / packaging > <nl> <nl> < name > checkstyle < / name >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index 3da0db3 . . 06323e9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 38 , 7 + 38 , 9 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 * That is references to instance variables and methods of the present 
 * object are explicitly of the form & quot ; this . varName & quot ; or 
 * & quot ; this . methodName ( args ) & quot ; . 
 - * < / p > 
 + * < / p > 
 + * 
 + * < p > Warning : the Check is very controversial and not that actual nowadays . < / p > 
 * 
 * < p > Examples of use : 
 * < pre > 
 @ @ - 53 , 6 + 55 , 19 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 * & lt ; / module & gt ; 
 * < / pre > 
 * 
 + * < p > Rationale : < / p > 
 + * < ol > 
 + * < li > 
 + * The same notation / habit for C + + and Java ( C + + have global methods , so having 
 + * & quot ; this . & quot ; do make sense in it to distinguish call of method of class 
 + * instead of global ) . 
 + * < / li > 
 + * < li > 
 + * Non - IDE development ( ease of refactoring , some clearness to distinguish 
 + * static and non - static methods ) . 
 + * < / li > 
 + * < / ol > 
 + * 
 * < p > Limitations : Nothing is currently done about static variables 
 * or catch - blocks . Static methods invoked on a class name seem to be OK ; 
 * both the class name and the method name have a DOT parent . 
 @ @ - 374 , 7 + 389 , 8 @ @ public class RequireThisCheck extends Check { 
 private AbstractFrame checkMethod ( DetailAST ast ) { 
 final AbstractFrame frame = findFrame ( ast , true ) ; 
 if ( frame ! = null 
 - & & ( ( ClassFrame ) frame ) . hasInstanceMethod ( ast ) ) { 
 + & & ( ( ClassFrame ) frame ) . hasInstanceMethod ( ast ) 
 + & & ! ( ( ClassFrame ) frame ) . hasStaticMethod ( ast ) ) { 
 return frame ; 
 } 
 return null ; 
 @ @ - 478 , 12 + 494 , 12 @ @ public class RequireThisCheck extends Check { 
 return frameName ; 
 } 
 
 - / * * Check whether the frame contains a given name . 
 + / * * Check whether the frame contains a field or a variable with the given name . 
 * @ param nameToFind the IDENT ast of the name we ' re looking for 
 * @ return whether it was found 
 * / 
 - boolean contains ( DetailAST nameToFind ) { 
 - return containsName ( varIdents , nameToFind ) ; 
 + boolean containsFieldOrVariable ( DetailAST nameToFind ) { 
 + return containsFieldOrVariableDef ( varIdents , nameToFind ) ; 
 } 
 
 / * * Check whether the frame contains a given name . 
 @ @ - 495 , 7 + 511 , 7 @ @ public class RequireThisCheck extends Check { 
 AbstractFrame frame ; 
 
 if ( ! lookForMethod 
 - & & contains ( nameToFind ) ) { 
 + & & containsFieldOrVariable ( nameToFind ) ) { 
 frame = this ; 
 } 
 else { 
 @ @ - 512 , 7 + 528 , 7 @ @ public class RequireThisCheck extends Check { 
 * @ return true if the set contains a declaration with the text of the specified 
 * IDENT ast and it is declared in a proper position . 
 * / 
 - protected boolean containsName ( Set < DetailAST > set , DetailAST ident ) { 
 + protected boolean containsFieldOrVariableDef ( Set < DetailAST > set , DetailAST ident ) { 
 boolean result = false ; 
 for ( DetailAST ast : set ) { 
 if ( isProperDefinition ( ident , ast ) ) { 
 @ @ - 642 , 25 + 658 , 33 @ @ public class RequireThisCheck extends Check { 
 * instance member of the class 
 * / 
 public boolean hasInstanceMember ( final DetailAST ident ) { 
 - return containsName ( instanceMembers , ident ) ; 
 + return containsFieldOrVariableDef ( instanceMembers , ident ) ; 
 } 
 
 / * * 
 * Checks if a given name is a known instance method of the class . 
 - * @ param ident the IDENT ast of the name to check 
 - * @ return true is the given name is a name of a known 
 + * @ param ident the IDENT ast of the method call to check 
 + * @ return true if the given ast is correspondent to a known 
 * instance method of the class 
 * / 
 public boolean hasInstanceMethod ( final DetailAST ident ) { 
 - return containsName ( instanceMethods , ident ) ; 
 + return containsMethodDef ( instanceMethods , ident ) ; 
 + } 
 + 
 + / * * 
 + * Checks if a given name is a known static method of the class . 
 + * @ param ident the IDENT ast of the method call to check 
 + * @ return true is the given ast is correspondent to a known 
 + * instance method of the class 
 + * / 
 + public boolean hasStaticMethod ( final DetailAST ident ) { 
 + return containsMethodDef ( staticMethods , ident ) ; 
 } 
 
 @ Override 
 - boolean contains ( DetailAST nameToFind ) { 
 - return containsName ( instanceMembers , nameToFind ) 
 - | | containsName ( instanceMethods , nameToFind ) 
 - | | containsName ( staticMembers , nameToFind ) 
 - | | containsName ( staticMethods , nameToFind ) ; 
 + boolean containsFieldOrVariable ( DetailAST nameToFind ) { 
 + return containsFieldOrVariableDef ( instanceMembers , nameToFind ) 
 + | | containsFieldOrVariableDef ( staticMembers , nameToFind ) ; 
 } 
 
 @ Override 
 @ @ - 673 , 7 + 697 , 8 @ @ public class RequireThisCheck extends Check { 
 protected AbstractFrame getIfContains ( DetailAST nameToFind , boolean lookForMethod ) { 
 AbstractFrame frame = null ; 
 
 - if ( contains ( nameToFind ) ) { 
 + if ( lookForMethod & & containsMethod ( nameToFind ) 
 + | | containsFieldOrVariable ( nameToFind ) ) { 
 frame = this ; 
 } 
 else if ( getParent ( ) ! = null ) { 
 @ @ - 681 , 6 + 706 , 54 @ @ public class RequireThisCheck extends Check { 
 } 
 return frame ; 
 } 
 + 
 + / * * 
 + * Check whether the frame contains a given method . 
 + * @ param methodToFind the AST of the method to find . 
 + * @ return true , if a method with the same name and number of parameters is found . 
 + * / 
 + private boolean containsMethod ( DetailAST methodToFind ) { 
 + return containsMethodDef ( instanceMethods , methodToFind ) 
 + | | containsMethodDef ( staticMethods , methodToFind ) ; 
 + } 
 + 
 + / * * 
 + * Whether the set contains a method definition with the 
 + * same name and number of parameters . 
 + * @ param set the set of definitions . 
 + * @ param ident the specified method call IDENT ast . 
 + * @ return true if the set contains a definition with the 
 + * same name and number of parameters . 
 + * / 
 + private boolean containsMethodDef ( Set < DetailAST > set , DetailAST ident ) { 
 + boolean result = false ; 
 + for ( DetailAST ast : set ) { 
 + if ( isSimilarSignature ( ident , ast ) ) { 
 + result = true ; 
 + break ; 
 + } 
 + } 
 + return result ; 
 + } 
 + 
 + / * * 
 + * Whether the method definition has the same name and number of parameters . 
 + * @ param ident the specified method call IDENT ast . 
 + * @ param ast the ast of a method definition to compare with . 
 + * @ return true if a method definition has the same name and number of parameters 
 + * as the method call . 
 + * / 
 + private boolean isSimilarSignature ( DetailAST ident , DetailAST ast ) { 
 + boolean result = false ; 
 + if ( ident . getText ( ) . equals ( ast . getText ( ) ) ) { 
 + final int paramsNumber = ast . getParent ( ) . findFirstToken ( TokenTypes . PARAMETERS ) 
 + . getChildCount ( ) ; 
 + final int argsNumber = ident . getParent ( ) . findFirstToken ( TokenTypes . ELIST ) 
 + . getChildCount ( ) ; 
 + result = paramsNumber = = argsNumber ; 
 + } 
 + return result ; 
 + } 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index c27d4b4 . . 4576fb0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 58 , 6 + 58 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 " 115 : 9 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " " ) , 
 " 121 : 13 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " Issue2240 . " ) , 
 " 122 : 13 : " + getCheckMessage ( MSG _ VARIABLE , " i " , " Issue2240 . " ) , 
 + " 134 : 9 : " + getCheckMessage ( MSG _ METHOD , " foo " , " " ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputRequireThis . java " ) , 
 @ @ - 73 , 6 + 74 , 7 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 " 17 : 9 : " + getCheckMessage ( MSG _ METHOD , " method1 " , " " ) , 
 " 115 : 9 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " " ) , 
 " 121 : 13 : " + getCheckMessage ( MSG _ METHOD , " instanceMethod " , " Issue2240 . " ) , 
 + " 134 : 9 : " + getCheckMessage ( MSG _ METHOD , " foo " , " " ) , 
 } ; 
 verify ( checkConfig , 
 getPath ( " InputRequireThis . java " ) , 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java 
 index 0fa0b8a . . 0c6d455 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThis . java 
 @ @ - 123 , 3 + 123 , 14 @ @ class Issue2240 { 
 } 
 } 
 } 
 + 
 + class Issue2539 { 
 + void foo ( int i ) { } 
 + static void foo ( double i ) { } 
 + void foo ( ) { } 
 + 
 + void bar ( ) { 
 + foo ( 1 ) ; 
 + foo ( ) ; 
 + } 
 + } 
 diff - - git a / src / xdocs / config _ coding . xml b / src / xdocs / config _ coding . xml 
 index df4254a . . d04c76c 100644 
 - - - a / src / xdocs / config _ coding . xml 
 + + + b / src / xdocs / config _ coding . xml 
 @ @ - 2773 , 6 + 2773 , 25 @ @ public void foo ( int i , String s ) { } 
 & quot ; this . methodName ( args ) & quot ; and that those references don ' t 
 rely on the default behavior when & quot ; this . & quot ; is absent . 
 < / p > 
 + 
 + < p > 
 + Warning : the Check is very controversial and not that actual nowadays . 
 + < / p > 
 + 
 + < p > 
 + Rationale : 
 + < / p > 
 + < ol > 
 + < li > 
 + The same notation / habit for C + + and Java ( C + + have global methods , so having 
 + & quot ; this . & quot ; do make sense in it to distinguish call of method of class 
 + instead of global ) . 
 + < / li > 
 + < li > 
 + Non - IDE development ( ease of refactoring , some clearness to distinguish 
 + static and non - static methods ) . 
 + < / li > 
 + < / ol > 
 < / subsection > 
 
 < subsection name = " Properties " >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 3e6a88a . . aa97571 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 22 , 7 + 22 , 7 @ @ 
 
 < groupId > com . puppycrawl . tools < / groupId > 
 < artifactId > checkstyle < / artifactId > 
 - < version > 6 . 12 . 1 < / version > 
 + < version > 6 . 12 . 2 - SNAPSHOT < / version > 
 < packaging > jar < / packaging > 
 
 < name > checkstyle < / name >
