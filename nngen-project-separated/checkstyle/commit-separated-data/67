BLEU SCORE: 0.02648568136290957

TEST MSG: Issue # 5769 : added package - info to list of valid javadocs
GENERATED MSG: # 282 fixed . Since Java 8 we can have methods body in interfaces .

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java <nl> index d8b483b . . 5c7ec3c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java <nl> @ @ - 191 , 11 + 191 , 14 @ @ public class AtclauseOrderCheck extends AbstractJavadocCheck { <nl> * / <nl> private static int getParentType ( DetailAST commentBlock ) { <nl> final DetailAST parentNode = commentBlock . getParent ( ) ; <nl> - int type = parentNode . getType ( ) ; <nl> - if ( type = = TokenTypes . TYPE | | type = = TokenTypes . MODIFIERS ) { <nl> - type = parentNode . getParent ( ) . getType ( ) ; <nl> + int result = 0 ; <nl> + if ( parentNode ! = null ) { <nl> + result = parentNode . getType ( ) ; <nl> + if ( result = = TokenTypes . TYPE | | result = = TokenTypes . MODIFIERS ) { <nl> + result = parentNode . getParent ( ) . getType ( ) ; <nl> + } <nl> } <nl> - return type ; <nl> + return result ; <nl> } <nl> <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPosition . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPosition . java <nl> index e405c90 . . 9132b4a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPosition . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPosition . java <nl> @ @ - 58 , 6 + 58 , 16 @ @ public final class BlockCommentPosition { <nl> } <nl> <nl> / * * <nl> + * Node is on package definition . <nl> + * @ param blockComment DetailAST <nl> + * @ return true if node is before package <nl> + * / <nl> + public static boolean isOnPackage ( DetailAST blockComment ) { <nl> + final DetailAST nextSibling = blockComment . getNextSibling ( ) ; <nl> + return nextSibling ! = null & & nextSibling . getType ( ) = = TokenTypes . PACKAGE _ DEF ; <nl> + } <nl> + <nl> + / * * <nl> * Node is on interface definition . <nl> * @ param blockComment DetailAST <nl> * @ return true if node is before interface <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtil . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtil . java <nl> index 5fe8dd9 . . 4f6e1e5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtil . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtil . java <nl> @ @ - 401 , 7 + 401 , 8 @ @ public final class JavadocUtil { <nl> } <nl> return sibling = = null <nl> & & ( BlockCommentPosition . isOnType ( blockComment ) <nl> - | | BlockCommentPosition . isOnMember ( blockComment ) ) ; <nl> + | | BlockCommentPosition . isOnMember ( blockComment ) <nl> + | | BlockCommentPosition . isOnPackage ( blockComment ) ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheckTest . java <nl> index bdd7222 . . e6999b5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheckTest . java <nl> @ @ - 125 , 4 + 125 , 12 @ @ public class AtclauseOrderCheckTest extends AbstractModuleTestSupport { <nl> verify ( checkConfig , getPath ( " InputAtclauseOrderIncorrect . java " ) , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testPackageInfo ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( AtclauseOrderCheck . class ) ; <nl> + <nl> + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " package - info . java " ) , expected ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheckTest . java <nl> index a16f17d . . 4a9db46 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheckTest . java <nl> @ @ - 136 , 4 + 136 , 14 @ @ public class SummaryJavadocCheckTest extends AbstractModuleTestSupport { <nl> verify ( checkConfig , getPath ( " InputSummaryJavadocPeriodAtEnd . java " ) , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testPackageInfo ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createModuleConfig ( SummaryJavadocCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 1 : " + getCheckMessage ( MSG _ SUMMARY _ JAVADOC _ MISSING ) , <nl> + } ; <nl> + <nl> + verify ( checkConfig , getPath ( " package - info . java " ) , expected ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / atclauseorder / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / atclauseorder / package - info . java <nl> new file mode 100644 <nl> index 0000000 . . 67c9182 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / atclauseorder / package - info . java <nl> @ @ - 0 , 0 + 1 , 4 @ @ <nl> + / * * <nl> + * Test . <nl> + * / <nl> + package com . puppycrawl . tools . checkstyle . checks . javadoc . atclauseorder ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / summaryjavadoc / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / summaryjavadoc / package - info . java <nl> new file mode 100644 <nl> index 0000000 . . 0c0ae36 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / summaryjavadoc / package - info . java <nl> @ @ - 0 , 0 + 1 , 2 @ @ <nl> + / * * * / <nl> + package com . puppycrawl . tools . checkstyle . checks . javadoc . summaryjavadoc ;
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java <nl> index 1bc19b5 . . 664c0d6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java <nl> @ @ - 26 , 12 + 26 , 25 @ @ import java . io . File ; <nl> / * * <nl> * Checks that the outer type name and the file name match . <nl> * @ author Oliver Burn <nl> + * @ author maxvetrenko <nl> * / <nl> public class OuterTypeFilenameCheck extends Check <nl> { <nl> / * * indicates whether the first token has been seen in the file . * / <nl> private boolean mSeenFirstToken ; <nl> <nl> + / * * Current file name * / <nl> + private String mFileName ; <nl> + <nl> + / * * If file has public type * / <nl> + private boolean mHasPublic ; <nl> + <nl> + / * * If first type has has same name as file * / <nl> + private boolean mValidFirst ; <nl> + <nl> + / * * Outer type with mismatched file name * / <nl> + private DetailAST mWrongType ; <nl> + <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) <nl> { <nl> @ @ - 44 , 30 + 57 , 54 @ @ public class OuterTypeFilenameCheck extends Check <nl> @ Override <nl> public void beginTree ( DetailAST aAST ) <nl> { <nl> + mFileName = getFileName ( ) ; <nl> mSeenFirstToken = false ; <nl> + mValidFirst = false ; <nl> + mHasPublic = false ; <nl> + mWrongType = null ; <nl> } <nl> <nl> @ Override <nl> public void visitToken ( DetailAST aAST ) <nl> { <nl> - / / Only check first declaration <nl> - if ( mSeenFirstToken ) { <nl> - return ; <nl> + final String outerTypeName = aAST . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> + if ( ! mSeenFirstToken ) { <nl> + <nl> + if ( mFileName . equals ( outerTypeName ) ) { <nl> + mValidFirst = true ; <nl> + } <nl> + else { <nl> + mWrongType = aAST ; <nl> + } <nl> + } <nl> + else { <nl> + final DetailAST modifiers = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + if ( modifiers . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null <nl> + & & aAST . getParent ( ) = = null ) <nl> + { <nl> + mHasPublic = true ; <nl> + } <nl> } <nl> mSeenFirstToken = true ; <nl> + } <nl> <nl> - final String outerTypeName = <nl> - aAST . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> + @ Override <nl> + public void finishTree ( DetailAST aRootAST ) <nl> + { <nl> + if ( ! ( mValidFirst | | mHasPublic ) & & mWrongType ! = null ) { <nl> + log ( mWrongType . getLineNo ( ) , " type . file . mismatch " ) ; <nl> + } <nl> + } <nl> <nl> - / / Calculate the file name without the leading path or <nl> - / / the trailing . java suffix . Will be lax and just remove whatever <nl> - / / is after the ' . ' character . <nl> + / * * <nl> + * Get source file name . <nl> + * @ return source file name . <nl> + * / <nl> + private String getFileName ( ) <nl> + { <nl> String fname = getFileContents ( ) . getFilename ( ) ; <nl> fname = fname . substring ( fname . lastIndexOf ( File . separatorChar ) + 1 ) ; <nl> fname = fname . replaceAll ( " \ \ . [ ^ \ \ . ] * $ " , " " ) ; <nl> - <nl> - if ( ! ( fname . equals ( outerTypeName ) ) ) { <nl> - log ( aAST . getLineNo ( ) , " type . file . mismatch " ) ; <nl> - } <nl> + return fname ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java <nl> index 26ea6a1 . . fb83293 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ public class OuterTypeFilenameCheckTest extends BaseCheckTestSupport <nl> { <nl> <nl> @ Test <nl> - public void testGood ( ) throws Exception <nl> + public void testGood1 ( ) throws Exception <nl> { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( OuterTypeFilenameCheck . class ) ; <nl> @ @ - 34 , 13 + 34 , 11 @ @ public class OuterTypeFilenameCheckTest extends BaseCheckTestSupport <nl> verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; <nl> } <nl> @ Test <nl> - public void testBad ( ) throws Exception <nl> + public void testGood2 ( ) throws Exception <nl> { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( OuterTypeFilenameCheck . class ) ; <nl> - final String [ ] expected = { <nl> - " 4 : The name of the outer type and the file do not match . " , <nl> - } ; <nl> + final String [ ] expected = { } ; <nl> verify ( checkConfig , getPath ( " Input15Extensions . java " ) , expected ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java 
 index d8b483b . . 5c7ec3c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheck . java 
 @ @ - 191 , 11 + 191 , 14 @ @ public class AtclauseOrderCheck extends AbstractJavadocCheck { 
 * / 
 private static int getParentType ( DetailAST commentBlock ) { 
 final DetailAST parentNode = commentBlock . getParent ( ) ; 
 - int type = parentNode . getType ( ) ; 
 - if ( type = = TokenTypes . TYPE | | type = = TokenTypes . MODIFIERS ) { 
 - type = parentNode . getParent ( ) . getType ( ) ; 
 + int result = 0 ; 
 + if ( parentNode ! = null ) { 
 + result = parentNode . getType ( ) ; 
 + if ( result = = TokenTypes . TYPE | | result = = TokenTypes . MODIFIERS ) { 
 + result = parentNode . getParent ( ) . getType ( ) ; 
 + } 
 } 
 - return type ; 
 + return result ; 
 } 
 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPosition . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPosition . java 
 index e405c90 . . 9132b4a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPosition . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / BlockCommentPosition . java 
 @ @ - 58 , 6 + 58 , 16 @ @ public final class BlockCommentPosition { 
 } 
 
 / * * 
 + * Node is on package definition . 
 + * @ param blockComment DetailAST 
 + * @ return true if node is before package 
 + * / 
 + public static boolean isOnPackage ( DetailAST blockComment ) { 
 + final DetailAST nextSibling = blockComment . getNextSibling ( ) ; 
 + return nextSibling ! = null & & nextSibling . getType ( ) = = TokenTypes . PACKAGE _ DEF ; 
 + } 
 + 
 + / * * 
 * Node is on interface definition . 
 * @ param blockComment DetailAST 
 * @ return true if node is before interface 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtil . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtil . java 
 index 5fe8dd9 . . 4f6e1e5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtil . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / JavadocUtil . java 
 @ @ - 401 , 7 + 401 , 8 @ @ public final class JavadocUtil { 
 } 
 return sibling = = null 
 & & ( BlockCommentPosition . isOnType ( blockComment ) 
 - | | BlockCommentPosition . isOnMember ( blockComment ) ) ; 
 + | | BlockCommentPosition . isOnMember ( blockComment ) 
 + | | BlockCommentPosition . isOnPackage ( blockComment ) ) ; 
 } 
 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheckTest . java 
 index bdd7222 . . e6999b5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / AtclauseOrderCheckTest . java 
 @ @ - 125 , 4 + 125 , 12 @ @ public class AtclauseOrderCheckTest extends AbstractModuleTestSupport { 
 verify ( checkConfig , getPath ( " InputAtclauseOrderIncorrect . java " ) , expected ) ; 
 } 
 
 + @ Test 
 + public void testPackageInfo ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( AtclauseOrderCheck . class ) ; 
 + 
 + final String [ ] expected = CommonUtil . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " package - info . java " ) , expected ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheckTest . java 
 index a16f17d . . 4a9db46 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / javadoc / SummaryJavadocCheckTest . java 
 @ @ - 136 , 4 + 136 , 14 @ @ public class SummaryJavadocCheckTest extends AbstractModuleTestSupport { 
 verify ( checkConfig , getPath ( " InputSummaryJavadocPeriodAtEnd . java " ) , expected ) ; 
 } 
 
 + @ Test 
 + public void testPackageInfo ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createModuleConfig ( SummaryJavadocCheck . class ) ; 
 + final String [ ] expected = { 
 + " 1 : " + getCheckMessage ( MSG _ SUMMARY _ JAVADOC _ MISSING ) , 
 + } ; 
 + 
 + verify ( checkConfig , getPath ( " package - info . java " ) , expected ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / atclauseorder / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / atclauseorder / package - info . java 
 new file mode 100644 
 index 0000000 . . 67c9182 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / atclauseorder / package - info . java 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + / * * 
 + * Test . 
 + * / 
 + package com . puppycrawl . tools . checkstyle . checks . javadoc . atclauseorder ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / summaryjavadoc / package - info . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / summaryjavadoc / package - info . java 
 new file mode 100644 
 index 0000000 . . 0c0ae36 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / javadoc / summaryjavadoc / package - info . java 
 @ @ - 0 , 0 + 1 , 2 @ @ 
 + / * * * / 
 + package com . puppycrawl . tools . checkstyle . checks . javadoc . summaryjavadoc ;

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java 
 index 1bc19b5 . . 664c0d6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheck . java 
 @ @ - 26 , 12 + 26 , 25 @ @ import java . io . File ; 
 / * * 
 * Checks that the outer type name and the file name match . 
 * @ author Oliver Burn 
 + * @ author maxvetrenko 
 * / 
 public class OuterTypeFilenameCheck extends Check 
 { 
 / * * indicates whether the first token has been seen in the file . * / 
 private boolean mSeenFirstToken ; 
 
 + / * * Current file name * / 
 + private String mFileName ; 
 + 
 + / * * If file has public type * / 
 + private boolean mHasPublic ; 
 + 
 + / * * If first type has has same name as file * / 
 + private boolean mValidFirst ; 
 + 
 + / * * Outer type with mismatched file name * / 
 + private DetailAST mWrongType ; 
 + 
 @ Override 
 public int [ ] getDefaultTokens ( ) 
 { 
 @ @ - 44 , 30 + 57 , 54 @ @ public class OuterTypeFilenameCheck extends Check 
 @ Override 
 public void beginTree ( DetailAST aAST ) 
 { 
 + mFileName = getFileName ( ) ; 
 mSeenFirstToken = false ; 
 + mValidFirst = false ; 
 + mHasPublic = false ; 
 + mWrongType = null ; 
 } 
 
 @ Override 
 public void visitToken ( DetailAST aAST ) 
 { 
 - / / Only check first declaration 
 - if ( mSeenFirstToken ) { 
 - return ; 
 + final String outerTypeName = aAST . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 + if ( ! mSeenFirstToken ) { 
 + 
 + if ( mFileName . equals ( outerTypeName ) ) { 
 + mValidFirst = true ; 
 + } 
 + else { 
 + mWrongType = aAST ; 
 + } 
 + } 
 + else { 
 + final DetailAST modifiers = aAST . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + if ( modifiers . findFirstToken ( TokenTypes . LITERAL _ PUBLIC ) ! = null 
 + & & aAST . getParent ( ) = = null ) 
 + { 
 + mHasPublic = true ; 
 + } 
 } 
 mSeenFirstToken = true ; 
 + } 
 
 - final String outerTypeName = 
 - aAST . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 + @ Override 
 + public void finishTree ( DetailAST aRootAST ) 
 + { 
 + if ( ! ( mValidFirst | | mHasPublic ) & & mWrongType ! = null ) { 
 + log ( mWrongType . getLineNo ( ) , " type . file . mismatch " ) ; 
 + } 
 + } 
 
 - / / Calculate the file name without the leading path or 
 - / / the trailing . java suffix . Will be lax and just remove whatever 
 - / / is after the ' . ' character . 
 + / * * 
 + * Get source file name . 
 + * @ return source file name . 
 + * / 
 + private String getFileName ( ) 
 + { 
 String fname = getFileContents ( ) . getFilename ( ) ; 
 fname = fname . substring ( fname . lastIndexOf ( File . separatorChar ) + 1 ) ; 
 fname = fname . replaceAll ( " \ \ . [ ^ \ \ . ] * $ " , " " ) ; 
 - 
 - if ( ! ( fname . equals ( outerTypeName ) ) ) { 
 - log ( aAST . getLineNo ( ) , " type . file . mismatch " ) ; 
 - } 
 + return fname ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java 
 index 26ea6a1 . . fb83293 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / OuterTypeFilenameCheckTest . java 
 @ @ - 26 , 7 + 26 , 7 @ @ public class OuterTypeFilenameCheckTest extends BaseCheckTestSupport 
 { 
 
 @ Test 
 - public void testGood ( ) throws Exception 
 + public void testGood1 ( ) throws Exception 
 { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( OuterTypeFilenameCheck . class ) ; 
 @ @ - 34 , 13 + 34 , 11 @ @ public class OuterTypeFilenameCheckTest extends BaseCheckTestSupport 
 verify ( checkConfig , getPath ( " InputIllegalTokens . java " ) , expected ) ; 
 } 
 @ Test 
 - public void testBad ( ) throws Exception 
 + public void testGood2 ( ) throws Exception 
 { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( OuterTypeFilenameCheck . class ) ; 
 - final String [ ] expected = { 
 - " 4 : The name of the outer type and the file do not match . " , 
 - } ; 
 + final String [ ] expected = { } ; 
 verify ( checkConfig , getPath ( " Input15Extensions . java " ) , expected ) ; 
 } 
 }
