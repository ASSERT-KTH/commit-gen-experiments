BLEU SCORE: 0.09535414040914189

TEST MSG: config : update for nondex plugin to print output
GENERATED MSG: config : travis - move NonDex below primary tools

TEST DIFF (one line): diff - - git a / . travis . yml b / . travis . yml <nl> index 7a4f6ac . . 786bedf 100644 <nl> - - - a / . travis . yml <nl> + + + b / . travis . yml <nl> @ @ - 41 , 7 + 41 , 14 @ @ matrix : <nl> <nl> # NonDex ( oraclejdk8 ) <nl> - jdk : oraclejdk8 <nl> - env : DESC = " NonDex " CMD = " mvn clean nondex : nondex " COVERAGE _ CMD = " " DEPLOY = " false " <nl> + env : <nl> + - DESC = " NonDex " <nl> + - CMD1 = " mvn - - fail - never clean nondex : nondex " <nl> + - CMD2 = " & & cat ` grep - RlE ' td class = . x ' . nondex / | cat ` < / dev / null > output . txt " <nl> + - CMD3 = " & & RESULT = \ $ ( cat output . txt | wc - c ) & & cat output . txt " <nl> + - CMD4 = " & & echo ' Size of output : ' \ $ RESULT & & if [ [ \ $ RESULT ! = 0 ] ] ; then false ; fi " <nl> + - CMD = $ CMD1 $ CMD2 $ CMD3 $ CMD4 <nl> + - COVERAGE _ CMD = " " <nl> <nl> # site ( oraclejdk8 as ' site ' success is required to be sure that on release time all will be ok , admins will use oracle8 version ) <nl> # moved to https : / / codeship . com / projects / 124310 / configure _ tests
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> index 22081a8 . . b3283de 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> @ @ - 141 , 25 + 141 , 28 @ @ public class RedundantModifierCheck <nl> if ( ast . getType ( ) = = TokenTypes . INTERFACE _ DEF ) { <nl> checkInterfaceModifiers ( ast ) ; <nl> } <nl> - else if ( ast . getType ( ) = = TokenTypes . CTOR _ DEF ) { <nl> - if ( isEnumMember ( ast ) ) { <nl> - checkEnumConstructorModifiers ( ast ) ; <nl> - } <nl> - else { <nl> - checkClassConstructorModifiers ( ast ) ; <nl> - } <nl> - } <nl> else if ( ast . getType ( ) = = TokenTypes . ENUM _ DEF ) { <nl> checkEnumDef ( ast ) ; <nl> } <nl> - else if ( isInterfaceOrAnnotationMember ( ast ) ) { <nl> - processInterfaceOrAnnotation ( ast ) ; <nl> - } <nl> - else if ( ast . getType ( ) = = TokenTypes . METHOD _ DEF ) { <nl> - processMethods ( ast ) ; <nl> - } <nl> - else if ( ast . getType ( ) = = TokenTypes . RESOURCE ) { <nl> - processResources ( ast ) ; <nl> + else { <nl> + if ( ast . getType ( ) = = TokenTypes . CTOR _ DEF ) { <nl> + if ( isEnumMember ( ast ) ) { <nl> + checkEnumConstructorModifiers ( ast ) ; <nl> + } <nl> + else { <nl> + checkClassConstructorModifiers ( ast ) ; <nl> + } <nl> + } <nl> + else if ( ast . getType ( ) = = TokenTypes . METHOD _ DEF ) { <nl> + processMethods ( ast ) ; <nl> + } <nl> + else if ( ast . getType ( ) = = TokenTypes . RESOURCE ) { <nl> + processResources ( ast ) ; <nl> + } <nl> + <nl> + if ( isInterfaceOrAnnotationMember ( ast ) ) { <nl> + processInterfaceOrAnnotation ( ast ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 203 , 12 + 206 , 7 @ @ public class RedundantModifierCheck <nl> processInterfaceOrAnnotation ( ast ) ; <nl> } <nl> else if ( ast . getParent ( ) ! = null ) { <nl> - final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - final DetailAST staticModifier = modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ; <nl> - if ( staticModifier ! = null ) { <nl> - log ( staticModifier . getLineNo ( ) , staticModifier . getColumnNo ( ) , <nl> - MSG _ KEY , staticModifier . getText ( ) ) ; <nl> - } <nl> + checkForRedundantModifier ( ast , TokenTypes . LITERAL _ STATIC ) ; <nl> } <nl> } <nl> <nl> @ @ - 243 , 7 + 241 , 7 @ @ public class RedundantModifierCheck <nl> } <nl> <nl> / * * <nl> - * Process validation ofMethods . <nl> + * Process validation of Methods . <nl> * @ param ast method AST <nl> * / <nl> private void processMethods ( DetailAST ast ) { <nl> @ @ - 270 , 15 + 268 , 25 @ @ public class RedundantModifierCheck <nl> } <nl> } <nl> if ( checkFinal & & ! isAnnotatedWithSafeVarargs ( ast ) ) { <nl> - DetailAST modifier = modifiers . getFirstChild ( ) ; <nl> - while ( modifier ! = null ) { <nl> - final int type = modifier . getType ( ) ; <nl> - if ( type = = TokenTypes . FINAL ) { <nl> - log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , <nl> - MSG _ KEY , modifier . getText ( ) ) ; <nl> - break ; <nl> - } <nl> - modifier = modifier . getNextSibling ( ) ; <nl> + checkForRedundantModifier ( ast , TokenTypes . FINAL ) ; <nl> + } <nl> + <nl> + if ( ! ast . branchContains ( TokenTypes . SLIST ) ) { <nl> + processAbstractMethodParameters ( ast ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Process validation of parameters for Methods with no definition . <nl> + * @ param ast method AST <nl> + * / <nl> + private void processAbstractMethodParameters ( DetailAST ast ) { <nl> + final DetailAST parameters = ast . findFirstToken ( TokenTypes . PARAMETERS ) ; <nl> + <nl> + for ( DetailAST child = parameters . getFirstChild ( ) ; child ! = null ; child = child <nl> + . getNextSibling ( ) ) { <nl> + if ( child . getType ( ) = = TokenTypes . PARAMETER _ DEF ) { <nl> + checkForRedundantModifier ( child , TokenTypes . FINAL ) ; <nl> } <nl> } <nl> } <nl> @ @ - 290 , 7 + 298 , 7 @ @ public class RedundantModifierCheck <nl> private void checkClassConstructorModifiers ( DetailAST classCtorAst ) { <nl> final DetailAST classDef = classCtorAst . getParent ( ) . getParent ( ) ; <nl> if ( ! isClassPublic ( classDef ) & & ! isClassProtected ( classDef ) ) { <nl> - checkForRedundantPublicModifier ( classCtorAst ) ; <nl> + checkForRedundantModifier ( classCtorAst , TokenTypes . LITERAL _ PUBLIC ) ; <nl> } <nl> } <nl> <nl> @ @ - 299 , 30 + 307 , 19 @ @ public class RedundantModifierCheck <nl> * @ param ast ast <nl> * / <nl> private void processResources ( DetailAST ast ) { <nl> - final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - DetailAST modifier = modifiers . getFirstChild ( ) ; <nl> - <nl> - while ( modifier ! = null ) { <nl> - final int type = modifier . getType ( ) ; <nl> - <nl> - if ( type = = TokenTypes . FINAL ) { <nl> - log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , MSG _ KEY , modifier . getText ( ) ) ; <nl> - break ; <nl> - } <nl> - <nl> - modifier = modifier . getNextSibling ( ) ; <nl> - } <nl> + checkForRedundantModifier ( ast , TokenTypes . FINAL ) ; <nl> } <nl> <nl> / * * <nl> - * Checks if given ast has redundant public modifier . <nl> + * Checks if given ast has a redundant modifier . <nl> * @ param ast ast <nl> + * @ param modifierType The modifier to check for . <nl> * / <nl> - private void checkForRedundantPublicModifier ( DetailAST ast ) { <nl> + private void checkForRedundantModifier ( DetailAST ast , int modifierType ) { <nl> final DetailAST astModifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> DetailAST astModifier = astModifiers . getFirstChild ( ) ; <nl> while ( astModifier ! = null ) { <nl> - if ( astModifier . getType ( ) = = TokenTypes . LITERAL _ PUBLIC ) { <nl> + if ( astModifier . getType ( ) = = modifierType ) { <nl> log ( astModifier . getLineNo ( ) , astModifier . getColumnNo ( ) , <nl> MSG _ KEY , astModifier . getText ( ) ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java <nl> index 35ccec7 . . 8528623 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java <nl> @ @ - 210 , 4 + 210 , 17 @ @ public class RedundantModifierCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputFinalInTryWithResource . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testFinalInAbstractMethods ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( RedundantModifierCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 4 : 33 : " + getCheckMessage ( MSG _ KEY , " final " ) , <nl> + " 8 : 49 : " + getCheckMessage ( MSG _ KEY , " final " ) , <nl> + " 11 : 17 : " + getCheckMessage ( MSG _ KEY , " final " ) , <nl> + " 16 : 24 : " + getCheckMessage ( MSG _ KEY , " final " ) , <nl> + " 25 : 33 : " + getCheckMessage ( MSG _ KEY , " final " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputFinalInAbstractMethods . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAbstractMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAbstractMethods . java <nl> new file mode 100644 <nl> index 0000000 . . 00c1018 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAbstractMethods . java <nl> @ @ - 0 , 0 + 1 , 26 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . modifier ; <nl> + <nl> + public abstract class InputFinalInAbstractMethods { <nl> + public abstract void method ( final String param ) ; / / violation <nl> + <nl> + public abstract void method2 ( String param ) ; <nl> + <nl> + public abstract void method3 ( String param1 , final String param2 ) ; / / violation <nl> + } <nl> + interface IWhatever { <nl> + void method ( final String param ) ; / / violation <nl> + <nl> + void method2 ( String param ) ; <nl> + } <nl> + class CWhatever { <nl> + native void method ( final String param ) ; / / violation <nl> + <nl> + native void method2 ( String param ) ; <nl> + } <nl> + enum EWhatever { <nl> + TEST ( ) { <nl> + public void method ( String s ) { } ; <nl> + } ; <nl> + <nl> + public abstract void method ( final String s ) ; / / violation <nl> + }

TEST DIFF:
diff - - git a / . travis . yml b / . travis . yml 
 index 7a4f6ac . . 786bedf 100644 
 - - - a / . travis . yml 
 + + + b / . travis . yml 
 @ @ - 41 , 7 + 41 , 14 @ @ matrix : 
 
 # NonDex ( oraclejdk8 ) 
 - jdk : oraclejdk8 
 - env : DESC = " NonDex " CMD = " mvn clean nondex : nondex " COVERAGE _ CMD = " " DEPLOY = " false " 
 + env : 
 + - DESC = " NonDex " 
 + - CMD1 = " mvn - - fail - never clean nondex : nondex " 
 + - CMD2 = " & & cat ` grep - RlE ' td class = . x ' . nondex / | cat ` < / dev / null > output . txt " 
 + - CMD3 = " & & RESULT = \ $ ( cat output . txt | wc - c ) & & cat output . txt " 
 + - CMD4 = " & & echo ' Size of output : ' \ $ RESULT & & if [ [ \ $ RESULT ! = 0 ] ] ; then false ; fi " 
 + - CMD = $ CMD1 $ CMD2 $ CMD3 $ CMD4 
 + - COVERAGE _ CMD = " " 
 
 # site ( oraclejdk8 as ' site ' success is required to be sure that on release time all will be ok , admins will use oracle8 version ) 
 # moved to https : / / codeship . com / projects / 124310 / configure _ tests

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 index 22081a8 . . b3283de 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 @ @ - 141 , 25 + 141 , 28 @ @ public class RedundantModifierCheck 
 if ( ast . getType ( ) = = TokenTypes . INTERFACE _ DEF ) { 
 checkInterfaceModifiers ( ast ) ; 
 } 
 - else if ( ast . getType ( ) = = TokenTypes . CTOR _ DEF ) { 
 - if ( isEnumMember ( ast ) ) { 
 - checkEnumConstructorModifiers ( ast ) ; 
 - } 
 - else { 
 - checkClassConstructorModifiers ( ast ) ; 
 - } 
 - } 
 else if ( ast . getType ( ) = = TokenTypes . ENUM _ DEF ) { 
 checkEnumDef ( ast ) ; 
 } 
 - else if ( isInterfaceOrAnnotationMember ( ast ) ) { 
 - processInterfaceOrAnnotation ( ast ) ; 
 - } 
 - else if ( ast . getType ( ) = = TokenTypes . METHOD _ DEF ) { 
 - processMethods ( ast ) ; 
 - } 
 - else if ( ast . getType ( ) = = TokenTypes . RESOURCE ) { 
 - processResources ( ast ) ; 
 + else { 
 + if ( ast . getType ( ) = = TokenTypes . CTOR _ DEF ) { 
 + if ( isEnumMember ( ast ) ) { 
 + checkEnumConstructorModifiers ( ast ) ; 
 + } 
 + else { 
 + checkClassConstructorModifiers ( ast ) ; 
 + } 
 + } 
 + else if ( ast . getType ( ) = = TokenTypes . METHOD _ DEF ) { 
 + processMethods ( ast ) ; 
 + } 
 + else if ( ast . getType ( ) = = TokenTypes . RESOURCE ) { 
 + processResources ( ast ) ; 
 + } 
 + 
 + if ( isInterfaceOrAnnotationMember ( ast ) ) { 
 + processInterfaceOrAnnotation ( ast ) ; 
 + } 
 } 
 } 
 
 @ @ - 203 , 12 + 206 , 7 @ @ public class RedundantModifierCheck 
 processInterfaceOrAnnotation ( ast ) ; 
 } 
 else if ( ast . getParent ( ) ! = null ) { 
 - final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - final DetailAST staticModifier = modifiers . findFirstToken ( TokenTypes . LITERAL _ STATIC ) ; 
 - if ( staticModifier ! = null ) { 
 - log ( staticModifier . getLineNo ( ) , staticModifier . getColumnNo ( ) , 
 - MSG _ KEY , staticModifier . getText ( ) ) ; 
 - } 
 + checkForRedundantModifier ( ast , TokenTypes . LITERAL _ STATIC ) ; 
 } 
 } 
 
 @ @ - 243 , 7 + 241 , 7 @ @ public class RedundantModifierCheck 
 } 
 
 / * * 
 - * Process validation ofMethods . 
 + * Process validation of Methods . 
 * @ param ast method AST 
 * / 
 private void processMethods ( DetailAST ast ) { 
 @ @ - 270 , 15 + 268 , 25 @ @ public class RedundantModifierCheck 
 } 
 } 
 if ( checkFinal & & ! isAnnotatedWithSafeVarargs ( ast ) ) { 
 - DetailAST modifier = modifiers . getFirstChild ( ) ; 
 - while ( modifier ! = null ) { 
 - final int type = modifier . getType ( ) ; 
 - if ( type = = TokenTypes . FINAL ) { 
 - log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , 
 - MSG _ KEY , modifier . getText ( ) ) ; 
 - break ; 
 - } 
 - modifier = modifier . getNextSibling ( ) ; 
 + checkForRedundantModifier ( ast , TokenTypes . FINAL ) ; 
 + } 
 + 
 + if ( ! ast . branchContains ( TokenTypes . SLIST ) ) { 
 + processAbstractMethodParameters ( ast ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Process validation of parameters for Methods with no definition . 
 + * @ param ast method AST 
 + * / 
 + private void processAbstractMethodParameters ( DetailAST ast ) { 
 + final DetailAST parameters = ast . findFirstToken ( TokenTypes . PARAMETERS ) ; 
 + 
 + for ( DetailAST child = parameters . getFirstChild ( ) ; child ! = null ; child = child 
 + . getNextSibling ( ) ) { 
 + if ( child . getType ( ) = = TokenTypes . PARAMETER _ DEF ) { 
 + checkForRedundantModifier ( child , TokenTypes . FINAL ) ; 
 } 
 } 
 } 
 @ @ - 290 , 7 + 298 , 7 @ @ public class RedundantModifierCheck 
 private void checkClassConstructorModifiers ( DetailAST classCtorAst ) { 
 final DetailAST classDef = classCtorAst . getParent ( ) . getParent ( ) ; 
 if ( ! isClassPublic ( classDef ) & & ! isClassProtected ( classDef ) ) { 
 - checkForRedundantPublicModifier ( classCtorAst ) ; 
 + checkForRedundantModifier ( classCtorAst , TokenTypes . LITERAL _ PUBLIC ) ; 
 } 
 } 
 
 @ @ - 299 , 30 + 307 , 19 @ @ public class RedundantModifierCheck 
 * @ param ast ast 
 * / 
 private void processResources ( DetailAST ast ) { 
 - final DetailAST modifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - DetailAST modifier = modifiers . getFirstChild ( ) ; 
 - 
 - while ( modifier ! = null ) { 
 - final int type = modifier . getType ( ) ; 
 - 
 - if ( type = = TokenTypes . FINAL ) { 
 - log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , MSG _ KEY , modifier . getText ( ) ) ; 
 - break ; 
 - } 
 - 
 - modifier = modifier . getNextSibling ( ) ; 
 - } 
 + checkForRedundantModifier ( ast , TokenTypes . FINAL ) ; 
 } 
 
 / * * 
 - * Checks if given ast has redundant public modifier . 
 + * Checks if given ast has a redundant modifier . 
 * @ param ast ast 
 + * @ param modifierType The modifier to check for . 
 * / 
 - private void checkForRedundantPublicModifier ( DetailAST ast ) { 
 + private void checkForRedundantModifier ( DetailAST ast , int modifierType ) { 
 final DetailAST astModifiers = ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 DetailAST astModifier = astModifiers . getFirstChild ( ) ; 
 while ( astModifier ! = null ) { 
 - if ( astModifier . getType ( ) = = TokenTypes . LITERAL _ PUBLIC ) { 
 + if ( astModifier . getType ( ) = = modifierType ) { 
 log ( astModifier . getLineNo ( ) , astModifier . getColumnNo ( ) , 
 MSG _ KEY , astModifier . getText ( ) ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java 
 index 35ccec7 . . 8528623 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheckTest . java 
 @ @ - 210 , 4 + 210 , 17 @ @ public class RedundantModifierCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputFinalInTryWithResource . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testFinalInAbstractMethods ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( RedundantModifierCheck . class ) ; 
 + final String [ ] expected = { 
 + " 4 : 33 : " + getCheckMessage ( MSG _ KEY , " final " ) , 
 + " 8 : 49 : " + getCheckMessage ( MSG _ KEY , " final " ) , 
 + " 11 : 17 : " + getCheckMessage ( MSG _ KEY , " final " ) , 
 + " 16 : 24 : " + getCheckMessage ( MSG _ KEY , " final " ) , 
 + " 25 : 33 : " + getCheckMessage ( MSG _ KEY , " final " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputFinalInAbstractMethods . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAbstractMethods . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAbstractMethods . java 
 new file mode 100644 
 index 0000000 . . 00c1018 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / modifier / InputFinalInAbstractMethods . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . modifier ; 
 + 
 + public abstract class InputFinalInAbstractMethods { 
 + public abstract void method ( final String param ) ; / / violation 
 + 
 + public abstract void method2 ( String param ) ; 
 + 
 + public abstract void method3 ( String param1 , final String param2 ) ; / / violation 
 + } 
 + interface IWhatever { 
 + void method ( final String param ) ; / / violation 
 + 
 + void method2 ( String param ) ; 
 + } 
 + class CWhatever { 
 + native void method ( final String param ) ; / / violation 
 + 
 + native void method2 ( String param ) ; 
 + } 
 + enum EWhatever { 
 + TEST ( ) { 
 + public void method ( String s ) { } ; 
 + } ; 
 + 
 + public abstract void method ( final String s ) ; / / violation 
 + }
