BLEU SCORE: 0.06344849033136085

TEST MSG: Issue # 6320 : added REMOVE _ CONDITIONALS mutator for common 2
GENERATED MSG: Issue # 3830 : Fix bug in DesignForExtension when order of annotations changes violation

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 19e8d86 . . 3969b7a 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 2641 , 6 + 2641 , 7 @ @ <nl> < mutator > INVERT _ NEGS < / mutator > <nl> < mutator > MATH < / mutator > <nl> < mutator > NEGATE _ CONDITIONALS < / mutator > <nl> + < mutator > REMOVE _ CONDITIONALS < / mutator > <nl> < mutator > RETURN _ VALS < / mutator > <nl> < mutator > TRUE _ RETURNS < / mutator > <nl> < mutator > VOID _ METHOD _ CALLS < / mutator > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / JavaParser . java b / src / main / java / com / puppycrawl / tools / checkstyle / JavaParser . java <nl> index d228a25 . . 2cf5801 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / JavaParser . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / JavaParser . java <nl> @ @ - 146 , 9 + 146 , 7 @ @ public final class JavaParser { <nl> DetailAST lastNode = root ; <nl> <nl> while ( curNode ! = null ) { <nl> - if ( isPositionGreater ( curNode , lastNode ) ) { <nl> - lastNode = curNode ; <nl> - } <nl> + lastNode = curNode ; <nl> <nl> CommonHiddenStreamToken tokenBefore = curNode . getHiddenBefore ( ) ; <nl> DetailAST currentSibling = curNode ; <nl> @ @ - 169 , 9 + 167 , 7 @ @ public final class JavaParser { <nl> DetailAST toVisit = curNode . getFirstChild ( ) ; <nl> while ( curNode ! = null & & toVisit = = null ) { <nl> toVisit = curNode . getNextSibling ( ) ; <nl> - if ( toVisit = = null ) { <nl> - curNode = curNode . getParent ( ) ; <nl> - } <nl> + curNode = curNode . getParent ( ) ; <nl> } <nl> curNode = toVisit ; <nl> } <nl> @ @ - 192 , 21 + 188 , 6 @ @ public final class JavaParser { <nl> } <nl> <nl> / * * <nl> - * Checks if position of first DetailAST is greater than position of <nl> - * second DetailAST . Position is line number and column number in source file . <nl> - * @ param ast1 first DetailAST node <nl> - * @ param ast2 second DetailAST node <nl> - * @ return true if position of ast1 is greater than position of ast2 <nl> - * / <nl> - private static boolean isPositionGreater ( DetailAST ast1 , DetailAST ast2 ) { <nl> - boolean isGreater = ast1 . getLineNo ( ) > ast2 . getLineNo ( ) ; <nl> - if ( ! isGreater & & ast1 . getLineNo ( ) = = ast2 . getLineNo ( ) ) { <nl> - isGreater = ast1 . getColumnNo ( ) > ast2 . getColumnNo ( ) ; <nl> - } <nl> - return isGreater ; <nl> - } <nl> - <nl> - / * * <nl> * Create comment AST from token . Depending on token type <nl> * SINGLE _ LINE _ COMMENT or BLOCK _ COMMENT _ BEGIN is created . <nl> * @ param token to create the AST <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocPropertiesGenerator . java b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocPropertiesGenerator . java <nl> index 47f5e0d . . bdfbd7f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocPropertiesGenerator . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocPropertiesGenerator . java <nl> @ @ - 235 , 7 + 235 , 7 @ @ public final class JavadocPropertiesGenerator { <nl> else if ( node . getType ( ) = = JavadocTokenTypes . JAVADOC _ INLINE _ TAG ) { <nl> formatInlineCodeTag ( builder , node ) ; <nl> } <nl> - else if ( node . getType ( ) = = JavadocTokenTypes . HTML _ ELEMENT ) { <nl> + else { <nl> formatHtmlElement ( builder , node ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / JavaParserTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / JavaParserTest . java <nl> index f546e40 . . 37042a0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / JavaParserTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / JavaParserTest . java <nl> @ @ - 19 , 17 + 19 , 20 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle ; <nl> <nl> + import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> import java . io . File ; <nl> - import java . lang . reflect . Method ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> import java . util . Optional ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> - import org . powermock . reflect . Whitebox ; <nl> <nl> import antlr . NoViableAltException ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> @ @ - 51 , 6 + 54 , 11 @ @ public class JavaParserTest extends AbstractModuleTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testNullRootWithComments ( ) { <nl> + assertNull ( " Invalid return root " , JavaParser . appendHiddenCommentNodes ( null ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testAppendHiddenBlockCommentNodes ( ) throws Exception { <nl> final DetailAST root = <nl> JavaParser . parseFile ( new File ( getPath ( " InputJavaParserHiddenComments . java " ) ) , <nl> @ @ - 126 , 28 + 134 , 15 @ @ public class JavaParserTest extends AbstractModuleTestSupport { <nl> commentContent . getText ( ) . startsWith ( " indented comment " ) ) ; <nl> } <nl> <nl> - / * * <nl> - * Could not find proper test case to test pitest mutations functionally . <nl> - * Should be rewritten during grammar update . <nl> - * <nl> - * @ throws Exception when code tested throws exception <nl> - * / <nl> @ Test <nl> - public void testIsPositionGreater ( ) throws Exception { <nl> - final DetailAST ast1 = createAst ( 1 , 3 ) ; <nl> - final DetailAST ast2 = createAst ( 1 , 2 ) ; <nl> - final DetailAST ast3 = createAst ( 2 , 2 ) ; <nl> - <nl> - final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> - final Method isPositionGreater = Whitebox . getMethod ( JavaParser . class , <nl> - " isPositionGreater " , DetailAST . class , DetailAST . class ) ; <nl> - <nl> - assertTrue ( " Should return true when lines are equal and column is greater " , <nl> - ( boolean ) isPositionGreater . invoke ( treeWalker , ast1 , ast2 ) ) ; <nl> - assertFalse ( " Should return false when lines are equal columns are equal " , <nl> - ( boolean ) isPositionGreater . invoke ( treeWalker , ast1 , ast1 ) ) ; <nl> - assertTrue ( " Should return true when line is greater " , <nl> - ( boolean ) isPositionGreater . invoke ( treeWalker , ast3 , ast1 ) ) ; <nl> + public void testDontAppendCommentNodes ( ) throws Exception { <nl> + final DetailAST root = <nl> + JavaParser . parseFile ( new File ( getPath ( " InputJavaParserHiddenComments . java " ) ) , <nl> + JavaParser . Options . WITHOUT _ COMMENTS ) ; <nl> + <nl> + final Optional < DetailAST > singleLineComment = TestUtil . findTokenInAstByPredicate ( root , <nl> + ast - > ast . getType ( ) = = TokenTypes . SINGLE _ LINE _ COMMENT ) ; <nl> + assertFalse ( " Single line comment should be present " , singleLineComment . isPresent ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 158 , 6 + 153 , 11 @ @ public class JavaParserTest extends AbstractModuleTestSupport { <nl> Assert . fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> + assertEquals ( " Invalid exception message " , <nl> + CheckstyleException . class . getName ( ) <nl> + + " : NoViableAltException occurred while parsing file " <nl> + + input . getAbsolutePath ( ) + " . " , <nl> + ex . toString ( ) ) ; <nl> Assert . assertSame ( " Invalid class " , <nl> NoViableAltException . class , ex . getCause ( ) . getClass ( ) ) ; <nl> assertEquals ( " Invalid exception message " , <nl> @ @ - 166 , 11 + 166 , 41 @ @ public class JavaParserTest extends AbstractModuleTestSupport { <nl> } <nl> } <nl> <nl> - private static DetailAST createAst ( int line , int column ) { <nl> - final DetailAST ast = new DetailAST ( ) ; <nl> - ast . setLineNo ( line ) ; <nl> - ast . setColumnNo ( column ) ; <nl> - return ast ; <nl> + @ Test <nl> + public void testComments ( ) throws Exception { <nl> + final DetailAST root = <nl> + JavaParser . parseFile ( new File ( getPath ( " InputJavaParserHiddenComments3 . java " ) ) , <nl> + JavaParser . Options . WITH _ COMMENTS ) ; <nl> + final CountComments counter = new CountComments ( root ) ; <nl> + <nl> + assertArrayEquals ( " Invalid line comments " , <nl> + Arrays . asList ( " 1 , 4 " , " 6 , 4 " , " 9 , 0 " ) . toArray ( ) , <nl> + counter . lineComments . toArray ( ) ) ; <nl> + assertArrayEquals ( " Invalid block comments " , <nl> + Arrays . asList ( " 5 , 4 " , " 8 , 0 " ) . toArray ( ) , <nl> + counter . blockComments . toArray ( ) ) ; <nl> + } <nl> + <nl> + private static final class CountComments { <nl> + private final List < String > lineComments = new ArrayList < > ( ) ; <nl> + private final List < String > blockComments = new ArrayList < > ( ) ; <nl> + <nl> + CountComments ( DetailAST root ) { <nl> + forEachChild ( root ) ; <nl> + } <nl> + <nl> + private void forEachChild ( DetailAST root ) { <nl> + for ( DetailAST ast = root ; ast ! = null ; ast = ast . getNextSibling ( ) ) { <nl> + if ( ast . getType ( ) = = TokenTypes . SINGLE _ LINE _ COMMENT ) { <nl> + lineComments . add ( ast . getLineNo ( ) + " , " + ast . getColumnNo ( ) ) ; <nl> + } <nl> + else if ( ast . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN ) { <nl> + blockComments . add ( ast . getLineNo ( ) + " , " + ast . getColumnNo ( ) ) ; <nl> + } <nl> + <nl> + forEachChild ( ast . getFirstChild ( ) ) ; <nl> + } <nl> + } <nl> } <nl> <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / javaparser / InputJavaParserHiddenComments3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / javaparser / InputJavaParserHiddenComments3 . java <nl> new file mode 100644 <nl> index 0000000 . . 99e2e1d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / javaparser / InputJavaParserHiddenComments3 . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + / / indented comment <nl> + package com . puppycrawl . tools . checkstyle . javaparser ; <nl> + <nl> + public class InputJavaParserHiddenComments3 { <nl> + / * * Javadoc * / <nl> + / / comment <nl> + } <nl> + / * * Javadoc * / <nl> + / / comment
NEAREST DIFF (one line): diff - - git a / wercker . yml b / wercker . yml <nl> index 61e91c0 . . b4990bd 100644 <nl> - - - a / wercker . yml <nl> + + + b / wercker . yml <nl> @ @ - 71 , 7 + 71 , 7 @ @ build : <nl> & & CS _ POM _ VERSION = $ ( mvn - q - Dexec . executable = ' echo ' - Dexec . args = ' $ { project . version } ' - - non - recursive org . codehaus . mojo : exec - maven - plugin : 1 . 3 . 1 : exec ) <nl> & & echo CS _ version : $ { CS _ POM _ VERSION } <nl> & & echo " checkouting project sources . . . " <nl> - & & svn - q export https : / / svn . code . sf . net / p / htmlunit / code / trunk / htmlunit htmlunit <nl> + & & svn - q export https : / / svn . code . sf . net / p / htmlunit / code / trunk / htmlunit @ 13543 htmlunit <nl> & & cd htmlunit <nl> & & echo " Running checkstyle validation . . . " <nl> & & mvn compile checkstyle : check - Dcheckstyle . version = $ { CS _ POM _ VERSION }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 19e8d86 . . 3969b7a 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 2641 , 6 + 2641 , 7 @ @ 
 < mutator > INVERT _ NEGS < / mutator > 
 < mutator > MATH < / mutator > 
 < mutator > NEGATE _ CONDITIONALS < / mutator > 
 + < mutator > REMOVE _ CONDITIONALS < / mutator > 
 < mutator > RETURN _ VALS < / mutator > 
 < mutator > TRUE _ RETURNS < / mutator > 
 < mutator > VOID _ METHOD _ CALLS < / mutator > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / JavaParser . java b / src / main / java / com / puppycrawl / tools / checkstyle / JavaParser . java 
 index d228a25 . . 2cf5801 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / JavaParser . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / JavaParser . java 
 @ @ - 146 , 9 + 146 , 7 @ @ public final class JavaParser { 
 DetailAST lastNode = root ; 
 
 while ( curNode ! = null ) { 
 - if ( isPositionGreater ( curNode , lastNode ) ) { 
 - lastNode = curNode ; 
 - } 
 + lastNode = curNode ; 
 
 CommonHiddenStreamToken tokenBefore = curNode . getHiddenBefore ( ) ; 
 DetailAST currentSibling = curNode ; 
 @ @ - 169 , 9 + 167 , 7 @ @ public final class JavaParser { 
 DetailAST toVisit = curNode . getFirstChild ( ) ; 
 while ( curNode ! = null & & toVisit = = null ) { 
 toVisit = curNode . getNextSibling ( ) ; 
 - if ( toVisit = = null ) { 
 - curNode = curNode . getParent ( ) ; 
 - } 
 + curNode = curNode . getParent ( ) ; 
 } 
 curNode = toVisit ; 
 } 
 @ @ - 192 , 21 + 188 , 6 @ @ public final class JavaParser { 
 } 
 
 / * * 
 - * Checks if position of first DetailAST is greater than position of 
 - * second DetailAST . Position is line number and column number in source file . 
 - * @ param ast1 first DetailAST node 
 - * @ param ast2 second DetailAST node 
 - * @ return true if position of ast1 is greater than position of ast2 
 - * / 
 - private static boolean isPositionGreater ( DetailAST ast1 , DetailAST ast2 ) { 
 - boolean isGreater = ast1 . getLineNo ( ) > ast2 . getLineNo ( ) ; 
 - if ( ! isGreater & & ast1 . getLineNo ( ) = = ast2 . getLineNo ( ) ) { 
 - isGreater = ast1 . getColumnNo ( ) > ast2 . getColumnNo ( ) ; 
 - } 
 - return isGreater ; 
 - } 
 - 
 - / * * 
 * Create comment AST from token . Depending on token type 
 * SINGLE _ LINE _ COMMENT or BLOCK _ COMMENT _ BEGIN is created . 
 * @ param token to create the AST 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocPropertiesGenerator . java b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocPropertiesGenerator . java 
 index 47f5e0d . . bdfbd7f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / JavadocPropertiesGenerator . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / JavadocPropertiesGenerator . java 
 @ @ - 235 , 7 + 235 , 7 @ @ public final class JavadocPropertiesGenerator { 
 else if ( node . getType ( ) = = JavadocTokenTypes . JAVADOC _ INLINE _ TAG ) { 
 formatInlineCodeTag ( builder , node ) ; 
 } 
 - else if ( node . getType ( ) = = JavadocTokenTypes . HTML _ ELEMENT ) { 
 + else { 
 formatHtmlElement ( builder , node ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / JavaParserTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / JavaParserTest . java 
 index f546e40 . . 37042a0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / JavaParserTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / JavaParserTest . java 
 @ @ - 19 , 17 + 19 , 20 @ @ 
 
 package com . puppycrawl . tools . checkstyle ; 
 
 + import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertNull ; 
 import static org . junit . Assert . assertTrue ; 
 
 import java . io . File ; 
 - import java . lang . reflect . Method ; 
 + import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 import java . util . Optional ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 - import org . powermock . reflect . Whitebox ; 
 
 import antlr . NoViableAltException ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 @ @ - 51 , 6 + 54 , 11 @ @ public class JavaParserTest extends AbstractModuleTestSupport { 
 } 
 
 @ Test 
 + public void testNullRootWithComments ( ) { 
 + assertNull ( " Invalid return root " , JavaParser . appendHiddenCommentNodes ( null ) ) ; 
 + } 
 + 
 + @ Test 
 public void testAppendHiddenBlockCommentNodes ( ) throws Exception { 
 final DetailAST root = 
 JavaParser . parseFile ( new File ( getPath ( " InputJavaParserHiddenComments . java " ) ) , 
 @ @ - 126 , 28 + 134 , 15 @ @ public class JavaParserTest extends AbstractModuleTestSupport { 
 commentContent . getText ( ) . startsWith ( " indented comment " ) ) ; 
 } 
 
 - / * * 
 - * Could not find proper test case to test pitest mutations functionally . 
 - * Should be rewritten during grammar update . 
 - * 
 - * @ throws Exception when code tested throws exception 
 - * / 
 @ Test 
 - public void testIsPositionGreater ( ) throws Exception { 
 - final DetailAST ast1 = createAst ( 1 , 3 ) ; 
 - final DetailAST ast2 = createAst ( 1 , 2 ) ; 
 - final DetailAST ast3 = createAst ( 2 , 2 ) ; 
 - 
 - final TreeWalker treeWalker = new TreeWalker ( ) ; 
 - final Method isPositionGreater = Whitebox . getMethod ( JavaParser . class , 
 - " isPositionGreater " , DetailAST . class , DetailAST . class ) ; 
 - 
 - assertTrue ( " Should return true when lines are equal and column is greater " , 
 - ( boolean ) isPositionGreater . invoke ( treeWalker , ast1 , ast2 ) ) ; 
 - assertFalse ( " Should return false when lines are equal columns are equal " , 
 - ( boolean ) isPositionGreater . invoke ( treeWalker , ast1 , ast1 ) ) ; 
 - assertTrue ( " Should return true when line is greater " , 
 - ( boolean ) isPositionGreater . invoke ( treeWalker , ast3 , ast1 ) ) ; 
 + public void testDontAppendCommentNodes ( ) throws Exception { 
 + final DetailAST root = 
 + JavaParser . parseFile ( new File ( getPath ( " InputJavaParserHiddenComments . java " ) ) , 
 + JavaParser . Options . WITHOUT _ COMMENTS ) ; 
 + 
 + final Optional < DetailAST > singleLineComment = TestUtil . findTokenInAstByPredicate ( root , 
 + ast - > ast . getType ( ) = = TokenTypes . SINGLE _ LINE _ COMMENT ) ; 
 + assertFalse ( " Single line comment should be present " , singleLineComment . isPresent ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 158 , 6 + 153 , 11 @ @ public class JavaParserTest extends AbstractModuleTestSupport { 
 Assert . fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 + assertEquals ( " Invalid exception message " , 
 + CheckstyleException . class . getName ( ) 
 + + " : NoViableAltException occurred while parsing file " 
 + + input . getAbsolutePath ( ) + " . " , 
 + ex . toString ( ) ) ; 
 Assert . assertSame ( " Invalid class " , 
 NoViableAltException . class , ex . getCause ( ) . getClass ( ) ) ; 
 assertEquals ( " Invalid exception message " , 
 @ @ - 166 , 11 + 166 , 41 @ @ public class JavaParserTest extends AbstractModuleTestSupport { 
 } 
 } 
 
 - private static DetailAST createAst ( int line , int column ) { 
 - final DetailAST ast = new DetailAST ( ) ; 
 - ast . setLineNo ( line ) ; 
 - ast . setColumnNo ( column ) ; 
 - return ast ; 
 + @ Test 
 + public void testComments ( ) throws Exception { 
 + final DetailAST root = 
 + JavaParser . parseFile ( new File ( getPath ( " InputJavaParserHiddenComments3 . java " ) ) , 
 + JavaParser . Options . WITH _ COMMENTS ) ; 
 + final CountComments counter = new CountComments ( root ) ; 
 + 
 + assertArrayEquals ( " Invalid line comments " , 
 + Arrays . asList ( " 1 , 4 " , " 6 , 4 " , " 9 , 0 " ) . toArray ( ) , 
 + counter . lineComments . toArray ( ) ) ; 
 + assertArrayEquals ( " Invalid block comments " , 
 + Arrays . asList ( " 5 , 4 " , " 8 , 0 " ) . toArray ( ) , 
 + counter . blockComments . toArray ( ) ) ; 
 + } 
 + 
 + private static final class CountComments { 
 + private final List < String > lineComments = new ArrayList < > ( ) ; 
 + private final List < String > blockComments = new ArrayList < > ( ) ; 
 + 
 + CountComments ( DetailAST root ) { 
 + forEachChild ( root ) ; 
 + } 
 + 
 + private void forEachChild ( DetailAST root ) { 
 + for ( DetailAST ast = root ; ast ! = null ; ast = ast . getNextSibling ( ) ) { 
 + if ( ast . getType ( ) = = TokenTypes . SINGLE _ LINE _ COMMENT ) { 
 + lineComments . add ( ast . getLineNo ( ) + " , " + ast . getColumnNo ( ) ) ; 
 + } 
 + else if ( ast . getType ( ) = = TokenTypes . BLOCK _ COMMENT _ BEGIN ) { 
 + blockComments . add ( ast . getLineNo ( ) + " , " + ast . getColumnNo ( ) ) ; 
 + } 
 + 
 + forEachChild ( ast . getFirstChild ( ) ) ; 
 + } 
 + } 
 } 
 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / javaparser / InputJavaParserHiddenComments3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / javaparser / InputJavaParserHiddenComments3 . java 
 new file mode 100644 
 index 0000000 . . 99e2e1d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / javaparser / InputJavaParserHiddenComments3 . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + / / indented comment 
 + package com . puppycrawl . tools . checkstyle . javaparser ; 
 + 
 + public class InputJavaParserHiddenComments3 { 
 + / * * Javadoc * / 
 + / / comment 
 + } 
 + / * * Javadoc * / 
 + / / comment

NEAREST DIFF:
diff - - git a / wercker . yml b / wercker . yml 
 index 61e91c0 . . b4990bd 100644 
 - - - a / wercker . yml 
 + + + b / wercker . yml 
 @ @ - 71 , 7 + 71 , 7 @ @ build : 
 & & CS _ POM _ VERSION = $ ( mvn - q - Dexec . executable = ' echo ' - Dexec . args = ' $ { project . version } ' - - non - recursive org . codehaus . mojo : exec - maven - plugin : 1 . 3 . 1 : exec ) 
 & & echo CS _ version : $ { CS _ POM _ VERSION } 
 & & echo " checkouting project sources . . . " 
 - & & svn - q export https : / / svn . code . sf . net / p / htmlunit / code / trunk / htmlunit htmlunit 
 + & & svn - q export https : / / svn . code . sf . net / p / htmlunit / code / trunk / htmlunit @ 13543 htmlunit 
 & & cd htmlunit 
 & & echo " Running checkstyle validation . . . " 
 & & mvn compile checkstyle : check - Dcheckstyle . version = $ { CS _ POM _ VERSION }
