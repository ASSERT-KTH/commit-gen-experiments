BLEU SCORE: 0.025889065173943994

TEST MSG: Issue # 3678 : RightCurly with DO - WHILE demands WHILE to be on new line ( configuration problem with RightCurly check in google _ checks . xml ) . Update for ITs .
GENERATED MSG: Issue # 2540 : unify it input file names for chapter6programpractice

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> index 7cd7ae9 . . 478d15d 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java <nl> @ @ - 254 , 13 + 254 , 44 @ @ public class BaseCheckTestSupport { <nl> * @ throws CheckstyleException if exception occurs during configuration loading . <nl> * / <nl> protected static Configuration getCheckConfig ( String checkName ) throws CheckstyleException { <nl> + final Configuration result ; <nl> final List < Configuration > configs = getCheckConfigs ( checkName ) ; <nl> - if ( configs . isEmpty ( ) ) { <nl> - return null ; <nl> + if ( configs . size ( ) = = 1 ) { <nl> + result = configs . get ( 0 ) ; <nl> } <nl> else { <nl> - return configs . get ( 0 ) ; <nl> + result = configs . get ( 0 ) ; <nl> + / / throw new IllegalStateException ( " multiple instances of the same Check are detected " ) ; <nl> } <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns { @ link Configuration } instance for the given check name . <nl> + * This implementation uses { @ link BaseCheckTestSupport # getConfiguration ( ) } method inside . <nl> + * @ param checkName check name . <nl> + * @ return { @ link Configuration } instance for the given check name . <nl> + * @ throws CheckstyleException if exception occurs during configuration loading . <nl> + * / <nl> + protected static Configuration getCheckConfig ( String checkName , String checkId ) <nl> + throws CheckstyleException { <nl> + final Configuration result ; <nl> + final List < Configuration > configs = getCheckConfigs ( checkName ) ; <nl> + if ( configs . size ( ) = = 1 ) { <nl> + result = configs . get ( 0 ) ; <nl> + } <nl> + else { <nl> + result = configs . stream ( ) . filter ( conf - > { <nl> + try { <nl> + return conf . getAttribute ( " id " ) . equals ( checkId ) ; <nl> + } <nl> + catch ( CheckstyleException ex ) { <nl> + throw new IllegalStateException ( " problem to get ID attribute from " + conf , ex ) ; <nl> + } <nl> + } ) <nl> + . findFirst ( ) . orElseGet ( null ) ; <nl> + } <nl> + return result ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java <nl> index 8f1cddd . . 16b3d91 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package com . google . checkstyle . test . chapter4formatting . rule412nonemptyblocks ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ ALONE ; <nl> + import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ BREAK _ BEFORE ; <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ NEW ; <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ SAME ; <nl> <nl> @ @ - 29 , 9 + 30 , 8 @ @ import java . io . IOException ; <nl> import org . junit . Test ; <nl> <nl> import com . google . checkstyle . test . base . BaseCheckTestSupport ; <nl> - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck ; <nl> - import com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyOption ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class RightCurlyTest extends BaseCheckTestSupport { <nl> @ @ - 44 , 46 + 44 , 80 @ @ public class RightCurlyTest extends BaseCheckTestSupport { <nl> <nl> @ Test <nl> public void rightCurlyTestAlone ( ) throws Exception { <nl> - final DefaultConfiguration newCheckConfig = createCheckConfig ( RightCurlyCheck . class ) ; <nl> - newCheckConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; <nl> - newCheckConfig . addAttribute ( " tokens " , " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF " ) ; <nl> - <nl> final String [ ] expected = { <nl> - " 97 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> - " 97 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> - " 108 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> - " 108 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> - " 122 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> + " 20 : 17 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ SAME , " } " , 17 ) , <nl> + " 32 : 13 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ SAME , " } " , 13 ) , <nl> + " 79 : 27 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ BREAK _ BEFORE , " } " , 27 ) , <nl> } ; <nl> <nl> + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyDefault " ) ; <nl> final String filePath = getPath ( " InputRightCurlyOther . java " ) ; <nl> + <nl> final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> - verify ( newCheckConfig , filePath , expected , warnList ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> } <nl> <nl> @ Test <nl> public void rightCurlyTestSame ( ) throws Exception { <nl> - final DefaultConfiguration newCheckConfig = createCheckConfig ( RightCurlyCheck . class ) ; <nl> - newCheckConfig . addAttribute ( " option " , RightCurlyOption . SAME . toString ( ) ) ; <nl> - <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyDefault " ) ; <nl> final String filePath = getPath ( " InputRightCurlySame . java " ) ; <nl> + <nl> final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> - verify ( newCheckConfig , filePath , expected , warnList ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> } <nl> <nl> @ Test <nl> - public void testRightCurlySameAndLiteralDo ( ) throws Exception { <nl> - final DefaultConfiguration checkConfig = createCheckConfig ( RightCurlyCheck . class ) ; <nl> - checkConfig . addAttribute ( " option " , RightCurlyOption . SAME . toString ( ) ) ; <nl> - checkConfig . addAttribute ( " tokens " , " LITERAL _ DO " ) ; <nl> + public void testRightCurlySameAndLiteralDoDefault ( ) throws Exception { <nl> final String [ ] expected = { <nl> " 62 : 9 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ SAME , " } " , 9 ) , <nl> " 67 : 13 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ SAME , " } " , 13 ) , <nl> " 83 : 9 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ SAME , " } " , 9 ) , <nl> } ; <nl> + <nl> + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyDefault " ) ; <nl> final String filePath = getPath ( " InputRightCurlyDoWhile . java " ) ; <nl> + <nl> + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRightCurlyAloneOther ( ) throws Exception { <nl> + final String [ ] expected = { <nl> + " 97 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> + " 97 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> + " 108 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , <nl> + " 108 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> + " 122 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , <nl> + } ; <nl> + <nl> + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyAlone " ) ; <nl> + final String filePath = getPath ( " InputRightCurlyOtherAlone . java " ) ; <nl> + <nl> + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void rightCurlyAloneTestSame ( ) throws Exception { <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyAlone " ) ; <nl> + final String filePath = getPath ( " InputRightCurlySame . java " ) ; <nl> + <nl> + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRightCurlyAloneSameAndLiteralDo ( ) throws Exception { <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyAlone " ) ; <nl> + final String filePath = getPath ( " InputRightCurlyDoWhileAlone . java " ) ; <nl> + <nl> final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> verify ( checkConfig , filePath , expected , warnList ) ; <nl> } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyDoWhileAlone . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyDoWhileAlone . java <nl> new file mode 100644 <nl> index 0000000 . . 9eafa2a <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyDoWhileAlone . java <nl> @ @ - 0 , 0 + 1 , 93 @ @ <nl> + package com . google . checkstyle . test . chapter4formatting . rule412nonemptyblocks ; <nl> + <nl> + import java . util . Scanner ; <nl> + <nl> + / * * <nl> + * Test input for GitHub issue # 3090 . <nl> + * https : / / github . com / checkstyle / checkstyle / issues / 3090 <nl> + * / <nl> + public class InputRightCurlyDoWhileAlone { <nl> + <nl> + public void foo1 ( ) { <nl> + do { <nl> + } while ( true ) ; <nl> + } <nl> + <nl> + public void foo2 ( ) { <nl> + int i = 1 ; <nl> + while ( i < 5 ) { <nl> + String . CASE _ INSENSITIVE _ ORDER . equals ( i + " " ) ; <nl> + i + + ; <nl> + } <nl> + } <nl> + <nl> + public void foo3 ( ) { <nl> + int i = 1 ; <nl> + do { <nl> + i + + ; <nl> + String . CASE _ INSENSITIVE _ ORDER . equals ( i + " " ) ; <nl> + } while ( i < 5 ) ; <nl> + } <nl> + <nl> + public void foo4 ( ) { <nl> + int prog , user ; <nl> + prog = ( int ) ( Math . random ( ) * 10 ) + 1 ; <nl> + Scanner input = new Scanner ( System . in , " utf - 8 " ) ; <nl> + if ( input . hasNextInt ( ) ) { <nl> + do { <nl> + user = input . nextInt ( ) ; <nl> + if ( user = = prog ) { <nl> + String . CASE _ INSENSITIVE _ ORDER . equals ( " Good ! " ) ; <nl> + } else { <nl> + if ( user > 0 & & user < = 10 ) { <nl> + String . CASE _ INSENSITIVE _ ORDER . equals ( " Bad ! " ) ; <nl> + if ( prog < user ) { <nl> + String . CASE _ INSENSITIVE _ ORDER . equals ( " My number is less than yours . " ) ; <nl> + } else { <nl> + String . CASE _ INSENSITIVE _ ORDER . equals ( " My number is greater than yours . " ) ; <nl> + } <nl> + } else { <nl> + String . CASE _ INSENSITIVE _ ORDER . equals ( " Error ! " ) ; <nl> + } <nl> + } <nl> + } while ( user ! = prog ) ; <nl> + } else { <nl> + String . CASE _ INSENSITIVE _ ORDER . equals ( " Error ! " ) ; <nl> + } <nl> + String . CASE _ INSENSITIVE _ ORDER . equals ( " Goodbye ! " ) ; <nl> + } <nl> + <nl> + public void foo5 ( ) { <nl> + do { <nl> + } / / ok - for alone <nl> + while ( true ) ; <nl> + } <nl> + <nl> + public void foo6 ( ) { <nl> + do { } / / ok - for alone <nl> + while ( true ) ; <nl> + } <nl> + <nl> + public void foo7 ( ) { <nl> + do <nl> + { <nl> + <nl> + } while ( true ) ; <nl> + } <nl> + <nl> + public void foo8 ( ) { <nl> + do <nl> + <nl> + { <nl> + <nl> + } / / ok - for alone <nl> + <nl> + while <nl> + <nl> + ( true ) ; <nl> + } <nl> + <nl> + public void foo9 ( ) { <nl> + do { } while ( true ) ; <nl> + } <nl> + } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyOther . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyOther . java <nl> index 56a8379 . . 19d20c2 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyOther . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyOther . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ class InputRightCurlyOther <nl> } else if ( x < 0 ) { / / ok <nl> <nl> ; <nl> - } <nl> + } / / warn <nl> else <nl> { <nl> break ; <nl> @ @ - 29 , 7 + 29 , 7 @ @ class InputRightCurlyOther <nl> default : <nl> break ; <nl> } / / ok <nl> - } <nl> + } / / warn <nl> catch ( Exception e ) <nl> { <nl> break ; <nl> @ @ - 76 , 7 + 76 , 7 @ @ class InputRightCurlyOther <nl> boolean flag = true ; <nl> if ( flag ) { <nl> System . identityHashCode ( " heh " ) ; <nl> - flag = ! flag ; } System . <nl> + flag = ! flag ; } System . / / warn <nl> identityHashCode ( " Xe - xe " ) ; <nl> <nl> <nl> @ @ - 94 , 7 + 94 , 7 @ @ class FooCtor <nl> public FooCtor ( ) <nl> { <nl> i = 1 ; <nl> - } } / / warn <nl> + } } / / ok <nl> <nl> / * * <nl> * Test input for closing brace if that brace terminates <nl> @ @ - 105 , 7 + 105 , 7 @ @ class FooMethod <nl> public void fooMethod ( ) <nl> { <nl> int i = 1 ; <nl> - } } / / warn <nl> + } } / / ok <nl> <nl> / * * <nl> * Test input for closing brace if that brace terminates <nl> @ @ - 119 , 7 + 119 , 7 @ @ class FooInner <nl> { <nl> <nl> } <nl> - } } / / warn <nl> + } } / / ok <nl> <nl> class EnumContainer { <nl> private enum Suit { CLUBS , HEARTS , SPADES , DIAMONDS } / / ok <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyOtherAlone . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyOtherAlone . java <nl> new file mode 100644 <nl> index 0000000 . . e04bd15 <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyOtherAlone . java <nl> @ @ - 0 , 0 + 1 , 145 @ @ <nl> + package com . google . checkstyle . test . chapter4formatting . rule412nonemptyblocks ; <nl> + <nl> + class InputRightCurlyOtherAlone <nl> + { <nl> + / * * @ see test method * * / <nl> + int foo ( ) throws InterruptedException <nl> + { <nl> + int x = 1 ; <nl> + int a = 2 ; <nl> + while ( true ) <nl> + { <nl> + try <nl> + { <nl> + if ( x > 0 ) <nl> + { <nl> + break ; <nl> + } else if ( x < 0 ) { / / ok <nl> + <nl> + ; <nl> + } / / ok - for alone config <nl> + else <nl> + { <nl> + break ; <nl> + } / / ok <nl> + switch ( a ) <nl> + { <nl> + case 0 : <nl> + break ; <nl> + default : <nl> + break ; <nl> + } / / ok <nl> + } / / ok - for alone config <nl> + catch ( Exception e ) <nl> + { <nl> + break ; <nl> + } / / ok <nl> + } / / ok <nl> + <nl> + synchronized ( this ) <nl> + { <nl> + do <nl> + { <nl> + x = 2 ; <nl> + } while ( x = = 2 ) ; / / ok <nl> + } / / ok <nl> + <nl> + this . wait ( 666 <nl> + ) ; / / Bizarre , but legal <nl> + <nl> + for ( int k = 0 ; k < 1 ; k + + ) <nl> + { <nl> + String innerBlockVariable = " " ; <nl> + } / / ok <nl> + <nl> + <nl> + if ( System . currentTimeMillis ( ) > 1000 ) <nl> + return 1 ; <nl> + else <nl> + return 2 ; <nl> + } / / ok <nl> + <nl> + <nl> + static <nl> + { <nl> + int x = 1 ; <nl> + } / / ok <nl> + <nl> + public enum GreetingsEnum <nl> + { <nl> + HELLO , <nl> + GOODBYE <nl> + } ; / / ok <nl> + <nl> + void method2 ( ) <nl> + { <nl> + boolean flag = true ; <nl> + if ( flag ) { <nl> + System . identityHashCode ( " heh " ) ; <nl> + flag = ! flag ; } System . / / ok for alone config <nl> + identityHashCode ( " Xe - xe " ) ; <nl> + <nl> + <nl> + if ( flag ) { System . identityHashCode ( " some foo " ) ; } <nl> + } / / ok <nl> + } / / ok <nl> + <nl> + / * * <nl> + * Test input for closing brace if that brace terminates <nl> + * a statement or the body of a constructor . <nl> + * / <nl> + class FooCtorAlone <nl> + { <nl> + int i ; <nl> + public FooCtorAlone ( ) <nl> + { <nl> + i = 1 ; <nl> + } } / / warn <nl> + <nl> + / * * <nl> + * Test input for closing brace if that brace terminates <nl> + * a statement or the body of a method . <nl> + * / <nl> + class FooMethodAlone <nl> + { <nl> + public void fooMethod ( ) <nl> + { <nl> + int i = 1 ; <nl> + } } / / warn <nl> + <nl> + / * * <nl> + * Test input for closing brace if that brace terminates <nl> + * a statement or the body of a named class . <nl> + * / <nl> + class FooInnerAlone <nl> + { <nl> + class InnerFoo <nl> + { <nl> + public void fooInnerMethod ( ) <nl> + { <nl> + <nl> + } <nl> + } } / / warn <nl> + <nl> + class EnumContainerAlone { <nl> + private enum Suit { CLUBS , HEARTS , SPADES , DIAMONDS } / / ok <nl> + } <nl> + <nl> + class WithArraysAlone { <nl> + String [ ] s = { " " } ; / / ok <nl> + String [ ] empty = { } ; / / ok <nl> + String [ ] s1 = { <nl> + " foo " , " foo " , <nl> + } ; / / ok <nl> + String [ ] s2 = <nl> + { <nl> + " foo " , " foo " , <nl> + } ; / / ok <nl> + String [ ] s3 = <nl> + { <nl> + " foo " , <nl> + " foo " , <nl> + } ; / / ok <nl> + String [ ] s4 = <nl> + { " foo " , " foo " } ; / / ok <nl> + } <nl> diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml <nl> index 578da16 . . 9e0a0d9 100644 <nl> - - - a / src / main / resources / google _ checks . xml <nl> + + + b / src / main / resources / google _ checks . xml <nl> @ @ - 55 , 12 + 55 , 13 @ @ <nl> < property name = " maxLineLength " value = " 100 " / > <nl> < / module > <nl> < module name = " RightCurly " > <nl> - < property name = " id " value = " RightCurlyDefault " / > <nl> + < property name = " id " value = " RightCurlySame " / > <nl> + < property name = " tokens " value = " LITERAL _ TRY , LITERAL _ CATCH , LITERAL _ FINALLY , LITERAL _ IF , LITERAL _ ELSE , LITERAL _ DO " / > <nl> < / module > <nl> < module name = " RightCurly " > <nl> < property name = " id " value = " RightCurlyAlone " / > <nl> < property name = " option " value = " alone " / > <nl> - < property name = " tokens " value = " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF , LITERAL _ FOR , LITERAL _ WHILE , LITERAL _ DO , STATIC _ INIT , INSTANCE _ INIT " / > <nl> + < property name = " tokens " value = " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF , LITERAL _ FOR , LITERAL _ WHILE , STATIC _ INIT , INSTANCE _ INIT " / > <nl> < / module > <nl> < module name = " WhitespaceAround " > <nl> < property name = " allowEmptyConstructors " value = " true " / >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 14d33e5 . . d037fc9 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 257 , 7 + 257 , 7 @ @ <nl> < dependency > <nl> < groupId > com . github . stefanbirkner < / groupId > <nl> < artifactId > system - rules < / artifactId > <nl> - < version > 1 . 12 . 1 < / version > <nl> + < version > 1 . 13 . 0 < / version > <nl> < scope > test < / scope > <nl> < / dependency > <nl> < dependency >

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 index 7cd7ae9 . . 478d15d 100644 
 - - - a / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 + + + b / src / it / java / com / google / checkstyle / test / base / BaseCheckTestSupport . java 
 @ @ - 254 , 13 + 254 , 44 @ @ public class BaseCheckTestSupport { 
 * @ throws CheckstyleException if exception occurs during configuration loading . 
 * / 
 protected static Configuration getCheckConfig ( String checkName ) throws CheckstyleException { 
 + final Configuration result ; 
 final List < Configuration > configs = getCheckConfigs ( checkName ) ; 
 - if ( configs . isEmpty ( ) ) { 
 - return null ; 
 + if ( configs . size ( ) = = 1 ) { 
 + result = configs . get ( 0 ) ; 
 } 
 else { 
 - return configs . get ( 0 ) ; 
 + result = configs . get ( 0 ) ; 
 + / / throw new IllegalStateException ( " multiple instances of the same Check are detected " ) ; 
 } 
 + return result ; 
 + } 
 + 
 + / * * 
 + * Returns { @ link Configuration } instance for the given check name . 
 + * This implementation uses { @ link BaseCheckTestSupport # getConfiguration ( ) } method inside . 
 + * @ param checkName check name . 
 + * @ return { @ link Configuration } instance for the given check name . 
 + * @ throws CheckstyleException if exception occurs during configuration loading . 
 + * / 
 + protected static Configuration getCheckConfig ( String checkName , String checkId ) 
 + throws CheckstyleException { 
 + final Configuration result ; 
 + final List < Configuration > configs = getCheckConfigs ( checkName ) ; 
 + if ( configs . size ( ) = = 1 ) { 
 + result = configs . get ( 0 ) ; 
 + } 
 + else { 
 + result = configs . stream ( ) . filter ( conf - > { 
 + try { 
 + return conf . getAttribute ( " id " ) . equals ( checkId ) ; 
 + } 
 + catch ( CheckstyleException ex ) { 
 + throw new IllegalStateException ( " problem to get ID attribute from " + conf , ex ) ; 
 + } 
 + } ) 
 + . findFirst ( ) . orElseGet ( null ) ; 
 + } 
 + return result ; 
 } 
 
 / * * 
 diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java 
 index 8f1cddd . . 16b3d91 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package com . google . checkstyle . test . chapter4formatting . rule412nonemptyblocks ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ ALONE ; 
 + import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ BREAK _ BEFORE ; 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ NEW ; 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ SAME ; 
 
 @ @ - 29 , 9 + 30 , 8 @ @ import java . io . IOException ; 
 import org . junit . Test ; 
 
 import com . google . checkstyle . test . base . BaseCheckTestSupport ; 
 - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck ; 
 - import com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyOption ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class RightCurlyTest extends BaseCheckTestSupport { 
 @ @ - 44 , 46 + 44 , 80 @ @ public class RightCurlyTest extends BaseCheckTestSupport { 
 
 @ Test 
 public void rightCurlyTestAlone ( ) throws Exception { 
 - final DefaultConfiguration newCheckConfig = createCheckConfig ( RightCurlyCheck . class ) ; 
 - newCheckConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; 
 - newCheckConfig . addAttribute ( " tokens " , " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF " ) ; 
 - 
 final String [ ] expected = { 
 - " 97 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 - " 97 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 - " 108 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 - " 108 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 - " 122 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 + " 20 : 17 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ SAME , " } " , 17 ) , 
 + " 32 : 13 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ SAME , " } " , 13 ) , 
 + " 79 : 27 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ BREAK _ BEFORE , " } " , 27 ) , 
 } ; 
 
 + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyDefault " ) ; 
 final String filePath = getPath ( " InputRightCurlyOther . java " ) ; 
 + 
 final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 - verify ( newCheckConfig , filePath , expected , warnList ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 } 
 
 @ Test 
 public void rightCurlyTestSame ( ) throws Exception { 
 - final DefaultConfiguration newCheckConfig = createCheckConfig ( RightCurlyCheck . class ) ; 
 - newCheckConfig . addAttribute ( " option " , RightCurlyOption . SAME . toString ( ) ) ; 
 - 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 
 + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyDefault " ) ; 
 final String filePath = getPath ( " InputRightCurlySame . java " ) ; 
 + 
 final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 - verify ( newCheckConfig , filePath , expected , warnList ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 } 
 
 @ Test 
 - public void testRightCurlySameAndLiteralDo ( ) throws Exception { 
 - final DefaultConfiguration checkConfig = createCheckConfig ( RightCurlyCheck . class ) ; 
 - checkConfig . addAttribute ( " option " , RightCurlyOption . SAME . toString ( ) ) ; 
 - checkConfig . addAttribute ( " tokens " , " LITERAL _ DO " ) ; 
 + public void testRightCurlySameAndLiteralDoDefault ( ) throws Exception { 
 final String [ ] expected = { 
 " 62 : 9 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ SAME , " } " , 9 ) , 
 " 67 : 13 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ SAME , " } " , 13 ) , 
 " 83 : 9 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ SAME , " } " , 9 ) , 
 } ; 
 + 
 + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyDefault " ) ; 
 final String filePath = getPath ( " InputRightCurlyDoWhile . java " ) ; 
 + 
 + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + 
 + @ Test 
 + public void testRightCurlyAloneOther ( ) throws Exception { 
 + final String [ ] expected = { 
 + " 97 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 + " 97 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 + " 108 : 5 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 5 ) , 
 + " 108 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 + " 122 : 6 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ NEW , " } " , 6 ) , 
 + } ; 
 + 
 + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyAlone " ) ; 
 + final String filePath = getPath ( " InputRightCurlyOtherAlone . java " ) ; 
 + 
 + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + 
 + @ Test 
 + public void rightCurlyAloneTestSame ( ) throws Exception { 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyAlone " ) ; 
 + final String filePath = getPath ( " InputRightCurlySame . java " ) ; 
 + 
 + final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 + 
 + @ Test 
 + public void testRightCurlyAloneSameAndLiteralDo ( ) throws Exception { 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyAlone " ) ; 
 + final String filePath = getPath ( " InputRightCurlyDoWhileAlone . java " ) ; 
 + 
 final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 verify ( checkConfig , filePath , expected , warnList ) ; 
 } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyDoWhileAlone . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyDoWhileAlone . java 
 new file mode 100644 
 index 0000000 . . 9eafa2a 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyDoWhileAlone . java 
 @ @ - 0 , 0 + 1 , 93 @ @ 
 + package com . google . checkstyle . test . chapter4formatting . rule412nonemptyblocks ; 
 + 
 + import java . util . Scanner ; 
 + 
 + / * * 
 + * Test input for GitHub issue # 3090 . 
 + * https : / / github . com / checkstyle / checkstyle / issues / 3090 
 + * / 
 + public class InputRightCurlyDoWhileAlone { 
 + 
 + public void foo1 ( ) { 
 + do { 
 + } while ( true ) ; 
 + } 
 + 
 + public void foo2 ( ) { 
 + int i = 1 ; 
 + while ( i < 5 ) { 
 + String . CASE _ INSENSITIVE _ ORDER . equals ( i + " " ) ; 
 + i + + ; 
 + } 
 + } 
 + 
 + public void foo3 ( ) { 
 + int i = 1 ; 
 + do { 
 + i + + ; 
 + String . CASE _ INSENSITIVE _ ORDER . equals ( i + " " ) ; 
 + } while ( i < 5 ) ; 
 + } 
 + 
 + public void foo4 ( ) { 
 + int prog , user ; 
 + prog = ( int ) ( Math . random ( ) * 10 ) + 1 ; 
 + Scanner input = new Scanner ( System . in , " utf - 8 " ) ; 
 + if ( input . hasNextInt ( ) ) { 
 + do { 
 + user = input . nextInt ( ) ; 
 + if ( user = = prog ) { 
 + String . CASE _ INSENSITIVE _ ORDER . equals ( " Good ! " ) ; 
 + } else { 
 + if ( user > 0 & & user < = 10 ) { 
 + String . CASE _ INSENSITIVE _ ORDER . equals ( " Bad ! " ) ; 
 + if ( prog < user ) { 
 + String . CASE _ INSENSITIVE _ ORDER . equals ( " My number is less than yours . " ) ; 
 + } else { 
 + String . CASE _ INSENSITIVE _ ORDER . equals ( " My number is greater than yours . " ) ; 
 + } 
 + } else { 
 + String . CASE _ INSENSITIVE _ ORDER . equals ( " Error ! " ) ; 
 + } 
 + } 
 + } while ( user ! = prog ) ; 
 + } else { 
 + String . CASE _ INSENSITIVE _ ORDER . equals ( " Error ! " ) ; 
 + } 
 + String . CASE _ INSENSITIVE _ ORDER . equals ( " Goodbye ! " ) ; 
 + } 
 + 
 + public void foo5 ( ) { 
 + do { 
 + } / / ok - for alone 
 + while ( true ) ; 
 + } 
 + 
 + public void foo6 ( ) { 
 + do { } / / ok - for alone 
 + while ( true ) ; 
 + } 
 + 
 + public void foo7 ( ) { 
 + do 
 + { 
 + 
 + } while ( true ) ; 
 + } 
 + 
 + public void foo8 ( ) { 
 + do 
 + 
 + { 
 + 
 + } / / ok - for alone 
 + 
 + while 
 + 
 + ( true ) ; 
 + } 
 + 
 + public void foo9 ( ) { 
 + do { } while ( true ) ; 
 + } 
 + } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyOther . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyOther . java 
 index 56a8379 . . 19d20c2 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyOther . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyOther . java 
 @ @ - 17 , 7 + 17 , 7 @ @ class InputRightCurlyOther 
 } else if ( x < 0 ) { / / ok 
 
 ; 
 - } 
 + } / / warn 
 else 
 { 
 break ; 
 @ @ - 29 , 7 + 29 , 7 @ @ class InputRightCurlyOther 
 default : 
 break ; 
 } / / ok 
 - } 
 + } / / warn 
 catch ( Exception e ) 
 { 
 break ; 
 @ @ - 76 , 7 + 76 , 7 @ @ class InputRightCurlyOther 
 boolean flag = true ; 
 if ( flag ) { 
 System . identityHashCode ( " heh " ) ; 
 - flag = ! flag ; } System . 
 + flag = ! flag ; } System . / / warn 
 identityHashCode ( " Xe - xe " ) ; 
 
 
 @ @ - 94 , 7 + 94 , 7 @ @ class FooCtor 
 public FooCtor ( ) 
 { 
 i = 1 ; 
 - } } / / warn 
 + } } / / ok 
 
 / * * 
 * Test input for closing brace if that brace terminates 
 @ @ - 105 , 7 + 105 , 7 @ @ class FooMethod 
 public void fooMethod ( ) 
 { 
 int i = 1 ; 
 - } } / / warn 
 + } } / / ok 
 
 / * * 
 * Test input for closing brace if that brace terminates 
 @ @ - 119 , 7 + 119 , 7 @ @ class FooInner 
 { 
 
 } 
 - } } / / warn 
 + } } / / ok 
 
 class EnumContainer { 
 private enum Suit { CLUBS , HEARTS , SPADES , DIAMONDS } / / ok 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyOtherAlone . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyOtherAlone . java 
 new file mode 100644 
 index 0000000 . . e04bd15 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyOtherAlone . java 
 @ @ - 0 , 0 + 1 , 145 @ @ 
 + package com . google . checkstyle . test . chapter4formatting . rule412nonemptyblocks ; 
 + 
 + class InputRightCurlyOtherAlone 
 + { 
 + / * * @ see test method * * / 
 + int foo ( ) throws InterruptedException 
 + { 
 + int x = 1 ; 
 + int a = 2 ; 
 + while ( true ) 
 + { 
 + try 
 + { 
 + if ( x > 0 ) 
 + { 
 + break ; 
 + } else if ( x < 0 ) { / / ok 
 + 
 + ; 
 + } / / ok - for alone config 
 + else 
 + { 
 + break ; 
 + } / / ok 
 + switch ( a ) 
 + { 
 + case 0 : 
 + break ; 
 + default : 
 + break ; 
 + } / / ok 
 + } / / ok - for alone config 
 + catch ( Exception e ) 
 + { 
 + break ; 
 + } / / ok 
 + } / / ok 
 + 
 + synchronized ( this ) 
 + { 
 + do 
 + { 
 + x = 2 ; 
 + } while ( x = = 2 ) ; / / ok 
 + } / / ok 
 + 
 + this . wait ( 666 
 + ) ; / / Bizarre , but legal 
 + 
 + for ( int k = 0 ; k < 1 ; k + + ) 
 + { 
 + String innerBlockVariable = " " ; 
 + } / / ok 
 + 
 + 
 + if ( System . currentTimeMillis ( ) > 1000 ) 
 + return 1 ; 
 + else 
 + return 2 ; 
 + } / / ok 
 + 
 + 
 + static 
 + { 
 + int x = 1 ; 
 + } / / ok 
 + 
 + public enum GreetingsEnum 
 + { 
 + HELLO , 
 + GOODBYE 
 + } ; / / ok 
 + 
 + void method2 ( ) 
 + { 
 + boolean flag = true ; 
 + if ( flag ) { 
 + System . identityHashCode ( " heh " ) ; 
 + flag = ! flag ; } System . / / ok for alone config 
 + identityHashCode ( " Xe - xe " ) ; 
 + 
 + 
 + if ( flag ) { System . identityHashCode ( " some foo " ) ; } 
 + } / / ok 
 + } / / ok 
 + 
 + / * * 
 + * Test input for closing brace if that brace terminates 
 + * a statement or the body of a constructor . 
 + * / 
 + class FooCtorAlone 
 + { 
 + int i ; 
 + public FooCtorAlone ( ) 
 + { 
 + i = 1 ; 
 + } } / / warn 
 + 
 + / * * 
 + * Test input for closing brace if that brace terminates 
 + * a statement or the body of a method . 
 + * / 
 + class FooMethodAlone 
 + { 
 + public void fooMethod ( ) 
 + { 
 + int i = 1 ; 
 + } } / / warn 
 + 
 + / * * 
 + * Test input for closing brace if that brace terminates 
 + * a statement or the body of a named class . 
 + * / 
 + class FooInnerAlone 
 + { 
 + class InnerFoo 
 + { 
 + public void fooInnerMethod ( ) 
 + { 
 + 
 + } 
 + } } / / warn 
 + 
 + class EnumContainerAlone { 
 + private enum Suit { CLUBS , HEARTS , SPADES , DIAMONDS } / / ok 
 + } 
 + 
 + class WithArraysAlone { 
 + String [ ] s = { " " } ; / / ok 
 + String [ ] empty = { } ; / / ok 
 + String [ ] s1 = { 
 + " foo " , " foo " , 
 + } ; / / ok 
 + String [ ] s2 = 
 + { 
 + " foo " , " foo " , 
 + } ; / / ok 
 + String [ ] s3 = 
 + { 
 + " foo " , 
 + " foo " , 
 + } ; / / ok 
 + String [ ] s4 = 
 + { " foo " , " foo " } ; / / ok 
 + } 
 diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml 
 index 578da16 . . 9e0a0d9 100644 
 - - - a / src / main / resources / google _ checks . xml 
 + + + b / src / main / resources / google _ checks . xml 
 @ @ - 55 , 12 + 55 , 13 @ @ 
 < property name = " maxLineLength " value = " 100 " / > 
 < / module > 
 < module name = " RightCurly " > 
 - < property name = " id " value = " RightCurlyDefault " / > 
 + < property name = " id " value = " RightCurlySame " / > 
 + < property name = " tokens " value = " LITERAL _ TRY , LITERAL _ CATCH , LITERAL _ FINALLY , LITERAL _ IF , LITERAL _ ELSE , LITERAL _ DO " / > 
 < / module > 
 < module name = " RightCurly " > 
 < property name = " id " value = " RightCurlyAlone " / > 
 < property name = " option " value = " alone " / > 
 - < property name = " tokens " value = " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF , LITERAL _ FOR , LITERAL _ WHILE , LITERAL _ DO , STATIC _ INIT , INSTANCE _ INIT " / > 
 + < property name = " tokens " value = " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF , LITERAL _ FOR , LITERAL _ WHILE , STATIC _ INIT , INSTANCE _ INIT " / > 
 < / module > 
 < module name = " WhitespaceAround " > 
 < property name = " allowEmptyConstructors " value = " true " / >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 14d33e5 . . d037fc9 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 257 , 7 + 257 , 7 @ @ 
 < dependency > 
 < groupId > com . github . stefanbirkner < / groupId > 
 < artifactId > system - rules < / artifactId > 
 - < version > 1 . 12 . 1 < / version > 
 + < version > 1 . 13 . 0 < / version > 
 < scope > test < / scope > 
 < / dependency > 
 < dependency >
