BLEU SCORE: 0.2953872020786077

TEST MSG: Issue # 5785 : enable site . xml validation
GENERATED MSG: minor : disable maven site . xml validation till # 5785

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index a873426 . . 9c522e8 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1299 , 7 + 1299 , 6 @ @ <nl> < validating > true < / validating > <nl> < dir > src / site / resources / files < / dir > <nl> < / validationSet > <nl> - < ! - - disabled till https : / / github . com / checkstyle / checkstyle / issues / 5785 <nl> < validationSet > <nl> < validating > true < / validating > <nl> < dir > src / site < / dir > <nl> @ @ - 1307 , 7 + 1306 , 7 @ @ <nl> < include > site . xml < / include > <nl> < / includes > <nl> < systemId > http : / / maven . apache . org / xsd / decoration - 1 . 0 . 0 . xsd < / systemId > <nl> - < / validationSet > - - > <nl> + < / validationSet > <nl> < validationSet > <nl> < validating > true < / validating > <nl> < dir > src / test / resources < / dir >
NEAREST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index ddfb2da . . 57b83d7 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 119 , 8 + 119 , 6 @ @ <nl> < / properties > <nl> < / rule > <nl> <nl> - < rule ref = " rulesets / java / basic . xml " / > <nl> - <nl> < rule ref = " category / java / design . xml " > <nl> < ! - - Too much false - positives on the check classes . <nl> We do not follow the philosophy of complete encapsulation , we like data classes <nl> @ @ - 258 , 6 + 256 , 11 @ @ <nl> < / properties > <nl> < / rule > <nl> <nl> + < rule ref = " category / java / multithreading . xml " > <nl> + < ! - - Checkstyle is not thread safe till https : / / github . com / checkstyle / checkstyle / projects / 5 . - - > <nl> + < exclude name = " UseConcurrentHashMap " / > <nl> + < / rule > <nl> + <nl> < rule ref = " category / java / performance . xml " > <nl> < ! - - Produces more false positives than real problems . - - > <nl> < exclude name = " AvoidInstantiatingObjectsInLoops " / > <nl> @ @ - 278 , 6 + 281 , 12 @ @ <nl> < ! - - Not configurable , decreases readability . - - > <nl> < exclude name = " UseStringBufferForStringAppends " / > <nl> < / rule > <nl> + < rule ref = " category / java / performance . xml / AvoidUsingShortType " > <nl> + < properties > <nl> + < ! - - This class uses the class java . lang . Short for properties only . - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AutomaticBean ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> <nl> < rule ref = " rulesets / java / comments . xml " > <nl> < ! - - < exclude name = " CommentRequired " / > - - > <nl> @ @ - 301 , 33 + 310 , 6 @ @ <nl> < / properties > <nl> < / rule > <nl> <nl> - < rule ref = " rulesets / java / controversial . xml " > <nl> - < ! - - calling super ( ) is completely pointless , no matter if class inherits anything or not ; it is meaningful only if you do not call implicit constructor of base class - - > <nl> - < exclude name = " CallSuperInConstructor " / > <nl> - < ! - - We reuse Check instances between java files , we need to clear state of class in beginTree ( ) methods - - > <nl> - < exclude name = " NullAssignment " / > <nl> - < ! - - it is possible only in functional languages and fanatically - pristine code , without additional option that are done at ReturnCountExtendedCheck it is not good rule - - > <nl> - < exclude name = " OnlyOneReturn " / > <nl> - < ! - - opposite to UnnecessaryConstructor - - > <nl> - < exclude name = " AtLeastOneConstructor " / > <nl> - < ! - - that rule is too buggy , too much false positives - - > <nl> - < exclude name = " DataflowAnomalyAnalysis " / > <nl> - < ! - - turning local variables to fields create design problems and extend scope of variable - - > <nl> - < exclude name = " AvoidFinalLocalVariable " / > <nl> - < ! - - conflicts with names that does not mean in / out - - > <nl> - < exclude name = " AvoidPrefixingMethodParameters " / > <nl> - < ! - - that is not practical , no options to allow some magic numbers , we will use our implementation - - > <nl> - < exclude name = " AvoidLiteralsInIfCondition " / > <nl> - < ! - - Checkstyle is not thread safe - - > <nl> - < exclude name = " UseConcurrentHashMap " / > <nl> - < / rule > <nl> - < rule ref = " rulesets / java / controversial . xml / AvoidUsingShortType " > <nl> - < properties > <nl> - < ! - - that class integrates checkstyle and antlr that is why it has a lot of imports - - > <nl> - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AutomaticBean ' ] " / > <nl> - < / properties > <nl> - < / rule > <nl> - <nl> < rule ref = " rulesets / java / design . xml " > <nl> < ! - - extra final modifier does not make code more secure in that cases - - > <nl> < exclude name = " ImmutableField " / >

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index a873426 . . 9c522e8 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1299 , 7 + 1299 , 6 @ @ 
 < validating > true < / validating > 
 < dir > src / site / resources / files < / dir > 
 < / validationSet > 
 - < ! - - disabled till https : / / github . com / checkstyle / checkstyle / issues / 5785 
 < validationSet > 
 < validating > true < / validating > 
 < dir > src / site < / dir > 
 @ @ - 1307 , 7 + 1306 , 7 @ @ 
 < include > site . xml < / include > 
 < / includes > 
 < systemId > http : / / maven . apache . org / xsd / decoration - 1 . 0 . 0 . xsd < / systemId > 
 - < / validationSet > - - > 
 + < / validationSet > 
 < validationSet > 
 < validating > true < / validating > 
 < dir > src / test / resources < / dir >

NEAREST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index ddfb2da . . 57b83d7 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 119 , 8 + 119 , 6 @ @ 
 < / properties > 
 < / rule > 
 
 - < rule ref = " rulesets / java / basic . xml " / > 
 - 
 < rule ref = " category / java / design . xml " > 
 < ! - - Too much false - positives on the check classes . 
 We do not follow the philosophy of complete encapsulation , we like data classes 
 @ @ - 258 , 6 + 256 , 11 @ @ 
 < / properties > 
 < / rule > 
 
 + < rule ref = " category / java / multithreading . xml " > 
 + < ! - - Checkstyle is not thread safe till https : / / github . com / checkstyle / checkstyle / projects / 5 . - - > 
 + < exclude name = " UseConcurrentHashMap " / > 
 + < / rule > 
 + 
 < rule ref = " category / java / performance . xml " > 
 < ! - - Produces more false positives than real problems . - - > 
 < exclude name = " AvoidInstantiatingObjectsInLoops " / > 
 @ @ - 278 , 6 + 281 , 12 @ @ 
 < ! - - Not configurable , decreases readability . - - > 
 < exclude name = " UseStringBufferForStringAppends " / > 
 < / rule > 
 + < rule ref = " category / java / performance . xml / AvoidUsingShortType " > 
 + < properties > 
 + < ! - - This class uses the class java . lang . Short for properties only . - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AutomaticBean ' ] " / > 
 + < / properties > 
 + < / rule > 
 
 < rule ref = " rulesets / java / comments . xml " > 
 < ! - - < exclude name = " CommentRequired " / > - - > 
 @ @ - 301 , 33 + 310 , 6 @ @ 
 < / properties > 
 < / rule > 
 
 - < rule ref = " rulesets / java / controversial . xml " > 
 - < ! - - calling super ( ) is completely pointless , no matter if class inherits anything or not ; it is meaningful only if you do not call implicit constructor of base class - - > 
 - < exclude name = " CallSuperInConstructor " / > 
 - < ! - - We reuse Check instances between java files , we need to clear state of class in beginTree ( ) methods - - > 
 - < exclude name = " NullAssignment " / > 
 - < ! - - it is possible only in functional languages and fanatically - pristine code , without additional option that are done at ReturnCountExtendedCheck it is not good rule - - > 
 - < exclude name = " OnlyOneReturn " / > 
 - < ! - - opposite to UnnecessaryConstructor - - > 
 - < exclude name = " AtLeastOneConstructor " / > 
 - < ! - - that rule is too buggy , too much false positives - - > 
 - < exclude name = " DataflowAnomalyAnalysis " / > 
 - < ! - - turning local variables to fields create design problems and extend scope of variable - - > 
 - < exclude name = " AvoidFinalLocalVariable " / > 
 - < ! - - conflicts with names that does not mean in / out - - > 
 - < exclude name = " AvoidPrefixingMethodParameters " / > 
 - < ! - - that is not practical , no options to allow some magic numbers , we will use our implementation - - > 
 - < exclude name = " AvoidLiteralsInIfCondition " / > 
 - < ! - - Checkstyle is not thread safe - - > 
 - < exclude name = " UseConcurrentHashMap " / > 
 - < / rule > 
 - < rule ref = " rulesets / java / controversial . xml / AvoidUsingShortType " > 
 - < properties > 
 - < ! - - that class integrates checkstyle and antlr that is why it has a lot of imports - - > 
 - < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AutomaticBean ' ] " / > 
 - < / properties > 
 - < / rule > 
 - 
 < rule ref = " rulesets / java / design . xml " > 
 < ! - - extra final modifier does not make code more secure in that cases - - > 
 < exclude name = " ImmutableField " / >
