BLEU SCORE: 0.02383853510228548

TEST MSG: Issue # 2971 : Add allowPublicFinalFields option for VisibilityModifier
GENERATED MSG: Visibility Modifier Check , ignore annotated fields

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> index 9f878e6 . . bc74a4a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> @ @ - 72 , 8 + 72 , 11 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> * < / pre > <nl> * <nl> * < p > <nl> - * < b > allowPublicImmutableFields < / b > - which allows immutable fields be <nl> - * declared as public if defined in final class . Default value is < b > true < / b > <nl> + * < b > allowPublicFinalFields < / b > - which allows public final fields . Default value is < b > false < / b > . <nl> + * < / p > <nl> + * < p > <nl> + * < b > allowPublicImmutableFields < / b > - which allows immutable fields to be <nl> + * declared as public if defined in final class . Default value is < b > false < / b > <nl> * < / p > <nl> * < p > <nl> * Field is known to be immutable if : <nl> @ @ - 131 , 21 + 134 , 21 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> * < / p > <nl> * Examples : <nl> * < p > <nl> - * Default Check ' s configuration will pass the code below : <nl> + * The check will rise 3 violations if it is run with default configuration against the following <nl> + * code example : <nl> * < / p > <nl> * <nl> * < pre > <nl> * { @ code <nl> - * public final class ImmutableClass <nl> + * public class ImmutableClass <nl> * { <nl> - * public final int intValue ; / / No warning <nl> - * public final java . lang . String notes ; / / No warning <nl> - * public final BigDecimal value ; / / No warning <nl> + * public int intValue ; / / violation <nl> + * public java . lang . String notes ; / / violation <nl> + * public BigDecimal value ; / / violation <nl> * <nl> * public ImmutableClass ( int intValue , BigDecimal value , String notes ) <nl> * { <nl> - * this . includes = ImmutableSet . copyOf ( includes ) ; <nl> - * this . excludes = ImmutableSet . copyOf ( excludes ) ; <nl> + * this . intValue = intValue ; <nl> * this . value = value ; <nl> * this . notes = notes ; <nl> * } <nl> @ @ - 159 , 6 + 162 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> * < / p > <nl> * < p > <nl> * & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; <nl> + * & lt ; property name = & quot ; allowPublicImmutableFields & quot ; value = & quot ; true & quot ; / & gt ; <nl> * & lt ; property name = & quot ; immutableClassCanonicalNames & quot ; value = & quot ; java . util . List , <nl> * com . google . common . collect . ImmutableSet & quot ; / & gt ; <nl> * & lt ; / module & gt ; <nl> @ @ - 328 , 8 + 332 , 11 @ @ public class VisibilityModifierCheck <nl> / * * Whether package visible members are allowed . * / <nl> private boolean packageAllowed ; <nl> <nl> - / * * Allows immutable fields to be declared as public . * / <nl> - private boolean allowPublicImmutableFields = true ; <nl> + / * * Allows immutable fields of final classes to be declared as public . * / <nl> + private boolean allowPublicImmutableFields ; <nl> + <nl> + / * * Allows final fields to be declared as public . * / <nl> + private boolean allowPublicFinalFields ; <nl> <nl> / * * List of immutable classes canonical names . * / <nl> private List < String > immutableClassCanonicalNames = new ArrayList < > ( DEFAULT _ IMMUTABLE _ TYPES ) ; <nl> @ @ - 371 , 7 + 378 , 7 @ @ public class VisibilityModifierCheck <nl> } <nl> <nl> / * * <nl> - * Sets whether public immutable are allowed . <nl> + * Sets whether public immutable fields are allowed . <nl> * @ param allow user ' s value . <nl> * / <nl> public void setAllowPublicImmutableFields ( boolean allow ) { <nl> @ @ - 379 , 6 + 386 , 14 @ @ public class VisibilityModifierCheck <nl> } <nl> <nl> / * * <nl> + * Sets whether public final fields are allowed . <nl> + * @ param allow user ' s value . <nl> + * / <nl> + public void setAllowPublicFinalFields ( boolean allow ) { <nl> + allowPublicFinalFields = allow ; <nl> + } <nl> + <nl> + / * * <nl> * Set the list of immutable classes types names . <nl> * @ param classNames array of immutable types canonical names . <nl> * / <nl> @ @ - 540 , 8 + 555 , 7 @ @ public class VisibilityModifierCheck <nl> | | packageAllowed & & PACKAGE _ ACCESS _ MODIFIER . equals ( variableScope ) <nl> | | protectedAllowed & & PROTECTED _ ACCESS _ MODIFIER . equals ( variableScope ) <nl> | | isIgnoredPublicMember ( variableName , variableScope ) <nl> - | | allowPublicImmutableFields <nl> - & & isImmutableFieldDefinedInFinalClass ( variableDef ) ; <nl> + | | isAllowedPublicField ( variableDef ) ; <nl> } <nl> <nl> return result ; <nl> @ @ - 570 , 6 + 584 , 16 @ @ public class VisibilityModifierCheck <nl> } <nl> <nl> / * * <nl> + * Checks whether the variable satisfies the public field check . <nl> + * @ param variableDef Variable definition node . <nl> + * @ return true if allowed . <nl> + * / <nl> + private boolean isAllowedPublicField ( DetailAST variableDef ) { <nl> + return allowPublicFinalFields & & isFinalField ( variableDef ) <nl> + | | allowPublicImmutableFields & & isImmutableFieldDefinedInFinalClass ( variableDef ) ; <nl> + } <nl> + <nl> + / * * <nl> * Checks whether immutable field is defined in final class . <nl> * @ param variableDef Variable definition node . <nl> * @ return true if immutable field is defined in final class . <nl> @ @ - 597 , 7 + 621 , 6 @ @ public class VisibilityModifierCheck <nl> } <nl> } <nl> return modifiersSet ; <nl> - <nl> } <nl> <nl> / * * <nl> @ @ - 628 , 10 + 651 , 7 @ @ public class VisibilityModifierCheck <nl> * / <nl> private boolean isImmutableField ( DetailAST variableDef ) { <nl> boolean result = false ; <nl> - <nl> - final DetailAST modifiers = variableDef . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> - final boolean isFinal = modifiers . branchContains ( TokenTypes . FINAL ) ; <nl> - if ( isFinal ) { <nl> + if ( isFinalField ( variableDef ) ) { <nl> final DetailAST type = variableDef . findFirstToken ( TokenTypes . TYPE ) ; <nl> final boolean isCanonicalName = type . getFirstChild ( ) . getType ( ) = = TokenTypes . DOT ; <nl> final String typeName = getTypeName ( type , isCanonicalName ) ; <nl> @ @ - 644 , 6 + 664 , 16 @ @ public class VisibilityModifierCheck <nl> } <nl> <nl> / * * <nl> + * Checks whether current field is final . <nl> + * @ param variableDef field in consideration . <nl> + * @ return true if current field is final . <nl> + * / <nl> + private boolean isFinalField ( DetailAST variableDef ) { <nl> + final DetailAST modifiers = variableDef . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> + return modifiers . branchContains ( TokenTypes . FINAL ) ; <nl> + } <nl> + <nl> + / * * <nl> * Gets the name of type from given ast { @ link TokenTypes # TYPE TYPE } node . <nl> * If type is specified via its canonical name - canonical name will be returned , <nl> * else - short type ' s name . <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> index fb7ea81 . . 9b53e7d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java <nl> @ @ - 117 , 6 + 117 , 7 @ @ public class VisibilityModifierCheckTest <nl> public void testAllowPublicFinalFieldsInImmutableClass ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; <nl> final String [ ] expected = { <nl> " 12 : 39 : " + getCheckMessage ( MSG _ KEY , " includes " ) , <nl> " 13 : 39 : " + getCheckMessage ( MSG _ KEY , " excludes " ) , <nl> @ @ - 129 , 14 + 130 , 51 @ @ public class VisibilityModifierCheckTest <nl> } <nl> <nl> @ Test <nl> + public void testDisAllowPublicFinalAndImmutableFieldsInImmutableClass ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 11 : 22 : " + getCheckMessage ( MSG _ KEY , " someIntValue " ) , <nl> + " 12 : 39 : " + getCheckMessage ( MSG _ KEY , " includes " ) , <nl> + " 13 : 39 : " + getCheckMessage ( MSG _ KEY , " excludes " ) , <nl> + " 14 : 35 : " + getCheckMessage ( MSG _ KEY , " notes " ) , <nl> + " 15 : 29 : " + getCheckMessage ( MSG _ KEY , " money " ) , <nl> + " 16 : 23 : " + getCheckMessage ( MSG _ KEY , " list " ) , <nl> + " 30 : 28 : " + getCheckMessage ( MSG _ KEY , " f " ) , <nl> + " 31 : 30 : " + getCheckMessage ( MSG _ KEY , " bool " ) , <nl> + " 32 : 35 : " + getCheckMessage ( MSG _ KEY , " uri " ) , <nl> + " 33 : 35 : " + getCheckMessage ( MSG _ KEY , " file " ) , <nl> + " 34 : 20 : " + getCheckMessage ( MSG _ KEY , " value " ) , <nl> + " 35 : 35 : " + getCheckMessage ( MSG _ KEY , " url " ) , <nl> + " 36 : 24 : " + getCheckMessage ( MSG _ KEY , " bValue " ) , <nl> + " 37 : 31 : " + getCheckMessage ( MSG _ KEY , " longValue " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputImmutable . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAllowPublicFinalFieldsInNonFinalClass ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowPublicFinalFields " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 34 : 20 : " + getCheckMessage ( MSG _ KEY , " value " ) , <nl> + " 36 : 24 : " + getCheckMessage ( MSG _ KEY , " bValue " ) , <nl> + " 37 : 31 : " + getCheckMessage ( MSG _ KEY , " longValue " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputImmutable . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testUserSpecifiedImmutableClassesList ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; <nl> checkConfig . addAttribute ( " immutableClassCanonicalNames " , " java . util . List , " <nl> + " com . google . common . collect . ImmutableSet " ) ; <nl> final String [ ] expected = { <nl> " 14 : 35 : " + getCheckMessage ( MSG _ KEY , " notes " ) , <nl> - " 15 : 29 : " + getCheckMessage ( MSG _ KEY , " value " ) , <nl> + " 15 : 29 : " + getCheckMessage ( MSG _ KEY , " money " ) , <nl> " 32 : 35 : " + getCheckMessage ( MSG _ KEY , " uri " ) , <nl> " 33 : 35 : " + getCheckMessage ( MSG _ KEY , " file " ) , <nl> " 34 : 20 : " + getCheckMessage ( MSG _ KEY , " value " ) , <nl> @ @ - 151 , 6 + 189 , 7 @ @ public class VisibilityModifierCheckTest <nl> public void testImmutableSpecifiedSameTypeName ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; <nl> checkConfig . addAttribute ( " immutableClassCanonicalNames " , <nl> " com . puppycrawl . tools . checkstyle . checks . coding . InputGregorianCalendar , " <nl> + " com . puppycrawl . tools . checkstyle . checks . design . InetSocketAddress " ) ; <nl> @ @ - 162 , 9 + 201 , 10 @ @ public class VisibilityModifierCheckTest <nl> } <nl> <nl> @ Test <nl> - public void testImmutableDefaultValueSameTypeName ( ) throws Exception { <nl> + public void testImmutableValueSameTypeName ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; <nl> final String [ ] expected = { <nl> " 7 : 46 : " + getCheckMessage ( MSG _ KEY , " calendar " ) , <nl> " 8 : 41 : " + getCheckMessage ( MSG _ KEY , " calendar2 " ) , <nl> @ @ - 178 , 6 + 218 , 7 @ @ public class VisibilityModifierCheckTest <nl> public void testImmutableStarImportFalseNegative ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; <nl> checkConfig . addAttribute ( " immutableClassCanonicalNames " , " java . util . Arrays " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , getPath ( " InputImmutableStarImport . java " ) , expected ) ; <nl> @ @ - 187 , 6 + 228 , 7 @ @ public class VisibilityModifierCheckTest <nl> public void testImmutableStarImportNoWarn ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; <nl> checkConfig . addAttribute ( " immutableClassCanonicalNames " , <nl> " com . google . common . collect . ImmutableSet " ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> @ @ - 284 , 7 + 326 , 6 @ @ public class VisibilityModifierCheckTest <nl> public void testPublicImmutableFieldsNotAllowed ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> - checkConfig . addAttribute ( " allowPublicImmutableFields " , " false " ) ; <nl> final String [ ] expected = { <nl> " 10 : 22 : " + getCheckMessage ( MSG _ KEY , " someIntValue " ) , <nl> " 11 : 39 : " + getCheckMessage ( MSG _ KEY , " includes " ) , <nl> @ @ - 295 , 6 + 336 , 42 @ @ public class VisibilityModifierCheckTest <nl> verify ( checkConfig , getPath ( " InputPublicImmutable . java " ) , expected ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testPublicFinalFieldsNotAllowed ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + final String [ ] expected = { <nl> + " 10 : 22 : " + getCheckMessage ( MSG _ KEY , " someIntValue " ) , <nl> + " 11 : 39 : " + getCheckMessage ( MSG _ KEY , " includes " ) , <nl> + " 12 : 35 : " + getCheckMessage ( MSG _ KEY , " notes " ) , <nl> + " 13 : 29 : " + getCheckMessage ( MSG _ KEY , " value " ) , <nl> + " 14 : 23 : " + getCheckMessage ( MSG _ KEY , " list " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputPublicImmutable . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testPublicFinalFieldsAllowed ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowPublicFinalFields " , " true " ) ; <nl> + checkConfig . addAttribute ( " immutableClassCanonicalNames " , <nl> + " com . google . common . collect . ImmutableSet " ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputPublicImmutable . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testPublicFinalFieldInEnum ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; <nl> + final String [ ] expected = { <nl> + " 15 : 23 : " + getCheckMessage ( MSG _ KEY , " hole " ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputEnumIsSealed . java " ) , expected ) ; <nl> + } <nl> + <nl> @ Test ( expected = IllegalArgumentException . class ) <nl> public void testWrongTokenType ( ) { <nl> final VisibilityModifierCheck obj = new VisibilityModifierCheck ( ) ; <nl> @ @ - 307 , 6 + 384 , 7 @ @ public class VisibilityModifierCheckTest <nl> public void testNullModifiers ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( VisibilityModifierCheck . class ) ; <nl> + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; <nl> final String [ ] expected = { <nl> " 11 : 50 : " + getCheckMessage ( MSG _ KEY , " i " ) , <nl> } ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputEnumIsSealed . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputEnumIsSealed . java <nl> new file mode 100644 <nl> index 0000000 . . 444dd2b <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputEnumIsSealed . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + <nl> + package com . puppycrawl . tools . checkstyle . checks . design ; <nl> + <nl> + / * * Shows that sealed enum is good as final . * / <nl> + public enum InputEnumIsSealed { <nl> + SOME _ VALUE ; <nl> + <nl> + static class Hole { <nl> + } <nl> + <nl> + / * * Normally disallowed if final enclosing class is required . * / <nl> + public final int someField = Integer . MAX _ VALUE ; <nl> + <nl> + / * * Disallowed because mutable . * / <nl> + public final Hole hole = null ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutable . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutable . java <nl> index 190ddf8 . . 6f09894 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutable . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutable . java <nl> @ @ - 12 , 14 + 12 , 14 @ @ public final class InputImmutable <nl> public final ImmutableSet < String > includes ; <nl> public final ImmutableSet < String > excludes ; <nl> public final java . lang . String notes ; <nl> - public final BigDecimal value ; <nl> + public final BigDecimal money ; <nl> public final List list ; <nl> <nl> public InputImmutable ( Collection < String > includes , Collection < String > excludes , <nl> BigDecimal value , String notes , int someValue , List l ) { <nl> this . includes = ImmutableSet . copyOf ( includes ) ; <nl> this . excludes = ImmutableSet . copyOf ( excludes ) ; <nl> - this . value = value ; <nl> + this . money = value ; <nl> this . notes = notes ; <nl> this . someIntValue = someValue ; <nl> this . list = l ; <nl> diff - - git a / src / xdocs / config _ design . xml b / src / xdocs / config _ design . xml <nl> index 19d7579 . . 29435ee 100644 <nl> - - - a / src / xdocs / config _ design . xml <nl> + + + b / src / xdocs / config _ design . xml <nl> @ @ - 793 , 8 + 793 , 12 @ @ public class Foo { <nl> named the same type without consideration of package <nl> < / p > <nl> < p > <nl> - < b > allowPublicImmutableFields < / b > - which allows immutable fields be declared as <nl> - public if defined in final class . Default value is < b > true < / b > <nl> + < b > allowPublicFinalFields < / b > - which allows public final fields . <nl> + Default value is < b > false < / b > <nl> + < / p > <nl> + < p > <nl> + < b > allowPublicImmutableFields < / b > - which allows immutable fields to be declared as <nl> + public if defined in final class . Default value is < b > false < / b > <nl> < / p > <nl> < p > <nl> Field is known to be immutable if : <nl> @ @ - 814 , 7 + 818 , 10 @ @ public class Foo { <nl> < p > <nl> < b > Restriction < / b > : Check doesn ' t check if class is immutable , there ' s no <nl> checking if accessory methods are missing and all fields are immutable , we only check <nl> - < b > if current field is immutable and defined in final class < / b > <nl> + < b > if current field is immutable or final < / b > . Under the flag <nl> + < b > allowPublicImmutableFields < / b > , the enclosing class must also be final , to encourage <nl> + immutability . Under the flag < b > allowPublicFinalFields < / b > , the final modifier on <nl> + the enclosing class is optional . <nl> < / p > <nl> < p > <nl> Star imports are out of scope of this Check . So if one of type imported via <nl> @ @ - 850 , 10 + 857 , 16 @ @ public class Foo { <nl> < td > < code > ^ serialVersionUID $ < / code > < / td > <nl> < / tr > <nl> < tr > <nl> + < td > allowPublicFinalFields < / td > <nl> + < td > allows public final fields < / td > <nl> + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> + < td > < code > false < / code > < / td > <nl> + < / tr > <nl> + < tr > <nl> < td > allowPublicImmutableFields < / td > <nl> - < td > allows immutable fields be declared as public if defined in final class < / td > <nl> + < td > allows immutable fields to be declared as public if defined in final class < / td > <nl> < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > <nl> - < td > < code > true < / code > < / td > <nl> + < td > < code > false < / code > < / td > <nl> < / tr > <nl> < tr > <nl> < td > immutableClassCanonicalNames < / td > <nl> @ @ - 904 , 7 + 917 , 9 @ @ public class Foo { <nl> ( mostly for immutable classes ) : <nl> < / p > <nl> < source > <nl> - & lt ; module name = & quot ; VisibilityModifier & quot ; / & gt ; <nl> + & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; <nl> + & lt ; property name = & quot ; allowPublicImmutableFields & quot ; value = & quot ; true & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> < / source > <nl> < p > <nl> Example of allowed public immutable fields : <nl> @ @ - 928 , 10 + 943 , 11 @ @ public class ImmutableClass <nl> } <nl> < / source > <nl> < p > <nl> - To configure the Check which allows user specified immutable class names : <nl> + To configure the Check in order to allow user specified immutable class names : <nl> < / p > <nl> < source > <nl> & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; <nl> + & lt ; property name = & quot ; allowPublicImmutableFields & quot ; value = & quot ; true & quot ; / & gt ; <nl> & lt ; property name = & quot ; immutableClassCanonicalNames & quot ; value = & quot ; <nl> com . google . common . collect . ImmutableSet & quot ; / & gt ; <nl> & lt ; / module & gt ; <nl> @ @ - 1028 , 6 + 1044 , 69 @ @ class SomeClass <nl> / / so no violation <nl> } <nl> < / source > <nl> + <nl> + < p > <nl> + To understand the difference between allowPublicImmutableFields and <nl> + allowPublicFinalFields options , please , study the following examples . <nl> + < / p > <nl> + < p > <nl> + 1 ) To configure the check to use only ' allowPublicImmutableFields ' option : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; <nl> + & lt ; property name = & quot ; allowPublicImmutableFields & quot ; value = & quot ; true & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + < p > <nl> + Code example : <nl> + < / p > <nl> + < source > <nl> + public class InputPublicImmutable { <nl> + public final int someIntValue ; / / violation <nl> + public final ImmutableSet & lt ; String & gt ; includes ; / / violation <nl> + public final java . lang . String notes ; / / violation <nl> + public final BigDecimal value ; / / violation <nl> + public final List list ; / / violation <nl> + <nl> + public InputPublicImmutable ( Collection & lt ; String & gt ; includes , <nl> + BigDecimal value , String notes , int someValue , List l ) { <nl> + this . includes = ImmutableSet . copyOf ( includes ) ; <nl> + this . value = value ; <nl> + this . notes = notes ; <nl> + this . someIntValue = someValue ; <nl> + this . list = l ; <nl> + } <nl> + } <nl> + < / source > <nl> + < p > <nl> + 2 ) To configure the check to use only ' allowPublicFinalFields ' option : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; <nl> + & lt ; property name = & quot ; allowPublicFinalFields & quot ; value = & quot ; true & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + < p > <nl> + Code example : <nl> + < / p > <nl> + < source > <nl> + public class InputPublicImmutable { <nl> + public final int someIntValue ; <nl> + public final ImmutableSet & lt ; String & gt ; includes ; <nl> + public final java . lang . String notes ; <nl> + public final BigDecimal value ; <nl> + public final List list ; <nl> + <nl> + public InputPublicImmutable ( Collection & lt ; String & gt ; includes , <nl> + BigDecimal value , String notes , int someValue , List l ) { <nl> + this . includes = ImmutableSet . copyOf ( includes ) ; <nl> + this . value = value ; <nl> + this . notes = notes ; <nl> + this . someIntValue = someValue ; <nl> + this . list = l ; <nl> + } <nl> + } <nl> + < / source > <nl> < / subsection > <nl> <nl> < subsection name = " Example of Usage " >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java <nl> index 16b4165 . . d978914 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java <nl> @ @ - 27 , 6 + 27 , 9 @ @ import com . puppycrawl . tools . checkstyle . checks . CheckUtils ; <nl> / * * <nl> * Restricts nested boolean operators ( & amp ; & amp ; , | | , & amp ; , | and ^ ) to <nl> * a specified depth ( default = 3 ) . <nl> + * Note : & amp ; , | and ^ are not checked if they are part of constructor or <nl> + * method call because they can be applied to non boolean variables and <nl> + * Checkstyle does not know types of methods from different classes . <nl> * <nl> * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > <nl> * @ author o _ sukhodolsky <nl> @ @ - 126 , 14 + 129 , 18 @ @ public final class BooleanExpressionComplexityCheck extends Check <nl> visitExpr ( ) ; <nl> break ; <nl> case TokenTypes . BOR : <nl> - if ( ! isPipeOperator ( ast ) ) { <nl> + if ( ! isPipeOperator ( ast ) & & ! isPassedInParameter ( ast ) ) { <nl> context . visitBooleanOperator ( ) ; <nl> } <nl> break ; <nl> - case TokenTypes . LAND : <nl> case TokenTypes . BAND : <nl> - case TokenTypes . LOR : <nl> case TokenTypes . BXOR : <nl> + if ( ! isPassedInParameter ( ast ) ) { <nl> + context . visitBooleanOperator ( ) ; <nl> + } <nl> + break ; <nl> + case TokenTypes . LAND : <nl> + case TokenTypes . LOR : <nl> context . visitBooleanOperator ( ) ; <nl> break ; <nl> default : <nl> @ @ - 142 , 6 + 149 , 17 @ @ public final class BooleanExpressionComplexityCheck extends Check <nl> } <nl> <nl> / * * <nl> + * Checks if logical operator is part of constructor or method call . <nl> + * @ param logicalOperator logical operator <nl> + * @ return true if logical operator is part of constructor or method call <nl> + * / <nl> + private boolean isPassedInParameter ( DetailAST logicalOperator ) <nl> + { <nl> + return logicalOperator . getParent ( ) . getType ( ) = = TokenTypes . EXPR <nl> + & & logicalOperator . getParent ( ) . getParent ( ) . getType ( ) = = TokenTypes . ELIST ; <nl> + } <nl> + <nl> + / * * <nl> * Checks if { @ link TokenTypes # BOR binary OR } is applied to exceptions <nl> * in <nl> * < a href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 14 . html # jls - 14 . 20 " > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java <nl> index 0749b91 . . 338fa08 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java <nl> @ @ - 37 , 6 + 37 , 8 @ @ public class BooleanExpressionComplexityCheckTest extends BaseCheckTestSupport <nl> String [ ] expected = { <nl> " 13 : 9 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , <nl> " 32 : 9 : " + getCheckMessage ( MSG _ KEY , 6 , 3 ) , <nl> + " 38 : 34 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , <nl> + " 40 : 34 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , <nl> } ; <nl> <nl> verify ( checkConfig , getPath ( " metrics " + File . separator + " BooleanExpressionComplexityCheckTestInput . java " ) , expected ) ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / BooleanExpressionComplexityCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / BooleanExpressionComplexityCheckTestInput . java <nl> index faa981e . . 4aaab6d 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / BooleanExpressionComplexityCheckTestInput . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / BooleanExpressionComplexityCheckTestInput . java <nl> @ @ - 31 , 4 + 31 , 41 @ @ public class BooleanExpressionComplexityCheckTestInput { <nl> { <nl> return ( ( ( _ a & ( _ b & _ c ) ) | ( _ c ^ _ d ) | ( _ a & _ d ) ) ) ; <nl> } <nl> + <nl> + public void notIgnoredMethodParameters ( ) <nl> + { <nl> + new Settings ( Settings . FALSE & & Settings . FALSE & & Settings . FALSE <nl> + & & Settings . TRUE & & Settings . TRUE ) ; <nl> + new Settings ( Settings . FALSE | | Settings . FALSE | | Settings . FALSE <nl> + | | Settings . TRUE | | Settings . TRUE ) ; <nl> + } <nl> + <nl> + public void ignoredMethodParameters ( ) <nl> + { <nl> + new Settings ( Settings . RESIZABLE | Settings . SCROLLBARS | Settings . LOCATION _ BAR <nl> + | Settings . MENU _ BAR | Settings . TOOL _ BAR ) ; <nl> + new Settings ( Settings . RESIZABLE & Settings . SCROLLBARS & Settings . LOCATION _ BAR <nl> + & Settings . MENU _ BAR & Settings . TOOL _ BAR ) ; <nl> + new Settings ( Settings . RESIZABLE ^ Settings . SCROLLBARS ^ Settings . LOCATION _ BAR <nl> + ^ Settings . MENU _ BAR ^ Settings . TOOL _ BAR ) ; <nl> + } <nl> + <nl> + private class Settings { <nl> + public final static int RESIZABLE = 1 ; <nl> + public final static int SCROLLBARS = 2 ; <nl> + public final static int LOCATION _ BAR = 3 ; <nl> + public final static int MENU _ BAR = 4 ; <nl> + public final static int TOOL _ BAR = 5 ; <nl> + <nl> + public final static boolean TRUE = true ; <nl> + public final static boolean FALSE = false ; <nl> + <nl> + public Settings ( int flag ) <nl> + { <nl> + } <nl> + <nl> + public Settings ( boolean flag ) <nl> + { <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / xdocs / config _ metrics . xml b / src / xdocs / config _ metrics . xml <nl> index 0da22fe . . 079ef39 100644 <nl> - - - a / src / xdocs / config _ metrics . xml <nl> + + + b / src / xdocs / config _ metrics . xml <nl> @ @ - 28 , 9 + 28 , 15 @ @ <nl> Note that the operators < code > & # x26 ; < / code > and <nl> < code > | < / code > are not only integer bitwise operators , they are also the <nl> < a href = " http : / / java . sun . com / docs / books / jls / third _ edition / html / expressions . html # 15 . 22 . 2 " > <nl> - non - shortcut versions < / a > of the boolean operators <nl> + non - shortcut versions < / a > of the boolean operators . <nl> < code > & # x26 ; & # x26 ; < / code > and < code > | | < / code > . <nl> < / p > <nl> + < p > <nl> + Note that < code > & # x26 ; < / code > , < code > | < / code > and < code > ^ < / code > are not checked <nl> + if they are part of constructor or method call <nl> + because they can be applied to non boolean variables and <nl> + Checkstyle does not know types of methods from different classes . <nl> + < / p > <nl> < / subsection > <nl> <nl> < subsection name = " Properties " >

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 index 9f878e6 . . bc74a4a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 @ @ - 72 , 8 + 72 , 11 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 * < / pre > 
 * 
 * < p > 
 - * < b > allowPublicImmutableFields < / b > - which allows immutable fields be 
 - * declared as public if defined in final class . Default value is < b > true < / b > 
 + * < b > allowPublicFinalFields < / b > - which allows public final fields . Default value is < b > false < / b > . 
 + * < / p > 
 + * < p > 
 + * < b > allowPublicImmutableFields < / b > - which allows immutable fields to be 
 + * declared as public if defined in final class . Default value is < b > false < / b > 
 * < / p > 
 * < p > 
 * Field is known to be immutable if : 
 @ @ - 131 , 21 + 134 , 21 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 * < / p > 
 * Examples : 
 * < p > 
 - * Default Check ' s configuration will pass the code below : 
 + * The check will rise 3 violations if it is run with default configuration against the following 
 + * code example : 
 * < / p > 
 * 
 * < pre > 
 * { @ code 
 - * public final class ImmutableClass 
 + * public class ImmutableClass 
 * { 
 - * public final int intValue ; / / No warning 
 - * public final java . lang . String notes ; / / No warning 
 - * public final BigDecimal value ; / / No warning 
 + * public int intValue ; / / violation 
 + * public java . lang . String notes ; / / violation 
 + * public BigDecimal value ; / / violation 
 * 
 * public ImmutableClass ( int intValue , BigDecimal value , String notes ) 
 * { 
 - * this . includes = ImmutableSet . copyOf ( includes ) ; 
 - * this . excludes = ImmutableSet . copyOf ( excludes ) ; 
 + * this . intValue = intValue ; 
 * this . value = value ; 
 * this . notes = notes ; 
 * } 
 @ @ - 159 , 6 + 162 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 * < / p > 
 * < p > 
 * & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; 
 + * & lt ; property name = & quot ; allowPublicImmutableFields & quot ; value = & quot ; true & quot ; / & gt ; 
 * & lt ; property name = & quot ; immutableClassCanonicalNames & quot ; value = & quot ; java . util . List , 
 * com . google . common . collect . ImmutableSet & quot ; / & gt ; 
 * & lt ; / module & gt ; 
 @ @ - 328 , 8 + 332 , 11 @ @ public class VisibilityModifierCheck 
 / * * Whether package visible members are allowed . * / 
 private boolean packageAllowed ; 
 
 - / * * Allows immutable fields to be declared as public . * / 
 - private boolean allowPublicImmutableFields = true ; 
 + / * * Allows immutable fields of final classes to be declared as public . * / 
 + private boolean allowPublicImmutableFields ; 
 + 
 + / * * Allows final fields to be declared as public . * / 
 + private boolean allowPublicFinalFields ; 
 
 / * * List of immutable classes canonical names . * / 
 private List < String > immutableClassCanonicalNames = new ArrayList < > ( DEFAULT _ IMMUTABLE _ TYPES ) ; 
 @ @ - 371 , 7 + 378 , 7 @ @ public class VisibilityModifierCheck 
 } 
 
 / * * 
 - * Sets whether public immutable are allowed . 
 + * Sets whether public immutable fields are allowed . 
 * @ param allow user ' s value . 
 * / 
 public void setAllowPublicImmutableFields ( boolean allow ) { 
 @ @ - 379 , 6 + 386 , 14 @ @ public class VisibilityModifierCheck 
 } 
 
 / * * 
 + * Sets whether public final fields are allowed . 
 + * @ param allow user ' s value . 
 + * / 
 + public void setAllowPublicFinalFields ( boolean allow ) { 
 + allowPublicFinalFields = allow ; 
 + } 
 + 
 + / * * 
 * Set the list of immutable classes types names . 
 * @ param classNames array of immutable types canonical names . 
 * / 
 @ @ - 540 , 8 + 555 , 7 @ @ public class VisibilityModifierCheck 
 | | packageAllowed & & PACKAGE _ ACCESS _ MODIFIER . equals ( variableScope ) 
 | | protectedAllowed & & PROTECTED _ ACCESS _ MODIFIER . equals ( variableScope ) 
 | | isIgnoredPublicMember ( variableName , variableScope ) 
 - | | allowPublicImmutableFields 
 - & & isImmutableFieldDefinedInFinalClass ( variableDef ) ; 
 + | | isAllowedPublicField ( variableDef ) ; 
 } 
 
 return result ; 
 @ @ - 570 , 6 + 584 , 16 @ @ public class VisibilityModifierCheck 
 } 
 
 / * * 
 + * Checks whether the variable satisfies the public field check . 
 + * @ param variableDef Variable definition node . 
 + * @ return true if allowed . 
 + * / 
 + private boolean isAllowedPublicField ( DetailAST variableDef ) { 
 + return allowPublicFinalFields & & isFinalField ( variableDef ) 
 + | | allowPublicImmutableFields & & isImmutableFieldDefinedInFinalClass ( variableDef ) ; 
 + } 
 + 
 + / * * 
 * Checks whether immutable field is defined in final class . 
 * @ param variableDef Variable definition node . 
 * @ return true if immutable field is defined in final class . 
 @ @ - 597 , 7 + 621 , 6 @ @ public class VisibilityModifierCheck 
 } 
 } 
 return modifiersSet ; 
 - 
 } 
 
 / * * 
 @ @ - 628 , 10 + 651 , 7 @ @ public class VisibilityModifierCheck 
 * / 
 private boolean isImmutableField ( DetailAST variableDef ) { 
 boolean result = false ; 
 - 
 - final DetailAST modifiers = variableDef . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 - final boolean isFinal = modifiers . branchContains ( TokenTypes . FINAL ) ; 
 - if ( isFinal ) { 
 + if ( isFinalField ( variableDef ) ) { 
 final DetailAST type = variableDef . findFirstToken ( TokenTypes . TYPE ) ; 
 final boolean isCanonicalName = type . getFirstChild ( ) . getType ( ) = = TokenTypes . DOT ; 
 final String typeName = getTypeName ( type , isCanonicalName ) ; 
 @ @ - 644 , 6 + 664 , 16 @ @ public class VisibilityModifierCheck 
 } 
 
 / * * 
 + * Checks whether current field is final . 
 + * @ param variableDef field in consideration . 
 + * @ return true if current field is final . 
 + * / 
 + private boolean isFinalField ( DetailAST variableDef ) { 
 + final DetailAST modifiers = variableDef . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 + return modifiers . branchContains ( TokenTypes . FINAL ) ; 
 + } 
 + 
 + / * * 
 * Gets the name of type from given ast { @ link TokenTypes # TYPE TYPE } node . 
 * If type is specified via its canonical name - canonical name will be returned , 
 * else - short type ' s name . 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 index fb7ea81 . . 9b53e7d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheckTest . java 
 @ @ - 117 , 6 + 117 , 7 @ @ public class VisibilityModifierCheckTest 
 public void testAllowPublicFinalFieldsInImmutableClass ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; 
 final String [ ] expected = { 
 " 12 : 39 : " + getCheckMessage ( MSG _ KEY , " includes " ) , 
 " 13 : 39 : " + getCheckMessage ( MSG _ KEY , " excludes " ) , 
 @ @ - 129 , 14 + 130 , 51 @ @ public class VisibilityModifierCheckTest 
 } 
 
 @ Test 
 + public void testDisAllowPublicFinalAndImmutableFieldsInImmutableClass ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + final String [ ] expected = { 
 + " 11 : 22 : " + getCheckMessage ( MSG _ KEY , " someIntValue " ) , 
 + " 12 : 39 : " + getCheckMessage ( MSG _ KEY , " includes " ) , 
 + " 13 : 39 : " + getCheckMessage ( MSG _ KEY , " excludes " ) , 
 + " 14 : 35 : " + getCheckMessage ( MSG _ KEY , " notes " ) , 
 + " 15 : 29 : " + getCheckMessage ( MSG _ KEY , " money " ) , 
 + " 16 : 23 : " + getCheckMessage ( MSG _ KEY , " list " ) , 
 + " 30 : 28 : " + getCheckMessage ( MSG _ KEY , " f " ) , 
 + " 31 : 30 : " + getCheckMessage ( MSG _ KEY , " bool " ) , 
 + " 32 : 35 : " + getCheckMessage ( MSG _ KEY , " uri " ) , 
 + " 33 : 35 : " + getCheckMessage ( MSG _ KEY , " file " ) , 
 + " 34 : 20 : " + getCheckMessage ( MSG _ KEY , " value " ) , 
 + " 35 : 35 : " + getCheckMessage ( MSG _ KEY , " url " ) , 
 + " 36 : 24 : " + getCheckMessage ( MSG _ KEY , " bValue " ) , 
 + " 37 : 31 : " + getCheckMessage ( MSG _ KEY , " longValue " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputImmutable . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testAllowPublicFinalFieldsInNonFinalClass ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + checkConfig . addAttribute ( " allowPublicFinalFields " , " true " ) ; 
 + final String [ ] expected = { 
 + " 34 : 20 : " + getCheckMessage ( MSG _ KEY , " value " ) , 
 + " 36 : 24 : " + getCheckMessage ( MSG _ KEY , " bValue " ) , 
 + " 37 : 31 : " + getCheckMessage ( MSG _ KEY , " longValue " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputImmutable . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testUserSpecifiedImmutableClassesList ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; 
 checkConfig . addAttribute ( " immutableClassCanonicalNames " , " java . util . List , " 
 + " com . google . common . collect . ImmutableSet " ) ; 
 final String [ ] expected = { 
 " 14 : 35 : " + getCheckMessage ( MSG _ KEY , " notes " ) , 
 - " 15 : 29 : " + getCheckMessage ( MSG _ KEY , " value " ) , 
 + " 15 : 29 : " + getCheckMessage ( MSG _ KEY , " money " ) , 
 " 32 : 35 : " + getCheckMessage ( MSG _ KEY , " uri " ) , 
 " 33 : 35 : " + getCheckMessage ( MSG _ KEY , " file " ) , 
 " 34 : 20 : " + getCheckMessage ( MSG _ KEY , " value " ) , 
 @ @ - 151 , 6 + 189 , 7 @ @ public class VisibilityModifierCheckTest 
 public void testImmutableSpecifiedSameTypeName ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; 
 checkConfig . addAttribute ( " immutableClassCanonicalNames " , 
 " com . puppycrawl . tools . checkstyle . checks . coding . InputGregorianCalendar , " 
 + " com . puppycrawl . tools . checkstyle . checks . design . InetSocketAddress " ) ; 
 @ @ - 162 , 9 + 201 , 10 @ @ public class VisibilityModifierCheckTest 
 } 
 
 @ Test 
 - public void testImmutableDefaultValueSameTypeName ( ) throws Exception { 
 + public void testImmutableValueSameTypeName ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; 
 final String [ ] expected = { 
 " 7 : 46 : " + getCheckMessage ( MSG _ KEY , " calendar " ) , 
 " 8 : 41 : " + getCheckMessage ( MSG _ KEY , " calendar2 " ) , 
 @ @ - 178 , 6 + 218 , 7 @ @ public class VisibilityModifierCheckTest 
 public void testImmutableStarImportFalseNegative ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; 
 checkConfig . addAttribute ( " immutableClassCanonicalNames " , " java . util . Arrays " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , getPath ( " InputImmutableStarImport . java " ) , expected ) ; 
 @ @ - 187 , 6 + 228 , 7 @ @ public class VisibilityModifierCheckTest 
 public void testImmutableStarImportNoWarn ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; 
 checkConfig . addAttribute ( " immutableClassCanonicalNames " , 
 " com . google . common . collect . ImmutableSet " ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 @ @ - 284 , 7 + 326 , 6 @ @ public class VisibilityModifierCheckTest 
 public void testPublicImmutableFieldsNotAllowed ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( VisibilityModifierCheck . class ) ; 
 - checkConfig . addAttribute ( " allowPublicImmutableFields " , " false " ) ; 
 final String [ ] expected = { 
 " 10 : 22 : " + getCheckMessage ( MSG _ KEY , " someIntValue " ) , 
 " 11 : 39 : " + getCheckMessage ( MSG _ KEY , " includes " ) , 
 @ @ - 295 , 6 + 336 , 42 @ @ public class VisibilityModifierCheckTest 
 verify ( checkConfig , getPath ( " InputPublicImmutable . java " ) , expected ) ; 
 } 
 
 + @ Test 
 + public void testPublicFinalFieldsNotAllowed ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + final String [ ] expected = { 
 + " 10 : 22 : " + getCheckMessage ( MSG _ KEY , " someIntValue " ) , 
 + " 11 : 39 : " + getCheckMessage ( MSG _ KEY , " includes " ) , 
 + " 12 : 35 : " + getCheckMessage ( MSG _ KEY , " notes " ) , 
 + " 13 : 29 : " + getCheckMessage ( MSG _ KEY , " value " ) , 
 + " 14 : 23 : " + getCheckMessage ( MSG _ KEY , " list " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputPublicImmutable . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testPublicFinalFieldsAllowed ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + checkConfig . addAttribute ( " allowPublicFinalFields " , " true " ) ; 
 + checkConfig . addAttribute ( " immutableClassCanonicalNames " , 
 + " com . google . common . collect . ImmutableSet " ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputPublicImmutable . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 + public void testPublicFinalFieldInEnum ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; 
 + final String [ ] expected = { 
 + " 15 : 23 : " + getCheckMessage ( MSG _ KEY , " hole " ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputEnumIsSealed . java " ) , expected ) ; 
 + } 
 + 
 @ Test ( expected = IllegalArgumentException . class ) 
 public void testWrongTokenType ( ) { 
 final VisibilityModifierCheck obj = new VisibilityModifierCheck ( ) ; 
 @ @ - 307 , 6 + 384 , 7 @ @ public class VisibilityModifierCheckTest 
 public void testNullModifiers ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( VisibilityModifierCheck . class ) ; 
 + checkConfig . addAttribute ( " allowPublicImmutableFields " , " true " ) ; 
 final String [ ] expected = { 
 " 11 : 50 : " + getCheckMessage ( MSG _ KEY , " i " ) , 
 } ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputEnumIsSealed . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputEnumIsSealed . java 
 new file mode 100644 
 index 0000000 . . 444dd2b 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputEnumIsSealed . java 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + 
 + package com . puppycrawl . tools . checkstyle . checks . design ; 
 + 
 + / * * Shows that sealed enum is good as final . * / 
 + public enum InputEnumIsSealed { 
 + SOME _ VALUE ; 
 + 
 + static class Hole { 
 + } 
 + 
 + / * * Normally disallowed if final enclosing class is required . * / 
 + public final int someField = Integer . MAX _ VALUE ; 
 + 
 + / * * Disallowed because mutable . * / 
 + public final Hole hole = null ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutable . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutable . java 
 index 190ddf8 . . 6f09894 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutable . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / design / InputImmutable . java 
 @ @ - 12 , 14 + 12 , 14 @ @ public final class InputImmutable 
 public final ImmutableSet < String > includes ; 
 public final ImmutableSet < String > excludes ; 
 public final java . lang . String notes ; 
 - public final BigDecimal value ; 
 + public final BigDecimal money ; 
 public final List list ; 
 
 public InputImmutable ( Collection < String > includes , Collection < String > excludes , 
 BigDecimal value , String notes , int someValue , List l ) { 
 this . includes = ImmutableSet . copyOf ( includes ) ; 
 this . excludes = ImmutableSet . copyOf ( excludes ) ; 
 - this . value = value ; 
 + this . money = value ; 
 this . notes = notes ; 
 this . someIntValue = someValue ; 
 this . list = l ; 
 diff - - git a / src / xdocs / config _ design . xml b / src / xdocs / config _ design . xml 
 index 19d7579 . . 29435ee 100644 
 - - - a / src / xdocs / config _ design . xml 
 + + + b / src / xdocs / config _ design . xml 
 @ @ - 793 , 8 + 793 , 12 @ @ public class Foo { 
 named the same type without consideration of package 
 < / p > 
 < p > 
 - < b > allowPublicImmutableFields < / b > - which allows immutable fields be declared as 
 - public if defined in final class . Default value is < b > true < / b > 
 + < b > allowPublicFinalFields < / b > - which allows public final fields . 
 + Default value is < b > false < / b > 
 + < / p > 
 + < p > 
 + < b > allowPublicImmutableFields < / b > - which allows immutable fields to be declared as 
 + public if defined in final class . Default value is < b > false < / b > 
 < / p > 
 < p > 
 Field is known to be immutable if : 
 @ @ - 814 , 7 + 818 , 10 @ @ public class Foo { 
 < p > 
 < b > Restriction < / b > : Check doesn ' t check if class is immutable , there ' s no 
 checking if accessory methods are missing and all fields are immutable , we only check 
 - < b > if current field is immutable and defined in final class < / b > 
 + < b > if current field is immutable or final < / b > . Under the flag 
 + < b > allowPublicImmutableFields < / b > , the enclosing class must also be final , to encourage 
 + immutability . Under the flag < b > allowPublicFinalFields < / b > , the final modifier on 
 + the enclosing class is optional . 
 < / p > 
 < p > 
 Star imports are out of scope of this Check . So if one of type imported via 
 @ @ - 850 , 10 + 857 , 16 @ @ public class Foo { 
 < td > < code > ^ serialVersionUID $ < / code > < / td > 
 < / tr > 
 < tr > 
 + < td > allowPublicFinalFields < / td > 
 + < td > allows public final fields < / td > 
 + < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 + < td > < code > false < / code > < / td > 
 + < / tr > 
 + < tr > 
 < td > allowPublicImmutableFields < / td > 
 - < td > allows immutable fields be declared as public if defined in final class < / td > 
 + < td > allows immutable fields to be declared as public if defined in final class < / td > 
 < td > < a href = " property _ types . html # boolean " > Boolean < / a > < / td > 
 - < td > < code > true < / code > < / td > 
 + < td > < code > false < / code > < / td > 
 < / tr > 
 < tr > 
 < td > immutableClassCanonicalNames < / td > 
 @ @ - 904 , 7 + 917 , 9 @ @ public class Foo { 
 ( mostly for immutable classes ) : 
 < / p > 
 < source > 
 - & lt ; module name = & quot ; VisibilityModifier & quot ; / & gt ; 
 + & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; 
 + & lt ; property name = & quot ; allowPublicImmutableFields & quot ; value = & quot ; true & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 < / source > 
 < p > 
 Example of allowed public immutable fields : 
 @ @ - 928 , 10 + 943 , 11 @ @ public class ImmutableClass 
 } 
 < / source > 
 < p > 
 - To configure the Check which allows user specified immutable class names : 
 + To configure the Check in order to allow user specified immutable class names : 
 < / p > 
 < source > 
 & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; 
 + & lt ; property name = & quot ; allowPublicImmutableFields & quot ; value = & quot ; true & quot ; / & gt ; 
 & lt ; property name = & quot ; immutableClassCanonicalNames & quot ; value = & quot ; 
 com . google . common . collect . ImmutableSet & quot ; / & gt ; 
 & lt ; / module & gt ; 
 @ @ - 1028 , 6 + 1044 , 69 @ @ class SomeClass 
 / / so no violation 
 } 
 < / source > 
 + 
 + < p > 
 + To understand the difference between allowPublicImmutableFields and 
 + allowPublicFinalFields options , please , study the following examples . 
 + < / p > 
 + < p > 
 + 1 ) To configure the check to use only ' allowPublicImmutableFields ' option : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; 
 + & lt ; property name = & quot ; allowPublicImmutableFields & quot ; value = & quot ; true & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + < p > 
 + Code example : 
 + < / p > 
 + < source > 
 + public class InputPublicImmutable { 
 + public final int someIntValue ; / / violation 
 + public final ImmutableSet & lt ; String & gt ; includes ; / / violation 
 + public final java . lang . String notes ; / / violation 
 + public final BigDecimal value ; / / violation 
 + public final List list ; / / violation 
 + 
 + public InputPublicImmutable ( Collection & lt ; String & gt ; includes , 
 + BigDecimal value , String notes , int someValue , List l ) { 
 + this . includes = ImmutableSet . copyOf ( includes ) ; 
 + this . value = value ; 
 + this . notes = notes ; 
 + this . someIntValue = someValue ; 
 + this . list = l ; 
 + } 
 + } 
 + < / source > 
 + < p > 
 + 2 ) To configure the check to use only ' allowPublicFinalFields ' option : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; VisibilityModifier & quot ; & gt ; 
 + & lt ; property name = & quot ; allowPublicFinalFields & quot ; value = & quot ; true & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + < p > 
 + Code example : 
 + < / p > 
 + < source > 
 + public class InputPublicImmutable { 
 + public final int someIntValue ; 
 + public final ImmutableSet & lt ; String & gt ; includes ; 
 + public final java . lang . String notes ; 
 + public final BigDecimal value ; 
 + public final List list ; 
 + 
 + public InputPublicImmutable ( Collection & lt ; String & gt ; includes , 
 + BigDecimal value , String notes , int someValue , List l ) { 
 + this . includes = ImmutableSet . copyOf ( includes ) ; 
 + this . value = value ; 
 + this . notes = notes ; 
 + this . someIntValue = someValue ; 
 + this . list = l ; 
 + } 
 + } 
 + < / source > 
 < / subsection > 
 
 < subsection name = " Example of Usage " >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java 
 index 16b4165 . . d978914 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java 
 @ @ - 27 , 6 + 27 , 9 @ @ import com . puppycrawl . tools . checkstyle . checks . CheckUtils ; 
 / * * 
 * Restricts nested boolean operators ( & amp ; & amp ; , | | , & amp ; , | and ^ ) to 
 * a specified depth ( default = 3 ) . 
 + * Note : & amp ; , | and ^ are not checked if they are part of constructor or 
 + * method call because they can be applied to non boolean variables and 
 + * Checkstyle does not know types of methods from different classes . 
 * 
 * @ author < a href = " mailto : simon @ redhillconsulting . com . au " > Simon Harris < / a > 
 * @ author o _ sukhodolsky 
 @ @ - 126 , 14 + 129 , 18 @ @ public final class BooleanExpressionComplexityCheck extends Check 
 visitExpr ( ) ; 
 break ; 
 case TokenTypes . BOR : 
 - if ( ! isPipeOperator ( ast ) ) { 
 + if ( ! isPipeOperator ( ast ) & & ! isPassedInParameter ( ast ) ) { 
 context . visitBooleanOperator ( ) ; 
 } 
 break ; 
 - case TokenTypes . LAND : 
 case TokenTypes . BAND : 
 - case TokenTypes . LOR : 
 case TokenTypes . BXOR : 
 + if ( ! isPassedInParameter ( ast ) ) { 
 + context . visitBooleanOperator ( ) ; 
 + } 
 + break ; 
 + case TokenTypes . LAND : 
 + case TokenTypes . LOR : 
 context . visitBooleanOperator ( ) ; 
 break ; 
 default : 
 @ @ - 142 , 6 + 149 , 17 @ @ public final class BooleanExpressionComplexityCheck extends Check 
 } 
 
 / * * 
 + * Checks if logical operator is part of constructor or method call . 
 + * @ param logicalOperator logical operator 
 + * @ return true if logical operator is part of constructor or method call 
 + * / 
 + private boolean isPassedInParameter ( DetailAST logicalOperator ) 
 + { 
 + return logicalOperator . getParent ( ) . getType ( ) = = TokenTypes . EXPR 
 + & & logicalOperator . getParent ( ) . getParent ( ) . getType ( ) = = TokenTypes . ELIST ; 
 + } 
 + 
 + / * * 
 * Checks if { @ link TokenTypes # BOR binary OR } is applied to exceptions 
 * in 
 * < a href = " http : / / docs . oracle . com / javase / specs / jls / se8 / html / jls - 14 . html # jls - 14 . 20 " > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java 
 index 0749b91 . . 338fa08 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheckTest . java 
 @ @ - 37 , 6 + 37 , 8 @ @ public class BooleanExpressionComplexityCheckTest extends BaseCheckTestSupport 
 String [ ] expected = { 
 " 13 : 9 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , 
 " 32 : 9 : " + getCheckMessage ( MSG _ KEY , 6 , 3 ) , 
 + " 38 : 34 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , 
 + " 40 : 34 : " + getCheckMessage ( MSG _ KEY , 4 , 3 ) , 
 } ; 
 
 verify ( checkConfig , getPath ( " metrics " + File . separator + " BooleanExpressionComplexityCheckTestInput . java " ) , expected ) ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / BooleanExpressionComplexityCheckTestInput . java b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / BooleanExpressionComplexityCheckTestInput . java 
 index faa981e . . 4aaab6d 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / BooleanExpressionComplexityCheckTestInput . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / metrics / BooleanExpressionComplexityCheckTestInput . java 
 @ @ - 31 , 4 + 31 , 41 @ @ public class BooleanExpressionComplexityCheckTestInput { 
 { 
 return ( ( ( _ a & ( _ b & _ c ) ) | ( _ c ^ _ d ) | ( _ a & _ d ) ) ) ; 
 } 
 + 
 + public void notIgnoredMethodParameters ( ) 
 + { 
 + new Settings ( Settings . FALSE & & Settings . FALSE & & Settings . FALSE 
 + & & Settings . TRUE & & Settings . TRUE ) ; 
 + new Settings ( Settings . FALSE | | Settings . FALSE | | Settings . FALSE 
 + | | Settings . TRUE | | Settings . TRUE ) ; 
 + } 
 + 
 + public void ignoredMethodParameters ( ) 
 + { 
 + new Settings ( Settings . RESIZABLE | Settings . SCROLLBARS | Settings . LOCATION _ BAR 
 + | Settings . MENU _ BAR | Settings . TOOL _ BAR ) ; 
 + new Settings ( Settings . RESIZABLE & Settings . SCROLLBARS & Settings . LOCATION _ BAR 
 + & Settings . MENU _ BAR & Settings . TOOL _ BAR ) ; 
 + new Settings ( Settings . RESIZABLE ^ Settings . SCROLLBARS ^ Settings . LOCATION _ BAR 
 + ^ Settings . MENU _ BAR ^ Settings . TOOL _ BAR ) ; 
 + } 
 + 
 + private class Settings { 
 + public final static int RESIZABLE = 1 ; 
 + public final static int SCROLLBARS = 2 ; 
 + public final static int LOCATION _ BAR = 3 ; 
 + public final static int MENU _ BAR = 4 ; 
 + public final static int TOOL _ BAR = 5 ; 
 + 
 + public final static boolean TRUE = true ; 
 + public final static boolean FALSE = false ; 
 + 
 + public Settings ( int flag ) 
 + { 
 + } 
 + 
 + public Settings ( boolean flag ) 
 + { 
 + } 
 + } 
 } 
 diff - - git a / src / xdocs / config _ metrics . xml b / src / xdocs / config _ metrics . xml 
 index 0da22fe . . 079ef39 100644 
 - - - a / src / xdocs / config _ metrics . xml 
 + + + b / src / xdocs / config _ metrics . xml 
 @ @ - 28 , 9 + 28 , 15 @ @ 
 Note that the operators < code > & # x26 ; < / code > and 
 < code > | < / code > are not only integer bitwise operators , they are also the 
 < a href = " http : / / java . sun . com / docs / books / jls / third _ edition / html / expressions . html # 15 . 22 . 2 " > 
 - non - shortcut versions < / a > of the boolean operators 
 + non - shortcut versions < / a > of the boolean operators . 
 < code > & # x26 ; & # x26 ; < / code > and < code > | | < / code > . 
 < / p > 
 + < p > 
 + Note that < code > & # x26 ; < / code > , < code > | < / code > and < code > ^ < / code > are not checked 
 + if they are part of constructor or method call 
 + because they can be applied to non boolean variables and 
 + Checkstyle does not know types of methods from different classes . 
 + < / p > 
 < / subsection > 
 
 < subsection name = " Properties " >
