BLEU SCORE: 0.03283637368030199

TEST MSG: doc : fixed improper private method documentation
GENERATED MSG: Remove unused assignment . # 1555

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> index 4a876dd . . 4d3e39c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> @ @ - 410 , 13 + 410 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck { <nl> } <nl> <nl> / * * <nl> - * The JavadocMethodCheck is about to report a missing Javadoc . <nl> - * This hook can be used by derived classes to allow a missing javadoc <nl> - * in some situations . The default implementation checks <nl> - * { @ code allowMissingJavadoc } and <nl> - * { @ code allowMissingPropertyJavadoc } properties , do not forget <nl> - * to call { @ code super . isMissingJavadocAllowed ( ast ) } in case <nl> - * you want to keep this logic . <nl> + * Checks if a missing Javadoc is allowed by the check ' s configuration . <nl> * @ param ast the tree node for the method or constructor . <nl> * @ return True if this method or constructor doesn ' t need Javadoc . <nl> * /
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> index ae8513a . . 55691c7 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java <nl> @ @ - 89 , 6 + 89 , 13 @ @ public final class ConfigurationLoader { <nl> private static final String DTD _ RESOURCE _ NAME _ 1 _ 3 = <nl> " com / puppycrawl / tools / checkstyle / configuration _ 1 _ 3 . dtd " ; <nl> <nl> + / * * Prefix for the exception when unable to find resource . * / <nl> + private static final String UNABLE _ TO _ FIND _ EXCEPTION _ PREFIX = " unable to find " ; <nl> + <nl> + / * * Prefix for the exception when unable to parse resource . * / <nl> + private static final String UNABLE _ TO _ PARSE _ EXCEPTION _ PREFIX = " unable to parse " <nl> + + " configuration stream " ; <nl> + <nl> / * * The SAX document handler * / <nl> private final InternalLoader saxHandler ; <nl> <nl> @ @ - 192 , 12 + 199 , 12 @ @ public final class ConfigurationLoader { <nl> final URL configUrl = ConfigurationLoader . class <nl> . getResource ( config ) ; <nl> if ( configUrl = = null ) { <nl> - throw new CheckstyleException ( " unable to find " + config ) ; <nl> + throw new CheckstyleException ( UNABLE _ TO _ FIND _ EXCEPTION _ PREFIX + config ) ; <nl> } <nl> uri = configUrl . toURI ( ) ; <nl> } <nl> catch ( final URISyntaxException e ) { <nl> - throw new CheckstyleException ( " unable to find " + config , e ) ; <nl> + throw new CheckstyleException ( UNABLE _ TO _ FIND _ EXCEPTION _ PREFIX + config , e ) ; <nl> } <nl> } <nl> } <nl> @ @ - 254 , 12 + 261 , 12 @ @ public final class ConfigurationLoader { <nl> return loader . configuration ; <nl> } <nl> catch ( final SAXParseException e ) { <nl> - throw new CheckstyleException ( " unable to parse configuration stream " <nl> + throw new CheckstyleException ( UNABLE _ TO _ PARSE _ EXCEPTION _ PREFIX <nl> + " - " + e . getMessage ( ) + " : " + e . getLineNumber ( ) <nl> + " : " + e . getColumnNumber ( ) , e ) ; <nl> } <nl> catch ( final ParserConfigurationException | IOException | SAXException e ) { <nl> - throw new CheckstyleException ( " unable to parse configuration stream " , e ) ; <nl> + throw new CheckstyleException ( UNABLE _ TO _ PARSE _ EXCEPTION _ PREFIX , e ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> index 498ae4e . . 745e292 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java <nl> @ @ - 46 , 6 + 46 , 9 @ @ public class DefaultLogger <nl> / * * Cushion for avoiding StringBuffer . expandCapacity * / <nl> private static final int BUFFER _ CUSHION = 12 ; <nl> <nl> + / * * Encoding name . * / <nl> + private static final String UTF8 _ CHARSET _ NAME = " UTF - 8 " ; <nl> + <nl> / * * Where to write info messages * * / <nl> private final PrintWriter infoWriter ; <nl> / * * Close info stream after use * / <nl> @ @ - 83 , 8 + 86 , 8 @ @ public class DefaultLogger <nl> boolean closeErrorAfterUse ) throws UnsupportedEncodingException { <nl> closeInfo = closeInfoAfterUse ; <nl> closeError = closeErrorAfterUse ; <nl> - final Writer infoStreamWriter = new OutputStreamWriter ( infoStream , " UTF - 8 " ) ; <nl> - final Writer errorStreamWriter = new OutputStreamWriter ( errorStream , " UTF - 8 " ) ; <nl> + final Writer infoStreamWriter = new OutputStreamWriter ( infoStream , UTF8 _ CHARSET _ NAME ) ; <nl> + final Writer errorStreamWriter = new OutputStreamWriter ( errorStream , UTF8 _ CHARSET _ NAME ) ; <nl> infoWriter = new PrintWriter ( infoStreamWriter ) ; <nl> <nl> if ( infoStream = = errorStream ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> index 1b860fa . . 3a81caa 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java <nl> @ @ - 52 , 6 + 52 , 27 @ @ public final class Main { <nl> / * * Exit code returned when excecution finishes with { @ link CheckstyleException } * / <nl> private static final int EXIT _ WITH _ CHECKSTYLE _ EXCEPTION _ CODE = - 2 ; <nl> <nl> + / * * Name for the option ' v ' . * / <nl> + private static final String OPTION _ V _ NAME = " v " ; <nl> + <nl> + / * * Name for the option ' c ' . * / <nl> + private static final String OPTION _ C _ NAME = " c " ; <nl> + <nl> + / * * Name for the option ' f ' . * / <nl> + private static final String OPTION _ F _ NAME = " f " ; <nl> + <nl> + / * * Name for the option ' p ' . * / <nl> + private static final String OPTION _ P _ NAME = " p " ; <nl> + <nl> + / * * Name for the option ' o ' . * / <nl> + private static final String OPTION _ O _ NAME = " o " ; <nl> + <nl> + / * * Name for ' xml ' format . * / <nl> + private static final String XML _ FORMAT _ NAME = " xml " ; <nl> + <nl> + / * * Name for ' plain ' format . * / <nl> + private static final String PLAIN _ FORMAT _ NAME = " plain " ; <nl> + <nl> / * * Don ' t create instance of this class , use { @ link # main ( String [ ] ) } method instead . * / <nl> private Main ( ) { <nl> } <nl> @ @ - 76 , 7 + 97 , 7 @ @ public final class Main { <nl> final CommandLine commandLine = parseCli ( args ) ; <nl> <nl> / / show version and exit if it is requested <nl> - if ( commandLine . hasOption ( " v " ) ) { <nl> + if ( commandLine . hasOption ( OPTION _ V _ NAME ) ) { <nl> System . out . println ( " Checkstyle version : " <nl> + Main . class . getPackage ( ) . getImplementationVersion ( ) ) ; <nl> exitStatus = 0 ; <nl> @ @ - 149 , 24 + 170 , 25 @ @ public final class Main { <nl> private static List < String > validateCli ( CommandLine cmdLine ) { <nl> final List < String > result = new ArrayList < > ( ) ; <nl> / / ensure a configuration file is specified <nl> - if ( cmdLine . hasOption ( " c " ) ) { <nl> + if ( cmdLine . hasOption ( OPTION _ C _ NAME ) ) { <nl> / / validate optional parameters <nl> - if ( cmdLine . hasOption ( " f " ) ) { <nl> - final String format = cmdLine . getOptionValue ( " f " ) ; <nl> - if ( ! " plain " . equals ( format ) & & ! " xml " . equals ( format ) ) { <nl> + if ( cmdLine . hasOption ( OPTION _ F _ NAME ) ) { <nl> + final String format = cmdLine . getOptionValue ( OPTION _ F _ NAME ) ; <nl> + if ( ! PLAIN _ FORMAT _ NAME . equals ( format ) & & ! XML _ FORMAT _ NAME . equals ( format ) ) { <nl> result . add ( String . format ( " Invalid output format . " <nl> - + " Found ' % s ' but expected ' plain ' or ' xml ' . " , format ) ) ; <nl> + + " Found ' % s ' but expected ' % s ' or ' % s ' . " , <nl> + format , PLAIN _ FORMAT _ NAME , XML _ FORMAT _ NAME ) ) ; <nl> } <nl> } <nl> - if ( cmdLine . hasOption ( " p " ) ) { <nl> - final String propertiesLocation = cmdLine . getOptionValue ( " p " ) ; <nl> + if ( cmdLine . hasOption ( OPTION _ P _ NAME ) ) { <nl> + final String propertiesLocation = cmdLine . getOptionValue ( OPTION _ P _ NAME ) ; <nl> final File file = new File ( propertiesLocation ) ; <nl> if ( ! file . exists ( ) ) { <nl> result . add ( String . format ( " Could not find file ' % s ' . " , propertiesLocation ) ) ; <nl> } <nl> } <nl> - if ( cmdLine . hasOption ( " o " ) ) { <nl> - final String outputLocation = cmdLine . getOptionValue ( " o " ) ; <nl> + if ( cmdLine . hasOption ( OPTION _ O _ NAME ) ) { <nl> + final String outputLocation = cmdLine . getOptionValue ( OPTION _ O _ NAME ) ; <nl> final File file = new File ( outputLocation ) ; <nl> if ( file . exists ( ) & & ! file . canWrite ( ) ) { <nl> result . add ( String . format ( " Permission denied : ' % s ' . " , outputLocation ) ) ; <nl> @ @ - 191 , 13 + 213 , 13 @ @ public final class Main { <nl> * / <nl> private static CliOptions convertCliToPojo ( CommandLine cmdLine ) { <nl> final CliOptions conf = new CliOptions ( ) ; <nl> - conf . format = cmdLine . getOptionValue ( " f " ) ; <nl> + conf . format = cmdLine . getOptionValue ( OPTION _ F _ NAME ) ; <nl> if ( conf . format = = null ) { <nl> - conf . format = " plain " ; <nl> + conf . format = PLAIN _ FORMAT _ NAME ; <nl> } <nl> - conf . outputLocation = cmdLine . getOptionValue ( " o " ) ; <nl> - conf . configLocation = cmdLine . getOptionValue ( " c " ) ; <nl> - conf . propertiesLocation = cmdLine . getOptionValue ( " p " ) ; <nl> + conf . outputLocation = cmdLine . getOptionValue ( OPTION _ O _ NAME ) ; <nl> + conf . configLocation = cmdLine . getOptionValue ( OPTION _ C _ NAME ) ; <nl> + conf . propertiesLocation = cmdLine . getOptionValue ( OPTION _ P _ NAME ) ; <nl> conf . files = getFilesToProcess ( cmdLine . getArgs ( ) ) ; <nl> return conf ; <nl> } <nl> @ @ - 310 , 11 + 332 , 11 @ @ public final class Main { <nl> <nl> / / setup a listener <nl> AuditListener listener ; <nl> - if ( " xml " . equals ( format ) ) { <nl> + if ( XML _ FORMAT _ NAME . equals ( format ) ) { <nl> listener = new XMLLogger ( out , closeOutputStream ) ; <nl> <nl> } <nl> - else if ( " plain " . equals ( format ) ) { <nl> + else if ( PLAIN _ FORMAT _ NAME . equals ( format ) ) { <nl> listener = new DefaultLogger ( out , closeOutputStream ) ; <nl> <nl> } <nl> @ @ - 322 , 8 + 344 , 9 @ @ public final class Main { <nl> if ( closeOutputStream ) { <nl> Utils . close ( out ) ; <nl> } <nl> - throw new IllegalStateException ( " Invalid output format . Found ' " + format <nl> - + " ' but expected ' plain ' or ' xml ' . " ) ; <nl> + throw new IllegalStateException ( String . format ( <nl> + " Invalid output format . Found ' % s ' but expected ' % s ' or ' % s ' . " , <nl> + format , PLAIN _ FORMAT _ NAME , XML _ FORMAT _ NAME ) ) ; <nl> } <nl> <nl> return listener ; <nl> @ @ - 386 , 11 + 409 , 13 @ @ public final class Main { <nl> * / <nl> private static Options buildOptions ( ) { <nl> final Options options = new Options ( ) ; <nl> - options . addOption ( " c " , true , " Sets the check configuration file to use . " ) ; <nl> - options . addOption ( " o " , true , " Sets the output file . Defaults to stdout " ) ; <nl> - options . addOption ( " p " , true , " Loads the properties file " ) ; <nl> - options . addOption ( " f " , true , " Sets the output format . ( plain | xml ) . Defaults to plain " ) ; <nl> - options . addOption ( " v " , false , " Print product version and exit " ) ; <nl> + options . addOption ( OPTION _ C _ NAME , true , " Sets the check configuration file to use . " ) ; <nl> + options . addOption ( OPTION _ O _ NAME , true , " Sets the output file . Defaults to stdout " ) ; <nl> + options . addOption ( OPTION _ P _ NAME , true , " Loads the properties file " ) ; <nl> + options . addOption ( OPTION _ F _ NAME , true , String . format ( <nl> + " Sets the output format . ( % s | % s ) . Defaults to % s " , <nl> + PLAIN _ FORMAT _ NAME , XML _ FORMAT _ NAME , PLAIN _ FORMAT _ NAME ) ) ; <nl> + options . addOption ( OPTION _ V _ NAME , false , " Print product version and exit " ) ; <nl> return options ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> index 1635a6e . . 19eab7f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> @ @ - 37 , 6 + 37 , 12 @ @ class PackageObjectFactory implements ModuleFactory { <nl> / * * Logger for PackageObjectFactory . * / <nl> private static final Log LOG = LogFactory . getLog ( PackageObjectFactory . class ) ; <nl> <nl> + / * * Log message when ignoring exception . * / <nl> + private static final String IGNORING _ EXCEPTION _ MESSAGE = " Keep looking , ignoring exception " ; <nl> + <nl> + / * * Exception message when it is unable to create a class instance . * / <nl> + private static final String UNABLE _ TO _ INSTANTIATE _ EXCEPTION _ MESSAGE = " Unable to instantiate " ; <nl> + <nl> / * * A list of package names to prepend to class names * / <nl> private final Set < String > packages ; <nl> <nl> @ @ - 85 , 7 + 91 , 7 @ @ class PackageObjectFactory implements ModuleFactory { <nl> return createObject ( name ) ; <nl> } <nl> catch ( final CheckstyleException ex ) { <nl> - LOG . debug ( " Keep looking , ignoring exception " , ex ) ; <nl> + LOG . debug ( IGNORING _ EXCEPTION _ MESSAGE , ex ) ; <nl> } <nl> <nl> / / now try packages <nl> @ @ - 96 , 11 + 102 , 11 @ @ class PackageObjectFactory implements ModuleFactory { <nl> return createObject ( className ) ; <nl> } <nl> catch ( final CheckstyleException ex ) { <nl> - LOG . debug ( " Keep looking , ignoring exception " , ex ) ; <nl> + LOG . debug ( IGNORING _ EXCEPTION _ MESSAGE , ex ) ; <nl> } <nl> } <nl> <nl> - throw new CheckstyleException ( " Unable to instantiate " + name ) ; <nl> + throw new CheckstyleException ( UNABLE _ TO _ INSTANTIATE _ EXCEPTION _ MESSAGE + name ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 145 , 7 + 151 , 7 @ @ class PackageObjectFactory implements ModuleFactory { <nl> } <nl> catch ( final CheckstyleException ex2 ) { <nl> throw new CheckstyleException ( <nl> - " Unable to instantiate " + name , ex2 ) ; <nl> + UNABLE _ TO _ INSTANTIATE _ EXCEPTION _ MESSAGE + name , ex2 ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java b / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java <nl> index 1856cf4 . . dba9f6b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java <nl> @ @ - 53 , 6 + 53 , 12 @ @ public final class Utils { <nl> / * * Array of all token IDs * / <nl> private static final int [ ] TOKEN _ IDS ; <nl> <nl> + / * * Prefix for exception when getting token by given id . * / <nl> + private static final String TOKEN _ ID _ EXCEPTION _ PREFIX = " given id " ; <nl> + <nl> + / * * Prefix for exception when getting token by given name . * / <nl> + private static final String TOKEN _ NAME _ EXCEPTION _ PREFIX = " given name " ; <nl> + <nl> / / initialise the constants <nl> static { <nl> final ImmutableMap . Builder < String , Integer > builder = <nl> @ @ - 297 , 11 + 303 , 11 @ @ public final class Utils { <nl> * / <nl> public static String getTokenName ( int iD ) { <nl> if ( iD > TOKEN _ VALUE _ TO _ NAME . length - 1 ) { <nl> - throw new IllegalArgumentException ( " given id " + iD ) ; <nl> + throw new IllegalArgumentException ( TOKEN _ ID _ EXCEPTION _ PREFIX + iD ) ; <nl> } <nl> final String name = TOKEN _ VALUE _ TO _ NAME [ iD ] ; <nl> if ( name = = null ) { <nl> - throw new IllegalArgumentException ( " given id " + iD ) ; <nl> + throw new IllegalArgumentException ( TOKEN _ ID _ EXCEPTION _ PREFIX + iD ) ; <nl> } <nl> return name ; <nl> } <nl> @ @ - 314 , 7 + 320 , 7 @ @ public final class Utils { <nl> public static int getTokenId ( String name ) { <nl> final Integer id = TOKEN _ NAME _ TO _ VALUE . get ( name ) ; <nl> if ( id = = null ) { <nl> - throw new IllegalArgumentException ( " given name " + name ) ; <nl> + throw new IllegalArgumentException ( TOKEN _ NAME _ EXCEPTION _ PREFIX + name ) ; <nl> } <nl> return id ; <nl> } <nl> @ @ - 326 , 7 + 332 , 7 @ @ public final class Utils { <nl> * / <nl> public static String getShortDescription ( String name ) { <nl> if ( ! TOKEN _ NAME _ TO _ VALUE . containsKey ( name ) ) { <nl> - throw new IllegalArgumentException ( " given name " + name ) ; <nl> + throw new IllegalArgumentException ( TOKEN _ NAME _ EXCEPTION _ PREFIX + name ) ; <nl> } <nl> <nl> final String tokentypes = <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheck . java <nl> index b1fb2bf . . 1e3ec59 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheck . java <nl> @ @ - 99 , 7 + 99 , 7 @ @ public class MultipleVariableDeclarationsCheck extends Check { <nl> / / variable scope . Refer Feature Request Id - 2895985 <nl> / / for more details <nl> if ( ast . getParent ( ) . getType ( ) ! = TokenTypes . FOR _ INIT ) { <nl> - log ( firstNode , " multiple . variable . declarations . comma " ) ; <nl> + log ( firstNode , MSG _ MULTIPLE _ COMMA ) ; <nl> } <nl> return ; <nl> } <nl> @ @ - 108 , 7 + 108 , 7 @ @ public class MultipleVariableDeclarationsCheck extends Check { <nl> final DetailAST firstNextNode = CheckUtils . getFirstNode ( nextNode ) ; <nl> <nl> if ( firstNextNode . getLineNo ( ) = = lastNode . getLineNo ( ) ) { <nl> - log ( firstNode , " multiple . variable . declarations " ) ; <nl> + log ( firstNode , MSG _ MULTIPLE ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index 6a803ce . . f6de633 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 141 , 7 + 141 , 7 @ @ public class RequireThisCheck extends AbstractDeclarationCollector { <nl> case TokenTypes . METHOD _ CALL : <nl> / / let ' s check method calls <nl> if ( checkMethods & & isClassMethod ( ast . getText ( ) ) ) { <nl> - log ( ast , " require . this . method " , ast . getText ( ) ) ; <nl> + log ( ast , MSG _ METHOD , ast . getText ( ) ) ; <nl> } <nl> break ; <nl> default : <nl> @ @ - 182 , 7 + 182 , 7 @ @ public class RequireThisCheck extends AbstractDeclarationCollector { <nl> <nl> final String name = ast . getText ( ) ; <nl> if ( isClassField ( name ) ) { <nl> - log ( ast , " require . this . variable " , name ) ; <nl> + log ( ast , MSG _ VARIABLE , name ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> index 823be34 . . ae69465 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> @ @ - 270 , 8 + 270 , 30 @ @ public class VisibilityModifierCheck <nl> " com . google . common . annotations . VisibleForTesting " <nl> ) ; <nl> <nl> + / * * Name for ' public ' access modifier . * / <nl> + private static final String PUBLIC _ ACCESS _ MODIFIER = " public " ; <nl> + <nl> + / * * Name for ' private ' access modifier . * / <nl> + private static final String PRIVATE _ ACCESS _ MODIFIER = " private " ; <nl> + <nl> + / * * Name for ' protected ' access modifier . * / <nl> + private static final String PROTECTED _ ACCESS _ MODIFIER = " protected " ; <nl> + <nl> + / * * Name for implicit ' package ' access modifier . * / <nl> + private static final String PACKAGE _ ACCESS _ MODIFIER = " package " ; <nl> + <nl> + / * * Name for ' static ' keyword . * / <nl> + private static final String STATIC _ KEYWORD = " static " ; <nl> + <nl> + / * * Name for ' final ' keyword . * / <nl> + private static final String FINAL _ KEYWORD = " final " ; <nl> + <nl> / * * Contains explicit access modifiers . * / <nl> - private static final String [ ] EXPLICIT _ MODS = { " public " , " private " , " protected " } ; <nl> + private static final String [ ] EXPLICIT _ MODS = { <nl> + PUBLIC _ ACCESS _ MODIFIER , <nl> + PRIVATE _ ACCESS _ MODIFIER , <nl> + PROTECTED _ ACCESS _ MODIFIER , <nl> + } ; <nl> <nl> / * * Whether protected members are allowed * / <nl> private boolean protectedAllowed ; <nl> @ @ - 513 , 11 + 535 , 11 @ @ public class VisibilityModifierCheck <nl> <nl> final String variableScope = getVisibilityScope ( variableDef ) ; <nl> <nl> - if ( ! " private " . equals ( variableScope ) ) { <nl> + if ( ! PRIVATE _ ACCESS _ MODIFIER . equals ( variableScope ) ) { <nl> result = <nl> isStaticFinalVariable ( variableDef ) <nl> - | | packageAllowed & & " package " . equals ( variableScope ) <nl> - | | protectedAllowed & & " protected " . equals ( variableScope ) <nl> + | | packageAllowed & & PACKAGE _ ACCESS _ MODIFIER . equals ( variableScope ) <nl> + | | protectedAllowed & & PROTECTED _ ACCESS _ MODIFIER . equals ( variableScope ) <nl> | | isIgnoredPublicMember ( variableName , variableScope ) <nl> | | allowPublicImmutableFields <nl> & & isImmutableFieldDefinedInFinalClass ( variableDef ) ; <nl> @ @ - 533 , 7 + 555 , 8 @ @ public class VisibilityModifierCheck <nl> * / <nl> private static boolean isStaticFinalVariable ( DetailAST variableDef ) { <nl> final Set < String > modifiers = getModifiers ( variableDef ) ; <nl> - return modifiers . contains ( " static " ) & & modifiers . contains ( " final " ) ; <nl> + return modifiers . contains ( STATIC _ KEYWORD ) <nl> + & & modifiers . contains ( FINAL _ KEYWORD ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 543 , 7 + 566 , 7 @ @ public class VisibilityModifierCheck <nl> * @ return true if variable belongs to public members that should be ignored . <nl> * / <nl> private boolean isIgnoredPublicMember ( String variableName , String variableScope ) { <nl> - return " public " . equals ( variableScope ) <nl> + return PUBLIC _ ACCESS _ MODIFIER . equals ( variableScope ) <nl> & & publicMemberPattern . matcher ( variableName ) . find ( ) ; <nl> } <nl> <nl> @ @ - 555 , 7 + 578 , 7 @ @ public class VisibilityModifierCheck <nl> private boolean isImmutableFieldDefinedInFinalClass ( DetailAST variableDef ) { <nl> final DetailAST classDef = variableDef . getParent ( ) . getParent ( ) ; <nl> final Set < String > classModifiers = getModifiers ( classDef ) ; <nl> - return classModifiers . contains ( " final " ) & & isImmutableField ( variableDef ) ; <nl> + return classModifiers . contains ( FINAL _ KEYWORD ) & & isImmutableField ( variableDef ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 584 , 7 + 607 , 7 @ @ public class VisibilityModifierCheck <nl> * / <nl> private static String getVisibilityScope ( DetailAST variableDef ) { <nl> final Set < String > modifiers = getModifiers ( variableDef ) ; <nl> - String accessModifier = " package " ; <nl> + String accessModifier = PACKAGE _ ACCESS _ MODIFIER ; <nl> for ( final String modifier : EXPLICIT _ MODS ) { <nl> if ( modifiers . contains ( modifier ) ) { <nl> accessModifier = modifier ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> index c07bbaf . . b90dc3c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java <nl> @ @ - 45 , 6 + 45 , 18 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { <nl> / * * Empty array to avoid instantiations . * / <nl> private static final int [ ] EMPTY _ INT _ ARRAY = new int [ 0 ] ; <nl> <nl> + / * * <nl> + * A key is pointing to the warning message text in " messages . properties " <nl> + * file . <nl> + * / <nl> + private static final String MSG _ HEADER _ MISSING = " header . missing " ; <nl> + <nl> + / * * <nl> + * A key is pointing to the warning message text in " messages . properties " <nl> + * file . <nl> + * / <nl> + private static final String MSG _ HEADER _ MISMATCH = " header . mismatch " ; <nl> + <nl> / * * The compiled regular expressions * / <nl> private final List < Pattern > headerRegexps = Lists . newArrayList ( ) ; <nl> <nl> @ @ - 72 , 7 + 84 , 7 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { <nl> final int fileSize = lines . size ( ) ; <nl> <nl> if ( headerSize - multiLines . length > fileSize ) { <nl> - log ( 1 , " header . missing " ) ; <nl> + log ( 1 , MSG _ HEADER _ MISSING ) ; <nl> } <nl> else { <nl> int headerLineNo = 0 ; <nl> @ @ - 86 , 7 + 98 , 7 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { <nl> | | isMatch ( line , headerLineNo ) ; <nl> } <nl> if ( ! isMatch ) { <nl> - log ( i + 1 , " header . mismatch " , getHeaderLines ( ) . get ( <nl> + log ( i + 1 , MSG _ HEADER _ MISMATCH , getHeaderLines ( ) . get ( <nl> headerLineNo ) ) ; <nl> break ; <nl> } <nl> @ @ - 99 , 7 + 111 , 7 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { <nl> / / header isn ' t completed <nl> for ( ; headerLineNo < headerSize ; headerLineNo + + ) { <nl> if ( ! isMultiLine ( headerLineNo ) ) { <nl> - log ( 1 , " header . missing " ) ; <nl> + log ( 1 , MSG _ HEADER _ MISSING ) ; <nl> break ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 index 4a876dd . . 4d3e39c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 @ @ - 410 , 13 + 410 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck { 
 } 
 
 / * * 
 - * The JavadocMethodCheck is about to report a missing Javadoc . 
 - * This hook can be used by derived classes to allow a missing javadoc 
 - * in some situations . The default implementation checks 
 - * { @ code allowMissingJavadoc } and 
 - * { @ code allowMissingPropertyJavadoc } properties , do not forget 
 - * to call { @ code super . isMissingJavadocAllowed ( ast ) } in case 
 - * you want to keep this logic . 
 + * Checks if a missing Javadoc is allowed by the check ' s configuration . 
 * @ param ast the tree node for the method or constructor . 
 * @ return True if this method or constructor doesn ' t need Javadoc . 
 * /

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 index ae8513a . . 55691c7 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / ConfigurationLoader . java 
 @ @ - 89 , 6 + 89 , 13 @ @ public final class ConfigurationLoader { 
 private static final String DTD _ RESOURCE _ NAME _ 1 _ 3 = 
 " com / puppycrawl / tools / checkstyle / configuration _ 1 _ 3 . dtd " ; 
 
 + / * * Prefix for the exception when unable to find resource . * / 
 + private static final String UNABLE _ TO _ FIND _ EXCEPTION _ PREFIX = " unable to find " ; 
 + 
 + / * * Prefix for the exception when unable to parse resource . * / 
 + private static final String UNABLE _ TO _ PARSE _ EXCEPTION _ PREFIX = " unable to parse " 
 + + " configuration stream " ; 
 + 
 / * * The SAX document handler * / 
 private final InternalLoader saxHandler ; 
 
 @ @ - 192 , 12 + 199 , 12 @ @ public final class ConfigurationLoader { 
 final URL configUrl = ConfigurationLoader . class 
 . getResource ( config ) ; 
 if ( configUrl = = null ) { 
 - throw new CheckstyleException ( " unable to find " + config ) ; 
 + throw new CheckstyleException ( UNABLE _ TO _ FIND _ EXCEPTION _ PREFIX + config ) ; 
 } 
 uri = configUrl . toURI ( ) ; 
 } 
 catch ( final URISyntaxException e ) { 
 - throw new CheckstyleException ( " unable to find " + config , e ) ; 
 + throw new CheckstyleException ( UNABLE _ TO _ FIND _ EXCEPTION _ PREFIX + config , e ) ; 
 } 
 } 
 } 
 @ @ - 254 , 12 + 261 , 12 @ @ public final class ConfigurationLoader { 
 return loader . configuration ; 
 } 
 catch ( final SAXParseException e ) { 
 - throw new CheckstyleException ( " unable to parse configuration stream " 
 + throw new CheckstyleException ( UNABLE _ TO _ PARSE _ EXCEPTION _ PREFIX 
 + " - " + e . getMessage ( ) + " : " + e . getLineNumber ( ) 
 + " : " + e . getColumnNumber ( ) , e ) ; 
 } 
 catch ( final ParserConfigurationException | IOException | SAXException e ) { 
 - throw new CheckstyleException ( " unable to parse configuration stream " , e ) ; 
 + throw new CheckstyleException ( UNABLE _ TO _ PARSE _ EXCEPTION _ PREFIX , e ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 index 498ae4e . . 745e292 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / DefaultLogger . java 
 @ @ - 46 , 6 + 46 , 9 @ @ public class DefaultLogger 
 / * * Cushion for avoiding StringBuffer . expandCapacity * / 
 private static final int BUFFER _ CUSHION = 12 ; 
 
 + / * * Encoding name . * / 
 + private static final String UTF8 _ CHARSET _ NAME = " UTF - 8 " ; 
 + 
 / * * Where to write info messages * * / 
 private final PrintWriter infoWriter ; 
 / * * Close info stream after use * / 
 @ @ - 83 , 8 + 86 , 8 @ @ public class DefaultLogger 
 boolean closeErrorAfterUse ) throws UnsupportedEncodingException { 
 closeInfo = closeInfoAfterUse ; 
 closeError = closeErrorAfterUse ; 
 - final Writer infoStreamWriter = new OutputStreamWriter ( infoStream , " UTF - 8 " ) ; 
 - final Writer errorStreamWriter = new OutputStreamWriter ( errorStream , " UTF - 8 " ) ; 
 + final Writer infoStreamWriter = new OutputStreamWriter ( infoStream , UTF8 _ CHARSET _ NAME ) ; 
 + final Writer errorStreamWriter = new OutputStreamWriter ( errorStream , UTF8 _ CHARSET _ NAME ) ; 
 infoWriter = new PrintWriter ( infoStreamWriter ) ; 
 
 if ( infoStream = = errorStream ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 index 1b860fa . . 3a81caa 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Main . java 
 @ @ - 52 , 6 + 52 , 27 @ @ public final class Main { 
 / * * Exit code returned when excecution finishes with { @ link CheckstyleException } * / 
 private static final int EXIT _ WITH _ CHECKSTYLE _ EXCEPTION _ CODE = - 2 ; 
 
 + / * * Name for the option ' v ' . * / 
 + private static final String OPTION _ V _ NAME = " v " ; 
 + 
 + / * * Name for the option ' c ' . * / 
 + private static final String OPTION _ C _ NAME = " c " ; 
 + 
 + / * * Name for the option ' f ' . * / 
 + private static final String OPTION _ F _ NAME = " f " ; 
 + 
 + / * * Name for the option ' p ' . * / 
 + private static final String OPTION _ P _ NAME = " p " ; 
 + 
 + / * * Name for the option ' o ' . * / 
 + private static final String OPTION _ O _ NAME = " o " ; 
 + 
 + / * * Name for ' xml ' format . * / 
 + private static final String XML _ FORMAT _ NAME = " xml " ; 
 + 
 + / * * Name for ' plain ' format . * / 
 + private static final String PLAIN _ FORMAT _ NAME = " plain " ; 
 + 
 / * * Don ' t create instance of this class , use { @ link # main ( String [ ] ) } method instead . * / 
 private Main ( ) { 
 } 
 @ @ - 76 , 7 + 97 , 7 @ @ public final class Main { 
 final CommandLine commandLine = parseCli ( args ) ; 
 
 / / show version and exit if it is requested 
 - if ( commandLine . hasOption ( " v " ) ) { 
 + if ( commandLine . hasOption ( OPTION _ V _ NAME ) ) { 
 System . out . println ( " Checkstyle version : " 
 + Main . class . getPackage ( ) . getImplementationVersion ( ) ) ; 
 exitStatus = 0 ; 
 @ @ - 149 , 24 + 170 , 25 @ @ public final class Main { 
 private static List < String > validateCli ( CommandLine cmdLine ) { 
 final List < String > result = new ArrayList < > ( ) ; 
 / / ensure a configuration file is specified 
 - if ( cmdLine . hasOption ( " c " ) ) { 
 + if ( cmdLine . hasOption ( OPTION _ C _ NAME ) ) { 
 / / validate optional parameters 
 - if ( cmdLine . hasOption ( " f " ) ) { 
 - final String format = cmdLine . getOptionValue ( " f " ) ; 
 - if ( ! " plain " . equals ( format ) & & ! " xml " . equals ( format ) ) { 
 + if ( cmdLine . hasOption ( OPTION _ F _ NAME ) ) { 
 + final String format = cmdLine . getOptionValue ( OPTION _ F _ NAME ) ; 
 + if ( ! PLAIN _ FORMAT _ NAME . equals ( format ) & & ! XML _ FORMAT _ NAME . equals ( format ) ) { 
 result . add ( String . format ( " Invalid output format . " 
 - + " Found ' % s ' but expected ' plain ' or ' xml ' . " , format ) ) ; 
 + + " Found ' % s ' but expected ' % s ' or ' % s ' . " , 
 + format , PLAIN _ FORMAT _ NAME , XML _ FORMAT _ NAME ) ) ; 
 } 
 } 
 - if ( cmdLine . hasOption ( " p " ) ) { 
 - final String propertiesLocation = cmdLine . getOptionValue ( " p " ) ; 
 + if ( cmdLine . hasOption ( OPTION _ P _ NAME ) ) { 
 + final String propertiesLocation = cmdLine . getOptionValue ( OPTION _ P _ NAME ) ; 
 final File file = new File ( propertiesLocation ) ; 
 if ( ! file . exists ( ) ) { 
 result . add ( String . format ( " Could not find file ' % s ' . " , propertiesLocation ) ) ; 
 } 
 } 
 - if ( cmdLine . hasOption ( " o " ) ) { 
 - final String outputLocation = cmdLine . getOptionValue ( " o " ) ; 
 + if ( cmdLine . hasOption ( OPTION _ O _ NAME ) ) { 
 + final String outputLocation = cmdLine . getOptionValue ( OPTION _ O _ NAME ) ; 
 final File file = new File ( outputLocation ) ; 
 if ( file . exists ( ) & & ! file . canWrite ( ) ) { 
 result . add ( String . format ( " Permission denied : ' % s ' . " , outputLocation ) ) ; 
 @ @ - 191 , 13 + 213 , 13 @ @ public final class Main { 
 * / 
 private static CliOptions convertCliToPojo ( CommandLine cmdLine ) { 
 final CliOptions conf = new CliOptions ( ) ; 
 - conf . format = cmdLine . getOptionValue ( " f " ) ; 
 + conf . format = cmdLine . getOptionValue ( OPTION _ F _ NAME ) ; 
 if ( conf . format = = null ) { 
 - conf . format = " plain " ; 
 + conf . format = PLAIN _ FORMAT _ NAME ; 
 } 
 - conf . outputLocation = cmdLine . getOptionValue ( " o " ) ; 
 - conf . configLocation = cmdLine . getOptionValue ( " c " ) ; 
 - conf . propertiesLocation = cmdLine . getOptionValue ( " p " ) ; 
 + conf . outputLocation = cmdLine . getOptionValue ( OPTION _ O _ NAME ) ; 
 + conf . configLocation = cmdLine . getOptionValue ( OPTION _ C _ NAME ) ; 
 + conf . propertiesLocation = cmdLine . getOptionValue ( OPTION _ P _ NAME ) ; 
 conf . files = getFilesToProcess ( cmdLine . getArgs ( ) ) ; 
 return conf ; 
 } 
 @ @ - 310 , 11 + 332 , 11 @ @ public final class Main { 
 
 / / setup a listener 
 AuditListener listener ; 
 - if ( " xml " . equals ( format ) ) { 
 + if ( XML _ FORMAT _ NAME . equals ( format ) ) { 
 listener = new XMLLogger ( out , closeOutputStream ) ; 
 
 } 
 - else if ( " plain " . equals ( format ) ) { 
 + else if ( PLAIN _ FORMAT _ NAME . equals ( format ) ) { 
 listener = new DefaultLogger ( out , closeOutputStream ) ; 
 
 } 
 @ @ - 322 , 8 + 344 , 9 @ @ public final class Main { 
 if ( closeOutputStream ) { 
 Utils . close ( out ) ; 
 } 
 - throw new IllegalStateException ( " Invalid output format . Found ' " + format 
 - + " ' but expected ' plain ' or ' xml ' . " ) ; 
 + throw new IllegalStateException ( String . format ( 
 + " Invalid output format . Found ' % s ' but expected ' % s ' or ' % s ' . " , 
 + format , PLAIN _ FORMAT _ NAME , XML _ FORMAT _ NAME ) ) ; 
 } 
 
 return listener ; 
 @ @ - 386 , 11 + 409 , 13 @ @ public final class Main { 
 * / 
 private static Options buildOptions ( ) { 
 final Options options = new Options ( ) ; 
 - options . addOption ( " c " , true , " Sets the check configuration file to use . " ) ; 
 - options . addOption ( " o " , true , " Sets the output file . Defaults to stdout " ) ; 
 - options . addOption ( " p " , true , " Loads the properties file " ) ; 
 - options . addOption ( " f " , true , " Sets the output format . ( plain | xml ) . Defaults to plain " ) ; 
 - options . addOption ( " v " , false , " Print product version and exit " ) ; 
 + options . addOption ( OPTION _ C _ NAME , true , " Sets the check configuration file to use . " ) ; 
 + options . addOption ( OPTION _ O _ NAME , true , " Sets the output file . Defaults to stdout " ) ; 
 + options . addOption ( OPTION _ P _ NAME , true , " Loads the properties file " ) ; 
 + options . addOption ( OPTION _ F _ NAME , true , String . format ( 
 + " Sets the output format . ( % s | % s ) . Defaults to % s " , 
 + PLAIN _ FORMAT _ NAME , XML _ FORMAT _ NAME , PLAIN _ FORMAT _ NAME ) ) ; 
 + options . addOption ( OPTION _ V _ NAME , false , " Print product version and exit " ) ; 
 return options ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 index 1635a6e . . 19eab7f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 @ @ - 37 , 6 + 37 , 12 @ @ class PackageObjectFactory implements ModuleFactory { 
 / * * Logger for PackageObjectFactory . * / 
 private static final Log LOG = LogFactory . getLog ( PackageObjectFactory . class ) ; 
 
 + / * * Log message when ignoring exception . * / 
 + private static final String IGNORING _ EXCEPTION _ MESSAGE = " Keep looking , ignoring exception " ; 
 + 
 + / * * Exception message when it is unable to create a class instance . * / 
 + private static final String UNABLE _ TO _ INSTANTIATE _ EXCEPTION _ MESSAGE = " Unable to instantiate " ; 
 + 
 / * * A list of package names to prepend to class names * / 
 private final Set < String > packages ; 
 
 @ @ - 85 , 7 + 91 , 7 @ @ class PackageObjectFactory implements ModuleFactory { 
 return createObject ( name ) ; 
 } 
 catch ( final CheckstyleException ex ) { 
 - LOG . debug ( " Keep looking , ignoring exception " , ex ) ; 
 + LOG . debug ( IGNORING _ EXCEPTION _ MESSAGE , ex ) ; 
 } 
 
 / / now try packages 
 @ @ - 96 , 11 + 102 , 11 @ @ class PackageObjectFactory implements ModuleFactory { 
 return createObject ( className ) ; 
 } 
 catch ( final CheckstyleException ex ) { 
 - LOG . debug ( " Keep looking , ignoring exception " , ex ) ; 
 + LOG . debug ( IGNORING _ EXCEPTION _ MESSAGE , ex ) ; 
 } 
 } 
 
 - throw new CheckstyleException ( " Unable to instantiate " + name ) ; 
 + throw new CheckstyleException ( UNABLE _ TO _ INSTANTIATE _ EXCEPTION _ MESSAGE + name ) ; 
 } 
 
 / * * 
 @ @ - 145 , 7 + 151 , 7 @ @ class PackageObjectFactory implements ModuleFactory { 
 } 
 catch ( final CheckstyleException ex2 ) { 
 throw new CheckstyleException ( 
 - " Unable to instantiate " + name , ex2 ) ; 
 + UNABLE _ TO _ INSTANTIATE _ EXCEPTION _ MESSAGE + name , ex2 ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java b / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java 
 index 1856cf4 . . dba9f6b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / Utils . java 
 @ @ - 53 , 6 + 53 , 12 @ @ public final class Utils { 
 / * * Array of all token IDs * / 
 private static final int [ ] TOKEN _ IDS ; 
 
 + / * * Prefix for exception when getting token by given id . * / 
 + private static final String TOKEN _ ID _ EXCEPTION _ PREFIX = " given id " ; 
 + 
 + / * * Prefix for exception when getting token by given name . * / 
 + private static final String TOKEN _ NAME _ EXCEPTION _ PREFIX = " given name " ; 
 + 
 / / initialise the constants 
 static { 
 final ImmutableMap . Builder < String , Integer > builder = 
 @ @ - 297 , 11 + 303 , 11 @ @ public final class Utils { 
 * / 
 public static String getTokenName ( int iD ) { 
 if ( iD > TOKEN _ VALUE _ TO _ NAME . length - 1 ) { 
 - throw new IllegalArgumentException ( " given id " + iD ) ; 
 + throw new IllegalArgumentException ( TOKEN _ ID _ EXCEPTION _ PREFIX + iD ) ; 
 } 
 final String name = TOKEN _ VALUE _ TO _ NAME [ iD ] ; 
 if ( name = = null ) { 
 - throw new IllegalArgumentException ( " given id " + iD ) ; 
 + throw new IllegalArgumentException ( TOKEN _ ID _ EXCEPTION _ PREFIX + iD ) ; 
 } 
 return name ; 
 } 
 @ @ - 314 , 7 + 320 , 7 @ @ public final class Utils { 
 public static int getTokenId ( String name ) { 
 final Integer id = TOKEN _ NAME _ TO _ VALUE . get ( name ) ; 
 if ( id = = null ) { 
 - throw new IllegalArgumentException ( " given name " + name ) ; 
 + throw new IllegalArgumentException ( TOKEN _ NAME _ EXCEPTION _ PREFIX + name ) ; 
 } 
 return id ; 
 } 
 @ @ - 326 , 7 + 332 , 7 @ @ public final class Utils { 
 * / 
 public static String getShortDescription ( String name ) { 
 if ( ! TOKEN _ NAME _ TO _ VALUE . containsKey ( name ) ) { 
 - throw new IllegalArgumentException ( " given name " + name ) ; 
 + throw new IllegalArgumentException ( TOKEN _ NAME _ EXCEPTION _ PREFIX + name ) ; 
 } 
 
 final String tokentypes = 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheck . java 
 index b1fb2bf . . 1e3ec59 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / MultipleVariableDeclarationsCheck . java 
 @ @ - 99 , 7 + 99 , 7 @ @ public class MultipleVariableDeclarationsCheck extends Check { 
 / / variable scope . Refer Feature Request Id - 2895985 
 / / for more details 
 if ( ast . getParent ( ) . getType ( ) ! = TokenTypes . FOR _ INIT ) { 
 - log ( firstNode , " multiple . variable . declarations . comma " ) ; 
 + log ( firstNode , MSG _ MULTIPLE _ COMMA ) ; 
 } 
 return ; 
 } 
 @ @ - 108 , 7 + 108 , 7 @ @ public class MultipleVariableDeclarationsCheck extends Check { 
 final DetailAST firstNextNode = CheckUtils . getFirstNode ( nextNode ) ; 
 
 if ( firstNextNode . getLineNo ( ) = = lastNode . getLineNo ( ) ) { 
 - log ( firstNode , " multiple . variable . declarations " ) ; 
 + log ( firstNode , MSG _ MULTIPLE ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index 6a803ce . . f6de633 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 141 , 7 + 141 , 7 @ @ public class RequireThisCheck extends AbstractDeclarationCollector { 
 case TokenTypes . METHOD _ CALL : 
 / / let ' s check method calls 
 if ( checkMethods & & isClassMethod ( ast . getText ( ) ) ) { 
 - log ( ast , " require . this . method " , ast . getText ( ) ) ; 
 + log ( ast , MSG _ METHOD , ast . getText ( ) ) ; 
 } 
 break ; 
 default : 
 @ @ - 182 , 7 + 182 , 7 @ @ public class RequireThisCheck extends AbstractDeclarationCollector { 
 
 final String name = ast . getText ( ) ; 
 if ( isClassField ( name ) ) { 
 - log ( ast , " require . this . variable " , name ) ; 
 + log ( ast , MSG _ VARIABLE , name ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 index 823be34 . . ae69465 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 @ @ - 270 , 8 + 270 , 30 @ @ public class VisibilityModifierCheck 
 " com . google . common . annotations . VisibleForTesting " 
 ) ; 
 
 + / * * Name for ' public ' access modifier . * / 
 + private static final String PUBLIC _ ACCESS _ MODIFIER = " public " ; 
 + 
 + / * * Name for ' private ' access modifier . * / 
 + private static final String PRIVATE _ ACCESS _ MODIFIER = " private " ; 
 + 
 + / * * Name for ' protected ' access modifier . * / 
 + private static final String PROTECTED _ ACCESS _ MODIFIER = " protected " ; 
 + 
 + / * * Name for implicit ' package ' access modifier . * / 
 + private static final String PACKAGE _ ACCESS _ MODIFIER = " package " ; 
 + 
 + / * * Name for ' static ' keyword . * / 
 + private static final String STATIC _ KEYWORD = " static " ; 
 + 
 + / * * Name for ' final ' keyword . * / 
 + private static final String FINAL _ KEYWORD = " final " ; 
 + 
 / * * Contains explicit access modifiers . * / 
 - private static final String [ ] EXPLICIT _ MODS = { " public " , " private " , " protected " } ; 
 + private static final String [ ] EXPLICIT _ MODS = { 
 + PUBLIC _ ACCESS _ MODIFIER , 
 + PRIVATE _ ACCESS _ MODIFIER , 
 + PROTECTED _ ACCESS _ MODIFIER , 
 + } ; 
 
 / * * Whether protected members are allowed * / 
 private boolean protectedAllowed ; 
 @ @ - 513 , 11 + 535 , 11 @ @ public class VisibilityModifierCheck 
 
 final String variableScope = getVisibilityScope ( variableDef ) ; 
 
 - if ( ! " private " . equals ( variableScope ) ) { 
 + if ( ! PRIVATE _ ACCESS _ MODIFIER . equals ( variableScope ) ) { 
 result = 
 isStaticFinalVariable ( variableDef ) 
 - | | packageAllowed & & " package " . equals ( variableScope ) 
 - | | protectedAllowed & & " protected " . equals ( variableScope ) 
 + | | packageAllowed & & PACKAGE _ ACCESS _ MODIFIER . equals ( variableScope ) 
 + | | protectedAllowed & & PROTECTED _ ACCESS _ MODIFIER . equals ( variableScope ) 
 | | isIgnoredPublicMember ( variableName , variableScope ) 
 | | allowPublicImmutableFields 
 & & isImmutableFieldDefinedInFinalClass ( variableDef ) ; 
 @ @ - 533 , 7 + 555 , 8 @ @ public class VisibilityModifierCheck 
 * / 
 private static boolean isStaticFinalVariable ( DetailAST variableDef ) { 
 final Set < String > modifiers = getModifiers ( variableDef ) ; 
 - return modifiers . contains ( " static " ) & & modifiers . contains ( " final " ) ; 
 + return modifiers . contains ( STATIC _ KEYWORD ) 
 + & & modifiers . contains ( FINAL _ KEYWORD ) ; 
 } 
 
 / * * 
 @ @ - 543 , 7 + 566 , 7 @ @ public class VisibilityModifierCheck 
 * @ return true if variable belongs to public members that should be ignored . 
 * / 
 private boolean isIgnoredPublicMember ( String variableName , String variableScope ) { 
 - return " public " . equals ( variableScope ) 
 + return PUBLIC _ ACCESS _ MODIFIER . equals ( variableScope ) 
 & & publicMemberPattern . matcher ( variableName ) . find ( ) ; 
 } 
 
 @ @ - 555 , 7 + 578 , 7 @ @ public class VisibilityModifierCheck 
 private boolean isImmutableFieldDefinedInFinalClass ( DetailAST variableDef ) { 
 final DetailAST classDef = variableDef . getParent ( ) . getParent ( ) ; 
 final Set < String > classModifiers = getModifiers ( classDef ) ; 
 - return classModifiers . contains ( " final " ) & & isImmutableField ( variableDef ) ; 
 + return classModifiers . contains ( FINAL _ KEYWORD ) & & isImmutableField ( variableDef ) ; 
 } 
 
 / * * 
 @ @ - 584 , 7 + 607 , 7 @ @ public class VisibilityModifierCheck 
 * / 
 private static String getVisibilityScope ( DetailAST variableDef ) { 
 final Set < String > modifiers = getModifiers ( variableDef ) ; 
 - String accessModifier = " package " ; 
 + String accessModifier = PACKAGE _ ACCESS _ MODIFIER ; 
 for ( final String modifier : EXPLICIT _ MODS ) { 
 if ( modifiers . contains ( modifier ) ) { 
 accessModifier = modifier ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 index c07bbaf . . b90dc3c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheck . java 
 @ @ - 45 , 6 + 45 , 18 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { 
 / * * Empty array to avoid instantiations . * / 
 private static final int [ ] EMPTY _ INT _ ARRAY = new int [ 0 ] ; 
 
 + / * * 
 + * A key is pointing to the warning message text in " messages . properties " 
 + * file . 
 + * / 
 + private static final String MSG _ HEADER _ MISSING = " header . missing " ; 
 + 
 + / * * 
 + * A key is pointing to the warning message text in " messages . properties " 
 + * file . 
 + * / 
 + private static final String MSG _ HEADER _ MISMATCH = " header . mismatch " ; 
 + 
 / * * The compiled regular expressions * / 
 private final List < Pattern > headerRegexps = Lists . newArrayList ( ) ; 
 
 @ @ - 72 , 7 + 84 , 7 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { 
 final int fileSize = lines . size ( ) ; 
 
 if ( headerSize - multiLines . length > fileSize ) { 
 - log ( 1 , " header . missing " ) ; 
 + log ( 1 , MSG _ HEADER _ MISSING ) ; 
 } 
 else { 
 int headerLineNo = 0 ; 
 @ @ - 86 , 7 + 98 , 7 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { 
 | | isMatch ( line , headerLineNo ) ; 
 } 
 if ( ! isMatch ) { 
 - log ( i + 1 , " header . mismatch " , getHeaderLines ( ) . get ( 
 + log ( i + 1 , MSG _ HEADER _ MISMATCH , getHeaderLines ( ) . get ( 
 headerLineNo ) ) ; 
 break ; 
 } 
 @ @ - 99 , 7 + 111 , 7 @ @ public class RegexpHeaderCheck extends AbstractHeaderCheck { 
 / / header isn ' t completed 
 for ( ; headerLineNo < headerSize ; headerLineNo + + ) { 
 if ( ! isMultiLine ( headerLineNo ) ) { 
 - log ( 1 , " header . missing " ) ; 
 + log ( 1 , MSG _ HEADER _ MISSING ) ; 
 break ; 
 } 
 }
