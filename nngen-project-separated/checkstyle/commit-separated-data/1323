BLEU SCORE: 0.06786053138365654

TEST MSG: Issue # 2783 : UTs should be launched in default locale
GENERATED MSG: Issue # 2109 : CLI should print a file name where exception is happen

TEST DIFF (one line): diff - - git a / . travis . yml b / . travis . yml <nl> index 685490a . . 595be2e 100644 <nl> - - - a / . travis . yml <nl> + + + b / . travis . yml <nl> @ @ - 227 , 7 + 227 , 25 @ @ matrix : <nl> - COVERAGE _ CMD = " " <nl> # unit tests in German locale ( oraclejdk8 ) <nl> - jdk : oraclejdk8 <nl> - env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = de - Duser . country = DE ' " COVERAGE _ CMD = " " <nl> + env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = de - Duser . country = DE - XX : - UseSplitVerifier ' " COVERAGE _ CMD = " " <nl> + # unit tests in Spanish locale ( oraclejdk8 ) <nl> + - jdk : oraclejdk8 <nl> + env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = es - Duser . country = ES - XX : - UseSplitVerifier ' " COVERAGE _ CMD = " " <nl> + # unit tests in Finnish locale ( oraclejdk8 ) <nl> + - jdk : oraclejdk8 <nl> + env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = fi - Duser . country = FI - XX : - UseSplitVerifier ' " COVERAGE _ CMD = " " <nl> + # unit tests in French locale ( oraclejdk8 ) <nl> + - jdk : oraclejdk8 <nl> + env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = fr - Duser . country = FR - XX : - UseSplitVerifier ' " COVERAGE _ CMD = " " <nl> + # unit tests in Japanese locale ( oraclejdk8 ) <nl> + - jdk : oraclejdk8 <nl> + env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = ja - Duser . country = JP - XX : - UseSplitVerifier ' " COVERAGE _ CMD = " " <nl> + # unit tests in Portuguese locale ( oraclejdk8 ) <nl> + - jdk : oraclejdk8 <nl> + env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = pt - Duser . country = PT - XX : - UseSplitVerifier ' " COVERAGE _ CMD = " " <nl> + # unit tests in Turkish locale ( oraclejdk8 ) <nl> + - jdk : oraclejdk8 <nl> + env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = tr - Duser . country = TR - XX : - UseSplitVerifier ' " COVERAGE _ CMD = " " <nl> # unit tests ( openjdk7 , oraclejdk7 ) <nl> - jdk : openjdk7 <nl> env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify " COVERAGE _ CMD = " " <nl> diff - - git a / pom . xml b / pom . xml <nl> index 69b7586 . . 2031e97 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 786 , 7 + 786 , 6 @ @ <nl> < artifactId > maven - surefire - plugin < / artifactId > <nl> < version > 2 . 19 . 1 < / version > <nl> < configuration > <nl> - < argLine > - Duser . language = en - Duser . country = US - XX : - UseSplitVerifier < / argLine > <nl> < systemPropertyVariables > <nl> < jacoco - agent . destfile > $ { project . build . directory } / jacoco / jacoco . exec < / jacoco - agent . destfile > <nl> < / systemPropertyVariables > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> index b3064fa . . da4fca5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> @ @ - 92 , 10 + 92 , 9 @ @ public class ConfigurationLoaderTest { <nl> fail ( " missing property name " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertTrue ( <nl> - ex . getMessage ( ) . endsWith ( <nl> - " Attribute \ " name \ " is required and must be specified " <nl> - + " for element type \ " property \ " . : 8 : 41 " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . contains ( " \ " name \ " " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . contains ( " \ " property \ " " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . endsWith ( " : 8 : 41 " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 106 , 10 + 105 , 9 @ @ public class ConfigurationLoaderTest { <nl> fail ( " missing property value " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertTrue ( <nl> - ex . getMessage ( ) . endsWith ( <nl> - " Attribute \ " value \ " is required and must be specified " <nl> - + " for element type \ " property \ " . : 8 : 41 " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . contains ( " \ " value \ " " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . contains ( " \ " property \ " " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . endsWith ( " : 8 : 41 " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 120 , 10 + 118 , 9 @ @ public class ConfigurationLoaderTest { <nl> fail ( " missing module name " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertTrue ( <nl> - ex . getMessage ( ) . endsWith ( <nl> - " Attribute \ " name \ " is required and must be specified " <nl> - + " for element type \ " module \ " . : 7 : 23 " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . contains ( " \ " name \ " " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . contains ( " \ " module \ " " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . endsWith ( " : 7 : 23 " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 134 , 10 + 131 , 9 @ @ public class ConfigurationLoaderTest { <nl> fail ( " missing module parent " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertTrue ( <nl> - ex . getMessage ( ) . endsWith ( <nl> - " Document root element \ " property \ " , must match DOCTYPE " <nl> - + " root \ " module \ " . : 8 : 38 " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . contains ( " \ " property \ " " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . contains ( " \ " module \ " " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . endsWith ( " : 8 : 38 " ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 6d62ea5 . . cfebc07 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 44 , 6 + 44 , 7 @ @ import org . junit . contrib . java . lang . system . SystemOutRule ; <nl> import org . junit . rules . TemporaryFolder ; <nl> <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> <nl> public class MainTest { <nl> @ Rule <nl> @ @ - 185 , 9 + 186 , 7 @ @ public class MainTest { <nl> assertEquals ( expectedExceptionMessage , systemOut . getLog ( ) ) ; <nl> <nl> final String cause = " com . puppycrawl . tools . checkstyle . api . CheckstyleException : " <nl> - + " cannot initialize module TreeWalker - " <nl> - + " Unable to instantiate ' NonExistingClass ' class , " <nl> - + " it is also not possible to instantiate it as " ; <nl> + + " cannot initialize module TreeWalker - " ; <nl> assertTrue ( systemErr . getLog ( ) . startsWith ( cause ) ) ; <nl> } <nl> } ) ; <nl> @ @ - 422 , 10 + 421 , 8 @ @ public class MainTest { <nl> final String output = String . format ( Locale . ROOT , <nl> " Checkstyle ends with 1 errors . % n " ) ; <nl> assertEquals ( output , systemOut . getLog ( ) ) ; <nl> - final String errorOuput = String . format ( Locale . ROOT , <nl> - " com . puppycrawl . tools . checkstyle . api . " <nl> - + " CheckstyleException : unable to parse configuration stream " <nl> - + " - Content is not allowed in prolog . : 7 : 1 % n " ) ; <nl> + final String errorOuput = " com . puppycrawl . tools . checkstyle . api . " <nl> + + " CheckstyleException : unable to parse configuration stream - " ; <nl> assertTrue ( systemErr . getLog ( ) . startsWith ( errorOuput ) ) ; <nl> } <nl> } ) ; <nl> @ @ - 505 , 21 + 502 , 26 @ @ public class MainTest { <nl> <nl> / / we just reference there all violations <nl> final String [ ] [ ] outputValues = { <nl> - { " InputComplexityOverflow " , " 1 " , " 172 " } , <nl> + { " InputComplexityOverflow " , " 1 " , " 172 " } , <nl> } ; <nl> <nl> + final int allowedLength = 170 ; <nl> + final String msgKey = " maxLen . file " ; <nl> + final String bundle = " com . puppycrawl . tools . checkstyle . checks . sizes . messages " ; <nl> + <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> final String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; <nl> final StringBuilder sb = new StringBuilder ( ) ; <nl> sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> - final String format = " [ WARN ] % s . java : % s : File length is % s lines " <nl> - + " ( max allowed is 170 ) . [ FileLength ] " ; <nl> + final String format = " [ WARN ] % s . java : % s : % s [ FileLength ] " ; <nl> for ( String [ ] outputValue : outputValues ) { <nl> + final String localizedMessage = new LocalizedMessage ( 0 , bundle , <nl> + msgKey , new Integer [ ] { Integer . valueOf ( outputValue [ 2 ] ) , allowedLength } , <nl> + null , getClass ( ) , null ) . getMessage ( ) ; <nl> final String line = String . format ( Locale . ROOT , format , <nl> - expectedPath + outputValue [ 0 ] , outputValue [ 1 ] , <nl> - outputValue [ 2 ] ) ; <nl> + expectedPath + outputValue [ 0 ] , outputValue [ 1 ] , localizedMessage ) ; <nl> sb . append ( line ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> } <nl> sb . append ( " Audit done . " ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java <nl> index 131bbe6 . . f20b63d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java <nl> @ @ - 29 , 7 + 29 , 9 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . Definitions ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; <nl> <nl> public class FileTabCharacterCheckTest <nl> extends BaseCheckTestSupport { <nl> @ @ - 85 , 9 + 87 , 12 @ @ public class FileTabCharacterCheckTest <nl> final DefaultConfiguration checkConfig = createConfig ( false ) ; <nl> final String path = getPath ( " Claira " ) ; <nl> final String exceptionMessage = " ( No such file or directory ) " ; <nl> + final LocalizedMessage localizedMessage = new LocalizedMessage ( 0 , <nl> + Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , <nl> + new String [ ] { path + exceptionMessage } , null , getClass ( ) , null ) ; <nl> <nl> final String [ ] expected = { <nl> - " 0 : Got an exception - " + path + exceptionMessage , <nl> + " 0 : " + localizedMessage . getMessage ( ) , <nl> } ; <nl> final File [ ] files = { <nl> new File ( path ) , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java <nl> index fd3b90e . . 2666324 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java <nl> @ @ - 130 , 10 + 130 , 9 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { <nl> SuppressionsLoader . loadSuppressions ( fn ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertEquals ( <nl> - " Unable to parse " + fn + " - Attribute \ " files \ " is required and must be " <nl> - + " specified for element type \ " suppress \ " . " , <nl> - ex . getMessage ( ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to parse " + fn ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . contains ( " \ " files \ " " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . contains ( " \ " suppress \ " " ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 144 , 10 + 143 , 9 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { <nl> SuppressionsLoader . loadSuppressions ( fn ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertEquals ( <nl> - " Unable to parse " + fn + " - Attribute \ " checks \ " is required and must be " <nl> - + " specified for element type \ " suppress \ " . " , <nl> - ex . getMessage ( ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to parse " + fn ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . contains ( " \ " checks \ " " ) ) ; <nl> + assertTrue ( ex . getMessage ( ) . contains ( " \ " suppress \ " " ) ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> index dae6cd4 . . 348d5d0 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java <nl> @ @ - 58 , 8 + 58 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> public void testAllChecksWithDefaultConfiguration ( ) throws Exception { <nl> <nl> final Set < Class < ? > > checkstyleChecks = getCheckstyleChecks ( ) ; <nl> - final String inputFilePath = " src / test / resources - noncompilable / " <nl> - + " com / puppycrawl / tools / checkstyle / InputDefaultConfig . java " ; <nl> + final String inputFilePath = getNonCompilablePath ( " InputDefaultConfig . java " ) ; <nl> final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; <nl> <nl> for ( Class < ? > check : checkstyleChecks ) { <nl> @ @ - 69 , 8 + 68 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { <nl> / / Checks which have Check as a parent . <nl> if ( check . equals ( ImportControlCheck . class ) ) { <nl> / / ImportControlCheck must have the import control configuration file to avoid violation . <nl> - checkConfig . addAttribute ( " file " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ complete . xml " ) ; <nl> + checkConfig . addAttribute ( " file " , getPath ( " import - control _ complete . xml " ) ) ; <nl> } <nl> checker = createChecker ( checkConfig ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> index cfa3873 . . c30edb7 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java <nl> @ @ - 44 , 6 + 44 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> * @ author lkuehne <nl> * / <nl> public class ConfigurationLoaderTest { <nl> + private static String getConfigPath ( String filename ) { <nl> + return " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + filename ; <nl> + } <nl> <nl> private static Configuration loadConfiguration ( String name ) <nl> throws CheckstyleException { <nl> @ @ - 52 , 8 + 55 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> private static Configuration loadConfiguration ( <nl> String name , Properties props ) throws CheckstyleException { <nl> - final String fName = <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + name ; <nl> + final String fName = getConfigPath ( name ) ; <nl> <nl> return ConfigurationLoader . loadConfiguration ( <nl> fName , new PropertiesExpander ( props ) ) ; <nl> @ @ - 66 , 7 + 68 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> / / load config that ' s only found in the classpath <nl> final DefaultConfiguration config = ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / checkstyle _ checks . xml " , new PropertiesExpander ( props ) ) ; <nl> + getConfigPath ( " checkstyle _ checks . xml " ) , new PropertiesExpander ( props ) ) ; <nl> <nl> / / verify the root , and property substitution <nl> final Properties attributes = new Properties ( ) ; <nl> @ @ - 334 , 8 + 336 , 7 @ @ public class ConfigurationLoaderTest { <nl> final Properties props = new Properties ( ) ; <nl> props . setProperty ( " checkstyle . basedir " , " basedir " ) ; <nl> <nl> - final File file = new File ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / subdir / including . xml " ) ; <nl> + final File file = new File ( getConfigPath ( " subdir / including . xml " ) ) ; <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> file . toURI ( ) . toString ( ) , new PropertiesExpander ( props ) ) ; <nl> @ @ - 403 , 8 + 404 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " , <nl> + getConfigPath ( " config _ with _ ignore . xml " ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 416 , 8 + 416 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( new InputSource ( <nl> - new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " ) . toURI ( ) . toString ( ) ) , <nl> + new File ( getConfigPath ( " config _ with _ ignore . xml " ) ) . toURI ( ) . toString ( ) ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 429 , 8 + 428 , 7 @ @ public class ConfigurationLoaderTest { <nl> <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ checker _ ignore . xml " , <nl> + getConfigPath ( " config _ with _ checker _ ignore . xml " ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> @ @ - 460 , 9 + 458 , 7 @ @ public class ConfigurationLoaderTest { <nl> @ SuppressWarnings ( " deprecation " ) <nl> final DefaultConfiguration config = <nl> ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( <nl> - new FileInputStream ( <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " <nl> - + " config _ with _ ignore . xml " ) , <nl> + new FileInputStream ( getConfigPath ( " config _ with _ ignore . xml " ) ) , <nl> new PropertiesExpander ( new Properties ( ) ) , true ) ; <nl> <nl> final Configuration [ ] children = config . getChildren ( ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 806a1c1 . . 3b7bf29 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 55 , 6 + 55 , 14 @ @ public class MainTest { <nl> @ Rule <nl> public final SystemOutRule systemOut = new SystemOutRule ( ) . enableLog ( ) . mute ( ) ; <nl> <nl> + private static String getPath ( String filename ) { <nl> + return " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ; <nl> + } <nl> + <nl> + private static String getFilePath ( String filename ) throws IOException { <nl> + return new File ( getPath ( filename ) ) . getCanonicalPath ( ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { <nl> assertUtilsClassHasPrivateConstructor ( Main . class ) ; <nl> @ @ - 110 , 7 + 118 , 7 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 143 , 7 + 151 , 7 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , " src / main / resources / non _ existing _ config . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 158 , 7 + 166 , 7 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , " / google _ checks . xml " , " - f " , " xmlp " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 198 , 8 + 206 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - non - existing - classname . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - non - existing - classname . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 213 , 8 + 221 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 223 , 10 + 231 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> final ResourceBundle compilationProperties = <nl> ResourceBundle . getBundle ( " checkstylecompilation " ) ; <nl> String version = compilationProperties . getString ( " checkstyle . compile . version " ) ; <nl> @ @ - 239 , 9 + 244 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 255 , 9 + 260 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 266 , 10 + 271 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " % 1 $ s : 3 : 14 : " <nl> + " warning : Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> @ @ - 280 , 8 + 282 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname2 . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 291 , 10 + 293 , 7 @ @ public class MainTest { <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override <nl> public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " InputMain . java " ) ; <nl> assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " <nl> + " % 1 $ s : 3 : 14 : error : " <nl> + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " <nl> @ @ - 306 , 8 + 305 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> Main . main ( " - c " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 - error . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " config - classname2 - error . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 321 , 10 + 320 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , temporaryFolder . getRoot ( ) + " / output . txt " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 338 , 10 + 337 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 359 , 10 + 358 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 384 , 10 + 383 , 10 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname . xml " ) , <nl> " - f " , " plain " , <nl> " - o " , file . getCanonicalPath ( ) , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 402 , 10 + 401 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - classname - prop . xml " , <nl> - " - p " , " src / test / resources / com / puppycrawl / tools / checkstyle / mycheckstyle . properties " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , <nl> + " - p " , getPath ( " mycheckstyle . properties " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 420 , 10 + 418 , 9 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - classname - prop . xml " , <nl> + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , <nl> " - p " , " nonexisting . properties " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 443 , 9 + 440 , 8 @ @ public class MainTest { <nl> assertEquals ( " " , systemErr . getLog ( ) ) ; <nl> } <nl> } ) ; <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " <nl> - + " config - Incorrect . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; <nl> + Main . main ( " - c " , getPath ( " config - Incorrect . xml " ) , <nl> + getPath ( " InputMain . java " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 522 , 10 + 518 , 7 @ @ public class MainTest { <nl> <nl> exit . checkAssertionAfterwards ( new Assertion ( ) { <nl> @ Override public void checkAssertion ( ) throws IOException { <nl> - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; <nl> - String expectedPath = currentPath <nl> - + " / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " <nl> - . replace ( " / " , File . separator ) ; <nl> + String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; <nl> String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 170 ) . " ; <nl> @ @ - 541 , 8 + 534 , 8 @ @ public class MainTest { <nl> } <nl> } ) ; <nl> <nl> - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml " , <nl> - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " ) ; <nl> + Main . main ( " - c " , getPath ( " config - filelength . xml " ) , <nl> + getPath ( " checks / metrics " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml <nl> new file mode 100644 <nl> index 0000000 . . 3bdfcad <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + < ? xml version = " 1 . 0 " ? > <nl> + < ! DOCTYPE import - control PUBLIC <nl> + " - / / Puppy Crawl / / DTD Import Control 1 . 0 / / EN " <nl> + " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 0 . dtd " > <nl> + <nl> + < import - control pkg = " com " > <nl> + < allow class = " some . class " / > <nl> + < disallow class = " another . class " local - only = " true " / > <nl> + < allow pkg = " some . pkg " / > <nl> + < disallow pkg = " another . pkg " local - only = " true " / > <nl> + < disallow pkg = " and . another . pkg " exact - match = " true " / > <nl> + < subpackage name = " puppycrawl " > <nl> + < disallow pkg = " some . pkg " / > <nl> + < disallow class = " some . class " / > <nl> + < / subpackage > <nl> + < / import - control > <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / . travis . yml b / . travis . yml 
 index 685490a . . 595be2e 100644 
 - - - a / . travis . yml 
 + + + b / . travis . yml 
 @ @ - 227 , 7 + 227 , 25 @ @ matrix : 
 - COVERAGE _ CMD = " " 
 # unit tests in German locale ( oraclejdk8 ) 
 - jdk : oraclejdk8 
 - env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = de - Duser . country = DE ' " COVERAGE _ CMD = " " 
 + env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = de - Duser . country = DE - XX : - UseSplitVerifier ' " COVERAGE _ CMD = " " 
 + # unit tests in Spanish locale ( oraclejdk8 ) 
 + - jdk : oraclejdk8 
 + env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = es - Duser . country = ES - XX : - UseSplitVerifier ' " COVERAGE _ CMD = " " 
 + # unit tests in Finnish locale ( oraclejdk8 ) 
 + - jdk : oraclejdk8 
 + env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = fi - Duser . country = FI - XX : - UseSplitVerifier ' " COVERAGE _ CMD = " " 
 + # unit tests in French locale ( oraclejdk8 ) 
 + - jdk : oraclejdk8 
 + env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = fr - Duser . country = FR - XX : - UseSplitVerifier ' " COVERAGE _ CMD = " " 
 + # unit tests in Japanese locale ( oraclejdk8 ) 
 + - jdk : oraclejdk8 
 + env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = ja - Duser . country = JP - XX : - UseSplitVerifier ' " COVERAGE _ CMD = " " 
 + # unit tests in Portuguese locale ( oraclejdk8 ) 
 + - jdk : oraclejdk8 
 + env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = pt - Duser . country = PT - XX : - UseSplitVerifier ' " COVERAGE _ CMD = " " 
 + # unit tests in Turkish locale ( oraclejdk8 ) 
 + - jdk : oraclejdk8 
 + env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify - DargLine = ' - Duser . language = tr - Duser . country = TR - XX : - UseSplitVerifier ' " COVERAGE _ CMD = " " 
 # unit tests ( openjdk7 , oraclejdk7 ) 
 - jdk : openjdk7 
 env : DESC = " tests " CMD = " mvn clean integration - test failsafe : verify " COVERAGE _ CMD = " " 
 diff - - git a / pom . xml b / pom . xml 
 index 69b7586 . . 2031e97 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 786 , 7 + 786 , 6 @ @ 
 < artifactId > maven - surefire - plugin < / artifactId > 
 < version > 2 . 19 . 1 < / version > 
 < configuration > 
 - < argLine > - Duser . language = en - Duser . country = US - XX : - UseSplitVerifier < / argLine > 
 < systemPropertyVariables > 
 < jacoco - agent . destfile > $ { project . build . directory } / jacoco / jacoco . exec < / jacoco - agent . destfile > 
 < / systemPropertyVariables > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 index b3064fa . . da4fca5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 @ @ - 92 , 10 + 92 , 9 @ @ public class ConfigurationLoaderTest { 
 fail ( " missing property name " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertTrue ( 
 - ex . getMessage ( ) . endsWith ( 
 - " Attribute \ " name \ " is required and must be specified " 
 - + " for element type \ " property \ " . : 8 : 41 " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . contains ( " \ " name \ " " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . contains ( " \ " property \ " " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . endsWith ( " : 8 : 41 " ) ) ; 
 } 
 } 
 
 @ @ - 106 , 10 + 105 , 9 @ @ public class ConfigurationLoaderTest { 
 fail ( " missing property value " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertTrue ( 
 - ex . getMessage ( ) . endsWith ( 
 - " Attribute \ " value \ " is required and must be specified " 
 - + " for element type \ " property \ " . : 8 : 41 " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . contains ( " \ " value \ " " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . contains ( " \ " property \ " " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . endsWith ( " : 8 : 41 " ) ) ; 
 } 
 } 
 
 @ @ - 120 , 10 + 118 , 9 @ @ public class ConfigurationLoaderTest { 
 fail ( " missing module name " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertTrue ( 
 - ex . getMessage ( ) . endsWith ( 
 - " Attribute \ " name \ " is required and must be specified " 
 - + " for element type \ " module \ " . : 7 : 23 " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . contains ( " \ " name \ " " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . contains ( " \ " module \ " " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . endsWith ( " : 7 : 23 " ) ) ; 
 } 
 } 
 
 @ @ - 134 , 10 + 131 , 9 @ @ public class ConfigurationLoaderTest { 
 fail ( " missing module parent " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertTrue ( 
 - ex . getMessage ( ) . endsWith ( 
 - " Document root element \ " property \ " , must match DOCTYPE " 
 - + " root \ " module \ " . : 8 : 38 " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . contains ( " \ " property \ " " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . contains ( " \ " module \ " " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . endsWith ( " : 8 : 38 " ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 6d62ea5 . . cfebc07 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 44 , 6 + 44 , 7 @ @ import org . junit . contrib . java . lang . system . SystemOutRule ; 
 import org . junit . rules . TemporaryFolder ; 
 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 
 public class MainTest { 
 @ Rule 
 @ @ - 185 , 9 + 186 , 7 @ @ public class MainTest { 
 assertEquals ( expectedExceptionMessage , systemOut . getLog ( ) ) ; 
 
 final String cause = " com . puppycrawl . tools . checkstyle . api . CheckstyleException : " 
 - + " cannot initialize module TreeWalker - " 
 - + " Unable to instantiate ' NonExistingClass ' class , " 
 - + " it is also not possible to instantiate it as " ; 
 + + " cannot initialize module TreeWalker - " ; 
 assertTrue ( systemErr . getLog ( ) . startsWith ( cause ) ) ; 
 } 
 } ) ; 
 @ @ - 422 , 10 + 421 , 8 @ @ public class MainTest { 
 final String output = String . format ( Locale . ROOT , 
 " Checkstyle ends with 1 errors . % n " ) ; 
 assertEquals ( output , systemOut . getLog ( ) ) ; 
 - final String errorOuput = String . format ( Locale . ROOT , 
 - " com . puppycrawl . tools . checkstyle . api . " 
 - + " CheckstyleException : unable to parse configuration stream " 
 - + " - Content is not allowed in prolog . : 7 : 1 % n " ) ; 
 + final String errorOuput = " com . puppycrawl . tools . checkstyle . api . " 
 + + " CheckstyleException : unable to parse configuration stream - " ; 
 assertTrue ( systemErr . getLog ( ) . startsWith ( errorOuput ) ) ; 
 } 
 } ) ; 
 @ @ - 505 , 21 + 502 , 26 @ @ public class MainTest { 
 
 / / we just reference there all violations 
 final String [ ] [ ] outputValues = { 
 - { " InputComplexityOverflow " , " 1 " , " 172 " } , 
 + { " InputComplexityOverflow " , " 1 " , " 172 " } , 
 } ; 
 
 + final int allowedLength = 170 ; 
 + final String msgKey = " maxLen . file " ; 
 + final String bundle = " com . puppycrawl . tools . checkstyle . checks . sizes . messages " ; 
 + 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 final String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; 
 final StringBuilder sb = new StringBuilder ( ) ; 
 sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; 
 - final String format = " [ WARN ] % s . java : % s : File length is % s lines " 
 - + " ( max allowed is 170 ) . [ FileLength ] " ; 
 + final String format = " [ WARN ] % s . java : % s : % s [ FileLength ] " ; 
 for ( String [ ] outputValue : outputValues ) { 
 + final String localizedMessage = new LocalizedMessage ( 0 , bundle , 
 + msgKey , new Integer [ ] { Integer . valueOf ( outputValue [ 2 ] ) , allowedLength } , 
 + null , getClass ( ) , null ) . getMessage ( ) ; 
 final String line = String . format ( Locale . ROOT , format , 
 - expectedPath + outputValue [ 0 ] , outputValue [ 1 ] , 
 - outputValue [ 2 ] ) ; 
 + expectedPath + outputValue [ 0 ] , outputValue [ 1 ] , localizedMessage ) ; 
 sb . append ( line ) . append ( System . getProperty ( " line . separator " ) ) ; 
 } 
 sb . append ( " Audit done . " ) . append ( System . getProperty ( " line . separator " ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java 
 index 131bbe6 . . f20b63d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / FileTabCharacterCheckTest . java 
 @ @ - 29 , 7 + 29 , 9 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . Definitions ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . api . LocalizedMessage ; 
 
 public class FileTabCharacterCheckTest 
 extends BaseCheckTestSupport { 
 @ @ - 85 , 9 + 87 , 12 @ @ public class FileTabCharacterCheckTest 
 final DefaultConfiguration checkConfig = createConfig ( false ) ; 
 final String path = getPath ( " Claira " ) ; 
 final String exceptionMessage = " ( No such file or directory ) " ; 
 + final LocalizedMessage localizedMessage = new LocalizedMessage ( 0 , 
 + Definitions . CHECKSTYLE _ BUNDLE , " general . exception " , 
 + new String [ ] { path + exceptionMessage } , null , getClass ( ) , null ) ; 
 
 final String [ ] expected = { 
 - " 0 : Got an exception - " + path + exceptionMessage , 
 + " 0 : " + localizedMessage . getMessage ( ) , 
 } ; 
 final File [ ] files = { 
 new File ( path ) , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java 
 index fd3b90e . . 2666324 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / SuppressionsLoaderTest . java 
 @ @ - 130 , 10 + 130 , 9 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { 
 SuppressionsLoader . loadSuppressions ( fn ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertEquals ( 
 - " Unable to parse " + fn + " - Attribute \ " files \ " is required and must be " 
 - + " specified for element type \ " suppress \ " . " , 
 - ex . getMessage ( ) ) ; 
 + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to parse " + fn ) ) ; 
 + assertTrue ( ex . getMessage ( ) . contains ( " \ " files \ " " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . contains ( " \ " suppress \ " " ) ) ; 
 } 
 } 
 
 @ @ - 144 , 10 + 143 , 9 @ @ public class SuppressionsLoaderTest extends BaseCheckTestSupport { 
 SuppressionsLoader . loadSuppressions ( fn ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertEquals ( 
 - " Unable to parse " + fn + " - Attribute \ " checks \ " is required and must be " 
 - + " specified for element type \ " suppress \ " . " , 
 - ex . getMessage ( ) ) ; 
 + assertTrue ( ex . getMessage ( ) . startsWith ( " Unable to parse " + fn ) ) ; 
 + assertTrue ( ex . getMessage ( ) . contains ( " \ " checks \ " " ) ) ; 
 + assertTrue ( ex . getMessage ( ) . contains ( " \ " suppress \ " " ) ) ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 index dae6cd4 . . 348d5d0 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / AllChecksTest . java 
 @ @ - 58 , 8 + 58 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 public void testAllChecksWithDefaultConfiguration ( ) throws Exception { 
 
 final Set < Class < ? > > checkstyleChecks = getCheckstyleChecks ( ) ; 
 - final String inputFilePath = " src / test / resources - noncompilable / " 
 - + " com / puppycrawl / tools / checkstyle / InputDefaultConfig . java " ; 
 + final String inputFilePath = getNonCompilablePath ( " InputDefaultConfig . java " ) ; 
 final String [ ] expected = ArrayUtils . EMPTY _ STRING _ ARRAY ; 
 
 for ( Class < ? > check : checkstyleChecks ) { 
 @ @ - 69 , 8 + 68 , 7 @ @ public class AllChecksTest extends BaseCheckTestSupport { 
 / / Checks which have Check as a parent . 
 if ( check . equals ( ImportControlCheck . class ) ) { 
 / / ImportControlCheck must have the import control configuration file to avoid violation . 
 - checkConfig . addAttribute ( " file " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / imports / import - control _ complete . xml " ) ; 
 + checkConfig . addAttribute ( " file " , getPath ( " import - control _ complete . xml " ) ) ; 
 } 
 checker = createChecker ( checkConfig ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 index cfa3873 . . c30edb7 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ConfigurationLoaderTest . java 
 @ @ - 44 , 6 + 44 , 9 @ @ import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 * @ author lkuehne 
 * / 
 public class ConfigurationLoaderTest { 
 + private static String getConfigPath ( String filename ) { 
 + return " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + filename ; 
 + } 
 
 private static Configuration loadConfiguration ( String name ) 
 throws CheckstyleException { 
 @ @ - 52 , 8 + 55 , 7 @ @ public class ConfigurationLoaderTest { 
 
 private static Configuration loadConfiguration ( 
 String name , Properties props ) throws CheckstyleException { 
 - final String fName = 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " + name ; 
 + final String fName = getConfigPath ( name ) ; 
 
 return ConfigurationLoader . loadConfiguration ( 
 fName , new PropertiesExpander ( props ) ) ; 
 @ @ - 66 , 7 + 68 , 7 @ @ public class ConfigurationLoaderTest { 
 
 / / load config that ' s only found in the classpath 
 final DefaultConfiguration config = ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / checkstyle _ checks . xml " , new PropertiesExpander ( props ) ) ; 
 + getConfigPath ( " checkstyle _ checks . xml " ) , new PropertiesExpander ( props ) ) ; 
 
 / / verify the root , and property substitution 
 final Properties attributes = new Properties ( ) ; 
 @ @ - 334 , 8 + 336 , 7 @ @ public class ConfigurationLoaderTest { 
 final Properties props = new Properties ( ) ; 
 props . setProperty ( " checkstyle . basedir " , " basedir " ) ; 
 
 - final File file = new File ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / subdir / including . xml " ) ; 
 + final File file = new File ( getConfigPath ( " subdir / including . xml " ) ) ; 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 file . toURI ( ) . toString ( ) , new PropertiesExpander ( props ) ) ; 
 @ @ - 403 , 8 + 404 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " , 
 + getConfigPath ( " config _ with _ ignore . xml " ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 416 , 8 + 416 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( new InputSource ( 
 - new File ( " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " ) . toURI ( ) . toString ( ) ) , 
 + new File ( getConfigPath ( " config _ with _ ignore . xml " ) ) . toURI ( ) . toString ( ) ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 429 , 8 + 428 , 7 @ @ public class ConfigurationLoaderTest { 
 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ checker _ ignore . xml " , 
 + getConfigPath ( " config _ with _ checker _ ignore . xml " ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 @ @ - 460 , 9 + 458 , 7 @ @ public class ConfigurationLoaderTest { 
 @ SuppressWarnings ( " deprecation " ) 
 final DefaultConfiguration config = 
 ( DefaultConfiguration ) ConfigurationLoader . loadConfiguration ( 
 - new FileInputStream ( 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / configs / " 
 - + " config _ with _ ignore . xml " ) , 
 + new FileInputStream ( getConfigPath ( " config _ with _ ignore . xml " ) ) , 
 new PropertiesExpander ( new Properties ( ) ) , true ) ; 
 
 final Configuration [ ] children = config . getChildren ( ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 806a1c1 . . 3b7bf29 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 55 , 6 + 55 , 14 @ @ public class MainTest { 
 @ Rule 
 public final SystemOutRule systemOut = new SystemOutRule ( ) . enableLog ( ) . mute ( ) ; 
 
 + private static String getPath ( String filename ) { 
 + return " src / test / resources / com / puppycrawl / tools / checkstyle / " + filename ; 
 + } 
 + 
 + private static String getFilePath ( String filename ) throws IOException { 
 + return new File ( getPath ( filename ) ) . getCanonicalPath ( ) ; 
 + } 
 + 
 @ Test 
 public void testIsProperUtilsClass ( ) throws ReflectiveOperationException { 
 assertUtilsClassHasPrivateConstructor ( Main . class ) ; 
 @ @ - 110 , 7 + 118 , 7 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 143 , 7 + 151 , 7 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , " src / main / resources / non _ existing _ config . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 158 , 7 + 166 , 7 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , " / google _ checks . xml " , " - f " , " xmlp " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 198 , 8 + 206 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - non - existing - classname . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - non - existing - classname . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 213 , 8 + 221 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 223 , 10 + 231 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 final ResourceBundle compilationProperties = 
 ResourceBundle . getBundle ( " checkstylecompilation " ) ; 
 String version = compilationProperties . getString ( " checkstyle . compile . version " ) ; 
 @ @ - 239 , 9 + 244 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 255 , 9 + 260 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 266 , 10 + 271 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " % 1 $ s : 3 : 14 : " 
 + " warning : Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 @ @ - 280 , 8 + 282 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname2 . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 291 , 10 + 293 , 7 @ @ public class MainTest { 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override 
 public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " InputMain . java " ) ; 
 assertEquals ( String . format ( Locale . ROOT , " Starting audit . . . % n " 
 + " % 1 $ s : 3 : 14 : error : " 
 + " Name ' InputMain ' must match pattern ' ^ [ a - z0 - 9 ] * $ ' . % n " 
 @ @ - 306 , 8 + 305 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 Main . main ( " - c " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname2 - error . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " config - classname2 - error . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 321 , 10 + 320 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , temporaryFolder . getRoot ( ) + " / output . txt " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 338 , 10 + 337 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 359 , 10 + 358 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 384 , 10 + 383 , 10 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - classname . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname . xml " ) , 
 " - f " , " plain " , 
 " - o " , file . getCanonicalPath ( ) , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 402 , 10 + 401 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - classname - prop . xml " , 
 - " - p " , " src / test / resources / com / puppycrawl / tools / checkstyle / mycheckstyle . properties " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , 
 + " - p " , getPath ( " mycheckstyle . properties " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 420 , 10 + 418 , 9 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - classname - prop . xml " , 
 + Main . main ( " - c " , getPath ( " config - classname - prop . xml " ) , 
 " - p " , " nonexisting . properties " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 443 , 9 + 440 , 8 @ @ public class MainTest { 
 assertEquals ( " " , systemErr . getLog ( ) ) ; 
 } 
 } ) ; 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / " 
 - + " config - Incorrect . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / InputMain . java " ) ; 
 + Main . main ( " - c " , getPath ( " config - Incorrect . xml " ) , 
 + getPath ( " InputMain . java " ) ) ; 
 } 
 
 @ Test 
 @ @ - 522 , 10 + 518 , 7 @ @ public class MainTest { 
 
 exit . checkAssertionAfterwards ( new Assertion ( ) { 
 @ Override public void checkAssertion ( ) throws IOException { 
 - String currentPath = new File ( " . " ) . getCanonicalPath ( ) ; 
 - String expectedPath = currentPath 
 - + " / src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " 
 - . replace ( " / " , File . separator ) ; 
 + String expectedPath = getFilePath ( " checks / metrics " ) + File . separator ; 
 StringBuilder sb = new StringBuilder ( ) ; 
 sb . append ( " Starting audit . . . " ) . append ( System . getProperty ( " line . separator " ) ) ; 
 String format = " % s . java : % s : warning : File length is % s lines ( max allowed is 170 ) . " ; 
 @ @ - 541 , 8 + 534 , 8 @ @ public class MainTest { 
 } 
 } ) ; 
 
 - Main . main ( " - c " , " src / test / resources / com / puppycrawl / tools / checkstyle / config - filelength . xml " , 
 - " src / test / resources / com / puppycrawl / tools / checkstyle / checks / metrics / " ) ; 
 + Main . main ( " - c " , getPath ( " config - filelength . xml " ) , 
 + getPath ( " checks / metrics " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml 
 new file mode 100644 
 index 0000000 . . 3bdfcad 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / import - control _ complete . xml 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + < ? xml version = " 1 . 0 " ? > 
 + < ! DOCTYPE import - control PUBLIC 
 + " - / / Puppy Crawl / / DTD Import Control 1 . 0 / / EN " 
 + " http : / / www . puppycrawl . com / dtds / import _ control _ 1 _ 0 . dtd " > 
 + 
 + < import - control pkg = " com " > 
 + < allow class = " some . class " / > 
 + < disallow class = " another . class " local - only = " true " / > 
 + < allow pkg = " some . pkg " / > 
 + < disallow pkg = " another . pkg " local - only = " true " / > 
 + < disallow pkg = " and . another . pkg " exact - match = " true " / > 
 + < subpackage name = " puppycrawl " > 
 + < disallow pkg = " some . pkg " / > 
 + < disallow class = " some . class " / > 
 + < / subpackage > 
 + < / import - control > 
 \ No newline at end of file
