BLEU SCORE: 0.07495553473355841

TEST MSG: config : bump version for commons - beanutils related to previous revert
GENERATED MSG: Update commons - cli to 1 . 3 . # 1067

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 782db99 . . 00b74e3 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 231 , 7 + 231 , 7 @ @ <nl> < dependency > <nl> < groupId > commons - beanutils < / groupId > <nl> < artifactId > commons - beanutils < / artifactId > <nl> - < version > 1 . 9 . 2 < / version > <nl> + < version > 1 . 9 . 3 < / version > <nl> < / dependency > <nl> < dependency > <nl> < groupId > commons - cli < / groupId >
NEAREST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 83615f1 . . 9f8b90b 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 163 , 7 + 163 , 6 @ @ <nl> < rule ref = " rulesets / java / naming . xml " > <nl> < exclude name = " AbstractNaming " / > <nl> < exclude name = " AvoidFieldNameMatchingMethodName " / > <nl> - < exclude name = " BooleanGetMethodName " / > <nl> < exclude name = " LongVariable " / > <nl> < exclude name = " ShortClassName " / > <nl> < exclude name = " ShortMethodName " / > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> index 7f3d3cf . . a2619a5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> @ @ - 56 , 7 + 56 , 7 @ @ public abstract class AbstractSuperCheck <nl> private final DetailAST method ; <nl> <nl> / * * true if the overriding method calls the super method * / <nl> - private boolean callsSuper ; <nl> + private boolean callingSuper ; <nl> <nl> / * * <nl> * Constructs a stack node for a method definition . <nl> @ @ - 65 , 15 + 65 , 15 @ @ public abstract class AbstractSuperCheck <nl> public MethodNode ( DetailAST ast ) <nl> { <nl> method = ast ; <nl> - callsSuper = false ; <nl> + callingSuper = false ; <nl> } <nl> <nl> / * * <nl> * Records that the overriding method has a call to the super method . <nl> * / <nl> - public void setCallsSuper ( ) <nl> + public void setCallingSuper ( ) <nl> { <nl> - callsSuper = true ; <nl> + callingSuper = true ; <nl> } <nl> <nl> / * * <nl> @ @ - 82 , 9 + 82 , 9 @ @ public abstract class AbstractSuperCheck <nl> * @ return true if the overriding method has a call to the super <nl> * method . <nl> * / <nl> - public boolean getCallsSuper ( ) <nl> + public boolean isCallingSuper ( ) <nl> { <nl> - return callsSuper ; <nl> + return callingSuper ; <nl> } <nl> <nl> / * * <nl> @ @ - 138 , 7 + 138 , 7 @ @ public abstract class AbstractSuperCheck <nl> } <nl> else if ( isSuperCall ( ast ) ) { <nl> final MethodNode methodNode = methodStack . getLast ( ) ; <nl> - methodNode . setCallsSuper ( ) ; <nl> + methodNode . setCallingSuper ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 206 , 7 + 206 , 7 @ @ public abstract class AbstractSuperCheck <nl> if ( isOverridingMethod ( ast ) ) { <nl> final MethodNode methodNode = <nl> methodStack . removeLast ( ) ; <nl> - if ( ! methodNode . getCallsSuper ( ) ) { <nl> + if ( ! methodNode . isCallingSuper ( ) ) { <nl> final DetailAST methodAST = methodNode . getMethod ( ) ; <nl> final DetailAST nameAST = <nl> methodAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index 5f1e23e . . d8a710b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 81 , 13 + 81 , 6 @ @ public class RequireThisCheck extends DeclarationCollector <nl> { <nl> this . checkFields = checkFields ; <nl> } <nl> - / * * <nl> - * @ return true if we should check fields usage false otherwise . <nl> - * / <nl> - public boolean getCheckFields ( ) <nl> - { <nl> - return checkFields ; <nl> - } <nl> <nl> / * * <nl> * Setter for checkMethods property . <nl> @ @ - 97 , 13 + 90 , 6 @ @ public class RequireThisCheck extends DeclarationCollector <nl> { <nl> this . checkMethods = checkMethods ; <nl> } <nl> - / * * <nl> - * @ return true if we should check methods usage false otherwise . <nl> - * / <nl> - public boolean getCheckMethods ( ) <nl> - { <nl> - return checkMethods ; <nl> - } <nl> <nl> @ Override <nl> public int [ ] getDefaultTokens ( ) <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheck . java <nl> index 739782e . . ae72b41 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheck . java <nl> @ @ - 117 , 7 + 117 , 7 @ @ public class IndentationCheck extends Check <nl> * Get forcing strict condition . <nl> * @ return forceStrictCondition value . <nl> * / <nl> - public boolean getForceStrictCondition ( ) <nl> + public boolean isForceStrictCondition ( ) <nl> { <nl> return forceStrictCondition ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> index 28d4c37 . . bc762dc 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java <nl> @ @ - 80 , 7 + 80 , 7 @ @ public class LineWrappingHandler <nl> this . firstNode = firstNode ; <nl> this . lastNode = lastNode ; <nl> indentLevel = indentCheck . getLineWrappingIndentation ( ) ; <nl> - forceStrictCondition = indentCheck . getForceStrictCondition ( ) ; <nl> + forceStrictCondition = indentCheck . isForceStrictCondition ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java <nl> index 7a8ade9 . . 511427d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java <nl> @ @ - 114 , 12 + 114 , 6 @ @ public abstract class AbstractAccessControlNameCheck <nl> applyToPublic = applyTo ; <nl> } <nl> <nl> - / * * @ return true if the check should be applied to public members . * / <nl> - public boolean getApplyToPublic ( ) <nl> - { <nl> - return applyToPublic ; <nl> - } <nl> - <nl> / * * <nl> * Sets whether we should apply the check to protected members . <nl> * <nl> @ @ - 130 , 12 + 124 , 6 @ @ public abstract class AbstractAccessControlNameCheck <nl> applyToProtected = applyTo ; <nl> } <nl> <nl> - / * * @ return true if the check should be applied to protected members . * / <nl> - public boolean getApplyToProtected ( ) <nl> - { <nl> - return applyToProtected ; <nl> - } <nl> - <nl> / * * <nl> * Sets whether we should apply the check to package - private members . <nl> * <nl> @ @ - 147 , 14 + 135 , 6 @ @ public abstract class AbstractAccessControlNameCheck <nl> } <nl> <nl> / * * <nl> - * @ return true if the check should be applied to package - private members . <nl> - * / <nl> - public boolean getApplyToPackage ( ) <nl> - { <nl> - return applyToPackage ; <nl> - } <nl> - <nl> - / * * <nl> * Sets whether we should apply the check to private members . <nl> * <nl> * @ param applyTo new value of the property . <nl> @ @ - 163 , 10 + 143 , 4 @ @ public abstract class AbstractAccessControlNameCheck <nl> { <nl> applyToPrivate = applyTo ; <nl> } <nl> - <nl> - / * * @ return true if the check should be applied to private members . * / <nl> - public boolean getApplyToPrivate ( ) <nl> - { <nl> - return applyToPrivate ; <nl> - } <nl> }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 782db99 . . 00b74e3 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 231 , 7 + 231 , 7 @ @ 
 < dependency > 
 < groupId > commons - beanutils < / groupId > 
 < artifactId > commons - beanutils < / artifactId > 
 - < version > 1 . 9 . 2 < / version > 
 + < version > 1 . 9 . 3 < / version > 
 < / dependency > 
 < dependency > 
 < groupId > commons - cli < / groupId >

NEAREST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 83615f1 . . 9f8b90b 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 163 , 7 + 163 , 6 @ @ 
 < rule ref = " rulesets / java / naming . xml " > 
 < exclude name = " AbstractNaming " / > 
 < exclude name = " AvoidFieldNameMatchingMethodName " / > 
 - < exclude name = " BooleanGetMethodName " / > 
 < exclude name = " LongVariable " / > 
 < exclude name = " ShortClassName " / > 
 < exclude name = " ShortMethodName " / > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 index 7f3d3cf . . a2619a5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 @ @ - 56 , 7 + 56 , 7 @ @ public abstract class AbstractSuperCheck 
 private final DetailAST method ; 
 
 / * * true if the overriding method calls the super method * / 
 - private boolean callsSuper ; 
 + private boolean callingSuper ; 
 
 / * * 
 * Constructs a stack node for a method definition . 
 @ @ - 65 , 15 + 65 , 15 @ @ public abstract class AbstractSuperCheck 
 public MethodNode ( DetailAST ast ) 
 { 
 method = ast ; 
 - callsSuper = false ; 
 + callingSuper = false ; 
 } 
 
 / * * 
 * Records that the overriding method has a call to the super method . 
 * / 
 - public void setCallsSuper ( ) 
 + public void setCallingSuper ( ) 
 { 
 - callsSuper = true ; 
 + callingSuper = true ; 
 } 
 
 / * * 
 @ @ - 82 , 9 + 82 , 9 @ @ public abstract class AbstractSuperCheck 
 * @ return true if the overriding method has a call to the super 
 * method . 
 * / 
 - public boolean getCallsSuper ( ) 
 + public boolean isCallingSuper ( ) 
 { 
 - return callsSuper ; 
 + return callingSuper ; 
 } 
 
 / * * 
 @ @ - 138 , 7 + 138 , 7 @ @ public abstract class AbstractSuperCheck 
 } 
 else if ( isSuperCall ( ast ) ) { 
 final MethodNode methodNode = methodStack . getLast ( ) ; 
 - methodNode . setCallsSuper ( ) ; 
 + methodNode . setCallingSuper ( ) ; 
 } 
 } 
 
 @ @ - 206 , 7 + 206 , 7 @ @ public abstract class AbstractSuperCheck 
 if ( isOverridingMethod ( ast ) ) { 
 final MethodNode methodNode = 
 methodStack . removeLast ( ) ; 
 - if ( ! methodNode . getCallsSuper ( ) ) { 
 + if ( ! methodNode . isCallingSuper ( ) ) { 
 final DetailAST methodAST = methodNode . getMethod ( ) ; 
 final DetailAST nameAST = 
 methodAST . findFirstToken ( TokenTypes . IDENT ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index 5f1e23e . . d8a710b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 81 , 13 + 81 , 6 @ @ public class RequireThisCheck extends DeclarationCollector 
 { 
 this . checkFields = checkFields ; 
 } 
 - / * * 
 - * @ return true if we should check fields usage false otherwise . 
 - * / 
 - public boolean getCheckFields ( ) 
 - { 
 - return checkFields ; 
 - } 
 
 / * * 
 * Setter for checkMethods property . 
 @ @ - 97 , 13 + 90 , 6 @ @ public class RequireThisCheck extends DeclarationCollector 
 { 
 this . checkMethods = checkMethods ; 
 } 
 - / * * 
 - * @ return true if we should check methods usage false otherwise . 
 - * / 
 - public boolean getCheckMethods ( ) 
 - { 
 - return checkMethods ; 
 - } 
 
 @ Override 
 public int [ ] getDefaultTokens ( ) 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheck . java 
 index 739782e . . ae72b41 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / IndentationCheck . java 
 @ @ - 117 , 7 + 117 , 7 @ @ public class IndentationCheck extends Check 
 * Get forcing strict condition . 
 * @ return forceStrictCondition value . 
 * / 
 - public boolean getForceStrictCondition ( ) 
 + public boolean isForceStrictCondition ( ) 
 { 
 return forceStrictCondition ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 index 28d4c37 . . bc762dc 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / indentation / LineWrappingHandler . java 
 @ @ - 80 , 7 + 80 , 7 @ @ public class LineWrappingHandler 
 this . firstNode = firstNode ; 
 this . lastNode = lastNode ; 
 indentLevel = indentCheck . getLineWrappingIndentation ( ) ; 
 - forceStrictCondition = indentCheck . getForceStrictCondition ( ) ; 
 + forceStrictCondition = indentCheck . isForceStrictCondition ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java 
 index 7a8ade9 . . 511427d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractAccessControlNameCheck . java 
 @ @ - 114 , 12 + 114 , 6 @ @ public abstract class AbstractAccessControlNameCheck 
 applyToPublic = applyTo ; 
 } 
 
 - / * * @ return true if the check should be applied to public members . * / 
 - public boolean getApplyToPublic ( ) 
 - { 
 - return applyToPublic ; 
 - } 
 - 
 / * * 
 * Sets whether we should apply the check to protected members . 
 * 
 @ @ - 130 , 12 + 124 , 6 @ @ public abstract class AbstractAccessControlNameCheck 
 applyToProtected = applyTo ; 
 } 
 
 - / * * @ return true if the check should be applied to protected members . * / 
 - public boolean getApplyToProtected ( ) 
 - { 
 - return applyToProtected ; 
 - } 
 - 
 / * * 
 * Sets whether we should apply the check to package - private members . 
 * 
 @ @ - 147 , 14 + 135 , 6 @ @ public abstract class AbstractAccessControlNameCheck 
 } 
 
 / * * 
 - * @ return true if the check should be applied to package - private members . 
 - * / 
 - public boolean getApplyToPackage ( ) 
 - { 
 - return applyToPackage ; 
 - } 
 - 
 - / * * 
 * Sets whether we should apply the check to private members . 
 * 
 * @ param applyTo new value of the property . 
 @ @ - 163 , 10 + 143 , 4 @ @ public abstract class AbstractAccessControlNameCheck 
 { 
 applyToPrivate = applyTo ; 
 } 
 - 
 - / * * @ return true if the check should be applied to private members . * / 
 - public boolean getApplyToPrivate ( ) 
 - { 
 - return applyToPrivate ; 
 - } 
 }
