BLEU SCORE: 0.015542791893293221

TEST MSG: Issue # 3110 : fix localization for TranslationCheckTest and IllegalInstantiationCheckTest
GENERATED MSG: Drinking some more of the " Google Collections " Kool - Aid .

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> index 20a60f9 . . 2c747ce 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ import java . lang . reflect . Method ; <nl> import java . util . Set ; <nl> import java . util . SortedSet ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . Definitions ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> import org . mockito . ArgumentCaptor ; <nl> @ @ - 144 , 8 + 145 , 7 @ @ public class TranslationCheckTest extends BaseCheckTestSupport { <nl> logIoException . invoke ( check , new IOException ( " test exception " ) , file ) ; <nl> <nl> Mockito . verify ( dispatcher , times ( 1 ) ) . fireErrors ( any ( String . class ) , captor . capture ( ) ) ; <nl> - assertEquals ( " Invalid exception message " , " Got an exception - test exception " , <nl> - captor . getValue ( ) . first ( ) . getMessage ( ) ) ; <nl> + assertThat ( captor . getValue ( ) . first ( ) . getMessage ( ) , endsWith ( " - test exception " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> index 6c65ef6 . . b90314e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> @ @ - 24 , 16 + 24 , 13 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalInstantiation <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> + import com . puppycrawl . tools . checkstyle . Definitions ; <nl> + import com . puppycrawl . tools . checkstyle . api . * ; <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> - import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> - import com . puppycrawl . tools . checkstyle . api . LocalizedMessages ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class IllegalInstantiationCheckTest <nl> @ @ - 171 , 8 + 168 , 12 @ @ public class IllegalInstantiationCheckTest <nl> Assert . assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; <nl> <nl> check . finishTree ( newAst ) ; <nl> + final LocalizedMessage addExceptionMessage = new LocalizedMessage ( 0 , <nl> + " com . puppycrawl . tools . checkstyle . checks . coding . messages " , " instantiation . avoid " , <nl> + new String [ ] { " java . lang . Boolean " } , null , <nl> + getClass ( ) , null ) ; <nl> Assert . assertEquals ( " Invalid exception message " , <nl> - " Instantiation of java . lang . Boolean should be avoided . " , <nl> + addExceptionMessage . getMessage ( ) , <nl> messages . getMessages ( ) . first ( ) . getMessage ( ) ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> index ba8a0eb . . 4f364ed 100644 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> @ @ - 24 , 8 + 24 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> <nl> / * * <nl> - * Checks for the correct whitespace associated with the Generic tokens <nl> - * { @ link TokenTypes # GENERIC _ START } and { @ link TokenTypes # GENERIC _ END } . <nl> + * Checks that the whitespace around the Generic tokens & lt ; and & gt ; are <nl> + * correct to the < i > typical < / i > convention . The convention is not configurable . <nl> * @ author Oliver Burn <nl> * / <nl> public class GenericWhitespaceCheck extends Check

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 index 20a60f9 . . 2c747ce 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import java . lang . reflect . Method ; 
 import java . util . Set ; 
 import java . util . SortedSet ; 
 
 + import com . puppycrawl . tools . checkstyle . Definitions ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 import org . mockito . ArgumentCaptor ; 
 @ @ - 144 , 8 + 145 , 7 @ @ public class TranslationCheckTest extends BaseCheckTestSupport { 
 logIoException . invoke ( check , new IOException ( " test exception " ) , file ) ; 
 
 Mockito . verify ( dispatcher , times ( 1 ) ) . fireErrors ( any ( String . class ) , captor . capture ( ) ) ; 
 - assertEquals ( " Invalid exception message " , " Got an exception - test exception " , 
 - captor . getValue ( ) . first ( ) . getMessage ( ) ) ; 
 + assertThat ( captor . getValue ( ) . first ( ) . getMessage ( ) , endsWith ( " - test exception " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 index 6c65ef6 . . b90314e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 @ @ - 24 , 16 + 24 , 13 @ @ import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalInstantiation 
 import java . io . File ; 
 import java . io . IOException ; 
 
 + import com . puppycrawl . tools . checkstyle . Definitions ; 
 + import com . puppycrawl . tools . checkstyle . api . * ; 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 - import com . puppycrawl . tools . checkstyle . api . FileText ; 
 - import com . puppycrawl . tools . checkstyle . api . LocalizedMessages ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class IllegalInstantiationCheckTest 
 @ @ - 171 , 8 + 168 , 12 @ @ public class IllegalInstantiationCheckTest 
 Assert . assertEquals ( " No exception messages expected " , 0 , messages . size ( ) ) ; 
 
 check . finishTree ( newAst ) ; 
 + final LocalizedMessage addExceptionMessage = new LocalizedMessage ( 0 , 
 + " com . puppycrawl . tools . checkstyle . checks . coding . messages " , " instantiation . avoid " , 
 + new String [ ] { " java . lang . Boolean " } , null , 
 + getClass ( ) , null ) ; 
 Assert . assertEquals ( " Invalid exception message " , 
 - " Instantiation of java . lang . Boolean should be avoided . " , 
 + addExceptionMessage . getMessage ( ) , 
 messages . getMessages ( ) . first ( ) . getMessage ( ) ) ; 
 } 


NEAREST DIFF:
diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 index ba8a0eb . . 4f364ed 100644 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 @ @ - 24 , 8 + 24 , 8 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . api . Utils ; 
 
 / * * 
 - * Checks for the correct whitespace associated with the Generic tokens 
 - * { @ link TokenTypes # GENERIC _ START } and { @ link TokenTypes # GENERIC _ END } . 
 + * Checks that the whitespace around the Generic tokens & lt ; and & gt ; are 
 + * correct to the < i > typical < / i > convention . The convention is not configurable . 
 * @ author Oliver Burn 
 * / 
 public class GenericWhitespaceCheck extends Check
