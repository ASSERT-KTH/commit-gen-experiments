BLEU SCORE: 0.05522397783539471

TEST MSG: Issue # 2442 : added xdoc check validation
GENERATED MSG: Implemented UniqueProperties check

TEST DIFF (one line): diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 502084b . . 2159fd7 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 37 , 6 + 37 , 7 @ @ <nl> files = " AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java " / > <nl> <nl> < ! - - Tone down the checking for test code - - > <nl> + < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 342 " / > <nl> < suppress checks = " EmptyBlock " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > <nl> < suppress checks = " ImportControl " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> < suppress checks = " Javadoc " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > <nl> @ @ - 81 , 7 + 82 , 7 @ @ <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " AutomaticBean \ . java " / > <nl> < ! - - they are aggregators of logic , usage a several of classes are ok - - > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " ( Checker | TreeWalker | Main | CheckstyleAntTask | AbstractJavadocCheck ) \ . java " / > <nl> - < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport ) \ . java " / > <nl> + < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport | XDocsPagesTest ) \ . java " / > <nl> < ! - - a lot of GUI elements is OK - - > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " ParseTreeInfoPanel \ . java " / > <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> index 50693a6 . . ef30708 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java <nl> @ @ - 21 , 28 + 21 , 40 @ @ package com . puppycrawl . tools . checkstyle ; <nl> <nl> import static java . nio . charset . StandardCharsets . UTF _ 8 ; <nl> <nl> + import java . beans . PropertyDescriptor ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . StringReader ; <nl> + import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> + import java . util . HashSet ; <nl> + import java . util . LinkedHashSet ; <nl> import java . util . List ; <nl> import java . util . Locale ; <nl> import java . util . Properties ; <nl> + import java . util . Set ; <nl> + import java . util . TreeSet ; <nl> <nl> import javax . xml . parsers . DocumentBuilder ; <nl> import javax . xml . parsers . DocumentBuilderFactory ; <nl> import javax . xml . parsers . ParserConfigurationException ; <nl> <nl> + import org . apache . commons . beanutils . PropertyUtils ; <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> import org . w3c . dom . Document ; <nl> + import org . w3c . dom . Node ; <nl> import org . w3c . dom . NodeList ; <nl> import org . xml . sax . InputSource ; <nl> import org . xml . sax . SAXException ; <nl> <nl> import com . google . common . io . Files ; <nl> + import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> + import com . puppycrawl . tools . checkstyle . api . Check ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; <nl> + import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; <nl> <nl> public class XDocsPagesTest { <nl> private static final File JAVA _ SOURCES _ DIRECTORY = new File ( " src / main / java " ) ; <nl> @ @ - 85 , 6 + 97 , 7 @ @ public class XDocsPagesTest { <nl> " name = \ " SuppressWithNearbyCommentFilter \ " " , <nl> " name = \ " SuppressWarningsFilter \ " " , <nl> " name = \ " RegexpHeader \ " " , <nl> + " name = \ " RegexpSingleline \ " " , <nl> " name = \ " RegexpMultiline \ " " , <nl> " name = \ " JavadocPackage \ " " , <nl> " name = \ " NewlineAtEndOfFile \ " " , <nl> @ @ - 93 , 6 + 106 , 53 @ @ public class XDocsPagesTest { <nl> " name = \ " FileTabCharacter \ " " <nl> ) ; <nl> <nl> + private static final Set < String > CHECK _ PROPERTIES = getProperties ( Check . class ) ; <nl> + private static final Set < String > FILESET _ PROPERTIES = getProperties ( AbstractFileSetCheck . class ) ; <nl> + <nl> + private static final List < String > UNDOCUMENTED _ PROPERTIES = Arrays . asList ( <nl> + " SuppressWarningsCheck . compileFlags " , <nl> + " SuppressWithNearbyCommentFilter . fileContents " , <nl> + " IllegalTokenTextCheck . compileFlags " , <nl> + " ReturnCountCheck . compileFlags " , <nl> + " IllegalTypeCheck . compileFlags " , <nl> + " MutableExceptionCheck . compileFlags " , <nl> + " TrailingCommentCheck . compileFlags " , <nl> + " AbstractClassNameCheck . compileFlags " , <nl> + " ClassTypeParameterNameCheck . compileFlags " , <nl> + " ConstantNameCheck . compileFlags " , <nl> + " InterfaceTypeParameterNameCheck . compileFlags " , <nl> + " LocalFinalVariableNameCheck . compileFlags " , <nl> + " LocalVariableNameCheck . compileFlags " , <nl> + " MemberNameCheck . compileFlags " , <nl> + " MethodNameCheck . compileFlags " , <nl> + " MethodTypeParameterNameCheck . compileFlags " , <nl> + " PackageNameCheck . compileFlags " , <nl> + " ParameterNameCheck . compileFlags " , <nl> + " StaticVariableNameCheck . compileFlags " , <nl> + " TypeNameCheck . compileFlags " , <nl> + " RegexpCheck . compileFlags " , <nl> + " SuppressionCommentFilter . fileContents " , <nl> + " MissingSwitchDefaultCheck . limitedTokens " , <nl> + " MissingSwitchDefaultCheck . maximumDepth " , <nl> + " MissingSwitchDefaultCheck . maximumMessage " , <nl> + " MissingSwitchDefaultCheck . maximumNumber " , <nl> + " MissingSwitchDefaultCheck . minimumDepth " , <nl> + " MissingSwitchDefaultCheck . minimumMessage " , <nl> + " MissingSwitchDefaultCheck . minimumNumber " , <nl> + " MissingSwitchDefaultCheck . sumTokenCounts " , <nl> + " MissingCtorCheck . limitedTokens " , <nl> + " MissingCtorCheck . maximumDepth " , <nl> + " MissingCtorCheck . maximumMessage " , <nl> + " MissingCtorCheck . maximumNumber " , <nl> + " MissingCtorCheck . minimumDepth " , <nl> + " MissingCtorCheck . minimumMessage " , <nl> + " MissingCtorCheck . minimumNumber " , <nl> + " MissingCtorCheck . sumTokenCounts " , <nl> + " MethodNameCheck . applyToPackage " , <nl> + " MethodNameCheck . applyToPrivate " , <nl> + " MethodNameCheck . applyToProtected " , <nl> + " MethodNameCheck . applyToPublic " ) ; <nl> + <nl> @ Test <nl> public void testAllChecksPresentOnAvailableChecksPage ( ) throws IOException { <nl> final String availableChecks = Files . toString ( AVAILABLE _ CHECKS _ FILE , UTF _ 8 ) ; <nl> @ @ - 244 , 4 + 304 , 367 @ @ public class XDocsPagesTest { <nl> + unserializedSource ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void testAllCheckSections ( ) throws Exception { <nl> + final ClassLoader cl = XDocsPagesTest . class . getClassLoader ( ) ; <nl> + final Set < String > packageNames = PackageNamesLoader . getPackageNames ( cl ) ; <nl> + final ModuleFactory moduleFactory = new PackageObjectFactory ( packageNames , cl ) ; <nl> + <nl> + for ( File file : Files . fileTreeTraverser ( ) . preOrderTraversal ( XDOCS _ DIRECTORY ) ) { <nl> + final String fileName = file . getName ( ) ; <nl> + <nl> + if ( ! fileName . startsWith ( " config _ " ) | | " config _ reporting . xml " . equals ( fileName ) ) { <nl> + continue ; <nl> + } <nl> + <nl> + final String input = Files . toString ( file , UTF _ 8 ) ; <nl> + final Document document = getRawXml ( fileName , input , input ) ; <nl> + final NodeList sources = document . getElementsByTagName ( " section " ) ; <nl> + <nl> + for ( int position = 0 ; position < sources . getLength ( ) ; position + + ) { <nl> + final Node section = sources . item ( position ) ; <nl> + final String sectionName = section . getAttributes ( ) . getNamedItem ( " name " ) <nl> + . getNodeValue ( ) ; <nl> + <nl> + if ( " Content " . equals ( sectionName ) | | " Overview " . equals ( sectionName ) ) { <nl> + continue ; <nl> + } <nl> + <nl> + Assert . assertTrue ( fileName + " section ' " + sectionName <nl> + + " ' shouldn ' t end with ' Check ' " , ! sectionName . endsWith ( " Check " ) ) ; <nl> + <nl> + validateCheckSection ( moduleFactory , fileName , sectionName , section ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static void validateCheckSection ( ModuleFactory moduleFactory , String fileName , <nl> + String sectionName , Node section ) { <nl> + Object instance = null ; <nl> + <nl> + try { <nl> + instance = moduleFactory . createModule ( sectionName ) ; <nl> + } <nl> + catch ( CheckstyleException e ) { <nl> + Assert . fail ( fileName + " couldn ' t find class : " + sectionName ) ; <nl> + } <nl> + <nl> + int subSectionPos = 0 ; <nl> + for ( Node subSection : getChildrenElements ( section ) ) { <nl> + final String subSectionName = subSection . getAttributes ( ) . getNamedItem ( " name " ) <nl> + . getNodeValue ( ) ; <nl> + <nl> + / / can be in different orders , and completely optional <nl> + if ( " Notes " . equals ( subSectionName ) <nl> + | | " Rule Description " . equals ( subSectionName ) ) { <nl> + continue ; <nl> + } <nl> + <nl> + if ( subSectionPos = = 1 & & ! " Properties " . equals ( subSectionName ) ) { <nl> + validatePropertySection ( fileName , sectionName , null , instance ) ; <nl> + subSectionPos + + ; <nl> + } <nl> + <nl> + Assert . assertEquals ( fileName + " section ' " + sectionName <nl> + + " ' should be in order " , getSubSectionName ( subSectionPos ) , <nl> + subSectionName ) ; <nl> + <nl> + switch ( subSectionPos ) { <nl> + case 0 : <nl> + break ; <nl> + case 1 : <nl> + validatePropertySection ( fileName , sectionName , subSection , instance ) ; <nl> + break ; <nl> + case 2 : <nl> + break ; <nl> + case 3 : <nl> + validateUsageExample ( fileName , sectionName , subSection ) ; <nl> + break ; <nl> + case 4 : <nl> + validatePackageSection ( fileName , sectionName , subSection , instance ) ; <nl> + break ; <nl> + case 5 : <nl> + validateParentSection ( fileName , sectionName , subSection ) ; <nl> + break ; <nl> + default : <nl> + break ; <nl> + } <nl> + <nl> + subSectionPos + + ; <nl> + } <nl> + } <nl> + <nl> + private static Object getSubSectionName ( int subSectionPos ) { <nl> + final String result ; <nl> + <nl> + switch ( subSectionPos ) { <nl> + case 0 : <nl> + result = " Description " ; <nl> + break ; <nl> + case 1 : <nl> + result = " Properties " ; <nl> + break ; <nl> + case 2 : <nl> + result = " Examples " ; <nl> + break ; <nl> + case 3 : <nl> + result = " Example of Usage " ; <nl> + break ; <nl> + case 4 : <nl> + result = " Package " ; <nl> + break ; <nl> + case 5 : <nl> + result = " Parent Module " ; <nl> + break ; <nl> + default : <nl> + result = null ; <nl> + break ; <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + <nl> + private static void validatePropertySection ( String fileName , String sectionName , <nl> + Node subSection , Object instance ) { <nl> + final Set < String > properties = getProperties ( instance . getClass ( ) ) ; <nl> + final Class < ? > clss = instance . getClass ( ) ; <nl> + <nl> + / / remove global properties that don ' t need documentation <nl> + if ( hasParentModule ( sectionName ) ) { <nl> + properties . removeAll ( CHECK _ PROPERTIES ) ; <nl> + } <nl> + else if ( AbstractFileSetCheck . class . isAssignableFrom ( clss ) ) { <nl> + properties . removeAll ( FILESET _ PROPERTIES ) ; <nl> + <nl> + / / override <nl> + properties . add ( " fileExtensions " ) ; <nl> + } <nl> + <nl> + / / missing setter , should be fixed <nl> + if ( CustomImportOrderCheck . class . isAssignableFrom ( clss ) ) { <nl> + properties . add ( " samePackageMatchingDepth " ) ; <nl> + } <nl> + <nl> + / / remove undocumented properties <nl> + for ( String p : new HashSet < > ( properties ) ) { <nl> + if ( UNDOCUMENTED _ PROPERTIES . contains ( clss . getSimpleName ( ) + " . " + p ) ) { <nl> + properties . remove ( p ) ; <nl> + } <nl> + } <nl> + <nl> + final Check check ; <nl> + <nl> + if ( Check . class . isAssignableFrom ( clss ) ) { <nl> + check = ( Check ) instance ; <nl> + <nl> + if ( ! Arrays . equals ( check . getAcceptableTokens ( ) , check . getDefaultTokens ( ) ) <nl> + | | ! Arrays . equals ( check . getAcceptableTokens ( ) , check . getRequiredTokens ( ) ) ) { <nl> + properties . add ( " tokens " ) ; <nl> + } <nl> + } <nl> + else { <nl> + check = null ; <nl> + } <nl> + <nl> + if ( subSection ! = null ) { <nl> + Assert . assertTrue ( fileName + " section ' " + sectionName <nl> + + " ' should have no properties to show " , ! properties . isEmpty ( ) ) ; <nl> + <nl> + validatePropertySectionProperties ( fileName , sectionName , subSection , check , <nl> + properties ) ; <nl> + } <nl> + <nl> + Assert . assertTrue ( fileName + " section ' " + sectionName + " ' should show properties : " <nl> + + properties , properties . isEmpty ( ) ) ; <nl> + } <nl> + <nl> + private static void validatePropertySectionProperties ( String fileName , String sectionName , <nl> + Node subSection , Check check , Set < String > properties ) { <nl> + boolean skip = true ; <nl> + boolean didTokens = false ; <nl> + <nl> + for ( Node row : getChildrenElements ( getFirstChildElement ( subSection ) ) ) { <nl> + if ( skip ) { <nl> + skip = false ; <nl> + continue ; <nl> + } <nl> + Assert . assertFalse ( fileName + " section ' " + sectionName <nl> + + " ' should have token properties last " , didTokens ) ; <nl> + <nl> + final List < Node > columns = new ArrayList < > ( getChildrenElements ( row ) ) ; <nl> + <nl> + final String propertyName = columns . get ( 0 ) . getTextContent ( ) ; <nl> + Assert . assertTrue ( fileName + " section ' " + sectionName <nl> + + " ' should not contain the property : " + propertyName , <nl> + properties . remove ( propertyName ) ) ; <nl> + <nl> + if ( " tokens " . equals ( propertyName ) ) { <nl> + Assert . assertEquals ( fileName + " section ' " + sectionName <nl> + + " ' should have the basic token description " , " tokens to check " , <nl> + columns . get ( 1 ) . getTextContent ( ) ) ; <nl> + Assert . assertEquals ( fileName + " section ' " + sectionName <nl> + + " ' should have all the acceptable tokens " , " subset of tokens " <nl> + + getTokenText ( check . getAcceptableTokens ( ) , check . getRequiredTokens ( ) ) , <nl> + columns . get ( 2 ) . getTextContent ( ) . replaceAll ( " \ \ s + " , " " ) . trim ( ) ) ; <nl> + Assert . assertEquals ( fileName + " section ' " + sectionName <nl> + + " ' should have all the default tokens " , <nl> + getTokenText ( check . getDefaultTokens ( ) , check . getRequiredTokens ( ) ) , <nl> + columns . get ( 3 ) . getTextContent ( ) . replaceAll ( " \ \ s + " , " " ) . trim ( ) ) ; <nl> + didTokens = true ; <nl> + } <nl> + else { <nl> + Assert . assertFalse ( fileName + " section ' " + sectionName <nl> + + " ' should have a description for " + propertyName , columns . get ( 1 ) <nl> + . getTextContent ( ) . trim ( ) . isEmpty ( ) ) ; <nl> + Assert . assertFalse ( fileName + " section ' " + sectionName <nl> + + " ' should have a type for " + propertyName , columns . get ( 2 ) <nl> + . getTextContent ( ) . trim ( ) . isEmpty ( ) ) ; <nl> + / / default can be empty string <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static void validateUsageExample ( String fileName , String sectionName , Node subSection ) { <nl> + Assert . assertNull ( fileName + " section ' " + sectionName <nl> + + " ' should have no xml examples , they belong in ' Examples ' " , <nl> + findChildElementByTag ( subSection , " source " ) ) ; <nl> + } <nl> + <nl> + private static void validatePackageSection ( String fileName , String sectionName , <nl> + Node subSection , Object instance ) { <nl> + Assert . assertEquals ( fileName + " section ' " + sectionName <nl> + + " ' should have matching package " , instance . getClass ( ) . getPackage ( ) . getName ( ) , <nl> + subSection . getTextContent ( ) . trim ( ) ) ; <nl> + } <nl> + <nl> + private static void validateParentSection ( String fileName , String sectionName , <nl> + Node subSection ) { <nl> + final String expected ; <nl> + <nl> + if ( hasParentModule ( sectionName ) ) { <nl> + expected = " TreeWalker " ; <nl> + } <nl> + else { <nl> + expected = " Checker " ; <nl> + } <nl> + <nl> + Assert . assertEquals ( <nl> + fileName + " section ' " + sectionName + " ' should have matching parent " , <nl> + expected , subSection <nl> + . getTextContent ( ) . trim ( ) ) ; <nl> + } <nl> + <nl> + private static Set < Node > getChildrenElements ( Node node ) { <nl> + final Set < Node > result = new LinkedHashSet < > ( ) ; <nl> + <nl> + for ( Node child = node . getFirstChild ( ) ; child ! = null ; child = child . getNextSibling ( ) ) { <nl> + if ( child . getNodeType ( ) ! = Node . TEXT _ NODE ) { <nl> + result . add ( child ) ; <nl> + } <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + <nl> + private static Node getFirstChildElement ( Node node ) { <nl> + for ( Node child = node . getFirstChild ( ) ; child ! = null ; child = child . getNextSibling ( ) ) { <nl> + if ( child . getNodeType ( ) ! = Node . TEXT _ NODE ) { <nl> + return child ; <nl> + } <nl> + } <nl> + <nl> + return null ; <nl> + } <nl> + <nl> + private static Node findChildElementByTag ( Node node , String tag ) { <nl> + Node result = null ; <nl> + <nl> + for ( Node child = node . getFirstChild ( ) ; child ! = null ; child = child . getNextSibling ( ) ) { <nl> + if ( tag . equals ( child . getNodeName ( ) ) ) { <nl> + result = child ; <nl> + break ; <nl> + } <nl> + <nl> + if ( child . hasChildNodes ( ) ) { <nl> + result = findChildElementByTag ( child , tag ) ; <nl> + <nl> + if ( result ! = null ) { <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + <nl> + private static boolean hasParentModule ( String sectionName ) { <nl> + final String search = " \ " " + sectionName + " \ " " ; <nl> + boolean result = true ; <nl> + <nl> + for ( String find : XML _ FILESET _ LIST ) { <nl> + if ( find . contains ( search ) ) { <nl> + result = false ; <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + <nl> + private static Set < String > getProperties ( Class < ? > clss ) { <nl> + final Set < String > result = new TreeSet < > ( ) ; <nl> + final PropertyDescriptor [ ] map = PropertyUtils . getPropertyDescriptors ( clss ) ; <nl> + <nl> + for ( PropertyDescriptor p : map ) { <nl> + if ( p . getWriteMethod ( ) ! = null ) { <nl> + result . add ( p . getName ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + <nl> + private static String getTokenText ( int [ ] tokens , int . . . subtractions ) { <nl> + if ( Arrays . equals ( tokens , TokenUtils . getAllTokenIds ( ) ) & & subtractions . length = = 0 ) { <nl> + return " TokenTypes . " ; <nl> + } <nl> + else { <nl> + final StringBuilder result = new StringBuilder ( ) ; <nl> + boolean first = true ; <nl> + <nl> + for ( int token : tokens ) { <nl> + boolean found = false ; <nl> + <nl> + for ( int subtraction : subtractions ) { <nl> + if ( subtraction = = token ) { <nl> + found = true ; <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + if ( found ) { <nl> + continue ; <nl> + } <nl> + <nl> + if ( first ) { <nl> + first = false ; <nl> + } <nl> + else { <nl> + result . append ( " , " ) ; <nl> + } <nl> + <nl> + result . append ( TokenUtils . getTokenName ( token ) ) ; <nl> + } <nl> + <nl> + if ( result . length ( ) = = 0 ) { <nl> + result . append ( " empty " ) ; <nl> + } <nl> + else { <nl> + result . append ( " . " ) ; <nl> + } <nl> + <nl> + return result . toString ( ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml <nl> index ae832bc . . 1dead6f 100755 <nl> - - - a / src / xdocs / releasenotes . xml <nl> + + + b / src / xdocs / releasenotes . xml <nl> @ @ - 49 , 12 + 49 , 6 @ @ <nl> Thanks to Travis Schneeberger for patch # 1921815 ( bug # 1649038 ) . <nl> < / li > <nl> < / ul > <nl> - < p > Notes : < / p > <nl> - < ul > <nl> - < li > <nl> - . . . <nl> - < / li > <nl> - < / ul > <nl> < / section > <nl> <nl> < section name = " Release 5 . 4 " >

TEST DIFF:
diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 502084b . . 2159fd7 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 37 , 6 + 37 , 7 @ @ 
 files = " AbstractClassNameCheckTest . java | AbstractTypeAwareCheckTest . java | AbstractJavadocCheckTest . java | AbstractViolationReporterTest . java " / > 
 
 < ! - - Tone down the checking for test code - - > 
 + < suppress checks = " CyclomaticComplexity " files = " [ \ \ / ] XDocsPagesTest \ . java " lines = " 342 " / > 
 < suppress checks = " EmptyBlock " files = " . * [ \ \ / ] src [ \ \ / ] test [ \ \ / ] " / > 
 < suppress checks = " ImportControl " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 < suppress checks = " Javadoc " files = " . * [ \ \ / ] src [ \ \ / ] ( test | it ) [ \ \ / ] " / > 
 @ @ - 81 , 7 + 82 , 7 @ @ 
 < suppress checks = " ClassDataAbstractionCoupling " files = " AutomaticBean \ . java " / > 
 < ! - - they are aggregators of logic , usage a several of classes are ok - - > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " ( Checker | TreeWalker | Main | CheckstyleAntTask | AbstractJavadocCheck ) \ . java " / > 
 - < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport ) \ . java " / > 
 + < suppress checks = " ClassDataAbstractionCoupling " files = " ( CheckerTest | TreeWalkerTest | BaseCheckTestSupport | XDocsPagesTest ) \ . java " / > 
 < ! - - a lot of GUI elements is OK - - > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " ParseTreeInfoPanel \ . java " / > 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 index 50693a6 . . ef30708 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / XDocsPagesTest . java 
 @ @ - 21 , 28 + 21 , 40 @ @ package com . puppycrawl . tools . checkstyle ; 
 
 import static java . nio . charset . StandardCharsets . UTF _ 8 ; 
 
 + import java . beans . PropertyDescriptor ; 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . io . StringReader ; 
 + import java . util . ArrayList ; 
 import java . util . Arrays ; 
 + import java . util . HashSet ; 
 + import java . util . LinkedHashSet ; 
 import java . util . List ; 
 import java . util . Locale ; 
 import java . util . Properties ; 
 + import java . util . Set ; 
 + import java . util . TreeSet ; 
 
 import javax . xml . parsers . DocumentBuilder ; 
 import javax . xml . parsers . DocumentBuilderFactory ; 
 import javax . xml . parsers . ParserConfigurationException ; 
 
 + import org . apache . commons . beanutils . PropertyUtils ; 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 import org . w3c . dom . Document ; 
 + import org . w3c . dom . Node ; 
 import org . w3c . dom . NodeList ; 
 import org . xml . sax . InputSource ; 
 import org . xml . sax . SAXException ; 
 
 import com . google . common . io . Files ; 
 + import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 + import com . puppycrawl . tools . checkstyle . api . Check ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck ; 
 + import com . puppycrawl . tools . checkstyle . utils . TokenUtils ; 
 
 public class XDocsPagesTest { 
 private static final File JAVA _ SOURCES _ DIRECTORY = new File ( " src / main / java " ) ; 
 @ @ - 85 , 6 + 97 , 7 @ @ public class XDocsPagesTest { 
 " name = \ " SuppressWithNearbyCommentFilter \ " " , 
 " name = \ " SuppressWarningsFilter \ " " , 
 " name = \ " RegexpHeader \ " " , 
 + " name = \ " RegexpSingleline \ " " , 
 " name = \ " RegexpMultiline \ " " , 
 " name = \ " JavadocPackage \ " " , 
 " name = \ " NewlineAtEndOfFile \ " " , 
 @ @ - 93 , 6 + 106 , 53 @ @ public class XDocsPagesTest { 
 " name = \ " FileTabCharacter \ " " 
 ) ; 
 
 + private static final Set < String > CHECK _ PROPERTIES = getProperties ( Check . class ) ; 
 + private static final Set < String > FILESET _ PROPERTIES = getProperties ( AbstractFileSetCheck . class ) ; 
 + 
 + private static final List < String > UNDOCUMENTED _ PROPERTIES = Arrays . asList ( 
 + " SuppressWarningsCheck . compileFlags " , 
 + " SuppressWithNearbyCommentFilter . fileContents " , 
 + " IllegalTokenTextCheck . compileFlags " , 
 + " ReturnCountCheck . compileFlags " , 
 + " IllegalTypeCheck . compileFlags " , 
 + " MutableExceptionCheck . compileFlags " , 
 + " TrailingCommentCheck . compileFlags " , 
 + " AbstractClassNameCheck . compileFlags " , 
 + " ClassTypeParameterNameCheck . compileFlags " , 
 + " ConstantNameCheck . compileFlags " , 
 + " InterfaceTypeParameterNameCheck . compileFlags " , 
 + " LocalFinalVariableNameCheck . compileFlags " , 
 + " LocalVariableNameCheck . compileFlags " , 
 + " MemberNameCheck . compileFlags " , 
 + " MethodNameCheck . compileFlags " , 
 + " MethodTypeParameterNameCheck . compileFlags " , 
 + " PackageNameCheck . compileFlags " , 
 + " ParameterNameCheck . compileFlags " , 
 + " StaticVariableNameCheck . compileFlags " , 
 + " TypeNameCheck . compileFlags " , 
 + " RegexpCheck . compileFlags " , 
 + " SuppressionCommentFilter . fileContents " , 
 + " MissingSwitchDefaultCheck . limitedTokens " , 
 + " MissingSwitchDefaultCheck . maximumDepth " , 
 + " MissingSwitchDefaultCheck . maximumMessage " , 
 + " MissingSwitchDefaultCheck . maximumNumber " , 
 + " MissingSwitchDefaultCheck . minimumDepth " , 
 + " MissingSwitchDefaultCheck . minimumMessage " , 
 + " MissingSwitchDefaultCheck . minimumNumber " , 
 + " MissingSwitchDefaultCheck . sumTokenCounts " , 
 + " MissingCtorCheck . limitedTokens " , 
 + " MissingCtorCheck . maximumDepth " , 
 + " MissingCtorCheck . maximumMessage " , 
 + " MissingCtorCheck . maximumNumber " , 
 + " MissingCtorCheck . minimumDepth " , 
 + " MissingCtorCheck . minimumMessage " , 
 + " MissingCtorCheck . minimumNumber " , 
 + " MissingCtorCheck . sumTokenCounts " , 
 + " MethodNameCheck . applyToPackage " , 
 + " MethodNameCheck . applyToPrivate " , 
 + " MethodNameCheck . applyToProtected " , 
 + " MethodNameCheck . applyToPublic " ) ; 
 + 
 @ Test 
 public void testAllChecksPresentOnAvailableChecksPage ( ) throws IOException { 
 final String availableChecks = Files . toString ( AVAILABLE _ CHECKS _ FILE , UTF _ 8 ) ; 
 @ @ - 244 , 4 + 304 , 367 @ @ public class XDocsPagesTest { 
 + unserializedSource ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void testAllCheckSections ( ) throws Exception { 
 + final ClassLoader cl = XDocsPagesTest . class . getClassLoader ( ) ; 
 + final Set < String > packageNames = PackageNamesLoader . getPackageNames ( cl ) ; 
 + final ModuleFactory moduleFactory = new PackageObjectFactory ( packageNames , cl ) ; 
 + 
 + for ( File file : Files . fileTreeTraverser ( ) . preOrderTraversal ( XDOCS _ DIRECTORY ) ) { 
 + final String fileName = file . getName ( ) ; 
 + 
 + if ( ! fileName . startsWith ( " config _ " ) | | " config _ reporting . xml " . equals ( fileName ) ) { 
 + continue ; 
 + } 
 + 
 + final String input = Files . toString ( file , UTF _ 8 ) ; 
 + final Document document = getRawXml ( fileName , input , input ) ; 
 + final NodeList sources = document . getElementsByTagName ( " section " ) ; 
 + 
 + for ( int position = 0 ; position < sources . getLength ( ) ; position + + ) { 
 + final Node section = sources . item ( position ) ; 
 + final String sectionName = section . getAttributes ( ) . getNamedItem ( " name " ) 
 + . getNodeValue ( ) ; 
 + 
 + if ( " Content " . equals ( sectionName ) | | " Overview " . equals ( sectionName ) ) { 
 + continue ; 
 + } 
 + 
 + Assert . assertTrue ( fileName + " section ' " + sectionName 
 + + " ' shouldn ' t end with ' Check ' " , ! sectionName . endsWith ( " Check " ) ) ; 
 + 
 + validateCheckSection ( moduleFactory , fileName , sectionName , section ) ; 
 + } 
 + } 
 + } 
 + 
 + private static void validateCheckSection ( ModuleFactory moduleFactory , String fileName , 
 + String sectionName , Node section ) { 
 + Object instance = null ; 
 + 
 + try { 
 + instance = moduleFactory . createModule ( sectionName ) ; 
 + } 
 + catch ( CheckstyleException e ) { 
 + Assert . fail ( fileName + " couldn ' t find class : " + sectionName ) ; 
 + } 
 + 
 + int subSectionPos = 0 ; 
 + for ( Node subSection : getChildrenElements ( section ) ) { 
 + final String subSectionName = subSection . getAttributes ( ) . getNamedItem ( " name " ) 
 + . getNodeValue ( ) ; 
 + 
 + / / can be in different orders , and completely optional 
 + if ( " Notes " . equals ( subSectionName ) 
 + | | " Rule Description " . equals ( subSectionName ) ) { 
 + continue ; 
 + } 
 + 
 + if ( subSectionPos = = 1 & & ! " Properties " . equals ( subSectionName ) ) { 
 + validatePropertySection ( fileName , sectionName , null , instance ) ; 
 + subSectionPos + + ; 
 + } 
 + 
 + Assert . assertEquals ( fileName + " section ' " + sectionName 
 + + " ' should be in order " , getSubSectionName ( subSectionPos ) , 
 + subSectionName ) ; 
 + 
 + switch ( subSectionPos ) { 
 + case 0 : 
 + break ; 
 + case 1 : 
 + validatePropertySection ( fileName , sectionName , subSection , instance ) ; 
 + break ; 
 + case 2 : 
 + break ; 
 + case 3 : 
 + validateUsageExample ( fileName , sectionName , subSection ) ; 
 + break ; 
 + case 4 : 
 + validatePackageSection ( fileName , sectionName , subSection , instance ) ; 
 + break ; 
 + case 5 : 
 + validateParentSection ( fileName , sectionName , subSection ) ; 
 + break ; 
 + default : 
 + break ; 
 + } 
 + 
 + subSectionPos + + ; 
 + } 
 + } 
 + 
 + private static Object getSubSectionName ( int subSectionPos ) { 
 + final String result ; 
 + 
 + switch ( subSectionPos ) { 
 + case 0 : 
 + result = " Description " ; 
 + break ; 
 + case 1 : 
 + result = " Properties " ; 
 + break ; 
 + case 2 : 
 + result = " Examples " ; 
 + break ; 
 + case 3 : 
 + result = " Example of Usage " ; 
 + break ; 
 + case 4 : 
 + result = " Package " ; 
 + break ; 
 + case 5 : 
 + result = " Parent Module " ; 
 + break ; 
 + default : 
 + result = null ; 
 + break ; 
 + } 
 + 
 + return result ; 
 + } 
 + 
 + private static void validatePropertySection ( String fileName , String sectionName , 
 + Node subSection , Object instance ) { 
 + final Set < String > properties = getProperties ( instance . getClass ( ) ) ; 
 + final Class < ? > clss = instance . getClass ( ) ; 
 + 
 + / / remove global properties that don ' t need documentation 
 + if ( hasParentModule ( sectionName ) ) { 
 + properties . removeAll ( CHECK _ PROPERTIES ) ; 
 + } 
 + else if ( AbstractFileSetCheck . class . isAssignableFrom ( clss ) ) { 
 + properties . removeAll ( FILESET _ PROPERTIES ) ; 
 + 
 + / / override 
 + properties . add ( " fileExtensions " ) ; 
 + } 
 + 
 + / / missing setter , should be fixed 
 + if ( CustomImportOrderCheck . class . isAssignableFrom ( clss ) ) { 
 + properties . add ( " samePackageMatchingDepth " ) ; 
 + } 
 + 
 + / / remove undocumented properties 
 + for ( String p : new HashSet < > ( properties ) ) { 
 + if ( UNDOCUMENTED _ PROPERTIES . contains ( clss . getSimpleName ( ) + " . " + p ) ) { 
 + properties . remove ( p ) ; 
 + } 
 + } 
 + 
 + final Check check ; 
 + 
 + if ( Check . class . isAssignableFrom ( clss ) ) { 
 + check = ( Check ) instance ; 
 + 
 + if ( ! Arrays . equals ( check . getAcceptableTokens ( ) , check . getDefaultTokens ( ) ) 
 + | | ! Arrays . equals ( check . getAcceptableTokens ( ) , check . getRequiredTokens ( ) ) ) { 
 + properties . add ( " tokens " ) ; 
 + } 
 + } 
 + else { 
 + check = null ; 
 + } 
 + 
 + if ( subSection ! = null ) { 
 + Assert . assertTrue ( fileName + " section ' " + sectionName 
 + + " ' should have no properties to show " , ! properties . isEmpty ( ) ) ; 
 + 
 + validatePropertySectionProperties ( fileName , sectionName , subSection , check , 
 + properties ) ; 
 + } 
 + 
 + Assert . assertTrue ( fileName + " section ' " + sectionName + " ' should show properties : " 
 + + properties , properties . isEmpty ( ) ) ; 
 + } 
 + 
 + private static void validatePropertySectionProperties ( String fileName , String sectionName , 
 + Node subSection , Check check , Set < String > properties ) { 
 + boolean skip = true ; 
 + boolean didTokens = false ; 
 + 
 + for ( Node row : getChildrenElements ( getFirstChildElement ( subSection ) ) ) { 
 + if ( skip ) { 
 + skip = false ; 
 + continue ; 
 + } 
 + Assert . assertFalse ( fileName + " section ' " + sectionName 
 + + " ' should have token properties last " , didTokens ) ; 
 + 
 + final List < Node > columns = new ArrayList < > ( getChildrenElements ( row ) ) ; 
 + 
 + final String propertyName = columns . get ( 0 ) . getTextContent ( ) ; 
 + Assert . assertTrue ( fileName + " section ' " + sectionName 
 + + " ' should not contain the property : " + propertyName , 
 + properties . remove ( propertyName ) ) ; 
 + 
 + if ( " tokens " . equals ( propertyName ) ) { 
 + Assert . assertEquals ( fileName + " section ' " + sectionName 
 + + " ' should have the basic token description " , " tokens to check " , 
 + columns . get ( 1 ) . getTextContent ( ) ) ; 
 + Assert . assertEquals ( fileName + " section ' " + sectionName 
 + + " ' should have all the acceptable tokens " , " subset of tokens " 
 + + getTokenText ( check . getAcceptableTokens ( ) , check . getRequiredTokens ( ) ) , 
 + columns . get ( 2 ) . getTextContent ( ) . replaceAll ( " \ \ s + " , " " ) . trim ( ) ) ; 
 + Assert . assertEquals ( fileName + " section ' " + sectionName 
 + + " ' should have all the default tokens " , 
 + getTokenText ( check . getDefaultTokens ( ) , check . getRequiredTokens ( ) ) , 
 + columns . get ( 3 ) . getTextContent ( ) . replaceAll ( " \ \ s + " , " " ) . trim ( ) ) ; 
 + didTokens = true ; 
 + } 
 + else { 
 + Assert . assertFalse ( fileName + " section ' " + sectionName 
 + + " ' should have a description for " + propertyName , columns . get ( 1 ) 
 + . getTextContent ( ) . trim ( ) . isEmpty ( ) ) ; 
 + Assert . assertFalse ( fileName + " section ' " + sectionName 
 + + " ' should have a type for " + propertyName , columns . get ( 2 ) 
 + . getTextContent ( ) . trim ( ) . isEmpty ( ) ) ; 
 + / / default can be empty string 
 + } 
 + } 
 + } 
 + 
 + private static void validateUsageExample ( String fileName , String sectionName , Node subSection ) { 
 + Assert . assertNull ( fileName + " section ' " + sectionName 
 + + " ' should have no xml examples , they belong in ' Examples ' " , 
 + findChildElementByTag ( subSection , " source " ) ) ; 
 + } 
 + 
 + private static void validatePackageSection ( String fileName , String sectionName , 
 + Node subSection , Object instance ) { 
 + Assert . assertEquals ( fileName + " section ' " + sectionName 
 + + " ' should have matching package " , instance . getClass ( ) . getPackage ( ) . getName ( ) , 
 + subSection . getTextContent ( ) . trim ( ) ) ; 
 + } 
 + 
 + private static void validateParentSection ( String fileName , String sectionName , 
 + Node subSection ) { 
 + final String expected ; 
 + 
 + if ( hasParentModule ( sectionName ) ) { 
 + expected = " TreeWalker " ; 
 + } 
 + else { 
 + expected = " Checker " ; 
 + } 
 + 
 + Assert . assertEquals ( 
 + fileName + " section ' " + sectionName + " ' should have matching parent " , 
 + expected , subSection 
 + . getTextContent ( ) . trim ( ) ) ; 
 + } 
 + 
 + private static Set < Node > getChildrenElements ( Node node ) { 
 + final Set < Node > result = new LinkedHashSet < > ( ) ; 
 + 
 + for ( Node child = node . getFirstChild ( ) ; child ! = null ; child = child . getNextSibling ( ) ) { 
 + if ( child . getNodeType ( ) ! = Node . TEXT _ NODE ) { 
 + result . add ( child ) ; 
 + } 
 + } 
 + 
 + return result ; 
 + } 
 + 
 + private static Node getFirstChildElement ( Node node ) { 
 + for ( Node child = node . getFirstChild ( ) ; child ! = null ; child = child . getNextSibling ( ) ) { 
 + if ( child . getNodeType ( ) ! = Node . TEXT _ NODE ) { 
 + return child ; 
 + } 
 + } 
 + 
 + return null ; 
 + } 
 + 
 + private static Node findChildElementByTag ( Node node , String tag ) { 
 + Node result = null ; 
 + 
 + for ( Node child = node . getFirstChild ( ) ; child ! = null ; child = child . getNextSibling ( ) ) { 
 + if ( tag . equals ( child . getNodeName ( ) ) ) { 
 + result = child ; 
 + break ; 
 + } 
 + 
 + if ( child . hasChildNodes ( ) ) { 
 + result = findChildElementByTag ( child , tag ) ; 
 + 
 + if ( result ! = null ) { 
 + break ; 
 + } 
 + } 
 + } 
 + 
 + return result ; 
 + } 
 + 
 + private static boolean hasParentModule ( String sectionName ) { 
 + final String search = " \ " " + sectionName + " \ " " ; 
 + boolean result = true ; 
 + 
 + for ( String find : XML _ FILESET _ LIST ) { 
 + if ( find . contains ( search ) ) { 
 + result = false ; 
 + break ; 
 + } 
 + } 
 + 
 + return result ; 
 + } 
 + 
 + private static Set < String > getProperties ( Class < ? > clss ) { 
 + final Set < String > result = new TreeSet < > ( ) ; 
 + final PropertyDescriptor [ ] map = PropertyUtils . getPropertyDescriptors ( clss ) ; 
 + 
 + for ( PropertyDescriptor p : map ) { 
 + if ( p . getWriteMethod ( ) ! = null ) { 
 + result . add ( p . getName ( ) ) ; 
 + } 
 + } 
 + 
 + return result ; 
 + } 
 + 
 + private static String getTokenText ( int [ ] tokens , int . . . subtractions ) { 
 + if ( Arrays . equals ( tokens , TokenUtils . getAllTokenIds ( ) ) & & subtractions . length = = 0 ) { 
 + return " TokenTypes . " ; 
 + } 
 + else { 
 + final StringBuilder result = new StringBuilder ( ) ; 
 + boolean first = true ; 
 + 
 + for ( int token : tokens ) { 
 + boolean found = false ; 
 + 
 + for ( int subtraction : subtractions ) { 
 + if ( subtraction = = token ) { 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + 
 + if ( found ) { 
 + continue ; 
 + } 
 + 
 + if ( first ) { 
 + first = false ; 
 + } 
 + else { 
 + result . append ( " , " ) ; 
 + } 
 + 
 + result . append ( TokenUtils . getTokenName ( token ) ) ; 
 + } 
 + 
 + if ( result . length ( ) = = 0 ) { 
 + result . append ( " empty " ) ; 
 + } 
 + else { 
 + result . append ( " . " ) ; 
 + } 
 + 
 + return result . toString ( ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / xdocs / releasenotes . xml b / src / xdocs / releasenotes . xml 
 index ae832bc . . 1dead6f 100755 
 - - - a / src / xdocs / releasenotes . xml 
 + + + b / src / xdocs / releasenotes . xml 
 @ @ - 49 , 12 + 49 , 6 @ @ 
 Thanks to Travis Schneeberger for patch # 1921815 ( bug # 1649038 ) . 
 < / li > 
 < / ul > 
 - < p > Notes : < / p > 
 - < ul > 
 - < li > 
 - . . . 
 - < / li > 
 - < / ul > 
 < / section > 
 
 < section name = " Release 5 . 4 " >
