BLEU SCORE: 0.0114347838903095

TEST MSG: minor : issue link was added to explain skipped content section in xdoc / config . xml
GENERATED MSG: Update version number

TEST DIFF (one line): diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml <nl> index ae2282b . . 807a041 100644 <nl> - - - a / src / xdocs / config . xml <nl> + + + b / src / xdocs / config . xml <nl> @ @ - 14 , 7 + 14 , 8 @ @ <nl> < / head > <nl> <nl> < body > <nl> - < ! - - < section name = " Content " > <nl> + < ! - - till https : / / issues . apache . org / jira / browse / MSITE - 748 <nl> + < section name = " Content " > <nl> < macro name = " toc " > <nl> < param name = " fromDepth " value = " 1 " / > <nl> < param name = " toDepth " value = " 1 " / >
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 24f092c . . 9706d6e 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 610 , 10 + 610 , 10 @ @ For users of JDK 1 . 5 at least version 1 . 6 . 2 of Ant is required . <nl> < doclet name = " com . puppycrawl . tools . checkstyle . doclets . CheckDocsDoclet " <nl> path = " target / checkstyle " > <nl> < / doclet > <nl> - < packageset dir = " src / checkstyle " > <nl> - < include name = " * * / checks / * * " / > <nl> - < include name = " * * / checks " / > <nl> - < / packageset > <nl> + < fileset dir = " src / checkstyle " > <nl> + < include name = " * * / checks / * * / * Check . java " / > <nl> + < exclude name = " * * / checks / j2ee / AbstractInterfaceCheck . java " / > <nl> + < / fileset > <nl> < / javadoc > <nl> <nl> < taskdef name = " anakia " classname = " org . apache . velocity . anakia . AnakiaTask " > <nl> diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index b602016 . . 11a2447 100755 <nl> - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 28 , 8 + 28 , 8 @ @ import java . util . Iterator ; <nl> import java . util . LinkedList ; <nl> <nl> / * * <nl> - * < p > Checks that code doesn ' t rely on the & quot ; this . & quot ; default , <nl> - * i . e . references to instance variables and methods of the present <nl> + * < p > Checks that code doesn ' t rely on the & quot ; this & quot ; default . <nl> + * That is references to instance variables and methods of the present <nl> * object are explicitly of the form & quot ; this . varName & quot ; or <nl> * & quot ; this . methodName ( args ) & quot ; . <nl> * < / p > <nl> diff - - git a / src / xdocs / config _ import . xml b / src / xdocs / config _ import . xml <nl> deleted file mode 100755 <nl> index 1aeb16c . . 0000000 <nl> - - - a / src / xdocs / config _ import . xml <nl> + + + / dev / null <nl> @ @ - 1 , 313 + 0 , 0 @ @ <nl> - < ? xml version = " 1 . 0 " encoding = " ISO - 8859 - 1 " ? > <nl> - <nl> - < document > <nl> - <nl> - < properties > <nl> - < title > Imports < / title > <nl> - < author email = " checkstyle - devel @ lists . sourceforge . net " > Checkstyle Development Team < / author > <nl> - < / properties > <nl> - <nl> - < body > <nl> - < section name = " AvoidStarImport " > <nl> - < subsection name = " Description " > <nl> - < p > <nl> - Checks that there are no import statements that use the * notation . <nl> - < / p > <nl> - <nl> - < p > <nl> - Rationale : Importing all classes from a package leads to tight <nl> - coupling between packages and might lead to problems when a new <nl> - version of a library introduces name clashes . <nl> - < / p > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Properties " > <nl> - < table > <nl> - < tr > <nl> - < th > name < / th > <nl> - < th > description < / th > <nl> - < th > type < / th > <nl> - < th > default value < / th > <nl> - < / tr > <nl> - < tr > <nl> - < td > excludes < / td > <nl> - < td > <nl> - packages where star imports are allowed . Note that this property <nl> - is not recursive , subpackages of excluded packages are not <nl> - automatically excluded . <nl> - < / td > <nl> - < td > < a href = " property _ types . html # stringSet " > list of strings < / a > < / td > <nl> - < td > < span class = " default " > empty list < / span > < / td > <nl> - < / tr > <nl> - < / table > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Example " > <nl> - < p > <nl> - An example how to configure the check so that star imports from <nl> - java . io and java . net are allowed : <nl> - < / p > <nl> - <nl> - < source > <nl> - & lt ; module name = " AvoidStarImport " & gt ; <nl> - & lt ; property name = " excludes " value = " java . io , java . net " / & gt ; <nl> - & lt ; / module & gt ; <nl> - < / source > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Package " > <nl> - < p > com . puppycrawl . tools . checkstyle . checks . imports < / p > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Parent Module " > <nl> - < p > <nl> - < a href = " config . html # treewalker " > TreeWalker < / a > <nl> - < / p > <nl> - < / subsection > <nl> - < / section > <nl> - <nl> - < section name = " IllegalImport " > <nl> - < subsection name = " Description " > <nl> - < p > <nl> - Checks for imports from a set of illegal packages . By default , the <nl> - check rejects all < span class = " code " > sun . * < / span > packages since <nl> - programs that contain direct calls to the < span <nl> - class = " code " > sun . * < / span > packages are < a <nl> - href = " http : / / java . sun . com / products / jdk / faq / faq - sun - packages . html " > not <nl> - 100 % Pure Java < / a > . To reject other packages , set property < span <nl> - class = " code " > illegalPkgs < / span > to a list of the illegal packages . <nl> - < / p > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Properties " > <nl> - < table > <nl> - < tr > <nl> - < th > name < / th > <nl> - < th > description < / th > <nl> - < th > type < / th > <nl> - < th > default value < / th > <nl> - < / tr > <nl> - < tr > <nl> - < td > illegalPkgs < / td > <nl> - < td > packages to reject < / td > <nl> - < td > < a href = " property _ types . html # stringSet " > list of strings < / a > < / td > <nl> - < td > < span class = " default " > sun < / span > < / td > <nl> - < / tr > <nl> - < / table > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Examples " > <nl> - < p > <nl> - To configure the check : <nl> - < / p > <nl> - < source > <nl> - & lt ; module name = & quot ; IllegalImport & quot ; / & gt ; <nl> - < / source > <nl> - <nl> - < p > <nl> - To configure the check so that it rejects packages < span <nl> - class = " code " > java . io . * < / span > and < span <nl> - class = " code " > java . sql . * < / span > : <nl> - < / p > <nl> - < source > <nl> - & lt ; module name = & quot ; IllegalImport & quot ; & gt ; <nl> - & lt ; property name = & quot ; illegalPkgs & quot ; value = & quot ; java . io , java . sql & quot ; / & gt ; <nl> - & lt ; / module & gt ; <nl> - < / source > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Package " > <nl> - < p > <nl> - com . puppycrawl . tools . checkstyle . checks . imports <nl> - < / p > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Parent Module " > <nl> - < p > <nl> - < a href = " config . html # treewalker " > TreeWalker < / a > <nl> - < / p > <nl> - < / subsection > <nl> - < / section > <nl> - <nl> - < section name = " RedundantImport " > <nl> - < subsection name = " Description " > <nl> - < p > <nl> - Checks for redundant import statements . An import statement is <nl> - considered redundant if : <nl> - < / p > <nl> - <nl> - < ul > <nl> - < li > <nl> - It is a duplicate of another import . This is , when a class is <nl> - imported more than once . <nl> - < / li > <nl> - < li > <nl> - The class imported is from the < span class = " code " > java . lang < / span > <nl> - package , e . g . importing < span <nl> - class = " code " > java . lang . String < / span > . <nl> - < / li > <nl> - < li > <nl> - The class imported is from the same package . <nl> - < / li > <nl> - < / ul > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Example " > <nl> - < p > <nl> - To configure the check : <nl> - < / p > <nl> - < source > <nl> - & lt ; module name = & quot ; RedundantImport & quot ; / & gt ; <nl> - < / source > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Package " > <nl> - < p > <nl> - com . puppycrawl . tools . checkstyle . checks . imports <nl> - < / p > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Parent Module " > <nl> - < p > <nl> - < a href = " config . html # treewalker " > TreeWalker < / a > <nl> - < / p > <nl> - < / subsection > <nl> - < / section > <nl> - <nl> - < section name = " UnusedImports " > <nl> - < subsection name = " Description " > <nl> - < p > <nl> - Checks for unused import statements . Checkstyle uses a simple but <nl> - very reliable algorithm to report on unused import statements . An <nl> - import statement is considered unused if : <nl> - < / p > <nl> - <nl> - < ul > <nl> - < li > <nl> - It is not referenced in the file . The algorithm does not support <nl> - wild - card imports like < span class = " code " > import <nl> - java . io . * ; < / span > . Most IDE ' s provide very sophisticated checks <nl> - for imports that handle wild - card imports . <nl> - < / li > <nl> - <nl> - < li > <nl> - It is a duplicate of another import . This is when a class is <nl> - imported more than once . <nl> - < / li > <nl> - <nl> - < li > <nl> - The class imported is from the < span class = " code " > java . lang < / span > <nl> - package . For example importing < span <nl> - class = " code " > java . lang . String < / span > . <nl> - < / li > <nl> - <nl> - < li > <nl> - The class imported is from the same package . <nl> - < / li > <nl> - < / ul > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Example " > <nl> - < p > <nl> - To configure the check : <nl> - < / p > <nl> - < source > <nl> - & lt ; module name = & quot ; UnusedImports & quot ; / & gt ; <nl> - < / source > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Package " > <nl> - < p > <nl> - com . puppycrawl . tools . checkstyle . checks . imports <nl> - < / p > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Parent Module " > <nl> - < p > <nl> - < a href = " config . html # treewalker " > TreeWalker < / a > <nl> - < / p > <nl> - < / subsection > <nl> - < / section > <nl> - <nl> - < section name = " ImportOrder " > <nl> - < subsection name = " Description " > <nl> - < p > <nl> - Checks the ordering / grouping of imports . Ensures that groups of <nl> - imports come in a specific order ( e . g . , java . comes first , <nl> - javax . comes first , then everything else ) and imports within each <nl> - group are in lexicographic order . <nl> - < / p > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Properties " > <nl> - < table > <nl> - < tr > <nl> - < th > name < / th > <nl> - < th > description < / th > <nl> - < th > type < / th > <nl> - < th > default value < / th > <nl> - < / tr > <nl> - < tr > <nl> - < td > groups < / td > <nl> - < td > <nl> - list of imports groups ( every group identified by string it ' s <nl> - started ) <nl> - < / td > <nl> - < td > < a href = " property _ types . html # stringSet " > list of strings < / a > < / td > <nl> - < td > < span class = " default " > empty list < / span > < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > ordered < / td > <nl> - < td > whether imports within group should be sorted < / td > <nl> - < td > < a href = " property _ types . html # Boolean " > Boolean < / a > < / td > <nl> - < td > true < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > separated < / td > <nl> - < td > <nl> - whether imports groups should be separated by , at least , one <nl> - blank line <nl> - < / td > <nl> - < td > < a href = " property _ types . html # Boolean " > Boolean < / a > < / td > <nl> - < td > false < / td > <nl> - < / tr > <nl> - < tr > <nl> - < td > caseSensitive < / td > <nl> - < td > whether string comparision should be case sensitive or not < / td > <nl> - < td > < a href = " property _ types . html # Boolean " > Boolean < / a > < / td > <nl> - < td > true < / td > <nl> - < / tr > <nl> - < / table > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Example " > <nl> - < p > <nl> - To configure the check so that it requires & quot ; java & quot ; packages <nl> - first , than & quot ; javax & quot ; and than all other imports , imports <nl> - will be sorted in the groups and groups are separated by , at least , <nl> - on blank line : <nl> - < / p > <nl> - <nl> - < source > <nl> - & lt ; module name = & quot ; ImportOrder & quot ; > <nl> - & lt ; property name = & quot ; groups & quot ; value = & quot ; java , javax & quot ; / > <nl> - & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / > <nl> - & lt ; property name = & quot ; separated & quot ; value = & quot ; true & quot ; / > <nl> - & lt ; / module > <nl> - < / source > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Package " > <nl> - < p > <nl> - com . puppycrawl . tools . checkstyle . checks . imports <nl> - < / p > <nl> - < / subsection > <nl> - <nl> - < subsection name = " Parent Module " > <nl> - < p > <nl> - < a href = " config . html # treewalker " > TreeWalker < / a > <nl> - < / p > <nl> - < / subsection > <nl> - < / section > <nl> - < / body > <nl> - < / document > <nl> diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml <nl> new file mode 100755 <nl> index 0000000 . . 1aeb16c <nl> - - - / dev / null <nl> + + + b / src / xdocs / config _ imports . xml <nl> @ @ - 0 , 0 + 1 , 313 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " ISO - 8859 - 1 " ? > <nl> + <nl> + < document > <nl> + <nl> + < properties > <nl> + < title > Imports < / title > <nl> + < author email = " checkstyle - devel @ lists . sourceforge . net " > Checkstyle Development Team < / author > <nl> + < / properties > <nl> + <nl> + < body > <nl> + < section name = " AvoidStarImport " > <nl> + < subsection name = " Description " > <nl> + < p > <nl> + Checks that there are no import statements that use the * notation . <nl> + < / p > <nl> + <nl> + < p > <nl> + Rationale : Importing all classes from a package leads to tight <nl> + coupling between packages and might lead to problems when a new <nl> + version of a library introduces name clashes . <nl> + < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Properties " > <nl> + < table > <nl> + < tr > <nl> + < th > name < / th > <nl> + < th > description < / th > <nl> + < th > type < / th > <nl> + < th > default value < / th > <nl> + < / tr > <nl> + < tr > <nl> + < td > excludes < / td > <nl> + < td > <nl> + packages where star imports are allowed . Note that this property <nl> + is not recursive , subpackages of excluded packages are not <nl> + automatically excluded . <nl> + < / td > <nl> + < td > < a href = " property _ types . html # stringSet " > list of strings < / a > < / td > <nl> + < td > < span class = " default " > empty list < / span > < / td > <nl> + < / tr > <nl> + < / table > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Example " > <nl> + < p > <nl> + An example how to configure the check so that star imports from <nl> + java . io and java . net are allowed : <nl> + < / p > <nl> + <nl> + < source > <nl> + & lt ; module name = " AvoidStarImport " & gt ; <nl> + & lt ; property name = " excludes " value = " java . io , java . net " / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Package " > <nl> + < p > com . puppycrawl . tools . checkstyle . checks . imports < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Parent Module " > <nl> + < p > <nl> + < a href = " config . html # treewalker " > TreeWalker < / a > <nl> + < / p > <nl> + < / subsection > <nl> + < / section > <nl> + <nl> + < section name = " IllegalImport " > <nl> + < subsection name = " Description " > <nl> + < p > <nl> + Checks for imports from a set of illegal packages . By default , the <nl> + check rejects all < span class = " code " > sun . * < / span > packages since <nl> + programs that contain direct calls to the < span <nl> + class = " code " > sun . * < / span > packages are < a <nl> + href = " http : / / java . sun . com / products / jdk / faq / faq - sun - packages . html " > not <nl> + 100 % Pure Java < / a > . To reject other packages , set property < span <nl> + class = " code " > illegalPkgs < / span > to a list of the illegal packages . <nl> + < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Properties " > <nl> + < table > <nl> + < tr > <nl> + < th > name < / th > <nl> + < th > description < / th > <nl> + < th > type < / th > <nl> + < th > default value < / th > <nl> + < / tr > <nl> + < tr > <nl> + < td > illegalPkgs < / td > <nl> + < td > packages to reject < / td > <nl> + < td > < a href = " property _ types . html # stringSet " > list of strings < / a > < / td > <nl> + < td > < span class = " default " > sun < / span > < / td > <nl> + < / tr > <nl> + < / table > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Examples " > <nl> + < p > <nl> + To configure the check : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; IllegalImport & quot ; / & gt ; <nl> + < / source > <nl> + <nl> + < p > <nl> + To configure the check so that it rejects packages < span <nl> + class = " code " > java . io . * < / span > and < span <nl> + class = " code " > java . sql . * < / span > : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; IllegalImport & quot ; & gt ; <nl> + & lt ; property name = & quot ; illegalPkgs & quot ; value = & quot ; java . io , java . sql & quot ; / & gt ; <nl> + & lt ; / module & gt ; <nl> + < / source > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Package " > <nl> + < p > <nl> + com . puppycrawl . tools . checkstyle . checks . imports <nl> + < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Parent Module " > <nl> + < p > <nl> + < a href = " config . html # treewalker " > TreeWalker < / a > <nl> + < / p > <nl> + < / subsection > <nl> + < / section > <nl> + <nl> + < section name = " RedundantImport " > <nl> + < subsection name = " Description " > <nl> + < p > <nl> + Checks for redundant import statements . An import statement is <nl> + considered redundant if : <nl> + < / p > <nl> + <nl> + < ul > <nl> + < li > <nl> + It is a duplicate of another import . This is , when a class is <nl> + imported more than once . <nl> + < / li > <nl> + < li > <nl> + The class imported is from the < span class = " code " > java . lang < / span > <nl> + package , e . g . importing < span <nl> + class = " code " > java . lang . String < / span > . <nl> + < / li > <nl> + < li > <nl> + The class imported is from the same package . <nl> + < / li > <nl> + < / ul > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Example " > <nl> + < p > <nl> + To configure the check : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; RedundantImport & quot ; / & gt ; <nl> + < / source > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Package " > <nl> + < p > <nl> + com . puppycrawl . tools . checkstyle . checks . imports <nl> + < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Parent Module " > <nl> + < p > <nl> + < a href = " config . html # treewalker " > TreeWalker < / a > <nl> + < / p > <nl> + < / subsection > <nl> + < / section > <nl> + <nl> + < section name = " UnusedImports " > <nl> + < subsection name = " Description " > <nl> + < p > <nl> + Checks for unused import statements . Checkstyle uses a simple but <nl> + very reliable algorithm to report on unused import statements . An <nl> + import statement is considered unused if : <nl> + < / p > <nl> + <nl> + < ul > <nl> + < li > <nl> + It is not referenced in the file . The algorithm does not support <nl> + wild - card imports like < span class = " code " > import <nl> + java . io . * ; < / span > . Most IDE ' s provide very sophisticated checks <nl> + for imports that handle wild - card imports . <nl> + < / li > <nl> + <nl> + < li > <nl> + It is a duplicate of another import . This is when a class is <nl> + imported more than once . <nl> + < / li > <nl> + <nl> + < li > <nl> + The class imported is from the < span class = " code " > java . lang < / span > <nl> + package . For example importing < span <nl> + class = " code " > java . lang . String < / span > . <nl> + < / li > <nl> + <nl> + < li > <nl> + The class imported is from the same package . <nl> + < / li > <nl> + < / ul > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Example " > <nl> + < p > <nl> + To configure the check : <nl> + < / p > <nl> + < source > <nl> + & lt ; module name = & quot ; UnusedImports & quot ; / & gt ; <nl> + < / source > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Package " > <nl> + < p > <nl> + com . puppycrawl . tools . checkstyle . checks . imports <nl> + < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Parent Module " > <nl> + < p > <nl> + < a href = " config . html # treewalker " > TreeWalker < / a > <nl> + < / p > <nl> + < / subsection > <nl> + < / section > <nl> + <nl> + < section name = " ImportOrder " > <nl> + < subsection name = " Description " > <nl> + < p > <nl> + Checks the ordering / grouping of imports . Ensures that groups of <nl> + imports come in a specific order ( e . g . , java . comes first , <nl> + javax . comes first , then everything else ) and imports within each <nl> + group are in lexicographic order . <nl> + < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Properties " > <nl> + < table > <nl> + < tr > <nl> + < th > name < / th > <nl> + < th > description < / th > <nl> + < th > type < / th > <nl> + < th > default value < / th > <nl> + < / tr > <nl> + < tr > <nl> + < td > groups < / td > <nl> + < td > <nl> + list of imports groups ( every group identified by string it ' s <nl> + started ) <nl> + < / td > <nl> + < td > < a href = " property _ types . html # stringSet " > list of strings < / a > < / td > <nl> + < td > < span class = " default " > empty list < / span > < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > ordered < / td > <nl> + < td > whether imports within group should be sorted < / td > <nl> + < td > < a href = " property _ types . html # Boolean " > Boolean < / a > < / td > <nl> + < td > true < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > separated < / td > <nl> + < td > <nl> + whether imports groups should be separated by , at least , one <nl> + blank line <nl> + < / td > <nl> + < td > < a href = " property _ types . html # Boolean " > Boolean < / a > < / td > <nl> + < td > false < / td > <nl> + < / tr > <nl> + < tr > <nl> + < td > caseSensitive < / td > <nl> + < td > whether string comparision should be case sensitive or not < / td > <nl> + < td > < a href = " property _ types . html # Boolean " > Boolean < / a > < / td > <nl> + < td > true < / td > <nl> + < / tr > <nl> + < / table > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Example " > <nl> + < p > <nl> + To configure the check so that it requires & quot ; java & quot ; packages <nl> + first , than & quot ; javax & quot ; and than all other imports , imports <nl> + will be sorted in the groups and groups are separated by , at least , <nl> + on blank line : <nl> + < / p > <nl> + <nl> + < source > <nl> + & lt ; module name = & quot ; ImportOrder & quot ; > <nl> + & lt ; property name = & quot ; groups & quot ; value = & quot ; java , javax & quot ; / > <nl> + & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / > <nl> + & lt ; property name = & quot ; separated & quot ; value = & quot ; true & quot ; / > <nl> + & lt ; / module > <nl> + < / source > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Package " > <nl> + < p > <nl> + com . puppycrawl . tools . checkstyle . checks . imports <nl> + < / p > <nl> + < / subsection > <nl> + <nl> + < subsection name = " Parent Module " > <nl> + < p > <nl> + < a href = " config . html # treewalker " > TreeWalker < / a > <nl> + < / p > <nl> + < / subsection > <nl> + < / section > <nl> + < / body > <nl> + < / document >

TEST DIFF:
diff - - git a / src / xdocs / config . xml b / src / xdocs / config . xml 
 index ae2282b . . 807a041 100644 
 - - - a / src / xdocs / config . xml 
 + + + b / src / xdocs / config . xml 
 @ @ - 14 , 7 + 14 , 8 @ @ 
 < / head > 
 
 < body > 
 - < ! - - < section name = " Content " > 
 + < ! - - till https : / / issues . apache . org / jira / browse / MSITE - 748 
 + < section name = " Content " > 
 < macro name = " toc " > 
 < param name = " fromDepth " value = " 1 " / > 
 < param name = " toDepth " value = " 1 " / >

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index 24f092c . . 9706d6e 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 610 , 10 + 610 , 10 @ @ For users of JDK 1 . 5 at least version 1 . 6 . 2 of Ant is required . 
 < doclet name = " com . puppycrawl . tools . checkstyle . doclets . CheckDocsDoclet " 
 path = " target / checkstyle " > 
 < / doclet > 
 - < packageset dir = " src / checkstyle " > 
 - < include name = " * * / checks / * * " / > 
 - < include name = " * * / checks " / > 
 - < / packageset > 
 + < fileset dir = " src / checkstyle " > 
 + < include name = " * * / checks / * * / * Check . java " / > 
 + < exclude name = " * * / checks / j2ee / AbstractInterfaceCheck . java " / > 
 + < / fileset > 
 < / javadoc > 
 
 < taskdef name = " anakia " classname = " org . apache . velocity . anakia . AnakiaTask " > 
 diff - - git a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index b602016 . . 11a2447 100755 
 - - - a / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / checkstyle / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 28 , 8 + 28 , 8 @ @ import java . util . Iterator ; 
 import java . util . LinkedList ; 
 
 / * * 
 - * < p > Checks that code doesn ' t rely on the & quot ; this . & quot ; default , 
 - * i . e . references to instance variables and methods of the present 
 + * < p > Checks that code doesn ' t rely on the & quot ; this & quot ; default . 
 + * That is references to instance variables and methods of the present 
 * object are explicitly of the form & quot ; this . varName & quot ; or 
 * & quot ; this . methodName ( args ) & quot ; . 
 * < / p > 
 diff - - git a / src / xdocs / config _ import . xml b / src / xdocs / config _ import . xml 
 deleted file mode 100755 
 index 1aeb16c . . 0000000 
 - - - a / src / xdocs / config _ import . xml 
 + + + / dev / null 
 @ @ - 1 , 313 + 0 , 0 @ @ 
 - < ? xml version = " 1 . 0 " encoding = " ISO - 8859 - 1 " ? > 
 - 
 - < document > 
 - 
 - < properties > 
 - < title > Imports < / title > 
 - < author email = " checkstyle - devel @ lists . sourceforge . net " > Checkstyle Development Team < / author > 
 - < / properties > 
 - 
 - < body > 
 - < section name = " AvoidStarImport " > 
 - < subsection name = " Description " > 
 - < p > 
 - Checks that there are no import statements that use the * notation . 
 - < / p > 
 - 
 - < p > 
 - Rationale : Importing all classes from a package leads to tight 
 - coupling between packages and might lead to problems when a new 
 - version of a library introduces name clashes . 
 - < / p > 
 - < / subsection > 
 - 
 - < subsection name = " Properties " > 
 - < table > 
 - < tr > 
 - < th > name < / th > 
 - < th > description < / th > 
 - < th > type < / th > 
 - < th > default value < / th > 
 - < / tr > 
 - < tr > 
 - < td > excludes < / td > 
 - < td > 
 - packages where star imports are allowed . Note that this property 
 - is not recursive , subpackages of excluded packages are not 
 - automatically excluded . 
 - < / td > 
 - < td > < a href = " property _ types . html # stringSet " > list of strings < / a > < / td > 
 - < td > < span class = " default " > empty list < / span > < / td > 
 - < / tr > 
 - < / table > 
 - < / subsection > 
 - 
 - < subsection name = " Example " > 
 - < p > 
 - An example how to configure the check so that star imports from 
 - java . io and java . net are allowed : 
 - < / p > 
 - 
 - < source > 
 - & lt ; module name = " AvoidStarImport " & gt ; 
 - & lt ; property name = " excludes " value = " java . io , java . net " / & gt ; 
 - & lt ; / module & gt ; 
 - < / source > 
 - < / subsection > 
 - 
 - < subsection name = " Package " > 
 - < p > com . puppycrawl . tools . checkstyle . checks . imports < / p > 
 - < / subsection > 
 - 
 - < subsection name = " Parent Module " > 
 - < p > 
 - < a href = " config . html # treewalker " > TreeWalker < / a > 
 - < / p > 
 - < / subsection > 
 - < / section > 
 - 
 - < section name = " IllegalImport " > 
 - < subsection name = " Description " > 
 - < p > 
 - Checks for imports from a set of illegal packages . By default , the 
 - check rejects all < span class = " code " > sun . * < / span > packages since 
 - programs that contain direct calls to the < span 
 - class = " code " > sun . * < / span > packages are < a 
 - href = " http : / / java . sun . com / products / jdk / faq / faq - sun - packages . html " > not 
 - 100 % Pure Java < / a > . To reject other packages , set property < span 
 - class = " code " > illegalPkgs < / span > to a list of the illegal packages . 
 - < / p > 
 - < / subsection > 
 - 
 - < subsection name = " Properties " > 
 - < table > 
 - < tr > 
 - < th > name < / th > 
 - < th > description < / th > 
 - < th > type < / th > 
 - < th > default value < / th > 
 - < / tr > 
 - < tr > 
 - < td > illegalPkgs < / td > 
 - < td > packages to reject < / td > 
 - < td > < a href = " property _ types . html # stringSet " > list of strings < / a > < / td > 
 - < td > < span class = " default " > sun < / span > < / td > 
 - < / tr > 
 - < / table > 
 - < / subsection > 
 - 
 - < subsection name = " Examples " > 
 - < p > 
 - To configure the check : 
 - < / p > 
 - < source > 
 - & lt ; module name = & quot ; IllegalImport & quot ; / & gt ; 
 - < / source > 
 - 
 - < p > 
 - To configure the check so that it rejects packages < span 
 - class = " code " > java . io . * < / span > and < span 
 - class = " code " > java . sql . * < / span > : 
 - < / p > 
 - < source > 
 - & lt ; module name = & quot ; IllegalImport & quot ; & gt ; 
 - & lt ; property name = & quot ; illegalPkgs & quot ; value = & quot ; java . io , java . sql & quot ; / & gt ; 
 - & lt ; / module & gt ; 
 - < / source > 
 - < / subsection > 
 - 
 - < subsection name = " Package " > 
 - < p > 
 - com . puppycrawl . tools . checkstyle . checks . imports 
 - < / p > 
 - < / subsection > 
 - 
 - < subsection name = " Parent Module " > 
 - < p > 
 - < a href = " config . html # treewalker " > TreeWalker < / a > 
 - < / p > 
 - < / subsection > 
 - < / section > 
 - 
 - < section name = " RedundantImport " > 
 - < subsection name = " Description " > 
 - < p > 
 - Checks for redundant import statements . An import statement is 
 - considered redundant if : 
 - < / p > 
 - 
 - < ul > 
 - < li > 
 - It is a duplicate of another import . This is , when a class is 
 - imported more than once . 
 - < / li > 
 - < li > 
 - The class imported is from the < span class = " code " > java . lang < / span > 
 - package , e . g . importing < span 
 - class = " code " > java . lang . String < / span > . 
 - < / li > 
 - < li > 
 - The class imported is from the same package . 
 - < / li > 
 - < / ul > 
 - < / subsection > 
 - 
 - < subsection name = " Example " > 
 - < p > 
 - To configure the check : 
 - < / p > 
 - < source > 
 - & lt ; module name = & quot ; RedundantImport & quot ; / & gt ; 
 - < / source > 
 - < / subsection > 
 - 
 - < subsection name = " Package " > 
 - < p > 
 - com . puppycrawl . tools . checkstyle . checks . imports 
 - < / p > 
 - < / subsection > 
 - 
 - < subsection name = " Parent Module " > 
 - < p > 
 - < a href = " config . html # treewalker " > TreeWalker < / a > 
 - < / p > 
 - < / subsection > 
 - < / section > 
 - 
 - < section name = " UnusedImports " > 
 - < subsection name = " Description " > 
 - < p > 
 - Checks for unused import statements . Checkstyle uses a simple but 
 - very reliable algorithm to report on unused import statements . An 
 - import statement is considered unused if : 
 - < / p > 
 - 
 - < ul > 
 - < li > 
 - It is not referenced in the file . The algorithm does not support 
 - wild - card imports like < span class = " code " > import 
 - java . io . * ; < / span > . Most IDE ' s provide very sophisticated checks 
 - for imports that handle wild - card imports . 
 - < / li > 
 - 
 - < li > 
 - It is a duplicate of another import . This is when a class is 
 - imported more than once . 
 - < / li > 
 - 
 - < li > 
 - The class imported is from the < span class = " code " > java . lang < / span > 
 - package . For example importing < span 
 - class = " code " > java . lang . String < / span > . 
 - < / li > 
 - 
 - < li > 
 - The class imported is from the same package . 
 - < / li > 
 - < / ul > 
 - < / subsection > 
 - 
 - < subsection name = " Example " > 
 - < p > 
 - To configure the check : 
 - < / p > 
 - < source > 
 - & lt ; module name = & quot ; UnusedImports & quot ; / & gt ; 
 - < / source > 
 - < / subsection > 
 - 
 - < subsection name = " Package " > 
 - < p > 
 - com . puppycrawl . tools . checkstyle . checks . imports 
 - < / p > 
 - < / subsection > 
 - 
 - < subsection name = " Parent Module " > 
 - < p > 
 - < a href = " config . html # treewalker " > TreeWalker < / a > 
 - < / p > 
 - < / subsection > 
 - < / section > 
 - 
 - < section name = " ImportOrder " > 
 - < subsection name = " Description " > 
 - < p > 
 - Checks the ordering / grouping of imports . Ensures that groups of 
 - imports come in a specific order ( e . g . , java . comes first , 
 - javax . comes first , then everything else ) and imports within each 
 - group are in lexicographic order . 
 - < / p > 
 - < / subsection > 
 - 
 - < subsection name = " Properties " > 
 - < table > 
 - < tr > 
 - < th > name < / th > 
 - < th > description < / th > 
 - < th > type < / th > 
 - < th > default value < / th > 
 - < / tr > 
 - < tr > 
 - < td > groups < / td > 
 - < td > 
 - list of imports groups ( every group identified by string it ' s 
 - started ) 
 - < / td > 
 - < td > < a href = " property _ types . html # stringSet " > list of strings < / a > < / td > 
 - < td > < span class = " default " > empty list < / span > < / td > 
 - < / tr > 
 - < tr > 
 - < td > ordered < / td > 
 - < td > whether imports within group should be sorted < / td > 
 - < td > < a href = " property _ types . html # Boolean " > Boolean < / a > < / td > 
 - < td > true < / td > 
 - < / tr > 
 - < tr > 
 - < td > separated < / td > 
 - < td > 
 - whether imports groups should be separated by , at least , one 
 - blank line 
 - < / td > 
 - < td > < a href = " property _ types . html # Boolean " > Boolean < / a > < / td > 
 - < td > false < / td > 
 - < / tr > 
 - < tr > 
 - < td > caseSensitive < / td > 
 - < td > whether string comparision should be case sensitive or not < / td > 
 - < td > < a href = " property _ types . html # Boolean " > Boolean < / a > < / td > 
 - < td > true < / td > 
 - < / tr > 
 - < / table > 
 - < / subsection > 
 - 
 - < subsection name = " Example " > 
 - < p > 
 - To configure the check so that it requires & quot ; java & quot ; packages 
 - first , than & quot ; javax & quot ; and than all other imports , imports 
 - will be sorted in the groups and groups are separated by , at least , 
 - on blank line : 
 - < / p > 
 - 
 - < source > 
 - & lt ; module name = & quot ; ImportOrder & quot ; > 
 - & lt ; property name = & quot ; groups & quot ; value = & quot ; java , javax & quot ; / > 
 - & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / > 
 - & lt ; property name = & quot ; separated & quot ; value = & quot ; true & quot ; / > 
 - & lt ; / module > 
 - < / source > 
 - < / subsection > 
 - 
 - < subsection name = " Package " > 
 - < p > 
 - com . puppycrawl . tools . checkstyle . checks . imports 
 - < / p > 
 - < / subsection > 
 - 
 - < subsection name = " Parent Module " > 
 - < p > 
 - < a href = " config . html # treewalker " > TreeWalker < / a > 
 - < / p > 
 - < / subsection > 
 - < / section > 
 - < / body > 
 - < / document > 
 diff - - git a / src / xdocs / config _ imports . xml b / src / xdocs / config _ imports . xml 
 new file mode 100755 
 index 0000000 . . 1aeb16c 
 - - - / dev / null 
 + + + b / src / xdocs / config _ imports . xml 
 @ @ - 0 , 0 + 1 , 313 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " ISO - 8859 - 1 " ? > 
 + 
 + < document > 
 + 
 + < properties > 
 + < title > Imports < / title > 
 + < author email = " checkstyle - devel @ lists . sourceforge . net " > Checkstyle Development Team < / author > 
 + < / properties > 
 + 
 + < body > 
 + < section name = " AvoidStarImport " > 
 + < subsection name = " Description " > 
 + < p > 
 + Checks that there are no import statements that use the * notation . 
 + < / p > 
 + 
 + < p > 
 + Rationale : Importing all classes from a package leads to tight 
 + coupling between packages and might lead to problems when a new 
 + version of a library introduces name clashes . 
 + < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Properties " > 
 + < table > 
 + < tr > 
 + < th > name < / th > 
 + < th > description < / th > 
 + < th > type < / th > 
 + < th > default value < / th > 
 + < / tr > 
 + < tr > 
 + < td > excludes < / td > 
 + < td > 
 + packages where star imports are allowed . Note that this property 
 + is not recursive , subpackages of excluded packages are not 
 + automatically excluded . 
 + < / td > 
 + < td > < a href = " property _ types . html # stringSet " > list of strings < / a > < / td > 
 + < td > < span class = " default " > empty list < / span > < / td > 
 + < / tr > 
 + < / table > 
 + < / subsection > 
 + 
 + < subsection name = " Example " > 
 + < p > 
 + An example how to configure the check so that star imports from 
 + java . io and java . net are allowed : 
 + < / p > 
 + 
 + < source > 
 + & lt ; module name = " AvoidStarImport " & gt ; 
 + & lt ; property name = " excludes " value = " java . io , java . net " / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + < / subsection > 
 + 
 + < subsection name = " Package " > 
 + < p > com . puppycrawl . tools . checkstyle . checks . imports < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Parent Module " > 
 + < p > 
 + < a href = " config . html # treewalker " > TreeWalker < / a > 
 + < / p > 
 + < / subsection > 
 + < / section > 
 + 
 + < section name = " IllegalImport " > 
 + < subsection name = " Description " > 
 + < p > 
 + Checks for imports from a set of illegal packages . By default , the 
 + check rejects all < span class = " code " > sun . * < / span > packages since 
 + programs that contain direct calls to the < span 
 + class = " code " > sun . * < / span > packages are < a 
 + href = " http : / / java . sun . com / products / jdk / faq / faq - sun - packages . html " > not 
 + 100 % Pure Java < / a > . To reject other packages , set property < span 
 + class = " code " > illegalPkgs < / span > to a list of the illegal packages . 
 + < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Properties " > 
 + < table > 
 + < tr > 
 + < th > name < / th > 
 + < th > description < / th > 
 + < th > type < / th > 
 + < th > default value < / th > 
 + < / tr > 
 + < tr > 
 + < td > illegalPkgs < / td > 
 + < td > packages to reject < / td > 
 + < td > < a href = " property _ types . html # stringSet " > list of strings < / a > < / td > 
 + < td > < span class = " default " > sun < / span > < / td > 
 + < / tr > 
 + < / table > 
 + < / subsection > 
 + 
 + < subsection name = " Examples " > 
 + < p > 
 + To configure the check : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; IllegalImport & quot ; / & gt ; 
 + < / source > 
 + 
 + < p > 
 + To configure the check so that it rejects packages < span 
 + class = " code " > java . io . * < / span > and < span 
 + class = " code " > java . sql . * < / span > : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; IllegalImport & quot ; & gt ; 
 + & lt ; property name = & quot ; illegalPkgs & quot ; value = & quot ; java . io , java . sql & quot ; / & gt ; 
 + & lt ; / module & gt ; 
 + < / source > 
 + < / subsection > 
 + 
 + < subsection name = " Package " > 
 + < p > 
 + com . puppycrawl . tools . checkstyle . checks . imports 
 + < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Parent Module " > 
 + < p > 
 + < a href = " config . html # treewalker " > TreeWalker < / a > 
 + < / p > 
 + < / subsection > 
 + < / section > 
 + 
 + < section name = " RedundantImport " > 
 + < subsection name = " Description " > 
 + < p > 
 + Checks for redundant import statements . An import statement is 
 + considered redundant if : 
 + < / p > 
 + 
 + < ul > 
 + < li > 
 + It is a duplicate of another import . This is , when a class is 
 + imported more than once . 
 + < / li > 
 + < li > 
 + The class imported is from the < span class = " code " > java . lang < / span > 
 + package , e . g . importing < span 
 + class = " code " > java . lang . String < / span > . 
 + < / li > 
 + < li > 
 + The class imported is from the same package . 
 + < / li > 
 + < / ul > 
 + < / subsection > 
 + 
 + < subsection name = " Example " > 
 + < p > 
 + To configure the check : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; RedundantImport & quot ; / & gt ; 
 + < / source > 
 + < / subsection > 
 + 
 + < subsection name = " Package " > 
 + < p > 
 + com . puppycrawl . tools . checkstyle . checks . imports 
 + < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Parent Module " > 
 + < p > 
 + < a href = " config . html # treewalker " > TreeWalker < / a > 
 + < / p > 
 + < / subsection > 
 + < / section > 
 + 
 + < section name = " UnusedImports " > 
 + < subsection name = " Description " > 
 + < p > 
 + Checks for unused import statements . Checkstyle uses a simple but 
 + very reliable algorithm to report on unused import statements . An 
 + import statement is considered unused if : 
 + < / p > 
 + 
 + < ul > 
 + < li > 
 + It is not referenced in the file . The algorithm does not support 
 + wild - card imports like < span class = " code " > import 
 + java . io . * ; < / span > . Most IDE ' s provide very sophisticated checks 
 + for imports that handle wild - card imports . 
 + < / li > 
 + 
 + < li > 
 + It is a duplicate of another import . This is when a class is 
 + imported more than once . 
 + < / li > 
 + 
 + < li > 
 + The class imported is from the < span class = " code " > java . lang < / span > 
 + package . For example importing < span 
 + class = " code " > java . lang . String < / span > . 
 + < / li > 
 + 
 + < li > 
 + The class imported is from the same package . 
 + < / li > 
 + < / ul > 
 + < / subsection > 
 + 
 + < subsection name = " Example " > 
 + < p > 
 + To configure the check : 
 + < / p > 
 + < source > 
 + & lt ; module name = & quot ; UnusedImports & quot ; / & gt ; 
 + < / source > 
 + < / subsection > 
 + 
 + < subsection name = " Package " > 
 + < p > 
 + com . puppycrawl . tools . checkstyle . checks . imports 
 + < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Parent Module " > 
 + < p > 
 + < a href = " config . html # treewalker " > TreeWalker < / a > 
 + < / p > 
 + < / subsection > 
 + < / section > 
 + 
 + < section name = " ImportOrder " > 
 + < subsection name = " Description " > 
 + < p > 
 + Checks the ordering / grouping of imports . Ensures that groups of 
 + imports come in a specific order ( e . g . , java . comes first , 
 + javax . comes first , then everything else ) and imports within each 
 + group are in lexicographic order . 
 + < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Properties " > 
 + < table > 
 + < tr > 
 + < th > name < / th > 
 + < th > description < / th > 
 + < th > type < / th > 
 + < th > default value < / th > 
 + < / tr > 
 + < tr > 
 + < td > groups < / td > 
 + < td > 
 + list of imports groups ( every group identified by string it ' s 
 + started ) 
 + < / td > 
 + < td > < a href = " property _ types . html # stringSet " > list of strings < / a > < / td > 
 + < td > < span class = " default " > empty list < / span > < / td > 
 + < / tr > 
 + < tr > 
 + < td > ordered < / td > 
 + < td > whether imports within group should be sorted < / td > 
 + < td > < a href = " property _ types . html # Boolean " > Boolean < / a > < / td > 
 + < td > true < / td > 
 + < / tr > 
 + < tr > 
 + < td > separated < / td > 
 + < td > 
 + whether imports groups should be separated by , at least , one 
 + blank line 
 + < / td > 
 + < td > < a href = " property _ types . html # Boolean " > Boolean < / a > < / td > 
 + < td > false < / td > 
 + < / tr > 
 + < tr > 
 + < td > caseSensitive < / td > 
 + < td > whether string comparision should be case sensitive or not < / td > 
 + < td > < a href = " property _ types . html # Boolean " > Boolean < / a > < / td > 
 + < td > true < / td > 
 + < / tr > 
 + < / table > 
 + < / subsection > 
 + 
 + < subsection name = " Example " > 
 + < p > 
 + To configure the check so that it requires & quot ; java & quot ; packages 
 + first , than & quot ; javax & quot ; and than all other imports , imports 
 + will be sorted in the groups and groups are separated by , at least , 
 + on blank line : 
 + < / p > 
 + 
 + < source > 
 + & lt ; module name = & quot ; ImportOrder & quot ; > 
 + & lt ; property name = & quot ; groups & quot ; value = & quot ; java , javax & quot ; / > 
 + & lt ; property name = & quot ; ordered & quot ; value = & quot ; true & quot ; / > 
 + & lt ; property name = & quot ; separated & quot ; value = & quot ; true & quot ; / > 
 + & lt ; / module > 
 + < / source > 
 + < / subsection > 
 + 
 + < subsection name = " Package " > 
 + < p > 
 + com . puppycrawl . tools . checkstyle . checks . imports 
 + < / p > 
 + < / subsection > 
 + 
 + < subsection name = " Parent Module " > 
 + < p > 
 + < a href = " config . html # treewalker " > TreeWalker < / a > 
 + < / p > 
 + < / subsection > 
 + < / section > 
 + < / body > 
 + < / document >
