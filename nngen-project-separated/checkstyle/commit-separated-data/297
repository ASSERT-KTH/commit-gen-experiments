BLEU SCORE: 0.03089055318156698

TEST MSG: Issue # 5757 : switched simple log line / column to log ast
GENERATED MSG: Remove unnecessary this keyword . # 1555

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> index c07e082 . . 0dd8124 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java <nl> @ @ - 72 , 7 + 72 , 7 @ @ public class ArrayTypeStyleCheck extends AbstractCheck { <nl> | | variableAST . getColumnNo ( ) - ast . getColumnNo ( ) > - 1 ; <nl> <nl> if ( isJavaStyle ! = javaStyle ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; <nl> + log ( ast , MSG _ KEY ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java <nl> index 6057f28 . . d37a1fe 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java <nl> @ @ - 254 , 7 + 254 , 7 @ @ public class DescendantTokenCheck extends AbstractCheck { <nl> if ( minimumMessage = = null ) { <nl> minimumMessage = MSG _ KEY _ MIN ; <nl> } <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> + log ( ast , <nl> minimumMessage , <nl> String . valueOf ( tokenCount ) , <nl> String . valueOf ( minimumNumber ) , <nl> @ @ - 267 , 7 + 267 , 7 @ @ public class DescendantTokenCheck extends AbstractCheck { <nl> if ( maximumMessage = = null ) { <nl> maximumMessage = MSG _ KEY _ MAX ; <nl> } <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> + log ( ast , <nl> maximumMessage , <nl> String . valueOf ( tokenCount ) , <nl> String . valueOf ( maximumNumber ) , <nl> @ @ - 293 , 7 + 293 , 7 @ @ public class DescendantTokenCheck extends AbstractCheck { <nl> if ( minimumMessage = = null ) { <nl> minimumMessage = MSG _ KEY _ SUM _ MIN ; <nl> } <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> + log ( ast , <nl> minimumMessage , <nl> String . valueOf ( total ) , <nl> String . valueOf ( minimumNumber ) , name ) ; <nl> @ @ - 302 , 7 + 302 , 7 @ @ public class DescendantTokenCheck extends AbstractCheck { <nl> if ( maximumMessage = = null ) { <nl> maximumMessage = MSG _ KEY _ SUM _ MAX ; <nl> } <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> + log ( ast , <nl> maximumMessage , <nl> String . valueOf ( total ) , <nl> String . valueOf ( maximumNumber ) , name ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> index 9e58664 . . 8f588f9 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> @ @ - 184 , 7 + 184 , 7 @ @ public class FinalParametersCheck extends AbstractCheck { <nl> & & ! CheckUtils . isReceiverParameter ( param ) ) { <nl> final DetailAST paramName = param . findFirstToken ( TokenTypes . IDENT ) ; <nl> final DetailAST firstNode = CheckUtils . getFirstNode ( param ) ; <nl> - log ( firstNode . getLineNo ( ) , firstNode . getColumnNo ( ) , <nl> + log ( firstNode , <nl> MSG _ KEY , paramName . getText ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> index 552f69f . . e67fbc0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java <nl> @ @ - 169 , 8 + 169 , 7 @ @ public class SuppressWarningsCheck extends AbstractCheck { <nl> / / rare case with empty array ex : @ SuppressWarnings ( { } ) <nl> if ( warning = = null ) { <nl> / / check to see if empty warnings are forbidden - - are by default <nl> - logMatch ( warningHolder . getLineNo ( ) , <nl> - warningHolder . getColumnNo ( ) , " " ) ; <nl> + logMatch ( warningHolder , " " ) ; <nl> } <nl> else { <nl> while ( warning ! = null ) { <nl> @ @ - 181 , 8 + 180 , 7 @ @ public class SuppressWarningsCheck extends AbstractCheck { <nl> case TokenTypes . STRING _ LITERAL : <nl> final String warningText = <nl> removeQuotes ( warning . getFirstChild ( ) . getText ( ) ) ; <nl> - logMatch ( warning . getLineNo ( ) , <nl> - warning . getColumnNo ( ) , warningText ) ; <nl> + logMatch ( warning , warningText ) ; <nl> break ; <nl> / / conditional case <nl> / / ex : <nl> @ @ - 229 , 17 + 227 , 15 @ @ public class SuppressWarningsCheck extends AbstractCheck { <nl> <nl> / * * <nl> * This method looks for a warning that matches a configured expression . <nl> - * If found it logs a violation at the given line and column number . <nl> + * If found it logs a violation at the given AST . <nl> * <nl> - * @ param lineNo the line number <nl> - * @ param colNum the column number <nl> + * @ param ast the location to place the violation <nl> * @ param warningText the warning . <nl> * / <nl> - private void logMatch ( final int lineNo , <nl> - final int colNum , final String warningText ) { <nl> + private void logMatch ( DetailAST ast , final String warningText ) { <nl> final Matcher matcher = format . matcher ( warningText ) ; <nl> if ( matcher . matches ( ) ) { <nl> - log ( lineNo , colNum , <nl> + log ( ast , <nl> MSG _ KEY _ SUPPRESSED _ WARNING _ NOT _ ALLOWED , warningText ) ; <nl> } <nl> } <nl> @ @ - 304 , 7 + 300 , 7 @ @ public class SuppressWarningsCheck extends AbstractCheck { <nl> else { <nl> final String warningText = <nl> removeQuotes ( cond . getText ( ) ) ; <nl> - logMatch ( cond . getLineNo ( ) , cond . getColumnNo ( ) , warningText ) ; <nl> + logMatch ( cond , warningText ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java <nl> index a25ba7b . . 74fca69 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java <nl> @ @ - 121 , 7 + 121 , 7 @ @ public class AvoidNestedBlocksCheck extends AbstractCheck { <nl> & & ( ! allowInSwitchCase <nl> | | parent . getParent ( ) . getType ( ) ! = TokenTypes . CASE _ GROUP <nl> | | parent . getNumberOfChildren ( ) ! = 1 ) ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY _ BLOCK _ NESTED ) ; <nl> + log ( ast , MSG _ KEY _ BLOCK _ NESTED ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> index d429858 . . a750dec 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java <nl> @ @ - 164 , 8 + 164 , 7 @ @ public abstract class AbstractSuperCheck <nl> final DetailAST methodAST = methodNode . getMethod ( ) ; <nl> final DetailAST nameAST = <nl> methodAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> - log ( nameAST . getLineNo ( ) , nameAST . getColumnNo ( ) , <nl> - MSG _ KEY , nameAST . getText ( ) ) ; <nl> + log ( nameAST , MSG _ KEY , nameAST . getText ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java <nl> index 30d2839 . . c67ca3a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java <nl> @ @ - 65 , 7 + 65 , 7 @ @ public class AvoidInlineConditionalsCheck extends AbstractCheck { <nl> / / the only place a QUESTION token can occur is in inline conditionals <nl> / / so no need to do any further tricks here - pretty trivial Check ! <nl> <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; <nl> + log ( ast , MSG _ KEY ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java <nl> index 1ffabbf . . 5c4bbcc 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java <nl> @ @ - 96 , 8 + 96 , 7 @ @ public class CovariantEqualsCheck extends AbstractCheck { <nl> for ( DetailAST equalsAST : equalsMethods ) { <nl> final DetailAST nameNode = equalsAST <nl> . findFirstToken ( TokenTypes . IDENT ) ; <nl> - log ( nameNode . getLineNo ( ) , nameNode . getColumnNo ( ) , <nl> - MSG _ KEY ) ; <nl> + log ( nameNode , MSG _ KEY ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheck . java <nl> index 61de869 . . cb3a1e2 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheck . java <nl> @ @ - 68 , 7 + 68 , 7 @ @ public class EmptyStatementCheck extends AbstractCheck { <nl> <nl> @ Override <nl> public void visitToken ( DetailAST ast ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; <nl> + log ( ast , MSG _ KEY ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> index fc232b1 . . a88020e 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java <nl> @ @ - 278 , 12 + 278 , 10 @ @ public class EqualsAvoidNullCheck extends AbstractCheck { <nl> & & isCalledOnStringFieldOrVariable ( objCalledOn ) ) { <nl> final String methodName = methodCall . getFirstChild ( ) . getLastChild ( ) . getText ( ) ; <nl> if ( EQUALS . equals ( methodName ) ) { <nl> - log ( methodCall . getLineNo ( ) , methodCall . getColumnNo ( ) , <nl> - MSG _ EQUALS _ AVOID _ NULL ) ; <nl> + log ( methodCall , MSG _ EQUALS _ AVOID _ NULL ) ; <nl> } <nl> else { <nl> - log ( methodCall . getLineNo ( ) , methodCall . getColumnNo ( ) , <nl> - MSG _ EQUALS _ IGNORE _ CASE _ AVOID _ NULL ) ; <nl> + log ( methodCall , MSG _ EQUALS _ IGNORE _ CASE _ AVOID _ NULL ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> index e63f41e . . 398db53 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java <nl> @ @ - 164 , 10 + 164 , 10 @ @ public class EqualsHashCodeCheck <nl> return objBlockWithHashCode . remove ( detailASTDetailASTEntry . getKey ( ) ) = = null ; <nl> } ) . forEach ( detailASTDetailASTEntry - > { <nl> final DetailAST equalsAST = detailASTDetailASTEntry . getValue ( ) ; <nl> - log ( equalsAST . getLineNo ( ) , equalsAST . getColumnNo ( ) , MSG _ KEY _ HASHCODE ) ; <nl> + log ( equalsAST , MSG _ KEY _ HASHCODE ) ; <nl> } ) ; <nl> objBlockWithHashCode . forEach ( ( key , equalsAST ) - > { <nl> - log ( equalsAST . getLineNo ( ) , equalsAST . getColumnNo ( ) , MSG _ KEY _ EQUALS ) ; <nl> + log ( equalsAST , MSG _ KEY _ EQUALS ) ; <nl> } ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> index b8b492a . . 14d37b5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java <nl> @ @ - 271 , 7 + 271 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { <nl> if ( scope ! = null ) { <nl> for ( FinalVariableCandidate candidate : scope . values ( ) ) { <nl> final DetailAST ident = candidate . variableIdent ; <nl> - log ( ident . getLineNo ( ) , ident . getColumnNo ( ) , MSG _ KEY , ident . getText ( ) ) ; <nl> + log ( ident , MSG _ KEY , ident . getText ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheck . java <nl> index 1848ccd . . e10a13c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheck . java <nl> @ @ - 136 , 7 + 136 , 7 @ @ public class InnerAssignmentCheck <nl> if ( ! isInContext ( ast , ALLOWED _ ASSIGNMENT _ CONTEXT ) <nl> & & ! isInNoBraceControlStatement ( ast ) <nl> & & ! isInWhileIdiom ( ast ) ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; <nl> + log ( ast , MSG _ KEY ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> index 960e0bb . . 5d9643c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java <nl> @ @ - 284 , 8 + 284 , 7 @ @ public final class ModifiedControlVariableCheck extends AbstractCheck { <nl> <nl> if ( identAST ! = null & & identAST . getType ( ) = = TokenTypes . IDENT <nl> & & getCurrentVariables ( ) . contains ( identAST . getText ( ) ) ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> - MSG _ KEY , identAST . getText ( ) ) ; <nl> + log ( ast , MSG _ KEY , identAST . getText ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java <nl> index 60de9e4 . . ab71b12 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java <nl> @ @ - 188 , 8 + 188 , 7 @ @ public final class ParameterAssignmentCheck extends AbstractCheck { <nl> if ( identAST ! = null <nl> & & identAST . getType ( ) = = TokenTypes . IDENT <nl> & & parameterNames . contains ( identAST . getText ( ) ) ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> - MSG _ KEY , identAST . getText ( ) ) ; <nl> + log ( ast , MSG _ KEY , identAST . getText ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java <nl> index 8714bbb . . d539d69 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java <nl> @ @ - 254 , 10 + 254 , 10 @ @ public final class ReturnCountCheck extends AbstractCheck { <nl> public void checkCount ( DetailAST ast ) { <nl> if ( checking & & maxAllowed ! = null & & count > maxAllowed ) { <nl> if ( isVoidContext ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY _ VOID , count , maxAllowed ) ; <nl> + log ( ast , MSG _ KEY _ VOID , count , maxAllowed ) ; <nl> } <nl> else { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY , count , maxAllowed ) ; <nl> + log ( ast , MSG _ KEY , count , maxAllowed ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanExpressionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanExpressionCheck . java <nl> index 84d2b9d . . 88fc27c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanExpressionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanExpressionCheck . java <nl> @ @ - 74 , 8 + 74 , 7 @ @ public class SimplifyBooleanExpressionCheck <nl> case TokenTypes . LNOT : <nl> case TokenTypes . LOR : <nl> case TokenTypes . LAND : <nl> - log ( parent . getLineNo ( ) , parent . getColumnNo ( ) , <nl> - MSG _ KEY ) ; <nl> + log ( parent , MSG _ KEY ) ; <nl> break ; <nl> default : <nl> break ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java <nl> index 6ae841d . . 2034f62 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java <nl> @ @ - 83 , 7 + 83 , 7 @ @ public class SimplifyBooleanReturnCheck <nl> <nl> if ( canReturnOnlyBooleanLiteral ( thenStatement ) <nl> & & canReturnOnlyBooleanLiteral ( elseStatement ) ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; <nl> + log ( ast , MSG _ KEY ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheck . java <nl> index 904d14d . . 5fba50b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheck . java <nl> @ @ - 69 , 8 + 69 , 7 @ @ public class StringLiteralEqualityCheck extends AbstractCheck { <nl> <nl> if ( firstChild . getType ( ) = = TokenTypes . STRING _ LITERAL <nl> | | secondChild . getType ( ) = = TokenTypes . STRING _ LITERAL ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> - MSG _ KEY , ast . getText ( ) ) ; <nl> + log ( ast , MSG _ KEY , ast . getText ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> index 180e2d5 . . d380c05 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java <nl> @ @ - 146 , 7 + 146 , 7 @ @ public class DesignForExtensionCheck extends AbstractCheck { <nl> if ( canBeSubclassed ( classDef ) ) { <nl> final String className = classDef . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> final String methodName = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY , className , methodName ) ; <nl> + log ( ast , MSG _ KEY , className , methodName ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java <nl> index 576428b . . 2c8139b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java <nl> @ @ - 84 , 7 + 84 , 7 @ @ public class HideUtilityClassConstructorCheck extends AbstractCheck { <nl> & & ! hasNonStaticMethodOrField & & hasNonPrivateStaticMethodOrField ; <nl> <nl> if ( isUtilClass & & hasAccessibleCtor & & ! hasStaticModifier ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; <nl> + log ( ast , MSG _ KEY ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheck . java <nl> index a5f2040 . . 8e10f4f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheck . java <nl> @ @ - 71 , 8 + 71 , 7 @ @ public class InnerTypeLastCheck extends AbstractCheck { <nl> if ( ! ScopeUtils . isInCodeBlock ( ast ) <nl> & & ( nextSibling . getType ( ) = = TokenTypes . VARIABLE _ DEF <nl> | | nextSibling . getType ( ) = = TokenTypes . METHOD _ DEF ) ) { <nl> - log ( nextSibling . getLineNo ( ) , nextSibling . getColumnNo ( ) , <nl> - MSG _ KEY ) ; <nl> + log ( nextSibling , MSG _ KEY ) ; <nl> } <nl> nextSibling = nextSibling . getNextSibling ( ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> index 52fe86f . . 29af701 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java <nl> @ @ - 136 , 8 + 136 , 7 @ @ public final class MutableExceptionCheck extends AbstractCheck { <nl> ast . findFirstToken ( TokenTypes . MODIFIERS ) ; <nl> <nl> if ( modifiersAST . findFirstToken ( TokenTypes . FINAL ) = = null ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY , <nl> - ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ) ; <nl> + log ( ast , MSG _ KEY , ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java <nl> index 2c1da3f . . 536ae4a 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java <nl> @ @ - 128 , 8 + 128 , 7 @ @ public final class ThrowsCountCheck extends AbstractCheck { <nl> / / Account for all the commas ! <nl> final int count = ( ast . getChildCount ( ) + 1 ) / 2 ; <nl> if ( count > max ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY , <nl> - count , max ) ; <nl> + log ( ast , MSG _ KEY , count , max ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> index 3e1b631 . . 4b20cd1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java <nl> @ @ - 467 , 8 + 467 , 7 @ @ public class VisibilityModifierCheck <nl> . getNextSibling ( ) ; <nl> final String varName = varNameAST . getText ( ) ; <nl> if ( ! hasProperAccessModifier ( variableDef , varName ) ) { <nl> - log ( varNameAST . getLineNo ( ) , varNameAST . getColumnNo ( ) , <nl> - MSG _ KEY , varName ) ; <nl> + log ( varNameAST , MSG _ KEY , varName ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheck . java <nl> index 9bd33b9 . . f1e5eb1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheck . java <nl> @ @ - 113 , 18 + 113 , 16 @ @ public class RedundantImportCheck <nl> else if ( ast . getType ( ) = = TokenTypes . IMPORT ) { <nl> final FullIdent imp = FullIdent . createFullIdentBelow ( ast ) ; <nl> if ( isFromPackage ( imp . getText ( ) , " java . lang " ) ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ LANG , <nl> - imp . getText ( ) ) ; <nl> + log ( ast , MSG _ LANG , imp . getText ( ) ) ; <nl> } <nl> / / imports from unnamed package are not allowed , <nl> / / so we are checking SAME rule only for named packages <nl> else if ( pkgName ! = null & & isFromPackage ( imp . getText ( ) , pkgName ) ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ SAME , <nl> - imp . getText ( ) ) ; <nl> + log ( ast , MSG _ SAME , imp . getText ( ) ) ; <nl> } <nl> / / Check for a duplicate import <nl> imports . stream ( ) . filter ( full - > imp . getText ( ) . equals ( full . getText ( ) ) ) <nl> - . forEach ( full - > log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> + . forEach ( full - > log ( ast , <nl> MSG _ DUPLICATE , full . getLineNo ( ) , <nl> imp . getText ( ) ) ) ; <nl> <nl> @ @ - 136 , 7 + 134 , 7 @ @ public class RedundantImportCheck <nl> FullIdent . createFullIdent ( <nl> ast . getLastChild ( ) . getPreviousSibling ( ) ) ; <nl> staticImports . stream ( ) . filter ( full - > imp . getText ( ) . equals ( full . getText ( ) ) ) <nl> - . forEach ( full - > log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> + . forEach ( full - > log ( ast , <nl> MSG _ DUPLICATE , full . getLineNo ( ) , imp . getText ( ) ) ) ; <nl> <nl> staticImports . add ( imp ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java <nl> index b0598c9 . . bbfe306 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java <nl> @ @ - 246 , 8 + 246 , 7 @ @ public final class BooleanExpressionComplexityCheck extends AbstractCheck { <nl> if ( checking & & count > max ) { <nl> final DetailAST parentAST = ast . getParent ( ) ; <nl> <nl> - log ( parentAST . getLineNo ( ) , parentAST . getColumnNo ( ) , <nl> - MSG _ KEY , count , max ) ; <nl> + log ( parentAST , MSG _ KEY , count , max ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java <nl> index f3608e2 . . 22eefc8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java <nl> @ @ - 166 , 8 + 166 , 7 @ @ public class JavaNCSSCheck extends AbstractCheck { <nl> <nl> final int count = counter . getCount ( ) ; <nl> if ( count > methodMaximum ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ METHOD , <nl> - count , methodMaximum ) ; <nl> + log ( ast , MSG _ METHOD , count , methodMaximum ) ; <nl> } <nl> } <nl> else if ( tokenType = = TokenTypes . CLASS _ DEF ) { <nl> @ @ - 176 , 8 + 175 , 7 @ @ public class JavaNCSSCheck extends AbstractCheck { <nl> <nl> final int count = counter . getCount ( ) ; <nl> if ( count > classMaximum ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ CLASS , <nl> - count , classMaximum ) ; <nl> + log ( ast , MSG _ CLASS , count , classMaximum ) ; <nl> } <nl> } <nl> } <nl> @ @ - 189 , 8 + 187 , 7 @ @ public class JavaNCSSCheck extends AbstractCheck { <nl> <nl> final int count = counter . getCount ( ) ; <nl> if ( count > fileMaximum ) { <nl> - log ( rootAST . getLineNo ( ) , rootAST . getColumnNo ( ) , MSG _ FILE , <nl> - count , fileMaximum ) ; <nl> + log ( rootAST , MSG _ FILE , count , fileMaximum ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java <nl> index 47af6c1 . . 3adb3e4 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java <nl> @ @ - 118 , 15 + 118 , 14 @ @ public class ModifierOrderCheck <nl> final DetailAST error = checkOrderSuggestedByJls ( mods ) ; <nl> if ( error ! = null ) { <nl> if ( error . getType ( ) = = TokenTypes . ANNOTATION ) { <nl> - log ( error . getLineNo ( ) , error . getColumnNo ( ) , <nl> + log ( error , <nl> MSG _ ANNOTATION _ ORDER , <nl> error . getFirstChild ( ) . getText ( ) <nl> + error . getFirstChild ( ) . getNextSibling ( ) <nl> . getText ( ) ) ; <nl> } <nl> else { <nl> - log ( error . getLineNo ( ) , error . getColumnNo ( ) , <nl> - MSG _ MODIFIER _ ORDER , error . getText ( ) ) ; <nl> + log ( error , MSG _ MODIFIER _ ORDER , error . getText ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> index ba83543 . . 022d35f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java <nl> @ @ - 195 , 8 + 195 , 7 @ @ public class RedundantModifierCheck <nl> final DetailAST modifier = <nl> modifiers . findFirstToken ( tokenType ) ; <nl> if ( modifier ! = null ) { <nl> - log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , <nl> - MSG _ KEY , modifier . getText ( ) ) ; <nl> + log ( modifier , MSG _ KEY , modifier . getText ( ) ) ; <nl> } <nl> } <nl> } <nl> @ @ - 210 , 8 + 209 , 7 @ @ public class RedundantModifierCheck <nl> final DetailAST modifier = getFirstModifierAst ( modifiers ) ; <nl> <nl> if ( modifier ! = null ) { <nl> - log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , <nl> - MSG _ KEY , modifier . getText ( ) ) ; <nl> + log ( modifier , MSG _ KEY , modifier . getText ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 263 , 8 + 261 , 7 @ @ public class RedundantModifierCheck <nl> & & ast . getType ( ) ! = TokenTypes . CLASS _ DEF <nl> | | type = = TokenTypes . FINAL <nl> & & ast . getType ( ) ! = TokenTypes . CLASS _ DEF ) { <nl> - log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , <nl> - MSG _ KEY , modifier . getText ( ) ) ; <nl> + log ( modifier , MSG _ KEY , modifier . getText ( ) ) ; <nl> break ; <nl> } <nl> <nl> @ @ - 357 , 8 + 354 , 7 @ @ public class RedundantModifierCheck <nl> DetailAST astModifier = astModifiers . getFirstChild ( ) ; <nl> while ( astModifier ! = null ) { <nl> if ( astModifier . getType ( ) = = modifierType ) { <nl> - log ( astModifier . getLineNo ( ) , astModifier . getColumnNo ( ) , <nl> - MSG _ KEY , astModifier . getText ( ) ) ; <nl> + log ( astModifier , MSG _ KEY , astModifier . getText ( ) ) ; <nl> } <nl> <nl> astModifier = astModifier . getNextSibling ( ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java <nl> index 25d6631 . . aa018cc 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java <nl> @ @ - 118 , 13 + 118 , 11 @ @ public final class AbstractClassNameCheck extends AbstractCheck { <nl> if ( isAbstract ( ast ) ) { <nl> / / if class has abstract modifier <nl> if ( ! ignoreName & & ! isMatchingClassName ( className ) ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> - MSG _ ILLEGAL _ ABSTRACT _ CLASS _ NAME , className , format . pattern ( ) ) ; <nl> + log ( ast , MSG _ ILLEGAL _ ABSTRACT _ CLASS _ NAME , className , format . pattern ( ) ) ; <nl> } <nl> } <nl> else if ( ! ignoreModifier & & isMatchingClassName ( className ) ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> - MSG _ NO _ ABSTRACT _ CLASS _ MODIFIER , className ) ; <nl> + log ( ast , MSG _ NO _ ABSTRACT _ CLASS _ MODIFIER , className ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodNameCheck . java <nl> index ecce1e9 . . e9f19bf 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodNameCheck . java <nl> @ @ - 133 , 8 + 133 , 7 @ @ public class MethodNameCheck <nl> / / down the tree looking for the first ident . <nl> if ( classIdent ! = null <nl> & & method . getText ( ) . equals ( classIdent . getText ( ) ) ) { <nl> - log ( method . getLineNo ( ) , method . getColumnNo ( ) , <nl> - MSG _ KEY , method . getText ( ) ) ; <nl> + log ( method , MSG _ KEY , method . getText ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheck . java <nl> index 8f6c675 . . 22e0aac 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheck . java <nl> @ @ - 95 , 8 + 95 , 7 @ @ public class AnonInnerLengthCheck extends AbstractCheck { <nl> final int length = <nl> closingBrace . getLineNo ( ) - openingBrace . getLineNo ( ) + 1 ; <nl> if ( length > max ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY , <nl> - length , max ) ; <nl> + log ( ast , MSG _ KEY , length , max ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheck . java <nl> index a80b77b . . 8a49409 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheck . java <nl> @ @ - 150 , 8 + 150 , 7 @ @ public final class ExecutableStatementCountCheck <nl> private void leaveMemberDef ( DetailAST ast ) { <nl> final int count = context . getCount ( ) ; <nl> if ( count > max ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> - MSG _ KEY , count , max ) ; <nl> + log ( ast , MSG _ KEY , count , max ) ; <nl> } <nl> context = contextStack . pop ( ) ; <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheck . java <nl> index d8dcf51 . . 1c5e513 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheck . java <nl> @ @ - 96 , 8 + 96 , 7 @ @ public class MethodLengthCheck extends AbstractCheck { <nl> openingBrace . findFirstToken ( TokenTypes . RCURLY ) ; <nl> final int length = getLengthOfBlock ( openingBrace , closingBrace ) ; <nl> if ( length > max ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY , <nl> - length , max ) ; <nl> + log ( ast , MSG _ KEY , length , max ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> index 770be51 . . dffd9a6 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java <nl> @ @ - 126 , 7 + 126 , 7 @ @ public class ParameterNumberCheck <nl> final int count = params . getChildCount ( TokenTypes . PARAMETER _ DEF ) ; <nl> if ( count > max & & ! shouldIgnoreNumberOfParameters ( ast ) ) { <nl> final DetailAST name = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> - log ( name . getLineNo ( ) , name . getColumnNo ( ) , MSG _ KEY , max , count ) ; <nl> + log ( name , MSG _ KEY , max , count ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java <nl> index 7b2c7bc . . a7bec48 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java <nl> @ @ - 119 , 8 + 119 , 7 @ @ public abstract class AbstractParenPadCheck <nl> else if ( option = = PadOption . SPACE <nl> & & ! Character . isWhitespace ( line . charAt ( before ) ) <nl> & & line . charAt ( before ) ! = OPEN _ PARENTHESIS ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> - MSG _ WS _ NOT _ PRECEDED , CLOSE _ PARENTHESIS ) ; <nl> + log ( ast , MSG _ WS _ NOT _ PRECEDED , CLOSE _ PARENTHESIS ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> index eca0173 . . 5cf995c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java <nl> @ @ - 384 , 8 + 384 , 7 @ @ public class WhitespaceAroundCheck extends AbstractCheck { <nl> final char prevChar = line . charAt ( before ) ; <nl> if ( shouldCheckSeparationFromPreviousToken ( ast ) <nl> & & ! Character . isWhitespace ( prevChar ) ) { <nl> - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , <nl> - MSG _ WS _ NOT _ PRECEDED , ast . getText ( ) ) ; <nl> + log ( ast , MSG _ WS _ NOT _ PRECEDED , ast . getText ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / xdocs / config _ filters . xml b / src / xdocs / config _ filters . xml <nl> index 58b30a3 . . a1cb5c3 100644 <nl> - - - a / src / xdocs / config _ filters . xml <nl> + + + b / src / xdocs / config _ filters . xml <nl> @ @ - 675 , 26 + 675 , 63 @ @ public class UserService { <nl> checks : <nl> < / p > <nl> < ul > <nl> + < li > AbstractClassNameCheck < / li > <nl> + < li > AnonInnerLengthCheck < / li > <nl> + < li > ArrayTypeStyleCheck < / li > <nl> + < li > AvoidInlineConditionalsCheck < / li > <nl> + < li > AvoidNestedBlocksCheck < / li > <nl> + < li > BooleanExpressionComplexityCheck < / li > <nl> + < li > CovariantEqualsCheck < / li > <nl> < li > CyclomaticComplexityCheck < / li > <nl> < li > DeclarationOrderCheck < / li > <nl> < li > DefaultComesLastCheck < / li > <nl> + < li > DescendantTokenCheck < / li > <nl> + < li > DesignForExtensionCheck < / li > <nl> + < li > EmptyStatementCheck < / li > <nl> + < li > EqualsAvoidNullCheck < / li > <nl> + < li > EqualsHashCodeCheck < / li > <nl> + < li > ExecutableStatementCountCheck < / li > <nl> < li > ExplicitInitializationCheck < / li > <nl> < li > FallThroughCheck < / li > <nl> + < li > FinalLocalVariableCheck < / li > <nl> + < li > FinalParametersCheck < / li > <nl> < li > HiddenFieldCheck < / li > <nl> + < li > HideUtilityClassConstructorCheck < / li > <nl> + < li > InnerAssignmentCheck < / li > <nl> + < li > InnerTypeLastCheck < / li > <nl> < li > JavadocVariableCheck < / li > <nl> + < li > JavaNCSSCheck < / li > <nl> < li > IllegalThrowsCheck < / li > <nl> < li > ImportControlCheck < / li > <nl> < li > LeftCurlyCheck < / li > <nl> + < li > MethodLengthCheck < / li > <nl> + < li > MethodNameCheck < / li > <nl> < li > MethodParamPadCheck < / li > <nl> + < li > ModifiedControlVariableCheck < / li > <nl> + < li > ModifierOrderCheck < / li > <nl> < li > MultipleVariableDeclarationsCheck < / li > <nl> + < li > MutableExceptionCheck < / li > <nl> < li > NestedForDepthCheck < / li > <nl> < li > NestedIfDepthCheck < / li > <nl> < li > NestedTryDepthCheck < / li > <nl> < li > NPathComplexityCheck < / li > <nl> < li > OneStatementPerLineCheck < / li > <nl> < li > OuterTypeNumberCheck < / li > <nl> + < li > ParameterAssignmentCheck < / li > <nl> + < li > ParameterNumberCheck < / li > <nl> + < li > RedundantImportCheck < / li > <nl> + < li > RedundantModifierCheck < / li > <nl> < li > RequireThisCheck < / li > <nl> + < li > ReturnCountCheck < / li > <nl> < li > RightCurlyCheck < / li > <nl> + < li > SimplifyBooleanExpressionCheck < / li > <nl> + < li > SimplifyBooleanReturnCheck < / li > <nl> + < li > StringLiteralEqualityCheck < / li > <nl> + < li > SuperCloneCheck < / li > <nl> + < li > SuperFinalizeCheck < / li > <nl> + < li > SuppressWarningsCheck < / li > <nl> + < li > ThrowsCountCheck < / li > <nl> + < li > VisibilityModifierCheck < / li > <nl> < / ul > <nl> < p > <nl> Note , that support for other Checks will be available after resolving
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> index 62d73ee . . 2356e90 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java <nl> @ @ - 112 , 10 + 112 , 10 @ @ class PackageObjectFactory implements ModuleFactory { <nl> throws CheckstyleException { <nl> try { <nl> final Class < ? > clazz = Class . forName ( className , true , moduleClassLoader ) ; <nl> - return clazz . newInstance ( ) ; <nl> + return clazz . getDeclaredConstructor ( ) . newInstance ( ) ; <nl> } <nl> - catch ( final ClassNotFoundException | InstantiationException | IllegalAccessException e ) { <nl> - throw new CheckstyleException ( " Unable to find class for " + className , e ) ; <nl> + catch ( final ReflectiveOperationException exception ) { <nl> + throw new CheckstyleException ( " Unable to find class for " + className , exception ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 index c07e082 . . 0dd8124 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / ArrayTypeStyleCheck . java 
 @ @ - 72 , 7 + 72 , 7 @ @ public class ArrayTypeStyleCheck extends AbstractCheck { 
 | | variableAST . getColumnNo ( ) - ast . getColumnNo ( ) > - 1 ; 
 
 if ( isJavaStyle ! = javaStyle ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; 
 + log ( ast , MSG _ KEY ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java 
 index 6057f28 . . d37a1fe 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / DescendantTokenCheck . java 
 @ @ - 254 , 7 + 254 , 7 @ @ public class DescendantTokenCheck extends AbstractCheck { 
 if ( minimumMessage = = null ) { 
 minimumMessage = MSG _ KEY _ MIN ; 
 } 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 + log ( ast , 
 minimumMessage , 
 String . valueOf ( tokenCount ) , 
 String . valueOf ( minimumNumber ) , 
 @ @ - 267 , 7 + 267 , 7 @ @ public class DescendantTokenCheck extends AbstractCheck { 
 if ( maximumMessage = = null ) { 
 maximumMessage = MSG _ KEY _ MAX ; 
 } 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 + log ( ast , 
 maximumMessage , 
 String . valueOf ( tokenCount ) , 
 String . valueOf ( maximumNumber ) , 
 @ @ - 293 , 7 + 293 , 7 @ @ public class DescendantTokenCheck extends AbstractCheck { 
 if ( minimumMessage = = null ) { 
 minimumMessage = MSG _ KEY _ SUM _ MIN ; 
 } 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 + log ( ast , 
 minimumMessage , 
 String . valueOf ( total ) , 
 String . valueOf ( minimumNumber ) , name ) ; 
 @ @ - 302 , 7 + 302 , 7 @ @ public class DescendantTokenCheck extends AbstractCheck { 
 if ( maximumMessage = = null ) { 
 maximumMessage = MSG _ KEY _ SUM _ MAX ; 
 } 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 + log ( ast , 
 maximumMessage , 
 String . valueOf ( total ) , 
 String . valueOf ( maximumNumber ) , name ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 index 9e58664 . . 8f588f9 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 @ @ - 184 , 7 + 184 , 7 @ @ public class FinalParametersCheck extends AbstractCheck { 
 & & ! CheckUtils . isReceiverParameter ( param ) ) { 
 final DetailAST paramName = param . findFirstToken ( TokenTypes . IDENT ) ; 
 final DetailAST firstNode = CheckUtils . getFirstNode ( param ) ; 
 - log ( firstNode . getLineNo ( ) , firstNode . getColumnNo ( ) , 
 + log ( firstNode , 
 MSG _ KEY , paramName . getText ( ) ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 index 552f69f . . e67fbc0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / SuppressWarningsCheck . java 
 @ @ - 169 , 8 + 169 , 7 @ @ public class SuppressWarningsCheck extends AbstractCheck { 
 / / rare case with empty array ex : @ SuppressWarnings ( { } ) 
 if ( warning = = null ) { 
 / / check to see if empty warnings are forbidden - - are by default 
 - logMatch ( warningHolder . getLineNo ( ) , 
 - warningHolder . getColumnNo ( ) , " " ) ; 
 + logMatch ( warningHolder , " " ) ; 
 } 
 else { 
 while ( warning ! = null ) { 
 @ @ - 181 , 8 + 180 , 7 @ @ public class SuppressWarningsCheck extends AbstractCheck { 
 case TokenTypes . STRING _ LITERAL : 
 final String warningText = 
 removeQuotes ( warning . getFirstChild ( ) . getText ( ) ) ; 
 - logMatch ( warning . getLineNo ( ) , 
 - warning . getColumnNo ( ) , warningText ) ; 
 + logMatch ( warning , warningText ) ; 
 break ; 
 / / conditional case 
 / / ex : 
 @ @ - 229 , 17 + 227 , 15 @ @ public class SuppressWarningsCheck extends AbstractCheck { 
 
 / * * 
 * This method looks for a warning that matches a configured expression . 
 - * If found it logs a violation at the given line and column number . 
 + * If found it logs a violation at the given AST . 
 * 
 - * @ param lineNo the line number 
 - * @ param colNum the column number 
 + * @ param ast the location to place the violation 
 * @ param warningText the warning . 
 * / 
 - private void logMatch ( final int lineNo , 
 - final int colNum , final String warningText ) { 
 + private void logMatch ( DetailAST ast , final String warningText ) { 
 final Matcher matcher = format . matcher ( warningText ) ; 
 if ( matcher . matches ( ) ) { 
 - log ( lineNo , colNum , 
 + log ( ast , 
 MSG _ KEY _ SUPPRESSED _ WARNING _ NOT _ ALLOWED , warningText ) ; 
 } 
 } 
 @ @ - 304 , 7 + 300 , 7 @ @ public class SuppressWarningsCheck extends AbstractCheck { 
 else { 
 final String warningText = 
 removeQuotes ( cond . getText ( ) ) ; 
 - logMatch ( cond . getLineNo ( ) , cond . getColumnNo ( ) , warningText ) ; 
 + logMatch ( cond , warningText ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java 
 index a25ba7b . . 74fca69 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / AvoidNestedBlocksCheck . java 
 @ @ - 121 , 7 + 121 , 7 @ @ public class AvoidNestedBlocksCheck extends AbstractCheck { 
 & & ( ! allowInSwitchCase 
 | | parent . getParent ( ) . getType ( ) ! = TokenTypes . CASE _ GROUP 
 | | parent . getNumberOfChildren ( ) ! = 1 ) ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY _ BLOCK _ NESTED ) ; 
 + log ( ast , MSG _ KEY _ BLOCK _ NESTED ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 index d429858 . . a750dec 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AbstractSuperCheck . java 
 @ @ - 164 , 8 + 164 , 7 @ @ public abstract class AbstractSuperCheck 
 final DetailAST methodAST = methodNode . getMethod ( ) ; 
 final DetailAST nameAST = 
 methodAST . findFirstToken ( TokenTypes . IDENT ) ; 
 - log ( nameAST . getLineNo ( ) , nameAST . getColumnNo ( ) , 
 - MSG _ KEY , nameAST . getText ( ) ) ; 
 + log ( nameAST , MSG _ KEY , nameAST . getText ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java 
 index 30d2839 . . c67ca3a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / AvoidInlineConditionalsCheck . java 
 @ @ - 65 , 7 + 65 , 7 @ @ public class AvoidInlineConditionalsCheck extends AbstractCheck { 
 / / the only place a QUESTION token can occur is in inline conditionals 
 / / so no need to do any further tricks here - pretty trivial Check ! 
 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; 
 + log ( ast , MSG _ KEY ) ; 
 } 
 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java 
 index 1ffabbf . . 5c4bbcc 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / CovariantEqualsCheck . java 
 @ @ - 96 , 8 + 96 , 7 @ @ public class CovariantEqualsCheck extends AbstractCheck { 
 for ( DetailAST equalsAST : equalsMethods ) { 
 final DetailAST nameNode = equalsAST 
 . findFirstToken ( TokenTypes . IDENT ) ; 
 - log ( nameNode . getLineNo ( ) , nameNode . getColumnNo ( ) , 
 - MSG _ KEY ) ; 
 + log ( nameNode , MSG _ KEY ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheck . java 
 index 61de869 . . cb3a1e2 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EmptyStatementCheck . java 
 @ @ - 68 , 7 + 68 , 7 @ @ public class EmptyStatementCheck extends AbstractCheck { 
 
 @ Override 
 public void visitToken ( DetailAST ast ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; 
 + log ( ast , MSG _ KEY ) ; 
 } 
 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 index fc232b1 . . a88020e 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsAvoidNullCheck . java 
 @ @ - 278 , 12 + 278 , 10 @ @ public class EqualsAvoidNullCheck extends AbstractCheck { 
 & & isCalledOnStringFieldOrVariable ( objCalledOn ) ) { 
 final String methodName = methodCall . getFirstChild ( ) . getLastChild ( ) . getText ( ) ; 
 if ( EQUALS . equals ( methodName ) ) { 
 - log ( methodCall . getLineNo ( ) , methodCall . getColumnNo ( ) , 
 - MSG _ EQUALS _ AVOID _ NULL ) ; 
 + log ( methodCall , MSG _ EQUALS _ AVOID _ NULL ) ; 
 } 
 else { 
 - log ( methodCall . getLineNo ( ) , methodCall . getColumnNo ( ) , 
 - MSG _ EQUALS _ IGNORE _ CASE _ AVOID _ NULL ) ; 
 + log ( methodCall , MSG _ EQUALS _ IGNORE _ CASE _ AVOID _ NULL ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 index e63f41e . . 398db53 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / EqualsHashCodeCheck . java 
 @ @ - 164 , 10 + 164 , 10 @ @ public class EqualsHashCodeCheck 
 return objBlockWithHashCode . remove ( detailASTDetailASTEntry . getKey ( ) ) = = null ; 
 } ) . forEach ( detailASTDetailASTEntry - > { 
 final DetailAST equalsAST = detailASTDetailASTEntry . getValue ( ) ; 
 - log ( equalsAST . getLineNo ( ) , equalsAST . getColumnNo ( ) , MSG _ KEY _ HASHCODE ) ; 
 + log ( equalsAST , MSG _ KEY _ HASHCODE ) ; 
 } ) ; 
 objBlockWithHashCode . forEach ( ( key , equalsAST ) - > { 
 - log ( equalsAST . getLineNo ( ) , equalsAST . getColumnNo ( ) , MSG _ KEY _ EQUALS ) ; 
 + log ( equalsAST , MSG _ KEY _ EQUALS ) ; 
 } ) ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 index b8b492a . . 14d37b5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / FinalLocalVariableCheck . java 
 @ @ - 271 , 7 + 271 , 7 @ @ public class FinalLocalVariableCheck extends AbstractCheck { 
 if ( scope ! = null ) { 
 for ( FinalVariableCandidate candidate : scope . values ( ) ) { 
 final DetailAST ident = candidate . variableIdent ; 
 - log ( ident . getLineNo ( ) , ident . getColumnNo ( ) , MSG _ KEY , ident . getText ( ) ) ; 
 + log ( ident , MSG _ KEY , ident . getText ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheck . java 
 index 1848ccd . . e10a13c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / InnerAssignmentCheck . java 
 @ @ - 136 , 7 + 136 , 7 @ @ public class InnerAssignmentCheck 
 if ( ! isInContext ( ast , ALLOWED _ ASSIGNMENT _ CONTEXT ) 
 & & ! isInNoBraceControlStatement ( ast ) 
 & & ! isInWhileIdiom ( ast ) ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; 
 + log ( ast , MSG _ KEY ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 index 960e0bb . . 5d9643c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ModifiedControlVariableCheck . java 
 @ @ - 284 , 8 + 284 , 7 @ @ public final class ModifiedControlVariableCheck extends AbstractCheck { 
 
 if ( identAST ! = null & & identAST . getType ( ) = = TokenTypes . IDENT 
 & & getCurrentVariables ( ) . contains ( identAST . getText ( ) ) ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 - MSG _ KEY , identAST . getText ( ) ) ; 
 + log ( ast , MSG _ KEY , identAST . getText ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java 
 index 60de9e4 . . ab71b12 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java 
 @ @ - 188 , 8 + 188 , 7 @ @ public final class ParameterAssignmentCheck extends AbstractCheck { 
 if ( identAST ! = null 
 & & identAST . getType ( ) = = TokenTypes . IDENT 
 & & parameterNames . contains ( identAST . getText ( ) ) ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 - MSG _ KEY , identAST . getText ( ) ) ; 
 + log ( ast , MSG _ KEY , identAST . getText ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java 
 index 8714bbb . . d539d69 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ReturnCountCheck . java 
 @ @ - 254 , 10 + 254 , 10 @ @ public final class ReturnCountCheck extends AbstractCheck { 
 public void checkCount ( DetailAST ast ) { 
 if ( checking & & maxAllowed ! = null & & count > maxAllowed ) { 
 if ( isVoidContext ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY _ VOID , count , maxAllowed ) ; 
 + log ( ast , MSG _ KEY _ VOID , count , maxAllowed ) ; 
 } 
 else { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY , count , maxAllowed ) ; 
 + log ( ast , MSG _ KEY , count , maxAllowed ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanExpressionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanExpressionCheck . java 
 index 84d2b9d . . 88fc27c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanExpressionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanExpressionCheck . java 
 @ @ - 74 , 8 + 74 , 7 @ @ public class SimplifyBooleanExpressionCheck 
 case TokenTypes . LNOT : 
 case TokenTypes . LOR : 
 case TokenTypes . LAND : 
 - log ( parent . getLineNo ( ) , parent . getColumnNo ( ) , 
 - MSG _ KEY ) ; 
 + log ( parent , MSG _ KEY ) ; 
 break ; 
 default : 
 break ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java 
 index 6ae841d . . 2034f62 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / SimplifyBooleanReturnCheck . java 
 @ @ - 83 , 7 + 83 , 7 @ @ public class SimplifyBooleanReturnCheck 
 
 if ( canReturnOnlyBooleanLiteral ( thenStatement ) 
 & & canReturnOnlyBooleanLiteral ( elseStatement ) ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; 
 + log ( ast , MSG _ KEY ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheck . java 
 index 904d14d . . 5fba50b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / StringLiteralEqualityCheck . java 
 @ @ - 69 , 8 + 69 , 7 @ @ public class StringLiteralEqualityCheck extends AbstractCheck { 
 
 if ( firstChild . getType ( ) = = TokenTypes . STRING _ LITERAL 
 | | secondChild . getType ( ) = = TokenTypes . STRING _ LITERAL ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 - MSG _ KEY , ast . getText ( ) ) ; 
 + log ( ast , MSG _ KEY , ast . getText ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 index 180e2d5 . . d380c05 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / DesignForExtensionCheck . java 
 @ @ - 146 , 7 + 146 , 7 @ @ public class DesignForExtensionCheck extends AbstractCheck { 
 if ( canBeSubclassed ( classDef ) ) { 
 final String className = classDef . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 final String methodName = ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ; 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY , className , methodName ) ; 
 + log ( ast , MSG _ KEY , className , methodName ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java 
 index 576428b . . 2c8139b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / HideUtilityClassConstructorCheck . java 
 @ @ - 84 , 7 + 84 , 7 @ @ public class HideUtilityClassConstructorCheck extends AbstractCheck { 
 & & ! hasNonStaticMethodOrField & & hasNonPrivateStaticMethodOrField ; 
 
 if ( isUtilClass & & hasAccessibleCtor & & ! hasStaticModifier ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY ) ; 
 + log ( ast , MSG _ KEY ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheck . java 
 index a5f2040 . . 8e10f4f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / InnerTypeLastCheck . java 
 @ @ - 71 , 8 + 71 , 7 @ @ public class InnerTypeLastCheck extends AbstractCheck { 
 if ( ! ScopeUtils . isInCodeBlock ( ast ) 
 & & ( nextSibling . getType ( ) = = TokenTypes . VARIABLE _ DEF 
 | | nextSibling . getType ( ) = = TokenTypes . METHOD _ DEF ) ) { 
 - log ( nextSibling . getLineNo ( ) , nextSibling . getColumnNo ( ) , 
 - MSG _ KEY ) ; 
 + log ( nextSibling , MSG _ KEY ) ; 
 } 
 nextSibling = nextSibling . getNextSibling ( ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 index 52fe86f . . 29af701 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / MutableExceptionCheck . java 
 @ @ - 136 , 8 + 136 , 7 @ @ public final class MutableExceptionCheck extends AbstractCheck { 
 ast . findFirstToken ( TokenTypes . MODIFIERS ) ; 
 
 if ( modifiersAST . findFirstToken ( TokenTypes . FINAL ) = = null ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY , 
 - ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ) ; 
 + log ( ast , MSG _ KEY , ast . findFirstToken ( TokenTypes . IDENT ) . getText ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java 
 index 2c1da3f . . 536ae4a 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / ThrowsCountCheck . java 
 @ @ - 128 , 8 + 128 , 7 @ @ public final class ThrowsCountCheck extends AbstractCheck { 
 / / Account for all the commas ! 
 final int count = ( ast . getChildCount ( ) + 1 ) / 2 ; 
 if ( count > max ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY , 
 - count , max ) ; 
 + log ( ast , MSG _ KEY , count , max ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 index 3e1b631 . . 4b20cd1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / design / VisibilityModifierCheck . java 
 @ @ - 467 , 8 + 467 , 7 @ @ public class VisibilityModifierCheck 
 . getNextSibling ( ) ; 
 final String varName = varNameAST . getText ( ) ; 
 if ( ! hasProperAccessModifier ( variableDef , varName ) ) { 
 - log ( varNameAST . getLineNo ( ) , varNameAST . getColumnNo ( ) , 
 - MSG _ KEY , varName ) ; 
 + log ( varNameAST , MSG _ KEY , varName ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheck . java 
 index 9bd33b9 . . f1e5eb1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / RedundantImportCheck . java 
 @ @ - 113 , 18 + 113 , 16 @ @ public class RedundantImportCheck 
 else if ( ast . getType ( ) = = TokenTypes . IMPORT ) { 
 final FullIdent imp = FullIdent . createFullIdentBelow ( ast ) ; 
 if ( isFromPackage ( imp . getText ( ) , " java . lang " ) ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ LANG , 
 - imp . getText ( ) ) ; 
 + log ( ast , MSG _ LANG , imp . getText ( ) ) ; 
 } 
 / / imports from unnamed package are not allowed , 
 / / so we are checking SAME rule only for named packages 
 else if ( pkgName ! = null & & isFromPackage ( imp . getText ( ) , pkgName ) ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ SAME , 
 - imp . getText ( ) ) ; 
 + log ( ast , MSG _ SAME , imp . getText ( ) ) ; 
 } 
 / / Check for a duplicate import 
 imports . stream ( ) . filter ( full - > imp . getText ( ) . equals ( full . getText ( ) ) ) 
 - . forEach ( full - > log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 + . forEach ( full - > log ( ast , 
 MSG _ DUPLICATE , full . getLineNo ( ) , 
 imp . getText ( ) ) ) ; 
 
 @ @ - 136 , 7 + 134 , 7 @ @ public class RedundantImportCheck 
 FullIdent . createFullIdent ( 
 ast . getLastChild ( ) . getPreviousSibling ( ) ) ; 
 staticImports . stream ( ) . filter ( full - > imp . getText ( ) . equals ( full . getText ( ) ) ) 
 - . forEach ( full - > log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 + . forEach ( full - > log ( ast , 
 MSG _ DUPLICATE , full . getLineNo ( ) , imp . getText ( ) ) ) ; 
 
 staticImports . add ( imp ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java 
 index b0598c9 . . bbfe306 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / BooleanExpressionComplexityCheck . java 
 @ @ - 246 , 8 + 246 , 7 @ @ public final class BooleanExpressionComplexityCheck extends AbstractCheck { 
 if ( checking & & count > max ) { 
 final DetailAST parentAST = ast . getParent ( ) ; 
 
 - log ( parentAST . getLineNo ( ) , parentAST . getColumnNo ( ) , 
 - MSG _ KEY , count , max ) ; 
 + log ( parentAST , MSG _ KEY , count , max ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java 
 index f3608e2 . . 22eefc8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / JavaNCSSCheck . java 
 @ @ - 166 , 8 + 166 , 7 @ @ public class JavaNCSSCheck extends AbstractCheck { 
 
 final int count = counter . getCount ( ) ; 
 if ( count > methodMaximum ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ METHOD , 
 - count , methodMaximum ) ; 
 + log ( ast , MSG _ METHOD , count , methodMaximum ) ; 
 } 
 } 
 else if ( tokenType = = TokenTypes . CLASS _ DEF ) { 
 @ @ - 176 , 8 + 175 , 7 @ @ public class JavaNCSSCheck extends AbstractCheck { 
 
 final int count = counter . getCount ( ) ; 
 if ( count > classMaximum ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ CLASS , 
 - count , classMaximum ) ; 
 + log ( ast , MSG _ CLASS , count , classMaximum ) ; 
 } 
 } 
 } 
 @ @ - 189 , 8 + 187 , 7 @ @ public class JavaNCSSCheck extends AbstractCheck { 
 
 final int count = counter . getCount ( ) ; 
 if ( count > fileMaximum ) { 
 - log ( rootAST . getLineNo ( ) , rootAST . getColumnNo ( ) , MSG _ FILE , 
 - count , fileMaximum ) ; 
 + log ( rootAST , MSG _ FILE , count , fileMaximum ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java 
 index 47af6c1 . . 3adb3e4 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / ModifierOrderCheck . java 
 @ @ - 118 , 15 + 118 , 14 @ @ public class ModifierOrderCheck 
 final DetailAST error = checkOrderSuggestedByJls ( mods ) ; 
 if ( error ! = null ) { 
 if ( error . getType ( ) = = TokenTypes . ANNOTATION ) { 
 - log ( error . getLineNo ( ) , error . getColumnNo ( ) , 
 + log ( error , 
 MSG _ ANNOTATION _ ORDER , 
 error . getFirstChild ( ) . getText ( ) 
 + error . getFirstChild ( ) . getNextSibling ( ) 
 . getText ( ) ) ; 
 } 
 else { 
 - log ( error . getLineNo ( ) , error . getColumnNo ( ) , 
 - MSG _ MODIFIER _ ORDER , error . getText ( ) ) ; 
 + log ( error , MSG _ MODIFIER _ ORDER , error . getText ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 index ba83543 . . 022d35f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / modifier / RedundantModifierCheck . java 
 @ @ - 195 , 8 + 195 , 7 @ @ public class RedundantModifierCheck 
 final DetailAST modifier = 
 modifiers . findFirstToken ( tokenType ) ; 
 if ( modifier ! = null ) { 
 - log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , 
 - MSG _ KEY , modifier . getText ( ) ) ; 
 + log ( modifier , MSG _ KEY , modifier . getText ( ) ) ; 
 } 
 } 
 } 
 @ @ - 210 , 8 + 209 , 7 @ @ public class RedundantModifierCheck 
 final DetailAST modifier = getFirstModifierAst ( modifiers ) ; 
 
 if ( modifier ! = null ) { 
 - log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , 
 - MSG _ KEY , modifier . getText ( ) ) ; 
 + log ( modifier , MSG _ KEY , modifier . getText ( ) ) ; 
 } 
 } 
 
 @ @ - 263 , 8 + 261 , 7 @ @ public class RedundantModifierCheck 
 & & ast . getType ( ) ! = TokenTypes . CLASS _ DEF 
 | | type = = TokenTypes . FINAL 
 & & ast . getType ( ) ! = TokenTypes . CLASS _ DEF ) { 
 - log ( modifier . getLineNo ( ) , modifier . getColumnNo ( ) , 
 - MSG _ KEY , modifier . getText ( ) ) ; 
 + log ( modifier , MSG _ KEY , modifier . getText ( ) ) ; 
 break ; 
 } 
 
 @ @ - 357 , 8 + 354 , 7 @ @ public class RedundantModifierCheck 
 DetailAST astModifier = astModifiers . getFirstChild ( ) ; 
 while ( astModifier ! = null ) { 
 if ( astModifier . getType ( ) = = modifierType ) { 
 - log ( astModifier . getLineNo ( ) , astModifier . getColumnNo ( ) , 
 - MSG _ KEY , astModifier . getText ( ) ) ; 
 + log ( astModifier , MSG _ KEY , astModifier . getText ( ) ) ; 
 } 
 
 astModifier = astModifier . getNextSibling ( ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java 
 index 25d6631 . . aa018cc 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheck . java 
 @ @ - 118 , 13 + 118 , 11 @ @ public final class AbstractClassNameCheck extends AbstractCheck { 
 if ( isAbstract ( ast ) ) { 
 / / if class has abstract modifier 
 if ( ! ignoreName & & ! isMatchingClassName ( className ) ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 - MSG _ ILLEGAL _ ABSTRACT _ CLASS _ NAME , className , format . pattern ( ) ) ; 
 + log ( ast , MSG _ ILLEGAL _ ABSTRACT _ CLASS _ NAME , className , format . pattern ( ) ) ; 
 } 
 } 
 else if ( ! ignoreModifier & & isMatchingClassName ( className ) ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 - MSG _ NO _ ABSTRACT _ CLASS _ MODIFIER , className ) ; 
 + log ( ast , MSG _ NO _ ABSTRACT _ CLASS _ MODIFIER , className ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodNameCheck . java 
 index ecce1e9 . . e9f19bf 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / MethodNameCheck . java 
 @ @ - 133 , 8 + 133 , 7 @ @ public class MethodNameCheck 
 / / down the tree looking for the first ident . 
 if ( classIdent ! = null 
 & & method . getText ( ) . equals ( classIdent . getText ( ) ) ) { 
 - log ( method . getLineNo ( ) , method . getColumnNo ( ) , 
 - MSG _ KEY , method . getText ( ) ) ; 
 + log ( method , MSG _ KEY , method . getText ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheck . java 
 index 8f6c675 . . 22e0aac 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / AnonInnerLengthCheck . java 
 @ @ - 95 , 8 + 95 , 7 @ @ public class AnonInnerLengthCheck extends AbstractCheck { 
 final int length = 
 closingBrace . getLineNo ( ) - openingBrace . getLineNo ( ) + 1 ; 
 if ( length > max ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY , 
 - length , max ) ; 
 + log ( ast , MSG _ KEY , length , max ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheck . java 
 index a80b77b . . 8a49409 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ExecutableStatementCountCheck . java 
 @ @ - 150 , 8 + 150 , 7 @ @ public final class ExecutableStatementCountCheck 
 private void leaveMemberDef ( DetailAST ast ) { 
 final int count = context . getCount ( ) ; 
 if ( count > max ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 - MSG _ KEY , count , max ) ; 
 + log ( ast , MSG _ KEY , count , max ) ; 
 } 
 context = contextStack . pop ( ) ; 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheck . java 
 index d8dcf51 . . 1c5e513 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheck . java 
 @ @ - 96 , 8 + 96 , 7 @ @ public class MethodLengthCheck extends AbstractCheck { 
 openingBrace . findFirstToken ( TokenTypes . RCURLY ) ; 
 final int length = getLengthOfBlock ( openingBrace , closingBrace ) ; 
 if ( length > max ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , MSG _ KEY , 
 - length , max ) ; 
 + log ( ast , MSG _ KEY , length , max ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 index 770be51 . . dffd9a6 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / sizes / ParameterNumberCheck . java 
 @ @ - 126 , 7 + 126 , 7 @ @ public class ParameterNumberCheck 
 final int count = params . getChildCount ( TokenTypes . PARAMETER _ DEF ) ; 
 if ( count > max & & ! shouldIgnoreNumberOfParameters ( ast ) ) { 
 final DetailAST name = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 - log ( name . getLineNo ( ) , name . getColumnNo ( ) , MSG _ KEY , max , count ) ; 
 + log ( name , MSG _ KEY , max , count ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java 
 index 7b2c7bc . . a7bec48 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / AbstractParenPadCheck . java 
 @ @ - 119 , 8 + 119 , 7 @ @ public abstract class AbstractParenPadCheck 
 else if ( option = = PadOption . SPACE 
 & & ! Character . isWhitespace ( line . charAt ( before ) ) 
 & & line . charAt ( before ) ! = OPEN _ PARENTHESIS ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 - MSG _ WS _ NOT _ PRECEDED , CLOSE _ PARENTHESIS ) ; 
 + log ( ast , MSG _ WS _ NOT _ PRECEDED , CLOSE _ PARENTHESIS ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 index eca0173 . . 5cf995c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / WhitespaceAroundCheck . java 
 @ @ - 384 , 8 + 384 , 7 @ @ public class WhitespaceAroundCheck extends AbstractCheck { 
 final char prevChar = line . charAt ( before ) ; 
 if ( shouldCheckSeparationFromPreviousToken ( ast ) 
 & & ! Character . isWhitespace ( prevChar ) ) { 
 - log ( ast . getLineNo ( ) , ast . getColumnNo ( ) , 
 - MSG _ WS _ NOT _ PRECEDED , ast . getText ( ) ) ; 
 + log ( ast , MSG _ WS _ NOT _ PRECEDED , ast . getText ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / xdocs / config _ filters . xml b / src / xdocs / config _ filters . xml 
 index 58b30a3 . . a1cb5c3 100644 
 - - - a / src / xdocs / config _ filters . xml 
 + + + b / src / xdocs / config _ filters . xml 
 @ @ - 675 , 26 + 675 , 63 @ @ public class UserService { 
 checks : 
 < / p > 
 < ul > 
 + < li > AbstractClassNameCheck < / li > 
 + < li > AnonInnerLengthCheck < / li > 
 + < li > ArrayTypeStyleCheck < / li > 
 + < li > AvoidInlineConditionalsCheck < / li > 
 + < li > AvoidNestedBlocksCheck < / li > 
 + < li > BooleanExpressionComplexityCheck < / li > 
 + < li > CovariantEqualsCheck < / li > 
 < li > CyclomaticComplexityCheck < / li > 
 < li > DeclarationOrderCheck < / li > 
 < li > DefaultComesLastCheck < / li > 
 + < li > DescendantTokenCheck < / li > 
 + < li > DesignForExtensionCheck < / li > 
 + < li > EmptyStatementCheck < / li > 
 + < li > EqualsAvoidNullCheck < / li > 
 + < li > EqualsHashCodeCheck < / li > 
 + < li > ExecutableStatementCountCheck < / li > 
 < li > ExplicitInitializationCheck < / li > 
 < li > FallThroughCheck < / li > 
 + < li > FinalLocalVariableCheck < / li > 
 + < li > FinalParametersCheck < / li > 
 < li > HiddenFieldCheck < / li > 
 + < li > HideUtilityClassConstructorCheck < / li > 
 + < li > InnerAssignmentCheck < / li > 
 + < li > InnerTypeLastCheck < / li > 
 < li > JavadocVariableCheck < / li > 
 + < li > JavaNCSSCheck < / li > 
 < li > IllegalThrowsCheck < / li > 
 < li > ImportControlCheck < / li > 
 < li > LeftCurlyCheck < / li > 
 + < li > MethodLengthCheck < / li > 
 + < li > MethodNameCheck < / li > 
 < li > MethodParamPadCheck < / li > 
 + < li > ModifiedControlVariableCheck < / li > 
 + < li > ModifierOrderCheck < / li > 
 < li > MultipleVariableDeclarationsCheck < / li > 
 + < li > MutableExceptionCheck < / li > 
 < li > NestedForDepthCheck < / li > 
 < li > NestedIfDepthCheck < / li > 
 < li > NestedTryDepthCheck < / li > 
 < li > NPathComplexityCheck < / li > 
 < li > OneStatementPerLineCheck < / li > 
 < li > OuterTypeNumberCheck < / li > 
 + < li > ParameterAssignmentCheck < / li > 
 + < li > ParameterNumberCheck < / li > 
 + < li > RedundantImportCheck < / li > 
 + < li > RedundantModifierCheck < / li > 
 < li > RequireThisCheck < / li > 
 + < li > ReturnCountCheck < / li > 
 < li > RightCurlyCheck < / li > 
 + < li > SimplifyBooleanExpressionCheck < / li > 
 + < li > SimplifyBooleanReturnCheck < / li > 
 + < li > StringLiteralEqualityCheck < / li > 
 + < li > SuperCloneCheck < / li > 
 + < li > SuperFinalizeCheck < / li > 
 + < li > SuppressWarningsCheck < / li > 
 + < li > ThrowsCountCheck < / li > 
 + < li > VisibilityModifierCheck < / li > 
 < / ul > 
 < p > 
 Note , that support for other Checks will be available after resolving

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 index 62d73ee . . 2356e90 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / PackageObjectFactory . java 
 @ @ - 112 , 10 + 112 , 10 @ @ class PackageObjectFactory implements ModuleFactory { 
 throws CheckstyleException { 
 try { 
 final Class < ? > clazz = Class . forName ( className , true , moduleClassLoader ) ; 
 - return clazz . newInstance ( ) ; 
 + return clazz . getDeclaredConstructor ( ) . newInstance ( ) ; 
 } 
 - catch ( final ClassNotFoundException | InstantiationException | IllegalAccessException e ) { 
 - throw new CheckstyleException ( " Unable to find class for " + className , e ) ; 
 + catch ( final ReflectiveOperationException exception ) { 
 + throw new CheckstyleException ( " Unable to find class for " + className , exception ) ; 
 } 
 } 

