BLEU SCORE: 1.0

TEST MSG: Issue # 2161 : unify test input locations
GENERATED MSG: Issue # 2161 : unify test input locations

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java <nl> index f6d2d61 . . b484d87 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java <nl> @ @ - 66 , 7 + 66 , 7 @ @ public class OneStatementPerLineTest extends BaseCheckTestSupport { <nl> <nl> Configuration checkConfig = builder . getCheckConfig ( " OneStatementPerLine " ) ; <nl> String filePath = new File ( " src / test / resources - noncompilable / " <nl> - + " com / puppycrawl / tools / checkstyle / coding / " <nl> + + " com / puppycrawl / tools / checkstyle / checks / coding / " <nl> + " InputOneStatementPerLineCheck . java " ) . getCanonicalPath ( ) ; <nl> <nl> Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> index c30b216 . . 44e52f4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . OneStatementPerLineCheck . MSG _ KEY ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 30 , 6 + 31 , 18 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected String getNonCompilablePath ( String filename ) throws IOException { <nl> + return super . getNonCompilablePath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testMultiCaseClass ( ) throws Exception { <nl> DefaultConfiguration checkConfig = createCheckConfig ( OneStatementPerLineCheck . class ) ; <nl> @ @ - 44 , 7 + 57 , 7 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " checks / coding / OneStatementPerLineCheckInput . java " ) , <nl> + getPath ( " OneStatementPerLineCheckInput . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 69 , 7 + 82 , 7 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> <nl> verify ( checkConfig , <nl> - getPath ( " checks / coding / OneStatementPerLineCheckInput2 . java " ) , <nl> + getPath ( " OneStatementPerLineCheckInput2 . java " ) , <nl> expected ) ; <nl> } <nl> <nl> @ @ - 80 , 9 + 93 , 6 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { <nl> " 24 : 6 : " + getCheckMessage ( MSG _ KEY ) , <nl> } ; <nl> <nl> - verify ( checkConfig , new File ( " src / test / resources - noncompilable / " <nl> - + " com / puppycrawl / tools / checkstyle / coding / " <nl> - + " InputOneStatementPerLineCheck . java " ) . getCanonicalPath ( ) , <nl> - expected ) ; <nl> + verify ( checkConfig , getNonCompilablePath ( " InputOneStatementPerLineCheck . java " ) , expected ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLineCheck . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLineCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 7cbc495 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLineCheck . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + / * * <nl> + * This file contains test inputs for OneStatementPerLineCheckInput <nl> + * which cause compilation problem in Eclipse 4 . 2 . 2 but still <nl> + * must be tested . <nl> + * / <nl> + <nl> + / * * <nl> + * Two import statements and one ' empty ' statement <nl> + * which are not on the same line are legal . <nl> + * / <nl> + import java . lang . annotation . Annotation ; <nl> + ; <nl> + import java . lang . String ; <nl> + <nl> + public class OneStatementPerLineCheckInput { <nl> + / * * <nl> + * According to java language specifications , <nl> + * statements end with ' ; ' . That is why ' ; ; ' <nl> + * may be considered as two empty statements on the same line <nl> + * and rises violation . <nl> + * / <nl> + ; ; / / warn <nl> + } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputOneStatementPerLineCheck . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputOneStatementPerLineCheck . java <nl> deleted file mode 100644 <nl> index 7cbc495 . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputOneStatementPerLineCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 25 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - / * * <nl> - * This file contains test inputs for OneStatementPerLineCheckInput <nl> - * which cause compilation problem in Eclipse 4 . 2 . 2 but still <nl> - * must be tested . <nl> - * / <nl> - <nl> - / * * <nl> - * Two import statements and one ' empty ' statement <nl> - * which are not on the same line are legal . <nl> - * / <nl> - import java . lang . annotation . Annotation ; <nl> - ; <nl> - import java . lang . String ; <nl> - <nl> - public class OneStatementPerLineCheckInput { <nl> - / * * <nl> - * According to java language specifications , <nl> - * statements end with ' ; ' . That is why ' ; ; ' <nl> - * may be considered as two empty statements on the same line <nl> - * and rises violation . <nl> - * / <nl> - ; ; / / warn <nl> - }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> index 9af22a9 . . 2cdac81 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { <nl> } <nl> <nl> private static List < RevCommit > getCommitsToCheck ( ) throws Exception { <nl> - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; <nl> - <nl> - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> List < RevCommit > commits ; <nl> - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> - } <nl> - else { <nl> - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { <nl> + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> + else { <nl> + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> } <nl> return commits ; <nl> } <nl> @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { <nl> <nl> private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { <nl> RevCommitsPair revCommitIteratorPair ; <nl> - try { <nl> + <nl> + try ( RevWalk revWalk = new RevWalk ( repo ) ) { <nl> Iterator < RevCommit > first ; <nl> Iterator < RevCommit > second ; <nl> - <nl> - RevWalk revWalk = new RevWalk ( repo ) ; <nl> - <nl> ObjectId headId = repo . resolve ( Constants . HEAD ) ; <nl> RevCommit headCommit = revWalk . parseCommit ( headId ) ; <nl> <nl> @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { <nl> RevCommit firstParent = headCommit . getParent ( 0 ) ; <nl> RevCommit secondParent = headCommit . getParent ( 1 ) ; <nl> <nl> - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + } <nl> } <nl> else { <nl> - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . call ( ) . iterator ( ) ; <nl> + } <nl> second = Collections . emptyIterator ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java 
 index f6d2d61 . . b484d87 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule43onestatement / OneStatementPerLineTest . java 
 @ @ - 66 , 7 + 66 , 7 @ @ public class OneStatementPerLineTest extends BaseCheckTestSupport { 
 
 Configuration checkConfig = builder . getCheckConfig ( " OneStatementPerLine " ) ; 
 String filePath = new File ( " src / test / resources - noncompilable / " 
 - + " com / puppycrawl / tools / checkstyle / coding / " 
 + + " com / puppycrawl / tools / checkstyle / checks / coding / " 
 + " InputOneStatementPerLineCheck . java " ) . getCanonicalPath ( ) ; 
 
 Integer [ ] warnList = builder . getLinesWithWarn ( filePath ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 index c30b216 . . 44e52f4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / OneStatementPerLineCheckTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . OneStatementPerLineCheck . MSG _ KEY ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 30 , 6 + 31 , 18 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 + @ Override 
 + protected String getNonCompilablePath ( String filename ) throws IOException { 
 + return super . getNonCompilablePath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testMultiCaseClass ( ) throws Exception { 
 DefaultConfiguration checkConfig = createCheckConfig ( OneStatementPerLineCheck . class ) ; 
 @ @ - 44 , 7 + 57 , 7 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " checks / coding / OneStatementPerLineCheckInput . java " ) , 
 + getPath ( " OneStatementPerLineCheckInput . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 69 , 7 + 82 , 7 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { 
 } ; 
 
 verify ( checkConfig , 
 - getPath ( " checks / coding / OneStatementPerLineCheckInput2 . java " ) , 
 + getPath ( " OneStatementPerLineCheckInput2 . java " ) , 
 expected ) ; 
 } 
 
 @ @ - 80 , 9 + 93 , 6 @ @ public class OneStatementPerLineCheckTest extends BaseCheckTestSupport { 
 " 24 : 6 : " + getCheckMessage ( MSG _ KEY ) , 
 } ; 
 
 - verify ( checkConfig , new File ( " src / test / resources - noncompilable / " 
 - + " com / puppycrawl / tools / checkstyle / coding / " 
 - + " InputOneStatementPerLineCheck . java " ) . getCanonicalPath ( ) , 
 - expected ) ; 
 + verify ( checkConfig , getNonCompilablePath ( " InputOneStatementPerLineCheck . java " ) , expected ) ; 
 } 
 } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLineCheck . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLineCheck . java 
 new file mode 100644 
 index 0000000 . . 7cbc495 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputOneStatementPerLineCheck . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + / * * 
 + * This file contains test inputs for OneStatementPerLineCheckInput 
 + * which cause compilation problem in Eclipse 4 . 2 . 2 but still 
 + * must be tested . 
 + * / 
 + 
 + / * * 
 + * Two import statements and one ' empty ' statement 
 + * which are not on the same line are legal . 
 + * / 
 + import java . lang . annotation . Annotation ; 
 + ; 
 + import java . lang . String ; 
 + 
 + public class OneStatementPerLineCheckInput { 
 + / * * 
 + * According to java language specifications , 
 + * statements end with ' ; ' . That is why ' ; ; ' 
 + * may be considered as two empty statements on the same line 
 + * and rises violation . 
 + * / 
 + ; ; / / warn 
 + } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputOneStatementPerLineCheck . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputOneStatementPerLineCheck . java 
 deleted file mode 100644 
 index 7cbc495 . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / coding / InputOneStatementPerLineCheck . java 
 + + + / dev / null 
 @ @ - 1 , 25 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - / * * 
 - * This file contains test inputs for OneStatementPerLineCheckInput 
 - * which cause compilation problem in Eclipse 4 . 2 . 2 but still 
 - * must be tested . 
 - * / 
 - 
 - / * * 
 - * Two import statements and one ' empty ' statement 
 - * which are not on the same line are legal . 
 - * / 
 - import java . lang . annotation . Annotation ; 
 - ; 
 - import java . lang . String ; 
 - 
 - public class OneStatementPerLineCheckInput { 
 - / * * 
 - * According to java language specifications , 
 - * statements end with ' ; ' . That is why ' ; ; ' 
 - * may be considered as two empty statements on the same line 
 - * and rises violation . 
 - * / 
 - ; ; / / warn 
 - }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 index 9af22a9 . . 2cdac81 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { 
 } 
 
 private static List < RevCommit > getCommitsToCheck ( ) throws Exception { 
 - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; 
 - 
 - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 List < RevCommit > commits ; 
 - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 - } 
 - else { 
 - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { 
 + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 + else { 
 + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 } 
 return commits ; 
 } 
 @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { 
 
 private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { 
 RevCommitsPair revCommitIteratorPair ; 
 - try { 
 + 
 + try ( RevWalk revWalk = new RevWalk ( repo ) ) { 
 Iterator < RevCommit > first ; 
 Iterator < RevCommit > second ; 
 - 
 - RevWalk revWalk = new RevWalk ( repo ) ; 
 - 
 ObjectId headId = repo . resolve ( Constants . HEAD ) ; 
 RevCommit headCommit = revWalk . parseCommit ( headId ) ; 
 
 @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { 
 RevCommit firstParent = headCommit . getParent ( 0 ) ; 
 RevCommit secondParent = headCommit . getParent ( 1 ) ; 
 
 - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + } 
 } 
 else { 
 - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . call ( ) . iterator ( ) ; 
 + } 
 second = Collections . emptyIterator ( ) ; 
 } 

