BLEU SCORE: 0.08913765521398126

TEST MSG: Issue # 4845 : remove usage of DetailAST from input files
GENERATED MSG: Issue # 2161 : unify test input locations for regexp package

TEST DIFF (one line): diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / InputCommentsIndentationCommentIsAtTheEndOfBlock . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> index 04ffa2e . . 0b078e5 100644 <nl> - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> package com . google . checkstyle . test . chapter4formatting . rule4861blockcommentstyle ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . utils . CheckUtil ; <nl> + <nl> + <nl> <nl> / * * <nl> * Contains examples of using comments at the end of the block . <nl> @ @ - 59 , 61 + 59 , 61 @ @ public class InputCommentsIndentationCommentIsAtTheEndOfBlock { <nl> / / } <nl> <nl> public void foo11 ( ) { <nl> - CheckUtil <nl> - . getFirstNode ( new DetailAST ( ) ) <nl> - . getFirstChild ( ) <nl> - . getNextSibling ( ) ; <nl> + String <nl> + . valueOf ( new Integer ( 0 ) ) <nl> + . trim ( ) <nl> + . length ( ) ; <nl> / / comment <nl> } <nl> <nl> public void foo12 ( ) { <nl> - CheckUtil <nl> - . getFirstNode ( new DetailAST ( ) ) <nl> - . getFirstChild ( ) <nl> - . getNextSibling ( ) ; <nl> + String <nl> + . valueOf ( new Integer ( 0 ) ) <nl> + . trim ( ) <nl> + . length ( ) ; <nl> / / warn <nl> } <nl> <nl> public void foo13 ( ) { <nl> - CheckUtil . getFirstNode ( new DetailAST ( ) ) <nl> - . getFirstChild ( ) <nl> - . getNextSibling ( ) ; <nl> + String . valueOf ( new Integer ( 0 ) ) <nl> + . trim ( ) <nl> + . length ( ) ; <nl> / / comment <nl> } <nl> <nl> public void foo14 ( ) { <nl> - CheckUtil . getFirstNode ( new DetailAST ( ) ) <nl> - . getFirstChild ( ) <nl> - . getNextSibling ( ) ; <nl> + String . valueOf ( new Integer ( 0 ) ) <nl> + . trim ( ) <nl> + . length ( ) ; <nl> / / warn <nl> } <nl> <nl> public void foo15 ( ) { <nl> - CheckUtil <nl> - . getFirstNode ( new DetailAST ( ) ) ; <nl> + String <nl> + . valueOf ( new Integer ( 0 ) ) ; <nl> / / comment <nl> } <nl> <nl> public void foo16 ( ) { <nl> - CheckUtil <nl> - . getFirstNode ( new DetailAST ( ) ) ; <nl> + String <nl> + . valueOf ( new Integer ( 0 ) ) ; <nl> / / warn <nl> } <nl> <nl> public void foo17 ( ) { <nl> - CheckUtil <nl> - . getFirstNode ( new DetailAST ( ) ) <nl> - . getFirstChild ( ) <nl> + String <nl> + . valueOf ( new Integer ( 0 ) ) <nl> + . trim ( ) <nl> / / comment <nl> - . getNextSibling ( ) ; <nl> + . length ( ) ; <nl> } <nl> <nl> public void foo18 ( ) { <nl> - CheckUtil <nl> - . getFirstNode ( new DetailAST ( ) ) <nl> - . getFirstChild ( ) <nl> + String <nl> + . valueOf ( new Integer ( 0 ) ) <nl> + . trim ( ) <nl> / / warn <nl> - . getNextSibling ( ) ; <nl> + . length ( ) ; <nl> } <nl> <nl> public void foo19 ( ) { <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java <nl> index 4bc4de0 . . 824a89e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java <nl> @ @ - 85 , 7 + 85 , 7 @ @ public class MethodLengthCheckTest extends AbstractModuleTestSupport { <nl> checkConfig . addAttribute ( " max " , " 7 " ) ; <nl> checkConfig . addAttribute ( " countEmpty " , " false " ) ; <nl> final String [ ] expected = { <nl> - " 18 : 5 : " + getCheckMessage ( MSG _ KEY , 8 , 7 ) , <nl> + " 25 : 5 : " + getCheckMessage ( MSG _ KEY , 8 , 7 ) , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputMethodLengthComments . java " ) , expected ) ; <nl> } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultNegative . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultNegative . java <nl> index cf57b9d . . 1eb4e4b 100644 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultNegative . java <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultNegative . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> / / non - compiled with javac : contains specially crafted set of imports for testing <nl> package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; <nl> - import static com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck . MSG _ ORDERING ; <nl> + import static com . some . Class . MESSAGE _ ORDERING ; <nl> import static java . awt . Button . ABORT ; <nl> import static java . io . File . createTempFile ; <nl> import static javax . swing . WindowConstants . * ; <nl> @ @ - 17 , 7 + 17 , 7 @ @ import sun . tools . java . ArrayType ; <nl> import org . junit . Test ; <nl> import org . powermock . api . mockito . PowerMockito ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . some . api . DetailClass ; <nl> <nl> public class InputImportOrder _ EclipseDefaultNegative { <nl> } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultPositive . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultPositive . java <nl> index 36d62e6 . . 43d2c73 100644 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultPositive . java <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultPositive . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> / / non - compiled with javac : contains specially crafted set of imports for testing <nl> package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; <nl> - import static com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck . MSG _ ORDERING ; <nl> + import static com . some . Class . MESSAGE _ ORDERING ; <nl> import static java . awt . Button . ABORT ; <nl> import static java . io . File . createTempFile ; <nl> import static javax . swing . WindowConstants . * ; <nl> @ @ - 16 , 7 + 16 , 7 @ @ import javax . swing . JTable ; <nl> import org . junit . Test ; <nl> import org . powermock . api . mockito . PowerMockito ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import com . some . api . DetailClass ; <nl> <nl> import sun . tools . java . ArrayType ; <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStaticImports . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStaticImports . java <nl> index 5d14e80 . . 81a9c82 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStaticImports . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStaticImports . java <nl> @ @ - 3 , 12 + 3 , 12 @ @ package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; <nl> import static com . puppycrawl . tools . checkstyle . utils . CheckUtil . isElseIf ; <nl> import static com . puppycrawl . tools . checkstyle . utils . CheckUtil . * ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalType . SomeStaticClass ; <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> + import java . lang . String ; <nl> / / configuration : " illegalClassNames " : SomeStaticClass <nl> public class InputIllegalTypeStaticImports <nl> { <nl> - private boolean foo ( DetailAST ast ) { <nl> - return isElseIf ( ast ) ; <nl> + private boolean foo ( String s ) { <nl> + return isElseIf ( null ) ; <nl> } <nl> SomeStaticClass staticClass ; / / WARNING <nl> private static SomeStaticClass foo1 ( ) { return null ; } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> index 89cdaa5 . . 0945cd9 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . indentation . commentsindentation ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . utils . CheckUtil ; <nl> + <nl> + <nl> <nl> / * * <nl> * Contains examples of using comments at the end of the block . <nl> @ @ - 59 , 61 + 59 , 61 @ @ public class InputCommentsIndentationCommentIsAtTheEndOfBlock { <nl> / / } <nl> <nl> public void foo11 ( ) { <nl> - CheckUtil <nl> - . getFirstNode ( new DetailAST ( ) ) <nl> - . getFirstChild ( ) <nl> - . getNextSibling ( ) ; <nl> + String <nl> + . valueOf ( new Integer ( 0 ) ) <nl> + . trim ( ) <nl> + . length ( ) ; <nl> / / comment <nl> } <nl> <nl> public void foo12 ( ) { <nl> - CheckUtil <nl> - . getFirstNode ( new DetailAST ( ) ) <nl> - . getFirstChild ( ) <nl> - . getNextSibling ( ) ; <nl> + String <nl> + . valueOf ( new Integer ( 0 ) ) <nl> + . trim ( ) <nl> + . length ( ) ; <nl> / / violation <nl> } <nl> <nl> public void foo13 ( ) { <nl> - CheckUtil . getFirstNode ( new DetailAST ( ) ) <nl> - . getFirstChild ( ) <nl> - . getNextSibling ( ) ; <nl> + String . valueOf ( new Integer ( 0 ) ) <nl> + . trim ( ) <nl> + . length ( ) ; <nl> / / comment <nl> } <nl> <nl> public void foo14 ( ) { <nl> - CheckUtil . getFirstNode ( new DetailAST ( ) ) <nl> - . getFirstChild ( ) <nl> - . getNextSibling ( ) ; <nl> + String . valueOf ( new Integer ( 0 ) ) <nl> + . trim ( ) <nl> + . length ( ) ; <nl> / / violation <nl> } <nl> <nl> public void foo15 ( ) { <nl> - CheckUtil <nl> - . getFirstNode ( new DetailAST ( ) ) ; <nl> + String <nl> + . valueOf ( new Integer ( 0 ) ) ; <nl> / / comment <nl> } <nl> <nl> public void foo16 ( ) { <nl> - CheckUtil <nl> - . getFirstNode ( new DetailAST ( ) ) ; <nl> + String <nl> + . valueOf ( new Integer ( 0 ) ) ; <nl> / / violation <nl> } <nl> <nl> public void foo17 ( ) { <nl> - CheckUtil <nl> - . getFirstNode ( new DetailAST ( ) ) <nl> - . getFirstChild ( ) <nl> + String <nl> + . valueOf ( new Integer ( 0 ) ) <nl> + . trim ( ) <nl> / / comment <nl> - . getNextSibling ( ) ; <nl> + . length ( ) ; <nl> } <nl> <nl> public void foo18 ( ) { <nl> - CheckUtil <nl> - . getFirstNode ( new DetailAST ( ) ) <nl> - . getFirstChild ( ) <nl> + String <nl> + . valueOf ( new Integer ( 0 ) ) <nl> + . trim ( ) <nl> / / violation <nl> - . getNextSibling ( ) ; <nl> + . length ( ) ; <nl> } <nl> <nl> public void foo19 ( ) { <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / methodlength / InputMethodLengthComments . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / methodlength / InputMethodLengthComments . java <nl> index 8fbcc0e . . ae15475 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / methodlength / InputMethodLengthComments . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / methodlength / InputMethodLengthComments . java <nl> @ @ - 1 , 26 + 1 , 33 @ @ <nl> package com . puppycrawl . tools . checkstyle . checks . sizes . methodlength ; <nl> <nl> - import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> - <nl> public class InputMethodLengthComments { <nl> - public void visitToken ( DetailAST ast ) { <nl> + static class DetailClass { <nl> + public DetailClass find ( int type ) { <nl> + return null ; <nl> + } <nl> + } <nl> + static class Tokens { <nl> + public static int ZERO = 0 ; <nl> + public static int ONE = 1 ; <nl> + } <nl> + <nl> + public void visitToken ( DetailClass ast ) { <nl> <nl> - final DetailAST openingBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> + final DetailClass openingBrace = ast . find ( Tokens . ZERO ) ; <nl> <nl> if ( openingBrace ! = null ) { <nl> - final DetailAST closingBrace = <nl> - openingBrace . findFirstToken ( TokenTypes . RCURLY ) ; <nl> + final DetailClass closingBrace = <nl> + openingBrace . find ( Tokens . ONE ) ; <nl> } <nl> <nl> } <nl> <nl> - public DetailAST visit ( DetailAST ast ) { <nl> - final DetailAST openingBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> - DetailAST closingBrace = null ; <nl> + public DetailClass visit ( DetailClass ast ) { <nl> + final DetailClass openingBrace = ast . find ( Tokens . ZERO ) ; <nl> + DetailClass closingBrace = null ; <nl> <nl> if ( openingBrace ! = null ) { <nl> - closingBrace = openingBrace . findFirstToken ( TokenTypes . RCURLY ) ; <nl> + closingBrace = openingBrace . find ( Tokens . ONE ) ; <nl> } <nl> return closingBrace ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java <nl> index eff8000 . . 18f41dc 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalCatchCheck . MSG _ KEY ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 30 , 6 + 31 , 12 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class IllegalCatchCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testDefault ( ) throws Exception { <nl> DefaultConfiguration checkConfig = createCheckConfig ( IllegalCatchCheck . class ) ; <nl> @ @ - 43 , 7 + 50 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { <nl> " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " java . lang . Throwable " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalCatchCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 59 , 7 + 66 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { <nl> " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " java . lang . Throwable " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalCatchCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 73 , 7 + 80 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { <nl> " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " RuntimeException " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck2 . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalCatchCheck2 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 976d795 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputIllegalCatchCheck { <nl> + public void foo ( ) { <nl> + try { / / class names <nl> + } catch ( RuntimeException e ) { <nl> + } catch ( Exception e ) { <nl> + } catch ( Throwable e ) { <nl> + } <nl> + } <nl> + <nl> + public void bar ( ) { <nl> + try { / * fully qualified class names * / <nl> + } catch ( java . lang . RuntimeException e ) { <nl> + } catch ( java . lang . Exception e ) { <nl> + } catch ( java . lang . Throwable e ) { <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java <nl> new file mode 100644 <nl> index 0000000 . . 1fe6b5f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputIllegalCatchCheck2 { <nl> + public void foo ( ) throws OneMoreException { <nl> + try { <nl> + 	 foo1 ( ) ; <nl> + } catch ( RuntimeException | SQLException e ) { } <nl> + try { <nl> + 	 foo1 ( ) ; <nl> + } catch ( RuntimeException | SQLException | OneMoreException e ) { } <nl> + try { <nl> + 	 foo1 ( ) ; <nl> + } catch ( OneMoreException | RuntimeException | SQLException e ) { } <nl> + try { <nl> + 	 foo1 ( ) ; <nl> + } catch ( OneMoreException | SQLException | RuntimeException e ) { } <nl> + <nl> + } <nl> + <nl> + private void foo1 ( ) throws RuntimeException , SQLException , OneMoreException { <nl> + <nl> + } <nl> + <nl> + private class SQLException extends Exception { <nl> + <nl> + } <nl> + <nl> + private class OneMoreException extends Exception { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java <nl> deleted file mode 100644 <nl> index bc00bcd . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 19 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - public class InputIllegalCatchCheck { <nl> - public void foo ( ) { <nl> - try { / / class names <nl> - } catch ( RuntimeException e ) { <nl> - } catch ( Exception e ) { <nl> - } catch ( Throwable e ) { <nl> - } <nl> - } <nl> - <nl> - public void bar ( ) { <nl> - try { / * fully qualified class names * / <nl> - } catch ( java . lang . RuntimeException e ) { <nl> - } catch ( java . lang . Exception e ) { <nl> - } catch ( java . lang . Throwable e ) { <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java <nl> deleted file mode 100644 <nl> index 66ddc24 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 31 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - public class InputIllegalCatchCheck2 { <nl> - public void foo ( ) throws OneMoreException { <nl> - try { <nl> - 	 foo1 ( ) ; <nl> - } catch ( RuntimeException | SQLException e ) { } <nl> - try { <nl> - 	 foo1 ( ) ; <nl> - } catch ( RuntimeException | SQLException | OneMoreException e ) { } <nl> - try { <nl> - 	 foo1 ( ) ; <nl> - } catch ( OneMoreException | RuntimeException | SQLException e ) { } <nl> - try { <nl> - 	 foo1 ( ) ; <nl> - } catch ( OneMoreException | SQLException | RuntimeException e ) { } <nl> - <nl> - } <nl> - <nl> - private void foo1 ( ) throws RuntimeException , SQLException , OneMoreException { <nl> - <nl> - } <nl> - <nl> - private class SQLException extends Exception { <nl> - <nl> - } <nl> - <nl> - private class OneMoreException extends Exception { <nl> - <nl> - } <nl> - }

TEST DIFF:
diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / InputCommentsIndentationCommentIsAtTheEndOfBlock . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 index 04ffa2e . . 0b078e5 100644 
 - - - a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule4861blockcommentstyle / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 package com . google . checkstyle . test . chapter4formatting . rule4861blockcommentstyle ; 
 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . utils . CheckUtil ; 
 + 
 + 
 
 / * * 
 * Contains examples of using comments at the end of the block . 
 @ @ - 59 , 61 + 59 , 61 @ @ public class InputCommentsIndentationCommentIsAtTheEndOfBlock { 
 / / } 
 
 public void foo11 ( ) { 
 - CheckUtil 
 - . getFirstNode ( new DetailAST ( ) ) 
 - . getFirstChild ( ) 
 - . getNextSibling ( ) ; 
 + String 
 + . valueOf ( new Integer ( 0 ) ) 
 + . trim ( ) 
 + . length ( ) ; 
 / / comment 
 } 
 
 public void foo12 ( ) { 
 - CheckUtil 
 - . getFirstNode ( new DetailAST ( ) ) 
 - . getFirstChild ( ) 
 - . getNextSibling ( ) ; 
 + String 
 + . valueOf ( new Integer ( 0 ) ) 
 + . trim ( ) 
 + . length ( ) ; 
 / / warn 
 } 
 
 public void foo13 ( ) { 
 - CheckUtil . getFirstNode ( new DetailAST ( ) ) 
 - . getFirstChild ( ) 
 - . getNextSibling ( ) ; 
 + String . valueOf ( new Integer ( 0 ) ) 
 + . trim ( ) 
 + . length ( ) ; 
 / / comment 
 } 
 
 public void foo14 ( ) { 
 - CheckUtil . getFirstNode ( new DetailAST ( ) ) 
 - . getFirstChild ( ) 
 - . getNextSibling ( ) ; 
 + String . valueOf ( new Integer ( 0 ) ) 
 + . trim ( ) 
 + . length ( ) ; 
 / / warn 
 } 
 
 public void foo15 ( ) { 
 - CheckUtil 
 - . getFirstNode ( new DetailAST ( ) ) ; 
 + String 
 + . valueOf ( new Integer ( 0 ) ) ; 
 / / comment 
 } 
 
 public void foo16 ( ) { 
 - CheckUtil 
 - . getFirstNode ( new DetailAST ( ) ) ; 
 + String 
 + . valueOf ( new Integer ( 0 ) ) ; 
 / / warn 
 } 
 
 public void foo17 ( ) { 
 - CheckUtil 
 - . getFirstNode ( new DetailAST ( ) ) 
 - . getFirstChild ( ) 
 + String 
 + . valueOf ( new Integer ( 0 ) ) 
 + . trim ( ) 
 / / comment 
 - . getNextSibling ( ) ; 
 + . length ( ) ; 
 } 
 
 public void foo18 ( ) { 
 - CheckUtil 
 - . getFirstNode ( new DetailAST ( ) ) 
 - . getFirstChild ( ) 
 + String 
 + . valueOf ( new Integer ( 0 ) ) 
 + . trim ( ) 
 / / warn 
 - . getNextSibling ( ) ; 
 + . length ( ) ; 
 } 
 
 public void foo19 ( ) { 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java 
 index 4bc4de0 . . 824a89e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / MethodLengthCheckTest . java 
 @ @ - 85 , 7 + 85 , 7 @ @ public class MethodLengthCheckTest extends AbstractModuleTestSupport { 
 checkConfig . addAttribute ( " max " , " 7 " ) ; 
 checkConfig . addAttribute ( " countEmpty " , " false " ) ; 
 final String [ ] expected = { 
 - " 18 : 5 : " + getCheckMessage ( MSG _ KEY , 8 , 7 ) , 
 + " 25 : 5 : " + getCheckMessage ( MSG _ KEY , 8 , 7 ) , 
 } ; 
 verify ( checkConfig , getPath ( " InputMethodLengthComments . java " ) , expected ) ; 
 } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultNegative . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultNegative . java 
 index cf57b9d . . 1eb4e4b 100644 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultNegative . java 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultNegative . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 / / non - compiled with javac : contains specially crafted set of imports for testing 
 package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; 
 - import static com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck . MSG _ ORDERING ; 
 + import static com . some . Class . MESSAGE _ ORDERING ; 
 import static java . awt . Button . ABORT ; 
 import static java . io . File . createTempFile ; 
 import static javax . swing . WindowConstants . * ; 
 @ @ - 17 , 7 + 17 , 7 @ @ import sun . tools . java . ArrayType ; 
 import org . junit . Test ; 
 import org . powermock . api . mockito . PowerMockito ; 
 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . some . api . DetailClass ; 
 
 public class InputImportOrder _ EclipseDefaultNegative { 
 } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultPositive . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultPositive . java 
 index 36d62e6 . . 43d2c73 100644 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultPositive . java 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / imports / importorder / InputImportOrder _ EclipseDefaultPositive . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 / / non - compiled with javac : contains specially crafted set of imports for testing 
 package com . puppycrawl . tools . checkstyle . checks . imports . importorder ; 
 - import static com . puppycrawl . tools . checkstyle . checks . imports . ImportOrderCheck . MSG _ ORDERING ; 
 + import static com . some . Class . MESSAGE _ ORDERING ; 
 import static java . awt . Button . ABORT ; 
 import static java . io . File . createTempFile ; 
 import static javax . swing . WindowConstants . * ; 
 @ @ - 16 , 7 + 16 , 7 @ @ import javax . swing . JTable ; 
 import org . junit . Test ; 
 import org . powermock . api . mockito . PowerMockito ; 
 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import com . some . api . DetailClass ; 
 
 import sun . tools . java . ArrayType ; 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStaticImports . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStaticImports . java 
 index 5d14e80 . . 81a9c82 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStaticImports . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegaltype / InputIllegalTypeStaticImports . java 
 @ @ - 3 , 12 + 3 , 12 @ @ package com . puppycrawl . tools . checkstyle . checks . coding . illegaltype ; 
 import static com . puppycrawl . tools . checkstyle . utils . CheckUtil . isElseIf ; 
 import static com . puppycrawl . tools . checkstyle . utils . CheckUtil . * ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . illegaltype . InputIllegalType . SomeStaticClass ; 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 + import java . lang . String ; 
 / / configuration : " illegalClassNames " : SomeStaticClass 
 public class InputIllegalTypeStaticImports 
 { 
 - private boolean foo ( DetailAST ast ) { 
 - return isElseIf ( ast ) ; 
 + private boolean foo ( String s ) { 
 + return isElseIf ( null ) ; 
 } 
 SomeStaticClass staticClass ; / / WARNING 
 private static SomeStaticClass foo1 ( ) { return null ; } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 index 89cdaa5 . . 0945cd9 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / indentation / commentsindentation / InputCommentsIndentationCommentIsAtTheEndOfBlock . java 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . indentation . commentsindentation ; 
 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . utils . CheckUtil ; 
 + 
 + 
 
 / * * 
 * Contains examples of using comments at the end of the block . 
 @ @ - 59 , 61 + 59 , 61 @ @ public class InputCommentsIndentationCommentIsAtTheEndOfBlock { 
 / / } 
 
 public void foo11 ( ) { 
 - CheckUtil 
 - . getFirstNode ( new DetailAST ( ) ) 
 - . getFirstChild ( ) 
 - . getNextSibling ( ) ; 
 + String 
 + . valueOf ( new Integer ( 0 ) ) 
 + . trim ( ) 
 + . length ( ) ; 
 / / comment 
 } 
 
 public void foo12 ( ) { 
 - CheckUtil 
 - . getFirstNode ( new DetailAST ( ) ) 
 - . getFirstChild ( ) 
 - . getNextSibling ( ) ; 
 + String 
 + . valueOf ( new Integer ( 0 ) ) 
 + . trim ( ) 
 + . length ( ) ; 
 / / violation 
 } 
 
 public void foo13 ( ) { 
 - CheckUtil . getFirstNode ( new DetailAST ( ) ) 
 - . getFirstChild ( ) 
 - . getNextSibling ( ) ; 
 + String . valueOf ( new Integer ( 0 ) ) 
 + . trim ( ) 
 + . length ( ) ; 
 / / comment 
 } 
 
 public void foo14 ( ) { 
 - CheckUtil . getFirstNode ( new DetailAST ( ) ) 
 - . getFirstChild ( ) 
 - . getNextSibling ( ) ; 
 + String . valueOf ( new Integer ( 0 ) ) 
 + . trim ( ) 
 + . length ( ) ; 
 / / violation 
 } 
 
 public void foo15 ( ) { 
 - CheckUtil 
 - . getFirstNode ( new DetailAST ( ) ) ; 
 + String 
 + . valueOf ( new Integer ( 0 ) ) ; 
 / / comment 
 } 
 
 public void foo16 ( ) { 
 - CheckUtil 
 - . getFirstNode ( new DetailAST ( ) ) ; 
 + String 
 + . valueOf ( new Integer ( 0 ) ) ; 
 / / violation 
 } 
 
 public void foo17 ( ) { 
 - CheckUtil 
 - . getFirstNode ( new DetailAST ( ) ) 
 - . getFirstChild ( ) 
 + String 
 + . valueOf ( new Integer ( 0 ) ) 
 + . trim ( ) 
 / / comment 
 - . getNextSibling ( ) ; 
 + . length ( ) ; 
 } 
 
 public void foo18 ( ) { 
 - CheckUtil 
 - . getFirstNode ( new DetailAST ( ) ) 
 - . getFirstChild ( ) 
 + String 
 + . valueOf ( new Integer ( 0 ) ) 
 + . trim ( ) 
 / / violation 
 - . getNextSibling ( ) ; 
 + . length ( ) ; 
 } 
 
 public void foo19 ( ) { 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / methodlength / InputMethodLengthComments . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / methodlength / InputMethodLengthComments . java 
 index 8fbcc0e . . ae15475 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / methodlength / InputMethodLengthComments . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / sizes / methodlength / InputMethodLengthComments . java 
 @ @ - 1 , 26 + 1 , 33 @ @ 
 package com . puppycrawl . tools . checkstyle . checks . sizes . methodlength ; 
 
 - import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 - import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 - 
 public class InputMethodLengthComments { 
 - public void visitToken ( DetailAST ast ) { 
 + static class DetailClass { 
 + public DetailClass find ( int type ) { 
 + return null ; 
 + } 
 + } 
 + static class Tokens { 
 + public static int ZERO = 0 ; 
 + public static int ONE = 1 ; 
 + } 
 + 
 + public void visitToken ( DetailClass ast ) { 
 
 - final DetailAST openingBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 + final DetailClass openingBrace = ast . find ( Tokens . ZERO ) ; 
 
 if ( openingBrace ! = null ) { 
 - final DetailAST closingBrace = 
 - openingBrace . findFirstToken ( TokenTypes . RCURLY ) ; 
 + final DetailClass closingBrace = 
 + openingBrace . find ( Tokens . ONE ) ; 
 } 
 
 } 
 
 - public DetailAST visit ( DetailAST ast ) { 
 - final DetailAST openingBrace = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 - DetailAST closingBrace = null ; 
 + public DetailClass visit ( DetailClass ast ) { 
 + final DetailClass openingBrace = ast . find ( Tokens . ZERO ) ; 
 + DetailClass closingBrace = null ; 
 
 if ( openingBrace ! = null ) { 
 - closingBrace = openingBrace . findFirstToken ( TokenTypes . RCURLY ) ; 
 + closingBrace = openingBrace . find ( Tokens . ONE ) ; 
 } 
 return closingBrace ; 
 }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java 
 index eff8000 . . 18f41dc 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalCatchCheck . MSG _ KEY ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 30 , 6 + 31 , 12 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class IllegalCatchCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testDefault ( ) throws Exception { 
 DefaultConfiguration checkConfig = createCheckConfig ( IllegalCatchCheck . class ) ; 
 @ @ - 43 , 7 + 50 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { 
 " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " java . lang . Throwable " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalCatchCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 59 , 7 + 66 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { 
 " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " java . lang . Throwable " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalCatchCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 73 , 7 + 80 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { 
 " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " RuntimeException " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck2 . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalCatchCheck2 . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java 
 new file mode 100644 
 index 0000000 . . 976d795 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputIllegalCatchCheck { 
 + public void foo ( ) { 
 + try { / / class names 
 + } catch ( RuntimeException e ) { 
 + } catch ( Exception e ) { 
 + } catch ( Throwable e ) { 
 + } 
 + } 
 + 
 + public void bar ( ) { 
 + try { / * fully qualified class names * / 
 + } catch ( java . lang . RuntimeException e ) { 
 + } catch ( java . lang . Exception e ) { 
 + } catch ( java . lang . Throwable e ) { 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java 
 new file mode 100644 
 index 0000000 . . 1fe6b5f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputIllegalCatchCheck2 { 
 + public void foo ( ) throws OneMoreException { 
 + try { 
 + 	 foo1 ( ) ; 
 + } catch ( RuntimeException | SQLException e ) { } 
 + try { 
 + 	 foo1 ( ) ; 
 + } catch ( RuntimeException | SQLException | OneMoreException e ) { } 
 + try { 
 + 	 foo1 ( ) ; 
 + } catch ( OneMoreException | RuntimeException | SQLException e ) { } 
 + try { 
 + 	 foo1 ( ) ; 
 + } catch ( OneMoreException | SQLException | RuntimeException e ) { } 
 + 
 + } 
 + 
 + private void foo1 ( ) throws RuntimeException , SQLException , OneMoreException { 
 + 
 + } 
 + 
 + private class SQLException extends Exception { 
 + 
 + } 
 + 
 + private class OneMoreException extends Exception { 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java 
 deleted file mode 100644 
 index bc00bcd . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java 
 + + + / dev / null 
 @ @ - 1 , 19 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - public class InputIllegalCatchCheck { 
 - public void foo ( ) { 
 - try { / / class names 
 - } catch ( RuntimeException e ) { 
 - } catch ( Exception e ) { 
 - } catch ( Throwable e ) { 
 - } 
 - } 
 - 
 - public void bar ( ) { 
 - try { / * fully qualified class names * / 
 - } catch ( java . lang . RuntimeException e ) { 
 - } catch ( java . lang . Exception e ) { 
 - } catch ( java . lang . Throwable e ) { 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java 
 deleted file mode 100644 
 index 66ddc24 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java 
 + + + / dev / null 
 @ @ - 1 , 31 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - public class InputIllegalCatchCheck2 { 
 - public void foo ( ) throws OneMoreException { 
 - try { 
 - 	 foo1 ( ) ; 
 - } catch ( RuntimeException | SQLException e ) { } 
 - try { 
 - 	 foo1 ( ) ; 
 - } catch ( RuntimeException | SQLException | OneMoreException e ) { } 
 - try { 
 - 	 foo1 ( ) ; 
 - } catch ( OneMoreException | RuntimeException | SQLException e ) { } 
 - try { 
 - 	 foo1 ( ) ; 
 - } catch ( OneMoreException | SQLException | RuntimeException e ) { } 
 - 
 - } 
 - 
 - private void foo1 ( ) throws RuntimeException , SQLException , OneMoreException { 
 - 
 - } 
 - 
 - private class SQLException extends Exception { 
 - 
 - } 
 - 
 - private class OneMoreException extends Exception { 
 - 
 - } 
 - }
