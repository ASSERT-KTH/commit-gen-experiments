BLEU SCORE: 0.026048484532717218

TEST MSG: Issue # 3546 : add lambda in a rightcurlycheck
GENERATED MSG: RightCurly . Force line break before ' } ' in case SAME option . # 250

TEST DIFF (one line): diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java <nl> index 377bbef . . f52d548 100644 <nl> - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java <nl> + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java <nl> @ @ - 121 , 4 + 121 , 19 @ @ public class RightCurlyTest extends BaseCheckTestSupport { <nl> final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; <nl> verify ( checkConfig , filePath , expected , warnList ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testRightCurlyAloneInLambda ( ) throws Exception { <nl> + final String [ ] expected = { <nl> + " 12 : 70 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 70 ) , <nl> + " 15 : 46 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 46 ) , <nl> + " 22 : 33 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 33 ) , <nl> + } ; <nl> + <nl> + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyAlone " ) ; <nl> + final String filePath = getPath ( " InputRightCurlyAloneLambda . java " ) ; <nl> + <nl> + final Integer [ ] warnList = { 12 , 15 , 22 } ; <nl> + verify ( checkConfig , filePath , expected , warnList ) ; <nl> + } <nl> } <nl> diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyAloneLambda . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyAloneLambda . java <nl> new file mode 100644 <nl> index 0000000 . . 821e60e <nl> - - - / dev / null <nl> + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyAloneLambda . java <nl> @ @ - 0 , 0 + 1 , 30 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> + <nl> + / * Test lambda * / <nl> + public class InputRightCurlyAloneLambda { <nl> + <nl> + static Runnable k1 = ( ) - > { <nl> + String . valueOf ( " Test rightCurly 1 ! " ) ; <nl> + } ; <nl> + <nl> + static Runnable k2 = ( ) - > String . valueOf ( " Test rightCurly 2 ! " ) ; <nl> + <nl> + static Runnable k3 = ( ) - > { String . valueOf ( " Test rightCurly 3 ! " ) ; } ; / / violation <nl> + <nl> + static Runnable k4 = ( ) - > { <nl> + String . valueOf ( " Test rightCurly 4 ! " ) ; } ; / / violation <nl> + <nl> + static Runnable k5 = ( ) - > <nl> + { <nl> + String . valueOf ( " Test rightCurly 5 ! " ) ; <nl> + } ; <nl> + <nl> + static Runnable k6 = ( ) - > { } ; / / violation <nl> + <nl> + static Runnable k7 = ( ) - > { <nl> + } ; <nl> + <nl> + static Runnable k8 = ( ) - > <nl> + { <nl> + } ; <nl> + } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> index 8cc49a5 . . 2d80793 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java <nl> @ @ - 42 , 7 + 42 , 8 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> * { @ link TokenTypes # LITERAL _ CATCH LITERAL _ CATCH } , <nl> * { @ link TokenTypes # LITERAL _ FINALLY LITERAL _ FINALLY } , <nl> * { @ link TokenTypes # LITERAL _ IF LITERAL _ IF } , <nl> - * { @ link TokenTypes # LITERAL _ ELSE LITERAL _ ELSE } . <nl> + * { @ link TokenTypes # LITERAL _ ELSE LITERAL _ ELSE } , <nl> + * { @ link TokenTypes # LAMBDA LAMBDA } . <nl> * Other acceptable tokens are : <nl> * { @ link TokenTypes # CLASS _ DEF CLASS _ DEF } , <nl> * { @ link TokenTypes # METHOD _ DEF METHOD _ DEF } , <nl> @ @ - 52 , 6 + 53 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> * { @ link TokenTypes # LITERAL _ DO LITERAL _ DO } . <nl> * { @ link TokenTypes # STATIC _ INIT STATIC _ INIT } . <nl> * { @ link TokenTypes # INSTANCE _ INIT INSTANCE _ INIT } . <nl> + * { @ link TokenTypes # LAMBDA LAMBDA } . <nl> * < / p > <nl> * < p > <nl> * < b > shouldStartLine < / b > - does the check need to check <nl> @ @ - 143 , 6 + 145 , 7 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> TokenTypes . LITERAL _ FINALLY , <nl> TokenTypes . LITERAL _ IF , <nl> TokenTypes . LITERAL _ ELSE , <nl> + TokenTypes . LAMBDA , <nl> } ; <nl> } <nl> <nl> @ @ - 162 , 6 + 165 , 7 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> TokenTypes . LITERAL _ DO , <nl> TokenTypes . STATIC _ INIT , <nl> TokenTypes . INSTANCE _ INIT , <nl> + TokenTypes . LAMBDA , <nl> } ; <nl> } <nl> <nl> @ @ - 203 , 14 + 207 , 11 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> private static String validate ( Details details , RightCurlyOption bracePolicy , <nl> boolean shouldStartLine , String targetSourceLine ) { <nl> final DetailAST rcurly = details . rcurly ; <nl> - final DetailAST lcurly = details . lcurly ; <nl> final DetailAST nextToken = details . nextToken ; <nl> final boolean shouldCheckLastRcurly = details . shouldCheckLastRcurly ; <nl> String violation = " " ; <nl> <nl> - if ( bracePolicy = = RightCurlyOption . SAME <nl> - & & ! hasLineBreakBefore ( rcurly ) <nl> - & & lcurly . getLineNo ( ) ! = rcurly . getLineNo ( ) ) { <nl> + if ( shouldHaveBeLineBreakBefore ( bracePolicy , details ) ) { <nl> violation = MSG _ KEY _ LINE _ BREAK _ BEFORE ; <nl> } <nl> else if ( shouldCheckLastRcurly ) { <nl> @ @ - 248 , 14 + 249 , 19 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> * @ return true if a right curly should be alone on a line . <nl> * / <nl> private static boolean shouldBeAloneOnLine ( RightCurlyOption bracePolicy , Details details ) { <nl> + final int tokenLambda = details . lcurly . getParent ( ) . getType ( ) ; <nl> return bracePolicy = = RightCurlyOption . ALONE <nl> + & & tokenLambda ! = TokenTypes . LAMBDA <nl> & & ! isAloneOnLine ( details ) <nl> & & ! isEmptyBody ( details . lcurly ) <nl> | | bracePolicy = = RightCurlyOption . ALONE _ OR _ SINGLELINE <nl> & & ! isAloneOnLine ( details ) <nl> & & ! isSingleLineBlock ( details ) <nl> & & ! isAnonInnerClassInit ( details . lcurly ) <nl> - & & ! isEmptyBody ( details . lcurly ) ; <nl> + & & ! isEmptyBody ( details . lcurly ) <nl> + | | bracePolicy = = RightCurlyOption . ALONE <nl> + & & tokenLambda = = TokenTypes . LAMBDA <nl> + & & ! isAloneLambda ( details ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 296 , 6 + 302 , 24 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> + * Checks if right curly is alone on line in token the lambda . <nl> + * @ param details for validation . <nl> + * @ return true , if right curly is alone on line . <nl> + * / <nl> + private static boolean isAloneLambda ( Details details ) { <nl> + final DetailAST lcurly = details . lcurly ; <nl> + final DetailAST rcurly = details . rcurly ; <nl> + final int lcurlyNo = lcurly . getLineNo ( ) ; <nl> + final int rcurlyNo = rcurly . getLineNo ( ) ; <nl> + boolean result = false ; <nl> + if ( lcurlyNo ! = rcurlyNo ) { <nl> + result = rcurly . getPreviousSibling ( ) = = null <nl> + | | rcurlyNo ! = rcurly . getPreviousSibling ( ) . getLineNo ( ) ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> * Checks whether lcurly is in anonymous inner class initialization . <nl> * @ param lcurly left curly token . <nl> * @ return true if lcurly begins anonymous inner class initialization . <nl> @ @ - 377 , 9 + 401 , 16 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> rcurly = lcurly . getLastChild ( ) ; <nl> } <nl> break ; <nl> + case TokenTypes . LAMBDA : <nl> + lcurly = ast . findFirstToken ( TokenTypes . SLIST ) ; <nl> + nextToken = getNextToken ( ast ) ; <nl> + if ( lcurly ! = null ) { <nl> + rcurly = lcurly . getLastChild ( ) ; <nl> + } <nl> + break ; <nl> default : <nl> / / ATTENTION ! We have default here , but we expect case TokenTypes . METHOD _ DEF , <nl> - / / TokenTypes . LITERAL _ FOR , TokenTypes . LITERAL _ WHILE , only . <nl> + / / TokenTypes . LITERAL _ FOR , TokenTypes . LITERAL _ WHILE only . <nl> / / It has been done to improve coverage to 100 % . I couldn ' t replace it with <nl> / / if - else - if block because code was ugly and didn ' t pass pmd check . <nl> <nl> @ @ - 436 , 6 + 467 , 21 @ @ public class RightCurlyCheck extends AbstractCheck { <nl> } <nl> <nl> / * * <nl> + * Checks that before a right curly should be a linebreak . <nl> + * @ param bracePolicy options for placing the right curly brace . <nl> + * @ param details Details for validation <nl> + * @ return true if before a right curly should be a linebreak . <nl> + * / <nl> + private static boolean shouldHaveBeLineBreakBefore ( RightCurlyOption bracePolicy , <nl> + Details details ) { <nl> + final DetailAST rcurly = details . rcurly ; <nl> + final DetailAST lcurly = details . lcurly ; <nl> + return bracePolicy = = RightCurlyOption . SAME <nl> + & & ! hasLineBreakBefore ( rcurly ) <nl> + & & lcurly . getLineNo ( ) ! = rcurly . getLineNo ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Checks if right curly has line break before . <nl> * @ param rightCurly right curly token . <nl> * @ return true , if right curly has line break before . <nl> diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml <nl> index 2146586 . . 179ebc7 100644 <nl> - - - a / src / main / resources / google _ checks . xml <nl> + + + b / src / main / resources / google _ checks . xml <nl> @ @ - 61 , 7 + 61 , 7 @ @ <nl> < module name = " RightCurly " > <nl> < property name = " id " value = " RightCurlyAlone " / > <nl> < property name = " option " value = " alone " / > <nl> - < property name = " tokens " value = " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF , LITERAL _ FOR , LITERAL _ WHILE , STATIC _ INIT , INSTANCE _ INIT " / > <nl> + < property name = " tokens " value = " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF , LITERAL _ FOR , LITERAL _ WHILE , STATIC _ INIT , INSTANCE _ INIT , LAMBDA " / > <nl> < / module > <nl> < module name = " WhitespaceAround " > <nl> < property name = " allowEmptyConstructors " value = " true " / > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> index 1b43a38 . . 30eef8a 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> @ @ - 260 , 6 + 260 , 18 @ @ public class RightCurlyCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testRightCurlyIsAloneInLambda ( ) throws Exception { <nl> + checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; <nl> + checkConfig . addAttribute ( " tokens " , " LAMBDA " ) ; <nl> + final String [ ] expected = { <nl> + " 14 : 74 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 74 ) , <nl> + " 17 : 49 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 49 ) , <nl> + " 24 : 33 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 33 ) , <nl> + } ; <nl> + verify ( checkConfig , getPath ( " InputRightCurlyAloneInLambda . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testCatchWithoutFinally ( ) throws Exception { <nl> final String [ ] expected = { <nl> " 15 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ SAME , " } " , 13 ) , <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneInLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneInLambda . java <nl> new file mode 100644 <nl> index 0000000 . . b5b8400 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneInLambda . java <nl> @ @ - 0 , 0 + 1 , 32 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> + <nl> + / * <nl> + This is test class for token LAMBDA . <nl> + * / <nl> + public class InputRightCurlyAloneInLambda { <nl> + <nl> + static Runnable r1 = ( ) - > { <nl> + String . valueOf ( " Test rightCurly one ! " ) ; <nl> + } ; <nl> + <nl> + static Runnable r2 = ( ) - > String . valueOf ( " Test rightCurly two ! " ) ; <nl> + <nl> + static Runnable r3 = ( ) - > { String . valueOf ( " Test rightCurly three ! " ) ; } ; / / violation <nl> + <nl> + static Runnable r4 = ( ) - > { <nl> + String . valueOf ( " Test rightCurly four ! " ) ; } ; / / violation <nl> + <nl> + static Runnable r5 = ( ) - > <nl> + { <nl> + String . valueOf ( " Test rightCurly five ! " ) ; <nl> + } ; <nl> + <nl> + static Runnable r6 = ( ) - > { } ; / / violation <nl> + <nl> + static Runnable r7 = ( ) - > { <nl> + } ; <nl> + <nl> + static Runnable r8 = ( ) - > <nl> + { <nl> + } ; <nl> + } <nl> diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml <nl> index 2c2c152 . . af6eb53 100644 <nl> - - - a / src / xdocs / config _ blocks . xml <nl> + + + b / src / xdocs / config _ blocks . xml <nl> @ @ - 799 , 7 + 799 , 9 @ @ for ( int i = 0 ; i & lt ; 10 ; value . incrementValue ( ) ) ; / / OK <nl> < a <nl> href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STATIC _ INIT " > STATIC _ INIT < / a > , <nl> < a <nl> - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INSTANCE _ INIT " > INSTANCE _ INIT < / a > . < / td > <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INSTANCE _ INIT " > INSTANCE _ INIT < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LAMBDA " > LAMBDA < / a > . < / td > <nl> <nl> < td > < a <nl> href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ TRY " > LITERAL _ TRY < / a > , <nl> @ @ - 810 , 7 + 812 , 9 @ @ for ( int i = 0 ; i & lt ; 10 ; value . incrementValue ( ) ) ; / / OK <nl> < a <nl> href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ IF " > LITERAL _ IF < / a > , <nl> < a <nl> - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ ELSE " > LITERAL _ ELSE < / a > . < / td > <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ ELSE " > LITERAL _ ELSE < / a > , <nl> + < a <nl> + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LAMBDA " > LAMBDA < / a > . < / td > <nl> < / tr > <nl> < / table > <nl> < / subsection >
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> index 757eb6c . . 3210410 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java <nl> @ @ - 110 , 6 + 110 , 7 @ @ public abstract class AbstractTypeAwareCheck extends Check <nl> TokenTypes . PACKAGE _ DEF , <nl> TokenTypes . IMPORT , <nl> TokenTypes . CLASS _ DEF , <nl> + TokenTypes . INTERFACE _ DEF , <nl> TokenTypes . ENUM _ DEF , <nl> } ; <nl> } <nl> @ @ - 136 , 6 + 137 , 7 @ @ public abstract class AbstractTypeAwareCheck extends Check <nl> processImport ( aAST ) ; <nl> } <nl> else if ( ( aAST . getType ( ) = = TokenTypes . CLASS _ DEF ) <nl> + | | ( aAST . getType ( ) = = TokenTypes . INTERFACE _ DEF ) <nl> | | ( aAST . getType ( ) = = TokenTypes . ENUM _ DEF ) ) <nl> { <nl> processClass ( aAST ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> index c3a1a58 . . 119f72c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java <nl> @ @ - 83 , 6 + 83 , 7 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck <nl> TokenTypes . PACKAGE _ DEF , <nl> TokenTypes . IMPORT , <nl> TokenTypes . CLASS _ DEF , <nl> + TokenTypes . INTERFACE _ DEF , <nl> TokenTypes . ENUM _ DEF , <nl> TokenTypes . METHOD _ DEF , <nl> TokenTypes . CTOR _ DEF , <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> index 1c2693e . . 1191359 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java <nl> @ @ - 233 , 6 + 233 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck <nl> { <nl> return new int [ ] { TokenTypes . PACKAGE _ DEF , TokenTypes . IMPORT , <nl> TokenTypes . CLASS _ DEF , TokenTypes . ENUM _ DEF , <nl> + TokenTypes . INTERFACE _ DEF , <nl> TokenTypes . METHOD _ DEF , TokenTypes . CTOR _ DEF , <nl> TokenTypes . ANNOTATION _ FIELD _ DEF , <nl> } ; <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java b / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java <nl> index 79ed647 . . 28ae00f 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java <nl> @ @ - 45 , 4 + 45 , 19 @ @ public class TestGenerics < E extends java . lang . Exception , <nl> { <nl> } <nl> } <nl> + <nl> + / * * <nl> + * @ param < T > some parameter <nl> + * @ param < E2 > some exception parameter <nl> + * / <nl> + public interface InnerInterface < T , E2 extends Throwable > { <nl> + / * * <nl> + * Some javadoc . <nl> + * @ param t a parameter <nl> + * @ throws E2 in some case . <nl> + * @ return some string <nl> + * / <nl> + public abstract String doStuff ( T t ) throws E2 ; <nl> + } <nl> } <nl> +

TEST DIFF:
diff - - git a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java 
 index 377bbef . . f52d548 100644 
 - - - a / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java 
 + + + b / src / it / java / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / RightCurlyTest . java 
 @ @ - 121 , 4 + 121 , 19 @ @ public class RightCurlyTest extends BaseCheckTestSupport { 
 final Integer [ ] warnList = getLinesWithWarn ( filePath ) ; 
 verify ( checkConfig , filePath , expected , warnList ) ; 
 } 
 + 
 + @ Test 
 + public void testRightCurlyAloneInLambda ( ) throws Exception { 
 + final String [ ] expected = { 
 + " 12 : 70 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 70 ) , 
 + " 15 : 46 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 46 ) , 
 + " 22 : 33 : " + getCheckMessage ( RightCurlyCheck . class , MSG _ KEY _ LINE _ ALONE , " } " , 33 ) , 
 + } ; 
 + 
 + final Configuration checkConfig = getCheckConfig ( " RightCurly " , " RightCurlyAlone " ) ; 
 + final String filePath = getPath ( " InputRightCurlyAloneLambda . java " ) ; 
 + 
 + final Integer [ ] warnList = { 12 , 15 , 22 } ; 
 + verify ( checkConfig , filePath , expected , warnList ) ; 
 + } 
 } 
 diff - - git a / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyAloneLambda . java b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyAloneLambda . java 
 new file mode 100644 
 index 0000000 . . 821e60e 
 - - - / dev / null 
 + + + b / src / it / resources / com / google / checkstyle / test / chapter4formatting / rule412nonemptyblocks / InputRightCurlyAloneLambda . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 + 
 + / * Test lambda * / 
 + public class InputRightCurlyAloneLambda { 
 + 
 + static Runnable k1 = ( ) - > { 
 + String . valueOf ( " Test rightCurly 1 ! " ) ; 
 + } ; 
 + 
 + static Runnable k2 = ( ) - > String . valueOf ( " Test rightCurly 2 ! " ) ; 
 + 
 + static Runnable k3 = ( ) - > { String . valueOf ( " Test rightCurly 3 ! " ) ; } ; / / violation 
 + 
 + static Runnable k4 = ( ) - > { 
 + String . valueOf ( " Test rightCurly 4 ! " ) ; } ; / / violation 
 + 
 + static Runnable k5 = ( ) - > 
 + { 
 + String . valueOf ( " Test rightCurly 5 ! " ) ; 
 + } ; 
 + 
 + static Runnable k6 = ( ) - > { } ; / / violation 
 + 
 + static Runnable k7 = ( ) - > { 
 + } ; 
 + 
 + static Runnable k8 = ( ) - > 
 + { 
 + } ; 
 + } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 index 8cc49a5 . . 2d80793 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheck . java 
 @ @ - 42 , 7 + 42 , 8 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 * { @ link TokenTypes # LITERAL _ CATCH LITERAL _ CATCH } , 
 * { @ link TokenTypes # LITERAL _ FINALLY LITERAL _ FINALLY } , 
 * { @ link TokenTypes # LITERAL _ IF LITERAL _ IF } , 
 - * { @ link TokenTypes # LITERAL _ ELSE LITERAL _ ELSE } . 
 + * { @ link TokenTypes # LITERAL _ ELSE LITERAL _ ELSE } , 
 + * { @ link TokenTypes # LAMBDA LAMBDA } . 
 * Other acceptable tokens are : 
 * { @ link TokenTypes # CLASS _ DEF CLASS _ DEF } , 
 * { @ link TokenTypes # METHOD _ DEF METHOD _ DEF } , 
 @ @ - 52 , 6 + 53 , 7 @ @ import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 * { @ link TokenTypes # LITERAL _ DO LITERAL _ DO } . 
 * { @ link TokenTypes # STATIC _ INIT STATIC _ INIT } . 
 * { @ link TokenTypes # INSTANCE _ INIT INSTANCE _ INIT } . 
 + * { @ link TokenTypes # LAMBDA LAMBDA } . 
 * < / p > 
 * < p > 
 * < b > shouldStartLine < / b > - does the check need to check 
 @ @ - 143 , 6 + 145 , 7 @ @ public class RightCurlyCheck extends AbstractCheck { 
 TokenTypes . LITERAL _ FINALLY , 
 TokenTypes . LITERAL _ IF , 
 TokenTypes . LITERAL _ ELSE , 
 + TokenTypes . LAMBDA , 
 } ; 
 } 
 
 @ @ - 162 , 6 + 165 , 7 @ @ public class RightCurlyCheck extends AbstractCheck { 
 TokenTypes . LITERAL _ DO , 
 TokenTypes . STATIC _ INIT , 
 TokenTypes . INSTANCE _ INIT , 
 + TokenTypes . LAMBDA , 
 } ; 
 } 
 
 @ @ - 203 , 14 + 207 , 11 @ @ public class RightCurlyCheck extends AbstractCheck { 
 private static String validate ( Details details , RightCurlyOption bracePolicy , 
 boolean shouldStartLine , String targetSourceLine ) { 
 final DetailAST rcurly = details . rcurly ; 
 - final DetailAST lcurly = details . lcurly ; 
 final DetailAST nextToken = details . nextToken ; 
 final boolean shouldCheckLastRcurly = details . shouldCheckLastRcurly ; 
 String violation = " " ; 
 
 - if ( bracePolicy = = RightCurlyOption . SAME 
 - & & ! hasLineBreakBefore ( rcurly ) 
 - & & lcurly . getLineNo ( ) ! = rcurly . getLineNo ( ) ) { 
 + if ( shouldHaveBeLineBreakBefore ( bracePolicy , details ) ) { 
 violation = MSG _ KEY _ LINE _ BREAK _ BEFORE ; 
 } 
 else if ( shouldCheckLastRcurly ) { 
 @ @ - 248 , 14 + 249 , 19 @ @ public class RightCurlyCheck extends AbstractCheck { 
 * @ return true if a right curly should be alone on a line . 
 * / 
 private static boolean shouldBeAloneOnLine ( RightCurlyOption bracePolicy , Details details ) { 
 + final int tokenLambda = details . lcurly . getParent ( ) . getType ( ) ; 
 return bracePolicy = = RightCurlyOption . ALONE 
 + & & tokenLambda ! = TokenTypes . LAMBDA 
 & & ! isAloneOnLine ( details ) 
 & & ! isEmptyBody ( details . lcurly ) 
 | | bracePolicy = = RightCurlyOption . ALONE _ OR _ SINGLELINE 
 & & ! isAloneOnLine ( details ) 
 & & ! isSingleLineBlock ( details ) 
 & & ! isAnonInnerClassInit ( details . lcurly ) 
 - & & ! isEmptyBody ( details . lcurly ) ; 
 + & & ! isEmptyBody ( details . lcurly ) 
 + | | bracePolicy = = RightCurlyOption . ALONE 
 + & & tokenLambda = = TokenTypes . LAMBDA 
 + & & ! isAloneLambda ( details ) ; 
 } 
 
 / * * 
 @ @ - 296 , 6 + 302 , 24 @ @ public class RightCurlyCheck extends AbstractCheck { 
 } 
 
 / * * 
 + * Checks if right curly is alone on line in token the lambda . 
 + * @ param details for validation . 
 + * @ return true , if right curly is alone on line . 
 + * / 
 + private static boolean isAloneLambda ( Details details ) { 
 + final DetailAST lcurly = details . lcurly ; 
 + final DetailAST rcurly = details . rcurly ; 
 + final int lcurlyNo = lcurly . getLineNo ( ) ; 
 + final int rcurlyNo = rcurly . getLineNo ( ) ; 
 + boolean result = false ; 
 + if ( lcurlyNo ! = rcurlyNo ) { 
 + result = rcurly . getPreviousSibling ( ) = = null 
 + | | rcurlyNo ! = rcurly . getPreviousSibling ( ) . getLineNo ( ) ; 
 + } 
 + return result ; 
 + } 
 + 
 + / * * 
 * Checks whether lcurly is in anonymous inner class initialization . 
 * @ param lcurly left curly token . 
 * @ return true if lcurly begins anonymous inner class initialization . 
 @ @ - 377 , 9 + 401 , 16 @ @ public class RightCurlyCheck extends AbstractCheck { 
 rcurly = lcurly . getLastChild ( ) ; 
 } 
 break ; 
 + case TokenTypes . LAMBDA : 
 + lcurly = ast . findFirstToken ( TokenTypes . SLIST ) ; 
 + nextToken = getNextToken ( ast ) ; 
 + if ( lcurly ! = null ) { 
 + rcurly = lcurly . getLastChild ( ) ; 
 + } 
 + break ; 
 default : 
 / / ATTENTION ! We have default here , but we expect case TokenTypes . METHOD _ DEF , 
 - / / TokenTypes . LITERAL _ FOR , TokenTypes . LITERAL _ WHILE , only . 
 + / / TokenTypes . LITERAL _ FOR , TokenTypes . LITERAL _ WHILE only . 
 / / It has been done to improve coverage to 100 % . I couldn ' t replace it with 
 / / if - else - if block because code was ugly and didn ' t pass pmd check . 
 
 @ @ - 436 , 6 + 467 , 21 @ @ public class RightCurlyCheck extends AbstractCheck { 
 } 
 
 / * * 
 + * Checks that before a right curly should be a linebreak . 
 + * @ param bracePolicy options for placing the right curly brace . 
 + * @ param details Details for validation 
 + * @ return true if before a right curly should be a linebreak . 
 + * / 
 + private static boolean shouldHaveBeLineBreakBefore ( RightCurlyOption bracePolicy , 
 + Details details ) { 
 + final DetailAST rcurly = details . rcurly ; 
 + final DetailAST lcurly = details . lcurly ; 
 + return bracePolicy = = RightCurlyOption . SAME 
 + & & ! hasLineBreakBefore ( rcurly ) 
 + & & lcurly . getLineNo ( ) ! = rcurly . getLineNo ( ) ; 
 + } 
 + 
 + / * * 
 * Checks if right curly has line break before . 
 * @ param rightCurly right curly token . 
 * @ return true , if right curly has line break before . 
 diff - - git a / src / main / resources / google _ checks . xml b / src / main / resources / google _ checks . xml 
 index 2146586 . . 179ebc7 100644 
 - - - a / src / main / resources / google _ checks . xml 
 + + + b / src / main / resources / google _ checks . xml 
 @ @ - 61 , 7 + 61 , 7 @ @ 
 < module name = " RightCurly " > 
 < property name = " id " value = " RightCurlyAlone " / > 
 < property name = " option " value = " alone " / > 
 - < property name = " tokens " value = " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF , LITERAL _ FOR , LITERAL _ WHILE , STATIC _ INIT , INSTANCE _ INIT " / > 
 + < property name = " tokens " value = " CLASS _ DEF , METHOD _ DEF , CTOR _ DEF , LITERAL _ FOR , LITERAL _ WHILE , STATIC _ INIT , INSTANCE _ INIT , LAMBDA " / > 
 < / module > 
 < module name = " WhitespaceAround " > 
 < property name = " allowEmptyConstructors " value = " true " / > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 index 1b43a38 . . 30eef8a 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 @ @ - 260 , 6 + 260 , 18 @ @ public class RightCurlyCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public void testRightCurlyIsAloneInLambda ( ) throws Exception { 
 + checkConfig . addAttribute ( " option " , RightCurlyOption . ALONE . toString ( ) ) ; 
 + checkConfig . addAttribute ( " tokens " , " LAMBDA " ) ; 
 + final String [ ] expected = { 
 + " 14 : 74 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 74 ) , 
 + " 17 : 49 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 49 ) , 
 + " 24 : 33 : " + getCheckMessage ( MSG _ KEY _ LINE _ ALONE , " } " , 33 ) , 
 + } ; 
 + verify ( checkConfig , getPath ( " InputRightCurlyAloneInLambda . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testCatchWithoutFinally ( ) throws Exception { 
 final String [ ] expected = { 
 " 15 : 13 : " + getCheckMessage ( MSG _ KEY _ LINE _ SAME , " } " , 13 ) , 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneInLambda . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneInLambda . java 
 new file mode 100644 
 index 0000000 . . b5b8400 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / blocks / InputRightCurlyAloneInLambda . java 
 @ @ - 0 , 0 + 1 , 32 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 + 
 + / * 
 + This is test class for token LAMBDA . 
 + * / 
 + public class InputRightCurlyAloneInLambda { 
 + 
 + static Runnable r1 = ( ) - > { 
 + String . valueOf ( " Test rightCurly one ! " ) ; 
 + } ; 
 + 
 + static Runnable r2 = ( ) - > String . valueOf ( " Test rightCurly two ! " ) ; 
 + 
 + static Runnable r3 = ( ) - > { String . valueOf ( " Test rightCurly three ! " ) ; } ; / / violation 
 + 
 + static Runnable r4 = ( ) - > { 
 + String . valueOf ( " Test rightCurly four ! " ) ; } ; / / violation 
 + 
 + static Runnable r5 = ( ) - > 
 + { 
 + String . valueOf ( " Test rightCurly five ! " ) ; 
 + } ; 
 + 
 + static Runnable r6 = ( ) - > { } ; / / violation 
 + 
 + static Runnable r7 = ( ) - > { 
 + } ; 
 + 
 + static Runnable r8 = ( ) - > 
 + { 
 + } ; 
 + } 
 diff - - git a / src / xdocs / config _ blocks . xml b / src / xdocs / config _ blocks . xml 
 index 2c2c152 . . af6eb53 100644 
 - - - a / src / xdocs / config _ blocks . xml 
 + + + b / src / xdocs / config _ blocks . xml 
 @ @ - 799 , 7 + 799 , 9 @ @ for ( int i = 0 ; i & lt ; 10 ; value . incrementValue ( ) ) ; / / OK 
 < a 
 href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # STATIC _ INIT " > STATIC _ INIT < / a > , 
 < a 
 - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INSTANCE _ INIT " > INSTANCE _ INIT < / a > . < / td > 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # INSTANCE _ INIT " > INSTANCE _ INIT < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LAMBDA " > LAMBDA < / a > . < / td > 
 
 < td > < a 
 href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ TRY " > LITERAL _ TRY < / a > , 
 @ @ - 810 , 7 + 812 , 9 @ @ for ( int i = 0 ; i & lt ; 10 ; value . incrementValue ( ) ) ; / / OK 
 < a 
 href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ IF " > LITERAL _ IF < / a > , 
 < a 
 - href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ ELSE " > LITERAL _ ELSE < / a > . < / td > 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LITERAL _ ELSE " > LITERAL _ ELSE < / a > , 
 + < a 
 + href = " apidocs / com / puppycrawl / tools / checkstyle / api / TokenTypes . html # LAMBDA " > LAMBDA < / a > . < / td > 
 < / tr > 
 < / table > 
 < / subsection >

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 index 757eb6c . . 3210410 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / AbstractTypeAwareCheck . java 
 @ @ - 110 , 6 + 110 , 7 @ @ public abstract class AbstractTypeAwareCheck extends Check 
 TokenTypes . PACKAGE _ DEF , 
 TokenTypes . IMPORT , 
 TokenTypes . CLASS _ DEF , 
 + TokenTypes . INTERFACE _ DEF , 
 TokenTypes . ENUM _ DEF , 
 } ; 
 } 
 @ @ - 136 , 6 + 137 , 7 @ @ public abstract class AbstractTypeAwareCheck extends Check 
 processImport ( aAST ) ; 
 } 
 else if ( ( aAST . getType ( ) = = TokenTypes . CLASS _ DEF ) 
 + | | ( aAST . getType ( ) = = TokenTypes . INTERFACE _ DEF ) 
 | | ( aAST . getType ( ) = = TokenTypes . ENUM _ DEF ) ) 
 { 
 processClass ( aAST ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 index c3a1a58 . . 119f72c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RedundantThrowsCheck . java 
 @ @ - 83 , 6 + 83 , 7 @ @ public class RedundantThrowsCheck extends AbstractTypeAwareCheck 
 TokenTypes . PACKAGE _ DEF , 
 TokenTypes . IMPORT , 
 TokenTypes . CLASS _ DEF , 
 + TokenTypes . INTERFACE _ DEF , 
 TokenTypes . ENUM _ DEF , 
 TokenTypes . METHOD _ DEF , 
 TokenTypes . CTOR _ DEF , 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 index 1c2693e . . 1191359 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / javadoc / JavadocMethodCheck . java 
 @ @ - 233 , 6 + 233 , 7 @ @ public class JavadocMethodCheck extends AbstractTypeAwareCheck 
 { 
 return new int [ ] { TokenTypes . PACKAGE _ DEF , TokenTypes . IMPORT , 
 TokenTypes . CLASS _ DEF , TokenTypes . ENUM _ DEF , 
 + TokenTypes . INTERFACE _ DEF , 
 TokenTypes . METHOD _ DEF , TokenTypes . CTOR _ DEF , 
 TokenTypes . ANNOTATION _ FIELD _ DEF , 
 } ; 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java b / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java 
 index 79ed647 . . 28ae00f 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / javadoc / TestGenerics . java 
 @ @ - 45 , 4 + 45 , 19 @ @ public class TestGenerics < E extends java . lang . Exception , 
 { 
 } 
 } 
 + 
 + / * * 
 + * @ param < T > some parameter 
 + * @ param < E2 > some exception parameter 
 + * / 
 + public interface InnerInterface < T , E2 extends Throwable > { 
 + / * * 
 + * Some javadoc . 
 + * @ param t a parameter 
 + * @ throws E2 in some case . 
 + * @ return some string 
 + * / 
 + public abstract String doStuff ( T t ) throws E2 ; 
 + } 
 } 
 +
