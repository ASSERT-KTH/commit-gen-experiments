BLEU SCORE: 0.24808415001701817

TEST MSG: Issue # 4587 : Removed all unused resource classes form package
GENERATED MSG: Issue # 4587 : Moved all resources for UpperEll check

TEST DIFF (one line): diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputIllegalTokens . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputIllegalTokens . java <nl> deleted file mode 100644 <nl> index 94e415c . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputIllegalTokens . java <nl> + + + / dev / null <nl> @ @ - 1 , 18 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks ; <nl> - <nl> - public class InputIllegalTokens <nl> - { <nl> - public void methodWithPreviouslyIllegalTokens ( ) <nl> - { <nl> - int i = 0 ; <nl> - switch ( i ) <nl> - { <nl> - default : <nl> - i - - ; <nl> - i + + ; <nl> - break ; <nl> - } <nl> - } <nl> - <nl> - public native void nativeMethod ( ) ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputSemantic . java <nl> deleted file mode 100644 <nl> index b85c912 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputSemantic . java <nl> + + + / dev / null <nl> @ @ - 1 , 222 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks ; <nl> - <nl> - import java . io . * ; / / star import for instantiation tests <nl> - import java . awt . Dimension ; / / explicit import for instantiation tests <nl> - import java . awt . Color ; <nl> - <nl> - / * * <nl> - * Test case for detecting simple semantic errors . <nl> - * @ author Lars K Ã¼ hne <nl> - * * / <nl> - class InputSemantic <nl> - { <nl> - / * Boolean instantiation in a static initializer * / <nl> - static { <nl> - Boolean x = new Boolean ( true ) ; <nl> - } <nl> - <nl> - / * Boolean instantiation in a non - static initializer * / <nl> - { <nl> - Boolean x = new Boolean ( true ) ; <nl> - Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; <nl> - } <nl> - <nl> - / * * fully qualified Boolean instantiation in a method . * * / <nl> - Boolean getBoolean ( ) <nl> - { <nl> - return new java . lang . Boolean ( true ) ; <nl> - } <nl> - <nl> - void otherInstantiations ( ) <nl> - { <nl> - / / instantiation of classes in the same package <nl> - Object o1 = new InputBraces ( ) ; <nl> - Object o2 = new InputModifier ( ) ; <nl> - / / classes in another package with . * import <nl> - ByteArrayOutputStream s = new ByteArrayOutputStream ( ) ; <nl> - File f = new File ( " / tmp " ) ; <nl> - / / classes in another package with explicit import <nl> - Dimension dim = new Dimension ( ) ; <nl> - Color col = new Color ( 0 , 0 , 0 ) ; <nl> - } <nl> - <nl> - void exHandlerTest ( ) <nl> - { <nl> - try { <nl> - ; / / do stuff and don ' t handle exceptions in some cases <nl> - } <nl> - catch ( IllegalStateException emptyCatchIsAlwaysAnError ) { <nl> - } <nl> - catch ( NullPointerException ex ) { <nl> - / / can never happen , but only commentig this is currently an error <nl> - / / Possible future enhancement : allowEmptyCatch = " commented " <nl> - } <nl> - catch ( ArrayIndexOutOfBoundsException ex ) { <nl> - ; <nl> - / / can never happen , semicolon makes checkstyle happy <nl> - / / this is a workaround for above problem <nl> - } <nl> - catch ( NegativeArraySizeException ex ) { <nl> - { <nl> - } <nl> - / / can never happen , empty compound statement is another workaround <nl> - } <nl> - catch ( UnsupportedOperationException handledException ) { <nl> - System . identityHashCode ( handledException . getMessage ( ) ) ; <nl> - } <nl> - catch ( SecurityException ex ) { / * hello * / } <nl> - catch ( StringIndexOutOfBoundsException ex ) { } <nl> - catch ( IllegalArgumentException ex ) { } <nl> - <nl> - try { <nl> - } <nl> - finally { <nl> - } <nl> - try { <nl> - / / something <nl> - } <nl> - finally { <nl> - / / something <nl> - } <nl> - try { <nl> - ; / / something <nl> - } <nl> - finally { <nl> - ; / / statement <nl> - } <nl> - } <nl> - <nl> - / * * test * * / <nl> - private static final long IGNORE = 666l + 666L ; <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - <nl> - public class EqualsVsHashCode1 <nl> - { <nl> - public boolean equals ( int a ) / / wrong arg type , don ' t flag <nl> - { <nl> - return a = = 1 ; <nl> - } <nl> - } <nl> - <nl> - public class EqualsVsHashCode2 <nl> - { <nl> - public boolean equals ( String a ) / / flag <nl> - { <nl> - return true ; <nl> - } <nl> - } <nl> - <nl> - public class EqualsVsHashCode3 <nl> - { <nl> - public boolean equals ( Object a ) / / don ' t flag <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - public int hashCode ( ) <nl> - { <nl> - return 0 ; <nl> - } <nl> - } <nl> - <nl> - public class EqualsVsHashCode4 <nl> - { <nl> - / / in anon inner class <nl> - ByteArrayOutputStream bos1 = new ByteArrayOutputStream ( ) <nl> - { <nl> - public boolean equals ( Object a ) / / don ' t flag <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - public int hashCode ( ) <nl> - { <nl> - return 0 ; <nl> - } <nl> - } ; <nl> - <nl> - ByteArrayOutputStream bos2 = new ByteArrayOutputStream ( ) <nl> - { <nl> - public boolean equals ( Object a ) / / flag <nl> - { <nl> - return true ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - public void triggerEmptyBlockWithoutBlock ( ) <nl> - { <nl> - / / an if statement without a block to increase test coverage <nl> - if ( true ) <nl> - return ; <nl> - } <nl> - <nl> - / / empty instance initializer <nl> - { <nl> - } <nl> - <nl> - public class EqualsVsHashCode5 <nl> - { <nl> - public < A > boolean equals ( int a ) / / wrong arg type , don ' t flag even with generics <nl> - { <nl> - return a = = 1 ; <nl> - } <nl> - } <nl> - <nl> - public class EqualsVsHashCode6 <nl> - { <nl> - public < A > boolean equals ( Comparable < A > a ) / / flag , weven with generics <nl> - { <nl> - return true ; <nl> - } <nl> - } <nl> - <nl> - private class InputBraces { <nl> - <nl> - } <nl> - <nl> - private class InputModifier { <nl> - <nl> - } <nl> - <nl> - synchronized void foo ( ) { <nl> - synchronized ( this ) { } / / not OK <nl> - synchronized ( Class . class ) { / / OK <nl> - synchronized ( new Object ( ) ) { <nl> - / / not OK if checking statements <nl> - } <nl> - } <nl> - } <nl> - <nl> - <nl> - static { <nl> - <nl> - int a = 0 ; } <nl> - <nl> - static { <nl> - <nl> - } <nl> - }
NEAREST DIFF (one line): diff - - git a / config / pmd - main . xml b / config / pmd - main . xml <nl> index 776cade . . 70929fd 100644 <nl> - - - a / config / pmd - main . xml <nl> + + + b / config / pmd - main . xml <nl> @ @ - 14 , 14 + 14 , 9 @ @ <nl> < rule ref = " rulesets / java / unusedcode . xml / UnusedPrivateMethod " > <nl> < properties > <nl> < ! - - generates false - positives on private methods called within a file - - > <nl> - < property name = " violationSuppressXPath " <nl> - value = " / / MethodDeclaration [ @ Name = ' countTokens ' and . . / . . / . . [ @ Image = ' DescendantTokenCheck ' ] ] " / > <nl> - < ! - - generates false - positives on private methods called within a file - - > <nl> - < property name = " violationSuppressXPath " <nl> - value = " / / MethodDeclaration [ @ Name = ' getHashCodeBasedOnObjectContent ' and . . / . . / . . [ @ Image = ' PropertyCacheFile ' ] ] " / > <nl> - < ! - - generates false - positives on private methods called within a file - - > <nl> - < property name = " violationSuppressXPath " <nl> - value = " / / ClassOrInterfaceDeclaration [ @ Image = ' DescendantTokenCheck ' ] / / MethodDeclarator [ @ Image = ' countTokens ' ] " / > <nl> + < property name = " violationSuppressXPath " value = " <nl> + / / MethodDeclaration [ @ Name = ' countTokens ' and . . / . . / . . [ @ Image = ' DescendantTokenCheck ' ] ] <nl> + | / / MethodDeclaration [ @ Name = ' getHashCodeBasedOnObjectContent ' and . . / . . / . . [ @ Image = ' PropertyCacheFile ' ] ] " / > <nl> < / properties > <nl> < / rule > <nl> < / ruleset > <nl> diff - - git a / config / pmd - test . xml b / config / pmd - test . xml <nl> index cac5498 . . a0664dc 100644 <nl> - - - a / config / pmd - test . xml <nl> + + + b / config / pmd - test . xml <nl> @ @ - 67 , 11 + 67 , 51 @ @ <nl> < / properties > <nl> < / rule > <nl> <nl> - < rule ref = " rulesets / java / junit . xml " > <nl> - < ! - - tentative - - > <nl> - < exclude name = " JUnitTestsShouldIncludeAssert " / > <nl> + < rule ref = " rulesets / java / junit . xml / JUnitTestsShouldIncludeAssert " > <nl> + < ! - - pmd cannot find assert if it is located in private method of this class called from the test <nl> + method or method of another class - - > <nl> + < properties > <nl> + < ! - - in SuppressionCommentFilterTest , SuppressWithNearbyCommentFilterTest , SuppressionFilterTest <nl> + pmd does not accept nl . jqno . equalsverifier . EqualsVerifier # . verify ( ) as correctness check method - - > <nl> + < ! - - in AbstractJavadocCheckTest pmd does not find asserts in another class methods called from the test method - - > <nl> + < ! - - in ImportControlCheckTest pmd does not find asserts in private methods of the test class called from the test method - - > <nl> + < ! - - in AstRegressionTest pmd does not find asserts in inner classes methods called from the test method - - > <nl> + < ! - - in AllChecksTest pmd does not find asserts in lambdas - - > <nl> + < ! - - Starting from TreeWalkerTest tests should be rewrited - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressionFilterTest ' ] / / MethodDeclarator [ @ Image = ' testEqualsAndHashCode ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressionCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' testEqualsAndHashCodeOfTagClass ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressWithNearbyCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' testEqualsAndHashCodeOfTagClass ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractJavadocCheckTest ' ] / / MethodDeclarator [ @ Image = ' testBlockCommentPositionHasPrivateConstr ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' ImportControlCheckTest ' ] / / MethodDeclarator [ @ Image = ' testPkgRegExpInChild ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' ImportControlCheckTest ' ] / / MethodDeclarator [ @ Image = ' testPkgRegExpInParent ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' ImportControlCheckTest ' ] / / MethodDeclarator [ @ Image = ' testPkgRegExpInBoth ' ] <nl> + | / ClassOrInterfaceDeclaration [ @ Image = ' AstRegressionTest ' ] / / MethodDeclarator [ @ Image = ' testImpossibleExceptions ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' AstRegressionTest ' ] / / MethodDeclarator [ @ Image = ' testImpossibleValid ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' AllChecksTest ' ] / / MethodDeclarator [ @ Image = ' testAllModulesAreReferencedInConfigFile ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' TreeWalkerTest ' ] / / MethodDeclarator [ @ Image = ' testProcessNonJavaFiles ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' TreeWalkerTest ' ] / / MethodDeclarator [ @ Image = ' testWithCacheWithNoViolation ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' CheckstyleAntTaskTest ' ] / / MethodDeclarator [ @ Image = ' testDefaultFlawless ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' CheckstyleAntTaskTest ' ] / / MethodDeclarator [ @ Image = ' testFileSet ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' CheckstyleAntTaskTest ' ] / / MethodDeclarator [ @ Image = ' testMaxErrors ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' CheckstyleAntTaskTest ' ] / / MethodDeclarator [ @ Image = ' testOverrideProperty ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' CheckstyleAntTaskTest ' ] / / MethodDeclarator [ @ Image = ' testConfigurationByUrl ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' CheckstyleAntTaskTest ' ] / / MethodDeclarator [ @ Image = ' testConfigurationByResource ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' CheckstyleAntTaskTest ' ] / / MethodDeclarator [ @ Image = ' testSetPropertiesFile ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' TranslationCheckTest ' ] / / MethodDeclarator [ @ Image = ' testLogIoException ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' DeclarationOrderCheckTest ' ] / / MethodDeclarator [ @ Image = ' testParents ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' DeclarationOrderCheckTest ' ] / / MethodDeclarator [ @ Image = ' testImproperToken ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' IllegalInstantiationCheckTest ' ] / / MethodDeclarator [ @ Image = ' testNullClassLoader ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' RequireThisCheckTest ' ] / / MethodDeclarator [ @ Image = ' testDefaultSwitch ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' NPathComplexityCheckTest ' ] / / MethodDeclarator [ @ Image = ' testDefaultHooks ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' NPathComplexityCheckTest ' ] / / MethodDeclarator [ @ Image = ' testVisitTokenBeforeExpressionRange ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressionsLoaderTest ' ] / / MethodDeclarator [ @ Image = ' testNoCheckYesId ' ] <nl> + " / > <nl> + < / properties > <nl> < / rule > <nl> <nl> + / / testDefaultFlawless CheckstyleAntTaskTest <nl> + <nl> + <nl> < rule ref = " config / pmd . xml / ConfusingTernary " > <nl> < properties > <nl> < ! - - false positive : commit validation is a sequence of checks , if we shuffle them it would be broken - - > <nl> @ @ - 95 , 24 + 135 , 18 @ @ <nl> < properties > <nl> < ! - - this inherited from GeneratedJavaLexer - - > <nl> < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AstRegressionTest ' ] <nl> - / / ClassOrInterfaceDeclaration [ @ Image = ' AssertGeneratedJavaLexer ' ] / / MethodDeclarator [ @ Image = ' LA ' ] " / > <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' AssertGeneratedJavaLexer ' ] / / MethodDeclarator [ @ Image = ' LA ' ] " / > <nl> < / properties > <nl> < / rule > <nl> <nl> < rule ref = " rulesets / java / unusedcode . xml / UnusedPrivateMethod " > <nl> < properties > <nl> < ! - - generates false - positives on private methods called within a file - - > <nl> - < property name = " violationSuppressXPath " <nl> - value = " / / ClassOrInterfaceDeclaration [ @ Image = ' IndentationCheckTest ' ] / / MethodDeclarator [ @ Image = ' verifyWarns ' ] " / > <nl> - < ! - - generates false - positives on private methods called within a file - - > <nl> - < property name = " violationSuppressXPath " <nl> - value = " / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressWarningsFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] " / > <nl> - < ! - - generates false - positives on private methods called within a file - - > <nl> - < property name = " violationSuppressXPath " <nl> - value = " / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressWithNearbyCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] " / > <nl> - < ! - - generates false - positives on private methods called within a file - - > <nl> - < property name = " violationSuppressXPath " <nl> - value = " / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressionCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] " / > <nl> + < property name = " violationSuppressXPath " value = " <nl> + / / ClassOrInterfaceDeclaration [ @ Image = ' IndentationCheckTest ' ] / / MethodDeclarator [ @ Image = ' verifyWarns ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressWarningsFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressWithNearbyCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] <nl> + | / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressionCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] " / > <nl> < / properties > <nl> < / rule > <nl> < / ruleset > <nl> diff - - git a / config / suppressions . xml b / config / suppressions . xml <nl> index 596cb63 . . c6a05c1 100644 <nl> - - - a / config / suppressions . xml <nl> + + + b / config / suppressions . xml <nl> @ @ - 76 , 6 + 76 , 7 @ @ <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " PropertyCacheFile \ . java " / > <nl> < suppress checks = " ClassFanOutComplexity " files = " [ \ \ / ] Main \ . java " / > <nl> < suppress checks = " ClassFanOutComplexity " files = " CheckstyleAntTask \ . java " / > <nl> + < suppress checks = " ClassFanOutComplexity " files = " CheckerTest \ . java " / > <nl> < ! - - a lot of GUI elements is OK - - > <nl> < suppress checks = " ClassDataAbstractionCoupling " files = " ( TreeTable | MainFrame ) \ . java " / > <nl> <nl> diff - - git a / pom . xml b / pom . xml <nl> index 85647e2 . . 43bcb62 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 947 , 6 + 947 , 7 @ @ <nl> < artifactId > maven - pmd - plugin < / artifactId > <nl> < executions > <nl> < execution > <nl> + < phase > verify < / phase > <nl> < goals > <nl> < goal > check < / goal > <nl> < / goals > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 177ec47 . . 77b92e8 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 59 , 6 + 59 , 7 @ @ import org . powermock . api . mockito . PowerMockito ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . AuditEvent ; <nl> + import com . puppycrawl . tools . checkstyle . api . AuditListener ; <nl> import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; <nl> import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> import com . puppycrawl . tools . checkstyle . api . Context ; <nl> @ @ - 359 , 9 + 360 , 15 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testNoModuleFactory ( ) throws Exception { <nl> final Checker checker = new Checker ( ) ; <nl> - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + final ClassLoader classLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; <nl> <nl> + checker . setModuleClassLoader ( classLoader ) ; <nl> checker . finishLocalSetup ( ) ; <nl> + final Context actualCtx = ( Context ) Whitebox . getInternalState ( checker , " childContext " ) ; <nl> + <nl> + assertNotNull ( " Default module factory should be created when it is not specified " , <nl> + actualCtx . get ( " moduleFactory " ) ) ; <nl> + assertEquals ( " Invalid classLoader " , classLoader , actualCtx . get ( " classLoader " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 412 , 6 + 419 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + @ SuppressWarnings ( " unchecked " ) <nl> public void testSetupChildListener ( ) throws Exception { <nl> final Checker checker = new Checker ( ) ; <nl> final PackageObjectFactory factory = new PackageObjectFactory ( <nl> @ @ - 421 , 6 + 429 , 12 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> final Configuration config = new DefaultConfiguration ( <nl> DebugAuditAdapter . class . getCanonicalName ( ) ) ; <nl> checker . setupChild ( config ) ; <nl> + <nl> + final List < AuditListener > listeners = <nl> + ( List < AuditListener > ) Whitebox . getInternalState ( checker , " listeners " ) ; <nl> + assertTrue ( " Invalid child listener class " , <nl> + listeners . get ( listeners . size ( ) - 1 ) instanceof DebugAuditAdapter ) ; <nl> + <nl> } <nl> <nl> @ Test <nl> @ @ - 580 , 6 + 594 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { <nl> / / the invocation of clearCache method does not throw an exception . <nl> final Checker checker = new Checker ( ) ; <nl> checker . clearCache ( ) ; <nl> + assertNull ( " If cache file is not set the cache should default to null " , <nl> + Whitebox . getInternalState ( checker , " cache " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> index bf35517 . . 05d8ec9 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java <nl> @ @ - 155 , 9 + 155 , 15 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { <nl> @ Test <nl> public void testSettersForParameters ( ) throws Exception { <nl> final TreeWalker treeWalker = new TreeWalker ( ) ; <nl> + final DefaultConfiguration config = new DefaultConfiguration ( " default config " ) ; <nl> treeWalker . setTabWidth ( 1 ) ; <nl> - treeWalker . configure ( new DefaultConfiguration ( " default config " ) ) ; <nl> + treeWalker . configure ( config ) ; <nl> treeWalker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; <nl> + <nl> + assertEquals ( " Invalid setter result " , 1 , <nl> + Whitebox . getInternalState ( treeWalker , " tabWidth " ) ) ; <nl> + assertEquals ( " Invalid configuration " , config , <nl> + Whitebox . getInternalState ( treeWalker , " configuration " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> index 4fa9be5 . . f0f794d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . ant ; <nl> <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> @ @ - 49 , 6 + 50 , 7 @ @ import org . apache . tools . ant . types . Reference ; <nl> import org . apache . tools . ant . types . resources . FileResource ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> + import org . mockito . internal . util . reflection . Whitebox ; <nl> import org . powermock . api . mockito . PowerMockito ; <nl> import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> @ @ - 501 , 6 + 503 , 9 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> antTask . setClasspath ( new Path ( project , " / " ) ) ; <nl> antTask . setClasspath ( new Path ( project , " / checkstyle " ) ) ; <nl> antTask . setClasspathRef ( new Reference ( ) ) ; <nl> + <nl> + assertNotNull ( " Classpath should not be null " , <nl> + Whitebox . getInternalState ( antTask , " classpath " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 508 , 6 + 513 , 9 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { <nl> / / temporary fake test <nl> final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; <nl> antTask . setClasspathRef ( new Reference ( ) ) ; <nl> + <nl> + assertNotNull ( " Classpath should not be null " , <nl> + Whitebox . getInternalState ( antTask , " classpath " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java <nl> index a1c01c8 . . 5710f79 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java <nl> @ @ - 102 , 6 + 102 , 8 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { <nl> public void testSetAliasListEmpty ( ) { <nl> final SuppressWarningsHolder holder = new SuppressWarningsHolder ( ) ; <nl> holder . setAliasList ( " " ) ; <nl> + assertEquals ( " Empty alias list should not be set " , " " , <nl> + SuppressWarningsHolder . getAlias ( " " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> index 5069b4d . . f3491ba 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java <nl> @ @ - 24 , 11 + 24 , 13 @ @ import static com . puppycrawl . tools . checkstyle . checks . TranslationCheck . MSG _ KEY _ MI <nl> import static org . hamcrest . CoreMatchers . containsString ; <nl> import static org . hamcrest . CoreMatchers . endsWith ; <nl> import static org . junit . Assert . assertThat ; <nl> + import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . lang . reflect . Method ; <nl> + import java . util . Set ; <nl> <nl> import org . junit . Test ; <nl> <nl> @ @ - 89 , 6 + 91 , 7 @ @ public class TranslationCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + @ SuppressWarnings ( " unchecked " ) <nl> public void testLogIoExceptionFileNotFound ( ) throws Exception { <nl> / / I can ' t put wrong file here . Checkstyle fails before check started . <nl> / / I saw some usage of file or handling of wrong file in Checker , or somewhere <nl> @ @ - 102 , 8 + 105 , 8 @ @ public class TranslationCheckTest extends BaseCheckTestSupport { <nl> final Method loadKeys = <nl> check . getClass ( ) . getDeclaredMethod ( " getTranslationKeys " , File . class ) ; <nl> loadKeys . setAccessible ( true ) ; <nl> - loadKeys . invoke ( check , new File ( " " ) ) ; <nl> - <nl> + final Set < String > keys = ( Set < String > ) loadKeys . invoke ( check , new File ( " " ) ) ; <nl> + assertTrue ( " Translation keys should be empty when File is not found " , keys . isEmpty ( ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java <nl> index 4fdc06c . . b709ef3 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . header ; <nl> import static com . puppycrawl . tools . checkstyle . checks . header . RegexpHeaderCheck . MSG _ HEADER _ MISMATCH ; <nl> import static com . puppycrawl . tools . checkstyle . checks . header . RegexpHeaderCheck . MSG _ HEADER _ MISSING ; <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> import static org . mockito . Matchers . any ; <nl> import static org . mockito . Mockito . times ; <nl> @ @ - 34 , 10 + 35 , 13 @ @ import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> import java . io . Reader ; <nl> import java . net . URI ; <nl> + import java . util . List ; <nl> import java . util . Locale ; <nl> + import java . util . regex . Pattern ; <nl> <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> + import org . mockito . internal . util . reflection . Whitebox ; <nl> import org . powermock . core . classloader . annotations . PrepareForTest ; <nl> import org . powermock . modules . junit4 . PowerMockRunner ; <nl> <nl> @ @ - 64 , 24 + 68 , 34 @ @ public class RegexpHeaderCheckTest extends BaseFileSetCheckTestSupport { <nl> * Test of setHeader method , of class RegexpHeaderCheck . <nl> * / <nl> @ Test <nl> + @ SuppressWarnings ( " unchecked " ) <nl> public void testSetHeaderNull ( ) { <nl> / / check null passes <nl> final RegexpHeaderCheck instance = new RegexpHeaderCheck ( ) ; <nl> / / recreate for each test because multiple invocations fail <nl> final String header = null ; <nl> instance . setHeader ( header ) ; <nl> + final List < Pattern > headerRegexps = <nl> + ( List < Pattern > ) Whitebox . getInternalState ( instance , " headerRegexps " ) ; <nl> + <nl> + assertTrue ( " When header is null regexps should not be set " , headerRegexps . isEmpty ( ) ) ; <nl> } <nl> <nl> / * * <nl> * Test of setHeader method , of class RegexpHeaderCheck . <nl> * / <nl> @ Test <nl> + @ SuppressWarnings ( " unchecked " ) <nl> public void testSetHeaderEmpty ( ) { <nl> / / check null passes <nl> final RegexpHeaderCheck instance = new RegexpHeaderCheck ( ) ; <nl> / / check empty string passes <nl> final String header = " " ; <nl> instance . setHeader ( header ) ; <nl> + final List < Pattern > headerRegexps = <nl> + ( List < Pattern > ) Whitebox . getInternalState ( instance , " headerRegexps " ) ; <nl> + <nl> + assertTrue ( " When header is empty regexps should not be set " , headerRegexps . isEmpty ( ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> index 4b35d7b . . 6354901 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . grammars ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> import java . io . File ; <nl> @ @ - 111 , 7 + 112 , 7 @ @ public class AstRegressionTest extends BaseCheckTestSupport { <nl> final Class < ? > clss = GeneratedJavaLexer . class ; <nl> final Constructor < ? > constructor = clss . getDeclaredConstructor ( InputStream . class ) ; <nl> <nl> - constructor . newInstance ( ( InputStream ) null ) ; <nl> + assertNotNull ( constructor . newInstance ( ( InputStream ) null ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 120 , 7 + 121 , 7 @ @ public class AstRegressionTest extends BaseCheckTestSupport { <nl> final Constructor < ? > constructor = clss <nl> . getDeclaredConstructor ( ParserSharedInputState . class ) ; <nl> <nl> - constructor . newInstance ( ( ParserSharedInputState ) null ) ; <nl> + assertNotNull ( constructor . newInstance ( ( ParserSharedInputState ) null ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 128 , 7 + 129 , 7 @ @ public class AstRegressionTest extends BaseCheckTestSupport { <nl> final Class < ? > clss = GeneratedJavaRecognizer . class ; <nl> final Constructor < ? > constructor = clss . getDeclaredConstructor ( TokenBuffer . class ) ; <nl> <nl> - constructor . newInstance ( ( TokenBuffer ) null ) ; <nl> + assertNotNull ( constructor . newInstance ( ( TokenBuffer ) null ) ) ; <nl> } <nl> <nl> @ Test

TEST DIFF:
diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputIllegalTokens . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputIllegalTokens . java 
 deleted file mode 100644 
 index 94e415c . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputIllegalTokens . java 
 + + + / dev / null 
 @ @ - 1 , 18 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks ; 
 - 
 - public class InputIllegalTokens 
 - { 
 - public void methodWithPreviouslyIllegalTokens ( ) 
 - { 
 - int i = 0 ; 
 - switch ( i ) 
 - { 
 - default : 
 - i - - ; 
 - i + + ; 
 - break ; 
 - } 
 - } 
 - 
 - public native void nativeMethod ( ) ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputSemantic . java 
 deleted file mode 100644 
 index b85c912 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputSemantic . java 
 + + + / dev / null 
 @ @ - 1 , 222 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks ; 
 - 
 - import java . io . * ; / / star import for instantiation tests 
 - import java . awt . Dimension ; / / explicit import for instantiation tests 
 - import java . awt . Color ; 
 - 
 - / * * 
 - * Test case for detecting simple semantic errors . 
 - * @ author Lars K Ã¼ hne 
 - * * / 
 - class InputSemantic 
 - { 
 - / * Boolean instantiation in a static initializer * / 
 - static { 
 - Boolean x = new Boolean ( true ) ; 
 - } 
 - 
 - / * Boolean instantiation in a non - static initializer * / 
 - { 
 - Boolean x = new Boolean ( true ) ; 
 - Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; 
 - } 
 - 
 - / * * fully qualified Boolean instantiation in a method . * * / 
 - Boolean getBoolean ( ) 
 - { 
 - return new java . lang . Boolean ( true ) ; 
 - } 
 - 
 - void otherInstantiations ( ) 
 - { 
 - / / instantiation of classes in the same package 
 - Object o1 = new InputBraces ( ) ; 
 - Object o2 = new InputModifier ( ) ; 
 - / / classes in another package with . * import 
 - ByteArrayOutputStream s = new ByteArrayOutputStream ( ) ; 
 - File f = new File ( " / tmp " ) ; 
 - / / classes in another package with explicit import 
 - Dimension dim = new Dimension ( ) ; 
 - Color col = new Color ( 0 , 0 , 0 ) ; 
 - } 
 - 
 - void exHandlerTest ( ) 
 - { 
 - try { 
 - ; / / do stuff and don ' t handle exceptions in some cases 
 - } 
 - catch ( IllegalStateException emptyCatchIsAlwaysAnError ) { 
 - } 
 - catch ( NullPointerException ex ) { 
 - / / can never happen , but only commentig this is currently an error 
 - / / Possible future enhancement : allowEmptyCatch = " commented " 
 - } 
 - catch ( ArrayIndexOutOfBoundsException ex ) { 
 - ; 
 - / / can never happen , semicolon makes checkstyle happy 
 - / / this is a workaround for above problem 
 - } 
 - catch ( NegativeArraySizeException ex ) { 
 - { 
 - } 
 - / / can never happen , empty compound statement is another workaround 
 - } 
 - catch ( UnsupportedOperationException handledException ) { 
 - System . identityHashCode ( handledException . getMessage ( ) ) ; 
 - } 
 - catch ( SecurityException ex ) { / * hello * / } 
 - catch ( StringIndexOutOfBoundsException ex ) { } 
 - catch ( IllegalArgumentException ex ) { } 
 - 
 - try { 
 - } 
 - finally { 
 - } 
 - try { 
 - / / something 
 - } 
 - finally { 
 - / / something 
 - } 
 - try { 
 - ; / / something 
 - } 
 - finally { 
 - ; / / statement 
 - } 
 - } 
 - 
 - / * * test * * / 
 - private static final long IGNORE = 666l + 666L ; 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - public class EqualsVsHashCode1 
 - { 
 - public boolean equals ( int a ) / / wrong arg type , don ' t flag 
 - { 
 - return a = = 1 ; 
 - } 
 - } 
 - 
 - public class EqualsVsHashCode2 
 - { 
 - public boolean equals ( String a ) / / flag 
 - { 
 - return true ; 
 - } 
 - } 
 - 
 - public class EqualsVsHashCode3 
 - { 
 - public boolean equals ( Object a ) / / don ' t flag 
 - { 
 - return true ; 
 - } 
 - 
 - public int hashCode ( ) 
 - { 
 - return 0 ; 
 - } 
 - } 
 - 
 - public class EqualsVsHashCode4 
 - { 
 - / / in anon inner class 
 - ByteArrayOutputStream bos1 = new ByteArrayOutputStream ( ) 
 - { 
 - public boolean equals ( Object a ) / / don ' t flag 
 - { 
 - return true ; 
 - } 
 - 
 - public int hashCode ( ) 
 - { 
 - return 0 ; 
 - } 
 - } ; 
 - 
 - ByteArrayOutputStream bos2 = new ByteArrayOutputStream ( ) 
 - { 
 - public boolean equals ( Object a ) / / flag 
 - { 
 - return true ; 
 - } 
 - } ; 
 - } 
 - 
 - public void triggerEmptyBlockWithoutBlock ( ) 
 - { 
 - / / an if statement without a block to increase test coverage 
 - if ( true ) 
 - return ; 
 - } 
 - 
 - / / empty instance initializer 
 - { 
 - } 
 - 
 - public class EqualsVsHashCode5 
 - { 
 - public < A > boolean equals ( int a ) / / wrong arg type , don ' t flag even with generics 
 - { 
 - return a = = 1 ; 
 - } 
 - } 
 - 
 - public class EqualsVsHashCode6 
 - { 
 - public < A > boolean equals ( Comparable < A > a ) / / flag , weven with generics 
 - { 
 - return true ; 
 - } 
 - } 
 - 
 - private class InputBraces { 
 - 
 - } 
 - 
 - private class InputModifier { 
 - 
 - } 
 - 
 - synchronized void foo ( ) { 
 - synchronized ( this ) { } / / not OK 
 - synchronized ( Class . class ) { / / OK 
 - synchronized ( new Object ( ) ) { 
 - / / not OK if checking statements 
 - } 
 - } 
 - } 
 - 
 - 
 - static { 
 - 
 - int a = 0 ; } 
 - 
 - static { 
 - 
 - } 
 - }

NEAREST DIFF:
diff - - git a / config / pmd - main . xml b / config / pmd - main . xml 
 index 776cade . . 70929fd 100644 
 - - - a / config / pmd - main . xml 
 + + + b / config / pmd - main . xml 
 @ @ - 14 , 14 + 14 , 9 @ @ 
 < rule ref = " rulesets / java / unusedcode . xml / UnusedPrivateMethod " > 
 < properties > 
 < ! - - generates false - positives on private methods called within a file - - > 
 - < property name = " violationSuppressXPath " 
 - value = " / / MethodDeclaration [ @ Name = ' countTokens ' and . . / . . / . . [ @ Image = ' DescendantTokenCheck ' ] ] " / > 
 - < ! - - generates false - positives on private methods called within a file - - > 
 - < property name = " violationSuppressXPath " 
 - value = " / / MethodDeclaration [ @ Name = ' getHashCodeBasedOnObjectContent ' and . . / . . / . . [ @ Image = ' PropertyCacheFile ' ] ] " / > 
 - < ! - - generates false - positives on private methods called within a file - - > 
 - < property name = " violationSuppressXPath " 
 - value = " / / ClassOrInterfaceDeclaration [ @ Image = ' DescendantTokenCheck ' ] / / MethodDeclarator [ @ Image = ' countTokens ' ] " / > 
 + < property name = " violationSuppressXPath " value = " 
 + / / MethodDeclaration [ @ Name = ' countTokens ' and . . / . . / . . [ @ Image = ' DescendantTokenCheck ' ] ] 
 + | / / MethodDeclaration [ @ Name = ' getHashCodeBasedOnObjectContent ' and . . / . . / . . [ @ Image = ' PropertyCacheFile ' ] ] " / > 
 < / properties > 
 < / rule > 
 < / ruleset > 
 diff - - git a / config / pmd - test . xml b / config / pmd - test . xml 
 index cac5498 . . a0664dc 100644 
 - - - a / config / pmd - test . xml 
 + + + b / config / pmd - test . xml 
 @ @ - 67 , 11 + 67 , 51 @ @ 
 < / properties > 
 < / rule > 
 
 - < rule ref = " rulesets / java / junit . xml " > 
 - < ! - - tentative - - > 
 - < exclude name = " JUnitTestsShouldIncludeAssert " / > 
 + < rule ref = " rulesets / java / junit . xml / JUnitTestsShouldIncludeAssert " > 
 + < ! - - pmd cannot find assert if it is located in private method of this class called from the test 
 + method or method of another class - - > 
 + < properties > 
 + < ! - - in SuppressionCommentFilterTest , SuppressWithNearbyCommentFilterTest , SuppressionFilterTest 
 + pmd does not accept nl . jqno . equalsverifier . EqualsVerifier # . verify ( ) as correctness check method - - > 
 + < ! - - in AbstractJavadocCheckTest pmd does not find asserts in another class methods called from the test method - - > 
 + < ! - - in ImportControlCheckTest pmd does not find asserts in private methods of the test class called from the test method - - > 
 + < ! - - in AstRegressionTest pmd does not find asserts in inner classes methods called from the test method - - > 
 + < ! - - in AllChecksTest pmd does not find asserts in lambdas - - > 
 + < ! - - Starting from TreeWalkerTest tests should be rewrited - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressionFilterTest ' ] / / MethodDeclarator [ @ Image = ' testEqualsAndHashCode ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressionCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' testEqualsAndHashCodeOfTagClass ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressWithNearbyCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' testEqualsAndHashCodeOfTagClass ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractJavadocCheckTest ' ] / / MethodDeclarator [ @ Image = ' testBlockCommentPositionHasPrivateConstr ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' ImportControlCheckTest ' ] / / MethodDeclarator [ @ Image = ' testPkgRegExpInChild ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' ImportControlCheckTest ' ] / / MethodDeclarator [ @ Image = ' testPkgRegExpInParent ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' ImportControlCheckTest ' ] / / MethodDeclarator [ @ Image = ' testPkgRegExpInBoth ' ] 
 + | / ClassOrInterfaceDeclaration [ @ Image = ' AstRegressionTest ' ] / / MethodDeclarator [ @ Image = ' testImpossibleExceptions ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' AstRegressionTest ' ] / / MethodDeclarator [ @ Image = ' testImpossibleValid ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' AllChecksTest ' ] / / MethodDeclarator [ @ Image = ' testAllModulesAreReferencedInConfigFile ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' TreeWalkerTest ' ] / / MethodDeclarator [ @ Image = ' testProcessNonJavaFiles ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' TreeWalkerTest ' ] / / MethodDeclarator [ @ Image = ' testWithCacheWithNoViolation ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' CheckstyleAntTaskTest ' ] / / MethodDeclarator [ @ Image = ' testDefaultFlawless ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' CheckstyleAntTaskTest ' ] / / MethodDeclarator [ @ Image = ' testFileSet ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' CheckstyleAntTaskTest ' ] / / MethodDeclarator [ @ Image = ' testMaxErrors ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' CheckstyleAntTaskTest ' ] / / MethodDeclarator [ @ Image = ' testOverrideProperty ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' CheckstyleAntTaskTest ' ] / / MethodDeclarator [ @ Image = ' testConfigurationByUrl ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' CheckstyleAntTaskTest ' ] / / MethodDeclarator [ @ Image = ' testConfigurationByResource ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' CheckstyleAntTaskTest ' ] / / MethodDeclarator [ @ Image = ' testSetPropertiesFile ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' TranslationCheckTest ' ] / / MethodDeclarator [ @ Image = ' testLogIoException ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' DeclarationOrderCheckTest ' ] / / MethodDeclarator [ @ Image = ' testParents ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' DeclarationOrderCheckTest ' ] / / MethodDeclarator [ @ Image = ' testImproperToken ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' IllegalInstantiationCheckTest ' ] / / MethodDeclarator [ @ Image = ' testNullClassLoader ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' RequireThisCheckTest ' ] / / MethodDeclarator [ @ Image = ' testDefaultSwitch ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' NPathComplexityCheckTest ' ] / / MethodDeclarator [ @ Image = ' testDefaultHooks ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' NPathComplexityCheckTest ' ] / / MethodDeclarator [ @ Image = ' testVisitTokenBeforeExpressionRange ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressionsLoaderTest ' ] / / MethodDeclarator [ @ Image = ' testNoCheckYesId ' ] 
 + " / > 
 + < / properties > 
 < / rule > 
 
 + / / testDefaultFlawless CheckstyleAntTaskTest 
 + 
 + 
 < rule ref = " config / pmd . xml / ConfusingTernary " > 
 < properties > 
 < ! - - false positive : commit validation is a sequence of checks , if we shuffle them it would be broken - - > 
 @ @ - 95 , 24 + 135 , 18 @ @ 
 < properties > 
 < ! - - this inherited from GeneratedJavaLexer - - > 
 < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AstRegressionTest ' ] 
 - / / ClassOrInterfaceDeclaration [ @ Image = ' AssertGeneratedJavaLexer ' ] / / MethodDeclarator [ @ Image = ' LA ' ] " / > 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' AssertGeneratedJavaLexer ' ] / / MethodDeclarator [ @ Image = ' LA ' ] " / > 
 < / properties > 
 < / rule > 
 
 < rule ref = " rulesets / java / unusedcode . xml / UnusedPrivateMethod " > 
 < properties > 
 < ! - - generates false - positives on private methods called within a file - - > 
 - < property name = " violationSuppressXPath " 
 - value = " / / ClassOrInterfaceDeclaration [ @ Image = ' IndentationCheckTest ' ] / / MethodDeclarator [ @ Image = ' verifyWarns ' ] " / > 
 - < ! - - generates false - positives on private methods called within a file - - > 
 - < property name = " violationSuppressXPath " 
 - value = " / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressWarningsFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] " / > 
 - < ! - - generates false - positives on private methods called within a file - - > 
 - < property name = " violationSuppressXPath " 
 - value = " / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressWithNearbyCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] " / > 
 - < ! - - generates false - positives on private methods called within a file - - > 
 - < property name = " violationSuppressXPath " 
 - value = " / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressionCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] " / > 
 + < property name = " violationSuppressXPath " value = " 
 + / / ClassOrInterfaceDeclaration [ @ Image = ' IndentationCheckTest ' ] / / MethodDeclarator [ @ Image = ' verifyWarns ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressWarningsFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressWithNearbyCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] 
 + | / / ClassOrInterfaceDeclaration [ @ Image = ' SuppressionCommentFilterTest ' ] / / MethodDeclarator [ @ Image = ' verifySuppressed ' ] " / > 
 < / properties > 
 < / rule > 
 < / ruleset > 
 diff - - git a / config / suppressions . xml b / config / suppressions . xml 
 index 596cb63 . . c6a05c1 100644 
 - - - a / config / suppressions . xml 
 + + + b / config / suppressions . xml 
 @ @ - 76 , 6 + 76 , 7 @ @ 
 < suppress checks = " ClassDataAbstractionCoupling " files = " PropertyCacheFile \ . java " / > 
 < suppress checks = " ClassFanOutComplexity " files = " [ \ \ / ] Main \ . java " / > 
 < suppress checks = " ClassFanOutComplexity " files = " CheckstyleAntTask \ . java " / > 
 + < suppress checks = " ClassFanOutComplexity " files = " CheckerTest \ . java " / > 
 < ! - - a lot of GUI elements is OK - - > 
 < suppress checks = " ClassDataAbstractionCoupling " files = " ( TreeTable | MainFrame ) \ . java " / > 
 
 diff - - git a / pom . xml b / pom . xml 
 index 85647e2 . . 43bcb62 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 947 , 6 + 947 , 7 @ @ 
 < artifactId > maven - pmd - plugin < / artifactId > 
 < executions > 
 < execution > 
 + < phase > verify < / phase > 
 < goals > 
 < goal > check < / goal > 
 < / goals > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 177ec47 . . 77b92e8 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 59 , 6 + 59 , 7 @ @ import org . powermock . api . mockito . PowerMockito ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 import com . puppycrawl . tools . checkstyle . api . AuditEvent ; 
 + import com . puppycrawl . tools . checkstyle . api . AuditListener ; 
 import com . puppycrawl . tools . checkstyle . api . CheckstyleException ; 
 import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 import com . puppycrawl . tools . checkstyle . api . Context ; 
 @ @ - 359 , 9 + 360 , 15 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 @ Test 
 public void testNoModuleFactory ( ) throws Exception { 
 final Checker checker = new Checker ( ) ; 
 - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + final ClassLoader classLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; 
 
 + checker . setModuleClassLoader ( classLoader ) ; 
 checker . finishLocalSetup ( ) ; 
 + final Context actualCtx = ( Context ) Whitebox . getInternalState ( checker , " childContext " ) ; 
 + 
 + assertNotNull ( " Default module factory should be created when it is not specified " , 
 + actualCtx . get ( " moduleFactory " ) ) ; 
 + assertEquals ( " Invalid classLoader " , classLoader , actualCtx . get ( " classLoader " ) ) ; 
 } 
 
 @ Test 
 @ @ - 412 , 6 + 419 , 7 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + @ SuppressWarnings ( " unchecked " ) 
 public void testSetupChildListener ( ) throws Exception { 
 final Checker checker = new Checker ( ) ; 
 final PackageObjectFactory factory = new PackageObjectFactory ( 
 @ @ - 421 , 6 + 429 , 12 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 final Configuration config = new DefaultConfiguration ( 
 DebugAuditAdapter . class . getCanonicalName ( ) ) ; 
 checker . setupChild ( config ) ; 
 + 
 + final List < AuditListener > listeners = 
 + ( List < AuditListener > ) Whitebox . getInternalState ( checker , " listeners " ) ; 
 + assertTrue ( " Invalid child listener class " , 
 + listeners . get ( listeners . size ( ) - 1 ) instanceof DebugAuditAdapter ) ; 
 + 
 } 
 
 @ Test 
 @ @ - 580 , 6 + 594 , 8 @ @ public class CheckerTest extends BaseCheckTestSupport { 
 / / the invocation of clearCache method does not throw an exception . 
 final Checker checker = new Checker ( ) ; 
 checker . clearCache ( ) ; 
 + assertNull ( " If cache file is not set the cache should default to null " , 
 + Whitebox . getInternalState ( checker , " cache " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 index bf35517 . . 05d8ec9 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / TreeWalkerTest . java 
 @ @ - 155 , 9 + 155 , 15 @ @ public class TreeWalkerTest extends BaseCheckTestSupport { 
 @ Test 
 public void testSettersForParameters ( ) throws Exception { 
 final TreeWalker treeWalker = new TreeWalker ( ) ; 
 + final DefaultConfiguration config = new DefaultConfiguration ( " default config " ) ; 
 treeWalker . setTabWidth ( 1 ) ; 
 - treeWalker . configure ( new DefaultConfiguration ( " default config " ) ) ; 
 + treeWalker . configure ( config ) ; 
 treeWalker . setCacheFile ( temporaryFolder . newFile ( ) . getPath ( ) ) ; 
 + 
 + assertEquals ( " Invalid setter result " , 1 , 
 + Whitebox . getInternalState ( treeWalker , " tabWidth " ) ) ; 
 + assertEquals ( " Invalid configuration " , config , 
 + Whitebox . getInternalState ( treeWalker , " configuration " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 index 4fa9be5 . . f0f794d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / ant / CheckstyleAntTaskTest . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . ant ; 
 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 @ @ - 49 , 6 + 50 , 7 @ @ import org . apache . tools . ant . types . Reference ; 
 import org . apache . tools . ant . types . resources . FileResource ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 + import org . mockito . internal . util . reflection . Whitebox ; 
 import org . powermock . api . mockito . PowerMockito ; 
 import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 @ @ - 501 , 6 + 503 , 9 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 antTask . setClasspath ( new Path ( project , " / " ) ) ; 
 antTask . setClasspath ( new Path ( project , " / checkstyle " ) ) ; 
 antTask . setClasspathRef ( new Reference ( ) ) ; 
 + 
 + assertNotNull ( " Classpath should not be null " , 
 + Whitebox . getInternalState ( antTask , " classpath " ) ) ; 
 } 
 
 @ Test 
 @ @ - 508 , 6 + 513 , 9 @ @ public class CheckstyleAntTaskTest extends BaseCheckTestSupport { 
 / / temporary fake test 
 final CheckstyleAntTask antTask = new CheckstyleAntTask ( ) ; 
 antTask . setClasspathRef ( new Reference ( ) ) ; 
 + 
 + assertNotNull ( " Classpath should not be null " , 
 + Whitebox . getInternalState ( antTask , " classpath " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java 
 index a1c01c8 . . 5710f79 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolderTest . java 
 @ @ - 102 , 6 + 102 , 8 @ @ public class SuppressWarningsHolderTest extends BaseCheckTestSupport { 
 public void testSetAliasListEmpty ( ) { 
 final SuppressWarningsHolder holder = new SuppressWarningsHolder ( ) ; 
 holder . setAliasList ( " " ) ; 
 + assertEquals ( " Empty alias list should not be set " , " " , 
 + SuppressWarningsHolder . getAlias ( " " ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 index 5069b4d . . f3491ba 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / TranslationCheckTest . java 
 @ @ - 24 , 11 + 24 , 13 @ @ import static com . puppycrawl . tools . checkstyle . checks . TranslationCheck . MSG _ KEY _ MI 
 import static org . hamcrest . CoreMatchers . containsString ; 
 import static org . hamcrest . CoreMatchers . endsWith ; 
 import static org . junit . Assert . assertThat ; 
 + import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . lang . reflect . Method ; 
 + import java . util . Set ; 
 
 import org . junit . Test ; 
 
 @ @ - 89 , 6 + 91 , 7 @ @ public class TranslationCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + @ SuppressWarnings ( " unchecked " ) 
 public void testLogIoExceptionFileNotFound ( ) throws Exception { 
 / / I can ' t put wrong file here . Checkstyle fails before check started . 
 / / I saw some usage of file or handling of wrong file in Checker , or somewhere 
 @ @ - 102 , 8 + 105 , 8 @ @ public class TranslationCheckTest extends BaseCheckTestSupport { 
 final Method loadKeys = 
 check . getClass ( ) . getDeclaredMethod ( " getTranslationKeys " , File . class ) ; 
 loadKeys . setAccessible ( true ) ; 
 - loadKeys . invoke ( check , new File ( " " ) ) ; 
 - 
 + final Set < String > keys = ( Set < String > ) loadKeys . invoke ( check , new File ( " " ) ) ; 
 + assertTrue ( " Translation keys should be empty when File is not found " , keys . isEmpty ( ) ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java 
 index 4fdc06c . . b709ef3 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . header ; 
 import static com . puppycrawl . tools . checkstyle . checks . header . RegexpHeaderCheck . MSG _ HEADER _ MISMATCH ; 
 import static com . puppycrawl . tools . checkstyle . checks . header . RegexpHeaderCheck . MSG _ HEADER _ MISSING ; 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 import static org . mockito . Matchers . any ; 
 import static org . mockito . Mockito . times ; 
 @ @ - 34 , 10 + 35 , 13 @ @ import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 import java . io . Reader ; 
 import java . net . URI ; 
 + import java . util . List ; 
 import java . util . Locale ; 
 + import java . util . regex . Pattern ; 
 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 + import org . mockito . internal . util . reflection . Whitebox ; 
 import org . powermock . core . classloader . annotations . PrepareForTest ; 
 import org . powermock . modules . junit4 . PowerMockRunner ; 
 
 @ @ - 64 , 24 + 68 , 34 @ @ public class RegexpHeaderCheckTest extends BaseFileSetCheckTestSupport { 
 * Test of setHeader method , of class RegexpHeaderCheck . 
 * / 
 @ Test 
 + @ SuppressWarnings ( " unchecked " ) 
 public void testSetHeaderNull ( ) { 
 / / check null passes 
 final RegexpHeaderCheck instance = new RegexpHeaderCheck ( ) ; 
 / / recreate for each test because multiple invocations fail 
 final String header = null ; 
 instance . setHeader ( header ) ; 
 + final List < Pattern > headerRegexps = 
 + ( List < Pattern > ) Whitebox . getInternalState ( instance , " headerRegexps " ) ; 
 + 
 + assertTrue ( " When header is null regexps should not be set " , headerRegexps . isEmpty ( ) ) ; 
 } 
 
 / * * 
 * Test of setHeader method , of class RegexpHeaderCheck . 
 * / 
 @ Test 
 + @ SuppressWarnings ( " unchecked " ) 
 public void testSetHeaderEmpty ( ) { 
 / / check null passes 
 final RegexpHeaderCheck instance = new RegexpHeaderCheck ( ) ; 
 / / check empty string passes 
 final String header = " " ; 
 instance . setHeader ( header ) ; 
 + final List < Pattern > headerRegexps = 
 + ( List < Pattern > ) Whitebox . getInternalState ( instance , " headerRegexps " ) ; 
 + 
 + assertTrue ( " When header is empty regexps should not be set " , headerRegexps . isEmpty ( ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 index 4b35d7b . . 6354901 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / grammars / AstRegressionTest . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . grammars ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertTrue ; 
 
 import java . io . File ; 
 @ @ - 111 , 7 + 112 , 7 @ @ public class AstRegressionTest extends BaseCheckTestSupport { 
 final Class < ? > clss = GeneratedJavaLexer . class ; 
 final Constructor < ? > constructor = clss . getDeclaredConstructor ( InputStream . class ) ; 
 
 - constructor . newInstance ( ( InputStream ) null ) ; 
 + assertNotNull ( constructor . newInstance ( ( InputStream ) null ) ) ; 
 } 
 
 @ Test 
 @ @ - 120 , 7 + 121 , 7 @ @ public class AstRegressionTest extends BaseCheckTestSupport { 
 final Constructor < ? > constructor = clss 
 . getDeclaredConstructor ( ParserSharedInputState . class ) ; 
 
 - constructor . newInstance ( ( ParserSharedInputState ) null ) ; 
 + assertNotNull ( constructor . newInstance ( ( ParserSharedInputState ) null ) ) ; 
 } 
 
 @ Test 
 @ @ - 128 , 7 + 129 , 7 @ @ public class AstRegressionTest extends BaseCheckTestSupport { 
 final Class < ? > clss = GeneratedJavaRecognizer . class ; 
 final Constructor < ? > constructor = clss . getDeclaredConstructor ( TokenBuffer . class ) ; 
 
 - constructor . newInstance ( ( TokenBuffer ) null ) ; 
 + assertNotNull ( constructor . newInstance ( ( TokenBuffer ) null ) ) ; 
 } 
 
 @ Test
