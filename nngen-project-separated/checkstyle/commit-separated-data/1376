BLEU SCORE: 0.2620251007173263

TEST MSG: config : update for system - rules 1 . 15 . 1
GENERATED MSG: config : update for powermock to 1 . 6 . 4

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index d748c5f . . 037046d 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 265 , 7 + 265 , 7 @ @ <nl> < dependency > <nl> < groupId > com . github . stefanbirkner < / groupId > <nl> < artifactId > system - rules < / artifactId > <nl> - < version > 1 . 13 . 0 < / version > <nl> + < version > 1 . 15 . 1 < / version > <nl> < scope > test < / scope > <nl> < / dependency > <nl> < dependency > <nl> @ @ - 287 , 6 + 287 , 12 @ @ <nl> < scope > test < / scope > <nl> < / dependency > <nl> < dependency > <nl> + < groupId > commons - io < / groupId > <nl> + < artifactId > commons - io < / artifactId > <nl> + < version > 2 . 4 < / version > <nl> + < scope > test < / scope > <nl> + < / dependency > <nl> + < dependency > <nl> < groupId > org . eclipse . jgit < / groupId > <nl> < artifactId > org . eclipse . jgit < / artifactId > <nl> < version > 4 . 1 . 1 . 201511131810 - r < / version >
NEAREST DIFF (one line): diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index 4b9ffd7 . . bc23000 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 1738 , 7 + 1738 , 9 @ @ <nl> < option name = " ignorePrivateMethods " value = " true " / > <nl> < / inspection _ tool > <nl> < inspection _ tool class = " ReturnOfDateField " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> - < inspection _ tool class = " ReturnOfInnerClass " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > <nl> + < inspection _ tool class = " ReturnOfInnerClass " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > <nl> + < option name = " ignoreNonPublic " value = " true " / > <nl> + < / inspection _ tool > <nl> < inspection _ tool class = " ReturnThis " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > <nl> < inspection _ tool class = " ReuseOfLocalVariable " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> < inspection _ tool class = " ReuseOfLocalVariableJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > <nl> diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index da6fc7d . . cb60185 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 148 , 6 + 148 , 13 @ @ <nl> < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' XMLLogger ' ] / / MethodDeclarator [ @ Image = ' isReference ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' DetailAST ' ] / / MethodDeclarator [ @ Image = ' addPreviousSibling ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' AnnotationLocationCheck ' ] / / MethodDeclarator [ @ Image = ' checkAnnotations ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' PkgControl ' ] / / MethodDeclarator [ @ Image = ' checkAccess ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' HandlerFactory ' ] / / MethodDeclarator [ @ Image = ' getHandler ' ] " / > <nl> < / properties > <nl> < / rule > <nl> + < rule ref = " rulesets / java / design . xml / AccessorClassGeneration " > <nl> + < properties > <nl> + < ! - - We do instantiation by way of private constructors from outside of the constructor â€™ s <nl> + class in DetectorOptions intentionally as it is a whole idea of Builder pattern . - - > <nl> + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' DetectorOptions ' ] " / > <nl> + < / properties > <nl> + < / rule > <nl> < rule ref = " rulesets / java / design . xml / PreserveStackTrace " > <nl> < properties > <nl> < ! - - yes we swallow one exception and try to do another attempt , second attempt does not hide cause - - > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java <nl> index 33d56f9 . . 0220f24 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java <nl> @ @ - 21 , 25 + 21 , 26 @ @ package com . puppycrawl . tools . checkstyle . checks . regexp ; <nl> <nl> import java . util . regex . Pattern ; <nl> <nl> + import org . apache . commons . lang3 . ObjectUtils ; <nl> + <nl> import com . puppycrawl . tools . checkstyle . api . AbstractViolationReporter ; <nl> <nl> / * * <nl> * Options for a detector . <nl> * @ author Oliver Burn <nl> * / <nl> - class DetectorOptions { <nl> + final class DetectorOptions { <nl> / * * <nl> * Flags to compile a regular expression with . <nl> * See { @ link Pattern # flags ( ) } . <nl> * / <nl> - private final int compileFlags ; <nl> + private int compileFlags ; <nl> / * * Used for reporting violations . * / <nl> - private final AbstractViolationReporter reporter ; <nl> + private AbstractViolationReporter reporter ; <nl> / * * <nl> - * Format of the regular expression to check for . Default value is pattern that never matches <nl> - * any string . <nl> + * Format of the regular expression to check for . <nl> * / <nl> - private String format = " $ . " ; <nl> + private String format ; <nl> / * * The message to report on detection . If blank , then use the format . * / <nl> private String message = " " ; <nl> / * * Minimum number of times regular expression should occur in a file . * / <nl> @ @ - 49 , 82 + 50 , 12 @ @ class DetectorOptions { <nl> / * * Whether to ignore case when matching . * / <nl> private boolean ignoreCase ; <nl> / * * Used to determine whether to suppress a detected match . * / <nl> - private MatchSuppressor suppressor = NeverSuppress . INSTANCE ; <nl> + private MatchSuppressor suppressor ; <nl> / * * Pattern created from format . Lazily initialized . * / <nl> private Pattern pattern ; <nl> <nl> - / * * <nl> - * Creates an instance . <nl> - * @ param compileFlags the flags to create the regular expression with . <nl> - * @ param reporter used to report violations . <nl> - * / <nl> - DetectorOptions ( int compileFlags , <nl> - AbstractViolationReporter reporter ) { <nl> - this . compileFlags = compileFlags ; <nl> - this . reporter = reporter ; <nl> - } <nl> - <nl> - / * * <nl> - * The format to use when matching lines . <nl> - * @ param format the format to use when matching lines . <nl> - * @ return current instance <nl> - * / <nl> - public DetectorOptions setFormat ( String format ) { <nl> - this . format = format ; <nl> - pattern = null ; <nl> - return this ; <nl> - } <nl> - <nl> - / * * <nl> - * Message to use when reporting a match . <nl> - * @ param message message to use when reporting a match . <nl> - * @ return current instance . <nl> - * / <nl> - public DetectorOptions setMessage ( String message ) { <nl> - this . message = message ; <nl> - return this ; <nl> - } <nl> - <nl> - / * * <nl> - * Set the minimum allowed number of detections . <nl> - * @ param minimum the minimum allowed number of detections . <nl> - * @ return current instance <nl> - * / <nl> - public DetectorOptions setMinimum ( int minimum ) { <nl> - this . minimum = minimum ; <nl> - return this ; <nl> - } <nl> - <nl> - / * * <nl> - * Set the maximum allowed number of detections . <nl> - * @ param maximum the maximum allowed number of detections . <nl> - * @ return current instance <nl> - * / <nl> - public DetectorOptions setMaximum ( int maximum ) { <nl> - this . maximum = maximum ; <nl> - return this ; <nl> - } <nl> - <nl> - / * * <nl> - * Set the suppressor to use . <nl> - * @ param sup the suppressor to use . <nl> - * @ return current instance <nl> - * / <nl> - public DetectorOptions setSuppressor ( MatchSuppressor sup ) { <nl> - suppressor = sup ; <nl> - return this ; <nl> - } <nl> - <nl> - / * * <nl> - * Set whether to ignore case when matching . <nl> - * @ param ignore whether to ignore case when matching . <nl> - * @ return current instance <nl> - * / <nl> - public DetectorOptions setIgnoreCase ( boolean ignore ) { <nl> - ignoreCase = ignore ; <nl> - pattern = null ; <nl> - return this ; <nl> - } <nl> + / * * Default constructor . * / <nl> + private DetectorOptions ( ) { } <nl> <nl> / * * <nl> * Format of the regular expression . <nl> @ @ - 190 , 4 + 121 , 107 @ @ class DetectorOptions { <nl> pattern = Pattern . compile ( format , options ) ; <nl> return pattern ; <nl> } <nl> + <nl> + / * * <nl> + * Returns new Builder object . <nl> + * @ return Builder object . <nl> + * / <nl> + static Builder newBuilder ( ) { <nl> + return new DetectorOptions ( ) . new Builder ( ) ; <nl> + } <nl> + <nl> + / * * Class which implements Builder pattern to build DetectorOptions instance . * / <nl> + public final class Builder { <nl> + <nl> + / * * <nl> + * Specifies the violation reporter and returns Builder object . <nl> + * @ param val for reporting violations . <nl> + * @ return Builder object . <nl> + * / <nl> + Builder reporter ( AbstractViolationReporter val ) { <nl> + reporter = val ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Specifies the compile flags to compile a regular expression with <nl> + * and returns Builder object . <nl> + * @ param val the format to use when matching lines . <nl> + * @ return Builder object . <nl> + * / <nl> + Builder compileFlags ( int val ) { <nl> + compileFlags = val ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Specifies the format to use when matching lines and returns Builder object . <nl> + * @ param val the format to use when matching lines . <nl> + * @ return Builder object . <nl> + * / <nl> + Builder format ( String val ) { <nl> + format = val ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Specifies message to use when reporting a match and returns Builder object . <nl> + * @ param val message to use when reporting a match . <nl> + * @ return Builder object . <nl> + * / <nl> + Builder message ( String val ) { <nl> + message = val ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Specifies the minimum allowed number of detections and returns Builder object . <nl> + * @ param val the minimum allowed number of detections . <nl> + * @ return Builder object . <nl> + * / <nl> + Builder minimum ( int val ) { <nl> + minimum = val ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Specifies the maximum allowed number of detections and returns Builder object . <nl> + * @ param val the maximum allowed number of detections . <nl> + * @ return Builder object . <nl> + * / <nl> + Builder maximum ( int val ) { <nl> + maximum = val ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Specifies whether to ignore case when matching and returns Builder object . <nl> + * @ param val whether to ignore case when matching . <nl> + * @ return Builder object . <nl> + * / <nl> + Builder ignoreCase ( boolean val ) { <nl> + ignoreCase = val ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Specifies the suppressor to use and returns Builder object . <nl> + * @ param val the suppressor to use . <nl> + * @ return current instance <nl> + * / <nl> + Builder suppressor ( MatchSuppressor val ) { <nl> + suppressor = val ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns new DetectorOptions instance . <nl> + * @ return DetectorOptions instance . <nl> + * / <nl> + DetectorOptions build ( ) { <nl> + message = ObjectUtils . defaultIfNull ( message , " " ) ; <nl> + suppressor = ObjectUtils . defaultIfNull ( suppressor , NeverSuppress . INSTANCE ) ; <nl> + return DetectorOptions . this ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java <nl> index b713f2e . . 55531fe 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java <nl> @ @ - 32 , 15 + 32 , 33 @ @ import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> * @ author Oliver Burn <nl> * / <nl> public class RegexpMultilineCheck extends AbstractFileSetCheck { <nl> - / * * The detection options to use . * / <nl> - private final DetectorOptions options = new DetectorOptions ( Pattern . MULTILINE , <nl> - this ) ; <nl> + <nl> + / * * The format of the regular expression to match . * / <nl> + private String format = " $ . " ; <nl> + / * * The message to report for a match . * / <nl> + private String message ; <nl> + / * * The minimum number of matches required per file . * / <nl> + private int minimum ; <nl> + / * * The maximum number of matches required per file . * / <nl> + private int maximum ; <nl> + / * * Whether to ignore case when matching . * / <nl> + private boolean ignoreCase ; <nl> + <nl> / * * The detector to use . * / <nl> private MultilineDetector detector ; <nl> <nl> @ Override <nl> public void beginProcessing ( String charset ) { <nl> super . beginProcessing ( charset ) ; <nl> + final DetectorOptions options = DetectorOptions . newBuilder ( ) <nl> + . reporter ( this ) <nl> + . compileFlags ( Pattern . MULTILINE ) <nl> + . format ( format ) <nl> + . message ( message ) <nl> + . minimum ( minimum ) <nl> + . maximum ( maximum ) <nl> + . ignoreCase ( ignoreCase ) <nl> + . build ( ) ; <nl> detector = new MultilineDetector ( options ) ; <nl> } <nl> <nl> @ @ - 50 , 42 + 68 , 42 @ @ public class RegexpMultilineCheck extends AbstractFileSetCheck { <nl> } <nl> <nl> / * * <nl> - * Set the format of the regular expression to match . <nl> + * Sets the format of the regular expression to match . <nl> * @ param format the format of the regular expression to match . <nl> * / <nl> public void setFormat ( String format ) { <nl> - options . setFormat ( format ) ; <nl> + this . format = format ; <nl> } <nl> <nl> / * * <nl> - * Set the message to report for a match . <nl> + * Sets the message to report for a match . <nl> * @ param message the message to report for a match . <nl> * / <nl> public void setMessage ( String message ) { <nl> - options . setMessage ( message ) ; <nl> + this . message = message ; <nl> } <nl> <nl> / * * <nl> - * Set the minimum number of matches required per file . <nl> + * Sets the minimum number of matches required per file . <nl> * @ param minimum the minimum number of matches required per file . <nl> * / <nl> public void setMinimum ( int minimum ) { <nl> - options . setMinimum ( minimum ) ; <nl> + this . minimum = minimum ; <nl> } <nl> <nl> / * * <nl> - * Set the maximum number of matches required per file . <nl> + * Sets the maximum number of matches required per file . <nl> * @ param maximum the maximum number of matches required per file . <nl> * / <nl> public void setMaximum ( int maximum ) { <nl> - options . setMaximum ( maximum ) ; <nl> + this . maximum = maximum ; <nl> } <nl> <nl> / * * <nl> - * Set whether to ignore case when matching . <nl> - * @ param ignore whether to ignore case when matching . <nl> + * Sets whether to ignore case when matching . <nl> + * @ param ignoreCase whether to ignore case when matching . <nl> * / <nl> - public void setIgnoreCase ( boolean ignore ) { <nl> - options . setIgnoreCase ( ignore ) ; <nl> + public void setIgnoreCase ( boolean ignoreCase ) { <nl> + this . ignoreCase = ignoreCase ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java <nl> index 8669c44 . . 677c19d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java <nl> @ @ - 29 , 14 + 29 , 33 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> * @ author Oliver Burn <nl> * / <nl> public class RegexpSinglelineCheck extends AbstractFileSetCheck { <nl> - / * * The detection options to use . * / <nl> - private final DetectorOptions options = new DetectorOptions ( 0 , this ) ; <nl> + <nl> + / * * The format of the regular expression to match . * / <nl> + private String format = " $ . " ; <nl> + / * * The message to report for a match . * / <nl> + private String message ; <nl> + / * * The minimum number of matches required per file . * / <nl> + private int minimum ; <nl> + / * * The maximum number of matches required per file . * / <nl> + private int maximum ; <nl> + / * * Whether to ignore case when matching . * / <nl> + private boolean ignoreCase ; <nl> + <nl> / * * The detector to use . * / <nl> private SinglelineDetector detector ; <nl> <nl> @ Override <nl> public void beginProcessing ( String charset ) { <nl> super . beginProcessing ( charset ) ; <nl> + final DetectorOptions options = DetectorOptions . newBuilder ( ) <nl> + . reporter ( this ) <nl> + . compileFlags ( 0 ) <nl> + . format ( format ) <nl> + . message ( message ) <nl> + . minimum ( minimum ) <nl> + . maximum ( maximum ) <nl> + . ignoreCase ( ignoreCase ) <nl> + . build ( ) ; <nl> detector = new SinglelineDetector ( options ) ; <nl> } <nl> <nl> @ @ - 50 , 7 + 69 , 7 @ @ public class RegexpSinglelineCheck extends AbstractFileSetCheck { <nl> * @ param format the format of the regular expression to match . <nl> * / <nl> public void setFormat ( String format ) { <nl> - options . setFormat ( format ) ; <nl> + this . format = format ; <nl> } <nl> <nl> / * * <nl> @ @ - 58 , 7 + 77 , 7 @ @ public class RegexpSinglelineCheck extends AbstractFileSetCheck { <nl> * @ param message the message to report for a match . <nl> * / <nl> public void setMessage ( String message ) { <nl> - options . setMessage ( message ) ; <nl> + this . message = message ; <nl> } <nl> <nl> / * * <nl> @ @ - 66 , 7 + 85 , 7 @ @ public class RegexpSinglelineCheck extends AbstractFileSetCheck { <nl> * @ param minimum the minimum number of matches required per file . <nl> * / <nl> public void setMinimum ( int minimum ) { <nl> - options . setMinimum ( minimum ) ; <nl> + this . minimum = minimum ; <nl> } <nl> <nl> / * * <nl> @ @ - 74 , 14 + 93 , 14 @ @ public class RegexpSinglelineCheck extends AbstractFileSetCheck { <nl> * @ param maximum the maximum number of matches required per file . <nl> * / <nl> public void setMaximum ( int maximum ) { <nl> - options . setMaximum ( maximum ) ; <nl> + this . maximum = maximum ; <nl> } <nl> <nl> / * * <nl> * Set whether to ignore case when matching . <nl> - * @ param ignore whether to ignore case when matching . <nl> + * @ param ignoreCase whether to ignore case when matching . <nl> * / <nl> - public void setIgnoreCase ( boolean ignore ) { <nl> - options . setIgnoreCase ( ignore ) ; <nl> + public void setIgnoreCase ( boolean ignoreCase ) { <nl> + this . ignoreCase = ignoreCase ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineJavaCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineJavaCheck . java <nl> index dda7542 . . 337a74c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineJavaCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineJavaCheck . java <nl> @ @ - 32 , 10 + 32 , 17 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> * @ author Oliver Burn <nl> * / <nl> public class RegexpSinglelineJavaCheck extends Check { <nl> - / * * The detection options to use . * / <nl> - private final DetectorOptions options = new DetectorOptions ( 0 , this ) ; <nl> - / * * The detector to use . * / <nl> - private SinglelineDetector detector ; <nl> + <nl> + / * * The format of the regular expression to match . * / <nl> + private String format = " $ . " ; <nl> + / * * The message to report for a match . * / <nl> + private String message ; <nl> + / * * The minimum number of matches required per file . * / <nl> + private int minimum ; <nl> + / * * The maximum number of matches required per file . * / <nl> + private int maximum ; <nl> + / * * Whether to ignore case when matching . * / <nl> + private boolean ignoreCase ; <nl> / * * Suppress comments . * * / <nl> private boolean ignoreComments ; <nl> <nl> @ @ - 55 , 21 + 62 , 23 @ @ public class RegexpSinglelineJavaCheck extends Check { <nl> } <nl> <nl> @ Override <nl> - public void init ( ) { <nl> - super . init ( ) ; <nl> - detector = new SinglelineDetector ( options ) ; <nl> - } <nl> - <nl> - @ Override <nl> public void beginTree ( DetailAST rootAST ) { <nl> - <nl> + MatchSuppressor supressor = null ; <nl> if ( ignoreComments ) { <nl> - options . setSuppressor ( new CommentSuppressor ( getFileContents ( ) ) ) ; <nl> - } <nl> - else { <nl> - options . setSuppressor ( NeverSuppress . INSTANCE ) ; <nl> + supressor = new CommentSuppressor ( getFileContents ( ) ) ; <nl> } <nl> <nl> + final DetectorOptions options = DetectorOptions . newBuilder ( ) <nl> + . reporter ( this ) <nl> + . compileFlags ( 0 ) <nl> + . suppressor ( supressor ) <nl> + . format ( format ) <nl> + . message ( message ) <nl> + . minimum ( minimum ) <nl> + . maximum ( maximum ) <nl> + . ignoreCase ( ignoreCase ) <nl> + . build ( ) ; <nl> + final SinglelineDetector detector = new SinglelineDetector ( options ) ; <nl> detector . processLines ( Arrays . asList ( getLines ( ) ) ) ; <nl> } <nl> <nl> @ @ - 78 , 7 + 87 , 7 @ @ public class RegexpSinglelineJavaCheck extends Check { <nl> * @ param format the format of the regular expression to match . <nl> * / <nl> public void setFormat ( String format ) { <nl> - options . setFormat ( format ) ; <nl> + this . format = format ; <nl> } <nl> <nl> / * * <nl> @ @ - 86 , 7 + 95 , 7 @ @ public class RegexpSinglelineJavaCheck extends Check { <nl> * @ param message the message to report for a match . <nl> * / <nl> public void setMessage ( String message ) { <nl> - options . setMessage ( message ) ; <nl> + this . message = message ; <nl> } <nl> <nl> / * * <nl> @ @ - 94 , 7 + 103 , 7 @ @ public class RegexpSinglelineJavaCheck extends Check { <nl> * @ param minimum the minimum number of matches required per file . <nl> * / <nl> public void setMinimum ( int minimum ) { <nl> - options . setMinimum ( minimum ) ; <nl> + this . minimum = minimum ; <nl> } <nl> <nl> / * * <nl> @ @ - 102 , 15 + 111 , 15 @ @ public class RegexpSinglelineJavaCheck extends Check { <nl> * @ param maximum the maximum number of matches required per file . <nl> * / <nl> public void setMaximum ( int maximum ) { <nl> - options . setMaximum ( maximum ) ; <nl> + this . maximum = maximum ; <nl> } <nl> <nl> / * * <nl> * Set whether to ignore case when matching . <nl> - * @ param ignore whether to ignore case when matching . <nl> + * @ param ignoreCase whether to ignore case when matching . <nl> * / <nl> - public void setIgnoreCase ( boolean ignore ) { <nl> - options . setIgnoreCase ( ignore ) ; <nl> + public void setIgnoreCase ( boolean ignoreCase ) { <nl> + this . ignoreCase = ignoreCase ; <nl> } <nl> <nl> / * *

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index d748c5f . . 037046d 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 265 , 7 + 265 , 7 @ @ 
 < dependency > 
 < groupId > com . github . stefanbirkner < / groupId > 
 < artifactId > system - rules < / artifactId > 
 - < version > 1 . 13 . 0 < / version > 
 + < version > 1 . 15 . 1 < / version > 
 < scope > test < / scope > 
 < / dependency > 
 < dependency > 
 @ @ - 287 , 6 + 287 , 12 @ @ 
 < scope > test < / scope > 
 < / dependency > 
 < dependency > 
 + < groupId > commons - io < / groupId > 
 + < artifactId > commons - io < / artifactId > 
 + < version > 2 . 4 < / version > 
 + < scope > test < / scope > 
 + < / dependency > 
 + < dependency > 
 < groupId > org . eclipse . jgit < / groupId > 
 < artifactId > org . eclipse . jgit < / artifactId > 
 < version > 4 . 1 . 1 . 201511131810 - r < / version >

NEAREST DIFF:
diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index 4b9ffd7 . . bc23000 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 1738 , 7 + 1738 , 9 @ @ 
 < option name = " ignorePrivateMethods " value = " true " / > 
 < / inspection _ tool > 
 < inspection _ tool class = " ReturnOfDateField " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 - < inspection _ tool class = " ReturnOfInnerClass " enabled = " true " level = " WARNING " enabled _ by _ default = " true " / > 
 + < inspection _ tool class = " ReturnOfInnerClass " enabled = " true " level = " WARNING " enabled _ by _ default = " true " > 
 + < option name = " ignoreNonPublic " value = " true " / > 
 + < / inspection _ tool > 
 < inspection _ tool class = " ReturnThis " enabled = " false " level = " ERROR " enabled _ by _ default = " false " / > 
 < inspection _ tool class = " ReuseOfLocalVariable " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 < inspection _ tool class = " ReuseOfLocalVariableJS " enabled = " true " level = " ERROR " enabled _ by _ default = " true " / > 
 diff - - git a / config / pmd . xml b / config / pmd . xml 
 index da6fc7d . . cb60185 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 148 , 6 + 148 , 13 @ @ 
 < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' XMLLogger ' ] / / MethodDeclarator [ @ Image = ' isReference ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' DetailAST ' ] / / MethodDeclarator [ @ Image = ' addPreviousSibling ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' AnnotationLocationCheck ' ] / / MethodDeclarator [ @ Image = ' checkAnnotations ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' PkgControl ' ] / / MethodDeclarator [ @ Image = ' checkAccess ' ] | / / ClassOrInterfaceDeclaration [ @ Image = ' HandlerFactory ' ] / / MethodDeclarator [ @ Image = ' getHandler ' ] " / > 
 < / properties > 
 < / rule > 
 + < rule ref = " rulesets / java / design . xml / AccessorClassGeneration " > 
 + < properties > 
 + < ! - - We do instantiation by way of private constructors from outside of the constructor â€™ s 
 + class in DetectorOptions intentionally as it is a whole idea of Builder pattern . - - > 
 + < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' DetectorOptions ' ] " / > 
 + < / properties > 
 + < / rule > 
 < rule ref = " rulesets / java / design . xml / PreserveStackTrace " > 
 < properties > 
 < ! - - yes we swallow one exception and try to do another attempt , second attempt does not hide cause - - > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java 
 index 33d56f9 . . 0220f24 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / DetectorOptions . java 
 @ @ - 21 , 25 + 21 , 26 @ @ package com . puppycrawl . tools . checkstyle . checks . regexp ; 
 
 import java . util . regex . Pattern ; 
 
 + import org . apache . commons . lang3 . ObjectUtils ; 
 + 
 import com . puppycrawl . tools . checkstyle . api . AbstractViolationReporter ; 
 
 / * * 
 * Options for a detector . 
 * @ author Oliver Burn 
 * / 
 - class DetectorOptions { 
 + final class DetectorOptions { 
 / * * 
 * Flags to compile a regular expression with . 
 * See { @ link Pattern # flags ( ) } . 
 * / 
 - private final int compileFlags ; 
 + private int compileFlags ; 
 / * * Used for reporting violations . * / 
 - private final AbstractViolationReporter reporter ; 
 + private AbstractViolationReporter reporter ; 
 / * * 
 - * Format of the regular expression to check for . Default value is pattern that never matches 
 - * any string . 
 + * Format of the regular expression to check for . 
 * / 
 - private String format = " $ . " ; 
 + private String format ; 
 / * * The message to report on detection . If blank , then use the format . * / 
 private String message = " " ; 
 / * * Minimum number of times regular expression should occur in a file . * / 
 @ @ - 49 , 82 + 50 , 12 @ @ class DetectorOptions { 
 / * * Whether to ignore case when matching . * / 
 private boolean ignoreCase ; 
 / * * Used to determine whether to suppress a detected match . * / 
 - private MatchSuppressor suppressor = NeverSuppress . INSTANCE ; 
 + private MatchSuppressor suppressor ; 
 / * * Pattern created from format . Lazily initialized . * / 
 private Pattern pattern ; 
 
 - / * * 
 - * Creates an instance . 
 - * @ param compileFlags the flags to create the regular expression with . 
 - * @ param reporter used to report violations . 
 - * / 
 - DetectorOptions ( int compileFlags , 
 - AbstractViolationReporter reporter ) { 
 - this . compileFlags = compileFlags ; 
 - this . reporter = reporter ; 
 - } 
 - 
 - / * * 
 - * The format to use when matching lines . 
 - * @ param format the format to use when matching lines . 
 - * @ return current instance 
 - * / 
 - public DetectorOptions setFormat ( String format ) { 
 - this . format = format ; 
 - pattern = null ; 
 - return this ; 
 - } 
 - 
 - / * * 
 - * Message to use when reporting a match . 
 - * @ param message message to use when reporting a match . 
 - * @ return current instance . 
 - * / 
 - public DetectorOptions setMessage ( String message ) { 
 - this . message = message ; 
 - return this ; 
 - } 
 - 
 - / * * 
 - * Set the minimum allowed number of detections . 
 - * @ param minimum the minimum allowed number of detections . 
 - * @ return current instance 
 - * / 
 - public DetectorOptions setMinimum ( int minimum ) { 
 - this . minimum = minimum ; 
 - return this ; 
 - } 
 - 
 - / * * 
 - * Set the maximum allowed number of detections . 
 - * @ param maximum the maximum allowed number of detections . 
 - * @ return current instance 
 - * / 
 - public DetectorOptions setMaximum ( int maximum ) { 
 - this . maximum = maximum ; 
 - return this ; 
 - } 
 - 
 - / * * 
 - * Set the suppressor to use . 
 - * @ param sup the suppressor to use . 
 - * @ return current instance 
 - * / 
 - public DetectorOptions setSuppressor ( MatchSuppressor sup ) { 
 - suppressor = sup ; 
 - return this ; 
 - } 
 - 
 - / * * 
 - * Set whether to ignore case when matching . 
 - * @ param ignore whether to ignore case when matching . 
 - * @ return current instance 
 - * / 
 - public DetectorOptions setIgnoreCase ( boolean ignore ) { 
 - ignoreCase = ignore ; 
 - pattern = null ; 
 - return this ; 
 - } 
 + / * * Default constructor . * / 
 + private DetectorOptions ( ) { } 
 
 / * * 
 * Format of the regular expression . 
 @ @ - 190 , 4 + 121 , 107 @ @ class DetectorOptions { 
 pattern = Pattern . compile ( format , options ) ; 
 return pattern ; 
 } 
 + 
 + / * * 
 + * Returns new Builder object . 
 + * @ return Builder object . 
 + * / 
 + static Builder newBuilder ( ) { 
 + return new DetectorOptions ( ) . new Builder ( ) ; 
 + } 
 + 
 + / * * Class which implements Builder pattern to build DetectorOptions instance . * / 
 + public final class Builder { 
 + 
 + / * * 
 + * Specifies the violation reporter and returns Builder object . 
 + * @ param val for reporting violations . 
 + * @ return Builder object . 
 + * / 
 + Builder reporter ( AbstractViolationReporter val ) { 
 + reporter = val ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Specifies the compile flags to compile a regular expression with 
 + * and returns Builder object . 
 + * @ param val the format to use when matching lines . 
 + * @ return Builder object . 
 + * / 
 + Builder compileFlags ( int val ) { 
 + compileFlags = val ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Specifies the format to use when matching lines and returns Builder object . 
 + * @ param val the format to use when matching lines . 
 + * @ return Builder object . 
 + * / 
 + Builder format ( String val ) { 
 + format = val ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Specifies message to use when reporting a match and returns Builder object . 
 + * @ param val message to use when reporting a match . 
 + * @ return Builder object . 
 + * / 
 + Builder message ( String val ) { 
 + message = val ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Specifies the minimum allowed number of detections and returns Builder object . 
 + * @ param val the minimum allowed number of detections . 
 + * @ return Builder object . 
 + * / 
 + Builder minimum ( int val ) { 
 + minimum = val ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Specifies the maximum allowed number of detections and returns Builder object . 
 + * @ param val the maximum allowed number of detections . 
 + * @ return Builder object . 
 + * / 
 + Builder maximum ( int val ) { 
 + maximum = val ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Specifies whether to ignore case when matching and returns Builder object . 
 + * @ param val whether to ignore case when matching . 
 + * @ return Builder object . 
 + * / 
 + Builder ignoreCase ( boolean val ) { 
 + ignoreCase = val ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Specifies the suppressor to use and returns Builder object . 
 + * @ param val the suppressor to use . 
 + * @ return current instance 
 + * / 
 + Builder suppressor ( MatchSuppressor val ) { 
 + suppressor = val ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Returns new DetectorOptions instance . 
 + * @ return DetectorOptions instance . 
 + * / 
 + DetectorOptions build ( ) { 
 + message = ObjectUtils . defaultIfNull ( message , " " ) ; 
 + suppressor = ObjectUtils . defaultIfNull ( suppressor , NeverSuppress . INSTANCE ) ; 
 + return DetectorOptions . this ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java 
 index b713f2e . . 55531fe 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpMultilineCheck . java 
 @ @ - 32 , 15 + 32 , 33 @ @ import com . puppycrawl . tools . checkstyle . api . FileText ; 
 * @ author Oliver Burn 
 * / 
 public class RegexpMultilineCheck extends AbstractFileSetCheck { 
 - / * * The detection options to use . * / 
 - private final DetectorOptions options = new DetectorOptions ( Pattern . MULTILINE , 
 - this ) ; 
 + 
 + / * * The format of the regular expression to match . * / 
 + private String format = " $ . " ; 
 + / * * The message to report for a match . * / 
 + private String message ; 
 + / * * The minimum number of matches required per file . * / 
 + private int minimum ; 
 + / * * The maximum number of matches required per file . * / 
 + private int maximum ; 
 + / * * Whether to ignore case when matching . * / 
 + private boolean ignoreCase ; 
 + 
 / * * The detector to use . * / 
 private MultilineDetector detector ; 
 
 @ Override 
 public void beginProcessing ( String charset ) { 
 super . beginProcessing ( charset ) ; 
 + final DetectorOptions options = DetectorOptions . newBuilder ( ) 
 + . reporter ( this ) 
 + . compileFlags ( Pattern . MULTILINE ) 
 + . format ( format ) 
 + . message ( message ) 
 + . minimum ( minimum ) 
 + . maximum ( maximum ) 
 + . ignoreCase ( ignoreCase ) 
 + . build ( ) ; 
 detector = new MultilineDetector ( options ) ; 
 } 
 
 @ @ - 50 , 42 + 68 , 42 @ @ public class RegexpMultilineCheck extends AbstractFileSetCheck { 
 } 
 
 / * * 
 - * Set the format of the regular expression to match . 
 + * Sets the format of the regular expression to match . 
 * @ param format the format of the regular expression to match . 
 * / 
 public void setFormat ( String format ) { 
 - options . setFormat ( format ) ; 
 + this . format = format ; 
 } 
 
 / * * 
 - * Set the message to report for a match . 
 + * Sets the message to report for a match . 
 * @ param message the message to report for a match . 
 * / 
 public void setMessage ( String message ) { 
 - options . setMessage ( message ) ; 
 + this . message = message ; 
 } 
 
 / * * 
 - * Set the minimum number of matches required per file . 
 + * Sets the minimum number of matches required per file . 
 * @ param minimum the minimum number of matches required per file . 
 * / 
 public void setMinimum ( int minimum ) { 
 - options . setMinimum ( minimum ) ; 
 + this . minimum = minimum ; 
 } 
 
 / * * 
 - * Set the maximum number of matches required per file . 
 + * Sets the maximum number of matches required per file . 
 * @ param maximum the maximum number of matches required per file . 
 * / 
 public void setMaximum ( int maximum ) { 
 - options . setMaximum ( maximum ) ; 
 + this . maximum = maximum ; 
 } 
 
 / * * 
 - * Set whether to ignore case when matching . 
 - * @ param ignore whether to ignore case when matching . 
 + * Sets whether to ignore case when matching . 
 + * @ param ignoreCase whether to ignore case when matching . 
 * / 
 - public void setIgnoreCase ( boolean ignore ) { 
 - options . setIgnoreCase ( ignore ) ; 
 + public void setIgnoreCase ( boolean ignoreCase ) { 
 + this . ignoreCase = ignoreCase ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java 
 index 8669c44 . . 677c19d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineCheck . java 
 @ @ - 29 , 14 + 29 , 33 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 * @ author Oliver Burn 
 * / 
 public class RegexpSinglelineCheck extends AbstractFileSetCheck { 
 - / * * The detection options to use . * / 
 - private final DetectorOptions options = new DetectorOptions ( 0 , this ) ; 
 + 
 + / * * The format of the regular expression to match . * / 
 + private String format = " $ . " ; 
 + / * * The message to report for a match . * / 
 + private String message ; 
 + / * * The minimum number of matches required per file . * / 
 + private int minimum ; 
 + / * * The maximum number of matches required per file . * / 
 + private int maximum ; 
 + / * * Whether to ignore case when matching . * / 
 + private boolean ignoreCase ; 
 + 
 / * * The detector to use . * / 
 private SinglelineDetector detector ; 
 
 @ Override 
 public void beginProcessing ( String charset ) { 
 super . beginProcessing ( charset ) ; 
 + final DetectorOptions options = DetectorOptions . newBuilder ( ) 
 + . reporter ( this ) 
 + . compileFlags ( 0 ) 
 + . format ( format ) 
 + . message ( message ) 
 + . minimum ( minimum ) 
 + . maximum ( maximum ) 
 + . ignoreCase ( ignoreCase ) 
 + . build ( ) ; 
 detector = new SinglelineDetector ( options ) ; 
 } 
 
 @ @ - 50 , 7 + 69 , 7 @ @ public class RegexpSinglelineCheck extends AbstractFileSetCheck { 
 * @ param format the format of the regular expression to match . 
 * / 
 public void setFormat ( String format ) { 
 - options . setFormat ( format ) ; 
 + this . format = format ; 
 } 
 
 / * * 
 @ @ - 58 , 7 + 77 , 7 @ @ public class RegexpSinglelineCheck extends AbstractFileSetCheck { 
 * @ param message the message to report for a match . 
 * / 
 public void setMessage ( String message ) { 
 - options . setMessage ( message ) ; 
 + this . message = message ; 
 } 
 
 / * * 
 @ @ - 66 , 7 + 85 , 7 @ @ public class RegexpSinglelineCheck extends AbstractFileSetCheck { 
 * @ param minimum the minimum number of matches required per file . 
 * / 
 public void setMinimum ( int minimum ) { 
 - options . setMinimum ( minimum ) ; 
 + this . minimum = minimum ; 
 } 
 
 / * * 
 @ @ - 74 , 14 + 93 , 14 @ @ public class RegexpSinglelineCheck extends AbstractFileSetCheck { 
 * @ param maximum the maximum number of matches required per file . 
 * / 
 public void setMaximum ( int maximum ) { 
 - options . setMaximum ( maximum ) ; 
 + this . maximum = maximum ; 
 } 
 
 / * * 
 * Set whether to ignore case when matching . 
 - * @ param ignore whether to ignore case when matching . 
 + * @ param ignoreCase whether to ignore case when matching . 
 * / 
 - public void setIgnoreCase ( boolean ignore ) { 
 - options . setIgnoreCase ( ignore ) ; 
 + public void setIgnoreCase ( boolean ignoreCase ) { 
 + this . ignoreCase = ignoreCase ; 
 } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineJavaCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineJavaCheck . java 
 index dda7542 . . 337a74c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineJavaCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / regexp / RegexpSinglelineJavaCheck . java 
 @ @ - 32 , 10 + 32 , 17 @ @ import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 * @ author Oliver Burn 
 * / 
 public class RegexpSinglelineJavaCheck extends Check { 
 - / * * The detection options to use . * / 
 - private final DetectorOptions options = new DetectorOptions ( 0 , this ) ; 
 - / * * The detector to use . * / 
 - private SinglelineDetector detector ; 
 + 
 + / * * The format of the regular expression to match . * / 
 + private String format = " $ . " ; 
 + / * * The message to report for a match . * / 
 + private String message ; 
 + / * * The minimum number of matches required per file . * / 
 + private int minimum ; 
 + / * * The maximum number of matches required per file . * / 
 + private int maximum ; 
 + / * * Whether to ignore case when matching . * / 
 + private boolean ignoreCase ; 
 / * * Suppress comments . * * / 
 private boolean ignoreComments ; 
 
 @ @ - 55 , 21 + 62 , 23 @ @ public class RegexpSinglelineJavaCheck extends Check { 
 } 
 
 @ Override 
 - public void init ( ) { 
 - super . init ( ) ; 
 - detector = new SinglelineDetector ( options ) ; 
 - } 
 - 
 - @ Override 
 public void beginTree ( DetailAST rootAST ) { 
 - 
 + MatchSuppressor supressor = null ; 
 if ( ignoreComments ) { 
 - options . setSuppressor ( new CommentSuppressor ( getFileContents ( ) ) ) ; 
 - } 
 - else { 
 - options . setSuppressor ( NeverSuppress . INSTANCE ) ; 
 + supressor = new CommentSuppressor ( getFileContents ( ) ) ; 
 } 
 
 + final DetectorOptions options = DetectorOptions . newBuilder ( ) 
 + . reporter ( this ) 
 + . compileFlags ( 0 ) 
 + . suppressor ( supressor ) 
 + . format ( format ) 
 + . message ( message ) 
 + . minimum ( minimum ) 
 + . maximum ( maximum ) 
 + . ignoreCase ( ignoreCase ) 
 + . build ( ) ; 
 + final SinglelineDetector detector = new SinglelineDetector ( options ) ; 
 detector . processLines ( Arrays . asList ( getLines ( ) ) ) ; 
 } 
 
 @ @ - 78 , 7 + 87 , 7 @ @ public class RegexpSinglelineJavaCheck extends Check { 
 * @ param format the format of the regular expression to match . 
 * / 
 public void setFormat ( String format ) { 
 - options . setFormat ( format ) ; 
 + this . format = format ; 
 } 
 
 / * * 
 @ @ - 86 , 7 + 95 , 7 @ @ public class RegexpSinglelineJavaCheck extends Check { 
 * @ param message the message to report for a match . 
 * / 
 public void setMessage ( String message ) { 
 - options . setMessage ( message ) ; 
 + this . message = message ; 
 } 
 
 / * * 
 @ @ - 94 , 7 + 103 , 7 @ @ public class RegexpSinglelineJavaCheck extends Check { 
 * @ param minimum the minimum number of matches required per file . 
 * / 
 public void setMinimum ( int minimum ) { 
 - options . setMinimum ( minimum ) ; 
 + this . minimum = minimum ; 
 } 
 
 / * * 
 @ @ - 102 , 15 + 111 , 15 @ @ public class RegexpSinglelineJavaCheck extends Check { 
 * @ param maximum the maximum number of matches required per file . 
 * / 
 public void setMaximum ( int maximum ) { 
 - options . setMaximum ( maximum ) ; 
 + this . maximum = maximum ; 
 } 
 
 / * * 
 * Set whether to ignore case when matching . 
 - * @ param ignore whether to ignore case when matching . 
 + * @ param ignoreCase whether to ignore case when matching . 
 * / 
 - public void setIgnoreCase ( boolean ignore ) { 
 - options . setIgnoreCase ( ignore ) ; 
 + public void setIgnoreCase ( boolean ignoreCase ) { 
 + this . ignoreCase = ignoreCase ; 
 } 
 
 / * *
