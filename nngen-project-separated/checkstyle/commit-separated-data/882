BLEU SCORE: 0.06837203339116285

TEST MSG: Issue # 4106 : split and organized Checkstyle inputs by Test for AbstractClassName
GENERATED MSG: Issue # 2161 : unify test input locations

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java <nl> index aa4d6a8 . . 9e0ea4b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java <nl> @ @ - 36 , 7 + 36 , 9 @ @ public class AbstractClassNameCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " naming " + File . separator + filename ) ; <nl> + + " naming " + File . separator <nl> + + " abstractclassname " + File . separator <nl> + + filename ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassName . java <nl> deleted file mode 100644 <nl> index 70f96bf . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassName . java <nl> + + + / dev / null <nl> @ @ - 1 , 24 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> - <nl> - abstract public class InputAbstractClassName { <nl> - } <nl> - / / abstract - - > ^ Abstract . * $ <nl> - abstract class NonAbstractClassName { <nl> - } <nl> - <nl> - abstract class AbstractClassOther { <nl> - abstract class NonAbstractInnerClass { <nl> - } <nl> - } <nl> - <nl> - class NonAbstractClass { <nl> - } <nl> - <nl> - / / ^ Abstract . * $ - - > abstract <nl> - class AbstractClass { <nl> - } <nl> - <nl> - abstract class AbstractClassName2 { <nl> - class AbstractInnerClass { <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassNameFormerFalsePositive . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassNameFormerFalsePositive . java <nl> deleted file mode 100644 <nl> index e1912cc . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassNameFormerFalsePositive . java <nl> + + + / dev / null <nl> @ @ - 1 , 12 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> - <nl> - public class InputAbstractClassNameFormerFalsePositive <nl> - { <nl> - class Abstract { <nl> - <nl> - } <nl> - <nl> - class AbstractClass { <nl> - <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abstractclassname / InputAbstractClassName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abstractclassname / InputAbstractClassName . java <nl> new file mode 100644 <nl> index 0000000 . . 021a46d <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abstractclassname / InputAbstractClassName . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . abstractclassname ; <nl> + <nl> + abstract public class InputAbstractClassName { <nl> + } <nl> + / / abstract - - > ^ Abstract . * $ <nl> + abstract class NonAbstractClassName { <nl> + } <nl> + <nl> + abstract class AbstractClassOther { <nl> + abstract class NonAbstractInnerClass { <nl> + } <nl> + } <nl> + <nl> + class NonAbstractClass { <nl> + } <nl> + <nl> + / / ^ Abstract . * $ - - > abstract <nl> + class AbstractClass { <nl> + } <nl> + <nl> + abstract class AbstractClassName2 { <nl> + class AbstractInnerClass { <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abstractclassname / InputAbstractClassNameFormerFalsePositive . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abstractclassname / InputAbstractClassNameFormerFalsePositive . java <nl> new file mode 100644 <nl> index 0000000 . . 2c7c4b5 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abstractclassname / InputAbstractClassNameFormerFalsePositive . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming . abstractclassname ; <nl> + <nl> + public class InputAbstractClassNameFormerFalsePositive <nl> + { <nl> + class Abstract { <nl> + <nl> + } <nl> + <nl> + class AbstractClass { <nl> + <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> index 9af22a9 . . 2cdac81 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java <nl> @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { <nl> } <nl> <nl> private static List < RevCommit > getCommitsToCheck ( ) throws Exception { <nl> - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; <nl> - <nl> - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> List < RevCommit > commits ; <nl> - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> - } <nl> - else { <nl> - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { <nl> + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; <nl> + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { <nl> + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> + else { <nl> + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; <nl> + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; <nl> + } <nl> } <nl> return commits ; <nl> } <nl> @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { <nl> <nl> private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { <nl> RevCommitsPair revCommitIteratorPair ; <nl> - try { <nl> + <nl> + try ( RevWalk revWalk = new RevWalk ( repo ) ) { <nl> Iterator < RevCommit > first ; <nl> Iterator < RevCommit > second ; <nl> - <nl> - RevWalk revWalk = new RevWalk ( repo ) ; <nl> - <nl> ObjectId headId = repo . resolve ( Constants . HEAD ) ; <nl> RevCommit headCommit = revWalk . parseCommit ( headId ) ; <nl> <nl> @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { <nl> RevCommit firstParent = headCommit . getParent ( 0 ) ; <nl> RevCommit secondParent = headCommit . getParent ( 1 ) ; <nl> <nl> - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; <nl> + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; <nl> + } <nl> } <nl> else { <nl> - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; <nl> + try ( Git git = new Git ( repo ) ) { <nl> + first = git . log ( ) . call ( ) . iterator ( ) ; <nl> + } <nl> second = Collections . emptyIterator ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java 
 index aa4d6a8 . . 9e0ea4b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbstractClassNameCheckTest . java 
 @ @ - 36 , 7 + 36 , 9 @ @ public class AbstractClassNameCheckTest extends BaseCheckTestSupport { 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " naming " + File . separator + filename ) ; 
 + + " naming " + File . separator 
 + + " abstractclassname " + File . separator 
 + + filename ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassName . java 
 deleted file mode 100644 
 index 70f96bf . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassName . java 
 + + + / dev / null 
 @ @ - 1 , 24 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . naming ; 
 - 
 - abstract public class InputAbstractClassName { 
 - } 
 - / / abstract - - > ^ Abstract . * $ 
 - abstract class NonAbstractClassName { 
 - } 
 - 
 - abstract class AbstractClassOther { 
 - abstract class NonAbstractInnerClass { 
 - } 
 - } 
 - 
 - class NonAbstractClass { 
 - } 
 - 
 - / / ^ Abstract . * $ - - > abstract 
 - class AbstractClass { 
 - } 
 - 
 - abstract class AbstractClassName2 { 
 - class AbstractInnerClass { 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassNameFormerFalsePositive . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassNameFormerFalsePositive . java 
 deleted file mode 100644 
 index e1912cc . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbstractClassNameFormerFalsePositive . java 
 + + + / dev / null 
 @ @ - 1 , 12 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . naming ; 
 - 
 - public class InputAbstractClassNameFormerFalsePositive 
 - { 
 - class Abstract { 
 - 
 - } 
 - 
 - class AbstractClass { 
 - 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abstractclassname / InputAbstractClassName . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abstractclassname / InputAbstractClassName . java 
 new file mode 100644 
 index 0000000 . . 021a46d 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abstractclassname / InputAbstractClassName . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . abstractclassname ; 
 + 
 + abstract public class InputAbstractClassName { 
 + } 
 + / / abstract - - > ^ Abstract . * $ 
 + abstract class NonAbstractClassName { 
 + } 
 + 
 + abstract class AbstractClassOther { 
 + abstract class NonAbstractInnerClass { 
 + } 
 + } 
 + 
 + class NonAbstractClass { 
 + } 
 + 
 + / / ^ Abstract . * $ - - > abstract 
 + class AbstractClass { 
 + } 
 + 
 + abstract class AbstractClassName2 { 
 + class AbstractInnerClass { 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abstractclassname / InputAbstractClassNameFormerFalsePositive . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abstractclassname / InputAbstractClassNameFormerFalsePositive . java 
 new file mode 100644 
 index 0000000 . . 2c7c4b5 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / abstractclassname / InputAbstractClassNameFormerFalsePositive . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming . abstractclassname ; 
 + 
 + public class InputAbstractClassNameFormerFalsePositive 
 + { 
 + class Abstract { 
 + 
 + } 
 + 
 + class AbstractClass { 
 + 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 index 9af22a9 . . 2cdac81 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CommitValidationTest . java 
 @ @ - 137 , 17 + 137 , 17 @ @ public class CommitValidationTest { 
 } 
 
 private static List < RevCommit > getCommitsToCheck ( ) throws Exception { 
 - Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ; 
 - 
 - RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 List < RevCommit > commits ; 
 - if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 - commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 - } 
 - else { 
 - commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 - commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + try ( Repository repo = new FileRepositoryBuilder ( ) . findGitDir ( ) . build ( ) ) { 
 + RevCommitsPair revCommitsPair = resolveRevCommitsPair ( repo ) ; 
 + if ( COMMITS _ RESOLUTION _ MODE = = CommitsResolutionMode . BY _ COUNTER ) { 
 + commits = getCommitsByCounter ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByCounter ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 + else { 
 + commits = getCommitsByLastCommitAuthor ( revCommitsPair . getFirst ( ) ) ; 
 + commits . addAll ( getCommitsByLastCommitAuthor ( revCommitsPair . getSecond ( ) ) ) ; 
 + } 
 } 
 return commits ; 
 } 
 @ @ - 165 , 12 + 165 , 10 @ @ public class CommitValidationTest { 
 
 private static RevCommitsPair resolveRevCommitsPair ( Repository repo ) { 
 RevCommitsPair revCommitIteratorPair ; 
 - try { 
 + 
 + try ( RevWalk revWalk = new RevWalk ( repo ) ) { 
 Iterator < RevCommit > first ; 
 Iterator < RevCommit > second ; 
 - 
 - RevWalk revWalk = new RevWalk ( repo ) ; 
 - 
 ObjectId headId = repo . resolve ( Constants . HEAD ) ; 
 RevCommit headCommit = revWalk . parseCommit ( headId ) ; 
 
 @ @ - 178 , 11 + 176 , 15 @ @ public class CommitValidationTest { 
 RevCommit firstParent = headCommit . getParent ( 0 ) ; 
 RevCommit secondParent = headCommit . getParent ( 1 ) ; 
 
 - first = new Git ( repo ) . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 - second = new Git ( repo ) . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . add ( firstParent ) . call ( ) . iterator ( ) ; 
 + second = git . log ( ) . add ( secondParent ) . call ( ) . iterator ( ) ; 
 + } 
 } 
 else { 
 - first = new Git ( repo ) . log ( ) . call ( ) . iterator ( ) ; 
 + try ( Git git = new Git ( repo ) ) { 
 + first = git . log ( ) . call ( ) . iterator ( ) ; 
 + } 
 second = Collections . emptyIterator ( ) ; 
 } 

