BLEU SCORE: 0.20556680845025987

TEST MSG: Issue # 997 : PMD violations EmptyMethodInAbstractClassShouldBeAbstract
GENERATED MSG: Fixes PMD violations : EmptyMethodInAbstractClassShouldBeAbstract # 997

TEST DIFF (one line): diff - - git a / config / pmd . xml b / config / pmd . xml <nl> index 7e76579 . . c783203 100644 <nl> - - - a / config / pmd . xml <nl> + + + b / config / pmd . xml <nl> @ @ - 154 , 7 + 154 , 7 @ @ <nl> < properties > <nl> < ! - - Can not change API - - > <nl> < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractFileSetCheck ' <nl> - or @ Image = ' Check or @ Image = ' AbstractJavadocCheck ' ] " / > <nl> + or @ Image = ' Check ' or @ Image = ' AbstractJavadocCheck ' ] " / > <nl> < / properties > <nl> < / rule > <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> index 83381fc . . 7c75d71 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java <nl> @ @ - 59 , 6 + 59 , 12 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck { <nl> private final List < String > readerLines = Lists . newArrayList ( ) ; <nl> <nl> / * * <nl> + * Hook method for post processing header lines . <nl> + * This implementation does nothing . <nl> + * / <nl> + protected abstract void postProcessHeaderLines ( ) ; <nl> + <nl> + / * * <nl> * Return the header lines to check against . <nl> * @ return the header lines to check against . <nl> * / <nl> @ @ - 174 , 14 + 180 , 6 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck { <nl> postProcessHeaderLines ( ) ; <nl> } <nl> <nl> - / * * <nl> - * Hook method for post processing header lines . <nl> - * This implementation does nothing . <nl> - * / <nl> - protected void postProcessHeaderLines ( ) { <nl> - / / No code by default <nl> - } <nl> - <nl> @ Override <nl> protected final void finishLocalSetup ( ) throws CheckstyleException { <nl> if ( filename ! = null ) { <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java <nl> index 92e7fd9 . . 1cc0596 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java <nl> @ @ - 100 , 4 + 100 , 9 @ @ public class HeaderCheck extends AbstractHeaderCheck { <nl> } <nl> } <nl> } <nl> + <nl> + @ Override <nl> + protected void postProcessHeaderLines ( ) { <nl> + / / no code <nl> + } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java <nl> index 60aa1c0 . . da43b4f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java <nl> @ @ - 61 , 6 + 61 , 22 @ @ public abstract class AbstractComplexityCheck <nl> * / <nl> protected abstract String getMessageID ( ) ; <nl> <nl> + / * * <nl> + * Hook called when visiting a token . Will not be called the method <nl> + * definition tokens . <nl> + * <nl> + * @ param ast the token being visited <nl> + * / <nl> + protected abstract void visitTokenHook ( DetailAST ast ) ; <nl> + <nl> + / * * <nl> + * Hook called when leaving a token . Will not be called the method <nl> + * definition tokens . <nl> + * <nl> + * @ param ast the token being left <nl> + * / <nl> + protected abstract void leaveTokenHook ( DetailAST ast ) ; <nl> + <nl> @ Override <nl> public final int [ ] getRequiredTokens ( ) { <nl> return new int [ ] { <nl> @ @ - 109 , 26 + 125 , 6 @ @ public abstract class AbstractComplexityCheck <nl> } <nl> <nl> / * * <nl> - * Hook called when visiting a token . Will not be called the method <nl> - * definition tokens . <nl> - * <nl> - * @ param ast the token being visited <nl> - * / <nl> - protected void visitTokenHook ( DetailAST ast ) { <nl> - / / no code <nl> - } <nl> - <nl> - / * * <nl> - * Hook called when leaving a token . Will not be called the method <nl> - * definition tokens . <nl> - * <nl> - * @ param ast the token being left <nl> - * / <nl> - protected void leaveTokenHook ( DetailAST ast ) { <nl> - / / no code <nl> - } <nl> - <nl> - / * * <nl> * Gets the current value . <nl> * @ return the current value <nl> * / <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java <nl> index 03a6884 . . c63e9b1 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java <nl> @ @ - 127 , 4 + 127 , 9 @ @ public class CyclomaticComplexityCheck <nl> protected final String getMessageID ( ) { <nl> return MSG _ KEY ; <nl> } <nl> + <nl> + @ Override <nl> + protected void leaveTokenHook ( DetailAST ast ) { <nl> + / / no code <nl> + } <nl> } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java <nl> index dadc21b . . aff3585 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java <nl> @ @ - 160 , 4 + 160 , 14 @ @ public final class NPathComplexityCheck extends AbstractComplexityCheck { <nl> setCurrentValue ( <nl> getCurrentValue ( ) . add ( BigInteger . ONE ) . multiply ( popValue ( ) ) ) ; <nl> } <nl> + <nl> + @ Override <nl> + protected void visitTokenHook ( DetailAST ast ) { <nl> + / / no code <nl> + } <nl> + <nl> + @ Override <nl> + protected void leaveTokenHook ( DetailAST ast ) { <nl> + / / no code <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> index 1f2d357 . . bbc096b 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java <nl> @ @ - 235 , 34 + 235 , 7 @ @ public class SuppressWarningsHolder <nl> } <nl> if ( " SuppressWarnings " . equals ( identifier ) ) { <nl> <nl> - / / get values of annotation <nl> - List < String > values = null ; <nl> - final DetailAST lparenAST = ast . findFirstToken ( TokenTypes . LPAREN ) ; <nl> - if ( lparenAST ! = null ) { <nl> - final DetailAST nextAST = lparenAST . getNextSibling ( ) ; <nl> - if ( nextAST ! = null ) { <nl> - final int nextType = nextAST . getType ( ) ; <nl> - switch ( nextType ) { <nl> - case TokenTypes . EXPR : <nl> - case TokenTypes . ANNOTATION _ ARRAY _ INIT : <nl> - values = getAnnotationValues ( nextAST ) ; <nl> - break ; <nl> - <nl> - case TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR : <nl> - / / expected children : IDENT ASSIGN ( EXPR | <nl> - / / ANNOTATION _ ARRAY _ INIT ) <nl> - values = getAnnotationValues ( getNthChild ( nextAST , 2 ) ) ; <nl> - break ; <nl> - <nl> - case TokenTypes . RPAREN : <nl> - / / no value present ( not valid Java ) <nl> - break ; <nl> - <nl> - default : <nl> - / / unknown annotation value type ( new syntax ? ) <nl> - } <nl> - } <nl> - } <nl> + final List < String > values = getAllAnnotationValues ( ast ) ; <nl> if ( isAnnotationEmpty ( values ) ) { <nl> return ; <nl> } <nl> @ @ - 306 , 6 + 279 , 43 @ @ public class SuppressWarningsHolder <nl> } <nl> <nl> / * * <nl> + * get all annotation values <nl> + * @ param ast annotation token <nl> + * @ return list values <nl> + * / <nl> + private List < String > getAllAnnotationValues ( DetailAST ast ) { <nl> + / / get values of annotation <nl> + List < String > values = null ; <nl> + final DetailAST lparenAST = ast . findFirstToken ( TokenTypes . LPAREN ) ; <nl> + if ( lparenAST ! = null ) { <nl> + final DetailAST nextAST = lparenAST . getNextSibling ( ) ; <nl> + if ( nextAST ! = null ) { <nl> + final int nextType = nextAST . getType ( ) ; <nl> + switch ( nextType ) { <nl> + case TokenTypes . EXPR : <nl> + case TokenTypes . ANNOTATION _ ARRAY _ INIT : <nl> + values = getAnnotationValues ( nextAST ) ; <nl> + break ; <nl> + <nl> + case TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR : <nl> + / / expected children : IDENT ASSIGN ( EXPR | <nl> + / / ANNOTATION _ ARRAY _ INIT ) <nl> + values = getAnnotationValues ( getNthChild ( nextAST , 2 ) ) ; <nl> + break ; <nl> + <nl> + case TokenTypes . RPAREN : <nl> + / / no value present ( not valid Java ) <nl> + break ; <nl> + <nl> + default : <nl> + / / unknown annotation value type ( new syntax ? ) <nl> + } <nl> + } <nl> + } <nl> + return values ; <nl> + } <nl> + <nl> + / * * <nl> * @ param values list of values in the annotation <nl> * @ return whether annotation is empty or contains some values <nl> * /

TEST DIFF:
diff - - git a / config / pmd . xml b / config / pmd . xml 
 index 7e76579 . . c783203 100644 
 - - - a / config / pmd . xml 
 + + + b / config / pmd . xml 
 @ @ - 154 , 7 + 154 , 7 @ @ 
 < properties > 
 < ! - - Can not change API - - > 
 < property name = " violationSuppressXPath " value = " / / ClassOrInterfaceDeclaration [ @ Image = ' AbstractFileSetCheck ' 
 - or @ Image = ' Check or @ Image = ' AbstractJavadocCheck ' ] " / > 
 + or @ Image = ' Check ' or @ Image = ' AbstractJavadocCheck ' ] " / > 
 < / properties > 
 < / rule > 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 index 83381fc . . 7c75d71 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / AbstractHeaderCheck . java 
 @ @ - 59 , 6 + 59 , 12 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck { 
 private final List < String > readerLines = Lists . newArrayList ( ) ; 
 
 / * * 
 + * Hook method for post processing header lines . 
 + * This implementation does nothing . 
 + * / 
 + protected abstract void postProcessHeaderLines ( ) ; 
 + 
 + / * * 
 * Return the header lines to check against . 
 * @ return the header lines to check against . 
 * / 
 @ @ - 174 , 14 + 180 , 6 @ @ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck { 
 postProcessHeaderLines ( ) ; 
 } 
 
 - / * * 
 - * Hook method for post processing header lines . 
 - * This implementation does nothing . 
 - * / 
 - protected void postProcessHeaderLines ( ) { 
 - / / No code by default 
 - } 
 - 
 @ Override 
 protected final void finishLocalSetup ( ) throws CheckstyleException { 
 if ( filename ! = null ) { 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java 
 index 92e7fd9 . . 1cc0596 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheck . java 
 @ @ - 100 , 4 + 100 , 9 @ @ public class HeaderCheck extends AbstractHeaderCheck { 
 } 
 } 
 } 
 + 
 + @ Override 
 + protected void postProcessHeaderLines ( ) { 
 + / / no code 
 + } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java 
 index 60aa1c0 . . da43b4f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / AbstractComplexityCheck . java 
 @ @ - 61 , 6 + 61 , 22 @ @ public abstract class AbstractComplexityCheck 
 * / 
 protected abstract String getMessageID ( ) ; 
 
 + / * * 
 + * Hook called when visiting a token . Will not be called the method 
 + * definition tokens . 
 + * 
 + * @ param ast the token being visited 
 + * / 
 + protected abstract void visitTokenHook ( DetailAST ast ) ; 
 + 
 + / * * 
 + * Hook called when leaving a token . Will not be called the method 
 + * definition tokens . 
 + * 
 + * @ param ast the token being left 
 + * / 
 + protected abstract void leaveTokenHook ( DetailAST ast ) ; 
 + 
 @ Override 
 public final int [ ] getRequiredTokens ( ) { 
 return new int [ ] { 
 @ @ - 109 , 26 + 125 , 6 @ @ public abstract class AbstractComplexityCheck 
 } 
 
 / * * 
 - * Hook called when visiting a token . Will not be called the method 
 - * definition tokens . 
 - * 
 - * @ param ast the token being visited 
 - * / 
 - protected void visitTokenHook ( DetailAST ast ) { 
 - / / no code 
 - } 
 - 
 - / * * 
 - * Hook called when leaving a token . Will not be called the method 
 - * definition tokens . 
 - * 
 - * @ param ast the token being left 
 - * / 
 - protected void leaveTokenHook ( DetailAST ast ) { 
 - / / no code 
 - } 
 - 
 - / * * 
 * Gets the current value . 
 * @ return the current value 
 * / 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java 
 index 03a6884 . . c63e9b1 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / CyclomaticComplexityCheck . java 
 @ @ - 127 , 4 + 127 , 9 @ @ public class CyclomaticComplexityCheck 
 protected final String getMessageID ( ) { 
 return MSG _ KEY ; 
 } 
 + 
 + @ Override 
 + protected void leaveTokenHook ( DetailAST ast ) { 
 + / / no code 
 + } 
 } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java 
 index dadc21b . . aff3585 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / metrics / NPathComplexityCheck . java 
 @ @ - 160 , 4 + 160 , 14 @ @ public final class NPathComplexityCheck extends AbstractComplexityCheck { 
 setCurrentValue ( 
 getCurrentValue ( ) . add ( BigInteger . ONE ) . multiply ( popValue ( ) ) ) ; 
 } 
 + 
 + @ Override 
 + protected void visitTokenHook ( DetailAST ast ) { 
 + / / no code 
 + } 
 + 
 + @ Override 
 + protected void leaveTokenHook ( DetailAST ast ) { 
 + / / no code 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 index 1f2d357 . . bbc096b 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / SuppressWarningsHolder . java 
 @ @ - 235 , 34 + 235 , 7 @ @ public class SuppressWarningsHolder 
 } 
 if ( " SuppressWarnings " . equals ( identifier ) ) { 
 
 - / / get values of annotation 
 - List < String > values = null ; 
 - final DetailAST lparenAST = ast . findFirstToken ( TokenTypes . LPAREN ) ; 
 - if ( lparenAST ! = null ) { 
 - final DetailAST nextAST = lparenAST . getNextSibling ( ) ; 
 - if ( nextAST ! = null ) { 
 - final int nextType = nextAST . getType ( ) ; 
 - switch ( nextType ) { 
 - case TokenTypes . EXPR : 
 - case TokenTypes . ANNOTATION _ ARRAY _ INIT : 
 - values = getAnnotationValues ( nextAST ) ; 
 - break ; 
 - 
 - case TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR : 
 - / / expected children : IDENT ASSIGN ( EXPR | 
 - / / ANNOTATION _ ARRAY _ INIT ) 
 - values = getAnnotationValues ( getNthChild ( nextAST , 2 ) ) ; 
 - break ; 
 - 
 - case TokenTypes . RPAREN : 
 - / / no value present ( not valid Java ) 
 - break ; 
 - 
 - default : 
 - / / unknown annotation value type ( new syntax ? ) 
 - } 
 - } 
 - } 
 + final List < String > values = getAllAnnotationValues ( ast ) ; 
 if ( isAnnotationEmpty ( values ) ) { 
 return ; 
 } 
 @ @ - 306 , 6 + 279 , 43 @ @ public class SuppressWarningsHolder 
 } 
 
 / * * 
 + * get all annotation values 
 + * @ param ast annotation token 
 + * @ return list values 
 + * / 
 + private List < String > getAllAnnotationValues ( DetailAST ast ) { 
 + / / get values of annotation 
 + List < String > values = null ; 
 + final DetailAST lparenAST = ast . findFirstToken ( TokenTypes . LPAREN ) ; 
 + if ( lparenAST ! = null ) { 
 + final DetailAST nextAST = lparenAST . getNextSibling ( ) ; 
 + if ( nextAST ! = null ) { 
 + final int nextType = nextAST . getType ( ) ; 
 + switch ( nextType ) { 
 + case TokenTypes . EXPR : 
 + case TokenTypes . ANNOTATION _ ARRAY _ INIT : 
 + values = getAnnotationValues ( nextAST ) ; 
 + break ; 
 + 
 + case TokenTypes . ANNOTATION _ MEMBER _ VALUE _ PAIR : 
 + / / expected children : IDENT ASSIGN ( EXPR | 
 + / / ANNOTATION _ ARRAY _ INIT ) 
 + values = getAnnotationValues ( getNthChild ( nextAST , 2 ) ) ; 
 + break ; 
 + 
 + case TokenTypes . RPAREN : 
 + / / no value present ( not valid Java ) 
 + break ; 
 + 
 + default : 
 + / / unknown annotation value type ( new syntax ? ) 
 + } 
 + } 
 + } 
 + return values ; 
 + } 
 + 
 + / * * 
 * @ param values list of values in the annotation 
 * @ return whether annotation is empty or contains some values 
 * /
