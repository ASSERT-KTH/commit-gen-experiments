BLEU SCORE: 0.7406375008540003

TEST MSG: Issue # 3891 : Split and Organize Checkstyle inputs by Test : whitespace package cleanup
GENERATED MSG: Issue # 3891 : Split and Organize Checkstyle inputs by Test : naming package , TypeName

TEST DIFF (one line): diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputMethodReferences3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputMethodReferences3 . java <nl> deleted file mode 100644 <nl> index 90e9d12 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputMethodReferences3 . java <nl> + + + / dev / null <nl> @ @ - 1 , 21 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> - import java . util . function . Supplier ; <nl> - <nl> - public class InputMethodReferences3 <nl> - { <nl> - public static class SomeClass { <nl> - public static class Nested < V > { <nl> - private Nested ( ) { <nl> - } <nl> - } <nl> - } <nl> - <nl> - public static class Nested2 < V > { <nl> - } <nl> - <nl> - public < V > void methodName ( V value ) { <nl> - Supplier < ? > t = Nested2 < V > : : new ; <nl> - Supplier < SomeClass . Nested < V > > passes = SomeClass . Nested : : new ; <nl> - Supplier < SomeClass . Nested < V > > fails = SomeClass . Nested < V > : : new ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputSeparatorWrap . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputSeparatorWrap . java <nl> deleted file mode 100644 <nl> index e7d233a . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputSeparatorWrap . java <nl> + + + / dev / null <nl> @ @ - 1 , 65 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> - <nl> - public class InputSeparatorWrap < T extends Foo <nl> - & Bar > { <nl> - public void goodCase ( ) throws FooException , BarException <nl> - { <nl> - int i = 0 ; <nl> - String s = " ffffooooString " ; <nl> - s <nl> - . isEmpty ( ) ; / / good wrapping <nl> - s . isEmpty ( ) ; <nl> - try { <nl> - foo ( i , s ) ; <nl> - } catch ( FooException | <nl> - BarException e ) { } <nl> - foo ( i , <nl> - s ) ; / / good wrapping <nl> - } <nl> - public static void foo ( int i , String s ) throws FooException , BarException <nl> - { <nl> - <nl> - } <nl> - } <nl> - <nl> - class badCase < T extends Foo & Bar > { <nl> - <nl> - 	 <nl> - public void goodCase ( int . . . aFoo ) throws FooException , BarException <nl> - { <nl> - String s = " ffffooooString " ; <nl> - s . <nl> - isEmpty ( ) ; / / bad wrapping <nl> - try { <nl> - foo ( 1 , s ) ; <nl> - } catch ( FooException <nl> - | BarException e ) { } <nl> - <nl> - foo ( 1 <nl> - , s ) ; / / bad wrapping <nl> - int [ ] i ; <nl> - } <nl> - public static String foo ( int i , String s ) throws FooException , BarException <nl> - { <nl> - return new StringBuilder ( " " ) <nl> - . append ( " " , 0 , 1 ) <nl> - . append ( " " ) <nl> - . toString ( ) ; <nl> - } <nl> - } <nl> - <nl> - interface Foo { <nl> - <nl> - } <nl> - <nl> - interface Bar { <nl> - <nl> - } <nl> - <nl> - class FooException extends Exception { <nl> - 	 <nl> - } <nl> - <nl> - class BarException extends Exception { <nl> - 	 <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputSimple . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputSimple . java <nl> deleted file mode 100644 <nl> index 073be36 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputSimple . java <nl> + + + / dev / null <nl> @ @ - 1 , 225 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : Feb - 2001 <nl> - / / Ignore error <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> - import java . io . * ; <nl> - / * * <nl> - * Contains simple mistakes : <nl> - * - Long lines <nl> - * - Tabs <nl> - * - Format of variables and parameters <nl> - * - Order of modifiers <nl> - * @ author Oliver Burn <nl> - * * / <nl> - final class InputSimple <nl> - { <nl> - / / Long line - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> - / / Contains a tab - > 	 < - <nl> - / / Contains trailing whitespace - > <nl> - <nl> - / / Name format tests <nl> - / / <nl> - / * * Invalid format * * / <nl> - public static final int badConstant = 2 ; <nl> - / * * Valid format * * / <nl> - public static final int MAX _ ROWS = 2 ; <nl> - <nl> - / * * Invalid format * * / <nl> - private static int badStatic = 2 ; <nl> - / * * Valid format * * / <nl> - private static int sNumCreated = 0 ; <nl> - <nl> - / * * Invalid format * * / <nl> - private int badMember = 2 ; <nl> - / * * Valid format * * / <nl> - private int mNumCreated1 = 0 ; <nl> - / * * Valid format * * / <nl> - protected int mNumCreated2 = 0 ; <nl> - <nl> - / * * commas are wrong * * / <nl> - private int [ ] mInts = new int [ ] { 1 , 2 , 3 , <nl> - 4 } ; <nl> - <nl> - / / <nl> - / / Accessor tests <nl> - / / <nl> - / * * should be private * * / <nl> - public static int sTest1 ; <nl> - / * * should be private * * / <nl> - protected static int sTest3 ; <nl> - / * * should be private * * / <nl> - static int sTest2 ; <nl> - <nl> - / * * should be private * * / <nl> - int mTest1 ; <nl> - / * * should be private * * / <nl> - public int mTest2 ; <nl> - <nl> - / / <nl> - / / Parameter name format tests <nl> - / / <nl> - <nl> - / * * <nl> - * @ return hack <nl> - * @ param badFormat1 bad format <nl> - * @ param badFormat2 bad format <nl> - * @ param badFormat3 bad format <nl> - * @ throws java . lang . Exception abc <nl> - * * / <nl> - int test1 ( int badFormat1 , int badFormat2 , <nl> - final int badFormat3 ) <nl> - throws java . lang . Exception <nl> - { <nl> - return 0 ; <nl> - } <nl> - <nl> - / * * method that is 20 lines long * * / <nl> - private void longMethod ( ) <nl> - { <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - } <nl> - <nl> - / * * constructor that is 10 lines long * * / <nl> - private InputSimple ( ) <nl> - { <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - / / a line <nl> - } <nl> - <nl> - / * * test local variables * / <nl> - private void localVariables ( ) <nl> - { <nl> - / / normal decl <nl> - int abc = 0 ; <nl> - int ABC = 0 ; <nl> - <nl> - / / final decls <nl> - final int cde = 0 ; <nl> - final int CDE = 0 ; <nl> - <nl> - / / decl in for loop init statement <nl> - for ( int k = 0 ; k < 1 ; k + + ) <nl> - { <nl> - String innerBlockVariable = " " ; <nl> - } <nl> - for ( int I = 0 ; I < 1 ; I + + ) <nl> - { <nl> - String InnerBlockVariable = " " ; <nl> - } <nl> - } <nl> - <nl> - / * * test method pattern * / <nl> - void ALL _ UPPERCASE _ METHOD ( ) <nl> - { <nl> - } <nl> - <nl> - / * * test illegal constant * * / <nl> - private static final int BAD _ _ NAME = 3 ; <nl> - <nl> - / / A very , very long line that is OK because it matches the regexp " ^ . * is OK . * regexp . * $ " <nl> - / / long line that has a tab - > 	 < - and would be OK if tab counted as 1 char <nl> - / / tabs that count as one char because of their position - > 	 < - - > 	 < - , OK <nl> - <nl> - / * * some lines to test the error column after tabs * / <nl> - void errorColumnAfterTabs ( ) <nl> - { <nl> - / / with tab - width 8 all statements below start at the same column , <nl> - / / with different combinations of ' ' and ' \ t ' before the statement <nl> - int tab0 = 1 ; <nl> - 	 int tab1 = 1 ; <nl> - 	 int tab2 = 1 ; <nl> - 	 	 int tab3 = 1 ; <nl> - 	 	 int tab4 = 1 ; <nl> - 	 int tab5 = 1 ; <nl> - } <nl> - <nl> - / / FIXME : <nl> - / * FIXME : a <nl> - * FIXME : <nl> - * TODO <nl> - * / <nl> - / * NOTHING * / <nl> - / * YES * / / * FIXME : x * / / * YES ! ! * / <nl> - <nl> - / * * test long comments * * / <nl> - void veryLong ( ) <nl> - { <nl> - / * <nl> - blah blah blah blah <nl> - blah blah blah blah <nl> - blah blah blah blah <nl> - blah blah blah blah <nl> - blah blah blah blah <nl> - blah blah blah blah <nl> - blah blah blah blah <nl> - blah blah blah blah <nl> - blah blah blah blah <nl> - blah blah blah blah <nl> - blah blah blah blah <nl> - blah blah blah blah <nl> - blah blah blah blah <nl> - blah blah blah blah <nl> - blah blah blah blah <nl> - enough talk * / <nl> - } <nl> - <nl> - / * * <nl> - * @ see to lazy to document all args . Testing excessive # args <nl> - * * / <nl> - void toManyArgs ( int aArg1 , int aArg2 , int aArg3 , int aArg4 , int aArg5 , <nl> - int aArg6 , int aArg7 , int aArg8 , int aArg9 ) <nl> - { <nl> - } <nl> - } <nl> - <nl> - / * * Test class for variable naming in for each clauses . * / <nl> - class InputSimple2 <nl> - { <nl> - / * * Some more Javadoc . * / <nl> - public void doSomething ( ) <nl> - { <nl> - / / " O " should be named " o " <nl> - for ( Object O : new java . util . ArrayList ( ) ) <nl> - { <nl> - <nl> - } <nl> - } <nl> - } <nl> - <nl> - / * * Test enum for member naming check * / <nl> - enum MyEnum1 <nl> - { <nl> - / * * ABC constant * / <nl> - ABC , <nl> - <nl> - / * * XYZ constant * / <nl> - XYZ ; <nl> - <nl> - / * * Should be mSomeMemeber * / <nl> - private int someMember ; <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAfter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAfter . java <nl> deleted file mode 100644 <nl> index 8e49855 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAfter . java <nl> + + + / dev / null <nl> @ @ - 1 , 67 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> - <nl> - public class InputWhitespaceAfter { <nl> - <nl> - boolean condition ( ) { <nl> - return false ; <nl> - } <nl> - <nl> - void testIfElse ( ) { <nl> - / / Valid <nl> - if ( condition ( ) ) { <nl> - testIfElse ( ) ; <nl> - } else { <nl> - testIfElse ( ) ; <nl> - } <nl> - <nl> - / / Invalid <nl> - if ( condition ( ) ) { / / violation <nl> - testIfElse ( ) ; <nl> - } else { <nl> - testIfElse ( ) ; <nl> - } <nl> - <nl> - / / Invalid <nl> - if ( condition ( ) ) { <nl> - testIfElse ( ) ; <nl> - } else { / / violation <nl> - testIfElse ( ) ; <nl> - } <nl> - } <nl> - <nl> - void testWhile ( ) { <nl> - / / Valid <nl> - while ( condition ( ) ) { <nl> - testWhile ( ) ; <nl> - } <nl> - <nl> - / / Invalid <nl> - while ( condition ( ) ) { / / violation <nl> - testWhile ( ) ; <nl> - } <nl> - } <nl> - <nl> - void testFor ( ) { <nl> - / / Valid <nl> - for ( int i = 0 ; i < 5 ; i + + ) { <nl> - testFor ( ) ; <nl> - } <nl> - <nl> - / / Invalid <nl> - for ( int i = 0 ; i < 5 ; i + + ) { / / violation <nl> - testFor ( ) ; <nl> - } <nl> - } <nl> - <nl> - void testDo ( ) { <nl> - / / Valid <nl> - do { <nl> - testDo ( ) ; <nl> - } while ( condition ( ) ) ; <nl> - <nl> - / / Invalid <nl> - do { / / violation <nl> - testDo ( ) ; <nl> - } while ( condition ( ) ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / operatorwrap / InputOperatorWrap . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / operatorwrap / InputOperatorWrap . java <nl> index 3b457bc . . c1f3feb 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / operatorwrap / InputOperatorWrap . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / operatorwrap / InputOperatorWrap . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ <nl> / / Test case file for checkstyle . <nl> / / Created : 2001 <nl> / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . operatorwrap ; <nl> <nl> import java . util . Arrays ; <nl> <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / operatorwrap / InputOperatorWrapSeparatorAndInterfaces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / operatorwrap / InputOperatorWrapSeparatorAndInterfaces . java <nl> new file mode 100644 <nl> index 0000000 . . eea429e <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / operatorwrap / InputOperatorWrapSeparatorAndInterfaces . java <nl> @ @ - 0 , 0 + 1 , 65 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . whitespace . operatorwrap ; <nl> + <nl> + public class InputOperatorWrapSeparatorAndInterfaces < T extends Foo <nl> + & Bar > { <nl> + public void goodCase ( ) throws FooException , BarException <nl> + { <nl> + int i = 0 ; <nl> + String s = " ffffooooString " ; <nl> + s <nl> + . isEmpty ( ) ; / / good wrapping <nl> + s . isEmpty ( ) ; <nl> + try { <nl> + foo ( i , s ) ; <nl> + } catch ( FooException | <nl> + BarException e ) { } <nl> + foo ( i , <nl> + s ) ; / / good wrapping <nl> + } <nl> + public static void foo ( int i , String s ) throws FooException , BarException <nl> + { <nl> + <nl> + } <nl> + } <nl> + <nl> + class badCase < T extends Foo & Bar > { <nl> + <nl> + 	 <nl> + public void goodCase ( int . . . aFoo ) throws FooException , BarException <nl> + { <nl> + String s = " ffffooooString " ; <nl> + s . <nl> + isEmpty ( ) ; / / bad wrapping <nl> + try { <nl> + foo ( 1 , s ) ; <nl> + } catch ( FooException <nl> + | BarException e ) { } <nl> + <nl> + foo ( 1 <nl> + , s ) ; / / bad wrapping <nl> + int [ ] i ; <nl> + } <nl> + public static String foo ( int i , String s ) throws FooException , BarException <nl> + { <nl> + return new StringBuilder ( " " ) <nl> + . append ( " " , 0 , 1 ) <nl> + . append ( " " ) <nl> + . toString ( ) ; <nl> + } <nl> + } <nl> + <nl> + interface Foo { <nl> + <nl> + } <nl> + <nl> + interface Bar { <nl> + <nl> + } <nl> + <nl> + class FooException extends Exception { <nl> + 	 <nl> + } <nl> + <nl> + class BarException extends Exception { <nl> + 	 <nl> + }
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 7f4a63c . . e63175b 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 822 , 7 + 822 , 7 @ @ <nl> < plugin > <nl> < groupId > org . apache . maven . plugins < / groupId > <nl> < artifactId > maven - failsafe - plugin < / artifactId > <nl> - < version > 2 . 19 . 1 < / version > <nl> + < version > 2 . 20 < / version > <nl> < configuration > <nl> < includes > <nl> < include > com / google / * * / * . java < / include >

TEST DIFF:
diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputMethodReferences3 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputMethodReferences3 . java 
 deleted file mode 100644 
 index 90e9d12 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputMethodReferences3 . java 
 + + + / dev / null 
 @ @ - 1 , 21 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 - import java . util . function . Supplier ; 
 - 
 - public class InputMethodReferences3 
 - { 
 - public static class SomeClass { 
 - public static class Nested < V > { 
 - private Nested ( ) { 
 - } 
 - } 
 - } 
 - 
 - public static class Nested2 < V > { 
 - } 
 - 
 - public < V > void methodName ( V value ) { 
 - Supplier < ? > t = Nested2 < V > : : new ; 
 - Supplier < SomeClass . Nested < V > > passes = SomeClass . Nested : : new ; 
 - Supplier < SomeClass . Nested < V > > fails = SomeClass . Nested < V > : : new ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputSeparatorWrap . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputSeparatorWrap . java 
 deleted file mode 100644 
 index e7d233a . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputSeparatorWrap . java 
 + + + / dev / null 
 @ @ - 1 , 65 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 - 
 - public class InputSeparatorWrap < T extends Foo 
 - & Bar > { 
 - public void goodCase ( ) throws FooException , BarException 
 - { 
 - int i = 0 ; 
 - String s = " ffffooooString " ; 
 - s 
 - . isEmpty ( ) ; / / good wrapping 
 - s . isEmpty ( ) ; 
 - try { 
 - foo ( i , s ) ; 
 - } catch ( FooException | 
 - BarException e ) { } 
 - foo ( i , 
 - s ) ; / / good wrapping 
 - } 
 - public static void foo ( int i , String s ) throws FooException , BarException 
 - { 
 - 
 - } 
 - } 
 - 
 - class badCase < T extends Foo & Bar > { 
 - 
 - 	 
 - public void goodCase ( int . . . aFoo ) throws FooException , BarException 
 - { 
 - String s = " ffffooooString " ; 
 - s . 
 - isEmpty ( ) ; / / bad wrapping 
 - try { 
 - foo ( 1 , s ) ; 
 - } catch ( FooException 
 - | BarException e ) { } 
 - 
 - foo ( 1 
 - , s ) ; / / bad wrapping 
 - int [ ] i ; 
 - } 
 - public static String foo ( int i , String s ) throws FooException , BarException 
 - { 
 - return new StringBuilder ( " " ) 
 - . append ( " " , 0 , 1 ) 
 - . append ( " " ) 
 - . toString ( ) ; 
 - } 
 - } 
 - 
 - interface Foo { 
 - 
 - } 
 - 
 - interface Bar { 
 - 
 - } 
 - 
 - class FooException extends Exception { 
 - 	 
 - } 
 - 
 - class BarException extends Exception { 
 - 	 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputSimple . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputSimple . java 
 deleted file mode 100644 
 index 073be36 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputSimple . java 
 + + + / dev / null 
 @ @ - 1 , 225 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : Feb - 2001 
 - / / Ignore error 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 - import java . io . * ; 
 - / * * 
 - * Contains simple mistakes : 
 - * - Long lines 
 - * - Tabs 
 - * - Format of variables and parameters 
 - * - Order of modifiers 
 - * @ author Oliver Burn 
 - * * / 
 - final class InputSimple 
 - { 
 - / / Long line - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - / / Contains a tab - > 	 < - 
 - / / Contains trailing whitespace - > 
 - 
 - / / Name format tests 
 - / / 
 - / * * Invalid format * * / 
 - public static final int badConstant = 2 ; 
 - / * * Valid format * * / 
 - public static final int MAX _ ROWS = 2 ; 
 - 
 - / * * Invalid format * * / 
 - private static int badStatic = 2 ; 
 - / * * Valid format * * / 
 - private static int sNumCreated = 0 ; 
 - 
 - / * * Invalid format * * / 
 - private int badMember = 2 ; 
 - / * * Valid format * * / 
 - private int mNumCreated1 = 0 ; 
 - / * * Valid format * * / 
 - protected int mNumCreated2 = 0 ; 
 - 
 - / * * commas are wrong * * / 
 - private int [ ] mInts = new int [ ] { 1 , 2 , 3 , 
 - 4 } ; 
 - 
 - / / 
 - / / Accessor tests 
 - / / 
 - / * * should be private * * / 
 - public static int sTest1 ; 
 - / * * should be private * * / 
 - protected static int sTest3 ; 
 - / * * should be private * * / 
 - static int sTest2 ; 
 - 
 - / * * should be private * * / 
 - int mTest1 ; 
 - / * * should be private * * / 
 - public int mTest2 ; 
 - 
 - / / 
 - / / Parameter name format tests 
 - / / 
 - 
 - / * * 
 - * @ return hack 
 - * @ param badFormat1 bad format 
 - * @ param badFormat2 bad format 
 - * @ param badFormat3 bad format 
 - * @ throws java . lang . Exception abc 
 - * * / 
 - int test1 ( int badFormat1 , int badFormat2 , 
 - final int badFormat3 ) 
 - throws java . lang . Exception 
 - { 
 - return 0 ; 
 - } 
 - 
 - / * * method that is 20 lines long * * / 
 - private void longMethod ( ) 
 - { 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - } 
 - 
 - / * * constructor that is 10 lines long * * / 
 - private InputSimple ( ) 
 - { 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - / / a line 
 - } 
 - 
 - / * * test local variables * / 
 - private void localVariables ( ) 
 - { 
 - / / normal decl 
 - int abc = 0 ; 
 - int ABC = 0 ; 
 - 
 - / / final decls 
 - final int cde = 0 ; 
 - final int CDE = 0 ; 
 - 
 - / / decl in for loop init statement 
 - for ( int k = 0 ; k < 1 ; k + + ) 
 - { 
 - String innerBlockVariable = " " ; 
 - } 
 - for ( int I = 0 ; I < 1 ; I + + ) 
 - { 
 - String InnerBlockVariable = " " ; 
 - } 
 - } 
 - 
 - / * * test method pattern * / 
 - void ALL _ UPPERCASE _ METHOD ( ) 
 - { 
 - } 
 - 
 - / * * test illegal constant * * / 
 - private static final int BAD _ _ NAME = 3 ; 
 - 
 - / / A very , very long line that is OK because it matches the regexp " ^ . * is OK . * regexp . * $ " 
 - / / long line that has a tab - > 	 < - and would be OK if tab counted as 1 char 
 - / / tabs that count as one char because of their position - > 	 < - - > 	 < - , OK 
 - 
 - / * * some lines to test the error column after tabs * / 
 - void errorColumnAfterTabs ( ) 
 - { 
 - / / with tab - width 8 all statements below start at the same column , 
 - / / with different combinations of ' ' and ' \ t ' before the statement 
 - int tab0 = 1 ; 
 - 	 int tab1 = 1 ; 
 - 	 int tab2 = 1 ; 
 - 	 	 int tab3 = 1 ; 
 - 	 	 int tab4 = 1 ; 
 - 	 int tab5 = 1 ; 
 - } 
 - 
 - / / FIXME : 
 - / * FIXME : a 
 - * FIXME : 
 - * TODO 
 - * / 
 - / * NOTHING * / 
 - / * YES * / / * FIXME : x * / / * YES ! ! * / 
 - 
 - / * * test long comments * * / 
 - void veryLong ( ) 
 - { 
 - / * 
 - blah blah blah blah 
 - blah blah blah blah 
 - blah blah blah blah 
 - blah blah blah blah 
 - blah blah blah blah 
 - blah blah blah blah 
 - blah blah blah blah 
 - blah blah blah blah 
 - blah blah blah blah 
 - blah blah blah blah 
 - blah blah blah blah 
 - blah blah blah blah 
 - blah blah blah blah 
 - blah blah blah blah 
 - blah blah blah blah 
 - enough talk * / 
 - } 
 - 
 - / * * 
 - * @ see to lazy to document all args . Testing excessive # args 
 - * * / 
 - void toManyArgs ( int aArg1 , int aArg2 , int aArg3 , int aArg4 , int aArg5 , 
 - int aArg6 , int aArg7 , int aArg8 , int aArg9 ) 
 - { 
 - } 
 - } 
 - 
 - / * * Test class for variable naming in for each clauses . * / 
 - class InputSimple2 
 - { 
 - / * * Some more Javadoc . * / 
 - public void doSomething ( ) 
 - { 
 - / / " O " should be named " o " 
 - for ( Object O : new java . util . ArrayList ( ) ) 
 - { 
 - 
 - } 
 - } 
 - } 
 - 
 - / * * Test enum for member naming check * / 
 - enum MyEnum1 
 - { 
 - / * * ABC constant * / 
 - ABC , 
 - 
 - / * * XYZ constant * / 
 - XYZ ; 
 - 
 - / * * Should be mSomeMemeber * / 
 - private int someMember ; 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAfter . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAfter . java 
 deleted file mode 100644 
 index 8e49855 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / InputWhitespaceAfter . java 
 + + + / dev / null 
 @ @ - 1 , 67 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 - 
 - public class InputWhitespaceAfter { 
 - 
 - boolean condition ( ) { 
 - return false ; 
 - } 
 - 
 - void testIfElse ( ) { 
 - / / Valid 
 - if ( condition ( ) ) { 
 - testIfElse ( ) ; 
 - } else { 
 - testIfElse ( ) ; 
 - } 
 - 
 - / / Invalid 
 - if ( condition ( ) ) { / / violation 
 - testIfElse ( ) ; 
 - } else { 
 - testIfElse ( ) ; 
 - } 
 - 
 - / / Invalid 
 - if ( condition ( ) ) { 
 - testIfElse ( ) ; 
 - } else { / / violation 
 - testIfElse ( ) ; 
 - } 
 - } 
 - 
 - void testWhile ( ) { 
 - / / Valid 
 - while ( condition ( ) ) { 
 - testWhile ( ) ; 
 - } 
 - 
 - / / Invalid 
 - while ( condition ( ) ) { / / violation 
 - testWhile ( ) ; 
 - } 
 - } 
 - 
 - void testFor ( ) { 
 - / / Valid 
 - for ( int i = 0 ; i < 5 ; i + + ) { 
 - testFor ( ) ; 
 - } 
 - 
 - / / Invalid 
 - for ( int i = 0 ; i < 5 ; i + + ) { / / violation 
 - testFor ( ) ; 
 - } 
 - } 
 - 
 - void testDo ( ) { 
 - / / Valid 
 - do { 
 - testDo ( ) ; 
 - } while ( condition ( ) ) ; 
 - 
 - / / Invalid 
 - do { / / violation 
 - testDo ( ) ; 
 - } while ( condition ( ) ) ; 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / operatorwrap / InputOperatorWrap . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / operatorwrap / InputOperatorWrap . java 
 index 3b457bc . . c1f3feb 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / operatorwrap / InputOperatorWrap . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / operatorwrap / InputOperatorWrap . java 
 @ @ - 2 , 7 + 2 , 7 @ @ 
 / / Test case file for checkstyle . 
 / / Created : 2001 
 / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . operatorwrap ; 
 
 import java . util . Arrays ; 
 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / operatorwrap / InputOperatorWrapSeparatorAndInterfaces . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / operatorwrap / InputOperatorWrapSeparatorAndInterfaces . java 
 new file mode 100644 
 index 0000000 . . eea429e 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / whitespace / operatorwrap / InputOperatorWrapSeparatorAndInterfaces . java 
 @ @ - 0 , 0 + 1 , 65 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . whitespace . operatorwrap ; 
 + 
 + public class InputOperatorWrapSeparatorAndInterfaces < T extends Foo 
 + & Bar > { 
 + public void goodCase ( ) throws FooException , BarException 
 + { 
 + int i = 0 ; 
 + String s = " ffffooooString " ; 
 + s 
 + . isEmpty ( ) ; / / good wrapping 
 + s . isEmpty ( ) ; 
 + try { 
 + foo ( i , s ) ; 
 + } catch ( FooException | 
 + BarException e ) { } 
 + foo ( i , 
 + s ) ; / / good wrapping 
 + } 
 + public static void foo ( int i , String s ) throws FooException , BarException 
 + { 
 + 
 + } 
 + } 
 + 
 + class badCase < T extends Foo & Bar > { 
 + 
 + 	 
 + public void goodCase ( int . . . aFoo ) throws FooException , BarException 
 + { 
 + String s = " ffffooooString " ; 
 + s . 
 + isEmpty ( ) ; / / bad wrapping 
 + try { 
 + foo ( 1 , s ) ; 
 + } catch ( FooException 
 + | BarException e ) { } 
 + 
 + foo ( 1 
 + , s ) ; / / bad wrapping 
 + int [ ] i ; 
 + } 
 + public static String foo ( int i , String s ) throws FooException , BarException 
 + { 
 + return new StringBuilder ( " " ) 
 + . append ( " " , 0 , 1 ) 
 + . append ( " " ) 
 + . toString ( ) ; 
 + } 
 + } 
 + 
 + interface Foo { 
 + 
 + } 
 + 
 + interface Bar { 
 + 
 + } 
 + 
 + class FooException extends Exception { 
 + 	 
 + } 
 + 
 + class BarException extends Exception { 
 + 	 
 + }

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 7f4a63c . . e63175b 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 822 , 7 + 822 , 7 @ @ 
 < plugin > 
 < groupId > org . apache . maven . plugins < / groupId > 
 < artifactId > maven - failsafe - plugin < / artifactId > 
 - < version > 2 . 19 . 1 < / version > 
 + < version > 2 . 20 < / version > 
 < configuration > 
 < includes > 
 < include > com / google / * * / * . java < / include >
