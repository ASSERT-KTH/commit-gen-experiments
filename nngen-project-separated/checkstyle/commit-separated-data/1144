BLEU SCORE: 0.009055400496876965

TEST MSG: doc : fixed checkstyle download url
GENERATED MSG: cmd instructions were updated to be more user friendly , as nodoby use classpath executions

TEST DIFF (one line): diff - - git a / src / xdocs / cmdline . xml . vm b / src / xdocs / cmdline . xml . vm <nl> index 0f15269 . . a40126c 100644 <nl> - - - a / src / xdocs / cmdline . xml . vm <nl> + + + b / src / xdocs / cmdline . xml . vm <nl> @ @ - 126 , 7 + 126 , 7 @ @ java - D & lt ; property & gt ; = & lt ; value & gt ; \ <nl> < section name = " Download and Run " > <nl> < p > <nl> It is possible to run Checkstyle directly from the JAR file using <nl> - the < code > - jar < / code > option . Download latest < a href = " http : / / iweb . dl . sourceforge . net / project / checkstyle / checkstyle / $ { projectVersion } / checkstyle - $ { projectVersion } - all . jar " > <nl> + the < code > - jar < / code > option . Download latest < a href = " http : / / downloads . sourceforge . net / project / checkstyle / checkstyle / $ { projectVersion } / checkstyle - $ { projectVersion } - all . jar " > <nl> checkstyle - $ { projectVersion } - all . jar < / a > . <nl> An example of run would be : <nl> < source > <nl> @ @ - 139 , 7 + 139 , 7 @ @ java - jar checkstyle - $ { projectVersion } - all . jar - c / google _ checks . xml MyClass . jav <nl> < / p > <nl> < p > <nl> To run < a href = " writingchecks . html # The _ Checkstyle _ SDK _ Gui " > Checkstyle UI viewer < / a > for AST tree directly from the JAR file using <nl> - the < code > - jar < / code > option . Download latest < a href = " http : / / iweb . dl . sourceforge . net / project / checkstyle / checkstyle / $ { projectVersion } / checkstyle - $ { projectVersion } - all . jar " > <nl> + the < code > - jar < / code > option . Download latest < a href = " http : / / downloads . sourceforge . net / project / checkstyle / checkstyle / $ { projectVersion } / checkstyle - $ { projectVersion } - all . jar " > <nl> checkstyle - $ { projectVersion } - all . jar < / a > . <nl> An example of run would be ( path to java file is optional ) : <nl> < source > <nl> @ @ - 178 , 7 + 178 , 7 @ @ java - jar target / checkstyle - X . X - SNAPSHOT - all . jar - c / sun _ checks . xml MyClass . java <nl> < section name = " Usage by Classpath update " > <nl> < p > <nl> The easiest way is to include <nl> - < a href = " http : / / iweb . dl . sourceforge . net / project / checkstyle / checkstyle / $ { projectVersion } / checkstyle - $ { projectVersion } - all . jar " > checkstyle - $ { projectVersion } - all . jar < / a > in the <nl> + < a href = " http : / / downloads . sourceforge . net / project / checkstyle / checkstyle / $ { projectVersion } / checkstyle - $ { projectVersion } - all . jar " > checkstyle - $ { projectVersion } - all . jar < / a > in the <nl> < a href = " http : / / docs . oracle . com / javase / 8 / docs / technotes / tools / windows / classpath . html # sthref10 " > classpath < / a > . Alternatively , you must include the <nl> < code > compile < / code > third party dependencies listed in <nl>
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> index 6408db2 . . 99e923c 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java <nl> @ @ - 24 , 8 + 24 , 44 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> import com . puppycrawl . tools . checkstyle . api . Utils ; <nl> <nl> / * * <nl> - * Checks that the whitespace around the Generic tokens & lt ; and & gt ; are <nl> - * correct to the < i > typical < / i > convention . The convention is not configurable . <nl> + * < p > <nl> + * Checks that the whitespace around the Generic tokens ( angle brackets ) <nl> + * " & lt ; " and " & gt ; " are correct to the < i > typical < / i > convention . <nl> + * The convention is not configurable . <nl> + * < / p > <nl> + * < br / > <nl> + * < p > <nl> + * Left angle bracket ( " & lt ; " ) : <nl> + * < / p > <nl> + * < br / > <nl> + * < ul > <nl> + * < li > should be preceded with whitespace only <nl> + * in generic methods definitions . < / li > <nl> + * < li > should not be preceded with whitespace <nl> + * when it is precede method name or following type name . < / li > <nl> + * < li > should not be followed with whitespace in all cases . < / li > <nl> + * < / ul > <nl> + * < br / > <nl> + * < p > <nl> + * Right angle bracket ( " & gt ; " ) : <nl> + * < / p > <nl> + * < br / > <nl> + * < ul > <nl> + * < li > should not be preceded with whitespace in all cases . < / li > <nl> + * < li > should be followed with whitespace in almost all cases , <nl> + * except diamond operators and when preceding method name . < / li > < / ul > <nl> + * < br / > <nl> + * < p > <nl> + * Examples with correct spacing : <nl> + * < / p > <nl> + * < br / > <nl> + * < pre > <nl> + * public void & lt ; K , V extends Number & gt ; boolean foo ( K , V ) { } / / Generic methods definitions <nl> + * class name & lt ; T1 , T2 , . . . , Tn & gt ; { } / / Generic type definition <nl> + * OrderedPair & lt ; String , Box & lt ; Integer & gt ; & gt ; p ; / / Generic type reference <nl> + * boolean same = Util . & lt ; Integer , String & gt ; compare ( p1 , p2 ) ; / / Generic preceded method name <nl> + * Pair & lt ; Integer , String > p1 = new Pair & lt ; & gt ; ( 1 , " apple " ) ; / / Diamond operator <nl> + * < / pre > <nl> * @ author Oliver Burn <nl> * / <nl> public class GenericWhitespaceCheck extends Check <nl> diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml <nl> index dffdac3 . . 0757de1 100644 <nl> - - - a / src / xdocs / config _ whitespace . xml <nl> + + + b / src / xdocs / config _ whitespace . xml <nl> @ @ - 13 , 26 + 13 , 37 @ @ <nl> < section name = " GenericWhitespace " > <nl> < subsection name = " Description " > <nl> < p > <nl> - Checks that the whitespace around the Generic tokens & lt ; and & gt ; <nl> - is correct to the < i > typical < / i > convention . The convention is not <nl> - configurable . <nl> + Checks that the whitespace around the Generic tokens ( angle brackets ) <nl> + " & lt ; " and " & gt ; " are correct to the < i > typical < / i > convention . <nl> + The convention is not configurable . <nl> < / p > <nl> - <nl> < p > <nl> - For example the following is legal : <nl> + Left angle bracket ( " & lt ; " ) : <nl> < / p > <nl> + < ul > <nl> + < li > should be preceded with whitespace only in generic methods definitions . < / li > <nl> + < li > should not be preceded with whitespace when it is precede method name or following type name . < / li > <nl> + < li > should not be followed with whitespace in all cases . < / li > <nl> + < / ul > <nl> + < p > <nl> + Right angle bracket ( " & gt ; " ) : <nl> + < / p > <nl> + < ul > <nl> + < li > should not be preceded with whitespace in all cases . < / li > <nl> + < li > should be followed with whitespace in almost all cases , except diamond operators and when preceding method name . < / li > <nl> + < / ul > <nl> + < / subsection > <nl> <nl> - < source > <nl> - List & lt ; Integer & gt ; x = new ArrayList & lt ; Integer & gt ; ( ) ; <nl> - List & lt ; List & lt ; Integer & gt ; & gt ; y = new ArrayList & lt ; List & lt ; Integer & gt ; & gt ; ( ) ; <nl> - < / source > <nl> - <nl> + < subsection name = " Examples " > <nl> < p > <nl> - But the following example is not : <nl> + Examples with correct spacing : <nl> < / p > <nl> < source > <nl> - List & lt ; Integer & gt ; x = new ArrayList & lt ; Integer & gt ; ( ) ; <nl> - List & lt ; List & lt ; Integer & gt ; & gt ; y = new ArrayList & lt ; List & lt ; Integer & gt ; & gt ; ( ) ; <nl> + public void & lt ; K , V extends Number & gt ; boolean foo ( K , V ) { } / / Generic methods definitions <nl> + class name & lt ; T1 , T2 , . . . , Tn & gt ; { } / / Generic type definition <nl> + OrderedPair & lt ; String , Box & lt ; Integer & gt ; & gt ; p ; / / Generic type reference <nl> + boolean same = Util . & lt ; Integer , String & gt ; compare ( p1 , p2 ) ; / / Generic preceded method name <nl> + Pair & lt ; Integer , String > p1 = new Pair & lt ; & gt ; ( 1 , " apple " ) ; / / Diamond operator <nl> < / source > <nl> < / subsection > <nl>

TEST DIFF:
diff - - git a / src / xdocs / cmdline . xml . vm b / src / xdocs / cmdline . xml . vm 
 index 0f15269 . . a40126c 100644 
 - - - a / src / xdocs / cmdline . xml . vm 
 + + + b / src / xdocs / cmdline . xml . vm 
 @ @ - 126 , 7 + 126 , 7 @ @ java - D & lt ; property & gt ; = & lt ; value & gt ; \ 
 < section name = " Download and Run " > 
 < p > 
 It is possible to run Checkstyle directly from the JAR file using 
 - the < code > - jar < / code > option . Download latest < a href = " http : / / iweb . dl . sourceforge . net / project / checkstyle / checkstyle / $ { projectVersion } / checkstyle - $ { projectVersion } - all . jar " > 
 + the < code > - jar < / code > option . Download latest < a href = " http : / / downloads . sourceforge . net / project / checkstyle / checkstyle / $ { projectVersion } / checkstyle - $ { projectVersion } - all . jar " > 
 checkstyle - $ { projectVersion } - all . jar < / a > . 
 An example of run would be : 
 < source > 
 @ @ - 139 , 7 + 139 , 7 @ @ java - jar checkstyle - $ { projectVersion } - all . jar - c / google _ checks . xml MyClass . jav 
 < / p > 
 < p > 
 To run < a href = " writingchecks . html # The _ Checkstyle _ SDK _ Gui " > Checkstyle UI viewer < / a > for AST tree directly from the JAR file using 
 - the < code > - jar < / code > option . Download latest < a href = " http : / / iweb . dl . sourceforge . net / project / checkstyle / checkstyle / $ { projectVersion } / checkstyle - $ { projectVersion } - all . jar " > 
 + the < code > - jar < / code > option . Download latest < a href = " http : / / downloads . sourceforge . net / project / checkstyle / checkstyle / $ { projectVersion } / checkstyle - $ { projectVersion } - all . jar " > 
 checkstyle - $ { projectVersion } - all . jar < / a > . 
 An example of run would be ( path to java file is optional ) : 
 < source > 
 @ @ - 178 , 7 + 178 , 7 @ @ java - jar target / checkstyle - X . X - SNAPSHOT - all . jar - c / sun _ checks . xml MyClass . java 
 < section name = " Usage by Classpath update " > 
 < p > 
 The easiest way is to include 
 - < a href = " http : / / iweb . dl . sourceforge . net / project / checkstyle / checkstyle / $ { projectVersion } / checkstyle - $ { projectVersion } - all . jar " > checkstyle - $ { projectVersion } - all . jar < / a > in the 
 + < a href = " http : / / downloads . sourceforge . net / project / checkstyle / checkstyle / $ { projectVersion } / checkstyle - $ { projectVersion } - all . jar " > checkstyle - $ { projectVersion } - all . jar < / a > in the 
 < a href = " http : / / docs . oracle . com / javase / 8 / docs / technotes / tools / windows / classpath . html # sthref10 " > classpath < / a > . Alternatively , you must include the 
 < code > compile < / code > third party dependencies listed in 


NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 index 6408db2 . . 99e923c 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / whitespace / GenericWhitespaceCheck . java 
 @ @ - 24 , 8 + 24 , 44 @ @ import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 import com . puppycrawl . tools . checkstyle . api . Utils ; 
 
 / * * 
 - * Checks that the whitespace around the Generic tokens & lt ; and & gt ; are 
 - * correct to the < i > typical < / i > convention . The convention is not configurable . 
 + * < p > 
 + * Checks that the whitespace around the Generic tokens ( angle brackets ) 
 + * " & lt ; " and " & gt ; " are correct to the < i > typical < / i > convention . 
 + * The convention is not configurable . 
 + * < / p > 
 + * < br / > 
 + * < p > 
 + * Left angle bracket ( " & lt ; " ) : 
 + * < / p > 
 + * < br / > 
 + * < ul > 
 + * < li > should be preceded with whitespace only 
 + * in generic methods definitions . < / li > 
 + * < li > should not be preceded with whitespace 
 + * when it is precede method name or following type name . < / li > 
 + * < li > should not be followed with whitespace in all cases . < / li > 
 + * < / ul > 
 + * < br / > 
 + * < p > 
 + * Right angle bracket ( " & gt ; " ) : 
 + * < / p > 
 + * < br / > 
 + * < ul > 
 + * < li > should not be preceded with whitespace in all cases . < / li > 
 + * < li > should be followed with whitespace in almost all cases , 
 + * except diamond operators and when preceding method name . < / li > < / ul > 
 + * < br / > 
 + * < p > 
 + * Examples with correct spacing : 
 + * < / p > 
 + * < br / > 
 + * < pre > 
 + * public void & lt ; K , V extends Number & gt ; boolean foo ( K , V ) { } / / Generic methods definitions 
 + * class name & lt ; T1 , T2 , . . . , Tn & gt ; { } / / Generic type definition 
 + * OrderedPair & lt ; String , Box & lt ; Integer & gt ; & gt ; p ; / / Generic type reference 
 + * boolean same = Util . & lt ; Integer , String & gt ; compare ( p1 , p2 ) ; / / Generic preceded method name 
 + * Pair & lt ; Integer , String > p1 = new Pair & lt ; & gt ; ( 1 , " apple " ) ; / / Diamond operator 
 + * < / pre > 
 * @ author Oliver Burn 
 * / 
 public class GenericWhitespaceCheck extends Check 
 diff - - git a / src / xdocs / config _ whitespace . xml b / src / xdocs / config _ whitespace . xml 
 index dffdac3 . . 0757de1 100644 
 - - - a / src / xdocs / config _ whitespace . xml 
 + + + b / src / xdocs / config _ whitespace . xml 
 @ @ - 13 , 26 + 13 , 37 @ @ 
 < section name = " GenericWhitespace " > 
 < subsection name = " Description " > 
 < p > 
 - Checks that the whitespace around the Generic tokens & lt ; and & gt ; 
 - is correct to the < i > typical < / i > convention . The convention is not 
 - configurable . 
 + Checks that the whitespace around the Generic tokens ( angle brackets ) 
 + " & lt ; " and " & gt ; " are correct to the < i > typical < / i > convention . 
 + The convention is not configurable . 
 < / p > 
 - 
 < p > 
 - For example the following is legal : 
 + Left angle bracket ( " & lt ; " ) : 
 < / p > 
 + < ul > 
 + < li > should be preceded with whitespace only in generic methods definitions . < / li > 
 + < li > should not be preceded with whitespace when it is precede method name or following type name . < / li > 
 + < li > should not be followed with whitespace in all cases . < / li > 
 + < / ul > 
 + < p > 
 + Right angle bracket ( " & gt ; " ) : 
 + < / p > 
 + < ul > 
 + < li > should not be preceded with whitespace in all cases . < / li > 
 + < li > should be followed with whitespace in almost all cases , except diamond operators and when preceding method name . < / li > 
 + < / ul > 
 + < / subsection > 
 
 - < source > 
 - List & lt ; Integer & gt ; x = new ArrayList & lt ; Integer & gt ; ( ) ; 
 - List & lt ; List & lt ; Integer & gt ; & gt ; y = new ArrayList & lt ; List & lt ; Integer & gt ; & gt ; ( ) ; 
 - < / source > 
 - 
 + < subsection name = " Examples " > 
 < p > 
 - But the following example is not : 
 + Examples with correct spacing : 
 < / p > 
 < source > 
 - List & lt ; Integer & gt ; x = new ArrayList & lt ; Integer & gt ; ( ) ; 
 - List & lt ; List & lt ; Integer & gt ; & gt ; y = new ArrayList & lt ; List & lt ; Integer & gt ; & gt ; ( ) ; 
 + public void & lt ; K , V extends Number & gt ; boolean foo ( K , V ) { } / / Generic methods definitions 
 + class name & lt ; T1 , T2 , . . . , Tn & gt ; { } / / Generic type definition 
 + OrderedPair & lt ; String , Box & lt ; Integer & gt ; & gt ; p ; / / Generic type reference 
 + boolean same = Util . & lt ; Integer , String & gt ; compare ( p1 , p2 ) ; / / Generic preceded method name 
 + Pair & lt ; Integer , String > p1 = new Pair & lt ; & gt ; ( 1 , " apple " ) ; / / Diamond operator 
 < / source > 
 < / subsection > 

