BLEU SCORE: 0.033864985683445356

TEST MSG: Issue # 3239 : fixed checks that fail on new receiver parameter
GENERATED MSG: Use constants for arrays initialized with zero length . # 1555

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> index 18bf732 . . 9048686 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java <nl> @ @ - 176 , 7 + 176 , 8 @ @ public class FinalParametersCheck extends AbstractCheck { <nl> * @ param param parameter to check . <nl> * / <nl> private void checkParam ( final DetailAST param ) { <nl> - if ( ! param . branchContains ( TokenTypes . FINAL ) & & ! isIgnoredParam ( param ) ) { <nl> + if ( ! param . branchContains ( TokenTypes . FINAL ) & & ! isIgnoredParam ( param ) <nl> + & & ! CheckUtils . isReceiverParameter ( param ) ) { <nl> final DetailAST paramName = param . findFirstToken ( TokenTypes . IDENT ) ; <nl> final DetailAST firstNode = CheckUtils . getFirstNode ( param ) ; <nl> log ( firstNode . getLineNo ( ) , firstNode . getColumnNo ( ) , <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> index 60928a1 . . f02ddda 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . Scope ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> <nl> @ @ - 299 , 6 + 300 , 7 @ @ public class HiddenFieldCheck <nl> * / <nl> private void processVariable ( DetailAST ast ) { <nl> if ( ! ScopeUtils . isInInterfaceOrAnnotationBlock ( ast ) <nl> + & & ! CheckUtils . isReceiverParameter ( ast ) <nl> & & ( ScopeUtils . isLocalVariableDef ( ast ) <nl> | | ast . getType ( ) = = TokenTypes . PARAMETER _ DEF ) ) { <nl> / / local variable or parameter . Does it shadow a field ? <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java <nl> index 3f3871a . . f688a93 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import com . google . common . collect . Sets ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 236 , 7 + 237 , 8 @ @ public final class ParameterAssignmentCheck extends AbstractCheck { <nl> ast . findFirstToken ( TokenTypes . PARAMETER _ DEF ) ; <nl> <nl> while ( parameterDefAST ! = null ) { <nl> - if ( parameterDefAST . getType ( ) = = TokenTypes . PARAMETER _ DEF ) { <nl> + if ( parameterDefAST . getType ( ) = = TokenTypes . PARAMETER _ DEF <nl> + & & ! CheckUtils . isReceiverParameter ( parameterDefAST ) ) { <nl> final DetailAST param = <nl> parameterDefAST . findFirstToken ( TokenTypes . IDENT ) ; <nl> parameterNames . add ( param . getText ( ) ) ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> index fcfb327 . . 9de3c1f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import com . google . common . collect . Sets ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; <nl> <nl> / * * <nl> @ @ - 321 , 8 + 322 , 10 @ @ public class RequireThisCheck extends AbstractCheck { <nl> collectVariableDeclarations ( ast , frame ) ; <nl> break ; <nl> case TokenTypes . PARAMETER _ DEF : <nl> - final DetailAST parameterIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> - frame . addIdent ( parameterIdent ) ; <nl> + if ( ! CheckUtils . isReceiverParameter ( ast ) ) { <nl> + final DetailAST parameterIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; <nl> + frame . addIdent ( parameterIdent ) ; <nl> + } <nl> break ; <nl> case TokenTypes . CLASS _ DEF : <nl> case TokenTypes . INTERFACE _ DEF : <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> index fd09865 . . 275232f 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import com . google . common . collect . Sets ; <nl> import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; <nl> import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> / * * <nl> @ @ - 220 , 7 + 221 , 7 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { <nl> private boolean isIgnoreSituation ( DetailAST ast ) { <nl> final DetailAST modifiers = ast . getFirstChild ( ) ; <nl> <nl> - boolean result = false ; <nl> + final boolean result ; <nl> if ( ast . getType ( ) = = TokenTypes . VARIABLE _ DEF ) { <nl> if ( ( ignoreFinal | | ignoreStatic ) <nl> & & isInterfaceDeclaration ( ast ) ) { <nl> @ @ - 238 , 6 + 239 , 9 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { <nl> result = ignoreOverriddenMethods <nl> & & hasOverrideAnnotation ( modifiers ) ; <nl> } <nl> + else { <nl> + result = CheckUtils . isReceiverParameter ( ast ) ; <nl> + } <nl> return result ; <nl> } <nl> <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> index 2e2083a . . 9881161 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> import com . google . common . base . Optional ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; <nl> <nl> / * * <nl> * < p > <nl> @ @ - 105 , 7 + 106 , 8 @ @ public class ParameterNameCheck <nl> protected boolean mustCheckName ( DetailAST ast ) { <nl> boolean checkName = true ; <nl> if ( ignoreOverridden & & isOverriddenMethod ( ast ) <nl> - | | ast . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ CATCH ) { <nl> + | | ast . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ CATCH <nl> + | | CheckUtils . isReceiverParameter ( ast ) ) { <nl> checkName = false ; <nl> } <nl> return checkName ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java <nl> index c72fc75 . . eb2627d 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java <nl> @ @ - 410 , 4 + 410 , 19 @ @ public final class CheckUtils { <nl> } <nl> return returnValue ; <nl> } <nl> + <nl> + / * * <nl> + * Checks whether a parameter is a receiver . <nl> + * <nl> + * @ param parameterDefAst the parameter node . <nl> + * @ return true if the parameter is a receiver . <nl> + * / <nl> + public static boolean isReceiverParameter ( DetailAST parameterDefAst ) { <nl> + boolean returnValue = false ; <nl> + if ( parameterDefAst . getType ( ) = = TokenTypes . PARAMETER _ DEF <nl> + & & parameterDefAst . findFirstToken ( TokenTypes . IDENT ) = = null ) { <nl> + returnValue = parameterDefAst . branchContains ( TokenTypes . LITERAL _ THIS ) ; <nl> + } <nl> + return returnValue ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheckTest . java <nl> index c58165e . . f9acbc6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheckTest . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class FinalParametersCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> @ @ - 127 , 4 + 128 , 12 @ @ public class FinalParametersCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> verify ( checkConfig , getPath ( " InputFinalParametersPrimitiveTypes . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testRecieverParameters ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( FinalParametersCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputFinalParametersReceiver . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java <nl> index f2d5abf . . 0043dc1 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class HiddenFieldCheckTest <nl> extends BaseCheckTestSupport { <nl> @ @ - 402 , 4 + 403 , 11 @ @ public class HiddenFieldCheckTest <nl> } ; <nl> verify ( checkConfig , getPath ( " InputHiddenField . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testReceiverParameter ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputHiddenFieldReceiver . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java <nl> index cf6ef97 . . b73eb57 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> import com . puppycrawl . tools . checkstyle . api . DetailAST ; <nl> import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> <nl> public class ParameterAssignmentCheckTest extends BaseCheckTestSupport { <nl> @ Override <nl> @ @ - 55 , 6 + 56 , 13 @ @ public class ParameterAssignmentCheckTest extends BaseCheckTestSupport { <nl> } <nl> <nl> @ Test <nl> + public void testReceiverParameter ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( ParameterAssignmentCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputParameterAssignmentReceiver . java " ) , expected ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testTokensNotNull ( ) { <nl> final ParameterAssignmentCheck check = new ParameterAssignmentCheck ( ) ; <nl> Assert . assertNotNull ( check . getAcceptableTokens ( ) ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> index 139d577 . . 6c2af23 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java <nl> @ @ - 240 , 4 + 240 , 11 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { <nl> } ; <nl> verify ( checkConfig , getPath ( " InputValidateOnlyOverlappingTrue . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testReceiverParameter ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( RequireThisCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputRequireThisReceiver . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> index 58b3718 . . 44e6b29 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java <nl> @ @ - 319 , 4 + 319 , 13 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { <nl> private String getWarningMessage ( String typeName , int expectedCapitalCount ) { <nl> return getCheckMessage ( MSG _ KEY , typeName , expectedCapitalCount ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testReceiver ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = <nl> + createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputAbbreviationAsWordReceiver . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> index 0fd2d47 . . b356014 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java <nl> @ @ - 147 , 4 + 147 , 11 @ @ public class ParameterNameCheckTest <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , getPath ( " InputOverrideAnnotationNoNPE . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testReceiverParameter ( ) throws Exception { <nl> + final DefaultConfiguration checkConfig = createCheckConfig ( ParameterNameCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputParameterNameReceiver . java " ) , expected ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputFinalParametersReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputFinalParametersReceiver . java <nl> new file mode 100644 <nl> index 0000000 . . cee4824 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputFinalParametersReceiver . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks ; <nl> + <nl> + public class InputFinalParametersReceiver { <nl> + public void foo4 ( InputFinalParametersReceiver this ) { } <nl> + <nl> + private class Inner { <nl> + public Inner ( InputFinalParametersReceiver InputFinalParametersReceiver . this ) { } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReceiver . java <nl> new file mode 100644 <nl> index 0000000 . . 6973fbf <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReceiver . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputHiddenFieldReceiver { <nl> + public void foo4 ( InputHiddenFieldReceiver this ) { } <nl> + <nl> + private class Inner { <nl> + public Inner ( InputHiddenFieldReceiver InputHiddenFieldReceiver . this ) { } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputParameterAssignmentReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputParameterAssignmentReceiver . java <nl> new file mode 100644 <nl> index 0000000 . . f48afd2 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputParameterAssignmentReceiver . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputParameterAssignmentReceiver { <nl> + public void foo4 ( InputParameterAssignmentReceiver this ) { } <nl> + <nl> + private class Inner { <nl> + public Inner ( InputParameterAssignmentReceiver InputParameterAssignmentReceiver . this ) { } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThisReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThisReceiver . java <nl> new file mode 100644 <nl> index 0000000 . . 8ccffa9 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThisReceiver . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputRequireThisReceiver { <nl> + public void foo4 ( InputRequireThisReceiver this ) { } <nl> + <nl> + private class Inner { <nl> + public Inner ( InputRequireThisReceiver InputRequireThisReceiver . this ) { } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordReceiver . java <nl> new file mode 100644 <nl> index 0000000 . . b71c51b <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordReceiver . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + public class InputAbbreviationAsWordReceiver { <nl> + public void foo4 ( InputAbbreviationAsWordReceiver this ) { } <nl> + <nl> + private class Inner { <nl> + public Inner ( InputAbbreviationAsWordReceiver InputAbbreviationAsWordReceiver . this ) { } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputParameterNameReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputParameterNameReceiver . java <nl> new file mode 100644 <nl> index 0000000 . . 0763260 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputParameterNameReceiver . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . naming ; <nl> + <nl> + public class InputParameterNameReceiver { <nl> + public void foo4 ( InputParameterNameReceiver this ) { } <nl> + <nl> + private class Inner { <nl> + public Inner ( InputParameterNameReceiver InputParameterNameReceiver . this ) { } <nl> + } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> index 158ef62 . . 8730da8 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java <nl> @ @ - 341 , 14 + 341 , 14 @ @ public class ImportOrderCheck <nl> } <nl> <nl> final boolean isStaticAndNotLastImport = isStatic & & ! lastImportStatic ; <nl> - final boolean isNotStaticAndLastImport = ! isStatic & & lastImportStatic ; <nl> + final boolean isLastImportAndNonStatic = lastImportStatic & & ! isStatic ; <nl> final ImportOrderOption abstractOption = getAbstractOption ( ) ; <nl> <nl> / / using set of IF instead of SWITCH to analyze Enum options to satisfy coverage . <nl> / / https : / / github . com / checkstyle / checkstyle / issues / 1387 <nl> if ( abstractOption = = ImportOrderOption . TOP ) { <nl> <nl> - if ( isNotStaticAndLastImport ) { <nl> + if ( isLastImportAndNonStatic ) { <nl> lastGroup = Integer . MIN _ VALUE ; <nl> lastImport = " " ; <nl> } <nl> @ @ - 361 , 7 + 361 , 7 @ @ public class ImportOrderCheck <nl> lastGroup = Integer . MIN _ VALUE ; <nl> lastImport = " " ; <nl> } <nl> - doVisitToken ( ident , isStatic , isNotStaticAndLastImport ) ; <nl> + doVisitToken ( ident , isStatic , isLastImportAndNonStatic ) ; <nl> <nl> } <nl> else if ( abstractOption = = ImportOrderOption . ABOVE ) { <nl> @ @ - 370 , 7 + 370 , 7 @ @ public class ImportOrderCheck <nl> <nl> } <nl> else if ( abstractOption = = ImportOrderOption . UNDER ) { <nl> - doVisitToken ( ident , isStatic , isNotStaticAndLastImport ) ; <nl> + doVisitToken ( ident , isStatic , isLastImportAndNonStatic ) ; <nl> <nl> } <nl> else if ( abstractOption = = ImportOrderOption . INFLOW ) {

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 index 18bf732 . . 9048686 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheck . java 
 @ @ - 176 , 7 + 176 , 8 @ @ public class FinalParametersCheck extends AbstractCheck { 
 * @ param param parameter to check . 
 * / 
 private void checkParam ( final DetailAST param ) { 
 - if ( ! param . branchContains ( TokenTypes . FINAL ) & & ! isIgnoredParam ( param ) ) { 
 + if ( ! param . branchContains ( TokenTypes . FINAL ) & & ! isIgnoredParam ( param ) 
 + & & ! CheckUtils . isReceiverParameter ( param ) ) { 
 final DetailAST paramName = param . findFirstToken ( TokenTypes . IDENT ) ; 
 final DetailAST firstNode = CheckUtils . getFirstNode ( param ) ; 
 log ( firstNode . getLineNo ( ) , firstNode . getColumnNo ( ) , 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 index 60928a1 . . f02ddda 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheck . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . Scope ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 
 @ @ - 299 , 6 + 300 , 7 @ @ public class HiddenFieldCheck 
 * / 
 private void processVariable ( DetailAST ast ) { 
 if ( ! ScopeUtils . isInInterfaceOrAnnotationBlock ( ast ) 
 + & & ! CheckUtils . isReceiverParameter ( ast ) 
 & & ( ScopeUtils . isLocalVariableDef ( ast ) 
 | | ast . getType ( ) = = TokenTypes . PARAMETER _ DEF ) ) { 
 / / local variable or parameter . Does it shadow a field ? 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java 
 index 3f3871a . . f688a93 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheck . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import com . google . common . collect . Sets ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; 
 
 / * * 
 * < p > 
 @ @ - 236 , 7 + 237 , 8 @ @ public final class ParameterAssignmentCheck extends AbstractCheck { 
 ast . findFirstToken ( TokenTypes . PARAMETER _ DEF ) ; 
 
 while ( parameterDefAST ! = null ) { 
 - if ( parameterDefAST . getType ( ) = = TokenTypes . PARAMETER _ DEF ) { 
 + if ( parameterDefAST . getType ( ) = = TokenTypes . PARAMETER _ DEF 
 + & & ! CheckUtils . isReceiverParameter ( parameterDefAST ) ) { 
 final DetailAST param = 
 parameterDefAST . findFirstToken ( TokenTypes . IDENT ) ; 
 parameterNames . add ( param . getText ( ) ) ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 index fcfb327 . . 9de3c1f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheck . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import com . google . common . collect . Sets ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . ScopeUtils ; 
 
 / * * 
 @ @ - 321 , 8 + 322 , 10 @ @ public class RequireThisCheck extends AbstractCheck { 
 collectVariableDeclarations ( ast , frame ) ; 
 break ; 
 case TokenTypes . PARAMETER _ DEF : 
 - final DetailAST parameterIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 - frame . addIdent ( parameterIdent ) ; 
 + if ( ! CheckUtils . isReceiverParameter ( ast ) ) { 
 + final DetailAST parameterIdent = ast . findFirstToken ( TokenTypes . IDENT ) ; 
 + frame . addIdent ( parameterIdent ) ; 
 + } 
 break ; 
 case TokenTypes . CLASS _ DEF : 
 case TokenTypes . INTERFACE _ DEF : 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 index fd09865 . . 275232f 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheck . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import com . google . common . collect . Sets ; 
 import com . puppycrawl . tools . checkstyle . api . AbstractCheck ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; 
 import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 / * * 
 @ @ - 220 , 7 + 221 , 7 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { 
 private boolean isIgnoreSituation ( DetailAST ast ) { 
 final DetailAST modifiers = ast . getFirstChild ( ) ; 
 
 - boolean result = false ; 
 + final boolean result ; 
 if ( ast . getType ( ) = = TokenTypes . VARIABLE _ DEF ) { 
 if ( ( ignoreFinal | | ignoreStatic ) 
 & & isInterfaceDeclaration ( ast ) ) { 
 @ @ - 238 , 6 + 239 , 9 @ @ public class AbbreviationAsWordInNameCheck extends AbstractCheck { 
 result = ignoreOverriddenMethods 
 & & hasOverrideAnnotation ( modifiers ) ; 
 } 
 + else { 
 + result = CheckUtils . isReceiverParameter ( ast ) ; 
 + } 
 return result ; 
 } 
 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 index 2e2083a . . 9881161 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheck . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . naming ; 
 import com . google . common . base . Optional ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CheckUtils ; 
 
 / * * 
 * < p > 
 @ @ - 105 , 7 + 106 , 8 @ @ public class ParameterNameCheck 
 protected boolean mustCheckName ( DetailAST ast ) { 
 boolean checkName = true ; 
 if ( ignoreOverridden & & isOverriddenMethod ( ast ) 
 - | | ast . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ CATCH ) { 
 + | | ast . getParent ( ) . getType ( ) = = TokenTypes . LITERAL _ CATCH 
 + | | CheckUtils . isReceiverParameter ( ast ) ) { 
 checkName = false ; 
 } 
 return checkName ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java 
 index c72fc75 . . eb2627d 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / utils / CheckUtils . java 
 @ @ - 410 , 4 + 410 , 19 @ @ public final class CheckUtils { 
 } 
 return returnValue ; 
 } 
 + 
 + / * * 
 + * Checks whether a parameter is a receiver . 
 + * 
 + * @ param parameterDefAst the parameter node . 
 + * @ return true if the parameter is a receiver . 
 + * / 
 + public static boolean isReceiverParameter ( DetailAST parameterDefAst ) { 
 + boolean returnValue = false ; 
 + if ( parameterDefAst . getType ( ) = = TokenTypes . PARAMETER _ DEF 
 + & & parameterDefAst . findFirstToken ( TokenTypes . IDENT ) = = null ) { 
 + returnValue = parameterDefAst . branchContains ( TokenTypes . LITERAL _ THIS ) ; 
 + } 
 + return returnValue ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheckTest . java 
 index c58165e . . f9acbc6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FinalParametersCheckTest . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class FinalParametersCheckTest extends BaseCheckTestSupport { 
 @ Override 
 @ @ - 127 , 4 + 128 , 12 @ @ public class FinalParametersCheckTest extends BaseCheckTestSupport { 
 } ; 
 verify ( checkConfig , getPath ( " InputFinalParametersPrimitiveTypes . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testRecieverParameters ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( FinalParametersCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputFinalParametersReceiver . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java 
 index f2d5abf . . 0043dc1 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / HiddenFieldCheckTest . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class HiddenFieldCheckTest 
 extends BaseCheckTestSupport { 
 @ @ - 402 , 4 + 403 , 11 @ @ public class HiddenFieldCheckTest 
 } ; 
 verify ( checkConfig , getPath ( " InputHiddenField . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testReceiverParameter ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( HiddenFieldCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputHiddenFieldReceiver . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java 
 index cf6ef97 . . b73eb57 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / ParameterAssignmentCheckTest . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 import com . puppycrawl . tools . checkstyle . api . DetailAST ; 
 import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 
 public class ParameterAssignmentCheckTest extends BaseCheckTestSupport { 
 @ Override 
 @ @ - 55 , 6 + 56 , 13 @ @ public class ParameterAssignmentCheckTest extends BaseCheckTestSupport { 
 } 
 
 @ Test 
 + public void testReceiverParameter ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( ParameterAssignmentCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputParameterAssignmentReceiver . java " ) , expected ) ; 
 + } 
 + 
 + @ Test 
 public void testTokensNotNull ( ) { 
 final ParameterAssignmentCheck check = new ParameterAssignmentCheck ( ) ; 
 Assert . assertNotNull ( check . getAcceptableTokens ( ) ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 index 139d577 . . 6c2af23 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / RequireThisCheckTest . java 
 @ @ - 240 , 4 + 240 , 11 @ @ public class RequireThisCheckTest extends BaseCheckTestSupport { 
 } ; 
 verify ( checkConfig , getPath ( " InputValidateOnlyOverlappingTrue . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testReceiverParameter ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( RequireThisCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputRequireThisReceiver . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 index 58b3718 . . 44e6b29 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / AbbreviationAsWordInNameCheckTest . java 
 @ @ - 319 , 4 + 319 , 13 @ @ public class AbbreviationAsWordInNameCheckTest extends BaseCheckTestSupport { 
 private String getWarningMessage ( String typeName , int expectedCapitalCount ) { 
 return getCheckMessage ( MSG _ KEY , typeName , expectedCapitalCount ) ; 
 } 
 + 
 + @ Test 
 + public void testReceiver ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = 
 + createCheckConfig ( AbbreviationAsWordInNameCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , getPath ( " InputAbbreviationAsWordReceiver . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 index 0fd2d47 . . b356014 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ParameterNameCheckTest . java 
 @ @ - 147 , 4 + 147 , 11 @ @ public class ParameterNameCheckTest 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , getPath ( " InputOverrideAnnotationNoNPE . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testReceiverParameter ( ) throws Exception { 
 + final DefaultConfiguration checkConfig = createCheckConfig ( ParameterNameCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputParameterNameReceiver . java " ) , expected ) ; 
 + } 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputFinalParametersReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputFinalParametersReceiver . java 
 new file mode 100644 
 index 0000000 . . cee4824 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / InputFinalParametersReceiver . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks ; 
 + 
 + public class InputFinalParametersReceiver { 
 + public void foo4 ( InputFinalParametersReceiver this ) { } 
 + 
 + private class Inner { 
 + public Inner ( InputFinalParametersReceiver InputFinalParametersReceiver . this ) { } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReceiver . java 
 new file mode 100644 
 index 0000000 . . 6973fbf 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputHiddenFieldReceiver . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputHiddenFieldReceiver { 
 + public void foo4 ( InputHiddenFieldReceiver this ) { } 
 + 
 + private class Inner { 
 + public Inner ( InputHiddenFieldReceiver InputHiddenFieldReceiver . this ) { } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputParameterAssignmentReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputParameterAssignmentReceiver . java 
 new file mode 100644 
 index 0000000 . . f48afd2 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputParameterAssignmentReceiver . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputParameterAssignmentReceiver { 
 + public void foo4 ( InputParameterAssignmentReceiver this ) { } 
 + 
 + private class Inner { 
 + public Inner ( InputParameterAssignmentReceiver InputParameterAssignmentReceiver . this ) { } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThisReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThisReceiver . java 
 new file mode 100644 
 index 0000000 . . 8ccffa9 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputRequireThisReceiver . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputRequireThisReceiver { 
 + public void foo4 ( InputRequireThisReceiver this ) { } 
 + 
 + private class Inner { 
 + public Inner ( InputRequireThisReceiver InputRequireThisReceiver . this ) { } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordReceiver . java 
 new file mode 100644 
 index 0000000 . . b71c51b 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputAbbreviationAsWordReceiver . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + public class InputAbbreviationAsWordReceiver { 
 + public void foo4 ( InputAbbreviationAsWordReceiver this ) { } 
 + 
 + private class Inner { 
 + public Inner ( InputAbbreviationAsWordReceiver InputAbbreviationAsWordReceiver . this ) { } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputParameterNameReceiver . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputParameterNameReceiver . java 
 new file mode 100644 
 index 0000000 . . 0763260 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / naming / InputParameterNameReceiver . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . naming ; 
 + 
 + public class InputParameterNameReceiver { 
 + public void foo4 ( InputParameterNameReceiver this ) { } 
 + 
 + private class Inner { 
 + public Inner ( InputParameterNameReceiver InputParameterNameReceiver . this ) { } 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 index 158ef62 . . 8730da8 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheck . java 
 @ @ - 341 , 14 + 341 , 14 @ @ public class ImportOrderCheck 
 } 
 
 final boolean isStaticAndNotLastImport = isStatic & & ! lastImportStatic ; 
 - final boolean isNotStaticAndLastImport = ! isStatic & & lastImportStatic ; 
 + final boolean isLastImportAndNonStatic = lastImportStatic & & ! isStatic ; 
 final ImportOrderOption abstractOption = getAbstractOption ( ) ; 
 
 / / using set of IF instead of SWITCH to analyze Enum options to satisfy coverage . 
 / / https : / / github . com / checkstyle / checkstyle / issues / 1387 
 if ( abstractOption = = ImportOrderOption . TOP ) { 
 
 - if ( isNotStaticAndLastImport ) { 
 + if ( isLastImportAndNonStatic ) { 
 lastGroup = Integer . MIN _ VALUE ; 
 lastImport = " " ; 
 } 
 @ @ - 361 , 7 + 361 , 7 @ @ public class ImportOrderCheck 
 lastGroup = Integer . MIN _ VALUE ; 
 lastImport = " " ; 
 } 
 - doVisitToken ( ident , isStatic , isNotStaticAndLastImport ) ; 
 + doVisitToken ( ident , isStatic , isLastImportAndNonStatic ) ; 
 
 } 
 else if ( abstractOption = = ImportOrderOption . ABOVE ) { 
 @ @ - 370 , 7 + 370 , 7 @ @ public class ImportOrderCheck 
 
 } 
 else if ( abstractOption = = ImportOrderOption . UNDER ) { 
 - doVisitToken ( ident , isStatic , isNotStaticAndLastImport ) ; 
 + doVisitToken ( ident , isStatic , isLastImportAndNonStatic ) ; 
 
 } 
 else if ( abstractOption = = ImportOrderOption . INFLOW ) {
