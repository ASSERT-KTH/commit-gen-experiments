BLEU SCORE: 0.08737167851715878

TEST MSG: Issue # 4814 : added try / catch to setting up TreeWalker children
GENERATED MSG: Issue # 5210 : added junit failures if exception is not thrown

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> index ff9b7a0 . . ac734c0 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java <nl> @ @ - 148 , 11 + 148 , 19 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe <nl> public void setupChild ( Configuration childConf ) <nl> throws CheckstyleException { <nl> final String name = childConf . getName ( ) ; <nl> - final Object module = moduleFactory . createModule ( name ) ; <nl> - if ( module instanceof AutomaticBean ) { <nl> - final AutomaticBean bean = ( AutomaticBean ) module ; <nl> - bean . contextualize ( childContext ) ; <nl> - bean . configure ( childConf ) ; <nl> + final Object module ; <nl> + <nl> + try { <nl> + module = moduleFactory . createModule ( name ) ; <nl> + if ( module instanceof AutomaticBean ) { <nl> + final AutomaticBean bean = ( AutomaticBean ) module ; <nl> + bean . contextualize ( childContext ) ; <nl> + bean . configure ( childConf ) ; <nl> + } <nl> + } <nl> + catch ( final CheckstyleException ex ) { <nl> + throw new CheckstyleException ( " cannot initialize module " + name <nl> + + " - " + ex . getMessage ( ) , ex ) ; <nl> } <nl> if ( module instanceof AbstractCheck ) { <nl> final AbstractCheck check = ( AbstractCheck ) module ; <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> index a82da5c . . 204dabf 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java <nl> @ @ - 188 , 7 + 188 , 7 @ @ public abstract class AutomaticBean <nl> for ( final String key : attributes ) { <nl> final String value = config . getAttribute ( key ) ; <nl> <nl> - tryCopyProperty ( config . getName ( ) , key , value , true ) ; <nl> + tryCopyProperty ( key , value , true ) ; <nl> } <nl> <nl> finishLocalSetup ( ) ; <nl> @ @ - 201 , 13 + 201 , 12 @ @ public abstract class AutomaticBean <nl> <nl> / * * <nl> * Recheck property and try to copy it . <nl> - * @ param moduleName name of the module / class <nl> * @ param key key of value <nl> * @ param value value <nl> * @ param recheck whether to check for property existence before copy <nl> * @ throws CheckstyleException then property defined incorrectly <nl> * / <nl> - private void tryCopyProperty ( String moduleName , String key , Object value , boolean recheck ) <nl> + private void tryCopyProperty ( String key , Object value , boolean recheck ) <nl> throws CheckstyleException { <nl> final BeanUtilsBean beanUtils = createBeanUtilsBean ( ) ; <nl> <nl> @ @ - 219 , 8 + 218 , 8 @ @ public abstract class AutomaticBean <nl> final PropertyDescriptor descriptor = <nl> PropertyUtils . getPropertyDescriptor ( this , key ) ; <nl> if ( descriptor = = null ) { <nl> - final String message = String . format ( Locale . ROOT , " Property ' % s ' in module % s " <nl> - + " does not exist , please check the documentation " , key , moduleName ) ; <nl> + final String message = String . format ( Locale . ROOT , " Property ' % s ' " <nl> + + " does not exist , please check the documentation " , key ) ; <nl> throw new CheckstyleException ( message ) ; <nl> } <nl> } <nl> @ @ - 234 , 12 + 233 , 12 @ @ public abstract class AutomaticBean <nl> / / so we have to join these exceptions with InvocationTargetException <nl> / / to satisfy UTs coverage <nl> final String message = String . format ( Locale . ROOT , <nl> - " Cannot set property ' % s ' to ' % s ' in module % s " , key , value , moduleName ) ; <nl> + " Cannot set property ' % s ' to ' % s ' " , key , value ) ; <nl> throw new CheckstyleException ( message , ex ) ; <nl> } <nl> catch ( final IllegalArgumentException | ConversionException ex ) { <nl> final String message = String . format ( Locale . ROOT , " illegal value ' % s ' for property " <nl> - + " ' % s ' of module % s " , value , key , moduleName ) ; <nl> + + " ' % s ' " , value , key ) ; <nl> throw new CheckstyleException ( message , ex ) ; <nl> } <nl> } <nl> @ @ - 256 , 7 + 255 , 7 @ @ public abstract class AutomaticBean <nl> for ( final String key : attributes ) { <nl> final Object value = context . get ( key ) ; <nl> <nl> - tryCopyProperty ( getClass ( ) . getName ( ) , key , value , false ) ; <nl> + tryCopyProperty ( key , value , false ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> index 2d53a38 . . 490e523 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java <nl> @ @ - 454 , 7 + 454 , 8 @ @ public class CheckerTest extends AbstractModuleTestSupport { <nl> catch ( CheckstyleException ex ) { <nl> assertEquals ( " Error message is not expected " , <nl> " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker " <nl> - + " - Property ' $ $ No such property ' in module " + checkConfig . getName ( ) <nl> + + " - cannot initialize module " + checkConfig . getName ( ) <nl> + + " - Property ' $ $ No such property ' " <nl> + " does not exist , please check the documentation " , ex . getMessage ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> index 7d3b6d7 . . 2732519 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java <nl> @ @ - 541 , 8 + 541 , 9 @ @ public class MainTest { <nl> final String output = errorCounterOneMessage . getMessage ( ) + EOL ; <nl> assertEquals ( " Unexpected output log " , output , systemOut . getLog ( ) ) ; <nl> final String errorOutput = " com . puppycrawl . tools . checkstyle . api . " <nl> - + " CheckstyleException : cannot initialize module TreeWalker " <nl> - + " - JavadocVariable is not allowed as a child in JavadocMethod " ; <nl> + + " CheckstyleException : cannot initialize module TreeWalker - " <nl> + + " cannot initialize module JavadocMethod - " <nl> + + " JavadocVariable is not allowed as a child in JavadocMethod " ; <nl> assertTrue ( " Unexpected system error log " , systemErr . getLog ( ) . startsWith ( errorOutput ) ) ; <nl> } ) ; <nl> Main . main ( " - c " , getPath ( " InputMainConfig - incorrectChildren2 . xml " ) , <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> index c810b90 . . 4ab4370 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java <nl> @ @ - 48 , 10 + 48 , 10 @ @ public class AutomaticBeanTest { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String expected = " Property ' NonExistent ' in module " ; <nl> assertNull ( " Exceptions cause should be null " , ex . getCause ( ) ) ; <nl> - assertTrue ( " Invalid exception message , should start with : " + expected , <nl> - ex . getMessage ( ) . startsWith ( expected ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " Property ' NonExistent ' does not exist , please check the documentation " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 65 , 10 + 65 , 10 @ @ public class AutomaticBeanTest { <nl> fail ( " Exception is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String expected = " Property ' privateField ' in module " ; <nl> assertNull ( " Exceptions cause should be null " , ex . getCause ( ) ) ; <nl> - assertTrue ( " Invalid exception message , should start with : " + expected , <nl> - ex . getMessage ( ) . startsWith ( expected ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " Property ' privateField ' does not exist , please check the documentation " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> index c5212dd . . 288bed5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java <nl> @ @ - 147 , 11 + 147 , 11 @ @ public class NewlineAtEndOfFileCheckTest <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertTrue ( " Error message is unexpected " , <nl> - ex . getMessage ( ) . startsWith ( <nl> + assertEquals ( " Error message is unexpected " , <nl> " cannot initialize module com . puppycrawl . tools . checkstyle . " <nl> + " checks . NewlineAtEndOfFileCheck - " <nl> - + " Cannot set property ' lineSeparator ' to ' ct ' in module " ) ) ; <nl> + + " Cannot set property ' lineSeparator ' to ' ct ' " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java <nl> index b7e7e81 . . f4462cd 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java <nl> @ @ - 22 , 7 + 22 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . EmptyBlockCheck . MSG _ KEY _ BLOCK _ EMPTY ; <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . EmptyBlockCheck . MSG _ KEY _ BLOCK _ NO _ STATEMENT ; <nl> import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 149 , 12 + 148 , 12 @ @ public class EmptyBlockCheckTest <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = <nl> - " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> - + " Cannot set property ' option ' to ' invalid _ option ' in module " ; <nl> - <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " <nl> + + " blocks . EmptyBlockCheck - " <nl> + + " Cannot set property ' option ' to ' invalid _ option ' " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java <nl> index 8ac8025 . . 43af08f 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import static com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck . MSG _ K <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck . MSG _ KEY _ LINE _ PREVIOUS ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 434 , 12 + 433 , 12 @ @ public class LeftCurlyCheckTest extends AbstractModuleTestSupport { <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = <nl> + assertEquals ( " Invalid exception message " , <nl> " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> - + " Cannot set property ' option ' to ' invalid _ option ' in module " ; <nl> - <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " <nl> + + " blocks . LeftCurlyCheck - " <nl> + + " Cannot set property ' option ' to ' invalid _ option ' " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> index e37847f . . 1229ed3 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ BREAK _ BEFORE ; <nl> import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ SAME ; <nl> import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 317 , 11 + 316 , 12 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = <nl> + assertEquals ( " Invalid exception message " , <nl> " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> - + " Cannot set property ' option ' to ' invalid _ option ' in module " ; <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " <nl> + + " blocks . RightCurlyCheck - " <nl> + + " Cannot set property ' option ' to ' invalid _ option ' " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> index f48beeb . . 5576156 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java <nl> @ @ - 112 , 8 + 112 , 7 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { <nl> catch ( CheckstyleException ex ) { <nl> assertEquals ( " Invalid exception message " , " cannot initialize module " <nl> + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " <nl> - + " - Cannot set property ' charset ' to ' XSO - 8859 - 1 ' in module " <nl> - + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " , <nl> + + " - Cannot set property ' charset ' to ' XSO - 8859 - 1 ' " , <nl> ex . getMessage ( ) ) ; <nl> assertEquals ( " Invalid exception message " , " unsupported charset : ' XSO - 8859 - 1 ' " , <nl> ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> @ @ - 131 , 8 + 130 , 7 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { <nl> catch ( CheckstyleException ex ) { <nl> assertEquals ( " Invalid exception message " , " cannot initialize module " <nl> + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " <nl> - + " - Cannot set property ' headerFile ' to ' ' in module " <nl> - + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " , <nl> + + " - Cannot set property ' headerFile ' to ' ' " , <nl> ex . getMessage ( ) ) ; <nl> assertEquals ( " Invalid exception message " , <nl> " property ' headerFile ' is missing or invalid in module " <nl> @ @ - 152 , 8 + 150 , 7 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { <nl> catch ( CheckstyleException ex ) { <nl> assertEquals ( " Invalid exception message " , " cannot initialize module " <nl> + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " <nl> - + " - Cannot set property ' headerFile ' to ' null ' in module " <nl> - + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " , <nl> + + " - Cannot set property ' headerFile ' to ' null ' " , <nl> ex . getMessage ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java <nl> index a9daa3a . . f1c16d3 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java <nl> @ @ - 129 , 8 + 129 , 7 @ @ public class RegexpHeaderCheckTest extends AbstractModuleTestSupport { <nl> catch ( CheckstyleException ex ) { <nl> assertEquals ( " Invalid exception message " , " cannot initialize module " <nl> + " com . puppycrawl . tools . checkstyle . checks . header . RegexpHeaderCheck " <nl> - + " - Cannot set property ' headerFile ' to ' ' in " <nl> - + " module com . puppycrawl . tools . checkstyle . checks . header . RegexpHeaderCheck " , <nl> + + " - Cannot set property ' headerFile ' to ' ' " , <nl> ex . getMessage ( ) ) ; <nl> } <nl> } <nl> @ @ - 180 , 8 + 179 , 7 @ @ public class RegexpHeaderCheckTest extends AbstractModuleTestSupport { <nl> catch ( CheckstyleException ex ) { <nl> assertEquals ( " Invalid exception message " , " cannot initialize module " <nl> + " com . puppycrawl . tools . checkstyle . checks . header . RegexpHeaderCheck " <nl> - + " - Cannot set property ' header ' to ' ^ ( . * \ \ n . * ) ' in module " <nl> - + " com . puppycrawl . tools . checkstyle . checks . header . RegexpHeaderCheck " , <nl> + + " - Cannot set property ' header ' to ' ^ ( . * \ \ n . * ) ' " , <nl> ex . getMessage ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> index c645cc7 . . 347cdad 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import static com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCh <nl> import static com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck . MSG _ ORDER ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import java . io . File ; <nl> @ @ - 526 , 15 + 525 , 16 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = <nl> + assertEquals ( " Invalid exception message " , <nl> " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> - + " Cannot set property ' customImportOrderRules ' to " <nl> - + " ' SAME _ PACKAGE ( - 1 ) ' in module " ; <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks " <nl> + + " . imports . CustomImportOrderCheck - " <nl> + + " Cannot set property ' customImportOrderRules ' to " <nl> + + " ' SAME _ PACKAGE ( - 1 ) ' " , <nl> + ex . getMessage ( ) ) ; <nl> assertEquals ( " Invalid exception message " , <nl> " SAME _ PACKAGE rule parameter should be positive integer : SAME _ PACKAGE ( - 1 ) " , <nl> - ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> + ex . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 554 , 15 + 554 , 16 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = <nl> + assertEquals ( " Invalid exception message " , <nl> " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> - + " Cannot set property ' customImportOrderRules ' to " <nl> - + " ' SAME _ PACKAGE ( 0 ) ' in module " ; <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks " <nl> + + " . imports . CustomImportOrderCheck - " <nl> + + " Cannot set property ' customImportOrderRules ' to " <nl> + + " ' SAME _ PACKAGE ( 0 ) ' " , <nl> + ex . getMessage ( ) ) ; <nl> assertEquals ( " Invalid exception message " , <nl> " SAME _ PACKAGE rule parameter should be positive integer : SAME _ PACKAGE ( 0 ) " , <nl> - ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> + ex . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 581 , 14 + 582 , 15 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = <nl> + assertEquals ( " Invalid exception message " , <nl> " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> - + " Cannot set property ' customImportOrderRules ' to " <nl> - + " ' SAME _ PACKAGE ( 3 ) # # # UNSUPPORTED _ RULE ' in module " ; <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks " <nl> + + " . imports . CustomImportOrderCheck - " <nl> + + " Cannot set property ' customImportOrderRules ' to " <nl> + + " ' SAME _ PACKAGE ( 3 ) # # # UNSUPPORTED _ RULE ' " , <nl> + ex . getMessage ( ) ) ; <nl> assertEquals ( " Invalid exception message " , " Unexpected rule : UNSUPPORTED _ RULE " , ex <nl> - . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> + . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 606 , 15 + 608 , 16 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = <nl> + assertEquals ( " Invalid exception message " , <nl> " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> - + " Cannot set property ' customImportOrderRules ' to " <nl> - + " ' SAME _ PACKAGE ( INT _ IS _ REQUIRED _ HERE ) ' in module " ; <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks " <nl> + + " . imports . CustomImportOrderCheck - " <nl> + + " Cannot set property ' customImportOrderRules ' to " <nl> + + " ' SAME _ PACKAGE ( INT _ IS _ REQUIRED _ HERE ) ' " , <nl> + ex . getMessage ( ) ) ; <nl> assertEquals ( " Invalid exception message " , <nl> " For input string : \ " INT _ IS _ REQUIRED _ HERE \ " " , <nl> - ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> + ex . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> index a658b76 . . 96a5cb4 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java <nl> @ @ - 451 , 7 + 451 , 7 @ @ public class ImportControlCheckTest extends AbstractModuleTestSupport { <nl> * @ return String message of original exception <nl> * / <nl> private static String getCheckstyleExceptionMessage ( CheckstyleException exception ) { <nl> - return exception . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ; <nl> + return exception . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> index ba13a3b . . 9adf55e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java <nl> @ @ - 218 , 12 + 218 , 12 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = " cannot initialize module " <nl> - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property ' option ' to " <nl> - + " ' invalid _ option ' in module " ; <nl> - <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks " <nl> + + " . imports . ImportOrderCheck - " <nl> + + " Cannot set property ' option ' to ' invalid _ option ' " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 613 , 14 + 613 , 14 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = " cannot initialize module " <nl> - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property " <nl> - + " ' groups ' to ' / ^ javax ' in module " ; <nl> - <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks " <nl> + + " . imports . ImportOrderCheck - " <nl> + + " Cannot set property ' groups ' to ' / ^ javax ' " , <nl> + ex . getMessage ( ) ) ; <nl> assertEquals ( " Invalid exception message " , " Invalid group : / ^ javax " , <nl> - ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> + ex . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> index f58442b . . 63c2c01 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassDataAbstractio <nl> import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> - import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 124 , 19 + 123 , 17 @ @ public class ClassDataAbstractionCouplingCheckTest extends AbstractModuleTestSup <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = <nl> + assertEquals ( " Invalid exception message " , <nl> " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " <nl> + + " metrics . ClassDataAbstractionCouplingCheck - " <nl> + " Cannot set property ' excludedPackages ' to " <nl> - + " ' com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ' in module " <nl> - + " com . puppycrawl . tools . checkstyle . checks . metrics . " <nl> - + " ClassDataAbstractionCouplingCheck " ; <nl> - <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + + " ' com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ' " , <nl> + ex . getMessage ( ) ) ; <nl> assertEquals ( " Invalid exception message , " , <nl> " the following values are not valid identifiers : [ " <nl> + " com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ] " , ex <nl> - . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> + . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> index d9e9dcc . . 97dff1e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassFanOutComplexityCheck . MSG _ KEY ; <nl> import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import org . junit . Assert ; <nl> @ @ - 105 , 19 + 104 , 17 @ @ public class ClassFanOutComplexityCheckTest extends AbstractModuleTestSupport { <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = <nl> + assertEquals ( " Invalid exception message " , <nl> " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " <nl> + + " metrics . ClassFanOutComplexityCheck - " <nl> + " Cannot set property ' excludedPackages ' to " <nl> - + " ' com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ' in module " <nl> - + " com . puppycrawl . tools . checkstyle . checks . metrics . " <nl> - + " ClassFanOutComplexityCheck " ; <nl> - <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + + " ' com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ' " , <nl> + ex . getMessage ( ) ) ; <nl> assertEquals ( " Invalid exception message , " , <nl> " the following values are not valid identifiers : [ " <nl> + " com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ] " , ex <nl> - . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> + . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java <nl> index bcb07a9 . . 729cbc5 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java <nl> @ @ - 60 , 11 + 60 , 12 @ @ public class ConstantNameCheckTest <nl> fail ( " CheckstyleException is expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - assertEquals ( " Invalid exception message " , " cannot initialize module " <nl> - + " com . puppycrawl . tools . checkstyle . TreeWalker - illegal value " <nl> - + " ' \ \ ' for property ' format ' of module " <nl> - + " com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck " , <nl> - ex . getMessage ( ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " <nl> + + " naming . ConstantNameCheck - " <nl> + + " illegal value ' \ \ ' for property ' format ' " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java <nl> index 5115165 . . a777073 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java <nl> @ @ - 83 , 11 + 83 , 10 @ @ public class FileLengthCheckTest <nl> fail ( " Should indicate illegal args " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - / / Expected Exception because of illegal argument for " max " <nl> - assertEquals ( " Invalid exception message " , " cannot initialize module " <nl> - + " com . puppycrawl . tools . checkstyle . checks . sizes . FileLengthCheck " <nl> - + " - illegal value ' abc ' for property ' max ' of module " <nl> - + " com . puppycrawl . tools . checkstyle . checks . sizes . FileLengthCheck " , <nl> + assertEquals ( " Invalid exception message " , <nl> + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " <nl> + + " sizes . FileLengthCheck - " <nl> + + " illegal value ' abc ' for property ' max ' " , <nl> ex . getMessage ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java <nl> index 042c54b . . 58276fb 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyForInitiali <nl> import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyForInitializerPadCheck . MSG _ PRECEDED ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 115 , 11 + 114 , 12 @ @ public class EmptyForInitializerPadCheckTest <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = " cannot initialize module " <nl> - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property ' option ' to " <nl> - + " ' invalid _ option ' in module " ; <nl> - assertTrue ( " Invalid exception message , should start with : " , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " <nl> + + " whitespace . EmptyForInitializerPadCheck - " <nl> + + " Cannot set property ' option ' to ' invalid _ option ' " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForIteratorPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForIteratorPadCheckTest . java <nl> index 7127f1b . . 4d832e6 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForIteratorPadCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForIteratorPadCheckTest . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyForIteratorPadCheck . MSG _ WS _ FOLLOWED ; <nl> import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyForIteratorPadCheck . MSG _ WS _ NOT _ FOLLOWED ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> - import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 92 , 11 + 92 , 12 @ @ public class EmptyForIteratorPadCheckTest <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = " cannot initialize module " <nl> - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property ' option ' to " <nl> - + " ' invalid _ option ' in module " ; <nl> - assertTrue ( " Invalid exception message , should start with : " , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " <nl> + + " whitespace . EmptyForIteratorPadCheck - " <nl> + + " Cannot set property ' option ' to ' invalid _ option ' " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java <nl> index f965a9f . . 8a5c5f3 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java <nl> @ @ - 23 , 7 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . whitespace . MethodParamPadCh <nl> import static com . puppycrawl . tools . checkstyle . checks . whitespace . MethodParamPadCheck . MSG _ WS _ NOT _ PRECEDED ; <nl> import static com . puppycrawl . tools . checkstyle . checks . whitespace . MethodParamPadCheck . MSG _ WS _ PRECEDED ; <nl> import static org . junit . Assert . assertArrayEquals ; <nl> - import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 161 , 11 + 161 , 12 @ @ public class MethodParamPadCheckTest <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = " cannot initialize module " <nl> - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property ' option ' to " <nl> - + " ' invalid _ option ' in module " ; <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " <nl> + + " whitespace . MethodParamPadCheck - " <nl> + + " Cannot set property ' option ' to ' invalid _ option ' " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java <nl> index 11255f9 . . 9806481 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . whitespace . OperatorWrapCheck . MSG _ LINE _ NEW ; <nl> import static com . puppycrawl . tools . checkstyle . checks . whitespace . OperatorWrapCheck . MSG _ LINE _ PREVIOUS ; <nl> - import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import org . junit . Test ; <nl> @ @ - 114 , 11 + 114 , 12 @ @ public class OperatorWrapCheckTest <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = " cannot initialize module " <nl> - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property ' option ' to " <nl> - + " ' invalid _ option ' in module " ; <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " <nl> + + " whitespace . OperatorWrapCheck - " <nl> + + " Cannot set property ' option ' to ' invalid _ option ' " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> index da650fa . . 27222ba 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . whitespace . AbstractParenPad <nl> import static com . puppycrawl . tools . checkstyle . checks . whitespace . AbstractParenPadCheck . MSG _ WS _ NOT _ FOLLOWED ; <nl> import static com . puppycrawl . tools . checkstyle . checks . whitespace . AbstractParenPadCheck . MSG _ WS _ NOT _ PRECEDED ; <nl> import static com . puppycrawl . tools . checkstyle . checks . whitespace . AbstractParenPadCheck . MSG _ WS _ PRECEDED ; <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ @ - 337 , 11 + 338 , 12 @ @ public class ParenPadCheckTest <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = " cannot initialize module " <nl> - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property ' option ' to " <nl> - + " ' invalid _ option ' in module " ; <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " <nl> + + " whitespace . ParenPadCheck - " <nl> + + " Cannot set property ' option ' to ' invalid _ option ' " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java <nl> index f2f87ab . . 627c9c2 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . whitespace ; <nl> <nl> import static com . puppycrawl . tools . checkstyle . checks . whitespace . SeparatorWrapCheck . MSG _ LINE _ NEW ; <nl> import static com . puppycrawl . tools . checkstyle . checks . whitespace . SeparatorWrapCheck . MSG _ LINE _ PREVIOUS ; <nl> - import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . fail ; <nl> <nl> import org . junit . Assert ; <nl> @ @ - 98 , 11 + 98 , 12 @ @ public class SeparatorWrapCheckTest <nl> fail ( " exception expected " ) ; <nl> } <nl> catch ( CheckstyleException ex ) { <nl> - final String messageStart = " cannot initialize module " <nl> - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property ' option ' to " <nl> - + " ' invalid _ option ' in module " ; <nl> - assertTrue ( " Invalid exception message , should start with : " + messageStart , <nl> - ex . getMessage ( ) . startsWith ( messageStart ) ) ; <nl> + assertEquals ( " Invalid exception message " , <nl> + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " <nl> + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " <nl> + + " whitespace . SeparatorWrapCheck - " <nl> + + " Cannot set property ' option ' to ' invalid _ option ' " , <nl> + ex . getMessage ( ) ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / config / import - control . xml b / config / import - control . xml <nl> index 5fdb1de . . 150caca 100644 <nl> - - - a / config / import - control . xml <nl> + + + b / config / import - control . xml <nl> @ @ - 40 , 6 + 40 , 11 @ @ <nl> < allow pkg = " org . antlr . v4 . runtime " local - only = " true " / > <nl> < allow class = " com . puppycrawl . tools . checkstyle . JavadocDetailNodeParser . + " <nl> local - only = " true " regex = " true " / > <nl> + < allow class = " java . lang . annotation . ElementType " local - only = " true " / > <nl> + < allow class = " java . lang . annotation . Inherited " local - only = " true " / > <nl> + < allow class = " java . lang . annotation . Retention " local - only = " true " / > <nl> + < allow class = " java . lang . annotation . RetentionPolicy " local - only = " true " / > <nl> + < allow class = " java . lang . annotation . Target " local - only = " true " / > <nl> <nl> < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > <nl> < allow class = " com . google . common . base . CaseFormat " local - only = " true " / > <nl> diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml <nl> index 79394bf . . 7891e48 100644 <nl> - - - a / config / intellij - idea - inspections . xml <nl> + + + b / config / intellij - idea - inspections . xml <nl> @ @ - 2144 , 6 + 2144 , 12 @ @ isolated classes and we cannot put them to separate package as it will affect us <nl> < option value = " ThisEscapedInObjectConstruction " / > <nl> < ! - - it will makes code too complicated in some cases - - > <nl> < option value = " MultipleReturnPointsPerMethod " / > <nl> + < ! - - MT check markers are annotations - - > <nl> + < option value = " AnnotationClass " / > <nl> + < ! - - till # 4870 , used in MT check markers - - > <nl> + < option value = " ClassIndependentOfModule " / > <nl> + < ! - - till # 4870 , used in MT check markers - - > <nl> + < option value = " unused " / > <nl> < / list > <nl> < / option > <nl> < / inspection _ tool > <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / FileStatefulCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / FileStatefulCheck . java <nl> new file mode 100644 <nl> index 0000000 . . be8517a <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / FileStatefulCheck . java <nl> @ @ - 0 , 0 + 1 , 53 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import java . lang . annotation . ElementType ; <nl> + import java . lang . annotation . Inherited ; <nl> + import java . lang . annotation . Retention ; <nl> + import java . lang . annotation . RetentionPolicy ; <nl> + import java . lang . annotation . Target ; <nl> + <nl> + / * * <nl> + * This annotation means that the check contains file - related context and therefore <nl> + * cannot be used from the others threads at the same time . <nl> + * This annotation should be used when the check holds a thread - unsafe state . <nl> + * Checker guarantees that the whole file processed inside the same thread . <nl> + * Checker guarantees that the whole file processed with the same check instance . <nl> + * Checker guarantees that each check instance processes only one file at the same time . <nl> + * Checker guarantees that all check instances have equal ( but not the same ) configuration . <nl> + * It means , that if a check holds a property of type " array of strings " , <nl> + * the property value will not be shared accross check instances . <nl> + * Instead , each check instance will hold its own array instance . <nl> + * Checker does not guarantee that each file will have it ' s own thread - <nl> + * there might be a list of files , which will be executed on the same thread . <nl> + * Checker does not guarantee that each file will have it ' s own check instance - <nl> + * there might be a list of files , which will be checked by the same instance . <nl> + * Note : Checks with such annotation will be executed in mode how all Checks worked <nl> + * before MT mode is introduced . <nl> + * @ author Andrew Kuchev <nl> + * @ noinspection AnnotationClass , ClassIndependentOfModule , unused <nl> + * / <nl> + @ Retention ( RetentionPolicy . RUNTIME ) <nl> + @ Target ( ElementType . TYPE ) <nl> + @ Inherited <nl> + public @ interface FileStatefulCheck { <nl> + / / this annotation does not have properties <nl> + } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / GlobalStatefulCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / GlobalStatefulCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 52cc1f1 <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / GlobalStatefulCheck . java <nl> @ @ - 0 , 0 + 1 , 48 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import java . lang . annotation . ElementType ; <nl> + import java . lang . annotation . Inherited ; <nl> + import java . lang . annotation . Retention ; <nl> + import java . lang . annotation . RetentionPolicy ; <nl> + import java . lang . annotation . Target ; <nl> + <nl> + / * * <nl> + * This annotation means that the check contains global context , <nl> + * which will be updated while Checkstyle processes files . This also means , <nl> + * that all files will be processed by the same check instance . <nl> + * This annotation should be used , if a check accumulates some information during the audit , <nl> + * and processed only once at the end of the audit ( however , the check still <nl> + * can produce some messages , while collecting information ) . <nl> + * The check methods and fields should be thread safe , because they may be accessed from others <nl> + * threads at the same time . <nl> + * Checker guarantees that there will be exactly one check instance <nl> + * This is simular to multi - file validation , which checkstyle does not support fully yet . <nl> + * Please refer to https : / / github . com / checkstyle / checkstyle / issues / 3540 for details . <nl> + * @ author Andrew Kuchev <nl> + * @ noinspection AnnotationClass , ClassIndependentOfModule , unused <nl> + * / <nl> + @ Retention ( RetentionPolicy . RUNTIME ) <nl> + @ Target ( ElementType . TYPE ) <nl> + @ Inherited <nl> + public @ interface GlobalStatefulCheck { <nl> + / / this annotation does not have properties <nl> + } <nl> diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / StatelessCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / StatelessCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 57d5dc0 <nl> - - - / dev / null <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / StatelessCheck . java <nl> @ @ - 0 , 0 + 1 , 43 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle ; <nl> + <nl> + import java . lang . annotation . ElementType ; <nl> + import java . lang . annotation . Inherited ; <nl> + import java . lang . annotation . Retention ; <nl> + import java . lang . annotation . RetentionPolicy ; <nl> + import java . lang . annotation . Target ; <nl> + <nl> + / * * <nl> + * This annotation means that the check does not contain mutable state and <nl> + * may be safely used from others threads at the same time . <nl> + * The check does not contain mutable state , if it does not change any field values at the <nl> + * execution stage ( but it still can set properties at the initialization stage ) . <nl> + * Checker guarantees that there will be exactly one check instance during the audit . <nl> + * This also means , that all files will be processed by the same check instance . <nl> + * @ author Andrew Kuchev <nl> + * @ noinspection AnnotationClass , ClassIndependentOfModule , unused <nl> + * / <nl> + @ Retention ( RetentionPolicy . RUNTIME ) <nl> + @ Target ( ElementType . TYPE ) <nl> + @ Inherited <nl> + public @ interface StatelessCheck { <nl> + / / this annotation does not have properties <nl> + }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 index ff9b7a0 . . ac734c0 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / TreeWalker . java 
 @ @ - 148 , 11 + 148 , 19 @ @ public final class TreeWalker extends AbstractFileSetCheck implements ExternalRe 
 public void setupChild ( Configuration childConf ) 
 throws CheckstyleException { 
 final String name = childConf . getName ( ) ; 
 - final Object module = moduleFactory . createModule ( name ) ; 
 - if ( module instanceof AutomaticBean ) { 
 - final AutomaticBean bean = ( AutomaticBean ) module ; 
 - bean . contextualize ( childContext ) ; 
 - bean . configure ( childConf ) ; 
 + final Object module ; 
 + 
 + try { 
 + module = moduleFactory . createModule ( name ) ; 
 + if ( module instanceof AutomaticBean ) { 
 + final AutomaticBean bean = ( AutomaticBean ) module ; 
 + bean . contextualize ( childContext ) ; 
 + bean . configure ( childConf ) ; 
 + } 
 + } 
 + catch ( final CheckstyleException ex ) { 
 + throw new CheckstyleException ( " cannot initialize module " + name 
 + + " - " + ex . getMessage ( ) , ex ) ; 
 } 
 if ( module instanceof AbstractCheck ) { 
 final AbstractCheck check = ( AbstractCheck ) module ; 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 index a82da5c . . 204dabf 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / api / AutomaticBean . java 
 @ @ - 188 , 7 + 188 , 7 @ @ public abstract class AutomaticBean 
 for ( final String key : attributes ) { 
 final String value = config . getAttribute ( key ) ; 
 
 - tryCopyProperty ( config . getName ( ) , key , value , true ) ; 
 + tryCopyProperty ( key , value , true ) ; 
 } 
 
 finishLocalSetup ( ) ; 
 @ @ - 201 , 13 + 201 , 12 @ @ public abstract class AutomaticBean 
 
 / * * 
 * Recheck property and try to copy it . 
 - * @ param moduleName name of the module / class 
 * @ param key key of value 
 * @ param value value 
 * @ param recheck whether to check for property existence before copy 
 * @ throws CheckstyleException then property defined incorrectly 
 * / 
 - private void tryCopyProperty ( String moduleName , String key , Object value , boolean recheck ) 
 + private void tryCopyProperty ( String key , Object value , boolean recheck ) 
 throws CheckstyleException { 
 final BeanUtilsBean beanUtils = createBeanUtilsBean ( ) ; 
 
 @ @ - 219 , 8 + 218 , 8 @ @ public abstract class AutomaticBean 
 final PropertyDescriptor descriptor = 
 PropertyUtils . getPropertyDescriptor ( this , key ) ; 
 if ( descriptor = = null ) { 
 - final String message = String . format ( Locale . ROOT , " Property ' % s ' in module % s " 
 - + " does not exist , please check the documentation " , key , moduleName ) ; 
 + final String message = String . format ( Locale . ROOT , " Property ' % s ' " 
 + + " does not exist , please check the documentation " , key ) ; 
 throw new CheckstyleException ( message ) ; 
 } 
 } 
 @ @ - 234 , 12 + 233 , 12 @ @ public abstract class AutomaticBean 
 / / so we have to join these exceptions with InvocationTargetException 
 / / to satisfy UTs coverage 
 final String message = String . format ( Locale . ROOT , 
 - " Cannot set property ' % s ' to ' % s ' in module % s " , key , value , moduleName ) ; 
 + " Cannot set property ' % s ' to ' % s ' " , key , value ) ; 
 throw new CheckstyleException ( message , ex ) ; 
 } 
 catch ( final IllegalArgumentException | ConversionException ex ) { 
 final String message = String . format ( Locale . ROOT , " illegal value ' % s ' for property " 
 - + " ' % s ' of module % s " , value , key , moduleName ) ; 
 + + " ' % s ' " , value , key ) ; 
 throw new CheckstyleException ( message , ex ) ; 
 } 
 } 
 @ @ - 256 , 7 + 255 , 7 @ @ public abstract class AutomaticBean 
 for ( final String key : attributes ) { 
 final Object value = context . get ( key ) ; 
 
 - tryCopyProperty ( getClass ( ) . getName ( ) , key , value , false ) ; 
 + tryCopyProperty ( key , value , false ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 index 2d53a38 . . 490e523 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / CheckerTest . java 
 @ @ - 454 , 7 + 454 , 8 @ @ public class CheckerTest extends AbstractModuleTestSupport { 
 catch ( CheckstyleException ex ) { 
 assertEquals ( " Error message is not expected " , 
 " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker " 
 - + " - Property ' $ $ No such property ' in module " + checkConfig . getName ( ) 
 + + " - cannot initialize module " + checkConfig . getName ( ) 
 + + " - Property ' $ $ No such property ' " 
 + " does not exist , please check the documentation " , ex . getMessage ( ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 index 7d3b6d7 . . 2732519 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / MainTest . java 
 @ @ - 541 , 8 + 541 , 9 @ @ public class MainTest { 
 final String output = errorCounterOneMessage . getMessage ( ) + EOL ; 
 assertEquals ( " Unexpected output log " , output , systemOut . getLog ( ) ) ; 
 final String errorOutput = " com . puppycrawl . tools . checkstyle . api . " 
 - + " CheckstyleException : cannot initialize module TreeWalker " 
 - + " - JavadocVariable is not allowed as a child in JavadocMethod " ; 
 + + " CheckstyleException : cannot initialize module TreeWalker - " 
 + + " cannot initialize module JavadocMethod - " 
 + + " JavadocVariable is not allowed as a child in JavadocMethod " ; 
 assertTrue ( " Unexpected system error log " , systemErr . getLog ( ) . startsWith ( errorOutput ) ) ; 
 } ) ; 
 Main . main ( " - c " , getPath ( " InputMainConfig - incorrectChildren2 . xml " ) , 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 index c810b90 . . 4ab4370 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / AutomaticBeanTest . java 
 @ @ - 48 , 10 + 48 , 10 @ @ public class AutomaticBeanTest { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String expected = " Property ' NonExistent ' in module " ; 
 assertNull ( " Exceptions cause should be null " , ex . getCause ( ) ) ; 
 - assertTrue ( " Invalid exception message , should start with : " + expected , 
 - ex . getMessage ( ) . startsWith ( expected ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " Property ' NonExistent ' does not exist , please check the documentation " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 65 , 10 + 65 , 10 @ @ public class AutomaticBeanTest { 
 fail ( " Exception is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String expected = " Property ' privateField ' in module " ; 
 assertNull ( " Exceptions cause should be null " , ex . getCause ( ) ) ; 
 - assertTrue ( " Invalid exception message , should start with : " + expected , 
 - ex . getMessage ( ) . startsWith ( expected ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " Property ' privateField ' does not exist , please check the documentation " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 index c5212dd . . 288bed5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / NewlineAtEndOfFileCheckTest . java 
 @ @ - 147 , 11 + 147 , 11 @ @ public class NewlineAtEndOfFileCheckTest 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertTrue ( " Error message is unexpected " , 
 - ex . getMessage ( ) . startsWith ( 
 + assertEquals ( " Error message is unexpected " , 
 " cannot initialize module com . puppycrawl . tools . checkstyle . " 
 + " checks . NewlineAtEndOfFileCheck - " 
 - + " Cannot set property ' lineSeparator ' to ' ct ' in module " ) ) ; 
 + + " Cannot set property ' lineSeparator ' to ' ct ' " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java 
 index b7e7e81 . . f4462cd 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyBlockCheckTest . java 
 @ @ - 22 , 7 + 22 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . EmptyBlockCheck . MSG _ KEY _ BLOCK _ EMPTY ; 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . EmptyBlockCheck . MSG _ KEY _ BLOCK _ NO _ STATEMENT ; 
 import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 import org . junit . Test ; 
 @ @ - 149 , 12 + 148 , 12 @ @ public class EmptyBlockCheckTest 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = 
 - " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 - + " Cannot set property ' option ' to ' invalid _ option ' in module " ; 
 - 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " 
 + + " blocks . EmptyBlockCheck - " 
 + + " Cannot set property ' option ' to ' invalid _ option ' " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java 
 index 8ac8025 . . 43af08f 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / LeftCurlyCheckTest . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import static com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck . MSG _ K 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . LeftCurlyCheck . MSG _ KEY _ LINE _ PREVIOUS ; 
 import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 import org . junit . Test ; 
 @ @ - 434 , 12 + 433 , 12 @ @ public class LeftCurlyCheckTest extends AbstractModuleTestSupport { 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = 
 + assertEquals ( " Invalid exception message " , 
 " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 - + " Cannot set property ' option ' to ' invalid _ option ' in module " ; 
 - 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " 
 + + " blocks . LeftCurlyCheck - " 
 + + " Cannot set property ' option ' to ' invalid _ option ' " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 index e37847f . . 1229ed3 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / RightCurlyCheckTest . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ BREAK _ BEFORE ; 
 import static com . puppycrawl . tools . checkstyle . checks . blocks . RightCurlyCheck . MSG _ KEY _ LINE _ SAME ; 
 import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 import org . junit . Test ; 
 @ @ - 317 , 11 + 316 , 12 @ @ public class RightCurlyCheckTest extends AbstractModuleTestSupport { 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = 
 + assertEquals ( " Invalid exception message " , 
 " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 - + " Cannot set property ' option ' to ' invalid _ option ' in module " ; 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " 
 + + " blocks . RightCurlyCheck - " 
 + + " Cannot set property ' option ' to ' invalid _ option ' " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 index f48beeb . . 5576156 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / HeaderCheckTest . java 
 @ @ - 112 , 8 + 112 , 7 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { 
 catch ( CheckstyleException ex ) { 
 assertEquals ( " Invalid exception message " , " cannot initialize module " 
 + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " 
 - + " - Cannot set property ' charset ' to ' XSO - 8859 - 1 ' in module " 
 - + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " , 
 + + " - Cannot set property ' charset ' to ' XSO - 8859 - 1 ' " , 
 ex . getMessage ( ) ) ; 
 assertEquals ( " Invalid exception message " , " unsupported charset : ' XSO - 8859 - 1 ' " , 
 ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 @ @ - 131 , 8 + 130 , 7 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { 
 catch ( CheckstyleException ex ) { 
 assertEquals ( " Invalid exception message " , " cannot initialize module " 
 + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " 
 - + " - Cannot set property ' headerFile ' to ' ' in module " 
 - + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " , 
 + + " - Cannot set property ' headerFile ' to ' ' " , 
 ex . getMessage ( ) ) ; 
 assertEquals ( " Invalid exception message " , 
 " property ' headerFile ' is missing or invalid in module " 
 @ @ - 152 , 8 + 150 , 7 @ @ public class HeaderCheckTest extends AbstractModuleTestSupport { 
 catch ( CheckstyleException ex ) { 
 assertEquals ( " Invalid exception message " , " cannot initialize module " 
 + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " 
 - + " - Cannot set property ' headerFile ' to ' null ' in module " 
 - + " com . puppycrawl . tools . checkstyle . checks . header . HeaderCheck " , 
 + + " - Cannot set property ' headerFile ' to ' null ' " , 
 ex . getMessage ( ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java 
 index a9daa3a . . f1c16d3 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / header / RegexpHeaderCheckTest . java 
 @ @ - 129 , 8 + 129 , 7 @ @ public class RegexpHeaderCheckTest extends AbstractModuleTestSupport { 
 catch ( CheckstyleException ex ) { 
 assertEquals ( " Invalid exception message " , " cannot initialize module " 
 + " com . puppycrawl . tools . checkstyle . checks . header . RegexpHeaderCheck " 
 - + " - Cannot set property ' headerFile ' to ' ' in " 
 - + " module com . puppycrawl . tools . checkstyle . checks . header . RegexpHeaderCheck " , 
 + + " - Cannot set property ' headerFile ' to ' ' " , 
 ex . getMessage ( ) ) ; 
 } 
 } 
 @ @ - 180 , 8 + 179 , 7 @ @ public class RegexpHeaderCheckTest extends AbstractModuleTestSupport { 
 catch ( CheckstyleException ex ) { 
 assertEquals ( " Invalid exception message " , " cannot initialize module " 
 + " com . puppycrawl . tools . checkstyle . checks . header . RegexpHeaderCheck " 
 - + " - Cannot set property ' header ' to ' ^ ( . * \ \ n . * ) ' in module " 
 - + " com . puppycrawl . tools . checkstyle . checks . header . RegexpHeaderCheck " , 
 + + " - Cannot set property ' header ' to ' ^ ( . * \ \ n . * ) ' " , 
 ex . getMessage ( ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 index c645cc7 . . 347cdad 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / CustomImportOrderCheckTest . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import static com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCh 
 import static com . puppycrawl . tools . checkstyle . checks . imports . CustomImportOrderCheck . MSG _ ORDER ; 
 import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 import java . io . File ; 
 @ @ - 526 , 15 + 525 , 16 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = 
 + assertEquals ( " Invalid exception message " , 
 " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 - + " Cannot set property ' customImportOrderRules ' to " 
 - + " ' SAME _ PACKAGE ( - 1 ) ' in module " ; 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks " 
 + + " . imports . CustomImportOrderCheck - " 
 + + " Cannot set property ' customImportOrderRules ' to " 
 + + " ' SAME _ PACKAGE ( - 1 ) ' " , 
 + ex . getMessage ( ) ) ; 
 assertEquals ( " Invalid exception message " , 
 " SAME _ PACKAGE rule parameter should be positive integer : SAME _ PACKAGE ( - 1 ) " , 
 - ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 + ex . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 554 , 15 + 554 , 16 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = 
 + assertEquals ( " Invalid exception message " , 
 " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 - + " Cannot set property ' customImportOrderRules ' to " 
 - + " ' SAME _ PACKAGE ( 0 ) ' in module " ; 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks " 
 + + " . imports . CustomImportOrderCheck - " 
 + + " Cannot set property ' customImportOrderRules ' to " 
 + + " ' SAME _ PACKAGE ( 0 ) ' " , 
 + ex . getMessage ( ) ) ; 
 assertEquals ( " Invalid exception message " , 
 " SAME _ PACKAGE rule parameter should be positive integer : SAME _ PACKAGE ( 0 ) " , 
 - ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 + ex . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 581 , 14 + 582 , 15 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = 
 + assertEquals ( " Invalid exception message " , 
 " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 - + " Cannot set property ' customImportOrderRules ' to " 
 - + " ' SAME _ PACKAGE ( 3 ) # # # UNSUPPORTED _ RULE ' in module " ; 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks " 
 + + " . imports . CustomImportOrderCheck - " 
 + + " Cannot set property ' customImportOrderRules ' to " 
 + + " ' SAME _ PACKAGE ( 3 ) # # # UNSUPPORTED _ RULE ' " , 
 + ex . getMessage ( ) ) ; 
 assertEquals ( " Invalid exception message " , " Unexpected rule : UNSUPPORTED _ RULE " , ex 
 - . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 + . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 606 , 15 + 608 , 16 @ @ public class CustomImportOrderCheckTest extends AbstractModuleTestSupport { 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = 
 + assertEquals ( " Invalid exception message " , 
 " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 - + " Cannot set property ' customImportOrderRules ' to " 
 - + " ' SAME _ PACKAGE ( INT _ IS _ REQUIRED _ HERE ) ' in module " ; 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks " 
 + + " . imports . CustomImportOrderCheck - " 
 + + " Cannot set property ' customImportOrderRules ' to " 
 + + " ' SAME _ PACKAGE ( INT _ IS _ REQUIRED _ HERE ) ' " , 
 + ex . getMessage ( ) ) ; 
 assertEquals ( " Invalid exception message " , 
 " For input string : \ " INT _ IS _ REQUIRED _ HERE \ " " , 
 - ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 + ex . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 index a658b76 . . 96a5cb4 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportControlCheckTest . java 
 @ @ - 451 , 7 + 451 , 7 @ @ public class ImportControlCheckTest extends AbstractModuleTestSupport { 
 * @ return String message of original exception 
 * / 
 private static String getCheckstyleExceptionMessage ( CheckstyleException exception ) { 
 - return exception . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ; 
 + return exception . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ; 
 } 
 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 index ba13a3b . . 9adf55e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ImportOrderCheckTest . java 
 @ @ - 218 , 12 + 218 , 12 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = " cannot initialize module " 
 - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property ' option ' to " 
 - + " ' invalid _ option ' in module " ; 
 - 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks " 
 + + " . imports . ImportOrderCheck - " 
 + + " Cannot set property ' option ' to ' invalid _ option ' " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 
 
 @ @ - 613 , 14 + 613 , 14 @ @ public class ImportOrderCheckTest extends AbstractModuleTestSupport { 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = " cannot initialize module " 
 - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property " 
 - + " ' groups ' to ' / ^ javax ' in module " ; 
 - 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks " 
 + + " . imports . ImportOrderCheck - " 
 + + " Cannot set property ' groups ' to ' / ^ javax ' " , 
 + ex . getMessage ( ) ) ; 
 assertEquals ( " Invalid exception message " , " Invalid group : / ^ javax " , 
 - ex . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 + ex . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 index f58442b . . 63c2c01 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassDataAbstractionCouplingCheckTest . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassDataAbstractio 
 import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 - import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 import org . junit . Test ; 
 @ @ - 124 , 19 + 123 , 17 @ @ public class ClassDataAbstractionCouplingCheckTest extends AbstractModuleTestSup 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = 
 + assertEquals ( " Invalid exception message " , 
 " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " 
 + + " metrics . ClassDataAbstractionCouplingCheck - " 
 + " Cannot set property ' excludedPackages ' to " 
 - + " ' com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ' in module " 
 - + " com . puppycrawl . tools . checkstyle . checks . metrics . " 
 - + " ClassDataAbstractionCouplingCheck " ; 
 - 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + + " ' com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ' " , 
 + ex . getMessage ( ) ) ; 
 assertEquals ( " Invalid exception message , " , 
 " the following values are not valid identifiers : [ " 
 + " com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ] " , ex 
 - . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 + . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 index d9e9dcc . . 97dff1e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / metrics / ClassFanOutComplexityCheckTest . java 
 @ @ - 21 , 7 + 21 , 6 @ @ package com . puppycrawl . tools . checkstyle . checks . metrics ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . metrics . ClassFanOutComplexityCheck . MSG _ KEY ; 
 import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 import org . junit . Assert ; 
 @ @ - 105 , 19 + 104 , 17 @ @ public class ClassFanOutComplexityCheckTest extends AbstractModuleTestSupport { 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = 
 + assertEquals ( " Invalid exception message " , 
 " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " 
 + + " metrics . ClassFanOutComplexityCheck - " 
 + " Cannot set property ' excludedPackages ' to " 
 - + " ' com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ' in module " 
 - + " com . puppycrawl . tools . checkstyle . checks . metrics . " 
 - + " ClassFanOutComplexityCheck " ; 
 - 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + + " ' com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ' " , 
 + ex . getMessage ( ) ) ; 
 assertEquals ( " Invalid exception message , " , 
 " the following values are not valid identifiers : [ " 
 + " com . puppycrawl . tools . checkstyle . checks . metrics . inputs . a . ] " , ex 
 - . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 + . getCause ( ) . getCause ( ) . getCause ( ) . getCause ( ) . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java 
 index bcb07a9 . . 729cbc5 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / naming / ConstantNameCheckTest . java 
 @ @ - 60 , 11 + 60 , 12 @ @ public class ConstantNameCheckTest 
 fail ( " CheckstyleException is expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - assertEquals ( " Invalid exception message " , " cannot initialize module " 
 - + " com . puppycrawl . tools . checkstyle . TreeWalker - illegal value " 
 - + " ' \ \ ' for property ' format ' of module " 
 - + " com . puppycrawl . tools . checkstyle . checks . naming . ConstantNameCheck " , 
 - ex . getMessage ( ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " 
 + + " naming . ConstantNameCheck - " 
 + + " illegal value ' \ \ ' for property ' format ' " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java 
 index 5115165 . . a777073 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / sizes / FileLengthCheckTest . java 
 @ @ - 83 , 11 + 83 , 10 @ @ public class FileLengthCheckTest 
 fail ( " Should indicate illegal args " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - / / Expected Exception because of illegal argument for " max " 
 - assertEquals ( " Invalid exception message " , " cannot initialize module " 
 - + " com . puppycrawl . tools . checkstyle . checks . sizes . FileLengthCheck " 
 - + " - illegal value ' abc ' for property ' max ' of module " 
 - + " com . puppycrawl . tools . checkstyle . checks . sizes . FileLengthCheck " , 
 + assertEquals ( " Invalid exception message " , 
 + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " 
 + + " sizes . FileLengthCheck - " 
 + + " illegal value ' abc ' for property ' max ' " , 
 ex . getMessage ( ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java 
 index 042c54b . . 58276fb 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForInitializerPadCheckTest . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyForInitiali 
 import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyForInitializerPadCheck . MSG _ PRECEDED ; 
 import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 import org . junit . Test ; 
 @ @ - 115 , 11 + 114 , 12 @ @ public class EmptyForInitializerPadCheckTest 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = " cannot initialize module " 
 - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property ' option ' to " 
 - + " ' invalid _ option ' in module " ; 
 - assertTrue ( " Invalid exception message , should start with : " , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " 
 + + " whitespace . EmptyForInitializerPadCheck - " 
 + + " Cannot set property ' option ' to ' invalid _ option ' " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForIteratorPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForIteratorPadCheckTest . java 
 index 7127f1b . . 4d832e6 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForIteratorPadCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / EmptyForIteratorPadCheckTest . java 
 @ @ - 22 , 7 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyForIteratorPadCheck . MSG _ WS _ FOLLOWED ; 
 import static com . puppycrawl . tools . checkstyle . checks . whitespace . EmptyForIteratorPadCheck . MSG _ WS _ NOT _ FOLLOWED ; 
 import static org . junit . Assert . assertArrayEquals ; 
 - import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 
 import org . junit . Test ; 
 @ @ - 92 , 11 + 92 , 12 @ @ public class EmptyForIteratorPadCheckTest 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = " cannot initialize module " 
 - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property ' option ' to " 
 - + " ' invalid _ option ' in module " ; 
 - assertTrue ( " Invalid exception message , should start with : " , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " 
 + + " whitespace . EmptyForIteratorPadCheck - " 
 + + " Cannot set property ' option ' to ' invalid _ option ' " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java 
 index f965a9f . . 8a5c5f3 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / MethodParamPadCheckTest . java 
 @ @ - 23 , 7 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . whitespace . MethodParamPadCh 
 import static com . puppycrawl . tools . checkstyle . checks . whitespace . MethodParamPadCheck . MSG _ WS _ NOT _ PRECEDED ; 
 import static com . puppycrawl . tools . checkstyle . checks . whitespace . MethodParamPadCheck . MSG _ WS _ PRECEDED ; 
 import static org . junit . Assert . assertArrayEquals ; 
 - import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 
 import org . junit . Test ; 
 @ @ - 161 , 11 + 161 , 12 @ @ public class MethodParamPadCheckTest 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = " cannot initialize module " 
 - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property ' option ' to " 
 - + " ' invalid _ option ' in module " ; 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " 
 + + " whitespace . MethodParamPadCheck - " 
 + + " Cannot set property ' option ' to ' invalid _ option ' " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java 
 index 11255f9 . . 9806481 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / OperatorWrapCheckTest . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . whitespace . OperatorWrapCheck . MSG _ LINE _ NEW ; 
 import static com . puppycrawl . tools . checkstyle . checks . whitespace . OperatorWrapCheck . MSG _ LINE _ PREVIOUS ; 
 - import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 
 import org . junit . Test ; 
 @ @ - 114 , 11 + 114 , 12 @ @ public class OperatorWrapCheckTest 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = " cannot initialize module " 
 - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property ' option ' to " 
 - + " ' invalid _ option ' in module " ; 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " 
 + + " whitespace . OperatorWrapCheck - " 
 + + " Cannot set property ' option ' to ' invalid _ option ' " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 index da650fa . . 27222ba 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / ParenPadCheckTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import static com . puppycrawl . tools . checkstyle . checks . whitespace . AbstractParenPad 
 import static com . puppycrawl . tools . checkstyle . checks . whitespace . AbstractParenPadCheck . MSG _ WS _ NOT _ FOLLOWED ; 
 import static com . puppycrawl . tools . checkstyle . checks . whitespace . AbstractParenPadCheck . MSG _ WS _ NOT _ PRECEDED ; 
 import static com . puppycrawl . tools . checkstyle . checks . whitespace . AbstractParenPadCheck . MSG _ WS _ PRECEDED ; 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 @ @ - 337 , 11 + 338 , 12 @ @ public class ParenPadCheckTest 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = " cannot initialize module " 
 - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property ' option ' to " 
 - + " ' invalid _ option ' in module " ; 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " 
 + + " whitespace . ParenPadCheck - " 
 + + " Cannot set property ' option ' to ' invalid _ option ' " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java 
 index f2f87ab . . 627c9c2 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / whitespace / SeparatorWrapCheckTest . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . whitespace ; 
 
 import static com . puppycrawl . tools . checkstyle . checks . whitespace . SeparatorWrapCheck . MSG _ LINE _ NEW ; 
 import static com . puppycrawl . tools . checkstyle . checks . whitespace . SeparatorWrapCheck . MSG _ LINE _ PREVIOUS ; 
 - import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . fail ; 
 
 import org . junit . Assert ; 
 @ @ - 98 , 11 + 98 , 12 @ @ public class SeparatorWrapCheckTest 
 fail ( " exception expected " ) ; 
 } 
 catch ( CheckstyleException ex ) { 
 - final String messageStart = " cannot initialize module " 
 - + " com . puppycrawl . tools . checkstyle . TreeWalker - Cannot set property ' option ' to " 
 - + " ' invalid _ option ' in module " ; 
 - assertTrue ( " Invalid exception message , should start with : " + messageStart , 
 - ex . getMessage ( ) . startsWith ( messageStart ) ) ; 
 + assertEquals ( " Invalid exception message " , 
 + " cannot initialize module com . puppycrawl . tools . checkstyle . TreeWalker - " 
 + + " cannot initialize module com . puppycrawl . tools . checkstyle . checks . " 
 + + " whitespace . SeparatorWrapCheck - " 
 + + " Cannot set property ' option ' to ' invalid _ option ' " , 
 + ex . getMessage ( ) ) ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / config / import - control . xml b / config / import - control . xml 
 index 5fdb1de . . 150caca 100644 
 - - - a / config / import - control . xml 
 + + + b / config / import - control . xml 
 @ @ - 40 , 6 + 40 , 11 @ @ 
 < allow pkg = " org . antlr . v4 . runtime " local - only = " true " / > 
 < allow class = " com . puppycrawl . tools . checkstyle . JavadocDetailNodeParser . + " 
 local - only = " true " regex = " true " / > 
 + < allow class = " java . lang . annotation . ElementType " local - only = " true " / > 
 + < allow class = " java . lang . annotation . Inherited " local - only = " true " / > 
 + < allow class = " java . lang . annotation . Retention " local - only = " true " / > 
 + < allow class = " java . lang . annotation . RetentionPolicy " local - only = " true " / > 
 + < allow class = " java . lang . annotation . Target " local - only = " true " / > 
 
 < ! - - allowed till https : / / github . com / checkstyle / checkstyle / issues / 3455 - - > 
 < allow class = " com . google . common . base . CaseFormat " local - only = " true " / > 
 diff - - git a / config / intellij - idea - inspections . xml b / config / intellij - idea - inspections . xml 
 index 79394bf . . 7891e48 100644 
 - - - a / config / intellij - idea - inspections . xml 
 + + + b / config / intellij - idea - inspections . xml 
 @ @ - 2144 , 6 + 2144 , 12 @ @ isolated classes and we cannot put them to separate package as it will affect us 
 < option value = " ThisEscapedInObjectConstruction " / > 
 < ! - - it will makes code too complicated in some cases - - > 
 < option value = " MultipleReturnPointsPerMethod " / > 
 + < ! - - MT check markers are annotations - - > 
 + < option value = " AnnotationClass " / > 
 + < ! - - till # 4870 , used in MT check markers - - > 
 + < option value = " ClassIndependentOfModule " / > 
 + < ! - - till # 4870 , used in MT check markers - - > 
 + < option value = " unused " / > 
 < / list > 
 < / option > 
 < / inspection _ tool > 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / FileStatefulCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / FileStatefulCheck . java 
 new file mode 100644 
 index 0000000 . . be8517a 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / FileStatefulCheck . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import java . lang . annotation . ElementType ; 
 + import java . lang . annotation . Inherited ; 
 + import java . lang . annotation . Retention ; 
 + import java . lang . annotation . RetentionPolicy ; 
 + import java . lang . annotation . Target ; 
 + 
 + / * * 
 + * This annotation means that the check contains file - related context and therefore 
 + * cannot be used from the others threads at the same time . 
 + * This annotation should be used when the check holds a thread - unsafe state . 
 + * Checker guarantees that the whole file processed inside the same thread . 
 + * Checker guarantees that the whole file processed with the same check instance . 
 + * Checker guarantees that each check instance processes only one file at the same time . 
 + * Checker guarantees that all check instances have equal ( but not the same ) configuration . 
 + * It means , that if a check holds a property of type " array of strings " , 
 + * the property value will not be shared accross check instances . 
 + * Instead , each check instance will hold its own array instance . 
 + * Checker does not guarantee that each file will have it ' s own thread - 
 + * there might be a list of files , which will be executed on the same thread . 
 + * Checker does not guarantee that each file will have it ' s own check instance - 
 + * there might be a list of files , which will be checked by the same instance . 
 + * Note : Checks with such annotation will be executed in mode how all Checks worked 
 + * before MT mode is introduced . 
 + * @ author Andrew Kuchev 
 + * @ noinspection AnnotationClass , ClassIndependentOfModule , unused 
 + * / 
 + @ Retention ( RetentionPolicy . RUNTIME ) 
 + @ Target ( ElementType . TYPE ) 
 + @ Inherited 
 + public @ interface FileStatefulCheck { 
 + / / this annotation does not have properties 
 + } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / GlobalStatefulCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / GlobalStatefulCheck . java 
 new file mode 100644 
 index 0000000 . . 52cc1f1 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / GlobalStatefulCheck . java 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import java . lang . annotation . ElementType ; 
 + import java . lang . annotation . Inherited ; 
 + import java . lang . annotation . Retention ; 
 + import java . lang . annotation . RetentionPolicy ; 
 + import java . lang . annotation . Target ; 
 + 
 + / * * 
 + * This annotation means that the check contains global context , 
 + * which will be updated while Checkstyle processes files . This also means , 
 + * that all files will be processed by the same check instance . 
 + * This annotation should be used , if a check accumulates some information during the audit , 
 + * and processed only once at the end of the audit ( however , the check still 
 + * can produce some messages , while collecting information ) . 
 + * The check methods and fields should be thread safe , because they may be accessed from others 
 + * threads at the same time . 
 + * Checker guarantees that there will be exactly one check instance 
 + * This is simular to multi - file validation , which checkstyle does not support fully yet . 
 + * Please refer to https : / / github . com / checkstyle / checkstyle / issues / 3540 for details . 
 + * @ author Andrew Kuchev 
 + * @ noinspection AnnotationClass , ClassIndependentOfModule , unused 
 + * / 
 + @ Retention ( RetentionPolicy . RUNTIME ) 
 + @ Target ( ElementType . TYPE ) 
 + @ Inherited 
 + public @ interface GlobalStatefulCheck { 
 + / / this annotation does not have properties 
 + } 
 diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / StatelessCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / StatelessCheck . java 
 new file mode 100644 
 index 0000000 . . 57d5dc0 
 - - - / dev / null 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / StatelessCheck . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle ; 
 + 
 + import java . lang . annotation . ElementType ; 
 + import java . lang . annotation . Inherited ; 
 + import java . lang . annotation . Retention ; 
 + import java . lang . annotation . RetentionPolicy ; 
 + import java . lang . annotation . Target ; 
 + 
 + / * * 
 + * This annotation means that the check does not contain mutable state and 
 + * may be safely used from others threads at the same time . 
 + * The check does not contain mutable state , if it does not change any field values at the 
 + * execution stage ( but it still can set properties at the initialization stage ) . 
 + * Checker guarantees that there will be exactly one check instance during the audit . 
 + * This also means , that all files will be processed by the same check instance . 
 + * @ author Andrew Kuchev 
 + * @ noinspection AnnotationClass , ClassIndependentOfModule , unused 
 + * / 
 + @ Retention ( RetentionPolicy . RUNTIME ) 
 + @ Target ( ElementType . TYPE ) 
 + @ Inherited 
 + public @ interface StatelessCheck { 
 + / / this annotation does not have properties 
 + }
