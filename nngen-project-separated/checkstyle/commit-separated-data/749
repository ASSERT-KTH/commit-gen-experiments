BLEU SCORE: 0.02383853510228548

TEST MSG: Issue # 4497 : fix pmd violations for CheckstyleCustomShortVariable
GENERATED MSG: Code cleanup

TEST DIFF (one line): diff - - git a / config / pmd - test . xml b / config / pmd - test . xml <nl> index 14454e6 . . 8b4bc4e 100644 <nl> - - - a / config / pmd - test . xml <nl> + + + b / config / pmd - test . xml <nl> @ @ - 45 , 8 + 45 , 6 @ @ <nl> < exclude name = " LoggerIsNotStaticFinal " / > <nl> < ! - - till # 4489 - - > <nl> < exclude name = " JUnit4TestShouldUseTestAnnotation " / > <nl> - < ! - - till # 4498 - - > <nl> - < exclude name = " CheckstyleCustomShortVariable " / > <nl> < ! - - till # 4496 - - > <nl> < exclude name = " NcssMethodCount " / > <nl> < ! - - till # 4488 - - > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> index 53c6d6f . . b181594 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java <nl> @ @ - 34 , 37 + 34 , 37 @ @ public class FileContentsTest { <nl> @ SuppressWarnings ( " deprecation " ) <nl> public void testDeprecatedCtor ( ) { <nl> / / just to make UT coverage 100 % <nl> - final FileContents o = new FileContents ( " filename . java " , " 1 " , " 2 " ) ; <nl> - assertEquals ( " filename . java " , o . getFilename ( ) ) ; <nl> + final FileContents fileContents = new FileContents ( " filename . java " , " 1 " , " 2 " ) ; <nl> + assertEquals ( " filename . java " , fileContents . getFilename ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ SuppressWarnings ( " deprecation " ) <nl> public void testDeprecatedAbbreviatedMethod ( ) { <nl> / / just to make UT coverage 100 % <nl> - final FileContents o = new FileContents ( " filename " , " 123 " , " 456 " ) ; <nl> - o . getCppComments ( ) ; <nl> - o . getCComments ( ) ; <nl> - o . reportCppComment ( 1 , 1 ) ; <nl> - o . reportCComment ( 1 , 1 , 1 , 1 ) ; <nl> + final FileContents fileContents = new FileContents ( " filename " , " 123 " , " 456 " ) ; <nl> + fileContents . getCppComments ( ) ; <nl> + fileContents . getCComments ( ) ; <nl> + fileContents . reportCppComment ( 1 , 1 ) ; <nl> + fileContents . reportCComment ( 1 , 1 , 1 , 1 ) ; <nl> } <nl> <nl> @ Test <nl> public void testSinglelineCommentNotIntersect ( ) { <nl> / / just to make UT coverage 100 % <nl> - final FileContents o = new FileContents ( <nl> + final FileContents fileContents = new FileContents ( <nl> FileText . fromLines ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; <nl> - o . reportSingleLineComment ( 1 , 2 ) ; <nl> - assertFalse ( o . hasIntersectionWithComment ( 1 , 0 , 1 , 1 ) ) ; <nl> + fileContents . reportSingleLineComment ( 1 , 2 ) ; <nl> + assertFalse ( fileContents . hasIntersectionWithComment ( 1 , 0 , 1 , 1 ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testSinglelineCommentIntersect ( ) { <nl> / / just to make UT coverage 100 % <nl> - final FileContents o = new FileContents ( <nl> + final FileContents fileContents = new FileContents ( <nl> FileText . fromLines ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; <nl> - o . reportSingleLineComment ( 1 , 2 ) ; <nl> - assertTrue ( o . hasIntersectionWithComment ( 1 , 5 , 1 , 6 ) ) ; <nl> + fileContents . reportSingleLineComment ( 1 , 2 ) ; <nl> + assertTrue ( fileContents . hasIntersectionWithComment ( 1 , 5 , 1 , 6 ) ) ; <nl> <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> index c54e57c . . b343a2d 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java <nl> @ @ - 45 , 27 + 45 , 27 @ @ public class FileTextTest { <nl> @ Test <nl> public void testSupportedCharset ( ) throws IOException { <nl> final String charsetName = " ISO - 8859 - 1 " ; <nl> - final FileText o = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " <nl> + final FileText fileText = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " <nl> + " checkstyle / api / import - control _ complete . xml " ) , charsetName ) ; <nl> - assertEquals ( charsetName , o . getCharset ( ) . name ( ) ) ; <nl> + assertEquals ( charsetName , fileText . getCharset ( ) . name ( ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testLineColumnBeforeCopyConstructor ( ) throws IOException { <nl> final String charsetName = " ISO - 8859 - 1 " ; <nl> - final FileText o = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " <nl> + final FileText fileText = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " <nl> + " checkstyle / api / import - control _ complete . xml " ) , charsetName ) ; <nl> - final LineColumn lineColumn = o . lineColumn ( 100 ) ; <nl> - final FileText copy = new FileText ( o ) ; <nl> + final LineColumn lineColumn = fileText . lineColumn ( 100 ) ; <nl> + final FileText copy = new FileText ( fileText ) ; <nl> assertEquals ( lineColumn , copy . lineColumn ( 100 ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testLineColumnAfterCopyConstructor ( ) throws IOException { <nl> final String charsetName = " ISO - 8859 - 1 " ; <nl> - final FileText o = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " <nl> + final FileText fileText = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " <nl> + " checkstyle / api / import - control _ complete . xml " ) , charsetName ) ; <nl> - final FileText copy = new FileText ( o ) ; <nl> + final FileText copy = new FileText ( fileText ) ; <nl> assertEquals ( 3 , copy . lineColumn ( 100 ) . getLine ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java <nl> index 4748c7e . . debf563 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java <nl> @ @ - 47 , 10 + 47 , 10 @ @ public class ScopeTest { <nl> <nl> @ Test <nl> public void testMisc ( ) { <nl> - final Scope o = Scope . getInstance ( " public " ) ; <nl> - assertNotNull ( o ) ; <nl> - assertEquals ( " public " , o . toString ( ) ) ; <nl> - assertEquals ( " public " , o . getName ( ) ) ; <nl> + final Scope scope = Scope . getInstance ( " public " ) ; <nl> + assertNotNull ( scope ) ; <nl> + assertEquals ( " public " , scope . toString ( ) ) ; <nl> + assertEquals ( " public " , scope . getName ( ) ) ; <nl> <nl> try { <nl> Scope . getInstance ( " unknown " ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java <nl> index 944e2dc . . 110c503 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java <nl> @ @ - 45 , 10 + 45 , 10 @ @ public class SeverityLevelTest { <nl> <nl> @ Test <nl> public void testMisc ( ) { <nl> - final SeverityLevel o = SeverityLevel . getInstance ( " info " ) ; <nl> - assertNotNull ( o ) ; <nl> - assertEquals ( " info " , o . toString ( ) ) ; <nl> - assertEquals ( " info " , o . getName ( ) ) ; <nl> + final SeverityLevel severityLevel = SeverityLevel . getInstance ( " info " ) ; <nl> + assertNotNull ( severityLevel ) ; <nl> + assertEquals ( " info " , severityLevel . toString ( ) ) ; <nl> + assertEquals ( " info " , severityLevel . getName ( ) ) ; <nl> <nl> try { <nl> SeverityLevel . getInstance ( " unknown " ) ; <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ClassImportRuleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ClassImportRuleTest . java <nl> index ac06f0a . . 9bf6196 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ClassImportRuleTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ClassImportRuleTest . java <nl> @ @ - 28 , 38 + 28 , 38 @ @ public class ClassImportRuleTest { <nl> <nl> @ Test <nl> public void testClassImportRule ( ) { <nl> - final ClassImportRule r = new ClassImportRule ( true , false , " pkg . a " , false ) ; <nl> - assertNotNull ( r ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkga " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg . a . b " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; <nl> + final ClassImportRule rule = new ClassImportRule ( true , false , " pkg . a " , false ) ; <nl> + assertNotNull ( rule ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkga " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg . a . b " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testClassImportRuleRegexpSimple ( ) { <nl> - final ClassImportRule r = new ClassImportRule ( true , false , " pkg . a " , true ) ; <nl> - assertNotNull ( r ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkga " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg . a . b " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; <nl> + final ClassImportRule rule = new ClassImportRule ( true , false , " pkg . a " , true ) ; <nl> + assertNotNull ( rule ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkga " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg . a . b " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testClassImportRuleRegexp ( ) { <nl> - final ClassImportRule r = new ClassImportRule ( true , false , " pk [ gx ] \ \ . a " , true ) ; <nl> - assertNotNull ( r ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkga " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkx . a " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg . a . b " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; <nl> + final ClassImportRule rule = new ClassImportRule ( true , false , " pk [ gx ] \ \ . a " , true ) ; <nl> + assertNotNull ( rule ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkga " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkx . a " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg . a . b " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgImportRuleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgImportRuleTest . java <nl> index d81b52c . . c11a47e 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgImportRuleTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgImportRuleTest . java <nl> @ @ - 28 , 77 + 28 , 77 @ @ public class PkgImportRuleTest { <nl> <nl> @ Test <nl> public void testPkgImportRule ( ) { <nl> - final PkgImportRule r = new PkgImportRule ( true , false , " pkg " , false , false ) ; <nl> - assertNotNull ( r ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkga " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a . b " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; <nl> + final PkgImportRule rule = new PkgImportRule ( true , false , " pkg " , false , false ) ; <nl> + assertNotNull ( rule ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkga " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a . b " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testPkgImportRuleExactMatch ( ) { <nl> - final PkgImportRule r = new PkgImportRule ( true , false , " pkg " , true , false ) ; <nl> - assertNotNull ( r ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg . a . b " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; <nl> + final PkgImportRule rule = new PkgImportRule ( true , false , " pkg " , true , false ) ; <nl> + assertNotNull ( rule ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg . a . b " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testPkgImportRuleRegexpSimple ( ) { <nl> - final PkgImportRule r = new PkgImportRule ( true , false , " pkg " , false , true ) ; <nl> - assertNotNull ( r ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkga " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a . b " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; <nl> + final PkgImportRule rule = new PkgImportRule ( true , false , " pkg " , false , true ) ; <nl> + assertNotNull ( rule ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkga " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a . b " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testPkgImportRuleExactMatchRegexpSimple ( ) { <nl> - final PkgImportRule r = new PkgImportRule ( true , false , " pkg " , true , true ) ; <nl> - assertNotNull ( r ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg . a . b " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; <nl> + final PkgImportRule rule = new PkgImportRule ( true , false , " pkg " , true , true ) ; <nl> + assertNotNull ( rule ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg . a . b " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testPkgImportRuleRegexp ( ) { <nl> - final PkgImportRule r = new PkgImportRule ( true , false , " ( pkg | hallo ) " , false , true ) ; <nl> - assertNotNull ( r ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkga " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a . b " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " halloa " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " hallo . a " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " hallo . a . b " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " hallo " ) ) ; <nl> + final PkgImportRule rule = new PkgImportRule ( true , false , " ( pkg | hallo ) " , false , true ) ; <nl> + assertNotNull ( rule ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkga " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a . b " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " halloa " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " hallo . a " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " hallo . a . b " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " hallo " ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testPkgImportRuleExactMatchRegexp ( ) { <nl> - final PkgImportRule r = new PkgImportRule ( true , false , " ( pkg | hallo ) " , true , true ) ; <nl> - assertNotNull ( r ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg . a . b " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; <nl> - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " hallo . a " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " hallo . a . b " ) ) ; <nl> - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " hallo " ) ) ; <nl> + final PkgImportRule rule = new PkgImportRule ( true , false , " ( pkg | hallo ) " , true , true ) ; <nl> + assertNotNull ( rule ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg . a . b " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; <nl> + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " hallo . a " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " hallo . a . b " ) ) ; <nl> + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " hallo " ) ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java <nl> index 8a4b148 . . 1608ea3 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java <nl> @ @ - 444 , 7 + 444 , 7 @ @ public class XdocsPagesTest { <nl> <nl> / / remove undocumented properties <nl> new HashSet < > ( properties ) . stream ( ) <nl> - . filter ( p - > UNDOCUMENTED _ PROPERTIES . contains ( clss . getSimpleName ( ) + " . " + p ) ) <nl> + . filter ( prop - > UNDOCUMENTED _ PROPERTIES . contains ( clss . getSimpleName ( ) + " . " + prop ) ) <nl> . forEach ( properties : : remove ) ; <nl> <nl> if ( AbstractCheck . class . isAssignableFrom ( clss ) ) {
NEAREST DIFF (one line): diff - - git a / src / xdocs / checks . xml b / src / xdocs / checks . xml <nl> index 00651a7 . . 544c3b2 100644 <nl> - - - a / src / xdocs / checks . xml <nl> + + + b / src / xdocs / checks . xml <nl> @ @ - 20 , 8 + 20 , 3 @ @ <nl> < / p > <nl> < / body > <nl> < / document > <nl> - <nl> - <nl> - <nl> - <nl> - <nl> diff - - git a / src / xdocs / index . xml b / src / xdocs / index . xml <nl> index 9e1afce . . c01386c 100644 <nl> - - - a / src / xdocs / index . xml <nl> + + + b / src / xdocs / index . xml <nl> @ @ - 210 , 8 + 210 , 3 @ @ <nl> <nl> < / body > <nl> < / document > <nl> - <nl> - <nl> - <nl> - <nl> - <nl> diff - - git a / src / xdocs / optional . xml b / src / xdocs / optional . xml <nl> index 88a0e07 . . a4c814e 100755 <nl> - - - a / src / xdocs / optional . xml <nl> + + + b / src / xdocs / optional . xml <nl> @ @ - 47 , 26 + 47 , 5 @ @ <nl> < / p > <nl> < / section > <nl> <nl> - < section name = " Usage " > <nl> - < p > <nl> - Optional checks are distributed in jar file < span <nl> - class = " code " > checkstyle - optional - @ CHECKSTYLE _ VERSION @ . jar < / span > <nl> - and , in order to use an optional check , this jar file must be in <nl> - the classpath . For example , this is a command to run Checkstyle <nl> - with a configuration that contains optional checks : <nl> - < / p > <nl> - <nl> - < source > <nl> - java - classpath checkstyle - optional - @ CHECKSTYLE _ VERSION @ . jar : checkstyle - all - @ CHECKSTYLE _ VERSION @ . jar \ <nl> - com . puppycrawl . tools . checkstyle . Main \ <nl> - - c config . xml - r . <nl> - < / source > <nl> - <nl> - < p > <nl> - Please consult < a href = " cmdline . html " > Command Line < / a > and < a <nl> - href = " anttask . html " > ANT Task < / a > documentation for further usage <nl> - information . <nl> - < / p > <nl> - < / section > <nl> < / body > <nl> < / document >

TEST DIFF:
diff - - git a / config / pmd - test . xml b / config / pmd - test . xml 
 index 14454e6 . . 8b4bc4e 100644 
 - - - a / config / pmd - test . xml 
 + + + b / config / pmd - test . xml 
 @ @ - 45 , 8 + 45 , 6 @ @ 
 < exclude name = " LoggerIsNotStaticFinal " / > 
 < ! - - till # 4489 - - > 
 < exclude name = " JUnit4TestShouldUseTestAnnotation " / > 
 - < ! - - till # 4498 - - > 
 - < exclude name = " CheckstyleCustomShortVariable " / > 
 < ! - - till # 4496 - - > 
 < exclude name = " NcssMethodCount " / > 
 < ! - - till # 4488 - - > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 index 53c6d6f . . b181594 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileContentsTest . java 
 @ @ - 34 , 37 + 34 , 37 @ @ public class FileContentsTest { 
 @ SuppressWarnings ( " deprecation " ) 
 public void testDeprecatedCtor ( ) { 
 / / just to make UT coverage 100 % 
 - final FileContents o = new FileContents ( " filename . java " , " 1 " , " 2 " ) ; 
 - assertEquals ( " filename . java " , o . getFilename ( ) ) ; 
 + final FileContents fileContents = new FileContents ( " filename . java " , " 1 " , " 2 " ) ; 
 + assertEquals ( " filename . java " , fileContents . getFilename ( ) ) ; 
 } 
 
 @ Test 
 @ SuppressWarnings ( " deprecation " ) 
 public void testDeprecatedAbbreviatedMethod ( ) { 
 / / just to make UT coverage 100 % 
 - final FileContents o = new FileContents ( " filename " , " 123 " , " 456 " ) ; 
 - o . getCppComments ( ) ; 
 - o . getCComments ( ) ; 
 - o . reportCppComment ( 1 , 1 ) ; 
 - o . reportCComment ( 1 , 1 , 1 , 1 ) ; 
 + final FileContents fileContents = new FileContents ( " filename " , " 123 " , " 456 " ) ; 
 + fileContents . getCppComments ( ) ; 
 + fileContents . getCComments ( ) ; 
 + fileContents . reportCppComment ( 1 , 1 ) ; 
 + fileContents . reportCComment ( 1 , 1 , 1 , 1 ) ; 
 } 
 
 @ Test 
 public void testSinglelineCommentNotIntersect ( ) { 
 / / just to make UT coverage 100 % 
 - final FileContents o = new FileContents ( 
 + final FileContents fileContents = new FileContents ( 
 FileText . fromLines ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; 
 - o . reportSingleLineComment ( 1 , 2 ) ; 
 - assertFalse ( o . hasIntersectionWithComment ( 1 , 0 , 1 , 1 ) ) ; 
 + fileContents . reportSingleLineComment ( 1 , 2 ) ; 
 + assertFalse ( fileContents . hasIntersectionWithComment ( 1 , 0 , 1 , 1 ) ) ; 
 } 
 
 @ Test 
 public void testSinglelineCommentIntersect ( ) { 
 / / just to make UT coverage 100 % 
 - final FileContents o = new FileContents ( 
 + final FileContents fileContents = new FileContents ( 
 FileText . fromLines ( new File ( " filename " ) , Collections . singletonList ( " / / " ) ) ) ; 
 - o . reportSingleLineComment ( 1 , 2 ) ; 
 - assertTrue ( o . hasIntersectionWithComment ( 1 , 5 , 1 , 6 ) ) ; 
 + fileContents . reportSingleLineComment ( 1 , 2 ) ; 
 + assertTrue ( fileContents . hasIntersectionWithComment ( 1 , 5 , 1 , 6 ) ) ; 
 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 index c54e57c . . b343a2d 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileTextTest . java 
 @ @ - 45 , 27 + 45 , 27 @ @ public class FileTextTest { 
 @ Test 
 public void testSupportedCharset ( ) throws IOException { 
 final String charsetName = " ISO - 8859 - 1 " ; 
 - final FileText o = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " 
 + final FileText fileText = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " 
 + " checkstyle / api / import - control _ complete . xml " ) , charsetName ) ; 
 - assertEquals ( charsetName , o . getCharset ( ) . name ( ) ) ; 
 + assertEquals ( charsetName , fileText . getCharset ( ) . name ( ) ) ; 
 } 
 
 @ Test 
 public void testLineColumnBeforeCopyConstructor ( ) throws IOException { 
 final String charsetName = " ISO - 8859 - 1 " ; 
 - final FileText o = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " 
 + final FileText fileText = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " 
 + " checkstyle / api / import - control _ complete . xml " ) , charsetName ) ; 
 - final LineColumn lineColumn = o . lineColumn ( 100 ) ; 
 - final FileText copy = new FileText ( o ) ; 
 + final LineColumn lineColumn = fileText . lineColumn ( 100 ) ; 
 + final FileText copy = new FileText ( fileText ) ; 
 assertEquals ( lineColumn , copy . lineColumn ( 100 ) ) ; 
 } 
 
 @ Test 
 public void testLineColumnAfterCopyConstructor ( ) throws IOException { 
 final String charsetName = " ISO - 8859 - 1 " ; 
 - final FileText o = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " 
 + final FileText fileText = new FileText ( new File ( " src / test / resources / com / puppycrawl / tools / " 
 + " checkstyle / api / import - control _ complete . xml " ) , charsetName ) ; 
 - final FileText copy = new FileText ( o ) ; 
 + final FileText copy = new FileText ( fileText ) ; 
 assertEquals ( 3 , copy . lineColumn ( 100 ) . getLine ( ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java 
 index 4748c7e . . debf563 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / ScopeTest . java 
 @ @ - 47 , 10 + 47 , 10 @ @ public class ScopeTest { 
 
 @ Test 
 public void testMisc ( ) { 
 - final Scope o = Scope . getInstance ( " public " ) ; 
 - assertNotNull ( o ) ; 
 - assertEquals ( " public " , o . toString ( ) ) ; 
 - assertEquals ( " public " , o . getName ( ) ) ; 
 + final Scope scope = Scope . getInstance ( " public " ) ; 
 + assertNotNull ( scope ) ; 
 + assertEquals ( " public " , scope . toString ( ) ) ; 
 + assertEquals ( " public " , scope . getName ( ) ) ; 
 
 try { 
 Scope . getInstance ( " unknown " ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java 
 index 944e2dc . . 110c503 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / SeverityLevelTest . java 
 @ @ - 45 , 10 + 45 , 10 @ @ public class SeverityLevelTest { 
 
 @ Test 
 public void testMisc ( ) { 
 - final SeverityLevel o = SeverityLevel . getInstance ( " info " ) ; 
 - assertNotNull ( o ) ; 
 - assertEquals ( " info " , o . toString ( ) ) ; 
 - assertEquals ( " info " , o . getName ( ) ) ; 
 + final SeverityLevel severityLevel = SeverityLevel . getInstance ( " info " ) ; 
 + assertNotNull ( severityLevel ) ; 
 + assertEquals ( " info " , severityLevel . toString ( ) ) ; 
 + assertEquals ( " info " , severityLevel . getName ( ) ) ; 
 
 try { 
 SeverityLevel . getInstance ( " unknown " ) ; 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ClassImportRuleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ClassImportRuleTest . java 
 index ac06f0a . . 9bf6196 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ClassImportRuleTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / ClassImportRuleTest . java 
 @ @ - 28 , 38 + 28 , 38 @ @ public class ClassImportRuleTest { 
 
 @ Test 
 public void testClassImportRule ( ) { 
 - final ClassImportRule r = new ClassImportRule ( true , false , " pkg . a " , false ) ; 
 - assertNotNull ( r ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkga " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg . a . b " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; 
 + final ClassImportRule rule = new ClassImportRule ( true , false , " pkg . a " , false ) ; 
 + assertNotNull ( rule ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkga " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg . a . b " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; 
 } 
 
 @ Test 
 public void testClassImportRuleRegexpSimple ( ) { 
 - final ClassImportRule r = new ClassImportRule ( true , false , " pkg . a " , true ) ; 
 - assertNotNull ( r ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkga " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg . a . b " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; 
 + final ClassImportRule rule = new ClassImportRule ( true , false , " pkg . a " , true ) ; 
 + assertNotNull ( rule ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkga " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg . a . b " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; 
 } 
 
 @ Test 
 public void testClassImportRuleRegexp ( ) { 
 - final ClassImportRule r = new ClassImportRule ( true , false , " pk [ gx ] \ \ . a " , true ) ; 
 - assertNotNull ( r ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkga " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkx . a " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg . a . b " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; 
 + final ClassImportRule rule = new ClassImportRule ( true , false , " pk [ gx ] \ \ . a " , true ) ; 
 + assertNotNull ( rule ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkga " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkx . a " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg . a . b " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgImportRuleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgImportRuleTest . java 
 index d81b52c . . c11a47e 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgImportRuleTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / imports / PkgImportRuleTest . java 
 @ @ - 28 , 77 + 28 , 77 @ @ public class PkgImportRuleTest { 
 
 @ Test 
 public void testPkgImportRule ( ) { 
 - final PkgImportRule r = new PkgImportRule ( true , false , " pkg " , false , false ) ; 
 - assertNotNull ( r ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkga " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a . b " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; 
 + final PkgImportRule rule = new PkgImportRule ( true , false , " pkg " , false , false ) ; 
 + assertNotNull ( rule ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkga " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a . b " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; 
 } 
 
 @ Test 
 public void testPkgImportRuleExactMatch ( ) { 
 - final PkgImportRule r = new PkgImportRule ( true , false , " pkg " , true , false ) ; 
 - assertNotNull ( r ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg . a . b " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; 
 + final PkgImportRule rule = new PkgImportRule ( true , false , " pkg " , true , false ) ; 
 + assertNotNull ( rule ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg . a . b " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; 
 } 
 
 @ Test 
 public void testPkgImportRuleRegexpSimple ( ) { 
 - final PkgImportRule r = new PkgImportRule ( true , false , " pkg " , false , true ) ; 
 - assertNotNull ( r ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkga " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a . b " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; 
 + final PkgImportRule rule = new PkgImportRule ( true , false , " pkg " , false , true ) ; 
 + assertNotNull ( rule ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkga " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a . b " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; 
 } 
 
 @ Test 
 public void testPkgImportRuleExactMatchRegexpSimple ( ) { 
 - final PkgImportRule r = new PkgImportRule ( true , false , " pkg " , true , true ) ; 
 - assertNotNull ( r ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg . a . b " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; 
 + final PkgImportRule rule = new PkgImportRule ( true , false , " pkg " , true , true ) ; 
 + assertNotNull ( rule ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg . a . b " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; 
 } 
 
 @ Test 
 public void testPkgImportRuleRegexp ( ) { 
 - final PkgImportRule r = new PkgImportRule ( true , false , " ( pkg | hallo ) " , false , true ) ; 
 - assertNotNull ( r ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkga " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a . b " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " halloa " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " hallo . a " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " hallo . a . b " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " hallo " ) ) ; 
 + final PkgImportRule rule = new PkgImportRule ( true , false , " ( pkg | hallo ) " , false , true ) ; 
 + assertNotNull ( rule ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkga " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a . b " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " halloa " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " hallo . a " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " hallo . a . b " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " hallo " ) ) ; 
 } 
 
 @ Test 
 public void testPkgImportRuleExactMatchRegexp ( ) { 
 - final PkgImportRule r = new PkgImportRule ( true , false , " ( pkg | hallo ) " , true , true ) ; 
 - assertNotNull ( r ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " asda " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " p " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " pkg . a " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg . a . b " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " pkg " ) ) ; 
 - assertEquals ( AccessResult . ALLOWED , r . verifyImport ( " hallo . a " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " hallo . a . b " ) ) ; 
 - assertEquals ( AccessResult . UNKNOWN , r . verifyImport ( " hallo " ) ) ; 
 + final PkgImportRule rule = new PkgImportRule ( true , false , " ( pkg | hallo ) " , true , true ) ; 
 + assertNotNull ( rule ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " asda " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " p " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " pkg . a " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg . a . b " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " pkg " ) ) ; 
 + assertEquals ( AccessResult . ALLOWED , rule . verifyImport ( " hallo . a " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " hallo . a . b " ) ) ; 
 + assertEquals ( AccessResult . UNKNOWN , rule . verifyImport ( " hallo " ) ) ; 
 } 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java 
 index 8a4b148 . . 1608ea3 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / internal / XdocsPagesTest . java 
 @ @ - 444 , 7 + 444 , 7 @ @ public class XdocsPagesTest { 
 
 / / remove undocumented properties 
 new HashSet < > ( properties ) . stream ( ) 
 - . filter ( p - > UNDOCUMENTED _ PROPERTIES . contains ( clss . getSimpleName ( ) + " . " + p ) ) 
 + . filter ( prop - > UNDOCUMENTED _ PROPERTIES . contains ( clss . getSimpleName ( ) + " . " + prop ) ) 
 . forEach ( properties : : remove ) ; 
 
 if ( AbstractCheck . class . isAssignableFrom ( clss ) ) {

NEAREST DIFF:
diff - - git a / src / xdocs / checks . xml b / src / xdocs / checks . xml 
 index 00651a7 . . 544c3b2 100644 
 - - - a / src / xdocs / checks . xml 
 + + + b / src / xdocs / checks . xml 
 @ @ - 20 , 8 + 20 , 3 @ @ 
 < / p > 
 < / body > 
 < / document > 
 - 
 - 
 - 
 - 
 - 
 diff - - git a / src / xdocs / index . xml b / src / xdocs / index . xml 
 index 9e1afce . . c01386c 100644 
 - - - a / src / xdocs / index . xml 
 + + + b / src / xdocs / index . xml 
 @ @ - 210 , 8 + 210 , 3 @ @ 
 
 < / body > 
 < / document > 
 - 
 - 
 - 
 - 
 - 
 diff - - git a / src / xdocs / optional . xml b / src / xdocs / optional . xml 
 index 88a0e07 . . a4c814e 100755 
 - - - a / src / xdocs / optional . xml 
 + + + b / src / xdocs / optional . xml 
 @ @ - 47 , 26 + 47 , 5 @ @ 
 < / p > 
 < / section > 
 
 - < section name = " Usage " > 
 - < p > 
 - Optional checks are distributed in jar file < span 
 - class = " code " > checkstyle - optional - @ CHECKSTYLE _ VERSION @ . jar < / span > 
 - and , in order to use an optional check , this jar file must be in 
 - the classpath . For example , this is a command to run Checkstyle 
 - with a configuration that contains optional checks : 
 - < / p > 
 - 
 - < source > 
 - java - classpath checkstyle - optional - @ CHECKSTYLE _ VERSION @ . jar : checkstyle - all - @ CHECKSTYLE _ VERSION @ . jar \ 
 - com . puppycrawl . tools . checkstyle . Main \ 
 - - c config . xml - r . 
 - < / source > 
 - 
 - < p > 
 - Please consult < a href = " cmdline . html " > Command Line < / a > and < a 
 - href = " anttask . html " > ANT Task < / a > documentation for further usage 
 - information . 
 - < / p > 
 - < / section > 
 < / body > 
 < / document >
