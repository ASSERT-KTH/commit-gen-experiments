BLEU SCORE: 0.06178110636313397

TEST MSG: Issue # 3164 : AnnotationLocation : unclear behavior when annotation is among modifiers
GENERATED MSG: Coverage has been increased to 100 % in MissingDeprecatedCheck . Issue # 908

TEST DIFF (one line): diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java <nl> index ea29cea . . 940ccf5 100644 <nl> - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java <nl> + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java <nl> @ @ - 29 , 6 + 29 , 13 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> * By default , Check enforce to locate annotations immediately after <nl> * documentation block and before target element , annotation should be located <nl> * on separate line from target element . <nl> + * < p > <nl> + * Attention : Annotations among modifiers are ignored ( looks like false - negative ) <nl> + * as there might be a problem with annotations for return types <nl> + * < pre > public @ Nullable Long getStartTimeOrNull ( ) { . . . } < / pre > . <nl> + * Such annotations are better to keep close to type . <nl> + * Due to limitations Checkstyle can not examin target of annotation . <nl> + * < / p > <nl> * <nl> * < p > <nl> * Example : <nl> diff - - git a / src / xdocs / config _ annotation . xml b / src / xdocs / config _ annotation . xml <nl> index 0176a31 . . 2e1185f 100644 <nl> - - - a / src / xdocs / config _ annotation . xml <nl> + + + b / src / xdocs / config _ annotation . xml <nl> @ @ - 29 , 6 + 29 , 12 @ @ <nl> after documentation block and before target element , annotation should be located on separate line from target element . <nl> < / p > <nl> < p > <nl> + Attention : Annotations among modifiers are ignored ( looks like false - negative ) <nl> + as there might be a problem with annotations for return types < source > public @ Nullable Long getStartTimeOrNull ( ) { . . . } < / source > <nl> + Such annotations are better to keep close to type . <nl> + Due to limitations Checkstyle can not examin target of annotation . <nl> + < / p > <nl> + < p > <nl> Example : <nl> < / p > <nl> < source >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 34c7283 . . 83ac50d 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1117 , 7 + 1117 , 6 @ @ <nl> <nl> <nl> < regex > < pattern > . * . checks . blocks . EmptyBlockCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 100 < / lineRate > < / regex > <nl> - < regex > < pattern > . * . checks . blocks . EmptyCatchBlockCheck < / pattern > < branchRate > 96 < / branchRate > < lineRate > 98 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . blocks . LeftCurlyCheck < / pattern > < branchRate > 87 < / branchRate > < lineRate > 94 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . blocks . NeedBracesCheck < / pattern > < branchRate > 80 < / branchRate > < lineRate > 97 < / lineRate > < / regex > <nl> < regex > < pattern > . * . checks . blocks . RightCurlyCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 95 < / lineRate > < / regex > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java <nl> index 5398b09 . . 7316795 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java <nl> @ @ - 19 , 10 + 19 , 12 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . checks . blocks ; <nl> <nl> + import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; <nl> <nl> / * * <nl> * <nl> @ @ - 55 , 7 + 57 , 18 @ @ public class EmptyCatchBlockCheckTest extends BaseCheckTestSupport { <nl> " 195 : Empty catch block . " , <nl> " 214 : Empty catch block . " , <nl> " 230 : Empty catch block . " , <nl> + " 239 : Empty catch block . " , <nl> } ; <nl> verify ( checkConfig , getPath ( " InputEmptyCatchBlockCheck . java " ) , expected ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testGetAcceptableTokens ( ) { <nl> + EmptyCatchBlockCheck constantNameCheckObj = new EmptyCatchBlockCheck ( ) ; <nl> + int [ ] actual = constantNameCheckObj . getAcceptableTokens ( ) ; <nl> + int [ ] expected = new int [ ] { TokenTypes . LITERAL _ CATCH } ; <nl> + Assert . assertNotNull ( actual ) ; <nl> + Assert . assertArrayEquals ( expected , actual ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java <nl> index 3ebfcd4 . . 7593b9d 100644 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java <nl> @ @ - 232 , 4 + 232 , 13 @ @ public class InputEmptyCatchBlockCheck <nl> / / This is expected <nl> } <nl> } <nl> + <nl> + private void emptyMultilineComent ( ) { <nl> + try { <nl> + throw new IOException ( ) ; <nl> + } catch ( IOException e ) { <nl> + / * <nl> + * / <nl> + } <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java 
 index ea29cea . . 940ccf5 100644 
 - - - a / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java 
 + + + b / src / main / java / com / puppycrawl / tools / checkstyle / checks / annotation / AnnotationLocationCheck . java 
 @ @ - 29 , 6 + 29 , 13 @ @ import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 * By default , Check enforce to locate annotations immediately after 
 * documentation block and before target element , annotation should be located 
 * on separate line from target element . 
 + * < p > 
 + * Attention : Annotations among modifiers are ignored ( looks like false - negative ) 
 + * as there might be a problem with annotations for return types 
 + * < pre > public @ Nullable Long getStartTimeOrNull ( ) { . . . } < / pre > . 
 + * Such annotations are better to keep close to type . 
 + * Due to limitations Checkstyle can not examin target of annotation . 
 + * < / p > 
 * 
 * < p > 
 * Example : 
 diff - - git a / src / xdocs / config _ annotation . xml b / src / xdocs / config _ annotation . xml 
 index 0176a31 . . 2e1185f 100644 
 - - - a / src / xdocs / config _ annotation . xml 
 + + + b / src / xdocs / config _ annotation . xml 
 @ @ - 29 , 6 + 29 , 12 @ @ 
 after documentation block and before target element , annotation should be located on separate line from target element . 
 < / p > 
 < p > 
 + Attention : Annotations among modifiers are ignored ( looks like false - negative ) 
 + as there might be a problem with annotations for return types < source > public @ Nullable Long getStartTimeOrNull ( ) { . . . } < / source > 
 + Such annotations are better to keep close to type . 
 + Due to limitations Checkstyle can not examin target of annotation . 
 + < / p > 
 + < p > 
 Example : 
 < / p > 
 < source >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 34c7283 . . 83ac50d 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1117 , 7 + 1117 , 6 @ @ 
 
 
 < regex > < pattern > . * . checks . blocks . EmptyBlockCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 100 < / lineRate > < / regex > 
 - < regex > < pattern > . * . checks . blocks . EmptyCatchBlockCheck < / pattern > < branchRate > 96 < / branchRate > < lineRate > 98 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . blocks . LeftCurlyCheck < / pattern > < branchRate > 87 < / branchRate > < lineRate > 94 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . blocks . NeedBracesCheck < / pattern > < branchRate > 80 < / branchRate > < lineRate > 97 < / lineRate > < / regex > 
 < regex > < pattern > . * . checks . blocks . RightCurlyCheck < / pattern > < branchRate > 88 < / branchRate > < lineRate > 95 < / lineRate > < / regex > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java 
 index 5398b09 . . 7316795 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / blocks / EmptyCatchBlockCheckTest . java 
 @ @ - 19 , 10 + 19 , 12 @ @ 
 
 package com . puppycrawl . tools . checkstyle . checks . blocks ; 
 
 + import org . junit . Assert ; 
 import org . junit . Test ; 
 
 import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . TokenTypes ; 
 
 / * * 
 * 
 @ @ - 55 , 7 + 57 , 18 @ @ public class EmptyCatchBlockCheckTest extends BaseCheckTestSupport { 
 " 195 : Empty catch block . " , 
 " 214 : Empty catch block . " , 
 " 230 : Empty catch block . " , 
 + " 239 : Empty catch block . " , 
 } ; 
 verify ( checkConfig , getPath ( " InputEmptyCatchBlockCheck . java " ) , expected ) ; 
 } 
 + 
 + @ Test 
 + public void testGetAcceptableTokens ( ) { 
 + EmptyCatchBlockCheck constantNameCheckObj = new EmptyCatchBlockCheck ( ) ; 
 + int [ ] actual = constantNameCheckObj . getAcceptableTokens ( ) ; 
 + int [ ] expected = new int [ ] { TokenTypes . LITERAL _ CATCH } ; 
 + Assert . assertNotNull ( actual ) ; 
 + Assert . assertArrayEquals ( expected , actual ) ; 
 + } 
 + 
 } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java 
 index 3ebfcd4 . . 7593b9d 100644 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / InputEmptyCatchBlockCheck . java 
 @ @ - 232 , 4 + 232 , 13 @ @ public class InputEmptyCatchBlockCheck 
 / / This is expected 
 } 
 } 
 + 
 + private void emptyMultilineComent ( ) { 
 + try { 
 + throw new IOException ( ) ; 
 + } catch ( IOException e ) { 
 + / * 
 + * / 
 + } 
 + } 
 }
