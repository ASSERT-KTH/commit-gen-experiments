BLEU SCORE: 0.8408964152537145

TEST MSG: config : bump guava to 23 . 4
GENERATED MSG: config : bump guava to 23 . 2

TEST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 2b5dbe2 . . cf8452a 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 271 , 7 + 271 , 7 @ @ <nl> < dependency > <nl> < groupId > com . google . guava < / groupId > <nl> < artifactId > guava < / artifactId > <nl> - < version > 23 . 3 - jre < / version > <nl> + < version > 23 . 4 - jre < / version > <nl> < / dependency > <nl> < dependency > <nl> < groupId > org . apache . ant < / groupId >
NEAREST DIFF (one line): diff - - git a / pom . xml b / pom . xml <nl> index 6152211 . . a5bb1ff 100644 <nl> - - - a / pom . xml <nl> + + + b / pom . xml <nl> @ @ - 1656 , 7 + 1656 , 6 @ @ <nl> < param > com . puppycrawl . tools . checkstyle . checks . ArrayTypeStyleCheckTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . checks . AvoidEscapedUnicodeCharactersCheckTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . checks . DescendantTokenCheckTest < / param > <nl> - < param > com . puppycrawl . tools . checkstyle . checks . FileSetCheckLifecycleTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . checks . FinalParametersCheckTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . checks . NewlineAtEndOfFileCheckTest < / param > <nl> < param > com . puppycrawl . tools . checkstyle . checks . OuterTypeFilenameCheckTest < / param > <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / BeforeExecutionFileFilterSetTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / BeforeExecutionFileFilterSetTest . java <nl> new file mode 100644 <nl> index 0000000 . . 428cd2b <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / BeforeExecutionFileFilterSetTest . java <nl> @ @ - 0 , 0 + 1 , 83 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . api ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + import java . util . regex . Pattern ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . filefilters . BeforeExecutionExclusionFileFilter ; <nl> + <nl> + public class BeforeExecutionFileFilterSetTest { <nl> + @ Test <nl> + public void testAccept ( ) { <nl> + final String fileName = " BAD " ; <nl> + final BeforeExecutionExclusionFileFilter filter = new BeforeExecutionExclusionFileFilter ( ) ; <nl> + filter . setFileNamePattern ( Pattern . compile ( fileName ) ) ; <nl> + final BeforeExecutionFileFilterSet set = new BeforeExecutionFileFilterSet ( ) ; <nl> + set . addBeforeExecutionFileFilter ( filter ) ; <nl> + <nl> + assertTrue ( " Invalid accept state , should accept " , set . accept ( " ATest . java " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testReject ( ) { <nl> + final String fileName = " Test " ; <nl> + final BeforeExecutionExclusionFileFilter filter = new BeforeExecutionExclusionFileFilter ( ) ; <nl> + filter . setFileNamePattern ( Pattern . compile ( fileName ) ) ; <nl> + final BeforeExecutionFileFilterSet set = new BeforeExecutionFileFilterSet ( ) ; <nl> + set . addBeforeExecutionFileFilter ( filter ) ; <nl> + <nl> + assertFalse ( " Invalid accept state , should not accept " , set . accept ( " ATest . java " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetFilters2 ( ) { <nl> + final BeforeExecutionFileFilterSet filterSet = new BeforeExecutionFileFilterSet ( ) ; <nl> + filterSet . addBeforeExecutionFileFilter ( new BeforeExecutionExclusionFileFilter ( ) ) ; <nl> + assertEquals ( " size is the same " , 1 , filterSet . getBeforeExecutionFileFilters ( ) . size ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testToString2 ( ) { <nl> + final BeforeExecutionFileFilterSet filterSet = new BeforeExecutionFileFilterSet ( ) ; <nl> + filterSet . addBeforeExecutionFileFilter ( new BeforeExecutionExclusionFileFilter ( ) ) ; <nl> + assertNotNull ( " size is the same " , filterSet . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testClear ( ) { <nl> + final BeforeExecutionFileFilterSet filterSet = new BeforeExecutionFileFilterSet ( ) ; <nl> + filterSet . addBeforeExecutionFileFilter ( new BeforeExecutionExclusionFileFilter ( ) ) ; <nl> + <nl> + assertEquals ( " Invalid filter set size " , <nl> + 1 , filterSet . getBeforeExecutionFileFilters ( ) . size ( ) ) ; <nl> + <nl> + filterSet . clear ( ) ; <nl> + <nl> + assertEquals ( " Invalid filter set size " , <nl> + 0 , filterSet . getBeforeExecutionFileFilters ( ) . size ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileSetCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileSetCheckTest . java <nl> new file mode 100644 <nl> index 0000000 . . 1a1873c <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileSetCheckTest . java <nl> @ @ - 0 , 0 + 1 , 89 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . api ; <nl> + <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> + <nl> + public class FileSetCheckTest <nl> + extends AbstractModuleTestSupport { <nl> + @ Override <nl> + protected String getPackageLocation ( ) { <nl> + return " com / puppycrawl / tools / checkstyle / api / fileset " ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTranslation ( ) throws Exception { <nl> + final Configuration checkConfig = <nl> + createModuleConfig ( TestFileSetCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( checkConfig , getPath ( " InputFileSetIllegalTokens . java " ) , expected ) ; <nl> + <nl> + assertTrue ( " destroy ( ) not called by Checker " , TestFileSetCheck . isDestroyed ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testProcessCallsFinishBeforeCallingDestroy ( ) throws Exception { <nl> + <nl> + final Configuration checkConfig = <nl> + createModuleConfig ( TestFileSetCheck . class ) ; <nl> + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + <nl> + verify ( checkConfig , getPath ( " InputFileSetIllegalTokens . java " ) , expected ) ; <nl> + <nl> + assertTrue ( " FileContent should be available during finishProcessing ( ) call " , <nl> + TestFileSetCheck . isFileContentAvailable ( ) ) ; <nl> + } <nl> + <nl> + private static class TestFileSetCheck extends AbstractFileSetCheck { <nl> + private static boolean destroyed ; <nl> + private static boolean fileContentAvailable ; <nl> + private static FileContents contents ; <nl> + <nl> + @ Override <nl> + public void destroy ( ) { <nl> + destroyed = true ; <nl> + } <nl> + <nl> + public static boolean isDestroyed ( ) { <nl> + return destroyed ; <nl> + } <nl> + <nl> + public static boolean isFileContentAvailable ( ) { <nl> + return fileContentAvailable ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void processFiltered ( File file , FileText fileText ) { <nl> + contents = new FileContents ( fileText ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void finishProcessing ( ) { <nl> + fileContentAvailable = contents ! = null ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FilterSetTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FilterSetTest . java <nl> new file mode 100644 <nl> index 0000000 . . d66e436 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FilterSetTest . java <nl> @ @ - 0 , 0 + 1 , 62 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . api ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . filters . SeverityMatchFilter ; <nl> + import nl . jqno . equalsverifier . EqualsVerifier ; <nl> + <nl> + / * * Tests SuppressElementFilter . * / <nl> + public class FilterSetTest { <nl> + @ Test <nl> + public void testEqualsAndHashCode ( ) { <nl> + EqualsVerifier . forClass ( FilterSet . class ) . usingGetClass ( ) . verify ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetFilters ( ) { <nl> + final FilterSet filterSet = new FilterSet ( ) ; <nl> + filterSet . addFilter ( new SeverityMatchFilter ( ) ) ; <nl> + assertEquals ( " size is the same " , 1 , filterSet . getFilters ( ) . size ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testToString ( ) { <nl> + final FilterSet filterSet = new FilterSet ( ) ; <nl> + filterSet . addFilter ( new SeverityMatchFilter ( ) ) ; <nl> + assertNotNull ( " size is the same " , filterSet . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testClear ( ) { <nl> + final FilterSet filterSet = new FilterSet ( ) ; <nl> + filterSet . addFilter ( new SeverityMatchFilter ( ) ) ; <nl> + <nl> + assertEquals ( " Invalid filter set size " , 1 , filterSet . getFilters ( ) . size ( ) ) ; <nl> + <nl> + filterSet . clear ( ) ; <nl> + <nl> + assertEquals ( " Invalid filter set size " , 0 , filterSet . getFilters ( ) . size ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> deleted file mode 100644 <nl> index 6aff6a3 . . 0000000 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 112 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . checks ; <nl> - <nl> - import static org . junit . Assert . assertTrue ; <nl> - <nl> - import java . io . File ; <nl> - import java . util . Locale ; <nl> - <nl> - import org . junit . Test ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> - import com . puppycrawl . tools . checkstyle . Checker ; <nl> - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> - import com . puppycrawl . tools . checkstyle . TreeWalker ; <nl> - import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; <nl> - import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> - import com . puppycrawl . tools . checkstyle . api . FileContents ; <nl> - import com . puppycrawl . tools . checkstyle . api . FileText ; <nl> - import com . puppycrawl . tools . checkstyle . checks . imports . AvoidStarImportCheck ; <nl> - import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> - <nl> - public class FileSetCheckLifecycleTest <nl> - extends AbstractModuleTestSupport { <nl> - @ Override <nl> - protected String getPackageLocation ( ) { <nl> - return " com / puppycrawl / tools / checkstyle / checks / misc / fileset " ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testTranslation ( ) throws Exception { <nl> - final Configuration checkConfig = <nl> - createModuleConfig ( TestFileSetCheck . class ) ; <nl> - final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( checkConfig , getPath ( " InputFileSetCheckLifecycleIllegalTokens . java " ) , expected ) ; <nl> - <nl> - assertTrue ( " destroy ( ) not called by Checker " , TestFileSetCheck . isDestroyed ( ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testProcessCallsFinishBeforeCallingDestroy ( ) throws Exception { <nl> - <nl> - final DefaultConfiguration dc = new DefaultConfiguration ( " configuration " ) ; <nl> - final DefaultConfiguration twConf = createModuleConfig ( TreeWalker . class ) ; <nl> - dc . addAttribute ( " charset " , " UTF - 8 " ) ; <nl> - dc . addChild ( twConf ) ; <nl> - twConf . addChild ( new DefaultConfiguration ( AvoidStarImportCheck . class . getName ( ) ) ) ; <nl> - <nl> - final Checker checker = new Checker ( ) ; <nl> - final Locale locale = Locale . ROOT ; <nl> - checker . setLocaleCountry ( locale . getCountry ( ) ) ; <nl> - checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; <nl> - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - checker . configure ( dc ) ; <nl> - checker . addListener ( getBriefUtLogger ( ) ) ; <nl> - <nl> - checker . addFileSetCheck ( new TestFileSetCheck ( ) ) ; <nl> - <nl> - final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - <nl> - verify ( checker , getPath ( " InputFileSetCheckLifecycleIllegalTokens . java " ) , expected ) ; <nl> - <nl> - assertTrue ( " FileContent should be available during finishProcessing ( ) call " , <nl> - TestFileSetCheck . isFileContentAvailable ( ) ) ; <nl> - } <nl> - <nl> - private static class TestFileSetCheck extends AbstractFileSetCheck { <nl> - private static boolean destroyed ; <nl> - private static boolean fileContentAvailable ; <nl> - private static FileContents contents ; <nl> - <nl> - @ Override <nl> - public void destroy ( ) { <nl> - destroyed = true ; <nl> - } <nl> - <nl> - public static boolean isDestroyed ( ) { <nl> - return destroyed ; <nl> - } <nl> - <nl> - public static boolean isFileContentAvailable ( ) { <nl> - return fileContentAvailable ; <nl> - } <nl> - <nl> - @ Override <nl> - protected void processFiltered ( File file , FileText fileText ) { <nl> - contents = new FileContents ( fileText ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void finishProcessing ( ) { <nl> - fileContentAvailable = contents ! = null ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / BeforeExecutionExclusionFileFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / BeforeExecutionExclusionFileFilterTest . java <nl> new file mode 100644 <nl> index 0000000 . . 4dd56b7 <nl> - - - / dev / null <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / BeforeExecutionExclusionFileFilterTest . java <nl> @ @ - 0 , 0 + 1 , 100 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> + / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> + / / <nl> + / / This library is free software ; you can redistribute it and / or <nl> + / / modify it under the terms of the GNU Lesser General Public <nl> + / / License as published by the Free Software Foundation ; either <nl> + / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> + / / <nl> + / / This library is distributed in the hope that it will be useful , <nl> + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + / / Lesser General Public License for more details . <nl> + / / <nl> + / / You should have received a copy of the GNU Lesser General Public <nl> + / / License along with this library ; if not , write to the Free Software <nl> + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + package com . puppycrawl . tools . checkstyle . filefilters ; <nl> + <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + import java . util . regex . Pattern ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> + import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> + <nl> + public class BeforeExecutionExclusionFileFilterTest extends AbstractModuleTestSupport { <nl> + @ Override <nl> + protected String getPackageLocation ( ) { <nl> + return " com / puppycrawl / tools / checkstyle / filefilters / beforeexecutionexclusionfilefilter " ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAccept ( ) { <nl> + final String fileName = " BAD " ; <nl> + final BeforeExecutionExclusionFileFilter filter = <nl> + createExclusionBeforeExecutionFileFilter ( fileName ) ; <nl> + <nl> + assertTrue ( " Should accept if file does not exist " , filter . accept ( " ATest . java " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testAcceptOnNullFile ( ) { <nl> + final String fileName = null ; <nl> + final BeforeExecutionExclusionFileFilter filter = <nl> + createExclusionBeforeExecutionFileFilter ( fileName ) ; <nl> + <nl> + assertTrue ( " Should accept if file is null " , filter . accept ( " AnyJava . java " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testReject ( ) { <nl> + final String fileName = " Test " ; <nl> + final BeforeExecutionExclusionFileFilter filter = <nl> + createExclusionBeforeExecutionFileFilter ( fileName ) ; <nl> + <nl> + assertFalse ( " Should reject file , but did not " , filter . accept ( " ATest . java " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRejectBadFile ( ) throws Exception { <nl> + final DefaultConfiguration filterConfig = <nl> + createBeforeExecutionFileFilterConfig ( BeforeExecutionExclusionFileFilter . class ) ; <nl> + filterConfig . addAttribute ( " fileNamePattern " , " IncorrectClass \ \ . java " ) ; <nl> + <nl> + final String [ ] violations = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> + verify ( createChecker ( filterConfig ) , <nl> + getNonCompilablePath ( " InputBeforeExecutionExclusionFileFilterIncorrectClass . java " ) , <nl> + violations ) ; <nl> + } <nl> + <nl> + private static BeforeExecutionExclusionFileFilter <nl> + createExclusionBeforeExecutionFileFilter ( String fileName ) { <nl> + final BeforeExecutionExclusionFileFilter exclusionBeforeExecutionFileFilter = <nl> + new BeforeExecutionExclusionFileFilter ( ) ; <nl> + if ( fileName ! = null ) { <nl> + exclusionBeforeExecutionFileFilter . setFileNamePattern ( Pattern . compile ( fileName ) ) ; <nl> + } <nl> + return exclusionBeforeExecutionFileFilter ; <nl> + } <nl> + <nl> + private static DefaultConfiguration createBeforeExecutionFileFilterConfig ( Class < ? > aClass ) { <nl> + return new DefaultConfiguration ( aClass . getName ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected DefaultConfiguration createTreeWalkerConfig ( Configuration config ) { <nl> + final DefaultConfiguration dc = <nl> + new DefaultConfiguration ( " configuration " ) ; <nl> + dc . addChild ( config ) ; <nl> + return dc ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / ExclusionBeforeExecutionFileFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / ExclusionBeforeExecutionFileFilterTest . java <nl> deleted file mode 100644 <nl> index 09fb6ec . . 0000000 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / ExclusionBeforeExecutionFileFilterTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 100 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . filefilters ; <nl> - <nl> - import static org . junit . Assert . assertFalse ; <nl> - import static org . junit . Assert . assertTrue ; <nl> - <nl> - import java . util . regex . Pattern ; <nl> - <nl> - import org . junit . Test ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; <nl> - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> - import com . puppycrawl . tools . checkstyle . api . Configuration ; <nl> - import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; <nl> - <nl> - public class ExclusionBeforeExecutionFileFilterTest extends AbstractModuleTestSupport { <nl> - @ Override <nl> - protected String getPackageLocation ( ) { <nl> - return " com / puppycrawl / tools / checkstyle / filefilters / exclusionbeforeexecutionfilefilter " ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testAccept ( ) { <nl> - final String fileName = " BAD " ; <nl> - final BeforeExecutionExclusionFileFilter filter = <nl> - createExclusionBeforeExecutionFileFilter ( fileName ) ; <nl> - <nl> - assertTrue ( " Should accept if file does not exist " , filter . accept ( " ATest . java " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testAcceptOnNullFile ( ) { <nl> - final String fileName = null ; <nl> - final BeforeExecutionExclusionFileFilter filter = <nl> - createExclusionBeforeExecutionFileFilter ( fileName ) ; <nl> - <nl> - assertTrue ( " Should accept if file is null " , filter . accept ( " AnyJava . java " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testReject ( ) { <nl> - final String fileName = " Test " ; <nl> - final BeforeExecutionExclusionFileFilter filter = <nl> - createExclusionBeforeExecutionFileFilter ( fileName ) ; <nl> - <nl> - assertFalse ( " Should reject file , but did not " , filter . accept ( " ATest . java " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testRejectBadFile ( ) throws Exception { <nl> - final DefaultConfiguration filterConfig = <nl> - createBeforeExecutionFileFilterConfig ( BeforeExecutionExclusionFileFilter . class ) ; <nl> - filterConfig . addAttribute ( " fileNamePattern " , " IncorrectClass \ \ . java " ) ; <nl> - <nl> - final String [ ] violations = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> - verify ( createChecker ( filterConfig ) , <nl> - getNonCompilablePath ( " InputExclusionBeforeExecutionFileFilterIncorrectClass . java " ) , <nl> - violations ) ; <nl> - } <nl> - <nl> - private static BeforeExecutionExclusionFileFilter <nl> - createExclusionBeforeExecutionFileFilter ( String fileName ) { <nl> - final BeforeExecutionExclusionFileFilter exclusionBeforeExecutionFileFilter = <nl> - new BeforeExecutionExclusionFileFilter ( ) ; <nl> - if ( fileName ! = null ) { <nl> - exclusionBeforeExecutionFileFilter . setFileNamePattern ( Pattern . compile ( fileName ) ) ; <nl> - } <nl> - return exclusionBeforeExecutionFileFilter ; <nl> - } <nl> - <nl> - private static DefaultConfiguration createBeforeExecutionFileFilterConfig ( Class < ? > aClass ) { <nl> - return new DefaultConfiguration ( aClass . getName ( ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - protected DefaultConfiguration createTreeWalkerConfig ( Configuration config ) { <nl> - final DefaultConfiguration dc = <nl> - new DefaultConfiguration ( " configuration " ) ; <nl> - dc . addChild ( config ) ; <nl> - return dc ; <nl> - } <nl> - } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / BeforeExecutionFileFilterSetTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / BeforeExecutionFileFilterSetTest . java <nl> deleted file mode 100644 <nl> index f4e81b0 . . 0000000 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / BeforeExecutionFileFilterSetTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 84 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . filters ; <nl> - <nl> - import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertFalse ; <nl> - import static org . junit . Assert . assertNotNull ; <nl> - import static org . junit . Assert . assertTrue ; <nl> - <nl> - import java . util . regex . Pattern ; <nl> - <nl> - import org . junit . Test ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . api . BeforeExecutionFileFilterSet ; <nl> - import com . puppycrawl . tools . checkstyle . filefilters . BeforeExecutionExclusionFileFilter ; <nl> - <nl> - public class BeforeExecutionFileFilterSetTest { <nl> - @ Test <nl> - public void testAccept ( ) { <nl> - final String fileName = " BAD " ; <nl> - final BeforeExecutionExclusionFileFilter filter = new BeforeExecutionExclusionFileFilter ( ) ; <nl> - filter . setFileNamePattern ( Pattern . compile ( fileName ) ) ; <nl> - final BeforeExecutionFileFilterSet set = new BeforeExecutionFileFilterSet ( ) ; <nl> - set . addBeforeExecutionFileFilter ( filter ) ; <nl> - <nl> - assertTrue ( " Invalid accept state , should accept " , set . accept ( " ATest . java " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testReject ( ) { <nl> - final String fileName = " Test " ; <nl> - final BeforeExecutionExclusionFileFilter filter = new BeforeExecutionExclusionFileFilter ( ) ; <nl> - filter . setFileNamePattern ( Pattern . compile ( fileName ) ) ; <nl> - final BeforeExecutionFileFilterSet set = new BeforeExecutionFileFilterSet ( ) ; <nl> - set . addBeforeExecutionFileFilter ( filter ) ; <nl> - <nl> - assertFalse ( " Invalid accept state , should not accept " , set . accept ( " ATest . java " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testGetFilters2 ( ) { <nl> - final BeforeExecutionFileFilterSet filterSet = new BeforeExecutionFileFilterSet ( ) ; <nl> - filterSet . addBeforeExecutionFileFilter ( new BeforeExecutionExclusionFileFilter ( ) ) ; <nl> - assertEquals ( " size is the same " , 1 , filterSet . getBeforeExecutionFileFilters ( ) . size ( ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testToString2 ( ) { <nl> - final BeforeExecutionFileFilterSet filterSet = new BeforeExecutionFileFilterSet ( ) ; <nl> - filterSet . addBeforeExecutionFileFilter ( new BeforeExecutionExclusionFileFilter ( ) ) ; <nl> - assertNotNull ( " size is the same " , filterSet . toString ( ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testClear ( ) { <nl> - final BeforeExecutionFileFilterSet filterSet = new BeforeExecutionFileFilterSet ( ) ; <nl> - filterSet . addBeforeExecutionFileFilter ( new BeforeExecutionExclusionFileFilter ( ) ) ; <nl> - <nl> - assertEquals ( " Invalid filter set size " , <nl> - 1 , filterSet . getBeforeExecutionFileFilters ( ) . size ( ) ) ; <nl> - <nl> - filterSet . clear ( ) ; <nl> - <nl> - assertEquals ( " Invalid filter set size " , <nl> - 0 , filterSet . getBeforeExecutionFileFilters ( ) . size ( ) ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / CsvFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / CsvFilterTest . java <nl> index b797e10 . . 769751b 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / CsvFilterTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / CsvFilterTest . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package com . puppycrawl . tools . checkstyle . filters ; <nl> <nl> + import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> @ @ - 77 , 6 + 78 , 38 @ @ public class CsvFilterTest { <nl> } <nl> <nl> @ Test <nl> + public void testEmptyChain ( ) { <nl> + final CsvFilter filter = new CsvFilter ( " " ) ; <nl> + assertFalse ( " 0 " , filter . accept ( 0 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testOneFilter ( ) { <nl> + final CsvFilter filter = new CsvFilter ( " " ) ; <nl> + filter . addFilter ( new IntMatchFilter ( 0 ) ) ; <nl> + assertTrue ( " 0 " , filter . accept ( 0 ) ) ; <nl> + assertFalse ( " 1 " , filter . accept ( 1 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMultipleFilter ( ) { <nl> + final CsvFilter filter = new CsvFilter ( " " ) ; <nl> + filter . addFilter ( new IntMatchFilter ( 0 ) ) ; <nl> + filter . addFilter ( new IntRangeFilter ( 0 , 2 ) ) ; <nl> + assertTrue ( " 0 " , filter . accept ( 0 ) ) ; <nl> + assertTrue ( " 1 " , filter . accept ( 1 ) ) ; <nl> + filter . addFilter ( new IntRangeFilter ( 3 , 4 ) ) ; <nl> + assertTrue ( " 0 is in [ 3 , 4 ] " , filter . accept ( 0 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetFilters ( ) { <nl> + final CsvFilter filter = new CsvFilter ( " " ) ; <nl> + filter . addFilter ( new IntMatchFilter ( 0 ) ) ; <nl> + assertEquals ( " size is the same " , 1 , filter . getFilters ( ) . size ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testEqualsAndHashCode ( ) { <nl> EqualsVerifier . forClass ( CsvFilter . class ) . usingGetClass ( ) . verify ( ) ; <nl> } <nl> diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / FilterSetTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / FilterSetTest . java <nl> deleted file mode 100644 <nl> index 101a2fb . . 0000000 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / FilterSetTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 100 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / checkstyle : Checks Java source code for adherence to a set of rules . <nl> - / / Copyright ( C ) 2001 - 2017 the original author or authors . <nl> - / / <nl> - / / This library is free software ; you can redistribute it and / or <nl> - / / modify it under the terms of the GNU Lesser General Public <nl> - / / License as published by the Free Software Foundation ; either <nl> - / / version 2 . 1 of the License , or ( at your option ) any later version . <nl> - / / <nl> - / / This library is distributed in the hope that it will be useful , <nl> - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - / / Lesser General Public License for more details . <nl> - / / <nl> - / / You should have received a copy of the GNU Lesser General Public <nl> - / / License along with this library ; if not , write to the Free Software <nl> - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - <nl> - package com . puppycrawl . tools . checkstyle . filters ; <nl> - <nl> - import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertFalse ; <nl> - import static org . junit . Assert . assertNotNull ; <nl> - import static org . junit . Assert . assertTrue ; <nl> - <nl> - import org . junit . Before ; <nl> - import org . junit . Test ; <nl> - <nl> - import com . puppycrawl . tools . checkstyle . api . FilterSet ; <nl> - import nl . jqno . equalsverifier . EqualsVerifier ; <nl> - <nl> - / * * Tests SuppressElementFilter . * / <nl> - public class FilterSetTest { <nl> - private CsvFilter filter ; <nl> - <nl> - @ Before <nl> - public void setUp ( ) { <nl> - filter = new CsvFilter ( " " ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testEmptyChain ( ) { <nl> - assertFalse ( " 0 " , filter . accept ( 0 ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testOneFilter ( ) { <nl> - filter . addFilter ( new IntMatchFilter ( 0 ) ) ; <nl> - assertTrue ( " 0 " , filter . accept ( 0 ) ) ; <nl> - assertFalse ( " 1 " , filter . accept ( 1 ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testMultipleFilter ( ) { <nl> - filter . addFilter ( new IntMatchFilter ( 0 ) ) ; <nl> - filter . addFilter ( new IntRangeFilter ( 0 , 2 ) ) ; <nl> - assertTrue ( " 0 " , filter . accept ( 0 ) ) ; <nl> - assertTrue ( " 1 " , filter . accept ( 1 ) ) ; <nl> - filter . addFilter ( new IntRangeFilter ( 3 , 4 ) ) ; <nl> - assertTrue ( " 0 is in [ 3 , 4 ] " , filter . accept ( 0 ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testEqualsAndHashCode ( ) { <nl> - EqualsVerifier . forClass ( FilterSet . class ) . usingGetClass ( ) . verify ( ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testGetFilters ( ) { <nl> - filter . addFilter ( new IntMatchFilter ( 0 ) ) ; <nl> - assertEquals ( " size is the same " , 1 , filter . getFilters ( ) . size ( ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testGetFilters2 ( ) { <nl> - final FilterSet filterSet = new FilterSet ( ) ; <nl> - filterSet . addFilter ( new SeverityMatchFilter ( ) ) ; <nl> - assertEquals ( " size is the same " , 1 , filterSet . getFilters ( ) . size ( ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testToString2 ( ) { <nl> - final FilterSet filterSet = new FilterSet ( ) ; <nl> - filterSet . addFilter ( new SeverityMatchFilter ( ) ) ; <nl> - assertNotNull ( " size is the same " , filterSet . toString ( ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testClear ( ) { <nl> - final FilterSet filterSet = new FilterSet ( ) ; <nl> - filterSet . addFilter ( new SeverityMatchFilter ( ) ) ; <nl> - <nl> - assertEquals ( " Invalid filter set size " , 1 , filterSet . getFilters ( ) . size ( ) ) ; <nl> - <nl> - filterSet . clear ( ) ; <nl> - <nl> - assertEquals ( " Invalid filter set size " , 0 , filterSet . getFilters ( ) . size ( ) ) ; <nl> - } <nl> - } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / exclusionbeforeexecutionfilefilter / InputBeforeExecutionExclusionFileFilterIncorrectClass . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / exclusionbeforeexecutionfilefilter / InputBeforeExecutionExclusionFileFilterIncorrectClass . java <nl> new file mode 100644 <nl> index 0000000 . . 5adc947 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / exclusionbeforeexecutionfilefilter / InputBeforeExecutionExclusionFileFilterIncorrectClass . java <nl> @ @ - 0 , 0 + 1 @ @ <nl> + ! @ # $ ^ $ ^ & % 5 <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / exclusionbeforeexecutionfilefilter / InputExclusionBeforeExecutionFileFilterIncorrectClass . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / exclusionbeforeexecutionfilefilter / InputExclusionBeforeExecutionFileFilterIncorrectClass . java <nl> deleted file mode 100644 <nl> index 5adc947 . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / exclusionbeforeexecutionfilefilter / InputExclusionBeforeExecutionFileFilterIncorrectClass . java <nl> + + + / dev / null <nl> @ @ - 1 + 0 , 0 @ @ <nl> - ! @ # $ ^ $ ^ & % 5 <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / api / fileset / InputFileSetIllegalTokens . java b / src / test / resources / com / puppycrawl / tools / checkstyle / api / fileset / InputFileSetIllegalTokens . java <nl> new file mode 100644 <nl> index 0000000 . . 301c9c6 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / api / fileset / InputFileSetIllegalTokens . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . puppycrawl . tools . checkstyle . api . fileset ; <nl> + <nl> + public class InputFileSetIllegalTokens <nl> + { <nl> + public void methodWithPreviouslyIllegalTokens ( ) <nl> + { <nl> + int i = 0 ; <nl> + switch ( i ) <nl> + { <nl> + default : <nl> + i - - ; <nl> + i + + ; <nl> + break ; <nl> + } <nl> + } <nl> + <nl> + public native void nativeMethod ( ) ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / fileset / InputFileSetCheckLifecycleIllegalTokens . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / fileset / InputFileSetCheckLifecycleIllegalTokens . java <nl> deleted file mode 100644 <nl> index ccf507f . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / fileset / InputFileSetCheckLifecycleIllegalTokens . java <nl> + + + / dev / null <nl> @ @ - 1 , 18 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . misc . fileset ; <nl> - <nl> - public class InputFileSetCheckLifecycleIllegalTokens <nl> - { <nl> - public void methodWithPreviouslyIllegalTokens ( ) <nl> - { <nl> - int i = 0 ; <nl> - switch ( i ) <nl> - { <nl> - default : <nl> - i - - ; <nl> - i + + ; <nl> - break ; <nl> - } <nl> - } <nl> - <nl> - public native void nativeMethod ( ) ; <nl> - }

TEST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 2b5dbe2 . . cf8452a 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 271 , 7 + 271 , 7 @ @ 
 < dependency > 
 < groupId > com . google . guava < / groupId > 
 < artifactId > guava < / artifactId > 
 - < version > 23 . 3 - jre < / version > 
 + < version > 23 . 4 - jre < / version > 
 < / dependency > 
 < dependency > 
 < groupId > org . apache . ant < / groupId >

NEAREST DIFF:
diff - - git a / pom . xml b / pom . xml 
 index 6152211 . . a5bb1ff 100644 
 - - - a / pom . xml 
 + + + b / pom . xml 
 @ @ - 1656 , 7 + 1656 , 6 @ @ 
 < param > com . puppycrawl . tools . checkstyle . checks . ArrayTypeStyleCheckTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . checks . AvoidEscapedUnicodeCharactersCheckTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . checks . DescendantTokenCheckTest < / param > 
 - < param > com . puppycrawl . tools . checkstyle . checks . FileSetCheckLifecycleTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . checks . FinalParametersCheckTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . checks . NewlineAtEndOfFileCheckTest < / param > 
 < param > com . puppycrawl . tools . checkstyle . checks . OuterTypeFilenameCheckTest < / param > 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / BeforeExecutionFileFilterSetTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / BeforeExecutionFileFilterSetTest . java 
 new file mode 100644 
 index 0000000 . . 428cd2b 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / BeforeExecutionFileFilterSetTest . java 
 @ @ - 0 , 0 + 1 , 83 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . api ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + import java . util . regex . Pattern ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . filefilters . BeforeExecutionExclusionFileFilter ; 
 + 
 + public class BeforeExecutionFileFilterSetTest { 
 + @ Test 
 + public void testAccept ( ) { 
 + final String fileName = " BAD " ; 
 + final BeforeExecutionExclusionFileFilter filter = new BeforeExecutionExclusionFileFilter ( ) ; 
 + filter . setFileNamePattern ( Pattern . compile ( fileName ) ) ; 
 + final BeforeExecutionFileFilterSet set = new BeforeExecutionFileFilterSet ( ) ; 
 + set . addBeforeExecutionFileFilter ( filter ) ; 
 + 
 + assertTrue ( " Invalid accept state , should accept " , set . accept ( " ATest . java " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testReject ( ) { 
 + final String fileName = " Test " ; 
 + final BeforeExecutionExclusionFileFilter filter = new BeforeExecutionExclusionFileFilter ( ) ; 
 + filter . setFileNamePattern ( Pattern . compile ( fileName ) ) ; 
 + final BeforeExecutionFileFilterSet set = new BeforeExecutionFileFilterSet ( ) ; 
 + set . addBeforeExecutionFileFilter ( filter ) ; 
 + 
 + assertFalse ( " Invalid accept state , should not accept " , set . accept ( " ATest . java " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetFilters2 ( ) { 
 + final BeforeExecutionFileFilterSet filterSet = new BeforeExecutionFileFilterSet ( ) ; 
 + filterSet . addBeforeExecutionFileFilter ( new BeforeExecutionExclusionFileFilter ( ) ) ; 
 + assertEquals ( " size is the same " , 1 , filterSet . getBeforeExecutionFileFilters ( ) . size ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testToString2 ( ) { 
 + final BeforeExecutionFileFilterSet filterSet = new BeforeExecutionFileFilterSet ( ) ; 
 + filterSet . addBeforeExecutionFileFilter ( new BeforeExecutionExclusionFileFilter ( ) ) ; 
 + assertNotNull ( " size is the same " , filterSet . toString ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testClear ( ) { 
 + final BeforeExecutionFileFilterSet filterSet = new BeforeExecutionFileFilterSet ( ) ; 
 + filterSet . addBeforeExecutionFileFilter ( new BeforeExecutionExclusionFileFilter ( ) ) ; 
 + 
 + assertEquals ( " Invalid filter set size " , 
 + 1 , filterSet . getBeforeExecutionFileFilters ( ) . size ( ) ) ; 
 + 
 + filterSet . clear ( ) ; 
 + 
 + assertEquals ( " Invalid filter set size " , 
 + 0 , filterSet . getBeforeExecutionFileFilters ( ) . size ( ) ) ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FileSetCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileSetCheckTest . java 
 new file mode 100644 
 index 0000000 . . 1a1873c 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FileSetCheckTest . java 
 @ @ - 0 , 0 + 1 , 89 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . api ; 
 + 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + import java . io . File ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 + 
 + public class FileSetCheckTest 
 + extends AbstractModuleTestSupport { 
 + @ Override 
 + protected String getPackageLocation ( ) { 
 + return " com / puppycrawl / tools / checkstyle / api / fileset " ; 
 + } 
 + 
 + @ Test 
 + public void testTranslation ( ) throws Exception { 
 + final Configuration checkConfig = 
 + createModuleConfig ( TestFileSetCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( checkConfig , getPath ( " InputFileSetIllegalTokens . java " ) , expected ) ; 
 + 
 + assertTrue ( " destroy ( ) not called by Checker " , TestFileSetCheck . isDestroyed ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testProcessCallsFinishBeforeCallingDestroy ( ) throws Exception { 
 + 
 + final Configuration checkConfig = 
 + createModuleConfig ( TestFileSetCheck . class ) ; 
 + final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + 
 + verify ( checkConfig , getPath ( " InputFileSetIllegalTokens . java " ) , expected ) ; 
 + 
 + assertTrue ( " FileContent should be available during finishProcessing ( ) call " , 
 + TestFileSetCheck . isFileContentAvailable ( ) ) ; 
 + } 
 + 
 + private static class TestFileSetCheck extends AbstractFileSetCheck { 
 + private static boolean destroyed ; 
 + private static boolean fileContentAvailable ; 
 + private static FileContents contents ; 
 + 
 + @ Override 
 + public void destroy ( ) { 
 + destroyed = true ; 
 + } 
 + 
 + public static boolean isDestroyed ( ) { 
 + return destroyed ; 
 + } 
 + 
 + public static boolean isFileContentAvailable ( ) { 
 + return fileContentAvailable ; 
 + } 
 + 
 + @ Override 
 + protected void processFiltered ( File file , FileText fileText ) { 
 + contents = new FileContents ( fileText ) ; 
 + } 
 + 
 + @ Override 
 + public void finishProcessing ( ) { 
 + fileContentAvailable = contents ! = null ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / api / FilterSetTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / api / FilterSetTest . java 
 new file mode 100644 
 index 0000000 . . d66e436 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / api / FilterSetTest . java 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . api ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertNotNull ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . filters . SeverityMatchFilter ; 
 + import nl . jqno . equalsverifier . EqualsVerifier ; 
 + 
 + / * * Tests SuppressElementFilter . * / 
 + public class FilterSetTest { 
 + @ Test 
 + public void testEqualsAndHashCode ( ) { 
 + EqualsVerifier . forClass ( FilterSet . class ) . usingGetClass ( ) . verify ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetFilters ( ) { 
 + final FilterSet filterSet = new FilterSet ( ) ; 
 + filterSet . addFilter ( new SeverityMatchFilter ( ) ) ; 
 + assertEquals ( " size is the same " , 1 , filterSet . getFilters ( ) . size ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testToString ( ) { 
 + final FilterSet filterSet = new FilterSet ( ) ; 
 + filterSet . addFilter ( new SeverityMatchFilter ( ) ) ; 
 + assertNotNull ( " size is the same " , filterSet . toString ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testClear ( ) { 
 + final FilterSet filterSet = new FilterSet ( ) ; 
 + filterSet . addFilter ( new SeverityMatchFilter ( ) ) ; 
 + 
 + assertEquals ( " Invalid filter set size " , 1 , filterSet . getFilters ( ) . size ( ) ) ; 
 + 
 + filterSet . clear ( ) ; 
 + 
 + assertEquals ( " Invalid filter set size " , 0 , filterSet . getFilters ( ) . size ( ) ) ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 deleted file mode 100644 
 index 6aff6a3 . . 0000000 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / FileSetCheckLifecycleTest . java 
 + + + / dev / null 
 @ @ - 1 , 112 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . checks ; 
 - 
 - import static org . junit . Assert . assertTrue ; 
 - 
 - import java . io . File ; 
 - import java . util . Locale ; 
 - 
 - import org . junit . Test ; 
 - 
 - import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 - import com . puppycrawl . tools . checkstyle . Checker ; 
 - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 - import com . puppycrawl . tools . checkstyle . TreeWalker ; 
 - import com . puppycrawl . tools . checkstyle . api . AbstractFileSetCheck ; 
 - import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 - import com . puppycrawl . tools . checkstyle . api . FileContents ; 
 - import com . puppycrawl . tools . checkstyle . api . FileText ; 
 - import com . puppycrawl . tools . checkstyle . checks . imports . AvoidStarImportCheck ; 
 - import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 - 
 - public class FileSetCheckLifecycleTest 
 - extends AbstractModuleTestSupport { 
 - @ Override 
 - protected String getPackageLocation ( ) { 
 - return " com / puppycrawl / tools / checkstyle / checks / misc / fileset " ; 
 - } 
 - 
 - @ Test 
 - public void testTranslation ( ) throws Exception { 
 - final Configuration checkConfig = 
 - createModuleConfig ( TestFileSetCheck . class ) ; 
 - final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( checkConfig , getPath ( " InputFileSetCheckLifecycleIllegalTokens . java " ) , expected ) ; 
 - 
 - assertTrue ( " destroy ( ) not called by Checker " , TestFileSetCheck . isDestroyed ( ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testProcessCallsFinishBeforeCallingDestroy ( ) throws Exception { 
 - 
 - final DefaultConfiguration dc = new DefaultConfiguration ( " configuration " ) ; 
 - final DefaultConfiguration twConf = createModuleConfig ( TreeWalker . class ) ; 
 - dc . addAttribute ( " charset " , " UTF - 8 " ) ; 
 - dc . addChild ( twConf ) ; 
 - twConf . addChild ( new DefaultConfiguration ( AvoidStarImportCheck . class . getName ( ) ) ) ; 
 - 
 - final Checker checker = new Checker ( ) ; 
 - final Locale locale = Locale . ROOT ; 
 - checker . setLocaleCountry ( locale . getCountry ( ) ) ; 
 - checker . setLocaleLanguage ( locale . getLanguage ( ) ) ; 
 - checker . setModuleClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - checker . configure ( dc ) ; 
 - checker . addListener ( getBriefUtLogger ( ) ) ; 
 - 
 - checker . addFileSetCheck ( new TestFileSetCheck ( ) ) ; 
 - 
 - final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - 
 - verify ( checker , getPath ( " InputFileSetCheckLifecycleIllegalTokens . java " ) , expected ) ; 
 - 
 - assertTrue ( " FileContent should be available during finishProcessing ( ) call " , 
 - TestFileSetCheck . isFileContentAvailable ( ) ) ; 
 - } 
 - 
 - private static class TestFileSetCheck extends AbstractFileSetCheck { 
 - private static boolean destroyed ; 
 - private static boolean fileContentAvailable ; 
 - private static FileContents contents ; 
 - 
 - @ Override 
 - public void destroy ( ) { 
 - destroyed = true ; 
 - } 
 - 
 - public static boolean isDestroyed ( ) { 
 - return destroyed ; 
 - } 
 - 
 - public static boolean isFileContentAvailable ( ) { 
 - return fileContentAvailable ; 
 - } 
 - 
 - @ Override 
 - protected void processFiltered ( File file , FileText fileText ) { 
 - contents = new FileContents ( fileText ) ; 
 - } 
 - 
 - @ Override 
 - public void finishProcessing ( ) { 
 - fileContentAvailable = contents ! = null ; 
 - } 
 - } 
 - } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / BeforeExecutionExclusionFileFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / BeforeExecutionExclusionFileFilterTest . java 
 new file mode 100644 
 index 0000000 . . 4dd56b7 
 - - - / dev / null 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / BeforeExecutionExclusionFileFilterTest . java 
 @ @ - 0 , 0 + 1 , 100 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / checkstyle : Checks Java source code for adherence to a set of rules . 
 + / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 + / / 
 + / / This library is free software ; you can redistribute it and / or 
 + / / modify it under the terms of the GNU Lesser General Public 
 + / / License as published by the Free Software Foundation ; either 
 + / / version 2 . 1 of the License , or ( at your option ) any later version . 
 + / / 
 + / / This library is distributed in the hope that it will be useful , 
 + / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + / / Lesser General Public License for more details . 
 + / / 
 + / / You should have received a copy of the GNU Lesser General Public 
 + / / License along with this library ; if not , write to the Free Software 
 + / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + package com . puppycrawl . tools . checkstyle . filefilters ; 
 + 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + import java . util . regex . Pattern ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 + import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 + import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 + import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 + 
 + public class BeforeExecutionExclusionFileFilterTest extends AbstractModuleTestSupport { 
 + @ Override 
 + protected String getPackageLocation ( ) { 
 + return " com / puppycrawl / tools / checkstyle / filefilters / beforeexecutionexclusionfilefilter " ; 
 + } 
 + 
 + @ Test 
 + public void testAccept ( ) { 
 + final String fileName = " BAD " ; 
 + final BeforeExecutionExclusionFileFilter filter = 
 + createExclusionBeforeExecutionFileFilter ( fileName ) ; 
 + 
 + assertTrue ( " Should accept if file does not exist " , filter . accept ( " ATest . java " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testAcceptOnNullFile ( ) { 
 + final String fileName = null ; 
 + final BeforeExecutionExclusionFileFilter filter = 
 + createExclusionBeforeExecutionFileFilter ( fileName ) ; 
 + 
 + assertTrue ( " Should accept if file is null " , filter . accept ( " AnyJava . java " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testReject ( ) { 
 + final String fileName = " Test " ; 
 + final BeforeExecutionExclusionFileFilter filter = 
 + createExclusionBeforeExecutionFileFilter ( fileName ) ; 
 + 
 + assertFalse ( " Should reject file , but did not " , filter . accept ( " ATest . java " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testRejectBadFile ( ) throws Exception { 
 + final DefaultConfiguration filterConfig = 
 + createBeforeExecutionFileFilterConfig ( BeforeExecutionExclusionFileFilter . class ) ; 
 + filterConfig . addAttribute ( " fileNamePattern " , " IncorrectClass \ \ . java " ) ; 
 + 
 + final String [ ] violations = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 + verify ( createChecker ( filterConfig ) , 
 + getNonCompilablePath ( " InputBeforeExecutionExclusionFileFilterIncorrectClass . java " ) , 
 + violations ) ; 
 + } 
 + 
 + private static BeforeExecutionExclusionFileFilter 
 + createExclusionBeforeExecutionFileFilter ( String fileName ) { 
 + final BeforeExecutionExclusionFileFilter exclusionBeforeExecutionFileFilter = 
 + new BeforeExecutionExclusionFileFilter ( ) ; 
 + if ( fileName ! = null ) { 
 + exclusionBeforeExecutionFileFilter . setFileNamePattern ( Pattern . compile ( fileName ) ) ; 
 + } 
 + return exclusionBeforeExecutionFileFilter ; 
 + } 
 + 
 + private static DefaultConfiguration createBeforeExecutionFileFilterConfig ( Class < ? > aClass ) { 
 + return new DefaultConfiguration ( aClass . getName ( ) ) ; 
 + } 
 + 
 + @ Override 
 + protected DefaultConfiguration createTreeWalkerConfig ( Configuration config ) { 
 + final DefaultConfiguration dc = 
 + new DefaultConfiguration ( " configuration " ) ; 
 + dc . addChild ( config ) ; 
 + return dc ; 
 + } 
 + } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / ExclusionBeforeExecutionFileFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / ExclusionBeforeExecutionFileFilterTest . java 
 deleted file mode 100644 
 index 09fb6ec . . 0000000 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filefilters / ExclusionBeforeExecutionFileFilterTest . java 
 + + + / dev / null 
 @ @ - 1 , 100 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . filefilters ; 
 - 
 - import static org . junit . Assert . assertFalse ; 
 - import static org . junit . Assert . assertTrue ; 
 - 
 - import java . util . regex . Pattern ; 
 - 
 - import org . junit . Test ; 
 - 
 - import com . puppycrawl . tools . checkstyle . AbstractModuleTestSupport ; 
 - import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 - import com . puppycrawl . tools . checkstyle . api . Configuration ; 
 - import com . puppycrawl . tools . checkstyle . utils . CommonUtils ; 
 - 
 - public class ExclusionBeforeExecutionFileFilterTest extends AbstractModuleTestSupport { 
 - @ Override 
 - protected String getPackageLocation ( ) { 
 - return " com / puppycrawl / tools / checkstyle / filefilters / exclusionbeforeexecutionfilefilter " ; 
 - } 
 - 
 - @ Test 
 - public void testAccept ( ) { 
 - final String fileName = " BAD " ; 
 - final BeforeExecutionExclusionFileFilter filter = 
 - createExclusionBeforeExecutionFileFilter ( fileName ) ; 
 - 
 - assertTrue ( " Should accept if file does not exist " , filter . accept ( " ATest . java " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testAcceptOnNullFile ( ) { 
 - final String fileName = null ; 
 - final BeforeExecutionExclusionFileFilter filter = 
 - createExclusionBeforeExecutionFileFilter ( fileName ) ; 
 - 
 - assertTrue ( " Should accept if file is null " , filter . accept ( " AnyJava . java " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testReject ( ) { 
 - final String fileName = " Test " ; 
 - final BeforeExecutionExclusionFileFilter filter = 
 - createExclusionBeforeExecutionFileFilter ( fileName ) ; 
 - 
 - assertFalse ( " Should reject file , but did not " , filter . accept ( " ATest . java " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testRejectBadFile ( ) throws Exception { 
 - final DefaultConfiguration filterConfig = 
 - createBeforeExecutionFileFilterConfig ( BeforeExecutionExclusionFileFilter . class ) ; 
 - filterConfig . addAttribute ( " fileNamePattern " , " IncorrectClass \ \ . java " ) ; 
 - 
 - final String [ ] violations = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 - verify ( createChecker ( filterConfig ) , 
 - getNonCompilablePath ( " InputExclusionBeforeExecutionFileFilterIncorrectClass . java " ) , 
 - violations ) ; 
 - } 
 - 
 - private static BeforeExecutionExclusionFileFilter 
 - createExclusionBeforeExecutionFileFilter ( String fileName ) { 
 - final BeforeExecutionExclusionFileFilter exclusionBeforeExecutionFileFilter = 
 - new BeforeExecutionExclusionFileFilter ( ) ; 
 - if ( fileName ! = null ) { 
 - exclusionBeforeExecutionFileFilter . setFileNamePattern ( Pattern . compile ( fileName ) ) ; 
 - } 
 - return exclusionBeforeExecutionFileFilter ; 
 - } 
 - 
 - private static DefaultConfiguration createBeforeExecutionFileFilterConfig ( Class < ? > aClass ) { 
 - return new DefaultConfiguration ( aClass . getName ( ) ) ; 
 - } 
 - 
 - @ Override 
 - protected DefaultConfiguration createTreeWalkerConfig ( Configuration config ) { 
 - final DefaultConfiguration dc = 
 - new DefaultConfiguration ( " configuration " ) ; 
 - dc . addChild ( config ) ; 
 - return dc ; 
 - } 
 - } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / BeforeExecutionFileFilterSetTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / BeforeExecutionFileFilterSetTest . java 
 deleted file mode 100644 
 index f4e81b0 . . 0000000 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / BeforeExecutionFileFilterSetTest . java 
 + + + / dev / null 
 @ @ - 1 , 84 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . filters ; 
 - 
 - import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertFalse ; 
 - import static org . junit . Assert . assertNotNull ; 
 - import static org . junit . Assert . assertTrue ; 
 - 
 - import java . util . regex . Pattern ; 
 - 
 - import org . junit . Test ; 
 - 
 - import com . puppycrawl . tools . checkstyle . api . BeforeExecutionFileFilterSet ; 
 - import com . puppycrawl . tools . checkstyle . filefilters . BeforeExecutionExclusionFileFilter ; 
 - 
 - public class BeforeExecutionFileFilterSetTest { 
 - @ Test 
 - public void testAccept ( ) { 
 - final String fileName = " BAD " ; 
 - final BeforeExecutionExclusionFileFilter filter = new BeforeExecutionExclusionFileFilter ( ) ; 
 - filter . setFileNamePattern ( Pattern . compile ( fileName ) ) ; 
 - final BeforeExecutionFileFilterSet set = new BeforeExecutionFileFilterSet ( ) ; 
 - set . addBeforeExecutionFileFilter ( filter ) ; 
 - 
 - assertTrue ( " Invalid accept state , should accept " , set . accept ( " ATest . java " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testReject ( ) { 
 - final String fileName = " Test " ; 
 - final BeforeExecutionExclusionFileFilter filter = new BeforeExecutionExclusionFileFilter ( ) ; 
 - filter . setFileNamePattern ( Pattern . compile ( fileName ) ) ; 
 - final BeforeExecutionFileFilterSet set = new BeforeExecutionFileFilterSet ( ) ; 
 - set . addBeforeExecutionFileFilter ( filter ) ; 
 - 
 - assertFalse ( " Invalid accept state , should not accept " , set . accept ( " ATest . java " ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testGetFilters2 ( ) { 
 - final BeforeExecutionFileFilterSet filterSet = new BeforeExecutionFileFilterSet ( ) ; 
 - filterSet . addBeforeExecutionFileFilter ( new BeforeExecutionExclusionFileFilter ( ) ) ; 
 - assertEquals ( " size is the same " , 1 , filterSet . getBeforeExecutionFileFilters ( ) . size ( ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testToString2 ( ) { 
 - final BeforeExecutionFileFilterSet filterSet = new BeforeExecutionFileFilterSet ( ) ; 
 - filterSet . addBeforeExecutionFileFilter ( new BeforeExecutionExclusionFileFilter ( ) ) ; 
 - assertNotNull ( " size is the same " , filterSet . toString ( ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testClear ( ) { 
 - final BeforeExecutionFileFilterSet filterSet = new BeforeExecutionFileFilterSet ( ) ; 
 - filterSet . addBeforeExecutionFileFilter ( new BeforeExecutionExclusionFileFilter ( ) ) ; 
 - 
 - assertEquals ( " Invalid filter set size " , 
 - 1 , filterSet . getBeforeExecutionFileFilters ( ) . size ( ) ) ; 
 - 
 - filterSet . clear ( ) ; 
 - 
 - assertEquals ( " Invalid filter set size " , 
 - 0 , filterSet . getBeforeExecutionFileFilters ( ) . size ( ) ) ; 
 - } 
 - } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / CsvFilterTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / CsvFilterTest . java 
 index b797e10 . . 769751b 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / CsvFilterTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / filters / CsvFilterTest . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package com . puppycrawl . tools . checkstyle . filters ; 
 
 + import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertTrue ; 
 
 @ @ - 77 , 6 + 78 , 38 @ @ public class CsvFilterTest { 
 } 
 
 @ Test 
 + public void testEmptyChain ( ) { 
 + final CsvFilter filter = new CsvFilter ( " " ) ; 
 + assertFalse ( " 0 " , filter . accept ( 0 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testOneFilter ( ) { 
 + final CsvFilter filter = new CsvFilter ( " " ) ; 
 + filter . addFilter ( new IntMatchFilter ( 0 ) ) ; 
 + assertTrue ( " 0 " , filter . accept ( 0 ) ) ; 
 + assertFalse ( " 1 " , filter . accept ( 1 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testMultipleFilter ( ) { 
 + final CsvFilter filter = new CsvFilter ( " " ) ; 
 + filter . addFilter ( new IntMatchFilter ( 0 ) ) ; 
 + filter . addFilter ( new IntRangeFilter ( 0 , 2 ) ) ; 
 + assertTrue ( " 0 " , filter . accept ( 0 ) ) ; 
 + assertTrue ( " 1 " , filter . accept ( 1 ) ) ; 
 + filter . addFilter ( new IntRangeFilter ( 3 , 4 ) ) ; 
 + assertTrue ( " 0 is in [ 3 , 4 ] " , filter . accept ( 0 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetFilters ( ) { 
 + final CsvFilter filter = new CsvFilter ( " " ) ; 
 + filter . addFilter ( new IntMatchFilter ( 0 ) ) ; 
 + assertEquals ( " size is the same " , 1 , filter . getFilters ( ) . size ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testEqualsAndHashCode ( ) { 
 EqualsVerifier . forClass ( CsvFilter . class ) . usingGetClass ( ) . verify ( ) ; 
 } 
 diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / filters / FilterSetTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / filters / FilterSetTest . java 
 deleted file mode 100644 
 index 101a2fb . . 0000000 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / filters / FilterSetTest . java 
 + + + / dev / null 
 @ @ - 1 , 100 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / checkstyle : Checks Java source code for adherence to a set of rules . 
 - / / Copyright ( C ) 2001 - 2017 the original author or authors . 
 - / / 
 - / / This library is free software ; you can redistribute it and / or 
 - / / modify it under the terms of the GNU Lesser General Public 
 - / / License as published by the Free Software Foundation ; either 
 - / / version 2 . 1 of the License , or ( at your option ) any later version . 
 - / / 
 - / / This library is distributed in the hope that it will be useful , 
 - / / but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - / / MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - / / Lesser General Public License for more details . 
 - / / 
 - / / You should have received a copy of the GNU Lesser General Public 
 - / / License along with this library ; if not , write to the Free Software 
 - / / Foundation , Inc . , 59 Temple Place , Suite 330 , Boston , MA 02111 - 1307 USA 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - 
 - package com . puppycrawl . tools . checkstyle . filters ; 
 - 
 - import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertFalse ; 
 - import static org . junit . Assert . assertNotNull ; 
 - import static org . junit . Assert . assertTrue ; 
 - 
 - import org . junit . Before ; 
 - import org . junit . Test ; 
 - 
 - import com . puppycrawl . tools . checkstyle . api . FilterSet ; 
 - import nl . jqno . equalsverifier . EqualsVerifier ; 
 - 
 - / * * Tests SuppressElementFilter . * / 
 - public class FilterSetTest { 
 - private CsvFilter filter ; 
 - 
 - @ Before 
 - public void setUp ( ) { 
 - filter = new CsvFilter ( " " ) ; 
 - } 
 - 
 - @ Test 
 - public void testEmptyChain ( ) { 
 - assertFalse ( " 0 " , filter . accept ( 0 ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testOneFilter ( ) { 
 - filter . addFilter ( new IntMatchFilter ( 0 ) ) ; 
 - assertTrue ( " 0 " , filter . accept ( 0 ) ) ; 
 - assertFalse ( " 1 " , filter . accept ( 1 ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testMultipleFilter ( ) { 
 - filter . addFilter ( new IntMatchFilter ( 0 ) ) ; 
 - filter . addFilter ( new IntRangeFilter ( 0 , 2 ) ) ; 
 - assertTrue ( " 0 " , filter . accept ( 0 ) ) ; 
 - assertTrue ( " 1 " , filter . accept ( 1 ) ) ; 
 - filter . addFilter ( new IntRangeFilter ( 3 , 4 ) ) ; 
 - assertTrue ( " 0 is in [ 3 , 4 ] " , filter . accept ( 0 ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testEqualsAndHashCode ( ) { 
 - EqualsVerifier . forClass ( FilterSet . class ) . usingGetClass ( ) . verify ( ) ; 
 - } 
 - 
 - @ Test 
 - public void testGetFilters ( ) { 
 - filter . addFilter ( new IntMatchFilter ( 0 ) ) ; 
 - assertEquals ( " size is the same " , 1 , filter . getFilters ( ) . size ( ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testGetFilters2 ( ) { 
 - final FilterSet filterSet = new FilterSet ( ) ; 
 - filterSet . addFilter ( new SeverityMatchFilter ( ) ) ; 
 - assertEquals ( " size is the same " , 1 , filterSet . getFilters ( ) . size ( ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testToString2 ( ) { 
 - final FilterSet filterSet = new FilterSet ( ) ; 
 - filterSet . addFilter ( new SeverityMatchFilter ( ) ) ; 
 - assertNotNull ( " size is the same " , filterSet . toString ( ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testClear ( ) { 
 - final FilterSet filterSet = new FilterSet ( ) ; 
 - filterSet . addFilter ( new SeverityMatchFilter ( ) ) ; 
 - 
 - assertEquals ( " Invalid filter set size " , 1 , filterSet . getFilters ( ) . size ( ) ) ; 
 - 
 - filterSet . clear ( ) ; 
 - 
 - assertEquals ( " Invalid filter set size " , 0 , filterSet . getFilters ( ) . size ( ) ) ; 
 - } 
 - } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / exclusionbeforeexecutionfilefilter / InputBeforeExecutionExclusionFileFilterIncorrectClass . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / exclusionbeforeexecutionfilefilter / InputBeforeExecutionExclusionFileFilterIncorrectClass . java 
 new file mode 100644 
 index 0000000 . . 5adc947 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / exclusionbeforeexecutionfilefilter / InputBeforeExecutionExclusionFileFilterIncorrectClass . java 
 @ @ - 0 , 0 + 1 @ @ 
 + ! @ # $ ^ $ ^ & % 5 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / exclusionbeforeexecutionfilefilter / InputExclusionBeforeExecutionFileFilterIncorrectClass . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / exclusionbeforeexecutionfilefilter / InputExclusionBeforeExecutionFileFilterIncorrectClass . java 
 deleted file mode 100644 
 index 5adc947 . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / filefilters / exclusionbeforeexecutionfilefilter / InputExclusionBeforeExecutionFileFilterIncorrectClass . java 
 + + + / dev / null 
 @ @ - 1 + 0 , 0 @ @ 
 - ! @ # $ ^ $ ^ & % 5 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / api / fileset / InputFileSetIllegalTokens . java b / src / test / resources / com / puppycrawl / tools / checkstyle / api / fileset / InputFileSetIllegalTokens . java 
 new file mode 100644 
 index 0000000 . . 301c9c6 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / api / fileset / InputFileSetIllegalTokens . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . puppycrawl . tools . checkstyle . api . fileset ; 
 + 
 + public class InputFileSetIllegalTokens 
 + { 
 + public void methodWithPreviouslyIllegalTokens ( ) 
 + { 
 + int i = 0 ; 
 + switch ( i ) 
 + { 
 + default : 
 + i - - ; 
 + i + + ; 
 + break ; 
 + } 
 + } 
 + 
 + public native void nativeMethod ( ) ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / fileset / InputFileSetCheckLifecycleIllegalTokens . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / fileset / InputFileSetCheckLifecycleIllegalTokens . java 
 deleted file mode 100644 
 index ccf507f . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / misc / fileset / InputFileSetCheckLifecycleIllegalTokens . java 
 + + + / dev / null 
 @ @ - 1 , 18 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . misc . fileset ; 
 - 
 - public class InputFileSetCheckLifecycleIllegalTokens 
 - { 
 - public void methodWithPreviouslyIllegalTokens ( ) 
 - { 
 - int i = 0 ; 
 - switch ( i ) 
 - { 
 - default : 
 - i - - ; 
 - i + + ; 
 - break ; 
 - } 
 - } 
 - 
 - public native void nativeMethod ( ) ; 
 - }
