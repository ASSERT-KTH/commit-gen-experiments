BLEU SCORE: 0.0734705312597788

TEST MSG: Issue # 4165 : Split and Organize Checkstyle inputs by Test for IllegalInstantiationCheckTest
GENERATED MSG: Issue # 2161 : unify test input locations for regexp package

TEST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> index b7e0d1f . . 4959c90 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java <nl> @ @ - 41 , 23 + 41 , 26 @ @ public class IllegalInstantiationCheckTest <nl> @ Override <nl> protected String getPath ( String filename ) throws IOException { <nl> return super . getPath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator <nl> + + " illegalinstantiation " + File . separator + filename ) ; <nl> } <nl> <nl> @ Override <nl> protected String getNonCompilablePath ( String filename ) throws IOException { <nl> return super . getNonCompilablePath ( " checks " + File . separator <nl> - + " coding " + File . separator + filename ) ; <nl> + + " coding " + File . separator <nl> + + " illegalinstantiation " + File . separator + filename ) ; <nl> } <nl> <nl> @ Test <nl> - public void testIt ( ) throws Exception { <nl> + public void testDefault ( ) throws Exception { <nl> final DefaultConfiguration checkConfig = <nl> createCheckConfig ( IllegalInstantiationCheck . class ) ; <nl> checkConfig . addAttribute ( <nl> " classes " , <nl> " java . lang . Boolean , " <nl> - + " com . puppycrawl . tools . checkstyle . checks . coding . InputModifier , " <nl> + + " com . puppycrawl . tools . checkstyle . checks . coding . " <nl> + + " illegalinstantiation . InputModifier , " <nl> + " java . io . File , " <nl> + " java . awt . Color " ) ; <nl> final String [ ] expected = { <nl> @ @ - 65 , 11 + 68 , 12 @ @ public class IllegalInstantiationCheckTest <nl> " 24 : 21 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , <nl> " 31 : 16 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , <nl> " 38 : 21 : " + getCheckMessage ( MSG _ KEY , <nl> - " com . puppycrawl . tools . checkstyle . checks . coding . InputModifier " ) , <nl> + " com . puppycrawl . tools . checkstyle . checks . coding . " <nl> + + " illegalinstantiation . InputModifier " ) , <nl> " 41 : 18 : " + getCheckMessage ( MSG _ KEY , " java . io . File " ) , <nl> " 44 : 21 : " + getCheckMessage ( MSG _ KEY , " java . awt . Color " ) , <nl> } ; <nl> - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalInstantiationSemantic . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 78 , 7 + 82 , 7 @ @ public class IllegalInstantiationCheckTest <nl> createCheckConfig ( IllegalInstantiationCheck . class ) ; <nl> final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; <nl> verify ( checkConfig , <nl> - getPath ( " InputIllegalInstantiation2 . java " ) , <nl> + getPath ( " InputIllegalInstantiation . java " ) , <nl> expected ) ; <nl> } <nl> <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationLang . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationLang . java <nl> deleted file mode 100644 <nl> index 01e2104 . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationLang . java <nl> + + + / dev / null <nl> @ @ - 1 , 13 + 0 , 0 @ @ <nl> - package java . lang ; <nl> - <nl> - class Input { <nl> - Boolean obj = new Boolean ( ) ; <nl> - Integer obj2 = new Integer ( ) ; <nl> - } <nl> - <nl> - class Boolean { } <nl> - class Integer { } <nl> - <nl> - class Input2 { <nl> - 	 String a = new String ( ) ; <nl> - } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationNoPackage . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationNoPackage . java <nl> deleted file mode 100644 <nl> index d8c0827 . . 0000000 <nl> - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationNoPackage . java <nl> + + + / dev / null <nl> @ @ - 1 , 5 + 0 , 0 @ @ <nl> - / / no package <nl> - class InputIllegalInstantiationNoPackage { <nl> - Boolean obj1 = new Boolean ( true ) ; <nl> - String obj2 = new String ( ) ; <nl> - } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationLang . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationLang . java <nl> new file mode 100644 <nl> index 0000000 . . 01e2104 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationLang . java <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + package java . lang ; <nl> + <nl> + class Input { <nl> + Boolean obj = new Boolean ( ) ; <nl> + Integer obj2 = new Integer ( ) ; <nl> + } <nl> + <nl> + class Boolean { } <nl> + class Integer { } <nl> + <nl> + class Input2 { <nl> + 	 String a = new String ( ) ; <nl> + } <nl> diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java <nl> new file mode 100644 <nl> index 0000000 . . d8c0827 <nl> - - - / dev / null <nl> + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + / / no package <nl> + class InputIllegalInstantiationNoPackage { <nl> + Boolean obj1 = new Boolean ( true ) ; <nl> + String obj2 = new String ( ) ; <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiation2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiation2 . java <nl> deleted file mode 100644 <nl> index 38acb34 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiation2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 22 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - import java . util . function . Function ; <nl> - import java . util . function . Supplier ; <nl> - <nl> - <nl> - public class InputIllegalInstantiation2 <nl> - { <nl> - <nl> - public static void main ( String [ ] args ) <nl> - { <nl> - <nl> - Supplier < InputMethodReferencesTest2 > supplier = InputMethodReferencesTest2 : : new ; <nl> - Function < Integer , String [ ] > messageArrayFactory = String [ ] : : new ; <nl> - <nl> - } <nl> - <nl> - private static class InputMethodReferencesTest2 < T > <nl> - { <nl> - <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java <nl> deleted file mode 100644 <nl> index b292d21 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java <nl> + + + / dev / null <nl> @ @ - 1 , 135 + 0 , 0 @ @ <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / Test case file for checkstyle . <nl> - / / Created : 2001 <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> - <nl> - import java . io . * ; / / star import for instantiation tests <nl> - import java . awt . Dimension ; / / explicit import for instantiation tests <nl> - import java . awt . Color ; <nl> - <nl> - / * * <nl> - * Test case for detecting simple semantic errors . <nl> - * @ author Lars K Ã¼ hne <nl> - * * / <nl> - class InputSemantic <nl> - { <nl> - / * Boolean instantiation in a static initializer * / <nl> - static { <nl> - Boolean x = new Boolean ( true ) ; <nl> - } <nl> - <nl> - / * Boolean instantiation in a non - static initializer * / <nl> - { <nl> - Boolean x = new Boolean ( true ) ; <nl> - Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; <nl> - } <nl> - <nl> - / * * fully qualified Boolean instantiation in a method . * * / <nl> - Boolean getBoolean ( ) <nl> - { <nl> - return new java . lang . Boolean ( true ) ; <nl> - } <nl> - <nl> - void otherInstantiations ( ) <nl> - { <nl> - / / instantiation of classes in the same package <nl> - Object o1 = new InputBraces ( ) ; <nl> - Object o2 = new InputModifier ( ) ; <nl> - / / classes in another package with . * import <nl> - ByteArrayOutputStream s = new ByteArrayOutputStream ( ) ; <nl> - File f = new File ( " / tmp " ) ; <nl> - / / classes in another package with explicit import <nl> - Dimension dim = new Dimension ( ) ; <nl> - Color col = new Color ( 0 , 0 , 0 ) ; <nl> - } <nl> - <nl> - public class EqualsVsHashCode1 <nl> - { <nl> - public boolean equals ( int a ) / / wrong arg type , don ' t flag <nl> - { <nl> - return a = = 1 ; <nl> - } <nl> - } <nl> - <nl> - public class EqualsVsHashCode2 <nl> - { <nl> - public boolean equals ( String a ) / / don ' t flag <nl> - { <nl> - return true ; <nl> - } <nl> - } <nl> - <nl> - public class EqualsVsHashCode3 <nl> - { <nl> - public boolean equals ( Object a ) / / don ' t flag <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - public int hashCode ( ) <nl> - { <nl> - return 0 ; <nl> - } <nl> - } <nl> - <nl> - public class EqualsVsHashCode4 <nl> - { <nl> - / / in anon inner class <nl> - ByteArrayOutputStream bos1 = new ByteArrayOutputStream ( ) <nl> - { <nl> - public boolean equals ( Object a ) / / don ' t flag <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - public int hashCode ( ) <nl> - { <nl> - return 0 ; <nl> - } <nl> - } ; <nl> - <nl> - ByteArrayOutputStream bos2 = new ByteArrayOutputStream ( ) <nl> - { <nl> - public boolean equals ( Object a ) / / flag <nl> - { <nl> - return true ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - public void triggerEmptyBlockWithoutBlock ( ) <nl> - { <nl> - / / an if statement without a block to increase test coverage <nl> - if ( true ) <nl> - return ; <nl> - } <nl> - <nl> - / / empty instance initializer <nl> - { <nl> - } <nl> - <nl> - public class EqualsVsHashCode5 <nl> - { <nl> - public < A > boolean equals ( int a ) / / wrong arg type , don ' t flag even with generics <nl> - { <nl> - return a = = 1 ; <nl> - } <nl> - } <nl> - <nl> - public class EqualsVsHashCode6 <nl> - { <nl> - public < A > boolean equals ( Comparable < A > a ) / / don ' t flag <nl> - { <nl> - return true ; <nl> - } <nl> - } <nl> - <nl> - private class InputBraces { <nl> - <nl> - } <nl> - <nl> - private class InputModifier { <nl> - <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiation . java <nl> new file mode 100644 <nl> index 0000000 . . 7f51564 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiation . java <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . illegalinstantiation ; <nl> + <nl> + import java . util . function . Function ; <nl> + import java . util . function . Supplier ; <nl> + <nl> + <nl> + public class InputIllegalInstantiation <nl> + { <nl> + <nl> + public static void main ( String [ ] args ) <nl> + { <nl> + <nl> + Supplier < InputMethodReferencesTest2 > supplier = InputMethodReferencesTest2 : : new ; <nl> + Function < Integer , String [ ] > messageArrayFactory = String [ ] : : new ; <nl> + <nl> + } <nl> + <nl> + private static class InputMethodReferencesTest2 < T > <nl> + { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationSemantic . java <nl> new file mode 100644 <nl> index 0000000 . . 967d814 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationSemantic . java <nl> @ @ - 0 , 0 + 1 , 135 @ @ <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Test case file for checkstyle . <nl> + / / Created : 2001 <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + package com . puppycrawl . tools . checkstyle . checks . coding . illegalinstantiation ; <nl> + <nl> + import java . io . * ; / / star import for instantiation tests <nl> + import java . awt . Dimension ; / / explicit import for instantiation tests <nl> + import java . awt . Color ; <nl> + <nl> + / * * <nl> + * Test case for detecting simple semantic errors . <nl> + * @ author Lars K Ã¼ hne <nl> + * * / <nl> + class InputIllegalInstantiationSemantic <nl> + { <nl> + / * Boolean instantiation in a static initializer * / <nl> + static { <nl> + Boolean x = new Boolean ( true ) ; <nl> + } <nl> + <nl> + / * Boolean instantiation in a non - static initializer * / <nl> + { <nl> + Boolean x = new Boolean ( true ) ; <nl> + Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; <nl> + } <nl> + <nl> + / * * fully qualified Boolean instantiation in a method . * * / <nl> + Boolean getBoolean ( ) <nl> + { <nl> + return new java . lang . Boolean ( true ) ; <nl> + } <nl> + <nl> + void otherInstantiations ( ) <nl> + { <nl> + / / instantiation of classes in the same package <nl> + Object o1 = new InputBraces ( ) ; <nl> + Object o2 = new InputModifier ( ) ; <nl> + / / classes in another package with . * import <nl> + ByteArrayOutputStream s = new ByteArrayOutputStream ( ) ; <nl> + File f = new File ( " / tmp " ) ; <nl> + / / classes in another package with explicit import <nl> + Dimension dim = new Dimension ( ) ; <nl> + Color col = new Color ( 0 , 0 , 0 ) ; <nl> + } <nl> + <nl> + public class EqualsVsHashCode1 <nl> + { <nl> + public boolean equals ( int a ) / / wrong arg type , don ' t flag <nl> + { <nl> + return a = = 1 ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode2 <nl> + { <nl> + public boolean equals ( String a ) / / don ' t flag <nl> + { <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode3 <nl> + { <nl> + public boolean equals ( Object a ) / / don ' t flag <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + public int hashCode ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode4 <nl> + { <nl> + / / in anon inner class <nl> + ByteArrayOutputStream bos1 = new ByteArrayOutputStream ( ) <nl> + { <nl> + public boolean equals ( Object a ) / / don ' t flag <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + public int hashCode ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + } ; <nl> + <nl> + ByteArrayOutputStream bos2 = new ByteArrayOutputStream ( ) <nl> + { <nl> + public boolean equals ( Object a ) / / flag <nl> + { <nl> + return true ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + public void triggerEmptyBlockWithoutBlock ( ) <nl> + { <nl> + / / an if statement without a block to increase test coverage <nl> + if ( true ) <nl> + return ; <nl> + } <nl> + <nl> + / / empty instance initializer <nl> + { <nl> + } <nl> + <nl> + public class EqualsVsHashCode5 <nl> + { <nl> + public < A > boolean equals ( int a ) / / wrong arg type , don ' t flag even with generics <nl> + { <nl> + return a = = 1 ; <nl> + } <nl> + } <nl> + <nl> + public class EqualsVsHashCode6 <nl> + { <nl> + public < A > boolean equals ( Comparable < A > a ) / / don ' t flag <nl> + { <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> + private class InputBraces { <nl> + <nl> + } <nl> + <nl> + private class InputModifier { <nl> + <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java <nl> index eff8000 . . 18f41dc 100644 <nl> - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java <nl> + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalCatchCheck . MSG _ KEY ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> @ @ - 30 , 6 + 31 , 12 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; <nl> import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; <nl> <nl> public class IllegalCatchCheckTest extends BaseCheckTestSupport { <nl> + @ Override <nl> + protected String getPath ( String filename ) throws IOException { <nl> + return super . getPath ( " checks " + File . separator <nl> + + " coding " + File . separator + filename ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testDefault ( ) throws Exception { <nl> DefaultConfiguration checkConfig = createCheckConfig ( IllegalCatchCheck . class ) ; <nl> @ @ - 43 , 7 + 50 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { <nl> " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " java . lang . Throwable " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalCatchCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 59 , 7 + 66 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { <nl> " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " java . lang . Throwable " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalCatchCheck . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 73 , 7 + 80 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { <nl> " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " RuntimeException " ) , <nl> } ; <nl> <nl> - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck2 . java " ) , expected ) ; <nl> + verify ( checkConfig , getPath ( " InputIllegalCatchCheck2 . java " ) , expected ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java <nl> new file mode 100644 <nl> index 0000000 . . 976d795 <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputIllegalCatchCheck { <nl> + public void foo ( ) { <nl> + try { / / class names <nl> + } catch ( RuntimeException e ) { <nl> + } catch ( Exception e ) { <nl> + } catch ( Throwable e ) { <nl> + } <nl> + } <nl> + <nl> + public void bar ( ) { <nl> + try { / * fully qualified class names * / <nl> + } catch ( java . lang . RuntimeException e ) { <nl> + } catch ( java . lang . Exception e ) { <nl> + } catch ( java . lang . Throwable e ) { <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java <nl> new file mode 100644 <nl> index 0000000 . . 1fe6b5f <nl> - - - / dev / null <nl> + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + package com . puppycrawl . tools . checkstyle . checks . coding ; <nl> + <nl> + public class InputIllegalCatchCheck2 { <nl> + public void foo ( ) throws OneMoreException { <nl> + try { <nl> + 	 foo1 ( ) ; <nl> + } catch ( RuntimeException | SQLException e ) { } <nl> + try { <nl> + 	 foo1 ( ) ; <nl> + } catch ( RuntimeException | SQLException | OneMoreException e ) { } <nl> + try { <nl> + 	 foo1 ( ) ; <nl> + } catch ( OneMoreException | RuntimeException | SQLException e ) { } <nl> + try { <nl> + 	 foo1 ( ) ; <nl> + } catch ( OneMoreException | SQLException | RuntimeException e ) { } <nl> + <nl> + } <nl> + <nl> + private void foo1 ( ) throws RuntimeException , SQLException , OneMoreException { <nl> + <nl> + } <nl> + <nl> + private class SQLException extends Exception { <nl> + <nl> + } <nl> + <nl> + private class OneMoreException extends Exception { <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java <nl> deleted file mode 100644 <nl> index bc00bcd . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java <nl> + + + / dev / null <nl> @ @ - 1 , 19 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - public class InputIllegalCatchCheck { <nl> - public void foo ( ) { <nl> - try { / / class names <nl> - } catch ( RuntimeException e ) { <nl> - } catch ( Exception e ) { <nl> - } catch ( Throwable e ) { <nl> - } <nl> - } <nl> - <nl> - public void bar ( ) { <nl> - try { / * fully qualified class names * / <nl> - } catch ( java . lang . RuntimeException e ) { <nl> - } catch ( java . lang . Exception e ) { <nl> - } catch ( java . lang . Throwable e ) { <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java <nl> deleted file mode 100644 <nl> index 66ddc24 . . 0000000 <nl> - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java <nl> + + + / dev / null <nl> @ @ - 1 , 31 + 0 , 0 @ @ <nl> - package com . puppycrawl . tools . checkstyle . coding ; <nl> - <nl> - public class InputIllegalCatchCheck2 { <nl> - public void foo ( ) throws OneMoreException { <nl> - try { <nl> - 	 foo1 ( ) ; <nl> - } catch ( RuntimeException | SQLException e ) { } <nl> - try { <nl> - 	 foo1 ( ) ; <nl> - } catch ( RuntimeException | SQLException | OneMoreException e ) { } <nl> - try { <nl> - 	 foo1 ( ) ; <nl> - } catch ( OneMoreException | RuntimeException | SQLException e ) { } <nl> - try { <nl> - 	 foo1 ( ) ; <nl> - } catch ( OneMoreException | SQLException | RuntimeException e ) { } <nl> - <nl> - } <nl> - <nl> - private void foo1 ( ) throws RuntimeException , SQLException , OneMoreException { <nl> - <nl> - } <nl> - <nl> - private class SQLException extends Exception { <nl> - <nl> - } <nl> - <nl> - private class OneMoreException extends Exception { <nl> - <nl> - } <nl> - }

TEST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 index b7e0d1f . . 4959c90 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalInstantiationCheckTest . java 
 @ @ - 41 , 23 + 41 , 26 @ @ public class IllegalInstantiationCheckTest 
 @ Override 
 protected String getPath ( String filename ) throws IOException { 
 return super . getPath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator 
 + + " illegalinstantiation " + File . separator + filename ) ; 
 } 
 
 @ Override 
 protected String getNonCompilablePath ( String filename ) throws IOException { 
 return super . getNonCompilablePath ( " checks " + File . separator 
 - + " coding " + File . separator + filename ) ; 
 + + " coding " + File . separator 
 + + " illegalinstantiation " + File . separator + filename ) ; 
 } 
 
 @ Test 
 - public void testIt ( ) throws Exception { 
 + public void testDefault ( ) throws Exception { 
 final DefaultConfiguration checkConfig = 
 createCheckConfig ( IllegalInstantiationCheck . class ) ; 
 checkConfig . addAttribute ( 
 " classes " , 
 " java . lang . Boolean , " 
 - + " com . puppycrawl . tools . checkstyle . checks . coding . InputModifier , " 
 + + " com . puppycrawl . tools . checkstyle . checks . coding . " 
 + + " illegalinstantiation . InputModifier , " 
 + " java . io . File , " 
 + " java . awt . Color " ) ; 
 final String [ ] expected = { 
 @ @ - 65 , 11 + 68 , 12 @ @ public class IllegalInstantiationCheckTest 
 " 24 : 21 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , 
 " 31 : 16 : " + getCheckMessage ( MSG _ KEY , " java . lang . Boolean " ) , 
 " 38 : 21 : " + getCheckMessage ( MSG _ KEY , 
 - " com . puppycrawl . tools . checkstyle . checks . coding . InputModifier " ) , 
 + " com . puppycrawl . tools . checkstyle . checks . coding . " 
 + + " illegalinstantiation . InputModifier " ) , 
 " 41 : 18 : " + getCheckMessage ( MSG _ KEY , " java . io . File " ) , 
 " 44 : 21 : " + getCheckMessage ( MSG _ KEY , " java . awt . Color " ) , 
 } ; 
 - verify ( checkConfig , getPath ( " InputSemantic . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalInstantiationSemantic . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 78 , 7 + 82 , 7 @ @ public class IllegalInstantiationCheckTest 
 createCheckConfig ( IllegalInstantiationCheck . class ) ; 
 final String [ ] expected = CommonUtils . EMPTY _ STRING _ ARRAY ; 
 verify ( checkConfig , 
 - getPath ( " InputIllegalInstantiation2 . java " ) , 
 + getPath ( " InputIllegalInstantiation . java " ) , 
 expected ) ; 
 } 
 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationLang . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationLang . java 
 deleted file mode 100644 
 index 01e2104 . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationLang . java 
 + + + / dev / null 
 @ @ - 1 , 13 + 0 , 0 @ @ 
 - package java . lang ; 
 - 
 - class Input { 
 - Boolean obj = new Boolean ( ) ; 
 - Integer obj2 = new Integer ( ) ; 
 - } 
 - 
 - class Boolean { } 
 - class Integer { } 
 - 
 - class Input2 { 
 - 	 String a = new String ( ) ; 
 - } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationNoPackage . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationNoPackage . java 
 deleted file mode 100644 
 index d8c0827 . . 0000000 
 - - - a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiationNoPackage . java 
 + + + / dev / null 
 @ @ - 1 , 5 + 0 , 0 @ @ 
 - / / no package 
 - class InputIllegalInstantiationNoPackage { 
 - Boolean obj1 = new Boolean ( true ) ; 
 - String obj2 = new String ( ) ; 
 - } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationLang . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationLang . java 
 new file mode 100644 
 index 0000000 . . 01e2104 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationLang . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package java . lang ; 
 + 
 + class Input { 
 + Boolean obj = new Boolean ( ) ; 
 + Integer obj2 = new Integer ( ) ; 
 + } 
 + 
 + class Boolean { } 
 + class Integer { } 
 + 
 + class Input2 { 
 + 	 String a = new String ( ) ; 
 + } 
 diff - - git a / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java 
 new file mode 100644 
 index 0000000 . . d8c0827 
 - - - / dev / null 
 + + + b / src / test / resources - noncompilable / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationNoPackage . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + / / no package 
 + class InputIllegalInstantiationNoPackage { 
 + Boolean obj1 = new Boolean ( true ) ; 
 + String obj2 = new String ( ) ; 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiation2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiation2 . java 
 deleted file mode 100644 
 index 38acb34 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalInstantiation2 . java 
 + + + / dev / null 
 @ @ - 1 , 22 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - import java . util . function . Function ; 
 - import java . util . function . Supplier ; 
 - 
 - 
 - public class InputIllegalInstantiation2 
 - { 
 - 
 - public static void main ( String [ ] args ) 
 - { 
 - 
 - Supplier < InputMethodReferencesTest2 > supplier = InputMethodReferencesTest2 : : new ; 
 - Function < Integer , String [ ] > messageArrayFactory = String [ ] : : new ; 
 - 
 - } 
 - 
 - private static class InputMethodReferencesTest2 < T > 
 - { 
 - 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java 
 deleted file mode 100644 
 index b292d21 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputSemantic . java 
 + + + / dev / null 
 @ @ - 1 , 135 + 0 , 0 @ @ 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / Test case file for checkstyle . 
 - / / Created : 2001 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - package com . puppycrawl . tools . checkstyle . checks . coding ; 
 - 
 - import java . io . * ; / / star import for instantiation tests 
 - import java . awt . Dimension ; / / explicit import for instantiation tests 
 - import java . awt . Color ; 
 - 
 - / * * 
 - * Test case for detecting simple semantic errors . 
 - * @ author Lars K Ã¼ hne 
 - * * / 
 - class InputSemantic 
 - { 
 - / * Boolean instantiation in a static initializer * / 
 - static { 
 - Boolean x = new Boolean ( true ) ; 
 - } 
 - 
 - / * Boolean instantiation in a non - static initializer * / 
 - { 
 - Boolean x = new Boolean ( true ) ; 
 - Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; 
 - } 
 - 
 - / * * fully qualified Boolean instantiation in a method . * * / 
 - Boolean getBoolean ( ) 
 - { 
 - return new java . lang . Boolean ( true ) ; 
 - } 
 - 
 - void otherInstantiations ( ) 
 - { 
 - / / instantiation of classes in the same package 
 - Object o1 = new InputBraces ( ) ; 
 - Object o2 = new InputModifier ( ) ; 
 - / / classes in another package with . * import 
 - ByteArrayOutputStream s = new ByteArrayOutputStream ( ) ; 
 - File f = new File ( " / tmp " ) ; 
 - / / classes in another package with explicit import 
 - Dimension dim = new Dimension ( ) ; 
 - Color col = new Color ( 0 , 0 , 0 ) ; 
 - } 
 - 
 - public class EqualsVsHashCode1 
 - { 
 - public boolean equals ( int a ) / / wrong arg type , don ' t flag 
 - { 
 - return a = = 1 ; 
 - } 
 - } 
 - 
 - public class EqualsVsHashCode2 
 - { 
 - public boolean equals ( String a ) / / don ' t flag 
 - { 
 - return true ; 
 - } 
 - } 
 - 
 - public class EqualsVsHashCode3 
 - { 
 - public boolean equals ( Object a ) / / don ' t flag 
 - { 
 - return true ; 
 - } 
 - 
 - public int hashCode ( ) 
 - { 
 - return 0 ; 
 - } 
 - } 
 - 
 - public class EqualsVsHashCode4 
 - { 
 - / / in anon inner class 
 - ByteArrayOutputStream bos1 = new ByteArrayOutputStream ( ) 
 - { 
 - public boolean equals ( Object a ) / / don ' t flag 
 - { 
 - return true ; 
 - } 
 - 
 - public int hashCode ( ) 
 - { 
 - return 0 ; 
 - } 
 - } ; 
 - 
 - ByteArrayOutputStream bos2 = new ByteArrayOutputStream ( ) 
 - { 
 - public boolean equals ( Object a ) / / flag 
 - { 
 - return true ; 
 - } 
 - } ; 
 - } 
 - 
 - public void triggerEmptyBlockWithoutBlock ( ) 
 - { 
 - / / an if statement without a block to increase test coverage 
 - if ( true ) 
 - return ; 
 - } 
 - 
 - / / empty instance initializer 
 - { 
 - } 
 - 
 - public class EqualsVsHashCode5 
 - { 
 - public < A > boolean equals ( int a ) / / wrong arg type , don ' t flag even with generics 
 - { 
 - return a = = 1 ; 
 - } 
 - } 
 - 
 - public class EqualsVsHashCode6 
 - { 
 - public < A > boolean equals ( Comparable < A > a ) / / don ' t flag 
 - { 
 - return true ; 
 - } 
 - } 
 - 
 - private class InputBraces { 
 - 
 - } 
 - 
 - private class InputModifier { 
 - 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiation . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiation . java 
 new file mode 100644 
 index 0000000 . . 7f51564 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiation . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding . illegalinstantiation ; 
 + 
 + import java . util . function . Function ; 
 + import java . util . function . Supplier ; 
 + 
 + 
 + public class InputIllegalInstantiation 
 + { 
 + 
 + public static void main ( String [ ] args ) 
 + { 
 + 
 + Supplier < InputMethodReferencesTest2 > supplier = InputMethodReferencesTest2 : : new ; 
 + Function < Integer , String [ ] > messageArrayFactory = String [ ] : : new ; 
 + 
 + } 
 + 
 + private static class InputMethodReferencesTest2 < T > 
 + { 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationSemantic . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationSemantic . java 
 new file mode 100644 
 index 0000000 . . 967d814 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / illegalinstantiation / InputIllegalInstantiationSemantic . java 
 @ @ - 0 , 0 + 1 , 135 @ @ 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Test case file for checkstyle . 
 + / / Created : 2001 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + package com . puppycrawl . tools . checkstyle . checks . coding . illegalinstantiation ; 
 + 
 + import java . io . * ; / / star import for instantiation tests 
 + import java . awt . Dimension ; / / explicit import for instantiation tests 
 + import java . awt . Color ; 
 + 
 + / * * 
 + * Test case for detecting simple semantic errors . 
 + * @ author Lars K Ã¼ hne 
 + * * / 
 + class InputIllegalInstantiationSemantic 
 + { 
 + / * Boolean instantiation in a static initializer * / 
 + static { 
 + Boolean x = new Boolean ( true ) ; 
 + } 
 + 
 + / * Boolean instantiation in a non - static initializer * / 
 + { 
 + Boolean x = new Boolean ( true ) ; 
 + Boolean [ ] y = new Boolean [ ] { Boolean . TRUE , Boolean . FALSE } ; 
 + } 
 + 
 + / * * fully qualified Boolean instantiation in a method . * * / 
 + Boolean getBoolean ( ) 
 + { 
 + return new java . lang . Boolean ( true ) ; 
 + } 
 + 
 + void otherInstantiations ( ) 
 + { 
 + / / instantiation of classes in the same package 
 + Object o1 = new InputBraces ( ) ; 
 + Object o2 = new InputModifier ( ) ; 
 + / / classes in another package with . * import 
 + ByteArrayOutputStream s = new ByteArrayOutputStream ( ) ; 
 + File f = new File ( " / tmp " ) ; 
 + / / classes in another package with explicit import 
 + Dimension dim = new Dimension ( ) ; 
 + Color col = new Color ( 0 , 0 , 0 ) ; 
 + } 
 + 
 + public class EqualsVsHashCode1 
 + { 
 + public boolean equals ( int a ) / / wrong arg type , don ' t flag 
 + { 
 + return a = = 1 ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode2 
 + { 
 + public boolean equals ( String a ) / / don ' t flag 
 + { 
 + return true ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode3 
 + { 
 + public boolean equals ( Object a ) / / don ' t flag 
 + { 
 + return true ; 
 + } 
 + 
 + public int hashCode ( ) 
 + { 
 + return 0 ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode4 
 + { 
 + / / in anon inner class 
 + ByteArrayOutputStream bos1 = new ByteArrayOutputStream ( ) 
 + { 
 + public boolean equals ( Object a ) / / don ' t flag 
 + { 
 + return true ; 
 + } 
 + 
 + public int hashCode ( ) 
 + { 
 + return 0 ; 
 + } 
 + } ; 
 + 
 + ByteArrayOutputStream bos2 = new ByteArrayOutputStream ( ) 
 + { 
 + public boolean equals ( Object a ) / / flag 
 + { 
 + return true ; 
 + } 
 + } ; 
 + } 
 + 
 + public void triggerEmptyBlockWithoutBlock ( ) 
 + { 
 + / / an if statement without a block to increase test coverage 
 + if ( true ) 
 + return ; 
 + } 
 + 
 + / / empty instance initializer 
 + { 
 + } 
 + 
 + public class EqualsVsHashCode5 
 + { 
 + public < A > boolean equals ( int a ) / / wrong arg type , don ' t flag even with generics 
 + { 
 + return a = = 1 ; 
 + } 
 + } 
 + 
 + public class EqualsVsHashCode6 
 + { 
 + public < A > boolean equals ( Comparable < A > a ) / / don ' t flag 
 + { 
 + return true ; 
 + } 
 + } 
 + 
 + private class InputBraces { 
 + 
 + } 
 + 
 + private class InputModifier { 
 + 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java 
 index eff8000 . . 18f41dc 100644 
 - - - a / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java 
 + + + b / src / test / java / com / puppycrawl / tools / checkstyle / checks / coding / IllegalCatchCheckTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package com . puppycrawl . tools . checkstyle . checks . coding ; 
 import static com . puppycrawl . tools . checkstyle . checks . coding . IllegalCatchCheck . MSG _ KEY ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 @ @ - 30 , 6 + 31 , 12 @ @ import com . puppycrawl . tools . checkstyle . BaseCheckTestSupport ; 
 import com . puppycrawl . tools . checkstyle . DefaultConfiguration ; 
 
 public class IllegalCatchCheckTest extends BaseCheckTestSupport { 
 + @ Override 
 + protected String getPath ( String filename ) throws IOException { 
 + return super . getPath ( " checks " + File . separator 
 + + " coding " + File . separator + filename ) ; 
 + } 
 + 
 @ Test 
 public void testDefault ( ) throws Exception { 
 DefaultConfiguration checkConfig = createCheckConfig ( IllegalCatchCheck . class ) ; 
 @ @ - 43 , 7 + 50 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { 
 " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " java . lang . Throwable " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalCatchCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 59 , 7 + 66 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { 
 " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " java . lang . Throwable " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalCatchCheck . java " ) , expected ) ; 
 } 
 
 @ Test 
 @ @ - 73 , 7 + 80 , 7 @ @ public class IllegalCatchCheckTest extends BaseCheckTestSupport { 
 " 16 : 11 : " + getCheckMessage ( MSG _ KEY , " RuntimeException " ) , 
 } ; 
 
 - verify ( checkConfig , getPath ( " coding " + File . separator + " InputIllegalCatchCheck2 . java " ) , expected ) ; 
 + verify ( checkConfig , getPath ( " InputIllegalCatchCheck2 . java " ) , expected ) ; 
 } 
 
 @ Test 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java 
 new file mode 100644 
 index 0000000 . . 976d795 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputIllegalCatchCheck { 
 + public void foo ( ) { 
 + try { / / class names 
 + } catch ( RuntimeException e ) { 
 + } catch ( Exception e ) { 
 + } catch ( Throwable e ) { 
 + } 
 + } 
 + 
 + public void bar ( ) { 
 + try { / * fully qualified class names * / 
 + } catch ( java . lang . RuntimeException e ) { 
 + } catch ( java . lang . Exception e ) { 
 + } catch ( java . lang . Throwable e ) { 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java 
 new file mode 100644 
 index 0000000 . . 1fe6b5f 
 - - - / dev / null 
 + + + b / src / test / resources / com / puppycrawl / tools / checkstyle / checks / coding / InputIllegalCatchCheck2 . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package com . puppycrawl . tools . checkstyle . checks . coding ; 
 + 
 + public class InputIllegalCatchCheck2 { 
 + public void foo ( ) throws OneMoreException { 
 + try { 
 + 	 foo1 ( ) ; 
 + } catch ( RuntimeException | SQLException e ) { } 
 + try { 
 + 	 foo1 ( ) ; 
 + } catch ( RuntimeException | SQLException | OneMoreException e ) { } 
 + try { 
 + 	 foo1 ( ) ; 
 + } catch ( OneMoreException | RuntimeException | SQLException e ) { } 
 + try { 
 + 	 foo1 ( ) ; 
 + } catch ( OneMoreException | SQLException | RuntimeException e ) { } 
 + 
 + } 
 + 
 + private void foo1 ( ) throws RuntimeException , SQLException , OneMoreException { 
 + 
 + } 
 + 
 + private class SQLException extends Exception { 
 + 
 + } 
 + 
 + private class OneMoreException extends Exception { 
 + 
 + } 
 + } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java 
 deleted file mode 100644 
 index bc00bcd . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck . java 
 + + + / dev / null 
 @ @ - 1 , 19 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - public class InputIllegalCatchCheck { 
 - public void foo ( ) { 
 - try { / / class names 
 - } catch ( RuntimeException e ) { 
 - } catch ( Exception e ) { 
 - } catch ( Throwable e ) { 
 - } 
 - } 
 - 
 - public void bar ( ) { 
 - try { / * fully qualified class names * / 
 - } catch ( java . lang . RuntimeException e ) { 
 - } catch ( java . lang . Exception e ) { 
 - } catch ( java . lang . Throwable e ) { 
 - } 
 - } 
 - } 
 diff - - git a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java b / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java 
 deleted file mode 100644 
 index 66ddc24 . . 0000000 
 - - - a / src / test / resources / com / puppycrawl / tools / checkstyle / coding / InputIllegalCatchCheck2 . java 
 + + + / dev / null 
 @ @ - 1 , 31 + 0 , 0 @ @ 
 - package com . puppycrawl . tools . checkstyle . coding ; 
 - 
 - public class InputIllegalCatchCheck2 { 
 - public void foo ( ) throws OneMoreException { 
 - try { 
 - 	 foo1 ( ) ; 
 - } catch ( RuntimeException | SQLException e ) { } 
 - try { 
 - 	 foo1 ( ) ; 
 - } catch ( RuntimeException | SQLException | OneMoreException e ) { } 
 - try { 
 - 	 foo1 ( ) ; 
 - } catch ( OneMoreException | RuntimeException | SQLException e ) { } 
 - try { 
 - 	 foo1 ( ) ; 
 - } catch ( OneMoreException | SQLException | RuntimeException e ) { } 
 - 
 - } 
 - 
 - private void foo1 ( ) throws RuntimeException , SQLException , OneMoreException { 
 - 
 - } 
 - 
 - private class SQLException extends Exception { 
 - 
 - } 
 - 
 - private class OneMoreException extends Exception { 
 - 
 - } 
 - }
